"_io"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.io" "src" "jazz" "io" "_io.jazz"} 1257476715
    {Lisp-Entry "jazz.io" module #f 37 8 37 15 ("jazz")
      {Lisp-Entry "*eol-encoding*" definition #f 51 15 51 29 ("cr-lf" "'cr-lf")}
      {Lisp-Entry "*eol-encoding*" definition #f 54 15 54 29 ("lf" "'lf")}
      {Lisp-Entry "get-eol-encoding" definition #f 58 20 58 36 ("*eol-encoding*")}
      {Lisp-Entry "set-eol-encoding" definition #f 62 20 62 36 ("*eol-encoding*" "set!" "encoding")}
      {Lisp-Entry "*aliases*" definition #f 71 12 71 21 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-aliases" definition #f 75 20 75 31 ("*aliases*")}
      {Lisp-Entry "is-alias?" definition #f 79 20 79 29 ("find-alias" "boolean" "name")}
      {Lisp-Entry "valid-alias?" definition #f 83 20 83 32 ("is-alias?" "name")}
      {Lisp-Entry "get-alias" definition #f 87 20 87 29 ("error" "when" "find-alias" "either" "error?" "error?:" "name")}
      {Lisp-Entry "find-alias" definition #f 93 20 93 30 ("resolve-alias" "when" "get-process" "process" "let" "get-aliases" "table-ref" "either" "name")}
      {Lisp-Entry "register-alias" definition #f 100 20 100 34 ("error" "set-alias" "equal?" "not" "or" "get-aliases" "table-ref" "actual" ":up" "second" "eq?" "2" "length" ">=" "pair?" "and" "if" "process-up" "get-list" "append" "cddr" "sub" "ignored-anchors:" "car" "list" "Directory" "new" "get-parent" "anchorize" "dir" "let" "expand-up" "define" "path" "name")}
      {Lisp-Entry "unregister-alias" definition #f 120 20 120 36 ("get-aliases" "table-clear" "name")}
      {Lisp-Entry "set-alias" definition #f 124 20 124 29 ("get-aliases" "table-set!" "path" "name")}
      {Lisp-Entry "initialize-aliases" definition #f 128 20 128 38 ("register-repositories-aliases" "pathname-normalize" "tokenise-filename" "Home" "'Home" "register-alias" "initialize-platform-aliases")}
      {Lisp-Entry "initialize-platform-aliases" definition #f 136 17 136 44 ("Network" "'Network" "register-alias")}
      {Lisp-Entry "initialize-platform-aliases" definition #f 139 17 139 44 ()}
      {Lisp-Entry "register-repositories-aliases" definition #f 143 13 143 42 ("get-repositories" "repository-packages" ",name" "package-root" "package-name" "package" "lambda" "for-each" "repository-binary?" "unless" "tokenise-filename" "register-alias" "repository-directory" "remove-trailing-char" "directory" "repository-name" "name" "let" "repository" "register-repository" "define")}
      {Lisp-Entry "validate-alias" definition #f 159 13 159 27 ("error" "Directory" "new" "exists?" "if" "path" "name")}
      {Lisp-Entry "extract-name" definition #f 170 20 170 32 ("cardinality" "1" "+" "subseq" "not" "if" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "extract-base" definition #f 177 20 177 32 ("0" "subseq" "not" "if" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "extract-extension" definition #f 184 20 184 37 ("cardinality" "1" "+" "subseq" "when" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "normalize-filename-separators" definition #f 192 16 192 45 ("substitute" "filename")}
      {Lisp-Entry "normalize-filename-separators" definition #f 195 16 195 45 ("filename")}
      {Lisp-Entry "tokenise-filename" definition #f 199 20 199 37 ("cdr" "remove-empty-strings" ":root" "cons" "car" "empty-string?" "if" "normalize-filename-separators" "split" "lst" "let" "filename")}
      {Lisp-Entry "tokenise-windows" definition #f 206 20 206 36 ("cardinality" "2" "subseq" "split" "remove-empty-strings" "Network" "'Network" "cons" "starts-with?" "if" "filename")}
      {Lisp-Entry "make-filename" definition #f 212 20 212 33 ("format" "extension" "base")}
      {Lisp-Entry "get-tmp-directory" definition #f 216 20 216 37 ("tokenise-windows" "Directory" "new" "make-string" "path" "NULL" "0" "GetTempPath" "size" "let*" "get-tmp-directory" "'get-tmp-directory" "unimplemented")}
      {Lisp-Entry "get-protocol-handler" definition #f 230 20 230 40 ("format" "message:" "Parse-Error" "new" "signal" "else" "Directory" "dir" "File" "file" "case" "keyword->symbol" "keyword?" "if" "let" "protocol")}
      {Lisp-Entry "Moniker-Class" class #f 243 7 243 20 ("Class")
        {Lisp-Entry "get-protocol" method #f 246 26 246 38 ()}}
      {Lisp-Entry "Moniker" class #f 250 7 250 14 ("Object" "Moniker-Class")
        {Lisp-Entry "compare-pathname" method #f 253 26 253 42 ("object")}
        {Lisp-Entry "present" method #f 262 26 262 33 ()}
        {Lisp-Entry "present-base" method #f 266 26 266 38 ("get-base" "->string")}
        {Lisp-Entry "present-name" method #f 270 26 270 38 ("get-name" "->string")}
        {Lisp-Entry "present-location" method #f 274 26 274 42 ("get-list" "format")}
        {Lisp-Entry "exists?" method #f 283 26 283 33 ()}
        {Lisp-Entry "read-only?" method #f 287 18 287 28 ("get-writable?" "not")}
        {Lisp-Entry "read/write?" method #f 291 18 291 29 ("get-writable?")}
        {Lisp-Entry "set-read-only" method #f 295 18 295 31 ("set-writable?")}
        {Lisp-Entry "set-read/write" method #f 299 18 299 32 ("set-writable?")}
        {Lisp-Entry "get-writable?" method #f 303 26 303 39 ()}
        {Lisp-Entry "set-writable?" method #f 307 26 307 39 ("flag")}
        {Lisp-Entry "writable?" method #f 311 26 311 35 ()}
        {Lisp-Entry "get-modification-time" method #f 315 26 315 47 ()}
        {Lisp-Entry "get-file" method #f 319 26 319 34 ()}
        {Lisp-Entry "get-name" method #f 323 26 323 34 ()}
        {Lisp-Entry "get-base" method #f 327 26 327 34 ()}
        {Lisp-Entry "get-extension" method #f 331 26 331 39 ()}
        {Lisp-Entry "get-list" method #f 335 26 335 34 ()}
        {Lisp-Entry "get-parent" method #f 339 26 339 36 ()}
        {Lisp-Entry "get-hierarchy" method #f 343 18 343 31 ("cons" "get-parent" "not" "if" "hierarchy" "self" "moniker" "loop" "let")}
        {Lisp-Entry "get-content" method #f 350 26 350 37 ("rest")}
        {Lisp-Entry "get-children" method #f 355 26 355 38 ("rest")}
        {Lisp-Entry "is-different?" method #f 359 26 359 39 ("moniker")}
        {Lisp-Entry "relocated-list" method #f 363 18 363 32 ("length" "tail" "get-list" "append" "new-root" "old-root")}
        {Lisp-Entry "load-lines" method #f 372 26 372 36 ("rest")}
        {Lisp-Entry "save-lines" method #f 376 26 376 36 ("rest" "lines")}
        {Lisp-Entry "load-form" method #f 380 26 380 35 ()}}
      {Lisp-Entry "platform-separator" definition #f 391 16 391 34 ()}
      {Lisp-Entry "platform-separator" definition #f 394 16 394 34 ()}
      {Lisp-Entry "Pathname-Class" class #f 398 7 398 21 ("Moniker" ":class")}
      {Lisp-Entry "Pathname" class #f 401 7 401 15 ("Moniker" "Pathname-Class")
        {Lisp-Entry "path" slot #f 404 8 404 12 ()}
        {Lisp-Entry "initialize" method #f 407 20 407 30 ("set-list" "validate-component" "nextmethod" "lst")}
        {Lisp-Entry "validate-component" definition #f 413 15 413 33 ("else" "cdr" "error" "car" "if" "pair?" "symbol?" "string?" "null?" "cond" "lambda" "validate" "letrec" "original" "let" "object")}
        {Lisp-Entry "parse" method #f 429 18 429 23 ("get-output-string" "pathname-expand" "add-suffix" "get-list" "else" "cdr" "car" "pair?" "get-alias" "is-alias?" "cons" "self" "error" "memq?" "symbol?" "set!" "if" "string?" "display" ":root" "eq?" "null?" "cond" "path" "lambda" "parse" "letrec" "aliases" "first?" "open-output-string" "printer" "let" "separator" "bind-optionals" "rest")}
        {Lisp-Entry "platform-parse" method #f 461 18 461 32 ("platform-separator" "parse")}
        {Lisp-Entry "add-suffix" method #f 465 29 465 39 ("printer")}
        {Lisp-Entry "relocated-pathname" method #f 469 18 469 36 ("length" "tail" "get-list" "append" "new-root" "old-root")}
        {Lisp-Entry "create" method #f 473 26 473 32 ()}
        {Lisp-Entry "move-pathname" method #f 477 18 477 31 ("parse" "file-rename" "error?" "error?:" "dst")}
        {Lisp-Entry "compare-object" method #f 481 20 481 34 (":not-equal" "else" ":equal" "get-list" "=" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "compare-pathname" method #f 490 20 490 36 ("parse" "ci=?" "Pathname" "is?" "and" "object")}
        {Lisp-Entry "valid-aliases?" method #f 495 18 495 32 ("get-list" "get-alias" "is-alias?" "and" "symbol?" "not" "item" "every?" "eq?" "or" "list" "lambda" "valid?" "letrec")}
        {Lisp-Entry "expand" method #f 507 18 507 24 ("get-output" "get-list" "cdr" "car" "pair?" "get-alias" "symbol?" "string?" "put" ":root" "eq?" "cond" "object" "lambda" "expand" "letrec" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "get-list" method #f 522 20 522 28 ("path")}
        {Lisp-Entry "set-list" method #f 526 18 526 26 ("path" "set!" "value")}
        {Lisp-Entry "get-name" method #f 530 20 530 28 ("get-list" "effective-name")}
        {Lisp-Entry "effective-name" method #f 534 11 534 25 ("else" "get-alias" "effective-name" "symbol?" ":root" "eq?" "cond" "last" "name" "let" "lst")}
        {Lisp-Entry "get-base" method #f 544 20 544 28 ("extract-base" "symbol?" "if" "get-name" "name" "let")}
        {Lisp-Entry "get-extension" method #f 551 20 551 33 ("get-name" "extract-extension")}
        {Lisp-Entry "get-parent" method #f 555 20 555 30 ("butlast" "Directory" "new" "cdr" "null?" "or" "expand" "1" "path" "length" "=" "if" "effective-path" "let")}
        {Lisp-Entry "get-brother" method #f 562 18 562 29 ("list" "get-parent" "get-list" "append" "self" "class-of" "new" "name")}
        {Lisp-Entry "new-brother" method #f 566 26 566 37 ("name")}
        {Lisp-Entry "get-directory" method #f 570 26 570 39 ()}
        {Lisp-Entry "get-attributes" method #f 574 18 574 32 ("self" "error" "when" "-1" "=" "if" "parse" "GetFileAttributes" "attributes" "let" "get-attributes" "'get-attributes" "unimplemented" "error?" "error?:")}
        {Lisp-Entry "set-attributes" method #f 584 18 584 32 ("self" "error" "not" "when" "parse" "SetFileAttributes" "ok?" "let" "set-attributes" "'set-attributes" "unimplemented" "flags")}
        {Lisp-Entry "get-writable?" method #f 592 20 592 33 ("FILE_ATTRIBUTE_READONLY" "get-attributes" "mask-bit-set?" "not")}
        {Lisp-Entry "set-writable?" method #f 598 20 598 33 ("not" "FILE_ATTRIBUTE_READONLY" "get-attributes" "mask-bit-set" "set-attributes" "set-writable?" "'set-writable?" "unimplemented" "flag")}
        {Lisp-Entry "exists?" method #f 604 20 604 27 ("parse" "file-exists?")}
        {Lisp-Entry "create-directories" method #f 608 18 608 36 ("create" "exists?" "unless" "dir" "lambda" "for-each" "get-parent" "cons" "set!" "while" "dirs" "expand" "Directory" "new" "scan" "get-directory" "base" "let*")}
        {Lisp-Entry "anchor-to" method #f 627 18 627 27 ("class-of" "new" "subseq" "append" "else" "continuation-return" "self" "error" "if" "<" "set!" "not" "cond" "return" "lambda" "continuation-capture" "unspecified" "result-list" "ci=?" "test:" "mismatch" "rank" "expd" "length" "base-length" "expand" "base-expd" "get-list" "base-list" "let*" "error?" "error?:" "anchor")}
        {Lisp-Entry "anchorize" method #f 647 18 647 27 ("car" "self" "null?" "if" "get-list" "length" "path" "key:" "<" "sort" "sorted" "error?:" "list" "Directory" "new" "anchor-to" "valid-alias?" "when" "anchor" "lambda" "collect" "anchored" "default-anchors" "either" "difference" "let*" "ignored-anchors" "ignored-anchors:" "anchors" "anchors:")}
        {Lisp-Entry "default-anchors" method #f 656 11 656 26 ("get-application" "application-anchors")}}
      {Lisp-Entry "pathname?" definition #f 660 27 660 36 ("Pathname" "is?" "object")}
      {Lisp-Entry "pathname=?" definition #f 664 27 664 37 ("compare-pathname" "y" "x")}
      {Lisp-Entry "pathname-exists?" definition #f 668 27 668 43 ("parse" "file-exists?" "pathname")}
      {Lisp-Entry "pathname-delete" definition #f 672 27 672 42 ("parse" "file-delete" "pathname")}
      {Lisp-Entry "pathname-modification-time" definition #f 676 27 676 53 ("parse" "file-modification-time" "pathname")}
      {Lisp-Entry "File-Class" class #f 685 7 685 17 ("Pathname" ":class")
        {Lisp-Entry "get-protocol" method #f 688 20 688 32 ("file" "'file")}}
      {Lisp-Entry "create-temporary-file" definition #f 692 20 692 41 ("tokenise-windows" "File" "new" "adjust-string" "0" "GetTempFileName" "MAX_PATH" "make-string" "filename" "let" "error" "empty-string?" "if" "parse" "dir" "get-tmp-directory" "either" "let*" "create-temporary-file" "'create-temporary-file" "unimplemented" "prefix" "prefix:" "directory" "directory:")}
      {Lisp-Entry "File" class #f 705 7 705 11 ("Pathname" "File-Class")
        {Lisp-Entry "print" method #f 708 20 708 25 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "new-brother" method #f 719 20 719 31 ("get-parent" "new-file" "name")}
        {Lisp-Entry "present" method #f 723 20 723 27 ("get-list" "format")}
        {Lisp-Entry "get-file" method #f 732 20 732 28 ("self")}
        {Lisp-Entry "get-directory" method #f 736 20 736 33 ("get-parent")}
        {Lisp-Entry "create" method #f 740 20 740 26 ("output" "lambda" "parse" "call-with-output-file" "create-directories" "exists?" "unless")}
        {Lisp-Entry "copy-file" method #f 749 18 749 27 ("parse" "file-copy" "delete-file" "exists?" "and" "when" "overwrite-read-only" "overwrite-read-only?" "overwrite-read-only?:" "overwrite?" "overwrite?:" "dst")}
        {Lisp-Entry "delete-file" method #f 756 18 756 29 ("parse" "file-delete" "overwrite-read-only" "self" "error" "when" "exists?" "not" "if" "error?" "error?:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "overwrite-read-only" method #f 764 11 764 30 ("set-read/write" "read-only?" "exists?" "and" "when" "overwrite-read-only?")}
        {Lisp-Entry "get-size" method #f 770 18 770 26 ("readable?:" "self" "File-Reader" "new" "reader" "with-closed" "get-size" "'get-size" "unimplemented")}
        {Lisp-Entry "get-modification-time" method #f 777 20 777 41 ("parse" "file-modification-time" "floor" "inexact->exact" "seconds->time")}
        {Lisp-Entry "set-modification-time" method #f 781 18 781 39 ("set-attributes" "NULL" "get-handle" "SetFileTime" "printer" "lambda" "append" "'append" "mode:" "parse" "list" "call-with-output-file" "set-read/write" "get-attributes" "at" "get-filetime" "ft" "let" "set-modification-time" "'set-modification-time" "unimplemented" "time")}
        {Lisp-Entry "touch" method #f 794 18 794 23 ("universal-date" "get-time" "set-modification-time" "touch" "'touch" "unimplemented")}
        {Lisp-Entry "get-hidden?" method #f 800 18 800 29 ("FILE_ATTRIBUTE_HIDDEN" "get-attributes" "mask-bit-set?" "get-hidden?" "'get-hidden?" "unimplemented")}
        {Lisp-Entry "set-hidden?" method #f 806 18 806 29 ("FILE_ATTRIBUTE_HIDDEN" "get-attributes" "mask-bit-set" "set-attributes" "set-hidden?" "'set-hidden?" "unimplemented" "flag")}
        {Lisp-Entry "writable?" method #f 812 20 812 29 ("CloseHandle" "INVALID_HANDLE_VALUE" "=" "if" "FILE_ATTRIBUTE_NORMAL" "OPEN_EXISTING" "NULL" "0" "GENERIC_WRITE" "parse" "CreateFile" "handle" "let" "writable?" "'writable?" "unimplemented")}
        {Lisp-Entry "clone-file" method #f 822 18 822 28 ("get-base" "format" "list" "get-directory" "get-list" "append" "File" "new" "extension")}
        {Lisp-Entry "load-lines" method #f 831 20 831 30 ("read-lines" "cr-lf" "'cr-lf" "eol-encoding:" "UTF" "'UTF" "either" "parse" "path:" "list" "call-with-input-file" "char-encoding-errors" "char-encoding-errors:" "char-encoding" "char-encoding:")}
        {Lisp-Entry "save-lines" method #f 836 20 836 30 ("write-lines" "printer" "lambda" "get-eol-encoding" "UTF-8" "'UTF-8" "either" "parse" "path:" "list" "call-with-output-file" "eol-encoding" "eol-encoding:" "char-encoding" "char-encoding:" "lines")}}
      {Lisp-Entry "file?" definition #f 842 27 842 32 ("File" "is?" "object")}
      {Lisp-Entry "timestamped-file" definition #f 846 20 846 36 ("1" "+" "exists?" "new-file" "file" "=" "suffix" "0" "n" "iterate" "current-date" "date->string" "timestamp" "format" "if" "prefix" "let" "ext" "base" "dir")}
      {Lisp-Entry "Directory-Class" class #f 863 7 863 22 ("Pathname" ":class")
        {Lisp-Entry "get-protocol" method #f 866 20 866 32 ("dir" "'dir")}}
      {Lisp-Entry "Directory" class #f 870 7 870 16 ("Pathname" "Directory-Class")
        {Lisp-Entry "print" method #f 873 20 873 25 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "new-brother" method #f 884 20 884 31 ("get-parent" "new-directory" "name")}
        {Lisp-Entry "present" method #f 888 20 888 27 ("get-list" "format")}
        {Lisp-Entry "get-directory" method #f 897 20 897 33 ("self")}
        {Lisp-Entry "get-modification-time" method #f 901 20 901 41 ()}
        {Lisp-Entry "get-parent" method #f 908 24 908 34 ("nextmethod" "Windows-Meta-Root" "new" "expand" "1" "path" "length" "=" "if" "effective-path" "let")}
        {Lisp-Entry "create" method #f 916 20 916 26 ("parse" "directory-create")}
        {Lisp-Entry "new-file" method #f 920 18 920 26 ("list" "null/pair?" "if" "get-list" "append" "File" "new" "name")}
        {Lisp-Entry "new-directory" method #f 924 18 924 31 ("list" "null/pair?" "if" "get-list" "append" "Directory" "new" "name")}
        {Lisp-Entry "new-unique-file" method #f 928 18 928 33 ("increase!" "either" "format" "set!" "while" "1" "suffix" "extract-extension" "ext" "extract-base" "base" "exists?" "not" "if" "new-file" "file" "let" "separator" "separator:" "name")}
        {Lisp-Entry "copy-directory" method #f 941 18 941 32 ("recursive?:" "directories?:" "files?:" "Directory" "copy-directory" "touch" "copy-file" "new" "dest" "File" "is?" "if" "eq?" "or" "iterate-directory" "get-name" "list" "get-list" "append" "path" "lambda" "destination" "let" "create-directories" "self" "when" "copy?" "copy?:" "touch-files?" "touch-files?:" "feedback" "feedback:" "copier" "copier:" "dst")}
        {Lisp-Entry "delete-directory" method #f 965 26 965 42 ("remove-directory" "empty-directory" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "empty-directory" method #f 970 18 970 33 ("recursive?:" "directories?:" "files?:" "delete-directory" "delete-file" "File" "is?" "if" "path" "lambda" "iterate-directory" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "remove-directory" method #f 981 18 981 34 ("parse" "directory-delete")}
        {Lisp-Entry "get-content" method #f 985 20 985 31 ("get-output" "collect-leaves" "collect-nodes" "when" "List-Factory" "new" "fact" "let" "leaves?" "leaves?:" "nodes?" "nodes?:")}
        {Lisp-Entry "collect-nodes" method #f 992 11 992 24 ("recursive?:" "directories?:" "files?:" "put" "item" "lambda" "iterate-directory" "fact")}
        {Lisp-Entry "collect-leaves" method #f 1001 11 1001 25 ("recursive?:" "directories?:" "files?:" "put" "item" "lambda" "iterate-directory" "fact")}
        {Lisp-Entry "add-suffix" method #f 1015 20 1015 30 ("write-char" "printer")}
        {Lisp-Entry "collect-files" method #f 1024 18 1024 31 ("get-output" "recursive?:" "put" "when" "file" "lambda" "iterate-directory" "List-Factory" "new" "fact" "let" "predicate")}
        {Lisp-Entry "iterate-directory" method #f 1039 26 1039 43 ("'directory" "Directory" "'file" "append" "File" "new" "file" "case" "kind" "list" "lambda" "parse" "iterate-directory-content" "get-list" "if" "directory" "let" "ignored-directories" "ignored-directories:" "recursive?" "recursive?:" "sort?" "sort?:" "directories?" "directories?:" "files?" "files?:" "full?" "full?:" "proc")}
        {Lisp-Entry "iterate-directory-content" method #f 1048 11 1048 36 ("file" "'file" "files" "'files" "directory" "'directory" "concatenate" "list" "append" "iterate-directory-content" "when" "name" "lambda" "directories" "'directories" "iterate-content" "proc" "base" "prefix" "ignored-directories" "recursive?" "sort?" "directories?" "files?")}
        {Lisp-Entry "iterate-content" method #f 1061 11 1061 26 ("for-each" "ci<?" "sort" "sorted" "cons" "set!" "object" "lambda" "list" "let" "iterate-content-unsorted" "not" "if" "proc" "ignored-directories" "sort?" "kind" "base")}
        {Lisp-Entry "iterate-content-unsorted" method #f 1072 11 1072 35 ("directory-content-patch" "member?" "not" "directory" "'directory" "directories" "'directories" "regular" "'regular" "files" "'files" "eq?" "and" "or" "pathname-type" "type" "file-exists?" "when" "string-append" "path" "let" "name" "lambda" "for-each" "proc" "ignored-directories" "kind" "base")}
        {Lisp-Entry "directory-content-patch" definition #f 1088 19 1088 42 ("directory-content" "path")}
        {Lisp-Entry "directory-content-patch" definition #f 1091 19 1091 42 ("dot-and-dot-dot" "'dot-and-dot-dot" "ignore-hidden:" "path:" "list" "directory-content" "path")}
        {Lisp-Entry "count-files" method #f 1095 18 1095 29 ("continuation-return" ">" "and" "increase!" "not" "or" "when" "file" "iterate-directory" "return" "lambda" "continuation-capture" "0" "count" "let" "max-count" "max-count:" "filter" "filter:")}}
      {Lisp-Entry "Windows-Meta-Root" class #f 1111 24 1111 41 ("Pathname")
        {Lisp-Entry "initialize" method #f 1114 24 1114 34 ()}
        {Lisp-Entry "get-name" method #f 1118 24 1118 32 ()}
        {Lisp-Entry "present" method #f 1122 24 1122 31 ("get-name")}
        {Lisp-Entry "get-parent" method #f 1126 24 1126 34 ()}
        {Lisp-Entry "get-directory" method #f 1130 24 1130 37 ("list" "Directory" "new")}
        {Lisp-Entry "exists?" method #f 1134 24 1134 31 ()}
        {Lisp-Entry "get-content" method #f 1138 24 1138 35 ("get-output" "enumerate-drives" "string" "list" "Directory" "put" "letter" "lambda" "for-each" "when" "List-Factory" "new" "fact" "let" "leaves?" "leaves?:" "nodes?" "nodes?:")}
        {Lisp-Entry "enumerate-drives" method #f 1147 15 1147 31 ("integer->char" "cons" "bitwise-and" "/=" "1" "+" "-1" "arithmetic-shift" "0" "=" "if" "result" "char->integer" "letter" "jazz.platform.windows.GetLogicalDrives" "drives" "loop" "let" "reverse!")}}
      {Lisp-Entry "directory?" definition #f 1162 27 1162 37 ("Directory" "is?" "obj")}
      {Lisp-Entry "get-current-directory" definition #f 1166 20 1166 41 ("current-directory" "tokenise-filename" "Directory" "new")}
      {Lisp-Entry "set-current-directory" definition #f 1170 20 1170 41 ("parse" "current-directory-set!" "directory")}
      {Lisp-Entry "with-preserved-current-directory" definition #f 1174 20 1174 52 ("set-current-directory" "unwind-protect" "get-current-directory" "preserved" "let" "proc")}
      {Lisp-Entry "Scheme-Extensions" definition #f 1186 19 1186 36 ()}
      {Lisp-Entry "CommonLisp-Extensions" definition #f 1189 19 1189 40 ()}
      {Lisp-Entry "Jazz-Extensions" definition #f 1192 19 1192 34 ()}
      {Lisp-Entry "C-Extensions" definition #f 1195 19 1195 31 ()}
      {Lisp-Entry "SQL-Extensions" definition #f 1198 19 1198 33 ()}
      {Lisp-Entry "Textual-Extensions" definition #f 1201 19 1201 37 ()}
      {Lisp-Entry "Text-Extensions" definition #f 1204 19 1204 34 ("Textual-Extensions" "C-Extensions" "Jazz-Extensions" "CommonLisp-Extensions" "Scheme-Extensions" "append")}
      {Lisp-Entry "effective-extensions" definition #f 1212 20 1212 40 ("else" "Text-Extensions" ":text" "C-Extensions" ":c" "Jazz-Extensions" ":jazz" "CommonLisp-Extensions" ":commonlisp" "Scheme-Extensions" ":scheme" "case" "extensions")}
      {Lisp-Entry "Scheme-Include-Extensions" definition #f 1222 12 1222 37 ("Scheme-Extensions")}
      {Lisp-Entry "CommonLisp-Include-Extensions" definition #f 1225 12 1225 41 ("CommonLisp-Extensions")}
      {Lisp-Entry "Jazz-Include-Extensions" definition #f 1228 12 1228 35 ("Scheme-Include-Extensions" "append")}
      {Lisp-Entry "C-Include-Extensions" definition #f 1232 12 1232 32 ("C-Extensions")}
      {Lisp-Entry "Textual-Include-Extensions" definition #f 1235 12 1235 38 ("Textual-Extensions")}
      {Lisp-Entry "Text-Include-Extensions" definition #f 1238 12 1238 35 ("Textual-Include-Extensions" "C-Include-Extensions" "Jazz-Include-Extensions" "CommonLisp-Include-Extensions" "Scheme-Include-Extensions" "append")}
      {Lisp-Entry "effective-include-extensions" definition #f 1246 21 1246 49 ("else" "Text-Include-Extensions" ":text" "C-Include-Extensions" ":c" "Jazz-Include-Extensions" ":jazz" "CommonLisp-Include-Extensions" ":commonlisp" "Scheme-Include-Extensions" ":scheme" "case" "extensions")}
      {Lisp-Entry "Scheme-Catalog-Extensions" definition #f 1256 12 1256 37 ("Scheme-Extensions")}
      {Lisp-Entry "CommonLisp-Catalog-Extensions" definition #f 1259 12 1259 41 ("CommonLisp-Extensions")}
      {Lisp-Entry "Jazz-Catalog-Extensions" definition #f 1262 12 1262 35 ("Scheme-Catalog-Extensions" "append")}
      {Lisp-Entry "C-Catalog-Extensions" definition #f 1266 12 1266 32 ("C-Extensions")}
      {Lisp-Entry "Textual-Catalog-Extensions" definition #f 1269 12 1269 38 ("Textual-Extensions")}
      {Lisp-Entry "Text-Catalog-Extensions" definition #f 1272 12 1272 35 ("Textual-Catalog-Extensions" "C-Catalog-Extensions" "Jazz-Catalog-Extensions" "CommonLisp-Catalog-Extensions" "Scheme-Catalog-Extensions" "append")}
      {Lisp-Entry "effective-catalog-extensions" definition #f 1280 21 1280 49 ("else" "Text-Catalog-Extensions" ":text" "C-Catalog-Extensions" ":c" "Jazz-Catalog-Extensions" ":jazz" "CommonLisp-Catalog-Extensions" ":commonlisp" "Scheme-Catalog-Extensions" ":scheme" "case" "extensions")}
      {Lisp-Entry "extension-constituent-test" definition #f 1290 20 1290 46 ("word-constituent?" "else" "sql-constituent?" "SQL-Extensions" "c-constituent?" "C-Extensions" "scheme-constituent?" "Scheme-Extensions" "jazz-constituent?" "ci=?" "test:" "Jazz-Extensions" "member?" "cond" "ext")}}})
"install"
 ({Lisp-File-Entry {File jazz.io "src" "jazz" "io" "install.scm"} 1257473851
    {Lisp-Entry "jazz.io.install" unit #f 37 6 37 21 ()
      {Lisp-Entry "File" define ("literal") 40 21 40 25 ("jazz.io.literals.construct-file")}
      {Lisp-Entry "Directory" define ("literal") 41 21 41 30 ("jazz.io.literals.construct-directory")}}})
"literals"
 ({Lisp-File-Entry {File jazz.io "src" "jazz" "io" "literals.jazz"} 1257476782
    {Lisp-Entry "jazz.io.literals" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "construct-file" definition #f 48 21 48 35 ("File" "new" "rest")}
      {Lisp-Entry "construct-directory" definition #f 57 21 57 40 ("Directory" "new" "rest")}}})
"protocol"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.io" "src" "jazz" "io" "protocol.jazz"} 1257476791
    {Lisp-Entry "jazz.io.protocol" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "moniker-modal" generic/specific ("<Moniker-Class>") 44 10 44 23 ("rest")}
      {Lisp-Entry "moniker-modal" generic/specific ("<File-Class>") 47 11 47 24 ("choose-new-file" "save" "directory:" "choose-file" "apply" "case" "get-directory" "essay" "directory" "let" "others" "actual" "open" "'open" "mode" "bind-keywords" "rest")}
      {Lisp-Entry "moniker-modal" generic/specific ("<Directory-Class>") 55 11 55 24 ("directory:" "choose-directory" "apply" "others" "actual" "mode" "bind-keywords" "rest")}
      {Lisp-Entry "moniker-new" generic/specific ("<Moniker-Class>") 60 10 60 21 ("class" "new" "parameters")}}})
