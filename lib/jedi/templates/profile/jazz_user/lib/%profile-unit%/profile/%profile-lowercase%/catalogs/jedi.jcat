"Alignment-Editor"
 ({Lisp-File-Entry {File jedi "src" "jedi" "designer" "Alignment-Editor.jazz"} 1257476294
    {Lisp-Entry "jedi.designer.Alignment-Editor" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Alignment-Editor" class #f 49 7 49 23 ("on-resize-both" "resize-both" "on-resize-height" "resize-height" "on-resize-width" "resize-width" "on-space-vertically" "space-vertically" "on-space-horizontally" "space-horizontally" "on-center-vertically" "center-vertically" "on-center-horizontally" "center-horizontally" "on-align-bottom" "align-bottom" "on-align-top" "align-top" "on-align-right" "align-right" "on-align-left" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "image-name:" "tooltip-text:" "align-left" "name:" "initialize" "View")
        {Lisp-Entry "client" property #f 52 12 52 18 ()}
        {Lisp-Entry "get-client" accessor #f 52 43 52 51 ()}
        {Lisp-Entry "set-client" accessor #f 52 43 52 51 ()}
        {Lisp-Entry "flow-layout" slot #f 55 8 55 19 ()}
        {Lisp-Entry "external-name" method #f 76 25 76 38 ("alignment-editor" "'alignment-editor" "rest")}
        {Lisp-Entry "host-title" method #f 85 25 85 35 ()}
        {Lisp-Entry "client-activate" method #f 89 20 89 35 ("get-client" "set-client" "View-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "finish" method #f 100 20 100 26 ("layout-view" "0" "5" "4" "Rect" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" method #f 106 20 106 26 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "on-align-left" method #f 110 11 110 24 ("align-left" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-top" method #f 117 11 117 23 ("align-top" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-right" method #f 124 11 124 25 ("align-right" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-bottom" method #f 131 11 131 26 ("align-bottom" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-center-horizontally" method #f 138 11 138 33 ("center-horizontally" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-center-vertically" method #f 145 11 145 31 ("center-vertically" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-space-horizontally" method #f 152 11 152 32 ("space-horizontally" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-space-vertically" method #f 159 11 159 30 ("space-vertically" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-width" method #f 166 11 166 26 ("resize-width" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-height" method #f 173 11 173 27 ("resize-height" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-both" method #f 180 11 180 25 ("resize-both" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}}}})
"Bitmap-File"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "resource" "Bitmap-File.jazz"} 1257476301
    {Lisp-Entry "jedi.builder.resource.Bitmap-File" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Bitmap-File" class #f 44 7 44 18 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Bitmap-Resource")}
        {Lisp-Entry "resource-marker" method #f 51 20 51 35 ()}}}})
"C-Definition-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "C-Definition-Doc.jazz"} 1257476309
    {Lisp-Entry "jazz.doc.doc.C-Definition-Doc" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "C-Definition-Doc" class #f 43 7 43 23 ("Element-Doc")}}})
"C-Type-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "C-Type-Doc.jazz"} 1257476313
    {Lisp-Entry "jazz.doc.doc.C-Type-Doc" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "C-Type-Doc" class #f 43 7 43 17 ("Element-Doc")}}})
"Catalog"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "catalog" "Catalog.jazz"} 1257476319
    {Lisp-Entry "jazz.catalog.catalog.Catalog" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Catalog" class #f 43 7 43 14 ("Object")
        {Lisp-Entry "name" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-name" accessor #f 46 20 46 28 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("name~self" "set!" "nextmethod" "name")}
        {Lisp-Entry "print" method #f 54 20 54 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "present" method #f 65 26 65 33 ()}
        {Lisp-Entry "get-active?" method #f 74 29 74 40 ()}
        {Lisp-Entry "set-active?" method #f 78 29 78 40 ("flag")}
        {Lisp-Entry "activate" method #f 82 26 82 34 ("rest")}
        {Lisp-Entry "deactivate" method #f 86 26 86 36 ()}
        {Lisp-Entry "get-definitions" method #f 95 26 95 41 ("name")}
        {Lisp-Entry "get-file-entry" method #f 99 26 99 40 ("file")}
        {Lisp-Entry "get-references" method #f 103 26 103 40 ("name")}
        {Lisp-Entry "add-completions" method #f 107 26 107 41 ("target" "dest")}
        {Lisp-Entry "in-context?" method #f 116 26 116 37 ("context")}}}})
"Catalog-Configuration"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "catalog" "Catalog-Configuration.jazz"} 1257476318
    {Lisp-Entry "jazz.catalog.catalog.Catalog-Configuration" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Catalog-Configuration" class #f 48 20 48 41 ("Bitmap-Resource" "icon:" "initialize" "Preferences")
        {Lisp-Entry "type" property #f 51 12 51 16 ()}
        {Lisp-Entry "get-type" accessor #f 51 53 51 61 ()}
        {Lisp-Entry "set-type" accessor #f 51 53 51 61 ()}
        {Lisp-Entry "output-file" property #f 52 12 52 23 ()}
        {Lisp-Entry "get-output-file" accessor #f 52 53 52 61 ()}
        {Lisp-Entry "set-output-file" accessor #f 52 53 52 61 ()}
        {Lisp-Entry "directories" property #f 53 12 53 23 ()}
        {Lisp-Entry "get-directories" accessor #f 53 53 53 61 ()}
        {Lisp-Entry "set-directories" accessor #f 53 53 53 61 ()}
        {Lisp-Entry "extensions" property #f 54 12 54 22 ()}
        {Lisp-Entry "get-extensions" accessor #f 54 53 54 61 ()}
        {Lisp-Entry "set-extensions" accessor #f 54 53 54 61 ()}
        {Lisp-Entry "recursive?" property #f 55 12 55 22 ()}
        {Lisp-Entry "get-recursive?" accessor #f 55 53 55 61 ()}
        {Lisp-Entry "set-recursive?" accessor #f 55 53 55 61 ()}
        {Lisp-Entry "active?" property #f 56 12 56 19 ()}
        {Lisp-Entry "get-active?" accessor #f 56 53 56 61 ()}
        {Lisp-Entry "set-active?" accessor #f 56 53 56 61 ()}
        {Lisp-Entry "references?" property #f 57 12 57 23 ()}
        {Lisp-Entry "get-references?" accessor #f 57 53 57 61 ()}
        {Lisp-Entry "set-references?" accessor #f 57 53 57 61 ()}
        {Lisp-Entry "get-domain" method #f 69 25 69 35 ("nextmethod" "else" "Boolean-Domain" "new" "references?" "active?" "recursive?" "field-name" "case" "property")}
        {Lisp-Entry "get-class-presentation" method #f 80 25 80 47 ()}
        {Lisp-Entry "property-presentation" method #f 84 25 84 46 ("nextmethod" "else" "references?" "active?" "recursive?" "extensions" "directories" "output-file" "type" "field-name" "case" "property")}
        {Lisp-Entry "presentation-property?" method #f 96 20 96 42 ("property")}
        {Lisp-Entry "get-presentation" method #f 100 20 100 36 ("name" "self" "class-of" "name->presentation")}
        {Lisp-Entry "set-presentation" method #f 104 20 104 36 ("class-of" "presentation->name" "self" "set-name" "presentation" "designer")}
        {Lisp-Entry "get-row-instance" method #f 108 20 108 36 ("nextmethod" "else" "Boolean-Row" "references?" "active?" "recursive?" "Directory-Group-Row" "directories" "save" "'save" "mode:" "File-Row" "output-file" "collect-catalog-types" "choices:" "Combo-Row" "new" "type" "field-name" "case" "property")}
        {Lisp-Entry "collect-catalog-types" method #f 117 11 117 32 ("get-catalog-types" "->string" "list" "car" "type" "info" "lambda" "map" "get-preferences" "pref" "let")}
        {Lisp-Entry "get-categorized-properties" method #f 125 20 125 46 ("references?" "active?" "recursive?" "extensions" "directories" "output-file" "type")}}}})
"Catalog-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Catalog-Entry.jazz"} 1257476319
    {Lisp-Entry "jazz.catalog.entry.Catalog-Entry" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Catalog-Entry" class #f 45 20 45 33 ("initialize" "Object")
        {Lisp-Entry "parent" slot #f 48 8 48 14 ()}
        {Lisp-Entry "root-definition" slot #f 49 8 49 23 ()}
        {Lisp-Entry "file-definition" slot #f 50 8 50 23 ()}
        {Lisp-Entry "get-parent" method #f 58 25 58 35 ("parent")}
        {Lisp-Entry "set-parent" method #f 62 25 62 35 ("parent" "set!" "p")}
        {Lisp-Entry "get-root-definition" method #f 66 26 66 45 ("root-definition")}
        {Lisp-Entry "set-root-definition" method #f 70 26 70 45 ("root-definition" "set!" "def")}
        {Lisp-Entry "get-file-definition" method #f 74 26 74 45 ("file-definition")}
        {Lisp-Entry "set-file-definition" method #f 78 26 78 45 ("file-definition" "set!" "def")}
        {Lisp-Entry "get-file" method #f 87 26 87 34 ()}
        {Lisp-Entry "get-moniker" method #f 91 26 91 37 ()}
        {Lisp-Entry "get-title" method #f 95 26 95 35 ()}
        {Lisp-Entry "get-category-name" method #f 99 26 99 43 ()}
        {Lisp-Entry "get-name" method #f 103 26 103 34 ()}
        {Lisp-Entry "get-line" method #f 107 26 107 34 ()}
        {Lisp-Entry "get-column" method #f 111 26 111 36 ()}
        {Lisp-Entry "get-end-line" method #f 115 26 115 38 ()}
        {Lisp-Entry "get-end-column" method #f 119 26 119 40 ()}
        {Lisp-Entry "get-definitions" method #f 123 26 123 41 ()}
        {Lisp-Entry "get-image" method #f 127 26 127 35 ()}
        {Lisp-Entry "present" method #f 136 26 136 33 ()}
        {Lisp-Entry "present-name" method #f 140 26 140 38 ()}
        {Lisp-Entry "present-identifier" method #f 144 26 144 44 ()}
        {Lisp-Entry "present-detailed" method #f 148 26 148 42 ("present-name")}
        {Lisp-Entry "edit" method #f 157 26 157 30 ("rest")}
        {Lisp-Entry "edit-reference" method #f 161 26 161 40 ("edit" "apply" "rest" "target")}
        {Lisp-Entry "insert-definition" method #f 170 26 170 43 ("insert-self-definitions" "dynamic" "'dynamic" "get-state" "eq?" "unless" "insert-self" "row" "let" "sort?" "level" "father" "tree")}
        {Lisp-Entry "insert-self" method #f 176 29 176 40 ("self" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "present-name" "title" "insert-state" "state" "get-definitions" "definitions" "get-image" "image" "let*" "level" "father" "tree")}
        {Lisp-Entry "insert-self-definitions" method #f 184 29 184 52 ("get-definitions" "insert-definitions" "sort?" "level" "father" "tree")}
        {Lisp-Entry "insert-state" method #f 188 29 188 41 ("else" "dynamic" "'dynamic" "not-null?" ">" "expanded" "'expanded" "get-definitions" "length" "1" "2" "=" "parent" "and" "cond" "definitions" "level")}
        {Lisp-Entry "insert-definitions" method #f 197 11 197 29 ("1" "+" "insert-definition" "definition" "lambda" "for-each" "sort-definitions" "if" "ordered" "let" "sort?" "level" "definitions" "father" "tree")}
        {Lisp-Entry "sort-definitions" method #f 204 11 204 27 ("present-name" "definition" "lambda" "key:" "string<?" "sort" "definitions")}
        {Lisp-Entry "update-indexes" method #f 213 26 213 40 ("references-index" "definitions-index")}}}})
"Catalogs-Manager"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "tools" "Catalogs-Manager.jazz"} 1257476320
    {Lisp-Entry "jazz.catalog.tools.Catalogs-Manager" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Catalogs-Manager" class #f 49 20 49 36 ("250" "statistics" "references?" "display-images?:" "toplevel-controls?:" "150" "width:" "multiple-selection?:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "name" "filled-column:" "catalogs" "document" "fill" "layout-type:" "content" "vscroll?:" "entry" "style:" "edge" "border-type:" "571" "549" "35" "2" "catalogs-border" "default?:" "on-update" ":form" "Event-Handler" "action-handler:" "22" "100" "7" "449" "Point" "position:" "title:" "update" "name:" "608" "553" "Dimension" "size:" "View")
        {Lisp-Entry "external-name" method #f 66 25 66 38 ("catalogs-manager" "'catalogs-manager" "rest")}
        {Lisp-Entry "finish" method #f 75 20 75 26 ("update-buttons" "view-catalogs" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" method #f 86 25 86 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 90 25 90 35 ()}
        {Lisp-Entry "host-position" method #f 94 25 94 38 ("70" "90" "Point")}
        {Lisp-Entry "host-size" method #f 98 25 98 34 ("508" "573" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 102 20 102 35 ("home")}
        {Lisp-Entry "resize" method #f 111 20 111 26 ("catalogs-border" "'catalogs-border" "size-figure" "0" "update" "'update" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-selection-change" method #f 117 11 117 30 ("update-buttons" "evt")}
        {Lisp-Entry "view-catalogs" method #f 126 18 126 31 ("get-filing-catalogs" "user-data:" "list" "children:" "add-row" "get-statistics" "c2" "get-references?" "Tree-Label" "c1" "get-name" "->string" "title:" "Tree-Node" "new" "c0" "catalog" "for-each" "remove-every-row" "lambda" "with-update-locked" "catalogs" "'catalogs" "locate" "tree" "let")}
        {Lisp-Entry "get-filing-catalogs" method #f 139 11 139 30 ("get-application" "get-cataloguer" "get-catalogs" "Filing-Catalog" "is?" "catalog" "lambda" "collect-if")}
        {Lisp-Entry "on-update" method #f 145 19 145 28 ("update-selection" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-double-click" method #f 151 11 151 26 ("update-selection" "lambda" ":wait" "with-cursor" "catalogs" "get-name" "case" "get-alt?" "alt?" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "update-selection" method #f 161 11 161 27 ("invalidate-cell" "get-statistics" "get-cell-data" "set-title" "2" "Cell" "new" "cell" "execute-event" "update" "get-row" "get-user-data" "catalog" "let" "row" "for-each" "lambda" "post-catalog" "get-row-count" "0" "naturals" "null?" "if" "effective-selection" "define" "get-selection" "selection" "catalogs" "'catalogs" "locate" "tree" "let*")}
        {Lisp-Entry "update-buttons" method #f 182 11 182 25 ("0" ">" "update" "'update" "set-enabled?" "get-row-count" "count" "catalogs" "'catalogs" "locate" "tree" "let")}
        {Lisp-Entry "confirm-close" method #f 193 20 193 33 ("save-session" "rest")}
        {Lisp-Entry "save-session" method #f 197 20 197 32 ("Opened-Windows" "'Opened-Windows" "properties" "push-property" "get-size" "size:" "get-position" "position:" "external-name" "list" "info" "let")}}}})
"Catalogs-Preferences"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "catalog" "Catalogs-Preferences.jazz"} 1257476321
    {Lisp-Entry "jazz.catalog.catalog.Catalogs-Preferences" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Catalogs-Preferences" class #f 45 20 45 40 ("title:" "initialize" "Preferences")
        {Lisp-Entry "main" property #f 48 12 48 16 ()}
        {Lisp-Entry "get-main" accessor #f 48 56 48 64 ()}
        {Lisp-Entry "set-main" accessor #f 48 56 48 64 ()}
        {Lisp-Entry "recolorize-on-save?" property #f 49 12 49 31 ()}
        {Lisp-Entry "get-recolorize-on-save?" accessor #f 49 56 49 64 ()}
        {Lisp-Entry "set-recolorize-on-save?" accessor #f 49 56 49 64 ()}
        {Lisp-Entry "can-rename-component?" method #f 61 20 61 41 ()}
        {Lisp-Entry "can-delete-component?" method #f 65 20 65 41 ()}
        {Lisp-Entry "can-move-component?" method #f 69 20 69 39 ()}
        {Lisp-Entry "can-copy-component?" method #f 73 20 73 39 ()}
        {Lisp-Entry "get-addable-classes" method #f 77 20 77 39 ("Catalog-Configuration" "list")}
        {Lisp-Entry "get-addable-details" method #f 82 20 82 39 ("references?" "active?" "85" "recursive?" "extensions" "directories" "output-file" "100" "type" "75" "name-info")}}}})
"Cataloguer"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "catalog" "Cataloguer.jazz"} 1257476322
    {Lisp-Entry "jazz.catalog.catalog.Cataloguer" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Cataloguer" class #f 45 7 45 17 ("initialize" "Object")
        {Lisp-Entry "catalogs" slot #f 48 8 48 16 ()}
        {Lisp-Entry "get-catalogs" accessor #f 48 39 48 47 ()}
        {Lisp-Entry "get-catalog" method #f 56 18 56 29 ("add-catalog" "create-catalog" "catalog" "error" "when" "not" "if" "catalogs" "'catalogs" "get-preferences" "find-component" "pref" "let" "find-catalog" "either" "report?" "report?:" "error?" "error?:" "name")}
        {Lisp-Entry "add-catalog" method #f 67 18 67 29 ("list" "append!" "set!" "catalogs" "memq?" "unless" "catalog")}
        {Lisp-Entry "remove-catalog" method #f 72 18 72 32 ("remove!" "set!" "catalogs" "memq?" "when" "catalog")}
        {Lisp-Entry "find-catalog" method #f 77 18 77 30 ("catalogs" "get-name" "eq?" "catalog" "lambda" "find-if" "name")}
        {Lisp-Entry "for-each-catalog" method #f 83 11 83 27 ("catalogs" "in-context?" "get-active?" "and" "when" "catalog" "lambda" "for-each" "list" "pair?" "if" "let" "proc" "context")}
        {Lisp-Entry "create-catalog" method #f 96 11 96 25 ("report?:" "get-references-size" "get-definitions-size" "get-content-size" "get-references?" "get-active?" "get-recursive?" "get-extensions" "get-directories" "get-output-file" "get-name" "new" "catalog-class" "class" "get-type" "type" "let*" "report?" "pref")}
        {Lisp-Entry "catalog-class" method #f 113 11 113 24 ("cdr" "autoload" "error" "not" "if" "get-preferences" "get-catalog-types" "assq" "pair" "let" "type")}
        {Lisp-Entry "save-catalogs" method #f 125 18 125 31 ("catalogs" "save" "table-set!" "format" "message-box" "table-ref" "if" "get-file" "get-name" "name" "catalog" "lambda" "for-each" "equal?" "test:" "make-table" "names" "let")}
        {Lisp-Entry "get-context" method #f 141 18 141 29 ("list" "symbol?" "if" "get-application" "get-catalog-context" "context" "let")}
        {Lisp-Entry "class-definition?" method #f 153 11 153 28 ("Class-Entry" "is?" "object")}
        {Lisp-Entry "get-definitions" method #f 157 18 157 33 ("get-output" "get-definitions" "put-sequence" "catalog" "lambda" "for-each-catalog" "List-Factory" "new" "fact" "let" "get-context" "context" "context:" "name")}
        {Lisp-Entry "get-definition" method #f 165 18 165 32 ("car" "not-null?" "when" "get-definitions" "definitions" "let" "name")}
        {Lisp-Entry "get-coalesced-definitions" method #f 172 18 172 43 ("Category-Entry" "car" "is?" "length" "1" "=" "and" "if" "Constructor-Entry" "is-not?" "entry" "lambda" "collect-if" "coalesced" "get-definitions" "definitions" "let*" "get-context" "context" "context:" "name")}
        {Lisp-Entry "search-definitions" method #f 183 18 183 36 ("get-output" "search-definitions" "put-sequence" "catalog" "lambda" "for-each-catalog" "List-Factory" "new" "fact" "let" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "get-context" "context" "context:" "name")}
        {Lisp-Entry "get-references" method #f 191 18 191 32 ("get-output" "get-references" "put-sequence" "catalog" "lambda" "for-each-catalog" "List-Factory" "new" "fact" "let" "get-context" "context" "context:" "name")}
        {Lisp-Entry "get-file-entries" method #f 199 18 199 34 ("get-output" "put" "when" "get-file-entry" "entry" "catalog" "lambda" "for-each-catalog" "List-Factory" "new" "fact" "let" "get-context" "context" "context:" "file")}
        {Lisp-Entry "get-completions" method #f 214 18 214 33 ("table-keys" "add-completions" "equal?" "test:" "make-table" "table" "let" "get-context" "context" "context:" "name")}
        {Lisp-Entry "add-completions" method #f 220 18 220 33 ("add-completions" "catalog" "lambda" "for-each-catalog" "get-context" "context" "context:" "name" "table")}}}})
"Category-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Category-Doc.jazz"} 1257476323
    {Lisp-Entry "jazz.doc.doc.Category-Doc" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Category-Doc" class #f 43 7 43 19 ("Element-Doc")
        {Lisp-Entry "catalog" slot #f 46 8 46 15 ()}
        {Lisp-Entry "get-catalog" method #f 54 20 54 31 ("catalog")}
        {Lisp-Entry "set-catalog" method #f 58 20 58 31 ("children" "set-catalog" "child" "lambda" "for-each" "catalog" "set!" "cat")}
        {Lisp-Entry "update-indexes" method #f 70 20 70 34 ("children" "update-indexes" "child" "lambda" "for-each" "nextmethod" "references-index" "definitions-index")}
        {Lisp-Entry "print-catalog" method #f 78 11 78 24 ("children" "1" "+" "print-catalog" "child" "lambda" "for-each" "doc" "ascendant" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "present" method #f 95 11 95 18 ("doc" "name" "format")}
        {Lisp-Entry "sort-components?" method #f 104 20 104 36 ()}}}})
"Category-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Category-Entry.jazz"} 1257476323
    {Lisp-Entry "jazz.catalog.entry.Category-Entry" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Category-Entry" class #f 45 20 45 34 ("Hierarchical-Entry")
        {Lisp-Entry "extends" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-extends" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "set-extends" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("extends~self" "set!" "nextmethod" "definitions" "end-column" "end-line" "column" "line" "extends" "name" "qualified" "modifiers")}
        {Lisp-Entry "present" method #f 56 20 56 27 ("get-category-name")}
        {Lisp-Entry "update-indexes" method #f 65 20 65 34 ("extends" "last" "update-index" "qualified" "lambda" "for-each" "nextmethod" "references-index" "definitions-index")}
        {Lisp-Entry "insert-self-definitions" method #f 77 20 77 43 ("nextmethod" "insert-inherited" "insert-interfaces" "insert-ascendants" "sort?" "father" "tree")}
        {Lisp-Entry "collect-ascendants" method #f 84 11 84 29 ("get-output" "extends" "get-extends" "for-each" "put" "get-list" "memq?" "not" "and" "get-qualified-category" "category" "when" "qualified" "lambda" "process" "letrec" "List-Factory" "new" "fact" "get-catalog" "catalog" "let")}
        {Lisp-Entry "collect-inherited" method #f 98 11 98 28 ("get-definitions" "ascendant" "lambda" "map" "append" "apply" "ascendants")}
        {Lisp-Entry "insert-ascendants" method #f 102 29 102 46 ("user-data:" "get-image" "present-name" "category" "lambda" "for-each" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "17" "row-height:" "collapsed" "'collapsed" "state:" "father:" "add-row" "row" "when" "collect-ascendants" "ascendants" "let" "father" "tree")}
        {Lisp-Entry "insert-interfaces" method #f 111 29 111 46 ("father" "tree")}
        {Lisp-Entry "insert-interfaces-list" method #f 115 11 115 33 ("get-extends" "for-each" "user-data:" "get-image" "present-name" "get-qualified-category" "interface" "qualified" "lambda" "insert" "letrec" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "17" "row-height:" "collapsed" "'collapsed" "state:" "father:" "add-row" "row" "get-catalog" "catalog" "let" "when" "interfaces" "title" "father" "tree")}
        {Lisp-Entry "insert-inherited" method #f 133 11 133 27 ("0" "insert-definitions" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "17" "row-height:" "collapsed" "'collapsed" "state:" "father:" "add-row" "row" "let" "when" "collect-inherited" "inherited" "collect-ascendants" "ascendants" "let*" "father" "tree")}
        {Lisp-Entry "get-qualified-category" method #f 141 11 141 33 ("get-qualified" "=" "package" "Category-Entry" "and" "butlast" "qualifier" "last" "name" "let" "get-file-definition" "get-definitions" "Package-Entry" "is?" "lambda" "find-if" "definition" "get-category-package" "define" "qualified" "catalog")}}}})
"Chapters-Browser"
 ({Lisp-File-Entry {File jedi "src" "jedi" "code" "Chapters-Browser.jazz"} 1257476324
    {Lisp-Entry "jedi.code.Chapters-Browser" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Chapters-Browser" class #f 46 7 46 23 ("329" "width:" "title:" "on-selection-change" "Selection-Handler" "selection-handler:" "show-header?:" "chapters" "shown?:" "header" "content" "flat?:" "hscroll?:" "vscroll?:" "scroller" "on-update" "update" "on-toggle-sorted" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "sorted?" "tools" "name:" "fill" "layout-type:" "set-client" "get-client" "initialize" "Layout-View")
        {Lisp-Entry "client" property #f 49 12 49 18 ()}
        {Lisp-Entry "external-name" method #f 65 25 65 38 ("chapters-browser" "'chapters-browser" "rest")}
        {Lisp-Entry "host-icon" method #f 74 25 74 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 78 25 78 35 ()}
        {Lisp-Entry "client-activate" method #f 82 20 82 35 ("set-client" "Text-View" "is?" "if" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 89 20 89 37 ("set-client")}
        {Lisp-Entry "get-tools-view" method #f 98 20 98 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 102 20 102 33 ("acquire-focus" "chapters" "'chapters" "locate" "tree" "let")}
        {Lisp-Entry "get-sorted?" method #f 112 11 112 22 ("sorted?" "'sorted?" "locate" "get-selected?")}
        {Lisp-Entry "on-toggle-sorted" method #f 121 11 121 27 ("update" "evt")}
        {Lisp-Entry "on-update" method #f 125 11 125 20 ("update" "evt")}
        {Lisp-Entry "on-selection-change" method #f 129 11 129 30 ("head" "'head" "force-vertical:" "ensure-displayed" "ensure-displayed?:" "Cell" "Range$Cell$" "new" "set-selection" "client" "paragraph-length" "len" "get-col" "col" "row" "get-row" "get-user-data" "cdr" "pos" "let*" "when" "get-single-selection" "selection" "chapters" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "get-client" method #f 148 18 148 28 ("client")}
        {Lisp-Entry "set-client" method #f 152 18 152 28 ("update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update" method #f 158 11 158 17 ("cardinality" "cast" "+" "cons" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "17" "row-height:" "state:" "father:" "add-row" "row" "collapsed" "'collapsed" "eq?" "state" "else" "1" "=" "Bitmap-Resource" "cond" "image" "find-father-row" "father" "first?" "title" "header" "pos" "level" "bind" "info" "for-each" "previous-row" "get-root-row" "root-row" "expanded" "'expanded" "insert-item" "set!" "when" "first-row" "fourth" "key:" "string<?" "sort" "get-sorted?" "sorted" "get-remaining-chapters" "remaining" "get-first-chapter" "first" "get-chapters" "lst" "let*" "lambda" "with-update-locked" "remove-every-row" "client" "not" "if" "chapters" "'chapters" "locate" "tree" "let")}
        {Lisp-Entry "insert-item" method #f 185 11 185 22 ("cardinality" "cast" "+" "0" "cons" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "Bitmap-Resource" "if" "image" "let" "title" "header" "pos" "level" "bind" "first?" "item" "state" "father" "tree")}
        {Lisp-Entry "find-father-row" method #f 191 11 191 26 ("get-user-data" "car" "<" "continuation-return" "eq?" "if" "row" "for-each-ancestor" "return" "lambda" "continuation-capture" "when" "level" "previous-row" "root-row")}}}})
"Class-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Class-Doc.jazz"} 1257476326
    {Lisp-Entry "jazz.doc.doc.Class-Doc" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Class-Doc" class #f 44 7 44 16 ("initialize" "Category-Doc")
        {Lisp-Entry "ascendant" property #f 47 12 47 21 ()}
        {Lisp-Entry "get-ascendant" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "set-ascendant" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "interfaces" property #f 48 12 48 22 ()}
        {Lisp-Entry "get-interfaces" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "set-interfaces" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "print-catalog" method #f 57 11 57 24 ("children" "1" "+" "print-catalog" "child" "lambda" "for-each" "doc" "interfaces" "ascendant" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "present" method #f 73 20 73 27 ("name" "format")}
        {Lisp-Entry "get-class-image" method #f 82 25 82 40 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" method #f 86 25 86 46 ("nextmethod" "else" "interfaces" "ascendant" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" method #f 93 20 93 46 ("interfaces" "ascendant" "package-name")}}}})
"Class-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Class-Entry.jazz"} 1257476326
    {Lisp-Entry "jazz.catalog.entry.Class-Entry" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Class-Entry" class #f 44 20 44 31 ("Category-Entry")
        {Lisp-Entry "implements" slot #f 47 8 47 18 ()}
        {Lisp-Entry "get-implements" accessor #f 47 29 47 37 ()}
        {Lisp-Entry "set-implements" accessor #f 47 29 47 37 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("implements~self" "set!" "nextmethod" "definitions" "end-column" "end-line" "column" "line" "implements" "extends" "name" "qualified" "modifiers")}
        {Lisp-Entry "print-catalog" method #f 55 20 55 33 ("definitions" "1" "+" "print-catalog" "definition" "lambda" "for-each" "end-column" "end-line" "column" "line" "implements" "extends" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" method #f 66 20 66 29 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" method #f 75 20 75 34 ("implements" "last" "update-index" "qualified" "lambda" "for-each" "nextmethod" "references-index" "definitions-index")}
        {Lisp-Entry "insert-interfaces" method #f 87 20 87 37 ("implements" "insert-interfaces-list" "father" "tree")}}}})
"Code-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Code-Entry.jazz"} 1257476328
    {Lisp-Entry "jazz.catalog.entry.Code-Entry" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Code-Entry" class #f 43 20 43 30 ("Hierarchical-Entry")
        {Lisp-Entry "type" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-type" accessor #f 46 20 46 28 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("type~self" "set!" "nextmethod" "definitions" "end-column" "end-line" "column" "line" "type" "name")}}}})
"Code-Generator"
 ({Lisp-File-Entry {File jedi "src" "jedi" "generator" "Code-Generator.jazz"} 1257476328
    {Lisp-Entry "jedi.generator.Code-Generator" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Code-Generator" class #f 40 7 40 21 ("Object")
        {Lisp-Entry "emit-section-header" method #f 48 11 48 30 ("format" "printer" "section-name")}
        {Lisp-Entry "emit-parameters" method #f 56 11 56 26 ("cdr" "car" "else" "variable-symbol" "format" "variable?" "cond" "iterate" "let" "printer" "parameters")}}}})
"Code-Location"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Code-Location.jazz"} 1257476328
    {Lisp-Entry "jazz.catalog.entry.Code-Location" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Code-Location" class #f 43 20 43 33 ("Object")
        {Lisp-Entry "edit" method #f 46 26 46 30 ("rest")}}}})
"Code-Tree"
 ({Lisp-File-Entry {File jedi "src" "jedi" "code" "Code-Tree.jazz"} 1257476330
    {Lisp-Entry "jedi.code.Code-Tree" module #f 37 18 37 37 ("jazz")
      {Lisp-Entry "Code-Tree" class #f 43 7 43 16 ("initialize" "Tree-View")
        {Lisp-Entry "sort?" property #f 46 12 46 17 ()}
        {Lisp-Entry "get-sort?" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "set-sort?" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "insert-definition" method #f 49 18 49 35 ("self" "insert-definition" "sort?" "definition" "level" "father")}
        {Lisp-Entry "update-row" method #f 53 20 53 30 ("sort?" "self" "insert-self-definitions" "get-level" "level" "get-user-data" "definition" "let" "row")}}}})
"Command-Execute-Actions"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "Command-Execute-Actions.jazz"} 1257476338
    {Lisp-Entry "jazz.ide.Command-Execute-Actions" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Command-Execute-Actions" class #f 45 7 45 30 (":control" "on-cancel" "cancel" "Return" "Shortcut" "shortcut:" "on-finish" ":mode" ":focus" "Event-Handler" "action-handler:" "finish" "name:" "Actions")}}})
"Command-Extended-Actions"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "Command-Extended-Actions.jazz"} 1257476338
    {Lisp-Entry "jazz.ide.Command-Extended-Actions" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Command-Extended-Actions" class #f 45 7 45 31 ("on-cancel" "cancel" "Return" "on-finish" "finish" ":shift" "on-find-filename" "find-filename" "on-find-file" "find-file" ":control" "alternate-shortcut:" "Shortcut" "shortcut:" "on-find-buffer" ":mode" ":focus" "Event-Handler" "action-handler:" "find-buffer" "name:" "Actions")}}})
"Command-Find-Actions"
 ({Lisp-File-Entry {File jazz.ide "src" "jazz" "ide" "Command-Find-Actions.jazz"} 1257476339
    {Lisp-Entry "jazz.ide.Command-Find-Actions" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Command-Find-Actions" class #f 45 7 45 27 (":control" "on-cancel" "cancel" "Return" "Shortcut" "shortcut:" "on-finish" ":mode" ":focus" "Event-Handler" "action-handler:" "finish" "name:" "Actions")}}})
"Command-Search-Actions"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "Command-Search-Actions.jazz"} 1257476339
    {Lisp-Entry "jazz.ide.Command-Search-Actions" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Command-Search-Actions" class #f 45 7 45 29 ("on-cancel" "cancel" "Return" "on-finish" "finish" "on-center-caret" "center-caret" "Space" "on-select-outer" "select-outer" "on-widen" "widen" "on-current" "current" "on-backward" "backward" ":control" "on-forward" "forward" "on-ignore-case" "ignore-case" ":alt" "Shortcut" "shortcut:" "on-whole-words" ":mode" ":focus" "Event-Handler" "action-handler:" "whole-words" "name:" "Actions")}}})
"Command-Shell"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "Command-Shell.jazz"} 1257476339
    {Lisp-Entry "jazz.ide.Command-Shell" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Command-Shell" class #f 45 7 45 20 ("content" "vscroll?:" "hscroll?:" "scroller" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "install" method #f 54 20 54 27 ("get-controller" "set-tool?" "scroller" "'scroller" "locate" "set-client" "new-text" "text" "let" "nextmethod" "rest")}
        {Lisp-Entry "new-text" method #f 61 11 61 19 ("text" "'text" "name:" "scroller" "'scroller" "locate" "get-content" "parent:" "Command-Text-View" "new")}
        {Lisp-Entry "get-text" method #f 72 18 72 26 ("text" "'text" "scroller" "'scroller" "locate" "get-content" "child")}
        {Lisp-Entry "get-string-content" method #f 76 18 76 36 ("get-text" "get-string-content")}}}})
"Command-Text-View"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "Command-Text-View.jazz"} 1257476340
    {Lisp-Entry "jazz.ide.Command-Text-View" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Command-Text-View" class #f 53 7 53 24 ("tooltip-text:" "tooltip?:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "show-unfocused-selection?:" "focus-selects-all?:" "initialize" "IDE-Text-View")
        {Lisp-Entry "mode" slot #f 56 8 56 12 ()}
        {Lisp-Entry "get-mode" accessor #f 56 49 56 57 ()}
        {Lisp-Entry "set-mode" accessor #f 56 49 56 57 ()}
        {Lisp-Entry "client" slot #f 57 8 57 14 ()}
        {Lisp-Entry "get-client" accessor #f 57 46 57 54 ()}
        {Lisp-Entry "client-selection" slot #f 58 8 58 24 ()}
        {Lisp-Entry "get-client-selection" accessor #f 58 46 58 54 ()}
        {Lisp-Entry "component-alias" method #f 72 20 72 35 ("nextmethod" "else" "mode" ":mode" "case" "name")}
        {Lisp-Entry "focus-gain" method #f 83 20 83 30 ("get-selection" "and" "essay" "client-selection" "client" "set!" "nextmethod" "Text-View" "is?" "when" "current-document" "guest" "let" "determine-client" "define")}
        {Lisp-Entry "focus-lose" method #f 94 20 94 30 ("set!" "mode" "cleanup" "nextmethod")}
        {Lisp-Entry "focus-actions" method #f 100 20 100 33 ("nextmethod" "focus-actions" "cons" "set-mode-execute" "mode" "not" "when")}
        {Lisp-Entry "key-press" method #f 112 20 112 29 ("mode" "key-press" "nextmethod" "key")}
        {Lisp-Entry "backspace-press" method #f 117 20 117 35 ("mode" "backspace-press" "nextmethod" "word?" "word?:" "key")}
        {Lisp-Entry "next-page" method #f 122 20 122 29 ("mode" "next-page" "evt")}
        {Lisp-Entry "prior-page" method #f 126 20 126 30 ("mode" "prior-page" "evt")}
        {Lisp-Entry "get-constituent-test" method #f 130 20 130 40 ("nextmethod" "mode" "get-constituent-test" "either")}
        {Lisp-Entry "auto-complete?" method #f 135 20 135 34 ("mode" "auto-complete?")}
        {Lisp-Entry "auto-complete-char?" method #f 139 20 139 39 ("nextmethod" "default" "'default" "eq?" "if" "mode" "auto-complete-char?" "value" "let" "last" "key")}
        {Lisp-Entry "favorite-completions?" method #f 146 20 146 41 ("nextmethod" "default" "'default" "eq?" "if" "mode" "favorite-completions?" "value" "let")}
        {Lisp-Entry "complete-name?" method #f 153 20 153 34 ("nextmethod" "default" "'default" "eq?" "if" "mode" "complete-name?" "value" "let" "size")}
        {Lisp-Entry "completion-name" method #f 160 20 160 35 ("nextmethod" "mode" "completion-name" "either" "postfix" "pos")}
        {Lisp-Entry "symbol-completions" method #f 165 20 165 38 ("nextmethod" "mode" "symbol-completions" "either" "name")}
        {Lisp-Entry "select-search" method #f 175 18 175 31 ("whole-words?:" "search" "select-all" "set-text" "when" "mode" "prepare-search" "acquire-focus" "set-mode-search" "whole-words?" "again?" "initial" "range" "direction")}
        {Lisp-Entry "set-mode-search" method #f 185 11 185 26 ("user-message" "self" "Search-Mode" "new" "mode" "set!" "direction")}
        {Lisp-Entry "select-extended" method #f 190 18 190 33 ("acquire-focus" "set-mode-extended")}
        {Lisp-Entry "set-mode-extended" method #f 195 11 195 28 ("user-message" "self" "Extended-Mode" "new" "mode" "set!")}
        {Lisp-Entry "select-execute" method #f 200 18 200 32 ("acquire-focus" "set-mode-execute")}
        {Lisp-Entry "set-mode-execute" method #f 205 11 205 27 ("user-message" "self" "Execute-Mode" "new" "mode" "set!")}}
      {Lisp-Entry "Command-Mode" class #f 215 7 215 19 ("Object")
        {Lisp-Entry "text" slot #f 218 8 218 12 ()}
        {Lisp-Entry "initialize" method #f 221 20 221 30 ("text~self" "set!" "nextmethod" "text")}
        {Lisp-Entry "get-client" method #f 226 11 226 21 ("text" "get-client")}
        {Lisp-Entry "get-client-selection" method #f 230 11 230 31 ("text" "get-client-selection")}
        {Lisp-Entry "key-press" method #f 234 19 234 28 ("key")}
        {Lisp-Entry "backspace-press" method #f 238 19 238 34 ("word?" "word?:" "key")}
        {Lisp-Entry "next-page" method #f 242 19 242 28 ()}
        {Lisp-Entry "prior-page" method #f 246 19 246 29 ()}
        {Lisp-Entry "get-constituent-test" method #f 250 19 250 39 ()}
        {Lisp-Entry "auto-complete?" method #f 254 19 254 33 ()}
        {Lisp-Entry "auto-complete-char?" method #f 258 19 258 38 ("default" "'default" "last" "key")}
        {Lisp-Entry "favorite-completions?" method #f 262 19 262 40 ("default" "'default")}
        {Lisp-Entry "complete-name?" method #f 266 19 266 33 ("default" "'default" "size")}
        {Lisp-Entry "completion-name" method #f 270 19 270 34 ("postfix" "pos")}
        {Lisp-Entry "symbol-completions" method #f 274 19 274 37 ("name")}
        {Lisp-Entry "finish" method #f 278 19 278 25 ("cleanup")}
        {Lisp-Entry "cancel" method #f 282 19 282 25 ("cleanup")}
        {Lisp-Entry "cleanup" method #f 286 19 286 26 ("clear-user-message" "acquire-focus" "unless" "when" "get-client" "client" "let" "lose-focus?")}}
      {Lisp-Entry "Search-Mode" class #f 299 7 299 18 ("ignore-case?:" "make-search-context" "initialize" "Command-Mode")
        {Lisp-Entry "direction" slot #f 302 8 302 17 ()}
        {Lisp-Entry "context" slot #f 303 8 303 15 ()}
        {Lisp-Entry "ranges" slot #f 304 8 304 14 ()}
        {Lisp-Entry "found-style" slot #f 305 8 305 19 ()}
        {Lisp-Entry "highlight-style" slot #f 306 8 306 23 ()}
        {Lisp-Entry "initialize" method #f 309 20 309 30 ("direction~self" "set!" "nextmethod" "direction" "text")}
        {Lisp-Entry "prepare-search" method #f 314 11 314 25 ("120" "Highlight" "'Highlight" "highlight-style" "47" "blue:" "162" "green:" "255" "red:" "Color" "highlight:" "get-styles-domain" "domain:" "Default" "'Default" "base:" "Found" "'Found" "name:" "Text-Style" "new" "found-style" "or" "list" "if" "ranges" "set!" "Text-View" "is?" "and" "text?" "get-client-selection" "client-selection" "get-client" "client" "let" "context" "set-target" "range")}
        {Lisp-Entry "focus-actions" method #f 324 20 324 33 ("command-search" "'command-search" "find-actions")}
        {Lisp-Entry "key-press" method #f 328 20 328 29 ("whole-words?:" "direction" "search" "key")}
        {Lisp-Entry "backspace-press" method #f 332 20 332 35 ("whole-words?:" "direction" "search" "word?" "word?:" "key")}
        {Lisp-Entry "next-page" method #f 336 20 336 29 ("forward" "'forward" "search")}
        {Lisp-Entry "prior-page" method #f 340 20 340 30 ("backward" "'backward" "search")}
        {Lisp-Entry "select-whole-words?" method #f 344 11 344 30 ("context" "set-whole-words?" "whole-words?")}
        {Lisp-Entry "select-ignore-case?" method #f 348 11 348 30 ("context" "set-ignore-case?" "ignore-case?")}
        {Lisp-Entry "on-whole-words" method #f 352 11 352 25 ("rehighlight-target" "if" "user-message" "context" "get-whole-words?" "not" "select-whole-words?" "evt")}
        {Lisp-Entry "on-ignore-case" method #f 358 11 358 25 ("rehighlight-target" "if" "user-message" "context" "get-ignore-case?" "not" "select-ignore-case?" "evt")}
        {Lisp-Entry "on-forward" method #f 364 11 364 21 ("forward" "'forward" "search" "evt")}
        {Lisp-Entry "on-backward" method #f 368 11 368 22 ("backward" "'backward" "search" "evt")}
        {Lisp-Entry "on-current" method #f 372 11 372 21 ("cancel" "evt")}
        {Lisp-Entry "on-widen" method #f 376 11 376 19 ("whole-words?:" "direction" "search" "text" "insert-string" "bell" "empty-string?" "if" "Range$Cell$" "new" "range-first-string" "add" "next-word" "extend" "get-end" "end" "get-selection" "selection" "get-client" "client" "let" "evt")}
        {Lisp-Entry "on-select-outer" method #f 388 11 388 26 ("get-client" "select-outer" "evt")}
        {Lisp-Entry "on-center-caret" method #f 392 11 392 26 ("get-client" "center-caret" "evt")}
        {Lisp-Entry "on-finish" method #f 396 11 396 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method #f 400 11 400 20 ("cancel" "evt")}
        {Lisp-Entry "search" method #f 404 11 404 17 ("iterate" "get-whole-words?" "or" "suffix" "prefix" "text" "first-line" "content" "select-whole-words?" "Text-View" "is?" "when" "get-client" "set-selection" "found-style" "text-multisearch-all" "highlight-style" "Text-Highlight" "add-highlight" "nu=?" "end" "start" "lambda" "for-each" "empty-string?" "unless" "remove-highlights" "found-range" "highlight-target" "Range$Cell$" "new" "to" "from" "bind" "bell" "begin" "append" "set-car!" "last-pair" "pair" "range" "update-range" "reversed?:" "start:" "list" "text-multisearch" "found" "set-whole-words?" "'backward" "eq?" "reversed?" "cardinality" "nu+" "backward" "get-start" "get-end" "forward" "case" "pos" "last" "last-range" "format" "concatenate" "not" "if" "target" "let" "key" "client" "search-key" "1" "+" "ranges" "set!" "set-regexp" "0" "get-target" "subseq" "context" "set-target" "len" "reset-prefix" "define" "keep" "'keep" "whole-words?" "whole-words?:" "again?" "direction")}
        {Lisp-Entry "rehighlight-target" method #f 469 11 469 29 ("direction" "search")}
        {Lisp-Entry "remove-highlights" method #f 473 11 473 28 ("remove-all-highlights" "Text-View" "is?" "when" "get-client" "client" "let")}
        {Lisp-Entry "finish" method #f 479 20 479 26 ("cleanup")}
        {Lisp-Entry "cancel" method #f 483 20 483 26 ("set-selection" "when" "get-client-selection" "client-selection" "get-client" "client" "let" "cleanup")}
        {Lisp-Entry "cleanup" method #f 491 20 491 27 ("clear-user-message" "acquire-focus" "unless" "remove-highlights" "when" "get-client" "client" "let" "lose-focus?")}}
      {Lisp-Entry "Extended-Mode" class #f 505 7 505 20 ("Command-Mode")
        {Lisp-Entry "focus-actions" method #f 508 20 508 33 ("command-extended" "'command-extended" "find-actions")}
        {Lisp-Entry "register-find-actions" method #f 512 11 512 32 ("command-find" "'command-find" "find-actions" "list" "get-application" "set-focus-actions")}
        {Lisp-Entry "on-find-file" method #f 516 11 516 23 ("user-message" "register-find-actions" "text-ending" "set-caret" "current-directory" "standardize-filename" "set-text" "Find-File-Mode" "new" "text" "set-mode" "evt")}
        {Lisp-Entry "on-find-filename" method #f 524 11 524 27 ("user-message" "register-find-actions" "set-text" "Find-Filename-Mode" "new" "text" "set-mode" "evt")}
        {Lisp-Entry "on-find-buffer" method #f 531 11 531 25 ("user-message" "register-find-actions" "Find-Buffer-Mode" "new" "text" "set-mode" "evt")}
        {Lisp-Entry "on-finish" method #f 537 11 537 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method #f 541 11 541 20 ("cancel" "evt")}}
      {Lisp-Entry "Find-Mode" class #f 550 7 550 16 ("Command-Mode")
        {Lisp-Entry "get-constituent-test" method #f 553 20 553 40 ("alphanumeric?")}
        {Lisp-Entry "auto-complete?" method #f 557 20 557 34 ()}
        {Lisp-Entry "auto-complete-char?" method #f 561 20 561 39 ("memv?" "last" "key")}
        {Lisp-Entry "favorite-completions?" method #f 565 20 565 41 ()}
        {Lisp-Entry "complete-name?" method #f 569 20 569 34 ("1" ">=" "size")}
        {Lisp-Entry "completion-name" method #f 573 20 573 35 ("either" "0" "Cell" "Range$Cell$" "new" "text" "get-string" "string-append" "postfix" "pos")}
        {Lisp-Entry "on-finish" method #f 577 11 577 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method #f 581 11 581 20 ("cancel" "evt")}
        {Lisp-Entry "cancel" method #f 585 20 585 26 ("cleanup")}
        {Lisp-Entry "cleanup" method #f 589 20 589 27 ("clear-user-message" "acquire-focus" "unless" "when" "get-client" "client" "let" "text" "set-string-content" "lose-focus?")}}
      {Lisp-Entry "Find-File-Mode" class #f 603 7 603 21 ("Find-Mode")
        {Lisp-Entry "symbol-completions" method #f 606 20 606 38 ("dot-and-dot-dot" "'dot-and-dot-dot" "ignore-hidden:" "current-directory" "path:" "list" "directory-content" "either" "string-append" "standardize-filename" "path" "char-ci=?" "test:" "compare-n" "lambda" "collect" "directory" "'directory" "pathname-type" "eq?" "file-exists?" "and" "or" "when" "dir" "receive" "string-length" "1" "+" "0" "substring" "values" "not" "if" "reversed?:" "find" "pos" "let" "filename" "split-filename" "define" "name")}
        {Lisp-Entry "finish" method #f 628 20 628 26 ("bell" "cleanup" "get-application" "edit-document" "get-parent" "set-current-directory" "pathname-normalize" "tokenise-filename" "File" "new" "anchorize" "file" "regular" "'regular" "pathname-type" "eq?" "file-exists?" "and" "if" "text" "first-line" "filename" "let")}}
      {Lisp-Entry "Find-Filename-Mode" class #f 644 7 644 25 ("Find-Mode")
        {Lisp-Entry "filenames" slot #f 647 8 647 17 ()}
        {Lisp-Entry "initialize" method #f 650 20 650 30 ("filenames" "set!" "nextmethod" "table-set!" "get-name" "downcase" "name" "when" "get-source" "source" "file" "lambda" "for-each-project-file" "equal?" "test:" "make-table" "table" "get-workbench" "workbench" "let" "collect-filenames" "define" "text")}
        {Lisp-Entry "symbol-completions" method #f 666 20 666 38 ("queue-list" "enqueue" "char-ci=?" "test:" "string-length" "compare-n" "when" "file" "filename" "lambda" "filenames" "iterate-table" "new-queue" "queue" "let" "name")}
        {Lisp-Entry "finish" method #f 675 20 675 26 ("bell" "get-application" "edit-document" "if" "text" "first-line" "continuation-return" "1" "start:" "find" "not" "0" "string-ref" "eqv?" "and" "empty-string?" "or" "substring" "remaining" "char-ci=?" "test:" "compare-n" "when" "file" "filename" "filenames" "iterate-table" "string-length" "len" "let" "return" "lambda" "continuation-capture" "name" "find-file" "define")}}
      {Lisp-Entry "Find-Buffer-Mode" class #f 702 7 702 23 ("Find-Mode")
        {Lisp-Entry "symbol-completions" method #f 705 20 705 38 ("all-views" "char-ci=?" "test:" "string-length" "compare-n" "when" "present-title" "presentation" "let" "view" "lambda" "collect" "name")}
        {Lisp-Entry "finish" method #f 713 20 713 26 ("cleanup" "bring-to-front" "bell" "current-frame" "focus-host" "first" "send-to-back" "begin" "2" "length" ">=" "get-stage" "get-views" "views" "empty-string?" "if" "text" "first-line" "let" "all-views" "present-title" "string-ci=?" "view" "lambda" "find-if" "name" "find-view" "define")}
        {Lisp-Entry "present-title" definition #f 736 15 736 28 ("empty-string?" "null?" "or" "get-controller" "name-status" "Document" "get-guest" "guest" "Host-View" "is?" "if" "View" "get-title" "Window" "typecase" "title" "let" "window/view")}
        {Lisp-Entry "all-views" definition #f 752 15 752 24 ("collect-palettes" "collect-frames" "append")}}
      {Lisp-Entry "Execute-Mode" class #f 762 7 762 19 ("Command-Mode")
        {Lisp-Entry "focus-actions" method #f 765 20 765 33 ("command-execute" "'command-execute" "find-actions")}
        {Lisp-Entry "auto-complete?" method #f 769 20 769 34 ()}
        {Lisp-Entry "on-finish" method #f 773 11 773 20 ("finish" "evt")}
        {Lisp-Entry "on-cancel" method #f 777 11 777 20 ("cancel" "evt")}}
      {Lisp-Entry "standardize-filename" definition #f 786 13 786 33 ("cardinality" "substring" "string-append" "starts-with?" "if" "pathname-normalize" "home" "let" "filename")}}})
"Completion-Popup"
 ({Lisp-File-Entry {File jedi "src" "jedi" "text" "Completion-Popup.jazz"} 1257476345
    {Lisp-Entry "jedi.text.Completion-Popup" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Completion-Popup" class #f 43 7 43 23 ("Popup")}
      {Lisp-Entry "Completion-Popup" class #f 49 7 49 23 ("190" "90" "5" "Point" "position:" "tree" "name:" "200" "100" "Dimension" "size:" "set-owner-text" "get-owner-text" "initialize" "Popup")
        {Lisp-Entry "owner-text" property #f 52 12 52 22 ()}
        {Lisp-Entry "get-owner-text" method #f 60 18 60 32 ("owner-text")}
        {Lisp-Entry "set-owner-text" method #f 64 18 64 32 ("owner-text" "set!" "text")}
        {Lisp-Entry "focus-lose" method #f 68 11 68 21 ("close" "owner-text" "receiving" "neq?" "when")}}}})
"Component-Catalog"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "catalog" "Component-Catalog.jazz"} 1257476346
    {Lisp-Entry "jazz.doc.catalog.Component-Catalog" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Component-Catalog" class #f 44 7 44 24 ("Catalog")
        {Lisp-Entry "client" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-client" accessor #f 47 33 47 41 ()}
        {Lisp-Entry "definitions-index" slot #f 48 8 48 25 ()}
        {Lisp-Entry "get-definitions-index" accessor #f 48 33 48 41 ()}
        {Lisp-Entry "references-index" slot #f 49 8 49 24 ()}
        {Lisp-Entry "get-references-index" accessor #f 49 33 49 41 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("update-catalog-indexes" "references-index~self" "eq?" "test:" "make-table" "definitions-index~self" "client~self" "set!" "nextmethod" "client" "name")}
        {Lisp-Entry "get-statistics" method #f 65 18 65 32 ("format-plural" "format" "references-index" "r" "definitions-index" "table-length" "d" "let")}
        {Lisp-Entry "update-catalog-indexes" method #f 78 11 78 33 ("definitions-index" "table-add" "when" "get-name" "name" "let" "level" "child" "lambda" "for-each-descendant" "self" "client" "set-catalog")}
        {Lisp-Entry "get-definitions" method #f 92 20 92 35 ("definitions-index" "table-ref" "name")}
        {Lisp-Entry "get-references" method #f 96 20 96 34 ("references-index" "table-ref" "name")}}}})
"Concept-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Concept-Doc.jazz"} 1257476353
    {Lisp-Entry "jazz.doc.doc.Concept-Doc" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Concept-Doc" class #f 44 7 44 18 ("Doc")
        {Lisp-Entry "get-class-image" method #f 52 25 52 40 ("Bitmap-Resource")}}}})
"Constant-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Constant-Doc.jazz"} 1257476356
    {Lisp-Entry "jazz.doc.doc.Constant-Doc" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Constant-Doc" class #f 44 7 44 19 ("Element-Doc")
        {Lisp-Entry "construct-literal" method #f 48 16 48 33 ("doc:" "name:" "self" "new" "doc" "name" "context")}
        {Lisp-Entry "get-class-image" method #f 57 25 57 40 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" method #f 61 20 61 46 ()}}}})
"Constructor-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Constructor-Entry.jazz"} 1257476356
    {Lisp-Entry "jazz.catalog.entry.Constructor-Entry" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Constructor-Entry" class #f 44 20 44 37 ("Method-Entry")
        {Lisp-Entry "get-image" method #f 47 20 47 29 ("Bitmap-Resource")}}}})
"Cursor-File"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "resource" "Cursor-File.jazz"} 1257476359
    {Lisp-Entry "jedi.builder.resource.Cursor-File" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Cursor-File" class #f 44 7 44 18 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Cursor-Resource")}
        {Lisp-Entry "resource-marker" method #f 51 20 51 35 ()}}}})
"Database-Workspace"
 ({Lisp-File-Entry {File jedi "src" "jedi" "workspace" "Database-Workspace.jazz"} 1257476369
    {Lisp-Entry "jedi.workspace.Database-Workspace" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Database-Workspace" class #f 46 7 46 25 ("maximized?:" "Text-Palette" "59" "vert" "second" "Output-Log" "Search-Results" "Properties-Manager" "Lisp-Console-Manager" "model-name:" "selection" "5" "Rect" "insets:" "20" "division:" "relative" "mode:" "horz" "orientation:" "first" "location:" "top" "status" "toolbar" "menubar" "name:" "Database-Manager" "frame-model:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" method #f 66 20 66 32 ("database" "'database")}}}})
"Definition-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Definition-Doc.jazz"} 1257476377
    {Lisp-Entry "jazz.doc.doc.Definition-Doc" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Definition-Doc" class #f 44 7 44 21 ("initialize" "Element-Doc")
        {Lisp-Entry "parameters" property #f 47 12 47 22 ()}
        {Lisp-Entry "get-parameters" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "set-parameters" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "print-catalog" method #f 56 11 56 24 ("doc" "parameters" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "present" method #f 68 20 68 27 ("parameters" "name" "cons" "format")}
        {Lisp-Entry "present-text" method #f 77 20 77 32 ("package-name" "get-children" "example" "lambda" "map" "examples" "null?" ",@paragraphs" "name" "cons" "->string" "form->node" "->jml" "paragraphs" "tag" "bind" "description" "when" "present-parameters" "get-effective-title" "class:" "parameters" "not" "if")}
        {Lisp-Entry "property-presentation" method #f 111 25 111 46 ("nextmethod" "else" "parameters" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" method #f 117 20 117 36 ("nextmethod" "else" "String-Row" "new" "parameters" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" method #f 123 20 123 46 ("parameters" "package-name")}}}})
"Definition-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Definition-Entry.jazz"} 1257476378
    {Lisp-Entry "jazz.catalog.entry.Definition-Entry" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Definition-Entry" class #f 43 20 43 36 ("Hierarchical-Entry")
        {Lisp-Entry "type" slot #f 46 8 46 12 ()}
        {Lisp-Entry "get-type" accessor #f 46 23 46 31 ()}
        {Lisp-Entry "set-type" accessor #f 46 23 46 31 ()}
        {Lisp-Entry "literal?" slot #f 47 8 47 16 ()}
        {Lisp-Entry "get-literal?" accessor #f 47 24 47 32 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("literal?~self" "type~self" "set!" "nextmethod" "references" "definitions" "end-column" "end-line" "column" "line" "literal?" "type" "name" "modifiers")}
        {Lisp-Entry "update-indexes" method #f 61 20 61 34 ("references" "key" "lambda" "for-each" "name" "update-index" "references-index" "definitions-index")}}}})
"Designer-Manager"
 ({Lisp-File-Entry {File jedi "src" "jedi" "designer" "Designer-Manager.jazz"} 1257476381
    {Lisp-Entry "jedi.designer.Designer-Manager" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Designer-Manager" class #f 48 7 48 23 ("rect" "mode-rect" "edit" "mode-edit" "0" "2" "select" "mode:" "on-mode" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "selected?:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "22" "Dimension" "size:" "mode-select" "name:" "set-client" "get-client" "initialize" "View")
        {Lisp-Entry "client" property #f 51 12 51 18 ()}
        {Lisp-Entry "flow-layout" slot #f 54 8 54 19 ()}
        {Lisp-Entry "external-name" method #f 66 25 66 38 ("designer-manager" "'designer-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 75 25 75 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 79 25 79 35 ()}
        {Lisp-Entry "client-activate" method #f 83 20 83 35 ("get-client" "set-client" "View-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "finish" method #f 94 20 94 26 ("layout-view" "0" "5" "4" "Rect" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" method #f 100 20 100 26 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "on-editor" method #f 104 11 104 20 ("designer:" "get-property" "set-designer" ":designer-change" "get-kind" "case" "evt")}
        {Lisp-Entry "on-mode" method #f 114 11 114 18 ("set-mode" "current-document" "editor" "mode:" "get-property" "mode" "let" "evt")}
        {Lisp-Entry "get-client" method #f 125 18 125 28 ("client")}
        {Lisp-Entry "set-client" method #f 129 18 129 28 ("set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "set-designer" method #f 139 11 139 23 ("class-of" "type-name" "format" "get-reference" "reference" "let" "set-title" "not" "if" "designer")}}}})
"Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Doc.jazz"} 1257477399
    {Lisp-Entry "jazz.doc.doc.Doc" module #f 11 18 11 34 ("jazz")
      {Lisp-Entry "Doc" class #f 20 7 20 10 ("initialize" "Component")
        {Lisp-Entry "title" property #f 23 12 23 17 ()}
        {Lisp-Entry "get-title" accessor #f 23 48 23 56 ()}
        {Lisp-Entry "set-title" accessor #f 23 48 23 56 ()}
        {Lisp-Entry "description" property #f 24 12 24 23 ()}
        {Lisp-Entry "get-description" accessor #f 24 48 24 56 ()}
        {Lisp-Entry "set-description" accessor #f 24 48 24 56 ()}
        {Lisp-Entry "construct-literal" method #f 28 16 28 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "install-child" method #f 32 20 32 33 ("nextmethod" "else" "set-description" "description" "get-model-name" "case" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "get-catalog" method #f 43 26 43 37 ("parent" "get-catalog")}
        {Lisp-Entry "set-catalog" method #f 47 26 47 37 ("cat")}
        {Lisp-Entry "get-effective-title" method #f 56 18 56 37 ("name" "->string" "title" "either")}
        {Lisp-Entry "update-indexes" method #f 65 26 65 40 ("self" "table-add" "name" "not-null?" "when" "references-index" "definitions-index")}
        {Lisp-Entry "print-catalog" method #f 70 26 70 39 ("description" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-documentation" method #f 82 18 82 35 ("get-definitions" "self" "get-parent" "eq?" "doc" "lambda" "find-if" "get-catalog" "catalog" "let" "symbol")}
        {Lisp-Entry "present" method #f 94 26 94 33 ("description")}
        {Lisp-Entry "present-text" method #f 98 26 98 38 ("null?" "if" "form->node" "->jml" "paragraphs" "tag" "bind" "description" "when")}
        {Lisp-Entry "present-parameters" method #f 107 21 107 39 ("join" "concatenate" "list" "if" "format" "->string" "parameter" "lambda" "map" "append" "all" "rest:" "rest" "named:" "named" "optional:" "optional" "not-found:" "positional:" "getf" "positional" "let" "else" "string?" "null?" "cond" "parameters")}
        {Lisp-Entry "Red-Ball" constant #f 140 12 140 20 ()}
        {Lisp-Entry "property-presentation" method #f 149 25 149 46 ("nextmethod" "else" "description" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" method #f 155 20 155 36 ("nextmethod" "else" "Doc-Text-Row" "description" "String-Row" "new" "title" "field-name" "case" "property")}
        {Lisp-Entry "display-property?" method #f 162 20 162 37 ("visible?" "children" "before" "name-info" "field-name" "memq?" "not" "property")}
        {Lisp-Entry "get-categorized-properties" method #f 166 20 166 46 ("description" "title")}
        {Lisp-Entry "get-addable-classes" method #f 170 20 170 39 ("Method-Doc" "Syntax-Doc" "Constant-Doc" "Interface-Doc" "Class-Doc" "Package-Doc" "Concept-Doc" "Section-Doc" "list")}}}})
"Doc-Catalog"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "catalog" "Doc-Catalog.jazz"} 1257476388
    {Lisp-Entry "jazz.doc.catalog.Doc-Catalog" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Doc-Catalog" class #f 43 7 43 18 ("Component-Catalog")
        {Lisp-Entry "project" slot #f 46 8 46 15 ()}
        {Lisp-Entry "get-project" accessor #f 46 23 46 31 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("project~self" "set!" "nextmethod" "project" "client" "name")}}}})
"Doc-Editor"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "tools" "Doc-Editor.jazz"} 1257476388
    {Lisp-Entry "jazz.doc.tools.Doc-Editor" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Doc-Editor" class #f 47 7 47 17 ("card" "card-border" "second" "390" "card-contour" "183" "width:" "descendant" "descendants" "header" "fill" "content" "vscroll?:" "hscroll?:" "document" "scroller" "entry" "style:" "edge" "border-type:" "first" "366" "255" "descendants-border" "250" "division:" "horz" "orientation:" "center" "367" "splitter" "on-edit" "tail" "edit" "on-build" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "build" "6" "flow" "north" "location:" "33" "300" "toolbar" "name:" "0" "2" "Rect" "layout-insets:" "border" "layout-type:" "400" "650" "Dimension" "size:" "title:" "set-entry" "get-entry" "initialize" "Editor-View")
        {Lisp-Entry "entry" property #f 50 12 50 17 ()}
        {Lisp-Entry "type" slot #f 53 8 53 12 ()}
        {Lisp-Entry "location" slot #f 54 8 54 16 ()}
        {Lisp-Entry "expression" slot #f 55 8 55 18 ()}
        {Lisp-Entry "text-object" slot #f 56 8 56 19 ()}
        {Lisp-Entry "text-location" slot #f 57 8 57 21 ()}
        {Lisp-Entry "form-model" method #f 78 20 78 30 ("nextmethod" "else" "Docs-Tree" "descendants" "get-name" "case" "form")}
        {Lisp-Entry "install" method #f 84 20 84 27 ("self" "set-editor" "categorized" "'categorized" "card" "'card" "get-tree" "set-filter" "descendant" "'descendant" "descendants" "'descendants" "locate" "child" "set-title" "nextmethod" "rest")}
        {Lisp-Entry "focus-document" method #f 92 20 92 34 ("descendant" "'descendant" "descendants" "'descendants" "locate" "child" "acquire-focus")}
        {Lisp-Entry "get-tree" method #f 101 18 101 26 ("tree" "descendants" "locate")}
        {Lisp-Entry "host-icon" method #f 110 25 110 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 114 25 114 35 ()}
        {Lisp-Entry "host-position" method #f 118 25 118 38 ("59" "52" "Point")}
        {Lisp-Entry "host-size" method #f 122 25 122 34 ("500" "800" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 126 20 126 35 ("home")}
        {Lisp-Entry "new-controller" method #f 136 11 136 25 ("self" "Doc-Editor-Controller" "new")}
        {Lisp-Entry "Doc-Editor-Controller" class #f 141 9 141 30 ("Editor-View-Controller")
          {Lisp-Entry "name-status" method #f 144 13 144 24 ("document" "editor-title")}}
        {Lisp-Entry "resize-center" method #f 153 11 153 24 ("card-contour" "'card-contour" "0" "descendants-border" "'descendants-border" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-build" method #f 158 11 158 19 ("on-build" "'on-build" "unimplemented" "bell" "client" "null?" "if" "evt")}
        {Lisp-Entry "on-edit" method #f 164 11 164 18 ("edit-form" "evt")}
        {Lisp-Entry "get-entry" method #f 173 18 173 27 ("entry")}
        {Lisp-Entry "set-entry" method #f 177 18 177 27 ("setup" "text-location" "text" "object" "location" "bind" "entry" "set!" "info")}
        {Lisp-Entry "setup" method #f 183 11 183 16 ("text-location" "text-object" "expression" "location" "set!" "text-loc" "text" "object" "loc")}
        {Lisp-Entry "editor-title" method #f 195 20 195 32 ("get-form" "get-origin" "get-base" "format" "null?" "if" "get-reference" "reference" "let")}}}})
"Doc-Insert"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Doc-Insert.jazz"} 1257477399
    {Lisp-Entry "jazz.doc.doc.Doc-Insert" module #f 11 18 11 41 ("jazz")
      {Lisp-Entry "Doc-Insert" class #f 17 7 17 17 ("initialize" "Doc")
        {Lisp-Entry "path" property #f 20 12 20 16 ()}
        {Lisp-Entry "get-path" accessor #f 20 41 20 49 ()}
        {Lisp-Entry "set-path" accessor #f 20 41 20 49 ()}}}})
"Doc-Text-Actions"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "designer" "Doc-Text-Actions.jazz"} 1257476389
    {Lisp-Entry "jazz.doc.designer.Doc-Text-Actions" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Doc-Text-Actions" class #f 46 7 46 23 (":control" "Shortcut" "shortcut:" "on-parameter" ":focus" "Event-Handler" "action-handler:" "parameter" "name:" "Actions")}}})
"Doc-Text-List-Row"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "designer" "Doc-Text-List-Row.jazz"} 1257476389
    {Lisp-Entry "jazz.doc.designer.Doc-Text-List-Row" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Doc-Text-List-Row" class #f 44 7 44 24 ("List-Row")
        {Lisp-Entry "get-subrow-class" method #f 47 20 47 36 ("Doc-Text-Row")}}}})
"Doc-Text-Row"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "designer" "Doc-Text-Row.jazz"} 1257476389
    {Lisp-Entry "jazz.doc.designer.Doc-Text-Row" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Doc-Text-Row" class #f 44 7 44 19 ("Formatted-Text-Row")
        {Lisp-Entry "new-editor" method #f 52 20 52 30 ("editor-class" "new")}
        {Lisp-Entry "editor-class" method #f 56 20 56 32 ("Doc-Text-View")}
        {Lisp-Entry "editor-height" method #f 60 20 60 33 ("700")}}}})
"Doc-Text-View"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "designer" "Doc-Text-View.jazz"} 1257476389
    {Lisp-Entry "jazz.doc.designer.Doc-Text-View" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Doc-Text-View" class #f 47 7 47 20 ("Text" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "4" "left-padding:" "Row-Formatted-Text-View")
        {Lisp-Entry "install" method #f 54 20 54 27 ("Variable" "Code" "Dark-Blue" "Hyperlink" "Reference" "Purple" "Comment" "Dark-Red" "Color" "color:" "Title" "Font" "font:" "Text-Style" "add-style" "Heading3" "Heading2" "Heading1" "Default" "base:" "Heading0" "name:" "Format" "add-format" "nextmethod" "rest")}
        {Lisp-Entry "focus-actions" method #f 79 20 79 33 ("nextmethod" "doc-text" "'doc-text" "find-actions" "cons")}
        {Lisp-Entry "get-context-menu" method #f 89 20 89 36 ()}
        {Lisp-Entry "on-parameter" method #f 93 11 93 23 ("12" "+" "get-end" "end" "copy" "start" "let" "1" "get-start" "-" "set-caret" "insert-string" "begin" "empty-selection?" "if" "evt")}}}})
"DocToHTML-Transformation"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "transformation" "DocToHTML-Transformation.jazz"} 1257476389
    {Lisp-Entry "jazz.doc.transformation.DocToHTML-Transformation" module #f 37 18 37 66 ("jazz")
      {Lisp-Entry "DocToHTML-Transformation" class #f 43 7 43 31 ("JML-Transformation")
        {Lisp-Entry "<parameter>" method #f 46 12 46 23 (",text" "get-child-text" "text" "let" "node")}
        {Lisp-Entry "<code>" method #f 51 12 51 18 (",text" "get-child-text" "text" "let" "node")}
        {Lisp-Entry "<reference>" method #f 56 12 56 23 (",text" ",name" "href:" "->string" "get-text" "if" "text" "first-child" "child" "format" "name" "'href" "get-property" "href" "let*" "node")}
        {Lisp-Entry "<header>" method #f 64 12 64 20 (",text" "get-child-text" "text" "let" "node")}
        {Lisp-Entry "<node>" method #f 69 12 69 18 ("->jml" "get-children" "map" "'node" "get-tag" "eq?" "JML-Element" "is?" "and" "if" "expand" "define" "node")}
        {Lisp-Entry "<ordered>" method #f 78 12 78 21 ("->jml" "get-children" "map" "ordered" "'ordered" "get-tag" "eq?" "JML-Element" "is?" "and" "if" "expand" "define" "node")}
        {Lisp-Entry "<definition>" method #f 87 12 87 24 ("children->jml" ",title" "class:" "name" "'name" "->string" "'title" "get-property" "either" "title" "let" "node")}
        {Lisp-Entry "<properties>" method #f 94 12 94 24 ("JML-Text" "is?" "if" "get-text" "get-children" "value" "property" "bind" "prop" "lambda" "map" "class:" "node")}
        {Lisp-Entry "<terminology>" method #f 104 12 104 25 ("JML-Text" "is?" "get-text" "get-children" "bind" "definition" "lambda" "map" ",text" ",term" "if" "class:" "'text" "text" "'term" "get-property" "term" "let" "node")}
        {Lisp-Entry "<styled-table>" method #f 118 12 118 26 ("children->jml" "properties->jml" ",style" "style:" "red" "'red" "1" "solid" "'solid" "format" "style" "let" "node")}}}})
"DocToText-Transformation"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "transformation" "DocToText-Transformation.jazz"} 1257476390
    {Lisp-Entry "jazz.doc.transformation.DocToText-Transformation" module #f 37 18 37 66 ("jazz")
      {Lisp-Entry "DocToText-Transformation" class #f 43 7 43 31 ("JML-Transformation")
        {Lisp-Entry "<parameter>" method #f 46 12 46 23 (",text" "Dark-Red" "color:" "get-child-text" "text" "let" "node")}
        {Lisp-Entry "<code>" method #f 51 12 51 18 (",text" "Dark-Red" "color:" "get-child-text" "text" "let" "node")}
        {Lisp-Entry "<hyperlink>" method #f 56 12 56 23 (",text" "Dark-Blue" "color:" "get-child-text" "text" "let" "node")}
        {Lisp-Entry "<node>" method #f 61 12 61 18 ("children->jml" "bulleted?:" "node")}
        {Lisp-Entry "<properties>" method #f 65 12 65 24 ("get-text" "get-children" "value" "property" "bind" "prop" "lambda" "map" "node")}
        {Lisp-Entry "<styled-table>" method #f 75 12 75 26 ("children->jml" "properties->jml" ",style" "style:" "red" "'red" "1" "solid" "'solid" "format" "style" "let" "node")}}}})
"Docs-Tree"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "tools" "Docs-Tree.jazz"} 1257476391
    {Lisp-Entry "jazz.doc.tools.Docs-Tree" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Docs-Tree" class #f 43 7 43 16 ("Descendants-Tree")
        {Lisp-Entry "row-state" method #f 46 20 46 29 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Element-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Element-Doc.jazz"} 1257476401
    {Lisp-Entry "jazz.doc.doc.Element-Doc" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Element-Doc" class #f 43 7 43 18 ("initialize" "Doc")
        {Lisp-Entry "access" property #f 46 12 46 18 ()}
        {Lisp-Entry "get-access" accessor #f 46 50 46 58 ()}
        {Lisp-Entry "set-access" accessor #f 46 50 46 58 ()}
        {Lisp-Entry "examples" property #f 47 12 47 20 ()}
        {Lisp-Entry "get-examples" accessor #f 47 50 47 58 ()}
        {Lisp-Entry "set-examples" accessor #f 47 50 47 58 ()}
        {Lisp-Entry "package-name" property #f 48 12 48 24 ()}
        {Lisp-Entry "get-package-name" accessor #f 48 50 48 58 ()}
        {Lisp-Entry "set-package-name" accessor #f 48 50 48 58 ()}
        {Lisp-Entry "install-child" method #f 51 20 51 33 ("nextmethod" "else" "set-examples" "examples" "get-model-name" "case" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "property-presentation" method #f 62 25 62 46 ("nextmethod" "else" "package-name" "examples" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" method #f 69 20 69 36 ("nextmethod" "else" "Doc-Text-List-Row" "new" "examples" "field-name" "case" "property")}}}})
"Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Entry.jazz"} 1257476403
    {Lisp-Entry "jazz.catalog.entry.Entry" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Entry" class #f 40 20 40 25 ("Object")}}})
"Export-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Export-Doc.jazz"} 1257476411
    {Lisp-Entry "jazz.doc.doc.Export-Doc" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Export-Doc" class #f 43 7 43 17 ("Element-Doc")}}})
"Field-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Field-Doc.jazz"} 1257476412
    {Lisp-Entry "jazz.doc.doc.Field-Doc" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Field-Doc" class #f 44 7 44 16 ("Definition-Doc")
        {Lisp-Entry "construct-literal" method #f 48 16 48 33 ("doc:" "name:" "self" "new" "doc" "name" "context")}
        {Lisp-Entry "get-class-image" method #f 57 25 57 40 ("Bitmap-Resource")}}}})
"File-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "File-Entry.jazz"} 1257476413
    {Lisp-Entry "jazz.catalog.entry.File-Entry" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "File-Entry" class #f 45 20 45 30 ("Catalog-Entry")
        {Lisp-Entry "catalog" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-catalog" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "set-catalog" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "marked?" slot #f 49 8 49 15 ()}
        {Lisp-Entry "get-marked?" accessor #f 49 26 49 34 ()}
        {Lisp-Entry "set-marked?" accessor #f 49 26 49 34 ()}
        {Lisp-Entry "file" slot #f 50 8 50 12 ()}
        {Lisp-Entry "time" slot #f 51 8 51 12 ()}
        {Lisp-Entry "get-time" accessor #f 51 23 51 31 ()}
        {Lisp-Entry "definitions" slot #f 52 8 52 19 ()}
        {Lisp-Entry "category-name" slot #f 53 8 53 21 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("set-file-definition" "self" "set-parent" "definition" "lambda" "for-each" "marked?~self" "get-base" "category-name~self" "definitions~self" "time~self" "file~self" "catalog~self" "set!" "nextmethod" "definitions" "time" "file" "catalog")}
        {Lisp-Entry "print" method #f 70 20 70 25 ("file" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print-catalog" method #f 76 26 76 39 ("definitions" "print-catalog" "definition" "lambda" "for-each" "time" "time->seconds" "file" "self" "class-of" "type-name" "identifier-name" "2" "format" "not" "when" "printer" "first?")}
        {Lisp-Entry "get-file" method #f 94 20 94 28 ("file")}
        {Lisp-Entry "get-moniker" method #f 98 20 98 31 ("file")}
        {Lisp-Entry "get-definitions" method #f 102 20 102 35 ("definitions")}
        {Lisp-Entry "get-category-name" method #f 106 20 106 37 ("category-name")}
        {Lisp-Entry "get-file-definition" method #f 110 20 110 39 ("self")}
        {Lisp-Entry "get-definition" method #f 114 18 114 32 ("definitions" "get-name" "=" "definition" "lambda" "find-if" "name")}
        {Lisp-Entry "get-image" method #f 125 20 125 29 ("Bitmap-Resource")}
        {Lisp-Entry "present-detailed" method #f 129 20 129 36 ("file" "get-name")}
        {Lisp-Entry "update-indexes" method #f 138 20 138 34 ("definitions" "update-indexes" "definition" "lambda" "for-each" "references-index" "definitions-index")}
        {Lisp-Entry "insert-definition" method #f 149 20 149 37 ("get-definitions" "insert-definitions" "sort?" "level" "father" "tree")}}}})
"File-Parser"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "parser" "File-Parser.jazz"} 1257476414
    {Lisp-Entry "jazz.catalog.parser.File-Parser" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "File-Parser" class #f 43 7 43 18 ("Object")
        {Lisp-Entry "catalog" slot #f 46 8 46 15 ()}
        {Lisp-Entry "char-encoding" slot #f 47 8 47 21 ()}
        {Lisp-Entry "heuristics" slot #f 48 8 48 18 ()}
        {Lisp-Entry "references?" slot #f 49 8 49 19 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("references?~self" "heuristics~self" "char-encoding~self" "catalog~self" "set!" "nextmethod" "references?" "references?:" "heuristics" "heuristics:" "char-encoding" "char-encoding:" "catalog")}
        {Lisp-Entry "get-heuristic" method #f 60 11 60 24 ("getf" "heuristics" "when" "name")}
        {Lisp-Entry "parse" method #f 65 35 65 40 ("time" "file")}}}})
"Filing-Catalog"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "catalog" "Filing-Catalog.jazz"} 1257476415
    {Lisp-Entry "jazz.catalog.catalog.Filing-Catalog" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Filing-Catalog" class #f 51 20 51 34 ("Catalog")
        {Lisp-Entry "file" slot #f 54 8 54 12 ()}
        {Lisp-Entry "get-file" accessor #f 54 33 54 41 ()}
        {Lisp-Entry "active?" slot #f 55 8 55 15 ()}
        {Lisp-Entry "loaded?" slot #f 56 8 56 15 ()}
        {Lisp-Entry "modified?" slot #f 57 8 57 17 ()}
        {Lisp-Entry "directories" slot #f 58 8 58 19 ()}
        {Lisp-Entry "get-directories" accessor #f 58 33 58 41 ()}
        {Lisp-Entry "extensions" slot #f 59 8 59 18 ()}
        {Lisp-Entry "char-encoding" slot #f 60 8 60 21 ()}
        {Lisp-Entry "heuristics" slot #f 61 8 61 18 ()}
        {Lisp-Entry "references?" slot #f 62 8 62 19 ()}
        {Lisp-Entry "get-references?" accessor #f 62 33 62 41 ()}
        {Lisp-Entry "content-index" slot #f 63 8 63 21 ()}
        {Lisp-Entry "definitions-index" slot #f 64 8 64 25 ()}
        {Lisp-Entry "references-index" slot #f 65 8 65 24 ()}
        {Lisp-Entry "mutex" slot #f 66 8 66 13 ()}
        {Lisp-Entry "initialize" method #f 69 20 69 30 ("catalog" "'catalog" "make-mutex" "mutex~self" "references-index~self" "definitions-index~self" "equal?" "test:" "make-table" "content-index~self" "references?~self" "heuristics~self" "char-encoding~self" "extensions~self" "directories~self" "modified?~self" "loaded?~self" "active?~self" "file~self" "set!" "nextmethod" "references?" "heuristics" "char-encoding" "extensions" "directories" "file" "name")}
        {Lisp-Entry "get-active?" method #f 91 20 91 31 ("active?")}
        {Lisp-Entry "set-active?" method #f 95 20 95 31 ("active?" "set!" "flag")}
        {Lisp-Entry "set-modified?" method #f 99 11 99 24 ("modified?" "set!" "flag")}
        {Lisp-Entry "get-extensions" method #f 103 26 103 40 ("extensions")}
        {Lisp-Entry "get-char-encoding" method #f 107 26 107 43 ("char-encoding")}
        {Lisp-Entry "get-heuristics" method #f 111 26 111 40 ("heuristics")}
        {Lisp-Entry "iterate-content" method #f 115 18 115 33 ("content-index" "iterate-table" "lambda" "with-mutex" "proc")}
        {Lisp-Entry "iterate-definitions" method #f 121 18 121 37 ("definitions-index" "iterate-table" "lambda" "with-mutex" "proc")}
        {Lisp-Entry "iterate-references" method #f 127 18 127 36 ("references-index" "iterate-table" "lambda" "with-mutex" "proc")}
        {Lisp-Entry "get-file-definitions" method #f 133 18 133 38 ("%%get-file-definitions" "lambda" "with-mutex" "name")}
        {Lisp-Entry "%%get-file-definitions" method #f 139 11 139 33 ("content-index" "table-ref" "name")}
        {Lisp-Entry "get-file-entry" method #f 143 20 143 34 ("%%get-file-entry" "lambda" "with-mutex" "file")}
        {Lisp-Entry "%%get-file-entry" method #f 149 11 149 27 ("get-base" "%%get-file-definitions" "get-file" "pathname=?" "definition" "lambda" "find-if" "file")}
        {Lisp-Entry "get-statistics" method #f 155 18 155 32 ("format-plural" "format" "references-index" "r" "definitions-index" "table-length" "d" "f" "with-mutex" "length" "increase!" "file-entries" "name" "lambda" "iterate-table" "0" "count" "let" "content-index" "count-file-entries" "define")}
        {Lisp-Entry "with-mutex" method #f 179 11 179 21 ("mutex-unlock!" "prog1" "mutex" "mutex-lock!" "thunk")}
        {Lisp-Entry "activate" method #f 190 20 190 28 ("set-active?" "with-mutex" "get-active?" "unless" "references-index" "definitions-index" "update-indexes" "self" "set-catalog" "file-definition" "for-each" "definitions" "name" "iterate-table" "set!" "update-catalog-indexes" "content-index" "table-load" "lambda" "with-jazz-readtable" "user-message" "file" "exists?" "loaded?" "not" "and" "when" "load-content" "define" "report?" "report?:")}
        {Lisp-Entry "deactivate" method #f 220 20 220 30 ("set-active?")}
        {Lisp-Entry "save" method #f 229 11 229 15 ("set-modified?" "user-message" "modified?" "with-mutex" "set!" "print-catalog" "definition" "first?" "let" "format" "not-null?" "when" "definitions" "name" "bind" "info" "for-each" "printer" "lambda" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "file" "create-directories" "car" "key:" "string<?" "sort" "sorted" "content-index" "table-keys/values" "all" "let*" "save-content" "define")}
        {Lisp-Entry "update" method #f 263 18 263 24 ("edit-exception" "message-box" "car" "exc" "exception-reason" "map" "debug" "post-event" "format-plural" "length" "len" "sweep" "update-entry" "for-each" "set-modified?" "lambda" "with-mutex" "not-null?" "exception?" "partition-binary" "entries" "exceptions" "receive" "scan" "exceptions/entries" "let" "name" "user-message" "when" "activate" "report?" "report?:")}
        {Lisp-Entry "update-file" method #f 293 18 293 29 ("sweep" "update-entry" "set-modified?" "with-mutex" "bell" "edit-exception" "evt" "lambda" "execute:" "Event-Handler" "new" "exception-reason" "user-message/action-handler" "1" "get-start" "get-row" "+" "format" "Explore-Error" "is?" "line" "exception?" "if" "when" "scan-file" "exception/entry" "let" "report?:" "activate" "file")}
        {Lisp-Entry "update-entry" method #f 309 11 309 23 ("content-index" "table-add" "references-index" "definitions-index" "update-indexes" "get-base" "name" "set-marked?" "when" "%%get-file-entry" "actual" "get-file" "file" "let" "entry")}
        {Lisp-Entry "edit-exception" definition #f 320 15 320 29 ("bell" "selection:" "edit-document" "get-range" "range" "get-source" "source" "get-application" "appl" "let" "Explore-Error" "is?" "if" "exc")}
        {Lisp-Entry "scan" method #f 337 21 337 25 ("queue-list" "scan-directories" "new-queue" "queue" "let")}
        {Lisp-Entry "scan-directories" method #f 343 29 343 45 ("get-list" "for-each" "Directory-Group" "directories" "is?" "if" "scan-directory" "dir" "scandir" "define" "queue")}
        {Lisp-Entry "scan-directory" method #f 352 21 352 35 ("recursive?:" "directories?:" "files?:" "enqueue" "when" "scan-file" "entry" "let" "file" "lambda" "iterate-directory" "queue" "directory")}
        {Lisp-Entry "scan-file" method #f 363 21 363 30 (":console" "format" "wrap-exception" "exc" "lambda" "with-exception-filter" "unless" "get-modification-time" "exists?" "if" "get-time" "time->seconds" "=" "get-file-entry" "actual" "unmodified?" "get-parser" "parse" "user-message" "when" "time" "scan" "get-parser-class" "ci=?" "test:" "member?" "not" "or" "and" "get-extensions" "extensions" "get-extension" "extension" "let" "scan?" "define" "report?" "file")}
        {Lisp-Entry "Parser-Associations" definition #f 401 14 401 33 ("jazz.editor.scheme.Scheme-Parser" "jazz.editor.python.Python-Parser" "jazz.editor.properties.Properties-Parser" "jazz.editor.lua.Lua-Parser" "jazz.editor.javascript.JavaScript-Parser" "jazz.editor.java.Java-Parser" "jazz.editor.jazz.Jazz-Parser" "jazz.editor.css.CSS-Parser" "jazz.editor.c.C-Parser" "jazz.editor.commonlisp.CommonLisp-Parser" "lambda" "list")}
        {Lisp-Entry "get-parser-class" method #f 415 11 415 27 ("car" "proc" "when" "ci=?" "member?" "extensions" "ext" "lambda" "test:" "Parser-Associations" "rassociate" "info" "let" "extension")}
        {Lisp-Entry "get-parser" method #f 425 11 425 21 ("references?" "references?:" "get-heuristics" "heuristics:" "char-encoding" "char-encoding:" "self" "new" "when" "get-parser-class" "class" "let" "extension")}
        {Lisp-Entry "reset" method #f 436 11 436 16 ("set-marked?" "file-definition" "for-each" "definitions" "name" "lambda" "content-index" "iterate-table")}
        {Lisp-Entry "sweep" method #f 444 11 444 16 ("references-index" "definitions-index" "content-index" "get-file-definition" "get-marked?" "table-set!" "set-modified?" "not" "cddr" "set-cdr!" "set-marked?" "set!" "begin" "if" "car" "definition" "while" "cdr" "list" "previous" "let" "not-null?" "when" "definitions" "name" "lambda" "iterate-table" "reset?" "marked?" "table" "sweep-table" "define")}
        {Lisp-Entry "get-definitions" method #f 478 20 478 35 ("%%get-definitions" "lambda" "with-mutex" "name")}
        {Lisp-Entry "%%get-definitions" method #f 484 11 484 28 ("canonicalize-name" "definitions-index" "table-ref" "name")}
        {Lisp-Entry "search-definitions" method #f 488 11 488 29 ("get-output" "put-sequence" "->string" "search" "when" "definitions" "name" "definitions-index" "iterate-table" "List-Factory" "new" "fact" "let" "%%get-definitions" "not" "and" "if" "lambda" "with-mutex" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "target")}
        {Lisp-Entry "get-references" method #f 501 20 501 34 ("%%get-references" "lambda" "with-mutex" "name")}
        {Lisp-Entry "%%get-references" method #f 507 11 507 27 ("canonicalize-name" "references-index" "table-ref" "name")}
        {Lisp-Entry "canonicalize-name" method #f 511 11 511 28 ("->string" "name")}
        {Lisp-Entry "add-completions" method #f 520 20 520 35 ("references-index" "definitions-index" "with-mutex" "table-set!" "compare-n" "when" "value" "name" "lambda" "iterate-table" "table" "add-table" "define" "cardinality" "len" "let" "target" "dest")}}}})
"Form-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Form-Doc.jazz"} 1257476418
    {Lisp-Entry "jazz.doc.doc.Form-Doc" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Form-Doc" class #f 43 7 43 15 ("initialize" "Element-Doc")
        {Lisp-Entry "parameters" property #f 46 12 46 22 ()}
        {Lisp-Entry "get-parameters" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "set-parameters" accessor #f 46 47 46 55 ()}}}})
"Formatted-Workspace"
 ({Lisp-File-Entry {File jedi "src" "jedi" "workspace" "Formatted-Workspace.jazz"} 1257476421
    {Lisp-Entry "jedi.workspace.Formatted-Workspace" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Formatted-Workspace" class #f 46 7 46 26 ("maximized?:" "Text-Palette" "59" "Workbench-Manager" "Hierarchy-Browser" "Chapters-Browser" "31" "46" "Output-Log" "Search-Results" "Properties-Manager" "Lisp-Console-Manager" "model-name:" "selection" "second" "-27" "vert" "5" "Rect" "insets:" "36" "division:" "relative" "mode:" "horz" "orientation:" "first" "location:" "top" "status" "toolbar" "menubar" "name:" "Plain-Formatted-Text-View" "frame-model:" ":shift" ":alt" "Shortcut" "shortcut:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" method #f 73 20 73 32 ("formatted" "'formatted")}}}})
"Generic-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Generic-Doc.jazz"} 1257476429
    {Lisp-Entry "jazz.doc.doc.Generic-Doc" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Generic-Doc" class #f 43 7 43 18 ("Definition-Doc")}}})
"Help-Workspace"
 ({Lisp-File-Entry {File jedi "src" "jedi" "workspace" "Help-Workspace.jazz"} 1257476230
    {Lisp-Entry "jedi.workspace.Help-Workspace" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Help-Workspace" class #f 46 7 46 21 ("maximized?:" "second" "Help-Contents" "model-name:" "5" "Rect" "insets:" "18" "division:" "relative" "mode:" "horz" "orientation:" "first" "location:" "top" "status" "toolbar" "menubar" "name:" ":shift" ":alt" "Shortcut" "shortcut:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" method #f 59 20 59 32 ("help" "'help")}}}})
"Hierarchical-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Hierarchical-Entry.jazz"} 1257476439
    {Lisp-Entry "jazz.catalog.entry.Hierarchical-Entry" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Hierarchical-Entry" class #f 43 20 43 38 ("Indexed-Entry")
        {Lisp-Entry "modifiers" slot #f 46 8 46 17 ()}
        {Lisp-Entry "qualified" slot #f 47 8 47 17 ()}
        {Lisp-Entry "get-qualified" accessor #f 47 28 47 36 ()}
        {Lisp-Entry "set-qualified" accessor #f 47 28 47 36 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("qualified~self" "modifiers~self" "set!" "nextmethod" "apply" "rest" "qualified" "modifiers")}
        {Lisp-Entry "print-catalog" method #f 56 20 56 33 ("print-definitions" "end-column" "end-line" "column" "line" "name" "qualified" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-modifiers" method #f 70 11 70 24 ("modifiers")}
        {Lisp-Entry "has-modifier?" method #f 74 18 74 31 ("modifiers" "memq?" "modifier")}
        {Lisp-Entry "get-visibility" method #f 78 18 78 32 ("first" "package" "'package" "null?" "if" "modifiers" "private" "protected" "public" "intersection" "common" "let")}}}})
"Hierarchy-Browser"
 ({Lisp-File-Entry {File jedi "src" "jedi" "code" "Hierarchy-Browser.jazz"} 1257476440
    {Lisp-Entry "jedi.code.Hierarchy-Browser" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Hierarchy-Browser" class #f 50 7 50 24 ("329" "width:" "title:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "show-header?:" "definitions" "shown?:" "header" "content" "flat?:" "hscroll?:" "vscroll?:" "scroller" "on-update" "update" "on-toggle-sorted" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "sorted?" "tools" "name:" "fill" "layout-type:" "set-client" "get-client" "initialize" "Layout-View")
        {Lisp-Entry "client" property #f 53 12 53 18 ()}
        {Lisp-Entry "external-name" method #f 69 25 69 38 ("definitions-browser" "'definitions-browser" "rest")}
        {Lisp-Entry "host-icon" method #f 78 25 78 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 82 25 82 35 ()}
        {Lisp-Entry "client-activate" method #f 86 20 86 35 ("set-client" "not" "current-document" "entry" "car" "length" "1" "=" "get-context" "context:" "get-file-entries" "entries" "get-cataloguer" "cataloguer" "get-application" "appl" "let*" "safe-read-from-file" "ci=?" "get-extension" "ext" "get-controller" "get-moniker" "moniker" "let" "Code-Text-View" "is?" "if" "when" "guest" "client-entry" "define")}
        {Lisp-Entry "client-deactivate" method #f 108 20 108 37 ("set-client")}
        {Lisp-Entry "get-tools-view" method #f 117 20 117 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 121 20 121 33 ("acquire-focus" "definitions" "'definitions" "locate" "tree" "let")}
        {Lisp-Entry "get-sorted?" method #f 131 11 131 22 ("sorted?" "'sorted?" "locate" "get-selected?")}
        {Lisp-Entry "on-toggle-sorted" method #f 140 11 140 27 ("update" "get-sorted?" "definitions" "'definitions" "locate" "set-sort?" "evt")}
        {Lisp-Entry "on-update" method #f 145 11 145 20 ("update" "Form" "Exception" "is?" "or" "when" "safe-read-from-file" "client" "set!" "get-controller" "get-moniker" "moniker" "if" "current-document" "document" "let" "reload-jml-client" "define" "evt")}
        {Lisp-Entry "on-selection-change" method #f 160 11 160 30 ("selection-change" "definitions" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" method #f 167 11 167 26 ("selection-change" "definitions" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "insert-client-definition" method #f 183 11 183 35 ("insert-definition" "get-sorted?" "0" "insert-jml-definition" "JML-Node" "is?" "if" "client" "tree")}
        {Lisp-Entry "insert-jml-definition" method #f 189 11 189 32 ("key:" "string<?" "sort" "get-children" "some?" "child" "collect-if" "or" "JML-Element" "is?" "named?" "+" "definition" "lambda" "for-each" "sort-jml-definitions" "ordered" "definitions" "get-jml-named-children" "insert-jml-definitions" "autoload-class" "when" "model-name" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "state" "get-model-name" "else" "->string" "get-name" "identity" "=>" "'title" "get-property" "cond" "title" "Bitmap-Resource" "get-class-image" "Component" "subtype?" "and" "if" "image" "get-jml-model" "model" "let*" "insert-jml-self-definitions" "insert-jml-self" "row" "let" "insert-definition" "define" "sort?" "node" "level" "father" "tree")}
        {Lisp-Entry "edit-definitions" method #f 233 11 233 27 ("activate-focus?:" "edit" "edit-jml-definition" "JML-Node" "is?" "if" "definition")}
        {Lisp-Entry "edit-jml-definition" method #f 239 11 239 30 ("set-visible?" "bring-to-front" "center-caret" "'center-caret" "ensure-displayed?:" "set-selection-safe" "location-range" "range" "0" "list" "get-location" "append" "location" "get-guest" "text" "visible?:" "edit-document" "frame" "client" "get-origin" "moniker" "get-application" "appl" "let*" "definition")}
        {Lisp-Entry "get-client" method #f 256 18 256 28 ("client")}
        {Lisp-Entry "set-client" method #f 260 18 260 28 ("update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update" method #f 266 11 266 17 ("insert-client-definition" "lambda" "with-update-locked" "format" "else" "user-data:" "Bitmap-Resource" "image:" "exception-reason" "title:" "Tree-Node" "new" "list" "children:" "add-row" "Exception" "remove-every-row" "set-title" "not" "cond" "definitions" "'definitions" "locate" "tree" "let" "get-title" "JML-Node" "is?" "if" "client" "get-client-title" "define")}
        {Lisp-Entry "selection-change" method #f 292 11 292 27 ("edit-definitions" "Indexed-Entry" "is-not?" "or" "Exception" "is?" "unless" "get-row" "get-user-data" "get-single-selection" "selection" "get-controller" "get-moniker" "when" "current-document" "guest" "let" "get-file-definition" "get-file" "pathname=?" "and" "moniker" "definition" "same-file?" "define" "double-click?" "tree")}}}})
"Home-Workspace"
 ({Lisp-File-Entry {File jedi "src" "jedi" "workspace" "Home-Workspace.jazz"} 1257476444
    {Lisp-Entry "jedi.workspace.Home-Workspace" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Home-Workspace" class #f 46 7 46 21 ("Repositories-Manager" "Workbench-Manager" "Web-Servers-Manager" "Output-Log" "Profile-Results" "Search-Results" "Properties-Manager" "Lisp-Console-Manager" "model-name:" "selection" "-27" "vert" "second" "5" "Rect" "insets:" "20" "division:" "relative" "mode:" "horz" "orientation:" "first" "location:" "top" "status" "toolbar" "menubar" "name:" ":shift" ":alt" "Shortcut" "shortcut:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" method #f 70 20 70 32 ("home" "'home")}}}})
"Horizontal-View"
 ({Lisp-File-Entry {File jedi "src" "jedi" "test" "Horizontal-View.jazz"} 1257476445
    {Lisp-Entry "jedi.test.Horizontal-View" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Horizontal-View" class #f 43 7 43 22 ("View")}
      {Lisp-Entry "Horizontal-View" class #f 49 7 49 22 ("View")
        {Lisp-Entry "install" method #f 52 11 52 18 ("3" "0" "naturals" "->string" "title:" "Label-View" "self" "parent:" "Vertical-View" "new" "Horizontal-View" "parent" "get-parent" "is-not?" "2" "=" "and" "if" "n" "lambda" "for-each" "nextmethod" "rest")}
        {Lisp-Entry "layout" method #f 66 11 66 17 ("increase!" "set-size" "Point" "set-position" "view" "lambda" "for-each-view" "0" "h" "Dimension" "new" "child-size" "get-height" "height" "get-width" "quotient" "width" "get-size" "size" "length" "let*" "children" "when")}
        {Lisp-Entry "draw" method #f 86 11 86 15 ("Dark-Red" "name:" "Color" "get-bounds" "fill-rect" "lv" "lh" "context" "surface")}}}})
"IDE"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "IDE.jazz"} 1257476450
    {Lisp-Entry "jazz.ide.IDE" module #f 37 18 37 30 ("jazz")
      {Lisp-Entry "IDE" class #f 67 7 67 10 ("Macro-Recorder" "Cataloguer" "new" "initialize" "Application")
        {Lisp-Entry "local-debugger" slot #f 70 8 70 22 ()}
        {Lisp-Entry "cataloguer" slot #f 71 8 71 18 ()}
        {Lisp-Entry "catalog-context" slot #f 72 8 72 23 ()}
        {Lisp-Entry "catalog-file" slot #f 73 8 73 20 ()}
        {Lisp-Entry "search" slot #f 74 8 74 14 ()}
        {Lisp-Entry "recorder" slot #f 75 8 75 16 ()}
        {Lisp-Entry "start-process" method #f 78 20 78 33 ("start-jazz-debugger" "process-title" "set-caption-base" "toplevel" "get-caption-base" "not" "when" "nextmethod")}
        {Lisp-Entry "prepare-workbench" method #f 85 20 85 37 ("setup-workbench" "nextmethod")}
        {Lisp-Entry "process-title" method #f 90 11 90 24 ("get-preferences" "get-toplevel-title" "either")}
        {Lisp-Entry "workspace-installed" method #f 95 20 95 39 ("update-catalog-context" "nextmethod")}
        {Lisp-Entry "finish-process" method #f 100 20 100 34 ("get-workbench" "load-catalogs" "lambda" "event-thread" "thread-write" "nextmethod" "Debugger-Manager" "new" "set-debugger-manager")}
        {Lisp-Entry "conclude-environment" method #f 110 20 110 40 ("console-output-port" "current-output-port" "console-input-port" "current-input-port" "get-local-register" "attach-to-controller" "get-controller-debugger" "not" "layout-menu" "set-visible?" "windows" "'windows" "kernel-platform" "neq?" "toggle-terminal" "'toggle-terminal" "label" "debug" "'debug" "child" "get-content" "menu" "when" "find-menubar" "menubar" "let" "nextmethod")}
        {Lisp-Entry "close-environment" method #f 128 20 128 37 ("nextmethod" "detach-debugger-processes" "reloading-process?" "unless")}
        {Lisp-Entry "get-backward-history" method #f 139 18 139 38 ("history-manager" "get-backward-history")}
        {Lisp-Entry "get-forward-history" method #f 143 18 143 37 ("history-manager" "get-forward-history")}
        {Lisp-Entry "get-recorder" method #f 152 20 152 32 ("recorder")}
        {Lisp-Entry "use-profile?" method #f 161 20 161 32 ()}
        {Lisp-Entry "use-profile-logging?" method #f 168 15 168 35 ()}
        {Lisp-Entry "use-profile-logging?" method #f 171 24 171 44 ()}
        {Lisp-Entry "default-frame-class" method #f 180 20 180 39 ("Plain-Text-View")}
        {Lisp-Entry "known-extension-frame-class" method #f 184 20 184 47 ("nextmethod" "else" "jazz.ui.Image-View" "jazz.editor.python.Python-Text-View" "jazz.editor.lua.Lua-Text-View" "jazz.editor.javascript.JavaScript-Text-View" "jazz.editor.properties.Properties-Text-View" "jazz.editor.css.CSS-Text-View" "jazz.editor.sql.SQL-Text-View" "XML-Text-View" "jazz.editor.html.HTML-Text-View" "jazz.editor.csharp.CSharp-Text-View" "jazz.editor.java.Java-Text-View" "jazz.editor.prop.Prop-Text-View" "jazz.editor.c.C-Text-View" "Plain-Formatted-Text-View" "Plain-Text-View" "ci=?" "test:" "member?" "cond" "ext")}
        {Lisp-Entry "unknown-extension-frame-class" method #f 203 20 203 49 ("Plain-Text-View")}
        {Lisp-Entry "get-cataloguer" method #f 212 20 212 34 ("cataloguer")}
        {Lisp-Entry "get-catalog-context" method #f 216 20 216 39 ("catalog-context")}
        {Lisp-Entry "update-catalog-context" method #f 220 18 220 40 ("get-catalog-context" "set-catalog-context")}
        {Lisp-Entry "set-catalog-context" method #f 224 18 224 37 ("catalog-context" "set!" "set-title" "set-icon" "'mode" "find-component" "mode" "IDE-Status" "toplevel" "find-palette" "status" "Bitmap-Resource" "icon" "c" "jazz" "case" "title" "let" "when" "context")}
        {Lisp-Entry "get-search-manager" method #f 242 20 242 38 ("search")}
        {Lisp-Entry "get-history-manager" method #f 246 18 246 37 ("history-manager")}
        {Lisp-Entry "user-feedback" method #f 250 20 250 33 ("user-message" "message")}
        {Lisp-Entry "stage-class" method #f 259 20 259 31 ("Wallpaper-Stage")}
        {Lisp-Entry "class-actions" method #f 268 20 268 33 ("nextmethod" "ide" "'ide" "find-actions" "cons")}
        {Lisp-Entry "terminate-process" method #f 278 20 278 37 ("error?:" "debugger" "'debugger" "get-local-register" "unregister-object" "nextmethod")}
        {Lisp-Entry "save-environment" method #f 288 20 288 36 ("save-catalogs" "cataloguer" "when" "nextmethod")}
        {Lisp-Entry "reload-process" method #f 299 20 299 34 ("message-box")}
        {Lisp-Entry "load-session" method #f 309 11 309 23 ("set-current-directory" "when" "session" "application" "get-preferences" "get-current-directory" "dir" "let")}
        {Lisp-Entry "reload-opened-windows" method #f 316 11 316 32 ("session" "application" "get-preferences" "get-opened-windows" "reload-component" "exists?" "not" "or" "when" "others" "file" "bind-keywords" "properties" "class" "bind" "info" "lambda" "for-each")}
        {Lisp-Entry "reload-component" method #f 326 20 326 36 ("nextmethod" "else" "Compare-Files-Frame" "compare-files" "Compare-Directories-Frame" "compare-directories" "Catalogs-Manager" "catalogs-manager" "Browser-Frame" "browser-frame" "Image-Frame" "image-frame" "Java-Text-Palette" "java-palette" "HTML-Text-Frame" "html-text" "Prop-Text-Frame" "prop-text" "Java-Text-Frame" "java-text" "C-Text-Frame" "c-text" "Plain-Text-Frame" "new" "apply" "plain-text" "case" "properties" "class")}
        {Lisp-Entry "Workbench-File" definition #f 350 14 350 28 ("Profile" "File")}
        {Lisp-Entry "load-workbench" method #f 354 11 354 25 ("default-workbench" "read-from-file" "instantiate" "exists?" "if" "Workbench-File" "file" "let")}
        {Lisp-Entry "default-workbench" method #f 361 29 361 46 ("Workbench" "new")}
        {Lisp-Entry "setup-workbench" method #f 365 18 365 33 ("default-workbench" "err" "continue-handler:" "title:" "load-workbench" "set-workbench" "with-execution-context" "lambda" "with-safe-execution")}
        {Lisp-Entry "get-output-log" method #f 382 20 382 34 ("Output-Log" "singleton-docked" "get-guest")}
        {Lisp-Entry "register-base-objects" method #f 391 20 391 41 ("local-debugger" "Jazz-Debugger-Local-Proxy" "new" "debugger" "'debugger" "get-local-register" "register-object" "nextmethod")}
        {Lisp-Entry "get-local-debugger" method #f 401 20 401 38 ("local-debugger")}
        {Lisp-Entry "start-jazz-debugger" method #f 405 11 405 30 ("register-debugger" "start-debugger" "Jazz-Debugger" "new" "set!" "local-debugger" "not" "when")}
        {Lisp-Entry "detach-debugger-processes" method #f 412 11 412 36 ("get-debuggers" "detach-processes" "debugger" "lambda" "for-each")}
        {Lisp-Entry "process-alias" method #f 423 20 423 33 ("nextmethod" "else" "recorder" ":recorder" "current-view-debugger" ":view-debugger" "current-debugger" ":debugger" "case" "name")}
        {Lisp-Entry "on-open-favorite" method #f 436 11 436 27 ("get-file" "edit-document" "error" "not" "if" "find-favorite" "favorite" "char:" "get-property" "char" "let*" "evt")}
        {Lisp-Entry "find-favorite" method #f 444 11 444 24 ("get-shortcut" "eqv?" "favorite" "lambda" "find-if" "get-children" "when" "error?:" "favorites" "'favorites" "get-preferences" "pref" "let" "char")}
        {Lisp-Entry "edit-definitions" method #f 458 20 458 36 ("get-search-manager" "get-guest" "edit-definitions" "else" "car" "edit" "1" "length" "case" "add-history" "bell" "null?" "if" "get-cataloguer" "get-coalesced-definitions" "filter-entries" "definitions" "let" "history-item" "history-item:" "workspace" "workspace:" "catalog-context" "context" "context:" "class" "class:" "object")}
        {Lisp-Entry "edit-references" method #f 468 20 468 35 ("get-search-manager" "get-guest" "edit-references" "else" "car" "edit-reference" "1" "length" "case" "add-history" "bell" "null?" "if" "get-cataloguer" "get-references" "definitions" "let" "history-item" "history-item:" "catalog-context" "context" "context:" "object")}
        {Lisp-Entry "filter-entries" method #f 479 11 479 25 ("class" "entries")}
        {Lisp-Entry "get-documentation" method #f 488 18 488 35 ("get-definition" "get-documentation-cataloguer" "cataloguer" "let" "when" "symbol")}
        {Lisp-Entry "edit-documentation" method #f 495 18 495 36 ("focus-host" "set-visible?" "bring-to-front" "set-selection" "location-range" "range" "0" "list" "get-location" "append" "location" "get-guest" "text" "visible?:" "edit-document" "frame" "get-toplevel" "get-origin" "moniker" "get-form" "form" "let*" "bell" "not" "if" "get-documentation" "doc" "let" "symbol")}
        {Lisp-Entry "edit-documentation" method #f 512 18 512 36 ("get-host" "bring-to-front" "set-entry" "entry:" "get-documentation-catalog" "client:" "new-frame" "not" "if" "list" "info" "get-stage" "find-guest" "editor" "Doc-Editor" "class" "let*" "text-location" "text" "object" "location")}
        {Lisp-Entry "on-open-text" method #f 527 19 527 31 ("get-name" "key:" "string>?" "sort" "char-encoding:" "Jazz-Plain-Text-View" "class:" "edit-document" "file" "lambda" "for-each" "text?:" "multiple-selection?:" "choose-file" "char-encoding" "files" "receive" "evt")}
        {Lisp-Entry "on-open-jazz-text" method #f 534 19 534 36 ("get-name" "key:" "string>?" "sort" "char-encoding:" "Jazz-Text-View" "class:" "edit-document" "file" "lambda" "for-each" "text?:" "multiple-selection?:" "title:" "choose-file" "char-encoding" "files" "receive" "evt")}
        {Lisp-Entry "on-terminal-repl" method #f 541 19 541 35 ("terminal-repl" "evt")}
        {Lisp-Entry "on-toggle-terminal" method #f 545 19 545 37 ("toggle-terminal" "evt")}
        {Lisp-Entry "on-clear-terminal" method #f 549 19 549 36 ("clear-terminal" "evt")}
        {Lisp-Entry "on-test" method #f 553 27 553 34 ("get-profile" "test" "evt")}
        {Lisp-Entry "on-test-shift" method #f 557 27 557 40 ("get-profile" "test-shift" "evt")}
        {Lisp-Entry "on-test-no" method #f 561 11 561 21 ("test9" "9" "test8" "8" "test7" "7" "test6" "6" "test5" "5" "test4" "4" "test3" "3" "test2" "2" "test1" "1" "test0" "0" "no:" "get-property" "case" "get-profile" "profile" "let" "evt")}
        {Lisp-Entry "on-focus-next-process" method #f 576 19 576 40 ("debugged=?" "test:" "find" "focus-process" "null?" "unless" "element" "length" "1" "+" "modulo" "next-rank" "first" "not" "if" "rank" "next-process" "define" "collect-processes" "processes" "get-debugger-manager" "get-focused-process" "focused" "let" "evt")}
        {Lisp-Entry "on-focus-previous-process" method #f 589 19 589 44 ("debugged=?" "test:" "find" "focus-process" "null?" "unless" "element" "length" "1" "-" "modulo" "previous-rank" "last" "not" "if" "rank" "previous-process" "define" "collect-processes" "processes" "get-debugger-manager" "get-focused-process" "focused" "let" "evt")}
        {Lisp-Entry "on-reload-process" method #f 602 19 602 36 ("reload-process" "bell" "not" "if" "get-debugger-manager" "get-focused-process" "debugged" "let" "evt")}
        {Lisp-Entry "on-debug-views" method #f 609 19 609 33 ("current-view-debugger" "debug-views" "evt")}
        {Lisp-Entry "on-explore-views" method #f 613 19 613 35 ("current-view-debugger" "explore-views" "evt")}
        {Lisp-Entry "on-processes" method #f 617 19 617 31 ("focus?:" "debugger" "'debugger" "workspace:" "Processes-View" "select-palette" "evt")}
        {Lisp-Entry "on-threads" method #f 621 19 621 29 ("focus?:" "debugger" "'debugger" "workspace:" "Threads-View" "select-palette" "evt")}
        {Lisp-Entry "on-frames" method #f 625 19 625 28 ("focus?:" "debugger" "'debugger" "workspace:" "Frames-View" "select-palette" "evt")}
        {Lisp-Entry "on-exception" method #f 629 19 629 31 ("focus?:" "debugger" "'debugger" "workspace:" "Exception-View" "select-palette" "evt")}
        {Lisp-Entry "on-variables" method #f 633 19 633 31 ("focus?:" "debugger" "'debugger" "workspace:" "Variables-View" "select-palette" "evt")}
        {Lisp-Entry "on-resources-monitor" method #f 637 11 637 31 ("Resources-Monitor" "show-palette" "evt")}
        {Lisp-Entry "on-logs-viewer" method #f 641 19 641 33 ("Logs-Viewer" "show-palette" "evt")}
        {Lisp-Entry "on-class-browser" method #f 645 11 645 27 ("set-text" "when" "view" "palette" "lambda" "initialize:" "Class-Browser" "show-palette" "get-selected-string" "Text-View" "is?" "if" "text" "get-focus" "focus" "let*" "evt")}
        {Lisp-Entry "on-references-analyser" method #f 653 11 653 33 ("set-text" "when" "view" "palette" "lambda" "initialize:" "References-Analyser" "show-palette" "get-selected-string" "Text-View" "is?" "if" "text" "get-focus" "focus" "let*" "evt")}
        {Lisp-Entry "on-edit-clipboard" method #f 661 19 661 36 ("bell" "edit-definitions" "string?" "if" "get-clipboard-text" "clipboard" "let" "evt")}
        {Lisp-Entry "get-workbench-manager" method #f 668 18 668 39 ("Workbench-Manager" "singleton-docked" "get-guest")}
        {Lisp-Entry "on-select-project" method #f 672 19 672 36 ("get-workbench-manager" "select-current" "evt")}
        {Lisp-Entry "on-edit-project" method #f 676 19 676 34 ("get-workbench-manager" "edit-current" "evt")}
        {Lisp-Entry "on-compile-file" method #f 680 19 680 34 ("get-workbench-manager" "compile-current" "evt")}
        {Lisp-Entry "on-preprocess-file" method #f 684 19 684 37 ("get-workbench-manager" "preprocess-current" "evt")}
        {Lisp-Entry "on-build-project" method #f 688 19 688 35 ("get-workbench-manager" "build-current" "evt")}
        {Lisp-Entry "on-clean-project" method #f 692 19 692 35 ("get-workbench-manager" "clean-current" "evt")}
        {Lisp-Entry "on-view-project-log" method #f 696 19 696 38 ("get-workbench-manager" "view-log" "evt")}
        {Lisp-Entry "on-test-project" method #f 700 19 700 34 ("get-workbench-manager" "test-current" "evt")}
        {Lisp-Entry "on-run-project" method #f 704 19 704 33 ("get-workbench-manager" "run-current" "evt")}
        {Lisp-Entry "on-debug-project" method #f 708 19 708 35 ("get-workbench-manager" "debug-current" "evt")}
        {Lisp-Entry "on-debug-project-with" method #f 712 19 712 40 (":choose" "executable:" "get-workbench-manager" "debug-current" "evt")}
        {Lisp-Entry "on-distribute-project" method #f 716 19 716 40 ("get-workbench-manager" "distribute-current" "evt")}
        {Lisp-Entry "on-properties" method #f 725 19 725 32 ("focus?:" "Properties-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-search-results" method #f 729 19 729 36 ("focus?:" "Search-Results" "select-palette" "evt")}
        {Lisp-Entry "on-profile-results" method #f 733 19 733 37 ("focus?:" "Profile-Results" "select-palette" "evt")}
        {Lisp-Entry "on-web-servers" method #f 737 19 737 33 ("focus?:" "Web-Servers-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-output-log" method #f 741 19 741 32 ("focus?:" "Output-Log" "select-palette" "evt")}
        {Lisp-Entry "on-user-log" method #f 745 19 745 30 ("refresh" "focus?:" "User-Log" "select-palette" "user-log" "let" "evt")}
        {Lisp-Entry "on-activities" method #f 750 19 750 32 ("focus?:" "Activities-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-workbench" method #f 754 19 754 31 ("focus?:" "Workbench-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-repositories" method #f 758 19 758 34 ("focus?:" "Repositories-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-chapters" method #f 762 19 762 30 ("focus?:" "text" "'text" "workspace:" "Chapters-Browser" "select-palette" "evt")}
        {Lisp-Entry "on-hierarchy" method #f 766 19 766 31 ("focus?:" "text" "'text" "workspace:" "Hierarchy-Browser" "select-palette" "evt")}
        {Lisp-Entry "on-bindings-manager" method #f 770 19 770 38 ("new-frame" "focus-host" "set-visible?" "bring-to-front" "begin" "if" "Bindings-Manager" "get-stage" "find-host" "frame" "let" "evt")}
        {Lisp-Entry "on-view-bindings" method #f 780 19 780 35 ("Shortcut-Viewer" "get-modal" "evt")}
        {Lisp-Entry "on-preferences" method #f 784 19 784 33 ("Preferences-Manager" "new-frame" "evt")}
        {Lisp-Entry "on-toggle-catalog-context" method #f 788 19 788 44 ("'jazz" "c" "'c" "set-catalog-context" "jazz" "catalog-context" "case" "evt")}
        {Lisp-Entry "on-save-profile" method #f 795 19 795 34 ("call-exit-listeners" "call-save-environment-listeners" "user-message" "lambda" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-exit-without-save" method #f 804 19 804 39 ("exit" "yes" "'yes" "question" "'question" "type:" "message-box" "eq?" "when" "evt")}
        {Lisp-Entry "on-compare-directories" method #f 809 19 809 41 ("focus-host" "set-visible?" "bring-to-front" "compare-trees" "get-guest" "configure" "lambda" ":wait" "with-cursor" "host-visible?:" "frame" "Compare-Directories" "new-frame" "not" "compare-directories" "tools" "get-preferences" "get-active-configuration" "default" "let" "get-shift?" "if" "evt")}
        {Lisp-Entry "on-compare-files" method #f 825 19 825 35 ("Compare-Files" "new-frame" "evt")}
        {Lisp-Entry "on-compare-databases" method #f 829 19 829 39 ("Compare-Databases" "new-frame" "evt")}
        {Lisp-Entry "on-update-catalogs" method #f 839 11 839 29 ("listify" "get-catalog" "name" "cataloguer" "get-catalogs" "update" "catalog" "for-each" "eq?" "lambda" ":wait" "with-cursor" "message-box" "not" "if" "catalogs" "'catalogs" "get-preferences" "get-main" "main" "let" "evt")}
        {Lisp-Entry "on-catalogs-manager" method #f 854 11 854 30 ("new-frame" "focus-host" "set-visible?" "bring-to-front" "begin" "if" "Catalogs-Manager" "get-stage" "find-host" "frame" "let" "evt")}}}})
"IDE-Actions"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "IDE-Actions.jazz"} 1257476446
    {Lisp-Entry "jazz.ide.IDE-Actions" module #f 37 18 37 38 ("jazz")
      {Lisp-Entry "IDE-Actions" class #f 46 7 46 18 ("on-user-code" "user-code" "F12" "on-edit-clipboard" "edit-clipboard" "open-favorite-0" "open-favorite-9" "open-favorite-8" "open-favorite-7" "open-favorite-6" "open-favorite-5" "open-favorite-4" "open-favorite-3" "open-favorite-2" "open-favorite-1" "open-favorite-Z" "open-favorite-Y" "open-favorite-X" "open-favorite-W" "open-favorite-V" "open-favorite-U" "open-favorite-T" "open-favorite-S" "open-favorite-R" "open-favorite-Q" "open-favorite-P" "open-favorite-O" "open-favorite-N" "open-favorite-M" "open-favorite-L" "open-favorite-K" "open-favorite-J" "open-favorite-I" "open-favorite-H" "open-favorite-G" "open-favorite-F" "open-favorite-E" "open-favorite-D" "open-favorite-C" "open-favorite-B" ":alt" ":shift" ":control" "char:" "on-open-favorite" ":application" "open-favorite-A" "F2" "Shortcut" "shortcut:" "on-paste" ":focus" "Event-Handler" "action-handler:" "paste" "name:" "Actions")}}})
"IDE-Bindings"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "IDE-Bindings.jazz"} 1257476446
    {Lisp-Entry "jazz.ide.IDE-Bindings" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "IDE-Bindings" class #f 44 7 44 19 ("ide" "name:" "Application-Bindings")}}})
"IDE-File-Menu"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "IDE-File-Menu.jazz"} 1257476446
    {Lisp-Entry "jazz.ide.IDE-File-Menu" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "IDE-File-Menu" class #f 45 7 45 20 ("exit-without-save" "on-exit-without-save" "save-profile" "on-quit-application" "on-save-profile" "open-jazz-text" "on-open-jazz-text" "open-text" "jedi" "Action" "action:" "on-close" "before:" "title:" "on-open-text" "name:" "File-Menu")}}})
"IDE-Preferences"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "IDE-Preferences.jazz"} 1257476447
    {Lisp-Entry "jazz.ide.IDE-Preferences" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "IDE-Preferences" class #f 45 7 45 22 ("title:" "Application-Preferences")}}})
"IDE-Profile"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "IDE-Profile.jazz"} 1257476447
    {Lisp-Entry "jazz.ide.IDE-Profile" module #f 37 18 37 38 ("jazz")
      {Lisp-Entry "IDE-Profile" class #f 45 7 45 18 ("Profile")
        {Lisp-Entry "format-sql" method #f 54 11 54 21 ("error" "else" "format" "string?" "cond" "value")}
        {Lisp-Entry "output-tables" method #f 60 11 60 24 ("sql" "'sql" "select-workspace" "get-application" "appl" "when" "output-tables" "get-sql-console-text" "text" "let" "select?" "select?:" "name" "name:" "tables")}
        {Lisp-Entry "output-table" method #f 69 11 69 23 ("list" "output-tables" "select?" "select?:" "name" "name:" "table")}
        {Lisp-Entry "log-tables" method #f 74 11 74 21 ("log-table" "for-each" "tables")}
        {Lisp-Entry "log-table" method #f 79 11 79 20 ("data:" "get-name" "name:" "log-entry" "table")}
        {Lisp-Entry "glue" method #f 89 11 89 15 ("user-message" "set-clipboard-text" "join" "2" "format" "case" "glued" "-" "0" "subseq" "get-clipboard-text" "cons" "lst" "get-clipboard-stack" "stack" "get-application" "appl" "let*" "1" "kind" "n")}
        {Lisp-Entry "get-source" method #f 106 11 106 21 ("find-file" "find-document" "either" "class-name")}
        {Lisp-Entry "find-document" method #f 112 11 112 24 ("get-stage" "get-children" "continuation-return" "ci=?" "=" "and" "get-extension" "ext" "get-base" "base" "get-controller" "get-moniker" "moniker" "Document" "get-guest" "guest" "Frame-Host" "is?" "when" "frame" "for-each" "return" "lambda" "continuation-capture" "->string" "target" "let" "get-manifest-source" "unless" "class-name")}
        {Lisp-Entry "find-file" method #f 133 11 133 20 ("source-directories" "continuation-return" "exists?" "when" "new-file" "file" "dir" "for-each" "return" "lambda" "continuation-capture" "tie" "name" "let" "class-name")}
        {Lisp-Entry "source-directories" method #f 146 29 146 47 ()}}}})
"IDE-Status"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "IDE-Status.jazz"} 1257476448
    {Lisp-Entry "jazz.ide.IDE-Status" module #f 37 18 37 37 ("jazz")
      {Lisp-Entry "IDE-Status" class #f 50 7 50 17 ("Status-Toolbar")
        {Lisp-Entry "on-context-menu" method #f 58 29 58 44 ("Mode-Menu" "new" "track-popup-menu" "mode" "case" "get-position" "acquire" "pos" "get-name" "name" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-mouse-down" method #f 66 29 66 42 ("Mode-Menu" "new" "track-popup-menu" "mode" "case" "get-position" "acquire" "pos" "get-name" "name" "get-sender" "sender" "let*" "evt")}}
      {Lisp-Entry "Activities-Menu" class #f 79 7 79 22 ("on-clear-done" "Bitmap-Resource" "icon:" "clear-done" "on-close" "close" "on-open" ":form" "Event-Handler" "action-handler:" "open" "name:" "title:" "Context-Menu")
        {Lisp-Entry "on-open" method #f 90 11 90 18 ("get-activity-manager" "show" "evt")}
        {Lisp-Entry "on-close" method #f 94 11 94 19 ("get-activity-manager" "hide" "evt")}
        {Lisp-Entry "on-clear-done" method #f 98 11 98 24 ("get-activity-manager" "clear-done" "evt")}}
      {Lisp-Entry "Locales-Menu" class #f 107 7 107 19 ("Context-Menu")
        {Lisp-Entry "install" method #f 110 20 110 27 ("insert-locales" "nextmethod" "rest")}
        {Lisp-Entry "insert-locales" method #f 115 11 115 25 ("eq?" "insert-locale" "locale" "lambda" "for-each" "get-locales" "locales" "get-locale" "current" "let")}
        {Lisp-Entry "insert-locale" method #f 123 11 123 24 ("set-checked?" "when" "locale:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Check-Item" "new" "item" "present-locale" "title" "let*" "checked?" "locale")}
        {Lisp-Entry "on-action" method #f 130 11 130 20 ("locale:" "get-property" "set-locale" "evt")}}
      {Lisp-Entry "Look-Menu" class #f 139 7 139 16 ("Context-Menu")
        {Lisp-Entry "install" method #f 142 20 142 27 ("insert-looks" "nextmethod" "rest")}
        {Lisp-Entry "insert-looks" method #f 147 11 147 23 ("eq?" "insert-look" "look" "lambda" "for-each" "get-looks" "looks" "get-look" "current" "let")}
        {Lisp-Entry "insert-look" method #f 155 11 155 22 ("set-checked?" "when" "look:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Check-Item" "new" "item" "present" "title" "let*" "checked?" "look")}
        {Lisp-Entry "on-action" method #f 162 11 162 20 ("get-toplevel" "redraw-window" "look:" "get-property" "set-look" "evt")}}
      {Lisp-Entry "Mode-Menu" class #f 172 7 172 16 ("Context-Menu")
        {Lisp-Entry "install" method #f 175 20 175 27 ("c" "'c" "Bitmap-Resource" "jazz" "'jazz" "insert-item" "nextmethod" "rest")}
        {Lisp-Entry "insert-item" method #f 181 11 181 22 ("set-checked?" "eq?" "when" "mode:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "self" "parent:" "Check-Item" "new" "item" "get-application" "get-catalog-context" "current" "let" "icon" "title" "mode")}
        {Lisp-Entry "on-action" method #f 188 11 188 20 ("mode:" "get-property" "get-application" "set-catalog-context" "evt")}}}})
"IDE-Text-View"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "IDE-Text-View.jazz"} 1257476448
    {Lisp-Entry "jazz.ide.IDE-Text-View" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "IDE-Text-View" class #f 50 7 50 20 ("Label-User" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "set-context" "get-context" "initialize" "Code-Text-View")
        {Lisp-Entry "context" property #f 53 12 53 19 ()}
        {Lisp-Entry "new-syntax" method #f 61 20 61 30 ("Jazz-Syntax" "new")}
        {Lisp-Entry "get-context" method #f 70 20 70 31 ("syntax" "get-catalog-context" "list" "context" "not" "if")}
        {Lisp-Entry "set-context" method #f 76 18 76 29 ("context" "set!" "value")}
        {Lisp-Entry "catalog-context" method #f 85 11 85 26 ("syntax" "get-catalog-context" "context" "either")}
        {Lisp-Entry "jazz-preferences" method #f 94 11 94 27 ("jazz-text" "documents" "get-preferences")}
        {Lisp-Entry "c-preferences" method #f 98 11 98 24 ("java-text" "documents" "get-preferences")}
        {Lisp-Entry "sql-preferences" method #f 102 11 102 26 ("sql-text" "documents" "get-preferences")}
        {Lisp-Entry "current-history-item" method #f 111 20 111 40 ()}
        {Lisp-Entry "explorer-class" method #f 120 20 120 34 ("nextmethod" "else" "SQL-Explorer" "sql" "C-Explorer" "c" "Jazz-Explorer" "jazz" "catalog-context" "case")}
        {Lisp-Entry "expr-at" method #f 133 20 133 27 ("sql-expr-range" "sql-name-at" "sql" "c-expr-range" "c-name-at" "c" "jazz-expr-range" "jazz-name-at" "jazz" "catalog-context" "case" "pos")}
        {Lisp-Entry "expr-range" method #f 140 20 140 30 ("sql-expr-range" "sql" "c-expr-range" "c" "jazz-expr-range" "jazz" "catalog-context" "case" "pos")}
        {Lisp-Entry "current-expr" method #f 147 20 147 32 ("current-sql-expr" "sql" "current-c-expr" "c" "current-jazz-expr" "jazz" "catalog-context" "case")}
        {Lisp-Entry "range-expr" method #f 154 20 154 30 ("sql-range-expr" "sql" "c-range-expr" "c" "jazz-range-expr" "jazz" "catalog-context" "case" "range")}
        {Lisp-Entry "current-jazz-expr" method #f 166 11 166 28 ("jazz-range-expr" "when" "current-jazz-expr-range" "range" "let")}
        {Lisp-Entry "current-jazz-symbol" method #f 172 21 172 40 ("symbol?" "when" "current-jazz-expr" "expr" "let")}
        {Lisp-Entry "current-jazz-expr-range" method #f 178 11 178 34 ("get-end" "jazz-expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "jazz-range-expr" method #f 184 11 184 26 ("get-string" "read-string-element" "lambda" "with-jazz-readtable" "range")}
        {Lisp-Entry "jazz-expr-range" method #f 190 11 190 26 ("get-range" "outer-expr" "when" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "jazz-name-at" method #f 196 11 196 23 ("get-string" "read-string-element" "lambda" "with-jazz-readtable" "when" "range")}
        {Lisp-Entry "current-c-expr" method #f 208 11 208 25 ("current-c-name")}
        {Lisp-Entry "current-c-name" method #f 212 11 212 25 ("c-current-expr-range" "c-name-at")}
        {Lisp-Entry "c-current-expr-range" method #f 216 11 216 31 ("get-end" "c-expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "c-range-expr" method #f 222 11 222 23 ("get-string" "range")}
        {Lisp-Entry "c-expr-range" method #f 226 11 226 23 ("get-range" "outer-expr" "end:" "start:" "self" "C-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "c-name-at" method #f 232 11 232 20 ("read-string-element" "0" "element" "=" "if" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "current-sql-expr" method #f 245 11 245 27 ("current-sql-name")}
        {Lisp-Entry "current-sql-name" method #f 249 11 249 27 ("sql-current-expr-range" "sql-name-at")}
        {Lisp-Entry "sql-current-expr-range" method #f 253 11 253 33 ("get-end" "sql-expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "sql-range-expr" method #f 259 11 259 25 ("get-string" "range")}
        {Lisp-Entry "sql-expr-range" method #f 263 11 263 25 ("get-range" "outer-expr" "end:" "start:" "self" "SQL-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "sql-name-at" method #f 269 11 269 22 ("read-string-element" "0" "element" "=" "if" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "favorite-completions" method #f 282 20 282 40 ("nextmethod" "else" "sql-preferences" "sql" "c-preferences" "c" "jazz-preferences" "get-completions" "jazz" "catalog-context" "case")}
        {Lisp-Entry "colorize-syntax" method #f 295 20 295 35 ("rest")}
        {Lisp-Entry "recolorize-text" method #f 299 20 299 35 ("end-row" "start")}
        {Lisp-Entry "flash-character?" method #f 308 20 308 36 ("nextmethod" "else" "memq?" "jazz" "catalog-context" "case" "char")}
        {Lisp-Entry "context-menu" method #f 319 20 319 32 ("nextmethod" "else" "edit-references" "edit-definitions" "cond" "context-menu-click" "or" "references?" "not" "definition?" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "editable?" "enabled?" "and" "when" "pos")}
        {Lisp-Entry "get-context-menu" method #f 331 20 331 36 ("new-text-context-menu")}}}})
"IDE-Toolbar"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "IDE-Toolbar.jazz"} 1257476449
    {Lisp-Entry "jazz.ide.IDE-Toolbar" module #f 37 18 37 38 ("jazz")
      {Lisp-Entry "IDE-Toolbar" class #f 50 7 50 18 ("Toolbar")
        {Lisp-Entry "on-clipboard-menu" method #f 58 11 58 28 ("clipboards:" "Clipboards-Menu" "track-popup-menu" "not-null?" "when" "cons" "if" "clipboards" "get-application" "get-clipboard-stack" "stack" "get-clipboard-text" "text" "get-size" "get-height" "0" "Point" "new" "get-position" "nu+" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-backward-menu" method #f 68 11 68 27 ("backward" "'backward" "get-application" "get-history-manager" "track-history" "get-combo" "initiator" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-forward-menu" method #f 74 11 74 26 ("forward" "'forward" "get-application" "get-history-manager" "track-history" "get-combo" "initiator" "get-sender" "sender" "let*" "evt")}}
      {Lisp-Entry "Clipboards-Menu" class #f 85 7 85 22 ("Context-Menu")
        {Lisp-Entry "clipboards" property #f 88 12 88 22 ()}
        {Lisp-Entry "get-clipboards" accessor #f 88 33 88 41 ()}
        {Lisp-Entry "set-clipboards" accessor #f 88 33 88 41 ()}
        {Lisp-Entry "finish" method #f 91 20 91 26 ("for-each" "self" "parent:" "Separator-Item" "new" "not-null?" "when" "insert-item" "clipboards" "others" "clipboard" "bind" "nextmethod" "rest")}
        {Lisp-Entry "insert-item" method #f 100 11 100 22 ("string:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "item")}
        {Lisp-Entry "on-action" method #f 104 11 104 20 ("paste-clipboard-string" "string:" "get-property" "string" "bell" "Text-View" "is-not?" "if" "get-focus" "focus" "let" "evt")}}}})
"IDE-Toplevel"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "IDE-Toplevel.jazz"} 1257476449
    {Lisp-Entry "jazz.ide.IDE-Toplevel" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "IDE-Toplevel" class #f 44 7 44 19 ("Toplevel")}}})
"Icon-File"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "resource" "Icon-File.jazz"} 1257476450
    {Lisp-Entry "jedi.builder.resource.Icon-File" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Icon-File" class #f 44 7 44 16 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Icon-Resource")}
        {Lisp-Entry "resource-marker" method #f 51 20 51 35 ()}}}})
"Image-Workspace"
 ({Lisp-File-Entry {File jedi "src" "jedi" "workspace" "Image-Workspace.jazz"} 1257476451
    {Lisp-Entry "jedi.workspace.Image-Workspace" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Image-Workspace" class #f 46 7 46 22 ("maximized?:" "Output-Log" "Search-Results" "Properties-Manager" "Lisp-Console-Manager" "second" "Image-Browser" "model-name:" "selection" "-31" "vert" "5" "Rect" "insets:" "20" "division:" "relative" "mode:" "horz" "orientation:" "first" "location:" "top" "status" "toolbar" "menubar" "name:" "Image-View" "frame-model:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" method #f 67 20 67 32 ("image" "'image")}}}})
"Import-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Import-Entry.jazz"} 1257476452
    {Lisp-Entry "jazz.catalog.entry.Import-Entry" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Import-Entry" class #f 44 20 44 32 ("Hierarchical-Entry")
        {Lisp-Entry "present-name" method #f 47 20 47 32 ("qualified" "join")}
        {Lisp-Entry "get-image" method #f 51 20 51 29 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" method #f 60 20 60 34 ("references" "update-index" "key" "lambda" "for-each" "references-index" "definitions-index")}}}})
"Indexed-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Indexed-Entry.jazz"} 1257476453
    {Lisp-Entry "jazz.catalog.entry.Indexed-Entry" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Indexed-Entry" class #f 46 20 46 33 ("Catalog-Entry")
        {Lisp-Entry "name" slot #f 49 8 49 12 ()}
        {Lisp-Entry "line" slot #f 50 8 50 12 ()}
        {Lisp-Entry "column" slot #f 51 8 51 14 ()}
        {Lisp-Entry "end-line" slot #f 52 8 52 16 ()}
        {Lisp-Entry "end-column" slot #f 53 8 53 18 ()}
        {Lisp-Entry "definitions" slot #f 54 8 54 19 ()}
        {Lisp-Entry "references" slot #f 55 8 55 18 ()}
        {Lisp-Entry "get-references" accessor #f 55 26 55 34 ()}
        {Lisp-Entry "initialize" method #f 58 20 58 30 ("self" "set-parent" "definition" "lambda" "for-each" "references~self" "definitions~self" "end-column~self" "end-line~self" "column~self" "line~self" "name~self" "set!" "nextmethod" "references" "definitions" "end-column" "end-line" "column" "line" "name")}
        {Lisp-Entry "print" method #f 72 20 72 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print-catalog" method #f 78 26 78 39 ("print-definitions" "column" "line" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "print-definitions" method #f 87 11 87 28 ("definitions" "1" "+" "print-catalog" "definition" "lambda" "for-each" "printer" "level")}
        {Lisp-Entry "get-file" method #f 98 20 98 28 ("file-definition" "get-file")}
        {Lisp-Entry "get-moniker" method #f 102 20 102 31 ("file-definition" "root-definition" "either" "get-moniker")}
        {Lisp-Entry "get-title" method #f 106 20 106 29 ("name")}
        {Lisp-Entry "get-category-name" method #f 110 20 110 37 ("file-definition" "root-definition" "either" "get-category-name")}
        {Lisp-Entry "get-name" method #f 114 20 114 28 ("name")}
        {Lisp-Entry "get-line" method #f 118 20 118 28 ("line")}
        {Lisp-Entry "get-column" method #f 122 20 122 30 ("column")}
        {Lisp-Entry "get-end-line" method #f 126 20 126 32 ("end-line")}
        {Lisp-Entry "get-end-column" method #f 130 20 130 34 ("end-column")}
        {Lisp-Entry "get-definitions" method #f 134 20 134 35 ("definitions")}
        {Lisp-Entry "add-definition" method #f 138 18 138 32 ("list" "append!" "definitions" "set!" "definition")}
        {Lisp-Entry "add-reference" method #f 142 18 142 31 ("cons" "set!" "references" "member?" "unless" "reference")}
        {Lisp-Entry "get-catalog" method #f 147 18 147 29 ("file-definition" "get-catalog")}
        {Lisp-Entry "set-root-definition" method #f 151 20 151 39 ("definitions" "set-root-definition" "definition" "lambda" "for-each" "nextmethod" "def")}
        {Lisp-Entry "set-file-definition" method #f 158 20 158 39 ("definitions" "set-file-definition" "definition" "lambda" "for-each" "nextmethod" "def")}
        {Lisp-Entry "update-indexes" method #f 170 20 170 34 ("definitions" "update-indexes" "definition" "lambda" "for-each" "name" "update-index" "references-index" "definitions-index")}
        {Lisp-Entry "update-index" method #f 177 21 177 33 ("self" "table-add" "when" "key" "index")}
        {Lisp-Entry "present" method #f 187 20 187 27 ("format" "references" "get-category-name" "definitions" "mode" "case" "present-name")}
        {Lisp-Entry "present-name" method #f 195 20 195 32 ("present-noname" "get-name" "either")}
        {Lisp-Entry "present-noname" method #f 199 29 199 43 ()}
        {Lisp-Entry "file-name" method #f 208 11 208 20 ("get-name" "file")}
        {Lisp-Entry "entry-range" method #f 212 11 212 22 ("end-column" "end-line" "column" "line" "Cell" "Range$Cell$" "new")}
        {Lisp-Entry "edit" method #f 216 20 216 24 ("selection:" "char-encoding:" "edit-document" "entry-range" "selection" "get-catalog" "get-char-encoding" "char-encoding" "get-application" "appl" "error" "exists?" "not" "if" "get-moniker" "moniker" "let" "activate-focus?" "activate-focus?:" "workspace" "workspace:")}
        {Lisp-Entry "find-source" method #f 226 11 226 22 ("get-stage" "get-children" "file-name" "string=?" "get-moniker" "file" "get-guest" "guest" "Frame-Host" "is?" "and" "frame" "lambda" "find-if" "source-frame-type" "type" "let" "name")}
        {Lisp-Entry "source-frame-type" method #f 238 29 238 46 ()}}}})
"Instance-Init-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Instance-Init-Entry.jazz"} 1257476454
    {Lisp-Entry "jazz.catalog.entry.Instance-Init-Entry" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Instance-Init-Entry" class #f 44 20 44 39 ("Hierarchical-Entry")
        {Lisp-Entry "present-name" method #f 47 20 47 32 ()}
        {Lisp-Entry "print-catalog" method #f 51 20 51 33 ("references" "end-column" "end-line" "column" "line" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" method #f 58 20 58 29 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" method #f 67 20 67 34 ("references" "update-index" "key" "lambda" "for-each" "references-index" "definitions-index")}}}})
"Interface-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Interface-Doc.jazz"} 1257476458
    {Lisp-Entry "jazz.doc.doc.Interface-Doc" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Interface-Doc" class #f 44 7 44 20 ("initialize" "Category-Doc")
        {Lisp-Entry "ascendants" property #f 47 12 47 22 ()}
        {Lisp-Entry "get-ascendants" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "set-ascendants" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "construct-literal" method #f 51 16 51 33 ("definitions:" "doc:" "extends:" "name:" "self" "new" "definitions" "doc" "extends" "name" "context")}
        {Lisp-Entry "get-class-image" method #f 60 25 60 40 ("Bitmap-Resource")}}}})
"Interface-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Interface-Entry.jazz"} 1257476459
    {Lisp-Entry "jazz.catalog.entry.Interface-Entry" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Interface-Entry" class #f 44 20 44 35 ("Category-Entry")
        {Lisp-Entry "print-catalog" method #f 47 20 47 33 ("definitions" "1" "+" "print-catalog" "definition" "lambda" "for-each" "end-column" "end-line" "column" "line" "extends" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" method #f 58 20 58 29 ("Bitmap-Resource")}
        {Lisp-Entry "insert-ascendants" method #f 67 20 67 37 ("extends" "insert-interfaces-list" "father" "tree")}}}})
"Jedi"
 ({Lisp-File-Entry {File jedi "src" "jedi" "application" "Jedi.jazz"} 1257476480
    {Lisp-Entry "jedi.application.Jedi" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Jedi" class #f 60 7 60 11 ("initialize" "IDE")
        {Lisp-Entry "documentation-cataloguer" slot #f 63 8 63 32 ()}
        {Lisp-Entry "external-name" method #f 66 25 66 38 ("jedi" "'jedi" "rest")}
        {Lisp-Entry "process-name" method #f 70 20 70 32 ()}
        {Lisp-Entry "process-owner" method #f 74 20 74 33 ()}
        {Lisp-Entry "process-copyright" method #f 78 20 78 37 ()}
        {Lisp-Entry "process-icon" method #f 82 20 82 32 ()}
        {Lisp-Entry "process-version" method #f 86 20 86 35 ("beta" "'beta" "Version" "new" "kernel-version" "split-version" "revision" "minor" "major" "receive")}
        {Lisp-Entry "process-email" method #f 91 20 91 33 ()}
        {Lisp-Entry "new-toplevel" method #f 95 20 95 32 ("Jedi-Toplevel" "new")}
        {Lisp-Entry "initialize-settings" method #f 99 20 99 39 ("register-settings" "file:" "Settings" "new" "settings" "set!" "create" "exists?" "unless" "Home" "File" "file" "let")}
        {Lisp-Entry "start-process" method #f 107 20 107 33 ("jazz" "'jazz" "set-catalog-context" "nextmethod")}
        {Lisp-Entry "finalize-process" method #f 112 20 112 36 ("on-workspace" "'on-workspace" "method-name:" "self" "target:" "Event-Handler" "workspace" "'workspace" "add-application-listener" "JDBC-Provider" "SQLServer-Provider" "Access-Provider" "new" "register-provider" "nextmethod")}
        {Lisp-Entry "finish-process" method #f 123 20 123 34 ("setup-sql" "setup-workspaces" "nextmethod")}
        {Lisp-Entry "setup-workspaces" method #f 129 11 129 27 ("layout" "layout-menu" "get-children" "0" "1" "Separator" "tooltip-text:" "tooltip?:" ":icons" "portfolio:" "image-name:" "tail-separator" "'tail-separator" "tail" "'tail" "location:" "22" "Dimension" "size:" "Workspace-Button" "Action" "action:" "selected?:" "group:" "next-separator" "'next-separator" "before:" "icon:" "title:" "Radio-Item" "get-shortcut" "shortcut:" "action-handler:" "name:" "parent:" "Action-Item" "eq?" "selected?" "workspace:" "list" "properties:" "on-select-workspace" "'on-select-workspace" "method-name:" ":application" "target-name:" "Event-Handler" "new" "event-handler" "format" "string->symbol" "action-name" "get-icon" "icon?" "get-title" "title" "get-name" "name" "lambda" "for-each" "get-active" "active" "find-toolbar" "toolbar" "workspace" "'workspace" "child" "get-content" "menu" "jedi" "'jedi" "find-actions" "actions" "find-menubar" "menubar" "get-workspaces-preferences" "preferences" "let")}
        {Lisp-Entry "setup-sql" method #f 152 11 152 20 ("console-button?:" "SQL-Console-View" "view-class:" "get-sql-console" "register-console")}
        {Lisp-Entry "setup-catalog" method #f 161 11 161 24 ("report?:" "activate" "add-catalog" "Filing-Catalog" "new" "catalog" "format" "Profile" "Directory" "new-file" "output" "get-cataloguer" "cataloguer" "let" "heuristics" "heuristics:" "char-encoding" "char-encoding:" "extensions" "directory" "name")}
        {Lisp-Entry "persist-preferences?" method #f 174 20 174 40 ()}
        {Lisp-Entry "default-preferences" method #f 178 20 178 39 ("Default-Jedi-Preferences" "new")}
        {Lisp-Entry "default-bindings" method #f 182 20 182 36 ("Jedi-Bindings" "new")}
        {Lisp-Entry "default-listener-service" method #f 192 11 192 35 ("44333")}
        {Lisp-Entry "get-search-manager" method #f 201 20 201 38 ("search" "'search" "169" "857" "Dimension" "host-size:" "220" "150" "Point" "host-position:" "host-visible?:" "host-title:" "Jedi-Search" "new-palette" "lambda" "singleton-palette")}
        {Lisp-Entry "mandatory-version" method #f 217 20 217 37 ("nextmethod" "else" "4" "access-database" "6" "3" "dao" "0" "8" "Version" "sqlserver" "case" "what")}
        {Lisp-Entry "default-frame-class" method #f 230 20 230 39 ("Jazz-Text-View")}
        {Lisp-Entry "known-extension-frame-class" method #f 234 20 234 47 ("nextmethod" "else" "Jazz-Text-View" "Jazz-Extensions" "jazz.editor.commonlisp.CommonLisp-Text-View" "CommonLisp-Extensions" "jazz.editor.scheme.Scheme-Text-View" "Scheme-Extensions" "jazz.editor.java.Java-Text-View" "jazz.editor.diff.Diff-Text-View" "Jazz-Plain-Text-View" "ci=?" "test:" "member?" "cond" "ext")}
        {Lisp-Entry "edit-file" method #f 250 11 250 20 ("nextmethod" "else" "browse-java-jarfile" "browse-java-classfile" "edit-snapshot" "edit-stack" "ci=?" "cond" "get-extension" "ext" "let" "file")}
        {Lisp-Entry "edit-category" method #f 259 20 259 33 ("edit" "1" "list" "Jazz-Code-Location" "new" "location" "let" "name")}
        {Lisp-Entry "get-text-class" method #f 269 20 269 34 ("Jazz-Text-View")}
        {Lisp-Entry "edit-stack" method #f 279 11 279 21 ("debugger" "'debugger" "select-workspace" "get-processes-view" "open-snapshot" "file")}
        {Lisp-Entry "edit-snapshot" method #f 290 11 290 24 ("debugger" "'debugger" "select-workspace" "get-processes-view" "open-snapshot" "file")}
        {Lisp-Entry "browse-java-classfile" method #f 301 11 301 32 ("browse-classfile" "get-guest" "manager" "Java-Manager" "new-frame" "host" "let*" "file")}
        {Lisp-Entry "browse-java-jarfile" method #f 308 11 308 30 ("browse-jarfile" "get-guest" "manager" "Java-Manager" "new-frame" "host" "let*" "file")}
        {Lisp-Entry "get-depot-classes" method #f 320 11 320 28 ("VSS-Depot" "list")}
        {Lisp-Entry "persist-usernames?" method #f 330 20 330 38 ()}
        {Lisp-Entry "persist-passwords?" method #f 334 20 334 38 ()}
        {Lisp-Entry "get-context-text" method #f 343 20 343 36 ()}
        {Lisp-Entry "reload-opened-windows" method #f 354 11 354 32 ()}
        {Lisp-Entry "reload-component" method #f 359 11 359 27 ("nextmethod" "else" "Jazz-Text-View" "jazz-text" "Jedi-Search" "new-frame" "" "apply" "search" "case" "properties" "class")}
        {Lisp-Entry "run-project" method #f 371 18 371 29 ("project-run" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:" "project")}
        {Lisp-Entry "debug-project" method #f 385 18 385 31 ("project-debug" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:" "debugger-interactive?" "debugger-interactive?:" "executable" "executable:" "project")}
        {Lisp-Entry "initial-console-context" method #f 401 20 401 43 ("get-context" ":process" "not" "if" "error?:" "console" "tools" "get-preferences" "pref" "let")}
        {Lisp-Entry "get-documentation-cataloguer" method #f 413 20 413 48 ("new-documentation-cataloguer" "set!" "get-preferences" "get-documented?" "when" "documentation-cataloguer" "unless")}
        {Lisp-Entry "new-documentation-cataloguer" method #f 420 11 420 39 ("add-catalog" "Doc-Catalog" "catalog" "get-name" "name" "instantiate" "doc" "let*" "exception?" "unless" "safe-read-from-file" "form" "when" "get-documentation" "file" "project" "lambda" "for-each-project" "get-workbench" "workbench" "Cataloguer" "new" "cataloguer" "let")}
        {Lisp-Entry "reload-documentation" method #f 436 18 436 38 ("get-documentation-cataloguer" "documentation-cataloguer" "set!")}
        {Lisp-Entry "class-actions" method #f 446 20 446 33 ("debugger" "'debugger" "nextmethod" "jedi" "'jedi" "find-actions" "cons")}
        {Lisp-Entry "update-focus-actions" method #f 455 20 455 40 ("capitalize" "downcase" "upcase" "fill-to-column" "mark-column" "find-all-imports" "or" "find-imports" "remove-highlights" "highlight-selection" "tabulate" "lisp-text" "transpose-expr" "select-outer" "goto-line" "search-current" "search-backward-mode" "search-forward-mode" "text" "recolorize-syntax" "edit-references" "edit-definitions" "evaluate-buffer" "not" "evaluate" "code-text" "Action" "set-action-enabled?" "preferences-root" "when" "Console-Text-View" "console?" "Jazz-Text-View" "jazz?" "Lisp-Text-View" "lisp?" "Code-Text-View" "code?" "Text-View" "is?" "and" "text?" "get-focus" "focus" "let" "nextmethod")}
        {Lisp-Entry "update-project-actions" method #f 492 18 492 40 ("debug-project-with" "debug-project" "run-project" "test-project" "view-project-log" "build-project" "compile-file" "edit-project" "jedi" "Action" "set-action-enabled?" "parse" "find-pathname-unit" "unit-name" "find-source" "get-workbench" "workbench" "get-controller" "get-moniker" "moniker" "Document" "is?" "and" "when" "current-document" "guest" "project-file" "get-active-project" "project" "let")}
        {Lisp-Entry "update-windowing-actions" method #f 523 20 523 44 ("update-project-actions" "update-search-actions" "exiting-process?" "unless" "nextmethod")}
        {Lisp-Entry "navigable-results" method #f 535 20 535 37 ("Violations-Manager" "Output-Log" "Search-Results" "singleton-docked" "get-guest" "list")}
        {Lisp-Entry "on-new-project" method #f 549 11 549 25 ("get-workbench" "get-workbench-manager" "add-project-to" "evt")}
        {Lisp-Entry "on-event-spy" method #f 553 11 553 23 ("Event-Spy" "new-palette" "evt")}
        {Lisp-Entry "on-registry-viewer" method #f 558 11 558 29 ("Registry-Viewer" "new-frame" "evt")}
        {Lisp-Entry "on-type-viewer" method #f 563 11 563 25 ("Type-Viewer" "new-frame" "evt")}
        {Lisp-Entry "on-java-manager" method #f 568 11 568 26 ("Java-Manager" "new-frame" "evt")}
        {Lisp-Entry "on-showcase" method #f 573 11 573 22 ("Showcase" "new-frame" "evt")}
        {Lisp-Entry "on-profiler-manager" method #f 577 11 577 30 ("Profiler-Manager" "show-palette" "evt")}
        {Lisp-Entry "on-documentation-editor" method #f 582 11 582 34 ("get-client" "client:" "Doc-Editor" "new-frame" "get-catalogs" "car" "catalog" "get-documentation-cataloguer" "cataloguer" "let*" "evt")}
        {Lisp-Entry "on-run-smoker" method #f 588 11 588 24 ("Smoker-Builder" "new" "build/run" "evt")}
        {Lisp-Entry "on-toolbox" method #f 593 11 593 21 ("focus?:" "designer" "'designer" "workspace:" "Toolbox-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-descendants" method #f 598 11 598 25 ("focus?:" "designer" "'designer" "workspace:" "Descendants-Editor" "select-palette" "evt")}
        {Lisp-Entry "on-branches" method #f 603 11 603 22 ("focus?:" "designer" "'designer" "workspace:" "Branches-Editor" "select-palette" "evt")}
        {Lisp-Entry "on-spy-events" method #f 608 19 608 32 ("Event-Spy" "show-palette" "evt")}
        {Lisp-Entry "record-event?" method #f 613 20 613 33 ("event")}
        {Lisp-Entry "on-readme" method #f 622 19 622 28 ("Jazz" "File" "edit-document" "evt")}}
      {Lisp-Entry "Default-Jedi-Preferences" class #f 631 7 631 31 ("home" "active:" "Jedi-Preferences")}}})
"Jedi-Actions"
 ({Lisp-File-Entry {File jedi "src" "jedi" "preference" "Jedi-Actions.jazz"} 1257476474
    {Lisp-Entry "jedi.preference.Jedi-Actions" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Jedi-Actions" class #f 46 7 46 19 ("on-readme" "readme" "play-recording-5" "play-recording-4" "play-recording-3" "play-recording-2" "play-recording-1" "on-play-recording" "play-recording" "on-set-active-recording" "set-active-recording" "on-output-recording" "output-recording" "on-register-recording" "register-recording" "on-present-recording" "present-recording" "on-resume-recording" "resume-recording" "on-stop-recording" "stop-recording" "on-start-recording" ":recorder" "start-recording" "on-capture-mouse-host" "capture-mouse-host" "on-capture-host" "capture-host" "on-capture-mouse-document" "capture-mouse-document" "on-capture-document" "capture-document" "unzoom-document" "zoom-out-document" "document" "zoom-in-document" "on-unzoom" "unzoom-mouse-view" "on-zoom-out" "zoom-out-mouse-view" "mouse-view" "what:" "on-zoom-in" "zoom-in-mouse-view" "on-update-catalogs" "update-catalogs" "on-catalogs-manager" "catalogs-manager" "on-view-bindings" "view-bindings" "on-bindings-manager" "bindings-manager" "on-compare-files" "compare-files" "on-compare-directories" "compare-directories" "on-variables" "variables" "on-exception" "exception" "on-frames" "frames" "on-threads" "threads" "on-processes" "processes" "on-profiler-manager" "profiler-manager" "on-resources-monitor" "resources-monitor" "on-logs-viewer" "logs-viewer" "on-references-analyser" "references-analyser" "on-class-browser" "class-browser" "on-reload-process" "reload-process" "on-focus-previous-process" "focus-previous-process" "on-focus-next-process" "focus-next-process" "test-shift-0" "test-shift-9" "test-shift-8" "test-shift-7" "test-shift-6" "test-shift-5" "test-shift-4" "test-shift-3" "test-shift-2" "test-shift-1" "0" "test-0" "9" "test-9" "8" "test-8" "7" "test-7" "6" "test-6" "5" "test-5" "4" "test-4" "3" "test-3" "2" "test-2" "1" "no:" "on-test-no" "test-1" "on-test-shift" "test-shift" "on-test" "test" "on-clear-terminal" "clear-terminal" "on-toggle-terminal" "toggle-terminal" "on-terminal-repl" "terminal-repl" "on-clear-console" "clear-console" "on-spy-events" "spy-events" "on-spy-messages" "spy-messages" "on-explore-views" "explore-views" "F8" "on-debug-views" "debug-views" "Tab" "on-next-debuggee" "next-debuggee" "on-call-run-to" "call-run-to" "on-call-step-out" "call-step-out" "on-call-step-into" "call-step-into" "on-call-step-over" "call-step-over" "on-run-to-result" "run-to-result" "on-run-to-cursor" "run-to-cursor" "on-step-outside-function" "step-outside-function" "on-step-out" "step-out" "on-step-into-function" "step-into-function" "F11" "on-step-into" "step-into" "F10" "on-step-over" "step-over" "on-continue" "continue" "on-break" "break" "enabled?:" "F9" "on-restart" ":debugger" "restart" "on-build-project" "build-project" "F7" "on-compile-file" "compile-file" "on-debug-project-with" "debug-project-with" "on-debug-project" "debug-project" "on-run-project" "run-project" "on-test-project" "test-project" "on-view-project-log" "view-project-log" "on-clean-project" "clean-project" "on-edit-project" "edit-project" "F5" "on-select-project" "select-project" "on-showcase" "view-showcase" "on-documentation-editor" "view-documentation-editor" "on-hierarchy" "view-hierarchy" "on-chapters" "view-chapters" "on-sql-console" "view-sql-console" "on-sql-inventory" "view-sql-inventory" "on-sql-connections" "view-sql-connections" "on-java-manager" "view-java-manager" "on-java-reference-finder" "view-java-reference-finder" "on-preferences" "view-preferences" "on-branches" "view-branches" "on-descendants" "view-descendants" "on-toolbox" "view-toolbox" "on-type-viewer" "view-type-viewer" "on-registry-viewer" "view-registry-viewer" "on-web-servers" "view-web-servers" "on-activities" "view-activities" "on-user-log" "view-user-log" "on-output-log" "view-output-log" "on-profile-results" "view-profile-results" "on-search-results" "view-search-results" "Return" "on-properties" "view-properties" "on-debugger" "view-debugger" "Space" "on-console" "view-console" "on-repositories" "view-repositories" ":control" "on-workbench" "view-workbench" "on-exit-without-save" "exit-without-save" "on-save-profile" "save-profile" "on-open-jazz-text" "open-jazz-text" "on-open-text" "open-text" ":shift" ":alt" "Shortcut" "shortcut:" "on-new-project" ":application" "Event-Handler" "action-handler:" "new-project" "name:" "Actions")}}})
"Jedi-Bindings"
 ({Lisp-File-Entry {File jedi "src" "jedi" "preference" "Jedi-Bindings.jazz"} 1257476476
    {Lisp-Entry "jedi.preference.Jedi-Bindings" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Jedi-Bindings" class #f 46 7 46 20 ("current-frame" "previous-frame" "F6" "next-frame" "exit" "print-preview" "print-layout" "print" "F4" "close" "new" "windows" "save" "mac" "paste&next" "select-outer" "Space" "lock-anchor" "paste" "copy" "cut" "redo" "undo" "emacs" "move-right" "move-left" "insert-next" "insert-previous" "edit-references" "edit-definitions" "next" "prior" "document-end" "document-home" "extend-end" "end" "extend-home" "home" "kill-line" "delete-word" "delete-char" "downward-compound" "upward-compound" "extend-downward" "move-downward" "extend-upward" "move-upward" "forward-compound" "extend-forward-word" "move-forward-word" "extend-forward-char" "move-forward-char" "backward-compound" "extend-backward-word" "move-backward-word" "extend-backward-char" "move-backward-char" "select-all" "shift-tab" "alternate-shortcut:" "tab" "view-bindings" "bindings-manager" ":control" "find" ":shift" "pop-clipboard-stack" ":alt" "Shortcut" "shortcut:" "paste-from-stack" "jazz" "shortcut-viewer" "preview-pane" "view-surrogate" "view-editor" "search-results-tree" "search-manager" "compare-trees" "class-browser" "manager" "repositories-manager" "workbench-manager" "workbench-tree" "web-servers" "entities-tree" "components-tree" "components-viewer" "tree-embedded-search-text" "scheme-text" "composite-text" "compare-text" "combo-text" "console-text" "command-find" "command-execute" "command-extended" "command-search" "jazz-text" "lisp-text" "code-text" "jedi" "name:" "IDE-Bindings")}}})
"Jedi-Menubar"
 ({Lisp-File-Entry {File jedi "src" "jedi" "application" "Jedi-Menubar.jazz"} 1257476477
    {Lisp-Entry "jedi.application.Jedi-Menubar" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Jedi-Menubar" class #f 48 7 48 19 ("Menubar")
        {Lisp-Entry "host-icon" method #f 56 25 56 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 60 25 60 35 ()}
        {Lisp-Entry "install" method #f 69 20 69 27 ("Help-Menu" "help" "'help" "Window-Advanced-Menu" "window" "'window" "View-Menu" "view" "'view" "Workspace-Menu" "workspace" "'workspace" "Tools-Menu" "tools" "'tools" "Recorder-Menu" "recorder" "'recorder" "Debug-Menu" "debug" "'debug" "Project-Menu" "project" "'project" "Search-Menu" "search" "'search" "Refactor-Menu" "Source-Menu" "source" "'source" "Edit-Menu" "edit" "'edit" "Jedi-File-Menu" "list" "children:" "file" "'file" "name:" "self" "parent:" "Label-Item" "new" "lambda" "with-update-locked" "nextmethod" "rest")}}
      {Lisp-Entry "Jedi-File-Menu" class #f 93 7 93 21 ("new-project" "jedi" "Action" "action:" "on-new" "before:" "french:" "english:" "Locales" "title:" "on-new-project" "name:" "IDE-File-Menu")}
      {Lisp-Entry "View-Menu" class #f 107 7 107 16 ("view-showcase" "showcase" "view-documentation-editor" "documentation-editor" "view-sql-console" "sql-console" "view-sql-inventory" "sql-inventory" "view-sql-connections" "sql-connections" "sql" "view-java-manager" "java-manager" "variables" "exception" "frames" "threads" "processes" "view-hierarchy" "hierarchy" "view-chapters" "chapters" "view-branches" "branches" "view-descendants" "descendants" "view-toolbox" "toolbox" "view-type-viewer" "type-viewer" "view-registry-viewer" "registry-viewer" "view-web-servers" "web-servers" "view-activities" "activities" "view-user-log" "user-log" "view-output-log" "output-log" "view-profile-results" "profile-results" "view-search-results" "search-results" "view-properties" "properties" "view-console" "console" "view-repositories" "repositories" "view-workbench" "jedi" "Action" "action:" "Bitmap-Resource" "icon:" "workbench" "name:" "title:" "Menu")}
      {Lisp-Entry "Source-Menu" class #f 171 7 171 18 ("recolorize-syntax" "lisp-text" "tabulate" "transpose-expr" "select-outer" "goto-line" "search-current" "search-backward-mode" "text" "search-forward-mode" "edit-references" "edit-definitions" "evaluate-buffer" "code-text" "Action" "action:" "Bitmap-Resource" "icon:" "evaluate" "name:" "title:" "Menu")}
      {Lisp-Entry "Refactor-Menu" class #f 204 7 204 20 ("find-all-imports" "code-text" "find-imports" "remove-highlights" "lisp-text" "highlight-selection" "references-analyser" "jedi" "Action" "action:" "Bitmap-Resource" "icon:" "class-browser" "name:" "title:" "Menu")}
      {Lisp-Entry "Project-Menu" class #f 225 7 225 19 ("compile-file" "compile" "build-project" "build" "debug-project-with" "debug-with" "debug-project" "debug" "run-project" "run" "test-project" "test" "view-project-log" "view-log" "clean-project" "clean" "select-project" "jedi" "Action" "action:" "Bitmap-Resource" "icon:" "select" "name:" "title:" "Menu")}
      {Lisp-Entry "Debug-Menu" class #f 252 7 252 17 ("reload-process" "test-shift" "test" "clear-terminal" "toggle-terminal" "terminal-repl" "explore-views" "continue" "break" "jedi" "Action" "action:" "tooltip-text:" "tooltip?:" "Bitmap-Resource" "icon:" "restart" "name:" "title:" "Menu")
        {Lisp-Entry "update" method #f 273 20 273 26 ("terminal-visible?" "if" "toggle-terminal" "'toggle-terminal" "child" "set-title")}}
      {Lisp-Entry "Tools-Menu" class #f 282 7 282 17 ("command-execute" "application" "command-extended" "command-execute-separator" "capture-mouse-host" "capture-host" "capture-mouse-document" "capture-document" "compare-files" "compare-directories" "update-catalogs" "catalogs-manager" "view-preferences" "preferences" "view-bindings" "jedi" "Action" "action:" "Bitmap-Resource" "icon:" "bindings-manager" "name:" "title:" "Menu")}
      {Lisp-Entry "Help-Menu" class #f 312 7 312 16 ("about" "application" "readme" "jedi" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "Menu")}}})
"Jedi-Preferences"
 ({Lisp-File-Entry {File jedi "src" "jedi" "preference" "Jedi-Preferences.jazz"} 1257476477
    {Lisp-Entry "jedi.preference.Jedi-Preferences" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Jedi-Preferences" class #f 59 7 59 23 ("wallpaper" "catalogs" "debug" "repositories" "workbench" "image" "image-view" "associations:" "Jedi-Status" ":status" "Jedi-Toolbar" ":toolbar" "Jedi-Menubar" ":menubar" "toolbar-classes:" "sql" "user-extensions:" "user-label:" "jazz-files" "active-domain:" "text" "active:" "search-manager" "preferences-manager" "console" "compare-directories" "xml-text" "sql-text" "scheme-text" "python-text" "properties-text" "prop-text" "plain-text" "lua-text" "jazz-text" "javascript-text" "java-text" "html-text" "diff-text" "css-text" "csharp-text" "console-text" "c-text" "commonlisp-text" "name:" "Doc-Catalog" "Filing-Catalog" "filing" "catalog-types:" "Category-Moniker" "category" "Document-Moniker" "doc" "Depot-Moniker" "item" "URL" "url" "Directory-Group" "group" "Directory" "dir" "File" "file" "protocols:" "documented?:" "title:" "IDE-Preferences")}}})
"Jedi-Profile"
 ({Lisp-File-Entry {File jedi "src" "jedi" "profile" "Jedi-Profile.jazz"} 1257477715
    {Lisp-Entry "jedi.profile.Jedi-Profile" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Jedi-Profile" class #f 58 7 58 19 ("IDE-Profile")
        {Lisp-Entry "apropos" method #f 61 11 61 18 ("get-output" "ci<?" "sort" "put" "search" "when" "definitions" "name" "lambda" "iterate-definitions" "List-Factory" "new" "fact" "get-application" "get-cataloguer" "find-catalog" "catalog" "let" "catalog-name" "target")}
        {Lisp-Entry "recent-files" method #f 71 11 71 23 ("select-results" "add-results" "text" "'text" "set-mode" "format-plural" "user-message" "length" "count" "queue-list" "files" "ignored-directories:" "list" "enqueue" "get-modification-time" "time>?" "ci=?" "test:" "get-extension" "member?" "not" "and" "when" "file" "lambda" "iterate-directory" "make-directory-feedback" "directory-feedback" "ignored-extensions" "ignored-directories" "3600" "0" "time-duration" "make-time" "either" "current-time" "subtract-duration" "from" "new-queue" "queue" "get-application" "get-search-results" "results" "let" "elapse" "Jazz" "Directory" "directory" "bind-keywords" "rest")}
        {Lisp-Entry "search-licenseless-files" method #f 94 11 94 35 ("select-results" "add-results" "text" "'text" "set-mode" "format-plural" "user-message" "length" "count" "queue-list" "files" "enqueue" "equal?" "eof-object?" "not" "and" "read-line" "line" "port" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "ci=?" "test:" "member?" "when" "get-extension" "ext" "file" "lambda" "Jazz" "Directory" "iterate-directory" "make-directory-feedback" "directory-feedback" "new-queue" "queue" "get-application" "get-search-results" "results" "let")}
        {Lisp-Entry "search-trailing-whitespace" method #f 117 11 117 37 ("select-results" "add-results" "text" "'text" "set-mode" "format-plural" "user-message" "count" "queue-list" "files" "ignored-directories:" "length" "naturals" "continuation-return" "+" "list" "enqueue" "set!" "whitespace?" "if" "element" "c" "do" "0" "downto" "1" "cardinality" "-" "from" "n" "for" "loop" "trailing-whitespace" "done" "continuation-capture" "rank" "line" "for-each" "char-encoding-errors:" "load-lines" "lines" "ci=?" "test:" "get-extension" "member?" "not" "when" "file" "lambda" "iterate-directory" "make-directory-feedback" "directory-feedback" "ignored-extensions" "ignored-directories" "new-queue" "queue" "get-application" "get-search-results" "results" "let" "Jazz" "Directory" "directory" "bind-keywords" "rest")}
        {Lisp-Entry "inspect-binary" method #f 151 11 151 25 ("read-u8" "read-all" "debug" "port" "lambda" "parse" "call-with-input-file" "file")}
        {Lisp-Entry "console-command" method #f 162 20 162 35 ("nextmethod" "else" "exit" ":exit" "edit" ":edit" "compile" ":compile" "expand-scheme" ":expand-scheme" "expand" ":expand" "car" "edit-documentation" ":doc" "case" "arguments" "command")}
        {Lisp-Entry "edit-documentation" method #f 176 11 176 29 ("edit-documentation" "get-application" "appl" "let" "name")}
        {Lisp-Entry "expand" method #f 181 11 181 17 ("else" "macro?" "apply" "syntax-macro?" "cond" "definition-value" "macro" "let" "debug" "begin" "null?" "if" "Java" "Language" "either" "definition" "class-of" "category-field" "object" "lambda" "try" "let*" "arguments" "name" "bind" "unimplemented" "form")}
        {Lisp-Entry "expand-scheme" method #f 198 11 198 24 ("macro?" "apply" "debug" "syntax-macro?" "cond" "Kernel" "either" "definition-value" "macro" "class-of" "category-field" "package" "lambda" "try" "let*" "arguments" "name" "bind" "unimplemented" "form")}
        {Lisp-Entry "compile" method #f 209 11 209 18 ("compile-classes" "unimplemented" "classes")}
        {Lisp-Entry "edit" method #f 215 11 215 15 ("Jazz-Code-Location" "new" "edit" "location")}
        {Lisp-Entry "utf8" method #f 224 11 224 15 ("get-content" "increase!" "List" "coerce" "map" "debug" "128" "char->integer" ">=" "char" "some?" "when" "line" "lambda" "for-each" "1" "count" "let" "text")}
        {Lisp-Entry "remove-trailing-whitespace" method #f 235 11 235 37 ("format-cardinality" "downcase" "user-message" "increase!" "-" "Cell" "Range$Cell$" "new" "delete-range" "cardinality" "end" "empty-string?" "extract-trailer" "trailer" "whitespace?" "unless" "paragraph-string" "str" "row" "line" "lambda" "for-each-paragraph" "0" "count" "let" "text")}
        {Lisp-Entry "package-units" method #f 254 11 254 24 ("package-name" "debug" "not" "cdr" "update" "'update" "assq" "pair" "if" "package-product" "product" "List-Factory" "new" "fact" "let" "package")}
        {Lisp-Entry "package-product" method #f 266 11 266 26 ("package-products" "package-name" "assq" "package")}
        {Lisp-Entry "unit-subunits" method #f 270 11 270 24 ("cons" "set!" "phase" "declaration" "subunit-name" "lambda" "for-each-subunit" "subunits" "let" "core.unit.builder" "'core.unit.builder" "load-unit" "unit-name")}
        {Lisp-Entry "selection->doc" method #f 284 11 284 25 ("get-output-string" "set-clipboard-text" "not" "get-style" "get-color" "class" "String" "get-string" "coerce" "set!" "run" "for-each" "first?" "cdr" "next" "car" "null?" "unless" "scan" "iterate" "format" "open-output-string" "output" "substitute-alist" "str" "encode-string" "'color" "unknown" "'unknown" "debug" "else" "Text-Gray" "Dark-Orange" "Ochre" "Purple" "Dark-Purple" "Dark-Red" "Dark-Green" "Dark-Blue" "get-name" "case" "when" "color" "color-class" "queue-list" "enqueue" "range-runs" "runs" "end" "start" "paragraph" "lambda" "text-range" "get-selection" "has-selection?" "if" "for-each-range" "new-queue" "queue" "let" "collect-runs" "define" "text")}
        {Lisp-Entry "file->doc" method #f 338 11 338 20 ("get-output-string" "open-output-string" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "display" "process-nodes" "when" "receive" "'newline" "iterate" "process-line" "'space" "unless" "'period-space" "newline" "write-char" "period" "'period" "eq?" "and" "else" "period-space" "none" "'none" "if" "space" "case" "peek-char" "eqv?" "values" "eof-object?" "cond" "read-char" "c" "let" "output" "input" "in-string?" "status" "process-line-char" "define" "file")}
        {Lisp-Entry "Documented-Units" definition #f 425 14 425 30 ("time" "jazz.ui.window" "jazz.ui.view" "jazz.ui.dialog" "jazz.ui.clipboard" "jazz.ui" "jazz.system.process" "jazz.system.application" "jazz.system" "jazz.schema" "jazz.runtime" "jazz.network" "jazz.media" "jazz.library" "jazz.jrm" "jazz.jml" "jazz.io" "jazz.graphic" "jazz.database.sqlserver" "jazz.database" "jazz.console" "jazz.catalog" "jazz.dialect.language" "jazz" "jazz.dialect.kernel" "kernel" "scheme" "statprof" "irregex")}
        {Lisp-Entry "extract-doc" method #f 473 11 473 22 ("user-message" "Documented-Units" "extract-toplevel-doc" "for-each")}
        {Lisp-Entry "extract-toplevel-doc" method #f 478 11 478 31 ("newline" "pretty-print" "extract-unit/module-doc" "parse-jml" "node" "port" "lambda" "get-eol-encoding" "eol-encoding:" "format" "new-file" "parse" "path:" "list" "call-with-output-file" "create-directories" "jazz.website" "Directory" "reference-dir" "let" "user-message" "units" "name" "bind" "info")}
        {Lisp-Entry "extract-unit/module-doc" method #f 490 11 490 34 ("extract-module-doc" "Module-Declaration" "extract-unit-doc" "Unit-Declaration" "typecase" "car" "null?" "if" "outline-unit" "unit" "let" "core.unit.builder" "'core.unit.builder" "load-unit" "units" "name")}
        {Lisp-Entry "extract-unit-doc" method #f 498 11 498 27 ("symbol->string" "title:" ",name" "name:" "declaration" "name")}
        {Lisp-Entry "extract-module-doc" method #f 502 11 502 29 ("extract-declaration-doc" "collect" "title:" ",name" "name:" "get-name" "symbol->string" "decl" "lambda" "key:" "string<?" "sort" "sorted" "get-public-lookup" "table-values" "resolve-declarations" "filter-access/compatibility-declarations" "declarations" "let" "declaration" "name")}
        {Lisp-Entry "extract-declaration-doc" method #f 509 11 509 34 ("get-name" "name:" "class-of" "type-name" "Unknown" "'Unknown" "debug" "else" "C-Named-Declare-Declaration" "extract-c-definition-doc" "C-Definition-Declaration" "extract-c-type-doc" "C-Type-Declaration" "extract-method-doc" "Method-Declaration" "extract-slot-doc" "Slot-Declaration" "extract-property-doc" "Property-Declaration" "extract-interface-doc" "Interface-Declaration" "extract-class-doc" "Class-Declaration" "extract-syntax-doc" "Syntax-Declaration" "extract-macro-doc" "Macro-Declaration" "extract-generic-doc" "Generic-Declaration" "extract-definition-doc" "Definition-Declaration" "extract-define-macro-doc" "Define-Macro-Declaration" "extract-define-doc" "Define-Declaration" "extract-export-doc" "Export-Declaration" "typecase" "declaration")}
        {Lisp-Entry "extract-export-doc" method #f 529 11 529 29 ("get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-define-doc" method #f 533 11 533 29 ("get-signature" "extract-signature" "parameters:" "get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-define-macro-doc" method #f 538 11 538 35 ("get-signature" "extract-signature" "parameters:" "get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-definition-doc" method #f 543 11 543 33 ("get-signature" "extract-signature" "parameters:" "get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-generic-doc" method #f 548 11 548 30 ("get-signature" "extract-signature" "parameters:" "get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-macro-doc" method #f 553 11 553 28 ("get-signature" "extract-signature" "parameters:" "get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-syntax-doc" method #f 558 11 558 29 ("get-signature" "extract-signature" "parameters:" "get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-class-doc" method #f 563 11 563 28 ("get-children" "queue-list" "filter-access/compatibility-declarations" "extract-declaration-doc" "resolve-declarations" "map" "interfaces:" "resolve-binding" "if" "ascendant:" ",name" "title:" "extract-locator" "name:" "ends-with?" "or" "unless" "get-interfaces" "interfaces" "get-ascendant" "ascendant" "get-name" "symbol->string" "name" "let" "declaration")}
        {Lisp-Entry "extract-interface-doc" method #f 575 11 575 32 ("get-children" "queue-list" "filter-access/compatibility-declarations" "extract-declaration-doc" "resolve-declarations" "map" "ascendants:" "get-name" "symbol->string" "title:" "extract-locator" "name:" "get-ascendants" "ascendants" "let" "declaration")}
        {Lisp-Entry "extract-slot-doc" method #f 582 11 582 27 ("get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-property-doc" method #f 586 11 586 31 ("get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-method-doc" method #f 590 11 590 29 ("get-signature" "extract-signature" "parameters:" "get-access" "access:" "get-name" "symbol->string" "title:" "extract-locator" "name:" "propagation:" "list" "get-propagation" "propagation" "let" "extract-propagation-list" "define" "declaration")}
        {Lisp-Entry "extract-c-type-doc" method #f 601 11 601 29 ("get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-c-definition-doc" method #f 605 11 605 35 ("get-name" "symbol->string" "title:" "extract-locator" "name:" "declaration")}
        {Lisp-Entry "extract-signature" definition #f 609 15 609 32 ("rest:" "named:" "optional:" "map" "positional:" "list" "null?" "get-rest" "rest" "get-named" "named" "get-optional" "optional" "get-positional" "positional" "let" "not" "if" "get-name" "parameter" "extract-name" "define" "signature")}
        {Lisp-Entry "extract-locator" definition #f 626 15 626 30 ("else" "cdddr" "third" "3" "cddr" "cons" "compose-name" "apply" "second" "first" "eq?" "2" ">=" "and" "cond" "length" "len" "split-identifier" "reverse!" "names" "get-locator" "locator" "let" "declaration")}
        {Lisp-Entry "resolve-declarations" definition #f 638 15 638 35 ("resolve-binding" "decl" "lambda" "map" "declarations")}
        {Lisp-Entry "filter-access/compatibility-declarations" definition #f 644 15 644 55 ("uptodate" "'uptodate" "get-compatibility" "chained" "virtual" "get-propagation" "memq?" "protected" "'protected" "public" "'public" "eq?" "or" "get-access" "access" "let" "and" "decl" "lambda" "collect-if" "declarations")}
        {Lisp-Entry "JazzWebsite-Site" definition #f 658 14 658 30 ("jazz.website" "File")}
        {Lisp-Entry "JazzWebsite-Content" definition #f 661 14 661 33 ("jazz.website" "Directory")}
        {Lisp-Entry "regenerate-jazzwebsite" method #f 665 11 665 33 ("generate-jazzwebsite" "get-application" "reload-documentation")}
        {Lisp-Entry "generate-jazzwebsite" method #f 670 11 670 31 ("render-jazzwebsite-page" "path" "'path" "get-property" "user-message" "page" "lambda" "for-each" "get-children" "pages" "JazzWebsite-Transformation" "new" "transform-jml" "JazzWebsite-Site" "load-jml" "site" "let*")}
        {Lisp-Entry "render-jazzwebsite-page" method #f 681 11 681 34 ("render" "printer" "lambda" "get-eol-encoding" "eol-encoding:" "ISO-8859-1" "'ISO-8859-1" "char-encoding:" "parse" "path:" "list" "call-with-output-file" "first-child" "html" "XHTML-Renderer" "renderer" "JML-Preferences" "new" "preferences" "path" "'path" "get-property" "format" "new-file" "file" "JazzWebsite-Content" "content" "let*" "page")}
        {Lisp-Entry "export-latest-news" method #f 693 11 693 29 ("user-message" "get-output-string" "set-clipboard-text" "increase!" "display" "make-string" "=" "and" "str" "set!" "when" "old-right" "old-left" "thunk" "left" "format" "equal?" "if" "'href" "href" "2" "subnode" "first-child" "with-margins" "upcase" "paragraph" "'title" "get-property" "title" "print" ">" "break" ">=" "cond" "cardinality" "+" "right" "word" "lambda" "split" "remove-empty-strings" "words" "text" "for-each" "render-children" "error" "render-anchor" "a" "render-cite" "cite" "render-span" "span" "render-node" "render-break" "br" "render-bold" "b" "render-paragraph" "p" "render-division" "division" "case" "get-tag" "tag" "else" "get-text" "render-text" "JML-Text" "typecase" "node" "render" "define" "column" "70" "right-margin" "0" "left-margin" "open-output-string" "output" "let" "first" "latest" "'news" "find-name" "get-children" "second" "news" "JazzWebsite-Site" "load-jml" "site" "let*")}
        {Lisp-Entry "test" method #f 809 11 809 15 ("new-mandelbrot")}
        {Lisp-Entry "new-mandelbrot" method #f 814 11 814 25 ("home" "'home" "host-workspace:" "800" "Dimension" "host-size:" "50" "Point" "host-position:" "host-title:" "Mandelbrot" "new-frame")}
        {Lisp-Entry "gambit" method #f 823 11 823 17 ("visible?:" "500" "900" "Dimension" "size:" "wait?:" "capture-error?:" "capture-output?:" "capture-input?:" "jazz" "Directory" "directory:" "create-process" "if" "format" "command" ":exit" "case" "exception" "let*" "unimplemented" ":repl" "exception-handler" "exception-handler:" "102400" "maximum-heapsize" "maximum-heapsize:" "expr" "expr:")}
        {Lisp-Entry "image-convert" definition #f 836 15 836 28 ("error" "0" "/=" "when" "format" "shell-command" "status" "let" "cmd")}
        {Lisp-Entry "image-composite" definition #f 842 15 842 30 ("error" "0" "/=" "when" "format" "shell-command" "status" "let" "cmd")}
        {Lisp-Entry "extract-bitmaps" method #f 853 11 853 26 ("format-plural" "length" "count" "new-file" "copy-file" "cons" "set!" "equal?" "test:" "member?" "get-base" "ends-with?" "or" "unless" "user-message" "sha-1" "'sha-1" "parse" "digest-file" "digest" "get-name" "name" "file" "lambda" "iterate-directory" "digests" "create-directories" "dst" "Jazz" "Directory" "src" "let")}
        {Lisp-Entry "generate-disabled" method #f 876 11 876 28 ("delete-file" "exists?" "when" "new-brother" "image-convert" "begin" "unwind-protect" "lambda" "parse" "with-current-directory" "disabled" "format" "grayscale" "get-extension" "extension" "get-base" "base" "get-name" "name" "get-parent" "directory" "let" "image")}
        {Lisp-Entry "generate-all-disabled" method #f 894 11 894 32 ("generate-disabled" "get-name" "user-message" "ci=?" "test:" "get-extension" "member?" "when" "file" "lambda" "iterate-directory" "extensions" "directory")}
        {Lisp-Entry "delete-all-disabled" method #f 903 11 903 30 ("delete-file" "get-name" "user-message" "get-base" "ends-with?" "ci=?" "test:" "get-extension" "member?" "and" "when" "file" "lambda" "iterate-directory" "extensions" "directory")}
        {Lisp-Entry "Template-AList" definition #f 919 14 919 28 ("source" "package" "title")}
        {Lisp-Entry "test8" method #f 926 11 926 16 ("user-message" "Template-AList" "expand" "output" "lambda" "parse" "call-with-output-file" "Builder-Unit" "File" "template" "Template-Expander" "new" "expander" "let")}
        {Lisp-Entry "test" method #f 941 11 941 15 ("test-taskbar")}
        {Lisp-Entry "test-shift" method #f 946 11 946 21 ("test-remove-taskbar")}
        {Lisp-Entry "test-taskbar" method #f 951 11 951 23 ("NIM_ADD" "Shell_NotifyIcon" "hIcon" "'hIcon" "JZ_TASKICON" "uCallbackMessage" "'uCallbackMessage" "NIF_ICON" "NIF_MESSAGE" "bitwise-ior" "uFlags" "'uFlags" "10" "uID" "'uID" "get-toplevel-hwnd" "hWnd" "'hWnd" "size-of" "cbSize" "'cbSize" "set" "height:" "16" "width:" "Icon-Resource" "'icon" "Image" "load-image" "icon" "NOTIFYICONDATA" "new" "record" "let")}
        {Lisp-Entry "test-remove-taskbar" method #f 964 11 964 30 ("NIM_DELETE" "Shell_NotifyIcon" "10" "uID" "'uID" "get-toplevel-hwnd" "hWnd" "'hWnd" "size-of" "cbSize" "'cbSize" "set" "NOTIFYICONDATA" "new" "record" "let")}
        {Lisp-Entry "test" method #f 978 11 978 15 ("tie" "debug" "1" "x" "let")}
        {Lisp-Entry "test1" method #f 989 11 989 16 (":console" "format")}
        {Lisp-Entry "test2" method #f 994 11 994 16 ("10" ":console" "format")}
        {Lisp-Entry "test" method #f 1004 11 1004 15 ("'<init>" "org.apache.bcel.classfile.JavaClass" "category-field" "definition-value" "debug")}
        {Lisp-Entry "test" method #f 1009 11 1009 15 ("X" "new" "foo" "debug")}
        {Lisp-Entry "test-shift" method #f 1014 11 1014 21 ("X" "new" "get-foo" "debug")}
        {Lisp-Entry "test1" method #f 1019 11 1019 16 ("Window" "type-name" "map" "debug" "find-generics" "generics" "signature" "lambda" "test" "let" "B" "A" "Y" "X" "list" "insert-node" "get-dag-root" "dag-root" "Dispatcher" "new" "dispatcher" "let*")}
        {Lisp-Entry "test2" method #f 1040 11 1040 16 ("Integer" "Object" "type-name" "map" "debug" "find-generics" "generics" "signature" "lambda" "test" "let" "Point" "Rect" "list" "insert-node" "get-dag-root" "dag-root" "Dispatcher" "new" "dispatcher" "let*")}
        {Lisp-Entry "test2" method #f 1056 11 1056 16 ("Integer" "type-name" "map" "debug" "find-generics" "generics" "signature" "lambda" "test" "let" "list" "insert-node" "get-dag-root" "dag-root" "Dispatcher" "new" "dispatcher" "let*")}
        {Lisp-Entry "ed" definition #f 1077 14 1077 16 ()}
        {Lisp-Entry "xa" definition #f 1081 14 1081 16 ()}
        {Lisp-Entry "xb" definition #f 1085 14 1085 16 ()}
        {Lisp-Entry "x1" definition #f 1089 14 1089 16 ()}
        {Lisp-Entry "x2" definition #f 1093 14 1093 16 ()}
        {Lisp-Entry "setup-exemplar" method #f 1098 11 1098 25 ("user-message" "20" "x2" "10" "x1" "5" "base:" "b" "'b" "xb" "3" ":c" "2" ":b" "1" ":a" "a" "'a" "name:" ":domain" "X" "xa" "Exemplar-Domain" "new" "ed" "set!")}
        {Lisp-Entry "test-exemplar" method #f 1108 11 1108 24 ("user-message" "x2" "x1" "xb" "xa" "init")}
        {Lisp-Entry "test9" method #f 1121 20 1121 25 ("internal-tabulate" "bell" "Jazz-Text-View" "is-not?" "if" "get-focus" "text" "let")}
        {Lisp-Entry "internal-tabulate" method #f 1128 11 1128 28 ("tabulate-columns" "set-range" "collect-maxes" "maxes" "range:" "Jazz-Explorer" "explorer" "Range$Cell$" "new" "range" "get-start" "pos" "let*" "text")}
        {Lisp-Entry "collect-maxes" method #f 1137 11 1137 24 ("exit-composite" "get-output" "put" "get-start" "get-end" "get-col" "-" "size" "forward-expr" "List-Factory" "new" "let" "enter-composite" "while" "max" "map" "null?" "if" "set!" "sizes" "lambda" "update-maxes" "maxes" "let*" "explorer")}
        {Lisp-Entry "tabulate-columns" method #f 1154 11 1154 27 ("exit-composite" "cdr" "set!" "make-string" "list" "Range$Cell$" "new" "replace-text" "end" "0" ">" "when" "diff" "get-start" "get-end" "get-col" "-" "size" "car" "max" "let*" "forward-expr" "enter-composite" "while" "lambda" "with-atomic-undo" "get-undoer" "undoer" "let" "maxes" "explorer" "text")}
        {Lisp-Entry "text-macro" method #f 1178 11 1178 21 ("toggle-bulleted" "get-format" "get-bulleted?" "unless" "get-paragraph" "paragraph" "let" "naturals" "one" "'one" "keep:" "paragraph-length" "remove-spaces" "row" "for-each" "2" "+" "0" "Range$Cell$" "delete-range" "lambda" "with-locked-update" "bell" "/=" "if" "Cell" "new" "get-char" "char" "get-column" "col" "get-end" "end" "get-start" "get-row" "start" "let*" "text")}
        {Lisp-Entry "test" method #f 1198 11 1198 15 ("test-for-each-page")}
        {Lisp-Entry "test-for-each-page" method #f 1203 11 1203 29 ("-" "debug" "get-top" "b" "get-row" "get-bottom" "t" "let" "bottom" "top" "page" "lambda" "360" "1" "get-limit" "+" "0" "%" "for-each-page")}
        {Lisp-Entry "test-message-box" method #f 1212 11 1212 27 ("sound:" "1" "Light-Red" "'Light-Red" "highlight:" "Bitmap-Resource" "image:" "yo" "'yo" "debug" "close-modal-dialog" "lambda" ":hyperlink" "2" "indent:" ":bulleted" "list" "message-box")}
        {Lisp-Entry "hide-paragraphs" method #f 1222 11 1222 26 ("hide" "paragraph" "row" "lambda" "for-each-selected-paragraph" "get-focus" "text" "let")}
        {Lisp-Entry "test2" method #f 1235 11 1235 16 ("join-lines" "message-box" ":arguments" "Java-Classpath" "classpath:" "execute" "output" "Java-Runtime" "new" "java" "let*")}
        {Lisp-Entry "test3" method #f 1242 11 1242 16 ("3" "5" "4" "test" "2" "cj" "debug" "8" "obj2" "org.jazzscheme.test.Test" "new" "obj1" "let")}
        {Lisp-Entry "test-context" method #f 1255 11 1255 23 ("title:" "self" "context:" "threaded?:" "a" "'a" "car" "10" "0" "naturals" "foo" "with-continue" "n" "for-each" "to-fix" "with-restart" "reporter" "with-progress" "lambda" "with-execution-context")}
        {Lisp-Entry "to-fix" method #f 1276 11 1276 17 ("symbol->string" "debug")}
        {Lisp-Entry "foo" method #f 1281 11 1281 14 ("details:" "title:" "goo" "lambda" "with-execution-node" "n")}
        {Lisp-Entry "goo" method #f 1290 11 1290 14 ("details:" "title:" "hoo" "lambda" "with-execution-node" "n")}
        {Lisp-Entry "hoo" method #f 1299 11 1299 14 ("title:" "car" "lambda" "with-execution-node" "n")}
        {Lisp-Entry "test-parameters" method #f 1312 11 1312 26 ("main" "'main" ".5" "sleep" "3" "get-parameter" "'thread" "debug" "thread" "lambda" "execute:" "self" "context:" "Thread" "new" "2" "test" "'test" "set-parameter")}
        {Lisp-Entry "test" method #f 1330 11 1330 15 ("log-entry" "lambda" "Bin" "File" "file:" "test" "'test" "name:" "Log" "new" "with-log")}
        {Lisp-Entry "test-shift" method #f 1338 11 1338 21 ("2" "foo")}
        {Lisp-Entry "foo" method #f 1343 11 1343 14 ("bar" "format" "message:" "name:" "log-entry" "x")}
        {Lisp-Entry "bar" method #f 1349 11 1349 14 ("Stack-Snapshot" "new" "data:" "message:" "name:" "log-entry" "+" "y" "let" "x")}
        {Lisp-Entry "test" method #f 1355 11 1355 15 ("+" "node" "with-profile" "5" ":c" "3" ":b" "2" ":a" "list" "log-properties" "log-entry" "lambda" "Bin" "File" "file:" "test" "'test" "name:" "Log" "new" "with-log")}
        {Lisp-Entry "test3" method #f 1373 11 1373 16 ("test-resources" "gc")}
        {Lisp-Entry "test-resources" method #f 1379 11 1379 25 ("test-user-name" "test-synchronizer" "test-stack" "test-socket" "test-registry-key" "test-region" "test-reader" "test-pseudo-handle" "test-portfolio" "test-picture" "test-image" "test-file-reader" "test-file-printer" "test-dc" "test-bitmap" "lambda" "Bin" "File" "file:" "name:" "Log" "new" "with-log")}
        {Lisp-Entry "test-bitmap" method #f 1400 11 1400 22 ("name:" "height:" "16" "width:" "desktop-dc" ":dc" "Bitmap" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-image" method #f 1408 11 1408 21 ("name:" "Cursor-Resource" "cursor" "'cursor" "height:" "16" "width:" "Icon-Resource" "icon" "'icon" "Bitmap-Resource" "bitmap" "'bitmap" "Image" "load-image" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-picture" method #f 1418 11 1418 23 ("name:" "Picture" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-portfolio" method #f 1426 11 1426 25 ("name:" "Portfolio" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-pseudo-handle" method #f 1434 11 1434 29 ("name:" "GetCurrentProcess" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-region" method #f 1442 11 1442 22 ("name:" "100" "0" "Rect" "rect:" "Region" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-registry-key" method #f 1450 11 1450 28 ("name:" "subkey" "key" "with-closed" "open-key" "HKEY_CURRENT_USER" "key2" "HKEY_CLASSES_ROOT" "key:" "Registry-Key" "new" "key1" "let" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-socket" method #f 1468 11 1468 22 ("name:" "Socket" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-stack" method #f 1476 11 1476 21 ("new-log-node" "node:" "5000" "1" "-" "after" "'after" "0" "=" "if" "n" "proc" "letrec" "before" "'before" "name:" "log-profile" "node" "lambda" "with-node")}
        {Lisp-Entry "test-synchronizer" method #f 1490 11 1490 28 ("name:" "Semaphore" "Mutex" "Impulse" "new" "node" "lambda" "with-profile")}
        {Lisp-Entry "test-user-name" method #f 1500 11 1500 25 ("name:" "get-system-user-name" "node" "lambda" "with-profile")}
        {Lisp-Entry "test9" method #f 1508 11 1508 16 ("gc-clear-undestroyed")}
        {Lisp-Entry "test1" method #f 1518 11 1518 16 ("255" "blend")}
        {Lisp-Entry "test2" method #f 1523 11 1523 16 ("100" "blend")}
        {Lisp-Entry "test3" method #f 1528 11 1528 16 ("30" "blend")}
        {Lisp-Entry "blend" method #f 1533 11 1533 16 ("get-player" "set-alpha-blending" "pos" "view" "lambda" "click:" "pick-figure" "x")}
        {Lisp-Entry "reprint-toplevel-form" method #f 1545 11 1545 32 ("insert-string" "set-selection" "lambda" "with-update-locked" "0" "saved-form" "output" "form:" "Designer" "new" "designer" "bell" "Form" "is-not?" "if" "read-string-element" "jml->form" "form" "get-string" "string" "get-end" "toplevel-expr" "range" "get-focus" "text" "let*" "align-name?" "align-name?:" "space-properties?" "space-properties?:")}
        {Lisp-Entry "reprint-current-form" method #f 1560 11 1560 31 ("insert-string" "set-selection" "lambda" "with-update-locked" "length" "1" "+" "saved-form" "output" "form:" "Designer" "new" "designer" "bell" "Form" "is-not?" "if" "read-string-element" "second" "jml->form" "form" "get-string" "string" "get-end" "declaration-range" "range" "get-selection" "current-classes" "classes" "get-focus" "text" "let*" "align-name?" "align-name?:" "space-properties?" "space-properties?:")}
        {Lisp-Entry "reprint-selected-form" method #f 1576 11 1576 32 ("insert-string" "set-selection" "lambda" "with-update-locked" "0" "saved-form" "output" "form:" "Designer" "new" "designer" "bell" "Form" "is-not?" "if" "read-string-element" "jml->form" "form" "get-string" "string" "get-selection" "range" "get-focus" "text" "let*" "align-name?" "align-name?:" "space-properties?" "space-properties?:")}
        {Lisp-Entry "clear-activities" method #f 1596 11 1596 27 ("unregister-activity" "reporter" "lambda" "for-each" "get-reporters" "reporters" "get-activity-manager" "manager" "let*")}
        {Lisp-Entry "Foo" class #f 1610 9 1610 12 ("Object")
          {Lisp-Entry "holder" definition #f 1613 16 1613 22 ()}
          {Lisp-Entry "bar" method #f 1617 13 1617 16 ("7" "5" "if" "message-box" "break" "v" "let" "p" "+" "y" "flag" "n" "lambda" "proc" "self" "z" "2" "x" "let*" "holder" "set!")}
          {Lisp-Entry "baz" method #f 1634 13 1634 16 ("car" "2" "x" "let")}}
        {Lisp-Entry "test" method #f 1640 11 1640 15 ("Foo" "new" "bar")}
        {Lisp-Entry "test-shift" method #f 1645 11 1645 21 ("Foo" "new" "baz")}
        {Lisp-Entry "test-location" method #f 1650 11 1650 24 ("list" "3" "z" "break" "y" "2" "x" "let")}
        {Lisp-Entry "test-location-aux" method #f 1658 11 1658 28 ("30" "20" "10" "foo" "X" "Y" "Z" "new" "z" "let")}
        {Lisp-Entry "X" class #f 1664 9 1664 10 ("Object")
          {Lisp-Entry "Y" class #f 1667 11 1667 12 ("Object")
            {Lisp-Entry "Z" class #f 1670 13 1670 14 ("Object")
              {Lisp-Entry "foo" method #f 1673 17 1673 20 ("0" "naturals" "car" "y" "map" "x" "lambda" "for-each" "list")}
              {Lisp-Entry "bar" method #f 1681 17 1681 20 ("1" "car")}}}}
        {Lisp-Entry "xml-viewer" method #f 1691 11 1691 21 ("set-visible?" "bring-to-front" "set-document" "get-guest" "viewer" "host-visible?:" "XML-Viewer" "new-frame" "frame" "let*" "load" "File" "file" "XML-Document" "new" "document" "let")}
        {Lisp-Entry "test" method #f 1703 11 1703 15 ("parse-text" "debug" "text:" "XML-Parser" "new" "parser" "text" "let*")}
        {Lisp-Entry "test1" method #f 1710 11 1710 16 ("parse-text" "debug" "text:" "XML-Parser" "new" "parser" "text" "let*" "name:" "log-entry")}
        {Lisp-Entry "test2" method #f 1718 11 1718 16 ("length" "parse-text" "debug" "text:" "XML-Parser" "parser" "read-content-string" "File-Reader" "new" "reader" "with-closed" "text" "Jazz" "File" "file" "let*")}
        {Lisp-Entry "My-Transfo" class #f 1732 9 1732 19 ("XML-Transformer")
          {Lisp-Entry "machin" method #f 1735 20 1735 26 ("cdr" "p" ">>xml" "n" "lambda" "for-each" "xml>>" "<-xml" "title" "mode" "f" "a" "xsl-rules" "y" "x" "node")}
          {Lisp-Entry "chouette" method #f 1746 20 1746 28 ("children" "machin" "apply-transformation" "xml>>" "xsl-rules" "b" "a" "node")}}
        {Lisp-Entry "test" method #f 1754 11 1754 15 ("2" "1" "a" "machin" "XML-Formatter" "handler:" "My-Transfo" "new" "transfo" "let")}
        {Lisp-Entry "test1" method #f 1760 11 1760 16 ("node" "children" "<-xml" "p" ">>xml" "n" "lambda" "for-each" "xml>>" "f" "a" "list" "y" "x" "expand-xsl-ruleset" ":console" "format")}
        {Lisp-Entry "test0" method #f 1776 11 1776 16 ("text" "end-element" "add-attribute" "begin-element" "2" "indentation:" ":pretty" "XML-Formatter" "new" "f" "let")}
        {Lisp-Entry "test1" method #f 1789 11 1789 16 ("b" "align" "h1" "body" "process-sxml" "converter" ":pretty" "XML-Formatter" "new" "processor" "let")}
        {Lisp-Entry "test0" method #f 1802 11 1802 16 ("1" "car")}
        {Lisp-Entry "setup-compiler" method #f 1807 11 1807 25 ("Mutation-Annotator" "Type-Annotator" "new" "add-user-pass" "Compiler" "initialize-user-passes")}
        {Lisp-Entry "test1" method #f 1819 11 1819 16 ("debug" "=>" "2" "cond")}
        {Lisp-Entry "test" method #f 1824 11 1824 15 ("+" "ID" "lalr-parser" "debug")}
        {Lisp-Entry "test" method #f 1829 11 1829 15 ("identity" "CPS" "test")}
        {Lisp-Entry "speedup" method #f 1838 11 1838 18 ("-" "percentage" "new" "old")}
        {Lisp-Entry "activity-no" definition #f 1843 14 1843 25 ("0")}
        {Lisp-Entry "test-activities" method #f 1848 11 1848 26 (":unregister?" ".5" "set-done" "unless" "1" "delta-pos" "user-message" "sleep" "cancel-requested?" "not" "<" "and" "while" "Range" "set-range" "increase!" "0" "n" "activity-no" "no" "2" "zero?" "keep?" "1000." "500" "/" ".3" "wait" "50" "random" "5" "+" "max" "let" "activity" "lambda" "execute:" "self" "context:" "Activity" "new")}
        {Lisp-Entry "test-styles" method #f 1872 11 1872 22 ("Bitmap-Resource" "bitmap" "'bitmap" "Image" "load-image" "IMAGE_BITMAP" "BM_SETIMAGE" "pb" "'pb" "send-message" "'stage" "Showcase" "get-stage" "find-guest" "locate" "stage" "let")}
        {Lisp-Entry "collect-extensions" method #f 1882 11 1882 29 ("string<?" "sort" "downcase" "cons" "set!" "ci=?" "test:" "member?" "not" "and" "when" "get-extension" "ext" "file" "lambda" "iterate-directory" "extensions" "let" "dir")}
        {Lisp-Entry "test-ast" method #f 1898 11 1898 19 ("get-application" "fresh-prompt" "describe" "when" "Java-AST" "parse-java" "ast" "Jazz" "File" "file" "let" "describe?")}
        {Lisp-Entry "test-java" method #f 1908 11 1908 20 ("java-definitions" "Java-AST" "parse-java" "ast" "Jazz" "File" "file" "let")}
        {Lisp-Entry "report-aliases" method #f 1919 11 1919 25 ("get-application" "fresh-prompt" "car" "key:" "<" "sort" ":console" "format" "value" "key" "bind" "info" "lambda" "for-each" "newline" "table-keys/values" "aliases" "get-aliases" "table" "let*")}}}})
"Jedi-Search"
 ({Lisp-File-Entry {File jedi "src" "jedi" "search" "Jedi-Search.jazz"} 1257476479
    {Lisp-Entry "jedi.search.Jedi-Search" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Jedi-Search" class #f 45 7 45 18 ("projects-search" "projects" "directories-search" "directories" "text-search" "fill" "layout-type:" "content" "title:" "text" "tab" "name:" "Search-Manager")}}})
"Jedi-Status"
 ({Lisp-File-Entry {File jedi "src" "jedi" "application" "Jedi-Status.jazz"} 1257476479
    {Lisp-Entry "jedi.application.Jedi-Status" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Jedi-Status" class #f 50 7 50 18 ("90" "mode" "look" "100" "locales" "250" "visible?:" "activities" "Bitmap-Resource" "icon:" "title:" "workspace" "on-context-menu" "context-menu-handler:" "on-mouse-down" ":form" "Event-Handler" "mouse-down-handler:" "tail" "150" "process" "center" "location:" "20" "782" "Dimension" "size:" "message" "name:" "IDE-Status")
        {Lisp-Entry "host-icon" method #f 72 25 72 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 76 25 76 35 ()}
        {Lisp-Entry "install" method #f 85 20 85 27 ("update-focused-process" "nextmethod" "rest")}
        {Lisp-Entry "on-context-menu" method #f 95 20 95 35 ("nextmethod" "else" "Look-Menu" "look" "Locales-Menu" "locales" "Activities-Menu" "new" "track-popup-menu" "activities" "popup-workspaces-menu" "workspace" "self" "popup-processes-menu" "process" "case" "get-position" "acquire" "pos" "get-name" "name" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-mouse-down" method #f 111 20 111 33 ("nextmethod" "else" "Look-Menu" "look" "Locales-Menu" "new" "track-popup-menu" "locales" "get-activity-manager" "toggle-visible?" "activities" "popup-workspaces-menu" "workspace" "self" "popup-processes-menu" "process" "case" "get-position" "acquire" "pos" "get-name" "name" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "update-focused-process" method #f 127 18 127 40 ("get-title" "set-title" "Bitmap-Resource" "if" "set-icon" "get-debugger-manager" "get-focused-process" "focused" "process" "'process" "locate" "label" "let")}}
      {Lisp-Entry "popup-processes-menu" definition #f 139 13 139 33 ("Processes-Menu" "new" "track-popup-menu" "pos" "view")}
      {Lisp-Entry "Processes-Menu" class #f 143 7 143 21 ("Context-Menu")
        {Lisp-Entry "install" method #f 146 20 146 27 ("insert-processes" "nextmethod" "rest")}
        {Lisp-Entry "insert-processes" method #f 151 11 151 27 ("set-selected?" "set-enabled?" "process:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "self" "parent:" "Radio-Item" "new" "item" "icon" "get-title" "title" "let" "debugger" "lambda" "get-debugger-manager" "for-each-process" "else" "get-icon" "either" "Bitmap-Resource" "not" "cond" "focused?" "live?" "process" "process-image" "define")}
        {Lisp-Entry "on-action" method #f 169 11 169 20 ("focus-process" "process:" "get-property" "process" "get-debugger-manager" "manager" "let" "evt")}}
      {Lisp-Entry "popup-workspaces-menu" definition #f 180 13 180 34 ("Workspaces-Menu" "new" "track-popup-menu" "1" "length" ">=" "get-visible-children" "workspaces" "when" "error?:" "get-workspaces-preferences" "preferences" "let" "pos" "view")}
      {Lisp-Entry "Workspaces-Menu" class #f 188 7 188 22 ("Context-Menu")
        {Lisp-Entry "install" method #f 191 20 191 27 ("insert-workspaces" "nextmethod" "rest")}
        {Lisp-Entry "insert-workspaces" method #f 196 11 196 28 ("Separator" "is?" "if" "unless" "workspace" "lambda" "for-each" "self" "parent:" "Separator-Item" "new" "eq?" "insert-workspace" "when" "'default" "find-component" "default" "get-visible-children" "workspaces" "get-workspaces-preferences" "preferences" "selected-workspace" "selected" "let*")}
        {Lisp-Entry "insert-workspace" method #f 212 11 212 27 ("set-selected?" "when" "workspace:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "self" "parent:" "Radio-Item" "new" "item" "Bitmap-Resource" "get-icon" "icon" "get-presentation" "if" "title" "let*" "selected?" "workspace")}
        {Lisp-Entry "on-action" method #f 220 11 220 20 ("apply-preferences" "workspace:" "get-property" "workspace" "let" "evt")}}}})
"Jedi-Toolbar"
 ({Lisp-File-Entry {File jedi "src" "jedi" "application" "Jedi-Toolbar.jazz"} 1257476479
    {Lisp-Entry "jedi.application.Jedi-Toolbar" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Jedi-Toolbar" class #f 47 7 47 19 ("3" "tail-separator" "16" "command-shell" "entry" "style:" "edge" "border-type:" "19" "Point" "position:" "tail" "location:" "21" "250" "command-shell-view" "on-forward-menu" "forward-history" "forward" "1" "on-backward-menu" "pick" "body" "backward-history" "backward" "on-compare-files" "compare-files" "jedi" "compare-directories" ":preserve-domain?" "on-find" ":application" "action-handler:" "find" "redo" "undo" "on-clipboard-menu" ":form" "Event-Handler" "context-menu-handler:" "paste" "copy" "view" "cut" "0" "4" "Dimension" "size:" "print-preview" "print-layout" "print" "guest" "save" "open" "application" "Action" "action:" "Bitmap-Resource" "image-name:" "tooltip-text:" "new" "name:" "IDE-Toolbar")
        {Lisp-Entry "host-icon" method #f 91 25 91 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 95 25 95 35 ()}}}})
"Jedi-Toplevel"
 ({Lisp-File-Entry {File jedi "src" "jedi" "application" "Jedi-Toplevel.jazz"} 1257476479
    {Lisp-Entry "jedi.application.Jedi-Toplevel" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Jedi-Toplevel" class #f 45 7 45 20 ("600" "900" "Dimension" "size:" "75" "Point" "position:" "caption-base:" "IDE-Toplevel")}}})
"Login-Bindings"
 ({Lisp-File-Entry {File jedi "src" "jedi" "login" "Login-Bindings.jazz"} 1257476493
    {Lisp-Entry "jedi.login.Login-Bindings" module #f 37 18 37 43 ("Login-Tree-Actions" "Login-Text-Actions" "Login-View-Actions" "register-autoclass" "jazz")
      {Lisp-Entry "Login-Bindings" class #f 44 7 44 21 ("formatted-text" "guest" "tree" "text" "view" "name:" "Bindings")}
      {Lisp-Entry "Login-View-Actions" class #f 63 7 63 25 ("visible?:" "View-Actions")}
      {Lisp-Entry "Login-Text-Actions" class #f 79 7 79 25 ("visible?:" "Text-Actions")}
      {Lisp-Entry "Login-Tree-Actions" class #f 113 7 113 25 ("visible?:" "Tree-Actions")}}})
"Login-Dialog"
 ({Lisp-File-Entry {File jedi "src" "jedi" "login" "Login-Dialog.jazz"} 1257476494
    {Lisp-Entry "jedi.login.Login-Dialog" module #f 37 18 37 41 ("Profile-Text-View" "register-autoclass" "jazz")
      {Lisp-Entry "Login-Dialog" class #f 49 7 49 19 ("existing" "new" "on-cancel" "311" "cancel" "on-ok" ":host" "default?:" "24" "80" "182" "225" "login" "18" "144" "185" "always-use" "170" "display-images?:" "toplevel-controls?:" "176" "width:" "on-double-click" "double-click-handler:" "can-select-empty?:" "row" "selection-mode:" "15" "default-row-height:" "show-header?:" "profiles" "document" "92" "251" "64" "140" "existing-border" "body" "scroller" "bindings" "Entry-Border" "Medium" "Color" "border-color:" "1" "Rect" "border-insets:" "22" "175" "194" "bindings-border" "60" "bindings-label" "on-content-change" "content-change-handler:" "Default" "Text-Style" "default-style:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "new-profile" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "border-type:" "19" "171" "85" "196" "new-border" "visible?:" "40" "136" "new-label" "101" "59" "110" "8" "48" "0" "on-existing" "114" "existing-button" "on-new" "action-handler:" "tooltip-text:" "tooltip?:" "88" "25" "new-button" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "216" "400" "Dimension" "size:" "View")
        {Lisp-Entry "host-title" method #f 92 25 92 35 ()}
        {Lisp-Entry "finish" method #f 96 20 96 26 ("setup-existing-profiles" "setup-new-profile" "nextmethod" "rest")}
        {Lisp-Entry "setup-new-profile" method #f 102 11 102 28 ("setup-bindings" "user-name" "new-profile" "'new-profile" "locate" "set-string-content")}
        {Lisp-Entry "focus-default" method #f 107 20 107 33 ("focus-existing" "existing" "focus-new" "new" "get-active-branch-name" "case")}
        {Lisp-Entry "Bindings" definition #f 113 14 113 22 ("emacs" "jazz")}
        {Lisp-Entry "setup-bindings" method #f 118 11 118 25 ("jazz" "'jazz" "set-value" "Bindings" "set-choices" "bindings" "'bindings" "locate" "combo" "let")}
        {Lisp-Entry "setup-existing-profiles" method #f 124 11 124 34 ("new-button" "'new-button" "install-new" "else" "existing-button" "'existing-button" "set-selected?" "install-existing" "some-user-profile?" "cond" "'profile" "get-setting" "profile-name" "eq?" "get-application" "get-settings" "settings" "element" "profile" "let" "and" "always-use" "'always-use" "locate" "set-checked?" "collect-profile-info" "rank" "profiles" "receive")}
        {Lisp-Entry "validate-dialog" method #f 143 20 143 35 ("throw-cancel" "message-box" "when" "validate-profile" "message" "let")}
        {Lisp-Entry "get-modal-result" method #f 150 20 150 36 ("profile-unit" "profile-name" "get-row" "get-user-data" "profile" "not" "if" "get-single-selection" "rank" "profiles" "'profiles" "tree" "let*" "existing" "values" "profile-unit-name" "unit" "capitalize" "string->symbol" "name" "new-profile" "'new-profile" "get-string-content" "content" "new" "branch" "get-name" "case" "always-use" "'always-use" "get-checked?" "always-use?" "'bindings" "locate" "get-value" "bindings" "let")}
        {Lisp-Entry "profile-unit-name" method #f 168 11 168 28 ("downcase" "format" "name")}
        {Lisp-Entry "get-tab-stops" method #f 177 20 177 33 ("existing" "new" "branch" "get-name" "case")}
        {Lisp-Entry "on-new" method #f 190 11 190 17 ("install-new" "evt")}
        {Lisp-Entry "on-existing" method #f 194 11 194 22 ("install-existing" "collect-profile-info" "rank" "profiles" "receive" "evt")}
        {Lisp-Entry "on-content-change" method #f 199 11 199 28 ("update-login" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 203 11 203 28 ("update-login" "evt")}
        {Lisp-Entry "on-double-click" method #f 207 11 207 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "login" "'login" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 215 20 215 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "login" "'login" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 223 20 223 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "install-new" method #f 233 11 233 22 ("update-login" "focus-new" "player" "when" "new" "'new" "locate" "set-active-branch")}
        {Lisp-Entry "focus-new" method #f 240 11 240 20 ("select-all" "acquire-focus" "new-profile" "'new-profile" "locate" "text" "let")}
        {Lisp-Entry "install-existing" method #f 246 11 246 27 ("update-login" "focus-existing" "player" "ensure-displayed" "set-single-selection" "get-visible-count" "<" "and" "when" "user-data:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "profile-title" "title" "profile" "lambda" "for-each" "remove-every-row" "0" "not-null?" "essay" "either" "'profiles" "tree" "let" "existing" "'existing" "locate" "set-active-branch" "rank" "profiles")}
        {Lisp-Entry "focus-existing" method #f 263 11 263 25 ("profiles" "'profiles" "locate" "acquire-focus")}
        {Lisp-Entry "collect-profile-info" method #f 267 11 267 31 ("values" "ci=?" "test:" "'profile" "argument/setting" "->string" "find" "rank" "profiles" "profile-title" "downcase" "1" "2" "package-repository" "eq?" "if" "cons" "profile" "package" "bind" "info" "lambda" "key:" "gather-profiles" "nu<?" "sort" "cdr" "map" "Jazz" "'Jazz" "find-repository" "jazz-repository" "let" "collect-existing-profiles" "define")}
        {Lisp-Entry "some-user-profile?" definition #f 282 15 282 33 ("gather-profiles" "package-repository" "neq?" "profile" "package" "bind" "info" "lambda" "some?" "Jazz" "'Jazz" "find-repository" "jazz-repository" "let")}
        {Lisp-Entry "update-login" method #f 295 11 295 23 ("profiles" "'profiles" "get-selection" "not-null?" "existing" "new-profile" "'new-profile" "get-string-content" "empty-string?" "not" "login" "'login" "locate" "set-enabled?" "new" "get-name" "case" "branch" "when")}
        {Lisp-Entry "validate-profile" method #f 309 11 309 27 ("else" "validate-new-profile" "new-profile" "'new-profile" "locate" "get-string-content" "profile-name" "let" "new" "branch" "get-name" "case")}
        {Lisp-Entry "validate-new-profile" method #f 318 11 318 31 ("else" "format" "User" "'User" "list" "Directory" "new" "exists?" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "cond" "profile-unit-name" "unit-name" "let" "profile-name")}
        {Lisp-Entry "Header-Color" definition #f 341 14 341 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 345 20 345 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Profile-Text-View" class #f 355 7 355 24 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 358 20 358 36 ("new-text-context-menu")}}}})
"Macro-Recorder"
 ({Lisp-File-Entry {File jedi "lib" "jazz.recorder" "src" "jazz" "recorder" "Macro-Recorder.jazz"} 1257476495
    {Lisp-Entry "jazz.recorder.Macro-Recorder" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Recording-Factory" definition #f 47 19 47 36 ("List-Factory" "new")}
      {Lisp-Entry "Registered-Recordings" definition #f 50 19 50 40 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "Active-Recording" definition #f 53 19 53 35 ()}
      {Lisp-Entry "Macro-Recorder" class #f 57 7 57 21 ("initialize" "Object")
        {Lisp-Entry "recording?" slot #f 60 8 60 18 ()}
        {Lisp-Entry "get-recording?" accessor #f 60 40 60 48 ()}
        {Lisp-Entry "playing?" slot #f 61 8 61 16 ()}
        {Lisp-Entry "get-playing?" accessor #f 61 40 61 48 ()}
        {Lisp-Entry "on-start-recording" method #f 69 11 69 29 ("List-Factory" "new" "Recording-Factory" "set!" "user-message" "recording?" "not" "when" "evt")}
        {Lisp-Entry "on-stop-recording" method #f 76 11 76 28 ("Active-Recording" "get-output" "coalesce-actions" "Recording-Factory" "set!" "user-message" "recording?" "when" "evt")}
        {Lisp-Entry "on-resume-recording" method #f 85 11 85 30 ("set!" "user-message" "recording?" "not" "when" "evt")}
        {Lisp-Entry "on-play-recording" method #f 91 11 91 28 ("error" "get-recording" "play-recording" "play-current-recording" "no:" "get-property" "no" "let" "user-message" "begin" "recording?" "not" "if" "evt")}
        {Lisp-Entry "on-output-recording" method #f 103 11 103 30 ("output-recording" "bell" "null?" "if" "Recording-Factory" "get-output" "actions" "let" "evt")}
        {Lisp-Entry "on-present-recording" method #f 110 11 110 31 ("present-recording" "bell" "null?" "if" "Recording-Factory" "get-output" "actions" "let" "evt")}
        {Lisp-Entry "on-register-recording" method #f 117 11 117 32 ("user-message" "register-recording" "Recording-Factory" "get-output" "recording" "5" "1" "between?" "assert" "initial-value:" "prefix:" "title:" "request-string" "parse-integer" "no" "let" "evt")}
        {Lisp-Entry "on-set-active-recording" method #f 125 11 125 34 ("get-recording" "read-string-element" "no" "user-message" "Active-Recording" "set!" "begin" "not" "if" "title:" "request-string" "name" "let" "evt")}
        {Lisp-Entry "coalesce-actions" method #f 138 11 138 27 ("string-append" "not" "get-property" "string" "added" "'on-insert" "get-action/method-name" "get-target-name" "eq?" "and" "if" "action/handler" "bind" "action" "for-each" "set!" "cons" "put" "content:" "self" ":string" "Event" "event" "on-insert" ":focus" "Event-Handler" "handler" "let" "when" "lambda" "coalesce" "result" "List-Factory" "new" "fact" "let*" "actions")}
        {Lisp-Entry "present-recording" method #f 163 11 163 28 ("title:" "get-output-string" "message-box" "get-action/method-name" "not" "format" "event" "action/handler" "bind" "do" "then" "first" "first?" "in" "action" "for" "loop" "car" "get-target-name" "map" "remove-duplicates" "targets" "open-output-string" "printer" "get-focus" "focus" "let*" "actions")}
        {Lisp-Entry "output-recording" method #f 179 11 179 27 ("tabulate" ":reader" "->string" "insert-string" "insert-newline" "unless" "do" "in" "action" "then" "first" "first?" "for" "loop" "insert-char" "lambda" "get-undoer" "with-atomic-undo" "bell" "Text-View" "is-not?" "if" "get-focus" "text" "let" "actions")}
        {Lisp-Entry "target-name" method #f 196 11 196 22 ("keyword->symbol" "appl" "'appl" ":application" "eq?" "if" "target")}
        {Lisp-Entry "get-target-name" method #f 211 11 211 26 ("else" "get-target-name" "Action" "typecase" "action/handler")}
        {Lisp-Entry "get-action/method-name" method #f 217 11 217 33 ("get-method-name" "else" "get-action-name" "Action" "typecase" "action/handler")}
        {Lisp-Entry "record" method #f 232 18 232 24 ("cons" "Recording-Factory" "put" ":recorder" "get-target-name" "eq?" "unless" "event" "action/handler")}
        {Lisp-Entry "register-recording" method #f 237 18 237 36 ("Registered-Recordings" "table-set!" "recording" "name")}
        {Lisp-Entry "get-recording" method #f 241 18 241 31 ("throw-cancel" "format" "message-box" "begin" "Registered-Recordings" "table-ref" "either" "name")}
        {Lisp-Entry "play-current-recording" method #f 253 18 253 40 ("get-recording" "Recording-Factory" "get-output" "play-recording" "unless" "get-application" "get-profile" "profile" "let" "Active-Recording" "not" "if")}
        {Lisp-Entry "play-recording" method #f 261 18 261 32 ("play-action" "for-each" "lambda" "get-undoer" "with-atomic-undo" "Text-View" "is?" "if" "get-focus" "focus" "set!" "begin" "unwind-protect" "playing?" "old" "let" "recording")}
        {Lisp-Entry "play-action" method #f 275 18 275 29 ("invoke" "get-focus" "target" "let" "else" "event:" "call-action" "Action" "typecase" "event" "action/handler" "bind" "action")}
        {Lisp-Entry "find-target" method #f 285 18 285 29 ("get-process" "process-alias" "target")}}}})
"Manager-Actions"
 ({Lisp-File-Entry {File jedi "src" "jedi" "designer" "Manager-Actions.jazz"} 1257476495
    {Lisp-Entry "jedi.designer.Manager-Actions" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Manager-Actions" class #f 43 7 43 22 ("Actions")}}})
"Manager-View"
 ({Lisp-File-Entry {File jedi "src" "jedi" "designer" "Manager-View.jazz"} 1257476496
    {Lisp-Entry "jedi.designer.Manager-View" module #f 37 18 37 44 ("Center-View" "register-autoclass" "jazz")
      {Lisp-Entry "Manager-View" class #f 47 7 47 19 ("card" "card-border" "416" "card-contour" "366" "230" "right" "descendant" "on-tab-press" "tab-press-handler:" "descendants" "233" "133" "descendants-border" "on-splitter-move" "move-handler:" "horz" "orientation:" "3" "left" "183" "width:" "branch" "branches" "header" "fill" "content" "flat?:" "vscroll?:" "hscroll?:" "document" "scroller" "entry" "style:" "edge" "border-type:" "130" "229" "1" "Point" "position:" "branches-border" "367" "center" "on-edit-form" "edit-form" "end-undo-group" "on-redo" "redo" "on-undo" "undo" "16" "end-open-group" "on-save" "save" "on-open" "open" "on-new" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "new" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Editor-View")
        {Lisp-Entry "host-icon" method #f 88 25 88 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-position" method #f 92 25 92 38 ("80" "100" "Point")}
        {Lisp-Entry "host-size" method #f 96 25 96 34 ("400" "650" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 100 20 100 35 ("home")}
        {Lisp-Entry "new-controller" method #f 110 11 110 25 ("self" "Manager-View-Controller" "new")}
        {Lisp-Entry "Manager-View-Controller" class #f 115 9 115 32 ("Editor-View-Controller")
          {Lisp-Entry "name-status" method #f 118 13 118 24 ("document" "editor-title")}}
        {Lisp-Entry "install" method #f 127 20 127 27 ("card" "'card" "descendants" "'descendants" "self" "branches" "'branches" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "guest-actions" method #f 139 20 139 33 ("nextmethod" "manager" "'manager" "find-actions" "cons")}
        {Lisp-Entry "size-change" method #f 149 20 149 31 ("get-height" "get-width" "Dimension" "new" "set-size" "when" "'toolbar" "locate-component" "toolbar" "let" "nextmethod" "size")}
        {Lisp-Entry "resize-center" method #f 156 29 156 42 ("card-contour" "'card-contour" "right" "'right" "0" "descendants-border" "'descendants-border" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-splitter-move" method #f 162 19 162 35 ("update-view" "card-contour" "'card-contour" "'left" "right" "-" "descendants-border" "'descendants-border" "move-figure" "0" "branches-border" "'branches-border" "locate" "size-figure" "left" "get-name" "case" "delta:" "get-property" "delta" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-new" method #f 179 11 179 17 ("new-form" "evt")}
        {Lisp-Entry "on-open" method #f 183 11 183 18 ("open-form" "evt")}
        {Lisp-Entry "on-edit-form" method #f 187 11 187 23 ("edit-form" "evt")}
        {Lisp-Entry "on-tab-press" method #f 191 20 191 32 ("get-row" "auto-select" "when" "get-single-selection" "rank" "acquire-focus" "card" "'card" "locate" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "install-current-designer" method #f 204 20 204 44 ("editor-title" "set-title" "nextmethod" "form" "component")}}
      {Lisp-Entry "Center-View" class #f 214 7 214 18 ("View")
        {Lisp-Entry "resize" method #f 217 20 217 26 ("creator" "resize-center" "nextmethod" "dv" "dh")}}}})
"Menu-Editor"
 ({Lisp-File-Entry {File jedi "src" "jedi" "designer" "Menu-Editor.jazz"} 1257476498
    {Lisp-Entry "jedi.designer.Menu-Editor" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Menu-Editor" class #f 43 7 43 18 ("View-Editor")
        {Lisp-Entry "host-title" method #f 51 25 51 35 ()}
        {Lisp-Entry "host-position" method #f 55 25 55 38 ("117" "237" "Point")}
        {Lisp-Entry "host-size" method #f 59 25 59 34 ("472" "708" "Dimension")}}}})
"Method-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Method-Doc.jazz"} 1257476499
    {Lisp-Entry "jazz.doc.doc.Method-Doc" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Method-Doc" class #f 44 7 44 17 ("initialize" "Definition-Doc")
        {Lisp-Entry "propagation" property #f 47 12 47 23 ()}
        {Lisp-Entry "get-propagation" accessor #f 47 49 47 57 ()}
        {Lisp-Entry "set-propagation" accessor #f 47 49 47 57 ()}
        {Lisp-Entry "get-class-image" method #f 55 25 55 40 ("Bitmap-Resource")}}}})
"Method-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Method-Entry.jazz"} 1257476499
    {Lisp-Entry "jazz.catalog.entry.Method-Entry" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Method-Entry" class #f 44 20 44 32 ("Definition-Entry")
        {Lisp-Entry "parameters" slot #f 47 8 47 18 ()}
        {Lisp-Entry "get-parameters" accessor #f 47 26 47 34 ()}
        {Lisp-Entry "throws" slot #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("throws~self" "parameters~self" "set!" "nextmethod" "references" "definitions" "end-column" "end-line" "column" "line" "throws" "parameters" "literal?" "type" "name" "modifiers")}
        {Lisp-Entry "print-catalog" method #f 57 20 57 33 ("references" "end-column" "end-line" "column" "line" "throws" "parameters" "type" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "present-detailed" method #f 64 20 64 36 ("name" "format" "parameters" "null?" "if")}
        {Lisp-Entry "get-image" method #f 70 20 70 29 ("Bitmap-Resource")}
        {Lisp-Entry "get-throws" method #f 79 11 79 21 ("throws")}}}})
"Module-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Module-Doc.jazz"} 1257477715
    {Lisp-Entry "jazz.doc.doc.Module-Doc" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Module-Doc" class #f 43 7 43 17 ("Doc")}}})
"Navigator-Workspace"
 ({Lisp-File-Entry {File jedi "src" "jedi" "workspace" "Navigator-Workspace.jazz"} 1257476505
    {Lisp-Entry "jedi.workspace.Navigator-Workspace" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Navigator-Workspace" class #f 46 7 46 26 ("maximized?:" "second" "Lisp-Console-Manager" "Navigation-Branches" "model-name:" "selection" "5" "Rect" "insets:" "21.500" "division:" "relative" "mode:" "horz" "orientation:" "first" "location:" "top" "status" "toolbar" "menubar" "name:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" method #f 61 20 61 32 ("navigator" "'navigator")}}}})
"New-File-Dialog"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "New-File-Dialog.jazz"} 1257477815
    {Lisp-Entry "jedi.builder.workbench.New-File-Dialog" module #f 37 18 37 56 ("Name-Text-View" "register-autoclass" "jazz")
      {Lisp-Entry "New-File-Dialog" class #f 50 7 50 22 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "80" "227" "167" "ok" "213" "editable?:" "text" "scroller" "moniker-border" "on-moniker-update" "moniker-update-handler:" "display-protocol?:" "dir" "protocol:" "24" "249" "directory" "54" "143" "directory-label" "on-content-change" "content-change-handler:" "Default" "Text-Style" "default-style:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "name-text" "hscroll?:" "19" "224" "109" "241" "name-border" "33" "111" "182" "name-label" "display-images?:" "controls?:" "toplevel-controls?:" "176" "width:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "Event-Handler" "double-click-handler:" "on-selection-change" ":form" "Selection-Handler" "selection-handler:" "tooltip-text:" "tooltip?:" "can-select-empty?:" "row" "selection-mode:" "15" "default-row-height:" "show-header?:" ":icons" "portfolio:" "kinds" "fill" "layout-type:" "content" "document" "vscroll?:" "entry" "style:" "edge" "border-type:" "137" "140" "64" "13" "kind-border" "8" "50" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "261" "500" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "directory" property #f 53 12 53 21 ()}
        {Lisp-Entry "get-directory" accessor #f 53 46 53 54 ()}
        {Lisp-Entry "set-directory" accessor #f 53 46 53 54 ()}
        {Lisp-Entry "finish" method #f 82 20 82 26 ("directory" "'directory" "set-moniker" "name-text" "'name-text" "locate" "set-string-content" "setup-kinds" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 89 20 89 33 ("kinds" "'kinds" "locate" "acquire-focus")}
        {Lisp-Entry "Kinds" definition #f 98 14 98 19 ("text" "sql" "java" "c" "lisp" "jazz" "template:" "scheme" "kind:" "name:")}
        {Lisp-Entry "setup-kinds" method #f 117 11 117 22 ("update-ok" "ensure-displayed" "0" "set-single-selection" "get-children" "child" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "'icon" "icon" "name" "'name" "get-property" "title" "let*" "father" "node" "lambda" "insert" "letrec" "remove-every-row" "Kinds" "parse-jml" "root" "name-text" "'name-text" "text" "kinds" "'kinds" "locate" "tree" "let")}
        {Lisp-Entry "host-title" method #f 143 25 143 35 ()}
        {Lisp-Entry "validate-dialog" method #f 152 20 152 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "format" "new-file" "destination" "extract-extension" "extension" "let*" "get-modal-result" "name" "directory" "template" "kind" "receive")}
        {Lisp-Entry "get-modal-result" method #f 162 20 162 36 ("name-text" "'name-text" "get-string-content" "directory" "'directory" "locate" "get-moniker" "template" "'template" "kind" "'kind" "get-property" "values" "selected-kind" "node" "let")}
        {Lisp-Entry "selected-kind" method #f 167 11 167 24 ("get-user-data" "node" "get-row" "row" "get-single-selection" "rank" "kinds" "'kinds" "locate" "tree" "let*")}
        {Lisp-Entry "get-tab-stops" method #f 180 20 180 33 ("directory" "'directory" "get-text" "name-text" "'name-text" "kinds" "'kinds" "locate" "list")}
        {Lisp-Entry "on-selection-change" method #f 192 11 192 30 ("update-ok" "evt")}
        {Lisp-Entry "on-content-change" method #f 196 11 196 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 200 11 200 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 204 11 204 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 212 20 212 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 220 20 220 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 230 11 230 20 ("name-text" "'name-text" "get-string-content" "empty-string?" "not" "directory" "'directory" "get-moniker" "kind" "'kind" "selected-kind" "get-property" "and" "ok" "'ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" method #f 234 11 234 24 ("else" "find-unit-source" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "find-pathname-unit" "unit-name" "let" "jazz" "memq?" "parse" "format" "exists?" "cond" "destination" "name" "kind")}
        {Lisp-Entry "Header-Color" definition #f 264 14 264 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 268 20 268 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 278 7 278 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 281 20 281 36 ("new-text-context-menu")}}}})
"New-Package-Dialog"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "repositories" "New-Package-Dialog.jazz"} 1257476506
    {Lisp-Entry "jedi.builder.repositories.New-Package-Dialog" module #f 37 18 37 62 ("Name-Text-View" "register-autoclass" "jazz")
      {Lisp-Entry "New-Package-Dialog" class #f 49 7 49 25 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "24" "80" "227" "167" "ok" "213" "body" "scroller" "repository" "Entry-Border" "Medium" "Color" "border-color:" "1" "Rect" "border-insets:" "22" "262" "139" "145" "repository-border" "64" "143" "repository-label" "on-content-change" "content-change-handler:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "tooltip-text:" "tooltip?:" "Default" "Text-Style" "default-style:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "name-text" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "border-type:" "19" "258" "109" "147" "name-border" "33" "111" "82" "name-label" "8" "50" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "261" "500" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "repository" property #f 52 12 52 22 ()}
        {Lisp-Entry "get-repository" accessor #f 52 47 52 55 ()}
        {Lisp-Entry "set-repository" accessor #f 52 47 52 55 ()}
        {Lisp-Entry "finish" method #f 77 20 77 26 ("setup-repositories" "setup-name" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 83 20 83 33 ("name-text" "'name-text" "locate" "acquire-focus")}
        {Lisp-Entry "setup-name" method #f 92 11 92 21 ("name-text" "'name-text" "locate" "set-string-content")}
        {Lisp-Entry "setup-repositories" method #f 96 11 96 29 ("car" "User" "'User" "find-repository" "either" "set-value" "repository-name" "->string" "list" "lambda" "map" "set-choices" "get-repositories" "repositories" "repository" "'repository" "locate" "combo" "let")}
        {Lisp-Entry "host-title" method #f 112 25 112 35 ()}
        {Lisp-Entry "validate-dialog" method #f 121 20 121 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "new-directory" "destination" "repository-library-directory" "tokenise-filename" "Directory" "new" "directory" "let*" "get-modal-result" "name" "repository" "receive")}
        {Lisp-Entry "get-modal-result" method #f 131 20 131 36 ("name-text" "'name-text" "get-string-content" "repository" "'repository" "locate" "get-value" "values")}
        {Lisp-Entry "get-tab-stops" method #f 140 20 140 33 ("repository" "'repository" "get-body" "name-text" "'name-text" "locate" "list")}
        {Lisp-Entry "on-selection-change" method #f 151 11 151 30 ("update-ok" "evt")}
        {Lisp-Entry "on-content-change" method #f 155 11 155 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 159 11 159 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 163 11 163 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 171 20 171 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 179 20 179 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 189 11 189 20 ("name-text" "'name-text" "get-string-content" "empty-string?" "not" "ok" "'ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" method #f 193 11 193 24 ("else" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "parse" "format" "exists?" "cond" "destination" "name")}
        {Lisp-Entry "Header-Color" definition #f 215 14 215 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 219 20 219 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 229 7 229 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 232 20 232 36 ("new-text-context-menu")}}}})
"New-Project-Dialog"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "New-Project-Dialog.jazz"} 1257476506
    {Lisp-Entry "jedi.builder.workbench.New-Project-Dialog" module #f 37 18 37 59 ("Name-Text-View" "register-autoclass" "jazz")
      {Lisp-Entry "New-Project-Dialog" class #f 49 7 49 25 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "24" "80" "227" "167" "ok" "213" "body" "scroller" "repository" "Entry-Border" "Medium" "Color" "border-color:" "1" "Rect" "border-insets:" "22" "222" "139" "245" "repository-border" "143" "repository-label" "on-content-change" "content-change-handler:" "Default" "Text-Style" "default-style:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "name-text" "hscroll?:" "19" "218" "109" "247" "name-border" "33" "111" "182" "name-label" "display-images?:" "controls?:" "toplevel-controls?:" "176" "width:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "Event-Handler" "double-click-handler:" "on-selection-change" ":form" "Selection-Handler" "selection-handler:" "tooltip-text:" "tooltip?:" "can-select-empty?:" "row" "selection-mode:" "15" "default-row-height:" "show-header?:" ":icons" "portfolio:" "kinds" "fill" "layout-type:" "content" "document" "vscroll?:" "entry" "style:" "edge" "border-type:" "137" "140" "64" "13" "kind-border" "8" "50" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "261" "500" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "repository" property #f 52 12 52 22 ()}
        {Lisp-Entry "get-repository" accessor #f 52 47 52 55 ()}
        {Lisp-Entry "set-repository" accessor #f 52 47 52 55 ()}
        {Lisp-Entry "finish" method #f 82 20 82 26 ("setup-repositories" "setup-name" "setup-kinds" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 89 20 89 33 ("kinds" "'kinds" "locate" "acquire-focus")}
        {Lisp-Entry "Kinds" definition #f 98 14 98 19 ("template:" "project" "kind:" "name:")}
        {Lisp-Entry "setup-kinds" method #f 110 11 110 22 ("update-ok" "ensure-displayed" "0" "set-single-selection" "get-children" "child" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "'icon" "icon" "name" "'name" "get-property" "title" "let*" "father" "node" "lambda" "insert" "letrec" "remove-every-row" "Kinds" "parse-jml" "root" "name-text" "'name-text" "text" "kinds" "'kinds" "locate" "tree" "let")}
        {Lisp-Entry "setup-name" method #f 131 11 131 21 ("name-text" "'name-text" "locate" "set-string-content")}
        {Lisp-Entry "setup-repositories" method #f 135 11 135 29 ("car" "User" "'User" "find-repository" "either" "set-value" "repository-name" "->string" "list" "lambda" "map" "set-choices" "get-repositories" "repositories" "repository" "'repository" "locate" "combo" "let")}
        {Lisp-Entry "host-title" method #f 150 25 150 35 ()}
        {Lisp-Entry "validate-dialog" method #f 159 20 159 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "new-directory" "destination" "repository-library-directory" "tokenise-filename" "Directory" "new" "directory" "let*" "get-modal-result" "name" "repository" "template" "kind" "receive")}
        {Lisp-Entry "get-modal-result" method #f 169 20 169 36 ("name-text" "'name-text" "get-string-content" "repository" "'repository" "locate" "get-value" "template" "'template" "kind" "'kind" "get-property" "values" "selected-kind" "node" "let")}
        {Lisp-Entry "selected-kind" method #f 174 11 174 24 ("get-user-data" "node" "get-row" "row" "get-single-selection" "rank" "kinds" "'kinds" "locate" "tree" "let*")}
        {Lisp-Entry "get-tab-stops" method #f 187 20 187 33 ("repository" "'repository" "get-body" "name-text" "'name-text" "kinds" "'kinds" "locate" "list")}
        {Lisp-Entry "on-selection-change" method #f 199 11 199 30 ("update-ok" "evt")}
        {Lisp-Entry "on-content-change" method #f 203 11 203 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 207 11 207 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 211 11 211 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 219 20 219 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 227 20 227 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 237 11 237 20 ("name-text" "'name-text" "get-string-content" "empty-string?" "not" "kind" "'kind" "selected-kind" "get-property" "and" "ok" "'ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" method #f 241 11 241 24 ("else" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "parse" "format" "exists?" "cond" "destination" "name" "kind")}
        {Lisp-Entry "Header-Color" definition #f 263 14 263 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 267 20 267 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 277 7 277 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 280 20 280 36 ("new-text-context-menu")}}}})
"New-Repository-Dialog"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "repositories" "New-Repository-Dialog.jazz"} 1257476507
    {Lisp-Entry "jedi.builder.repositories.New-Repository-Dialog" module #f 37 18 37 65 ("Name-Text-View" "register-autoclass" "jazz")
      {Lisp-Entry "New-Repository-Dialog" class #f 48 7 48 28 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "80" "227" "167" "ok" "213" "name-text" "149" "name-border" "151" "name-label" "on-content-change" "content-change-handler:" "Default" "Text-Style" "default-style:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "dirname-text" "fill" "layout-type:" "vscroll?:" "hscroll?:" "edge" "border-type:" "19" "264" "125" "dirname-border" "127" "dirname-label" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "tooltip-text:" "tooltip?:" "focus-selects-all?:" "show-unfocused-selection?:" "editable?:" "text" "content" "scroller" "entry" "style:" "moniker-border" "on-moniker-update" ":form" "Event-Handler" "moniker-update-handler:" "display-protocol?:" "dir" "protocol:" "24" "289" "100" "141" "directory" "54" "103" "82" "directory-label" "8" "50" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "261" "500" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "directory" property #f 51 12 51 21 ()}
        {Lisp-Entry "get-directory" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "set-directory" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "finish" method #f 80 20 80 26 ("dirname-text" "'dirname-text" "set-string-content" "directory" "'directory" "locate" "set-moniker" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" method #f 86 20 86 33 ("dirname-text" "'dirname-text" "locate" "acquire-focus")}
        {Lisp-Entry "host-title" method #f 95 25 95 35 ()}
        {Lisp-Entry "validate-dialog" method #f 104 20 104 35 ("throw-cancel" "message-box" "when" "validate-name" "message" "empty-string?" "if" "effective-name" "new-directory" "destination" "let*" "get-modal-result" "name" "dirname" "directory" "receive")}
        {Lisp-Entry "get-modal-result" method #f 114 20 114 36 ("name-text" "'name-text" "dirname-text" "'dirname-text" "get-string-content" "directory" "'directory" "locate" "get-moniker" "values")}
        {Lisp-Entry "get-tab-stops" method #f 123 20 123 33 ("name-text" "'name-text" "dirname-text" "'dirname-text" "directory" "'directory" "locate" "get-text" "list")}
        {Lisp-Entry "on-content-change" method #f 135 11 135 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" method #f 139 11 139 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" method #f 143 11 143 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" method #f 151 20 151 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" method #f 159 20 159 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" method #f 169 11 169 20 ("dirname-text" "'dirname-text" "get-string-content" "empty-string?" "not" "directory" "'directory" "get-moniker" "and" "ok" "'ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" method #f 173 11 173 24 ("else" "memv?" "numeric?" "char" "lambda" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "string->symbol" "find-repository" "parse" "format" "exists?" "cond" "dirname" "destination" "name")}
        {Lisp-Entry "Header-Color" definition #f 207 14 207 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" method #f 211 20 211 24 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" class #f 221 7 221 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" method #f 224 20 224 36 ("new-text-context-menu")}}}})
"Outline-Showcase"
 ({Lisp-File-Entry {File jedi "src" "jedi" "showcase" "Outline-Showcase.jazz"} 1257476509
    {Lisp-Entry "jedi.showcase.Outline-Showcase" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Outline-Showcase" class #f 43 7 43 23 ("View")}
      {Lisp-Entry "Outline-Showcase" class #f 49 7 49 23 ("center" "justification:" "80" "50" "width:" ":icons" "portfolio:" "row" "selection-mode:" "info" "419" "518" "info-border" "415" "selection" "335" "visible-height" "16" "170" "315" "visible-count" "on-update-information" "260" "update-information" "on-remove-row" "190" "remove-rows" "on-add-row" "add-row" "on-collapse-row" "100" "collapse-row" "on-expand-row" "24" "160" "70" "expand-row" "on-setting" ":form" "Event-Handler" "action-handler:" "checked?:" "18" "120" "10" "340" "title:" "row-spacing" "0" "row-spacing:" "outline" "fill" "layout-type:" "content" "vscroll?:" "edge" "border-type:" "457" "319" "6" "3" "Point" "position:" "outline-border" "name:" "466" "940" "Dimension" "size:" "View")
        {Lisp-Entry "host-title" method #f 86 16 86 26 ()}
        {Lisp-Entry "host-position" method #f 90 16 90 29 ("60" "39" "Point")}
        {Lisp-Entry "host-size" method #f 94 16 94 25 ("466" "940" "Dimension")}
        {Lisp-Entry "install" method #f 103 11 103 18 ("update-information" "setup-outline" "nextmethod" "rest")}
        {Lisp-Entry "setup-outline" method #f 114 11 114 24 ("10" "0" "naturals" "5" "=" "when" "n" "lambda" "for-each" "node" "add-row" "'outline" "locate" "outline" "let")}
        {Lisp-Entry "add-row" method #f 130 11 130 18 ("random-color" "background:" "random-height" "row-height:" "father:" "Color-Row" "class:" "self" "context:" "add-row" "father" "outline")}
        {Lisp-Entry "random-height" method #f 134 11 134 24 ("60" "random" "10" "+")}
        {Lisp-Entry "random-color" method #f 138 11 138 23 ("Dark-Purple" "Dark-Blue" "Dark-Green" "Dark-Orange" "Dark-Red" "name:" "Color" "random-element")}
        {Lisp-Entry "resize" method #f 152 11 152 17 ("info-border" "'info-border" "0" "outline-border" "'outline-border" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-setting" method #f 158 11 158 21 ("0" "1" "get-checked?" "if" "set-row-spacing" "row-spacing" "get-name" "case" "'outline" "locate" "outline" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-expand-row" method #f 165 11 165 24 ("update-information" "get-row" "expand" "when" "get-selection" "row" "'outline" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "on-collapse-row" method #f 173 11 173 26 ("update-information" "get-row" "collapse" "when" "get-selection" "row" "'outline" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "Mark" definition #f 181 14 181 18 ()}
        {Lisp-Entry "on-add-row" method #f 185 11 185 21 ("update-information" "random-color" "background:" "random-height" "row-height:" "collapsed" "'collapsed" "state:" "father:" "add-row" "get-row" "essay" "Mark" "if" "row" "get-shift?" "use-mark?" "get-selection" "sel" "'outline" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "on-remove-row" method #f 194 11 194 24 ("update-information" "remove-row" "get-row" "essay" "Mark" "if" "row" "get-shift?" "use-mark?" "get-selection" "sel" "'outline" "locate" "outline" "let*" "evt")}
        {Lisp-Entry "on-update-information" method #f 203 11 203 32 ("update-information" "evt")}
        {Lisp-Entry "update-information" method #f 212 11 212 29 ("display-outline" "update-fields")}
        {Lisp-Entry "update-fields" method #f 217 11 217 24 ("get-selection" "selection" "'selection" "get-visible-height" "visible-height" "'visible-height" "get-visible-count" "format" "visible-count" "'visible-count" "set-title" "'outline" "locate" "outline" "let")}
        {Lisp-Entry "display-outline" method #f 225 11 225 26 ("get-root-row" "remove-every-row" "with-update-locked" "subrow" "get-sons" "iterate" "display-row" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "subdest" "let" "dest" "row" "lambda" "proc" "'info" "info" "'outline" "locate" "outline" "letrec")}
        {Lisp-Entry "display-row" method #f 242 11 242 22 ("list" "get-next" "c5" "get-previous" "c4" "c3" "get-state" "c2" "get-level" "Tree-Label" "c1" "get-image" "image:" "get-title" "title:" "get-background" "color:" "Tree-Node" "new" "c0" "Dark-Blue" "Dark-Red" "name:" "Color" "if" "color" "get-visible?" "visible?" "row-rank" "essay" "lambda" "rank" "get-children" "car" "node" "let*" "row" "outline")}
        {Lisp-Entry "row-rank" method #f 256 11 256 19 ("error" "get-root-row" "get-sons" "iterate" "increase!" "continuation-return" "eq?" "if" "subrow" "proc" "-1" "rank" "letrec" "return" "lambda" "continuation-capture" "row" "outline")}
        {Lisp-Entry "Color-Row" class #f 275 9 275 18 ("initialize" "Outline-Row")
          {Lisp-Entry "background" property #f 278 14 278 24 ()}
          {Lisp-Entry "get-background" accessor #f 278 49 278 57 ()}
          {Lisp-Entry "set-background" accessor #f 278 49 278 57 ()}
          {Lisp-Entry "draw-background" method #f 281 13 281 28 ("fill-rect" "get-bounds" "bounds" "let" "background" "when" "context" "surface")}}}}})
"Package"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "repositories" "Package.jazz"} 1257476512
    {Lisp-Entry "jedi.builder.repositories.Package" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Package" class #f 45 7 45 14 ("initialize" "Component")
        {Lisp-Entry "title" property #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor #f 48 42 48 50 ()}
        {Lisp-Entry "set-title" accessor #f 48 42 48 50 ()}
        {Lisp-Entry "print" method #f 51 20 51 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-class-image" method #f 63 25 63 40 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" method #f 67 25 67 46 ("nextmethod" "else" "title" "field-name" "case" "property")}
        {Lisp-Entry "presentation-property?" method #f 73 20 73 42 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" method #f 77 20 77 36 ("self" "class-of" "type-name" "->string" "title" "either")}
        {Lisp-Entry "set-presentation" method #f 81 20 81 36 ("title:" "self" "set-property" "presentation" "designer")}
        {Lisp-Entry "addable-class?" method #f 85 20 85 34 ("Project-Group" "Project-File" "subtype?" "or" "class")}
        {Lisp-Entry "get-addable-classes" method #f 90 20 90 39 ("Project-Group" "list")}
        {Lisp-Entry "get-row-instance" method #f 99 20 99 36 ("nextmethod" "else" "nullable?:" "String-Row" "new" "title" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" method #f 105 20 105 46 ("title")}}}})
"Package-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Package-Doc.jazz"} 1257476511
    {Lisp-Entry "jazz.doc.doc.Package-Doc" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Package-Doc" class #f 44 7 44 18 ("Element-Doc")
        {Lisp-Entry "get-class-image" method #f 52 25 52 40 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" method #f 56 20 56 46 ("extends" "package-name")}}}})
"Package-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Package-Entry.jazz"} 1257476512
    {Lisp-Entry "jazz.catalog.entry.Package-Entry" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Package-Entry" class #f 44 20 44 33 ("Hierarchical-Entry")
        {Lisp-Entry "present-name" method #f 47 20 47 32 ("qualified" "join")}
        {Lisp-Entry "get-image" method #f 51 20 51 29 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" method #f 60 20 60 34 ("references" "update-index" "key" "lambda" "for-each" "references-index" "definitions-index")}}}})
"Presenter-Workspace"
 ({Lisp-File-Entry {File jedi "src" "jedi" "workspace" "Presenter-Workspace.jazz"} 1257476530
    {Lisp-Entry "jedi.workspace.Presenter-Workspace" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Presenter-Workspace" class #f 46 7 46 26 ("maximized?:" "Text-Palette" "Containment-Editor" "Alignment-Editor" "Designer-Manager" "59" "Toolbox-Manager" "35" "Output-Log" "Search-Results" "Lisp-Console-Manager" "Presentation-Properties" "selection" "39" "245" "Presentation-Branches" "Presentation-Components" "model-name:" "second" "-38" "vert" "5" "Rect" "insets:" "18" "division:" "relative" "mode:" "horz" "orientation:" "first" "location:" "top" "status" "toolbar" "menubar" "name:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" method #f 78 20 78 32 ("presenter" "'presenter")}}}})
"Primitive-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Primitive-Doc.jazz"} 1257476532
    {Lisp-Entry "jazz.doc.doc.Primitive-Doc" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Primitive-Doc" class #f 44 7 44 20 ("Definition-Doc")
        {Lisp-Entry "get-class-image" method #f 52 25 52 40 ("Bitmap-Resource")}}}})
"Project"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "project" "Project.jazz"} 1257476542
    {Lisp-Entry "jedi.builder.project.Project" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Project" class #f 49 7 49 14 ("build?:" "nil" "initialize" "Project-File")
        {Lisp-Entry "title" property #f 52 12 52 17 ()}
        {Lisp-Entry "get-title" accessor #f 52 56 52 64 ()}
        {Lisp-Entry "set-title" accessor #f 52 56 52 64 ()}
        {Lisp-Entry "icon" property #f 53 12 53 16 ()}
        {Lisp-Entry "get-icon" accessor #f 53 56 53 64 ()}
        {Lisp-Entry "set-icon" accessor #f 53 56 53 64 ()}
        {Lisp-Entry "owner" property #f 54 12 54 17 ()}
        {Lisp-Entry "get-owner" accessor #f 54 56 54 64 ()}
        {Lisp-Entry "set-owner" accessor #f 54 56 54 64 ()}
        {Lisp-Entry "copyright" property #f 55 12 55 21 ()}
        {Lisp-Entry "get-copyright" accessor #f 55 56 55 64 ()}
        {Lisp-Entry "set-copyright" accessor #f 55 56 55 64 ()}
        {Lisp-Entry "version" property #f 56 12 56 19 ()}
        {Lisp-Entry "get-version" accessor #f 56 56 56 64 ()}
        {Lisp-Entry "set-version" accessor #f 56 56 56 64 ()}
        {Lisp-Entry "include-extensions" property #f 57 12 57 30 ()}
        {Lisp-Entry "get-include-extensions" accessor #f 57 56 57 64 ()}
        {Lisp-Entry "set-include-extensions" accessor #f 57 56 57 64 ()}
        {Lisp-Entry "documentation" property #f 58 12 58 25 ()}
        {Lisp-Entry "get-documentation" accessor #f 58 56 58 64 ()}
        {Lisp-Entry "set-documentation" accessor #f 58 56 58 64 ()}
        {Lisp-Entry "editable?" property #f 59 12 59 21 ()}
        {Lisp-Entry "get-editable?" accessor #f 59 56 59 64 ()}
        {Lisp-Entry "set-editable?" accessor #f 59 56 59 64 ()}
        {Lisp-Entry "active?" property #f 60 12 60 19 ()}
        {Lisp-Entry "get-active?" accessor #f 60 56 60 64 ()}
        {Lisp-Entry "set-active?" accessor #f 60 56 60 64 ()}
        {Lisp-Entry "catalog?" property #f 61 12 61 20 ()}
        {Lisp-Entry "get-catalog?" accessor #f 61 56 61 64 ()}
        {Lisp-Entry "set-catalog?" accessor #f 61 56 61 64 ()}
        {Lisp-Entry "catalog-extensions" property #f 62 12 62 30 ()}
        {Lisp-Entry "get-catalog-extensions" accessor #f 62 56 62 64 ()}
        {Lisp-Entry "set-catalog-extensions" accessor #f 62 56 62 64 ()}
        {Lisp-Entry "catalog-heuristics" property #f 63 12 63 30 ()}
        {Lisp-Entry "get-catalog-heuristics" accessor #f 63 56 63 64 ()}
        {Lisp-Entry "set-catalog-heuristics" accessor #f 63 56 63 64 ()}
        {Lisp-Entry "unit-name" property #f 64 12 64 21 ()}
        {Lisp-Entry "get-unit-name" accessor #f 64 56 64 64 ()}
        {Lisp-Entry "set-unit-name" accessor #f 64 56 64 64 ()}
        {Lisp-Entry "workbench" slot #f 67 8 67 17 ()}
        {Lisp-Entry "get-workbench" accessor #f 67 28 67 36 ()}
        {Lisp-Entry "set-workbench" accessor #f 67 28 67 36 ()}
        {Lisp-Entry "parent-project" slot #f 68 8 68 22 ()}
        {Lisp-Entry "get-parent-project" accessor #f 68 47 68 55 ()}
        {Lisp-Entry "set-parent-project" accessor #f 68 47 68 55 ()}
        {Lisp-Entry "catalog" slot #f 69 8 69 15 ()}
        {Lisp-Entry "get-catalog" accessor #f 69 47 69 55 ()}
        {Lisp-Entry "set-catalog" accessor #f 69 47 69 55 ()}
        {Lisp-Entry "initer-property?" method #f 76 20 76 36 ("workbench" "'workbench" "eq?" "nextmethod" "or" "name")}
        {Lisp-Entry "default-name" method #f 81 20 81 32 ("self" "class-of" "type-name" "identifier-name")}
        {Lisp-Entry "prepare" method #f 85 20 85 27 ("workbench" "set!" "when" "workbench:" "getf" "arg" "let" "nextmethod" "rest")}
        {Lisp-Entry "print" method #f 92 20 92 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "project-title" method #f 104 26 104 39 ("self" "class-of" "type-name" "->string" "title" "either")}
        {Lisp-Entry "concrete?" method #f 113 26 113 35 ()}
        {Lisp-Entry "get-effective-source" method #f 123 11 123 31 ("name" "get-manifest-source")}
        {Lisp-Entry "require-catalog" method #f 132 20 132 35 ("create/register-catalog" "set!" "catalog" "unless")}
        {Lisp-Entry "create/register-catalog" method #f 138 11 138 34 ("get-application" "get-cataloguer" "add-catalog" "create-catalog" "catalog" "let")}
        {Lisp-Entry "create-catalog" method #f 144 11 144 25 ("catalog-output" "catalog-name" "self" "Project-Catalog" "new")}
        {Lisp-Entry "catalog-name" method #f 148 29 148 41 ("name" "string->symbol" "title" "if")}
        {Lisp-Entry "catalog-output" method #f 154 29 154 43 ("catalog-name" "format" "Profile" "'Profile" "list" "File" "new")}
        {Lisp-Entry "get-effective-editable?" method #f 163 26 163 49 ("parent-project" "get-effective-editable?" "editable?" "nil?" "if")}
        {Lisp-Entry "for-each-file" method #f 174 18 174 31 ("is?" "when" "level" "descendant" "lambda" "for-each-descendant" "Project-File" "type" "proc")}
        {Lisp-Entry "collect-files" method #f 181 18 181 31 ("get-output" "put" "is?" "when" "file" "lambda" "for-each-file" "List-Factory" "new" "fact" "let" "Project-File" "type")}
        {Lisp-Entry "fold-files" method #f 190 18 190 28 ("self" "get-children" "c" "for-each" ":skip" "eq?" "is?" "if" "ps" "let" "s" "f" "x" "lambda" "fold" "letrec" "Project-File" "type" "seed" "proc")}
        {Lisp-Entry "add-to-index" method #f 210 20 210 32 ("self" "workbench" "add-to-project" "find-workbench" "set-workbench" "component" "name")}
        {Lisp-Entry "remove-from-index" method #f 215 20 215 37 ("self" "workbench" "remove-from-project" "component" "name")}
        {Lisp-Entry "find-workbench" method #f 219 29 219 43 ("find-ascendant" "Workbench" "is?" "if" "workbench" "creator" "either" "project" "let")}
        {Lisp-Entry "project-name" method #f 231 26 231 38 ()}
        {Lisp-Entry "project-test" method #f 240 26 240 38 ("message-box" "rest")}
        {Lisp-Entry "project-run" method #f 249 26 249 37 ("message-box" "rest")}
        {Lisp-Entry "run-arguments" method #f 253 26 253 39 ()}
        {Lisp-Entry "project-debug" method #f 262 26 262 39 ("message-box" "rest")}
        {Lisp-Entry "debug-arguments" method #f 266 26 266 41 ()}
        {Lisp-Entry "project-build" method #f 275 26 275 39 ("message-box")}
        {Lisp-Entry "project-clean" method #f 284 26 284 39 ("message-box")}
        {Lisp-Entry "get-class-image" method #f 293 25 293 40 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" method #f 297 25 297 46 ("nextmethod" "else" "catalog-heuristics" "catalog-extensions" "catalog?" "editable?" "active?" "documentation" "include-extensions" "version" "copyright" "owner" "icon" "title" "field-name" "case" "property")}
        {Lisp-Entry "presentation-property?" method #f 314 20 314 42 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" method #f 318 20 318 36 ("self" "class-of" "type-name" "->string" "title" "either")}
        {Lisp-Entry "set-presentation" method #f 322 20 322 36 ("title:" "self" "set-property" "presentation" "designer")}
        {Lisp-Entry "addable-class?" method #f 326 20 326 34 ("Project-Group" "Project-File" "subtype?" "or" "class")}
        {Lisp-Entry "get-addable-classes" method #f 331 20 331 39 ("Project-Group" "list")}
        {Lisp-Entry "get-row-instance" method #f 340 20 340 36 ("nextmethod" "else" "Boolean-Row" "active?" "catalog?" "File-Row" "documentation" "Value-Row" "catalog-heuristics" "catalog-extensions" "include-extensions" "nullable?:" "String-Row" "new" "title" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" method #f 349 20 349 46 ("catalog-heuristics" "catalog-extensions" "catalog?" "active?" "documentation" "include-extensions" "version" "copyright" "owner" "icon" "title")}}}})
"Project-Catalog"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "project" "Project-Catalog.jazz"} 1257476540
    {Lisp-Entry "jedi.builder.project.Project-Catalog" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Project-Catalog" class #f 45 7 45 22 ("Filing-Catalog")
        {Lisp-Entry "project" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-project" accessor #f 48 23 48 31 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("project~self" "set!" "nextmethod" "apply" "rest" "project")}
        {Lisp-Entry "get-extensions" method #f 61 20 61 34 ("project" "get-catalog-extensions" "effective-catalog-extensions")}
        {Lisp-Entry "get-heuristics" method #f 65 20 65 34 ("project" "get-catalog-heuristics")}
        {Lisp-Entry "scan-directories" method #f 74 20 74 36 ("enqueue" "scan-file" "entry" "ci=?" "test:" "member?" "not" "or" "get-extension" "ext" "when" "get-effective-source" "file" ":skip" "get-catalog?" "Project" "is?" "neq?" "and" "if" "seed" "project-file" "lambda" "project" "fold-files" "get-extensions" "extensions" "let" "queue")}}}})
"Project-Designer"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "project" "Project-Designer.jazz"} 1257476541
    {Lisp-Entry "jedi.builder.project.Project-Designer" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Project-Designer" class #f 43 7 43 23 ("Designer")
        {Lisp-Entry "print" method #f 46 20 46 25 ("reference" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Project-Directory"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "file" "Project-Directory.jazz"} 1257476541
    {Lisp-Entry "jedi.builder.file.Project-Directory" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Project-Directory" class #f 44 7 44 24 ("initialize" "Project-Group")
        {Lisp-Entry "directory" property #f 47 12 47 21 ()}
        {Lisp-Entry "get-directory" accessor #f 47 46 47 54 ()}
        {Lisp-Entry "set-directory" accessor #f 47 46 47 54 ()}
        {Lisp-Entry "property-presentation" method #f 55 25 55 46 ("nextmethod" "else" "directory" "field-name" "case" "property")}
        {Lisp-Entry "get-presentation" method #f 61 20 61 36 ("get-name" "directory" "if")}
        {Lisp-Entry "can-rename-component?" method #f 67 20 67 41 ()}
        {Lisp-Entry "get-row-instance" method #f 71 20 71 36 ("nextmethod" "else" "Directory-Row" "new" "directory" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" method #f 77 20 77 46 ("directory")}}}})
"Project-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Project-Doc.jazz"} 1257476541
    {Lisp-Entry "jazz.doc.doc.Project-Doc" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Project-Doc" class #f 43 7 43 18 ("Doc")}}})
"Project-File"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "file" "Project-File.jazz"} 1257476541
    {Lisp-Entry "jedi.builder.file.Project-File" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Project-File" class #f 45 7 45 19 ("initialize" "Component")
        {Lisp-Entry "source" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-source" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-source" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "build?" property #f 49 12 49 18 ()}
        {Lisp-Entry "get-build?" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "set-build?" accessor #f 49 43 49 51 ()}
        {Lisp-Entry "project" slot #f 52 8 52 15 ()}
        {Lisp-Entry "get-project" accessor #f 52 40 52 48 ()}
        {Lisp-Entry "set-project" accessor #f 52 40 52 48 ()}
        {Lisp-Entry "get-effective-source" method #f 60 26 60 46 ("source")}
        {Lisp-Entry "require-catalog" method #f 69 26 69 41 ("project" "require-catalog")}
        {Lisp-Entry "preprocess" method #f 78 26 78 36 ("rest" "output" "log" "reporter" "project")}
        {Lisp-Entry "build" method #f 82 26 82 31 ("rest" "output" "log" "reporter" "project")}
        {Lisp-Entry "get-class-image" method #f 91 25 91 40 ("Bitmap-Resource")}
        {Lisp-Entry "presentation-property?" method #f 95 20 95 42 ("source" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" method #f 99 20 99 36 ("get-name" "source" "if")}
        {Lisp-Entry "can-cut-component?" method #f 106 20 106 38 ()}
        {Lisp-Entry "can-copy-component?" method #f 111 20 111 39 ()}
        {Lisp-Entry "can-paste-component?" method #f 116 20 116 40 ()}
        {Lisp-Entry "can-move-component?" method #f 121 20 121 39 ()}
        {Lisp-Entry "get-categorized-properties" method #f 125 20 125 46 ("build?" "source")}
        {Lisp-Entry "get-row-instance" method #f 129 20 129 36 ("nextmethod" "else" "Boolean-Row" "build?" "File-Row" "new" "source" "field-name" "case" "property")}}}})
"Project-Group"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "file" "Project-Group.jazz"} 1257476542
    {Lisp-Entry "jedi.builder.file.Project-Group" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Project-Group" class #f 44 7 44 20 ("Group")
        {Lisp-Entry "presentation->name" method #f 52 25 52 43 ("presentation")}
        {Lisp-Entry "name->presentation" method #f 56 25 56 43 ("name")}
        {Lisp-Entry "can-cut-component?" method #f 61 20 61 38 ()}
        {Lisp-Entry "can-copy-component?" method #f 66 20 66 39 ()}
        {Lisp-Entry "can-paste-component?" method #f 71 20 71 40 ()}
        {Lisp-Entry "can-move-component?" method #f 76 20 76 39 ()}
        {Lisp-Entry "sort-components" method #f 80 20 80 35 ("get-presentation" "1" "0" "Project-Group" "is?" "if" "cons" "component" "lambda" "key:" "nu<?" "sort" "components" "predicate")}
        {Lisp-Entry "addable-class?" method #f 86 20 86 34 ("Project-Group" "Project-File" "subtype?" "or" "class")}
        {Lisp-Entry "get-addable-classes" method #f 91 20 91 39 ("Project-Group" "list")}}}})
"Project-Selector"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Project-Selector.jazz"} 1257476542
    {Lisp-Entry "jedi.builder.workbench.Project-Selector" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Project-Selector" class #f 47 7 47 23 ("initialize" "5" "on-cancel" "cancel" "3" "on-ok" ":host" "default?:" "enabled?:" "24" "80" "tail" "ok" "south" "36" "buttonbar" "toplevel-controls?:" "235" "width:" "title:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "Selection-Handler" "selection-handler:" "name" "filled-column:" "content" "fill" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "center" "content-border" "on-toggle-hierarchical" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "hierarchical" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "toolbar" "name:" "border" "layout-type:" "300" "500" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "hierarchical?" slot #f 66 8 66 21 ()}
        {Lisp-Entry "finish" method #f 69 20 69 26 ("update" "nextmethod" "rest")}
        {Lisp-Entry "host-title" method #f 74 25 74 35 ()}
        {Lisp-Entry "install-in-host" method #f 78 20 78 35 ("select-active" "host")}
        {Lisp-Entry "focus-default" method #f 82 20 82 33 ("get-tree" "acquire-focus")}
        {Lisp-Entry "get-tree" method #f 91 11 91 19 ("content" "'content" "locate")}
        {Lisp-Entry "on-toggle-hierarchical" method #f 100 11 100 33 ("update-buttons" "data" "'data" "use:" "update" "with-preserved-selection" "get-tree" "get-node-column" "set-toplevel-controls?" "not" "hierarchical?" "set!" "evt")}
        {Lisp-Entry "on-selection-change" method #f 109 11 109 30 ("update-buttons" "evt")}
        {Lisp-Entry "default-action" method #f 113 11 113 25 ("get-modal-result" "get-host" "end-modal" "ok-enabled?" "when")}
        {Lisp-Entry "update" method #f 123 11 123 17 ("update-buttons" "update-content")}
        {Lisp-Entry "update-content" method #f 128 11 128 25 ("update-flat" "update-hierarchical" "hierarchical?" "if" "remove-every-row" "lambda" "with-update-locked" "get-tree" "tree" "let")}
        {Lisp-Entry "update-hierarchical" method #f 138 11 138 30 ("collect-projects" "for-each" "not" "if" "get-parent" "parent" "project" "insert" "table-set!" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "get-component-image" "image" "get-presentation" "title" "table-ref" "either" "father" "file" "add" "define" "eq?" "test:" "make-table" "rows" "get-workbench" "workbench" "let" "tree")}
        {Lisp-Entry "update-flat" method #f 158 11 158 22 ("key:" "collect-projects" "string<?" "sort" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "get-component-image" "image" "get-presentation" "title" "project" "lambda" "for-each" "get-workbench" "workbench" "let" "tree")}
        {Lisp-Entry "update-buttons" method #f 168 11 168 25 ("ok" "'ok" "locate" "set-enabled?" "selected-project" "project" "let")}
        {Lisp-Entry "select-active" method #f 173 11 173 24 ("get-tree" "select-user-data-row" "get-active-project" "when")}
        {Lisp-Entry "get-modal-result" method #f 183 20 183 36 ("selected-project")}
        {Lisp-Entry "ok-enabled?" method #f 187 11 187 22 ("ok" "'ok" "locate" "get-enabled?")}
        {Lisp-Entry "on-double-click" method #f 191 11 191 26 ("default-action" "evt")}
        {Lisp-Entry "on-return-press" method #f 196 20 196 35 ("default-action" "evt")}
        {Lisp-Entry "on-escape-press" method #f 201 20 201 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "selected-project" method #f 211 11 211 27 ("concrete?" "Project" "is?" "and" "when" "get-tree" "get-single-selected-data" "file" "let")}}}})
"Property-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Property-Doc.jazz"} 1257476546
    {Lisp-Entry "jazz.doc.doc.Property-Doc" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Property-Doc" class #f 44 7 44 19 ("initialize" "Slot-Doc")
        {Lisp-Entry "getter" property #f 47 12 47 18 ()}
        {Lisp-Entry "get-getter" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "set-getter" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "setter" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-setter" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-setter" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "construct-literal" method #f 52 16 52 33 ("doc:" "name:" "self" "new" "doc" "name" "context")}
        {Lisp-Entry "present-text" method #f 61 20 61 32 ("get-effective-title" "class:")}
        {Lisp-Entry "get-class-image" method #f 71 25 71 40 ("Bitmap-Resource")}}}})
"Recordable"
 ({Lisp-File-Entry {File jedi "lib" "jazz.recorder" "src" "jazz" "recorder" "Recordable.jazz"} 1257476551
    {Lisp-Entry "jazz.recorder.Recordable" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Recordable" interface #f 40 11 40 21 ()}}})
"Repositories"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "repositories" "Repositories.jazz"} 1257476560
    {Lisp-Entry "jedi.builder.repositories.Repositories" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Repositories" class #f 43 7 43 19 ("Component")
        {Lisp-Entry "get-class-image" method #f 51 25 51 40 ("Bitmap-Resource")}}}})
"Repositories-Manager"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "repositories" "Repositories-Manager.jazz"} 1257477925
    {Lisp-Entry "jedi.builder.repositories.Repositories-Manager" module #f 37 18 37 64 ("jazz")
      {Lisp-Entry "Repositories-Manager" class #f 53 7 53 27 ("329" "width:" "title:" "on-context-menu" ":form" "Event-Handler" "context-menu-handler:" "multiple-selection?:" "show-header?:" ":icons" "portfolio:" "repositories" "shown?:" "header" "content" "flat?:" "hscroll?:" "vscroll?:" "scroller" "tools" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "external-name" method #f 67 25 67 38 ("repositories-manager" "'repositories-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 76 25 76 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 80 25 80 35 ()}
        {Lisp-Entry "install-in-host" method #f 84 20 84 35 ("setup-repositories" "host")}
        {Lisp-Entry "setup-repositories" method #f 88 11 88 29 ("update")}
        {Lisp-Entry "get-tools-view" method #f 97 20 97 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 101 20 101 33 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method #f 111 11 111 19 ("repositories" "'repositories" "locate")}
        {Lisp-Entry "update" method #f 120 11 120 17 ("get-repositories" "collapsed" "'collapsed" "add-repository" "repository" "for-each" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "add-row" "repositories-row" "remove-every-row" "lambda" "with-update-locked" "get-tree" "tree" "let")}
        {Lisp-Entry "add-repository" method #f 131 11 131 25 ("package-name" "key:" "repository-packages" "string<=?" "sort" "add-package" "package" "lambda" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "repository-row" "Bitmap-Resource" "image" "->string" "title" "repository-name" "name" "let" "repository" "state" "father" "tree")}
        {Lisp-Entry "add-package" method #f 142 11 142 22 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "else" "module-ref" "get-workbench" "find-project" "Bitmap-Resource" "not" "cond" "image" "->string" "title" "parse-package-project" "project-unit" "project-name" "receive" "package-name" "name" "let" "package" "father" "tree")}
        {Lisp-Entry "Repository-Template" definition #f 157 14 157 33 ("Jazz" "Directory")}
        {Lisp-Entry "on-new-repository" method #f 161 11 161 28 ("save-repositories" "new-directory" "install/add-repository" "copy-template" "'name" "'dirname" "cons" "list" "associations" "empty-string?" "if" "effective-name" "destination" "Repository-Template" "template" "let" "get-current-directory" "directory:" "New-Repository-Dialog" "get-modal" "name" "dirname" "directory" "receive" "evt")}
        {Lisp-Entry "on-register-repository" method #f 172 11 172 33 ("save-repositories" "install/add-repository" "format" "message-box" "find-repository" "name" "exists?" "if" "new-file" "repository-file" "choose-directory" "dir" "cadr" "read" "form" "let" "input" "lambda" "parse" "call-with-input-file" "file" "load-repository-name" "define" "evt")}
        {Lisp-Entry "install/add-repository" method #f 190 11 190 33 ("row-rank" "set-single-selection" "ensure-expanded" "expanded" "'expanded" "add-repository" "repository-row" "parse" "install-repository" "repository" "selected-row" "repositories-row" "get-tree" "tree" "let" "dir")}
        {Lisp-Entry "save-repositories" method #f 199 11 199 28 ("get-application" "set-preferences-property" "repository-directory" "tokenise-filename" "Directory" "new" "anchorize" "repository" "lambda" "map" "directories" "collect-user-repositories" "repositories" "'repositories" "get-preferences" "pref" "let")}
        {Lisp-Entry "collect-user-repositories" method #f 208 11 208 36 ("get-repositories" "system-repository?" "not" "repository" "lambda" "collect-if")}
        {Lisp-Entry "system-repository?" definition #f 214 15 214 33 ("User" "Jazz" "Bin" "repository-name" "memq?" "repository")}
        {Lisp-Entry "Package-Template" definition #f 223 14 223 30 ("Jazz" "Directory")}
        {Lisp-Entry "on-edit-repository" method #f 227 11 227 29 ("selected-objects" "edit-repository" "for-each" "evt")}
        {Lisp-Entry "edit-repository" method #f 231 11 231 26 ("new-file" "get-application" "edit-document" "repository-directory" "tokenise-filename" "Directory" "new" "dir" "let" "repository")}
        {Lisp-Entry "on-new-package" method #f 236 11 236 25 ("row-rank" "set-single-selection" "ensure-expanded" "add-package" "package-row" "selected-row" "repository-row" "get-tree" "tree" "let" "repository-add-package" "parse" "load-package" "new-file" "file" "copy-template" "project-directories" "'project-directories" "format" "project-unit" "'project-unit" "'project" "'package" "cons" "list" "associations" "destination" "repository-library-directory" "tokenise-filename" "Directory" "new" "directory" "Package-Template" "template" "last" "capitalize" "project" "split-identifier" "->string" "map" "package-parts" "string->symbol" "package-name" "let*" "selected-object" "repository:" "New-Package-Dialog" "get-modal" "package" "repository" "receive" "evt")}
        {Lisp-Entry "on-scan-new-packages" method #f 259 11 259 31 ("format-plural" "length" "count" "row-rank" "row" "set-selection" "ensure-expanded" "add-package" "package-row" "package" "lambda" "map" "rows" "get-tree" "tree" "user-message" "null?" "if" "repository-install-packages" "packages" "get-user-data" "repository" "selected-row" "repository-row" "let" "evt")}
        {Lisp-Entry "on-unregister-repository" method #f 278 11 278 35 ("save-repositories" "selected-rows" "uninstall/remove-repository" "for-each" "evt")}
        {Lisp-Entry "uninstall/remove-repository" method #f 283 11 283 38 ("get-tree" "remove-row" "uninstall-repository" "get-user-data" "repository" "let" "row")}
        {Lisp-Entry "on-edit-package" method #f 294 11 294 26 ("selected-objects" "edit-package" "for-each" "evt")}
        {Lisp-Entry "edit-package" method #f 298 11 298 23 ("package-name" "->string" "list" "new-file" "get-application" "edit-document" "package-repository" "repository-library-directory" "tokenise-filename" "Directory" "new" "dir" "let" "package")}
        {Lisp-Entry "on-install-in-workbench" method #f 303 11 303 34 ("selected-rows" "install-in-workbench" "row" "lambda" "for-each" "get-tree" "tree" "get-workbench" "workbench" "get-application" "get-workbench-manager" "workbench-manager" "let" "evt")}
        {Lisp-Entry "install-in-workbench" method #f 312 11 312 31 ("invalidate-cell" "Bitmap-Resource" "set-image" "get-cell-data" "node" "0" "Cell" "new" "cell" "row-rank" "rank" "install-project" "find-unit-source" "file" "parse-package-project" "unit" "name" "receive" "get-user-data" "package" "let" "row" "tree" "workbench" "workbench-manager")}
        {Lisp-Entry "parse-package-project" method #f 324 11 324 32 ("cdr" "'unit" "assq" "cadr" "unit" "car" "name" "values" "Bin" "'Bin" "repository-name" "eq?" "not" "or" "if" "package-project" "project" "package-repository" "repository" "let" "package")}
        {Lisp-Entry "package-project-installable?" method #f 334 11 334 39 ("module-ref" "get-workbench" "find-project" "not" "and" "parse-package-project" "unit" "name" "receive" "package")}
        {Lisp-Entry "selected-kind" method #f 344 11 344 24 ("package" "'package" "package?" "repository" "'repository" "repository?" "repositories" "'repositories" "not" "cond" "object")}
        {Lisp-Entry "selected-kind/objects" method #f 353 11 353 32 ("not" "selected-kind" "key:" "uniform" "kind" "values" "null?" "if" "get-tree" "get-selected-data" "objects" "let")}
        {Lisp-Entry "selected-objects" method #f 363 11 363 27 ("selected-kind/objects" "objects" "kind" "receive")}
        {Lisp-Entry "selected-object" method #f 368 11 368 26 ("selected-objects" "car")}
        {Lisp-Entry "selected-rows" method #f 372 11 372 24 ("get-tree" "get-selected-rows")}
        {Lisp-Entry "selected-row" method #f 376 11 376 23 ("get-tree" "get-selected-row")}
        {Lisp-Entry "on-context-menu" method #f 385 11 385 26 ("track-popup-menu" "when" "new-menu" "menu" "let" "lambda" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "new-menu" method #f 396 18 396 26 ("new-package-menu" "package" "new-repository-menu" "repository" "new-repositories-menu" "repositories" "case" "not" "if" "selected-kind/objects" "objects" "kind" "receive")}
        {Lisp-Entry "new-repositories-menu" method #f 406 11 406 32 ("layout-menu" "cleanup-separators" "get-tree" "client:" "Repositories-Menu" "new" "menu" "let" "objects")}
        {Lisp-Entry "new-repository-menu" method #f 413 11 413 30 ("layout-menu" "cleanup-separators" "unregister-repository" "'unregister-repository" "unregister-repository-separator" "'unregister-repository-separator" "system-repository?" "some?" "new-package" "'new-package" "new-package-separator" "'new-package-separator" "locate" "set-visible?" "1" "length" ">" "when" "get-tree" "client:" "Repository-Menu" "new" "menu" "let" "objects")}
        {Lisp-Entry "new-package-menu" method #f 426 11 426 27 ("layout-menu" "cleanup-separators" "install-package" "'install-package" "install-package-separator" "'install-package-separator" "locate" "set-visible?" "package-project-installable?" "every?" "unless" "get-tree" "client:" "Package-Menu" "new" "menu" "let" "objects")}}
      {Lisp-Entry "Repositories-Menu" class #f 441 7 441 24 ("register-repository" "repositories-manager" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "new-repository" "name:" "Context-Menu")}
      {Lisp-Entry "Repository-Menu" class #f 456 7 456 22 ("unregister-repository" "unregister-repository-separator" "scan-new-packages" "new-package" "new-package-separator" "repositories-manager" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "edit-repository" "name:" "Context-Menu")}
      {Lisp-Entry "Package-Menu" class #f 475 7 475 19 ("install-in-workbench" "install-package" "install-package-separator" "repositories-manager" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "edit-package" "name:" "Context-Menu")}}})
"Repositories-Manager-Actions"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "repositories" "Repositories-Manager-Actions.jazz"} 1257476559
    {Lisp-Entry "jedi.builder.repositories.Repositories-Manager-Actions" module #f 37 18 37 72 ("jazz")
      {Lisp-Entry "Repositories-Manager-Actions" class #f 46 7 46 35 ("on-install-in-workbench" "install-in-workbench" "on-edit-package" "edit-package" "on-unregister-repository" "unregister-repository" "on-scan-new-packages" "scan-new-packages" "on-new-package" "new-package" "on-edit-repository" "edit-repository" "on-register-repository" "register-repository" "on-new-repository" ":guest" ":client" ":form" "Event-Handler" "action-handler:" "new-repository" "name:" "Actions")}}})
"Repositories-Preferences"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "preference" "Repositories-Preferences.jazz"} 1257476560
    {Lisp-Entry "jedi.builder.preference.Repositories-Preferences" module #f 37 18 37 66 ("jazz")
      {Lisp-Entry "Repositories-Preferences" class #f 45 7 45 31 ("title:" "initialize" "Preferences")
        {Lisp-Entry "repositories" property #f 48 12 48 24 ()}
        {Lisp-Entry "get-repositories" accessor #f 48 50 48 58 ()}
        {Lisp-Entry "set-repositories" accessor #f 48 50 48 58 ()}}}})
"Repository"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "repositories" "Repository.jazz"} 1257476561
    {Lisp-Entry "jedi.builder.repositories.Repository" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Repository" class #f 45 7 45 17 ("initialize" "Component")
        {Lisp-Entry "title" property #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "set-title" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "directory" property #f 49 12 49 21 ()}
        {Lisp-Entry "get-directory" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "set-directory" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "print" method #f 52 20 52 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-class-image" method #f 64 25 64 40 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" method #f 68 25 68 46 ("nextmethod" "else" "directory" "title" "field-name" "case" "property")}
        {Lisp-Entry "presentation-property?" method #f 75 20 75 42 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" method #f 79 20 79 36 ("title")}
        {Lisp-Entry "set-presentation" method #f 83 20 83 36 ("title:" "self" "set-property" "presentation" "designer")}
        {Lisp-Entry "addable-class?" method #f 87 20 87 34 ("Project-Group" "Project-File" "subtype?" "or" "class")}
        {Lisp-Entry "get-addable-classes" method #f 92 20 92 39 ("Project-Group" "list")}
        {Lisp-Entry "get-row-instance" method #f 97 20 97 36 ("nextmethod" "else" "Directory-Row" "new" "directory" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" method #f 103 20 103 46 ("directory")}}}})
"Resource-File"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "resource" "Resource-File.jazz"} 1257476562
    {Lisp-Entry "jedi.builder.resource.Resource-File" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Resource-File" class #f 43 7 43 20 ("Project-File")
        {Lisp-Entry "resource-class" method #f 46 26 46 40 ()}
        {Lisp-Entry "resource-marker" method #f 50 26 50 41 ()}}}})
"Scaled-View"
 ({Lisp-File-Entry {File jedi "src" "jedi" "showcase" "Scaled-View.jazz"} 1257476590
    {Lisp-Entry "jedi.showcase.Scaled-View" module #f 37 18 37 43 ("jazz")
      {Lisp-Entry "Scaled-View" class #f 43 7 43 18 ("View")}
      {Lisp-Entry "Scaled-View" class #f 49 7 49 18 ("set-client" "get-client" "initialize" "View")
        {Lisp-Entry "client" property #f 52 12 52 18 ()}
        {Lisp-Entry "print" method #f 55 11 55 16 ("size" "position" "background" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-client" method #f 66 18 66 28 ("client")}
        {Lisp-Entry "set-client" method #f 70 18 70 28 ("client" "set!" "value")}
        {Lisp-Entry "draw-background" method #f 79 11 79 26 ("context" "surface")}
        {Lisp-Entry "draw" method #f 83 11 83 15 ("get-v" "get-h" "draw-text" "get-size" "12" "Dimension" "new" "center" "get-text-width" "width" "name" "->string" "string" "let*" "Caption" "name:" "Font" "set-font" "fill-rect" "get-bounds" "bounds" "let" "background" "when" "lv" "lh" "context" "surface")}
        {Lisp-Entry "Info" definition #f 99 26 99 30 ()}
        {Lisp-Entry "register-info" method #f 103 18 103 31 ("get-name" "background" "essay" "list" "cons" "Info" "set!" "when" "new-sc?" "new-sc" "clp" "vor" "wor")}
        {Lisp-Entry "mouse-down" method #f 113 11 113 21 ("background" "debug" "pos")}}}})
"Section-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Section-Doc.jazz"} 1257476597
    {Lisp-Entry "jazz.doc.doc.Section-Doc" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Section-Doc" class #f 46 7 46 18 ("set-sort?" "get-sort?" "initialize" "Doc")
        {Lisp-Entry "sort?" property #f 49 12 49 17 ()}
        {Lisp-Entry "catalog" slot #f 52 8 52 15 ()}
        {Lisp-Entry "get-catalog" method #f 60 20 60 31 ("catalog")}
        {Lisp-Entry "set-catalog" method #f 64 20 64 31 ("children" "set-catalog" "child" "lambda" "for-each" "catalog" "set!" "cat")}
        {Lisp-Entry "get-sort?" method #f 71 18 71 27 ("sort?")}
        {Lisp-Entry "set-sort?" method #f 75 18 75 27 ("designers" "descendants" "'descendants" "self" "process-refresh" "designer" "lambda" "for-each" "set!" "sort?" "neq?" "when" "value")}
        {Lisp-Entry "html-output-file" method #f 88 11 88 27 ("name" "format" "Jazz" "'Jazz" "list" "File" "new")}
        {Lisp-Entry "get-class-image" method #f 97 25 97 40 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" method #f 101 25 101 46 ("nextmethod" "else" "sort?" "field-name" "case" "property")}
        {Lisp-Entry "sort-components?" method #f 107 20 107 36 ("sort?")}
        {Lisp-Entry "get-row-instance" method #f 111 20 111 36 ("nextmethod" "else" "Boolean-Row" "new" "sort?" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" method #f 117 20 117 46 ("sort?")}}}})
"Showcase"
 ({Lisp-File-Entry {File jedi "src" "jedi" "showcase" "Showcase.jazz"} 1257476607
    {Lisp-Entry "jedi.showcase.Showcase" module #f 37 18 37 40 ("Scaling-Showcase" "Draw-Showcase" "DC-Showcase" "Region-Showcase" "register-autoclass" "jazz")
      {Lisp-Entry "Showcase" class #f 47 7 47 15 ("threads" "threads-sheet" "text-sheet" "tree-sheet" "outline-sheet" "330" "b" "Purple" "210" "320" "p" "190" "vc" "160" "vb" "va" "v2" "v1" "2" "branch:" "on-set-active-branch" "s2" "Dark-Gray" "branches-sheet" "Red" "250" "wiped" "on-wipe" ":form" "Event-Handler" "action-handler:" "24" "400" "85" "effects-sheet" "east" "west" "south" "north" "4" "layout-padding:" "border" "layout-border" "420" "40" "relative" "mode:" "vert" "second" "first" "division:" "horz" "orientation:" "layout-split" "280" "Dark-Green" "center" "Dark-Blue" "Dark-Red" "head" "location:" "vertical" "layout-justification:" "500" "flow" "layout" "solid" "layout-flow" "auto-size?:" "layout-sheet" "555" "870" "ss" "scaling-sheet" "558" "884" "0" "ds" "drawing-sheet" "47" "176" "152" "128" "71" "139" "236" "selected?:" "217" "259" "218" "153" "212" "180" "288" "8" "214" "185" "21" "165" "17" "239" "147" "124" "condensed?:" "101" "content:" "choices:" "19" "148" "78" "260" "22" "92" "170" "b9" "b8" "130" "b7" "110" "b6" "90" "b5" "70" "b4" "b3" "30" "b2" "image-name:" "16" "b1" "50" "width:" "row" "selection-mode:" ":icons" "portfolio:" "tv" "fill" "layout-type:" "313" "150" "tree-border" "Blue" "660" "dcs" "Green" "Color" "background:" "140" "200" "rs" "jt" "vscroll?:" "hscroll?:" "edge" "border-type:" "221" "350" "269" "text-border" "100" "300" "10" "440" "t" "Bitmap-Resource" "icon:" "32" "20" "i" "content" "title:" "views-sheet" "588" "888" "6" "Point" "position:" "tab" "name:" "600" "900" "Dimension" "size:" "View")
        {Lisp-Entry "install" method #f 191 20 191 27 ("install-views" "nextmethod" "rest")}
        {Lisp-Entry "host-icon" method #f 201 25 201 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 205 25 205 35 ()}
        {Lisp-Entry "host-position" method #f 209 25 209 38 ("30" "50" "Point")}
        {Lisp-Entry "host-size" method #f 213 25 213 34 ("650" "900" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 217 20 217 35 ("home")}
        {Lisp-Entry "resize" method #f 226 20 226 26 ("tab" "'tab" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-set-active-branch" method #f 231 11 231 31 ("set-active-branch" "2" "view" "branch:" "get-property" "child" "branch" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "get-stage" method #f 243 11 243 20 ("locate" "get-content" "name")}
        {Lisp-Entry "install-views" method #f 252 11 252 24 ("install-tree-view" "install-text")}
        {Lisp-Entry "install-text" method #f 257 11 257 23 ("jt" "'jt" "locate" "get-controller" "set-moniker" "exists?" "when" "Jedi-Project" "File" "file" "let")}
        {Lisp-Entry "install-tree-view" method #f 264 11 264 28 ("25" "0" "naturals" "5" "=" "when" "father:" "cell" "format" "title" "let*" "n" "lambda" "for-each" "node" "Tree-Label" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "tv" "'tv" "locate" "tree" "let")}
        {Lisp-Entry "on-wipe" method #f 287 11 287 18 ("Blue" "Red" "name:" "Color" "get-background" "eq?" "if" "set-background" "0.005" "delay:" "right" "'right" "direction:" "Wipe-Effect" "new" "get-root" "set-effect" "wiped" "'wiped" "locate" "canvas" "let" "evt")}}
      {Lisp-Entry "Region-Showcase" class #f 298 7 298 22 ("View")
        {Lisp-Entry "draw" method #f 302 11 302 15 ("8" "160" "Bitmap-Resource" "get-application" "get-icons-cache" "draw-image" "Red" "Color" "fill-region" "or" "'or" "combine!" "120" "180" "70" "30" "sec" "100" "145" "50" "Rect" "rect:" "frs" "Region" "new" "rgn" "with-closed" "10" "draw-text" "Caption" "name:" "Font" "set-font" ":transparent" "set-bk-mode" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "DC-Showcase" class #f 323 7 323 18 ("View")
        {Lisp-Entry "draw" method #f 327 11 327 15 ("10" "Point" "destination:" "bit-blit" "Green" "name:" "Color" "0" "Rect" "fill-rect" "size:" "Memory-Surface" "new" "memory-dc" "with-closed" "32" "Dimension" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Draw-Showcase" class #f 342 7 342 20 ("View")
        {Lisp-Entry "draw" method #f 345 20 345 24 ("250" "draw-text" "frame-rect" "Dark" "Medium" "340" "Light" "320" "White" "360" "400" "300" "200" "Black" "set-text-color" "Green" "name:" "Color" "214" "118" "0" "fill-rect" "30" "650" "10" "450" "Rect" "new" "draw-gradient" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-gradient" method #f 357 11 357 24 ("Blue" "1" "Red" "name:" "Color" "0" "list" "gradient-fill" "rect" "surface")}}
      {Lisp-Entry "Scaling-Showcase" class #f 369 7 369 23 ("View")}}})
"Slot-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Slot-Doc.jazz"} 1257476607
    {Lisp-Entry "jazz.doc.doc.Slot-Doc" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Slot-Doc" class #f 44 7 44 15 ("Definition-Doc")
        {Lisp-Entry "construct-literal" method #f 48 16 48 33 ("doc:" "name:" "self" "new" "doc" "name" "context")}
        {Lisp-Entry "present-text" method #f 57 20 57 32 ("get-effective-title" "class:")}
        {Lisp-Entry "get-class-image" method #f 67 25 67 40 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" method #f 71 20 71 46 ("package-name")}}}})
"Smoker"
 ({Lisp-File-Entry {File jedi "src" "jedi" "smoker" "Smoker.jazz"} 1257476608
    {Lisp-Entry "jedi.smoker.Smoker" module #f 37 18 37 36 ("jazz")
      {Lisp-Entry "Smoker" class #f 43 7 43 13 ("Jedi")
        {Lisp-Entry "conclude-process" method #f 46 20 46 36 ("smoke" "Smoker-Suite" "new" "suite" "let")}}}})
"Smoker-Builder"
 ({Lisp-File-Entry {File jedi "src" "jedi" "smoker" "Smoker-Builder.jazz"} 1257476607
    {Lisp-Entry "jedi.smoker.Smoker-Builder" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Smoker-Builder" class #f 40 7 40 21 ("Object")}
      {Lisp-Entry "Smoker-Builder" class #f 46 7 46 21 ("Object")
        {Lisp-Entry "Smoker-Project" definition #f 49 14 49 28 ()}
        {Lisp-Entry "build/run" method #f 53 18 53 27 ("set-done" "run" "step-it" "cancel-requested?" "unless" "build" "wait-for" "user-message" "2" "0" "Range" "set-range" "Smoker-Project" "Launcher-Project" "find-project" "project" "let" "activity" "lambda" "execute:" "self" "context:" "name:" "Activity" "new")}
        {Lisp-Entry "build" method #f 74 11 74 16 ("keep-reporter?:" "threaded?:" "build" "project")}
        {Lisp-Entry "run" method #f 78 11 78 14 ("wait?:" "create-process" "format" "command" "outputed-file" "parse" "pathname" "let*" "project")}}}})
"Smoker-Suite"
 ({Lisp-File-Entry {File jedi "src" "jedi" "smoker" "Smoker-Suite.jazz"} 1257476608
    {Lisp-Entry "jedi.smoker.Smoker-Suite" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Smoker-Suite" class #f 40 7 40 19 ("Object")}
      {Lisp-Entry "Smoker-Suite" class #f 46 7 46 19 ("Object")
        {Lisp-Entry "smoke" method #f 49 18 49 23 ("run-builds" "run-searches" "run-showcase" "run-validations")}
        {Lisp-Entry "run-validations" method #f 71 11 71 26 ("10" "set-done" "step-it" "2" "sleep" "report-success?:" "validate" "feedback:" "Validation-Suite" "suite" "let" "user-message" "1" "0" "Range" "set-range" "while" "activity" "lambda" "execute:" "self" "context:" "name:" "Activity" "new")}
        {Lisp-Entry "run-showcase" method #f 94 11 94 23 ("5" "0" "naturals" "add-threaded-icon" "n" "lambda" "for-each" "'threads" "threads" "let" "threads-sheet" "'threads-sheet" "set-selection-name" "'tab" "locate" "tab" "get-guest" "showcase" "Showcase" "new-frame" "frame" "let*")}
        {Lisp-Entry "run-searches" method #f 110 11 110 23 ("on-search" "set!" "1" "sleep" "wait-for" "when" "while" "running" "let" "thread" "lambda" "execute:" "self" "context:" "name:" "Thread" "new" "unimplemented" "set-search-targets" "end-edition" "set-visible?" "targets" "'targets" "locate" "tree" "get-search" "view" "get-guest" "manager" "get-search-manager" "frame" "get-application" "appl" "let*")}
        {Lisp-Entry "run-builds" method #f 140 11 140 21 ("7000" "Puzzle-Project" "5000" "1000" "Yoda-Project" "8000" "0" "Launcher-Project" "run-project-builds")}
        {Lisp-Entry "run-project-builds" method #f 146 11 146 29 ("keep-reporter?:" "threaded?:" "build" "set!" "find-project" "project" "wait-for" "when" "while" "running" "let" "sleep" "thread" "lambda" "execute:" "self" "context:" "format" "name:" "Thread" "new" "unimplemented" "wait-beetween" "0" "wait-before" "project-title" "project-class" "title")}}}})
"Sound-File"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "resource" "Sound-File.jazz"} 1257476608
    {Lisp-Entry "jedi.builder.resource.Sound-File" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Sound-File" class #f 44 7 44 17 ("Resource-File")
        {Lisp-Entry "resource-class" method #f 47 20 47 34 ("Sound-Resource")}}}})
"Static-Init-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Static-Init-Entry.jazz"} 1257476613
    {Lisp-Entry "jazz.catalog.entry.Static-Init-Entry" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Static-Init-Entry" class #f 44 20 44 37 ("Hierarchical-Entry")
        {Lisp-Entry "present-name" method #f 47 20 47 32 ()}
        {Lisp-Entry "print-catalog" method #f 51 20 51 33 ("references" "end-column" "end-line" "column" "line" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" method #f 58 20 58 29 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" method #f 67 20 67 34 ("references" "update-index" "key" "lambda" "for-each" "references-index" "definitions-index")}}}})
"Synchronize-Box"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Synchronize-Box.jazz"} 1257476619
    {Lisp-Entry "jedi.builder.workbench.Synchronize-Box" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Synchronize-Box" class #f 46 7 46 22 ("on-no-action" "535" "no-action" "on-copy-left" "513" "copy-left" "on-copy-right" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "9" "491" "Point" "position:" "copy-right" "name:" "Message-Box")
        {Lisp-Entry "layout-box" method #f 61 20 61 30 ("get-height" "400" "Dimension" "new" "set-size" "border" "'border" "locate" "border-view" "nextmethod" "dialog-size" "let" "default" "actions" "content" "icon" "size" "title" "selection" "text")}}}})
"Synchronize-Entry"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Synchronize-Entry.jazz"} 1257476620
    {Lisp-Entry "jedi.builder.workbench.Synchronize-Entry" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Synchronize-Entry" class #f 40 7 40 24 ("Object")
        {Lisp-Entry "kind" slot #f 43 18 43 22 ()}
        {Lisp-Entry "left" slot #f 44 18 44 22 ()}
        {Lisp-Entry "right" slot #f 45 18 45 23 ()}
        {Lisp-Entry "action" slot #f 46 18 46 24 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("action~self" "right~self" "left~self" "kind~self" "set!" "nextmethod" "right-value" "right" "left-value" "left" "kind")}
        {Lisp-Entry "print" method #f 57 20 57 25 ("action" "right" "left" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}}})
"Synchronize-Tree"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Synchronize-Tree.jazz"} 1257476620
    {Lisp-Entry "jedi.builder.workbench.Synchronize-Tree" module #f 37 18 37 57 ("Synchronize-Right-Column" "Synchronize-Action-Column" "Synchronize-Left-Column" "register-autoclass" "jazz")
      {Lisp-Entry "Synchronize-Tree" class #f 46 7 46 23 ("right" "75" "action" "center" "justification:" "80" "left" "toplevel-controls?:" "200" "width:" "title:" "name:" "multiple-selection?:" "path" "filled-column:" "row" "selection-mode:" ":icons" "portfolio:" "Tree-View")}
      {Lisp-Entry "Synchronize-Item-Column" class #f 62 7 62 30 ("Tree-Column")
        {Lisp-Entry "draw-data" method #f 65 20 65 29 ("0" "2" "16" "-" "quotient" "get-application" "get-icons-cache" "draw-image" "present-image" "image" "present?" "not" "when" "get-right" "get-left" "node" "'node" "get-kind" "=" "and" "lvl?" "let" "draw-background" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "present?" method #f 74 38 74 46 ("data")}
        {Lisp-Entry "present-image" method #f 78 38 78 51 ("data")}}
      {Lisp-Entry "Synchronize-Left-Column" class #f 87 7 87 30 ("Synchronize-Item-Column")
        {Lisp-Entry "present?" method #f 90 20 90 28 ("get-left" "data")}
        {Lisp-Entry "present-image" method #f 94 20 94 33 ("Bitmap-Resource" "data")}}
      {Lisp-Entry "Synchronize-Action-Column" class #f 106 7 106 32 ("Tree-Column")
        {Lisp-Entry "draw-data" method #f 109 20 109 29 ("0" "1" "2" "16" "-" "quotient" "+" "get-icons-cache" "draw-image" "get-right" "get-left" "action-image" "image" "get-application" "appl" "when" "get-action" "action" "let" "draw-background" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Synchronize-Right-Column" class #f 127 7 127 31 ("Synchronize-Item-Column")
        {Lisp-Entry "present?" method #f 130 20 130 28 ("get-right" "data")}
        {Lisp-Entry "present-image" method #f 134 20 134 33 ("Bitmap-Resource" "data")}}}})
"Syntax-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Syntax-Doc.jazz"} 1257476621
    {Lisp-Entry "jazz.doc.doc.Syntax-Doc" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Syntax-Doc" class #f 44 7 44 17 ("Definition-Doc")
        {Lisp-Entry "get-class-image" method #f 52 25 52 40 ("Bitmap-Resource")}}}})
"Test-Workspace"
 ({Lisp-File-Entry {File jedi "src" "jedi" "workspace" "Test-Workspace.jazz"} 1257476630
    {Lisp-Entry "jedi.workspace.Test-Workspace" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Test-Workspace" class #f 46 7 46 21 ("stage2" "750" "maximized?:" "271" "437" "142" "294" "Profile-Results" "Search-Results" "Properties-Manager" "Lisp-Console-Manager" "302" "969" "490" "267" "console" "Hierarchy-Browser" "Chapters-Browser" "vert" "orientation:" "31" "division:" "relative" "mode:" "389" "403" "text" "Repositories-Manager" "Workbench-Manager" "selection" "330" "255" "65" "workbench" ":status" "second" "425" "status" ":toolbar" "first" "54" "842" "74" "325" "toolbar" "name:" ":menubar" "model-name:" "root" "location:" "Jazz-Text-View" "frame-model:" "60" "1236" "Dimension" "size:" "-2" "1" "Point" "position:" ":shift" ":alt" "Shortcut" "shortcut:" "Bitmap-Resource" "icon:" "title:" "Workspace-Preferences")
        {Lisp-Entry "default-name" method #f 76 20 76 32 ("test" "'test")}}}})
"Text-Showcase"
 ({Lisp-File-Entry {File jedi "src" "jedi" "showcase" "Text-Showcase.jazz"} 1257476636
    {Lisp-Entry "jedi.showcase.Text-Showcase" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Text-Showcase" class #f 43 7 43 20 ("View")}}})
"Text-Workspace"
 ({Lisp-File-Entry {File jedi "src" "jedi" "workspace" "Text-Workspace.jazz"} 1257476643
    {Lisp-Entry "jedi.workspace.Text-Workspace" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Text-Workspace" class #f 46 7 46 21 ("maximized?:" "Repositories-Manager" "Workbench-Manager" "Hierarchy-Browser" "Chapters-Browser" "31" "46" "Profile-Results" "Search-Results" "Properties-Manager" "Lisp-Console-Manager" "model-name:" "selection" "second" "-27" "vert" "5" "Rect" "insets:" "36" "division:" "relative" "mode:" "horz" "orientation:" "first" "location:" "top" "status" "toolbar" "menubar" "name:" "Jazz-Text-View" "frame-model:" ":shift" ":alt" "Shortcut" "shortcut:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" method #f 71 20 71 32 ("text" "'text")}}}})
"Threads-Showcase"
 ({Lisp-File-Entry {File jedi "src" "jedi" "showcase" "Threads-Showcase.jazz"} 1257476645
    {Lisp-Entry "jedi.showcase.Threads-Showcase" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Threads-Showcase" class #f 49 7 49 23 ("470" "776" "32" "2" "area" "on-resume-threads" "224" "resume-threads" "on-suspend-threads" "114" "suspend-threads" "on-add-threads" ":form" "Event-Handler" "action-handler:" "22" "100" "Dimension" "size:" "4" "Point" "position:" "title:" "add-threads" "name:" "0" "initialize" "View")
        {Lisp-Entry "threads" slot #f 52 8 52 15 ()}
        {Lisp-Entry "slowdown" slot #f 53 8 53 16 ()}
        {Lisp-Entry "start" slot #f 54 8 54 13 ()}
        {Lisp-Entry "count" slot #f 55 8 55 13 ()}
        {Lisp-Entry "done?" slot #f 56 8 56 13 ()}
        {Lisp-Entry "destroy-component" method #f 67 20 67 37 ("nextmethod" "stop-showcase")}
        {Lisp-Entry "start-showcase" method #f 72 11 72 25 ("add-threads" "done?" "0" "count" "current-time" "time->seconds" "start" "set!")}
        {Lisp-Entry "stop-showcase" method #f 79 11 79 24 ("threads" "thread-join!" "for-each" "done?" "set!")}
        {Lisp-Entry "add-icon" method #f 85 11 85 19 ("32" "Dimension" "size:" "get-height" "42" "get-width" "-" "random" "Point" "position:" "parent:" "Bitmap-Resource" "image-name:" "Showcase-Icon" "new" "get-size" "size" "'area" "locate" "area" "let*" "n")}
        {Lisp-Entry "add-threaded-icon" method #f 95 18 95 35 (".005" "length" "*" "cons" "threads" "set!" "showcase" "'showcase" "animate-icon" "execute-event" "slowdown" "sleep" "done?" "not" "while" "lambda" "new-thread" "thread-start!" "thread" "add-icon" "icon" "let*" "n")}
        {Lisp-Entry "on-add-threads" method #f 111 11 111 25 ("add-threads" "evt")}
        {Lisp-Entry "on-suspend-threads" method #f 115 11 115 29 ("threads" "suspend" "thread" "lambda" "for-each" "evt")}
        {Lisp-Entry "on-resume-threads" method #f 121 11 121 28 ("threads" "resume" "thread" "lambda" "for-each" "evt")}
        {Lisp-Entry "add-threads" method #f 127 11 127 22 ("5" "0" "naturals" "add-threaded-icon" "n" "lambda" "for-each")}
        {Lisp-Entry "report-timing" method #f 133 11 133 24 ("start" "current-time" "time->seconds" "-" "/" "user-message" "0" "100" "modulo" "=" "when" "count" "increase!")}
        {Lisp-Entry "print" method #f 139 20 139 25 ("object->serial" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "Showcase-Icon" class #f 151 7 151 20 ("Action-Icon")
        {Lisp-Entry "direction-h" slot #f 154 8 154 19 ()}
        {Lisp-Entry "direction-v" slot #f 155 8 155 19 ()}
        {Lisp-Entry "prepare" method #f 158 20 158 27 ("direction-v" "5" "11" "random" "-" "direction-h" "set!" "nextmethod" "rest")}
        {Lisp-Entry "animate-icon" method #f 164 18 164 30 ("rebound-icon" "move-icon")}
        {Lisp-Entry "move-icon" method #f 169 11 169 20 ("direction-v" "get-v" "direction-h" "get-h" "+" "Point" "new" "set-position" "get-position" "pos" "let")}
        {Lisp-Entry "rebound-icon" method #f 174 11 174 23 ("direction-v" "get-height" "get-bottom" "get-top" "-" "direction-h" "set!" "get-width" "get-right" ">" "0" "get-left" "<" "or" "when" "parent" "get-size" "area" "get-rect" "rect" "let")}}}})
"Tree-Showcase"
 ({Lisp-File-Entry {File jedi "src" "jedi" "showcase" "Tree-Showcase.jazz"} 1257476663
    {Lisp-Entry "jedi.showcase.Tree-Showcase" module #f 37 18 37 45 ("Right-Column" "Middle-Column" "Node-Column" "register-autoclass" "jazz")
      {Lisp-Entry "Tree-Showcase" class #f 47 7 47 20 ("center" "justification:" "80" "tree-info" "419" "518" "tree-info-border" "415" "selection" "395" "first-displayed-offset" "375" "first-displayed-rank" "355" "first-displayed" "335" "visible-height" "16" "170" "315" "visible-count" "on-update-information" "275" "update-information" "on-show-hide" "235" "show/hide" "on-remove-rows" "205" "remove-rows" "on-add-row" "24" "160" "175" "add-row" "display-images?" "110" "toplevel-controls?" "50" "row-spacing" "30" "column-spacing" "on-setting" ":form" "Event-Handler" "action-handler:" "checked?:" "20" "120" "10" "340" "header?" "100" "85" "130" "width:" "title:" ":icons" "portfolio:" "row" "selection-mode:" "multiple-selection?:" "row-spacing:" "0" "column-spacing:" "filled-column:" "tree" "fill" "layout-type:" "content" "vscroll?:" "edge" "border-type:" "457" "319" "6" "3" "Point" "position:" "tree-border" "name:" "466" "940" "Dimension" "size:" "View")
        {Lisp-Entry "host-title" method #f 96 25 96 35 ()}
        {Lisp-Entry "host-position" method #f 100 25 100 38 ("60" "39" "Point")}
        {Lisp-Entry "host-size" method #f 104 25 104 34 ("466" "940" "Dimension")}
        {Lisp-Entry "install" method #f 113 20 113 27 ("update-information" "setup-tree" "nextmethod" "rest")}
        {Lisp-Entry "setup-tree" method #f 124 11 124 21 ("10" "0" "naturals" "3" "/=" "visible?:" "5" "=" "when" "cell" "format" "title" "let*" "n" "lambda" "for-each" "node" "Bitmap-Resource" "add-row" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "add-row" method #f 143 11 143 18 ("Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "random-height" "row-height:" "father:" "add-row" "visible?" "visible?:" "right" "middle" "image2" "image" "title" "father" "tree")}
        {Lisp-Entry "random-height" method #f 147 11 147 24 ("60" "random" "10" "+")}
        {Lisp-Entry "guest-actions" method #f 156 20 156 33 ("nextmethod" "tree-showcase" "'tree-showcase" "find-actions" "cons")}
        {Lisp-Entry "resize" method #f 166 20 166 26 ("tree-info-border" "'tree-info-border" "0" "tree-border" "'tree-border" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-setting" method #f 172 11 172 21 ("set-display-images?" "display-images?" "get-node-column" "set-toplevel-controls?" "toplevel-controls?" "set-row-spacing" "row-spacing" "0" "1" "if" "set-column-spacing" "column-spacing" "get-checked?" "set-header?" "header?" "get-name" "case" "'tree" "locate" "tree" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "Unique-Id" definition #f 183 14 183 23 ("0")}
        {Lisp-Entry "Last-Added-Row" definition #f 186 14 186 28 ()}
        {Lisp-Entry "on-add-row" method #f 190 11 190 21 ("update-information" "and" "Tree-Label" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "children:" "random-height" "row-height:" "collapsed" "'collapsed" "state:" "father:" "add-row" "Last-Added-Row" "set!" "increase!" "Unique-Id" "format" "title" "let" "row" "for-each" "get-shift?" "use-last-added?" "get-row" "n" "lambda" "map" "list" "null?" "if" "rows" "get-selection" "sel" "'tree" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-remove-rows" method #f 203 11 203 25 ("update-information" "remove-row" "row" "for-each" "get-row" "n" "lambda" "map" "rows" "get-selection" "sel" "'tree" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-show-hide" method #f 213 11 213 23 ("update-information" "not" "set-visible?" "get-visible-flag" "visible?" "get-user-data" "target" "row" "for-each" "get-row" "n" "lambda" "map" "rows" "get-selection" "sel" "tree-info" "'tree-info" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-update-information" method #f 225 11 225 32 ("update-information" "evt")}
        {Lisp-Entry "update-information" method #f 234 11 234 29 ("display-tree" "update-fields")}
        {Lisp-Entry "update-fields" method #f 239 11 239 24 ("get-selection" "selection" "'selection" "get-visible-height" "visible-height" "'visible-height" "get-visible-count" "format" "visible-count" "'visible-count" "set-title" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "display-tree" method #f 246 11 246 23 ("get-root-row" "remove-every-row" "with-update-locked" "subrow" "get-sons" "iterate" "user-data:" "display-row" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "subdest" "let" "dest" "row" "lambda" "proc" "tree-info" "'tree-info" "info" "'tree" "locate" "tree" "letrec")}
        {Lisp-Entry "display-row" method #f 263 11 263 22 ("list" "get-visible-flag" "c6" "c5" "c4" "color:" "c3" "c2" "Tree-Label" "c1" "get-image" "image:" "get-title" "title:" "Tree-Node" "new" "c0" "Dark-Blue" "Dark-Red" "name:" "Color" "if" "color" "get-visible?" "visible?" "row-rank" "essay" "lambda" "rank" "get-children" "car" "node" "let*" "internal-fields" "next" "previous" "state" "level" "receive" "row" "tree")}
        {Lisp-Entry "row-rank" method #f 279 11 279 19 ("error" "get-root-row" "get-sons" "iterate" "increase!" "continuation-return" "eq?" "if" "subrow" "proc" "-1" "rank" "letrec" "return" "lambda" "continuation-capture" "row" "tree")}}
      {Lisp-Entry "Node-Column" class #f 298 7 298 18 ("Tree-Node-Column")
        {Lisp-Entry "draw-data" method #f 301 20 301 29 ("0" "draw-title" "Dark-Red" "Red" "name:" "Color" "if" "fill-rect" "selected?:" "getf" "selected?" "text-rect" "rect" "let" "nextmethod" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Middle-Column" class #f 317 7 317 20 ("Tree-Column")
        {Lisp-Entry "draw-data" method #f 320 20 320 29 ("Dark-Blue" "Blue" "name:" "Color" "if" "fill-rect" "selected?:" "getf" "selected?" "0" "Rect" "new" "rect" "let" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Right-Column" class #f 334 7 334 19 ("Tree-Column")
        {Lisp-Entry "draw-data" method #f 337 20 337 29 ("Dark-Green" "Green" "name:" "Color" "if" "fill-rect" "selected?:" "getf" "selected?" "0" "Rect" "new" "rect" "let" "height" "width" "data" "row" "context" "surface")}}}})
"Tree-Showcase-Actions"
 ({Lisp-File-Entry {File jedi "src" "jedi" "showcase" "Tree-Showcase-Actions.jazz"} 1257476662
    {Lisp-Entry "jedi.showcase.Tree-Showcase-Actions" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Tree-Showcase-Actions" class #f 46 7 46 28 ("F5" "Shortcut" "shortcut:" "on-update-information" ":document" "Event-Handler" "action-handler:" "update-information" "name:" "Actions")}}})
"Unit-Doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "doc" "Unit-Doc.jazz"} 1257476665
    {Lisp-Entry "jazz.doc.doc.Unit-Doc" module #f 37 18 37 39 ("jazz")
      {Lisp-Entry "Unit-Doc" class #f 43 7 43 15 ("Doc")}}})
"Variable-Entry"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "entry" "Variable-Entry.jazz"} 1257476668
    {Lisp-Entry "jazz.catalog.entry.Variable-Entry" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Variable-Entry" class #f 44 20 44 34 ("Definition-Entry")
        {Lisp-Entry "print-catalog" method #f 47 20 47 33 ("references" "end-column" "end-line" "column" "line" "type" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" method #f 54 20 54 29 ("Bitmap-Resource")}}}})
"Vertical-View"
 ({Lisp-File-Entry {File jedi "src" "jedi" "test" "Vertical-View.jazz"} 1257476670
    {Lisp-Entry "jedi.test.Vertical-View" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Vertical-View" class #f 43 7 43 20 ("View")}
      {Lisp-Entry "Vertical-View" class #f 49 7 49 20 ("View")
        {Lisp-Entry "Toto" class #f 52 9 52 13 ("100" "Dimension" "size:" "0" "Point" "position:" "text" "content" "name:" "vscroll?:" "hscroll?:" "edge" "border-type:" "Border-View")}
        {Lisp-Entry "install" method #f 62 11 62 18 ("3" "0" "naturals" "->string" "title:" "Label-View" "else" "Horizontal-View" "2" "toto" "'toto" "name:" "self" "parent:" "Toto" "new" "1" "case" "n" "lambda" "for-each" "nextmethod" "rest")}
        {Lisp-Entry "layout" method #f 77 11 77 17 ("increase!" "set-size" "Point" "set-position" "view" "lambda" "for-each-view" "0" "v" "Dimension" "new" "child-size" "get-height" "quotient" "height" "get-width" "width" "get-size" "size" "length" "let*" "children" "when")}
        {Lisp-Entry "draw" method #f 97 11 97 15 ("Dark-Red" "name:" "Color" "get-bounds" "fill-rect" "lv" "lh" "context" "surface")}}}})
"Workbench"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Workbench.jazz"} 1257478269
    {Lisp-Entry "jedi.builder.workbench.Workbench" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Workbench" class #f 49 7 49 16 ("equal?" "eq?" "test:" "make-table" "initialize" "catalog?:" "Project")
        {Lisp-Entry "projects-table" slot #f 56 8 56 22 ()}
        {Lisp-Entry "get-projects-table" accessor #f 56 68 56 76 ()}
        {Lisp-Entry "categories-table" slot #f 57 8 57 24 ()}
        {Lisp-Entry "resources-table" slot #f 58 8 58 23 ()}
        {Lisp-Entry "sources-table" slot #f 60 8 60 21 ()}
        {Lisp-Entry "find-project" method #f 68 18 68 30 ("continuation-return" "instance-of?" "class-of" "type-name" "identifier-name" "eq?" "when" "project" "locator" "projects-table" "iterate-table" "return" "lambda" "continuation-capture" "project-class" "let" "module-ref" "not" "split-composite" "name" "unit" "receive" "symbol?" "if" "determine-project-class" "define" "project-accessor/class")}
        {Lisp-Entry "require-project" method #f 90 18 90 33 ("error" "find-project" "either" "project-accessor/class")}
        {Lisp-Entry "find-source" method #f 100 18 100 29 ("get-source-entry" "source")}
        {Lisp-Entry "find-filename" method #f 104 18 104 31 ("continuation-return" "get-name" "ci=?" "when" "get-effective-source" "source" "let" "descendant" "for-each-project-file" "return" "lambda" "continuation-capture" "filename")}
        {Lisp-Entry "catalog-name" method #f 121 20 121 32 ("workbench" "'workbench")}
        {Lisp-Entry "load-catalogs" method #f 125 18 125 31 ("catalogs-loader" "'catalogs-loader" "clear-user-message" "include-self?:" "load-catalog" "for-each-project" "user-message" "lambda" "new-thread" "thread-start!")}
        {Lisp-Entry "load-catalog" method #f 135 18 135 30 ("report?:" "activate" "require-catalog" "catalog" "let" "get-catalog?" "when" "project")}
        {Lisp-Entry "get-effective-editable?" method #f 147 20 147 43 ()}
        {Lisp-Entry "add-to-project" method #f 156 21 156 35 ("add-entry" "Jazz-File" "add-resource" "resource-class" "resource-type" "type" "Resource-File" "add-source" "get-source" "source" "let" "set-project" "class-of" "type-name" "projects-table" "table-set!" "set-parent-project" "self" "set-workbench" "Project" "is?" "when" "Project-File" "typecase" "component" "name" "project")}
        {Lisp-Entry "remove-from-project" method #f 174 21 174 40 ("remove-entry" "Jazz-File" "remove-resource" "resource-class" "resource-type" "type" "Resource-File" "remove-source" "get-source" "source" "let" "class-of" "type-name" "projects-table" "table-clear" "Project" "is?" "when" "Project-File" "typecase" "component" "name" "project")}
        {Lisp-Entry "for-each-project" method #f 194 18 194 34 ("Project" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "for-each-project-file" method #f 202 18 202 39 ("Project-File" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "for-each-jazz-file" method #f 210 18 210 36 ("Jazz-File" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "add-entry" method #f 218 18 218 27 ("categories-table" "table-set!" "entry" "category-name")}
        {Lisp-Entry "remove-entry" method #f 222 18 222 30 ("categories-table" "table-clear" "category-name")}
        {Lisp-Entry "get-entry" method #f 226 18 226 27 ("categories-table" "table-ref" "category-name")}
        {Lisp-Entry "get-entry-source" method #f 230 18 230 34 ("get-source" "when" "get-entry" "file" "let" "category-name")}
        {Lisp-Entry "add-resource" method #f 236 11 236 23 ("resources-table" "table-set!" "cons" "key" "get-base" "name" "let*" "source" "type")}
        {Lisp-Entry "remove-resource" method #f 242 11 242 26 ("resources-table" "table-clear" "cons" "key" "get-base" "name" "let*" "source" "type")}
        {Lisp-Entry "get-resource" method #f 248 18 248 30 ("resources-table" "table-ref" "cons" "key" "let" "name" "type")}
        {Lisp-Entry "get-bitmap-resource" method #f 253 18 253 37 ("get-name" "bitmap" "'bitmap" "get-resource" "resource")}
        {Lisp-Entry "get-icon-resource" method #f 257 18 257 35 ("icon" "'icon" "get-resource" "name")}
        {Lisp-Entry "add-source" method #f 261 18 261 28 ("table-ref" "cons" "sources-table" "table-set!" "get-name" "name" "let" "when" "entry" "source")}
        {Lisp-Entry "remove-source" method #f 267 18 267 31 ("table-ref" "remove!" "sources-table" "table-set!" "get-name" "name" "let" "when" "entry" "source")}
        {Lisp-Entry "get-source-entry" method #f 273 18 273 34 ("get-effective-source" "pathname=?" "entry" "lambda" "find-if" "sources-table" "table-ref" "entries" "get-name" "name" "let*" "source")}
        {Lisp-Entry "find-workbench" method #f 286 20 286 34 ("self")}
        {Lisp-Entry "update" method #f 295 18 295 24 ("resources-table" "categories-table" "sources-table" "projects-table" "empty-table")}
        {Lisp-Entry "get-class-image" method #f 307 25 307 40 ("Bitmap-Resource")}
        {Lisp-Entry "get-presentation" method #f 311 20 311 36 ()}
        {Lisp-Entry "can-cut-component?" method #f 315 20 315 38 ()}
        {Lisp-Entry "can-copy-component?" method #f 319 20 319 39 ()}
        {Lisp-Entry "can-rename-component?" method #f 323 20 323 41 ()}
        {Lisp-Entry "can-delete-component?" method #f 327 20 327 41 ()}
        {Lisp-Entry "can-move-component?" method #f 331 20 331 39 ()}
        {Lisp-Entry "get-addable-classes" method #f 335 20 335 39 ("Project-Group" "list")}}}})
"Workbench-Designer"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Workbench-Designer.jazz"} 1257476692
    {Lisp-Entry "jedi.builder.workbench.Workbench-Designer" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Workbench-Designer" class #f 44 7 44 25 ("initialize" "Designer")
        {Lisp-Entry "project-designers" slot #f 47 8 47 25 ()}
        {Lisp-Entry "initialize" method #f 55 20 55 30 ("install-projects-designers" "nextmethod" "apply" "rest")}
        {Lisp-Entry "install-projects-designers" method #f 60 11 60 37 ("add-designer" "reference" "for-each-project")}
        {Lisp-Entry "cleanup-project-designers" method #f 65 11 65 36 ("get-output" "project-designers" "set!" "save" "get-modified?" "when" "cons" "put" "class-of" "type-name" "reference" "find-project" "if" "designer" "project" "lambda" "for-each-designer" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "set-name" method #f 81 20 81 28 ("set-name" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "name" "component")}
        {Lisp-Entry "set-tag-unit" method #f 90 20 90 32 ("set-tag-unit" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "tag-unit" "parent" "component")}
        {Lisp-Entry "set-property" method #f 99 20 99 32 ("set-property" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "value" "property" "component")}
        {Lisp-Entry "add-child" method #f 108 20 108 29 ("add-child" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "parent" "child")}
        {Lisp-Entry "remove-child" method #f 117 20 117 32 ("remove-child" "" "get-project-designer" "designer" "let" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parent" "parent" "let*" "rest" "child")}
        {Lisp-Entry "move-components" method #f 126 20 126 35 ("move-components" "'move-components" "unimplemented" "rest" "destination" "components")}
        {Lisp-Entry "cut-components" method #f 135 20 135 34 ("cut-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "copy-components" method #f 144 20 144 35 ("copy-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "paste-clipboard" method #f 153 20 153 35 ("paste-clipboard" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent")}
        {Lisp-Entry "get-parents" method #f 161 11 161 22 ("get-parent" "component" "lambda" "map" "components")}
        {Lisp-Entry "find-modification-owner" method #f 172 11 172 34 ("get-presentation" "error" "get-effective-editable?" "not" "if" "find-components-owner" "owner" "let" "components")}
        {Lisp-Entry "find-components-owner" method #f 179 11 179 32 ("car" "error" "1" "length" ">" "map" "remove-duplicates" "owners" "let" "pair?" "get-parent" "Project" "is?" "reference" "eq?" "or" "if" "component" "lambda" "find-owner-project" "letrec" "components")}
        {Lisp-Entry "add-designer" method #f 198 11 198 23 ("add-project-designer" "reference:" "form:" "Designer" "new" "designer" "get-self-form" "form" "class-of" "class" "let*" "project")}
        {Lisp-Entry "add-project-designer" method #f 205 11 205 31 ("cons" "project-designers" "set!" "designer" "project")}
        {Lisp-Entry "remove-designer" method #f 209 11 209 26 ("assq" "remove!" "project-designers" "set!" "project")}
        {Lisp-Entry "get-project-designer" method #f 213 21 213 41 ("project-designers" "assq-value" "project")}
        {Lisp-Entry "for-each-designer" method #f 217 11 217 28 ("project-designers" "designer" "project" "bind" "pair" "lambda" "for-each" "proc")}
        {Lisp-Entry "project-add" method #f 224 21 224 32 ("add-designer" "Project" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "project")}
        {Lisp-Entry "project-remove" method #f 231 21 231 35 ("cleanup-project-designers" "project")}
        {Lisp-Entry "save-designer" method #f 243 21 243 34 ("designer" "project" "lambda" "for-each-designer" "save" "set!" "get-modified?" "when" "some-modified?" "let")}}}})
"Workbench-Editor"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Workbench-Editor.jazz"} 1257476692
    {Lisp-Entry "jedi.builder.workbench.Workbench-Editor" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Workbench-Editor" class #f 44 7 44 23 ("Descendants-Editor")
        {Lisp-Entry "form-model" method #f 47 20 47 30 ("nextmethod" "else" "Workbench-Tree" "tree" "get-name" "case" "form")}}}})
"Workbench-Manager"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Workbench-Manager.jazz"} 1257478269
    {Lisp-Entry "jedi.builder.workbench.Workbench-Manager" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Workbench-Manager" class #f 63 7 63 24 ("Dark-Blue" "Color" "highlight-color:" "291" "width:" "title:" "descendant" "highlight-edited?:" "show-header?:" "tree" "flat?:" "scroller" "center" "location:" "descendants" "on-highlight-document" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "highlight-document" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Exit-Listener" "Editor-View")
        {Lisp-Entry "external-name" method #f 76 25 76 38 ("workbench-manager" "'workbench-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 85 25 85 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 89 25 89 35 ()}
        {Lisp-Entry "install-in-host" method #f 93 20 93 35 ("setup-active-project" "host")}
        {Lisp-Entry "setup-active-project" method #f 97 11 97 31 ("find-project" "activate-project" "and" "when" "get-workbench" "get-active-project" "project" "workbench" "'workbench" "get-preferences" "pref" "let*")}
        {Lisp-Entry "get-tools-view" method #f 110 20 110 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 114 20 114 33 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" method #f 124 11 124 19 ("tree" "descendants" "locate")}
        {Lisp-Entry "new-controller" method #f 133 20 133 34 ("self" "Workbench-Manager-Controller" "new")}
        {Lisp-Entry "install" method #f 142 20 142 27 ("get-workbench" "set-client" "get-application" "add-exit-listener" "self" "'descendants" "locate" "set-editor" "header" "descendants" "locate-component" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "get-designer-class" method #f 150 20 150 38 ("Workbench-Designer")}
        {Lisp-Entry "prepare-exit" method #f 154 20 154 32 ("save-designer" "get-form" "get-origin" "file?" "designer" "and" "when")}
        {Lisp-Entry "on-designer" method #f 164 20 164 31 ("child-remove" ":child-remove" "parent:" "child:" "get-property" "child-add" ":child-add" "get-kind" "case" "nextmethod" "evt")}
        {Lisp-Entry "child-add" method #f 171 11 171 20 ("designer" "project-add" "Project" "is?" "when" "parent" "child")}
        {Lisp-Entry "child-remove" method #f 176 11 176 23 ("designer" "project-remove" "Project" "is?" "when" "child")}
        {Lisp-Entry "key-press" method #f 186 20 186 29 ("launch-selection" "case" "key")}
        {Lisp-Entry "on-highlight-document" method #f 191 11 191 32 ("highlight-document" "evt")}
        {Lisp-Entry "on-add-project" method #f 195 11 195 25 ("add-project" "evt")}
        {Lisp-Entry "on-add-file" method #f 199 11 199 22 ("add-file" "evt")}
        {Lisp-Entry "on-add-group" method #f 203 11 203 23 ("add-group" "evt")}
        {Lisp-Entry "on-install-project" method #f 207 11 207 29 ("install-project" "directory:" "extensions:" "choose-file" "directory" "lambda" "with-import-directory" "file" "selected-object" "parent" "get-shift?" "current-directory?" "let*" "evt")}
        {Lisp-Entry "on-import-files" method #f 216 11 216 26 ("get-shift?" "import-files" "evt")}
        {Lisp-Entry "on-import-directory" method #f 220 11 220 30 ("get-shift?" "import-directory" "evt")}
        {Lisp-Entry "on-synchronize-content" method #f 224 11 224 33 ("synchronize-content" "evt")}
        {Lisp-Entry "on-update-catalog" method #f 228 11 228 28 ("update-catalog" "evt")}
        {Lisp-Entry "on-edit" method #f 232 11 232 18 ("edit-selection" "evt")}
        {Lisp-Entry "on-activate" method #f 236 11 236 22 ("activate-selection" "evt")}
        {Lisp-Entry "on-run" method #f 240 11 240 17 ("run-selection" "evt")}
        {Lisp-Entry "on-debug" method #f 244 11 244 19 ("debug-selection" "evt")}
        {Lisp-Entry "on-launch" method #f 248 11 248 20 ("launch-selection" "evt")}
        {Lisp-Entry "on-distribute" method #f 252 11 252 24 ("distribute-selection" "evt")}
        {Lisp-Entry "on-properties" method #f 256 11 256 24 ("show-properties" "evt")}
        {Lisp-Entry "highlight-document" method #f 265 11 265 29 ("highlight-document-component" "get-tree" "acquire-focus" "find-source" "project-file" "get-workbench" "workbench" "not" "get-moniker" "moniker" "get-controller" "controller" "let*" "bell" "Document" "is-not?" "if" "current-document" "guest" "let")}
        {Lisp-Entry "highlight-document-component" method #f 281 11 281 39 ("row-rank" "set-single-selection" "ensure-expanded" "bell" "not" "if" "component-row" "row" "get-tree" "tree" "let*" "component")}
        {Lisp-Entry "select-current" method #f 295 18 295 32 ("select-project")}
        {Lisp-Entry "select-project" method #f 299 11 299 25 ("activate-project" "when" "Project-Selector" "get-modal" "project" "let")}
        {Lisp-Entry "edit-current" method #f 310 18 310 30 ("current-project" "edit-project")}
        {Lisp-Entry "edit-selection" method #f 314 11 314 25 ("edit-project" "Project" "edit-workbench" "Workbench" "typecase" "object" "lambda" "for-each" "selected-objects" "objects" "let")}
        {Lisp-Entry "Workbench-File" definition #f 323 14 323 28 ("Profile" "File")}
        {Lisp-Entry "edit-workbench" method #f 327 11 327 25 ("edit-document" "Workbench-File" "file" "get-application" "appl" "let")}
        {Lisp-Entry "edit-project" method #f 333 11 333 23 ("get-application" "edit-document" "find-unit-source" "source" "not" "get-unit-name" "unit-name" "let" "bell" "Project" "is-not?" "if" "project")}
        {Lisp-Entry "Project-Templates-Directory" definition #f 350 14 350 41 ("Jazz" "Directory")}
        {Lisp-Entry "File-Templates-Directory" definition #f 353 14 353 38 ("Jazz" "Directory")}
        {Lisp-Entry "add-project" method #f 357 21 357 32 ("get-workbench" "selected-object" "either" "add-project-to")}
        {Lisp-Entry "add-project-to" method #f 361 21 361 35 ("user-message" "car" "activate-project" "collect-projects" "projects" "select-component" "descendants" "'descendants" "process-refresh" "acquire-focus" "update-project-catalog" "designer" "get-project-designer" "save" "for-each" "recursive?:" "import-pathname" "src-component" "not-null?" "leaves?:" "nodes?:" "get-content" "ci=?" "test:" "get-name" "member?" "not" "dir" "collect-if" "src-content" "src-directory" "install-project" "project-component" "append" "project-file" "lambda" "with-update-locked" "parse" "load-package" "repository-add-package" "new-file" "package-file" "repository-find-package" "unless" "copy-template" "project-directories" "'project-directories" "format" "project-unit" "'project-unit" "project-title" "'project-title" "'project" "product-directories" "'product-directories" "product-unit" "'product-unit" "product-title" "'product-title" "'product" "'package" "cons" "list" "associations" "destination" "Project-Templates-Directory" "new-directory" "capitalize" "project" "last" "product" "split-identifier" "->string" "map" "package-parts" "string->symbol" "package-name" "repository-library-directory" "tokenise-filename" "Directory" "new" "directory" "let*" "New-Project-Dialog" "get-modal" "package" "repository" "template" "kind" "receive" "Project" "Project-Group" "is?" "or" "when" "get-tree" "tree" "let" "parent")}
        {Lisp-Entry "add-file" method #f 410 21 410 29 ("get-tree" "select-component" "ascendant-project" "import-pathname" "component" "copy-template" "'unit" "'name" "cons" "list" "associations" "parse" "find-pathname-unit" "unit" "destination" "concatenate" "File-Templates-Directory" "new-file" "extract-extension" "extension" "let*" "directory:" "New-File-Dialog" "get-modal" "name" "directory" "template" "kind" "receive" "create-directories" "yes" "'yes" "question" "'question" "type:" "get-list" "format" "message-box" "=" "exists?" "get-current-directory" "Profile" "Directory" "must-exist?:" "default-import-directory" "default-directory" "Project" "Project-Group" "is?" "or" "when" "get-workbench" "selected-object" "either" "parent" "let")}
        {Lisp-Entry "add-group" method #f 429 21 429 30 ("parent:" "get-tree" "add-component-class" "Project" "Project-Group" "is?" "or" "when" "get-workbench" "selected-object" "either" "parent" "let")}
        {Lisp-Entry "install-project" method #f 441 11 441 26 ("get-presentation" "user-message" "load-catalog" "get-tree" "reorder-component" "set-tag-unit" "designer" "add-child" "parent:" "workbench:" "new" "project" "Project" "subtype?" "get-workbench" "workbench" "module-ref" "class" "get-name" "error" "not" "if" "parse" "find-pathname-unit" "unit" "get-base" "string->symbol" "name" "list" "validate-pathnames" "when" "ascendant-project" "parent-project" "let" "descendant?" "parent" "file")}
        {Lisp-Entry "MaxFiles-Warning" definition #f 466 14 466 30 ("100")}
        {Lisp-Entry "import-filter?" method #f 470 11 470 25 ("get-application" "known-extension-frame-class" "get-name" "ci=?" "test:" "member?" "or" "if" "get-include-extensions" "effective-include-extensions" "extensions" "get-extension" "ext" "let" "file" "project")}
        {Lisp-Entry "import-directory" method #f 480 11 480 27 ("parse" "user-message" "descendants" "'descendants" "designer" "process-refresh" "import-pathname" "component" "let" "list" "validate-pathnames" "yes" "'yes" "question" "'question" "type:" "format" "message-box" "eq?" "or" "when" "MaxFiles-Warning" "max-count:" "import-filter?" "file" "filter:" "count-files" "count" "directory:" "choose-directory" "lambda" "with-import-directory" "directory" "ascendant-project" "project" "selected-object" "parent" "let*" "current-directory?")}
        {Lisp-Entry "import-files" method #f 495 11 495 23 ("import-pathnames" "directory:" "multiple-selection?:" "choose-file" "directory" "lambda" "with-import-directory" "files" "ascendant-project" "project" "selected-object" "parent" "let*" "current-directory?")}
        {Lisp-Entry "import-pathnames" method #f 504 21 504 37 ("format-plural" "format-cardinality" "user-message" "length" "count" "get-name" "key:" "nu<?" "sort" "descendants" "'descendants" "designer" "process-refresh" "import-pathname" "component" "let" "pathname" "lambda" "for-each" "validate-pathnames" "when" "parent" "pathnames" "project")}
        {Lisp-Entry "import-pathname" method #f 516 11 516 26 ("import-file" "import-filter?" "or" "File" "sort?:" "directories?:" "files?:" "import-pathname" "string=?" "unless" "lambda" "iterate-directory" "when" "directory" "'directory" "set-property" "descendant?:" "not" "design-events?:" "designer" "add-child" "directory:" "Project-Directory" "new" "subgroup" "install-project" "determine-project-file?" "exists?" "and" "if" "format" "new-file" "project-file" "Directory" "typecase" "get-name" "name" "let" "recursive?" "recursive?:" "descendant?" "parent" "pathname" "project")}
        {Lisp-Entry "import-file" method #f 551 11 551 22 ("add-entry" "set-name" "when" "source" "'source" "set-property" "descendant?:" "not" "design-events?:" "designer" "add-child" "get-workbench" "workbench" "source:" "name:" "new" "project-file" "get-base" "string->symbol" "Jazz-File" "eq?" "if" "name" "get-extension" "extension-model" "model" "let*" "descendant?" "parent" "file")}
        {Lisp-Entry "determine-project-file?" method #f 564 11 564 34 ("Project" "autoload" "subtype?" "in-manifest?" "extends" "name" "type" "package" "receive" "extract-jazz-file-category" "info" "ci=?" "when" "get-extension" "ext" "let" "file")}
        {Lisp-Entry "extract-jazz-file-category" definition #f 577 15 577 41 ("type/name/extends" "receive" "extends" "'extends" "Common" "'Common" "'package" "Unknown" "'Unknown" "'interface" "Object" "'Object" "'class" "or" "name" "scan" "interface" "class" "memq?" "type" "toplevel" "extract-category" "symbol?" "cadr" "package" "cdr" "when" "extract-package" "values" "in" "'in" "car" "eq?" "pair?" "and" "if" "read" "in/toplevel" "let" "err" "Read-Error" "catch" "reader" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "extract-jazz-file-toplevel" "define" "file")}
        {Lisp-Entry "default-import-directory" method #f 623 11 623 35 ("anchorize" "when" "dir" "let" "else" "get-directory" "Project-Directory" "Project" "typecase" "lambda" "default" "letrec" "must-exist?" "must-exist?:" "object")}
        {Lisp-Entry "with-import-directory" method #f 638 11 638 32 ("lambda" "with-preserved-current-directory" "exists?" "and" "if" "default-import-directory" "not" "essay" "default-directory" "let" "proc" "object" "current-directory?")}
        {Lisp-Entry "extension-model" method #f 647 11 647 26 ("Project-File" "else" "Sound-File" "Icon-File" "Cursor-File" "Bitmap-File" "C-File" "Java-File" "Jazz-File" "ci=?" "test:" "member?" "cond" "ext")}
        {Lisp-Entry "ascendant-project" method #f 658 21 658 38 ("get-parent" "ascendant-project" "Project" "is?" "if" "component")}
        {Lisp-Entry "synchronize-content" method #f 669 11 669 30 ("content:" "confirmation" "'confirmation" "type:" "Synchronize-Box" "class:" "reverse" "bind" "info" "for-each" "children:" "add-row" "Bitmap-Resource" "image:" "join" "title:" "Tree-Node" "c0" "add" "'tree" "locate" "tree" "200" "500" "Dimension" "size:" "Synchronize-Border" "border" "message-box" "null?" "get-output" "out-of-synch" "case-insensitive?:" "right-key:" "left-key:" "key:" "ci<?" "sort" "directory?" "when" ":same" ":right" "list" "put" ":left" "case" "cons" "right" "left" "key" "what" "merge-ordered" "get-content" "content" "get-children" "children" "path" "fold" "letrec" "pathname" "pathname-name" "get-name" "->string" "component" "lambda" "component-name" "List-Factory" "new" "fact" "let" "error" "exists?" "not" "if" "must-exist?:" "default-import-directory" "directory" "ascendant-project" "project" "selected-object" "object" "let*")}
        {Lisp-Entry "validate-pathnames" method #f 722 11 722 29 ("for-each" "get-entry" "jazz-file" "get-base" "string->symbol" "name" "let*" "Jazz-File" "eq?" "get-extension" "extension-model" "model" "let" "import-filter?" "when" "File" "recursive?:" "sort?:" "directories?:" "files?:" "iterate-directory" "Directory" "typecase" "pathname" "iterate" "get-workbench" "workbench" "letrec" "report" "lambda" "validate" "pathnames" "project")}
        {Lisp-Entry "validate" method #f 747 11 747 19 ("message-box" "when" "0" "subseq" "get-presentation" "get-name" ":hyperlink" ":bulleted" "list" "highlight-document-component" "close-modal-dialog" "action" "get-project" "project" "map" ",header" "text" "format-is/are" "format-y/ies" "format-plural" "format" "header" ">" "too-many?" "10" "max-displayed" "length" "count" "let*" "null?" "if" "get-output" "put" "jazz-file" "lambda" "List-Factory" "new" "already-defined" "get-workbench" "workbench" "let" "iterate")}
        {Lisp-Entry "activate-selection" method #f 791 18 791 36 ("selected-object" "activate-object")}
        {Lisp-Entry "activate-object" method #f 795 11 795 26 ("bell" "concrete-descendant" "let" "activate-project" "if" "include-self?:" "continuation-return" "concrete?" "Project" "is?" "and" "when" "level" "descendant" "for-each-descendant" "return" "lambda" "continuation-capture" "find-concrete-descendant" "define" "object")}
        {Lisp-Entry "activate-project" method #f 817 11 817 27 ("update-project-actions" "get-application" "appl" "highlight-component" "ensure-expanded" "visible?:" "user-data-row" "row" "set-active-project" "unhighlight-component" "when" "get-tree" "tree" "let" "get-active-project" "eq?" "unless" "project")}
        {Lisp-Entry "update-catalog" method #f 837 11 837 25 ("selected-objects" "objects" "let" "lambda" ":wait" "with-cursor" "get-children" "for-each" "Project-Group" "update-project-catalog" "Project" "typecase" "object" "update" "define")}
        {Lisp-Entry "update-project-catalog" method #f 851 11 851 33 ("update" "report?:" "activate" "lambda" "post-catalog" "require-catalog" "catalog" "let" "project")}
        {Lisp-Entry "test-current" method #f 864 18 864 30 ("project-test" "current-project" "project" "let")}
        {Lisp-Entry "run-current" method #f 874 18 874 29 ("run-project" "current-project" "project" "let")}
        {Lisp-Entry "run-selection" method #f 879 18 879 31 ()}
        {Lisp-Entry "run-project" method #f 883 11 883 22 ("get-application" "run-project" "project")}
        {Lisp-Entry "debug-current" method #f 892 18 892 31 ("current-project" "debug-project" "executable" "executable:")}
        {Lisp-Entry "debug-selection" method #f 896 18 896 33 ("debug-project" "current-project" "project" "let")}
        {Lisp-Entry "debug-project" method #f 901 11 901 24 ("debugger-interactive?:" "get-application" "debug-project" "executable" "executable:" "project")}
        {Lisp-Entry "launch-selection" method #f 910 18 910 34 ("selected-components" "edit-document" "get-extension" "ext" "get-effective-source" "file" "let*" "Project-File" "debug-project" "Project" "typecase" "component" "lambda" "for-each" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "on-build-current" method #f 929 11 929 27 ("build-project" "bell" "not" "if" "current-project" "project" "let" "evt")}
        {Lisp-Entry "build-current" method #f 936 18 936 31 ("build-project" "current-project" "project" "let")}
        {Lisp-Entry "build-project" method #f 941 11 941 24 ("project-build" "project")}
        {Lisp-Entry "compile-current" method #f 950 18 950 33 ("compile-moniker" "get-controller" "get-moniker" "moniker" "save" "get-modified?" "Document" "is?" "and" "when" "current-document" "guest" "let")}
        {Lisp-Entry "compile-moniker" method #f 959 18 959 33 ("compile-file" "error" "not" "if" "find-source" "project-file" "get-workbench" "workbench" "let*" "moniker")}
        {Lisp-Entry "compile-file" method #f 967 11 967 23 ("show-console?:" "->string" "list" "arguments:" "launch-executable" "get-project" "project-kernel" "kernel" "bell" "not" "if" "parse" "find-pathname-unit" "name" "let" "project-file" "moniker")}
        {Lisp-Entry "preprocess-current" method #f 980 18 980 36 ("preprocess-file" "error" "not" "if" "find-source" "file" "get-workbench" "workbench" "get-controller" "get-moniker" "moniker" "let*" "save" "get-modified?" "Document" "is?" "and" "when" "current-document" "guest" "let")}
        {Lisp-Entry "preprocess-file" method #f 993 11 993 26 ("get-duration-in-seconds" "force?:" "preprocess" "Output-Log" "select-palette" "select-results" "clear-results" "Timer" "new" "timer" "get-output-log" "output" "user-message" "prepare-directories" "prepare-maps" "get-project" "project" "thread" "lambda" "proc" "let" "file" "moniker")}
        {Lisp-Entry "clean-current" method #f 1015 18 1015 31 ("clean-project" "current-project" "project" "let")}
        {Lisp-Entry "clean-project" method #f 1020 11 1020 24 ("bell" "concrete?" "if" "project")}
        {Lisp-Entry "on-distribute-current" method #f 1032 11 1032 32 ("distribute-project" "bell" "not" "if" "selected-project" "project" "let" "evt")}
        {Lisp-Entry "distribute-current" method #f 1039 18 1039 36 ("distribute-project" "current-project" "project" "let")}
        {Lisp-Entry "distribute-selection" method #f 1044 11 1044 31 ("selected-project" "distribute-project")}
        {Lisp-Entry "distribute-project" method #f 1048 11 1048 29 ("set-visible?" "bring-to-front" "get-guest" "compare-trees" "lambda" ":wait" "with-cursor" "host-visible?:" "ignored-extensions:" "ignored-leaves:" "ignored-nodes:" "left-content:" "right-moniker:" "left-moniker:" "Compare-Directories" "new-frame" "frame" "extensions" "files" "list" "ignored-dirs" "project-distribution-list" "content" "project-distribution-directory" "right" "project-distribution" "left" "backup" "'backup" "mode" "let*" "project")}
        {Lisp-Entry "selected-object" method #f 1069 11 1069 26 ("selected-component" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-objects" method #f 1074 11 1074 27 ("selected-components" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-project" method #f 1079 11 1079 27 ("Project" "is?" "when" "selected-object" "object" "let")}
        {Lisp-Entry "selected-concrete-project" method #f 1085 11 1085 36 ("concrete?" "Project" "is?" "and" "when" "selected-object" "object" "let")}
        {Lisp-Entry "current-project" method #f 1092 11 1092 26 ("error" "get-active-project" "not" "if")}
        {Lisp-Entry "new-menu" method #f 1103 18 1103 26 ("get-tree" "client:" "Element-Menu" "new" "when" "else" "new-project-menu" "new-concrete-project-menu" "concrete?" "if" "Project" "new-group-menu" "Project-Group" "new-workbench-menu" "Workbench" "typecase" "selected-object" "object" "let")}
        {Lisp-Entry "new-group-menu" method #f 1117 11 1117 25 ("layout-menu" "cleanup-separators" "update-group/project-menu" "get-tree" "client:" "Group-Menu" "new" "menu" "let" "object")}
        {Lisp-Entry "new-workbench-menu" method #f 1125 11 1125 29 ("layout-menu" "cleanup-separators" "update-group/project-menu" "get-catalog?" "update-catalog" "'update-catalog" "locate" "set-visible?" "get-tree" "client:" "Workbench-Menu" "new" "menu" "let" "object")}
        {Lisp-Entry "new-concrete-project-menu" method #f 1134 11 1134 36 ("layout-menu" "cleanup-separators" "update-group/project-menu" "get-catalog?" "update-catalog" "'update-catalog" "locate" "set-visible?" "get-tree" "client:" "Concrete-Project-Menu" "new" "menu" "let" "object")}
        {Lisp-Entry "new-project-menu" method #f 1143 11 1143 27 ("layout-menu" "cleanup-separators" "update-group/project-menu" "get-catalog?" "update-catalog" "'update-catalog" "locate" "set-visible?" "get-tree" "client:" "Project-Menu" "new" "menu" "let" "object")}
        {Lisp-Entry "update-group/project-menu" method #f 1152 11 1152 36 ("import-directory" "'import-directory" "import-files" "'import-files" "install-project" "'install-project" "add-file" "'add-file" "add-project" "'add-project" "1" "get-selection" "length" ">" "get-tree" "tree" "set-visible?" "when" "locate-component" "item" "let" "name" "hide-item" "define" "menu")}
        {Lisp-Entry "describe-state" method #f 1172 11 1172 25 ("resource" "get-resources-table" "category" "get-categories-table" "name" "get-projects-table" "table-keys/values" "when" "0" "subseq" "if" "project" "bind" "for-each" "5" "length" ">" "more?" "car" "class-of" "type-name" "pair" "lambda" "key:" "designer" "get-project-designers" "<" "sort" "pairs" "let*" "get-active-project" ":console" "format" "get-workbench" "workbench" "let" "pos")}}
      {Lisp-Entry "Workbench-Manager-Controller" class #f 1218 7 1218 35 ("Editor-View-Controller")
        {Lisp-Entry "document-status" method #f 1221 20 1221 35 ()}}
      {Lisp-Entry "Synchronize-Border" class #f 1230 7 1230 25 ("tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "flat?:" "Outline-Border" "name:" "Color" "border-color:" "solid" "border-type:" "Border-View")}
      {Lisp-Entry "Group-Menu" class #f 1247 7 1247 17 ("delete-selection" "update-catalog" "synchronize-content" "import-directory" "cut" "import-files" "workbench-manager" "Action" "action:" "Bitmap-Resource" "icon:" "add-item" "before:" "title:" "add-file" "name:" "Component-Menu")}
      {Lisp-Entry "Project-Menu" class #f 1268 7 1268 19 ("delete-selection" "update-catalog" "synchronize-content" "import-directory" "cut" "import-files" "add-file" "workbench-manager" "Action" "action:" "Bitmap-Resource" "icon:" "add-item" "before:" "title:" "edit" "name:" "Component-Menu")}
      {Lisp-Entry "Concrete-Project-Menu" class #f 1291 7 1291 28 ("workbench-manager" "Action" "action:" "default?:" "cut" "before:" "title:" "activate" "name:" "Project-Menu")}
      {Lisp-Entry "Workbench-Menu" class #f 1305 7 1305 21 ("visible?:" "synchronize-content" "Bitmap-Resource" "icon:" "import-files" "install-project" "workbench-manager" "Action" "action:" "add-file" "before:" "title:" "add-project" "name:" "Project-Menu")}
      {Lisp-Entry "Element-Menu" class #f 1321 7 1321 19 ("delete-selection" "launch" "workbench-manager" "Action" "action:" "Bitmap-Resource" "icon:" "default?:" "cut" "before:" "title:" "edit" "name:" "Component-Menu")}}})
"Workbench-Manager-Actions"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Workbench-Manager-Actions.jazz"} 1257476692
    {Lisp-Entry "jedi.builder.workbench.Workbench-Manager-Actions" module #f 37 18 37 66 ("jazz")
      {Lisp-Entry "Workbench-Manager-Actions" class #f 46 7 46 32 ("on-launch" "launch" "on-add-dependency" "add-dependency" "on-activate" "activate" "on-update-catalog" "update-catalog" "on-edit" "edit" "on-synchronize-content" "synchronize-content" "on-import-directory" "import-directory" "on-import-files" "import-files" "on-install-project" "install-project" "on-add-group" "add-group" "on-add-file" "add-file" ":control" "Shortcut" "shortcut:" "on-add-project" ":guest" ":client" ":form" "Event-Handler" "action-handler:" "add-project" "name:" "Actions")}}})
"Workbench-Preferences"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "preference" "Workbench-Preferences.jazz"} 1257476694
    {Lisp-Entry "jedi.builder.preference.Workbench-Preferences" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "Workbench-Preferences" class #f 45 7 45 28 ("title:" "initialize" "Preferences")
        {Lisp-Entry "active-project" property #f 48 12 48 26 ()}
        {Lisp-Entry "get-active-project" accessor #f 48 51 48 59 ()}
        {Lisp-Entry "set-active-project" accessor #f 48 51 48 59 ()}}}})
"Workbench-Tree"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Workbench-Tree.jazz"} 1257476694
    {Lisp-Entry "jedi.builder.workbench.Workbench-Tree" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Workbench-Tree" class #f 49 7 49 21 ("show-branches?:" "reorderable?:" "editable?:" "draggable?:" ":icons" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "focus-actions" method #f 56 20 56 33 ("nextmethod" "workbench-tree" "'workbench-tree" "find-actions" "cons")}
        {Lisp-Entry "on-add-project" method #f 61 11 61 25 ("get-manager" "add-project" "evt")}
        {Lisp-Entry "on-add-file" method #f 65 11 65 22 ("get-manager" "add-file" "evt")}
        {Lisp-Entry "on-add-group" method #f 69 11 69 23 ("get-manager" "add-group" "evt")}
        {Lisp-Entry "get-manager" method #f 73 11 73 22 ("get-host" "get-guest")}
        {Lisp-Entry "context-menu" method #f 77 20 77 32 ("track-popup-menu" "when" "new-menu" "menu" "lambda" "with-context-click" "get-manager" "manager" "let" "pos")}
        {Lisp-Entry "can-copy?" method #f 89 20 89 29 ()}
        {Lisp-Entry "can-paste-properties?" method #f 93 20 93 41 ()}
        {Lisp-Entry "get-draggable?" method #f 97 20 97 34 ()}
        {Lisp-Entry "confirm-close" method #f 102 20 102 33 ("confirm-action" "components")}
        {Lisp-Entry "update-selection" method #f 106 20 106 36 ("selected-components" "expand-state")}
        {Lisp-Entry "use-add-menu?" method #f 110 20 110 33 ()}
        {Lisp-Entry "row-state" method #f 114 20 114 29 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}
        {Lisp-Entry "double-click" method #f 120 20 120 32 ("launch-selection" "Group" "or" "unless" "nextmethod" "activate-selection" "concrete?" "Project" "is?" "and" "if" "selected-component" "component" "get-manager" "manager" "let" "pos")}
        {Lisp-Entry "return-press" method #f 131 20 131 32 ("launch-selection" "Group" "unless" "activate-selection" "Project" "is?" "if" "selected-component" "component" "get-manager" "manager" "let" "key")}
        {Lisp-Entry "receive-files" method #f 140 20 140 33 ("bell" "ascendant-project" "import-pathnames" "Project-Group" "Project" "is?" "or" "get-manager" "manager" "get-row" "get-user-data" "get-workbench" "not" "if" "data" "view->tree" "cell" "let*" "pathnames" "pos")}
        {Lisp-Entry "addable-root-classes" method #f 151 11 151 31 ("Module" "Project" "Group" "list")}}}})
"Workbench-Tree-Actions"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "Workbench-Tree-Actions.jazz"} 1257476694
    {Lisp-Entry "jedi.builder.workbench.Workbench-Tree-Actions" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "Workbench-Tree-Actions" class #f 46 7 46 29 ("on-add-group" "add-group" "on-add-file" "add-file" ":control" "Shortcut" "shortcut:" "on-add-project" ":focus" "Event-Handler" "action-handler:" "add-project" "name:" "Actions")}}})
"_builder"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "_builder.jazz"} 1257476697
    {Lisp-Entry "jedi.builder" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "find-kernel" definition #f 48 20 48 31 ("kernel-platform" "executable-extension" "concatenate" "tokenise-filename" "File" "new" "kernel-source" "destination-directory" "dir" "let" "destination")}
      {Lisp-Entry "require-kernel" definition #f 53 20 53 34 ("error" "exists?" "if" "find-kernel" "kernel" "let" "destination")}
      {Lisp-Entry "find-actual-kernel" definition #f 60 20 60 38 ("tokenise-filename" "File" "new" "kernel-platform" "executable-extension" "kernel-install" "concatenate" "filename" "let")}
      {Lisp-Entry "require-actual-kernel" definition #f 65 20 65 41 ("error" "exists?" "if" "find-actual-kernel" "kernel" "let")}
      {Lisp-Entry "launch-executable" definition #f 72 20 72 37 ("show-console:" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" "get-parent" "directory:" "parse" "path:" "list" "open-process" "debug" "append" "arguments-arg" "either" "runtime-arg" "let*" "wait?" "wait?:" "show-console?" "show-console?:" "arguments" "arguments:" "runtime-arguments" "runtime-arguments:" "executable")}}})
"_catalog"
 ({Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "_catalog.jazz"} 1257476699
    {Lisp-Entry "jazz.catalog" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "catalog-thread" definition #f 52 12 52 26 ()}
      {Lisp-Entry "get-catalog-thread" definition #f 56 13 56 31 ("set!" "thread-start!" "thread-start-loop" "thread" "let" "catalog-thread" "either" "catalog" "'catalog" "thread-loop" "lambda" "new-thread" "make-catalog-thread" "define")}
      {Lisp-Entry "post-catalog" definition #f 70 20 70 32 ("post-catalog" "'post-catalog" "get-catalog-thread" "thread-post" "thunk")}
      {Lisp-Entry "with-safe-explore" definition #f 80 20 80 37 ("throw-cancel" "no" "'no" "neq?" "selection:" "get-application" "edit-document" "get-range" "range" "get-source" "source" "yes" "'yes" "eq?" "cancel" "'cancel" "ignore" "cancel:" "no:" "yes:" "confirmation" "'confirmation" "type:" "exception-reason" "message-box" "case" "result" "when" "Explore-Error" "is?" "object?" "and" "exc" "let" "obj" "lambda" "with-exception-filter" "ask" "'ask" "action" "action:" "proc")}}})
"_development"
 ({Lisp-File-Entry {File jedi "src" "jedi" "development" "_development.jazz"} 1257476707
    {Lisp-Entry "jedi.development" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "i" definition #f 67 20 67 21 ("inspect" "object")}
      {Lisp-Entry "ins" definition #f 71 20 71 23 ("inspect-object" "object")}
      {Lisp-Entry "inspect-form" definition #f 75 20 75 32 ("newline" "form?:" "form->node" "pretty-print" "get-form" "Form" "is?" "if" "form" "let" "output" "lambda" "with-text-inspector" "form/component")}
      {Lisp-Entry "inspect-branches" definition #f 83 20 83 36 ("newline" "form?:" "form->node" "pretty-print" "not" "get-restore-form" "form" "get-name" "format" "set!" "if" "branch" "for-each-branch" "first?" "let" "output" "lambda" "with-text-inspector" "component")}
      {Lisp-Entry "with-text-inspector" definition #f 100 20 100 39 ("set-visible?" "bring-to-front" "set-modified?" "text-beginning" "set-caret" "get-output-string" "set-string-content" "get-guest" "text" "host-workspace:" "host-visible?:" "Jazz-Text-View" "new-frame" "frame" "selected-workspace" "get-name" "workspace" "let*" "open-output-string" "output" "let" "proc")}
      {Lisp-Entry "methods" definition #f 118 20 118 27 ("get-fields" "table-values" "Method" "collect-type" "field-name" "map" "class-of" "class?" "if" "class" "let" "class/obj")}
      {Lisp-Entry "design" definition #f 128 20 128 26 ("client:" "new-frame" "error" "else" "Manager-View" "'Manager-View" "Component" "View-Editor" "'View-Editor" "autoload" "View" "typecase" "editor" "new" "class?" "if" "component" "let" "class/component")}
      {Lisp-Entry "cc" definition #f 143 20 143 22 ("initial-color:" "Color-Request" "get-modal" "dispatch" "Color" "is?" "not" "or" "if" "color" "let" "color-or-name")}
      {Lisp-Entry "cf" definition #f 148 20 148 22 ("choose-file")}
      {Lisp-Entry "cmf" definition #f 152 20 152 23 ("multiple-selection?:" "choose-file")}
      {Lisp-Entry "cnf" definition #f 156 20 156 23 ("choose-new-file")}
      {Lisp-Entry "cd" definition #f 160 20 160 22 ("choose-directory")}
      {Lisp-Entry "cp" definition #f 164 20 164 22 ("user-message" "set-clipboard-text" "cd" "get-list" "format" "path" "let")}
      {Lisp-Entry "find-files" definition #f 176 20 176 30 ("debug" "match" "when" "get-name" "name" "file" "lambda" "iterate-directory" "Regular-Expression" "new" "regexp" "let" "directory" "pattern")}
      {Lisp-Entry "rename-files" definition #f 185 20 185 32 ("format-plural" "format" "message-box" "directories?:" "files?:" "increase!" "move-pathname" "get-directory" "new-file" "replace" "new-name" "when" "match" "get-name" "name" "let*" "file" "lambda" "iterate-directory" "List-Factory" "failed" "0" "succeeded" "replacement-regexp" "Regular-Expression" "new" "find-regexp" "title:" "choose-directory" "directory" "let" "replacement" "find")}
      {Lisp-Entry "Receiver-View" class #f 210 7 210 20 ("Dark" "name:" "Color" "background:" "set-invite" "get-invite" "initialize" "View")
        {Lisp-Entry "invite" property #f 213 12 213 18 ()}
        {Lisp-Entry "receiver" property #f 214 12 214 20 ()}
        {Lisp-Entry "get-receiver" accessor #f 214 45 214 53 ()}
        {Lisp-Entry "set-receiver" accessor #f 214 45 214 53 ()}
        {Lisp-Entry "get-invite" method #f 221 18 221 28 ("invite")}
        {Lisp-Entry "set-invite" method #f 225 18 225 28 ("invalidate-view" "invite" "set!" "value")}
        {Lisp-Entry "receive-files" method #f 230 20 230 33 ("self" "receiver" "files" "pos")}
        {Lisp-Entry "Background-Font" definition #f 234 14 234 29 ("Heading1" "name:" "Font")}
        {Lisp-Entry "draw" method #f 238 20 238 24 ("Gray" "get-v" "2" "get-h" "+" "draw-text" "Black" "name:" "Color" "set-text-color" "get-display-size" "center" "pos" "get-text-extent" "extent" "invite" "either" "localize" "title" "let*" "Background-Font" "set-font" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "setup-receiver" definition #f 251 20 251 34 ("receiver:" "224" "434" "Dimension" "host-size:" "169" "219" "Point" "host-position:" "either" "host-title:" "Receiver-View" "new-palette" "invite" "invite:" "size" "size:" "position" "position:" "title" "title:" "receiver")}
      {Lisp-Entry "rer" definition #f 265 20 265 23 ("match" "Regular-Expression" "new" "replace" "string" "to" "from")}
      {Lisp-Entry "debug-table" definition #f 274 20 274 31 ("0" "display-table" "set-current-request" "get-sql-console-text" "text" "let" "250" "max-display" "max-display:" "name" "name:" "table")}}})
"_doc"
 ({Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "_doc.jazz"} 1257476709
    {Lisp-Entry "jazz.doc" module #f 37 8 37 16 ("jazz")}})
"_ide"
 ({Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "_ide.jazz"} 1257476714
    {Lisp-Entry "jazz.ide" module #f 37 8 37 16 ("jazz")}})
"_jedi"
 ({Lisp-File-Entry {File jedi "src" "jedi" "_jedi.jazz"} 1257476716
    {Lisp-Entry "jedi" module #f 37 8 37 12 ("jazz")}})
"_login"
 ({Lisp-File-Entry {File jedi "src" "jedi" "login" "_login.jazz"} 1257476723
    {Lisp-Entry "jedi.login" module #f 37 8 37 18 ("jazz")
      {Lisp-Entry "choose-login" definition #f 45 20 45 32 ("Login-Dialog" "get-modal" "Login-Bindings" "new" "set-bindings" "unless" "begin" "unwind-protect" "get-bindings" "actual" "let")}}})
"_recorder"
 ({Lisp-File-Entry {File jedi "lib" "jazz.recorder" "src" "jazz" "recorder" "_recorder.jazz"} 1257476728
    {Lisp-Entry "jazz.recorder" module #f 37 8 37 21 ("jazz")}})
"_workbench"
 ({Lisp-File-Entry {File jedi "src" "jedi" "builder" "workbench" "_workbench.jazz"} 1257476740
    {Lisp-Entry "jedi.builder.workbench" module #f 37 8 37 30 ("jazz")
      {Lisp-Entry "*active-repositories*" definition #f 49 12 49 33 ()}
      {Lisp-Entry "get-active-repositories" definition #f 53 13 53 36 ("*active-repositories*")}
      {Lisp-Entry "set-active-repositories" definition #f 57 13 57 36 ("*active-repositories*" "set!" "repositories")}
      {Lisp-Entry "*active-workbench*" definition #f 66 12 66 30 ()}
      {Lisp-Entry "get-workbench" definition #f 70 20 70 33 ("*active-workbench*")}
      {Lisp-Entry "set-workbench" definition #f 74 20 74 33 ("*active-workbench*" "set!" "workbench")}
      {Lisp-Entry "*active-project*" definition #f 83 12 83 28 ()}
      {Lisp-Entry "get-active-project" definition #f 87 20 87 38 ("*active-project*")}
      {Lisp-Entry "set-active-project" definition #f 91 20 91 38 ("*active-project*" "set!" "project")}
      {Lisp-Entry "collect-projects" definition #f 95 20 95 36 ("queue-list" "enqueue" "concrete?" "Project" "is?" "and" "when" "level" "file" "lambda" "for-each-descendant" "new-queue" "projects" "let" "project")}
      {Lisp-Entry "build-preferences" definition #f 110 13 110 30 ("build" "'build" "get-preferences")}}})
"autoload"
 ({Lisp-File-Entry {File jedi "src" "jedi" "autoload.jazz"} 1257476747
    {Lisp-Entry "jedi.autoload" module #f 37 18 37 31 ("jazz")}}
  {Lisp-File-Entry {File jedi "lib" "jazz.catalog" "src" "jazz" "catalog" "autoload.jazz"} 1257476749
    {Lisp-Entry "jazz.catalog.autoload" module #f 37 18 37 39 ("jazz")}}
  {Lisp-File-Entry {File jedi "lib" "jazz.ide" "src" "jazz" "ide" "autoload.jazz"} 1257476750
    {Lisp-Entry "jazz.ide.autoload" module #f 37 18 37 35 ("jazz")}}
  {Lisp-File-Entry {File jedi "lib" "jazz.doc" "src" "jazz" "doc" "autoload.jazz"} 1257478471
    {Lisp-Entry "jazz.doc.autoload" module #f 37 18 37 35 ("jazz")}}
  {Lisp-File-Entry {File jedi "lib" "jazz.recorder" "src" "jazz" "recorder" "autoload.jazz"} 1257476758
    {Lisp-Entry "jazz.recorder.autoload" module #f 37 18 37 40 ("jazz")}})
"install"
 ({Lisp-File-Entry {File jedi "src" "jedi" "install.scm"} 1257473849
    {Lisp-Entry "jedi.install" unit #f 37 6 37 18 ("choose-login" "'choose-login" "jedi.services" "'jedi.services" "workbench" "'workbench" "jazz.register-service")}})
"run"
 ({Lisp-File-Entry {File jedi "src" "jedi" "run.jazz"} 1257476793
    {Lisp-Entry "jedi.run" module #f 37 8 37 16 ("Jedi" "new" "boot-environment" "descriptor" "lambda" "jedi" "'jedi" "register-product-run" "jazz")}})
"services"
 ({Lisp-File-Entry {File jedi "src" "jedi" "services.jazz"} 1257476794
    {Lisp-Entry "jedi.services" module #f 37 8 37 21 ("choose-login" "'choose-login" "get-workbench" "lambda" "workbench" "'workbench" "register-service" "jazz")}})
