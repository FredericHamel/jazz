"Application"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Application.jazz"} 1267045799
    {Lisp-Entry "jazz.system.application.Application" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Application" class #f 72 7 72 18 ("History-Manager" "new" "self" "eq?" "test:" "make-table" "initialize" "Save-Environment-Listener" "Event-Consumer" "History-Provider" "Context-Provider" "Process")
        {Lisp-Entry "toplevel" slot #f 75 8 75 16 ()}
        {Lisp-Entry "profile-name" slot #f 76 8 76 20 ()}
        {Lisp-Entry "profile-unit" slot #f 77 8 77 20 ()}
        {Lisp-Entry "profile-class" slot #f 78 8 78 21 ()}
        {Lisp-Entry "profile-bindings" slot #f 79 8 79 24 ()}
        {Lisp-Entry "profile" slot #f 80 8 80 15 ()}
        {Lisp-Entry "get-profile" accessor #f 80 77 80 85 ()}
        {Lisp-Entry "focus-listeners" slot #f 81 8 81 23 ()}
        {Lisp-Entry "application-listeners" slot #f 82 8 82 29 ()}
        {Lisp-Entry "selected-owner" slot #f 83 8 83 22 ()}
        {Lisp-Entry "get-selected-owner" accessor #f 83 77 83 85 ()}
        {Lisp-Entry "selected" slot #f 84 8 84 16 ()}
        {Lisp-Entry "selected-listeners" slot #f 85 8 85 26 ()}
        {Lisp-Entry "event-consumer" slot #f 86 8 86 22 ()}
        {Lisp-Entry "history-manager" slot #f 87 8 87 23 ()}
        {Lisp-Entry "active?" slot #f 88 8 88 15 ()}
        {Lisp-Entry "get-active?" accessor #f 88 77 88 85 ()}
        {Lisp-Entry "application-actions" slot #f 89 8 89 27 ()}
        {Lisp-Entry "get-application-actions" accessor #f 89 77 89 85 ()}
        {Lisp-Entry "profile-actions" slot #f 90 8 90 23 ()}
        {Lisp-Entry "get-profile-actions" accessor #f 90 77 90 85 ()}
        {Lisp-Entry "guest-actions" slot #f 91 8 91 21 ()}
        {Lisp-Entry "get-guest-actions" accessor #f 91 77 91 85 ()}
        {Lisp-Entry "focus-actions" slot #f 92 8 92 21 ()}
        {Lisp-Entry "get-focus-actions" accessor #f 92 77 92 85 ()}
        {Lisp-Entry "bindings-designer" slot #f 93 8 93 25 ()}
        {Lisp-Entry "get-bindings-designer" accessor #f 93 77 93 85 ()}
        {Lisp-Entry "shortcut-table" slot #f 94 8 94 22 ()}
        {Lisp-Entry "shortcut-hook" slot #f 95 8 95 21 ()}
        {Lisp-Entry "get-shortcut-hook" accessor #f 95 80 95 88 ()}
        {Lisp-Entry "set-shortcut-hook" accessor #f 95 80 95 88 ()}
        {Lisp-Entry "external-name" method #f 98 25 98 38 ("application" "'application" "rest")}
        {Lisp-Entry "get-toplevel" method #f 107 20 107 32 ("toplevel")}
        {Lisp-Entry "get-stage" method #f 111 18 111 27 ("find-stage")}
        {Lisp-Entry "prepare-bindings" method #f 120 20 120 36 ("Application-Bindings" "new" "set-bindings" "nextmethod")}
        {Lisp-Entry "prepare-environment" method #f 127 20 127 39 ("log-profile" "use-profile?" "when" "initialize-platform" "set-look" "list" "set-looks" "Windows-Look" "windows-look" "Flat-Look" "new" "flat-look" "let" "setup-shortcuts" "self" "set-application" "nextmethod")}
        {Lisp-Entry "start-environment" method #f 140 20 140 37 ("register-clipboard-formats" "initialize-clipboard" "initialize-stage" "initialize-toplevel" "setup-bindings" "nextmethod")}
        {Lisp-Entry "finalize-environment" method #f 149 20 149 40 ("install-wallpaper" "get-stage" "when" "splash-screen" ":arrow" "set-cursor" "nextmethod")}
        {Lisp-Entry "setup-profile" method #f 157 20 157 33 ("get-class-actions" "set-profile-actions" "use-profile?" "when" "Me" "err" "continue-handler:" "format" "list" "continue-text:" "profile-class" "load-profile-class" "new" "profile" "set!" "lambda" "with-safe-execution" "create-profile" "define")}
        {Lisp-Entry "finish-environment" method #f 172 20 172 38 ("remove-splash-screen" "reload-session" "err" "continue-handler:" "init" "lambda" "with-safe-execution" "profile" "when" "self" "add-save-environment-listener" "locale-change" "register-locale-change" "nextmethod")}
        {Lisp-Entry "finish-process" method #f 187 20 187 34 ("update-windowing-actions" "update-focus-actions" "select-default-workspace" "nextmethod")}
        {Lisp-Entry "conclude-environment" method #f 194 20 194 40 ("err" "continue-handler:" "finalize" "lambda" "with-safe-execution" "profile" "toplevel" "get-handle" "select-foreground-window" "run-loop?" "when" "show-toplevel" "initialize-actions" "nextmethod")}
        {Lisp-Entry "terminate-process" method #f 214 20 214 37 ("profile" "profile-bindings" "profile-class" "profile-unit" "profile-name" "set!" "close" "toplevel" "when" "reset-toolbars" "reset-dockeds" "reset-palettes" "nextmethod")}
        {Lisp-Entry "Java-Classpath" definition #f 235 14 235 28 ("File")}
        {Lisp-Entry "test-java" method #f 244 11 244 20 ("format" "message-box" "java.lang.Class" "forName" "class" "java.lang.ClassLoader" "getSystemClassLoader" "loader" "let*" "c-test" "Java-Classpath" "classpath:" "setup-jvm")}
        {Lisp-Entry "start-loop" method #f 257 20 257 30 ("process-events" "setup-events")}
        {Lisp-Entry "resume-loop-action" method #f 262 20 262 38 ("get-handle" "select-foreground-window" "toplevel" "when")}
        {Lisp-Entry "clipboard-prefix" method #f 272 26 272 42 ("process-version" "present" "process-name" "format")}
        {Lisp-Entry "register-clipboard-formats" method #f 278 29 278 55 ("clipboard-prefix" "register-jazz-clipboard-formats")}
        {Lisp-Entry "Clipboard-Stack" definition #f 287 14 287 29 ()}
        {Lisp-Entry "Max-Stack" definition #f 290 14 290 23 ("256")}
        {Lisp-Entry "get-clipboard-stack" method #f 294 18 294 37 ("Clipboard-Stack")}
        {Lisp-Entry "empty-clipboard-stack?" method #f 298 18 298 40 ("Clipboard-Stack" "null?")}
        {Lisp-Entry "add-clipboard" method #f 302 18 302 31 ("update-focus-actions" "trim-clipboard" "cons" "Clipboard-Stack" "set!" "when" "get-clipboard-text" "text" "let")}
        {Lisp-Entry "push-clipboard-list" method #f 310 18 310 37 ("update-focus-actions" "trim-clipboard" "append" "Clipboard-Stack" "set!" "error" "Max-Stack" ">" "if" "length" "pushed" "let" "list")}
        {Lisp-Entry "trim-clipboard" definition #f 319 15 319 29 ("1" "-" "tail" "set-cdr!" "Max-Stack" "Clipboard-Stack" "length" ">" "when")}
        {Lisp-Entry "pop-clipboard" method #f 324 11 324 24 ("update-focus-actions" "set-clipboard-text" "cdr" "set!" "Clipboard-Stack" "car" "string" "let")}
        {Lisp-Entry "cycle-clipboard" method #f 332 18 332 33 ("last-pair" "set-cdr!" "list" "set!" "Clipboard-Stack" "null?" "if" "pop-clipboard" "res" "get-clipboard-text" "string" "let")}
        {Lisp-Entry "cycle-clipboard-reversed" method #f 341 18 341 42 ("set-clipboard-text" "butlast" "cons" "set!" "Clipboard-Stack" "last" "res" "get-clipboard-text" "string" "let")}
        {Lisp-Entry "paste-cycle-stack" method #f 349 19 349 36 ("cycle-clipboard" "cycle-clipboard-reversed" "insert-string" "get-range" "delete-range" "string-length" "backward-n" "looking-back?" "when" "get-start" "set-pos" "explorer-class" "new" "expl" "get-clipboard-text" "text" "bell" "Clipboard-Stack" "null?" "Text-View" "is-not?" "or" "if" "get-focus" "focus" "let" "reversed?")}
        {Lisp-Entry "on-paste-cycle-stack" method #f 362 19 362 39 ("paste-cycle-stack" "evt")}
        {Lisp-Entry "on-paste-cycle-stack-reversed" method #f 366 19 366 48 ("paste-cycle-stack" "evt")}
        {Lisp-Entry "on-add-history" method #f 375 19 375 33 ("history-manager" "add-current" "evt")}
        {Lisp-Entry "on-backward-history" method #f 379 19 379 38 ("history-manager" "go-backward-history" "evt")}
        {Lisp-Entry "on-forward-history" method #f 383 19 383 37 ("history-manager" "go-forward-history" "evt")}
        {Lisp-Entry "add-history" method #f 387 18 387 29 ("history-manager" "add-history" "item")}
        {Lisp-Entry "current-history-item" method #f 391 20 391 40 ("current-history-item" "Document" "is?" "get-guest" "guest" "when" "current-frame" "frame" "let")}
        {Lisp-Entry "update-history-actions" method #f 399 20 399 42 ("forward-history" "not-null?" "backward-history" "application" "Action" "set-action-enabled?" "get-forward-history" "forward" "history-manager" "get-backward-history" "backward" "let")}
        {Lisp-Entry "get-recorder" method #f 411 26 411 38 ()}
        {Lisp-Entry "macro-recording?" method #f 415 19 415 35 ("get-recording?" "and" "get-recorder" "recorder" "let")}
        {Lisp-Entry "macro-playing?" method #f 420 19 420 33 ("get-playing?" "and" "get-recorder" "recorder" "let")}
        {Lisp-Entry "use-profile?" method #f 430 29 430 41 ()}
        {Lisp-Entry "use-profile-logging?" method #f 434 29 434 49 ()}
        {Lisp-Entry "log-profile" method #f 438 11 438 22 ("compose-name" "else" "->string" "cond" "argument/setting" "jazz-profile" "shift-down?" "or" "and" "profile-arg" "use-profile-logging?" "use-logging?" "parse" "load" "exists?" "File" "file" "load-profile-jazzini" "get-system-user-name" "jazz.profile" "'jazz.profile" "Me" "'Me" "system-profile" "unit-name" "string->symbol" "title" "standard-profile" "values" "message-box" "save-content" "if" "set-setting" "settings" "choose-login" "'choose-login" "require-service" "always-use?" "bindings" "unit" "name" "receive" "login-profile" "load-package" "repository-add-package" "format" "repository-library-directory" "concatenate" "package-path" "package-name" "User" "'User" "find-repository" "repository" "non-expanded-nodes:" "Home" "Jazz" "Directory" "copy-template" "jazz" "'jazz" "either" "profile-bindings" "'profile-bindings" "profile-unit" "'profile-unit" "symbol->string" "downcase" "profile-lowercase" "'profile-lowercase" "profile-name" "profile" "'profile" "cons" "list" "associations" "get-parent" "get-list" "Profile" "'Profile" "register-alias" "set!" "install-new-profile" "not" "when" "profile-class" "find-unit-source" "source" "let" "install-profile" "define")}
        {Lisp-Entry "preserve-environment" method #f 503 20 503 40 ("call-save-environment-listeners" "nextmethod")}
        {Lisp-Entry "close-environment" method #f 508 20 508 37 ("nextmethod" "save-page-setup" "save-bindings" "close-all" "confirm-all-close" "call-exit-listeners")}
        {Lisp-Entry "confirm-all-close" method #f 520 18 520 35 ("get-children" "confirm-close" "unless" "for-each" "when" "dependent-document?" "get-controller" "controller" "Document" "get-guest" "guest" "Host-View" "is?" "and" "frame" "lambda" "frame-dependent-document?" "get-stage" "stage" "let")}
        {Lisp-Entry "close-all" method #f 536 11 536 20 ("close-children" "when" "get-stage" "stage" "let")}
        {Lisp-Entry "Splash-Screen" definition #f 547 14 547 27 ()}
        {Lisp-Entry "Splash-End" definition #f 550 14 550 24 ()}
        {Lisp-Entry "splash-screen" method #f 554 29 554 42 ()}
        {Lisp-Entry "show-splash-screen" method #f 558 11 558 29 ("current-time" "time->seconds" "+" "essay" "Splash-End" "show-splash" "Splash-Screen" "set!" "duration" "duration:")}
        {Lisp-Entry "remove-splash-screen" method #f 563 11 563 31 ("remove-splash" "-" "sleep" ">" "Splash-End" "and" "current-time" "time->seconds" "time" "let" "Splash-Screen" "when")}
        {Lisp-Entry "show-splash" method #f 571 29 571 40 ()}
        {Lisp-Entry "remove-splash" method #f 575 29 575 42 ("splash-screen")}
        {Lisp-Entry "on-about" method #f 584 19 584 27 ("show-about" "evt")}
        {Lisp-Entry "show-about" method #f 588 26 588 36 ("title:" "if" "when" "format" "Dark-Blue" "Color" "color:" "Text" "name:" "Font" "font:" "list" "append!" "message-box" "process-email" "email" "process-version" "present" "version" "process-licensee" "licensee" "process-copyright" "copyright" "process-owner" "owner" "process-name" "name" "let")}
        {Lisp-Entry "exit-listeners" slot #f 620 8 620 22 ()}
        {Lisp-Entry "add-exit-listener" method #f 623 18 623 35 ("cons" "exit-listeners" "set!" "listener")}
        {Lisp-Entry "remove-exit-listener" method #f 627 18 627 38 ("remove!" "exit-listeners" "set!" "listener")}
        {Lisp-Entry "call-exit-listeners" method #f 631 18 631 37 ("exit-listeners" "prepare-exit" "for-each")}
        {Lisp-Entry "deactivate" method #f 640 26 640 36 ("active?" "set!" "set-mouse-in" "toplevel" "close-popups")}
        {Lisp-Entry "activate" method #f 646 26 646 34 ("verify-reloads" "lambda" "set-delayed-mouse-action" "mouse-clicked?" "if" "active?" "set!")}
        {Lisp-Entry "verify-reloads" method #f 656 18 656 32 ("include-invisibles?:" "get-views" "get-controller" "verify-reload" "Document" "get-guest" "guest" "let" "Frame-Host" "is?" "view" "lambda" "for-each" "get-stage" "when")}
        {Lisp-Entry "verify-reload" method #f 666 18 666 31 ("get-controller" "verify-reload" "get-guest" "document" "when" "find-document" "frame" "let" "moniker")}
        {Lisp-Entry "save-environment-listeners" slot #f 678 8 678 34 ()}
        {Lisp-Entry "add-save-environment-listener" method #f 681 18 681 47 ("cons" "save-environment-listeners" "set!" "listener")}
        {Lisp-Entry "remove-save-environment-listener" method #f 685 18 685 50 ("remove!" "save-environment-listeners" "set!" "listener")}
        {Lisp-Entry "call-save-environment-listeners" method #f 689 18 689 49 ("save-environment-listeners" "save-environment" "listener" "lambda" "for-each")}
        {Lisp-Entry "reload-session" method #f 700 18 700 32 ("reload-opened-windows")}
        {Lisp-Entry "reload-opened-windows" method #f 704 26 704 47 ()}
        {Lisp-Entry "reload-component" method #f 708 26 708 42 ("properties" "class")}
        {Lisp-Entry "save-environment" method #f 712 20 712 36 ("get-children" "session" "session-designer" "save-guest" "get-guest" "guest" "Host-Frame" "is?" "frame" "lambda" "for-each" "get-stage" "stage" "let" "save-all-guest" "get-current-directory" "current-directory:" "branch:" "context" "active-context:" "preferences-designer" "set-property" "preferences-root" "when" "save-application" "define")}
        {Lisp-Entry "display-aliases?" method #f 739 26 739 42 ()}
        {Lisp-Entry "display-protocol?" method #f 743 26 743 43 ()}
        {Lisp-Entry "application-anchors" method #f 747 26 747 45 ("get-aliases" "table-keys")}
        {Lisp-Entry "add-focus-listener" method #f 756 18 756 36 ("add-listener" "focus-listeners" "set!" "listener")}
        {Lisp-Entry "remove-focus-listener" method #f 760 18 760 39 ("remove-listener" "focus-listeners" "set!" "listener")}
        {Lisp-Entry "process-focus-change" method #f 764 19 764 39 ("update-focus-actions" "invoke" "listener" "lambda" "for-each" "self" ":focus-change" "Focus-Event" "new" "evt" "let" "focus-listeners" "when" "new-focus")}
        {Lisp-Entry "update-focus-actions" method #f 773 26 773 46 ("focus-update-actions" "can-select-all?" "select-all" "can-delete?" "delete" "can-paste-properties?" "paste-properties" "paste-cycle-stack-reversed" "Clipboard-Stack" "not-null?" "paste-cycle-stack" "application" "can-paste?" "paste" "can-copy?" "copy" "can-cut?" "cut" "can-redo?" "redo" "can-undo?" "undo" "view" "Action" "set-action-enabled?" "preferences-root" "when" "View" "is?" "and" "view?" "get-focus" "focus" "let*")}
        {Lisp-Entry "add-selected-listener" method #f 796 18 796 39 ("add-listener" "selected-listeners" "set!" "listener")}
        {Lisp-Entry "remove-selected-listener" method #f 800 18 800 42 ("remove-listener" "selected-listeners" "set!" "listener")}
        {Lisp-Entry "get-selected" method #f 804 18 804 30 ("selected")}
        {Lisp-Entry "set-selected" method #f 808 18 808 30 ("process-selected-change" "selected" "or" "when" "selected-owner" "neq?" "new-owner?" "let" "force?" "force?:" "sel" "owner")}
        {Lisp-Entry "close-selected" method #f 814 18 814 32 ("selected" "process-selected-change" "set!" "selected-owner" "eq?" "when" "owner")}
        {Lisp-Entry "process-selected-change" method #f 820 11 820 34 ("invoke" "listener" "lambda" "for-each" "force?:" "self" ":selected-change" "Selected-Event" "new" "evt" "let" "exiting-process?" "not" "selected-listeners" "and" "when" "selected" "selected-owner" "set!" "force?" "new-selected" "old-selected" "owner")}
        {Lisp-Entry "add-application-listener" method #f 835 18 835 42 ("get-application-listeners" "add-listener" "set-application-listeners" "listener" "category")}
        {Lisp-Entry "remove-application-listener" method #f 839 18 839 45 ("get-application-listeners" "remove-listener" "set-application-listeners" "listener" "category")}
        {Lisp-Entry "process-application-event" method #f 843 19 843 44 ("self" "invoke" "listener" "lambda" "for-each" "Application-Event" "new" "apply" "evt" "get-application-listeners" "listeners" "let" "properties" "sender" "kind" "category")}
        {Lisp-Entry "get-application-listeners" method #f 851 11 851 36 ("application-listeners" "table-ref" "category")}
        {Lisp-Entry "set-application-listeners" method #f 855 11 855 36 ("application-listeners" "table-set!" "listeners" "category")}
        {Lisp-Entry "default-frame-class" method #f 864 26 864 45 ()}
        {Lisp-Entry "file-frame-class" method #f 868 26 868 42 ("error" "extension-frame-class" "either" "get-extension" "extension" "let" "file")}
        {Lisp-Entry "extension-frame-class" method #f 874 26 874 47 ("unknown-extension-frame-class" "known-extension-frame-class" "profile-extension-frame-class" "either" "ext")}
        {Lisp-Entry "profile-extension-frame-class" method #f 880 11 880 40 ("extension-frame-class" "profile" "when" "ext")}
        {Lisp-Entry "known-extension-frame-class" method #f 885 26 885 53 ("ext")}
        {Lisp-Entry "unknown-extension-frame-class" method #f 889 26 889 55 ()}
        {Lisp-Entry "frame-class" method #f 893 26 893 37 ("file-frame-class" "default-frame-class" "not" "if" "file" "file:")}
        {Lisp-Entry "get-default-frame-class" method #f 899 11 899 34 ("default-frame-class" "autoload" "if" "get-frame-model" "model" "get-workspace-preferences" "pref" "let*")}
        {Lisp-Entry "initialize-toplevel" method #f 912 11 912 30 ("ensure-displayed" "new-toplevel" "toplevel" "set!")}
        {Lisp-Entry "new-toplevel" method #f 917 26 917 38 ("Toplevel" "new")}
        {Lisp-Entry "show-toplevel" method #f 921 26 921 39 ("toplevel" "set-visible?")}
        {Lisp-Entry "initialize-actions" method #f 925 11 925 29 ("self" "get-class-actions" "set-application-actions")}
        {Lisp-Entry "initialize-stage" method #f 934 11 934 27 ("singleton-stage")}
        {Lisp-Entry "new-stage" method #f 938 26 938 35 ("stage" "'stage" "name:" "Stage-Border" "parent:" "stage-class" "new")}
        {Lisp-Entry "stage-class" method #f 942 29 942 40 ("Stage")}
        {Lisp-Entry "setup-shortcuts" method #f 951 11 951 26 ("shortcut-hash" "hash:" "shortcut=?" "test:" "make-table" "shortcut-table" "set!")}
        {Lisp-Entry "register-actions-shortcuts" method #f 955 11 955 37 ("for-each-reversed" "get-children" "get-alternate-shortcut" "get-shortcut" "get-visible?" "actions" "lambda" "for-each" "table-add" "register-shortcut" "table-remove!" "shortcut-table" "table-ref" "and" "when" "shortcut" "action-item" "unregister-shortcut" "define" "new-actions" "old-actions")}
        {Lisp-Entry "update-shortcut" method #f 982 18 982 33 ("table-add" "shortcut-table" "table-remove!" "when" "new-shortcut" "old-shortcut" "action-item")}
        {Lisp-Entry "dispatch-shortcut" method #f 989 18 989 35 ("else" "self" "car" "invoke" "not-null?" "when" "get-bound-actions" "action-items" "let" "shortcut-hook" "not" "or" "cond" "shortcut")}
        {Lisp-Entry "get-bound-actions" method #f 1001 18 1001 35 (":control" "Shortcut" "shortcut=?" "if" "shortcut-table" "table-ref" "let" "get-enabled?" "action" "lambda" "collect-if" "actions" "filter-enabled" "define" "shortcut")}
        {Lisp-Entry "Bindings-File" definition #f 1021 14 1021 27 ("Profile" "File")}
        {Lisp-Entry "setup-bindings" method #f 1025 11 1025 25 ("default-bindings" "err" "continue-handler:" "set-active-branch" "Branch" "is?" "when" "locate-component" "branch" "jazz" "'jazz" "get-preferences" "get-active-bindings" "either" "active" "load-bindings" "let" "lambda" "with-safe-execution" "reference:" "get-form" "form:" "Designer" "new" "bindings-designer" "set!" "set-bindings" "bindings" "set-bindings/designer" "define")}
        {Lisp-Entry "load-bindings" method #f 1043 29 1043 42 ("default-bindings" "read-from-file" "instantiate" "exists?" "Profile" "'Profile" "is-alias?" "and" "if" "Bindings-File" "file" "let")}
        {Lisp-Entry "default-bindings" method #f 1050 29 1050 45 ("Application-Bindings" "new")}
        {Lisp-Entry "save-bindings" method #f 1054 11 1054 24 ("save" "get-form" "get-origin" "file?" "get-modified?" "bindings-designer" "and" "when")}
        {Lisp-Entry "set-application-actions" method #f 1064 18 1064 41 ("set!" "application-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-profile-actions" method #f 1069 18 1069 37 ("set!" "profile-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-guest-actions" method #f 1074 18 1074 35 ("set!" "guest-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-focus-actions" method #f 1079 18 1079 35 ("set!" "focus-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "find-menubar" method #f 1089 18 1089 30 ("get-guest" "in-player?" "and" "when" ":menubar" "get-toolbar" "host" "let")}
        {Lisp-Entry "update-menubar-buttons" method #f 1095 18 1095 40 ("update-buttons" "when" "find-menubar" "menubar" "let")}
        {Lisp-Entry "Undisplayed-Message" definition #f 1106 14 1106 33 ()}
        {Lisp-Entry "set-status-message" method #f 1110 18 1110 36 ("update-view" "primordial-thread?" "when" "set-action-handler" "->string" "else" "Locales" "is?" "cond" "set-title" "lambda" "post-event" "Undisplayed-Message" "set!" "not" "if" "get-message-view" "message" "let" "action-handler" "msg")}
        {Lisp-Entry "find-status-bar" method #f 1125 18 1125 33 ("get-guest" "in-player?" "and" "when" ":status" "get-toolbar" "host" "let")}
        {Lisp-Entry "get-message-view" method #f 1131 18 1131 34 ("message" "'message" "find-component" "when" "find-status-bar" "status-bar" "let")}
        {Lisp-Entry "show-undisplayed-message" method #f 1137 18 1137 42 ("set!" "set-status-message" "Undisplayed-Message" "when")}
        {Lisp-Entry "class-actions" method #f 1148 20 1148 33 ("nextmethod" "application" "'application" "find-actions" "cons")}
        {Lisp-Entry "process-alias" method #f 1158 20 1158 33 ("nextmethod" "else" "get-images-cache" ":images" "get-profile" ":profile" "focused-guest" ":focus-guest" "focused-host" ":focus-host" "get-focus" ":focus" "current-document" ":document" "current-frame" ":frame" "get-stage" ":stage" "get-toplevel" ":toplevel" "self" ":application" "case" "name")}
        {Lisp-Entry "text-menu" method #f 1178 26 1178 35 ("new-text-context-menu" "text")}
        {Lisp-Entry "get-output-log" method #f 1187 26 1187 40 ()}
        {Lisp-Entry "All-Results" definition #f 1196 14 1196 25 ()}
        {Lisp-Entry "Active-Results" definition #f 1199 14 1199 28 ()}
        {Lisp-Entry "navigable-results" method #f 1203 26 1203 43 ("navigable-results" "'navigable-results" "must-implement")}
        {Lisp-Entry "get-navigable-results" method #f 1207 11 1207 32 ("navigable-results" "set!" "All-Results" "unless")}
        {Lisp-Entry "get-active-results" method #f 1213 18 1213 36 ("get-navigable-results" "car" "set!" "Active-Results" "unless")}
        {Lisp-Entry "set-active-results" method #f 1219 18 1219 36 ("Active-Results" "set!" "results")}
        {Lisp-Entry "locale-change" method #f 1228 11 1228 24 ("locale-update" "when" "select-locale" "update?" "loc")}
        {Lisp-Entry "select-locale" method #f 1234 18 1234 31 ("present-locale" "localize" "set-title" "locales" "'locales" "locate-component" "label" "when" "find-status-bar" "status" "let" "locale")}
        {Lisp-Entry "locale-update" method #f 1242 18 1242 31 ("get-toplevel" "redraw-window" "find-menubar" "layout-menu")}
        {Lisp-Entry "setup-workspaces" method #f 1253 11 1253 27 ("layout" "layout-menu" "0" "1" "Separator" "tooltip-text:" "tooltip?:" ":images" "portfolio:" "resource:" "tail-separator" "'tail-separator" "tail" "'tail" "location:" "22" "Dimension" "size:" "Workspace-Button" "Action" "action:" "selected?:" "group:" "next-separator" "'next-separator" "before:" "icon:" "title:" "Radio-Item" "get-shortcut" "shortcut:" "action-handler:" "name:" "parent:" "Action-Item" "eq?" "selected?" "workspace:" "list" "properties:" "on-select-workspace" "'on-select-workspace" "method-name:" ":application" "target-name:" "Event-Handler" "new" "event-handler" "format" "string->symbol" "action-name" "get-icon" "icon" "get-title" "title" "get-name" "name" "lambda" "for-each" "get-active" "active" "find-toolbar" "toolbar" "workspace" "'workspace" "child" "get-content" "menu" "application" "'application" "find-actions" "actions" "find-menubar" "menubar" "error" "get-children" "null?" "if" "get-workspaces-preferences" "preferences" "let")}
        {Lisp-Entry "select-default-workspace" method #f 1278 11 1278 35 ("apply-preferences" "Default-Workspace" "new" "child" "get-active" "active" "default-workspace" "not" "if" "error?:" "get-workspaces-preferences" "pref" "let" "find-workspace" "define")}
        {Lisp-Entry "on-select-workspace" method #f 1294 19 1294 38 ("workspace:" "get-property" "select-workspace" "evt")}
        {Lisp-Entry "on-next-workspace" method #f 1298 19 1298 36 ("select-next-workspace" "evt")}
        {Lisp-Entry "on-previous-workspace" method #f 1302 19 1302 40 ("select-previous-workspace" "evt")}
        {Lisp-Entry "on-workspace" method #f 1306 27 1306 39 ("activate-workspace-button" "activate-workspace-item" "workspace:" "get-property" "workspace" "let" "activate" "get-kind" "case" "evt")}
        {Lisp-Entry "activate-workspace-item" method #f 1314 31 1314 54 ("set-selected?" "group:" "Radio-Item" "class:" "unselect-elements" "not" "if" "get-name" "radio" "get-content" "menu" "'workspace" "find-component" "item" "when" "find-menubar" "menubar" "let" "workspace")}
        {Lisp-Entry "activate-workspace-button" method #f 1326 31 1326 56 ("set-selected?" "'workspace" "group:" "Radio-Tool" "class:" "unselect-elements" "not" "if" "workspace-button-name" "find-component" "radio" "when" "find-toolbar" "toolbar" "let" "workspace")}
        {Lisp-Entry "workspace-button-name" method #f 1335 39 1335 60 ("get-name" "workspace")}
        {Lisp-Entry "select-workspace" method #f 1339 18 1339 34 ("get-workspace" "apply-preferences" "name")}
        {Lisp-Entry "select-next-workspace" method #f 1343 18 1343 39 ("apply-preferences" "eq?" "unless" "length" "1" "+" "modulo" "element" "next" "find" "rank" "get-workspaces" "Workspace-Preferences" "collect-type" "workspaces" "get-workspace-preferences" "current" "let*")}
        {Lisp-Entry "select-previous-workspace" method #f 1352 18 1352 43 ("apply-preferences" "eq?" "unless" "element" "previous" "1" "length" "-" "0" "=" "if" "previous-rank" "find" "rank" "get-workspaces" "Workspace-Preferences" "collect-type" "workspaces" "get-workspace-preferences" "current" "let*")}
        {Lisp-Entry "workspace-installed" method #f 1362 26 1362 45 ()}
        {Lisp-Entry "on-zoom-horizontally" method #f 1366 19 1366 39 ("set!" "unzoom" "zoom" "workspace-zoomable?" "split" "'split" "get-state" "continuation-return" "when" "vert" "'vert" "get-orientation" "eq?" "if" "host" "splitter" "get-stage-border" "for-each-splitter" "return" "continuation-capture" "started?" "let" "lambda" "with-locked-update" "evt")}
        {Lisp-Entry "on-zoom-vertically" method #f 1385 19 1385 37 ("set!" "unzoom" "zoom" "split" "'split" "get-state" "continuation-return" "when" "horz" "'horz" "get-orientation" "eq?" "if" "host" "splitter" "for-each-splitter" "return" "continuation-capture" "get-stage-border" "border" "started?" "let" "lambda" "with-locked-update" "evt")}
        {Lisp-Entry "on-maximize/restore" method #f 1405 19 1405 38 ("maximize" "restore" "get-maximized?" "if" "get-stage" "stage" "let" "evt")}
        {Lisp-Entry "on-full-screen" method #f 1412 19 1412 33 ("full-screen-stage" "selected-workspace" "set-fullscreen?" "get-toplevel" "get-fullscreen?" "fullscreen?" "fullscreen-warned?" "'fullscreen-warned?" "preferences-designer" "set-property" "message-box" "get-fullscreen-warned?" "not" "when" "get-preferences" "pref" "let" "evt")}
        {Lisp-Entry "full-screen-stage" method #f 1422 18 1422 35 ("get-stage-border" "full-screen" "fullscreen?")}
        {Lisp-Entry "toggle-full-screen" method #f 1426 18 1426 36 ("full-screen" "get-toplevel" "get-fullscreen?" "not" "fullscreen?" "let" "host")}
        {Lisp-Entry "full-screen" method #f 1431 18 1431 29 ("unzoom" "zoom" "set-full?" "top" "'top" "get-name" "eq?" "and" "get-preferences" "preferences" "for-each-splitter" "set-fullscreen?" "lambda" "with-locked-update" "get-fullscreen?" "neq?" "get-stage" "stage" "get-toplevel" "toplevel" "0" "Rect" "get-insets" "set-insets" "set-preserved-insets" "when" "get-preserved-insets" "preserved" "let" "not" "if" "splitter" "fix-top-splitter-insets" "define" "fullscreen?" "host")}
        {Lisp-Entry "find-toolbar" method #f 1464 18 1464 30 ("get-guest" "in-player?" "and" "when" ":toolbar" "get-toolbar" "host" "let")}
        {Lisp-Entry "get-context-text" method #f 1475 20 1475 36 ()}
        {Lisp-Entry "get-text-class" method #f 1484 26 1484 40 ("Plain-Text-View")}
        {Lisp-Entry "get-resource" method #f 1493 18 1493 30 ("cursor" "format" "list" "new-file" "image" "case" "Bin" "Directory" "Jazz" "'Jazz" "find-alias" "if" "resources-dir" "define" "name" "type")}
        {Lisp-Entry "Images-Cache" definition #f 1509 14 1509 26 ()}
        {Lisp-Entry "get-images-cache" method #f 1513 18 1513 34 ("Portfolio" "new" "set!" "Images-Cache" "unless")}
        {Lisp-Entry "get-cataloguer" method #f 1524 26 1524 40 ()}
        {Lisp-Entry "get-catalog-context" method #f 1528 26 1528 45 ()}
        {Lisp-Entry "user-feedback" method #f 1537 20 1537 33 ("message")}
        {Lisp-Entry "get-event-consumer" method #f 1546 20 1546 38 ("event-consumer")}
        {Lisp-Entry "set-event-consumer" method #f 1550 20 1550 38 ("event-consumer" "set!" "consumer")}
        {Lisp-Entry "deliver-event" method #f 1554 20 1554 33 ("event" "proc" "target" "handler")}
        {Lisp-Entry "fresh-prompt" method #f 1563 18 1563 30 ("fresh-prompt" "when" "get-console-text" "either" "let" "text" "text:")}
        {Lisp-Entry "on-console" method #f 1569 19 1569 29 ("get-console-manager" "select-next-console" "else" "ensure-displayed" "get-end" "cell-displayed?" "fresh-prompt" "last-block" "extended?" "at-end?" "not" "or" "cond" "eq?" "and" "when" "show-console" "text" "get-focus" "focus" "let" "evt")}
        {Lisp-Entry "show-console" method #f 1582 18 1582 30 ("acquire-focus" "bell" "not" "if" "get-text" "text" "and" "when" "select-palette" "manager" "let" "focus?" "focus?:" "home" "'home" "workspace" "workspace:" "Lisp-Console-Manager" "class" "class:")}
        {Lisp-Entry "on-clear-console" method #f 1594 19 1594 35 ("get-console-text" "clear-console" "evt")}
        {Lisp-Entry "on-sql-console" method #f 1598 19 1598 33 ("get-sql-console-text" "text:" "fresh-prompt" "when" "sql" "'sql" "workspace:" "SQL-Console-Manager" "class:" "show-console" "SQL-Console-Text-View" "get-focus" "is?" "had-focus?" "let" "evt")}
        {Lisp-Entry "on-sql-connections" method #f 1605 11 1605 29 ("focus?:" "sql" "'sql" "workspace:" "SQL-Connections-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-sql-inventory" method #f 1610 11 1610 27 ("focus?:" "sql" "'sql" "workspace:" "Inventory-Browser" "select-palette" "evt")}
        {Lisp-Entry "on-sql-tree-output" method #f 1614 11 1614 29 ("focus?:" "sql" "'sql" "SQL-Tree-Output" "select-palette" "evt")}
        {Lisp-Entry "process-debuggee-loop" method #f 1623 20 1623 41 ("nextmethod" "process-events" "with-jazz-exception-debugger" "event-thread?" "get-controller-debugger" "local-proxy?" "and" "if")}
        {Lisp-Entry "exception-reported" method #f 1636 11 1636 29 ("cleanup-mouse-processing" "Exception" "catch")}
        {Lisp-Entry "present-execution-context" method #f 1643 11 1643 36 ("prefix?:" "type:" "Exception-Presenter" "new" "present" "prefix?" "type" "exception")}
        {Lisp-Entry "get-search-manager" method #f 1652 39 1652 57 ()}
        {Lisp-Entry "get-search-results" method #f 1656 39 1656 57 ("Search-Results" "singleton-docked" "get-guest")}
        {Lisp-Entry "active-search" method #f 1660 18 1660 31 ("get-guest" "get-search" "when" "get-search-manager" "manager" "let")}
        {Lisp-Entry "update-search-actions" method #f 1667 18 1667 39 ("replace-all-selected" "replace-all" "replace&find-forward" "replace" "find-backward" "find-forward" ">" "pop-results" "edit-current" "edit-previous" "1" ">=" "edit-next" "application" "Action" "set-action-enabled?" "in-modal?" "get-results-stack" "results-stack-count" "get-tree" "get-visible-count" "results-count" "get-search-results" "results" "length" "count" "get-views" "not" "if" "frames" "get-stage" "stage" "let*")}
        {Lisp-Entry "on-find" method #f 1693 19 1693 26 ("active-window" "'active-window" "text" "'text" "update-search" "evt")}
        {Lisp-Entry "on-find-in-text" method #f 1697 19 1697 34 ("text" "'text" "update-search" "evt")}
        {Lisp-Entry "on-find-in-directories" method #f 1701 19 1701 41 ("directories" "'directories" "update-search" "evt")}
        {Lisp-Entry "on-find-in-projects" method #f 1705 19 1705 38 ("projects" "'projects" "update-search" "evt")}
        {Lisp-Entry "update-search" method #f 1709 11 1709 24 ("select-search" "get-searches" "list" "set-search-targets" "first" "equal?" "not-null?" "or" "unless" "get-search-targets" "targets" "let" "search" "lambda" "for-each" "set-visible?" "bring-to-front" "set-search-domain" "set-selection-name" "when" "get-search" "next-radio" "get-focused-window" "get-selection-name" "eq?" "same-tab?" "'tab" "locate" "tab-view" "get-guest" "manager" "get-player" "player" "get-search-manager" "palette" "get-selected-string" "Text-View" "not" "and" "if" "string" "Tree-Embedded-Search-Text-View" "is?" "internal?" "get-focus" "focus" "let*" "domain" "tab")}
        {Lisp-Entry "end-search-edition" method #f 1739 18 1739 36 ("end-edition" "get-targets-tree" "tree" "get-search" "search" "get-guest" "manager" "get-search-manager" "palette" "let*")}
        {Lisp-Entry "on-edit-next" method #f 1747 19 1747 31 ("get-active-results" "edit-next" "evt")}
        {Lisp-Entry "on-edit-previous" method #f 1751 19 1751 35 ("get-active-results" "edit-previous" "evt")}
        {Lisp-Entry "on-edit-current" method #f 1755 19 1755 34 ("get-active-results" "edit-current" "evt")}
        {Lisp-Entry "on-pop-results" method #f 1759 19 1759 33 ("get-search-results" "clear-results" "evt")}
        {Lisp-Entry "on-find-forward" method #f 1763 19 1763 34 ("on-find-forward" "bell" "select-next" "unless" "get-find-targets" "multi-search-context" "get-stage" "first-view" "get-guest" "get-text-view" "text" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-find-backward" method #f 1773 19 1773 35 ("on-find-backward" "bell" "select-previous" "unless" "get-find-targets" "multi-search-context" "get-stage" "first-view" "get-guest" "get-text-view" "text" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace" method #f 1783 19 1783 29 ("on-replace" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace&find-forward" method #f 1790 19 1790 42 ("on-replace&find-forward" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace-all" method #f 1797 19 1797 33 ("on-replace-all" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace-all-selected" method #f 1804 19 1804 42 ("on-replace-all-selected" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-command-extended" method #f 1816 19 1816 38 ("select-command-extended" "evt")}
        {Lisp-Entry "on-command-execute" method #f 1820 19 1820 37 ("select-command-execute" "evt")}
        {Lisp-Entry "get-command-shell" method #f 1824 26 1824 43 ("command-shell" "'command-shell" "locate-component" "when" "find-toolbar" "toolbar" "let")}
        {Lisp-Entry "get-command-text" method #f 1830 26 1830 42 ("get-text" "when" "get-command-shell" "shell" "let")}
        {Lisp-Entry "select-command-search" method #f 1836 18 1836 39 ("get-command-text" "select-search" "text" "direction")}
        {Lisp-Entry "select-command-search-current" method #f 1840 18 1840 47 ("get-command-text" "select-search" "text" "range" "direction")}
        {Lisp-Entry "select-command-extended" method #f 1844 18 1844 41 ("get-command-text" "select-extended")}
        {Lisp-Entry "select-command-execute" method #f 1848 18 1848 40 ("get-command-text" "select-execute")}
        {Lisp-Entry "get-search-targets" method #f 1857 31 1857 49 ("get-search-targets" "Search-Targets" "'Search-Targets" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "set-search-targets" method #f 1864 31 1864 49 ("set-search-targets" "Search-Targets" "'Search-Targets" "set-setting" "not" "if" "active-search" "search" "let" "targets")}
        {Lisp-Entry "get-find-targets" method #f 1871 31 1871 47 ("get-find-targets" "get-search-targets" "get-ignore-case?" "ignore-case?:" "get-whole-words?" "whole-words?:" "first" "make-search-context" "target" "lambda" "map" "make-multi-search-context" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-replace-targets" method #f 1883 31 1883 50 ("get-replace-targets" "get-search-targets" "second" "map" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-whole-words?" method #f 1890 31 1890 47 ("get-whole-words?" "Search-Whole-Words?" "'Search-Whole-Words?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-ignore-case?" method #f 1897 31 1897 47 ("get-ignore-case?" "Search-Ignore-Case?" "'Search-Ignore-Case?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-preserve-case?" method #f 1904 31 1904 49 ("get-preserve-case?" "Search-Preserve-Case?" "'Search-Preserve-Case?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-play-recording?" method #f 1911 31 1911 50 ("get-play-recording?" "Search-Play-Recording?" "'Search-Play-Recording?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-expression?" method #f 1918 31 1918 46 ("get-expression?" "Search-Expression?" "'Search-Expression?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "on-new" method #f 1930 27 1930 33 ("get-default-frame-class" "new-event" "evt")}
        {Lisp-Entry "on-open" method #f 1934 27 1934 34 ("open-files" "evt")}
        {Lisp-Entry "open-files" method #f 1938 18 1938 28 ("get-name" "key:" "string>?" "sort" "edit-file" "for-each" "multiple-selection?:" "open-extensions" "extensions:" "choose-file" "files" "let" "directory" "directory:")}
        {Lisp-Entry "receive-files" method #f 1944 26 1944 39 ("edit-file" "class:" "edit-document" "file?" "when" "pathname" "lambda" "for-each" "else" "Jazz-Text-View" "'Jazz-Text-View" "shift-down?" "Jazz-Plain-Text-View" "'Jazz-Plain-Text-View" "autoload-class" "alt-down?" "cond" "class" "parse" "user-message" "set-current-directory" "dir" "let" "car" "directory?" "1" "length" "=" "and" "if" "pathnames" "pos")}
        {Lisp-Entry "edit-file" method #f 1960 26 1960 35 ("edit-document" "file")}
        {Lisp-Entry "open-extensions" method #f 1965 26 1965 41 ()}
        {Lisp-Entry "find-document" method #f 1969 18 1969 31 ("get-stage" "get-children" "pathname=?" "get-controller" "get-moniker" "guest-moniker" "not" "or" "Document" "get-guest" "guest" "let" "Frame-Host" "is?" "and" "frame" "lambda" "find-if" "class" "class:" "moniker")}
        {Lisp-Entry "edit-document" method #f 1981 18 1981 31 ("verify-reload" "focus-host" "set-visible?" "bring-to-front" "get-guest" "center-caret" "'center-caret" "ensure-displayed?:" "set-selection-safe" "set-wrap?" "get-controller" "set-moniker" "set-char-encoding" "Text-View" "is?" "text?" "document" "host" "initialize:" "host-focus?:" "host-visible?:" "host-workspace:" "new-frame" ":wait" "with-cursor" "file-frame-class" "either" "values" "new?" "lambda" "result" "find-document" "frame" "let*" "file" "let" "error" "exists?" "not" "if" "when" "return-new?" "return-new?:" "visible?" "visible?:" "activate-focus?" "activate-focus?:" "force-new?" "force-new?:" "wrap?" "wrap?:" "char-encoding" "char-encoding:" "selection" "selection:" "workspace" "workspace:" "class" "class:" "moniker")}
        {Lisp-Entry "edit-help-document" method #f 2028 18 2028 36 ("set-editable?" "get-guest" "text" "edit-document" "frame" "let*" "moniker")}
        {Lisp-Entry "edit-filename" method #f 2034 18 2034 31 ("get-controller" "verify-reload" "get-guest" "text" "get-source" "edit-document" "frame" "error" "not" "if" "find-filename" "essay" "project-file" "'workbench" "get-service" "workbench" "let*" "filename")}
        {Lisp-Entry "edit-category" method #f 2044 26 2044 39 ("name")}
        {Lisp-Entry "on-close" method #f 2048 27 2048 35 ("close-with-confirm" "when" "get-stage" "first-view" "frame" "let" "evt")}
        {Lisp-Entry "on-close-all" method #f 2054 27 2054 39 ("get-stage" "get-views" "close" "confirm-close" "get-controller" "close-on-close-all?" "Document" "is-not?" "or" "get-guest" "guest" "let" "Frame-Host" "is?" "when" "view" "lambda" "for-each" "evt")}
        {Lisp-Entry "on-save-all" method #f 2064 27 2064 38 ("save-all" "evt")}
        {Lisp-Entry "on-print" method #f 2068 27 2068 35 ("print-document" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-print-layout" method #f 2073 27 2073 42 ("print-layout" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-print-preview" method #f 2078 27 2078 43 ("print-preview" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-quit-application" method #f 2083 27 2083 46 ("exit-process" "evt")}
        {Lisp-Entry "save-all" method #f 2087 18 2087 26 ("include-invisibles?:" "get-stage" "get-views" "save" "get-modified?" "dependent-document?" "xor" "get-moniker" "or" "and" "get-controller" "controller" "get-guest" "guest" "Frame-Host" "is?" "when" "host" "for-each" "main-documents?" "lambda" "save-documents" "let" "save-unanchored?" "save-unanchored?:" "Document" "class" "class:")}
        {Lisp-Entry "edit-definitions" method #f 2111 26 2111 42 ("rest" "object")}
        {Lisp-Entry "edit-references" method #f 2115 26 2115 41 ("rest" "object")}
        {Lisp-Entry "context-update" method #f 2124 20 2124 34 ("context" "user-message" "nextmethod" "finalize" "init" "autoload" "new" "set!" "Profile" "get-profile-class" "either" "class" "close" "profile" "modify-profile" "get-children" "activate" "get-active?" "and" "error?:" "get-catalog" "catalog" "get-name" "name" "let*" "config" "lambda" "for-each" "get-cataloguer" "cataloguer" "when" "catalogs" "'catalogs" "find-preferences" "pref" "let" "modify-catalogs" "define")}
        {Lisp-Entry "setup-preferences" method #f 2160 20 2160 37 ("default-preferences" "set-preferences/designer" "err" "continue-handler:" "setup-preferences/designer" "lambda" "with-safe-execution")}
        {Lisp-Entry "default-preferences" method #f 2169 20 2169 39 ("Application-Preferences" "new")}
        {Lisp-Entry "toolbox-file" method #f 2173 29 2173 41 ("Profile" "File")}
        {Lisp-Entry "Default-Page-Setup" definition #f 2182 14 2182 32 ()}
        {Lisp-Entry "Default-Page-Setup-Designer" definition #f 2185 14 2185 41 ()}
        {Lisp-Entry "Default-Page-Setup-Form" definition #f 2188 14 2188 37 ("form>>")}
        {Lisp-Entry "Default-Page-Setup-File" definition #f 2192 14 2192 37 ("Profile" "File")}
        {Lisp-Entry "set-default-page-setup" method #f 2196 31 2196 53 ("Default-Page-Setup" "set!" "page-setup")}
        {Lisp-Entry "default-page-setup" method #f 2200 31 2200 49 ("setup-page-setup" "Default-Page-Setup" "not" "when")}
        {Lisp-Entry "default-page-setup-designer" method #f 2206 31 2206 58 ("setup-page-setup" "Default-Page-Setup-Designer" "not" "when")}
        {Lisp-Entry "setup-page-setup" method #f 2212 19 2212 35 ("reference:" "get-form" "form:" "Designer" "new" "Default-Page-Setup-Designer" "instantiate" "Default-Page-Setup" "set!" "Default-Page-Setup-Form" "read-from-file" "exists?" "Profile" "'Profile" "is-alias?" "and" "if" "form" "Default-Page-Setup-File" "file" "let*")}
        {Lisp-Entry "save-page-setup" method #f 2219 19 2219 34 ("save" "Default-Page-Setup-File" "set-origin" "not" "form" "let" "get-form" "get-origin" "file?" "Default-Page-Setup-Designer" "and" "when")}
        {Lisp-Entry "get-documentation-cataloguer" method #f 2232 26 2232 54 ()}
        {Lisp-Entry "on-zoom-out" method #f 2241 11 2241 22 ("0.25" "-" "scale-view" "get-scaling" "scaling" "bell" "not" "if" "what:" "get-property" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "on-zoom-in" method #f 2249 11 2249 21 ("0.25" "+" "scale-view" "get-scaling" "scaling" "bell" "not" "if" "what:" "get-property" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "on-unzoom" method #f 2257 11 2257 20 ("1.0" "scale-view" "bell" "not" "if" "what:" "get-property" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "scaled-view" method #f 2264 11 2264 22 ("mouse-view" "current-document" "document" "case" "what")}
        {Lisp-Entry "scale-view" method #f 2270 11 2270 21 ("set-scaled?" "set-scaling" "user-message" "scaled?" "scaling" "view")}
        {Lisp-Entry "on-capture-document" method #f 2281 11 2281 30 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "highlight-root-only?:" "highlight:" "capture-document" "pos" "view" "lambda" "click:" "pick-figure" "evt")}
        {Lisp-Entry "on-capture-mouse-document" method #f 2291 11 2291 36 ("capture-document" "bell" "not" "if" "mouse-view" "view" "let" "evt")}
        {Lisp-Entry "capture-document" definition #f 2298 15 2298 31 ("export-picture" "get-guest" "guest" "bell" "not" "if" "get-host" "host" "let" "view")}
        {Lisp-Entry "on-capture-host" method #f 2308 11 2308 26 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "highlight-root-only?:" "highlight:" "capture-host" "pos" "view" "lambda" "click:" "pick-figure" "evt")}
        {Lisp-Entry "on-capture-mouse-host" method #f 2318 11 2318 32 ("capture-host" "bell" "not" "if" "mouse-view" "view" "let" "evt")}
        {Lisp-Entry "capture-host" definition #f 2325 15 2325 27 ("export-picture" "bell" "not" "if" "get-host" "host" "let" "view")}
        {Lisp-Entry "update-windowing-actions" method #f 2337 26 2337 50 ("update-menubar-buttons" "update-window-actions" "update-history-actions" "exiting-process?" "unless")}
        {Lisp-Entry "update-window-actions" method #f 2344 18 2344 39 ("tile-vertically" "tile-horizontally" "current-frame" "previous-frame" "2" "next-frame" "print" "print-preview" "print-layout" "page-setup" "compare-saved" "revert-saved" "save-all" "save-as" "save" "guest" "close-all" "not" "1" ">=" "and" "close" "application" "Action" "set-action-enabled?" "in-modal?" "length" "count" "get-views" "frames" "let*" "when" "get-stage" "stage" "let")}
        {Lisp-Entry "on-next-frame" method #f 2368 27 2368 40 ("current-frame" "focus-host" "send-to-back" "get-stage" "first-view" "first" "let" "evt")}
        {Lisp-Entry "on-previous-frame" method #f 2374 27 2374 44 ("current-frame" "focus-host" "bring-to-front" "get-stage" "last-view" "last" "let" "evt")}
        {Lisp-Entry "on-current-frame" method #f 2380 27 2380 43 ("focus-host" "get-stage" "first-view" "first" "let" "evt")}
        {Lisp-Entry "on-tile-horizontally" method #f 2385 27 2385 47 ("increase!" "Dimension" "set-size" "Point" "new" "set-position" "frame" "for-each" "restore" "lambda" "with-locked-update" "0" "t" "quotient" "h" "get-height" "height" "get-width" "width" "length" "count" "get-views" "frames" "get-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-tile-vertically" method #f 2403 27 2403 45 ("increase!" "Dimension" "set-size" "Point" "new" "set-position" "frame" "for-each" "restore" "lambda" "with-locked-update" "0" "l" "quotient" "w" "get-height" "height" "get-width" "width" "length" "count" "get-views" "frames" "get-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-select-frame" method #f 2421 19 2421 34 ("focus-host" "bring-to-front" "host:" "get-property" "host" "let" "evt")}
        {Lisp-Entry "on-select-palette" method #f 2427 19 2427 36 ("get-player" "bring-to-front" "host:" "get-property" "host" "let" "evt")}}}})
"Application-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Application-Actions.jazz"} 1259960727
    {Lisp-Entry "jazz.system.application.Application-Actions" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Application-Actions" class #f 46 20 46 39 ("on-about" "about" "on-tile-vertically" "tile-vertically" "on-tile-horizontally" "tile-horizontally" "on-current-frame" "current-frame" "on-previous-frame" "previous-frame" "on-next-frame" "next-frame" "on-previous-workspace" "previous-workspace" "F6" "on-next-workspace" "next-workspace" "Backspace" "on-full-screen" "full-screen" "on-maximize/restore" "maximize/restore" "Space" "on-zoom-vertically" "zoom-vertically" "Return" "on-zoom-horizontally" "zoom-horizontally" "on-command-execute" "command-execute" "alternate-shortcut:" "on-command-extended" "command-extended" "on-replace-all-selected" "replace-all-selected" "on-replace-all" "replace-all" "on-replace&find-forward" "replace&find-forward" "on-replace" "replace" "on-find-backward" "find-backward" "F3" "on-find-forward" "find-forward" "on-pop-results" "pop-results" "on-edit-current" "edit-current" "on-edit-previous" "edit-previous" "F4" "on-edit-next" "edit-next" "on-find-in-projects" "find-in-projects" "on-find-in-directories" "find-in-directories" ":shift" "on-find-in-text" "find-in-text" "on-find" "find" "on-forward-history" "forward-history" "on-backward-history" "backward-history" "on-add-history" "add-history" "on-paste-cycle-stack-reversed" "paste-cycle-stack-reversed" "on-paste-cycle-stack" "paste-cycle-stack" "on-quit-application" "exit" "on-page-setup" "page-setup" "on-print-preview" "print-preview" "on-print-layout" "print-layout" "on-print" "print" "on-save-all" "save-all" "on-close-all" "close-all" "on-close" "close" "on-open" "open" ":alt" ":control" "Shortcut" "shortcut:" "on-new" ":application" "Event-Handler" "action-handler:" "new" "name:" "Actions")}}})
"Application-Bindings"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Application-Bindings.jazz"} 1259266728
    {Lisp-Entry "jazz.system.application.Application-Bindings" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Application-Bindings" class #f 44 20 44 40 ("guest" "tree" "formatted-text" "text" "view" "application" "name:" "Bindings")}}})
"Application-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Application-Event.jazz"} 1259266728
    {Lisp-Entry "jazz.system.application.Application-Event" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Application-Event" class #f 43 7 43 24 ("Event")}}})
"Application-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Application-Preferences.jazz"} 1267024518
    {Lisp-Entry "jazz.system.application.Application-Preferences" module #f 37 18 37 65 ("jazz")
      {Lisp-Entry "Application-Preferences" class #f 46 20 46 43 ("interface" "workspaces" "tools" "documents" "favorites" "aliases" "name:" "restored" "'restored" "initialize" "Process-Preferences")
        {Lisp-Entry "toplevel-title" property #f 49 12 49 26 ()}
        {Lisp-Entry "get-toplevel-title" accessor #f 49 62 49 70 ()}
        {Lisp-Entry "set-toplevel-title" accessor #f 49 62 49 70 ()}
        {Lisp-Entry "toplevel-state" property #f 50 12 50 26 ()}
        {Lisp-Entry "get-toplevel-state" accessor #f 50 62 50 70 ()}
        {Lisp-Entry "set-toplevel-state" accessor #f 50 62 50 70 ()}
        {Lisp-Entry "toplevel-position" property #f 51 12 51 29 ()}
        {Lisp-Entry "get-toplevel-position" accessor #f 51 62 51 70 ()}
        {Lisp-Entry "set-toplevel-position" accessor #f 51 62 51 70 ()}
        {Lisp-Entry "toplevel-size" property #f 52 12 52 25 ()}
        {Lisp-Entry "get-toplevel-size" accessor #f 52 62 52 70 ()}
        {Lisp-Entry "set-toplevel-size" accessor #f 52 62 52 70 ()}
        {Lisp-Entry "catalog-types" property #f 53 12 53 25 ()}
        {Lisp-Entry "get-catalog-types" accessor #f 53 62 53 70 ()}
        {Lisp-Entry "set-catalog-types" accessor #f 53 62 53 70 ()}
        {Lisp-Entry "documented?" property #f 54 12 54 23 ()}
        {Lisp-Entry "get-documented?" accessor #f 54 62 54 70 ()}
        {Lisp-Entry "set-documented?" accessor #f 54 62 54 70 ()}
        {Lisp-Entry "fullscreen-warned?" property #f 55 12 55 30 ()}
        {Lisp-Entry "get-fullscreen-warned?" accessor #f 55 62 55 70 ()}
        {Lisp-Entry "set-fullscreen-warned?" accessor #f 55 62 55 70 ()}
        {Lisp-Entry "active-bindings" property #f 56 12 56 27 ()}
        {Lisp-Entry "get-active-bindings" accessor #f 56 62 56 70 ()}
        {Lisp-Entry "set-active-bindings" accessor #f 56 62 56 70 ()}
        {Lisp-Entry "walk-form" method #f 75 16 75 25 ("push-reference" "in-manifest?" "when" "cdr" "catalog-type" "info" "lambda" "for-each" "'catalog-types" "get-property" "catalog-types" "let" "nextmethod" "form" "analyser")}
        {Lisp-Entry "get-class-descriptor" method #f 90 25 90 45 ("Application-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 99 11 99 17 ()
        {Lisp-Entry "Application-Preferences-Descriptor" class #f 105 7 105 41 ("Process-Preferences-Descriptor")
          {Lisp-Entry "component-get-row-instance" method #f 108 20 108 46 ("nextmethod" "else" "Boolean-Row" "documented?" "String-Row" "new" "toplevel-title" "field-name" "case" "property" "component")}
          {Lisp-Entry "component-get-categorized-properties" method #f 115 20 115 56 ("documented?" "catalog-types" "toplevel-state" "toplevel-title" "protocols" "current-directory" "active-context" "component")}}}}})
"Command-Line"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "Command-Line.jazz"} 1259266728
    {Lisp-Entry "jazz.system.process.Command-Line" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Command-Line" class #f 40 20 40 32 ("Object")}
      {Lisp-Entry "Command-Line" class #f 46 20 46 32 ("Object")
        {Lisp-Entry "for-each-action" method #f 54 23 54 38 ("'argument" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "'section" "arguments" "section" "list" "'action" "sections" "action-help" "action" "bind" "info" "lambda" "for-each" "actions" "proc")}
        {Lisp-Entry "present-version" method #f 75 16 75 31 ("present" "format" "version" "name")}
        {Lisp-Entry "present-syntax" method #f 81 16 81 30 ("format" "name")}
        {Lisp-Entry "present-help" method #f 86 16 86 28 ("get-output-string" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "section" "format" "action-help" "bind" "action" "case" "info" "type" "lambda" "for-each-action" "open-output-string" "printer" "let" "actions")}
        {Lisp-Entry "present-examples" method #f 105 16 105 32 ("get-output-string" "present-argument-value" "when" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "get-process" "process-name" "format" "action-help" "bind" "action" "case" "info" "type" "lambda" "for-each-action" "open-output-string" "printer" "let" "actions")}
        {Lisp-Entry "present-argument-value" method #f 122 16 122 38 ("format" "string?" "if" "value")}
        {Lisp-Entry "command-help" method #f 128 23 128 35 ("title:" "present-examples" "present-help" "present-syntax" "present-version" "format" "message-box" "actions" "version" "name")}}}})
"Exception-Presenter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "Exception-Presenter.jazz"} 1264714816
    {Lisp-Entry "jazz.system.application.Exception-Presenter" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Exception-Presenter" class #f 45 20 45 39 ("Object")}
      {Lisp-Entry "Exception-Presenter" class #f 51 20 51 39 ("Object")
        {Lisp-Entry "present" method #f 54 18 54 25 ("set-auto-continue?" "remove-nils" "actions:" "present-execution-stack" "content:" "message-box" "code" "let" "continue-exception" "get-continuable?" "get-auto-continue?" "and" "get-execution-stack" "execution-stack" "get-execution-context" "execution-context" "cancel" "'cancel" "cancel-action" "continue-all" "continue-all-action" "continue" "continue-action" "restart" "restart-action" "yes" "'yes" "else" "if" "case" "list" "yes-action" "continuable?" "restartable?" "present-message" "message" "let*" "prefix?" "prefix?:" "error" "'error" "type" "type:" "exception")}
        {Lisp-Entry "present-execution-stack" method #f 86 11 86 34 ("father:" "detail" "Image-Resource" "image:" "either" "title:" "Tree-Node" "list" "children:" "collapsed" "'collapsed" "state:" "add-row" "row" "get-details" "details" "get-title" "title" "node" "lambda" "for-each" "'tree" "locate" "tree" "150" "450" "Dimension" "size:" "Context-Border" "new" "border" "let*" "when" "execution-stack")}}
      {Lisp-Entry "Context-Border" class #f 106 7 106 21 ("300" "width:" "title:" "node" "selection-mode:" ":images" "portfolio:" "tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "flat?:" "Outline-Border" "name:" "Color" "border-color:" "solid" "border-type:" "Border-View")}
      {Lisp-Entry "Context-Tree" class #f 124 7 124 19 ("Tree-View")}}})
"Exit-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "Exit-Listener.jazz"} 1259266728
    {Lisp-Entry "jazz.system.process.Exit-Listener" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Exit-Listener" interface #f 44 24 44 37 ("Listener")
        {Lisp-Entry "prepare-exit" method #f 47 35 47 47 ()}}}})
"Performance-Query"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "performance" "platform" "windows" "Performance-Query.jazz"} 1259266728
    {Lisp-Entry "jazz.system.performance.platform.windows.Performance-Query" module #f 37 18 37 76 ("jazz")
      {Lisp-Entry "Performance-Query" class #f 44 7 44 24 ("Object")
        {Lisp-Entry "query" slot #f 47 8 47 13 ()}
        {Lisp-Entry "initialize" method #f 50 11 50 21 ("destroy-mandatory" "query~self" "set!" "validate-status" "0" "NULL" "PdhOpenQuery" "query" "status" "receive" "nextmethod")}
        {Lisp-Entry "destroy" method #f 58 11 58 18 ("nextmethod" "query" "PdhCloseQuery" "validate-status")}
        {Lisp-Entry "add-counter" method #f 63 18 63 29 ("validate-status" "0" "query" "PdhAddCounter" "counter" "status" "receive" "let" "bind-keywords" "BrowseCounterPath" "error" "else" "guess-process-instance" "module-base" ":string" "format" "and" "browse-counter-path" "cond" "browse?" "counter-name" "object-name" "path" "counter-path" "define" "rest")}
        {Lisp-Entry "collect-data" method #f 82 18 82 30 ("query" "PdhCollectQueryData" "validate-status")}
        {Lisp-Entry "get-counter-value" method #f 86 18 86 35 ("PDH_FMT_COUNTERVALUE-free" "PDH_FMT_COUNTERVALUE-longValue-ref" "prog1" "NULL" "PDH_FMT_LONG" "PdhGetFormattedCounterValue" "validate-status" "PDH_FMT_COUNTERVALUE-make" "value" "let" "counter")}
        {Lisp-Entry "validate-status" method #f 93 11 93 26 ("error" "0" "/=" "when" "status")}}}})
"Process"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "Process.jazz"} 1266250071
    {Lisp-Entry "jazz.system.process.Process" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Process" class #f 55 7 55 14 ("initialize" "Object")
        {Lisp-Entry "settings" slot #f 58 8 58 16 ()}
        {Lisp-Entry "get-settings" accessor #f 58 50 58 58 ()}
        {Lisp-Entry "preferences-root" slot #f 59 8 59 24 ()}
        {Lisp-Entry "get-preferences-root" accessor #f 59 50 59 58 ()}
        {Lisp-Entry "preferences-designer" slot #f 60 8 60 28 ()}
        {Lisp-Entry "get-preferences-designer" accessor #f 60 50 60 58 ()}
        {Lisp-Entry "context" slot #f 61 8 61 15 ()}
        {Lisp-Entry "exit-continuation" slot #f 62 8 62 25 ()}
        {Lisp-Entry "process-name" method #f 70 26 70 38 ()}
        {Lisp-Entry "process-owner" method #f 74 26 74 39 ()}
        {Lisp-Entry "process-copyright" method #f 78 26 78 43 ()}
        {Lisp-Entry "process-licensee" method #f 82 26 82 42 ()}
        {Lisp-Entry "process-icon" method #f 86 26 86 38 ()}
        {Lisp-Entry "process-version" method #f 90 26 90 41 ("0" "1" "Version")}
        {Lisp-Entry "process-email" method #f 94 26 94 39 ()}
        {Lisp-Entry "process-actions" method #f 98 26 98 41 ()}
        {Lisp-Entry "process-event-source" method #f 102 26 102 46 ("process-name" "EventSource" "'EventSource" "argument/setting" "either")}
        {Lisp-Entry "boot-environment" method #f 112 26 112 42 ("run-loop" "format" "system-message" "get-load-stack" "not-null?" "get-load-thread" "current-thread" "eq?" "and" "run-loop?" "when" "ready-debuggee" "activate-process" "conclude-phase" "finish-phase" "finalize-phase" "start-phase" "prepare-phase" "register-versions" "initialize-settings" "initialize-aliases" "update-debuggee" "signal" "Cancel-Signal" "catch")}
        {Lisp-Entry "update-debuggee" method #f 134 11 134 26 ("update-debuggee-process" "process-version" "present" "current-process-version-set!" "process-name" "current-process-title-set!" "current-process-title" "unless")}
        {Lisp-Entry "initialize-settings" method #f 141 29 141 48 ()}
        {Lisp-Entry "register-versions" method #f 145 11 145 28 ("get-windows-version" "present" "windows-version:" "register-crash-info")}
        {Lisp-Entry "prepare-phase" method #f 150 11 150 24 ("prepare-process" "prepare-workbench" "prepare-preferences-repositories" "prepare-preferences-aliases" "prepare-preferences" "prepare-environment" "prepare-aliases" "prepare-bindings")}
        {Lisp-Entry "prepare-environment" method #f 161 29 161 48 ("self" "set-process")}
        {Lisp-Entry "prepare-preferences" method #f 165 11 165 30 ("setup-preferences")}
        {Lisp-Entry "prepare-process" method #f 169 26 169 41 ("setup-crash-handler")}
        {Lisp-Entry "start-phase" method #f 173 11 173 22 ("start-process" "start-environment")}
        {Lisp-Entry "start-environment" method #f 178 29 178 46 ()}
        {Lisp-Entry "start-process" method #f 182 26 182 39 ()}
        {Lisp-Entry "finalize-phase" method #f 186 11 186 25 ("setup-profile" "finalize-process" "start-servers" "finalize-environment")}
        {Lisp-Entry "finalize-environment" method #f 193 29 193 49 ()}
        {Lisp-Entry "finalize-process" method #f 197 26 197 42 ()}
        {Lisp-Entry "setup-profile" method #f 201 26 201 39 ()}
        {Lisp-Entry "finish-phase" method #f 205 11 205 23 ("finish-process" "finish-environment")}
        {Lisp-Entry "finish-environment" method #f 210 29 210 47 ("register-base-objects")}
        {Lisp-Entry "finish-process" method #f 214 26 214 40 ()}
        {Lisp-Entry "conclude-phase" method #f 218 11 218 25 ("conclude-process" "conclude-environment")}
        {Lisp-Entry "conclude-environment" method #f 223 29 223 49 ()}
        {Lisp-Entry "conclude-process" method #f 227 26 227 42 ("get-console-port" "current-thread" "start-repl-thread" "select-console" "get-controller-debugger" "when")}
        {Lisp-Entry "terminate-process" method #f 238 29 238 46 ()}
        {Lisp-Entry "preserve-environment" method #f 247 26 247 46 ()}
        {Lisp-Entry "close-environment" method #f 251 26 251 43 ("stop-servers" "detach-from-controller" "reloading-process?" "unless" "save" "get-form" "get-origin" "file?" "persist-preferences?" "preferences-designer" "and" "when" "close-preferences" "define")}
        {Lisp-Entry "get-toplevel" method #f 267 26 267 38 ()}
        {Lisp-Entry "exit-process" method #f 276 18 276 30 ("exit" "continuation-return" "exit-continuation" "if" "unload-process" "0" "status")}
        {Lisp-Entry "reload-process" method #f 283 26 283 40 ("boot-environment" "exit-continuation" "continuation-graft" "unload-process" "*reloading-process?*" "parameterize" "lambda" "reload-process" "'reload-process" "primordial-thread" "thread-execute")}
        {Lisp-Entry "unload-process" method #f 291 11 291 25 ("set-process" "terminate-process" "close-environment" "preserve-environment" "*exiting-process?*" "parameterize")}
        {Lisp-Entry "process-alias" method #f 304 26 304 39 ("find-component" "null?" "cdr" "next" "when" "car" "process-alias" "sub" "let" "pair?" "if" "else" "self" ":process" "case" "name")}
        {Lisp-Entry "get-context" method #f 323 18 323 29 ("context")}
        {Lisp-Entry "set-context" method #f 327 18 327 29 ("context-update" "context" "set!" "ctx")}
        {Lisp-Entry "context-update" method #f 337 29 337 43 ("set-client" "get-client" "client" "editor" "Toolbox-Manager" "'Toolbox-Manager" "modify-toolbox" "singleton-docked" "get-guest" "modify-editor" "SQL-Connections-Manager" "'SQL-Connections-Manager" "in-manifest?" "when" "modify-connections" "set-active-branch" "context" "find-component" "branch" "get-preferences-designer" "designer" "get-preferences" "pref" "let*" "modify-preferences" "define")}
        {Lisp-Entry "install-context" method #f 366 18 366 33 ("set-active-branch" "find-child" "branch" "let" "context" "when" "component")}
        {Lisp-Entry "persist-preferences?" method #f 378 29 378 49 ()}
        {Lisp-Entry "preferences-file" method #f 382 29 382 45 ("Profile" "File")}
        {Lisp-Entry "setup-preferences" method #f 386 29 386 46 ("setup-preferences/designer")}
        {Lisp-Entry "setup-preferences/designer" method #f 390 11 390 37 ("set-current-directory" "exists?" "and" "when" "get-current-directory" "directory" "install-context" "context" "set!" "load-preferences" "set-preferences/designer" "else" "get-active-context" "preferences-root" "string->symbol" "cond" "command-argument" "arg" "let" "preferences-context" "define")}
        {Lisp-Entry "set-preferences/designer" method #f 405 11 405 35 ("reference:" "get-form" "form:" "Designer" "new" "preferences-designer" "preferences-root" "set!" "preferences")}
        {Lisp-Entry "load-preferences" method #f 410 29 410 45 ("default-preferences" "read-from-file" "instantiate" "exists?" "Profile" "'Profile" "find-alias" "and" "if" "preferences-file" "file" "persist-preferences?" "persist?" "let")}
        {Lisp-Entry "default-preferences" method #f 418 29 418 48 ("Process-Preferences" "new")}
        {Lisp-Entry "apply-preferences" method #f 422 18 422 35 ("apply-preferences" "client" "preferences")}
        {Lisp-Entry "save-preferences" method #f 426 18 426 34 ("get-preferences-designer" "save-preferences" "client" "preferences")}
        {Lisp-Entry "set-preferences-property" method #f 430 18 430 42 ("get-preferences-designer" "set-property" "value" "property" "preferences")}
        {Lisp-Entry "get-preferences-rights" method #f 434 26 434 48 ()}
        {Lisp-Entry "persist-usernames?" method #f 443 26 443 44 ()}
        {Lisp-Entry "persist-passwords?" method #f 447 26 447 44 ()}
        {Lisp-Entry "mandatory-version" method #f 456 26 456 43 ("what")}
        {Lisp-Entry "signal-readyness" method #f 466 21 466 37 ("SetEvent" "when" "EVENT_MODIFY_STATE" "OpenEvent" "handle" "let" "name")}
        {Lisp-Entry "run-loop" method #f 477 26 477 34 ("start-loop" "with-current-loop" "with-repl-context" "exit-continuation" "set!" "cont" "lambda" "continuation-capture")}
        {Lisp-Entry "resume-loop" method #f 488 18 488 29 ("invoke-restart" "resume-loop-action" "when" "resume-loop" "'resume-loop" "find-restart" "restart" "let")}
        {Lisp-Entry "resume-loop-action" method #f 495 26 495 44 ()}
        {Lisp-Entry "start-loop" method #f 499 26 499 36 ("get-exception-debugger" "with-exception-debugger" "thread-read" "thunk" "lambda" "present-current-loop-restart" "resume-loop" "'resume-loop" "with-restart-catcher" "loop" "let" "proper-tail-calls" "declare")}
        {Lisp-Entry "user-feedback" method #f 515 29 515 42 ("message")}
        {Lisp-Entry "system-title" method #f 524 26 524 38 ()}
        {Lisp-Entry "prepare-bindings" method #f 533 29 533 45 ()}
        {Lisp-Entry "prepare-aliases" method #f 542 29 542 44 ()}
        {Lisp-Entry "prepare-preferences-aliases" method #f 546 26 546 53 ("get-list" "register-alias" "get-directory" "directory" "get-alias" "alias" "lambda" "for-each" "get-children" "when" "error?:" "aliases" "'aliases" "get-preferences" "pref" "let")}
        {Lisp-Entry "resolve-alias" method #f 558 26 558 39 ("name")}
        {Lisp-Entry "prepare-preferences-repositories" method #f 567 26 567 58 ("parse" "install-repository" "dir" "lambda" "for-each" "get-repositories" "when" "error?:" "repositories" "'repositories" "get-preferences" "pref" "let")}
        {Lisp-Entry "prepare-workbench" method #f 581 26 581 43 ()}
        {Lisp-Entry "start-servers" method #f 590 29 590 42 ("start-remote-server" "command-host/service" "when")}
        {Lisp-Entry "start-remote-server" method #f 596 19 596 38 ("default-listener-service" "default-service:" "default-listener-host" "default-host:" "start-remote-listener")}
        {Lisp-Entry "default-listener-host" method #f 600 29 600 50 ()}
        {Lisp-Entry "default-listener-service" method #f 604 29 604 53 ()}
        {Lisp-Entry "stop-servers" method #f 608 29 608 41 ("stop-remote-listener")}
        {Lisp-Entry "get-name" method #f 617 18 617 26 ("process-name")}
        {Lisp-Entry "get-icon" method #f 621 18 621 26 ("process-icon")}
        {Lisp-Entry "get-register" method #f 625 18 625 30 ("get-local-register")}
        {Lisp-Entry "register-base-objects" method #f 634 29 634 50 ()}
        {Lisp-Entry "get-local-debugger" method #f 643 26 643 44 ()}
        {Lisp-Entry "initial-console-context" method #f 652 26 652 49 (":process")}
        {Lisp-Entry "process-debuggee-loop" method #f 656 29 656 50 ("debuggee-loop")}}}})
"Process-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "Process-Preferences.jazz"} 1267024518
    {Lisp-Entry "jazz.system.process.Process-Preferences" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Process-Preferences" class #f 46 20 46 39 ("title:" "initialize" "Preferences")
        {Lisp-Entry "active-context" property #f 49 12 49 26 ()}
        {Lisp-Entry "get-active-context" accessor #f 49 55 49 63 ()}
        {Lisp-Entry "set-active-context" accessor #f 49 55 49 63 ()}
        {Lisp-Entry "current-directory" property #f 50 12 50 29 ()}
        {Lisp-Entry "get-current-directory" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "set-current-directory" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "protocols" property #f 51 12 51 21 ()}
        {Lisp-Entry "get-protocols" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "set-protocols" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "walk-form" method #f 64 16 64 25 ("push-reference" "in-manifest?" "when" "cdr" "protocol-class" "info" "lambda" "for-each" "'protocols" "get-property" "protocols" "let" "form" "analyser")}
        {Lisp-Entry "get-class-descriptor" method #f 78 25 78 45 ("Process-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 87 11 87 17 ()
        {Lisp-Entry "Process-Preferences-Descriptor" class #f 93 7 93 37 ("Preferences-Descriptor")
          {Lisp-Entry "component-can-rename-component?" method #f 96 20 96 51 ("component")}
          {Lisp-Entry "component-can-delete-component?" method #f 100 20 100 51 ("component")}
          {Lisp-Entry "component-can-move-component?" method #f 104 20 104 49 ("component")}
          {Lisp-Entry "component-can-copy-component?" method #f 108 20 108 49 ("component")}
          {Lisp-Entry "component-get-row-instance" method #f 112 20 112 46 ("nextmethod" "else" "Protocol-List-Row" "new" "protocols" "field-name" "case" "property" "component")}}
        {Lisp-Entry "Protocol-List-Row" class #f 123 7 123 24 ("List-Row")
          {Lisp-Entry "get-subrow-class" method #f 126 20 126 36 ("Protocol-Row")}
          {Lisp-Entry "add-value" method #f 130 20 130 29 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
          {Lisp-Entry "new-value" method #f 134 20 134 29 ("cons")}}
        {Lisp-Entry "Protocol-Row" class #f 143 7 143 19 ("Value-Row")
          {Lisp-Entry "present" method #f 151 20 151 27 ("format" "model")}}}}})
"Save-Environment-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "Save-Environment-Listener.jazz"} 1259266728
    {Lisp-Entry "jazz.system.process.Save-Environment-Listener" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "Save-Environment-Listener" interface #f 44 24 44 49 ("Listener")
        {Lisp-Entry "save-environment" method #f 47 35 47 51 ()}}}})
"Service"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "service" "platform" "windows" "Service.jazz"} 1259266728
    {Lisp-Entry "jazz.system.service.platform.windows.Service" module #f 38 18 38 62 ("MF_SEPARATOR" "InsertMenuItem" "length" "cch" "'cch" "dwTypeData" "'dwTypeData" "wID" "'wID" "MFS_DEFAULT" "fState" "'fState" "MFT_STRING" "MFT_SEPARATOR" "fType" "'fType" "MIIM_ID" "MIIM_STATE" "MIIM_TYPE" "fMask" "'fMask" "MENUITEMINFO" "info" "DestroyMenu" "invoke" ":action" "Event" "apply" "evt" "get-properties" "properties" "sender" "action-handler:" "getf" "action-handler" "-" "element" "y" "'y" "x" "'x" "get" "TPM_RETURNCMD" "TPM_RIGHTALIGN" "TrackPopupMenu" "SetForegroundWindow" "increase!" "id:" "default?:" "separator?:" "title:" "insert-item" "others" "default?" "separator?" "title" "bind-keywords" "for-each" "id" "CreatePopupMenu" "menu" "GetCursorPos" "POINT" "point" "with" "config" "track-menu" "NIM_DELETE" "NIM_ADD" "Shell_NotifyIcon" "uCallbackMessage" "'uCallbackMessage" "NIF_ICON" "NIF_MESSAGE" "bitwise-ior" "uFlags" "'uFlags" "10" "uID" "'uID" "hWnd" "'hWnd" "size-of" "cbSize" "'cbSize" "LR_SHARED" "16" "IMAGE_ICON" "int-resource" "LoadImage" "icon" "resource" "NOTIFYICONDATA" "record" "100" "CreateWindowEx" "create-taskicon-hwnd" "RegisterClassEx" "lpszClassName" "'lpszClassName" "lpszMenuName" "'lpszMenuName" "hbrBackground" "'hbrBackground" "hCursor" "'hCursor" "hIcon" "'hIcon" "hInstance" "'hInstance" "cbWndExtra" "'cbWndExtra" "cbClsExtra" "'cbClsExtra" "get-window-proc" "lpfnWndProc" "'lpfnWndProc" "CS_DBLCLKS" "style" "'style" "set" "WNDCLASSEX" "wc" "current-instance" "instance" "taskicon-class" "taskbar-context-menu" "WM_RBUTTONDOWN" "taskbar-double-click" "WM_LBUTTONDBLCLK" "taskbar-mouse-down" "WM_LBUTTONDOWN" ":service" "process-alias" "EXIT_FAILURE" "exception:" "file:" "dump-stack" "distribution-build?" "not" "timestamped-file" "file" "exception-reason" "log-error-event" "accountable" "frame" "exception" "debug-exception" "DefWindowProc" "taskbar-event" "JZ_TASKICON" "lparam" "wparam" "hwnd" "DispatchMessage" "TranslateMessage" "GetMessage" "MSG" "msg" "NULL" "WM_QUIT" "PostMessage" "thread" "lambda" "execute:" "self" "context:" "name:" "Thread" "unimplemented" "process-messages" "launch-service-thread" "start-loop" "1" "sleep" "while" "process-service" "setup-service" "run-service" "=" "if" "get-service-error" "get-service-handle" "coinitialize" "service-main" "0" "/=" "start-service-dispatcher" "err" "run-loop" "log-success-event" "stop-service" "pause-service" "continue-service" "start-service" "neq?" "updated-state" "process-service-control" "'stopped" "'stop-pending" "'paused" "'pause-pending" "'running" "'continue-pending" "'start-pending" "get-service-state" "ecase" "get-state" "SERVICE_STOPPED" "stopped" "SERVICE_STOP_PENDING" "stop-pending" "SERVICE_PAUSED" "paused" "SERVICE_PAUSE_PENDING" "pause-pending" "SERVICE_RUNNING" "running" "SERVICE_CONTINUE_PENDING" "continue-pending" "SERVICE_START_PENDING" "start-pending" "case" "set-service-state" "state" "set-state" "public" "delete-service" "open-service" "presentation:" "create-service" "handle" "command" "executable" "Service-Manager" "new" "manager" "parse" "application-key" "Bin" "Directory" "new-file" "message-file" "application-path" "presentation" "let*" "messages" "set-value" "create-key" "service-key" "with-closed" "format" "service-path" "Registry" "Local-Machine" "local-machine-key" "description" "name" "service-icon" "service-executable" "service-messages" "service-description" "service-name" "virtual" "protected" "service-presentation" "EventSource" "'EventSource" "argument/setting" "either" "process-event-source" "remove-taskicon" "and" "close-environment" "add-taskicon" "process-taskbar-message" "set-window-callback" "register-taskicon-class" "eq?" "when" "finalize-process" "error" "else" "debug" "'debug" "run" "'run" "set!" "unregister-service" "register-service" "EXIT_SUCCESS" "exit-process" "process-actions" "process-version" "process-name" "Command-Line" "command-help" "ci=?" "null?" "or" "cond" "command-action" "action" "let" "nextmethod" "prepare-process" "method" "taskicon-hwnd" "initialize" "cached-state" "mode" "slot" "Process" "extends" "Service" "class" "jazz")
      {Lisp-Entry "Service" class #f 44 7 44 14 ("Process")}}})
"Service-Handle"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "service" "platform" "windows" "Service-Handle.jazz"} 1259266728
    {Lisp-Entry "jazz.system.service.platform.windows.Service-Handle" module #f 37 18 37 69 ("jazz.library" "import" "jazz")
      {Lisp-Entry "Service-Handle" class #f 40 7 40 21 ("Object")}}})
"Service-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "service" "platform" "windows" "Service-Manager.jazz"} 1259266728
    {Lisp-Entry "jazz.system.service.platform.windows.Service-Manager" module #f 37 18 37 70 ("jazz.library" "import" "jazz")
      {Lisp-Entry "Service-Manager" class #f 40 7 40 22 ("Object")}}})
"_application"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "_application.jazz"} 1259266728
    {Lisp-Entry "jazz.system.application" module #f 37 8 37 31 ("jazz")}})
"_log"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "log" "_log.jazz"} 1259266728
    {Lisp-Entry "jazz.system.log" module #f 38 8 38 23 ("jazz")
      {Lisp-Entry "log-event" definition #f 45 20 45 29 ("ReportEvent" "0" "array-set!" "1" "string" "new-array" "strings" "RegisterEventSource" "handle" "get-process" "process-event-source" "name" "let*" "log-event" "'log-event" "unimplemented" "message" "event-id" "type")}
      {Lisp-Entry "log-error-event" definition #f 55 20 55 35 ("event-id" "EVENTLOG_ERROR_TYPE" "log-event" "log-error-event" "'log-error-event" "unimplemented" "rest" "message")}
      {Lisp-Entry "log-success-event" definition #f 61 20 61 37 ("EVENTLOG_SUCCESS" "log-event" "log-success-event" "'log-success-event" "unimplemented" "1" "make-event-id" "event-id" "event-id:" "message")}}})
"_performance"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "performance" "_performance.jazz"} 1259266728
    {Lisp-Entry "jazz.system.performance" module #f 37 8 37 31 ("jazz")}})
"_process"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "_process.jazz"} 1259266728
    {Lisp-Entry "jazz.system.process" module #f 37 8 37 27 ("jazz")}})
"_service"
 ({Lisp-File-Entry {File jazz.system "src" "jazz" "system" "service" "_service.jazz"} 1259266728
    {Lisp-Entry "jazz.system.service" module #f 37 8 37 27 ("jazz")}})
"_system"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "_system.jazz"} 1259266728
    {Lisp-Entry "jazz.system" module #f 37 8 37 19 ("jazz")
      {Lisp-Entry "argument/setting" definition #f 56 20 56 36 ("get-setting" "command-argument" "either" "prop" "arg")}
      {Lisp-Entry "pathname-argument" definition #f 61 20 61 37 ("length" "-" "1" "subseq" "0" "element" "=" "tokenise-filename" "not" "if" "command-argument" "arg" "let" "name")}
      {Lisp-Entry "require-argument" definition #f 71 20 71 36 ("command-line" "error" "command-argument" "either" "require-argument" "'require-argument" "unimplemented" "key")}
      {Lisp-Entry "require-argument/setting" definition #f 78 20 78 44 ("command-line" "error" "argument/setting" "either" "require-argument/setting" "'require-argument/setting" "unimplemented" "prop" "arg")}
      {Lisp-Entry "boolean-argument/setting" definition #f 85 20 85 44 ("parse-boolean" "not" "if" "argument/setting" "value" "let" "default" "prop" "arg")}
      {Lisp-Entry "integer-argument/setting" definition #f 92 20 92 44 ("parse-integer" "integer?" "if" "when" "argument/setting" "str/int" "let" "prop" "arg")}
      {Lisp-Entry "file-argument/setting" definition #f 100 20 100 41 ("make-file" "when" "argument/setting" "str" "let" "extension" "prop" "arg")}
      {Lisp-Entry "require-file-argument/setting" definition #f 106 20 106 49 ("require-argument/setting" "make-file" "extension" "prop" "arg")}
      {Lisp-Entry "make-file" definition #f 110 13 110 22 ("command-line" "error" "get-extension" "/=" "if" "tokenise-filename" "File" "new" "file" "let" "make-file" "'make-file" "unimplemented" "extension" "arg" "str")}
      {Lisp-Entry "directory-argument/setting" definition #f 119 20 119 46 ("make-directory" "when" "argument/setting" "str" "let" "prop" "arg")}
      {Lisp-Entry "require-directory-argument/setting" definition #f 125 20 125 54 ("require-argument/setting" "make-directory" "prop" "arg")}
      {Lisp-Entry "make-directory" definition #f 129 13 129 27 ("tokenise-filename" "Directory" "new" "make-directory" "'make-directory" "unimplemented" "str")}
      {Lisp-Entry "host-argument/setting" definition #f 135 20 135 41 ("name:" "Host" "new" "when" "argument/setting" "name" "let" "host-argument/setting" "'host-argument/setting" "unimplemented" "prop" "arg")}
      {Lisp-Entry "port-argument/setting" definition #f 143 20 143 41 ("argument/setting" "prop" "arg")}
      {Lisp-Entry "Settings" class #f 152 7 152 15 ("initialize" "Object")
        {Lisp-Entry "file" slot #f 155 8 155 12 ()}
        {Lisp-Entry "content" slot #f 156 8 156 15 ()}
        {Lisp-Entry "modified?" slot #f 157 8 157 17 ()}
        {Lisp-Entry "initialize" method #f 160 20 160 30 ("set-file" "nextmethod" "file" "file:")}
        {Lisp-Entry "get-file" method #f 165 18 165 26 ("file")}
        {Lisp-Entry "set-file" method #f 169 18 169 26 ("load-content" "content" "not" "if" "file" "set!" "value")}
        {Lisp-Entry "get-setting" method #f 176 18 176 29 ("content" "table-ref" "default" "setting")}
        {Lisp-Entry "set-setting" method #f 180 18 180 29 ("modified?" "set!" "content" "table-set!" "value" "setting")}
        {Lisp-Entry "load-content" method #f 185 18 185 30 ("modified?" "file" "table-load" "eq?" "test:" "make-table" "content" "set!")}
        {Lisp-Entry "save-content" method #f 191 18 191 30 ("modified?" "set!" "-" "format" "value" "setting" "bind" "for-each" "key:" "string<?" "sort" "sorted" "not-null?" "when" "content" "table->list" "all" "let" "output" "file" "parse" "call-with-output-file" "car" "symbol->string" "cardinality" "info" "lambda" "map" "max" "apply" "list" "find-longest" "define")}}
      {Lisp-Entry "*settings*" definition #f 215 12 215 22 ()}
      {Lisp-Entry "get-settings" definition #f 219 20 219 32 ("*settings*")}
      {Lisp-Entry "register-settings" definition #f 223 20 223 37 ("cons" "*settings*" "set!" "settings")}
      {Lisp-Entry "Not-Found" definition #f 227 12 227 21 ("not-found" "'not-found" "list")}
      {Lisp-Entry "get-setting" definition #f 231 20 231 31 ("*settings*" "continuation-return" "neq?" "when" "Not-Found" "get-setting" "value" "let" "settings" "for-each" "return" "lambda" "continuation-capture" "default" "name")}
      {Lisp-Entry "require-setting" definition #f 242 20 242 35 ("error" "get-setting" "either" "name")}
      {Lisp-Entry "require-string-setting" definition #f 247 20 247 42 ("error" "string?" "not" "if" "require-setting" "setting" "let" "name")}
      {Lisp-Entry "find-preferences" definition #f 259 20 259 36 ("error?:" "get-preferences-child" "not" "if" "get-process" "get-preferences-root" "root" "let" "name")}
      {Lisp-Entry "get-preferences" definition #f 266 20 266 35 ("get-preferences-child" "error" "when" "not" "if" "get-process" "get-preferences-root" "root" "let" "error?" "error?:" "name")}
      {Lisp-Entry "get-preferences-child" definition #f 274 20 274 41 ("error" "when" "find-component" "either" "not" "if" "error?" "error?:" "name" "preferences")}
      {Lisp-Entry "set-preference" definition #f 282 20 282 34 ("set-property" "get-process" "get-preferences-designer" "designer" "let" "value" "property" "preferences")}
      {Lisp-Entry "sort-case-sensitive?" definition #f 287 20 287 40 ("get-sort-case-sensitive?" "and" "error?:" "tree" "interface" "get-preferences" "pref" "let")}
      {Lisp-Entry "sort-predicates" definition #f 292 20 292 35 ("ci>?" "ci<?" "ci=?" "nu>?" "nu<?" "nu=?" "values" "sort-case-sensitive?" "if")}
      {Lisp-Entry "sort-predicate" definition #f 298 20 298 34 ("error" "else" "ci-compare" "compare" "ci>=?" "nu>=?" "greater/equal" "ci>?" "nu>?" "greater" "ci<=?" "nu<=?" "smaller/equal" "ci<?" "nu<?" "smaller" "ci=?" "nu=?" "if" "equal" "case" "sort-case-sensitive?" "case-sensitive?" "let" "name")}
      {Lisp-Entry "ensure-read/write" definition #f 315 33 315 50 ("throw-cancel" "read/write" "'read/write" "cancel" "'cancel" "no" "set-read/write" "'set-read/write" "yes" "process-keys?:" "question" "'question" "type:" "title:" "get-name" "format" "message-box" "case" "code" "no-action" "'no-action" "read/write?" "exists?" "not" "or" "if" "get-file" "file" "let" "throw" "'throw" "cancel-action" "cancel-action:" "moniker")}
      {Lisp-Entry "backup-file" definition #f 334 33 334 44 ("separator:" "get-extension" "get-base" "format" "get-parent" "new-unique-file" "file")}
      {Lisp-Entry "fail-safe-save" definition #f 338 33 338 47 ("else" "move-pathname" "exists?" "error?:" "delete-file" "not" "cond" "set!" "begin" "unwind-protect" "completed?" "backup-file" "back" "clone-file" "temp" "let" "fail-safe-save" "'fail-safe-save" "unimplemented" "proc" "file")}
      {Lisp-Entry "output-header" definition #f 363 20 363 33 ("when" "contributor" "for-each" "jazzscheme" "format" "toplevel-comment" "c" "case" "comment" "string-length" "make-string" "system-padding" "get-process" "system-title" "either" "let*" "lambda" "with-printer" "end-proper?" "end-proper?:" "contributors" "contributors:" "copyright" "copyright:" "author" "author:" "license" "license:" "system" "system:" "jazz" "'jazz" "language" "language:" "printer" "title")}
      {Lisp-Entry "output-section" definition #f 415 20 415 34 ("2" "*" "format" "4" "string-length" "+" "make-string" "extra" "toplevel" "c" "case" "comment" "let" "0" "level" "level:" "jazz" "'jazz" "language" "language:" "printer" "title")}
      {Lisp-Entry "terminal-repl" definition #f 431 21 431 34 ("repl" "bring-terminal-to-front" "show-terminal")}
      {Lisp-Entry "terminal-visible?" definition #f 439 25 439 42 ("IsWindowVisible" "and" "GetConsoleWindow" "console" "let")}
      {Lisp-Entry "show-terminal" definition #f 443 25 443 38 ("SW_SHOWNORMAL" "ShowWindow" "set-terminal-title" "not" "if" "GetConsoleWindow" "console" "let")}
      {Lisp-Entry "hide-terminal" definition #f 449 25 449 38 ("SW_HIDE" "ShowWindow" "IsWindowVisible" "and" "when" "GetConsoleWindow" "console" "let")}
      {Lisp-Entry "toggle-terminal" definition #f 454 25 454 40 ("show-terminal" "hide-terminal" "terminal-visible?" "if")}
      {Lisp-Entry "terminal-visible?" definition #f 459 24 459 41 ()}
      {Lisp-Entry "show-terminal" definition #f 462 24 462 37 ("set-terminal-title")}
      {Lisp-Entry "hide-terminal" definition #f 465 24 465 37 ()}
      {Lisp-Entry "toggle-terminal" definition #f 468 24 468 39 ()}
      {Lisp-Entry "user-message" definition #f 477 20 477 32 ("format" "apply" "Locales" "is?" "if" "set-status-message" "when" "get-application" "appl" "let" "rest" "obj")}
      {Lisp-Entry "user-message/action-handler" definition #f 483 20 483 47 ("set-status-message" "when" "get-application" "appl" "let" "action-handler" "message")}
      {Lisp-Entry "clear-user-message" definition #f 489 20 489 38 ("user-message")}
      {Lisp-Entry "make-directory-feedback" definition #f 493 33 493 56 ("set!" "3" "-" "0" "max" "subseq" "user-message" "length" "len" "expand" "expanded" "pathname=?" "not" "or" "when" "get-parent" "dir" "file" "lambda" "directory" "let")}
      {Lisp-Entry "*exiting-process?*" definition #f 509 20 509 38 ("make-parameter")}
      {Lisp-Entry "*reloading-process?*" definition #f 512 20 512 40 ("make-parameter")}
      {Lisp-Entry "exiting-process?" definition #f 516 20 516 36 ("*exiting-process?*")}
      {Lisp-Entry "reloading-process?" definition #f 519 20 519 38 ("*reloading-process?*")}}})
"_windows"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "performance" "platform" "windows" "_windows.jazz"} 1259266728
    {Lisp-Entry "jazz.system.performance.platform.windows" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "performance-snapshot" definition #f 50 20 50 40 ("user-time:" "kernel-time:" ",name" "name:" "parse-jml" "dwHighDateTime" "'dwHighDateTime" "dwLowDateTime" "'dwLowDateTime" "get" "make-long" "filetime" "lambda" "time" "GetProcessTimes" "user-time" "kernel-time" "exit-time" "FILETIME" "new" "creation-time" "GetCurrentProcess" "handle" "let" "nil" "name" "bind-keywords" "rest")}
      {Lisp-Entry "resources-snapshot" definition #f 73 20 73 38 (",undestroyed" "undestroyed:" ",handles" "handles:" ",gui-user-objects" "gui-user-objects:" ",gui-gdi-objects" "gui-gdi-objects:" ",private-bytes" "private-bytes:" ",name" "name:" "parse-jml" "gc-undestroyed-count" "0" "undestroyed" "GetProcessHandleCount" "handles" "GR_USEROBJECTS" "gui-user-objects" "GR_GDIOBJECTS" "GetGuiResources" "gui-gdi-objects" "get-private-bytes" "private-bytes" "GetCurrentProcess" "handle" "let" "name" "bind-keywords" "rest")}
      {Lisp-Entry "Private-Bytes-Query" definition #f 96 12 96 31 ()}
      {Lisp-Entry "Private-Bytes-Counter" definition #f 99 12 99 33 ()}
      {Lisp-Entry "get-private-bytes-query" definition #f 103 13 103 36 ("setup-private-bytes" "Private-Bytes-Query" "not" "when")}
      {Lisp-Entry "get-private-bytes-counter" definition #f 109 13 109 38 ("setup-private-bytes" "Private-Bytes-Counter" "not" "when")}
      {Lisp-Entry "setup-private-bytes" definition #f 115 13 115 32 ("Private-Bytes-Counter" "Private-Bytes-Query" "set!" "counter-name:" "object-name:" "add-counter" "counter" "Performance-Query" "new" "query" "let*")}
      {Lisp-Entry "get-private-bytes" definition #f 122 20 122 37 ("get-counter-value" "collect-data" "get-private-bytes-counter" "counter" "get-private-bytes-query" "query" "let")}
      {Lisp-Entry "i/o-snapshot" method #f 134 16 134 28 ("OtherTransferCount" "'OtherTransferCount" "other-bytes:" "WriteTransferCount" "'WriteTransferCount" "write-bytes:" "ReadTransferCount" "'ReadTransferCount" "get" "read-bytes:" ",name" "name:" "JML" "parse" "GetProcessIoCounters" "IO_COUNTERS" "new" "io" "GetCurrentProcess" "handle" "let" "nil" "name" "bind-keywords" "rest")}}})
"access"
 ({Lisp-File-Entry {File jazz.system "src" "jazz" "system" "access.jazz"} 1259266728
    {Lisp-Entry "jazz.system.access" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "Active-Process" definition #f 40 12 40 26 ()}
      {Lisp-Entry "Process-Active?" definition #f 43 12 43 27 ()}
      {Lisp-Entry "get-process" definition #f 47 20 47 31 ("Active-Process")}
      {Lisp-Entry "get-application" definition #f 51 20 51 35 ("Active-Process")}
      {Lisp-Entry "set-process" definition #f 55 21 55 32 ("Active-Process" "set!" "process")}
      {Lisp-Entry "set-application" definition #f 59 21 59 36 ("Active-Process" "set!" "application")}
      {Lisp-Entry "activate-process" definition #f 63 21 63 37 ("Process-Active?" "set!")}
      {Lisp-Entry "process-active?" definition #f 67 20 67 35 ("Process-Active?")}
      {Lisp-Entry "get-toplevel" definition #f 71 20 71 32 ("get-toplevel" "when" "get-application" "appl" "let")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "application" "autoload.jazz"} 1259266728
    {Lisp-Entry "jazz.system.application.autoload" module #f 37 18 37 50 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "autoload.jazz"} 1259266728
    {Lisp-Entry "jazz.system.process.autoload" module #f 37 18 37 46 ("jazz")}}
  {Lisp-File-Entry {File jazz.system "src" "jazz" "system" "service" "platform" "windows" "autoload.jazz"} 1259266728
    {Lisp-Entry "jazz.system.service.platform.windows.autoload" module #f 37 18 37 63 ("jazz")}})
"carbon"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "platform" "carbon.jazz"} 1259266728
    {Lisp-Entry "jazz.system.platform.carbon" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "initialize-platform" definition #f 49 20 49 39 ()}
      {Lisp-Entry "get-computer-name" definition #f 58 20 58 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*")}
      {Lisp-Entry "get-system-user-name" definition #f 68 20 68 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let")}
      {Lisp-Entry "Shift-Bit" definition #f 83 12 83 21 ("1")}
      {Lisp-Entry "Control-Bit" definition #f 87 12 87 23 ("2")}
      {Lisp-Entry "Alt-Bit" definition #f 91 12 91 19 ("4")}
      {Lisp-Entry "NoModifiers" definition #f 95 19 95 30 ("0")}
      {Lisp-Entry "modifiers-keys" definition #f 99 20 99 34 ("alt-down?" "Alt-Bit" "control-down?" "Control-Bit" "shift-down?" "Shift-Bit" "0" "mask-bit-set")}
      {Lisp-Entry "shift-key?" definition #f 103 20 103 30 ("Shift-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "control-key?" definition #f 107 20 107 32 ("Control-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "alt-key?" definition #f 111 20 111 28 ("Alt-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "shift-down?" definition #f 115 20 115 31 ("GetCurrentEventKeyModifiers" "shiftKeyBit" "bit-set?")}
      {Lisp-Entry "control-down?" definition #f 119 20 119 33 ("GetCurrentEventKeyModifiers" "controlKeyBit" "bit-set?")}
      {Lisp-Entry "alt-down?" definition #f 123 20 123 29 ("GetCurrentEventKeyModifiers" "optionKeyBit" "bit-set?")}
      {Lisp-Entry "modifiers-down" definition #f 127 20 127 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" definition #f 133 20 133 34 ("VK_LBUTTON" "key-down?" "'key-down?" "unimplemented")}
      {Lisp-Entry "use-generic-dialogs?" definition #f 144 21 144 41 ()}
      {Lisp-Entry "Version-Info" definition #f 153 19 153 31 ()}
      {Lisp-Entry "version-info" definition #f 157 13 157 25 ("GetVersionEx" "OSVERSIONINFOEX-sizeof" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless" "version-info" "'version-info" "unimplemented")}
      {Lisp-Entry "Windows-Version" definition #f 169 19 169 34 ()}
      {Lisp-Entry "get-windows-version" definition #f 173 20 173 39 ("OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless" "get-windows-version" "'get-windows-version" "unimplemented")}
      {Lisp-Entry "validate-version" definition #f 185 20 185 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory" "get-process" "process" "let*" "present" "register-crash-info" "when" "validate-version" "'validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}})
"service-impl"
 ({Lisp-File-Entry {File jazz.system "src" "jazz" "system" "service" "platform" "windows" "service-impl.jazz"} 1259266728
    {Lisp-Entry "jazz.system.service.platform.windows.service-impl" module #f 38 18 38 67 ("jazz")}})
"stub"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "process" "stub.jazz"} 1259266728
    {Lisp-Entry "jazz.system.process.stub" module #f 37 8 37 32 ("jazz")
      {Lisp-Entry "Process" remotable-stub "~stub" 43 16 43 23 ()
        {Lisp-Entry "get-name" method #f 46 23 46 31 ()}
        {Lisp-Entry "get-icon" method #f 47 23 47 31 ()}
        {Lisp-Entry "get-register" method #f 48 23 48 35 ()}}}})
"windows"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "log" "platform" "windows.jazz"} 1259266728
    {Lisp-Entry "jazz.system.log.platform.windows" module #f 38 18 38 50 ("jazz")
      {Lisp-Entry "make-event-id" definition #f 42 20 42 33 ("+" "FACILITY_NULL" "facility" "facility:" "SEVERITY_SUCCESS" "severity" "severity:" "code")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "platform" "windows.jazz"} 1259266728
    {Lisp-Entry "jazz.system.platform.windows" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "initialize-platform" definition #f 51 20 51 39 ("initialize-com")}
      {Lisp-Entry "module-path" definition #f 60 20 60 31 ("GetModuleFileName" "tokenise-windows")}
      {Lisp-Entry "module-pathname" definition #f 64 20 64 35 ("module-path" "File" "new")}
      {Lisp-Entry "module-base" definition #f 68 20 68 31 ("module-pathname" "get-base")}
      {Lisp-Entry "current-instance" definition #f 77 20 77 36 ("HINSTANCE" "c-function")}
      {Lisp-Entry "system-error" definition #f 87 20 87 32 ("present-system-message" "error" "id")}
      {Lisp-Entry "present-winerror" definition #f 91 20 91 36 ("winerror" "present-system-message")}
      {Lisp-Entry "winerror" definition #f 95 20 95 28 ("winerror" "'winerror" "unimplemented")}
      {Lisp-Entry "present-system-message" definition #f 99 20 99 42 ("format-system-message" "format" "id")}
      {Lisp-Entry "format-system-message" definition #f 105 20 105 41 ("NULL" "0" "FORMAT_MESSAGE_FROM_SYSTEM" "FormatMessage" "/=" "when" "1" "-" "make-string" "msg" "128" "size" "let*" "unimplemented" "id")}
      {Lisp-Entry "get-computer-name" definition #f 119 20 119 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*" "unimplemented")}
      {Lisp-Entry "get-system-user-name" definition #f 129 20 129 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let" "unimplemented")}
      {Lisp-Entry "Shift-Bit" definition #f 143 12 143 21 ("1")}
      {Lisp-Entry "Control-Bit" definition #f 147 12 147 23 ("2")}
      {Lisp-Entry "Alt-Bit" definition #f 151 12 151 19 ("4")}
      {Lisp-Entry "NoModifiers" definition #f 155 19 155 30 ("0")}
      {Lisp-Entry "modifiers-keys" definition #f 159 20 159 34 ("alt-down?" "Alt-Bit" "control-down?" "Control-Bit" "shift-down?" "Shift-Bit" "0" "mask-bit-set")}
      {Lisp-Entry "shift-key?" definition #f 163 20 163 30 ("Shift-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "control-key?" definition #f 167 20 167 32 ("Control-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "alt-key?" definition #f 171 20 171 28 ("Alt-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "key-down?" definition #f 175 20 175 29 ("0" "GetAsyncKeyState" "hibyte" "/=" "key")}
      {Lisp-Entry "shift-down?" definition #f 179 20 179 31 ("VK_SHIFT" "key-down?")}
      {Lisp-Entry "control-down?" definition #f 183 20 183 33 ("VK_RMENU" "not" "VK_CONTROL" "key-down?" "and")}
      {Lisp-Entry "alt-down?" definition #f 187 20 187 29 ("VK_LMENU" "key-down?")}
      {Lisp-Entry "modifiers-down" definition #f 191 20 191 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" definition #f 197 20 197 34 ("VK_LBUTTON" "key-down?")}
      {Lisp-Entry "use-generic-dialogs?" definition #f 206 21 206 41 ()}
      {Lisp-Entry "Version-Info" definition #f 215 19 215 31 ()}
      {Lisp-Entry "version-info" definition #f 219 13 219 25 ("GetVersionEx" "OSVERSIONINFOEX-sizeof" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless")}
      {Lisp-Entry "Windows-Version" definition #f 229 19 229 34 ()}
      {Lisp-Entry "get-windows-version" definition #f 233 20 233 39 ("OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless")}
      {Lisp-Entry "validate-version" definition #f 243 20 243 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory" "get-process" "process" "let*" "present" "register-crash-info" "when" "validate-version" "'validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}})
"x11"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.system" "src" "jazz" "system" "platform" "x11.jazz"} 1259266728
    {Lisp-Entry "jazz.system.platform.x11" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "synchronize-x11?" definition #f 49 12 49 28 ()}
      {Lisp-Entry "x11-debug-error-handler" definition #f 53 13 53 36 ("1" "exit" "20" "depth:" "lexical-environment?:" "execution-stack" "pretty-print" "newline" "XErrorEvent-error_code-ref" "XGetErrorText" "format" "display" "error" "displ")}
      {Lisp-Entry "require-x11-display" definition #f 60 13 60 32 ("error" "XOpenDisplay" "either")}
      {Lisp-Entry "initialize-platform" definition #f 65 20 65 39 ("x11-create-cursors" "x11-debug-error-handler" "x11-set-error-handler" "initialize-xim" "get-default-x11-display" "XSynchronize" "synchronize-x11?" "when" "generate-x11-atoms" "require-x11-display" "set-default-x11-display" "initialize-locale")}
      {Lisp-Entry "get-computer-name" definition #f 81 20 81 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*")}
      {Lisp-Entry "get-system-user-name" definition #f 91 20 91 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let")}
      {Lisp-Entry "Shift-Bit" definition #f 105 12 105 21 ("1")}
      {Lisp-Entry "Control-Bit" definition #f 109 12 109 23 ("2")}
      {Lisp-Entry "Alt-Bit" definition #f 113 12 113 19 ("4")}
      {Lisp-Entry "NoModifiers" definition #f 117 19 117 30 ("0")}
      {Lisp-Entry "modifiers-keys" definition #f 121 20 121 34 ("alt-down?" "Alt-Bit" "control-down?" "Control-Bit" "shift-down?" "Shift-Bit" "0" "mask-bit-set")}
      {Lisp-Entry "shift-key?" definition #f 125 20 125 30 ("Shift-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "control-key?" definition #f 129 20 129 32 ("Control-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "alt-key?" definition #f 133 20 133 28 ("Alt-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "shift-down?" definition #f 137 20 137 31 ("XK_Shift_R" "XK_Shift_L" "XKeysymToKeycode" "char->integer" "default-x11-display" "XKeyDown?" "or")}
      {Lisp-Entry "control-down?" definition #f 142 20 142 33 ("XK_Control_R" "XK_Control_L" "XKeysymToKeycode" "char->integer" "default-x11-display" "XKeyDown?" "or")}
      {Lisp-Entry "alt-down?" definition #f 147 20 147 29 ("XK_Alt_R" "XK_Alt_L" "XK_Meta_R" "XK_Meta_L" "XKeysymToKeycode" "char->integer" "default-x11-display" "XKeyDown?" "or")}
      {Lisp-Entry "modifiers-down" definition #f 154 20 154 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" definition #f 160 20 160 34 ("default-x11-display" "XButtonDown?")}
      {Lisp-Entry "use-generic-dialogs?" definition #f 169 21 169 41 ()}
      {Lisp-Entry "Version-Info" definition #f 178 19 178 31 ()}
      {Lisp-Entry "version-info" definition #f 182 13 182 25 ("GetVersionEx" "OSVERSIONINFOEX-sizeof" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless" "version-info" "'version-info" "unimplemented")}
      {Lisp-Entry "Windows-Version" definition #f 194 19 194 34 ()}
      {Lisp-Entry "get-windows-version" definition #f 198 20 198 39 ("OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless" "get-windows-version" "'get-windows-version" "unimplemented")}
      {Lisp-Entry "validate-version" definition #f 210 20 210 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory" "get-process" "process" "let*" "present" "register-crash-info" "when" "validate-version" "'validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}})
