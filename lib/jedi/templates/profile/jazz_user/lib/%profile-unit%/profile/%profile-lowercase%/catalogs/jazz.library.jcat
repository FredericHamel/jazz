"Aligned-Column"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Aligned-Column.jazz"} 1257476293
    {Lisp-Entry "jazz.library.display.Aligned-Column" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Aligned-Column" class #f 43 20 43 34 ("0" "initialize" "Display-Column")
        {Lisp-Entry "alignment" slot #f 46 8 46 17 ()}
        {Lisp-Entry "max-data" slot #f 47 8 47 16 ()}
        {Lisp-Entry "initialize" method #f 55 20 55 30 ("alignment~self" "set!" "nextmethod" "apply" "others" "left" "'left" "alignment" "bind-keywords" "rest" "displayer")}
        {Lisp-Entry "prepare-print" method #f 66 20 66 33 ("content" "set!" "max-data" ">" "when" "length" "let" "data" "lambda" "for-each" "nextmethod")}
        {Lisp-Entry "print-to" method #f 75 20 75 28 ("right" "border-after" "border" "format" "left" "alignment" "case" "length" "max-data" "-" "padding" "let" "printer" "previous-data" "previous-column" "data")}}}})
"Aligned-Column-Preferences"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Aligned-Column-Preferences.jazz"} 1257476293
    {Lisp-Entry "jazz.library.display.Aligned-Column-Preferences" module #f 37 18 37 65 ("jazz")
      {Lisp-Entry "Aligned-Column-Preferences" class #f 43 20 43 46 ("left" "'left" "initialize" "Column-Preferences")
        {Lisp-Entry "alignment" property #f 46 12 46 21 ()}
        {Lisp-Entry "get-alignment" accessor #f 46 49 46 57 ()}
        {Lisp-Entry "set-alignment" accessor #f 46 49 46 57 ()}
        {Lisp-Entry "column-class" method #f 54 20 54 32 ("Aligned-Column")}
        {Lisp-Entry "new-column" method #f 58 20 58 30 ("alignment" "alignment:" "minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Aligned-Column" "new" "display")}}}})
"Bitmap-Resource"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "resource" "Bitmap-Resource.jazz"} 1257476301
    {Lisp-Entry "jazz.library.resource.Bitmap-Resource" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Bitmap-Resource" class #f 43 7 43 22 ("Resource")
        {Lisp-Entry "resource-type" method #f 52 16 52 29 ("bitmap" "'bitmap")}}}})
"Box"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Box.jazz"} 1257476304
    {Lisp-Entry "jazz.library.utility.Box" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Box" class #f 40 7 40 10 ("Object")
        {Lisp-Entry "boxed" slot #f 43 8 43 13 ()}
        {Lisp-Entry "get-boxed" accessor #f 43 21 43 29 ()}
        {Lisp-Entry "initialize" method #f 46 20 46 30 ("boxed~self" "set!" "nextmethod" "boxed")}
        {Lisp-Entry "print" method #f 51 20 51 25 ("self" "class-of" "type-name" "identifier-name" "format" "boxed" "not" "if" "readably" "printer")}}}})
"Branch"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "Branch.jazz"} 1257476304
    {Lisp-Entry "jazz.library.component.Branch" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Branch" class #f 43 7 43 13 ("initialize" "Component")
        {Lisp-Entry "client-form" property #f 46 12 46 23 ()}
        {Lisp-Entry "get-client-form" accessor #f 46 48 46 56 ()}
        {Lisp-Entry "set-client-form" accessor #f 46 48 46 56 ()}
        {Lisp-Entry "client" slot #f 49 8 49 14 ()}
        {Lisp-Entry "get-client" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "set-client" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "restore-form" slot #f 50 8 50 20 ()}
        {Lisp-Entry "get-restore-form" accessor #f 50 42 50 50 ()}
        {Lisp-Entry "restoreable?" slot #f 51 8 51 20 ()}
        {Lisp-Entry "get-restoreable?" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "set-restoreable?" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "install" method #f 54 20 54 27 ("default-client" "client" "set!" "nextmethod" "rest")}
        {Lisp-Entry "default-client" method #f 59 11 59 25 ("get-client" "Branch" "parent" "is?" "if")}
        {Lisp-Entry "install-branch" method #f 70 20 70 34 ("nextmethod" "self" "parent" "install-branch" "br")}
        {Lisp-Entry "configure-client" method #f 75 21 75 37 ("parent" "set-branch" "creator" "client" "install-form" "client-form" "neq?" "configure-inherited" "configured" "let" "install" "'install" "action:" "self" "context:" "Restore-Form" "new" "restore-form" "set!" "restoreable?" "when")}
        {Lisp-Entry "configure-inherited" method #f 85 11 85 30 ("restore-form" "self" "creator" "client" "install-form" "client-form:" "get-property" "client-form" "when" "get-class-form" "form" "let")}
        {Lisp-Entry "configure-inherited" method #f 95 11 95 30 ("restore-form" "self" "creator" "client" "install-form" "neq?" "client-form:" "get-property" "client-form" "get-class-form" "form" "type-ascendant" "configure-inherited" "configured" "let" "Branch" "subtype?" "when" "model")}
        {Lisp-Entry "installed?" method #f 107 18 107 28 ("restore-form")}
        {Lisp-Entry "restore-client" method #f 116 21 116 35 ("set!" "restore-form" "client" "install-form" "parent" "set-branch" "restore-client" "branch" "when")}
        {Lisp-Entry "get-class-image" method #f 129 25 129 40 ("Bitmap-Resource")}
        {Lisp-Entry "get-name-mandatory?" method #f 133 25 133 44 ()}
        {Lisp-Entry "get-name-unicity?" method #f 137 25 137 42 ()}
        {Lisp-Entry "set-presentation" method #f 141 20 141 36 ("branch:" "string->symbol" "self" "set-name" "presentation" "designer")}
        {Lisp-Entry "display-property?" method #f 145 20 145 37 ("client-form" "field-name" "memq?" "not" "nextmethod" "and" "property")}}}})
"Canvas"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "canvas" "Canvas.jazz"} 1257476317
    {Lisp-Entry "jazz.library.canvas.Canvas" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Canvas" class #f 49 20 49 26 ("List-Factory" "new" "initialize" "Component")
        {Lisp-Entry "violations" property #f 52 12 52 22 ()}
        {Lisp-Entry "get-violations" accessor #f 52 48 52 56 ()}
        {Lisp-Entry "set-violations" accessor #f 52 48 52 56 ()}
        {Lisp-Entry "violations-factory" slot #f 55 8 55 26 ()}
        {Lisp-Entry "get-integrity-manager" method #f 63 20 63 41 ("Integrity-Manager" "new")}
        {Lisp-Entry "validate-integrity" method #f 67 18 67 36 ("select-violations-manager" "IDI_ERROR" "icon:" "format-plural" "length" "count" "format" "message-box" "null?" "if" "update-violations-manager" "get-presentation" "presentation" "user-message" "when" "get-output" "violations" "set!" "self" "validate-integrity" "violations-factory" "reset" "get-integrity-manager" "integrity-manager" "let" "report?" "report?:" "reporter" "reporter:" "context" "context:")}
        {Lisp-Entry "get-violations-manager" method #f 85 11 85 33 ("violations-manager-class" "singleton-docked" "get-guest")}
        {Lisp-Entry "update-violations-manager" method #f 89 11 89 36 ("update" "get-violations-manager" "manager" "let" "violations")}
        {Lisp-Entry "select-violations-manager" method #f 94 18 94 43 ("focus?:" "violations-manager-workspace" "workspace:" "violations-manager-class" "select-palette" "select-first" "select-results" "get-violations-manager" "manager" "let")}
        {Lisp-Entry "violations-manager-class" method #f 101 29 101 53 ("Violations-Manager")}
        {Lisp-Entry "violations-manager-workspace" method #f 105 29 105 57 ()}
        {Lisp-Entry "add-violation" method #f 114 18 114 31 ("violations-factory" "put" "violation")}
        {Lisp-Entry "clear-violations" method #f 118 18 118 34 ("violations" "set!" "violations-factory" "reset")}}}})
"Canvas-Element"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "canvas" "Canvas-Element.jazz"} 1257476316
    {Lisp-Entry "jazz.library.canvas.Canvas-Element" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Canvas-Element" class #f 43 20 43 34 ("Component")
        {Lisp-Entry "get-name-mandatory?" method #f 51 25 51 44 ()}
        {Lisp-Entry "get-name-unicity?" method #f 55 25 55 42 ("get-name-mandatory?")}
        {Lisp-Entry "presentation->name" method #f 59 25 59 43 ("=" "empty-string?" "or" "get-name-mandatory?" "not" "and" "if" "presentation")}
        {Lisp-Entry "name->presentation" method #f 65 25 65 43 ("get-name-mandatory?" "or" "if" "name")}
        {Lisp-Entry "can-view-properties?" method #f 71 20 71 40 ()}
        {Lisp-Entry "get-addable-details" method #f 75 20 75 39 ("100" "name-info")}}}})
"Canvas-Manager"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "canvas" "Canvas-Manager.jazz"} 1257476316
    {Lisp-Entry "jazz.library.canvas.Canvas-Manager" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Canvas-Manager" class #f 49 20 49 34 ("card-border" "bottom-right" "toplevel-controls?:" "element" "details" "vscroll?:" "hscroll?:" "document" "100" "details-border" "details-pane" "60" "relative" "mode:" "vert" "366" "360" "289" "editor-splitter" "fill" "second" "right" "title:" "descendant" "on-tab-press" "tab-press-handler:" "highlight-edited?:" "tree" "header" "content" "scroller" "descendants" "entry" "style:" "edge" "border-type:" "first" "338" "278" "4" "Point" "position:" "descendants-border" "250" "division:" "horz" "orientation:" "center" "367" "splitter" "on-new" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "22" "new" "north" "location:" "7" "flow" "33" "300" "toolbar" "name:" "2" "0" "Rect" "layout-insets:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Editor-View")
        {Lisp-Entry "host-icon" method #f 84 25 84 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-position" method #f 88 25 88 38 ()}
        {Lisp-Entry "host-size" method #f 92 25 92 34 ()}
        {Lisp-Entry "host-workspaces" method #f 96 20 96 35 ("home")}
        {Lisp-Entry "new-event" method #f 106 16 106 25 ("set-visible?" "bring-to-front" "set-client" "instantiate" "client" "name:" "Canvas-Base" "'Canvas-Base" "model-name:" "'new" "action:" "textual?:" "Form" "new" "form" "update-status" "set-newname" "get-controller" "controller" "collect-names" "unique-domain-name" "newname" "localize" "newbase" "get-guest" "manager" "host-visible?:" "new-frame" "apply" "frame" "let*" "rest")}
        {Lisp-Entry "collect-names" method #f 123 16 123 29 ("get-children" "get-client" "get-name" "neq?" "and" "get-guest" "guest" "Frame-Host" "is?" "when" "frame" "lambda" "collect" "get-stage" "stage" "class-of" "model" "let" "base")}
        {Lisp-Entry "Canvas-Manager-Controller" class #f 140 9 140 34 ("Editor-View-Controller")
          {Lisp-Entry "document-status" method #f 143 13 143 28 ("modified-status" "name-status" "format")}}
        {Lisp-Entry "new-controller" method #f 150 11 150 25 ("self" "Canvas-Manager-Controller" "new")}
        {Lisp-Entry "tool-preferences" method #f 159 20 159 36 ("canvas-manager" "tools" "get-preferences")}
        {Lisp-Entry "install" method #f 168 20 168 27 ("details" "'details" "self" "descendants" "'descendants" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "install-in-host" method #f 174 20 174 35 ("get-size" "set-size" "cascade-position" "set-position" "when" "tool-preferences" "pref" "let" "nextmethod" "host")}
        {Lisp-Entry "focus-document" method #f 182 20 182 34 ("tree" "descendants" "locate" "acquire-focus")}
        {Lisp-Entry "selection-changed" method #f 191 20 191 37 ("update-new" "nextmethod" "focus?" "force-parent?" "origin" "new" "old")}
        {Lisp-Entry "update-new" method #f 196 11 196 21 (":french" "french:" ":english" "localize-to" "format" "english:" "Locales" "get-class-presentation" "pres" "car" "class" "set-tooltip-text" "set-enabled?" "begin" "1" "length" "/=" "if" "new" "'new" "tool" "get-addable-classes" "essay" "classes" "get-client" "client" "details" "'details" "locate" "tree" "let*")}
        {Lisp-Entry "on-editor" method #f 218 20 218 29 ("save-client" "Custom-Card" "is?" "when" "get-card" "current" ":saving" "setup-card" "setup-details" "get-selection" "car" "component" "let" ":selection-changing" "get-kind" "case" "nextmethod" "evt")}
        {Lisp-Entry "setup-details" method #f 236 11 236 24 ("card-update" "categorized" "'categorized" "get-tree" "set-filter" "is?" "designer" "set-designer" "begin" "self" "set-editor" "details-border" "'details-border" "locate" "parent:" "details" "'details" "name:" "new" "card" "class-of" "neq?" "or" "Details-Card" "get-custom-details" "either" "details-class" "close" "when" "null?" "if" "get-details" "current" "let" "component")}
        {Lisp-Entry "get-details" method #f 258 11 258 22 ("details" "'details" "details-border" "'details-border" "locate" "find-component")}
        {Lisp-Entry "get-card" method #f 267 11 267 19 ("properties" "'properties" "card-border" "'card-border" "locate" "find-component")}
        {Lisp-Entry "setup-card" method #f 271 11 271 21 ("card-update" "categorized" "'categorized" "get-tree" "set-filter" "designer" "set-designer" "self" "set-editor" "card-border" "'card-border" "locate" "parent:" "properties" "'properties" "name:" "new" "card" "class-of" "neq?" "or" "Properties-Card" "get-custom-card" "either" "card-class" "close" "null?" "if" "save-client" "Custom-Card" "is?" "when" "get-card" "current" "let" "component")}
        {Lisp-Entry "card-update" method #f 290 26 290 37 ("card")}
        {Lisp-Entry "on-selection-change" method #f 299 11 299 30 ("focus?:" "force-parent?:" "origin:" "list" "set-selection" "get-user-data" "component" "get-row" "row" "let*" "when" "get-single-selection" "selection" "log" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-new" method #f 311 19 311 25 ("acquire-focus" "generate-event?:" "set-single-selection" "row-rank" "rank" "component-row" "row" "origin:" "list" "set-selection" "select?:" "tree" "descendants" "add-component-class" "component" "get-addable-classes" "car" "class" "get-client" "client" "'details" "locate" "details" "let*" "evt")}
        {Lisp-Entry "on-tab-press" method #f 323 20 323 32 ("get-row" "auto-select" "when" "get-single-selection" "rank" "acquire-focus" "card" "'card" "locate" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "Validation-Reporter" class #f 337 9 337 28 ("invite" "name:" "title:" "Progress-Reporter")
          {Lisp-Entry "dialog-title" method #f 345 18 345 30 ()}}
        {Lisp-Entry "on-validate-integrity" method #f 350 11 350 32 ("cancelable?:" "Validation-Reporter" "progress-reporter:" "self" "context:" "name:" "threaded?:" "set-done" "user-message" "reporter:" "validate-integrity" "reporter" "lambda" "with-progress" "get-designer" "designer" "get-client" "client" "let" "evt")}
        {Lisp-Entry "Cascade-Position" definition #f 370 14 370 30 ("25" "Point")}
        {Lisp-Entry "Cascade-Step" definition #f 373 14 373 26 ("22" "Dimension")}
        {Lisp-Entry "cascade-position" method #f 377 11 377 27 ("continuation-return" "Cascade-Step" "increase!" "get-position" "frame" "key:" "member?" "if" "while" "return" "lambda" "continuation-capture" "Cascade-Position" "pos" "collect-managers" "frames" "let")}
        {Lisp-Entry "collect-managers" method #f 388 11 388 27 ("get-stage" "get-children" "Canvas-Manager" "get-guest" "Frame-Host" "is?" "and" "frame" "lambda" "collect-if")}}}})
"Canvas-Node"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "canvas" "Canvas-Node.jazz"} 1257476316
    {Lisp-Entry "jazz.library.canvas.Canvas-Node" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Canvas-Node" class #f 43 20 43 31 ("Component")
        {Lisp-Entry "get-class-image" method #f 51 25 51 40 ("Bitmap-Resource")}
        {Lisp-Entry "name->presentation" method #f 55 25 55 43 ("get-class-presentation" "name")}
        {Lisp-Entry "can-rename-component?" method #f 59 20 59 41 ()}
        {Lisp-Entry "can-delete-component?" method #f 63 20 63 41 ()}
        {Lisp-Entry "can-move-component?" method #f 67 20 67 39 ()}
        {Lisp-Entry "can-copy-component?" method #f 71 20 71 39 ()}
        {Lisp-Entry "indexable?" method #f 75 20 75 30 ()}
        {Lisp-Entry "get-addable-details" method #f 79 20 79 39 ("100" "name-info")}
        {Lisp-Entry "get-categorized-properties" method #f 83 20 83 46 ()}}}})
"Category-Moniker"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "moniker" "Category-Moniker.jazz"} 1257476324
    {Lisp-Entry "jazz.library.moniker.Category-Moniker" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Category-Moniker" class #f 43 20 43 36 ("Moniker")}
      {Lisp-Entry "Category-Moniker" class #f 49 20 49 36 ("Moniker")
        {Lisp-Entry "category-name" slot #f 52 8 52 21 ()}
        {Lisp-Entry "construct-literal" method #f 56 16 56 33 ("self" "new" "category-name" "context")}
        {Lisp-Entry "print" method #f 60 11 60 16 ("category-name" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" method #f 71 11 71 19 ("category-name")}
        {Lisp-Entry "get-file" method #f 75 11 75 19 ("get-source")}
        {Lisp-Entry "get-protocol" method #f 85 16 85 28 ("category" "'category")}
        {Lisp-Entry "new-moniker" method #f 90 16 90 27 ("car" "self" "new" "list")}
        {Lisp-Entry "present" method #f 94 11 94 18 ("category-name" "format")}
        {Lisp-Entry "initialize" method #f 103 11 103 21 ("category-name" "set!" "nextmethod" "name")}
        {Lisp-Entry "get-source" method #f 113 18 113 28 ("error" "category-name" "get-manifest-source" "either")}
        {Lisp-Entry "load-lines" method #f 123 11 123 21 ("get-source" "load-lines" "rest")}
        {Lisp-Entry "save-lines" method #f 127 11 127 21 ("get-source" "save-lines" "rest" "lines")}
        {Lisp-Entry "load-form" method #f 131 11 131 20 ("get-source" "load-form")}}}})
"Column-Preferences"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Column-Preferences.jazz"} 1257476333
    {Lisp-Entry "jazz.library.display.Column-Preferences" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Column-Preferences" class #f 44 20 44 38 ("0" "initialize" "Preferences")
        {Lisp-Entry "border" property #f 47 12 47 18 ()}
        {Lisp-Entry "get-border" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "set-border" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "border-after" property #f 48 12 48 24 ()}
        {Lisp-Entry "get-border-after" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "set-border-after" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "minimum" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-minimum" accessor #f 49 48 49 56 ()}
        {Lisp-Entry "set-minimum" accessor #f 49 48 49 56 ()}
        {Lisp-Entry "presentation-property?" method #f 57 20 57 42 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" method #f 61 20 61 36 ("name" "column-class" "type-name" "format" "title" "either")}
        {Lisp-Entry "set-presentation" method #f 65 20 65 36 ("title:" "self" "set-property" "title" "designer")}
        {Lisp-Entry "column-class" method #f 74 29 74 41 ("Display-Column")}
        {Lisp-Entry "new-column" method #f 78 26 78 36 ("display")}}}})
"Columns-Display"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Columns-Display.jazz"} 1257476333
    {Lisp-Entry "jazz.library.display.Columns-Display" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Columns-Display" class #f 40 20 40 35 ("0" "initialize" "Object")
        {Lisp-Entry "columns" slot #f 43 18 43 25 ()}
        {Lisp-Entry "get-columns" accessor #f 43 57 43 65 ()}
        {Lisp-Entry "line" slot #f 44 18 44 22 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("nextmethod" "rest")}
        {Lisp-Entry "add-column" method #f 61 18 61 28 ("insert!" "find" "rank" "let" "list" "append!" "columns" "set!" "null?" "if" "before" "before:" "column")}
        {Lisp-Entry "add-columns" method #f 68 18 68 29 ("add-column" "column" "lambda" "for-each" "before" "before:" "columns")}
        {Lisp-Entry "newline" method #f 79 18 79 25 ("line" "increase!")}
        {Lisp-Entry "print-to" method #f 83 18 83 26 ("print-columns" "prepare-columns" "printer")}
        {Lisp-Entry "prepare-columns" method #f 88 18 88 33 ("prepare-print" "prepare-empties" "prepare-base")}
        {Lisp-Entry "prepare-base" method #f 94 11 94 23 ("columns" "rewind" "fill-empty" "column" "lambda" "for-each")}
        {Lisp-Entry "prepare-empties" method #f 101 11 101 26 ("columns" "set!" "replace-empty" "data" "get-empty?" "unless" "column" "lambda" "for-each" "previous-data" "previous-column" "let" "line" "below" "0" "from" "n" "for" "loop")}
        {Lisp-Entry "prepare-print" method #f 113 11 113 24 ("columns" "prepare-print" "get-empty?" "unless" "column" "lambda" "for-each")}
        {Lisp-Entry "print-columns" method #f 122 18 122 31 ("format" "/=" "columns" "when" "set!" "print-to" "get-next" "data" "get-empty?" "unless" "column" "lambda" "for-each" "previous-data" "previous-column" "below" "0" "from" "n" "for" "loop" "1" "line" "-" "last" "let" "printer")}}}})
"Component"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "Component.jazz"} 1257477172
    {Lisp-Entry "jazz.library.component.Component" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Component" class #f 46 7 46 16 ("get-presentation-info" "get-name-info" "get-class-info" "set-visible?" "get-visible?" "set-children" "get-children" "set-before" "get-before" "Visible-Flag" "self" "initialize" "Event-Consumer" "Object")
        {Lisp-Entry "Installed-Flag" definition #f 57 14 57 28 ("#x00000001")}
        {Lisp-Entry "Finished-Flag" definition #f 58 14 58 27 ("#x00000002")}
        {Lisp-Entry "Visible-Flag" definition #f 59 14 59 26 ("#x00000004")}
        {Lisp-Entry "Layout-Valid-Flag" definition #f 60 14 60 31 ("#x00000100")}
        {Lisp-Entry "name" slot #f 63 8 63 12 ()}
        {Lisp-Entry "parent" slot #f 64 8 64 14 ()}
        {Lisp-Entry "branch" slot #f 65 8 65 14 ()}
        {Lisp-Entry "creation-form" slot #f 66 8 66 21 ()}
        {Lisp-Entry "creator" slot #f 67 8 67 15 ()}
        {Lisp-Entry "creator-branch" slot #f 68 8 68 22 ()}
        {Lisp-Entry "event-consumer" slot #f 69 8 69 22 ()}
        {Lisp-Entry "designers" slot #f 70 8 70 17 ()}
        {Lisp-Entry "surrogate" slot #f 71 8 71 17 ()}
        {Lisp-Entry "get-surrogate" accessor #f 71 54 71 62 ()}
        {Lisp-Entry "index" slot #f 72 8 72 13 ()}
        {Lisp-Entry "flags" slot #f 73 8 73 13 ()}
        {Lisp-Entry "before" property #f 76 12 76 18 ()}
        {Lisp-Entry "children" property #f 77 12 77 20 ()}
        {Lisp-Entry "visible?" property #f 78 12 78 20 ()}
        {Lisp-Entry "class-info" property #f 79 12 79 22 ()}
        {Lisp-Entry "name-info" property #f 80 12 80 21 ()}
        {Lisp-Entry "presentation-info" property #f 81 12 81 29 ()}
        {Lisp-Entry "get-name" method #f 89 25 89 33 ("name")}
        {Lisp-Entry "set-name" method #f 93 25 93 33 ("name" "set!" "value")}
        {Lisp-Entry "get-parent" method #f 97 25 97 35 ("parent")}
        {Lisp-Entry "set-parent" method #f 101 26 101 36 ("install-in-parent" "set!" "self" "remove-child" "parent" "when" "value")}
        {Lisp-Entry "get-before" method #f 109 25 109 35 ("before")}
        {Lisp-Entry "set-before" method #f 113 18 113 28 ("child" "self" "parent" "send-child-before" "get-finished?" "when" "before" "set!" "value")}
        {Lisp-Entry "get-children" method #f 119 25 119 37 ("children")}
        {Lisp-Entry "set-children" method #f 123 26 123 38 ("self" "set-parent" "do" "in" "child" "for" "loop" "when" "children" "set!" "lst")}
        {Lisp-Entry "get-branch" method #f 130 25 130 35 ("branch")}
        {Lisp-Entry "set-branch" method #f 134 25 134 35 ("branch" "set!" "value")}
        {Lisp-Entry "get-form" method #f 138 25 138 33 ("creation-form")}
        {Lisp-Entry "set-form" method #f 142 25 142 33 ("creation-form" "set!" "value")}
        {Lisp-Entry "get-creator" method #f 146 25 146 36 ("creator")}
        {Lisp-Entry "set-creator" method #f 150 25 150 36 ("creator" "set!" "value")}
        {Lisp-Entry "get-creator-branch" method #f 154 25 154 43 ("creator-branch")}
        {Lisp-Entry "set-creator-branch" method #f 158 25 158 43 ("creator-branch" "set!" "value")}
        {Lisp-Entry "get-class-info" method #f 162 11 162 25 ("self" "class-of" "get-class-presentation")}
        {Lisp-Entry "get-class-form" method #f 166 19 166 33 ()}
        {Lisp-Entry "get-class-forms" method #f 170 19 170 34 ()}
        {Lisp-Entry "get-name-info" method #f 174 11 174 24 ("name")}
        {Lisp-Entry "get-presentation-info" method #f 178 11 178 32 ("get-presentation")}
        {Lisp-Entry "get-installed?" method #f 187 21 187 35 ("Installed-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-installed?" method #f 191 21 191 35 ("Installed-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-finished?" method #f 195 21 195 34 ("Finished-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-finished?" method #f 199 11 199 24 ("Finished-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-layout-valid?" method #f 203 11 203 28 ("Layout-Valid-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-layout-valid?" method #f 207 11 207 28 ("Layout-Valid-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "print" method #f 216 20 216 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "initialize" method #f 227 20 227 30 ("initialize-component" "self" "class-of" "setup-toplevel-context" "get-origin" "not" "and" "when" "get-class-form" "form" "let" "nextmethod" "rest")}
        {Lisp-Entry "initialize-component" method #f 235 29 235 49 ("hide" "show" "if" "initially-visible?" "neq?" "when" "get-visible?" "visible?" "let" "conclude" "set-finished?" "install-in-parent" "finish" "set-installed?" "install" "prepare" "rest")}
        {Lisp-Entry "default-name" method #f 250 29 250 41 ()}
        {Lisp-Entry "default-parent" method #f 254 29 254 43 ()}
        {Lisp-Entry "prepare" method #f 258 29 258 36 ("prepare-component" "prepare-parent" "initargs")}
        {Lisp-Entry "prepare-parent" method #f 263 11 263 25 ("default-parent" "not" "if" "parent" "set!" "not-found:" "parent:" "getf" "arg" "let" "initargs")}
        {Lisp-Entry "prepare-component" method #f 268 11 268 28 ("creator-branch:" "set-creator-branch" "creator:" "set-creator" "get-class-form" "form:" "set-form" "default-name" "name:" "getf" "either" "set-name" "initargs")}
        {Lisp-Entry "install" method #f 275 29 275 36 ("install-component" "initargs")}
        {Lisp-Entry "install-component" method #f 279 11 279 28 ("get-class-forms" "install-inherited" "initargs")}
        {Lisp-Entry "install-inherited" method #f 283 11 283 28 ("self" "car" "install-form" "cdr" "install-inherited" "not-null?" "when" "forms")}
        {Lisp-Entry "install-form" method #f 289 18 289 30 ("get-children" "install-children" "get-properties" "install-properties" "when" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "install-children" method #f 295 29 295 45 ("install-child" "do" "in" "child" "for" "loop" "restore-form" "creator-branch" "creator" "children")}
        {Lisp-Entry "install-child" method #f 300 26 300 39 ("else" "close" "get-component" "child" "remove" "equal?" "find-to-modify" "install-form" "remember-reference" "set!" "locate" "modify" "remember-creation" "add-to-index" "when" "creator-branch:" "creator:" "form:" "name:" "parent:" "component" "error" "not" "self" "either" "form-model" "get-model-name" "module-ref" "if" "model" "get-tag-unit" "unit" "let*" "new" "case" "get-name" "name" "get-action" "action" "let" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "install-properties" method #f 325 11 325 29 ("cddr" "write-property-to" "remember-property" "set-car!" "self" "class-of" "component-property" "set!" "symbol?" "when" "cadr" "value" "car" "expr" "let" "not-null?" "while" "restore-form" "properties")}
        {Lisp-Entry "find-to-modify" method #f 338 26 338 40 ("locate" "find-component-with" "either" "test" "name")}
        {Lisp-Entry "form-model" method #f 345 26 345 36 ("get-model" "form")}
        {Lisp-Entry "finish" method #f 349 29 349 35 ("write-properties" "creator~self" "set!" "self" "install-form" "neq?" "if" "when" "others" "creator" "form" "bind-keywords" "initargs")}
        {Lisp-Entry "write-properties" method #f 360 18 360 34 ("self" "write-initarg-to" "do" "in-properties" "value" "property" "for" "loop" "properties")}
        {Lisp-Entry "install-in-parent" method #f 367 29 367 46 ("parent-add-child" "get-editor" "install-surrogate" "get-surrogate" "surrogate" "set-designers" "not-null?" "get-designers" "designers" "let" "parent" "when")}
        {Lisp-Entry "parent-add-child" method #f 378 18 378 34 ("self" "add-child" "parent" "when")}
        {Lisp-Entry "conclude" method #f 383 29 383 37 ("initargs")}
        {Lisp-Entry "close" method #f 392 20 392 25 ("destroy-component" "destroyed?" "unless")}
        {Lisp-Entry "destroy-component" method #f 397 19 397 36 ("self" "call-destroy" "destroy-component" "Component" "is?" "when" "children" "in" "child" "for" "loop" "set-active-branch")}
        {Lisp-Entry "destroy" method #f 405 20 405 27 ("nextmethod" "name" "remove-from-index" "creator" "self" "remove-child" "parent" "when")}
        {Lisp-Entry "close-children" method #f 413 18 413 32 ("close" "do" "children" "in" "child" "for" "loop")}
        {Lisp-Entry "confirm-close" method #f 418 26 418 39 ("rest")}
        {Lisp-Entry "initially-visible?" method #f 427 26 427 44 ()}
        {Lisp-Entry "get-visible?" method #f 431 26 431 38 ("get-visible-flag")}
        {Lisp-Entry "set-visible?" method #f 435 26 435 38 ("hide" "show" "get-visible-flag" "neq?" "when" "set-visible-flag" "get-finished?" "not" "if" "flag")}
        {Lisp-Entry "show" method #f 444 26 444 30 ("set-visible-flag")}
        {Lisp-Entry "hide" method #f 448 26 448 30 ("set-visible-flag")}
        {Lisp-Entry "get-visible-flag" method #f 452 18 452 34 ("Visible-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-visible-flag" method #f 456 18 456 34 ("Visible-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-properties" method #f 465 23 465 37 ("self" "get-instance-slots" "property-getter" "property?" "and" "property" "lambda" "collect-if")}
        {Lisp-Entry "component-property" method #f 472 11 472 29 ("error" "initer-property?" "property?" "or" "if" "category-field" "field" "let" "name" "category")}
        {Lisp-Entry "initer-property?" method #f 479 19 479 35 ("creator-branch" "creator" "form" "parent" "memq?" "name")}
        {Lisp-Entry "write-property-to" method #f 483 11 483 28 ("property-setter" "setter" "let" "property?" "when" "value" "property" "object")}
        {Lisp-Entry "write-initarg-to" method #f 489 11 489 27 ("keyword->symbol" "class-of" "component-property" "write-property-to" "value" "property" "object")}
        {Lisp-Entry "get-filtered-properties" method #f 493 18 493 41 ("map" "else" "error" "category-field" "either" "symbol?" "string?" "cond" "object" "lambda" "standardize" "letrec" "self" "class-of" "class" "get-all-properties" "get-categorized-properties" "properties" "let" "eq?" "if" "categorized" "'categorized" "filter" "filter:")}
        {Lisp-Entry "get-all-properties" method #f 512 11 512 29 ("self" "class-of" "get-instance-slots" "display-filtered-property?" "property" "collect-if" "field-name" "symbol->string" "string<?" "=" "and" "<" "or" "yr" "get-row-class" "get-filter-rank" "xr" "let" "categorized" "all" "memq?" "if" "y" "x" "lambda" "sort" "filter")}
        {Lisp-Entry "display-filtered-property?" method #f 526 11 526 37 ("display-property?" "get-filter-name" "eq?" "get-row-class" "class" "let" "categorized" "all" "memq?" "or" "property-getter" "property?" "and" "filter" "property")}
        {Lisp-Entry "name?" method #f 540 18 540 23 ("pair?" "null?" "integer?" "symbol?" "or" "object")}
        {Lisp-Entry "add-child" method #f 547 26 547 35 ("find-component" "send-child-before" "list" "append!" "children" "set!" "not" "if" "get-before" "Component" "is?" "essay" "before" "let" "child")}
        {Lisp-Entry "add-child-at" method #f 554 18 554 30 ("insert!" "children" "set!" "rank" "child")}
        {Lisp-Entry "append-child" method #f 558 18 558 30 ("list" "append!" "children" "set!" "child")}
        {Lisp-Entry "remove-child" method #f 562 26 562 38 ("remove!" "children" "set!" "child")}
        {Lisp-Entry "replace-child" method #f 566 26 566 39 ("remove!" "insert!" "set!" "self" "set-parent" "children" "element" "child" "let" "replacement" "rank")}
        {Lisp-Entry "send-child-to-front" method #f 573 26 573 45 ("move-to-head!" "children" "set!" "child")}
        {Lisp-Entry "send-child-to-back" method #f 577 26 577 44 ("move-to-tail!" "children" "set!" "child")}
        {Lisp-Entry "send-child-before" method #f 581 18 581 35 ("insert!" "set!" "error" "find" "either" "essay" "rank" "children" "remove!" "removed" "let*" "target" "child")}
        {Lisp-Entry "child" method #f 587 18 587 23 ("error" "find-component" "either" "name")}
        {Lisp-Entry "find-component" method #f 592 18 592 32 ("equal?" "find-component-with" "name")}
        {Lisp-Entry "find-component-with" method #f 596 18 596 37 ("find-child-with" "component-alias" "either" "else" "cdr" "next" "when" "car" "sub" "let" "pair?" "1" "-" "parent" "find-component" "self" "0" "=" "if" "integer?" "error" "null?" "cond" "test" "name")}
        {Lisp-Entry "brother" method #f 615 18 615 25 ("parent" "child" "name")}
        {Lisp-Entry "next-brother" method #f 619 18 619 30 ("next-child" "self" "parent" "not" "if" "type" "type:")}
        {Lisp-Entry "previous-brother" method #f 625 18 625 34 ("previous-child" "self" "parent" "not" "if" "type" "type:")}
        {Lisp-Entry "child-ranked" method #f 631 18 631 30 ("children" "element" "rank")}
        {Lisp-Entry "component-alias" method #f 635 26 635 41 ("process-alias" "when" "find-process" "process" "let" "else" "creator" ":creator" "parent" ":parent" "self" ":self" "case" "name")}
        {Lisp-Entry "find-child" method #f 645 18 645 28 ("children" "get-name" "equal?" "child" "lambda" "find-if" "name")}
        {Lisp-Entry "find-child-with" method #f 651 18 651 33 ("children" "get-name" "child" "lambda" "find-if" "test" "name")}
        {Lisp-Entry "find-type" method #f 657 18 657 27 ("children" "is?" "child" "lambda" "find-if" "type")}
        {Lisp-Entry "find-key" method #f 663 18 663 26 ("children" "equal?" "child" "lambda" "find-if" "value" "key")}
        {Lisp-Entry "find-ascendant" method #f 669 18 669 32 ("set!" "is-not?" "and" "while" "get-parent" "parent" "let" "type")}
        {Lisp-Entry "collect-ascendants" method #f 676 18 676 36 ("is?" "if" "cons" "set!" "is-not?" "not" "or" "and" "while" "get-parent" "parent" "ascendants" "let" "type")}
        {Lisp-Entry "child-rank" method #f 687 18 687 28 ("children" "find" "child")}
        {Lisp-Entry "get-brothers" method #f 691 18 691 30 ("get-children" "self" "remove" "parent" "when")}
        {Lisp-Entry "has-parent?" method #f 696 18 696 29 ("has-parent?" "eq?" "or" "parent" "and" "component")}
        {Lisp-Entry "has-ascendant?" method #f 700 18 700 32 ("has-parent?" "self" "eq?" "or" "component")}
        {Lisp-Entry "get-root-parent" method #f 704 18 704 33 ("get-root-parent" "self" "parent" "not" "if")}
        {Lisp-Entry "get-visible-children" method #f 710 18 710 38 ("children" "get-visible?" "child" "lambda" "collect-if")}
        {Lisp-Entry "first-visible-child" method #f 716 18 716 37 ("car" "null?" "if" "get-visible-children" "visible" "let")}
        {Lisp-Entry "get-ancestry" method #f 723 18 723 30 ("error" "null?" "when" "get-parent" "cons" "set!" "neq?" "while" "self" "scan" "ancestry" "let" "root")}
        {Lisp-Entry "get-self-form" method #f 739 23 739 36 ("self" "get-name" "get-registered-form")}
        {Lisp-Entry "add-form" method #f 743 26 743 34 ("append-child" "child-form" "parent-form")}
        {Lisp-Entry "add-to-index" method #f 752 26 752 38 ("table-set!" "table-ref" "if" "new-index" "set!" "index" "not" "when" "component" "name")}
        {Lisp-Entry "remove-from-index" method #f 761 26 761 43 ("table-clear" "index" "and" "when" "component" "name")}
        {Lisp-Entry "new-index" method #f 766 29 766 38 ("eq?" "test:" "make-table")}
        {Lisp-Entry "locate" method #f 770 26 770 32 ("else" "eq?" "error" "not" "cond" "locate-component" "component" "let" "name")}
        {Lisp-Entry "locate-component" method #f 777 18 777 34 ("table-ref" "index" "essay" "else" "null?" "if" "cdr" "next" "when" "car" "locate-component" "sub" "let" "pair?" "cond" "name")}
        {Lisp-Entry "get-database-component" method #f 794 18 794 40 ("get-root-parent")}
        {Lisp-Entry "get-event-consumer" method #f 803 20 803 38 ("event-consumer")}
        {Lisp-Entry "set-event-consumer" method #f 807 20 807 38 ("event-consumer" "set!" "consumer")}
        {Lisp-Entry "deliver-event" method #f 811 20 811 33 ("event" "proc" "target" "handler")}
        {Lisp-Entry "first-child" method #f 820 18 820 29 ("car" "children" "null?" "if")}
        {Lisp-Entry "last-child" method #f 826 18 826 28 ("children" "last")}
        {Lisp-Entry "next-child" method #f 830 18 830 28 ("length" "1" "+" "modulo" "element" "find" "rank" "collect-type" "if" "children" "let" "type" "type:" "child")}
        {Lisp-Entry "previous-child" method #f 836 18 836 32 ("length" "1" "-" "modulo" "element" "find" "rank" "collect-type" "if" "children" "let" "type" "type:" "child")}
        {Lisp-Entry "bring-to-front" method #f 842 26 842 40 ("self" "send-child-to-front" "parent" "when")}
        {Lisp-Entry "send-to-back" method #f 847 26 847 38 ("self" "send-child-to-back" "parent" "when")}
        {Lisp-Entry "send-before" method #f 852 26 852 37 ("self" "send-child-before" "parent" "when" "target")}
        {Lisp-Entry "get-branches" method #f 862 18 862 30 ("children" "Branch" "is?" "child" "lambda" "collect-if")}
        {Lisp-Entry "branch-installed?" method #f 868 18 868 35 ("branch")}
        {Lisp-Entry "get-active-branch" method #f 872 18 872 35 ("get-active-branch" "Branch" "self" "is?" "essay" "branch" "not" "if")}
        {Lisp-Entry "get-active-branch-name" method #f 878 18 878 40 ("get-name" "when" "get-active-branch" "branch" "let")}
        {Lisp-Entry "get-active-branch-presentation" method #f 884 18 884 48 ("get-presentation" "not" "if" "get-active-branch" "branch" "let")}
        {Lisp-Entry "set-active-branch" method #f 891 18 891 35 ("install-branch" "locate" "Branch" "is?" "let" "restore-client" "branch" "when" "self" "eq?" "not" "or" "if" "active-branch")}
        {Lisp-Entry "install-branch" method #f 899 29 899 43 ("configure-client" "restore-client" "branch" "neq?" "when" "br")}
        {Lisp-Entry "for-each-branch" method #f 907 18 907 33 ("get-branches" "for-each-branch" "branch" "lambda" "for-each" "proc")}
        {Lisp-Entry "with-each-branch" method #f 914 18 914 34 ("set-active-branch" "branch" "lambda" "for-each-branch" "get-branch" "active-branch" "let" "proc")}
        {Lisp-Entry "get-installed-branches" method #f 923 18 923 40 ("get-installed-branches" "cons" "branch" "not" "if")}
        {Lisp-Entry "iterate-branch-spine" method #f 929 18 929 38 ("creator-effective-form" "self" "get-parent" "set!" "get-client-form" "Branch" "is?" "while" "get-active-branch" "either" "let" "branch" "branch:" "proc")}
        {Lisp-Entry "creator-effective-form" method #f 941 18 941 40 ("class-of" "form" "creator" "self" "eq?" "if" "get-class-form")}
        {Lisp-Entry "save-session" method #f 954 26 954 38 ()}
        {Lisp-Entry "get-class-descriptor" method #f 963 31 963 51 ()}
        {Lisp-Entry "get-integrity-manager" method #f 972 26 972 47 ()}
        {Lisp-Entry "validate-component" method #f 976 26 976 44 ("get-categorized-properties" "validate-property" "self" "property-field" "property" "let" "symbol" "lambda" "for-each" "manager" "context" "client" "root")}
        {Lisp-Entry "validate-property" method #f 983 26 983 43 ("validate" "self" "read-property" "value" "property-domain" "domain" "let" "manager" "context" "client" "root" "property")}
        {Lisp-Entry "search-component" method #f 994 26 994 42 ("search-type" "search-name" "not" "or" "and" "type:" "type" "name:" "getf" "name" "let" "target")}
        {Lisp-Entry "search-name" method #f 1001 21 1001 32 ("ignore-case?:" "search" "get-presentation" "localize" "presentation" "let" "name")}
        {Lisp-Entry "search-type" method #f 1006 21 1006 32 ("self" "is?" "type")}
        {Lisp-Entry "search-text" method #f 1010 21 1010 32 ("else" "search-plain-text" "Text" "search-formatted-text" "Formatted-Text" "typecase" "search-text" "'search-text" "unimplemented" "target" "text")}
        {Lisp-Entry "search-plain-text" method #f 1022 11 1022 28 ("get-paragraphs" "ignore-case?:" "search" "line" "lambda" "some?" "target" "text")}
        {Lisp-Entry "search-formatted-text" method #f 1028 11 1028 32 ("get-paragraphs" "ignore-case?:" "search" "car" "string" "let" "run" "runs" "format" "bind" "info" "lambda" "some?" "target" "text")}
        {Lisp-Entry "launch" method #f 1043 26 1043 32 ("rest")}
        {Lisp-Entry "component-path" method #f 1052 26 1052 40 ("Path" "new" "null?" "when" "get-parent-component" "cons" "set!" "error" "not" "if" "get-name" "name" "neq?" "while" "self" "scan" "path" "let" "creator" "root")}
        {Lisp-Entry "present-path" method #f 1066 26 1066 38 ("Path" "new" "values" "null?" "get-parent-component" "cons" "set!" "present-in-path?" "when" "error" "not" "if" "get-name" "name" "neq?" "while" "self" "scan" "pres" "path" "let" "root")}
        {Lisp-Entry "present-in-path?" method #f 1083 26 1083 42 ()}
        {Lisp-Entry "unfold-branches" method #f 1092 18 1092 33 ("cons" "set-active-branch" "set-restoreable?" "child" "when" "" "apply" "client" "let" "self" "eq?" "if" "branch-name" "instantiate" "get-branches" "branch" "lambda" "map" "all-branch-names" "get-name" "essay" "active-branch-name" "get-branch" "active-branch" "get-creator" "get-form" "form" "let*" "include-root?" "include-root?:" "properties" "properties:" "branches" "branches:")}
        {Lisp-Entry "get-domain" method #f 1119 31 1119 41 ("Value-Domain" "else" "Boolean-Domain" "visible?" "Presentation-Domain" "presentation-info" "Name-Domain" "new" "name-info" "field-name" "case" "property")}
        {Lisp-Entry "property-domain" method #f 1127 26 1127 41 ("set-property-domain" "domain" "field-creator" "class" "get-property-domain" "either" "get-domain" "essay" "descriptor-domain" "field-name" "self" "class-of" "get-property-descriptor" "descriptor" "let*" "property")}
        {Lisp-Entry "search-descendants" method #f 1145 26 1145 44 ("search-descendants" "'search-descendants" "unimplemented" "get-children" "not" "if" "criteria")}
        {Lisp-Entry "get-class-presentation" method #f 1156 31 1156 53 ("type-name" "identifier-name" "->string" "get-title" "when" "self" "get-descriptor" "descriptor" "let" "either")}
        {Lisp-Entry "get-class-image" method #f 1163 31 1163 46 ("Bitmap-Resource" "get-image" "when" "self" "get-descriptor" "descriptor" "let" "either")}
        {Lisp-Entry "get-name-prohibited?" method #f 1170 31 1170 51 ("get-name-prohibited?" "if" "self" "get-descriptor" "descriptor" "let")}
        {Lisp-Entry "get-name-mandatory?" method #f 1177 31 1177 50 ("get-name-mandatory?" "if" "self" "get-descriptor" "descriptor" "let")}
        {Lisp-Entry "get-name-unicity?" method #f 1184 31 1184 48 ("get-name-unicity?" "if" "self" "get-descriptor" "descriptor" "let")}
        {Lisp-Entry "presentation->name" method #f 1191 31 1191 49 ("string->symbol" "=" "empty-string?" "or" "if" "presentation")}
        {Lisp-Entry "name->presentation" method #f 1197 31 1197 49 ("->string" "not" "if" "name")}
        {Lisp-Entry "property-presentation" method #f 1203 31 1203 52 ("->string" "get-title" "if" "self" "get-property-descriptor" "descriptor" "else" "visible?" "children" "before" "presentation-info" "name-info" "class-info" "case" "field-name" "name" "let" "property")}
        {Lisp-Entry "detail-presentation" method #f 1218 31 1218 50 ("property-presentation" "else" "presentation-info" "name-info" "class-info" "field-name" "case" "property")}
        {Lisp-Entry "persist-property?" method #f 1226 31 1226 48 ("property")}
        {Lisp-Entry "presentation-property?" method #f 1230 26 1230 48 ("property")}
        {Lisp-Entry "get-presentation" method #f 1234 26 1234 42 ("name" "self" "class-of" "name->presentation")}
        {Lisp-Entry "set-presentation" method #f 1238 26 1238 42 ("class-of" "presentation->name" "self" "set-name" "presentation" "designer")}
        {Lisp-Entry "get-string-presentation" method #f 1242 21 1242 44 ("get-name" "either")}
        {Lisp-Entry "set-string-presentation" method #f 1246 21 1246 44 ("self" "set-name" "empty-string?" "if" "presentation" "designer")}
        {Lisp-Entry "present-property" method #f 1252 26 1252 42 ("present" "property-domain" "domain" "let" "value" "property")}
        {Lisp-Entry "get-parent-component" method #f 1257 26 1257 46 ("get-parent")}
        {Lisp-Entry "get-components" method #f 1261 26 1261 40 ("get-children")}
        {Lisp-Entry "get-component-image" method #f 1265 26 1265 45 ("self" "class-of" "get-class-image")}
        {Lisp-Entry "can-cut-component?" method #f 1269 26 1269 44 ("can-delete-component?")}
        {Lisp-Entry "can-copy-component?" method #f 1273 26 1273 45 ()}
        {Lisp-Entry "can-paste-component?" method #f 1277 26 1277 46 ()}
        {Lisp-Entry "can-rename-component?" method #f 1281 26 1281 47 ("self" "class-of" "get-name-prohibited?" "not")}
        {Lisp-Entry "can-delete-component?" method #f 1285 26 1285 47 ()}
        {Lisp-Entry "can-move-component?" method #f 1289 26 1289 45 ()}
        {Lisp-Entry "can-view-properties?" method #f 1293 26 1293 46 ()}
        {Lisp-Entry "determine-can-paste" method #f 1297 18 1297 37 ("determine-paster" "boolean" "try-parent?")}
        {Lisp-Entry "determine-paster" method #f 1301 18 1301 34 ("determine-paster" "parent" "else" "addable-class?" "every?" "memq?" "cond" "get-master-model" "parcel" "lambda" "map" "remove-duplicates" "models" "format:" "get-clipboard-text" "read-string-element" "parcels" "let*" "jazz-parcels" "'jazz-parcels" "clipboard-format-available?" "can-paste-component?" "and" "when" "self" "try-parent?")}
        {Lisp-Entry "can-send-before?" method #f 1316 26 1316 42 ("sort-components?" "not" "addable-class?" "every?" "and" "before" "father" "types")}
        {Lisp-Entry "sort-components?" method #f 1321 26 1321 42 ()}
        {Lisp-Entry "sort-components" method #f 1325 26 1325 41 ("get-presentation" "component" "lambda" "key:" "sort" "components" "predicate")}
        {Lisp-Entry "indexable?" method #f 1329 26 1329 36 ()}
        {Lisp-Entry "component-surrogate" method #f 1333 26 1333 45 ("Component-Surrogate")}
        {Lisp-Entry "install-surrogate" method #f 1337 26 1337 43 ("install-children-surrogates" "install-handlers" "editor:" "self" "client:" "component-surrogate" "new" "surrogate" "set!" "editor")}
        {Lisp-Entry "install-children-surrogates" method #f 1343 26 1343 53 ("get-components" "install-surrogate" "component" "lambda" "for-each" "editor")}
        {Lisp-Entry "remove-surrogate" method #f 1349 18 1349 34 ("remove-component-surrogate")}
        {Lisp-Entry "remove-component-surrogate" method #f 1353 18 1353 44 ("set!" "remove-handlers" "surrogate" "when" "get-components" "remove-component-surrogate" "component" "lambda" "for-each")}
        {Lisp-Entry "get-default-property" method #f 1362 26 1362 46 ()}
        {Lisp-Entry "get-categorized-properties" method #f 1366 26 1366 52 ("get-categorized-properties" "if" "self" "class-of" "get-descriptor" "descriptor" "let")}
        {Lisp-Entry "display-property?" method #f 1373 26 1373 43 ("visible?" "children" "before" "presentation-info" "field-name" "memq?" "not" "property")}
        {Lisp-Entry "get-row-class" method #f 1377 26 1377 39 ("Value-Row" "else" "presentation-info" "name-info" "Info-Row" "class-info" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" method #f 1385 26 1385 42 ("else" "Boolean-Row" "new" "visible?" "field-name" "case" "property")}
        {Lisp-Entry "update-property-row" method #f 1391 26 1391 45 ("row")}
        {Lisp-Entry "get-addable-default" method #f 1395 26 1395 45 ()}
        {Lisp-Entry "get-addable-classes" method #f 1399 26 1399 45 ()}
        {Lisp-Entry "addable-class?" method #f 1403 26 1403 40 ("get-addable-classes" "subtype?" "and" "addable-class" "lambda" "some?" "class")}
        {Lisp-Entry "get-component-classes" method #f 1409 26 1409 47 ()}
        {Lisp-Entry "get-addable-branches" method #f 1413 26 1413 46 ()}
        {Lisp-Entry "get-addable-default-branch" method #f 1417 26 1417 52 ("Branch")}
        {Lisp-Entry "get-addable-base" method #f 1421 26 1421 42 ("Component" "car" "length" "1" "=" "if" "when" "get-addable-classes" "classes" "let")}
        {Lisp-Entry "get-addable-details" method #f 1429 26 1429 45 ("100" "name-info" "when" "get-addable-base" "base" "let")}
        {Lisp-Entry "get-recursive-details?" method #f 1435 26 1435 48 ()}
        {Lisp-Entry "get-class-searchable-classes" method #f 1439 26 1439 54 ()}
        {Lisp-Entry "get-custom-details" method #f 1443 26 1443 44 ()}
        {Lisp-Entry "get-custom-card" method #f 1447 26 1447 41 ()}
        {Lisp-Entry "save-component-properties" method #f 1451 26 1451 51 ("designer")}
        {Lisp-Entry "get-designers" method #f 1460 18 1460 31 ("designers")}
        {Lisp-Entry "set-designers" method #f 1464 18 1464 31 ("children" "set-designers" "child" "lambda" "for-each" "designers" "set!" "lst")}
        {Lisp-Entry "install-designer" method #f 1471 18 1471 34 ("get-components" "install-designer" "child" "lambda" "for-each" "cons" "designers" "set!" "designer")}
        {Lisp-Entry "uninstall-designer" method #f 1478 18 1478 36 ("get-components" "uninstall-designer" "child" "lambda" "for-each" "remove!" "designers" "set!" "designer")}
        {Lisp-Entry "print-component" method #f 1490 18 1490 33 ("print-html" "self" "Component-HTML-Printer" "new" "let" "print-component" "'print-component" "unimplemented" "printer" "formatter")}
        {Lisp-Entry "export-text" method #f 1498 18 1498 29 ("get-output-string" "set-clipboard-text" "generate-text" "open-output-string" "printer" "let" "export-text" "'export-text" "unimplemented")}
        {Lisp-Entry "generate-text" method #f 1506 26 1506 39 ("print-text" "new-text-formatter" "formatter" "let" "printer")}
        {Lisp-Entry "new-text-formatter" method #f 1511 29 1511 47 ("Formatter" "new" "new-text-formatter" "'new-text-formatter" "unimplemented")}
        {Lisp-Entry "print-text" method #f 1517 26 1517 36 ("printer" "formatter")}
        {Lisp-Entry "output-component" method #f 1521 26 1521 42 ("text")}
        {Lisp-Entry "output-properties" method #f 1525 26 1525 43 ("get-properties" "format" "insert-bulleted-line" "read-property" "->string" "value" "self" "class-of" "property-presentation" "localize" "title" "let" "property" "lambda" "for-each" "output-properties" "'output-properties" "unimplemented" "text")}
        {Lisp-Entry "for-each-parent" method #f 1540 18 1540 33 ("for-each-parent" "parent" "when" "proc")}
        {Lisp-Entry "for-each-ascendant" method #f 1546 18 1546 36 ("for-each-parent" "self" "proc")}
        {Lisp-Entry "for-each-descendant" method #f 1551 18 1551 37 ("0" "self" "1" "+" "do" "get-children" "in" "child" "for" "loop" "when" "level" "include?" "component" "lambda" "iter" "letrec" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "for-each-sibling" method #f 1561 18 1561 34 ("self" "neq?" "when" "parent" "get-children" "in" "child" "for" "loop" "proc")}
        {Lisp-Entry "collect-family" method #f 1567 18 1567 32 ("get-output" "put" "rest" "child" "lambda" "for-each-descendant" "List-Factory" "new" "factory" "let")}}}})
"Consumer"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "consumer" "Consumer.jazz"} 1257476356
    {Lisp-Entry "jazz.library.consumer.Consumer" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Consumer" interface #f 40 24 40 32 ()}}})
"Convertion"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "convertion" "Convertion.jazz"} 1257476358
    {Lisp-Entry "jazz.library.convertion.Convertion" module #f 37 18 37 52 ("parse" "user-message" "get-application" "edit-document" "form:" "Designer" "new" "save" "ensure-read/write" "get-children" "for-each" "convert" "letrec" "file-form" "form" "lambda" ":wait" "with-cursor" "choose-file" "file" "let" "extensions" "extensions:" "proc" "convert-form" "method" "jazz")}})
"Cryptography-Provider"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "cryptography" "Cryptography-Provider.jazz"} 1257476359
    {Lisp-Entry "jazz.library.cryptography.Cryptography-Provider" module #f 37 18 37 65 ("jazz")
      {Lisp-Entry "Cryptography-Provider" class #f 40 20 40 41 ("Object")}
      {Lisp-Entry "Cryptography-Provider" class #f 46 20 46 41 ("crypt-hash-data" "crypt-destroy-hash" "crypt-create-hash" "crypt-release-context" "void" "crypt-acquire-context" "int" "Jazz" "external" "Object")
        {Lisp-Entry "handle" slot #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" method #f 52 11 52 21 ("destroy-mandatory" "crypt-acquire-context" "handle" "set!" "nextmethod")}
        {Lisp-Entry "destroy" method #f 58 11 58 18 ("nextmethod" "handle" "crypt-release-context")}
        {Lisp-Entry "hash-data" method #f 68 18 68 27 ("crypt-hash-data" "hash" "lambda" "with-hash" "data")}
        {Lisp-Entry "with-hash" method #f 74 11 74 20 ("crypt-destroy-hash" "when" "handle" "crypt-create-hash" "set!" "begin" "unwind-protect" "hash" "let" "proc")}}}})
"Cursor-Resource"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "resource" "Cursor-Resource.jazz"} 1257476359
    {Lisp-Entry "jazz.library.resource.Cursor-Resource" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Cursor-Resource" class #f 43 7 43 22 ("Resource")
        {Lisp-Entry "resource-type" method #f 52 16 52 29 ("cursor" "'cursor")}}}})
"Directory-Group"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "moniker" "Directory-Group.jazz"} 1257476387
    {Lisp-Entry "jazz.library.moniker.Directory-Group" module #f 38 18 38 54 ("jazz")
      {Lisp-Entry "Directory-Group" class #f 44 20 44 35 ("Directory")
        {Lisp-Entry "print" method #f 47 20 47 25 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "validate-component" method #f 54 16 54 34 ("error" "Directory" "is-not?" "when" "dir" "lambda" "for-each" "lst")}
        {Lisp-Entry "get-protocol" method #f 67 16 67 28 ("group" "'group")}
        {Lisp-Entry "get-modal" method #f 72 16 72 25 ("get-list" "essay" "directories:" "Directories-Request" "get-modal" "Directory-Group" "new" "others" "actual" "bind-keywords" "rest")}
        {Lisp-Entry "new-moniker" method #f 78 16 78 27 ("self" "new" "list")}
        {Lisp-Entry "present" method #f 82 20 82 27 ("get-list" "format")}
        {Lisp-Entry "get-name" method #f 91 20 91 28 ()}
        {Lisp-Entry "get-directory" method #f 95 20 95 33 ("self")}
        {Lisp-Entry "get-content" method #f 99 20 99 31 ("expand" "class-of" "new" "map" "and" "if" "string?" "some-string?" "key:" "symbol?" "some?" "some-symbol?" "get-name" "moniker" "lambda" "key" "nextmethod" "apply" "content" "let*" "rest")}
        {Lisp-Entry "get-modification-time" method #f 113 20 113 41 ()}
        {Lisp-Entry "create" method #f 117 20 117 26 ()}
        {Lisp-Entry "delete-directory" method #f 122 20 122 36 ("empty-directory" "self" "when" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "iterate-directory" method #f 133 20 133 37 ("parse" "iterate-directory-content" "directory" "'directory" "member?" "not" "and" "name" "Directory" "file" "'file" "get-name" "list" "if" "when" "File" "typecase" "element" "lambda" "for-each" "get-list" "items" "let" "ignored-directories" "ignored-directories:" "recursive?" "recursive?:" "directories?" "directories?:" "files?" "files?:" "full?" "full?:" "proc")}}}})
"Display-Column"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Display-Column.jazz"} 1257476388
    {Lisp-Entry "jazz.library.display.Display-Column" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Display-Column" class #f 43 20 43 34 ("0" "initialize" "Object")
        {Lisp-Entry "displayer" slot #f 46 8 46 17 ()}
        {Lisp-Entry "factory" slot #f 47 8 47 15 ()}
        {Lisp-Entry "content" slot #f 48 8 48 15 ()}
        {Lisp-Entry "current" slot #f 49 8 49 15 ()}
        {Lisp-Entry "border" slot #f 50 8 50 14 ()}
        {Lisp-Entry "get-border" accessor #f 50 51 50 59 ()}
        {Lisp-Entry "set-border" accessor #f 50 51 50 59 ()}
        {Lisp-Entry "border-after" slot #f 51 8 51 20 ()}
        {Lisp-Entry "get-border-after" accessor #f 51 51 51 59 ()}
        {Lisp-Entry "set-border-after" accessor #f 51 51 51 59 ()}
        {Lisp-Entry "minimum" slot #f 52 8 52 15 ()}
        {Lisp-Entry "line" slot #f 53 8 53 12 ()}
        {Lisp-Entry "empty?" slot #f 54 8 54 14 ()}
        {Lisp-Entry "get-empty?" accessor #f 54 49 54 57 ()}
        {Lisp-Entry "initialize" method #f 62 20 62 30 ("minimum~self" "border-after~self" "border~self" "List-Factory" "new" "factory~self" "displayer~self" "set!" "nextmethod" "minimum" "minimum:" "border-after" "border-after:" "0" "border" "border:" "displayer")}
        {Lisp-Entry "output" method #f 76 18 76 24 ("increase-line" "empty?" "set!" "when" "put-data" "fill-empty" "rest" "data")}
        {Lisp-Entry "put-data" method #f 84 26 84 34 ("factory" "put" "rest" "data")}
        {Lisp-Entry "increase-line" method #f 88 26 88 39 ("line" "increase!")}
        {Lisp-Entry "get-next" method #f 92 21 92 29 ("cdr" "set!" "car" "prog1" "current" "when")}
        {Lisp-Entry "rewind" method #f 98 18 98 24 ("current" "factory" "get-output" "content" "set!")}
        {Lisp-Entry "fill-empty" method #f 103 18 103 28 ("increase!" "factory" "put" "line" "<" "while" "displayer" "get-line" "main" "let")}
        {Lisp-Entry "replace-empty" method #f 110 21 110 34 ("cdr" "set!" "set-car!" "empty-replacement" "replacement" "null?" "if" "current" "car" "data" "let" "previous-data" "previous-column")}
        {Lisp-Entry "empty-replacement" method #f 121 29 121 46 ("previous-data" "previous-column")}
        {Lisp-Entry "prepare-print" method #f 130 26 130 39 ("rewind")}
        {Lisp-Entry "print-to" method #f 134 26 134 34 ("border-after" "border" "format" "printer" "previous-data" "previous-column" "data")}}}})
"Display-Outline"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "outline" "Display-Outline.jazz"} 1257476388
    {Lisp-Entry "jazz.library.outline.Display-Outline" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Display-Outline" class #f 43 20 43 35 ("0" "initialize" "Outline")
        {Lisp-Entry "first-displayed" slot #f 46 8 46 23 ()}
        {Lisp-Entry "get-first-displayed" accessor #f 46 59 46 67 ()}
        {Lisp-Entry "first-displayed-rank" slot #f 47 8 47 28 ()}
        {Lisp-Entry "get-first-displayed-rank" accessor #f 47 59 47 67 ()}
        {Lisp-Entry "first-displayed-offset" slot #f 48 8 48 30 ()}
        {Lisp-Entry "get-first-displayed-offset" accessor #f 48 59 48 67 ()}
        {Lisp-Entry "get-row" method #f 56 20 56 27 ("nextmethod" "-" "get-row-from" "first-displayed-rank" ">=" "first-displayed" "and" "if" "n")}
        {Lisp-Entry "call-with-v->row" method #f 62 20 62 36 ("when" "get-next" "set!" "increase!" "<" "or" "and" "while" "row-spacing" "get-height" "bottom" "first-displayed-offset" "top" "0" "first-displayed-rank" "rank" "first-visible-row" "row" "+" "-" ">=" "displayed?" "let*" "first-displayed" "if" "proc" "scrolled" "v")}
        {Lisp-Entry "update-displayed" method #f 87 11 87 27 ("first-displayed-offset" "first-displayed-rank" "first-displayed" "row-spacing" "increase!" "set!" "not" "if" "get-next" "next" ">" "while" "get-height" "-" "bottom" "when" "v" "0" "rank" "root-row" "first-visible-son" "row" "let" "display-v")}
        {Lisp-Entry "follow" method #f 106 11 106 17 ("update-displayed" "not" "when" "-" "follow-backward" "<" "follow-forward" "0" ">" "cond" "succeeded?" "let" "v" "display-v")}
        {Lisp-Entry "follow-forward" method #f 117 11 117 25 ("decrease!" "first-displayed-rank" "get-next" "set!" "increase!" "begin" "<" "if" "first-displayed-offset" "-" "remaining" "row-spacing" "first-displayed" "get-height" "+" "height" "let*" "0" ">" "while" "v")}
        {Lisp-Entry "follow-backward" method #f 132 11 132 26 ("row-spacing" "get-height" "-" "1" "+" "first-displayed-rank" "continuation-return" "not" "get-previous" "first-displayed" "set!" "decrease!" "begin" "first-displayed-offset" "<=" "if" "0" ">" "while" "return" "lambda" "continuation-capture" "v")}}}})
"Entity"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "entity" "Entity.jazz"} 1257476402
    {Lisp-Entry "jazz.library.entity.Entity" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Entity" interface #f 74 24 74 30 ()
        {Lisp-Entry "get-factory" method #f 77 35 77 46 ()}
        {Lisp-Entry "get-factories" method #f 78 35 78 48 ()}
        {Lisp-Entry "get-presentation" method #f 79 35 79 51 ()}
        {Lisp-Entry "set-presentation" method #f 80 35 80 51 ("presentation" "controller")}
        {Lisp-Entry "can-cut-entity?" method #f 81 35 81 50 ()}
        {Lisp-Entry "can-copy-entity?" method #f 82 35 82 51 ()}
        {Lisp-Entry "can-paste-entity?" method #f 83 35 83 52 ()}
        {Lisp-Entry "determine-paster" method #f 84 35 84 51 ("rest")}
        {Lisp-Entry "can-rename-entity?" method #f 85 35 85 53 ()}
        {Lisp-Entry "can-delete-entity?" method #f 86 35 86 53 ()}
        {Lisp-Entry "can-move-entity?" method #f 87 35 87 51 ()}
        {Lisp-Entry "can-view-properties?" method #f 88 35 88 55 ()}
        {Lisp-Entry "get-categorized-properties" method #f 89 35 89 61 ()}}}})
"Entity-Factory"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "entity" "Entity-Factory.jazz"} 1257476401
    {Lisp-Entry "jazz.library.entity.Entity-Factory" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Entity-Factory" class #f 55 20 55 34 ("Object")
        {Lisp-Entry "get-class" method #f 58 35 58 44 ()}
        {Lisp-Entry "get-name-prohibited?" method #f 59 35 59 55 ()}
        {Lisp-Entry "get-name-mandatory?" method #f 60 35 60 54 ()}
        {Lisp-Entry "get-name-unicity?" method #f 61 35 61 52 ()}
        {Lisp-Entry "presentation->name" method #f 62 35 62 53 ("presentation")}
        {Lisp-Entry "get-factory-presentation" method #f 63 35 63 59 ()}
        {Lisp-Entry "get-factory-image" method #f 64 35 64 52 ()}}}})
"Event"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "event" "Event.jazz"} 1257476406
    {Lisp-Entry "jazz.library.event.Event" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Event" class #f 44 7 44 12 ("Object")
        {Lisp-Entry "kind" slot #f 47 8 47 12 ()}
        {Lisp-Entry "get-kind" accessor #f 47 26 47 34 ()}
        {Lisp-Entry "sender" slot #f 48 8 48 14 ()}
        {Lisp-Entry "get-sender" accessor #f 48 26 48 34 ()}
        {Lisp-Entry "properties" slot #f 49 8 49 18 ()}
        {Lisp-Entry "get-properties" accessor #f 49 26 49 34 ()}
        {Lisp-Entry "modifiers" slot #f 50 8 50 17 ()}
        {Lisp-Entry "get-modifiers" accessor #f 50 26 50 34 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("modifiers-keys" "modifiers~self" "properties~self" "sender~self" "kind~self" "set!" "nextmethod" "properties" "sender" "kind")}
        {Lisp-Entry "print" method #f 61 20 61 25 ("properties" "not-null?" "kind" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-property" method #f 74 18 74 30 ("properties" "getf" "keyword")}
        {Lisp-Entry "get-shift?" method #f 78 18 78 28 ("modifiers" "shift-key?")}
        {Lisp-Entry "get-control?" method #f 82 18 82 30 ("modifiers" "control-key?")}
        {Lisp-Entry "get-alt?" method #f 86 18 86 26 ("modifiers" "alt-key?")}}}})
"Event-Consumer"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "consumer" "Event-Consumer.jazz"} 1257476404
    {Lisp-Entry "jazz.library.consumer.Event-Consumer" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Event-Consumer" interface #f 43 24 43 38 ("Consumer")
        {Lisp-Entry "get-event-consumer" method #f 46 35 46 53 ()}
        {Lisp-Entry "set-event-consumer" method #f 47 35 47 53 ("consumer")}
        {Lisp-Entry "deliver-event" method #f 48 35 48 48 ("evt" "proc" "target" "handler")}}}})
"Event-Handler"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "handler" "Event-Handler.jazz"} 1257476405
    {Lisp-Entry "jazz.library.handler.Event-Handler" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Event-Handler" class #f 44 7 44 20 ("Handler")
        {Lisp-Entry "properties" slot #f 47 8 47 18 ()}
        {Lisp-Entry "get-properties" accessor #f 47 26 47 34 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("properties~self" "set!" "nextmethod" "apply" "others" "properties" "bind-keywords" "rest")}
        {Lisp-Entry "print" method #f 56 20 56 25 ("properties" "null?" "if" "method-name" "target-name" "target" "either" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-property" method #f 71 18 71 30 ("properties" "getf" "keyword")}
        {Lisp-Entry "invoke" method #f 84 20 84 26 ("self" "redirect-handler" "invoke-target" "target-name" "error" "not" "find-target" "either" "target" "let" "execute" "if" "action" "action:" "event" "sender")}
        {Lisp-Entry "invoke-target" method #f 93 18 93 31 ("else" "record" "get-recorder" "recorder" "action/handler" "record-event?" "macro-recording?" "and" "when" "get-application" "appl" "self" "deliver-event" "prog1" "get-event-consumer" "consumer" "Event-Consumer" "is?" "error" "not" "cond" "method-name" "dispatch" "proc" "let" "action" "action:" "event" "target")}}}})
"Explore-Error"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "exception" "Explore-Error.jazz"} 1257476409
    {Lisp-Entry "jazz.library.exception.Explore-Error" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Explore-Error" class #f 40 20 40 33 ("Error")
        {Lisp-Entry "source" slot #f 43 8 43 14 ()}
        {Lisp-Entry "get-source" accessor #f 43 22 43 30 ()}
        {Lisp-Entry "start" slot #f 44 8 44 13 ()}
        {Lisp-Entry "get-start" accessor #f 44 22 44 30 ()}
        {Lisp-Entry "end" slot #f 45 8 45 11 ()}
        {Lisp-Entry "get-end" accessor #f 45 22 45 30 ()}
        {Lisp-Entry "initialize" method #f 48 20 48 30 ("end~self" "start~self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "bind-keywords" "rest" "source")}
        {Lisp-Entry "get-range" method #f 61 18 61 27 ("end" "start" "Range" "new")}}}})
"Favorite"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "favorite" "Favorite.jazz"} 1257476412
    {Lisp-Entry "jazz.library.favorite.Favorite" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Favorite" class #f 44 20 44 28 ("initialize" "Component")
        {Lisp-Entry "title" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-title" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "set-title" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "get-class-image" method #f 55 25 55 40 ("Bitmap-Resource")}
        {Lisp-Entry "display-property?" method #f 59 20 59 37 ("visible?" "children" "before" "name-info" "field-name" "memq?" "not" "property")}
        {Lisp-Entry "get-row-instance" method #f 63 20 63 36 ("nextmethod" "else" "String-Row" "new" "title" "field-name" "case" "property")}}}})
"Form"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "Form.jazz"} 1257476419
    {Lisp-Entry "jazz.library.component.Form" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Form" class #f 61 7 61 11 ("JML-Element")
        {Lisp-Entry "origin" slot #f 64 8 64 14 ()}
        {Lisp-Entry "get-origin" accessor #f 64 32 64 40 ()}
        {Lisp-Entry "set-origin" accessor #f 64 32 64 40 ()}
        {Lisp-Entry "context" slot #f 65 8 65 15 ()}
        {Lisp-Entry "get-context" accessor #f 65 32 65 40 ()}
        {Lisp-Entry "set-context" accessor #f 65 32 65 40 ()}
        {Lisp-Entry "action" slot #f 66 8 66 14 ()}
        {Lisp-Entry "get-action" accessor #f 66 29 66 37 ()}
        {Lisp-Entry "model-name" slot #f 67 8 67 18 ()}
        {Lisp-Entry "get-model-name" accessor #f 67 32 67 40 ()}
        {Lisp-Entry "set-model-name" accessor #f 67 32 67 40 ()}
        {Lisp-Entry "name" slot #f 68 8 68 12 ()}
        {Lisp-Entry "get-name" accessor #f 68 32 68 40 ()}
        {Lisp-Entry "set-name" accessor #f 68 32 68 40 ()}
        {Lisp-Entry "tag-symbolic?" slot #f 69 8 69 21 ()}
        {Lisp-Entry "get-tag-symbolic?" accessor #f 69 32 69 40 ()}
        {Lisp-Entry "set-tag-symbolic?" accessor #f 69 32 69 40 ()}
        {Lisp-Entry "tag-unit" slot #f 70 8 70 16 ()}
        {Lisp-Entry "get-tag-unit" accessor #f 70 32 70 40 ()}
        {Lisp-Entry "set-tag-unit" accessor #f 70 32 70 40 ()}
        {Lisp-Entry "initialize" method #f 78 20 78 30 ("canonicalize-properties" "when" "children~self" "properties~self" "tag-unit~self" "tag-symbolic?~self" "name~self" "model-name~self" "action~self" "context~self" "origin~self" "set!" "nextmethod" "children" "children:" "properties" "properties:" "tag-unit" "tag-unit:" "tag-symbolic?" "tag-symbolic?:" "name" "name:" "model-name" "model-name:" "action" "action:" "context" "context:" "origin" "origin:" "textual?" "textual?:")}
        {Lisp-Entry "copy-object" method #f 102 20 102 31 ("children" "subcopy" "children:" "properties" "copy" "properties:" "tag-unit" "tag-unit:" "tag-symbolic?" "tag-symbolic?:" "name" "name:" "model-name" "model-name:" "action" "action:" "context" "context:" "origin" "origin:" "textual?:" "Form" "new" "deep?")}
        {Lisp-Entry "print" method #f 108 20 108 25 ("length" "children" "name" "model-name" "if" "action" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print" method #f 119 11 119 16 ("children" "keywordize-properties" "properties" "name" "model-name" "if" "action" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "setup-toplevel-context" method #f 137 18 137 40 ("0" "setup-context" "origin" "set!" "ctx")}
        {Lisp-Entry "setup-context" method #f 142 11 142 24 ("children" "1" "+" "setup-context" "when" "child" "for-each" "properties" "setup-toplevel-context" "Form" "set-form-level" "Handler" "is?" "cond" "value" "name" "lambda" "for-each-property" "level" "ctx")}
        {Lisp-Entry "canonicalize-properties" method #f 156 11 156 34 ("cddr" "set!" "car" "keyword->symbol" "set-car!" "not-null?" "while" "lst")}
        {Lisp-Entry "get-model" method #f 167 18 167 27 ("slot-value" "autoload" "model-name" "get-autoclass" "either" "context" "not" "if")}
        {Lisp-Entry "child" method #f 179 18 179 23 ("error" "find-child" "either" "name")}
        {Lisp-Entry "find-child" method #f 184 18 184 28 ("get-name" "eq?" "child" "lambda" "find-by" "name")}
        {Lisp-Entry "find-name" method #f 189 20 189 29 ("find-child" "name")}
        {Lisp-Entry "find-type" method #f 193 18 193 27 ("get-model-name" "eq?" "child" "lambda" "find-by" "type")}
        {Lisp-Entry "add-child" method #f 199 20 199 29 ("cons" "children" "set!" "child")}
        {Lisp-Entry "add-child-at" method #f 203 18 203 30 ("insert!" "children" "set!" "rank" "child")}
        {Lisp-Entry "append-child" method #f 207 18 207 30 ("list" "append!" "children" "set!" "child")}
        {Lisp-Entry "remove-child" method #f 211 18 211 30 ("remove!" "children" "set!" "child")}
        {Lisp-Entry "send-child-before" method #f 215 18 215 35 ("insert!" "set!" "error" "find" "either" "essay" "rank" "children" "remove!" "removed" "let*" "target" "child")}
        {Lisp-Entry "sort-children" method #f 221 18 221 31 ("sort" "children" "set!" "get-name" "child" "lambda" "key" "key:" "test")}
        {Lisp-Entry "get-presentation" method #f 231 18 231 34 ("get-model" "get-class-presentation" "title" "'title" "get-property" "either")}
        {Lisp-Entry "remember-creation" method #f 241 18 241 35 ("children:" "properties:" "component:" "remove" "'remove" "action:" "self" "context:" "Restore-Form" "new" "cons" "children" "set!" "component" "unused")}
        {Lisp-Entry "remember-reference" method #f 245 18 245 36 ("cons" "children" "set!" "children:" "properties:" "name:" "model-name:" "modify" "'modify" "action:" "self" "context:" "Restore-Form" "new" "form" "let" "name" "unused")}
        {Lisp-Entry "remember-property" method #f 251 18 251 35 ("set-property" "read-property" "actual-value" "let" "property" "component")}
        {Lisp-Entry "instantiate" method #f 261 18 261 29 ("name" "name:" "creator:" "self" "form:" "new" "apply" "model-name" "autoload" "model" "let" "rest")}
        {Lisp-Entry "instantiate-component" method #f 266 18 266 39 ("name" "name:" "creator:" "new" "apply" "model-name" "autoload" "model" "let" "rest")}
        {Lisp-Entry "get-parts" method #f 276 18 276 27 ("get-children" "get-properties" "keywordize-properties" "get-name" "get-model-name" "get-action" "values")}
        {Lisp-Entry "get-child-location" method #f 290 20 290 38 ("children" "get-rank" "properties" "length" "tag-unit" "tag-symbolic?" "0" "2" "name" "if" "1" "+" "list" "child")}}}})
"Formatter"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "factory" "Formatter.jazz"} 1257476421
    {Lisp-Entry "jazz.library.factory.Formatter" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Formatter" class #f 40 20 40 29 ("Object")
        {Lisp-Entry "format-directive" method #f 43 26 43 42 ("directive" "output" "formatting")}}}})
"Group"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "group" "Group.jazz"} 1257476432
    {Lisp-Entry "jazz.library.group.Group" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "Group" class #f 45 20 45 25 ("title:" "set-sort?" "get-sort?" "initialize" "Component")
        {Lisp-Entry "title" property #f 48 12 48 17 ()}
        {Lisp-Entry "get-title" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "set-title" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "classes" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-classes" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "set-classes" accessor #f 49 45 49 53 ()}
        {Lisp-Entry "sort?" property #f 50 12 50 17 ()}
        {Lisp-Entry "print" method #f 57 20 57 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-sort?" method #f 69 18 69 27 ("sort?")}
        {Lisp-Entry "set-sort?" method #f 73 18 73 27 ("designers" "descendants" "'descendants" "self" "process-refresh" "designer" "lambda" "for-each" "set!" "sort?" "neq?" "when" "value")}
        {Lisp-Entry "get-addable-classes" method #f 86 20 86 39 ("get-component-classes" "autoload" "when" "model" "lambda" "map")}
        {Lisp-Entry "get-component-classes" method #f 93 20 93 41 ("get-component-classes" "parent" "when" "classes" "either")}
        {Lisp-Entry "get-class-presentation" method #f 104 25 104 47 ()}
        {Lisp-Entry "get-class-image" method #f 108 25 108 40 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" method #f 112 25 112 46 ("nextmethod" "else" "sort?" "classes" "title" "field-name" "case" "property")}
        {Lisp-Entry "get-custom-card" method #f 120 20 120 35 ("Group-Card")}
        {Lisp-Entry "sort-components?" method #f 124 20 124 36 ("sort?")}
        {Lisp-Entry "display-property?" method #f 128 20 128 37 ("title" "visible?" "children" "before" "name-info" "class-info" "field-name" "memq?" "not" "property")}
        {Lisp-Entry "indexable?" method #f 132 20 132 30 ()}
        {Lisp-Entry "get-row-instance" method #f 136 20 136 36 ("nextmethod" "else" "Boolean-Row" "sort?" "Class-List-Row" "new" "classes" "field-name" "case" "property")}}
      {Lisp-Entry "Class-List-Row" class #f 148 7 148 21 ("List-Row")
        {Lisp-Entry "get-subrow-class" method #f 151 20 151 36 ("Class-Combo-Row")}}
      {Lisp-Entry "Class-Combo-Row" class #f 160 7 160 22 ("Combo-Row")
        {Lisp-Entry "initialize" method #f 163 20 163 30 ("Recipe" "Apartment" "Password" "Person" "Organism" "Company" "Anniversary" "Calendar-Event" "Task" "Note" "Group" "set-choices" "nextmethod" "apply" "rest")}}}})
"Handler"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "handler" "Handler.jazz"} 1257476436
    {Lisp-Entry "jazz.library.handler.Handler" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Handler" class #f 44 7 44 14 ("Object")
        {Lisp-Entry "execute" slot #f 47 8 47 15 ()}
        {Lisp-Entry "get-execute" accessor #f 47 27 47 35 ()}
        {Lisp-Entry "target" slot #f 48 8 48 14 ()}
        {Lisp-Entry "get-target" accessor #f 48 27 48 35 ()}
        {Lisp-Entry "target-name" slot #f 49 8 49 19 ()}
        {Lisp-Entry "get-target-name" accessor #f 49 27 49 35 ()}
        {Lisp-Entry "method-name" slot #f 50 8 50 19 ()}
        {Lisp-Entry "get-method-name" accessor #f 50 27 50 35 ()}
        {Lisp-Entry "form-level" slot #f 51 8 51 18 ()}
        {Lisp-Entry "get-form-level" accessor #f 51 30 51 38 ()}
        {Lisp-Entry "set-form-level" accessor #f 51 30 51 38 ()}
        {Lisp-Entry "initialize" method #f 54 20 54 30 ("form-level~self" "method-name~self" "target-name~self" "target~self" "execute~self" "set!" "nextmethod" "form-level" "form-level:" "method-name" "method-name:" "target-name" "target-name:" "target" "target:" "execute" "execute:")}
        {Lisp-Entry "print" method #f 63 20 63 25 ("method-name" "target-name" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "invoke" method #f 75 26 75 32 ("" "apply" "method-name" "dispatch" "proc" "find-target" "either" "target" "let*" "execute" "if" "rest" "sender")}
        {Lisp-Entry "find-target" method #f 83 18 83 29 ("else" "cdr" "car" "pair?" "and" "form-level" "child" ":form" "eq?" "cond" "target-name" "get-process" "process-alias" "Component" "is-not?" "if" "sender")}}}})
"History-Item"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "history" "History-Item.jazz"} 1257476442
    {Lisp-Entry "jazz.library.history.History-Item" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "History-Item" class #f 43 20 43 32 ("Object")
        {Lisp-Entry "valid?" method #f 46 26 46 32 ()}
        {Lisp-Entry "open-item" method #f 50 26 50 35 ()}
        {Lisp-Entry "present" method #f 54 26 54 33 ()}}}})
"History-Manager"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "history" "History-Manager.jazz"} 1257476443
    {Lisp-Entry "jazz.library.history.History-Manager" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "History-Manager" class #f 44 20 44 35 ("initialize" "Object")
        {Lisp-Entry "history-provider" slot #f 47 8 47 24 ()}
        {Lisp-Entry "backward-history" slot #f 48 8 48 24 ()}
        {Lisp-Entry "forward-history" slot #f 49 8 49 23 ()}
        {Lisp-Entry "max-history" slot #f 50 8 50 19 ()}
        {Lisp-Entry "initialize" method #f 53 20 53 30 ("max-history~self" "history-provider" "set!" "nextmethod" "max-history" "bind-keywords" "rest" "provider")}
        {Lisp-Entry "get-backward-history" method #f 65 18 65 38 ("backward-history" "cleanup-history")}
        {Lisp-Entry "get-forward-history" method #f 69 18 69 37 ("forward-history" "cleanup-history")}
        {Lisp-Entry "add-current" method #f 78 18 78 29 ("present" "user-message" "add-history" "bell" "null?" "if" "history-provider" "current-history-item" "item" "let")}
        {Lisp-Entry "add-history" method #f 86 18 86 29 ("update-history-actions" "forward-history" "set!" "1" "-" "tail" "set-cdr!" "backward-history" "length" ">" "max-history" "and" "add-backward-history" "when" "item")}
        {Lisp-Entry "add-backward-history" method #f 95 11 95 31 ("cons" "backward-history" "set!" "when" "item")}
        {Lisp-Entry "add-forward-history" method #f 100 11 100 30 ("cons" "forward-history" "set!" "when" "item")}
        {Lisp-Entry "append-forward-history" method #f 105 11 105 33 ("list" "append" "forward-history" "set!" "when" "item")}
        {Lisp-Entry "go-backward-history" method #f 110 18 110 37 ("update-history-actions" "open-item" "decrease!" "cdr" "car" "set!" "add-forward-history" "while" "history-provider" "current-history-item" "item" "let" "bell" "begin" "backward-history" "length" ">=" "if" "cleanup-backward-history" "0" "rank" "rank:")}
        {Lisp-Entry "go-forward-history" method #f 127 18 127 36 ("update-history-actions" "open-item" "decrease!" "cdr" "car" "set!" "add-backward-history" ">=" "while" "history-provider" "current-history-item" "item" "let" "bell" "begin" "forward-history" "null?" "if" "cleanup-forward-history" "0" "rank" "rank:")}
        {Lisp-Entry "cleanup-history" method #f 144 11 144 26 ("valid?" "item" "lambda" "collect-if" "history")}
        {Lisp-Entry "cleanup-backward-history" method #f 150 11 150 35 ("cleanup-history" "backward-history" "set!")}
        {Lisp-Entry "cleanup-forward-history" method #f 154 11 154 34 ("cleanup-history" "forward-history" "set!")}
        {Lisp-Entry "update-history-actions" method #f 164 11 164 33 ("update-history-actions" "when" "get-application" "appl" "let")}}}})
"History-Provider"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "history" "History-Provider.jazz"} 1257476443
    {Lisp-Entry "jazz.library.history.History-Provider" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "History-Provider" interface #f 43 24 43 40 ()
        {Lisp-Entry "current-history-item" method #f 46 35 46 55 ()}}}})
"Icon-Resource"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "resource" "Icon-Resource.jazz"} 1257476450
    {Lisp-Entry "jazz.library.resource.Icon-Resource" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Icon-Resource" class #f 43 7 43 20 ("Resource")
        {Lisp-Entry "resource-type" method #f 52 16 52 29 ("icon" "'icon")}}}})
"Indented-Column"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Indented-Column.jazz"} 1257476452
    {Lisp-Entry "jazz.library.display.Indented-Column" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Indented-Column" class #f 43 20 43 35 ("0" "initialize" "Display-Column")
        {Lisp-Entry "indentation" slot #f 46 8 46 19 ()}
        {Lisp-Entry "get-indentation" accessor #f 46 52 46 60 ()}
        {Lisp-Entry "set-indentation" accessor #f 46 52 46 60 ()}
        {Lisp-Entry "use-contouring?" slot #f 47 8 47 23 ()}
        {Lisp-Entry "get-use-contouring?" accessor #f 47 52 47 60 ()}
        {Lisp-Entry "set-use-contouring?" accessor #f 47 52 47 60 ()}
        {Lisp-Entry "max-data" slot #f 48 8 48 16 ()}
        {Lisp-Entry "max-width" slot #f 49 8 49 17 ()}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("use-contouring?~self" "indentation~self" "set!" "nextmethod" "apply" "others" "use-contouring?" "2" "indentation" "bind-keywords" "rest" "displayer")}
        {Lisp-Entry "put-data" method #f 69 20 69 28 ("cons" "factory" "put" "0" "level" "data")}
        {Lisp-Entry "empty-replacement" method #f 73 20 73 37 ("0" "cons" "previous-data" "previous-column")}
        {Lisp-Entry "prepare-print" method #f 82 20 82 33 ("minimum" "content" "+" "max-width" "max" "max-data" "set!" "indentation" "*" "indent" "length" "either" "let*" "data" "level" "bind" "info" "lambda" "for-each" "nextmethod")}
        {Lisp-Entry "print-to" method #f 96 20 96 28 ("border-after" "0" "border" "format" "get-use-contouring?" "Indented-Column" "is?" "and" "puc?" "max-width" "max-data" "-" "use-contouring?" "if" "padding" "indentation" "*" "indent" "length" "either" "let*" "data" "level" "bind" "printer" "previous-data" "previous-column" "info")}}}})
"Indented-Column-Preferences"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Indented-Column-Preferences.jazz"} 1257476452
    {Lisp-Entry "jazz.library.display.Indented-Column-Preferences" module #f 37 18 37 66 ("jazz")
      {Lisp-Entry "Indented-Column-Preferences" class #f 45 20 45 47 ("Bitmap-Resource" "icon:" "2" "initialize" "Column-Preferences")
        {Lisp-Entry "indentation" property #f 48 12 48 23 ()}
        {Lisp-Entry "get-indentation" accessor #f 48 52 48 60 ()}
        {Lisp-Entry "set-indentation" accessor #f 48 52 48 60 ()}
        {Lisp-Entry "use-contouring?" property #f 49 12 49 27 ()}
        {Lisp-Entry "get-use-contouring?" accessor #f 49 52 49 60 ()}
        {Lisp-Entry "set-use-contouring?" accessor #f 49 52 49 60 ()}
        {Lisp-Entry "column-class" method #f 61 20 61 32 ("Indented-Column")}
        {Lisp-Entry "new-column" method #f 65 20 65 30 ("use-contouring?" "use-contouring?:" "indentation" "indentation:" "minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Indented-Column" "new" "display")}
        {Lisp-Entry "get-row-instance" method #f 74 20 74 36 ("nextmethod" "else" "Boolean-Row" "new" "use-contouring?" "field-name" "case" "property")}}}})
"Integrity-Constraint"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "integrity" "Integrity-Constraint.jazz"} 1257476456
    {Lisp-Entry "jazz.library.integrity.Integrity-Constraint" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Integrity-Constraint" class #f 40 20 40 40 ("Object")
        {Lisp-Entry "register-constraints" method #f 48 31 48 51 ("manager")}
        {Lisp-Entry "validate" method #f 57 26 57 34 ("manager" "context" "client" "root" "component")}}}})
"Integrity-Manager"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "integrity" "Integrity-Manager.jazz"} 1257476456
    {Lisp-Entry "jazz.library.integrity.Integrity-Manager" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Integrity-Manager" class #f 40 20 40 37 ("initialize" "Object")
        {Lisp-Entry "constraints" slot #f 43 8 43 19 ()}
        {Lisp-Entry "initialize" method #f 46 20 46 30 ("setup-constraints" "nextmethod")}
        {Lisp-Entry "print" method #f 51 20 51 25 ("format-plural" "format-cardinality" "format" "constraints" "length" "entries" "let" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "setup-constraints" method #f 65 11 65 28 ("get-output" "register-constraints" "List-Factory" "new" "constraints" "set!")}
        {Lisp-Entry "register-constraints" method #f 71 26 71 46 ()}
        {Lisp-Entry "register-constraint" method #f 75 18 75 37 ("list" "constraints" "put" "root?" "root?:" "model" "constraint")}
        {Lisp-Entry "validate-integrity" method #f 84 18 84 36 ("validate-all" "clear-violations" "reporter" "reporter:" "context" "context:" "root")}
        {Lisp-Entry "validate-all" method #f 89 29 89 41 ("validate-hierarchy" "reporter" "context" "root")}
        {Lisp-Entry "validate-hierarchy" method #f 93 29 93 47 ("get-children" "validate-hierarchy" "child" "lambda" "for-each" "stop-descent" "'stop-descent" "validate" "eq?" "unless" "report-progress" "when" "reporter" "context" "client" "root" "component")}
        {Lisp-Entry "validate" method #f 102 18 102 26 ("constraints" "continuation-return" "validate" "branch-installed?" "is?" "null?" "or" "and" "when" "root?" "model" "constraint" "bind" "info" "for-each" "return" "lambda" "continuation-capture" "stop-descent" "'stop-descent" "self" "validate-component" "eq?" "if" "validation-context" "new-context" "let" "context" "client" "root" "component")}
        {Lisp-Entry "validation-context" method #f 117 29 117 47 ("context" "root" "component")}
        {Lisp-Entry "report-progress" method #f 121 29 121 44 ("get-name" "user-message" "test-cancelled" "reporter" "root" "component")}
        {Lisp-Entry "add-violation" method #f 131 26 131 39 ("add-violation" "cons" "if" "set-path-presentation" "set-path" "set-branch-presentation" "set-branch" "present-path" "presentation" "path" "receive" "get-presentation" "branch-presentation" "get-name" "essay" "branch-name" "get-active-branch" "branch" "let*" "client" "root" "component" "violation")}
        {Lisp-Entry "clear-violations" method #f 143 26 143 42 ("clear-violations" "root")}}}})
"Integrity-Violation"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "integrity" "Integrity-Violation.jazz"} 1257476457
    {Lisp-Entry "jazz.library.integrity.Integrity-Violation" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Integrity-Violation" class #f 43 20 43 39 ("Object")
        {Lisp-Entry "message" slot #f 46 8 46 15 ()}
        {Lisp-Entry "branch" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-branch" accessor #f 47 38 47 46 ()}
        {Lisp-Entry "set-branch" accessor #f 47 38 47 46 ()}
        {Lisp-Entry "branch-presentation" slot #f 48 8 48 27 ()}
        {Lisp-Entry "get-branch-presentation" accessor #f 48 38 48 46 ()}
        {Lisp-Entry "set-branch-presentation" accessor #f 48 38 48 46 ()}
        {Lisp-Entry "path" slot #f 49 8 49 12 ()}
        {Lisp-Entry "get-path" accessor #f 49 38 49 46 ()}
        {Lisp-Entry "set-path" accessor #f 49 38 49 46 ()}
        {Lisp-Entry "path-presentation" slot #f 50 8 50 25 ()}
        {Lisp-Entry "get-path-presentation" accessor #f 50 38 50 46 ()}
        {Lisp-Entry "set-path-presentation" accessor #f 50 38 50 46 ()}
        {Lisp-Entry "property" slot #f 51 8 51 16 ()}
        {Lisp-Entry "get-property" accessor #f 51 38 51 46 ()}
        {Lisp-Entry "set-property" accessor #f 51 38 51 46 ()}
        {Lisp-Entry "construct-literal" method #f 55 16 55 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" method #f 59 20 59 30 ("property~self" "path-presentation~self" "path~self" "branch-presentation~self" "branch~self" "message~self" "set!" "nextmethod" "property" "property:" "path-presentation" "path-presentation:" "path" "path:" "branch-presentation" "branch-presentation:" "branch" "branch:" "message" "message:")}
        {Lisp-Entry "print" method #f 74 20 74 25 ("path-presentation" "path" "branch-presentation" "branch" "message" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-message" method #f 89 26 89 37 ("message")}
        {Lisp-Entry "get-image" method #f 98 26 98 35 ("Bitmap-Resource")}
        {Lisp-Entry "present-message" method #f 102 26 102 41 ("get-message")}
        {Lisp-Entry "present-location" method #f 106 26 106 42 ("join" "path" "get-path" "path-presentation" "either" "location" "let")}}}})
"Locator"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Locator.jazz"} 1257476492
    {Lisp-Entry "jazz.library.utility.Locator" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Locator" class #f 44 20 44 27 ("initialize" "Object")
        {Lisp-Entry "prefix" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-prefix" accessor #f 47 40 47 48 ()}
        {Lisp-Entry "reset-time" slot #f 48 8 48 18 ()}
        {Lisp-Entry "max-delay" slot #f 49 8 49 17 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("max-delay~self" "set!" "nextmethod" "0.5" "max-delay" "max-delay:")}
        {Lisp-Entry "setup" method #f 62 18 62 23 ("max-delay" "current-time" "time->seconds" "+" "reset-time" "prefix" "set!" "string")}
        {Lisp-Entry "enter" method #f 72 18 72 23 ("locate" "concatenate" "prefix" "not" "if" "target" "validate" "string" "let" "key")}
        {Lisp-Entry "validate" method #f 79 11 79 19 ("reset" "ci=?" "reset-time" "current-time" "time->seconds" ">" "or" "prefix" "and" "when" "string")}
        {Lisp-Entry "locate" method #f 85 18 85 24 ("continuation-return" "setup" "select" "ci=?" "and" "when" "0" "subseq" ">=" "essay" "prefix" "rank" "title" "iterate" "return" "lambda" "continuation-capture" "cardinality" "len" "let" "target")}
        {Lisp-Entry "iterate" method #f 103 26 103 33 ("proc")}
        {Lisp-Entry "select" method #f 107 26 107 32 ("rank")}
        {Lisp-Entry "reset" method #f 116 18 116 23 ("reset-time" "prefix" "set!")}}}})
"Log-Reporter"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "reporter" "Log-Reporter.jazz"} 1257476492
    {Lisp-Entry "jazz.library.reporter.Log-Reporter" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Log-Reporter" class #f 43 20 43 32 ("Reporter" "Object")
        {Lisp-Entry "log" slot #f 46 8 46 11 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("log~self" "set!" "nextmethod" "log")}
        {Lisp-Entry "section-title" method #f 54 20 54 33 ("log" "format" "title")}
        {Lisp-Entry "set-message" method #f 58 20 58 31 ("log" "format" "msg")}
        {Lisp-Entry "user-message" method #f 62 20 62 32 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-range" method #f 66 20 66 29 ("range")}
        {Lisp-Entry "set-pos" method #f 70 20 70 27 ("pos")}
        {Lisp-Entry "delta-pos" method #f 74 20 74 29 ("increment")}
        {Lisp-Entry "set-step" method #f 78 20 78 28 ("increment")}
        {Lisp-Entry "step-it" method #f 82 20 82 27 ()}
        {Lisp-Entry "set-done" method #f 86 20 86 28 ()}
        {Lisp-Entry "disable-cancel" method #f 90 20 90 34 ()}
        {Lisp-Entry "cancel-requested?" method #f 94 20 94 37 ()}
        {Lisp-Entry "test-cancelled" method #f 98 20 98 34 ()}}}})
"Loggable"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Loggable.jazz"} 1257476492
    {Lisp-Entry "jazz.library.utility.Loggable" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Loggable" interface #f 40 24 40 32 ()
        {Lisp-Entry "log-info" method #f 43 35 43 43 ("output")}
        {Lisp-Entry "edit" method #f 44 35 44 39 ()}
        {Lisp-Entry "edit-child" method #f 45 35 45 45 ("child")}}}})
"Multiplexer-Reporter"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "reporter" "Multiplexer-Reporter.jazz"} 1257476502
    {Lisp-Entry "jazz.library.reporter.Multiplexer-Reporter" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Multiplexer-Reporter" class #f 43 20 43 40 ("Reporter" "Object")
        {Lisp-Entry "reporters" slot #f 46 8 46 17 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("reporters~self" "set!" "nextmethod" "reporters")}
        {Lisp-Entry "main-reporter" method #f 54 11 54 24 ("reporters" "car")}
        {Lisp-Entry "section-title" method #f 58 20 58 33 ("reporters" "section-title" "reporter" "lambda" "for-each" "title")}
        {Lisp-Entry "set-message" method #f 64 20 64 31 ("reporters" "set-message" "reporter" "lambda" "for-each" "msg")}
        {Lisp-Entry "user-message" method #f 70 20 70 32 ("reporters" "user-message" "" "apply" "reporter" "lambda" "for-each" "rest" "fmt")}
        {Lisp-Entry "set-range" method #f 76 20 76 29 ("reporters" "set-range" "reporter" "lambda" "for-each" "range")}
        {Lisp-Entry "set-pos" method #f 82 20 82 27 ("reporters" "set-pos" "reporter" "lambda" "for-each" "pos")}
        {Lisp-Entry "delta-pos" method #f 88 20 88 29 ("reporters" "delta-pos" "reporter" "lambda" "for-each" "increment")}
        {Lisp-Entry "set-step" method #f 94 20 94 28 ("reporters" "set-step" "reporter" "lambda" "for-each" "increment")}
        {Lisp-Entry "step-it" method #f 100 20 100 27 ("reporters" "step-it" "reporter" "lambda" "for-each")}
        {Lisp-Entry "set-done" method #f 106 20 106 28 ("reporters" "set-done" "reporter" "lambda" "for-each")}
        {Lisp-Entry "disable-cancel" method #f 112 20 112 34 ("reporters" "disable-cancel" "reporter" "lambda" "for-each")}
        {Lisp-Entry "cancel-requested?" method #f 118 20 118 37 ("cancel-requested?" "main-reporter" "main" "let")}
        {Lisp-Entry "test-cancelled" method #f 123 20 123 34 ("test-cancelled" "main-reporter" "main" "let")}}}})
"Outline"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "outline" "Outline.jazz"} 1257476511
    {Lisp-Entry "jazz.library.outline.Outline" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Outline" class #f 43 20 43 27 ("Object")
        {Lisp-Entry "row-spacing" slot #f 46 8 46 19 ()}
        {Lisp-Entry "get-row-spacing" accessor #f 46 32 46 40 ()}
        {Lisp-Entry "root-row" slot #f 47 8 47 16 ()}
        {Lisp-Entry "get-root-row" accessor #f 47 32 47 40 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("root-row~self" "row-spacing~self" "set!" "nextmethod" "root-row" "row-spacing")}
        {Lisp-Entry "first-row" method #f 56 18 56 27 ("root-row" "get-sons" "first")}
        {Lisp-Entry "first-visible-row" method #f 60 18 60 35 ("root-row" "get-next")}
        {Lisp-Entry "get-row" method #f 69 26 69 33 ("1" "+" "root-row" "get-row-from" "n")}
        {Lisp-Entry "get-row-from" method #f 73 21 73 33 ("decrease!" "get-next" "set!" "0" ">" "and" "while" "n" "row")}
        {Lisp-Entry "call-with-v->row" method #f 80 26 80 42 ("proc" "v")}}}})
"Output-Log"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Output-Log.jazz"} 1257476511
    {Lisp-Entry "jazz.library.utility.Output-Log" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Output-Log" class #f 48 20 48 30 ("300" "width:" "title:" "message" "results" "header" "content" "scroller" "name:" "Navigable-Results")
        {Lisp-Entry "external-name" method #f 61 25 61 38 ("output-log" "'output-log" "rest")}
        {Lisp-Entry "host-icon" method #f 70 25 70 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 74 25 74 35 ()}
        {Lisp-Entry "log-line" method #f 83 18 83 26 ("title:" "Tree-Node" "new" "list" "children:" "add-row" "get-tree" "tree" "let" "user-data" "user-data:" "image" "image:" "collapsed" "'collapsed" "state" "state:" "father" "father:" "line")}
        {Lisp-Entry "edit-selection" method #f 93 20 93 34 ("focus-host" "edit-document" "frame" "user-message" "msg" "line" "file" "bind" "else" "cdr" "edit-child" "car" "pair?" "and" "edit" "Loggable" "is?" "bell" "null?" "cond" "get-row" "get-user-data" "info" "let" "when" "get-single-selection" "selection" "get-tree" "tree" "let*" "forward?")}
        {Lisp-Entry "edit-document" method #f 112 11 112 24 ("set-visible?" "bring-to-front" "visible?:" "selection:" "get-application" "edit-document" "frame" "1" "+" "0" "Cell" "Range$Cell$" "new" "essay" "selection" "let*" "lambda" ":wait" "with-cursor" "focus?" "forward?" "line" "file")}}}})
"Path"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "path" "Path.jazz"} 1257476522
    {Lisp-Entry "jazz.library.path.Path" module #f 37 18 37 40 ("jazz")
      {Lisp-Entry "Path" class #f 40 20 40 24 ("Object")
        {Lisp-Entry "path" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-path" accessor #f 43 23 43 31 ()}
        {Lisp-Entry "set-path" accessor #f 43 23 43 31 ()}
        {Lisp-Entry "construct-literal" method #f 46 16 46 33 ("self" "new" "path" "context")}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("path~self" "set!" "nextmethod" "path")}
        {Lisp-Entry "compare-object" method #f 55 20 55 34 (":not-equal" "else" ":equal" "get-path" "path" "=" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 64 20 64 25 ("path" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-parent" method #f 75 18 75 28 ("path" "butlast" "Path" "new")}
        {Lisp-Entry "present" method #f 84 18 84 25 ("path" "format")}
        {Lisp-Entry "follow-component" method #f 93 26 93 42 ("path" "child" "root")}
        {Lisp-Entry "follow-form" method #f 97 26 97 37 ("path" "child" "set!" "name" "lambda" "for-each" "form")}}}})
"Period"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Period.jazz"} 1257476524
    {Lisp-Entry "jazz.library.utility.Period" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Period" class #f 43 20 43 26 ("Range")
        {Lisp-Entry "get-duration" method #f 47 18 47 30 ("Time" "new" "get-duration" "start" "end" "get-time" "get-elapse" "-" "delta" "let" "field")}
        {Lisp-Entry "present" method #f 53 18 53 25 ("end" "french:" "english:" "Locales" "localize" "start" "present-date" ":string" "format")}
        {Lisp-Entry "for-each-day" method #f 61 18 61 30 ("1" "day" "'day" "add" "set!" "end" "<=" "while" "start" "date" "let" "proc")}
        {Lisp-Entry "includes-day-of-week?" method #f 69 18 69 39 ("return" "get-day-of-week" "Date" "symbolic-day-of-week" "=" "when" "date" "lambda" "for-each-day" "day")}}}})
"Print-Sequencer"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "factory" "Print-Sequencer.jazz"} 1257476533
    {Lisp-Entry "jazz.library.factory.Print-Sequencer" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Print-Sequencer" class #f 40 20 40 35 ("Object")}
      {Lisp-Entry "Print-Sequencer" class #f 46 20 46 35 ("List-Factory" "new" "initialize" "Object")
        {Lisp-Entry "printer" slot #f 49 8 49 15 ()}
        {Lisp-Entry "start" slot #f 50 8 50 13 ()}
        {Lisp-Entry "sections" slot #f 51 8 51 16 ()}
        {Lisp-Entry "initialize" method #f 54 11 54 21 ("start-section" "printer" "set!" "nextmethod" "prt")}
        {Lisp-Entry "start-section" method #f 60 18 60 31 ("get-position" "start" "set!")}
        {Lisp-Entry "end-section" method #f 64 18 64 29 ("start-section" "get-position" "start" "cons" "prog1")}
        {Lisp-Entry "get-position" method #f 69 11 69 23 ("printer" "get-position")}
        {Lisp-Entry "put-section" method #f 78 18 78 29 ("sections" "put" "section")}
        {Lisp-Entry "put-sections" method #f 82 18 82 30 ("sections" "put-sequence" "sections-list")}
        {Lisp-Entry "print-sections" method #f 86 18 86 32 ("sections" "get-output" "transfer" "end" "start" "bind" "section" "lambda" "for-each" "output")}
        {Lisp-Entry "transfer-size" definition #f 98 14 98 27 ("1024")}
        {Lisp-Entry "transfer-buffer" definition #f 101 14 101 29 ("transfer-size" "size:" "Heap-Block" "new")}
        {Lisp-Entry "transfer" method #f 105 24 105 32 ("increase!" "decrease!" "WriteFile" "NULL" "transfer-buffer" "get-handle" "ReadFile" "transfer-size" "min" "subsize" "printer" "set-position" "0" ">" "while" "-" "size" "let" "output" "end" "start")}}}})
"Pulse"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Pulse.jazz"} 1257476548
    {Lisp-Entry "jazz.library.utility.Pulse" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Pulse" class #f 43 7 43 12 ("make-mutex" "initialize" "Object")
        {Lisp-Entry "name" property #f 46 12 46 16 ()}
        {Lisp-Entry "get-name" accessor #f 46 44 46 52 ()}
        {Lisp-Entry "set-name" accessor #f 46 44 46 52 ()}
        {Lisp-Entry "delay" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-delay" accessor #f 47 44 47 52 ()}
        {Lisp-Entry "set-delay" accessor #f 47 44 47 52 ()}
        {Lisp-Entry "period" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-period" accessor #f 48 44 48 52 ()}
        {Lisp-Entry "set-period" accessor #f 48 44 48 52 ()}
        {Lisp-Entry "repeat?" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-repeat?" accessor #f 49 44 49 52 ()}
        {Lisp-Entry "set-repeat?" accessor #f 49 44 49 52 ()}
        {Lisp-Entry "execute" property #f 50 12 50 19 ()}
        {Lisp-Entry "get-execute" accessor #f 50 44 50 52 ()}
        {Lisp-Entry "set-execute" accessor #f 50 44 50 52 ()}
        {Lisp-Entry "thread" slot #f 53 8 53 14 ()}
        {Lisp-Entry "mutex" slot #f 54 8 54 13 ()}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("start-loop" "thread~self" "execute~self" "repeat?~self" "delay~self" "period~self" "name~self" "set!" "nextmethod" "repeat?" "delay" "bind-keywords" "rest" "execute" "period" "name")}
        {Lisp-Entry "destroy" method #f 68 20 68 27 ("nextmethod" "thread-exit" "thread-interrupt!" "mutex-unlock!" "set!" "thread~self" "let" "thread" "when" "mutex" "mutex-lock!")}
        {Lisp-Entry "start-loop" method #f 85 11 85 21 ("name" "repeat?" "when" "execute" "execute-event" "sleep" "period" "delay" "either" "timeout" "loop" "let" "lambda" "new-thread" "thread-start!")}}}})
"Regular-Expression"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "regexp" "Regular-Expression.jazz"} 1257476558
    {Lisp-Entry "jazz.library.regexp.Regular-Expression" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Regular-Expression" class #f 40 20 40 38 ("Object")
        {Lisp-Entry "original" slot #f 43 8 43 16 ()}
        {Lisp-Entry "expressions" slot #f 44 8 44 19 ()}
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("parse-expressions" "expressions" "original" "set!" "nextmethod" "pattern")}
        {Lisp-Entry "parse-expressions" method #f 53 11 53 28 ("separator:" "parse-strings" "parse-expression" "map" "pattern")}
        {Lisp-Entry "parse-expression" method #f 57 11 57 27 ("1" "+" "0" "subseq" "Regular-Pattern" "new" "not" "if" "find-star" "pos" "let" "pattern")}
        {Lisp-Entry "find-star" method #f 66 11 66 20 ("error" "set!" "not" "if" "eqv?" "when" "element" "c" "cardinality" "below" "0" "from" "n" "for" "loop" "pos" "let" "pattern")}
        {Lisp-Entry "match" method #f 82 18 82 23 ("expressions" "continuation-return" "when" "match-expression" "match" "let" "expression" "for-each" "return" "lambda" "continuation-capture" "string")}
        {Lisp-Entry "match-expression" method #f 93 11 93 27 ("-" "cardinality" "cast" "subseq" "ends-with?" "starts-with?" "and" "get-suffix" "suffix" "get-prefix" "prefix" "let" "else" "get-pattern" "nu=?" "if" "get-exact?" "cond" "string" "expression")}
        {Lisp-Entry "matches?" method #f 107 18 107 26 ("match" "not-null?" "string")}
        {Lisp-Entry "replace" method #f 116 18 116 25 ("get-suffix" "get-prefix" "concatenate" "get-pattern" "get-exact?" "car" "expression" "let" "original" "error" "1" "expressions" "length" "/=" "if" "string")}}
      {Lisp-Entry "Regular-Pattern" class #f 130 7 130 22 ("Object")
        {Lisp-Entry "pattern" slot #f 133 8 133 15 ()}
        {Lisp-Entry "get-pattern" accessor #f 133 23 133 31 ()}
        {Lisp-Entry "exact?" slot #f 134 8 134 14 ()}
        {Lisp-Entry "get-exact?" accessor #f 134 23 134 31 ()}
        {Lisp-Entry "prefix" slot #f 135 8 135 14 ()}
        {Lisp-Entry "get-prefix" accessor #f 135 23 135 31 ()}
        {Lisp-Entry "suffix" slot #f 136 8 136 14 ()}
        {Lisp-Entry "get-suffix" accessor #f 136 23 136 31 ()}
        {Lisp-Entry "initialize" method #f 139 20 139 30 ("suffix~self" "prefix~self" "exact?~self" "pattern~self" "set!" "nextmethod" "suffix" "prefix" "exact?" "pattern")}}}})
"Reporter"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "reporter" "Reporter.jazz"} 1257476559
    {Lisp-Entry "jazz.library.reporter.Reporter" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Reporter" interface #f 43 24 43 32 ()
        {Lisp-Entry "section-title" method #f 46 35 46 48 ("title")}
        {Lisp-Entry "set-message" method #f 47 35 47 46 ("msg")}
        {Lisp-Entry "user-message" method #f 48 35 48 47 ("rest" "fmt")}
        {Lisp-Entry "set-range" method #f 49 35 49 44 ("range")}
        {Lisp-Entry "set-pos" method #f 50 35 50 42 ("pos")}
        {Lisp-Entry "delta-pos" method #f 51 35 51 44 ("increment")}
        {Lisp-Entry "set-step" method #f 52 35 52 43 ("increment")}
        {Lisp-Entry "step-it" method #f 53 35 53 42 ()}
        {Lisp-Entry "set-done" method #f 54 35 54 43 ()}
        {Lisp-Entry "disable-cancel" method #f 55 35 55 49 ()}
        {Lisp-Entry "cancel-requested?" method #f 56 35 56 52 ()}
        {Lisp-Entry "test-cancelled" method #f 57 35 57 49 ()}}}})
"Resource"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "resource" "Resource.jazz"} 1257476562
    {Lisp-Entry "jazz.library.resource.Resource" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Resource" class #f 40 7 40 15 ("Object")
        {Lisp-Entry "name" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-name" accessor #f 43 20 43 28 ()}
        {Lisp-Entry "initialize" method #f 46 20 46 30 ("name~self" "set!" "nextmethod" "name")}
        {Lisp-Entry "compare-object" method #f 51 20 51 34 (":not-equal" "else" ":equal" "get-name" "name" "=" ":incompatible" "Resource" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 60 20 60 25 ("name" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "resource-type" method #f 72 31 72 44 ()}}}})
"Restore-Form"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "Restore-Form.jazz"} 1257476564
    {Lisp-Entry "jazz.library.component.Restore-Form" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Restore-Form" class #f 43 20 43 32 ("Form")
        {Lisp-Entry "component" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-component" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "construct-literal" method #f 50 16 50 33 ("error" "rest" "context")}
        {Lisp-Entry "initialize" method #f 54 20 54 30 ("component~self" "set!" "nextmethod" "apply" "others" "component" "bind-keywords" "initargs")}}}})
"Sequenced-Column"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Sequenced-Column.jazz"} 1257476601
    {Lisp-Entry "jazz.library.display.Sequenced-Column" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Sequenced-Column" class #f 43 20 43 36 ("Display-Column")
        {Lisp-Entry "put-data" method #f 51 20 51 28 ("List-Factory" "new" "fact" "let" "factory" "get-last-element" "put" "displayer" "get-line" "line" ">" "if" "rest" "data")}
        {Lisp-Entry "increase-line" method #f 59 20 59 33 ("increase!" "displayer" "get-line" "line" "<=" "when")}
        {Lisp-Entry "print-to" method #f 69 20 69 28 ("border-after" "get-output" "display" "data" "lambda" "for-each" "border" "format" "printer" "previous-data" "previous-column" "fact")}}}})
"Sequenced-Column-Preferences"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "display" "Sequenced-Column-Preferences.jazz"} 1257476601
    {Lisp-Entry "jazz.library.display.Sequenced-Column-Preferences" module #f 37 18 37 67 ("jazz")
      {Lisp-Entry "Sequenced-Column-Preferences" class #f 43 20 43 48 ("Column-Preferences")
        {Lisp-Entry "column-class" method #f 51 20 51 32 ("Sequenced-Column")}
        {Lisp-Entry "new-column" method #f 55 20 55 30 ("minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Sequenced-Column" "new" "display")}}}})
"Sound-Resource"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "resource" "Sound-Resource.jazz"} 1257476609
    {Lisp-Entry "jazz.library.resource.Sound-Resource" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Sound-Resource" class #f 43 7 43 21 ("Resource")
        {Lisp-Entry "resource-type" method #f 52 16 52 29 ("sound" "'sound")}}}})
"Sparse-Outline"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "outline" "Sparse-Outline.jazz"} 1257476609
    {Lisp-Entry "jazz.library.outline.Sparse-Outline" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Sparse-Outline" class #f 43 20 43 34 ("Outline")}}})
"Template-Expander"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "template" "Template-Expander.jazz"} 1257476627
    {Lisp-Entry "jazz.library.template.Template-Expander" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Template-Expander" class #f 43 7 43 24 ("Object")
        {Lisp-Entry "delimiter-escape" slot #f 46 8 46 24 ()}
        {Lisp-Entry "delimiter-start" slot #f 47 8 47 23 ()}
        {Lisp-Entry "delimiter-end" slot #f 48 8 48 21 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("delimiter-end~self" "delimiter-start~self" "delimiter-escape~self" "set!" "nextmethod" "delimiter-end" "delimiter-end:" "delimiter-start" "delimiter-start:" "delimiter-escape" "delimiter-escape:")}
        {Lisp-Entry "expand" method #f 58 18 58 24 ("process-variable" "format" "peek-char" "delimiter-start" "eqv?" "if" "eof-object?" "not" "when" "read-char" "c" "iterate" "let" "template-reader" "input" "with-closed" "printer" "printer:" "output" "associations" "template")}
        {Lisp-Entry "template-reader" method #f 71 11 71 26 ("get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "open-input-file" "open-input-string" "sequence?" "if" "template")}
        {Lisp-Entry "process-variable" method #f 77 11 77 27 ("error" "format" "cdr" "value" "if" "assv" "info" "read-variable" "name" "let" "printer" "associations" "output" "input")}
        {Lisp-Entry "read-variable" method #f 88 11 88 24 ("write-char" "else" "get-output-string" "string->symbol" "delimiter-end" "eqv?" "error" "eof-object?" "cond" "read-char" "c" "iterate" "open-output-string" "name-output" "let" "input")}}}})
"Timer"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Timer.jazz"} 1257476646
    {Lisp-Entry "jazz.library.utility.Timer" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Timer" class #f 43 7 43 12 ("Object")
        {Lisp-Entry "start" slot #f 46 8 46 13 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("reset" "nextmethod")}
        {Lisp-Entry "reset" method #f 54 18 54 23 ("reset-clock")}
        {Lisp-Entry "reset-clock" method #f 58 18 58 29 ("cpu-time" "start" "set!")}
        {Lisp-Entry "get-duration" method #f 62 18 62 30 ("reset-clock" "when" "start" "cpu-time" "-" "prog1" "reset?" "reset?:")}
        {Lisp-Entry "get-duration-in-seconds" method #f 68 18 68 41 ("get-duration")}
        {Lisp-Entry "report-duration" method #f 72 18 72 33 ("get-duration-in-seconds" "user-message")}}}})
"URL"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "moniker" "URL.jazz"} 1257476665
    {Lisp-Entry "jazz.library.moniker.URL" module #f 37 18 37 42 ("jazz")
      {Lisp-Entry "extract-url-name" definition #f 43 20 43 36 ("1" "+" "subseq" "null?" "if" "reversed?:" "find" "pos" "let" "url")}
      {Lisp-Entry "tokenise-url" definition #f 50 13 50 25 ("split" "filename")}
      {Lisp-Entry "URL-Class" class #f 54 7 54 16 ("Pathname" ":class")}
      {Lisp-Entry "URL" class #f 57 7 57 10 ("Pathname" "URL-Class")
        {Lisp-Entry "title" slot #f 60 8 60 13 ()}
        {Lisp-Entry "get-title" accessor #f 60 21 60 29 ()}
        {Lisp-Entry "initialize" method #f 63 20 63 30 ("title~self" "set!" "nextmethod" "title" "title:" "lst")}
        {Lisp-Entry "get-name" method #f 68 20 68 28 ("parse" "extract-url-name")}
        {Lisp-Entry "print" method #f 72 20 72 25 ("format" "lambda" "self" "print-unreadable" "nextmethod" "null?" "if" "get-title" "title" "let" "readably" "printer")}
        {Lisp-Entry "split" method #f 87 18 87 23 ("1" "+" "values" "null?" "find" "pos" "sub" "self" "error" "/=" "if" "7" "0" "subseq" "header" "parse" "url" "let*")}}}})
"Undoer"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Undoer.jazz"} 1257476665
    {Lisp-Entry "jazz.library.utility.Undoer" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Undoer" class #f 44 7 44 13 ("0" "initialize" "Object")
        {Lisp-Entry "client" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-client" accessor #f 47 45 47 53 ()}
        {Lisp-Entry "undo-list" slot #f 48 8 48 17 ()}
        {Lisp-Entry "get-undo-list" accessor #f 48 45 48 53 ()}
        {Lisp-Entry "redo-list" slot #f 49 8 49 17 ()}
        {Lisp-Entry "undoing?" slot #f 50 8 50 16 ()}
        {Lisp-Entry "redoing?" slot #f 51 8 51 16 ()}
        {Lisp-Entry "atomic?" slot #f 52 8 52 15 ()}
        {Lisp-Entry "atomic-actions" slot #f 53 8 53 22 ()}
        {Lisp-Entry "save-depth" slot #f 54 8 54 18 ()}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("client" "set!" "nextmethod" "clt")}
        {Lisp-Entry "reset-save-depth" method #f 67 18 67 34 ("0" "save-depth" "set!")}
        {Lisp-Entry "reset" method #f 71 18 71 23 ("atomic-actions" "atomic?" "redoing?" "undoing?" "redo-list" "undo-list" "set!")}
        {Lisp-Entry "register-undo" method #f 85 18 85 31 ("client" "get-controller" "set-modified?" "not" "0" "=" "and" "when" "redoing?" "unless" "increase!" "undo-list" "else" "save-depth" "decrease!" "redo-list" "undoing?" "cons" "atomic-actions" "set!" "atomic?" "cond" "action")}
        {Lisp-Entry "register-atomic-actions" method #f 100 11 100 34 ("play-action" "action" "for-each" "with-atomic-undo" "lambda" "register-undo" "not-null?" "when" "actions")}
        {Lisp-Entry "can-undo?" method #f 111 18 111 27 ("undo-list" "not-null?")}
        {Lisp-Entry "can-redo?" method #f 115 18 115 27 ("redo-list" "not-null?")}
        {Lisp-Entry "undo" method #f 119 18 119 22 ("cdr" "play-action" "set!" "begin" "unwind-protect" "car" "action" "undoing?" "old" "let" "undo-list" "not-null?" "when")}
        {Lisp-Entry "redo" method #f 131 18 131 22 ("cdr" "play-action" "set!" "begin" "unwind-protect" "car" "action" "redoing?" "old" "let" "redo-list" "not-null?" "when")}
        {Lisp-Entry "play-action" method #f 148 26 148 37 ("action")}
        {Lisp-Entry "with-atomic-undo" method #f 157 18 157 34 ("update-focus-actions" "get-application" "appl" "register-atomic-actions" "not" "and" "when" "actions" "atomic-actions" "set!" "begin" "unwind-protect" "completed?" "atomic?" "preserved" "let" "proc")}}}})
"Version"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "utility" "Version.jazz"} 1257476669
    {Lisp-Entry "jazz.library.utility.Version" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Version" class #f 43 7 43 14 ("Object")
        {Lisp-Entry "major" slot #f 46 8 46 13 ()}
        {Lisp-Entry "get-major" accessor #f 46 24 46 32 ()}
        {Lisp-Entry "minor" slot #f 47 8 47 13 ()}
        {Lisp-Entry "get-minor" accessor #f 47 24 47 32 ()}
        {Lisp-Entry "stage" slot #f 48 8 48 13 ()}
        {Lisp-Entry "get-stage" accessor #f 48 24 48 32 ()}
        {Lisp-Entry "revision" slot #f 49 8 49 16 ()}
        {Lisp-Entry "get-revision" accessor #f 49 24 49 32 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("stage~self" "revision~self" "minor~self" "major~self" "set!" "nextmethod" "stage" "0" "revision" "minor" "major")}
        {Lisp-Entry "compare-object" method #f 60 20 60 34 (":equal" "get-revision" "revision" "get-minor" "minor" "get-major" "major" "either" "else" ":greater" ">" ":less" "<" "cond" "y" "x" "lambda" "try" "let" ":incompatible" "Version" "is-not?" "if" "target")}
        {Lisp-Entry "print" method #f 74 20 74 25 ("stage" "0" "revision" "/=" "minor" "major" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "present" method #f 83 18 83 25 ("beta" "alpha" "case" "stage" "not" "0" "revision" "=" "if" "minor" "major" "format")}}}})
"Violations-Found"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "integrity" "Violations-Found.jazz"} 1257476679
    {Lisp-Entry "jazz.library.integrity.Violations-Found" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Violations-Found" class #f 40 20 40 36 ("Signal")
        {Lisp-Entry "design-file" slot #f 43 8 43 19 ()}
        {Lisp-Entry "get-design-file" accessor #f 43 28 43 36 ()}
        {Lisp-Entry "architecture" slot #f 44 8 44 20 ()}
        {Lisp-Entry "get-architecture" accessor #f 44 28 44 36 ()}
        {Lisp-Entry "violations" slot #f 45 8 45 18 ()}
        {Lisp-Entry "get-violations" accessor #f 45 28 45 36 ()}
        {Lisp-Entry "initialize" method #f 48 20 48 30 ("violations~self" "architecture~self" "design-file~self" "set!" "nextmethod" "violations" "architecture" "design-file")}
        {Lisp-Entry "forwardable?" method #f 60 11 60 23 ()}}}})
"Violations-Manager"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "integrity" "Violations-Manager.jazz"} 1257476679
    {Lisp-Entry "jazz.library.integrity.Violations-Manager" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Violations-Manager" class #f 47 20 47 38 ("337" "location" "toplevel-controls?:" "300" "width:" "title:" "violation" "results" "header" "content" "scroller" "name:" "initialize" "Navigable-Results")
        {Lisp-Entry "editor" slot #f 50 8 50 14 ()}
        {Lisp-Entry "external-name" method #f 64 25 64 38 ("violations-manager" "'violations-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 73 25 73 34 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 77 25 77 35 ()}
        {Lisp-Entry "client-activate" method #f 81 20 81 35 ("set-editor" "Canvas" "get-client" "is?" "and" "if" "get-editor-view" "essay" "editor" "current-document" "guest" "let*")}
        {Lisp-Entry "client-deactivate" method #f 89 20 89 37 ("set-editor")}
        {Lisp-Entry "get-client" method #f 98 26 98 36 ("get-client" "editor" "when")}
        {Lisp-Entry "get-editor" method #f 108 26 108 36 ("editor")}
        {Lisp-Entry "set-editor" method #f 112 26 112 36 ("update" "set!" "editor" "neq?" "when" "value")}
        {Lisp-Entry "update" method #f 122 18 122 24 ("get-violations" "add-violation" "for-each" "when" "remove-every-row" "lambda" "with-update-locked" "get-client" "client" "get-tree" "tree" "let")}
        {Lisp-Entry "add-violation" method #f 137 11 137 24 ("user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "get-image" "image" "present-location" "location" "present-message" "title" "get-tree" "tree" "let" "violation")}
        {Lisp-Entry "edit-selection" method #f 150 20 150 34 ("select-property" "self" "origin:" "list" "set-selection" "get-message" "user-message" "get-path" "follow-component" "component" "error" "find-component" "effective" "let" "/=" "or" "process-branch-changed" "set-active-branch" "null?" "if" "get-active-branch-name" "active" "get-client" "client" "get-editor" "editor" "get-property" "property" "get-branch-presentation" "branch-presentation" "get-branch" "branch-name" "get-row" "get-user-data" "violation" "when" "get-single-selection" "selection" "get-tree" "tree" "let*" "forward?")}}}})
"_automata"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "automata" "_automata.jazz"} 1257478269
    {Lisp-Entry "jazz.library.automata" module #f 55 18 55 39 ("jazz")
      {Lisp-Entry "Automata" class #f 63 7 63 15 ("Object")
        {Lisp-Entry "nb-vectored" slot #f 66 8 66 19 ()}
        {Lisp-Entry "get-nb-vectored" accessor #f 66 35 66 43 ()}
        {Lisp-Entry "set-nb-vectored" accessor #f 66 35 66 43 ()}
        {Lisp-Entry "nb-listed" slot #f 67 8 67 17 ()}
        {Lisp-Entry "get-nb-listed" accessor #f 67 35 67 43 ()}
        {Lisp-Entry "set-nb-listed" accessor #f 67 35 67 43 ()}
        {Lisp-Entry "nb-lettered" slot #f 68 8 68 19 ()}
        {Lisp-Entry "get-nb-lettered" accessor #f 68 35 68 43 ()}
        {Lisp-Entry "set-nb-lettered" accessor #f 68 35 68 43 ()}
        {Lisp-Entry "start" slot #f 69 8 69 13 ()}
        {Lisp-Entry "get-start" accessor #f 69 27 69 35 ()}
        {Lisp-Entry "initialize" method #f 72 20 72 30 ("start~self" "nb-lettered~self" "nb-listed~self" "0" "nb-vectored~self" "set!" "s")}
        {Lisp-Entry "run" method #f 79 18 79 21 ("transition" "when" "start" "state" "iter" "let" "proper-tail-calls" "declare" "tape")}}
      {Lisp-Entry "Tape" class #f 91 7 91 11 ("Object")
        {Lisp-Entry "found" slot #f 94 8 94 13 ()}
        {Lisp-Entry "initialize" method #f 97 20 97 30 ("new-queue" "found~self" "set!")}
        {Lisp-Entry "get-next" method #f 101 19 101 27 ()}
        {Lisp-Entry "save-start" method #f 105 19 105 29 ()}
        {Lisp-Entry "add-start" method #f 109 19 109 28 ("found")}
        {Lisp-Entry "add-found" method #f 113 11 113 20 ("found" "enqueue" "info")}
        {Lisp-Entry "get-found" method #f 117 11 117 20 ("found" "queue-list")}}
      {Lisp-Entry "StringTape" class #f 126 7 126 17 ("Tape")
        {Lisp-Entry "string" slot #f 129 8 129 14 ()}
        {Lisp-Entry "get-string" accessor #f 129 33 129 41 ()}
        {Lisp-Entry "limit" slot #f 130 8 130 13 ()}
        {Lisp-Entry "get-limit" accessor #f 130 33 130 41 ()}
        {Lisp-Entry "index" slot #f 131 8 131 13 ()}
        {Lisp-Entry "get-index" accessor #f 131 33 131 41 ()}
        {Lisp-Entry "start-index" slot #f 132 8 132 19 ()}
        {Lisp-Entry "get-start-index" accessor #f 132 36 132 44 ()}
        {Lisp-Entry "set-start-index" accessor #f 132 36 132 44 ()}
        {Lisp-Entry "initialize" method #f 135 20 135 30 ("start-index~self" "0" "index~self" "string-length" "limit~self" "string~self" "set!" "nextmethod" "s")}
        {Lisp-Entry "get-next" method #f 143 20 143 28 ("1" "+" "set!" "string" "element" "char->integer" "prog1" "limit" "index" "<" "if")}
        {Lisp-Entry "save-start" method #f 150 20 150 30 ("index" "start-index" "set!")}
        {Lisp-Entry "add-start" method #f 154 20 154 29 ("start-index" "list" "found")}}
      {Lisp-Entry "TextTape" class #f 163 7 163 15 ("Tape")
        {Lisp-Entry "paragraphs" slot #f 166 8 166 18 ()}
        {Lisp-Entry "get-paragraphs" accessor #f 166 35 166 43 ()}
        {Lisp-Entry "limit" slot #f 167 8 167 13 ()}
        {Lisp-Entry "get-limit" accessor #f 167 35 167 43 ()}
        {Lisp-Entry "row" slot #f 168 8 168 11 ()}
        {Lisp-Entry "get-row" accessor #f 168 35 168 43 ()}
        {Lisp-Entry "col" slot #f 169 8 169 11 ()}
        {Lisp-Entry "get-col" accessor #f 169 35 169 43 ()}
        {Lisp-Entry "scan" slot #f 170 8 170 12 ()}
        {Lisp-Entry "get-scan" accessor #f 170 35 170 43 ()}
        {Lisp-Entry "start-row" slot #f 171 8 171 17 ()}
        {Lisp-Entry "get-start-row" accessor #f 171 38 171 46 ()}
        {Lisp-Entry "set-start-row" accessor #f 171 38 171 46 ()}
        {Lisp-Entry "start-col" slot #f 172 8 172 17 ()}
        {Lisp-Entry "get-start-col" accessor #f 172 38 172 46 ()}
        {Lisp-Entry "set-start-col" accessor #f 172 38 172 46 ()}
        {Lisp-Entry "initialize" method #f 175 20 175 30 ("start-col~self" "0" "start-row~self" "row" "paragraphs" "element" "get-string" "scan~self" "col~self" "row~self" "limit~self" "paragraphs~self" "set!" "nextmethod" "c" "r" "l" "p")}
        {Lisp-Entry "get-next" method #f 186 20 186 28 ("prog1" "char->integer" "paragraphs" "element" "get-string" "0" "1" "+" "set!" "begin" "limit" "row" "<" "scan" "cardinality" "col" "=" "if")}
        {Lisp-Entry "save-start" method #f 199 20 199 30 ("col" "start-col" "row" "start-row" "set!")}
        {Lisp-Entry "add-start" method #f 204 20 204 29 ("start-col" "start-row" "list" "found")}}
      {Lisp-Entry "Transitions" class #f 213 7 213 18 ("Object")
        {Lisp-Entry "add-transition" method #f 216 26 216 40 ("state" "i")}
        {Lisp-Entry "follow" method #f 217 26 217 32 ("i")}}
      {Lisp-Entry "NbAscii" definition #f 225 12 225 19 ("256")}
      {Lisp-Entry "EOFTransition" definition #f 226 12 226 25 ("NbAscii")}
      {Lisp-Entry "NotAsciiTransition" definition #f 227 12 227 30 ("1" "NbAscii" "+")}
      {Lisp-Entry "NbTransitions" definition #f 228 12 228 25 ("2" "NbAscii" "+")}
      {Lisp-Entry "VectoredTransitions" class #f 231 7 231 26 ("Transitions")
        {Lisp-Entry "vector" slot #f 234 8 234 14 ()}
        {Lisp-Entry "get-vector" accessor #f 234 22 234 30 ()}
        {Lisp-Entry "initialize" method #f 237 20 237 30 ("NbTransitions" "make-vector" "vector" "set!" "rest")}
        {Lisp-Entry "add-transition" method #f 241 20 241 34 ("NotAsciiTransition" "NbAscii" ">" "if" "vector" "set-element!" "state" "i")}
        {Lisp-Entry "follow" method #f 245 20 245 26 ("NotAsciiTransition" "NbAscii" ">" "if" "vector" "element" "i")}}
      {Lisp-Entry "State" class #f 254 7 254 12 ("Object")
        {Lisp-Entry "name" slot #f 257 8 257 12 ()}
        {Lisp-Entry "get-name" accessor #f 257 27 257 35 ()}
        {Lisp-Entry "transitions" slot #f 258 8 258 19 ()}
        {Lisp-Entry "get-transitions" accessor #f 258 27 258 35 ()}
        {Lisp-Entry "initialize" method #f 261 20 261 30 ("transitions" "name" "set!" "t" "n")}
        {Lisp-Entry "print" method #f 266 20 266 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "add-transition" method #f 272 18 272 32 ("transitions" "add-transition" "state" "i")}
        {Lisp-Entry "transition" method #f 276 26 276 36 ("EOFTransition" "action" "follow" "if" "get-next" "i" "let" "tape")}
        {Lisp-Entry "follow" method #f 284 18 284 24 ("transitions" "follow" "i")}
        {Lisp-Entry "action" method #f 288 26 288 32 ("tape")}}
      {Lisp-Entry "StartState" class #f 296 7 296 17 ("State")
        {Lisp-Entry "initialize" method #f 299 20 299 30 ("nextmethod" "t")}
        {Lisp-Entry "print" method #f 303 20 303 25 ("lambda" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "transition" method #f 309 20 309 30 ("nextmethod" "save-start" "tape")}}
      {Lisp-Entry "FoundState" class #f 319 7 319 17 ("State")
        {Lisp-Entry "found" slot #f 322 8 322 13 ()}
        {Lisp-Entry "get-found" accessor #f 322 26 322 34 ()}
        {Lisp-Entry "next-state" slot #f 323 8 323 18 ()}
        {Lisp-Entry "get-next-state" accessor #f 323 26 323 34 ()}
        {Lisp-Entry "initialize" method #f 326 20 326 30 ("nextmethod" "next-state" "found" "set!" "ns" "f")}
        {Lisp-Entry "print" method #f 332 20 332 25 ("lambda" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "transition" method #f 338 20 338 30 ("next-state" "action" "tape")}
        {Lisp-Entry "action" method #f 343 20 343 26 ("found" "add-start" "add-found" "tape")}}
      {Lisp-Entry "build-search-automata" definition #f 352 20 352 41 ("process-target" "target" "lambda" "for-each" "add-constituency-transitions" "2" "get-nb-vectored" "+" "set-nb-vectored" "Automata" "automata" "State" "skip" "VectoredTransitions" "StartState" "new" "start" "let*" "constituent-test" "ignore-case" "whole-words" "targets")}
      {Lisp-Entry "add-constituency-transitions" definition #f 365 13 365 41 ("EOFTransition" "is-constituent" "if" "add-transition" "NbAscii" "below" "0" "from" "i" "for" "loop" "constituent-test" "eof" "not-c" "c" "state")}
      {Lisp-Entry "process-target" definition #f 373 13 373 27 ("EOFTransition" "NbAscii" "below" "0" "from" "for" "loop" "FoundState" "else" "add-transition" "add-constituency-transitions" "1" "get-nb-vectored" "+" "set-nb-vectored" "VectoredTransitions" "State" "new" "not" "is-constituent" "when" "set!" "neq?" "and" "cond" "follow" "new-state" "downcase" "upcase" "lower-case?" "if" "iinv" "char->integer" "i" "c" "lambda" "iterate" "car" "string" "state" "let" "constituent-test" "ignore-case" "whole-words" "skip" "start" "automata" "target")}
      {Lisp-Entry "is-constituent" definition #f 406 13 406 27 ("integer->char" "i" "constituent-test")}
      {Lisp-Entry "automata-search" definition #f 415 20 415 35 ("get-found" "run" "tape" "automata")}}})
"_component"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "component" "_component.jazz"} 1257476702
    {Lisp-Entry "jazz.library.component" module #f 37 8 37 30 ("jazz")
      {Lisp-Entry "open-form" definition #f 49 20 49 29 ("multiple-selection?:" "choose-file" "read-from-file")}
      {Lisp-Entry "read-from-file" definition #f 53 20 53 34 ("set-origin" "jml->form" "set!" "eof-object?" "if" "read" "form" "let" "reader" "lambda" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "UTF" "'UTF" "char-encoding:" "parse" "path:" "list" "call-with-input-file" "file")}
      {Lisp-Entry "safe-read-from-file" definition #f 64 20 64 39 ("read-from-file" "wrap-exception" "exc" "error?" "datum-parsing-exception?" "either" "obj" "lambda" "call-with-catch" "file")}
      {Lisp-Entry "determine-unique-paster" definition #f 80 20 80 43 ("car" "parent" "=" "when" "get-parent" "component" "lambda" "map" "remove-duplicates" "parents" "let" "else" "first" "determine-paster" "1" "0" "length" "case" "components")}}})
"_exemplar"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "exemplar" "_exemplar.jazz"} 1257476709
    {Lisp-Entry "jazz.library.exemplar" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "exemplar=?" specialize #f 44 22 44 32 ()}
      {Lisp-Entry "=" specialize #f 44 34 44 35 ("get-base" "eq?" "node=?" "and" "e2" "e1")}
      {Lisp-Entry "Exemplar" class #f 54 7 54 15 ("Node")
        {Lisp-Entry "domain" slot #f 57 18 57 24 ()}
        {Lisp-Entry "base" slot #f 58 18 58 22 ()}
        {Lisp-Entry "ascendant" slot #f 59 18 59 27 ()}
        {Lisp-Entry "inited?" slot #f 60 18 60 25 ()}
        {Lisp-Entry "get-inited?" accessor #f 60 40 60 48 ()}
        {Lisp-Entry "set-inited?" accessor #f 60 40 60 48 ()}
        {Lisp-Entry "persistent?" slot #f 61 18 61 29 ()}
        {Lisp-Entry "get-persistent?" accessor #f 61 40 61 48 ()}
        {Lisp-Entry "set-persistent?" accessor #f 61 40 61 48 ()}
        {Lisp-Entry "initialize" method #f 64 20 64 30 ("install" "when" "persistent?~self" "inited?~self" "ascendant~self" "base~self" "domain~self" "set!" "nextmethod" "apply" "others" "base" "domain" "bind-keywords" "rest")}
        {Lisp-Entry "copy-object" method #f 76 20 76 31 ("base" "set-base-value" "domain" "set-domain-value" "nextmethod" "exemplar" "let" "deep?")}
        {Lisp-Entry "compare-object" method #f 83 20 83 34 (":not-equal" "else" "get-base" "base" ":equal" "nextmethod" "=" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-exemplar" method #f 93 11 93 24 ("owned-properties" "base" ",base" "',base" "base:" "name" ",name" "',name" "name:" ",class-name" "new" "class-name")}
        {Lisp-Entry "print" method #f 100 20 100 25 ("owned-properties" "base" "base:" "name" "name:" "list" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "install" method #f 114 11 114 18 ("init")}
        {Lisp-Entry "init" method #f 118 11 118 15 ("setup-inherited" "domain" "locate" "ascendant" "set!" "base" "not" "if" "inited?" "unless")}
        {Lisp-Entry "setup-inherited" method #f 127 11 127 26 ("node-properties" "ascendant" "get-value" "set-value" "owned" "memq?" "unless" "property" "lambda" "for-each")}
        {Lisp-Entry "inherits?" method #f 134 18 134 27 ("continuation-return" "get-name" "when" "ascendant" "for-each-ascendant" "return" "lambda" "continuation-capture" "name" "eq?" "if" "target")}
        {Lisp-Entry "has-ascendant?" method #f 146 18 146 32 ("self" "domain" "has-ascendant?" "base")}
        {Lisp-Entry "for-each-ascendant" method #f 150 18 150 36 ("for-each-ascendant" "ascendant" "when" "proc")}
        {Lisp-Entry "extend" method #f 156 18 156 24 ("install" "else" "set-inited?" "owned" "copy" "set-owned" "copy-properties" "base" "set-base-value" "name" "not" "cond" "set-domain-value" "self" "class-of" "new" "exemplar" "let" "domain" "domain:")}
        {Lisp-Entry "copy-properties" method #f 170 11 170 26 ("node-properties" "get-value" "set-value" "property" "lambda" "for-each" "exemplar")}
        {Lisp-Entry "update" method #f 181 21 181 27 ("update-descendants" "named?" "when" "init" "reset")}
        {Lisp-Entry "update-descendants" method #f 188 11 188 29 ("self" "update-descendants" "domain" "when")}
        {Lisp-Entry "modify-from" method #f 198 18 198 29 ("update" "get-persistent?" "persistent?" "get-owned" "copy" "owned" "node-properties" "get-value" "set-value" "property" "lambda" "for-each" "get-base" "base" "get-name" "name" "set!" "self" "eq?" "unless" "from")}
        {Lisp-Entry "reset" method #f 215 11 215 16 ("set!" "node-properties" "reset-property" "for-each" "inited?" "when")}
        {Lisp-Entry "reset-property" method #f 222 11 222 25 ("set-value" "owned" "memq?" "unless" "property")}
        {Lisp-Entry "set-domain-value" method #f 232 25 232 41 ("domain" "set!" "d")}
        {Lisp-Entry "get-domain" method #f 236 18 236 28 ("domain")}
        {Lisp-Entry "set-domain" method #f 240 18 240 28 ("install" "domain" "set!" "d")}
        {Lisp-Entry "register" method #f 245 18 245 26 ("self" "domain" "add")}
        {Lisp-Entry "set-base-value" method #f 254 25 254 39 ("base" "set!" "b")}
        {Lisp-Entry "get-base" method #f 258 18 258 26 ("base")}
        {Lisp-Entry "set-base" method #f 262 18 262 26 ("update" "base" "set!" "b")}}
      {Lisp-Entry "Exemplar-Domain" class #f 280 20 280 35 ("0" "Axis" "new" "initialize" "Object")
        {Lisp-Entry "content" slot #f 283 18 283 25 ()}
        {Lisp-Entry "get-content" method #f 291 18 291 29 ("content")}
        {Lisp-Entry "set-content" method #f 295 18 295 29 ("Axis" "coerce" "content" "set!" "value")}
        {Lisp-Entry "empty-content" method #f 299 18 299 31 ("named?" "not" "and" "exemplar" "lambda" "collect-if" "content" "set!" "remove-named?" "remove-named?:")}
        {Lisp-Entry "add" method #f 310 18 310 21 ("content" "axis-add" "exemplar")}
        {Lisp-Entry "reference" method #f 314 18 314 27 ("locate" "content" "element" "integer?" "if" "rank/name")}
        {Lisp-Entry "locate" method #f 320 18 320 24 ("error" "when" "get-name" "exemplar" "lambda" "key:" "content" "find-in" "either" "error?" "error?:" "name")}
        {Lisp-Entry "similar" method #f 327 18 327 25 ("exemplar=?" "test:" "content" "find-in" "self" "set-domain" "get-domain" "not" "when" "exemplar")}
        {Lisp-Entry "get-rank" method #f 334 18 334 26 ("content" "find" "exemplar")}
        {Lisp-Entry "has-ascendant?" method #f 343 18 343 32 ("continuation-return" "eq?" "when" "ascendant" "for-each-ascendant" "return" "lambda" "continuation-capture" "base" "exemplar")}
        {Lisp-Entry "update-descendants" method #f 358 21 358 39 ("content" "update" "has-ascendant?" "when" "exemplar" "lambda" "for-each" "base")}
        {Lisp-Entry "collect-persistent" method #f 370 18 370 36 ("content" "get-persistent?" "exemplar" "lambda" "collect-if")}}}})
"_library"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "_library.jazz"} 1257478471
    {Lisp-Entry "jazz.library" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "find-process" definition #f 51 20 51 32 ("get-process" "'get-process" "jazz.system" "'jazz.system" "module-ref")}
      {Lisp-Entry "find-application" definition #f 55 20 55 36 ("get-application" "'get-application" "jazz.system" "'jazz.system" "module-ref")}
      {Lisp-Entry "resource?" definition #f 64 27 64 36 ("Resource" "is?" "object")}
      {Lisp-Entry "with-execution-context" definition #f 73 33 73 55 ("Execution-Context" "new" "context" "with-closed" "reporter" "reporter:" "details" "details:" "title" "title:" "proc")}
      {Lisp-Entry "with-execution-node" definition #f 81 33 81 52 ("Execution-Node" "new" "node" "with-closed" "reporter" "reporter:" "details" "details:" "title" "title:" "proc")}
      {Lisp-Entry "get-execution-context" definition #f 89 33 89 54 ("get-active-context" "current-thread" "thread" "let" "get-execution-context" "'get-execution-context" "unimplemented")}
      {Lisp-Entry "get-execution-stack" definition #f 96 33 96 52 ("get-previous-node" "Execution-Context" "is-not?" "essay" "cons" "set!" "while" "lst" "get-active-node" "node" "current-thread" "thread" "let*" "get-execution-stack" "'get-execution-stack" "unimplemented")}
      {Lisp-Entry "Execution-Node" class #f 108 7 108 21 ("Object")
        {Lisp-Entry "title" slot #f 111 8 111 13 ()}
        {Lisp-Entry "details" slot #f 112 8 112 15 ()}
        {Lisp-Entry "reporter" slot #f 113 8 113 16 ()}
        {Lisp-Entry "previous-node" slot #f 114 8 114 21 ()}
        {Lisp-Entry "initialize" definition #f 117 15 117 25 ("destroy-mandatory" "self" "set-active-node" "get-active-node" "previous-node~self" "current-thread" "thread" "let" "reporter~self" "details~self" "title~self" "set!" "nextmethod" "reporter" "reporter:" "details" "details:" "title" "title:")}
        {Lisp-Entry "destroy" definition #f 128 15 128 22 ("nextmethod" "previous-node" "set-active-node" "current-thread" "thread" "let")}
        {Lisp-Entry "get-title" definition #f 134 22 134 31 ("title")}
        {Lisp-Entry "get-details" definition #f 138 22 138 33 ("details")}
        {Lisp-Entry "get-reporter" definition #f 142 22 142 34 ("reporter")}}
      {Lisp-Entry "Execution-Context" class #f 146 7 146 24 ("initialize" "Execution-Node")
        {Lisp-Entry "previous-context" slot #f 149 8 149 24 ()}
        {Lisp-Entry "continuable?" slot #f 150 8 150 20 ()}
        {Lisp-Entry "auto-continue?" slot #f 151 8 151 22 ()}
        {Lisp-Entry "initialize" definition #f 154 15 154 25 ("destroy-mandatory" "self" "set-active-context" "get-active-context" "previous-context~self" "set!" "current-thread" "thread" "let" "nextmethod" "apply" "rest")}
        {Lisp-Entry "destroy" definition #f 162 15 162 22 ("nextmethod" "previous-context" "set-active-context" "current-thread" "thread" "let")}
        {Lisp-Entry "get-continuable?" definition #f 168 22 168 38 ("continuable?")}
        {Lisp-Entry "set-continuable?" definition #f 172 22 172 38 ("continuable?" "set!" "value")}
        {Lisp-Entry "get-auto-continue?" definition #f 176 22 176 40 ("auto-continue?")}
        {Lisp-Entry "set-auto-continue?" definition #f 180 22 180 40 ("auto-continue?" "set!" "value")}}
      {Lisp-Entry "with-continue" definition #f 190 20 190 33 ("Continue" "catch" "set-continuable?" "begin" "unwind-protect" "get-continuable?" "preserved" "error" "not" "if" "get-execution-context" "context" "let" "with-continue" "'with-continue" "unimplemented" "proc")}
      {Lisp-Entry "continuable?" definition #f 206 20 206 32 ("get-continuable?" "and" "get-execution-context" "context" "let" "continuable?" "'continuable?" "unimplemented" "exception")}
      {Lisp-Entry "continue-exception" definition #f 214 20 214 38 ("Continue" "new" "throw" "continue" "'continue" "unimplemented" "exception")}
      {Lisp-Entry "Restartable?" definition #f 226 19 226 31 ()}
      {Lisp-Entry "with-restart" definition #f 231 20 231 32 ("when" "return" "Restart" "catch" "while" "set!" "begin" "unwind-protect" "Restartable?" "preserved" "let" "with-restart" "'with-restart" "unimplemented" "cleanup" "proc")}
      {Lisp-Entry "restartable?" definition #f 248 20 248 32 ("Restartable?" "exception")}
      {Lisp-Entry "restart" definition #f 253 20 253 27 ("Restart" "new" "throw" "restart" "'restart" "unimplemented" "exception")}
      {Lisp-Entry "different-times?" definition #f 264 20 264 36 ("time->seconds" "-" "abs" ">" "2" "tolerance" "tolerance:" "time2" "time1")}
      {Lisp-Entry "different-file-content?" definition #f 269 20 269 43 ("else" "eqv?" "eof-object?" "cond" "u2" "read-u8" "u1" "iterate" "let" "get-size" "/=" "or" "input2" "input1" "lambda" "parse" "call-with-input-file" "ci=?" "test:" "Text-Extensions" "get-extension" "member?" "and" "if" "char-encoding-errors:" "load-lines" "equal?" "not" "different-text-file-content?" "define" "file2" "file1")}
      {Lisp-Entry "different-file-content-no-whitespace?" definition #f 296 20 296 57 ("read-content-string" "wi=" "not" "input2" "input1" "lambda" "char-encoding-errors:" "UTF" "'UTF" "char-encoding:" "parse" "path:" "list" "call-with-input-file" "file2" "file1")}
      {Lisp-Entry "Class-Descriptors" definition #f 316 12 316 29 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-descriptor" definition #f 320 33 320 47 ("table-set!" "set-name" "instantiate" "Form" "is?" "if" "descriptor" "when" "get-class-descriptor" "form" "Class-Descriptors" "table-ref" "either" "type-name" "name" "let" "model")}
      {Lisp-Entry "get-properties-descriptor" definition #f 331 33 331 58 ("properties" "'properties" "find-component" "when" "get-descriptor" "class-descriptor" "let" "model")}
      {Lisp-Entry "get-property-descriptor" definition #f 337 33 337 56 ("find-component" "when" "get-properties-descriptor" "properties-descriptor" "let" "name" "model")}
      {Lisp-Entry "display-tabulated" definition #f 348 33 348 50 ("print-to" "newline" "->string" "output" "column" "object" "row" "lambda" "for-each" "add-columns" "left" "'left" "alignment:" "border-after:" "Aligned-Column" "Display-Column" "=" "if" "collect" "0" "from" "n" "in" "ignore" "for" "loop" "columns" "1" "length" "-" "last" "car" "sample" "Columns-Display" "new" "display" "let*" "display-tabulated" "'display-tabulated" "unimplemented" "printer" "data")}}})
"_listener"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "listener" "_listener.jazz"} 1257476721
    {Lisp-Entry "jazz.library.listener" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "add-listener" definition #f 43 20 43 32 ("cons" "lst" "listener")}
      {Lisp-Entry "remove-listener" definition #f 47 20 47 35 ("listener-target?" "test:" "remove!" "Handler" "is?" "if" "lst" "listener")}
      {Lisp-Entry "listener?" definition #f 53 20 53 29 ("listener-target?" "test:" "member?" "lst" "object")}
      {Lisp-Entry "listener-target?" definition #f 57 13 57 29 ("get-target" "eq?" "listener" "object")}}})
"_node"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "node" "_node.jazz"} 1257476725
    {Lisp-Entry "jazz.library.node" module #f 37 8 37 25 ("jazz")
      {Lisp-Entry "Node" class #f 45 7 45 11 ("Object")
        {Lisp-Entry "name" slot #f 48 18 48 22 ()}
        {Lisp-Entry "get-name" accessor #f 48 34 48 42 ()}
        {Lisp-Entry "set-name" accessor #f 48 34 48 42 ()}
        {Lisp-Entry "owned" slot #f 49 18 49 23 ()}
        {Lisp-Entry "get-owned" accessor #f 49 34 49 42 ()}
        {Lisp-Entry "set-owned" accessor #f 49 34 49 42 ()}
        {Lisp-Entry "node-properties" method #f 52 29 52 44 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("set-property" "for-each-property" "owned~self" "name~self" "set!" "nextmethod" "others" "name" "bind-keywords" "rest")}
        {Lisp-Entry "copy-object" method #f 64 20 64 31 ("owned" "copy" "set-owned" "node-properties" "get-value" "set-value" "property" "lambda" "for-each" "name" "set-name" "self" "class-of" "new" "element" "let" "deep?")}
        {Lisp-Entry "compare-object" method #f 74 20 74 34 (":not-equal" "else" ":equal" "node-properties" "get-value" "property" "lambda" "every?" "get-name" "name" "=" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 86 20 86 25 ("owned-properties" "name" "name:" "list" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "owned-properties" method #f 94 18 94 34 ("get-output" "node-properties" "get-value" "put" "owned" "memq?" "when" "property" "lambda" "for-each" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "named?" method #f 109 18 109 24 ("name")}
        {Lisp-Entry "supports?" method #f 118 18 118 27 ("node-properties" "memq?" "property")}
        {Lisp-Entry "set-property" method #f 122 18 122 30 ("cons" "set!" "owned" "memq?" "unless" "set-value" "value" "property")}
        {Lisp-Entry "get-properties" method #f 128 18 128 32 ("node-properties")}
        {Lisp-Entry "get-value" method #f 137 26 137 35 ("error" "property")}
        {Lisp-Entry "set-value" method #f 141 26 141 35 ("error" "value" "property")}}
      {Lisp-Entry "node=?" specialize #f 145 22 145 28 ()}
      {Lisp-Entry "=" specialize #f 145 30 145 31 ("node-properties" "get-value" "equal?" "property" "lambda" "every?" "get-name" "eq?" "and" "n2" "n1")}}})
"_runtime"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "runtime" "_runtime.jazz"} 1257476729
    {Lisp-Entry "jazz.runtime" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "find-category-source" definition #f 43 20 43 40 ("find-unit-source" "butlast" "compose-name" "apply" "unit-name" "split-identifier" "path" "type-name" "name" "let" "category")}
      {Lisp-Entry "find-unit-source" definition #f 51 20 51 36 ("resource-pathname" "tokenise-filename" "File" "new" "anchorize" "not" "if" "find-unit-src" "src" "let" "unit-name")}
      {Lisp-Entry "repository-units" definition #f 58 20 58 36 ("symbol->string" "key:" "table-keys" "string<?" "sort" "package-products" "table-set!" "else" "package-name" "duplicate" "'duplicate" "debug" "cond" "table-ref" "actual-package" "phase" "declaration" "unit-name" "for-each-subunit" "updated-name" "updated-names" "when" "cdr" "update" "'update" "assq" "pair" "product" "for-each" "package" "lambda" "iterate-packages" "eq?" "test:" "make-table" "table" "let" "core.unit.builder" "'core.unit.builder" "load-unit" "repository")}
      {Lisp-Entry "iterate-packages" definition #f 78 20 78 36 ("repository-packages" "for-each" "proc" "repository")}
      {Lisp-Entry "iterate-units" definition #f 82 20 82 33 ("repository-units" "increase!" "when" "unit-name" "repository-binary?" "unless" "repository" "lambda" "for-each" "get-repositories" "either" "0" "count" "let" "feedback" "feedback:" "repositories" "repositories:" "proc")}
      {Lisp-Entry "outline-all" definition #f 96 20 96 31 ("outline-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "walk-all" definition #f 100 20 100 28 ("walk-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "expand-all" definition #f 104 20 104 30 ("expand-unit" "iterate-units" "feedback" "feedback:")}
      {Lisp-Entry "load-all" definition #f 108 20 108 28 ("load-unit" "iterate-units" "feedback" "feedback:")}}})
"_template"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "template" "_template.jazz"} 1257476731
    {Lisp-Entry "jazz.library.template" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "name-delimiter-start" definition #f 44 12 44 32 ()}
      {Lisp-Entry "name-delimiter-end" definition #f 47 12 47 30 ()}
      {Lisp-Entry "content-delimiter-start" definition #f 50 12 50 35 ()}
      {Lisp-Entry "content-delimiter-end" definition #f 53 12 53 33 ()}
      {Lisp-Entry "copy-template" definition #f 57 20 57 33 ("file?" "copy-pathname" "recursive?:" "directories?:" "files?:" "full?:" "new-directory" "directory" "new-file" "file" "case" "car" "kind" "path" "iterate-directory" "create-directories" "touch-files?:" "root?" "copy-directory" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "ci=?" "test:" "member?" "exists?" "unless" "copy-file" "get-name" "new-brother" "pathname" "expand-pathname" "get-output-string" "format" "continuation-return" "list?" "if" "value" "printer:" "expand" "open-output-string" "output" "return" "lambda" "continuation-capture" "name" "expand-name" "define" "content-delimiter-end" "content-delimiter-start" "content-expander" "name-delimiter-end" "delimiter-end:" "name-delimiter-start" "delimiter-start:" "Template-Expander" "new" "name-expander" "let" "non-expanded-leaves" "non-expanded-leaves:" "non-expanded-nodes" "non-expanded-nodes:" "associations" "destination" "template")}}})
"_tie"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "tie" "_tie.jazz"} 1257476732
    {Lisp-Entry "jazz.tie" module #f 37 8 37 16 ("jazz")}})
"autoload"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "autoload.jazz"} 1257476751
    {Lisp-Entry "jazz.library.autoload" module #f 37 18 37 39 ("jazz")}})
"geometry"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "geometry.jazz"} 1257476778
    {Lisp-Entry "jazz.geometry" module #f 37 8 37 21 ("jazz")
      {Lisp-Entry "size-rect" definition #f 45 20 45 29 ("get-height" "get-width" "0" "Rect" "new" "size")}
      {Lisp-Entry "position/size->rect" definition #f 49 20 49 39 ("get-v" "get-h" "h/v/size->rect" "size" "position")}
      {Lisp-Entry "h/v/size->rect" definition #f 53 20 53 34 ("get-height" "get-width" "+" "Rect" "new" "size" "v" "h")}
      {Lisp-Entry "h/v/width/height" definition #f 57 20 57 36 ("+" "Rect" "new" "height" "width" "v" "h")}
      {Lisp-Entry "corners->rect" definition #f 61 20 61 33 ("get-v" "get-h" "Rect" "new" "bottom-right" "top-left")}
      {Lisp-Entry "normalize-rect" definition #f 65 20 65 34 ("<=" "if" "Rect" "new" "get-bottom" "b" "get-right" "r" "get-top" "t" "get-left" "l" "let" "rect")}
      {Lisp-Entry "rect-position" definition #f 77 20 77 33 ("get-top" "get-left" "Point" "new" "rect")}
      {Lisp-Entry "rect-size" definition #f 81 20 81 29 ("rect-height" "rect-width" "Dimension" "new" "rect")}
      {Lisp-Entry "rect-width" definition #f 87 20 87 30 ("get-left" "get-right" "-" "rect")}
      {Lisp-Entry "rect-height" definition #f 91 20 91 31 ("get-top" "get-bottom" "-" "rect")}
      {Lisp-Entry "offset-rect" definition #f 95 20 95 31 ("get-bottom" "get-right" "get-top" "get-left" "+" "Rect" "new" "v" "h" "rect")}
      {Lisp-Entry "inflate-rect" definition #f 103 20 103 32 ("get-bottom" "get-right" "+" "get-top" "get-left" "-" "Rect" "new" "h" "w" "rect")}
      {Lisp-Entry "inflate-rect" specialize #f 111 13 111 25 ("get-bottom" "get-right" "+" "get-top" "get-left" "-" "Rect" "new" "h" "w" "rect")}
      {Lisp-Entry "expand-rect" definition #f 119 20 119 31 ("get-bottom" "get-right" "get-top" "get-left" "+" "Rect" "new" "b" "r" "t" "l" "rect")}
      {Lisp-Entry "base-rect" definition #f 127 20 127 29 ("get-top" "get-left" "-" "offset-rect" "rect")}
      {Lisp-Entry "fit-rects" definition #f 131 20 131 29 (">" "if" "both" "height" "width" "case" "rh" "/" "rw" "sh" "sw" "rect-height" "dh" "rect-width" "dw" "let*" "mode" "dst" "src")}
      {Lisp-Entry "fit-within" definition #f 144 20 144 30 ("values" "get-v" "get-h" "between" "new-position" "max-position" "Point" "min-position" "new" "new-size" "get-height" "height" "-" "min" "get-width" "max" "width" "rect-position" "position" "rect-size" "size" "let*" "padding" "padding:" "0" "Dimension" "minimum-size" "minimum-size:" "rect" "outer")}
      {Lisp-Entry "rect-union" definition #f 156 20 156 30 ("get-bottom" "get-right" ">" "get-top" "get-left" "<" "if" "Rect" "new" "y" "x")}
      {Lisp-Entry "rect-intersection" definition #f 164 20 164 37 ("0" "get-bottom" "get-right" "<" "get-top" "get-left" ">" "Rect" "new" "rect-intersect?" "if" "y" "x")}
      {Lisp-Entry "rect-intersect?" definition #f 174 20 174 35 (">" "get-bottom" "get-top" "get-right" "get-left" "<" "and" "y" "x")}
      {Lisp-Entry "rects-intersect?" definition #f 181 20 181 36 ("get-bottom" "get-right" ">" "get-height" "get-v" "get-top" "get-width" "get-h" "+" "get-left" "<" "and" "size" "position" "rect")}
      {Lisp-Entry "in-rect?" definition #f 188 20 188 28 ("get-bottom" "get-right" "<" "get-top" "get-v" "get-left" "get-h" ">=" "and" "rect" "pt")}
      {Lisp-Entry "rect-in-rect?" definition #f 195 20 195 33 ("get-bottom" "get-right" "<=" "get-top" "get-left" ">=" "and" "rect" "r")}
      {Lisp-Entry "in-size?" definition #f 202 20 202 28 ("get-height" "get-width" "<" "get-v" "0" "get-h" ">=" "and" "size" "pt")}
      {Lisp-Entry "add-rects" definition #f 209 20 209 29 ("get-bottom" "get-right" "get-top" "get-left" "+" "Rect" "new" "r2" "r1")}
      {Lisp-Entry "subtract-rects" definition #f 217 20 217 34 ("get-bottom" "get-right" "get-top" "get-left" "-" "Rect" "new" "r2" "r1")}
      {Lisp-Entry "inverse-rect" definition #f 225 20 225 32 ("get-right" "get-bottom" "get-left" "get-top" "Rect" "new" "rect")}
      {Lisp-Entry "positive-rect?" definition #f 233 20 233 34 ("get-right" "get-bottom" "get-left" "0" "get-top" ">=" "and" "rect")}
      {Lisp-Entry "center" definition #f 240 20 240 26 ("center" "'center" "justify" "outer" "inner")}
      {Lisp-Entry "justify" definition #f 244 20 244 27 ("class-of" "type-name" "number?" "second" "get-height" "first" "pair?" "get-width" "Point" "new" "Dimension" "is?" "and" "cond" "error" "else" "tail" "2" "-" "quotient" "center" "head" "case" "+" "0" ">=" "integer?" "if" "j" "o" "i" "lambda" "proc" "let" "justification" "outer" "inner")}
      {Lisp-Entry "cycle-naturals" definition #f 268 20 268 34 ("get-output" "+" "put" "by" "m" "do" "below" "0" "from" "n" "for" "loop" "quotient" "inc" "*" "cardinality" "List-Factory" "new" "fact" "let*" "subcycle" "cycle")}
      {Lisp-Entry "fit" definition #f 278 20 278 23 ("else" "-" ">=" "and" "+" "<=" "0" ">" "cond" "padding" "max" "size" "alternate" "pos")}
      {Lisp-Entry "fit-point" definition #f 287 20 287 29 ("get-height" "get-v" "get-width" "essay" "get-h" "fit" "Point" "new" "padding" "max" "size" "alternate" "pos")}
      {Lisp-Entry "scalar-product" definition #f 293 20 293 34 ("get-v" "get-h" "*" "+" "b" "a")}
      {Lisp-Entry "line-distance" definition #f 297 20 297 33 ("Point" "new" "scalar-product" "/" "abs" "0" "=" "if" "get-v" "get-h" "-" "sqr" "+" "sqrt" "divider" "let" "end" "start" "point")}
      {Lisp-Entry "resize-parts" definition #f 318 21 318 33 ("naturals" "1" "<=" "between?" "or" "n" "lambda" "map" "end2" "-1" "end" "start" "parity" "modulo" "+" "extra" "-" "quotient" "base" "0" "<" "if" "offset" "let*" "count" "delta" "size")}
      {Lisp-Entry "scale" definition #f 331 20 331 25 ("Number" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "Rect" "get-height" "height" "get-width" "width" "Dimension" "*" "fxround" "new" "get-v" "v" "get-h" "h" "Point" "typecase" "exact->inexact" "let" "sc" "shape")}
      {Lisp-Entry "get-area" definition #f 360 20 360 28 ("get-height" "get-width" "*" "size")}}})
"install"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "install.scm"} 1257473850
    {Lisp-Entry "jazz.library.install" unit #f 37 6 37 26 ()
      {Lisp-Entry "Box" define ("literal") 40 21 40 24 ("jazz.library.literals.construct-box")}
      {Lisp-Entry "Directory-Group" define ("literal") 41 21 41 36 ("jazz.library.literals.construct-directory-group")}
      {Lisp-Entry "Locales" define ("literal") 42 21 42 28 ("jazz.library.literals.construct-locales")}
      {Lisp-Entry "Bitmap-Resource" define ("literal") 43 21 43 36 ("jazz.library.literals.construct-bitmap-resource")}
      {Lisp-Entry "Icon-Resource" define ("literal") 44 21 44 34 ("jazz.library.literals.construct-icon-resource")}
      {Lisp-Entry "Cursor-Resource" define ("literal") 45 21 45 36 ("jazz.library.literals.construct-cursor-resource")}
      {Lisp-Entry "Event" define ("literal") 46 21 46 26 ("jazz.library.literals.construct-event")}
      {Lisp-Entry "Event-Handler" define ("literal") 47 21 47 34 ("jazz.library.literals.construct-event-handler")}
      {Lisp-Entry "Version" define ("literal") 48 21 48 28 ("jazz.library.literals.construct-version")}}})
"literals"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "library" "literals.jazz"} 1257476781
    {Lisp-Entry "jazz.library.literals" module #f 37 8 37 29 ("jazz")
      {Lisp-Entry "construct-box" definition #f 49 21 49 34 ("car" "Box" "new" "null?" "if" "rest")}
      {Lisp-Entry "construct-directory-group" definition #f 60 21 60 46 ("Directory-Group" "new" "rest")}
      {Lisp-Entry "construct-locales" definition #f 69 21 69 38 ("Locales" "new" "apply" "rest")}
      {Lisp-Entry "construct-bitmap-resource" definition #f 78 21 78 46 ("Bitmap-Resource" "new" "name")}
      {Lisp-Entry "construct-icon-resource" definition #f 82 21 82 44 ("Icon-Resource" "new" "name")}
      {Lisp-Entry "construct-cursor-resource" definition #f 86 21 86 46 ("Cursor-Resource" "new" "name")}
      {Lisp-Entry "construct-event" definition #f 95 21 95 36 ("Event" "new" "apply" "properties" "kind")}
      {Lisp-Entry "construct-event-handler" definition #f 104 21 104 44 ("properties:" "method-name:" "target-name:" "Event-Handler" "new" "properties" "method-name" "target-name")}
      {Lisp-Entry "construct-version" definition #f 113 21 113 38 ("Version" "new" "stage" "0" "revision" "minor" "major")}}})
"locale"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "locale.jazz"} 1257476784
    {Lisp-Entry "jazz.locale" module #f 37 18 37 29 ("jazz")
      {Lisp-Entry "Locales" class #f 45 7 45 14 ("Object")
        {Lisp-Entry "locales" slot #f 48 8 48 15 ()}
        {Lisp-Entry "get-locales" accessor #f 48 23 48 31 ()}
        {Lisp-Entry "initialize" method #f 51 20 51 30 ("locales" "set!" "nextmethod" "rest")}
        {Lisp-Entry "print" method #f 56 20 56 25 ("locales" "if" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-locale" method #f 68 18 68 28 ("locales" "getf" "locale")}
        {Lisp-Entry "localize" method #f 77 18 77 26 ("second" "locales" "getf" "either" "locale")}}
      {Lisp-Entry "Active-Locales" definition #f 81 12 81 26 ("english:")}
      {Lisp-Entry "Active-Locale" definition #f 84 12 84 25 ("english:")}
      {Lisp-Entry "get-locales" definition #f 88 20 88 31 ("Active-Locales")}
      {Lisp-Entry "get-locale" definition #f 92 20 92 30 ("Active-Locale")}
      {Lisp-Entry "set-locale" definition #f 96 20 96 30 ("call-locale-changes" "set!" "Active-Locale" "neq?" "when" "standardize-locale" "let" "update?" "update?:" "loc")}
      {Lisp-Entry "locale-changes" definition #f 103 12 103 26 ()}
      {Lisp-Entry "register-locale-change" definition #f 106 20 106 42 ("cons" "locale-changes" "set!" "proc")}
      {Lisp-Entry "unregister-locale-change" definition #f 109 20 109 44 ("remove!" "locale-changes" "set!" "proc")}
      {Lisp-Entry "call-locale-changes" definition #f 112 13 112 32 ("locale-changes" "proc" "lambda" "for-each" "update?" "loc")}
      {Lisp-Entry "standardize-locale" definition #f 118 13 118 31 ("error" "else" "symbol?" "enumerator->symbol" "symbol->keyword" "enumerator?" "keyword?" "cond" "loc")}
      {Lisp-Entry "localize" definition #f 125 20 125 28 ("Active-Locale" "localize" "Locales" "is?" "if" "object")}
      {Lisp-Entry "localize-to" definition #f 131 20 131 31 ("localize" "Locales" "is?" "if" "locale" "object")}
      {Lisp-Entry "present-locale" definition #f 137 20 137 34 ("english:" "case" "locale")}
      {Lisp-Entry "Diacritic-Equivalences" definition #f 149 12 149 34 ()}
      {Lisp-Entry "make-diacritic-table" definition #f 158 13 158 33 ("table-set!" "char" "lambda" "for-each" "eqv?" "test:" "make-table" "table" "let" "equivalences")}
      {Lisp-Entry "Diacritic-Table" definition #f 167 12 167 27 ("Diacritic-Equivalences" "make-diacritic-table")}
      {Lisp-Entry "di=?" definition #f 171 20 171 24 ("Diacritic-Table" "table-ref" "memv?" "ci=?" "or" "y" "x")}
      {Lisp-Entry "string-di=?" definition #f 176 20 176 31 ("di=?" "every" "b" "in-sequence" "a" "for" "loop" "string-length" "=" "and" "y" "x")}}})
"log"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "log.jazz"} 1257476784
    {Lisp-Entry "jazz.log" module #f 37 8 37 16 ("jazz")
      {Lisp-Entry "Log" class #f 51 20 51 23 ("initialize" "Object")
        {Lisp-Entry "name" slot #f 54 8 54 12 ()}
        {Lisp-Entry "get-name" accessor #f 54 44 54 52 ()}
        {Lisp-Entry "file" slot #f 55 8 55 12 ()}
        {Lisp-Entry "get-file" accessor #f 55 44 55 52 ()}
        {Lisp-Entry "last-mark" slot #f 56 8 56 17 ()}
        {Lisp-Entry "read-error?" slot #f 57 8 57 19 ()}
        {Lisp-Entry "current-node" slot #f 58 8 58 20 ()}
        {Lisp-Entry "get-current-node" accessor #f 58 44 58 52 ()}
        {Lisp-Entry "toplevel-nodes" slot #f 59 8 59 22 ()}
        {Lisp-Entry "initialize" method #f 62 20 62 30 ("load-toplevel-nodes" "when" "List-Factory" "new" "toplevel-nodes~self" "current-node~self" "file~self" "name~self" "set!" "nextmethod" "load?" "load?:" "file" "file:" "name" "name:")}
        {Lisp-Entry "get-toplevel-nodes" method #f 77 18 77 36 ("toplevel-nodes" "get-list")}
        {Lisp-Entry "reload" method #f 86 18 86 24 ("load-toplevel-nodes" "name" "error" "file" "null?" "if")}
        {Lisp-Entry "get-mark-position" method #f 93 11 93 28 ("first" "mark")}
        {Lisp-Entry "get-mark-line" method #f 97 11 97 24 ("third" "mark")}
        {Lisp-Entry "get-mark-column" method #f 101 11 101 26 ("fourth" "mark")}
        {Lisp-Entry "handle-read-error" method #f 105 11 105 28 ("set!" "format" "message-box" "get-mark-column" "column" "get-mark-line" "1" "+" "line" "file" "parse" "file-path" "let" "last-mark" "get-mark-position" "=" "read-error?" "and" "if" "current-mark")}
        {Lisp-Entry "load-toplevel-nodes" method #f 115 11 115 30 ("read-error?" "toplevel-nodes" "put" "parse-jml" "node" "eof-object?" "if" "read" "expr" "reader-file-mark" "set!" "not" "while" "handle-read-error" "err" "Error" "catch" "current-mark" "done?" "let" "set-reader-file-mark" "last-mark" "when" "read/write" "'read/write" "sharing:" "file" "File-Reader" "new" "reader" "with-closed")}
        {Lisp-Entry "add-toplevel-node" method #f 140 11 140 28 ("toplevel-nodes" "put" "file" "null?" "when" "node")}
        {Lisp-Entry "output-toplevel-node" method #f 145 11 145 31 ("pretty-print" "printer" "lambda" "read" "'read" "sharing:" "append" "'append" "mode:" "parse" "list" "call-with-output-file" "file" "when" "node")}
        {Lisp-Entry "with-node" method #f 157 18 157 27 ("output-toplevel-node" "set!" "set-parent" "begin" "unwind-protect" "prog1" "add-toplevel-node" "not" "when" "preserved" "current-node" "parent" "let" "proc" "node")}
        {Lisp-Entry "log-node" method #f 172 18 172 26 ("output-toplevel-node" "add-toplevel-node" "not" "when" "set-parent" "current-node" "parent" "let" "node")}
        {Lisp-Entry "log-entry" method #f 181 18 181 27 ("new-entry" "log-node" "data" "message" "name" "tag")}
        {Lisp-Entry "new-entry" method #f 185 18 185 27 ("'data" "'message" "'name" "set-property" "'entry" "either" "JML-Element" "new" "entry" "let" "data" "message" "name" "tag")}
        {Lisp-Entry "clear" method #f 193 18 193 23 ("clear" "'clear" "unimplemented")}}
      {Lisp-Entry "Logs" definition #f 203 32 203 36 ("List-Factory" "new")}
      {Lisp-Entry "get-logs" definition #f 207 33 207 41 ("Logs" "get-list")}
      {Lisp-Entry "Add-Log-Lock" definition #f 211 32 211 44 ("Lock" "new")}
      {Lisp-Entry "add-log" definition #f 215 33 215 40 ("Logs" "put" "get-logs" "memq?" "unless" "Add-Log-Lock" "synchronize" "add-log" "'add-log" "unimplemented" "log")}
      {Lisp-Entry "current-log" definition #f 223 33 223 44 ("add-log" "set-current-log" "default-log" "log" "let" "get-current-log" "either")}
      {Lisp-Entry "default-log" definition #f 231 13 231 24 ("name:" "Log" "new" "default-log" "'default-log" "unimplemented")}
      {Lisp-Entry "get-current-log" definition #f 237 33 237 48 ("current-log" "'current-log" "get-parameter" "get-current-log" "'get-current-log" "unimplemented")}
      {Lisp-Entry "set-current-log" definition #f 243 33 243 48 ("current-log" "'current-log" "set-parameter" "set-current-log" "'set-current-log" "unimplemented" "log")}
      {Lisp-Entry "with-log" definition #f 249 33 249 41 ("add-log" "not" "and" "when" "get-name" "set-current-log" "begin" "unwind-protect" "get-current-log" "preserved" "let" "with-log" "'with-log" "unimplemented" "file" "file:" "name" "name:" "proc" "log")}
      {Lisp-Entry "with-node" definition #f 263 33 263 42 ("with-node" "new-entry" "either" "let" "current-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "node" "node:" "proc")}
      {Lisp-Entry "log-node" definition #f 268 33 268 41 ("log-node" "current-log" "log" "log:" "node")}
      {Lisp-Entry "log-entry" definition #f 272 33 272 42 ("log-entry" "current-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:")}
      {Lisp-Entry "log-properties" definition #f 276 33 276 47 ("log-entry" "get-output-string" "keyword->symbol" "format" "set!" "if" "value" "property" "lambda" "for-each-property" "first?" "open-output-string" "printer" "let" "current-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "properties")}
      {Lisp-Entry "new-log-node" definition #f 289 33 289 45 ("new-entry" "current-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:")}
      {Lisp-Entry "with-profile" definition #f 298 33 298 45 ("new-entry" "either" "after" "'after" "set!" "before" "'before" "log-profile" "result" "let" "lambda" "with-node" "with-profile" "'with-profile" "unimplemented" "current-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "node" "node:" "proc")}
      {Lisp-Entry "log-profile" definition #f 312 33 312 44 ("Performance" "resources-snapshot" "log-node" "gc" "log-profile" "'log-profile" "unimplemented" "current-log" "log" "log:" "name" "name:")}
      {Lisp-Entry "log-stack" definition #f 319 33 319 42 ("data:" "log-entry" "Stack-Snapshot" "new" "data" "let" "log-stack" "'log-stack" "unimplemented" "current-log" "log" "log:" "message" "message:" "name" "name:" "tag" "tag:")}
      {Lisp-Entry "profiles->jml" definition #f 326 33 326 46 ("'name" "get-property" "node" "key:" "<" "sort" "profile->jml" "cons" "set!" "profile-parent" "not" "when" "profile" "name" "lambda" "get-profiles" "iterate-table" "nodes" "let" "profiles->jml" "'profiles->jml" "unimplemented" "profiles")}
      {Lisp-Entry "profile->jml" definition #f 337 13 337 25 ("insert-profile-children" "profile-content" "node" "let" "profile->jml" "'profile->jml" "unimplemented" "profile" "parent")}
      {Lisp-Entry "profile-content" definition #f 345 13 345 28 ("'total" "'count" "'name" "list" "properties:" "'profile" "JML-Element" "new" "profile-total" "total" "0" "profile-count" "count" "profile-name" "name" "let" "profile-content" "'profile-content" "unimplemented" "profile" "parent")}
      {Lisp-Entry "insert-profile-children" definition #f 354 13 354 36 ("collect-profile-children" "profile->jml" "child" "lambda" "map" "insert-profile-children" "'insert-profile-children" "unimplemented" "profile" "parent")}
      {Lisp-Entry "collect-profile-children" definition #f 362 13 362 37 ("profile-previous-brother" "cons" "set!" "while" "profile-last-child" "child" "children" "let" "collect-profile-children" "'collect-profile-children" "unimplemented" "profile")}}})
"logger"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "logger.jazz"} 1257476785
    {Lisp-Entry "jazz.logger" module #f 37 8 37 19 ("jazz")
      {Lisp-Entry "*logger-directory*" definition #f 43 12 43 30 ("Home" "Directory")}
      {Lisp-Entry "*logger-file*" definition #f 46 12 46 25 ()}
      {Lisp-Entry "logger-file" definition #f 50 13 50 24 ("*logger-directory*" "timestamped-file" "set!" "*logger-file*" "not" "when")}
      {Lisp-Entry "with-logger-output" definition #f 56 13 56 31 ("port" "lambda" "get-eol-encoding" "eol-encoding:" "append:" "logger-file" "parse" "path:" "list" "call-with-output-file" "proc")}
      {Lisp-Entry "logger-log" definition #f 62 13 62 23 ("format" "apply" "port" "lambda" "with-logger-output" "rest")}
      {Lisp-Entry "logger-line" definition #f 68 13 68 24 ("logger-log" "line")}
      {Lisp-Entry "logger-debug" definition #f 72 13 72 25 ("logger-log" "rest")}
      {Lisp-Entry "logger-exception" definition #f 76 13 76 29 ("display-exception" "port" "lambda" "with-logger-output" "exc")}
      {Lisp-Entry "logger-backtrace" definition #f 82 13 82 29 ("display-continuation-backtrace" "port" "lambda" "with-logger-output" "cont")}}})
"math"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "math.jazz"} 1257476787
    {Lisp-Entry "jazz.math" module #f 37 8 37 17 ("jazz")
      {Lisp-Entry "Pi" definition #f 45 19 45 21 ("3.14159")}}})
"snapshot"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "snapshot.jazz"} 1257476795
    {Lisp-Entry "jazz.snapshot" module #f 37 8 37 21 ("jazz")
      {Lisp-Entry "*snapshots-directory*" definition #f 47 12 47 33 ("Home" "Directory")}
      {Lisp-Entry "snapshot-process" definition #f 51 20 51 36 ("print-process-snapshot" "apply" "printer" "lambda" "get-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "create-directories" "*snapshots-directory*" "timestamped-file" "file" "let" "rest")}
      {Lisp-Entry "print-process-snapshot" definition #f 60 13 60 35 ("present-object" "mutable?" "value" "bind" "variable" "get-continuation-lexical-environment" "variables" "get-continuation-name" "name" "not" "cont" "then" "first" "first?" "get-continuation-stack" "stack" "let" "print-stack" "thread-state" "present-thread-state" "thread-name" "present-thread-name" "neq?" "do" "top-threads" "in" "thread" "for" "loop" "lambda" "continuation-capture" "current-thread" "print-thread" "if" "print-threads" "exception-reason" "print-exception" "when" "current-date" "present-date" "current-process-present" "either" "format" "print-process" "define" "exception" "exception:" "reason" "reason:" "continuation" "continuation:" "printer")}
      {Lisp-Entry "snapshot-exception-debugger" definition #f 132 20 132 47 ("1" "exit" "when" "exception:" "continuation:" "snapshot-process" "snapshot" "let" "continuation" "continuation-capture" "with-system-exception-debugger" "exception" "lambda" "feedback" "feedback:")}
      {Lisp-Entry "application-exception-debugger" definition #f 144 20 144 50 ("application-exception-feedback" "feedback:" "snapshot-exception-debugger")}
      {Lisp-Entry "application-exception-feedback" definition #f 149 20 149 50 ("problem" "'problem" "type:" "title:" "process-email" "email" "if" "parse" "current-process-present" "french:" "english:" "Locales" "localize" "format" "system-message" "get-process" "process" "let" "snapshot" "exception")}}})
"syntax"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "tie" "syntax.jazz"} 1257476798
    {Lisp-Entry "jazz.tie.syntax" module #f 37 18 37 33 ("jazz")
      {Lisp-Entry "tie" macro #f 40 15 40 18 ("List" "String" "car" "typecase" "get-output" "get-output-string" ":string" "'format" "cons" "else" "case" "eof-object?" "unless" "read-char" "iterate" "List-Factory" "new" "open-output-string" "let" "lambda" "append" "apply" "call-with-input-string" "tie-string" "null?" "error" "symbol?" "not" "if" "read-delimited" "arguments" "command" "bind" "out-parameters" "control" "process-string" "format" "display" "memq?" "when" "out" "c" "put" "tie-list" "define" "objects")}}})
"tabular"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "tabular.jazz"} 1257476799
    {Lisp-Entry "jazz.tabular" module #f 37 8 37 20 ("jazz")
      {Lisp-Entry "read-tab-delimited" definition #f 43 33 43 51 ("get-output" "map" "put" "split" "values" "set!" "read-line" "not" "while" "done?" "List-Factory" "new" "fact" "string" "tab" "let" "reader" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "string-length" "-" "1" "subseq" "ends-with?" "starts-with?" "and" "if" "line" "patch-for-excel" "define" "file")}
      {Lisp-Entry "convert-tab-delimited->jml" definition #f 64 33 64 59 ("verify-reload" "get-application" "appl" "let" "get-name" "user-message" "pretty-print" "printer" "lambda" "UTF-8" "'UTF-8" "char-encoding:" "path:" "list" "call-with-output-file" "parse" "preferences:" "JML-Parser" "JML-Preferences" "new" "pref" "jml" "read-tab-delimited" "content" "get-base" "format" "get-parent" "new-file" "output" "let*" "convert-tab-delimited->jml" "'convert-tab-delimited->jml" "unimplemented" "parser" "input")}
      {Lisp-Entry "save-tab-delimited" definition #f 81 33 81 51 ("format" "set!" "if" "text" "first?" "let" "line" "for-each" "printer" "lambda" "parse" "call-with-output-file" "save-tab-delimited" "'save-tab-delimited" "unimplemented" "file" "content")}}})
"ui"
 ({Lisp-File-Entry {File jazz.library "src" "jazz" "runtime" "ui.jazz"} 1257476800
    {Lisp-Entry "jazz.runtime.ui" module #f 37 8 37 23 ("jazz")
      {Lisp-Entry "load-all-with-feedback" definition #f 45 20 45 42 ("format-plural" "increase!" "user-message" "begin" "if" "unit-name" "lambda" "feedback:" "load-all" "0" "count" "let")}
      {Lisp-Entry "walk-all-with-feedback" definition #f 56 20 56 42 ("format-plural" "increase!" "user-message" "begin" "if" "unit-name" "lambda" "feedback:" "walk-all" "0" "count" "let")}
      {Lisp-Entry "outline-all-with-feedback" definition #f 67 20 67 45 ("format-plural" "outline-all" "increase!" "user-message" "unit-name" "lambda" "outline-feedback" "parameterize" "0" "count" "let")}}})
