"Dispatcher"
 ({Lisp-File-Entry {File core "src" "core" "generic" "runtime" "Dispatcher.jazz"} 1258811564
    {Lisp-Entry "Dispatcher" class #f 47 7 47 17 ("Object")
      {Lisp-Entry "dag-root" property #f 50 12 50 20 ()}
      {Lisp-Entry "get-dag-root" accessor #f 50 31 50 39 ()}
      {Lisp-Entry "set-dag-root" accessor #f 50 31 50 39 ()}
      {Lisp-Entry "Root-Signature" definition #f 53 14 53 28 ("root-signature" "'root-signature")}
      {Lisp-Entry "initialize" method #f 57 11 57 21 ("Root-Signature" "Dispatch-Node" "new" "dag-root" "set!" "nextmethod")}
      {Lisp-Entry "insert-signature" method #f 62 18 62 34 ("insert-node" "else" "proper-list?" "not" "category-name" "error" "locate-node" "cond" "List" "get-type" "essay" "get-typeref" "typeref" "let" "parameter" "lambda" "accumulate" "standardize-signature" "define" "category" "signature" "procedure" "symbol")}
      {Lisp-Entry "insert-node" method #f 81 18 81 29 ("get-specific-nodes" "add-specific-node" "remove-specific-node" "add-generic-node" "remove-generic-node" "get-signature" "can-call-with?" "neq?" "and" "when" "specific" "generic" "lambda" "for-each" "Dispatch-Node" "new" "node" "gather-generics" "generics" "let*" "signature" "procedure")}
      {Lisp-Entry "remove-node" method #f 98 18 98 29 ("remove-generic-node" "get-generic-nodes" "remove-specific-node" "get-specific-nodes" "add-generic-node" "add-specific-node" "specific" "generic" "lambda" "for-each" "node")}
      {Lisp-Entry "locate-node" method #f 113 18 113 29 ("first" "get-signature" "equal?" "length" "1" "=" "and" "if" "gather-generics" "matching" "let" "signature")}
      {Lisp-Entry "gather-generics" method #f 121 18 121 33 ("dag-root" "cons" "memq?" "not" "and" "get-specific-nodes" "set!" "can-call-with?" "when" "child-node" "for-each" "no-match?" "walk-node" "lambda" "iter" "letrec" "generics" "let" "parameter-types")}
      {Lisp-Entry "find-generics" method #f 137 18 137 31 ("dag-root" "car" "eq?" "if" "gather-generics" "generics" "let" "parameter-types")}}
    {Lisp-Entry "Dispatch-Node" class #f 149 7 149 20 ("initialize" "Object")
      {Lisp-Entry "procedure" property #f 152 12 152 21 ()}
      {Lisp-Entry "get-procedure" accessor #f 152 52 152 60 ()}
      {Lisp-Entry "set-procedure" accessor #f 152 52 152 60 ()}
      {Lisp-Entry "signature" property #f 153 12 153 21 ()}
      {Lisp-Entry "get-signature" accessor #f 153 52 153 60 ()}
      {Lisp-Entry "set-signature" accessor #f 153 52 153 60 ()}
      {Lisp-Entry "generic-nodes" property #f 154 12 154 25 ()}
      {Lisp-Entry "get-generic-nodes" accessor #f 154 52 154 60 ()}
      {Lisp-Entry "set-generic-nodes" accessor #f 154 52 154 60 ()}
      {Lisp-Entry "specific-nodes" property #f 155 12 155 26 ()}
      {Lisp-Entry "get-specific-nodes" accessor #f 155 52 155 60 ()}
      {Lisp-Entry "set-specific-nodes" accessor #f 155 52 155 60 ()}
      {Lisp-Entry "initialize" method #f 158 11 158 21 ("generic-nodes" "signature" "procedure" "set!" "nextmethod" "gen" "sig" "proc")}
      {Lisp-Entry "print" method #f 165 11 165 16 ("category-name" "map" "format" "Root-Signature" "signature" "eq?" "if" "lambda" "self" "print-unreadable" "readably" "printer")}
      {Lisp-Entry "can-call-with?" method #f 173 11 173 25 ("null?" "finally" "return" "Java" "can-cast-into?" "not" "and" "when" "r2" "parameter-type" "r1" "remainder" "in" "data-type" "for" "loop" "Root-Signature" "signature" "eq?" "if" "sig")}
      {Lisp-Entry "add-generic-node" method #f 184 11 184 27 ("cons" "set-generic-nodes" "equal?" "generic" "lambda" "generic-nodes" "find-in" "unless" "get-signature" "sig" "let" "node")}
      {Lisp-Entry "add-specific-node" method #f 192 11 192 28 ("cons" "set-specific-nodes" "equal?" "specific" "lambda" "specific-nodes" "find-in" "unless" "get-signature" "sig" "let" "node")}
      {Lisp-Entry "remove-generic-node" method #f 200 11 200 30 ("generic-nodes" "remove" "set-generic-nodes" "generic")}
      {Lisp-Entry "remove-specific-node" method #f 204 11 204 31 ("specific-nodes" "remove" "set-specific-nodes" "specific")}}})
"_base"
 ({Lisp-File-Entry {File core "src" "core" "base" "_base.scm"} 1258811564
    {Lisp-Entry "core.base" unit #f 37 6 37 15 ()}})
"_builder"
 ({Lisp-File-Entry {File core "src" "core" "unit" "builder" "_builder.scm"} 1265989215
    {Lisp-Entry "core.unit.builder" unit #f 38 16 38 33 ()
      {Lisp-Entry "jazz.manifest-references-valid?" define #f 49 9 49 40 ("references" "private" "'private" "%%get-declaration-access" "%%neq?" "%%get-declaration-toplevel" "%%get-lexical-binding-name" "%%eq?" "else" "jazz.find-declaration" "%%not" "cond" "declaration" "symbols" "iter" "%%pair?" "if" "found" "symbol" "lambda" "jazz.every?" "error?:" "jazz.outline-module" "module-declaration" "%%cdr" "module-references" "%%car" "module-locator" "lst" "module-references-valid?" "%%manifest-references" "and" "jazz.load-manifest" "manifest" "%%resource-package" "jazz.manifest-pathname" "manifest-filepath" "let" "get-manifest-references" "define" "bin")}
      {Lisp-Entry "jazz.compile-unit-internal" define #f 87 9 87 35 ("force?:" "ld-options:" "cc-options:" "options:" "jazz.compile-source" "jazz.requested-unit-resource" "jazz.requested-unit-name" "parameterize" "manifest" "lib-uptodate?" "bin-uptodate?" "obj-uptodate?" "lib" "bin" "obj" "src" "lambda" "jazz.with-unit-resources" "force?" "ld-options" "cc-options" "options" "#!key" "unit-name")}
      {Lisp-Entry "jazz.custom-compile-unit-internal" define #f 97 9 97 42 ("jazz.compile-unit" "force?:" "unit:" "%%product-descriptor" "if" "%%product-build" "and" "build" "jazz.find-unit-product" "product" "let" "force?" "#!key" "unit-name")}
      {Lisp-Entry "jazz.find-unit-product" define #f 106 9 106 31 ("continuation-return" "eq?" "phase" "declaration" "sub-unit" "jazz.for-each-subunit" "unit" "jazz.ill-formed-field-error" "jazz.cond-expand-each" "update" "if" "jazz.product-descriptor-update" "update-descriptor" "jazz.get-product" "product" "jazz.product-descriptor-name" "product-name" "let*" "product-descriptor" "for-each" "return" "lambda" "continuation-capture" "%%package-products" "products" "%%resource-package" "package" "jazz.find-unit-src" "src" "let" "unit-name")}
      {Lisp-Entry "jazz.wrap-single-host-cc-options" define #f 132 8 132 40 ("string-append" "if" "str" "lambda" "shell-command" "zero?" "else" "windows" "cond-expand" "gcc-4-2?" "let")}
      {Lisp-Entry "jazz.compile-source" define #f 140 9 140 28 ("jazz.update-manifest-compile-time" "else" "jazz.Unit-Declaration" "jazz.generate-reference-list" "jazz.Module-Declaration" "%%is?" "cond" "jazz.get-catalog-entry" "module-declaration" "references" "src-filepath" "jazz.manifest-pathname" "manifest-filepath" "unit-name:" "ld-options:" "cc-options:" "options:" "jazz.compile-file" "compile" "'compile" "jazz.walk-for" "parameterize" "lambda" "%%resource-extension" "jazz.with-extension-reader" "jazz.create-directories" "force-output" "newline" "display" "%%package-name" "jazz.find-build-package" "build-package" "jazz.resource-build-dir" "bindir" "jazz.resource-pathname" "pathname" "%%resource-path" "path" "%%resource-package" "package" "jazz.manifest-references-valid?" "and" "jazz.link-objects?" "%%not" "if" "jazz.wrap-single-host-cc-options" "jazz.compile-options" "or" "let" "force?" "ld-options" "cc-options" "options" "#!key" "manifest-name" "bin-uptodate?" "obj-uptodate?" "bin" "obj" "src")}
      {Lisp-Entry "jazz.compile-file" define #f 174 9 174 26 ("jazz.for-each-numbered-pathname" "delete-file" "0" "=" "jazz.resource-build-dir" "dyn" "'dyn" "##gambc-cc" "exit-status" "warnings?:" "%%list" "link-flat" "begin" "jazz.link-objects?" "jazz.error" "cc-options:" "obj" "'obj" "%%cons" "compile-file" "module-name:" "options:" "output:" "compile-file-to-c" "and" "not" "%%symbol->string" "%%string-append" "unique-module-name" "let" "if" "linkfile" "1" "jazz.probe-numbered-pathname" "bin-o1" "bin-o" "string-append" "bin-c" "jazz.binary-with-extension" "bin-" "jazz.resource-pathname" "pathname" "let*" "unit-uniqueness-prefix" "define" "jazz.kernel-platform" "platform" "unit-name" "ld-options" "cc-options" "options" "#!key" "needs-compile?" "src")}
      {Lisp-Entry "jazz.find-build-package" define #f 212 9 212 32 ("jazz.Bin-Repository" "jazz.repository-find-package" "name")}
      {Lisp-Entry "jazz.build-unit-internal" define #f 221 9 221 33 ("jazz.compile-unit" "phase" "declaration" "lambda" "jazz.for-each-subunit" "unit-name")}
      {Lisp-Entry "jazz.get-subunit-names-internal" define #f 231 9 231 40 ("jazz.for-each-subunit" "%%cons" "set!" "phase" "declaration" "unit-name" "lambda" "proc" "sub-units" "let*" "parent-name")}
      {Lisp-Entry "jazz.for-each-subunit" define #f 239 9 239 30 ("%%get-module-declaration-exports" "%%get-module-invoice-phase" "%%get-declaration-reference-name" "name" "%%get-module-invoice-module" "reference" "export" "%%get-module-declaration-requires" "%%get-unit-declaration-requires" "for-each" "jazz.Unit-Declaration" "jazz.is?" "jazz.error" "jazz.descendant-unit?" "and" "protected" "'protected" "%%get-declaration-access" "%%eq?" "or" "jazz.outline-unit" "declaration" "%%cons" "set!" "begin" "%%memq" "%%not" "if" "feature-requirement" "lambda" "jazz.parse-require" "require" "process-require" "define" "toplevel?" "phase" "unit-name" "iter" "subunits" "let" "proc" "parent-name")}}})
"_class"
 ({Lisp-File-Entry {File core "src" "core" "class" "_class.scm"} 1258811564
    {Lisp-Entry "core.class" unit #f 37 6 37 16 ()}})
"_dialect"
 ({Lisp-File-Entry {File core "src" "core" "module" "syntax" "dialect" "_dialect.scm"} 1258811564
    {Lisp-Entry "core.module.syntax.dialect" unit #f 37 16 37 42 ("jazz.Dialect" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Dialect" define-class ("class runtime") 40 27 40 39 ()}
      {Lisp-Entry "jazz.dialect-name" generic/specific ("jazz.Dialect~virtual-runtime") 43 30 43 47 ()}
      {Lisp-Entry "jazz.dialect-walker" generic/specific ("jazz.Dialect~virtual-runtime") 44 30 44 49 ()}
      {Lisp-Entry "jazz.dialect-name" generic/specific ("jazz.Dialect") 47 21 47 38 ()}
      {Lisp-Entry "jazz.dialect-walker" generic/specific ("jazz.Dialect") 51 21 51 40 ()}
      {Lisp-Entry "jazz.Dialects" define #f 63 8 63 21 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-dialect" define #f 67 9 67 25 ("jazz.Dialects" "%%table-ref" "name")}
      {Lisp-Entry "jazz.require-dialect" define #f 71 9 71 29 ("jazz.error" "jazz.get-dialect" "or" "name")}
      {Lisp-Entry "jazz.register-dialect" define #f 76 9 76 30 ("jazz.Dialects" "%%table-set!" "dialect" "name")}
      {Lisp-Entry "jazz.define-dialect" define-macro ("macro") 80 20 80 39 (",dialect" ",name" "',name" "jazz.register-dialect" "dialect" "name")}
      {Lisp-Entry "jazz.register-binding" define #f 89 9 89 30 ("%%get-dialect-bindings" "%%cons" "%%set-dialect-bindings" "jazz.get-dialect" "dialect" "let" "binding" "dialect-name")}
      {Lisp-Entry "jazz.define-walker-special" define-macro ("macro") 94 20 94 46 (",method" ",name" "',name" "jazz.new-special-form" ",dialect-name" "',dialect-name" "jazz.register-binding" "method" "dialect-name" "name")}
      {Lisp-Entry "jazz.define-walker-syntax" define-macro ("macro") 98 20 98 45 (",method" ",name" "',name" "jazz.new-syntax-form" ",dialect-name" "',dialect-name" "jazz.register-binding" "method" "dialect-name" "name")}
      {Lisp-Entry "jazz.define-walker-macro" define-macro ("macro") 102 20 102 44 (",method" ",name" "',name" "jazz.new-macro-form" ",dialect-name" "',dialect-name" "jazz.register-binding" "method" "dialect-name" "name")}}})
"_exception"
 ({Lisp-File-Entry {File core "src" "core" "exception" "_exception.scm"} 1258811564
    {Lisp-Entry "core.exception" unit #f 37 6 37 20 ()}})
"_generic"
 ({Lisp-File-Entry {File core "src" "core" "generic" "_generic.scm"} 1258811564
    {Lisp-Entry "core.generic" unit #f 37 6 37 18 ()}})
"_module"
 ({Lisp-File-Entry {File core "src" "core" "module" "_module.scm"} 1258811564
    {Lisp-Entry "core.module" unit #f 37 6 37 17 ()}})
"_runtime"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "_runtime.scm"} 1258811564
    {Lisp-Entry "core.base.runtime" unit #f 37 16 37 33 ()}}
  {Lisp-File-Entry {File core "src" "core" "class" "runtime" "_runtime.scm"} 1258811564
    {Lisp-Entry "core.class.runtime" unit #f 37 16 37 34 ()}}
  {Lisp-File-Entry {File core "src" "core" "generic" "runtime" "_runtime.scm"} 1258811564
    {Lisp-Entry "core.generic.runtime" unit #f 37 16 37 36 ()}}
  {Lisp-File-Entry {File core "src" "core" "module" "runtime" "_runtime.scm"} 1259335949
    {Lisp-Entry "core.module.runtime" unit #f 37 16 37 35 ("jazz.Module" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Module" define-class ("class") 48 19 48 30 ("%%get-module-exports" "exports" "%%get-module-access" "access" "%%get-module-name" "name" "jazz.allocate-module" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Module" define-class ("class runtime") 54 27 54 38 ()}
      {Lisp-Entry "jazz.new-module" define #f 57 9 57 24 ("eq?" "test:" "%%make-table" "jazz.Module" "jazz.allocate-module" "access" "name")}
      {Lisp-Entry "jazz.Modules" define #f 69 8 69 20 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.register-module" define #f 73 9 73 29 ("jazz.Modules" "%%cdr" "%%car" "pair" "%%table-set!" "info" "jazz.get-module" "%%iterate-table" "module-name" "lambda" "for-each" "%%get-module-exports" "exports" "jazz.new-module" "module" "let" "exported-symbols" "exported-modules" "access" "name")}
      {Lisp-Entry "jazz.get-module" define #f 90 9 90 24 ("jazz.Modules" "%%table-ref" "jazz.load-unit" "name")}
      {Lisp-Entry "jazz.require-module" define #f 95 9 95 28 ("jazz.error" "jazz.get-module" "or" "name")}
      {Lisp-Entry "jazz.module-get" define #f 100 9 100 24 ("jazz.load-unit" "locator" "unit-name" "jazz.bind" "jazz.global-value" "%%symbol?" "if" "%%get-module-exports" "%%table-ref" "info" "jazz.require-module" "module" "let" "not-found" "#!key" "name" "module-name")}
      {Lisp-Entry "jazz.module-ref" define #f 112 8 112 23 ("jazz.error" "%%eq?" "if" "not-found:" "jazz.module-get" "obj" "name" "module-name" "lambda" "box" "not-found" "let")}
      {Lisp-Entry "jazz.type-error" define #f 126 9 126 24 ("jazz.error" "type" "value")}
      {Lisp-Entry "jazz.dispatch-error" define #f 130 9 130 28 ("%%get-category-name" "%%get-field-name" "jazz.error" "category" "value" "field")}}})
"_syntax"
 ({Lisp-File-Entry {File core "src" "core" "base" "syntax" "_syntax.scm"} 1258811564
    {Lisp-Entry "core.base.syntax" unit #f 37 16 37 32 ()}}
  {Lisp-File-Entry {File core "src" "core" "class" "syntax" "_syntax.scm"} 1258811564
    {Lisp-Entry "core.class.syntax" unit #f 37 16 37 33 ()}}
  {Lisp-File-Entry {File core "src" "core" "generic" "syntax" "_syntax.scm"} 1258811564
    {Lisp-Entry "core.generic.syntax" unit #f 37 16 37 35 ()}}
  {Lisp-File-Entry {File core "src" "core" "module" "syntax" "_syntax.scm"} 1258811564
    {Lisp-Entry "core.module.syntax" unit #f 37 16 37 34 ()}})
"_unit"
 ({Lisp-File-Entry {File core "src" "core" "unit" "_unit.scm"} 1258811564
    {Lisp-Entry "core.unit" unit #f 37 6 37 15 ()}})
"_walker"
 ({Lisp-File-Entry {File core "src" "core" "module" "syntax" "walker" "_walker.scm"} 1265989215
    {Lisp-Entry "core.module.syntax.walker" unit #f 59 16 59 41 ("jazz.Core-Walker" "jazz.Core-Dialect" "jazz.Walker" "jazz.Analysis-Data" "jazz.Assignment" "jazz.Constant" "jazz.Call" "jazz.Begin" "jazz.Internal-Define" "jazz.Body" "jazz.Reference" "jazz.Expression" "jazz.Code" "jazz.Annotated-Frame" "jazz.Restricted-Binding" "jazz.Annotated-Variable" "jazz.Syntactic-Closure" "jazz.Define-Syntax-Form" "jazz.Syntax-Form" "jazz.Macro-Form" "jazz.Special-Form" "jazz.Form-Binding" "jazz.Macro-Symbol" "jazz.Local-Variable-Binding" "jazz.Dynamic-Self-Binding" "jazz.Self-Binding" "jazz.Rest-Parameter" "jazz.Named-Parameter" "jazz.Optional-Parameter" "jazz.Dynamic-Parameter" "jazz.Parameter" "jazz.NextMethod-Variable" "jazz.Variable" "jazz.Symbol-Binding" "jazz.Signature" "jazz.Walk-Frame" "jazz.Unresolved-Error" "jazz.Walk-Error" "jazz.Walk-Warning" "jazz.Walk-Problems" "jazz.Walk-Problem" "jazz.Walk-Location" "jazz.Walk-Context" "jazz.Define-Syntax-Declaration" "jazz.Syntax-Declaration" "jazz.Macro-Declaration" "Unspecified" "'Unspecified" "EOF" "'EOF" "Values" "'Values" "Foreign" "'Foreign" "Promise" "'Promise" "Thread" "'Thread" "Table" "'Table" "F64Vector" "'F64Vector" "F32Vector" "'F32Vector" "U64Vector" "'U64Vector" "S64Vector" "'S64Vector" "U32Vector" "'U32Vector" "S32Vector" "'S32Vector" "U16Vector" "'U16Vector" "S16Vector" "'S16Vector" "U8Vector" "'U8Vector" "S8Vector" "'S8Vector" "Vector" "'Vector" "Keyword" "'Keyword" "Symbol" "'Symbol" "String" "'String" "Procedure" "'Procedure" "Continuation" "'Continuation" "Port" "'Port" "Pair" "'Pair" "Null" "'Null" "List" "'List" "Flonum" "'Flonum" "Fixnum" "'Fixnum" "Integer" "'Integer" "Rational" "'Rational" "Real" "'Real" "Complex" "'Complex" "Number" "'Number" "Char" "'Char" "Boolean" "'Boolean" "Object" "'Object" "jazz.primitive-declarations" "void" "'void" "jazz.Unspecified" "unspecified" "'unspecified" "jazz.EOF" "eof" "'eof" "jazz.Values" "values" "'values" "jazz.Foreign" "foreign" "'foreign" "jazz.Promise" "promise" "'promise" "jazz.Thread" "thread" "'thread" "jazz.Table" "table" "'table" "jazz.F64Vector" "f64vector" "'f64vector" "jazz.F32Vector" "f32vector" "'f32vector" "jazz.U64Vector" "u64vector" "'u64vector" "jazz.S64Vector" "s64vector" "'s64vector" "jazz.U32Vector" "u32vector" "'u32vector" "jazz.S32Vector" "s32vector" "'s32vector" "jazz.U16Vector" "u16vector" "'u16vector" "jazz.S16Vector" "s16vector" "'s16vector" "jazz.U8Vector" "u8vector" "'u8vector" "jazz.S8Vector" "s8vector" "'s8vector" "jazz.Vector" "vector" "'vector" "jazz.Keyword" "keyword" "'keyword" "jazz.Symbol" "symbol" "'symbol" "jazz.String" "string" "'string" "jazz.Procedure" "procedure" "'procedure" "jazz.Continuation" "continuation" "'continuation" "jazz.Port" "port" "'port" "jazz.Pair" "pair" "'pair" "jazz.Null" "null" "'null" "jazz.List" "list" "'list" "jazz.Flonum" "fl" "'fl" "jazz.Fixnum" "fx" "'fx" "jazz.Integer" "int" "'int" "jazz.Rational" "rational" "'rational" "jazz.Real" "real" "'real" "jazz.Complex" "complex" "'complex" "jazz.Number" "number" "'number" "jazz.Char" "char" "'char" "jazz.Boolean" "bool" "'bool" "jazz.Object" "object" "'object" "any" "'any" "jazz.primitive-types" "%%table-set!" "jazz.Any" "jazz.Any-Class" "type" "lambda" "jazz.object-declaration?" "set!" "jazz.Nillable-Type" "jazz.Template-Type" "jazz.Union-Type" "jazz.Complement-Type" "jazz.Restriction-Type" "jazz.Values-Type" "jazz.Category-Type" "jazz.Function-Type" "jazz.Rest-Type" "jazz.Key-Type" "jazz.Opt-Type" "jazz.Void" "jazz.Void-Class" "jazz.Literal" "jazz.Autoload-Declaration" "jazz.Export-Syntax-Declaration" "jazz.Export-Declaration" "jazz.Import-Invoice" "jazz.Export-Invoice" "jazz.Module-Invoice" "jazz.Module-Declaration" "jazz.Namespace-Declaration" "jazz.Unit-Declaration" "jazz.Autoload-Reference" "jazz.Export-Reference" "jazz.Module-Reference" "jazz.Declaration-Reference" "jazz.Declaration" "jazz.Lexical-Binding" "jazz.Walk-Binding" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.analysis-mode?" define #f 68 8 68 27 ("make-parameter")}
      {Lisp-Entry "jazz.analysis-data" define #f 73 8 73 26 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.private-access" define #f 83 8 83 27 ("0")}
      {Lisp-Entry "jazz.public-access" define #f 87 8 87 26 ("1")}
      {Lisp-Entry "jazz.protected-access" define #f 91 8 91 29 ("2")}
      {Lisp-Entry "jazz.make-access-lookups" define #f 95 9 95 33 ("eq?" "test:" "%%make-table" "%%vector-set!" "begin" "%%fx<=" "if" "0" "n" "iter" "1" "%%fx+" "%%make-vector" "lookups" "let" "access-level")}
      {Lisp-Entry "jazz.Walk-Binding" define-class ("class runtime") 110 27 110 44 ()}
      {Lisp-Entry "jazz.emit-type" generic/specific ("jazz.Walk-Binding") 113 21 113 35 ("type" "jazz.emit-binding-reference" "jazz.sourcified-form" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Walk-Binding~virtual-runtime") 117 30 117 54 ("source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" generic/specific ("jazz.Walk-Binding~virtual-runtime") 118 30 118 58 ()}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Walk-Binding~virtual-runtime") 119 30 119 54 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Walk-Binding~virtual-runtime") 120 30 120 57 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Walk-Binding~virtual-runtime") 121 30 121 61 ("form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" generic/specific ("jazz.Walk-Binding~virtual-runtime") 122 30 122 52 ("environment" "source-declaration" "arguments" "binding-src")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" generic/specific ("jazz.Walk-Binding~virtual-runtime") 123 30 123 60 ("environment" "source-declaration" "call" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" generic/specific ("jazz.Walk-Binding~virtual-runtime") 124 30 124 67 ("symbol-src" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" generic/specific ("jazz.Walk-Binding~virtual-runtime") 125 30 125 59 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" generic/specific ("jazz.Walk-Binding~virtual-runtime") 126 30 126 58 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" generic/specific ("jazz.Walk-Binding~virtual-runtime") 127 30 127 57 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" generic/specific ("jazz.Walk-Binding~virtual-runtime") 128 30 128 57 ("form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Walk-Binding~virtual-runtime") 129 30 129 59 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Walk-Binding~virtual-runtime") 130 30 130 59 ("form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Walk-Binding") 133 21 133 45 ("source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" generic/specific ("jazz.Walk-Binding") 137 21 137 49 ("jazz.unspecified")}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Walk-Binding") 141 21 141 45 ("binding" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Walk-Binding") 145 21 145 48 ("binding" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Walk-Binding") 149 21 149 52 ("jazz.unspecified" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" generic/specific ("jazz.Walk-Binding") 153 21 153 43 ("jazz.call-return-type" "jazz.codes-forms" "jazz.emit-binding-reference" "jazz.sourcified-form2" "jazz.new-code" "binding" "%%get-lexical-binding-type" "type" "let" "environment" "source-declaration" "arguments" "binding-src")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" generic/specific ("jazz.Walk-Binding") 162 21 162 51 ("environment" "source-declaration" "call" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" generic/specific ("jazz.Walk-Binding") 166 21 166 58 ("%%get-lexical-binding-name" "jazz.walk-error" "binding" "jazz.walk-binding-assignable?" "%%not" "%%when" "symbol-src" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" generic/specific ("jazz.Walk-Binding") 171 21 171 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" generic/specific ("jazz.Walk-Binding") 175 21 175 49 ("jazz.unspecified" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" generic/specific ("jazz.Walk-Binding") 179 21 179 48 ()}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Walk-Binding") 183 21 183 50 ()}
      {Lisp-Entry "jazz.call-return-type" define #f 190 9 190 30 ("jazz.Any" "%%get-function-type-result" "jazz.Function-Type" "%%is?" "if" "operator-type")}
      {Lisp-Entry "jazz.Lexical-Binding" define-class ("class runtime") 201 27 201 47 ()}
      {Lisp-Entry "jazz.resolve-binding" generic/specific ("jazz.Lexical-Binding~virtual-runtime") 204 30 204 50 ()}
      {Lisp-Entry "jazz.resolve-binding" generic/specific ("jazz.Lexical-Binding") 207 21 207 41 ("binding")}
      {Lisp-Entry "jazz.print-object" generic/specific ("jazz.Lexical-Binding") 211 21 211 38 ("jazz.object->serial" "%%get-lexical-binding-name" "binding" "%%get-object-class" "%%get-category-name" "jazz.format" "detail" "output")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Lexical-Binding") 218 21 218 45 ("binding" "%%get-lexical-binding-name" "%%eq?" "if" "source-declaration" "symbol")}
      {Lisp-Entry "jazz.get-lexical-binding-name" define #f 224 9 224 38 ("%%get-lexical-binding-name" "binding")}
      {Lisp-Entry "jazz.get-lexical-binding-hits" define #f 228 9 228 38 ("%%set-lexical-binding-hits" "eq?" "test:" "%%make-table" "table" "let" "%%get-lexical-binding-hits" "or" "binding")}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Lexical-Binding") 235 21 235 45 ("binding" "%%get-lexical-binding-name" "environment" "declaration")}
      {Lisp-Entry "jazz.Declaration" define-class ("class runtime") 247 27 247 43 ()}
      {Lisp-Entry "jazz.setup-declaration" define #f 250 9 250 31 ("%%get-declaration-toplevel" "%%set-declaration-toplevel" "%%get-declaration-locator" "%%compose-name" "%%not" "if" "%%set-declaration-locator" "%%get-lexical-binding-name" "name" "%%get-declaration-parent" "parent" "let" "new-declaration")}
      {Lisp-Entry "jazz.get-declaration-path" define #f 257 9 257 34 ("jazz.reverse!" "%%cons" "%%list" "%%not" "if" "%%get-declaration-parent" "parent" "%%get-lexical-binding-name" "name" "let" "lambda" "proc" "letrec" "declaration")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Declaration") 268 21 268 45 ("jazz.private-access" "binding" "jazz.lookup-declaration" "source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Declaration") 272 21 272 52 ("declaration" "%%get-lexical-binding-name" "jazz.walk-error" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-declaration" generic/specific ("jazz.Declaration~virtual-runtime") 276 30 276 53 ("source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.lookup-declaration" generic/specific ("jazz.Declaration") 279 21 279 44 ("source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.get-declaration-inclusions" generic/specific ("jazz.Declaration~virtual-runtime") 283 30 283 61 ()}
      {Lisp-Entry "jazz.get-declaration-inclusions" generic/specific ("jazz.Declaration") 286 21 286 52 ()}
      {Lisp-Entry "jazz.get-nextmethod-signature" generic/specific ("jazz.Declaration~virtual-runtime") 290 30 290 59 ()}
      {Lisp-Entry "jazz.get-nextmethod-signature" generic/specific ("jazz.Declaration") 293 21 293 50 ("declaration" "jazz.error")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Declaration~virtual-runtime") 297 30 297 51 ("environment")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Declaration") 300 21 300 42 ("declaration" "jazz.error" "environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" generic/specific ("jazz.Declaration~virtual-runtime") 304 30 304 64 ()}
      {Lisp-Entry "jazz.expand-referenced-declaration" generic/specific ("jazz.Declaration") 307 21 307 55 ()}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Declaration~virtual-runtime") 311 30 311 51 ("s" "k" "f")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Declaration") 314 21 314 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.declaration-result" define #f 318 9 318 32 ("jazz.unspecified" "eval" "'eval" "jazz.walk-for" "%%eq?" "if")}
      {Lisp-Entry "jazz.Declaration-Reference" define-class ("class runtime") 332 27 332 53 ()}
      {Lisp-Entry "jazz.resolve-reference" generic/specific ("jazz.Declaration-Reference~virtual-runtime") 335 30 335 52 ("module-declaration")}
      {Lisp-Entry "jazz.resolve-reference" generic/specific ("jazz.Declaration-Reference") 338 21 338 43 ("%%set-declaration-reference-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.new-export-declaration" "declaration" "let" "%%get-declaration-reference-name" "jazz.parse-exported-symbol" "symbol" "name" "receive" "declaration-reference" "%%get-declaration-reference-declaration" "or" "module-declaration")}
      {Lisp-Entry "jazz.Module-Reference" define-class ("class runtime") 354 27 354 48 ()}
      {Lisp-Entry "jazz.new-module-reference" define #f 357 9 357 34 ("jazz.Module-Reference" "jazz.allocate-module-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-reference" generic/specific ("jazz.Module-Reference") 361 21 361 43 ("%%set-declaration-reference-declaration" "%%get-declaration-reference-name" "jazz.outline-module" "declaration" "let" "declaration-reference" "%%get-declaration-reference-declaration" "or" "module-declaration")}
      {Lisp-Entry "jazz.Export-Reference" define-class ("class runtime") 376 27 376 48 ()}
      {Lisp-Entry "jazz.new-export-reference" define #f 379 9 379 34 ("jazz.Export-Reference" "jazz.allocate-export-reference" "module-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-reference" generic/specific ("jazz.Export-Reference") 383 21 383 43 ("%%set-declaration-reference-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.new-export-declaration" "declaration" "%%get-lexical-binding-name" "jazz.compose-name" "locator" "let" "%%get-declaration-reference-name" "jazz.parse-exported-symbol" "symbol" "name" "receive" "declaration-reference" "%%get-declaration-reference-declaration" "or" "module-declaration")}
      {Lisp-Entry "jazz.parse-exported-symbol" define #f 392 9 392 35 ("jazz.identifier-name" "values" "jazz.composite-name?" "if" "name" "module-declaration")}
      {Lisp-Entry "jazz.Autoload-Reference" define-class ("class runtime") 406 27 406 50 ()}
      {Lisp-Entry "jazz.new-autoload-reference" define #f 409 9 409 36 ("jazz.Autoload-Reference" "jazz.allocate-autoload-reference" "module-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-autoload-reference" define #f 413 9 413 40 ("%%set-declaration-reference-declaration" "%%assert" "jazz.new-autoload-declaration" "declaration" "jazz.Any" "type" "%%get-declaration-reference-name" "name" "let*" "%%get-declaration-reference-declaration" "or" "exported-module-reference" "module-declaration" "declaration-reference")}
      {Lisp-Entry "jazz.Unit-Declaration" define-class ("class runtime") 431 27 431 48 ()}
      {Lisp-Entry "jazz.new-unit-declaration" define #f 434 9 434 34 ("jazz.setup-declaration" "uptodate" "'uptodate" "jazz.Unit-Declaration" "jazz.allocate-unit-declaration" "new-declaration" "let" "requires" "parent" "access" "name")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Unit-Declaration") 440 21 440 42 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Namespace-Declaration" define-class ("class runtime") 452 27 452 53 ()}
      {Lisp-Entry "jazz.lookup-declaration" generic/specific ("jazz.Namespace-Declaration") 455 21 455 44 ("%%get-access-lookup" "%%table-ref" "found" "jazz.get-analysis-data" "%%set-analysis-data-autoload-reference" "jazz.Autoload-Declaration" "%%is?" "jazz.get-lexical-binding-hits" "hits-table" "let" "jazz.analysis-mode?" "add-to-hits" "%%get-declaration-locator" "%%table-set!" "%%get-module-declaration-references" "references-table" "module-declaration" "let*" "%%get-declaration-toplevel" "namespace-declaration" "%%neq?" "and" "%%when" "declaration" "add-to-module-references" "define" "source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Namespace-Declaration") 477 21 477 42 ("%%get-namespace-declaration-body" "jazz.fold-statements" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.get-private-lookup" define #f 484 9 484 32 ("jazz.private-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.get-public-lookup" define #f 487 9 487 31 ("jazz.public-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.get-protected-lookup" define #f 490 9 490 34 ("jazz.protected-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.Module-Declaration" define-class ("class runtime") 500 27 500 50 ()}
      {Lisp-Entry "jazz.new-module-declaration" define #f 503 9 503 36 ("jazz.setup-declaration" "eq?" "test:" "%%make-table" "jazz.new-queue" "jazz.public-access" "jazz.make-access-lookups" "uptodate" "'uptodate" "jazz.Module-Declaration" "jazz.allocate-module-declaration" "new-declaration" "let" "dialect-invoice" "dialect-name" "walker" "parent" "access" "name")}
      {Lisp-Entry "jazz.add-module-require" define #f 509 9 509 32 ("%%list" "%%get-module-declaration-requires" "%%append" "%%set-module-declaration-requires" "jazz.load-unit" "syntax" "'syntax" "%%eq?" "%%when" "phase" "feature-requirement" "unit-name" "lambda" "jazz.parse-require" "require" "module-declaration")}
      {Lisp-Entry "jazz.add-module-import" define #f 517 9 517 31 ("jazz.table-merge-reporting-conflicts!" "jazz.public-access" "imported" "imported-module-declaration" "%%get-module-invoice-only" "only" "jazz.private-access" "%%get-access-lookup" "private" "%%list" "%%append" "%%set-module-declaration-imports" "jazz.find-module-invoice" "%%get-module-declaration-imports" "imports" "if" "%%get-lexical-binding-name" "jazz.load-unit" "%%get-module-invoice-module" "let" "syntax" "'syntax" "%%get-module-invoice-phase" "%%eq?" "%%when" "new" "actual" "merge-invoice" "define" "register?" "module-invoice" "module-declaration")}
      {Lisp-Entry "jazz.add-module-export" define #f 541 9 541 31 ("jazz.table-merge-reporting-conflicts!" "exported-module-declaration" "else" "jazz.resolve-autoload-reference" "exported-module-reference" "%%table-set!" "%%get-declaration-reference-name" "jazz.identifier-name" "name" "declaration-reference" "lambda" "for-each" "cond" "autoload" "%%get-module-invoice-only" "only" "jazz.public-access" "%%get-access-lookup" "public" "%%list" "%%set-module-declaration-exports" "jazz.find-module-invoice" "%%get-module-declaration-exports" "exports" "%%get-lexical-binding-name" "jazz.load-unit" "%%get-module-invoice-module" "jazz.resolve-reference" "syntax" "'syntax" "%%get-module-invoice-phase" "%%eq?" "%%append" "if" "%%set-export-invoice-autoload" "%%when" "new-autoload" "%%get-export-invoice-autoload" "actual-autoload" "let" "new" "actual" "merge-invoice" "define" "module-invoice" "module-declaration")}
      {Lisp-Entry "jazz.table-merge-reporting-conflicts!" define #f 575 9 575 46 ("jazz.error" "%%null?" "conflicts" "%%fx+" "%%fx=" "%%not" "%%table-merge!" "add-count" "%%table-length" "table-count" "%%list" "%%cons" "set!" "%%neq?" "%%when" "actual-locator" "value-locator" "%%table-ref" "actual" "value" "key" "lambda" "%%iterate-table" "lst" "let" "find-actual-conflicts" "%%get-declaration-locator" "else" "%%get-lexical-binding-name" "%%get-autoload-declaration-exported-module" "%%get-declaration-reference-name" "jazz.compose-name" "jazz.Autoload-Declaration" "%%get-export-declaration-symbol" "jazz.Export-Declaration" "%%is?" "cond" "decl" "effective-declaration-locator" "define" "add" "table" "suffix" "module-declaration")}
      {Lisp-Entry "jazz.generate-reference-list" define #f 611 9 611 37 ("%%cdar" "%%pair?" "map" "declarations" "%%caar" "%%get-declaration-locator" "module-locator" "out" "%%table->list" "in" "%%table-ref" "%%table-set!" "%%get-declaration-toplevel" "module" "jazz.resolve-binding" "resolved-declaration" "locator" "lambda" "%%get-module-declaration-references" "%%iterate-table" "eq?" "test:" "%%make-table" "partition" "%%get-lexical-binding-name" "%%get-declaration-parent" "%%eq?" "composite-name" "iter" "declaration" "root-declaration" "compose-name" "%%cdr" "else" "%%cons" "%%car" "%%list" "cond" "sorted" "item" "merge-sorted" "cdr" "%%string=?" "and" "%%string<?" "string2" "car" "%%symbol->string" "string1" "let" "%%null?" "or" "if" "name2" "name1" "lesser" "define" "module-declaration")}
      {Lisp-Entry "jazz.lookup-declaration" generic/specific ("jazz.Module-Declaration") 656 21 656 44 ("nextmethod" "declaration" "%%get-module-declaration-imports" "%%set-import-invoice-hit?" "%%table-ref" "jazz.public-access" "%%get-access-lookup" "imported" "%%get-module-invoice-module" "imported-module-declaration" "let" "module-invoice" "lambda" "for-each" "jazz.analysis-mode?" "%%when" "source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Module-Declaration") 668 21 668 42 (",@body-expansion" ",@registration-expansion" ",@variables-expansion" ",@literals-expansion" ",@autoloads-expansion" ",@inclusions-expansion" "jazz.queue-list" "%%get-module-declaration-imports" "%%get-module-declaration-exports" "%%get-lexical-binding-name" "syntax" "'syntax" "and" "%%get-module-invoice-phase" "jazz.resolve-reference" "module-declaration" ",symbol-name" ",name" "',name" "jazz.register-autoload" "jazz.compose-name" "symbol-name" "jazz.identifier-name" "name" "decl" "%%get-module-invoice-module" "%%get-declaration-reference-name" "cond" "%%get-export-invoice-autoload" "autoload" "%%get-module-invoice-only" "only" "module-invoice" "%%get-module-declaration-requires" ",unit-name" "',unit-name" "phase" "feature-requirement" "unit-name" "jazz.parse-require" "spec" "lambda" "for-each" ",dialect-name" "',dialect-name" "core" "'core" "%%neq?" "%%when" "%%get-module-declaration-dialect-name" "dialect-name" "core.module" "'core.module" "jazz.load-unit" "jazz.enqueue" "jazz.new-queue" "queue" "module" "'module" "jazz.declares" "else" "eval" "jazz.walk-for" "case" "begin" "jazz.emit-module-registration" "registration-expansion" "jazz.emit-module-autoloads" "autoloads-expansion" "jazz.emit-module-variables" "variables-expansion" "jazz.emit-module-literals" "literals-expansion" "jazz.emit-module-inclusions" "inclusions-expansion" "declaration" "%%get-namespace-declaration-body" "jazz.emit-namespace-statements" "body-expansion" "let" "environment")}
      {Lisp-Entry "jazz.get-module-proclaim" define #f 725 9 725 33 ("%%get-module-declaration-proclaims" "%%table-ref" "default" "proclaim-name" "module-declaration")}
      {Lisp-Entry "jazz.set-module-proclaim" define #f 729 9 729 33 ("%%get-module-declaration-proclaims" "%%table-set!" "value" "proclaim-name" "module-declaration")}
      {Lisp-Entry "jazz.all-warnings" define #f 733 8 733 25 ("optimizations")}
      {Lisp-Entry "jazz.proclaim" define #f 737 9 737 22 ("jazz.remove!" "else" "%%cons" "jazz.set-module-proclaim" "'warn" "jazz.get-module-proclaim" "module-warnings" "jazz.error" "%%memq" "%%not" "cond" "warning" "lambda" "for-each" "jazz.all-warnings" "%%null?" "warnings" "warn" "case" "receive" "not" "'not" "%%eq?" "if" "parse-clause" "values" "%%cdr" "parameters" "%%car" "kind" "let" "%%pair?" "%%assert" "not?" "parse-not" "define" "clause" "module-declaration")}
      {Lisp-Entry "jazz.get-module-warn?" define #f 770 9 770 30 ("warn" "'warn" "jazz.get-module-proclaim" "%%memq" "warning-name" "module-declaration")}
      {Lisp-Entry "jazz.Module-Invoice" define-class ("class runtime") 782 27 782 46 ()}
      {Lisp-Entry "jazz.find-module-invoice" define #f 788 9 788 33 ("%%eq?" "and" "invoice" "lambda" "jazz.find-if" "%%get-module-invoice-phase" "target-phase" "%%get-module-invoice-name" "target-name" "let" "target" "invoices")}
      {Lisp-Entry "jazz.Export-Invoice" define-class ("class runtime") 802 27 802 46 ()}
      {Lisp-Entry "jazz.new-export-invoice" define #f 805 9 805 32 ("jazz.Export-Invoice" "jazz.allocate-export-invoice" "autoload" "only" "version" "phase" "module" "name")}
      {Lisp-Entry "jazz.Import-Invoice" define-class ("class runtime") 817 27 817 46 ()}
      {Lisp-Entry "jazz.new-import-invoice" define #f 820 9 820 32 ("jazz.Import-Invoice" "jazz.allocate-import-invoice" "only" "version" "phase" "module" "name")}
      {Lisp-Entry "jazz.Export-Declaration" define-class ("class runtime") 832 27 832 50 ()}
      {Lisp-Entry "jazz.new-export-declaration" define #f 835 9 835 36 ("jazz.setup-declaration" "jazz.Export-Declaration" "jazz.allocate-export-declaration" "new-declaration" "let" "symbol" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Export-Declaration") 841 21 841 52 ("jazz.unspecified" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Export-Declaration") 845 21 845 42 ("begin" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Export-Declaration") 849 21 849 48 ("jazz.Any" "declaration" "%%get-export-declaration-symbol" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Export-Declaration") 856 21 856 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Export-Syntax-Declaration" define-class ("class runtime") 868 27 868 57 ()}
      {Lisp-Entry "jazz.new-export-syntax-declaration" define #f 871 9 871 43 ("jazz.setup-declaration" "jazz.Export-Syntax-Declaration" "jazz.allocate-export-syntax-declaration" "new-declaration" "let" "symbol" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Export-Syntax-Declaration") 877 21 877 52 ("jazz.unspecified" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Export-Syntax-Declaration") 881 21 881 42 ("begin" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Export-Syntax-Declaration") 885 21 885 48 ("jazz.Any" "declaration" "%%get-export-syntax-declaration-symbol" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Export-Syntax-Declaration") 892 21 892 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Autoload-Declaration" define-class ("class runtime") 904 27 904 52 ()}
      {Lisp-Entry "jazz.new-autoload-declaration" define #f 907 9 907 38 ("jazz.setup-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.Autoload-Declaration" "jazz.allocate-autoload-declaration" "new-declaration" "let" "exported-module" "module-declaration" "parent" "type" "name")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Autoload-Declaration") 913 21 913 37 ("declaration" "jazz.resolve-binding" "jazz.of-subtype?" "subtype")}
      {Lisp-Entry "jazz.resolve-binding" generic/specific ("jazz.Autoload-Declaration") 918 21 918 41 ("%%set-autoload-declaration-declaration" "%%get-declaration-locator" "jazz.error" "%%assertion" "jazz.public-access" "jazz.lookup-declaration" "decl" "%%get-lexical-binding-name" "name" "%%get-autoload-declaration-module" "%%get-autoload-declaration-exported-module" "jazz.resolve-reference" "exported-module" "let*" "declaration" "%%get-autoload-declaration-declaration" "or")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Autoload-Declaration") 928 21 928 52 ("declaration" "jazz.resolve-binding" "jazz.walk-binding-validate-call" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Autoload-Declaration") 932 21 932 48 ("jazz.autoload-locator" "jazz.new-code" "declaration" "jazz.resolve-binding" "referenced-declaration" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.autoload-locator" define #f 940 9 940 30 ("%%get-declaration-locator" "%%symbol->string" "%%string-append" "%%string->symbol" "referenced-declaration")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Autoload-Declaration") 945 21 945 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Literal" define-class ("class runtime") 957 27 957 39 ()}
      {Lisp-Entry "jazz.new-literal" define #f 960 9 960 25 ("jazz.Literal" "jazz.allocate-literal" "arguments" "name")}
      {Lisp-Entry "jazz.Void-Class" define-class ("class runtime") 972 27 972 42 ()}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Void-Class") 975 21 975 37 ("subtype")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Void-Class") 979 21 979 40 ("void" "'void")}
      {Lisp-Entry "jazz.Void" define-class ("class runtime") 986 27 986 36 ()}
      {Lisp-Entry "jazz.Opt-Type" define-class ("class runtime") 997 27 997 40 ()}
      {Lisp-Entry "jazz.new-opt-type" define #f 1000 9 1000 26 ("jazz.Opt-Type" "jazz.allocate-opt-type" "type")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Opt-Type") 1004 21 1004 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-opt-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.Key-Type" define-class ("class runtime") 1017 27 1017 40 ()}
      {Lisp-Entry "jazz.new-key-type" define #f 1020 9 1020 26 ("jazz.Key-Type" "jazz.allocate-key-type" "type" "key")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Key-Type") 1024 21 1024 40 ("%%symbol->string" "%%keyword->string" "%%string-append" "%%string->symbol" "%%get-key-type-type" "jazz.emit-specifier" "type-specifier" "type" "%%get-key-type-key" "key" "let")}
      {Lisp-Entry "jazz.Rest-Type" define-class ("class runtime") 1038 27 1038 41 ()}
      {Lisp-Entry "jazz.new-rest-type" define #f 1041 9 1041 27 ("jazz.Rest-Type" "jazz.allocate-rest-type" "type")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Rest-Type") 1045 21 1045 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-rest-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.Function-Type" define-class ("class runtime") 1061 27 1061 45 ()}
      {Lisp-Entry "jazz.new-function-type" define #f 1064 9 1064 31 ("jazz.Function-Type" "jazz.allocate-function-type" "%%length" "mandatory" "let" "result" "rest" "named" "optional" "positional")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Function-Type") 1069 21 1069 37 ("jazz.Function-Type" "%%get-object-class" "%%eq?" "jazz.Procedure" "jazz.of-subtype?" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Function-Type") 1074 21 1074 40 ("get-output-string" "%%string->symbol" "%%get-function-type-result" "%%not" "%%when" "%%get-function-type-rest" "rest" "%%get-function-type-positional" "jazz.emit-specifier" "display" "write-char" "set!" "if" "type" "lambda" "for-each" "first?" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Function-Type") 1093 21 1093 36 ("jazz.Procedure" "jazz.type-error" ",value" "%%procedure?" "%%not" "if" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Category-Type" define-class ("class runtime") 1109 27 1109 45 ()}
      {Lisp-Entry "jazz.new-category-type" define #f 1112 9 1112 31 ("jazz.Category-Type" "jazz.allocate-category-type" "declaration")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Category-Type") 1117 21 1117 37 ("subtype")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Category-Type") 1121 21 1121 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Category-Type") 1125 21 1125 40 ("get-output-string" "%%string->symbol" "type" "%%get-category-type-declaration" "jazz.emit-specifier" "write-char" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Values-Type" define-class ("class runtime") 1142 27 1142 43 ()}
      {Lisp-Entry "jazz.new-values-type" define #f 1145 9 1145 29 ("jazz.Values-Type" "jazz.allocate-values-type" "types")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Values-Type") 1149 21 1149 40 ("get-output-string" "%%string->symbol" "%%get-values-type-types" "jazz.emit-specifier" "set!" "if" "type" "lambda" "for-each" "first?" "write-char" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Restriction-Type" define-class ("class runtime") 1172 27 1172 48 ()}
      {Lisp-Entry "jazz.new-restriction-type" define #f 1175 9 1175 34 ("jazz.Restriction-Type" "jazz.allocate-restriction-type" "type" "base")}
      {Lisp-Entry "jazz.Complement-Type" define-class ("class runtime") 1187 27 1187 47 ()}
      {Lisp-Entry "jazz.new-complement-type" define #f 1190 9 1190 33 ("jazz.Complement-Type" "jazz.allocate-complement-type" "type")}
      {Lisp-Entry "jazz.Union-Type" define-class ("class runtime") 1202 27 1202 42 ()}
      {Lisp-Entry "jazz.new-union-type" define #f 1205 9 1205 28 ("jazz.Union-Type" "jazz.allocate-union-type" "types")}
      {Lisp-Entry "jazz.Template-Type" define-class ("class runtime") 1220 27 1220 45 ()}
      {Lisp-Entry "jazz.new-template-type" define #f 1223 9 1223 31 ("jazz.Template-Type" "jazz.allocate-template-type" "types" "class")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Template-Type") 1227 21 1227 40 ("get-output-string" "%%string->symbol" "%%get-template-type-types" "set!" "if" "lambda" "for-each" "first?" "write-char" "type" "%%get-template-type-class" "jazz.emit-specifier" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Nillable-Type" define-class ("class runtime") 1250 27 1250 45 ()}
      {Lisp-Entry "jazz.new-nillable-type" define #f 1253 9 1253 31 ("jazz.Nillable-Type" "jazz.allocate-nillable-type" "type")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Nillable-Type") 1257 21 1257 37 ("type" "%%get-nillable-type-type" "jazz.Boolean" "jazz.of-subtype?" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Nillable-Type") 1262 21 1262 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-nillable-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Nillable-Type") 1267 21 1267 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.object-declaration?" define #f 1280 8 1280 32 ()}
      {Lisp-Entry "jazz.Any-Class" define-class ("class runtime") 1292 27 1292 41 ()}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Any-Class") 1295 21 1295 37 ("subtype")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Any-Class") 1299 21 1299 40 ("any" "'any")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Any-Class") 1303 21 1303 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Any" define-class ("class runtime") 1310 27 1310 35 ()}
      {Lisp-Entry "jazz.emit-type-cast" define #f 1327 13 1327 32 ("%%fixnum->flonum" "%%fixnum?" ",value" "jazz.Flonum" "%%eq?" "jazz.generate-symbol" "value" "let" "jazz.sourcified-form" "%%get-code-type" "%%subtype?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-type-cast" define #f 1339 12 1339 31 ("jazz.emit-check" "begin" "%%fixnum->flonum" "%%fixnum?" ",value" "jazz.Flonum" "%%eq?" "jazz.generate-symbol" "value" "let" "jazz.sourcified-form" "%%get-code-type" "%%subtype?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-parameter-cast" define #f 1358 13 1358 37 ("%%fixnum->flonum" "set!" ",parameter" "%%fixnum?" "jazz.Flonum" "jazz.sourcified-form" "parameter" "let" "jazz.object-declaration?" "%%object-class?" "jazz.Any" "%%eq?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-parameter-cast" define #f 1368 12 1368 36 ("jazz.emit-check" "%%fixnum->flonum" "set!" ",parameter" "%%fixnum?" "jazz.Flonum" "jazz.sourcified-form" "parameter" "let" "jazz.object-declaration?" "%%object-class?" "jazz.Any" "%%eq?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.parse-specifier" define #f 1398 9 1398 29 ("%%cdr" "%%car" "jazz.source-code" "jazz.specifier?" "%%pair?" "and" "if" "proc" "lst")}
      {Lisp-Entry "jazz.walk-specifier" define #f 1404 9 1404 28 ("%%cons" "%%list" "atomic?" "jazz.new-function-type" "rest" "named" "optional" "positional" "lambda" "jazz.butlast" "jazz.Rest-Type" "%%class-is?" "jazz.last" "last" "%%null?" "proc" "types" "split-parameters" "result" "parameters" "new-function-type" "jazz.new-template-type" "jazz.new-values-type" "values" "'values" "jazz.new-category-type" "category" "'category" "jazz.new-key-type" "%%string->keyword" "key" "'key" "jazz.new-opt-type" "type" "opt" "'opt" "%%eq?" "jazz.new-rest-type" "jazz.new-nillable-type" "case" "parse-atomic" "write-char" "get-output-string" "%%string->symbol" "%%eof-object?" "open-output-string" "output" "parse-name" "else" "cond" "next" "parse" "jazz.enqueue" "jazz.queue-list" "begin" "iter" "jazz.new-queue" "queue" "terminator" "separator" "parse-until" "jazz.lookup-reference" "jazz.lookup-primitive-type" "or" "name" "lookup-type" "%%eqv?" "consume" "1" "%%fx+" "set!" "read-char" "c" "readc" "peek-char" "peekc" "jazz.walk-error" "jazz.error" "%%not" "if" "%%substring" "jazz.format" "error-message" "message" "ill-formed" "define" "0" "at" "open-input-string" "input" "%%symbol->string" "string" "let" "specifier" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.specifier->type" define #f 1544 9 1544 29 ("jazz.walk-specifier" "if" "specifier" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.type->specifier" define #f 1550 9 1550 29 ("jazz.name->specifier" "jazz.specifier?" "if" "jazz.emit-specifier" "symbol" "let" "type")}
      {Lisp-Entry "jazz.primitive-types" define #f 1562 8 1562 28 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.lookup-primitive-type" define #f 1607 9 1607 35 ("jazz.primitive-types" "%%table-ref" "name")}
      {Lisp-Entry "jazz.primitive-declarations" define #f 1611 8 1611 35 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.patch-type-until-unification" define #f 1655 9 1655 42 ("jazz.public-access" "jazz.lookup-declaration" "jazz.get-catalog-entry" "module-declaration" "jazz.dialect.language.functional" "'jazz.dialect.language.functional" "jazz.dialect.language.object" "'jazz.dialect.language.object" "Object" "'Object" "%%eq?" "module-name" "if" "jazz.primitive-declarations" "%%table-ref" "name" "let" "type")}
      {Lisp-Entry "jazz.Macro-Declaration" define-class ("class runtime") 1671 27 1671 49 ()}
      {Lisp-Entry "jazz.new-macro-declaration" define #f 1674 9 1674 35 ("jazz.setup-declaration" "jazz.Macro-Declaration" "jazz.allocate-macro-declaration" "new-declaration" "let" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Macro-Declaration") 1680 21 1680 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Macro-Declaration") 1684 21 1684 50 ("%%cdr" "%%apply" "jazz.need-macro" "expander" "jazz.load-unit" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Macro-Declaration") 1695 21 1695 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "jazz.define-macro" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-macro-declaration-body" "body" "%%get-macro-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Macro-Declaration") 1708 21 1708 42 ("%%get-macro-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Syntax-Declaration" define-class ("class runtime") 1722 27 1722 50 ()}
      {Lisp-Entry "jazz.new-syntax-declaration" define #f 1725 9 1725 36 ("jazz.setup-declaration" "jazz.Syntax-Declaration" "jazz.allocate-syntax-declaration" "new-declaration" "let" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Syntax-Declaration") 1731 21 1731 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Syntax-Declaration") 1735 21 1735 50 ("jazz.need-macro" "expander" "jazz.load-unit" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Syntax-Declaration") 1745 21 1745 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "jazz.define-macro" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-syntax-declaration-body" "body" "%%get-syntax-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Syntax-Declaration") 1758 21 1758 42 ("%%get-syntax-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Define-Syntax-Declaration" define-class ("class runtime") 1772 27 1772 57 ()}
      {Lisp-Entry "jazz.new-define-syntax-declaration" define #f 1775 9 1775 43 ("jazz.setup-declaration" "jazz.Define-Syntax-Declaration" "jazz.allocate-define-syntax-declaration" "new-declaration" "let" "syntax-form" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Define-Syntax-Declaration") 1781 21 1781 42 ("%%get-declaration-source" "jazz.register-macro" "jazz.emit-expression" "jazz.sourcified-form" "',locator" "jazz.new-define-syntax-form" "tmp" ",current-unit-name" "',current-unit-name" "jazz.outline-module" "else" "cons" "x" "=>" "jazz" "'jazz" "cond" "core" "'core" "scheme" "'scheme" "jazz.get-dialect" "%%get-dialect-bindings" "jazz.new-walk-frame" "%%list" "env" "let*" ",locator" "define" "jazz.sourcify-if" "%%get-declaration-toplevel" "current-unit-name" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-syntax-declaration-body" "body" "%%get-syntax-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Define-Syntax-Declaration") 1819 21 1819 50 ("%%get-define-syntax-form-environment" "macro-environment" "%%get-syntax-form-expander" "expander" "jazz.need-macro" "define-syntax-form" "let*" "jazz.load-unit" "%%get-declaration-parent" "parent-declaration" "jazz.walk-warning" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Walk-Context" define-class ("class runtime") 1839 27 1839 44 ()}
      {Lisp-Entry "jazz.new-walk-context" define #f 1842 9 1842 30 ("jazz.Walk-Context" "jazz.allocate-walk-context" "pathname" "locator" "policy")}
      {Lisp-Entry "jazz.walk-context" define #f 1846 8 1846 25 ("make-parameter")}
      {Lisp-Entry "jazz.get-walk-context" define #f 1850 9 1850 30 ("jazz.walk-context")}
      {Lisp-Entry "jazz.need-walk-context" define #f 1854 9 1854 31 ("jazz.error" "jazz.walk-context" "or")}
      {Lisp-Entry "jazz.get-walk-policy" define #f 1859 9 1859 29 ("%%get-walk-context-policy" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.get-walk-locator" define #f 1866 9 1866 30 ("%%get-walk-context-locator" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.get-walk-pathname" define #f 1873 9 1873 31 ("%%get-walk-context-pathname" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.Walk-Location" define-class ("class runtime") 1888 27 1888 45 ()}
      {Lisp-Entry "jazz.new-walk-location" define #f 1891 9 1891 31 ("jazz.Walk-Location" "jazz.allocate-walk-location" "path" "locat" "declaration-locator" "unit-locator")}
      {Lisp-Entry "jazz.walk-location" define #f 1895 9 1895 27 ("%%locat-container" "%%container->path" "if" "%%get-declaration-locator" "jazz.get-walk-locator" "jazz.new-walk-location" "locat" "declaration" "walker")}
      {Lisp-Entry "jazz.Walk-Problem" define-class ("class runtime") 1911 27 1911 44 ()}
      {Lisp-Entry "jazz.Walk-Problems" define-class ("class runtime") 1922 27 1922 45 ()}
      {Lisp-Entry "jazz.new-walk-problems" define #f 1925 9 1925 31 ("jazz.Walk-Problems" "jazz.allocate-walk-problems" "errors" "warnings" "message")}
      {Lisp-Entry "jazz.get-detail" generic/specific ("jazz.Walk-Problems") 1929 21 1929 36 ("jazz.partition-walk-problems-unit" "jazz.partition-walk-problems-declaration" "jazz.queue-list" "declaration-details" "1" "%%fx+" "%%substring" "%%fx=" "declaration-locator" "jazz.new-queue" "unit-details" "or" "%%symbol->string" "%%string-length" "-1" "%%not" "if" "prefix" "unit-locator" "jazz.bind" "partition" "map" "%%get-walk-problems-errors" "%%get-walk-problems-warnings" "%%append" "all" "let" "%%get-walk-problem-location" "jazz.present-exception" "jazz.new-exception-detail" "jazz.enqueue" "problem" "lambda" "for-each" "queue" "problems" "add-details" "define")}
      {Lisp-Entry "jazz.Walk-Warning" define-class ("class runtime") 1965 27 1965 44 ()}
      {Lisp-Entry "jazz.new-walk-warning" define #f 1968 9 1968 30 ("jazz.Walk-Warning" "jazz.allocate-walk-warning" "message" "location")}
      {Lisp-Entry "jazz.Walk-Error" define-class ("class runtime") 1980 27 1980 42 ()}
      {Lisp-Entry "jazz.new-walk-error" define #f 1983 9 1983 28 ("jazz.Walk-Error" "jazz.allocate-walk-error" "message" "location")}
      {Lisp-Entry "jazz.Unresolved-Error" define-class ("class runtime") 1995 27 1995 48 ()}
      {Lisp-Entry "jazz.new-unresolved-error" define #f 1998 9 1998 34 ("jazz.Unresolved-Error" "jazz.allocate-unresolved-error" "symbol" "location")}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.Unresolved-Error") 2002 21 2002 43 ("error" "%%get-unresolved-error-symbol" "jazz.format")}
      {Lisp-Entry "jazz.Walk-Frame" define-class ("class runtime") 2015 27 2015 42 ()}
      {Lisp-Entry "jazz.new-walk-frame" define #f 2018 9 2018 28 ("jazz.Walk-Frame" "jazz.allocate-walk-frame" "%%table-set!" "%%get-lexical-binding-name" "name" "binding" "lambda" "for-each" "eq?" "test:" "%%make-table" "table" "let" "bindings")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Walk-Frame") 2027 21 2027 45 ("binding" "%%get-walk-frame-bindings" "%%table-ref" "source-declaration" "symbol")}
      {Lisp-Entry "jazz.Signature" define-class ("class runtime") 2039 27 2039 41 ()}
      {Lisp-Entry "jazz.new-signature" define #f 2042 9 2042 27 ("jazz.Signature" "jazz.allocate-signature" "%%length" "mandatory" "let" "rest" "named" "optional" "positional")}
      {Lisp-Entry "jazz.only-positional?" define #f 2047 9 2047 30 ("%%get-signature-rest" "%%not" "%%get-signature-named" "%%get-signature-optional" "%%null?" "and" "signature")}
      {Lisp-Entry "jazz.Symbol-Binding" define-class ("class runtime") 2061 27 2061 46 ()}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Symbol-Binding") 2064 21 2064 45 ("%%get-lexical-binding-name" "unwrap-syntactic-closure" "binding" "%%get-symbol-binding-gensym" "or" "environment" "declaration")}
      {Lisp-Entry "jazz.Variable" define-class ("class runtime") 2077 27 2077 40 ()}
      {Lisp-Entry "jazz.new-variable" define #f 2080 9 2080 26 ("0" "jazz.Variable" "jazz.allocate-variable" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.variable-name-valid?" define #f 2085 9 2085 34 ("%%get-syntactic-closure-form" "syntactic-closure?" "if" "jazz.specifier?" "%%not" "%%symbol?" "and" "variable-name-valid-symbol?" "define" "name")}
      {Lisp-Entry "jazz.walk-binding-referenced" generic/specific ("jazz.Variable") 2096 21 2096 49 ("1" "%%get-variable-reference-count" "%%fx+" "binding" "%%set-variable-reference-count")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Variable") 2100 21 2100 48 ("jazz.find-annotated-type" "binding" "jazz.emit-binding-symbol" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-assignable?" generic/specific ("jazz.Variable") 2107 21 2107 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" generic/specific ("jazz.Variable") 2111 21 2111 49 ("jazz.Any" "jazz.sourcified-form" "jazz.emit-binding-symbol" "set!" "jazz.new-code" "%%get-code-type" "jazz.extend-annotated-type" "jazz.Annotated-Variable" "%%class-is?" "%%when" "binding" "jazz.find-annotated" "annotated-type" "annotated-variable" "annotated-frame" "receive" "jazz.emit-expression" "value-code" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.NextMethod-Variable" define-class ("class runtime") 2131 27 2131 51 ()}
      {Lisp-Entry "jazz.new-nextmethod-variable" define #f 2134 9 2134 37 ("0" "jazz.NextMethod-Variable" "jazz.allocate-nextmethod-variable" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.NextMethod-Variable") 2139 21 2139 48 ("jazz.Any" "jazz.sourcified-form" ",name" "apply" "rest" "lambda" "if" "jazz.new-code" "jazz.*self*" "self" "binding" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.NextMethod-Variable") 2150 21 2150 52 ("declaration" "jazz.validate-arguments" "if" "jazz.get-nextmethod-signature" "signature" "let" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" generic/specific ("jazz.NextMethod-Variable") 2156 21 2156 43 ("jazz.call-return-type" "jazz.codes-forms" "jazz.sourcified-form" ",name" "jazz.new-code" "if" "jazz.*self*" "self" "%%get-lexical-binding-type" "type" "binding" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration" "arguments" "binding-src")}
      {Lisp-Entry "jazz.Parameter" define-class ("class runtime") 2182 27 2182 41 ()}
      {Lisp-Entry "jazz.new-parameter" define #f 2185 9 2185 27 ("0" "jazz.Parameter" "jazz.allocate-parameter" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Parameter~virtual-runtime") 2190 30 2190 49 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Parameter") 2193 21 2193 40 ("parameter" "jazz.emit-binding-symbol" "environment" "declaration")}
      {Lisp-Entry "jazz.Dynamic-Parameter" define-class ("class runtime") 2205 27 2205 49 ()}
      {Lisp-Entry "jazz.new-dynamic-parameter" define #f 2208 9 2208 35 ("0" "jazz.Dynamic-Parameter" "jazz.allocate-dynamic-parameter" "class" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Dynamic-Parameter") 2212 21 2212 40 ("jazz.emit-binding-symbol" "jazz.emit-expression" "jazz.sourcified-form" "%%list" "parameter" "%%get-dynamic-parameter-class" "class" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Optional-Parameter" define-class ("class runtime") 2225 27 2225 50 ()}
      {Lisp-Entry "jazz.new-optional-parameter" define #f 2228 9 2228 36 ("0" "jazz.Optional-Parameter" "jazz.allocate-optional-parameter" "default" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Optional-Parameter") 2232 21 2232 40 ("jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-binding-symbol" "%%list" "parameter" "%%get-optional-parameter-default" "default" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Named-Parameter" define-class ("class runtime") 2245 27 2245 47 ()}
      {Lisp-Entry "jazz.new-named-parameter" define #f 2248 9 2248 33 ("0" "jazz.Named-Parameter" "jazz.allocate-named-parameter" "default" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Named-Parameter") 2252 21 2252 40 ("jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "%%list" "parameter" "%%get-named-parameter-default" "default" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Named-Parameter") 2257 21 2257 45 ("parameter" "%%get-lexical-binding-name" "environment" "declaration")}
      {Lisp-Entry "jazz.Rest-Parameter" define-class ("class runtime") 2269 27 2269 46 ()}
      {Lisp-Entry "jazz.new-rest-parameter" define #f 2272 9 2272 32 ("0" "jazz.Rest-Parameter" "jazz.allocate-rest-parameter" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Rest-Parameter") 2276 21 2276 40 ("parameter" "jazz.emit-binding-symbol" "environment" "declaration")}
      {Lisp-Entry "jazz.Self-Binding" define-class ("class runtime") 2291 27 2291 44 ()}
      {Lisp-Entry "jazz.new-self-binding" define #f 2294 9 2294 30 ("self" "'self" "jazz.Self-Binding" "jazz.allocate-self-binding" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Self-Binding") 2298 21 2298 48 ("%%get-declaration-parent" "self" "'self" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Dynamic-Self-Binding" define-class ("class runtime") 2313 27 2313 52 ()}
      {Lisp-Entry "jazz.new-dynamic-self-binding" define #f 2316 9 2316 38 ("self" "'self" "jazz.Dynamic-Self-Binding" "jazz.allocate-dynamic-self-binding" "code" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Dynamic-Self-Binding") 2320 21 2320 48 ("%%get-declaration-parent" "declaration" "%%get-dynamic-self-binding-code" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.*self*" define #f 2335 8 2335 19 ("make-parameter")}
      {Lisp-Entry "jazz.Local-Variable-Binding" define-class ("class runtime") 2344 27 2344 54 ()}
      {Lisp-Entry "jazz.new-local-variable-binding" define #f 2347 9 2347 40 ("jazz.Local-Variable-Binding" "jazz.allocate-local-variable-binding" "variable" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Local-Variable-Binding") 2351 21 2351 48 ("jazz.Any" "declaration" "%%get-local-variable-binding-variable" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Macro-Symbol" define-class ("class runtime") 2366 27 2366 44 ()}
      {Lisp-Entry "jazz.new-macro-symbol" define #f 2369 9 2369 30 ("jazz.Macro-Symbol" "jazz.allocate-macro-symbol" "setter" "getter" "name")}
      {Lisp-Entry "jazz.Form-Binding" define-class ("class runtime") 2398 27 2398 44 ()}
      {Lisp-Entry "jazz.special-forms" define #f 2409 8 2409 26 ()}
      {Lisp-Entry "jazz.add-special-form" define #f 2413 9 2413 30 ("%%cons" "jazz.special-forms" "set!" "special-form" "symbol")}
      {Lisp-Entry "jazz.find-special-form" define #f 2417 9 2417 31 ("symbol")}
      {Lisp-Entry "jazz.Special-Form" define-class ("class runtime") 2424 27 2424 44 ()}
      {Lisp-Entry "jazz.new-special-form" define #f 2427 9 2427 30 ("jazz.Special-Form" "jazz.allocate-special-form" "walk" "name")}
      {Lisp-Entry "jazz.walk-binding-walkable?" generic/specific ("jazz.Special-Form") 2431 21 2431 48 ()}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Special-Form") 2435 21 2435 48 ("binding" "%%get-lexical-binding-name" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-walk-form" generic/specific ("jazz.Special-Form") 2439 21 2439 48 ("jazz.find-special-form" "%%symbol?" "if" "walk" "binding" "%%get-special-form-walk" "walk-proc/symbol" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Macro-Form" define-class ("class runtime") 2456 27 2456 42 ()}
      {Lisp-Entry "jazz.new-macro-form" define #f 2459 9 2459 28 ("jazz.Macro-Form" "jazz.allocate-macro-form" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Macro-Form") 2463 21 2463 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Macro-Form") 2467 21 2467 50 ("%%cdr" "apply" "binding" "%%get-macro-form-expander" "expander" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Syntax-Form" define-class ("class runtime") 2481 27 2481 43 ()}
      {Lisp-Entry "jazz.new-syntax-form" define #f 2484 9 2484 29 ("jazz.Syntax-Form" "jazz.allocate-syntax-form" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Syntax-Form") 2488 21 2488 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Syntax-Form") 2492 21 2492 50 ("binding" "%%get-syntax-form-expander" "expander" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Define-Syntax-Form" define-class ("class runtime") 2505 27 2505 50 ()}
      {Lisp-Entry "jazz.new-define-syntax-form" define #f 2508 9 2508 36 ("jazz.Define-Syntax-Form" "jazz.allocate-define-syntax-form" "environment" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Define-Syntax-Form") 2512 21 2512 50 ("%%get-define-syntax-form-environment" "macro-environment" "binding" "%%get-syntax-form-expander" "expander" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Syntactic-Closure" define-class ("class runtime") 2526 27 2526 49 ()}
      {Lisp-Entry "syntactic-closure?" define #f 2529 9 2529 27 ("jazz.Syntactic-Closure" "%%class-is?" "x")}
      {Lisp-Entry "make-syntactic-closure" define #f 2532 9 2532 31 ("jazz.Syntactic-Closure" "jazz.allocate-syntactic-closure" "%%source-code" "%%source?" "and" "%%pair?" "%%symbol?" "or" "if" "form" "vars" "env")}
      {Lisp-Entry "syntactic-closure-form" define #f 2540 9 2540 31 ("%%get-syntactic-closure-form" "sc")}
      {Lisp-Entry "unwrap-syntactic-closure" define #f 2543 9 2543 33 ("else" "%%source-code" "%%source?" "%%get-syntactic-closure-form" "unwrap-syntactic-closure" "syntactic-closure?" "cond" "x")}
      {Lisp-Entry "strip-syntactic-closures" define #f 2551 9 2551 33 ("else" "%%vector->list" "%%list->vector" "%%vector?" "%%cdr" "%%car" "cons" "%%pair?" "%%source-code" "%%source?" "%%get-syntactic-closure-form" "strip-syntactic-closures" "syntactic-closure?" "cond" "x")}
      {Lisp-Entry "strip-source-info" define #f 2564 9 2564 26 ("else" "%%vector->list" "%%list->vector" "%%vector?" "%%cdr" "%%car" "cons" "%%pair?" "%%source-code" "strip-source-info" "%%source?" "cond" "x")}
      {Lisp-Entry "identifier?" define #f 2574 9 2574 20 ("symbol?" "else" "%%source-code" "%%source?" "syntactic-closure-form" "identifier?" "syntactic-closure?" "cond" "x")}
      {Lisp-Entry "identifier=?" define #f 2581 9 2581 21 ("not" "and" "y^" "unwrap-syntactic-closure" "x^" "let" "eq?" "or" "%%get-lexical-binding-name" "jazz.Lexical-Binding" "%%class-is?" "binding-name" "jazz.walk-binding-lookup" "binding" "lambda" "jazz.find-in" "jazz.composite-name?" "if" "environment" "symbol" "lookup-identifier" "define" "y" "y-env" "x" "x-env")}
      {Lisp-Entry "sc-macro-transformer" define #f 2601 8 2601 28 ("make-syntactic-closure" "mac-env" "use-env" "expr" "f" "lambda")}
      {Lisp-Entry "rsc-macro-transformer" define #f 2606 8 2606 29 ("mac-env" "use-env" "expr" "f" "lambda")}
      {Lisp-Entry "er-macro-transformer" define #f 2611 8 2611 28 ("identifier=?" "y" "x" "compare" "cons" "set!" "make-syntactic-closure" "name" "else" "cdr" "=>" "assq" "cond" "identifier" "renames" "rename" "let" "mac-env" "use-env" "expr" "f" "lambda")}
      {Lisp-Entry "jazz.Annotated-Variable" define-class ("class runtime") 2636 27 2636 50 ()}
      {Lisp-Entry "jazz.new-annotated-variable" define #f 2639 9 2639 36 ("jazz.Annotated-Variable" "jazz.allocate-annotated-variable" "type" "declared-type" "variable")}
      {Lisp-Entry "jazz.Restricted-Binding" define-class ("class runtime") 2651 27 2651 50 ()}
      {Lisp-Entry "jazz.new-restricted-binding" define #f 2654 9 2654 36 ("jazz.Restricted-Binding" "jazz.allocate-restricted-binding" "type" "binding")}
      {Lisp-Entry "jazz.Annotated-Frame" define-class ("class runtime") 2666 27 2666 47 ()}
      {Lisp-Entry "jazz.new-annotated-frame" define #f 2669 9 2669 33 ("jazz.Annotated-Frame" "jazz.allocate-annotated-frame" "reset" "variables")}
      {Lisp-Entry "jazz.inspect-annotated-variable" define #f 2677 9 2677 40 ("%%get-annotated-variable-type" "%%get-annotated-variable-variable" ":variable" "%%get-restricted-binding-type" "%%get-restricted-binding-binding" "%%get-lexical-binding-name" ":restricted" "jazz.Restricted-Binding" "%%class-is?" "if" "jazz.object->serial-symbol" "serial" "let" "variable")}
      {Lisp-Entry "jazz.inspect-annotated-frame" define #f 2688 9 2688 37 ("%%get-annotated-frame-variables" "jazz.inspect-annotated-variable" "map" ":frame" "frame")}
      {Lisp-Entry "jazz.inspect-annotated-environment" define #f 2693 9 2693 43 ("jazz.inspect-annotated-frame" "map" ":environment" "environment")}
      {Lisp-Entry "jazz.Code" define-class ("class runtime") 2703 27 2703 36 ()}
      {Lisp-Entry "jazz.new-code" define #f 2706 9 2706 22 ("jazz.Code" "jazz.allocate-code" "source" "type" "form")}
      {Lisp-Entry "jazz.codes-forms" define #f 2713 9 2713 25 ("jazz.sourcified-form" "code" "lambda" "map" "codes")}
      {Lisp-Entry "jazz.codes-types" define #f 2719 9 2719 25 ("%%get-code-type" "code" "lambda" "map" "codes")}
      {Lisp-Entry "jazz.sourcify-code" define #f 2726 9 2726 27 ("%%get-code-type" "%%get-code-form" "jazz.new-code" "%%source?" "%%not" "or" "if" "src" "code")}
      {Lisp-Entry "jazz.sourcified-form" define #f 2735 9 2735 29 ("jazz.sourcify-if" "%%get-code-source" "src" "%%get-code-form" "form" "let" "code")}
      {Lisp-Entry "jazz.sourcified-form2" define #f 2742 9 2742 30 ("jazz.sourcify-if" "%%get-code-form" "form" "let" "src" "code")}
      {Lisp-Entry "jazz.annotate-signature" define #f 2752 9 2752 32 ("jazz.queue-list" "%%when" "for-each" "jazz.new-annotated-variable" "jazz.enqueue" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "parameter" "annotate" "define" "jazz.new-queue" "queue" "%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "let" "signature")}
      {Lisp-Entry "jazz.annotate-inlined-signature" define #f 2771 9 2771 40 ("jazz.queue-list" "jazz.new-annotated-variable" "jazz.enqueue" "%%get-code-type" "or" "type" "%%get-lexical-binding-type" "declared-type" "argument" "parameter" "lambda" "for-each" "jazz.new-queue" "queue" "%%get-signature-positional" "positional" "let" "arguments" "signature")}
      {Lisp-Entry "jazz.annotate-bindings" define #f 2783 9 2783 31 ("jazz.new-annotated-variable" "jazz.Void" "or" "type" "%%get-lexical-binding-type" "declared-type" "%%cdr" "value" "%%car" "variable" "let" "binding" "lambda" "map" "bindings")}
      {Lisp-Entry "jazz.annotate-receive" define #f 2793 9 2793 30 ("jazz.new-annotated-variable" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "let" "parameter" "lambda" "map" "parameters")}
      {Lisp-Entry "jazz.annotate-internal-defines" define #f 2801 9 2801 39 ("jazz.new-annotated-variable" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "%%get-internal-define-variable" "variable" "let" "internal-define" "lambda" "map" "internal-defines")}
      {Lisp-Entry "jazz.with-annotated-frame" define #f 2810 9 2810 34 ("jazz.new-annotated-frame" "set!" "k" "lambda" "continuation-capture" "reset" "let" "proc" "variables")}
      {Lisp-Entry "jazz.find-annotated" define #f 2818 9 2818 28 ("%%get-annotated-variable-type" "%%get-annotated-variable-variable" "%%cdr" "set!" "%%not" "begin" "%%get-restricted-binding-type" "values" "%%eq?" "jazz.Declaration" "and" "%%get-restricted-binding-binding" "binding" "jazz.Restricted-Binding" "annotated-variable" "else" "list" "jazz.Variable" "%%get-annotated-frame-variables" "jazz.Annotated-Frame" "%%class-is?" "cond" "variables" "iter-variables" "or" "%%car" "annotated-frame" "%%null?" "if" "frames" "iter-frames" "type" "let" "environment" "variable")}
      {Lisp-Entry "jazz.find-annotated-type" define #f 2850 9 2850 33 ("%%get-lexical-binding-type" "info" "let" "jazz.find-annotated" "type" "variable" "frame" "receive" "jazz.Variable" "%%class-is?" "if" "environment" "binding")}
      {Lisp-Entry "jazz.extend-annotated-type" define #f 2863 9 2863 35 ("continuation-return" "%%get-annotated-frame-reset" "reset" "jazz.Any" "extended-type" "%%subtype?" "%%not" "%%when" "%%set-annotated-variable-type" "jazz.Void" "%%eq?" "if" "%%get-annotated-variable-type" "actual-type" "%%get-annotated-variable-declared-type" "declared-type" "let" "new-type" "variable" "frame")}
      {Lisp-Entry "jazz.extend-type" define #f 2886 9 2886 25 ("else" "%%subtype?" "jazz.Void" "%%eq?" "jazz.Any" "%%not" "or" "cond" "type2" "type1")}
      {Lisp-Entry "jazz.extend-types" define #f 2900 9 2900 26 ("%%cdr" "jazz.extend-types" "%%car" "jazz.extend-type" "jazz.Void" "%%null?" "if" "types")}
      {Lisp-Entry "jazz.type-union" define #f 2906 9 2906 24 ("jazz.new-union-type" "types")}
      {Lisp-Entry "jazz.type-difference" define #f 2910 9 2910 29 ("type2" "type1")}
      {Lisp-Entry "jazz.Walker" define-class ("class runtime") 2919 27 2919 38 ()}
      {Lisp-Entry "jazz.walk-warning" define #f 2927 9 2927 26 ("jazz.new-walk-warning" "jazz.walker-warning" "jazz.format" "apply" "message" "jazz.source-locat" "jazz.walk-location" "location" "let" "rest" "fmt-string" "src" "declaration" "walker")}
      {Lisp-Entry "jazz.walk-error" define #f 2933 9 2933 24 ("jazz.new-walk-error" "jazz.walker-error" "jazz.format" "apply" "message" "jazz.source-locat" "jazz.walk-location" "location" "let" "rest" "fmt-string" "src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-unresolved" define #f 2939 9 2939 29 ("jazz.source-code" "jazz.new-unresolved-error" "jazz.walker-error" "jazz.source-locat" "jazz.walk-location" "location" "let" "symbol-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walker-warning" define #f 2944 9 2944 28 ("%%list" "%%get-walker-warnings" "%%append" "%%set-walker-warnings" "jazz.warnings?" "if" "warning" "walker")}
      {Lisp-Entry "jazz.walker-error" define #f 2949 9 2949 26 ("jazz.validate-walk-problems" "jazz.unspecified" "continuation-return" "jazz.delay-reporting?" "and" "if" "%%list" "%%get-walker-errors" "%%append" "%%set-walker-errors" "error" "resume" "walker")}
      {Lisp-Entry "jazz.validate-walk-problems" define #f 2956 9 2956 36 ("jazz.new-walk-problems" "raise" "get-output-string" "message" "jazz.partition-walk-problems-unit" "jazz.partition-walk-problems-declaration" "jazz.present-exception" "problem" "1" "%%fx+" "%%substring" "%%fx=" "toplevel?" "declaration-locator" "%%symbol->string" "%%string-length" "-1" "%%not" "if" "prefix" "problems" "unit-locator" "jazz.bind" "partition" "lambda" "for-each" "jazz.format" "%%append" "all" "open-output-string" "output" "%%not-null?" "or" "%%when" "%%get-walker-errors" "errors" "%%get-walker-warnings" "warnings" "let" "walker")}
      {Lisp-Entry "jazz.partition-walk-problems-unit" define #f 2984 9 2984 42 ("assv" "%%get-walk-problem-location" "%%get-walk-location-unit-locator" "problem" "lambda" "jazz.partition" "problems")}
      {Lisp-Entry "jazz.partition-walk-problems-declaration" define #f 2991 9 2991 49 ("assoc" "%%get-walk-problem-location" "%%get-walk-location-declaration-locator" "%%symbol->string" "problem" "lambda" "jazz.partition" "problems")}
      {Lisp-Entry "jazz.parse-modifiers" define #f 3003 9 3003 29 ("%%cdar" "%%cons" "%%reverse" "values" "%%apply" "res" "lp" "modifiers" "let" "jazz.walk-error" "lambda" "=>" "%%eq?" "to" "from" "names" "get-modifier" "%%car" "jazz.source-code" "%%pair?" "and" "if" "ls" "skip-modifiers" "%%cdr" "else" "%%caar" "%%memq" "%%null?" "cond" "x" "is-modifier?" "define" "rest" "infos" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-unit-declaration" define #f 3034 9 3034 36 ("jazz.new-unit-declaration" "jazz.error" "%%neq?" "jazz.requested-unit-name" "access" "name" "%%desourcify" "jazz.filter-features" "jazz.listify" "map" "append" "set!" "require" "'require" "%%eq?" "%%pair?" "and" "expr" "lambda" "for-each" "requires" "body" "collect-requires" "%%cdr" "'public" "%%cddr" "%%cadr" "public" "protected" "%%memq" "if" "%%car" "jazz.source-code" "first" "let" "proc" "rest" "parse" "define" "partial-form")}
      {Lisp-Entry "jazz.parse-module" define #f 3063 9 3063 26 ("%%symbol?" "%%assert" "%%cddr" "body" "%%cadr" "dialect-name" "name" "access" "receive" "'public" "%%cdr" "values" "public" "protected" "%%memq" "if" "%%car" "jazz.source-code" "first" "let" "rest" "parse-modifiers" "define" "partial-form")}
      {Lisp-Entry "jazz.parse-module-invoice" define #f 3081 9 3081 34 ("%%reverse" "values" "'autoload" "'only" "'phase" "%%cdar" "begin" "'load" "%%caar" "%%eq?" "if" "%%cons" "set!" "%%not" "and" "%%while" "autoload" "only" "phase" "load" "version" "%%cdr" "scan" "%%car" "name" "let" "jazz.error" "%%pair?" "%%assertion" "specification")}
      {Lisp-Entry "jazz.parse-module-declaration" define #f 3121 9 3121 38 ("jazz.walk-module-declaration" "jazz.dialect-walker" "walker" "jazz.require-dialect" "dialect" "jazz.load-dialect-invoice" "dialect-invoice" "let*" "jazz.new-walk-context" "jazz.walk-context" "parameterize" "jazz.error" "%%neq?" "jazz.requested-unit-name" "and" "if" "jazz.parse-module" "body" "dialect-name" "access" "name" "receive" "partial-form")}
      {Lisp-Entry "jazz.walk-module-declaration" define #f 3132 9 3132 37 ("jazz.validate-walk-problems" "jazz.walker-environment" "%%cons" "jazz.walk-declarations" "%%set-module-declaration-walker" "jazz.add-module-import" "%%when" "jazz.new-module-declaration" "or" "declaration" "let" "body" "dialect-invoice" "dialect-name" "access" "name" "actual" "walker")}
      {Lisp-Entry "jazz.walk-module-export" define #f 3143 9 3143 32 ("jazz.new-autoload-reference" "jazz.new-export-reference" "symbol" "lambda" "map" "%%not" "if" "jazz.new-export-invoice" "jazz.new-module-reference" "module-reference" "let" "jazz.parse-module-invoice" "module-autoload" "module-only" "module-version" "module-phase" "module-load" "module-name" "receive" "export" "walker")}
      {Lisp-Entry "jazz.expand-module-source" define #f 3162 9 3162 34 ("jazz.walk-module" "jazz.emit-declaration" "partial-form")}
      {Lisp-Entry "jazz.rename-identifier-conflicts" define #f 3166 9 3166 41 ("list" "or" "%%cdr" "symbol->string" "jazz.generate-symbol" "%%set-symbol-binding-gensym" "%%get-symbol-binding-gensym" "jazz.Variable" "not" "and" "eq?" "same?" "binding" "found?" "%%car" "ls" "lp2" "pair?" "e" "lp1" "let" "%%get-lexical-binding-name" "unwrap-syntactic-closure" "sym" "%%get-reference-binding" "var" "let*" "jazz.Reference" "%%is?" "cond" "child-seed" "env" "seed" "x" "lambda" "jazz.tree-fold-list" "environment" "expressions")}
      {Lisp-Entry "jazz.walk-module" define #f 3204 9 3204 25 ("%%set-namespace-declaration-body" "jazz.rename-identifier-conflicts" "jazz.validate-walk-problems" "jazz.walk-namespace" "jazz.walker-environment" "%%cons" "environment" "jazz.set-catalog-entry" "jazz.walk-module-declaration" "let" "lambda" "jazz.call-with-catalog-entry-lock" "declaration" "jazz.get-catalog-entry" "actual" "resume" "jazz.dialect-walker" "walker" "jazz.require-dialect" "dialect" "jazz.load-dialect-invoice" "dialect-invoice" "let*" "jazz.new-walk-context" "jazz.walk-context" "parameterize" "jazz.error" "%%neq?" "jazz.requested-unit-name" "and" "if" "jazz.parse-module" "body" "dialect-name" "access" "name" "receive" "partial-form")}
      {Lisp-Entry "jazz.cond-expand" define #f 3227 9 3227 25 ("begin" "else" "'else" "jazz.feature-satisfied?" "feature-requirement" "%%desourcify" "%%symbol?" "%%not" "or" "clause" "jazz.error" "%%null?" "%%cdr" "scan" "iter" "let" "cond-expand" "'cond-expand" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "if" "cont" "form-src")}
      {Lisp-Entry "jazz.walk-namespace" define #f 3247 9 3247 28 ("jazz.queue-list" "jazz.walk" "jazz.enqueue" "%%when" "expr?" "expr-src" "jazz.cond-expand" "continuation-capture" "form-src" "lambda" "for-each" "jazz.new-queue" "queue" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.load-dialect-invoice" define #f 3260 9 3260 34 ("syntax" "'syntax" "jazz.outline-module" "jazz.new-import-invoice" "core" "'core" "%%eq?" "jazz.error" "%%symbol?" "%%not" "if" "dialect-name")}
      {Lisp-Entry "jazz.emit-module-inclusions" define #f 3273 9 3273 36 ("jazz.expand-referenced-declaration" "map" "%%get-module-declaration-inclusions" "jazz.enqueue" "jazz.queue-list" "%%not" "%%when" "jazz.get-declaration-inclusions" "for-each" "declaration" "lambda" "collect-declarations" "letrec" "jazz.new-queue" "queue" "let" "%%cdr" "%%car" "%%get-lexical-binding-name" "%%eq?" "%%null?" "if" "lst" "name" "find-name" "define" "module-declaration")}
      {Lisp-Entry "jazz.emit-module-literals" define #f 3297 9 3297 34 ("%%get-module-declaration-literals" "jazz.emit-expression" "jazz.sourcified-form" ",name" "define" "%%cdr" "value" "%%car" "name" "let" "info" "lambda" "map" "module-declaration")}
      {Lisp-Entry "jazz.emit-module-variables" define #f 3305 9 3305 35 ("%%get-module-declaration-variables" "jazz.queue-list" ",value" ",symbol" "jazz.define-variable" "%%cdr" "value" "%%car" "symbol" "let" "variable" "lambda" "map" "module-declaration")}
      {Lisp-Entry "jazz.emit-module-autoloads" define #f 3313 9 3313 35 ("jazz.queue-list" "%%get-module-declaration-autoloads" "jazz.emit-binding-reference" "jazz.sourcified-form" "set!" "%%get-declaration-toplevel" "%%get-declaration-locator" "jazz.load-unit" "begin" "if" "loaded?" ",locator" "define" "jazz.enqueue" "%%table-set!" "%%table-ref" "%%not" "%%when" "jazz.autoload-locator" "locator" "jazz.resolve-binding" "referenced-declaration" "autoload-declaration" "lambda" "for-each" "eq?" "test:" "%%make-table" "locators" "jazz.new-queue" "queue" "let" "environment" "module-declaration")}
      {Lisp-Entry "jazz.emit-module-registration" define #f 3334 9 3334 38 ("%%cons" "if" "jazz.runtime-export" "export" "jazz.Autoload-Declaration" "%%is?" "%%get-declaration-toplevel" "%%eq?" "or" "decl" "name" "jazz.public-access" "%%get-access-lookup" "%%iterate-table" "%%get-module-declaration-walker" "walker" "jazz.queue-list" "%%get-module-declaration-exports" "%%get-module-invoice-name" "jazz.enqueue" "%%not" "and" "%%when" "%%get-export-invoice-autoload" "autoload" "%%get-module-invoice-only" "only" "module-invoice" "lambda" "for-each" "jazz.new-queue" "queue" "let" "%%get-declaration-access" "%%get-lexical-binding-name" "jazz.register-module" "environment" "declaration")}
      {Lisp-Entry "jazz.runtime-export" generic/specific ("jazz.Walker~virtual-runtime") 3357 30 3357 49 ("declaration")}
      {Lisp-Entry "jazz.runtime-export" generic/specific ("jazz.Walker") 3360 21 3360 40 ("else" "%%get-declaration-toplevel" "%%cons" "jazz.resolve-binding" "referenced-declaration" "let" "jazz.Autoload-Declaration" "%%get-declaration-locator" "jazz.Export-Declaration" "%%is?" "cond" "declaration")}
      {Lisp-Entry "jazz.walker-bindings" generic/specific ("jazz.Walker~virtual-runtime") 3376 30 3376 50 ()}
      {Lisp-Entry "jazz.walker-bindings" generic/specific ("jazz.Walker") 3379 21 3379 41 ("core" "'core" "jazz.get-dialect" "%%get-dialect-bindings")}
      {Lisp-Entry "jazz.walker-environment" generic/specific ("jazz.Walker~virtual-runtime") 3383 30 3383 53 ()}
      {Lisp-Entry "jazz.walker-environment" generic/specific ("jazz.Walker") 3386 21 3386 44 ("walker" "jazz.walker-bindings" "jazz.new-walk-frame" "%%list")}
      {Lisp-Entry "jazz.walk-declaration" generic/specific ("jazz.Walker~virtual-runtime") 3401 30 3401 51 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-declaration" generic/specific ("jazz.Walker") 3404 21 3404 42 ("else" "jazz.walk-define-syntax-declaration" "define-syntax" "jazz.walk-syntax-declaration" "syntax" "jazz.walk-macro-declaration" "macro" "jazz.walk-native-syntax-declaration" "native-syntax" "jazz.walk-native-declaration" "native" "jazz.walk-import-declaration" "import" "jazz.walk-export-declaration" "export" "walker" "jazz.walk-require-declaration" "require" "case" "%%car" "first" "let" "jazz.source-code" "%%pair?" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-declarations" define #f 3420 9 3420 31 ("jazz.walk-declaration" "jazz.source-code" "%%cdr" "jazz.begin-form?" "if" "jazz.expand-macros" "expansion" "let" "%%when" "expr?" "expr" "jazz.cond-expand" "continuation-capture" "form-src" "lambda" "for-each" "walk" "define" "forms" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.add-declaration-child" define #f 3437 9 3437 35 ("jazz.public-access" "private" "'private" "%%get-declaration-access" "%%neq?" "jazz.private-access" "%%get-access-lookup" "%%table-set!" "%%get-namespace-declaration-children" "jazz.enqueue" "jazz.find-child-declaration" "%%not" "%%when" "%%get-lexical-binding-name" "name" "let" "child" "namespace-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.require-declaration" define #f 3449 9 3449 33 ("jazz.error" "%%assertion" "jazz.find-declaration" "declaration" "let" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.find-declaration" define #f 3455 9 3455 30 ("jazz.private-access" "%%get-access-lookup" "%%table-ref" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.find-child-declaration" define #f 3459 9 3459 36 ("%%get-namespace-declaration-children" "jazz.queue-list" "%%get-lexical-binding-name" "%%eq?" "decl" "lambda" "jazz.find-if" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.begin-form?" define #f 3465 9 3465 25 ("begin" "'begin" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.define-form?" define #f 3470 9 3470 26 ("define" "'define" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.register-autoload-declaration" define #f 3480 9 3480 43 ("%%cons" "%%set-module-declaration-autoloads" "%%memq" "%%not" "%%when" "%%get-module-declaration-autoloads" "declarations" "let" "autoload-declaration" "module-declaration")}
      {Lisp-Entry "jazz.lookup-reference" define #f 3491 9 3491 30 ("jazz.walk-unresolved" "jazz.lookup-symbol" "or" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Expression" define-class ("class runtime") 3501 27 3501 42 ()}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Expression~virtual-runtime") 3504 30 3504 50 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Expression") 3507 21 3507 41 ("expression" "jazz.error" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" generic/specific ("jazz.Expression~virtual-runtime") 3511 30 3511 44 ("environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.emit-call" generic/specific ("jazz.Expression") 3514 21 3514 35 ("jazz.Any" "jazz.codes-forms" "expression" "jazz.emit-expression" "jazz.sourcified-form" "jazz.new-code" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Expression~virtual-runtime") 3521 30 3521 50 ("s" "k" "f")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Expression") 3524 21 3524 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.emit-expressions" define #f 3528 9 3528 30 ("jazz.emit-expression" "expression" "lambda" "map" "environment" "declaration" "expressions")}
      {Lisp-Entry "jazz.fold-expressions" define #f 3534 9 3534 30 ("%%cdr" "jazz.fold-expressions" "%%car" "jazz.fold-expression" "%%null?" "if" "seed" "s" "k" "f" "expressions")}
      {Lisp-Entry "jazz.tree-fold-list" define #f 3541 9 3541 28 ("car" "jazz.tree-fold" "cdr" "jazz.tree-fold-list" "null?" "if" "environment" "seed" "here" "up" "down" "ls")}
      {Lisp-Entry "jazz.Reference" define-class ("class runtime") 3555 27 3555 41 ()}
      {Lisp-Entry "jazz.new-reference" define #f 3558 9 3558 27 ("jazz.Reference" "jazz.allocate-reference" "binding" "symbol-src")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Reference") 3562 21 3562 41 ("%%get-expression-source" "expression" "%%get-reference-binding" "jazz.emit-binding-reference" "jazz.sourcify-code" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" generic/specific ("jazz.Reference") 3567 21 3567 35 ("%%get-expression-source" "expression" "%%get-reference-binding" "jazz.emit-binding-call" "jazz.sourcify-code" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Reference") 3572 21 3572 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Body" define-class ("class runtime") 3584 27 3584 36 ()}
      {Lisp-Entry "jazz.new-body" define #f 3587 9 3587 22 ("jazz.Body" "jazz.allocate-body" "expressions" "internal-defines")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Body") 3591 21 3591 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "%%append" "jazz.new-code" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-internal-defines" "jazz.with-annotated-frame" "%%get-body-expressions" "expressions" "expression" "%%get-body-internal-defines" "internal-defines" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Body") 3604 21 3604 41 ("%%get-body-expressions" "%%get-body-internal-defines" "jazz.fold-statements" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Body") 3610 21 3610 35 ("%%get-body-internal-defines" "%%get-body-expressions" "jazz.tree-fold-list" "expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Internal-Define" define-class ("class runtime") 3631 27 3631 47 ()}
      {Lisp-Entry "jazz.new-internal-define" define #f 3634 9 3634 33 ("jazz.Internal-Define" "jazz.allocate-internal-define" "value" "variable")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Internal-Define") 3638 21 3638 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-binding-symbol" "define" "jazz.new-code" "%%get-internal-define-value" "value" "expression" "%%get-internal-define-variable" "variable" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Internal-Define") 3648 21 3648 41 ("%%get-internal-define-value" "jazz.fold-statement" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Internal-Define") 3654 21 3654 35 ("%%get-internal-define-value" "jazz.tree-fold" "expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Begin" define-class ("class runtime") 3672 27 3672 37 ()}
      {Lisp-Entry "jazz.new-begin" define #f 3675 9 3675 23 ("jazz.Begin" "jazz.allocate-begin" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Begin") 3679 21 3679 41 ("%%get-expression-source" "%%get-code-type" "jazz.sourcified-form" "begin" "jazz.new-code" "jazz.emit-statements-code" "code" "expression" "%%get-begin-expressions" "expressions" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Begin") 3688 21 3688 41 ("%%get-begin-expressions" "jazz.fold-statements" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Begin") 3693 21 3693 35 ("%%get-begin-expressions" "jazz.tree-fold-list" "expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.emit-specialized-call" define-macro ("variable") 3711 22 3711 48 ()}
      {Lisp-Entry "jazz.emit-primitive-new-call" define-macro ("variable") 3712 22 3712 50 ()}
      {Lisp-Entry "jazz.emit-primitive-call" define-macro ("variable") 3713 22 3713 46 ()}
      {Lisp-Entry "jazz.emit-inlined-call" define-macro ("variable") 3714 22 3714 44 ()}
      {Lisp-Entry "jazz.Call" define-class ("class runtime") 3717 27 3717 36 ()}
      {Lisp-Entry "jazz.new-call" define #f 3720 9 3720 22 ("jazz.Call" "jazz.allocate-call" "arguments" "operator" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Call") 3724 21 3724 41 ("%%get-expression-source" "jazz.emit-call" "jazz.emit-inlined-call" "jazz.emit-primitive-call" "jazz.emit-primitive-new-call" "jazz.emit-specialized-call" "or" "jazz.sourcify-code" "jazz.emit-expressions" "arguments-codes" "%%get-declaration-locator" "jazz.Declaration" "%%get-reference-binding" "binding" "jazz.Reference" "%%class-is?" "if" "locator" "%%get-call-arguments" "arguments" "expression" "%%get-call-operator" "operator" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Call") 3743 21 3743 41 ("%%get-call-arguments" "jazz.fold-expressions" "%%get-call-operator" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Call") 3749 21 3749 35 ("%%get-call-arguments" "%%get-call-operator" "cons" "jazz.tree-fold-list" "expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Constant" define-class ("class runtime") 3768 27 3768 40 ()}
      {Lisp-Entry "jazz.new-constant" define #f 3771 9 3771 26 ("jazz.Constant" "jazz.allocate-constant" "type" "expansion")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Constant") 3775 21 3775 41 ("%%get-expression-type" "expression" "%%get-constant-expansion" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Constant") 3782 21 3782 41 ("%%get-constant-expansion" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Assignment" define-class ("class runtime") 3796 27 3796 42 ()}
      {Lisp-Entry "jazz.new-assignment" define #f 3799 9 3799 28 ("jazz.Assignment" "jazz.allocate-assignment" "value" "binding")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Assignment") 3803 21 3803 41 ("%%get-assignment-value" "expression" "%%get-assignment-binding" "jazz.emit-binding-assignment" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Assignment") 3807 21 3807 41 ("%%get-assignment-value" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Assignment") 3813 21 3813 35 ("%%get-assignment-value" "jazz.tree-fold" "expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Analysis-Data" define-class ("class runtime") 3828 27 3828 45 ()}
      {Lisp-Entry "jazz.new-analysis-data" define #f 3831 9 3831 31 ("jazz.Analysis-Data" "jazz.allocate-analysis-data")}
      {Lisp-Entry "jazz.get-analysis-data" define #f 3838 9 3838 31 ("%%table-set!" "jazz.new-analysis-data" "data" "let" "jazz.analysis-data" "%%table-ref" "or" "locator")}
      {Lisp-Entry "jazz.emit-namespace-statements" define #f 3850 9 3850 39 ("jazz.queue-list" "jazz.sourcified-form" "jazz.emit-expression" "code" "jazz.emit-declaration" "jazz.enqueue" "jazz.Declaration" "%%class-is?" "if" "statement" "lambda" "for-each" "jazz.new-queue" "queue" "let" "environment" "declaration" "statements")}
      {Lisp-Entry "jazz.emit-statements-code" define #f 3862 9 3862 34 ("jazz.new-code" "jazz.sourcified-form" "%%get-code-type" "set!" "jazz.emit-expression" "code" "jazz.emit-declaration" "jazz.Declaration" "%%class-is?" "if" "statement" "lambda" "map" "emited" "last-type" "let" "environment" "declaration" "statements")}
      {Lisp-Entry "jazz.fold-statement" define #f 3875 9 3875 28 ("jazz.fold-expression" "jazz.fold-declaration" "jazz.Declaration" "%%class-is?" "if" "s" "k" "f" "statement")}
      {Lisp-Entry "jazz.fold-statements" define #f 3881 9 3881 29 ("%%cdr" "jazz.fold-statements" "%%car" "jazz.fold-statement" "%%null?" "if" "seed" "s" "k" "f" "statements")}
      {Lisp-Entry "jazz.walk" define #f 3892 9 3892 18 ("jazz.walk-constant" "else" "%%get-syntactic-closure-form" "%%get-syntactic-closure-environment" "append" "jazz.walk" "syntactic-closure?" "jazz.walk-form" "%%pair?" "jazz.walk-symbol" "identifier?" "cond" "jazz.source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-list" define #f 3904 9 3904 23 ("jazz.queue-list" "jazz.walk" "jazz.enqueue" "continuation-capture" "form" "lambda" "for-each" "jazz.new-queue" "queue" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-body" define #f 3914 9 3914 23 ("jazz.queue-list" "map" "jazz.enqueue" "jazz.new-variable" "%%symbol?" "%%desourcify" "%%cadr" "signature" "internal-define" "augmented-environment" "jazz.new-queue" "variables" "jazz.walk-list" "jazz.new-body" "%%car" "%%eq?" "%%null?" "or" "scan" "iter" "expressions" "'expressions" "else" "defines" "'defines" "%%cons" "jazz.define-form?" "jazz.error" "%%neq?" "set!" "%%not" "substate" "sub" "for-each" "state" "jazz.begin-form?" "cond" "form" "lambda" "process" "letrec" "internal-defines" "jazz.walk" "jazz.new-internal-define" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "jazz.source-code" "%%cdr" "jazz.parse-define" "parameters" "value" "specifier" "name" "receive" "variable" "form-src" "walk-internal-define" "define" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-define" define #f 3962 9 3962 26 (",@body" ",@specifier-list" ",parameters" "%%list" "specifier-list" "body" "%%desourcify" "parameters" "values" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "name" "let" "%%car" "jazz.source-code" "%%symbol?" "if" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-quote" define #f 3981 9 3981 24 ("jazz.walk-constant" "jazz.Null" "quote" "jazz.new-constant" "%%null?" "if" "%%cadr" "expression" "strip-syntactic-closures" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-keyword" define #f 3989 9 3989 26 ("jazz.Keyword" "jazz.new-constant" "keyword" "walker")}
      {Lisp-Entry "jazz.walk-enumerator" define #f 3993 9 3993 29 ("jazz.Symbol" "quote" "'quote" "%%list" "jazz.new-constant" "enumerator" "walker")}
      {Lisp-Entry "jazz.walk-constant" define #f 3997 9 3997 27 ("jazz.walk-literal/constant" "else" "jazz.Pair" "jazz.scheme-pair-literal?" "jazz.Any" "#!rest" "#!key" "#!optional" "%%eq?" "%%box?" "or" "jazz.Null" "%%null?" "jazz.Values" "%%values?" "jazz.F64Vector" "%%f64vector?" "jazz.F32Vector" "%%f32vector?" "jazz.U64Vector" "%%u64vector?" "jazz.S64Vector" "%%s64vector?" "jazz.U32Vector" "%%u32vector?" "jazz.S32Vector" "%%s32vector?" "jazz.U16Vector" "%%u16vector?" "jazz.S16Vector" "%%s16vector?" "jazz.U8Vector" "%%u8vector?" "jazz.S8Vector" "%%s8vector?" "jazz.Vector" "%%vector?" "jazz.Symbol" ",form-src" "quote" "%%symbol?" "jazz.Number" "%%number?" "jazz.Flonum" "%%flonum?" "jazz.Fixnum" "%%fixnum?" "jazz.Keyword" "%%keyword?" "jazz.String" "%%string?" "jazz.Char" "%%char?" "jazz.Boolean" "jazz.new-constant" "%%boolean?" "cond" "jazz.source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.scheme-pair-literal?" define #f 4052 9 4052 34 ("%%cdr" "%%car" "%%pair?" "and" "%%vector?" "%%symbol?" "%%number?" "%%keyword?" "%%string?" "%%char?" "%%boolean?" "%%null?" "or" "expr" "lambda" "scheme-data?" "letrec" "form")}
      {Lisp-Entry "jazz.walk-literal/constant" define #f 4074 9 4074 35 ("jazz.lookup-reference" "jazz.new-constant" "%%class-of" "%%get-category-name" "jazz.identifier-name" "if" "literal-type" "%%set-cdr!" "%%get-module-declaration-literals" "%%set-module-declaration-literals" "info" "%%get-declaration-locator" "%%symbol->string" "%%string-append" "jazz.generate-symbol" "locator" "jazz.walk-error" "else" "%%cdr" "cons" "%%pair?" ",arg" "quote" "arg" "lambda" "map" ",constructor-name" "%%desourcify" "jazz.require-literal-constructor" "%%car" "constructor-name" "%%get-literal-arguments" "arguments" "%%get-literal-name" "name" "cond" "jazz.walk" "jazz.walker-environment" "%%cons" "walk-literal/constant" "define" "jazz.Literal" "%%is?" "literal?" "%%get-declaration-toplevel" "module-declaration" "let" "literal/constant" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.make-symbolic-chars" define #f 4106 9 4106 33 ("eq?" "test:" "%%cdr" "integer->char" "%%car" "%%cons" "pair" "lambda" "map" "%%list->table" "alist")}
      {Lisp-Entry "jazz.Symbolic-Chars" define #f 4114 8 4114 27 ("#xA9" "copyright" "#x7F" "delete" "#x7D" "close-brace" "#x7B" "open-brace" "#x60" "backquote" "#x5F" "underscore" "#x5E" "exponential" "#x5D" "close-bracket" "#x5C" "backslash" "#x5B" "open-bracket" "#x40" "at" "#x3F" "question-mark" "#x3B" "semi-colon" "#x3A" "colon" "#x2F" "slash" "#x2E" "period" "#x2D" "minus" "#x2C" "comma" "#x2B" "plus" "#x2A" "times" "#x29" "close-parenthesis" "#x28" "open-parenthesis" "#x27" "quote" "#x26" "ampersand" "#x23" "sharp" "#x22" "double-quote" "#x21" "exclamation-point" "#x20" "space" "#x1F" "down-arrow" "#x1E" "up-arrow" "#x1D" "right-arrow" "#x1C" "left-arrow" "#x1B" "escape" "#x0D" "return" "#x0C" "page-down" "#x0B" "page-up" "#x0A" "linefeed" "#x09" "tab" "#x08" "backspace" "#x05" "info" "#x04" "end" "#x03" "enter" "#x01" "home" "#x00" "zero" "jazz.make-symbolic-chars")}
      {Lisp-Entry "jazz.symbolic-char" define #f 4162 9 4162 27 ("jazz.Symbolic-Chars" "%%table-ref" "name")}
      {Lisp-Entry "jazz.register-variable" define #f 4171 9 4171 31 ("%%get-module-declaration-variables" "jazz.enqueue" "%%cons" "variable" "%%get-declaration-locator" "%%symbol->string" "%%string-append" "jazz.generate-symbol" "symbol" "%%get-declaration-toplevel" "module-declaration" "let" "value" "suffix" "declaration")}
      {Lisp-Entry "jazz.walk-symbol" generic/specific ("jazz.Walker~virtual-runtime") 4184 30 4184 46 ("symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol" generic/specific ("jazz.Walker") 4187 21 4187 37 ("jazz.walk-symbol-reference" "else" "walker" "jazz.walk-enumerator" "jazz.enumerator?" "cond" "jazz.source-code" "symbol" "let" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-setbang" define #f 4195 9 4195 26 ("%%desourcify" "jazz.walk-error" "jazz.walk-symbol-assignment" "%%symbol?" "if" "%%cddr" "%%car" "value" "jazz.source-code" "%%cadr" "variable" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.special-form-name?" define #f 4203 9 4203 32 ("cdr" "jazz.special-form-name?" "jazz.Special-Form" "%%class-is?" "jazz.object?" "car" "jazz.walk-binding-lookup" "binding" "let" "or" "eq?" "not" "pair?" "and" "end" "ls" "symbol")}
      {Lisp-Entry "jazz.lookup-symbol" define #f 4213 9 4213 27 ("jazz.lookup-analyse" "jazz.analysis-mode?" "jazz.register-autoload-declaration" "module" "jazz.Declaration" "%%class-is?" "jazz.source-code" "syntactic-closure-form" "%%get-syntactic-closure-environment" "syntactic-closure?" "jazz.walk-warning" "%%get-declaration-locator" "referenced-locator" "deprecated" "'deprecated" "%%get-declaration-compatibility" "%%eq?" "referenced-declaration" "validate-compatibility" "%%cdr" "%%car" "jazz.walk-binding-lookup" "or" "%%pair?" "and" "env" "lp" "unwrap-syntactic-closure" "raw-symbol" "jazz.composite-name?" "lookup" "jazz.walk-error" "jazz.new-module-reference" "%%get-declaration-toplevel" "jazz.new-autoload-declaration" "jazz.Autoload-Declaration" "%%is?" "if" "jazz.public-access" "jazz.lookup-declaration" "decl" "jazz.outline-module" "exported-module-reference" "let" "jazz.split-composite" "name" "module-name" "receive" "symbol" "lookup-composite" "define" "symbol-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-analyse" generic/specific ("jazz.Walker~virtual-runtime") 4255 30 4255 49 ("referenced-declaration" "symbol-src" "declaration")}
      {Lisp-Entry "jazz.lookup-analyse" generic/specific ("jazz.Walker") 4258 21 4258 40 ("referenced-declaration" "symbol-src" "declaration")}
      {Lisp-Entry "jazz.walk-symbol-reference" define #f 4267 9 4267 35 ("jazz.walk-free-reference" "jazz.new-reference" "jazz.walk-binding-referenced" "jazz.Variable" "%%class-is?" "begin" "if" "jazz.lookup-symbol" "binding" "let" "symbol-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-free-reference" generic/specific ("jazz.Walker~virtual-runtime") 4277 30 4277 54 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-reference" generic/specific ("jazz.Walker") 4280 21 4280 45 ("walker" "jazz.walk-unresolved" "symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" generic/specific ("jazz.Walker~virtual-runtime") 4289 30 4289 57 ("value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" generic/specific ("jazz.Walker") 4292 21 4292 48 ("jazz.walk-free-assignment" "jazz.walk" "jazz.new-assignment" "jazz.walk-binding-validate-assignment" "begin" "if" "walker" "jazz.lookup-symbol" "binding" "let" "value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" generic/specific ("jazz.Walker~virtual-runtime") 4301 30 4301 55 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" generic/specific ("jazz.Walker") 4304 21 4304 46 ("walker" "jazz.walk-unresolved" "symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" generic/specific ("jazz.Walker~virtual-runtime") 4313 30 4313 44 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" generic/specific ("jazz.Walker") 4316 21 4316 35 ("jazz.walk-call" "jazz.walk" "jazz.walk-binding-expand-form" "expansion" "jazz.walk-binding-expandable?" "jazz.walk-binding-walk-form" "jazz.walk-binding-walkable?" "if" "else" "and" "%%get-reference-binding" "ref" "jazz.Reference" "jazz.Declaration" "jazz.Special-Form" "%%class-is?" "or" "walker" "jazz.lookup-symbol" "identifier?" "cond" "binding" "%%car" "jazz.source-code" "procedure-expr" "let" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.expand-macros" define #f 4347 9 4347 27 ("jazz.expand-macros" "jazz.walk-binding-expand-form" "expansion" "%%symbol?" "%%car" "procedure-expr" "jazz.source-code" "%%pair?" "%%not" "jazz.walk-binding-expandable?" "and" "if" "jazz.lookup-symbol" "binding" "let" "symbol" "lookup-macro-form" "define" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-call" define #f 4369 9 4369 23 ("jazz.walk-list" "jazz.walk" "lambda" "continuation-capture" "jazz.new-call" "jazz.desourcify-all" "jazz.walk-binding-validate-call" "if" "%%cdr" "arguments" "jazz.source-code" "%%car" "operator" "let" "form-src" "procedure-binding" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-arguments" generic/specific ("jazz.Walker~virtual-runtime") 4381 30 4381 53 ("form-src" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" generic/specific ("jazz.Walker") 4384 21 4384 44 ("%%fx<" "walker" "jazz.walk-error" "%%fx>" "%%not" "and" "cond" "%%get-signature-named" "%%get-signature-optional" "%%not-null?" "or" "rest?" "%%get-lexical-binding-name" "name" "%%length" "passed" "%%get-signature-rest" "rest" "%%get-signature-mandatory" "mandatory" "let" "form-src" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.walk-require-declaration" define #f 4404 9 4404 38 ("jazz.listify" "jazz.add-module-require" "require" "lambda" "jazz.load-unit" "for-each" "eval" "'eval" "jazz.walk-for" "%%eq?" "%%when" "%%cdr" "jazz.filter-features" "requires" "%%get-declaration-toplevel" "module-declaration" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-require" define #f 4416 9 4416 26 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-export-declaration" define #f 4425 9 4425 37 ("jazz.add-module-export" "export-invoice" "for-each" "jazz.filter-features" "export-invoices" "%%get-declaration-toplevel" "module-declaration" "%%desourcify" "form" "jazz.walk-module-export" "export" "%%cdr" "jazz.new-export-reference" "symbol" "lambda" "map" "jazz.new-export-invoice" "%%list" "if" "%%append" "module-exports" "%%assq" "symbols-exports" "assv" "symbol?" "jazz.partition" "partition" "let" "exports" "walk-exports" "define" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-export" define #f 4447 9 4447 25 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-import-declaration" define #f 4456 9 4456 37 ("jazz.add-module-import" "%%get-lexical-binding-name" "jazz.load-unit" "%%get-module-invoice-module" "import-invoice" "for-each" "eval" "'eval" "jazz.walk-for" "%%eq?" "%%when" "%%cdr" "jazz.filter-features" "import-invoices" "%%get-declaration-toplevel" "module-declaration" "%%desourcify" "form" "let" "jazz.listify" "imports" "walk-imports" "jazz.new-export-reference" "symbol" "lambda" "map" "%%not" "if" "jazz.new-import-invoice" "jazz.parse-module-invoice" "module-autoload" "module-only" "module-version" "module-phase" "module-load" "module-name" "receive" "jazz.walk-unresolved" "error?:" "jazz.outline-module" "or" "name" "jazz.lookup-module" "import" "jazz.walk-module-import" "define" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-import" define #f 4492 9 4492 25 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.native-modifiers" define #f 4501 8 4501 29 ("uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "jazz.native-keywords" define #f 4505 8 4505 28 ()}
      {Lisp-Entry "jazz.parse-native" define #f 4509 9 4509 26 ("values" "%%null?" "%%assert" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "name" "let" "jazz.native-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-declaration" define #f 4518 9 4518 37 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-export-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.Any" "jazz.walk-specifier" "if" "type" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native" define #f 4529 9 4529 25 ("jazz.require-declaration" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.native-syntax-modifiers" define #f 4541 8 4541 36 ("uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "jazz.native-syntax-keywords" define #f 4545 8 4545 35 ()}
      {Lisp-Entry "jazz.parse-native-syntax" define #f 4549 9 4549 33 ("values" "%%null?" "%%assert" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "name" "let" "jazz.native-syntax-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-syntax-declaration" define #f 4558 9 4558 44 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-export-syntax-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.Any" "jazz.walk-specifier" "if" "type" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native-syntax" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-syntax" define #f 4569 9 4569 32 ("jazz.require-declaration" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native-syntax" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.macro-modifiers" define #f 4581 8 4581 28 ("uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "jazz.parse-macro" define #f 4586 9 4586 25 ("values" "parameters" "jazz.Any" "type" "%%desourcify" "name" "%%cdr" "body" "%%car" "jazz.source-code" "signature" "let*" "jazz.macro-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-macro-declaration" define #f 4596 9 4596 36 ("jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.new-macro-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.walk-parameters" "signature" "let" "jazz.source-code" "%%cdr" "jazz.parse-macro" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-macro" define #f 4606 9 4606 24 ("%%set-declaration-source" "jazz.walk-body" "%%set-macro-declaration-body" "%%set-macro-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.require-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-macro" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.syntax-modifiers" define #f 4622 8 4622 29 ("uptodate" "undocumented" "deprecated" "public" "package" "protected" "private")}
      {Lisp-Entry "jazz.parse-syntax" define #f 4627 9 4627 26 ("values" "parameters" "jazz.Any" "type" "%%desourcify" "name" "%%cdr" "body" "%%car" "jazz.source-code" "signature" "let*" "jazz.syntax-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-syntax-declaration" define #f 4637 9 4637 37 ("jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.new-syntax-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.walk-parameters" "signature" "let" "jazz.source-code" "%%cdr" "jazz.parse-syntax" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-syntax" define #f 4647 9 4647 25 ("%%set-declaration-source" "jazz.walk-body" "%%set-syntax-declaration-body" "%%set-syntax-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.require-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-syntax" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-define-syntax-declaration" define #f 4663 9 4663 44 ("jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.Any" "jazz.new-define-syntax-declaration" "jazz.find-child-declaration" "or" "new-declaration" "%%car" "name" "let" "jazz.source-code" "%%cdr" "jazz.syntax-modifiers" "jazz.parse-modifiers" "rest" "compatibility" "access" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-define-syntax" define #f 4674 9 4674 32 ("%%set-declaration-source" "jazz.walk-body" "%%set-syntax-declaration-body" "%%set-syntax-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.require-declaration" "new-declaration" "body" "%%car" "name" "let*" "jazz.source-code" "%%cdr" "jazz.syntax-modifiers" "jazz.parse-modifiers" "rest" "compatibility" "access" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-let-syntax" define #f 4692 9 4692 29 ("jazz.walk-list" "jazz.new-begin" "jazz.new-define-syntax-form" "%%get-code-form" "eval" "expander" "jazz.walk" "jazz.emit-expression" "expander-src" "value" "%%car" "jazz.source-code" "name" "binding" "lambda" "map" "append" "augmented-environment" "let" "jazz.walk-error" "%%pair?" "%%null?" "or" "%%assertion" "%%cddr" "body" "bindings" "unwrap-syntactic-closure" "%%cadr" "bindings-src" "let*" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-letrec-syntax" define #f 4716 9 4716 32 ("jazz.walk-let-syntax" "apply" "args")}
      {Lisp-Entry "jazz.walk-parameters" define #f 4730 9 4730 29 ("values" "jazz.queue-list" "append" "jazz.new-signature" "signature" "jazz.List" "jazz.new-rest-parameter" "parameter-expression" "%%symbol?" "%%null?" "jazz.new-named-parameter" "keyword-parameter" "%%keyword->string" "%%string->symbol" "%%eq?" "%%cddr" "jazz.new-optional-parameter" "optional-parameter" "default" "1" "%%length" "%%fx=" "jazz.new-parameter" "positional-parameter" "jazz.walk-specifier" "type" "rest" "lambda" "jazz.parse-specifier" "%%cdr" "jazz.enqueue" "jazz.walk" "jazz.Any" "jazz.new-dynamic-parameter" "dynamic-parameter" "%%cadr" "variable" "jazz.specifier->name" "code" "specifier" "memq" "jazz.desourcify" "jazz.walk-error" "%%not" "parameter-src" "let*" "case" "section" "allowed?" "positional" "'positional" "optional" "'optional" "else" "keyword" "'keyword" "%%keyword?" "dynamic" "'dynamic" "jazz.specifier?" "or" "cond" "%%car" "jazz.source-code" "first" "%%pair?" "if" "parameter" "parameter-section" "%%cons" "set!" "%%when" "expression" "augment-environment" "sections" "scan" "iterate-parameters" "define" "keywords" "optionals" "positionals" "jazz.new-queue" "dynamics" "augmented-environment" "let" "walk?" "extended?" "parameters" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-signature-casts" define #f 4836 9 4836 34 ("jazz.queue-list" "%%get-signature-named" "%%get-signature-optional" "%%get-signature-positional" "for-each" "jazz.enqueue" "jazz.new-queue" "set!" "%%not" "begin" "jazz.emit-binding-reference" "jazz.emit-parameter-cast" "cast" "jazz.Any" "%%neq?" "and" "if" "%%get-lexical-binding-type" "type" "parameter" "process" "define" "queue" "let" "environment" "source-declaration" "signature")}
      {Lisp-Entry "jazz.emit-signature" define #f 4858 9 4858 28 ("jazz.queue-list" "#!rest" "#!key" "#!optional" "%%null?" "%%not" "%%when" "for-each" "jazz.emit-parameter" "jazz.enqueue" "parameter" "emit" "define" "jazz.new-queue" "queue" "%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "let" "environment" "declaration" "signature")}
      {Lisp-Entry "jazz.Catalog" define #f 4887 8 4887 20 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-catalog" define #f 4891 9 4891 25 ("jazz.Catalog")}
      {Lisp-Entry "jazz.get-catalog-entry" define #f 4895 9 4895 31 ("jazz.Catalog" "%%table-ref" "unit-name")}
      {Lisp-Entry "jazz.set-catalog-entry" define #f 4899 9 4899 31 ("jazz.Catalog" "%%table-set!" "entry" "unit-name")}
      {Lisp-Entry "jazz.set-catalog-entry-status" define #f 4903 9 4903 38 ("%%cons" "jazz.set-catalog-entry" "%%cdr" "%%pair?" "if" "jazz.get-catalog-entry" "entry" "declaration" "let" "status" "unit-name")}
      {Lisp-Entry "jazz.release-catalog-entries" define #f 4911 9 4911 37 ("%%cdr" "jazz.set-catalog-entry" "%%pair?" "if" "entry" "unit-name" "lambda" "jazz.Catalog" "%%iterate-table")}
      {Lisp-Entry "jazz.call-with-catalog-entry-lock" define #f 4918 9 4918 42 ("jazz.get-catalog-entry" "%%pair?" "if" "jazz.pop-load-stack" ":walk" "':walk" "jazz.push-load-stack" ":walking" "':walking" "jazz.set-catalog-entry-status" "dynamic-wind" "lambda" "jazz.call-with-load-lock" "thunk" "unit-name")}
      {Lisp-Entry "jazz.outline-feedback" define #f 4932 8 4932 29 ("make-parameter")}
      {Lisp-Entry "jazz.outline-unit" define #f 4936 9 4936 26 ("jazz.set-catalog-entry" "jazz.error" "jazz.outline-feedback" "feedback" "jazz.call-with-catalog-entry-lock" "or" "jazz.Load-Stack" "cdr" "map" "jazz.circular-dependency-error" "declaration" "%%pair?" "status" "jazz.get-catalog-entry" "entry" "not" "jazz.parse-module-declaration" "module" "%%cdr" "jazz.parse-unit-declaration" "unit" "case" "%%car" "jazz.source-code" "kind" "interpret" "'interpret" "jazz.walk-for" "jazz.requested-unit-resource" "jazz.requested-unit-name" "parameterize" "read-literals?:" "jazz.read-toplevel-form" "form" "lambda" "jazz.resource-pathname" "jazz.outline-verbose?" "jazz.with-verbose" "%%not" "and" "if" "jazz.find-unit-src" "src" "let" "load-toplevel-declaration" "define" "error?" "use-catalog?" "#!key" "unit-name")}
      {Lisp-Entry "jazz.outline-module" define #f 4976 9 4976 28 ("jazz.Module-Declaration" "%%class-is?" "%%assert" "%%not" "if" "error?:" "jazz.outline-unit" "declaration" "let" "error?" "#!key" "unit-name")}
      {Lisp-Entry "jazz.read-literals?" define #f 4984 8 4984 27 ("make-parameter")}
      {Lisp-Entry "jazz.read-toplevel-form" define #f 4988 9 4988 32 ("%%not" "module" "unit" "%%memq" "jazz.source-code" "%%pair?" "and" "%%cdr" "%%not-null?" "extraneous?" "%%car" "form-src" "jazz.error" "%%null?" "if" "jazz.read-source-all" "all" "jazz.read-literals?" "parameterize" "port" "eol-encoding:" "char-encoding:" "path:" "%%list" "call-with-input-file" "cr-lf" "'cr-lf" "eol-encoding" "jazz.resource-char-encoding" "char-encoding" "lambda" "jazz.pathname-extension" "jazz.with-extension-reader" "jazz.resource-pathname" "source" "let" "read-literals?" "#!key" "resource")}
      {Lisp-Entry "jazz.walk-unit" define #f 5009 9 5009 23 ("%%cdr" "jazz.walk-module" "module" "unit" "%%car" "jazz.source-code" "case" "jazz.read-toplevel-form" "form" "interpret" "'interpret" "jazz.walk-for" "jazz.requested-unit-resource" "jazz.requested-unit-name" "parameterize" "jazz.find-unit-src" "src" "let" "unit-name")}
      {Lisp-Entry "jazz.Core-Dialect" define-class ("class runtime") 5027 27 5027 44 ()}
      {Lisp-Entry "jazz.new-core-dialect" define #f 5030 9 5030 30 ("jazz.Core-Dialect" "jazz.allocate-core-dialect")}
      {Lisp-Entry "jazz.dialect-name" generic/specific ("jazz.Core-Dialect") 5034 21 5034 38 ("core" "'core")}
      {Lisp-Entry "jazz.dialect-walker" generic/specific ("jazz.Core-Dialect") 5038 21 5038 40 ("jazz.new-core-walker")}
      {Lisp-Entry "jazz.Core-Walker" define-class ("class runtime") 5050 27 5050 43 ()}
      {Lisp-Entry "jazz.new-core-walker" define #f 5053 9 5053 29 ("eq?" "test:" "%%make-table" "jazz.new-queue" "jazz.Core-Walker" "jazz.allocate-core-walker")}}})
"autoload"
 ({Lisp-File-Entry {File core "src" "core" "module" "runtime" "autoload.scm"} 1258811564
    {Lisp-Entry "core.module.runtime.autoload" unit #f 41 16 41 44 ()
      {Lisp-Entry "jazz.Autoloads" define #f 44 8 44 22 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-autoloads" define #f 48 9 48 27 ("jazz.Autoloads")}
      {Lisp-Entry "jazz.get-autoload" define #f 52 9 52 26 ("jazz.Autoloads" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-autoload" define #f 56 9 56 26 ("%%cons" "jazz.Autoloads" "%%table-set!" "loader" "unit-name" "name")}
      {Lisp-Entry "jazz.require-autoload" define #f 60 9 60 30 ("jazz.error" "jazz.get-autoload" "or" "name")}
      {Lisp-Entry "jazz.register-autoload" define #f 65 9 65 31 ("jazz.error" "jazz.set-autoload" "%%car" "%%eq?" "%%not" "or" "if" "jazz.get-autoload" "actual" "let" "loader" "unit-name" "name")}
      {Lisp-Entry "jazz.autoload" define #f 72 9 72 22 ("%%cdr" "jazz.require-autoload" "autoload-info" "let" "name")}
      {Lisp-Entry "jazz.autoreload" define #f 77 9 77 24 ("%%cdr" "%%car" "jazz.reload-unit" "jazz.require-autoload" "autoload-info" "let" "name")}}})
"boolean"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "boolean.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.boolean" unit #f 37 16 37 41 ()
      {Lisp-Entry "jazz.boolean" define #f 40 9 40 21 ("%%boolean" "expr")}
      {Lisp-Entry "jazz.not-null?" define #f 44 9 44 23 ("%%not-null?" "expr")}}})
"class"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "class.scm"} 1258811564
    {Lisp-Entry "core.class.syntax.class" unit #f 37 16 37 39 ()
      {Lisp-Entry "jazz.category-name" define #f 40 8 40 26 ("jazz.object-size")}
      {Lisp-Entry "jazz.category-fields" define #f 43 8 43 28 ("1" "jazz.category-name" "%%fx+")}
      {Lisp-Entry "jazz.category-virtual-size" define #f 46 8 46 34 ("1" "jazz.category-fields" "%%fx+")}
      {Lisp-Entry "jazz.category-ancestors" define #f 49 8 49 31 ("1" "jazz.category-virtual-size" "%%fx+")}
      {Lisp-Entry "jazz.category-descendants" define #f 52 8 52 33 ("1" "jazz.category-ancestors" "%%fx+")}
      {Lisp-Entry "jazz.class-ascendant" define #f 55 8 55 28 ("1" "jazz.category-descendants" "%%fx+")}
      {Lisp-Entry "jazz.class-interfaces" define #f 58 8 58 29 ("1" "jazz.class-ascendant" "%%fx+")}
      {Lisp-Entry "jazz.class-slots" define #f 61 8 61 24 ("1" "jazz.class-interfaces" "%%fx+")}
      {Lisp-Entry "jazz.class-instance-slots" define #f 64 8 64 33 ("1" "jazz.class-slots" "%%fx+")}
      {Lisp-Entry "jazz.class-instance-size" define #f 67 8 67 32 ("1" "jazz.class-instance-slots" "%%fx+")}
      {Lisp-Entry "jazz.class-level" define #f 70 8 70 24 ("1" "jazz.class-instance-size" "%%fx+")}
      {Lisp-Entry "jazz.class-dispatch-table" define #f 73 8 73 33 ("1" "jazz.class-level" "%%fx+")}
      {Lisp-Entry "jazz.class-core-method-alist" define #f 76 8 76 36 ("1" "jazz.class-dispatch-table" "%%fx+")}
      {Lisp-Entry "jazz.class-core-virtual-alist" define #f 79 8 79 37 ("1" "jazz.class-core-method-alist" "%%fx+")}
      {Lisp-Entry "jazz.class-core-virtual-names" define #f 82 8 82 37 ("1" "jazz.class-core-virtual-alist" "%%fx+")}
      {Lisp-Entry "jazz.class-core-vtable" define #f 85 8 85 30 ("1" "jazz.class-core-virtual-names" "%%fx+")}
      {Lisp-Entry "jazz.class-class-table" define #f 88 8 88 30 ("1" "jazz.class-core-vtable" "%%fx+")}
      {Lisp-Entry "jazz.class-interface-table" define #f 91 8 91 34 ("1" "jazz.class-class-table" "%%fx+")}
      {Lisp-Entry "jazz.class-size" define #f 95 8 95 23 ("1" "jazz.class-interface-table" "%%fx+")}
      {Lisp-Entry "%%get-category-name" define-macro ("macro") 99 20 99 39 ("jazz.category-name" ",jazz.category-name" ",category" "%%object-ref" "category")}
      {Lisp-Entry "%%get-category-fields" define-macro ("macro") 103 20 103 41 ("jazz.category-fields" ",jazz.category-fields" ",category" "%%object-ref" "category")}
      {Lisp-Entry "%%set-category-fields" define-macro ("macro") 107 20 107 41 (",fields" "jazz.category-fields" ",jazz.category-fields" ",category" "%%object-set!" "fields" "category")}
      {Lisp-Entry "%%get-category-virtual-size" define-macro ("macro") 111 20 111 47 ("jazz.category-virtual-size" ",jazz.category-virtual-size" ",category" "%%object-ref" "category")}
      {Lisp-Entry "%%set-category-virtual-size" define-macro ("macro") 115 20 115 47 (",virtual-size" "jazz.category-virtual-size" ",jazz.category-virtual-size" ",category" "%%object-set!" "virtual-size" "category")}
      {Lisp-Entry "%%get-category-ancestors" define-macro ("macro") 119 20 119 44 ("jazz.category-ancestors" ",jazz.category-ancestors" ",category" "%%object-ref" "category")}
      {Lisp-Entry "%%set-category-ancestors" define-macro ("macro") 123 20 123 44 (",ancestors" "jazz.category-ancestors" ",jazz.category-ancestors" ",category" "%%object-set!" "ancestors" "category")}
      {Lisp-Entry "%%get-category-descendants" define-macro ("macro") 127 20 127 46 ("jazz.category-descendants" ",jazz.category-descendants" ",category" "%%object-ref" "category")}
      {Lisp-Entry "%%set-category-descendants" define-macro ("macro") 131 20 131 46 (",descendants" "jazz.category-descendants" ",jazz.category-descendants" ",category" "%%object-set!" "descendants" "category")}
      {Lisp-Entry "%%get-class-ascendant" define-macro ("macro") 135 20 135 41 ("jazz.class-ascendant" ",jazz.class-ascendant" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%get-class-interfaces" define-macro ("macro") 139 20 139 42 ("jazz.class-interfaces" ",jazz.class-interfaces" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%get-class-slots" define-macro ("macro") 143 20 143 37 ("jazz.class-slots" ",jazz.class-slots" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-slots" define-macro ("macro") 147 20 147 37 (",slots" "jazz.class-slots" ",jazz.class-slots" ",class" "%%object-set!" "slots" "class")}
      {Lisp-Entry "%%get-class-instance-slots" define-macro ("macro") 151 20 151 46 ("jazz.class-instance-slots" ",jazz.class-instance-slots" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-instance-slots" define-macro ("macro") 155 20 155 46 (",slots" "jazz.class-instance-slots" ",jazz.class-instance-slots" ",class" "%%object-set!" "slots" "class")}
      {Lisp-Entry "%%get-class-instance-size" define-macro ("macro") 159 20 159 45 ("jazz.class-instance-size" ",jazz.class-instance-size" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-instance-size" define-macro ("macro") 163 20 163 45 (",size" "jazz.class-instance-size" ",jazz.class-instance-size" ",class" "%%object-set!" "size" "class")}
      {Lisp-Entry "%%get-class-level" define-macro ("macro") 167 20 167 37 ("jazz.class-level" ",jazz.class-level" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-level" define-macro ("macro") 171 20 171 37 (",size" "jazz.class-level" ",jazz.class-level" ",class" "%%object-set!" "size" "class")}
      {Lisp-Entry "%%get-class-dispatch-table" define-macro ("macro") 175 20 175 46 ("jazz.class-dispatch-table" ",jazz.class-dispatch-table" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-dispatch-table" define-macro ("macro") 179 20 179 46 (",vtable" "jazz.class-dispatch-table" ",jazz.class-dispatch-table" ",class" "%%object-set!" "vtable" "class")}
      {Lisp-Entry "%%get-class-core-method-alist" define-macro ("macro") 183 20 183 49 ("jazz.class-core-method-alist" ",jazz.class-core-method-alist" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-core-method-alist" define-macro ("macro") 187 20 187 49 (",vtable" "jazz.class-core-method-alist" ",jazz.class-core-method-alist" ",class" "%%object-set!" "vtable" "class")}
      {Lisp-Entry "%%get-class-core-virtual-alist" define-macro ("macro") 191 20 191 50 ("jazz.class-core-virtual-alist" ",jazz.class-core-virtual-alist" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-core-virtual-alist" define-macro ("macro") 195 20 195 50 (",vtable" "jazz.class-core-virtual-alist" ",jazz.class-core-virtual-alist" ",class" "%%object-set!" "vtable" "class")}
      {Lisp-Entry "%%get-class-core-virtual-names" define-macro ("macro") 199 20 199 50 ("jazz.class-core-virtual-names" ",jazz.class-core-virtual-names" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-core-virtual-names" define-macro ("macro") 203 20 203 50 (",vtable" "jazz.class-core-virtual-names" ",jazz.class-core-virtual-names" ",class" "%%object-set!" "vtable" "class")}
      {Lisp-Entry "%%get-class-core-vtable" define-macro ("macro") 207 20 207 43 ("jazz.class-core-vtable" ",jazz.class-core-vtable" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-core-vtable" define-macro ("macro") 211 20 211 43 (",vtable" "jazz.class-core-vtable" ",jazz.class-core-vtable" ",class" "%%object-set!" "vtable" "class")}
      {Lisp-Entry "%%get-class-class-table" define-macro ("macro") 215 20 215 43 ("jazz.class-class-table" ",jazz.class-class-table" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-class-table" define-macro ("macro") 219 20 219 43 (",vtable" "jazz.class-class-table" ",jazz.class-class-table" ",class" "%%object-set!" "vtable" "class")}
      {Lisp-Entry "%%get-class-interface-table" define-macro ("macro") 223 20 223 47 ("jazz.class-interface-table" ",jazz.class-interface-table" ",class" "%%object-ref" "class")}
      {Lisp-Entry "%%set-class-interface-table" define-macro ("macro") 227 20 227 47 (",vtable" "jazz.class-interface-table" ",jazz.class-interface-table" ",class" "%%object-set!" "vtable" "class")}
      {Lisp-Entry "%%get-object-class" define-macro ("macro") 231 20 231 38 ("jazz.object-class" ",jazz.object-class" ",object" "%%object-ref" "object")}
      {Lisp-Entry "%%set-object-class" define-macro ("macro") 235 20 235 38 (",class" "jazz.object-class" ",jazz.object-class" ",object" "%%object-set!" "class" "object")}
      {Lisp-Entry "%%final-dispatch" define-macro ("macro") 239 20 239 36 ("implementation" "object")}
      {Lisp-Entry "%%class-dispatch" define-macro ("macro") 243 20 243 36 (",implementation-rank" ",class-level" ",object" "%%class-of" "%%get-class-class-table" "%%vector-ref" "implementation-rank" "class-level" "object")}
      {Lisp-Entry "%%interface-dispatch" define-macro ("macro") 247 20 247 40 (",implementation-rank" ",interface-rank" ",object" "%%class-of" "%%get-class-interface-table" "%%vector-ref" "implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "%%class-native-dispatch" define-macro ("macro") 251 20 251 43 (",implementation-rank" ",class-level" ",object" "%%get-object-class" "%%get-class-class-table" "%%vector-ref" "implementation-rank" "class-level" "object")}
      {Lisp-Entry "%%interface-native-dispatch" define-macro ("macro") 255 20 255 47 (",implementation-rank" ",interface-rank" ",object" "%%get-object-class" "%%get-class-interface-table" "%%vector-ref" "implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "%%c-class-of" define-macro ("macro") 261 24 261 36 ("jazz.structure-type" "jazz.specialtypes" "jazz.Char" "jazz.Fixnum" "jazz.subtypes" ",obj" "#<<end-of-c-code\n{\n    ___SCMOBJ obj = ___ARG1;\n    if (___MEM_ALLOCATED(obj))\n    {\n        int subtype = (*___UNTAG(obj) & ___SMASK) >> ___HTB;\n        if (subtype == ___sJAZZ)\n            ___RESULT = ___VECTORREF(obj,0);\n        else if (subtype == ___sSTRUCTURE)\n            ___RESULT = ___FAL;\n        else\n            ___RESULT = ___BODY_AS(___ARG2,___tSUBTYPED)[subtype];\n    }\n    else if (___FIXNUMP(obj))\n        ___RESULT = ___ARG3;\n    else if (obj >= 0)\n        ___RESULT = ___ARG4;\n    else\n        ___RESULT = ___BODY_AS(___ARG5,___tSUBTYPED)[___INT(___FAL - obj)];\n}\nend-of-c-code\n" "##c-code" "or" "obj")}
      {Lisp-Entry "%%class-of" define-macro ("macro") 291 24 291 34 ("jazz.i-class-of" "%%get-object-class" "%%object?" "if" "else" ",symbol" "%%c-class-of" "compile" "jazz.walk-for" "case" "symbol" "lambda" "jazz.with-uniqueness" "obj")}
      {Lisp-Entry "%%i-class-of-impl" define-macro ("macro") 302 24 302 41 ("jazz.class-of-native" "%%get-object-class" "%%object?" "if" "else" ",var" "%%c-class-of" "compile" "jazz.walk-for" "case" "var")}
      {Lisp-Entry "%%class-of-impl" define-macro ("macro") 311 24 311 39 ("jazz.error" ",var" "%%class-of" "or" "jazz.debug-user?" "if" "var")}
      {Lisp-Entry "%%class-of" define-macro ("macro") 318 24 318 34 ("jazz.class-of-native" "%%get-object-class" ",symbol" "%%object?" "if" "symbol" "lambda" "jazz.with-uniqueness" "obj")}}})
"classes"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "classes.scm"} 1260289835
    {Lisp-Entry "core.class.syntax.classes" unit #f 37 16 37 41 ()
      {Lisp-Entry "jazz.Object" define-class ("class") 45 19 45 30 ()}
      {Lisp-Entry "jazz.print-object" generic/specific ("jazz.Object~virtual") 49 22 49 39 ("detail" "output")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Object~virtual") 50 22 50 36 ("environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Type" define-class ("class") 58 19 58 28 ("jazz.Object")}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Type~virtual") 62 22 62 35 ("object")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Type~virtual") 63 22 63 38 ("subtype")}
      {Lisp-Entry "jazz.category-type?" generic/specific ("jazz.Type~virtual") 64 22 64 41 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Type~virtual") 65 22 65 41 ()}
      {Lisp-Entry "jazz.emit-type" generic/specific ("jazz.Type~virtual") 66 22 66 36 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Type~virtual") 67 22 67 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Type~virtual") 68 22 68 37 ("environment" "source-declaration" "value")}
      {Lisp-Entry "%%subtype?" define-macro ("macro") 71 20 71 30 (",target" ",type" "jazz.of-subtype?" "type" "target")}
      {Lisp-Entry "%%subcategory?" define-macro ("macro") 75 20 75 34 (",target" "%%get-category-ancestors" ",category" "jazz.vector-memq?" "category" "target")}
      {Lisp-Entry "%%subclass?" define-macro ("macro") 79 20 79 31 (",target" "%%get-category-ancestors" ",class" "jazz.vector-memq?" "class" "target")}
      {Lisp-Entry "%%is?" define-macro ("macro") 83 20 83 25 (",object" ",type" "jazz.of-type?" "type" "object")}
      {Lisp-Entry "%%is-not?" define-macro ("macro") 87 20 87 29 (",type" ",object" "%%is?" "%%not" "type" "object")}
      {Lisp-Entry "jazz.Category" define-class ("class") 96 19 96 32 ("descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Type")}
      {Lisp-Entry "jazz.update-category" generic/specific ("jazz.Category~virtual") 104 22 104 42 ()}
      {Lisp-Entry "jazz.Class" define-class ("class") 112 19 112 29 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "jazz.allocate-class" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Category")}
      {Lisp-Entry "%%class-subtype?" define-macro ("macro") 128 20 128 36 ("%%get-category-ancestors" "%%vector-ref" "%%eq?" ",trg" "%%fx>=" "and" ",cls" "%%get-class-level" "class-level" "let" "cls" "trg" "lambda" "jazz.with-uniqueness" "class" "target")}
      {Lisp-Entry "%%class-is?" define-macro ("macro") 138 20 138 31 (",class" ",object" "%%class-of" "%%class-subtype?" "class" "object")}
      {Lisp-Entry "%%category-is?" define-macro ("macro") 142 20 142 34 (",category" ",object" "%%is?" "category" "object")}
      {Lisp-Entry "%%class?" define-macro ("macro") 146 20 146 28 ("jazz.Class" ",object" "%%class-is?" "object")}
      {Lisp-Entry "%%object-class?" define-macro ("macro") 150 20 150 35 ("jazz.Object" ",object" "%%eq?" "object")}
      {Lisp-Entry "jazz.Object-Class" define-class ("class") 159 19 159 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Boolean-Class" define-class ("class") 168 19 168 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Char-Class" define-class ("class") 169 19 169 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Numeric-Class" define-class ("class") 170 19 170 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Number-Class" define-class ("class") 171 19 171 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Numeric-Class")}
      {Lisp-Entry "jazz.Complex-Class" define-class ("class") 172 19 172 37 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Number-Class")}
      {Lisp-Entry "jazz.Real-Class" define-class ("class") 173 19 173 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Complex-Class")}
      {Lisp-Entry "jazz.Rational-Class" define-class ("class") 174 19 174 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Real-Class")}
      {Lisp-Entry "jazz.Integer-Class" define-class ("class") 175 19 175 37 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Rational-Class")}
      {Lisp-Entry "jazz.Fixnum-Class" define-class ("class") 176 19 176 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Integer-Class")}
      {Lisp-Entry "jazz.Flonum-Class" define-class ("class") 177 19 177 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Real-Class")}
      {Lisp-Entry "jazz.Sequence-Class" define-class ("class") 178 19 178 38 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.List-Class" define-class ("class") 179 19 179 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Null-Class" define-class ("class") 180 19 180 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.List-Class")}
      {Lisp-Entry "jazz.Pair-Class" define-class ("class") 181 19 181 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.List-Class")}
      {Lisp-Entry "jazz.String-Class" define-class ("class") 182 19 182 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Vector-Class" define-class ("class") 183 19 183 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S8Vector-Class" define-class ("class") 184 19 184 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U8Vector-Class" define-class ("class") 185 19 185 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S16Vector-Class" define-class ("class") 186 19 186 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U16Vector-Class" define-class ("class") 187 19 187 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S32Vector-Class" define-class ("class") 188 19 188 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U32Vector-Class" define-class ("class") 189 19 189 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S64Vector-Class" define-class ("class") 190 19 190 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U64Vector-Class" define-class ("class") 191 19 191 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.F32Vector-Class" define-class ("class") 192 19 192 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.F64Vector-Class" define-class ("class") 193 19 193 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Structure-Class" define-class ("class") 194 19 194 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Port-Class" define-class ("class") 195 19 195 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Continuation-Class" define-class ("class") 196 19 196 42 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Procedure-Class" define-class ("class") 197 19 197 39 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Symbol-Class" define-class ("class") 198 19 198 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Keyword-Class" define-class ("class") 199 19 199 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Table-Class" define-class ("class") 200 19 200 35 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Thread-Class" define-class ("class") 201 19 201 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Promise-Class" define-class ("class") 202 19 202 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Foreign-Class" define-class ("class") 203 19 203 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Values-Class" define-class ("class") 204 19 204 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.EOF-Class" define-class ("class") 205 19 205 33 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Unspecified-Class" define-class ("class") 206 19 206 41 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Boolean" define-class ("class") 209 19 209 31 ("jazz.Boolean-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Char" define-class ("class") 210 19 210 28 ("jazz.Char-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Numeric" define-class ("class") 211 19 211 31 ("jazz.Numeric-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Number" define-class ("class") 212 19 212 30 ("jazz.Number-Class" "jazz.Numeric")}
      {Lisp-Entry "jazz.Complex" define-class ("class") 213 19 213 31 ("jazz.Complex-Class" "jazz.Number")}
      {Lisp-Entry "jazz.Real" define-class ("class") 214 19 214 28 ("jazz.Real-Class" "jazz.Complex")}
      {Lisp-Entry "jazz.Rational" define-class ("class") 215 19 215 32 ("jazz.Rational-Class" "jazz.Real")}
      {Lisp-Entry "jazz.Integer" define-class ("class") 216 19 216 31 ("jazz.Integer-Class" "jazz.Rational")}
      {Lisp-Entry "jazz.Fixnum" define-class ("class") 217 19 217 30 ("jazz.Fixnum-Class" "jazz.Integer")}
      {Lisp-Entry "jazz.Flonum" define-class ("class") 218 19 218 30 ("jazz.Flonum-Class" "jazz.Real")}
      {Lisp-Entry "jazz.Sequence" define-class ("class") 219 19 219 32 ("jazz.Sequence-Class" "jazz.Object")}
      {Lisp-Entry "jazz.List" define-class ("class") 220 19 220 28 ("jazz.List-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Null" define-class ("class") 221 19 221 28 ("jazz.Null-Class" "jazz.List")}
      {Lisp-Entry "jazz.Pair" define-class ("class") 222 19 222 28 ("jazz.Pair-Class" "jazz.List")}
      {Lisp-Entry "jazz.String" define-class ("class") 223 19 223 30 ("jazz.String-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Vector" define-class ("class") 224 19 224 30 ("jazz.Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S8Vector" define-class ("class") 225 19 225 32 ("jazz.S8Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U8Vector" define-class ("class") 226 19 226 32 ("jazz.U8Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S16Vector" define-class ("class") 227 19 227 33 ("jazz.S16Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U16Vector" define-class ("class") 228 19 228 33 ("jazz.U16Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S32Vector" define-class ("class") 229 19 229 33 ("jazz.S32Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U32Vector" define-class ("class") 230 19 230 33 ("jazz.U32Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S64Vector" define-class ("class") 231 19 231 33 ("jazz.S64Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U64Vector" define-class ("class") 232 19 232 33 ("jazz.U64Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.F32Vector" define-class ("class") 233 19 233 33 ("jazz.F32Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.F64Vector" define-class ("class") 234 19 234 33 ("jazz.F64Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Structure" define-class ("class") 235 19 235 33 ("jazz.Structure-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Port" define-class ("class") 236 19 236 28 ("jazz.Port-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Continuation" define-class ("class") 237 19 237 36 ("jazz.Continuation-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Procedure" define-class ("class") 238 19 238 33 ("jazz.Procedure-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Symbol" define-class ("class") 239 19 239 30 ("jazz.Symbol-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Keyword" define-class ("class") 240 19 240 31 ("jazz.Keyword-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Table" define-class ("class") 241 19 241 29 ("jazz.Table-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Thread" define-class ("class") 242 19 242 30 ("jazz.Thread-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Promise" define-class ("class") 243 19 243 31 ("jazz.Promise-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Foreign" define-class ("class") 244 19 244 31 ("jazz.Foreign-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Values" define-class ("class") 245 19 245 30 ("jazz.Values-Class" "jazz.Object")}
      {Lisp-Entry "jazz.EOF" define-class ("class") 246 19 246 27 ("jazz.EOF-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Unspecified" define-class ("class") 247 19 247 35 ("jazz.Unspecified-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Interface" define-class ("class") 255 19 255 33 ("%%get-interface-rank" "rank" "%%get-interface-ascendants" "ascendants" "jazz.allocate-interface" "jazz.Object-Class" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Category")}
      {Lisp-Entry "jazz.Field" define-class ("class") 265 19 265 29 ("%%get-field-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "%%get-category-field" define-macro ("macro") 269 20 269 40 (",field-name" ",category" "%%get-category-fields" "%%table-ref" "field-name" "category")}
      {Lisp-Entry "%%set-category-field" define-macro ("macro") 273 20 273 40 (",field" ",field-name" ",category" "%%get-category-fields" "%%table-set!" "field" "field-name" "category")}
      {Lisp-Entry "jazz.Slot" define-class ("class") 282 19 282 28 ("%%get-slot-initialize" "initialize" "%%get-slot-offset" "offset" "jazz.allocate-slot" "jazz.Object-Class" "name" "jazz.Field")}
      {Lisp-Entry "jazz.Property" define-class ("class") 292 19 292 32 ("%%get-property-setter" "setter" "%%get-property-getter" "getter" "jazz.allocate-property" "jazz.Object-Class" "initialize" "offset" "name" "jazz.Slot")}
      {Lisp-Entry "jazz.Method" define-class ("class") 302 19 302 30 ("%%set-method-implementation-rank" "%%get-method-implementation-rank" "implementation-rank" "%%set-method-category-rank" "%%get-method-category-rank" "category-rank" "%%set-method-implementation-tree" "%%get-method-implementation-tree" "implementation-tree" "%%set-method-implementation" "%%get-method-implementation" "implementation" "%%set-method-dispatch-type" "%%get-method-dispatch-type" "dispatch-type" "jazz.allocate-method" "jazz.Object-Class" "name" "jazz.Field")}
      {Lisp-Entry "jazz.Method-Node" define-class ("class") 315 19 315 35 ("%%set-method-node-children" "%%get-method-node-children" "children" "%%set-method-node-next-implementation" "%%get-method-node-next-implementation" "next-implementation" "%%set-method-node-next-node" "%%get-method-node-next-node" "next-node" "%%set-method-node-implementation" "%%get-method-node-implementation" "implementation" "%%set-method-node-category" "%%get-method-node-category" "category" "jazz.allocate-method-node" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Queue" define-class ("class") 328 19 328 29 ("%%set-queue-current" "%%get-queue-current" "current" "%%set-queue-last-anchor" "%%get-queue-last-anchor" "last-anchor" "%%set-queue-last-list" "%%get-queue-last-list" "last-list" "%%set-queue-list" "%%get-queue-list" "list" "jazz.allocate-queue" "jazz.Object-Class" "jazz.Object")}}}
  {Lisp-File-Entry {File core "src" "core" "exception" "syntax" "classes.scm"} 1258811564
    {Lisp-Entry "core.exception.syntax.classes" unit #f 37 16 37 45 ()
      {Lisp-Entry "jazz.Exception" define-class ("class") 45 19 45 33 ("jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.Exception~virtual") 49 22 49 44 ()}
      {Lisp-Entry "jazz.get-message" generic/specific ("jazz.Exception~virtual") 50 22 50 38 ()}
      {Lisp-Entry "jazz.get-detail" generic/specific ("jazz.Exception~virtual") 51 22 51 37 ()}
      {Lisp-Entry "jazz.Exception-Detail" define-class ("class") 59 19 59 40 ("%%get-exception-detail-children" "children" "%%get-exception-detail-location" "location" "%%get-exception-detail-title" "title" "%%get-exception-detail-icon" "icon" "jazz.allocate-exception-detail" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.System-Exception" define-class ("class") 71 19 71 40 ("%%get-system-exception-exception" "exception" "jazz.Object-Class" "jazz.Exception")}
      {Lisp-Entry "jazz.Error" define-class ("class") 80 19 80 29 ("%%get-error-message" "message" "jazz.allocate-error" "jazz.Object-Class" "jazz.Exception")}}}
  {Lisp-File-Entry {File core "src" "core" "module" "syntax" "classes.scm"} 1259335949
    {Lisp-Entry "core.module.syntax.classes" unit #f 37 16 37 42 ()
      {Lisp-Entry "jazz.Walk-Binding" define-class ("class") 45 19 45 36 ("jazz.Object-Class" "jazz.Type")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Walk-Binding~virtual") 49 22 49 46 ("source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" generic/specific ("jazz.Walk-Binding~virtual") 50 22 50 50 ()}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Walk-Binding~virtual") 51 22 51 46 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Walk-Binding~virtual") 52 22 52 49 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Walk-Binding~virtual") 53 22 53 53 ("form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" generic/specific ("jazz.Walk-Binding~virtual") 54 22 54 44 ("environment" "source-declaration" "arguments" "binding-src")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" generic/specific ("jazz.Walk-Binding~virtual") 55 22 55 52 ("environment" "source-declaration" "call" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" generic/specific ("jazz.Walk-Binding~virtual") 56 22 56 59 ("symbol-src" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" generic/specific ("jazz.Walk-Binding~virtual") 57 22 57 51 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" generic/specific ("jazz.Walk-Binding~virtual") 58 22 58 50 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" generic/specific ("jazz.Walk-Binding~virtual") 59 22 59 49 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" generic/specific ("jazz.Walk-Binding~virtual") 60 22 60 49 ("form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Walk-Binding~virtual") 61 22 61 51 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Walk-Binding~virtual") 62 22 62 51 ("form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Lexical-Binding" define-class ("class") 70 19 70 39 ("%%set-lexical-binding-hits" "%%get-lexical-binding-hits" "hits" "%%get-lexical-binding-type" "type" "%%get-lexical-binding-name" "name" "jazz.Object-Class" "jazz.Walk-Binding")}
      {Lisp-Entry "jazz.resolve-binding" generic/specific ("jazz.Lexical-Binding~virtual") 76 22 76 42 ()}
      {Lisp-Entry "jazz.Declaration" define-class ("class") 84 19 84 35 ("%%set-declaration-source" "%%get-declaration-source" "source" "%%set-declaration-locator" "%%get-declaration-locator" "locator" "%%set-declaration-parent" "%%get-declaration-parent" "parent" "%%set-declaration-toplevel" "%%get-declaration-toplevel" "toplevel" "%%get-declaration-attributes" "attributes" "%%get-declaration-compatibility" "compatibility" "%%get-declaration-access" "access" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.lookup-declaration" generic/specific ("jazz.Declaration~virtual") 94 22 94 45 ("source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.update-declaration" generic/specific ("jazz.Declaration~virtual") 95 22 95 45 ("new-declaration")}
      {Lisp-Entry "jazz.get-declaration-inclusions" generic/specific ("jazz.Declaration~virtual") 96 22 96 53 ()}
      {Lisp-Entry "jazz.get-nextmethod-signature" generic/specific ("jazz.Declaration~virtual") 97 22 97 51 ()}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Declaration~virtual") 98 22 98 43 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" generic/specific ("jazz.Declaration~virtual") 99 22 99 56 ()}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Declaration~virtual") 100 22 100 43 ("s" "k" "f")}
      {Lisp-Entry "jazz.Declaration-Reference" define-class ("class") 108 19 108 45 ("%%set-declaration-reference-declaration" "%%get-declaration-reference-declaration" "declaration" "%%get-declaration-reference-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.resolve-reference" generic/specific ("jazz.Declaration-Reference~virtual") 113 22 113 44 ("module-declaration")}
      {Lisp-Entry "jazz.Module-Reference" define-class ("class") 121 19 121 40 ("jazz.allocate-module-reference" "jazz.Object-Class" "declaration" "name" "jazz.Declaration-Reference")}
      {Lisp-Entry "jazz.Export-Reference" define-class ("class") 130 19 130 40 ("%%get-export-reference-module-reference" "module-reference" "jazz.allocate-export-reference" "jazz.Object-Class" "declaration" "name" "jazz.Declaration-Reference")}
      {Lisp-Entry "jazz.Autoload-Reference" define-class ("class") 139 19 139 42 ("jazz.allocate-autoload-reference" "jazz.Object-Class" "module-reference" "declaration" "name" "jazz.Export-Reference")}
      {Lisp-Entry "jazz.Unit-Declaration" define-class ("class") 148 19 148 40 ("%%set-unit-declaration-requires" "%%get-unit-declaration-requires" "requires" "jazz.allocate-unit-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Namespace-Declaration" define-class ("class") 157 19 157 45 ("%%set-namespace-declaration-body" "%%get-namespace-declaration-body" "body" "%%get-namespace-declaration-children" "children" "%%get-namespace-declaration-lookups" "lookups" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "%%get-access-lookup" define-macro ("macro") 163 20 163 39 (",access" ",namespace-declaration" "%%get-namespace-declaration-lookups" "%%vector-ref" "access" "namespace-declaration")}
      {Lisp-Entry "jazz.Module-Declaration" define-class ("class") 172 19 172 42 ("%%get-module-declaration-proclaims" "proclaims" "%%set-module-declaration-imports" "%%get-module-declaration-imports" "imports" "%%set-module-declaration-exports" "%%get-module-declaration-exports" "exports" "%%set-module-declaration-requires" "%%get-module-declaration-requires" "requires" "%%get-module-declaration-dialect-invoice" "dialect-invoice" "%%get-module-declaration-dialect-name" "dialect-name" "%%set-module-declaration-walker" "%%get-module-declaration-walker" "walker" "jazz.allocate-module-declaration" "jazz.Object-Class" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Namespace-Declaration")}
      {Lisp-Entry "jazz.Module-Invoice" define-class ("class") 187 19 187 38 ("%%get-module-invoice-rename" "rename" "%%get-module-invoice-prefix" "prefix" "%%get-module-invoice-except" "except" "%%get-module-invoice-only" "only" "%%get-module-invoice-version" "version" "%%get-module-invoice-phase" "phase" "%%get-module-invoice-module" "module" "%%get-module-invoice-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Export-Invoice" define-class ("class") 203 19 203 38 ("%%set-export-invoice-autoload" "%%get-export-invoice-autoload" "autoload" "jazz.allocate-export-invoice" "jazz.Object-Class" "rename" "prefix" "except" "only" "version" "phase" "module" "name" "jazz.Module-Invoice")}
      {Lisp-Entry "jazz.Import-Invoice" define-class ("class") 212 19 212 38 ("%%set-import-invoice-hit?" "%%get-import-invoice-hit?" "hit?" "jazz.allocate-import-invoice" "jazz.Object-Class" "rename" "prefix" "except" "only" "version" "phase" "module" "name" "jazz.Module-Invoice")}
      {Lisp-Entry "jazz.Export-Declaration" define-class ("class") 221 19 221 42 ("%%get-export-declaration-symbol" "symbol" "jazz.allocate-export-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Export-Syntax-Declaration" define-class ("class") 230 19 230 49 ("%%get-export-syntax-declaration-symbol" "symbol" "jazz.allocate-export-syntax-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Autoload-Declaration" define-class ("class") 239 19 239 44 ("%%set-autoload-declaration-declaration" "%%get-autoload-declaration-declaration" "declaration" "%%get-autoload-declaration-exported-module" "exported-module" "%%get-autoload-declaration-module" "module" "jazz.allocate-autoload-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Literal" define-class ("class") 250 19 250 31 ("%%get-literal-arguments" "arguments" "%%get-literal-name" "name" "jazz.allocate-literal" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Macro-Declaration" define-class ("class") 260 19 260 41 ("%%set-macro-declaration-body" "%%get-macro-declaration-body" "body" "%%set-macro-declaration-signature" "%%get-macro-declaration-signature" "signature" "jazz.allocate-macro-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Syntax-Declaration" define-class ("class") 270 19 270 42 ("%%set-syntax-declaration-body" "%%get-syntax-declaration-body" "body" "%%set-syntax-declaration-signature" "%%get-syntax-declaration-signature" "signature" "jazz.allocate-syntax-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Define-Syntax-Declaration" define-class ("class") 280 19 280 49 ("jazz.allocate-define-syntax-declaration" "jazz.Object-Class" "body" "signature" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Syntax-Declaration")}
      {Lisp-Entry "jazz.Void-Class" define-class ("class") 289 19 289 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Void" define-class ("class") 293 19 293 28 ("jazz.Void-Class" "jazz.Type")}
      {Lisp-Entry "jazz.Opt-Type" define-class ("class") 302 19 302 32 ("%%get-opt-type-type" "type" "jazz.allocate-opt-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Key-Type" define-class ("class") 311 19 311 32 ("%%get-key-type-type" "type" "%%get-key-type-key" "key" "jazz.allocate-key-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Rest-Type" define-class ("class") 321 19 321 33 ("%%get-rest-type-type" "type" "jazz.allocate-rest-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Function-Type" define-class ("class") 330 19 330 37 ("%%get-function-type-result" "result" "%%get-function-type-rest" "rest" "%%get-function-type-named" "named" "%%get-function-type-optional" "optional" "%%get-function-type-positional" "positional" "%%get-function-type-mandatory" "mandatory" "jazz.allocate-function-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Category-Type" define-class ("class") 344 19 344 37 ("%%get-category-type-declaration" "declaration" "jazz.allocate-category-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Values-Type" define-class ("class") 353 19 353 35 ("%%get-values-type-types" "types" "jazz.allocate-values-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Restriction-Type" define-class ("class") 362 19 362 40 ("%%get-restriction-type-type" "type" "%%get-restriction-type-base" "base" "jazz.allocate-restriction-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Complement-Type" define-class ("class") 372 19 372 39 ("%%get-complement-type-type" "type" "jazz.allocate-complement-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Union-Type" define-class ("class") 381 19 381 34 ("%%get-union-type-types" "types" "jazz.allocate-union-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Template-Type" define-class ("class") 390 19 390 37 ("%%get-template-type-types" "types" "%%get-template-type-class" "class" "jazz.allocate-template-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Nillable-Type" define-class ("class") 400 19 400 37 ("%%get-nillable-type-type" "type" "jazz.allocate-nillable-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Any-Class" define-class ("class") 409 19 409 33 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Any" define-class ("class") 413 19 413 27 ("jazz.Any-Class" "jazz.Type")}
      {Lisp-Entry "jazz.C-Type-Declaration" define-class ("class") 422 19 422 42 ("%%get-c-type-declaration-declare" "declare" "%%get-c-type-declaration-scheme-to-c" "scheme-to-c" "%%get-c-type-declaration-c-to-scheme" "c-to-scheme" "%%get-c-type-declaration-inclusions" "inclusions" "%%set-c-type-declaration-pointer-types" "%%get-c-type-declaration-pointer-types" "pointer-types" "%%get-c-type-declaration-base-type" "base-type" "%%get-c-type-declaration-expansion" "expansion" "%%get-c-type-declaration-kind" "kind" "jazz.allocate-c-type-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.C-Definition-Declaration" define-class ("class") 438 19 438 48 ("%%set-c-definition-declaration-body" "%%get-c-definition-declaration-body" "body" "%%get-c-definition-declaration-scope" "scope" "%%get-c-definition-declaration-c-name" "c-name" "%%get-c-definition-declaration-result-type" "result-type" "%%get-c-definition-declaration-parameter-types" "parameter-types" "%%set-c-definition-declaration-signature" "%%get-c-definition-declaration-signature" "signature" "jazz.allocate-c-definition-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Walker" define-class ("class") 452 19 452 30 ("%%set-walker-autoloads" "%%get-walker-autoloads" "autoloads" "%%set-walker-inclusions" "%%get-walker-inclusions" "inclusions" "%%get-walker-references" "references" "%%get-walker-variables" "variables" "%%set-walker-literals" "%%get-walker-literals" "literals" "%%set-walker-errors" "%%get-walker-errors" "errors" "%%set-walker-warnings" "%%get-walker-warnings" "warnings" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.walker-bindings" generic/specific ("jazz.Walker~virtual") 462 22 462 42 ()}
      {Lisp-Entry "jazz.walker-environment" generic/specific ("jazz.Walker~virtual") 463 22 463 45 ()}
      {Lisp-Entry "jazz.walk-declaration" generic/specific ("jazz.Walker~virtual") 464 22 464 43 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-reference" generic/specific ("jazz.Walker~virtual") 465 22 465 46 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" generic/specific ("jazz.Walker~virtual") 466 22 466 49 ("value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" generic/specific ("jazz.Walker~virtual") 467 22 467 47 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol" generic/specific ("jazz.Walker~virtual") 468 22 468 38 ("symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" generic/specific ("jazz.Walker~virtual") 469 22 469 36 ("form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-proclaim" generic/specific ("jazz.Walker~virtual") 470 22 470 44 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" generic/specific ("jazz.Walker~virtual") 471 22 471 45 ("form-src" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.runtime-export" generic/specific ("jazz.Walker~virtual") 472 22 472 41 ("declaration")}
      {Lisp-Entry "jazz.lookup-analyse" generic/specific ("jazz.Walker~virtual") 473 22 473 41 ("referenced-declaration" "symbol-src" "declaration")}
      {Lisp-Entry "%%get-module-declaration-literals" define #f 477 9 477 42 ("%%get-module-declaration-walker" "%%get-walker-literals" "lib-decl")}
      {Lisp-Entry "%%set-module-declaration-literals" define #f 479 9 479 42 ("%%get-module-declaration-walker" "%%set-walker-literals" "value" "lib-decl")}
      {Lisp-Entry "%%get-module-declaration-variables" define #f 481 9 481 43 ("%%get-module-declaration-walker" "%%get-walker-variables" "lib-decl")}
      {Lisp-Entry "%%get-module-declaration-references" define #f 483 9 483 44 ("%%get-module-declaration-walker" "%%get-walker-references" "lib-decl")}
      {Lisp-Entry "%%get-module-declaration-inclusions" define #f 485 9 485 44 ("%%get-module-declaration-walker" "%%get-walker-inclusions" "lib-decl")}
      {Lisp-Entry "%%set-module-declaration-inclusions" define #f 487 9 487 44 ("%%get-module-declaration-walker" "%%set-walker-inclusions" "value" "lib-decl")}
      {Lisp-Entry "%%get-module-declaration-autoloads" define #f 489 9 489 43 ("%%get-module-declaration-walker" "%%get-walker-autoloads" "lib-decl")}
      {Lisp-Entry "%%set-module-declaration-autoloads" define #f 491 9 491 43 ("%%get-module-declaration-walker" "%%set-walker-autoloads" "value" "lib-decl")}
      {Lisp-Entry "jazz.Walk-Context" define-class ("class") 500 19 500 36 ("%%get-walk-context-pathname" "pathname" "%%get-walk-context-locator" "locator" "%%get-walk-context-policy" "policy" "jazz.allocate-walk-context" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Location" define-class ("class") 511 19 511 37 ("%%get-walk-location-path" "path" "%%get-walk-location-locat" "locat" "%%get-walk-location-declaration-locator" "declaration-locator" "%%get-walk-location-unit-locator" "unit-locator" "jazz.allocate-walk-location" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Problem" define-class ("class") 523 19 523 36 ("%%get-walk-problem-location" "location" "jazz.Object-Class" "message" "jazz.Error")}
      {Lisp-Entry "jazz.Walk-Problems" define-class ("class") 532 19 532 37 ("%%get-walk-problems-errors" "errors" "%%get-walk-problems-warnings" "warnings" "jazz.allocate-walk-problems" "jazz.Object-Class" "message" "jazz.Error")}
      {Lisp-Entry "jazz.Walk-Warning" define-class ("class") 542 19 542 36 ("jazz.allocate-walk-warning" "jazz.Object-Class" "location" "message" "jazz.Walk-Problem")}
      {Lisp-Entry "jazz.Walk-Error" define-class ("class") 551 19 551 34 ("jazz.allocate-walk-error" "jazz.Object-Class" "location" "message" "jazz.Walk-Problem")}
      {Lisp-Entry "jazz.Unresolved-Error" define-class ("class") 560 19 560 40 ("%%get-unresolved-error-symbol" "symbol" "jazz.allocate-unresolved-error" "jazz.Object-Class" "location" "message" "jazz.Walk-Error")}
      {Lisp-Entry "jazz.Walk-Frame" define-class ("class") 569 19 569 34 ("%%get-walk-frame-bindings" "bindings" "jazz.allocate-walk-frame" "jazz.Object-Class" "jazz.Walk-Binding")}
      {Lisp-Entry "jazz.Signature" define-class ("class") 578 19 578 33 ("%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "%%get-signature-mandatory" "mandatory" "jazz.allocate-signature" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Symbol-Binding" define-class ("class") 591 19 591 38 ("%%set-symbol-binding-gensym" "%%get-symbol-binding-gensym" "gensym" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Variable" define-class ("class") 600 19 600 32 ("%%set-variable-reference-count" "%%get-variable-reference-count" "reference-count" "jazz.allocate-variable" "jazz.Object-Class" "gensym" "hits" "type" "name" "jazz.Symbol-Binding")}
      {Lisp-Entry "jazz.NextMethod-Variable" define-class ("class") 609 19 609 43 ("jazz.allocate-nextmethod-variable" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Variable")}
      {Lisp-Entry "jazz.Parameter" define-class ("class") 618 19 618 33 ("jazz.allocate-parameter" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Variable")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Parameter~virtual") 622 22 622 41 ("environment" "declaration")}
      {Lisp-Entry "jazz.Dynamic-Parameter" define-class ("class") 630 19 630 41 ("%%get-dynamic-parameter-class" "class" "jazz.allocate-dynamic-parameter" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Optional-Parameter" define-class ("class") 639 19 639 42 ("%%set-optional-parameter-default" "%%get-optional-parameter-default" "default" "jazz.allocate-optional-parameter" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Named-Parameter" define-class ("class") 648 19 648 39 ("%%set-named-parameter-default" "%%get-named-parameter-default" "default" "jazz.allocate-named-parameter" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Rest-Parameter" define-class ("class") 657 19 657 38 ("jazz.allocate-rest-parameter" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Self-Binding" define-class ("class") 666 19 666 36 ("jazz.allocate-self-binding" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Dynamic-Self-Binding" define-class ("class") 675 19 675 44 ("%%get-dynamic-self-binding-code" "code" "jazz.allocate-dynamic-self-binding" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Local-Variable-Binding" define-class ("class") 684 19 684 46 ("%%get-local-variable-binding-variable" "variable" "jazz.allocate-local-variable-binding" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Macro-Symbol" define-class ("class") 693 19 693 36 ("%%get-macro-symbol-setter" "setter" "%%get-macro-symbol-getter" "getter" "jazz.allocate-macro-symbol" "jazz.Object-Class" "gensym" "hits" "type" "name" "jazz.Symbol-Binding")}
      {Lisp-Entry "jazz.Form-Binding" define-class ("class") 703 19 703 36 ("jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Special-Form" define-class ("class") 712 19 712 36 ("%%get-special-form-walk" "walk" "jazz.allocate-special-form" "jazz.Object-Class" "hits" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Macro-Form" define-class ("class") 721 19 721 34 ("%%get-macro-form-expander" "expander" "jazz.allocate-macro-form" "jazz.Object-Class" "hits" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Syntax-Form" define-class ("class") 730 19 730 35 ("%%get-syntax-form-expander" "expander" "jazz.allocate-syntax-form" "jazz.Object-Class" "hits" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Define-Syntax-Form" define-class ("class") 739 19 739 42 ("%%get-define-syntax-form-environment" "environment" "jazz.allocate-define-syntax-form" "jazz.Object-Class" "expander" "hits" "type" "name" "jazz.Syntax-Form")}
      {Lisp-Entry "jazz.Syntactic-Closure" define-class ("class") 748 19 748 41 ("%%get-syntactic-closure-form" "form" "%%get-syntactic-closure-variables" "variables" "%%get-syntactic-closure-environment" "environment" "jazz.allocate-syntactic-closure" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Annotated-Variable" define-class ("class") 759 19 759 42 ("%%set-annotated-variable-type" "%%get-annotated-variable-type" "type" "%%get-annotated-variable-declared-type" "declared-type" "%%get-annotated-variable-variable" "variable" "jazz.allocate-annotated-variable" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Restricted-Binding" define-class ("class") 770 19 770 42 ("%%get-restricted-binding-type" "type" "%%get-restricted-binding-binding" "binding" "jazz.allocate-restricted-binding" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Annotated-Frame" define-class ("class") 780 19 780 39 ("%%get-annotated-frame-reset" "reset" "%%get-annotated-frame-variables" "variables" "jazz.allocate-annotated-frame" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Code" define-class ("class") 790 19 790 28 ("%%get-code-source" "source" "%%get-code-type" "type" "%%get-code-form" "form" "jazz.allocate-code" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Access" define-class ("class") 802 19 802 30 ("%%get-access-context" "context" "%%get-access-name" "name" "jazz.allocate-access" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Expression" define-class ("class") 812 19 812 34 ("%%get-expression-source" "source" "%%get-expression-type" "type" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Expression~virtual") 817 22 817 42 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" generic/specific ("jazz.Expression~virtual") 818 22 818 36 ("environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Expression~virtual") 819 22 819 42 ("s" "k" "f")}
      {Lisp-Entry "jazz.Proclaim" define-class ("class") 827 19 827 32 ("%%get-proclaim-clauses" "clauses" "jazz.allocate-proclaim" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Constant" define-class ("class") 836 19 836 32 ("%%get-constant-expansion" "expansion" "jazz.allocate-constant" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Delay" define-class ("class") 845 19 845 29 ("%%get-delay-expression" "expression" "jazz.allocate-delay" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Quasiquote" define-class ("class") 854 19 854 34 ("%%get-quasiquote-form" "form" "jazz.allocate-quasiquote" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Reference" define-class ("class") 863 19 863 33 ("%%get-reference-binding" "binding" "jazz.allocate-reference" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Method-Reference" define-class ("class") 872 19 872 40 ("jazz.allocate-method-reference" "jazz.Object-Class" "binding" "source" "type" "jazz.Reference")}
      {Lisp-Entry "jazz.Assignment" define-class ("class") 881 19 881 34 ("%%get-assignment-value" "value" "%%get-assignment-binding" "binding" "jazz.allocate-assignment" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Lambda" define-class ("class") 891 19 891 30 ("%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "jazz.allocate-lambda" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Let" define-class ("class") 901 19 901 27 ("%%get-let-body" "body" "%%get-let-bindings" "bindings" "jazz.allocate-let" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Named-Let" define-class ("class") 911 19 911 33 ("%%get-named-let-variable" "variable" "jazz.allocate-named-let" "jazz.Object-Class" "body" "bindings" "source" "type" "jazz.Let")}
      {Lisp-Entry "jazz.Letstar" define-class ("class") 920 19 920 31 ("%%get-letstar-body" "body" "%%get-letstar-bindings" "bindings" "jazz.allocate-letstar" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Letrec" define-class ("class") 930 19 930 30 ("%%get-letrec-body" "body" "%%get-letrec-bindings" "bindings" "jazz.allocate-letrec" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Receive" define-class ("class") 940 19 940 31 ("%%get-receive-body" "body" "%%get-receive-expression" "expression" "%%get-receive-variables" "variables" "jazz.allocate-receive" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Body" define-class ("class") 951 19 951 28 ("%%get-body-expressions" "expressions" "%%get-body-internal-defines" "internal-defines" "jazz.allocate-body" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Internal-Define" define-class ("class") 961 19 961 39 ("%%get-internal-define-value" "value" "%%get-internal-define-variable" "variable" "jazz.allocate-internal-define" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Begin" define-class ("class") 971 19 971 29 ("%%get-begin-expressions" "expressions" "jazz.allocate-begin" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Do" define-class ("class") 980 19 980 26 ("%%get-do-body" "body" "%%get-do-result" "result" "%%get-do-test" "test" "%%get-do-bindings" "bindings" "jazz.allocate-do" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Call" define-class ("class") 992 19 992 28 ("%%get-call-arguments" "arguments" "%%get-call-operator" "operator" "jazz.allocate-call" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.If" define-class ("class") 1002 19 1002 26 ("%%get-if-no" "no" "%%get-if-yes" "yes" "%%get-if-test" "test" "jazz.allocate-if" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Cond" define-class ("class") 1013 19 1013 28 ("%%get-cond-clauses" "clauses" "jazz.allocate-cond" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Case" define-class ("class") 1022 19 1022 28 ("%%get-case-clauses" "clauses" "%%get-case-target" "target" "jazz.allocate-case" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.And" define-class ("class") 1032 19 1032 27 ("%%get-and-expressions" "expressions" "jazz.allocate-and" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Or" define-class ("class") 1041 19 1041 26 ("%%get-or-expressions" "expressions" "jazz.allocate-or" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Declare" define-class ("class") 1050 19 1050 31 ("%%get-declare-declarations" "declarations" "jazz.allocate-declare" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Include" define-class ("class") 1059 19 1059 33 ("%%get-c-include-name" "name" "jazz.allocate-c-include" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Declare" define-class ("class") 1068 19 1068 33 ("%%get-c-declare-code" "code" "jazz.allocate-c-declare" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Named-Declare-Declaration" define-class ("class") 1077 19 1077 51 ("%%get-c-named-declare-declaration-code" "code" "jazz.allocate-c-named-declare-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.C-Initialize" define-class ("class") 1086 19 1086 36 ("%%get-c-initialize-code" "code" "jazz.allocate-c-initialize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Function" define-class ("class") 1095 19 1095 34 ("%%get-c-function-expansion" "expansion" "jazz.allocate-c-function" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Parameterize" define-class ("class") 1104 19 1104 36 ("%%get-parameterize-body" "body" "%%get-parameterize-bindings" "bindings" "jazz.allocate-parameterize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Time-Special" define-class ("class") 1114 19 1114 36 ("%%get-time-special-expressions" "expressions" "jazz.allocate-time" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Analysis-Data" define-class ("class") 1123 19 1123 37 ("%%set-analysis-data-declaration-references" "%%get-analysis-data-declaration-references" "declaration-references" "%%set-analysis-data-autoload-reference" "%%get-analysis-data-autoload-reference" "autoload-reference" "jazz.allocate-analysis-data" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Core-Dialect" define-class ("class") 1133 19 1133 36 ("jazz.allocate-core-dialect" "jazz.Object-Class" "bindings" "jazz.Dialect")}
      {Lisp-Entry "jazz.Core-Walker" define-class ("class") 1142 19 1142 35 ("jazz.allocate-core-walker" "jazz.Object-Class" "autoloads" "inclusions" "references" "variables" "literals" "errors" "warnings" "jazz.Walker")}}})
"define-class"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-class.scm"} 1258811564
    {Lisp-Entry "core.class.syntax.define-class" unit #f 37 16 37 46 ()
      {Lisp-Entry "jazz.define-class" define-macro ("macro") 40 20 40 37 (",inherited-slot-names" "',inherited-slot-names" ",',inherited-slot-names" "',',inherited-slot-names" "jazz.validate-inherited-slots" "jazz.identifier-name" "jazz.set-core-class" ",instance-size" "',instance-size" ",',instance-size" ",slot-names" "',slot-names" ",',slot-names" "',',slot-names" ",ascendant-accessor" "',ascendant-accessor" ",',ascendant-accessor" "eq?" "test:" "%%make-table" "',',name" ",class-accessor" "',class-accessor" ",',class-accessor" "jazz.new-core-class" "',name" ",',name" "%%string-append" "%%string->symbol" "jazz.naturals" "'%%object-set!" "%%object-set!" ",value" ",slot-setter" "'%%object-ref" ",rank" "%%object-ref" "jazz.expected-error" "jazz.object-of-class?" "%%core-assertion" ",object" ",slot-getter" "value" "object" "%%cddr" "slot-setter" "%%cadr" "slot-getter" "%%car" "let" "rank" "slot" "%%object" "'%%object" "%%list" ",@all-variables" "class" ",constructor" "jazz.define-macro" ",name" "jazz.define-variable" "jazz.debug-core?" "begin" "jazz.object-size" "%%fx+" "instance-size" "all-length" "%%symbol->string" "jazz.generate-symbol" "slot-name" "lambda" "all-variables" "%%append" "all-slot-names" "car" "map" "slot-names" "%%length" "ascendant-size" "ascendant-accessor" "%%null?" "if" "class-accessor" "let*" "proc" "jazz.parse-define-class" "define" "slots" "constructor" "class-name" "inherited-slot-names" "ascendant-name" "name")}
      {Lisp-Entry "jazz.define-class-runtime" define-macro ("macro") 97 20 97 45 ("%%symbol->string" "%%string-append" "%%string->symbol" "name")}}})
"define-method"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-method.scm"} 1258811564
    {Lisp-Entry "core.class.syntax.define-method" unit #f 37 16 37 47 ()
      {Lisp-Entry "jazz.define-virtual" define-macro ("macro") 40 20 40 39 ("jazz.expand-define-virtual" "%%car" "%%null?" "if" "bootstrap-type?" "let" "rest" "signature")}
      {Lisp-Entry "jazz.define-virtual-runtime" define-macro ("macro") 45 20 45 47 ("jazz.expand-define-virtual-runtime" "signature")}
      {Lisp-Entry "jazz.define-method" define-macro ("macro") 49 20 49 38 ("jazz.expand-define-method" "body" "signature")}}})
"define-method-expander"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-method-expander.scm"} 1260289835
    {Lisp-Entry "core.class.syntax.define-method-expander" unit #f 37 16 37 56 ()
      {Lisp-Entry "jazz.expand-define-virtual" define #f 40 9 40 35 ("obj" "lambda" "jazz.with-uniqueness" ",rank-name" "',rank-name" "%%get-object-class" "'%%get-object-class" "%%get-class-core-vtable" "'%%get-class-core-vtable" "%%vector-ref" "'%%vector-ref" "',name" "jazz.format" "jazz.error" "'jazz.error" ",class-name" "',class-name" ",is-test" "',is-test" "%%core-assertion" "'%%core-assertion" "%%list" "%%symbol?" ",@extra-parameters" ",object-parameter" ",name" "jazz.define-macro" "%%class-is?" "'%%class-is?" "jazz.bootstrap-type?" "'jazz.bootstrap-type?" "if" "is-test" "jazz.method-rank-name" "rank-name" "jazz.method-implementation-name" "implementation-name" "extra-parameters" "%%cadr" "object-parameter" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "bootstrap-type?" "signature")}
      {Lisp-Entry "jazz.expand-define-virtual-runtime" define #f 75 9 75 43 (",name" "',name" ",class-name" "jazz.register-virtual-name" ",rank-name" "define" "jazz.method-rank-name" "rank-name" "jazz.method-implementation-name" "implementation-name" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "signature")}
      {Lisp-Entry "jazz.expand-define-method" define #f 85 9 85 34 ("jazz.register-method" ",@body" ",@extra-parameters" ",object-parameter" "lambda" ",name" "',name" ",class-name" "jazz.find-nextmethod" "nextmethod" "let" ",implementation-name" "define" "begin" "jazz.method-implementation-name" "implementation-name" "extra-parameters" "%%cadr" "object-parameter" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "body" "signature")}
      {Lisp-Entry "jazz.method-implementation-name" define #f 100 9 100 40 ("%%string-append" "%%string->symbol" "%%symbol->string" "jazz.split-string" "jazz.last" "let" "name" "class-name")}
      {Lisp-Entry "jazz.method-rank-name" define #f 105 9 105 30 ("%%symbol->string" "%%string-append" "%%string->symbol" "implementation-name")}
      {Lisp-Entry "jazz.inherited-name?" define #f 109 9 109 29 ("%%get-class-core-virtual-names" "%%memq" "and" "%%get-class-ascendant" "ascendant" "let" "method-name" "class")}
      {Lisp-Entry "jazz.register-virtual-name" define #f 115 9 115 35 ("1" "%%length" "%%fx-" "%%list" "%%get-class-core-virtual-names" "%%append" "%%set-class-core-virtual-names" "method-name" "class")}
      {Lisp-Entry "jazz.register-method" define #f 123 9 123 29 ("%%get-class-core-virtual-alist" "%%set-class-core-virtual-alist" "%%cons" "%%list" "%%get-class-core-method-alist" "%%append" "%%set-class-core-method-alist" "jazz.inherited-name?" "if" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.get-method-rank" define #f 133 9 133 29 ("1" "%%fx+" "%%cdr" "%%car" "%%eq?" "jazz.error" "%%null?" "if" "0" "rank" "%%get-class-core-virtual-names" "scan" "iter" "let" "method-name" "class")}
      {Lisp-Entry "jazz.get-method-implementation" define #f 143 9 143 39 ("jazz.get-method-rank" "%%get-class-core-vtable" "%%vector-ref" "method-name" "class")}
      {Lisp-Entry "jazz.find-nextmethod" define #f 148 9 148 29 ("jazz.error" "rest" "obj" "lambda" "%%get-class-ascendant" "jazz.get-method-implementation" "jazz.inherited-name?" "if" "method-name" "class")}}})
"development"
 ({Lisp-File-Entry {File core "src" "core" "module" "development.scm"} 1259939479
    {Lisp-Entry "core.module.development" unit #f 38 6 38 29 ()
      {Lisp-Entry "jazz.parse" define #f 49 9 49 19 ("jazz.desourcify-all" "pretty-print" "jazz.read-toplevel-form" "form-src" "jazz.find-unit-src" "src" "let" "unit-name")}
      {Lisp-Entry "jazz.parse-source" define #f 56 9 56 26 ("jazz.present-source" "pretty-print" "jazz.read-toplevel-form" "form-src" "jazz.find-unit-src" "src" "let*" "interpret" "'interpret" "jazz.walk-for" "parameterize" "unit-name")}
      {Lisp-Entry "jazz.expand-unit" define #f 69 9 69 25 ("jazz.expand-module-source" "module" "jazz.expand-unit-source" "unit" "case" "jazz.requested-unit-resource" "jazz.requested-unit-name" "cdr" "rest" "car" "jazz.source-code" "kind" "jazz.read-toplevel-form" "form" "jazz.find-unit-src" "src" "let*" "walk" "'walk" "or" "jazz.walk-for" "parameterize" "walk-for" "#!key" "unit-name")}
      {Lisp-Entry "jazz.expand" define #f 82 9 82 20 ("current-output-port" "jazz.expand-to-port" "apply" "rest" "unit-name")}
      {Lisp-Entry "jazz.expand-to-file" define #f 86 9 86 28 ("jazz.expand-to-port" "apply" "port" "lambda" "or" "call-with-output-file" "rest" "#!rest" "file" "#!key" "unit-name")}
      {Lisp-Entry "jazz.expand-to-port" define #f 92 9 92 28 ("jazz.expand-unit" "apply" "jazz.desourcify-all" "pretty-print" "rest" "port" "unit-name")}
      {Lisp-Entry "jazz.expand-source" define #f 98 9 98 27 ("jazz.expand-unit" "apply" "jazz.present-source" "pretty-print" "rest" "unit-name")}
      {Lisp-Entry "jazz.lookup" define #f 109 9 109 20 ("jazz.walk-unit" "jazz.lookup-declaration" "access" "name" "module-name")}}})
"error"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "error.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.error" unit #f 37 16 37 39 ()
      {Lisp-Entry "jazz.unimplemented" define #f 40 9 40 27 ("%%car" "jazz.error" "%%null?" "if" "rest")}}}
  {Lisp-File-Entry {File core "src" "core" "class" "syntax" "error.scm"} 1258811564
    {Lisp-Entry "core.class.syntax.error" unit #f 37 16 37 39 ()
      {Lisp-Entry "jazz.object-of-class?" define-macro ("variable") 40 22 40 43 ()}
      {Lisp-Entry "jazz.not-object-error" define #f 43 9 43 30 ("jazz.error" "obj")}
      {Lisp-Entry "jazz.outside-object-error" define #f 47 9 47 34 ("jazz.error" "rnk" "obj")}
      {Lisp-Entry "jazz.expected-error" define #f 51 9 51 28 ("jazz.error" "obj" "class")}}}
  {Lisp-File-Entry {File core "src" "core" "exception" "runtime" "error.scm"} 1259335949
    {Lisp-Entry "core.exception.runtime.error" unit #f 37 16 37 44 ("jazz.raise-jazz-error" "jazz.error" "set!" "jazz.Error" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Error" define-class ("class runtime") 40 27 40 37 ()}
      {Lisp-Entry "jazz.new-error" define #f 43 9 43 23 ("jazz.Error" "jazz.allocate-error" "message")}
      {Lisp-Entry "jazz.get-message" generic/specific ("jazz.Error") 47 21 47 37 ("error" "%%get-error-message")}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.Error") 51 21 51 43 ("error" "%%get-error-message")}
      {Lisp-Entry "jazz.raise-jazz-error" define #f 58 9 58 30 ("jazz.new-error" "raise" "jazz.format" "apply" "message" "let" "proper-tail-calls" "declare" "rest" "fmt-string")}}})
"exception"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "exception.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.exception" unit #f 38 16 38 43 ()
      {Lisp-Entry "jazz.current-exception-handler" define #f 43 12 43 42 ("current-exception-handler")}
      {Lisp-Entry "jazz.with-exception-handler" define #f 46 13 46 40 ("continuation-return" "exc" "with-exception-handler" "return" "lambda" "continuation-capture" "thunk" "proc")}
      {Lisp-Entry "jazz.exception-reason" define #f 54 13 54 34 ("jazz.format" "%%not" "if" "'arguments" "arguments" "'message" "message" "'location" "'exc" "condition-property-accessor" "location" "let" "exc")}
      {Lisp-Entry "jazz.current-exception-handler" define #f 63 12 63 42 ("current-exception-handler")}
      {Lisp-Entry "jazz.with-exception-handler" define #f 66 12 66 39 ("with-exception-handler")}
      {Lisp-Entry "jazz.with-exception-catcher" define #f 69 12 69 39 ("with-exception-catcher")}
      {Lisp-Entry "jazz.display-exception" define #f 72 12 72 34 ("display-exception")}
      {Lisp-Entry "jazz.display-continuation-backtrace" define #f 75 12 75 47 ("display-continuation-backtrace")}
      {Lisp-Entry "jazz.raise" define #f 78 13 78 23 ("raise" "obj")}}}
  {Lisp-File-Entry {File core "src" "core" "exception" "runtime" "exception.scm"} 1258811564
    {Lisp-Entry "core.exception.runtime.exception" unit #f 37 16 37 48 ("newline" "jazz.present-exception" "display" "begin" "%%is?" "%%object?" "and" "if" "port" "exc" "lambda" "set!" "##display-exception-hook" "previous-hook" "let" "jazz.System-Exception" "jazz.Exception-Detail" "jazz.Exception" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Exception" define-class ("class runtime") 45 27 45 41 ()}
      {Lisp-Entry "jazz.print-object" generic/specific ("jazz.Exception") 48 21 48 38 ("if" "jazz.object->serial" "jazz.format" "exception" "jazz.get-message" "message" "let" "detail" "output")}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.Exception~virtual-runtime") 56 30 56 52 ()}
      {Lisp-Entry "jazz.get-message" generic/specific ("jazz.Exception~virtual-runtime") 57 30 57 46 ()}
      {Lisp-Entry "jazz.get-detail" generic/specific ("jazz.Exception~virtual-runtime") 58 30 58 45 ()}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.Exception") 61 21 61 43 ("get-output-string" "exception" "jazz.format" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.get-message" generic/specific ("jazz.Exception") 67 21 67 37 ()}
      {Lisp-Entry "jazz.get-detail" generic/specific ("jazz.Exception") 71 21 71 36 ()}
      {Lisp-Entry "jazz.Exception-Detail" define-class ("class runtime") 83 27 83 48 ()}
      {Lisp-Entry "jazz.new-exception-detail" define #f 86 9 86 34 ("jazz.Exception-Detail" "jazz.allocate-exception-detail" "children" "location" "title" "icon")}
      {Lisp-Entry "jazz.System-Exception" define-class ("class runtime") 98 27 98 48 ()}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.System-Exception") 101 21 101 43 ("exception" "%%get-system-exception-exception" "jazz.exception-reason")}
      {Lisp-Entry "jazz.exception-reason" define #f 113 9 113 30 ("%%substring" "1" "%%fx-" "%%string-ref" "%%eqv?" "0" "%%fx>" "and" "if" "string-length" "len" "get-output-string" "str" "jazz.display-exception" "open-output-string" "output" "let" "exc")}
      {Lisp-Entry "jazz.exception-detail" define #f 124 9 124 30 ("jazz.get-detail" "jazz.Exception" "%%is?" "%%object?" "and" "if" "exc")}
      {Lisp-Entry "jazz.exception-location" define #f 131 9 131 32 ("##exception->locat" "cont" "exc")}}})
"expander"
 ({Lisp-File-Entry {File core "src" "core" "generic" "syntax" "expander.scm"} 1258811564
    {Lisp-Entry "core.generic.syntax.expander" unit #f 38 16 38 44 ()
      {Lisp-Entry "jazz.dynamic-parameter?" define #f 41 9 41 32 ("%%cdr" "jazz.composite-name?" "or" "%%car" "type" "let" "%%pair?" "and" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-type" define #f 49 9 49 36 ("jazz.specifier->name" "jazz.specifier?" "if" "%%car" "type" "let" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-types" define #f 56 9 56 37 ("%%cdr" "jazz.dynamic-parameter-type" "%%cons" "%%car" "jazz.dynamic-parameter?" "%%pair?" "and" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.dynamic-parameter-name" define #f 65 9 65 36 ("%%cadr" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-names" define #f 69 9 69 37 ("%%cdr" "jazz.dynamic-parameter-name" "%%cons" "%%car" "jazz.dynamic-parameter?" "%%pair?" "and" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.generic-parameters" define #f 78 9 78 32 ("jazz.reverse!" "values" "else" "%%symbol?" "jazz.dynamic-parameter-name" "%%cons" "%%cdr" "jazz.dynamic-parameter?" "cond" "%%car" "parameter" "%%pair?" "if" "result" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.specific-parameters" define #f 92 9 92 33 ("else" "%%cdr" "jazz.dynamic-parameter-name" "%%cons" "jazz.dynamic-parameter?" "cond" "%%car" "parameter" "%%pair?" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.expand-define-generic" define #f 108 9 108 35 ("apply" "jazz.dynamic-parameter-names" ",parameter" "%%class-of" "parameter" "map" "%%specific-dispatch" ",gensym-specific" "jazz.process-pending-specifics" "%%get-generic-pending-specifics" "%%not" "%%when" ",gensym-rest" ",@mandatory-parameters" ",@dynamic-signature" "%%list" "',generic-method-locator" "jazz.new-generic" "jazz.generic-reset" "jazz.global-value" ",gensym-generic" "',generic-locator" "jazz.global-variable?" ",generic-locator" ",@body" ",generic-method-locator" "jazz.error" ",formal-signature" "lambda" ",specific-implementation-locator" "define" "begin" "%%null?" "if" "gensym-rest" "let" "jazz.generic-parameters" "extra-parameters" "mandatory-parameters" "receive" "gensym-specific" "jazz.generate-symbol" "gensym-generic" "jazz.generic-object-locator" "generic-locator" "jazz.implementation-locator" "specific-implementation-locator" "jazz.specific-parameters" "formal-signature" "jazz.dynamic-parameter-types" "dynamic-signature" "%%cdr" "parameters" "%%car" "generic-method-locator" "let*" "body" "signature")}
      {Lisp-Entry "jazz.generic-object-locator" define #f 144 9 144 36 ("%%symbol->string" "%%string-append" "%%string->symbol" "locator")}
      {Lisp-Entry "jazz.expand-define-specific" define #f 153 9 153 36 (",generic-locator" "jazz.register-specific" "%%set-specific-implementation" ",@body" ",@nextmethod-bindings" "let" ",formal-signature" ",gensym-lambda" ",@dynamic-signature" "lambda" "jazz.new-specific" ",specific-implementation-locator" "define" ",gensym-specific" "%%get-specific-ancestor-specifics" "%%get-specific-implementation" "nextmethod" "%%list" "if" "nextmethod-bindings" "gensym-lambda" "jazz.generate-symbol" "gensym-specific" "jazz.generic-object-locator" "generic-locator" "jazz.implementation-locator" "specific-implementation-locator" "jazz.specific-parameters" "formal-signature" "jazz.dynamic-parameter-types" "dynamic-signature" "%%cdr" "parameters" "%%car" "generic-method-locator" "root" "'root" "%%eq?" "root?" "let*" "body" "modifier" "signature")}
      {Lisp-Entry "jazz.implementation-locator" define #f 174 9 174 36 ("jazz.join-strings" "%%string-append" "%%string->symbol" "%%car" "%%pair?" "if" "class/call" "lambda" "map" "dynamic-signature-strings" "%%symbol->string" "generic-string" "let" "dynamic-signature" "generic-locator")}}})
"expression"
 ({Lisp-File-Entry {File core "src" "core" "module" "syntax" "walker" "expression.scm"} 1260289835
    {Lisp-Entry "core.module.syntax.walker.expression" unit #f 37 16 37 52 ("jazz.Time-Special" "jazz.Parameterize" "jazz.Declare" "jazz.Or" "jazz.And" "jazz.Case" "jazz.Cond" "jazz.If" "jazz.dialect.kernel.not-null?" "'jazz.dialect.kernel.not-null?" "jazz.not-type-tests" "jazz.Unspecified" "jazz.dialect.kernel.unspecified?" "'jazz.dialect.kernel.unspecified?" "jazz.Values" "jazz.dialect.kernel.values?" "'jazz.dialect.kernel.values?" "jazz.Foreign" "jazz.dialect.kernel.foreign?" "'jazz.dialect.kernel.foreign?" "jazz.Thread" "jazz.dialect.kernel.thread?" "'jazz.dialect.kernel.thread?" "jazz.Table" "jazz.dialect.kernel.table?" "'jazz.dialect.kernel.table?" "jazz.Method" "jazz.dialect.kernel.method?" "'jazz.dialect.kernel.method?" "jazz.Slot" "jazz.dialect.kernel.slot?" "'jazz.dialect.kernel.slot?" "jazz.Field" "jazz.dialect.kernel.field?" "'jazz.dialect.kernel.field?" "jazz.Interface" "jazz.dialect.kernel.interface?" "'jazz.dialect.kernel.interface?" "jazz.Class" "jazz.dialect.kernel.class?" "'jazz.dialect.kernel.class?" "jazz.Category" "jazz.dialect.kernel.category?" "'jazz.dialect.kernel.category?" "jazz.Object" "jazz.dialect.kernel.object?" "'jazz.dialect.kernel.object?" "jazz.Keyword" "jazz.dialect.kernel.keyword?" "'jazz.dialect.kernel.keyword?" "jazz.Flonum" "jazz.dialect.kernel.flonum?" "'jazz.dialect.kernel.flonum?" "jazz.Fixnum" "jazz.dialect.kernel.fixnum?" "'jazz.dialect.kernel.fixnum?" "jazz.EOF" "scheme.dialect.kernel.eof-object?" "'scheme.dialect.kernel.eof-object?" "scheme.dialect.kernel.output-port?" "'scheme.dialect.kernel.output-port?" "jazz.Port" "scheme.dialect.kernel.input-port?" "'scheme.dialect.kernel.input-port?" "jazz.Procedure" "scheme.dialect.kernel.procedure?" "'scheme.dialect.kernel.procedure?" "jazz.Continuation" "jazz.dialect.kernel.continuation?" "'jazz.dialect.kernel.continuation?" "jazz.F64Vector" "jazz.dialect.kernel.f64vector?" "'jazz.dialect.kernel.f64vector?" "jazz.F32Vector" "jazz.dialect.kernel.f32vector?" "'jazz.dialect.kernel.f32vector?" "jazz.U64Vector" "jazz.dialect.kernel.u64vector?" "'jazz.dialect.kernel.u64vector?" "jazz.S64Vector" "jazz.dialect.kernel.s64vector?" "'jazz.dialect.kernel.s64vector?" "jazz.U32Vector" "jazz.dialect.kernel.u32vector?" "'jazz.dialect.kernel.u32vector?" "jazz.S32Vector" "jazz.dialect.kernel.s32vector?" "'jazz.dialect.kernel.s32vector?" "jazz.U16Vector" "jazz.dialect.kernel.u16vector?" "'jazz.dialect.kernel.u16vector?" "jazz.S16Vector" "jazz.dialect.kernel.s16vector?" "'jazz.dialect.kernel.s16vector?" "jazz.U8Vector" "jazz.dialect.kernel.u8vector?" "'jazz.dialect.kernel.u8vector?" "jazz.S8Vector" "jazz.dialect.kernel.s8vector?" "'jazz.dialect.kernel.s8vector?" "jazz.Vector" "scheme.dialect.kernel.vector?" "'scheme.dialect.kernel.vector?" "jazz.String" "scheme.dialect.kernel.string?" "'scheme.dialect.kernel.string?" "jazz.Char" "scheme.dialect.kernel.char?" "'scheme.dialect.kernel.char?" "jazz.Symbol" "scheme.dialect.kernel.symbol?" "'scheme.dialect.kernel.symbol?" "jazz.Pair" "scheme.dialect.kernel.pair?" "'scheme.dialect.kernel.pair?" "jazz.Null" "scheme.dialect.kernel.null?" "'scheme.dialect.kernel.null?" "jazz.List" "scheme.dialect.kernel.list?" "'scheme.dialect.kernel.list?" "jazz.Boolean" "scheme.dialect.kernel.boolean?" "'scheme.dialect.kernel.boolean?" "jazz.Integer" "scheme.dialect.kernel.integer?" "'scheme.dialect.kernel.integer?" "jazz.Rational" "scheme.dialect.kernel.rational?" "'scheme.dialect.kernel.rational?" "jazz.Real" "scheme.dialect.kernel.real?" "'scheme.dialect.kernel.real?" "jazz.Complex" "scheme.dialect.kernel.complex?" "'scheme.dialect.kernel.complex?" "jazz.Number" "scheme.dialect.kernel.number?" "'scheme.dialect.kernel.number?" "jazz.type-tests" "%%table-set!" "jazz.emit-inlined-call" ",name" "name" "jazz.bind" "jazz.identifier-name" "primitive" "'primitive" "jazz.get-primitive-patterns" "patterns" "jazz.emit-primitive-call" "##string-set!" "##vector-set!" "jazz.dialect.language.functional.set-element!" "'jazz.dialect.language.functional.set-element!" "##string-ref" "##vector-ref" "list-ref" "jazz.dialect.language.functional.element" "'jazz.dialect.language.functional.element" "##string-length" "##vector-length" "##length" "scheme.dialect.kernel.length" "'scheme.dialect.kernel.length" "##cdr" "scheme.dialect.kernel.cdr" "'scheme.dialect.kernel.cdr" "##car" "scheme.dialect.kernel.car" "'scheme.dialect.kernel.car" "##eqv?" "scheme.dialect.kernel.eqv?" "'scheme.dialect.kernel.eqv?" "##eq?" "scheme.dialect.kernel.eq?" "'scheme.dialect.kernel.eq?" "##not" "scheme.dialect.kernel.not" "'scheme.dialect.kernel.not" "##flonum->fixnum" "jazz.dialect.kernel.flonum->fixnum" "'jazz.dialect.kernel.flonum->fixnum" "##fixnum->flonum" "jazz.dialect.kernel.fixnum->flonum" "'jazz.dialect.kernel.fixnum->flonum" "jazz.dialect.kernel.fl/" "'jazz.dialect.kernel.fl/" "jazz.dialect.kernel.fl*" "'jazz.dialect.kernel.fl*" "jazz.dialect.kernel.fl-" "'jazz.dialect.kernel.fl-" "jazz.dialect.kernel.fl+" "'jazz.dialect.kernel.fl+" "jazz.dialect.kernel.fx*" "'jazz.dialect.kernel.fx*" "jazz.dialect.kernel.fx-" "'jazz.dialect.kernel.fx-" "jazz.dialect.kernel.fx+" "'jazz.dialect.kernel.fx+" "##flround" "scheme.dialect.kernel.round" "'scheme.dialect.kernel.round" "##fltruncate" "scheme.dialect.kernel.truncate" "'scheme.dialect.kernel.truncate" "##flceiling" "scheme.dialect.kernel.ceiling" "'scheme.dialect.kernel.ceiling" "##flfloor" "scheme.dialect.kernel.floor" "'scheme.dialect.kernel.floor" "##fxquotient" "scheme.dialect.kernel.quotient" "'scheme.dialect.kernel.quotient" "##/" "##fl/" "'scheme.dialect.kernel./" "##*" "##fl*" "##fx*" "'scheme.dialect.kernel.*" "##-" "##fl-" "##fx-" "'scheme.dialect.kernel.-" "##+" "##fl+" "##fx+" "'scheme.dialect.kernel.+" "##fl>=" "##fx>=" "'scheme.dialect.kernel.>=" "##fl>" "##fx>" "'scheme.dialect.kernel.>" "##fl<=" "##fx<=" "'scheme.dialect.kernel.<=" "##fl<" "##fx<" "'scheme.dialect.kernel.<" "##=" "##fl=" "##fx=" "'scheme.dialect.kernel.=" "jazz.add-primitive-patterns" "jazz.emit-primitive-new-call" "%%cdr" "%%get-function-type-result" "jazz.codes-forms" ",locator" "jazz.new-code" "jazz.emit-inlined-binding-call" "jazz.match-signature?" "%%get-lexical-binding-type" "function-type" "%%car" "specializer" "on" "'on" "jazz.debug-specializers" "%%get-lexical-binding-name" "specialized" "'specialized" "'call" "match" "'match" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "scheme.dialect.kernel./" "scheme.dialect.kernel.*" "scheme.dialect.kernel.-" "scheme.dialect.kernel.+" "scheme.dialect.kernel.>=" "scheme.dialect.kernel.>" "scheme.dialect.kernel.<=" "scheme.dialect.kernel.<" "scheme.dialect.kernel.=" "%%memq" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-module-warn?" "jazz.warnings?" "and" "%%when" "begin" "%%null?" "scan" "iter" "jazz.codes-types" "types" "jazz.get-specializers" "specializers" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "jazz.emit-specialized-locator" "or" "%%not" "if" "environment" "declaration" "call" "arguments-codes" "arguments" "locator" "operator" "lambda" "jazz.emit-specialized-call" "set!" "jazz.Do" "jazz.Receive" "jazz.Letrec" "jazz.Letstar" "jazz.Named-Let" "jazz.Let" "jazz.Lambda" "jazz.Method-Reference" "jazz.Quasiquote" "jazz.Delay" "jazz.Proclaim" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Proclaim" define-class ("class runtime") 45 27 45 40 ()}
      {Lisp-Entry "jazz.new-proclaim" define #f 48 9 48 26 ("jazz.Proclaim" "jazz.allocate-proclaim" "clauses")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Proclaim") 52 21 52 41 ("jazz.proclaim" "clause" "lambda" "for-each" "%%get-declaration-toplevel" "module-declaration" "expression" "%%get-proclaim-clauses" "clauses" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Proclaim") 61 21 61 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Delay" define-class ("class runtime") 73 27 73 37 ()}
      {Lisp-Entry "jazz.new-delay" define #f 76 9 76 23 ("jazz.Delay" "jazz.allocate-delay" "expression")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Delay") 80 21 80 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "delay" "jazz.new-code" "%%get-delay-expression" "expression" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Delay") 88 21 88 41 ("%%get-delay-expression" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Quasiquote" define-class ("class runtime") 102 27 102 42 ()}
      {Lisp-Entry "jazz.new-quasiquote" define #f 105 9 105 28 ("jazz.Quasiquote" "jazz.allocate-quasiquote" "form")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Quasiquote") 109 21 109 41 ("jazz.List" "expression" "%%get-quasiquote-form" "quasiquote" "'quasiquote" "jazz.new-code" "%%cdr" "%%cons" "%%cadr" "jazz.emit-expression" "jazz.sourcified-form" "%%list" "unquote-splicing" "'unquote-splicing" "unquote" "'unquote" "%%car" "%%eq?" "or" "%%pair?" "if" "form" "lambda" "emit" "letrec" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Quasiquote") 124 21 124 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Method-Reference" define-class ("class runtime") 136 27 136 48 ()}
      {Lisp-Entry "jazz.new-method-reference" define #f 139 9 139 34 ("jazz.Method-Reference" "jazz.allocate-method-reference" "binding")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Method-Reference") 143 21 143 41 ("jazz.Any" "%%get-lexical-binding-type" "or" "%%get-declaration-locator" "jazz.new-code" "expression" "%%get-reference-binding" "method-declaration" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" generic/specific ("jazz.Method-Reference") 152 21 152 35 ("jazz.Any" "jazz.codes-forms" "expression" "jazz.emit-expression" "jazz.sourcified-form" "jazz.new-code" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Method-Reference") 159 21 159 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Lambda" define-class ("class runtime") 171 27 171 38 ()}
      {Lisp-Entry "jazz.new-lambda" define #f 174 9 174 24 ("jazz.Lambda" "jazz.allocate-lambda" "body" "signature" "source" "type")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Lambda") 178 21 178 41 ("%%get-expression-source" "jazz.new-function-type" ",@signature-casts" ",cast-body" ",signature-output" "%%not" "if" "%%get-code-type" "jazz.sourcified-form" "begin" "jazz.new-code" "jazz.emit-type-cast" "jazz.simplify-begin" "cast-body" "jazz.emit-signature-casts" "signature-casts" "jazz.emit-expression" "body-code" "jazz.emit-signature" "signature-output" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "expression" "%%get-expression-type" "type" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Lambda") 201 21 201 41 ("%%get-lambda-body" "jazz.fold-statement" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Lambda") 207 21 207 35 ("%%get-lambda-body" "jazz.tree-fold" "cons" "aug-env" "let" "frame" "lambda" "expression" "%%get-lambda-signature" "jazz.annotate-signature" "jazz.with-annotated-frame" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Let" define-class ("class runtime") 225 27 225 35 ()}
      {Lisp-Entry "jazz.new-let" define #f 228 9 228 21 ("jazz.Let" "jazz.allocate-let" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Let") 232 21 232 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-let-body" "body" "expression" "%%get-let-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Let") 256 21 256 41 ("%%get-let-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Let") 262 21 262 35 ("%%get-let-body" "jazz.tree-fold" "cdr" "jazz.tree-fold-list" "seed2" "seed1" "car" "map" "cons" "aug-env" "expression" "%%get-let-bindings" "bindings" "let*" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Named-Let" define-class ("class runtime") 278 27 278 41 ()}
      {Lisp-Entry "jazz.new-named-let" define #f 281 9 281 27 ("jazz.Named-Let" "jazz.allocate-named-let" "body" "bindings" "variable" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Named-Let") 285 21 285 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "annotated-variable" "binding" "map" "bindings-output" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.Any" "jazz.new-annotated-variable" "%%cons" "jazz.with-annotated-frame" "%%get-let-body" "body" "%%get-let-bindings" "bindings" "expression" "%%get-named-let-variable" "variable" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Named-Let") 310 21 310 41 ("%%get-let-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Named-Let") 316 21 316 35 ("%%get-let-body" "jazz.tree-fold" "cdr" "jazz.tree-fold-list" "seed2" "seed1" "car" "map" "%%get-named-let-variable" "cons" "aug-env" "expression" "%%get-let-bindings" "bindings" "let*" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Letstar" define-class ("class runtime") 332 27 332 39 ()}
      {Lisp-Entry "jazz.new-letstar" define #f 335 9 335 25 ("jazz.Letstar" "jazz.allocate-letstar" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Letstar") 339 21 339 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "let*" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-letstar-body" "body" "expression" "%%get-letstar-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Letstar") 363 21 363 41 ("%%get-letstar-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Letstar") 369 21 369 35 ("%%get-letstar-body" "caar" "list" "cons" "cdar" "jazz.tree-fold" "cdr" "pair?" "if" "aug-env" "seed2" "expression" "%%get-letstar-bindings" "ls" "lp" "let" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Letrec" define-class ("class runtime") 388 27 388 38 ()}
      {Lisp-Entry "jazz.new-letrec" define #f 391 9 391 24 ("jazz.Letrec" "jazz.allocate-letrec" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Letrec") 395 21 395 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "letrec" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-letrec-body" "body" "expression" "%%get-letrec-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Letrec") 419 21 419 41 ("%%get-letrec-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Letrec") 425 21 425 35 ("%%get-letrec-body" "jazz.tree-fold" "cdr" "jazz.tree-fold-list" "seed2" "seed1" "car" "map" "cons" "aug-env" "expression" "%%get-letrec-bindings" "bindings" "let*" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Receive" define-class ("class runtime") 441 27 441 39 ()}
      {Lisp-Entry "jazz.new-receive" define #f 444 9 444 25 ("jazz.Receive" "jazz.allocate-receive" "body" "expression" "variables" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Receive") 448 21 448 41 ("%%get-expression-source" "%%get-code-type" ",expression-output" "jazz.emit-binding-symbol" "variable" "map" "receive" "jazz.new-code" "body-code" "jazz.emit-expression" "jazz.sourcified-form" "expression-output" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-receive" "jazz.with-annotated-frame" "%%get-receive-body" "body" "%%get-receive-expression" "expr" "expression" "%%get-receive-variables" "variables" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Receive") 467 21 467 41 ("%%get-receive-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Receive") 473 21 473 35 ("%%get-receive-body" "%%get-receive-expression" "jazz.tree-fold" "seed2" "seed1" "expression" "%%get-receive-variables" "cons" "aug-env" "let*" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Do" define-class ("class runtime") 488 27 488 34 ()}
      {Lisp-Entry "jazz.new-do" define #f 491 9 491 20 ("jazz.Do" "jazz.allocate-do" "body" "result" "test" "bindings")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Do") 495 21 495 41 ("%%get-code-type" ",bindings-output" "do" "jazz.new-code" "body-code" "result-code" "test-code" ",@step-code-list" ",init-code" "jazz.emit-binding-symbol" "%%list" "if" "step-code-list" "jazz.emit-expression" "jazz.sourcified-form" "init-code" "%%cddr" "step" "%%cadr" "init" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-do-body" "body" "%%get-do-result" "result" "%%get-do-test" "test" "expression" "%%get-do-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Do") 527 21 527 41 ("%%get-do-body" "%%get-do-result" "%%get-do-test" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Do") 535 21 535 35 ("%%get-do-test" "%%get-do-body" "%%get-do-result" "jazz.tree-fold" "cddr" "or" "x" "lambda" "seed2" "cadr" "jazz.tree-fold-list" "seed1" "expression" "%%get-do-bindings" "car" "map" "cons" "aug-env" "let*" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.specializers" define #f 559 8 559 25 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.add-specializer" define #f 563 9 563 29 ("%%list" "%%table-ref" "%%append" "jazz.specializers" "%%table-set!" "specializer" "specialized-declaration")}
      {Lisp-Entry "jazz.get-specializers" define #f 569 9 569 30 ("jazz.specializers" "%%table-ref" "binding")}
      {Lisp-Entry "jazz.emit-specialized-locator" define #f 615 8 615 37 ()}
      {Lisp-Entry "jazz.primitive-patterns" define #f 650 8 650 31 ()}
      {Lisp-Entry "jazz.initialize-primitive-patterns" define #f 654 9 654 43 ("set!" "jazz.primitive-patterns" "jazz.walk-specifier" "%%list" "%%cadr" "specifier" "name" "pattern" "map" "%%table-set!" "%%cdr" "patterns" "%%car" "operator" "pair" "lambda" "for-each" "eq?" "test:" "%%make-table" "table" "let")}
      {Lisp-Entry "jazz.add-primitive-patterns" define #f 669 9 669 36 ("%%cons" "jazz.primitive-patterns" "set!" "patterns" "operator")}
      {Lisp-Entry "jazz.get-primitive-patterns" define #f 673 9 673 36 ("jazz.primitive-patterns" "%%table-ref" "locator")}
      {Lisp-Entry "jazz.match-signature?" define #f 764 9 764 30 ("list-tail" "lambda" "jazz.every?" "%%get-rest-type-type" "match-rest?" "else" "%%cdr" "%%car" "cond" "expected" "types" "args" "iter" "%%null?" "%%not" "%%fx<=" "%%fx>=" "match-positional?" "jazz.Any" "%%subtype?" "%%get-category-type-declaration" "%%get-reference-binding" "%%eq?" "jazz.Reference" "and" "or" "jazz.Category-Type" "%%class-is?" "if" "expect" "type" "arg" "match?" "define" "%%get-function-type-rest" "rest" "%%get-function-type-named" "named" "%%get-function-type-optional" "optional" "%%get-function-type-positional" "positional" "%%get-function-type-mandatory" "mandatory" "%%length" "argcount" "let" "function-type" "argument-types" "arguments")}
      {Lisp-Entry "jazz.If" define-class ("class runtime") 813 27 813 34 ()}
      {Lisp-Entry "jazz.new-if" define #f 816 9 816 20 ("jazz.If" "jazz.allocate-if" "no" "yes" "test" "source")}
      {Lisp-Entry "jazz.type-tests" define #f 820 8 820 23 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.not-type-tests" define #f 871 8 871 27 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.restrict-type" define #f 878 9 878 27 ("jazz.new-restriction-type" "type" "base")}
      {Lisp-Entry "jazz.restriction-of?" define #f 882 9 882 29 ("%%get-restriction-type-type" "jazz.Restriction-Type" "%%class-is?" "and" "class" "type")}
      {Lisp-Entry "jazz.complement-type" define #f 887 9 887 29 ("jazz.new-complement-type" "jazz.new-restriction-type" "%%get-restriction-type-type" "%%get-complement-type-type" "%%get-restriction-type-base" "%%eq?" "jazz.Complement-Type" "jazz.restriction-of?" "and" "if" "type" "base")}
      {Lisp-Entry "jazz.branch-types" define #f 894 9 894 26 ("%%get-nillable-type-type" "jazz.Nillable-Type" "jazz.not-type-tests" "jazz.type-tests" "%%table-ref" "class" "jazz.dialect.language.functional.is-not?" "%%cadr" "2" "jazz.dialect.kernel.is?" "1" "%%fx=" "scheme.dialect.kernel.not" "case" "%%length" "count" "%%get-call-arguments" "arguments" "%%get-declaration-locator" "operator-locator" "operator-binding" "%%get-call-operator" "operator" "jazz.Call" "%%get-or-expressions" "jazz.Or" "%%get-and-expressions" "jazz.And" "%%get-lexical-binding-type" "values" "%%get-annotated-variable-variable" "jazz.find-annotated" "actual-variable" "frame" "jazz.Variable" "no" "jazz.new-restricted-binding" "%%list" "jazz.new-annotated-frame" "yes" "jazz.Pair" "jazz.Null" "jazz.List" "%%eq?" "no-type" "else" "jazz.resolve-binding" "jazz.Declaration" "%%get-reference-binding" "binding" "jazz.Reference" "%%class-is?" "jazz.type?" "cond" "yes-type" "extract-binding" "actual-type" "origin" "receive" "type-expr" "process-is" "process-or" "%%cons" "%%cdr" "newenv" "%%car" "%%null?" "if" "augmented" "scan" "iter" "let" "expr-list" "process-and" "process-expr" "revenv" "env" "expr" "process-not" "define" "environment" "test")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.If") 1015 21 1015 41 ("%%get-expression-source" "%%get-code-type" "jazz.extend-type" "jazz.simplify-begin" "jazz.sourcified-form" "if" "jazz.new-code" "%%get-if-no" "no" "%%get-if-yes" "yes" "jazz.emit-expression" "jazz.branch-types" "no-environment" "yes-environment" "jazz.bind" "expression" "%%get-if-test" "test" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.If") 1029 21 1029 41 ("%%get-if-no" "%%get-if-yes" "%%get-if-test" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.If") 1037 21 1037 35 ("%%get-if-test" "%%get-if-yes" "%%get-if-no" "jazz.tree-fold" "expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Cond" define-class ("class runtime") 1059 27 1059 36 ()}
      {Lisp-Entry "jazz.new-cond" define #f 1062 9 1062 22 ("jazz.Cond" "jazz.allocate-cond" "clauses" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Cond") 1066 21 1066 41 ("%%get-expression-source" "%%get-code-type" "lambda" "map" "jazz.extend-types" "%%cdr" "%%cons" "=>" "jazz.emit-expression" "jazz.sourcified-form" "else" "'else" "%%not" "output" "jazz.branch-types" "no-environment" "yes-environment" "jazz.bind" "%%cddr" "body" "%%cadr" "arrow?" "test" "%%car" "clause" "%%null?" "if" "recurse" "cond" "jazz.new-code" "expression" "%%get-cond-clauses" "clauses" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Cond") 1092 21 1092 41 ("%%get-cond-clauses" "jazz.fold-expression" "%%not" "if" "%%cdr" "body" "%%car" "test" "let" "clause" "lambda" "map" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Cond") 1104 21 1104 35 ("%%not" "%%cdr" "jazz.tree-fold" "%%cddr" "body" "test" "%%car" "clause" "let*" "null?" "if" "%%get-cond-clauses" "ls" "fold" "let" "expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Case" define-class ("class runtime") 1130 27 1130 36 ()}
      {Lisp-Entry "jazz.new-case" define #f 1133 9 1133 22 ("jazz.Case" "jazz.allocate-case" "clauses" "target" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Case") 1137 21 1137 41 ("%%get-expression-source" "%%get-code-type" "jazz.extend-types" ",tries" "%%car" "tries" "emited-clause" "jazz.sourcified-form" "case" "jazz.new-code" "jazz.emit-expression" "%%cdr" "body" "clause" "lambda" "map" "emited-clauses" "%%get-case-clauses" "clauses" "expression" "%%get-case-target" "target" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Case") 1157 21 1157 41 ("%%get-case-clauses" "cdr" "map" "jazz.fold-expressions" "%%get-case-target" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Case") 1163 21 1163 35 ("%%get-case-target" "jazz.tree-fold" "%%get-case-clauses" "cdr" "map" "jazz.tree-fold-list" "expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.And" define-class ("class runtime") 1181 27 1181 35 ()}
      {Lisp-Entry "jazz.new-and" define #f 1184 9 1184 21 ("jazz.And" "jazz.allocate-and" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.And") 1188 21 1188 41 ("%%get-expression-source" "jazz.Any" "expression" "%%get-and-expressions" "jazz.emit-expressions" "jazz.codes-forms" "and" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.And") 1195 21 1195 41 ("%%get-and-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.And") 1200 21 1200 35 ("%%get-and-expressions" "jazz.tree-fold-list" "expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Or" define-class ("class runtime") 1216 27 1216 34 ()}
      {Lisp-Entry "jazz.new-or" define #f 1219 9 1219 20 ("jazz.Or" "jazz.allocate-or" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Or") 1223 21 1223 41 ("%%get-expression-source" "jazz.Any" "expression" "%%get-or-expressions" "jazz.emit-expressions" "jazz.codes-forms" "or" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Or") 1230 21 1230 41 ("%%get-or-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Or") 1235 21 1235 35 ("%%get-or-expressions" "jazz.tree-fold-list" "expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Declare" define-class ("class runtime") 1251 27 1251 39 ()}
      {Lisp-Entry "jazz.new-declare" define #f 1254 9 1254 25 ("jazz.Declare" "jazz.allocate-declare" "declarations")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Declare") 1258 21 1258 41 ("jazz.Any" ",@declarations" "declare" "jazz.new-code" "expression" "%%get-declare-declarations" "declarations" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Declare") 1266 21 1266 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Parameterize" define-class ("class runtime") 1278 27 1278 44 ()}
      {Lisp-Entry "jazz.new-parameterize" define #f 1281 9 1281 30 ("jazz.Parameterize" "jazz.allocate-parameterize" "body" "bindings")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Parameterize") 1285 21 1285 41 ("%%get-code-type" "jazz.sourcified-form" "%%cdr" "value" "%%car" "variable" "binding" "lambda" "map" "parameterize" "jazz.new-code" "jazz.emit-expression" "body-code" "%%get-parameterize-body" "body" "expression" "%%get-parameterize-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Parameterize") 1301 21 1301 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Parameterize") 1305 21 1305 35 ("%%get-parameterize-body" "jazz.tree-fold" "expression" "%%get-parameterize-bindings" "cdr" "map" "jazz.tree-fold-list" "seed2" "let" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Time-Special" define-class ("class runtime") 1321 27 1321 44 ()}
      {Lisp-Entry "jazz.new-time-special" define #f 1324 9 1324 30 ("jazz.Time-Special" "jazz.allocate-time" "expressions")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Time-Special") 1328 21 1328 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "begin" "time" "jazz.new-code" "expression" "%%get-time-special-expressions" "expressions" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Time-Special") 1338 21 1338 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.validate-proclaim" generic/specific ("jazz.Walker~virtual-runtime") 1350 30 1350 52 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-proclaim" generic/specific ("jazz.Walker") 1353 21 1353 43 ("walker" "jazz.walk-error" "jazz.Module-Declaration" "%%class-is?" "%%not" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-proclaim" define #f 1358 9 1358 27 ("jazz.new-proclaim" "%%cdr" "clauses" "%%desourcify" "form" "let" "jazz.validate-proclaim" "form-src" "environment" "declaration" "resume" "walker")}}})
"ffi"
 ({Lisp-File-Entry {File core "src" "core" "module" "syntax" "walker" "ffi.scm"} 1258811564
    {Lisp-Entry "core.module.syntax.walker.ffi" unit #f 37 16 37 45 ("jazz.C-Function" "jazz.C-Initialize" "jazz.C-Named-Declare-Declaration" "jazz.C-Declare" "jazz.C-Include" "jazz.C-Definition-Declaration" "jazz.C-Type-Declaration" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.C-Type-Declaration" define-class ("class runtime") 45 27 45 50 ()}
      {Lisp-Entry "jazz.new-c-type-declaration" define #f 48 9 48 36 ("jazz.setup-declaration" "jazz.C-Type-Declaration" "jazz.allocate-c-type-declaration" "new-declaration" "let" "declare" "scheme-to-c" "c-to-scheme" "inclusions" "base-type" "expansion" "kind" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.get-declaration-inclusions" generic/specific ("jazz.C-Type-Declaration") 54 21 54 52 ("declaration" "%%get-c-type-declaration-inclusions")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.C-Type-Declaration") 58 21 58 42 ("begin" "environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" generic/specific ("jazz.C-Type-Declaration") 62 21 62 55 ("%%list" "and" "if" ",expansion" ",locator" "c-define-type" "%%get-c-type-declaration-scheme-to-c" "scheme-to-c" "%%get-c-type-declaration-c-to-scheme" "c-to-scheme" "%%get-c-type-declaration-expansion" "expansion" "declaration" "%%get-declaration-locator" "locator" "let")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.C-Type-Declaration") 72 21 72 42 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Definition-Declaration" define-class ("class runtime") 84 27 84 56 ()}
      {Lisp-Entry "jazz.new-c-definition-declaration" define #f 87 9 87 42 ("jazz.setup-declaration" "jazz.C-Definition-Declaration" "jazz.allocate-c-definition-declaration" "new-declaration" "let" "scope" "c-name" "result-type" "parameter-types" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.C-Definition-Declaration") 93 21 93 52 ("jazz.validate-arguments" "if" "declaration" "%%get-c-definition-declaration-signature" "signature" "let" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.C-Definition-Declaration") 99 21 99 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" ",scope" ",c-name" ",result-type" ",parameter-types" "jazz.emit-signature" "c-define" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-c-definition-declaration-body" "body" "%%get-c-definition-declaration-scope" "scope" "%%get-c-definition-declaration-c-name" "c-name" "%%get-c-definition-declaration-result-type" "result-type" "%%get-c-definition-declaration-parameter-types" "parameter-types" "%%get-c-definition-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.C-Definition-Declaration") 116 21 116 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.C-Definition-Declaration") 123 21 123 42 ("%%get-c-definition-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Include" define-class ("class runtime") 137 27 137 41 ()}
      {Lisp-Entry "jazz.new-c-include" define #f 140 9 140 27 ("jazz.C-Include" "jazz.allocate-c-include" "name")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.C-Include") 144 21 144 41 ("jazz.Any" "%%string-append" "c-declare" "jazz.new-code" "expression" "%%get-c-include-name" "name" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.C-Include") 152 21 152 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Declare" define-class ("class runtime") 164 27 164 41 ()}
      {Lisp-Entry "jazz.new-c-declare" define #f 167 9 167 27 ("jazz.C-Declare" "jazz.allocate-c-declare" "code")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.C-Declare") 171 21 171 41 ("jazz.Any" ",code" "c-declare" "jazz.new-code" "expression" "%%get-c-declare-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.C-Declare") 179 21 179 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Named-Declare-Declaration" define-class ("class runtime") 191 27 191 59 ()}
      {Lisp-Entry "jazz.new-c-named-declare-declaration" define #f 194 9 194 45 ("jazz.setup-declaration" "jazz.C-Named-Declare-Declaration" "jazz.allocate-c-named-declare-declaration" "new-declaration" "let" "code" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.C-Named-Declare-Declaration") 200 21 200 42 ("begin" "environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" generic/specific ("jazz.C-Named-Declare-Declaration") 204 21 204 55 (",code" "c-declare" "declaration" "%%get-c-named-declare-declaration-code" "code" "let")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.C-Named-Declare-Declaration") 209 21 209 42 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Initialize" define-class ("class runtime") 221 27 221 44 ()}
      {Lisp-Entry "jazz.new-c-initialize" define #f 224 9 224 30 ("jazz.C-Initialize" "jazz.allocate-c-initialize" "code")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.C-Initialize") 228 21 228 41 ("jazz.Any" ",code" "c-initialize" "jazz.new-code" "expression" "%%get-c-initialize-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.C-Initialize") 236 21 236 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Function" define-class ("class runtime") 248 27 248 42 ()}
      {Lisp-Entry "jazz.new-c-function" define #f 251 9 251 28 ("jazz.C-Function" "jazz.allocate-c-function" "expansion")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.C-Function") 255 21 255 41 ("jazz.Any" "expression" "%%get-c-function-expansion" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.C-Function") 262 21 262 41 ("expression" "s" "k" "f")}}})
"generic"
 ({Lisp-File-Entry {File core "src" "core" "generic" "runtime" "generic.scm"} 1258811564
    {Lisp-Entry "core.generic.runtime.generic" unit #f 38 16 38 44 ()
      {Lisp-Entry "jazz.new-generic" define #f 41 9 41 25 ("jazz.generic-make-root" "jazz.Generic" "jazz.allocate-generic" "generic" "jazz.identifier-name" "name" "let*" "root-proc" "dynamic-signature" "locator")}
      {Lisp-Entry "jazz.generic-reset" define #f 48 9 48 27 ("%%get-generic-root-specific" "%%get-specific-dynamic-signature" "jazz.generic-make-root" "root-proc" "generic")}
      {Lisp-Entry "jazz.generic-make-root" define #f 52 9 52 31 ("%%get-generic-pending-specifics" "%%cons" "%%set-generic-pending-specifics" "%%set-generic-root-specific" "jazz.invalid-generic-call" "apply" "rest" "lambda" "or" "jazz.new-specific" "root-specific" "let" "root-proc" "dynamic-signature" "generic")}
      {Lisp-Entry "jazz.invalid-generic-call" define #f 58 9 58 34 ("jazz.generic-error" "%%cdr" "%%car" "%%class-of" "%%cons" "%%pair?" "and" "if" "%%get-generic-root-specific" "%%get-specific-dynamic-signature" "signature" "iter" "dynamic-parameters" "let" "rest" "generic")}
      {Lisp-Entry "jazz.generic-error" define #f 68 9 68 27 ("%%cons" "jazz.error" "%%get-generic-root-specific" "%%get-specific-dynamic-signature" "root-signature" "%%get-generic-name" "name" "let" "signature" "generic")}
      {Lisp-Entry "jazz.register-specific" define #f 80 9 80 31 ("%%get-generic-pending-specifics" "%%cons" "%%set-generic-pending-specifics" "specific" "generic")}
      {Lisp-Entry "jazz.process-pending-specifics" define #f 89 9 89 39 ("%%set-generic-pending-specifics" "%%get-generic-pending-specifics" "%%reverse" "jazz.insert/replace-specific" "specific" "lambda" "for-each" "%%get-generic-root-specific" "jazz.resolve-signature" "generic")}
      {Lisp-Entry "jazz.resolve-signature" define #f 99 9 99 31 ("%%set-specific-dynamic-signature" "%%procedure?" "%%when" "%%get-specific-dynamic-signature" "signature/proc" "let" "specific")}
      {Lisp-Entry "jazz.insert/replace-specific" define #f 105 9 105 37 ("%%set-car!" "%%set-generic-root-specific" "%%get-generic-root-specific" "perfect-match" "%%set-specific-descendant-specifics" "set!" "%%memq" "%%when" "else" "jazz.remove!" "%%get-specific-ancestor-specifics" "brothers" "brother-partition" "descendants" "%%assq" "descendant-partition" "assv" "jazz.dynamic-signature-compare" "ordered" "'ordered" "%%eq?" "descendant-signature" "descendant" "%%get-specific-descendant-specifics" "jazz.partition" "partition" "ancestor-signature" "ancestor" "lambda" "for-each" "%%set-specific-ancestor-specifics" "descendant-specifics" "ancestors" "jazz.generic-error" "%%not" "cond" "jazz.gather-dynamic-signature-ancestors" "matches" "%%get-specific-dynamic-signature" "dynamic-signature" "let*" "%%cons" "jazz.specific-better?" "%%pair?" "if" "others" "%%car" "best" "%%cdr" "scan" "iter" "let" "specifics" "put-best-first" "define" "specific" "generic")}
      {Lisp-Entry "jazz.gather-dynamic-signature-ancestors" define #f 180 9 180 48 ("%%null?" "else" "%%cons" "%%memq" "%%cdr" "%%get-specific-descendant-specifics" "found-in-descendants" "ordered" "set!" "equal" "%%get-specific-dynamic-signature" "jazz.dynamic-signature-compare" "case" "%%car" "specific" "%%pair?" "if" "partial-matches" "%%get-generic-root-specific" "%%list" "specifics" "iter" "or" "perfect-match" "let" "dynamic-signature" "generic")}
      {Lisp-Entry "jazz.dynamic-signature-compare" define #f 206 9 206 39 ("else" "ordered" "'ordered" "reverse-ordered" "'reverse-ordered" "jazz.subcategory?" "%%cdr" "%%car" "%%eq?" "cond" "unordered" "'unordered" "and" "%%null?" "or" "if" "equal" "'equal" "match" "iter" "let" "ancestor-signature" "descendant-signature")}
      {Lisp-Entry "jazz.dynamic-signature-equal?" define #f 228 9 228 38 ("%%cdr" "%%car" "%%eq?" "and" "%%null?" "or" "if" "iter" "let" "dynamic-signature2" "dynamic-signature1")}
      {Lisp-Entry "jazz.specific-better?" define #f 237 9 237 30 ("%%cdr" "%%car" "%%get-class-level" "%%fx>" "or" "signature2" "%%get-specific-dynamic-signature" "signature1" "iter" "let" "specific2" "specific1")}
      {Lisp-Entry "jazz.display-tree" define #f 249 9 249 26 ("1" "%%fx+" "newline" "%%get-specific-descendant-specifics" "%%get-specific-ancestor-specifics" "%%get-specific-dynamic-signature" "write" "specific" "lambda" "for-each" "0" "level" "%%get-generic-root-specific" "%%list" "specifics" "iterate" "let" "jazz.process-pending-specifics" "%%get-generic-pending-specifics" "%%null?" "%%not" "%%when" "generic")}
      {Lisp-Entry "jazz.dispatch-from-root" define #f 274 9 274 32 ("else" "%%car" "%%pair?" "jazz.generic-error" "%%not" "cond" "jazz.gather-dynamic-signature-ancestors" "matches" "let" "dynamic-classes" "generic")}}}
  {Lisp-File-Entry {File core "src" "core" "generic" "syntax" "generic.scm"} 1258811564
    {Lisp-Entry "core.generic.syntax.generic" unit #f 44 16 44 43 ("jazz.Generic" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Generic" define-class ("class") 47 19 47 31 ("%%set-generic-pending-specifics" "%%get-generic-pending-specifics" "pending-specifics" "%%set-generic-root-specific" "%%get-generic-root-specific" "root-specific" "%%get-generic-name" "name" "%%get-generic-locator" "locator" "jazz.allocate-generic" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Generic" define-class ("class runtime") 54 27 54 39 ()}
      {Lisp-Entry "jazz.define-generic" define-macro ("macro") 57 20 57 39 ("jazz.expand-define-generic" "%%apply" "rest")}
      {Lisp-Entry "%%specific-dispatch" define-macro ("macro") 61 20 61 39 (",dynamic-classes" ",generic" "jazz.dispatch-from-root" "%%get-specific-implementation" "dynamic-classes" "generic")}}})
"initialize"
 ({Lisp-File-Entry {File core "src" "core" "module" "initialize.scm"} 1258811564
    {Lisp-Entry "core.module.initialize" unit #f 37 16 37 38 ("jazz.initialize-primitive-patterns")}})
"keyword"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "keyword.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.keyword" unit #f 37 16 37 41 ()
      {Lisp-Entry "jazz.keyword?" define #f 42 13 42 26 ("keyword?" "obj")}
      {Lisp-Entry "jazz.keyword->string" define #f 45 13 45 33 ("keyword->string" "keyword")}
      {Lisp-Entry "jazz.string->keyword" define #f 48 13 48 33 ("string->keyword" "string")}
      {Lisp-Entry "jazz.keyword?" define #f 52 13 52 26 ("%%keyword?" "obj")}
      {Lisp-Entry "jazz.keyword->string" define #f 55 13 55 33 ("%%keyword->string" "keyword")}
      {Lisp-Entry "jazz.string->keyword" define #f 58 13 58 33 ("%%string->keyword" "string")}
      {Lisp-Entry "jazz.keyword?" define #f 62 12 62 25 ("1" "%%string-length" "%%fx-" "%%string-ref" "%%eqv?" "%%symbol->string" "str" "let" "%%symbol?" "and" "obj")}
      {Lisp-Entry "jazz.keyword->string" define #f 68 12 68 32 ("1" "%%length" "%%fx-" "0" "%%substring" "%%symbol->string" "str" "let" "keyword")}
      {Lisp-Entry "jazz.string->keyword" define #f 73 12 73 32 ("%%string-append" "%%string->symbol" "string")}}})
"list"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "list.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.list" unit #f 37 16 37 38 ()
      {Lisp-Entry "jazz.find-in" define #f 40 9 40 21 ("%%cdr" "%%car" "or" "%%null?" "if" "scan" "iter" "let" "lst" "proc")}
      {Lisp-Entry "jazz.find-if" define #f 48 9 48 21 ("%%cdr" "%%car" "value" "%%null?" "if" "scan" "iter" "let" "lst" "predicate")}
      {Lisp-Entry "jazz.getprop" define #f 58 9 58 21 ("%%cddr" "else" "%%car" "%%eqv?" "%%null?" "cond" "scan" "iter" "let" "target" "plist")}
      {Lisp-Entry "jazz.getf" define #f 68 9 68 18 ("%%cadr" "if" "jazz.getprop" "pair" "let" "not-found" "#!key" "target" "plist")}
      {Lisp-Entry "jazz.reverse!" define #f 75 8 75 21 ("reverse")}
      {Lisp-Entry "jazz.list-copy" define #f 79 9 79 23 ("obj" "lambda" "map" "lst")}
      {Lisp-Entry "jazz.last-tail" define #f 83 9 83 23 ("else" "%%null?" "cond" "%%cdr" "tail" "scan" "iter" "let" "%%pair?" "if" "lst")}
      {Lisp-Entry "jazz.last-pair" define #f 96 9 96 23 ("%%cdr" "tail" "scan" "iter" "let" "%%pair?" "if" "lst")}
      {Lisp-Entry "jazz.last" define #f 106 9 106 18 ("jazz.last-pair" "%%car" "lst")}
      {Lisp-Entry "jazz.remove-duplicates" define #f 110 9 110 31 ("%%cons" "%%memv" "%%cdr" "result" "%%car" "value" "%%not-null?" "if" "scan" "iter" "let" "lst")}
      {Lisp-Entry "jazz.partition" define #f 121 9 121 23 ("%%set-cdr!" "begin" "%%list" "%%cons" "%%not" "set" "category" "%%car" "element" "%%cdr" "partition" "let*" "%%null?" "if" "scan" "iter" "let" "associate" "key" "lst")}
      {Lisp-Entry "jazz.rassq" define #f 136 9 136 19 ("%%cdr" "else" "%%car" "%%cdar" "%%eq?" "%%null?" "cond" "rest" "iter" "let" "alist" "obj")}
      {Lisp-Entry "jazz.butlast" define #f 146 9 146 21 ("jazz.butlast" "%%car" "%%cons" "%%cdr" "%%null?" "if" "lst")}
      {Lisp-Entry "jazz.naturals" define #f 152 9 152 22 ("jazz.reverse!" "1" "%%fx+" "%%cons" "set!" "%%fx<" "%%while" "n" "lst" "let" "to" "from")}
      {Lisp-Entry "jazz.remove!" define #f 161 9 161 21 ("%%set-cdr!" "scan" "previous" "let" "begin" "%%null?" "if" "%%cdr" "set!" "%%car" "%%eqv?" "%%not-null?" "and" "%%while" "lst" "target")}}})
"macros"
 ({Lisp-File-Entry {File core "src" "core" "base" "syntax" "macros.scm"} 1258811564
    {Lisp-Entry "core.base.syntax.macros" unit #f 37 16 37 39 ()
      {Lisp-Entry "%%boolean" define-macro ("syntax") 40 20 40 29 (",expr" "if" "jazz.source-code" "%%cadr" "expr" "let" "src" "lambda")}
      {Lisp-Entry "%%not-null?" define-macro ("syntax") 46 20 46 31 (",expr" "%%null?" "%%not" "jazz.source-code" "%%cadr" "expr" "let" "src" "lambda")}
      {Lisp-Entry "%%when" define-macro ("syntax") 57 20 57 26 (",@body" "begin" ",test" "if" "%%cddr" "body" "jazz.source-code" "%%cadr" "test" "let" "src" "lambda")}
      {Lisp-Entry "%%while" define-macro ("syntax") 72 20 72 27 (",@body" "begin" ",test" "if" ",iter" "jazz.generate-symbol" "iter" "%%cddr" "body" "jazz.source-code" "%%cadr" "test" "let" "src" "lambda")}
      {Lisp-Entry "%%core-assert" define-macro ("syntax") 89 20 89 33 ("jazz.debug-core?" "jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%core-assertion" define-macro ("syntax") 94 20 94 36 ("jazz.debug-core?" "jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "%%debug-assert" define-macro ("syntax") 99 20 99 34 ("jazz.debug-user?" "jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%debug-assertion" define-macro ("syntax") 104 20 104 37 ("jazz.debug-user?" "jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "%%assert" define-macro ("syntax") 109 20 109 28 ("jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%assertion" define-macro ("syntax") 114 20 114 31 ("jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "jazz.expand-%%assert" define #f 119 9 119 29 ("error" "'error" "jazz.expand-%%assertion-body" "%%unspecified" "'%%unspecified" "%%list" "%%null?" "if" "effective-body" "get-output-string" "%%desourcify" "write" "display" "open-output-string" "port" "message" "%%cddr" "body" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-%%assertion" define #f 131 9 131 32 ("jazz.expand-%%assertion-body" "%%unspecified" "'%%unspecified" "%%list" "%%null?" "if" "effective-body" "%%cdr" "body" "%%cddr" "%%car" "action" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-%%assertion-body" define #f 139 9 139 37 (",@body" "begin" "jazz.simplify-begin" ",action" ",assertion" "%%not" "if" "body" "action" "assertion" "test?")}
      {Lisp-Entry "jazz.bind" define-macro ("macro") 166 20 166 29 (",tree-symbol" "tree-symbol" ",cdr-symbol" "cdr-symbol" ",@body" ",cdr-binding" "%%cdr" "cdr-binding" ",car-symbol" "jazz.error" "%%null?" "if" "jazz.generate-symbol" "car-symbol" "%%pair?" "expand-cdr" ",tree" ",car-binding" "%%symbol?" "cond" "%%car" "car-binding" "let" "expand-car" "define" "body" "tree" "bindings")}
      {Lisp-Entry "%%compose-name" define-macro ("macro") 203 20 203 34 (",s2" ",s1" "%%symbol->string" "%%string-append" "%%string->symbol" "s2" "s1")}}})
"module"
 ({Lisp-File-Entry {File core "src" "core" "module" "syntax" "module.scm"} 1258811564
    {Lisp-Entry "core.module.syntax.module" unit #f 37 16 37 41 ()
      {Lisp-Entry "module" define-macro ("syntax") 40 20 40 26 ("jazz.source-code" "%%cdr" "jazz.expand-module-source" "form-src" "lambda")}}})
"object"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "object.scm"} 1258811564
    {Lisp-Entry "core.class.syntax.object" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.instances-statistics?" define #f 41 8 41 34 ()}
      {Lisp-Entry "jazz.instances-statistics" define #f 45 8 45 33 ("eq?" "test:" "%%make-table" "jazz.instances-statistics?" "if")}
      {Lisp-Entry "jazz.register-instance" define #f 51 9 51 31 ("%%cons" "list" "0" "%%table-ref" "%%fx+" "jazz.instances-statistics" "%%table-set!" "count" "case" "1" "##vector-ref" "name" "if" "jazz.keep-instances-statistics" "keep" "let" "obj" "class")}
      {Lisp-Entry "%%register-instance" define-macro ("macro") 65 20 65 39 (",obj" ",class" "jazz.register-instance" "jazz.instances-statistics?" "if" "obj" "class")}
      {Lisp-Entry "%%object-content" define #f 73 12 73 28 ("0")}
      {Lisp-Entry "%%object-marker" define #f 77 11 77 26 ("jazz.object" "'jazz.object")}
      {Lisp-Entry "%%object-content" define #f 80 11 80 27 ("1")}
      {Lisp-Entry "jazz.object-class" define #f 84 8 84 25 ("%%object-content")}
      {Lisp-Entry "jazz.object-size" define #f 88 8 88 24 ("1" "jazz.object-class" "%%fx+")}
      {Lisp-Entry "%%subtype-jazz" define-macro ("macro") 94 24 94 38 ("7")}
      {Lisp-Entry "%%object?" define-macro ("macro") 97 24 97 33 (",expr" "##jazz?" "expr")}
      {Lisp-Entry "%%object" define-macro ("macro") 100 24 100 32 ("%%register-instance" "%%subtype-jazz" ",@rest" ",cls" "##vector" "##subtype-set!" ",obj" "jazz.generate-symbol" "obj" "let" "jazz.instances-statistics?" "if" "cls" "lambda" "jazz.with-uniqueness" "rest" "class")}
      {Lisp-Entry "%%make-object" define-macro ("macro") 110 24 110 37 ("%%register-instance" ",cls" "%%set-object-class" "%%subtype-jazz" ",size" "%%make-vector" "##subtype-set!" ",obj" "jazz.generate-symbol" "obj" "let" "cls" "lambda" "jazz.with-uniqueness" "size" "class")}
      {Lisp-Entry "%%object-length" define-macro ("macro") 119 24 119 39 (",object" "##vector-length" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "obj" "lambda" "jazz.with-uniqueness" "jazz.debug-core?" "if" "object")}
      {Lisp-Entry "%%object-ref" define-macro ("macro") 127 24 127 36 (",object" ",n" "##vector-ref" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "rnk" "obj" "lambda" "jazz.with-uniqueness" "jazz.debug-core?" "if" "n" "object")}
      {Lisp-Entry "%%object-set!" define-macro ("syntax") 140 24 140 37 (",object" ",value" ",n" "##vector-set!" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "rnk" "obj" "jazz.with-uniqueness" "jazz.debug-core?" "if" "value" "%%cddr" "%%car" "n" "%%source-code" "%%cadr" "object" "let" "src" "lambda")}
      {Lisp-Entry "%%object?" define-macro ("macro") 158 23 158 32 ("%%object-marker" "%%object-ref" "%%eq?" "0" "%%object-length" "%%fx>" ",expr" "%%vector?" "and" "expr")}
      {Lisp-Entry "%%object" define-macro ("macro") 163 23 163 31 (",@rest" "%%object-marker" "%%vector" "rest")}
      {Lisp-Entry "%%make-object" define-macro ("macro") 166 23 166 36 ("%%object-marker" "0" "%%object-set!" ",size" "%%make-vector" ",object" "jazz.generate-symbol" "object" "let" "size")}
      {Lisp-Entry "%%object-length" define-macro ("macro") 172 23 172 38 (",vector" "%%vector-length" "vector")}
      {Lisp-Entry "%%object-ref" define-macro ("macro") 175 23 175 35 (",n" ",vector" "%%vector-ref" "n" "vector")}
      {Lisp-Entry "%%object-set!" define-macro ("macro") 178 23 178 36 (",value" ",n" ",vector" "%%vector-set!" "value" "n" "vector")}}})
"output"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "output.scm"} 1258811564
    {Lisp-Entry "core.class.runtime.output" unit #f 37 16 37 41 ("jazz.print-jazz" "display" "'display" "eq?" "if" "detail" "let" "style" "port" "object" "jazz.print-hook" "jazz.dialect.language.object.Object.print" ":reader" "':reader" "jazz.write" ":human" "':human" "jazz.output-value" "output" "value" "lambda" "jazz.display" "set!")
      {Lisp-Entry "jazz.output-mode" define #f 40 8 40 24 (":reader" "':reader")}
      {Lisp-Entry "jazz.print" define #f 54 9 54 19 ("jazz.error" "else" "write" ":describe" ":text" ":reader" "display" ":human" "case" "detail" "output" "value")}
      {Lisp-Entry "jazz.->string" define #f 61 9 61 22 ("get-output-string" "jazz.output-mode" "jazz.output-value" "open-output-string" "output" "let" "else" "%%values?" "%%unspecified?" "cond" "value")}
      {Lisp-Entry "jazz.output-value" define #f 72 9 72 26 ("jazz.print-jazz" "else" "jazz.print" "jazz.primitive?" "jazz.output-list" "%%pair?" "%%null?" "or" "cond" "detail" "output" "value")}
      {Lisp-Entry "jazz.output-list" define #f 81 9 81 25 ("begin" "display" "%%pair?" "%%cdr" "set!" "%%car" "jazz.output-value" "and" "%%while" "done?" "scan" "let" "%%null?" "%%not" "if" "output-list-content" "define" "detail" "output" "lst")}
      {Lisp-Entry "jazz.debug" define #f 102 9 102 19 ("force-output" "newline" "%%cdr" "expr" "lambda" "for-each" "%%car" "jazz.->string" "display" "%%not-null?" "%%when" "console-port" "port" "let" "rest")}
      {Lisp-Entry "jazz.debug-string" define #f 114 9 114 26 ("force-output" "newline" "display" "console-port" "port" "let" "str")}
      {Lisp-Entry "jazz.terminal" define #f 121 8 121 21 ("jazz.debug")}
      {Lisp-Entry "jazz.terminal-string" define #f 125 8 125 28 ("jazz.debug-string")}
      {Lisp-Entry "jazz.terminal-port" define #f 129 9 129 27 ("console-port")}
      {Lisp-Entry "jazz.bootstrap-output-value" define #f 133 9 133 36 ("jazz.->string" "display" "output" "value")}
      {Lisp-Entry "jazz.pretty-print" define #f 139 13 139 30 ("pretty-print" "apply" "rest" "expr")}
      {Lisp-Entry "jazz.pretty-print" define #f 143 13 143 30 ("pretty-print" "apply" "rest" "expr")}
      {Lisp-Entry "jazz.pretty-print" define #f 147 12 147 29 ("newline" "display" "rest" "expr")}
      {Lisp-Entry "jazz.dialect.language.object.Object.print" define #f 157 8 157 49 ()}
      {Lisp-Entry "jazz.print-jazz" define #f 163 9 163 24 ("jazz.print-serial" "jazz.print-object" "2" "0" "%%class-dispatch" "jazz.dialect.language.object.Object.print" "jazz.use-print?" "if" "detail" "output" "object")}}})
"output-hook"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "output-hook.scm"} 1258811564
    {Lisp-Entry "core.class.runtime.output-hook" unit #f 37 16 37 46 ("##default-wr" "else" "jazz.writeenv-style" "jazz.writeenv-port" "##jazz?" "and" "cond" "obj" "we" "lambda" "##wr" "jazz.print-hook" "set!")
      {Lisp-Entry "jazz.print-hook" define #f 42 12 42 27 ()}}})
"reader"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "reader.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.reader" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.read-source-all" define #f 40 9 40 29 ("%%vector-ref" "%%source-code" "%%cdr" "jazz.readtable-start-syntax" "##unwrap-datum" "##wrap-datum" "%%current-readtable" "%%read-all-as-a-begin-expr-from-port" "begin-vector" "let" "%%input-port-column-set!" "1" "%%fx+" "%%input-port-line-set!" "lambda" "%%input-port-names-set!" "if" "col" "line" "container" "#!optional" "port")}
      {Lisp-Entry "jazz.read-source-first" define #f 59 9 59 31 ("jazz.read-source-all" "%%car" "col" "line" "container" "#!optional" "port")}}})
"register"
 ({Lisp-File-Entry {File core "src" "core" "module" "syntax" "walker" "register.scm"} 1258811564
    {Lisp-Entry "core.module.syntax.walker.register" unit #f 37 16 37 50 ()
      {Lisp-Entry "core" define ("dialect") 45 21 45 25 ("jazz.new-core-dialect")}
      {Lisp-Entry "require" define ("special") 49 28 49 35 ("jazz.walk-require" "core")}
      {Lisp-Entry "export" define ("special") 50 28 50 34 ("jazz.walk-export" "core")}
      {Lisp-Entry "import" define ("special") 51 28 51 34 ("jazz.walk-import" "core")}
      {Lisp-Entry "proclaim" define ("special") 52 28 52 36 ("jazz.walk-proclaim" "core")}
      {Lisp-Entry "native" define ("special") 53 28 53 34 ("jazz.walk-native" "core")}
      {Lisp-Entry "native-syntax" define ("special") 54 28 54 41 ("jazz.walk-native-syntax" "core")}
      {Lisp-Entry "macro" define ("special") 55 28 55 33 ("jazz.walk-macro" "core")}
      {Lisp-Entry "syntax" define ("special") 56 28 56 34 ("jazz.walk-syntax" "core")}
      {Lisp-Entry "define-syntax" define ("special") 57 28 57 41 ("jazz.walk-define-syntax" "core")}
      {Lisp-Entry "let-syntax" define ("special") 58 28 58 38 ("jazz.walk-let-syntax" "core")}
      {Lisp-Entry "letrec-syntax" define ("special") 59 28 59 41 ("jazz.walk-letrec-syntax" "core")}}})
"runtime"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "runtime.scm"} 1265989215
    {Lisp-Entry "core.class.runtime.runtime" unit #f 37 16 37 42 ("jazz.Queue" "jazz.Method-Node" "jazz.Method" "jazz.Property" "jazz.Slot" "jazz.Field" "jazz.Interface" "4" "3" "2" "1" "0" "jazz.specialtypes" "jazz.subtype-boxvalues" "jazz.subtype-f64vector" "jazz.subtype-f32vector" "jazz.subtype-u64vector" "jazz.subtype-s64vector" "jazz.subtype-u32vector" "jazz.subtype-s32vector" "jazz.subtype-u16vector" "jazz.subtype-s16vector" "jazz.subtype-u8vector" "jazz.subtype-s8vector" "jazz.subtype-foreign" "jazz.subtype-bignum" "jazz.subtype-flonum" "jazz.subtype-string" "jazz.subtype-procedure" "jazz.subtype-continuation" "jazz.subtype-keyword" "jazz.subtype-symbol" "jazz.subtype-cpxnum" "jazz.subtype-ratnum" "jazz.subtype-pair" "jazz.subtype-vector" "jazz.subtypes" "%%vector-set!" "jazz.Unspecified" "jazz.Unspecified-Class" "jazz.EOF" "jazz.EOF-Class" "jazz.Values" "jazz.Values-Class" "jazz.Foreign" "jazz.Foreign-Class" "jazz.Promise" "jazz.Promise-Class" "thread?" "jazz.Thread" "jazz.Thread-Class" "table?" "jazz.Table" "jazz.Table-Class" "jazz.Keyword" "jazz.Keyword-Class" "jazz.Symbol" "jazz.Symbol-Class" "jazz.Procedure" "jazz.Procedure-Class" "jazz.Continuation" "jazz.Continuation-Class" "port?" "jazz.register-structure-type" "jazz.Port" "jazz.Port-Class" "jazz.Structure" "jazz.Structure-Class" "jazz.F64Vector" "jazz.F64Vector-Class" "jazz.F32Vector" "jazz.F32Vector-Class" "jazz.U64Vector" "jazz.U64Vector-Class" "jazz.S64Vector" "jazz.S64Vector-Class" "jazz.U32Vector" "jazz.U32Vector-Class" "jazz.S32Vector" "jazz.S32Vector-Class" "jazz.U16Vector" "jazz.U16Vector-Class" "jazz.S16Vector" "jazz.S16Vector-Class" "jazz.U8Vector" "jazz.U8Vector-Class" "jazz.S8Vector" "jazz.S8Vector-Class" "jazz.Vector" "jazz.Vector-Class" "jazz.String" "jazz.String-Class" "jazz.Pair" "jazz.Pair-Class" "jazz.Null" "jazz.Null-Class" "jazz.List" "jazz.List-Class" "jazz.Sequence" "jazz.Sequence-Class" "jazz.Flonum" "jazz.Flonum-Class" "jazz.Fixnum" "jazz.Fixnum-Class" "jazz.Integer" "jazz.Integer-Class" "jazz.Rational" "jazz.Rational-Class" "jazz.Real" "jazz.Real-Class" "jazz.Complex" "jazz.Complex-Class" "jazz.Number" "jazz.Number-Class" "jazz.Numeric" "jazz.Numeric-Class" "jazz.Char" "jazz.Char-Class" "jazz.Boolean" "jazz.Boolean-Class" "%%set-object-class" "jazz.Object-Class" "jazz.Class" "jazz.Category" "jazz.Type" "jazz.Object" "jazz.encapsulate-class" "%%get-object-class" "%%subclass?" "class" "object" "lambda" "jazz.object-of-class?" "set!")
      {Lisp-Entry "jazz.new-interface-rank" define #f 40 8 40 31 ("0")}
      {Lisp-Entry "jazz.dispatch?" define #f 49 9 49 23 ("%%fx-" "%%string-ref" "%%eqv?" "1" "%%fx>" "%%string-length" "len" "%%symbol->string" "name" "let" "%%symbol?" "and" "symbol")}
      {Lisp-Entry "jazz.dispatch->symbol" define #f 58 9 58 30 ("1" "%%string-length" "%%fx-" "0" "%%substring" "%%string->symbol" "%%symbol->string" "name" "let" "dispatch")}
      {Lisp-Entry "jazz.composite-name?" define #f 63 9 63 29 ("%%symbol->string" "jazz.memstring" "%%symbol?" "and" "symbol")}
      {Lisp-Entry "jazz.compose-name" define #f 68 9 68 26 ("symbol->string" "map" "jazz.join-strings" "%%string->symbol" "rest")}
      {Lisp-Entry "jazz.compose-helper" define #f 72 9 72 28 ("%%symbol->string" "%%string-append" "%%string->symbol" "suffix" "locator")}
      {Lisp-Entry "jazz.split-identifier" define #f 76 9 76 30 ("%%symbol->string" "jazz.split-string" "string->symbol" "map" "%%symbol?" "%%debug-assert" "identifier")}
      {Lisp-Entry "jazz.inspect-object" define #f 86 9 86 28 ("1" "%%fx+" "%%object-ref" "%%vector-set!" "begin" "%%fx<" "if" "0" "n" "iter" "let" "%%make-vector" "content" "%%object-length" "size" "let*" "%%object?" "%%assert" "object")}
      {Lisp-Entry "jazz.Core-Classes" define #f 103 8 103 25 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-core-classes" define #f 107 9 107 30 ("jazz.Core-Classes")}
      {Lisp-Entry "jazz.core-class?" define #f 111 9 111 25 ("jazz.Core-Classes" "%%table-ref" "%%boolean" "name")}
      {Lisp-Entry "jazz.get-core-class" define #f 115 9 115 28 ("jazz.Core-Classes" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-core-class" define #f 119 9 119 28 ("jazz.Core-Classes" "%%table-set!" "class" "name")}
      {Lisp-Entry "jazz.set-core-class-redefined" define #f 123 9 123 38 ("jazz.Core-Classes" "%%table-set!" "class" "name")}
      {Lisp-Entry "jazz.object?" define #f 132 9 132 21 ("%%object?" "expr")}
      {Lisp-Entry "jazz.primitive?" define #f 136 9 136 24 ("%%object?" "%%not" "expr")}
      {Lisp-Entry "jazz.subtype?" define #f 140 9 140 22 ("%%subtype?" "%%boolean" "jazz.type?" "%%assert" "type" "target")}
      {Lisp-Entry "jazz.subcategory?" define #f 145 9 145 26 ("%%subcategory?" "%%boolean" "category" "target")}
      {Lisp-Entry "jazz.subclass?" define #f 149 9 149 23 ("%%subclass?" "%%boolean" "class" "target")}
      {Lisp-Entry "jazz.get-category-descendants" define #f 153 9 153 38 ("%%get-category-descendants" "category")}
      {Lisp-Entry "jazz.get-class-ascendant" define #f 157 9 157 33 ("%%get-class-ascendant" "class")}
      {Lisp-Entry "jazz.collect-type" define #f 166 9 166 26 ("%%is?" "obj" "lambda" "jazz.collect-if" "lst" "type")}
      {Lisp-Entry "jazz.create-class-tables" define #f 172 9 172 33 ("jazz.create-class-class-table" "jazz.create-class-interface-table" "class")}
      {Lisp-Entry "jazz.create-core-class-tables" define #f 177 9 177 38 ("jazz.create-class-class-table" "class")}
      {Lisp-Entry "jazz.create-class-interface-table" define #f 181 9 181 42 ("%%set-class-interface-table" "%%get-category-ancestors" "%%class-of" "jazz.call-into-abstract" "rest" "object" "%%get-method-implementation-rank" "jazz.Method" "%%is?" "field" "field-name" "%%get-category-fields" "%%iterate-table" "category-name" "%%get-category-name" "class-name" "jazz.call-into-incoherent" "category-vtable" "%%get-category-virtual-size" "%%get-interface-rank" "rank" "let*" "jazz.Interface" "%%class-is?" "category" "lambda" "jazz.vector-for-each" "1" "%%fx+" "%%vector-copy" "%%vector-set!" "%%vector-ref" "ascendant-vtable" "%%fx<" "0" "i" "iter" "%%vector-length" "size" "ascendant-interface-table" "%%get-class-ascendant" "ascendant" "jazz.new-interface-rank" "%%make-vector" "vtable" "let" "%%get-class-interface-table" "%%not" "%%when" "class")}
      {Lisp-Entry "jazz.create-class-class-table" define #f 214 9 214 38 ("%%vector-ref" "%%vector-copy" "%%vector-set!" "%%fx<" "0" "i" "iter" "#" "'#" "1" "%%fx+" "%%make-vector" "vtable" "%%vector-length" "size" "ascendant-class-table" "let*" "if" "%%set-class-class-table" "%%get-class-ascendant" "ascendant" "let" "%%get-class-class-table" "%%not" "%%when" "class")}
      {Lisp-Entry "jazz.encapsulate-class" define #f 230 9 230 31 ("jazz.update-core-class" "%%set-class-core-vtable" "%%get-class-core-method-alist" "%%get-class-core-virtual-alist" "jazz.get-method-rank" "%%cdr" "method-implementation" "%%car" "method-name" "method" "lambda" "for-each" "%%vector-ref" "%%vector-set!" "%%fx>=" "1" "%%vector-length" "%%fx-" "n" "iter" "%%get-class-core-vtable" "ascendant-vtable" "%%get-class-ascendant" "ascendant" "%%make-vector" "vtable" "0" "%%fx>" "%%when" "%%length" "vtable-size" "%%get-class-core-virtual-names" "virtual-names" "let" "class")}
      {Lisp-Entry "jazz.update-class" define #f 257 9 257 26 ("jazz.update-class-class-table" "class")}
      {Lisp-Entry "jazz.update-core-class" define #f 261 9 261 31 ("jazz.update-class-class-table" "class")}
      {Lisp-Entry "jazz.update-class-class-table" define #f 265 9 265 38 ("implementation" "jazz.resize-vector" "%%get-category-virtual-size" "class-virtual-size" "%%not-null?" "%%cons" "set!" "%%set-method-category-rank" "begin" "%%get-category-descendants" "descendant" "for-each" "%%vector-set!" "%%eq?" "implementation-table" "iter" "%%neq?" "%%get-method-implementation-tree" "%%get-method-node-implementation" "new-implementation" "old-implementation" "%%get-method-implementation-rank" "implementation-rank" "let" "%%get-method-category-rank" "if" "jazz.virtual-method?" "%%when" "field" "key" "lambda" "%%get-category-fields" "%%iterate-table" "added-methods" "%%vector-ref" "root-implementation-table" "%%get-class-level" "class-rank" "%%get-class-class-table" "class-table" "let*" "update-class-class-root-methods" "define" "class")}
      {Lisp-Entry "jazz.new-core-class" define #f 316 9 316 28 ("jazz.create-core-class-tables" "%%get-category-descendants" "%%cons" "%%set-category-descendants" "%%when" "%%list->vector" "%%set-category-ancestors" "%%get-class-core-virtual-names" "1" "%%get-class-level" "%%fx+" "0" "%%object" "core-class" "let" "%%get-category-ancestors" "%%vector->list" "%%append" "%%list" "%%not" "if" "compute-core-class-ancestors" "define" "instance-size" "slot-names" "ascendant" "fields" "name" "class")}
      {Lisp-Entry "jazz.validate-inherited-slots" define #f 352 9 352 38 ("jazz.error" "%%equal?" "%%null?" "and" "or" "%%get-field-name" "slot" "lambda" "map" "symbol?" "jazz.some?" "all-slots" "core-class-all-slot-names" "%%append" "%%not" "if" "%%get-class-ascendant" "%%get-class-instance-slots" "slots" "let" "core-class" "core-class-all-slots" "define" "inherited-slot-names" "ascendant" "name")}
      {Lisp-Entry "jazz.Object" define-class ("class runtime") 379 27 379 38 ()}
      {Lisp-Entry "jazz.get-object-slot" define #f 382 9 382 29 ("jazz.unspecified" "%%object-ref" "%%integer?" "if" "%%object?" "%%debug-assert" "slot-offset" "object")}
      {Lisp-Entry "jazz.set-object-slot" define #f 389 9 389 29 ("%%object-set!" "%%integer?" "%%object?" "%%debug-assert" "value" "slot-offset" "object")}
      {Lisp-Entry "jazz.classname->string" define #f 395 9 395 31 ("%%get-category-name" "%%symbol->string" "%%null?" "if" "class")}
      {Lisp-Entry "jazz.print-object" generic/specific ("jazz.Object~virtual-runtime") 401 30 401 47 ("detail" "output")}
      {Lisp-Entry "jazz.print-object" generic/specific ("jazz.Object") 404 21 404 38 ("object" "jazz.print-serial" "detail" "output")}
      {Lisp-Entry "jazz.print-serial" define #f 408 9 408 26 ("display" "object->serial-number" "serial" "let" "output" "object")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Object~virtual-runtime") 415 30 415 44 ("environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.tree-fold" generic/specific ("jazz.Object") 418 21 418 35 ("expression" "environment" "seed" "here" "up" "down")}
      {Lisp-Entry "jazz.Type" define-class ("class runtime") 430 27 430 36 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Type~virtual-runtime") 433 30 433 43 ("object")}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Type") 436 21 436 34 ("%%class-of" "type" "jazz.of-subtype?" "object")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Type~virtual-runtime") 440 30 440 46 ("subtype")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Type") 443 21 443 37 ("type" "jazz.error" "subtype")}
      {Lisp-Entry "jazz.category-type?" generic/specific ("jazz.Type~virtual-runtime") 447 30 447 49 ()}
      {Lisp-Entry "jazz.category-type?" generic/specific ("jazz.Type") 450 21 450 40 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Type~virtual-runtime") 454 30 454 49 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Type") 457 21 457 40 ("type" "jazz.error")}
      {Lisp-Entry "jazz.emit-type" generic/specific ("jazz.Type~virtual-runtime") 461 30 461 44 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-type" generic/specific ("jazz.Type") 464 21 464 35 ("type" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Type~virtual-runtime") 468 30 468 44 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Type") 471 21 471 35 (",locator" ",value" "%%is?" "type" "jazz.emit-type" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Type~virtual-runtime") 476 30 476 45 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Type") 479 21 479 36 (",locator" ",value" "jazz.type-error" "jazz.emit-test" "%%not" "if" "type" "jazz.emit-type" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.bootstrap-type?" define #f 486 9 486 29 ("type-class" "object")}
      {Lisp-Entry "jazz.type?" define #f 491 9 491 19 ("jazz.Type" "%%is?" "%%object?" "and" "object")}
      {Lisp-Entry "jazz.structure-types" define #f 504 8 504 28 ()}
      {Lisp-Entry "jazz.register-structure-type" define #f 508 9 508 37 ("%%cons" "jazz.structure-types" "set!" "type" "test")}
      {Lisp-Entry "jazz.structure-type" define #f 512 9 512 28 ("%%cdr" "%%cdar" "%%caar" "jazz.Structure" "%%null?" "if" "jazz.structure-types" "scan" "iter" "let" "object")}
      {Lisp-Entry "jazz.Category" define-class ("class runtime") 526 27 526 40 ()}
      {Lisp-Entry "jazz.category?" define #f 529 9 529 23 ("jazz.category-type?" "jazz.type?" "and" "object")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Category") 534 21 534 37 ("%%get-category-ancestors" "type" "jazz.vector-memq?" "jazz.category-type?" "and" "subtype")}
      {Lisp-Entry "jazz.category-type?" generic/specific ("jazz.Category") 539 21 539 40 ()}
      {Lisp-Entry "jazz.emit-type" generic/specific ("jazz.Category") 543 21 543 35 ("type" "%%get-category-name" "environment" "source-declaration")}
      {Lisp-Entry "jazz.update-category" generic/specific ("jazz.Category~virtual-runtime") 547 30 547 50 ()}
      {Lisp-Entry "jazz.update-category" generic/specific ("jazz.Category") 550 21 550 41 ()}
      {Lisp-Entry "jazz.is?" define #f 554 9 554 17 ("%%is?" "%%boolean" "category" "object")}
      {Lisp-Entry "jazz.is-not?" define #f 558 9 558 21 ("%%is?" "%%not" "%%boolean" "category" "object")}
      {Lisp-Entry "jazz.get-category-name" define #f 562 9 562 31 ("%%get-category-name" "jazz.category?" "%%debug-assert" "category")}
      {Lisp-Entry "jazz.add-field" define #f 567 9 567 23 ("%%get-field-name" "%%set-category-field" "field" "category")}
      {Lisp-Entry "jazz.Class" define-class ("class runtime") 579 27 579 37 ()}
      {Lisp-Entry "jazz.new-class" define #f 582 9 582 23 ("%%class-dispatch" "jazz.initialize-slots" "jazz.create-class-tables" "%%get-category-descendants" "%%set-category-descendants" "%%list->vector" "%%set-category-ancestors" "%%get-class-core-vtable" "1" "%%get-class-level" "%%fx+" "jazz.object-size" "%%get-class-instance-size" "%%get-class-instance-slots" "if" "0" "eq?" "test:" "%%make-table" "jazz.allocate-class" "add-classes" "%%get-interface-ascendants" "%%cons" "set!" "%%memq" "%%not" "else" "%%get-class-interfaces" "for-each" "%%when" "%%get-class-ascendant" "%%class?" "cond" "category" "add-interfaces" "ancestors" "let" "class" "compute-class-ancestors" "define" "interfaces" "ascendant" "name" "class-of-class")}
      {Lisp-Entry "jazz.class?" define #f 624 9 624 20 ("jazz.Class" "%%class-is?" "object")}
      {Lisp-Entry "jazz.i-class-of" define #f 628 9 628 24 ("%%i-class-of-impl" "expr")}
      {Lisp-Entry "jazz.class-of" define #f 632 9 632 22 ("%%class-of-impl" "expr")}
      {Lisp-Entry "jazz.class-of-native" define #f 639 9 639 29 ("jazz.error" "jazz.structure-type" "or" "else" "jazz.Unspecified" "%%unspecified?" "jazz.EOF" "%%eof-object?" "jazz.Values" "%%values?" "jazz.Foreign" "%%foreign?" "jazz.Procedure" "%%procedure?" "jazz.Continuation" "%%continuation?" "jazz.Port" "%%port?" "jazz.Keyword" "%%keyword?" "jazz.Symbol" "%%symbol?" "jazz.F64Vector" "%%f64vector?" "jazz.F32Vector" "%%f32vector?" "jazz.U64Vector" "%%u64vector?" "jazz.S64Vector" "%%s64vector?" "jazz.U32Vector" "%%u32vector?" "jazz.S32Vector" "%%s32vector?" "jazz.U16Vector" "%%u16vector?" "jazz.S16Vector" "%%s16vector?" "jazz.U8Vector" "%%u8vector?" "jazz.S8Vector" "%%s8vector?" "jazz.Vector" "%%vector?" "jazz.String" "%%string?" "jazz.Pair" "%%pair?" "jazz.Null" "%%null?" "jazz.Number" "%%number?" "jazz.Complex" "%%complex?" "jazz.Real" "%%real?" "jazz.Rational" "%%rational?" "jazz.Integer" "%%integer?" "jazz.Flonum" "%%flonum?" "jazz.Fixnum" "%%fixnum?" "jazz.Char" "%%char?" "jazz.Boolean" "%%boolean?" "cond" "expr")}
      {Lisp-Entry "jazz.class-subtype?" define #f 677 9 677 28 ("%%class-subtype?" "class" "target")}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Class") 681 21 681 34 ("class" "%%class-of" "%%class-subtype?" "object")}
      {Lisp-Entry "jazz.update-category" generic/specific ("jazz.Class") 685 21 685 41 ("class" "jazz.update-class")}
      {Lisp-Entry "jazz.slot-form?" define #f 689 9 689 24 ("slot" "'slot" "%%car" "%%eq?" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.new" define #f 694 9 694 17 ("0" "%%class-dispatch" "apply" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "rest" "class")}
      {Lisp-Entry "jazz.new0" define #f 702 9 702 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "class")}
      {Lisp-Entry "jazz.new1" define #f 710 9 710 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "arg1" "class")}
      {Lisp-Entry "jazz.new2" define #f 718 9 718 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "arg2" "arg1" "class")}
      {Lisp-Entry "jazz.iterate-descendants-tree" define #f 726 9 726 38 ("%%get-category-descendants" "for-each" "iter" "let" "proc" "class")}
      {Lisp-Entry "jazz.Object-Class" define-class ("class runtime") 740 27 740 44 ()}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Object-Class") 743 21 743 37 ("nextmethod" "class" "%%object-class?" "if" "subtype")}
      {Lisp-Entry "jazz.Boolean-Class" define-class ("class runtime") 769 27 769 45 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Boolean-Class") 772 21 772 34 ("%%boolean?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Boolean-Class") 776 21 776 40 ("bool" "'bool")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Boolean-Class") 780 21 780 35 (",value" "%%boolean?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Boolean" define-class ("class runtime") 787 27 787 39 ()}
      {Lisp-Entry "jazz.Char-Class" define-class ("class runtime") 798 27 798 42 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Char-Class") 801 21 801 34 ("%%char?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Char-Class") 805 21 805 40 ("char" "'char")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Char-Class") 809 21 809 35 (",value" "%%char?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Char" define-class ("class runtime") 816 27 816 36 ()}
      {Lisp-Entry "jazz.Numeric-Class" define-class ("class runtime") 827 27 827 45 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Numeric-Class") 830 21 830 40 ("numeric" "'numeric")}
      {Lisp-Entry "jazz.Numeric" define-class ("class runtime") 837 27 837 39 ()}
      {Lisp-Entry "jazz.Number-Class" define-class ("class runtime") 848 27 848 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Number-Class") 851 21 851 34 ("%%number?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Number-Class") 855 21 855 40 ("number" "'number")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Number-Class") 859 21 859 35 (",value" "%%number?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Number" define-class ("class runtime") 866 27 866 38 ()}
      {Lisp-Entry "jazz.Complex-Class" define-class ("class runtime") 877 27 877 45 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Complex-Class") 880 21 880 34 ("%%complex?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Complex-Class") 884 21 884 40 ("complex" "'complex")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Complex-Class") 888 21 888 35 (",value" "%%complex?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Complex" define-class ("class runtime") 895 27 895 39 ()}
      {Lisp-Entry "jazz.Real-Class" define-class ("class runtime") 906 27 906 42 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Real-Class") 909 21 909 34 ("%%real?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Real-Class") 913 21 913 40 ("real" "'real")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Real-Class") 917 21 917 35 (",value" "%%real?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Real" define-class ("class runtime") 924 27 924 36 ()}
      {Lisp-Entry "jazz.Rational-Class" define-class ("class runtime") 935 27 935 46 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Rational-Class") 938 21 938 34 ("%%rational?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Rational-Class") 942 21 942 40 ("rational" "'rational")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Rational-Class") 946 21 946 35 (",value" "%%rational?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Rational" define-class ("class runtime") 953 27 953 40 ()}
      {Lisp-Entry "jazz.Integer-Class" define-class ("class runtime") 964 27 964 45 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Integer-Class") 967 21 967 34 ("%%integer?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Integer-Class") 971 21 971 40 ("int" "'int")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Integer-Class") 975 21 975 35 (",value" "%%integer?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Integer" define-class ("class runtime") 982 27 982 39 ()}
      {Lisp-Entry "jazz.Fixnum-Class" define-class ("class runtime") 993 27 993 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Fixnum-Class") 996 21 996 34 ("%%fixnum?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Fixnum-Class") 1000 21 1000 40 ("fx" "'fx")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Fixnum-Class") 1004 21 1004 35 (",value" "%%fixnum?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Fixnum" define-class ("class runtime") 1011 27 1011 38 ()}
      {Lisp-Entry "jazz.Flonum-Class" define-class ("class runtime") 1022 27 1022 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Flonum-Class") 1025 21 1025 34 ("%%flonum?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Flonum-Class") 1029 21 1029 40 ("fl" "'fl")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Flonum-Class") 1033 21 1033 35 (",value" "%%flonum?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Flonum" define-class ("class runtime") 1040 27 1040 38 ()}
      {Lisp-Entry "jazz.Sequence-Class" define-class ("class runtime") 1051 27 1051 46 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Sequence-Class") 1054 21 1054 40 ("sequence" "'sequence")}
      {Lisp-Entry "jazz.Sequence" define-class ("class runtime") 1061 27 1061 40 ()}
      {Lisp-Entry "jazz.List-Class" define-class ("class runtime") 1072 27 1072 42 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.List-Class") 1075 21 1075 40 ("list" "'list")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.List-Class") 1079 21 1079 35 ("%%pair?" ",value" "%%null?" "or" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.List" define-class ("class runtime") 1086 27 1086 36 ()}
      {Lisp-Entry "jazz.Null-Class" define-class ("class runtime") 1097 27 1097 42 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Null-Class") 1100 21 1100 34 ("%%null?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Null-Class") 1104 21 1104 40 ("null" "'null")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Null-Class") 1108 21 1108 35 (",value" "%%null?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Null" define-class ("class runtime") 1115 27 1115 36 ()}
      {Lisp-Entry "jazz.Pair-Class" define-class ("class runtime") 1126 27 1126 42 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Pair-Class") 1129 21 1129 34 ("%%pair?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Pair-Class") 1133 21 1133 40 ("pair" "'pair")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Pair-Class") 1137 21 1137 35 (",value" "%%pair?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Pair" define-class ("class runtime") 1144 27 1144 36 ()}
      {Lisp-Entry "jazz.String-Class" define-class ("class runtime") 1155 27 1155 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.String-Class") 1158 21 1158 34 ("%%string?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.String-Class") 1162 21 1162 40 ("string" "'string")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.String-Class") 1166 21 1166 35 (",value" "%%string?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.String" define-class ("class runtime") 1173 27 1173 38 ()}
      {Lisp-Entry "jazz.Vector-Class" define-class ("class runtime") 1184 27 1184 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Vector-Class") 1187 21 1187 34 ("%%vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Vector-Class") 1191 21 1191 40 ("vector" "'vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Vector-Class") 1195 21 1195 35 (",value" "%%vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Vector" define-class ("class runtime") 1202 27 1202 38 ()}
      {Lisp-Entry "jazz.S8Vector-Class" define-class ("class runtime") 1213 27 1213 46 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.S8Vector-Class") 1216 21 1216 34 ("%%s8vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.S8Vector-Class") 1220 21 1220 40 ("s8vector" "'s8vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.S8Vector-Class") 1224 21 1224 35 (",value" "%%s8vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S8Vector" define-class ("class runtime") 1231 27 1231 40 ()}
      {Lisp-Entry "jazz.U8Vector-Class" define-class ("class runtime") 1242 27 1242 46 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.U8Vector-Class") 1245 21 1245 34 ("%%u8vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.U8Vector-Class") 1249 21 1249 40 ("u8vector" "'u8vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.U8Vector-Class") 1253 21 1253 35 (",value" "%%u8vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U8Vector" define-class ("class runtime") 1260 27 1260 40 ()}
      {Lisp-Entry "jazz.S16Vector-Class" define-class ("class runtime") 1271 27 1271 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.S16Vector-Class") 1274 21 1274 34 ("%%s16vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.S16Vector-Class") 1278 21 1278 40 ("s16vector" "'s16vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.S16Vector-Class") 1282 21 1282 35 (",value" "%%s16vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S16Vector" define-class ("class runtime") 1289 27 1289 41 ()}
      {Lisp-Entry "jazz.U16Vector-Class" define-class ("class runtime") 1300 27 1300 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.U16Vector-Class") 1303 21 1303 34 ("%%u16vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.U16Vector-Class") 1307 21 1307 40 ("u16vector" "'u16vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.U16Vector-Class") 1311 21 1311 35 (",value" "%%u16vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U16Vector" define-class ("class runtime") 1318 27 1318 41 ()}
      {Lisp-Entry "jazz.S32Vector-Class" define-class ("class runtime") 1329 27 1329 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.S32Vector-Class") 1332 21 1332 34 ("%%s32vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.S32Vector-Class") 1336 21 1336 40 ("s32vector" "'s32vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.S32Vector-Class") 1340 21 1340 35 (",value" "%%s32vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S32Vector" define-class ("class runtime") 1347 27 1347 41 ()}
      {Lisp-Entry "jazz.U32Vector-Class" define-class ("class runtime") 1358 27 1358 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.U32Vector-Class") 1361 21 1361 34 ("%%u32vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.U32Vector-Class") 1365 21 1365 40 ("u32vector" "'u32vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.U32Vector-Class") 1369 21 1369 35 (",value" "%%u32vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U32Vector" define-class ("class runtime") 1376 27 1376 41 ()}
      {Lisp-Entry "jazz.S64Vector-Class" define-class ("class runtime") 1387 27 1387 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.S64Vector-Class") 1390 21 1390 34 ("%%s64vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.S64Vector-Class") 1394 21 1394 40 ("s64vector" "'s64vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.S64Vector-Class") 1398 21 1398 35 (",value" "%%s64vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S64Vector" define-class ("class runtime") 1405 27 1405 41 ()}
      {Lisp-Entry "jazz.U64Vector-Class" define-class ("class runtime") 1416 27 1416 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.U64Vector-Class") 1419 21 1419 34 ("%%u64vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.U64Vector-Class") 1423 21 1423 40 ("u64vector" "'u64vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.U64Vector-Class") 1427 21 1427 35 (",value" "%%u64vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U64Vector" define-class ("class runtime") 1434 27 1434 41 ()}
      {Lisp-Entry "jazz.F32Vector-Class" define-class ("class runtime") 1445 27 1445 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.F32Vector-Class") 1448 21 1448 34 ("%%f32vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.F32Vector-Class") 1452 21 1452 40 ("f32vector" "'f32vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.F32Vector-Class") 1456 21 1456 35 (",value" "%%f32vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.F32Vector" define-class ("class runtime") 1463 27 1463 41 ()}
      {Lisp-Entry "jazz.F64Vector-Class" define-class ("class runtime") 1474 27 1474 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.F64Vector-Class") 1477 21 1477 34 ("%%f64vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.F64Vector-Class") 1481 21 1481 40 ("f64vector" "'f64vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.F64Vector-Class") 1485 21 1485 35 (",value" "%%f64vector?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.F64Vector" define-class ("class runtime") 1492 27 1492 41 ()}
      {Lisp-Entry "jazz.Structure-Class" define-class ("class runtime") 1503 27 1503 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Structure-Class") 1506 21 1506 34 ("%%structure?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Structure-Class") 1510 21 1510 40 ("structure" "'structure")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Structure-Class") 1514 21 1514 35 (",value" "%%structure?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Structure" define-class ("class runtime") 1521 27 1521 41 ()}
      {Lisp-Entry "jazz.Port-Class" define-class ("class runtime") 1532 27 1532 42 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Port-Class") 1535 21 1535 34 ("%%port?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Port-Class") 1539 21 1539 40 ("port" "'port")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Port-Class") 1543 21 1543 35 (",value" "%%port?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Port" define-class ("class runtime") 1550 27 1550 36 ()}
      {Lisp-Entry "jazz.Continuation-Class" define-class ("class runtime") 1564 27 1564 50 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Continuation-Class") 1567 21 1567 34 ("%%continuation?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Continuation-Class") 1571 21 1571 40 ("continuation" "'continuation")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Continuation-Class") 1575 21 1575 35 (",value" "%%continuation?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Continuation" define-class ("class runtime") 1582 27 1582 44 ()}
      {Lisp-Entry "jazz.Procedure-Class" define-class ("class runtime") 1593 27 1593 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Procedure-Class") 1596 21 1596 34 ("%%procedure?" "object")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Procedure-Class") 1600 21 1600 37 ("class" "nextmethod" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Procedure-Class") 1606 21 1606 40 ("procedure" "'procedure")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Procedure-Class") 1610 21 1610 35 (",value" "%%procedure?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Procedure" define-class ("class runtime") 1617 27 1617 41 ()}
      {Lisp-Entry "jazz.Symbol-Class" define-class ("class runtime") 1628 27 1628 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Symbol-Class") 1631 21 1631 34 ("%%symbol?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Symbol-Class") 1635 21 1635 40 ("symbol" "'symbol")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Symbol-Class") 1639 21 1639 35 (",value" "%%symbol?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Symbol" define-class ("class runtime") 1646 27 1646 38 ()}
      {Lisp-Entry "jazz.Keyword-Class" define-class ("class runtime") 1657 27 1657 45 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Keyword-Class") 1660 21 1660 34 ("%%keyword?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Keyword-Class") 1664 21 1664 40 ("keyword" "'keyword")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Keyword-Class") 1668 21 1668 35 (",value" "%%keyword?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Keyword" define-class ("class runtime") 1675 27 1675 39 ()}
      {Lisp-Entry "jazz.Table-Class" define-class ("class runtime") 1686 27 1686 43 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Table-Class") 1689 21 1689 34 ("%%table?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Table-Class") 1693 21 1693 40 ("table" "'table")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Table-Class") 1697 21 1697 35 (",value" "%%table?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Table" define-class ("class runtime") 1704 27 1704 37 ()}
      {Lisp-Entry "jazz.Thread-Class" define-class ("class runtime") 1718 27 1718 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Thread-Class") 1721 21 1721 34 ("%%thread?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Thread-Class") 1725 21 1725 40 ("thread" "'thread")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Thread-Class") 1729 21 1729 35 (",value" "%%thread?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Thread" define-class ("class runtime") 1736 27 1736 38 ()}
      {Lisp-Entry "jazz.Promise-Class" define-class ("class runtime") 1750 27 1750 45 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Promise-Class") 1753 21 1753 40 ("promise" "'promise")}
      {Lisp-Entry "jazz.Promise" define-class ("class runtime") 1760 27 1760 39 ()}
      {Lisp-Entry "jazz.Foreign-Class" define-class ("class runtime") 1771 27 1771 45 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Foreign-Class") 1774 21 1774 34 ("%%foreign?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Foreign-Class") 1778 21 1778 40 ("foreign" "'foreign")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Foreign-Class") 1782 21 1782 35 (",value" "%%foreign?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Foreign" define-class ("class runtime") 1789 27 1789 39 ()}
      {Lisp-Entry "jazz.Values-Class" define-class ("class runtime") 1800 27 1800 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Values-Class") 1803 21 1803 34 ("%%values?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Values-Class") 1807 21 1807 40 ("values" "'values")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Values-Class") 1811 21 1811 35 (",value" "%%values?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Values" define-class ("class runtime") 1818 27 1818 38 ()}
      {Lisp-Entry "jazz.EOF-Class" define-class ("class runtime") 1829 27 1829 41 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.EOF-Class") 1832 21 1832 34 ("%%eof-object?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.EOF-Class") 1836 21 1836 40 ("eof" "'eof")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.EOF-Class") 1840 21 1840 35 (",value" "%%eof-object?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.EOF" define-class ("class runtime") 1847 27 1847 35 ()}
      {Lisp-Entry "jazz.Unspecified-Class" define-class ("class runtime") 1858 27 1858 49 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Unspecified-Class") 1861 21 1861 34 ("%%unspecified?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Unspecified-Class") 1865 21 1865 40 ("unspecified" "'unspecified")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Unspecified-Class") 1869 21 1869 35 (",value" "%%unspecified?" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Unspecified" define-class ("class runtime") 1876 27 1876 43 ()}
      {Lisp-Entry "jazz.subtypes" define #f 1889 12 1889 25 ("32" "%%make-vector")}
      {Lisp-Entry "jazz.specialtypes" define #f 1892 12 1892 29 ("16" "%%make-vector")}
      {Lisp-Entry "jazz.table-type" define #f 1896 12 1896 27 ("make-table" "%%structure-type")}
      {Lisp-Entry "jazz.port-type" define #f 1900 12 1900 26 ("open-output-string" "%%structure-type")}
      {Lisp-Entry "jazz.thread-type" define #f 1904 12 1904 28 ("current-thread" "%%structure-type")}
      {Lisp-Entry "jazz.Interface" define-class ("class runtime") 1945 27 1945 41 ()}
      {Lisp-Entry "jazz.new-interface" define #f 1948 9 1948 27 ("%%get-category-descendants" "%%set-category-descendants" "for-each" "%%list->vector" "%%set-category-ancestors" "1" "%%fx+" "set!" "jazz.new-interface-rank" "0" "eq?" "test:" "%%make-table" "jazz.allocate-interface" "let" "%%list" "%%get-category-ancestors" "%%vector->list" "ascendant" "lambda" "map" "%%cons" "append" "%%apply" "jazz.remove-duplicates" "interface" "compute-interface-ancestors" "define" "ascendants" "name" "class")}
      {Lisp-Entry "jazz.interface?" define #f 1965 9 1965 24 ("jazz.Interface" "%%class-is?" "object")}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Interface") 1980 21 1980 34 ("%%class-of" "interface" "jazz.of-subtype?" "object")}
      {Lisp-Entry "jazz.update-category" generic/specific ("jazz.Interface") 1984 21 1984 41 ("interface" "jazz.update-interface")}
      {Lisp-Entry "jazz.update-interface" define #f 1988 9 1988 30 ("%%get-category-descendants" "descendant" "%%vector-set!" "%%get-method-implementation-tree" "%%get-method-node-implementation" "implementation" "%%get-method-implementation-rank" "implementation-rank" "for-each" "%%get-category-virtual-size" "%%vector-ref" "jazz.resize-vector" "implementation-table" "%%get-class-interface-table" "interface-table" "jazz.Class" "%%class-is?" "category" "iter" "%%not-null?" "let" "%%cons" "set!" "%%set-method-category-rank" "%%get-method-category-rank" "%%not" "jazz.virtual-method?" "and" "%%when" "field" "key" "lambda" "%%get-category-fields" "%%iterate-table" "added-methods" "%%get-interface-rank" "interface-rank" "let*" "update-interface-root-methods" "define" "interface")}
      {Lisp-Entry "jazz.Field" define-class ("class runtime") 2026 27 2026 37 ()}
      {Lisp-Entry "jazz.field?" define #f 2029 9 2029 20 ("jazz.Field" "%%class-is?" "object")}
      {Lisp-Entry "jazz.field-name" define #f 2033 9 2033 24 ("%%get-field-name" "field")}
      {Lisp-Entry "jazz.category-field" define #f 2037 9 2037 28 ("jazz.category-field" "and" "%%get-class-ascendant" "ascendant" "let" "%%get-category-field" "or" "field-name" "category")}
      {Lisp-Entry "jazz.require-object-field" define #f 2044 9 2044 34 ("%%get-category-name" "jazz.error" "%%not" "if" "jazz.category-field" "field" "%%get-object-class" "class" "let*" "name" "object")}
      {Lisp-Entry "jazz.Slot" define-class ("class runtime") 2060 27 2060 36 ()}
      {Lisp-Entry "jazz.new-slot" define #f 2063 9 2063 22 ("jazz.Slot" "jazz.allocate-slot" "slot-initialize" "slot-offset" "slot-name")}
      {Lisp-Entry "jazz.slot?" define #f 2067 9 2067 19 ("jazz.Slot" "%%class-is?" "object")}
      {Lisp-Entry "jazz.add-slot" define #f 2071 9 2071 22 ("1" "%%fx+" "%%set-class-instance-size" "%%when" "%%get-class-instance-slots" "%%set-class-instance-slots" "%%list" "%%get-class-slots" "%%append" "%%set-class-slots" "jazz.add-field" "jazz.new-slot" "slot" "and" "slot-offset" "%%get-class-instance-size" "instance-size" "let*" "%%get-category-field" "or" "slot-allocate?" "slot-initialize" "slot-name" "class")}
      {Lisp-Entry "jazz.remove-own-slots" define #f 2085 9 2085 30 ("%%length" "%%get-class-instance-size" "%%fx-" "%%set-class-instance-size" "if" "%%set-class-instance-slots" "%%set-class-slots" "%%get-class-instance-slots" "actual" "%%get-class-ascendant" "ascendant" "let" "class")}
      {Lisp-Entry "jazz.slot-value" define #f 2093 9 2093 24 ("jazz.find-slot-offset" "jazz.get-object-slot" "slot-name" "object")}
      {Lisp-Entry "jazz.set-slot-value" define #f 2097 9 2097 28 ("jazz.find-slot-offset" "jazz.set-object-slot" "value" "slot-name" "object")}
      {Lisp-Entry "jazz.find-slot-offset" define #f 2101 9 2101 30 ("%%get-slot-offset" "jazz.require-object-field" "slot" "let" "%%object?" "%%debug-assert" "slot-name" "object")}
      {Lisp-Entry "jazz.initialize-slots" define #f 2107 9 2107 30 ("%%object-set!" "%%when" "%%get-slot-initialize" "initialize" "%%get-slot-offset" "offset" "slot" "lambda" "for-each" "%%get-object-class" "%%get-class-instance-slots" "slots" "let" "object")}
      {Lisp-Entry "jazz.Property" define-class ("class runtime") 2125 27 2125 40 ()}
      {Lisp-Entry "jazz.new-property" define #f 2128 9 2128 26 ("jazz.Property" "jazz.allocate-property" "slot-setter" "slot-getter" "slot-initialize" "slot-offset" "slot-name")}
      {Lisp-Entry "jazz.property?" define #f 2132 9 2132 23 ("jazz.Property" "%%class-is?" "object")}
      {Lisp-Entry "jazz.property-getter" define #f 2136 9 2136 29 ("%%get-property-getter" "property")}
      {Lisp-Entry "jazz.property-setter" define #f 2140 9 2140 29 ("%%get-property-setter" "property")}
      {Lisp-Entry "jazz.all-properties" define #f 2144 9 2144 28 ("else" "%%cdr" "%%cons" "%%car" "jazz.property?" "%%null?" "cond" "%%get-class-instance-slots" "slots" "iter" "let" "category")}
      {Lisp-Entry "jazz.add-property" define #f 2151 9 2151 26 ("1" "%%fx+" "%%set-class-instance-size" "%%when" "%%get-class-instance-slots" "%%set-class-instance-slots" "%%list" "%%get-class-slots" "%%append" "%%set-class-slots" "jazz.add-field" "jazz.new-property" "slot" "and" "slot-offset" "%%get-class-instance-size" "instance-size" "let*" "%%get-category-field" "or" "slot-setter" "slot-getter" "slot-allocate?" "slot-initialize" "slot-name" "class")}
      {Lisp-Entry "jazz.Method" define-class ("class runtime") 2173 27 2173 38 ()}
      {Lisp-Entry "jazz.method?" define #f 2176 9 2176 21 ("jazz.Method" "%%class-is?" "object")}
      {Lisp-Entry "jazz.final-method?" define #f 2180 9 2180 27 ("final" "'final" "%%get-method-dispatch-type" "%%eq?" "jazz.Method" "%%class-is?" "and" "field")}
      {Lisp-Entry "jazz.virtual-method?" define #f 2185 9 2185 29 ("final" "'final" "%%get-method-dispatch-type" "%%neq?" "jazz.Method" "%%class-is?" "and" "field")}
      {Lisp-Entry "jazz.locate-method-owner" define #f 2190 9 2190 33 ("%%get-interface-ascendants" "jazz.Interface" "%%get-class-interfaces" "jazz.find-in" "%%get-class-ascendant" "or" "jazz.Class" "%%class-is?" "%%get-category-field" "%%not" "cond" "iter" "let" "method-name" "category")}
      {Lisp-Entry "jazz.new-final-method" define #f 2211 9 2211 30 ("final" "'final" "jazz.Method" "jazz.allocate-method" "implementation" "name")}
      {Lisp-Entry "jazz.add-final-method" define #f 2215 9 2215 30 ("else" "%%eq?" "%%not" "cond" "jazz.locate-method-owner" "owner" "jazz.error" "%%set-method-implementation" "jazz.final-method?" "if" "%%get-category-field" "field" "update-final-method" "jazz.add-field" "jazz.new-final-method" "method" "let" "create-final-method" "define" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.new-virtual-method" define #f 2242 9 2242 32 ("jazz.Method" "jazz.allocate-method" "implementation-rank" "category-rank" "implementation-tree" "dispatch-type" "name")}
      {Lisp-Entry "jazz.add-virtual-method" define #f 2246 9 2246 32 ("else" "%%eq?" "%%not" "cond" "jazz.locate-method-owner" "owner" "%%get-method-implementation-rank" "jazz.error" "%%get-method-node-children" "%%set-method-node-next-implementation" "child" "lambda" "for-each" "%%set-method-node-implementation" "%%get-method-implementation-tree" "jazz.virtual-method?" "%%get-category-field" "field" "let" "update-virtual-method" "jazz.update-category" "jazz.add-field" "1" "%%fx+" "%%set-category-virtual-size" "%%set-method-implementation-rank" "%%get-category-virtual-size" "virtual-size" "jazz.new-virtual-method" "method" "jazz.new-method-node" "node" "interface" "'interface" "class" "'class" "jazz.Class" "%%class-is?" "if" "dispatch-type" "let*" "create-virtual-method" "define" "method-implementation" "method-name" "category")}
      {Lisp-Entry "jazz.add-method-node" define #f 2284 9 2284 29 ("error" "jazz.final-method?" "%%vector-set!" "%%vector-ref" "method-table" "%%get-class-interface-table" "interface" "%%get-class-class-table" "%%get-method-dispatch-type" "case" "dispatch-table" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "category-rank" "receive" "%%get-method-implementation-tree" "jazz.virtual-method?" "%%get-category-field" "field" "else" "jazz.error" "cond" "jazz.locate-method-owner" "owner" "%%get-category-descendants" "descendant" "%%memq" "%%not" "%%when" "map" "end-categories" "end-nodes" "start-node" "proc" "update-method-tree" "%%set-method-node-implementation" "values" "%%cons" "%%set-method-node-children" "%%set-method-node-next-implementation" "%%set-method-node-next-node" "for-each" "jazz.new-method-node" "new-node" "old-children" "%%assq" "or" "new-children" "assv" "child-class" "lambda" "jazz.partition" "partition" "%%cdr" "%%subtype?" "child-category" "%%car" "child" "let*" "%%null?" "%%get-method-node-children" "children" "sub-iter" "iter" "category" "create-method-node" "update-method-node" "%%get-method-node-category" "%%eq?" "if" "locate-most-specific-method-node" "node" "let" "root-node" "create/update-method-node" "define" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.Method-Node" define-class ("class runtime") 2369 27 2369 43 ()}
      {Lisp-Entry "jazz.new-method-node" define #f 2372 9 2372 29 ("jazz.Method-Node" "jazz.allocate-method-node" "%%get-method-node-implementation" "if" "next-implementation" "let" "children" "next-node" "implementation" "category")}
      {Lisp-Entry "jazz.call-into-incoherent" define #f 2377 9 2377 34 ("jazz.error" "rest")}
      {Lisp-Entry "jazz.call-into-abstract" define #f 2381 9 2381 32 ("jazz.error" "method" "class")}
      {Lisp-Entry "jazz.Queue" define-class ("class runtime") 2393 27 2393 37 ()}
      {Lisp-Entry "jazz.new-queue" define #f 2396 9 2396 23 ("jazz.Queue" "jazz.allocate-queue")}
      {Lisp-Entry "jazz.enqueue" define #f 2400 9 2400 21 ("%%set-cdr!" "pair" "jazz.queue-copy-last-list" "%%get-queue-last-list" "%%not-null?" "%%when" "else" "%%set-queue-list" "%%cons" "%%set-queue-current" "%%null?" "cond" "%%get-queue-current" "current" "let" "object" "queue")}
      {Lisp-Entry "jazz.enqueue-list" define #f 2413 9 2413 26 ("%%set-cdr!" "%%set-queue-last-anchor" "jazz.queue-copy-last-list" "%%get-queue-last-list" "else" "%%set-queue-list" "%%set-queue-last-list" "%%set-queue-current" "%%get-queue-current" "%%null?" "cond" "%%not-null?" "%%when" "lst" "queue")}
      {Lisp-Entry "jazz.queue-copy-last-list" define #f 2427 9 2427 34 ("%%set-queue-last-anchor" "%%set-queue-last-list" "%%set-cdr!" "else" "%%get-queue-list" "jazz.last-tail" "%%set-queue-current" "%%get-queue-last-list" "jazz.list-copy" "%%set-queue-list" "%%null?" "cond" "%%get-queue-last-anchor" "last-anchor" "let" "queue")}
      {Lisp-Entry "jazz.queue-list" define #f 2439 9 2439 24 ("%%get-queue-list" "queue")}
      {Lisp-Entry "jazz.reset-queue" define #f 2443 9 2443 25 ("%%set-queue-current" "%%set-queue-last-anchor" "%%set-queue-last-list" "%%set-queue-list" "queue")}}})
"serial"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "serial.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.serial" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.object->serial" define #f 42 13 42 32 ("object->serial-number" "obj")}
      {Lisp-Entry "jazz.serial->object" define #f 45 13 45 32 ("serial-number->object" "number")}
      {Lisp-Entry "jazz.object->serial-symbol" define #f 49 13 49 39 ("jazz.object->serial" "%%number->string" "%%string-append" "%%string->symbol" "obj")}
      {Lisp-Entry "jazz.serial-number" define #f 56 11 56 29 ("1")}
      {Lisp-Entry "jazz.serialized-objects" define #f 59 11 59 34 ("equal?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.object->serial" define #f 62 12 62 31 ("%%table-set!" "1" "%%fx+" "set!" "jazz.serial-number" "number" "let" "jazz.serialized-objects" "%%table-ref" "or" "obj")}
      {Lisp-Entry "jazz.serial->object" define #f 69 12 69 31 ("%%car" "jazz.error" "%%null?" "continuation-return" "%%fx=" "if" "value" "key" "jazz.serialized-objects" "%%iterate-table" "return" "lambda" "continuation-capture" "rest" "number")}}})
"specific"
 ({Lisp-File-Entry {File core "src" "core" "generic" "runtime" "specific.scm"} 1258811564
    {Lisp-Entry "core.generic.runtime.specific" unit #f 38 16 38 45 ()
      {Lisp-Entry "jazz.new-specific" define #f 41 9 41 26 ("jazz.Specific" "jazz.allocate-specific" "implementation" "signature-proc")}}}
  {Lisp-File-Entry {File core "src" "core" "generic" "syntax" "specific.scm"} 1258811564
    {Lisp-Entry "core.generic.syntax.specific" unit #f 45 16 45 44 ("jazz.Specific" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Specific" define-class ("class") 48 19 48 32 ("%%set-specific-descendant-specifics" "%%get-specific-descendant-specifics" "descendant-specifics" "%%set-specific-ancestor-specifics" "%%get-specific-ancestor-specifics" "ancestor-specifics" "%%set-specific-implementation" "%%get-specific-implementation" "implementation" "%%set-specific-dynamic-signature" "%%get-specific-dynamic-signature" "dynamic-signature" "jazz.allocate-specific" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Specific" define-class ("class runtime") 55 27 55 40 ()}
      {Lisp-Entry "jazz.define-specific" define-macro ("macro") 58 20 58 40 ("jazz.expand-define-specific" "%%apply" "rest")}}})
"string"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "string.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.string" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.memstring" define #f 40 9 40 23 ("1" "%%fx+" "else" "%%string-ref" "%%eqv?" "%%fx=" "cond" "0" "n" "iter" "%%string-length" "len" "let" "string" "char")}}})
"symbol"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "symbol.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.symbol" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.identifier-unit" define #f 45 9 45 29 ("0" "%%substring" "%%string->symbol" "%%not" "if" "jazz.string-find-reversed" "pos" "%%symbol->string" "str" "let*" "%%symbol?" "%%assert" "identifier")}
      {Lisp-Entry "jazz.identifier-name" define #f 54 9 54 29 ("%%string-length" "1" "%%fx+" "%%substring" "%%string->symbol" "%%not" "if" "jazz.string-find-reversed" "pos" "%%symbol->string" "str" "let*" "%%symbol?" "%%assert" "identifier")}
      {Lisp-Entry "jazz.specifier?" define #f 68 9 68 24 ("1" "%%fx-" "0" "%%string-ref" "%%eqv?" "2" "%%fx>" "%%string-length" "len" "%%symbol->string" "str" "let" "%%symbol?" "and" "expr")}
      {Lisp-Entry "jazz.specifier->name" define #f 77 9 77 29 ("%%symbol->string" "%%string->symbol" "%%string-length" "%%fx-" "1" "%%substring" "string" "lambda" "extract" "let" "specifier")}
      {Lisp-Entry "jazz.name->specifier" define #f 84 9 84 29 ("%%symbol->string" "%%string-append" "%%string->symbol" "name")}
      {Lisp-Entry "jazz.binding-specifier" define #f 88 9 88 31 ("%%car" "jazz.specifier?" "%%pair?" "and" "jazz.source-code" "%%cdr" "cdr-binding" "let" "binding")}
      {Lisp-Entry "jazz.enumerator?" define #f 100 9 100 25 ("0" "%%symbol->string" "%%string-ref" "%%eqv?" "%%symbol?" "and" "obj")}
      {Lisp-Entry "jazz.enumerator->symbol" define #f 105 9 105 32 ("%%string-length" "1" "%%substring" "%%string->symbol" "%%symbol->string" "name" "let" "obj")}}})
"syntax"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "syntax.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.syntax" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.source?" define #f 40 9 40 21 ("%%source?" "obj")}
      {Lisp-Entry "jazz.source-code" define #f 44 9 44 25 ("%%source-code" "%%source?" "if" "expr")}
      {Lisp-Entry "jazz.source-locat" define #f 50 9 50 26 ("%%source-locat" "%%source?" "if" "expr")}
      {Lisp-Entry "jazz.desourcify" define #f 56 9 56 24 ("%%desourcify" "expr")}
      {Lisp-Entry "jazz.desourcify-all" define #f 60 9 60 28 ("%%box?" "%%vector?" "%%source?" "%%unbox" "%%box" "box" "desourcify-box" "%%vector-ref" "%%vector-set!" "begin" "%%fx<" "if" "1" "%%fx-" "i" "loop" "let" "0" "%%make-vector" "x" "%%vector-length" "len" "let*" "vect" "desourcify-vector" "else" "%%null?" "%%cdr" "%%car" "%%cons" "%%pair?" "cond" "lst" "desourcify-list" "%%source-code" "desourcify-all" "src" "desourcify-source" "define" "expr")}
      {Lisp-Entry "jazz.sourcify" define #f 102 9 102 22 ("%%sourcify" "src" "expr")}
      {Lisp-Entry "jazz.sourcify-if" define #f 106 9 106 25 ("jazz.sourcify" "jazz.source?" "if" "src" "expr")}
      {Lisp-Entry "jazz.sourcify-list" define #f 112 9 112 27 ("jazz.desourcify-all" "jazz.sourcify-if" "expr" "lambda" "map" "src" "lst")}
      {Lisp-Entry "jazz.locat-container" define #f 118 9 118 29 ("%%locat-container" "locat")}
      {Lisp-Entry "jazz.locat-position" define #f 122 9 122 28 ("%%locat-position" "locat")}
      {Lisp-Entry "jazz.locat->file/line/col" define #f 126 9 126 34 ("%%list" "%%filepos-col" "col" "%%filepos-line" "line" "%%locat-position" "%%position->filepos" "filepos" "%%locat-container" "%%container->path" "file" "let" "if" "locat")}
      {Lisp-Entry "jazz.container->path" define #f 138 9 138 29 ("%%container->path" "container")}
      {Lisp-Entry "jazz.position->filepos" define #f 142 9 142 31 ("%%position->filepos" "position")}
      {Lisp-Entry "jazz.filepos-line" define #f 146 9 146 26 ("%%filepos-line" "filepos")}
      {Lisp-Entry "jazz.filepos-col" define #f 150 9 150 25 ("%%filepos-col" "filepos")}
      {Lisp-Entry "jazz.present-source" define #f 159 9 159 28 ("%%vector?" "%%source?" "%%vector-ref" "%%vector-set!" "begin" "%%fx<" "if" "%%fx-" "i" "loop" "0" "%%make-vector" "x" "%%vector-length" "len" "let*" "vect" "present-vector" "else" "%%null?" "%%cdr" "%%car" "%%cons" "%%pair?" "cond" "lst" "present-list" "%%filepos-col" "1" "%%filepos-line" "%%fx+" "jazz.present-source" "source" "'source" "%%vector" "%%source-locat" "%%locat-position" "pos" "jazz.source-code" "code" "let" "src" "present-src" "define" "obj")}}}
  {Lisp-File-Entry {File core "src" "core" "module" "syntax" "dialect" "syntax.scm"} 1258811564
    {Lisp-Entry "core.module.syntax.dialect.syntax" unit #f 37 16 37 49 ()
      {Lisp-Entry "jazz.Dialect" define-class ("class") 40 19 40 31 ("%%set-dialect-bindings" "%%get-dialect-bindings" "bindings" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.dialect-name" generic/specific ("jazz.Dialect~virtual") 44 22 44 39 ()}
      {Lisp-Entry "jazz.dialect-walker" generic/specific ("jazz.Dialect~virtual") 45 22 45 41 ()}}})
"unspecified"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "unspecified.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.unspecified" unit #f 37 16 37 45 ()
      {Lisp-Entry "jazz.unspecified" define #f 40 9 40 25 ("%%unspecified")}
      {Lisp-Entry "jazz.unspecified?" define #f 44 9 44 26 ("%%unspecified?" "expr")}
      {Lisp-Entry "jazz.specified?" define #f 48 9 48 24 ("%%unspecified?" "%%not" "expr")}}})
"vector"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "vector.scm"} 1258811564
    {Lisp-Entry "core.base.runtime.vector" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.vector-for-each" define #f 40 9 40 29 ("1" "%%fx+" "%%vector-ref" "begin" "%%fx<" "if" "0" "n" "iter" "%%vector-length" "len" "let" "vector" "proc")}
      {Lisp-Entry "jazz.vector-memq?" define #f 49 9 49 26 ("1" "%%fx+" "%%vector-ref" "%%eq?" "%%fx<" "if" "0" "n" "iter" "%%vector-length" "len" "let" "vector" "obj")}
      {Lisp-Entry "jazz.resize-vector" define #f 59 9 59 27 ("%%vector-ref" "%%vector-set!" "0" "%%fx>=" "%%when" "1" "%%vector-length" "min" "%%fx-" "offset" "iter" "%%make-vector" "new-vector" "let" "size" "vector")}}})
