"Dispatcher"
 ({Lisp-File-Entry {File core "src" "core" "generic" "runtime" "Dispatcher.jazz"} 1257169376
    {Lisp-Entry "Dispatcher" class #f 47 7 47 17 ("Object")
      {Lisp-Entry "dag-root" property #f 50 12 50 20 ()}
      {Lisp-Entry "get-dag-root" accessor #f 50 31 50 39 ()}
      {Lisp-Entry "set-dag-root" accessor #f 50 31 50 39 ()}
      {Lisp-Entry "Root-Signature" definition #f 53 14 53 28 ("root-signature" "'root-signature")}
      {Lisp-Entry "initialize" method #f 57 11 57 21 ("Root-Signature" "Dispatch-Node" "new" "dag-root" "set!" "nextmethod")}
      {Lisp-Entry "insert-signature" method #f 62 18 62 34 ("insert-node" "else" "proper-list?" "not" "type-name" "error" "locate-node" "cond" "standardize-signature" "let" "category" "signature" "procedure" "symbol")}
      {Lisp-Entry "standardize-signature" method #f 74 11 74 32 ("List" "get-type" "essay" "get-typeref" "typeref" "let" "parameter" "lambda" "accumulate" "signature")}
      {Lisp-Entry "insert-node" method #f 82 18 82 29 ("get-specific-nodes" "add-specific-node" "remove-specific-node" "add-generic-node" "remove-generic-node" "get-signature" "can-call-with?" "neq?" "and" "when" "specific" "generic" "lambda" "for-each" "Dispatch-Node" "new" "node" "gather-generics" "generics" "let*" "signature" "procedure")}
      {Lisp-Entry "remove-node" method #f 99 18 99 29 ("remove-generic-node" "get-generic-nodes" "remove-specific-node" "get-specific-nodes" "add-generic-node" "add-specific-node" "specific" "generic" "lambda" "for-each" "node")}
      {Lisp-Entry "locate-node" method #f 114 18 114 29 ("first" "get-signature" "equal?" "length" "1" "=" "and" "if" "gather-generics" "matching" "let" "signature")}
      {Lisp-Entry "gather-generics" method #f 122 18 122 33 ("dag-root" "cons" "memq?" "not" "and" "get-specific-nodes" "set!" "can-call-with?" "when" "child-node" "for-each" "no-match?" "walk-node" "lambda" "iter" "letrec" "generics" "let" "parameter-types")}
      {Lisp-Entry "find-generics" method #f 138 18 138 31 ("dag-root" "car" "eq?" "if" "gather-generics" "generics" "let" "parameter-types")}
      {Lisp-Entry "get-node-procedure" method #f 145 18 145 36 ("get-procedure" "node")}}
    {Lisp-Entry "Dispatch-Node" class #f 154 7 154 20 ("initialize" "Object")
      {Lisp-Entry "procedure" property #f 157 12 157 21 ()}
      {Lisp-Entry "get-procedure" accessor #f 157 52 157 60 ()}
      {Lisp-Entry "set-procedure" accessor #f 157 52 157 60 ()}
      {Lisp-Entry "signature" property #f 158 12 158 21 ()}
      {Lisp-Entry "get-signature" accessor #f 158 52 158 60 ()}
      {Lisp-Entry "set-signature" accessor #f 158 52 158 60 ()}
      {Lisp-Entry "generic-nodes" property #f 159 12 159 25 ()}
      {Lisp-Entry "get-generic-nodes" accessor #f 159 52 159 60 ()}
      {Lisp-Entry "set-generic-nodes" accessor #f 159 52 159 60 ()}
      {Lisp-Entry "specific-nodes" property #f 160 12 160 26 ()}
      {Lisp-Entry "get-specific-nodes" accessor #f 160 52 160 60 ()}
      {Lisp-Entry "set-specific-nodes" accessor #f 160 52 160 60 ()}
      {Lisp-Entry "initialize" method #f 163 11 163 21 ("generic-nodes" "signature" "procedure" "set!" "nextmethod" "gen" "sig" "proc")}
      {Lisp-Entry "print" method #f 170 11 170 16 ("type-name" "map" "format" "Root-Signature" "signature" "eq?" "if" "lambda" "self" "print-unreadable" "readably" "printer")}
      {Lisp-Entry "can-call-with?" method #f 178 11 178 25 ("null?" "finally" "return" "Java" "can-cast-into?" "not" "and" "when" "r2" "parameter-type" "r1" "remainder" "in" "data-type" "for" "loop" "Root-Signature" "signature" "eq?" "if" "sig")}
      {Lisp-Entry "add-generic-node" method #f 189 11 189 27 ("cons" "set-generic-nodes" "equal?" "generic" "lambda" "generic-nodes" "find-in" "unless" "get-signature" "sig" "let" "node")}
      {Lisp-Entry "add-specific-node" method #f 197 11 197 28 ("cons" "set-specific-nodes" "equal?" "specific" "lambda" "specific-nodes" "find-in" "unless" "get-signature" "sig" "let" "node")}
      {Lisp-Entry "remove-generic-node" method #f 205 11 205 30 ("generic-nodes" "remove" "set-generic-nodes" "generic")}
      {Lisp-Entry "remove-specific-node" method #f 209 11 209 31 ("specific-nodes" "remove" "set-specific-nodes" "specific")}}})
"_base"
 ({Lisp-File-Entry {File core "src" "core" "base" "_base.scm"} 1257473866
    {Lisp-Entry "core.base" unit #f 37 6 37 15 ()}})
"_builder"
 ({Lisp-File-Entry {File core "src" "core" "unit" "builder" "_builder.scm"} 1257478471
    {Lisp-Entry "core.unit.builder" unit #f 38 16 38 33 ()
      {Lisp-Entry "jazz.manifest-references-valid?" define #f 50 9 50 40 ("module-references-valid?" "jazz.every?" "if" "get-manifest-references" "references" "let" "bin")
        {Lisp-Entry "get-manifest-references" define #f 51 11 51 34 ("%%manifest-references" "and" "jazz.load-manifest" "manifest" "bin" "%%resource-package" "jazz.manifest-pathname" "manifest-filepath" "let")}
        {Lisp-Entry "module-references-valid?" define #f 56 11 56 35 ("private" "'private" "%%get-declaration-access" "%%neq?" "%%get-declaration-toplevel" "%%get-lexical-binding-name" "%%eq?" "else" "jazz.find-declaration" "%%not" "cond" "declaration" "symbols" "iter" "%%pair?" "if" "found" "symbol" "lambda" "jazz.every?" "and" "error?:" "jazz.outline-module" "module-declaration" "%%cdr" "module-references" "%%car" "module-locator" "let" "lst")}}
      {Lisp-Entry "jazz.compile-unit-internal" define #f 88 9 88 35 ("force?:" "ld-options:" "cc-options:" "options:" "jazz.compile-source" "jazz.requested-unit-resource" "jazz.requested-unit-name" "parameterize" "bin-uptodate?" "bin" "src" "lambda" "jazz.with-unit-src/bin" "force?" "ld-options" "cc-options" "options" "#!key" "unit-name")}
      {Lisp-Entry "jazz.compile-source" define #f 96 9 96 28 ("jazz.update-manifest-compile-time" "else" "jazz.Unit-Declaration" "jazz.generate-reference-list" "jazz.Module-Declaration" "%%is?" "cond" "jazz.get-catalog-entry" "module-declaration" "references" "src-filepath" "jazz.manifest-pathname" "manifest-filepath" "ld-options:" "cc-options:" "options:" "output:" "compile-file" "compile" "'compile" "jazz.walk-for" "parameterize" "lambda" "%%resource-extension" "jazz.with-extension-reader" "jazz.create-directories" "force-output" "newline" "display" "%%package-name" "jazz.find-build-package" "build-package" "jazz.resource-build-dir" "bindir" "jazz.resource-pathname" "pathname" "%%resource-path" "path" "%%resource-package" "package" "jazz.manifest-references-valid?" "and" "%%not" "if" "jazz.compile-options" "or" "let" "force?" "ld-options" "cc-options" "options" "#!key" "manifest-name" "bin-uptodate?" "bin" "src")}
      {Lisp-Entry "jazz.compile-file" define #f 129 9 129 26 ("delete-file" "jazz.resource-build-dir" "dyn" "'dyn" "##gambc-cc" "warnings?:" "%%list" "link-flat" "cc-options:" "obj" "'obj" "%%cons" "compile-file" "%%symbol->string" "unit-name:" "options:" "output:" "compile-file-to-c" "linkfile" "1" "jazz.probe-numbered-pathname" "bin-o1" "bin-o" "string-append" "bin-c" "jazz.binary-with-extension" "bin-" "jazz.resource-pathname" "pathname" "let*" "jazz.kernel-platform" "platform" "unit-name" "ld-options" "cc-options" "options" "#!key" "src")}
      {Lisp-Entry "jazz.find-build-package" define #f 154 9 154 32 ("jazz.Bin-Repository" "jazz.repository-find-package" "name")}
      {Lisp-Entry "jazz.build-unit-internal" define #f 163 9 163 33 ("jazz.compile-unit" "phase" "declaration" "lambda" "jazz.for-each-subunit" "unit-name")}
      {Lisp-Entry "jazz.get-subunit-names-internal" define #f 173 9 173 40 ("jazz.for-each-subunit" "%%cons" "set!" "phase" "declaration" "unit-name" "lambda" "proc" "sub-units" "let*" "parent-name")}
      {Lisp-Entry "jazz.for-each-subunit" define #f 181 9 181 30 ("%%get-module-declaration-exports" "%%get-module-invoice-phase" "%%get-declaration-reference-name" "name" "%%get-module-invoice-module" "reference" "export" "%%get-module-declaration-requires" "%%get-unit-declaration-requires" "for-each" "jazz.Unit-Declaration" "jazz.is?" "jazz.error" "jazz.descendant-unit?" "and" "protected" "'protected" "%%get-declaration-access" "%%eq?" "or" "jazz.outline-unit" "declaration" "%%cons" "set!" "begin" "%%memq" "%%not" "if" "feature-requirement" "lambda" "jazz.parse-require" "require" "process-require" "define" "toplevel?" "phase" "unit-name" "iter" "subunits" "let" "proc" "parent-name")}}})
"_class"
 ({Lisp-File-Entry {File core "src" "core" "class" "_class.scm"} 1257473866
    {Lisp-Entry "core.class" unit #f 37 6 37 16 ()}})
"_exception"
 ({Lisp-File-Entry {File core "src" "core" "exception" "_exception.scm"} 1257473837
    {Lisp-Entry "core.exception" unit #f 37 6 37 20 ()}})
"_generic"
 ({Lisp-File-Entry {File core "src" "core" "generic" "_generic.scm"} 1257473837
    {Lisp-Entry "core.generic" unit #f 37 6 37 18 ()}})
"_module"
 ({Lisp-File-Entry {File core "src" "core" "module" "_module.scm"} 1257478471
    {Lisp-Entry "core.module" unit #f 37 6 37 17 ()}})
"_runtime"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "_runtime.scm"} 1257473838
    {Lisp-Entry "core.base.runtime" unit #f 37 16 37 33 ()}}
  {Lisp-File-Entry {File core "src" "core" "class" "runtime" "_runtime.scm"} 1257473838
    {Lisp-Entry "core.class.runtime" unit #f 37 16 37 34 ()}}
  {Lisp-File-Entry {File core "src" "core" "generic" "runtime" "_runtime.scm"} 1257473838
    {Lisp-Entry "core.generic.runtime" unit #f 37 16 37 36 ()}}
  {Lisp-File-Entry {File core "src" "core" "module" "runtime" "_runtime.scm"} 1257478471
    {Lisp-Entry "core.module.runtime" unit #f 37 16 37 35 ("jazz.Module" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Module" define-class ("class") 48 19 48 30 ("%%get-module-exports" "exports" "%%get-module-name" "name" "jazz.allocate-module" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Module" define-class ("class runtime") 53 27 53 38 ()}
      {Lisp-Entry "jazz.new-module" define #f 56 9 56 24 ("jazz.Module" "jazz.allocate-module" "exports" "name")}
      {Lisp-Entry "jazz.Modules" define #f 68 8 68 20 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.register-module" define #f 72 9 72 29 ("jazz.Modules" "%%table-set!" "eq?" "test:" "%%list->table" "jazz.new-module" "module" "let" "exports-list" "name")}
      {Lisp-Entry "jazz.get-module" define #f 78 9 78 24 ("jazz.Modules" "%%table-ref" "jazz.load-unit" "name")}
      {Lisp-Entry "jazz.require-module" define #f 83 9 83 28 ("jazz.error" "jazz.get-module" "or" "name")}
      {Lisp-Entry "jazz.module-get" define #f 88 9 88 24 ("jazz.load-unit" "locator" "unit-name" "jazz.bind" "jazz.global-value" "%%symbol?" "if" "%%get-module-exports" "%%table-ref" "info" "jazz.require-module" "module" "let" "not-found" "#!key" "name" "module-name")}
      {Lisp-Entry "jazz.module-ref" define #f 100 8 100 23 ("jazz.error" "%%eq?" "if" "not-found:" "jazz.module-get" "obj" "name" "module-name" "lambda" "box" "not-found" "let")}
      {Lisp-Entry "jazz.type-error" define #f 114 9 114 24 ("jazz.error" "type" "value")}
      {Lisp-Entry "jazz.dispatch-error" define #f 118 9 118 28 ("%%get-category-name" "%%get-field-name" "jazz.error" "category" "value" "field")}}})
"_syntax"
 ({Lisp-File-Entry {File core "src" "core" "base" "syntax" "_syntax.scm"} 1257473839
    {Lisp-Entry "core.base.syntax" unit #f 37 16 37 32 ()}}
  {Lisp-File-Entry {File core "src" "core" "class" "syntax" "_syntax.scm"} 1257473839
    {Lisp-Entry "core.class.syntax" unit #f 37 16 37 33 ()}}
  {Lisp-File-Entry {File core "src" "core" "generic" "syntax" "_syntax.scm"} 1257473839
    {Lisp-Entry "core.generic.syntax" unit #f 37 16 37 35 ()}}
  {Lisp-File-Entry {File core "src" "core" "module" "syntax" "_syntax.scm"} 1257478471
    {Lisp-Entry "core.module.syntax" unit #f 37 16 37 34 ()}})
"_unit"
 ({Lisp-File-Entry {File core "src" "core" "unit" "_unit.scm"} 1257474019
    {Lisp-Entry "core.unit" unit #f 37 6 37 15 ()}})
"autoload"
 ({Lisp-File-Entry {File core "src" "core" "module" "runtime" "autoload.scm"} 1257478639
    {Lisp-Entry "core.module.runtime.autoload" unit #f 41 16 41 44 ()
      {Lisp-Entry "jazz.Autoloads" define #f 44 8 44 22 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-autoloads" define #f 48 9 48 27 ("jazz.Autoloads")}
      {Lisp-Entry "jazz.get-autoload" define #f 52 9 52 26 ("jazz.Autoloads" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-autoload" define #f 56 9 56 26 ("%%cons" "jazz.Autoloads" "%%table-set!" "loader" "unit-name" "name")}
      {Lisp-Entry "jazz.require-autoload" define #f 60 9 60 30 ("jazz.error" "jazz.get-autoload" "or" "name")}
      {Lisp-Entry "jazz.register-autoload" define #f 65 9 65 31 ("jazz.register-package-autoload" "jazz.requested-unit-resource" "%%resource-package" "package" "jazz.error" "jazz.set-autoload" "%%car" "%%eq?" "%%not" "or" "if" "jazz.get-autoload" "actual" "let" "loader" "unit-name" "name")}
      {Lisp-Entry "jazz.autoload" define #f 74 9 74 22 ("%%cdr" "jazz.require-autoload" "autoload-info" "let" "name")}
      {Lisp-Entry "jazz.autoreload" define #f 79 9 79 24 ("%%cdr" "%%car" "jazz.reload-unit" "jazz.require-autoload" "autoload-info" "let" "name")}}})
"boolean"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "boolean.scm"} 1257473840
    {Lisp-Entry "core.base.runtime.boolean" unit #f 37 16 37 41 ()
      {Lisp-Entry "jazz.boolean" define #f 40 9 40 21 ("%%boolean" "expr")}
      {Lisp-Entry "jazz.not-null?" define #f 44 9 44 23 ("%%not-null?" "expr")}}})
"class"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "class.scm"} 1257473841
    {Lisp-Entry "core.class.syntax.class" unit #f 37 16 37 39 ()
      {Lisp-Entry "jazz.category-name" define #f 40 8 40 26 ("jazz.object-size")}
      {Lisp-Entry "jazz.category-fields" define #f 43 8 43 28 ("1" "jazz.category-name" "%%fx+")}
      {Lisp-Entry "jazz.category-virtual-size" define #f 46 8 46 34 ("1" "jazz.category-fields" "%%fx+")}
      {Lisp-Entry "jazz.category-ancestors" define #f 49 8 49 31 ("1" "jazz.category-virtual-size" "%%fx+")}
      {Lisp-Entry "jazz.category-descendants" define #f 52 8 52 33 ("1" "jazz.category-ancestors" "%%fx+")}
      {Lisp-Entry "jazz.class-ascendant" define #f 55 8 55 28 ("1" "jazz.category-descendants" "%%fx+")}
      {Lisp-Entry "jazz.class-interfaces" define #f 58 8 58 29 ("1" "jazz.class-ascendant" "%%fx+")}
      {Lisp-Entry "jazz.class-slots" define #f 61 8 61 24 ("1" "jazz.class-interfaces" "%%fx+")}
      {Lisp-Entry "jazz.class-instance-slots" define #f 64 8 64 33 ("1" "jazz.class-slots" "%%fx+")}
      {Lisp-Entry "jazz.class-instance-size" define #f 67 8 67 32 ("1" "jazz.class-instance-slots" "%%fx+")}
      {Lisp-Entry "jazz.class-level" define #f 70 8 70 24 ("1" "jazz.class-instance-size" "%%fx+")}
      {Lisp-Entry "jazz.class-dispatch-table" define #f 73 8 73 33 ("1" "jazz.class-level" "%%fx+")}
      {Lisp-Entry "jazz.class-core-method-alist" define #f 76 8 76 36 ("1" "jazz.class-dispatch-table" "%%fx+")}
      {Lisp-Entry "jazz.class-core-virtual-alist" define #f 79 8 79 37 ("1" "jazz.class-core-method-alist" "%%fx+")}
      {Lisp-Entry "jazz.class-core-virtual-names" define #f 82 8 82 37 ("1" "jazz.class-core-virtual-alist" "%%fx+")}
      {Lisp-Entry "jazz.class-core-vtable" define #f 85 8 85 30 ("1" "jazz.class-core-virtual-names" "%%fx+")}
      {Lisp-Entry "jazz.class-class-table" define #f 88 8 88 30 ("1" "jazz.class-core-vtable" "%%fx+")}
      {Lisp-Entry "jazz.class-interface-table" define #f 91 8 91 34 ("1" "jazz.class-class-table" "%%fx+")}
      {Lisp-Entry "jazz.class-size" define #f 95 8 95 23 ("1" "jazz.class-interface-table" "%%fx+")}
      {Lisp-Entry "%%get-category-name" define-macro ("macro") 99 20 99 39 ("category")}
      {Lisp-Entry "%%get-category-fields" define-macro ("macro") 103 20 103 41 ("category")}
      {Lisp-Entry "%%set-category-fields" define-macro ("macro") 107 20 107 41 ("fields" "category")}
      {Lisp-Entry "%%get-category-virtual-size" define-macro ("macro") 111 20 111 47 ("category")}
      {Lisp-Entry "%%set-category-virtual-size" define-macro ("macro") 115 20 115 47 ("virtual-size" "category")}
      {Lisp-Entry "%%get-category-ancestors" define-macro ("macro") 119 20 119 44 ("category")}
      {Lisp-Entry "%%set-category-ancestors" define-macro ("macro") 123 20 123 44 ("ancestors" "category")}
      {Lisp-Entry "%%get-category-descendants" define-macro ("macro") 127 20 127 46 ("category")}
      {Lisp-Entry "%%set-category-descendants" define-macro ("macro") 131 20 131 46 ("descendants" "category")}
      {Lisp-Entry "%%get-class-ascendant" define-macro ("macro") 135 20 135 41 ("class")}
      {Lisp-Entry "%%get-class-interfaces" define-macro ("macro") 139 20 139 42 ("class")}
      {Lisp-Entry "%%get-class-slots" define-macro ("macro") 143 20 143 37 ("class")}
      {Lisp-Entry "%%set-class-slots" define-macro ("macro") 147 20 147 37 ("slots" "class")}
      {Lisp-Entry "%%get-class-instance-slots" define-macro ("macro") 151 20 151 46 ("class")}
      {Lisp-Entry "%%set-class-instance-slots" define-macro ("macro") 155 20 155 46 ("slots" "class")}
      {Lisp-Entry "%%get-class-instance-size" define-macro ("macro") 159 20 159 45 ("class")}
      {Lisp-Entry "%%set-class-instance-size" define-macro ("macro") 163 20 163 45 ("size" "class")}
      {Lisp-Entry "%%get-class-level" define-macro ("macro") 167 20 167 37 ("class")}
      {Lisp-Entry "%%set-class-level" define-macro ("macro") 171 20 171 37 ("size" "class")}
      {Lisp-Entry "%%get-class-dispatch-table" define-macro ("macro") 175 20 175 46 ("class")}
      {Lisp-Entry "%%set-class-dispatch-table" define-macro ("macro") 179 20 179 46 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-method-alist" define-macro ("macro") 183 20 183 49 ("class")}
      {Lisp-Entry "%%set-class-core-method-alist" define-macro ("macro") 187 20 187 49 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-virtual-alist" define-macro ("macro") 191 20 191 50 ("class")}
      {Lisp-Entry "%%set-class-core-virtual-alist" define-macro ("macro") 195 20 195 50 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-virtual-names" define-macro ("macro") 199 20 199 50 ("class")}
      {Lisp-Entry "%%set-class-core-virtual-names" define-macro ("macro") 203 20 203 50 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-vtable" define-macro ("macro") 207 20 207 43 ("class")}
      {Lisp-Entry "%%set-class-core-vtable" define-macro ("macro") 211 20 211 43 ("vtable" "class")}
      {Lisp-Entry "%%get-class-class-table" define-macro ("macro") 215 20 215 43 ("class")}
      {Lisp-Entry "%%set-class-class-table" define-macro ("macro") 219 20 219 43 ("vtable" "class")}
      {Lisp-Entry "%%get-class-interface-table" define-macro ("macro") 223 20 223 47 ("class")}
      {Lisp-Entry "%%set-class-interface-table" define-macro ("macro") 227 20 227 47 ("vtable" "class")}
      {Lisp-Entry "%%get-object-class" define-macro ("macro") 231 20 231 38 ("object")}
      {Lisp-Entry "%%set-object-class" define-macro ("macro") 235 20 235 38 ("class" "object")}
      {Lisp-Entry "%%final-dispatch" define-macro ("macro") 239 20 239 36 ("implementation" "object")}
      {Lisp-Entry "%%class-dispatch" define-macro ("macro") 243 20 243 36 ("implementation-rank" "class-level" "object")}
      {Lisp-Entry "%%interface-dispatch" define-macro ("macro") 247 20 247 40 ("implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "%%class-native-dispatch" define-macro ("macro") 251 20 251 43 ("implementation-rank" "class-level" "object")}
      {Lisp-Entry "%%interface-native-dispatch" define-macro ("macro") 255 20 255 47 ("implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "%%c-class-of" define-macro ("macro") 261 24 261 36 ("obj")}
      {Lisp-Entry "%%class-of" define-macro ("macro") 291 24 291 34 ("jazz.i-class-of" "%%get-object-class" "%%object?" "if" "else" ",symbol" "%%c-class-of" "compile" "jazz.walk-for" "case" "symbol" "lambda" "jazz.with-uniqueness" "obj")}
      {Lisp-Entry "%%i-class-of-impl" define-macro ("macro") 302 24 302 41 ("jazz.class-of-native" "%%get-object-class" "%%object?" "if" "else" ",var" "%%c-class-of" "compile" "jazz.walk-for" "case" "var")}
      {Lisp-Entry "%%class-of-impl" define-macro ("macro") 311 24 311 39 ("jazz.error" ",var" "%%class-of" "or" "jazz.debug-user?" "if" "var")}
      {Lisp-Entry "%%class-of" define-macro ("macro") 318 24 318 34 ("jazz.class-of-native" "%%get-object-class" ",symbol" "%%object?" "if" "symbol" "lambda" "jazz.with-uniqueness" "obj")}}})
"classes"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "classes.scm"} 1257473843
    {Lisp-Entry "core.class.syntax.classes" unit #f 37 16 37 41 ()
      {Lisp-Entry "jazz.Object" define-class ("class") 45 19 45 30 ()}
      {Lisp-Entry "jazz.print-object" generic/specific ("jazz.Object~virtual") 49 22 49 39 ("detail" "output")}
      {Lisp-Entry "jazz.Type" define-class ("class") 57 19 57 28 ("jazz.Object")}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Type~virtual") 61 22 61 35 ("object")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Type~virtual") 62 22 62 38 ("subtype")}
      {Lisp-Entry "jazz.category-type?" generic/specific ("jazz.Type~virtual") 63 22 63 41 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Type~virtual") 64 22 64 41 ()}
      {Lisp-Entry "jazz.emit-type" generic/specific ("jazz.Type~virtual") 65 22 65 36 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Type~virtual") 66 22 66 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Type~virtual") 67 22 67 37 ("environment" "source-declaration" "value")}
      {Lisp-Entry "%%subtype?" define-macro ("macro") 70 20 70 30 ("type" "target")}
      {Lisp-Entry "%%subcategory?" define-macro ("macro") 74 20 74 34 ("category" "target")}
      {Lisp-Entry "%%subclass?" define-macro ("macro") 78 20 78 31 ("class" "target")}
      {Lisp-Entry "%%is?" define-macro ("macro") 82 20 82 25 ("type" "object")}
      {Lisp-Entry "%%is-not?" define-macro ("macro") 86 20 86 29 ("type" "object")}
      {Lisp-Entry "jazz.Category" define-class ("class") 95 19 95 32 ("descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Type")}
      {Lisp-Entry "jazz.update-category" generic/specific ("jazz.Category~virtual") 103 22 103 42 ()}
      {Lisp-Entry "jazz.Class" define-class ("class") 111 19 111 29 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "jazz.allocate-class" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Category")}
      {Lisp-Entry "%%class-subtype?" define-macro ("macro") 127 20 127 36 ("%%get-category-ancestors" "%%vector-ref" "%%eq?" ",trg" "%%fx>=" "and" ",cls" "%%get-class-level" "class-level" "let" "cls" "trg" "lambda" "jazz.with-uniqueness" "class" "target")}
      {Lisp-Entry "%%class-is?" define-macro ("macro") 137 20 137 31 ("class" "object")}
      {Lisp-Entry "%%category-is?" define-macro ("macro") 141 20 141 34 ("category" "object")}
      {Lisp-Entry "%%class?" define-macro ("macro") 145 20 145 28 ("object")}
      {Lisp-Entry "%%object-class?" define-macro ("macro") 149 20 149 35 ("object")}
      {Lisp-Entry "jazz.Object-Class" define-class ("class") 158 19 158 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Boolean-Class" define-class ("class") 167 19 167 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Char-Class" define-class ("class") 168 19 168 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Numeric-Class" define-class ("class") 169 19 169 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Number-Class" define-class ("class") 170 19 170 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Numeric-Class")}
      {Lisp-Entry "jazz.Complex-Class" define-class ("class") 171 19 171 37 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Number-Class")}
      {Lisp-Entry "jazz.Real-Class" define-class ("class") 172 19 172 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Complex-Class")}
      {Lisp-Entry "jazz.Rational-Class" define-class ("class") 173 19 173 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Real-Class")}
      {Lisp-Entry "jazz.Integer-Class" define-class ("class") 174 19 174 37 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Rational-Class")}
      {Lisp-Entry "jazz.Fixnum-Class" define-class ("class") 175 19 175 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Integer-Class")}
      {Lisp-Entry "jazz.Flonum-Class" define-class ("class") 176 19 176 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Real-Class")}
      {Lisp-Entry "jazz.Sequence-Class" define-class ("class") 177 19 177 38 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.List-Class" define-class ("class") 178 19 178 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Null-Class" define-class ("class") 179 19 179 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.List-Class")}
      {Lisp-Entry "jazz.Pair-Class" define-class ("class") 180 19 180 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.List-Class")}
      {Lisp-Entry "jazz.String-Class" define-class ("class") 181 19 181 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Vector-Class" define-class ("class") 182 19 182 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S8Vector-Class" define-class ("class") 183 19 183 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U8Vector-Class" define-class ("class") 184 19 184 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S16Vector-Class" define-class ("class") 185 19 185 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U16Vector-Class" define-class ("class") 186 19 186 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S32Vector-Class" define-class ("class") 187 19 187 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U32Vector-Class" define-class ("class") 188 19 188 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S64Vector-Class" define-class ("class") 189 19 189 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U64Vector-Class" define-class ("class") 190 19 190 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.F32Vector-Class" define-class ("class") 191 19 191 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.F64Vector-Class" define-class ("class") 192 19 192 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Structure-Class" define-class ("class") 193 19 193 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Port-Class" define-class ("class") 194 19 194 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Continuation-Class" define-class ("class") 195 19 195 42 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Procedure-Class" define-class ("class") 196 19 196 39 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Symbol-Class" define-class ("class") 197 19 197 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Keyword-Class" define-class ("class") 198 19 198 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Table-Class" define-class ("class") 199 19 199 35 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Thread-Class" define-class ("class") 200 19 200 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Promise-Class" define-class ("class") 201 19 201 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Foreign-Class" define-class ("class") 202 19 202 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Values-Class" define-class ("class") 203 19 203 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.EOF-Class" define-class ("class") 204 19 204 33 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Unspecified-Class" define-class ("class") 205 19 205 41 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Boolean" define-class ("class") 208 19 208 31 ("jazz.Boolean-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Char" define-class ("class") 209 19 209 28 ("jazz.Char-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Numeric" define-class ("class") 210 19 210 31 ("jazz.Numeric-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Number" define-class ("class") 211 19 211 30 ("jazz.Number-Class" "jazz.Numeric")}
      {Lisp-Entry "jazz.Complex" define-class ("class") 212 19 212 31 ("jazz.Complex-Class" "jazz.Number")}
      {Lisp-Entry "jazz.Real" define-class ("class") 213 19 213 28 ("jazz.Real-Class" "jazz.Complex")}
      {Lisp-Entry "jazz.Rational" define-class ("class") 214 19 214 32 ("jazz.Rational-Class" "jazz.Real")}
      {Lisp-Entry "jazz.Integer" define-class ("class") 215 19 215 31 ("jazz.Integer-Class" "jazz.Rational")}
      {Lisp-Entry "jazz.Fixnum" define-class ("class") 216 19 216 30 ("jazz.Fixnum-Class" "jazz.Integer")}
      {Lisp-Entry "jazz.Flonum" define-class ("class") 217 19 217 30 ("jazz.Flonum-Class" "jazz.Real")}
      {Lisp-Entry "jazz.Sequence" define-class ("class") 218 19 218 32 ("jazz.Sequence-Class" "jazz.Object")}
      {Lisp-Entry "jazz.List" define-class ("class") 219 19 219 28 ("jazz.List-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Null" define-class ("class") 220 19 220 28 ("jazz.Null-Class" "jazz.List")}
      {Lisp-Entry "jazz.Pair" define-class ("class") 221 19 221 28 ("jazz.Pair-Class" "jazz.List")}
      {Lisp-Entry "jazz.String" define-class ("class") 222 19 222 30 ("jazz.String-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Vector" define-class ("class") 223 19 223 30 ("jazz.Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S8Vector" define-class ("class") 224 19 224 32 ("jazz.S8Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U8Vector" define-class ("class") 225 19 225 32 ("jazz.U8Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S16Vector" define-class ("class") 226 19 226 33 ("jazz.S16Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U16Vector" define-class ("class") 227 19 227 33 ("jazz.U16Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S32Vector" define-class ("class") 228 19 228 33 ("jazz.S32Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U32Vector" define-class ("class") 229 19 229 33 ("jazz.U32Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S64Vector" define-class ("class") 230 19 230 33 ("jazz.S64Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U64Vector" define-class ("class") 231 19 231 33 ("jazz.U64Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.F32Vector" define-class ("class") 232 19 232 33 ("jazz.F32Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.F64Vector" define-class ("class") 233 19 233 33 ("jazz.F64Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Structure" define-class ("class") 234 19 234 33 ("jazz.Structure-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Port" define-class ("class") 235 19 235 28 ("jazz.Port-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Continuation" define-class ("class") 236 19 236 36 ("jazz.Continuation-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Procedure" define-class ("class") 237 19 237 33 ("jazz.Procedure-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Symbol" define-class ("class") 238 19 238 30 ("jazz.Symbol-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Keyword" define-class ("class") 239 19 239 31 ("jazz.Keyword-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Table" define-class ("class") 240 19 240 29 ("jazz.Table-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Thread" define-class ("class") 241 19 241 30 ("jazz.Thread-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Promise" define-class ("class") 242 19 242 31 ("jazz.Promise-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Foreign" define-class ("class") 243 19 243 31 ("jazz.Foreign-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Values" define-class ("class") 244 19 244 30 ("jazz.Values-Class" "jazz.Object")}
      {Lisp-Entry "jazz.EOF" define-class ("class") 245 19 245 27 ("jazz.EOF-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Unspecified" define-class ("class") 246 19 246 35 ("jazz.Unspecified-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Interface" define-class ("class") 254 19 254 33 ("%%get-interface-rank" "rank" "%%get-interface-ascendants" "ascendants" "jazz.allocate-interface" "jazz.Object-Class" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Category")}
      {Lisp-Entry "jazz.Field" define-class ("class") 264 19 264 29 ("%%get-field-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "%%get-category-field" define-macro ("macro") 268 20 268 40 ("field-name" "category")}
      {Lisp-Entry "%%set-category-field" define-macro ("macro") 272 20 272 40 ("field" "field-name" "category")}
      {Lisp-Entry "jazz.Slot" define-class ("class") 281 19 281 28 ("%%get-slot-initialize" "initialize" "%%get-slot-offset" "offset" "jazz.allocate-slot" "jazz.Object-Class" "name" "jazz.Field")}
      {Lisp-Entry "jazz.Property" define-class ("class") 291 19 291 32 ("%%get-property-setter" "setter" "%%get-property-getter" "getter" "jazz.allocate-property" "jazz.Object-Class" "initialize" "offset" "name" "jazz.Slot")}
      {Lisp-Entry "jazz.Method" define-class ("class") 301 19 301 30 ("%%set-method-implementation-rank" "%%get-method-implementation-rank" "implementation-rank" "%%set-method-category-rank" "%%get-method-category-rank" "category-rank" "%%set-method-implementation-tree" "%%get-method-implementation-tree" "implementation-tree" "%%set-method-implementation" "%%get-method-implementation" "implementation" "%%set-method-dispatch-type" "%%get-method-dispatch-type" "dispatch-type" "jazz.allocate-method" "jazz.Object-Class" "name" "jazz.Field")}
      {Lisp-Entry "jazz.Method-Node" define-class ("class") 314 19 314 35 ("%%set-method-node-children" "%%get-method-node-children" "children" "%%set-method-node-next-implementation" "%%get-method-node-next-implementation" "next-implementation" "%%set-method-node-next-node" "%%get-method-node-next-node" "next-node" "%%set-method-node-implementation" "%%get-method-node-implementation" "implementation" "%%set-method-node-category" "%%get-method-node-category" "category" "jazz.allocate-method-node" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Queue" define-class ("class") 327 19 327 29 ("%%set-queue-current" "%%get-queue-current" "current" "%%set-queue-last-anchor" "%%get-queue-last-anchor" "last-anchor" "%%set-queue-last-list" "%%get-queue-last-list" "last-list" "%%set-queue-list" "%%get-queue-list" "list" "jazz.allocate-queue" "jazz.Object-Class" "jazz.Object")}}}
  {Lisp-File-Entry {File core "src" "core" "exception" "syntax" "classes.scm"} 1257473841
    {Lisp-Entry "core.exception.syntax.classes" unit #f 37 16 37 45 ()
      {Lisp-Entry "jazz.Exception" define-class ("class") 45 19 45 33 ("jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.Exception~virtual") 49 22 49 44 ()}
      {Lisp-Entry "jazz.get-message" generic/specific ("jazz.Exception~virtual") 50 22 50 38 ()}
      {Lisp-Entry "jazz.get-detail" generic/specific ("jazz.Exception~virtual") 51 22 51 37 ()}
      {Lisp-Entry "jazz.Exception-Detail" define-class ("class") 59 19 59 40 ("%%get-exception-detail-children" "children" "%%get-exception-detail-location" "location" "%%get-exception-detail-title" "title" "%%get-exception-detail-icon" "icon" "jazz.allocate-exception-detail" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.System-Exception" define-class ("class") 71 19 71 40 ("%%get-system-exception-exception" "exception" "jazz.Object-Class" "jazz.Exception")}
      {Lisp-Entry "jazz.Error" define-class ("class") 80 19 80 29 ("%%get-error-message" "message" "jazz.allocate-error" "jazz.Object-Class" "jazz.Exception")}}}
  {Lisp-File-Entry {File core "src" "core" "module" "syntax" "classes.scm"} 1257478910
    {Lisp-Entry "core.module.syntax.classes" unit #f 37 16 37 42 ()
      {Lisp-Entry "jazz.Walk-Binding" define-class ("class") 45 19 45 36 ("jazz.Object-Class" "jazz.Type")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Walk-Binding~virtual") 49 22 49 46 ("source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" generic/specific ("jazz.Walk-Binding~virtual") 50 22 50 50 ()}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Walk-Binding~virtual") 51 22 51 46 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Walk-Binding~virtual") 52 22 52 49 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Walk-Binding~virtual") 53 22 53 53 ("form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" generic/specific ("jazz.Walk-Binding~virtual") 54 22 54 44 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" generic/specific ("jazz.Walk-Binding~virtual") 55 22 55 52 ("environment" "source-declaration" "call" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" generic/specific ("jazz.Walk-Binding~virtual") 56 22 56 59 ("symbol-src" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" generic/specific ("jazz.Walk-Binding~virtual") 57 22 57 51 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" generic/specific ("jazz.Walk-Binding~virtual") 58 22 58 50 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" generic/specific ("jazz.Walk-Binding~virtual") 59 22 59 49 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" generic/specific ("jazz.Walk-Binding~virtual") 60 22 60 49 ("form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Walk-Binding~virtual") 61 22 61 51 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Walk-Binding~virtual") 62 22 62 51 ("form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Lexical-Binding" define-class ("class") 70 19 70 39 ("%%set-lexical-binding-hits" "%%get-lexical-binding-hits" "hits" "%%get-lexical-binding-type" "type" "%%get-lexical-binding-name" "name" "jazz.Object-Class" "jazz.Walk-Binding")}
      {Lisp-Entry "jazz.resolve-binding" generic/specific ("jazz.Lexical-Binding~virtual") 76 22 76 42 ()}
      {Lisp-Entry "jazz.Declaration" define-class ("class") 84 19 84 35 ("%%set-declaration-source" "%%get-declaration-source" "source" "%%set-declaration-locator" "%%get-declaration-locator" "locator" "%%set-declaration-parent" "%%get-declaration-parent" "parent" "%%set-declaration-toplevel" "%%get-declaration-toplevel" "toplevel" "%%get-declaration-attributes" "attributes" "%%get-declaration-compatibility" "compatibility" "%%get-declaration-access" "access" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.lookup-declaration" generic/specific ("jazz.Declaration~virtual") 94 22 94 45 ("source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.update-declaration" generic/specific ("jazz.Declaration~virtual") 95 22 95 45 ("new-declaration")}
      {Lisp-Entry "jazz.get-declaration-inclusions" generic/specific ("jazz.Declaration~virtual") 96 22 96 53 ()}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Declaration~virtual") 97 22 97 43 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" generic/specific ("jazz.Declaration~virtual") 98 22 98 56 ()}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Declaration~virtual") 99 22 99 43 ("s" "k" "f")}
      {Lisp-Entry "jazz.Declaration-Reference" define-class ("class") 107 19 107 45 ("%%set-declaration-reference-declaration" "%%get-declaration-reference-declaration" "declaration" "%%get-declaration-reference-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.resolve-reference" generic/specific ("jazz.Declaration-Reference~virtual") 112 22 112 44 ("module-declaration")}
      {Lisp-Entry "jazz.Module-Reference" define-class ("class") 120 19 120 40 ("jazz.allocate-module-reference" "jazz.Object-Class" "declaration" "name" "jazz.Declaration-Reference")}
      {Lisp-Entry "jazz.Export-Reference" define-class ("class") 129 19 129 40 ("%%get-export-reference-module-reference" "module-reference" "jazz.allocate-export-reference" "jazz.Object-Class" "declaration" "name" "jazz.Declaration-Reference")}
      {Lisp-Entry "jazz.Autoload-Reference" define-class ("class") 138 19 138 42 ("jazz.allocate-autoload-reference" "jazz.Object-Class" "module-reference" "declaration" "name" "jazz.Export-Reference")}
      {Lisp-Entry "jazz.Unit-Declaration" define-class ("class") 147 19 147 40 ("%%set-unit-declaration-requires" "%%get-unit-declaration-requires" "requires" "jazz.allocate-unit-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Namespace-Declaration" define-class ("class") 156 19 156 45 ("%%set-namespace-declaration-body" "%%get-namespace-declaration-body" "body" "%%get-namespace-declaration-children" "children" "%%get-namespace-declaration-lookups" "lookups" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "%%get-access-lookup" define-macro ("macro") 162 20 162 39 ("access" "namespace-declaration")}
      {Lisp-Entry "jazz.Module-Declaration" define-class ("class") 171 19 171 42 ("%%get-module-declaration-proclaims" "proclaims" "%%set-module-declaration-imports" "%%get-module-declaration-imports" "imports" "%%set-module-declaration-exports" "%%get-module-declaration-exports" "exports" "%%set-module-declaration-requires" "%%get-module-declaration-requires" "requires" "%%get-module-declaration-dialect-invoice" "dialect-invoice" "%%get-module-declaration-dialect-name" "dialect-name" "%%set-module-declaration-walker" "%%get-module-declaration-walker" "walker" "jazz.allocate-module-declaration" "jazz.Object-Class" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Namespace-Declaration")}
      {Lisp-Entry "jazz.Module-Invoice" define-class ("class") 186 19 186 38 ("%%get-module-invoice-rename" "rename" "%%get-module-invoice-prefix" "prefix" "%%get-module-invoice-except" "except" "%%get-module-invoice-only" "only" "%%get-module-invoice-version" "version" "%%get-module-invoice-phase" "phase" "%%get-module-invoice-module" "module" "%%get-module-invoice-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Export-Invoice" define-class ("class") 202 19 202 38 ("%%set-export-invoice-autoload" "%%get-export-invoice-autoload" "autoload" "jazz.allocate-export-invoice" "jazz.Object-Class" "rename" "prefix" "except" "only" "version" "phase" "module" "name" "jazz.Module-Invoice")}
      {Lisp-Entry "jazz.Import-Invoice" define-class ("class") 211 19 211 38 ("%%set-import-invoice-hit?" "%%get-import-invoice-hit?" "hit?" "jazz.allocate-import-invoice" "jazz.Object-Class" "rename" "prefix" "except" "only" "version" "phase" "module" "name" "jazz.Module-Invoice")}
      {Lisp-Entry "jazz.Export-Declaration" define-class ("class") 220 19 220 42 ("%%get-export-declaration-symbol" "symbol" "jazz.allocate-export-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Export-Syntax-Declaration" define-class ("class") 229 19 229 49 ("%%get-export-syntax-declaration-symbol" "symbol" "jazz.allocate-export-syntax-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Autoload-Declaration" define-class ("class") 238 19 238 44 ("%%set-autoload-declaration-declaration" "%%get-autoload-declaration-declaration" "declaration" "%%get-autoload-declaration-exported-module" "exported-module" "%%get-autoload-declaration-module" "module" "jazz.allocate-autoload-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Literal" define-class ("class") 249 19 249 31 ("%%get-literal-arguments" "arguments" "%%get-literal-name" "name" "jazz.allocate-literal" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Macro-Declaration" define-class ("class") 259 19 259 41 ("%%set-macro-declaration-body" "%%get-macro-declaration-body" "body" "%%set-macro-declaration-signature" "%%get-macro-declaration-signature" "signature" "jazz.allocate-macro-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Syntax-Declaration" define-class ("class") 269 19 269 42 ("%%set-syntax-declaration-body" "%%get-syntax-declaration-body" "body" "%%set-syntax-declaration-signature" "%%get-syntax-declaration-signature" "signature" "jazz.allocate-syntax-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Define-Syntax-Declaration" define-class ("class") 279 19 279 49 ("jazz.allocate-define-syntax-declaration" "jazz.Object-Class" "body" "signature" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Syntax-Declaration")}
      {Lisp-Entry "jazz.Void-Class" define-class ("class") 288 19 288 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Void" define-class ("class") 292 19 292 28 ("jazz.Void-Class" "jazz.Type")}
      {Lisp-Entry "jazz.Opt-Type" define-class ("class") 301 19 301 32 ("%%get-opt-type-type" "type" "jazz.allocate-opt-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Key-Type" define-class ("class") 310 19 310 32 ("%%get-key-type-type" "type" "%%get-key-type-key" "key" "jazz.allocate-key-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Rest-Type" define-class ("class") 320 19 320 33 ("%%get-rest-type-type" "type" "jazz.allocate-rest-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Function-Type" define-class ("class") 329 19 329 37 ("%%get-function-type-result" "result" "%%get-function-type-rest" "rest" "%%get-function-type-named" "named" "%%get-function-type-optional" "optional" "%%get-function-type-positional" "positional" "%%get-function-type-mandatory" "mandatory" "jazz.allocate-function-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Category-Type" define-class ("class") 343 19 343 37 ("%%get-category-type-declaration" "declaration" "jazz.allocate-category-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Values-Type" define-class ("class") 352 19 352 35 ("%%get-values-type-types" "types" "jazz.allocate-values-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Restriction-Type" define-class ("class") 361 19 361 40 ("%%get-restriction-type-type" "type" "%%get-restriction-type-base" "base" "jazz.allocate-restriction-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Complement-Type" define-class ("class") 371 19 371 39 ("%%get-complement-type-type" "type" "jazz.allocate-complement-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Union-Type" define-class ("class") 380 19 380 34 ("%%get-union-type-types" "types" "jazz.allocate-union-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Template-Type" define-class ("class") 389 19 389 37 ("%%get-template-type-types" "types" "%%get-template-type-class" "class" "jazz.allocate-template-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Nillable-Type" define-class ("class") 399 19 399 37 ("%%get-nillable-type-type" "type" "jazz.allocate-nillable-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Any-Class" define-class ("class") 408 19 408 33 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "instance-slots" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Any" define-class ("class") 412 19 412 27 ("jazz.Any-Class" "jazz.Type")}
      {Lisp-Entry "jazz.C-Type-Declaration" define-class ("class") 421 19 421 42 ("%%get-c-type-declaration-declare" "declare" "%%get-c-type-declaration-scheme-to-c" "scheme-to-c" "%%get-c-type-declaration-c-to-scheme" "c-to-scheme" "%%get-c-type-declaration-inclusions" "inclusions" "%%set-c-type-declaration-pointer-types" "%%get-c-type-declaration-pointer-types" "pointer-types" "%%get-c-type-declaration-base-type" "base-type" "%%get-c-type-declaration-expansion" "expansion" "%%get-c-type-declaration-kind" "kind" "jazz.allocate-c-type-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.C-Definition-Declaration" define-class ("class") 437 19 437 48 ("%%set-c-definition-declaration-body" "%%get-c-definition-declaration-body" "body" "%%get-c-definition-declaration-scope" "scope" "%%get-c-definition-declaration-c-name" "c-name" "%%get-c-definition-declaration-result-type" "result-type" "%%get-c-definition-declaration-parameter-types" "parameter-types" "%%set-c-definition-declaration-signature" "%%get-c-definition-declaration-signature" "signature" "jazz.allocate-c-definition-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Walker" define-class ("class") 451 19 451 30 ("%%set-walker-autoloads" "%%get-walker-autoloads" "autoloads" "%%set-walker-inclusions" "%%get-walker-inclusions" "inclusions" "%%get-walker-references" "references" "%%get-walker-variables" "variables" "%%set-walker-literals" "%%get-walker-literals" "literals" "%%set-walker-errors" "%%get-walker-errors" "errors" "%%set-walker-warnings" "%%get-walker-warnings" "warnings" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.walker-bindings" generic/specific ("jazz.Walker~virtual") 461 22 461 42 ()}
      {Lisp-Entry "jazz.walker-environment" generic/specific ("jazz.Walker~virtual") 462 22 462 45 ()}
      {Lisp-Entry "jazz.walk-declaration" generic/specific ("jazz.Walker~virtual") 463 22 463 43 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-reference" generic/specific ("jazz.Walker~virtual") 464 22 464 46 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" generic/specific ("jazz.Walker~virtual") 465 22 465 49 ("value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" generic/specific ("jazz.Walker~virtual") 466 22 466 47 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol" generic/specific ("jazz.Walker~virtual") 467 22 467 38 ("symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" generic/specific ("jazz.Walker~virtual") 468 22 468 36 ("form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-proclaim" generic/specific ("jazz.Walker~virtual") 469 22 469 44 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" generic/specific ("jazz.Walker~virtual") 470 22 470 45 ("form-src" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.runtime-export" generic/specific ("jazz.Walker~virtual") 471 22 471 41 ("declaration")}
      {Lisp-Entry "%%get-module-declaration-literals" define #f 475 9 475 42 ("%%get-module-declaration-walker" "%%get-walker-literals" "lib-decl")}
      {Lisp-Entry "%%set-module-declaration-literals" define #f 477 9 477 42 ("%%get-module-declaration-walker" "%%set-walker-literals" "value" "lib-decl")}
      {Lisp-Entry "%%get-module-declaration-variables" define #f 479 9 479 43 ("%%get-module-declaration-walker" "%%get-walker-variables" "lib-decl")}
      {Lisp-Entry "%%get-module-declaration-references" define #f 481 9 481 44 ("%%get-module-declaration-walker" "%%get-walker-references" "lib-decl")}
      {Lisp-Entry "%%get-module-declaration-inclusions" define #f 483 9 483 44 ("%%get-module-declaration-walker" "%%get-walker-inclusions" "lib-decl")}
      {Lisp-Entry "%%set-module-declaration-inclusions" define #f 485 9 485 44 ("%%get-module-declaration-walker" "%%set-walker-inclusions" "value" "lib-decl")}
      {Lisp-Entry "%%get-module-declaration-autoloads" define #f 487 9 487 43 ("%%get-module-declaration-walker" "%%get-walker-autoloads" "lib-decl")}
      {Lisp-Entry "%%set-module-declaration-autoloads" define #f 489 9 489 43 ("%%get-module-declaration-walker" "%%set-walker-autoloads" "value" "lib-decl")}
      {Lisp-Entry "jazz.Walk-Context" define-class ("class") 498 19 498 36 ("%%get-walk-context-pathname" "pathname" "%%get-walk-context-locator" "locator" "%%get-walk-context-policy" "policy" "jazz.allocate-walk-context" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Location" define-class ("class") 509 19 509 37 ("%%get-walk-location-locat" "locat" "%%get-walk-location-declaration-locator" "declaration-locator" "%%get-walk-location-unit-locator" "unit-locator" "jazz.allocate-walk-location" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Problem" define-class ("class") 520 19 520 36 ("%%get-walk-problem-location" "location" "jazz.Object-Class" "message" "jazz.Error")}
      {Lisp-Entry "jazz.Walk-Problems" define-class ("class") 529 19 529 37 ("%%get-walk-problems-errors" "errors" "%%get-walk-problems-warnings" "warnings" "jazz.allocate-walk-problems" "jazz.Object-Class" "message" "jazz.Error")}
      {Lisp-Entry "jazz.Walk-Warning" define-class ("class") 539 19 539 36 ("jazz.allocate-walk-warning" "jazz.Object-Class" "location" "message" "jazz.Walk-Problem")}
      {Lisp-Entry "jazz.Walk-Error" define-class ("class") 548 19 548 34 ("jazz.allocate-walk-error" "jazz.Object-Class" "location" "message" "jazz.Walk-Problem")}
      {Lisp-Entry "jazz.Unresolved-Error" define-class ("class") 557 19 557 40 ("%%get-unresolved-error-symbol" "symbol" "jazz.allocate-unresolved-error" "jazz.Object-Class" "location" "message" "jazz.Walk-Error")}
      {Lisp-Entry "jazz.Walk-Frame" define-class ("class") 566 19 566 34 ("%%get-walk-frame-bindings" "bindings" "jazz.allocate-walk-frame" "jazz.Object-Class" "jazz.Walk-Binding")}
      {Lisp-Entry "jazz.Signature" define-class ("class") 575 19 575 33 ("%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "%%get-signature-mandatory" "mandatory" "jazz.allocate-signature" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Symbol-Binding" define-class ("class") 588 19 588 38 ("%%set-symbol-binding-gensym" "%%get-symbol-binding-gensym" "gensym" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Variable" define-class ("class") 597 19 597 32 ("%%set-variable-reference-count" "%%get-variable-reference-count" "reference-count" "jazz.allocate-variable" "jazz.Object-Class" "gensym" "hits" "type" "name" "jazz.Symbol-Binding")}
      {Lisp-Entry "jazz.NextMethod-Variable" define-class ("class") 606 19 606 43 ("jazz.allocate-nextmethod-variable" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Variable")}
      {Lisp-Entry "jazz.Parameter" define-class ("class") 615 19 615 33 ("jazz.allocate-parameter" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Variable")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Parameter~virtual") 619 22 619 41 ("environment" "declaration")}
      {Lisp-Entry "jazz.Dynamic-Parameter" define-class ("class") 627 19 627 41 ("%%get-dynamic-parameter-class" "class" "jazz.allocate-dynamic-parameter" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Optional-Parameter" define-class ("class") 636 19 636 42 ("%%set-optional-parameter-default" "%%get-optional-parameter-default" "default" "jazz.allocate-optional-parameter" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Named-Parameter" define-class ("class") 645 19 645 39 ("%%set-named-parameter-default" "%%get-named-parameter-default" "default" "jazz.allocate-named-parameter" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Rest-Parameter" define-class ("class") 654 19 654 38 ("jazz.allocate-rest-parameter" "jazz.Object-Class" "reference-count" "gensym" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Self-Binding" define-class ("class") 663 19 663 36 ("jazz.allocate-self-binding" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Dynamic-Self-Binding" define-class ("class") 672 19 672 44 ("%%get-dynamic-self-binding-code" "code" "jazz.allocate-dynamic-self-binding" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Local-Variable-Binding" define-class ("class") 681 19 681 46 ("%%get-local-variable-binding-variable" "variable" "jazz.allocate-local-variable-binding" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Macro-Symbol" define-class ("class") 690 19 690 36 ("%%get-macro-symbol-setter" "setter" "%%get-macro-symbol-getter" "getter" "jazz.allocate-macro-symbol" "jazz.Object-Class" "gensym" "hits" "type" "name" "jazz.Symbol-Binding")}
      {Lisp-Entry "jazz.Form-Binding" define-class ("class") 700 19 700 36 ("jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Special-Form" define-class ("class") 709 19 709 36 ("%%get-special-form-walk" "walk" "jazz.allocate-special-form" "jazz.Object-Class" "hits" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Macro-Form" define-class ("class") 718 19 718 34 ("%%get-macro-form-expander" "expander" "jazz.allocate-macro-form" "jazz.Object-Class" "hits" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Syntax-Form" define-class ("class") 727 19 727 35 ("%%get-syntax-form-expander" "expander" "jazz.allocate-syntax-form" "jazz.Object-Class" "hits" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Define-Syntax-Form" define-class ("class") 736 19 736 42 ("%%get-define-syntax-form-environment" "environment" "jazz.allocate-define-syntax-form" "jazz.Object-Class" "expander" "hits" "type" "name" "jazz.Syntax-Form")}
      {Lisp-Entry "jazz.Syntactic-Closure" define-class ("class") 745 19 745 41 ("%%get-syntactic-closure-form" "form" "%%get-syntactic-closure-variables" "variables" "%%get-syntactic-closure-environment" "environment" "jazz.allocate-syntactic-closure" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Annotated-Variable" define-class ("class") 756 19 756 42 ("%%set-annotated-variable-type" "%%get-annotated-variable-type" "type" "%%get-annotated-variable-declared-type" "declared-type" "%%get-annotated-variable-variable" "variable" "jazz.allocate-annotated-variable" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Restricted-Binding" define-class ("class") 767 19 767 42 ("%%get-restricted-binding-type" "type" "%%get-restricted-binding-binding" "binding" "jazz.allocate-restricted-binding" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Annotated-Frame" define-class ("class") 777 19 777 39 ("%%get-annotated-frame-reset" "reset" "%%get-annotated-frame-variables" "variables" "jazz.allocate-annotated-frame" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Code" define-class ("class") 787 19 787 28 ("%%get-code-source" "source" "%%get-code-type" "type" "%%get-code-form" "form" "jazz.allocate-code" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Access" define-class ("class") 799 19 799 30 ("%%get-access-context" "context" "%%get-access-name" "name" "jazz.allocate-access" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Expression" define-class ("class") 809 19 809 34 ("%%get-expression-source" "source" "%%get-expression-type" "type" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Expression~virtual") 814 22 814 42 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" generic/specific ("jazz.Expression~virtual") 815 22 815 36 ("environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Expression~virtual") 816 22 816 42 ("s" "k" "f")}
      {Lisp-Entry "jazz.Proclaim" define-class ("class") 824 19 824 32 ("%%get-proclaim-clauses" "clauses" "jazz.allocate-proclaim" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Constant" define-class ("class") 833 19 833 32 ("%%get-constant-expansion" "expansion" "jazz.allocate-constant" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Delay" define-class ("class") 842 19 842 29 ("%%get-delay-expression" "expression" "jazz.allocate-delay" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Quasiquote" define-class ("class") 851 19 851 34 ("%%get-quasiquote-form" "form" "jazz.allocate-quasiquote" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Reference" define-class ("class") 860 19 860 33 ("%%get-reference-binding" "binding" "jazz.allocate-reference" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Method-Reference" define-class ("class") 869 19 869 40 ("jazz.allocate-method-reference" "jazz.Object-Class" "binding" "source" "type" "jazz.Reference")}
      {Lisp-Entry "jazz.Assignment" define-class ("class") 878 19 878 34 ("%%get-assignment-value" "value" "%%get-assignment-binding" "binding" "jazz.allocate-assignment" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Lambda" define-class ("class") 888 19 888 30 ("%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "jazz.allocate-lambda" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Let" define-class ("class") 898 19 898 27 ("%%get-let-body" "body" "%%get-let-bindings" "bindings" "jazz.allocate-let" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Named-Let" define-class ("class") 908 19 908 33 ("%%get-named-let-variable" "variable" "jazz.allocate-named-let" "jazz.Object-Class" "body" "bindings" "source" "type" "jazz.Let")}
      {Lisp-Entry "jazz.Letstar" define-class ("class") 917 19 917 31 ("%%get-letstar-body" "body" "%%get-letstar-bindings" "bindings" "jazz.allocate-letstar" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Letrec" define-class ("class") 927 19 927 30 ("%%get-letrec-body" "body" "%%get-letrec-bindings" "bindings" "jazz.allocate-letrec" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Receive" define-class ("class") 937 19 937 31 ("%%get-receive-body" "body" "%%get-receive-expression" "expression" "%%get-receive-variables" "variables" "jazz.allocate-receive" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Body" define-class ("class") 948 19 948 28 ("%%get-body-expressions" "expressions" "%%get-body-internal-defines" "internal-defines" "jazz.allocate-body" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Internal-Define" define-class ("class") 958 19 958 39 ("%%get-internal-define-value" "value" "%%get-internal-define-variable" "variable" "jazz.allocate-internal-define" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Begin" define-class ("class") 968 19 968 29 ("%%get-begin-expressions" "expressions" "jazz.allocate-begin" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Do" define-class ("class") 977 19 977 26 ("%%get-do-body" "body" "%%get-do-result" "result" "%%get-do-test" "test" "%%get-do-bindings" "bindings" "jazz.allocate-do" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Call" define-class ("class") 989 19 989 28 ("%%get-call-arguments" "arguments" "%%get-call-operator" "operator" "jazz.allocate-call" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.If" define-class ("class") 999 19 999 26 ("%%get-if-no" "no" "%%get-if-yes" "yes" "%%get-if-test" "test" "jazz.allocate-if" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Cond" define-class ("class") 1010 19 1010 28 ("%%get-cond-clauses" "clauses" "jazz.allocate-cond" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Case" define-class ("class") 1019 19 1019 28 ("%%get-case-clauses" "clauses" "%%get-case-target" "target" "jazz.allocate-case" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.And" define-class ("class") 1029 19 1029 27 ("%%get-and-expressions" "expressions" "jazz.allocate-and" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Or" define-class ("class") 1038 19 1038 26 ("%%get-or-expressions" "expressions" "jazz.allocate-or" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Declare" define-class ("class") 1047 19 1047 31 ("%%get-declare-declarations" "declarations" "jazz.allocate-declare" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Include" define-class ("class") 1056 19 1056 33 ("%%get-c-include-name" "name" "jazz.allocate-c-include" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Declare" define-class ("class") 1065 19 1065 33 ("%%get-c-declare-code" "code" "jazz.allocate-c-declare" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Named-Declare-Declaration" define-class ("class") 1074 19 1074 51 ("%%get-c-named-declare-declaration-code" "code" "jazz.allocate-c-named-declare-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.C-Initialize" define-class ("class") 1083 19 1083 36 ("%%get-c-initialize-code" "code" "jazz.allocate-c-initialize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Function" define-class ("class") 1092 19 1092 34 ("%%get-c-function-expansion" "expansion" "jazz.allocate-c-function" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Parameterize" define-class ("class") 1101 19 1101 36 ("%%get-parameterize-body" "body" "%%get-parameterize-bindings" "bindings" "jazz.allocate-parameterize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Time-Special" define-class ("class") 1111 19 1111 36 ("%%get-time-special-expressions" "expressions" "jazz.allocate-time" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Core-Dialect" define-class ("class") 1120 19 1120 36 ("jazz.allocate-core-dialect" "jazz.Object-Class" "bindings" "jazz.Dialect")}
      {Lisp-Entry "jazz.Core-Walker" define-class ("class") 1129 19 1129 35 ("jazz.allocate-core-walker" "jazz.Object-Class" "autoloads" "inclusions" "references" "variables" "literals" "errors" "warnings" "jazz.Walker")}}})
"define-class"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-class.scm"} 1257473844
    {Lisp-Entry "core.class.syntax.define-class" unit #f 37 16 37 46 ()
      {Lisp-Entry "jazz.define-class" define-macro ("macro") 40 20 40 37 (",inherited-slot-names" "',inherited-slot-names" ",',inherited-slot-names" "',',inherited-slot-names" "jazz.validate-inherited-slots" "jazz.identifier-name" "jazz.set-core-class" ",instance-size" "',instance-size" ",',instance-size" ",slot-names" "',slot-names" ",',slot-names" "',',slot-names" ",ascendant-accessor" "',ascendant-accessor" ",',ascendant-accessor" "eq?" "test:" "%%make-table" "',',name" ",class-accessor" "',class-accessor" ",',class-accessor" "jazz.new-core-class" "',name" ",',name" "%%symbol->string" "%%string-append" "%%string->symbol" "jazz.object-size" "%%fx+" "jazz.naturals" "'%%object-set!" "%%object-set!" ",value" ",slot-setter" "'%%object-ref" ",rank" "%%object-ref" "jazz.expected-error" "jazz.object-of-class?" "%%core-assertion" ",object" ",slot-getter" "define" "value" "jazz.generate-symbol" "object" "%%cddr" "slot-setter" "%%cadr" "slot-getter" "%%car" "slot-name" "let" "rank" "slot" "map" "%%object" "'%%object" "%%list" ",@all-variables" "class" ",constructor" "jazz.define-macro" "%%null?" ",name" "jazz.define-variable" "jazz.debug-core?" "if" "begin" "instance-size" "all-variables" "slot-names" "ascendant-size" "ascendant-accessor" "class-accessor" "lambda" "jazz.parse-define-class" "slots" "constructor" "class-name" "inherited-slot-names" "ascendant-name" "name")
        {Lisp-Entry "jazz.parse-define-class" define #f 41 11 41 34 ("jazz.object-size" "%%fx+" "instance-size" "all-length" "%%symbol->string" "jazz.generate-symbol" "slot-name" "lambda" "all-variables" "%%append" "all-slot-names" "car" "map" "slot-names" "%%length" "ascendant-size" "ascendant-accessor" "%%null?" "if" "class-accessor" "let*" "proc" "slots" "class-name" "inherited-slot-names" "ascendant-name")}}
      {Lisp-Entry "jazz.define-class-runtime" define-macro ("macro") 97 20 97 45 ("name")}}})
"define-method"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-method.scm"} 1257473844
    {Lisp-Entry "core.class.syntax.define-method" unit #f 37 16 37 47 ()
      {Lisp-Entry "jazz.define-virtual" define-macro ("macro") 40 20 40 39 ("jazz.expand-define-virtual" "%%car" "%%null?" "if" "bootstrap-type?" "let" "rest" "signature")}
      {Lisp-Entry "jazz.define-virtual-runtime" define-macro ("macro") 45 20 45 47 ("jazz.expand-define-virtual-runtime" "signature")}
      {Lisp-Entry "jazz.define-method" define-macro ("macro") 49 20 49 38 ("jazz.expand-define-method" "body" "signature")}}})
"define-method-expander"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-method-expander.scm"} 1257473844
    {Lisp-Entry "core.class.syntax.define-method-expander" unit #f 37 16 37 56 ()
      {Lisp-Entry "jazz.expand-define-virtual" define #f 40 9 40 35 ("obj" "lambda" "jazz.with-uniqueness" ",rank-name" "',rank-name" "%%get-object-class" "'%%get-object-class" "%%get-class-core-vtable" "'%%get-class-core-vtable" "%%vector-ref" "'%%vector-ref" "',name" "jazz.format" "jazz.error" "'jazz.error" ",class-name" "',class-name" ",is-test" "',is-test" "%%core-assertion" "'%%core-assertion" "%%list" "%%symbol?" ",@extra-parameters" ",object-parameter" ",name" "jazz.define-macro" "%%class-is?" "'%%class-is?" "jazz.bootstrap-type?" "'jazz.bootstrap-type?" "if" "is-test" "jazz.method-rank-name" "rank-name" "jazz.method-implementation-name" "implementation-name" "extra-parameters" "%%cadr" "object-parameter" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "bootstrap-type?" "signature")}
      {Lisp-Entry "jazz.expand-define-virtual-runtime" define #f 75 9 75 43 (",name" "',name" ",class-name" "jazz.register-virtual-name" ",rank-name" "define" "jazz.method-rank-name" "rank-name" "jazz.method-implementation-name" "implementation-name" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "signature")}
      {Lisp-Entry "jazz.expand-define-method" define #f 85 9 85 34 ("jazz.register-method" ",@body" ",@extra-parameters" ",object-parameter" "lambda" ",name" "',name" ",class-name" "jazz.find-nextmethod" "nextmethod" "let" ",implementation-name" "define" "begin" "jazz.method-implementation-name" "implementation-name" "extra-parameters" "%%cadr" "object-parameter" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "body" "signature")}
      {Lisp-Entry "jazz.method-implementation-name" define #f 100 9 100 40 ("%%string-append" "%%string->symbol" "%%symbol->string" "jazz.split-string" "jazz.last" "let" "name" "class-name")}
      {Lisp-Entry "jazz.method-rank-name" define #f 105 9 105 30 ("%%symbol->string" "%%string-append" "%%string->symbol" "implementation-name")}
      {Lisp-Entry "jazz.inherited-name?" define #f 109 9 109 29 ("%%get-class-core-virtual-names" "%%memq" "and" "%%get-class-ascendant" "ascendant" "let" "method-name" "class")}
      {Lisp-Entry "jazz.register-virtual-name" define #f 115 9 115 35 ("1" "%%length" "%%fx-" "%%list" "%%get-class-core-virtual-names" "%%append" "%%set-class-core-virtual-names" "method-name" "class")}
      {Lisp-Entry "jazz.register-method" define #f 123 9 123 29 ("%%get-class-core-virtual-alist" "%%set-class-core-virtual-alist" "%%cons" "%%list" "%%get-class-core-method-alist" "%%append" "%%set-class-core-method-alist" "jazz.inherited-name?" "if" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.get-method-rank" define #f 133 9 133 29 ("1" "%%fx+" "%%cdr" "%%car" "%%eq?" "if" "0" "rank" "%%get-class-core-virtual-names" "scan" "iter" "let" "method-name" "class")}
      {Lisp-Entry "jazz.get-method-implementation" define #f 141 9 141 39 ("jazz.get-method-rank" "%%get-class-core-vtable" "%%vector-ref" "method-name" "class")}
      {Lisp-Entry "jazz.find-nextmethod" define #f 146 9 146 29 ("jazz.error" "rest" "obj" "lambda" "%%get-class-ascendant" "jazz.get-method-implementation" "jazz.inherited-name?" "if" "method-name" "class")}}})
"development"
 ({Lisp-File-Entry {File core "src" "core" "module" "development.scm"} 1257478909
    {Lisp-Entry "core.module.development" unit #f 38 6 38 29 ()
      {Lisp-Entry "jazz.parse" define #f 49 9 49 19 ("jazz.desourcify-all" "pretty-print" "jazz.read-toplevel-form" "form-src" "jazz.find-unit-src" "src" "let" "unit-name")}
      {Lisp-Entry "jazz.parse-source" define #f 56 9 56 26 ("jazz.present-source" "pretty-print" "jazz.read-toplevel-form" "form-src" "jazz.find-unit-src" "src" "let*" "interpret" "'interpret" "jazz.walk-for" "parameterize" "unit-name")}
      {Lisp-Entry "jazz.expand-unit" define #f 69 9 69 25 ("jazz.expand-module-source" "module" "jazz.expand-unit-source" "unit" "case" "jazz.requested-unit-resource" "jazz.requested-unit-name" "cdr" "rest" "car" "jazz.source-code" "kind" "jazz.read-toplevel-form" "form" "jazz.find-unit-src" "src" "let*" "walk" "'walk" "or" "jazz.walk-for" "parameterize" "walk-for" "#!key" "unit-name")}
      {Lisp-Entry "jazz.expand" define #f 82 9 82 20 ("current-output-port" "jazz.expand-to-port" "apply" "rest" "unit-name")}
      {Lisp-Entry "jazz.expand-to-file" define #f 86 9 86 28 ("jazz.expand-to-port" "apply" "port" "lambda" "or" "call-with-output-file" "rest" "#!rest" "file" "#!key" "unit-name")}
      {Lisp-Entry "jazz.expand-to-port" define #f 92 9 92 28 ("jazz.expand-unit" "apply" "jazz.desourcify-all" "pretty-print" "rest" "port" "unit-name")}
      {Lisp-Entry "jazz.expand-source" define #f 98 9 98 27 ("jazz.expand-unit" "apply" "jazz.present-source" "pretty-print" "rest" "unit-name")}
      {Lisp-Entry "jazz.lookup" define #f 109 9 109 20 ("jazz.walk-unit" "jazz.lookup-declaration" "access" "name" "module-name")}}})
"dialect"
 ({Lisp-File-Entry {File core "src" "core" "module" "syntax" "dialect.scm"} 1257478909
    {Lisp-Entry "core.module.syntax.dialect" unit #f 37 16 37 42 ("jazz.Dialect" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Dialect" define-class ("class runtime") 40 27 40 39 ()}
      {Lisp-Entry "jazz.dialect-name" generic/specific ("jazz.Dialect~virtual-runtime") 43 30 43 47 ()}
      {Lisp-Entry "jazz.dialect-walker" generic/specific ("jazz.Dialect~virtual-runtime") 44 30 44 49 ()}
      {Lisp-Entry "jazz.dialect-name" generic/specific ("jazz.Dialect") 47 21 47 38 ()}
      {Lisp-Entry "jazz.dialect-walker" generic/specific ("jazz.Dialect") 51 21 51 40 ()}
      {Lisp-Entry "jazz.Dialects" define #f 63 8 63 21 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-dialect" define #f 67 9 67 25 ("jazz.Dialects" "%%table-ref" "name")}
      {Lisp-Entry "jazz.require-dialect" define #f 71 9 71 29 ("jazz.error" "jazz.get-dialect" "or" "name")}
      {Lisp-Entry "jazz.register-dialect" define #f 76 9 76 30 ("jazz.Dialects" "%%table-set!" "dialect" "name")}
      {Lisp-Entry "jazz.define-dialect" define-macro ("macro") 80 20 80 39 ("dialect" "name")}
      {Lisp-Entry "jazz.register-binding" define #f 89 9 89 30 ("%%get-dialect-bindings" "%%cons" "%%set-dialect-bindings" "jazz.get-dialect" "dialect" "let" "binding" "dialect-name")}
      {Lisp-Entry "jazz.define-walker-special" define-macro ("macro") 94 20 94 46 ("method" "dialect-name" "name")}
      {Lisp-Entry "jazz.define-walker-syntax" define-macro ("macro") 98 20 98 45 ("method" "dialect-name" "name")}
      {Lisp-Entry "jazz.define-walker-macro" define-macro ("macro") 102 20 102 44 ("method" "dialect-name" "name")}}})
"dialect-syntax"
 ({Lisp-File-Entry {File core "src" "core" "module" "syntax" "dialect-syntax.scm"} 1257478909
    {Lisp-Entry "core.module.syntax.dialect-syntax" unit #f 37 16 37 49 ()
      {Lisp-Entry "jazz.Dialect" define-class ("class") 40 19 40 31 ("%%set-dialect-bindings" "%%get-dialect-bindings" "bindings" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.dialect-name" generic/specific ("jazz.Dialect~virtual") 44 22 44 39 ()}
      {Lisp-Entry "jazz.dialect-walker" generic/specific ("jazz.Dialect~virtual") 45 22 45 41 ()}}})
"error"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "error.scm"} 1257473847
    {Lisp-Entry "core.base.runtime.error" unit #f 37 16 37 39 ()
      {Lisp-Entry "jazz.unimplemented" define #f 40 9 40 27 ("%%car" "jazz.error" "%%null?" "if" "rest")}}}
  {Lisp-File-Entry {File core "src" "core" "class" "syntax" "error.scm"} 1257473847
    {Lisp-Entry "core.class.syntax.error" unit #f 37 16 37 39 ()
      {Lisp-Entry "jazz.object-of-class?" define-macro ("variable") 40 22 40 43 ()}
      {Lisp-Entry "jazz.not-object-error" define #f 43 9 43 30 ("jazz.error" "obj")}
      {Lisp-Entry "jazz.outside-object-error" define #f 47 9 47 34 ("jazz.error" "rnk" "obj")}
      {Lisp-Entry "jazz.expected-error" define #f 51 9 51 28 ("jazz.error" "obj" "class")}}}
  {Lisp-File-Entry {File core "src" "core" "exception" "runtime" "error.scm"} 1257473847
    {Lisp-Entry "core.exception.runtime.error" unit #f 37 16 37 44 ("jazz.raise-jazz-error" "jazz.error" "set!" "jazz.Error" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Error" define-class ("class runtime") 40 27 40 37 ()}
      {Lisp-Entry "jazz.new-error" define #f 43 9 43 23 ("jazz.Error" "jazz.allocate-error" "message")}
      {Lisp-Entry "jazz.get-message" generic/specific ("jazz.Error") 47 21 47 37 ("error" "%%get-error-message")}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.Error") 51 21 51 43 ("error" "%%get-error-message")}
      {Lisp-Entry "jazz.raise-jazz-error" define #f 61 9 61 30 ("jazz.new-error" "raise" "jazz.format" "apply" "message" "let" "rest" "fmt-string")}}})
"exception"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "exception.scm"} 1257473848
    {Lisp-Entry "core.base.runtime.exception" unit #f 38 16 38 43 ()
      {Lisp-Entry "jazz.current-exception-handler" define #f 43 12 43 42 ("current-exception-handler")}
      {Lisp-Entry "jazz.with-exception-handler" define #f 46 13 46 40 ("continuation-return" "exc" "with-exception-handler" "return" "lambda" "continuation-capture" "thunk" "proc")}
      {Lisp-Entry "jazz.exception-reason" define #f 54 13 54 34 ("jazz.format" "%%not" "if" "'arguments" "arguments" "'message" "message" "'location" "'exc" "condition-property-accessor" "location" "let" "exc")}
      {Lisp-Entry "jazz.current-exception-handler" define #f 63 12 63 42 ("current-exception-handler")}
      {Lisp-Entry "jazz.with-exception-handler" define #f 66 12 66 39 ("with-exception-handler")}
      {Lisp-Entry "jazz.with-exception-catcher" define #f 69 12 69 39 ("with-exception-catcher")}
      {Lisp-Entry "jazz.display-exception" define #f 72 12 72 34 ("display-exception")}
      {Lisp-Entry "jazz.display-continuation-backtrace" define #f 75 12 75 47 ("display-continuation-backtrace")}
      {Lisp-Entry "jazz.raise" define #f 78 13 78 23 ("raise" "obj")}}}
  {Lisp-File-Entry {File core "src" "core" "exception" "runtime" "exception.scm"} 1257473848
    {Lisp-Entry "core.exception.runtime.exception" unit #f 37 16 37 48 ("newline" "jazz.present-exception" "display" "begin" "%%is?" "%%object?" "and" "if" "port" "exc" "lambda" "set!" "##display-exception-hook" "previous-hook" "let" "jazz.System-Exception" "jazz.Exception-Detail" "jazz.Exception" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Exception" define-class ("class runtime") 45 27 45 41 ()}
      {Lisp-Entry "jazz.print-object" generic/specific ("jazz.Exception") 48 21 48 38 ("if" "jazz.object->serial" "jazz.format" "exception" "jazz.get-message" "message" "let" "detail" "output")}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.Exception~virtual-runtime") 56 30 56 52 ()}
      {Lisp-Entry "jazz.get-message" generic/specific ("jazz.Exception~virtual-runtime") 57 30 57 46 ()}
      {Lisp-Entry "jazz.get-detail" generic/specific ("jazz.Exception~virtual-runtime") 58 30 58 45 ()}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.Exception") 61 21 61 43 ("get-output-string" "exception" "jazz.format" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.get-message" generic/specific ("jazz.Exception") 67 21 67 37 ()}
      {Lisp-Entry "jazz.get-detail" generic/specific ("jazz.Exception") 71 21 71 36 ()}
      {Lisp-Entry "jazz.Exception-Detail" define-class ("class runtime") 83 27 83 48 ()}
      {Lisp-Entry "jazz.new-exception-detail" define #f 86 9 86 34 ("jazz.Exception-Detail" "jazz.allocate-exception-detail" "children" "location" "title" "icon")}
      {Lisp-Entry "jazz.System-Exception" define-class ("class runtime") 98 27 98 48 ()}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.System-Exception") 101 21 101 43 ("exception" "%%get-system-exception-exception" "jazz.exception-reason")}
      {Lisp-Entry "jazz.exception-reason" define #f 113 9 113 30 ("%%substring" "1" "%%fx-" "%%string-ref" "%%eqv?" "0" "%%fx>" "and" "if" "string-length" "len" "get-output-string" "str" "jazz.display-exception" "open-output-string" "output" "let" "exc")}
      {Lisp-Entry "jazz.exception-detail" define #f 124 9 124 30 ("jazz.get-detail" "jazz.Exception" "%%is?" "%%object?" "and" "if" "exc")}
      {Lisp-Entry "jazz.exception-location" define #f 131 9 131 32 ("##exception->locat" "cont" "exc")}}})
"expander"
 ({Lisp-File-Entry {File core "src" "core" "generic" "syntax" "expander.scm"} 1257473848
    {Lisp-Entry "core.generic.syntax.expander" unit #f 38 16 38 44 ()
      {Lisp-Entry "jazz.dynamic-parameter?" define #f 41 9 41 32 ("%%cdr" "jazz.composite-name?" "or" "%%car" "type" "let" "%%pair?" "and" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-type" define #f 49 9 49 36 ("jazz.specifier->name" "jazz.specifier?" "if" "%%car" "type" "let" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-types" define #f 56 9 56 37 ("%%cdr" "jazz.dynamic-parameter-type" "%%cons" "%%car" "jazz.dynamic-parameter?" "%%pair?" "and" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.dynamic-parameter-name" define #f 65 9 65 36 ("%%cadr" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-names" define #f 69 9 69 37 ("%%cdr" "jazz.dynamic-parameter-name" "%%cons" "%%car" "jazz.dynamic-parameter?" "%%pair?" "and" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.generic-parameters" define #f 78 9 78 32 ("jazz.reverse!" "values" "else" "%%symbol?" "jazz.dynamic-parameter-name" "%%cons" "%%cdr" "jazz.dynamic-parameter?" "cond" "%%car" "parameter" "%%pair?" "if" "result" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.specific-parameters" define #f 92 9 92 33 ("else" "%%cdr" "jazz.dynamic-parameter-name" "%%cons" "jazz.dynamic-parameter?" "cond" "%%car" "parameter" "%%pair?" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.expand-define-generic" define #f 108 9 108 35 ("apply" "jazz.dynamic-parameter-names" ",parameter" "%%class-of" "parameter" "map" "%%specific-dispatch" ",gensym-specific" "jazz.process-pending-specifics" "%%get-generic-pending-specifics" "%%not" "%%when" ",gensym-rest" ",@mandatory-parameters" ",@dynamic-signature" "%%list" "',generic-method-locator" "jazz.new-generic" "jazz.generic-reset" "jazz.global-value" ",gensym-generic" "',generic-locator" "jazz.global-variable?" ",generic-locator" ",@body" ",generic-method-locator" "jazz.error" ",formal-signature" "lambda" ",specific-implementation-locator" "define" "begin" "%%null?" "if" "gensym-rest" "let" "jazz.generic-parameters" "extra-parameters" "mandatory-parameters" "receive" "gensym-specific" "jazz.generate-symbol" "gensym-generic" "jazz.generic-object-locator" "generic-locator" "jazz.implementation-locator" "specific-implementation-locator" "jazz.specific-parameters" "formal-signature" "jazz.dynamic-parameter-types" "dynamic-signature" "%%cdr" "parameters" "%%car" "generic-method-locator" "let*" "body" "signature")}
      {Lisp-Entry "jazz.generic-object-locator" define #f 144 9 144 36 ("%%symbol->string" "%%string-append" "%%string->symbol" "locator")}
      {Lisp-Entry "jazz.expand-define-specific" define #f 153 9 153 36 (",generic-locator" "jazz.register-specific" "%%set-specific-implementation" ",@body" ",@nextmethod-bindings" "let" ",formal-signature" ",gensym-lambda" ",@dynamic-signature" "lambda" "jazz.new-specific" ",specific-implementation-locator" "define" ",gensym-specific" "%%get-specific-ancestor-specifics" "%%get-specific-implementation" "nextmethod" "%%list" "if" "nextmethod-bindings" "gensym-lambda" "jazz.generate-symbol" "gensym-specific" "jazz.generic-object-locator" "generic-locator" "jazz.implementation-locator" "specific-implementation-locator" "jazz.specific-parameters" "formal-signature" "jazz.dynamic-parameter-types" "dynamic-signature" "%%cdr" "parameters" "%%car" "generic-method-locator" "root" "'root" "%%eq?" "root?" "let*" "body" "modifier" "signature")}
      {Lisp-Entry "jazz.implementation-locator" define #f 174 9 174 36 ("jazz.join-strings" "%%string-append" "%%string->symbol" "%%car" "%%pair?" "if" "class/call" "lambda" "map" "dynamic-signature-strings" "%%symbol->string" "generic-string" "let" "dynamic-signature" "generic-locator")}}})
"generic"
 ({Lisp-File-Entry {File core "src" "core" "generic" "runtime" "generic.scm"} 1257473849
    {Lisp-Entry "core.generic.runtime.generic" unit #f 38 16 38 44 ()
      {Lisp-Entry "jazz.new-generic" define #f 41 9 41 25 ("jazz.generic-make-root" "jazz.Generic" "jazz.allocate-generic" "generic" "jazz.identifier-name" "name" "let*" "root-proc" "dynamic-signature" "locator")}
      {Lisp-Entry "jazz.generic-reset" define #f 48 9 48 27 ("%%get-generic-root-specific" "%%get-specific-dynamic-signature" "jazz.generic-make-root" "root-proc" "generic")}
      {Lisp-Entry "jazz.generic-make-root" define #f 52 9 52 31 ("%%get-generic-pending-specifics" "%%cons" "%%set-generic-pending-specifics" "%%set-generic-root-specific" "jazz.invalid-generic-call" "apply" "rest" "lambda" "or" "jazz.new-specific" "root-specific" "let" "root-proc" "dynamic-signature" "generic")}
      {Lisp-Entry "jazz.invalid-generic-call" define #f 58 9 58 34 ("jazz.generic-error" "%%cdr" "%%car" "%%class-of" "%%cons" "%%pair?" "and" "if" "%%get-generic-root-specific" "%%get-specific-dynamic-signature" "signature" "iter" "dynamic-parameters" "let" "rest" "generic")}
      {Lisp-Entry "jazz.generic-error" define #f 68 9 68 27 ("%%cons" "jazz.error" "%%get-generic-root-specific" "%%get-specific-dynamic-signature" "root-signature" "%%get-generic-name" "name" "let" "signature" "generic")}
      {Lisp-Entry "jazz.register-specific" define #f 80 9 80 31 ("%%get-generic-pending-specifics" "%%cons" "%%set-generic-pending-specifics" "specific" "generic")}
      {Lisp-Entry "jazz.process-pending-specifics" define #f 89 9 89 39 ("%%set-generic-pending-specifics" "%%get-generic-pending-specifics" "%%reverse" "jazz.insert/replace-specific" "specific" "lambda" "for-each" "%%get-generic-root-specific" "jazz.resolve-signature" "generic")}
      {Lisp-Entry "jazz.resolve-signature" define #f 99 9 99 31 ("%%set-specific-dynamic-signature" "%%procedure?" "%%when" "%%get-specific-dynamic-signature" "signature/proc" "let" "specific")}
      {Lisp-Entry "jazz.insert/replace-specific" define #f 105 9 105 37 ("%%set-car!" "iter" "%%set-generic-root-specific" "%%get-generic-root-specific" "perfect-match" "%%set-specific-descendant-specifics" "set!" "%%memq" "%%when" "else" "jazz.remove!" "jazz.specific-better?" "%%cons" "%%get-specific-ancestor-specifics" "%%car" "best" "brothers" "brother-partition" "%%cdr" "if" "descendants" "%%assq" "descendant-partition" "assv" "jazz.dynamic-signature-compare" "ordered" "'ordered" "%%eq?" "descendant-signature" "descendant" "%%get-specific-descendant-specifics" "jazz.partition" "partition" "ancestor-signature" "ancestor" "lambda" "for-each" "%%set-specific-ancestor-specifics" "descendant-specifics" "put-best-first" "ancestors" "let" "%%pair?" "jazz.generic-error" "%%not" "cond" "jazz.gather-dynamic-signature-ancestors" "matches" "%%get-specific-dynamic-signature" "dynamic-signature" "let*" "specific" "generic")
        {Lisp-Entry "put-best-first" define #f 106 11 106 25 ("%%cons" "jazz.specific-better?" "specific" "%%pair?" "if" "others" "%%car" "best" "%%cdr" "scan" "iter" "let" "specifics")}}
      {Lisp-Entry "jazz.gather-dynamic-signature-ancestors" define #f 180 9 180 48 ("%%null?" "else" "%%cons" "%%memq" "%%cdr" "%%get-specific-descendant-specifics" "found-in-descendants" "ordered" "set!" "equal" "%%get-specific-dynamic-signature" "jazz.dynamic-signature-compare" "case" "%%car" "specific" "%%pair?" "if" "partial-matches" "%%get-generic-root-specific" "%%list" "specifics" "iter" "or" "perfect-match" "let" "dynamic-signature" "generic")}
      {Lisp-Entry "jazz.dynamic-signature-compare" define #f 206 9 206 39 ("else" "ordered" "'ordered" "reverse-ordered" "'reverse-ordered" "jazz.subcategory?" "%%cdr" "%%car" "%%eq?" "cond" "unordered" "'unordered" "and" "%%null?" "or" "if" "equal" "'equal" "match" "iter" "let" "ancestor-signature" "descendant-signature")}
      {Lisp-Entry "jazz.dynamic-signature-equal?" define #f 228 9 228 38 ("%%cdr" "%%car" "%%eq?" "and" "%%null?" "or" "if" "iter" "let" "dynamic-signature2" "dynamic-signature1")}
      {Lisp-Entry "jazz.specific-better?" define #f 237 9 237 30 ("%%cdr" "%%car" "%%get-class-level" "%%fx>" "or" "signature2" "%%get-specific-dynamic-signature" "signature1" "iter" "let" "specific2" "specific1")}
      {Lisp-Entry "jazz.display-tree" define #f 249 9 249 26 ("1" "%%fx+" "newline" "%%get-specific-descendant-specifics" "%%get-specific-ancestor-specifics" "%%get-specific-dynamic-signature" "write" "specific" "lambda" "for-each" "0" "level" "%%get-generic-root-specific" "%%list" "specifics" "iterate" "let" "jazz.process-pending-specifics" "%%get-generic-pending-specifics" "%%null?" "%%not" "%%when" "generic")}
      {Lisp-Entry "jazz.dispatch-from-root" define #f 274 9 274 32 ("else" "%%car" "%%pair?" "jazz.generic-error" "%%not" "cond" "jazz.gather-dynamic-signature-ancestors" "matches" "let" "dynamic-classes" "generic")}}}
  {Lisp-File-Entry {File core "src" "core" "generic" "syntax" "generic.scm"} 1257474173
    {Lisp-Entry "core.generic.syntax.generic" unit #f 44 16 44 43 ("jazz.Generic" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Generic" define-class ("class") 47 19 47 31 ("%%set-generic-pending-specifics" "%%get-generic-pending-specifics" "pending-specifics" "%%set-generic-root-specific" "%%get-generic-root-specific" "root-specific" "%%get-generic-name" "name" "%%get-generic-locator" "locator" "jazz.allocate-generic" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Generic" define-class ("class runtime") 54 27 54 39 ()}
      {Lisp-Entry "jazz.define-generic" define-macro ("macro") 57 20 57 39 ("jazz.expand-define-generic" "%%apply" "rest")}
      {Lisp-Entry "%%specific-dispatch" define-macro ("macro") 61 20 61 39 ("dynamic-classes" "generic")}}})
"initialize"
 ({Lisp-File-Entry {File core "src" "core" "module" "initialize.scm"} 1257478909
    {Lisp-Entry "core.module.initialize" unit #f 37 16 37 38 ("jazz.initialize-primitive-patterns")}})
"keyword"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "keyword.scm"} 1257473851
    {Lisp-Entry "core.base.runtime.keyword" unit #f 37 16 37 41 ()
      {Lisp-Entry "jazz.keyword?" define #f 42 13 42 26 ("keyword?" "obj")}
      {Lisp-Entry "jazz.keyword->string" define #f 45 13 45 33 ("keyword->string" "keyword")}
      {Lisp-Entry "jazz.string->keyword" define #f 48 13 48 33 ("string->keyword" "string")}
      {Lisp-Entry "jazz.keyword?" define #f 52 13 52 26 ("%%keyword?" "obj")}
      {Lisp-Entry "jazz.keyword->string" define #f 55 13 55 33 ("%%keyword->string" "keyword")}
      {Lisp-Entry "jazz.string->keyword" define #f 58 13 58 33 ("%%string->keyword" "string")}
      {Lisp-Entry "jazz.keyword?" define #f 62 12 62 25 ("1" "%%string-length" "%%fx-" "%%string-ref" "%%eqv?" "%%symbol->string" "str" "let" "%%symbol?" "and" "obj")}
      {Lisp-Entry "jazz.keyword->string" define #f 68 12 68 32 ("1" "%%length" "%%fx-" "0" "%%substring" "%%symbol->string" "str" "let" "keyword")}
      {Lisp-Entry "jazz.string->keyword" define #f 73 12 73 32 ("%%string-append" "%%string->symbol" "string")}}})
"list"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "list.scm"} 1257473852
    {Lisp-Entry "core.base.runtime.list" unit #f 37 16 37 38 ()
      {Lisp-Entry "jazz.find-in" define #f 40 9 40 21 ("%%cdr" "%%car" "or" "%%null?" "if" "scan" "iter" "let" "lst" "proc")}
      {Lisp-Entry "jazz.find-if" define #f 48 9 48 21 ("%%cdr" "%%car" "value" "%%null?" "if" "scan" "iter" "let" "lst" "predicate")}
      {Lisp-Entry "jazz.getprop" define #f 58 9 58 21 ("%%cddr" "else" "%%car" "%%eqv?" "%%null?" "cond" "scan" "iter" "let" "target" "plist")}
      {Lisp-Entry "jazz.getf" define #f 68 9 68 18 ("%%cadr" "if" "jazz.getprop" "pair" "let" "not-found" "#!key" "target" "plist")}
      {Lisp-Entry "jazz.reverse!" define #f 75 8 75 21 ("reverse")}
      {Lisp-Entry "jazz.list-copy" define #f 79 9 79 23 ("obj" "lambda" "map" "lst")}
      {Lisp-Entry "jazz.last-tail" define #f 83 9 83 23 ("else" "%%null?" "cond" "%%cdr" "tail" "scan" "iter" "let" "%%pair?" "if" "lst")}
      {Lisp-Entry "jazz.last-pair" define #f 96 9 96 23 ("%%cdr" "tail" "scan" "iter" "let" "%%pair?" "if" "lst")}
      {Lisp-Entry "jazz.last" define #f 106 9 106 18 ("jazz.last-pair" "%%car" "lst")}
      {Lisp-Entry "jazz.remove-duplicates" define #f 110 9 110 31 ("%%cons" "%%memv" "%%cdr" "result" "%%car" "value" "%%not-null?" "if" "scan" "iter" "let" "lst")}
      {Lisp-Entry "jazz.partition" define #f 121 9 121 23 ("%%set-cdr!" "begin" "%%list" "%%cons" "%%not" "set" "category" "%%car" "element" "%%cdr" "partition" "let*" "%%null?" "if" "scan" "iter" "let" "associate" "key" "lst")}
      {Lisp-Entry "jazz.rassq" define #f 136 9 136 19 ("%%cdr" "else" "%%car" "%%cdar" "%%eq?" "%%null?" "cond" "rest" "iter" "let" "alist" "obj")}
      {Lisp-Entry "jazz.butlast" define #f 146 9 146 21 ("jazz.butlast" "%%car" "%%cons" "%%cdr" "%%null?" "if" "lst")}
      {Lisp-Entry "jazz.naturals" define #f 152 9 152 22 ("jazz.reverse!" "1" "%%fx+" "%%cons" "set!" "%%fx<" "%%while" "n" "lst" "let" "to" "from")}
      {Lisp-Entry "jazz.remove!" define #f 161 9 161 21 ("%%set-cdr!" "scan" "previous" "let" "begin" "%%null?" "if" "%%cdr" "set!" "%%car" "%%eqv?" "%%not-null?" "and" "%%while" "lst" "target")}}})
"macros"
 ({Lisp-File-Entry {File core "src" "core" "base" "syntax" "macros.scm"} 1257473853
    {Lisp-Entry "core.base.syntax.macros" unit #f 37 16 37 39 ()
      {Lisp-Entry "%%boolean" define-macro ("syntax") 40 20 40 29 (",expr" "if" "jazz.source-code" "%%cadr" "expr" "let" "src" "lambda")}
      {Lisp-Entry "%%not-null?" define-macro ("syntax") 46 20 46 31 (",expr" "%%null?" "%%not" "jazz.source-code" "%%cadr" "expr" "let" "src" "lambda")}
      {Lisp-Entry "%%when" define-macro ("syntax") 57 20 57 26 (",@body" "begin" ",test" "if" "%%cddr" "body" "jazz.source-code" "%%cadr" "test" "let" "src" "lambda")}
      {Lisp-Entry "%%while" define-macro ("syntax") 72 20 72 27 (",@body" "begin" ",test" "if" ",iter" "jazz.generate-symbol" "iter" "%%cddr" "body" "jazz.source-code" "%%cadr" "test" "let" "src" "lambda")}
      {Lisp-Entry "%%core-assert" define-macro ("syntax") 89 20 89 33 ("jazz.debug-core?" "jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%core-assertion" define-macro ("syntax") 94 20 94 36 ("jazz.debug-core?" "jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "%%debug-assert" define-macro ("syntax") 99 20 99 34 ("jazz.debug-user?" "jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%debug-assertion" define-macro ("syntax") 104 20 104 37 ("jazz.debug-user?" "jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "%%assert" define-macro ("syntax") 109 20 109 28 ("jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%assertion" define-macro ("syntax") 114 20 114 31 ("jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "jazz.expand-%%assert" define #f 119 9 119 29 ("error" "'error" "jazz.expand-%%assertion-body" "%%unspecified" "'%%unspecified" "%%list" "%%null?" "if" "effective-body" "get-output-string" "%%desourcify" "write" "display" "open-output-string" "port" "message" "%%cddr" "body" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-%%assertion" define #f 131 9 131 32 ("jazz.expand-%%assertion-body" "%%unspecified" "'%%unspecified" "%%list" "%%null?" "if" "effective-body" "%%cdr" "body" "%%cddr" "%%car" "action" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-%%assertion-body" define #f 139 9 139 37 (",@body" "begin" "jazz.simplify-begin" ",action" ",assertion" "%%not" "if" "body" "action" "assertion" "test?")}
      {Lisp-Entry "jazz.bind" define-macro ("macro") 166 20 166 29 ("expand-car" ",tree" ",tree-symbol" "jazz.generate-symbol" "tree-symbol" "let" "body" "tree" "bindings")
        {Lisp-Entry "expand-car" define #f 168 11 168 21 ("expand-car" ",car-symbol" "jazz.error" "%%null?" "if" "jazz.generate-symbol" "car-symbol" "%%pair?" "expand-cdr" ",tree" ",car-binding" "%%symbol?" "cond" "%%car" "car-binding" "let" "body" "tree" "bindings")}
        {Lisp-Entry "expand-cdr" define #f 181 11 181 21 ("expand-car" ",cdr-symbol" "jazz.generate-symbol" "cdr-symbol" "%%pair?" ",@body" ",tree" ",cdr-binding" "%%symbol?" "%%null?" "cond" "%%cdr" "cdr-binding" "let" "body" "tree" "bindings")}}
      {Lisp-Entry "%%compose-name" define-macro ("macro") 203 20 203 34 ("s2" "s1")}}})
"module"
 ({Lisp-File-Entry {File core "src" "core" "module" "syntax" "module.scm"} 1257479150
    {Lisp-Entry "core.module.syntax.module" unit #f 37 16 37 41 ()
      {Lisp-Entry "module" define-macro ("syntax") 40 20 40 26 ("jazz.source-code" "%%cdr" "jazz.expand-module-source" "form-src" "lambda")}}})
"object"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "object.scm"} 1257473854
    {Lisp-Entry "core.class.syntax.object" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.instances-statistics?" define #f 41 8 41 34 ()}
      {Lisp-Entry "jazz.instances-statistics" define #f 45 8 45 33 ("eq?" "test:" "%%make-table" "jazz.instances-statistics?" "if")}
      {Lisp-Entry "jazz.register-instance" define #f 51 9 51 31 ("%%cons" "list" "0" "%%table-ref" "%%fx+" "jazz.instances-statistics" "%%table-set!" "count" "case" "1" "##vector-ref" "name" "if" "jazz.keep-instances-statistics" "keep" "let" "obj" "class")}
      {Lisp-Entry "%%register-instance" define-macro ("macro") 65 20 65 39 (",obj" ",class" "jazz.register-instance" "jazz.instances-statistics?" "if" "obj" "class")}
      {Lisp-Entry "%%object-content" define #f 73 12 73 28 ("0")}
      {Lisp-Entry "%%object-marker" define #f 77 11 77 26 ("'jazz.object")}
      {Lisp-Entry "%%object-content" define #f 80 11 80 27 ("1")}
      {Lisp-Entry "jazz.object-class" define #f 84 8 84 25 ("%%object-content")}
      {Lisp-Entry "jazz.object-size" define #f 88 8 88 24 ("1" "jazz.object-class" "%%fx+")}
      {Lisp-Entry "%%subtype-jazz" define-macro ("macro") 94 24 94 38 ("7")}
      {Lisp-Entry "%%object?" define-macro ("macro") 97 24 97 33 ("expr")}
      {Lisp-Entry "%%object" define-macro ("macro") 100 24 100 32 ("%%register-instance" "%%subtype-jazz" ",@rest" ",cls" "##vector" "##subtype-set!" ",obj" "jazz.generate-symbol" "obj" "let" "jazz.instances-statistics?" "if" "cls" "lambda" "jazz.with-uniqueness" "rest" "class")}
      {Lisp-Entry "%%make-object" define-macro ("macro") 110 24 110 37 ("%%register-instance" ",cls" "%%set-object-class" "%%subtype-jazz" ",size" "%%make-vector" "##subtype-set!" ",obj" "jazz.generate-symbol" "obj" "let" "cls" "lambda" "jazz.with-uniqueness" "size" "class")}
      {Lisp-Entry "%%object-length" define-macro ("macro") 119 24 119 39 (",object" "##vector-length" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "obj" "lambda" "jazz.with-uniqueness" "jazz.debug-core?" "if" "object")}
      {Lisp-Entry "%%object-ref" define-macro ("macro") 127 24 127 36 (",object" ",n" "##vector-ref" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "rnk" "obj" "lambda" "jazz.with-uniqueness" "jazz.debug-core?" "if" "n" "object")}
      {Lisp-Entry "%%object-set!" define-macro ("syntax") 140 24 140 37 (",object" ",value" ",n" "##vector-set!" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "rnk" "obj" "jazz.with-uniqueness" "jazz.debug-core?" "if" "value" "%%cddr" "%%car" "n" "%%source-code" "%%cadr" "object" "let" "src" "lambda")}
      {Lisp-Entry "%%object?" define-macro ("macro") 158 23 158 32 ("expr")}
      {Lisp-Entry "%%object" define-macro ("macro") 163 23 163 31 ("rest")}
      {Lisp-Entry "%%make-object" define-macro ("macro") 166 23 166 36 ("%%object-marker" "0" "%%object-set!" ",size" "%%make-vector" ",object" "jazz.generate-symbol" "object" "let" "size")}
      {Lisp-Entry "%%object-length" define-macro ("macro") 172 23 172 38 ("vector")}
      {Lisp-Entry "%%object-ref" define-macro ("macro") 175 23 175 35 ("n" "vector")}
      {Lisp-Entry "%%object-set!" define-macro ("macro") 178 23 178 36 ("value" "n" "vector")}}})
"output"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "output.scm"} 1257473856
    {Lisp-Entry "core.class.runtime.output" unit #f 37 16 37 41 ("jazz.print-jazz" "display" "'display" "eq?" "if" "detail" "let" "style" "port" "object" "jazz.print-hook" "jazz.dialect.language.object.Object.print" ":reader" "':reader" "jazz.write" ":human" "':human" "jazz.output-value" "output" "value" "lambda" "jazz.display" "set!")
      {Lisp-Entry "jazz.output-mode" define #f 40 8 40 24 ("':reader")}
      {Lisp-Entry "jazz.print" define #f 54 9 54 19 ("jazz.error" "else" "write" ":describe" ":text" ":reader" "display" ":human" "case" "detail" "output" "value")}
      {Lisp-Entry "jazz.->string" define #f 61 9 61 22 ("get-output-string" "jazz.output-mode" "jazz.output-value" "open-output-string" "output" "let" "else" "%%values?" "%%unspecified?" "cond" "value")}
      {Lisp-Entry "jazz.output-value" define #f 72 9 72 26 ("jazz.print-jazz" "else" "jazz.print" "jazz.primitive?" "jazz.output-list" "%%pair?" "%%null?" "or" "cond" "detail" "output" "value")}
      {Lisp-Entry "jazz.output-list" define #f 81 9 81 25 ("jazz.output-list-content" "display" "detail" "output" "lst")}
      {Lisp-Entry "jazz.output-list-content" define #f 87 9 87 33 ("begin" "display" "%%pair?" "%%cdr" "set!" "%%car" "jazz.output-value" "and" "%%while" "done?" "scan" "let" "%%null?" "%%not" "if" "detail" "output" "lst")}
      {Lisp-Entry "jazz.debug" define #f 103 9 103 19 ("force-output" "newline" "%%cdr" "expr" "lambda" "for-each" "%%car" "jazz.->string" "display" "%%not-null?" "%%when" "console-port" "port" "let" "rest")}
      {Lisp-Entry "jazz.debug-string" define #f 115 9 115 26 ("force-output" "newline" "display" "console-port" "port" "let" "str")}
      {Lisp-Entry "jazz.terminal" define #f 122 8 122 21 ("jazz.debug")}
      {Lisp-Entry "jazz.terminal-string" define #f 126 8 126 28 ("jazz.debug-string")}
      {Lisp-Entry "jazz.terminal-port" define #f 130 9 130 27 ("console-port")}
      {Lisp-Entry "jazz.bootstrap-output-value" define #f 134 9 134 36 ("jazz.->string" "display" "output" "value")}
      {Lisp-Entry "jazz.pretty-print" define #f 140 13 140 30 ("pretty-print" "apply" "rest" "expr")}
      {Lisp-Entry "jazz.pretty-print" define #f 144 13 144 30 ("pretty-print" "apply" "rest" "expr")}
      {Lisp-Entry "jazz.pretty-print" define #f 148 12 148 29 ("newline" "display" "rest" "expr")}
      {Lisp-Entry "jazz.dialect.language.object.Object.print" define #f 158 8 158 49 ()}
      {Lisp-Entry "jazz.print-jazz" define #f 164 9 164 24 ("jazz.print-serial" "jazz.print-object" "2" "0" "%%class-dispatch" "jazz.dialect.language.object.Object.print" "jazz.use-print?" "if" "detail" "output" "object")}}})
"output-hook"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "output-hook.scm"} 1257473855
    {Lisp-Entry "core.class.runtime.output-hook" unit #f 37 16 37 46 ("##default-wr" "else" "jazz.writeenv-style" "jazz.writeenv-port" "##jazz?" "and" "cond" "obj" "we" "lambda" "##wr" "jazz.print-hook" "set!")
      {Lisp-Entry "jazz.print-hook" define #f 42 12 42 27 ()}}})
"reader"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "reader.scm"} 1257473857
    {Lisp-Entry "core.base.runtime.reader" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.read-source-all" define #f 40 9 40 29 ("%%vector-ref" "%%source-code" "%%cdr" "jazz.readtable-start-syntax" "##unwrap-datum" "##wrap-datum" "%%current-readtable" "%%read-all-as-a-begin-expr-from-port" "begin-vector" "let" "%%input-port-column-set!" "1" "%%fx+" "%%input-port-line-set!" "lambda" "%%input-port-names-set!" "if" "col" "line" "container" "#!optional" "port")}
      {Lisp-Entry "jazz.read-source-first" define #f 59 9 59 31 ("jazz.read-source-all" "%%car" "col" "line" "container" "#!optional" "port")}}})
"runtime"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "runtime.scm"} 1257474375
    {Lisp-Entry "core.class.runtime.runtime" unit #f 37 16 37 42 ("jazz.Queue" "jazz.Method-Node" "jazz.Method" "jazz.Property" "jazz.Slot" "jazz.Field" "jazz.Interface" "4" "3" "2" "1" "0" "jazz.specialtypes" "jazz.subtype-boxvalues" "jazz.subtype-f64vector" "jazz.subtype-f32vector" "jazz.subtype-u64vector" "jazz.subtype-s64vector" "jazz.subtype-u32vector" "jazz.subtype-s32vector" "jazz.subtype-u16vector" "jazz.subtype-s16vector" "jazz.subtype-u8vector" "jazz.subtype-s8vector" "jazz.subtype-foreign" "jazz.subtype-bignum" "jazz.subtype-flonum" "jazz.subtype-string" "jazz.subtype-procedure" "jazz.subtype-continuation" "jazz.subtype-keyword" "jazz.subtype-symbol" "jazz.subtype-cpxnum" "jazz.subtype-ratnum" "jazz.subtype-pair" "jazz.subtype-vector" "jazz.subtypes" "%%vector-set!" "jazz.Unspecified" "jazz.Unspecified-Class" "jazz.EOF" "jazz.EOF-Class" "jazz.Values" "jazz.Values-Class" "jazz.Foreign" "jazz.Foreign-Class" "jazz.Promise" "jazz.Promise-Class" "thread?" "jazz.Thread" "jazz.Thread-Class" "table?" "jazz.Table" "jazz.Table-Class" "jazz.Keyword" "jazz.Keyword-Class" "jazz.Symbol" "jazz.Symbol-Class" "jazz.Procedure" "jazz.Procedure-Class" "jazz.Continuation" "jazz.Continuation-Class" "port?" "jazz.register-structure-type" "jazz.Port" "jazz.Port-Class" "jazz.Structure" "jazz.Structure-Class" "jazz.F64Vector" "jazz.F64Vector-Class" "jazz.F32Vector" "jazz.F32Vector-Class" "jazz.U64Vector" "jazz.U64Vector-Class" "jazz.S64Vector" "jazz.S64Vector-Class" "jazz.U32Vector" "jazz.U32Vector-Class" "jazz.S32Vector" "jazz.S32Vector-Class" "jazz.U16Vector" "jazz.U16Vector-Class" "jazz.S16Vector" "jazz.S16Vector-Class" "jazz.U8Vector" "jazz.U8Vector-Class" "jazz.S8Vector" "jazz.S8Vector-Class" "jazz.Vector" "jazz.Vector-Class" "jazz.String" "jazz.String-Class" "jazz.Pair" "jazz.Pair-Class" "jazz.Null" "jazz.Null-Class" "jazz.List" "jazz.List-Class" "jazz.Sequence" "jazz.Sequence-Class" "jazz.Flonum" "jazz.Flonum-Class" "jazz.Fixnum" "jazz.Fixnum-Class" "jazz.Integer" "jazz.Integer-Class" "jazz.Rational" "jazz.Rational-Class" "jazz.Real" "jazz.Real-Class" "jazz.Complex" "jazz.Complex-Class" "jazz.Number" "jazz.Number-Class" "jazz.Numeric" "jazz.Numeric-Class" "jazz.Char" "jazz.Char-Class" "jazz.Boolean" "jazz.Boolean-Class" "%%set-object-class" "jazz.Object-Class" "jazz.Class" "jazz.Category" "jazz.Type" "jazz.Object" "jazz.encapsulate-class" "%%get-object-class" "%%subclass?" "class" "object" "lambda" "jazz.object-of-class?" "set!")
      {Lisp-Entry "jazz.new-interface-rank" define #f 40 8 40 31 ("0")}
      {Lisp-Entry "jazz.dispatch?" define #f 49 9 49 23 ("%%fx-" "%%string-ref" "%%eqv?" "1" "%%fx>" "%%string-length" "len" "%%symbol->string" "name" "let" "%%symbol?" "and" "symbol")}
      {Lisp-Entry "jazz.dispatch->symbol" define #f 58 9 58 30 ("1" "%%string-length" "%%fx-" "0" "%%substring" "%%string->symbol" "%%symbol->string" "name" "let" "dispatch")}
      {Lisp-Entry "jazz.composite-name?" define #f 63 9 63 29 ("%%symbol->string" "jazz.memstring" "%%symbol?" "and" "symbol")}
      {Lisp-Entry "jazz.compose-name" define #f 68 9 68 26 ("symbol->string" "map" "jazz.join-strings" "%%string->symbol" "rest")}
      {Lisp-Entry "jazz.compose-helper" define #f 72 9 72 28 ("%%symbol->string" "%%string-append" "%%string->symbol" "suffix" "locator")}
      {Lisp-Entry "jazz.split-identifier" define #f 76 9 76 30 ("%%symbol->string" "jazz.split-string" "string->symbol" "map" "%%symbol?" "%%debug-assert" "identifier")}
      {Lisp-Entry "jazz.inspect-object" define #f 86 9 86 28 ("1" "%%fx+" "%%object-ref" "%%vector-set!" "begin" "%%fx<" "if" "0" "n" "iter" "let" "%%make-vector" "content" "%%object-length" "size" "let*" "%%object?" "%%assert" "object")}
      {Lisp-Entry "jazz.Core-Classes" define #f 103 8 103 25 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-core-classes" define #f 107 9 107 30 ("jazz.Core-Classes")}
      {Lisp-Entry "jazz.core-class?" define #f 111 9 111 25 ("jazz.Core-Classes" "%%table-ref" "%%boolean" "name")}
      {Lisp-Entry "jazz.get-core-class" define #f 115 9 115 28 ("jazz.Core-Classes" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-core-class" define #f 119 9 119 28 ("jazz.Core-Classes" "%%table-set!" "class" "name")}
      {Lisp-Entry "jazz.set-core-class-redefined" define #f 123 9 123 38 ("jazz.Core-Classes" "%%table-set!" "class" "name")}
      {Lisp-Entry "jazz.object?" define #f 132 9 132 21 ("%%object?" "expr")}
      {Lisp-Entry "jazz.primitive?" define #f 136 9 136 24 ("%%object?" "%%not" "expr")}
      {Lisp-Entry "jazz.subtype?" define #f 140 9 140 22 ("%%subtype?" "%%boolean" "jazz.type?" "%%assert" "type" "target")}
      {Lisp-Entry "jazz.subcategory?" define #f 145 9 145 26 ("%%subcategory?" "%%boolean" "category" "target")}
      {Lisp-Entry "jazz.subclass?" define #f 149 9 149 23 ("%%subclass?" "%%boolean" "class" "target")}
      {Lisp-Entry "jazz.get-category-descendants" define #f 153 9 153 38 ("%%get-category-descendants" "category")}
      {Lisp-Entry "jazz.get-class-ascendant" define #f 157 9 157 33 ("%%get-class-ascendant" "class")}
      {Lisp-Entry "jazz.collect-type" define #f 166 9 166 26 ("%%is?" "obj" "lambda" "jazz.collect-if" "lst" "type")}
      {Lisp-Entry "jazz.create-class-tables" define #f 172 9 172 33 ("jazz.create-class-class-table" "jazz.create-class-interface-table" "class")}
      {Lisp-Entry "jazz.create-core-class-tables" define #f 177 9 177 38 ("jazz.create-class-class-table" "class")}
      {Lisp-Entry "jazz.create-class-interface-table" define #f 181 9 181 42 ("%%set-class-interface-table" "%%get-category-ancestors" "%%class-of" "jazz.call-into-abstract" "rest" "object" "%%get-method-implementation-rank" "jazz.Method" "%%is?" "field" "field-name" "%%get-category-fields" "%%iterate-table" "category-name" "%%get-category-name" "class-name" "jazz.call-into-incoherent" "category-vtable" "%%get-category-virtual-size" "%%get-interface-rank" "rank" "let*" "jazz.Interface" "%%class-is?" "category" "lambda" "jazz.vector-for-each" "1" "%%fx+" "%%vector-copy" "%%vector-set!" "%%vector-ref" "ascendant-vtable" "%%fx<" "0" "i" "iter" "%%vector-length" "size" "ascendant-interface-table" "%%get-class-ascendant" "ascendant" "jazz.new-interface-rank" "%%make-vector" "vtable" "let" "%%get-class-interface-table" "%%not" "%%when" "class")}
      {Lisp-Entry "jazz.create-class-class-table" define #f 214 9 214 38 ("%%vector-ref" "%%vector-copy" "%%vector-set!" "%%fx<" "0" "i" "iter" "#" "'#" "1" "%%fx+" "%%make-vector" "vtable" "%%vector-length" "size" "ascendant-class-table" "let*" "if" "%%set-class-class-table" "%%get-class-ascendant" "ascendant" "let" "%%get-class-class-table" "%%not" "%%when" "class")}
      {Lisp-Entry "jazz.encapsulate-class" define #f 230 9 230 31 ("jazz.update-core-class" "%%set-class-core-vtable" "%%get-class-core-method-alist" "%%get-class-core-virtual-alist" "jazz.get-method-rank" "%%cdr" "method-implementation" "%%car" "method-name" "method" "lambda" "for-each" "%%vector-ref" "%%vector-set!" "%%fx>=" "1" "%%vector-length" "%%fx-" "n" "iter" "%%get-class-core-vtable" "ascendant-vtable" "%%get-class-ascendant" "ascendant" "%%make-vector" "vtable" "0" "%%fx>" "%%when" "%%length" "vtable-size" "%%get-class-core-virtual-names" "virtual-names" "let" "class")}
      {Lisp-Entry "jazz.update-class" define #f 257 9 257 26 ("jazz.update-class-class-table" "class")}
      {Lisp-Entry "jazz.update-core-class" define #f 261 9 261 31 ("jazz.update-class-class-table" "class")}
      {Lisp-Entry "jazz.update-class-class-table" define #f 265 9 265 38 ("%%get-category-descendants" "descendant" "%%vector-set!" "%%get-method-implementation-tree" "%%get-method-node-implementation" "implementation" "%%get-method-implementation-rank" "implementation-rank" "field" "lambda" "for-each" "%%vector-ref" "jazz.resize-vector" "implementation-table" "%%get-class-class-table" "class-table" "let*" "iter" "%%get-category-virtual-size" "class-virtual-size" "%%get-class-level" "class-rank" "%%not-null?" "%%when" "update-class-class-root-methods" "added-methods" "let" "class")
        {Lisp-Entry "update-class-class-root-methods" define #f 266 11 266 42 ("%%cons" "set!" "%%set-method-category-rank" "begin" "%%get-category-descendants" "descendant" "for-each" "%%vector-set!" "%%eq?" "implementation-table" "iter" "%%neq?" "%%get-method-implementation-tree" "%%get-method-node-implementation" "new-implementation" "old-implementation" "%%get-method-implementation-rank" "implementation-rank" "let" "%%get-method-category-rank" "if" "jazz.virtual-method?" "%%when" "field" "key" "lambda" "%%get-category-fields" "%%iterate-table" "added-methods" "%%vector-ref" "root-implementation-table" "%%get-class-level" "class-rank" "%%get-class-class-table" "class-table" "let*" "class")}}
      {Lisp-Entry "jazz.new-core-class" define #f 316 9 316 28 ("jazz.create-core-class-tables" "%%get-category-descendants" "%%cons" "%%set-category-descendants" "%%when" "jazz.compute-core-class-ancestors" "%%list->vector" "%%set-category-ancestors" "%%get-class-core-virtual-names" "1" "%%get-class-level" "%%fx+" "if" "0" "%%object" "core-class" "let" "instance-size" "slot-names" "ascendant" "fields" "name" "class")}
      {Lisp-Entry "jazz.compute-core-class-ancestors" define #f 347 9 347 42 ("%%get-category-ancestors" "%%vector->list" "%%append" "%%list" "%%not" "if" "ascendant" "class")}
      {Lisp-Entry "jazz.validate-inherited-slots" define #f 353 9 353 38 ("jazz.error" "core-class-all-slot-names" "%%equal?" "%%null?" "%%not" "and" "or" "if" "inherited-slot-names" "ascendant" "name")
        {Lisp-Entry "core-class-all-slots" define #f 354 11 354 31 ("core-class-all-slots" "%%append" "%%not" "if" "%%get-class-ascendant" "ascendant" "%%get-class-instance-slots" "slots" "let" "core-class")}
        {Lisp-Entry "core-class-all-slot-names" define #f 361 11 361 36 ("%%get-class-instance-slots" "%%get-field-name" "slot" "lambda" "map" "symbol?" "jazz.some?" "if" "core-class-all-slots" "all-slots" "let" "core-class")}}
      {Lisp-Entry "jazz.Object" define-class ("class runtime") 380 27 380 38 ()}
      {Lisp-Entry "jazz.get-object-slot" define #f 383 9 383 29 ("jazz.unspecified" "%%object-ref" "%%integer?" "if" "%%object?" "%%debug-assert" "slot-offset" "object")}
      {Lisp-Entry "jazz.set-object-slot" define #f 390 9 390 29 ("%%object-set!" "%%integer?" "%%object?" "%%debug-assert" "value" "slot-offset" "object")}
      {Lisp-Entry "jazz.classname->string" define #f 396 9 396 31 ("%%get-category-name" "%%symbol->string" "%%null?" "if" "class")}
      {Lisp-Entry "jazz.print-object" generic/specific ("jazz.Object~virtual-runtime") 402 30 402 47 ("detail" "output")}
      {Lisp-Entry "jazz.print-object" generic/specific ("jazz.Object") 405 21 405 38 ("object" "jazz.print-serial" "detail" "output")}
      {Lisp-Entry "jazz.print-serial" define #f 409 9 409 26 ("display" "object->serial-number" "serial" "let" "output" "object")}
      {Lisp-Entry "jazz.Type" define-class ("class runtime") 424 27 424 36 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Type~virtual-runtime") 427 30 427 43 ("object")}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Type") 430 21 430 34 ("%%class-of" "type" "jazz.of-subtype?" "object")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Type~virtual-runtime") 434 30 434 46 ("subtype")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Type") 437 21 437 37 ("type" "jazz.error" "subtype")}
      {Lisp-Entry "jazz.category-type?" generic/specific ("jazz.Type~virtual-runtime") 441 30 441 49 ()}
      {Lisp-Entry "jazz.category-type?" generic/specific ("jazz.Type") 444 21 444 40 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Type~virtual-runtime") 448 30 448 49 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Type") 451 21 451 40 ("type" "jazz.error")}
      {Lisp-Entry "jazz.emit-type" generic/specific ("jazz.Type~virtual-runtime") 455 30 455 44 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-type" generic/specific ("jazz.Type") 458 21 458 35 ("type" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Type~virtual-runtime") 462 30 462 44 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Type") 465 21 465 35 (",locator" ",value" "%%is?" "type" "jazz.emit-type" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Type~virtual-runtime") 470 30 470 45 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Type") 473 21 473 36 (",locator" ",value" "jazz.type-error" "jazz.emit-test" "%%not" "if" "type" "jazz.emit-type" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.bootstrap-type?" define #f 480 9 480 29 ("type-class" "object")}
      {Lisp-Entry "jazz.type?" define #f 485 9 485 19 ("jazz.Type" "%%is?" "%%object?" "and" "object")}
      {Lisp-Entry "jazz.structure-types" define #f 498 8 498 28 ()}
      {Lisp-Entry "jazz.register-structure-type" define #f 502 9 502 37 ("%%cons" "jazz.structure-types" "set!" "type" "test")}
      {Lisp-Entry "jazz.structure-type" define #f 506 9 506 28 ("%%cdr" "%%cdar" "%%caar" "jazz.Structure" "%%null?" "if" "jazz.structure-types" "scan" "iter" "let" "object")}
      {Lisp-Entry "jazz.Category" define-class ("class runtime") 520 27 520 40 ()}
      {Lisp-Entry "jazz.category?" define #f 523 9 523 23 ("jazz.category-type?" "jazz.type?" "and" "object")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Category") 528 21 528 37 ("%%get-category-ancestors" "type" "jazz.vector-memq?" "jazz.category-type?" "and" "subtype")}
      {Lisp-Entry "jazz.category-type?" generic/specific ("jazz.Category") 533 21 533 40 ()}
      {Lisp-Entry "jazz.emit-type" generic/specific ("jazz.Category") 537 21 537 35 ("type" "%%get-category-name" "environment" "source-declaration")}
      {Lisp-Entry "jazz.update-category" generic/specific ("jazz.Category~virtual-runtime") 541 30 541 50 ()}
      {Lisp-Entry "jazz.update-category" generic/specific ("jazz.Category") 544 21 544 41 ()}
      {Lisp-Entry "jazz.is?" define #f 548 9 548 17 ("%%is?" "%%boolean" "category" "object")}
      {Lisp-Entry "jazz.is-not?" define #f 552 9 552 21 ("%%is?" "%%not" "%%boolean" "category" "object")}
      {Lisp-Entry "jazz.get-category-name" define #f 556 9 556 31 ("%%get-category-name" "jazz.category?" "%%debug-assert" "category")}
      {Lisp-Entry "jazz.add-field" define #f 561 9 561 23 ("%%get-field-name" "%%set-category-field" "field" "category")}
      {Lisp-Entry "jazz.Class" define-class ("class runtime") 573 27 573 37 ()}
      {Lisp-Entry "jazz.new-class" define #f 576 9 576 23 ("%%class-dispatch" "jazz.create-class-tables" "%%get-category-descendants" "%%cons" "%%set-category-descendants" "%%when" "jazz.compute-class-ancestors" "%%list->vector" "%%set-category-ancestors" "%%get-class-core-vtable" "1" "%%get-class-level" "%%fx+" "jazz.object-size" "%%get-class-instance-size" "%%get-class-instance-slots" "if" "0" "eq?" "test:" "%%make-table" "jazz.allocate-class" "class" "let" "interfaces" "ascendant" "name" "class-of-class")}
      {Lisp-Entry "jazz.compute-class-ancestors" define #f 599 9 599 37 ("add-classes" "%%get-interface-ascendants" "%%cons" "set!" "%%memq" "%%not" "else" "%%get-class-interfaces" "for-each" "%%when" "%%get-class-ascendant" "%%class?" "cond" "category" "add-interfaces" "ancestors" "let" "interfaces" "ascendant" "class")}
      {Lisp-Entry "jazz.class?" define #f 618 9 618 20 ("jazz.Class" "%%class-is?" "object")}
      {Lisp-Entry "jazz.i-class-of" define #f 622 9 622 24 ("%%i-class-of-impl" "expr")}
      {Lisp-Entry "jazz.class-of" define #f 626 9 626 22 ("%%class-of-impl" "expr")}
      {Lisp-Entry "jazz.class-of-native" define #f 633 9 633 29 ("jazz.error" "jazz.structure-type" "or" "else" "jazz.Unspecified" "%%unspecified?" "jazz.EOF" "%%eof-object?" "jazz.Values" "%%values?" "jazz.Foreign" "%%foreign?" "jazz.Procedure" "%%procedure?" "jazz.Continuation" "%%continuation?" "jazz.Port" "%%port?" "jazz.Keyword" "%%keyword?" "jazz.Symbol" "%%symbol?" "jazz.F64Vector" "%%f64vector?" "jazz.F32Vector" "%%f32vector?" "jazz.U64Vector" "%%u64vector?" "jazz.S64Vector" "%%s64vector?" "jazz.U32Vector" "%%u32vector?" "jazz.S32Vector" "%%s32vector?" "jazz.U16Vector" "%%u16vector?" "jazz.S16Vector" "%%s16vector?" "jazz.U8Vector" "%%u8vector?" "jazz.S8Vector" "%%s8vector?" "jazz.Vector" "%%vector?" "jazz.String" "%%string?" "jazz.Pair" "%%pair?" "jazz.Null" "%%null?" "jazz.Number" "%%number?" "jazz.Complex" "%%complex?" "jazz.Real" "%%real?" "jazz.Rational" "%%rational?" "jazz.Integer" "%%integer?" "jazz.Flonum" "%%flonum?" "jazz.Fixnum" "%%fixnum?" "jazz.Char" "%%char?" "jazz.Boolean" "%%boolean?" "cond" "expr")}
      {Lisp-Entry "jazz.class-subtype?" define #f 671 9 671 28 ("%%class-subtype?" "class" "target")}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Class") 675 21 675 34 ("class" "%%class-of" "%%class-subtype?" "object")}
      {Lisp-Entry "jazz.update-category" generic/specific ("jazz.Class") 679 21 679 41 ("class" "jazz.update-class")}
      {Lisp-Entry "jazz.slot-form?" define #f 683 9 683 24 ("slot" "'slot" "%%car" "%%eq?" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.new" define #f 688 9 688 17 ("0" "%%class-dispatch" "apply" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "rest" "class")}
      {Lisp-Entry "jazz.new0" define #f 696 9 696 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "class")}
      {Lisp-Entry "jazz.new1" define #f 704 9 704 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "arg1" "class")}
      {Lisp-Entry "jazz.new2" define #f 712 9 712 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "arg2" "arg1" "class")}
      {Lisp-Entry "jazz.iterate-descendants-tree" define #f 720 9 720 38 ("%%get-category-descendants" "for-each" "iter" "let" "proc" "class")}
      {Lisp-Entry "jazz.Object-Class" define-class ("class runtime") 734 27 734 44 ()}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Object-Class") 737 21 737 37 ("nextmethod" "class" "%%object-class?" "if" "subtype")}
      {Lisp-Entry "jazz.Boolean-Class" define-class ("class runtime") 763 27 763 45 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Boolean-Class") 766 21 766 34 ("%%boolean?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Boolean-Class") 770 21 770 40 ("'bool")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Boolean-Class") 774 21 774 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Boolean" define-class ("class runtime") 781 27 781 39 ()}
      {Lisp-Entry "jazz.Char-Class" define-class ("class runtime") 792 27 792 42 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Char-Class") 795 21 795 34 ("%%char?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Char-Class") 799 21 799 40 ("'char")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Char-Class") 803 21 803 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Char" define-class ("class runtime") 810 27 810 36 ()}
      {Lisp-Entry "jazz.Numeric-Class" define-class ("class runtime") 821 27 821 45 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Numeric-Class") 824 21 824 40 ("'numeric")}
      {Lisp-Entry "jazz.Numeric" define-class ("class runtime") 831 27 831 39 ()}
      {Lisp-Entry "jazz.Number-Class" define-class ("class runtime") 842 27 842 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Number-Class") 845 21 845 34 ("%%number?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Number-Class") 849 21 849 40 ("'number")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Number-Class") 853 21 853 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Number" define-class ("class runtime") 860 27 860 38 ()}
      {Lisp-Entry "jazz.Complex-Class" define-class ("class runtime") 871 27 871 45 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Complex-Class") 874 21 874 34 ("%%complex?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Complex-Class") 878 21 878 40 ("'complex")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Complex-Class") 882 21 882 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Complex" define-class ("class runtime") 889 27 889 39 ()}
      {Lisp-Entry "jazz.Real-Class" define-class ("class runtime") 900 27 900 42 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Real-Class") 903 21 903 34 ("%%real?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Real-Class") 907 21 907 40 ("'real")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Real-Class") 911 21 911 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Real" define-class ("class runtime") 918 27 918 36 ()}
      {Lisp-Entry "jazz.Rational-Class" define-class ("class runtime") 929 27 929 46 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Rational-Class") 932 21 932 34 ("%%rational?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Rational-Class") 936 21 936 40 ("'rational")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Rational-Class") 940 21 940 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Rational" define-class ("class runtime") 947 27 947 40 ()}
      {Lisp-Entry "jazz.Integer-Class" define-class ("class runtime") 958 27 958 45 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Integer-Class") 961 21 961 34 ("%%integer?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Integer-Class") 965 21 965 40 ("'int")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Integer-Class") 969 21 969 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Integer" define-class ("class runtime") 976 27 976 39 ()}
      {Lisp-Entry "jazz.Fixnum-Class" define-class ("class runtime") 987 27 987 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Fixnum-Class") 990 21 990 34 ("%%fixnum?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Fixnum-Class") 994 21 994 40 ("'fx")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Fixnum-Class") 998 21 998 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Fixnum" define-class ("class runtime") 1005 27 1005 38 ()}
      {Lisp-Entry "jazz.Flonum-Class" define-class ("class runtime") 1016 27 1016 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Flonum-Class") 1019 21 1019 34 ("%%flonum?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Flonum-Class") 1023 21 1023 40 ("'fl")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Flonum-Class") 1027 21 1027 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Flonum" define-class ("class runtime") 1034 27 1034 38 ()}
      {Lisp-Entry "jazz.Sequence-Class" define-class ("class runtime") 1045 27 1045 46 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Sequence-Class") 1048 21 1048 40 ("'sequence")}
      {Lisp-Entry "jazz.Sequence" define-class ("class runtime") 1055 27 1055 40 ()}
      {Lisp-Entry "jazz.List-Class" define-class ("class runtime") 1066 27 1066 42 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.List-Class") 1069 21 1069 40 ("'list")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.List-Class") 1073 21 1073 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.List" define-class ("class runtime") 1080 27 1080 36 ()}
      {Lisp-Entry "jazz.Null-Class" define-class ("class runtime") 1091 27 1091 42 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Null-Class") 1094 21 1094 34 ("%%null?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Null-Class") 1098 21 1098 40 ("'null")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Null-Class") 1102 21 1102 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Null" define-class ("class runtime") 1109 27 1109 36 ()}
      {Lisp-Entry "jazz.Pair-Class" define-class ("class runtime") 1120 27 1120 42 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Pair-Class") 1123 21 1123 34 ("%%pair?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Pair-Class") 1127 21 1127 40 ("'pair")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Pair-Class") 1131 21 1131 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Pair" define-class ("class runtime") 1138 27 1138 36 ()}
      {Lisp-Entry "jazz.String-Class" define-class ("class runtime") 1149 27 1149 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.String-Class") 1152 21 1152 34 ("%%string?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.String-Class") 1156 21 1156 40 ("'string")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.String-Class") 1160 21 1160 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.String" define-class ("class runtime") 1167 27 1167 38 ()}
      {Lisp-Entry "jazz.Vector-Class" define-class ("class runtime") 1178 27 1178 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Vector-Class") 1181 21 1181 34 ("%%vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Vector-Class") 1185 21 1185 40 ("'vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Vector-Class") 1189 21 1189 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Vector" define-class ("class runtime") 1196 27 1196 38 ()}
      {Lisp-Entry "jazz.S8Vector-Class" define-class ("class runtime") 1207 27 1207 46 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.S8Vector-Class") 1210 21 1210 34 ("%%s8vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.S8Vector-Class") 1214 21 1214 40 ("'s8vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.S8Vector-Class") 1218 21 1218 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S8Vector" define-class ("class runtime") 1225 27 1225 40 ()}
      {Lisp-Entry "jazz.U8Vector-Class" define-class ("class runtime") 1236 27 1236 46 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.U8Vector-Class") 1239 21 1239 34 ("%%u8vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.U8Vector-Class") 1243 21 1243 40 ("'u8vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.U8Vector-Class") 1247 21 1247 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U8Vector" define-class ("class runtime") 1254 27 1254 40 ()}
      {Lisp-Entry "jazz.S16Vector-Class" define-class ("class runtime") 1265 27 1265 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.S16Vector-Class") 1268 21 1268 34 ("%%s16vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.S16Vector-Class") 1272 21 1272 40 ("'s16vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.S16Vector-Class") 1276 21 1276 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S16Vector" define-class ("class runtime") 1283 27 1283 41 ()}
      {Lisp-Entry "jazz.U16Vector-Class" define-class ("class runtime") 1294 27 1294 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.U16Vector-Class") 1297 21 1297 34 ("%%u16vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.U16Vector-Class") 1301 21 1301 40 ("'u16vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.U16Vector-Class") 1305 21 1305 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U16Vector" define-class ("class runtime") 1312 27 1312 41 ()}
      {Lisp-Entry "jazz.S32Vector-Class" define-class ("class runtime") 1323 27 1323 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.S32Vector-Class") 1326 21 1326 34 ("%%s32vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.S32Vector-Class") 1330 21 1330 40 ("'s32vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.S32Vector-Class") 1334 21 1334 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S32Vector" define-class ("class runtime") 1341 27 1341 41 ()}
      {Lisp-Entry "jazz.U32Vector-Class" define-class ("class runtime") 1352 27 1352 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.U32Vector-Class") 1355 21 1355 34 ("%%u32vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.U32Vector-Class") 1359 21 1359 40 ("'u32vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.U32Vector-Class") 1363 21 1363 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U32Vector" define-class ("class runtime") 1370 27 1370 41 ()}
      {Lisp-Entry "jazz.S64Vector-Class" define-class ("class runtime") 1381 27 1381 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.S64Vector-Class") 1384 21 1384 34 ("%%s64vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.S64Vector-Class") 1388 21 1388 40 ("'s64vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.S64Vector-Class") 1392 21 1392 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S64Vector" define-class ("class runtime") 1399 27 1399 41 ()}
      {Lisp-Entry "jazz.U64Vector-Class" define-class ("class runtime") 1410 27 1410 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.U64Vector-Class") 1413 21 1413 34 ("%%u64vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.U64Vector-Class") 1417 21 1417 40 ("'u64vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.U64Vector-Class") 1421 21 1421 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U64Vector" define-class ("class runtime") 1428 27 1428 41 ()}
      {Lisp-Entry "jazz.F32Vector-Class" define-class ("class runtime") 1439 27 1439 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.F32Vector-Class") 1442 21 1442 34 ("%%f32vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.F32Vector-Class") 1446 21 1446 40 ("'f32vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.F32Vector-Class") 1450 21 1450 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.F32Vector" define-class ("class runtime") 1457 27 1457 41 ()}
      {Lisp-Entry "jazz.F64Vector-Class" define-class ("class runtime") 1468 27 1468 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.F64Vector-Class") 1471 21 1471 34 ("%%f64vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.F64Vector-Class") 1475 21 1475 40 ("'f64vector")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.F64Vector-Class") 1479 21 1479 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.F64Vector" define-class ("class runtime") 1486 27 1486 41 ()}
      {Lisp-Entry "jazz.Structure-Class" define-class ("class runtime") 1497 27 1497 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Structure-Class") 1500 21 1500 34 ("%%structure?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Structure-Class") 1504 21 1504 40 ("'structure")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Structure-Class") 1508 21 1508 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Structure" define-class ("class runtime") 1515 27 1515 41 ()}
      {Lisp-Entry "jazz.Port-Class" define-class ("class runtime") 1526 27 1526 42 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Port-Class") 1529 21 1529 34 ("%%port?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Port-Class") 1533 21 1533 40 ("'port")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Port-Class") 1537 21 1537 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Port" define-class ("class runtime") 1544 27 1544 36 ()}
      {Lisp-Entry "jazz.Continuation-Class" define-class ("class runtime") 1558 27 1558 50 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Continuation-Class") 1561 21 1561 34 ("%%continuation?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Continuation-Class") 1565 21 1565 40 ("'continuation")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Continuation-Class") 1569 21 1569 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Continuation" define-class ("class runtime") 1576 27 1576 44 ()}
      {Lisp-Entry "jazz.Procedure-Class" define-class ("class runtime") 1587 27 1587 47 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Procedure-Class") 1590 21 1590 34 ("%%procedure?" "object")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Procedure-Class") 1594 21 1594 37 ("class" "nextmethod" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Procedure-Class") 1600 21 1600 40 ("'procedure")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Procedure-Class") 1604 21 1604 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Procedure" define-class ("class runtime") 1611 27 1611 41 ()}
      {Lisp-Entry "jazz.Symbol-Class" define-class ("class runtime") 1622 27 1622 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Symbol-Class") 1625 21 1625 34 ("%%symbol?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Symbol-Class") 1629 21 1629 40 ("'symbol")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Symbol-Class") 1633 21 1633 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Symbol" define-class ("class runtime") 1640 27 1640 38 ()}
      {Lisp-Entry "jazz.Keyword-Class" define-class ("class runtime") 1651 27 1651 45 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Keyword-Class") 1654 21 1654 34 ("%%keyword?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Keyword-Class") 1658 21 1658 40 ("'keyword")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Keyword-Class") 1662 21 1662 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Keyword" define-class ("class runtime") 1669 27 1669 39 ()}
      {Lisp-Entry "jazz.Table-Class" define-class ("class runtime") 1680 27 1680 43 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Table-Class") 1683 21 1683 34 ("%%table?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Table-Class") 1687 21 1687 40 ("'table")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Table-Class") 1691 21 1691 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Table" define-class ("class runtime") 1698 27 1698 37 ()}
      {Lisp-Entry "jazz.Thread-Class" define-class ("class runtime") 1712 27 1712 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Thread-Class") 1715 21 1715 34 ("%%thread?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Thread-Class") 1719 21 1719 40 ("'thread")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Thread-Class") 1723 21 1723 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Thread" define-class ("class runtime") 1730 27 1730 38 ()}
      {Lisp-Entry "jazz.Promise-Class" define-class ("class runtime") 1744 27 1744 45 ()}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Promise-Class") 1747 21 1747 40 ("'promise")}
      {Lisp-Entry "jazz.Promise" define-class ("class runtime") 1754 27 1754 39 ()}
      {Lisp-Entry "jazz.Foreign-Class" define-class ("class runtime") 1765 27 1765 45 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Foreign-Class") 1768 21 1768 34 ("%%foreign?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Foreign-Class") 1772 21 1772 40 ("'foreign")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Foreign-Class") 1776 21 1776 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Foreign" define-class ("class runtime") 1783 27 1783 39 ()}
      {Lisp-Entry "jazz.Values-Class" define-class ("class runtime") 1794 27 1794 44 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Values-Class") 1797 21 1797 34 ("%%values?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Values-Class") 1801 21 1801 40 ("'values")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Values-Class") 1805 21 1805 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Values" define-class ("class runtime") 1812 27 1812 38 ()}
      {Lisp-Entry "jazz.EOF-Class" define-class ("class runtime") 1823 27 1823 41 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.EOF-Class") 1826 21 1826 34 ("%%eof-object?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.EOF-Class") 1830 21 1830 40 ("'eof")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.EOF-Class") 1834 21 1834 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.EOF" define-class ("class runtime") 1841 27 1841 35 ()}
      {Lisp-Entry "jazz.Unspecified-Class" define-class ("class runtime") 1852 27 1852 49 ()}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Unspecified-Class") 1855 21 1855 34 ("%%unspecified?" "object")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Unspecified-Class") 1859 21 1859 40 ("'unspecified")}
      {Lisp-Entry "jazz.emit-test" generic/specific ("jazz.Unspecified-Class") 1863 21 1863 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Unspecified" define-class ("class runtime") 1870 27 1870 43 ()}
      {Lisp-Entry "jazz.subtypes" define #f 1883 12 1883 25 ("32" "%%make-vector")}
      {Lisp-Entry "jazz.specialtypes" define #f 1886 12 1886 29 ("16" "%%make-vector")}
      {Lisp-Entry "jazz.table-type" define #f 1890 12 1890 27 ("make-table" "%%structure-type")}
      {Lisp-Entry "jazz.port-type" define #f 1894 12 1894 26 ("open-output-string" "%%structure-type")}
      {Lisp-Entry "jazz.thread-type" define #f 1898 12 1898 28 ("current-thread" "%%structure-type")}
      {Lisp-Entry "jazz.Interface" define-class ("class runtime") 1939 27 1939 41 ()}
      {Lisp-Entry "jazz.new-interface" define #f 1942 9 1942 27 ("%%get-category-descendants" "%%cons" "%%set-category-descendants" "ascendant" "lambda" "for-each" "compute-interface-ancestors" "%%list->vector" "%%set-category-ancestors" "1" "%%fx+" "set!" "jazz.new-interface-rank" "0" "eq?" "test:" "%%make-table" "jazz.allocate-interface" "interface" "let" "ascendants" "name" "class")
        {Lisp-Entry "compute-interface-ancestors" define #f 1943 11 1943 38 ("%%list" "%%get-category-ancestors" "%%vector->list" "ascendant" "lambda" "map" "%%cons" "append" "%%apply" "jazz.remove-duplicates" "ascendants" "interface")}}
      {Lisp-Entry "jazz.interface?" define #f 1959 9 1959 24 ("jazz.Interface" "%%class-is?" "object")}
      {Lisp-Entry "jazz.of-type?" generic/specific ("jazz.Interface") 1974 21 1974 34 ("%%class-of" "interface" "jazz.of-subtype?" "object")}
      {Lisp-Entry "jazz.update-category" generic/specific ("jazz.Interface") 1978 21 1978 41 ("interface" "jazz.update-interface")}
      {Lisp-Entry "jazz.update-interface" define #f 1982 9 1982 30 ("%%get-category-descendants" "descendant" "%%vector-set!" "%%get-method-implementation-tree" "%%get-method-node-implementation" "implementation" "%%get-method-implementation-rank" "implementation-rank" "field" "lambda" "for-each" "%%get-category-virtual-size" "%%vector-ref" "jazz.resize-vector" "implementation-table" "%%get-class-interface-table" "interface-table" "let*" "jazz.Class" "%%class-is?" "category" "iter" "%%get-interface-rank" "interface-rank" "%%not-null?" "%%when" "update-interface-root-methods" "added-methods" "let" "interface")
        {Lisp-Entry "update-interface-root-methods" define #f 1983 11 1983 40 ("%%cons" "set!" "%%set-method-category-rank" "%%get-method-category-rank" "%%not" "jazz.virtual-method?" "and" "%%when" "field" "key" "lambda" "%%get-category-fields" "%%iterate-table" "added-methods" "%%get-interface-rank" "interface-rank" "let*" "interface")}}
      {Lisp-Entry "jazz.Field" define-class ("class runtime") 2020 27 2020 37 ()}
      {Lisp-Entry "jazz.field?" define #f 2023 9 2023 20 ("jazz.Field" "%%class-is?" "object")}
      {Lisp-Entry "jazz.field-name" define #f 2027 9 2027 24 ("%%get-field-name" "field")}
      {Lisp-Entry "jazz.find-field" define #f 2031 9 2031 24 ("jazz.find-field" "and" "%%get-class-ascendant" "ascendant" "let" "%%get-category-field" "or" "field-name" "category")}
      {Lisp-Entry "jazz.require-object-field" define #f 2038 9 2038 34 ("%%get-category-name" "jazz.error" "%%not" "if" "jazz.find-field" "field" "%%get-object-class" "class" "let*" "name" "object")}
      {Lisp-Entry "jazz.Slot" define-class ("class runtime") 2054 27 2054 36 ()}
      {Lisp-Entry "jazz.new-slot" define #f 2057 9 2057 22 ("jazz.Slot" "jazz.allocate-slot" "slot-initialize" "slot-offset" "slot-name")}
      {Lisp-Entry "jazz.slot?" define #f 2061 9 2061 19 ("jazz.Slot" "%%class-is?" "object")}
      {Lisp-Entry "jazz.add-slot" define #f 2065 9 2065 22 ("1" "%%fx+" "%%set-class-instance-size" "%%when" "%%get-class-instance-slots" "%%set-class-instance-slots" "%%list" "%%get-class-slots" "%%append" "%%set-class-slots" "jazz.add-field" "jazz.new-slot" "slot" "and" "slot-offset" "%%get-class-instance-size" "instance-size" "let*" "%%get-category-field" "or" "slot-allocate?" "slot-initialize" "slot-name" "class")}
      {Lisp-Entry "jazz.remove-own-slots" define #f 2079 9 2079 30 ("%%length" "%%get-class-instance-size" "%%fx-" "%%set-class-instance-size" "if" "%%set-class-instance-slots" "%%set-class-slots" "%%get-class-instance-slots" "actual" "%%get-class-ascendant" "ascendant" "let" "class")}
      {Lisp-Entry "jazz.slot-value" define #f 2087 9 2087 24 ("jazz.find-slot-offset" "jazz.get-object-slot" "slot-name" "object")}
      {Lisp-Entry "jazz.set-slot-value" define #f 2091 9 2091 28 ("jazz.find-slot-offset" "jazz.set-object-slot" "value" "slot-name" "object")}
      {Lisp-Entry "jazz.find-slot-offset" define #f 2095 9 2095 30 ("%%get-slot-offset" "jazz.require-object-field" "slot" "let" "%%object?" "%%debug-assert" "slot-name" "object")}
      {Lisp-Entry "jazz.initialize-slots" define #f 2101 9 2101 30 ("%%object-set!" "%%when" "%%get-slot-initialize" "initialize" "%%get-slot-offset" "offset" "let" "slot" "lambda" "for-each" "%%get-class-instance-slots" "slots" "%%get-object-class" "class" "let*" "object")}
      {Lisp-Entry "jazz.Property" define-class ("class runtime") 2120 27 2120 40 ()}
      {Lisp-Entry "jazz.new-property" define #f 2123 9 2123 26 ("jazz.Property" "jazz.allocate-property" "slot-setter" "slot-getter" "slot-initialize" "slot-offset" "slot-name")}
      {Lisp-Entry "jazz.property?" define #f 2127 9 2127 23 ("jazz.Property" "%%class-is?" "object")}
      {Lisp-Entry "jazz.property-getter" define #f 2131 9 2131 29 ("%%get-property-getter" "property")}
      {Lisp-Entry "jazz.property-setter" define #f 2135 9 2135 29 ("%%get-property-setter" "property")}
      {Lisp-Entry "jazz.all-properties" define #f 2139 9 2139 28 ("else" "%%cdr" "%%cons" "%%car" "jazz.property?" "%%null?" "cond" "%%get-class-instance-slots" "slots" "iter" "let" "category")}
      {Lisp-Entry "jazz.add-property" define #f 2146 9 2146 26 ("1" "%%fx+" "%%set-class-instance-size" "%%when" "%%get-class-instance-slots" "%%set-class-instance-slots" "%%list" "%%get-class-slots" "%%append" "%%set-class-slots" "jazz.add-field" "jazz.new-property" "slot" "and" "slot-offset" "%%get-class-instance-size" "instance-size" "let*" "%%get-category-field" "or" "slot-setter" "slot-getter" "slot-allocate?" "slot-initialize" "slot-name" "class")}
      {Lisp-Entry "jazz.Method" define-class ("class runtime") 2168 27 2168 38 ()}
      {Lisp-Entry "jazz.method?" define #f 2171 9 2171 21 ("jazz.Method" "%%class-is?" "object")}
      {Lisp-Entry "jazz.final-method?" define #f 2175 9 2175 27 ("final" "'final" "%%get-method-dispatch-type" "%%eq?" "jazz.Method" "%%class-is?" "and" "field")}
      {Lisp-Entry "jazz.virtual-method?" define #f 2180 9 2180 29 ("final" "'final" "%%get-method-dispatch-type" "%%neq?" "jazz.Method" "%%class-is?" "and" "field")}
      {Lisp-Entry "jazz.locate-method-owner" define #f 2185 9 2185 33 ("%%get-interface-ascendants" "jazz.Interface" "%%get-class-interfaces" "jazz.find-in" "%%get-class-ascendant" "or" "jazz.Class" "%%class-is?" "%%get-category-field" "%%not" "cond" "iter" "let" "method-name" "category")}
      {Lisp-Entry "jazz.new-final-method" define #f 2206 9 2206 30 ("final" "'final" "jazz.Method" "jazz.allocate-method" "implementation" "name")}
      {Lisp-Entry "jazz.add-final-method" define #f 2210 9 2210 30 ("jazz.error" "else" "update-final-method" "%%eq?" "create-final-method" "%%not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "class")
        {Lisp-Entry "create-final-method" define #f 2211 11 2211 30 ("jazz.add-field" "jazz.new-final-method" "method" "let" "method-implementation" "method-name" "class")}
        {Lisp-Entry "update-final-method" define #f 2216 11 2216 30 ("jazz.error" "%%set-method-implementation" "jazz.final-method?" "if" "%%get-category-field" "field" "let" "method-implementation" "method-name" "class")}}
      {Lisp-Entry "jazz.new-virtual-method" define #f 2237 9 2237 32 ("jazz.Method" "jazz.allocate-method" "implementation-rank" "category-rank" "implementation-tree" "dispatch-type" "name")}
      {Lisp-Entry "jazz.add-virtual-method" define #f 2241 9 2241 32 ("jazz.error" "else" "update-virtual-method" "%%eq?" "create-virtual-method" "%%not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "category")
        {Lisp-Entry "create-virtual-method" define #f 2242 11 2242 32 ("jazz.update-category" "jazz.add-field" "1" "%%fx+" "%%set-category-virtual-size" "%%set-method-implementation-rank" "%%get-category-virtual-size" "virtual-size" "jazz.new-virtual-method" "method" "jazz.new-method-node" "node" "interface" "'interface" "class" "'class" "jazz.Class" "%%class-is?" "if" "dispatch-type" "let*" "method-implementation" "method-name" "category")}
        {Lisp-Entry "update-virtual-method" define #f 2253 11 2253 32 ("%%get-method-implementation-rank" "jazz.update-category" "jazz.error" "%%get-method-node-children" "%%set-method-node-next-implementation" "child" "lambda" "for-each" "%%set-method-node-implementation" "%%get-method-implementation-tree" "node" "jazz.virtual-method?" "if" "%%get-category-field" "field" "let" "method-implementation" "method-name" "category")}}
      {Lisp-Entry "jazz.add-method-node" define #f 2279 9 2279 29 ("error" "jazz.final-method?" "%%vector-set!" "%%vector-ref" "method-table" "%%get-class-interface-table" "interface" "%%get-class-class-table" "%%get-method-dispatch-type" "case" "dispatch-table" "let*" "lambda" "update-method-tree" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "category-rank" "create/update-method-node" "end-nodes" "start-node" "receive" "%%get-method-implementation-tree" "root-node" "jazz.virtual-method?" "%%get-category-field" "field" "else" "%%eq?" "jazz.error" "%%not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "class")
        {Lisp-Entry "create/update-method-node" define #f 2280 11 2280 36 ("create-method-node" "update-method-node" "%%get-method-node-category" "%%eq?" "if" "locate-most-specific-method-node" "node" "let" "method-implementation" "class" "root-node")}
        {Lisp-Entry "locate-most-specific-method-node" define #f 2286 11 2286 43 ("%%cdr" "%%subtype?" "child-category" "%%car" "child" "let*" "%%null?" "%%get-method-node-children" "children" "sub-iter" "%%get-method-node-category" "%%eq?" "if" "iter" "let" "category" "node")}
        {Lisp-Entry "create-method-node" define #f 2299 11 2299 29 ("values" "%%cons" "%%set-method-node-children" "%%set-method-node-next-implementation" "%%set-method-node-next-node" "for-each" "jazz.new-method-node" "new-node" "old-children" "%%assq" "or" "%%cdr" "new-children" "assv" "%%subtype?" "%%get-method-node-category" "child-class" "let" "child" "lambda" "%%get-method-node-children" "jazz.partition" "partition" "let*" "method-implementation" "class" "node")}
        {Lisp-Entry "update-method-node" define #f 2315 11 2315 29 ("values" "%%get-method-node-children" "%%set-method-node-next-implementation" "child" "lambda" "for-each" "%%set-method-node-implementation" "method-implementation" "class" "node")}
        {Lisp-Entry "update-method-tree" define #f 2322 11 2322 29 ("%%get-category-descendants" "descendant" "for-each" "%%memq" "%%not" "%%when" "category" "iter" "%%get-method-node-category" "node" "lambda" "map" "end-categories" "let" "end-nodes" "start-node" "proc")}}
      {Lisp-Entry "jazz.Method-Node" define-class ("class runtime") 2364 27 2364 43 ()}
      {Lisp-Entry "jazz.new-method-node" define #f 2367 9 2367 29 ("jazz.Method-Node" "jazz.allocate-method-node" "%%get-method-node-implementation" "if" "next-implementation" "let" "children" "next-node" "implementation" "category")}
      {Lisp-Entry "jazz.call-into-incoherent" define #f 2372 9 2372 34 ("jazz.error" "rest")}
      {Lisp-Entry "jazz.call-into-abstract" define #f 2376 9 2376 32 ("jazz.error" "method" "class")}
      {Lisp-Entry "jazz.Queue" define-class ("class runtime") 2388 27 2388 37 ()}
      {Lisp-Entry "jazz.new-queue" define #f 2391 9 2391 23 ("jazz.Queue" "jazz.allocate-queue")}
      {Lisp-Entry "jazz.enqueue" define #f 2395 9 2395 21 ("%%set-cdr!" "pair" "jazz.queue-copy-last-list" "%%get-queue-last-list" "%%not-null?" "%%when" "else" "%%set-queue-list" "%%cons" "%%set-queue-current" "%%null?" "cond" "%%get-queue-current" "current" "let" "object" "queue")}
      {Lisp-Entry "jazz.enqueue-list" define #f 2408 9 2408 26 ("%%set-cdr!" "%%set-queue-last-anchor" "jazz.queue-copy-last-list" "%%get-queue-last-list" "else" "%%set-queue-list" "%%set-queue-last-list" "%%set-queue-current" "%%get-queue-current" "%%null?" "cond" "%%not-null?" "%%when" "lst" "queue")}
      {Lisp-Entry "jazz.queue-copy-last-list" define #f 2422 9 2422 34 ("%%set-queue-last-anchor" "%%set-queue-last-list" "%%set-cdr!" "else" "%%get-queue-list" "jazz.last-tail" "%%set-queue-current" "%%get-queue-last-list" "jazz.list-copy" "%%set-queue-list" "%%null?" "cond" "%%get-queue-last-anchor" "last-anchor" "let" "queue")}
      {Lisp-Entry "jazz.queue-list" define #f 2434 9 2434 24 ("%%get-queue-list" "queue")}
      {Lisp-Entry "jazz.reset-queue" define #f 2438 9 2438 25 ("%%set-queue-current" "%%set-queue-last-anchor" "%%set-queue-last-list" "%%set-queue-list" "queue")}}})
"serial"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "serial.scm"} 1257473859
    {Lisp-Entry "core.base.runtime.serial" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.object->serial" define #f 42 13 42 32 ("object->serial-number" "obj")}
      {Lisp-Entry "jazz.serial->object" define #f 45 13 45 32 ("serial-number->object" "number")}
      {Lisp-Entry "jazz.object->serial-symbol" define #f 49 13 49 39 ("jazz.object->serial" "%%number->string" "%%string-append" "%%string->symbol" "obj")}
      {Lisp-Entry "jazz.serial-number" define #f 56 11 56 29 ("1")}
      {Lisp-Entry "jazz.serialized-objects" define #f 59 11 59 34 ("equal?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.object->serial" define #f 62 12 62 31 ("%%table-set!" "1" "%%fx+" "set!" "jazz.serial-number" "number" "let" "jazz.serialized-objects" "%%table-ref" "or" "obj")}
      {Lisp-Entry "jazz.serial->object" define #f 69 12 69 31 ("%%car" "jazz.error" "%%null?" "continuation-return" "%%fx=" "if" "value" "key" "jazz.serialized-objects" "%%iterate-table" "return" "lambda" "continuation-capture" "rest" "number")}}})
"specific"
 ({Lisp-File-Entry {File core "src" "core" "generic" "runtime" "specific.scm"} 1257473859
    {Lisp-Entry "core.generic.runtime.specific" unit #f 38 16 38 45 ()
      {Lisp-Entry "jazz.new-specific" define #f 41 9 41 26 ("jazz.Specific" "jazz.allocate-specific" "implementation" "signature-proc")}}}
  {Lisp-File-Entry {File core "src" "core" "generic" "syntax" "specific.scm"} 1257474375
    {Lisp-Entry "core.generic.syntax.specific" unit #f 45 16 45 44 ("jazz.Specific" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Specific" define-class ("class") 48 19 48 32 ("%%set-specific-descendant-specifics" "%%get-specific-descendant-specifics" "descendant-specifics" "%%set-specific-ancestor-specifics" "%%get-specific-ancestor-specifics" "ancestor-specifics" "%%set-specific-implementation" "%%get-specific-implementation" "implementation" "%%set-specific-dynamic-signature" "%%get-specific-dynamic-signature" "dynamic-signature" "jazz.allocate-specific" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Specific" define-class ("class runtime") 55 27 55 40 ()}
      {Lisp-Entry "jazz.define-specific" define-macro ("macro") 58 20 58 40 ("jazz.expand-define-specific" "%%apply" "rest")}}})
"string"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "string.scm"} 1257473859
    {Lisp-Entry "core.base.runtime.string" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.memstring" define #f 40 9 40 23 ("1" "%%fx+" "else" "%%string-ref" "%%eqv?" "%%fx=" "cond" "0" "n" "iter" "%%string-length" "len" "let" "string" "char")}}})
"symbol"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "symbol.scm"} 1257474508
    {Lisp-Entry "core.base.runtime.symbol" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.identifier-unit" define #f 45 9 45 29 ("0" "%%substring" "%%string->symbol" "%%not" "if" "jazz.string-find-reversed" "pos" "%%symbol->string" "str" "let*" "%%symbol?" "%%assert" "identifier")}
      {Lisp-Entry "jazz.identifier-name" define #f 54 9 54 29 ("%%string-length" "1" "%%fx+" "%%substring" "%%string->symbol" "%%not" "if" "jazz.string-find-reversed" "pos" "%%symbol->string" "str" "let*" "%%symbol?" "%%assert" "identifier")}
      {Lisp-Entry "jazz.specifier?" define #f 68 9 68 24 ("1" "%%fx-" "0" "%%string-ref" "%%eqv?" "2" "%%fx>" "%%string-length" "len" "%%symbol->string" "str" "let" "%%symbol?" "and" "expr")}
      {Lisp-Entry "jazz.specifier->name" define #f 77 9 77 29 ("%%symbol->string" "%%string->symbol" "%%string-length" "%%fx-" "1" "%%substring" "string" "lambda" "extract" "let" "specifier")}
      {Lisp-Entry "jazz.name->specifier" define #f 84 9 84 29 ("%%symbol->string" "%%string-append" "%%string->symbol" "name")}
      {Lisp-Entry "jazz.binding-specifier" define #f 88 9 88 31 ("%%car" "jazz.specifier?" "%%pair?" "and" "jazz.source-code" "%%cdr" "cdr-binding" "let" "binding")}
      {Lisp-Entry "jazz.enumerator?" define #f 100 9 100 25 ("0" "%%symbol->string" "%%string-ref" "%%eqv?" "%%symbol?" "and" "obj")}
      {Lisp-Entry "jazz.enumerator->symbol" define #f 105 9 105 32 ("%%string-length" "1" "%%substring" "%%string->symbol" "%%symbol->string" "name" "let" "obj")}}})
"syntax"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "syntax.scm"} 1257473860
    {Lisp-Entry "core.base.runtime.syntax" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.source?" define #f 40 9 40 21 ("%%source?" "obj")}
      {Lisp-Entry "jazz.source-code" define #f 44 9 44 25 ("%%source-code" "%%source?" "if" "expr")}
      {Lisp-Entry "jazz.source-locat" define #f 50 9 50 26 ("%%source-locat" "%%source?" "if" "expr")}
      {Lisp-Entry "jazz.desourcify" define #f 56 9 56 24 ("%%desourcify" "expr")}
      {Lisp-Entry "jazz.desourcify-all" define #f 60 9 60 28 ("desourcify-all" "expr")
        {Lisp-Entry "desourcify-source" define #f 62 11 62 28 ("%%source-code" "desourcify-all" "src")}
        {Lisp-Entry "desourcify-list" define #f 65 11 65 26 ("else" "%%null?" "%%cdr" "desourcify-list" "%%car" "desourcify-all" "%%cons" "%%pair?" "cond" "lst")}
        {Lisp-Entry "desourcify-vector" define #f 74 11 74 28 ("%%vector-ref" "desourcify-all" "%%vector-set!" "begin" "%%fx<" "if" "1" "%%fx-" "i" "loop" "let" "0" "%%make-vector" "x" "%%vector-length" "len" "let*" "vect")}
        {Lisp-Entry "desourcify-box" define #f 84 11 84 25 ("%%unbox" "desourcify-all" "%%box" "box")}
        {Lisp-Entry "desourcify-all" define #f 87 11 87 25 ("else" "desourcify-box" "%%box?" "desourcify-vector" "%%vector?" "desourcify-list" "%%pair?" "desourcify-source" "%%source?" "cond" "expr")}}
      {Lisp-Entry "jazz.sourcify" define #f 102 9 102 22 ("%%sourcify" "src" "expr")}
      {Lisp-Entry "jazz.sourcify-if" define #f 106 9 106 25 ("jazz.sourcify" "jazz.source?" "if" "src" "expr")}
      {Lisp-Entry "jazz.sourcify-list" define #f 112 9 112 27 ("jazz.desourcify-all" "jazz.sourcify-if" "expr" "lambda" "map" "src" "lst")}
      {Lisp-Entry "jazz.locat-container" define #f 118 9 118 29 ("%%locat-container" "locat")}
      {Lisp-Entry "jazz.locat-position" define #f 122 9 122 28 ("%%locat-position" "locat")}
      {Lisp-Entry "jazz.locat->file/line/col" define #f 126 9 126 34 ("%%list" "%%filepos-col" "col" "%%filepos-line" "line" "%%locat-position" "%%position->filepos" "filepos" "%%locat-container" "%%container->path" "file" "let" "if" "locat")}
      {Lisp-Entry "jazz.container->path" define #f 138 9 138 29 ("%%container->path" "container")}
      {Lisp-Entry "jazz.position->filepos" define #f 142 9 142 31 ("%%position->filepos" "position")}
      {Lisp-Entry "jazz.filepos-line" define #f 146 9 146 26 ("%%filepos-line" "filepos")}
      {Lisp-Entry "jazz.filepos-col" define #f 150 9 150 25 ("%%filepos-col" "filepos")}
      {Lisp-Entry "jazz.present-source" define #f 159 9 159 28 ("else" "present-vector" "%%vector?" "present-list" "%%pair?" "present-src" "%%source?" "cond" "obj")
        {Lisp-Entry "present-src" define #f 161 11 161 22 ("%%filepos-col" "1" "%%filepos-line" "%%fx+" "jazz.present-source" "source" "'source" "%%vector" "%%source-locat" "%%locat-position" "pos" "jazz.source-code" "code" "let" "src")}
        {Lisp-Entry "present-list" define #f 169 11 169 23 ("else" "%%null?" "%%cdr" "present-list" "%%car" "jazz.present-source" "%%cons" "%%pair?" "cond" "lst")}
        {Lisp-Entry "present-vector" define #f 178 11 178 25 ("%%vector-ref" "jazz.present-source" "%%vector-set!" "begin" "%%fx<" "if" "1" "%%fx-" "i" "loop" "let" "0" "%%make-vector" "x" "%%vector-length" "len" "let*" "vect")}}}})
"unspecified"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "unspecified.scm"} 1257473861
    {Lisp-Entry "core.base.runtime.unspecified" unit #f 37 16 37 45 ()
      {Lisp-Entry "jazz.unspecified" define #f 40 9 40 25 ("%%unspecified")}
      {Lisp-Entry "jazz.unspecified?" define #f 44 9 44 26 ("%%unspecified?" "expr")}
      {Lisp-Entry "jazz.specified?" define #f 48 9 48 24 ("%%unspecified?" "%%not" "expr")}}})
"vector"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "vector.scm"} 1257473861
    {Lisp-Entry "core.base.runtime.vector" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.vector-for-each" define #f 40 9 40 29 ("1" "%%fx+" "%%vector-ref" "begin" "%%fx<" "if" "0" "n" "iter" "%%vector-length" "len" "let" "vector" "proc")}
      {Lisp-Entry "jazz.vector-memq?" define #f 49 9 49 26 ("1" "%%fx+" "%%vector-ref" "%%eq?" "%%fx<" "if" "0" "n" "iter" "%%vector-length" "len" "let" "vector" "obj")}
      {Lisp-Entry "jazz.resize-vector" define #f 59 9 59 27 ("%%vector-ref" "%%vector-set!" "0" "%%fx>=" "%%when" "1" "%%vector-length" "min" "%%fx-" "offset" "iter" "%%make-vector" "new-vector" "let" "size" "vector")}}})
"walker"
 ({Lisp-File-Entry {File core "src" "core" "module" "syntax" "walker.scm"} 1257479230
    {Lisp-Entry "core.module.syntax.walker" unit #f 59 16 59 41 ("jazz.Core-Walker" "jazz.Core-Dialect" "jazz.Walker" "jazz.Time-Special" "jazz.Parameterize" "jazz.C-Function" "jazz.C-Initialize" "jazz.C-Named-Declare-Declaration" "jazz.C-Declare" "jazz.C-Include" "jazz.Declare" "jazz.Or" "jazz.And" "jazz.Case" "jazz.Cond" "jazz.If" "jazz.dialect.kernel.not-null?" "'jazz.dialect.kernel.not-null?" "jazz.not-type-tests" "jazz.dialect.kernel.unspecified?" "'jazz.dialect.kernel.unspecified?" "jazz.dialect.kernel.values?" "'jazz.dialect.kernel.values?" "jazz.dialect.kernel.foreign?" "'jazz.dialect.kernel.foreign?" "jazz.dialect.kernel.thread?" "'jazz.dialect.kernel.thread?" "jazz.dialect.kernel.table?" "'jazz.dialect.kernel.table?" "jazz.Method" "jazz.dialect.kernel.method?" "'jazz.dialect.kernel.method?" "jazz.Slot" "jazz.dialect.kernel.slot?" "'jazz.dialect.kernel.slot?" "jazz.Field" "jazz.dialect.kernel.field?" "'jazz.dialect.kernel.field?" "jazz.Interface" "jazz.dialect.kernel.interface?" "'jazz.dialect.kernel.interface?" "jazz.Class" "jazz.dialect.kernel.class?" "'jazz.dialect.kernel.class?" "jazz.Category" "jazz.dialect.kernel.category?" "'jazz.dialect.kernel.category?" "jazz.dialect.kernel.object?" "'jazz.dialect.kernel.object?" "jazz.dialect.kernel.keyword?" "'jazz.dialect.kernel.keyword?" "jazz.dialect.kernel.flonum?" "'jazz.dialect.kernel.flonum?" "jazz.dialect.kernel.fixnum?" "'jazz.dialect.kernel.fixnum?" "scheme.dialect.kernel.eof-object?" "'scheme.dialect.kernel.eof-object?" "scheme.dialect.kernel.output-port?" "'scheme.dialect.kernel.output-port?" "scheme.dialect.kernel.input-port?" "'scheme.dialect.kernel.input-port?" "scheme.dialect.kernel.procedure?" "'scheme.dialect.kernel.procedure?" "jazz.dialect.kernel.continuation?" "'jazz.dialect.kernel.continuation?" "jazz.dialect.kernel.f64vector?" "'jazz.dialect.kernel.f64vector?" "jazz.dialect.kernel.f32vector?" "'jazz.dialect.kernel.f32vector?" "jazz.dialect.kernel.u64vector?" "'jazz.dialect.kernel.u64vector?" "jazz.dialect.kernel.s64vector?" "'jazz.dialect.kernel.s64vector?" "jazz.dialect.kernel.u32vector?" "'jazz.dialect.kernel.u32vector?" "jazz.dialect.kernel.s32vector?" "'jazz.dialect.kernel.s32vector?" "jazz.dialect.kernel.u16vector?" "'jazz.dialect.kernel.u16vector?" "jazz.dialect.kernel.s16vector?" "'jazz.dialect.kernel.s16vector?" "jazz.dialect.kernel.u8vector?" "'jazz.dialect.kernel.u8vector?" "jazz.dialect.kernel.s8vector?" "'jazz.dialect.kernel.s8vector?" "scheme.dialect.kernel.vector?" "'scheme.dialect.kernel.vector?" "scheme.dialect.kernel.string?" "'scheme.dialect.kernel.string?" "scheme.dialect.kernel.char?" "'scheme.dialect.kernel.char?" "scheme.dialect.kernel.symbol?" "'scheme.dialect.kernel.symbol?" "scheme.dialect.kernel.pair?" "'scheme.dialect.kernel.pair?" "scheme.dialect.kernel.null?" "'scheme.dialect.kernel.null?" "scheme.dialect.kernel.list?" "'scheme.dialect.kernel.list?" "scheme.dialect.kernel.boolean?" "'scheme.dialect.kernel.boolean?" "scheme.dialect.kernel.integer?" "'scheme.dialect.kernel.integer?" "scheme.dialect.kernel.rational?" "'scheme.dialect.kernel.rational?" "scheme.dialect.kernel.real?" "'scheme.dialect.kernel.real?" "scheme.dialect.kernel.complex?" "'scheme.dialect.kernel.complex?" "scheme.dialect.kernel.number?" "'scheme.dialect.kernel.number?" "jazz.type-tests" "##string-set!" "##vector-set!" "jazz.dialect.language.functional.set-element!" "'jazz.dialect.language.functional.set-element!" "##string-ref" "##vector-ref" "list-ref" "jazz.dialect.language.functional.element" "'jazz.dialect.language.functional.element" "##string-length" "##vector-length" "##length" "scheme.dialect.kernel.length" "'scheme.dialect.kernel.length" "##cdr" "scheme.dialect.kernel.cdr" "'scheme.dialect.kernel.cdr" "##car" "scheme.dialect.kernel.car" "'scheme.dialect.kernel.car" "##eqv?" "scheme.dialect.kernel.eqv?" "'scheme.dialect.kernel.eqv?" "##eq?" "scheme.dialect.kernel.eq?" "'scheme.dialect.kernel.eq?" "##not" "scheme.dialect.kernel.not" "'scheme.dialect.kernel.not" "##flonum->fixnum" "jazz.dialect.kernel.flonum->fixnum" "'jazz.dialect.kernel.flonum->fixnum" "##fixnum->flonum" "jazz.dialect.kernel.fixnum->flonum" "'jazz.dialect.kernel.fixnum->flonum" "jazz.dialect.kernel.fl/" "'jazz.dialect.kernel.fl/" "jazz.dialect.kernel.fl*" "'jazz.dialect.kernel.fl*" "jazz.dialect.kernel.fl-" "'jazz.dialect.kernel.fl-" "jazz.dialect.kernel.fl+" "'jazz.dialect.kernel.fl+" "jazz.dialect.kernel.fx*" "'jazz.dialect.kernel.fx*" "jazz.dialect.kernel.fx-" "'jazz.dialect.kernel.fx-" "jazz.dialect.kernel.fx+" "'jazz.dialect.kernel.fx+" "##flround" "scheme.dialect.kernel.round" "'scheme.dialect.kernel.round" "##fltruncate" "scheme.dialect.kernel.truncate" "'scheme.dialect.kernel.truncate" "##flceiling" "scheme.dialect.kernel.ceiling" "'scheme.dialect.kernel.ceiling" "##flfloor" "scheme.dialect.kernel.floor" "'scheme.dialect.kernel.floor" "##fxquotient" "scheme.dialect.kernel.quotient" "'scheme.dialect.kernel.quotient" "##/" "##fl/" "scheme.dialect.kernel./" "'scheme.dialect.kernel./" "##*" "##fl*" "##fx*" "scheme.dialect.kernel.*" "'scheme.dialect.kernel.*" "##-" "##fl-" "##fx-" "scheme.dialect.kernel.-" "'scheme.dialect.kernel.-" "##+" "##fl+" "##fx+" "scheme.dialect.kernel.+" "'scheme.dialect.kernel.+" "##fl>=" "##fx>=" "scheme.dialect.kernel.>=" "'scheme.dialect.kernel.>=" "##fl>" "##fx>" "scheme.dialect.kernel.>" "'scheme.dialect.kernel.>" "##fl<=" "##fx<=" "scheme.dialect.kernel.<=" "'scheme.dialect.kernel.<=" "##fl<" "##fx<" "scheme.dialect.kernel.<" "'scheme.dialect.kernel.<" "##=" "##fl=" "##fx=" "scheme.dialect.kernel.=" "'scheme.dialect.kernel.=" "jazz.add-primitive-patterns" "declaration" "arguments" "operator" "jazz.emit-primitive-new-call" "environment" "arguments-codes" "locator" "jazz.emit-specialized-locator" "jazz.Call" "jazz.Do" "jazz.Begin" "jazz.Internal-Define" "jazz.Body" "jazz.Receive" "jazz.Letrec" "jazz.Letstar" "jazz.Named-Let" "jazz.Let" "jazz.Lambda" "jazz.Assignment" "jazz.Method-Reference" "jazz.Reference" "jazz.Quasiquote" "jazz.Delay" "jazz.Constant" "jazz.Proclaim" "jazz.Expression" "jazz.Code" "jazz.Annotated-Frame" "jazz.Restricted-Binding" "jazz.Annotated-Variable" "jazz.Syntactic-Closure" "jazz.Define-Syntax-Form" "jazz.Syntax-Form" "jazz.Macro-Form" "jazz.Special-Form" "jazz.Form-Binding" "jazz.Macro-Symbol" "jazz.Local-Variable-Binding" "jazz.Dynamic-Self-Binding" "jazz.Self-Binding" "jazz.Rest-Parameter" "jazz.Named-Parameter" "jazz.Optional-Parameter" "jazz.Dynamic-Parameter" "jazz.Parameter" "jazz.NextMethod-Variable" "jazz.Variable" "jazz.Symbol-Binding" "jazz.Signature" "jazz.Walk-Frame" "jazz.Unresolved-Error" "jazz.Walk-Error" "jazz.Walk-Warning" "jazz.Walk-Problems" "jazz.Walk-Problem" "jazz.Walk-Location" "jazz.Walk-Context" "jazz.C-Definition-Declaration" "jazz.C-Type-Declaration" "jazz.Define-Syntax-Declaration" "jazz.Syntax-Declaration" "jazz.Macro-Declaration" "Unspecified" "'Unspecified" "EOF" "'EOF" "Values" "'Values" "Foreign" "'Foreign" "Promise" "'Promise" "Thread" "'Thread" "Table" "'Table" "F64Vector" "'F64Vector" "F32Vector" "'F32Vector" "U64Vector" "'U64Vector" "S64Vector" "'S64Vector" "U32Vector" "'U32Vector" "S32Vector" "'S32Vector" "U16Vector" "'U16Vector" "S16Vector" "'S16Vector" "U8Vector" "'U8Vector" "S8Vector" "'S8Vector" "Vector" "'Vector" "Keyword" "'Keyword" "Symbol" "'Symbol" "String" "'String" "Procedure" "'Procedure" "Continuation" "'Continuation" "Port" "'Port" "Pair" "'Pair" "Null" "'Null" "List" "'List" "Flonum" "'Flonum" "Fixnum" "'Fixnum" "Integer" "'Integer" "Rational" "'Rational" "Real" "'Real" "Complex" "'Complex" "Number" "'Number" "Char" "'Char" "Boolean" "'Boolean" "Object" "'Object" "jazz.primitive-declarations" "void" "'void" "jazz.Unspecified" "unspecified" "'unspecified" "jazz.EOF" "eof" "'eof" "jazz.Values" "values" "'values" "jazz.Foreign" "foreign" "'foreign" "jazz.Promise" "promise" "'promise" "jazz.Thread" "thread" "'thread" "jazz.Table" "table" "'table" "jazz.F64Vector" "f64vector" "'f64vector" "jazz.F32Vector" "f32vector" "'f32vector" "jazz.U64Vector" "u64vector" "'u64vector" "jazz.S64Vector" "s64vector" "'s64vector" "jazz.U32Vector" "u32vector" "'u32vector" "jazz.S32Vector" "s32vector" "'s32vector" "jazz.U16Vector" "u16vector" "'u16vector" "jazz.S16Vector" "s16vector" "'s16vector" "jazz.U8Vector" "u8vector" "'u8vector" "jazz.S8Vector" "s8vector" "'s8vector" "jazz.Vector" "vector" "'vector" "jazz.Keyword" "keyword" "'keyword" "jazz.Symbol" "symbol" "'symbol" "jazz.String" "string" "'string" "jazz.Procedure" "procedure" "'procedure" "jazz.Continuation" "continuation" "'continuation" "jazz.Port" "port" "'port" "jazz.Pair" "pair" "'pair" "jazz.Null" "null" "'null" "jazz.List" "list" "'list" "jazz.Flonum" "fl" "'fl" "jazz.Fixnum" "fx" "'fx" "jazz.Integer" "int" "'int" "jazz.Rational" "rational" "'rational" "jazz.Real" "real" "'real" "jazz.Complex" "complex" "'complex" "jazz.Number" "number" "'number" "jazz.Char" "char" "'char" "jazz.Boolean" "bool" "'bool" "jazz.Object" "object" "'object" "any" "'any" "jazz.primitive-types" "%%table-set!" "jazz.Any" "jazz.Any-Class" "type" "lambda" "jazz.object-declaration?" "set!" "jazz.Nillable-Type" "jazz.Template-Type" "jazz.Union-Type" "jazz.Complement-Type" "jazz.Restriction-Type" "jazz.Values-Type" "jazz.Category-Type" "jazz.Function-Type" "jazz.Rest-Type" "jazz.Key-Type" "jazz.Opt-Type" "jazz.Void" "jazz.Void-Class" "jazz.Literal" "jazz.Autoload-Declaration" "jazz.Export-Syntax-Declaration" "jazz.Export-Declaration" "jazz.Import-Invoice" "jazz.Export-Invoice" "jazz.Module-Invoice" "jazz.Module-Declaration" "jazz.Namespace-Declaration" "jazz.Unit-Declaration" "jazz.Autoload-Reference" "jazz.Export-Reference" "jazz.Module-Reference" "jazz.Declaration-Reference" "jazz.Declaration" "jazz.Lexical-Binding" "jazz.Walk-Binding" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.analysis-mode?" define #f 68 8 68 27 ("make-parameter")}
      {Lisp-Entry "jazz.autoload-references" define #f 72 8 72 32 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.private-access" define #f 82 8 82 27 ("0")}
      {Lisp-Entry "jazz.public-access" define #f 86 8 86 26 ("1")}
      {Lisp-Entry "jazz.protected-access" define #f 90 8 90 29 ("2")}
      {Lisp-Entry "jazz.make-access-lookups" define #f 94 9 94 33 ("eq?" "test:" "%%make-table" "%%vector-set!" "begin" "%%fx<=" "if" "0" "n" "iter" "1" "%%fx+" "%%make-vector" "lookups" "let" "access-level")}
      {Lisp-Entry "jazz.Walk-Binding" define-class ("class runtime") 109 27 109 44 ()}
      {Lisp-Entry "jazz.emit-type" generic/specific ("jazz.Walk-Binding") 112 21 112 35 ("type" "jazz.emit-binding-reference" "jazz.sourcified-form" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Walk-Binding~virtual-runtime") 116 30 116 54 ("source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" generic/specific ("jazz.Walk-Binding~virtual-runtime") 117 30 117 58 ()}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Walk-Binding~virtual-runtime") 118 30 118 54 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Walk-Binding~virtual-runtime") 119 30 119 57 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Walk-Binding~virtual-runtime") 120 30 120 61 ("form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" generic/specific ("jazz.Walk-Binding~virtual-runtime") 121 30 121 52 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" generic/specific ("jazz.Walk-Binding~virtual-runtime") 122 30 122 60 ("environment" "source-declaration" "call" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" generic/specific ("jazz.Walk-Binding~virtual-runtime") 123 30 123 67 ("symbol-src" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" generic/specific ("jazz.Walk-Binding~virtual-runtime") 124 30 124 59 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" generic/specific ("jazz.Walk-Binding~virtual-runtime") 125 30 125 58 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" generic/specific ("jazz.Walk-Binding~virtual-runtime") 126 30 126 57 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" generic/specific ("jazz.Walk-Binding~virtual-runtime") 127 30 127 57 ("form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Walk-Binding~virtual-runtime") 128 30 128 59 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Walk-Binding~virtual-runtime") 129 30 129 59 ("form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Walk-Binding") 132 21 132 45 ("source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" generic/specific ("jazz.Walk-Binding") 136 21 136 49 ("jazz.unspecified")}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Walk-Binding") 140 21 140 45 ("binding" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Walk-Binding") 144 21 144 48 ("binding" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Walk-Binding") 148 21 148 52 ("jazz.unspecified" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" generic/specific ("jazz.Walk-Binding") 152 21 152 43 ("jazz.call-return-type" "jazz.codes-forms" "jazz.emit-binding-reference" "jazz.sourcified-form" "jazz.new-code" "binding" "%%get-lexical-binding-type" "type" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" generic/specific ("jazz.Walk-Binding") 161 21 161 51 ("environment" "source-declaration" "call" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" generic/specific ("jazz.Walk-Binding") 165 21 165 58 ("%%get-lexical-binding-name" "jazz.walk-error" "binding" "jazz.walk-binding-assignable?" "%%not" "%%when" "symbol-src" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" generic/specific ("jazz.Walk-Binding") 170 21 170 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" generic/specific ("jazz.Walk-Binding") 174 21 174 49 ("jazz.unspecified" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" generic/specific ("jazz.Walk-Binding") 178 21 178 48 ()}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Walk-Binding") 182 21 182 50 ()}
      {Lisp-Entry "jazz.Lexical-Binding" define-class ("class runtime") 194 27 194 47 ()}
      {Lisp-Entry "jazz.resolve-binding" generic/specific ("jazz.Lexical-Binding~virtual-runtime") 197 30 197 50 ()}
      {Lisp-Entry "jazz.resolve-binding" generic/specific ("jazz.Lexical-Binding") 200 21 200 41 ("binding")}
      {Lisp-Entry "jazz.print-object" generic/specific ("jazz.Lexical-Binding") 204 21 204 38 ("jazz.object->serial" "%%get-lexical-binding-name" "binding" "%%get-object-class" "%%get-category-name" "jazz.format" "detail" "output")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Lexical-Binding") 211 21 211 45 ("binding" "%%get-lexical-binding-name" "%%eq?" "if" "source-declaration" "symbol")}
      {Lisp-Entry "jazz.get-lexical-binding-name" define #f 217 9 217 38 ("%%get-lexical-binding-name" "binding")}
      {Lisp-Entry "jazz.get-lexical-binding-hits" define #f 221 9 221 38 ("%%set-lexical-binding-hits" "eq?" "test:" "%%make-table" "table" "let" "%%get-lexical-binding-hits" "or" "binding")}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Lexical-Binding") 228 21 228 45 ("binding" "%%get-lexical-binding-name" "environment" "declaration")}
      {Lisp-Entry "jazz.Declaration" define-class ("class runtime") 240 27 240 43 ()}
      {Lisp-Entry "jazz.setup-declaration" define #f 243 9 243 31 ("%%get-declaration-toplevel" "%%set-declaration-toplevel" "%%get-declaration-locator" "%%compose-name" "%%not" "if" "%%set-declaration-locator" "%%get-lexical-binding-name" "name" "%%get-declaration-parent" "parent" "let" "new-declaration")}
      {Lisp-Entry "jazz.get-declaration-path" define #f 250 9 250 34 ("jazz.reverse!" "%%cons" "%%list" "%%not" "if" "%%get-declaration-parent" "parent" "%%get-lexical-binding-name" "name" "let" "lambda" "proc" "letrec" "declaration")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Declaration") 261 21 261 45 ("jazz.private-access" "binding" "jazz.lookup-declaration" "source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Declaration") 265 21 265 52 ("declaration" "%%get-lexical-binding-name" "jazz.walk-error" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-declaration" generic/specific ("jazz.Declaration~virtual-runtime") 269 30 269 53 ("source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.lookup-declaration" generic/specific ("jazz.Declaration") 272 21 272 44 ("source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.get-declaration-inclusions" generic/specific ("jazz.Declaration~virtual-runtime") 276 30 276 61 ()}
      {Lisp-Entry "jazz.get-declaration-inclusions" generic/specific ("jazz.Declaration") 279 21 279 52 ()}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Declaration~virtual-runtime") 283 30 283 51 ("environment")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Declaration") 286 21 286 42 ("declaration" "jazz.error" "environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" generic/specific ("jazz.Declaration~virtual-runtime") 290 30 290 64 ()}
      {Lisp-Entry "jazz.expand-referenced-declaration" generic/specific ("jazz.Declaration") 293 21 293 55 ()}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Declaration~virtual-runtime") 297 30 297 51 ("s" "k" "f")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Declaration") 300 21 300 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.declaration-result" define #f 304 9 304 32 ("jazz.unspecified" "eval" "'eval" "jazz.walk-for" "%%eq?" "if")}
      {Lisp-Entry "jazz.Declaration-Reference" define-class ("class runtime") 318 27 318 53 ()}
      {Lisp-Entry "jazz.resolve-reference" generic/specific ("jazz.Declaration-Reference~virtual-runtime") 321 30 321 52 ("module-declaration")}
      {Lisp-Entry "jazz.resolve-reference" generic/specific ("jazz.Declaration-Reference") 324 21 324 43 ("%%set-declaration-reference-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.new-export-declaration" "declaration" "let" "%%get-declaration-reference-name" "jazz.parse-exported-symbol" "symbol" "name" "receive" "declaration-reference" "%%get-declaration-reference-declaration" "or" "module-declaration")}
      {Lisp-Entry "jazz.Module-Reference" define-class ("class runtime") 340 27 340 48 ()}
      {Lisp-Entry "jazz.new-module-reference" define #f 343 9 343 34 ("jazz.Module-Reference" "jazz.allocate-module-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-reference" generic/specific ("jazz.Module-Reference") 347 21 347 43 ("%%set-declaration-reference-declaration" "%%get-declaration-reference-name" "jazz.outline-module" "declaration" "let" "declaration-reference" "%%get-declaration-reference-declaration" "or" "module-declaration")}
      {Lisp-Entry "jazz.Export-Reference" define-class ("class runtime") 362 27 362 48 ()}
      {Lisp-Entry "jazz.new-export-reference" define #f 365 9 365 34 ("jazz.Export-Reference" "jazz.allocate-export-reference" "module-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-reference" generic/specific ("jazz.Export-Reference") 369 21 369 43 ("%%set-declaration-reference-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.new-export-declaration" "declaration" "%%get-lexical-binding-name" "jazz.compose-name" "locator" "let" "%%get-declaration-reference-name" "jazz.parse-exported-symbol" "symbol" "name" "receive" "declaration-reference" "%%get-declaration-reference-declaration" "or" "module-declaration")}
      {Lisp-Entry "jazz.parse-exported-symbol" define #f 378 9 378 35 ("jazz.identifier-name" "values" "jazz.composite-name?" "if" "name" "module-declaration")}
      {Lisp-Entry "jazz.Autoload-Reference" define-class ("class runtime") 392 27 392 50 ()}
      {Lisp-Entry "jazz.new-autoload-reference" define #f 395 9 395 36 ("jazz.Autoload-Reference" "jazz.allocate-autoload-reference" "module-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-autoload-reference" define #f 399 9 399 40 ("%%set-declaration-reference-declaration" "%%assert" "jazz.new-autoload-declaration" "declaration" "jazz.Any" "type" "%%get-declaration-reference-name" "name" "let*" "%%get-declaration-reference-declaration" "or" "exported-module-reference" "module-declaration" "declaration-reference")}
      {Lisp-Entry "jazz.Unit-Declaration" define-class ("class runtime") 417 27 417 48 ()}
      {Lisp-Entry "jazz.new-unit-declaration" define #f 420 9 420 34 ("jazz.setup-declaration" "uptodate" "'uptodate" "jazz.Unit-Declaration" "jazz.allocate-unit-declaration" "new-declaration" "let" "requires" "parent" "access" "name")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Unit-Declaration") 426 21 426 42 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Namespace-Declaration" define-class ("class runtime") 438 27 438 53 ()}
      {Lisp-Entry "jazz.lookup-declaration" generic/specific ("jazz.Namespace-Declaration") 441 21 441 44 ("add-to-hits" "add-to-module-references" "namespace-declaration" "%%get-access-lookup" "%%table-ref" "found" "let" "source-declaration" "access" "symbol")
        {Lisp-Entry "add-to-module-references" define #f 442 11 442 35 ("%%get-declaration-locator" "%%table-set!" "%%get-module-declaration-references" "references-table" "module-declaration" "let*" "%%get-declaration-toplevel" "namespace-declaration" "%%neq?" "and" "%%when" "declaration")}
        {Lisp-Entry "add-to-hits" define #f 450 11 450 22 ("jazz.autoload-references" "jazz.Autoload-Declaration" "%%is?" "%%get-declaration-locator" "%%table-set!" "jazz.get-lexical-binding-hits" "hits-table" "let" "jazz.analysis-mode?" "source-declaration" "and" "%%when" "declaration")}}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Namespace-Declaration") 463 21 463 42 ("%%get-namespace-declaration-body" "jazz.fold-statements" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.get-private-lookup" define #f 470 9 470 32 ("jazz.private-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.get-public-lookup" define #f 473 9 473 31 ("jazz.public-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.get-protected-lookup" define #f 476 9 476 34 ("jazz.protected-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.Module-Declaration" define-class ("class runtime") 486 27 486 50 ()}
      {Lisp-Entry "jazz.new-module-declaration" define #f 489 9 489 36 ("jazz.setup-declaration" "eq?" "test:" "%%make-table" "jazz.new-queue" "jazz.public-access" "jazz.make-access-lookups" "uptodate" "'uptodate" "jazz.Module-Declaration" "jazz.allocate-module-declaration" "new-declaration" "let" "dialect-invoice" "dialect-name" "walker" "parent" "access" "name")}
      {Lisp-Entry "jazz.add-module-require" define #f 495 9 495 32 ("%%list" "%%get-module-declaration-requires" "%%append" "%%set-module-declaration-requires" "jazz.load-unit" "syntax" "'syntax" "%%eq?" "%%when" "phase" "feature-requirement" "unit-name" "lambda" "jazz.parse-require" "require" "module-declaration")}
      {Lisp-Entry "jazz.add-module-import" define #f 503 9 503 31 ("jazz.table-merge-reporting-conflicts!" "jazz.public-access" "imported" "imported-module-declaration" "%%get-module-invoice-only" "only" "jazz.private-access" "%%get-access-lookup" "private" "%%list" "%%append" "%%set-module-declaration-imports" "merge-invoice" "jazz.find-module-invoice" "actual" "%%get-module-declaration-imports" "imports" "if" "%%get-lexical-binding-name" "jazz.load-unit" "%%get-module-invoice-module" "let" "syntax" "'syntax" "%%get-module-invoice-phase" "%%eq?" "%%when" "register?" "module-invoice" "module-declaration")
        {Lisp-Entry "merge-invoice" define #f 504 11 504 24 ("new" "actual")}}
      {Lisp-Entry "jazz.add-module-export" define #f 527 9 527 31 ("jazz.table-merge-reporting-conflicts!" "exported-module-declaration" "else" "jazz.resolve-autoload-reference" "exported-module-reference" "%%table-set!" "%%get-declaration-reference-name" "jazz.identifier-name" "name" "declaration-reference" "lambda" "for-each" "cond" "%%get-export-invoice-autoload" "autoload" "%%get-module-invoice-only" "only" "jazz.public-access" "%%get-access-lookup" "public" "%%list" "%%append" "%%set-module-declaration-exports" "merge-invoice" "if" "jazz.find-module-invoice" "actual" "%%get-module-declaration-exports" "exports" "%%get-lexical-binding-name" "jazz.load-unit" "%%get-module-invoice-module" "jazz.resolve-reference" "let" "syntax" "'syntax" "%%get-module-invoice-phase" "%%eq?" "%%when" "module-invoice" "module-declaration")
        {Lisp-Entry "merge-invoice" define #f 528 11 528 24 ("%%append" "if" "%%set-export-invoice-autoload" "%%when" "new-autoload" "%%get-export-invoice-autoload" "actual-autoload" "let" "new" "actual")}}
      {Lisp-Entry "jazz.table-merge-reporting-conflicts!" define #f 561 9 561 46 ("%%get-lexical-binding-name" "jazz.error" "%%null?" "find-actual-conflicts" "conflicts" "%%fx+" "%%fx=" "%%not" "%%when" "%%table-merge!" "add-count" "%%table-length" "table-count" "let" "add" "table" "suffix" "module-declaration")
        {Lisp-Entry "effective-declaration-locator" define #f 562 11 562 40 ("%%get-declaration-locator" "else" "%%get-lexical-binding-name" "%%get-autoload-declaration-exported-module" "%%get-declaration-reference-name" "jazz.compose-name" "jazz.Autoload-Declaration" "%%get-export-declaration-symbol" "jazz.Export-Declaration" "%%is?" "cond" "decl")}
        {Lisp-Entry "find-actual-conflicts" define #f 572 11 572 32 ("%%list" "%%cons" "set!" "%%neq?" "%%when" "actual-locator" "effective-declaration-locator" "value-locator" "table" "%%table-ref" "actual" "value" "key" "lambda" "add" "%%iterate-table" "lst" "let")}}
      {Lisp-Entry "jazz.generate-reference-list" define #f 597 9 597 37 ("%%cons" "%%cdr" "%%cdar" "car" "cdr" "%%pair?" "and" "map" "declarations" "%%caar" "%%get-declaration-locator" "module-locator" "%%null?" "if" "out" "%%table->list" "in" "iter" "%%table-ref" "compose-name" "merge-sorted" "%%table-set!" "%%get-declaration-toplevel" "module" "jazz.resolve-binding" "resolved-declaration" "declaration" "locator" "lambda" "%%get-module-declaration-references" "%%iterate-table" "eq?" "test:" "%%make-table" "partition" "let" "module-declaration")
        {Lisp-Entry "lesser" define #f 598 11 598 17 ("cdr" "lesser" "%%string=?" "and" "%%string<?" "string2" "car" "%%symbol->string" "string1" "let" "%%null?" "or" "if" "name2" "name1")}
        {Lisp-Entry "merge-sorted" define #f 607 11 607 23 ("%%cdr" "merge-sorted" "else" "%%cons" "%%car" "lesser" "%%list" "%%null?" "cond" "sorted" "item")}
        {Lisp-Entry "compose-name" define #f 615 11 615 23 ("%%get-lexical-binding-name" "%%cons" "%%get-declaration-parent" "%%eq?" "if" "composite-name" "iter" "let" "declaration" "root-declaration")}}
      {Lisp-Entry "jazz.lookup-declaration" generic/specific ("jazz.Module-Declaration") 642 21 642 44 ("nextmethod" "declaration" "%%get-module-declaration-imports" "%%set-import-invoice-hit?" "%%table-ref" "jazz.public-access" "%%get-access-lookup" "imported" "%%get-module-invoice-module" "imported-module-declaration" "let" "module-invoice" "lambda" "for-each" "jazz.analysis-mode?" "%%when" "source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Module-Declaration") 654 21 654 42 (",@body-expansion" ",@registration-expansion" ",@variables-expansion" ",@literals-expansion" ",@autoloads-expansion" ",@inclusions-expansion" "jazz.queue-list" "%%get-module-declaration-imports" "%%get-module-declaration-exports" "%%get-lexical-binding-name" "syntax" "'syntax" "and" "%%get-module-invoice-phase" "jazz.resolve-reference" "module-declaration" ",symbol-name" ",name" "',name" "jazz.register-autoload" "jazz.compose-name" "symbol-name" "jazz.identifier-name" "name" "decl" "%%get-module-invoice-module" "%%get-declaration-reference-name" "cond" "%%get-export-invoice-autoload" "autoload" "%%get-module-invoice-only" "only" "module-invoice" "%%get-module-declaration-requires" ",unit-name" "',unit-name" "phase" "feature-requirement" "unit-name" "jazz.parse-require" "spec" "lambda" "for-each" ",dialect-name" "',dialect-name" "core" "'core" "%%neq?" "%%when" "%%get-module-declaration-dialect-name" "dialect-name" "core.module" "'core.module" "jazz.load-unit" "jazz.enqueue" "jazz.new-queue" "queue" "module" "'module" "jazz.declares" "else" "eval" "jazz.walk-for" "case" "begin" "jazz.emit-module-registration" "registration-expansion" "jazz.emit-module-autoloads" "autoloads-expansion" "jazz.emit-module-variables" "variables-expansion" "jazz.emit-module-literals" "literals-expansion" "jazz.emit-module-inclusions" "inclusions-expansion" "declaration" "%%get-namespace-declaration-body" "jazz.emit-namespace-statements" "body-expansion" "let" "environment")}
      {Lisp-Entry "jazz.get-module-proclaim" define #f 711 9 711 33 ("%%get-module-declaration-proclaims" "%%table-ref" "default" "proclaim-name" "module-declaration")}
      {Lisp-Entry "jazz.set-module-proclaim" define #f 715 9 715 33 ("%%get-module-declaration-proclaims" "%%table-set!" "value" "proclaim-name" "module-declaration")}
      {Lisp-Entry "jazz.all-warnings" define #f 719 8 719 25 ()}
      {Lisp-Entry "jazz.proclaim" define #f 723 9 723 22 ("jazz.remove!" "else" "%%cons" "jazz.set-module-proclaim" "'warn" "jazz.get-module-proclaim" "module-warnings" "jazz.error" "%%memq" "%%not" "cond" "warning" "lambda" "for-each" "jazz.all-warnings" "%%null?" "if" "warnings" "let" "warn" "case" "parse-clause" "parameters" "kind" "not?" "receive" "clause" "module-declaration")
        {Lisp-Entry "parse-not" define #f 724 11 724 20 ("values" "%%cdr" "parameters" "%%car" "kind" "let" "%%pair?" "%%assert" "clause" "not?")}
        {Lisp-Entry "parse-clause" define #f 730 11 730 23 ("%%cdr" "parse-not" "not" "'not" "%%car" "%%eq?" "if" "%%pair?" "%%assert" "clause")}}
      {Lisp-Entry "jazz.get-module-warn?" define #f 756 9 756 30 ("warn" "'warn" "jazz.get-module-proclaim" "%%memq" "warning-name" "module-declaration")}
      {Lisp-Entry "jazz.Module-Invoice" define-class ("class runtime") 768 27 768 46 ()}
      {Lisp-Entry "jazz.find-module-invoice" define #f 774 9 774 33 ("%%eq?" "and" "invoice" "lambda" "jazz.find-if" "%%get-module-invoice-phase" "target-phase" "%%get-module-invoice-name" "target-name" "let" "target" "invoices")}
      {Lisp-Entry "jazz.Export-Invoice" define-class ("class runtime") 788 27 788 46 ()}
      {Lisp-Entry "jazz.new-export-invoice" define #f 791 9 791 32 ("jazz.Export-Invoice" "jazz.allocate-export-invoice" "autoload" "only" "version" "phase" "module" "name")}
      {Lisp-Entry "jazz.Import-Invoice" define-class ("class runtime") 803 27 803 46 ()}
      {Lisp-Entry "jazz.new-import-invoice" define #f 806 9 806 32 ("jazz.Import-Invoice" "jazz.allocate-import-invoice" "only" "version" "phase" "module" "name")}
      {Lisp-Entry "jazz.Export-Declaration" define-class ("class runtime") 818 27 818 50 ()}
      {Lisp-Entry "jazz.new-export-declaration" define #f 821 9 821 36 ("jazz.setup-declaration" "jazz.Export-Declaration" "jazz.allocate-export-declaration" "new-declaration" "let" "symbol" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Export-Declaration") 827 21 827 52 ("jazz.unspecified" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Export-Declaration") 831 21 831 42 ("environment")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Export-Declaration") 835 21 835 48 ("jazz.Any" "declaration" "%%get-export-declaration-symbol" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Export-Declaration") 842 21 842 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Export-Syntax-Declaration" define-class ("class runtime") 854 27 854 57 ()}
      {Lisp-Entry "jazz.new-export-syntax-declaration" define #f 857 9 857 43 ("jazz.setup-declaration" "jazz.Export-Syntax-Declaration" "jazz.allocate-export-syntax-declaration" "new-declaration" "let" "symbol" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Export-Syntax-Declaration") 863 21 863 52 ("jazz.unspecified" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Export-Syntax-Declaration") 867 21 867 42 ("environment")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Export-Syntax-Declaration") 871 21 871 48 ("jazz.Any" "declaration" "%%get-export-syntax-declaration-symbol" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Export-Syntax-Declaration") 878 21 878 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Autoload-Declaration" define-class ("class runtime") 890 27 890 52 ()}
      {Lisp-Entry "jazz.new-autoload-declaration" define #f 893 9 893 38 ("jazz.setup-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.Autoload-Declaration" "jazz.allocate-autoload-declaration" "new-declaration" "let" "exported-module" "module-declaration" "parent" "type" "name")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Autoload-Declaration") 899 21 899 37 ("declaration" "jazz.resolve-binding" "jazz.of-subtype?" "subtype")}
      {Lisp-Entry "jazz.resolve-binding" generic/specific ("jazz.Autoload-Declaration") 904 21 904 41 ("%%set-autoload-declaration-declaration" "%%get-declaration-locator" "jazz.error" "%%assertion" "jazz.public-access" "jazz.lookup-declaration" "decl" "%%get-lexical-binding-name" "name" "%%get-autoload-declaration-module" "%%get-autoload-declaration-exported-module" "jazz.resolve-reference" "exported-module" "let*" "declaration" "%%get-autoload-declaration-declaration" "or")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Autoload-Declaration") 914 21 914 52 ("declaration" "jazz.resolve-binding" "jazz.walk-binding-validate-call" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Autoload-Declaration") 918 21 918 48 ("jazz.autoload-locator" "jazz.new-code" "declaration" "jazz.resolve-binding" "referenced-declaration" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.autoload-locator" define #f 926 9 926 30 ("%%get-declaration-locator" "%%symbol->string" "%%string-append" "%%string->symbol" "referenced-declaration")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Autoload-Declaration") 931 21 931 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Literal" define-class ("class runtime") 943 27 943 39 ()}
      {Lisp-Entry "jazz.new-literal" define #f 946 9 946 25 ("jazz.Literal" "jazz.allocate-literal" "arguments" "name")}
      {Lisp-Entry "jazz.Void-Class" define-class ("class runtime") 958 27 958 42 ()}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Void-Class") 961 21 961 37 ("subtype")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Void-Class") 965 21 965 40 ("'void")}
      {Lisp-Entry "jazz.Void" define-class ("class runtime") 972 27 972 36 ()}
      {Lisp-Entry "jazz.Opt-Type" define-class ("class runtime") 983 27 983 40 ()}
      {Lisp-Entry "jazz.new-opt-type" define #f 986 9 986 26 ("jazz.Opt-Type" "jazz.allocate-opt-type" "type")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Opt-Type") 990 21 990 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-opt-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.Key-Type" define-class ("class runtime") 1003 27 1003 40 ()}
      {Lisp-Entry "jazz.new-key-type" define #f 1006 9 1006 26 ("jazz.Key-Type" "jazz.allocate-key-type" "type" "key")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Key-Type") 1010 21 1010 40 ("%%symbol->string" "%%keyword->string" "%%string-append" "%%string->symbol" "%%get-key-type-type" "jazz.emit-specifier" "type-specifier" "type" "%%get-key-type-key" "key" "let")}
      {Lisp-Entry "jazz.Rest-Type" define-class ("class runtime") 1024 27 1024 41 ()}
      {Lisp-Entry "jazz.new-rest-type" define #f 1027 9 1027 27 ("jazz.Rest-Type" "jazz.allocate-rest-type" "type")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Rest-Type") 1031 21 1031 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-rest-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.Function-Type" define-class ("class runtime") 1047 27 1047 45 ()}
      {Lisp-Entry "jazz.new-function-type" define #f 1050 9 1050 31 ("jazz.Function-Type" "jazz.allocate-function-type" "%%length" "mandatory" "let" "result" "rest" "named" "optional" "positional")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Function-Type") 1055 21 1055 37 ("jazz.Function-Type" "%%get-object-class" "%%eq?" "jazz.Procedure" "jazz.of-subtype?" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Function-Type") 1060 21 1060 40 ("get-output-string" "%%string->symbol" "%%get-function-type-result" "%%not" "%%when" "%%get-function-type-rest" "rest" "%%get-function-type-positional" "jazz.emit-specifier" "display" "write-char" "set!" "if" "type" "lambda" "for-each" "first?" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Function-Type") 1079 21 1079 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Category-Type" define-class ("class runtime") 1095 27 1095 45 ()}
      {Lisp-Entry "jazz.new-category-type" define #f 1098 9 1098 31 ("jazz.Category-Type" "jazz.allocate-category-type" "declaration")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Category-Type") 1103 21 1103 37 ("subtype")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Category-Type") 1107 21 1107 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Category-Type") 1111 21 1111 40 ("get-output-string" "%%string->symbol" "type" "%%get-category-type-declaration" "jazz.emit-specifier" "write-char" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Values-Type" define-class ("class runtime") 1128 27 1128 43 ()}
      {Lisp-Entry "jazz.new-values-type" define #f 1131 9 1131 29 ("jazz.Values-Type" "jazz.allocate-values-type" "types")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Values-Type") 1135 21 1135 40 ("get-output-string" "%%string->symbol" "%%get-values-type-types" "jazz.emit-specifier" "set!" "if" "type" "lambda" "for-each" "first?" "write-char" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Restriction-Type" define-class ("class runtime") 1158 27 1158 48 ()}
      {Lisp-Entry "jazz.new-restriction-type" define #f 1161 9 1161 34 ("jazz.Restriction-Type" "jazz.allocate-restriction-type" "type" "base")}
      {Lisp-Entry "jazz.Complement-Type" define-class ("class runtime") 1173 27 1173 47 ()}
      {Lisp-Entry "jazz.new-complement-type" define #f 1176 9 1176 33 ("jazz.Complement-Type" "jazz.allocate-complement-type" "type")}
      {Lisp-Entry "jazz.Union-Type" define-class ("class runtime") 1188 27 1188 42 ()}
      {Lisp-Entry "jazz.new-union-type" define #f 1191 9 1191 28 ("jazz.Union-Type" "jazz.allocate-union-type" "types")}
      {Lisp-Entry "jazz.Template-Type" define-class ("class runtime") 1206 27 1206 45 ()}
      {Lisp-Entry "jazz.new-template-type" define #f 1209 9 1209 31 ("jazz.Template-Type" "jazz.allocate-template-type" "types" "class")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Template-Type") 1213 21 1213 40 ("get-output-string" "%%string->symbol" "%%get-template-type-types" "set!" "if" "lambda" "for-each" "first?" "write-char" "type" "%%get-template-type-class" "jazz.emit-specifier" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Nillable-Type" define-class ("class runtime") 1236 27 1236 45 ()}
      {Lisp-Entry "jazz.new-nillable-type" define #f 1239 9 1239 31 ("jazz.Nillable-Type" "jazz.allocate-nillable-type" "type")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Nillable-Type") 1243 21 1243 37 ("type" "%%get-nillable-type-type" "jazz.Boolean" "jazz.of-subtype?" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Nillable-Type") 1248 21 1248 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-nillable-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Nillable-Type") 1253 21 1253 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.object-declaration?" define #f 1266 8 1266 32 ()}
      {Lisp-Entry "jazz.Any-Class" define-class ("class runtime") 1278 27 1278 41 ()}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Any-Class") 1281 21 1281 37 ("subtype")}
      {Lisp-Entry "jazz.emit-specifier" generic/specific ("jazz.Any-Class") 1285 21 1285 40 ("'any")}
      {Lisp-Entry "jazz.emit-check" generic/specific ("jazz.Any-Class") 1289 21 1289 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Any" define-class ("class runtime") 1296 27 1296 35 ()}
      {Lisp-Entry "jazz.emit-type-cast" define #f 1313 13 1313 32 ("%%fixnum->flonum" "%%fixnum?" ",value" "jazz.Flonum" "%%eq?" "jazz.generate-symbol" "value" "let" "jazz.sourcified-form" "%%get-code-type" "%%subtype?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-type-cast" define #f 1325 12 1325 31 ("jazz.emit-check" "begin" "%%fixnum->flonum" "%%fixnum?" ",value" "jazz.Flonum" "%%eq?" "jazz.generate-symbol" "value" "let" "jazz.sourcified-form" "%%get-code-type" "%%subtype?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-parameter-cast" define #f 1344 13 1344 37 ("%%fixnum->flonum" "set!" ",parameter" "%%fixnum?" "jazz.Flonum" "jazz.sourcified-form" "parameter" "let" "jazz.object-declaration?" "%%object-class?" "jazz.Any" "%%eq?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-parameter-cast" define #f 1354 12 1354 36 ("jazz.emit-check" "%%fixnum->flonum" "set!" ",parameter" "%%fixnum?" "jazz.Flonum" "jazz.sourcified-form" "parameter" "let" "jazz.object-declaration?" "%%object-class?" "jazz.Any" "%%eq?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.parse-specifier" define #f 1384 9 1384 29 ("%%cdr" "%%car" "jazz.source-code" "jazz.specifier?" "%%pair?" "and" "if" "proc" "lst")}
      {Lisp-Entry "jazz.walk-specifier" define #f 1390 9 1390 28 ("%%cons" "%%list" "atomic?" "jazz.new-function-type" "rest" "named" "optional" "positional" "lambda" "jazz.butlast" "jazz.Rest-Type" "%%class-is?" "jazz.last" "last" "%%null?" "proc" "types" "split-parameters" "result" "parameters" "new-function-type" "jazz.new-template-type" "jazz.new-values-type" "values" "'values" "jazz.new-category-type" "category" "'category" "jazz.new-key-type" "%%string->keyword" "key" "'key" "jazz.new-opt-type" "type" "opt" "'opt" "%%eq?" "jazz.new-rest-type" "jazz.new-nillable-type" "case" "parse-atomic" "write-char" "get-output-string" "%%string->symbol" "%%eof-object?" "open-output-string" "output" "parse-name" "else" "cond" "next" "parse" "jazz.enqueue" "jazz.queue-list" "begin" "iter" "jazz.new-queue" "queue" "terminator" "separator" "parse-until" "jazz.lookup-reference" "jazz.lookup-primitive-type" "or" "name" "lookup-type" "%%eqv?" "consume" "1" "%%fx+" "set!" "read-char" "c" "readc" "peek-char" "peekc" "jazz.walk-error" "jazz.error" "%%not" "if" "%%substring" "jazz.format" "error-message" "message" "ill-formed" "define" "0" "at" "open-input-string" "input" "%%symbol->string" "string" "let" "specifier" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.specifier->type" define #f 1530 9 1530 29 ("jazz.walk-specifier" "if" "specifier" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.type->specifier" define #f 1536 9 1536 29 ("jazz.name->specifier" "jazz.specifier?" "if" "jazz.emit-specifier" "symbol" "let" "type")}
      {Lisp-Entry "jazz.primitive-types" define #f 1548 8 1548 28 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.lookup-primitive-type" define #f 1593 9 1593 35 ("jazz.primitive-types" "%%table-ref" "name")}
      {Lisp-Entry "jazz.primitive-declarations" define #f 1597 8 1597 35 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.patch-type-until-unification" define #f 1641 9 1641 42 ("jazz.public-access" "jazz.lookup-declaration" "jazz.get-catalog-entry" "module-declaration" "jazz.dialect.language.functional" "'jazz.dialect.language.functional" "jazz.dialect.language.object" "'jazz.dialect.language.object" "Object" "'Object" "%%eq?" "module-name" "if" "jazz.primitive-declarations" "%%table-ref" "name" "let" "type")}
      {Lisp-Entry "jazz.Macro-Declaration" define-class ("class runtime") 1657 27 1657 49 ()}
      {Lisp-Entry "jazz.new-macro-declaration" define #f 1660 9 1660 35 ("jazz.setup-declaration" "jazz.Macro-Declaration" "jazz.allocate-macro-declaration" "new-declaration" "let" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Macro-Declaration") 1666 21 1666 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Macro-Declaration") 1670 21 1670 50 ("%%cdr" "%%apply" "jazz.need-macro" "expander" "jazz.load-unit" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Macro-Declaration") 1681 21 1681 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "jazz.define-macro" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-macro-declaration-body" "body" "%%get-macro-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Macro-Declaration") 1694 21 1694 42 ("%%get-macro-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Syntax-Declaration" define-class ("class runtime") 1708 27 1708 50 ()}
      {Lisp-Entry "jazz.new-syntax-declaration" define #f 1711 9 1711 36 ("jazz.setup-declaration" "jazz.Syntax-Declaration" "jazz.allocate-syntax-declaration" "new-declaration" "let" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Syntax-Declaration") 1717 21 1717 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Syntax-Declaration") 1721 21 1721 50 ("jazz.need-macro" "expander" "jazz.load-unit" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Syntax-Declaration") 1731 21 1731 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "jazz.define-macro" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-syntax-declaration-body" "body" "%%get-syntax-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Syntax-Declaration") 1744 21 1744 42 ("%%get-syntax-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Define-Syntax-Declaration" define-class ("class runtime") 1758 27 1758 57 ()}
      {Lisp-Entry "jazz.new-define-syntax-declaration" define #f 1761 9 1761 43 ("jazz.setup-declaration" "jazz.Define-Syntax-Declaration" "jazz.allocate-define-syntax-declaration" "new-declaration" "let" "syntax-form" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Define-Syntax-Declaration") 1767 21 1767 42 ("%%get-declaration-source" "jazz.register-macro" "scheme" "'scheme" "core" "'core" "jazz.get-dialect" "%%get-dialect-bindings" "jazz.new-walk-frame" ",current-unit-name" "',current-unit-name" "jazz.get-catalog-entry" "%%list" "jazz.emit-expression" "jazz.sourcified-form" "',locator" "jazz.new-define-syntax-form" "tmp" ",locator" "define" "jazz.sourcify-if" "%%get-declaration-toplevel" "current-unit-name" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-syntax-declaration-body" "body" "%%get-syntax-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Define-Syntax-Declaration") 1792 21 1792 50 ("%%get-define-syntax-form-environment" "macro-environment" "%%get-syntax-form-expander" "expander" "jazz.need-macro" "define-syntax-form" "let*" "jazz.load-unit" "%%get-declaration-parent" "parent-declaration" "jazz.walk-warning" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.C-Type-Declaration" define-class ("class runtime") 1812 27 1812 50 ()}
      {Lisp-Entry "jazz.new-c-type-declaration" define #f 1815 9 1815 36 ("jazz.setup-declaration" "jazz.C-Type-Declaration" "jazz.allocate-c-type-declaration" "new-declaration" "let" "declare" "scheme-to-c" "c-to-scheme" "inclusions" "base-type" "expansion" "kind" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.get-declaration-inclusions" generic/specific ("jazz.C-Type-Declaration") 1821 21 1821 52 ("declaration" "%%get-c-type-declaration-inclusions")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.C-Type-Declaration") 1825 21 1825 42 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" generic/specific ("jazz.C-Type-Declaration") 1829 21 1829 55 ("%%list" "and" "if" ",expansion" ",locator" "c-define-type" "%%get-c-type-declaration-scheme-to-c" "scheme-to-c" "%%get-c-type-declaration-c-to-scheme" "c-to-scheme" "%%get-c-type-declaration-expansion" "expansion" "declaration" "%%get-declaration-locator" "locator" "let")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.C-Type-Declaration") 1839 21 1839 42 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Definition-Declaration" define-class ("class runtime") 1851 27 1851 56 ()}
      {Lisp-Entry "jazz.new-c-definition-declaration" define #f 1854 9 1854 42 ("jazz.setup-declaration" "jazz.C-Definition-Declaration" "jazz.allocate-c-definition-declaration" "new-declaration" "let" "scope" "c-name" "result-type" "parameter-types" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.C-Definition-Declaration") 1860 21 1860 52 ("jazz.validate-arguments" "if" "declaration" "%%get-c-definition-declaration-signature" "signature" "let" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.C-Definition-Declaration") 1866 21 1866 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" ",scope" ",c-name" ",result-type" ",parameter-types" "jazz.emit-signature" "c-define" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-c-definition-declaration-body" "body" "%%get-c-definition-declaration-scope" "scope" "%%get-c-definition-declaration-c-name" "c-name" "%%get-c-definition-declaration-result-type" "result-type" "%%get-c-definition-declaration-parameter-types" "parameter-types" "%%get-c-definition-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.C-Definition-Declaration") 1883 21 1883 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.C-Definition-Declaration") 1890 21 1890 42 ("%%get-c-definition-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Walk-Context" define-class ("class runtime") 1904 27 1904 44 ()}
      {Lisp-Entry "jazz.new-walk-context" define #f 1907 9 1907 30 ("jazz.Walk-Context" "jazz.allocate-walk-context" "pathname" "locator" "policy")}
      {Lisp-Entry "jazz.walk-context" define #f 1911 8 1911 25 ("make-parameter")}
      {Lisp-Entry "jazz.get-walk-context" define #f 1915 9 1915 30 ("jazz.walk-context")}
      {Lisp-Entry "jazz.need-walk-context" define #f 1919 9 1919 31 ("jazz.error" "jazz.walk-context" "or")}
      {Lisp-Entry "jazz.get-walk-policy" define #f 1924 9 1924 29 ("%%get-walk-context-policy" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.get-walk-locator" define #f 1931 9 1931 30 ("%%get-walk-context-locator" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.get-walk-pathname" define #f 1938 9 1938 31 ("%%get-walk-context-pathname" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.Walk-Location" define-class ("class runtime") 1953 27 1953 45 ()}
      {Lisp-Entry "jazz.new-walk-location" define #f 1956 9 1956 31 ("jazz.Walk-Location" "jazz.allocate-walk-location" "locat" "declaration-locator" "unit-locator")}
      {Lisp-Entry "jazz.walk-location" define #f 1960 9 1960 27 ("%%get-declaration-locator" "jazz.get-walk-locator" "jazz.new-walk-location" "locat" "declaration" "walker")}
      {Lisp-Entry "jazz.Walk-Problem" define-class ("class runtime") 1975 27 1975 44 ()}
      {Lisp-Entry "jazz.Walk-Problems" define-class ("class runtime") 1986 27 1986 45 ()}
      {Lisp-Entry "jazz.new-walk-problems" define #f 1989 9 1989 31 ("jazz.Walk-Problems" "jazz.allocate-walk-problems" "errors" "warnings" "message")}
      {Lisp-Entry "jazz.get-detail" generic/specific ("jazz.Walk-Problems") 1993 21 1993 36 ("jazz.partition-walk-problems-unit" "jazz.partition-walk-problems-declaration" "jazz.queue-list" "declaration-details" "1" "%%fx+" "%%substring" "jazz.enqueue" "add-details" "%%fx=" "declaration-locator" "for-each" "jazz.new-queue" "unit-details" "or" "%%symbol->string" "%%string-length" "-1" "%%not" "if" "prefix" "unit-locator" "jazz.bind" "partition" "lambda" "map" "%%get-walk-problems-errors" "problems" "%%get-walk-problems-warnings" "%%append" "all" "let" "jazz.new-exception-detail")
        {Lisp-Entry "add-details" define #f 1994 11 1994 22 ("%%get-walk-problem-location" "jazz.present-exception" "jazz.new-exception-detail" "jazz.enqueue" "problem" "lambda" "for-each" "queue" "problems")}}
      {Lisp-Entry "jazz.Walk-Warning" define-class ("class runtime") 2029 27 2029 44 ()}
      {Lisp-Entry "jazz.new-walk-warning" define #f 2032 9 2032 30 ("jazz.Walk-Warning" "jazz.allocate-walk-warning" "message" "location")}
      {Lisp-Entry "jazz.Walk-Error" define-class ("class runtime") 2044 27 2044 42 ()}
      {Lisp-Entry "jazz.new-walk-error" define #f 2047 9 2047 28 ("jazz.Walk-Error" "jazz.allocate-walk-error" "message" "location")}
      {Lisp-Entry "jazz.Unresolved-Error" define-class ("class runtime") 2059 27 2059 48 ()}
      {Lisp-Entry "jazz.new-unresolved-error" define #f 2062 9 2062 34 ("jazz.Unresolved-Error" "jazz.allocate-unresolved-error" "symbol" "location")}
      {Lisp-Entry "jazz.present-exception" generic/specific ("jazz.Unresolved-Error") 2066 21 2066 43 ("error" "%%get-unresolved-error-symbol" "jazz.format")}
      {Lisp-Entry "jazz.Walk-Frame" define-class ("class runtime") 2079 27 2079 42 ()}
      {Lisp-Entry "jazz.new-walk-frame" define #f 2082 9 2082 28 ("jazz.Walk-Frame" "jazz.allocate-walk-frame" "%%table-set!" "%%get-lexical-binding-name" "name" "binding" "lambda" "for-each" "eq?" "test:" "%%make-table" "table" "let" "bindings")}
      {Lisp-Entry "jazz.walk-binding-lookup" generic/specific ("jazz.Walk-Frame") 2091 21 2091 45 ("binding" "%%get-walk-frame-bindings" "%%table-ref" "source-declaration" "symbol")}
      {Lisp-Entry "jazz.Signature" define-class ("class runtime") 2103 27 2103 41 ()}
      {Lisp-Entry "jazz.new-signature" define #f 2106 9 2106 27 ("jazz.Signature" "jazz.allocate-signature" "%%length" "mandatory" "let" "rest" "named" "optional" "positional")}
      {Lisp-Entry "jazz.only-positional?" define #f 2111 9 2111 30 ("%%get-signature-rest" "%%not" "%%get-signature-named" "%%get-signature-optional" "%%null?" "and" "signature")}
      {Lisp-Entry "jazz.Symbol-Binding" define-class ("class runtime") 2125 27 2125 46 ()}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Symbol-Binding") 2128 21 2128 45 ("%%set-symbol-binding-gensym" "%%symbol->string" "jazz.generate-symbol" "res" "unwrap-syntactic-closure" "sym" "%%get-lexical-binding-name" "name" "let*" "'gensym" "%%eq?" "%%not" "if" "binding" "%%get-symbol-binding-gensym" "gensym" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Variable" define-class ("class runtime") 2149 27 2149 40 ()}
      {Lisp-Entry "jazz.new-variable" define #f 2152 9 2152 26 ("0" "gensym" "'gensym" "jazz.Variable" "jazz.allocate-variable" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.variable-name-valid?" define #f 2157 9 2157 34 ("%%get-syntactic-closure-form" "syntactic-closure?" "if" "jazz.variable-name-valid-symbol?" "name")}
      {Lisp-Entry "jazz.variable-name-valid-symbol?" define #f 2164 9 2164 41 ("jazz.specifier?" "%%not" "%%symbol?" "and" "name")}
      {Lisp-Entry "jazz.walk-binding-referenced" generic/specific ("jazz.Variable") 2169 21 2169 49 ("1" "%%get-variable-reference-count" "%%fx+" "binding" "%%set-variable-reference-count")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Variable") 2173 21 2173 48 ("jazz.find-annotated-type" "binding" "jazz.emit-binding-symbol" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-assignable?" generic/specific ("jazz.Variable") 2180 21 2180 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" generic/specific ("jazz.Variable") 2184 21 2184 49 ("jazz.Any" "jazz.sourcified-form" "jazz.emit-binding-symbol" "set!" "jazz.new-code" "%%get-code-type" "jazz.extend-annotated-type" "jazz.Annotated-Variable" "%%class-is?" "%%when" "binding" "jazz.find-annotated" "annotated-type" "annotated-variable" "annotated-frame" "receive" "jazz.emit-expression" "value-code" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.NextMethod-Variable" define-class ("class runtime") 2204 27 2204 51 ()}
      {Lisp-Entry "jazz.new-nextmethod-variable" define #f 2207 9 2207 37 ("0" "gensym" "'gensym" "jazz.NextMethod-Variable" "jazz.allocate-nextmethod-variable" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.NextMethod-Variable") 2212 21 2212 48 ("jazz.Any" "jazz.sourcified-form" ",name" "apply" "rest" "lambda" "if" "jazz.new-code" "jazz.*self*" "self" "binding" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-binding-call" generic/specific ("jazz.NextMethod-Variable") 2223 21 2223 43 ("jazz.call-return-type" "jazz.codes-forms" "jazz.sourcified-form" ",name" "jazz.new-code" "if" "jazz.*self*" "self" "%%get-lexical-binding-type" "type" "binding" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.Parameter" define-class ("class runtime") 2249 27 2249 41 ()}
      {Lisp-Entry "jazz.new-parameter" define #f 2252 9 2252 27 ("0" "gensym" "'gensym" "jazz.Parameter" "jazz.allocate-parameter" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Parameter~virtual-runtime") 2257 30 2257 49 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Parameter") 2260 21 2260 40 ("parameter" "jazz.emit-binding-symbol" "environment" "declaration")}
      {Lisp-Entry "jazz.Dynamic-Parameter" define-class ("class runtime") 2272 27 2272 49 ()}
      {Lisp-Entry "jazz.new-dynamic-parameter" define #f 2275 9 2275 35 ("0" "gensym" "'gensym" "jazz.Dynamic-Parameter" "jazz.allocate-dynamic-parameter" "class" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Dynamic-Parameter") 2279 21 2279 40 ("jazz.emit-binding-symbol" "jazz.emit-expression" "jazz.sourcified-form" "%%list" "parameter" "%%get-dynamic-parameter-class" "class" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Optional-Parameter" define-class ("class runtime") 2292 27 2292 50 ()}
      {Lisp-Entry "jazz.new-optional-parameter" define #f 2295 9 2295 36 ("0" "gensym" "'gensym" "jazz.Optional-Parameter" "jazz.allocate-optional-parameter" "default" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Optional-Parameter") 2299 21 2299 40 ("jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-binding-symbol" "%%list" "parameter" "%%get-optional-parameter-default" "default" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Named-Parameter" define-class ("class runtime") 2312 27 2312 47 ()}
      {Lisp-Entry "jazz.new-named-parameter" define #f 2315 9 2315 33 ("0" "gensym" "'gensym" "jazz.Named-Parameter" "jazz.allocate-named-parameter" "default" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Named-Parameter") 2319 21 2319 40 ("jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "%%list" "parameter" "%%get-named-parameter-default" "default" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-binding-symbol" generic/specific ("jazz.Named-Parameter") 2324 21 2324 45 ("parameter" "%%get-lexical-binding-name" "environment" "declaration")}
      {Lisp-Entry "jazz.Rest-Parameter" define-class ("class runtime") 2336 27 2336 46 ()}
      {Lisp-Entry "jazz.new-rest-parameter" define #f 2339 9 2339 32 ("0" "gensym" "'gensym" "jazz.Rest-Parameter" "jazz.allocate-rest-parameter" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" generic/specific ("jazz.Rest-Parameter") 2343 21 2343 40 ("parameter" "jazz.emit-binding-symbol" "environment" "declaration")}
      {Lisp-Entry "jazz.Self-Binding" define-class ("class runtime") 2358 27 2358 44 ()}
      {Lisp-Entry "jazz.new-self-binding" define #f 2361 9 2361 30 ("self" "'self" "jazz.Self-Binding" "jazz.allocate-self-binding" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Self-Binding") 2365 21 2365 48 ("%%get-declaration-parent" "self" "'self" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Dynamic-Self-Binding" define-class ("class runtime") 2380 27 2380 52 ()}
      {Lisp-Entry "jazz.new-dynamic-self-binding" define #f 2383 9 2383 38 ("self" "'self" "jazz.Dynamic-Self-Binding" "jazz.allocate-dynamic-self-binding" "code" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Dynamic-Self-Binding") 2387 21 2387 48 ("%%get-declaration-parent" "declaration" "%%get-dynamic-self-binding-code" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.*self*" define #f 2402 8 2402 19 ("make-parameter")}
      {Lisp-Entry "jazz.Local-Variable-Binding" define-class ("class runtime") 2411 27 2411 54 ()}
      {Lisp-Entry "jazz.new-local-variable-binding" define #f 2414 9 2414 40 ("jazz.Local-Variable-Binding" "jazz.allocate-local-variable-binding" "variable" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Local-Variable-Binding") 2418 21 2418 48 ("jazz.Any" "declaration" "%%get-local-variable-binding-variable" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Macro-Symbol" define-class ("class runtime") 2433 27 2433 44 ()}
      {Lisp-Entry "jazz.new-macro-symbol" define #f 2436 9 2436 30 ("gensym" "'gensym" "jazz.Macro-Symbol" "jazz.allocate-macro-symbol" "setter" "getter" "name")}
      {Lisp-Entry "jazz.Form-Binding" define-class ("class runtime") 2465 27 2465 44 ()}
      {Lisp-Entry "jazz.special-forms" define #f 2476 8 2476 26 ()}
      {Lisp-Entry "jazz.add-special-form" define #f 2480 9 2480 30 ("%%cons" "jazz.special-forms" "set!" "special-form" "symbol")}
      {Lisp-Entry "jazz.find-special-form" define #f 2484 9 2484 31 ("symbol")}
      {Lisp-Entry "jazz.Special-Form" define-class ("class runtime") 2491 27 2491 44 ()}
      {Lisp-Entry "jazz.new-special-form" define #f 2494 9 2494 30 ("jazz.Special-Form" "jazz.allocate-special-form" "walk" "name")}
      {Lisp-Entry "jazz.walk-binding-walkable?" generic/specific ("jazz.Special-Form") 2498 21 2498 48 ()}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Special-Form") 2502 21 2502 48 ("binding" "%%get-lexical-binding-name" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-walk-form" generic/specific ("jazz.Special-Form") 2506 21 2506 48 ("jazz.find-special-form" "%%symbol?" "if" "walk" "binding" "%%get-special-form-walk" "walk-proc/symbol" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Macro-Form" define-class ("class runtime") 2523 27 2523 42 ()}
      {Lisp-Entry "jazz.new-macro-form" define #f 2526 9 2526 28 ("jazz.Macro-Form" "jazz.allocate-macro-form" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Macro-Form") 2530 21 2530 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Macro-Form") 2534 21 2534 50 ("%%cdr" "apply" "binding" "%%get-macro-form-expander" "expander" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Syntax-Form" define-class ("class runtime") 2548 27 2548 43 ()}
      {Lisp-Entry "jazz.new-syntax-form" define #f 2551 9 2551 29 ("jazz.Syntax-Form" "jazz.allocate-syntax-form" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" generic/specific ("jazz.Syntax-Form") 2555 21 2555 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Syntax-Form") 2559 21 2559 50 ("binding" "%%get-syntax-form-expander" "expander" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Define-Syntax-Form" define-class ("class runtime") 2572 27 2572 50 ()}
      {Lisp-Entry "jazz.new-define-syntax-form" define #f 2575 9 2575 36 ("jazz.Define-Syntax-Form" "jazz.allocate-define-syntax-form" "environment" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expand-form" generic/specific ("jazz.Define-Syntax-Form") 2579 21 2579 50 ("%%get-define-syntax-form-environment" "macro-environment" "binding" "%%get-syntax-form-expander" "expander" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Syntactic-Closure" define-class ("class runtime") 2593 27 2593 49 ()}
      {Lisp-Entry "syntactic-closure?" define #f 2596 9 2596 27 ("jazz.Syntactic-Closure" "%%class-is?" "x")}
      {Lisp-Entry "make-syntactic-closure" define #f 2599 9 2599 31 ("jazz.Syntactic-Closure" "jazz.allocate-syntactic-closure" "%%source-code" "%%source?" "and" "%%pair?" "%%symbol?" "or" "if" "form" "vars" "env")}
      {Lisp-Entry "syntactic-closure-form" define #f 2607 9 2607 31 ("%%get-syntactic-closure-form" "sc")}
      {Lisp-Entry "unwrap-syntactic-closure" define #f 2610 9 2610 33 ("else" "%%source-code" "%%source?" "%%get-syntactic-closure-form" "unwrap-syntactic-closure" "syntactic-closure?" "cond" "x")}
      {Lisp-Entry "strip-syntactic-closures" define #f 2618 9 2618 33 ("else" "%%vector->list" "%%list->vector" "%%vector?" "%%cdr" "%%car" "cons" "%%pair?" "%%source-code" "%%source?" "%%get-syntactic-closure-form" "strip-syntactic-closures" "syntactic-closure?" "cond" "x")}
      {Lisp-Entry "strip-source-info" define #f 2631 9 2631 26 ("else" "%%vector->list" "%%list->vector" "%%vector?" "%%cdr" "%%car" "cons" "%%pair?" "%%source-code" "strip-source-info" "%%source?" "cond" "x")}
      {Lisp-Entry "identifier?" define #f 2641 9 2641 20 ("symbol?" "else" "%%source-code" "%%source?" "syntactic-closure-form" "identifier?" "syntactic-closure?" "cond" "x")}
      {Lisp-Entry "identifier=?" define #f 2648 9 2648 21 ("not" "and" "if" "y^" "unwrap-syntactic-closure" "lookup-identifier" "x^" "let" "eq?" "or" "y" "y-env" "x" "x-env")
        {Lisp-Entry "lookup-identifier" define #f 2649 11 2649 28 ("jazz.walk-binding-lookup" "binding" "lambda" "jazz.find-in" "jazz.composite-name?" "if" "environment" "symbol")}
        {Lisp-Entry "binding-name" define #f 2655 11 2655 23 ("%%get-lexical-binding-name" "jazz.Lexical-Binding" "%%class-is?" "if" "x")}}
      {Lisp-Entry "sc-macro-transformer" define #f 2672 8 2672 28 ("make-syntactic-closure" "mac-env" "use-env" "expr" "f" "lambda")}
      {Lisp-Entry "rsc-macro-transformer" define #f 2677 8 2677 29 ("mac-env" "use-env" "expr" "f" "lambda")}
      {Lisp-Entry "er-macro-transformer" define #f 2682 8 2682 28 ("identifier=?" "y" "x" "compare" "cons" "set!" "make-syntactic-closure" "name" "else" "cdr" "=>" "assq" "cond" "identifier" "renames" "rename" "let" "mac-env" "use-env" "expr" "f" "lambda")}
      {Lisp-Entry "jazz.Annotated-Variable" define-class ("class runtime") 2707 27 2707 50 ()}
      {Lisp-Entry "jazz.new-annotated-variable" define #f 2710 9 2710 36 ("jazz.Annotated-Variable" "jazz.allocate-annotated-variable" "type" "declared-type" "variable")}
      {Lisp-Entry "jazz.Restricted-Binding" define-class ("class runtime") 2722 27 2722 50 ()}
      {Lisp-Entry "jazz.new-restricted-binding" define #f 2725 9 2725 36 ("jazz.Restricted-Binding" "jazz.allocate-restricted-binding" "type" "binding")}
      {Lisp-Entry "jazz.Annotated-Frame" define-class ("class runtime") 2737 27 2737 47 ()}
      {Lisp-Entry "jazz.new-annotated-frame" define #f 2740 9 2740 33 ("jazz.Annotated-Frame" "jazz.allocate-annotated-frame" "reset" "variables")}
      {Lisp-Entry "jazz.inspect-annotated-variable" define #f 2748 9 2748 40 ("%%get-annotated-variable-type" "%%get-annotated-variable-variable" ":variable" "%%get-restricted-binding-type" "%%get-restricted-binding-binding" "%%get-lexical-binding-name" ":restricted" "jazz.Restricted-Binding" "%%class-is?" "if" "jazz.object->serial-symbol" "serial" "let" "variable")}
      {Lisp-Entry "jazz.inspect-annotated-frame" define #f 2759 9 2759 37 ("frame")}
      {Lisp-Entry "jazz.inspect-annotated-environment" define #f 2764 9 2764 43 ("environment")}
      {Lisp-Entry "jazz.Code" define-class ("class runtime") 2774 27 2774 36 ()}
      {Lisp-Entry "jazz.new-code" define #f 2777 9 2777 22 ("jazz.Code" "jazz.allocate-code" "source" "type" "form")}
      {Lisp-Entry "jazz.codes-forms" define #f 2784 9 2784 25 ("jazz.sourcified-form" "code" "lambda" "map" "codes")}
      {Lisp-Entry "jazz.codes-types" define #f 2790 9 2790 25 ("%%get-code-type" "code" "lambda" "map" "codes")}
      {Lisp-Entry "jazz.sourcify-code" define #f 2797 9 2797 27 ("%%get-code-type" "%%get-code-form" "jazz.new-code" "%%source?" "%%not" "or" "if" "src" "code")}
      {Lisp-Entry "jazz.sourcified-form" define #f 2806 9 2806 29 ("jazz.sourcify-if" "%%get-code-source" "src" "%%get-code-form" "form" "let" "code")}
      {Lisp-Entry "jazz.annotate-signature" define #f 2817 9 2817 32 ("jazz.queue-list" "%%when" "for-each" "jazz.new-annotated-variable" "jazz.enqueue" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "parameter" "annotate" "define" "jazz.new-queue" "queue" "%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "let" "signature")}
      {Lisp-Entry "jazz.annotate-inlined-signature" define #f 2836 9 2836 40 ("jazz.queue-list" "jazz.new-annotated-variable" "jazz.enqueue" "%%get-code-type" "or" "type" "%%get-lexical-binding-type" "declared-type" "argument" "parameter" "lambda" "for-each" "jazz.new-queue" "queue" "%%get-signature-positional" "positional" "let" "arguments" "signature")}
      {Lisp-Entry "jazz.annotate-bindings" define #f 2848 9 2848 31 ("jazz.new-annotated-variable" "jazz.Void" "or" "type" "%%get-lexical-binding-type" "declared-type" "%%cdr" "value" "%%car" "variable" "let" "binding" "lambda" "map" "bindings")}
      {Lisp-Entry "jazz.annotate-receive" define #f 2858 9 2858 30 ("jazz.new-annotated-variable" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "let" "parameter" "lambda" "map" "parameters")}
      {Lisp-Entry "jazz.annotate-internal-defines" define #f 2866 9 2866 39 ("jazz.new-annotated-variable" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "%%get-internal-define-variable" "variable" "let" "internal-define" "lambda" "map" "internal-defines")}
      {Lisp-Entry "jazz.with-annotated-frame" define #f 2875 9 2875 34 ("jazz.new-annotated-frame" "set!" "k" "lambda" "continuation-capture" "reset" "let" "proc" "variables")}
      {Lisp-Entry "jazz.find-annotated" define #f 2883 9 2883 28 ("%%get-annotated-variable-type" "%%get-annotated-variable-variable" "%%cdr" "set!" "%%not" "begin" "%%get-restricted-binding-type" "values" "%%eq?" "jazz.Declaration" "and" "%%get-restricted-binding-binding" "binding" "jazz.Restricted-Binding" "annotated-variable" "else" "list" "jazz.Variable" "%%get-annotated-frame-variables" "jazz.Annotated-Frame" "%%class-is?" "cond" "variables" "iter-variables" "or" "%%car" "annotated-frame" "%%null?" "if" "frames" "iter-frames" "type" "let" "environment" "variable")}
      {Lisp-Entry "jazz.find-annotated-type" define #f 2915 9 2915 33 ("%%get-lexical-binding-type" "info" "let" "jazz.find-annotated" "type" "variable" "frame" "receive" "jazz.Variable" "%%class-is?" "if" "environment" "binding")}
      {Lisp-Entry "jazz.extend-annotated-type" define #f 2928 9 2928 35 ("continuation-return" "%%get-annotated-frame-reset" "reset" "jazz.Any" "extended-type" "%%subtype?" "%%not" "%%when" "%%set-annotated-variable-type" "jazz.Void" "%%eq?" "if" "%%get-annotated-variable-type" "actual-type" "%%get-annotated-variable-declared-type" "declared-type" "let" "new-type" "variable" "frame")}
      {Lisp-Entry "jazz.extend-type" define #f 2951 9 2951 25 ("else" "%%subtype?" "jazz.Void" "%%eq?" "jazz.Any" "%%not" "or" "cond" "type2" "type1")}
      {Lisp-Entry "jazz.extend-types" define #f 2965 9 2965 26 ("%%cdr" "jazz.extend-types" "%%car" "jazz.extend-type" "jazz.Void" "%%null?" "if" "types")}
      {Lisp-Entry "jazz.type-union" define #f 2971 9 2971 24 ("jazz.new-union-type" "types")}
      {Lisp-Entry "jazz.type-difference" define #f 2975 9 2975 29 ("type2" "type1")}
      {Lisp-Entry "jazz.Walker" define-class ("class runtime") 2984 27 2984 38 ()}
      {Lisp-Entry "jazz.walk-warning" define #f 2992 9 2992 26 ("jazz.new-walk-warning" "jazz.walker-warning" "jazz.format" "apply" "message" "jazz.source-locat" "jazz.walk-location" "location" "let" "rest" "fmt-string" "src" "declaration" "walker")}
      {Lisp-Entry "jazz.walk-error" define #f 2998 9 2998 24 ("jazz.new-walk-error" "jazz.walker-error" "jazz.format" "apply" "message" "jazz.source-locat" "jazz.walk-location" "location" "let" "rest" "fmt-string" "src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-unresolved" define #f 3004 9 3004 29 ("jazz.source-code" "jazz.new-unresolved-error" "jazz.walker-error" "jazz.source-locat" "jazz.walk-location" "location" "let" "symbol-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walker-warning" define #f 3009 9 3009 28 ("%%list" "%%get-walker-warnings" "%%append" "%%set-walker-warnings" "jazz.warnings?" "if" "warning" "walker")}
      {Lisp-Entry "jazz.walker-error" define #f 3014 9 3014 26 ("jazz.validate-walk-problems" "jazz.unspecified" "continuation-return" "jazz.delay-reporting?" "and" "if" "%%list" "%%get-walker-errors" "%%append" "%%set-walker-errors" "error" "resume" "walker")}
      {Lisp-Entry "jazz.validate-walk-problems" define #f 3021 9 3021 36 ("jazz.new-walk-problems" "raise" "get-output-string" "message" "jazz.partition-walk-problems-unit" "jazz.partition-walk-problems-declaration" "jazz.present-exception" "problem" "1" "%%fx+" "%%substring" "%%fx=" "toplevel?" "declaration-locator" "%%symbol->string" "%%string-length" "-1" "%%not" "if" "prefix" "problems" "unit-locator" "jazz.bind" "partition" "lambda" "for-each" "jazz.format" "%%append" "all" "open-output-string" "output" "%%not-null?" "or" "%%when" "%%get-walker-errors" "errors" "%%get-walker-warnings" "warnings" "let" "walker")}
      {Lisp-Entry "jazz.partition-walk-problems-unit" define #f 3049 9 3049 42 ("assv" "%%get-walk-problem-location" "%%get-walk-location-unit-locator" "problem" "lambda" "jazz.partition" "problems")}
      {Lisp-Entry "jazz.partition-walk-problems-declaration" define #f 3056 9 3056 49 ("assoc" "%%get-walk-problem-location" "%%get-walk-location-declaration-locator" "%%symbol->string" "problem" "lambda" "jazz.partition" "problems")}
      {Lisp-Entry "jazz.parse-modifiers" define #f 3068 9 3068 29 ("%%cdar" "else" "%%cdr" "x" "lambda" "=>" "%%caar" "get-modifier" "%%cons" "%%reverse" "values" "%%apply" "%%null?" "cond" "res" "ls" "lp" "skip-modifiers" "modifiers" "let" "rest" "infos" "declaration" "resume" "walker")
        {Lisp-Entry "is-modifier?" define #f 3069 11 3069 23 ("%%cdr" "is-modifier?" "else" "%%caar" "%%memq" "%%null?" "cond" "x" "infos")}
        {Lisp-Entry "skip-modifiers" define #f 3073 11 3073 25 ("%%cdr" "skip-modifiers" "%%car" "jazz.source-code" "is-modifier?" "%%pair?" "and" "if" "ls" "infos")}
        {Lisp-Entry "get-modifier" define #f 3077 11 3077 23 ("else" "declaration" "resume" "walker" "jazz.walk-error" "x" "lambda" "=>" "%%cdr" "get-modifier" "%%car" "jazz.source-code" "%%memq" "%%eq?" "cond" "to" "from" "names")}}
      {Lisp-Entry "jazz.parse-unit-declaration" define #f 3099 9 3099 36 ("jazz.new-unit-declaration" "collect-requires" "requires" "let" "jazz.error" "%%neq?" "jazz.requested-unit-name" "and" "if" "body" "access" "name" "lambda" "parse" "partial-form")
        {Lisp-Entry "parse" define #f 3100 11 3100 16 ("%%cdr" "'public" "%%cddr" "%%cadr" "public" "protected" "%%memq" "if" "%%car" "jazz.source-code" "first" "let" "proc" "rest")}
        {Lisp-Entry "collect-requires" define #f 3106 11 3106 27 ("%%desourcify" "%%cdr" "jazz.filter-features" "jazz.listify" "map" "append" "set!" "require" "'require" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "if" "expr" "lambda" "for-each" "requires" "let" "body")}}
      {Lisp-Entry "jazz.parse-module" define #f 3128 9 3128 26 ("values" "%%cddr" "body" "%%cadr" "dialect-name" "%%car" "jazz.source-code" "name" "let" "parse-modifiers" "rest" "access" "receive" "partial-form")
        {Lisp-Entry "parse-modifiers" define #f 3129 11 3129 26 ("'public" "%%cdr" "values" "public" "protected" "%%memq" "if" "%%car" "jazz.source-code" "first" "let" "rest")}}
      {Lisp-Entry "jazz.parse-module-invoice" define #f 3145 9 3145 34 ("%%reverse" "values" "'autoload" "'only" "'phase" "%%cdar" "begin" "'load" "%%caar" "%%eq?" "if" "%%cons" "set!" "%%not" "and" "%%while" "autoload" "only" "phase" "load" "version" "%%cdr" "scan" "%%car" "name" "let" "jazz.error" "%%pair?" "%%assertion" "specification")}
      {Lisp-Entry "jazz.parse-module-declaration" define #f 3185 9 3185 38 ("jazz.walk-module-declaration" "jazz.dialect-walker" "walker" "jazz.require-dialect" "dialect" "jazz.load-dialect-invoice" "dialect-invoice" "let*" "jazz.new-walk-context" "jazz.walk-context" "parameterize" "jazz.error" "%%neq?" "jazz.requested-unit-name" "and" "if" "jazz.parse-module" "body" "dialect-name" "access" "name" "receive" "partial-form")}
      {Lisp-Entry "jazz.walk-module-declaration" define #f 3196 9 3196 37 ("jazz.validate-walk-problems" "jazz.walker-environment" "%%cons" "jazz.walk-declarations" "%%set-module-declaration-walker" "jazz.add-module-import" "%%when" "jazz.new-module-declaration" "or" "declaration" "let" "body" "dialect-invoice" "dialect-name" "access" "name" "actual" "walker")}
      {Lisp-Entry "jazz.walk-module-export" define #f 3207 9 3207 32 ("jazz.new-autoload-reference" "jazz.new-export-reference" "symbol" "lambda" "map" "%%not" "if" "jazz.new-export-invoice" "jazz.new-module-reference" "module-reference" "let" "jazz.parse-module-invoice" "module-autoload" "module-only" "module-version" "module-phase" "module-load" "module-name" "receive" "export" "walker")}
      {Lisp-Entry "jazz.expand-module-source" define #f 3226 9 3226 34 ("jazz.walk-module" "jazz.emit-declaration" "partial-form")}
      {Lisp-Entry "jazz.walk-module" define #f 3230 9 3230 25 ("%%set-namespace-declaration-body" "jazz.validate-walk-problems" "jazz.walk-namespace" "jazz.walker-environment" "%%cons" "environment" "jazz.set-catalog-entry" "jazz.walk-module-declaration" "let" "lambda" "jazz.call-with-catalog-entry-lock" "declaration" "jazz.get-catalog-entry" "actual" "resume" "jazz.dialect-walker" "walker" "jazz.require-dialect" "dialect" "jazz.load-dialect-invoice" "dialect-invoice" "let*" "jazz.new-walk-context" "jazz.walk-context" "parameterize" "jazz.error" "%%neq?" "jazz.requested-unit-name" "and" "if" "jazz.parse-module" "body" "dialect-name" "access" "name" "receive" "partial-form")}
      {Lisp-Entry "jazz.cond-expand" define #f 3252 9 3252 25 ("begin" "else" "'else" "jazz.feature-safisfied?" "feature-requirement" "%%desourcify" "%%symbol?" "%%not" "or" "clause" "jazz.error" "%%null?" "%%cdr" "scan" "iter" "let" "cond-expand" "'cond-expand" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "if" "cont" "form-src")}
      {Lisp-Entry "jazz.walk-namespace" define #f 3272 9 3272 28 ("jazz.queue-list" "jazz.walk" "jazz.enqueue" "%%when" "expr?" "expr-src" "jazz.cond-expand" "continuation-capture" "form-src" "lambda" "for-each" "jazz.new-queue" "queue" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.load-dialect-invoice" define #f 3285 9 3285 34 ("syntax" "'syntax" "jazz.outline-module" "jazz.new-import-invoice" "core" "'core" "%%eq?" "jazz.error" "%%symbol?" "%%not" "if" "dialect-name")}
      {Lisp-Entry "jazz.emit-module-inclusions" define #f 3298 9 3298 36 ("jazz.expand-referenced-declaration" "map" "%%get-module-declaration-inclusions" "jazz.enqueue" "jazz.queue-list" "%%get-lexical-binding-name" "find-name" "%%not" "%%when" "jazz.get-declaration-inclusions" "for-each" "declaration" "lambda" "collect-declarations" "letrec" "jazz.new-queue" "queue" "let" "module-declaration")
        {Lisp-Entry "find-name" define #f 3299 11 3299 20 ("%%cdr" "find-name" "%%car" "%%get-lexical-binding-name" "%%eq?" "%%null?" "if" "lst" "name")}}
      {Lisp-Entry "jazz.emit-module-literals" define #f 3322 9 3322 34 ("%%get-module-declaration-literals" "jazz.emit-expression" "jazz.sourcified-form" ",name" "define" "%%cdr" "value" "%%car" "name" "let" "info" "lambda" "map" "module-declaration")}
      {Lisp-Entry "jazz.emit-module-variables" define #f 3330 9 3330 35 ("%%get-module-declaration-variables" "jazz.queue-list" ",value" ",symbol" "jazz.define-variable" "%%cdr" "value" "%%car" "symbol" "let" "variable" "lambda" "map" "module-declaration")}
      {Lisp-Entry "jazz.emit-module-autoloads" define #f 3338 9 3338 35 ("jazz.queue-list" "%%get-module-declaration-autoloads" "jazz.emit-binding-reference" "jazz.sourcified-form" "set!" "%%get-declaration-toplevel" "%%get-declaration-locator" "jazz.load-unit" "begin" "if" "loaded?" ",locator" "define" "jazz.enqueue" "%%table-set!" "%%table-ref" "%%not" "%%when" "jazz.autoload-locator" "locator" "jazz.resolve-binding" "referenced-declaration" "autoload-declaration" "lambda" "for-each" "eq?" "test:" "%%make-table" "locators" "jazz.new-queue" "queue" "let" "environment" "module-declaration")}
      {Lisp-Entry "jazz.emit-module-registration" define #f 3359 9 3359 38 ("jazz.queue-list" "%%cons" "jazz.enqueue" "jazz.runtime-export" "export" "decl" "name" "lambda" "jazz.public-access" "%%get-access-lookup" "%%iterate-table" "jazz.new-queue" "queue" "%%get-module-declaration-walker" "walker" "let" "%%get-lexical-binding-name" "jazz.register-module" "public" "'public" "%%get-declaration-access" "%%eq?" "if" "environment" "declaration")}
      {Lisp-Entry "jazz.runtime-export" generic/specific ("jazz.Walker~virtual-runtime") 3373 30 3373 49 ("declaration")}
      {Lisp-Entry "jazz.runtime-export" generic/specific ("jazz.Walker") 3376 21 3376 40 ("else" "%%get-declaration-toplevel" "%%cons" "jazz.resolve-binding" "referenced-declaration" "let" "jazz.Autoload-Declaration" "%%get-declaration-locator" "jazz.Export-Declaration" "%%is?" "cond" "declaration")}
      {Lisp-Entry "jazz.walker-bindings" generic/specific ("jazz.Walker~virtual-runtime") 3392 30 3392 50 ()}
      {Lisp-Entry "jazz.walker-bindings" generic/specific ("jazz.Walker") 3395 21 3395 41 ("core" "'core" "jazz.get-dialect" "%%get-dialect-bindings")}
      {Lisp-Entry "jazz.walker-environment" generic/specific ("jazz.Walker~virtual-runtime") 3399 30 3399 53 ()}
      {Lisp-Entry "jazz.walker-environment" generic/specific ("jazz.Walker") 3402 21 3402 44 ("walker" "jazz.walker-bindings" "jazz.new-walk-frame" "%%list")}
      {Lisp-Entry "jazz.walk-declaration" generic/specific ("jazz.Walker~virtual-runtime") 3417 30 3417 51 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-declaration" generic/specific ("jazz.Walker") 3420 21 3420 42 ("else" "jazz.walk-define-syntax-declaration" "define-syntax" "jazz.walk-syntax-declaration" "syntax" "jazz.walk-macro-declaration" "macro" "jazz.walk-native-syntax-declaration" "native-syntax" "jazz.walk-native-declaration" "native" "jazz.walk-import-declaration" "import" "jazz.walk-export-declaration" "export" "walker" "jazz.walk-require-declaration" "require" "case" "%%car" "first" "let" "jazz.source-code" "%%pair?" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-declarations" define #f 3436 9 3436 31 ("walk" "forms" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "walk" define #f 3437 11 3437 15 ("jazz.walk-declaration" "jazz.source-code" "%%cdr" "walk" "jazz.begin-form?" "if" "environment" "declaration" "walker" "jazz.expand-macros" "expansion" "let" "%%when" "expr?" "expr" "jazz.cond-expand" "resume" "continuation-capture" "form-src" "lambda" "for-each" "forms")}}
      {Lisp-Entry "jazz.add-declaration-child" define #f 3453 9 3453 35 ("jazz.public-access" "private" "'private" "%%get-declaration-access" "%%neq?" "jazz.private-access" "%%get-access-lookup" "%%table-set!" "%%get-namespace-declaration-children" "jazz.enqueue" "jazz.find-child-declaration" "%%not" "%%when" "%%get-lexical-binding-name" "name" "let" "child" "namespace-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.require-declaration" define #f 3465 9 3465 33 ("jazz.error" "%%assertion" "jazz.find-declaration" "declaration" "let" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.find-declaration" define #f 3471 9 3471 30 ("jazz.private-access" "%%get-access-lookup" "%%table-ref" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.find-child-declaration" define #f 3475 9 3475 36 ("%%get-namespace-declaration-children" "jazz.queue-list" "%%get-lexical-binding-name" "%%eq?" "decl" "lambda" "jazz.find-if" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.begin-form?" define #f 3481 9 3481 25 ("begin" "'begin" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.define-form?" define #f 3486 9 3486 26 ("define" "'define" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.register-autoload-declaration" define #f 3496 9 3496 43 ("%%cons" "%%set-module-declaration-autoloads" "%%memq" "%%not" "%%when" "%%get-module-declaration-autoloads" "declarations" "let" "autoload-declaration" "module-declaration")}
      {Lisp-Entry "jazz.lookup-reference" define #f 3507 9 3507 30 ("jazz.walk-unresolved" "jazz.lookup-symbol" "or" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Expression" define-class ("class runtime") 3517 27 3517 42 ()}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Expression~virtual-runtime") 3520 30 3520 50 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Expression") 3523 21 3523 41 ("expression" "jazz.error" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" generic/specific ("jazz.Expression~virtual-runtime") 3527 30 3527 44 ("environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.emit-call" generic/specific ("jazz.Expression") 3530 21 3530 35 ("jazz.Any" "jazz.codes-forms" "expression" "jazz.emit-expression" "jazz.sourcified-form" "jazz.new-code" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Expression~virtual-runtime") 3537 30 3537 50 ("s" "k" "f")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Expression") 3540 21 3540 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.emit-expressions" define #f 3544 9 3544 30 ("jazz.emit-expression" "expression" "lambda" "map" "environment" "declaration" "expressions")}
      {Lisp-Entry "jazz.fold-expressions" define #f 3550 9 3550 30 ("%%cdr" "jazz.fold-expressions" "%%car" "jazz.fold-expression" "%%null?" "if" "seed" "s" "k" "f" "expressions")}
      {Lisp-Entry "jazz.Proclaim" define-class ("class runtime") 3565 27 3565 40 ()}
      {Lisp-Entry "jazz.new-proclaim" define #f 3568 9 3568 26 ("jazz.Proclaim" "jazz.allocate-proclaim" "clauses")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Proclaim") 3572 21 3572 41 ("jazz.proclaim" "clause" "lambda" "for-each" "%%get-declaration-toplevel" "module-declaration" "expression" "%%get-proclaim-clauses" "clauses" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Proclaim") 3581 21 3581 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Constant" define-class ("class runtime") 3593 27 3593 40 ()}
      {Lisp-Entry "jazz.new-constant" define #f 3596 9 3596 26 ("jazz.Constant" "jazz.allocate-constant" "type" "expansion")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Constant") 3600 21 3600 41 ("%%get-expression-type" "expression" "%%get-constant-expansion" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Constant") 3607 21 3607 41 ("%%get-constant-expansion" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Delay" define-class ("class runtime") 3621 27 3621 37 ()}
      {Lisp-Entry "jazz.new-delay" define #f 3624 9 3624 23 ("jazz.Delay" "jazz.allocate-delay" "expression")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Delay") 3628 21 3628 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "delay" "jazz.new-code" "%%get-delay-expression" "expression" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Delay") 3636 21 3636 41 ("%%get-delay-expression" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Quasiquote" define-class ("class runtime") 3650 27 3650 42 ()}
      {Lisp-Entry "jazz.new-quasiquote" define #f 3653 9 3653 28 ("jazz.Quasiquote" "jazz.allocate-quasiquote" "form")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Quasiquote") 3657 21 3657 41 ("jazz.List" "expression" "%%get-quasiquote-form" "quasiquote" "'quasiquote" "jazz.new-code" "%%cdr" "%%cons" "%%cadr" "jazz.emit-expression" "jazz.sourcified-form" "%%list" "unquote-splicing" "'unquote-splicing" "unquote" "'unquote" "%%car" "%%eq?" "or" "%%pair?" "if" "form" "lambda" "emit" "letrec" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Quasiquote") 3672 21 3672 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Reference" define-class ("class runtime") 3684 27 3684 41 ()}
      {Lisp-Entry "jazz.new-reference" define #f 3687 9 3687 27 ("jazz.Reference" "jazz.allocate-reference" "binding")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Reference") 3691 21 3691 41 ("expression" "%%get-reference-binding" "jazz.emit-binding-reference" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" generic/specific ("jazz.Reference") 3695 21 3695 35 ("expression" "%%get-reference-binding" "jazz.emit-binding-call" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Reference") 3699 21 3699 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Method-Reference" define-class ("class runtime") 3711 27 3711 48 ()}
      {Lisp-Entry "jazz.new-method-reference" define #f 3714 9 3714 34 ("jazz.Method-Reference" "jazz.allocate-method-reference" "binding")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Method-Reference") 3718 21 3718 41 ("jazz.Any" "%%get-lexical-binding-type" "or" "%%get-declaration-locator" "jazz.new-code" "expression" "%%get-reference-binding" "method-declaration" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" generic/specific ("jazz.Method-Reference") 3727 21 3727 35 ("jazz.Any" "jazz.codes-forms" "expression" "jazz.emit-expression" "jazz.sourcified-form" "jazz.new-code" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Method-Reference") 3734 21 3734 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Assignment" define-class ("class runtime") 3746 27 3746 42 ()}
      {Lisp-Entry "jazz.new-assignment" define #f 3749 9 3749 28 ("jazz.Assignment" "jazz.allocate-assignment" "value" "binding")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Assignment") 3753 21 3753 41 ("%%get-assignment-value" "expression" "%%get-assignment-binding" "jazz.emit-binding-assignment" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Assignment") 3757 21 3757 41 ("%%get-assignment-value" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Lambda" define-class ("class runtime") 3771 27 3771 38 ()}
      {Lisp-Entry "jazz.new-lambda" define #f 3774 9 3774 24 ("jazz.Lambda" "jazz.allocate-lambda" "body" "signature" "source" "type")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Lambda") 3778 21 3778 41 ("%%get-expression-source" "jazz.new-function-type" ",@signature-casts" ",cast-body" ",signature-output" "%%not" "if" "%%get-code-type" "jazz.sourcified-form" "begin" "jazz.new-code" "jazz.emit-type-cast" "jazz.simplify-begin" "cast-body" "jazz.emit-signature-casts" "signature-casts" "jazz.emit-expression" "body-code" "jazz.emit-signature" "signature-output" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "expression" "%%get-expression-type" "type" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Lambda") 3801 21 3801 41 ("%%get-lambda-body" "jazz.fold-statement" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Let" define-class ("class runtime") 3815 27 3815 35 ()}
      {Lisp-Entry "jazz.new-let" define #f 3818 9 3818 21 ("jazz.Let" "jazz.allocate-let" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Let") 3822 21 3822 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-let-body" "body" "expression" "%%get-let-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Let") 3846 21 3846 41 ("%%get-let-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Named-Let" define-class ("class runtime") 3860 27 3860 41 ()}
      {Lisp-Entry "jazz.new-named-let" define #f 3863 9 3863 27 ("jazz.Named-Let" "jazz.allocate-named-let" "body" "bindings" "variable" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Named-Let") 3867 21 3867 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "annotated-variable" "binding" "map" "bindings-output" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.Any" "jazz.new-annotated-variable" "%%cons" "jazz.with-annotated-frame" "%%get-let-body" "body" "%%get-let-bindings" "bindings" "expression" "%%get-named-let-variable" "variable" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Named-Let") 3892 21 3892 41 ("%%get-let-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Letstar" define-class ("class runtime") 3906 27 3906 39 ()}
      {Lisp-Entry "jazz.new-letstar" define #f 3909 9 3909 25 ("jazz.Letstar" "jazz.allocate-letstar" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Letstar") 3913 21 3913 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "let*" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-letstar-body" "body" "expression" "%%get-letstar-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Letstar") 3937 21 3937 41 ("%%get-letstar-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Letrec" define-class ("class runtime") 3951 27 3951 38 ()}
      {Lisp-Entry "jazz.new-letrec" define #f 3954 9 3954 24 ("jazz.Letrec" "jazz.allocate-letrec" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Letrec") 3958 21 3958 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "letrec" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-letrec-body" "body" "expression" "%%get-letrec-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Letrec") 3982 21 3982 41 ("%%get-letrec-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Receive" define-class ("class runtime") 3996 27 3996 39 ()}
      {Lisp-Entry "jazz.new-receive" define #f 3999 9 3999 25 ("jazz.Receive" "jazz.allocate-receive" "body" "expression" "variables" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Receive") 4003 21 4003 41 ("%%get-expression-source" "%%get-code-type" ",expression-output" "jazz.emit-binding-symbol" "variable" "map" "receive" "jazz.new-code" "body-code" "jazz.emit-expression" "jazz.sourcified-form" "expression-output" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-receive" "jazz.with-annotated-frame" "%%get-receive-body" "body" "%%get-receive-expression" "expr" "expression" "%%get-receive-variables" "variables" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Receive") 4022 21 4022 41 ("%%get-receive-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Body" define-class ("class runtime") 4036 27 4036 36 ()}
      {Lisp-Entry "jazz.new-body" define #f 4039 9 4039 22 ("jazz.Body" "jazz.allocate-body" "expressions" "internal-defines")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Body") 4043 21 4043 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "%%append" "jazz.new-code" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-internal-defines" "jazz.with-annotated-frame" "%%get-body-expressions" "expressions" "expression" "%%get-body-internal-defines" "internal-defines" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Body") 4056 21 4056 41 ("%%get-body-expressions" "%%get-body-internal-defines" "jazz.fold-statements" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Internal-Define" define-class ("class runtime") 4070 27 4070 47 ()}
      {Lisp-Entry "jazz.new-internal-define" define #f 4073 9 4073 33 ("jazz.Internal-Define" "jazz.allocate-internal-define" "value" "variable")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Internal-Define") 4077 21 4077 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-binding-symbol" "define" "jazz.new-code" "%%get-internal-define-value" "value" "expression" "%%get-internal-define-variable" "variable" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Internal-Define") 4087 21 4087 41 ("%%get-internal-define-value" "jazz.fold-statement" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Begin" define-class ("class runtime") 4101 27 4101 37 ()}
      {Lisp-Entry "jazz.new-begin" define #f 4104 9 4104 23 ("jazz.Begin" "jazz.allocate-begin" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Begin") 4108 21 4108 41 ("%%get-expression-source" "%%get-code-type" "jazz.sourcified-form" "begin" "jazz.new-code" "jazz.emit-statements-code" "code" "expression" "%%get-begin-expressions" "expressions" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Begin") 4117 21 4117 41 ("%%get-begin-expressions" "jazz.fold-statements" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Do" define-class ("class runtime") 4130 27 4130 34 ()}
      {Lisp-Entry "jazz.new-do" define #f 4133 9 4133 20 ("jazz.Do" "jazz.allocate-do" "body" "result" "test" "bindings")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Do") 4137 21 4137 41 ("%%get-code-type" ",bindings-output" "do" "jazz.new-code" "body-code" "result-code" "test-code" ",@step-code-list" ",init-code" "jazz.emit-binding-symbol" "%%list" "if" "step-code-list" "jazz.emit-expression" "jazz.sourcified-form" "init-code" "%%cddr" "step" "%%cadr" "init" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-do-body" "body" "%%get-do-result" "result" "%%get-do-test" "test" "expression" "%%get-do-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Do") 4169 21 4169 41 ("%%get-do-body" "%%get-do-result" "%%get-do-test" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Call" define-class ("class runtime") 4185 27 4185 36 ()}
      {Lisp-Entry "jazz.new-call" define #f 4188 9 4188 22 ("jazz.Call" "jazz.allocate-call" "arguments" "operator" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Call") 4192 21 4192 41 ("%%get-expression-source" "jazz.emit-call" "jazz.emit-inlined-call" "jazz.emit-primitive-call" "jazz.emit-primitive-new-call" "jazz.emit-specialized-call" "or" "jazz.sourcify-code" "jazz.emit-expressions" "arguments-codes" "%%get-declaration-locator" "jazz.Declaration" "%%get-reference-binding" "binding" "jazz.Reference" "%%class-is?" "if" "locator" "%%get-call-arguments" "arguments" "expression" "%%get-call-operator" "operator" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Call") 4211 21 4211 41 ("%%get-call-arguments" "jazz.fold-expressions" "%%get-call-operator" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.call-return-type" define #f 4220 9 4220 30 ("jazz.Any" "%%get-function-type-result" "jazz.Function-Type" "%%is?" "if" "operator-type")}
      {Lisp-Entry "jazz.specializers" define #f 4231 8 4231 25 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.add-specializer" define #f 4235 9 4235 29 ("%%list" "%%table-ref" "%%append" "jazz.specializers" "%%table-set!" "specializer" "specialized-declaration")}
      {Lisp-Entry "jazz.get-specializers" define #f 4241 9 4241 30 ("jazz.specializers" "%%table-ref" "binding")}
      {Lisp-Entry "jazz.emit-specialized-call" define #f 4245 9 4245 35 ("%%cdr" "%%get-function-type-result" "jazz.codes-forms" ",locator" "jazz.new-code" "jazz.emit-inlined-binding-call" "jazz.match-signature?" "%%get-lexical-binding-type" "function-type" "%%car" "specializer" "on" "'on" "jazz.debug-specializers" "%%get-lexical-binding-name" "specialized" "'specialized" "'call" "match" "'match" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "scheme.dialect.kernel./" "scheme.dialect.kernel.*" "scheme.dialect.kernel.-" "scheme.dialect.kernel.+" "scheme.dialect.kernel.>=" "scheme.dialect.kernel.>" "scheme.dialect.kernel.<=" "scheme.dialect.kernel.<" "scheme.dialect.kernel.=" "%%memq" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-module-warn?" "jazz.warnings?" "and" "%%when" "begin" "%%null?" "scan" "iter" "jazz.codes-types" "types" "jazz.get-specializers" "specializers" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "jazz.emit-specialized-locator" "or" "%%not" "if" "environment" "declaration" "call" "arguments-codes" "arguments" "locator" "operator")}
      {Lisp-Entry "jazz.emit-specialized-locator" define #f 4286 8 4286 37 ()}
      {Lisp-Entry "jazz.emit-primitive-new-call" define #f 4299 8 4299 36 ()}
      {Lisp-Entry "jazz.primitive-patterns" define #f 4324 8 4324 31 ()}
      {Lisp-Entry "jazz.initialize-primitive-patterns" define #f 4328 9 4328 43 ("set!" "jazz.primitive-patterns" "jazz.walk-specifier" "%%list" "%%cadr" "specifier" "name" "pattern" "map" "%%table-set!" "%%cdr" "patterns" "%%car" "operator" "pair" "lambda" "for-each" "eq?" "test:" "%%make-table" "table" "let")}
      {Lisp-Entry "jazz.add-primitive-patterns" define #f 4343 9 4343 36 ("%%cons" "jazz.primitive-patterns" "set!" "patterns" "operator")}
      {Lisp-Entry "jazz.get-primitive-patterns" define #f 4347 9 4347 36 ("jazz.primitive-patterns" "%%table-ref" "locator")}
      {Lisp-Entry "jazz.emit-primitive-call" define #f 4396 9 4396 33 ("%%cdr" "%%get-function-type-result" "jazz.codes-forms" ",name" "jazz.new-code" "jazz.match-signature?" "%%car" "function-type" "name" "jazz.bind" "jazz.identifier-name" "primitive" "'primitive" "call" "'call" "match" "'match" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "scheme.dialect.kernel.cdr" "scheme.dialect.kernel.car" "%%memq" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-module-warn?" "jazz.warnings?" "and" "%%when" "begin" "%%null?" "scan" "iter" "jazz.codes-types" "types" "jazz.get-primitive-patterns" "patterns" "let" "%%not" "if" "environment" "declaration" "arguments-codes" "arguments" "locator" "operator")}
      {Lisp-Entry "jazz.emit-inlined-call" define #f 4424 9 4424 31 ("jazz.emit-inlined-binding-call" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "if" "environment" "declaration" "call" "arguments" "operator")}
      {Lisp-Entry "jazz.match-signature?" define #f 4436 9 4436 30 ("list-tail" "lambda" "jazz.every?" "%%get-rest-type-type" "match-rest?" "else" "%%cdr" "%%car" "cond" "expected" "types" "args" "iter" "%%null?" "%%not" "%%fx<=" "%%fx>=" "match-positional?" "jazz.Any" "%%subtype?" "%%get-category-type-declaration" "%%get-reference-binding" "%%eq?" "jazz.Reference" "and" "or" "jazz.Category-Type" "%%class-is?" "if" "expect" "type" "arg" "match?" "define" "%%get-function-type-rest" "rest" "%%get-function-type-named" "named" "%%get-function-type-optional" "optional" "%%get-function-type-positional" "positional" "%%get-function-type-mandatory" "mandatory" "%%length" "argcount" "let" "function-type" "argument-types" "arguments")}
      {Lisp-Entry "jazz.If" define-class ("class runtime") 4485 27 4485 34 ()}
      {Lisp-Entry "jazz.new-if" define #f 4488 9 4488 20 ("jazz.If" "jazz.allocate-if" "no" "yes" "test" "source")}
      {Lisp-Entry "jazz.type-tests" define #f 4492 8 4492 23 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.not-type-tests" define #f 4543 8 4543 27 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.restrict-type" define #f 4550 9 4550 27 ("jazz.new-restriction-type" "type" "base")}
      {Lisp-Entry "jazz.restriction-of?" define #f 4554 9 4554 29 ("%%get-restriction-type-type" "jazz.Restriction-Type" "%%class-is?" "and" "class" "type")}
      {Lisp-Entry "jazz.complement-type" define #f 4559 9 4559 29 ("jazz.new-complement-type" "jazz.new-restriction-type" "%%get-restriction-type-type" "%%get-complement-type-type" "%%get-restriction-type-base" "%%eq?" "jazz.Complement-Type" "jazz.restriction-of?" "and" "if" "type" "base")}
      {Lisp-Entry "jazz.branch-types" define #f 4566 9 4566 26 ("%%cons" "process-expr" "environment" "test")
        {Lisp-Entry "process-not" define #f 4567 11 4567 22 ("process-expr" "revenv" "env" "expr")}
        {Lisp-Entry "process-and" define #f 4570 11 4570 22 ("%%cons" "%%cdr" "process-expr" "newenv" "%%car" "expr" "%%null?" "if" "augmented" "scan" "iter" "let" "env" "expr-list")}
        {Lisp-Entry "process-or" define #f 4578 11 4578 21 ("%%cons" "%%cdr" "process-expr" "newenv" "%%car" "expr" "%%null?" "if" "augmented" "scan" "iter" "let" "env" "expr-list")}
        {Lisp-Entry "process-is" define #f 4586 11 4586 21 ("%%cdr" "no" "%%car" "jazz.new-restricted-binding" "%%list" "jazz.new-annotated-frame" "%%cons" "yes" "jazz.Pair" "jazz.Null" "jazz.List" "%%eq?" "no-type" "else" "jazz.resolve-binding" "jazz.Declaration" "%%get-reference-binding" "binding" "jazz.Reference" "%%class-is?" "jazz.type?" "cond" "yes-type" "let" "if" "extract-binding" "actual-type" "origin" "receive" "env" "type-expr" "expr")}
        {Lisp-Entry "extract-binding" define #f 4619 11 4619 26 ("else" "%%get-lexical-binding-type" "jazz.Declaration" "values" "%%get-annotated-variable-variable" "origin" "%%car" "jazz.find-annotated" "actual-type" "actual-variable" "frame" "receive" "jazz.Variable" "cond" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "if" "env" "expr")}
        {Lisp-Entry "revenv" define #f 4633 11 4633 17 ("%%car" "%%cdr" "%%cons" "env")}
        {Lisp-Entry "process-expr" define #f 4636 11 4636 23 ("%%cdr" "no" "%%get-nillable-type-type" "jazz.new-restricted-binding" "%%list" "jazz.new-annotated-frame" "%%cons" "yes" "jazz.Nillable-Type" "extract-binding" "actual-type" "origin" "receive" "jazz.not-type-tests" "jazz.type-tests" "%%table-ref" "class" "else" "revenv" "jazz.dialect.language.functional.is-not?" "%%cadr" "process-is" "2" "jazz.dialect.kernel.is?" "%%car" "process-not" "1" "%%fx=" "scheme.dialect.kernel.not" "case" "%%length" "count" "%%get-call-arguments" "arguments" "%%get-declaration-locator" "operator-locator" "jazz.Declaration" "%%get-reference-binding" "operator-binding" "jazz.Reference" "if" "%%get-call-operator" "operator" "let" "jazz.Call" "%%get-or-expressions" "process-or" "jazz.Or" "%%get-and-expressions" "process-and" "jazz.And" "%%class-is?" "cond" "env" "expr")}}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.If") 4687 21 4687 41 ("%%get-expression-source" "%%get-code-type" "jazz.extend-type" "jazz.simplify-begin" "jazz.sourcified-form" "if" "jazz.new-code" "%%get-if-no" "no" "%%get-if-yes" "yes" "jazz.emit-expression" "jazz.branch-types" "no-environment" "yes-environment" "jazz.bind" "expression" "%%get-if-test" "test" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.If") 4701 21 4701 41 ("%%get-if-no" "%%get-if-yes" "%%get-if-test" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Cond" define-class ("class runtime") 4717 27 4717 36 ()}
      {Lisp-Entry "jazz.new-cond" define #f 4720 9 4720 22 ("jazz.Cond" "jazz.allocate-cond" "clauses" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Cond") 4724 21 4724 41 ("%%get-expression-source" "%%get-code-type" "lambda" "map" "jazz.extend-types" "%%cdr" "%%cons" "=>" "jazz.emit-expression" "jazz.sourcified-form" "else" "'else" "%%not" "output" "jazz.branch-types" "no-environment" "yes-environment" "jazz.bind" "%%cddr" "body" "%%cadr" "arrow?" "test" "%%car" "clause" "%%null?" "if" "recurse" "cond" "jazz.new-code" "expression" "%%get-cond-clauses" "clauses" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Cond") 4750 21 4750 41 ("%%get-cond-clauses" "jazz.fold-expression" "%%not" "if" "%%cdr" "body" "%%car" "test" "let" "clause" "lambda" "map" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Case" define-class ("class runtime") 4770 27 4770 36 ()}
      {Lisp-Entry "jazz.new-case" define #f 4773 9 4773 22 ("jazz.Case" "jazz.allocate-case" "clauses" "target" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Case") 4777 21 4777 41 ("%%get-expression-source" "%%get-code-type" "jazz.extend-types" ",tries" "%%car" "tries" "emited-clause" "jazz.sourcified-form" "case" "jazz.new-code" "jazz.emit-expression" "%%cdr" "body" "clause" "lambda" "map" "emited-clauses" "%%get-case-clauses" "clauses" "expression" "%%get-case-target" "target" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Case") 4797 21 4797 41 ("%%get-case-clauses" "cdr" "map" "jazz.fold-expressions" "%%get-case-target" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.And" define-class ("class runtime") 4811 27 4811 35 ()}
      {Lisp-Entry "jazz.new-and" define #f 4814 9 4814 21 ("jazz.And" "jazz.allocate-and" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.And") 4818 21 4818 41 ("%%get-expression-source" "jazz.Any" "expression" "%%get-and-expressions" "jazz.emit-expressions" "jazz.codes-forms" "and" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.And") 4825 21 4825 41 ("%%get-and-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Or" define-class ("class runtime") 4838 27 4838 34 ()}
      {Lisp-Entry "jazz.new-or" define #f 4841 9 4841 20 ("jazz.Or" "jazz.allocate-or" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Or") 4845 21 4845 41 ("%%get-expression-source" "jazz.Any" "expression" "%%get-or-expressions" "jazz.emit-expressions" "jazz.codes-forms" "or" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Or") 4852 21 4852 41 ("%%get-or-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Declare" define-class ("class runtime") 4865 27 4865 39 ()}
      {Lisp-Entry "jazz.new-declare" define #f 4868 9 4868 25 ("jazz.Declare" "jazz.allocate-declare" "declarations")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Declare") 4872 21 4872 41 ("jazz.Any" ",@declarations" "declare" "jazz.new-code" "expression" "%%get-declare-declarations" "declarations" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Declare") 4880 21 4880 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Include" define-class ("class runtime") 4892 27 4892 41 ()}
      {Lisp-Entry "jazz.new-c-include" define #f 4895 9 4895 27 ("jazz.C-Include" "jazz.allocate-c-include" "name")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.C-Include") 4899 21 4899 41 ("jazz.Any" "%%string-append" "c-declare" "jazz.new-code" "expression" "%%get-c-include-name" "name" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.C-Include") 4907 21 4907 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Declare" define-class ("class runtime") 4919 27 4919 41 ()}
      {Lisp-Entry "jazz.new-c-declare" define #f 4922 9 4922 27 ("jazz.C-Declare" "jazz.allocate-c-declare" "code")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.C-Declare") 4926 21 4926 41 ("jazz.Any" ",code" "c-declare" "jazz.new-code" "expression" "%%get-c-declare-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.C-Declare") 4934 21 4934 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Named-Declare-Declaration" define-class ("class runtime") 4946 27 4946 59 ()}
      {Lisp-Entry "jazz.new-c-named-declare-declaration" define #f 4949 9 4949 45 ("jazz.setup-declaration" "jazz.C-Named-Declare-Declaration" "jazz.allocate-c-named-declare-declaration" "new-declaration" "let" "code" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.C-Named-Declare-Declaration") 4955 21 4955 42 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" generic/specific ("jazz.C-Named-Declare-Declaration") 4959 21 4959 55 (",code" "c-declare" "declaration" "%%get-c-named-declare-declaration-code" "code" "let")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.C-Named-Declare-Declaration") 4964 21 4964 42 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Initialize" define-class ("class runtime") 4976 27 4976 44 ()}
      {Lisp-Entry "jazz.new-c-initialize" define #f 4979 9 4979 30 ("jazz.C-Initialize" "jazz.allocate-c-initialize" "code")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.C-Initialize") 4983 21 4983 41 ("jazz.Any" ",code" "c-initialize" "jazz.new-code" "expression" "%%get-c-initialize-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.C-Initialize") 4991 21 4991 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Function" define-class ("class runtime") 5003 27 5003 42 ()}
      {Lisp-Entry "jazz.new-c-function" define #f 5006 9 5006 28 ("jazz.C-Function" "jazz.allocate-c-function" "expansion")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.C-Function") 5010 21 5010 41 ("jazz.Any" "expression" "%%get-c-function-expansion" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.C-Function") 5017 21 5017 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Parameterize" define-class ("class runtime") 5029 27 5029 44 ()}
      {Lisp-Entry "jazz.new-parameterize" define #f 5032 9 5032 30 ("jazz.Parameterize" "jazz.allocate-parameterize" "body" "bindings")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Parameterize") 5036 21 5036 41 ("%%get-code-type" "jazz.sourcified-form" "%%cdr" "value" "%%car" "variable" "binding" "lambda" "map" "parameterize" "jazz.new-code" "jazz.emit-expression" "body-code" "%%get-parameterize-body" "body" "expression" "%%get-parameterize-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Parameterize") 5052 21 5052 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Time-Special" define-class ("class runtime") 5064 27 5064 44 ()}
      {Lisp-Entry "jazz.new-time-special" define #f 5067 9 5067 30 ("jazz.Time-Special" "jazz.allocate-time" "expressions")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Time-Special") 5071 21 5071 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "begin" "time" "jazz.new-code" "expression" "%%get-time-special-expressions" "expressions" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Time-Special") 5081 21 5081 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.emit-namespace-statements" define #f 5093 9 5093 39 ("jazz.queue-list" "jazz.sourcified-form" "jazz.emit-expression" "code" "jazz.emit-declaration" "jazz.enqueue" "jazz.Declaration" "%%class-is?" "if" "statement" "lambda" "for-each" "jazz.new-queue" "queue" "let" "environment" "declaration" "statements")}
      {Lisp-Entry "jazz.emit-statements-code" define #f 5105 9 5105 34 ("jazz.new-code" "jazz.sourcified-form" "%%get-code-type" "set!" "jazz.emit-expression" "code" "jazz.emit-declaration" "jazz.Declaration" "%%class-is?" "if" "statement" "lambda" "map" "emited" "last-type" "let" "environment" "declaration" "statements")}
      {Lisp-Entry "jazz.fold-statement" define #f 5118 9 5118 28 ("jazz.fold-expression" "jazz.fold-declaration" "jazz.Declaration" "%%class-is?" "if" "s" "k" "f" "statement")}
      {Lisp-Entry "jazz.fold-statements" define #f 5124 9 5124 29 ("%%cdr" "jazz.fold-statements" "%%car" "jazz.fold-statement" "%%null?" "if" "seed" "s" "k" "f" "statements")}
      {Lisp-Entry "jazz.walk" define #f 5136 9 5136 18 ("jazz.walk-constant" "else" "%%get-syntactic-closure-form" "%%get-syntactic-closure-environment" "append" "jazz.walk" "syntactic-closure?" "jazz.walk-form" "%%pair?" "jazz.walk-symbol" "identifier?" "cond" "jazz.source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-list" define #f 5148 9 5148 23 ("jazz.queue-list" "jazz.walk" "jazz.enqueue" "continuation-capture" "form" "lambda" "for-each" "jazz.new-queue" "queue" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-body" define #f 5158 9 5158 23 ("jazz.queue-list" "jazz.walk-internal-define" "map" "jazz.enqueue" "jazz.new-variable" "variable" "%%symbol?" "name" "%%desourcify" "%%cadr" "signature" "internal-define" "augmented-environment" "jazz.new-queue" "variables" "jazz.walk-list" "jazz.new-body" "%%car" "%%eq?" "%%null?" "or" "scan" "iter" "expressions" "'expressions" "else" "defines" "'defines" "%%cons" "jazz.define-form?" "jazz.source-code" "%%cdr" "jazz.error" "%%neq?" "set!" "%%not" "if" "substate" "sub" "for-each" "state" "jazz.begin-form?" "cond" "form" "lambda" "process" "letrec" "internal-defines" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-internal-define" define #f 5201 9 5201 34 ("jazz.walk" "jazz.new-internal-define" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "jazz.source-code" "%%cdr" "jazz.parse-define" "parameters" "value" "specifier" "name" "receive" "variable" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-define" define #f 5207 9 5207 26 (",@body" ",@specifier-list" ",parameters" "%%list" "specifier-list" "body" "%%desourcify" "parameters" "values" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "name" "let" "%%car" "jazz.source-code" "%%symbol?" "if" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-quote" define #f 5226 9 5226 24 ("jazz.walk-constant" "jazz.Null" "quote" "jazz.new-constant" "%%null?" "if" "%%cadr" "expression" "strip-syntactic-closures" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-keyword" define #f 5234 9 5234 26 ("jazz.Keyword" "jazz.new-constant" "keyword" "walker")}
      {Lisp-Entry "jazz.walk-enumerator" define #f 5238 9 5238 29 ("jazz.Symbol" "quote" "'quote" "%%list" "jazz.new-constant" "enumerator" "walker")}
      {Lisp-Entry "jazz.walk-constant" define #f 5242 9 5242 27 ("jazz.walk-literal/constant" "else" "jazz.Pair" "jazz.scheme-pair-literal?" "jazz.Any" "#!rest" "#!key" "#!optional" "%%eq?" "%%box?" "or" "jazz.Null" "%%null?" "jazz.Values" "%%values?" "jazz.F64Vector" "%%f64vector?" "jazz.F32Vector" "%%f32vector?" "jazz.U64Vector" "%%u64vector?" "jazz.S64Vector" "%%s64vector?" "jazz.U32Vector" "%%u32vector?" "jazz.S32Vector" "%%s32vector?" "jazz.U16Vector" "%%u16vector?" "jazz.S16Vector" "%%s16vector?" "jazz.U8Vector" "%%u8vector?" "jazz.S8Vector" "%%s8vector?" "jazz.Vector" "%%vector?" "jazz.Symbol" ",form-src" "quote" "%%symbol?" "jazz.Number" "%%number?" "jazz.Flonum" "%%flonum?" "jazz.Fixnum" "%%fixnum?" "jazz.Keyword" "%%keyword?" "jazz.String" "%%string?" "jazz.Char" "%%char?" "jazz.Boolean" "jazz.new-constant" "%%boolean?" "cond" "jazz.source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.scheme-pair-literal?" define #f 5297 9 5297 34 ("%%cdr" "%%car" "%%pair?" "and" "%%vector?" "%%symbol?" "%%number?" "%%keyword?" "%%string?" "%%char?" "%%boolean?" "%%null?" "or" "expr" "lambda" "scheme-data?" "letrec" "form")}
      {Lisp-Entry "jazz.walk-literal/constant" define #f 5319 9 5319 35 ("jazz.lookup-reference" "jazz.new-constant" "%%class-of" "%%get-category-name" "jazz.identifier-name" "if" "literal-type" "%%set-cdr!" "%%get-module-declaration-literals" "%%set-module-declaration-literals" "info" "%%get-declaration-locator" "%%symbol->string" "%%string-append" "jazz.generate-symbol" "locator" "jazz.walk-error" "else" "%%cdr" "cons" "%%pair?" ",arg" "quote" "arg" "lambda" "map" ",constructor-name" "%%desourcify" "jazz.require-literal-constructor" "%%car" "constructor-name" "%%get-literal-arguments" "arguments" "%%get-literal-name" "name" "cond" "jazz.walk" "jazz.walker-environment" "%%cons" "walk-literal/constant" "define" "jazz.Literal" "%%is?" "literal?" "%%get-declaration-toplevel" "module-declaration" "let" "literal/constant" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.make-symbolic-chars" define #f 5351 9 5351 33 ("eq?" "test:" "%%cdr" "integer->char" "%%car" "%%cons" "pair" "lambda" "map" "%%list->table" "alist")}
      {Lisp-Entry "jazz.Symbolic-Chars" define #f 5359 8 5359 27 ("#xA9" "copyright" "#x7F" "delete" "#x7D" "close-brace" "#x7B" "open-brace" "#x60" "backquote" "#x5F" "underscore" "#x5E" "exponential" "#x5D" "close-bracket" "#x5C" "backslash" "#x5B" "open-bracket" "#x40" "at" "#x3F" "question-mark" "#x3B" "semi-colon" "#x3A" "colon" "#x2F" "slash" "#x2E" "period" "#x2D" "minus" "#x2C" "comma" "#x2B" "plus" "#x2A" "times" "#x29" "close-parenthesis" "#x28" "open-parenthesis" "#x27" "quote" "#x26" "ampersand" "#x23" "sharp" "#x22" "double-quote" "#x21" "exclamation-point" "#x20" "space" "#x1F" "down-arrow" "#x1E" "up-arrow" "#x1D" "right-arrow" "#x1C" "left-arrow" "#x1B" "escape" "#x0D" "return" "#x0C" "page-down" "#x0B" "page-up" "#x0A" "linefeed" "#x09" "tab" "#x08" "backspace" "#x05" "info" "#x04" "end" "#x03" "enter" "#x01" "home" "#x00" "zero" "jazz.make-symbolic-chars")}
      {Lisp-Entry "jazz.symbolic-char" define #f 5407 9 5407 27 ("jazz.Symbolic-Chars" "%%table-ref" "name")}
      {Lisp-Entry "jazz.register-variable" define #f 5416 9 5416 31 ("%%get-module-declaration-variables" "jazz.enqueue" "%%cons" "variable" "%%get-declaration-locator" "%%symbol->string" "%%string-append" "jazz.generate-symbol" "symbol" "%%get-declaration-toplevel" "module-declaration" "let" "value" "suffix" "declaration")}
      {Lisp-Entry "jazz.walk-symbol" generic/specific ("jazz.Walker~virtual-runtime") 5429 30 5429 46 ("symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol" generic/specific ("jazz.Walker") 5432 21 5432 37 ("jazz.walk-symbol-reference" "else" "walker" "jazz.walk-enumerator" "jazz.enumerator?" "cond" "jazz.source-code" "symbol" "let" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-setbang" define #f 5440 9 5440 26 ("%%desourcify" "jazz.walk-error" "jazz.walk-symbol-assignment" "%%symbol?" "if" "%%cddr" "%%car" "value" "jazz.source-code" "%%cadr" "variable" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-symbol" define #f 5448 9 5448 27 ("jazz.register-autoload-declaration" "%%get-declaration-toplevel" "module" "jazz.Autoload-Declaration" "validate-compatibility" "jazz.Declaration" "%%class-is?" "and" "jazz.source-code" "syntactic-closure-form" "%%get-syntactic-closure-environment" "lookup" "or" "syntactic-closure?" "if" "referenced-declaration" "let" "symbol-src" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "lookup-composite" define #f 5449 11 5449 27 ("symbol-src" "resume" "jazz.walk-error" "jazz.new-module-reference" "%%get-declaration-toplevel" "jazz.new-autoload-declaration" "jazz.Autoload-Declaration" "%%is?" "if" "declaration" "jazz.public-access" "jazz.lookup-declaration" "decl" "jazz.outline-module" "exported-module-reference" "let" "jazz.split-composite" "name" "module-name" "receive" "symbol" "environment" "walker")}
        {Lisp-Entry "lookup" define #f 5459 11 5459 17 ("declaration" "jazz.walk-binding-lookup" "binding" "lambda" "jazz.find-in" "lookup-composite" "jazz.composite-name?" "if" "symbol" "environment" "walker")}
        {Lisp-Entry "validate-compatibility" define #f 5466 11 5466 33 ("symbol-src" "jazz.walk-warning" "%%get-declaration-locator" "referenced-locator" "let" "deprecated" "'deprecated" "%%get-declaration-compatibility" "%%eq?" "if" "referenced-declaration" "declaration" "walker")}}
      {Lisp-Entry "jazz.walk-symbol-reference" define #f 5492 9 5492 35 ("jazz.walk-free-reference" "jazz.new-reference" "jazz.walk-binding-referenced" "jazz.Variable" "%%class-is?" "begin" "if" "jazz.lookup-symbol" "binding" "let" "symbol-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-free-reference" generic/specific ("jazz.Walker~virtual-runtime") 5502 30 5502 54 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-reference" generic/specific ("jazz.Walker") 5505 21 5505 45 ("walker" "jazz.walk-unresolved" "symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" generic/specific ("jazz.Walker~virtual-runtime") 5514 30 5514 57 ("value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" generic/specific ("jazz.Walker") 5517 21 5517 48 ("jazz.walk-free-assignment" "jazz.walk" "jazz.new-assignment" "jazz.walk-binding-validate-assignment" "begin" "if" "walker" "jazz.lookup-symbol" "binding" "let" "value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" generic/specific ("jazz.Walker~virtual-runtime") 5526 30 5526 55 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" generic/specific ("jazz.Walker") 5529 21 5529 46 ("walker" "jazz.walk-unresolved" "symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" generic/specific ("jazz.Walker~virtual-runtime") 5538 30 5538 44 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" generic/specific ("jazz.Walker") 5541 21 5541 35 ("jazz.walk-call" "jazz.walk" "jazz.walk-binding-expand-form" "expansion" "jazz.walk-binding-expandable?" "jazz.walk-binding-walk-form" "jazz.walk-binding-walkable?" "if" "else" "and" "%%get-reference-binding" "ref" "jazz.Reference" "jazz.Declaration" "jazz.Special-Form" "%%class-is?" "or" "walker" "jazz.lookup-symbol" "identifier?" "cond" "binding" "%%car" "jazz.source-code" "procedure-expr" "let" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.lookup-macro-form" define #f 5572 9 5572 31 ("jazz.walk-binding-expandable?" "and" "if" "jazz.lookup-symbol" "binding" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-macros" define #f 5579 9 5579 27 ("jazz.expand-macros" "jazz.walk-binding-expand-form" "expansion" "jazz.lookup-macro-form" "%%symbol?" "and" "binding" "%%car" "procedure-expr" "let" "jazz.source-code" "%%pair?" "%%not" "if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-call" define #f 5595 9 5595 23 ("jazz.walk-list" "jazz.walk" "lambda" "continuation-capture" "jazz.new-call" "jazz.desourcify-all" "jazz.walk-binding-validate-call" "if" "%%cdr" "arguments" "jazz.source-code" "%%car" "operator" "let" "form-src" "procedure-binding" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-arguments" generic/specific ("jazz.Walker~virtual-runtime") 5607 30 5607 53 ("form-src" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" generic/specific ("jazz.Walker") 5610 21 5610 44 ("%%fx<" "walker" "jazz.walk-error" "%%fx>" "%%not" "and" "cond" "%%get-signature-named" "%%get-signature-optional" "%%not-null?" "or" "rest?" "%%get-lexical-binding-name" "name" "%%length" "passed" "%%get-signature-rest" "rest" "%%get-signature-mandatory" "mandatory" "let" "form-src" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.walk-require-declaration" define #f 5630 9 5630 38 ("jazz.listify" "jazz.add-module-require" "require" "lambda" "jazz.load-unit" "for-each" "eval" "'eval" "jazz.walk-for" "%%eq?" "%%when" "%%cdr" "jazz.filter-features" "requires" "%%get-declaration-toplevel" "module-declaration" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-require" define #f 5642 9 5642 26 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-export-declaration" define #f 5651 9 5651 37 ("jazz.add-module-export" "export-invoice" "lambda" "for-each" "%%cdr" "jazz.filter-features" "walk-exports" "export-invoices" "%%get-declaration-toplevel" "module-declaration" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "walk-exports" define #f 5652 11 5652 23 ("walker" "jazz.walk-module-export" "export" "%%cdr" "jazz.new-export-reference" "symbol" "lambda" "map" "jazz.new-export-invoice" "%%list" "if" "%%append" "module-exports" "%%assq" "symbols-exports" "assv" "symbol?" "jazz.partition" "partition" "let" "exports")}}
      {Lisp-Entry "jazz.walk-export" define #f 5673 9 5673 25 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-import-declaration" define #f 5682 9 5682 37 ("jazz.add-module-import" "%%get-lexical-binding-name" "jazz.load-unit" "%%get-module-invoice-module" "import-invoice" "lambda" "for-each" "eval" "'eval" "jazz.walk-for" "%%eq?" "%%when" "%%cdr" "jazz.filter-features" "walk-imports" "import-invoices" "%%get-declaration-toplevel" "module-declaration" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "jazz.walk-module-import" define #f 5683 11 5683 34 ("jazz.new-export-reference" "symbol" "lambda" "map" "%%not" "if" "jazz.lookup-module" "jazz.new-import-invoice" "jazz.parse-module-invoice" "module-autoload" "module-only" "module-version" "module-phase" "module-load" "module-name" "receive" "import")
          {Lisp-Entry "jazz.lookup-module" define #f 5684 13 5684 31 ("declaration" "resume" "walker" "jazz.walk-unresolved" "error?:" "jazz.outline-module" "or" "name")}}
        {Lisp-Entry "walk-imports" define #f 5699 11 5699 23 ("jazz.listify" "jazz.walk-module-import" "import" "lambda" "map" "imports")}}
      {Lisp-Entry "jazz.walk-import" define #f 5718 9 5718 25 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-proclaim" generic/specific ("jazz.Walker~virtual-runtime") 5727 30 5727 52 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-proclaim" generic/specific ("jazz.Walker") 5730 21 5730 43 ("walker" "jazz.walk-error" "jazz.Module-Declaration" "%%class-is?" "%%not" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-proclaim" define #f 5735 9 5735 27 ("jazz.new-proclaim" "%%cdr" "clauses" "%%desourcify" "form" "let" "jazz.validate-proclaim" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.native-modifiers" define #f 5747 8 5747 29 ()}
      {Lisp-Entry "jazz.native-keywords" define #f 5751 8 5751 28 ()}
      {Lisp-Entry "jazz.parse-native" define #f 5755 9 5755 26 ("values" "%%null?" "%%assert" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "name" "let" "jazz.native-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-declaration" define #f 5764 9 5764 37 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-export-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.Any" "jazz.walk-specifier" "if" "type" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native" define #f 5775 9 5775 25 ("jazz.require-declaration" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.native-syntax-modifiers" define #f 5787 8 5787 36 ()}
      {Lisp-Entry "jazz.native-syntax-keywords" define #f 5791 8 5791 35 ()}
      {Lisp-Entry "jazz.parse-native-syntax" define #f 5795 9 5795 33 ("values" "%%null?" "%%assert" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "name" "let" "jazz.native-syntax-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-syntax-declaration" define #f 5804 9 5804 44 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-export-syntax-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.Any" "jazz.walk-specifier" "if" "type" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native-syntax" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-syntax" define #f 5815 9 5815 32 ("jazz.require-declaration" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native-syntax" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.macro-modifiers" define #f 5827 8 5827 28 ()}
      {Lisp-Entry "jazz.parse-macro" define #f 5832 9 5832 25 ("values" "parameters" "jazz.Any" "type" "%%desourcify" "name" "%%cdr" "body" "%%car" "jazz.source-code" "signature" "let*" "jazz.macro-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-macro-declaration" define #f 5842 9 5842 36 ("jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.new-macro-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.walk-parameters" "signature" "let" "jazz.source-code" "%%cdr" "jazz.parse-macro" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-macro" define #f 5852 9 5852 24 ("%%set-declaration-source" "jazz.walk-body" "%%set-macro-declaration-body" "%%set-macro-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.require-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-macro" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.syntax-modifiers" define #f 5868 8 5868 29 ()}
      {Lisp-Entry "jazz.parse-syntax" define #f 5873 9 5873 26 ("values" "parameters" "jazz.Any" "type" "%%desourcify" "name" "%%cdr" "body" "%%car" "jazz.source-code" "signature" "let*" "jazz.syntax-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-syntax-declaration" define #f 5883 9 5883 37 ("jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.new-syntax-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.walk-parameters" "signature" "let" "jazz.source-code" "%%cdr" "jazz.parse-syntax" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-syntax" define #f 5893 9 5893 25 ("%%set-declaration-source" "jazz.walk-body" "%%set-syntax-declaration-body" "%%set-syntax-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.require-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-syntax" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-define-syntax-declaration" define #f 5908 9 5908 44 ("jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.Any" "jazz.new-define-syntax-declaration" "jazz.find-child-declaration" "or" "new-declaration" "%%car" "name" "let" "jazz.source-code" "%%cdr" "jazz.syntax-modifiers" "jazz.parse-modifiers" "rest" "compatibility" "access" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-define-syntax" define #f 5919 9 5919 32 ("%%set-declaration-source" "jazz.walk-body" "%%set-syntax-declaration-body" "%%set-syntax-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.require-declaration" "new-declaration" "body" "%%car" "name" "let*" "jazz.source-code" "%%cdr" "jazz.syntax-modifiers" "jazz.parse-modifiers" "rest" "compatibility" "access" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-let-syntax" define #f 5937 9 5937 29 ("%%source-code" "jazz.walk-list" "jazz.new-begin" "jazz.new-define-syntax-form" "%%get-code-form" "eval" "expander" "jazz.walk" "jazz.emit-expression" "expander-src" "value" "%%car" "jazz.source-code" "name" "binding" "lambda" "map" "append" "augmented-environment" "let" "jazz.walk-error" "%%pair?" "%%null?" "or" "%%assertion" "%%cddr" "body" "bindings" "unwrap-syntactic-closure" "%%cadr" "bindings-src" "let*" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-letrec-syntax" define #f 5961 9 5961 32 ("jazz.walk-let-syntax" "apply" "args")}
      {Lisp-Entry "jazz.walk-parameters" define #f 5975 9 5975 29 ("values" "jazz.queue-list" "append" "jazz.new-signature" "signature" "jazz.List" "jazz.new-rest-parameter" "parameter-expression" "%%symbol?" "%%null?" "jazz.new-named-parameter" "keyword-parameter" "%%keyword->string" "%%string->symbol" "%%eq?" "%%cddr" "jazz.new-optional-parameter" "optional-parameter" "default" "1" "%%length" "%%fx=" "jazz.new-parameter" "positional-parameter" "jazz.walk-specifier" "type" "rest" "lambda" "jazz.parse-specifier" "%%cdr" "jazz.enqueue" "jazz.walk" "jazz.Any" "jazz.new-dynamic-parameter" "dynamic-parameter" "%%cadr" "variable" "jazz.specifier->name" "code" "specifier" "memq" "jazz.desourcify" "jazz.walk-error" "%%not" "parameter-src" "let*" "case" "section" "allowed?" "positional" "'positional" "optional" "'optional" "else" "keyword" "'keyword" "%%keyword?" "dynamic" "'dynamic" "jazz.specifier?" "or" "cond" "%%car" "jazz.source-code" "first" "%%pair?" "if" "parameter" "parameter-section" "%%cons" "set!" "%%when" "expression" "augment-environment" "sections" "scan" "iterate-parameters" "define" "keywords" "optionals" "positionals" "jazz.new-queue" "dynamics" "augmented-environment" "let" "walk?" "extended?" "parameters" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-signature-casts" define #f 6081 9 6081 34 ("jazz.queue-list" "%%get-signature-named" "%%get-signature-optional" "%%get-signature-positional" "for-each" "jazz.enqueue" "jazz.new-queue" "set!" "%%not" "begin" "jazz.emit-binding-reference" "jazz.emit-parameter-cast" "cast" "jazz.Any" "%%neq?" "and" "if" "%%get-lexical-binding-type" "type" "parameter" "process" "define" "queue" "let" "environment" "source-declaration" "signature")}
      {Lisp-Entry "jazz.emit-signature" define #f 6103 9 6103 28 ("jazz.queue-list" "#!rest" "#!key" "#!optional" "%%null?" "%%not" "%%when" "for-each" "jazz.emit-parameter" "jazz.enqueue" "parameter" "emit" "define" "jazz.new-queue" "queue" "%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "let" "environment" "declaration" "signature")}
      {Lisp-Entry "jazz.Catalog" define #f 6132 8 6132 20 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-catalog" define #f 6136 9 6136 25 ("jazz.Catalog")}
      {Lisp-Entry "jazz.get-catalog-entry" define #f 6140 9 6140 31 ("jazz.Catalog" "%%table-ref" "unit-name")}
      {Lisp-Entry "jazz.set-catalog-entry" define #f 6144 9 6144 31 ("jazz.Catalog" "%%table-set!" "entry" "unit-name")}
      {Lisp-Entry "jazz.set-catalog-entry-status" define #f 6148 9 6148 38 ("%%cons" "jazz.set-catalog-entry" "%%cdr" "%%pair?" "if" "jazz.get-catalog-entry" "entry" "declaration" "let" "status" "unit-name")}
      {Lisp-Entry "jazz.release-catalog-entries" define #f 6156 9 6156 37 ("%%cdr" "jazz.set-catalog-entry" "%%pair?" "if" "entry" "unit-name" "lambda" "jazz.Catalog" "%%iterate-table")}
      {Lisp-Entry "jazz.call-with-catalog-entry-lock" define #f 6163 9 6163 42 ("jazz.get-catalog-entry" "%%pair?" "if" "jazz.pop-load-stack" ":walk" "':walk" "jazz.push-load-stack" ":walking" "':walking" "jazz.set-catalog-entry-status" "dynamic-wind" "lambda" "jazz.call-with-load-lock" "thunk" "unit-name")}
      {Lisp-Entry "jazz.outline-feedback" define #f 6177 8 6177 29 ("make-parameter")}
      {Lisp-Entry "jazz.outline-unit" define #f 6181 9 6181 26 ("jazz.set-catalog-entry" "%%not" "jazz.outline-feedback" "feedback" "lambda" "jazz.call-with-catalog-entry-lock" "or" "jazz.Load-Stack" "cdr" "symbol->string" "map" "reverse" "jazz.join-strings" "jazz.error" "%%cdr" "declaration" "%%car" "%%pair?" "status" "jazz.get-catalog-entry" "entry" "let" "load-toplevel-declaration" "not" "if" "error?" "use-catalog?" "#!key" "unit-name")
        {Lisp-Entry "load-toplevel-declaration" define #f 6182 11 6182 36 ("jazz.parse-module-declaration" "module" "%%cdr" "jazz.parse-unit-declaration" "unit" "case" "%%car" "jazz.source-code" "kind" "interpret" "'interpret" "jazz.walk-for" "jazz.requested-unit-resource" "jazz.requested-unit-name" "parameterize" "read-literals?:" "jazz.read-toplevel-form" "form" "lambda" "jazz.resource-pathname" "jazz.outline-verbose?" "jazz.with-verbose" "%%not" "and" "if" "error?" "unit-name" "jazz.find-unit-src" "src" "let")}}
      {Lisp-Entry "jazz.outline-module" define #f 6222 9 6222 28 ("jazz.Module-Declaration" "%%class-is?" "%%assert" "%%not" "if" "error?:" "jazz.outline-unit" "declaration" "let" "error?" "#!key" "unit-name")}
      {Lisp-Entry "jazz.read-literals?" define #f 6230 8 6230 27 ("make-parameter")}
      {Lisp-Entry "jazz.read-toplevel-form" define #f 6234 9 6234 32 ("%%not" "module" "unit" "%%memq" "jazz.source-code" "%%pair?" "and" "%%cdr" "%%not-null?" "extraneous?" "%%car" "form-src" "jazz.error" "%%null?" "if" "jazz.read-source-all" "all" "jazz.read-literals?" "parameterize" "port" "eol-encoding:" "char-encoding:" "path:" "%%list" "call-with-input-file" "cr-lf" "'cr-lf" "eol-encoding" "jazz.resource-char-encoding" "char-encoding" "lambda" "jazz.pathname-extension" "jazz.with-extension-reader" "jazz.resource-pathname" "source" "let" "read-literals?" "#!key" "resource")}
      {Lisp-Entry "jazz.walk-unit" define #f 6255 9 6255 23 ("%%cdr" "jazz.walk-module" "module" "unit" "%%car" "jazz.source-code" "case" "jazz.read-toplevel-form" "form" "interpret" "'interpret" "jazz.walk-for" "jazz.requested-unit-resource" "jazz.requested-unit-name" "parameterize" "jazz.find-unit-src" "src" "let" "unit-name")}
      {Lisp-Entry "jazz.Core-Dialect" define-class ("class runtime") 6273 27 6273 44 ()}
      {Lisp-Entry "jazz.new-core-dialect" define #f 6276 9 6276 30 ("jazz.Core-Dialect" "jazz.allocate-core-dialect")}
      {Lisp-Entry "jazz.dialect-name" generic/specific ("jazz.Core-Dialect") 6280 21 6280 38 ("'core")}
      {Lisp-Entry "jazz.dialect-walker" generic/specific ("jazz.Core-Dialect") 6284 21 6284 40 ("jazz.new-core-walker")}
      {Lisp-Entry "jazz.Core-Walker" define-class ("class runtime") 6296 27 6296 43 ()}
      {Lisp-Entry "jazz.new-core-walker" define #f 6299 9 6299 29 ("eq?" "test:" "%%make-table" "jazz.new-queue" "jazz.Core-Walker" "jazz.allocate-core-walker")}
      {Lisp-Entry "core" define ("dialect") 6311 21 6311 25 ("jazz.new-core-dialect")}
      {Lisp-Entry "require" define ("special") 6315 28 6315 35 ("jazz.walk-require" "core")}
      {Lisp-Entry "export" define ("special") 6316 28 6316 34 ("jazz.walk-export" "core")}
      {Lisp-Entry "import" define ("special") 6317 28 6317 34 ("jazz.walk-import" "core")}
      {Lisp-Entry "proclaim" define ("special") 6318 28 6318 36 ("jazz.walk-proclaim" "core")}
      {Lisp-Entry "native" define ("special") 6319 28 6319 34 ("jazz.walk-native" "core")}
      {Lisp-Entry "native-syntax" define ("special") 6320 28 6320 41 ("jazz.walk-native-syntax" "core")}
      {Lisp-Entry "macro" define ("special") 6321 28 6321 33 ("jazz.walk-macro" "core")}
      {Lisp-Entry "syntax" define ("special") 6322 28 6322 34 ("jazz.walk-syntax" "core")}
      {Lisp-Entry "define-syntax" define ("special") 6323 28 6323 41 ("jazz.walk-define-syntax" "core")}
      {Lisp-Entry "let-syntax" define ("special") 6324 28 6324 38 ("jazz.walk-let-syntax" "core")}
      {Lisp-Entry "letrec-syntax" define ("special") 6325 28 6325 41 ("jazz.walk-letrec-syntax" "core")}}})
