"Add-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "menu" "Add-Menu.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.menu.Add-Menu" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Add-Menu" class #f 43 20 43 28 ("Context-Menu")}}})
"Alignment-Editor"
 ({Lisp-File-Entry {File jazz.designer "src" "jazz" "designer" "manager" "Alignment-Editor.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.manager.Alignment-Editor" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Alignment-Editor" class #f 48 7 48 23 ("on-resize-both" "resize-both" "on-resize-height" "resize-height" "on-resize-width" "resize-width" "on-space-vertically" "space-vertically" "on-space-horizontally" "space-horizontally" "on-center-vertically" "center-vertically" "on-center-horizontally" "center-horizontally" "on-align-bottom" "align-bottom" "on-align-top" "align-top" "on-align-right" "align-right" "on-align-left" ":form" "Event-Handler" "action-handler:" "Image-Resource" "resource:" "tooltip-text:" "align-left" "name:" "explicit" "initialize" "View")
        {Lisp-Entry "client" property #f 51 12 51 18 ()}
        {Lisp-Entry "flow-layout" slot #f 54 8 54 19 ()}
        {Lisp-Entry "external-name" method #f 75 25 75 38 ("alignment-editor" "'alignment-editor" "rest")}
        {Lisp-Entry "host-title" method #f 84 25 84 35 ()}
        {Lisp-Entry "client-activate" method #f 88 20 88 35 ("set-client" "View-Editor" "is?" "essay" "client" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 94 20 94 37 ("set-client")}
        {Lisp-Entry "finish" method #f 103 20 103 26 ("layout-view" "0" "5" "4" "Rect" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" method #f 109 20 109 26 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "on-align-left" method #f 113 11 113 24 ("align-left" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-top" method #f 120 11 120 23 ("align-top" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-right" method #f 127 11 127 25 ("align-right" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-align-bottom" method #f 134 11 134 26 ("align-bottom" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-center-horizontally" method #f 141 11 141 33 ("center-horizontally" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-center-vertically" method #f 148 11 148 31 ("center-vertically" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-space-horizontally" method #f 155 11 155 32 ("space-horizontally" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-space-vertically" method #f 162 11 162 30 ("space-vertically" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-width" method #f 169 11 169 26 ("resize-width" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-height" method #f 176 11 176 27 ("resize-height" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "on-resize-both" method #f 183 11 183 25 ("resize-both" "bell" "View-Editor" "is-not?" "if" "current-document" "editor" "let" "evt")}
        {Lisp-Entry "get-client" method #f 195 18 195 28 ("client")}
        {Lisp-Entry "set-client" method #f 199 18 199 28 ("client-update" "client" "set!" "clt")}
        {Lisp-Entry "client-update" method #f 204 11 204 24 ("resize-both" "'resize-both" "resize-height" "'resize-height" "resize-width" "'resize-width" "space-vertically" "'space-vertically" "space-horizontally" "'space-horizontally" "center-vertically" "'center-vertically" "center-horizontally" "'center-horizontally" "align-bottom" "'align-bottom" "align-top" "'align-top" "align-right" "'align-right" "client" "align-left" "'align-left" "locate" "set-enabled?")}}}})
"Book-Controller"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "book" "Book-Controller.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.book.Book-Controller" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Book-Controller" class #f 43 20 43 35 ("Document-Controller")
        {Lisp-Entry "get-modified?" method #f 46 20 46 33 ("continuation-return" "get-editor" "get-modified?" "when" "section" "name" "document" "for-each-section" "return" "lambda" "continuation-capture")}
        {Lisp-Entry "set-modified?" method #f 56 20 56 33 ("update-status" "get-editor" "set-modified?" "section" "name" "lambda" "document" "for-each-section" "state")}}}})
"Book-Section"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "book" "Book-Section.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.book.Book-Section" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Book-Section" class #f 40 20 40 32 ("Object")
        {Lisp-Entry "title" slot #f 43 8 43 13 ()}
        {Lisp-Entry "get-title" accessor #f 43 29 43 37 ()}
        {Lisp-Entry "set-title" accessor #f 43 29 43 37 ()}
        {Lisp-Entry "model-name" slot #f 44 8 44 18 ()}
        {Lisp-Entry "get-model-name" accessor #f 44 29 44 37 ()}
        {Lisp-Entry "set-model-name" accessor #f 44 29 44 37 ()}
        {Lisp-Entry "client" slot #f 45 8 45 14 ()}
        {Lisp-Entry "designer" slot #f 46 8 46 16 ()}
        {Lisp-Entry "editor" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-editor" accessor #f 47 29 47 37 ()}
        {Lisp-Entry "set-editor" accessor #f 47 29 47 37 ()}
        {Lisp-Entry "initialize" method #f 50 20 50 30 ("editor~self" "designer~self" "client~self" "model-name~self" "title~self" "set!" "nextmethod" "editor" "editor:" "designer" "designer:" "client" "client:" "model-name" "model-name:" "title" "title:")}
        {Lisp-Entry "print" method #f 63 20 63 25 ("title" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-client" method #f 74 18 74 28 ("client")}
        {Lisp-Entry "set-client" method #f 78 18 78 28 ("set-client" "editor" "when" "designer" "client" "set!" "value")}
        {Lisp-Entry "get-designer" method #f 85 18 85 30 ("editor" "get-designer" "set!" "designer" "unless")}
        {Lisp-Entry "set-designer" method #f 91 18 91 30 ("designer" "set!" "value")}}}})
"Book-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "book" "Book-View.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.book.Book-View" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Book-View" class #f 47 20 47 29 ("eq?" "test:" "make-table" "initialize" "Document" "Layout-View")
        {Lisp-Entry "sections" slot #f 50 8 50 16 ()}
        {Lisp-Entry "book" slot #f 51 8 51 12 ()}
        {Lisp-Entry "get-book" accessor #f 51 44 51 52 ()}
        {Lisp-Entry "set-book" accessor #f 51 44 51 52 ()}
        {Lisp-Entry "controller" slot #f 52 8 52 18 ()}
        {Lisp-Entry "default-extension" method #f 55 20 55 37 ()}
        {Lisp-Entry "extensions" method #f 56 20 56 30 ()}
        {Lisp-Entry "focus-document" method #f 57 20 57 34 ()}
        {Lisp-Entry "current-history-item" method #f 58 20 58 40 ()}
        {Lisp-Entry "compare-moniker" method #f 59 20 59 35 ("moniker")}
        {Lisp-Entry "destroy" method #f 62 20 62 27 ("nextmethod" "controller" "close")}
        {Lisp-Entry "get-version" method #f 72 18 72 29 ("book" "get-version")}
        {Lisp-Entry "get-properties" method #f 76 18 76 32 ("book" "get-properties")}
        {Lisp-Entry "get-description" method #f 80 18 80 33 ("book" "get-description")}
        {Lisp-Entry "get-book-name" method #f 84 18 84 31 ("book" "get-book-name")}
        {Lisp-Entry "add-section" method #f 93 18 93 29 ("sections" "table-set!" "book" "get-client" "when" "section" "name")}
        {Lisp-Entry "remove-section" method #f 98 18 98 32 ("sections" "table-set!" "book" "get-client" "when" "name")}
        {Lisp-Entry "get-section" method #f 103 18 103 29 ("error" "sections" "table-ref" "either" "name")}
        {Lisp-Entry "get-client" method #f 108 18 108 28 ("get-section" "get-client" "name")}
        {Lisp-Entry "get-designer" method #f 112 18 112 30 ("get-section" "get-designer" "name")}
        {Lisp-Entry "get-editor" method #f 116 18 116 28 ("get-section" "get-editor" "name")}
        {Lisp-Entry "for-each-section" method #f 120 18 120 34 ("book" "get-names" "get-section" "name" "lambda" "for-each" "proc")}
        {Lisp-Entry "set-client-from-forms" method #f 131 18 131 39 ("clients-update" "set-client" "book" "book:" "instantiate" "client" "let" "form" "name" "lambda" "for-each-property" "client-forms")}
        {Lisp-Entry "clients-update" method #f 139 26 139 40 ("set-client" "get-section" "section" "let" "client" "name" "lambda" "book" "for-each-client")}
        {Lisp-Entry "update-names" method #f 146 11 146 23 ("branch:" "set-name" "get-designer" "designer" "get-client" "client" "let" "section" "name" "lambda" "for-each-section" "book-name")}
        {Lisp-Entry "new-event" method #f 160 25 160 34 ("set-visible?" "bring-to-front" "update-names" "clients-update" "update-status" "set-newname" "List-Factory" "new" "fact" "get-controller" "controller" "collect-names" "unique-domain-name" "book-name" "get-guest" "book-view" "rest" "new-frame" "apply" "frame" "let*" "host-visible?" "host-visible?:")}
        {Lisp-Entry "collect-names" method #f 176 16 176 29 ("get-children" "get-book-name" "neq?" "and" "get-guest" "guest" "Frame-Host" "is?" "when" "frame" "lambda" "collect" "get-stage" "stage" "class-of" "model" "let" "book")}
        {Lisp-Entry "empty-sections" method #f 192 18 192 32 ("clients-update" "set-name" "get-designer" "designer" "let" "set-client" "self" "book:" "instantiate" "client" "get-model-name" "model-name:" "'new" "action:" "textual?:" "Form" "new" "form" "get-name" "old-name" "get-client" "old-client" "get-section" "section" "let*" "name" "lambda" "for-each" "sections")}
        {Lisp-Entry "install-in-host" method #f 211 20 211 35 ("get-controller" "install-in-host" "nextmethod" "host")}
        {Lisp-Entry "get-controller" method #f 221 20 221 34 ("new-controller" "set!" "controller" "unless")}
        {Lisp-Entry "new-controller" method #f 227 20 227 34 ("self" "Book-Controller" "new")}
        {Lisp-Entry "save" method #f 231 20 231 24 ("get-controller" "save")}
        {Lisp-Entry "save-as" method #f 235 20 235 27 ("get-controller" "save-as")}
        {Lisp-Entry "save-to" method #f 239 20 239 27 ("get-controller" "save-to" "moniker")}
        {Lisp-Entry "save-all" method #f 243 26 243 34 ("get-controller" "save-all")}
        {Lisp-Entry "install-scroller?" method #f 247 20 247 37 ()}
        {Lisp-Entry "get-moniker" method #f 251 11 251 22 ("get-controller" "get-moniker")}
        {Lisp-Entry "set-moniker" method #f 255 11 255 22 ("get-controller" "set-moniker" "moniker")}
        {Lisp-Entry "verify-reload" method #f 259 20 259 33 ()}
        {Lisp-Entry "reload-moniker" method #f 263 20 263 34 ("update-moniker-time" "reload-content" "lambda" "with-locked-update" "when" "moniker")}
        {Lisp-Entry "reload-content" method #f 271 11 271 25 ("update-status" "set-modified?" "load-content" "empty-content" "moniker")}
        {Lisp-Entry "empty-content" method #f 278 29 278 42 ()}
        {Lisp-Entry "get-modified?" method #f 282 20 282 33 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 286 20 286 33 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "update-status" method #f 290 11 290 24 ("get-controller" "update-status")}
        {Lisp-Entry "update-moniker-time" method #f 294 11 294 30 ("get-controller" "update-moniker-time" "moniker")}
        {Lisp-Entry "confirm-close" method #f 298 20 298 33 ("get-controller" "confirm-close" "rest")}
        {Lisp-Entry "tool-update" method #f 302 20 302 31 ("tool?")}
        {Lisp-Entry "console-update" method #f 306 20 306 34 ("console?")}
        {Lisp-Entry "load-content" method #f 315 20 315 32 ("update-status" "clients-update" "book" "load-content" "moniker")}
        {Lisp-Entry "save-content" method #f 326 20 326 32 ("process-saved" "update-status" "set-modified?" "update-moniker-time" "-1" "print-to" "format" "get-title" "output-section" "set!" "output-properties" "output-version" "get-description" "output-header" "when" "first?" "printer" "UTF-8" "'UTF-8" "char-encoding:" "parse" "path:" "list" "call-with-output-file" "get-editor" "process-saving" "branch:" "get-client" "set-name" "get-form" "set-origin" "get-designer" "designer" "section" "name" "for-each-section" "get-base" "base" "let" "lambda" ":wait" "with-cursor" "moniker")}
        {Lisp-Entry "output-version" method #f 358 11 358 25 ("get-version" "format" "printer")}
        {Lisp-Entry "output-properties" method #f 362 20 362 37 ("null?" "if" "format" "get-properties" "properties" "let" "printer")}}}})
"Boolean-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Boolean-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.Boolean-Domain" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Boolean-Domain" class #f 44 7 44 21 ("Domain")
        {Lisp-Entry "validate-value" method #f 52 20 52 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "memq?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 62 20 62 27 ("if" "value")}
        {Lisp-Entry "setup-entry" method #f 73 20 73 31 ("self" "domain:" "parent:" "Boolean-Entry" "new" "client" "view")}}}})
"Boolean-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "entry" "Boolean-Entry.jazz"} 1265059250
    {Lisp-Entry "jazz.designer.entry.Boolean-Entry" module #f 37 18 37 51 ("Entry-Check-Box" "register-autoclass" "jazz")
      {Lisp-Entry "Boolean-Entry" class #f 45 7 45 20 ("selectable?:" "checkbox" "name:" "auto-size?:" "Property-Entry")
        {Lisp-Entry "preferred-size" method #f 53 20 53 34 ("16" "Dimension")}
        {Lisp-Entry "finish" method #f 57 20 57 26 ("self" "checkbox" "'checkbox" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method #f 67 20 67 28 ("checkbox" "'checkbox" "locate")}
        {Lisp-Entry "validate" method #f 76 20 76 28 ("domain")}
        {Lisp-Entry "get-value" method #f 85 20 85 29 ("checkbox" "'checkbox" "locate" "get-checked?")}
        {Lisp-Entry "set-value" method #f 89 20 89 29 ("nil?" "if" "checkbox" "'checkbox" "locate" "set-checked?" "value")}
        {Lisp-Entry "get-modified?" method #f 93 20 93 33 ("checkbox" "'checkbox" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 97 20 97 33 ("checkbox" "'checkbox" "locate" "set-modified?" "value")}
        {Lisp-Entry "set-editable?" method #f 106 20 106 33 ("checkbox" "'checkbox" "locate" "set-editable?" "value")}
        {Lisp-Entry "set-enabled?" method #f 115 20 115 32 ("checkbox" "'checkbox" "locate" "set-enabled?" "value")}}
      {Lisp-Entry "Entry-Check-Box" class #f 124 7 124 22 ("initialize" "Check-Box")
        {Lisp-Entry "editor" property #f 127 12 127 18 ()}
        {Lisp-Entry "get-editor" accessor #f 127 43 127 51 ()}
        {Lisp-Entry "set-editor" accessor #f 127 43 127 51 ()}
        {Lisp-Entry "focus-gain" method #f 130 20 130 30 ("editor-focus-gain" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}
        {Lisp-Entry "focus-lose" method #f 138 20 138 30 ("editor-focus-lose" "get-manager" "manager" "let" "selectable?" "editor" "and" "when" "nextmethod")}}}})
"Boolean-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Boolean-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Boolean-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Boolean-Row" class #f 43 20 43 31 ("Combo-Row")
        {Lisp-Entry "initialize" method #f 46 20 46 30 ("set-choices" "nextmethod" "apply" "rest")}
        {Lisp-Entry "double-click" method #f 51 20 51 32 ("focus-editor" "value" "not" "set-edited-value" "enter-edited-value" "pos")}}}})
"Branches-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "branch" "Branches-Editor.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.branch.Branches-Editor" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Branches-Editor" class #f 47 20 47 35 ("183" "width:" "branch" "tree" "shown?:" "header" "content" "flat?:" "vscroll?:" "hscroll?:" "scroller" "on-new-default" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "new-default" "tools" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "external-name" method #f 62 25 62 38 ("branches-editor" "'branches-editor" "rest")}
        {Lisp-Entry "host-icon" method #f 71 25 71 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 75 25 75 35 ()}
        {Lisp-Entry "client-activate" method #f 79 20 79 35 ("client-update" "else" "get-designer" "set-designer" "get-client" "set-client" "set-editor" "View-Editor" "is?" "cond" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 92 20 92 37 ("client-update" "set-designer" "set-client" "set-editor")}
        {Lisp-Entry "client-update" method #f 99 11 99 24 ("get-client" "new-default" "'new-default" "locate" "set-enabled?")}
        {Lisp-Entry "focus-default" method #f 108 20 108 33 ("auto-select-first" "acquire-focus" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" method #f 114 20 114 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "install-in-host" method #f 123 20 123 35 ("2" "0" "Rect" "set-layout-insets" "fill" "'fill" "get-root" "set-layout-type" "nextmethod" "host")}
        {Lisp-Entry "get-tree" method #f 136 18 136 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "on-new-default" method #f 145 11 145 25 ("new-default" "evt")}
        {Lisp-Entry "new-default" method #f 154 29 154 40 ("get-tree" "new-default-branch")}
        {Lisp-Entry "get-editor" method #f 163 18 163 28 ("get-tree" "get-editor")}
        {Lisp-Entry "set-editor" method #f 167 18 167 28 ("get-tree" "set-editor" "editor")}
        {Lisp-Entry "get-client" method #f 176 18 176 28 ("get-tree" "get-client")}
        {Lisp-Entry "set-client" method #f 180 18 180 28 ("get-tree" "set-client" "client")}
        {Lisp-Entry "get-designer" method #f 189 18 189 30 ("get-tree" "get-designer")}
        {Lisp-Entry "set-designer" method #f 193 18 193 30 ("get-tree" "set-designer" "designer")}}}})
"Branches-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "branch" "Branches-Tree.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.branch.Branches-Tree" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Branches-Tree" class #f 50 20 50 33 ("157" "width:" "title:" "branch" "name:" "on-selection-change" ":form" "Event-Handler" "selection-handler:" ":images" "portfolio:" "multiple-selection?:" "initialize" "Tree-View")
        {Lisp-Entry "editor" slot #f 53 8 53 14 ()}
        {Lisp-Entry "client" slot #f 54 8 54 14 ()}
        {Lisp-Entry "designer" slot #f 55 8 55 16 ()}
        {Lisp-Entry "focus-actions" method #f 68 20 68 33 ("nextmethod" "branches-tree" "'branches-tree" "find-actions" "cons")}
        {Lisp-Entry "context-menu" method #f 78 20 78 32 ("track-popup-menu" "layout-menu" "action-handler:" "title:" "icon:" "Label-Item" "class:" "list" "properties:" "on-add-branch" "'on-add-branch" "method-name:" "self" "target:" "Event-Handler" "handler" "title" "get-class-image" "icon" "Separator-Item" "not" "class" "for-each" "parent:" "Context-Menu" "submenu" "get-class-presentation" "format" "set-title" "get-addable-default-branch" "default" "let" "eqv?" "if" "rename" "'rename" "close" "'close" "Branch" "is-not?" "separator" "'separator" "set-visible?" "null?" "with-update-locked" "when" "selected-branch" "branch" "get-addable-branches" "client" "essay" "classes" "add" "'add" "locate" "item" "Branch-Menu" "new" "menu" "let*" "lambda" "with-context-click" "pos")}
        {Lisp-Entry "on-add-branch" method #f 114 11 114 24 ("add-branch" "selected-branch" "parent" "client" "get-addable-default-branch" "class:" "get-property" "either" "class" "let" "evt")}
        {Lisp-Entry "new-default-branch" method #f 120 18 120 36 ("add-branch" "selected-branch" "either" "parent" "get-addable-branches" "add-here?" "get-addable-default-branch" "class" "let*" "client" "when")}
        {Lisp-Entry "add-branch" method #f 129 18 129 28 ("rename-branch" "branch-index" "set-single-selection" "update-tree" "install" "'install" "action:" "textual?:" "Form" "client-form:" "set-property" "branch:" "add-child" "editor" "get-designer" "designer" "parent:" "new" "branch" "get-branches" "branch-presentation-request" "presentation" "let" "parent" "class")}
        {Lisp-Entry "branch-presentation-request" method #f 142 29 142 56 ("validator:" "unicity-domain:" "not" "accepts-empty?:" "get-class-presentation" "format" "title:" "request-string" "presentation" "branch-name-validator" "name-validator" "get-presentation-property" "map" "essay" "unicity-domain" "get-name-unicity?" "name-unicity?" "get-name-mandatory?" "name-mandatory?" "let*" "initial-value" "initial-value:" "brothers" "class")}
        {Lisp-Entry "branch-name-validator" method #f 151 29 151 50 ()}
        {Lisp-Entry "on-close-branch" method #f 155 11 155 26 ("delete-selection" "evt")}
        {Lisp-Entry "delete-selection" method #f 159 20 159 36 ("can-survive?:" "remove-branch" "lambda" "selection" "with-deleted-selection" "confirm-close" "when" "bell" "Branch" "is-not?" "if" "selected-branch" "branch" "let")}
        {Lisp-Entry "confirm-close" method #f 170 20 170 33 ("confirm-action")}
        {Lisp-Entry "confirm-action" method #f 174 21 174 35 ("throw-cancel" "cancel" "no" "yes" "case" "confirmation" "'confirmation" "type:" "localize" "message-box" "code" "let" "text")}
        {Lisp-Entry "remove-branch" method #f 182 29 182 42 ("update-tree" "remove-child" "select-branch" "editor" "get-designer" "designer" "get-client" "client" "let" "branch")}
        {Lisp-Entry "on-rename-branch" method #f 190 11 190 27 ("rename-selected-branch" "evt")}
        {Lisp-Entry "rename-selected-branch" method #f 194 11 194 33 ("rename-branch" "get-presentation-property" "initial-value:" "get-brothers" "class-of" "branch-presentation-request" "presentation" "selected-branch" "branch" "let*")}
        {Lisp-Entry "rename-branch" method #f 200 11 200 24 ("branch-index" "set-single-selection" "update-tree" "set-presentation-property" "editor" "get-designer" "designer" "get-client" "Branch" "is?" "if" "client" "let" "presentation" "branch")}
        {Lisp-Entry "on-branch-properties" method #f 208 11 208 31 ("select-palette?:" "show-properties" "evt")}
        {Lisp-Entry "show-properties" method #f 212 11 212 26 ("workspace:" "Properties-Manager" "select-palette" "when" "focus?:" "force?:" "self" "origin:" "list" "if" "editor" "set-selection" "selected-branch" "branch" "let" "select-palette?" "select-palette?:")}
        {Lisp-Entry "maybe-show-properties" method #f 219 11 219 32 ("show-properties" "Branch" "is?" "get-client" "eq?" "car" "1" "length" "=" "and" "null?" "or" "get-selection" "selection" "selected-branch" "branch" "let" "editor" "when")}
        {Lisp-Entry "get-editor" method #f 236 18 236 28 ("editor")}
        {Lisp-Entry "set-editor" method #f 240 18 240 28 ("on-editor" "'on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" method #f 249 11 249 20 ("branch:" "branch-changed" ":branch-changed" "designer:" "set-designer" ":designer-change" "client:" "get-property" "set-client" ":client-change" "get-kind" "case" "evt")}
        {Lisp-Entry "branch-changed" method #f 256 11 256 25 ("branch-index" "set-single-selection" "branch")}
        {Lisp-Entry "get-designer" method #f 265 18 265 30 ("designer")}
        {Lisp-Entry "set-designer" method #f 269 26 269 38 ("install-listener" "set!" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "install-listener" method #f 278 11 278 27 ("add-designer-listener" "on-designer" "'on-designer" "method-name:" "self" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" method #f 283 11 283 29 ("self" "remove-designer-listener" "designer")}
        {Lisp-Entry "on-designer" method #f 287 11 287 22 ("presentation:" "component:" "get-property" "presentation-change" ":presentation-change" "get-kind" "case" "evt")}
        {Lisp-Entry "presentation-change" method #f 292 11 292 30 ("invalidate-cell" "get-cell-data" "set-title" "0" "Cell" "cell" "let" "client" "eq?" "when" "presentation" "component")}
        {Lisp-Entry "get-client" method #f 304 18 304 28 ("client")}
        {Lisp-Entry "set-client" method #f 308 18 308 28 ("update-selection" "update-tree" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update" method #f 320 11 320 17 ("update-selection" "update-tree")}
        {Lisp-Entry "update-tree" method #f 325 11 325 22 ("get-branches" "sort-branches" "insert-branch" "branch" "lambda" "for-each" "insert-client" "node" "let" "client" "when" "remove-every-row")}
        {Lisp-Entry "sort-branches" method #f 334 29 334 42 ("branches")}
        {Lisp-Entry "update-selection" method #f 338 11 338 27 ("set-single-selection" "either" "user-data-index" "index" "get-active-branch" "branch" "let*" "generate-event?:" "set-selection" "client" "not" "if")}
        {Lisp-Entry "insert-client" method #f 348 11 348 24 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "add-row" "component-image" "image" "client" "get-presentation-property" "title" "let")}
        {Lisp-Entry "insert-branch" method #f 354 11 354 24 ("sort-branches" "insert-branch" "child" "lambda" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "handle" "component-image" "image" "component-presentation" "title" "get-children" "children" "let" "branch" "node")}
        {Lisp-Entry "component-presentation" method #f 364 29 364 51 ("get-presentation-property" "component")}
        {Lisp-Entry "component-image" method #f 368 29 368 44 ("get-component-image" "component")}
        {Lisp-Entry "can-undo?" method #f 377 20 377 29 ()}
        {Lisp-Entry "can-redo?" method #f 381 20 381 29 ()}
        {Lisp-Entry "can-delete?" method #f 385 20 385 31 ("Branch" "is?" "selected-branch" "branch" "let")}
        {Lisp-Entry "on-selection-change" method #f 395 11 395 30 ("get-application" "update-focus-actions" "maybe-show-properties" "client" "selected-branch" "either" "select-branch" "evt")}
        {Lisp-Entry "selected-branch" method #f 401 18 401 33 ("get-row" "get-user-data" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "select-branch" method #f 407 11 407 24 ("editor" "process-branch-changing" "client" "get-active-branch" "either" "neq?" "and" "when" "branch")}
        {Lisp-Entry "branch-index" method #f 412 11 412 23 ("user-data-index" "branch")}}
      {Lisp-Entry "Branch-Menu" class #f 421 7 421 18 ("properties" "rename" "close" "separator" "branches-tree" "Action" "action:" "Image-Resource" "icon:" "title:" "add" "name:" "Context-Menu")}}})
"Branches-Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "branch" "Branches-Tree-Actions.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.branch.Branches-Tree-Actions" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Branches-Tree-Actions" class #f 46 20 46 41 ("on-branch-properties" "properties" "F2" "on-rename-branch" "rename" "Delete" "on-close-branch" "close" ":control" "Shortcut" "shortcut:" "on-add-branch" ":focus" "Event-Handler" "action-handler:" "add" "name:" "Actions")}}})
"Branches-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "branch" "Branches-Viewer.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.branch.Branches-Viewer" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Branches-Viewer" class #f 47 20 47 35 ("183" "width:" "branch" "tree" "shown?:" "header" "content" "flat?:" "vscroll?:" "hscroll?:" "scroller" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "host-icon" method #f 65 25 65 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 69 25 69 35 ()}
        {Lisp-Entry "client-activate" method #f 73 20 73 35 ("current-document" "set-client")}
        {Lisp-Entry "client-deactivate" method #f 77 20 77 37 ("set-client")}
        {Lisp-Entry "focus-default" method #f 86 20 86 33 ("auto-select-first" "acquire-focus" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "install-in-host" method #f 97 20 97 35 ("2" "0" "Rect" "set-layout-insets" "fill" "'fill" "get-root" "set-layout-type" "nextmethod" "host")}
        {Lisp-Entry "get-tree" method #f 108 18 108 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "get-client" method #f 117 18 117 28 ("get-tree" "get-client")}
        {Lisp-Entry "set-client" method #f 121 18 121 28 ("get-tree" "set-client" "client")}}
      {Lisp-Entry "Viewer-Tree" class #f 130 7 130 18 ("initialize" "157" "width:" "title:" "branch" "name:" "on-selection-change" ":self" "Event-Handler" "selection-handler:" ":images" "portfolio:" "multiple-selection?:" "Tree-View")
        {Lisp-Entry "client" slot #f 138 8 138 14 ()}
        {Lisp-Entry "get-client" method #f 146 18 146 28 ("client")}
        {Lisp-Entry "set-client" method #f 150 18 150 28 ("update-tree" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update-tree" method #f 156 11 156 22 ("get-branches" "insert-branch" "branch" "lambda" "for-each" "insert-client" "node" "let" "client" "when" "remove-every-row")}
        {Lisp-Entry "insert-client" method #f 165 11 165 24 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "add-row" "component-image" "image" "client" "get-presentation-property" "title" "let")}
        {Lisp-Entry "insert-branch" method #f 171 11 171 24 ("insert-branch" "child" "lambda" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "handle" "component-image" "image" "get-presentation-property" "title" "get-children" "children" "let" "branch" "node")}
        {Lisp-Entry "component-image" method #f 181 29 181 44 ("get-component-image" "component")}
        {Lisp-Entry "on-selection-change" method #f 190 11 190 30 ("client" "selected-branch" "either" "select-branch" "evt")}
        {Lisp-Entry "selected-branch" method #f 194 18 194 33 ("get-row" "get-user-data" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "select-branch" method #f 200 11 200 24 ("client" "set-active-branch" "when" "branch")}}}})
"Card"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "card" "Card.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.card.Card" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "Card" class #f 45 20 45 24 ("initialize" "Layout-View")
        {Lisp-Entry "editor" slot #f 48 8 48 14 ()}
        {Lisp-Entry "client" slot #f 49 8 49 14 ()}
        {Lisp-Entry "designer" slot #f 50 8 50 16 ()}
        {Lisp-Entry "destroy" method #f 58 20 58 27 ("nextmethod" "set-editor" "set-designer")}
        {Lisp-Entry "get-editor" method #f 69 26 69 36 ("editor")}
        {Lisp-Entry "set-editor" method #f 73 26 73 36 ("on-editor" "'on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" method #f 82 29 82 38 ("get-force?" "force?:" "get-selection" "car" "set-client" ":selection-changed" "designer:" "get-property" "set-designer" ":designer-change" "get-kind" "case" "evt")}
        {Lisp-Entry "get-client" method #f 93 26 93 36 ("client")}
        {Lisp-Entry "set-client" method #f 97 26 97 36 ("client-update" "set!" "client" "neq?" "or" "when" "force?" "force?:" "clt")}
        {Lisp-Entry "client-update" method #f 103 26 103 39 ()}
        {Lisp-Entry "get-designer" method #f 112 26 112 38 ("designer")}
        {Lisp-Entry "set-designer" method #f 116 26 116 38 ("set!" "install-listener" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "on-designer" method #f 125 11 125 22 ("call-property-change" ":property-change" "get-kind" "case" "evt")}
        {Lisp-Entry "call-property-change" method #f 131 29 131 49 ("value:" "property:" "property-change" "client" "eq?" "when" "component:" "get-property" "component" "let" "evt")}
        {Lisp-Entry "property-change" method #f 137 26 137 41 ("value" "property" "component")}
        {Lisp-Entry "install-listener" method #f 146 11 146 27 ("add-designer-listener" "on-designer" "'on-designer" "method-name:" "self" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" method #f 151 11 151 29 ("self" "remove-designer-listener" "designer")}
        {Lisp-Entry "enter-value" method #f 160 26 160 37 ("designer" "set-property" "client" "when" "value" "property")}}}})
"Cell-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Cell-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Cell-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Cell-Row" class #f 43 20 43 28 ("Value-Row")
        {Lisp-Entry "present" method #f 51 20 51 27 ("get-col" "get-row" "format" "cell")}
        {Lisp-Entry "get-edited-value" method #f 62 20 62 36 ("Cell" "new" "col" "row" "bind" "editor" "get-string-content" "read-delimited-string" "list" "let")}
        {Lisp-Entry "edit" method #f 69 20 69 24 ("get-tree" "expand/collapse" "get-col" "value" "get-row" "self" "add-row" "edit-in-cell")}
        {Lisp-Entry "close-editor" method #f 77 20 77 32 ("remove-every-son" "nextmethod")}
        {Lisp-Entry "in-edition?" method #f 83 20 83 31 ("0" "get-sons" "cardinality" ">" "nextmethod" "or")}}}})
"Children-Descriptor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "descriptor" "Children-Descriptor.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.descriptor.Children-Descriptor" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Children-Descriptor" class #f 44 20 44 39 ("Component")
        {Lisp-Entry "get-class-descriptor" method #f 52 25 52 45 ("Children-Descriptor-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 61 11 61 17 ()
        {Lisp-Entry "Children-Descriptor-Descriptor" class #f 67 7 67 37 ("Component-Descriptor")
          {Lisp-Entry "get-class-descriptor" method #f 70 25 70 45 ("Children-Meta-Descriptor")}}}}})
"Children-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Children-Tree.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.editor.Children-Tree" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Children-Tree" class #f 47 20 47 33 ("on-selection-change" ":self" "Event-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" ":images" "portfolio:" "reorderable?:" "draggable?:" "initialize" "Components-Tree")
        {Lisp-Entry "base" property #f 50 12 50 16 ()}
        {Lisp-Entry "get-base" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "set-base" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "details" property #f 51 12 51 19 ()}
        {Lisp-Entry "get-details" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "set-details" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "branch-changed" method #f 63 20 63 34 ("update")}
        {Lisp-Entry "update" method #f 72 20 72 26 ("insert-rows" "setup-columns" "lambda" "with-update-locked" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "setup-columns" method #f 79 11 79 24 ("width:" "title:" "name:" "Tree-Label-Column" "class:" "self" "context:" "add-column" "set-width" "set-title" "set-name" "get-node-column" "column" "begin" "when" "detail-presentation" "title" "category-field" "property" "let*" "filled?" "width" "name" "bind" "detail" "lambda" "for-each" "first?" "node-column" "get-name" "details" "null?" "not" "or" "if" "preserve-node-column?:" "remove-columns" "set-filled-column" "get-addable-base" "client" "essay" "base" "set!" "get-header" "header" "let")}
        {Lisp-Entry "insert-rows" method #f 104 11 104 22 ("update-selection" "insert-components" "get-recursive-details?" "recursive?" "let" "client" "when" "remove-every-row" "selected-components" "expand-state")}
        {Lisp-Entry "insert-components" method #f 112 11 112 28 ("get-presentation-property" "key:" "<" "sort" "sort-components?" "if" "insert-component" "Group" "is?" "unless" "child" "lambda" "for-each" "get-components" "components" "let" "recursive?" "father" "component")}
        {Lisp-Entry "insert-component" method #f 122 29 122 45 ("insert-components" "user-data:" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "cons" "children" "title" "value" "property" "filled?" "width" "name" "Tree-Label" "if" "detail" "lambda" "map" "labels" "image:" "title:" "Tree-Node" "new" "node" "get-component-image" "ni" "present-property" "nt" "read-property" "nv" "category-field" "np" "car" "nn" "let*" "filled" "name-info" "set!" "not" "is?" "based?" "rest" "first" "bind" "details" "base" "and" "when" "row" "let" "recursive?" "father" "component")}
        {Lisp-Entry "present-location" method #f 150 11 150 27 ("get-presentation-property" "localize" "ascendant" "lambda" "map" "join" "null?" "if" "collect-ascendants" "cdr" "ascendants" "let" "component")}
        {Lisp-Entry "on-designer" method #f 162 20 162 31 ("value:" "property:" "component:" "property-change" ":property-change" "child-remove" ":child-remove" "parent:" "child:" "get-property" "child-add" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "child-add" method #f 169 11 169 20 ("insert-component" "lambda" "with-update-locked" "client" "neq?" "Group" "is?" "or" "unless" "parent" "child")}
        {Lisp-Entry "child-remove" method #f 176 11 176 23 ("remove-row" "lambda" "with-update-locked" "when" "component-row" "row" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "child")}
        {Lisp-Entry "property-change" method #f 185 11 185 26 ("invalidate-cell" "set-title" "present-property" "title" "get-cell-data" "data" "Cell" "new" "cell" "let*" "get-user-data" "eq?" "rank" "row" "lambda" "for-each-visible-row" "when" "car" "key:" "field-name" "details" "find" "col" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "value" "property" "component")}}}})
"Classpath-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Classpath-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Classpath-Row" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Classpath-Row" class #f 43 20 43 33 ("String-Row")
        {Lisp-Entry "present" method #f 51 20 51 27 ("else" "join" "List" "is?" "not" "nullable?" "and" "cond" "value")}
        {Lisp-Entry "get-edited-value" method #f 62 20 62 36 ("split" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"Color-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editors" "Color-Editor.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.editors.Color-Editor" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Color-Editor" class #f 45 20 45 32 ("2" "1" "Rect" "layout-insets:" "15" "14" "Dimension" "size:" "color-contour" "name:" "explicit" "initialize" "Color-Combo")
        {Lisp-Entry "value-row" property #f 48 12 48 21 ()}
        {Lisp-Entry "get-value-row" method #f 56 18 56 31 ("value-row")}
        {Lisp-Entry "set-value-row" method #f 60 18 60 31 ("body" "'body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "content-change" method #f 65 20 65 34 ("nextmethod" "value-row" "editor-return" "origin")}}}})
"Color-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Color-Row.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.row.Color-Row" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Color-Row" class #f 47 20 47 29 ("Value-Row")
        {Lisp-Entry "present" method #f 55 20 55 27 ("present" "not" "if" "color")}
        {Lisp-Entry "update-color" method #f 66 18 66 30 ("get-edited-value" "color" "'color" "editor" "locate" "set-background")}
        {Lisp-Entry "draw-data" method #f 75 20 75 29 ("get-bottom" "get-left" "get-top" "+" "1" "get-right" "line" "set-color" "fill-rect" "if" "Black" "name:" "Color" "frame-rect" "-1" "inflate-rect" "inner" "-" "13" "3" "2" "Rect" "new" "outer" "let*" "0" "15" "draw-at" "height" "width" "data" "row" "column" "value" "context" "surface")}
        {Lisp-Entry "new-editor" method #f 91 20 91 30 ("self" "value-row:" "editor-class" "new")}
        {Lisp-Entry "editor-class" method #f 96 20 96 32 ("Color-Row-Editor")}
        {Lisp-Entry "get-edited-value" method #f 100 20 100 36 ("Color" "parse-string" "body" "'body" "editor" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-edited-value" method #f 105 20 105 36 ("color" "'color" "set-background" "present" "body" "'body" "editor" "locate" "set-string-content" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 110 20 110 40 ("body" "'body" "editor" "locate" "get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 114 20 114 40 ("body" "'body" "editor" "locate" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" method #f 118 20 118 31 ("body" "'body" "editor" "locate" "show-text-cursor")}
        {Lisp-Entry "focused-editor" method #f 122 20 122 34 ("body" "'body" "editor" "locate")}}
      {Lisp-Entry "Color-Row-Editor" class #f 131 7 131 23 ("explicit" "initialize" "2" "1" "Rect" "layout-insets:" "15" "14" "Dimension" "size:" "color-contour" "name:" "Color-Combo")
        {Lisp-Entry "value-row" property #f 139 12 139 21 ()}
        {Lisp-Entry "form-model" method #f 142 20 142 30 ("nextmethod" "else" "Color-Value-Text-View" "body" "get-name" "case" "form")}
        {Lisp-Entry "get-value-row" method #f 148 18 148 31 ("value-row")}
        {Lisp-Entry "set-value-row" method #f 152 18 152 31 ("body" "'body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "content-change" method #f 157 20 157 34 ("nextmethod" "enter-edited-value" "popup" "value-row" "editor-return" "return" "case" "origin")}}
      {Lisp-Entry "Color-Value-Text-View" class #f 169 7 169 28 ("initialize" "Color-Text-View")
        {Lisp-Entry "value-row" property #f 172 12 172 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 172 46 172 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 172 46 172 54 ()}
        {Lisp-Entry "up-arrow-move" method #f 180 20 180 33 ("value-row" "editor-up-arrow" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 184 20 184 35 ("value-row" "editor-down-arrow" "scroll?" "extend?")}
        {Lisp-Entry "document-menu" method #f 188 11 188 24 ()}
        {Lisp-Entry "focus-validate" method #f 197 11 197 25 ("value-row" "editor-focus-validate")}
        {Lisp-Entry "focus-lose" method #f 201 20 201 30 ("value-row" "editor-focus-lose" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 206 20 206 32 ("value-row" "get-tree")}}}})
"Column-Detail"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "choosers" "Column-Detail.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.choosers.Column-Detail" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Column-Detail" class #f 43 20 43 33 ("0" "initialize" "Object")
        {Lisp-Entry "name" property #f 46 12 46 16 ()}
        {Lisp-Entry "get-name" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "set-name" accessor #f 46 47 46 55 ()}
        {Lisp-Entry "width" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-width" accessor #f 47 47 47 55 ()}
        {Lisp-Entry "set-width" accessor #f 47 47 47 55 ()}
        {Lisp-Entry "filled?" property #f 48 12 48 19 ()}
        {Lisp-Entry "get-filled?" accessor #f 48 47 48 55 ()}
        {Lisp-Entry "set-filled?" accessor #f 48 47 48 55 ()}
        {Lisp-Entry "displayed?" property #f 49 12 49 22 ()}
        {Lisp-Entry "get-displayed?" accessor #f 49 47 49 55 ()}
        {Lisp-Entry "set-displayed?" accessor #f 49 47 49 55 ()}
        {Lisp-Entry "construct-literal" method #f 53 16 53 33 ("self" "new" "displayed?" "filled?" "width" "name" "context")}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("displayed?" "filled?" "width" "name" "set!" "nextmethod" "d?" "f?" "w" "n")}
        {Lisp-Entry "copy-object" method #f 65 20 65 31 ("displayed?" "filled?" "width" "name" "Column-Detail" "new" "deep?")}
        {Lisp-Entry "print" method #f 69 20 69 25 ("displayed?" "filled?" "width" "name" "self" "class-of" "category-name" "identifier-name" "format" "readably" "printer")}}}})
"Combo-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Combo-Row.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.row.Combo-Row" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Combo-Row" class #f 43 20 43 29 ("explicit" "Value-Row")
        {Lisp-Entry "condensed?" property #f 46 12 46 22 ()}
        {Lisp-Entry "choices" property #f 47 12 47 19 ()}
        {Lisp-Entry "kind" property #f 48 12 48 16 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("set-kind" "set-choices" "set-condensed?" "entry-test:" "not-found:" "getf" "nullable?:" "self" "value-row:" "editor-class" "new" "editor" "set!" "nextmethod" "apply" "others" "condensed?" "entry-test" "pick" "'pick" "kind" "choices" "bind-keywords" "rest")}
        {Lisp-Entry "editor-class" method #f 65 20 65 32 ("Combo-Row-Editor")}
        {Lisp-Entry "get-condensed?" method #f 74 18 74 32 ("editor" "get-condensed?")}
        {Lisp-Entry "set-condensed?" method #f 78 18 78 32 ("editor" "set-condensed?" "value")}
        {Lisp-Entry "get-choices" method #f 82 18 82 29 ("editor" "get-choices")}
        {Lisp-Entry "set-choices" method #f 86 18 86 29 ("editor" "set-choices" "when" "value")}
        {Lisp-Entry "set-choices-updater" method #f 91 18 91 37 ("editor" "set-choices-updater" "value")}
        {Lisp-Entry "get-kind" method #f 95 18 95 26 ("editor" "get-kind")}
        {Lisp-Entry "set-kind" method #f 99 18 99 26 ("editor" "set-kind" "value")}
        {Lisp-Entry "enter-combo-choice" method #f 108 11 108 29 ("focus-editor" "enter-edited-value")}
        {Lisp-Entry "present" method #f 118 20 118 27 ("editor" "present-value" "value")}
        {Lisp-Entry "default-value" method #f 127 20 127 33 ("get-choices" "caar")}
        {Lisp-Entry "close-editor?" method #f 136 20 136 33 ()}
        {Lisp-Entry "get-edited-value" method #f 140 20 140 36 ("get-value" "limit-to-list?" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-content" "string" "let")}
        {Lisp-Entry "set-edited-value" method #f 149 20 149 36 ("editor" "set-value" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 153 20 153 40 ("editor" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 157 20 157 40 ("editor" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" method #f 161 20 161 31 ("editor" "get-body" "show-text-cursor")}
        {Lisp-Entry "focused-editor" method #f 165 20 165 34 ("editor" "get-body")}
        {Lisp-Entry "combo-choose" method #f 169 29 169 41 ()}}}})
"Combo-Row-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Combo-Row-Editor.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.row.Combo-Row-Editor" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Combo-Row-Editor" class #f 44 20 44 36 ("explicit" "initialize" "Combo-Box")
        {Lisp-Entry "value-row" property #f 47 12 47 21 ()}
        {Lisp-Entry "form-model" method #f 50 20 50 30 ("nextmethod" "else" "Combo-Value-Text-View" "body" "get-name" "case" "form")}
        {Lisp-Entry "get-value-row" method #f 56 18 56 31 ("value-row")}
        {Lisp-Entry "set-value-row" method #f 60 18 60 31 ("body" "'body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "button-action" method #f 65 20 65 33 ("nextmethod" "value-row" "combo-choose" "unless")}
        {Lisp-Entry "content-change" method #f 70 20 70 34 ("nextmethod" "enter-edited-value" "popup" "editor-return" "validate-value" "value-row" "get-limit-to-list?" "and" "when" "return" "case" "origin")}
        {Lisp-Entry "combo-choice" method #f 77 20 77 32 ("value-row" "enter-combo-choice")}}
      {Lisp-Entry "Combo-Value-Text-View" class #f 86 7 86 28 ("initialize" "Combo-Text-View")
        {Lisp-Entry "value-row" property #f 89 12 89 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 89 46 89 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 89 46 89 54 ()}
        {Lisp-Entry "up-arrow-move" method #f 97 20 97 33 ("value-row" "editor-up-arrow" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 101 20 101 35 ("value-row" "editor-down-arrow" "scroll?" "extend?")}
        {Lisp-Entry "tab-press" method #f 105 20 105 29 ("value-row" "editor-tab" "end-completion" "has-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "document-menu" method #f 111 11 111 24 ()}
        {Lisp-Entry "focus-validate" method #f 120 11 120 25 ("value-row" "editor-focus-validate")}
        {Lisp-Entry "focus-lose" method #f 124 20 124 30 ("value-row" "editor-focus-lose" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 129 20 129 32 ("value-row" "get-tree")}}}})
"Component-Descriptor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "descriptor" "Component-Descriptor.jazz"} 1267024518
    {Lisp-Entry "jazz.designer.descriptor.Component-Descriptor" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "Component-Descriptor" class #f 47 20 47 40 ("properties" "name:" "initialize" "Component")
        {Lisp-Entry "title" property #f 50 12 50 17 ()}
        {Lisp-Entry "get-title" accessor #f 50 53 50 61 ()}
        {Lisp-Entry "set-title" accessor #f 50 53 50 61 ()}
        {Lisp-Entry "image" property #f 51 12 51 17 ()}
        {Lisp-Entry "get-image" accessor #f 51 53 51 61 ()}
        {Lisp-Entry "set-image" accessor #f 51 53 51 61 ()}
        {Lisp-Entry "name-prohibited?" property #f 52 12 52 28 ()}
        {Lisp-Entry "get-name-prohibited?" accessor #f 52 53 52 61 ()}
        {Lisp-Entry "set-name-prohibited?" accessor #f 52 53 52 61 ()}
        {Lisp-Entry "name-mandatory?" property #f 53 12 53 27 ()}
        {Lisp-Entry "get-name-mandatory?" accessor #f 53 53 53 61 ()}
        {Lisp-Entry "set-name-mandatory?" accessor #f 53 53 53 61 ()}
        {Lisp-Entry "name-unicity?" property #f 54 12 54 25 ()}
        {Lisp-Entry "get-name-unicity?" accessor #f 54 53 54 61 ()}
        {Lisp-Entry "set-name-unicity?" accessor #f 54 53 54 61 ()}
        {Lisp-Entry "get-class-descriptor" method #f 67 25 67 45 ("Component-Meta-Descriptor")}
        {Lisp-Entry "class-get-domain" method #f 76 26 76 42 ("Value-Domain" "else" "Boolean-Domain" "visible?" "Presentation-Domain" "presentation-info" "Name-Domain" "new" "name-info" "field-name" "case" "property" "class")}
        {Lisp-Entry "property-domains" definition #f 84 14 84 30 ("eq?" "test:" "make-table")}
        {Lisp-Entry "get-property-domain" definition #f 87 15 87 34 ("property-domains" "table-ref" "property")}
        {Lisp-Entry "set-property-domain" definition #f 90 15 90 34 ("property-domains" "table-set!" "domain" "property")}
        {Lisp-Entry "component-property-domain" method #f 94 26 94 51 ("set-property-domain" "domain" "self" "class" "get-property-domain" "either" "get-domain" "essay" "descriptor-domain" "field-name" "class-of" "get-property-descriptor" "descriptor" "let*" "property" "component")}
        {Lisp-Entry "class-presentation" method #f 110 26 110 44 ("category-name" "identifier-name" "->string" "title" "either" "class")}
        {Lisp-Entry "class-image" method #f 114 26 114 37 ("Image-Resource" "image" "either" "class")}
        {Lisp-Entry "class-name-prohibited?" method #f 118 26 118 48 ("name-prohibited?" "class")}
        {Lisp-Entry "class-name-mandatory?" method #f 122 26 122 47 ("name-mandatory?" "class")}
        {Lisp-Entry "class-name-unicity?" method #f 126 26 126 45 ("name-unicity?" "class")}
        {Lisp-Entry "class-presentation->name" method #f 130 26 130 50 ("string->symbol" "equal?" "empty-string?" "not" "or" "if" "presentation" "class")}
        {Lisp-Entry "class-name->presentation" method #f 136 26 136 50 ("->string" "not" "if" "name" "class")}
        {Lisp-Entry "class-property-presentation" method #f 142 26 142 53 ("->string" "get-title" "if" "get-property-descriptor" "property-descriptor" "else" "visible?" "children" "before" "presentation-info" "name-info" "class-info" "case" "field-name" "name" "let" "property" "class")}
        {Lisp-Entry "class-detail-presentation" method #f 157 26 157 51 ("property-presentation" "else" "presentation-info" "name-info" "class-info" "field-name" "case" "property" "class")}
        {Lisp-Entry "class-persist-property?" method #f 165 26 165 49 ("property" "class")}
        {Lisp-Entry "component-presentation-property?" method #f 169 26 169 58 ("property" "component")}
        {Lisp-Entry "component-get-presentation" method #f 173 26 173 52 ("get-name" "class-of" "name->presentation" "component")}
        {Lisp-Entry "component-set-presentation" method #f 177 26 177 52 ("class-of" "presentation->name" "set-name" "presentation" "designer" "component")}
        {Lisp-Entry "component-get-string-presentation" method #f 181 21 181 54 ("get-name" "either" "component")}
        {Lisp-Entry "component-set-string-presentation" method #f 185 21 185 54 ("set-name" "empty-string?" "if" "presentation" "designer" "component")}
        {Lisp-Entry "component-present-property" method #f 191 26 191 52 ("present" "property-domain" "domain" "let" "value" "property" "component")}
        {Lisp-Entry "component-get-parent" method #f 196 26 196 46 ("get-parent" "component")}
        {Lisp-Entry "component-get-components" method #f 200 26 200 50 ("get-children" "component")}
        {Lisp-Entry "component-get-component-image" method #f 204 26 204 55 ("class-of" "get-class-image" "component")}
        {Lisp-Entry "component-can-cut-component?" method #f 208 26 208 54 ("can-delete-component?" "component")}
        {Lisp-Entry "component-can-copy-component?" method #f 212 26 212 55 ("component")}
        {Lisp-Entry "component-can-paste-component?" method #f 216 26 216 56 ("component")}
        {Lisp-Entry "component-can-paste-properties-component?" method #f 220 26 220 67 ("component")}
        {Lisp-Entry "component-can-rename-component?" method #f 224 26 224 57 ("class-of" "get-name-prohibited?" "not" "component")}
        {Lisp-Entry "component-can-select-all-component?" method #f 228 26 228 61 ("component")}
        {Lisp-Entry "component-can-delete-component?" method #f 232 26 232 57 ("component")}
        {Lisp-Entry "component-can-move-component?" method #f 236 26 236 55 ("component")}
        {Lisp-Entry "component-can-view-properties?" method #f 240 26 240 56 ("component")}
        {Lisp-Entry "component-determine-can-paste" method #f 244 18 244 47 ("determine-paster" "boolean" "try-parent?" "component")}
        {Lisp-Entry "component-determine-paster" method #f 248 18 248 44 ("determine-paster" "get-parent" "parent" "let" "else" "addable-class?" "class" "lambda" "every?" "memq?" "cond" "get-master-model" "map" "remove-duplicates" "models" "get-jazz-parcels" "parcels" "let*" "jazz-parcels" "'jazz-parcels" "clipboard-format-available?" "can-paste-component?" "and" "when" "try-parent?" "component")}
        {Lisp-Entry "component-can-send-before?" method #f 265 26 265 52 ("sort-components?" "not" "addable-class?" "every?" "and" "before" "father" "types" "component")}
        {Lisp-Entry "component-sort-components?" method #f 270 26 270 52 ("component")}
        {Lisp-Entry "component-sort-components" method #f 274 26 274 51 ("get-presentation-property" "key:" "sort" "components" "predicate" "component")}
        {Lisp-Entry "component-indexable?" method #f 278 26 278 46 ("component")}
        {Lisp-Entry "component-surrogate-class" method #f 282 26 282 51 ("Component-Surrogate" "component")}
        {Lisp-Entry "component-install-surrogate" method #f 286 26 286 53 ("install-children-surrogates" "install-handlers" "set-surrogate" "editor:" "client:" "component-surrogate" "new" "surrogate" "let" "editor" "component")}
        {Lisp-Entry "component-install-children-surrogates" method #f 293 26 293 63 ("get-components" "install-surrogate" "lambda" "for-each" "editor" "component")}
        {Lisp-Entry "component-remove-surrogate" method #f 299 18 299 44 ("remove-component-surrogate" "component")}
        {Lisp-Entry "component-remove-component-surrogate" method #f 303 18 303 54 ("set-surrogate" "remove-handlers" "when" "get-surrogate" "surrogate" "let" "get-components" "remove-component-surrogate" "for-each" "component")}
        {Lisp-Entry "component-get-default-property" method #f 311 26 311 56 ("component")}
        {Lisp-Entry "component-get-categorized-properties" method #f 315 26 315 62 ("component")}
        {Lisp-Entry "component-display-property?" method #f 319 26 319 53 ("visible?" "children" "before" "presentation-info" "field-name" "memq?" "not" "property" "component")}
        {Lisp-Entry "component-get-row-class" method #f 323 26 323 49 ("Value-Row" "else" "presentation-info" "name-info" "Info-Row" "class-info" "field-name" "case" "property" "component")}
        {Lisp-Entry "component-get-row-instance" method #f 331 26 331 52 ("else" "Boolean-Row" "new" "visible?" "field-name" "case" "property" "component")}
        {Lisp-Entry "component-update-property-row" method #f 337 26 337 55 ("row" "component")}
        {Lisp-Entry "component-get-addable-default" method #f 341 26 341 55 ("component")}
        {Lisp-Entry "component-get-addable-classes" method #f 345 26 345 55 ("component")}
        {Lisp-Entry "component-addable-class?" method #f 349 26 349 50 ("get-addable-classes" "subtype?" "and" "addable-class" "lambda" "some?" "class" "component")}
        {Lisp-Entry "component-get-classes" method #f 355 26 355 47 ("component")}
        {Lisp-Entry "component-get-addable-branches" method #f 359 26 359 56 ("component")}
        {Lisp-Entry "component-get-addable-default-branch" method #f 363 26 363 62 ("Branch" "component")}
        {Lisp-Entry "component-get-addable-base" method #f 367 26 367 52 ("Component" "car" "length" "1" "=" "if" "when" "get-addable-classes" "classes" "let" "component")}
        {Lisp-Entry "component-get-addable-details" method #f 375 26 375 55 ("100" "name-info" "when" "get-addable-base" "base" "let" "component")}
        {Lisp-Entry "component-get-recursive-details?" method #f 381 26 381 58 ("component")}
        {Lisp-Entry "component-get-class-searchable-classes" method #f 385 26 385 64 ("component")}
        {Lisp-Entry "component-get-custom-details" method #f 389 26 389 54 ("component")}
        {Lisp-Entry "component-get-custom-card" method #f 393 26 393 51 ("component")}
        {Lisp-Entry "component-save-properties" method #f 397 26 397 51 ("designer" "component")}}}})
"Component-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "menu" "Component-Menu.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.menu.Component-Menu" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Component-Menu" class #f 47 20 47 34 ("properties" "before-properties" "rename" "components-tree" "rename-selected" "delete" "delete-selection" "end-edit-group" "paste-properties" "paste" "copy" "view" "Action" "action:" "cut" "end-add-group" "add-menu" "Image-Resource" "icon:" "title:" "add-item" "name:" "Context-Menu")}}})
"Component-Parcel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "clipboard" "Component-Parcel.jazz"} 1259683379
    {Lisp-Entry "jazz.designer.clipboard.Component-Parcel" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Component-Parcel" class #f 44 20 44 36 ("Entity-Parcel")
        {Lisp-Entry "get-master" method #f 52 18 52 28 ("content" "car")}
        {Lisp-Entry "get-master-model" method #f 56 18 56 34 ("autoload-class" "get-model-name" "model-name" "get-master" "master" "let*")}
        {Lisp-Entry "get-master-name" method #f 64 18 64 33 ("get-name" "get-master" "master" "let")}}}})
"Component-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "surrogate" "Component-Surrogate.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.surrogate.Component-Surrogate" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Component-Surrogate" class #f 43 20 43 39 ("initialize" "Component")
        {Lisp-Entry "client" slot #f 46 18 46 24 ()}
        {Lisp-Entry "get-client" accessor #f 46 49 46 57 ()}
        {Lisp-Entry "set-client" accessor #f 46 49 46 57 ()}
        {Lisp-Entry "editor" slot #f 47 18 47 24 ()}
        {Lisp-Entry "get-editor" accessor #f 47 46 47 54 ()}
        {Lisp-Entry "initialize" method #f 55 20 55 30 ("set-client" "editor~self" "set!" "nextmethod" "editor" "editor:" "client" "client:")}
        {Lisp-Entry "install-handlers" method #f 66 26 66 42 ()}
        {Lisp-Entry "remove-handlers" method #f 70 26 70 41 ()}
        {Lisp-Entry "outer-client" method #f 79 18 79 30 ("editor" "get-reference" "client" "outer-component")}
        {Lisp-Entry "invalidate-border" method #f 88 26 88 43 ()}
        {Lisp-Entry "redraw-border" method #f 92 26 92 39 ()}
        {Lisp-Entry "select" method #f 101 26 101 32 ("focus?" "rank")}
        {Lisp-Entry "unselect" method #f 105 26 105 34 ()}
        {Lisp-Entry "get-selected?" method #f 109 18 109 31 ("get-selection" "client" "memq?")}
        {Lisp-Entry "selection-rank" method #f 113 18 113 32 ("client" "get-selection" "find")}
        {Lisp-Entry "get-selection" method #f 117 18 117 31 ("editor" "get-selection")}
        {Lisp-Entry "set-selection" method #f 121 18 121 31 ("editor" "set-selection" "selection")}
        {Lisp-Entry "acquire-selection" method #f 125 18 125 35 ("client" "list" "set-selection")}}}})
"Components-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Components-Tree.jazz"} 1259788340
    {Lisp-Entry "jazz.designer.editor.Components-Tree" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Components-Tree" class #f 52 20 52 35 ("initialize" "Components-Viewer")
        {Lisp-Entry "last-class" slot #f 55 8 55 18 ()}
        {Lisp-Entry "get-last-class" accessor #f 55 40 55 48 ()}
        {Lisp-Entry "focus-actions" method #f 63 20 63 33 ("nextmethod" "components-tree" "'components-tree" "find-actions" "cons")}
        {Lisp-Entry "on-delete-selection" method #f 73 11 73 30 ("delete-selection" "evt")}
        {Lisp-Entry "on-rename-component" method #f 77 11 77 30 ("rename-selection" "evt")}
        {Lisp-Entry "on-export-text" method #f 81 11 81 25 ("user-message" "export-text" "lambda" ":wait" "with-cursor" "bell" "not" "if" "selected-component" "component" "let" "evt")}
        {Lisp-Entry "on-properties" method #f 91 20 91 33 ("show-properties" "evt")}
        {Lisp-Entry "focus-gain" method #f 100 20 100 30 ("selected-components" "get-editor" "get-application" "set-selected" "nextmethod")}
        {Lisp-Entry "focus-update-actions" method #f 105 20 105 40 ("can-rename?" "rename" "components-tree" "Action" "set-action-enabled?")}
        {Lisp-Entry "on-editor" method #f 114 20 114 29 ("nextmethod" "else" "get-user-origin?" "get-force-parent?" "get-origin" "get-old" "get-selection" "selection-changed" ":selection-changed" "branch-changed" ":branch-changed" "end-edition" ":saving" "get-kind" "case" "evt")}
        {Lisp-Entry "branch-changed" method #f 122 29 122 43 ()}
        {Lisp-Entry "selection-changed" method #f 126 29 126 46 ("focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "client-update" method #f 135 20 135 33 ("editor" "get-selection" "selected-components:" "update")}
        {Lisp-Entry "set-designer" method #f 144 20 144 32 ("highlight-edited" "install-listener" "set!" "uninstall-listener" "get-reference" "unhighlight-edited" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "highlight-edited" method #f 160 29 160 45 ("component")}
        {Lisp-Entry "unhighlight-edited" method #f 164 29 164 47 ("component")}
        {Lisp-Entry "component-presentation" method #f 173 29 173 51 ("get-presentation-property" "component")}
        {Lisp-Entry "component-image" method #f 177 29 177 44 ("get-component-image" "component")}
        {Lisp-Entry "component-state" method #f 181 29 181 44 ("component")}
        {Lisp-Entry "parent-relocation" method #f 190 29 190 46 ("parent")}
        {Lisp-Entry "relocation-parent" method #f 194 29 194 46 ("class" "destination")}
        {Lisp-Entry "can-undo?" method #f 203 20 203 29 ()}
        {Lisp-Entry "can-redo?" method #f 207 20 207 29 ()}
        {Lisp-Entry "can-cut?" method #f 211 20 211 28 ("redundant-descendant?" "not" "can-cut-component?" "Component" "is?" "client" "neq?" "component" "lambda" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-copy?" method #f 222 20 222 29 ("redundant-descendant?" "not" "can-copy-component?" "Component" "is?" "component" "lambda" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-paste?" method #f 232 20 232 30 ("determine-unique-paster" "Component" "is?" "component" "lambda" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-paste-properties?" method #f 240 20 240 41 ("class-of" "subtype?" "component" "lambda" "every?" "get-master-model" "parcel-model" "car" "parcel" "let*" "1" "length" "=" "get-jazz-parcels" "parcels" "jazz-parcels" "'jazz-parcels" "clipboard-format-available?" "when" "selected-components" "components" "let")}
        {Lisp-Entry "can-delete?" method #f 254 20 254 31 ("redundant-descendant?" "not" "can-delete-component?" "Component" "is?" "client" "neq?" "component" "lambda" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-rename?" method #f 265 20 265 31 ("can-rename-component?" "Component" "is?" "car" "component" "1" "length" "=" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-select-all?" method #f 273 20 273 35 ()}
        {Lisp-Entry "redundant-descendant?" definition #f 278 15 278 36 ("has-parent?" "neq?" "and" "target" "lambda" "some?" "components" "component")}
        {Lisp-Entry "cut-selection" method #f 285 20 285 33 ("can-survive?:" "designer" "cut-components" "get-selection" "with-deleted-selection" "lambda" "with-update-locked" "bell" "null?" "if" "selected-components" "components" "let")}
        {Lisp-Entry "copy-selection" method #f 297 20 297 34 (".150" "duration:" "get-application" "update-focus-actions" "designer" "copy-components" "lambda" ":wait" "with-cursor" "bell" "null?" "if" "selected-components" "components" "let")}
        {Lisp-Entry "Paste-Reporter" class #f 309 9 309 23 ("invite" "name:" "title:" "Progress-Reporter")
          {Lisp-Entry "dialog-title" method #f 317 18 317 30 ()}}
        {Lisp-Entry "paste-clipboard" method #f 322 11 322 26 ("cancelable?:" "Paste-Reporter" "progress-reporter:" "self" "context:" "name:" "threaded?:" "set-done" "user-message" "get-model" "get-master" "master" "parcel" "key:" "partition" "reporter:" "relocation-parent" "designer" "paste-parcels" "model" "bind" "info" "for-each" ":wait" "with-cursor" "with-update-locked" "length" "0" "Range" "new" "set-range" "reporter" "lambda" "with-progress" "get-jazz-parcels" "parcels" "client" "selected-component" "either" "parent" "let")}
        {Lisp-Entry "paste-properties" method #f 349 20 349 36 ("designer" "paste-properties" "selected-components" "components" "let")}
        {Lisp-Entry "delete-selection" method #f 354 20 354 36 ("can-survive?:" "designer" "delete-components" "lambda" "with-deleted-selection" "confirm-close" "get-selected-data" "components" "not-null?" "when" "get-selection" "selection" "let")}
        {Lisp-Entry "confirm-close" method #f 365 20 365 33 ("confirm-action" "components")}
        {Lisp-Entry "confirm-action" method #f 369 21 369 35 ("throw-cancel" "cancel" "no" "yes" "case" "confirmation" "'confirmation" "type:" "localize" "message-box" "code" "let" "text")}
        {Lisp-Entry "on-add-component" method #f 383 20 383 36 ("add-component-class" "car" "class" "addable-classes" "remove-nils" "classes" "1" "length" "=" "when" "selected-components" "components" "let" "evt")}
        {Lisp-Entry "addable-classes" method #f 392 20 392 35 ("get-parent" "parent-relocation" "component-addable-classes" "else" "Component" "is-not?" "addable-root-classes" "not" "cond" "selected-component" "component" "let")}
        {Lisp-Entry "add-component-class" method #f 402 20 402 39 ("select-component" "add-component-request" "values" "if" "get-parent" "get-addable-classes" "memq?" "not" "client" "relocation-parent" "either" "selected-component" "selected" "let*" "install-new-component" "lambda" "with-update-locked" "last-class" "set!" "set-name" "when" "get-designer" "designer" "presentation->name" "essay" "name" "new" "child" "let" "added-properties" "receive" "extra-properties" "creation-info" "create-new-component" "define" "select?" "select?:" "properties" "properties:" "presentation" "presentation:" "parent" "parent:" "class")}
        {Lisp-Entry "add-component-request" method #f 430 29 430 50 ("component-properties-request" "get-children" "component-presentation-request" "values" "parent" "class")}
        {Lisp-Entry "component-presentation-request" method #f 435 29 435 59 ("request-component-presentation" "initial-value" "initial-value:" "brothers" "class")}
        {Lisp-Entry "component-properties-request" method #f 439 29 439 57 ("class")}
        {Lisp-Entry "install-new-component" method #f 443 29 443 50 ("install-new-properties" "set-presentation-property" "when" "add-child" "extra-properties" "added-properties" "presentation" "parent" "child" "designer")}
        {Lisp-Entry "install-new-properties" method #f 450 29 450 51 ("append" "add-properties" "extra-properties" "added-properties" "child" "designer")}
        {Lisp-Entry "add-properties" method #f 454 29 454 43 ("designer" "set-property" "value" "property" "lambda" "for-each-property" "properties" "component")}
        {Lisp-Entry "rename-selection" method #f 465 20 465 36 ("rename-component" "when" "selected-component" "component" "let")}
        {Lisp-Entry "rename-component" method #f 471 18 471 34 ("end-rename" "0" "Cell" "new" "cell" "row-rank" "rank" "get-presentation-property" "initial-value:" "get-brothers" "class-of" "component-presentation-request" "presentation" "let*" "ensure-expanded" "when" "component-row" "row" "let" "component")}
        {Lisp-Entry "end-rename" method #f 481 11 481 21 ("select-component" "acquire-focus" "reorder-component" "sort-components?" "and" "when" "get-parent" "parent" "let" "designer" "set-presentation-property" "get-cell-data" "set-title" "lambda" "with-update-locked" "presentation" "cell" "component")}
        {Lisp-Entry "move-components" method #f 498 11 498 26 ("send-component-before" "send-before" "for-each" "essay" "target-data" "element" "cardinality" "<" "1" "+" "after" "before" "case" "position" "son-rank" "rank" "get-sons" "sons" "get-father" "father" "select-components" "move-components" "new-components" "bell" "not" "class-of" "relocation-parent" "component" "key:" "uniform" "parent" "let" "row" "'row" "eq?" "if" "lambda" "with-update-locked" "get-user-data" "destination" "get-part" "part" "get-row" "dst" "get-view" "get-selected-data" "components" "get-designer" "designer" "let*" "target" "source")}
        {Lisp-Entry "move-component-row" method #f 524 11 524 29 ("find-component-position" "not" "if" "lambda" "move-row" "sort-components?" "sort?" "client" "either" "destination" "get-user-data" "source" "let*" "get-sons" "cardinality" "1" "=" "get-father" "eq?" "and" "unless" "position" "position:" "father" "row")}
        {Lisp-Entry "reorder-component" method #f 536 18 536 35 ("get-father" "move-component-row" "find-row" "row" "let" "component")}
        {Lisp-Entry "find-component-position" method #f 541 29 541 52 ("get-presentation-property" "find-ordered-position" "father" "row" "component")}
        {Lisp-Entry "find-component-insertion" method #f 545 29 545 53 ("find-row" "son-rank" "when" "target" "component" "parent-row")}
        {Lisp-Entry "send-component-before" method #f 550 29 550 50 ("before" "component")}
        {Lisp-Entry "get-row-reorder-target" method #f 559 20 559 42 ("part:" "row:" "self" "view:" "Tree-Drop-Target" "new" "when" "else" "after" "'after" "'before" "=" "'row" "4" "3" "cond" "part" "can-send-before?" "cdr" "either" "/=" "addable-class?" "has-parent?" "every?" "neq?" "or" "not" "and" "move?" "visible-count" "<" "before" "+" "2" "1" "memq?" "if" "essay" "before-rank" "get-sons" "last" "before-last" "eq?" "before?" "dst-parent" "row-rank" "dst-rank" "get-father" "dst-father" "dst" "get-parent" "parent-relocation" "component" "key:" "uniform" "src-parent" "class-of" "remove-duplicates" "src-types" "get-row" "get-user-data" "n" "lambda" "map" "src" "contiguous-range" "src-range" "get-source" "get-view" "get-selection" "src-selection" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "get-row-target" method #f 583 20 583 34 ("else" "'row" "get-row-reorder-target" "Descendants-Tree" "row:" "self" "view:" "Tree-Drop-Target" "new" "addable-class?" "when" "get-user-data" "component" "autoload" "class" "get-model" "model" "Model-Icon" "typecase" "get-view" "view" "get-source" "source" "let*" "row" "drag-drop")}
        {Lisp-Entry "receive-drop" method #f 603 20 603 32 ("Model-Icon" "typecase" "move-components" "eq?" "if" "get-target" "get-view" "view" "get-source" "source" "rename-component" "centered?:" "0" "Point" "position:" "get-designer" "add-view" "lambda" "with-update-locked" "visible?:" "new" "child" "get-row" "get-user-data" "parent" "get-model" "self" "dispatch" "model" "let*" "target" "window" "receive-model" "define" "drag-drop" "pos" "sender")}
        {Lisp-Entry "show-properties" method #f 632 18 632 33 ("-" "value" "'value" "100" "property" "'property" "locate" "set-width" "get-width" "width" "let" "expand/collapse" "set-parent" "auto-expanded-row" "set!" "row-height:" "father:" "Editor-Row" "class:" "add-row" "subrow" "get-height" "+" "height" "2" "borders-height" "16" "header-height" "set-client" "designer" "set-designer" "get-editor" "set-editor" "categorized" "'categorized" "set-filter" "get-header" "set-flat?" "get-tree" "tree" "parent:" "Properties-Card" "card" "1" "Rect" "border-insets:" "edge" "'edge" "border-type:" "Border-View" "new" "border" "selected-component" "component" "get-row" "row" "get-single-selection" "selection" "let*")}
        {Lisp-Entry "show-properties" method #f 657 26 657 41 ("editor" "show-properties")}
        {Lisp-Entry "on-selection-change" method #f 666 11 666 30 ("focus?:" "force?:" "self" "origin:" "selected-components" "set-selection" "get-application" "get-selected-owner" "eq?" "editor" "and" "when" "evt")}
        {Lisp-Entry "select-component" method #f 671 18 671 34 ("set-single-selection" "when" "component-visible-row" "row" "let" "component")}
        {Lisp-Entry "select-components" method #f 678 18 678 35 ("set-selection" "component-visible-row" "map" "remove-nils" "rows" "let" "components")}
        {Lisp-Entry "find-row" method #f 684 29 684 37 ("component-row" "component")}}}})
"Components-Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Components-Tree-Actions.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.editor.Components-Tree-Actions" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Components-Tree-Actions" class #f 46 20 46 43 ("on-properties" "properties" "F2" "Shortcut" "shortcut:" "on-rename-component" ":focus" "Event-Handler" "action-handler:" "rename" "name:" "Actions")}}})
"Components-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Components-Viewer.jazz"} 1259788340
    {Lisp-Entry "jazz.designer.editor.Components-Viewer" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Components-Viewer" class #f 48 20 48 37 ("initialize" "Tree-View")
        {Lisp-Entry "editor" slot #f 51 8 51 14 ()}
        {Lisp-Entry "client" slot #f 52 8 52 14 ()}
        {Lisp-Entry "designer" slot #f 53 8 53 16 ()}
        {Lisp-Entry "focus-actions" method #f 61 20 61 33 ("nextmethod" "components-viewer" "'components-viewer" "find-actions" "cons")}
        {Lisp-Entry "destroy" method #f 71 20 71 27 ("nextmethod" "set-editor" "set-designer")}
        {Lisp-Entry "context-menu" method #f 77 20 77 32 ("track-popup-menu" "when" "get-context-menu" "menu" "let" "lambda" "with-context-click" "pos")}
        {Lisp-Entry "get-context-menu" method #f 85 20 85 36 ("add-component-class" "addable-classes" "selected-components" "update-component-menu" "self" "client:" "Component-Menu" "new" "menu" "let")}
        {Lisp-Entry "on-add-component" method #f 91 29 91 45 ("evt")}
        {Lisp-Entry "addable-classes" method #f 100 26 100 41 ()}
        {Lisp-Entry "addable-root-classes" method #f 104 26 104 46 ()}
        {Lisp-Entry "add-component-class" method #f 108 26 108 45 ("rest" "class")}
        {Lisp-Entry "get-editor" method #f 117 18 117 28 ("editor")}
        {Lisp-Entry "set-editor" method #f 121 18 121 28 ("editor-update" "on-editor" "'on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "editor-update" method #f 131 29 131 42 ()}
        {Lisp-Entry "on-editor" method #f 135 29 135 38 ("designer:" "set-designer" ":designer-change" "client:" "get-property" "set-client" ":client-change" "get-kind" "case" "evt")}
        {Lisp-Entry "get-client" method #f 146 18 146 28 ("client")}
        {Lisp-Entry "set-client" method #f 150 18 150 28 ("client-update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "client-update" method #f 156 29 156 42 ()}
        {Lisp-Entry "get-designer" method #f 165 18 165 30 ("designer")}
        {Lisp-Entry "set-designer" method #f 169 26 169 38 ("install-listener" "set!" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "install-listener" method #f 183 11 183 27 ("add-designer-listener" "on-designer" "'on-designer" "method-name:" "self" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" method #f 188 11 188 29 ("self" "remove-designer-listener" "designer")}
        {Lisp-Entry "on-designer" method #f 197 29 197 40 ("evt")}
        {Lisp-Entry "selected-component" method #f 206 18 206 36 ("get-row" "get-user-data" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "selected-components" method #f 212 18 212 37 ("get-ordered-selection" "get-row" "get-user-data" "row" "lambda" "map")}
        {Lisp-Entry "component-row" method #f 218 18 218 31 ("continuation-return" "get-user-data" "eq?" "when" "rank" "row" "for-each-row" "return" "lambda" "continuation-capture" "component")}
        {Lisp-Entry "component-visible-row" method #f 228 11 228 32 ("user-data-index" "component")}
        {Lisp-Entry "preserving-update" method #f 237 18 237 35 ("selected-components" "selected-components:" "get-expand-state" "expand-state:" "update")}
        {Lisp-Entry "update" method #f 241 26 241 32 ("rest")}
        {Lisp-Entry "update-selection" method #f 245 26 245 42 ("generate-event?:" "force?:" "component-visible-row" "collect" "set-selection" "when" "set-expand-state" "selected-components" "expand-state")}}}})
"Components-Viewer-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Components-Viewer-Actions.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.editor.Components-Viewer-Actions" module #f 37 18 37 64 ("jazz")
      {Lisp-Entry "Components-Viewer-Actions" class #f 46 20 46 45 (":control" "Shortcut" "shortcut:" "on-add-component" ":focus" "Event-Handler" "action-handler:" "add" "name:" "Actions")}}})
"Composite-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Composite-Row.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.row.Composite-Row" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Composite-Row" class #f 49 20 49 33 ("String-Row")
        {Lisp-Entry "editor-class" method #f 57 20 57 32 ("Composite-Text-View")}
        {Lisp-Entry "get-edited-value" method #f 66 20 66 36 ("current-entries" "parse-entries" "=" "empty-string?" "or" "if" "editor" "get-string-content" "string" "let")}
        {Lisp-Entry "accepts-spaces?" method #f 78 29 78 44 ()}
        {Lisp-Entry "parse-entries" method #f 82 29 82 42 ("parse-entry" "map" "entries")}
        {Lisp-Entry "parse-entry" method #f 86 29 86 40 ("entry")}
        {Lisp-Entry "parse-error" method #f 90 11 90 22 ("0" "Cell" "Parse-Error" "new" "signal" "get-end" "get-start" "essay" "syntax-message" "either" "let" "part" "part:" "end" "end:" "start" "start:" "message" "message:")}
        {Lisp-Entry "syntax-message" method #f 97 29 97 43 ()}
        {Lisp-Entry "present" method #f 106 20 106 27 ("present-value" "format" "not" "if" "value")}
        {Lisp-Entry "present-value" method #f 113 29 113 42 ("present-entry" "map" "value")}
        {Lisp-Entry "present-entry" method #f 117 29 117 42 ("entry")}
        {Lisp-Entry "navigate-backward" method #f 126 11 126 28 ("select-part" "=" "when" "lambda" "for-each-part" "1" "get-rank" "-" "previous" "let" "bell" "not" "if" "pos->part" "part" "editor" "get-start" "get-col" "pos" "current-entries" "entries" "let*")}
        {Lisp-Entry "navigate-forward" method #f 139 11 139 27 ("select-part" "=" "when" "lambda" "for-each-part" "1" "get-rank" "+" "next" "let" "bell" "not" "if" "pos->part" "part" "editor" "get-end" "get-col" "pos" "current-entries" "entries" "let*")}
        {Lisp-Entry "current-entries" method #f 152 11 152 26 ("editor" "get-string-content" "determine-entries")}
        {Lisp-Entry "current-part" method #f 156 11 156 23 ("pos->part" "editor" "get-start" "get-col" "pos" "let" "entries")}
        {Lisp-Entry "current-position" method #f 161 11 161 27 ("pos->position" "editor" "get-start" "get-col" "pos" "let" "entries")}
        {Lisp-Entry "pos->part" method #f 166 11 166 20 ("continuation-return" "get-end" "<=" "get-start" ">=" "and" "when" "part" "for-each-part" "return" "lambda" "continuation-capture" "pos" "entries")}
        {Lisp-Entry "pos->position" method #f 176 11 176 24 ("else" "eqv?" "accepts-spaces?" "cond" "element" "c" "0" "<" "while" "decrease!" "1" "+" "and" "when" "find-entry-end" "end" "n" "let*" "get-position" "continuation-return" "get-end" "get-start" "between?" "if" "part" "for-each-part" "editor" "get-string-content" "string" "let" "return" "lambda" "continuation-capture" "pos" "entries")}
        {Lisp-Entry "find-entry-end" method #f 198 11 198 25 ("else" "increase!" "eqv?" "accepts-spaces?" "and" "cond" "element" "c" "continuation-return" ">=" "if" "while" "return" "lambda" "continuation-capture" "cardinality" "len" "let" "n" "string")}
        {Lisp-Entry "for-each-part" definition #f 211 15 211 28 ("entry" "lambda" "for-each" "proc" "entries")}
        {Lisp-Entry "view-completions" method #f 222 11 222 27 ("acquire-focus" "locate-prefix" "0" "set-selection" "border:" "alternate-position:" "popup" "-2" "alternate" "2" "get-height" "-10" "+" "pos" "text->view" "view" "get-row" "get-paragraph" "par" "user-data:" "title:" "Image-Resource" "image:" "Tree-Node" "list" "children:" "add-row" "name" "lambda" "for-each" "ci<?" "sort" "sorted" "set-client" "set-parent" "fill" "'fill" "set-layout-type" "end:" "start:" "get-selection" "selected:" "self" "value-row:" "Completion-Tree" "tree" "get-content" "content" "vscroll?:" "flat?:" "250" "min" "50" "max" "150" "Dimension" "size:" "Scroller-View" "scroller" "blue:" "green:" "128" "red:" "Color" "border-color:" "solid" "'solid" "border-type:" "'border" "name:" "Border-View" "new" "border" "17" "length" "*" "height" "part-domain" "domain" "end" "start" "text" "receive" "bell" "info" "get-text" "get-position" "get-end" "editor" "get-start" "get-col" "values" "when" "current-position" "position" "let" "not" "if" "current-part" "part" "current-entries" "entries" "let*" "find-to-complete" "define")}
        {Lisp-Entry "complete-part" method #f 263 11 263 24 ("insert-string" "0" "Cell" "Range$Cell$" "new" "editor" "set-selection" "all?:" "parent" "get-player" "close-popups" "get-row" "get-user-data" "string" "bell" "not" "if" "get-single-selection" "rank" "let" "tree" "end" "start")}
        {Lisp-Entry "determine-entries" method #f 278 11 278 28 ("split" "cardinality" "length" "for-each" "entries" "let" "get-output" "begin" "not" "eqv?" "accepts-spaces?" "and" "if" "from" "n" "in-sequence" "c" "for" "loop" "set!" "increase!" "1" "+" "subseq" "Part" "put" "when" "lambda" "end-part" "end" "start" "0" "position" "List-Factory" "new" "parts" "let*" "offset" "rank" "determine-entry" "define" "string")}
        {Lisp-Entry "part-domain" method #f 321 29 321 40 ("position")}
        {Lisp-Entry "select-part" method #f 325 11 325 22 ("get-end" "get-start" "0" "Cell" "Range$Cell$" "new" "editor" "set-selection" "part")}}
      {Lisp-Entry "Part" class #f 334 7 334 11 ("Object")
        {Lisp-Entry "rank" slot #f 337 8 337 12 ()}
        {Lisp-Entry "get-rank" accessor #f 337 24 337 32 ()}
        {Lisp-Entry "position" slot #f 338 8 338 16 ()}
        {Lisp-Entry "get-position" accessor #f 338 24 338 32 ()}
        {Lisp-Entry "text" slot #f 339 8 339 12 ()}
        {Lisp-Entry "get-text" accessor #f 339 24 339 32 ()}
        {Lisp-Entry "start" slot #f 340 8 340 13 ()}
        {Lisp-Entry "get-start" accessor #f 340 24 340 32 ()}
        {Lisp-Entry "end" slot #f 341 8 341 11 ()}
        {Lisp-Entry "get-end" accessor #f 341 24 341 32 ()}
        {Lisp-Entry "initialize" method #f 344 20 344 30 ("end~self" "start~self" "text~self" "position~self" "rank~self" "set!" "nextmethod" "end" "start" "text" "position" "rank")}
        {Lisp-Entry "print" method #f 353 20 353 25 ("end" "start" "text" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "Composite-Text-View" class #f 364 7 364 26 ("Value-Text-View")
        {Lisp-Entry "tab-press" method #f 367 20 367 29 ("navigate-forward" "else" "navigate-backward" "shift-key?" "value-row" "view-completions" "control-key?" "end-completion" "has-completion?" "cond" "modifiers" "key")}
        {Lisp-Entry "get-context-menu" method #f 374 20 374 36 ("Composite-Menu" "new")}
        {Lisp-Entry "on-navigate-backward" method #f 378 11 378 31 ("value-row" "navigate-backward" "evt")}
        {Lisp-Entry "on-navigate-forward" method #f 382 11 382 30 ("value-row" "navigate-forward" "evt")}
        {Lisp-Entry "on-view-completions" method #f 386 11 386 30 ("value-row" "view-completions" "evt")}
        {Lisp-Entry "focus-actions" method #f 395 20 395 33 ("nextmethod" "composite-text" "'composite-text" "find-actions" "cons")}
        {Lisp-Entry "complete-name?" method #f 405 20 405 34 ("1" ">=" "size")}
        {Lisp-Entry "favorite-completions" method #f 409 20 409 40 ()}
        {Lisp-Entry "symbol-completions" method #f 413 20 413 38 ("complete" "Symbol-Completer" "new" "completer" "part-domain" "domain" "let" "when" "current-position" "position" "value-row" "current-entries" "entries" "let*" "name")}}
      {Lisp-Entry "Composite-Menu" class #f 428 7 428 21 ("view-completions" "navigate-forward" "composite-text" "Action" "action:" "Image-Resource" "icon:" "title:" "navigate-backward" "name:" "Text-Context-Menu")}
      {Lisp-Entry "Completion-Tree" class #f 445 7 445 22 ("initialize" "toplevel-controls?:" "200" "width:" "node" "selection-mode:" ":images" "portfolio:" "Tree-View")
        {Lisp-Entry "value-row" property #f 453 12 453 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 453 46 453 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 453 46 453 54 ()}
        {Lisp-Entry "selected" property #f 454 12 454 20 ()}
        {Lisp-Entry "get-selected" accessor #f 454 46 454 54 ()}
        {Lisp-Entry "set-selected" accessor #f 454 46 454 54 ()}
        {Lisp-Entry "start" property #f 455 12 455 17 ()}
        {Lisp-Entry "get-start" accessor #f 455 46 455 54 ()}
        {Lisp-Entry "set-start" accessor #f 455 46 455 54 ()}
        {Lisp-Entry "end" property #f 456 12 456 15 ()}
        {Lisp-Entry "get-end" accessor #f 456 46 456 54 ()}
        {Lisp-Entry "set-end" accessor #f 456 46 456 54 ()}
        {Lisp-Entry "return-press" method #f 459 20 459 32 ("self" "end" "start" "value-row" "complete-part" "key")}
        {Lisp-Entry "tab-press" method #f 463 20 463 29 ("self" "end" "start" "value-row" "complete-part" "modifiers" "key")}
        {Lisp-Entry "double-click" method #f 467 20 467 32 ("self" "end" "start" "value-row" "complete-part" "pos")}}}})
"Composite-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Composite-Text-Actions.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Composite-Text-Actions" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Composite-Text-Actions" class #f 46 20 46 42 ("Space" ":control" "on-view-completions" "view-completions" "on-navigate-forward" "navigate-forward" "Tab" ":shift" "Shortcut" "shortcut:" "on-navigate-backward" ":focus" "Event-Handler" "action-handler:" "navigate-backward" "name:" "Actions")}}})
"Containment-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Containment-Editor.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.editor.Containment-Editor" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Containment-Editor" class #f 47 20 47 38 ("explicit" "initialize" "View")
        {Lisp-Entry "client" property #f 50 12 50 18 ()}
        {Lisp-Entry "flow-layout" slot #f 53 8 53 19 ()}
        {Lisp-Entry "external-name" method #f 60 25 60 38 ("containment-editor" "'containment-editor" "rest")}
        {Lisp-Entry "host-icon" method #f 69 25 69 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 73 25 73 35 ()}
        {Lisp-Entry "client-activate" method #f 77 20 77 35 ("get-client" "set-client" "View-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "finish" method #f 88 20 88 26 ("layout-view" "0" "5" "4" "Rect" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" method #f 94 20 94 26 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "get-client" method #f 103 18 103 28 ("client")}
        {Lisp-Entry "set-client" method #f 107 18 107 28 ("set!" "client" "neq?" "when" "clt")}}}})
"Custom-Card"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "card" "Custom-Card.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.card.Custom-Card" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Custom-Card" class #f 43 20 43 31 ("initialize" "Card")
        {Lisp-Entry "setup?" slot #f 46 8 46 14 ()}
        {Lisp-Entry "setup-properties" method #f 54 11 54 27 ("set!" "layout-view" "client" "setup-entry" "domain" "property" "view" "lambda" "for-each-property-view" "setup?" "unless")}
        {Lisp-Entry "update-properties" method #f 63 11 63 28 ("set-property-value" "client" "read-property" "value" "let" "domain" "property" "view" "lambda" "for-each-property-view")}
        {Lisp-Entry "for-each-property-view" method #f 70 11 70 33 ("property-domain" "domain" "get-property" "client" "class-of" "category-field" "property" "let*" "Property-View" "is?" "when" "level" "view" "lambda" "for-each-descendant" "proc")}
        {Lisp-Entry "find-property-view" method #f 79 18 79 36 ("continuation-return" "get-property" "eq?" "Property-View" "is?" "and" "when" "level" "component" "for-each-descendant" "return" "lambda" "continuation-capture" "property")}
        {Lisp-Entry "client-update" method #f 94 20 94 33 ("get-properties-mapping" "property-update" "read-property" "value" "locate" "view" "let" "type" "name" "property" "bind" "mapping" "lambda" "for-each" "update-properties" "setup-properties" "client" "when")}
        {Lisp-Entry "property-update" method #f 106 29 106 44 ("error" "else" "set-color" "color" "seconds?:" "present" "not" "if" "date" "set-checked?" "boolean" "set-content" "text" "either" "set-string-content" "string" "case" "type" "value" "view")}
        {Lisp-Entry "save-client" method #f 116 26 116 37 ("get-properties-mapping" "set!" "save-property" "locate" "type" "name" "bind" "mapping" "for-each" "modified?" "save-properties" "set-property-modified?" "set-property" "designer" "set-name" "name-info" "'name-info" "field-name" "eq?" "if" "get-property-value" "value" "let" "get-property-modified?" "domain" "property" "view" "lambda" "for-each-property-view" "client" "when" "save-properties-new" "define")}
        {Lisp-Entry "save-property" method #f 142 29 142 42 ("error" "else" "get-color" "color" "Date" "parse-string" "empty-string?" "if" "content" "let" "date" "get-checked?" "boolean" "get-content" "text" "set-modified?" "design-events?:" "get-string-content" "client" "designer" "set-property" "get-modified?" "when" "string" "case" "type" "property" "view")}
        {Lisp-Entry "get-properties-mapping" method #f 176 29 176 51 ()}
        {Lisp-Entry "property-change" method #f 185 20 185 35 ("client-update" "value" "property" "component")}}}})
"Descendants-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Descendants-Editor.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.editor.Descendants-Editor" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Descendants-Editor" class #f 48 20 48 38 ("183" "width:" "descendant" "tree" "header" "content" "vscroll?:" "hscroll?:" "document" "style:" "scroller" "on-new-default" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "new-default" "tools" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "external-name" method #f 64 25 64 38 ("descendants-editor" "'descendants-editor" "rest")}
        {Lisp-Entry "host-icon" method #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 77 25 77 35 ()}
        {Lisp-Entry "client-activate" method #f 81 20 81 35 ("get-designer" "set-designer" "get-client" "set-client" "set-editor" "View-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 89 20 89 37 ("set-designer" "set-client" "set-editor")}
        {Lisp-Entry "focus-default" method #f 100 20 100 33 ("auto-select-first" "acquire-focus" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" method #f 106 20 106 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "install-in-host" method #f 115 20 115 35 ("header" "'header" "set-shown?" "scroller" "'scroller" "locate" "set-flat?" "Docked-Host" "is?" "when" "2" "0" "Rect" "set-layout-insets" "fill" "'fill" "get-root" "set-layout-type" "nextmethod" "host")}
        {Lisp-Entry "get-tree" method #f 132 18 132 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "on-new-default" method #f 141 11 141 25 ("new-default" "evt")}
        {Lisp-Entry "new-default" method #f 150 29 150 40 ("bell")}
        {Lisp-Entry "add-default" method #f 154 11 154 22 ("parent:" "add-component-class" "get-client" "parent" "get-tree" "tree" "let*" "class")}
        {Lisp-Entry "get-editor" method #f 165 18 165 28 ("get-tree" "get-editor")}
        {Lisp-Entry "set-editor" method #f 169 18 169 28 ("get-tree" "set-editor" "editor")}
        {Lisp-Entry "get-client" method #f 178 18 178 28 ("get-tree" "get-client")}
        {Lisp-Entry "set-client" method #f 182 18 182 28 ("get-tree" "set-client" "client")}
        {Lisp-Entry "get-designer" method #f 191 18 191 30 ("get-tree" "get-designer")}
        {Lisp-Entry "set-designer" method #f 195 18 195 30 ("get-tree" "set-designer" "designer")}}}})
"Descendants-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Descendants-Tree.jazz"} 1267045799
    {Lisp-Entry "jazz.designer.editor.Descendants-Tree" module #f 37 18 37 55 ("Component-Column" "register-autoclass" "jazz")
      {Lisp-Entry "Descendants-Tree" class #f 49 20 49 36 ("187" "width:" "title:" "descendant" "name:" "on-selection-change" ":form" "Event-Handler" "selection-handler:" "multiple-selection?:" ":images" "portfolio:" "reorderable?:" "draggable?:" "explicit" "initialize" "Components-Tree")
        {Lisp-Entry "group?" property #f 52 12 52 18 ()}
        {Lisp-Entry "get-group?" accessor #f 52 54 52 62 ()}
        {Lisp-Entry "set-group?" accessor #f 52 54 52 62 ()}
        {Lisp-Entry "editable?" property #f 53 12 53 21 ()}
        {Lisp-Entry "get-editable?" accessor #f 53 54 53 62 ()}
        {Lisp-Entry "set-editable?" accessor #f 53 54 53 62 ()}
        {Lisp-Entry "highlight-edited?" property #f 54 12 54 29 ()}
        {Lisp-Entry "get-highlight-edited?" accessor #f 54 54 54 62 ()}
        {Lisp-Entry "set-highlight-edited?" accessor #f 54 54 54 62 ()}
        {Lisp-Entry "show-branches?" property #f 55 12 55 26 ()}
        {Lisp-Entry "get-show-branches?" method #f 68 18 68 36 ("show-branches?")}
        {Lisp-Entry "set-show-branches?" method #f 72 18 72 36 ("preserving-update" "show-branches?" "set!" "value")}
        {Lisp-Entry "mouse-down" method #f 82 20 82 30 ("editor" "edit-component" "bell" "not" "if" "selected-component" "component" "let" "editable?" "alt-down?" "and" "when" "nextmethod" "pos")}
        {Lisp-Entry "double-click" method #f 91 20 91 32 ("editor" "edit-component" "bell" "selected-component" "component" "let" "nextmethod" "editable?" "highlight-edited?" "not" "or" "if" "pos")}
        {Lisp-Entry "branch-changed" method #f 105 20 105 34 ("preserving-update")}
        {Lisp-Entry "selection-changed" method #f 109 20 109 37 ("generate-event?:" "row-rank" "set-selection" "ensure-expanded" "for-each" "component-row" "remove-nils" "rows" "let" "Details-Tree" "self" "eq?" "not" "group?" "or" "unless" "find-ascendant" "Group" "is?" "if" "component" "lambda" "map" "groupify-selection" "define" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "update" method #f 128 20 128 26 ("update-selection" "get-rights" "insert-toplevel" "client" "when" "remove-every-row" "lambda" "with-update-locked" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "insert-toplevel" method #f 137 29 137 44 ("0" "client" "insert-component" "rights")}
        {Lisp-Entry "insert-component?" method #f 141 29 141 46 ("component")}
        {Lisp-Entry "insert-component" method #f 145 29 145 45 ("insert-components" "user-data:" "title:" "Component-Node" "new" "list" "children:" "father:" "Component-Row" "class:" "add-row" "subrow" "row-state" "collapsed" "'collapsed" "null?" "if" "component-state" "component-image" "either" "component-presentation" "title" "get-components" "components" "let*" "insert-component?" "when" "state" "state:" "image" "image:" "level" "update?" "rights" "component" "row")}
        {Lisp-Entry "insert-components" method #f 156 29 156 46 ("get-components" "insert-component-list" "level" "update?" "rights" "component" "row")}
        {Lisp-Entry "insert-component-list" method #f 160 29 160 50 ("smaller" "'smaller" "sort-predicate" "sort-components" "sort-components?" "if" "1" "+" "essay" "insert-component" "access-rights" "child-rights" "access-granted?" "receive" "child" "for-each" "Branch" "is-not?" "show-branches?" "not" "Group" "is?" "lambda" "collect-if" "set!" "group?" "when" "level" "update?" "rights" "components" "component" "row")}
        {Lisp-Entry "row-state" method #f 174 29 174 38 ("collapsed" "'collapsed" "expanded" "'expanded" "if" "level" "update?" "component")}
        {Lisp-Entry "refresh" method #f 185 11 185 18 ("descendants" "case" "expand" "expanded" "'expanded" "eq?" "insert-components" "remove-every-son" "1" "get-level" "+" "level" "get-state" "state" "lambda" "with-update-locked" "refresh-descendants" "invalidate-cell" "get-cell-data" "set-title" "get-presentation-property" "title" "0" "Cell" "new" "cell" "let" "when" "row-rank" "rank" "component-row" "row" "let*" "refresh-component" "define" "what" "component")}
        {Lisp-Entry "get-rights" method #f 218 11 218 21 ("get-rights" "editor" "essay")}
        {Lisp-Entry "access-rights" definition #f 224 15 224 28 ("can-access?" "find-child-rights" "child-rights" "let" "values" "not" "if" "child" "rights")}
        {Lisp-Entry "highlight-component" method #f 238 18 238 37 ("set-component-highlighted?" "component")}
        {Lisp-Entry "unhighlight-component" method #f 242 18 242 39 ("set-component-highlighted?" "component")}
        {Lisp-Entry "highlight-edited" method #f 246 20 246 36 ("set-component-highlighted?" "highlight-edited?" "when" "component")}
        {Lisp-Entry "unhighlight-edited" method #f 251 20 251 38 ("set-component-highlighted?" "highlight-edited?" "when" "component")}
        {Lisp-Entry "set-component-highlighted?" method #f 256 11 256 37 ("invalidate-cell" "Cell" "new" "cell" "get-columns-count" ">" "and" "row-rank" "rank" "0" "get-child" "set-highlighted?" "when" "component-row" "row" "let" "flag" "component")}
        {Lisp-Entry "get-draggable?" method #f 271 20 271 34 ("can-move-component?" "Component" "is?" "and" "selected-component" "component" "let")}
        {Lisp-Entry "on-designer" method #f 281 20 281 31 ("what:" "refresh" ":refresh" "target:" "send-before-target" ":send-before" "child-remove" ":child-remove" "descendant?:" "parent:" "child:" "child-add" ":child-add" "presentation:" "component:" "get-property" "presentation-change" ":presentation-change" "get-kind" "case" "evt")}
        {Lisp-Entry "presentation-change" method #f 290 11 290 30 ("invalidate-cell" "0" "Cell" "new" "cell" "let" "set-title" "when" "first-child" "node" "row-rank" "rank" "find-row" "row" "let*" "Branch" "is?" "show-branches?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "presentation" "component")}
        {Lisp-Entry "child-add" method #f 303 11 303 20 ("expand" "reorder-component" "when" "state:" "insert-component" "lambda" "with-update-locked" "collapsed" "'collapsed" "expanded" "'expanded" "state" "0" "get-level" "if" "level" "parent-relocation" "find-row" "row" "let*" "Branch" "is?" "show-branches?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "descendant?" "parent" "child")}
        {Lisp-Entry "child-remove" method #f 317 11 317 23 ("remove-row" "lambda" "with-update-locked" "find-row" "row" "let" "Branch" "is?" "show-branches?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "child")}
        {Lisp-Entry "send-before-target" method #f 326 11 326 29 ("find-component-insertion" "position:" "move-component-row" "lambda" "with-update-locked" "parent-relocation" "parent-row" "find-row" "child-row" "let" "target" "parent" "child")}}
      {Lisp-Entry "Component-Column" class #f 341 7 341 23 ("Dark-Red" "name:" "Color" "initialize" "Tree-Node-Column")
        {Lisp-Entry "highlight-color" property #f 344 12 344 27 ()}
        {Lisp-Entry "get-highlight-color" accessor #f 344 72 344 80 ()}
        {Lisp-Entry "set-highlight-color" accessor #f 344 72 344 80 ()}
        {Lisp-Entry "draw-data" method #f 347 20 347 29 ("highlight-color" "text-rect" "frame-rect" "get-highlighted?" "Component-Node" "is?" "and" "when" "nextmethod" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Component-Row" class #f 361 7 361 20 ("Tree-Row")
        {Lisp-Entry "auto-collapse" method #f 364 20 364 33 ("get-editor" "close" "remove-row" "Editor-Row" "is?" "when" "nextmethod" "0" "get-sons" "element" "row" "get-tree" "tree" "let")}}
      {Lisp-Entry "Component-Node" class #f 378 7 378 21 ("initialize" "Tree-Node")
        {Lisp-Entry "highlighted?" slot #f 381 18 381 30 ()}
        {Lisp-Entry "get-highlighted?" accessor #f 381 55 381 63 ()}
        {Lisp-Entry "set-highlighted?" accessor #f 381 55 381 63 ()}}}})
"Designer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "designer" "Designer.jazz"} 1266250425
    {Lisp-Entry "jazz.designer.designer.Designer" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Designer" class #f 55 7 55 15 ("initialize" "Object")
        {Lisp-Entry "form" slot #f 58 8 58 12 ()}
        {Lisp-Entry "get-form" accessor #f 58 42 58 50 ()}
        {Lisp-Entry "set-form" accessor #f 58 42 58 50 ()}
        {Lisp-Entry "reference" slot #f 59 8 59 17 ()}
        {Lisp-Entry "get-reference" accessor #f 59 39 59 47 ()}
        {Lisp-Entry "listeners" slot #f 60 8 60 17 ()}
        {Lisp-Entry "modified?" slot #f 61 8 61 17 ()}
        {Lisp-Entry "get-modified?" accessor #f 61 42 61 50 ()}
        {Lisp-Entry "set-modified?" accessor #f 61 42 61 50 ()}
        {Lisp-Entry "initialize" method #f 69 20 69 30 ("reference~self" "nextmethod" "setup-class-form" "setup-file-form" "file?" "get-origin" "origin" "let" "install" "'install" "model-name:" "'new" "action:" "class-of" "origin:" "textual?:" "Form" "new" "form~self" "set!" "not" "if" "frm" "setup-form" "define" "reference" "reference:" "form" "form:")}
        {Lisp-Entry "save" method #f 106 26 106 30 ("save-content" "save-as" "not" "if" "form" "get-origin" "origin" "let" "lambda" ":wait" "with-cursor" "extensions" "extensions:" "default-extension" "default-extension:")}
        {Lisp-Entry "save-to" method #f 115 18 115 25 ("set-modified?" "save-to-file" "form" "set-origin" "save-as" "not" "if" "file")}
        {Lisp-Entry "Default-Extension" definition #f 123 14 123 31 ()}
        {Lisp-Entry "Default-Extensions" definition #f 126 14 126 32 ()}
        {Lisp-Entry "save-as" method #f 130 11 130 18 ("save-content" "Default-Extensions" "Default-Extension" "either" "choose-new-file" "form" "set-origin" "extensions" "extensions:" "default-extension" "default-extension:")}
        {Lisp-Entry "save-content" method #f 135 11 135 23 ("set-modified?" "save-to-class" "save-to-file" "file?" "if" "form" "get-origin" "origin" "let")}
        {Lisp-Entry "save-to-class" method #f 143 11 143 24 ("focus-host" "bring-to-front" "set-visible?" "close" "save" "begin" "not" "format" "insert-string" "set-selection" "lambda" "with-update-locked" "find-location" "range" "text" "frame" "receive" "set-class-form" "Language" "Interpreter" "evaluate" "when" "2" "saved-form" "output" "find-document" "being-edited?" "find-source" "code-source" "Jazz-Code-Location" "new" "code-location" "list" "location" ":new-form" ":form" "get-self-form" "form" "eq?" "if" "where" "category-name" "class-name" "get-application" "appl" "let*" "class")}
        {Lisp-Entry "save-to-file" method #f 175 11 175 23 ("0" "print-to" "form" "get-model-name" "output-header" "printer" "lambda" "get-eol-encoding" "eol-encoding:" "UTF-8" "'UTF-8" "char-encoding:" "parse" "path:" "list" "call-with-output-file" "format" "message-box" "read-only?" "exists?" "and" "if" "file")}
        {Lisp-Entry "saved-form" method #f 185 18 185 28 ("get-output-string" "print-to" "open-output-string" "printer" "let" "lambda" "with-jazz-readtable" "align-name?" "align-name?:" "space-properties?" "space-properties?:" "level" "class-form?")}
        {Lisp-Entry "print-to" method #f 193 18 193 26 ("base:" "form?:" "pretty-print" "if" "base" "form" "form->node" "node" "let" "format" "when" "align-name?" "align-name?:" "space-properties?" "space-properties?:" "printer" "level" "class-form?")}
        {Lisp-Entry "print-form" method #f 204 11 204 21 ("base:" "form->node" "pretty-print" "printer" "level" "form")}
        {Lisp-Entry "set-name" method #f 213 26 213 34 ("set-modified?" "fire-property-change" "name-info" "'name-info" "class-of" "property-field" "property" "fire-presentation-change" "presentation" "fire-name-change" "set-name" "install" "'install" "get-action" "neq?" "and" "owned-form" "component-form" "component-ancestry" "ancestry" "when" "get-client-form" "let" "lambda" "reference" "either" "for-each-branch" "get-presentation-property" "old-presentation" "get-name" "old-name" "find-form" "form" "target-branch" "let*" "undoable?" "undoable?:" "design-events?" "design-events?:" "branch" "branch:" "name" "component")}
        {Lisp-Entry "set-tag-unit" method #f 237 26 237 38 ("set-modified?" "set-tag-unit" "find-form" "form" "let" "tag-unit" "parent" "component")}
        {Lisp-Entry "set-property" method #f 243 26 243 38 ("set-modified?" "get-property" "fire-property-change" "fire-presentation-change" "presentation" "write-property" "get-presentation-property" "old-presentation" "presentation-property?" "essay" "fire-presentation?" "has-property?" "read-property" "old-value" "find-next-branch" "next-restore" "next-form" "restore?:" "find-form" "restore" "receive" "designer-error" "neq?" "get-creator-branch" "creator-branch" "when" "assert" "class-of" "property-field" "reference" "follow-component" "component" "let*" "get-client-form" "follow-form" "form" "and" "Path" "is?" "path?" "not" "or" "installed?" "set-property" "eq?" "if" "target-branch" "let" "undoable?" "undoable?:" "design-events?" "design-events?:" "branch" "branch:" "value" "property" "component/path")}
        {Lisp-Entry "remove-property" method #f 285 26 285 41 ("set-modified?" "remove-property" "set-property" "fire-property-change" "write-property" "begin" "get-property" "value" "let" "has-property?" "when" "find-next-branch" "next-restore" "next-form" "restore?:" "find-form" "restore" "form" "receive" "assert" "class-of" "property-field" "reference" "follow-component" "if" "component" "Path" "is?" "path?" "not" "or" "installed?" "target-branch" "let*" "undoable?" "undoable?:" "design-events?" "design-events?:" "branch" "branch:" "default-value" "property" "component/path")}
        {Lisp-Entry "add-child" method #f 309 26 309 35 ("set-modified?" "fire-child-add" "set-property" "value" "property" "lambda" "for-each-property" "get-name" "add-to-index" "reference" "set-creator" "set-name" "self" "remember-creation" "when" "add-form" "set-form" "class-of" "category-name" "identifier-name" "model-name:" "'new" "action:" "get-context" "context:" "textual?:" "Form" "new" "child-form" "restore?:" "find-form" "restore" "form" "receive" "set-parent" "target-branch" "let" "descendant?" "descendant?:" "design-events?" "design-events?:" "properties" "properties:" "name" "name:" "branch" "branch:" "parent" "child")}
        {Lisp-Entry "remove-child" method #f 335 26 335 38 ("set-modified?" "fire-child-remove" "close" "get-restore-form" "get-client-form" "for-each-branch" "remove-child" "find-child" "child-form" "owned-form" "component-ancestry" "parent-ancestry" "when" "lambda" "purge-references" "form" "find-form" "parent-form" "get-parent" "parent" "get-name" "name" "let*" "get-presentation-property" "neq?" "and" "find-owner" "owner" "either" "effective" "designer-error" "reference" "eq?" "if" "target-branch" "let" "design-events?" "design-events?:" "branch" "branch:" "child")}
        {Lisp-Entry "remove-children" method #f 368 18 368 33 ("get-children" "remove-child" "child" "lambda" "for-each" "design-events?" "design-events?:" "branch" "branch:" "parent")}
        {Lisp-Entry "purge-branch" method #f 376 26 376 38 ("remove-child" "install-form" "restore?:" "restore-form" "form" "receive" "find-form" "parent-form" "get-parent" "parent" "target-branch" "let*" "design-events?" "design-events?:" "branch" "branch:" "component")}
        {Lisp-Entry "move-components" method #f 385 26 385 41 ("set-modified?" "descendant?:" "design-events?:" "name-resolution:" "instantiate-parcels" "prog1" "delete-components" "verify-name-conflicts" "name-resolution" "package-components" "parcels" "remove-redundant-descendants" "let*" "branch" "branch:" "destination" "components")}
        {Lisp-Entry "send-before" method #f 394 26 394 37 ("set-modified?" "fire-send-before" "send-child-before" "send-before" "essay" "target-form" "child-form" "find-form" "parent-form" "get-parent" "parent" "target-branch" "let*" "branch" "branch:" "target" "child")}
        {Lisp-Entry "send-to-back" method #f 406 18 406 30 ("get-parent" "first-child" "send-before" "branch" "branch:" "child")}
        {Lisp-Entry "bring-to-front" method #f 410 18 410 32 ("send-before" "branch" "branch:" "child")}
        {Lisp-Entry "cut-components" method #f 419 26 419 40 ("delete-components" "copy-components" "remove-redundant-descendants" "let" "components")}
        {Lisp-Entry "copy-components" method #f 425 26 425 41 ("jazz-parcels" "'jazz-parcels" "format:" "set-clipboard-text" "copy-components-text" "text" "remove-redundant-descendants" "let" "components")}
        {Lisp-Entry "copy-components-text" method #f 431 18 431 38 ("get-output-string" "get-content" "0" "print-form" "form" "get-object-id" "get-process-id" "class-of" "category-name" "identifier-name" "parcel" "lambda" "for-each" "format" "package-components" "parcels" "open-output-string" "output" "let" "branch" "branch:" "components")}
        {Lisp-Entry "paste-clipboard" method #f 450 26 450 41 ("paste-parcels" "get-jazz-parcels" "parcels" "let" "design-events?" "design-events?:" "branch" "branch:" "parent")}
        {Lisp-Entry "paste-parcels" method #f 455 26 455 39 ("set-modified?" "descendant?:" "name-resolution:" "instantiate-parcels" "prog1" "verify-name-conflicts" "name-resolution" "determine-paster" "let*" "reporter" "reporter:" "design-events?" "design-events?:" "branch" "branch:" "parent" "parcels")}
        {Lisp-Entry "paste-properties" method #f 462 26 462 42 ("paste-parcel-properties" "get-jazz-parcels" "car" "parcel" "let" "design-events?" "design-events?:" "branch" "branch:" "components")}
        {Lisp-Entry "paste-parcel-properties" method #f 467 18 467 41 ("set-modified?" "get-properties" "instantiate-properties" "form" "component" "lambda" "for-each" "get-content" "forms" "let" "design-events?" "design-events?:" "branch" "branch:" "components" "parcel")}
        {Lisp-Entry "delete-components" method #f 477 26 477 43 ("delete-component" "component" "lambda" "for-each" "remove-redundant-descendants" "let" "design-events?" "design-events?:" "branch" "branch:" "components")}
        {Lisp-Entry "delete-component" method #f 484 26 484 42 ("remove-child" "design-events?" "design-events?:" "branch" "branch:" "component")}
        {Lisp-Entry "remove-redundant-descendants" method #f 490 11 490 39 ("has-parent?" "neq?" "and" "target" "some?" "not" "component" "lambda" "collect-if" "components")}
        {Lisp-Entry "package-components" method #f 507 11 507 29 ("map" "designer-error" "object->serial" "current-process-id" "Component-Parcel" "install" "new" "car" "get-action" "memq?" "not-null?" "and" "if" "cons" "set!" "when" "owned-form" "form" "owner" "lambda" "reference" "iterate-branch-spine" "forms" "component-ancestry" "ancestry" "let" "component" "package-component" "define" "branch" "branch:" "components")}
        {Lisp-Entry "instantiate-parcels" method #f 531 26 531 45 ("step-it" "instantiate-parcel" "prog1" "get-master-name" "user-message" "when" "parcel" "lambda" "map" "reporter" "reporter:" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution" "name-resolution:" "branch" "branch:" "parent" "parcels")}
        {Lisp-Entry "instantiate-parcel" method #f 541 26 541 44 ("cdr" "instantiate-form" "component" "delete-components" "list" "name-conflicts" "conflicts" "let" "override" "set-name" "form" "lambda" "for-each" "unique-name" "set!" "rename" "case" "when" "test:" "member?" "and" "conflict?" "'equal" "sort-predicate" "equal" "map" "domain" "get-children" "brothers" "get-name" "name" "car" "master" "get-content" "forms" "let*" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution" "name-resolution:" "branch" "branch:" "parent" "parcel")}
        {Lisp-Entry "instantiate-form" method #f 564 26 564 42 ("get-children" "instantiate-children" "get-properties" "instantiate-properties" "when" "instantiate-component" "component" "let" "descendant?" "design-events?" "branch" "parent" "form" "name-resolution" "name")}
        {Lisp-Entry "instantiate-component" method #f 572 26 572 47 ("designer-error" "else" "equal" "'equal" "sort-predicate" "get-name" "find-to-modify" "locate" "modify" "instantiate-new-component" "new" "case" "get-action" "action" "let" "descendant?" "design-events?" "branch" "parent" "form" "name-resolution" "name")}
        {Lisp-Entry "instantiate-new-component" method #f 580 26 580 51 ("descendant?:" "design-events?:" "name:" "branch:" "add-child" "parent:" "instantiate-component" "component" "let" "descendant?" "design-events?" "branch" "parent" "form" "name")}
        {Lisp-Entry "instantiate-properties" method #f 586 26 586 48 ("undoable?:" "design-events?:" "branch:" "set-property" "value" "property" "lambda" "for-each-property" "design-events?" "branch" "properties" "component")}
        {Lisp-Entry "instantiate-children" method #f 592 26 592 46 ("get-name" "instantiate-form" "form" "lambda" "for-each" "design-events?" "branch" "children" "component")}
        {Lisp-Entry "unique-name" method #f 603 29 603 40 ("string->symbol" "symbol?" "if" "unique-separator" "separator:" "map" "->string" "unique-domain-name" "unique-name" "let" "domain" "name")}
        {Lisp-Entry "unique-separator" method #f 610 29 610 45 ()}
        {Lisp-Entry "name-conflicts" definition #f 619 15 619 29 ("name" "some?" "and" "get-name" "child-name" "child" "lambda" "collect-if" "'equal" "sort-predicate" "equal" "let" "children" "names")}
        {Lisp-Entry "verify-name-conflicts" method #f 630 18 630 39 ("not-null?" "when" "name-conflicts" "get-children" "map" "names" "throw-cancel" "no" "override" "'override" "yes" "case" "question" "'question" "type:" "message-box" "code" "text" "let*" "rename" "'rename" "object->serial" "child" "some?" "current-process-id" "=" "and" "get-master-name" "name" "get-object-id" "component-id" "get-process-id" "process-id" "'equal" "sort-predicate" "equal" "parcel" "every?" "if" "get-output" "get-name" "->string" ":bulleted" "list" "conflict" "lambda" "for-each" "put" "List-Factory" "new" "fact" "let" "header" "present-conflicts" "conflicts" "children" "confirm-name-resolution" "define" "destination" "parcels")}
        {Lisp-Entry "add-view" method #f 673 26 673 34 ("set-modified?" "set-visible?" "get-height" "2" "get-width" "quotient" "-" "move-figure" "get-size" "size" "let" "'position" "set-property" "when" "add-child" "apply" "others" "visible?" "visible?:" "centered?" "centered?:" "position" "position:" "name" "name:" "parent" "child")}
        {Lisp-Entry "find-form" method #f 691 19 691 28 ("values" "and" "restore" "get-restore-form" "get-client-form" "branch-form" "component-ancestry" "let*" "add-child" "name:" "modify" "'modify" "action:" "Form" "new" "equal?" "test:" "subform" "designer-error" "get-name" "name" "get-component" "Restore-Form" "is?" "essay" "key:" "find-in" "restore-form" "set!" "memq?" "embed-new-form" "not" "if" "get-form" "cpn-form" "get-children" "children" "let" "cpn" "lambda" "for-each" "ancestry" "form" "embed-form" "define" "error?" "error?:" "restore?" "restore?:" "branch" "component")}
        {Lisp-Entry "target-branch" method #f 730 11 730 24 ("else" "follow-component" "Path" "is?" "reference" "get-active-branch" "eq?" "cond" "branch")}
        {Lisp-Entry "component-ancestry" method #f 736 11 736 29 ("designer-error" "not" "when" "get-parent-component" "cons" "set!" "reference" "neq?" "while" "scan" "ancestry" "let" "component")}
        {Lisp-Entry "find-owner" method #f 752 18 752 28 ("continuation-return" "has-property?" "new" "'new" "get-action" "eq?" "not" "or" "and" "owned-form" "when" "form" "owner" "reference" "iterate-branch-spine" "return" "lambda" "continuation-capture" "component-ancestry" "ancestry" "let" "property" "component")}
        {Lisp-Entry "find-next-branch" method #f 767 11 767 27 ("get-restore-form" "continuation-return" "has-property?" "owned-form" "form" "when" "get-client-form" "client-form" "for-each" "return" "lambda" "continuation-capture" "component-ancestry" "ancestry" "reference" "either" "get-installed-branches" "lower" "let" "values" "installed?" "not" "and" "if" "property" "component" "branch")}
        {Lisp-Entry "owned-form" definition #f 784 15 784 25 ("equal?" "test:" "key:" "find-in" "subform" "get-name" "name" "set!" "memq?" "continuation-return" "not" "if" "get-form" "cpn-form" "get-children" "children" "let" "cpn" "for-each" "return" "lambda" "continuation-capture" "ancestry" "form")}
        {Lisp-Entry "get-name" method #f 814 18 814 26 ("follow-form" "get-name" "get-client-form" "if" "form" "target-branch" "let*" "branch" "branch:" "path")}
        {Lisp-Entry "get-property" method #f 820 18 820 30 ("follow-form" "get-property" "get-client-form" "if" "form" "target-branch" "let*" "branch" "branch:" "property" "path")}
        {Lisp-Entry "edit-form" method #f 831 18 831 27 ("get-name" "locator->entry" "edit" "else" "Jazz-Text-View" "class:" "edit-document" "file?" "bell" "not" "cond" "form" "get-origin" "origin" "get-application" "appl" "let")}
        {Lisp-Entry "designer-error" method #f 847 11 847 25 ("format" "apply" "message:" "Designer-Error" "new" "signal" "rest")}
        {Lisp-Entry "safe-set-property" method #f 851 18 851 35 ("set-property" "apply" "lambda" "with-safe-design" "rest")}
        {Lisp-Entry "fire-name-change" definition #f 862 15 862 31 ("get-designers" "process-name-change" "designer" "lambda" "for-each" "undoable?" "old-name" "name" "component")}
        {Lisp-Entry "fire-presentation-change" definition #f 868 15 868 39 ("get-designers" "process-presentation-change" "designer" "lambda" "for-each" "undoable?" "old-presentation" "presentation" "component")}
        {Lisp-Entry "fire-property-change" definition #f 874 15 874 35 ("get-designers" "process-property-change" "designer" "lambda" "for-each" "undoable?" "value" "property" "component" "branch")}
        {Lisp-Entry "fire-child-add" definition #f 880 15 880 29 ("get-designers" "process-child-add" "designer" "lambda" "for-each" "descendant?" "parent" "child")}
        {Lisp-Entry "fire-child-remove" definition #f 886 15 886 32 ("get-designers" "process-child-remove" "designer" "lambda" "for-each" "parent" "child")}
        {Lisp-Entry "fire-send-before" definition #f 892 15 892 31 ("get-designers" "process-send-before" "designer" "lambda" "for-each" "target" "parent" "child")}
        {Lisp-Entry "add-designer-listener" method #f 903 18 903 39 ("add-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "remove-designer-listener" method #f 907 18 907 42 ("remove-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "process-name-change" method #f 911 11 911 30 ("invoke" "listener" "lambda" "for-each" "undoable?:" "old-name:" "name:" "component:" "self" ":name-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "old-name" "name" "component")}
        {Lisp-Entry "process-presentation-change" method #f 919 11 919 38 ("invoke" "listener" "lambda" "for-each" "undoable?:" "old-presentation:" "presentation:" "component:" "self" ":presentation-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "old-presentation" "presentation" "component")}
        {Lisp-Entry "process-property-change" method #f 927 11 927 34 ("invoke" "listener" "lambda" "for-each" "undoable?:" "value:" "property:" "component:" "branch:" "self" ":property-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "value" "property" "component" "branch")}
        {Lisp-Entry "process-child-add" method #f 935 11 935 28 ("invoke" "listener" "lambda" "for-each" "descendant?:" "parent:" "child:" "self" ":child-add" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "descendant?" "parent" "child")}
        {Lisp-Entry "process-child-remove" method #f 943 11 943 31 ("invoke" "listener" "lambda" "for-each" "parent:" "child:" "self" ":child-remove" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "parent" "child")}
        {Lisp-Entry "process-send-before" method #f 951 11 951 30 ("invoke" "listener" "lambda" "for-each" "target:" "parent:" "child:" "self" ":send-before" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "target" "parent" "child")}
        {Lisp-Entry "process-refresh" method #f 959 18 959 33 ("invoke" "listener" "lambda" "for-each" "what:" "component:" "self" ":refresh" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "what" "component")}
        {Lisp-Entry "process-user-event" method #f 967 18 967 36 ("self" "invoke" "listener" "lambda" "for-each" "listeners" "not-null?" "when" "event")}}}})
"Designer-Error"
 ({Lisp-File-Entry {File jazz.designer "src" "jazz" "designer" "designer" "Designer-Error.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.designer.Designer-Error" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Designer-Error" class #f 40 7 40 21 ("Error")}}})
"Designer-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "event" "Designer-Event.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.event.Designer-Event" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Designer-Event" class #f 43 7 43 21 ("Event")}}})
"Designer-Manager"
 ({Lisp-File-Entry {File jazz.designer "src" "jazz" "designer" "manager" "Designer-Manager.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.manager.Designer-Manager" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Designer-Manager" class #f 48 7 48 23 ("on-edit-form" "edit-form" "on-toggle-try-out" "try-out" "on-toggle-content" "content" "on-toggle-frames" "frames" "rect" "mode-rect" "0" "2" "select" "mode:" "on-mode" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "selected?:" ":images" "portfolio:" "Image-Resource" "resource:" "22" "Dimension" "size:" "mode-select" "name:" "explicit" "initialize" "View")
        {Lisp-Entry "client" property #f 51 12 51 18 ()}
        {Lisp-Entry "flow-layout" slot #f 54 8 54 19 ()}
        {Lisp-Entry "external-name" method #f 73 25 73 38 ("designer-manager" "'designer-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 82 25 82 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 86 25 86 35 ()}
        {Lisp-Entry "client-activate" method #f 90 20 90 35 ("set-client" "View-Editor" "is?" "essay" "client" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 96 20 96 37 ("set-client")}
        {Lisp-Entry "finish" method #f 105 20 105 26 ("layout-view" "0" "5" "4" "Rect" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" method #f 111 20 111 26 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "on-editor" method #f 115 11 115 20 ("designer:" "get-property" "set-designer" ":designer-change" "get-kind" "case" "evt")}
        {Lisp-Entry "on-new" method #f 120 11 120 17 ("evt")}
        {Lisp-Entry "on-open" method #f 124 11 124 18 ("open-form" "instantiate" "client" "set-client" "evt")}
        {Lisp-Entry "on-toggle-frames" method #f 128 11 128 27 ("client" "toggle-frames" "evt")}
        {Lisp-Entry "on-toggle-content" method #f 132 11 132 28 ("client" "toggle-content" "evt")}
        {Lisp-Entry "on-toggle-try-out" method #f 136 11 136 28 ("client" "toggle-try-out" "evt")}
        {Lisp-Entry "on-edit-form" method #f 140 11 140 23 ("client" "view-component" "evt")}
        {Lisp-Entry "on-mode" method #f 149 11 149 18 ("invalidate-selection" "set-mode" "current-document" "editor" "mode:" "get-property" "mode" "let" "evt")}
        {Lisp-Entry "get-client" method #f 161 18 161 28 ("client")}
        {Lisp-Entry "set-client" method #f 165 18 165 28 ("client-update" "client" "set!" "clt")}
        {Lisp-Entry "client-update" method #f 170 11 170 24 ("trying-out?" "get-show-content?" "get-show-frames?" "and" "set-selected?" "try-out" "'try-out" "try-out-button" "content" "'content" "content-button" "frames" "'frames" "frames-button" "let" "edit-form" "'edit-form" "mode-rect" "'mode-rect" "client" "mode-select" "'mode-select" "locate" "set-enabled?")}
        {Lisp-Entry "set-designer" method #f 191 11 191 23 ("class-of" "category-name" "format" "get-reference" "reference" "let" "set-title" "not" "if" "designer")}}}})
"Designer-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "preference" "Designer-Preferences.jazz"} 1267024518
    {Lisp-Entry "jazz.designer.preference.Designer-Preferences" module #f 37 18 37 63 ("jazz")
      {Lisp-Entry "Designer-Preferences" class #f 46 20 46 40 ("Image-Resource" "icon:" "title:" "initialize" "Preferences")
        {Lisp-Entry "aligned-properties" property #f 49 12 49 30 ()}
        {Lisp-Entry "get-aligned-properties" accessor #f 49 56 49 64 ()}
        {Lisp-Entry "set-aligned-properties" accessor #f 49 56 49 64 ()}
        {Lisp-Entry "new-requests-name?" property #f 50 12 50 30 ()}
        {Lisp-Entry "get-new-requests-name?" accessor #f 50 56 50 64 ()}
        {Lisp-Entry "set-new-requests-name?" accessor #f 50 56 50 64 ()}
        {Lisp-Entry "get-class-descriptor" method #f 62 25 62 45 ("Designer-Preferences-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 71 11 71 17 ()
        {Lisp-Entry "Designer-Preferences-Descriptor" class #f 77 7 77 38 ("Preferences-Descriptor")
          {Lisp-Entry "class-property-presentation" method #f 80 20 80 47 ("nextmethod" "else" "new-requests-name?" "aligned-properties" "field-name" "case" "property" "class")}
          {Lisp-Entry "component-can-rename-component?" method #f 87 20 87 51 ("component")}
          {Lisp-Entry "component-can-delete-component?" method #f 91 20 91 51 ("component")}
          {Lisp-Entry "component-can-move-component?" method #f 95 20 95 49 ("component")}
          {Lisp-Entry "component-can-copy-component?" method #f 99 20 99 49 ("component")}
          {Lisp-Entry "component-get-row-instance" method #f 103 20 103 46 ("nextmethod" "else" "Boolean-Row" "new-requests-name?" "List-Row" "new" "aligned-properties" "field-name" "case" "property" "component")}
          {Lisp-Entry "component-get-categorized-properties" method #f 110 20 110 56 ("new-requests-name?" "component")}
          {Lisp-Entry "component-get-addable-classes" method #f 115 20 115 49 ("Indented-Column-Preferences" "Aligned-Column-Preferences" "list" "component")}}}}})
"Designer-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "workspace" "Designer-Workspace.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.workspace.Designer-Workspace" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Designer-Workspace" class #f 46 20 46 38 ("Lisp-Console-Manager" "Properties-Manager" "-20" "caption?:" "Text-Palette" "-37" "maximized?:" "Containment-Editor" "Alignment-Editor" "Designer-Manager" "170" "146" "58" "-300" "View-Descendants-Editor" "Branches-Editor" "second" "Toolbox-Manager" "model-name:" "65" "52" "vert" "5" "Rect" "insets:" "18" "division:" "relative" "mode:" "horz" "orientation:" "first" "location:" "top" "status" "toolbar" "menubar" "name:" "View-Editor" "frame-model:" ":shift" ":alt" "Shortcut" "shortcut:" "Image-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" method #f 79 20 79 32 ("designer" "'designer")}}}})
"Details-Card"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "details" "Details-Card.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.details.Details-Card" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Details-Card" class #f 45 20 45 32 ("toplevel-controls?:" "title:" "element" "details" "content" "name:" "vscroll?:" "hscroll?:" "document" "style:" "fill" "layout-type:" "Layout-View")}}})
"Details-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "choosers" "Details-Chooser.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.choosers.Details-Chooser" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Details-Chooser" class #f 48 20 48 35 ("on-cancel" "193" "cancel" "default?:" "on-ok" ":host" "363" "109" "ok" "270" "348" "6" "show-unfocused-selection?:" "focus-selects-all?:" "text" "scroller" "21" "40" "318" "155" "column-size" "on-width" "90" "width" "on-filled" "47" "321" "filled" "110" "300" "8" "size-label" "on-hide" "123" "hide" "on-show" "95" "show" "on-move-down" "61" "move-down" "on-move-up" "24" "80" "move-up" "200" "width:" "display-images?:" "toplevel-controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-selection-change" "selection-handler:" "on-action" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "2" "top-padding:" "detail" "filled-column:" "details-tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "254" "171" "33" "details-border" "Label" "name:" "Font" "font:" "16" "191" "9" "10" "Point" "position:" "title:" "400" "282" "Dimension" "size:" "explicit" "initialize" "View")
        {Lisp-Entry "reference" property #f 51 12 51 21 ()}
        {Lisp-Entry "get-reference" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "set-reference" accessor #f 51 47 51 55 ()}
        {Lisp-Entry "details" property #f 52 12 52 19 ()}
        {Lisp-Entry "get-details" accessor #f 52 47 52 55 ()}
        {Lisp-Entry "set-details" accessor #f 52 47 52 55 ()}
        {Lisp-Entry "defaults" property #f 54 12 54 20 ()}
        {Lisp-Entry "finish" method #f 81 20 81 26 ("acquire-focus" "update-buttons" "setup-selection" "setup-details" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-defaults" method #f 96 18 96 30 ("defaults")}
        {Lisp-Entry "set-defaults" method #f 101 18 101 30 ("defaults" "set!" "value")}
        {Lisp-Entry "get-tree" method #f 105 11 105 19 ("details-tree" "'details-tree" "locate")}
        {Lisp-Entry "get-text" method #f 109 11 109 19 ("text" "column-size" "locate")}
        {Lisp-Entry "host-title" method #f 118 25 118 35 ()}
        {Lisp-Entry "host-position" method #f 122 25 122 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method #f 126 25 126 34 ("120" "302" "Dimension")}
        {Lisp-Entry "on-action" method #f 135 11 135 20 ("update-buttons" "toggle-displayed?" "Check-Box" "is?" "when" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-selection-change" method #f 142 11 142 30 ("update-details" "enter-width" "update-buttons" "first" "details" "element" "essay" "old-detail" "get-old" "old" "let*" "evt")}
        {Lisp-Entry "on-move-up" method #f 150 11 150 21 ("set-single-selection" "acquire-focus" "setup-details" "1" "-" "insert!" "remove!" "set!" "details" "element" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-move-down" method #f 161 11 161 23 ("set-single-selection" "acquire-focus" "setup-details" "1" "+" "insert!" "remove!" "set!" "details" "element" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-show" method #f 172 11 172 18 ("update-buttons" "toggle-displayed?" "set-checked?" "acquire-focus" "get-row" "get-user-data" "checkbox" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-hide" method #f 182 11 182 18 ("update-buttons" "toggle-displayed?" "set-checked?" "acquire-focus" "get-row" "get-user-data" "checkbox" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-filled" method #f 192 11 192 20 ("change-filled" "evt")}
        {Lisp-Entry "on-width" method #f 196 11 196 19 ("Label" "name:" "Font" "set-detail-font" "set-filled?" "enter-width" "details" "element" "essay" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-reset" method #f 206 11 206 19 ("on-reset" "'on-reset" "unimplemented" "evt")}
        {Lisp-Entry "on-return-press" method #f 211 20 211 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method #f 217 20 217 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "setup-details" method #f 227 11 227 24 ("details" "list" "children:" "add-row" "user-data:" "color:" "get-displayed?" "checked?:" ":enabled?" "title:" ":outline" "parent:" "font:" "Check-Box" "checkbox" "Label" "Label-Bold" "Font" "get-filled?" "if" "font" "'mandatory" "neq?" "enabled?" "Black" "name:" "Color" "color" "4" "Rect" "layout-insets:" "fill" "'fill" "layout-type:" "Layout-View" "new" "layout" "0" "border" "let*" "reference" "get-name" "assoc" "mandatory" "width" "title" "name" "bind" "detail" "for-each" "remove-every-row" "lambda" "with-update-locked" "tree")}
        {Lisp-Entry "setup-selection" method #f 244 11 244 26 ("0" "list" "set-selection" "details" "when" "tree")}
        {Lisp-Entry "update-buttons" method #f 254 11 254 25 ("defaults" "reset" "'reset" "'mandatory" "neq?" "and" "get-displayed?" "not" "1" "-" "<" "0" ">" "reference" "get-name" "assoc" "mandatory" "width" "title" "name" "bind" "details" "element" "detail" "let" "hide" "'hide" "show" "'show" "move-down" "'move-down" "move-up" "'move-up" "locate" "set-enabled?" "begin" "null?" "if" "get-visible-count" "count" "get-single-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "update-details" method #f 274 11 274 25 ("get-filled?" "set-selected?" "get-width" "->string" "details" "element" "detail" "set-string-content" "set-enabled?" "begin" "null?" "if" "get-text" "text" "'width" "width" "'filled" "filled" "size-label" "'size-label" "locate" "label" "get-tree" "get-single-selection" "selection" "let")}
        {Lisp-Entry "toggle-displayed?" definition #f 301 15 301 32 ("not" "set-displayed?" "get-displayed?" "visible?" "get-user-data" "detail" "let*" "checkbox")}
        {Lisp-Entry "enter-width" method #f 312 11 312 22 ("parse-integer" "set-width" "throw-cancel" "select-all" "acquire-focus" "exception-reason" "message-box" "err" "Parse-Error" "catch" "get-string-content" "content" "get-text" "text" "get-tree" "tree" "let*" "when" "edited-detail")}
        {Lisp-Entry "set-detail-font" method #f 325 11 325 26 ("set-font" "get-user-data" "checkbox" "details" "find" "get-row" "row" "let*" "font" "detail" "tree")}
        {Lisp-Entry "change-filled" method #f 336 11 336 24 ("Label-Bold" "Label" "name:" "Font" "set-detail-font" "set-filled?" "neq?" "when" "filled" "element" "essay" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "details" "get-filled?" "find-if" "find-filled" "define")}
        {Lisp-Entry "get-modal-result" method #f 358 20 358 36 ("get-output" "put" "Check-Box" "is?" "when" "get-user-data" "checkbox" "let" "rank" "row" "lambda" "for-each-row" "enter-width" "List-Factory" "new" "details" "element" "essay" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*")}}}})
"Details-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Details-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Details-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Details-Row" class #f 44 20 44 31 ("initialize" "Combo-Row")
        {Lisp-Entry "all" property #f 47 12 47 15 ()}
        {Lisp-Entry "get-all" accessor #f 47 41 47 49 ()}
        {Lisp-Entry "set-all" accessor #f 47 41 47 49 ()}
        {Lisp-Entry "initialize" method #f 55 20 55 30 ("choose" "'choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "present" method #f 65 20 65 27 ("format" "not" "if" "value")}
        {Lisp-Entry "combo-choose" method #f 76 20 76 32 ("focus-editor" "enter-edited-value" "set-edited-value" "get-edited-value" "details:" "all" "all:" "Details-Chooser" "get-modal" "details" "let")}
        {Lisp-Entry "get-edited-value" method #f 89 20 89 36 ("=" "empty-string?" "or" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" method #f 96 20 96 36 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Details-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Details-Tree.jazz"} 1267045799
    {Lisp-Entry "jazz.designer.editor.Details-Tree" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Details-Tree" class #f 47 20 47 32 ("on-selection-change" ":self" "Event-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" ":images" "portfolio:" "reorderable?:" "draggable?:" "initialize" "Components-Tree")
        {Lisp-Entry "base" property #f 50 12 50 16 ()}
        {Lisp-Entry "get-base" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "set-base" accessor #f 50 45 50 53 ()}
        {Lisp-Entry "details" property #f 51 12 51 19 ()}
        {Lisp-Entry "get-details" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "set-details" accessor #f 51 45 51 53 ()}
        {Lisp-Entry "branch-changed" method #f 63 20 63 34 ("update")}
        {Lisp-Entry "selection-changed" method #f 67 20 67 37 ("row-rank" "list" "when" "component-row" "row" "generate-event?:" "set-selection" "parent?" "client" "receive" "car" "set-client" "self" "eq?" "not" "unless" "values" "null?" "or" "get-addable-classes" "and" "if" "get-parent" "parent" "let" "component" "determine-client" "define" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "selection-changed" method #f 88 11 88 28 ("set-client" "generate-event?:" "set-selection" "Group" "is?" "not" "or" "when" "car" "component" "let" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "update" method #f 100 20 100 26 ("insert-rows" "setup-columns" "lambda" "with-update-locked" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "setup-columns" method #f 107 11 107 24 ("width:" "title:" "name:" "Tree-Label-Column" "class:" "add-column" "set-width" "set-title" "set-name" "get-node-column" "column" "begin" "when" "detail-presentation" "either" "error" "category-field" "property" "split-detail-path" "title" "name" "ignore" "receive" "filled?" "width" "path" "bind" "detail" "lambda" "for-each" "first?" "node-column" "get-name" "null?" "not" "or" "if" "preserve-node-column?:" "remove-columns" "set-filled-column" "get-addable-details" "details" "get-addable-base" "client" "essay" "base" "set!" "get-header" "header" "let")}
        {Lisp-Entry "insert-rows" method #f 136 11 136 22 ("update-selection" "insert-components" "get-recursive-details?" "recursive?" "let" "client" "when" "remove-every-row" "selected-components" "expand-state")}
        {Lisp-Entry "insert-components" method #f 144 11 144 28 ("get-presentation-property" "key:" "<" "sort" "sort-components?" "if" "insert-component" "Group" "is?" "unless" "child" "lambda" "for-each" "get-components" "components" "let" "recursive?" "father" "component")}
        {Lisp-Entry "insert-component" method #f 154 29 154 45 ("insert-components" "user-data:" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "cons" "children" "title" "value" "property" "split-detail-path" "ignore" "name" "receive" "filled?" "width" "path" "Tree-Label" "if" "detail" "lambda" "map" "labels" "image:" "title:" "Tree-Node" "new" "node" "get-component-image" "ni" "present-property" "nt" "read-property" "nv" "category-field" "np" "car" "nn" "let*" "filled" "name-info" "set!" "not" "is?" "based?" "rest" "first" "bind" "details" "base" "and" "when" "row" "let" "recursive?" "father" "component")}
        {Lisp-Entry "split-detail-path" method #f 183 11 183 28 ("child" "essay" "follow-submodels" "reverse!" "cons" "car" "string?" "subpath" "name" "title" "bind" "reverse" "reversed" "let" "values" "symbol?" "if" "path" "component" "base")}
        {Lisp-Entry "follow-submodels" method #f 192 11 192 27 ("cdr" "car" "follow-submodels" "else" "get-class-form" "child" "get-model" "symbol?" "null?" "cond" "path" "model")}
        {Lisp-Entry "present-location" method #f 201 11 201 27 ("get-presentation-property" "localize" "ascendant" "lambda" "map" "join" "null?" "if" "collect-ascendants" "cdr" "ascendants" "let" "component")}
        {Lisp-Entry "on-designer" method #f 213 20 213 31 ("value:" "property:" "component:" "property-change" ":property-change" "child-remove" ":child-remove" "parent:" "child:" "get-property" "child-add" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "child-add" method #f 220 11 220 20 ("insert-component" "lambda" "with-update-locked" "client" "neq?" "Group" "is?" "or" "unless" "parent" "child")}
        {Lisp-Entry "child-remove" method #f 227 11 227 23 ("remove-row" "lambda" "with-update-locked" "when" "component-row" "row" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "child")}
        {Lisp-Entry "property-change" method #f 236 11 236 26 ("invalidate-cell" "set-title" "present-property" "title" "get-cell-data" "data" "Cell" "new" "cell" "let*" "get-user-data" "eq?" "rank" "row" "lambda" "for-each-visible-row" "when" "car" "key:" "field-name" "details" "find" "col" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "value" "property" "component")}}}})
"Dimension-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Dimension-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Dimension-Row" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Dimension-Row" class #f 43 20 43 33 ("Value-Row")
        {Lisp-Entry "present" method #f 51 20 51 27 ("get-height" "get-width" "format" "size")}
        {Lisp-Entry "get-edited-value" method #f 62 20 62 36 ("Dimension" "new" "height" "width" "bind" "editor" "get-string-content" "read-delimited-string" "list" "let")}
        {Lisp-Entry "edit" method #f 69 11 69 15 ("get-tree" "expand/collapse" "get-height" "value" "get-width" "self" "add-row" "edit-in-cell")}
        {Lisp-Entry "close-editor" method #f 77 11 77 23 ("remove-every-son" "nextmethod")}
        {Lisp-Entry "in-edition?" method #f 83 11 83 22 ("0" "get-sons" "cardinality" ">" "nextmethod" "or")}}}})
"Directory-Group-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Directory-Group-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Directory-Group-Row" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Directory-Group-Row" class #f 46 20 46 39 ("Pathname-Row")
        {Lisp-Entry "initialize" method #f 54 20 54 30 ("group" "'group" "editor" "set-protocol" "nextmethod" "apply" "others" "parameters" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" method #f 65 11 65 23 ("focus-editor" "enter-edited-value" "Directory-Group" "new" "set-edited-value" "get-list" "essay" "directories:" "choose-directory" "directories" "get-edited-value" "actual" "let*")}}}})
"Directory-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Directory-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Directory-Row" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Directory-Row" class #f 44 20 44 33 ("Pathname-Row")
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("dir" "'dir" "editor" "set-protocol" "nextmethod" "apply" "others" "parameters" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" method #f 63 11 63 23 ("focus-editor" "enter-edited-value" "set-edited-value" "choose-directory" "dir" "let")}}}})
"Dispatch-Designer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "designer" "Dispatch-Designer.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.designer.Dispatch-Designer" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Dispatch-Designer" class #f 43 20 43 37 ("Designer")}
      {Lisp-Entry "Dispatch-Designer" class #f 49 20 49 37 ("initialize" "Designer")
        {Lisp-Entry "designers" slot #f 52 8 52 17 ()}
        {Lisp-Entry "initialize" method #f 60 11 60 21 ("install-designers" "nextmethod" "apply" "rest")}
        {Lisp-Entry "install-designers" method #f 70 11 70 28 ("install-designer" "install-designer?" "when" "level" "descendant" "lambda" "reference" "for-each-descendant")}
        {Lisp-Entry "install-designer?" method #f 77 26 77 43 ("component")}
        {Lisp-Entry "get-designer-class" method #f 81 26 81 44 ("Designer")}
        {Lisp-Entry "install-designer" method #f 85 11 85 27 ("add-project-designer" "reference:" "form:" "get-designer-class" "new" "designer" "get-self-form" "form" "project" "class-of" "class" "let*" "component")}
        {Lisp-Entry "add-designer" method #f 92 11 92 23 ("cons" "designers" "set!" "designer" "component")}
        {Lisp-Entry "remove-designer" method #f 96 11 96 26 ("assq" "remove!" "designers" "set!" "component")}
        {Lisp-Entry "get-designer" method #f 100 21 100 33 ("designers" "assq-value" "component")}
        {Lisp-Entry "for-each-designer" method #f 104 11 104 28 ("designers" "designer" "component" "bind" "pair" "lambda" "for-each" "proc")}
        {Lisp-Entry "project-add" method #f 111 21 111 32 ("add-designer" "Project" "is?" "when" "level" "descendant" "lambda" "for-each-descendant" "project")}
        {Lisp-Entry "project-remove" method #f 118 21 118 35 ("cleanup-project-designers" "project")}
        {Lisp-Entry "set-name" method #f 130 11 130 19 ("set-name" "" "apply" "find-modification-designer" "designer" "let" "others" "use-owner?" "bind-keywords" "rest" "name" "component")}
        {Lisp-Entry "set-property" method #f 136 11 136 23 ("set-property" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "value" "property" "component")}
        {Lisp-Entry "add-child" method #f 145 11 145 20 ("add-child" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "parent" "child")}
        {Lisp-Entry "remove-child" method #f 154 11 154 23 ("remove-child" "" "get-project-designer" "designer" "let" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parent" "parent" "let*" "rest" "child")}
        {Lisp-Entry "instantiate-parcels" method #f 164 11 164 30 ("instantiate-parcels" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent" "parcels")}
        {Lisp-Entry "move-components" method #f 173 11 173 26 ("move-components" "" "get-project-designer" "designer" "rest" "nextmethod" "apply" "reference" "eq?" "if" "verify-name-conflicts" "package-components" "let*" "set-modified?" "descendant?:" "design-events?:" "name-resolution" "name-resolution:" "parcels" "instantiate-parcels" "prog1" "delete-components" "destination-owner" "get-parent" "find-modification-owner" "component" "lambda" "key:" "uniform" "owner" "let" "branch" "branch:" "destination" "components")}
        {Lisp-Entry "move-components" method #f 189 11 189 26 ("set-modified?" "descendant?:" "design-events?:" "name-resolution:" "instantiate-parcels" "prog1" "delete-components" "verify-name-conflicts" "name-resolution" "package-components" "parcels" "let*" "branch" "branch:" "destination" "components")}
        {Lisp-Entry "cut-components" method #f 202 11 202 25 ("cut-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "copy-components" method #f 211 11 211 26 ("copy-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "paste-clipboard" method #f 220 11 220 26 ("paste-clipboard" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent")}
        {Lisp-Entry "get-parents" method #f 228 11 228 22 ("get-parent" "map" "components")}
        {Lisp-Entry "find-modification-designer" method #f 237 11 237 37 ("get-designer" "my-designer??" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "use-owner?" "components")}
        {Lisp-Entry "find-modification-owner" method #f 244 11 244 34 ("car" "error" "1" "length" ">" "map" "remove-duplicates" "owners" "let" "pair?" "get-parent" "install-designer?" "reference" "eq?" "or" "if" "component" "lambda" "find-owner-project" "letrec" "components")}
        {Lisp-Entry "save-designer" method #f 263 21 263 34 ("designer" "project" "lambda" "for-each-designer" "save" "set!" "get-modified?" "when" "some-modified?" "let")}}}})
"Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Domain.jazz"} 1267024518
    {Lisp-Entry "jazz.designer.domain.Domain" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Domain" class #f 45 7 45 13 ("attributes" "Node")
        {Lisp-Entry "nullable?" definition #f 49 5 49 14 ()}
        {Lisp-Entry "get-nullable?" accessor #f 49 5 49 14 ()}
        {Lisp-Entry "set-nullable?" accessor #f 49 5 49 14 ()}
        {Lisp-Entry "validate" method #f 57 26 57 34 ("validate-value" "field-name" "property:" "class-of" "property-presentation" "localize" "format" "message:" "Integrity-Violation" "new" "add-violation" "nullable?" "when" "not" "if" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "validate-value" method #f 64 26 64 40 ("manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "validate-text" method #f 68 26 68 39 ("text")}
        {Lisp-Entry "present" method #f 77 26 77 33 ("present" "'present" "unimplemented" "value")}
        {Lisp-Entry "setup-entry" method #f 86 26 86 37 ("client" "view")}
        {Lisp-Entry "setup-list-entry" method #f 90 26 90 42 ("client" "view")}
        {Lisp-Entry "get-property-presentation" method #f 99 26 99 51 ("get-entry" "get-presentation" "view")}
        {Lisp-Entry "set-property-presentation" method #f 103 26 103 51 ("get-entry" "set-presentation" "presentation" "view")}
        {Lisp-Entry "get-property-value" method #f 107 26 107 44 ("get-entry" "get-value" "view")}
        {Lisp-Entry "set-property-value" method #f 111 26 111 44 ("get-entry" "set-value" "value" "view")}
        {Lisp-Entry "get-property-modified?" method #f 115 26 115 48 ("get-entry" "get-modified?" "view")}
        {Lisp-Entry "set-property-modified?" method #f 119 26 119 48 ("get-entry" "set-modified?" "value" "view")}}}})
"Domain-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "choosers" "Domain-Chooser.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.choosers.Domain-Chooser" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Domain-Chooser" class #f 48 20 48 34 ("on-cancel" "114" "cancel" "default?:" "on-ok" ":host" "action-handler:" "24" "80" "351" "30" "ok" "200" "width:" "display-images?:" "toplevel-controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" ":images" "portfolio:" "2" "top-padding:" "detail" "filled-column:" "names-tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "304" "33" "names-border" "Label" "name:" "Font" "font:" "16" "201" "9" "10" "Point" "position:" "title:" "388" "222" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "names" property #f 51 12 51 17 ()}
        {Lisp-Entry "get-names" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "set-names" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "selected" property #f 52 12 52 20 ()}
        {Lisp-Entry "get-selected" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "set-selected" accessor #f 52 46 52 54 ()}
        {Lisp-Entry "finish" method #f 67 20 67 26 ("acquire-focus" "setup-names" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-tree" method #f 79 11 79 19 ("names-tree" "'names-tree" "locate")}
        {Lisp-Entry "get-text" method #f 83 11 83 19 ("text" "column-size" "locate")}
        {Lisp-Entry "host-title" method #f 92 25 92 35 ()}
        {Lisp-Entry "host-position" method #f 96 25 96 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method #f 100 25 100 34 ("120" "252" "Dimension")}
        {Lisp-Entry "on-return-press" method #f 110 20 110 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method #f 116 20 116 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "setup-names" method #f 126 11 126 22 ("names" "list" "children:" "add-row" "user-data:" "color:" "checked?:" "title:" "parent:" "font:" "Check-Box" "checkbox" "selected" "member?" "checked?" "cadr" "localize" "title" "car" "string?" "name" "Label" "Label-Bold" "Font" "filled" "'filled" "size" "eq?" "if" "font" "Black" "name:" "Color" "color" "4" "Rect" "layout-insets:" "fill" "'fill" "layout-type:" "Layout-View" "new" "layout" "0" "border" "let*" "info" "for-each" "remove-every-row" "lambda" "with-update-locked" "tree")}
        {Lisp-Entry "get-modal-result" method #f 148 20 148 36 ("get-output" "put" "name" "get-checked?" "Check-Box" "is?" "and" "when" "get-user-data" "checkbox" "rank" "row" "lambda" "for-each-row" "List-Factory" "new" "fact" "get-tree" "tree" "let")}}}})
"Domain-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Domain-Row.jazz"} 1267024518
    {Lisp-Entry "jazz.designer.row.Domain-Row" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Domain-Row" class #f 45 20 45 30 ("initialize" "Value-Row")
        {Lisp-Entry "domain" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-domain" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-domain" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("domain~self" "set!" "nextmethod" "apply" "others" "domain" "bind-keywords" "rest")}
        {Lisp-Entry "present" method #f 67 20 67 27 ("->string" "value")}
        {Lisp-Entry "new-editor" method #f 77 20 77 30 ("self" "value-row:" "Domain-Editor" "new" "editor" "let")}
        {Lisp-Entry "editor-class" method #f 83 11 83 23 ("Color-Row-Editor")}
        {Lisp-Entry "get-edited-value" method #f 87 20 87 36 ("Color" "parse-string" "body" "'body" "editor" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-edited-value" method #f 92 20 92 36 ("color" "'color" "set-background" "present" "body" "'body" "editor" "locate" "set-string-content" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 97 20 97 40 ("body" "'body" "editor" "locate" "get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 101 20 101 40 ("body" "'body" "editor" "locate" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" method #f 105 20 105 31 ("body" "'body" "editor" "locate" "show-text-cursor")}
        {Lisp-Entry "focused-editor" method #f 109 20 109 34 ("body" "'body" "editor" "locate")}}
      {Lisp-Entry "Domain-Editor" class #f 118 7 118 20 ("initialize" "Layout-View")
        {Lisp-Entry "value-row" property #f 121 12 121 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 121 46 121 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 121 46 121 54 ()}}}})
"Editor-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "event" "Editor-Event.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.event.Editor-Event" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Editor-Event" class #f 43 7 43 19 ("Event")}}})
"Editor-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Editor-Row.jazz"} 1260287915
    {Lisp-Entry "jazz.designer.row.Editor-Row" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Editor-Row" class #f 43 20 43 30 ("initialize" "Tree-Row")
        {Lisp-Entry "editor" slot #f 46 8 46 14 ()}
        {Lisp-Entry "get-editor" accessor #f 46 39 46 47 ()}
        {Lisp-Entry "set-editor" accessor #f 46 39 46 47 ()}
        {Lisp-Entry "auto-in-place?" method #f 54 20 54 34 ()}
        {Lisp-Entry "layout" method #f 63 20 63 26 ("get-height" "get-width" "-" "Dimension" "set-size" "0" "Point" "new" "set-position" "1" "get-indentation" "level" "*" "12" "+" "width" "get-size" "size" "get-tree" "tree" "let*" "editor" "when")}
        {Lisp-Entry "draw" method #f 77 20 77 24 ("get-height" "get-width" "self" "draw-level" "get-node-column" "column" "get-tree" "tree" "let*" "lv" "lh" "context" "surface")}}}})
"Editor-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Editor-View.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.editor.Editor-View" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Editor-View" class #f 52 20 52 31 ("explicit" "initialize" "Document" "Layout-View")
        {Lisp-Entry "client" property #f 55 12 55 18 ()}
        {Lisp-Entry "designer" slot #f 58 8 58 16 ()}
        {Lisp-Entry "get-designer" accessor #f 58 40 58 48 ()}
        {Lisp-Entry "listeners" slot #f 59 8 59 17 ()}
        {Lisp-Entry "undoer" slot #f 60 8 60 14 ()}
        {Lisp-Entry "selection" slot #f 61 8 61 17 ()}
        {Lisp-Entry "controller" slot #f 62 8 62 18 ()}
        {Lisp-Entry "rights" slot #f 63 8 63 14 ()}
        {Lisp-Entry "get-rights" accessor #f 63 43 63 51 ()}
        {Lisp-Entry "set-rights" accessor #f 63 43 63 51 ()}
        {Lisp-Entry "get-editor-view" method #f 66 20 66 35 ("self")}
        {Lisp-Entry "host-icon" method #f 75 25 75 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 79 25 79 35 ()}
        {Lisp-Entry "install-in-host" method #f 83 20 83 35 ("get-controller" "update-status" "nextmethod" "host")}
        {Lisp-Entry "install-scroller" method #f 88 11 88 27 ()}
        {Lisp-Entry "default-extension" method #f 97 20 97 37 ()}
        {Lisp-Entry "extensions" method #f 101 20 101 30 ()}
        {Lisp-Entry "focus-document" method #f 105 20 105 34 ("acquire-focus")}
        {Lisp-Entry "current-history-item" method #f 109 20 109 40 ()}
        {Lisp-Entry "get-controller" method #f 117 20 117 34 ("new-controller" "set!" "controller" "unless")}
        {Lisp-Entry "new-controller" method #f 123 20 123 34 ("self" "Editor-View-Controller" "new")}
        {Lisp-Entry "save" method #f 127 20 127 24 ("get-controller" "save")}
        {Lisp-Entry "save-as" method #f 131 20 131 27 ("get-controller" "save-as")}
        {Lisp-Entry "save-all" method #f 135 26 135 34 ("get-controller" "save-all")}
        {Lisp-Entry "install-scroller?" method #f 139 20 139 37 ()}
        {Lisp-Entry "get-moniker" method #f 143 11 143 22 ("get-controller" "get-moniker")}
        {Lisp-Entry "set-moniker" method #f 147 11 147 22 ("get-controller" "set-moniker" "moniker")}
        {Lisp-Entry "load-content" method #f 151 20 151 32 ("set-client" "instantiate" "cpnt" "read-from-file" "form" "let*" "moniker")}
        {Lisp-Entry "verify-reload" method #f 157 20 157 33 ()}
        {Lisp-Entry "reload-moniker" method #f 161 20 161 34 ("moniker")}
        {Lisp-Entry "get-modified?" method #f 165 20 165 33 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 169 20 169 33 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "set-controller-modified?" method #f 173 29 173 53 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "update-status" method #f 177 11 177 24 ("get-controller" "update-status")}
        {Lisp-Entry "update-moniker-time" method #f 181 11 181 30 ("get-controller" "update-moniker-time" "moniker")}
        {Lisp-Entry "confirm-close" method #f 185 20 185 33 ("get-controller" "confirm-close" "rest")}
        {Lisp-Entry "compare-moniker" method #f 189 20 189 35 ("bring-to-front" "set-visible?" "get-guest" "compare-trees" "lambda" ":wait" "with-cursor" "right-moniker:" "left-moniker:" "host-visible?:" "Compare-Databases" "'Compare-Databases" "require-service" "new-frame" "frame" "right" "Document-Moniker" "new" "left" "let*" "moniker")}
        {Lisp-Entry "tool-update" method #f 200 20 200 31 ("tool?")}
        {Lisp-Entry "console-update" method #f 204 20 204 34 ("console?")}
        {Lisp-Entry "install" method #f 213 20 213 27 ("on-editor" "'on-editor" "method-name:" "self" "target:" "Event-Handler" "new" "add-editor-listener" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method #f 223 20 223 27 ("nextmethod" "close-application-selected" "self" "remove-editor-listener" "controller" "close" "set-client")}
        {Lisp-Entry "new-form" method #f 236 19 236 27 ()}
        {Lisp-Entry "open-form" method #f 240 19 240 28 ("open-form" "instantiate" "set-client")}
        {Lisp-Entry "save-form" method #f 245 19 245 28 ("edit-document" "file?" "when" "designer" "get-form" "get-origin" "origin" "get-application" "appl" "let" "save" "lambda" ":wait" "with-cursor")}
        {Lisp-Entry "edit-form" method #f 255 19 255 28 ("view-component")}
        {Lisp-Entry "select-branch" method #f 264 18 264 31 ("process-branch-changing" "lambda" ":wait" "with-cursor" "client" "get-active-branch" "either" "neq?" "when" "branch")}
        {Lisp-Entry "change-branch" method #f 271 11 271 24 ("process-branch-changed" "get-client" "set-active-branch" "branch")}
        {Lisp-Entry "select-component" method #f 281 11 281 27 ("edit-component" "bell" "not" "if" "selected-component" "component" "let" "descendants" "'descendants" "locate" "get-highlight-edited?" "and" "when" "control?" "tree")}
        {Lisp-Entry "property-change" method #f 294 21 294 36 ("list" "undoer" "register-undo" "find-changed-property" "Info-Row" "subtype?" "or" "unless" "symbolize-property" "get-row-class" "row-class" "let" "when" "undoable?" "value" "property" "component" "branch")}
        {Lisp-Entry "find-changed-property" method #f 302 21 302 42 ("eq?" "and" "prop" "cpn" "br" "bind" "action" "lambda" "find-if" "undoer" "get-undo-list" "undo-list" "symbolize-property" "let" "property" "component" "branch")}
        {Lisp-Entry "select-property" method #f 313 18 313 33 ("process-property-selected" "property")}
        {Lisp-Entry "show-properties" method #f 317 26 317 41 ("focus?:" "workspace:" "Properties-Manager" "select-palette")}
        {Lisp-Entry "get-selection" method #f 326 18 326 31 ("selection")}
        {Lisp-Entry "set-selection" method #f 330 18 330 31 ("update-focus-actions" "self" "set-selected" "process-selection-changed" "process-selection-changing" "selection" "old" "get-application" "appl" "let" "focus?" "focus?:" "force?" "force?:" "force-parent?" "force-parent?:" "origin" "origin:" "new")}
        {Lisp-Entry "outer-selection" method #f 339 21 339 36 ("selection" "outer-component" "component" "lambda" "map" "get-reference" "reference" "let")}
        {Lisp-Entry "close-application-selected" method #f 346 11 346 37 ("self" "close-selected" "get-application" "appl" "let")}
        {Lisp-Entry "select-all" method #f 351 20 351 30 ("rest")}
        {Lisp-Entry "unselect-all" method #f 355 18 355 30 ("set-selection")}
        {Lisp-Entry "select" method #f 359 18 359 24 ("cons" "list" "append" "self" "origin:" "remove" "set-selection" "selection" "memq?" "control-down?" "if" "focus?" "focus?:" "component")}
        {Lisp-Entry "selection-changed" method #f 369 29 369 46 ("length" "0" "naturals" "select" "rank" "unselect" "get-surrogate" "surrogate" "let" "Component" "is?" "when" "component" "lambda" "for-each" "selection" "set!" "focus?" "force-parent?" "origin" "new" "old")}
        {Lisp-Entry "delete-selection" method #f 386 20 386 36 ("self" "origin:" "list" "if" "set-selection" "get-client" "get-editor" "get-designer" "remove-child" "get-surrogate" "surrogate" "component" "lambda" "for-each" "components-parent" "parent" "when" "outer-selection" "components" "throw-cancel" "cancel" "no" "yes" "case" "confirmation" "'confirmation" "type:" "localize" "message-box" "code" "let" "text" "confirm-action" "confirm-close" "define")}
        {Lisp-Entry "components-parent" method #f 407 19 407 36 ("car" "1" "length" "=" "if" "get-parent" "map" "remove-duplicates" "parents" "let" "components")}
        {Lisp-Entry "cleanup-selection" method #f 415 11 415 28 ("not" "component" "lambda" "collect-if" "set-selection" "selection" "object-destroyed?" "some?" "when")}
        {Lisp-Entry "save-content" method #f 427 20 427 32 ("process-saved" "set-modified?" "update-status" "get-modified?" "not" "if" "update-moniker-time" "branch:" "get-base" "get-client" "set-name" "designer" "save-to" "process-saving" "moniker")}
        {Lisp-Entry "save-content-patch" method #f 439 18 439 36 ("set-modified?" "update-status" "get-modified?" "not" "if" "update-moniker-time" "designer-save" "process-saving" "moniker")}
        {Lisp-Entry "designer-save" method #f 448 29 448 42 ("designer" "save")}
        {Lisp-Entry "view-component" method #f 457 11 457 25 ("edit-form" "bell" "designer" "not" "if")}
        {Lisp-Entry "on-editor" method #f 468 29 468 38 ("selection-changed" "get-user-origin?" "focus?" "get-force-parent?" "force-parent?" "get-origin" "origin" "get-selection" "get-old" "old" ":selection-changed" "designer" "save-component-properties" "Component" "is?" "car" "cpn" "let" "selection" "not-null?" "when" ":saving" ":selection-changing" "cleanup-selection" ":branch-changed" "branch:" "get-property" "change-branch" ":branch-changing" "get-kind" "case" "evt")}
        {Lisp-Entry "get-client" method #f 493 18 493 28 ("client")}
        {Lisp-Entry "set-client" method #f 497 18 497 28 ("client-updated" "edit-component" "process-client-change" "client-update" "self" "Editor-Undoer" "new" "essay" "undoer" "set!" "remove-surrogate" "old" "let" "client" "neq?" "when" "clt")}
        {Lisp-Entry "client-update" method #f 510 29 510 42 ("install-client-surrogate")}
        {Lisp-Entry "client-updated" method #f 514 29 514 43 ()}
        {Lisp-Entry "install-client-surrogate" method #f 518 29 518 53 ()}
        {Lisp-Entry "get-designer-class" method #f 527 29 527 47 ("Designer")}
        {Lisp-Entry "get-reference" method #f 531 18 531 31 ("get-reference" "designer" "essay")}
        {Lisp-Entry "edit-component" method #f 535 18 535 32 ("update-status" "process-designer-change" "install-current-designer" "uninstall-current-designer" "either" "designer" "old" "get-reference" "neq?" "class-of" "get-self-form" "file?" "not" "or" "get-origin" "origin" "and" "if" "get-form" "component-form" "let" "when" "get-edited-form" "define" "form" "form:" "component")}
        {Lisp-Entry "install-current-designer" method #f 555 29 555 53 ("client" "install-designer" "on-designer" "'on-designer" "method-name:" "self" "target:" "Event-Handler" "add-designer-listener" "reference:" "form:" "get-designer-class" "new" "designer" "set!" "form" "component")}
        {Lisp-Entry "uninstall-current-designer" method #f 561 29 561 55 ("set!" "uninstall-designer" "client" "self" "remove-designer-listener" "designer" "when")}
        {Lisp-Entry "on-designer" method #f 569 29 569 40 (":send-before" ":child-remove" ":child-add" "set-controller-modified?" "undoable?:" "value:" "property:" "component:" "branch:" "get-property" "property-change" ":property-change" "case" "get-kind" "kind" "let" "evt")}
        {Lisp-Entry "add-editor-listener" method #f 584 18 584 37 ("add-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "remove-editor-listener" method #f 588 18 588 40 ("remove-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "process-client-change" method #f 592 11 592 32 ("invoke" "listener" "lambda" "for-each" "client:" "old:" "self" ":client-change" "Editor-Event" "new" "evt" "let" "listeners" "when" "client" "old")}
        {Lisp-Entry "process-designer-change" method #f 600 11 600 34 ("invoke" "listener" "lambda" "for-each" "designer:" "old:" "self" ":designer-change" "Editor-Event" "new" "evt" "let" "listeners" "when" "designer" "old")}
        {Lisp-Entry "process-branch-changing" method #f 608 18 608 41 ("invoke" "listener" "lambda" "for-each" "branch:" "self" ":branch-changing" "Editor-Event" "new" "evt" "let" "listeners" "when" "branch")}
        {Lisp-Entry "process-branch-changed" method #f 616 18 616 40 ("invoke" "listener" "lambda" "for-each" "branch:" "self" ":branch-changed" "Editor-Event" "new" "evt" "let" "listeners" "when" "branch")}
        {Lisp-Entry "process-selection-changing" method #f 624 18 624 44 ("invoke" "listener" "lambda" "for-each" "user-origin?:" "force?:" "force-parent?:" "origin:" "self" ":selection-changing" "Selection-Event" "new" "evt" "let" "listeners" "when" "user-origin?" "force?" "force-parent?" "origin" "selection" "old")}
        {Lisp-Entry "process-selection-changed" method #f 632 18 632 43 ("invoke" "listener" "lambda" "for-each" "user-origin?:" "force?:" "force-parent?:" "origin:" "self" ":selection-changed" "Selection-Event" "new" "evt" "let" "listeners" "when" "user-origin?" "force?" "force-parent?" "origin" "selection" "old")}
        {Lisp-Entry "process-property-selected" method #f 640 18 640 43 ("invoke" "listener" "lambda" "for-each" "property:" "self" ":property-selected" "Editor-Event" "new" "evt" "let" "listeners" "when" "property")}
        {Lisp-Entry "process-saving" method #f 648 18 648 32 ("invoke" "listener" "lambda" "for-each" "self" ":saving" "Editor-Event" "new" "evt" "let" "listeners" "when")}
        {Lisp-Entry "process-saved" method #f 656 18 656 31 ("invoke" "listener" "lambda" "for-each" "self" ":saved" "Editor-Event" "new" "evt" "let" "listeners" "when")}
        {Lisp-Entry "editor-title" method #f 669 26 669 38 ("class-of" "category-name" "format" "not" "if" "get-reference" "reference" "let")}}
      {Lisp-Entry "Editor-Undoer" class #f 681 7 681 20 ("Undoer")
        {Lisp-Entry "play-action" method #f 684 20 684 31 ("play-action" "'play-action" "unimplemented" "action")}}}})
"Editor-View-Controller"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Editor-View-Controller.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.editor.Editor-View-Controller" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Editor-View-Controller" class #f 45 20 45 42 ("Document-Controller")
        {Lisp-Entry "save" method #f 49 20 49 24 ("document" "save-content-patch")}
        {Lisp-Entry "name-status" method #f 53 20 53 31 ("category-name" "identifier-name" "else" "get-name" "file?" "effective-newname" "not" "cond" "format" "origin" "get-origin" "get-form" "form" "when" "document" "get-designer" "designer" "let" "find-origin" "define")}
        {Lisp-Entry "update-moniker-time" method #f 71 20 71 39 ("moniker")}}}})
"Enumeration-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Enumeration-Domain.jazz"} 1264085224
    {Lisp-Entry "jazz.designer.domain.Enumeration-Domain" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Enumeration-Domain" class #f 45 7 45 25 ("100" "attributes" "Domain")
        {Lisp-Entry "width" definition #f 49 5 49 10 ()}
        {Lisp-Entry "get-width" accessor #f 49 5 49 10 ()}
        {Lisp-Entry "set-width" accessor #f 49 5 49 10 ()}
        {Lisp-Entry "choices" definition #f 50 5 50 12 ()}
        {Lisp-Entry "get-choices" accessor #f 50 5 50 12 ()}
        {Lisp-Entry "set-choices" accessor #f 50 5 50 12 ()}
        {Lisp-Entry "condensed?" definition #f 51 5 51 15 ()}
        {Lisp-Entry "get-condensed?" accessor #f 51 5 51 15 ()}
        {Lisp-Entry "set-condensed?" accessor #f 51 5 51 15 ()}
        {Lisp-Entry "strict?" definition #f 52 5 52 12 ()}
        {Lisp-Entry "get-strict?" accessor #f 52 5 52 12 ()}
        {Lisp-Entry "set-strict?" accessor #f 52 5 52 12 ()}
        {Lisp-Entry "limit" definition #f 53 5 53 10 ()}
        {Lisp-Entry "get-limit" accessor #f 53 5 53 10 ()}
        {Lisp-Entry "set-limit" accessor #f 53 5 53 10 ()}
        {Lisp-Entry "validate-value" method #f 61 20 61 34 ("property:" "map" "join" "format" "message:" "Integrity-Violation" "new" "add-violation" "key:" "choices" "member?" "when" "cadr" "localize" "car" "cdr" "not" "if" "choice" "present-choice" "define" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 76 20 76 27 ("cadr" "localize" "choices" "assq" "pair" "let" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method #f 90 20 90 31 ("choices" "combo" "'combo" "locate" "set-choices" "self" "domain:" "19" "width" "Dimension" "size:" "parent:" "Enumeration-Entry" "new" "entry" "let" "client" "view")}
        {Lisp-Entry "setup-list-entry" method #f 95 20 95 36 ("choices" "setup" "self" "domain:" "parent:" "Enumeration-List-Entry" "new" "entry" "let" "client" "view")}}}})
"Enumeration-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "entry" "Enumeration-Entry.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.entry.Enumeration-Entry" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Enumeration-Entry" class #f 49 7 49 24 ("Label" "Font" "font:" "Default" "Text-Style" "default-style:" "top-padding:" "2" "left-padding:" "body" "selectable?:" "condensed?:" "combo" "entry" "style:" "edge" "border-type:" "border" "name:" "Property-Entry")
        {Lisp-Entry "finish" method #f 59 20 59 26 ("self" "body" "set-editor" "string-di=?" "combo" "'combo" "locate" "set-entry-test" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method #f 70 20 70 28 ("body" "combo" "locate")}
        {Lisp-Entry "validate" method #f 79 20 79 28 ("else" "format-plural" "format" "tie" "string-length" ">" "string?" "get-nullable?" "nil?" "cond" "value" "french:" "english:" "Locales" "message:" "Property-Violation" "new" "car" "key:" "get-value" "member?" "combo" "'combo" "locate" "valid-value?" "not" "get-strict?" "and" "if" "get-limit" "limit" "get-choices" "choices" "let" "domain")}
        {Lisp-Entry "get-value" method #f 104 20 104 29 ("combo" "'combo" "locate" "get-value")}
        {Lisp-Entry "set-value" method #f 108 20 108 29 ("combo" "'combo" "locate" "set-value" "value")}
        {Lisp-Entry "get-modified?" method #f 112 20 112 33 ("combo" "'combo" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 116 20 116 33 ("combo" "'combo" "locate" "set-modified?" "value")}
        {Lisp-Entry "set-editable?" method #f 125 20 125 33 ("combo" "'combo" "set-editable?" "none" "'none" "edge" "'edge" "if" "border" "'border" "locate" "set-border-type" "value")}}}})
"Enumeration-List-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "entry" "Enumeration-List-Entry.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.entry.Enumeration-List-Entry" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Enumeration-List-Entry" class #f 47 7 47 29 ("200" "width:" "toplevel-controls?:" "controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" ":images" "portfolio:" "entry" "filled-column:" "show-header?:" "tree" "document" "style:" "shown?:" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "border" "name:" "Property-Entry")
        {Lisp-Entry "setup" method #f 66 21 66 26 ("patch-tree" "list" "children:" "add-row" "user-data:" "color:" "title:" "parent:" "font:" "Check-Box" "checkbox" "Label" "Label-Bold" "Font" "filled" "'filled" "size" "eq?" "if" "font" "Black" "name:" "Color" "color" "4" "Rect" "layout-insets:" "fill" "'fill" "layout-type:" "Layout-View" "new" "layout" "0" "border" "title" "get-name" "name" "let*" "component" "for-each" "remove-every-row" "lambda" "with-update-locked" "'tree" "locate" "tree" "get-creator" "child" "get-children" "components" "let" "key" "client")}
        {Lisp-Entry "patch-tree" method #f 86 18 86 28 ("layout-drawing" "rank" "row" "lambda" "for-each-visible-row" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "get-value" method #f 98 20 98 29 ("get-output" "put" "get-checked?" "when" "name" "checkbox" "row" "lambda" "for-each-checkbox" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "set-value" method #f 107 20 107 29 ("set-checked?" "member?" "checked?" "let" "name" "checkbox" "row" "lambda" "for-each-checkbox" "value")}
        {Lisp-Entry "get-modified?" method #f 114 20 114 33 ("continuation-return" "get-modified?" "when" "name" "checkbox" "row" "for-each-checkbox" "return" "lambda" "continuation-capture")}
        {Lisp-Entry "set-modified?" method #f 124 20 124 33 ("set-modified?" "name" "checkbox" "row" "lambda" "for-each-checkbox" "value")}
        {Lisp-Entry "for-each-checkbox" method #f 135 11 135 28 ("name" "Check-Box" "is?" "when" "get-user-data" "checkbox" "rank" "row" "lambda" "for-each-row" "'tree" "locate" "tree" "let" "proc")}}}})
"Enumeration-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Enumeration-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Enumeration-Row" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Enumeration-Row" class #f 45 20 45 35 ("initialize" "Combo-Row")
        {Lisp-Entry "list?" property #f 49 12 49 17 ()}
        {Lisp-Entry "get-list?" accessor #f 49 42 49 50 ()}
        {Lisp-Entry "set-list?" accessor #f 49 42 49 50 ()}
        {Lisp-Entry "initialize" method #f 57 20 57 30 ("choose" "'choose" "set-kind" "list?~self" "choices~self" "set!" "nextmethod" "apply" "others" "list?" "choices" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" method #f 70 20 70 32 ("focus-editor" "enter-edited-value" "set-edited-value" "selected:" "choices" "names:" "Domain-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" method #f 83 20 83 27 ("choices" "assq" "cadr" "localize" "name" "lambda" "map" "join" "null?" "if" "names")}
        {Lisp-Entry "get-edited-value" method #f 97 20 97 36 ("equal?" "test:" "cadr" "localize" "info" "key:" "choices" "find-in" "car" "title" "lambda" "map" "parse-strings" "strings" "=" "empty-string?" "or" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" method #f 107 20 107 36 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"File-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "File-Row.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.row.File-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "File-Row" class #f 44 20 44 28 ("explicit" "Pathname-Row")
        {Lisp-Entry "mode" property #f 47 12 47 16 ()}
        {Lisp-Entry "parameters" property #f 48 12 48 22 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("set-parameters" "set-mode" "file" "'file" "editor" "set-protocol" "nextmethod" "apply" "others" "parameters" "open" "'open" "mode" "bind-keywords" "rest")}
        {Lisp-Entry "get-mode" method #f 69 18 69 26 ("editor" "get-mode")}
        {Lisp-Entry "set-mode" method #f 73 18 73 26 ("editor" "set-mode" "value")}
        {Lisp-Entry "get-parameters" method #f 77 18 77 32 ("editor" "get-parameters")}
        {Lisp-Entry "set-parameters" method #f 81 18 81 32 ("editor" "set-parameters" "value")}
        {Lisp-Entry "combo-choose" method #f 90 11 90 23 ("focus-editor" "enter-edited-value" "set-edited-value" "parameters" "choose-file" "apply" "file" "let")}}}})
"Font-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Font-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Font-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Font-Row" class #f 44 20 44 28 ("Combo-Row")
        {Lisp-Entry "initialize" method #f 47 20 47 30 ("symbol->string" "key:" "symbolic-fonts" "nu<?" "sort" "list" "->string" "title" "symbolic-font" "font" "let" "name" "lambda" "map" "set-choices" "nextmethod" "apply" "rest")}}}})
"Foreign-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Foreign-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.Foreign-Domain" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Foreign-Domain" class #f 43 7 43 21 ("Domain")}
      {Lisp-Entry "Foreign-Domain" class #f 49 7 49 21 ("attributes" "Domain")
        {Lisp-Entry "key" definition #f 53 5 53 8 ()}
        {Lisp-Entry "get-key" accessor #f 53 5 53 8 ()}
        {Lisp-Entry "set-key" accessor #f 53 5 53 8 ()}
        {Lisp-Entry "objects" definition #f 54 5 54 12 ()}
        {Lisp-Entry "get-objects" accessor #f 54 5 54 12 ()}
        {Lisp-Entry "set-objects" accessor #f 54 5 54 12 ()}
        {Lisp-Entry "criteria" definition #f 55 5 55 13 ()}
        {Lisp-Entry "get-criteria" accessor #f 55 5 55 13 ()}
        {Lisp-Entry "set-criteria" accessor #f 55 5 55 13 ()}
        {Lisp-Entry "validate-value" method #f 63 11 63 25 ("property:" "violation-message" "message:" "Integrity-Violation" "new" "add-violation" "member?" "not" "when" "key" "foreign-values" "values" "let" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "foreign-values" method #f 69 11 69 25 ("criteria" "search-descendants" "get-name" "map" "child" "foreign" "let" "key" "client")}
        {Lisp-Entry "violation-message" method #f 74 29 74 46 ("else" "join" "pair?" "key" "not" "cond" "format" "value")}
        {Lisp-Entry "present" method #f 87 11 87 18 ("join" "pair?" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method #f 100 11 100 22 ("key" "foreign-choices" "combo" "'combo" "locate" "set-choices" "self" "domain:" "parent:" "Foreign-Entry" "new" "entry" "let" "client" "view")}
        {Lisp-Entry "foreign-choices" method #f 105 11 105 26 ("list" "get-name" "name" "component" "lambda" "map" "child" "get-children" "either" "objects" "let" "key" "client")}
        {Lisp-Entry "setup-list-entry" method #f 113 11 113 27 ("key" "setup" "parent:" "Foreign-List-Entry" "new" "entry" "let" "client" "view")}}}})
"Foreign-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "entry" "Foreign-Entry.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.entry.Foreign-Entry" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Foreign-Entry" class #f 46 7 46 20 ("Label" "Font" "font:" "Default" "Text-Style" "default-style:" "top-padding:" "2" "left-padding:" "body" "combo" "edge" "border-type:" "border" "name:" "Property-Entry")
        {Lisp-Entry "get-value" method #f 61 20 61 29 ("combo" "'combo" "locate" "get-value")}
        {Lisp-Entry "set-value" method #f 65 20 65 29 ("combo" "'combo" "locate" "set-value" "value")}
        {Lisp-Entry "get-modified?" method #f 69 20 69 33 ("combo" "'combo" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 73 20 73 33 ("combo" "'combo" "locate" "set-modified?" "value")}}}})
"Foreign-List-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "choosers" "Foreign-List-Chooser.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.choosers.Foreign-List-Chooser" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Foreign-List-Chooser" class #f 46 20 46 40 ("on-cancel" "222" "cancel" "default?:" "on-ok" ":host" "Event-Handler" "action-handler:" "24" "80" "268" "138" "title:" "ok" "8" "253" "230" "430" "10" "Point" "position:" "entry" "name:" "305" "450" "Dimension" "size:" "initialize" "View")
        {Lisp-Entry "foreign" property #f 49 12 49 19 ()}
        {Lisp-Entry "get-foreign" accessor #f 49 55 49 63 ()}
        {Lisp-Entry "set-foreign" accessor #f 49 55 49 63 ()}
        {Lisp-Entry "foreign-objects" property #f 50 12 50 27 ()}
        {Lisp-Entry "get-foreign-objects" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "set-foreign-objects" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "key" property #f 51 12 51 15 ()}
        {Lisp-Entry "get-key" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "set-key" accessor #f 51 55 51 63 ()}
        {Lisp-Entry "list?" property #f 52 12 52 17 ()}
        {Lisp-Entry "get-list?" accessor #f 52 55 52 63 ()}
        {Lisp-Entry "set-list?" accessor #f 52 55 52 63 ()}
        {Lisp-Entry "allow-duplicates?" property #f 53 12 53 29 ()}
        {Lisp-Entry "get-allow-duplicates?" accessor #f 53 55 53 63 ()}
        {Lisp-Entry "set-allow-duplicates?" accessor #f 53 55 53 63 ()}
        {Lisp-Entry "all" property #f 54 12 54 15 ()}
        {Lisp-Entry "get-all" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "set-all" accessor #f 54 55 54 63 ()}
        {Lisp-Entry "value" property #f 55 12 55 17 ()}
        {Lisp-Entry "get-value" accessor #f 55 55 55 63 ()}
        {Lisp-Entry "set-value" accessor #f 55 55 55 63 ()}
        {Lisp-Entry "finish" method #f 66 20 66 26 ("value" "set-value" "allow-duplicates?" "set-allow-duplicates?" "list?" "set-list?" "all" "get-children" "foreign-objects" "null?" "key" "map" "foreign" "if" "set-all" "present" "entry" "'entry" "locate" "set-presenter" "nextmethod" "rest")}
        {Lisp-Entry "install-in-host" method #f 75 20 75 35 ("list?" "if" "get-host" "set-title" "entry" "'entry" "locate" "guest-installed-in-host" "nextmethod" "host")}
        {Lisp-Entry "present" definition #f 88 15 88 22 ("join" "atom?" "if" "object")}
        {Lisp-Entry "get-modal-result" method #f 99 20 99 36 ("entry" "'entry" "locate" "get-result")}}}})
"Foreign-List-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "entry" "Foreign-List-Entry.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.entry.Foreign-List-Entry" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Foreign-List-Entry" class #f 46 7 46 25 ("to-entry" "to-tree" "to-border" "on-remove" "remove" "on-add" "action-handler:" "22" "80" "title:" "add" "200" "width:" "display-images?:" "toplevel-controls?:" "controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-tab-press" "tab-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" ":form" "Event-Handler" "selection-handler:" ":images" "portfolio:" "show-unfocused-selection?:" "multiple-selection?:" "row" "selection-mode:" "from-entry" "filled-column:" "show-header?:" "from-tree" "document" "style:" "shown?:" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "from-border" "name:" "320" "352" "Dimension" "size:" "explicit" "initialize" "Property-Entry")
        {Lisp-Entry "list?" property #f 49 12 49 17 ()}
        {Lisp-Entry "allow-duplicates?" property #f 50 12 50 29 ()}
        {Lisp-Entry "get-allow-duplicates?" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "set-allow-duplicates?" accessor #f 50 55 50 63 ()}
        {Lisp-Entry "presenter" property #f 51 12 51 21 ()}
        {Lisp-Entry "all" property #f 52 12 52 15 ()}
        {Lisp-Entry "value" property #f 53 12 53 17 ()}
        {Lisp-Entry "to" slot #f 56 8 56 10 ()}
        {Lisp-Entry "guest-installed-in-host" method #f 79 21 79 44 ("focus-and-select" "from-tree" "'from-tree" "locate" "tree" "let")}
        {Lisp-Entry "host-title" method #f 89 25 89 35 ()}
        {Lisp-Entry "host-position" method #f 93 25 93 38 ("300" "450" "Point")}
        {Lisp-Entry "host-size" method #f 97 25 97 34 ("320" "252" "Dimension")}
        {Lisp-Entry "get-result" method #f 106 18 106 28 ("<" "sort" "list?" "if" "to->value" "value" "let")}
        {Lisp-Entry "get-presenter" method #f 118 18 118 31 ("presenter")}
        {Lisp-Entry "set-presenter" method #f 122 18 122 31 ("update" "presenter" "set!" "value")}
        {Lisp-Entry "get-all" method #f 127 18 127 25 ("all")}
        {Lisp-Entry "set-all" method #f 131 18 131 25 ("update" "all" "set!" "value")}
        {Lisp-Entry "get-value" method #f 136 20 136 29 ("value")}
        {Lisp-Entry "set-value" method #f 140 20 140 29 ("update" "value->to" "to" "value" "set!" "v")}
        {Lisp-Entry "get-list?" method #f 146 18 146 27 ("list?")}
        {Lisp-Entry "set-list?" method #f 150 18 150 27 ("from-tree" "'from-tree" "set-multiple-selection?" "if" "add" "'add" "locate" "set-title" "value->to" "to" "list?" "set!" "value")}
        {Lisp-Entry "value->to" method #f 158 11 158 20 ("list" "not" "value" "list?" "if")}
        {Lisp-Entry "to->value" method #f 167 11 167 20 ("car" "not" "to" "list?" "if")}
        {Lisp-Entry "setup" method #f 180 21 180 26 ("get-children" "get-name" "component" "lambda" "map" "set-all" "get-creator" "child" "foreign" "let" "key" "client")}
        {Lisp-Entry "layout" method #f 192 20 192 26 ("30" "remove" "'remove" "10" "+" "add" "'add" "Dimension" "set-size" "0" "Point" "new" "set-position" "52" "buttons-pos" "2" "100" "-" "quotient" "tree-width" "to-border" "'to-border" "to" "from-border" "'from-border" "locate" "from" "get-height" "height" "get-width" "width" "get-size" "size" "let*")}
        {Lisp-Entry "on-selection-change" method #f 213 11 213 30 ("update-buttons" "evt")}
        {Lisp-Entry "on-double-click" method #f 217 11 217 26 ("on-remove" "remove" "'remove" "to-tree" "on-add" "add" "'add" "locate" "get-enabled?" "when" "from-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-add" method #f 224 11 224 17 ("set-modified?" "acquire-focus" "user-data-indexes" "set-selection" "allow-duplicates?" "update" "append" "list?" "if" "to" "set!" "get-selected-data" "values" "'to-tree" "to-tree" "'from-tree" "locate" "from-tree" "let*" "evt")}
        {Lisp-Entry "on-remove" method #f 237 11 237 20 ("set-modified?" "user-data-indexes" "set-selection" "acquire-focus" "allow-duplicates?" "unless" "update" "difference" "to" "set!" "get-selected-data" "values" "'to-tree" "to-tree" "'from-tree" "locate" "from-tree" "let*" "evt")}
        {Lisp-Entry "update-buttons" method #f 249 11 249 25 ("remove" "'remove" "add" "'add" "set-enabled?" "to?" "'to-tree" "to-tree" "get-selection" "from?" "'from-tree" "locate" "from-tree" "let*")}
        {Lisp-Entry "on-tab-press" method #f 258 20 258 32 ("'from-tree" "to-tree" "'to-tree" "locate" "focus-and-select" "from-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" method #f 268 20 268 35 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" method #f 274 20 274 35 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update" method #f 284 11 284 17 ("update-buttons" "presenter" "not" "'to-tree" "to-tree" "update-to" "equal?" "test:" "to" "difference" "all" "allow-duplicates?" "if" "<" "sort" "user-data:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "present" "title" "object" "for-each" "remove-every-row" "lambda" "with-update-locked" "'from-tree" "locate" "from-tree" "let" "update-from" "define")}}}})
"Foreign-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Foreign-Row.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.row.Foreign-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Foreign-Row" class #f 44 20 44 31 ("explicit" "Combo-Row")
        {Lisp-Entry "foreign" property #f 47 12 47 19 ()}
        {Lisp-Entry "foreign-objects" property #f 48 12 48 27 ()}
        {Lisp-Entry "key" property #f 49 12 49 15 ()}
        {Lisp-Entry "get-key" accessor #f 49 40 49 48 ()}
        {Lisp-Entry "set-key" accessor #f 49 40 49 48 ()}
        {Lisp-Entry "list?" property #f 50 12 50 17 ()}
        {Lisp-Entry "get-list?" accessor #f 50 40 50 48 ()}
        {Lisp-Entry "set-list?" accessor #f 50 40 50 48 ()}
        {Lisp-Entry "allow-duplicates?" property #f 51 12 51 29 ()}
        {Lisp-Entry "get-allow-duplicates?" accessor #f 51 40 51 48 ()}
        {Lisp-Entry "set-allow-duplicates?" accessor #f 51 40 51 48 ()}
        {Lisp-Entry "initialize" method #f 59 20 59 30 ("choose" "'choose" "set-kind" "allow-duplicates?~self" "list?~self" "get-name" "either" "key~self" "foreign-objects~self" "foreign~self" "set!" "nextmethod" "apply" "others" "allow-duplicates?" "list?" "key" "foreign-objects" "foreign" "bind-keywords" "rest")}
        {Lisp-Entry "get-foreign" method #f 75 18 75 29 ("foreign")}
        {Lisp-Entry "set-foreign" method #f 79 18 79 29 ("foreign-objects" "foreign-choices" "set-choices" "foreign" "set!" "value")}
        {Lisp-Entry "get-foreign-objects" method #f 84 18 84 37 ("foreign-objects")}
        {Lisp-Entry "set-foreign-objects" method #f 88 18 88 37 ("foreign" "foreign-choices" "set-choices" "foreign-objects" "set!" "value")}
        {Lisp-Entry "foreign-choices" method #f 93 11 93 26 ("get-children" "null?" "if" "list" "key" "name" "let" "component" "lambda" "map" "when" "foreign-objects" "foreign")}
        {Lisp-Entry "combo-choose" method #f 108 20 108 32 ("focus-editor" "enter-edited-value" "set-edited-value" "value:" "allow-duplicates?" "allow-duplicates?:" "list?" "list?:" "key" "key:" "foreign-objects" "foreign-objects:" "foreign" "foreign:" "Foreign-List-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" method #f 121 20 121 27 ("atom?" "key" "lambda" "map" "else" "join" "pair?" "if" "list?" "not" "cond" "value")}
        {Lisp-Entry "get-edited-value" method #f 137 20 137 36 ("parse-strings" "map" "list?" "not" "=" "empty-string?" "or" "editor" "get-body" "get-string-content" "let" "split" "find-in" "if" "string" "parse-string" "define")}
        {Lisp-Entry "set-edited-value" method #f 151 20 151 36 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Formatted-Text-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Formatted-Text-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Formatted-Text-Row" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Formatted-Text-Row" class #f 43 20 43 38 ("Text-Row")
        {Lisp-Entry "new-editor" method #f 51 20 51 30 ("editor-class" "new")}
        {Lisp-Entry "editor-class" method #f 55 20 55 32 ("Row-Formatted-Text-View")}
        {Lisp-Entry "editor-height" method #f 59 20 59 33 ("250")}}}})
"Group-Card"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "card" "Group-Card.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.card.Group-Card" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Group-Card" class #f 47 20 47 30 ("classes-invite" "classes-image" "501" "346" "classes-group" "64" "sort?" "Label" "Font" "font:" "Default" "Text-Style" "default-style:" "top-padding:" "2" "left-padding:" "title" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "19" "262" "33" "61" "title-border" "16" "250" "48" "general-invite" "visible?:" "Image-Resource" "resource:" ":images" "portfolio:" "32" "8" "general-image" "347" "334" "0" "7" "title:" "general-group" "name:" "350" "850" "Dimension" "size:" "107" "184" "Point" "position:" "Custom-Card")
        {Lisp-Entry "Properties-Mapping" definition #f 72 14 72 32 ("boolean" "sort?" "string" "title")}
        {Lisp-Entry "get-properties-mapping" method #f 77 20 77 42 ("Properties-Mapping")}
        {Lisp-Entry "resize" method #f 86 20 86 26 ("classes-group" "'classes-group" "0" "general-group" "'general-group" "locate" "size-figure" "dv" "dh")}}}})
"Handler-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Handler-Row.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.row.Handler-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Handler-Row" class #f 45 20 45 31 ("Value-Row")
        {Lisp-Entry "get-filter-name" method #f 53 25 53 40 ("handlers" "'handlers")}
        {Lisp-Entry "get-filter-rank" method #f 57 25 57 40 ("2")}
        {Lisp-Entry "get-filter-image" method #f 61 25 61 41 ("Image-Resource")}
        {Lisp-Entry "double-click" method #f 70 20 70 32 ("edit-definitions" "pos")}
        {Lisp-Entry "present" method #f 79 20 79 27 ("get-preserved" "Surrogate-Handler" "is?" "format" "->string" ":form" "eq?" "get-method-name" "method" "get-target-name" "target" "let" "not" "if" "handler" "present-handler" "define" "value")}
        {Lisp-Entry "get-edited-value" method #f 97 20 97 36 ("second" "2" "first" "method-name:" ":form" "target-name:" "Event-Handler" "new" "1" "length" "case" "read-string-content" "list" "string=?" "if" "editor" "get-string-content" "content" "let")}
        {Lisp-Entry "edit-definitions" method #f 112 20 112 36 ("Jazz-Field-Entry" "entry" "edit" "Jazz-Entry" "get-category-location" "Jazz-Code-Location" "new" "location" "let" "get-method-name" "category-field" "field" "find-target-type" "class" "find-target" "target" "bell" "not" "if" "property" "read-property" "handler" "get-client" "car" "client" "let*" "edit-definitions" "'edit-definitions" "unimplemented")}
        {Lisp-Entry "get-menu-class" method #f 134 20 134 34 ("Handler-Menu")}}
      {Lisp-Entry "Handler-Menu" class #f 143 7 143 19 ("on-edit" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "edit" "name:" "Value-Menu")
        {Lisp-Entry "on-edit" method #f 151 11 151 18 ("value-row" "edit-definitions" "evt")}}}})
"Index-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Index-Tree.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.editor.Index-Tree" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Index-Tree" class #f 46 20 46 30 ("kind" "275" "location" "toplevel-controls?:" "100" "width:" "title:" "name:" "on-selection-change" ":self" "Event-Handler" "selection-handler:" "can-select-empty?:" "multiple-selection?:" "row" "selection-mode:" ":images" "portfolio:" "component" "filled-column:" "Details-Tree")
        {Lisp-Entry "selection-changed" method #f 61 20 61 37 ("focus?" "force-parent?" "origin" "old" "component")}
        {Lisp-Entry "on-designer" method #f 70 20 70 31 ("update" ":property-change" ":child-remove" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "update" method #f 81 20 81 26 ("get-presentation-property" "key:" "<" "sort" "insert-component" "for-each" "remove-every-row" "with-update-locked" "cons" "set!" "indexable?" "when" "level" "component" "lambda" "client" "for-each-descendant" "list" "let" "collect-components" "define" "rest")}
        {Lisp-Entry "insert-component" method #f 99 20 99 36 ("user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "class-of" "get-class-presentation" "kind" "present-location" "location" "get-component-image" "image" "get-presentation-property" "title" "let" "recursive?" "father" "component")}}}})
"Info-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Info-Row.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.row.Info-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Info-Row" class #f 45 20 45 28 ("Value-Row")
        {Lisp-Entry "get-filter-name" method #f 53 25 53 40 ("infos" "'infos")}
        {Lisp-Entry "get-filter-rank" method #f 57 25 57 40 ("0")}
        {Lisp-Entry "get-filter-image" method #f 61 25 61 41 ("Image-Resource")}
        {Lisp-Entry "present" method #f 70 20 70 27 ("format" "Locales" "is?" "if" "value")}
        {Lisp-Entry "edit" method #f 81 20 81 24 ()}
        {Lisp-Entry "end-edition" method #f 85 20 85 31 ()}
        {Lisp-Entry "save-edition" method #f 89 20 89 32 ()}
        {Lisp-Entry "select-editor" method #f 93 20 93 33 ()}
        {Lisp-Entry "set-edited-modified?" method #f 97 20 97 40 ("flag")}
        {Lisp-Entry "get-menu-class" method #f 106 20 106 34 ()}}}})
"Integer-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Integer-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.Integer-Domain" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Integer-Domain" class #f 44 7 44 21 ("Domain")
        {Lisp-Entry "validate-value" method #f 52 20 52 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "integer?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 62 20 62 27 ("->string" "not" "if" "value")}}}})
"Integer-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Integer-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Integer-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Integer-Row" class #f 43 20 43 31 ("Value-Row")
        {Lisp-Entry "present" method #f 51 20 51 27 ("->string" "value")}
        {Lisp-Entry "get-edited-value" method #f 60 20 60 36 ("parse-integer" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"List-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "List-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.List-Domain" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "List-Domain" class #f 44 7 44 18 ("attributes" "Domain")
        {Lisp-Entry "domain" definition #f 48 5 48 11 ()}
        {Lisp-Entry "get-domain" accessor #f 48 5 48 11 ()}
        {Lisp-Entry "set-domain" accessor #f 48 5 48 11 ()}
        {Lisp-Entry "validate-value" method #f 56 20 56 34 ("domain" "validate-value" "subvalue" "lambda" "for-each" "property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "pair?" "not" "if" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 69 20 69 27 ("domain" "present" "lambda" "map" "join" "not" "if" "value")}
        {Lisp-Entry "setup-entry" method #f 83 20 83 31 ("domain" "setup-list-entry" "client" "view")}}}})
"List-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "List-Row.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.row.List-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "List-Row" class #f 46 20 46 28 ("0" "initialize" "Value-Row")
        {Lisp-Entry "current-rank" slot #f 49 8 49 20 ()}
        {Lisp-Entry "present" method #f 57 20 57 27 ("format-plural" "format" "length" "n" "let" "not" "if" "value")}
        {Lisp-Entry "reset-rank" method #f 69 11 69 21 ("0" "current-rank" "set!")}
        {Lisp-Entry "next-rank" method #f 73 11 73 20 ("increase!" "current-rank" "prog1")}
        {Lisp-Entry "auto-in-place?" method #f 83 20 83 34 ()}
        {Lisp-Entry "get-edited-value" method #f 92 20 92 36 ("get-list-edited-value")}
        {Lisp-Entry "get-edited-modified?" method #f 96 20 96 40 ("get-list-edited-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 100 20 100 40 ("set-list-edited-modified?" "flag")}
        {Lisp-Entry "edit" method #f 109 20 109 24 ("edit-in-list" "reset-rank")}
        {Lisp-Entry "add-value" method #f 114 20 114 29 ("class:" "next-rank" "self" "add-row" "class" "value")}
        {Lisp-Entry "close-editor" method #f 118 20 118 32 ("close-in-list-editor")}
        {Lisp-Entry "select-editor" method #f 122 20 122 33 ()}
        {Lisp-Entry "focus-editor" method #f 126 20 126 32 ("rest")}
        {Lisp-Entry "focused-editor" method #f 130 20 130 34 ()}
        {Lisp-Entry "update" method #f 134 20 134 26 ("1" "self" "row-rank" "Cell" "new" "invalidate-cell" "present" "set-title" "set-property-modified?" "get-children" "second" "data" "get-tree" "tree" "let" "set-value" "value")}
        {Lisp-Entry "in-edition?" method #f 143 20 143 31 ("0" "get-sons" "cardinality" ">")}
        {Lisp-Entry "auto-number?" method #f 152 26 152 38 ()}
        {Lisp-Entry "add-item" method #f 156 26 156 34 ("set-modified?" "focus-editor" "edit-row" "get-subrow-class" "new-value" "add-value" "row" "let")}
        {Lisp-Entry "new-value" method #f 164 26 164 35 ()}
        {Lisp-Entry "remove-item" method #f 168 26 168 37 ("set-modified?" "self" "set-auto-expanded-row" "remove-row" "get-tree" "tree" "let" "item")}
        {Lisp-Entry "rename-item" method #f 175 18 175 29 ("set-title" "request-title" "title" "get-title" "current" "let*" "item")}
        {Lisp-Entry "request-title" method #f 181 29 181 42 ("initial-value:" "prefix:" "title:" "request-string" "current")}
        {Lisp-Entry "get-menu-class" method #f 190 20 190 34 ("List-Menu")}}
      {Lisp-Entry "List-Menu" class #f 199 7 199 16 ("on-add-item" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "add-item" "name:" "Value-Menu")
        {Lisp-Entry "on-add-item" method #f 207 11 207 22 ("list" "set-selection" "row-rank" "rank" "get-tree" "tree" "value-row" "add-item" "row" "let*" "evt")}}}})
"Manager-Actions"
 ({Lisp-File-Entry {File jazz.designer "src" "jazz" "designer" "manager" "Manager-Actions.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.manager.Manager-Actions" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Manager-Actions" class #f 43 7 43 22 ("Actions")}}})
"Manager-View"
 ({Lisp-File-Entry {File jazz.designer "src" "jazz" "designer" "manager" "Manager-View.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.manager.Manager-View" module #f 37 18 37 52 ("Center-View" "register-autoclass" "jazz")
      {Lisp-Entry "Manager-View" class #f 46 7 46 19 ("card" "card-border" "416" "card-contour" "366" "230" "right" "descendant" "on-tab-press" "tab-press-handler:" "descendants" "233" "133" "descendants-border" "on-splitter-move" "move-handler:" "horz" "orientation:" "3" "left" "183" "width:" "branch" "branches" "header" "fill" "content" "flat?:" "vscroll?:" "hscroll?:" "document" "scroller" "entry" "style:" "edge" "border-type:" "130" "229" "1" "Point" "position:" "branches-border" "367" "center" "on-edit-form" "edit-form" "end-undo-group" "on-redo" "redo" "on-undo" "undo" "16" "end-open-group" "on-save" "save" "on-open" "open" "on-new" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "22" "new" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Editor-View")
        {Lisp-Entry "host-icon" method #f 87 25 87 34 ("Image-Resource")}
        {Lisp-Entry "host-position" method #f 91 25 91 38 ("80" "100" "Point")}
        {Lisp-Entry "host-size" method #f 95 25 95 34 ("400" "650" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 99 20 99 35 ("home")}
        {Lisp-Entry "new-controller" method #f 109 20 109 34 ("self" "Manager-View-Controller" "new")}
        {Lisp-Entry "Manager-View-Controller" class #f 114 9 114 32 ("Editor-View-Controller")
          {Lisp-Entry "name-status" method #f 117 22 117 33 ("document" "editor-title")}}
        {Lisp-Entry "install" method #f 126 20 126 27 ("card" "'card" "descendants" "'descendants" "self" "branches" "'branches" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "guest-actions" method #f 138 20 138 33 ("nextmethod" "manager" "'manager" "find-actions" "cons")}
        {Lisp-Entry "size-change" method #f 148 20 148 31 ("get-height" "get-width" "Dimension" "new" "set-size" "when" "'toolbar" "locate-component" "toolbar" "let" "nextmethod" "size")}
        {Lisp-Entry "resize-center" method #f 155 29 155 42 ("card-contour" "'card-contour" "right" "'right" "0" "descendants-border" "'descendants-border" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-splitter-move" method #f 161 19 161 35 ("update-view" "card-contour" "'card-contour" "'left" "right" "-" "descendants-border" "'descendants-border" "move-figure" "0" "branches-border" "'branches-border" "locate" "size-figure" "left" "get-name" "case" "delta:" "get-property" "delta" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-new" method #f 178 11 178 17 ("new-form" "evt")}
        {Lisp-Entry "on-open" method #f 182 11 182 18 ("open-form" "evt")}
        {Lisp-Entry "on-edit-form" method #f 186 11 186 23 ("edit-form" "evt")}
        {Lisp-Entry "on-tab-press" method #f 190 20 190 32 ("get-row" "auto-select" "when" "get-single-selection" "rank" "acquire-focus" "card" "'card" "locate" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "install-current-designer" method #f 203 20 203 44 ("editor-title" "set-title" "nextmethod" "form" "component")}}
      {Lisp-Entry "Center-View" class #f 213 7 213 18 ("View")
        {Lisp-Entry "resize" method #f 216 20 216 26 ("creator" "resize-center" "nextmethod" "dv" "dh")}}}})
"Matches-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Matches-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Matches-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Matches-Row" class #f 43 20 43 31 ("Value-Row")
        {Lisp-Entry "present" method #f 46 22 46 29 ("format" "null?" "if" "matches")}
        {Lisp-Entry "get-edited-value" method #f 52 22 52 38 ("split" "map" "trim-spaces" "lambda" "clean" "=" "if" "editor" "get-string-content" "string" "let")}}}})
"Memo-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Memo-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Memo-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Memo-Row" class #f 44 20 44 28 ("Combo-Row")
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("choose" "'choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "present" method #f 62 20 62 27 ("format" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "combo-choose" method #f 73 20 73 32 ("focus-editor" "enter-edited-value" "set-edited-value" "get-edited-value" "initial-text:" "request-text" "text" "let")}
        {Lisp-Entry "get-edited-value" method #f 86 20 86 36 ("=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" method #f 93 20 93 36 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Menu-Editor"
 ({Lisp-File-Entry {File jazz.designer "src" "jazz" "designer" "manager" "Menu-Editor.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.manager.Menu-Editor" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Menu-Editor" class #f 43 7 43 18 ("View-Editor")
        {Lisp-Entry "host-title" method #f 51 25 51 35 ()}
        {Lisp-Entry "host-position" method #f 55 25 55 38 ("117" "237" "Point")}
        {Lisp-Entry "host-size" method #f 59 25 59 34 ("472" "708" "Dimension")}}}})
"Name-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Name-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.Name-Domain" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Name-Domain" class #f 44 7 44 18 ("19" "100" "attributes" "Domain")
        {Lisp-Entry "width" definition #f 48 5 48 10 ()}
        {Lisp-Entry "get-width" accessor #f 48 5 48 10 ()}
        {Lisp-Entry "set-width" accessor #f 48 5 48 10 ()}
        {Lisp-Entry "height" definition #f 49 5 49 11 ()}
        {Lisp-Entry "get-height" accessor #f 49 5 49 11 ()}
        {Lisp-Entry "set-height" accessor #f 49 5 49 11 ()}
        {Lisp-Entry "limit" definition #f 50 5 50 10 ()}
        {Lisp-Entry "get-limit" accessor #f 50 5 50 10 ()}
        {Lisp-Entry "set-limit" accessor #f 50 5 50 10 ()}
        {Lisp-Entry "predicate?" definition #f 51 5 51 15 ()}
        {Lisp-Entry "get-predicate?" accessor #f 51 5 51 15 ()}
        {Lisp-Entry "set-predicate?" accessor #f 51 5 51 15 ()}
        {Lisp-Entry "validate-value" method #f 59 20 59 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "string?" "symbol?" "not" "and" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 69 20 69 27 ("->string" "value")}
        {Lisp-Entry "setup-entry" method #f 78 20 78 31 ("self" "domain:" "height" "width" "Dimension" "size:" "parent:" "Name-Entry" "new" "client" "view")}}}})
"Name-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "entry" "Name-Entry.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.entry.Name-Entry" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Name-Entry" class #f 46 7 46 17 ("Text-Entry")
        {Lisp-Entry "validate" method #f 54 20 54 28 ("else" "format-plural" "format" "tie" "string-length" ">" "and" "french:" "english:" "Locales" "message:" "Property-Violation" "new" "get-nullable?" "if" "empty-string?" "cond" "get-predicate?" "predicate?" "get-limit" "limit" "text" "'text" "locate" "get-string-content" "content" "let" "domain")}
        {Lisp-Entry "get-value" method #f 76 20 76 29 ("nil" "empty-string?" "if" "text" "'text" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-value" method #f 83 20 83 29 ("nil?" "if" "text" "'text" "locate" "set-string-content" "value")}}}})
"Number-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Number-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.Number-Domain" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Number-Domain" class #f 44 7 44 20 ("19" "100" "attributes" "Domain")
        {Lisp-Entry "width" definition #f 48 5 48 10 ()}
        {Lisp-Entry "get-width" accessor #f 48 5 48 10 ()}
        {Lisp-Entry "set-width" accessor #f 48 5 48 10 ()}
        {Lisp-Entry "height" definition #f 49 5 49 11 ()}
        {Lisp-Entry "get-height" accessor #f 49 5 49 11 ()}
        {Lisp-Entry "set-height" accessor #f 49 5 49 11 ()}
        {Lisp-Entry "validate-value" method #f 57 20 57 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "number?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 67 20 67 27 ("->string" "value")}
        {Lisp-Entry "setup-entry" method #f 76 20 76 31 ("self" "domain:" "height" "width" "Dimension" "size:" "parent:" "Number-Entry" "new" "client" "view")}}}})
"Number-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "entry" "Number-Entry.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.entry.Number-Entry" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Number-Entry" class #f 45 7 45 19 ("Text-Entry")
        {Lisp-Entry "validate" method #f 53 20 53 28 ("french:" "english:" "Locales" "message:" "Property-Violation" "new" "numeric?" "empty-string?" "if" "text" "'text" "locate" "get-string-content" "content" "let" "nextmethod" "or" "domain")}
        {Lisp-Entry "get-value" method #f 67 20 67 29 ("string->number" "nil" "empty-string?" "if" "text" "'text" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-value" method #f 74 20 74 29 ("number->string" "nil?" "if" "text" "'text" "locate" "set-string-content" "value")}}}})
"Password-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Password-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.Password-Domain" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Password-Domain" class #f 44 7 44 22 ("Domain")
        {Lisp-Entry "validate-value" method #f 52 20 52 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "string?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}}}})
"Password-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Password-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Password-Row" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Password-Row" class #f 47 20 47 32 ("String-Row")
        {Lisp-Entry "present" method #f 55 20 55 27 ("nextmethod" "not" "if" "value")}
        {Lisp-Entry "editor-class" method #f 66 20 66 32 ("Password-Value-Text-View")}
        {Lisp-Entry "set-edited-value" method #f 70 20 70 36 ("either" "editor" "set-string-content" "value")}}
      {Lisp-Entry "Password-Value-Text-View" class #f 79 7 79 31 ("Password" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Value-Text-View")
        {Lisp-Entry "copy-selection" method #f 86 20 86 34 ("bell")}
        {Lisp-Entry "draw-outline" method #f 90 20 90 32 ("draw-caret" "draw-password" "draw-selection" "unless" "printing?:" "getf" "printing?" "bottom" "top" "let" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-password" method #f 101 11 101 24 ("draw-text" "Black" "name:" "Color" "set-text-color" "set-font" "-" "get-v" "+" "v" "get-h" "h" "get-font" "get-default-style" "style" "font" "get-metrics" "font-height" "get-height" "height" "get-position" "pos" "cardinality" "make-string" "hidden" "get-string" "password" "0" "get-paragraph" "paragraph" "let*" "surface")}}}})
"Pathname-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Pathname-Row.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.row.Pathname-Row" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Pathname-Row" class #f 45 20 45 32 ("explicit" "Value-Row")
        {Lisp-Entry "display-logical?" property #f 48 12 48 28 ()}
        {Lisp-Entry "initialize" method #f 56 20 56 30 ("set-display-logical?" "self" "value-row:" "editor-class" "new" "editor" "set!" "nextmethod" "apply" "others" "display-logical?" "bind-keywords" "rest")}
        {Lisp-Entry "editor-class" method #f 63 20 63 32 ("Pathname-Row-Editor")}
        {Lisp-Entry "get-display-logical?" method #f 72 18 72 38 ("editor" "get-display-logical?")}
        {Lisp-Entry "set-display-logical?" method #f 76 18 76 38 ("editor" "set-display-logical?" "value")}
        {Lisp-Entry "enter-pathname-value" method #f 85 11 85 31 ("enter-value" "value")}
        {Lisp-Entry "present" method #f 94 20 94 27 ("editor" "present-moniker" "value")}
        {Lisp-Entry "close-editor?" method #f 103 20 103 33 ()}
        {Lisp-Entry "get-edited-value" method #f 107 20 107 36 ("editor" "get-moniker")}
        {Lisp-Entry "set-edited-value" method #f 111 20 111 36 ("generate-event?:" "editor" "set-moniker" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 115 20 115 40 ("editor" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 119 20 119 40 ("editor" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" method #f 123 20 123 31 ("editor" "get-text" "show-text-cursor")}
        {Lisp-Entry "focused-editor" method #f 127 20 127 34 ("editor" "get-text")}}
      {Lisp-Entry "Pathname-Row-Editor" class #f 136 7 136 26 ("explicit" "initialize" "top-padding:" "1" "left-padding:" "body" "content" "scroller" "name:" "Moniker-Widget")
        {Lisp-Entry "value-row" property #f 146 12 146 21 ()}
        {Lisp-Entry "form-model" method #f 149 20 149 30 ("nextmethod" "else" "Pathname-Value-Text-View" "body" "get-name" "case" "form")}
        {Lisp-Entry "get-value-row" method #f 155 18 155 31 ("value-row")}
        {Lisp-Entry "set-value-row" method #f 159 18 159 31 ("body" "'body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "moniker-update" method #f 164 20 164 34 ("get-moniker" "value-row" "enter-pathname-value")}}
      {Lisp-Entry "Pathname-Value-Text-View" class #f 173 7 173 31 ("initialize" "Moniker-Text-View")
        {Lisp-Entry "value-row" property #f 176 12 176 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 176 46 176 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 176 46 176 54 ()}
        {Lisp-Entry "up-arrow-move" method #f 184 20 184 33 ("value-row" "editor-up-arrow" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 188 20 188 35 ("value-row" "editor-down-arrow" "scroll?" "extend?")}
        {Lisp-Entry "document-menu" method #f 192 11 192 24 ()}
        {Lisp-Entry "focus-validate" method #f 201 11 201 25 ("value-row" "editor-focus-validate")}
        {Lisp-Entry "focus-lose" method #f 205 20 205 30 ("value-row" "editor-focus-lose" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 210 20 210 32 ("value-row" "get-tree")}}}})
"Period-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Period-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.Period-Domain" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Period-Domain" class #f 45 7 45 20 ("Domain")
        {Lisp-Entry "validate-value" method #f 53 20 53 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "Period" "is-not?" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 63 20 63 27 ("get-end" "get-start" "present-date-day" "format" "value")}}}})
"Period-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Period-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Period-Row" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Period-Row" class #f 43 7 43 17 ("Value-Row")}
      {Lisp-Entry "Period-Row" class #f 49 7 49 17 ("Value-Row")
        {Lisp-Entry "present" method #f 57 11 57 18 ("get-end" "get-start" "present-date-day" "format" "period" "lambda" "map" "join" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" method #f 73 11 73 27 ("Date" "parse-date" "Period" "new" "separator:" "parse-strings" "end" "start" "bind" "lambda" "map" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"Periods-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Periods-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Periods-Row" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Periods-Row" class #f 43 20 43 31 ("Combo-Row")}
      {Lisp-Entry "Periods-Row" class #f 49 20 49 31 ("Combo-Row")
        {Lisp-Entry "initialize" method #f 57 11 57 21 ("choose" "'choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "combo-choose" method #f 67 11 67 23 ("focus-editor" "enter-edited-value" "set-edited-value" "periods:" "Periods-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" method #f 80 11 80 18 ("get-end" "get-start" "present-date-day" "format" "period" "lambda" "map" "join" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" method #f 96 11 96 27 ("Date" "parse-date" "Period" "new" "separator:" "parse-strings" "end" "start" "bind" "lambda" "map" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" method #f 106 11 106 27 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Point-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Point-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Point-Row" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Point-Row" class #f 43 20 43 29 ("Value-Row")
        {Lisp-Entry "present" method #f 51 20 51 27 ("get-v" "get-h" "format" "pos")}
        {Lisp-Entry "get-edited-value" method #f 62 20 62 36 ("Point" "new" "height" "width" "bind" "editor" "get-string-content" "read-delimited-string" "list" "let")}
        {Lisp-Entry "edit" method #f 69 11 69 15 ("get-tree" "expand/collapse" "get-v" "value" "get-h" "self" "add-row" "edit-in-cell")}
        {Lisp-Entry "close-editor" method #f 77 11 77 23 ("remove-every-son" "nextmethod")}
        {Lisp-Entry "in-edition?" method #f 83 11 83 22 ("0" "get-sons" "cardinality" ">" "nextmethod" "or")}}}})
"Presentation-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Presentation-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.Presentation-Domain" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Presentation-Domain" class #f 45 7 45 26 ("Domain")
        {Lisp-Entry "validate-value" method #f 53 20 53 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "Locales" "is-not?" "string?" "not" "and" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 63 20 63 27 ("value")}}}})
"Properties-Card"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "card" "Properties-Card.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.card.Properties-Card" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Properties-Card" class #f 45 20 45 35 ("on-context-menu" "tree" "Event-Handler" "context-menu-handler:" "header" "content" "vscroll?:" "document" "style:" "scroller" "tools" "name:" "fill" "layout-type:" "Card")
        {Lisp-Entry "get-tree" method #f 63 18 63 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "on-editor" method #f 72 20 72 29 ("nextmethod" "else" "reset-modified-properties" ":saved" "property:" "get-property" "select-property" ":property-selected" ":saving" ":branch-changing" "get-force?" "force?:" "get-selection" "set-client" ":selection-changed" "get-tree" "save-edition" ":selection-changing" "get-kind" "case" "evt")}
        {Lisp-Entry "client-update" method #f 91 20 91 33 ("get-tree" "client-update")}
        {Lisp-Entry "call-property-change" method #f 100 20 100 40 ("value:" "property:" "property-change" "car" "eq?" "client" "not-null?" "and" "when" "component:" "get-property" "component" "let" "evt")}
        {Lisp-Entry "property-change" method #f 106 20 106 35 ("get-tree" "property-change" "value" "property" "component")}
        {Lisp-Entry "enter-value" method #f 115 20 115 31 ("client" "designer" "safe-set-property" "component" "lambda" "for-each" "value" "property")}}}})
"Properties-Descriptor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "descriptor" "Properties-Descriptor.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.descriptor.Properties-Descriptor" module #f 37 18 37 64 ("jazz")
      {Lisp-Entry "Properties-Descriptor" class #f 44 20 44 41 ("Component")
        {Lisp-Entry "get-class-descriptor" method #f 52 25 52 45 ("Properties-Descriptor-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 61 11 61 17 ()
        {Lisp-Entry "Properties-Descriptor-Descriptor" class #f 67 7 67 39 ("Component-Descriptor")
          {Lisp-Entry "get-class-descriptor" method #f 70 25 70 45 ("Properties-Meta-Descriptor")}}}}})
"Properties-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "card" "Properties-Manager.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.card.Properties-Manager" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "Properties-Manager" class #f 48 20 48 38 ("header" "content" "tool" "style:" "scroller" "name:" "Properties-Card")
        {Lisp-Entry "destroy" method #f 58 20 58 27 ("nextmethod" "self" "close-selected" "get-application" "appl" "let")}
        {Lisp-Entry "external-name" method #f 64 25 64 38 ("properties-card" "'properties-card" "rest")}
        {Lisp-Entry "host-icon" method #f 73 25 73 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 77 25 77 35 ()}
        {Lisp-Entry "host-install" method #f 81 20 81 32 ("on-selected-change" "'on-selected-change" "method-name:" "self" "target:" "Event-Handler" "new" "add-selected-listener" "get-application" "appl" "let")}
        {Lisp-Entry "host-uninstall" method #f 86 20 86 34 ("self" "remove-selected-listener" "get-application" "appl" "let")}
        {Lisp-Entry "client-activate" method #f 91 20 91 35 ("get-selection" "set-client" "get-designer" "set-designer" "set-editor" "View-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" method #f 99 20 99 37 ("set-client" "set-designer" "set-editor")}
        {Lisp-Entry "focus-default" method #f 110 20 110 33 ("acquire-focus" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" method #f 115 20 115 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "install-in-host" method #f 124 20 124 35 ("categorized" "'categorized" "tree" "'tree" "set-filter" "header" "'header" "scroller" "'scroller" "locate" "set-flat?" "Docked-Host" "is?" "when" "nextmethod" "host")}
        {Lisp-Entry "on-selected-change" method #f 137 11 137 29 ("else" "get-designer" "let*" "Editor-View" "force?:" "set-client" "set-designer" "set-editor" "get-force?" "force?" "get-selected" "client" "designer" "editor" "Designer" "typecase" "get-owner" "owner" "let" "evt")}
        {Lisp-Entry "on-editor" method #f 167 20 167 29 ("nextmethod" "else" ":selection-changed" "get-kind" "case" "evt")}}}})
"Properties-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "card" "Properties-Tree.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.card.Properties-Tree" module #f 37 18 37 52 ("Value-Column" "Property-Column" "register-autoclass" "jazz")
      {Lisp-Entry "Filter-Width" definition #f 50 12 50 24 ("20")}
      {Lisp-Entry "Properties-Tree" class #f 54 20 54 35 ("center" "justification:" "25" "owner" "192" "toplevel-controls?:" "140" "width:" "title:" "property" "name:" "on-context-menu" ":form" "Event-Handler" "context-menu-handler:" ":images" "portfolio:" "focused-on-descendants?:" "row-spacing:" "0" "column-spacing:" "auto-expand/collapse?:" "row" "selection-mode:" "multiple-selection?:" "draggable?:" "value" "filled-column:" "explicit" "categorized" "'categorized" "initialize" "Tree-View")
        {Lisp-Entry "filter" property #f 57 12 57 18 ()}
        {Lisp-Entry "filter-locked?" property #f 58 12 58 26 ()}
        {Lisp-Entry "get-filter-locked?" accessor #f 58 63 58 71 ()}
        {Lisp-Entry "set-filter-locked?" accessor #f 58 63 58 71 ()}
        {Lisp-Entry "filter-visible?" property #f 59 12 59 27 ()}
        {Lisp-Entry "get-filter-visible?" accessor #f 59 63 59 71 ()}
        {Lisp-Entry "set-filter-visible?" accessor #f 59 63 59 71 ()}
        {Lisp-Entry "property-handler" property #f 60 12 60 28 ()}
        {Lisp-Entry "get-property-handler" accessor #f 60 63 60 71 ()}
        {Lisp-Entry "set-property-handler" accessor #f 60 63 60 71 ()}
        {Lisp-Entry "get-card" method #f 75 18 75 26 ("5" "child")}
        {Lisp-Entry "get-editor" method #f 79 18 79 28 ("get-card" "get-editor")}
        {Lisp-Entry "get-client" method #f 83 18 83 28 ("get-card" "get-client")}
        {Lisp-Entry "get-designer" method #f 87 18 87 30 ("get-card" "get-designer")}
        {Lisp-Entry "double-click" method #f 96 20 96 32 ("self" "acquire" "double-click" "when" "get-selected-row" "row" "let" "pos")}
        {Lisp-Entry "on-context-menu" method #f 102 11 102 26 ("context-menu" "else" "5" "Point" "self" "client:" "Filter-Menu" "new" "track-popup-menu" "get-v" "Filter-Width" "get-h" "<" "and" "when" "16" "header-height" "filter-visible?" "not" "filter-locked?" "or" "unless" "Tree-Header" "is?" "cond" "get-position" "pos" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "new-property-menu" method #f 114 11 114 28 ("layout-menu" "consolidate" "'consolidate" "distribute" "'distribute" "end-consolidate-group" "'end-consolidate-group" "locate" "set-visible?" "begin" "branch-installed?" "if" "get-creator" "creator" "car" "any" "self" "client:" "Property-Menu" "new" "menu" "let*" "client")}
        {Lisp-Entry "focus-gain" method #f 133 20 133 30 ("focus-delegate" "nextmethod")}
        {Lisp-Entry "focus-delegate" method #f 138 20 138 34 ("editor-focus-delegate" "when" "selected-row" "row" "let")}
        {Lisp-Entry "save-edition" method #f 149 21 149 33 ("save-edition" "in-edition?" "Value-Row" "is?" "and" "when" "auto-expanded-row" "row" "let")}
        {Lisp-Entry "notify-property-change" method #f 160 18 160 40 ("property:" ":property-change" "Event" "new" "self" "invoke" "property-handler" "when" "property")}
        {Lisp-Entry "client-update" method #f 170 18 170 31 ("preserving-update" "close-auto-expanded" "lambda" "with-update-locked")}
        {Lisp-Entry "find-property-index" method #f 177 11 177 30 ("continuation-return" "field-name" "eq?" "symbol?" "if" "get-property" "property" "let" "Value-Row" "is?" "when" "rank" "row" "for-each-visible-row" "return" "lambda" "continuation-capture" "target")}
        {Lisp-Entry "preserving-update" method #f 196 11 196 28 ("auto-expand?:" "set-single-selection" "find-property-index" "either" "index" "update" "default" "selected-property" "selected" "remove-every-row" "if" "class-of" "category-field" "get-default-property" "name" "Component" "is?" "car" "component" "length" "1" "=" "when" "get-client-default-property" "null?" "not" "or" "get-client" "client" "let" "empty-client?" "define")}
        {Lisp-Entry "update" method #f 220 11 220 17 ("remove-every-row" "with-update-locked" "get-designer" "get-editor" "null?" "get-client" "filter" "filter:" "get-filtered-properties" "filter-by-rights" "get-component-properties" "Component" "is?" "intersection" "when" "get-client-properties" "position:" "row:" "set-color" "set-title" "car" "set-value" "set-property" "set-children" "17" "set-row-height" "self" "set-parent" "owner-image" "owner" "label" "Dark-Gray" "Dark-Red" "name:" "Color" "color:" "class-of" "property-presentation" "node" "string=?" "apply" "1" "length" "<=" "uniform?" "find-changed-property" "not" "or" "changed?" "get-active-branch" "essay" "branch" "get-creator" "creator" "present" "value" "presented" "read-property" "component" "map" "values" "get-filter-image" "image" "either" "get-row-instance" "instance" "get-row-class" "class" "let*" "position" "state" "Tree-Image" "Tree-Label" "Image-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "let" "title" "bind" "collapsed" "'collapsed" "insert-property" "pair?" "if" "property" "lambda" "for-each" "properties" "father" "designer" "editor" "any" "client" "insert-properties" "define")}
        {Lisp-Entry "update-property" method #f 286 18 286 33 ("update-property-row" "get-row" "row" "find-property-index" "rank" "let" "eq?" "when" "car" "any" "get-client" "client" "let*" "property" "clt")}
        {Lisp-Entry "owner-image" method #f 296 11 296 22 ("default-owner-image" "else" "root-owner-image" "get-reference" "eq?" "branch-owner-image" "Branch" "is?" "cond" "find-owner" "owner" "car" "component" "let*" "Info-Row" "neq?" "length" "1" "=" "and" "when" "property" "class" "client" "designer")}
        {Lisp-Entry "default-owner-image" method #f 305 29 305 48 ()}
        {Lisp-Entry "root-owner-image" method #f 309 29 309 45 ("Image-Resource")}
        {Lisp-Entry "branch-owner-image" method #f 313 29 313 47 ("Image-Resource")}
        {Lisp-Entry "reset-modified-properties" method #f 317 21 317 46 ("0" "Cell" "new" "invalidate-cell" "set-color" "get-color" "get-children" "car" "node" "let" "Value-Row" "is?" "when" "rank" "row" "lambda" "for-each-visible-row")}
        {Lisp-Entry "filter-by-rights" definition #f 332 15 332 31 ("filter-properties" "when" "find-component-rights" "component-rights" "get-client" "reference" "let*" "not" "if" "get-rights" "essay" "rights" "let" "properties" "editor" "component")}
        {Lisp-Entry "selected-row" method #f 347 11 347 23 ("Value-Row" "is?" "when" "get-selected-row" "row" "let")}
        {Lisp-Entry "selected-property" method #f 353 11 353 28 ("get-property" "when" "selected-row" "row" "let")}
        {Lisp-Entry "select-property" method #f 359 18 359 33 ("set-single-selection" "generate-event?:" "auto-expand?:" "set-selection" "not" "if" "find-property-index" "rank" "let" "property")}
        {Lisp-Entry "consolidate-property" method #f 371 11 371 31 ("set-edited-modified?" "set-property" "branch:" "remove-property" "branch" "for-each-branch" "read-property" "value" "get-creator" "creator" "component" "lambda" "for-each" "get-designer" "designer" "get-property" "property" "save-edition" "selected-row" "row" "let" "yes" "'yes" "eq?" "when" "confirmation" "'confirmation" "type:" "length" "format-plural" "format" "message-box" "code" "get-client" "client" "let*")}
        {Lisp-Entry "distribute-property" method #f 390 11 390 30 ("set-edited-modified?" "branch:" "set-property" "branch" "for-each-branch" "read-property" "value" "get-creator" "creator" "component" "lambda" "for-each" "get-designer" "designer" "get-property" "property" "save-edition" "selected-row" "row" "let" "yes" "'yes" "eq?" "when" "confirmation" "'confirmation" "type:" "length" "format-plural" "format" "message-box" "code" "get-client" "client" "let*")}
        {Lisp-Entry "header-click" method #f 413 20 413 32 ("nextmethod" "end-edition" "close-auto-expanded" "in-edition?" "Value-Row" "is?" "and" "when" "auto-expanded-row" "row" "let" "column")}
        {Lisp-Entry "get-filter" method #f 427 18 427 28 ("filter")}
        {Lisp-Entry "set-filter" method #f 431 18 431 28 ("update" "node-column" "get-header" "invalidate-column-header" "set!" "filter" "neq?" "when" "flt")}
        {Lisp-Entry "toggle-filter" method #f 438 18 438 31 ("'all" "categorized" "'categorized" "handlers" "'handlers" "properties" "'properties" "infos" "'infos" "set-filter" "all" "filter" "case")}
        {Lisp-Entry "property-change" method #f 452 18 452 33 ("invalidate-cell" "class-of" "get-client" "get-designer" "owner-image" "set-image" "get-cell-data" "data" "2" "Cell" "new" "cell" "let*" "update" "get-row" "row" "when" "find-property-index" "rank" "let" "value" "property" "component")}}
      {Lisp-Entry "Property-Column" class #f 468 7 468 22 ("initialize" "Tree-Node-Column")
        {Lisp-Entry "filter-down?" slot #f 471 8 471 20 ()}
        {Lisp-Entry "draw-header" method #f 474 20 474 31 ("down?" "get-column-title" "localize" "-" "get-filter-image" "1" "+" "draw-image-at" "filter-down?" "Filter-Width" "draw-header-at" "nextmethod" "parent" "get-filter-visible?" "not" "if" "enabled?" "flat?" "spaced?" "sorted" "height" "width" "v" "h" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-image-at" method #f 482 11 482 24 ("+" "get-application" "get-images-cache" "draw-image" "0" "1" "filter-down?" "if" "offset" "let" "image" "v" "h" "context" "surface")}
        {Lisp-Entry "header-down" method #f 487 20 487 31 ("self" "get-header" "invalidate-column-header" "down?" "filter-down?" "set!" "unless" "get-filter-locked?" "Filter-Width" "get-h" "<" "in-filter?" "let" "nextmethod" "parent" "get-filter-visible?" "not" "if" "pos")}
        {Lisp-Entry "header-up" method #f 500 20 500 29 ("header-click" "self" "get-header" "invalidate-column-header" "toggle-filter" "when" "down?" "set!" "filter-down?" "filter?" "let" "Filter-Width" "get-h" "<" "unless" "get-filter-locked?" "nextmethod" "parent" "get-filter-visible?" "not" "if" "pos")}
        {Lisp-Entry "draw-data" method #f 516 20 516 29 ("0" "draw-title" "draw-image" "draw-level" "draw-background" "height" "width" "data" "row" "context" "surface")}
        {Lisp-Entry "get-filter-image" method #f 523 11 523 27 ("categorized" "handlers" "properties" "infos" "Image-Resource" "all" "parent" "get-filter" "case")}
        {Lisp-Entry "get-column-title" method #f 532 11 532 27 ("categorized" "handlers" "properties" "infos" "all" "parent" "get-filter" "case")}}
      {Lisp-Entry "Value-Column" class #f 549 7 549 19 ("Tree-Label-Column")
        {Lisp-Entry "complete-mouse-down" method #f 552 20 552 39 ("auto-expand/collapse" "when" "nextmethod" "get-row" "essay" "row" "parent" "get-auto-expand/collapse?" "auto?" "let*" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "draw-data" method #f 561 20 561 29 ("self" "draw-data" "get-value" "value" "let" "Value-Row" "is?" "when" "height" "width" "data" "row" "context" "surface")}}
      {Lisp-Entry "Filter-Menu" class #f 575 7 575 18 ("categorized" "handlers" "properties" "infos" "on-action" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "all" "name:" "Context-Menu")
        {Lisp-Entry "finish" method #f 589 20 589 26 ("client" "get-filter" "locate" "set-selected?" "nextmethod" "rest")}
        {Lisp-Entry "on-action" method #f 594 11 594 20 ("client" "set-filter" "get-sender" "get-name" "filter" "let" "evt")}}
      {Lisp-Entry "Property-Menu" class #f 604 7 604 20 ("on-distribute" "distribute" "end-consolidate-group" "on-consolidate" ":form" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "consolidate" "name:" "Context-Menu")
        {Lisp-Entry "on-consolidate" method #f 614 11 614 25 ("client" "consolidate-property" "evt")}
        {Lisp-Entry "on-distribute" method #f 618 11 618 24 ("client" "distribute-property" "evt")}}}})
"Property-Descriptor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "descriptor" "Property-Descriptor.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.descriptor.Property-Descriptor" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Property-Descriptor" class #f 44 20 44 39 ("initialize" "Component")
        {Lisp-Entry "title" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-title" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "set-title" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "domain" property #f 48 12 48 18 ()}
        {Lisp-Entry "get-domain" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "set-domain" accessor #f 48 43 48 51 ()}
        {Lisp-Entry "get-class-descriptor" method #f 56 25 56 45 ("Property-Descriptor-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 65 11 65 17 ()
        {Lisp-Entry "Property-Descriptor-Descriptor" class #f 71 7 71 37 ("Component-Descriptor")
          {Lisp-Entry "get-class-descriptor" method #f 74 25 74 45 ("Property-Meta-Descriptor")}}}}})
"Property-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "property" "Property-Editor.jazz"} 1263914893
    {Lisp-Entry "jazz.designer.property.Property-Editor" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Property-Editor" interface #f 43 11 43 26 ()
        {Lisp-Entry "get-manager" method #f 46 35 46 46 ()}
        {Lisp-Entry "set-manager" method #f 47 35 47 46 ("manager")}
        {Lisp-Entry "validate" method #f 48 35 48 43 ()}
        {Lisp-Entry "get-violation" method #f 49 35 49 48 ()}
        {Lisp-Entry "set-violation" method #f 50 35 50 48 ("violation")}
        {Lisp-Entry "get-presentation" method #f 51 35 51 51 ()}
        {Lisp-Entry "set-presentation" method #f 52 35 52 51 ("presentation")}
        {Lisp-Entry "get-value" method #f 53 35 53 44 ()}
        {Lisp-Entry "set-value" method #f 54 35 54 44 ("value")}
        {Lisp-Entry "present-value" method #f 55 35 55 48 ("value")}
        {Lisp-Entry "get-modified?" method #f 56 35 56 48 ()}
        {Lisp-Entry "set-modified?" method #f 57 35 57 48 ("flag")}
        {Lisp-Entry "set-editable?" method #f 58 35 58 48 ("flag")}
        {Lisp-Entry "set-enabled?" method #f 59 35 59 47 ("flag")}}}})
"Property-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "entry" "Property-Entry.jazz"} 1265059250
    {Lisp-Entry "jazz.designer.entry.Property-Entry" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Property-Entry" class #f 46 7 46 21 ("fill" "layout-type:" "generate" "override" "initialize" "Property-Editor" "Layout-View")
        {Lisp-Entry "manager" property #f 49 12 49 19 ()}
        {Lisp-Entry "domain" property #f 50 12 50 18 ()}
        {Lisp-Entry "get-domain" accessor #f 50 44 50 52 ()}
        {Lisp-Entry "set-domain" accessor #f 50 44 50 52 ()}
        {Lisp-Entry "violation" slot #f 53 8 53 17 ()}
        {Lisp-Entry "validate" method #f 65 20 65 28 ("get-presentation" "validate-text" "domain")}
        {Lisp-Entry "get-violation" method #f 69 20 69 33 ("violation")}
        {Lisp-Entry "set-violation" method #f 73 20 73 33 ("invalidate-entry" "violation" "set!" "value")}
        {Lisp-Entry "invalidate-entry" method #f 78 18 78 34 ("1" "get-bounds" "inflate-rect" "invalidate-rect" "self" "editor-invalidate" "manager" "if")}
        {Lisp-Entry "tab-view" method #f 89 29 89 37 ()}
        {Lisp-Entry "setup-for-grid" method #f 98 29 98 43 ()}
        {Lisp-Entry "get-class-descriptor" method #f 107 25 107 45 ("Property-Entry-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 116 11 116 17 ()
        {Lisp-Entry "Property-Entry-Descriptor" class #f 122 7 122 32 ("Layout-View-Descriptor")
          {Lisp-Entry "component-get-presentation" method #f 126 20 126 46 ("get-value" "component")}
          {Lisp-Entry "component-set-presentation" method #f 131 20 131 46 ("set-value" "presentation" "component")}}}}})
"Property-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "property" "Property-Manager.jazz"} 1263323927
    {Lisp-Entry "jazz.designer.property.Property-Manager" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Property-Manager" interface #f 40 11 40 27 ()
        {Lisp-Entry "editor-focus-gain" method #f 43 35 43 52 ("editor")}
        {Lisp-Entry "editor-focus-lose" method #f 44 35 44 52 ("editor")}
        {Lisp-Entry "editor-invalidate" method #f 45 35 45 52 ("editor")}
        {Lisp-Entry "editor-left-arrow" method #f 46 35 46 52 ("editor")}
        {Lisp-Entry "editor-right-arrow" method #f 47 35 47 53 ("editor")}
        {Lisp-Entry "editor-up-arrow" method #f 48 35 48 50 ("editor")}
        {Lisp-Entry "editor-down-arrow" method #f 49 35 49 52 ("editor")}
        {Lisp-Entry "editor-return" method #f 50 35 50 48 ("editor")}}}})
"Property-Moniker"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "moniker" "Property-Moniker.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.moniker.Property-Moniker" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Property-Moniker" class #f 43 20 43 36 ("Moniker")
        {Lisp-Entry "designer" slot #f 52 18 52 26 ()}
        {Lisp-Entry "get-designer" accessor #f 52 35 52 43 ()}
        {Lisp-Entry "reference" slot #f 53 18 53 27 ()}
        {Lisp-Entry "get-reference" accessor #f 53 35 53 43 ()}
        {Lisp-Entry "branch" slot #f 54 18 54 24 ()}
        {Lisp-Entry "get-branch" accessor #f 54 35 54 43 ()}
        {Lisp-Entry "class" slot #f 55 18 55 23 ()}
        {Lisp-Entry "get-class" accessor #f 55 35 55 43 ()}
        {Lisp-Entry "path" slot #f 56 18 56 22 ()}
        {Lisp-Entry "get-path" accessor #f 56 33 56 41 ()}
        {Lisp-Entry "set-path" accessor #f 56 33 56 41 ()}
        {Lisp-Entry "property" slot #f 57 18 57 26 ()}
        {Lisp-Entry "image" slot #f 58 18 58 23 ()}
        {Lisp-Entry "get-image" accessor #f 58 35 58 43 ()}
        {Lisp-Entry "presented" slot #f 59 18 59 27 ()}
        {Lisp-Entry "location" slot #f 60 18 60 26 ()}
        {Lisp-Entry "get-location" accessor #f 60 35 60 43 ()}
        {Lisp-Entry "extension" slot #f 61 18 61 27 ()}
        {Lisp-Entry "print" method #f 64 20 64 25 ("property" "path" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "compare-object" method #f 70 20 70 34 (":not-equal" "else" ":equal" "get-property" "property" "get-path" "path" "=" "get-branch" "branch" "get-designer" "designer" "eq?" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "compare-pathname" method #f 82 20 82 36 (":equal" "compare-object" "eq?" "object")}
        {Lisp-Entry "initialize" method #f 91 20 91 30 ("extension~self" "location~self" "presented~self" "image~self" "property~self" "path~self" "class~self" "branch~self" "reference~self" "designer~self" "set!" "nextmethod" "extension" "location" "presented" "image" "property" "path" "class" "branch" "reference" "designer")}
        {Lisp-Entry "get-component-name" method #f 110 18 110 36 ("branch" "branch:" "path" "designer" "get-name")}
        {Lisp-Entry "get-component-property" method #f 114 18 114 40 ("branch" "branch:" "path" "designer" "get-property" "property")}
        {Lisp-Entry "set-component-property" method #f 118 18 118 40 ("branch" "branch:" "path" "designer" "set-property" "value" "property")}
        {Lisp-Entry "get-writable?" method #f 127 20 127 33 ()}
        {Lisp-Entry "exists?" method #f 131 20 131 27 ()}
        {Lisp-Entry "get-base" method #f 135 20 135 28 ("presented")}
        {Lisp-Entry "get-file" method #f 139 20 139 28 ()}
        {Lisp-Entry "get-name" method #f 143 20 143 28 ("presented")}
        {Lisp-Entry "get-extension" method #f 147 20 147 33 ("extension")}
        {Lisp-Entry "get-modification-time" method #f 151 20 151 41 ()}
        {Lisp-Entry "present" method #f 155 20 155 27 ("property" "path" "format")}
        {Lisp-Entry "present-base" method #f 159 20 159 32 ("presented")}
        {Lisp-Entry "present-location" method #f 163 20 163 36 ("location" "join")}
        {Lisp-Entry "load-lines" method #f 167 20 167 30 ("property" "get-component-property" "JzLoadLines" "rest")}
        {Lisp-Entry "save-lines" method #f 172 20 172 30 ("join-lines" "property" "set-component-property" "rest" "lines")}}}})
"Property-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "property" "Property-View.jazz"} 1267045799
    {Lisp-Entry "jazz.designer.property.Property-View" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Property-View" class #f 46 7 46 20 ("fill" "layout-type:" "White" "name:" "Color" "background:" "initialize" "Layout-View")
        {Lisp-Entry "id" property #f 49 12 49 14 ()}
        {Lisp-Entry "get-id" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "set-id" accessor #f 49 46 49 54 ()}
        {Lisp-Entry "editor" property #f 50 12 50 18 ()}
        {Lisp-Entry "get-editor" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "set-editor" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "editable?" property #f 51 12 51 21 ()}
        {Lisp-Entry "get-editable?" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "set-editable?" accessor #f 51 46 51 54 ()}
        {Lisp-Entry "add-child" method #f 63 20 63 29 ("set-editable?" "editable?" "not" "when" "nextmethod" "child")}
        {Lisp-Entry "get-entry" method #f 69 26 69 35 ("first-child")}}}})
"Property-Violation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "property" "Property-Violation.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.property.Property-Violation" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Property-Violation" class #f 40 20 40 38 ("Object")
        {Lisp-Entry "message" slot #f 43 8 43 15 ()}
        {Lisp-Entry "get-message" accessor #f 43 23 43 31 ()}
        {Lisp-Entry "initialize" method #f 46 20 46 30 ("message~self" "set!" "nextmethod" "message" "message:")}
        {Lisp-Entry "print" method #f 51 20 51 25 ("message" "self" "class-of" "category-name" "identifier-name" "format" "readably" "printer")}}}})
"Range-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Range-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Range-Row" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Range-Row" class #f 43 20 43 29 ("Value-Row")
        {Lisp-Entry "present" method #f 51 20 51 27 ("get-end" "get-start" "format" "not" "if" "range")}
        {Lisp-Entry "get-edited-value" method #f 64 20 64 36 ("Range" "new" "end" "start" "bind" "editor" "get-string-content" "read-delimited-string" "list" "let")}
        {Lisp-Entry "edit" method #f 71 20 71 24 ("get-tree" "expand/collapse" "get-end" "Cell-Row" "value" "get-start" "self" "add-row" "edit-in-cell")}
        {Lisp-Entry "close-editor" method #f 79 20 79 32 ("remove-every-son" "nextmethod")}
        {Lisp-Entry "in-edition?" method #f 85 20 85 31 ("0" "get-sons" "cardinality" ">" "nextmethod" "or")}}}})
"Rect-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Rect-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Rect-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Rect-Row" class #f 43 20 43 28 ("Value-Row")
        {Lisp-Entry "present" method #f 51 20 51 27 ("get-bottom" "get-right" "get-top" "get-left" "format" "not" "if" "rect")}
        {Lisp-Entry "get-edited-value" method #f 66 20 66 36 ("car" "Rect" "new" "bottom" "right" "top" "left" "bind" "read-delimited-string" "list" "equal?" "if" "editor" "get-string-content" "string" "let")}
        {Lisp-Entry "edit" method #f 80 20 80 24 ("get-tree" "expand/collapse" "get-bottom" "get-right" "get-top" "get-left" "self" "add-row" "value" "when" "edit-in-cell")}
        {Lisp-Entry "close-editor" method #f 91 20 91 32 ("remove-every-son" "nextmethod")}
        {Lisp-Entry "in-edition?" method #f 97 20 97 31 ("0" "get-sons" "cardinality" ">" "nextmethod" "or")}}}})
"Reference-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Reference-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Reference-Row" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Reference-Row" class #f 43 20 43 33 ("Combo-Row")}}})
"Row-Formatted-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Row-Formatted-Text-View.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.editor.Row-Formatted-Text-View" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "Row-Formatted-Text-View" class #f 46 20 46 43 ("Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Formatted-Text-View")
        {Lisp-Entry "get-value-row" method #f 58 11 58 24 ("4" "child")}
        {Lisp-Entry "get-context-menu" method #f 67 20 67 36 ()}
        {Lisp-Entry "focus-lose" method #f 76 20 76 30 ("get-value-row" "get-father" "invalidate-drawing" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 81 20 81 32 ("get-value-row" "get-tree")}}}})
"Row-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Row-Text-View.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.editor.Row-Text-View" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Row-Text-View" class #f 46 20 46 33 ("Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Plain-Text-View")
        {Lisp-Entry "get-value-row" method #f 58 11 58 24 ("4" "child")}
        {Lisp-Entry "document-menu" method #f 67 11 67 24 ()}
        {Lisp-Entry "focus-lose" method #f 76 20 76 30 ("get-value-row" "get-father" "invalidate-drawing" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 81 20 81 32 ("get-value-row" "get-tree")}}}})
"Search-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Search-Tree.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.editor.Search-Tree" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Search-Tree" class #f 47 20 47 31 ("kind" "275" "location" "toplevel-controls?:" "100" "width:" "title:" "name:" "on-selection-change" ":self" "Event-Handler" "selection-handler:" "can-select-empty?:" "multiple-selection?:" "row" "selection-mode:" ":images" "portfolio:" "component" "filled-column:" "explicit" "initialize" "Details-Tree")
        {Lisp-Entry "target" property #f 50 12 50 18 ()}
        {Lisp-Entry "get-target" method #f 65 18 65 28 ("target")}
        {Lisp-Entry "set-target" method #f 69 18 69 28 ("acquire-focus" "set-single-selection" "0" "visible-count" ">" "when" "update" "target" "set!" "value")}
        {Lisp-Entry "selection-changed" method #f 82 20 82 37 ("focus?" "force-parent?" "origin" "old" "component")}
        {Lisp-Entry "on-designer" method #f 91 20 91 31 ("update" ":property-change" ":child-remove" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "update" method #f 103 20 103 26 ("get-presentation-property" "localize" "key:" "<" "sort" "insert-component" "for-each" "remove-every-row" "with-update-locked" "cons" "set!" "search-component" "indexable?" "and" "when" "level" "component" "lambda" "client" "for-each-descendant" "list" "let" "target" "search-components" "define" "rest")}
        {Lisp-Entry "insert-component" method #f 121 20 121 36 ("user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "class-of" "get-class-presentation" "kind" "present-location" "location" "get-component-image" "image" "get-presentation-property" "title" "let" "recursive?" "father" "component")}}}})
"String-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "String-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.String-Domain" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "String-Domain" class #f 44 7 44 20 ("Domain")
        {Lisp-Entry "validate-value" method #f 52 20 52 34 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "string?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 62 20 62 27 ("value")}}}})
"String-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "String-Row.jazz"} 1259757249
    {Lisp-Entry "jazz.designer.row.String-Row" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "String-Row" class #f 43 20 43 30 ("Value-Row")
        {Lisp-Entry "present" method #f 51 20 51 27 ("format" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" method #f 62 20 62 36 ("string=?" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"Surrogate-Handler"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "surrogate" "Surrogate-Handler.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.surrogate.Surrogate-Handler" module #f 37 18 37 59 ("jazz")
      {Lisp-Entry "Surrogate-Handler" class #f 43 20 43 37 ("Event-Handler")
        {Lisp-Entry "preserved" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-preserved" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "initialize" method #f 49 20 49 30 ("preserved~self" "set!" "nextmethod" "apply" "others" "preserved" "bind-keywords" "rest")}}}})
"Tab-View-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "surrogate" "Tab-View-Surrogate.jazz"} 1259788340
    {Lisp-Entry "jazz.designer.surrogate.Tab-View-Surrogate" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Tab-View-Surrogate" class #f 43 20 43 38 ("View-Surrogate")
        {Lisp-Entry "mouse-down" method #f 46 20 46 30 ("set-selection" "when" "client" "find-header" "header" "let" "nextmethod" "pos")}}}})
"Text-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "entry" "Text-Entry.jazz"} 1263914893
    {Lisp-Entry "jazz.designer.entry.Text-Entry" module #f 37 18 37 48 ("jazz")
      {Lisp-Entry "Text-Entry" class #f 45 7 45 17 ("text" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "scroller" "entry" "style:" "edge" "border-type:" "border" "name:" "Property-Entry")
        {Lisp-Entry "finish" method #f 56 20 56 26 ("self" "text" "'text" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" method #f 66 20 66 28 ("text" "'text" "locate")}
        {Lisp-Entry "validate" method #f 75 20 75 28 ("message:" "Property-Violation" "new" "get-nullable?" "not" "empty-string?" "and" "if" "text" "'text" "locate-component" "get-string-content" "content" "let" "domain")}
        {Lisp-Entry "get-modified?" method #f 88 20 88 33 ("text" "'text" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" method #f 92 20 92 33 ("text" "'text" "locate" "set-modified?" "value")}
        {Lisp-Entry "set-editable?" method #f 101 20 101 33 ("Medium" "White" "name:" "Color" "set-background" "text" "'text" "set-editable?" "none" "'none" "edge" "'edge" "if" "border" "'border" "locate" "set-border-type" "flag")}
        {Lisp-Entry "set-enabled?" method #f 112 20 112 32 ("text" "'text" "locate" "set-enabled?" "flag")}}}})
"Text-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Text-Row.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Text-Row" module #f 37 18 37 44 ("jazz")
      {Lisp-Entry "Text-Row" class #f 44 20 44 28 ("Value-Row")
        {Lisp-Entry "present" method #f 52 20 52 27 ("car" "format" "get-paragraphs" "first" "Text" "is?" "not" "if" "value")}
        {Lisp-Entry "get-edited-value" method #f 65 20 65 36 ("editor" "get-content")}
        {Lisp-Entry "get-edited-modified?" method #f 69 20 69 40 ("editor" "get-controller" "get-modified?")}
        {Lisp-Entry "edit" method #f 78 20 78 24 ("set-visible?" "value" "editor" "set-content" "edit-in-row")}
        {Lisp-Entry "close-editor" method #f 84 20 84 32 ("close-in-row-editor")}
        {Lisp-Entry "select-editor" method #f 88 20 88 33 ("focus-editor")}
        {Lisp-Entry "focus-editor" method #f 92 20 92 32 ("editor" "acquire-focus" "rest")}
        {Lisp-Entry "editor-height" method #f 96 20 96 33 ("200")}
        {Lisp-Entry "new-editor" method #f 100 20 100 30 ("0" "left-padding:" "editor-class" "new")}
        {Lisp-Entry "editor-class" method #f 105 20 105 32 ("Row-Text-View")}
        {Lisp-Entry "update" method #f 109 20 109 26 ("1" "self" "row-rank" "Cell" "new" "invalidate-cell" "present" "set-title" "set-property-modified?" "get-children" "second" "data" "get-tree" "tree" "let" "set-value" "value")}
        {Lisp-Entry "in-edition?" method #f 118 20 118 31 ("0" "get-sons" "cardinality" ">")}}}})
"Text-View-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "surrogate" "Text-View-Surrogate.jazz"} 1259788340
    {Lisp-Entry "jazz.designer.surrogate.Text-View-Surrogate" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Text-View-Surrogate" class #f 43 20 43 39 ("initialize" "View-Surrogate")
        {Lisp-Entry "edit?" slot #f 46 8 46 13 ()}
        {Lisp-Entry "editing?" method #f 54 20 54 28 ("edit?")}
        {Lisp-Entry "start-edit" method #f 58 11 58 21 ("client" "invalidate-view" "edit?" "set!")}
        {Lisp-Entry "stop-edit" method #f 63 11 63 20 ("client" "invalidate-view" "edit?" "set!")}
        {Lisp-Entry "focus-gain" method #f 73 20 73 30 ("nextmethod" "client" "focus-gain" "editing?" "if")}
        {Lisp-Entry "focus-lose" method #f 79 20 79 30 ("nextmethod" "stop-edit" "client" "focus-lose" "begin" "editing?" "if")}
        {Lisp-Entry "cursor-update" method #f 92 20 92 33 ("nextmethod" "client" "cursor-update" "editing?" "if" "pos")}
        {Lisp-Entry "mouse-down" method #f 103 20 103 30 ("nextmethod" "client" "mouse-down" "select-in-editor" "select?" "when" "begin" "editing?" "if" "pos")}
        {Lisp-Entry "mouse-up" method #f 112 20 112 28 ("nextmethod" "client" "mouse-up" "editing?" "if" "pos")}
        {Lisp-Entry "drag-move" method #f 118 20 118 29 ("nextmethod" "client" "drag-move" "editing?" "if" "pos")}
        {Lisp-Entry "drag-up" method #f 124 20 124 27 ("nextmethod" "client" "drag-up" "" "apply" "editing?" "if" "rest" "pos")}
        {Lisp-Entry "double-click" method #f 130 20 130 32 ("start-edit" "client" "double-click" "editing?" "if" "pos")}
        {Lisp-Entry "context-menu" method #f 136 20 136 32 ("nextmethod" "client" "context-menu" "editing?" "if" "pos")}
        {Lisp-Entry "key-press" method #f 147 20 147 29 ("nextmethod" "client" "key-press" "editing?" "if" "key")}
        {Lisp-Entry "return-press" method #f 153 20 153 32 ("start-edit" "client" "return-press" "editing?" "if" "key")}}}})
"Time-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Time-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.Time-Domain" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Time-Domain" class #f 43 7 43 18 ("Domain")}
      {Lisp-Entry "Time-Domain" class #f 49 7 49 18 ("Domain")
        {Lisp-Entry "validate-value" method #f 57 11 57 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "Date" "is-not?" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" method #f 67 11 67 18 ("present-compact" "not" "if" "value")}}}})
"Toolbox"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "toolbox" "Toolbox.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.toolbox.Toolbox" module #f 37 18 37 47 ("jazz")
      {Lisp-Entry "Toolbox" class #f 43 20 43 27 ("Group")
        {Lisp-Entry "get-class-descriptor" method #f 51 25 51 45 ("Toolbox-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 60 11 60 17 ()
        {Lisp-Entry "Toolbox-Descriptor" class #f 66 7 66 25 ("Group-Descriptor")
          {Lisp-Entry "class-presentation" method #f 69 20 69 38 ("class")}
          {Lisp-Entry "class-image" method #f 73 20 73 31 ("Image-Resource" "class")}
          {Lisp-Entry "component-get-presentation" method #f 77 20 77 46 ("component")}
          {Lisp-Entry "component-can-rename-component?" method #f 81 20 81 51 ("component")}
          {Lisp-Entry "component-can-delete-component?" method #f 85 20 85 51 ("component")}
          {Lisp-Entry "component-can-move-component?" method #f 89 20 89 49 ("component")}
          {Lisp-Entry "component-can-copy-component?" method #f 93 20 93 49 ("component")}
          {Lisp-Entry "component-get-addable-classes" method #f 97 20 97 49 ("Toolbox-Model" "Toolbox-Group" "list" "component")}}}}})
"Toolbox-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "toolbox" "Toolbox-Editor.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Editor" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Toolbox-Editor" class #f 43 20 43 34 ("Descendants-Editor")
        {Lisp-Entry "form-model" method #f 46 20 46 30 ("nextmethod" "else" "Toolbox-Tree" "tree" "get-name" "case" "form")}}}})
"Toolbox-Group"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "toolbox" "Toolbox-Group.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Group" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Toolbox-Group" class #f 44 20 44 33 ("initialize" "Component")
        {Lisp-Entry "title" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-title" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "set-title" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "get-class-descriptor" method #f 55 25 55 45 ("Toolbox-Group-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 64 11 64 17 ()
        {Lisp-Entry "Toolbox-Group-Descriptor" class #f 70 7 70 31 ("Component-Descriptor")
          {Lisp-Entry "class-presentation" method #f 73 20 73 38 ("class")}
          {Lisp-Entry "class-image" method #f 77 20 77 31 ("Image-Resource" "class")}
          {Lisp-Entry "component-get-addable-classes" method #f 81 20 81 49 ("Toolbox-Model" "Toolbox-Group" "list" "component")}
          {Lisp-Entry "component-get-categorized-properties" method #f 88 20 88 56 ("name-info" "class-info" "component")}}}}})
"Toolbox-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "toolbox" "Toolbox-Manager.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Manager" module #f 37 18 37 55 ("jazz")
      {Lisp-Entry "read-toolbox" definition #f 55 13 55 25 ("err" "continue-handler:" "install-context" "toolbox-file" "read-from-file" "instantiate" "toolbox" "get-application" "appl" "let" "lambda" "with-safe-execution")}
      {Lisp-Entry "Toolbox-Manager" class #f 72 20 72 35 ("291" "width:" "title:" "descendant" "on-double-click" "double-click-handler:" "auto-expand/collapse?:" "highlight-edited?:" "tree" "header" "content" "flat?:" "scroller" "center" "descendants" "on-new" ":form" "Event-Handler" "action-handler:" ":images" "portfolio:" "Image-Resource" "resource:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "new" "tools" "name:" "border" "layout-type:" "Exit-Listener" "Editor-View")
        {Lisp-Entry "external-name" method #f 89 25 89 38 ("toolbox-manager" "'toolbox-manager" "rest")}
        {Lisp-Entry "host-icon" method #f 98 25 98 34 ("Image-Resource")}
        {Lisp-Entry "host-title" method #f 102 25 102 35 ()}
        {Lisp-Entry "get-tools-view" method #f 111 20 111 34 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" method #f 115 20 115 33 ("acquire-focus" "descendants" "locate" "tree" "let")}
        {Lisp-Entry "new-controller" method #f 125 20 125 34 ("self" "Toolbox-Manager-Controller" "new")}
        {Lisp-Entry "install" method #f 134 20 134 27 ("get-application" "add-exit-listener" "read-toolbox" "set-client" "self" "'descendants" "locate" "set-editor" "header" "descendants" "locate-component" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "prepare-exit" method #f 142 20 142 32 ("save" "get-form" "get-origin" "file?" "designer" "and" "when")}
        {Lisp-Entry "document-status" method #f 152 11 152 26 ()}
        {Lisp-Entry "on-new" method #f 161 11 161 17 ("add-new" "evt")}
        {Lisp-Entry "on-double-click" method #f 165 11 165 26 ("add-new" "evt")}
        {Lisp-Entry "add-new" method #f 169 11 169 18 ("centered?:" "0" "Point" "get-class" "get-surrogate" "add-new" "get-client" "client" "View-Editor" "current-document" "editor" "Toolbox-Model" "is?" "when" "get-single-selected-data" "selected-model" "descendants" "locate" "tree" "let")}}
      {Lisp-Entry "Toolbox-Manager-Controller" class #f 184 7 184 33 ("Editor-View-Controller")
        {Lisp-Entry "document-status" method #f 187 20 187 35 ()}}}})
"Toolbox-Model"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "toolbox" "Toolbox-Model.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Model" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Toolbox-Model" class #f 43 20 43 33 ("initialize" "Component")
        {Lisp-Entry "unit" property #f 46 12 46 16 ()}
        {Lisp-Entry "get-unit" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "set-unit" accessor #f 46 42 46 50 ()}
        {Lisp-Entry "model" property #f 47 12 47 17 ()}
        {Lisp-Entry "get-model" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "set-model" accessor #f 47 42 47 50 ()}
        {Lisp-Entry "get-class" method #f 55 18 55 27 ("model" "unit" "module-ref")}
        {Lisp-Entry "print" method #f 64 20 64 25 ("model" "format" "lambda" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-class-descriptor" method #f 75 25 75 45 ("Toolbox-Model-Descriptor" "new")}}
      {Lisp-Entry "design" submodule #f 84 11 84 17 ()
        {Lisp-Entry "Toolbox-Model-Descriptor" class #f 90 7 90 31 ("Component-Descriptor")
          {Lisp-Entry "class-presentation" method #f 93 20 93 38 ("class")}
          {Lisp-Entry "class-image" method #f 97 20 97 31 ("Image-Resource" "class")}
          {Lisp-Entry "component-presentation-property?" method #f 101 20 101 52 ("model" "field-name" "memq?" "property" "component")}
          {Lisp-Entry "component-get-presentation" method #f 105 20 105 46 ("get-model" "component")}
          {Lisp-Entry "component-set-presentation" method #f 109 20 109 46 ("string->symbol" "model:" "set-property" "presentation" "designer" "component")}}}}})
"Toolbox-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "toolbox" "Toolbox-Tree.jazz"} 1264714816
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Tree" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Toolbox-Tree" class #f 44 20 44 32 ("row" "selection-mode:" "multiple-selection?:" "reorderable?:" "draggable?:" ":images" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "addable-root-classes" method #f 51 20 51 40 ("Toolbox-Model" "Toolbox-Group" "list")}
        {Lisp-Entry "update-selection" method #f 58 20 58 36 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" method #f 62 20 62 29 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Value-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "domain" "Value-Domain.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.domain.Value-Domain" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Value-Domain" class #f 43 7 43 19 ("Domain")
        {Lisp-Entry "present" method #f 51 20 51 27 (":reader" "->string" "value")}}}})
"Value-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Value-Menu.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.row.Value-Menu" module #f 37 18 37 46 ("jazz")
      {Lisp-Entry "Value-Menu" class #f 45 20 45 30 ("initialize" "Context-Menu")
        {Lisp-Entry "value-row" property #f 48 12 48 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 48 46 48 54 ()}
        {Lisp-Entry "on-show" method #f 61 11 61 18 ("value-row" "show-property" "evt")}
        {Lisp-Entry "on-revert" method #f 66 11 66 20 ("value-row" "revert-property" "evt")}}}})
"Value-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "row" "Value-Row.jazz"} 1265748097
    {Lisp-Entry "jazz.designer.row.Value-Row" module #f 37 18 37 45 ("jazz")
      {Lisp-Entry "Value-Row" class #f 49 20 49 29 ("set-property" "get-property" "initialize" "Tree-Row")
        {Lisp-Entry "property_" property #f 53 12 53 21 ()}
        {Lisp-Entry "value" property #f 54 12 54 17 ()}
        {Lisp-Entry "get-value" accessor #f 54 51 54 59 ()}
        {Lisp-Entry "set-value" accessor #f 54 51 54 59 ()}
        {Lisp-Entry "nullable?" property #f 55 12 55 21 ()}
        {Lisp-Entry "get-nullable?" accessor #f 55 51 55 59 ()}
        {Lisp-Entry "set-nullable?" accessor #f 55 51 55 59 ()}
        {Lisp-Entry "modified?" property #f 56 12 56 21 ()}
        {Lisp-Entry "get-modified?" accessor #f 56 51 56 59 ()}
        {Lisp-Entry "set-modified?" accessor #f 56 51 56 59 ()}
        {Lisp-Entry "limit-to-list?" property #f 57 12 57 26 ()}
        {Lisp-Entry "get-limit-to-list?" accessor #f 57 51 57 59 ()}
        {Lisp-Entry "set-limit-to-list?" accessor #f 57 51 57 59 ()}
        {Lisp-Entry "editor" slot #f 60 8 60 14 ()}
        {Lisp-Entry "get-editor" accessor #f 60 40 60 48 ()}
        {Lisp-Entry "set-editor" accessor #f 60 40 60 48 ()}
        {Lisp-Entry "edited?" slot #f 61 8 61 15 ()}
        {Lisp-Entry "initialize" method #f 69 20 69 30 ("limit-to-list?~self" "nullable?~self" "value~self" "property_~self" "set!" "nextmethod" "apply" "others" "limit-to-list?" "nullable?" "value" "property" "bind-keywords" "rest")}
        {Lisp-Entry "get-filter-name" method #f 83 31 83 46 ("properties" "'properties")}
        {Lisp-Entry "get-filter-rank" method #f 87 31 87 46 ("1")}
        {Lisp-Entry "get-filter-image" method #f 91 31 91 47 ("Image-Resource")}
        {Lisp-Entry "get-property" method #f 100 18 100 30 ("property_")}
        {Lisp-Entry "set-property" method #f 104 18 104 30 ("property_" "set!" "prop")}
        {Lisp-Entry "get-title" method #f 108 18 108 27 ("get-title" "children" "car" "node" "let")}
        {Lisp-Entry "set-title" method #f 113 18 113 27 ("set-title" "children" "car" "node" "let" "title")}
        {Lisp-Entry "get-client" method #f 118 18 118 28 ("get-tree" "get-client")}
        {Lisp-Entry "auto-in-place?" method #f 127 20 127 34 ()}
        {Lisp-Entry "auto-expand" method #f 131 20 131 31 ("edit-row" "lambda" "with-update-locked" "get-tree" "tree" "let" "nextmethod")}
        {Lisp-Entry "auto-select" method #f 139 20 139 31 ("select-editor" "nextmethod")}
        {Lisp-Entry "auto-collapse" method #f 144 20 144 33 ("end-row-edition" "in-edition?" "when" "nextmethod")}
        {Lisp-Entry "auto-collapsable?" method #f 150 20 150 37 ("in-edition?")}
        {Lisp-Entry "enter-value" method #f 159 26 159 37 ("get-tree" "get-card" "enter-value" "update" "property_" "not" "if" "set-modified?" "value" "set!" "v")}
        {Lisp-Entry "enter-edited-value" method #f 167 18 167 36 ("throw-cancel" "get-edited-value" "enter-value" "validate-value" "if")}
        {Lisp-Entry "default-value" method #f 173 26 173 39 ()}
        {Lisp-Entry "present" method #f 182 26 182 33 (":reader" "->string" "not" "if" "value")}
        {Lisp-Entry "get-edited-value" method #f 193 26 193 42 ("editor" "get-string-content" "read-string-element")}
        {Lisp-Entry "set-edited-value" method #f 197 26 197 42 ("present" "editor" "set-string-content" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 201 26 201 46 ("editor" "get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 205 26 205 46 ("editor" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" method #f 209 26 209 37 ("editor" "show-text-cursor")}
        {Lisp-Entry "validate-value" method #f 213 18 213 32 ("get-edited-value" "revert-property" "no" "get-end" "end:" "get-start" "start:" "focus-editor" "yes" "no:" "yes:" "question" "'question" "type:" "exception-reason" "message-box" "case" "err" "Parse-Error" "catch")}
        {Lisp-Entry "edit-row" method #f 226 18 226 26 ("edited?" "set!" "edit")}
        {Lisp-Entry "end-row-edition" method #f 231 18 231 33 ("edited?" "set!" "end-edition")}
        {Lisp-Entry "in-edition?" method #f 236 26 236 37 ("edited?")}
        {Lisp-Entry "edit" method #f 240 26 240 30 ("edit-in-cell")}
        {Lisp-Entry "end-edition" method #f 244 26 244 37 ("close-editor" "save-edition")}
        {Lisp-Entry "save-edition" method #f 249 26 249 38 ("set-edited-modified?" "enter-edited-value" "get-edited-modified?" "when")}
        {Lisp-Entry "close-editor" method #f 255 26 255 38 ("close-in-cell-editor")}
        {Lisp-Entry "close-editor?" method #f 259 26 259 39 ()}
        {Lisp-Entry "select-editor" method #f 263 26 263 39 ("focus-editor" "edit-in-cell" "in-cell-edition?" "not" "when" "get-tree" "tree" "let")}
        {Lisp-Entry "in-cell-edition?" method #f 270 18 270 34 ("1" "Cell" "new" "get-edited-cell" "nu=?" "self" "row-rank" "row" "in-edition?" "and" "get-tree" "tree" "let")}
        {Lisp-Entry "editor-up-arrow" method #f 282 18 282 33 ("NoModifiers" "get-tree" "up-arrow-press")}
        {Lisp-Entry "editor-down-arrow" method #f 286 18 286 35 ("NoModifiers" "get-tree" "down-arrow-press")}
        {Lisp-Entry "editor-tab" method #f 290 18 290 28 ("down-arrow-press" "get-tree" "up-arrow-press" "shift-down?" "if" "NoModifiers" "modifiers" "let")}
        {Lisp-Entry "editor-return" method #f 297 18 297 31 (".150" "duration:" "save-edition" "set-edited-modified?" "lambda" ":wait" "with-cursor" "show-cursor")}
        {Lisp-Entry "editor-focus-validate" method #f 306 18 306 39 ("validate-value" "get-edited-modified?" "limit-to-list?" "if" "view")}
        {Lisp-Entry "editor-focus-delegate" method #f 314 18 314 39 ("invalidate-drawing" "select-all?:" "focus-editor" "self" "get-tree" "auto-expand/collapse" "in-edition?" "not" "auto-in-place?" "and" "when")}
        {Lisp-Entry "editor-focus-lose" method #f 321 18 321 35 ("invalidate-drawing" "get-tree" "close-auto-expanded")}
        {Lisp-Entry "edit-in-cell" method #f 331 26 331 38 ("set-client" "focus-editor" "close-editor?" "close-editor?:" "editor:" "edit-cell" "value" "set-edited-value" "set-parent" "new-editor" "set!" "editor" "unless" "fill" "'fill" "set-layout-type" "get-content" "content" "hscroll?:" "vscroll?:" "parent:" "Scroller-View" "scroller" "Dark-Red" "name:" "Color" "border-color:" "solid" "'solid" "border-type:" "Border-View" "border" "1" "self" "row-rank" "Cell" "new" "cell" "get-tree" "tree" "let*")}
        {Lisp-Entry "close-in-cell-editor" method #f 348 18 348 38 ("editor" "set!" "close-editor?" "when" "end-edition" "get-tree" "tree" "let")}
        {Lisp-Entry "focus-editor" method #f 355 26 355 38 ("Range" "new" "set-selection" "else" "set-caret" "select-all" "not" "cond" "acquire-focus" "when" "focused-editor" "editor" "let" "select-all?" "select-all?:" "end" "end:" "start" "start:")}
        {Lisp-Entry "focused-editor" method #f 364 26 364 40 ("editor")}
        {Lisp-Entry "edit-in-row" method #f 373 18 373 29 ("expand/collapse" "set-client" "set-editor" "get-content" "set-parent" "new-editor" "set!" "editor" "unless" "hscroll?:" "vscroll?:" "Scroller-View" "scroller" "Dark-Red" "name:" "Color" "border-color:" "solid" "'solid" "border-type:" "parent:" "Border-View" "new" "border" "editor-height" "row-height:" "self" "father:" "Editor-Row" "class:" "add-row" "subrow" "get-tree" "tree" "let*")}
        {Lisp-Entry "install-container" method #f 386 29 386 46 ()}
        {Lisp-Entry "close-in-row-editor" method #f 390 18 390 37 ("set-parent" "close" "close-editor?" "if" "get-editor" "editor" "remove-row" "self" "expand/collapse" "when" "get-sons" "first" "editor-row" "get-tree" "tree" "let")}
        {Lisp-Entry "editor-height" method #f 402 29 402 42 ("21")}
        {Lisp-Entry "new-editor" method #f 406 29 406 39 ("top-padding:" "1" "left-padding:" "self" "value-row:" "editor-class" "new")}
        {Lisp-Entry "editor-class" method #f 413 29 413 41 ("Value-Text-View")}
        {Lisp-Entry "edit-in-list" method #f 422 11 422 23 ("self" "expand/collapse" "get-list-value" "get-subrow-class" "add-value" "subvalue" "lambda" "for-each" "get-tree" "tree" "let")}
        {Lisp-Entry "get-subrow-class" method #f 430 29 430 45 ("Value-Row")}
        {Lisp-Entry "close-in-list-editor" method #f 434 21 434 41 ("remove-every-son" "self" "expand/collapse" "get-tree" "tree" "let")}
        {Lisp-Entry "get-list-edited-value" method #f 440 11 440 32 ("get-subvalue" "get-sons" "accumulate")}
        {Lisp-Entry "get-list-edited-modified?" method #f 444 21 444 46 ("get-sons" "get-modified?" "subrow" "lambda" "some?" "modified?" "or")}
        {Lisp-Entry "set-list-edited-modified?" method #f 451 21 451 46 ("set-modified?" "subrow" "lambda" "get-sons" "iterate" "modified?" "set!" "flag")}
        {Lisp-Entry "get-subvalue" method #f 458 26 458 38 ("get-value")}
        {Lisp-Entry "get-list-value" method #f 462 29 462 43 ("value")}
        {Lisp-Entry "add-value" method #f 466 29 466 38 ("class" "value")}
        {Lisp-Entry "add-row" method #f 470 18 470 25 ("row:" "father:" "add-row" "set-title" "set-value" "present" "presented" "default-value" "unspecified" "'unspecified" "eq?" "if" "list" "children:" "17" "row-height:" "parent:" "row" "Tree-Image" "owner" "Tree-Label" "label" "Image-Resource" "image:" "title:" "Tree-Node" "new" "node" "get-tree" "tree" "let*" "user-data" "user-data:" "Value-Row" "class" "class:" "value" "title" "father")}
        {Lisp-Entry "Modified-Color" definition #f 488 14 488 28 ("Dark-Red" "name:" "Color")}
        {Lisp-Entry "update" method #f 492 26 492 32 ("update-in-cell" "value")}
        {Lisp-Entry "update-in-cell" method #f 496 11 496 25 ("invalidate-cell" "set-edited-modified?" "set-title" "set-property-modified?" "set-value" "get-cell-data" "get-preserved-data" "if" "data" "get-cell-editor" "editor" "in-edition?" "edited?" "1" "Cell" "new" "cell" "self" "row-rank" "rank" "present" "title" "get-tree" "tree" "let*" "value")}
        {Lisp-Entry "set-property-modified?" method #f 512 11 512 33 ("invalidate-cell" "set-color" "Modified-Color" "if" "color" "get-cell-data" "node" "0" "Cell" "new" "cell" "self" "row-rank" "rank" "get-tree" "tree" "let*" "property_" "when" "flag")}
        {Lisp-Entry "edit-definitions" method #f 528 26 528 42 ("bell")}
        {Lisp-Entry "double-click" method #f 537 20 537 32 ("self" "auto-expand/collapse" "get-tree" "tree" "let" "pos")}
        {Lisp-Entry "context-menu" method #f 542 20 542 32 ("track-popup-menu" "update-menu" "self" "value-row:" "new" "menu" "bell" "not" "if" "get-menu-class" "class" "lambda" "with-context-click" "position" "nu+" "get-tree" "tree" "let" "pos")}
        {Lisp-Entry "get-menu-class" method #f 555 29 555 43 ("Value-Menu")}
        {Lisp-Entry "update-menu" method #f 559 11 559 22 ("layout-menu" "Separator-Item" "F2" "shortcut:" "on-rename-item" "'on-rename-item" "auto-number?" "unless" "on-remove-item" "'on-remove-item" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "Image-Resource" "icon:" "title:" "revert" "'revert" "before:" "parent:" "Label-Item" "new" "List-Row" "father" "is?" "when" "menu")}
        {Lisp-Entry "on-remove-item" method #f 568 19 568 33 ("self" "father" "remove-item" "evt")}
        {Lisp-Entry "on-rename-item" method #f 572 19 572 33 ("self" "father" "rename-item" "evt")}
        {Lisp-Entry "show-property" method #f 576 18 576 31 ("property_" "field-name" "set-showed-property" "View-Editor" "is-not?" "get-editor" "editor" "let" "bell" "not" "if" "get-surrogate" "surrogate" "get-client" "client" "let*")}
        {Lisp-Entry "revert-property" method #f 587 18 587 33 ("focus-editor" "set-modified?" "set-property-modified?" "set-edited-modified?" "value" "set-edited-value")}
        {Lisp-Entry "draw-data" method #f 600 26 600 35 ("0" "1" "draw-at" "height" "width" "data" "row" "column" "value" "context" "surface")}}}})
"Value-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "Value-Text-View.jazz"} 1259328210
    {Lisp-Entry "jazz.designer.editor.Value-Text-View" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Value-Text-View" class #f 47 20 47 35 ("top-padding:" "1" "left-padding:" "show-unfocused-selection?:" "accepts-returns?:" "Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "initialize" "Property-Editor" "implements" "IDE-Text-View" "Plain-Text-View")
        {Lisp-Entry "value-row" property #f 50 12 50 21 ()}
        {Lisp-Entry "get-value-row" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "set-value-row" accessor #f 50 46 50 54 ()}
        {Lisp-Entry "manager" slot #f 53 8 53 15 ()}
        {Lisp-Entry "get-manager" method #f 65 20 65 31 ("manager")}
        {Lisp-Entry "set-manager" method #f 69 20 69 31 ("manager" "set!" "value")}
        {Lisp-Entry "get-edited-value" method #f 73 11 73 27 ("get-string-content" "read-string-element")}
        {Lisp-Entry "set-edited-value" method #f 77 11 77 27 ("set-string-content" ":reader" "->string" "present-edited-value" "define" "value")}
        {Lisp-Entry "get-edited-modified?" method #f 84 11 84 31 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" method #f 88 11 88 31 ("get-controller" "set-modified?" "flag")}
        {Lisp-Entry "up-arrow-move" method #f 97 20 97 33 ("editor-up-arrow" "value-row" "manager" "either" "target" "let" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" method #f 102 20 102 35 ("editor-down-arrow" "value-row" "manager" "either" "target" "let" "scroll?" "extend?")}
        {Lisp-Entry "tab-press" method #f 107 20 107 29 ("value-row" "editor-tab" "manager" "end-completion" "has-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "return-press" method #f 115 20 115 32 ("value-row" "editor-return" "manager" "if" "nextmethod" "key")}
        {Lisp-Entry "document-menu" method #f 122 11 122 24 ()}
        {Lisp-Entry "focus-validate" method #f 131 11 131 25 ("value-row" "editor-focus-validate")}
        {Lisp-Entry "focus-lose" method #f 135 20 135 30 ("value-row" "editor-focus-lose" "manager" "if" "nextmethod")}
        {Lisp-Entry "focus-master" method #f 142 20 142 32 ("value-row" "get-tree")}
        {Lisp-Entry "focus-reset" method #f 146 20 146 31 ("value-row" "get-tree")}}}})
"View-Descendants-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "View-Descendants-Editor.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.editor.View-Descendants-Editor" module #f 37 18 37 62 ("jazz")
      {Lisp-Entry "View-Descendants-Editor" class #f 43 20 43 43 ("Descendants-Editor")
        {Lisp-Entry "form-model" method #f 46 20 46 30 ("nextmethod" "else" "View-Descendants-Tree" "tree" "get-name" "case" "form")}
        {Lisp-Entry "finish" method #f 52 20 52 26 ("tree" "'tree" "locate" "set-editable?" "nextmethod" "initargs")}}}})
"View-Descendants-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "View-Descendants-Tree.jazz"} 1265747956
    {Lisp-Entry "jazz.designer.editor.View-Descendants-Tree" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "View-Descendants-Tree" class #f 44 20 44 41 ("explicit" "initialize" "Descendants-Tree")
        {Lisp-Entry "show-contents?" property #f 47 12 47 26 ()}
        {Lisp-Entry "get-show-contents?" method #f 55 18 55 36 ("show-contents?")}
        {Lisp-Entry "set-show-contents?" method #f 59 18 59 36 ("preserving-update" "show-contents?" "set!" "value")}
        {Lisp-Entry "insert-component" method #f 69 20 69 36 ("insert-components" "nextmethod" "apply" "Content-View" "is-not?" "show-contents?" "or" "if" "rest" "level" "update?" "rights" "component" "row")}}}})
"View-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "View-Editor.jazz"} 1266250425
    {Lisp-Entry "jazz.designer.editor.View-Editor" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "View-Editor" class #f 52 20 52 31 ("vscroll?:" "hscroll?:" "scroller" "name:" "fill" "layout-type:" "select" "'select" "initialize" "Editor-View")
        {Lisp-Entry "mode" property #f 55 12 55 16 ()}
        {Lisp-Entry "get-mode" accessor #f 55 46 55 54 ()}
        {Lisp-Entry "set-mode" accessor #f 55 46 55 54 ()}
        {Lisp-Entry "overlay" slot #f 58 18 58 25 ()}
        {Lisp-Entry "get-overlay" accessor #f 58 56 58 64 ()}
        {Lisp-Entry "showed-property" slot #f 59 18 59 33 ()}
        {Lisp-Entry "get-showed-property" accessor #f 59 56 59 64 ()}
        {Lisp-Entry "rubber-band?" slot #f 60 18 60 30 ()}
        {Lisp-Entry "get-rubber-band?" accessor #f 60 56 60 64 ()}
        {Lisp-Entry "base-view" slot #f 61 18 61 27 ()}
        {Lisp-Entry "get-base-view" accessor #f 61 56 61 64 ()}
        {Lisp-Entry "base-position" slot #f 62 18 62 31 ()}
        {Lisp-Entry "get-base-position" accessor #f 62 56 62 64 ()}
        {Lisp-Entry "current-position" slot #f 63 18 63 34 ()}
        {Lisp-Entry "get-current-position" accessor #f 63 56 63 64 ()}
        {Lisp-Entry "preserved-client" slot #f 64 18 64 34 ()}
        {Lisp-Entry "get-preserved-client" accessor #f 64 56 64 64 ()}
        {Lisp-Entry "show-frames?" slot #f 65 18 65 30 ()}
        {Lisp-Entry "get-show-frames?" accessor #f 65 56 65 64 ()}
        {Lisp-Entry "show-content?" slot #f 66 18 66 31 ()}
        {Lisp-Entry "get-show-content?" accessor #f 66 56 66 64 ()}
        {Lisp-Entry "host-position" method #f 79 25 79 38 ("117" "227" "Point")}
        {Lisp-Entry "host-size" method #f 83 25 83 34 ("629" "810" "Dimension")}
        {Lisp-Entry "host-workspaces" method #f 87 20 87 35 ("designer")}
        {Lisp-Entry "guest-actions" method #f 96 20 96 33 ("nextmethod" "view-editor" "'view-editor" "find-actions" "cons")}
        {Lisp-Entry "on-bring-to-front" method #f 106 11 106 28 ("designer" "bring-to-front" "component" "lambda" "for-each" "outer-selection" "selection" "let" "evt")}
        {Lisp-Entry "on-send-to-back" method #f 113 11 113 26 ("designer" "send-to-back" "component" "lambda" "for-each" "outer-selection" "selection" "let" "evt")}
        {Lisp-Entry "on-delete-selection" method #f 120 11 120 30 ("delete-selection" "evt")}
        {Lisp-Entry "on-rename-selected" method #f 124 11 124 29 ("set-presentation-property" "get-presentation-property" "initial-value:" "get-brothers" "class-of" "request-component-presentation" "presentation" "get-designer" "designer" "car" "component" "bell" "1" "length" "/=" "if" "outer-selection" "selection" "let" "evt")}
        {Lisp-Entry "on-select-all-children" method #f 134 11 134 33 ("get-surrogate" "select-all" "car" "component" "bell" "1" "length" "/=" "if" "outer-selection" "selection" "let" "evt")}
        {Lisp-Entry "on-properties" method #f 142 11 142 24 ("focus?:" "workspace:" "Properties-Manager" "select-palette" "evt")}
        {Lisp-Entry "new-event" method #f 151 25 151 34 ("focus-host" "set-selection" "set-visible?" "bring-to-front" "set-client" "set-origin" "instantiate" "client" "600" "800" "Dimension" "size" "'size" "list" "properties:" "View" "'View" "model-name:" "'new" "action:" "textual?:" "Form" "new" "form" "get-guest" "manager" "host-visible?:" "self" "new-frame" "apply" "frame" "let*" "rest")}
        {Lisp-Entry "client-update" method #f 170 20 170 33 ("set-visible?" "client" "when" "install-client" "nextmethod")}
        {Lisp-Entry "install-client-surrogate" method #f 177 20 177 44 ("self" "install-surrogate" "client" "when")}
        {Lisp-Entry "install-client" method #f 182 29 182 43 ("set-client" "set-parent" "get-content" "essay" "content" "'scroller" "locate-component" "scroller" "let*" "unless" "get-parent" "client-parent" "let" "client" "when")}
        {Lisp-Entry "install-current-designer" method #f 199 20 199 44 ("get-surrogate" "redraw-border" "nextmethod" "form" "component")}
        {Lisp-Entry "toggle-frames" method #f 210 19 210 32 ("get-reference" "invalidate-view" "not" "show-frames?" "set!")}
        {Lisp-Entry "toggle-content" method #f 215 19 215 33 ("get-reference" "invalidate-view" "not" "show-content?" "set!")}
        {Lisp-Entry "toggle-try-out" method #f 220 19 220 33 ("list" "else" "set-client" "set-selection" "client" "preserved-client" "set!" "trying-out?" "not" "cond")}
        {Lisp-Entry "trying-out?" method #f 231 19 231 30 ("preserved-client" "boolean")}
        {Lisp-Entry "set-showed-property" method #f 240 19 240 38 ("client" "invalidate-view" "showed-property" "set!" "property")}
        {Lisp-Entry "invalidate-selection" method #f 250 19 250 39 ("selection" "invalidate-view" "for-each")}
        {Lisp-Entry "render" method #f 259 20 259 26 ("length" "0" "naturals" "selection" "draw-selected" "outer-client" "outer" "get-surrogate" "surrogate" "let*" "View" "is?" "when" "rank" "view" "lambda" "for-each" "nextmethod" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "start-rubber-band" method #f 275 19 275 36 ("setup-overlay" "acquire-capture" "current-position" "base-position" "base-view" "rubber-band?" "set!" "pos" "view")}
        {Lisp-Entry "process-rubber-band" method #f 284 19 284 38 ("select-rubber-banded" "rect" "base-position" "corners->rect" "client" "invalidate-rect" "set!" "current-position" "old" "let" "rubber-band?" "when" "pos")}
        {Lisp-Entry "select-rubber-banded" method #f 296 11 296 31 ("set-selection" "get-output" "lst" "let" "put" "rects-intersect?" "when" "client" "acquire" "get-bounds" "b" "view" "lambda" "base-view" "for-each-view" "List-Factory" "new" "selection" "rect-size" "s" "rect-position" "p" "normalize-rect" "r" "let*" "rect")}
        {Lisp-Entry "end-rubber-band" method #f 311 19 311 34 ("rubber-band?" "set!" "base-view" "release-capture" "remove-overlay" "base-position" "corners->rect" "select-rubber-banded" "process-rubber-band" "pos")}
        {Lisp-Entry "setup-overlay" method #f 324 11 324 24 ("self" "editor:" "client" "parent:" "Client-Overlay" "new" "overlay" "set!")}
        {Lisp-Entry "remove-overlay" method #f 328 11 328 25 ("set!" "overlay" "close")}
        {Lisp-Entry "align-left" method #f 338 18 338 28 ("cdr" "get-v" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "lambda" "for-each" "lie-left" "h" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-top" method #f 350 18 350 27 ("cdr" "get-h" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "lambda" "for-each" "lie-top" "v" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-right" method #f 362 18 362 29 ("cdr" "get-v" "Point" "new" "set-view-lie" "get-width" "-" "get-lie" "lie" "view" "lambda" "for-each" "lie-right" "h" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-bottom" method #f 375 18 375 30 ("cdr" "get-h" "Point" "new" "set-view-lie" "get-height" "-" "get-lie" "lie" "view" "lambda" "for-each" "lie-bottom" "v" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "center-horizontally" method #f 388 18 388 37 ("cdr" "get-v" "Point" "new" "set-view-lie" "-" "fxround/" "+" "get-lie" "lie" "view" "lambda" "for-each" "get-width" "width" "lie-left" "h" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "center-vertically" method #f 402 18 402 35 ("cdr" "get-h" "Point" "new" "set-view-lie" "-" "fxround/" "+" "get-lie" "lie" "view" "lambda" "for-each" "get-height" "height" "lie-top" "v" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "space-horizontally" method #f 416 18 416 36 ("cddr" "get-width" "increase!" "get-v" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "lambda" "for-each" "+" "h" "lie-right" "lie-left" "-" "dh" "second" "get-surrogate" "outer-client" "first" "let*" "bell" "3" "selection" "length" "<" "if")}
        {Lisp-Entry "space-vertically" method #f 431 18 431 34 ("cddr" "get-height" "increase!" "get-h" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "lambda" "for-each" "+" "v" "lie-bottom" "lie-top" "-" "dv" "second" "get-surrogate" "outer-client" "first" "let*" "bell" "3" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-width" method #f 446 18 446 30 ("cdr" "get-height" "Dimension" "new" "'size" "designer" "safe-set-property" "get-size" "size" "view" "lambda" "for-each" "get-width" "width" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-height" method #f 458 18 458 31 ("cdr" "get-width" "Dimension" "new" "'size" "designer" "safe-set-property" "get-size" "size" "view" "lambda" "for-each" "get-height" "height" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-both" method #f 470 18 470 29 ("cdr" "'size" "designer" "safe-set-property" "let" "view" "lambda" "for-each" "get-size" "size" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "lie-left" definition #f 481 15 481 23 ("get-lie" "get-h" "view")}
        {Lisp-Entry "lie-top" definition #f 485 15 485 22 ("get-lie" "get-v" "view")}
        {Lisp-Entry "lie-right" definition #f 489 15 489 24 ("get-width" "get-lie" "get-h" "+" "view")}
        {Lisp-Entry "lie-bottom" definition #f 493 15 493 25 ("get-height" "get-lie" "get-v" "+" "view")}
        {Lisp-Entry "set-view-lie" method #f 497 11 497 23 ("get-position" "position" "'position" "designer" "safe-set-property" "set-lie" "lie" "view")}}
      {Lisp-Entry "Overlay-Outside" definition #f 507 12 507 27 ("0.8" "alpha:" "234" "blue:" "158" "green:" "96" "red:" "Color")}
      {Lisp-Entry "Overlay-Inside" definition #f 510 12 510 26 ("0.4" "alpha:" "234" "blue:" "158" "green:" "96" "red:" "Color")}
      {Lisp-Entry "Client-Overlay" class #f 514 7 514 21 ("View")
        {Lisp-Entry "editor" property #f 517 12 517 18 ()}
        {Lisp-Entry "draw" method #f 520 20 520 24 ("Overlay-Inside" "Overlay-Outside" "rectangle" "corners->rect" "rect" "when" "get-current-position" "current" "editor" "get-base-position" "base" "let" "lv" "lh" "context" "surface")}}}})
"View-Editor-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "editor" "View-Editor-Actions.jazz"} 1259266728
    {Lisp-Entry "jazz.designer.editor.View-Editor-Actions" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "View-Editor-Actions" class #f 46 20 46 39 ("on-save" "save" "on-open" "open" ":shift" "on-new" ":frame" "new" ":control" "Shortcut" "shortcut:" "on-edit-form" ":document" "Event-Handler" "action-handler:" "edit-form" "name:" "Actions")}}})
"View-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "surrogate" "View-Surrogate.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.surrogate.View-Surrogate" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "View-Surrogate" class #f 56 20 56 34 ("initialize" "Renderer" "Component-Surrogate")
        {Lisp-Entry "client-renderer" slot #f 59 18 59 33 ()}
        {Lisp-Entry "client-focus-gain-handler" slot #f 60 18 60 43 ()}
        {Lisp-Entry "client-focus-lose-handler" slot #f 61 18 61 43 ()}
        {Lisp-Entry "client-cursor-update-handler" slot #f 62 18 62 46 ()}
        {Lisp-Entry "client-mouse-down-handler" slot #f 63 18 63 43 ()}
        {Lisp-Entry "client-mouse-up-handler" slot #f 64 18 64 41 ()}
        {Lisp-Entry "client-drag-move-handler" slot #f 65 18 65 42 ()}
        {Lisp-Entry "client-drag-up-handler" slot #f 66 18 66 40 ()}
        {Lisp-Entry "client-double-click-handler" slot #f 67 18 67 45 ()}
        {Lisp-Entry "client-current-drop-handler" slot #f 68 18 68 45 ()}
        {Lisp-Entry "client-receive-drop-handler" slot #f 69 18 69 45 ()}
        {Lisp-Entry "client-context-menu-handler" slot #f 70 18 70 45 ()}
        {Lisp-Entry "client-key-press-handler" slot #f 71 18 71 42 ()}
        {Lisp-Entry "client-arrow-press-handler" slot #f 72 18 72 44 ()}
        {Lisp-Entry "client-backspace-press-handler" slot #f 73 18 73 48 ()}
        {Lisp-Entry "client-return-press-handler" slot #f 74 18 74 45 ()}
        {Lisp-Entry "dragging?" slot #f 77 8 77 17 ()}
        {Lisp-Entry "processing?" slot #f 78 8 78 19 ()}
        {Lisp-Entry "current-part" slot #f 79 8 79 20 ()}
        {Lisp-Entry "start-position" slot #f 80 8 80 22 ()}
        {Lisp-Entry "old-position" slot #f 81 8 81 20 ()}
        {Lisp-Entry "install-handlers" method #f 89 20 89 36 ("invalidate-border" "on-return-press" "'on-return-press" "set-return-press-handler" "on-backspace-press" "'on-backspace-press" "set-backspace-press-handler" "on-arrow-press" "'on-arrow-press" "set-arrow-press-handler" "on-key-press" "'on-key-press" "set-key-press-handler" "on-context-menu" "'on-context-menu" "set-context-menu-handler" "on-receive-drop" "'on-receive-drop" "set-receive-drop-handler" "on-current-drop" "'on-current-drop" "set-current-drop-handler" "on-double-click" "'on-double-click" "set-double-click-handler" "on-drag-up" "'on-drag-up" "set-drag-up-handler" "on-drag-move" "'on-drag-move" "set-drag-move-handler" "on-mouse-up" "'on-mouse-up" "set-mouse-up-handler" "on-mouse-down" "'on-mouse-down" "set-mouse-down-handler" "on-cursor-update" "'on-cursor-update" "set-cursor-update-handler" "on-focus-lose" "'on-focus-lose" "set-focus-lose-handler" "preserved:" "on-focus-gain" "'on-focus-gain" "method-name:" "target:" "Surrogate-Handler" "new" "set-focus-gain-handler" "self" "set-renderer" "get-return-press-handler" "client-return-press-handler" "get-backspace-press-handler" "client-backspace-press-handler" "get-arrow-press-handler" "client-arrow-press-handler" "get-key-press-handler" "client-key-press-handler" "get-context-menu-handler" "client-context-menu-handler" "get-receive-drop-handler" "client-receive-drop-handler" "get-current-drop-handler" "client-current-drop-handler" "get-double-click-handler" "client-double-click-handler" "get-drag-up-handler" "client-drag-up-handler" "get-drag-move-handler" "client-drag-move-handler" "get-mouse-up-handler" "client-mouse-up-handler" "get-mouse-down-handler" "client-mouse-down-handler" "get-cursor-update-handler" "client-cursor-update-handler" "get-focus-lose-handler" "client-focus-lose-handler" "get-focus-gain-handler" "client-focus-gain-handler" "client" "get-renderer" "client-renderer" "set!" "nextmethod")}
        {Lisp-Entry "remove-handlers" method #f 126 20 126 35 ("invalidate-border" "client-return-press-handler" "set-return-press-handler" "client-backspace-press-handler" "set-backspace-press-handler" "client-arrow-press-handler" "set-arrow-press-handler" "client-key-press-handler" "set-key-press-handler" "client-context-menu-handler" "set-context-menu-handler" "client-receive-drop-handler" "set-receive-drop-handler" "client-current-drop-handler" "set-current-drop-handler" "client-double-click-handler" "set-double-click-handler" "client-drag-up-handler" "set-drag-up-handler" "client-drag-move-handler" "set-drag-move-handler" "client-mouse-up-handler" "set-mouse-up-handler" "client-mouse-down-handler" "set-mouse-down-handler" "client-cursor-update-handler" "set-cursor-update-handler" "client-focus-lose-handler" "set-focus-lose-handler" "client-focus-gain-handler" "set-focus-gain-handler" "client-renderer" "client" "set-renderer" "nextmethod")}
        {Lisp-Entry "Focused-Background" definition #f 152 14 152 32 ("0.15" "alpha:" "Dark-Purple" "name:" "Color")}
        {Lisp-Entry "Unfocused-Background" definition #f 155 14 155 34 ("0.15" "alpha:" "Dark" "name:" "Color")}
        {Lisp-Entry "Selected-Colors" definition #f 159 14 159 29 ("Yellow" "Orange" "Red" "name:" "Color")}
        {Lisp-Entry "Unselected-Color" definition #f 162 14 162 30 ("Blue" "name:" "Color")}
        {Lisp-Entry "render" method #f 166 20 166 26 ("draw" "draw-children" "Outline-View" "is-not?" "or" "draw-content" "draw-background" "when" "editor" "get-show-content?" "content?" "let" "default-render" "define" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface" "drawing")}
        {Lisp-Entry "draw" method #f 179 26 179 30 ("draw-showed-property" "draw-handles" "frame-rect" "draw-frame" "outside" "eq?" "get-show-frames?" "2" "min" "Selected-Colors" "element" "Unselected-Color" "key:" "find" "rank" "frame-color" "get-surrogate" "outer-client" "view" "outer-component" "draw-surrogate-frame" "get-bounds" "fill-rect" "Unfocused-Background" "Focused-Background" "selection-focused?" "if" "color" "editing?" "not" "memq" "client" "neq?" "and" "when" "draw-surrogate-background" "define" "get-selection" "selection" "editor" "get-reference" "reference" "let" "surface")}
        {Lisp-Entry "draw-showed-property" method #f 217 18 217 38 ("2" "get-v" "3" "get-h" "+" "draw-text" "Dark-Red" "set-text-color" "Label" "Font" "set-font" "White" "-1" "inflate-rect" "fill-rect" "Black" "name:" "Color" "frame-rect" "position/size->rect" "rect" "get-size" "center" "pos" "4" "7" "Dimension" "nu+" "size" "get-text-extent" "extent" "->string" "string" "read-property" "value" "let*" "client" "class-of" "category-field" "property?" "and" "when" "editor" "get-showed-property" "property" "let" "surface")}
        {Lisp-Entry "draw-selected" method #f 233 26 233 39 ("solid" "'solid" "Black" "name:" "Color" "line" "selected-color" "set-color" "alternate" "'alternate" "set-style" "get-bottom" "b" "1" "get-right" "-" "r" "get-top" "t" "get-left" "l" "get-bounds" "client" "editor" "acquire" "outside" "let" "rank" "surface")}
        {Lisp-Entry "border-region" method #f 249 11 249 24 ("2" "Rect" "insets:" "outer-client" "border-region")}
        {Lisp-Entry "invalidate-border" method #f 253 20 253 37 ("2" "Rect" "insets:" "outer-client" "invalidate-border")}
        {Lisp-Entry "redraw-border" method #f 257 20 257 33 ("2" "Rect" "insets:" "outer-client" "redraw-border")}
        {Lisp-Entry "selected-color" method #f 261 18 261 32 ("1" "length" "-" "min" "element" "Selected-Colors" "colors" "let" "rank")}
        {Lisp-Entry "on-focus-gain" method #f 271 11 271 24 ("focus-gain" "evt")}
        {Lisp-Entry "focus-gain" method #f 275 29 275 39 ("invalidate-selection")}
        {Lisp-Entry "on-focus-lose" method #f 279 11 279 24 ("focus-lose" "evt")}
        {Lisp-Entry "focus-lose" method #f 283 29 283 39 ("invalidate-selection")}
        {Lisp-Entry "focus-actions" method #f 287 20 287 33 ("client" "focus-actions" "view-surrogate" "'view-surrogate" "find-actions" "cons")}
        {Lisp-Entry "selection-focused?" method #f 292 11 292 29 ("editor" "get-selection" "has-focus?" "View" "is?" "and" "component" "lambda" "some?")}
        {Lisp-Entry "on-cursor-update" method #f 304 11 304 27 ("get-position" "cursor-update" "evt")}
        {Lisp-Entry "cursor-update" method #f 308 26 308 39 (":opened-hand" "move-client?" "get-resize-cursor" "cond" "get-size" "acquire" "find-resize-part" "size-client?" "current-part" "either" "part" ":arrow" "get-client" "eq?" "if" "client" "get-surrogate" "outer-client" "outer" "else" ":cross" "set-cursor" "rect" "case" "editor" "get-mode" "mode" "let" "pos")}
        {Lisp-Entry "Drag-Tolerance" definition #f 331 14 331 28 ("3")}
        {Lisp-Entry "on-mouse-down" method #f 335 11 335 24 ("rect" "acquire" "start-rubber-band" "select-in-editor" "select?" "when" "mouse-down" "get-client" "client" "neq?" "if" "select" "case" "get-position" "pos" "editor" "get-mode" "mode" "let" "evt")}
        {Lisp-Entry "on-mouse-up" method #f 349 11 349 22 ("mouse-up" "get-position" "pos" "let" "evt")}
        {Lisp-Entry "on-drag-move" method #f 354 11 354 23 ("drag-move" "client" "get-client" "acquire" "process-rubber-band" "editor" "get-rubber-band?" "if" "get-position" "pos" "let" "evt")}
        {Lisp-Entry "on-drag-up" method #f 361 11 361 21 ("drag-up" "client" "get-client" "acquire" "end-rubber-band" "editor" "get-rubber-band?" "if" "get-position" "pos" "let" "evt")}
        {Lisp-Entry "on-double-click" method #f 368 11 368 26 ("get-position" "double-click" "evt")}
        {Lisp-Entry "on-current-drop" method #f 372 11 372 26 ("get-drag-drop" "get-position" "current-drop" "evt")}
        {Lisp-Entry "on-receive-drop" method #f 376 11 376 26 ("get-drag-drop" "get-sender" "get-position" "receive-drop" "evt")}
        {Lisp-Entry "on-context-menu" method #f 380 11 380 26 ("get-position" "context-menu" "evt")}
        {Lisp-Entry "select?" method #f 384 29 384 36 ()}
        {Lisp-Entry "select-in-editor" method #f 388 26 388 42 ("client" "editor" "select")}
        {Lisp-Entry "move-client?" method #f 392 29 392 41 ()}
        {Lisp-Entry "size-client?" method #f 396 29 396 41 ()}
        {Lisp-Entry "mouse-down" method #f 400 26 400 36 ("acquire-focus" "old-position" "to-desktop" "get-size" "acquire" "find-resize-part" "size-client?" "current-part" "processing?" "get-selection" "and" "outer-client" "outer" "let" "acquire-capture" "start-position" "dragging?" "set!" "editor" "get-client" "eq?" "edit-client" "begin" "alt-down?" "if" "select-in-editor" "select?" "when" "select" "get-surrogate" "move-client?" "client" "lambda" "some?" "selection" "some-movable?" "define" "pos")}
        {Lisp-Entry "mouse-up" method #f 432 26 432 34 ("pos")}
        {Lisp-Entry "drag-move" method #f 436 26 436 35 ("get-player" "update-window" "size-client" "move-client" "15" "and" "get-height" "nh" "get-width" "+" "nw" "dheight" "dwidth" "lambda" "resize-client" "NoModifiers" "move-selection" "if" "get-v" "dv" "get-h" "dh" "old-position" "from-desktop" "old-pos" "let*" "set!" "Drag-Tolerance" "distance" ">=" "not" "current-part" "or" "when" "to-desktop" "desktop-pos" "processing?" "client" "scroll" "start-position" "nu-" "delta" "let" "dragging?" "cond" "pos")}
        {Lisp-Entry "drag-up" method #f 463 26 463 33 ("processing?" "current-part" "set!" "release-capture" "dragging?" "cond" "position" "'position" "size" "'size" "set-property" "minimum-size:" "fit-within" "new-size" "new-position" "receive" "editor" "get-designer" "designer" "get-parent" "get-size" "outer" "get-rect" "rect" "when" "client" "minimal-size" "min-size" "let" "verify-position/size" "define" "pos")}
        {Lisp-Entry "double-click" method #f 486 26 486 38 ("edit-default-property" "pos")}
        {Lisp-Entry "current-drop" method #f 490 26 490 38 ("client" "view:" "Drop-Target" "new" "drag-drop" "pos")}
        {Lisp-Entry "receive-drop" method #f 494 26 494 38 ("set-showed-property" "editor" "get-showed-property" "eq?" "if" "field-name" "name" "get-property" "property" "set-selection" "Value-Row" "get-row" "row" "get-source" "source" "let*" "Properties-Tree" "get-class" "add-new" "Toolbox-Model" "is?" "when" "selected-component" "component" "let" "Toolbox-Tree" "typecase" "drag-drop" "sender" "pos")}
        {Lisp-Entry "add-new" method #f 514 18 514 25 ("focus?:" "Properties-Manager" "select-palette" "get-default-property" "set-name" "presentation->name" "name" "get-children" "request-component-presentation" "presentation" "shift-down?" "get-new-requests-name?" "xor" "when" "self" "origin:" "list" "set-selection" "position:" "add-view" "editor" "get-designer" "visible?:" "client" "parent:" "new" "child" "designer" "'designer" "get-preferences" "preferences" "let" "centered?" "centered?:" "pos" "model")}
        {Lisp-Entry "context-menu" method #f 529 26 529 38 ("track-popup-menu" "layout-menu" "update-context-menu" "get-context-menu" "menu" "let" "client" "acquire-focus" "select-in-editor" "select?" "when" "pos")}
        {Lisp-Entry "get-context-menu" method #f 541 26 541 42 ("centered?:" "0" "Point" "add-new" "model" "lambda" "update-component-menu" "get-parent" "component-addable-classes" "else" "Component" "is-not?" "not" "cond" "car" "component" "addable-classes" "define" "context-menu-class" "new" "menu" "get-selection" "components" "let")}
        {Lisp-Entry "context-menu-class" method #f 560 26 560 44 ("Surrogate-Menu")}
        {Lisp-Entry "update-context-menu" method #f 564 26 564 45 ("menu")}
        {Lisp-Entry "move-client" method #f 573 11 573 22 ("get-v" "get-h" "+" "Point" "new" "position:" "safe-set-property" "get-position" "pos" "move-client?" "client" "get-surrogate" "outer-client" "outer" "get-designer" "designer" "editor" "get-selection" "selection" "let" "0" "/=" "or" "when" "dv" "dh")}
        {Lisp-Entry "size-client" method #f 583 11 583 22 ("update-scrollbars" "get-reference" "client" "eq?" "invalidate-region" "size:" "editor" "get-designer" "safe-set-property" "border-region" "region" "with-closed" "get-height" "get-width" "+" "Dimension" "new" "new-size" "get-size" "size" "outer-client" "outer" "let*" "0" "/=" "or" "when" "dheight" "dwidth")}
        {Lisp-Entry "edit-client" method #f 597 29 597 40 ("client" "editor" "edit-component")}
        {Lisp-Entry "on-key-press" method #f 606 11 606 23 ("get-key" "key-press" "evt")}
        {Lisp-Entry "key-press" method #f 610 29 610 38 ("key")}
        {Lisp-Entry "on-arrow-press" method #f 614 11 614 25 ("down" "1" "right" "up" "0" "-1" "move-selection" "left" "direction:" "get-property" "case" "get-modifiers" "modifiers" "let" "evt")}
        {Lisp-Entry "on-backspace-press" method #f 623 11 623 29 ("get-key" "backspace-press" "evt")}
        {Lisp-Entry "backspace-press" method #f 627 29 627 44 ("editor" "delete-selection" "key")}
        {Lisp-Entry "on-return-press" method #f 631 11 631 26 ("get-key" "return-press" "evt")}
        {Lisp-Entry "return-press" method #f 635 29 635 41 ("edit-default-property" "key")}
        {Lisp-Entry "move-selection" method #f 644 11 644 25 ("car" "list" "*" "get-surrogate" "move-client" "view" "lambda" "for-each" "get-selection" "selection" "quantum" "and" "single?" "control-key?" "control?" "shift-key?" "let*" "1" "8" "if" "shift?" "move-quantum" "define" "modifiers" "dv" "dh")}
        {Lisp-Entry "save-form" method #f 665 18 665 27 ("save" "when" "get-selection" "selection" "let")}
        {Lisp-Entry "editing?" method #f 676 29 676 37 ()}
        {Lisp-Entry "can-undo?" method #f 685 26 685 35 ()}
        {Lisp-Entry "can-redo?" method #f 689 26 689 35 ()}
        {Lisp-Entry "can-cut?" method #f 693 26 693 34 ("client" "can-cut-component?")}
        {Lisp-Entry "can-copy?" method #f 697 26 697 35 ("client" "can-copy-component?")}
        {Lisp-Entry "can-paste?" method #f 701 26 701 36 ("client" "can-paste-component?")}
        {Lisp-Entry "can-paste-properties?" method #f 705 26 705 47 ("client" "can-paste-properties-component?")}
        {Lisp-Entry "can-delete?" method #f 709 26 709 37 ("client" "can-delete-component?")}
        {Lisp-Entry "can-rename?" method #f 713 26 713 37 ("client" "can-rename-component?")}
        {Lisp-Entry "can-select-all?" method #f 717 26 717 41 ("client" "can-select-all-component?")}
        {Lisp-Entry "undo" method #f 721 26 721 30 ()}
        {Lisp-Entry "redo" method #f 725 26 725 30 ()}
        {Lisp-Entry "cut-selection" method #f 729 26 729 39 ("list" "if" "set-selection" "cut-components" "components-parent" "parent" "editor" "get-designer" "designer" "get-selection" "selection" "let")}
        {Lisp-Entry "copy-selection" method #f 737 26 737 40 ("copy-components" "editor" "get-designer" "designer" "get-selection" "selection" "let")}
        {Lisp-Entry "paste-clipboard" method #f 743 26 743 41 ("set-selection" "0" "Point" "position" "'position" "set-property" "view" "lambda" "for-each" "paste-clipboard" "views" "car" "parent" "editor" "get-designer" "designer" "let*" "bell" "1" "length" "/=" "if" "get-selection" "selection" "let")}
        {Lisp-Entry "paste-properties" method #f 756 26 756 42 ()}
        {Lisp-Entry "delete-selection" method #f 760 26 760 42 ("editor" "delete-selection")}
        {Lisp-Entry "rename-selection" method #f 764 26 764 42 ()}
        {Lisp-Entry "select-all" method #f 768 26 768 36 ("client" "get-children" "View" "collect-type" "set-selection" "rest")}
        {Lisp-Entry "select" method #f 777 20 777 26 ("invalidate-view" "invalidate-border" "acquire-focus" "client" "bring-to-front" "0" "=" "when" "focus?" "rank")}
        {Lisp-Entry "unselect" method #f 790 20 790 28 ("client" "invalidate-view" "invalidate-border")}
        {Lisp-Entry "invalidate-selection" method #f 795 11 795 31 ("editor" "invalidate-selection")}
        {Lisp-Entry "edit-default-property" method #f 804 11 804 32 ("get-tree" "select-property" "focus?:" "Properties-Manager" "select-palette" "manager" "bell" "not" "if" "client" "get-default-property" "default-property" "let")}}
      {Lisp-Entry "Surrogate-Menu" class #f 817 7 817 21 ("properties" "end-close/rename" "select-all" "rename-selected" "delete-selection" "end-layer" "send-to-back" "view-surrogate" "bring-to-front" "end-edition" "paste-properties" "paste" "copy" "view" "Action" "action:" "cut" "end-add-group" "add-menu" "Image-Resource" "icon:" "title:" "add-item" "name:" "Context-Menu")}}})
"View-Surrogate-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "surrogate" "View-Surrogate-Actions.jazz"} 1260983704
    {Lisp-Entry "jazz.designer.surrogate.View-Surrogate-Actions" module #f 37 18 37 64 ("jazz")
      {Lisp-Entry "View-Surrogate-Actions" class #f 46 20 46 42 ("on-properties" "properties" ":control" "on-select-all-children" "select-all" "F2" "Shortcut" "shortcut:" "on-rename-selected" "rename-selected" "on-delete-selection" "delete-selection" "on-send-to-back" "send-to-back" "on-bring-to-front" ":focus-guest" "Event-Handler" "action-handler:" "bring-to-front" "name:" "Actions")}}})
"_descriptor"
 ({Lisp-File-Entry {File jazz.designer "src" "jazz" "designer" "descriptor" "_descriptor.jazz"} 1264605818
    {Lisp-Entry "jazz.designer.descriptor" module #f 37 8 37 32 ("jazz")
      {Lisp-Entry "Component-Meta-Descriptor" definition #f 50 19 50 44 ("name-unicity?" "name-mandatory?" "name-prohibited?" "image" "title" "name:" "name-unicity?:" "name-mandatory?:" "Image-Resource" "image:" "title:" "form>>")}
      {Lisp-Entry "Properties-Meta-Descriptor" definition #f 66 19 66 45 ("name-unicity?:" "name-mandatory?:" "Image-Resource" "image:" "title:" "form>>")}
      {Lisp-Entry "Property-Meta-Descriptor" definition #f 76 19 76 43 ("title" "name:" "name-unicity?:" "name-mandatory?:" "Image-Resource" "image:" "title:" "form>>")}
      {Lisp-Entry "Children-Meta-Descriptor" definition #f 88 19 88 43 ("title:" "form>>")}}})
"_designer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "_designer.jazz"} 1259356807
    {Lisp-Entry "jazz.designer" module #f 37 8 37 21 ("jazz")}})
"_menu"
 ({Lisp-File-Entry {File jazz.designer "src" "jazz" "designer" "menu" "_menu.jazz"} 1259788340
    {Lisp-Entry "jazz.designer.menu" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "update-component-menu" definition #f 46 21 46 42 ("layout-menu" "cleanup-separators" "properties" "'properties" "rename-selected" "'rename-selected" "delete-selection" "'delete-selection" "'paste-properties" "'paste" "'copy" "'cut" "locate" "end-add-group" "'end-add-group" "set-before" "set-parent" ":control" "Shortcut" "set-shortcut" "get-title" "set-title" "get-icon" "set-icon" "unique" "when" "set!" "set-visible?" "begin" "null?" "get-children" "collect-type" "children" "=" "'add-item" "add-item" "'add-menu" "locate-component" "empty-add?" "can-view-properties?" "Component" "is?" "and" "can-properties?" "rename" "components-tree" "can-rename?" "delete" "can-delete?" "paste-properties" "can-paste-properties?" "paste" "can-paste?" "copy" "can-copy?" "cut" "view" "Action" "get-action-enabled?" "can-cut?" "car" "1" ">=" "essay" "component" "length" "count" "let*" "evt" "execute:" "Event-Handler" "action-handler:" "title:" "icon:" "Label-Item" "get-class-presentation" "localize" "format" "title" "get-class-image" "icon" "let" "parent:" "Separator-Item" "new" "not" "if" "class" "for-each" "lambda" "with-update-locked" "add-menu" "add-components" "define" "add" "classes" "components" "menu")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.designer" "src" "jazz" "designer" "autoload.jazz"} 1259788340
    {Lisp-Entry "jazz.designer.autoload" module #f 37 18 37 40 ("jazz")}})
"view"
 ({Lisp-File-Entry {File jazz.designer "src" "jazz" "designer" "view.jazz"} 1260287915
    {Lisp-Entry "jazz.designer.view" module #f 37 8 37 26 ("jazz")
      {Lisp-Entry "request-component-presentation" definition #f 53 21 53 51 ("unicity-domain:" "not" "accepts-empty?:" "prefix:" "french:" "format" "english:" "Locales" "new" "title:" "request-string" "presentation" "get-class-presentation" "localize" "pres" "equal?" "test:" "get-presentation-property" "map" "remove" "essay" "unicity-domain" "get-name-unicity?" "name-unicity?" "get-name-mandatory?" "name-mandatory?" "let*" "get-name-prohibited?" "if" "validator" "validator:" "initial-value" "initial-value:" "brothers" "class")}
      {Lisp-Entry "component-addable-classes" definition #f 64 21 64 46 ("cons" "set!" "not" "memq?" "and" "when" "class-of" "model" "classes" "get-addable-classes" "essay" "parent-classes" "let" "parent" "component")}
      {Lisp-Entry "*view-editors*" definition #f 80 12 80 26 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-view-editor" definition #f 83 21 83 36 ("*view-editors*" "table-ref" "view")}
      {Lisp-Entry "set-view-editor" definition #f 86 21 86 36 ("*view-editors*" "table-set!" "editor" "view")}
      {Lisp-Entry "view-editor-client" definition #f 90 13 90 31 ("get-guest" "else" "typecase" "guest" "determine-client" "define" "view")}
      {Lisp-Entry "design-client" definition #f 99 20 99 33 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "highlight-root-only?:" "highlight:" "design-view" "pos" "view" "lambda" "click:" "pick-figure")}
      {Lisp-Entry "design-mouse-client" definition #f 109 20 109 39 ("mouse-view" "design-view")}
      {Lisp-Entry "design-view" definition #f 113 13 113 24 ("client:" "View-Editor" "new-frame" "class-of" "new" "designing?" "parameterize" "bell" "not" "if" "view-editor-client" "client" "let" "view")}
      {Lisp-Entry "design-view" definition #f 122 13 122 24 ("close" "client:" "host-visible?:" "View-Editor" "new-frame" "get-guest" "set-view-editor" "get-view-editor" "editor" "bell" "not" "if" "view-editor-client" "client" "let" "view")}
      {Lisp-Entry "save-mouse-client" definition #f 133 20 133 37 ("save" "lambda" ":wait" "with-cursor" "get-view-editor" "editor" "bell" "not" "if" "mouse-view" "view-editor-client" "client" "let")}
      {Lisp-Entry "with-safe-design" definition #f 150 20 150 36 ("Designer-Error" "is?" "object?" "and" "obj" "lambda" "with-catched-exception" "thunk")}}})
