"Array-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Array-Tester.jazz"} 1257476299
    {Lisp-Entry "jazz.validate.suite.Array-Tester" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Array-Tester" class #f 45 7 45 19 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-array" "invoke")}
        {Lisp-Entry "array" definition #f 62 14 62 19 ("10" "int" "new-array")}
        {Lisp-Entry "test-array" method #f 66 11 66 21 ()}}}})
"Binding-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Binding-Tester.jazz"} 1257476299
    {Lisp-Entry "jazz.validate.suite.Binding-Tester" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Binding-Tester" class #f 45 7 45 21 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-function" "test-bind" "test-with" "test-letrec" "test-let" "invoke")}
        {Lisp-Entry "test-let" method #f 65 11 65 19 ("self" "code-walk" "error?" "begin" "cons" "lst" "reverse" "equal?" "5" "set!" "8" "3" "y" "4" "+" "2" "x" "let" "=" "rpt" "validate")}
        {Lisp-Entry "test-letrec" method #f 103 11 103 22 ("3" "+" "x" "error?" "begin" "120" "5" "-" "*" "1" "0" "if" "n" "lambda" "fact" "letrec" "=" "rpt" "validate")}
        {Lisp-Entry "test-with" method #f 125 11 125 20 ()}
        {Lisp-Entry "test-bind" method #f 134 11 134 20 ("error?" "begin" "6" "+" "3" "2" "1" "list" "z" "y" "x" "bind" "=" "rpt" "validate")}
        {Lisp-Entry "test-function" method #f 148 11 148 24 ("reverse" "cons" "for-each" "list" "25" "16" "9" "*" "map" "set!" "let" "4" "1" "equal?" "5" "3" "+" "y" "x" "2" "lambda" "=" "rpt" "validate")}}}})
"Boolean-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Boolean-Tester.jazz"} 1257476302
    {Lisp-Entry "jazz.validate.suite.Boolean-Tester" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Boolean-Tester" class #f 45 7 45 21 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-boolean" "invoke")}
        {Lisp-Entry "test-boolean" method #f 61 11 61 23 ("not" "nu<?" "ci=?" "nu/=?" "nu=?" "rpt" "validate")}}}})
"Branch-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Branch-Tester.jazz"} 1257476304
    {Lisp-Entry "jazz.validate.suite.Branch-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Branch-Tester" class #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ()}}}})
"Catalog-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Catalog-Tester.jazz"} 1257476319
    {Lisp-Entry "jazz.validate.suite.Catalog-Tester" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Catalog-Tester" class #f 45 7 45 21 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-catalog" "invoke")}
        {Lisp-Entry "test-catalog" method #f 61 11 61 23 ()}}}})
"Char-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Char-Tester.jazz"} 1257476324
    {Lisp-Entry "jazz.validate.suite.Char-Tester" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Char-Tester" class #f 45 7 45 18 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-char" "invoke")}
        {Lisp-Entry "test-char" method #f 61 11 61 20 ()}}}})
"Collector-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Collector-Tester.jazz"} 1257476330
    {Lisp-Entry "jazz.validate.suite.Collector-Tester" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Collector-Tester" class #f 45 7 45 23 ("test-collector" "invoke" "test" "method" "title:" "Tester")}}})
"Component-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Component-Tester.jazz"} 1257476347
    {Lisp-Entry "jazz.validate.suite.Component-Tester" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Component-Tester" class #f 45 7 45 23 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ()}}}})
"Control-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Control-Tester.jazz"} 1257476358
    {Lisp-Entry "jazz.validate.suite.Control-Tester" module #f 37 18 37 52 ("jazz")
      {Lisp-Entry "Control-Tester" class #f 45 7 45 21 ("test-control" "test-return" "test-unwind-protect" "test-catch" "invoke" "test" "method" "title:" "Tester")}
      {Lisp-Entry "Foo" class #f 102 7 102 10 ("Signal")}}})
"Core-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Core-Project.jazz"} 1257476359
    {Lisp-Entry "project.jazz.Core-Project" module #f 37 8 37 33 ("Core-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Core-Project" class #f 44 7 44 19 ("project.jazz.Core-Project" "unit-name:" "core" "product:" "title:" "Jazz-Project")}}})
"Debugger-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Debugger-Tester.jazz"} 1257476375
    {Lisp-Entry "jazz.validate.suite.Debugger-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Debugger-Tester" class #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-assert" "test-error?" "invoke")}
        {Lisp-Entry "test-error?" method #f 62 11 62 22 ()}
        {Lisp-Entry "test-assert" method #f 71 11 71 22 ()}}}})
"Designer-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Designer-Tester.jazz"} 1257476381
    {Lisp-Entry "jazz.validate.suite.Designer-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Designer-Tester" class #f 45 7 45 22 ("test-path" "test-reference" "invoke" "test" "method" "title:" "Tester")}}})
"Dialect-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Dialect-Project.jazz"} 1257476383
    {Lisp-Entry "project.jazz.Dialect-Project" module #f 37 8 37 36 ("Dialect-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Dialect-Project" class #f 44 7 44 22 ("project.jazz.Dialect-Project" "unit-name:" "jazz" "product:" "title:" "Jazz-Project")}}})
"Enumeration-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Enumeration-Tester.jazz"} 1257476404
    {Lisp-Entry "jazz.validate.suite.Enumeration-Tester" module #f 37 18 37 56 ("jazz")
      {Lisp-Entry "Enumeration-Tester" class #f 45 7 45 25 ("test-enumeration" "invoke" "test" "method" "title:" "Tester")}}})
"Error-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Error-Tester.jazz"} 1257476404
    {Lisp-Entry "jazz.validate.suite.Error-Tester" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Error-Tester" class #f 45 7 45 19 ("test-error" "invoke" "test" "method" "title:" "Tester")}}})
"Explorer-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Explorer-Tester.jazz"} 1257476411
    {Lisp-Entry "jazz.validate.suite.Explorer-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Explorer-Tester" class #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-sequence-explorer" "invoke")}
        {Lisp-Entry "test-sequence-explorer" method #f 61 11 61 33 ("backward" "'backward" "direction:" "String" "type:" "2" "start:" "c" "b" "a" "Sequence-Explorer" "new" "gather" "equal?" "rpt" "validate")}}}})
"Form-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Form-Tester.jazz"} 1257476419
    {Lisp-Entry "jazz.validate.suite.Form-Tester" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "Form-Tester" class #f 46 7 46 18 ("title:" "Tester")
        {Lisp-Entry "test-form" method #f 53 11 53 20 ("test-fields" "invoke")}
        {Lisp-Entry "test-fields" method #f 62 11 62 22 ("1" "get-children" "length" "2" "a" "'a" "category-field" "list" "get-properties" "get-name" "'X" "get-model-name" "=" "rpt" "validate" "get-class-form" "form" "let" "X" "new")}}
      {Lisp-Entry "F" class #f 77 7 77 8 ("2" "f1:" "set-f1" "get-f1" "initialize" "Component")
        {Lisp-Entry "f1" property #f 80 12 80 14 ()}
        {Lisp-Entry "get-f1" method #f 87 11 87 17 ("f1")}
        {Lisp-Entry "set-f1" method #f 88 11 88 17 ("f1" "set!" "value")}}
      {Lisp-Entry "X" class #f 91 7 91 8 ("5" "fc" "4" "fb" "f1:" "fa" "name:" "3" "x2:" "2" "x1:" "set-x2" "get-x2" "set-x1" "get-x1" "initialize" "Component")
        {Lisp-Entry "x1" property #f 94 12 94 14 ()}
        {Lisp-Entry "x2" property #f 95 12 95 14 ()}
        {Lisp-Entry "get-x1" method #f 105 11 105 17 ("x1")}
        {Lisp-Entry "set-x1" method #f 106 11 106 17 ("x1" "set!" "value")}
        {Lisp-Entry "get-x2" method #f 109 11 109 17 ("x2")}
        {Lisp-Entry "set-x2" method #f 110 11 110 17 ("x2" "set!" "value")}}
      {Lisp-Entry "Y" class #f 113 7 113 8 ("5" "x2:" "X")}}})
"Format-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Format-Tester.jazz"} 1257476419
    {Lisp-Entry "jazz.validate.suite.Format-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Format-Tester" class #f 46 7 46 20 ("title:" "Tester")
        {Lisp-Entry "test" method #f 53 20 53 24 ("test-format" "invoke")}
        {Lisp-Entry "test-format" method #f 62 11 62 22 ("error?" ":right" "5" "12345" "hello" "'hello" "yyy" "'yyy" "string" "3" ":b" ":a" "2.3" "#b1010" "#xA" "-1" ":reader" ":human" "2" "format" "equal?" "rpt" "validate")}}}})
"Function-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Function-Tester.jazz"} 1257476427
    {Lisp-Entry "jazz.validate.suite.Function-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Function-Tester" class #f 45 7 45 22 ("test-recursivity" "test-function" "test-rest-binding" "test-outer-binding" "test-indefinite-extent" "test-dynamic-closure" "invoke" "test" "method" "title:" "Tester")}}})
"Iterator-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Iterator-Tester.jazz"} 1257476465
    {Lisp-Entry "jazz.validate.suite.Iterator-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Iterator-Tester" class #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ()}}}})
"Jazz-Manifest"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Jazz-Manifest.jazz"} 1257476468
    {Lisp-Entry "project.jazz.Jazz-Manifest" module #f 37 8 37 34 ("Jazz-Manifest" "register-autoclass" "jazz")
      {Lisp-Entry "Jazz-Manifest" class #f 45 7 45 20 ("Test-Project" "Platform-Project" "Jazz-Manifest" "Dialect-Project" "Core-Project" "_validate" "Test-Table" "Test-Model" "Test-Architecture" "Vector-Tester" "Variable-Tester" "Values-Tester" "Thread-Tester" "Table-Tester" "Syntax-Tester" "Symbol-Tester" "Structure-Tester" "String-Tester" "Sequence-Tester" "Scheme-Tester" "Reader-Tester" "Pathname-Tester" "Object-Tester" "Number-Tester" "List-Tester" "Iterator-Tester" "Function-Tester" "Format-Tester" "Form-Tester" "Explorer-Tester" "Error-Tester" "Enumeration-Tester" "Designer-Tester" "Debugger-Tester" "Control-Tester" "Component-Tester" "Collector-Tester" "Char-Tester" "Catalog-Tester" "Branch-Tester" "Boolean-Tester" "Binding-Tester" "Array-Tester" "development" "literals" "run" "c" "Y" "X" "cffi" "b" "autoload" "a" "_test" "_walker" "scheme" "core" "homogeneous" "functional" "parse" "object" "geometry" "format" "exception" "debug" "_language" "name:" "jazz" "source:" "Directory" "directory:" "project.jazz.Test-Project" "project.jazz.Platform-Project" "project.jazz.Dialect-Project" "project.jazz.Core-Project" "tag-unit:" "project.jazz.Jazz-Manifest" "unit-name:" "Jazz" "File" "documentation:" "include-extensions:" ":jazz" "catalog-extensions:" "catalog?:" "title:" "Project")}}})
"List-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "List-Tester.jazz"} 1257476490
    {Lisp-Entry "jazz.validate.suite.List-Tester" module #f 37 18 37 49 ("jazz")
      {Lisp-Entry "List-Tester" class #f 45 7 45 18 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-list" "invoke")}
        {Lisp-Entry "test-list" method #f 61 11 61 20 ("'b" "set-element!" "0" "element" "car" "error?" "begin" "second" "key:" "4" "8" "5" "<" "sort" "ci=?" "test:" "associate" "cdr" "=" "assoc" "eq?" "x" "let" "f" "e" "d" "append" "null?" "reverse" "3" "2" "1" "list" "equal?" "not" "c" "b" "a" "pair?" "rpt" "validate")}}}})
"Number-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Number-Tester.jazz"} 1257476508
    {Lisp-Entry "jazz.validate.suite.Number-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Number-Tester" class #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-bit" "test-number" "invoke")}
        {Lisp-Entry "test-number" method #f 62 11 62 22 ("error?" "begin" "min" "8" "7" "max" "6" "<" "/=" "not" "24" "12" "0.25" "/" "60" "*" "4" "6.8" "3.2" "10" "-3.5" "3.5" "-2" "2" "-" "3" "1" "5" "+" "0" "=" "rpt" "validate")}
        {Lisp-Entry "test-bit" method #f 121 11 121 19 ("7" "bitwise-ior" "2" "14" "6" "0" "4" "1" "5" "bitwise-and" "=" "rpt" "validate")}}}})
"Object-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Object-Tester.jazz"} 1257476508
    {Lisp-Entry "jazz.validate.suite.Object-Tester" module #f 37 18 37 51 ("7" "12" "set!" "yiyi" "bar~self" "list" "11" "let" "yuyu" "X2" "tata" "*" "x" "tutu" "toto" "method" "5" "initialize" "bar" "slot" "15" "goo" "10" "foo" "virtual" "public" "definition" "Object" "extends" "X" "class" "jazz")
      {Lisp-Entry "Object-Tester" class #f 45 7 45 20 ("test-meta" "test-inner" "test-interface" "test-inheritance" "test-reference" "test-super" "test-self" "test-slot" "test-definition" "invoke" "test" "method" "title:" "Tester")}}})
"Pathname-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Pathname-Tester.jazz"} 1257476523
    {Lisp-Entry "jazz.validate.suite.Pathname-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Pathname-Tester" class #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-pathname" "invoke")}
        {Lisp-Entry "test-pathname" method #f 61 11 61 24 ()}}}})
"Platform-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Platform-Project.jazz"} 1257476527
    {Lisp-Entry "project.jazz.Platform-Project" module #f 37 8 37 37 ("Platform-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Platform-Project" class #f 44 7 44 23 ("project.jazz.Platform-Project" "unit-name:" "jazz.platform" "product:" "title:" "Jazz-Project")}}})
"Reader-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Reader-Tester.jazz"} 1257476550
    {Lisp-Entry "jazz.validate.suite.Reader-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Reader-Tester" class #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-reader" "invoke")}
        {Lisp-Entry "test-reader" method #f 61 11 61 22 ("189" "#xbd" "#xBD" "16" "#x10" "=" "3" "2" "1" "equal?" "rpt" "validate")}}}})
"Scheme-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Scheme-Tester.jazz"} 1257476592
    {Lisp-Entry "jazz.validate.suite.Scheme-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Scheme-Tester" class #f 44 7 44 20 ("title:" "form" "Tester")}}})
"Sequence-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Sequence-Tester.jazz"} 1257476600
    {Lisp-Entry "jazz.validate.suite.Sequence-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Sequence-Tester" class #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-sequence" "invoke")}
        {Lisp-Entry "aaa" definition #f 61 14 61 17 ()}
        {Lisp-Entry "test-sequence" method #f 65 11 65 24 ("list" "aaa" "eq?" "replace-subseq!" "0" "insert!" "replace!" "fill!" "sequence?:" "'b" "'a" "substitute" "join" "split" "identity" "accumulate" "map" "search" "prefix?" "mismatch" "String" "e" "d" "c" "b" "a" "subseq" "upper-case?" "collect-if" "every?" "not" "9" "some?" "15" "start:" "reversed?:" "numeric?" "cadr" "odd?" "find-if" "'denise" "find" "car" "key:" "'mark" "denise" "mark" "william" "find-in" "8" "7" "6" "even?" "count-if" "4" "5" "2" "1" "3" "count" "equal?" "rpt" "validate")}}}})
"String-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "String-Tester.jazz"} 1257476615
    {Lisp-Entry "jazz.validate.suite.String-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "String-Tester" class #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-wi=" "test-string" "invoke")}
        {Lisp-Entry "string" definition #f 63 14 63 20 ()}
        {Lisp-Entry "test-string" method #f 67 11 67 22 ("4" "set-element!" "1" "string" "element" "nu=?" "rpt" "validate")}
        {Lisp-Entry "ansistring" definition #f 80 14 80 24 ("Ansi-String" "coerce")}
        {Lisp-Entry "test-ansi-string" method #f 85 11 85 27 ("4" "set-element!" "1" "ansistring" "element" "nu=?" "rpt" "validate")}
        {Lisp-Entry "test-wi=" method #f 96 11 96 19 ("not" "wi=" "rpt" "validate")}}}})
"Structure-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Structure-Tester.jazz"} 1257476615
    {Lisp-Entry "jazz.validate.suite.Structure-Tester" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Structure-Tester" class #f 45 7 45 23 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-structure" "invoke")}
        {Lisp-Entry "test-structure" method #f 61 11 61 25 ()}}}})
"Symbol-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Symbol-Tester.jazz"} 1257476618
    {Lisp-Entry "jazz.validate.suite.Symbol-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Symbol-Tester" class #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-symbol" "invoke")}
        {Lisp-Entry "test-symbol" method #f 61 11 61 22 ()}}}})
"Syntax-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Syntax-Tester.jazz"} 1257476623
    {Lisp-Entry "jazz.validate.suite.Syntax-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Syntax-Tester" class #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-decrease!" "test-increase!" "test-set!" "test-either" "test-essay" "test-or" "test-and" "test-typecase" "test-ecase" "test-case" "test-cond" "test-prog1" "test-begin" "test-for" "test-until" "test-while" "test-unless" "test-when" "test-if" "test-quote" "invoke")}
        {Lisp-Entry "test-quote" method #f 80 11 80 21 ("self" "quote" "code-walk" "error?" "begin" "'c" "'b" "'a" "list" "c" "b" "a" "equal?" "rpt" "validate")}
        {Lisp-Entry "test-if" method #f 94 11 94 18 ("self" "if" "code-walk" "error?" "rpt" "validate" "begin")}
        {Lisp-Entry "test-when" method #f 106 11 106 20 ("self" "when" "code-walk" "error?" "rpt" "validate" "begin")}
        {Lisp-Entry "test-unless" method #f 117 11 117 22 ("3" "5" "2" "unless" "equal?" "50" "foo" "=" "rpt" "validate")}
        {Lisp-Entry "test-while" method #f 128 11 128 21 ()}
        {Lisp-Entry "test-until" method #f 137 11 137 21 ()}
        {Lisp-Entry "test-for" method #f 146 11 146 19 ()}
        {Lisp-Entry "test-begin" method #f 155 11 155 21 ()}
        {Lisp-Entry "test-prog1" method #f 164 11 164 21 ()}
        {Lisp-Entry "test-cond" method #f 173 11 173 20 ("9" "else" "8" "7" "5" "=" "3" "y" "2" "x" "not" "rpt" "validate" "cond" "v" "let")}
        {Lisp-Entry "test-case" method #f 190 11 190 20 ("9" "else" "8" "7" "5" "3" "=" "not" "rpt" "validate" "2" "case" "v" "let")}
        {Lisp-Entry "test-ecase" method #f 206 11 206 21 ("9" "else" "8" "7" "=" "3" "y" "x" "not" "rpt" "validate" "2" "ecase" "v" "let")}
        {Lisp-Entry "test-typecase" method #f 224 11 224 24 ("9" "else" "8" "Number" "7" "Symbol" "3" "=" "not" "rpt" "validate" "2" "typecase" "v" "let")}
        {Lisp-Entry "test-and" method #f 240 11 240 19 ("5" "3" "2" "and" "equal?" "rpt" "validate")}
        {Lisp-Entry "test-or" method #f 253 11 253 18 ("5" "3" "2" "+" "or" "equal?" "rpt" "validate")}
        {Lisp-Entry "test-essay" method #f 266 11 266 21 ("5" "3" "2" "essay" "equal?" "rpt" "validate")}
        {Lisp-Entry "test-either" method #f 276 11 276 22 ("5" "3" "2" "+" "either" "equal?" "rpt" "validate")}
        {Lisp-Entry "test-set!" method #f 287 11 287 20 ()}
        {Lisp-Entry "foo" method #f 296 11 296 14 ("5" "increase!" "10" "below" "from" "n" "for" "loop" "0" "total" "let")}
        {Lisp-Entry "test-increase!" method #f 303 11 303 25 ("50" "foo" "=" "rpt" "validate")}
        {Lisp-Entry "goo" method #f 312 11 312 14 ("5" "decrease!" "10" "to" "1" "from" "i" "for" "loop" "100" "total" "let" "n")}
        {Lisp-Entry "test-decrease!" method #f 319 11 319 25 ("50" "5" "goo" "=" "rpt" "validate")}}
      {Lisp-Entry "X" class #f 328 7 328 8 ("4" "initialize" "Object")
        {Lisp-Entry "counter" slot #f 331 8 331 15 ()}}}})
"Table-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Table-Tester.jazz"} 1257476625
    {Lisp-Entry "jazz.validate.suite.Table-Tester" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Table-Tester" class #f 45 7 45 19 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-growth" "test-table" "invoke")}
        {Lisp-Entry "table" definition #f 62 14 62 19 ("eq?" "test:" "make-table")}
        {Lisp-Entry "test-table" method #f 65 11 65 21 ("3" "5" "=" "goo" "'goo" "table-ref" "not" "rpt" "validate" "2" "foo" "'foo" "table" "table-set!")}
        {Lisp-Entry "small-table" definition #f 81 14 81 25 ("eq?" "test:" "make-table")}
        {Lisp-Entry "test-growth" method #f 84 11 84 22 ("5" "hoo" "'hoo" "3" "goo" "'goo" "2" "foo" "'foo" "small-table" "table-set!")}}}})
"Test-Architecture"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "support" "Test-Architecture.jazz"} 1257476628
    {Lisp-Entry "jazz.validate.support.Test-Architecture" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Test-Architecture" class #f 44 7 44 24 ("initialize" "Component")
        {Lisp-Entry "author" property #f 47 12 47 18 ()}
        {Lisp-Entry "get-author" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "set-author" accessor #f 47 43 47 51 ()}
        {Lisp-Entry "get-class-image" method #f 55 25 55 40 ("Bitmap-Resource")}
        {Lisp-Entry "get-class-presentation" method #f 59 25 59 47 ()}
        {Lisp-Entry "property-presentation" method #f 63 25 63 46 ("nextmethod" "else" "author" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" method #f 69 20 69 46 ("author" "name-info" "class-info")}
        {Lisp-Entry "get-addable-default-branch" method #f 73 20 73 46 ("Test-Model")}
        {Lisp-Entry "get-addable-classes" method #f 77 20 77 39 ("Test-Table" "list")}}}})
"Test-Model"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "support" "Test-Model.jazz"} 1257476629
    {Lisp-Entry "jazz.validate.support.Test-Model" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Test-Model" class #f 43 7 43 17 ("Branch")
        {Lisp-Entry "get-class-image" method #f 51 25 51 40 ("Bitmap-Resource")}
        {Lisp-Entry "get-class-presentation" method #f 55 25 55 47 ()}}}})
"Test-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Test-Project.jazz"} 1257476629
    {Lisp-Entry "project.jazz.Test-Project" module #f 37 8 37 33 ("Test-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Test-Project" class #f 44 7 44 19 ("project.jazz.Test-Project" "unit-name:" "test" "product:" "title:" "Jazz-Project")}}})
"Test-Table"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "support" "Test-Table.jazz"} 1257476629
    {Lisp-Entry "jazz.validate.support.Test-Table" module #f 37 18 37 50 ("jazz")
      {Lisp-Entry "Test-Table" class #f 44 7 44 17 ("5" "initialize" "Component")
        {Lisp-Entry "description" property #f 47 12 47 23 ()}
        {Lisp-Entry "get-description" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "set-description" accessor #f 47 48 47 56 ()}
        {Lisp-Entry "no" property #f 48 12 48 14 ()}
        {Lisp-Entry "get-no" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "set-no" accessor #f 48 48 48 56 ()}
        {Lisp-Entry "get-class-image" method #f 56 25 56 40 ("Bitmap-Resource")}
        {Lisp-Entry "get-class-presentation" method #f 60 25 60 47 ()}
        {Lisp-Entry "property-presentation" method #f 64 25 64 46 ("nextmethod" "else" "no" "description" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" method #f 71 20 71 46 ("no" "description" "name-info" "class-info")}
        {Lisp-Entry "get-row-instance" method #f 75 20 75 36 ("nextmethod" "else" "Integer-Row" "no" "nullable?:" "String-Row" "new" "description" "field-name" "case" "property")}}}})
"Thread-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Thread-Tester.jazz"} 1257476644
    {Lisp-Entry "jazz.validate.suite.Thread-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Thread-Tester" class #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-thread" "invoke")}
        {Lisp-Entry "test-thread" method #f 61 11 61 22 ()}}}})
"Values-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Values-Tester.jazz"} 1257476668
    {Lisp-Entry "jazz.validate.suite.Values-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Values-Tester" class #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-values" "invoke")}
        {Lisp-Entry "test-values" method #f 61 11 61 22 ()}}}})
"Variable-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Variable-Tester.jazz"} 1257476668
    {Lisp-Entry "jazz.validate.suite.Variable-Tester" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Variable-Tester" class #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-free?" "invoke")}
        {Lisp-Entry "test-free?" method #f 61 11 61 21 ()}}}})
"Vector-Tester"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "suite" "Vector-Tester.jazz"} 1257476669
    {Lisp-Entry "jazz.validate.suite.Vector-Tester" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Vector-Tester" class #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" method #f 52 20 52 24 ("test-vector" "invoke")}
        {Lisp-Entry "test-vector" method #f 61 11 61 22 ()}}}})
"X"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "X.jazz"} 1257478269
    {Lisp-Entry "jazz.test.X" module #f 0 8 0 19 ("jazz")
      {Lisp-Entry "X" class #f 3 7 3 8 ("Object")
        {Lisp-Entry "foo" method #f 6 19 6 22 ("X.foo" "'X.foo" "terminal")}}}})
"Y"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "Y.jazz"} 1257478269
    {Lisp-Entry "jazz.test.Y" module #f 0 8 0 19 ("jazz")
      {Lisp-Entry "Y" class #f 6 7 6 8 ("Object")
        {Lisp-Entry "foo" method #f 9 11 9 14 ("Y.foo" "'Y.foo" "terminal")}}}})
"_core"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "_core.scm"} 1257476704
    {Lisp-Entry "jazz.dialect.core" module #f 37 18 37 35 ("scheme")}})
"_dialect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "_dialect.scm"} 1257478471
    {Lisp-Entry "jazz.dialect" module #f 37 18 37 30 ("scheme")}})
"_jazz"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "_jazz.scm"} 1257476716
    {Lisp-Entry "jazz" module #f 37 8 37 12 ("scheme")}})
"_kernel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "kernel" "_kernel.scm"} 1257478471
    {Lisp-Entry "jazz.dialect.kernel" module #f 38 18 38 37 ("scheme")
      {Lisp-Entry "get-autoload" native #f 46 8 46 25 ()}
      {Lisp-Entry "autoload" native #f 47 8 47 21 ()}
      {Lisp-Entry "autoreload" native #f 48 8 48 23 ()}
      {Lisp-Entry "boolean" native #f 56 8 56 20 ()}
      {Lisp-Entry "box?" native #f 64 8 64 12 ()}
      {Lisp-Entry "box" native #f 65 8 65 11 ()}
      {Lisp-Entry "unbox" native #f 66 8 66 13 ()}
      {Lisp-Entry "set-box!" native #f 67 8 67 16 ()}
      {Lisp-Entry "compile-unit" native #f 75 8 75 25 ()}
      {Lisp-Entry "build-unit" native #f 76 8 76 23 ()}
      {Lisp-Entry "build-image" native #f 77 8 77 24 ()}
      {Lisp-Entry "for-each-subunit" native #f 78 8 78 29 ()}
      {Lisp-Entry "get-category-name" native #f 86 8 86 30 ()}
      {Lisp-Entry "get-category-descendants" native #f 87 8 87 37 ()}
      {Lisp-Entry "get-class-ascendant" native #f 88 8 88 32 ()}
      {Lisp-Entry "symbolic-char" native #f 96 8 96 26 ()}
      {Lisp-Entry "char-symbol" native #f 97 8 97 24 ()}
      {Lisp-Entry "continuation?" native #f 105 8 105 26 ()}
      {Lisp-Entry "continuation-capture" native #f 106 8 106 33 ()}
      {Lisp-Entry "continuation-graft" native #f 107 8 107 31 ()}
      {Lisp-Entry "continuation-return" native #f 108 8 108 32 ()}
      {Lisp-Entry "run-loop?" native #f 116 8 116 22 ()}
      {Lisp-Entry "terminal" native #f 117 8 117 21 ()}
      {Lisp-Entry "terminal-string" native #f 118 8 118 28 ()}
      {Lisp-Entry "terminal-port" native #f 119 8 119 26 ()}
      {Lisp-Entry "unimplemented" native #f 120 8 120 26 ()}
      {Lisp-Entry "dump-stack" native #f 121 8 121 23 ()}
      {Lisp-Entry "log-object" native #f 122 8 122 23 ()}
      {Lisp-Entry "log-string" native #f 123 8 123 23 ()}
      {Lisp-Entry "log-newline" native #f 124 8 124 24 ()}
      {Lisp-Entry "close-log" native #f 125 8 125 22 ()}
      {Lisp-Entry "inspect-object" native #f 126 8 126 27 ()}
      {Lisp-Entry "generate-proper-tail-calls" native #f 127 8 127 34 ()}
      {Lisp-Entry "?" native #f 139 8 139 9 ()}
      {Lisp-Entry "get-?" native #f 139 19 139 24 ()}
      {Lisp-Entry "set-?" native #f 139 34 139 39 ()}
      {Lisp-Entry "%" native #f 140 8 140 9 ()}
      {Lisp-Entry "get-%" native #f 140 19 140 24 ()}
      {Lisp-Entry "set-%" native #f 140 34 140 39 ()}
      {Lisp-Entry "?a" native #f 143 8 143 10 ()}
      {Lisp-Entry "get-?a" native #f 143 20 143 26 ()}
      {Lisp-Entry "set-?a" native #f 143 36 143 42 ()}
      {Lisp-Entry "?b" native #f 144 8 144 10 ()}
      {Lisp-Entry "get-?b" native #f 144 20 144 26 ()}
      {Lisp-Entry "set-?b" native #f 144 36 144 42 ()}
      {Lisp-Entry "?c" native #f 145 8 145 10 ()}
      {Lisp-Entry "get-?c" native #f 145 20 145 26 ()}
      {Lisp-Entry "set-?c" native #f 145 36 145 42 ()}
      {Lisp-Entry "?d" native #f 146 8 146 10 ()}
      {Lisp-Entry "get-?d" native #f 146 20 146 26 ()}
      {Lisp-Entry "set-?d" native #f 146 36 146 42 ()}
      {Lisp-Entry "?e" native #f 147 8 147 10 ()}
      {Lisp-Entry "get-?e" native #f 147 20 147 26 ()}
      {Lisp-Entry "set-?e" native #f 147 36 147 42 ()}
      {Lisp-Entry "?f" native #f 148 8 148 10 ()}
      {Lisp-Entry "get-?f" native #f 148 20 148 26 ()}
      {Lisp-Entry "set-?f" native #f 148 36 148 42 ()}
      {Lisp-Entry "?g" native #f 149 8 149 10 ()}
      {Lisp-Entry "get-?g" native #f 149 20 149 26 ()}
      {Lisp-Entry "set-?g" native #f 149 36 149 42 ()}
      {Lisp-Entry "?h" native #f 150 8 150 10 ()}
      {Lisp-Entry "get-?h" native #f 150 20 150 26 ()}
      {Lisp-Entry "set-?h" native #f 150 36 150 42 ()}
      {Lisp-Entry "?i" native #f 151 8 151 10 ()}
      {Lisp-Entry "get-?i" native #f 151 20 151 26 ()}
      {Lisp-Entry "set-?i" native #f 151 36 151 42 ()}
      {Lisp-Entry "?j" native #f 152 8 152 10 ()}
      {Lisp-Entry "get-?j" native #f 152 20 152 26 ()}
      {Lisp-Entry "set-?j" native #f 152 36 152 42 ()}
      {Lisp-Entry "?k" native #f 153 8 153 10 ()}
      {Lisp-Entry "get-?k" native #f 153 20 153 26 ()}
      {Lisp-Entry "set-?k" native #f 153 36 153 42 ()}
      {Lisp-Entry "?l" native #f 154 8 154 10 ()}
      {Lisp-Entry "get-?l" native #f 154 20 154 26 ()}
      {Lisp-Entry "set-?l" native #f 154 36 154 42 ()}
      {Lisp-Entry "?m" native #f 155 8 155 10 ()}
      {Lisp-Entry "get-?m" native #f 155 20 155 26 ()}
      {Lisp-Entry "set-?m" native #f 155 36 155 42 ()}
      {Lisp-Entry "?n" native #f 156 8 156 10 ()}
      {Lisp-Entry "get-?n" native #f 156 20 156 26 ()}
      {Lisp-Entry "set-?n" native #f 156 36 156 42 ()}
      {Lisp-Entry "?o" native #f 157 8 157 10 ()}
      {Lisp-Entry "get-?o" native #f 157 20 157 26 ()}
      {Lisp-Entry "set-?o" native #f 157 36 157 42 ()}
      {Lisp-Entry "?p" native #f 158 8 158 10 ()}
      {Lisp-Entry "get-?p" native #f 158 20 158 26 ()}
      {Lisp-Entry "set-?p" native #f 158 36 158 42 ()}
      {Lisp-Entry "?q" native #f 159 8 159 10 ()}
      {Lisp-Entry "get-?q" native #f 159 20 159 26 ()}
      {Lisp-Entry "set-?q" native #f 159 36 159 42 ()}
      {Lisp-Entry "?r" native #f 160 8 160 10 ()}
      {Lisp-Entry "get-?r" native #f 160 20 160 26 ()}
      {Lisp-Entry "set-?r" native #f 160 36 160 42 ()}
      {Lisp-Entry "?s" native #f 161 8 161 10 ()}
      {Lisp-Entry "get-?s" native #f 161 20 161 26 ()}
      {Lisp-Entry "set-?s" native #f 161 36 161 42 ()}
      {Lisp-Entry "?t" native #f 162 8 162 10 ()}
      {Lisp-Entry "get-?t" native #f 162 20 162 26 ()}
      {Lisp-Entry "set-?t" native #f 162 36 162 42 ()}
      {Lisp-Entry "?u" native #f 163 8 163 10 ()}
      {Lisp-Entry "get-?u" native #f 163 20 163 26 ()}
      {Lisp-Entry "set-?u" native #f 163 36 163 42 ()}
      {Lisp-Entry "?v" native #f 164 8 164 10 ()}
      {Lisp-Entry "get-?v" native #f 164 20 164 26 ()}
      {Lisp-Entry "set-?v" native #f 164 36 164 42 ()}
      {Lisp-Entry "?w" native #f 165 8 165 10 ()}
      {Lisp-Entry "get-?w" native #f 165 20 165 26 ()}
      {Lisp-Entry "set-?w" native #f 165 36 165 42 ()}
      {Lisp-Entry "?x" native #f 166 8 166 10 ()}
      {Lisp-Entry "get-?x" native #f 166 20 166 26 ()}
      {Lisp-Entry "set-?x" native #f 166 36 166 42 ()}
      {Lisp-Entry "?y" native #f 167 8 167 10 ()}
      {Lisp-Entry "get-?y" native #f 167 20 167 26 ()}
      {Lisp-Entry "set-?y" native #f 167 36 167 42 ()}
      {Lisp-Entry "?z" native #f 168 8 168 10 ()}
      {Lisp-Entry "get-?z" native #f 168 20 168 26 ()}
      {Lisp-Entry "set-?z" native #f 168 36 168 42 ()}
      {Lisp-Entry "%a" native #f 171 8 171 10 ()}
      {Lisp-Entry "get-%a" native #f 171 20 171 26 ()}
      {Lisp-Entry "set-%a" native #f 171 36 171 42 ()}
      {Lisp-Entry "%b" native #f 172 8 172 10 ()}
      {Lisp-Entry "get-%b" native #f 172 20 172 26 ()}
      {Lisp-Entry "set-%b" native #f 172 36 172 42 ()}
      {Lisp-Entry "%c" native #f 173 8 173 10 ()}
      {Lisp-Entry "get-%c" native #f 173 20 173 26 ()}
      {Lisp-Entry "set-%c" native #f 173 36 173 42 ()}
      {Lisp-Entry "%d" native #f 174 8 174 10 ()}
      {Lisp-Entry "get-%d" native #f 174 20 174 26 ()}
      {Lisp-Entry "set-%d" native #f 174 36 174 42 ()}
      {Lisp-Entry "%e" native #f 175 8 175 10 ()}
      {Lisp-Entry "get-%e" native #f 175 20 175 26 ()}
      {Lisp-Entry "set-%e" native #f 175 36 175 42 ()}
      {Lisp-Entry "%f" native #f 176 8 176 10 ()}
      {Lisp-Entry "get-%f" native #f 176 20 176 26 ()}
      {Lisp-Entry "set-%f" native #f 176 36 176 42 ()}
      {Lisp-Entry "%g" native #f 177 8 177 10 ()}
      {Lisp-Entry "get-%g" native #f 177 20 177 26 ()}
      {Lisp-Entry "set-%g" native #f 177 36 177 42 ()}
      {Lisp-Entry "%h" native #f 178 8 178 10 ()}
      {Lisp-Entry "get-%h" native #f 178 20 178 26 ()}
      {Lisp-Entry "set-%h" native #f 178 36 178 42 ()}
      {Lisp-Entry "%i" native #f 179 8 179 10 ()}
      {Lisp-Entry "get-%i" native #f 179 20 179 26 ()}
      {Lisp-Entry "set-%i" native #f 179 36 179 42 ()}
      {Lisp-Entry "%j" native #f 180 8 180 10 ()}
      {Lisp-Entry "get-%j" native #f 180 20 180 26 ()}
      {Lisp-Entry "set-%j" native #f 180 36 180 42 ()}
      {Lisp-Entry "%k" native #f 181 8 181 10 ()}
      {Lisp-Entry "get-%k" native #f 181 20 181 26 ()}
      {Lisp-Entry "set-%k" native #f 181 36 181 42 ()}
      {Lisp-Entry "%l" native #f 182 8 182 10 ()}
      {Lisp-Entry "get-%l" native #f 182 20 182 26 ()}
      {Lisp-Entry "set-%l" native #f 182 36 182 42 ()}
      {Lisp-Entry "%m" native #f 183 8 183 10 ()}
      {Lisp-Entry "get-%m" native #f 183 20 183 26 ()}
      {Lisp-Entry "set-%m" native #f 183 36 183 42 ()}
      {Lisp-Entry "%n" native #f 184 8 184 10 ()}
      {Lisp-Entry "get-%n" native #f 184 20 184 26 ()}
      {Lisp-Entry "set-%n" native #f 184 36 184 42 ()}
      {Lisp-Entry "%o" native #f 185 8 185 10 ()}
      {Lisp-Entry "get-%o" native #f 185 20 185 26 ()}
      {Lisp-Entry "set-%o" native #f 185 36 185 42 ()}
      {Lisp-Entry "%p" native #f 186 8 186 10 ()}
      {Lisp-Entry "get-%p" native #f 186 20 186 26 ()}
      {Lisp-Entry "set-%p" native #f 186 36 186 42 ()}
      {Lisp-Entry "%q" native #f 187 8 187 10 ()}
      {Lisp-Entry "get-%q" native #f 187 20 187 26 ()}
      {Lisp-Entry "set-%q" native #f 187 36 187 42 ()}
      {Lisp-Entry "%r" native #f 188 8 188 10 ()}
      {Lisp-Entry "get-%r" native #f 188 20 188 26 ()}
      {Lisp-Entry "set-%r" native #f 188 36 188 42 ()}
      {Lisp-Entry "%s" native #f 189 8 189 10 ()}
      {Lisp-Entry "get-%s" native #f 189 20 189 26 ()}
      {Lisp-Entry "set-%s" native #f 189 36 189 42 ()}
      {Lisp-Entry "%t" native #f 190 8 190 10 ()}
      {Lisp-Entry "get-%t" native #f 190 20 190 26 ()}
      {Lisp-Entry "set-%t" native #f 190 36 190 42 ()}
      {Lisp-Entry "%u" native #f 191 8 191 10 ()}
      {Lisp-Entry "get-%u" native #f 191 20 191 26 ()}
      {Lisp-Entry "set-%u" native #f 191 36 191 42 ()}
      {Lisp-Entry "%v" native #f 192 8 192 10 ()}
      {Lisp-Entry "get-%v" native #f 192 20 192 26 ()}
      {Lisp-Entry "set-%v" native #f 192 36 192 42 ()}
      {Lisp-Entry "%w" native #f 193 8 193 10 ()}
      {Lisp-Entry "get-%w" native #f 193 20 193 26 ()}
      {Lisp-Entry "set-%w" native #f 193 36 193 42 ()}
      {Lisp-Entry "%x" native #f 194 8 194 10 ()}
      {Lisp-Entry "get-%x" native #f 194 20 194 26 ()}
      {Lisp-Entry "set-%x" native #f 194 36 194 42 ()}
      {Lisp-Entry "%y" native #f 195 8 195 10 ()}
      {Lisp-Entry "get-%y" native #f 195 20 195 26 ()}
      {Lisp-Entry "set-%y" native #f 195 36 195 42 ()}
      {Lisp-Entry "%z" native #f 196 8 196 10 ()}
      {Lisp-Entry "get-%z" native #f 196 20 196 26 ()}
      {Lisp-Entry "set-%z" native #f 196 36 196 42 ()}
      {Lisp-Entry "open-digest" native #f 204 8 204 19 ()}
      {Lisp-Entry "close-digest" native #f 205 8 205 20 ()}
      {Lisp-Entry "digest-update-subu8vector" native #f 206 8 206 33 ()}
      {Lisp-Entry "digest-string" native #f 207 8 207 21 ()}
      {Lisp-Entry "digest-substring" native #f 208 8 208 24 ()}
      {Lisp-Entry "digest-u8vector" native #f 209 8 209 23 ()}
      {Lisp-Entry "digest-subu8vector" native #f 210 8 210 26 ()}
      {Lisp-Entry "digest-file" native #f 211 8 211 19 ()}
      {Lisp-Entry "enumerator?" native #f 219 8 219 24 ()}
      {Lisp-Entry "enumerator->symbol" native #f 220 8 220 31 ()}
      {Lisp-Entry "exception-reason" native #f 228 8 228 29 ()}
      {Lisp-Entry "exception-detail" native #f 229 8 229 29 ()}
      {Lisp-Entry "exception-location" native #f 230 8 230 31 ()}
      {Lisp-Entry "display-exception" native #f 231 8 231 30 ()}
      {Lisp-Entry "display-continuation-backtrace" native #f 232 8 232 43 ()}
      {Lisp-Entry "get-exception-hook" native #f 233 8 233 31 ()}
      {Lisp-Entry "set-exception-hook" native #f 234 8 234 31 ()}
      {Lisp-Entry "invoke-exception-hook" native #f 235 8 235 34 ()}
      {Lisp-Entry "system-exception-hook" native #f 236 8 236 34 ()}
      {Lisp-Entry "current-exception-handler" native #f 237 8 237 38 ()}
      {Lisp-Entry "with-exception-handler" native #f 238 8 238 35 ()}
      {Lisp-Entry "with-exception-catcher" native #f 239 8 239 35 ()}
      {Lisp-Entry "with-exception-filter" native #f 240 8 240 34 ()}
      {Lisp-Entry "with-exception-propagater" native #f 241 8 241 38 ()}
      {Lisp-Entry "dump-exception" native #f 242 8 242 27 ()}
      {Lisp-Entry "raise" native #f 243 8 243 18 ()}
      {Lisp-Entry "field?" native #f 251 8 251 19 ()}
      {Lisp-Entry "field-name" native #f 252 8 252 23 ()}
      {Lisp-Entry "find-field" native #f 253 8 253 23 ()}
      {Lisp-Entry "fixnum?" native #f 261 8 261 15 ()}
      {Lisp-Entry "flonum?" native #f 262 8 262 15 ()}
      {Lisp-Entry "fixnum->flonum" native #f 263 8 263 27 ()}
      {Lisp-Entry "flonum->fixnum" native #f 264 8 264 27 ()}
      {Lisp-Entry "fx+" native #f 265 8 265 11 ()}
      {Lisp-Entry "fx-" native #f 266 8 266 11 ()}
      {Lisp-Entry "fx*" native #f 267 8 267 11 ()}
      {Lisp-Entry "+infinity" native #f 268 8 268 22 ()}
      {Lisp-Entry "-infinity" native #f 269 8 269 22 ()}
      {Lisp-Entry "##fl+" native #f 279 21 279 26 ()}
      {Lisp-Entry "##fl-" native #f 280 21 280 26 ()}
      {Lisp-Entry "##fl*" native #f 281 21 281 26 ()}
      {Lisp-Entry "##fl/" native #f 282 21 282 26 ()}
      {Lisp-Entry "foreign?" native #f 290 8 290 21 ()}
      {Lisp-Entry "foreign-address" native #f 291 8 291 28 ()}
      {Lisp-Entry "foreign-release!" native #f 292 8 292 29 ()}
      {Lisp-Entry "foreign-released?" native #f 293 8 293 30 ()}
      {Lisp-Entry "foreign-tags" native #f 294 8 294 25 ()}
      {Lisp-Entry "still-obj-refcount-dec!" native #f 296 8 296 36 ()}
      {Lisp-Entry "still-obj-refcount-inc!" native #f 297 8 297 36 ()}
      {Lisp-Entry "compile-file" native #f 305 8 305 20 ()}
      {Lisp-Entry "compile-file-to-c" native #f 306 8 306 25 ()}
      {Lisp-Entry "datum-parsing-exception?" native #f 307 8 307 32 ()}
      {Lisp-Entry "s8vector" native #f 316 8 316 16 ()}
      {Lisp-Entry "make-s8vector" native #f 317 8 317 21 ()}
      {Lisp-Entry "s8vector-length" native #f 318 8 318 23 ()}
      {Lisp-Entry "s8vector-ref" native #f 319 8 319 20 ()}
      {Lisp-Entry "s8vector-set!" native #f 320 8 320 21 ()}
      {Lisp-Entry "s8vector?" native #f 321 8 321 17 ()}
      {Lisp-Entry "s8vector->list" native #f 322 8 322 22 ()}
      {Lisp-Entry "list->s8vector" native #f 323 8 323 22 ()}
      {Lisp-Entry "u8vector" native #f 326 8 326 16 ()}
      {Lisp-Entry "make-u8vector" native #f 327 8 327 21 ()}
      {Lisp-Entry "u8vector-length" native #f 328 8 328 23 ()}
      {Lisp-Entry "u8vector-ref" native #f 329 8 329 20 ()}
      {Lisp-Entry "u8vector-set!" native #f 330 8 330 21 ()}
      {Lisp-Entry "u8vector?" native #f 331 8 331 17 ()}
      {Lisp-Entry "u8vector->list" native #f 332 8 332 22 ()}
      {Lisp-Entry "list->u8vector" native #f 333 8 333 22 ()}
      {Lisp-Entry "u8vector->object" native #f 334 8 334 24 ()}
      {Lisp-Entry "object->u8vector" native #f 335 8 335 24 ()}
      {Lisp-Entry "s16vector" native #f 338 8 338 17 ()}
      {Lisp-Entry "make-s16vector" native #f 339 8 339 22 ()}
      {Lisp-Entry "s16vector-length" native #f 340 8 340 24 ()}
      {Lisp-Entry "s16vector-ref" native #f 341 8 341 21 ()}
      {Lisp-Entry "s16vector-set!" native #f 342 8 342 22 ()}
      {Lisp-Entry "s16vector?" native #f 343 8 343 18 ()}
      {Lisp-Entry "s16vector->list" native #f 344 8 344 23 ()}
      {Lisp-Entry "list->s16vector" native #f 345 8 345 23 ()}
      {Lisp-Entry "u16vector" native #f 348 8 348 17 ()}
      {Lisp-Entry "make-u16vector" native #f 349 8 349 22 ()}
      {Lisp-Entry "u16vector-length" native #f 350 8 350 24 ()}
      {Lisp-Entry "u16vector-ref" native #f 351 8 351 21 ()}
      {Lisp-Entry "u16vector-set!" native #f 352 8 352 22 ()}
      {Lisp-Entry "u16vector?" native #f 353 8 353 18 ()}
      {Lisp-Entry "u16vector->list" native #f 354 8 354 23 ()}
      {Lisp-Entry "list->u16vector" native #f 355 8 355 23 ()}
      {Lisp-Entry "s32vector" native #f 358 8 358 17 ()}
      {Lisp-Entry "make-s32vector" native #f 359 8 359 22 ()}
      {Lisp-Entry "s32vector-length" native #f 360 8 360 24 ()}
      {Lisp-Entry "s32vector-ref" native #f 361 8 361 21 ()}
      {Lisp-Entry "s32vector-set!" native #f 362 8 362 22 ()}
      {Lisp-Entry "s32vector?" native #f 363 8 363 18 ()}
      {Lisp-Entry "s32vector->list" native #f 364 8 364 23 ()}
      {Lisp-Entry "list->s32vector" native #f 365 8 365 23 ()}
      {Lisp-Entry "u32vector" native #f 368 8 368 17 ()}
      {Lisp-Entry "make-u32vector" native #f 369 8 369 22 ()}
      {Lisp-Entry "u32vector-length" native #f 370 8 370 24 ()}
      {Lisp-Entry "u32vector-ref" native #f 371 8 371 21 ()}
      {Lisp-Entry "u32vector-set!" native #f 372 8 372 22 ()}
      {Lisp-Entry "u32vector?" native #f 373 8 373 18 ()}
      {Lisp-Entry "u32vector->list" native #f 374 8 374 23 ()}
      {Lisp-Entry "list->u32vector" native #f 375 8 375 23 ()}
      {Lisp-Entry "s64vector" native #f 378 8 378 17 ()}
      {Lisp-Entry "make-s64vector" native #f 379 8 379 22 ()}
      {Lisp-Entry "s64vector-length" native #f 380 8 380 24 ()}
      {Lisp-Entry "s64vector-ref" native #f 381 8 381 21 ()}
      {Lisp-Entry "s64vector-set!" native #f 382 8 382 22 ()}
      {Lisp-Entry "s64vector?" native #f 383 8 383 18 ()}
      {Lisp-Entry "s64vector->list" native #f 384 8 384 23 ()}
      {Lisp-Entry "list->s64vector" native #f 385 8 385 23 ()}
      {Lisp-Entry "u64vector" native #f 388 8 388 17 ()}
      {Lisp-Entry "make-u64vector" native #f 389 8 389 22 ()}
      {Lisp-Entry "u64vector-length" native #f 390 8 390 24 ()}
      {Lisp-Entry "u64vector-ref" native #f 391 8 391 21 ()}
      {Lisp-Entry "u64vector-set!" native #f 392 8 392 22 ()}
      {Lisp-Entry "u64vector?" native #f 393 8 393 18 ()}
      {Lisp-Entry "u64vector->list" native #f 394 8 394 23 ()}
      {Lisp-Entry "list->u64vector" native #f 395 8 395 23 ()}
      {Lisp-Entry "f32vector" native #f 398 8 398 17 ()}
      {Lisp-Entry "make-f32vector" native #f 399 8 399 22 ()}
      {Lisp-Entry "f32vector-length" native #f 400 8 400 24 ()}
      {Lisp-Entry "f32vector-ref" native #f 401 8 401 21 ()}
      {Lisp-Entry "f32vector-set!" native #f 402 8 402 22 ()}
      {Lisp-Entry "f32vector?" native #f 403 8 403 18 ()}
      {Lisp-Entry "f32vector->list" native #f 404 8 404 23 ()}
      {Lisp-Entry "list->f32vector" native #f 405 8 405 23 ()}
      {Lisp-Entry "f64vector" native #f 408 8 408 17 ()}
      {Lisp-Entry "make-f64vector" native #f 409 8 409 22 ()}
      {Lisp-Entry "f64vector-length" native #f 410 8 410 24 ()}
      {Lisp-Entry "f64vector-ref" native #f 411 8 411 21 ()}
      {Lisp-Entry "f64vector-set!" native #f 412 8 412 22 ()}
      {Lisp-Entry "f64vector?" native #f 413 8 413 18 ()}
      {Lisp-Entry "f64vector->list" native #f 414 8 414 23 ()}
      {Lisp-Entry "list->f64vector" native #f 415 8 415 23 ()}
      {Lisp-Entry "command-line" native #f 423 8 423 20 ()}
      {Lisp-Entry "user-name" native #f 424 8 424 17 ()}
      {Lisp-Entry "composite-name?" native #f 432 8 432 28 ()}
      {Lisp-Entry "compose-name" native #f 433 8 433 25 ()}
      {Lisp-Entry "identifier-unit" native #f 434 8 434 28 ()}
      {Lisp-Entry "identifier-name" native #f 435 8 435 28 ()}
      {Lisp-Entry "split-identifier" native #f 436 8 436 29 ()}
      {Lisp-Entry "split-composite" native #f 437 8 437 28 ()}
      {Lisp-Entry "bitwise-not" native #f 453 8 453 19 ()}
      {Lisp-Entry "bitwise-and" native #f 454 8 454 19 ()}
      {Lisp-Entry "bitwise-ior" native #f 455 8 455 19 ()}
      {Lisp-Entry "bitwise-xor" native #f 456 8 456 19 ()}
      {Lisp-Entry "arithmetic-shift" native #f 457 8 457 24 ()}
      {Lisp-Entry "bit-set?" native #f 458 8 458 16 ()}
      {Lisp-Entry "extract-bit-field" native #f 459 8 459 25 ()}
      {Lisp-Entry "build-feedback" native #f 467 8 467 27 ()}
      {Lisp-Entry "boot-directory" native #f 468 8 468 27 ()}
      {Lisp-Entry "kernel-system" native #f 469 8 469 26 ()}
      {Lisp-Entry "kernel-platform" native #f 470 8 470 28 ()}
      {Lisp-Entry "kernel-windowing" native #f 471 8 471 29 ()}
      {Lisp-Entry "kernel-safety" native #f 472 8 472 26 ()}
      {Lisp-Entry "kernel-optimize?" native #f 473 8 473 29 ()}
      {Lisp-Entry "kernel-debug-environments?" native #f 474 8 474 39 ()}
      {Lisp-Entry "kernel-debug-location?" native #f 475 8 475 35 ()}
      {Lisp-Entry "kernel-debug-source?" native #f 476 8 476 33 ()}
      {Lisp-Entry "kernel-destination" native #f 477 8 477 31 ()}
      {Lisp-Entry "kernel-built" native #f 478 8 478 25 ()}
      {Lisp-Entry "kernel-install" native #f 479 8 479 27 ()}
      {Lisp-Entry "kernel-source" native #f 480 8 480 26 ()}
      {Lisp-Entry "kernel-version" native #f 481 8 481 27 ()}
      {Lisp-Entry "get-source-version-number" native #f 482 8 482 38 ()}
      {Lisp-Entry "jazz-product" native #f 483 8 483 25 ()}
      {Lisp-Entry "jazz-profile" native #f 484 8 484 25 ()}
      {Lisp-Entry "delay-reporting?" native #f 485 8 485 29 ()}
      {Lisp-Entry "use-debugger?" native #f 486 8 486 26 ()}
      {Lisp-Entry "get-repositories" native #f 487 8 487 29 ()}
      {Lisp-Entry "install-repository" native #f 488 8 488 31 ()}
      {Lisp-Entry "uninstall-repository" native #f 489 8 489 33 ()}
      {Lisp-Entry "find-repository" native #f 490 8 490 28 ()}
      {Lisp-Entry "find-package" native #f 491 8 491 25 ()}
      {Lisp-Entry "repository?" native #f 492 8 492 24 ()}
      {Lisp-Entry "repository-name" native #f 493 8 493 28 ()}
      {Lisp-Entry "repository-directory" native #f 494 8 494 33 ()}
      {Lisp-Entry "repository-library-root" native #f 495 8 495 36 ()}
      {Lisp-Entry "repository-library-directory" native #f 496 8 496 41 ()}
      {Lisp-Entry "repository-binary?" native #f 497 8 497 31 ()}
      {Lisp-Entry "repository-packages" native #f 498 8 498 32 ()}
      {Lisp-Entry "repository-find-package" native #f 499 8 499 36 ()}
      {Lisp-Entry "repository-install-packages" native #f 500 8 500 40 ()}
      {Lisp-Entry "repository-add-package" native #f 501 8 501 35 ()}
      {Lisp-Entry "repository-remove-package" native #f 502 8 502 38 ()}
      {Lisp-Entry "package?" native #f 503 8 503 21 ()}
      {Lisp-Entry "package-repository" native #f 504 8 504 31 ()}
      {Lisp-Entry "package-name" native #f 505 8 505 25 ()}
      {Lisp-Entry "package-root" native #f 506 8 506 25 ()}
      {Lisp-Entry "package-directory" native #f 507 8 507 30 ()}
      {Lisp-Entry "package-products" native #f 508 8 508 29 ()}
      {Lisp-Entry "package-project" native #f 509 8 509 28 ()}
      {Lisp-Entry "split-version" native #f 510 8 510 26 ()}
      {Lisp-Entry "present-version" native #f 511 8 511 28 ()}
      {Lisp-Entry "load-package" native #f 512 8 512 25 ()}
      {Lisp-Entry "register-product" native #f 513 8 513 29 ()}
      {Lisp-Entry "register-product-run" native #f 514 8 514 33 ()}
      {Lisp-Entry "product-descriptor-name" native #f 515 8 515 36 ()}
      {Lisp-Entry "product-descriptor-unit" native #f 516 8 516 36 ()}
      {Lisp-Entry "product-descriptor-title" native #f 517 8 517 37 ()}
      {Lisp-Entry "product-descriptor-icon" native #f 518 8 518 36 ()}
      {Lisp-Entry "product-descriptor-run" native #f 519 8 519 35 ()}
      {Lisp-Entry "product-descriptor-update" native #f 520 8 520 38 ()}
      {Lisp-Entry "product-descriptor-build" native #f 521 8 521 37 ()}
      {Lisp-Entry "product-descriptor-dependencies" native #f 522 8 522 44 ()}
      {Lisp-Entry "run-product-descriptor" native #f 523 8 523 35 ()}
      {Lisp-Entry "update-product-descriptor" native #f 524 8 524 38 ()}
      {Lisp-Entry "build-product-descriptor" native #f 525 8 525 37 ()}
      {Lisp-Entry "current-process-name" native #f 526 8 526 33 ()}
      {Lisp-Entry "current-process-name-set!" native #f 527 8 527 38 ()}
      {Lisp-Entry "current-process-title" native #f 528 8 528 34 ()}
      {Lisp-Entry "current-process-title-set!" native #f 529 8 529 39 ()}
      {Lisp-Entry "current-process-icon" native #f 530 8 530 33 ()}
      {Lisp-Entry "current-process-icon-set!" native #f 531 8 531 38 ()}
      {Lisp-Entry "current-process-version" native #f 532 8 532 36 ()}
      {Lisp-Entry "current-process-version-set!" native #f 533 8 533 41 ()}
      {Lisp-Entry "current-process-present" native #f 534 8 534 36 ()}
      {Lisp-Entry "destination-directory" native #f 535 8 535 34 ()}
      {Lisp-Entry "executable-extension" native #f 536 8 536 33 ()}
      {Lisp-Entry "run-product" native #f 537 8 537 24 ()}
      {Lisp-Entry "update-product" native #f 538 8 538 27 ()}
      {Lisp-Entry "build-product" native #f 539 8 539 26 ()}
      {Lisp-Entry "descendant-unit?" native #f 540 8 540 29 ()}
      {Lisp-Entry "find-pathname-unit" native #f 541 8 541 31 ()}
      {Lisp-Entry "find-unit-src" native #f 542 8 542 26 ()}
      {Lisp-Entry "gather-profiles" native #f 543 8 543 28 ()}
      {Lisp-Entry "make-profile" native #f 544 8 544 25 ()}
      {Lisp-Entry "profile-name" native #f 545 8 545 25 ()}
      {Lisp-Entry "profile-title" native #f 546 8 546 26 ()}
      {Lisp-Entry "profile-unit" native #f 547 8 547 25 ()}
      {Lisp-Entry "unit-autoload" native #f 548 8 548 26 ()}
      {Lisp-Entry "get-environment" native #f 549 8 549 28 ()}
      {Lisp-Entry "get-environment-unit" native #f 550 8 550 33 ()}
      {Lisp-Entry "unit-loaded?" native #f 551 8 551 25 ()}
      {Lisp-Entry "unit-uptodate-binary?" native #f 552 8 552 34 ()}
      {Lisp-Entry "load-unit" native #f 553 8 553 22 ()}
      {Lisp-Entry "unload-unit" native #f 554 8 554 24 ()}
      {Lisp-Entry "reload-unit" native #f 555 8 555 24 ()}
      {Lisp-Entry "get-load-mutex" native #f 556 8 556 27 ()}
      {Lisp-Entry "get-load-stack" native #f 557 8 557 27 ()}
      {Lisp-Entry "get-module" native #f 558 8 558 23 ()}
      {Lisp-Entry "require-module" native #f 559 8 559 27 ()}
      {Lisp-Entry "module-get" native #f 560 8 560 23 ()}
      {Lisp-Entry "module-ref" native #f 561 8 561 23 ()}
      {Lisp-Entry "walk-for" native #f 562 8 562 21 ()}
      {Lisp-Entry "register-service" native #f 563 8 563 29 ()}
      {Lisp-Entry "get-service" native #f 564 8 564 24 ()}
      {Lisp-Entry "require-service" native #f 565 8 565 28 ()}
      {Lisp-Entry "global-variable?" native #f 566 8 566 29 ()}
      {Lisp-Entry "global-value" native #f 567 8 567 25 ()}
      {Lisp-Entry "test?" native #f 568 8 568 18 ()}
      {Lisp-Entry "main" native #f 569 8 569 12 ()}
      {Lisp-Entry "keyword?" native #f 577 8 577 21 ()}
      {Lisp-Entry "string->keyword" native #f 578 8 578 28 ()}
      {Lisp-Entry "keyword->string" native #f 579 8 579 28 ()}
      {Lisp-Entry "not-null?" native #f 587 8 587 22 ()}
      {Lisp-Entry "listify" native #f 588 8 588 20 ()}
      {Lisp-Entry "list-copy" native #f 589 8 589 22 ()}
      {Lisp-Entry "last-pair" native #f 590 8 590 22 ()}
      {Lisp-Entry "proper-list" native #f 591 8 591 24 ()}
      {Lisp-Entry "gc" native #f 599 8 599 15 ()}
      {Lisp-Entry "process-memory" native #f 600 8 600 27 ()}
      {Lisp-Entry "symbols-memory" native #f 601 8 601 27 ()}
      {Lisp-Entry "classes-statistics" native #f 602 8 602 31 ()}
      {Lisp-Entry "class-instances-count" native #f 603 8 603 34 ()}
      {Lisp-Entry "class-instances-size" native #f 604 8 604 33 ()}
      {Lisp-Entry "instances-statistics" native #f 605 8 605 33 ()}
      {Lisp-Entry "vector-size" native #f 606 8 606 24 ()}
      {Lisp-Entry "f64vector-size" native #f 607 8 607 27 ()}
      {Lisp-Entry "list-size" native #f 608 8 608 22 ()}
      {Lisp-Entry "table-size" native #f 609 8 609 23 ()}
      {Lisp-Entry "open-tcp-client" native #f 617 8 617 28 ()}
      {Lisp-Entry "open-tcp-server" native #f 618 8 618 28 ()}
      {Lisp-Entry "tcp-server-socket-info" native #f 619 8 619 35 ()}
      {Lisp-Entry "call-with-tcp-client" native #f 620 8 620 33 ()}
      {Lisp-Entry "new" native #f 628 8 628 16 ()}
      {Lisp-Entry "class-of" native #f 629 8 629 21 ()}
      {Lisp-Entry "object?" native #f 630 8 630 20 ()}
      {Lisp-Entry "type?" native #f 631 8 631 18 ()}
      {Lisp-Entry "category?" native #f 632 8 632 22 ()}
      {Lisp-Entry "interface?" native #f 633 8 633 23 ()}
      {Lisp-Entry "method?" native #f 634 8 634 20 ()}
      {Lisp-Entry "is?" native #f 635 8 635 16 ()}
      {Lisp-Entry "subtype?" native #f 636 8 636 21 ()}
      {Lisp-Entry "subcategory?" native #f 637 8 637 25 ()}
      {Lisp-Entry "subclass?" native #f 638 8 638 22 ()}
      {Lisp-Entry "make-parameter" native #f 646 8 646 22 ()}
      {Lisp-Entry "pathname-type" native #f 654 8 654 26 ()}
      {Lisp-Entry "pathname-expand" native #f 655 8 655 28 ()}
      {Lisp-Entry "pathname-normalize" native #f 656 8 656 31 ()}
      {Lisp-Entry "file-exists?" native #f 657 8 657 25 ()}
      {Lisp-Entry "file-delete" native #f 658 8 658 24 ()}
      {Lisp-Entry "file-copy" native #f 659 8 659 22 ()}
      {Lisp-Entry "file-modification-time" native #f 660 8 660 35 ()}
      {Lisp-Entry "file-rename" native #f 661 8 661 24 ()}
      {Lisp-Entry "current-directory" native #f 662 8 662 30 ()}
      {Lisp-Entry "current-directory-set!" native #f 663 8 663 35 ()}
      {Lisp-Entry "with-current-directory" native #f 664 8 664 35 ()}
      {Lisp-Entry "directory-create" native #f 665 8 665 29 ()}
      {Lisp-Entry "directory-content" native #f 666 8 666 30 ()}
      {Lisp-Entry "directory-delete" native #f 667 8 667 29 ()}
      {Lisp-Entry "open-string-pipe" native #f 675 8 675 24 ()}
      {Lisp-Entry "port?" native #f 683 8 683 13 ()}
      {Lisp-Entry "close-port" native #f 684 8 684 23 ()}
      {Lisp-Entry "input-port-timeout-set!" native #f 685 8 685 36 ()}
      {Lisp-Entry "output-port-timeout-set!" native #f 686 8 686 37 ()}
      {Lisp-Entry "open-event-queue" native #f 687 8 687 24 ()}
      {Lisp-Entry "eof-object" native #f 688 8 688 23 ()}
      {Lisp-Entry "open-input-string" native #f 689 8 689 25 ()}
      {Lisp-Entry "open-output-string" native #f 690 8 690 26 ()}
      {Lisp-Entry "get-output-string" native #f 691 8 691 25 ()}
      {Lisp-Entry "call-with-input-string" native #f 692 8 692 30 ()}
      {Lisp-Entry "with-input-from-string" native #f 693 8 693 30 ()}
      {Lisp-Entry "call-with-output-string" native #f 694 8 694 31 ()}
      {Lisp-Entry "read-substring" native #f 695 8 695 22 ()}
      {Lisp-Entry "open-vector" native #f 696 8 696 19 ()}
      {Lisp-Entry "call-with-input-u8vector" native #f 697 8 697 32 ()}
      {Lisp-Entry "open-output-u8vector" native #f 698 8 698 28 ()}
      {Lisp-Entry "get-output-u8vector" native #f 699 8 699 27 ()}
      {Lisp-Entry "read-u8" native #f 700 8 700 20 ()}
      {Lisp-Entry "write-u8" native #f 701 8 701 21 ()}
      {Lisp-Entry "read-subu8vector" native #f 702 8 702 29 ()}
      {Lisp-Entry "write-subu8vector" native #f 703 8 703 30 ()}
      {Lisp-Entry "read-line" native #f 704 8 704 22 ()}
      {Lisp-Entry "read-proper-line" native #f 705 8 705 29 ()}
      {Lisp-Entry "read-all" native #f 706 8 706 21 ()}
      {Lisp-Entry "print" native #f 707 8 707 18 ()}
      {Lisp-Entry "pretty-print" native #f 708 8 708 25 ()}
      {Lisp-Entry "read-source-all" native #f 709 8 709 28 ()}
      {Lisp-Entry "read-source-first" native #f 710 8 710 30 ()}
      {Lisp-Entry "force-output" native #f 711 8 711 20 ()}
      {Lisp-Entry "current-error-port" native #f 712 8 712 26 ()}
      {Lisp-Entry "with-output-to-port" native #f 713 8 713 27 ()}
      {Lisp-Entry "write-u8" native #f 714 8 714 16 ()}
      {Lisp-Entry "property-getter" native #f 722 8 722 28 ()}
      {Lisp-Entry "property-setter" native #f 723 8 723 28 ()}
      {Lisp-Entry "new-queue" native #f 731 8 731 22 ()}
      {Lisp-Entry "enqueue" native #f 732 8 732 20 ()}
      {Lisp-Entry "enqueue-list" native #f 733 8 733 25 ()}
      {Lisp-Entry "queue-list" native #f 734 8 734 23 ()}
      {Lisp-Entry "reset-queue" native #f 735 8 735 24 ()}
      {Lisp-Entry "random-integer" native #f 743 8 743 27 ()}
      {Lisp-Entry "random-real" native #f 744 8 744 24 ()}
      {Lisp-Entry "random-source-randomize!" native #f 745 8 745 37 ()}
      {Lisp-Entry "random-source-pseudo-randomize!" native #f 746 8 746 44 ()}
      {Lisp-Entry "default-random-source" native #f 747 8 747 34 ()}
      {Lisp-Entry "current-readtable" native #f 755 8 755 25 ()}
      {Lisp-Entry "with-readtable" native #f 756 8 756 27 ()}
      {Lisp-Entry "scheme-readtable" native #f 757 8 757 29 ()}
      {Lisp-Entry "jazz-readtable" native #f 758 8 758 27 ()}
      {Lisp-Entry "with-jazz-readtable" native #f 759 8 759 32 ()}
      {Lisp-Entry "current-repl-context" native #f 767 8 767 33 ()}
      {Lisp-Entry "repl-context-level" native #f 768 8 768 31 ()}
      {Lisp-Entry "repl-context-depth" native #f 769 8 769 31 ()}
      {Lisp-Entry "repl-context-cont" native #f 770 8 770 30 ()}
      {Lisp-Entry "repl-context-initial-cont" native #f 771 8 771 38 ()}
      {Lisp-Entry "repl-context-prev-level" native #f 772 8 772 36 ()}
      {Lisp-Entry "repl-context-prev-depth" native #f 773 8 773 36 ()}
      {Lisp-Entry "with-repl-context" native #f 774 8 774 30 ()}
      {Lisp-Entry "inspect-repl-context" native #f 775 8 775 33 ()}
      {Lisp-Entry "repl" native #f 776 8 776 17 ()}
      {Lisp-Entry "eval-within-no-winding" native #f 777 8 777 35 ()}
      {Lisp-Entry "repl-result-history-add" native #f 778 8 778 36 ()}
      {Lisp-Entry "repl-result-history-ref" native #f 779 8 779 31 ()}
      {Lisp-Entry "resource-pathname" native #f 787 8 787 30 ()}
      {Lisp-Entry "get-object-slot" native #f 795 8 795 28 ()}
      {Lisp-Entry "set-object-slot" native #f 796 8 796 28 ()}
      {Lisp-Entry "dispatch" native #f 797 8 797 21 ()}
      {Lisp-Entry "find-dispatch" native #f 798 8 798 26 ()}
      {Lisp-Entry "call-into-abstract" native #f 799 8 799 31 ()}
      {Lisp-Entry "get-core-classes" native #f 800 8 800 29 ()}
      {Lisp-Entry "object->serial" native #f 808 8 808 27 ()}
      {Lisp-Entry "serial->object" native #f 809 8 809 27 ()}
      {Lisp-Entry "object->serial-number" native #f 812 8 812 29 ()}
      {Lisp-Entry "serial-number->object" native #f 813 8 813 29 ()}
      {Lisp-Entry "shell-command" native #f 821 8 821 21 ()}
      {Lisp-Entry "slot?" native #f 829 8 829 18 ()}
      {Lisp-Entry "slot-value" native #f 830 8 830 23 ()}
      {Lisp-Entry "set-slot-value" native #f 831 8 831 27 ()}
      {Lisp-Entry "socket-info-address" native #f 839 8 839 32 ()}
      {Lisp-Entry "socket-info-port-number" native #f 840 8 840 36 ()}
      {Lisp-Entry "get-procedure-name" native #f 848 8 848 31 ()}
      {Lisp-Entry "get-continuation-stack" native #f 849 8 849 35 ()}
      {Lisp-Entry "get-continuation-name" native #f 850 8 850 34 ()}
      {Lisp-Entry "get-continuation-dynamic-environment" native #f 851 8 851 49 ()}
      {Lisp-Entry "get-continuation-lexical-environment" native #f 852 8 852 49 ()}
      {Lisp-Entry "get-continuation-location" native #f 853 8 853 38 ()}
      {Lisp-Entry "interpreted-continuation?" native #f 854 8 854 38 ()}
      {Lisp-Entry "join-strings" native #f 862 8 862 25 ()}
      {Lisp-Entry "kind?" native #f 870 8 870 18 ()}
      {Lisp-Entry "kind-id" native #f 871 8 871 20 ()}
      {Lisp-Entry "kind-name" native #f 872 8 872 22 ()}
      {Lisp-Entry "kind-flags" native #f 873 8 873 23 ()}
      {Lisp-Entry "kind-super" native #f 874 8 874 23 ()}
      {Lisp-Entry "kind-length" native #f 875 8 875 24 ()}
      {Lisp-Entry "kind-fields" native #f 876 8 876 24 ()}
      {Lisp-Entry "structure?" native #f 877 8 877 23 ()}
      {Lisp-Entry "structure-kind" native #f 878 8 878 27 ()}
      {Lisp-Entry "structure-ref" native #f 879 8 879 26 ()}
      {Lisp-Entry "structure-set!" native #f 880 8 880 27 ()}
      {Lisp-Entry "make-foo" native #f 881 8 881 16 ()}
      {Lisp-Entry "make-bar" native #f 882 8 882 16 ()}
      {Lisp-Entry "generate-symbol" native #f 890 8 890 28 ()}
      {Lisp-Entry "with-uniqueness" native #f 891 8 891 28 ()}
      {Lisp-Entry "source?" native #f 899 8 899 20 ()}
      {Lisp-Entry "source-code" native #f 900 8 900 24 ()}
      {Lisp-Entry "source-locat" native #f 901 8 901 25 ()}
      {Lisp-Entry "desourcify" native #f 902 8 902 23 ()}
      {Lisp-Entry "desourcify-all" native #f 903 8 903 27 ()}
      {Lisp-Entry "sourcify" native #f 904 8 904 21 ()}
      {Lisp-Entry "sourcify-if" native #f 905 8 905 24 ()}
      {Lisp-Entry "present-source" native #f 906 8 906 27 ()}
      {Lisp-Entry "locat-container" native #f 907 8 907 28 ()}
      {Lisp-Entry "locat-position" native #f 908 8 908 27 ()}
      {Lisp-Entry "locat->file/line/col" native #f 909 8 909 33 ()}
      {Lisp-Entry "container->path" native #f 910 8 910 28 ()}
      {Lisp-Entry "position->filepos" native #f 911 8 911 30 ()}
      {Lisp-Entry "filepos-line" native #f 912 8 912 25 ()}
      {Lisp-Entry "filepos-col" native #f 913 8 913 24 ()}
      {Lisp-Entry "switch?" native #f 921 8 921 20 ()}
      {Lisp-Entry "switch-name" native #f 922 8 922 24 ()}
      {Lisp-Entry "command-argument" native #f 923 8 923 29 ()}
      {Lisp-Entry "open-process" native #f 924 8 924 25 ()}
      {Lisp-Entry "process-status" native #f 925 8 925 27 ()}
      {Lisp-Entry "exit" native #f 926 8 926 17 ()}
      {Lisp-Entry "table?" native #f 934 8 934 14 ()}
      {Lisp-Entry "make-table" native #f 935 8 935 18 ()}
      {Lisp-Entry "table-ref" native #f 936 8 936 17 ()}
      {Lisp-Entry "table-set!" native #f 937 8 937 18 ()}
      {Lisp-Entry "table->list" native #f 938 8 938 19 ()}
      {Lisp-Entry "list->table" native #f 939 8 939 19 ()}
      {Lisp-Entry "table-clear" native #f 940 8 940 24 ()}
      {Lisp-Entry "table-length" native #f 941 8 941 25 ()}
      {Lisp-Entry "iterate-table" native #f 942 8 942 26 ()}
      {Lisp-Entry "map-table" native #f 943 8 943 22 ()}
      {Lisp-Entry "table-entries" native #f 944 8 944 26 ()}
      {Lisp-Entry "eq-hash" native #f 945 8 945 20 ()}
      {Lisp-Entry "eqv-hash" native #f 946 8 946 21 ()}
      {Lisp-Entry "equal-hash" native #f 947 8 947 23 ()}
      {Lisp-Entry "set-terminal-title" native #f 955 8 955 31 ()}
      {Lisp-Entry "bring-terminal-to-front" native #f 956 8 956 36 ()}
      {Lisp-Entry "clear-terminal" native #f 957 8 957 27 ()}
      {Lisp-Entry "current-thread" native #f 965 8 965 27 ()}
      {Lisp-Entry "thread?" native #f 966 8 966 20 ()}
      {Lisp-Entry "make-thread" native #f 967 8 967 24 ()}
      {Lisp-Entry "make-root-thread" native #f 968 8 968 29 ()}
      {Lisp-Entry "thread-name" native #f 969 8 969 24 ()}
      {Lisp-Entry "thread-specific" native #f 970 8 970 28 ()}
      {Lisp-Entry "thread-specific-set!" native #f 971 8 971 33 ()}
      {Lisp-Entry "thread-base-priority" native #f 972 8 972 33 ()}
      {Lisp-Entry "thread-base-priority-set!" native #f 973 8 973 38 ()}
      {Lisp-Entry "thread-priority-boost" native #f 974 8 974 34 ()}
      {Lisp-Entry "thread-priority-boost-set!" native #f 975 8 975 39 ()}
      {Lisp-Entry "thread-start!" native #f 976 8 976 26 ()}
      {Lisp-Entry "thread-yield!" native #f 977 8 977 26 ()}
      {Lisp-Entry "thread-sleep!" native #f 978 8 978 26 ()}
      {Lisp-Entry "thread-terminate!" native #f 979 8 979 30 ()}
      {Lisp-Entry "thread-join!" native #f 980 8 980 25 ()}
      {Lisp-Entry "thread-send" native #f 981 8 981 24 ()}
      {Lisp-Entry "thread-receive" native #f 982 8 982 27 ()}
      {Lisp-Entry "thread-interrupt!" native #f 983 8 983 30 ()}
      {Lisp-Entry "thread-thread-group" native #f 984 8 984 32 ()}
      {Lisp-Entry "thread-group->thread-group-list" native #f 985 8 985 44 ()}
      {Lisp-Entry "thread-group->thread-group-vector" native #f 986 8 986 46 ()}
      {Lisp-Entry "thread-group->thread-list" native #f 987 8 987 38 ()}
      {Lisp-Entry "thread-group->thread-vector" native #f 988 8 988 40 ()}
      {Lisp-Entry "thread-state" native #f 989 8 989 25 ()}
      {Lisp-Entry "thread-state-abnormally-terminated-reason" native #f 990 8 990 54 ()}
      {Lisp-Entry "thread-state-abnormally-terminated?" native #f 991 8 991 48 ()}
      {Lisp-Entry "thread-state-active-timeout" native #f 992 8 992 40 ()}
      {Lisp-Entry "thread-state-active-waiting-for" native #f 993 8 993 44 ()}
      {Lisp-Entry "thread-state-active?" native #f 994 8 994 33 ()}
      {Lisp-Entry "thread-state-initialized?" native #f 995 8 995 38 ()}
      {Lisp-Entry "thread-state-normally-terminated-result" native #f 996 8 996 52 ()}
      {Lisp-Entry "thread-state-normally-terminated?" native #f 997 8 997 46 ()}
      {Lisp-Entry "thread-state-uninitialized?" native #f 998 8 998 40 ()}
      {Lisp-Entry "pristine-thread-continuation" native #f 999 8 999 41 ()}
      {Lisp-Entry "mutex?" native #f 1000 8 1000 19 ()}
      {Lisp-Entry "make-mutex" native #f 1001 8 1001 23 ()}
      {Lisp-Entry "mutex-name" native #f 1002 8 1002 23 ()}
      {Lisp-Entry "mutex-specific" native #f 1003 8 1003 27 ()}
      {Lisp-Entry "mutex-specific-set!" native #f 1004 8 1004 32 ()}
      {Lisp-Entry "mutex-state" native #f 1005 8 1005 24 ()}
      {Lisp-Entry "mutex-lock!" native #f 1006 8 1006 24 ()}
      {Lisp-Entry "mutex-unlock!" native #f 1007 8 1007 26 ()}
      {Lisp-Entry "mutex-wait" native #f 1008 8 1008 23 ()}
      {Lisp-Entry "mutex-owner" native #f 1009 8 1009 24 ()}
      {Lisp-Entry "condition?" native #f 1010 8 1010 23 ()}
      {Lisp-Entry "make-condition" native #f 1011 8 1011 27 ()}
      {Lisp-Entry "condition-name" native #f 1012 8 1012 27 ()}
      {Lisp-Entry "condition-specific" native #f 1013 8 1013 31 ()}
      {Lisp-Entry "condition-specific-set!" native #f 1014 8 1014 36 ()}
      {Lisp-Entry "condition-signal!" native #f 1015 8 1015 30 ()}
      {Lisp-Entry "condition-broadcast!" native #f 1016 8 1016 33 ()}
      {Lisp-Entry "current-systime" native #f 1024 8 1024 28 ()}
      {Lisp-Entry "systime?" native #f 1025 8 1025 21 ()}
      {Lisp-Entry "systime->seconds" native #f 1026 8 1026 29 ()}
      {Lisp-Entry "seconds->systime" native #f 1027 8 1027 29 ()}
      {Lisp-Entry "process-times" native #f 1028 8 1028 26 ()}
      {Lisp-Entry "cpu-time" native #f 1029 8 1029 21 ()}
      {Lisp-Entry "real-time" native #f 1030 8 1030 22 ()}
      {Lisp-Entry "unspecified" native #f 1038 8 1038 24 ()}
      {Lisp-Entry "unspecified?" native #f 1039 8 1039 25 ()}
      {Lisp-Entry "specified?" native #f 1040 8 1040 23 ()}
      {Lisp-Entry "vector-copy" native #f 1048 8 1048 24 ()}
      {Lisp-Entry "analysis-mode?" native #f 1056 8 1056 27 ()}
      {Lisp-Entry "autoload-references" native #f 1057 8 1057 32 ()}
      {Lisp-Entry "new-walk-context" native #f 1058 8 1058 29 ()}
      {Lisp-Entry "specifier?" native #f 1059 8 1059 23 ()}
      {Lisp-Entry "binding-specifier" native #f 1060 8 1060 30 ()}
      {Lisp-Entry "parse-specifier" native #f 1061 8 1061 28 ()}
      {Lisp-Entry "requested-unit-name" native #f 1062 8 1062 32 ()}
      {Lisp-Entry "requested-unit-resource" native #f 1063 8 1063 36 ()}
      {Lisp-Entry "get-private-lookup" native #f 1064 8 1064 31 ()}
      {Lisp-Entry "get-public-lookup" native #f 1065 8 1065 30 ()}
      {Lisp-Entry "get-protected-lookup" native #f 1066 8 1066 33 ()}
      {Lisp-Entry "get-catalog" native #f 1067 8 1067 24 ()}
      {Lisp-Entry "get-catalog-entry" native #f 1068 8 1068 30 ()}
      {Lisp-Entry "release-catalog-entries" native #f 1069 8 1069 36 ()}
      {Lisp-Entry "outline-feedback" native #f 1070 8 1070 29 ()}
      {Lisp-Entry "outline-unit" native #f 1071 8 1071 25 ()}
      {Lisp-Entry "walk-unit" native #f 1072 8 1072 22 ()}
      {Lisp-Entry "expand-unit" native #f 1073 8 1073 24 ()}}})
"_language"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "language" "_language.jazz"} 1257476719
    {Lisp-Entry "jazz.dialect.language" module #f 37 18 37 39 ("jazz.dialect")}})
"_performance"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "_performance.scm"} 1257474019
    {Lisp-Entry "test.performance" unit #f 0 6 0 22 ()}})
"_syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "_syntax.scm"} 1257476731
    {Lisp-Entry "jazz.dialect.syntax" module #f 37 18 37 37 ("scheme")}})
"_test"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "_test.jazz"} 1257478471
    {Lisp-Entry "jazz.test" module #f 37 8 37 17 ("cdr" "car" "when" "proc" "lst" "iter-list" "init1" "'init1" "Subseq" "length" "x" "f" "'a" "set-element!" "10" "axis-grow" "0" "Axis" "new" "axis" "let" "for-each" "5" "allocate" "foo" "test.pt" "U" "I" "interface" "Exception" "XX" "delegator" "'delegator" "current-thread" "1" "sleep" "lambda" "delegated" "'delegated" "thread-loop" "new-thread" "thread-start!" "thread-execute" "test-execute" "definition" "X" "jazz.ui" "jazz.library" "jazz.jml" "Object" "extends" "A" "class" "3" "2" "Point" "b" "a" "debug" "statprof" "jedi" "jazz.runtime" "jazz.io" "import" "jazz")
      {Lisp-Entry "My-App" class #f 52 7 52 13 ("Application")
        {Lisp-Entry "show-toplevel" method #f 55 20 55 33 ()}
        {Lisp-Entry "finish-process" method #f 59 20 59 34 ("450" "600" "Dimension" "host-size:" "host-title:" "My-Test" "new-palette" "nextmethod")}}
      {Lisp-Entry "My-Palette" class #f 65 7 65 17 ("Palette")
        {Lisp-Entry "close-with-confirm" method #f 68 20 68 38 ("exit" "nextmethod")}}
      {Lisp-Entry "My-Test" class #f 74 7 74 14 ("display-images?:" "toplevel-controls?:" "200" "width:" "15" "default-row-height:" "Label-User" "Font" "font:" "tree" "name:" "fill" "layout-type:" "vscroll?:" "style:" "edge" "border-type:" "300" "500" "Dimension" "size:" "100" "50" "Point" "position:" "title:" "View")
        {Lisp-Entry "palette-class" method #f 91 25 91 38 ("My-Palette")}}
      {Lisp-Entry "run" definition #f 96 20 96 23 ("My-App" "new" "boot-environment")}
      {Lisp-Entry "Blah" class #f 164 7 164 11 ("Object")
        {Lisp-Entry "warnings" slot #f 165 8 165 16 ()}
        {Lisp-Entry "get-warnings" accessor #f 165 26 165 34 ()}
        {Lisp-Entry "errors" slot #f 166 8 166 14 ()}
        {Lisp-Entry "get-errors" accessor #f 166 26 166 34 ()}
        {Lisp-Entry "literals" slot #f 167 8 167 16 ()}
        {Lisp-Entry "get-literals" accessor #f 167 26 167 34 ()}
        {Lisp-Entry "variables" slot #f 168 8 168 17 ()}
        {Lisp-Entry "get-variables" accessor #f 168 26 168 34 ()}
        {Lisp-Entry "references" slot #f 169 8 169 18 ()}
        {Lisp-Entry "get-references" accessor #f 169 26 169 34 ()}
        {Lisp-Entry "inclusions" slot #f 170 8 170 18 ()}
        {Lisp-Entry "get-inclusions" accessor #f 170 26 170 34 ()}
        {Lisp-Entry "autoloads" slot #f 171 8 171 17 ()}
        {Lisp-Entry "get-autoloads" accessor #f 171 26 171 34 ()}}
      {Lisp-Entry "Y" class #f 402 7 402 8 ("X")
        {Lisp-Entry "f" method #f 405 16 405 17 ("2")}}
      {Lisp-Entry "Y~Class207" class #f 411 9 411 19 ("X" ":class")
        {Lisp-Entry "f" method #f 414 13 414 14 ("2")}}
      {Lisp-Entry "Y" class #f 418 9 418 10 ("X" "Y~Class207")}
      {Lisp-Entry "f" definition #f 515 13 515 14 ("=" "not" "if" "c")}
      {Lisp-Entry "f" definition #f 575 13 575 14 ("+" "0" "n" "iter" "let")}
      {Lisp-Entry "TC" class #f 582 7 582 9 ("3" "1" "initialize" "Object")
        {Lisp-Entry "row" slot #f 585 8 585 11 ()}
        {Lisp-Entry "col" slot #f 586 8 586 11 ()}
        {Lisp-Entry "f" method #f 589 11 589 12 ("col" "0" "subseq!" "row" "when")}
        {Lisp-Entry "g" method #f 594 11 594 12 ("col" "0" "subseq!")}}
      {Lisp-Entry "f" definition #f 599 13 599 14 ("g" "TC" "new" "f" "class-of" "list")}}})
"_validate"
 ({Lisp-File-Entry {File jazz "src" "jazz" "validate" "_validate.jazz"} 1257476733
    {Lisp-Entry "jazz.validate" module #f 37 8 37 21 ("jazz")}})
"_walker"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "walker" "_walker.jazz"} 1257476735
    {Lisp-Entry "jazz.dialect.walker" module #f 37 18 37 37 ("jazz.dialect")}})
"a"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "a.scm"} 1257474173
    {Lisp-Entry "test.performance.a" unit #f 0 6 0 24 ()
      {Lisp-Entry "f-separate" define #f 8 9 8 19 ("1" "%%fx-" "g-separate" "0" "%%fx=" "if" "n" "s")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "a.jazz"} 1257478471
    {Lisp-Entry "jazz.test.a" module #f 0 8 0 19 ("jazz")}})
"attributes"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "attributes.scm"} 1257476742
    {Lisp-Entry "jazz.dialect.syntax.attributes" module #f 37 18 37 48 ("scheme")
      {Lisp-Entry "getf" native #f 43 16 43 25 ()}
      {Lisp-Entry "system-format" native #f 44 16 44 34 ()}
      {Lisp-Entry "attributes" macro #f 84 15 84 25 ("set-property" ",setter" ",getter" "public" "setter" "system-format" "string->symbol" "getter" "let*" "set!" "'set!" ",value" "set-value" "nextmethod" "else" "list" "case" ",property" "get-value" ",init" ",name" "slot" "eq?" "if" "not-found:" "initialize" "'initialize" "getf" "init" "rest" "specifier" "parse-specifier" "name" "lambda" "append" "map" "node-properties" "override" "method" "begin" "value" "generate-symbol" "property" "cdr" "properties" "car" "inherited" "let" "symbol->string" "string->keyword" "symbol" "symbol->keyword" "cons" "unspecified" "define" "form")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "autoload.jazz"} 1257478471
    {Lisp-Entry "jazz.test.autoload" module #f 0 8 0 26 ("jazz")}}
  {Lisp-File-Entry {File jazz "src" "jazz" "validate" "autoload.jazz"} 1257476746
    {Lisp-Entry "jazz.validate.autoload" module #f 37 18 37 40 ("jazz")}})
"b"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "b.scm"} 1257474173
    {Lisp-Entry "test.performance.b" unit #f 0 6 0 24 ()
      {Lisp-Entry "g-separate" define #f 8 9 8 19 ("1" "%%fx-" "f-separate" "0" "%%fx=" "if" "n" "s")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "b.jazz"} 1257478639
    {Lisp-Entry "jazz.test.b" module #f 0 8 0 19 ("jazz")
      {Lisp-Entry "Version" class #f 3 7 3 14 ("Object")}}})
"bind"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind.scm"} 1257476759
    {Lisp-Entry "jazz.dialect.syntax.bind" module #f 38 18 38 42 ("scheme")
      {Lisp-Entry "bind" macro #f 56 16 56 20 ("expand-bind-car" "begin" "tree-value" "lambda" "with-uniqueness" "sourcify-if" "cdr" "body" "cddr" "car" "tree" "source-code" "cadr" "desourcify" "bindings" "let" "form-src")}
      {Lisp-Entry "expand-bind-car" define #f 68 9 68 24 ("expand-bind-car" ",car-symbol" "generate-symbol" "car-symbol" "pair?" "expand-bind-cdr" ",tree" ",specifier" ",car-binding" "if" "binding-specifier" "specifier" "symbol?" "cond" "cdr" "cdr-binding" "car" "car-binding" "let" "body" "tree" "bindings")}
      {Lisp-Entry "expand-bind-cdr" define #f 85 9 85 24 ("expand-bind-car" ",cdr-symbol" "generate-symbol" "cdr-symbol" "pair?" ",@body" ",tree" "cdr" ",cdr-binding" "let" "symbol?" "null?" "cond" "body" "tree" "cdr-binding")}}})
"bind-keywords"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind-keywords.scm"} 1257476759
    {Lisp-Entry "jazz.dialect.syntax.bind-keywords" module #f 38 18 38 51 ("scheme")
      {Lisp-Entry "last-tail" native #f 44 16 44 30 ()}
      {Lisp-Entry "bind-keywords" macro #f 57 16 57 29 ("error" "not-null?" ",@body" "unbox-list" "symbol?" "proper-list" ",default" "symbol->string" "string->keyword" "find-keyword" ",specifier" ",variable" "caddr" "if" "default" "binding-specifier" "specifier" "variable" "binding" "lambda" "map" "let*" ",rest" "box-list" ",box" "sourcify-if" "last-tail" "oth" "new-queue" "bnd" "generate-symbol" "box" "cdr" "body" "cddr" "car" "rest" "cadr" "source-code" "bindings" "let" "form-src")}}})
"bind-optionals"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind-optionals.scm"} 1257476759
    {Lisp-Entry "jazz.dialect.syntax.bind-optionals" module #f 38 18 38 52 ("scheme")
      {Lisp-Entry "bind-optionals" macro #f 61 16 61 30 (",@body" "error" "not-null?" "proper-list" ",value" ",specifier" ",variable" "set!" ",prog" ",default" "null?" "value" "caddr" "if" "default" "binding-specifier" "specifier" "variable" "binding" "lambda" "map" "let*" ",rest" ",scan" "sourcify-if" "prog" "generate-symbol" "scan" "cdr" "body" "cddr" "car" "rest" "cadr" "source-code" "bindings" "let" "form-src")}}})
"c"
 ({Lisp-File-Entry {File jazz "src" "jazz" "test" "c.jazz"} 1257478639
    {Lisp-Entry "jazz.test.c" module #f 0 8 0 19 ("jazz")}})
"cffi"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "cffi.jazz"} 1257476765
    {Lisp-Entry "jazz.test.cffi" module #f 37 8 37 22 ("#<<end-of-c-declare\nstatic int func2(mult* m, int n)\n{\n    return (*m)(n);\n}\nend-of-c-declare\n" "#<<end-of-c-declare\ntypedef int (mult)(int);\n\nstatic int multiply(int n)\n{\n    return n * n;\n}\n\nstatic mult* func1()\n{\n    return &multiply;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstruct S1_\n{\n    int x;\n    int y;\n};\n\ntypedef struct S1_ S1;\n\nstatic int struct1a(S1 s1)\n{\n    return s1.x + s1.y;\n}\n\n//static int struct1b(S1& s1)\n//{\n//    return s1.x + s1.y;\n//}\n\nstatic int struct1c(S1* s1)\n{\n    return s1->x + s1->y;\n}\n\nstatic void tst()\n{\n    S1 s;\n    \n    struct1a(s);\n    struct1c(&s);\n}\nend-of-c-declare\n" "int1" "c-type" "#<<end-of-c-declare\nstatic int scalar3(___SCMOBJ obj)\n{\n    return (int) obj;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int scalar2(int n)\n{\n    return n + n;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic void scalar1(int n)\n{\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nN = 2;\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int N;\nend-of-c-declare\n" "jazz")
      {Lisp-Entry "init1" definition #f 71 12 71 17 ("int" "c-function")}
      {Lisp-Entry "void" c-type #f 80 8 80 12 ("void" "native")}
      {Lisp-Entry "bool" c-type #f 81 8 81 12 ("bool" "native")}
      {Lisp-Entry "char" c-type #f 82 8 82 12 ("char" "native")}
      {Lisp-Entry "wchar_t" c-type #f 83 8 83 15 ("wchar_t" "native")}
      {Lisp-Entry "int" c-type #f 84 8 84 11 ("int" "native")}
      {Lisp-Entry "double" c-type #f 85 8 85 14 ("double" "native")}
      {Lisp-Entry "scheme-object" c-type #f 86 8 86 21 ("scheme-object" "native")}
      {Lisp-Entry "object" c-type #f 87 8 87 14 ("scheme-object")}
      {Lisp-Entry "scalar1" definition #f 98 12 98 19 ("void" "int" "c-function")}
      {Lisp-Entry "scalar2" definition #f 111 12 111 19 ("int" "c-function")}
      {Lisp-Entry "scalar3" definition #f 124 12 124 19 ("int" "object" "c-function")}
      {Lisp-Entry "ca" definition #f 186 12 186 14 ("2")}
      {Lisp-Entry "cb" definition #f 187 12 187 14 ("3")}
      {Lisp-Entry "e" c-enumeration #f 195 15 195 16 ("4" "ec" "2" "eb" "1" "ea")}
      {Lisp-Entry "S1" c-type #f 243 8 243 10 ("struct")}
      {Lisp-Entry "make-S1" definition #f 246 12 246 19 ("S1" "c-function")}
      {Lisp-Entry "struct1a" definition #f 251 12 251 20 ("int" "S1" "c-function")}
      {Lisp-Entry "struct1c" definition #f 257 12 257 20 ("int" "S1" "pointer" "c-function")}
      {Lisp-Entry "cast-S2->S2*" definition #f 268 12 268 24 ("error" "S2*" "object" "c-function" "S2" "'S2" "foreign-tags" "car" "eq?" "if" "s2" "lambda")}
      {Lisp-Entry "mult*" c-type #f 305 8 305 13 ("int" "function" "pointer")}
      {Lisp-Entry "func1" definition #f 324 12 324 17 ("mult*" "c-function")}}})
"classes"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "classes.scm"} 1257473843
    {Lisp-Entry "jazz.dialect.classes" unit #f 37 16 37 36 ()
      {Lisp-Entry "jazz.Definition-Declaration" define-class ("class") 45 19 45 46 ("%%set-definition-declaration-value" "%%get-definition-declaration-value" "value" "%%set-definition-declaration-signature" "%%get-definition-declaration-signature" "signature" "%%get-definition-declaration-expansion" "expansion" "jazz.allocate-definition-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Specialize" define-class ("class") 56 19 56 34 ("jazz.allocate-specialize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Generic-Declaration" define-class ("class") 65 19 65 43 ("%%set-generic-declaration-body" "%%get-generic-declaration-body" "body" "%%set-generic-declaration-signature" "%%get-generic-declaration-signature" "signature" "%%get-generic-declaration-dispatch-types" "dispatch-types" "jazz.allocate-generic-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Specific-Declaration" define-class ("class") 76 19 76 44 ("%%get-specific-declaration-root?" "root?" "%%set-specific-declaration-body" "%%get-specific-declaration-body" "body" "%%get-specific-declaration-signature" "signature" "%%get-specific-declaration-generic" "generic" "jazz.allocate-specific-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Category-Declaration" define-class ("class") 88 19 88 44 ("%%get-category-declaration-metaclass" "metaclass" "%%get-category-declaration-implementor" "implementor" "jazz.Object-Class" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Namespace-Declaration")}
      {Lisp-Entry "jazz.Class-Declaration" define-class ("class") 98 19 98 41 ("%%get-class-declaration-interfaces" "interfaces" "%%get-class-declaration-ascendant-base" "ascendant-base" "%%get-class-declaration-ascendant-relation" "ascendant-relation" "%%get-class-declaration-ascendant" "ascendant" "jazz.allocate-class-declaration" "jazz.Object-Class" "metaclass" "implementor" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Category-Declaration")}
      {Lisp-Entry "jazz.Interface-Declaration" define-class ("class") 110 19 110 45 ("%%get-interface-declaration-ascendants" "ascendants" "jazz.allocate-interface-declaration" "jazz.Object-Class" "metaclass" "implementor" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Category-Declaration")}
      {Lisp-Entry "jazz.Field-Declaration" define-class ("class") 119 19 119 41 ("jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Slot-Declaration" define-class ("class") 128 19 128 40 ("%%get-slot-declaration-setter-name" "setter-name" "%%get-slot-declaration-getter-name" "getter-name" "%%set-slot-declaration-initialize" "%%get-slot-declaration-initialize" "initialize" "jazz.allocate-slot-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Field-Declaration")}
      {Lisp-Entry "jazz.Property-Declaration" define-class ("class") 139 19 139 44 ("%%set-property-declaration-setter" "%%get-property-declaration-setter" "setter" "%%set-property-declaration-getter" "%%get-property-declaration-getter" "getter" "jazz.allocate-property-declaration" "jazz.Object-Class" "setter-name" "getter-name" "initialize" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Slot-Declaration")}
      {Lisp-Entry "jazz.Method-Declaration" define-class ("class") 149 19 149 42 ("%%set-method-declaration-body" "%%get-method-declaration-body" "body" "%%set-method-declaration-signature" "%%get-method-declaration-signature" "signature" "%%get-method-declaration-synchronized" "synchronized" "%%get-method-declaration-remote" "remote" "%%get-method-declaration-expansion" "expansion" "%%get-method-declaration-abstraction" "abstraction" "%%get-method-declaration-propagation" "propagation" "%%get-method-declaration-root" "root" "jazz.allocate-method-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Field-Declaration")}
      {Lisp-Entry "jazz.With-Self" define-class ("class") 165 19 165 33 ("%%get-with-self-body" "body" "jazz.allocate-with-self" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.With-Dynamic-Self" define-class ("class") 174 19 174 41 ("%%get-with-dynamic-self-body" "body" "%%get-with-dynamic-self-code" "code" "jazz.allocate-with-dynamic-self" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Cast" define-class ("class") 184 19 184 28 ("%%get-cast-expression" "expression" "jazz.allocate-cast" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Construct" define-class ("class") 193 19 193 33 ("%%get-construct-values" "values" "%%get-construct-class" "class" "jazz.allocate-construct" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Dispatch" define-class ("class") 203 19 203 32 ("%%get-dispatch-arguments" "arguments" "%%get-dispatch-name" "name" "jazz.allocate-dispatch" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Jazz-Dialect" define-class ("class") 213 19 213 36 ("jazz.allocate-jazz-dialect" "jazz.Object-Class" "bindings" "jazz.Dialect")}
      {Lisp-Entry "jazz.Jazz-Walker" define-class ("class") 222 19 222 35 ("jazz.allocate-jazz-walker" "jazz.Object-Class" "autoloads" "inclusions" "references" "variables" "literals" "errors" "warnings" "jazz.Scheme-Walker")}}})
"common"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "common.scm"} 1257474173
    {Lisp-Entry "test.performance.common" unit #f 0 6 0 29 ("W" "Z" "X" "jazz.encapsulate-class")
      {Lisp-Entry "ff" define #f 11 9 11 11 ("1" "%%fx-" "ff" "%%pair?" "begin" "0" "%%fx>" "if" "n")}
      {Lisp-Entry "gg" define #f 24 9 24 11 ("1" "%%fx-" "gg" "%%pair?" "begin" "0" "%%fx>" "if" "n")}
      {Lisp-Entry "f-module-block/standard/not-safe" define #f 42 9 42 41 ("1" "%%fx-" "g-module-block/standard/not-safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/standard/not-safe" define #f 48 9 48 41 ("1" "%%fx-" "f-module-block/standard/not-safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-block/runtime/safe" define #f 66 9 66 36 ("1" "%%fx-" "g-module-block/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/runtime/safe" define #f 72 9 72 36 ("1" "%%fx-" "f-module-block/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-separate/runtime/safe" define #f 90 9 90 39 ("1" "%%fx-" "g-module-separate/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-separate/runtime/safe" define #f 96 9 96 39 ("1" "%%fx-" "f-module-separate/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-block/runtime/notsafe" define #f 114 9 114 39 ("1" "%%fx-" "g-module-block/runtime/notsafe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/runtime/notsafe" define #f 120 9 120 39 ("1" "%%fx-" "f-module-block/runtime/notsafe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module" define #f 137 9 137 17 ("1" "%%fx-" "g-module" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module" define #f 143 9 143 17 ("1" "%%fx-" "f-module" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "X" define-class ("class") 160 19 160 20 ("allocate-x" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "X" define-class ("class runtime") 163 27 163 28 ()}
      {Lisp-Entry "new-x" define #f 168 9 168 14 ("X" "allocate-x")}
      {Lisp-Entry "f-generic" generic/specific ("X") 172 22 172 31 ("n")}
      {Lisp-Entry "f-generic" generic/specific ("X") 174 23 174 32 ("1" "%%fx-" "x" "g-generic" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "g-generic" generic/specific ("X") 180 22 180 31 ("n")}
      {Lisp-Entry "g-generic" generic/specific ("X") 182 23 182 32 ("1" "%%fx-" "x" "f-generic" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "Z" define-class ("class runtime") 193 27 193 28 ()}
      {Lisp-Entry "f-vtable" generic/specific ("Z~virtual-runtime") 196 30 196 38 ("n")}
      {Lisp-Entry "g-vtable" generic/specific ("Z~virtual-runtime") 197 30 197 38 ("n")}
      {Lisp-Entry "new-z" define #f 200 9 200 14 ("Z" "allocate-z")}
      {Lisp-Entry "f-vtable" generic/specific ("Z") 204 21 204 29 ("1" "%%fx-" "z" "g-vtable" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "g-vtable" generic/specific ("Z") 210 21 210 29 ("1" "%%fx-" "z" "f-vtable" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "W" define-class ("class runtime") 219 27 219 28 ()}
      {Lisp-Entry "f-vtable" generic/specific ("W") 222 21 222 29 ("n")}
      {Lisp-Entry "h" generic/specific ("W~virtual-runtime") 226 30 226 31 ()}
      {Lisp-Entry "h" generic/specific ("W") 229 21 229 22 ()}}})
"continuation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "continuation.scm"} 1257473844
    {Lisp-Entry "jazz.dialect.core.continuation" unit #f 37 16 37 46 ()
      {Lisp-Entry "jazz.continuation?" define #f 42 13 42 31 ("%%continuation?" "obj")}
      {Lisp-Entry "jazz.continuation-capture" define #f 46 13 46 38 ("%%continuation-capture" "proc")}
      {Lisp-Entry "jazz.continuation-graft" define #f 50 13 50 36 ("%%continuation-graft" "proc" "cont")}
      {Lisp-Entry "jazz.continuation-return" define #f 54 12 54 36 ("continuation-return")}}})
"core"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "walker" "core.jazz"} 1257478909
    {Lisp-Entry "jazz.dialect.walker.core" module #f 37 18 37 42 ("jazz.dialect")
      {Lisp-Entry "Walk-Binding" class #f 52 7 52 19 ("Type")}
      {Lisp-Entry "walk-binding-lookup" native #f 55 15 55 39 ()}
      {Lisp-Entry "walk-binding-referenced" native #f 56 15 56 43 ()}
      {Lisp-Entry "emit-binding-reference" native #f 57 15 57 42 ()}
      {Lisp-Entry "walk-binding-validate-call" native #f 58 15 58 46 ()}
      {Lisp-Entry "emit-binding-call" native #f 59 15 59 37 ()}
      {Lisp-Entry "emit-inlined-binding-call" native #f 60 15 60 45 ()}
      {Lisp-Entry "walk-binding-validate-assignment" native #f 61 15 61 52 ()}
      {Lisp-Entry "walk-binding-assignable?" native #f 62 15 62 44 ()}
      {Lisp-Entry "emit-binding-assignment" native #f 63 15 63 43 ()}
      {Lisp-Entry "walk-binding-walkable?" native #f 64 15 64 42 ()}
      {Lisp-Entry "walk-binding-walk-form" native #f 65 15 65 42 ()}
      {Lisp-Entry "walk-binding-expandable?" native #f 66 15 66 44 ()}
      {Lisp-Entry "walk-binding-expand-form" native #f 67 15 67 44 ()}
      {Lisp-Entry "Lexical-Binding" class #f 75 7 75 22 ("Walk-Binding")
        {Lisp-Entry "name" slot #f 78 8 78 12 ()}
        {Lisp-Entry "get-name" accessor #f 78 20 78 28 ()}
        {Lisp-Entry "type" slot #f 79 8 79 12 ()}
        {Lisp-Entry "get-type" accessor #f 79 20 79 28 ()}
        {Lisp-Entry "hits" slot #f 80 8 80 12 ()}
        {Lisp-Entry "get-hits" accessor #f 80 23 80 31 ()}
        {Lisp-Entry "set-hits" accessor #f 80 23 80 31 ()}
        {Lisp-Entry "print" method #f 83 20 83 25 ("get-name" "format" "lambda" "self" "print-unreadable" "detail" "output")}}
      {Lisp-Entry "resolve-binding" native #f 89 15 89 35 ()}
      {Lisp-Entry "Declaration" class #f 97 7 97 18 ("Lexical-Binding")
        {Lisp-Entry "access" slot #f 100 8 100 14 ()}
        {Lisp-Entry "get-access" accessor #f 100 29 100 37 ()}
        {Lisp-Entry "compatibility" slot #f 101 8 101 21 ()}
        {Lisp-Entry "get-compatibility" accessor #f 101 29 101 37 ()}
        {Lisp-Entry "attributes" slot #f 102 8 102 18 ()}
        {Lisp-Entry "get-attributes" accessor #f 102 29 102 37 ()}
        {Lisp-Entry "toplevel" slot #f 103 8 103 16 ()}
        {Lisp-Entry "get-toplevel" accessor #f 103 29 103 37 ()}
        {Lisp-Entry "parent" slot #f 104 8 104 14 ()}
        {Lisp-Entry "get-parent" accessor #f 104 29 104 37 ()}
        {Lisp-Entry "locator" slot #f 105 8 105 15 ()}
        {Lisp-Entry "get-locator" accessor #f 105 29 105 37 ()}
        {Lisp-Entry "source" slot #f 106 8 106 14 ()}
        {Lisp-Entry "get-source" accessor #f 106 29 106 37 ()}}
      {Lisp-Entry "lookup-declaration" native #f 109 15 109 38 ()}
      {Lisp-Entry "update-declaration" native #f 110 15 110 38 ()}
      {Lisp-Entry "get-declaration-inclusions" native #f 111 15 111 46 ()}
      {Lisp-Entry "emit-declaration" native #f 112 15 112 36 ()}
      {Lisp-Entry "expand-referenced-declaration" native #f 113 15 113 49 ()}
      {Lisp-Entry "fold-statement" native #f 114 15 114 34 ()}
      {Lisp-Entry "fold-declaration" native #f 115 15 115 36 ()}
      {Lisp-Entry "fold-expression" native #f 116 15 116 35 ()}
      {Lisp-Entry "private-access" native #f 117 15 117 34 ()}
      {Lisp-Entry "public-access" native #f 118 15 118 33 ()}
      {Lisp-Entry "protected-access" native #f 119 15 119 36 ()}
      {Lisp-Entry "Declaration-Reference" class #f 127 7 127 28 ("Object")
        {Lisp-Entry "name" slot #f 130 8 130 12 ()}
        {Lisp-Entry "get-name" accessor #f 130 27 130 35 ()}
        {Lisp-Entry "declaration" slot #f 131 8 131 19 ()}
        {Lisp-Entry "get-declaration" accessor #f 131 27 131 35 ()}}
      {Lisp-Entry "resolve-reference" native #f 134 15 134 37 ()}
      {Lisp-Entry "Module-Reference" class #f 142 7 142 23 ("Declaration-Reference")}
      {Lisp-Entry "Export-Reference" class #f 150 7 150 23 ("Declaration-Reference")
        {Lisp-Entry "module-reference" slot #f 153 8 153 24 ()}
        {Lisp-Entry "get-module-reference" accessor #f 153 32 153 40 ()}}
      {Lisp-Entry "Autoload-Reference" class #f 161 7 161 25 ("Export-Reference")}
      {Lisp-Entry "Unit-Declaration" class #f 169 7 169 23 ("Declaration")
        {Lisp-Entry "requires" slot #f 172 8 172 16 ()}
        {Lisp-Entry "get-requires" accessor #f 172 24 172 32 ()}}
      {Lisp-Entry "Namespace-Declaration" class #f 180 7 180 28 ("Declaration")
        {Lisp-Entry "lookups" slot #f 183 8 183 15 ()}
        {Lisp-Entry "get-lookups" accessor #f 183 24 183 32 ()}
        {Lisp-Entry "children" slot #f 184 8 184 16 ()}
        {Lisp-Entry "get-children" accessor #f 184 24 184 32 ()}
        {Lisp-Entry "body" slot #f 185 8 185 12 ()}
        {Lisp-Entry "get-body" accessor #f 185 24 185 32 ()}}
      {Lisp-Entry "%%get-access-lookup" native #f 188 15 188 34 ()}
      {Lisp-Entry "Module-Declaration" class #f 196 7 196 25 ("Namespace-Declaration")
        {Lisp-Entry "walker" slot #f 199 8 199 14 ()}
        {Lisp-Entry "get-walker" accessor #f 199 31 199 39 ()}
        {Lisp-Entry "dialect-name" slot #f 200 8 200 20 ()}
        {Lisp-Entry "get-dialect-name" accessor #f 200 31 200 39 ()}
        {Lisp-Entry "dialect-invoice" slot #f 201 8 201 23 ()}
        {Lisp-Entry "get-dialect-invoice" accessor #f 201 31 201 39 ()}
        {Lisp-Entry "requires" slot #f 202 8 202 16 ()}
        {Lisp-Entry "get-requires" accessor #f 202 31 202 39 ()}
        {Lisp-Entry "exports" slot #f 203 8 203 15 ()}
        {Lisp-Entry "get-exports" accessor #f 203 31 203 39 ()}
        {Lisp-Entry "imports" slot #f 204 8 204 15 ()}
        {Lisp-Entry "get-imports" accessor #f 204 31 204 39 ()}
        {Lisp-Entry "proclaims" slot #f 205 8 205 17 ()}
        {Lisp-Entry "get-proclaims" accessor #f 205 31 205 39 ()}}
      {Lisp-Entry "Module-Invoice" class #f 213 7 213 21 ("Object")
        {Lisp-Entry "name" slot #f 216 8 216 12 ()}
        {Lisp-Entry "get-name" accessor #f 216 23 216 31 ()}
        {Lisp-Entry "module" slot #f 217 8 217 14 ()}
        {Lisp-Entry "get-module" accessor #f 217 23 217 31 ()}
        {Lisp-Entry "phase" slot #f 218 8 218 13 ()}
        {Lisp-Entry "get-phase" accessor #f 218 23 218 31 ()}
        {Lisp-Entry "version" slot #f 219 8 219 15 ()}
        {Lisp-Entry "get-version" accessor #f 219 23 219 31 ()}
        {Lisp-Entry "only" slot #f 220 8 220 12 ()}
        {Lisp-Entry "get-only" accessor #f 220 23 220 31 ()}
        {Lisp-Entry "except" slot #f 221 8 221 14 ()}
        {Lisp-Entry "get-except" accessor #f 221 23 221 31 ()}
        {Lisp-Entry "prefix" slot #f 222 8 222 14 ()}
        {Lisp-Entry "get-prefix" accessor #f 222 23 222 31 ()}
        {Lisp-Entry "rename" slot #f 223 8 223 14 ()}
        {Lisp-Entry "get-rename" accessor #f 223 23 223 31 ()}
        {Lisp-Entry "print" method #f 226 20 226 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "Export-Invoice" class #f 238 7 238 21 ("Module-Invoice")
        {Lisp-Entry "autoload" slot #f 241 8 241 16 ()}
        {Lisp-Entry "get-autoload" accessor #f 241 24 241 32 ()}}
      {Lisp-Entry "Import-Invoice" class #f 249 7 249 21 ("Module-Invoice")
        {Lisp-Entry "hit?" slot #f 252 8 252 12 ()}
        {Lisp-Entry "get-hit?" accessor #f 252 20 252 28 ()}}
      {Lisp-Entry "Export-Declaration" class #f 260 7 260 25 ("Declaration")
        {Lisp-Entry "symbol" slot #f 263 8 263 14 ()}
        {Lisp-Entry "get-symbol" accessor #f 263 22 263 30 ()}}
      {Lisp-Entry "Export-Syntax-Declaration" class #f 271 7 271 32 ("Declaration")
        {Lisp-Entry "symbol" slot #f 274 8 274 14 ()}
        {Lisp-Entry "get-symbol" accessor #f 274 22 274 30 ()}}
      {Lisp-Entry "Autoload-Declaration" class #f 282 7 282 27 ("Declaration")
        {Lisp-Entry "module" slot #f 285 8 285 14 ()}
        {Lisp-Entry "get-module" accessor #f 285 31 285 39 ()}
        {Lisp-Entry "exported-module" slot #f 286 8 286 23 ()}
        {Lisp-Entry "get-exported-module" accessor #f 286 31 286 39 ()}
        {Lisp-Entry "declaration" slot #f 287 8 287 19 ()}
        {Lisp-Entry "get-declaration" accessor #f 287 31 287 39 ()}}
      {Lisp-Entry "Literal" class #f 295 7 295 14 ("Object")
        {Lisp-Entry "name" slot #f 298 8 298 12 ()}
        {Lisp-Entry "get-name" accessor #f 298 25 298 33 ()}
        {Lisp-Entry "arguments" slot #f 299 8 299 17 ()}
        {Lisp-Entry "get-arguments" accessor #f 299 25 299 33 ()}}
      {Lisp-Entry "Macro-Declaration" class #f 307 7 307 24 ("Declaration")
        {Lisp-Entry "signature" slot #f 310 8 310 17 ()}
        {Lisp-Entry "get-signature" accessor #f 310 25 310 33 ()}
        {Lisp-Entry "body" slot #f 311 8 311 12 ()}
        {Lisp-Entry "get-body" accessor #f 311 25 311 33 ()}}
      {Lisp-Entry "Syntax-Declaration" class #f 319 7 319 25 ("Declaration")
        {Lisp-Entry "signature" slot #f 322 8 322 17 ()}
        {Lisp-Entry "get-signature" accessor #f 322 25 322 33 ()}
        {Lisp-Entry "body" slot #f 323 8 323 12 ()}
        {Lisp-Entry "get-body" accessor #f 323 25 323 33 ()}}
      {Lisp-Entry "Define-Syntax-Declaration" class #f 331 7 331 32 ("Syntax-Declaration")}
      {Lisp-Entry "Opt-Type" class #f 339 7 339 15 ("Type")
        {Lisp-Entry "type" slot #f 342 8 342 12 ()}
        {Lisp-Entry "get-type" accessor #f 342 20 342 28 ()}}
      {Lisp-Entry "Key-Type" class #f 350 7 350 15 ("Type")
        {Lisp-Entry "key" slot #f 353 8 353 11 ()}
        {Lisp-Entry "get-key" accessor #f 353 20 353 28 ()}
        {Lisp-Entry "type" slot #f 354 8 354 12 ()}
        {Lisp-Entry "get-type" accessor #f 354 20 354 28 ()}}
      {Lisp-Entry "Rest-Type" class #f 362 7 362 16 ("Type")
        {Lisp-Entry "type" slot #f 365 8 365 12 ()}
        {Lisp-Entry "get-type" accessor #f 365 20 365 28 ()}}
      {Lisp-Entry "Function-Type" class #f 373 7 373 20 ("Type")
        {Lisp-Entry "mandatory" slot #f 376 8 376 17 ()}
        {Lisp-Entry "get-mandatory" accessor #f 376 26 376 34 ()}
        {Lisp-Entry "positional" slot #f 377 8 377 18 ()}
        {Lisp-Entry "get-positional" accessor #f 377 26 377 34 ()}
        {Lisp-Entry "optional" slot #f 378 8 378 16 ()}
        {Lisp-Entry "get-optional" accessor #f 378 26 378 34 ()}
        {Lisp-Entry "named" slot #f 379 8 379 13 ()}
        {Lisp-Entry "get-named" accessor #f 379 26 379 34 ()}
        {Lisp-Entry "rest" slot #f 380 8 380 12 ()}
        {Lisp-Entry "get-rest" accessor #f 380 26 380 34 ()}
        {Lisp-Entry "result" slot #f 381 8 381 14 ()}
        {Lisp-Entry "get-result" accessor #f 381 26 381 34 ()}}
      {Lisp-Entry "Category-Type" class #f 389 7 389 20 ("Type")
        {Lisp-Entry "declaration" slot #f 392 8 392 19 ()}
        {Lisp-Entry "get-declaration" accessor #f 392 27 392 35 ()}}
      {Lisp-Entry "Values-Type" class #f 400 7 400 18 ("Type")
        {Lisp-Entry "types" slot #f 403 8 403 13 ()}
        {Lisp-Entry "get-types" accessor #f 403 21 403 29 ()}}
      {Lisp-Entry "Restriction-Type" class #f 411 7 411 23 ("Type")
        {Lisp-Entry "base" slot #f 414 8 414 12 ()}
        {Lisp-Entry "get-base" accessor #f 414 20 414 28 ()}
        {Lisp-Entry "type" slot #f 415 8 415 12 ()}
        {Lisp-Entry "get-type" accessor #f 415 20 415 28 ()}}
      {Lisp-Entry "Complement-Type" class #f 423 7 423 22 ("Type")
        {Lisp-Entry "type" slot #f 426 8 426 12 ()}
        {Lisp-Entry "get-type" accessor #f 426 20 426 28 ()}}
      {Lisp-Entry "Union-Type" class #f 434 7 434 17 ("Type")
        {Lisp-Entry "types" slot #f 437 8 437 13 ()}
        {Lisp-Entry "get-types" accessor #f 437 21 437 29 ()}}
      {Lisp-Entry "Template-Type" class #f 445 7 445 20 ("Type")
        {Lisp-Entry "class" slot #f 448 8 448 13 ()}
        {Lisp-Entry "get-class" accessor #f 448 21 448 29 ()}
        {Lisp-Entry "types" slot #f 449 8 449 13 ()}
        {Lisp-Entry "get-types" accessor #f 449 21 449 29 ()}}
      {Lisp-Entry "Nillable-Type" class #f 457 7 457 20 ("Type")
        {Lisp-Entry "type" slot #f 460 8 460 12 ()}
        {Lisp-Entry "get-type" accessor #f 460 20 460 28 ()}}
      {Lisp-Entry "C-Type-Declaration" class #f 468 7 468 25 ("Declaration")
        {Lisp-Entry "kind" slot #f 471 8 471 12 ()}
        {Lisp-Entry "get-kind" accessor #f 471 29 471 37 ()}
        {Lisp-Entry "expansion" slot #f 472 8 472 17 ()}
        {Lisp-Entry "get-expansion" accessor #f 472 29 472 37 ()}
        {Lisp-Entry "base-type" slot #f 473 8 473 17 ()}
        {Lisp-Entry "get-base-type" accessor #f 473 29 473 37 ()}
        {Lisp-Entry "pointer-types" slot #f 474 8 474 21 ()}
        {Lisp-Entry "get-pointer-types" accessor #f 474 29 474 37 ()}
        {Lisp-Entry "inclusions" slot #f 475 8 475 18 ()}
        {Lisp-Entry "get-inclusions" accessor #f 475 29 475 37 ()}
        {Lisp-Entry "c-to-scheme" slot #f 476 8 476 19 ()}
        {Lisp-Entry "get-c-to-scheme" accessor #f 476 29 476 37 ()}
        {Lisp-Entry "scheme-to-c" slot #f 477 8 477 19 ()}
        {Lisp-Entry "get-scheme-to-c" accessor #f 477 29 477 37 ()}
        {Lisp-Entry "declare" slot #f 478 8 478 15 ()}
        {Lisp-Entry "get-declare" accessor #f 478 29 478 37 ()}}
      {Lisp-Entry "C-Definition-Declaration" class #f 486 7 486 31 ("Declaration")
        {Lisp-Entry "signature" slot #f 489 8 489 17 ()}
        {Lisp-Entry "get-signature" accessor #f 489 31 489 39 ()}
        {Lisp-Entry "parameter-types" slot #f 490 8 490 23 ()}
        {Lisp-Entry "get-parameter-types" accessor #f 490 31 490 39 ()}
        {Lisp-Entry "result-type" slot #f 491 8 491 19 ()}
        {Lisp-Entry "get-result-type" accessor #f 491 31 491 39 ()}
        {Lisp-Entry "c-name" slot #f 492 8 492 14 ()}
        {Lisp-Entry "get-c-name" accessor #f 492 31 492 39 ()}
        {Lisp-Entry "scope" slot #f 493 8 493 13 ()}
        {Lisp-Entry "get-scope" accessor #f 493 31 493 39 ()}
        {Lisp-Entry "body" slot #f 494 8 494 12 ()}
        {Lisp-Entry "get-body" accessor #f 494 31 494 39 ()}}
      {Lisp-Entry "Dialect" class #f 502 7 502 14 ("Object")
        {Lisp-Entry "bindings" slot #f 505 8 505 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 505 24 505 32 ()}}
      {Lisp-Entry "Walker" class #f 513 7 513 13 ("Object")
        {Lisp-Entry "warnings" slot #f 516 8 516 16 ()}
        {Lisp-Entry "get-warnings" accessor #f 516 26 516 34 ()}
        {Lisp-Entry "errors" slot #f 517 8 517 14 ()}
        {Lisp-Entry "get-errors" accessor #f 517 26 517 34 ()}
        {Lisp-Entry "literals" slot #f 518 8 518 16 ()}
        {Lisp-Entry "get-literals" accessor #f 518 26 518 34 ()}
        {Lisp-Entry "variables" slot #f 519 8 519 17 ()}
        {Lisp-Entry "get-variables" accessor #f 519 26 519 34 ()}
        {Lisp-Entry "references" slot #f 520 8 520 18 ()}
        {Lisp-Entry "get-references" accessor #f 520 26 520 34 ()}
        {Lisp-Entry "inclusions" slot #f 521 8 521 18 ()}
        {Lisp-Entry "get-inclusions" accessor #f 521 26 521 34 ()}
        {Lisp-Entry "autoloads" slot #f 522 8 522 17 ()}
        {Lisp-Entry "get-autoloads" accessor #f 522 26 522 34 ()}}
      {Lisp-Entry "walker-environment" native #f 525 15 525 38 ()}
      {Lisp-Entry "walk-declaration" native #f 526 15 526 36 ()}
      {Lisp-Entry "validate-access" native #f 527 15 527 35 ()}
      {Lisp-Entry "walk-free-reference" native #f 528 15 528 39 ()}
      {Lisp-Entry "walk-symbol-assignment" native #f 529 15 529 42 ()}
      {Lisp-Entry "walk-free-assignment" native #f 530 15 530 40 ()}
      {Lisp-Entry "walk-symbol" native #f 531 15 531 31 ()}
      {Lisp-Entry "walk-form" native #f 532 15 532 29 ()}
      {Lisp-Entry "validate-proclaim" native #f 533 15 533 37 ()}
      {Lisp-Entry "validate-arguments" native #f 534 15 534 38 ()}
      {Lisp-Entry "Walk-Context" class #f 542 7 542 19 ("Object")
        {Lisp-Entry "policy" slot #f 545 8 545 14 ()}
        {Lisp-Entry "get-policy" accessor #f 545 24 545 32 ()}
        {Lisp-Entry "locator" slot #f 546 8 546 15 ()}
        {Lisp-Entry "get-locator" accessor #f 546 24 546 32 ()}
        {Lisp-Entry "pathname" slot #f 547 8 547 16 ()}
        {Lisp-Entry "get-pathname" accessor #f 547 24 547 32 ()}}
      {Lisp-Entry "Walk-Location" class #f 555 15 555 28 ("Object")
        {Lisp-Entry "unit-locator" slot #f 558 8 558 20 ()}
        {Lisp-Entry "get-unit-locator" accessor #f 558 35 558 43 ()}
        {Lisp-Entry "declaration-locator" slot #f 559 8 559 27 ()}
        {Lisp-Entry "get-declaration-locator" accessor #f 559 35 559 43 ()}
        {Lisp-Entry "locat" slot #f 560 8 560 13 ()}
        {Lisp-Entry "get-locat" accessor #f 560 35 560 43 ()}
        {Lisp-Entry "initialize" method #f 563 20 563 30 ("locat~self" "declaration-locator~self" "unit-locator~self" "set!" "nextmethod" "locat" "declaration-locator" "unit-locator")}
        {Lisp-Entry "print" method #f 570 20 570 25 ("locat" "declaration-locator" "unit-locator" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "Walk-Problem" class #f 583 15 583 27 ("Error")
        {Lisp-Entry "location" slot #f 586 8 586 16 ()}
        {Lisp-Entry "get-location" accessor #f 586 24 586 32 ()}}
      {Lisp-Entry "Walk-Problems" class #f 594 15 594 28 ("Error")
        {Lisp-Entry "warnings" slot #f 597 8 597 16 ()}
        {Lisp-Entry "get-warnings" accessor #f 597 24 597 32 ()}
        {Lisp-Entry "errors" slot #f 598 8 598 14 ()}
        {Lisp-Entry "get-errors" accessor #f 598 24 598 32 ()}}
      {Lisp-Entry "Walk-Warning" class #f 606 15 606 27 ("Walk-Problem")}
      {Lisp-Entry "Walk-Error" class #f 614 15 614 25 ("Walk-Problem")}
      {Lisp-Entry "Unresolved-Error" class #f 622 15 622 31 ("Walk-Error")
        {Lisp-Entry "symbol" slot #f 625 8 625 14 ()}
        {Lisp-Entry "get-symbol" accessor #f 625 22 625 30 ()}}
      {Lisp-Entry "Walk-Frame" class #f 633 7 633 17 ("Walk-Binding")
        {Lisp-Entry "bindings" slot #f 636 8 636 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 636 24 636 32 ()}}
      {Lisp-Entry "Signature" class #f 644 7 644 16 ("Object")
        {Lisp-Entry "mandatory" slot #f 647 8 647 17 ()}
        {Lisp-Entry "get-mandatory" accessor #f 647 26 647 34 ()}
        {Lisp-Entry "positional" slot #f 648 8 648 18 ()}
        {Lisp-Entry "get-positional" accessor #f 648 26 648 34 ()}
        {Lisp-Entry "optional" slot #f 649 8 649 16 ()}
        {Lisp-Entry "get-optional" accessor #f 649 26 649 34 ()}
        {Lisp-Entry "named" slot #f 650 8 650 13 ()}
        {Lisp-Entry "get-named" accessor #f 650 26 650 34 ()}
        {Lisp-Entry "rest" slot #f 651 8 651 12 ()}
        {Lisp-Entry "get-rest" accessor #f 651 26 651 34 ()}}
      {Lisp-Entry "Symbol-Binding" class #f 659 7 659 21 ("Lexical-Binding")
        {Lisp-Entry "gensym" slot #f 662 8 662 14 ()}
        {Lisp-Entry "get-gensym" accessor #f 662 22 662 30 ()}}
      {Lisp-Entry "Variable" class #f 670 7 670 15 ("Symbol-Binding")
        {Lisp-Entry "reference-count" slot #f 673 8 673 23 ()}
        {Lisp-Entry "get-reference-count" accessor #f 673 31 673 39 ()}}
      {Lisp-Entry "NextMethod-Variable" class #f 681 7 681 26 ("Variable")}
      {Lisp-Entry "Parameter" class #f 689 7 689 16 ("Variable")}
      {Lisp-Entry "Dynamic-Parameter" class #f 697 7 697 24 ("Parameter")
        {Lisp-Entry "class" slot #f 700 8 700 13 ()}
        {Lisp-Entry "get-class" accessor #f 700 21 700 29 ()}}
      {Lisp-Entry "Optional-Parameter" class #f 708 7 708 25 ("Parameter")
        {Lisp-Entry "default" slot #f 711 8 711 15 ()}
        {Lisp-Entry "get-default" accessor #f 711 23 711 31 ()}}
      {Lisp-Entry "Named-Parameter" class #f 719 7 719 22 ("Parameter")
        {Lisp-Entry "default" slot #f 722 8 722 15 ()}
        {Lisp-Entry "get-default" accessor #f 722 23 722 31 ()}}
      {Lisp-Entry "Rest-Parameter" class #f 730 7 730 21 ("Parameter")}
      {Lisp-Entry "Dynamic-Self-Binding" class #f 738 7 738 27 ("Lexical-Binding")
        {Lisp-Entry "code" slot #f 741 8 741 12 ()}
        {Lisp-Entry "get-code" accessor #f 741 20 741 28 ()}}
      {Lisp-Entry "Local-Variable-Binding" class #f 749 7 749 29 ("Lexical-Binding")
        {Lisp-Entry "variable" slot #f 752 8 752 16 ()}
        {Lisp-Entry "get-variable" accessor #f 752 24 752 32 ()}}
      {Lisp-Entry "Macro-Symbol" class #f 760 7 760 19 ("Symbol-Binding")
        {Lisp-Entry "getter" slot #f 763 8 763 14 ()}
        {Lisp-Entry "get-getter" accessor #f 763 22 763 30 ()}
        {Lisp-Entry "setter" slot #f 764 8 764 14 ()}
        {Lisp-Entry "get-setter" accessor #f 764 22 764 30 ()}}
      {Lisp-Entry "Form-Binding" class #f 772 7 772 19 ("Lexical-Binding")}
      {Lisp-Entry "Special-Form" class #f 780 7 780 19 ("Form-Binding")
        {Lisp-Entry "walk" slot #f 783 8 783 12 ()}
        {Lisp-Entry "get-walk" accessor #f 783 20 783 28 ()}}
      {Lisp-Entry "Macro-Form" class #f 791 7 791 17 ("Form-Binding")
        {Lisp-Entry "expander" slot #f 794 8 794 16 ()}
        {Lisp-Entry "get-expander" accessor #f 794 24 794 32 ()}}
      {Lisp-Entry "Syntax-Form" class #f 802 7 802 18 ("Form-Binding")
        {Lisp-Entry "expander" slot #f 805 8 805 16 ()}
        {Lisp-Entry "get-expander" accessor #f 805 24 805 32 ()}}
      {Lisp-Entry "Define-Syntax-Form" class #f 813 7 813 25 ("Syntax-Form")
        {Lisp-Entry "environment" slot #f 816 8 816 19 ()}
        {Lisp-Entry "get-environment" accessor #f 816 27 816 35 ()}}
      {Lisp-Entry "Syntactic-Closure" class #f 824 7 824 24 ("Object")
        {Lisp-Entry "environment" slot #f 827 8 827 19 ()}
        {Lisp-Entry "get-environment" accessor #f 827 27 827 35 ()}
        {Lisp-Entry "variables" slot #f 828 8 828 17 ()}
        {Lisp-Entry "get-variables" accessor #f 828 27 828 35 ()}
        {Lisp-Entry "form" slot #f 829 8 829 12 ()}
        {Lisp-Entry "get-form" accessor #f 829 27 829 35 ()}}
      {Lisp-Entry "Annotated-Variable" class #f 837 7 837 25 ("Object")
        {Lisp-Entry "variable" slot #f 840 8 840 16 ()}
        {Lisp-Entry "get-variable" accessor #f 840 29 840 37 ()}
        {Lisp-Entry "declared-type" slot #f 841 8 841 21 ()}
        {Lisp-Entry "get-declared-type" accessor #f 841 29 841 37 ()}
        {Lisp-Entry "type" slot #f 842 8 842 12 ()}
        {Lisp-Entry "get-type" accessor #f 842 29 842 37 ()}}
      {Lisp-Entry "Restricted-Binding" class #f 850 7 850 25 ("Object")
        {Lisp-Entry "binding" slot #f 853 8 853 15 ()}
        {Lisp-Entry "get-binding" accessor #f 853 23 853 31 ()}
        {Lisp-Entry "type" slot #f 854 8 854 12 ()}
        {Lisp-Entry "get-type" accessor #f 854 23 854 31 ()}}
      {Lisp-Entry "Annotated-Frame" class #f 862 7 862 22 ("Object")
        {Lisp-Entry "variables" slot #f 865 8 865 17 ()}
        {Lisp-Entry "get-variables" accessor #f 865 25 865 33 ()}
        {Lisp-Entry "reset" slot #f 866 8 866 13 ()}
        {Lisp-Entry "get-reset" accessor #f 866 25 866 33 ()}}
      {Lisp-Entry "Code" class #f 874 7 874 11 ("Object")
        {Lisp-Entry "form" slot #f 877 8 877 12 ()}
        {Lisp-Entry "get-form" accessor #f 877 22 877 30 ()}
        {Lisp-Entry "type" slot #f 878 8 878 12 ()}
        {Lisp-Entry "get-type" accessor #f 878 22 878 30 ()}
        {Lisp-Entry "source" slot #f 879 8 879 14 ()}
        {Lisp-Entry "get-source" accessor #f 879 22 879 30 ()}}
      {Lisp-Entry "Access" class #f 887 7 887 13 ("Object")
        {Lisp-Entry "name" slot #f 890 8 890 12 ()}
        {Lisp-Entry "get-name" accessor #f 890 23 890 31 ()}
        {Lisp-Entry "context" slot #f 891 8 891 15 ()}
        {Lisp-Entry "get-context" accessor #f 891 23 891 31 ()}}
      {Lisp-Entry "Expression" class #f 899 7 899 17 ("Object")
        {Lisp-Entry "type" slot #f 902 8 902 12 ()}
        {Lisp-Entry "get-type" accessor #f 902 22 902 30 ()}
        {Lisp-Entry "source" slot #f 903 8 903 14 ()}
        {Lisp-Entry "get-source" accessor #f 903 22 903 30 ()}}
      {Lisp-Entry "emit-expression" native #f 906 15 906 35 ()}
      {Lisp-Entry "emit-call" native #f 907 15 907 29 ()}
      {Lisp-Entry "fold-expression" native #f 908 15 908 35 ()}
      {Lisp-Entry "Proclaim" class #f 916 7 916 15 ("Expression")
        {Lisp-Entry "clauses" slot #f 919 8 919 15 ()}
        {Lisp-Entry "get-clauses" accessor #f 919 23 919 31 ()}}
      {Lisp-Entry "Constant" class #f 927 7 927 15 ("Expression")
        {Lisp-Entry "expansion" slot #f 930 8 930 17 ()}
        {Lisp-Entry "get-expansion" accessor #f 930 25 930 33 ()}}
      {Lisp-Entry "Delay" class #f 938 7 938 12 ("Expression")
        {Lisp-Entry "expression" slot #f 941 8 941 18 ()}
        {Lisp-Entry "get-expression" accessor #f 941 26 941 34 ()}}
      {Lisp-Entry "Quasiquote" class #f 949 7 949 17 ("Expression")
        {Lisp-Entry "form" slot #f 952 8 952 12 ()}
        {Lisp-Entry "get-form" accessor #f 952 20 952 28 ()}}
      {Lisp-Entry "Reference" class #f 960 7 960 16 ("Expression")
        {Lisp-Entry "binding" slot #f 963 8 963 15 ()}
        {Lisp-Entry "get-binding" accessor #f 963 23 963 31 ()}
        {Lisp-Entry "print" method #f 966 20 966 25 ("binding" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "Assignment" class #f 978 7 978 17 ("Expression")
        {Lisp-Entry "binding" slot #f 981 8 981 15 ()}
        {Lisp-Entry "get-binding" accessor #f 981 23 981 31 ()}
        {Lisp-Entry "value" slot #f 982 8 982 13 ()}
        {Lisp-Entry "get-value" accessor #f 982 23 982 31 ()}}
      {Lisp-Entry "Lambda" class #f 990 7 990 13 ("Expression")
        {Lisp-Entry "signature" slot #f 993 8 993 17 ()}
        {Lisp-Entry "get-signature" accessor #f 993 25 993 33 ()}
        {Lisp-Entry "body" slot #f 994 8 994 12 ()}
        {Lisp-Entry "get-body" accessor #f 994 25 994 33 ()}}
      {Lisp-Entry "Let" class #f 1002 7 1002 10 ("Expression")
        {Lisp-Entry "bindings" slot #f 1005 8 1005 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 1005 24 1005 32 ()}
        {Lisp-Entry "body" slot #f 1006 8 1006 12 ()}
        {Lisp-Entry "get-body" accessor #f 1006 24 1006 32 ()}}
      {Lisp-Entry "Named-Let" class #f 1014 7 1014 16 ("Let")
        {Lisp-Entry "variable" slot #f 1017 8 1017 16 ()}
        {Lisp-Entry "get-variable" accessor #f 1017 24 1017 32 ()}}
      {Lisp-Entry "Letstar" class #f 1025 7 1025 14 ("Expression")
        {Lisp-Entry "bindings" slot #f 1028 8 1028 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 1028 24 1028 32 ()}
        {Lisp-Entry "body" slot #f 1029 8 1029 12 ()}
        {Lisp-Entry "get-body" accessor #f 1029 24 1029 32 ()}}
      {Lisp-Entry "Letrec" class #f 1037 7 1037 13 ("Expression")
        {Lisp-Entry "bindings" slot #f 1040 8 1040 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 1040 24 1040 32 ()}
        {Lisp-Entry "body" slot #f 1041 8 1041 12 ()}
        {Lisp-Entry "get-body" accessor #f 1041 24 1041 32 ()}}
      {Lisp-Entry "Receive" class #f 1049 7 1049 14 ("Expression")
        {Lisp-Entry "variables" slot #f 1052 8 1052 17 ()}
        {Lisp-Entry "get-variables" accessor #f 1052 26 1052 34 ()}
        {Lisp-Entry "expression" slot #f 1053 8 1053 18 ()}
        {Lisp-Entry "get-expression" accessor #f 1053 26 1053 34 ()}
        {Lisp-Entry "body" slot #f 1054 8 1054 12 ()}
        {Lisp-Entry "get-body" accessor #f 1054 26 1054 34 ()}}
      {Lisp-Entry "Body" class #f 1062 7 1062 11 ("Expression")
        {Lisp-Entry "internal-defines" slot #f 1065 8 1065 24 ()}
        {Lisp-Entry "get-internal-defines" accessor #f 1065 32 1065 40 ()}
        {Lisp-Entry "expressions" slot #f 1066 8 1066 19 ()}
        {Lisp-Entry "get-expressions" accessor #f 1066 32 1066 40 ()}}
      {Lisp-Entry "Internal-Define" class #f 1074 7 1074 22 ("Expression")
        {Lisp-Entry "variable" slot #f 1077 8 1077 16 ()}
        {Lisp-Entry "get-variable" accessor #f 1077 24 1077 32 ()}
        {Lisp-Entry "value" slot #f 1078 8 1078 13 ()}
        {Lisp-Entry "get-value" accessor #f 1078 24 1078 32 ()}}
      {Lisp-Entry "Begin" class #f 1086 7 1086 12 ("Expression")
        {Lisp-Entry "expressions" slot #f 1089 8 1089 19 ()}
        {Lisp-Entry "get-expressions" accessor #f 1089 27 1089 35 ()}}
      {Lisp-Entry "Do" class #f 1097 7 1097 9 ("Expression")
        {Lisp-Entry "bindings" slot #f 1100 8 1100 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 1100 24 1100 32 ()}
        {Lisp-Entry "test" slot #f 1101 8 1101 12 ()}
        {Lisp-Entry "get-test" accessor #f 1101 24 1101 32 ()}
        {Lisp-Entry "result" slot #f 1102 8 1102 14 ()}
        {Lisp-Entry "get-result" accessor #f 1102 24 1102 32 ()}
        {Lisp-Entry "body" slot #f 1103 8 1103 12 ()}
        {Lisp-Entry "get-body" accessor #f 1103 24 1103 32 ()}}
      {Lisp-Entry "Call" class #f 1111 7 1111 11 ("Expression")
        {Lisp-Entry "operator" slot #f 1114 8 1114 16 ()}
        {Lisp-Entry "get-operator" accessor #f 1114 25 1114 33 ()}
        {Lisp-Entry "arguments" slot #f 1115 8 1115 17 ()}
        {Lisp-Entry "get-arguments" accessor #f 1115 25 1115 33 ()}}
      {Lisp-Entry "If" class #f 1123 7 1123 9 ("Expression")
        {Lisp-Entry "test" slot #f 1126 8 1126 12 ()}
        {Lisp-Entry "get-test" accessor #f 1126 20 1126 28 ()}
        {Lisp-Entry "yes" slot #f 1127 8 1127 11 ()}
        {Lisp-Entry "get-yes" accessor #f 1127 20 1127 28 ()}
        {Lisp-Entry "no" slot #f 1128 8 1128 10 ()}
        {Lisp-Entry "get-no" accessor #f 1128 20 1128 28 ()}}
      {Lisp-Entry "Cond" class #f 1136 7 1136 11 ("Expression")
        {Lisp-Entry "clauses" slot #f 1139 8 1139 15 ()}
        {Lisp-Entry "get-clauses" accessor #f 1139 23 1139 31 ()}}
      {Lisp-Entry "Case" class #f 1147 7 1147 11 ("Expression")
        {Lisp-Entry "target" slot #f 1150 8 1150 14 ()}
        {Lisp-Entry "get-target" accessor #f 1150 23 1150 31 ()}
        {Lisp-Entry "clauses" slot #f 1151 8 1151 15 ()}
        {Lisp-Entry "get-clauses" accessor #f 1151 23 1151 31 ()}}
      {Lisp-Entry "And" class #f 1159 7 1159 10 ("Expression")
        {Lisp-Entry "expressions" slot #f 1162 8 1162 19 ()}
        {Lisp-Entry "get-expressions" accessor #f 1162 27 1162 35 ()}}
      {Lisp-Entry "Or" class #f 1170 7 1170 9 ("Expression")
        {Lisp-Entry "expressions" slot #f 1173 8 1173 19 ()}
        {Lisp-Entry "get-expressions" accessor #f 1173 27 1173 35 ()}}
      {Lisp-Entry "Declare" class #f 1181 7 1181 14 ("Expression")
        {Lisp-Entry "declarations" slot #f 1184 8 1184 20 ()}
        {Lisp-Entry "get-declarations" accessor #f 1184 28 1184 36 ()}}
      {Lisp-Entry "C-Include" class #f 1192 7 1192 16 ("Expression")
        {Lisp-Entry "name" slot #f 1195 8 1195 12 ()}
        {Lisp-Entry "get-name" accessor #f 1195 20 1195 28 ()}}
      {Lisp-Entry "C-Declare" class #f 1203 7 1203 16 ("Expression")
        {Lisp-Entry "code" slot #f 1206 8 1206 12 ()}
        {Lisp-Entry "get-code" accessor #f 1206 20 1206 28 ()}}
      {Lisp-Entry "C-Named-Declare-Declaration" class #f 1214 7 1214 34 ("Declaration")
        {Lisp-Entry "code" slot #f 1217 8 1217 12 ()}
        {Lisp-Entry "get-code" accessor #f 1217 20 1217 28 ()}}
      {Lisp-Entry "C-Initialize" class #f 1225 7 1225 19 ("Expression")
        {Lisp-Entry "code" slot #f 1228 8 1228 12 ()}
        {Lisp-Entry "get-code" accessor #f 1228 20 1228 28 ()}}
      {Lisp-Entry "C-Function" class #f 1236 7 1236 17 ("Expression")
        {Lisp-Entry "expansion" slot #f 1239 8 1239 17 ()}
        {Lisp-Entry "get-expansion" accessor #f 1239 25 1239 33 ()}}
      {Lisp-Entry "Parameterize" class #f 1247 7 1247 19 ("Expression")
        {Lisp-Entry "bindings" slot #f 1250 8 1250 16 ()}
        {Lisp-Entry "get-bindings" accessor #f 1250 24 1250 32 ()}
        {Lisp-Entry "body" slot #f 1251 8 1251 12 ()}
        {Lisp-Entry "get-body" accessor #f 1251 24 1251 32 ()}}
      {Lisp-Entry "Time-Special" class #f 1259 7 1259 19 ("Expression")
        {Lisp-Entry "expressions" slot #f 1262 8 1262 19 ()}
        {Lisp-Entry "get-expressions" accessor #f 1262 27 1262 35 ()}}
      {Lisp-Entry "Core-Dialect" class #f 1270 7 1270 19 ("Dialect")}
      {Lisp-Entry "Core-Walker" class #f 1278 7 1278 18 ("Walker")}}})
"debug"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "debug.scm"} 1257473844
    {Lisp-Entry "jazz.dialect.core.debug" unit #f 37 16 37 39 ()
      {Lisp-Entry "inspect" define #f 41 9 41 16 ("jazz.serial->object" "integer?" "if" "jazz.inspect-object" "obj")}
      {Lisp-Entry "run-loop" define #f 46 9 46 17 ("jazz.system.process.Process.Process.run-loop" "'jazz.system.process.Process.Process.run-loop" "run-loop" "jazz.system.access.get-process" "'jazz.system.access.get-process" "jazz.global-value" "get-process" "let")}
      {Lisp-Entry "resume" define #f 53 9 53 15 ("jazz.system.process.Process.Process.resume-loop" "'jazz.system.process.Process.Process.resume-loop" "resume-loop" "jazz.system.access.get-process" "'jazz.system.access.get-process" "jazz.global-value" "get-process" "let")}}}
  {Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "debug.jazz"} 1257476767
    {Lisp-Entry "jazz.dialect.language.debug" module #f 37 18 37 45 ("get-console-port" ":console" "register-printer" "jazz.dialect")
      {Lisp-Entry "*console-port-getter*" definition #f 53 12 53 33 ()}
      {Lisp-Entry "set-console-port-getter" definition #f 57 20 57 43 ("*console-port-getter*" "set!" "getter")}
      {Lisp-Entry "get-console-port" definition #f 61 20 61 36 ("terminal-port" "*console-port-getter*" "not" "if")}
      {Lisp-Entry "console-input-port" definition #f 67 20 67 38 ("get-console-port")}
      {Lisp-Entry "console-output-port" definition #f 70 20 70 39 ("get-console-port")}
      {Lisp-Entry "force-console" definition #f 74 20 74 33 ("get-console-port" "force-output")}
      {Lisp-Entry "console" definition #f 86 20 86 27 ("format" "console-string" "rest")}
      {Lisp-Entry "console-string" definition #f 90 20 90 34 ("unspecified" "force-output" "format" "terminal-string" "not" "if" "console-output-port" "output" "let" "color" "color:" "string")}
      {Lisp-Entry "debug" definition #f 103 19 103 24 ("console")}
      {Lisp-Entry "debug-string" definition #f 107 19 107 31 ("console-string")}
      {Lisp-Entry "continuation-stack" definition #f 116 20 116 38 ("get-continuation-dynamic-environment" "append" "else" "get-continuation-lexical-environment" "cons" "not" "and" "cond" "get-continuation-name" "lambda" "get-continuation-stack" "stack" "let" "map" "variables" "package-variables" "list" "mutable?" "value" "name" "bind" "variable" "package-variable" "define" "depth" "depth:" "lexical-environment?" "lexical-environment?:" "dynamic-environment?" "dynamic-environment?:" "cont")}
      {Lisp-Entry "execution-stack" definition #f 137 20 137 35 ("continuation-stack" "cont" "lambda" "continuation-capture" "depth" "depth:" "lexical-environment?" "lexical-environment?:" "dynamic-environment?" "dynamic-environment?:")}}})
"declares"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "declares.scm"} 1237033585
    {Lisp-Entry "f-run-time-bindings/safe" define #f 3 9 3 33 ("car" "x")}
    {Lisp-Entry "f-not-run-time-bindings/safe" define #f 10 9 10 37 ("car" "x")}
    {Lisp-Entry "f-run-time-bindings/not-safe" define #f 17 9 17 37 ("car" "x")}
    {Lisp-Entry "f-not-run-time-bindings/not-safe" define #f 24 9 24 41 ("car" "x")}
    {Lisp-Entry "f-standard-bindings/not-run-time-bindings/not-safe" define #f 32 9 32 59 ("##pair?" "car" "x")}
    {Lisp-Entry "f-standard-bindings/run-time-bindings/not-safe" define #f 41 9 41 55 ("##pair?" "car" "x")}
    {Lisp-Entry "f-standard-bindings/extended-bindings/not-safe" define #f 50 9 50 55 ("##pair?" "car" "x")}
    {Lisp-Entry "f-block" define #f 57 9 57 16 ("g-block")}
    {Lisp-Entry "g-block" define #f 60 9 60 16 ("f-block")}
    {Lisp-Entry "f-separate" define #f 66 9 66 19 ("g-separate")}
    {Lisp-Entry "g-separate" define #f 69 9 69 19 ("f-separate")}})
"development"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "development.scm"} 1257473845
    {Lisp-Entry "jazz.dialect.core.development" unit #f 37 16 37 45 ()
      {Lisp-Entry "jazz.define-global" define-macro ("macro") 45 20 45 38 ("set!" ",value" ",setter" ",getter" ",name" "define" "begin" "jazz.generate-symbol" "value" "setter" "%%symbol->string" "%%string-append" "%%string->symbol" "getter" "let" "name")}
      {Lisp-Entry "?" define-macro ("global") 63 20 63 21 ()}
      {Lisp-Entry "%" define-macro ("global") 64 20 64 21 ()}
      {Lisp-Entry "?a" define-macro ("global") 67 20 67 22 ()}
      {Lisp-Entry "?b" define-macro ("global") 68 20 68 22 ()}
      {Lisp-Entry "?c" define-macro ("global") 69 20 69 22 ()}
      {Lisp-Entry "?d" define-macro ("global") 70 20 70 22 ()}
      {Lisp-Entry "?e" define-macro ("global") 71 20 71 22 ()}
      {Lisp-Entry "?f" define-macro ("global") 72 20 72 22 ()}
      {Lisp-Entry "?g" define-macro ("global") 73 20 73 22 ()}
      {Lisp-Entry "?h" define-macro ("global") 74 20 74 22 ()}
      {Lisp-Entry "?i" define-macro ("global") 75 20 75 22 ()}
      {Lisp-Entry "?j" define-macro ("global") 76 20 76 22 ()}
      {Lisp-Entry "?k" define-macro ("global") 77 20 77 22 ()}
      {Lisp-Entry "?l" define-macro ("global") 78 20 78 22 ()}
      {Lisp-Entry "?m" define-macro ("global") 79 20 79 22 ()}
      {Lisp-Entry "?n" define-macro ("global") 80 20 80 22 ()}
      {Lisp-Entry "?o" define-macro ("global") 81 20 81 22 ()}
      {Lisp-Entry "?p" define-macro ("global") 82 20 82 22 ()}
      {Lisp-Entry "?q" define-macro ("global") 83 20 83 22 ()}
      {Lisp-Entry "?r" define-macro ("global") 84 20 84 22 ()}
      {Lisp-Entry "?s" define-macro ("global") 85 20 85 22 ()}
      {Lisp-Entry "?t" define-macro ("global") 86 20 86 22 ()}
      {Lisp-Entry "?u" define-macro ("global") 87 20 87 22 ()}
      {Lisp-Entry "?v" define-macro ("global") 88 20 88 22 ()}
      {Lisp-Entry "?w" define-macro ("global") 89 20 89 22 ()}
      {Lisp-Entry "?x" define-macro ("global") 90 20 90 22 ()}
      {Lisp-Entry "?y" define-macro ("global") 91 20 91 22 ()}
      {Lisp-Entry "?z" define-macro ("global") 92 20 92 22 ()}
      {Lisp-Entry "%a" define-macro ("global") 95 20 95 22 ()}
      {Lisp-Entry "%b" define-macro ("global") 96 20 96 22 ()}
      {Lisp-Entry "%c" define-macro ("global") 97 20 97 22 ()}
      {Lisp-Entry "%d" define-macro ("global") 98 20 98 22 ()}
      {Lisp-Entry "%e" define-macro ("global") 99 20 99 22 ()}
      {Lisp-Entry "%f" define-macro ("global") 100 20 100 22 ()}
      {Lisp-Entry "%g" define-macro ("global") 101 20 101 22 ()}
      {Lisp-Entry "%h" define-macro ("global") 102 20 102 22 ()}
      {Lisp-Entry "%i" define-macro ("global") 103 20 103 22 ()}
      {Lisp-Entry "%j" define-macro ("global") 104 20 104 22 ()}
      {Lisp-Entry "%k" define-macro ("global") 105 20 105 22 ()}
      {Lisp-Entry "%l" define-macro ("global") 106 20 106 22 ()}
      {Lisp-Entry "%m" define-macro ("global") 107 20 107 22 ()}
      {Lisp-Entry "%n" define-macro ("global") 108 20 108 22 ()}
      {Lisp-Entry "%o" define-macro ("global") 109 20 109 22 ()}
      {Lisp-Entry "%p" define-macro ("global") 110 20 110 22 ()}
      {Lisp-Entry "%q" define-macro ("global") 111 20 111 22 ()}
      {Lisp-Entry "%r" define-macro ("global") 112 20 112 22 ()}
      {Lisp-Entry "%s" define-macro ("global") 113 20 113 22 ()}
      {Lisp-Entry "%t" define-macro ("global") 114 20 114 22 ()}
      {Lisp-Entry "%u" define-macro ("global") 115 20 115 22 ()}
      {Lisp-Entry "%v" define-macro ("global") 116 20 116 22 ()}
      {Lisp-Entry "%w" define-macro ("global") 117 20 117 22 ()}
      {Lisp-Entry "%x" define-macro ("global") 118 20 118 22 ()}
      {Lisp-Entry "%y" define-macro ("global") 119 20 119 22 ()}
      {Lisp-Entry "%z" define-macro ("global") 120 20 120 22 ()}}}
  {Lisp-File-Entry {File jazz "src" "jazz" "development.jazz"} 1257476767
    {Lisp-Entry "jazz.development" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "iter-list" definition #f 55 13 55 22 ("cdr" "iter-list" "car" "when" "proc" "lst")}
      {Lisp-Entry "iter-node" definition #f 61 13 61 22 ("get-children" "for-each" "lambda" "iter" "letrec" "proc" "node")}
      {Lisp-Entry "iter" definition #f 69 13 69 17 ("iter-node" "JML-Node" "is?" "iter-list" "null/pair?" "cond" "proc" "obj")}
      {Lisp-Entry "foldl-list" definition #f 74 13 74 23 ("car" "cdr" "foldl-list" "not" "if" "s" "f" "x")}
      {Lisp-Entry "foldr-list" definition #f 80 13 80 23 ("cdr" "foldr-list" "car" "not" "if" "s" "f" "x")}
      {Lisp-Entry "foldl-node" definition #f 86 13 86 23 ("foldl-node" "c" "lambda" "get-children" "foldl" "s" "f" "x")}
      {Lisp-Entry "foldr-node" definition #f 93 13 93 23 ("s" "f" "x")}
      {Lisp-Entry "foldl-component" definition #f 97 13 97 28 ("foldl-component" "c" "lambda" "get-children" "foldl" "s" "f" "x")}
      {Lisp-Entry "foldr-component" definition #f 104 13 104 28 ("s" "f" "x")}
      {Lisp-Entry "foldl" definition #f 108 13 108 18 ("foldl-component" "Component" "foldl-node" "JML-Node" "is?" "foldl-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "foldr" definition #f 114 13 114 18 ("foldr-component" "Component" "foldr-node" "JML-Node" "is?" "foldr-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "iter-map" definition #f 120 13 120 21 ("get-output" "put" "x" "lambda" "iter" "List-Factory" "new" "fact" "let" "obj" "proc")}
      {Lisp-Entry "iter-linearize" definition #f 128 13 128 27 ("identity" "iter-map" "obj")}
      {Lisp-Entry "fold-map" definition #f 132 13 132 21 ("cons" "lst" "x" "lambda" "foldr" "obj" "proc")}
      {Lisp-Entry "foldl-map" definition #f 139 13 139 22 ("cons" "lst" "x" "lambda" "foldl" "obj" "proc")}
      {Lisp-Entry "fold-linearize" definition #f 146 13 146 27 ("identity" "fold-map" "obj")}
      {Lisp-Entry "fold" definition #f 150 20 150 24 ("fold-component" "Component" "fold-node" "JML-Node" "is?" "foldl-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "fold-node" definition #f 156 13 156 22 ("get-children" "fold-node" "c" "lambda" "for-each" "ps" "let" "s" "f" "x")}
      {Lisp-Entry "fold-component" definition #f 164 13 164 27 ("get-children" "fold-component" "c" "lambda" "for-each" "ps" "let" "s" "f" "x")}
      {Lisp-Entry "component->jml" definition #f 172 20 172 34 ("component-self->jml" "fold" "x")}
      {Lisp-Entry "component-self->jml" definition #f 178 13 178 32 ("object->serial" "format" "serial" "'serial" "get-size" "size" "'size" "get-position" "jazz.ui.layout.Figure.Figure" "'jazz.ui.layout.Figure.Figure" "typed?" "essay" "position" "'position" "get-name" "name" "'name" "list" "properties:" "class-of" "type-name" "identifier-name" "JML-Element" "new" "p" "c")}
      {Lisp-Entry "component-ascendants->jml" definition #f 188 13 188 38 ("find-toplevel" "if" "get-parent" "parent" "let" "component-self->jml" "component->jml" "define" "c")}
      {Lisp-Entry "pprint-component" definition #f 204 20 204 36 (":console" "component->jml" "pretty-print" "x")}
      {Lisp-Entry "pprint-component-ascendants" definition #f 210 20 210 47 (":console" "component-ascendants->jml" "pretty-print" "x")}
      {Lisp-Entry "ppd" definition #f 221 20 221 23 ("unspecified" "pprint-component" "c")}
      {Lisp-Entry "ppa" definition #f 226 20 226 23 ("unspecified" "pprint-component-ascendants" "c")}
      {Lisp-Entry "hex" definition #f 236 20 236 23 ("format" "n")}}})
"dialect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "dialect.scm"} 1257478909
    {Lisp-Entry "jazz.dialect.dialect" unit #f 37 16 37 36 ("jazz.Jazz-Walker" "jazz.Dispatch" "jazz.Construct" "jazz.Cast" "jazz.With-Dynamic-Self" "jazz.With-Self" "jazz.new" "jazz.new2" "2" "jazz.new1" "1" "jazz.codes-forms" "jazz.new0" "0" "%%length" "jazz.new-code" "values-codes" "jazz.Autoload-Declaration" "or" "%%get-reference-binding" "binding" "jazz.Reference" "class-expression" "let" "jazz.dialect.kernel.new" "'jazz.dialect.kernel.new" "%%eq?" "if" "declaration" "arguments-codes" "operator" "jazz.emit-primitive-new-call" "else" "%%car" "jazz.emit-specialized-class-of" "%%cdr" "%%null?" "%%pair?" "%%assert" "jazz.dialect.kernel.class-of" "case" "environment" "arguments" "locator" "jazz.emit-specialized-locator" "jazz.Jazz-Dialect" "jazz.Method-Declaration" "jazz.Property-Declaration" "jazz.Slot-Declaration" "jazz.Field-Declaration" "jazz.Interface-Declaration" "%%get-class-declaration-ascendant" "%%not" "%%class-is?" "and" "type" "lambda" "jazz.object-declaration?" "set!" "jazz.Class-Declaration" "jazz.Category-Declaration" "jazz.Specific-Declaration" "jazz.Generic-Declaration" "jazz.Specialize" "jazz.Definition-Declaration" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Definition-Declaration" define-class ("class runtime") 45 27 45 54 ()}
      {Lisp-Entry "jazz.new-definition-declaration" define #f 48 9 48 40 ("jazz.setup-declaration" "jazz.Definition-Declaration" "jazz.allocate-definition-declaration" "new-declaration" "let" "signature" "expansion" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Definition-Declaration") 54 21 54 52 ("jazz.validate-arguments" "if" "declaration" "%%get-definition-declaration-signature" "signature" "let" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" generic/specific ("jazz.Definition-Declaration") 60 21 60 51 ("%%get-lexical-binding-name" "jazz.error" "jazz.call-return-type" "%%get-expression-source" "%%get-code-form" "jazz.sourcify-list" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "argument" "parameter" "map" "jazz.new-code" "jazz.emit-expression" "body-code" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-inlined-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "jazz.untyped-inline-definition?" "jazz.inline-definitions?" "or" "inline" "'inline" "%%get-definition-declaration-expansion" "%%eq?" "and" "jazz.Lambda" "%%class-is?" "if" "declaration" "%%get-definition-declaration-value" "value" "let" "environment" "source-declaration" "call" "arguments")}
      {Lisp-Entry "jazz.untyped-inline-definition?" define #f 92 9 92 40 ("%%get-lambda-signature" "%%get-signature-positional" "%%get-lexical-binding-type" "%%not" "parameter" "lambda" "jazz.every?" "value")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Definition-Declaration") 98 21 98 42 ("%%get-declaration-source" "%%get-lexical-binding-type" "jazz.emit-expression" "jazz.emit-type-cast" ",locator" "define" "jazz.sourcify-if" "%%get-definition-declaration-value" "value" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Definition-Declaration") 107 21 107 48 ("jazz.Any" "%%get-lexical-binding-type" "or" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" generic/specific ("jazz.Definition-Declaration") 115 21 115 58 ("%%get-lexical-binding-name" "jazz.walk-error" "%%get-declaration-toplevel" "%%neq?" "%%when" "declaration" "nextmethod" "symbol-src" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" generic/specific ("jazz.Definition-Declaration") 121 21 121 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" generic/specific ("jazz.Definition-Declaration") 125 21 125 49 ("jazz.Any" "%%get-lexical-binding-type" "jazz.emit-expression" "jazz.emit-type-cast" ",locator" "set!" "jazz.new-code" "declaration" "%%get-declaration-locator" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Definition-Declaration") 133 21 133 42 ("%%get-definition-declaration-value" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Specialize" define-class ("class runtime") 147 27 147 42 ()}
      {Lisp-Entry "jazz.new-specialize" define #f 150 9 150 28 ("jazz.Specialize" "jazz.allocate-specialize")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Specialize") 154 21 154 41 ("jazz.Any" "begin" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Specialize") 161 21 161 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Generic-Declaration" define-class ("class runtime") 173 27 173 51 ()}
      {Lisp-Entry "jazz.new-generic-declaration" define #f 176 9 176 37 ("jazz.setup-declaration" "jazz.Generic-Declaration" "jazz.allocate-generic-declaration" "new-declaration" "let" "signature" "dispatch-types" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Generic-Declaration") 182 21 182 52 ("%%get-generic-declaration-signature" "declaration" "jazz.validate-arguments" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Generic-Declaration") 186 21 186 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "jazz.define-generic" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-generic-declaration-body" "body" "%%get-generic-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "generic-locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Generic-Declaration") 199 21 199 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Generic-Declaration") 206 21 206 42 ("%%get-generic-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Specific-Declaration" define-class ("class runtime") 220 27 220 52 ()}
      {Lisp-Entry "jazz.new-specific-declaration" define #f 223 9 223 38 ("jazz.setup-declaration" "jazz.Specific-Declaration" "jazz.allocate-specific-declaration" "new-declaration" "let" "root?" "signature" "generic" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Specific-Declaration") 229 21 229 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" ",modifier" "jazz.emit-signature" "jazz.define-specific" "jazz.sourcify-if" "child" "'child" "root" "'root" "%%get-specific-declaration-root?" "if" "modifier" "%%cons" "augmented-environment" "let" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-specific-declaration-body" "body" "%%get-specific-declaration-signature" "signature" "jazz.generic-object-locator" "generic-object-locator" "%%get-declaration-locator" "generic-locator" "declaration" "%%get-specific-declaration-generic" "generic-declaration" "let*" "environment")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Specific-Declaration") 245 21 245 42 ("%%get-specific-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Category-Declaration" define-class ("class runtime") 259 27 259 52 ()}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Category-Declaration") 262 21 262 48 ("jazz.Category-Declaration" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Class-Declaration" define-class ("class runtime") 277 27 277 49 ()}
      {Lisp-Entry "jazz.new-class-declaration" define #f 280 9 280 35 ("jazz.setup-declaration" "jazz.new-queue" "jazz.protected-access" "jazz.make-access-lookups" "jazz.Class-Declaration" "jazz.allocate-class-declaration" "new-declaration" "let" "interfaces" "ascendant-base" "ascendant-relation" "ascendant" "metaclass" "implementor" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.setup-class-lookups" define #f 286 9 286 33 ("jazz.protected-access" "%%get-namespace-declaration-lookups" "%%vector-set!" "not-private" "public" "interface" "lambda" "for-each" "jazz.public-access" "%%table-merge!" "%%get-declaration-toplevel" "%%eq?" "same-module?" "if" "jazz.private-access" "%%get-access-lookup" "private" "%%get-class-declaration-interfaces" "resolve-interface" "map" "interfaces" "%%get-class-declaration-ascendant" "resolve-class" "ascendant" "let" "class-declaration")
        {Lisp-Entry "resolve-class" define #f 287 11 287 24 ("jazz.Class-Declaration" "%%is?" "%%assert" "jazz.resolve-binding" "class-declaration" "let" "if" "decl")}
        {Lisp-Entry "resolve-interface" define #f 294 11 294 28 ("jazz.Interface-Declaration" "%%is?" "%%assert" "jazz.resolve-binding" "interface-declaration" "let" "if" "decl")}}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Class-Declaration") 333 21 333 48 ("jazz.Class-Declaration" "%%get-category-declaration-metaclass" "or" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Class-Declaration") 341 21 341 37 ("%%get-class-declaration-ascendant" "%%eq?" "jazz.resolve-binding" "target-declaration" "%%not" "target" "iter" "let" "jazz.Class-Declaration" "%%class-is?" "and" "declaration" "jazz.object-declaration?" "if" "subtype")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Class-Declaration") 354 21 354 42 ("%%get-declaration-source" "jazz.emit-namespace-statements" ",@interface-accesses" "%%list" ",metaclass-access" "jazz.new-class" "jazz.global-value" "',locator" "jazz.global-variable?" "lambda" "map" "interface-accesses" ",ascendant-access" "%%get-object-class" "jazz.Object-Class" "'jazz.Object-Class" "metaclass-access" "jazz.emit-ascendant-access" "%%get-category-declaration-metaclass" "metaclass-declaration" "jazz.remove-own-slots" ",name" "',name" "jazz.identifier-name" "jazz.set-core-class-redefined" "%%get-class-level" ",level-locator" "%%get-category-name" ",locator" "define" "jazz.emit-binding-reference" "jazz.sourcified-form" "%%not" "ascendant-access" "jazz.validate-core-class" "jazz.get-core-class" "core-class" "jazz.core-class?" "if" "begin" "jazz.sourcify-if" "level" "'level" "jazz.compose-helper" "level-locator" "%%get-namespace-declaration-body" "body" "%%get-class-declaration-interfaces" "interface-declarations" "%%get-class-declaration-ascendant" "ascendant-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let" "environment")}
      {Lisp-Entry "jazz.emit-ascendant-access" define #f 385 9 385 35 ("%%get-object-class" "else" "jazz.emit-binding-reference" "jazz.sourcified-form" "%%not" "cond" "%%get-class-declaration-ascendant-base" "ascendant-base" "%%get-class-declaration-ascendant-relation" "ascendant-relation" "%%get-class-declaration-ascendant" "ascendant" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.find-class-declaration" define #f 400 9 400 36 ("%%get-declaration-parent" "else" "jazz.Class-Declaration" "%%class-is?" "jazz.error" "%%not" "cond" "decl" "iter" "let" "declaration")}
      {Lisp-Entry "jazz.validate-core-class" define #f 421 9 421 33 ("validate-slots" "validate-category" "declaration" "core-class")
        {Lisp-Entry "validate-category" define #f 422 11 422 28 ("validate-interfaces" "validate-ascendant")
          {Lisp-Entry "validate-ascendant" define #f 423 13 423 31 ("%%get-lexical-binding-name" "jazz.error" "%%eq?" "%%when" "%%get-declaration-locator" "declaration-ascendant-name" "declaration" "%%get-class-declaration-ascendant" "declaration-ascendant" "%%get-category-name" "jazz.identifier-name" "%%not" "if" "core-class-ascendant-name" "core-class" "%%get-class-ascendant" "core-class-ascendant" "let*")}
          {Lisp-Entry "validate-interfaces" define #f 431 13 431 32 ("%%get-lexical-binding-name" "jazz.error" "%%null?" "%%not" "%%when" "declaration" "%%get-class-declaration-interfaces" "declaration-interfaces" "let")}}
        {Lisp-Entry "validate-slots" define #f 439 11 439 25 ("jazz.error" "%%equal?" "%%not" "%%when" "declaration" "%%get-namespace-declaration-body" "collect-slots" "%%get-lexical-binding-name" "decl" "declaration-slot-names" "core-class" "%%get-class-instance-slots" "%%get-field-name" "%%symbol?" "if" "name/slot" "lambda" "map" "core-class-slot-names" "let")
          {Lisp-Entry "collect-slots" define #f 440 13 440 26 ("jazz.queue-list" "%%get-begin-expressions" "for-each" "jazz.Begin" "jazz.enqueue" "jazz.Slot-Declaration" "%%is?" "cond" "obj" "process" "define" "jazz.new-queue" "queue" "let" "lst")}}}
      {Lisp-Entry "jazz.Interface-Declaration" define-class ("class runtime") 465 27 465 53 ()}
      {Lisp-Entry "jazz.new-interface-declaration" define #f 468 9 468 39 ("jazz.setup-declaration" "jazz.new-queue" "jazz.protected-access" "jazz.make-access-lookups" "jazz.Interface-Declaration" "jazz.allocate-interface-declaration" "new-declaration" "let" "ascendants" "metaclass" "implementor" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.setup-interface-lookups" define #f 474 9 474 37 ("jazz.protected-access" "%%get-namespace-declaration-lookups" "%%vector-set!" "jazz.public-access" "%%table-merge!" "interface" "lambda" "for-each" "jazz.private-access" "%%get-access-lookup" "private" "%%get-interface-declaration-ascendants" "resolve-interface" "map" "ascendants" "let" "interface-declaration")
        {Lisp-Entry "resolve-interface" define #f 475 11 475 28 ("jazz.Interface-Declaration" "%%is?" "%%assert" "jazz.resolve-binding" "interface-declaration" "let" "if" "decl")}}
      {Lisp-Entry "jazz.of-subtype?" generic/specific ("jazz.Interface-Declaration") 507 21 507 37 ("subtype")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Interface-Declaration") 512 21 512 42 ("%%get-declaration-source" "jazz.emit-namespace-statements" "%%get-interface-rank" ",rank-locator" ",@ascendant-accesses" "%%list" "',locator" ",metaclass-access" "jazz.new-interface" ",locator" "define" "begin" "jazz.sourcify-if" "%%get-namespace-declaration-body" "body" "lambda" "map" "ascendant-accesses" "jazz.emit-binding-reference" "jazz.sourcified-form" "jazz.Interface" "'jazz.Interface" "%%not" "if" "metaclass-access" "%%get-category-declaration-metaclass" "metaclass-declaration" "%%get-interface-declaration-ascendants" "ascendant-declarations" "rank" "'rank" "jazz.compose-helper" "rank-locator" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.Field-Declaration" define-class ("class runtime") 539 27 539 49 ()}
      {Lisp-Entry "jazz.Slot-Declaration" define-class ("class runtime") 550 27 550 48 ()}
      {Lisp-Entry "jazz.new-slot-declaration" define #f 553 9 553 34 ("jazz.setup-declaration" "jazz.Slot-Declaration" "jazz.allocate-slot-declaration" "new-declaration" "let" "setter-name" "getter-name" "initialize" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Slot-Declaration") 559 21 559 52 ("form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Slot-Declaration") 563 21 563 42 ("%%get-declaration-source" "jazz.declaration-result" "%%get-slot-offset" ",offset-locator" ",allocate?" ",name" "',name" ",class-locator" "jazz.add-slot" ",slot-locator" "jazz.emit-expression" "jazz.sourcified-form" "self" ",initialize-locator" "define" "if" "begin" "jazz.sourcify-if" "offset" "'offset" "offset-locator" "slot" "'slot" "slot-locator" "'initialize" "jazz.compose-helper" "and" "initialize-locator" "%%get-slot-declaration-initialize" "initialize" "jazz.Void" "%%get-lexical-binding-type" "%%neq?" "allocate?" "class-locator" "%%get-declaration-parent" "class-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Slot-Declaration") 587 21 587 48 ("jazz.error" "jazz.find-annotated-type" ",offset-locator" "jazz.sourcified-form" "%%object-ref" "jazz.new-code" "offset" "'offset" "declaration" "%%get-declaration-locator" "jazz.compose-helper" "offset-locator" "if" "jazz.*self*" "self" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-assignable?" generic/specific ("jazz.Slot-Declaration") 598 21 598 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" generic/specific ("jazz.Slot-Declaration") 602 21 602 49 ("jazz.error" "jazz.Any" "jazz.emit-expression" ",offset-locator" "jazz.sourcified-form" "%%object-set!" "jazz.new-code" "offset" "'offset" "declaration" "%%get-declaration-locator" "jazz.compose-helper" "offset-locator" "if" "jazz.*self*" "self" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Slot-Declaration") 613 21 613 42 ("%%get-slot-declaration-initialize" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Property-Declaration" define-class ("class runtime") 627 27 627 52 ()}
      {Lisp-Entry "jazz.new-property-declaration" define #f 630 9 630 38 ("jazz.setup-declaration" "jazz.Property-Declaration" "jazz.allocate-property-declaration" "new-declaration" "let" "setter-name" "getter-name" "initialize" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Property-Declaration") 636 21 636 42 ("%%get-declaration-source" "jazz.declaration-result" "%%get-slot-offset" ",offset-locator" ",allocate?" ",name" "',name" ",class-locator" "jazz.add-property" ",slot-locator" "jazz.emit-expression" "jazz.sourcified-form" ",initialize-locator" "if" "begin" "jazz.sourcify-if" "cddr" "cdadr" "self" "'self" "car" "cons" "expr" "fix-self" "define" "%%get-property-declaration-setter" "setter" "%%get-property-declaration-getter" "getter" "offset" "'offset" "offset-locator" "slot" "'slot" "slot-locator" "'initialize" "jazz.compose-helper" "and" "initialize-locator" "%%get-slot-declaration-initialize" "initialize" "jazz.Void" "%%get-lexical-binding-type" "%%neq?" "allocate?" "class-locator" "%%get-declaration-parent" "class-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.Method-Declaration" define-class ("class runtime") 675 27 675 50 ()}
      {Lisp-Entry "jazz.new-method-declaration" define #f 678 9 678 36 ("jazz.setup-declaration" "jazz.Method-Declaration" "jazz.allocate-method-declaration" "new-declaration" "let" "signature" "synchronized" "remote" "expansion" "abstraction" "propagation" "root" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.method-dispatch-info" define #f 684 9 684 34 ("error" "else" "interface" "'interface" "jazz.Interface-Declaration" "class" "'class" "jazz.Class-Declaration" "%%class-is?" "cond" "%%get-declaration-parent" "category-declaration" "or" "method-declaration" "root-method-declaration" "values" "final" "'final" "%%eq?" "%%not" "and" "if" "%%get-method-declaration-propagation" "propagation" "%%get-method-declaration-root" "root" "let" "declaration")}
      {Lisp-Entry "jazz.native-category?" define #f 700 9 700 30 ("primitive" "'primitive" "%%get-category-declaration-implementor" "%%neq?" "category-declaration")}
      {Lisp-Entry "jazz.emit-method-dispatch" define #f 704 9 704 34 ("%%get-lexical-binding-type" "jazz.call-return-type" "%%interface-dispatch" ",interface-rank-locator" "%%interface-native-dispatch" "interface-rank-locator" "interface" "%%class-dispatch" ",method-rank-locator" ",class-level-locator" "%%class-native-dispatch" "jazz.native-category?" "if" "rank" "'rank" "method-rank-locator" "level" "'level" "jazz.compose-helper" "class-level-locator" "class" ",implementation-locator" "jazz.sourcified-form" "%%final-dispatch" "%%get-declaration-locator" "implementation-locator" "final" "case" "jazz.new-code" "%%get-declaration-parent" "category-declaration" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "%%get-lexical-binding-name" "name" "let" "declaration" "object")}
      {Lisp-Entry "jazz.emit-binding-reference" generic/specific ("jazz.Method-Declaration") 729 21 729 48 ("%%get-declaration-locator" "%%get-lexical-binding-name" "jazz.error" "%%get-code-type" "jazz.sourcified-form" "apply" "rest" "lambda" "jazz.new-code" "declaration" "jazz.emit-method-dispatch" "dispatch-code" "if" "jazz.*self*" "self" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" generic/specific ("jazz.Method-Declaration") 741 21 741 52 ("jazz.validate-arguments" "if" "declaration" "%%get-method-declaration-signature" "signature" "let" "form-src" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" generic/specific ("jazz.Method-Declaration") 747 21 747 51 ("else" "%%get-lexical-binding-name" "jazz.error" "jazz.call-return-type" "%%get-expression-source" "%%get-code-form" "jazz.desourcify-all" "jazz.sourcify-if" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "argument" "parameter" "map" "jazz.new-code" "jazz.emit-expression" "body-code" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "let" "final" "case" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "inline" "'inline" "declaration" "%%get-method-declaration-expansion" "%%eq?" "if" "environment" "source-declaration" "call" "arguments")}
      {Lisp-Entry "jazz.emit-binding-call" generic/specific ("jazz.Method-Declaration") 777 21 777 43 ("%%get-declaration-locator" "%%get-lexical-binding-name" "jazz.error" "%%get-code-type" ",@arguments" "jazz.sourcified-form" "jazz.new-code" "jazz.emit-method-dispatch" "dispatch-code" "jazz.codes-forms" "declaration" "%%get-lexical-binding-type" "type" "if" "jazz.*self*" "self" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-declaration" generic/specific ("jazz.Method-Declaration") 792 21 792 42 ("%%get-declaration-source" "',class-locator" "jazz.call-into-abstract" "rest" ",method-rank-locator" "abstract" "'abstract" "%%eq?" "if" "jazz.declaration-result" ",name" "',name" ",class-locator" ",method-call" "jazz.emit-expression" "jazz.sourcified-form" ",method-node-locator" "%%get-method-node-next-implementation" "nextmethod" "jazz.emit-signature-casts" "jazz.emit-signature" "self" ",method-locator" "define" "begin" "jazz.generate-symbol" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "jazz.Interface-Declaration" "jazz.add-virtual-method" "'jazz.add-virtual-method" "chained" "virtual" "jazz.add-final-method" "'jazz.add-final-method" "final" "jazz.add-method-node" "'jazz.add-method-node" "override" "case" "jazz.Class-Declaration" "%%class-is?" "cond" "method-call" "node" "'node" "method-node-locator" "rank" "'rank" "jazz.compose-helper" "method-rank-locator" "method-locator" "%%get-declaration-locator" "class-locator" "and" "root-category-declaration" "%%get-method-declaration-root" "root-method-declaration" "%%get-declaration-parent" "category-declaration" "let*" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "%%get-method-declaration-abstraction" "abstraction" "%%get-method-declaration-propagation" "propagation" "declaration" "%%get-lexical-binding-name" "name" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" generic/specific ("jazz.Method-Declaration") 850 21 850 42 ("jazz.fold-statement" "%%not" "if" "%%get-method-declaration-body" "body" "let" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Jazz-Dialect" define-class ("class runtime") 866 27 866 44 ()}
      {Lisp-Entry "jazz.new-jazz-dialect" define #f 869 9 869 30 ("jazz.Jazz-Dialect" "jazz.allocate-jazz-dialect")}
      {Lisp-Entry "jazz.dialect-name" generic/specific ("jazz.Jazz-Dialect") 873 21 873 38 ("'jazz")}
      {Lisp-Entry "jazz.dialect-walker" generic/specific ("jazz.Jazz-Dialect") 877 21 877 40 ("jazz.new-jazz-walker")}
      {Lisp-Entry "jazz.Jazz-Walker" define-class ("class runtime") 889 27 889 43 ()}
      {Lisp-Entry "jazz.new-jazz-walker" define #f 892 9 892 29 ("eq?" "test:" "%%make-table" "jazz.new-queue" "jazz.Jazz-Walker" "jazz.allocate-jazz-walker")}
      {Lisp-Entry "jazz.runtime-export" generic/specific ("jazz.Jazz-Walker") 896 21 896 40 ("%%get-declaration-locator" "jazz.Category-Declaration" "jazz.Generic-Declaration" "jazz.Definition-Declaration" "%%is?" "if" "walker" "nextmethod" "or" "declaration")}
      {Lisp-Entry "jazz.walker-bindings" generic/specific ("jazz.Jazz-Walker") 910 21 910 41 ("walker" "nextmethod" "jazz" "'jazz" "jazz.get-dialect" "%%get-dialect-bindings" "append")}
      {Lisp-Entry "jazz.walk-declaration" generic/specific ("jazz.Jazz-Walker") 920 21 920 42 ("nextmethod" "else" "jazz.walk-c-definition-declaration" "c-definition" "jazz.walk-c-type-declaration" "c-type" "jazz.walk-c-named-declare-declaration" "c-named-declare" "c-include" "jazz.walk-with-local-variables-declaration" "with-local-variables" "jazz.walk-with-dynamic-self-declaration" "with-dynamic-self" "jazz.walk-method-declaration" "method" "jazz.walk-%slot-declaration" "%property" "%slot" "jazz.walk-interface-declaration" "interface" "jazz.walk-%class-declaration" "%class" "specific" "jazz.walk-generic-declaration" "generic" "jazz.walk-%specialize-declaration" "%specialize" "walker" "jazz.walk-definition-declaration" "definition" "case" "%%car" "first" "let" "jazz.source-code" "%%pair?" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.parse-keywords" define #f 947 9 947 28 ("%%list" "jazz.unspecified" "%%table-ref" "keyword" "lambda" "map" "%%append" "values" "%%apply" "%%cddr" "%%cadr" "%%desourcify" "%%table-set!" "begin" "set!" "%%memq" "if" "%%car" "jazz.source-code" "symbol" "%%null?" "%%not" "and" "%%while" "done?" "eq?" "test:" "%%make-table" "table" "let" "rest" "keywords")}
      {Lisp-Entry "jazz.emit-specialized-class-of" define #f 978 9 978 39 ("%%get-category-declaration-metaclass" "jazz.Class-Declaration" "%%class-is?" "%%get-code-type" "type" "let" "%%class-of" "jazz.sourcified-form" "jazz.class-of" "jazz.debug-user?" "if" "jazz.new-code" "environment" "object")}
      {Lisp-Entry "jazz.walk-symbol" generic/specific ("jazz.Jazz-Walker") 1023 21 1023 37 ("nextmethod" "else" "jazz.walk-error" ",method-symbol-src" "" "apply" "rest" "object" "jazz.walk" "jazz.source-code" "jazz.dispatch->symbol" "jazz.sourcify-if" "method-symbol-src" "not" "jazz.new-method-reference" "jazz.Method-Declaration" "method-declaration" "jazz.Category-Declaration" "walker" "jazz.lookup-reference" "jazz.resolve-binding" "category-declaration" "jazz.new-reference" "jazz.Slot-Declaration" "%%class-is?" "%%assert" "jazz.private-access" "jazz.find-class-declaration" "jazz.lookup-declaration" "slot-declaration" "self" "'self" "%%eq?" "and" "cond" "if" "self/class-name" "name" "tilde?" "lambda" "jazz.split-tilde" "unwrap-syntactic-closure" "symbol" "let" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.split-tilde" define #f 1048 9 1048 25 ("1" "%%fx+" "%%fx<" "%%substring" "%%string->symbol" "0" "%%fx>" "%%string-length" "len" "%%not" "if" "jazz.string-find-reversed" "n" "%%symbol->string" "str" "let" "proc" "symbol")}
      {Lisp-Entry "jazz.walk-symbol-assignment" generic/specific ("jazz.Jazz-Walker") 1064 21 1064 48 ("nextmethod" "%%desourcify" "jazz.walk-error" "walker" "jazz.walk" "jazz.new-assignment" "jazz.Slot-Declaration" "%%class-is?" "%%assert" "jazz.private-access" "jazz.find-class-declaration" "jazz.lookup-declaration" "slot-declaration" "let" "self" "'self" "%%eq?" "and" "if" "self/class-name" "name" "tilde?" "lambda" "jazz.source-code" "jazz.split-tilde" "value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" generic/specific ("jazz.Jazz-Walker") 1081 21 1081 35 ("nextmethod" "walker" "jazz.walk-dispatch" "jazz.dispatch?" "if" "%%car" "jazz.source-code" "procedure-expr" "let" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.With-Self" define-class ("class runtime") 1093 27 1093 41 ()}
      {Lisp-Entry "jazz.new-with-self" define #f 1096 9 1096 27 ("jazz.With-Self" "jazz.allocate-with-self" "body")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.With-Self") 1100 21 1100 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "self" "'self" "jazz.*self*" "parameterize" "begin" "jazz.simplify-begin" "jazz.new-code" "expression" "%%get-with-self-body" "body" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.With-Self") 1111 21 1111 41 ("%%get-with-self-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.With-Dynamic-Self" define-class ("class runtime") 1125 27 1125 49 ()}
      {Lisp-Entry "jazz.new-with-dynamic-self" define #f 1128 9 1128 35 ("jazz.With-Dynamic-Self" "jazz.allocate-with-dynamic-self" "body" "code")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.With-Dynamic-Self") 1132 21 1132 41 ("jazz.Any" "jazz.emit-statements-code" "jazz.sourcified-form" "jazz.*self*" "parameterize" "begin" "jazz.simplify-begin" "jazz.new-code" "%%get-with-dynamic-self-body" "body" "expression" "%%get-with-dynamic-self-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.With-Dynamic-Self") 1144 21 1144 41 ("%%get-with-dynamic-self-body" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Cast" define-class ("class runtime") 1157 27 1157 36 ()}
      {Lisp-Entry "jazz.new-cast" define #f 1160 9 1160 22 ("jazz.Cast" "jazz.allocate-cast" "expression" "type")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Cast") 1164 21 1164 41 ("jazz.emit-expression" "jazz.emit-type-cast" "jazz.new-code" "%%get-cast-expression" "expression" "%%get-expression-type" "type" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Cast") 1177 21 1177 41 ("%%get-cast-expression" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Construct" define-class ("class runtime") 1190 27 1190 41 ()}
      {Lisp-Entry "jazz.new-construct" define #f 1193 9 1193 27 ("jazz.Construct" "jazz.allocate-construct" "values" "class")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Construct") 1197 21 1197 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "jazz.emit-expression" "jazz.sourcified-form" "%%object" "jazz.new-code" "%%get-construct-values" "values" "expression" "%%get-construct-class" "class" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Construct") 1207 21 1207 41 ("%%get-construct-values" "jazz.fold-expressions" "%%get-construct-class" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.cache-dispatch" define #f 1221 9 1221 28 ("jazz.interface-dispatch" "interface" "jazz.class-dispatch" "jazz.final-dispatch" "final" "%%get-method-dispatch-type" "case" "proc" "%%get-category-field" "field" "jazz.error" "%%assertion" "jazz.locate-method-owner" "category" "%%class-of" "class" "let" "object" "lambda" "setter" "name")}
      {Lisp-Entry "jazz.final-dispatch" define #f 1239 9 1239 28 ("%%get-method-implementation" "%%final-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "type" "field")}
      {Lisp-Entry "jazz.class-dispatch" define #f 1245 9 1245 28 ("%%class-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "class-level" "let" "type" "field")}
      {Lisp-Entry "jazz.interface-dispatch" define #f 1253 9 1253 32 ("%%interface-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "interface-rank" "let" "type" "field")}
      {Lisp-Entry "jazz.dispatch" define #f 1261 9 1261 22 ("jazz.error" "jazz.find-dispatch" "or" "name" "object")}
      {Lisp-Entry "jazz.find-dispatch" define #f 1266 9 1266 27 ("%%interface-dispatch" "interface" "%%get-method-implementation-rank" "%%get-method-category-rank" "%%class-dispatch" "%%get-method-implementation" "%%final-dispatch" "final" "%%get-method-dispatch-type" "case" "%%get-category-field" "field" "%%not" "if" "jazz.locate-method-owner" "category" "%%class-of" "class" "let" "name" "object")}
      {Lisp-Entry "jazz.Dispatch" define-class ("class runtime") 1281 27 1281 40 ()}
      {Lisp-Entry "jazz.new-dispatch" define #f 1284 9 1284 26 ("jazz.Dispatch" "jazz.allocate-dispatch" "arguments" "name" "source")}
      {Lisp-Entry "jazz.emit-expression" generic/specific ("jazz.Dispatch") 1288 21 1288 41 ("expression" "jazz.emit-dispatch" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-dispatch" define #f 1292 9 1292 27 ("jazz.Any" ",object" "object" "jazz.with-uniqueness" ",d" "set!" ",name" "',name" "jazz.cache-dispatch" "%%set-cdr!" "d" "%%symbol->string" "%%string-append" "jazz.register-variable" "dv" "%%get-expression-source" "jazz.codes-forms" "jazz.sourcified-form" "jazz.new-code" "jazz.emit-method-dispatch" "dispatch-code" "code" "lambda" "jazz.with-code-value" "jazz.emit-inlined-final-dispatch" "or" "jazz.emit-expressions" "rest-codes" "jazz.emit-expression" "%%cdr" "rest-arguments" "%%car" "object-argument" "method" "'method" "dispatch" "'dispatch" "find" "'find" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-module-warn?" "jazz.warnings?" "begin" "%%not" "method-declaration" "lookup-method/warn" "jazz.Method-Declaration" "and" "jazz.public-access" "jazz.lookup-declaration" "jazz.Category-Declaration" "lookup-method" "jazz.resolve-binding" "jazz.Autoload-Declaration" "%%class-is?" "if" "%%get-code-type" "jazz.patch-type-until-unification" "object-type" "object-code" "resolve-type" "define" "%%get-dispatch-arguments" "arguments" "%%get-dispatch-name" "name" "let" "environment" "declaration" "expression")}
      {Lisp-Entry "jazz.with-code-value" define #f 1346 9 1346 29 ("%%get-code-source" ",form" ",value" "%%get-code-type" "jazz.new-code" "jazz.generate-symbol" "value" "%%symbol?" "if" "%%get-code-form" "form" "let" "proc" "code")}
      {Lisp-Entry "jazz.emit-inlined-final-dispatch" define #f 1359 9 1359 41 ("else" "%%get-lexical-binding-name" "jazz.error" "jazz.call-return-type" "%%get-expression-source" "%%get-code-form" "jazz.desourcify-all" "jazz.sourcify-if" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "jazz.emit-binding-symbol" "argument" "parameter" "map" "jazz.sourcified-form" "self" "jazz.new-code" "jazz.emit-expression" "body-code" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "let" "final" "case" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "inline" "'inline" "%%get-method-declaration-expansion" "%%eq?" "if" "environment" "source-declaration" "arguments" "object" "declaration" "expression")}
      {Lisp-Entry "jazz.fold-expression" generic/specific ("jazz.Dispatch") 1390 21 1390 41 ("%%get-dispatch-arguments" "jazz.fold-expressions" "%%get-dispatch-name" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.walk-dispatch" define #f 1399 9 1399 27 ("jazz.walk-list" "jazz.new-dispatch" "%%desourcify" "jazz.walk-error" "%%null?" "%%not" "%%assertion" "%%cdr" "arguments" "%%car" "jazz.source-code" "jazz.dispatch->symbol" "name" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.definition-modifiers" define #f 1412 8 1412 33 ()}
      {Lisp-Entry "jazz.parse-definition" define #f 1418 9 1418 30 (",@effective-body" ",parameters" "value" "unspecified" "'unspecified" "%%list" "%%null?" "effective-body" "body" "%%desourcify" "parameters" "let*" "values" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "name" "let" "%%car" "jazz.source-code" "%%symbol?" "if" "jazz.definition-modifiers" "jazz.parse-modifiers" "expansion" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-definition-declaration" define #f 1436 9 1436 41 ("jazz.walk" "%%set-definition-declaration-value" "%%cons" "new-environment" "inline" "'inline" "%%eq?" "%%when" "jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.new-definition-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.build-function-type" "if" "effective-type" "jazz.walk-parameters" "and" "signature" "jazz.specifier->type" "type" "let" "jazz.source-code" "%%cdr" "jazz.parse-definition" "parameters" "value" "expansion" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-definition" define #f 1452 9 1452 29 ("%%set-declaration-source" "jazz.walk" "%%set-definition-declaration-value" "%%cons" "%%set-definition-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "if" "new-environment" "inline" "'inline" "%%neq?" "%%when" "jazz.require-declaration" "new-declaration" "let" "jazz.source-code" "%%cdr" "jazz.parse-definition" "parameters" "value" "expansion" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.build-function-type" define #f 1471 9 1471 33 ("jazz.Any" "or" "and" "%%get-signature-rest" "rest" "let" "%%get-signature-named" "%%get-signature-optional" "%%get-signature-positional" "parameter-type" "map" "jazz.new-function-type" "result-type" "signature")
        {Lisp-Entry "parameter-type" define #f 1472 11 1472 25 ("jazz.Any" "%%get-lexical-binding-type" "or" "parameter")}}
      {Lisp-Entry "jazz.specialize-modifiers" define #f 1490 8 1490 33 ()}
      {Lisp-Entry "jazz.parse-specialize" define #f 1494 9 1494 30 ("%%cddr" "%%cadr" "values" "as" "'as" "%%car" "%%eq?" "if" "jazz.specialize-modifiers" "jazz.parse-modifiers" "expansion" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-specialize" define #f 1501 9 1501 31 (",operator" "%specialize" ",@rest" ",@parameters" ",name" ",expansion" "undocumented" "public" "definition" "begin" "jazz.compose-specializer-name" "or" "name" "parameters" "operator" "%%cdr" "%%car" "signature" "let" "jazz.parse-specialize" "as" "expansion" "receive" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.compose-specializer-name" define #f 1513 9 1513 38 ("jazz.specifier->name" "%%list" "jazz.specifier?" "if" "parameter" "lambda" "map" "append" "string-append" "%%apply" "%%symbol->string" "%%string-append" "%%string->symbol" "parameters" "operator")}
      {Lisp-Entry "jazz.walk-%specialize-declaration" define #f 1528 9 1528 42 ("jazz.new-specialize" "jazz.add-specializer" "specializer-declaration" "jazz.lookup-reference" "specialized-declaration" "%%cddr" "%%car" "specializer" "%%cadr" "jazz.source-code" "specialized" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-specialize" define #f 1538 9 1538 29 ("jazz.new-specialize" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.generic-modifiers" define #f 1547 8 1547 30 ()}
      {Lisp-Entry "jazz.parse-generic" define #f 1552 9 1552 27 ("values" "body" "specifier" "lambda" "jazz.parse-specifier" "%%cdr" "parameters" "name" "%%car" "jazz.source-code" "signature" "let" "jazz.generic-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-generic-declaration" define #f 1562 9 1562 38 ("jazz.walk-error" "jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.new-generic-declaration" "new-declaration" "jazz.walk-parameters" "signature" "jazz.dynamic-parameter-types" "jazz.lookup-reference" "dynamic-parameter-type" "lambda" "map" "dispatch-type-declarations" "jazz.Any" "jazz.walk-specifier" "type" "let" "jazz.Module-Declaration" "%%class-is?" "if" "jazz.source-code" "%%cdr" "jazz.parse-generic" "body" "parameters" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-generic" define #f 1577 9 1577 26 ("%%set-declaration-source" "jazz.walk-body" "%%set-generic-declaration-body" "%%set-generic-declaration-signature" "jazz.require-declaration" "new-declaration" "let" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.source-code" "%%cdr" "jazz.parse-generic" "body" "parameters" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.specific-modifiers" define #f 1593 8 1593 31 ()}
      {Lisp-Entry "jazz.parse-specific" define #f 1597 9 1597 28 ("values" "parameters" "name" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "%%cdr" "body" "%%car" "jazz.desourcify" "signature" "let*" "jazz.specific-modifiers" "jazz.parse-modifiers" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-specific" define #f 1607 9 1607 27 ("jazz.walk-error" "%%set-declaration-source" "jazz.walk-body" "%%set-specific-declaration-body" "nextmethod" "'nextmethod" "jazz.new-nextmethod-variable" "%%cons" "body-environment" "uptodate" "'uptodate" "public" "'public" "jazz.new-specific-declaration" "new-declaration" "root-dynamic-parameters?" "root?" "let*" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.Generic-Declaration" "jazz.private-access" "jazz.lookup-declaration" "generic-declaration" "let" "jazz.Module-Declaration" "%%class-is?" "if" "jazz.source-code" "%%cdr" "jazz.parse-specific" "body" "parameters" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "root-dynamic-parameters?" define #f 1608 11 1608 35 ("else" "or" "%%cons" "%%get-declaration-locator" "%%get-lexical-binding-name" "form-src" "declaration" "resume" "walker" "jazz.walk-error" "%%eq?" "%%cdr" "jazz.of-subtype?" "if" "specific-class" "%%get-dynamic-parameter-class" "%%get-reference-binding" "jazz.resolve-binding" "generic-class" "cond" "specific-dynamic?" "jazz.Dynamic-Parameter" "%%is?" "generic-dynamic?" "specific-parameter" "%%car" "%%pair?" "and" "generic-parameter" "root?" "specific-parameters" "%%get-generic-declaration-signature" "%%get-signature-positional" "generic-parameters" "iter" "let" "parameters" "name" "specific-signature" "generic-declaration")}}
      {Lisp-Entry "jazz.class-modifiers" define #f 1653 8 1653 28 ()}
      {Lisp-Entry "jazz.class-keywords" define #f 1659 8 1659 27 ()}
      {Lisp-Entry "jazz.parse-class" define #f 1663 9 1663 25 ("values" "jazz.class-keywords" "jazz.parse-keywords" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "%%cdr" "jazz.Any" "type" "%%car" "jazz.source-code" "name" "let" "jazz.class-modifiers" "jazz.parse-modifiers" "implementor" "compatibility" "abstraction" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-class" define #f 1672 9 1672 26 (",@class-body" ",interface-names" "implements" "metaclass" ",name" ",implementor" ",compatibility" ",abstraction" ",access" ",@metaclass-body" ",ascendant-name" ":class" "extends" ",metaclass-name" "begin" "%%symbol->string" "%%string-append" "%%string->symbol" "let" "else" "jazz.walk-error" "%%specified?" "%class" "jazz.sourcify-if" "%%null?" "cond" "preprocess-meta" "class-body" "metaclass-body" "jazz.source-code" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "preprocess-meta" define #f 1673 11 1673 26 ("jazz.queue-list" "values" "%%cddr" "%%car" "%%cons" "jazz.sourcify-if" "jazz.enqueue" "meta" "'meta" "%%cadr" "%%eq?" "%%cdr" "jazz.source-code" "%%pair?" "and" "if" "expr" "lambda" "for-each" "class" "jazz.new-queue" "metaclass" "let" "body")}}
      {Lisp-Entry "jazz.walk-%class-declaration" define #f 1707 9 1707 37 ("jazz.walk-error" "jazz.walk-declarations" "%%cons" "new-environment" "jazz.setup-class-lookups" "jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.new-class-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.listify" "jazz.lookup-reference" "interface-name" "lambda" "map" "jazz.unspecified?" "interfaces" "jazz.lookup-metaclass" "metaclass" "let" "jazz.lookup-ascendant" "ascendant-base" "ascendant-relation" "ascendant" "jazz.Module-Declaration" "%%class-is?" "if" "jazz.source-code" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%class" define #f 1725 9 1725 25 ("%%set-declaration-source" "jazz.walk-namespace" "%%set-namespace-declaration-body" "begin" "jazz.walk-error" "Object" "'Object" "%%neq?" "%%not" "and" "if" "%%get-class-declaration-ascendant" "ascendant-declaration" "%%cons" "new-environment" "jazz.require-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-metaclass" define #f 1739 9 1739 30 ("jazz.lookup-reference" "Object-Class" "'Object-Class" "%%eq?" "jazz.unspecified?" "or" "if" "metaclass-name" "ascendant" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-ascendant" define #f 1745 9 1745 30 ("else" "Object-Class" "'Object-Class" "jazz.effective-class-declaration-metaclass" "or" "%%cadr" "jazz.lookup-reference" "base" "relation" "let" ":class" "':class" "%%car" "%%eq?" "%%pair?" "and" "values" "jazz.unspecified?" "cond" "ascendant-name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.effective-class-declaration-metaclass" define #f 1765 9 1765 51 ("jazz.effective-class-declaration-metaclass" "%%get-class-declaration-ascendant" "ascendant" "%%get-category-declaration-metaclass" "or" "jazz.resolve-binding" "let" "%%not" "if" "class-declaration")}
      {Lisp-Entry "jazz.interface-modifiers" define #f 1781 8 1781 32 ()}
      {Lisp-Entry "jazz.interface-keywords" define #f 1786 8 1786 31 ()}
      {Lisp-Entry "jazz.parse-interface" define #f 1790 9 1790 29 ("values" "jazz.interface-keywords" "jazz.parse-keywords" "body" "attributes" "ascendant-names" "metaclass-name" "%%cdr" "jazz.Any" "type" "%%car" "name" "let" "jazz.interface-modifiers" "jazz.parse-modifiers" "implementor" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-interface-declaration" define #f 1799 9 1799 40 ("jazz.walk-error" "jazz.walk-declarations" "%%cons" "new-environment" "jazz.setup-interface-lookups" "jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.new-interface-declaration" "jazz.find-child-declaration" "new-declaration" "jazz.listify" "ascendant-name" "lambda" "map" "ascendants" "jazz.lookup-reference" "Interface" "'Interface" "%%eq?" "jazz.unspecified?" "or" "metaclass" "jazz.Module-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-interface" "body" "attributes" "ascendant-names" "metaclass-name" "implementor" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-interface" define #f 1816 9 1816 28 ("%%set-declaration-source" "jazz.walk-namespace" "%%set-namespace-declaration-body" "%%cons" "new-environment" "jazz.require-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-interface" "body" "attributes" "ascendant-names" "metaclass-name" "implementor" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.slot-modifiers" define #f 1832 8 1832 27 ()}
      {Lisp-Entry "jazz.slot-keywords" define #f 1836 8 1836 26 ()}
      {Lisp-Entry "jazz.slot-accessors-modifiers" define #f 1840 8 1840 37 ()}
      {Lisp-Entry "jazz.slot-accessor-modifiers" define #f 1848 8 1848 36 ()}
      {Lisp-Entry "jazz.parse-slot" define #f 1856 9 1856 24 ("values" "jazz.walk-error" "%%not-null?" "if" "jazz.slot-keywords" "jazz.parse-keywords" "setter" "getter" "accessors" "initialize" "specifier" "lambda" "jazz.parse-specifier" "%%car" "name" "let" "jazz.source-code" "%%cdr" "jazz.slot-modifiers" "jazz.parse-modifiers" "rest" "compatibility" "access" "receive" "form-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-slot" define #f 1867 9 1867 25 ("%slot" "'%slot" "jazz.expand-slot-form" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-slot-form" define #f 1871 9 1871 30 ("set!" ",value" ",setter-expansion" ",setter-abstraction" ",setter-propagation" "protected" "'protected" ",@specifier-list" ",getter-expansion" ",getter-abstraction" ",getter-propagation" "public" "'public" "or" "method" ",setter-name" ",getter-name" ",initialize" "with-self" "%%unspecified?" ",compatibility" ",access" ",specifier" ",name" ",symbol" "jazz.sourcify-if" "begin" "if" "specifier-list" "generate-setter?" "generate" "'generate" "%%eq?" "generate-getter?" "jazz.generate-symbol" "value" "let*" "setter-name" "setter-generation" "setter-expansion" "setter-abstraction" "setter-propagation" "setter-access" "parse-accessor" "getter-name" "getter-generation" "getter-expansion" "getter-abstraction" "getter-propagation" "getter-access" "parse-accessors" "default-generation" "default-expansion" "default-abstraction" "default-propagation" "default-access" "else" "%%list" "%%symbol?" "jazz.unspecified?" "cond" "jazz.desourcify" "info" "lambda" "standardize" "let" "jazz.parse-slot" "setter" "getter" "accessors" "initialize" "compatibility" "access" "specifier" "name" "receive" "symbol" "form-src" "declaration" "resume" "walker")
        {Lisp-Entry "parse-accessors" define #f 1872 11 1872 26 ("or" "values" "form-src" "jazz.walk-error" "%%not-null?" "if" "jazz.slot-accessors-modifiers" "declaration" "resume" "walker" "jazz.parse-modifiers" "rest" "generation" "expansion" "abstraction" "propagation" "access" "receive" "slot-access" "form")}
        {Lisp-Entry "parse-accessor" define #f 1878 11 1878 25 ("values" "form-src" "jazz.walk-error" "else" "%%car" "%%cdr" "%%symbol->string" "%%string-append" "%%string->symbol" "generate" "'generate" "%%eq?" "and" "%%null?" "cond" "name" "or" "let" "jazz.slot-accessor-modifiers" "declaration" "resume" "walker" "jazz.parse-modifiers" "rest" "generation" "expansion" "abstraction" "propagation" "access" "receive" "prefix" "form" "default-generation" "default-expansion" "default-abstraction" "default-propagation" "default-access" "slot-name")}}
      {Lisp-Entry "jazz.walk-%slot-declaration" define #f 1929 9 1929 36 ("jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.find-child-declaration" "or" "new-declaration" "jazz.new-slot-declaration" "jazz.new-property-declaration" "%property" "'%property" "%%car" "%%eq?" "new" "jazz.Any" "jazz.walk-specifier" "if" "type" "%%cdr" "setter-name" "getter-name" "initialize" "compatibility" "access" "specifier" "name" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%slot" define #f 1941 9 1941 24 ("%%set-declaration-source" ",name" "set!" ",setter-name" ",value" "jazz.generate-symbol" "value" "%%set-property-declaration-setter" ",getter-name" "with-self" "self" "lambda" "%%set-property-declaration-getter" "jazz.Property-Declaration" "%%class-is?" "%%when" "jazz.walk" "%%set-slot-declaration-initialize" "%%cadr" "jazz.require-declaration" "new-declaration" "jazz.unspecified?" "if" "%%cdr" "setter-name" "getter-name" "initialize" "compatibility" "access" "specifier" "name" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-property" define #f 1973 9 1973 29 ("%property" "'%property" "jazz.expand-slot-form" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.method-modifiers" define #f 1982 8 1982 29 ()}
      {Lisp-Entry "jazz.parse-method" define #f 1993 9 1993 26 ("values" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "body" "specifier" "lambda" "jazz.parse-specifier" "%%desourcify" "%%cdr" "jazz.wrap-parameters" "parameters" "name" "let" "jazz.desourcify-all" "method" "'method" "%%cons" "%%get-declaration-toplevel" "%%get-lexical-binding-name" "jazz.walk-error" "%%car" "jazz.source-code" "%%pair?" "and" "%%assertion" "jazz.method-modifiers" "jazz.parse-modifiers" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-method-declaration" define #f 2004 9 2004 37 (",@body" "with-self" "jazz.walk" "%%set-method-declaration-body" "%%set-method-declaration-signature" "%%when" "jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "jazz.new-method-declaration" "jazz.find-child-declaration" "or" "new-declaration" "find-root-declaration" "root-declaration" "let*" "jazz.unspecified" "values" "jazz.walk-parameters" "augmented-environment" "signature" "concrete" "'concrete" "inline" "'inline" "%%eq?" "and" "inline?" "jazz.Procedure" "jazz.walk-specifier" "jazz.new-function-type" "if" "type" "let" "jazz.walk-error" "jazz.Category-Declaration" "%%class-is?" "%%assertion" "jazz.source-code" "%%cdr" "jazz.parse-method" "body" "parameters" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "find-root-declaration" define #f 2005 11 2005 32 ("%%get-declaration-parent" "%%eq?" "if" "%%get-method-declaration-root" "or" "and" "root-declaration" "jazz.private-access" "declaration" "jazz.lookup-declaration" "next-declaration" "let*" "name")}}
      {Lisp-Entry "jazz.walk-method" define #f 2036 9 2036 25 ("%%set-declaration-source" "%%set-method-declaration-body" "%%set-method-declaration-signature" "inline" "'inline" "%%when" "concrete" "'concrete" ",@body" "with-self" "%%get-lexical-binding-type" "nextmethod" "'nextmethod" "jazz.new-nextmethod-variable" "%%cons" "jazz.walk" "body-expression" "let" "jazz.walk-parameters" "augmented-environment" "signature" "else" "'virtual" "jazz.Interface-Declaration" "%%class-is?" "%%not" "case" "override" "'override" "%%neq?" "chained" "virtual" "%%memq" "jazz.walk-error" "final" "'final" "%%eq?" "cond" "root-category-declaration" "%%get-method-declaration-propagation" "and" "root-method-propagation" "%%get-method-declaration-root" "root-method-declaration" "%%get-declaration-parent" "category-declaration" "jazz.private-access" "jazz.lookup-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-method" "body" "parameters" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.wrap-parameters" define #f 2072 9 2072 29 ("jazz.queue-list" "%%cdr" "with-self" ",@specifier-list" "%%cadr" "%%list" "specifier-list" "rest" "specifier" "lambda" "%%cddr" "jazz.parse-specifier" "%%keyword?" "jazz.enqueue" "jazz.specifier?" "%%pair?" "if" "%%car" "parameter" "else" "jazz.enqueue-list" "%%symbol?" "%%null?" "cond" "scan" "iter" "jazz.new-queue" "queue" "let" "parameters")}
      {Lisp-Entry "jazz.walk-cast" define #f 2102 9 2102 23 ("jazz.walk" "jazz.walk-specifier" "jazz.new-cast" "%%cddr" "%%car" "expression" "%%cadr" "specifier" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-construct" define #f 2115 9 2115 28 ("jazz.walk-list" "jazz.walk" "jazz.new-construct" "%%cddr" "values" "%%cadr" "class" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-self" define #f 2128 9 2128 28 ("jazz.walk-body" "%%cdr" "body" "jazz.new-with-self" "jazz.new-self-binding" "%%cons" "new-environment" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-with-dynamic-self" define #f 2141 9 2141 37 ("values" "%%cdr" "body" "%%car" "code" "let" "form")}
      {Lisp-Entry "jazz.walk-with-dynamic-self-declaration" define #f 2147 9 2147 48 ("jazz.walk-declarations" "%%desourcify" "%%cdr" "jazz.parse-with-dynamic-self" "body" "code" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-dynamic-self" define #f 2152 9 2152 36 ("jazz.walk-list" "jazz.new-with-dynamic-self" "jazz.new-dynamic-self-binding" "%%cons" "new-environment" "let" "%%desourcify" "%%cdr" "jazz.parse-with-dynamic-self" "body" "code" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-with-local-variables" define #f 2165 9 2165 40 ("values" "%%cdr" "body" "%%car" "variables" "let" "form")}
      {Lisp-Entry "jazz.walk-with-local-variables-declaration" define #f 2171 9 2171 51 ("jazz.walk-declarations" "%%desourcify" "%%cdr" "jazz.parse-with-local-variables" "body" "variables" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-local-variables" define #f 2176 9 2176 39 ("jazz.walk-list" "jazz.new-begin" "jazz.new-local-variable-binding" "variable" "lambda" "map" "jazz.new-walk-frame" "%%cons" "new-environment" "let" "%%desourcify" "%%cdr" "jazz.parse-with-local-variables" "body" "variables" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-proclaim" generic/specific ("jazz.Jazz-Walker") 2187 21 2187 43 ("walker" "jazz.walk-error" "jazz.Category-Declaration" "jazz.Module-Declaration" "%%class-is?" "%%not" "and" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.remotable-stub-modifiers" define #f 2198 8 2198 37 ()}
      {Lisp-Entry "jazz.remotable-stub-keywords" define #f 2201 8 2201 36 ()}
      {Lisp-Entry "jazz.parse-remotable-stub" define #f 2205 9 2205 34 ("values" "jazz.remotable-stub-keywords" "jazz.parse-keywords" "body" "ascendant-name" "%%cdr" "%%car" "name" "let" "jazz.remotable-stub-modifiers" "jazz.parse-modifiers" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.method-stub-modifiers" define #f 2213 8 2213 34 ()}
      {Lisp-Entry "jazz.parse-method-stub" define #f 2219 9 2219 31 ("jazz.Any" "values" "body" "%%cdr" "parameters" "name" "%%car" "signature" "let*" "jazz.method-stub-modifiers" "jazz.parse-modifiers" "passage" "invocation" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-remotable-stub" define #f 2228 9 2228 35 ("Remote-Proxy" "'Remote-Proxy" ",@values-method" "implements" "Local-Proxy" "'Local-Proxy" "metaclass" "Remotable-Stub" "'Remotable-Stub" ",stub-interface" ",stub-access" "interface" ",remote-class" ",local-class" "Stub-Interface" "'Stub-Interface" "jazz.specified?" "extends" ",interface-class" "package" "class" "begin" "nextmethod" ",@values-list" "list" "append" "proxy-values" "values-method" "values-list" ",call" ",value-keyword" "proxy-value" "self" "',name" ",invoker" "if" ",dispatch" ",@local-result" ",rest" ",@positional" "object" "" "apply" "%%not-null?" "override" "%%when" ",@parameters" ",name" "abstract" "virtual" ",access" "value-keyword" "unspecified" "local-result" "dispatch" "call-remote" "'call-remote" "call" "exec-remote" "'exec-remote" "exec" "post-remote" "'post-remote" "post" "invoker" "jazz.parse-method-stub" "invocation" "access" "method" "'method" "%%eq?" "method-form" "lambda" "for-each" "remotes" "locals" "proxies" "remote-class" "local-class" "stub-interface" "interface-class" "jazz.string->keyword" "0" "%%substring" "%%string=?" "4" "%%fx>" "and" "%%assert" "%%string-length" "len" "str" "let*" "value" "reference" "case" "passage" "parse-value-keyword" "%%cdr" "jazz.enqueue" "%%car" "else" "jazz.enqueue-list" "%%symbol?" "jazz.queue-list" "values" "%%null?" "cond" "scan" "iter" "parameter" "encode" "positional" "jazz.new-queue" "parameters" "let" "params" "parse-parameters" "%%symbol->string" "%%string-append" "%%string->symbol" "suffix" "add" "define" "jazz.parse-remotable-stub" "body" "ascendant-name" "stub-access" "type" "name" "receive" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-com-external" define #f 2371 9 2371 33 ("jazz.emit-com-external" ",name" "public" "jazz.emit-com-function" ",lowlevel-name" "definition" "begin" "%%cons" "jazz.C-Type-Declaration" "%%class-is?" "resolved" "jazz.every?" "jazz.platform.windows.com.HRESULT" "'jazz.platform.windows.com.HRESULT" "%%get-declaration-locator" "%%eq?" "hresult?" "%%symbol->string" "%%string-append" "%%string->symbol" "lowlevel-name" "car" "resolved-directions" "resolved-params" "resolved-result" "let" "jazz.walk-error" "jazz.resolve-c-type-reference" "%%symbol?" "type" "lambda" "resolve-declaration" "%%null?" "if" "refiid" "%%cdr" "cadr" "map" "param-types" "%%car" "name" "let*" "rest" "signature" "result-type" "offset" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-com-function" define #f 2389 9 2389 31 ("resolved-params" "param-types" "resolved-result" "result-type" "offset")
        {Lisp-Entry "fix-locator" define #f 2390 11 2390 22 ("%%symbol->string" "%%string-append" "%%string->symbol" "'type" "%%get-c-type-declaration-kind" "%%eq?" "if" "declaration" "type")}}
      {Lisp-Entry "jazz.emit-com-external" define #f 2420 9 2420 31 ("'result" "%%fx=" ",@out-list" "values" "else" "%%car" "1" "unspecified" "0" "%%length" "case" "generate-free" "generate-ref" "begin" "validate-hresult" ",refiid" "validate-hresult2" "if" "generate-low" ",lowlevel-name" "result" "generate-encode/enref" "generate-in" "coptr" "lambda" "generate-out" "generate-cotype-transform" "out-list" "let" "refiid" "resolved-directions" "resolved-params" "lowlevel-name" "hresult?")
        {Lisp-Entry "generate-in" define #f 2421 11 2421 22 ("%%number->string" "%%string-append" "%%string->symbol" "out" "'out" "%%eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-low" define #f 2426 11 2426 23 ("%%number->string" "%%string-append" "%%string->symbol" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-out" define #f 2429 11 2429 23 ("%%number->string" "%%string-append" "%%string->symbol" "in" "'in" "%%eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-encode/enref" define #f 2434 11 2434 32 (",value" ",encode/enref" ",binding" "generate-in" "get-cotype-default-value" "out" "'out" "%%eq?" "if" "value" "get-cotype-encode/enref" "encode/enref" "generate-low" "binding" "let" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-ref" define #f 2444 11 2444 23 (",value" ",ref" ",binding" "generate-low" "value" "get-cotype-ref" "ref" "generate-out" "binding" "let" "in" "'in" "%%eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-free" define #f 2454 11 2454 24 (",value" ",free" "if" "generate-low" "value" "get-cotype-free" "free" "let" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-cotype-transform" define #f 2461 11 2461 36 ("%%fx+" "%%cdr" "cons" "%%car" "generated" "%%pair?" "if" "1" "order" "resolved-directions" "resolved-params" "iter" "let" "generator")}}
      {Lisp-Entry "get-cotype-default-value" define #f 2497 9 2497 33 ("else" "jazz.platform.windows.WinTypes.LONG*" "0" "jazz.platform.windows.WinTypes.INT*" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "jazz.platform.windows.com.VARIANT" "jazz.platform.windows.com.VARIANT_BOOL*" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "jazz.platform.windows.com.GUID" "jazz.platform.windows.com.BSTR*" "error" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-encode/enref" define #f 2514 9 2514 32 ("else" "LONG-enref" "'LONG-enref" "jazz.platform.windows.WinTypes.LONG*" "INT-enref" "'INT-enref" "jazz.platform.windows.WinTypes.INT*" "IUnknown*-enref" "'IUnknown*-enref" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-encode" "'VARIANT-encode" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL-enref" "'VARIANT_BOOL-enref" "jazz.platform.windows.com.VARIANT_BOOL*" "VARIANT_BOOL-encode" "'VARIANT_BOOL-encode" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-encode" "'GUID-encode" "jazz.platform.windows.com.GUID" "BSTR*-enref" "'BSTR*-enref" "jazz.platform.windows.com.BSTR*" "BSTR-encode" "'BSTR-encode" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-ref" define #f 2531 9 2531 23 ("else" "LONG*-ref" "'LONG*-ref" "jazz.platform.windows.WinTypes.LONG*" "INT*-ref" "'INT*-ref" "jazz.platform.windows.WinTypes.INT*" "IUnknown**-ref" "'IUnknown**-ref" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-ref" "'VARIANT-ref" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL*-ref" "'VARIANT_BOOL*-ref" "jazz.platform.windows.com.VARIANT_BOOL*" "VARIANT_BOOL-decode" "'VARIANT_BOOL-decode" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-ref" "'GUID-ref" "jazz.platform.windows.com.GUID" "BSTR*-ref" "'BSTR*-ref" "jazz.platform.windows.com.BSTR*" "BSTR-ref" "'BSTR-ref" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-free" define #f 2548 9 2548 24 ("else" "LONG*-free" "'LONG*-free" "jazz.platform.windows.WinTypes.LONG*" "INT*-free" "'INT*-free" "jazz.platform.windows.WinTypes.INT*" "IUnknown**-free" "'IUnknown**-free" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-decode" "'VARIANT-decode" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL*-free" "'VARIANT_BOOL*-free" "jazz.platform.windows.com.VARIANT_BOOL*" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-free" "'GUID-free" "jazz.platform.windows.com.GUID" "BSTR*-free" "'BSTR*-free" "jazz.platform.windows.com.BSTR*" "BSTR-free" "'BSTR-free" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "jazz.expand-assert" define #f 2570 9 2570 27 ("jazz.expand-assert-test" "jazz.sourcify-if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-assertion" define #f 2577 9 2577 30 ("jazz.expand-assertion-test" "jazz.sourcify-if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-assert-test" define #f 2584 9 2584 32 ("error" "'error" "%%list" "jazz.expand-assertion-body" "get-output-string" "%%desourcify" "write" "display" "open-output-string" "port" "message" "%%cddr" "body" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-assertion-test" define #f 2595 9 2595 35 ("jazz.expand-assertion-body" "%%cdr" "body" "%%cddr" "%%car" "action" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-assertion-body" define #f 2602 9 2602 35 (",@body" "begin" "jazz.simplify-begin" ",action" ",assertion" "not" "unspecified" "%%not-null?" "if" "let" "body" "action" "assertion" "test?")}
      {Lisp-Entry "jazz.walk-declare" define #f 2618 9 2618 26 ("jazz.new-declare" "%%cdr" "declarations" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-include" define #f 2629 9 2629 28 ("jazz.new-c-include" "%%cdr" "name" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-declare" define #f 2640 9 2640 28 ("jazz.new-c-declare" "%%cdr" "code" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-named-declare-modifiers" define #f 2651 8 2651 38 ()}
      {Lisp-Entry "jazz.parse-c-named-declare" define #f 2656 9 2656 35 ("values" "jazz.Any" "type" "let" "code" "name" "jazz.bind" "jazz.c-named-declare-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-named-declare-declaration" define #f 2663 9 2663 46 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-c-named-declare-declaration" "jazz.find-child-declaration" "or" "new-declaration" "let" "%%desourcify" "%%cdr" "jazz.parse-c-named-declare" "code" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-named-declare-reference" define #f 2671 9 2671 47 ("%%get-declaration-locator" "jazz.walk-error" "jazz.C-Named-Declare-Declaration" "%%class-is?" "if" "jazz.lookup-reference" "c-named-declare-declaration" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-named-declare" define #f 2678 9 2678 34 ("jazz.require-declaration" "new-declaration" "%%cdr" "jazz.parse-c-named-declare" "code" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-initialize" define #f 2690 9 2690 31 ("jazz.new-c-initialize" "%%cdr" "code" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-type-modifiers" define #f 2701 8 2701 29 ()}
      {Lisp-Entry "jazz.parse-c-type" define #f 2706 9 2706 26 ("declare" "scheme-to-c" "c-to-scheme" "values" "%%null?" "if" "jazz.Any" "type" "let" "conversions" "c-type" "name" "jazz.bind" "jazz.c-type-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-type-declaration" define #f 2716 9 2716 37 ("jazz.add-declaration-child" "effective-declaration" "%%get-c-type-declaration-pointer-types" "%%set-c-type-declaration-pointer-types" "%%when" "jazz.new-c-type-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.walk-error" "jazz.resolve-c-named-declare-reference" "%%cons" "%%string?" "let" "jazz.resolve-c-type" "inclusions" "base-type-declaration" "expansion" "kind" "jazz.Module-Declaration" "%%class-is?" "if" "%%desourcify" "%%cdr" "jazz.parse-c-type" "declare" "scheme-to-c" "c-to-scheme" "c-type" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-type" define #f 2734 9 2734 25 ("jazz.require-declaration" "%%cdr" "jazz.parse-c-type" "declare" "scheme-to-c" "c-to-scheme" "c-type" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-type" define #f 2740 9 2740 28 ("jazz.queue-list" "base-type-declaration" "expansion" "kind" "receive" "jazz.walk-error" "else" "'union" "union" "'struct" "struct" "map" "'function" "result-type" "parameter-types" "function" "and" "resolve-expansion" "'pointer" "base-type" "pointer" ",@tag-rest" ",c-string" "%%cdr" "tag-rest" "c-string" "jazz.bind" "%%cadr" "'native" "native" "%%car" "case" "%%pair?" "'type" "%%string?" "%%get-declaration-locator" "alias" "'alias" "values" "jazz.enqueue" "jazz.resolve-c-type-reference" "c-type-declaration" "%%symbol?" "cond" "resolve" "define" "jazz.new-queue" "queue" "let" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-type-reference" define #f 2780 9 2780 38 ("%%get-declaration-locator" "jazz.walk-error" "jazz.C-Type-Declaration" "%%class-is?" "if" "jazz.lookup-reference" "c-type-declaration" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-type-reference" define #f 2787 9 2787 37 ("%%get-module-declaration-inclusions" "%%append" "%%set-module-declaration-inclusions" "%%get-declaration-toplevel" "module-declaration" "let" "jazz.resolve-c-type" "inclusions" "base-type-declaration" "expansion" "kind" "receive" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-function" define #f 2799 9 2799 29 (",c-name-or-code" "map" "c-lambda" "jazz.new-c-function" "jazz.expand-c-type-reference" "type" "lambda" "resolve-access" "%%cdr" "c-name-or-code" "result-type" "types" "jazz.bind" "jazz.walk-error" "%%length" "4" "%%fx=" "list?" "and" "%%assertion" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-definition-modifiers" define #f 2813 8 2813 35 ()}
      {Lisp-Entry "jazz.parse-c-definition" define #f 2818 9 2818 32 ("values" "%%cdr" "parameters" "jazz.Any" "type" "%%car" "name" "let" "body" "scope" "c-name" "result-type" "parameter-types" "signature" "jazz.bind" "jazz.c-definition-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-definition-declaration" define #f 2827 9 2827 43 ("jazz.add-declaration-child" "effective-declaration" "%%set-declaration-source" "map" "jazz.new-c-definition-declaration" "jazz.find-child-declaration" "or" "new-declaration" "jazz.walk-parameters" "signature" "jazz.expand-c-type-reference" "lambda" "resolve-access" "%%cdr" "jazz.parse-c-definition" "body" "scope" "c-name" "result-type" "parameter-types" "parameters" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-definition" define #f 2839 9 2839 31 ("%%set-declaration-source" "jazz.walk-body" "%%set-c-definition-declaration-body" "%%set-c-definition-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.require-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-c-definition" "body" "scope" "c-name" "result-type" "parameter-types" "parameters" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.build-pointer-symbol" define #f 2856 9 2856 34 ("%%symbol->string" "%%string-append" "%%string->symbol" "type")}
      {Lisp-Entry "jazz.pointer?" define #f 2860 9 2860 22 ("1" "%%fx-" "%%string-ref" "%%eq?" "%%string-length" "lgt" "%%symbol->string" "str" "let*" "type")}
      {Lisp-Entry "jazz.build-method-symbol" define #f 2866 9 2866 33 ("symbol->string" "map" "%%symbol->string" "string-append" "apply" "%%string->symbol" "rest" "struct")}
      {Lisp-Entry "jazz.parse-structure-name" define #f 2870 9 2870 34 ("%%cddr" "%%cadr" "%%car" "%%symbol->string" "values" "%%symbol?" "if" "name")}
      {Lisp-Entry "jazz.kind+type" define #f 2876 9 2876 23 ("values" "%%car" "alias" "'alias" "%%eq?" "if" "%%get-c-type-declaration-inclusions" "inclusions" "%%get-c-type-declaration-expansion" "expansion" "%%get-c-type-declaration-kind" "kind" "jazz.resolve-c-type-reference" "loop" "let" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-accessor" define #f 2886 9 2886 29 ("values" ",setter-string" "void" "-set!" "'-set!" "setter" ",getter-string" ",type" ",struct*" "c-function" "-ref" "'-ref" "jazz.build-method-symbol" "public" "definition" "getter" "%%memq" "wchar_t-string" "char-string" "type*" "jazz.build-pointer-symbol" "struct*" "let*" "'type" "'union" "'struct" "else" "%%number->string" "size-string" "cond" "setter-string" "union" "function" "pointer" "native" "case" "%%string-append" "wchar_t" "'wchar_t" "char" "'char" "%%eq?" "or" "if" "getter-string" "%%symbol->string" "id-string" "jazz.kind+type" "expansion" "kind" "receive" "jazz.walk-error" "%%symbol?" "%%integer?" "%%when" "%%null?" "%%not" "and" "%%cddr" "clause-rest" "size" "%%cadr" "id" "%%car" "type" "let" "struct" "clause" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-structure/union" define #f 2942 9 2942 36 ("map" "append" "%%apply" "unsigned-int" "'sizeof" "void" "native" "free" "'free" "c-function" "make" "'make" "jazz.build-method-symbol" "public" "definition" ",@tag*-rest" "pointer" ",struct*" ",@tag-rest" ",c-struct-string" "type" ",struct" "c-type" "begin" "%%list" "jazz.expand-accessor" "setter" "getter" "clause" "expand-accessor" "define" "%%cdr" "%%car" "%%cons" "%%null?" "if" "tag*-rest" "%%string-append" "sizeof" "jazz.build-pointer-symbol" "struct*" "let" "jazz.parse-structure-name" "tag-rest" "c-struct-string" "struct" "receive" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-structure" define #f 2964 9 2964 32 ("jazz.expand-structure/union" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-structure-array" define #f 2968 9 2968 38 ("array-element" "'array-element" "%%string-append" ",struct*" "int" "c-function" "array-make" "'array-make" "jazz.build-method-symbol" "public" "definition" "begin" "%%symbol->string" "%%car" "%%null?" "%%not" "if" "c-struct-string" "jazz.build-pointer-symbol" "struct*" "struct" "let*" "rest" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-union" define #f 2979 9 2979 28 ("jazz.expand-structure/union" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-external" define #f 2988 9 2988 31 (",c-name" ",type" ",params" "c-function" ",s-name" "public" "definition" "%%symbol->string" "%%null?" "if" "c-name" "%%cdr" "params" "%%car" "s-name" "let*" "rest" "signature" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-external-so" define #f 2997 9 2997 34 ("WCHAR-string" "values" ",ext-s-name" "result" "WCHAR-copy" "1" ",string-param" "string-length" "+" "WCHAR-array-make" "pt" "let" ",@new-params" ",s-name" "public" "definition" ",c-name" "%%cons" ",type" "c-external" "begin" "%%null?" "if" "c-name" "list-ref" "string-param" "jazz.generate-symbol" "param" "lambda" "map" "new-params" "%%cdr" "params" "%%symbol->string" "%%string-append" "%%string->symbol" "ext-s-name" "%%car" "s-name" "let*" "rest" "signature" "arg" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-parameterize" define #f 3020 9 3020 31 ("jazz.walk-body" "jazz.queue-list" "jazz.new-parameterize" "jazz.walk" "%%cons" "jazz.enqueue" "%%cdr" "value" "%%car" "variable" "continuation-capture" "binding-form" "lambda" "for-each" "jazz.new-queue" "expanded-bindings" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "%%cddr" "body" "%%cadr" "jazz.source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-slots" define #f 3047 9 3047 29 (",@body" ",setter-name" "',setter-name" "value" "',object-symbol" ",getter-name" "',getter-name" "%%list" "%%get-slot-declaration-setter-name" "setter-name" "%%get-slot-declaration-getter-name" "getter-name" "jazz.lookup-reference" "slot-declaration" "let*" "slot-name" "lambda" "map" "let-symbol" ",object" ",object-symbol" "jazz.walk" "jazz.generate-symbol" "object-symbol" "%%cdr" "body" "object" "slot-names" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-time" define #f 3067 9 3067 23 ("jazz.walk-list" "jazz.new-time-special" "%%cdr" "forms" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-form" define #f 3078 9 3078 25 ("nextmethod" "cons" "get-class-forms" "get-class-form" "override" "method" ",class-locator" "',class-locator" "register-form" ",class-name" ",form" "',form" "jml->form>>" "class-form" "definition" "begin" "%%get-declaration-locator" "class-locator" "%%get-lexical-binding-name" "class-name" "let*" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz" define ("dialect") 3102 21 3102 25 ("jazz.new-jazz-dialect")}
      {Lisp-Entry "jazz.dialect" define ("dialect") 3105 21 3105 33 ("jazz.new-jazz-dialect")}
      {Lisp-Entry "definition" define ("special") 3109 28 3109 38 ("jazz.walk-definition" "jazz")}
      {Lisp-Entry "generic" define ("special") 3110 28 3110 35 ("jazz.walk-generic" "jazz")}
      {Lisp-Entry "specific" define ("special") 3111 28 3111 36 ("jazz.walk-specific" "jazz")}
      {Lisp-Entry "class" define ("syntax") 3112 28 3112 33 ("jazz.expand-class" "jazz")}
      {Lisp-Entry "%class" define ("special") 3113 28 3113 34 ("jazz.walk-%class" "jazz")}
      {Lisp-Entry "interface" define ("special") 3114 28 3114 37 ("jazz.walk-interface" "jazz")}
      {Lisp-Entry "slot" define ("syntax") 3115 28 3115 32 ("jazz.expand-slot" "jazz")}
      {Lisp-Entry "property" define ("syntax") 3116 28 3116 36 ("jazz.expand-property" "jazz")}
      {Lisp-Entry "%slot" define ("special") 3117 28 3117 33 ("jazz.walk-%slot" "jazz")}
      {Lisp-Entry "%property" define ("special") 3118 28 3118 37 ("jazz.walk-%slot" "jazz")}
      {Lisp-Entry "method" define ("special") 3119 28 3119 34 ("jazz.walk-method" "jazz")}
      {Lisp-Entry "declare" define ("special") 3120 28 3120 35 ("jazz.walk-declare" "jazz")}
      {Lisp-Entry "c-include" define ("special") 3121 28 3121 37 ("jazz.walk-c-include" "jazz")}
      {Lisp-Entry "c-declare" define ("special") 3122 28 3122 37 ("jazz.walk-c-declare" "jazz")}
      {Lisp-Entry "c-named-declare" define ("special") 3123 28 3123 43 ("jazz.walk-c-named-declare" "jazz")}
      {Lisp-Entry "c-initialize" define ("special") 3124 28 3124 40 ("jazz.walk-c-initialize" "jazz")}
      {Lisp-Entry "c-function" define ("special") 3125 28 3125 38 ("jazz.walk-c-function" "jazz")}
      {Lisp-Entry "c-type" define ("special") 3126 28 3126 34 ("jazz.walk-c-type" "jazz")}
      {Lisp-Entry "c-definition" define ("special") 3127 28 3127 40 ("jazz.walk-c-definition" "jazz")}
      {Lisp-Entry "specialize" define ("macro") 3128 28 3128 38 ("jazz.expand-specialize" "jazz")}
      {Lisp-Entry "%specialize" define ("special") 3129 28 3129 39 ("jazz.walk-specialize" "jazz")}
      {Lisp-Entry "parameterize" define ("special") 3130 28 3130 40 ("jazz.walk-parameterize" "jazz")}
      {Lisp-Entry "with-slots" define ("special") 3131 28 3131 38 ("jazz.walk-with-slots" "jazz")}
      {Lisp-Entry "with-self" define ("special") 3132 28 3132 37 ("jazz.walk-with-self" "jazz")}
      {Lisp-Entry "with-dynamic-self" define ("special") 3133 28 3133 45 ("jazz.walk-with-dynamic-self" "jazz")}
      {Lisp-Entry "with-local-variables" define ("special") 3134 28 3134 48 ("jazz.walk-with-local-variables" "jazz")}
      {Lisp-Entry "cast" define ("special") 3135 28 3135 32 ("jazz.walk-cast" "jazz")}
      {Lisp-Entry "construct" define ("special") 3136 28 3136 37 ("jazz.walk-construct" "jazz")}
      {Lisp-Entry "time" define ("special") 3137 28 3137 32 ("jazz.walk-time" "jazz")}
      {Lisp-Entry "remotable-stub" define ("macro") 3138 28 3138 42 ("jazz.expand-remotable-stub" "jazz")}
      {Lisp-Entry "assert" define ("syntax") 3139 28 3139 34 ("jazz.expand-assert" "jazz")}
      {Lisp-Entry "assertion" define ("syntax") 3140 28 3140 37 ("jazz.expand-assertion" "jazz")}
      {Lisp-Entry "c-structure" define ("macro") 3141 28 3141 39 ("jazz.expand-c-structure" "jazz")}
      {Lisp-Entry "c-union" define ("macro") 3142 28 3142 35 ("jazz.expand-c-union" "jazz")}
      {Lisp-Entry "c-external" define ("macro") 3143 28 3143 38 ("jazz.expand-c-external" "jazz")}
      {Lisp-Entry "c-external-so" define ("macro") 3144 28 3144 41 ("jazz.expand-c-external-so" "jazz")}
      {Lisp-Entry "com-external" define ("macro") 3145 28 3145 40 ("jazz.expand-com-external" "jazz")}
      {Lisp-Entry "form" define ("macro") 3146 28 3146 32 ("jazz.expand-form" "jazz")}}})
"ecase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "ecase.scm"} 1257476767
    {Lisp-Entry "jazz.dialect.syntax.ecase" module #f 37 18 37 43 ("scheme")
      {Lisp-Entry "error" native #f 43 16 43 26 ()}
      {Lisp-Entry "ecase" macro #f 53 16 53 21 ("desourcify" "error" "eqv?" "'eqv?" "=" "'=" "list" "integer?" "if" "value" "or" "'or" "pair?" "cons" "else" "'else" "eq?" "cdr" "body" "car" "selector" "clause" "map" "cond" "symbol" "lambda" "with-uniqueness" "sourcify-if" "cddr" "clauses" "source-code" "cadr" "target" "let" "form-src")}}})
"either"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "either.scm"} 1257476767
    {Lisp-Entry "jazz.dialect.syntax.either" module #f 37 18 37 44 ("scheme")
      {Lisp-Entry "error" native #f 45 16 45 26 ()}
      {Lisp-Entry "either" macro #f 51 16 51 22 ("'let" "generate-symbol" "symbol" "'if" "list" "rest" "expr" "bind" "pair" "lambda" "proc" "letrec" "set!" "car" "symbol?" "when" "not" "while" "complex?" "scan" "sourcify-if" "error" "null?" "if" "source-code" "cdr" "expressions" "let" "form-src")}}})
"enumeration"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "enumeration.scm"} 1257476768
    {Lisp-Entry "jazz.dialect.syntax.enumeration" module #f 37 18 37 49 ("scheme")}})
"essay"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "essay.scm"} 1257476768
    {Lisp-Entry "jazz.dialect.syntax.essay" module #f 37 18 37 43 ("scheme")
      {Lisp-Entry "butlast" native #f 43 16 43 28 ()}
      {Lisp-Entry "error" native #f 44 16 44 26 ()}
      {Lisp-Entry "last" native #f 45 16 45 25 ()}
      {Lisp-Entry "essay" macro #f 50 16 50 21 (",expr" ",@tests" "and" "when" "last" "expr" "butlast" "tests" "sourcify-if" "error" "null?" "if" "source-code" "cdr" "expressions" "let" "form-src")}}})
"exception"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "exception.scm"} 1257473848
    {Lisp-Entry "jazz.dialect.core.exception" unit #f 39 16 39 43 ()
      {Lisp-Entry "jazz.get-exception-hook" define #f 47 9 47 32 ("##primordial-exception-handler-hook")}
      {Lisp-Entry "jazz.set-exception-hook" define #f 50 9 50 32 ("##primordial-exception-handler-hook" "set!" "hook")}
      {Lisp-Entry "jazz.invoke-exception-hook" define #f 54 9 54 35 ("##thread-end-with-uncaught-exception!" "exc" "hook")}
      {Lisp-Entry "jazz.system-exception-hook" define #f 63 9 63 35 ("##repl-exception-handler-hook" "other" "exc")}
      {Lisp-Entry "jazz.set-terminal-title" define #f 72 9 72 32 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.bring-terminal-to-front" define #f 75 9 75 37 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.clear-terminal" define #f 78 9 78 28 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.with-exception-filter" define #f 87 9 87 35 ("%%continuation-graft" "filter-exc" "if" "exc" "with-exception-handler" "catcher-cont" "lambda" "%%continuation-capture" "current-exception-handler" "previous-handler" "let" "thunk" "catcher" "filter")}
      {Lisp-Entry "jazz.with-exception-propagater" define #f 112 9 112 39 ("current-exception-handler" "let" "%%continuation-graft" "raise-cont" "exc" "with-exception-handler" "catcher-cont" "lambda" "%%continuation-capture" "thunk" "handler")}}}
  {Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "exception.jazz"} 1257476768
    {Lisp-Entry "jazz.dialect.language.exception" module #f 37 18 37 49 ("jazz.dialect")
      {Lisp-Entry "*exception-debugger*" definition #f 55 12 55 32 ()}
      {Lisp-Entry "get-exception-debugger" definition #f 59 20 59 42 ("*exception-debugger*")}
      {Lisp-Entry "set-exception-debugger" definition #f 62 20 62 42 ("*exception-debugger*" "set!" "exception-debugger")}
      {Lisp-Entry "current-exception-debugger" definition #f 66 12 66 38 ("make-parameter")}
      {Lisp-Entry "exception-debugger-hook" definition #f 70 21 70 44 ("system-exception-hook" "if" "*exception-debugger*" "current-exception-debugger" "either" "exception-debugger" "let" "other" "exc")}
      {Lisp-Entry "with-exception-debugger" definition #f 77 20 77 43 ("current-exception-debugger" "parameterize" "thunk" "exception-debugger")}
      {Lisp-Entry "system-exception-debugger" definition #f 82 20 82 45 ("system-exception-hook" "invoke-exception-hook" "exc")}
      {Lisp-Entry "with-system-exception-debugger" definition #f 86 20 86 50 ("system-exception-debugger" "with-exception-debugger" "thunk")}
      {Lisp-Entry "Exception" class #f 91 7 91 16 ("Object")
        {Lisp-Entry "get-message" method #f 94 26 94 37 ()}
        {Lisp-Entry "present-message" method #f 98 26 98 41 ("get-message" "list" "rest")}
        {Lisp-Entry "print" method #f 102 20 102 25 ("get-message" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "exception?" definition #f 108 20 108 30 ("Exception" "is?" "object?" "and" "obj")}
      {Lisp-Entry "Exception-Detail" class #f 113 15 113 31 ("Object")
        {Lisp-Entry "icon" slot #f 116 8 116 12 ()}
        {Lisp-Entry "get-icon" accessor #f 116 24 116 32 ()}
        {Lisp-Entry "title" slot #f 117 8 117 13 ()}
        {Lisp-Entry "get-title" accessor #f 117 24 117 32 ()}
        {Lisp-Entry "location" slot #f 118 8 118 16 ()}
        {Lisp-Entry "get-location" accessor #f 118 24 118 32 ()}
        {Lisp-Entry "children" slot #f 119 8 119 16 ()}
        {Lisp-Entry "get-children" accessor #f 119 24 119 32 ()}
        {Lisp-Entry "initialize" method #f 122 20 122 30 ("children~self" "location~self" "title~self" "icon~self" "set!" "nextmethod" "children" "location" "title" "icon")}
        {Lisp-Entry "print" method #f 130 20 130 25 ("children" "location" "title" "icon" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "System-Exception" class #f 139 7 139 23 ("Exception")
        {Lisp-Entry "exception" slot #f 142 8 142 17 ()}
        {Lisp-Entry "get-exception" accessor #f 142 25 142 33 ()}
        {Lisp-Entry "initialize" method #f 145 20 145 30 ("exception~self" "set!" "nextmethod" "exception")}}
      {Lisp-Entry "wrap-exception" definition #f 150 20 150 34 ("System-Exception" "new" "exception?" "if" "obj")}
      {Lisp-Entry "Break" class #f 156 7 156 12 ("Exception")
        {Lisp-Entry "continue" slot #f 159 8 159 16 ()}
        {Lisp-Entry "initialize" method #f 162 20 162 30 ("continue~self" "set!" "nextmethod" "continue")}}
      {Lisp-Entry "Continue" class #f 167 7 167 15 ("Exception")}
      {Lisp-Entry "Error" class #f 170 7 170 12 ("generate" "override" "Exception")
        {Lisp-Entry "message" slot #f 173 8 173 15 ()}
        {Lisp-Entry "set-message" accessor #f 173 23 173 31 ()}
        {Lisp-Entry "initialize" method #f 176 20 176 30 ("set-message" "nextmethod" "message" "message:")}}
      {Lisp-Entry "error?" definition #f 181 20 181 26 ("Error" "is?" "object?" "and" "obj")}
      {Lisp-Entry "Read-Error" class #f 186 15 186 25 ("Error")
        {Lisp-Entry "source" slot #f 189 8 189 14 ()}
        {Lisp-Entry "get-source" accessor #f 189 22 189 30 ()}
        {Lisp-Entry "start" slot #f 190 8 190 13 ()}
        {Lisp-Entry "get-start" accessor #f 190 22 190 30 ()}
        {Lisp-Entry "end" slot #f 191 8 191 11 ()}
        {Lisp-Entry "get-end" accessor #f 191 22 191 30 ()}
        {Lisp-Entry "initialize" method #f 194 20 194 30 ("end~self" "start~self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "source" "bind-keywords" "rest")}
        {Lisp-Entry "get-range" method #f 202 18 202 27 ("end" "start" "Range" "new")}}
      {Lisp-Entry "Parse-Error" class #f 206 15 206 26 ("Error")
        {Lisp-Entry "source" slot #f 209 8 209 14 ()}
        {Lisp-Entry "get-source" accessor #f 209 22 209 30 ()}
        {Lisp-Entry "start" slot #f 210 8 210 13 ()}
        {Lisp-Entry "get-start" accessor #f 210 22 210 30 ()}
        {Lisp-Entry "end" slot #f 211 8 211 11 ()}
        {Lisp-Entry "get-end" accessor #f 211 22 211 30 ()}
        {Lisp-Entry "initialize" method #f 214 20 214 30 ("end~self" "start~self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "source" "bind-keywords" "rest")}}
      {Lisp-Entry "Convertion-Error" class #f 222 15 222 31 ("Parse-Error")
        {Lisp-Entry "object" slot #f 225 8 225 14 ()}
        {Lisp-Entry "get-object" accessor #f 225 22 225 30 ()}
        {Lisp-Entry "type" slot #f 226 8 226 12 ()}
        {Lisp-Entry "get-type" accessor #f 226 22 226 30 ()}
        {Lisp-Entry "initialize" method #f 229 20 229 30 ("type~self" "object~self" "set!" "nextmethod" "apply" "others" "type" "object" "bind-keywords" "rest")}
        {Lisp-Entry "get-message" method #f 236 20 236 31 ("format-gender" "object" "format" "type-name" "string?" "if" "type" "let")}}
      {Lisp-Entry "Signal" class #f 244 7 244 13 ("Exception")}
      {Lisp-Entry "Cancel-Signal" class #f 247 15 247 28 ("Signal")}
      {Lisp-Entry "call-with-catch" definition #f 250 20 250 35 ("is?" "object?" "and" "procedure?" "if" "obj" "lambda" "with-exception-filter" "thunk" "catcher" "predicate/type")}
      {Lisp-Entry "throw" definition #f 268 20 268 25 ("raise" "exception")}
      {Lisp-Entry "throw-cancel" definition #f 272 27 272 39 ("Cancel-Signal" "new" "throw")}
      {Lisp-Entry "signal" definition #f 276 19 276 25 ("throw")}
      {Lisp-Entry "error" definition #f 279 20 279 25 ("format" "apply" "message:" "Error" "new" "signal" "rest")}
      {Lisp-Entry "disabled-functionnality" definition #f 283 20 283 43 ("error")}
      {Lisp-Entry "must-implement" definition #f 287 20 287 34 ("either" "error" "what" "definition-name")}
      {Lisp-Entry "warn" definition #f 293 20 293 24 ("apply" ":console" "format" "rest" "string")}
      {Lisp-Entry "warn-unimplemented" definition #f 298 20 298 38 (":console" "format" "name")}
      {Lisp-Entry "Restart" class #f 307 7 307 14 ("Object")
        {Lisp-Entry "name" slot #f 310 8 310 12 ()}
        {Lisp-Entry "get-name" accessor #f 310 23 310 31 ()}
        {Lisp-Entry "message" slot #f 311 8 311 15 ()}
        {Lisp-Entry "get-message" accessor #f 311 23 311 31 ()}
        {Lisp-Entry "handler" slot #f 312 8 312 15 ()}
        {Lisp-Entry "get-handler" accessor #f 312 23 312 31 ()}
        {Lisp-Entry "initialize" method #f 315 20 315 30 ("handler~self" "message~self" "name~self" "set!" "nextmethod" "handler" "message" "name")}
        {Lisp-Entry "print" method #f 322 20 322 25 ("name" "format" "lambda" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "current-restarts" definition #f 329 19 329 35 ("make-parameter")}
      {Lisp-Entry "with-restart-handler" definition #f 333 20 333 40 ("Restart" "new" "cons" "current-restarts" "parameterize" "thunk" "handler" "message" "name")}
      {Lisp-Entry "with-restart-catcher" definition #f 338 20 338 40 ("else" "car" "null?" "not" "cond" "continuation-return" "rest" "with-restart-handler" "catcher-cont" "lambda" "continuation-capture" "thunk" "catcher" "message" "name")}
      {Lisp-Entry "find-restart" definition #f 350 20 350 32 ("current-restarts" "get-name" "eq?" "restart" "lambda" "find-if" "name")}
      {Lisp-Entry "find-restarts" definition #f 356 20 356 33 ("current-restarts" "get-name" "eq?" "restart" "lambda" "collect-if" "name")}
      {Lisp-Entry "invoke-restart" definition #f 362 20 362 34 ("apply" "get-handler" "handler" "let" "rest" "restart")}
      {Lisp-Entry "new-system-thread" definition #f 372 20 372 37 ("with-system-exception-debugger" "lambda" "new-thread" "apply" "rest" "thunk")}}})
"foreign"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "foreign.scm"} 1257473849
    {Lisp-Entry "jazz.dialect.core.foreign" unit #f 37 16 37 41 ()
      {Lisp-Entry "jazz.foreign?" define #f 42 12 42 25 ("foreign?")}
      {Lisp-Entry "jazz.foreign-address" define #f 43 12 43 32 ("foreign-address")}
      {Lisp-Entry "jazz.foreign-release!" define #f 44 12 44 33 ("foreign-release!")}
      {Lisp-Entry "jazz.foreign-released?" define #f 45 12 45 34 ("foreign-released?")}
      {Lisp-Entry "jazz.foreign-tags" define #f 46 12 46 29 ("foreign-tags")}
      {Lisp-Entry "jazz.still-obj-refcount-dec!" define #f 51 13 51 41 ("%%still-obj-refcount-dec!" "foreign")}
      {Lisp-Entry "jazz.still-obj-refcount-inc!" define #f 54 13 54 41 ("%%still-obj-refcount-inc!" "foreign")}}})
"format"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "format.jazz"} 1257476770
    {Lisp-Entry "jazz.dialect.language.format" module #f 37 18 37 46 ("jazz.dialect")
      {Lisp-Entry "error" native #f 47 16 47 26 ()}
      {Lisp-Entry "format" definition #f 68 20 68 26 ("with-printer" ":string" "':string" "string?" "parse-format" "cdr" "prog1" ":reader" "detail:" "nil" "empty-value:" "properties:" "3" "precision:" "after:" "before:" "last-separator:" "separator:" "padding:" "justify:" "width:" "list?:" "get-list?" "not-found:" "getf" "keyword" "keyword-parameter" ":v" "param" "default" ":right" ":left" "n" ">=" "cardinality" "size" "justify" "buffer" "get-padding" "padding" "get-justify" "justification" "get-width" "width" "proc" "localize" "'localize-directive" "unimplemented" "force-output" "-" "fresh-line" "newline" "do" "repeat" "loop" "1" "optional-parameter" "count" "cddr" "neq?" "nil?" "memq" "cadr" "value" "car" "key" "not-null?" "scan" "get-empty-value" "empty-value" "get-properties" "properties" "print-list" "get-detail" "get-after" "after" "get-before" "before" "get-last-separator" "last-separator" "get-separator" "separator" "let*" "print-real" "get-precision" "precision" "print-hexadecimal" "print-binary" "print-unsigned" "print-expr" "detail" "textual" "write" "display" "lambda" "with-justification" "argument" "peek-argument" "next-argument" "or" "open-input-string" "subreader" "explicit?" "get-output-string" "begin" "open-output-string" "printer" "read-control-string" "process-conditional" "eqv?" "cond" "null?" "eq?" "read-delimited" "arguments-empty?" "toplevel?" "and" "localize-directive" "z" "force-directive" "!" "freshline-directive" "$" "newline-directive" "%" "tab-directive" "&" "column-directive" "_" "properties-directive" "k" "list-directive" "l" "real-directive" "r" "hexadecimal-directive" "x" "binary-directive" "b" "unsigned-directive" "u" "char-directive" "print-directive" "p" "text-directive" "t" "write-directive" "s" "display-directive" "a" "read-parameters" "parameters" "read" "directive" "else" "conditional-directive" "error" "peek-char" "write-char" "when" "require-char" "case" "set!" "eof-object?" "if" "read-char" "c" "not" "while" "done?" "let" "output?" "reader" "process" "arguments-scan" "control-reader" "out" "arguments" "control-string" "destination" "process-format" "define" "rest")}
      {Lisp-Entry "format-cardinality" definition #f 420 20 420 38 ("->string" "0" "=" "if" "n")}
      {Lisp-Entry "format-plural" definition #f 426 20 426 33 ("1" "=" "if" "plural" "n")}
      {Lisp-Entry "format-gender" definition #f 432 20 432 33 ("first" "vowel?" "if" "word")}
      {Lisp-Entry "format-is/are" definition #f 438 20 438 33 ("1" "=" "if" "n")}
      {Lisp-Entry "format-was/were" definition #f 444 20 444 35 ("1" "=" "if" "n")}
      {Lisp-Entry "format-y/ies" definition #f 450 20 450 32 ("1" "=" "if" "n")}
      {Lisp-Entry "format-following" definition #f 456 20 456 36 ("format" "1" "=" "if" "n" "name")}
      {Lisp-Entry "print-expr" definition #f 467 13 467 23 ("print" "current-output-port" "printer" "detail" "expr")}
      {Lisp-Entry "print-unsigned" definition #f 471 13 471 27 ("print-unsigned" "'print-unsigned" "unimplemented" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-binary" definition #f 475 13 475 25 ("2" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-hexadecimal" definition #f 479 13 479 30 ("16" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-real" definition #f 483 13 483 23 ("new-frac" ">" "and" "carry?" "dot-pos" "or" "if" "len" "string->number" "round" "temp-str" "last-part" "first-part" "else" "-" "make-string" "string-append" "<" "display" "=" "cond" "frac-len" "string-length" "1" "+" "frac-str" "0" "substring" "pre-str" "find" "dot-index" "exact->inexact" "number->string" "str" "let*" "current-output-port" "printer" "precision" "r")}
      {Lisp-Entry "print-list" definition #f 522 13 522 23 ("null?" "pair?" "if" "cdr" "next" "print" "car" "expr" "scan" "iter" "let" "display" "not-null?" "when" "current-output-port" "printer" "detail" "after" "before" "last-separator" "separator" "list")}}})
"functional"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "functional.jazz"} 1257478909
    {Lisp-Entry "jazz.dialect.language.functional" module #f 37 18 37 50 ("terminal-port" ":terminal" "register-printer" "axis-find-in" "axis-find" "axis-for-each" "instantiate-ends-with?" "instantiate-starts-with?" "string-find-in" "instantiate-find-in" "string-find" "instantiate-find" "instantiate-butlast" "string-for-each" "instantiate-for-each" "jazz.dialect")
      {Lisp-Entry "error" native #f 48 16 48 26 ()}
      {Lisp-Entry "system-format" native #f 49 16 49 34 ()}
      {Lisp-Entry "Module" class #f 57 7 57 13 ("Object")
        {Lisp-Entry "name" slot #f 60 8 60 12 ()}
        {Lisp-Entry "get-name" accessor #f 60 23 60 31 ()}
        {Lisp-Entry "exports" slot #f 61 8 61 15 ()}
        {Lisp-Entry "get-exports" accessor #f 61 23 61 31 ()}}
      {Lisp-Entry "Type" class #f 69 7 69 11 ("Object")}
      {Lisp-Entry "Category" class #f 77 7 77 15 ("Type")
        {Lisp-Entry "name" slot #f 80 8 80 12 ()}
        {Lisp-Entry "get-name" accessor #f 80 28 80 36 ()}
        {Lisp-Entry "fields" slot #f 81 8 81 14 ()}
        {Lisp-Entry "get-fields" accessor #f 81 28 81 36 ()}
        {Lisp-Entry "virtual-size" slot #f 82 8 82 20 ()}
        {Lisp-Entry "get-virtual-size" accessor #f 82 28 82 36 ()}
        {Lisp-Entry "ancestors" slot #f 83 8 83 17 ()}
        {Lisp-Entry "get-ancestors" accessor #f 83 28 83 36 ()}
        {Lisp-Entry "descendants" slot #f 84 8 84 19 ()}
        {Lisp-Entry "get-descendants" accessor #f 84 28 84 36 ()}
        {Lisp-Entry "print" method #f 87 20 87 25 ("get-name" "system-format" "lambda" "self" "print-unreadable" "detail" "output")}}
      {Lisp-Entry "typed?" definition #f 93 20 93 26 ("class-of" "get-ancestors" "get-name" "eq?" "category" "lambda" "some?" "category-name" "obj")}
      {Lisp-Entry "Class" class #f 104 7 104 12 ("Category")
        {Lisp-Entry "ascendant" slot #f 107 8 107 17 ()}
        {Lisp-Entry "get-ascendant" accessor #f 107 34 107 42 ()}
        {Lisp-Entry "interfaces" slot #f 108 8 108 18 ()}
        {Lisp-Entry "get-interfaces" accessor #f 108 34 108 42 ()}
        {Lisp-Entry "slots" slot #f 109 8 109 13 ()}
        {Lisp-Entry "get-slots" accessor #f 109 34 109 42 ()}
        {Lisp-Entry "instance-slots" slot #f 110 8 110 22 ()}
        {Lisp-Entry "get-instance-slots" accessor #f 110 34 110 42 ()}
        {Lisp-Entry "instance-size" slot #f 111 8 111 21 ()}
        {Lisp-Entry "get-instance-size" accessor #f 111 34 111 42 ()}
        {Lisp-Entry "level" slot #f 112 8 112 13 ()}
        {Lisp-Entry "get-level" accessor #f 112 34 112 42 ()}
        {Lisp-Entry "dispatch-table" slot #f 113 8 113 22 ()}
        {Lisp-Entry "get-dispatch-table" accessor #f 113 34 113 42 ()}
        {Lisp-Entry "core-method-alist" slot #f 114 8 114 25 ()}
        {Lisp-Entry "get-core-method-alist" accessor #f 114 34 114 42 ()}
        {Lisp-Entry "core-virtual-alist" slot #f 115 8 115 26 ()}
        {Lisp-Entry "get-core-virtual-alist" accessor #f 115 34 115 42 ()}
        {Lisp-Entry "core-virtual-names" slot #f 116 8 116 26 ()}
        {Lisp-Entry "get-core-virtual-names" accessor #f 116 34 116 42 ()}
        {Lisp-Entry "core-vtable" slot #f 117 8 117 19 ()}
        {Lisp-Entry "get-core-vtable" accessor #f 117 34 117 42 ()}
        {Lisp-Entry "class-table" slot #f 118 8 118 19 ()}
        {Lisp-Entry "get-class-table" accessor #f 118 34 118 42 ()}
        {Lisp-Entry "interface-table" slot #f 119 8 119 23 ()}
        {Lisp-Entry "get-interface-table" accessor #f 119 34 119 42 ()}
        {Lisp-Entry "coerce-object" method #f 122 26 122 39 ("self" "type-name" "error" "obj")}
        {Lisp-Entry "external-name" method #f 126 26 126 39 ("self" "type-name" "error" "when" "error?" "error?:")}}
      {Lisp-Entry "Object-Class" class #f 131 7 131 19 ("Class")}
      {Lisp-Entry "class?" definition #f 134 27 134 33 ("Class" "is?" "obj")}
      {Lisp-Entry "instance-of?" definition #f 138 27 138 39 ("class-of" "eq?" "class" "obj")}
      {Lisp-Entry "coerce" definition #f 142 27 142 33 ("coerce-object" "class" "object")}
      {Lisp-Entry "allocate" definition #f 146 20 146 28 ("call-into-abstract" "size" "class")}
      {Lisp-Entry "Interface" class #f 155 7 155 16 ("Category")
        {Lisp-Entry "ascendants" slot #f 158 8 158 18 ()}
        {Lisp-Entry "get-ascendants" accessor #f 158 26 158 34 ()}
        {Lisp-Entry "rank" slot #f 159 8 159 12 ()}
        {Lisp-Entry "get-rank" accessor #f 159 26 159 34 ()}}
      {Lisp-Entry "Field" class #f 167 7 167 12 ("Object")
        {Lisp-Entry "name" slot #f 170 8 170 12 ()}
        {Lisp-Entry "get-name" accessor #f 170 20 170 28 ()}
        {Lisp-Entry "print" method #f 173 20 173 25 ("get-name" "system-format" "lambda" "self" "print-unreadable" "detail" "output")}}
      {Lisp-Entry "category-field" definition #f 179 20 179 34 ("find-field" "field-name" "category")}
      {Lisp-Entry "Method" class #f 188 7 188 13 ("Field")
        {Lisp-Entry "dispatch-type" slot #f 191 8 191 21 ()}
        {Lisp-Entry "get-dispatch-type" accessor #f 191 35 191 43 ()}
        {Lisp-Entry "implementation" slot #f 192 8 192 22 ()}
        {Lisp-Entry "get-implementation" accessor #f 192 35 192 43 ()}
        {Lisp-Entry "implementation-tree" slot #f 193 8 193 27 ()}
        {Lisp-Entry "get-implementation-tree" accessor #f 193 35 193 43 ()}
        {Lisp-Entry "category-rank" slot #f 194 8 194 21 ()}
        {Lisp-Entry "get-category-rank" accessor #f 194 35 194 43 ()}
        {Lisp-Entry "implementation-rank" slot #f 195 8 195 27 ()}
        {Lisp-Entry "get-implementation-rank" accessor #f 195 35 195 43 ()}}
      {Lisp-Entry "object-method" definition #f 199 20 199 33 ("apply" "rest" "lambda" "class-of" "find-field" "get-implementation" "impl" "let" "name" "object")}
      {Lisp-Entry "Method-Node" class #f 210 7 210 18 ("Object")
        {Lisp-Entry "category" slot #f 213 8 213 16 ()}
        {Lisp-Entry "get-category" accessor #f 213 35 213 43 ()}
        {Lisp-Entry "implementation" slot #f 214 8 214 22 ()}
        {Lisp-Entry "get-implementation" accessor #f 214 35 214 43 ()}
        {Lisp-Entry "next-node" slot #f 215 8 215 17 ()}
        {Lisp-Entry "get-next-node" accessor #f 215 35 215 43 ()}
        {Lisp-Entry "next-implementation" slot #f 216 8 216 27 ()}
        {Lisp-Entry "get-next-implementation" accessor #f 216 35 216 43 ()}
        {Lisp-Entry "children" slot #f 217 8 217 16 ()}
        {Lisp-Entry "get-children" accessor #f 217 35 217 43 ()}}
      {Lisp-Entry "Queue" class #f 225 7 225 12 ("Object")
        {Lisp-Entry "list" slot #f 228 8 228 12 ()}
        {Lisp-Entry "get-list" accessor #f 228 27 228 35 ()}
        {Lisp-Entry "last-list" slot #f 229 8 229 17 ()}
        {Lisp-Entry "get-last-list" accessor #f 229 27 229 35 ()}
        {Lisp-Entry "last-anchor" slot #f 230 8 230 19 ()}
        {Lisp-Entry "get-last-anchor" accessor #f 230 27 230 35 ()}
        {Lisp-Entry "current" slot #f 231 8 231 15 ()}
        {Lisp-Entry "get-current" accessor #f 231 27 231 35 ()}}
      {Lisp-Entry "Generic" class #f 239 7 239 14 ("Object")
        {Lisp-Entry "locator" slot #f 242 8 242 15 ()}
        {Lisp-Entry "get-locator" accessor #f 242 36 242 44 ()}
        {Lisp-Entry "name" slot #f 243 8 243 12 ()}
        {Lisp-Entry "get-name" accessor #f 243 36 243 44 ()}
        {Lisp-Entry "root-specific" slot #f 244 8 244 21 ()}
        {Lisp-Entry "get-root-specific" accessor #f 244 36 244 44 ()}
        {Lisp-Entry "pending-specifics" slot #f 245 8 245 25 ()}
        {Lisp-Entry "get-pending-specifics" accessor #f 245 36 245 44 ()}}
      {Lisp-Entry "Specific" class #f 248 7 248 15 ("Object")
        {Lisp-Entry "dynamic-signature" slot #f 251 8 251 25 ()}
        {Lisp-Entry "get-dynamic-signature" accessor #f 251 36 251 44 ()}
        {Lisp-Entry "implementation" slot #f 252 8 252 22 ()}
        {Lisp-Entry "get-implementation" accessor #f 252 36 252 44 ()}
        {Lisp-Entry "ancestor-specifics" slot #f 253 8 253 26 ()}
        {Lisp-Entry "get-ancestor-specifics" accessor #f 253 36 253 44 ()}
        {Lisp-Entry "descendant-specifics" slot #f 254 8 254 28 ()}
        {Lisp-Entry "get-descendant-specifics" accessor #f 254 36 254 44 ()}}
      {Lisp-Entry "Boolean-Class" class #f 262 7 262 20 ("Class")}
      {Lisp-Entry "Boolean" class #f 265 17 265 24 ("Object" "Boolean-Class")
        {Lisp-Entry "initialize" method #f 268 20 268 30 ("native-class" "rest")}}
      {Lisp-Entry "/=" definition #f 272 27 272 29 ("=" "not" "y" "x")}
      {Lisp-Entry "neq?" definition #f 276 27 276 31 ("eq?" "not" "y" "x")}
      {Lisp-Entry "xor" definition #f 280 27 280 30 ("not" "and" "or" "y" "x")}
      {Lisp-Entry "nu=?" definition #f 285 20 285 24 ("cdr" "else" "car" "neq?" "null?" "cond" "scan" "iter" "first" "let" ":equal" "compare" "eq?" "and" "rest" "m" "n")}
      {Lisp-Entry "nu/=?" definition #f 297 20 297 25 ("nu=?" "apply" "not" ":equal" "compare" "neq?" "null?" "if" "rest" "m" "n")}
      {Lisp-Entry "nu<?" definition #f 303 20 303 24 ("cdr" "car" "value" "null?" "if" "max" "scan" "iter" "let" "error" "else" ":equal" ":greater" ":less" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu<=?" definition #f 318 20 318 25 ("cdr" "car" "value" "null?" "if" "max" "scan" "iter" "let" "error" "else" ":greater" ":equal" ":less" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu>?" definition #f 333 20 333 24 ("cdr" "car" "value" "null?" "if" "min" "scan" "iter" "let" "error" "else" ":equal" ":less" ":greater" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu>=?" definition #f 348 20 348 25 ("cdr" "car" "value" "null?" "if" "min" "scan" "iter" "let" "error" "else" ":less" ":equal" ":greater" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "ci=?" definition #f 363 20 363 24 ("finally" "return" ":equal" "ci-compare" "neq?" "when" "cdr" "in" "object" "for" "loop" "car" "first" "let" "null?" "if" "rest")}
      {Lisp-Entry "ci/=?" definition #f 373 20 373 25 ("ci=?" "apply" "not" "rest")}
      {Lisp-Entry "ci<?" definition #f 377 20 377 24 ("error" "else" ":equal" ":greater" "cdr" ":less" "ci-compare" "case" "car" "value" "null?" "if" "max" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci<=?" definition #f 388 20 388 25 ("error" "else" ":greater" "cdr" ":equal" ":less" "ci-compare" "case" "car" "value" "null?" "if" "max" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci>?" definition #f 399 20 399 24 ("error" "else" ":equal" ":less" "cdr" ":greater" "ci-compare" "case" "car" "value" "null?" "if" "min" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci>=?" definition #f 410 20 410 25 ("error" "else" ":less" "cdr" ":equal" ":greater" "ci-compare" "case" "car" "value" "null?" "if" "min" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "boolean->integer" definition #f 421 27 421 43 ("0" "1" "if" "bool")}
      {Lisp-Entry "integer->boolean" definition #f 425 27 425 43 ("0" "/=" "n")}
      {Lisp-Entry "Whitespace-Chars" definition #f 434 19 434 35 ()}
      {Lisp-Entry "Uppercase-Chars" definition #f 437 19 437 34 ()}
      {Lisp-Entry "Lowercase-Chars" definition #f 440 19 440 34 ()}
      {Lisp-Entry "Alphabetic-Chars" definition #f 443 19 443 35 ("Lowercase-Chars" "Uppercase-Chars" "append")}
      {Lisp-Entry "Numeric-Chars" definition #f 446 19 446 32 ()}
      {Lisp-Entry "Uppercase-Lowerbound" definition #f 450 12 450 32 ("char->integer")}
      {Lisp-Entry "Uppercase-Upperbound" definition #f 453 12 453 32 ("char->integer")}
      {Lisp-Entry "Lowercase-Lowerbound" definition #f 456 12 456 32 ("char->integer")}
      {Lisp-Entry "Lowercase-Upperbound" definition #f 459 12 459 32 ("char->integer")}
      {Lisp-Entry "Numeric-Lowerbound" definition #f 462 12 462 30 ("char->integer")}
      {Lisp-Entry "Numeric-Upperbound" definition #f 465 12 465 30 ("char->integer")}
      {Lisp-Entry "Char-Class" class #f 469 7 469 17 ("Class")}
      {Lisp-Entry "Char" class #f 472 17 472 21 ("Object" "Char-Class")
        {Lisp-Entry "initialize" method #f 475 20 475 30 ("native-class" "rest")}
        {Lisp-Entry "coerce-string" method #f 479 20 479 33 ("get-output-string" "self" "write-char" "open-output-string" "port" "let")}
        {Lisp-Entry "compare-object" method #f 485 20 485 34 (":incompatible" ":less" "else" ":greater" ">" ":equal" "=" "cond" "v2" "self" "char->integer" "v1" "let" "Char" "is?" "if" "c")}
        {Lisp-Entry "ci-compare-object" method #f 495 20 495 37 ("self" "downcase" "compare" "c")}
        {Lisp-Entry "object-similar?" method #f 500 20 500 35 ("self" "char-similar?" "char?" "and" "object-similar?" "'object-similar?" "unimplemented" "object")}
        {Lisp-Entry "object-alphabetic?" method #f 507 20 507 38 ("object-lower-case?" "object-upper-case?" "or")}
        {Lisp-Entry "object-numeric?" method #f 512 20 512 35 ("Numeric-Upperbound" "<=" "Numeric-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-alphanumeric?" method #f 518 20 518 40 ("object-numeric?" "object-alphabetic?" "or")}
        {Lisp-Entry "object-whitespace?" method #f 523 20 523 38 ("self" "eqv?" "or")}
        {Lisp-Entry "object-upper-case?" method #f 531 20 531 38 ("Uppercase-Upperbound" "<=" "Uppercase-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-lower-case?" method #f 537 20 537 38 ("Lowercase-Upperbound" "<=" "Lowercase-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-upcase" method #f 543 20 543 33 ("32" "char->integer" "-" "integer->char" "self" "lower-case?" "if")}
        {Lisp-Entry "object-downcase" method #f 549 20 549 35 ("32" "char->integer" "+" "integer->char" "self" "upper-case?" "if")}
        {Lisp-Entry "object-capitalize" method #f 555 20 555 37 ("object-upcase")}}
      {Lisp-Entry "whitechar?" definition #f 559 12 559 22 ("char-whitespace?")}
      {Lisp-Entry "char-presentation" definition #f 563 20 563 37 ("string" "char-symbol" "or" "char")}
      {Lisp-Entry "alphabetic?" definition #f 568 27 568 38 ("object-alphabetic?" "object")}
      {Lisp-Entry "numeric?" definition #f 572 27 572 35 ("object-numeric?" "object")}
      {Lisp-Entry "alphanumeric?" definition #f 576 27 576 40 ("object-alphanumeric?" "object")}
      {Lisp-Entry "whitespace?" definition #f 580 27 580 38 ("object-whitespace?" "object")}
      {Lisp-Entry "upper-case?" definition #f 584 27 584 38 ("object-upper-case?" "object")}
      {Lisp-Entry "lower-case?" definition #f 588 27 588 38 ("object-lower-case?" "object")}
      {Lisp-Entry "upcase" definition #f 592 27 592 33 ("object-upcase" "object")}
      {Lisp-Entry "downcase" definition #f 596 27 596 35 ("object-downcase" "object")}
      {Lisp-Entry "capitalize" definition #f 600 27 600 37 ("object-capitalize" "object")}
      {Lisp-Entry "vowel?" definition #f 604 20 604 26 ("downcase" "memv?" "c")}
      {Lisp-Entry "character-types" definition #f 608 12 608 27 ("symbol" "literal" "quasiquote" "backslash" "reference" "exprcomment" "comment" "unquote" "terminator" "list" "quote" "sharp" "string" "constituent" "whitespace" "invalid" "#")}
      {Lisp-Entry "character-type" definition #f 627 20 627 34 ("character-types" "vector-ref" "constituent" "'constituent" "127" ">" "if" "char->integer" "num" "let" "ascii-c")}
      {Lisp-Entry "word-constituent?" definition #f 634 20 634 37 ("memq?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "scheme-constituent?" definition #f 639 20 639 39 ("eqv?" "constituent" "'constituent" "character-type" "eq?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "jazz-constituent?" definition #f 646 20 646 37 ("eqv?" "constituent" "'constituent" "character-type" "eq?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "c-constituent?" definition #f 652 20 652 34 ("eqv?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "sql-constituent?" definition #f 657 20 657 36 ("eqv?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "Port-Class" class #f 670 7 670 17 ("Class")}
      {Lisp-Entry "Port" class #f 673 17 673 21 ("Object" "Port-Class")
        {Lisp-Entry "initialize" method #f 676 20 676 30 ("native-class" "rest")}
        {Lisp-Entry "destroy" method #f 680 20 680 27 ("nextmethod" "self" "close-port")}}
      {Lisp-Entry "Symbol-Class" class #f 690 7 690 19 ("Class")}
      {Lisp-Entry "Symbol" class #f 693 17 693 23 ("Object" "Symbol-Class")
        {Lisp-Entry "initialize" method #f 696 20 696 30 ("native-class" "rest")}
        {Lisp-Entry "coerce-string" method #f 700 20 700 33 ("self" "symbol->string")}
        {Lisp-Entry "compare-object" method #f 704 20 704 34 (":incompatible" "self" "symbol->string" "compare" "symbol?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" method #f 710 20 710 37 (":incompatible" "self" "symbol->string" "ci-compare" "symbol?" "if" "obj")}}
      {Lisp-Entry "=" specialize #f 716 20 716 21 ("eq?" "s2" "s1")}
      {Lisp-Entry "generated-symbol?" definition #f 720 20 720 37 ("symbol->string" "starts-with?" "symbol")}
      {Lisp-Entry "symbol->keyword" definition #f 724 27 724 42 ("symbol->string" "string->keyword" "symbol")}
      {Lisp-Entry "keyword->symbol" definition #f 728 27 728 42 ("keyword->string" "string->symbol" "keyword")}
      {Lisp-Entry "find-symbol" definition #f 732 20 732 31 ("string->symbol" "str")}
      {Lisp-Entry "symbol-bound?" definition #f 737 20 737 33 ("rest" "name")}
      {Lisp-Entry "symbol-unbound?" definition #f 740 20 740 35 ("rest" "name")}
      {Lisp-Entry "Keyword-Class" class #f 750 7 750 20 ("Class")}
      {Lisp-Entry "Keyword" class #f 753 17 753 24 ("Object" "Keyword-Class")
        {Lisp-Entry "initialize" method #f 756 20 756 30 ("native-class" "rest")}}
      {Lisp-Entry "find-keyword" definition #f 760 20 760 32 ("else" "cadr" "cddr" "set-cdr!" "eq?" "error" "car" "keyword?" "cdr" "pair?" "not" "or" "null?" "cond" "before" "unbox-list" "ls" "lp" "let" "default" "box" "keyword")}
      {Lisp-Entry "box-list" definition #f 779 21 779 29 ("cons" "lst")}
      {Lisp-Entry "unbox-list" definition #f 783 21 783 31 ("cdr" "box")}
      {Lisp-Entry "Continuation-Class" class #f 792 7 792 25 ("Class")}
      {Lisp-Entry "Continuation" class #f 795 17 795 29 ("Object" "Continuation-Class")}
      {Lisp-Entry "Procedure-Class" class #f 803 7 803 22 ("Class")}
      {Lisp-Entry "Procedure" class #f 806 17 806 26 ("Object" "Procedure-Class")}
      {Lisp-Entry "Foreign-Class" class #f 814 7 814 20 ("Class")}
      {Lisp-Entry "Foreign" class #f 817 17 817 24 ("Object" "Foreign-Class")}
      {Lisp-Entry "Numeric-Class" class #f 825 7 825 20 ("Class")}
      {Lisp-Entry "Numeric" class #f 828 17 828 24 ("Object" "Numeric-Class")
        {Lisp-Entry "numeric-norm" method #f 831 35 831 47 ()}
        {Lisp-Entry "numeric-add" method #f 832 35 832 46 ("obj")}
        {Lisp-Entry "numeric-negate" method #f 833 35 833 49 ()}
        {Lisp-Entry "numeric-multiply" method #f 834 35 834 51 ("n")}
        {Lisp-Entry "numeric-inverse" method #f 835 35 835 50 ()}}
      {Lisp-Entry "Number-Class" class #f 843 7 843 19 ("Numeric-Class")}
      {Lisp-Entry "Number" class #f 846 17 846 23 ("Numeric" "Number-Class")
        {Lisp-Entry "initialize" method #f 849 20 849 30 ("native-class" "rest")}
        {Lisp-Entry "compare-object" method #f 853 20 853 34 (":incompatible" ":greater" "else" ":less" "<" ":equal" "self" "=" "cond" "number?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" method #f 861 20 861 37 ("compare-object" "obj")}
        {Lisp-Entry "numeric-norm" method #f 865 20 865 32 ("self" "abs")}
        {Lisp-Entry "numeric-add" method #f 869 20 869 31 ("error" "self" "+" "number?" "if" "obj")}
        {Lisp-Entry "numeric-negate" method #f 875 20 875 34 ("self" "-")}
        {Lisp-Entry "numeric-multiply" method #f 879 20 879 36 ("error" "self" "*" "number?" "if" "obj")}
        {Lisp-Entry "numeric-inverse" method #f 885 20 885 35 ("self" "/")}}
      {Lisp-Entry "Complex-Class" class #f 894 7 894 20 ("Number-Class")}
      {Lisp-Entry "Complex" class #f 897 17 897 24 ("Number" "Complex-Class")
        {Lisp-Entry "numeric-norm" method #f 900 20 900 32 ("imag-part" "2" "self" "real-part" "expt" "+" "sqrt")}}
      {Lisp-Entry "Real-Class" class #f 909 7 909 17 ("Complex-Class")}
      {Lisp-Entry "Real" class #f 912 17 912 21 ("Complex" "Real-Class")}
      {Lisp-Entry "Rational-Class" class #f 920 7 920 21 ("Real-Class")}
      {Lisp-Entry "Rational" class #f 923 17 923 25 ("Real" "Rational-Class")}
      {Lisp-Entry "Integer-Class" class #f 931 7 931 20 ("Rational-Class")}
      {Lisp-Entry "Integer" class #f 934 17 934 24 ("Rational" "Integer-Class")}
      {Lisp-Entry "Fixnum-Class" class #f 942 7 942 19 ("Integer-Class")}
      {Lisp-Entry "Fixnum" class #f 945 17 945 23 ("Integer" "Fixnum-Class")}
      {Lisp-Entry "Flonum-Class" class #f 953 7 953 19 ("Real-Class")}
      {Lisp-Entry "Flonum" class #f 956 17 956 23 ("Real" "Flonum-Class")}
      {Lisp-Entry "fl+" definition #f 961 27 961 30 ("##fl+" "y" "x")}
      {Lisp-Entry "fl-" definition #f 964 27 964 30 ("##fl-" "y" "x")}
      {Lisp-Entry "fl*" definition #f 967 27 967 30 ("##fl*" "y" "x")}
      {Lisp-Entry "fl/" definition #f 970 27 970 30 ("##fl/" "y" "x")}
      {Lisp-Entry "relate" definition #f 979 20 979 26 ("0" "else" "1" ">" "-1" "<" "cond" "y" "x")}
      {Lisp-Entry "sign" definition #f 985 20 985 24 ("0" "relate" "n")}
      {Lisp-Entry "nu+" definition #f 989 20 989 23 ("numeric-add" "cdr" "scan" "car" "result" "iter" "let" "0" "null?" "if" "rest")}
      {Lisp-Entry "nu-" definition #f 998 20 998 23 ("nu+" "apply" "r" "let" "numeric-negate" "null?" "if" "rest" "n")}
      {Lisp-Entry "nu*" definition #f 1005 20 1005 23 ("numeric-multiply" "cdr" "scan" "car" "result" "iter" "let" "1" "null?" "if" "rest")}
      {Lisp-Entry "nu/" definition #f 1014 20 1014 23 ("nu*" "apply" "r" "let" "numeric-inverse" "null?" "if" "rest" "n")}
      {Lisp-Entry "minimum" definition #f 1021 20 1021 27 ("cdr" "set!" ":less" "apply-key" "eq?" "when" "object" "lambda" "for-each" "car" "min" "let" "compare" "compare:" "key" "key:" "lst")}
      {Lisp-Entry "maximum" definition #f 1030 20 1030 27 ("cdr" "set!" ":greater" "apply-key" "eq?" "when" "object" "lambda" "for-each" "car" "max" "let" "compare" "compare:" "key" "key:" "lst")}
      {Lisp-Entry "between?" definition #f 1039 20 1039 28 ("<=" ">=" "not" "or" "and" "upper" "lower" "n")}
      {Lisp-Entry "between" definition #f 1044 20 1044 27 ("else" ">" "<" "cond" "upper" "n" "lower")}
      {Lisp-Entry "in-interval?" definition #f 1050 20 1050 32 ("<" ">=" "and" "upper" "lower" "n")}
      {Lisp-Entry "norm" definition #f 1054 27 1054 31 ("numeric-norm" "x")}
      {Lisp-Entry "distance" definition #f 1058 20 1058 28 ("nu-" "norm" "end" "start")}
      {Lisp-Entry "near?" definition #f 1062 20 1062 25 ("nu-" "norm" "<=" "distance" "y" "x")}
      {Lisp-Entry "contiguous-range" definition #f 1066 20 1066 36 ("cons" "cdr" "continuation-return" "set!" "1" "+" "=" "if" "n" "for-each" "second" "car" "first" "let*" "return" "lambda" "continuation-capture" "not-null?" "when" "lst")}
      {Lisp-Entry "naturals" definition #f 1080 20 1080 28 ("collect" "below" "from" "n" "for" "loop" "upper" "lower")}
      {Lisp-Entry "lobyte" definition #f 1085 20 1085 26 ("#xFF" "bitwise-and" "word")}
      {Lisp-Entry "hibyte" definition #f 1089 20 1089 26 ("-8" "arithmetic-shift" "lobyte" "word")}
      {Lisp-Entry "make-word" definition #f 1093 20 1093 29 ("8" "arithmetic-shift" "bitwise-ior" "hi" "lo")}
      {Lisp-Entry "lochar" definition #f 1097 20 1097 26 ("#xFF" "#x80" "+" "bitwise-and" "-" "word")}
      {Lisp-Entry "hichar" definition #f 1101 20 1101 26 ("-8" "arithmetic-shift" "lochar" "word")}
      {Lisp-Entry "make-int" definition #f 1105 20 1105 28 ("16" "arithmetic-shift" "bitwise-ior" "hi" "lo")}
      {Lisp-Entry "loword" definition #f 1109 20 1109 26 ("#xFFFF" "bitwise-and" "dword")}
      {Lisp-Entry "hiword" definition #f 1113 20 1113 26 ("-16" "arithmetic-shift" "loword" "dword")}
      {Lisp-Entry "signed-loword" definition #f 1117 20 1117 33 ("#xFFFF" "#x8000" "+" "bitwise-and" "-" "dword")}
      {Lisp-Entry "signed-hiword" definition #f 1121 20 1121 33 ("-16" "arithmetic-shift" "signed-loword" "dword")}
      {Lisp-Entry "sign-word" definition #f 1125 20 1125 29 ("#x10000" "-" "15" "bit-set?" "if" "word")}
      {Lisp-Entry "separate" definition #f 1131 20 1131 28 ("values" "*" "-" "r" "quotient" "q" "let*" "int2" "int1")}
      {Lisp-Entry "randomize" definition #f 1137 20 1137 29 ("default-random-source" "random-source-randomize!")}
      {Lisp-Entry "random" definition #f 1140 20 1140 26 ("random-integer" "n")}
      {Lisp-Entry "bit-set" definition #f 1144 20 1144 27 ("bitwise-not" "bitwise-and" "bitwise-ior" "if" "1" "arithmetic-shift" "msk" "let" "bit" "pos" "num")}
      {Lisp-Entry "mask-bit-set" definition #f 1151 20 1151 32 ("bitwise-not" "bitwise-and" "bitwise-ior" "if" "bit" "msk" "num")}
      {Lisp-Entry "mask-bit-set?" definition #f 1157 20 1157 33 ("0" "bitwise-and" "/=" "msk" "num")}
      {Lisp-Entry "bit-mask" definition #f 1161 20 1161 28 ("1" "arithmetic-shift" "-" "lo" "hi")}
      {Lisp-Entry "random-seed" definition #f 1165 20 1165 31 ("10000" "random" "randomize")}
      {Lisp-Entry "sqr" definition #f 1171 27 1171 30 ("2" "expt" "num")}
      {Lisp-Entry "percentage" definition #f 1175 27 1175 37 ("100." "/" "*" "total" "part")}
      {Lisp-Entry "percent" definition #f 1179 27 1179 34 ("100." "*" "/" "n" "percent")}
      {Lisp-Entry "fxfloor" definition #f 1183 27 1183 34 ("floor" "flonum->fixnum" "r")}
      {Lisp-Entry "fxceiling" definition #f 1186 27 1186 36 ("ceiling" "flonum->fixnum" "r")}
      {Lisp-Entry "fxtruncate" definition #f 1189 27 1189 37 ("truncate" "flonum->fixnum" "r")}
      {Lisp-Entry "fxround" definition #f 1192 27 1192 34 ("round" "flonum->fixnum" "r")}
      {Lisp-Entry "fxfloor/" definition #f 1198 27 1198 35 ("fl/" "fxfloor" "d" "n")}
      {Lisp-Entry "fxceiling/" definition #f 1201 27 1201 37 ("fl/" "fxceiling" "d" "n")}
      {Lisp-Entry "fxtruncate/" definition #f 1204 27 1204 38 ("fl/" "fxtruncate" "d" "n")}
      {Lisp-Entry "fxround/" definition #f 1207 27 1207 35 ("fl/" "fxround" "d" "n")}
      {Lisp-Entry "Iterator" class #f 1216 15 1216 23 ("Empty" "initialize" "Object")
        {Lisp-Entry "Empty" definition #f 1219 14 1219 19 ("empty")}
        {Lisp-Entry "peeked" slot #f 1223 8 1223 14 ()}
        {Lisp-Entry "iterate-object" method #f 1226 20 1226 34 ("self")}
        {Lisp-Entry "get-next" method #f 1230 26 1230 34 ("next" "peek" "prog1")}
        {Lisp-Entry "peek" method #f 1235 26 1235 30 ("next" "set!" "Empty" "peeked" "eq?" "when")}
        {Lisp-Entry "unget" method #f 1241 26 1241 31 ("error" "set!" "Empty" "peeked" "eq?" "if" "object")}
        {Lisp-Entry "next" method #f 1247 26 1247 30 ("get-next!" "else" "set!" "prog1" "Empty" "neq?" "peeked" "eof-object?" "cond")}
        {Lisp-Entry "done?" method #f 1257 26 1257 31 ("peek" "eof-object?")}
        {Lisp-Entry "get-next!" method #f 1261 26 1261 35 ()}
        {Lisp-Entry "put" method #f 1265 26 1265 29 ("error" "object")}
        {Lisp-Entry "get-position" method #f 1269 26 1269 38 ("self" "error")}
        {Lisp-Entry "set-position" method #f 1273 26 1273 38 ("self" "error" "pos")}
        {Lisp-Entry "get-state" method #f 1277 26 1277 35 ()}
        {Lisp-Entry "reset-state" method #f 1281 26 1281 37 ("old")}}
      {Lisp-Entry "iterate-sequence" definition #f 1285 27 1285 43 ("iterate-object" "obj")}
      {Lisp-Entry "Explorer" class #f 1294 15 1294 23 ("forward" "'forward" "initialize" "Iterator")
        {Lisp-Entry "direction" slot #f 1297 8 1297 17 ()}
        {Lisp-Entry "set-direction" accessor #f 1297 45 1297 53 ()}
        {Lisp-Entry "peek-forward" method #f 1300 29 1300 41 ("error")}
        {Lisp-Entry "peek-backward" method #f 1304 29 1304 42 ("error")}
        {Lisp-Entry "peek" method #f 1308 20 1308 24 ("peek-backward" "backward" "peek-forward" "forward" "direction" "case" "eof-object" "done?" "if")}
        {Lisp-Entry "goto-beginning" method #f 1316 26 1316 40 ("error")}
        {Lisp-Entry "goto-end" method #f 1320 26 1320 34 ("error")}
        {Lisp-Entry "forward" method #f 1324 26 1324 33 ("error")}
        {Lisp-Entry "backward" method #f 1328 26 1328 34 ("error")}
        {Lisp-Entry "next" method #f 1332 20 1332 24 ("backward" "forward" "direction" "case" "done?" "not" "when")}
        {Lisp-Entry "done-forward?" method #f 1339 29 1339 42 ("error")}
        {Lisp-Entry "done-backward?" method #f 1343 29 1343 43 ("error")}
        {Lisp-Entry "done?" method #f 1347 20 1347 25 ("done-backward?" "backward" "done-forward?" "forward" "direction" "case")}
        {Lisp-Entry "put-forward" method #f 1353 29 1353 40 ("error" "object")}
        {Lisp-Entry "put-backward" method #f 1357 29 1357 41 ("error" "object")}
        {Lisp-Entry "put" method #f 1361 20 1361 23 ("put-backward" "backward" "put-forward" "forward" "direction" "case" "object")}}
      {Lisp-Entry "explore" definition #f 1370 20 1370 27 ("Sequence-Explorer" "new" "apply" "rest" "object")}
      {Lisp-Entry "Sequence-Class" class #f 1380 7 1380 21 ("Class")
        {Lisp-Entry "allocate-sequence" method #f 1383 35 1383 52 ("len")}
        {Lisp-Entry "coerce-object" method #f 1386 20 1386 33 ("element" "set-element!" "below" "0" "from" "n" "for" "loop" "allocate-sequence" "new-sequence" "cardinality" "len" "let" "seq")}}
      {Lisp-Entry "Sequence" class #f 1395 17 1395 25 ("Object" "Sequence-Class")
        {Lisp-Entry "compare-object" method #f 1398 20 1398 34 (":incompatible" "1" "+" "neq?" "element" "compare" "cmp" ":less" "else" ":greater" ">" ":equal" "=" "cond" ">=" "or" "0" "i" "iter" "l2" "self" "cardinality" "l1" "let" "Sequence" "is?" "if" "seq")}
        {Lisp-Entry "copy-object" method #f 1414 20 1414 31 ("1" "+" "element" "set-element!" "begin" "=" "0" "i" "iter" "let" "class-of" "allocate-sequence" "new-seq" "self" "cardinality" "len" "identity" "x" "lambda" "if" "subcopy" "let*" "deep?")}
        {Lisp-Entry "iterate-object" method #f 1426 20 1426 34 ("self" "Sequence-Explorer" "new")}
        {Lisp-Entry "object-alphabetic?" method #f 1430 20 1430 38 ("self" "alphabetic?" "every?")}
        {Lisp-Entry "object-numeric?" method #f 1434 20 1434 35 ("self" "numeric?" "every?")}
        {Lisp-Entry "object-alphanumeric?" method #f 1438 20 1438 40 ("self" "alphanumeric?" "every?")}
        {Lisp-Entry "object-whitespace?" method #f 1442 20 1442 38 ("self" "whitespace?" "every?")}
        {Lisp-Entry "object-upper-case?" method #f 1446 20 1446 38 ("self" "upper-case?" "every?")}
        {Lisp-Entry "object-lower-case?" method #f 1450 20 1450 38 ("self" "lower-case?" "every?")}
        {Lisp-Entry "object-upcase" method #f 1454 20 1454 33 ("class-of" "upcase" "self" "accumulate")}
        {Lisp-Entry "object-downcase" method #f 1458 20 1458 35 ("class-of" "downcase" "self" "accumulate")}
        {Lisp-Entry "object-capitalize" method #f 1462 20 1462 37 ("class-of" "upcase" "set!" "not" "alphanumeric?" "if" "object" "lambda" "self" "accumulate" "break?" "let")}
        {Lisp-Entry "sequence-element" method #f 1476 38 1476 54 ("n")}
        {Lisp-Entry "sequence-set-element!" method #f 1479 38 1479 59 ("obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 1482 38 1482 58 ()}
        {Lisp-Entry "sequence-tail" method #f 1485 38 1485 51 ("start")}
        {Lisp-Entry "sequence-last" method #f 1488 38 1488 51 ()}
        {Lisp-Entry "sequence-butlast" method #f 1491 38 1491 54 ()}
        {Lisp-Entry "sequence-subseq!" method #f 1494 29 1494 45 ("cardinality" "-" "Subseq" "new" "self" "-1" "0" "=" "and" "if" "end" "start")}
        {Lisp-Entry "sequence-replace-subseq!" method #f 1500 29 1500 53 ("cardinality" "0" "self" "subseq" "concatenate!" "replacement" "end" "start")}}
      {Lisp-Entry "sequence?" definition #f 1506 27 1506 36 ("Sequence" "is?" "obj")}
      {Lisp-Entry "element" definition #f 1510 27 1510 34 ("sequence-element" "n" "seq")}
      {Lisp-Entry "set-element!" definition #f 1514 27 1514 39 ("sequence-set-element!" "obj" "n" "seq")}
      {Lisp-Entry "cardinality" definition #f 1518 27 1518 38 ("sequence-cardinality" "seq")}
      {Lisp-Entry "empty?" definition #f 1522 27 1522 33 ("cardinality" "0" "=" "seq")}
      {Lisp-Entry "tail" definition #f 1526 27 1526 31 ("sequence-tail" "start" "seq")}
      {Lisp-Entry "last" definition #f 1530 27 1530 31 ("sequence-last" "seq")}
      {Lisp-Entry "butlast" definition #f 1534 27 1534 34 ("sequence-butlast" "seq")}
      {Lisp-Entry "skip-whitespace" definition #f 1538 20 1538 35 ("else" "1" "+" "element" "eq?" "cardinality" "=" "cond" "0" "either" "i" "iter" "let" "start" "start:" "seq")}
      {Lisp-Entry "subseq" definition #f 1545 20 1545 26 ("1" "+" "set!" "element" "set-element!" "<" "while" "j" "0" "i" "allocate-sequence" "sub" "class-of" "cls" "cardinality" "either" "-" "len" "let*" "type" "end" "start" "seq")}
      {Lisp-Entry "replace-subseq!" definition #f 1558 27 1558 42 ("sequence-replace-subseq!" "replacement" "end" "start" "seq")}
      {Lisp-Entry "subseq!" definition #f 1562 20 1562 27 ("sequence-subseq!" "cardinality" "end" "start" "seq")}
      {Lisp-Entry "sort" definition #f 1566 20 1566 24 ("class-of" "List" "sort" "coerce" "null/pair?" "let*" "cddr" "or" "split" "cdr" "cons" "apply-key" "if" "e2" "car" "e1" "let" "else" "null?" "cond" "l2" "l1" "merge" "merge-sort" "smaller" "l" "sort-list" "define" "key" "key:" "seq" "test")}
      {Lisp-Entry "first" definition #f 1597 27 1597 32 ("0" "element" "seq")}
      {Lisp-Entry "second" definition #f 1598 27 1598 33 ("1" "element" "seq")}
      {Lisp-Entry "third" definition #f 1599 27 1599 32 ("2" "element" "seq")}
      {Lisp-Entry "fourth" definition #f 1600 27 1600 33 ("3" "element" "seq")}
      {Lisp-Entry "fifth" definition #f 1601 27 1601 32 ("4" "element" "seq")}
      {Lisp-Entry "sixth" definition #f 1602 27 1602 32 ("5" "element" "seq")}
      {Lisp-Entry "seventh" definition #f 1603 27 1603 34 ("6" "element" "seq")}
      {Lisp-Entry "eighth" definition #f 1604 27 1604 33 ("7" "element" "seq")}
      {Lisp-Entry "ninth" definition #f 1605 27 1605 32 ("8" "element" "seq")}
      {Lisp-Entry "tenth" definition #f 1606 27 1606 32 ("9" "element" "seq")}
      {Lisp-Entry "set-first!" definition #f 1608 27 1608 37 ("0" "set-element!" "value" "seq")}
      {Lisp-Entry "set-second!" definition #f 1609 27 1609 38 ("1" "set-element!" "value" "seq")}
      {Lisp-Entry "set-third!" definition #f 1610 27 1610 37 ("2" "set-element!" "value" "seq")}
      {Lisp-Entry "set-fourth!" definition #f 1611 27 1611 38 ("3" "set-element!" "value" "seq")}
      {Lisp-Entry "set-fifth!" definition #f 1612 27 1612 37 ("4" "set-element!" "value" "seq")}
      {Lisp-Entry "set-sixth!" definition #f 1613 27 1613 37 ("5" "set-element!" "value" "seq")}
      {Lisp-Entry "set-seventh!" definition #f 1614 27 1614 39 ("6" "set-element!" "value" "seq")}
      {Lisp-Entry "set-eighth!" definition #f 1615 27 1615 38 ("7" "set-element!" "value" "seq")}
      {Lisp-Entry "set-ninth!" definition #f 1616 27 1616 37 ("8" "set-element!" "value" "seq")}
      {Lisp-Entry "set-tenth!" definition #f 1617 27 1617 37 ("9" "set-element!" "value" "seq")}
      {Lisp-Entry "element-reversed" definition #f 1620 20 1620 36 ("1" "cardinality" "-" "element" "n" "seq")}
      {Lisp-Entry "iterate" definition #f 1624 20 1624 27 ("in-sequence" "obj" "for" "loop" "proc" "seq")}
      {Lisp-Entry "accumulate" definition #f 1629 20 1629 30 ("coerce" "not" "if" "collect" "in-sequence" "obj" "for" "loop" "lst" "let" "type" "proc" "seq")}
      {Lisp-Entry "apply-key" definition #f 1638 28 1638 37 ("not" "if" "object" "key")}
      {Lisp-Entry "apply-test" definition #f 1644 28 1644 38 ("eqv?" "not" "if" "y" "x" "test")}
      {Lisp-Entry "gather" definition #f 1650 20 1650 26 ("collect" "in-sequence" "obj" "for" "loop" "coerce" "List" "type" "type:" "iterable")}
      {Lisp-Entry "collect" definition #f 1656 20 1656 27 ("class-of" "either" "collect" "when" "apply-key" "val" "with" "in-sequence" "obj" "for" "loop" "coerce" "type" "type:" "key" "key:" "seq" "proc")}
      {Lisp-Entry "collect-if" definition #f 1664 20 1664 30 ("class-of" "collect" "apply-key" "when" "in-sequence" "obj" "for" "loop" "coerce" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "collect-type" definition #f 1671 20 1671 32 ("class-of" "collect" "apply-key" "is?" "when" "in-sequence" "obj" "for" "loop" "coerce" "key" "key:" "seq" "type")}
      {Lisp-Entry "collect-sections" definition #f 1678 20 1678 36 ("reset" "get-output" "put" "begin" "apply-test" "if" "value" "lambda" "for-each" "section" "List-Factory" "new" "sections" "let" "test" "test:" "separator" "separator:" "lst")}
      {Lisp-Entry "count" definition #f 1692 20 1692 25 ("increase!" "apply-key" "apply-test" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "test" "test:" "key" "key:" "seq" "target")}
      {Lisp-Entry "count-if" definition #f 1700 20 1700 28 ("increase!" "apply-key" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "count-type" definition #f 1708 20 1708 30 ("increase!" "apply-key" "is?" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "key" "key:" "seq" "type")}
      {Lisp-Entry "find" definition #f 1716 20 1716 24 ("1" "-" "get-position" "continuation-return" "apply-key" "apply-test" "object" "iterate" "exit" "lambda" "continuation-capture" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "0" "either" "list-find" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "target" "seq")}
      {Lisp-Entry "list-find" definition #f 1731 13 1731 22 ("1" "+" "cdr" "else" "car" "null?" "cond" "rank" "tail" "rest" "iter" "eqv?" "x" "lambda" "not" "if" "let" "start" "test" "key" "target" "list")}
      {Lisp-Entry "find-object" definition #f 1742 20 1742 31 ("finally" "return" "when" "apply-key" "val" "with" "in-sequence" "obj" "for" "loop" "key" "key:" "seq" "proc")}
      {Lisp-Entry "find-in" definition #f 1750 20 1750 27 ("continuation-return" "apply-key" "apply-test" "object" "iterate" "exit" "lambda" "continuation-capture" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "0" "either" "list-find-in" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "target" "seq")}
      {Lisp-Entry "list-find-in" definition #f 1765 13 1765 25 ("1" "+" "cdr" "else" "car" "null?" "cond" "rank" "tail" "rest" "iter" "eqv?" "x" "lambda" "not" "if" "let" "start" "test" "key" "target" "list")}
      {Lisp-Entry "find-balanced" definition #f 1776 20 1776 33 ("error" "else" "1" "-" "get-position" "position" "continuation-return" "case" "<" "decrease!" "increase!" "apply-key" "apply-test" "cond" "object" "iterate" "exit" "lambda" "continuation-capture" "set-position" "when" "0" "count" "iterate-sequence" "backward" "'backward" "direction:" "explore" "if" "iterator" "let" "item" "'item" "return" "return:" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "seq" "close" "open")}
      {Lisp-Entry "find-if" definition #f 1797 20 1797 27 ("error" "else" "1" "-" "get-position" "position" "continuation-return" "case" "apply-key" "object" "iterate" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "exit" "lambda" "continuation-capture" "0" "either" "find-if-list" "not" "null/pair?" "and" "if" "item" "'item" "return" "return:" "reversed?" "reversed?:" "start" "start:" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "get-rank" definition #f 1815 20 1815 28 ("1" "-" "get-position" "continuation-return" "apply-key" "apply-test" "object" "iterate" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "exit" "lambda" "continuation-capture" "string-find" "string?" "0" "either" "list-find" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "seq" "target")}
      {Lisp-Entry "skip" definition #f 1832 20 1832 24 ("1" "get-position" "-" "continuation-return" "apply-key" "not" "when" "object" "iterate" "set-position" "iterate-sequence" "iterator" "let" "return" "lambda" "continuation-capture" "0" "start" "start:" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "some?" definition #f 1844 20 1844 25 ("continuation-return" "apply-key" "when" "object" "iterate-sequence" "iterate" "return" "lambda" "continuation-capture" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "every?" definition #f 1854 20 1854 26 ("continuation-return" "apply-key" "not" "when" "object" "iterate-sequence" "iterate" "return" "lambda" "continuation-capture" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "concatenate" definition #f 1864 20 1864 31 ("class-of" "coerce" "not" "get-output" "output" "put-sequence" "sequence" "lambda" "for-each" "null/pair?" "list?" "car" "first" "let*" "List-Factory" "new" "fact" "let" "null?" "if" "rest")}
      {Lisp-Entry "concatenate!" definition #f 1879 20 1879 32 ("concatenate" "apply" "rest")}
      {Lisp-Entry "subset?" definition #f 1883 20 1883 27 ("memv?" "element" "lambda" "every?" "null?" "or" "set2" "set1")}
      {Lisp-Entry "union" definition #f 1890 20 1890 25 ("apply-union" "rest")}
      {Lisp-Entry "apply-union" definition #f 1894 20 1894 31 ("class-of" "coerce" "cdr" "put" "get-output" "member?" "not" "when" "object" "iterate-sequence" "iterate" "set" "lambda" "for-each" "put-sequence" "List-Factory" "new" "dst" "car" "first" "let" "null?" "if" "test" "test:" "lst")}
      {Lisp-Entry "intersection" definition #f 1909 20 1909 32 ("cons" "apply-intersection" "rest" "first")}
      {Lisp-Entry "apply-intersection" definition #f 1913 20 1913 38 ("class-of" "get-output" "coerce" "put" "member?" "set" "every?" "when" "object" "lambda" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "cdr" "car" "first" "let" "null?" "if" "test" "test:" "lst")}
      {Lisp-Entry "difference" definition #f 1928 20 1928 30 ("class-of" "get-output" "coerce" "put" "member?" "not" "when" "object" "lambda" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "null?" "if" "eqv?" "test" "test:" "y" "x")}
      {Lisp-Entry "set-xor" definition #f 1939 20 1939 27 ("difference" "union" "eqv?" "test" "test:" "y" "x")}
      {Lisp-Entry "remove" definition #f 1944 20 1944 26 ("class-of" "get-output" "coerce" "put" "apply-test" "not" "when" "object" "lambda" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "eqv?" "test" "test:" "seq" "target")}
      {Lisp-Entry "string-remove" specialize #f 1953 15 1953 28 ()}
      {Lisp-Entry "remove" specialize #f 1953 30 1953 36 ("get-output-string" "write-char" "eqv?" "not" "when" "element" "c" "cardinality" "below" "0" "from" "n" "for" "loop" "open-output-string" "output" "let" "str" "target")}
      {Lisp-Entry "extract-trailer" definition #f 1962 20 1962 35 ("cons" "obj" "class-of" "coerce" "element" "not" "0" "<" "or" "if" "trailer" "1" "cardinality" "-" "n" "iterate" "let" "predicate" "seq")}
      {Lisp-Entry "remove-trailing" definition #f 1972 20 1972 35 ("reverse" "cons" "set!" "apply-test" "and" "unless" "element" "lambda" "for-each" "trailing?" "result" "let" "eqv?" "test" "test:" "list" "target")}
      {Lisp-Entry "remove-enclosing" definition #f 1983 20 1983 36 ("subseq" "decrease!" "1" "-" ">" "increase!" "element" "apply-test" "<" "and" "while" "tail" "head" "cardinality" "end" "0" "start" "let*" "eqv?" "test" "test:" "seq" "target")}
      {Lisp-Entry "remove-duplicates" definition #f 1995 20 1995 37 ("class-of" "coerce" "put" "get-output" "apply-key" "member?" "not" "when" "object" "lambda" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "eqv?" "test" "test:" "key" "key:" "seq")}
      {Lisp-Entry "remove-nils" definition #f 2004 20 2004 31 ("identity" "collect-if" "seq")}
      {Lisp-Entry "remove-empty-strings" definition #f 2008 20 2008 40 ("empty-string?" "not" "obj" "lambda" "collect-if" "seq")}
      {Lisp-Entry "trim-spaces" definition #f 2014 20 2014 31 ("remove-enclosing" "seq")}
      {Lisp-Entry "trim-whitespace" definition #f 2018 20 2018 35 ("whitespace?" "ignore" "c" "lambda" "test:" "remove-enclosing" "seq")}
      {Lisp-Entry "mismatch" definition #f 2024 20 2024 28 ("if" "increase!" "continuation-return" "get-next" "or" "when" "done?" "not" "while" "0" "pos" "targ" "iterate-sequence" "srce" "let" "return" "lambda" "continuation-capture" "equal?" "test" "test:" "seq" "target")}
      {Lisp-Entry "prefix" definition #f 2039 20 2039 26 ("0" "subseq" "cdr" "set!" "<" "not" "or" "and" "when" "mismatch" "n" "object" "lambda" "for-each" "min" "car" "ref" "let" "null?" "if" "equal?" "test" "test:" "sequences")}
      {Lisp-Entry "prefix?" definition #f 2054 20 2054 27 ("continuation-return" "get-next" "nu/=?" "when" "done?" "not" "and" "while" "iter" "iterate-sequence" "targ" "let" "return" "lambda" "continuation-capture" "seq" "target")}
      {Lisp-Entry "copy-into!" definition #f 2065 20 2065 30 ("cardinality" "0" "naturals" "set-element!" "rank" "element" "lambda" "for-each" "seq2" "seq1")}
      {Lisp-Entry "Search-Context" class #f 2072 15 2072 29 ("Object")
        {Lisp-Entry "target" slot #f 2075 8 2075 14 ()}
        {Lisp-Entry "get-target" accessor #f 2075 48 2075 56 ()}
        {Lisp-Entry "set-target" accessor #f 2075 48 2075 56 ()}
        {Lisp-Entry "whole-words?" slot #f 2076 8 2076 20 ()}
        {Lisp-Entry "get-whole-words?" accessor #f 2076 48 2076 56 ()}
        {Lisp-Entry "set-whole-words?" accessor #f 2076 48 2076 56 ()}
        {Lisp-Entry "ignore-case?" slot #f 2077 8 2077 20 ()}
        {Lisp-Entry "get-ignore-case?" accessor #f 2077 48 2077 56 ()}
        {Lisp-Entry "set-ignore-case?" accessor #f 2077 48 2077 56 ()}
        {Lisp-Entry "regexp?" slot #f 2078 8 2078 15 ()}
        {Lisp-Entry "get-regexp?" accessor #f 2078 48 2078 56 ()}
        {Lisp-Entry "set-regexp?" accessor #f 2078 48 2078 56 ()}
        {Lisp-Entry "constituent-test" slot #f 2079 8 2079 24 ()}
        {Lisp-Entry "get-constituent-test" accessor #f 2079 48 2079 56 ()}
        {Lisp-Entry "set-constituent-test" accessor #f 2079 48 2079 56 ()}
        {Lisp-Entry "regexp" slot #f 2080 8 2080 14 ()}
        {Lisp-Entry "get-regexp" accessor #f 2080 48 2080 56 ()}
        {Lisp-Entry "set-regexp" accessor #f 2080 48 2080 56 ()}
        {Lisp-Entry "user-data" slot #f 2081 8 2081 17 ()}
        {Lisp-Entry "get-user-data" accessor #f 2081 48 2081 56 ()}
        {Lisp-Entry "set-user-data" accessor #f 2081 48 2081 56 ()}}
      {Lisp-Entry "Multi-Search-Context" class #f 2084 15 2084 35 ("Object")
        {Lisp-Entry "regexp" slot #f 2085 8 2085 14 ()}
        {Lisp-Entry "get-regexp" accessor #f 2085 48 2085 56 ()}
        {Lisp-Entry "set-regexp" accessor #f 2085 48 2085 56 ()}
        {Lisp-Entry "contexts" slot #f 2086 8 2086 16 ()}
        {Lisp-Entry "get-contexts" accessor #f 2086 48 2086 56 ()}
        {Lisp-Entry "set-contexts" accessor #f 2086 48 2086 56 ()}}
      {Lisp-Entry "construct-search-context" definition #f 2089 20 2089 44 ("Search-Context" "construct" "user-data" "constituent-test" "regexp?" "ignore-case?" "whole-words?" "target")}
      {Lisp-Entry "make-search-context" definition #f 2093 20 2093 39 ("construct-search-context" "user-data" "user-data:" "constituent-test" "constituent-test:" "regexp?" "regexp?:" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "target")}
      {Lisp-Entry "make-multi-search-context" definition #f 2101 20 2101 45 ("search-context->sre" "map" "or" "'or" "cons" "sre->irregex" "car" "search-context-regexp" "one-element?" "if" "Multi-Search-Context" "construct" "contexts")}
      {Lisp-Entry "maybe-make-multi-search-context" definition #f 2108 20 2108 51 ("else" "make-multi-search-context" "null/pair?" "cond" "contexts")}
      {Lisp-Entry "standardize-search-contexts" definition #f 2112 20 2112 47 ("list" "map" "null/pair?" "if" "error" "else" "make-search-context" "string?" "Search-Context" "is?" "cond" "standardize-context" "define" "obj")}
      {Lisp-Entry "search-context->sre" definition #f 2122 13 2122 32 ("get-target" "posix-string" "get-regexp?" "seq" "'seq" "w/nocase" "'w/nocase" "get-ignore-case?" "if" "list" "context")}
      {Lisp-Entry "search-context-regexp" definition #f 2128 13 2128 34 ("set-regexp" "search-context->sre" "sre->irregex" "rx" "let" "get-regexp" "or" "context")}
      {Lisp-Entry "matching-context" definition #f 2134 13 2134 29 ("car" "search-context-regexp" "irregex-match" "cdr" "null?" "or" "if" "ls" "lp" "let" "contexts" "str")}
      {Lisp-Entry "multisearch-impl" definition #f 2140 13 2140 29 ("else" "+" "cons" "res" "eqv?" ">=" "1" "-" "element" "=" ">" "cond" "irregex-match-end-index" "to" "irregex-match-start-index" "from" "if" "irregex-search" "m" "best" "0" "not" "i" "lp" "let" "cardinality" "and" "end" "get-whole-words?" "whole-words?" "word-constituent?" "get-contexts" "car" "get-constituent-test" "or" "get-regexp" "rx" "maybe-make-multi-search-context" "multi-search-context" "let*" "reversed?" "start" "constituent-test" "contexts" "seq")}
      {Lisp-Entry "multisearch" definition #f 2166 20 2166 31 ("multisearch-impl" "reversed?" "reversed?:" "start" "start:" "constituent-test" "constituent-test:" "contexts" "seq")}
      {Lisp-Entry "multisearch-all" definition #f 2173 20 2173 35 ("queue-list" "cdr" "car" "enqueue" "begin" "multisearch-impl" "found" "0" "if" "either" "pos" "iter" "maybe-make-multi-search-context" "multi-search-context" "new-queue" "queue" "cardinality" "len" "let" "reversed?" "reversed?:" "start" "start:" "constituent-test" "constituent-test:" "contexts" "seq")}
      {Lisp-Entry "search" definition #f 2189 20 2189 26 ("car" "if" "construct-search-context" "list" "multisearch-impl" "found" "let" "constituent-test" "constituent-test:" "regexp?" "regexp?:" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "reversed?" "reversed?:" "start" "start:" "target" "seq")}
      {Lisp-Entry "search-all" definition #f 2202 20 2202 30 ("construct-search-context" "list" "multisearch-all" "car" "map" "constituent-test" "constituent-test:" "regexp?" "regexp?:" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "reversed?" "reversed?:" "start" "start:" "target" "seq")}
      {Lisp-Entry "split" definition #f 2214 20 2214 25 ("when" "search" "iterate" "incr" "else" "get-output" "1" "+" "subseq" "put" "set!" "if" "position" "'position" "return:" "start:" "find-if" "pos" "not" "while" "done?" "List-Factory" "new" "result" "0" "previous" "let" "procedure?" "list" "cardinality" "zero?" "cond" "separator" "seq")}
      {Lisp-Entry "split-justified" definition #f 2243 20 2243 35 ("get-output" "increase!" "+" "set!" "subseq" "put" "begin" "<=" "if" "-" "effective-width" "not" "while" "done?" "List-Factory" "new" "result" "cardinality" "size" "pos" "let" "0" "column" "column:" "separators" "width" "seq")}
      {Lisp-Entry "join" definition #f 2260 20 2260 24 ("get-output" "concatenate" "apply" "seq" "lambda" "for-each" "put" "List-Factory" "new" "dst" "join-strings" "string?" "if" "first" "let" "else" "car" "cdr" "null?" "cond" "separator" "sequences")}
      {Lisp-Entry "inject" definition #f 2279 20 2279 26 ("get-output" "put" "put-sequence" "set!" "if" "element" "lambda" "for-each" "first?" "List-Factory" "new" "fact" "let" "inserted" "sequence")}
      {Lisp-Entry "substitute" definition #f 2291 20 2291 30 ("class-of" "get-output" "coerce" "put-sequence" "put" "apply-key" "apply-test" "if" "get-next" "object" "done?" "not" "while" "List-Factory" "new" "dst" "iterate-sequence" "src" "let" "sequence?" "sequence?:" "test" "test:" "key" "key:" "seq" "new-value" "old-value")}
      {Lisp-Entry "substitute-alist" definition #f 2304 20 2304 36 ("class-of" "get-output" "coerce" "put" "set!" "put-sequence" "apply-key" "apply-test" "when" "old" "bind" "unless" "replacement" "lambda" "for-each" "found?" "get-next" "object" "done?" "not" "while" "List-Factory" "new" "dst" "iterate-sequence" "src" "let" "test" "test:" "key" "key:" "seq" "replacements")}
      {Lisp-Entry "fill!" definition #f 2322 20 2322 25 ("next" "put" "done?" "not" "while" "set-position" "when" "iterate-sequence" "src" "let" "start" "start:" "object" "seq")}
      {Lisp-Entry "replace!" definition #f 2332 20 2332 28 ("next" "get-next" "put" "done?" "not" "and" "while" "set-position" "when" "rep" "iterate-sequence" "src" "let" "start" "start:" "replacement" "seq")}
      {Lisp-Entry "ordered-position" definition #f 2343 20 2343 36 ("find" "<=" "test" "test:" "key" "key:" "seq" "object")}
      {Lisp-Entry "insert-ordered!" definition #f 2347 20 2347 35 ("cardinality" "either" "insert!" "apply-key" "ordered-position" "n" "let" "<=" "test" "test:" "key" "key:" "seq" "object")}
      {Lisp-Entry "merge-ordered" definition #f 2352 20 2352 33 ("get-next" "expr" "error" "else" ":right" ":greater" ":left" ":less" "next" ":same" ":equal" "case" "ky" "apply-key" "kx" "ey" "peek" "ex" "let*" "done?" "not" "and" "while" "compare" "ci-compare" "if" "either" "compare-proc" "iy" "iterate-sequence" "ix" "let" "case-insensitive?" "case-insensitive?:" "test" "test:" "right-key" "right-key:" "left-key" "left-key:" "key" "key:" "y" "x" "proc")}
      {Lisp-Entry "merge" definition #f 2378 20 2378 25 ("get-output" "cdr" "set-car!" "put" ":equal" "neq?" "not" "or" "if" "object" "list" "pair" "lambda" "for-each-pair" "List-Factory" "new" "res" "apply-key" "min-key" ":compare" "remove-nils" "car" "map" "minimum" "min" "let*" "identity" "some?" "while" "copy" "scan" "let" "compare" "compare:" "key" "key:" "lists" "proc")}
      {Lisp-Entry "random-element" definition #f 2396 20 2396 34 ("cardinality" "random" "element" "seq")}
      {Lisp-Entry "partition" definition #f 2400 20 2400 29 ("elements" "bind" "partition" "map" "reverse!" "cdr" "set-cdr!" "list" "cons" "set!" "not" "if" "associate" "pair" "category" "let*" "element" "lambda" "for-each" "result" "let" "test" "test:" "identity" "key" "key:" "sequence")}
      {Lisp-Entry "partition-binary" definition #f 2415 20 2415 36 ("values" "cons" "set!" "if" "elem" "lambda" "for-each" "no" "yes" "let" "predicate" "lst")}
      {Lisp-Entry "starts-with?" definition #f 2426 20 2426 32 ("0" "subseq" ">=" "and" "string=?" "string-ci=?" "if" "test" "tl" "cardinality" "sl" "let" "ignore-case?" "ignore-case?:" "target" "seq")}
      {Lisp-Entry "ends-with?" definition #f 2436 20 2436 30 ("-" "subseq" ">=" "and" "string=?" "string-ci=?" "if" "test" "tl" "cardinality" "sl" "let" "ignore-case?" "ignore-case?:" "target" "seq")}
      {Lisp-Entry "for-each-reversed" definition #f 2446 20 2446 37 ("car" "cdr" "pair?" "when" "iterate" "let" "lst" "proc")}
      {Lisp-Entry "find-if-list" definition #f 2453 13 2453 25 ("1" "+" "cdr" "error" "else" "item" "'item" "position" "'position" "eq?" "car" "null?" "cond" "rank" "tail" "rest" "iter" "x" "lambda" "not" "if" "let" "returned" "start" "key" "list" "predicate")}
      {Lisp-Entry "insert-sequence!" definition #f 2465 27 2465 43 ("replace-subseq!" "seq" "pos" "sequence")}
      {Lisp-Entry "Sequence-Explorer" class #f 2474 15 2474 32 ("Explorer")
        {Lisp-Entry "sequence" slot #f 2477 8 2477 16 ()}
        {Lisp-Entry "sequence-cardinality" slot #f 2478 8 2478 28 ()}
        {Lisp-Entry "current" slot #f 2479 8 2479 15 ()}
        {Lisp-Entry "initialize" method #f 2482 20 2482 30 ("current" "goto-end" "backward" "goto-beginning" "case" "not" "if" "set-direction" "cardinality" "sequence-cardinality" "sequence" "set!" "nextmethod" "start" "start:" "forward" "'forward" "direction" "direction:" "seq")}
        {Lisp-Entry "peek-forward" method #f 2494 20 2494 32 ("current" "sequence" "element")}
        {Lisp-Entry "peek-backward" method #f 2498 20 2498 33 ("1" "current" "-" "sequence" "element")}
        {Lisp-Entry "goto-beginning" method #f 2502 20 2502 34 ("0" "current" "set!")}
        {Lisp-Entry "goto-end" method #f 2506 20 2506 28 ("sequence-cardinality" "current" "set!")}
        {Lisp-Entry "forward" method #f 2510 20 2510 27 ("1" "current" "increase!")}
        {Lisp-Entry "backward" method #f 2514 20 2514 28 ("1" "current" "decrease!")}
        {Lisp-Entry "done-forward?" method #f 2518 20 2518 33 ("sequence-cardinality" "current" ">=")}
        {Lisp-Entry "done-backward?" method #f 2522 20 2522 34 ("0" "current" "=")}
        {Lisp-Entry "put-forward" method #f 2526 20 2526 31 ("current" "sequence" "set-element!" "object")}
        {Lisp-Entry "put-backward" method #f 2530 20 2530 32 ("1" "current" "-" "sequence" "set-element!" "object")}
        {Lisp-Entry "get-position" method #f 2534 20 2534 32 ("current")}
        {Lisp-Entry "set-position" method #f 2538 20 2538 32 ("sequence-cardinality" "0" "between" "current" "set!" "pos")}
        {Lisp-Entry "get-state" method #f 2542 20 2542 29 ("current")}
        {Lisp-Entry "reset-state" method #f 2546 20 2546 31 ("current" "set!" "state")}}
      {Lisp-Entry "List-Class" class #f 2555 7 2555 17 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 2558 20 2558 37 ("make-list" "len")}}
      {Lisp-Entry "List" class #f 2562 17 2562 21 ("Sequence" "List-Class")
        {Lisp-Entry "initialize" method #f 2565 20 2565 30 ("native-class" "rest")}
        {Lisp-Entry "copy-object" method #f 2569 20 2569 31 ("self" "subcopy" "if" "x" "lambda" "map" "deep?")}
        {Lisp-Entry "iterate-object" method #f 2577 20 2577 34 ("self" "List-Iterator" "new")}
        {Lisp-Entry "sequence-element" method #f 2581 20 2581 36 ("self" "list-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 2585 20 2585 41 ("self" "list-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 2589 20 2589 40 ("self" "length")}
        {Lisp-Entry "sequence-tail" method #f 2593 20 2593 33 ("1" "-" "cdr" "tail" "0" "=" "self" "null?" "or" "if" "n")}
        {Lisp-Entry "sequence-last" method #f 2599 20 2599 33 ("last" "car" "self" "cdr" "null?" "if")}
        {Lisp-Entry "sequence-butlast" method #f 2605 20 2605 36 ("butlast" "car" "cons" "cdr" "self" "null?" "or" "if")}
        {Lisp-Entry "sequence-subseq!" method #f 2611 20 2611 36 ("subseq" "self" "-1" "0" "=" "or" "if" "end" "start")}
        {Lisp-Entry "replace-subseq!" method #f 2617 11 2617 26 ("+" "after" "1" "-" "before" "let*" "self" "tail" "last-tail" "set-cdr!" "begin" "0" "=" "if" "seq" "end" "start")}}
      {Lisp-Entry "Null-Class" class #f 2629 7 2629 17 ("List-Class")}
      {Lisp-Entry "Null" class #f 2632 17 2632 21 ("List" "Null-Class")
        {Lisp-Entry "compare-object" method #f 2635 20 2635 34 (":not-equal" ":equal" "null?" "if" "obj")}}
      {Lisp-Entry "Pair-Class" class #f 2641 7 2641 17 ("List-Class")}
      {Lisp-Entry "Pair" class #f 2644 17 2644 21 ("List" "Pair-Class")
        {Lisp-Entry "compare-object" method #f 2647 20 2647 34 (":not-equal" "else" "null?" "and" "cond" "right" "cdr" "left" "let" ":equal" ":greater" ":less" "self" "car" "compare" "case" "pair?" "if" "obj")}}
      {Lisp-Entry "element" specialize #f 2667 20 2667 27 ("list-ref" "n" "list")}
      {Lisp-Entry "cardinality" specialize #f 2671 20 2671 31 ("length" "list")}
      {Lisp-Entry "insert!" definition #f 2675 20 2675 27 ("class-of" "list" "coerce" "cardinality" "either" "insert-sequence!" "obj" "pos" "seq")}
      {Lisp-Entry "atom?" definition #f 2679 27 2679 32 ("pair?" "not" "obj")}
      {Lisp-Entry "null/pair?" definition #f 2683 27 2683 37 ("pair?" "null?" "or" "obj")}
      {Lisp-Entry "one-element?" definition #f 2687 27 2687 39 ("cdr" "null?" "pair?" "and" "obj")}
      {Lisp-Entry "last-tail" definition #f 2691 20 2691 29 ("cdr" "pair?" "cur" "iter" "let" "null?" "if" "lst")}
      {Lisp-Entry "make-list" definition #f 2700 20 2700 29 ("1" "-" "cons" "set!" "0" ">" "while" "list" "car" "null?" "if" "fill" "let" "rest" "n")}
      {Lisp-Entry "list-set!" definition #f 2709 27 2709 36 ("list-tail" "set-car!" "value" "n" "list")}
      {Lisp-Entry "set-cadr!" definition #f 2713 27 2713 36 ("cdr" "set-car!" "value" "pair")}
      {Lisp-Entry "append!" definition #f 2717 20 2717 27 ("queue-list" "enqueue-list" "lst" "lambda" "for-each" "new-queue" "queue" "let" "rest")}
      {Lisp-Entry "position" definition #f 2725 20 2725 28 ("0" "1" "+" "cdr" "else" "car" "eqv?" "null?" "cond" "pos" "lambda" "position" "letrec" "lst" "element")}
      {Lisp-Entry "copy-tree" definition #f 2737 20 2737 29 ("cdr" "car" "copy-tree" "cons" "pair?" "if" "tree")}
      {Lisp-Entry "position-of" definition #f 2744 20 2744 31 ("1" "+" "cdr" "car" "eq?" "null?" "if" "0" "i" "rst" "iter" "let" "lst" "obj")}
      {Lisp-Entry "proper-list?" definition #f 2753 20 2753 32 ("cdr" "proper-list?" "else" "pair?" "not" "null?" "cond" "lst")}
      {Lisp-Entry "last-cdr" definition #f 2759 20 2759 28 ("cdr" "last-cdr" "pair?" "if" "lst")}
      {Lisp-Entry "but-last-cdr" definition #f 2765 20 2765 32 ("cdr" "but-last-cdr" "car" "cons" "pair?" "if" "lst")}
      {Lisp-Entry "move-to-head!" definition #f 2771 20 2771 33 ("else" "cons" "set-cdr!" "cond" "cdr" "scan" "previous" "iter" "let" "car" "eq?" "null?" "or" "if" "lst" "target")}
      {Lisp-Entry "move-to-tail!" definition #f 2782 20 2782 33 ("begin" "if" "scan" "previous" "iter" "let" "else" "cdr" "cons" "last-tail" "set-cdr!" "car" "eq?" "null?" "cond" "lst" "target")}
      {Lisp-Entry "augment" definition #f 2801 20 2801 27 ("get-output" "set!" "put" "car" "put-sequence" "cdr" "null?" "if" "not-null?" "while" "scan" "List-Factory" "new" "fact" "let" "rest")}
      {Lisp-Entry "memq?" definition #f 2812 27 2812 32 ("memq" "boolean" "list" "target")}
      {Lisp-Entry "memv?" definition #f 2816 27 2816 32 ("memv" "boolean" "list" "target")}
      {Lisp-Entry "member?" definition #f 2820 20 2820 27 ("cdr" "else" "car" "apply-key" "apply-test" "null?" "cond" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "assq-value" definition #f 2830 20 2830 30 ("cdr" "if" "assq" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "assv-value" definition #f 2837 20 2837 30 ("cdr" "if" "assv" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "assoc-value" definition #f 2844 20 2844 31 ("cdr" "if" "assoc" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "associate" definition #f 2851 20 2851 29 ("cdr" "apply-key" "apply-test" "car" "pair" "null?" "if" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "rassociate" definition #f 2861 20 2861 30 ("cdr" "apply-key" "apply-test" "car" "pair" "null?" "if" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "find-pair" definition #f 2871 20 2871 29 ("cdr" "else" "car" "eq?" "null?" "cond" "scan" "iter" "let" "list" "target")}
      {Lisp-Entry "reverse!" definition #f 2881 20 2881 28 ("set-cdr!" "cdr" "set!" "not-null?" "while" "ptr" "res" "let" "list")}
      {Lisp-Entry "remove!" definition #f 2892 20 2892 27 ("set-cdr!" "begin" "scan" "previous" "let" "null?" "if" "cdr" "set!" "car" "apply-key" "not-null?" "and" "while" "eqv?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "getprop" definition #f 2909 20 2909 27 ("cddr" "else" "car" "apply-key" "eqv?" "null?" "cond" "scan" "iter" "let" "key" "key:" "target" "plist")}
      {Lisp-Entry "getf" definition #f 2919 20 2919 24 ("cadr" "not" "if" "getprop" "pair" "let" "not-found" "not-found:" "key" "key:" "target" "plist")}
      {Lisp-Entry "setf" definition #f 2926 20 2926 24 ("getprop" "set-second!" "value" "target" "plist")}
      {Lisp-Entry "addf" definition #f 2930 20 2930 24 ("set-second!" "list" "append!" "not" "if" "getprop" "pair" "let" "value" "target" "plist")}
      {Lisp-Entry "for-each-pair" definition #f 2938 20 2938 33 ("cdr" "set!" "not-null?" "while" "lst" "proc")}
      {Lisp-Entry "for-each-property" definition #f 2944 20 2944 37 ("cddr" "set!" "cadr" "car" "not-null?" "while" "lst" "proc")}
      {Lisp-Entry "map-property" definition #f 2950 20 2950 32 ("queue-list" "enqueue" "value" "property" "lambda" "for-each-property" "new-queue" "queue" "let" "lst" "proc")}
      {Lisp-Entry "flatten" definition #f 2958 20 2958 27 ("append" "apply" "llist")}
      {Lisp-Entry "uniform" definition #f 2962 20 2962 27 ("cdr" "continuation-return" "apply-test" "unless" "value" "object" "for-each" "car" "apply-key" "first" "let" "return" "lambda" "continuation-capture" "null?" "if" "test" "test:" "key" "key:" "lst")}
      {Lisp-Entry "sort-property-list" definition #f 2976 20 2976 38 ("append" "apply" "car" "key:" "<" "sort" "sorted" "get-output" "for-each-property" "begin" "alist" "list" "put" "value" "property" "lambda" "proc" "List-Factory" "new" "factory" "let*" "prop-list")}
      {Lisp-Entry "List-Iterator" class #f 2992 15 2992 28 ("Iterator")
        {Lisp-Entry "current" slot #f 2995 8 2995 15 ()}
        {Lisp-Entry "position" slot #f 2996 8 2996 16 ()}
        {Lisp-Entry "initialize" method #f 2999 20 2999 30 ("0" "position" "current" "set!" "nextmethod" "list")}
        {Lisp-Entry "get-next!" method #f 3005 20 3005 29 ("1" "+" "position" "cdr" "set!" "car" "prog1" "eof-object" "current" "null?" "if")}
        {Lisp-Entry "done?" method #f 3013 20 3013 25 ("Empty" "peeked" "eq?" "current" "null?" "and")}
        {Lisp-Entry "put" method #f 3017 20 3017 23 ("current" "set-car!" "object")}
        {Lisp-Entry "get-position" method #f 3021 20 3021 32 ("position")}
        {Lisp-Entry "set-position" method #f 3025 20 3025 32 ("tail" "current" "set!" ">" "error" "0" "<" "cond" "position" "-" "delta" "let" "pos")}
        {Lisp-Entry "get-state" method #f 3033 20 3033 29 ("position" "current" "cons")}
        {Lisp-Entry "reset-state" method #f 3037 20 3037 31 ("cdr" "position" "car" "current" "set!" "state")}
        {Lisp-Entry "get-list" method #f 3042 18 3042 26 ("current")}}
      {Lisp-Entry "List-Factory" class #f 3051 7 3051 19 ("0" "initialize" "Object")
        {Lisp-Entry "list" slot #f 3054 8 3054 12 ()}
        {Lisp-Entry "get-list" accessor #f 3054 46 3054 54 ()}
        {Lisp-Entry "last-list" slot #f 3055 8 3055 17 ()}
        {Lisp-Entry "last-anchor" slot #f 3056 8 3056 19 ()}
        {Lisp-Entry "current" slot #f 3057 8 3057 15 ()}
        {Lisp-Entry "size" slot #f 3058 8 3058 12 ()}
        {Lisp-Entry "get-size" accessor #f 3058 46 3058 54 ()}
        {Lisp-Entry "put" method #f 3061 11 3061 14 ("increase!" "size" "prog1" "cdr" "set-cdr!" "copy-last-list" "last-list" "when" "else" "list" "cons" "set!" "current" "null?" "cond" "object")}
        {Lisp-Entry "put-unique" method #f 3074 11 3074 21 ("put" "list" "member?" "unless" "eqv?" "test" "test:" "object")}
        {Lisp-Entry "put-sequence" method #f 3079 11 3079 23 ("cardinality" "increase!" "size" "prog1" "set-cdr!" "last-anchor" "copy-last-list" "else" "list" "last-list" "set!" "current" "null?" "cond" "put" "iterate" "pair?" "not" "if" "when" "seq")}
        {Lisp-Entry "is-empty?" method #f 3097 18 3097 27 ("current" "null?")}
        {Lisp-Entry "get-last-element" method #f 3101 18 3101 34 ("current" "car")}
        {Lisp-Entry "get-output" method #f 3105 11 3105 21 ("list")}
        {Lisp-Entry "reset" method #f 3109 18 3109 23 ("0" "size" "current" "last-anchor" "last-list" "list" "set!")}
        {Lisp-Entry "copy-last-list" method #f 3117 19 3117 33 ("set-cdr!" "else" "last-tail" "current" "last-list" "copy" "list" "set!" "last-anchor" "not" "cond")}}
      {Lisp-Entry "Table" class #f 3133 17 3133 22 ("Object")
        {Lisp-Entry "initialize" method #f 3136 20 3136 30 ("native-class" "rest")}
        {Lisp-Entry "print" method #f 3140 20 3140 25 ("table-length" "system-format" "lambda" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "table-add" definition #f 3147 20 3147 29 ("table-ref" "cons" "table-set!" "value" "key" "table")}
      {Lisp-Entry "table-remove!" definition #f 3151 20 3151 33 ("table-ref" "remove!" "table-set!" "value" "name" "table")}
      {Lisp-Entry "empty-table" definition #f 3155 20 3155 31 ("empty-table" "'empty-table" "unimplemented" "table")}
      {Lisp-Entry "table-keys" definition #f 3159 20 3159 30 ("cons" "set!" "value" "key" "lambda" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-values" definition #f 3167 20 3167 32 ("cons" "set!" "value" "key" "lambda" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-keys/values" definition #f 3175 20 3175 37 ("cons" "set!" "value" "key" "lambda" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-load" definition #f 3183 20 3183 30 ("table-set!" "error" "table-ref" "if" "eof-object?" "not" "and" "when" "object" "read" "name" "iterate" "let" "reader" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "error-on-duplicates?" "file" "table")}
      {Lisp-Entry "Slot" class #f 3202 7 3202 11 ("Field")
        {Lisp-Entry "offset" slot #f 3205 8 3205 14 ()}
        {Lisp-Entry "get-offset" accessor #f 3205 26 3205 34 ()}
        {Lisp-Entry "initialize" slot #f 3206 8 3206 18 ()}
        {Lisp-Entry "get-initialize" accessor #f 3206 26 3206 34 ()}}
      {Lisp-Entry "Property" class #f 3214 7 3214 15 ("Slot")
        {Lisp-Entry "getter" slot #f 3217 8 3217 14 ()}
        {Lisp-Entry "get-getter" accessor #f 3217 22 3217 30 ()}
        {Lisp-Entry "setter" slot #f 3218 8 3218 14 ()}
        {Lisp-Entry "get-setter" accessor #f 3218 22 3218 30 ()}}
      {Lisp-Entry "property?" definition #f 3221 27 3221 36 ("Property" "is?" "obj")}
      {Lisp-Entry "symbolize-property" definition #f 3225 20 3225 38 ("else" "keyword->symbol" "keyword?" "get-name" "field?" "cond" "property")}
      {Lisp-Entry "symbolize-properties" definition #f 3231 20 3231 40 ("get-output" "symbolize-property" "put" "value" "property" "lambda" "for-each-property" "List-Factory" "new" "fact" "let" "properties")}
      {Lisp-Entry "keywordize-property" definition #f 3241 20 3241 39 ("else" "keyword?" "field-name" "symbol->keyword" "field?" "cond" "property")}
      {Lisp-Entry "keywordize-properties" definition #f 3247 20 3247 41 ("get-output" "keywordize-property" "put" "value" "property" "lambda" "for-each-property" "List-Factory" "new" "fact" "let" "properties")}
      {Lisp-Entry "read-property" definition #f 3257 20 3257 33 ("property-field" "property-getter" "getter" "let" "expr" "object")}
      {Lisp-Entry "write-property" definition #f 3262 20 3262 34 ("property-field" "property-setter" "setter" "let" "value" "expr" "object")}
      {Lisp-Entry "property-field" definition #f 3267 20 3267 34 ("error" "keyword->symbol" "keyword?" "class-of" "category-field" "field" "let" "property?" "if" "expr" "object")}
      {Lisp-Entry "String-Class" class #f 3281 7 3281 19 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 3284 20 3284 37 ("make-string" "len")}
        {Lisp-Entry "coerce-object" method #f 3288 20 3288 33 ("coerce-string" "nextmethod" "sequence?" "if" "obj")}}
      {Lisp-Entry "String" class #f 3294 17 3294 23 ("Sequence" "String-Class")
        {Lisp-Entry "initialize" method #f 3297 20 3297 30 ("native-class" "rest")}
        {Lisp-Entry "compare-object" method #f 3301 20 3301 34 (":incompatible" ":greater" "else" ":less" "string<?" ":equal" "self" "string=?" "cond" "string?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" method #f 3313 20 3313 37 (":incompatible" ":greater" "else" ":less" "string-ci<?" ":equal" "self" "string-ci=?" "cond" "string?" "if" "obj")}
        {Lisp-Entry "sequence-element" method #f 3325 20 3325 36 ("self" "string-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 3329 20 3329 41 ("self" "string-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 3333 20 3333 40 ("self" "string-length")}
        {Lisp-Entry "sequence-tail" method #f 3337 20 3337 33 ("substring" ">=" "if" "self" "cardinality" "lgt" "let" "n")}
        {Lisp-Entry "sequence-last" method #f 3344 20 3344 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 3348 20 3348 36 ("1" "cardinality" "-" "0" "self" "substring")}}
      {Lisp-Entry "=" specialize #f 3352 20 3352 21 ("string=?" "s2" "s1")}
      {Lisp-Entry "element" specialize #f 3356 20 3356 27 ("string-ref" "n" "string")}
      {Lisp-Entry "set-element!" specialize #f 3360 20 3360 32 ("string-set!" "c" "n" "string")}
      {Lisp-Entry "cardinality" specialize #f 3364 20 3364 31 ("string-length" "string")}
      {Lisp-Entry "subseq" specialize #f 3368 20 3368 26 ("substring" "end" "start" "string")}
      {Lisp-Entry "replace-subseq!" specialize #f 3372 13 3372 28 ("cardinality" "0" "subseq" "string-append" "replacement" "end" "start" "string")}
      {Lisp-Entry "empty-string?" definition #f 3387 20 3387 33 ("string-length" "zero?" "string?" "and" "object")}
      {Lisp-Entry "->string" definition #f 3392 20 3392 28 ("get-output-string" "print" "open-output-string" "output" "let" ":human" "':human" "detail" "expr")}
      {Lisp-Entry "remove-trailing-char" definition #f 3398 20 3398 40 ("subseq" "1" "-" "element" "eqv?" "0" ">" "and" "if" "cardinality" "len" "let" "c" "string")}
      {Lisp-Entry "value-string?" definition #f 3406 20 3406 33 ("empty-string?" "not" "string?" "and" "object")}
      {Lisp-Entry "wi=" definition #f 3411 20 3411 23 ("else" "eqv?" "eq?" "continuation-return" "cond" "when" ">=" "increase!" "element" "whitechar?" "and" "set!" "not" "or" "while" "d2?" "=" "d1?" "w2?" "w1?" "s?" "l2" "cardinality" "l1" "n2" "0" "n1" "let*" "return" "lambda" "continuation-capture" "s2" "s1")}
      {Lisp-Entry "unique-domain-name" definition #f 3451 20 3451 38 ("increase!" "->string" "set!" "iterate" "let" "suffix" "1" "n" "subseq" "starts-with?" "when" "string" "lambda" "collect" "suffixes" "cardinality" "common-length" "append" "common-prefix" "let*" "member?" "not" "if" "separator" "separator:" "domain" "name")}
      {Lisp-Entry "remove-numeric-suffix" definition #f 3471 20 3471 41 ("1" "+" "0" "subseq" "if" "position" "'position" "return:" "reversed?:" "numeric?" "not" "c" "lambda" "find-if" "pos" "let" "string")}
      {Lisp-Entry "compare-n" definition #f 3478 20 3478 29 ("1" "+" "string-ref" "not" "or" ">=" "if" "0" "n" "iter" "ylen" "string-length" "xlen" "let" "eqv?" "test" "test:" "max" "y" "x")}
      {Lisp-Entry "string-checksum" definition #f 3489 20 3489 35 ("1" "+" "string-ref" "char->integer" "increase!" "<" "when" "n" "iter" "string-length" "len" "0" "sum" "let" "str")}
      {Lisp-Entry "split-lines" definition #f 3499 20 3499 31 ("read-lines" "call-with-input-string" "string")}
      {Lisp-Entry "join-lines" definition #f 3504 20 3504 30 ("join" "lines")}
      {Lisp-Entry "primordial-thread-object" definition #f 3513 12 3513 36 ("current-thread")}
      {Lisp-Entry "primordial-thread" definition #f 3517 20 3517 37 ("primordial-thread-object")}
      {Lisp-Entry "primordial-thread?" definition #f 3521 20 3521 38 ("primordial-thread" "current-thread" "eq?")}
      {Lisp-Entry "new-thread" definition #f 3525 20 3525 30 ("make-root-thread" "apply" "rest" "thunk")}
      {Lisp-Entry "top-threads" definition #f 3531 20 3531 31 ("primordial-thread" "thread-thread-group" "thread-group->thread-list")}
      {Lisp-Entry "present-thread-name" definition #f 3535 20 3535 39 ("->string" "else" "unspecified?" "not" "or" "cond" "name")}
      {Lisp-Entry "present-thread-state" definition #f 3540 20 3540 40 ("get-output-string" "else" "when" "write" "thread-state-active-timeout" "thread-state-active-waiting-for" "wf" "thread-state-active?" "thread-state-abnormally-terminated?" "thread-state-normally-terminated?" "thread-state-initialized?" "system-format" "thread-state-uninitialized?" "cond" "10.0" "*" "round" "/" "current-systime" "systime->seconds" "-" "expiry" "display" "to" "write-timeout" "define" "open-output-string" "port" "let" "state")}
      {Lisp-Entry "present-object" definition #f 3578 20 3578 34 (":reader" "->string" "object->serial" "number->string" "class-of" "type-name" "identifier-name" "symbol->string" "string-append" "class-string" "let" "exc" "lambda" "with-exception-catcher" "object")}
      {Lisp-Entry "thread-loop?" definition #f 3593 21 3593 33 ("thread-specific" "thread")}
      {Lisp-Entry "thread-start-loop" definition #f 3596 21 3596 38 ("thread-specific-set!" "thread")}
      {Lisp-Entry "thread-stop-loop" definition #f 3599 21 3599 37 ("thread-specific-set!" "thread")}
      {Lisp-Entry "thread-loop" definition #f 3603 21 3603 32 ("current-thread" "thread-loop?" "when" "thread-read" "thunk" "loop" "let")}
      {Lisp-Entry "thread-ports" definition #f 3611 12 3611 24 ("weak-keys:" "eq?" "test:" "make-table")}
      {Lisp-Entry "thread-ports-mutex" definition #f 3614 12 3614 30 ("thread-ports" "'thread-ports" "make-mutex")}
      {Lisp-Entry "thread-has-port?" definition #f 3618 21 3618 37 ("thread-ports" "table-ref" "boolean" "thread")}
      {Lisp-Entry "get-thread-port" definition #f 3622 13 3622 28 ("mutex-unlock!" "table-set!" "open-vector" "port" "let" "thread-ports" "table-ref" "either" "prog1" "thread-ports-mutex" "mutex-lock!" "thread")}
      {Lisp-Entry "thread-write" definition #f 3631 21 3631 33 ("force-output" "write" "get-thread-port" "thread-port" "let" "value" "thread")}
      {Lisp-Entry "thread-read" definition #f 3637 21 3637 32 ("read" "+infinity" "input-port-timeout-set!" "current-thread" "get-thread-port" "thread-port" "let")}
      {Lisp-Entry "thread-read-non-blocking" definition #f 3643 21 3643 45 ("read" "0" "input-port-timeout-set!" "current-thread" "get-thread-port" "thread-port" "let")}
      {Lisp-Entry "thread-post" definition #f 3649 20 3649 31 ("thread-write" "current-thread" "eq?" "if" "thunk" "name" "thread")}
      {Lisp-Entry "thread-execute" definition #f 3655 20 3655 34 ("mutex-unlock!" "unwind-protect" "lambda" "thread-write" "mutex-lock!" "make-mutex" "mutex" "let" "current-thread" "eq?" "if" "thunk" "name" "thread")}
      {Lisp-Entry "thread-call-noresult" definition #f 3668 12 3668 32 ("thread-call-noresult" "'thread-call-noresult" "list")}
      {Lisp-Entry "thread-call-result?" definition #f 3672 21 3672 40 ("thread-call-noresult" "neq?" "result")}
      {Lisp-Entry "thread-call" definition #f 3676 20 3676 31 ("mutex-specific" "mutex-unlock!" "unwind-protect" "lambda" "thread-write" "thread-call-noresult" "mutex-specific-set!" "mutex-lock!" "make-mutex" "mutex" "eq?" "if" "current-thread" "delegator" "let" "thunk" "name" "thread")}
      {Lisp-Entry "thread-exit" definition #f 3692 20 3692 31 ("pristine-thread-continuation" "continuation-return")}
      {Lisp-Entry "sleep" definition #f 3696 20 3696 25 ("thread-sleep!" "delay")}
      {Lisp-Entry "is-not?" definition #f 3705 27 3705 34 ("is?" "not" "type" "object")}
      {Lisp-Entry "type-name" definition #f 3709 27 3709 36 ("get-category-name" "type")}
      {Lisp-Entry "type-ascendant" definition #f 3713 27 3713 41 ("get-class-ascendant" "type")}
      {Lisp-Entry "type-descendants" definition #f 3717 20 3717 36 ("get-category-descendants" "type")}
      {Lisp-Entry "Vector-Class" class #f 3726 7 3726 19 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 3729 20 3729 37 ("make-vector" "len")}}
      {Lisp-Entry "Vector" class #f 3733 17 3733 23 ("Sequence" "Vector-Class")
        {Lisp-Entry "initialize" method #f 3736 20 3736 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 3741 11 3741 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 3747 20 3747 36 ("self" "vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 3751 20 3751 41 ("self" "vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 3755 20 3755 40 ("self" "vector-length")}
        {Lisp-Entry "sequence-tail" method #f 3759 20 3759 33 ("self" "vector->list" "tail" "list->vector" "n")}
        {Lisp-Entry "sequence-last" method #f 3763 20 3763 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 3767 20 3767 36 ("self" "vector->list" "butlast" "list->vector")}}
      {Lisp-Entry "element" specialize #f 3771 20 3771 27 ("vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 3775 20 3775 32 ("vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 3779 20 3779 31 ("vector-length" "vector")}
      {Lisp-Entry "AXIS_MIN_SIZE" definition #f 3788 12 3788 25 ("8")}
      {Lisp-Entry "AXIS_GOLDEN_RATIO" definition #f 3789 12 3789 29 ("1.6")}
      {Lisp-Entry "Axis-Class" class #f 3792 7 3792 17 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 3795 20 3795 37 ("Axis" "new" "len")}}
      {Lisp-Entry "Axis" class #f 3799 7 3799 11 ("Sequence" "Axis-Class")
        {Lisp-Entry "size" slot #f 3802 8 3802 12 ()}
        {Lisp-Entry "get-size" accessor #f 3802 35 3802 43 ()}
        {Lisp-Entry "set-size" accessor #f 3802 35 3802 43 ()}
        {Lisp-Entry "content" slot #f 3803 8 3803 15 ()}
        {Lisp-Entry "get-content" accessor #f 3803 35 3803 43 ()}
        {Lisp-Entry "set-content" accessor #f 3803 35 3803 43 ()}
        {Lisp-Entry "initialize" method #f 3806 20 3806 30 ("make-vector" "content" "size" "set!" "s")}
        {Lisp-Entry "print" method #f 3811 20 3811 25 ("content" "size" "system-format" "lambda" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "sequence-element" method #f 3817 20 3817 36 ("self" "element" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 3821 20 3821 41 ("self" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 3825 20 3825 40 ("self" "cardinality")}
        {Lisp-Entry "sequence-tail" method #f 3829 20 3829 33 ("self" "tail" "n")}
        {Lisp-Entry "sequence-last" method #f 3833 20 3833 33 ("self" "last")}}
      {Lisp-Entry "axis" definition #f 3837 20 3837 24 ("Axis" "coerce" "rest")}
      {Lisp-Entry "element" specialize #f 3841 20 3841 27 ("get-content" "vector-ref" "n" "axis")}
      {Lisp-Entry "set-element!" specialize #f 3845 20 3845 32 ("get-content" "vector-set!" "obj" "n" "axis")}
      {Lisp-Entry "cardinality" specialize #f 3849 20 3849 31 ("get-size" "axis")}
      {Lisp-Entry "tail" specialize #f 3853 13 3853 17 ("1" "+" "element" "set-element!" ">=" "if" "0" "i" "iter" "get-size" "-" "offset" "Axis" "new" "new-axis" "let" "n" "axis")}
      {Lisp-Entry "last" specialize #f 3863 13 3863 17 ("1" "get-size" "-" "element" "axis")}
      {Lisp-Entry "insert!" specialize #f 3867 13 3867 20 ("list" "replace-subseq!" "obj" "pos" "axis")}
      {Lisp-Entry "replace-subseq!" specialize #f 3871 13 3871 28 ("axis-grow" "1" "element" "set-element!" "0" ">" "when" "dst" "src" "n" "iter" "let" "<" "cond" "+" "new-size" "get-size" "old-size" "delta" "cardinality" "after" "-" "before" "let*" "replacement" "end" "start" "axis")}
      {Lisp-Entry "axis-remove!" definition #f 3901 20 3901 32 ("replace-subseq!" "1" "+" "end" "start" "let*" "when" "find" "n" "let" "element" "axis")}
      {Lisp-Entry "axis-grow" definition #f 3909 20 3909 29 ("1" "+" "element" "set-element!" "begin" "<" "when" "i" "iter" "AXIS_GOLDEN_RATIO" "*" "fxround" "old-content" "old-real-size" "let" "else" "AXIS_MIN_SIZE" "make-vector" "set-content" "0" "get-size" "=" "set-size" "get-content" "cardinality" "<=" "cond" "n" "axis")}
      {Lisp-Entry "axis-add" definition #f 3927 20 3927 28 ("set-element!" "1" "+" "axis-grow" "cardinality" "size" "let" "obj" "axis")}
      {Lisp-Entry "new-axis" definition #f 3933 27 3933 35 ("make-vector" "Axis" "construct" "size")}
      {Lisp-Entry "new" specialize #f 3936 20 3936 23 ("new-axis" "size" "class")}
      {Lisp-Entry "allocate" specialize #f 3940 13 3940 21 ("new-axis" "size" "class")}
      {Lisp-Entry "coerce" specialize #f 3944 13 3944 19 ("element" "set-element!" "below" "0" "from" "n" "for" "loop" "allocate" "new-sequence" "cardinality" "len" "let" "class" "seq")}
      {Lisp-Entry "axis-ref" specialize #f 3952 22 3952 30 ()}
      {Lisp-Entry "element" specialize #f 3952 32 3952 39 ("get-content" "vector-ref" "n" "axis")}
      {Lisp-Entry "axis-set!" specialize #f 3956 22 3956 31 ()}
      {Lisp-Entry "set-element!" specialize #f 3956 33 3956 45 ("get-content" "vector-set!" "obj" "n" "axis")}
      {Lisp-Entry "axis-cardinality" specialize #f 3960 22 3960 38 ()}
      {Lisp-Entry "cardinality" specialize #f 3960 40 3960 51 ("get-size" "axis")}
      {Lisp-Entry "dispatch?" definition #f 3974 20 3974 29 ("symbol->string" "ends-with?" "symbol?" "and" "expr")}
      {Lisp-Entry "dispatch-string?" definition #f 3979 20 3979 36 ("ends-with?" "string")}
      {Lisp-Entry "dispatch->name" definition #f 3983 20 3983 34 ("symbol->string" "string->symbol" "string?" "if" "1" "cardinality" "-" "0" "subseq" "string" "extract" "define" "dispatch")}
      {Lisp-Entry "Enumeration" class #f 3998 7 3998 18 ("Type")
        {Lisp-Entry "name" slot #f 4001 8 4001 12 ()}
        {Lisp-Entry "entries" slot #f 4002 8 4002 15 ()}
        {Lisp-Entry "construct-literal" method #f 4006 16 4006 33 ("self" "new" "entries" "name" "context")}
        {Lisp-Entry "initialize" method #f 4010 11 4010 21 ("entries~self" "name~self" "set!" "Enumeration" "nextmethod" "entries" "name")}
        {Lisp-Entry "print" method #f 4016 11 4016 16 ("entries" "name" "self" "class-of" "type-name" "system-format" "readably" "printer")}
        {Lisp-Entry "get-name" method #f 4023 18 4023 26 ("name")}
        {Lisp-Entry "get-entries" method #f 4027 18 4027 29 ("entries")}
        {Lisp-Entry "set-value" method #f 4031 18 4031 27 ("entry-from-name" "cdr" "set-car!" "value" "name")}
        {Lisp-Entry "get-size" method #f 4035 11 4035 19 ("int" "size-of")}
        {Lisp-Entry "read-content" method #f 4039 11 4039 23 ("%read-int" "address")}
        {Lisp-Entry "write-content" method #f 4043 11 4043 24 ("%write-int" "object" "address")}
        {Lisp-Entry "entry-from-name" method #f 4047 11 4047 26 ("self" "error" "eq?" "test:" "first" "key:" "entries" "find-in" "either" "name")}
        {Lisp-Entry "entry-from-value" method #f 4052 11 4052 27 ("self" "error" "eqv?" "test:" "second" "key:" "entries" "find-in" "either" "value")}
        {Lisp-Entry "value->name" method #f 4057 18 4057 29 ("entry-from-value" "car" "value")}
        {Lisp-Entry "name->value" method #f 4061 18 4061 29 ("entry-from-name" "cadr" "name")}
        {Lisp-Entry "get-rank" method #f 4065 18 4065 26 ("eq?" "test:" "first" "key:" "entries" "find" "1" "+" "0" "name" "=" "if" "target")}}
      {Lisp-Entry "enumeration?" definition #f 4071 27 4071 39 ("enumeration?" "'enumeration?" "unimplemented" "object")}
      {Lisp-Entry "set-enumeration!" definition #f 4075 20 4075 36 ("set-value" "set-enumeration!" "'set-enumeration!" "unimplemented" "value" "name" "enumeration")}
      {Lisp-Entry "bits->symbolic" definition #f 4081 20 4081 34 ("get-output" "put" "mask-bit-set?" "when" "value" "name" "bind" "entry" "lambda" "for-each" "List-Factory" "new" "fact" "get-entries" "entries" "let" "enumeration" "bits")}
      {Lisp-Entry "nil" definition #f 4097 19 4097 22 ("nil" "'nil" "list")}
      {Lisp-Entry "nil?" definition #f 4101 27 4101 31 ("nil" "eq?" "obj")}
      {Lisp-Entry "not-nil?" definition #f 4105 27 4105 35 ("nil" "eq?" "not" "obj")}
      {Lisp-Entry "parse-file" definition #f 4114 20 4114 30 ("parse" "string?" "if" "file")}
      {Lisp-Entry "Chunk-Size" definition #f 4120 12 4120 22 ("1024")}
      {Lisp-Entry "make-u8-content" definition #f 4124 33 4124 48 ("cons" "content" "size")}
      {Lisp-Entry "u8-content-size" definition #f 4127 33 4127 48 ("car" "content")}
      {Lisp-Entry "iterate-u8-content" definition #f 4130 33 4130 51 ("cdr" "size" "u8vector" "bind" "chunk" "lambda" "for-each" "proc" "content")}
      {Lisp-Entry "read-u8-content" definition #f 4137 33 4137 48 ("cons" "put" "increase!" "get-output" "make-u8-content" "=" "if" "read-subu8vector" "read" "Chunk-Size" "make-u8vector" "u8vector" "loop" "List-Factory" "new" "fact" "0" "size" "let" "port")}
      {Lisp-Entry "write-u8-content" definition #f 4150 33 4150 49 ("0" "write-subu8vector" "size" "u8vector" "lambda" "iterate-u8-content" "port" "content")}
      {Lisp-Entry "start-pump" definition #f 4156 33 4156 43 ("substring" ">" "if" "1" "0" "read-substring" "n" "iterate" "make-string" "buffer" "1000" "size" "let" "proper-tail-calls" "declare" "proc" "port")}
      {Lisp-Entry "read-until" definition #f 4174 20 4174 30 ("enqueue" "queue-list" "if" "read" "expr" "iterate" "new-queue" "queue" "let" "reader" "test")}
      {Lisp-Entry "read-string-element" definition #f 4184 20 4184 39 ("read" "call-with-input-string" "string")}
      {Lisp-Entry "read-string-content" definition #f 4189 20 4189 39 ("eof-object?" "read-until" "reader" "lambda" "call-with-input-string" "string")}
      {Lisp-Entry "read-delimited-string" definition #f 4195 20 4195 41 ("get-output" "peek-char" "eof-object?" "if" "skip-whites" "put" "read-delimited" "lst" "iterate" "List-Factory" "new" "fact" "let" "reader" "lambda" "call-with-input-string" "char" "string")}
      {Lisp-Entry "require-char" definition #f 4208 20 4208 32 ("error" "eof-object?" "if" "read-char" "c" "let" "reader")}
      {Lisp-Entry "skip-line" definition #f 4215 20 4215 29 ("eqv?" "eof-object?" "not" "and" "if" "read-char" "c" "iterate" "let" "reader")}
      {Lisp-Entry "skip-whites" definition #f 4226 20 4226 31 ("read-char" "whitespace?" "when" "skip-line" "eqv?" "if" "eof-object?" "unless" "peek-char" "c" "iterate" "let" "reader")}
      {Lisp-Entry "read-delimited" definition #f 4237 20 4237 34 ("enqueue" "else" "read" "enqueue-list" "read-char" "eqv?" "error" "queue-list" "if" "eof-object?" "cond" "peek-char" "c" "skip-whites" "iterate" "new-queue" "queue" "let" "allow-eof?" "delimiter" "kind" "reader")}
      {Lisp-Entry "string-delimiter?" definition #f 4257 27 4257 44 ("eqv?" "c")}
      {Lisp-Entry "read-lines" definition #f 4261 20 4261 30 ("queue-list" "when" "enqueue" "begin" "if" "read-proper-line" "proper?" "line" "receive" "last-proper?" "iterate" "new-queue" "queue" "let" "proper-tail-calls" "declare" "reader")}
      {Lisp-Entry "read-content-string" definition #f 4275 20 4275 39 ("eof-object?" "if" "read-line" "line" "let" "reader")}
      {Lisp-Entry "pipe" definition #f 4284 20 4284 24 ("write-char" "begin" "eof-object?" "not" "if" "read-char" "c" "iterate" "let" "output" "input")}
      {Lisp-Entry "textual" definition #f 4298 20 4298 27 (":text" "print" "write" "current-output-port" "printer" "expr")}
      {Lisp-Entry "describe" definition #f 4304 20 4304 28 (":describe" "print" "current-output-port" "printer" "expr")}
      {Lisp-Entry "print-expr" definition #f 4308 13 4308 23 ("print" "current-output-port" "printer" "detail" "expr")}
      {Lisp-Entry "print-unsigned" definition #f 4312 13 4312 27 ("print-unsigned" "'print-unsigned" "unimplemented" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-binary" definition #f 4316 13 4316 25 ("2" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-hexadecimal" definition #f 4320 13 4320 30 ("16" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-real" definition #f 4324 13 4324 23 ("new-frac" ">" "and" "carry?" "dot-pos" "or" "if" "len" "string->number" "round" "temp-str" "last-part" "first-part" "else" "-" "make-string" "string-append" "<" "display" "=" "cond" "frac-len" "string-length" "1" "+" "frac-str" "0" "substring" "pre-str" "find" "dot-index" "exact->inexact" "number->string" "str" "let*" "current-output-port" "printer" "precision" "r")}
      {Lisp-Entry "print-list" definition #f 4363 13 4363 23 ("null?" "pair?" "if" "cdr" "next" "print" "car" "expr" "scan" "iter" "let" "display" "not-null?" "when" "current-output-port" "printer" "detail" "after" "before" "last-separator" "separator" "list")}
      {Lisp-Entry "fresh-line" definition #f 4381 20 4381 30 ("newline" "at-fresh-line?" "unless" "current-output-port" "printer")}
      {Lisp-Entry "at-fresh-line?" definition #f 4386 20 4386 34 ("current-output-port" "printer")}
      {Lisp-Entry "*printers*" definition #f 4396 12 4396 22 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-printer" definition #f 4400 21 4400 37 ("*printers*" "table-set!" "proc" "name")}
      {Lisp-Entry "with-printer" definition #f 4404 20 4404 32 ("*printers*" "table-ref" "printer-proc" "get-output-string" "open-output-string" "let" ":string" "eq?" "if" "proc" "printer")}
      {Lisp-Entry "pp" definition #f 4424 19 4424 21 ("pretty-print")}
      {Lisp-Entry "present-identifier" definition #f 4428 20 4428 38 ("0" "1" "element" "system-format" "reverse!" "reversed" "car" "cdr" "null?" "if" "symbol->string" "split" "names" "let" "identifier")}
      {Lisp-Entry "write-line" definition #f 4436 20 4436 30 ("newline" "display" "car" "null?" "if" "port" "let" "rest" "line")}
      {Lisp-Entry "write-lines" definition #f 4442 20 4442 31 ("newline" "null?" "unless" "display" "do" "remain" "remainder" "in" "line" "for" "loop" "lines" "printer")}
      {Lisp-Entry "identity" definition #f 4454 27 4454 35 ("x")}
      {Lisp-Entry "compose" definition #f 4458 27 4458 34 ("x" "lambda" "g" "f")}
      {Lisp-Entry "Subseq-Class" class #f 4468 7 4468 19 ("Sequence-Class")}
      {Lisp-Entry "Subseq" class #f 4471 7 4471 13 ("Sequence" "Subseq-Class")
        {Lisp-Entry "sequence" slot #f 4474 8 4474 16 ()}
        {Lisp-Entry "get-sequence" accessor #f 4474 32 4474 40 ()}
        {Lisp-Entry "start" slot #f 4475 8 4475 13 ()}
        {Lisp-Entry "get-start" accessor #f 4475 32 4475 40 ()}
        {Lisp-Entry "set-start" accessor #f 4475 32 4475 40 ()}
        {Lisp-Entry "size" slot #f 4476 8 4476 12 ()}
        {Lisp-Entry "get-size" accessor #f 4476 32 4476 40 ()}
        {Lisp-Entry "set-size" accessor #f 4476 32 4476 40 ()}
        {Lisp-Entry "initialize" method #f 4479 20 4479 30 ("size~self" "start~self" "sequence~self" "set!" "nextmethod" "size" "start" "sequence")}
        {Lisp-Entry "print" method #f 4486 20 4486 25 ("system-format" "lambda" "self" "print-unreadable" "string-ref" "write-char" "do" "size" "+" "below" "start" "from" "n" "for" "loop" "sequence" "string?" "if" "detail" "output")}
        {Lisp-Entry "coerce-string" method #f 4496 20 4496 33 ("error" "size" "+" "start" "substring" "sequence" "string?" "if")}
        {Lisp-Entry "sequence-element" method #f 4502 20 4502 36 ("start" "+" "sequence" "element" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 4506 20 4506 41 ("start" "+" "sequence" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 4510 20 4510 40 ("size")}
        {Lisp-Entry "sequence-subseq!" method #f 4514 20 4514 36 ("cardinality" "-" "start" "+" "sequence" "Subseq" "new" "self" "-1" "0" "=" "or" "if" "e" "s")}}
      {Lisp-Entry "offset-subseq!" definition #f 4520 20 4520 34 ("get-start" "+" "set-start" "offset" "subseq")}
      {Lisp-Entry "grow-subseq!" definition #f 4524 20 4524 32 ("get-size" "+" "set-size" "n" "subseq")}
      {Lisp-Entry "subseq-ref" specialize #f 4528 22 4528 32 ()}
      {Lisp-Entry "element" specialize #f 4528 34 4528 41 ("get-start" "+" "get-sequence" "element" "n" "subseq")}
      {Lisp-Entry "subseq-set!" specialize #f 4532 22 4532 33 ()}
      {Lisp-Entry "set-element!" specialize #f 4532 35 4532 47 ("get-start" "+" "get-sequence" "set-element!" "obj" "n" "subseq")}
      {Lisp-Entry "subseq-cardinality" specialize #f 4536 22 4536 40 ()}
      {Lisp-Entry "cardinality" specialize #f 4536 42 4536 53 ("get-size" "subseq")}
      {Lisp-Entry "Subseq$string$-Class" class #f 4545 7 4545 27 ("Sequence-Class")}
      {Lisp-Entry "Subseq$string$" class #f 4548 7 4548 21 ("Sequence" "Subseq$string$-Class")
        {Lisp-Entry "sequence" slot #f 4551 8 4551 16 ()}
        {Lisp-Entry "get-sequence" accessor #f 4551 36 4551 44 ()}
        {Lisp-Entry "start" slot #f 4552 8 4552 13 ()}
        {Lisp-Entry "get-start" accessor #f 4552 36 4552 44 ()}
        {Lisp-Entry "set-start" accessor #f 4552 36 4552 44 ()}
        {Lisp-Entry "size" slot #f 4553 8 4553 12 ()}
        {Lisp-Entry "get-size" accessor #f 4553 36 4553 44 ()}
        {Lisp-Entry "set-size" accessor #f 4553 36 4553 44 ()}
        {Lisp-Entry "initialize" method #f 4556 20 4556 30 ("size~self" "start~self" "sequence~self" "set!" "nextmethod" "size" "start" "sequence")}
        {Lisp-Entry "print" method #f 4563 20 4563 25 ("system-format" "lambda" "self" "print-unreadable" "print" ":human" "eq?" "if" "size" "+" "start" "sequence" "substring" "str" "let" "detail" "output")}
        {Lisp-Entry "sequence-element" method #f 4572 20 4572 36 ("start" "+" "sequence" "element" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 4576 20 4576 41 ("start" "+" "sequence" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 4580 20 4580 40 ("size")}
        {Lisp-Entry "sequence-subseq!" method #f 4584 20 4584 36 ("cardinality" "-" "start" "+" "sequence" "Subseq$string$" "new" "self" "-1" "0" "=" "or" "if" "e" "s")}}
      {Lisp-Entry "new" specialize #f 4590 20 4590 23 ("Subseq$string$" "construct" "size" "start" "sequence" "class")}
      {Lisp-Entry "element" specialize #f 4594 20 4594 27 ("get-start" "+" "get-sequence" "element" "n" "subseq")}
      {Lisp-Entry "set-element!" specialize #f 4598 20 4598 32 ("get-start" "+" "get-sequence" "set-element!" "obj" "n" "subseq")}
      {Lisp-Entry "cardinality" specialize #f 4602 20 4602 31 ("get-size" "subseq")}
      {Lisp-Entry "subseq!" specialize #f 4606 13 4606 20 ("-" "Subseq$string$" "new" "e" "s" "seq")}
      {Lisp-Entry "subseq!" specialize #f 4610 13 4610 20 ("-" "get-start" "+" "get-sequence" "Subseq$string$" "new" "e" "s" "subseq")}
      {Lisp-Entry "offset-subseq!" specialize #f 4614 13 4614 27 ("get-start" "+" "set-start" "offset" "subseq")}
      {Lisp-Entry "grow-subseq!" specialize #f 4618 13 4618 25 ("get-size" "+" "set-size" "n" "subseq")}}})
"geometry"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "geometry.jazz"} 1257476777
    {Lisp-Entry "jazz.dialect.language.geometry" module #f 37 18 37 48 ("jazz.dialect")
      {Lisp-Entry "error" native #f 49 16 49 26 ()}
      {Lisp-Entry "Cell" class #f 57 7 57 11 ("Numeric")
        {Lisp-Entry "row" slot #f 60 8 60 11 ()}
        {Lisp-Entry "get-row" accessor #f 60 27 60 35 ()}
        {Lisp-Entry "set-row" accessor #f 60 27 60 35 ()}
        {Lisp-Entry "col" slot #f 61 8 61 11 ()}
        {Lisp-Entry "get-col" accessor #f 61 27 61 35 ()}
        {Lisp-Entry "set-col" accessor #f 61 27 61 35 ()}
        {Lisp-Entry "initialize" method #f 64 20 64 30 ("col" "row" "set!" "c" "r")}
        {Lisp-Entry "copy-object" method #f 69 20 69 31 ("col" "row" "Cell" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 73 20 73 34 ("get-col" "col" ":equal" "eq?" "not" "get-row" "row" "compare" "compared" "let" ":incompatible" "Cell" "is-not?" "if" "target")}
        {Lisp-Entry "print" method #f 82 20 82 25 ("col" "row" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" method #f 89 20 89 32 ("self" "error")}
        {Lisp-Entry "numeric-add" method #f 93 20 93 31 ("self" "error" "else" "integer?" "get-col" "col" "get-row" "row" "+" "new" "Cell" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" method #f 99 20 99 34 ("col" "row" "-" "Cell" "new")}
        {Lisp-Entry "numeric-multiply" method #f 103 20 103 36 ("self" "error" "col" "row" "*" "Cell" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" method #f 109 20 109 35 ("self" "error")}
        {Lisp-Entry "increase-row" method #f 113 18 113 30 ("+" "row" "set!" "1" "delta")}
        {Lisp-Entry "increase-col" method #f 117 18 117 30 ("+" "col" "set!" "1" "delta")}}
      {Lisp-Entry "new-cell" definition #f 121 27 121 35 ("Cell" "construct" "col" "row")}
      {Lisp-Entry "new" specialize #f 124 20 124 23 ("new-cell" "col" "row" "class")}
      {Lisp-Entry "copy-cell" specialize #f 128 22 128 31 ()}
      {Lisp-Entry "copy" specialize #f 128 33 128 37 ("get-col" "get-row" "Cell" "new" "c")}
      {Lisp-Entry "cell=" specialize #f 132 22 132 27 ()}
      {Lisp-Entry "=" specialize #f 132 29 132 30 ("get-col" "get-row" "=" "and" "c2" "c1")}
      {Lisp-Entry "cell<" specialize #f 137 15 137 20 ()}
      {Lisp-Entry "<" specialize #f 137 22 137 23 ("get-col" "=" "and" "<" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell<=" specialize #f 145 15 145 21 ()}
      {Lisp-Entry "<=" specialize #f 145 23 145 25 ("get-col" "<=" "=" "and" "<" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell>" specialize #f 153 15 153 20 ()}
      {Lisp-Entry ">" specialize #f 153 22 153 23 ("get-col" "=" "and" ">" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell>=" specialize #f 161 15 161 21 ()}
      {Lisp-Entry ">=" specialize #f 161 23 161 25 ("get-col" ">=" "=" "and" ">" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell+" specialize #f 169 22 169 27 ()}
      {Lisp-Entry "+" specialize #f 169 29 169 30 ("get-col" "get-row" "+" "Cell" "new" "c2" "c1")}
      {Lisp-Entry "+" specialize #f 175 20 175 21 ("get-col" "+" "get-row" "Cell" "new" "n" "c")}
      {Lisp-Entry "cell-" specialize #f 181 22 181 27 ()}
      {Lisp-Entry "-" specialize #f 181 29 181 30 ("get-col" "get-row" "-" "Cell" "new" "c2" "c1")}
      {Lisp-Entry "-" specialize #f 187 20 187 21 ("get-col" "-" "get-row" "Cell" "new" "n" "c")}
      {Lisp-Entry "Range" class #f 198 7 198 12 ("Object")
        {Lisp-Entry "start" slot #f 201 8 201 13 ()}
        {Lisp-Entry "end" slot #f 202 8 202 11 ()}
        {Lisp-Entry "initialize" method #f 205 20 205 30 ("end" "start" "set!" "nextmethod" "e" "s")}
        {Lisp-Entry "copy-object" method #f 211 20 211 31 ("end" "start" "Range" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 215 20 215 34 (":not-equal" "else" ":equal" "get-end" "end" "get-start" "start" "=" "and" ":incompatible" "Range" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 224 20 224 25 ("end" "start" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-start" method #f 231 25 231 34 ("start")}
        {Lisp-Entry "get-end" method #f 235 25 235 32 ("end")}
        {Lisp-Entry "extent" method #f 239 26 239 32 ("start" "end" "-")}
        {Lisp-Entry "extended?" method #f 243 26 243 35 ("end" "start" "=" "not")}
        {Lisp-Entry "empty?" method #f 247 26 247 32 ("end" "start" "=")}
        {Lisp-Entry "inside?" method #f 251 18 251 25 ("end" "<" "start" ">=" "and" "n")}
        {Lisp-Entry "before?" method #f 256 18 256 25 ("start" "<" "n")}
        {Lisp-Entry "after?" method #f 260 18 260 24 ("end" ">" "n")}
        {Lisp-Entry "intersect?" method #f 264 18 264 28 ("start" "get-end" ">=" "end" "get-start" "<" "and" "range")}
        {Lisp-Entry "intersect" method #f 269 18 269 27 ("get-end" "end" "min" "get-start" "start" "max" "self" "class-of" "new" "intersect?" "when" "range")}}
      {Lisp-Entry "new-range" definition #f 274 27 274 36 ("Range" "construct" "end" "start")}
      {Lisp-Entry "new" specialize #f 277 20 277 23 ("new-range" "end" "start" "class")}
      {Lisp-Entry "range=" specialize #f 281 22 281 28 ()}
      {Lisp-Entry "=" specialize #f 281 30 281 31 ("get-end" "get-start" "=" "and" "r2" "r1")}
      {Lisp-Entry "Range$Cell$" class #f 291 7 291 18 ("Object")
        {Lisp-Entry "start" slot #f 294 8 294 13 ()}
        {Lisp-Entry "get-start" accessor #f 294 28 294 36 ()}
        {Lisp-Entry "end" slot #f 295 8 295 11 ()}
        {Lisp-Entry "get-end" accessor #f 295 28 295 36 ()}
        {Lisp-Entry "initialize" method #f 298 20 298 30 ("end" "start" "set!" "nextmethod" "e" "s")}
        {Lisp-Entry "copy-object" method #f 304 20 304 31 ("end" "start" "Range$Cell$" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 308 20 308 34 (":not-equal" "else" ":equal" "get-end" "end" "get-start" "start" "=" "and" ":incompatible" "Range$Cell$" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 317 20 317 25 ("end" "start" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "extent" method #f 324 26 324 32 ("start" "end" "-")}
        {Lisp-Entry "extended?" method #f 328 26 328 35 ("end" "start" "=" "not")}
        {Lisp-Entry "empty?" method #f 332 26 332 32 ("end" "start" "=")}
        {Lisp-Entry "inside?" method #f 336 18 336 25 ("end" "<" "start" ">=" "and" "n")}
        {Lisp-Entry "before?" method #f 341 18 341 25 ("start" "<" "n")}
        {Lisp-Entry "after?" method #f 345 18 345 24 ("end" ">" "n")}
        {Lisp-Entry "intersect?" method #f 349 18 349 28 ("start" "get-end" ">=" "end" "get-start" "<" "and" "range")}
        {Lisp-Entry "intersect" method #f 354 18 354 27 ("get-end" "end" "min" "get-start" "start" "max" "self" "class-of" "new" "intersect?" "when" "range")}}
      {Lisp-Entry "new" specialize #f 359 20 359 23 ("Range$Cell$" "construct" "end" "start" "class")}
      {Lisp-Entry "=" specialize #f 363 20 363 21 ("get-end" "get-start" "=" "and" "r2" "r1")}
      {Lisp-Entry "Point" class #f 373 7 373 12 ("Numeric")
        {Lisp-Entry "h" slot #f 376 8 376 9 ()}
        {Lisp-Entry "get-h" accessor #f 376 22 376 30 ()}
        {Lisp-Entry "v" slot #f 377 8 377 9 ()}
        {Lisp-Entry "get-v" accessor #f 377 22 377 30 ()}
        {Lisp-Entry "initialize" method #f 380 20 380 30 ("v~self" "h~self" "set!" "nextmethod" "v" "h")}
        {Lisp-Entry "copy-object" method #f 386 20 386 31 ("v" "h" "Point" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 390 20 390 34 (":not-equal" "else" ":equal" "get-v" "v" "get-h" "h" "=" "and" "target-point" "let" ":incompatible" "Point" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 400 20 400 25 ("v" "h" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" method #f 406 20 406 32 ("v" "2" "h" "expt" "+" "sqrt")}
        {Lisp-Entry "numeric-add" method #f 410 20 410 31 ("self" "error" "else" "integer?" "get-height" "get-width" "Dimension" "get-v" "v" "get-h" "h" "+" "new" "Point" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" method #f 417 20 417 34 ("v" "h" "-" "Point" "new")}
        {Lisp-Entry "numeric-multiply" method #f 421 20 421 36 ("self" "error" "v" "h" "*" "Point" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" method #f 427 20 427 35 ("self" "error")}}
      {Lisp-Entry "new-point" definition #f 431 27 431 36 ("Point" "construct" "v" "h")}
      {Lisp-Entry "new" specialize #f 434 20 434 23 ("new-point" "v" "h" "class")}
      {Lisp-Entry "point=" specialize #f 438 22 438 28 ()}
      {Lisp-Entry "=" specialize #f 438 30 438 31 ("get-v" "get-h" "=" "and" "p2" "p1")}
      {Lisp-Entry "point+" specialize #f 443 22 443 28 ()}
      {Lisp-Entry "+" specialize #f 443 30 443 31 ("get-v" "get-h" "+" "Point" "new" "p2" "p1")}
      {Lisp-Entry "+" specialize #f 449 20 449 21 ("get-v" "get-h" "+" "Point" "new" "n" "p")}
      {Lisp-Entry "point-" specialize #f 455 22 455 28 ()}
      {Lisp-Entry "-" specialize #f 455 30 455 31 ("get-v" "get-h" "-" "Point" "new" "p2" "p1")}
      {Lisp-Entry "-" specialize #f 461 20 461 21 ("get-v" "get-h" "-" "Point" "new" "n" "p")}
      {Lisp-Entry "-" specialize #f 467 20 467 21 ("get-v" "get-h" "-" "Point" "new" "p")}
      {Lisp-Entry "point*" specialize #f 473 22 473 28 ()}
      {Lisp-Entry "*" specialize #f 473 30 473 31 ("get-v" "get-h" "*" "Point" "new" "n" "p")}
      {Lisp-Entry "Dimension" class #f 484 7 484 16 ("Numeric")
        {Lisp-Entry "width" slot #f 487 8 487 13 ()}
        {Lisp-Entry "get-width" accessor #f 487 27 487 35 ()}
        {Lisp-Entry "height" slot #f 488 8 488 14 ()}
        {Lisp-Entry "get-height" accessor #f 488 27 488 35 ()}
        {Lisp-Entry "initialize" method #f 491 20 491 30 ("height" "width" "set!" "nextmethod" "h" "w")}
        {Lisp-Entry "copy-object" method #f 497 20 497 31 ("height" "width" "Dimension" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 501 20 501 34 ("get-height" "height" ":equal" "neq?" "get-width" "width" "compare" "compared" "let" ":incompatible" "Dimension" "is-not?" "if" "target")}
        {Lisp-Entry "print" method #f 510 20 510 25 ("height" "width" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" method #f 516 20 516 32 ("self" "error")}
        {Lisp-Entry "numeric-add" method #f 520 20 520 31 ("self" "error" "else" "integer?" "get-v" "get-h" "Point" "get-height" "height" "get-width" "width" "+" "new" "Dimension" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" method #f 527 20 527 34 ("height" "width" "-" "Dimension" "new")}
        {Lisp-Entry "numeric-multiply" method #f 531 20 531 36 ("self" "error" "height" "width" "*" "Dimension" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" method #f 537 20 537 35 ("self" "error")}}
      {Lisp-Entry "new-dimension" definition #f 541 27 541 40 ("Dimension" "construct" "height" "width")}
      {Lisp-Entry "new" specialize #f 544 20 544 23 ("new-dimension" "height" "width" "class")}
      {Lisp-Entry "dimension=" specialize #f 548 22 548 32 ()}
      {Lisp-Entry "=" specialize #f 548 34 548 35 ("get-height" "get-width" "=" "and" "d2" "d1")}
      {Lisp-Entry "dimension+" specialize #f 553 22 553 32 ()}
      {Lisp-Entry "+" specialize #f 553 34 553 35 ("get-height" "get-width" "+" "Dimension" "new" "d2" "d1")}
      {Lisp-Entry "dimension-" specialize #f 559 22 559 32 ()}
      {Lisp-Entry "-" specialize #f 559 34 559 35 ("get-height" "get-width" "-" "Dimension" "new" "d2" "d1")}
      {Lisp-Entry "dimension*" specialize #f 565 22 565 32 ()}
      {Lisp-Entry "*" specialize #f 565 34 565 35 ("get-height" "get-width" "*" "Dimension" "new" "n" "d")}
      {Lisp-Entry "Rect-Class" class #f 576 7 576 17 ("Class")
        {Lisp-Entry "coerce-object" method #f 579 20 579 33 ("nextmethod" "else" "0" "get-v" "get-h" "Rect" "new" "Point" "typecase" "object")}}
      {Lisp-Entry "Rect" class #f 585 7 585 11 ("Object" "Rect-Class")
        {Lisp-Entry "left" slot #f 589 8 589 12 ()}
        {Lisp-Entry "get-left" accessor #f 589 34 589 42 ()}
        {Lisp-Entry "set-left" accessor #f 589 34 589 42 ()}
        {Lisp-Entry "top" slot #f 590 8 590 11 ()}
        {Lisp-Entry "get-top" accessor #f 590 34 590 42 ()}
        {Lisp-Entry "set-top" accessor #f 590 34 590 42 ()}
        {Lisp-Entry "right" slot #f 591 8 591 13 ()}
        {Lisp-Entry "get-right" accessor #f 591 34 591 42 ()}
        {Lisp-Entry "set-right" accessor #f 591 34 591 42 ()}
        {Lisp-Entry "bottom" slot #f 592 8 592 14 ()}
        {Lisp-Entry "get-bottom" accessor #f 592 34 592 42 ()}
        {Lisp-Entry "set-bottom" accessor #f 592 34 592 42 ()}
        {Lisp-Entry "initialize" method #f 595 20 595 30 ("bottom" "right" "top" "left" "set!" "nextmethod" "b" "r" "t" "l")}
        {Lisp-Entry "copy-object" method #f 603 20 603 31 ("bottom" "right" "top" "left" "Rect" "new" "deep?")}
        {Lisp-Entry "compare-object" method #f 607 20 607 34 (":not-equal" "else" ":equal" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "=" "and" ":incompatible" "Rect" "is-not?" "cond" "target")}
        {Lisp-Entry "print" method #f 616 20 616 25 ("bottom" "right" "top" "left" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "new-rect" definition #f 625 27 625 35 ("Rect" "construct" "bottom" "right" "top" "left")}
      {Lisp-Entry "new" specialize #f 628 20 628 23 ("new-rect" "bottom" "right" "top" "left" "class")}
      {Lisp-Entry "rect=" specialize #f 632 22 632 27 ()}
      {Lisp-Entry "=" specialize #f 632 29 632 30 ("get-bottom" "get-right" "get-top" "get-left" "=" "and" "r2" "r1")}}})
"homogeneous"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "homogeneous.jazz"} 1257476780
    {Lisp-Entry "jazz.dialect.language.homogeneous" module #f 37 18 37 51 ("jazz.dialect")
      {Lisp-Entry "S8Vector-Class" class #f 53 7 53 21 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 56 20 56 37 ("make-s8vector" "len")}}
      {Lisp-Entry "S8Vector" class #f 60 17 60 25 ("Sequence" "S8Vector-Class")
        {Lisp-Entry "initialize" method #f 63 20 63 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 68 11 68 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 74 20 74 36 ("self" "s8vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 78 20 78 41 ("self" "s8vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 82 20 82 40 ("self" "s8vector-length")}
        {Lisp-Entry "sequence-tail" method #f 86 20 86 33 ("self" "s8vector->list" "tail" "list->s8vector" "n")}
        {Lisp-Entry "sequence-last" method #f 90 20 90 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 94 20 94 36 ("self" "s8vector->list" "butlast" "list->s8vector")}}
      {Lisp-Entry "element" specialize #f 98 20 98 27 ("s8vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 102 20 102 32 ("s8vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 106 20 106 31 ("s8vector-length" "vector")}
      {Lisp-Entry "U8Vector-Class" class #f 115 7 115 21 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 118 20 118 37 ("make-u8vector" "len")}}
      {Lisp-Entry "U8Vector" class #f 122 17 122 25 ("Sequence" "U8Vector-Class")
        {Lisp-Entry "initialize" method #f 125 20 125 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 130 11 130 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 136 20 136 36 ("self" "u8vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 140 20 140 41 ("self" "u8vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 144 20 144 40 ("self" "u8vector-length")}
        {Lisp-Entry "sequence-tail" method #f 148 20 148 33 ("self" "u8vector->list" "tail" "list->u8vector" "n")}
        {Lisp-Entry "sequence-last" method #f 152 20 152 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 156 20 156 36 ("self" "u8vector->list" "butlast" "list->u8vector")}}
      {Lisp-Entry "element" specialize #f 160 20 160 27 ("u8vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 164 20 164 32 ("u8vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 168 20 168 31 ("u8vector-length" "vector")}
      {Lisp-Entry "S16Vector-Class" class #f 177 7 177 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 180 20 180 37 ("make-s16vector" "len")}}
      {Lisp-Entry "S16Vector" class #f 184 17 184 26 ("Sequence" "S16Vector-Class")
        {Lisp-Entry "initialize" method #f 187 20 187 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 192 11 192 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 198 20 198 36 ("self" "s16vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 202 20 202 41 ("self" "s16vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 206 20 206 40 ("self" "s16vector-length")}
        {Lisp-Entry "sequence-tail" method #f 210 20 210 33 ("self" "s16vector->list" "tail" "list->s16vector" "n")}
        {Lisp-Entry "sequence-last" method #f 214 20 214 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 218 20 218 36 ("self" "s16vector->list" "butlast" "list->s16vector")}}
      {Lisp-Entry "element" specialize #f 222 20 222 27 ("s16vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 226 20 226 32 ("s16vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 230 20 230 31 ("s16vector-length" "vector")}
      {Lisp-Entry "U16Vector-Class" class #f 239 7 239 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 242 20 242 37 ("make-u16vector" "len")}}
      {Lisp-Entry "U16Vector" class #f 246 17 246 26 ("Sequence" "U16Vector-Class")
        {Lisp-Entry "initialize" method #f 249 20 249 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 254 11 254 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 260 20 260 36 ("self" "u16vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 264 20 264 41 ("self" "u16vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 268 20 268 40 ("self" "u16vector-length")}
        {Lisp-Entry "sequence-tail" method #f 272 20 272 33 ("self" "u16vector->list" "tail" "list->u16vector" "n")}
        {Lisp-Entry "sequence-last" method #f 276 20 276 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 280 20 280 36 ("self" "u16vector->list" "butlast" "list->u16vector")}}
      {Lisp-Entry "element" specialize #f 284 20 284 27 ("u16vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 288 20 288 32 ("u16vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 292 20 292 31 ("u16vector-length" "vector")}
      {Lisp-Entry "S32Vector-Class" class #f 301 7 301 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 304 20 304 37 ("make-s32vector" "len")}}
      {Lisp-Entry "S32Vector" class #f 308 17 308 26 ("Sequence" "S32Vector-Class")
        {Lisp-Entry "initialize" method #f 311 20 311 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 316 11 316 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 322 20 322 36 ("self" "s32vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 326 20 326 41 ("self" "s32vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 330 20 330 40 ("self" "s32vector-length")}
        {Lisp-Entry "sequence-tail" method #f 334 20 334 33 ("self" "s32vector->list" "tail" "list->s32vector" "n")}
        {Lisp-Entry "sequence-last" method #f 338 20 338 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 342 20 342 36 ("self" "s32vector->list" "butlast" "list->s32vector")}}
      {Lisp-Entry "element" specialize #f 346 20 346 27 ("s32vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 350 20 350 32 ("s32vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 354 20 354 31 ("s32vector-length" "vector")}
      {Lisp-Entry "U32Vector-Class" class #f 363 7 363 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 366 20 366 37 ("make-u32vector" "len")}}
      {Lisp-Entry "U32Vector" class #f 370 17 370 26 ("Sequence" "U32Vector-Class")
        {Lisp-Entry "initialize" method #f 373 20 373 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 378 11 378 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 384 20 384 36 ("self" "u32vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 388 20 388 41 ("self" "u32vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 392 20 392 40 ("self" "u32vector-length")}
        {Lisp-Entry "sequence-tail" method #f 396 20 396 33 ("self" "u32vector->list" "tail" "list->u32vector" "n")}
        {Lisp-Entry "sequence-last" method #f 400 20 400 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 404 20 404 36 ("self" "u32vector->list" "butlast" "list->u32vector")}}
      {Lisp-Entry "element" specialize #f 408 20 408 27 ("u32vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 412 20 412 32 ("u32vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 416 20 416 31 ("u32vector-length" "vector")}
      {Lisp-Entry "S64Vector-Class" class #f 425 7 425 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 428 20 428 37 ("make-s64vector" "len")}}
      {Lisp-Entry "S64Vector" class #f 432 17 432 26 ("Sequence" "S64Vector-Class")
        {Lisp-Entry "initialize" method #f 435 20 435 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 440 11 440 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 446 20 446 36 ("self" "s64vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 450 20 450 41 ("self" "s64vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 454 20 454 40 ("self" "s64vector-length")}
        {Lisp-Entry "sequence-tail" method #f 458 20 458 33 ("self" "s64vector->list" "tail" "list->s64vector" "n")}
        {Lisp-Entry "sequence-last" method #f 462 20 462 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 466 20 466 36 ("self" "s64vector->list" "butlast" "list->s64vector")}}
      {Lisp-Entry "element" specialize #f 470 20 470 27 ("s64vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 474 20 474 32 ("s64vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 478 20 478 31 ("s64vector-length" "vector")}
      {Lisp-Entry "U64Vector-Class" class #f 487 7 487 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 490 20 490 37 ("make-u64vector" "len")}}
      {Lisp-Entry "U64Vector" class #f 494 17 494 26 ("Sequence" "U64Vector-Class")
        {Lisp-Entry "initialize" method #f 497 20 497 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 502 11 502 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 508 20 508 36 ("self" "u64vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 512 20 512 41 ("self" "u64vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 516 20 516 40 ("self" "u64vector-length")}
        {Lisp-Entry "sequence-tail" method #f 520 20 520 33 ("self" "u64vector->list" "tail" "list->u64vector" "n")}
        {Lisp-Entry "sequence-last" method #f 524 20 524 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 528 20 528 36 ("self" "u64vector->list" "butlast" "list->u64vector")}}
      {Lisp-Entry "element" specialize #f 532 20 532 27 ("u64vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 536 20 536 32 ("u64vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 540 20 540 31 ("u64vector-length" "vector")}
      {Lisp-Entry "F32Vector-Class" class #f 549 7 549 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 552 20 552 37 ("make-f32vector" "len")}}
      {Lisp-Entry "F32Vector" class #f 556 17 556 26 ("Sequence" "F32Vector-Class")
        {Lisp-Entry "initialize" method #f 559 20 559 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 564 11 564 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 570 20 570 36 ("self" "f32vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 574 20 574 41 ("self" "f32vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 578 20 578 40 ("self" "f32vector-length")}
        {Lisp-Entry "sequence-tail" method #f 582 20 582 33 ("self" "f32vector->list" "tail" "list->f32vector" "n")}
        {Lisp-Entry "sequence-last" method #f 586 20 586 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 590 20 590 36 ("self" "f32vector->list" "butlast" "list->f32vector")}}
      {Lisp-Entry "element" specialize #f 594 20 594 27 ("f32vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 598 20 598 32 ("f32vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 602 20 602 31 ("f32vector-length" "vector")}
      {Lisp-Entry "F64Vector-Class" class #f 611 7 611 22 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" method #f 614 20 614 37 ("make-f64vector" "len")}}
      {Lisp-Entry "F64Vector" class #f 618 17 618 26 ("Sequence" "F64Vector-Class")
        {Lisp-Entry "initialize" method #f 621 20 621 30 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" method #f 626 11 626 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" method #f 632 20 632 36 ("self" "f64vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" method #f 636 20 636 41 ("self" "f64vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" method #f 640 20 640 40 ("self" "f64vector-length")}
        {Lisp-Entry "sequence-tail" method #f 644 20 644 33 ("self" "f64vector->list" "tail" "list->f64vector" "n")}
        {Lisp-Entry "sequence-last" method #f 648 20 648 33 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" method #f 652 20 652 36 ("self" "f64vector->list" "butlast" "list->f64vector")}}
      {Lisp-Entry "element" specialize #f 656 20 656 27 ("f64vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" specialize #f 660 20 660 32 ("f64vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" specialize #f 664 20 664 31 ("f64vector-length" "vector")}}})
"increase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "increase.scm"} 1257476780
    {Lisp-Entry "jazz.dialect.syntax.increase" module #f 37 18 37 46 ("scheme")
      {Lisp-Entry "increase!" macro #f 46 16 46 25 (",increment" "+" ",location" "set!" "car" "1" "null?" "if" "increment" "cddr" "rest" "source-code" "cadr" "location" "let" "form-src")}
      {Lisp-Entry "decrease!" macro #f 56 16 56 25 (",increment" "-" ",location" "set!" "car" "1" "null?" "if" "increment" "cddr" "rest" "source-code" "cadr" "location" "let" "form-src")}}})
"install"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "install.scm"} 1257478909
    {Lisp-Entry "jazz.install" unit #f 37 6 37 18 ("jazz.jazz-readtable" "'jazz.jazz-readtable" "jazz.global-value" "jazz.dialect" "'jazz.dialect" "core.module" "'core.module" "jazz.load-unit" "lambda" "jazz.register-reader-extension")
      {Lisp-Entry "Point" define ("literal") 45 21 45 26 ("jazz.literals.construct-point")}
      {Lisp-Entry "Dimension" define ("literal") 46 21 46 30 ("jazz.literals.construct-dimension")}
      {Lisp-Entry "Cell" define ("literal") 47 21 47 25 ("jazz.literals.construct-cell")}
      {Lisp-Entry "Rect" define ("literal") 48 21 48 25 ("jazz.literals.construct-rect")}
      {Lisp-Entry "Range" define ("literal") 49 21 49 26 ("jazz.literals.construct-range")}
      {Lisp-Entry "Exception-Detail" define ("literal") 50 21 50 37 ("jazz.literals.construct-exception-detail")}
      {Lisp-Entry "Walk-Location" define ("literal") 51 21 51 34 ("jazz.literals.construct-walk-location")}}})
"jazz"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "walker" "jazz.jazz"} 1257476780
    {Lisp-Entry "jazz.dialect.walker.jazz" module #f 37 18 37 42 ("jazz.dialect")
      {Lisp-Entry "Definition-Declaration" class #f 49 7 49 29 ("Declaration")
        {Lisp-Entry "expansion" slot #f 52 8 52 17 ()}
        {Lisp-Entry "get-expansion" accessor #f 52 25 52 33 ()}
        {Lisp-Entry "signature" slot #f 53 8 53 17 ()}
        {Lisp-Entry "get-signature" accessor #f 53 25 53 33 ()}
        {Lisp-Entry "value" slot #f 54 8 54 13 ()}
        {Lisp-Entry "get-value" accessor #f 54 25 54 33 ()}}
      {Lisp-Entry "Specialize" class #f 62 7 62 17 ("Expression")}
      {Lisp-Entry "Generic-Declaration" class #f 70 7 70 26 ("Declaration")
        {Lisp-Entry "dispatch-types" slot #f 73 8 73 22 ()}
        {Lisp-Entry "get-dispatch-types" accessor #f 73 30 73 38 ()}
        {Lisp-Entry "signature" slot #f 74 8 74 17 ()}
        {Lisp-Entry "get-signature" accessor #f 74 30 74 38 ()}
        {Lisp-Entry "body" slot #f 75 8 75 12 ()}
        {Lisp-Entry "get-body" accessor #f 75 30 75 38 ()}}
      {Lisp-Entry "Specific-Declaration" class #f 83 7 83 27 ("Declaration")
        {Lisp-Entry "generic" slot #f 86 8 86 15 ()}
        {Lisp-Entry "get-generic" accessor #f 86 25 86 33 ()}
        {Lisp-Entry "signature" slot #f 87 8 87 17 ()}
        {Lisp-Entry "get-signature" accessor #f 87 25 87 33 ()}
        {Lisp-Entry "body" slot #f 88 8 88 12 ()}
        {Lisp-Entry "get-body" accessor #f 88 25 88 33 ()}
        {Lisp-Entry "root?" slot #f 89 8 89 13 ()}
        {Lisp-Entry "get-root?" accessor #f 89 25 89 33 ()}}
      {Lisp-Entry "Category-Declaration" class #f 97 7 97 27 ("Namespace-Declaration")
        {Lisp-Entry "implementor" slot #f 100 8 100 19 ()}
        {Lisp-Entry "get-implementor" accessor #f 100 27 100 35 ()}
        {Lisp-Entry "metaclass" slot #f 101 8 101 17 ()}
        {Lisp-Entry "get-metaclass" accessor #f 101 27 101 35 ()}}
      {Lisp-Entry "Class-Declaration" class #f 109 7 109 24 ("Category-Declaration")
        {Lisp-Entry "ascendant" slot #f 112 8 112 17 ()}
        {Lisp-Entry "get-ascendant" accessor #f 112 34 112 42 ()}
        {Lisp-Entry "ascendant-relation" slot #f 113 8 113 26 ()}
        {Lisp-Entry "get-ascendant-relation" accessor #f 113 34 113 42 ()}
        {Lisp-Entry "ascendant-base" slot #f 114 8 114 22 ()}
        {Lisp-Entry "get-ascendant-base" accessor #f 114 34 114 42 ()}
        {Lisp-Entry "interfaces" slot #f 115 8 115 18 ()}
        {Lisp-Entry "get-interfaces" accessor #f 115 34 115 42 ()}}
      {Lisp-Entry "Interface-Declaration" class #f 123 7 123 28 ("Category-Declaration")
        {Lisp-Entry "ascendants" slot #f 126 8 126 18 ()}
        {Lisp-Entry "get-ascendants" accessor #f 126 26 126 34 ()}}
      {Lisp-Entry "Field-Declaration" class #f 134 7 134 24 ("Declaration")}
      {Lisp-Entry "Slot-Declaration" class #f 142 7 142 23 ("Field-Declaration")
        {Lisp-Entry "initialize" slot #f 145 8 145 18 ()}
        {Lisp-Entry "get-initialize" accessor #f 145 27 145 35 ()}
        {Lisp-Entry "getter-name" slot #f 146 8 146 19 ()}
        {Lisp-Entry "get-getter-name" accessor #f 146 27 146 35 ()}
        {Lisp-Entry "setter-name" slot #f 147 8 147 19 ()}
        {Lisp-Entry "get-setter-name" accessor #f 147 27 147 35 ()}}
      {Lisp-Entry "Property-Declaration" class #f 155 7 155 27 ("Slot-Declaration")
        {Lisp-Entry "getter" slot #f 158 8 158 14 ()}
        {Lisp-Entry "get-getter" accessor #f 158 22 158 30 ()}
        {Lisp-Entry "setter" slot #f 159 8 159 14 ()}
        {Lisp-Entry "get-setter" accessor #f 159 22 159 30 ()}}
      {Lisp-Entry "Method-Declaration" class #f 167 7 167 25 ("Field-Declaration")
        {Lisp-Entry "root" slot #f 170 8 170 12 ()}
        {Lisp-Entry "get-root" accessor #f 170 28 170 36 ()}
        {Lisp-Entry "propagation" slot #f 171 8 171 19 ()}
        {Lisp-Entry "get-propagation" accessor #f 171 28 171 36 ()}
        {Lisp-Entry "abstraction" slot #f 172 8 172 19 ()}
        {Lisp-Entry "get-abstraction" accessor #f 172 28 172 36 ()}
        {Lisp-Entry "expansion" slot #f 173 8 173 17 ()}
        {Lisp-Entry "get-expansion" accessor #f 173 28 173 36 ()}
        {Lisp-Entry "remote" slot #f 174 8 174 14 ()}
        {Lisp-Entry "get-remote" accessor #f 174 28 174 36 ()}
        {Lisp-Entry "synchronized" slot #f 175 8 175 20 ()}
        {Lisp-Entry "get-synchronized" accessor #f 175 28 175 36 ()}
        {Lisp-Entry "signature" slot #f 176 8 176 17 ()}
        {Lisp-Entry "get-signature" accessor #f 176 28 176 36 ()}
        {Lisp-Entry "body" slot #f 177 8 177 12 ()}
        {Lisp-Entry "get-body" accessor #f 177 28 177 36 ()}}
      {Lisp-Entry "With-Self" class #f 185 7 185 16 ("Expression")
        {Lisp-Entry "body" slot #f 188 8 188 12 ()}
        {Lisp-Entry "get-body" accessor #f 188 20 188 28 ()}}
      {Lisp-Entry "With-Dynamic-Self" class #f 196 7 196 24 ("Expression")
        {Lisp-Entry "code" slot #f 199 8 199 12 ()}
        {Lisp-Entry "get-code" accessor #f 199 20 199 28 ()}
        {Lisp-Entry "body" slot #f 200 8 200 12 ()}
        {Lisp-Entry "get-body" accessor #f 200 20 200 28 ()}}
      {Lisp-Entry "Cast" class #f 208 7 208 11 ("Expression")
        {Lisp-Entry "expression" slot #f 211 8 211 18 ()}
        {Lisp-Entry "get-expression" accessor #f 211 26 211 34 ()}}
      {Lisp-Entry "Construct" class #f 219 7 219 16 ("Expression")
        {Lisp-Entry "class" slot #f 222 8 222 13 ()}
        {Lisp-Entry "get-class" accessor #f 222 22 222 30 ()}
        {Lisp-Entry "values" slot #f 223 8 223 14 ()}
        {Lisp-Entry "get-values" accessor #f 223 22 223 30 ()}}
      {Lisp-Entry "Dispatch" class #f 231 7 231 15 ("Expression")
        {Lisp-Entry "name" slot #f 234 8 234 12 ()}
        {Lisp-Entry "get-name" accessor #f 234 25 234 33 ()}
        {Lisp-Entry "arguments" slot #f 235 8 235 17 ()}
        {Lisp-Entry "get-arguments" accessor #f 235 25 235 33 ()}}
      {Lisp-Entry "Jazz-Dialect" class #f 243 7 243 19 ("Dialect")}
      {Lisp-Entry "Jazz-Walker" class #f 251 7 251 18 ("Scheme-Walker")}}})
"list"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "list.scm"} 1257473852
    {Lisp-Entry "jazz.dialect.core.list" unit #f 37 16 37 38 ()
      {Lisp-Entry "jazz.proper-list" define #f 40 9 40 25 ("jazz.queue-list" "%%cdr" "set!" "%%car" "jazz.enqueue" "%%pair?" "%%while" "jazz.new-queue" "proper" "let" "lst")}}})
"literals"
 ({Lisp-File-Entry {File jazz "src" "jazz" "literals.jazz"} 1257476782
    {Lisp-Entry "jazz.literals" module #f 37 8 37 21 ("jazz")
      {Lisp-Entry "construct-point" definition #f 45 21 45 36 ("Point" "new" "v" "h")}
      {Lisp-Entry "construct-dimension" definition #f 49 21 49 40 ("Dimension" "new" "height" "width")}
      {Lisp-Entry "construct-cell" definition #f 53 21 53 35 ("Cell" "new" "col" "row")}
      {Lisp-Entry "construct-rect" definition #f 57 21 57 35 ("Rect" "new" "bottom" "right" "top" "left")}
      {Lisp-Entry "construct-range" definition #f 61 21 61 36 ("Range" "new" "end" "start")}
      {Lisp-Entry "construct-exception-detail" definition #f 70 21 70 47 ("Exception-Detail" "new" "children" "location" "title" "icon")}
      {Lisp-Entry "construct-walk-location" definition #f 79 21 79 44 ("Walk-Location" "new" "locat" "declaration-locator" "unit-locator")}}})
"loop"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "loop.scm"} 1257476786
    {Lisp-Entry "jazz.dialect.syntax.loop" module #f 37 18 37 42 ("scheme")
      {Lisp-Entry "->string" native #f 47 16 47 29 ()}
      {Lisp-Entry "error" native #f 48 16 48 26 ()}
      {Lisp-Entry "loop" macro #f 135 16 135 20 ("expand-loop" "sourcify-if" "source-code" "cdr" "clauses" "let" "form-src")}
      {Lisp-Entry "noobject" define #f 142 8 142 16 ("noobject" "'noobject" "list")}
      {Lisp-Entry "expand-loop" define #f 146 9 146 20 ("set-cdr!" "'set-cdr!" "'begin" "jazz.null?" "'jazz.null?" "'cons" "'<list+>" "'<list>" "cns" "ptr" ",@unless-actions" "unless-actions" ",@when-actions" ",test" "when-actions" "body" "'when" "res" "what" ">" "'>" "rpt" "count" "specifier?" "then" "then-key" "first" "symbol?" "end" "decrease!" "'decrease!" ">=" "'>=" "downto" "below" "cddr" "<=" "'<=" "cadr" "scan" "by" "'increase!" "update" "to" "from" "in-properties" "get-next" "'get-next" "done?" "'done?" "iterate-sequence" "'iterate-sequence" "Iterator" "'Iterator" "is?" "'is?" "'if" "'<Iterator>" "itr" "val" "iterator" "in-sequence" "1" "+" "'+" "element" "'element" "<" "'<" "length" "'length" "'<fx>" "'<vector>" "len" "vec" "vector" "in-vector" "error" "remainder" "keyword" "'cdr" "'car" "'set!" "'null?" "either" "'<Object>" "in" "parse-for" "receive" "lst" "set-finally" "expr" "add-epilogue" "after" "add-after" "enqueue-list" "action-list" "add-actions" "action" "before" "add-before" "test" "add-test" "exit-safe" "values" "'not" "add-initial-test" "'<bool>" "'<Object+>" "ext" "ret" "get-return/exit" "add-with" "append" "list" "binding" "null?" "value" "type" "variable" "add-binding" "cons" "Unbound" "increase!" "->string" "string-append" "string->symbol" "symbol" "prefix" "unique" ",@finally" "begin" ",return" ",exit" "eq?" ",@epilogue" ",@afters" ",@actions" ",withs" ",@befores" ",@tests" "and" ",bindings" "let*" "queue-list" "cdr" "else" "process-finally" "process-return" "process-collect" "collect" "process-sum" "sum" "process-do" "do" "process-unless" "unless" "process-when" "when" "process-every" "every" "process-some" "some" "process-repeat" "repeat" "process-for" "for" "process-with" "with" "case" "rest" "key" "bind" "add-action" "source-code" "pair?" "not" "if" "car" "clause" "not-null?" "while" "new-queue" "expand-loop" "process-clauses" "set!" "expand" "define" "0" "unique-rank" "finally" "epilogue" "afters" "actions" "befores" "withs" "tests" "exit" "noobject" "return" "bindings" "let" "clauses")}}})
"macros"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "macros.scm"} 1257476786
    {Lisp-Entry "jazz.dialect.syntax.macros" module #f 37 18 37 44 ("scheme")
      {Lisp-Entry "->string" native #f 44 16 44 29 ()}
      {Lisp-Entry "error" native #f 45 16 45 26 ()}
      {Lisp-Entry "constant" macro #f 48 16 48 24 (",value" ",name" "public" "definition" "sourcify-if" "caddr" "value" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "enumeration" macro #f 56 16 56 27 (",@definitions" "begin" "public" "definition" "declaration" "lambda" "map" "definitions" "sourcify-if" "cddr" "declarations" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "when" macro #f 65 16 65 20 ("unspecified" "'unspecified" "list" "null?" "begin" ",test" "if" "sourcify-if" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "unless" macro #f 96 16 96 22 (",@body" "begin" ",test" "not" "if" "sourcify-if" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "prog1" macro #f 113 16 113 21 (",@body" "begin" ",returned" ",value" "sourcify-if" "generate-symbol" "value" "cddr" "body" "source-code" "cadr" "returned" "let" "form-src")}
      {Lisp-Entry "while" macro #f 133 16 133 21 (",@body" "begin" ",test" "if" ",iter" "sourcify-if" "generate-symbol" "iter" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "unwind-protect" macro #f 157 16 157 30 (",@protection" ",body" "lambda" "dynamic-wind" "sourcify-if" "cddr" "protection" "source-code" "cadr" "body" "let" "form-src")}
      {Lisp-Entry "catch" macro #f 179 16 179 21 ("desourcify" "error" "else" "car" "pair?" ",@body" "exc" "lambda" ",predicate/type" "call-with-catch" "symbol?" "cond" "sourcify-if" "cddr" "body" "source-code" "cadr" "predicate/type" "let" "form-src")}
      {Lisp-Entry "~" macro #f 196 16 196 17 (",name" "',name" ",obj" "dispatch" "apply" "rest" "obj" "lambda" "with-uniqueness" "sourcify-if" "cddr" "car" "object" "cadr" "source-code" "name" "let" "form-src")}
      {Lisp-Entry "form>>" macro #f 207 15 207 21 (",form" "',form" "jml->form" "form")}
      {Lisp-Entry "expand-push!" define #f 213 9 213 21 ("cons" "'cons" "set!" "'set!" "list" "value" "location")}
      {Lisp-Entry "expand-pop!" define #f 219 9 219 20 ("cdr" "'cdr" "set!" "'set!" "list" "location")}
      {Lisp-Entry "expand-assert" define #f 223 9 223 22 ("proc" "car" "error" "'error" "unless" "'unless" "list" ":text" "->string" "string-append" "message" "expr" "let*" "null?" "if" "rest" "first")}
      {Lisp-Entry "expand-assert-type" define #f 234 9 234 27 ("type-name" "'type-name" "error" "'error" "is-not?" "'is-not?" "when" "'when" "list" "let*" "'let*" "cons" "generate-symbol" "value" "let" "type" "expr")}
      {Lisp-Entry "expand-error?" define #f 242 9 242 22 ("begin" "'begin" "cons" "Error" "'Error" "catch" "'catch" "list" "generate-symbol" "err" "let" "body")}
      {Lisp-Entry "c-constant" macro #f 255 16 255 26 (",value" ",name" "public" "definition" "sourcify-if" "caddr" "value" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "c-enumeration" macro #f 263 16 263 29 (",@definitions" "begin" "public" "definition" "declaration" "lambda" "map" "definitions" "sourcify-if" "cddr" "declarations" "source-code" "cadr" "name" "let" "form-src")}}})
"memory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "memory.scm"} 1257473853
    {Lisp-Entry "jazz.dialect.core.memory" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.gc" define #f 40 9 40 16 ("%%gc")}
      {Lisp-Entry "jazz.process-memory" define #f 49 9 49 28 ("inexact->exact" "values" "19" "nonmovable" "18" "movable" "17" "live" "16" "alloc" "15" "f64vector-ref" "heap" "##process-statistics" "vec" "let")}
      {Lisp-Entry "jazz.symbols-memory" define #f 62 9 62 28 ("values" "##symbol-table" "%%vector->list" "%%reverse" "%%cons" "2" "%%vector-ref" "%%symbol?" "if" "loop" "map" "%%symbol->string" "%%string-length" "s" "%%length" "%%fx+" "set!" "lst" "lambda" "for-each" "chars" "0" "count" "let")}
      {Lisp-Entry "jazz.classes-statistics" define #f 84 9 84 32 ("values" "jazz.Object" "method" "slot" "for-each" "process-method" "jazz.Method" "process-slot" "jazz.Slot" "jazz.is?" "cond" "field" "name" "lambda" "%%iterate-table" "%%get-class-interface-table" "%%get-class-class-table" "jazz.vector-vector-size" "%%get-class-core-vtable" "%%get-class-instance-slots" "%%get-class-interfaces" "%%get-category-descendants" "jazz.list-size" "%%get-category-ancestors" "%%get-category-fields" "jazz.table-size" "jazz.vector-size" "fx+" "1" "%%fx+" "set!" "class" "process-class" "define" "sz-methods" "nb-methods" "sz-slots" "nb-slots" "sz-interfaces" "nb-interfaces" "sz-classes" "0" "nb-classes" "let")}
      {Lisp-Entry "jazz.class-instances-count" define #f 128 9 128 35 ("%%get-category-descendants" "for-each" "%%get-category-name" "jazz.instances-statistics" "%%table-ref" "%%fx+" "set!" "iter" "0" "count" "let" "class")}
      {Lisp-Entry "jazz.class-instances-size" define #f 136 9 136 34 ("%%get-category-descendants" "for-each" "%%get-class-instance-size" "%%get-category-name" "jazz.instances-statistics" "%%table-ref" "%%fx*" "%%fx+" "set!" "iter" "0" "size" "let" "class")}
      {Lisp-Entry "jazz.word-bytes" define #f 150 8 150 23 ("4")}
      {Lisp-Entry "jazz.f64-bytes" define #f 151 8 151 22 ("8")}
      {Lisp-Entry "jazz.pair-bytes" define #f 152 8 152 23 ("12")}
      {Lisp-Entry "jazz.table-bytes" define #f 153 8 153 24 ("32")}
      {Lisp-Entry "jazz.vector-size" define #f 156 9 156 25 ("%%vector-length" "%%fx*" "jazz.word-bytes" "%%fx+" "v")}
      {Lisp-Entry "jazz.safe-vector-size" define #f 159 9 159 30 ("0" "jazz.vector-size" "%%vector?" "if" "v")}
      {Lisp-Entry "jazz.f64vector-size" define #f 164 9 164 28 ("f64vector-length" "jazz.f64-bytes" "%%fx*" "jazz.word-bytes" "%%fx+" "v")}
      {Lisp-Entry "jazz.vector-vector-size" define #f 167 9 167 32 ("1" "%%vector-ref" "%%vector-length" "%%fx<" "size" "n" "iter" "let" "jazz.vector-size" "%%fx+" "0" "%%not" "if" "v")}
      {Lisp-Entry "jazz.list-size" define #f 177 9 177 23 ("%%length" "jazz.pair-bytes" "%%fx*" "l")}
      {Lisp-Entry "jazz.table-size" define #f 180 9 180 24 ("0" "%%fx+" "##gc-hash-table?" "if" "%%vector-length" "1" "fx+" "jazz.word-bytes" "%%fx*" "4" "floats" "5" "gcht2" "3" "%%vector-ref" "gcht1" "let" "t")}}})
"network"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "network.scm"} 1257473853
    {Lisp-Entry "jazz.dialect.core.network" unit #f 37 16 37 41 ()
      {Lisp-Entry "jazz.open-tcp-client" define #f 42 12 42 32 ("open-tcp-client")}
      {Lisp-Entry "jazz.open-tcp-server" define #f 43 12 43 32 ("open-tcp-server")}
      {Lisp-Entry "jazz.tcp-server-socket-info" define #f 44 12 44 39 ("tcp-server-socket-info")}
      {Lisp-Entry "jazz.call-with-tcp-client" define #f 46 13 46 38 ("close-port" "if" "open-tcp-client" "set!" "lambda" "dynamic-wind" "port" "let" "proc" "settings")}
      {Lisp-Entry "jazz.socket-info-address" define #f 57 12 57 36 ("socket-info-address")}
      {Lisp-Entry "jazz.socket-info-port-number" define #f 58 12 58 40 ("socket-info-port-number")}}})
"number"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "number.scm"} 1257473854
    {Lisp-Entry "jazz.dialect.core.number" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.fixnum->flonum" define #f 47 9 47 28 ("jazz.Fixnum" "jazz.type-error" "##fixnum->flonum" "%%fixnum?" "if" "n")}
      {Lisp-Entry "jazz.flonum->fixnum" define #f 52 9 52 28 ("jazz.Flonum" "jazz.type-error" "##flonum->fixnum" "%%flonum?" "if" "n")}
      {Lisp-Entry "jazz.+infinity" define #f 63 8 63 22 ("+inf.0")}
      {Lisp-Entry "jazz.-infinity" define #f 66 8 66 22 ("-inf.0")}
      {Lisp-Entry "jazz.random-integer" define #f 77 12 77 31 ("random-integer")}
      {Lisp-Entry "jazz.random-real" define #f 78 12 78 28 ("random-real")}
      {Lisp-Entry "jazz.random-source-randomize!" define #f 79 12 79 41 ("random-source-randomize!")}
      {Lisp-Entry "jazz.random-source-pseudo-randomize!" define #f 80 12 80 48 ("random-source-pseudo-randomize!")}
      {Lisp-Entry "jazz.default-random-source" define #f 81 12 81 38 ("default-random-source")}}})
"object"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "object.jazz"} 1257476789
    {Lisp-Entry "jazz.dialect.language.object" module #f 37 18 37 46 ("jazz.dialect")
      {Lisp-Entry "error" native #f 46 16 46 26 ()}
      {Lisp-Entry "Object" class #f 54 17 54 23 ("Object-Class")
        {Lisp-Entry "initialize" method #f 57 19 57 29 ()}
        {Lisp-Entry "destroy" method #f 61 19 61 26 ()}
        {Lisp-Entry "print" method #f 65 26 65 31 ("print-detail" "lambda" "print-unreadable" "self" "object?" "if" "detail" "output")}
        {Lisp-Entry "print-detail" method #f 73 21 73 33 ("write" "self" "display" ":human" "eq?" "if" "detail" "output")}
        {Lisp-Entry "class-actions" method #f 79 26 79 39 ()}
        {Lisp-Entry "focus-actions" method #f 83 26 83 39 ()}
        {Lisp-Entry "guest-actions" method #f 87 26 87 39 ()}
        {Lisp-Entry "initialized?" method #f 91 18 91 30 ("self" "object-initialized?")}
        {Lisp-Entry "hash-object" method #f 95 26 95 37 ("self" "error")}
        {Lisp-Entry "copy-object" method #f 99 29 99 40 ("self" "error" "deep?")}
        {Lisp-Entry "compare-object" method #f 103 29 103 43 (":incompatible" "object")}
        {Lisp-Entry "ci-compare-object" method #f 107 29 107 46 (":incompatible" "object")}
        {Lisp-Entry "describe-object" method #f 111 29 111 44 ("print" "printer")}
        {Lisp-Entry "release" method #f 115 26 115 33 ()}
        {Lisp-Entry "close" method #f 119 26 119 31 ("self" "call-destroy")}
        {Lisp-Entry "destroy-mandatory" method #f 123 21 123 38 ("self" "set-must-destroy")}
        {Lisp-Entry "destroyed?" method #f 127 18 127 28 ("self" "object-destroyed?")}
        {Lisp-Entry "get-sort-value" method #f 131 26 131 40 ()}
        {Lisp-Entry "redirect-handler" method #f 135 29 135 45 ("self" "sender" "handler")}
        {Lisp-Entry "coerce-string" method #f 139 29 139 42 ("self" "error")}
        {Lisp-Entry "iterate-object" method #f 143 29 143 43 ("self" "error")}
        {Lisp-Entry "object-similar?" method #f 152 29 152 44 ("self" "eq?" "object")}
        {Lisp-Entry "object-alphabetic?" method #f 156 29 156 47 ("self" "error")}
        {Lisp-Entry "object-numeric?" method #f 160 29 160 44 ("self" "error")}
        {Lisp-Entry "object-alphanumeric?" method #f 164 29 164 49 ("self" "error")}
        {Lisp-Entry "object-whitespace?" method #f 168 29 168 47 ("self" "error")}
        {Lisp-Entry "object-upper-case?" method #f 172 29 172 47 ("self" "error")}
        {Lisp-Entry "object-lower-case?" method #f 176 29 176 47 ("self" "error")}
        {Lisp-Entry "object-upcase" method #f 180 29 180 42 ("self" "error")}
        {Lisp-Entry "object-downcase" method #f 184 29 184 44 ("self" "error")}
        {Lisp-Entry "object-capitalize" method #f 188 29 188 46 ("self" "error")}}
      {Lisp-Entry "compare" definition #f 192 27 192 34 ("compare-object" ":equal" "eqv?" "if" "b" "a")}
      {Lisp-Entry "ci-compare" definition #f 198 27 198 37 ("ci-compare-object" ":equal" "eqv?" "if" "b" "a")}
      {Lisp-Entry "copy" definition #f 204 20 204 24 ("subcopy" "obj")}
      {Lisp-Entry "subcopy" definition #f 208 20 208 27 ("copy-object" "deep?" "obj")}
      {Lisp-Entry "print-unreadable" definition #f 212 20 212 36 ("string=?" "unless" "display" "object->serial" "serial" "get-output-string" "open-output-string" "string" "class-of" "get-name" "identifier-name" "class-name" "let" "proc" "output" "object")}
      {Lisp-Entry "native-class" definition #f 228 21 228 33 ("error" "name")}
      {Lisp-Entry "=-hash" definition #f 232 13 232 19 ("hash-object" "obj")}
      {Lisp-Entry "object-initialized?" definition #f 236 13 236 32 ("obj")}
      {Lisp-Entry "get-must-destroy" definition #f 241 13 241 29 ("obj")}
      {Lisp-Entry "set-must-destroy" definition #f 245 13 245 29 ("obj")}
      {Lisp-Entry "set-was-destroyed" definition #f 250 13 250 30 ("obj")}
      {Lisp-Entry "object-destroyed?" definition #f 255 21 255 38 ("obj")}
      {Lisp-Entry "destroy-mandatory" definition #f 260 21 260 38 ()}
      {Lisp-Entry "call-destroy" definition #f 265 21 265 33 ("set-was-destroyed" "destroy" "obj")}}})
"parse"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "parse.jazz"} 1257476790
    {Lisp-Entry "jazz.dialect.language.parse" module #f 37 18 37 45 ("jazz.dialect")
      {Lisp-Entry "parse-integer" definition #f 49 20 49 33 ("type:" "object:" "Convertion-Error" "new" "signal" "read-string-element" "numeric?" "empty-string?" "not" "and" "if" "string")}
      {Lisp-Entry "parse-hexadecimal" definition #f 55 20 55 37 ("format" "read-string-element" "string")}
      {Lisp-Entry "parse-boolean" definition #f 59 20 59 33 ("type:" "object:" "Convertion-Error" "new" "signal" "else" "ci=?" "or" "not" "cond" "string")}
      {Lisp-Entry "parse-strings" definition #f 66 20 66 33 ("split" "trim-spaces" "lambda" "map" "string=?" "empty-string?" "or" "if" "separator" "separator:" "string")}
      {Lisp-Entry "parse-delimited-string" definition #f 74 20 74 42 ("parse-strings" "lambda" "map" "separator" "separator:" "string")}}})
"pathname"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "pathname.scm"} 1257473856
    {Lisp-Entry "jazz.dialect.core.pathname" unit #f 37 16 37 42 ()
      {Lisp-Entry "jazz.pathname-expand" define #f 42 12 42 32 ("path-expand")}
      {Lisp-Entry "jazz.file-rename" define #f 43 12 43 28 ("rename-file")}
      {Lisp-Entry "jazz.directory-delete" define #f 44 12 44 33 ("delete-directory")}
      {Lisp-Entry "jazz.current-directory" define #f 46 13 46 35 ("jazz.pathname-exists?" "if" "jazz.pathname-normalize" "current-directory" "dir" "let")}
      {Lisp-Entry "jazz.current-directory-set!" define #f 53 13 53 40 ("current-directory" "dir")}
      {Lisp-Entry "jazz.with-current-directory" define #f 56 13 56 40 ("current-directory" "parameterize" "thunk" "dir")}}})
"port"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "port.scm"} 1257473856
    {Lisp-Entry "jazz.dialect.core.port" unit #f 37 16 37 38 ("jazz.dialect.language.debug.get-console-port" "set!")
      {Lisp-Entry "jazz.system-format" define #f 45 8 45 26 ("jazz.format")}
      {Lisp-Entry "jazz.close-port" define #f 56 12 56 27 ("close-port")}
      {Lisp-Entry "jazz.input-port-timeout-set!" define #f 57 12 57 40 ("input-port-timeout-set!")}
      {Lisp-Entry "jazz.output-port-timeout-set!" define #f 58 12 58 41 ("output-port-timeout-set!")}
      {Lisp-Entry "jazz.dialect.language.debug.get-console-port" define #f 68 8 68 52 ()}
      {Lisp-Entry "jazz.get-console-port" define #f 74 9 74 30 ("jazz.dialect.language.debug.get-console-port" "if")}}})
"profile"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "profile.scm"} 1257474375
    {Lisp-Entry "jazz.dialect.core.profile" unit #f 37 16 37 41 ()
      {Lisp-Entry "active-profile" define-macro ("variable") 40 22 40 36 ()}
      {Lisp-Entry "profile-total" define-macro ("variable") 41 22 41 35 ()}
      {Lisp-Entry "profile-unknown" define-macro ("variable") 42 22 42 37 ()}
      {Lisp-Entry "profile-calls" define-macro ("variable") 43 22 43 35 ()}
      {Lisp-Entry "profile-new" define-macro ("variable") 44 22 44 33 ()}
      {Lisp-Entry "profile-reset!" define-macro ("variable") 45 22 45 36 ()}
      {Lisp-Entry "profile-start!" define-macro ("variable") 46 22 46 36 ()}
      {Lisp-Entry "profile-stop!" define-macro ("variable") 47 22 47 35 ()}
      {Lisp-Entry "profile-running?" define-macro ("variable") 48 22 48 38 ()}
      {Lisp-Entry "jazz.statprof-loaded?" define #f 56 8 56 29 ()}
      {Lisp-Entry "jazz.load-statprof" define #f 60 9 60 27 ("set!" "statprof" "'statprof" "jazz.load-unit" "begin" "jazz.statprof-loaded?" "%%not" "if")}
      {Lisp-Entry "jazz.active-profile" define #f 67 9 67 28 ("active-profile" "jazz.load-statprof")}
      {Lisp-Entry "jazz.profile-total" define #f 72 9 72 27 ("profile-total" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.profile-unknown" define #f 77 9 77 29 ("profile-unknown" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.profile-calls" define #f 82 9 82 27 ("profile-calls" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.new-profile" define #f 87 9 87 25 ("profile-new" "%%apply" "jazz.load-statprof" "rest")}
      {Lisp-Entry "jazz.reset-profile" define #f 92 9 92 27 ("profile-reset!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.start-profile" define #f 97 9 97 27 ("profile-start!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.stop-profile" define #f 102 9 102 26 ("profile-stop!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.profile-running?" define #f 107 9 107 30 ("profile-running?" "jazz.load-statprof")}}})
"reader"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "reader.scm"} 1257473857
    {Lisp-Entry "jazz.dialect.core.reader" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.make-jazz-readtable" define #f 47 13 47 37 ("jazz.jazzify-readtable!" "##main-readtable" "%%readtable-copy" "readtable-max-unescaped-char-set" "readtable" "let")}
      {Lisp-Entry "jazz.jazzify-readtable!" define #f 53 13 53 36 ("jazz.read-delimited-string" "%%readtable-char-sharp-handler-set!" "jazz.read-comment" "jazz.read-literal" "%%readtable-char-class-set!" "jazz.named-chars" "jazz.readtable-named-char-table" "%%append" "jazz.readtable-named-char-table-set!" "readtable")}
      {Lisp-Entry "jazz.named-chars" define #f 60 12 60 28 ()}
      {Lisp-Entry "jazz.in-expression-comment?" define #f 108 12 108 39 ("make-parameter")}
      {Lisp-Entry "jazz.read-literal" define #f 112 13 112 30 ("jazz.construct-literal" "else" "%%cdr" "%%car" "jazz.new-literal" "jazz.walk-for" "%%null?" "jazz.in-expression-comment?" "jazz.read-literals?" "%%not" "or" "cond" "jazz.readenv-wrap" "%%build-list" "lst" "jazz.error" "peek-char" "%%eqv?" "if" "read-char" "%%readenv-current-filepos" "start-pos" "jazz.readenv-port" "port" "let" "c" "re")}
      {Lisp-Entry "jazz.read-comment" define #f 134 13 134 30 ("%%read-datum-or-label-or-none-or-dot" "read" "read-char" "jazz.in-expression-comment?" "parameterize" "jazz.readenv-port" "port" "let" "c" "re")}
      {Lisp-Entry "jazz.read-delimited-string" define #f 143 13 143 39 ("get-output-string" "jazz.readenv-wrap" "peek-char" "and" "else" "write-char" "case" "escaped" "%%eqv?" "%%eof-object?" "cond" "c" "iter" "open-output-string" "output" "read-char" "jazz.readenv-port" "port" "let" "start-pos" "next" "re")}
      {Lisp-Entry "jazz.jazz-readtable" define #f 172 12 172 31 ("jazz.make-jazz-readtable")}
      {Lisp-Entry "jazz.with-jazz-readtable" define #f 176 13 176 37 ("jazz.jazz-readtable" "current-readtable" "parameterize" "thunk")}
      {Lisp-Entry "jazz.char-symbol" define #f 181 13 181 29 ("%%car" "and" "jazz.rassq" "res" "jazz.jazz-readtable" "jazz.readtable-named-char-table" "table" "let" "char")}
      {Lisp-Entry "jazz.eof-object" define #f 197 13 197 28 ("#!eof")}
      {Lisp-Entry "jazz.read-u8" define #f 200 12 200 24 ("read-u8")}
      {Lisp-Entry "jazz.write-u8" define #f 201 12 201 25 ("write-u8")}
      {Lisp-Entry "jazz.read-subu8vector" define #f 202 12 202 33 ("read-subu8vector")}
      {Lisp-Entry "jazz.write-subu8vector" define #f 203 12 203 34 ("write-subu8vector")}
      {Lisp-Entry "jazz.read-line" define #f 205 12 205 26 ("read-line")}
      {Lisp-Entry "jazz.read-proper-line" define #f 208 13 208 34 ("%%string-shrink!" "1" "%%fx-" "%%string-ref" "%%eqv?" "0" "%%fx>" "and" "%%string-length" "len" "values" "eof-object?" "if" "read-line" "line" "let" "port")}
      {Lisp-Entry "jazz.read-all" define #f 217 12 217 25 ("read-all")}
      {Lisp-Entry "jazz.with-readtable" define #f 220 13 220 32 ("current-readtable" "parameterize" "thunk" "readtable")}
      {Lisp-Entry "jazz.skip-whitespace" define #f 227 9 227 29 ("read-char" "peek-char" "char-whitespace?" "%%while" "port")}
      {Lisp-Entry "jazz.read-delimited" define #f 232 9 232 28 ("jazz.queue-list" "read-char" "read" "jazz.enqueue" "peek-char" "%%eqv?" "%%not" "%%while" "jazz.skip-whitespace" "jazz.new-queue" "queue" "let" "delimiter" "port")}
      {Lisp-Entry "jazz.read-until" define #f 242 9 242 24 ("jazz.queue-list" "jazz.enqueue" "set!" "if" "read" "%%not" "%%while" "done?" "jazz.new-queue" "queue" "expr" "let" "port" "test")}
      {Lisp-Entry "jazz.read-content" define #f 254 9 254 26 ("eof-object?" "jazz.read-until" "port")}}})
"repository"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "repository.scm"} 1257473857
    {Lisp-Entry "jazz.dialect.core.repository" unit #f 37 16 37 44 ()
      {Lisp-Entry "jazz.repository-name" define #f 45 9 45 29 ("%%repository-name" "repository")}
      {Lisp-Entry "jazz.repository-directory" define #f 48 9 48 34 ("%%repository-directory" "repository")}
      {Lisp-Entry "jazz.repository-library-root" define #f 51 9 51 37 ("%%repository-library-root" "repository")}
      {Lisp-Entry "jazz.repository-library-directory" define #f 54 9 54 42 ("%%repository-library-directory" "repository")}
      {Lisp-Entry "jazz.repository-binary?" define #f 57 9 57 32 ("%%repository-binary?" "repository")}
      {Lisp-Entry "jazz.package-repository" define #f 66 9 66 32 ("%%package-repository" "package")}
      {Lisp-Entry "jazz.package-name" define #f 69 9 69 26 ("%%package-name" "package")}
      {Lisp-Entry "jazz.package-directory" define #f 72 9 72 31 ("jazz.package-pathname" "package")}
      {Lisp-Entry "jazz.package-products" define #f 75 9 75 30 ("%%package-products" "package")}
      {Lisp-Entry "jazz.package-project" define #f 78 9 78 29 ("%%package-project" "package")}}})
"run"
 ({Lisp-File-Entry {File jazz "src" "jazz" "test" "run.jazz"} 1257476792
    {Lisp-Entry "jazz.test.run" module #f 37 8 37 21 ("run" "jazz.test" "'jazz.test" "load-unit" "descriptor" "lambda" "test" "'test" "register-product-run" "jazz")}}
  {Lisp-File-Entry {File jazz "src" "jazz" "validate" "run.jazz"} 1257476792
    {Lisp-Entry "jazz.validate.run" module #f 37 8 37 25 ("Classes" "test:" "Validation-Suite" "new" "validate" "jazz")
      {Lisp-Entry "Classes" definition #f 44 12 44 19 ("Vector-Tester" "Variable-Tester" "Values-Tester" "Thread-Tester" "Table-Tester" "Syntax-Tester" "Symbol-Tester" "Structure-Tester" "String-Tester" "Sequence-Tester" "Scheme-Tester" "Reader-Tester" "Pathname-Tester" "Number-Tester" "List-Tester" "Iterator-Tester" "Function-Tester" "Format-Tester" "Form-Tester" "Explorer-Tester" "Error-Tester" "Enumeration-Tester" "Designer-Tester" "Debugger-Tester" "Control-Tester" "Component-Tester" "Collector-Tester" "Char-Tester" "Catalog-Tester" "Branch-Tester" "Boolean-Tester" "Binding-Tester" "Array-Tester" "list")}}})
"scheme"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "walker" "scheme.jazz"} 1257476793
    {Lisp-Entry "jazz.dialect.walker.scheme" module #f 37 18 37 44 ("jazz.dialect")
      {Lisp-Entry "Define-Declaration" class #f 49 7 49 25 ("Declaration")
        {Lisp-Entry "signature" slot #f 52 8 52 17 ()}
        {Lisp-Entry "get-signature" accessor #f 52 25 52 33 ()}
        {Lisp-Entry "value" slot #f 53 8 53 13 ()}
        {Lisp-Entry "get-value" accessor #f 53 25 53 33 ()}}
      {Lisp-Entry "Define-Special-Form-Declaration" class #f 61 7 61 38 ("Declaration")
        {Lisp-Entry "signature" slot #f 64 8 64 17 ()}
        {Lisp-Entry "get-signature" accessor #f 64 25 64 33 ()}
        {Lisp-Entry "body" slot #f 65 8 65 12 ()}
        {Lisp-Entry "get-body" accessor #f 65 25 65 33 ()}}
      {Lisp-Entry "Define-Macro-Declaration" class #f 73 7 73 31 ("Declaration")
        {Lisp-Entry "signature" slot #f 76 8 76 17 ()}
        {Lisp-Entry "get-signature" accessor #f 76 25 76 33 ()}
        {Lisp-Entry "body" slot #f 77 8 77 12 ()}
        {Lisp-Entry "get-body" accessor #f 77 25 77 33 ()}}
      {Lisp-Entry "Scheme-Dialect" class #f 85 7 85 21 ("Dialect")}
      {Lisp-Entry "Scheme-Walker" class #f 93 7 93 20 ("Walker")}}})
"stack"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "stack.scm"} 1257473859
    {Lisp-Entry "jazz.dialect.core.stack" unit #f 37 16 37 39 ()
      {Lisp-Entry "jazz.get-procedure-name" define #f 47 13 47 36 ("%%procedure-name" "if" "procedure")}
      {Lisp-Entry "jazz.get-continuation-stack" define #f 53 13 53 40 ("jazz.queue-list" "%%continuation-next-frame" "1" "%%fx+" "jazz.enqueue" "begin" "and" "%%fx<" "%%not" "or" "if" "0" "d" "iter" "jazz.new-queue" "queue" "let" "depth" "cont")}
      {Lisp-Entry "jazz.get-continuation-name" define #f 66 13 66 39 ("%%continuation-creator" "jazz.get-procedure-name" "cont")}
      {Lisp-Entry "jazz.collect-var-val" define #f 70 13 70 33 ("else" "##unbox" "##var-c-name" "##var-c-boxed?" "##var-i-name" "jazz.collect-var-val-aux" "##var-i?" "cond" "queue" "cte" "val-or-box" "var")}
      {Lisp-Entry "jazz.collect-var-val-aux" define #f 91 13 91 37 ("else" "##cte-parent-cte" "##inverse-eval-in-env" "##cte-top?" "if" "remove-quote" "##procedure?" "'<unbound>" "jazz.unbound-object?" "'<absent>" "jazz.absent-object?" "cond" "##object->string" "%%list" "jazz.enqueue" "queue" "cte" "mutable?" "val" "var")
        {Lisp-Entry "remove-quote" define #f 93 15 93 27 ("##cadr" "##cdr" "##null?" "##not" "quote" "'quote" "##car" "eq?" "pair?" "and" "if" "val")}}
      {Lisp-Entry "jazz.get-continuation-dynamic-environment" define #f 116 13 116 54 ("jazz.queue-list" "##interaction-cte" "jazz.code-cte" "##interp-continuation-code" "$code" "%%interp-continuation?" "if" "jazz.continuation-denv" "##dynamic-env->list" "collect-parameters" "and" "jazz.new-queue" "queue" "let" "cont")
        {Lisp-Entry "collect-parameters" define #f 118 15 118 33 ("%%list" "jazz.collect-var-val-aux" "##inverse-eval-in-env" "x" "##hidden-parameter?" "%%not" "%%cdr" "val" "param" "%%car" "param-val" "let*" "%%pair?" "if" "iter" "let" "queue" "cte" "lst")}}
      {Lisp-Entry "jazz.get-continuation-lexical-environment" define #f 142 13 142 54 ("jazz.queue-list" "##interaction-cte" "%%continuation-locals" "collect-locals" "begin" "jazz.code-cte" "collect-rte" "##interp-continuation-rte" "rte" "##interp-continuation-code" "$code" "%%interp-continuation?" "if" "and" "jazz.new-queue" "queue" "let" "cont")
        {Lisp-Entry "collect-rte" define #f 144 15 144 26 ("else" "jazz.rte-up" "##cte-parent-cte" "jazz.collect-var-val" "##hidden-local-var?" "%%not" "%%car" "var" "%%pair?" "if" "%%vector->list" "%%cdr" "vals" "##cte-frame-vars" "vars" "loop2" "##cte-frame?" "##cte-top?" "cond" "r" "c" "loop1" "let" "queue" "rte" "cte")}
        {Lisp-Entry "collect-vars" define #f 163 15 163 27 ("jazz.collect-var-val" "%%cdr" "val" "var" "%%car" "var-val" "let*" "%%pair?" "if" "iter" "let" "queue" "cte" "lst")}
        {Lisp-Entry "collect-locals" define #f 172 15 172 29 ("collect-vars" "and" "queue" "cte" "lst")}}
      {Lisp-Entry "jazz.get-continuation-location" define #f 189 13 189 43 ("%%continuation-locat" "jazz.locat->file/line/col" "cont")}
      {Lisp-Entry "jazz.interpreted-continuation?" define #f 193 13 193 43 ("%%interp-continuation?" "cont")}
      {Lisp-Entry "jazz.with-repl-context" define #f 197 13 197 35 ("jazz.repl-context-bind" "0" "1" "jazz.repl-context-level" "%%fx+" "jazz.make-repl-context" "context" "%%thread-repl-context-get!" "prev-context" "let" "thunk" "cont")}
      {Lisp-Entry "jazz.repl" define #f 213 13 213 22 ("%%repl")}
      {Lisp-Entry "eval-within-no-winding" define #f 225 13 225 35 ("##cdr" "macro-make-rte-from-list" "##car" "##map" "##cte-top-cte" "##cte-frame" "##continuation-locals" "locals" "else" "##interaction-cte" "##compile-top" "##with-no-result-expected-toplevel-continuation?" "##compile-inner" "run" "##interp-continuation-rte" "rte" "jazz.code-cte" "cte" "##interp-continuation-code" "$code" "let*" "##interp-continuation?" "cond" "##make-source" "##sourcify" "src2" "let" "receiver" "repl-context" "cont" "src" "runner")
        {Lisp-Entry "run" define #f 227 15 227 18 ("jazz.code-run" "runner" "let" "receiver" "repl-context" "jazz.repl-context-bind" "lambda" "cont" "%%continuation-graft-no-winding" "rte" "c")}
        {Lisp-Entry "macro-make-rte-from-list" define-macro #f 240 23 240 47 ("lst" "rte")}}
      {Lisp-Entry "jazz.eval-within-no-winding" define #f 259 13 259 40 ("%%car" "%%continuation-return-no-winding" "call-with-values" "results" "jazz.current-repl-context" "eval-within-no-winding" "return" "lambda" "continuation-capture" "cont" "expr" "runner")}
      {Lisp-Entry "jazz.repl-result-history-add" define #f 275 13 275 41 ("%%repl-channel-result-history-add" "%%current-thread" "%%thread-repl-channel-get!" "channel" "let" "result")}
      {Lisp-Entry "jazz.inspect-repl-context" define #f 285 13 285 38 ("context")}}})
"step"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "core" "step.scm"} 1257473859
    {Lisp-Entry "jazz.dialect.core.step" unit #f 37 16 37 38 ()
      {Lisp-Entry "install-step-handler" define #f 40 9 40 29 ("void" "s" "vector" "0" "vector-set!" "##current-stepper" "cs" "let" "proc")
        {Lisp-Entry "s" define #f 41 11 41 12 ("##cons" "##apply" "lambda" "proc" "process-step" "##step-off" "other" "execute-body" "rte" "$code" "leapable?")}}
      {Lisp-Entry "process-step" define #f 53 9 53 21 ("c" "result" "l" "##step-on" "s" "case" "cmd" "let" "execute" "proc")}}})
"structure"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "core" "structure.scm"} 1257473860
    {Lisp-Entry "jazz.dialect.core.structure" unit #f 37 16 37 43 ()
      {Lisp-Entry "jazz.kind?" define #f 40 9 40 19 ("##type?" "obj")}
      {Lisp-Entry "jazz.kind-id" define #f 43 9 43 21 ("##type-id" "type")}
      {Lisp-Entry "jazz.kind-name" define #f 46 9 46 23 ("##type-name" "type")}
      {Lisp-Entry "jazz.kind-flags" define #f 49 9 49 24 ("##type-flags" "type")}
      {Lisp-Entry "jazz.kind-super" define #f 52 9 52 24 ("##type-super" "type")}
      {Lisp-Entry "jazz.kind-length" define #f 55 9 55 25 ("##type-field-count" "type")}
      {Lisp-Entry "jazz.kind-fields" define #f 58 9 58 25 ("jazz.reverse!" "%%list" "%%cons" "%%fx+" "val" "options" "%%cdr" "rest" "%%car" "name" "let*" "%%pair?" "if" "alist" "##type-fields" "%%vector->list" "lst" "1" "i" "loop" "let" "type")}
      {Lisp-Entry "jazz.structure?" define #f 76 9 76 24 ("##structure?" "obj")}
      {Lisp-Entry "jazz.structure-kind" define #f 79 9 79 28 ("##structure-type" "obj")}
      {Lisp-Entry "jazz.structure-ref" define #f 82 9 82 27 ("##structure-ref" "type" "i" "obj")}
      {Lisp-Entry "jazz.structure-set!" define #f 85 9 85 28 ("##structure-set!" "type" "i" "val" "obj")}}})
"syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "syntax.scm"} 1257474508
    {Lisp-Entry "test.performance.syntax" unit #f 0 6 0 29 ()
      {Lisp-Entry "Z" define-class ("class") 3 19 3 20 ("allocate-z" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "f-vtable" generic/specific ("Z~virtual") 7 22 7 30 ("n")}
      {Lisp-Entry "g-vtable" generic/specific ("Z~virtual") 8 22 8 30 ("n")}
      {Lisp-Entry "W" define-class ("class") 11 19 11 20 ("allocate-w" "jazz.Object-Class" "Z")}
      {Lisp-Entry "h" generic/specific ("W~virtual") 15 22 15 23 ()}}})
"system"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "system.scm"} 1257473860
    {Lisp-Entry "jazz.dialect.core.system" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.open-process" define #f 42 12 42 29 ("open-process")}
      {Lisp-Entry "jazz.process-status" define #f 43 12 43 31 ("process-status")}
      {Lisp-Entry "jazz.exit" define #f 44 12 44 21 ("exit")}
      {Lisp-Entry "jazz.switch?" define #f 49 9 49 21 ("0" "%%string-ref" "%%eqv?" "or" "2" "%%string-length" "%%fx>=" "and" "arg")}
      {Lisp-Entry "jazz.switch-name" define #f 55 9 55 25 ("%%string-length" "1" "%%substring" "arg")}
      {Lisp-Entry "jazz.command-argument" define #f 59 9 59 30 ("%%cddr" "else" "%%cadr" "jazz.switch-name" "%%equal?" "jazz.error" "jazz.switch?" "%%not" "or" "cond" "%%car" "arg" "%%null?" "arguments" "iter" "command-line" "%%cdr" "all" "let" "executable" "'executable" "jazz.image" "eq?" "if" "name")}}})
"table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "table.scm"} 1257474508
    {Lisp-Entry "jazz.dialect.core.table" unit #f 37 16 37 39 ()
      {Lisp-Entry "jazz.table-clear" define #f 40 9 40 25 ("%%table-clear" "%%table?" "%%debug-assert" "key" "table")}
      {Lisp-Entry "jazz.table-keys" define #f 45 9 45 24 ("%%table-keys" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.table-length" define #f 50 9 50 26 ("%%table-length" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.iterate-table" define #f 55 9 55 27 ("%%iterate-table" "%%table?" "%%debug-assert" "proc" "table")}
      {Lisp-Entry "jazz.map-table" define #f 60 9 60 23 ("jazz.queue-list" "jazz.enqueue" "value" "key" "lambda" "%%iterate-table" "jazz.new-queue" "queue" "let" "%%table?" "%%debug-assert" "proc" "table")}
      {Lisp-Entry "jazz.list->table" define #f 69 9 69 25 ("test:" "%%list->table" "equal?" "test" "#!key" "alist")}
      {Lisp-Entry "jazz.table->list" define #f 73 9 73 25 ("%%table->list" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.table-entries" define #f 78 9 78 27 ("%%table-entries" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.eq-hash" define #f 85 12 85 24 ("eq?-hash")}
      {Lisp-Entry "jazz.eqv-hash" define #f 86 12 86 25 ("eqv?-hash")}
      {Lisp-Entry "jazz.equal-hash" define #f 87 12 87 27 ("equal?-hash")}}})
"template"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "template.scm"} 1257476799
    {Lisp-Entry "jazz.dialect.syntax.template" module #f 37 18 37 46 ("scheme")}})
"templates"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "templates.scm"} 1257476799
    {Lisp-Entry "jazz.dialect.syntax.templates" module #f 37 18 37 47 ("scheme")
      {Lisp-Entry "instantiate-for-each" macro #f 44 15 44 35 ("+" "element" "<=" "when" "0" "n" "iterate" "1" "cardinality" "-" "end" "let" ",T" "seq" "proc" "for-each" ",name" "as" "specialize" "T" "name")}
      {Lisp-Entry "instantiate-butlast" macro #f 53 15 53 34 ("1" "cardinality" "-" "0" "subseq" ",T" "seq" "butlast" "specialize" "T")}
      {Lisp-Entry "instantiate-find" macro #f 60 15 60 31 ("element" "obj" "n" "iterate" "1" "0" "-" "+" "next" ">=" "<=" "not" "if" "inside" "eqv?" "or" "cardinality" "len" "let" "reversed?" "reversed?:" "end" "end:" "start" "start:" "test" "test:" "key" "key:" "target" ",T" "seq" "find" ",name" "as" "specialize" "T" "name")}
      {Lisp-Entry "instantiate-find-in" macro #f 79 15 79 34 ("element" "obj" "n" "iterate" "1" "0" "-" "+" "next" ">=" "<=" "not" "if" "inside" "eqv?" "or" "cardinality" "len" "let" "reversed?" "reversed?:" "end" "end:" "start" "start:" "test" "test:" "key" "key:" "target" ",T" "seq" "find-in" ",name" "as" "specialize" "T" "name")}
      {Lisp-Entry "instantiate-starts-with?" macro #f 96 15 96 39 ("0" "subseq" "=" ">=" "and" "tlen" "cardinality" "slen" "let" "target" ",T" "seq" "starts-with?" "specialize" "T")}
      {Lisp-Entry "instantiate-ends-with?" macro #f 104 15 104 37 ("-" "subseq" "=" ">=" "and" "tlen" "cardinality" "slen" "let" "target" ",T" "seq" "ends-with?" "specialize" "T")}}})
"thread"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "thread.scm"} 1257473861
    {Lisp-Entry "jazz.dialect.core.thread" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.current-thread" define #f 47 12 47 31 ("current-thread")}
      {Lisp-Entry "jazz.thread?" define #f 48 12 48 24 ("thread?")}
      {Lisp-Entry "jazz.make-thread" define #f 49 12 49 28 ("make-thread")}
      {Lisp-Entry "jazz.make-root-thread" define #f 50 12 50 33 ("make-root-thread")}
      {Lisp-Entry "jazz.thread-name" define #f 51 12 51 28 ("thread-name")}
      {Lisp-Entry "jazz.thread-specific" define #f 52 12 52 32 ("thread-specific")}
      {Lisp-Entry "jazz.thread-specific-set!" define #f 53 12 53 37 ("thread-specific-set!")}
      {Lisp-Entry "jazz.thread-base-priority" define #f 54 12 54 37 ("thread-base-priority")}
      {Lisp-Entry "jazz.thread-base-priority-set!" define #f 55 12 55 42 ("thread-base-priority-set!")}
      {Lisp-Entry "jazz.thread-priority-boost" define #f 56 12 56 38 ("thread-priority-boost")}
      {Lisp-Entry "jazz.thread-priority-boost-set!" define #f 57 12 57 43 ("thread-priority-boost-set!")}
      {Lisp-Entry "jazz.thread-start!" define #f 58 12 58 30 ("thread-start!")}
      {Lisp-Entry "jazz.thread-yield!" define #f 59 12 59 30 ("thread-yield!")}
      {Lisp-Entry "jazz.thread-sleep!" define #f 60 12 60 30 ("thread-sleep!")}
      {Lisp-Entry "jazz.thread-terminate!" define #f 61 12 61 34 ("thread-terminate!")}
      {Lisp-Entry "jazz.thread-join!" define #f 62 12 62 29 ("thread-join!")}
      {Lisp-Entry "jazz.thread-send" define #f 63 12 63 28 ("thread-send")}
      {Lisp-Entry "jazz.thread-receive" define #f 64 12 64 31 ("thread-receive")}
      {Lisp-Entry "jazz.thread-interrupt!" define #f 65 12 65 34 ("thread-interrupt!")}
      {Lisp-Entry "jazz.thread-thread-group" define #f 66 12 66 36 ("thread-thread-group")}
      {Lisp-Entry "jazz.thread-group->thread-group-list" define #f 67 12 67 48 ("thread-group->thread-group-list")}
      {Lisp-Entry "jazz.thread-group->thread-group-vector" define #f 68 12 68 50 ("thread-group->thread-group-vector")}
      {Lisp-Entry "jazz.thread-group->thread-list" define #f 69 12 69 42 ("thread-group->thread-list")}
      {Lisp-Entry "jazz.thread-group->thread-vector" define #f 70 12 70 44 ("thread-group->thread-vector")}
      {Lisp-Entry "jazz.thread-state" define #f 71 12 71 29 ("thread-state")}
      {Lisp-Entry "jazz.thread-state-abnormally-terminated-reason" define #f 72 12 72 58 ("thread-state-abnormally-terminated-reason")}
      {Lisp-Entry "jazz.thread-state-abnormally-terminated?" define #f 73 12 73 52 ("thread-state-abnormally-terminated?")}
      {Lisp-Entry "jazz.thread-state-active-timeout" define #f 74 12 74 44 ("thread-state-active-timeout")}
      {Lisp-Entry "jazz.thread-state-active-waiting-for" define #f 75 12 75 48 ("thread-state-active-waiting-for")}
      {Lisp-Entry "jazz.thread-state-active?" define #f 76 12 76 37 ("thread-state-active?")}
      {Lisp-Entry "jazz.thread-state-initialized?" define #f 77 12 77 42 ("thread-state-initialized?")}
      {Lisp-Entry "jazz.thread-state-normally-terminated-result" define #f 78 12 78 56 ("thread-state-normally-terminated-result")}
      {Lisp-Entry "jazz.thread-state-normally-terminated?" define #f 79 12 79 50 ("thread-state-normally-terminated?")}
      {Lisp-Entry "jazz.thread-state-uninitialized?" define #f 80 12 80 44 ("thread-state-uninitialized?")}
      {Lisp-Entry "jazz.mutex?" define #f 92 12 92 23 ("mutex?")}
      {Lisp-Entry "jazz.make-mutex" define #f 93 12 93 27 ("make-mutex")}
      {Lisp-Entry "jazz.mutex-name" define #f 94 12 94 27 ("mutex-name")}
      {Lisp-Entry "jazz.mutex-specific" define #f 95 12 95 31 ("mutex-specific")}
      {Lisp-Entry "jazz.mutex-specific-set!" define #f 96 12 96 36 ("mutex-specific-set!")}
      {Lisp-Entry "jazz.mutex-state" define #f 97 12 97 28 ("mutex-state")}
      {Lisp-Entry "jazz.mutex-lock!" define #f 98 12 98 28 ("mutex-lock!")}
      {Lisp-Entry "jazz.mutex-unlock!" define #f 99 12 99 30 ("mutex-unlock!")}
      {Lisp-Entry "jazz.mutex-owner" define #f 101 13 101 29 ("jazz.btq-owner" "mutex")}
      {Lisp-Entry "jazz.mutex-wait" define #f 104 13 104 28 ("mutex-unlock!" "mutex-lock!" "mutex")}
      {Lisp-Entry "jazz.condition?" define #f 118 12 118 27 ("condition-variable?")}
      {Lisp-Entry "jazz.make-condition" define #f 119 12 119 31 ("make-condition-variable")}
      {Lisp-Entry "jazz.condition-name" define #f 120 12 120 31 ("condition-variable-name")}
      {Lisp-Entry "jazz.condition-specific" define #f 121 12 121 35 ("condition-variable-specific")}
      {Lisp-Entry "jazz.condition-specific-set!" define #f 122 12 122 40 ("condition-variable-specific-set!")}
      {Lisp-Entry "jazz.condition-signal!" define #f 123 12 123 34 ("condition-variable-signal!")}
      {Lisp-Entry "jazz.condition-broadcast!" define #f 124 12 124 37 ("condition-variable-broadcast!")}}})
"time"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "time.scm"} 1257473861
    {Lisp-Entry "jazz.dialect.core.time" unit #f 37 16 37 38 ()
      {Lisp-Entry "jazz.current-systime" define #f 40 8 40 28 ("current-time")}
      {Lisp-Entry "jazz.systime?" define #f 41 8 41 21 ("time?")}
      {Lisp-Entry "jazz.systime->seconds" define #f 42 8 42 29 ("time->seconds")}
      {Lisp-Entry "jazz.seconds->systime" define #f 43 8 43 29 ("seconds->time")}
      {Lisp-Entry "jazz.process-times" define #f 44 8 44 26 ("process-times")}
      {Lisp-Entry "jazz.cpu-time" define #f 45 8 45 21 ("cpu-time")}
      {Lisp-Entry "jazz.real-time" define #f 46 8 46 22 ("real-time")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "time.scm"} 1257474508
    {Lisp-Entry "test.performance.time" unit #f 0 6 0 27 ("new-z" "f-vtable" "f-generic" "f-separate" "iterations" "new-x" "f-module" "time")
      {Lisp-Entry "iterations" define #f 3 8 3 18 ("100000000")}}})
"typecase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "typecase.scm"} 1257476800
    {Lisp-Entry "jazz.dialect.syntax.typecase" module #f 38 18 38 46 ("scheme")
      {Lisp-Entry "error" native #f 44 16 44 26 ()}
      {Lisp-Entry "typecase" macro #f 54 16 54 24 ("desourcify" "error" ",value" ",variable" "is?" "value" "or" "pair?" ",@body" "else" "'else" "eq?" "cdr" "body" "car" "selector" "clause" "map" "cond" "variable" "lambda" "with-uniqueness" "sourcify-if" "cddr" "clauses" "source-code" "cadr" "target" "let" "form-src")}}})
"variables"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "variables.scm"} 1237033585
    {Lisp-Entry "SEPARATE" define #f 4 8 4 16 ("2")}
    {Lisp-Entry "inc-separate" define #f 7 9 7 21 ("-" "1" "+" "SEPARATE" "set!" "begin" "0" ">" "if" "n" "iter" "let" "cnt")}
    {Lisp-Entry "BLOCK" define #f 19 8 19 13 ("3")}
    {Lisp-Entry "inc-block" define #f 22 9 22 18 ("-" "1" "+" "BLOCK" "set!" "begin" "0" ">" "if" "n" "iter" "let" "cnt")}})
"vb"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "vb.scm"} 1237033585
    {Lisp-Entry "VAR" define #f 5 8 5 11 ("2")}
    {Lisp-Entry "inc" define #f 8 9 8 12 ("##fixnum.-" "1" "##fixnum.+" "VAR" "set!" "begin" "0" "##fixnum.>" "if" "n" "iter" "let" "cnt")}})
"vector"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "vector.scm"} 1257473861
    {Lisp-Entry "jazz.dialect.core.vector" unit #f 37 16 37 40 ()
      {Lisp-Entry "jazz.vector-copy" define #f 45 8 45 24 ("vector-copy")}}})
"vs"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "vs.scm"} 1237033585
    {Lisp-Entry "VAR" define #f 4 8 4 11 ("2")}
    {Lisp-Entry "inc" define #f 7 9 7 12 ("##fixnum.-" "1" "##fixnum.+" "VAR" "set!" "begin" "0" "##fixnum.>" "if" "n" "iter" "let" "cnt")}})
"with"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "with.scm"} 1257476807
    {Lisp-Entry "jazz.dialect.syntax.with" module #f 37 18 37 42 ("scheme")
      {Lisp-Entry "with" macro #f 44 16 44 20 ("reverse" "car" "release" "binding" "lambda" "map" ",@body" "begin" "prog1" ",bindings" "let*" "sourcify-if" "cddr" "body" "cadr" "source-code" "bindings" "let" "form-src")}
      {Lisp-Entry "with-closed" macro #f 58 16 58 27 ("close" ",@body" "dynamic-wind" "caddr" ",variable" "set!" "if" "variable" ",specifier" "car" "'<Object>" "binding-specifier" "or" "specifier" "binding" "lambda" "map" "sourcify-if" "cddr" "body" "cadr" "source-code" "bindings" "let" "form-src")}}})
