"Lisp-Console-Manager"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "text" "Lisp-Console-Manager.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Console-Manager" module #f 37 18 37 60 ("jazz")
      {Lisp-Entry "Lisp-Console-Manager" class #f 44 7 44 27 ("Console-Manager")
        {Lisp-Entry "external-name" method #f 47 25 47 38 ("lisp-console-manager" "'lisp-console-manager" "rest")}}}})
"Lisp-Entry"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "catalog" "Lisp-Entry.jazz"} 1265989215
    {Lisp-Entry "jazz.editor.lisp.catalog.Lisp-Entry" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Lisp-Entry" class #f 45 7 45 17 ("Indexed-Entry")
        {Lisp-Entry "kind" slot #f 48 8 48 12 ()}
        {Lisp-Entry "get-kind" accessor #f 48 25 48 33 ()}
        {Lisp-Entry "signature" slot #f 49 8 49 17 ()}
        {Lisp-Entry "get-signature" accessor #f 49 25 49 33 ()}
        {Lisp-Entry "initialize" method #f 52 20 52 30 ("signature~self" "kind~self" "set!" "nextmethod" "references" "definitions" "end-column" "end-line" "column" "line" "signature" "kind" "name")}
        {Lisp-Entry "print-catalog" method #f 58 20 58 33 ("print-definitions" "references" "end-column" "end-line" "column" "line" "signature" "kind" "name" "self" "class-of" "category-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" method #f 68 20 68 29 ("Image-Resource")}
        {Lisp-Entry "present" method #f 77 20 77 27 ("present-identifier")}
        {Lisp-Entry "present-name" method #f 81 20 81 32 ("else" "string-append" "signature" "string?" "present-noname" "not" "cond" "get-name" "name" "let")}
        {Lisp-Entry "present-identifier" method #f 91 20 91 38 ("compose-name" "present-name" ":string" "format" "signature" "pair?" "present-noname" "not" "if" "get-name" "name" "let")}
        {Lisp-Entry "compose-name" method #f 100 11 100 23 (":string" "format" "present-name" "parent-name" "let" "get-name" "Lisp-Entry" "parent" "is?" "and" "if" "name")}
        {Lisp-Entry "present-noname" method #f 107 20 107 34 ()}
        {Lisp-Entry "->locator" method #f 111 18 111 27 ("self" "string->symbol" ":string" "format" "Lisp-Entry" "is-not?" "if" "get-name" "name" "get-parent" "parent" "let" "entry" "locator-name" "define")}
        {Lisp-Entry "edit-reference" method #f 127 20 127 34 ("select-previous" "select-next" "or" "unless" "whole-words?:" "->string" "make-search-context" "list" "search-context" "center-caret" "'center-caret" "ensure-displayed?:" "set-selection" "bell" "not" "find-expression" "reference-range" "if" "range" "edit" "apply" "get-guest" "let" "get-start" "declaration-range" "name" "get-selection" "get-string" "equal?" "when" "text" "find-declaration-range" "define" "rest" "target")}
        {Lisp-Entry "update-indexes" method #f 150 20 150 34 ("definitions" "update-indexes" "definition" "references" "key" "lambda" "for-each" "name" "update-index" "references-index" "definitions-index")}}}})
"Lisp-Explorer"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "text" "Lisp-Explorer.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Explorer" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Lisp-Explorer" class #f 65 7 65 20 ("initialize" "Code-Explorer")
        {Lisp-Entry "find-comment-last-row" slot #f 70 8 70 29 ()}
        {Lisp-Entry "find-comment-last-col" slot #f 71 8 71 29 ()}
        {Lisp-Entry "Composites" constant #f 74 12 74 22 ("literal" "reference" "list")}
        {Lisp-Entry "Open-Composites" constant #f 80 12 80 27 ()}
        {Lisp-Entry "Close-Composites" constant #f 86 12 86 28 ()}
        {Lisp-Entry "explore-error" method #f 92 11 92 24 ("message:" "end:" "start:" "Explore-Error" "new" "signal" "text-ending" "text-beginning" "either" "text" "get-moniker" "source" "let" "end" "start" "message")}
        {Lisp-Entry "present-char" method #f 99 11 99 23 ("string" "else" "char-symbol" "memv?" "not" "cond" "c")}
        {Lisp-Entry "current-expr" method #f 108 18 108 30 ("get-marked" "symbol" "'symbol" "kind" "eq?" "backward-expr" "and" "when")}
        {Lisp-Entry "forward-expr" method #f 113 20 113 32 ("forward-simple-expr" "prog1" "while" "get-start" "s" "end" "set-start" "forward-whites" "forward" "1" "eqv?" "and" "memv?" "when" "0" "char-forward" "c" "let" "forward-quotes" "define")}
        {Lisp-Entry "backward-expr" method #f 131 20 131 33 ("name-comment" "'name-comment" "get-char" "jazz" "'jazz" "get-syntax" "eq?" "while" "when" "backward-simple-expr" "found" "backward-scheme-char" "2" "backward-delimited-string" "if" "c1" "c0" "start" "set-end" "backward-whites" "else" "1" "eqv?" "and" "backward" "memv?" "cond" "0" "char-backward" "c" "let" "backward-quote" "define")}
        {Lisp-Entry "forward-simple-expr" method #f 160 19 160 38 ("else" "literal" "'literal" "reference" "'reference" "list" "'list" "forward-composite" "forward-named-comment" "forward-constituent" "text-constituent?" "forward-escaped-symbol" "forward-backslahed-symbol" "forward-string" "string-delimiter?" "forward-sharp" "eqv?" "cond" "when" "0" "char-forward" "c" "let")}
        {Lisp-Entry "backward-simple-expr" method #f 175 19 175 39 ("else" "literal" "'literal" "reference" "'reference" "list" "'list" "backward-composite" "backward-constituent" "text-constituent?" "backward-escaped-symbol" "eqv?" "backward-string" "string-delimiter?" "cond" "when" "0" "char-backward" "c" "let")}
        {Lisp-Entry "forward-all-expr" method #f 187 18 187 34 ("start" "set!" "forward-expr" "while" "end" "copy" "initial-end" "let")}
        {Lisp-Entry "backward-all-expr" method #f 194 18 194 35 ("end" "set!" "backward-expr" "while" "start" "copy" "initial-start" "let")}
        {Lisp-Entry "forward-constituent" method #f 201 11 201 30 ("else" "symbol" "'symbol" "keyword" "'keyword" "and" "if" "kind" "text-constituent?" "not" "or" "set!" "forward" "cond" "c" "iterate" "last" "0" "char-forward" "eqv?" "keyword?" "let")}
        {Lisp-Entry "backward-constituent" method #f 220 19 220 39 ("else" "symbol" "'symbol" "keyword" "'keyword" "if" "kind" "text-constituent?" "not" "or" "set!" "backward" "1" "cond" "c" "iterate" "unspecified" "last" "0" "char-backward" "eqv?" "keyword?" "let")}
        {Lisp-Entry "backward-escaped-symbol" method #f 239 19 239 42 ("else" "symbol" "'symbol" "kind" "set!" "1" "eqv?" "cond" "not" "if" "0" "char-backward" "c" "iterate" "let" "backward")}
        {Lisp-Entry "backward-scheme-char" method #f 258 19 258 39 ("char" "'char" "kind" "set!" "backward")}
        {Lisp-Entry "forward-expr-comment" method #f 266 19 266 39 ("expr-comment" "'expr-comment" "kind" "set!" "forward-expr" "forward")}
        {Lisp-Entry "forward-named-comment" method #f 273 19 273 40 ("named-comment" "'named-comment" "kind" "set!" "forward-expr" "forward" "forward-constituent" "jazz" "'jazz" "get-syntax" "neq?" "if")}
        {Lisp-Entry "forward-sharp" method #f 282 19 282 32 ("forward-constituent" "else" "forward-expr-comment" "forward-scheme-char" "forward-named-string" "forward-delimited-string" "eqv?" "boolean" "'boolean" "kind" "set!" "text-constituent?" "not" "or" "memq?" "and" "cond" "1" "c1" "0" "char-forward" "c0" "let" "forward")}
        {Lisp-Entry "forward-backslahed-symbol" method #f 302 19 302 44 ("forward-constituent" "forward")}
        {Lisp-Entry "forward-escaped-symbol" method #f 308 19 308 41 ("else" "symbol" "'symbol" "kind" "set!" "eqv?" "cond" "not" "if" "0" "char-forward" "c" "iterate" "let" "forward")}
        {Lisp-Entry "forward-delimited-string" method #f 327 19 327 43 ("else" "delimited-string" "'delimited-string" "kind" "set!" "eqv?" "and" "not" "or" "cond" "1" "c1" "0" "char-forward" "c0" "iterate" "let" "forward")}
        {Lisp-Entry "forward-named-string" method #f 344 19 344 39 ("named-string" "'named-string" "continuation-return" "begin" "nu=?" "if" "limit" "<" "while" "0" "1" "+" "Cell" "new" "set-end" "get-col" "end" "get-row" "paragraph-string" "subseq" "name" "let" "return" "lambda" "continuation-capture" "forward")}
        {Lisp-Entry "forward-scheme-char" method #f 360 19 360 38 ("else" "text-constituent?" "cond" "iterate" "char" "'char" "kind" "set!" "begin" "alphanumeric?" "not" "if" "0" "char-forward" "c" "let" "forward")}
        {Lisp-Entry "forward-string" method #f 380 19 380 33 ("else" "string" "'string" "kind" "set!" "string-delimiter?" "eqv?" "not" "cond" "0" "char-forward" "c" "call-line-hook" "iterate" "let" "forward")}
        {Lisp-Entry "backward-delimited-string" method #f 400 19 400 44 ("else" "delimited-string" "'delimited-string" "kind" "set!" "eqv?" "and" "not" "or" "cond" "1" "c1" "0" "char-backward" "c0" "iterate" "let" "backward")}
        {Lisp-Entry "backward-string" method #f 418 19 418 34 ("else" "string" "'string" "kind" "set!" "string-delimiter?" "1" "eqv?" "not" "cond" "0" "char-backward" "c" "iterate" "let" "backward")}
        {Lisp-Entry "forward-composite" method #f 437 19 437 36 ("kind" "set!" "1" "next-pos" "present-char" "format" "explore-error" "eqv?" "not" "if" "0" "char-forward" "c" "let" "forward-whites" "forward-all-expr" "forward" "end" "set-start" "delimiter" "knd")}
        {Lisp-Entry "backward-composite" method #f 450 19 450 37 ("kind" "end" "set!" "1" "previous-pos" "present-char" "format" "explore-error" "eqv?" "not" "if" "0" "char-backward" "c" "backward-whites" "backward-all-expr" "backward" "start" "copy" "initial-start" "let" "delimiter" "knd")}
        {Lisp-Entry "enter-list" method #f 464 18 464 28 ("forward" "0" "char-forward" "eqv?" "when" "forward-whites")}
        {Lisp-Entry "exit-list" method #f 471 18 471 27 ("forward" "0" "char-forward" "eqv?" "when" "forward-whites" "forward-all-expr")}
        {Lisp-Entry "enter-composite" method #f 479 18 479 33 ("else" "literal" "'literal" "reference" "'reference" "list" "'list" "quasiquote" "'quasiquote" "quote" "'quote" "unquote" "'unquote" "unquote-splicing" "'unquote-splicing" "kind" "set!" "forward" "1" "eqv?" "and" "cond" "0" "char-forward" "c0" "forward-whites" "get-start" "set-end" "get-end" "end" "let")}
        {Lisp-Entry "exit-composite" method #f 518 18 518 32 ("forward" "Close-Composites" "0" "char-forward" "memv?" "when" "forward-whites" "forward-all-expr")}
        {Lisp-Entry "skip-forward" method #f 526 18 526 30 ("get-marked" "=" "forward-expr" "and" "name")}
        {Lisp-Entry "skip-backward" method #f 530 18 530 31 ("get-marked" "=" "backward-expr" "and" "name")}
        {Lisp-Entry "forward-modifiers" method #f 534 18 534 35 ("reverse!" "cons" "memq?" "find-marked-symbol" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "iterate" "result" "symbol" "end" "copy" "old" "let" "modifiers")}
        {Lisp-Entry "forward-comments" method #f 549 11 549 27 ("next-paragraph")}
        {Lisp-Entry "backward-comments" method #f 553 11 553 28 ()}
        {Lisp-Entry "forward-whites" method #f 557 18 557 32 ("call-line-hook" "forward-comments" "case" "forward" "whitespace?" "if" "when" "0" "char-forward" "c" "iterate" "let")}
        {Lisp-Entry "backward-whites" method #f 571 18 571 33 ("backward-lisp-comment" "backward" "whitespace?" "and" "when" "0" "char-backward" "c" "iterate" "let")}
        {Lisp-Entry "backward-lisp-comment" method #f 581 11 581 32 ("set-col" "set!" "find-comment-last-col" "find-comment-last-row" "if" "col" "start-col" "start" "start-row" "else" "forward-scheme-char" "forward-delimited-string" "forward" "1" "c1" "forward-string" "eqv?" "cond" "char-forward" "c0" "get-col" "<" "get-row" "=" "and" "when" "iterate" "0" "Cell" "new" "set-end" "result" "end" "copy" "preserved-end" "paragraph-length" "max-col" "let" "row" "find-lisp-comment" "define")}
        {Lisp-Entry "outer-expr" method #f 655 20 655 30 ("forward-all-expr" "end-char" "end-pos" "present-char" "format" "explore-error" "values" "backward-all-expr" "e" "start-char" "start-pos" "receive" "while" "naturals" "n" "lambda" "for-each" ">" "quote-count" "composites-match?" "prepend-expr-comment" "unless" "prepend-literal" "backward" "backward-whitespaces" "prepend-quoting" "nxt-open-composite?" "prv-close-composite?" "outer-composite" "backward-expr" "next-pos" "set-end" "previous-pos" "nxt-string?" "prv-string?" "outer-string" "forward-constituent" "backward-constituent" "nxt-constituent?" "text-constituent?" "prv-constituent?" "equal?" "forward-expr" "get-marked" "marked" "if" "backward-until" "copy" "s" "backward-to-sharp" "outer-literal" "forward-until" "get-char" "when" "outer-constituent" "advance-literal" "else" "cond" "1" "+" "forward-whitespaces" "forward" "skip-quoting" "count" "iterate" "advance-quoting" "member?" "str" "homogeneous?" "string-delimiter?" "close-composite?" "open-composite?" "whitespace?" "not" "or" "terminal?" "memv?" "c" "quote?" "eqv?" "and" "at" "comma" "unquote-splicing?" "set!" "set-start" "reset" "define" "next-char" "nxt" "0" "previous-char" "prv" "end" "start" "=" "empty?" "let" "explore-whitespace?" "explore-whitespace?:" "atomic?" "atomic?:")}
        {Lisp-Entry "form-expr" method #f 835 18 835 27 ("set-start" "find-marked-symbol" "symbol" "'symbol" "kind" "eq?" "forward-expr" "enter-list" "0" "next-char" "eqv?" "when" "prog1" "set-end" "end" "e" "start" "copy" "s" "let")}
        {Lisp-Entry "form-name" method #f 849 18 849 27 ("symbol?" "if" "expr" "set!" "memq?" "not-null?" "while" "get-modifiers" "modifiers" "cdr" "scan" "get-declaration?" "and" "car" "get-lisp-form" "lisp-form" "let" "pair?" "when" "form")}
        {Lisp-Entry "namespace-expr?" method #f 865 26 865 41 ("form-expr" "namespace-name?")}
        {Lisp-Entry "declaration-expr?" method #f 869 26 869 43 ("form-expr" "declaration-name?")}
        {Lisp-Entry "namespace-name?" method #f 873 26 873 41 ("lisp-form-namespace?" "name")}
        {Lisp-Entry "declaration-name?" method #f 877 26 877 43 ("lisp-form-declaration?" "name")}
        {Lisp-Entry "inner-name?" method #f 881 26 881 37 ("lisp-form-inner?" "name")}
        {Lisp-Entry "declaration-name" method #f 885 18 885 34 ("set-start" "values" "prog1" "begin" "0" "char-forward" "eqv?" "if" "forward-whites" "specific" "generic" "memq?" "cond" "lisp-form-modifiers" "modifiers" "find-marked-symbol" "decl" "let*" "forward-expr" "enter-list" "set-end" "end" "e" "start" "copy" "s" "let")}
        {Lisp-Entry "declaration-only-name" method #f 906 11 906 32 ("declaration-name" "name" "modifiers" "receive")}
        {Lisp-Entry "for-each-comment" method #f 916 18 916 34 ("end:" "start:" "comment-string" "text-search-all" "subseq" "string=?" "cardinality" "cast" "+" "<" "and" "end" "paragraph-end" "set-end" "set!" "string-style?" "Named-Comment" "Expr-Comment" "get-name" "memq?" "unless" "start" "get-style-at" "style" "paragraph-string" "string" "/=" "not" "or" "when" "get-col" "col" "get-row" "row" "let" "pos" "lambda" "for-each" "string-length" "title-comment-size" "text" "get-syntax" "title-comment-string" "title-comment" "previous-row" "let*" "end-row" "end-row:" "start-row" "start-row:" "proc")}
        {Lisp-Entry "walk-declarations" method #f 940 26 940 43 ("walk-declaration" "while" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-declaration" method #f 945 26 945 42 ("else" "end" "start" "code" "'code" "walk-expression" "walk-named-declaration" "get-lisp-form" "form" "find-marked-symbol" "let" "symbol" "'symbol" "kind" "eq?" "if" "forward-expr" "exit-list" "walk-expressions" "enter-list" "cond" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-named-declaration" method #f 966 29 966 51 ("find-named-walker" "proc-walk" "self" "procedure?" "if" "get-walk" "essay" "walk" "let" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "find-named-walker" method #f 974 29 974 46 ("walk-unknown" "error" "if" "name")}
        {Lisp-Entry "walk-parameters" method #f 980 21 980 36 ("code" "'code" "walk-expression" "forward-expr" "when" "iterate" "let" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-unknown" method #f 987 21 987 33 ("walk-expressions" "code" "'code" "walk-expression" "doc" "expression" "keyword" "declaration" "form" "symbol" "context")}
        {Lisp-Entry "iterate-expressions" method #f 998 18 998 37 ("for-each-expressions" "recursive?" "recursive?:" "code" "'code" "mode" "mode:" "proc")}
        {Lisp-Entry "iterate-expression" method #f 1002 18 1002 36 ("for-each-expression" "recursive?" "recursive?:" "code" "'code" "mode" "mode:" "proc")}
        {Lisp-Entry "for-each-expressions" method #f 1006 11 1006 31 ("for-each-expression" "forward-expr" "while" "mode" "proc")}
        {Lisp-Entry "for-each-expression" method #f 1011 11 1011 30 ("code" "'code" "else" "exit-composite" "literal" "'literal" "composite-kind?" "exit-list" "list" "'list" "cond" "enter-composite" "for-each-expressions" "for-each-expression" "quotation" "'quotation" "0" "char-forward" "eqv?" "'form" "intern-marked-symbol" "neq?" "or" "find-marked-symbol" "memq?" "symbol" "'symbol" "eq?" "and" "if" "let" "kind" "when" "forward-expr" "for-each-forms" "intrinsic" "external" "jml>>" "form>>" "form" "quasiquote" "quote" "Quotation-Forms" "define" "mode" "proc")}
        {Lisp-Entry "walk-expressions" method #f 1042 18 1042 34 ("walk-expression" "forward-expr" "exit-list" "walk-expressions" "enter-list" "cond" "iterate" "let" "first?" "code" "'code" "mode" "expression" "context")}
        {Lisp-Entry "walk-expression" method #f 1053 11 1053 26 ("walk-expression" "forward-expr" "code" "'code" "quasiquote" "quote" "memq?" "let" "else" "exit-composite" "walk-expressions" "composite-kind?" "cond" "enter-composite" "when" "specifier" "'specifier" "tag" "'tag" "if" "1" "end" "-" "start" "get-char" "eqv?" "symbol" "'symbol" "kind" "eq?" "and" "specifier-marked?" "define" "first?" "mode" "expression" "context")}
        {Lisp-Entry "constant?" method #f 1080 18 1080 27 ("keyword" "symbol" "char" "boolean" "number" "kind" "memq?")}
        {Lisp-Entry "get-constant" method #f 1084 18 1084 30 ("get-marked" "read-string-element" "lambda" "with-jazz-readtable" "else" "intern-marked-symbol" "symbol" "kind" "case")}
        {Lisp-Entry "search-expressions" method #f 1124 18 1124 36 ("mode:" "get-range" "list" "continuation-return" "match?" "start" ">=" "and" "when" "bind" "info" "for-each" "iterate-expressions" "return" "continuation-capture" "get-contexts" "get-target" "pair?" "if" "cons" "read-string-element" "target" "target-string" "lambda" "map" "all" "let" "ignore-case?" "whole-words?" "position" "search-context" "mode")}
        {Lisp-Entry "match?" method #f 1144 11 1144 17 ("get-marked" "read-string-element" "equal?" "not" "or" "get-kind" "expl-kind" "receive" "string->symbol" "empty-string?" "mode" "kind" "name" "bind-optionals" "separator:" "1" "subseq" "parse-strings" "elements" "let" "variable" "parse-pattern-variable" "0" "symbol->string" "element" "eqv?" "pattern-variable?" "cadr" "quotation" "'quotation" "values" "quote" "'quote" "car" "eq?" "pair?" "and" "if" "parse-expression" "'expression-kind" "unimplemented" "else" "symbol" "'symbol" "symbol?" "string" "'string" "string?" "char" "'char" "char?" "boolean" "'boolean" "boolean?" "number" "'number" "number?" "cond" "expression" "expression-kind" "define" "target" "expl-mode")}
        {Lisp-Entry "open-composite?" method #f 1186 11 1186 26 ("Open-Composites" "memv?" "char")}
        {Lisp-Entry "close-composite?" method #f 1190 11 1190 27 ("Close-Composites" "memv?" "char")}
        {Lisp-Entry "composite-kind?" method #f 1194 11 1194 26 ("literal" "reference" "list" "memq?" "kind")}}}})
"Lisp-File-Entry"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "catalog" "Lisp-File-Entry.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.catalog.Lisp-File-Entry" module #f 37 18 37 58 ("jazz")
      {Lisp-Entry "Lisp-File-Entry" class #f 43 7 43 22 ("File-Entry")}}})
"Lisp-Parser"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "parser" "Lisp-Parser.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.parser.Lisp-Parser" module #f 37 18 37 53 ("jazz")
      {Lisp-Entry "Lisp-Parser" class #f 45 7 45 18 ("File-Parser")
        {Lisp-Entry "parse" method #f 48 20 48 25 ("parse-definitions" "catalog" "Lisp-File-Entry" "new" "time" "file")}
        {Lisp-Entry "parse-definitions" method #f 52 11 52 28 ("get-output" "dispatch->name" "dispatch-string?" "tag->name" "tag-string?" "add-reference" "string=?" "unless" "get-marked" "keyword" "memq?" "mode" "add-definition" "set-parent" "put" "not" "get-col" "get-row" "Lisp-Entry" "entry" "pair?" "if" "append" "cond" "or" "when" "and" "signature-mangle" "name-mangle" "mangle-declaration" "jazz.define-virtual-runtime" "cdr" "car" "string-append" "cons" "jazz.define-virtual" "signature" "mangle-signature" "else" "define-form" "register-autoclass" "remotable-stub" "jazz.define-literal" "jazz.define-class-runtime" "jazz.define-class" "jazz.define-walker-syntax" "jazz.define-walker-macro" "jazz.define-walker-special" "jazz.define-dialect" "jazz.define-check-macro" "jazz.define-variable" "jazz.define-setting" "jazz.define-global" "jazz.define-syntax" "jazz.define-macro" "case" "name" "mangle-name" "documented?" "marked" "end" "start" "symbol" "kind" "parent" "lambda" "walk-declarations" "List-Factory" "fact" "end:" "start:" "explorer-class" "expl" "text-beginning" "beginning" "let*" "set-moniker" "colorize?:" "char-encoding" "char-encoding:" "text-view-class" "new" "text" "let" "Lisp-Period" "define" "file")}
        {Lisp-Entry "explorer-class" method #f 127 29 127 43 ("file")}
        {Lisp-Entry "text-view-class" method #f 131 29 131 44 ()}}}})
"Lisp-Syntax"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "text" "Lisp-Syntax.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Syntax" module #f 37 18 37 51 ("jazz")
      {Lisp-Entry "Lisp-Syntax" class #f 43 7 43 18 ("Code-Syntax")
        {Lisp-Entry "translate-lisp-key" method #f 53 11 53 29 ("else" "case" "key")}
        {Lisp-Entry "translate-lisp-key" method #f 75 11 75 29 ("else" "case" "key")}
        {Lisp-Entry "Comment" definition #f 97 14 97 21 ("1" "make-string")}
        {Lisp-Entry "Title-Comment" definition #f 101 14 101 27 ("4" "make-string" "string-append")}
        {Lisp-Entry "comment-string" method #f 105 20 105 34 ("Comment")}
        {Lisp-Entry "title-comment-string" method #f 109 20 109 40 ("Title-Comment")}
        {Lisp-Entry "get-constituent-test" method #f 119 20 119 40 ("scheme-constituent?")}
        {Lisp-Entry "Auto-Complete-Characters" definition #f 128 14 128 38 ()}
        {Lisp-Entry "auto-complete-characters" method #f 132 20 132 44 ("Auto-Complete-Characters")}}}})
"Lisp-Text-Actions"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "text" "Lisp-Text-Actions.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Text-Actions" module #f 37 18 37 57 ("jazz")
      {Lisp-Entry "Lisp-Text-Actions" class #f 46 7 46 24 (":shift" "on-remove-highlights" "remove-highlights" ":alt" "on-highlight-selection" "highlight-selection" "Tab" "Shortcut" "shortcut:" "on-tabulate" ":focus" "Event-Handler" "action-handler:" "tabulate" "name:" "Actions")}}})
"Lisp-Text-Preferences"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "text" "Lisp-Text-Preferences.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Text-Preferences" module #f 37 18 37 61 ("jazz")
      {Lisp-Entry "Lisp-Text-Preferences" class #f 44 7 44 28 ("initialize" "Code-Text-Preferences")
        {Lisp-Entry "title-style" property #f 47 12 47 23 ()}
        {Lisp-Entry "get-title-style" accessor #f 47 63 47 71 ()}
        {Lisp-Entry "set-title-style" accessor #f 47 63 47 71 ()}
        {Lisp-Entry "comment-style" property #f 48 12 48 25 ()}
        {Lisp-Entry "get-comment-style" accessor #f 48 63 48 71 ()}
        {Lisp-Entry "set-comment-style" accessor #f 48 63 48 71 ()}
        {Lisp-Entry "expr-comment-style" property #f 49 12 49 30 ()}
        {Lisp-Entry "get-expr-comment-style" accessor #f 49 63 49 71 ()}
        {Lisp-Entry "set-expr-comment-style" accessor #f 49 63 49 71 ()}
        {Lisp-Entry "declaration-keyword-style" property #f 50 12 50 37 ()}
        {Lisp-Entry "get-declaration-keyword-style" accessor #f 50 63 50 71 ()}
        {Lisp-Entry "set-declaration-keyword-style" accessor #f 50 63 50 71 ()}
        {Lisp-Entry "declaration-style" property #f 51 12 51 29 ()}
        {Lisp-Entry "get-declaration-style" accessor #f 51 63 51 71 ()}
        {Lisp-Entry "set-declaration-style" accessor #f 51 63 51 71 ()}
        {Lisp-Entry "keyword-style" property #f 52 12 52 25 ()}
        {Lisp-Entry "get-keyword-style" accessor #f 52 63 52 71 ()}
        {Lisp-Entry "set-keyword-style" accessor #f 52 63 52 71 ()}
        {Lisp-Entry "tag-style" property #f 53 12 53 21 ()}
        {Lisp-Entry "get-tag-style" accessor #f 53 63 53 71 ()}
        {Lisp-Entry "set-tag-style" accessor #f 53 63 53 71 ()}
        {Lisp-Entry "specifier-style" property #f 54 12 54 27 ()}
        {Lisp-Entry "get-specifier-style" accessor #f 54 63 54 71 ()}
        {Lisp-Entry "set-specifier-style" accessor #f 54 63 54 71 ()}
        {Lisp-Entry "char-style" property #f 55 12 55 22 ()}
        {Lisp-Entry "get-char-style" accessor #f 55 63 55 71 ()}
        {Lisp-Entry "set-char-style" accessor #f 55 63 55 71 ()}
        {Lisp-Entry "number-style" property #f 56 12 56 24 ()}
        {Lisp-Entry "get-number-style" accessor #f 56 63 56 71 ()}
        {Lisp-Entry "set-number-style" accessor #f 56 63 56 71 ()}
        {Lisp-Entry "boolean-style" property #f 57 12 57 25 ()}
        {Lisp-Entry "get-boolean-style" accessor #f 57 63 57 71 ()}
        {Lisp-Entry "set-boolean-style" accessor #f 57 63 57 71 ()}
        {Lisp-Entry "string-style" property #f 58 12 58 24 ()}
        {Lisp-Entry "get-string-style" accessor #f 58 63 58 71 ()}
        {Lisp-Entry "set-string-style" accessor #f 58 63 58 71 ()}
        {Lisp-Entry "delimited-string-style" property #f 59 12 59 34 ()}
        {Lisp-Entry "get-delimited-string-style" accessor #f 59 63 59 71 ()}
        {Lisp-Entry "set-delimited-string-style" accessor #f 59 63 59 71 ()}
        {Lisp-Entry "named-string-style" property #f 60 12 60 30 ()}
        {Lisp-Entry "get-named-string-style" accessor #f 60 63 60 71 ()}
        {Lisp-Entry "set-named-string-style" accessor #f 60 63 60 71 ()}
        {Lisp-Entry "quotation-style" property #f 61 12 61 27 ()}
        {Lisp-Entry "get-quotation-style" accessor #f 61 63 61 71 ()}
        {Lisp-Entry "set-quotation-style" accessor #f 61 63 61 71 ()}
        {Lisp-Entry "feature-style" property #f 62 12 62 25 ()}
        {Lisp-Entry "get-feature-style" accessor #f 62 63 62 71 ()}
        {Lisp-Entry "set-feature-style" accessor #f 62 63 62 71 ()}
        {Lisp-Entry "completions" property #f 63 12 63 23 ()}
        {Lisp-Entry "get-completions" accessor #f 63 63 63 71 ()}
        {Lisp-Entry "set-completions" accessor #f 63 63 63 71 ()}
        {Lisp-Entry "translate-keys?" property #f 64 12 64 27 ()}
        {Lisp-Entry "get-translate-keys?" accessor #f 64 63 64 71 ()}
        {Lisp-Entry "set-translate-keys?" accessor #f 64 63 64 71 ()}}}})
"Lisp-Text-View"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "text" "Lisp-Text-View.jazz"} 1265989215
    {Lisp-Entry "jazz.editor.lisp.text.Lisp-Text-View" module #f 37 18 37 54 ("jazz")
      {Lisp-Entry "Auto-Complete-Characters" constant #f 52 10 52 34 ()}
      {Lisp-Entry "Lisp-Text-View" class #f 56 7 56 21 ("cond" "list" "x" "lambda" "for-each" "b" "a" "foo" "virtual" "public" "method" "comment" "Code-Text-View")
        {Lisp-Entry "new-syntax" method #f 59 20 59 30 ("Lisp-Syntax" "new")}
        {Lisp-Entry "host-icon" method #f 68 25 68 34 ("Image-Resource")}
        {Lisp-Entry "get-locat-container" method #f 77 18 77 37 ("parse" "if" "get-moniker" "moniker" "let")}
        {Lisp-Entry "focus-actions" method #f 89 20 89 33 ("nextmethod" "lisp-text" "'lisp-text" "find-actions" "cons")}
        {Lisp-Entry "context-menu" method #f 99 20 99 32 ("get-context-menu" "track-popup-menu" "edit-references" "edit-definitions" "move-caret:" "context-menu-click" "always" "'always" "else" "never" "'never" "outside-selection" "'outside-selection" "not" "and" "cond" "move-caret" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "pos")}
        {Lisp-Entry "tab-press" method #f 112 20 112 29 ("tabulate" "lambda" "undoer" "with-atomic-undo" "insert-char" "shift-key?" "nextmethod" "accepts-returns?" "not" "has-completion?" "or" "if" "modifiers" "key")}
        {Lisp-Entry "colorize-syntax" method #f 128 20 128 35 ("colorize-comments" "finish-current" "when" "colorize-declarations" "new-colorizer" "not" "essay" "colorizer" "end:" "text-beginning" "start:" "self" "explorer-class" "new" "expl" "let" "lambda" "with-safe-explore" "entries?:" "nextmethod" "recoloring?" "recoloring?:")}
        {Lisp-Entry "Syntax-Targets" definition #f 144 14 144 28 ()}
        {Lisp-Entry "Syntax-Automata" definition #f 147 14 147 29 ()}
        {Lisp-Entry "syntax-targets" method #f 151 20 151 34 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" method #f 157 20 157 35 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" method #f 163 20 163 42 ("Syntax-Targets")}
        {Lisp-Entry "compute-syntax-automata" method #f 167 20 167 43 ("text-constituent?" "build-search-automata" "when" "syntax-targets" "targets" "let")}
        {Lisp-Entry "colorize-type" method #f 173 20 173 33 ("recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "colorize-declarations" method #f 177 20 177 41 ("get-application" "get-documentation-cataloguer" "Feature" "'Feature" "feature" "Literal" "'Literal" "literal" "Named-Comment" "'Named-Comment" "named-comment" "Expr-Comment" "'Expr-Comment" "expr-comment" "Named-String" "'Named-String" "named-string" "Delimited-String" "'Delimited-String" "delimited-string" "String" "'String" "string" "Boolean" "'Boolean" "boolean" "Number" "'Number" "number" "Char" "'Char" "char" "colorize-specifier" "specifier" "colorize-tag" "tag" "Keyword" "'Keyword" "Default" "'Default" "get-style-at" "get-name" "eq?" "keyword" "Quotation" "'Quotation" "quasiquote" "quote" "memq?" "case" "mode" "Declaration-Keyword" "'Declaration-Keyword" "declaration-style" "apply-coloring" "setter" "'setter" "getter" "'getter" "neq?" "and" "when" "documented?" "marked" "end" "start" "symbol" "kind" "context" "lambda" "walk-declarations" "colorizer" "expl")}
        {Lisp-Entry "colorize-tag" method #f 228 29 228 41 ("end" "start" "colorizer")}
        {Lisp-Entry "colorize-specifier" method #f 232 29 232 47 ("end" "start" "colorizer")}
        {Lisp-Entry "declaration-style" method #f 236 29 236 46 ("documented?")}
        {Lisp-Entry "colorize-comments" method #f 240 20 240 37 ("end-row:" "start-row:" "Title" "'Title" "4" "+" "Comment" "'Comment" "apply-coloring" "not" "if" "Cell" "new" "paragraph-length" "len" "get-row" "row" "let*" "title?" "lambda" "for-each-comment" "end" "end:" "start" "start:" "colorizer" "expl")}
        {Lisp-Entry "recolorize-text" method #f 254 20 254 35 ("nextmethod" "colorize-comments" "recolorize-comments" "finish-current" "exit-list" "colorize-declarations" "iterate" "continuation-return" "get-end" "get-row" ">" "when" "set-line-hook" "exit" "lambda" "continuation-capture" "new-colorizer" "colorizer" "expl" "let" "Explore-Error" "catch" "end:" "start:" "self" "explorer-class" "Cell" "new" "pos" "skip-whitespace" "col" "paragraph-string" "line" "let*" "explorer" "start-row" "recolorize-declarations" "define" "end-row" "start")}
        {Lisp-Entry "Comment-Styles" definition #f 306 14 306 28 ("Comment" "Title")}
        {Lisp-Entry "String-Styles" definition #f 309 14 309 27 ("Named-String" "Delimited-String" "String")}
        {Lisp-Entry "commented?" method #f 313 20 313 30 ("get-style-at" "comment-style?" "pos")}
        {Lisp-Entry "comment-style?" method #f 317 20 317 34 ("Comment-Styles" "inherits?" "style-name" "lambda" "some?" "style")}
        {Lisp-Entry "string-style?" method #f 323 20 323 33 ("String-Styles" "inherits?" "style-name" "lambda" "some?" "style")}
        {Lisp-Entry "textual-style?" method #f 329 20 329 34 ("string-style?" "comment-style?" "or" "style")}
        {Lisp-Entry "favorite-completions" method #f 334 20 334 40 ("preferences" "get-completions")}
        {Lisp-Entry "on-tabulate" method #f 361 11 361 22 ("tabulate" "lambda" "undoer" "with-atomic-undo" "evt")}
        {Lisp-Entry "return-press" method #f 367 20 367 32 ("tabulate" "nextmethod" "lambda" "undoer" "with-atomic-undo" "key")}
        {Lisp-Entry "tabulate" method #f 374 20 374 28 ("ignore" "'ignore" "action:" "set-modified?" "when" "+" "get-row" "tabulate-lines" "last-delta" "modified?" "receive" "set-caret" "with-safe-explore" "lambda" "with-update-locked" "get-end" "end" "get-start" "start" "let")}
        {Lisp-Entry "tabulate-lines" method #f 389 20 389 34 ("values" "set!" "0" "/=" "when" "tabulate-line" "delta" "with" "to" "from" "row" "for" "loop" "last-delta" "modified?" "let" "end" "start")}
        {Lisp-Entry "tabulate-line" method #f 400 20 400 33 ("tabulate-delta" "+" "make-string" "list" "Cell" "Range$Cell$" "new" "replace-text" "get-column" "actual" "let" "0" "/=" "when" "delta" "tabulate-column" "define" "row")}
        {Lisp-Entry "tabulate-delta" method #f 412 18 412 32 ("get-column" "*" "-1" "decrease!" "when" "specials" "bind" "element" "upper-case?" "default-col" "4" "threshold" "proposed-col" "else" "'else" "neq?" "2" "/=" "first-row" "first-last" "list" "get-tabulate" "tabulate" "get-modifiers" "get-lisp-form" "form" "info" "first-indent" "first-dispatch?" "first-without?" "first-with?" "starts-with?" "first-call-with?" "tag?" "first-tag?" "'symbol" "get-kind" "eq?" "essay" "first-symbol" "first-string" "get-col" "+" "null?" "col" "rank" "length" "opening" "collect-backward-exprs" "remove-expression-comments" "start:" "self" "explorer-class" "expl" "Cell" "new" "pos" "get-end" "get-char" "eqv?" "range" "mark" "lambda" "collect-if" "cons" "pair?" "lst" "remove-specifiers" "=" "get-start" "get-row" "line" "first" "reverse" ">" "reversed" "let*" "count" "first-on-last-line" "1" "cardinality" "cast" "-" "subseq" "string->symbol" "ends-with?" "string" "effective-symbol" "cdr" "increase!" "set!" "memq?" "or" "if" "car" "get-range" "get-string" "find-symbol" "symbol" "not" "not-null?" "and" "while" "done?" "0" "total" "let" "modifiers" "expressions" "count-modifiers" "define" "row")}
        {Lisp-Entry "evaluate-selection" method #f 503 20 503 38 ("evaluate-range" ".1" "sleep" ":wait" "with-cursor" "bell" "not" "if" "current-declaration-range" "range" "let" "lambda" "with-safe-explore")}
        {Lisp-Entry "evaluate-buffer" method #f 515 20 515 35 ("buffer-selection" "evaluate-range" ".1" "sleep" "lambda" ":wait" "with-cursor")}
        {Lisp-Entry "evaluate-range" method #f 522 20 522 34 ("user-message" "not-null?" "names" "evaluate-expressions" "prepare-expressions" "col" "line" "container" "str" "syntax" "bind" "bell" "not" "if" "get-debugger-manager" "get-focused-process" "debugged" "queue-list" "explore-error" "nu<?" "enqueue" "form-name" "name" "get-range" "read-text-form" "form" "nu<=?" "cond" "e" "s" "iterate" "forward-expr" "when" "new-queue" "queue" "end:" "start:" "self" "explorer-class" "new" "expl" "get-end" "end" "get-start" "start" "let" "collect-declaration-names" "define" "range")}
        {Lisp-Entry "prepare-expressions" method #f 553 29 553 48 ("range")}
        {Lisp-Entry "current-name" method #f 562 20 562 32 ("get-string" "when" "current-expr-range" "range" "let")}
        {Lisp-Entry "current-expr" method #f 568 20 568 32 ("range-expr" "when" "current-expr-range" "range" "let")}
        {Lisp-Entry "range-expr" method #f 574 20 574 30 ("get-string" "read-string-element" "lambda" "get-readtable" "with-readtable" "range")}
        {Lisp-Entry "current-symbol" method #f 580 11 580 25 ("symbol?" "when" "current-expr" "expr" "let")}
        {Lisp-Entry "expr-at" method #f 586 20 586 27 ("butlast" "read-string-element" "ends-with?" "if" "lambda" "get-readtable" "with-readtable" "expr-range" "get-string" "string" "let" "pos")}
        {Lisp-Entry "flash-character?" method #f 600 20 600 36 ("memq?" "char")}
        {Lisp-Entry "headers" constant #f 609 12 609 19 ("4" "make-string" "string-append" "list")}
        {Lisp-Entry "get-headers" method #f 614 20 614 31 ("headers")}
        {Lisp-Entry "get-context" method #f 623 20 623 31 ("jazz")}
        {Lisp-Entry "current-declaration" method #f 627 11 627 30 ("get-string" "read-string-element" "when" "current-declaration-range" "range" "let")}
        {Lisp-Entry "current-declaration-range" method #f 633 11 633 36 ("get-end" "declaration-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "declaration-range" method #f 639 18 639 35 ("else" "inner-name?" "declaration-name?" "and" "get-end" "nu=?" "get-start" "get-row" "=" "or" "namespace-name?" "cond" "form-expr" "name" "get-range" "new-range" "outer-expr" "not" "if" "range" "iterate" "end:" "start:" "self" "explorer-class" "new" "expl" "let" "pos")}
        {Lisp-Entry "Highlight-Styles" definition #f 666 14 666 30 ("Break" "Walk-Fatal" "Walk-Warning" "Reference")}
        {Lisp-Entry "highlight-style?" definition #f 670 15 670 31 ("Highlight-Styles" "inherits?" "style-name" "lambda" "some?" "style")}
        {Lisp-Entry "constant?" definition #f 676 15 676 24 ("keyword?" "symbol?" "char?" "boolean?" "number?" "or" "expr")}
        {Lisp-Entry "on-highlight-selection" method #f 684 11 684 33 ("highlight-expression" "unhighlight-expression" "highlight-style?" "get-end" "get-style-at" "style" "constant?" "range-expr" "constant" "bell" "not" "or" "if" "current-expr-range" "expr-range" "get-start" "declaration-range" "let" "evt")}
        {Lisp-Entry "on-remove-highlights" method #f 698 11 698 31 ("remove-highlights" "bell" "not" "if" "get-start" "declaration-range" "range" "let" "evt")}
        {Lisp-Entry "find-expression" method #f 705 18 705 33 ("get-range" "continuation-return" "get-constant" "eqv?" "constant?" "and" "when" "mode" "iterate-expression" "return" "lambda" "continuation-capture" "standardize-form" "end:" "get-start" "start:" "self" "explorer-class" "new" "expl" "let" "constant" "range")}
        {Lisp-Entry "highlight-expression" method #f 717 18 717 38 ("get-end" "Reference" "'Reference" "apply-style" "get-constant" "eqv?" "constant?" "and" "when" "mode" "lambda" "iterate-expression" "standardize-form" "end:" "get-start" "start:" "self" "explorer-class" "new" "expl" "let" "constant" "range")}
        {Lisp-Entry "unhighlight-expression" method #f 726 18 726 40 ("get-end" "default-style" "apply-style" "get-constant" "eqv?" "constant?" "and" "when" "mode" "lambda" "iterate-expression" "standardize-form" "end:" "get-start" "start:" "self" "explorer-class" "new" "expl" "let" "constant" "range")}
        {Lisp-Entry "remove-highlights" method #f 735 18 735 35 ("get-end" "end:" "get-start" "get-row" "start:" "get-runs" "invalidate-paragraph" "default-style" "set-style" "highlight-style?" "when" "get-style" "style" "let" "run" "for-each" "paragraph" "row" "lambda" "for-each-paragraph" "range")}}}})
"_lisp"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "_lisp.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp" module #f 37 8 37 24 ("jazz")
      {Lisp-Entry "*lisp-forms*" definition #f 49 12 49 24 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-lisp-form" definition #f 53 20 53 33 ("*lisp-forms*" "table-ref" "name")}
      {Lisp-Entry "register-lisp-form" definition #f 57 20 57 38 ("get-name" "*lisp-forms*" "table-set!" "form")}
      {Lisp-Entry "Lisp-Form" class #f 61 7 61 16 ("Object")
        {Lisp-Entry "name" slot #f 64 8 64 12 ()}
        {Lisp-Entry "get-name" accessor #f 64 28 64 36 ()}
        {Lisp-Entry "dialect" slot #f 65 8 65 15 ()}
        {Lisp-Entry "get-dialect" accessor #f 65 28 65 36 ()}
        {Lisp-Entry "namespace?" slot #f 66 8 66 18 ()}
        {Lisp-Entry "get-namespace?" accessor #f 66 28 66 36 ()}
        {Lisp-Entry "declaration?" slot #f 67 8 67 20 ()}
        {Lisp-Entry "get-declaration?" accessor #f 67 28 67 36 ()}
        {Lisp-Entry "inner?" slot #f 68 8 68 14 ()}
        {Lisp-Entry "get-inner?" accessor #f 68 28 68 36 ()}
        {Lisp-Entry "modifiers" slot #f 69 8 69 17 ()}
        {Lisp-Entry "get-modifiers" accessor #f 69 28 69 36 ()}
        {Lisp-Entry "keywords" slot #f 70 8 70 16 ()}
        {Lisp-Entry "get-keywords" accessor #f 70 28 70 36 ()}
        {Lisp-Entry "tabulate" slot #f 71 8 71 16 ()}
        {Lisp-Entry "get-tabulate" accessor #f 71 28 71 36 ()}
        {Lisp-Entry "walk" slot #f 72 8 72 12 ()}
        {Lisp-Entry "get-walk" accessor #f 72 28 72 36 ()}
        {Lisp-Entry "initialize" method #f 75 20 75 30 ("walk~self" "tabulate~self" "keywords~self" "modifiers~self" "inner?~self" "declaration?~self" "namespace?~self" "dialect~self" "name~self" "set!" "nextmethod" "walk" "walk:" "tabulate" "tabulate:" "keywords" "keywords:" "modifiers" "modifiers:" "inner?" "inner?:" "declaration?" "declaration?:" "namespace?" "namespace?:" "jazz" "'jazz" "dialect" "dialect:" "name")}}
      {Lisp-Entry "lisp-form-namespace?" definition #f 101 20 101 40 ("get-namespace?" "and" "get-lisp-form" "lisp-form" "let" "symbol")}
      {Lisp-Entry "lisp-form-declaration?" definition #f 106 20 106 42 ("get-declaration?" "and" "get-lisp-form" "lisp-form" "let" "symbol")}
      {Lisp-Entry "lisp-form-inner?" definition #f 111 20 111 36 ("get-inner?" "and" "get-lisp-form" "lisp-form" "let" "symbol")}
      {Lisp-Entry "lisp-form-modifiers" definition #f 116 20 116 39 ("get-modifiers" "and" "get-lisp-form" "lisp-form" "let" "symbol")}
      {Lisp-Entry "lisp-form-keywords" definition #f 121 20 121 38 ("get-keywords" "and" "get-lisp-form" "lisp-form" "let" "symbol")}
      {Lisp-Entry "lisp-form-tabulate" definition #f 126 20 126 38 ("get-tabulate" "and" "get-lisp-form" "lisp-form" "let" "symbol")}
      {Lisp-Entry "lisp-form-walk" definition #f 131 20 131 34 ("get-walk" "and" "get-lisp-form" "lisp-form" "let" "symbol")}}})
"autoload"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "autoload.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.autoload" module #f 37 18 37 43 ("jazz")}})
"install"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "install.scm"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.install" unit #f 37 6 37 30 ()
      {Lisp-Entry "Lisp-File-Entry" define ("literal") 40 21 40 36 ("jazz.editor.lisp.literals.construct-lisp-file-entry")}
      {Lisp-Entry "Lisp-Entry" define ("literal") 41 21 41 31 ("jazz.editor.lisp.literals.construct-lisp-entry")}}})
"literals"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "literals.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.literals" module #f 37 8 37 33 ("jazz")
      {Lisp-Entry "construct-lisp-file-entry" definition #f 44 21 44 46 ("seconds->time" "Lisp-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-lisp-entry" definition #f 48 21 48 41 ("Lisp-Entry" "new" "definitions" "references" "end-column" "end-line" "column" "line" "signature" "kind" "name")}}})
"syntax"
 ({Lisp-File-Entry {File jazz.editor.lisp "src" "jazz" "editor" "lisp" "syntax.jazz"} 1258811565
    {Lisp-Entry "jazz.editor.lisp.syntax" module #f 37 18 37 41 ("jazz")
      {Lisp-Entry "define-form" macro #f 40 15 40 26 (",walk" "walk:" ",tabulate" "',tabulate" "tabulate:" ",keywords" "',keywords" "keywords:" ",modifiers" "',modifiers" "modifiers:" ",inner?" "',inner?" "inner?:" ",declaration?" "',declaration?" "declaration?:" ",namespace?" "',namespace?" "namespace?:" ",dialect" "',dialect" "dialect:" ",name" "',name" "Lisp-Form" "new" "register-lisp-form" "walk" "tabulate" "keywords" "modifiers" "inner?" "declaration?" "namespace?" "jazz" "'jazz" "dialect" "bind-keywords" "rest" "name")}}})
