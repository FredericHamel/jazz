"Dispatcher"
 ({Lisp-File-Entry {File core "src" "core" "generic" "runtime" "Dispatcher.jazz"} 1237033579
    {Lisp-Entry "Dispatcher" #f 47 7 47 17 ()
      {Lisp-Entry "dag-root" #f 50 12 50 20 ()}
      {Lisp-Entry "get-dag-root" #f 50 31 50 39 ()}
      {Lisp-Entry "set-dag-root" #f 50 31 50 39 ()}
      {Lisp-Entry "Root-Signature" #f 53 14 53 28 ("root-signature" "'root-signature")}
      {Lisp-Entry "initialize" #f 57 11 57 21 ("Root-Signature" "Dispatch-Node" "new" "dag-root" "set!" "nextmethod")}
      {Lisp-Entry "insert-signature" #f 62 18 62 34 ("insert-node" "else" "proper-list?" "not" "type-name" "error" "locate-node" "cond" "standardize-signature" "let" "category" "signature" "procedure" "symbol")}
      {Lisp-Entry "standardize-signature" #f 74 11 74 32 ("List" "get-type" "essay" "get-typeref" "typeref" "let" "parameter" "function" "accumulate" "signature")}
      {Lisp-Entry "insert-node" #f 82 18 82 29 ("get-specific-nodes" "add-specific-node" "remove-specific-node" "add-generic-node" "remove-generic-node" "get-signature" "can-call-with?" "neq?" "and" "when" "specific" "generic" "function" "for-each" "Dispatch-Node" "new" "node" "gather-generics" "generics" "let*" "signature" "procedure")}
      {Lisp-Entry "remove-node" #f 99 18 99 29 ("remove-generic-node" "get-generic-nodes" "remove-specific-node" "get-specific-nodes" "add-generic-node" "add-specific-node" "specific" "generic" "function" "for-each" "node")}
      {Lisp-Entry "locate-node" #f 114 18 114 29 ("first" "get-signature" "equal?" "length" "1" "=" "and" "if" "gather-generics" "matching" "let" "signature")}
      {Lisp-Entry "gather-generics" #f 122 18 122 33 ("dag-root" "cons" "memq?" "not" "and" "get-specific-nodes" "set!" "can-call-with?" "when" "child-node" "for-each" "no-match?" "walk-node" "function" "iter" "letrec" "generics" "let" "parameter-types")}
      {Lisp-Entry "find-generics" #f 138 18 138 31 ("dag-root" "car" "eq?" "if" "gather-generics" "generics" "let" "parameter-types")}
      {Lisp-Entry "get-node-procedure" #f 145 18 145 36 ("get-procedure" "node")}}
    {Lisp-Entry "Dispatch-Node" #f 154 7 154 20 ("initialize")
      {Lisp-Entry "procedure" #f 157 12 157 21 ()}
      {Lisp-Entry "get-procedure" #f 157 52 157 60 ()}
      {Lisp-Entry "set-procedure" #f 157 52 157 60 ()}
      {Lisp-Entry "signature" #f 158 12 158 21 ()}
      {Lisp-Entry "get-signature" #f 158 52 158 60 ()}
      {Lisp-Entry "set-signature" #f 158 52 158 60 ()}
      {Lisp-Entry "generic-nodes" #f 159 12 159 25 ()}
      {Lisp-Entry "get-generic-nodes" #f 159 52 159 60 ()}
      {Lisp-Entry "set-generic-nodes" #f 159 52 159 60 ()}
      {Lisp-Entry "specific-nodes" #f 160 12 160 26 ()}
      {Lisp-Entry "get-specific-nodes" #f 160 52 160 60 ()}
      {Lisp-Entry "set-specific-nodes" #f 160 52 160 60 ()}
      {Lisp-Entry "initialize" #f 163 11 163 21 ("generic-nodes" "signature" "procedure" "set!" "nextmethod" "gen" "sig" "proc")}
      {Lisp-Entry "print" #f 170 11 170 16 ("type-name" "map" "format" "Root-Signature" "signature" "eq?" "if" "function" "self" "print-unreadable" "readably" "printer")}
      {Lisp-Entry "can-call-with?" #f 178 11 178 25 ("null?" "finally" "return" "Java" "can-cast-into?" "not" "and" "when" "r2" "parameter-type" "r1" "remainder" "in" "data-type" "for" "loop" "Root-Signature" "signature" "eq?" "if" "sig")}
      {Lisp-Entry "add-generic-node" #f 189 11 189 27 ("cons" "set-generic-nodes" "equal?" "generic" "function" "generic-nodes" "find-in" "unless" "get-signature" "sig" "let" "node")}
      {Lisp-Entry "add-specific-node" #f 197 11 197 28 ("cons" "set-specific-nodes" "equal?" "specific" "function" "specific-nodes" "find-in" "unless" "get-signature" "sig" "let" "node")}
      {Lisp-Entry "remove-generic-node" #f 205 11 205 30 ("generic-nodes" "remove" "set-generic-nodes" "generic")}
      {Lisp-Entry "remove-specific-node" #f 209 11 209 31 ("specific-nodes" "remove" "set-specific-nodes" "specific")}}})
"_base"
 ({Lisp-File-Entry {File core "src" "core" "base" "_base.scm"} 1251542558
    {Lisp-Entry "core.base" #f 37 8 37 17 ()}})
"_builder"
 ({Lisp-File-Entry {File core "src" "core" "module" "builder" "_builder.scm"} 1251126336
    {Lisp-Entry "core.module.builder" #f 38 18 38 37 ()
      {Lisp-Entry "jazz.manifest-references-valid?" #f 50 9 50 40 ("library-references-valid?" "jazz.every?" "if" "get-manifest-references" "references" "let" "bin")
        {Lisp-Entry "get-manifest-references" #f 51 11 51 34 ("%%manifest-references" "and" "jazz.load-manifest" "manifest" "bin" "%%resource-package" "jazz.manifest-pathname" "manifest-filepath" "let")}
        {Lisp-Entry "library-references-valid?" #f 56 11 56 36 ("private" "'private" "%%get-declaration-access" "%%neq?" "%%get-declaration-toplevel" "%%get-lexical-binding-name" "%%eq?" "else" "jazz.find-declaration" "%%not" "cond" "declaration" "symbols" "iter" "%%pair?" "if" "found" "symbol" "lambda" "jazz.every?" "and" "jazz.outline-library" "library-declaration" "%%cdr" "library-references" "%%car" "library-locator" "let" "lst")}}
      {Lisp-Entry "jazz.compile-module-internal" #f 88 9 88 37 ("force?:" "ld-options:" "cc-options:" "options:" "jazz.compile-source" "jazz.requested-module-resource" "jazz.requested-module-name" "parameterize" "bin-uptodate?" "bin" "src" "lambda" "jazz.with-module-src/bin" "force?" "ld-options" "cc-options" "options" "#!key" "module-name")}
      {Lisp-Entry "jazz.compile-source" #f 96 9 96 28 ("jazz.update-manifest-compile-time" "else" "jazz.Module-Declaration" "jazz.generate-reference-list" "jazz.Library-Declaration" "%%is?" "cond" "jazz.get-catalog-entry" "library-declaration" "references" "src-filepath" "jazz.manifest-pathname" "manifest-filepath" "ld-options:" "cc-options:" "options:" "output:" "compile-file" "compile" "'compile" "jazz.walk-for" "parameterize" "lambda" "%%resource-extension" "jazz.with-extension-reader" "jazz.create-directories" "force-output" "newline" "display" "%%package-name" "jazz.find-build-package" "build-package" "jazz.resource-build-dir" "bindir" "jazz.resource-pathname" "pathname" "%%resource-path" "path" "%%resource-package" "package" "jazz.manifest-references-valid?" "and" "%%not" "if" "jazz.compile-options" "or" "let" "force?" "ld-options" "cc-options" "options" "#!key" "manifest-name" "bin-uptodate?" "bin" "src")}
      {Lisp-Entry "jazz.find-build-package" #f 128 9 128 32 ("jazz.Bin-Repository" "jazz.repository-find-package" "name")}
      {Lisp-Entry "jazz.build-module-internal" #f 137 9 137 35 ("jazz.compile-module" "phase" "declaration" "lambda" "jazz.for-each-submodule" "module-name")}
      {Lisp-Entry "jazz.for-each-submodule" #f 148 9 148 32 ("%%get-library-declaration-exports" "%%get-library-invoice-phase" "%%get-declaration-reference-name" "name" "%%get-library-invoice-library" "reference" "export" "%%get-library-declaration-requires" "%%get-module-declaration-requires" "for-each" "jazz.Module-Declaration" "jazz.is?" "jazz.error" "jazz.descendant-module?" "and" "protected" "'protected" "%%get-declaration-access" "%%eq?" "or" "jazz.outline-module" "declaration" "%%cons" "set!" "begin" "%%memq" "%%not" "if" "feature-requirement" "lambda" "jazz.parse-require" "require" "process-require" "define" "toplevel?" "phase" "module-name" "iter" "submodules" "let" "proc" "parent-name")}}})
"_class"
 ({Lisp-File-Entry {File core "src" "core" "class" "_class.scm"} 1237033579
    {Lisp-Entry "core.class" #f 37 8 37 18 ()}})
"_exception"
 ({Lisp-File-Entry {File core "src" "core" "exception" "_exception.scm"} 1237033579
    {Lisp-Entry "core.exception" #f 37 8 37 22 ()}})
"_generic"
 ({Lisp-File-Entry {File core "src" "core" "generic" "_generic.scm"} 1237033579
    {Lisp-Entry "core.generic" #f 37 8 37 20 ()}})
"_library"
 ({Lisp-File-Entry {File core "src" "core" "library" "_library.scm"} 1237033579
    {Lisp-Entry "core.library" #f 37 8 37 20 ()}})
"_module"
 ({Lisp-File-Entry {File core "src" "core" "module" "_module.scm"} 1237033579
    {Lisp-Entry "core.module" #f 37 8 37 19 ()}})
"_runtime"
 ({Lisp-File-Entry {File core "src" "core" "library" "runtime" "_runtime.scm"} 1250720196
    {Lisp-Entry "core.library.runtime" #f 37 18 37 38 ("jazz.Library" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Library" #f 48 19 48 31 ("%%get-library-exports" "exports" "%%get-library-name" "name" "jazz.allocate-library" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Library" #f 53 27 53 39 ()}
      {Lisp-Entry "jazz.new-library" #f 56 9 56 25 ("jazz.Library" "jazz.allocate-library" "exports" "name")}
      {Lisp-Entry "jazz.Libraries" #f 68 8 68 22 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.register-library" #f 72 9 72 30 ("jazz.Libraries" "%%table-set!" "eq?" "test:" "%%list->table" "jazz.new-library" "library" "let" "exports-list" "name")}
      {Lisp-Entry "jazz.get-library" #f 78 9 78 25 ("jazz.Libraries" "%%table-ref" "name")}
      {Lisp-Entry "jazz.require-library" #f 82 9 82 29 ("jazz.error" "jazz.Libraries" "%%table-ref" "or" "name")}
      {Lisp-Entry "jazz.library-ref" #f 87 9 87 25 ("jazz.error" "locator" "module-name" "jazz.bind" "jazz.global-value" "%%symbol?" "if" "%%get-library-exports" "%%table-ref" "info" "jazz.require-library" "library" "let" "jazz.load-module" "name" "library-name")}
      {Lisp-Entry "jazz.type-error" #f 105 9 105 24 ("jazz.error" "type" "value")}
      {Lisp-Entry "jazz.dispatch-error" #f 109 9 109 28 ("%%get-category-name" "%%get-field-name" "jazz.error" "category" "value" "field")}}}
  {Lisp-File-Entry {File core "src" "core" "generic" "runtime" "_runtime.scm"} 1238328024
    {Lisp-Entry "core.generic.runtime" #f 37 18 37 38 ()}}
  {Lisp-File-Entry {File core "src" "core" "class" "runtime" "_runtime.scm"} 1238328024
    {Lisp-Entry "core.class.runtime" #f 37 18 37 36 ()}}
  {Lisp-File-Entry {File core "src" "core" "base" "runtime" "_runtime.scm"} 1238328024
    {Lisp-Entry "core.base.runtime" #f 37 18 37 35 ()}})
"_syntax"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "_syntax.scm"} 1238328024
    {Lisp-Entry "core.library.syntax" #f 37 18 37 37 ()}}
  {Lisp-File-Entry {File core "src" "core" "generic" "syntax" "_syntax.scm"} 1238328024
    {Lisp-Entry "core.generic.syntax" #f 37 18 37 37 ()}}
  {Lisp-File-Entry {File core "src" "core" "class" "syntax" "_syntax.scm"} 1238328024
    {Lisp-Entry "core.class.syntax" #f 37 18 37 35 ()}}
  {Lisp-File-Entry {File core "src" "core" "base" "syntax" "_syntax.scm"} 1238328024
    {Lisp-Entry "core.base.syntax" #f 37 18 37 34 ()}})
"autoload"
 ({Lisp-File-Entry {File core "src" "core" "library" "runtime" "autoload.scm"} 1238328024
    {Lisp-Entry "core.library.runtime.autoload" #f 41 18 41 47 ()
      {Lisp-Entry "jazz.Autoloads" #f 44 8 44 22 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-autoloads" #f 48 9 48 27 ("jazz.Autoloads")}
      {Lisp-Entry "jazz.get-autoload" #f 52 9 52 26 ("jazz.Autoloads" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-autoload" #f 56 9 56 26 ("%%cons" "jazz.Autoloads" "%%table-set!" "loader" "module-name" "name")}
      {Lisp-Entry "jazz.require-autoload" #f 60 9 60 30 ("jazz.error" "jazz.get-autoload" "or" "name")}
      {Lisp-Entry "jazz.register-autoload" #f 65 9 65 31 ("jazz.register-package-autoload" "jazz.requested-module-resource" "%%resource-package" "package" "jazz.error" "jazz.set-autoload" "%%car" "%%eq?" "%%not" "or" "if" "jazz.get-autoload" "actual" "let" "loader" "module-name" "name")}
      {Lisp-Entry "jazz.autoload" #f 74 9 74 22 ("%%cdr" "jazz.require-autoload" "autoload-info" "let" "name")}
      {Lisp-Entry "jazz.autoreload" #f 79 9 79 24 ("%%cdr" "%%car" "jazz.reload-module" "jazz.require-autoload" "autoload-info" "let" "name")}}})
"boolean"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "boolean.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.boolean" #f 37 18 37 43 ()
      {Lisp-Entry "jazz.boolean" #f 40 9 40 21 ("%%boolean" "expr")}
      {Lisp-Entry "jazz.not-null?" #f 44 9 44 23 ("%%not-null?" "expr")}}})
"class"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "class.scm"} 1238328024
    {Lisp-Entry "core.class.syntax.class" #f 37 18 37 41 ()
      {Lisp-Entry "jazz.category-name" #f 40 8 40 26 ("jazz.object-size")}
      {Lisp-Entry "jazz.category-fields" #f 43 8 43 28 ("1" "jazz.category-name" "%%fx+")}
      {Lisp-Entry "jazz.category-virtual-size" #f 46 8 46 34 ("1" "jazz.category-fields" "%%fx+")}
      {Lisp-Entry "jazz.category-ancestors" #f 49 8 49 31 ("1" "jazz.category-virtual-size" "%%fx+")}
      {Lisp-Entry "jazz.category-descendants" #f 52 8 52 33 ("1" "jazz.category-ancestors" "%%fx+")}
      {Lisp-Entry "jazz.class-ascendant" #f 55 8 55 28 ("1" "jazz.category-descendants" "%%fx+")}
      {Lisp-Entry "jazz.class-interfaces" #f 58 8 58 29 ("1" "jazz.class-ascendant" "%%fx+")}
      {Lisp-Entry "jazz.class-slots" #f 61 8 61 24 ("1" "jazz.class-interfaces" "%%fx+")}
      {Lisp-Entry "jazz.class-instance-size" #f 64 8 64 32 ("1" "jazz.class-slots" "%%fx+")}
      {Lisp-Entry "jazz.class-level" #f 67 8 67 24 ("1" "jazz.class-instance-size" "%%fx+")}
      {Lisp-Entry "jazz.class-dispatch-table" #f 70 8 70 33 ("1" "jazz.class-level" "%%fx+")}
      {Lisp-Entry "jazz.class-core-method-alist" #f 73 8 73 36 ("1" "jazz.class-dispatch-table" "%%fx+")}
      {Lisp-Entry "jazz.class-core-virtual-alist" #f 76 8 76 37 ("1" "jazz.class-core-method-alist" "%%fx+")}
      {Lisp-Entry "jazz.class-core-virtual-names" #f 79 8 79 37 ("1" "jazz.class-core-virtual-alist" "%%fx+")}
      {Lisp-Entry "jazz.class-core-vtable" #f 82 8 82 30 ("1" "jazz.class-core-virtual-names" "%%fx+")}
      {Lisp-Entry "jazz.class-class-table" #f 85 8 85 30 ("1" "jazz.class-core-vtable" "%%fx+")}
      {Lisp-Entry "jazz.class-interface-table" #f 88 8 88 34 ("1" "jazz.class-class-table" "%%fx+")}
      {Lisp-Entry "jazz.class-size" #f 92 8 92 23 ("1" "jazz.class-interface-table" "%%fx+")}
      {Lisp-Entry "%%get-category-name" #f 96 20 96 39 ("category")}
      {Lisp-Entry "%%get-category-fields" #f 100 20 100 41 ("category")}
      {Lisp-Entry "%%set-category-fields" #f 104 20 104 41 ("fields" "category")}
      {Lisp-Entry "%%get-category-virtual-size" #f 108 20 108 47 ("category")}
      {Lisp-Entry "%%set-category-virtual-size" #f 112 20 112 47 ("virtual-size" "category")}
      {Lisp-Entry "%%get-category-ancestors" #f 116 20 116 44 ("category")}
      {Lisp-Entry "%%set-category-ancestors" #f 120 20 120 44 ("ancestors" "category")}
      {Lisp-Entry "%%get-category-descendants" #f 124 20 124 46 ("category")}
      {Lisp-Entry "%%set-category-descendants" #f 128 20 128 46 ("descendants" "category")}
      {Lisp-Entry "%%get-class-ascendant" #f 132 20 132 41 ("class")}
      {Lisp-Entry "%%get-class-interfaces" #f 136 20 136 42 ("class")}
      {Lisp-Entry "%%get-class-slots" #f 140 20 140 37 ("class")}
      {Lisp-Entry "%%set-class-slots" #f 144 20 144 37 ("slots" "class")}
      {Lisp-Entry "%%get-class-instance-size" #f 148 20 148 45 ("class")}
      {Lisp-Entry "%%set-class-instance-size" #f 152 20 152 45 ("size" "class")}
      {Lisp-Entry "%%get-class-level" #f 156 20 156 37 ("class")}
      {Lisp-Entry "%%set-class-level" #f 160 20 160 37 ("size" "class")}
      {Lisp-Entry "%%get-class-dispatch-table" #f 164 20 164 46 ("class")}
      {Lisp-Entry "%%set-class-dispatch-table" #f 168 20 168 46 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-method-alist" #f 172 20 172 49 ("class")}
      {Lisp-Entry "%%set-class-core-method-alist" #f 176 20 176 49 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-virtual-alist" #f 180 20 180 50 ("class")}
      {Lisp-Entry "%%set-class-core-virtual-alist" #f 184 20 184 50 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-virtual-names" #f 188 20 188 50 ("class")}
      {Lisp-Entry "%%set-class-core-virtual-names" #f 192 20 192 50 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-vtable" #f 196 20 196 43 ("class")}
      {Lisp-Entry "%%set-class-core-vtable" #f 200 20 200 43 ("vtable" "class")}
      {Lisp-Entry "%%get-class-class-table" #f 204 20 204 43 ("class")}
      {Lisp-Entry "%%set-class-class-table" #f 208 20 208 43 ("vtable" "class")}
      {Lisp-Entry "%%get-class-interface-table" #f 212 20 212 47 ("class")}
      {Lisp-Entry "%%set-class-interface-table" #f 216 20 216 47 ("vtable" "class")}
      {Lisp-Entry "%%get-object-class" #f 220 20 220 38 ("object")}
      {Lisp-Entry "%%set-object-class" #f 224 20 224 38 ("class" "object")}
      {Lisp-Entry "%%final-dispatch" #f 228 20 228 36 ("implementation" "object")}
      {Lisp-Entry "%%class-dispatch" #f 232 20 232 36 ("implementation-rank" "class-level" "object")}
      {Lisp-Entry "%%interface-dispatch" #f 236 20 236 40 ("implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "%%class-native-dispatch" #f 240 20 240 43 ("implementation-rank" "class-level" "object")}
      {Lisp-Entry "%%interface-native-dispatch" #f 244 20 244 47 ("implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "%%c-class-of" #f 250 24 250 36 ("obj")}
      {Lisp-Entry "%%class-of" #f 293 24 293 34 ("jazz.i-class-of" "%%get-object-class" "%%object?" "if" "else" ",symbol" "%%c-class-of" "compile" "jazz.walk-for" "case" "symbol" "lambda" "jazz.with-uniqueness" "obj")}
      {Lisp-Entry "%%i-class-of-impl" #f 304 24 304 41 ("jazz.class-of-native" "%%get-object-class" "%%object?" "if" "else" ",var" "%%c-class-of" "compile" "jazz.walk-for" "case" "var")}
      {Lisp-Entry "%%class-of-impl" #f 313 24 313 39 ("jazz.error" ",var" "%%class-of" "or" "jazz.debug-user?" "if" "var")}
      {Lisp-Entry "%%class-of" #f 320 24 320 34 ("jazz.class-of-native" "%%get-object-class" ",symbol" "%%object?" "if" "symbol" "lambda" "jazz.with-uniqueness" "obj")}}})
"classes"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "classes.scm"} 1251729948
    {Lisp-Entry "core.library.syntax.classes" #f 37 18 37 45 ()
      {Lisp-Entry "jazz.Walk-Binding" #f 45 19 45 36 ("jazz.Object-Class" "jazz.Type")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Binding") 49 22 49 46 ("source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Walk-Binding") 50 22 50 50 ()}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Walk-Binding") 51 22 51 49 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Walk-Binding") 52 22 52 53 ("arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Walk-Binding") 53 22 53 44 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Walk-Binding") 54 22 54 52 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Walk-Binding") 55 22 55 59 ("source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Walk-Binding") 56 22 56 51 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Walk-Binding") 57 22 57 50 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Walk-Binding") 58 22 58 49 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" ("jazz.Walk-Binding") 59 22 59 49 ("form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Walk-Binding") 60 22 60 51 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Walk-Binding") 61 22 61 51 ("form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Lexical-Binding" #f 69 19 69 39 ("%%set-lexical-binding-hits" "%%get-lexical-binding-hits" "hits" "%%get-lexical-binding-type" "type" "%%get-lexical-binding-name" "name" "jazz.Object-Class" "jazz.Walk-Binding")}
      {Lisp-Entry "jazz.resolve-binding" ("jazz.Lexical-Binding") 75 22 75 42 ()}
      {Lisp-Entry "jazz.Declaration" #f 83 19 83 35 ("%%set-declaration-source" "%%get-declaration-source" "source" "%%set-declaration-locator" "%%get-declaration-locator" "locator" "%%set-declaration-parent" "%%get-declaration-parent" "parent" "%%set-declaration-toplevel" "%%get-declaration-toplevel" "toplevel" "%%get-declaration-attributes" "attributes" "%%get-declaration-compatibility" "compatibility" "%%get-declaration-access" "access" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Declaration") 93 22 93 45 ("source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.update-declaration" ("jazz.Declaration") 94 22 94 45 ("new-declaration")}
      {Lisp-Entry "jazz.get-declaration-inclusions" ("jazz.Declaration") 95 22 95 53 ()}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Declaration") 96 22 96 43 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.Declaration") 97 22 97 56 ()}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Declaration") 98 22 98 43 ("s" "k" "f")}
      {Lisp-Entry "jazz.Declaration-Reference" #f 106 19 106 45 ("%%set-declaration-reference-declaration" "%%get-declaration-reference-declaration" "declaration" "%%get-declaration-reference-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Declaration-Reference") 111 22 111 44 ("library-declaration")}
      {Lisp-Entry "jazz.Library-Reference" #f 119 19 119 41 ("jazz.allocate-library-reference" "jazz.Object-Class" "declaration" "name" "jazz.Declaration-Reference")}
      {Lisp-Entry "jazz.Export-Reference" #f 128 19 128 40 ("%%get-export-reference-library-reference" "library-reference" "jazz.allocate-export-reference" "jazz.Object-Class" "declaration" "name" "jazz.Declaration-Reference")}
      {Lisp-Entry "jazz.Autoload-Reference" #f 137 19 137 42 ("jazz.allocate-autoload-reference" "jazz.Object-Class" "library-reference" "declaration" "name" "jazz.Export-Reference")}
      {Lisp-Entry "jazz.Module-Declaration" #f 146 19 146 42 ("%%set-module-declaration-requires" "%%get-module-declaration-requires" "requires" "jazz.allocate-module-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Namespace-Declaration" #f 155 19 155 45 ("%%set-namespace-declaration-body" "%%get-namespace-declaration-body" "body" "%%get-namespace-declaration-children" "children" "%%get-namespace-declaration-lookups" "lookups" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "%%get-access-lookup" #f 161 20 161 39 ("access" "namespace-declaration")}
      {Lisp-Entry "jazz.Library-Declaration" #f 170 19 170 43 ("%%set-library-declaration-autoloads" "%%get-library-declaration-autoloads" "autoloads" "%%set-library-declaration-inclusions" "%%get-library-declaration-inclusions" "inclusions" "%%get-library-declaration-references" "references" "%%get-library-declaration-variables" "variables" "%%set-library-declaration-literals" "%%get-library-declaration-literals" "literals" "%%get-library-declaration-proclaims" "proclaims" "%%set-library-declaration-imports" "%%get-library-declaration-imports" "imports" "%%set-library-declaration-exports" "%%get-library-declaration-exports" "exports" "%%set-library-declaration-requires" "%%get-library-declaration-requires" "requires" "%%get-library-declaration-dialect-invoice" "dialect-invoice" "%%get-library-declaration-dialect-name" "dialect-name" "%%get-library-declaration-walker" "walker" "jazz.allocate-library-declaration" "jazz.Object-Class" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Namespace-Declaration")}
      {Lisp-Entry "jazz.Library-Invoice" #f 190 19 190 39 ("%%get-library-invoice-rename" "rename" "%%get-library-invoice-prefix" "prefix" "%%get-library-invoice-except" "except" "%%get-library-invoice-only" "only" "%%get-library-invoice-version" "version" "%%get-library-invoice-phase" "phase" "%%get-library-invoice-library" "library" "%%get-library-invoice-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Export-Invoice" #f 206 19 206 38 ("%%set-export-invoice-autoload" "%%get-export-invoice-autoload" "autoload" "jazz.allocate-export-invoice" "jazz.Object-Class" "rename" "prefix" "except" "only" "version" "phase" "library" "name" "jazz.Library-Invoice")}
      {Lisp-Entry "jazz.Import-Invoice" #f 215 19 215 38 ("%%set-import-invoice-hit?" "%%get-import-invoice-hit?" "hit?" "jazz.allocate-import-invoice" "jazz.Object-Class" "rename" "prefix" "except" "only" "version" "phase" "library" "name" "jazz.Library-Invoice")}
      {Lisp-Entry "jazz.Export-Declaration" #f 224 19 224 42 ("%%get-export-declaration-symbol" "symbol" "jazz.allocate-export-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Export-Syntax-Declaration" #f 233 19 233 49 ("%%get-export-syntax-declaration-symbol" "symbol" "jazz.allocate-export-syntax-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Autoload-Declaration" #f 242 19 242 44 ("%%set-autoload-declaration-declaration" "%%get-autoload-declaration-declaration" "declaration" "%%get-autoload-declaration-exported-library" "exported-library" "%%get-autoload-declaration-library" "library" "jazz.allocate-autoload-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Literal" #f 253 19 253 31 ("%%get-literal-arguments" "arguments" "%%get-literal-name" "name" "jazz.allocate-literal" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Macro-Declaration" #f 263 19 263 41 ("%%set-macro-declaration-body" "%%get-macro-declaration-body" "body" "%%set-macro-declaration-signature" "%%get-macro-declaration-signature" "signature" "jazz.allocate-macro-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Syntax-Declaration" #f 273 19 273 42 ("%%set-syntax-declaration-body" "%%get-syntax-declaration-body" "body" "%%set-syntax-declaration-signature" "%%get-syntax-declaration-signature" "signature" "jazz.allocate-syntax-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Void-Class" #f 283 19 283 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Void" #f 287 19 287 28 ("jazz.Void-Class" "jazz.Type")}
      {Lisp-Entry "jazz.Opt-Type" #f 296 19 296 32 ("%%get-opt-type-type" "type" "jazz.allocate-opt-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Key-Type" #f 305 19 305 32 ("%%get-key-type-type" "type" "%%get-key-type-key" "key" "jazz.allocate-key-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Rest-Type" #f 315 19 315 33 ("%%get-rest-type-type" "type" "jazz.allocate-rest-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Function-Type" #f 324 19 324 37 ("%%get-function-type-result" "result" "%%get-function-type-rest" "rest" "%%get-function-type-named" "named" "%%get-function-type-optional" "optional" "%%get-function-type-positional" "positional" "%%get-function-type-mandatory" "mandatory" "jazz.allocate-function-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Category-Type" #f 338 19 338 37 ("%%get-category-type-declaration" "declaration" "jazz.allocate-category-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Values-Type" #f 347 19 347 35 ("%%get-values-type-types" "types" "jazz.allocate-values-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Restriction-Type" #f 356 19 356 40 ("%%get-restriction-type-type" "type" "%%get-restriction-type-base" "base" "jazz.allocate-restriction-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Complement-Type" #f 366 19 366 39 ("%%get-complement-type-type" "type" "jazz.allocate-complement-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Union-Type" #f 375 19 375 34 ("%%get-union-type-types" "types" "jazz.allocate-union-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Template-Type" #f 384 19 384 37 ("%%get-template-type-types" "types" "%%get-template-type-class" "class" "jazz.allocate-template-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Nillable-Type" #f 394 19 394 37 ("%%get-nillable-type-type" "type" "jazz.allocate-nillable-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Any-Class" #f 403 19 403 33 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Any" #f 407 19 407 27 ("jazz.Any-Class" "jazz.Type")}
      {Lisp-Entry "jazz.C-Type-Declaration" #f 416 19 416 42 ("%%get-c-type-declaration-declare" "declare" "%%get-c-type-declaration-scheme-to-c" "scheme-to-c" "%%get-c-type-declaration-c-to-scheme" "c-to-scheme" "%%get-c-type-declaration-inclusions" "inclusions" "%%set-c-type-declaration-pointer-types" "%%get-c-type-declaration-pointer-types" "pointer-types" "%%get-c-type-declaration-base-type" "base-type" "%%get-c-type-declaration-expansion" "expansion" "%%get-c-type-declaration-kind" "kind" "jazz.allocate-c-type-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.C-Definition-Declaration" #f 432 19 432 48 ("%%set-c-definition-declaration-body" "%%get-c-definition-declaration-body" "body" "%%get-c-definition-declaration-scope" "scope" "%%get-c-definition-declaration-c-name" "c-name" "%%get-c-definition-declaration-result-type" "result-type" "%%get-c-definition-declaration-parameter-types" "parameter-types" "%%set-c-definition-declaration-signature" "%%get-c-definition-declaration-signature" "signature" "jazz.allocate-c-definition-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Walker" #f 446 19 446 30 ("%%set-walker-errors" "%%get-walker-errors" "errors" "%%set-walker-warnings" "%%get-walker-warnings" "warnings" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Walker") 451 22 451 45 ()}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Walker") 452 22 452 43 ("form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-reference" ("jazz.Walker") 453 22 453 46 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Walker") 454 22 454 49 ("value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" ("jazz.Walker") 455 22 455 47 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Walker") 456 22 456 38 ("symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Walker") 457 22 457 36 ("form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Walker") 458 22 458 44 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" ("jazz.Walker") 459 22 459 45 ("arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.runtime-export" ("jazz.Walker") 460 22 460 41 ("declaration")}
      {Lisp-Entry "jazz.Walk-Context" #f 468 19 468 36 ("%%get-walk-context-pathname" "pathname" "%%get-walk-context-locator" "locator" "%%get-walk-context-policy" "policy" "jazz.allocate-walk-context" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Location" #f 479 19 479 37 ("%%get-walk-location-locat" "locat" "%%get-walk-location-declaration-locator" "declaration-locator" "%%get-walk-location-module-locator" "module-locator" "jazz.allocate-walk-location" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Problem" #f 490 19 490 36 ("%%get-walk-problem-location" "location" "jazz.Object-Class" "message" "jazz.Error")}
      {Lisp-Entry "jazz.Walk-Problems" #f 499 19 499 37 ("%%get-walk-problems-errors" "errors" "%%get-walk-problems-warnings" "warnings" "jazz.allocate-walk-problems" "jazz.Object-Class" "message" "jazz.Error")}
      {Lisp-Entry "jazz.Walk-Warning" #f 509 19 509 36 ("jazz.allocate-walk-warning" "jazz.Object-Class" "location" "message" "jazz.Walk-Problem")}
      {Lisp-Entry "jazz.Walk-Error" #f 518 19 518 34 ("jazz.allocate-walk-error" "jazz.Object-Class" "location" "message" "jazz.Walk-Problem")}
      {Lisp-Entry "jazz.Unresolved-Error" #f 527 19 527 40 ("%%get-unresolved-error-symbol" "symbol" "jazz.allocate-unresolved-error" "jazz.Object-Class" "location" "message" "jazz.Walk-Error")}
      {Lisp-Entry "jazz.Walk-Frame" #f 536 19 536 34 ("%%get-walk-frame-bindings" "bindings" "jazz.allocate-walk-frame" "jazz.Object-Class" "jazz.Walk-Binding")}
      {Lisp-Entry "jazz.Signature" #f 545 19 545 33 ("%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "%%get-signature-mandatory" "mandatory" "jazz.allocate-signature" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Symbol-Binding" #f 558 19 558 38 ("jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Variable" #f 567 19 567 32 ("%%set-variable-reference-count" "%%get-variable-reference-count" "reference-count" "jazz.allocate-variable" "jazz.Object-Class" "hits" "type" "name" "jazz.Symbol-Binding")}
      {Lisp-Entry "jazz.NextMethod-Variable" #f 576 19 576 43 ("jazz.allocate-nextmethod-variable" "jazz.Object-Class" "reference-count" "hits" "type" "name" "jazz.Variable")}
      {Lisp-Entry "jazz.Parameter" #f 585 19 585 33 ("jazz.allocate-parameter" "jazz.Object-Class" "reference-count" "hits" "type" "name" "jazz.Variable")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Parameter") 589 22 589 41 ("environment" "declaration")}
      {Lisp-Entry "jazz.Dynamic-Parameter" #f 597 19 597 41 ("%%get-dynamic-parameter-class" "class" "jazz.allocate-dynamic-parameter" "jazz.Object-Class" "reference-count" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Optional-Parameter" #f 606 19 606 42 ("%%set-optional-parameter-default" "%%get-optional-parameter-default" "default" "jazz.allocate-optional-parameter" "jazz.Object-Class" "reference-count" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Named-Parameter" #f 615 19 615 39 ("%%set-named-parameter-default" "%%get-named-parameter-default" "default" "jazz.allocate-named-parameter" "jazz.Object-Class" "reference-count" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Rest-Parameter" #f 624 19 624 38 ("jazz.allocate-rest-parameter" "jazz.Object-Class" "reference-count" "hits" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Self-Binding" #f 633 19 633 36 ("jazz.allocate-self-binding" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Dynamic-Self-Binding" #f 642 19 642 44 ("%%get-dynamic-self-binding-code" "code" "jazz.allocate-dynamic-self-binding" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Local-Variable-Binding" #f 651 19 651 46 ("%%get-local-variable-binding-variable" "variable" "jazz.allocate-local-variable-binding" "jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Macro-Symbol" #f 660 19 660 36 ("%%get-macro-symbol-setter" "setter" "%%get-macro-symbol-getter" "getter" "jazz.allocate-macro-symbol" "jazz.Object-Class" "hits" "type" "name" "jazz.Symbol-Binding")}
      {Lisp-Entry "jazz.Form-Binding" #f 670 19 670 36 ("jazz.Object-Class" "hits" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Special-Form" #f 679 19 679 36 ("%%get-special-form-walk" "walk" "jazz.allocate-special-form" "jazz.Object-Class" "hits" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Macro-Form" #f 688 19 688 34 ("%%get-macro-form-expander" "expander" "jazz.allocate-macro-form" "jazz.Object-Class" "hits" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Syntax-Form" #f 697 19 697 35 ("%%get-syntax-form-expander" "expander" "jazz.allocate-syntax-form" "jazz.Object-Class" "hits" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Annotated-Variable" #f 706 19 706 42 ("%%set-annotated-variable-type" "%%get-annotated-variable-type" "type" "%%get-annotated-variable-declared-type" "declared-type" "%%get-annotated-variable-variable" "variable" "jazz.allocate-annotated-variable" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Restricted-Binding" #f 717 19 717 42 ("%%get-restricted-binding-type" "type" "%%get-restricted-binding-binding" "binding" "jazz.allocate-restricted-binding" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Annotated-Frame" #f 727 19 727 39 ("%%get-annotated-frame-reset" "reset" "%%get-annotated-frame-variables" "variables" "jazz.allocate-annotated-frame" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Code" #f 737 19 737 28 ("%%get-code-source" "source" "%%get-code-type" "type" "%%get-code-form" "form" "jazz.allocate-code" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Access" #f 749 19 749 30 ("%%get-access-context" "context" "%%get-access-name" "name" "jazz.allocate-access" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Expression" #f 759 19 759 34 ("%%get-expression-source" "source" "%%get-expression-type" "type" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Expression") 764 22 764 42 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Expression") 765 22 765 36 ("environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Expression") 766 22 766 42 ("s" "k" "f")}
      {Lisp-Entry "jazz.Proclaim" #f 774 19 774 32 ("%%get-proclaim-clauses" "clauses" "jazz.allocate-proclaim" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Constant" #f 783 19 783 32 ("%%get-constant-expansion" "expansion" "jazz.allocate-constant" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Delay" #f 792 19 792 29 ("%%get-delay-expression" "expression" "jazz.allocate-delay" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Quasiquote" #f 801 19 801 34 ("%%get-quasiquote-form" "form" "jazz.allocate-quasiquote" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Reference" #f 810 19 810 33 ("%%get-reference-binding" "binding" "jazz.allocate-reference" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Method-Reference" #f 819 19 819 40 ("jazz.allocate-method-reference" "jazz.Object-Class" "binding" "source" "type" "jazz.Reference")}
      {Lisp-Entry "jazz.Assignment" #f 828 19 828 34 ("%%get-assignment-value" "value" "%%get-assignment-binding" "binding" "jazz.allocate-assignment" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Lambda" #f 838 19 838 30 ("%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "jazz.allocate-lambda" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Let" #f 848 19 848 27 ("%%get-let-body" "body" "%%get-let-bindings" "bindings" "jazz.allocate-let" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Named-Let" #f 858 19 858 33 ("%%get-named-let-variable" "variable" "jazz.allocate-named-let" "jazz.Object-Class" "body" "bindings" "source" "type" "jazz.Let")}
      {Lisp-Entry "jazz.Letstar" #f 867 19 867 31 ("%%get-letstar-body" "body" "%%get-letstar-bindings" "bindings" "jazz.allocate-letstar" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Letrec" #f 877 19 877 30 ("%%get-letrec-body" "body" "%%get-letrec-bindings" "bindings" "jazz.allocate-letrec" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Receive" #f 887 19 887 31 ("%%get-receive-body" "body" "%%get-receive-expression" "expression" "%%get-receive-variables" "variables" "jazz.allocate-receive" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Body" #f 898 19 898 28 ("%%get-body-expressions" "expressions" "%%get-body-internal-defines" "internal-defines" "jazz.allocate-body" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Internal-Define" #f 908 19 908 39 ("%%get-internal-define-value" "value" "%%get-internal-define-variable" "variable" "jazz.allocate-internal-define" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Begin" #f 918 19 918 29 ("%%get-begin-expressions" "expressions" "jazz.allocate-begin" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Do" #f 927 19 927 26 ("%%get-do-body" "body" "%%get-do-result" "result" "%%get-do-test" "test" "%%get-do-bindings" "bindings" "jazz.allocate-do" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Call" #f 939 19 939 28 ("%%get-call-arguments" "arguments" "%%get-call-operator" "operator" "jazz.allocate-call" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.If" #f 949 19 949 26 ("%%get-if-no" "no" "%%get-if-yes" "yes" "%%get-if-test" "test" "jazz.allocate-if" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Cond" #f 960 19 960 28 ("%%get-cond-clauses" "clauses" "jazz.allocate-cond" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Case" #f 969 19 969 28 ("%%get-case-clauses" "clauses" "%%get-case-target" "target" "jazz.allocate-case" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.And" #f 979 19 979 27 ("%%get-and-expressions" "expressions" "jazz.allocate-and" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Or" #f 988 19 988 26 ("%%get-or-expressions" "expressions" "jazz.allocate-or" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Declare" #f 997 19 997 31 ("%%get-declare-declarations" "declarations" "jazz.allocate-declare" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Include" #f 1006 19 1006 33 ("%%get-c-include-name" "name" "jazz.allocate-c-include" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Declare" #f 1015 19 1015 33 ("%%get-c-declare-code" "code" "jazz.allocate-c-declare" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Named-Declare-Declaration" #f 1024 19 1024 51 ("%%get-c-named-declare-declaration-code" "code" "jazz.allocate-c-named-declare-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.C-Initialize" #f 1033 19 1033 36 ("%%get-c-initialize-code" "code" "jazz.allocate-c-initialize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Function" #f 1042 19 1042 34 ("%%get-c-function-expansion" "expansion" "jazz.allocate-c-function" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Parameterize" #f 1051 19 1051 36 ("%%get-parameterize-body" "body" "%%get-parameterize-bindings" "bindings" "jazz.allocate-parameterize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Time-Special" #f 1061 19 1061 36 ("%%get-time-special-expression" "expression" "jazz.allocate-time" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Core-Dialect" #f 1070 19 1070 36 ("jazz.allocate-core-dialect" "jazz.Object-Class" "jazz.Dialect")}
      {Lisp-Entry "jazz.Core-Walker" #f 1079 19 1079 35 ("jazz.allocate-core-walker" "jazz.Object-Class" "errors" "warnings" "jazz.Walker")}}}
  {Lisp-File-Entry {File core "src" "core" "exception" "syntax" "classes.scm"} 1251206746
    {Lisp-Entry "core.exception.syntax.classes" #f 37 18 37 47 ()
      {Lisp-Entry "jazz.Exception" #f 45 19 45 33 ("jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Exception") 49 22 49 44 ()}
      {Lisp-Entry "jazz.get-message" ("jazz.Exception") 50 22 50 38 ()}
      {Lisp-Entry "jazz.get-detail" ("jazz.Exception") 51 22 51 37 ()}
      {Lisp-Entry "jazz.Exception-Detail" #f 59 19 59 40 ("%%get-exception-detail-children" "children" "%%get-exception-detail-location" "location" "%%get-exception-detail-title" "title" "%%get-exception-detail-icon" "icon" "jazz.allocate-exception-detail" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.System-Exception" #f 71 19 71 40 ("%%get-system-exception-exception" "exception" "jazz.Object-Class" "jazz.Exception")}
      {Lisp-Entry "jazz.Error" #f 80 19 80 29 ("%%get-error-message" "message" "jazz.allocate-error" "jazz.Object-Class" "jazz.Exception")}}}
  {Lisp-File-Entry {File core "src" "core" "class" "syntax" "classes.scm"} 1250351976
    {Lisp-Entry "core.class.syntax.classes" #f 37 18 37 43 ()
      {Lisp-Entry "jazz.Object" #f 45 19 45 30 ()}
      {Lisp-Entry "jazz.print-object" ("jazz.Object") 49 22 49 39 ("detail" "output")}
      {Lisp-Entry "jazz.Type" #f 57 19 57 28 ("jazz.Object")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Type") 61 22 61 35 ("object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Type") 62 22 62 38 ("subtype")}
      {Lisp-Entry "jazz.category-type?" ("jazz.Type") 63 22 63 41 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Type") 64 22 64 41 ()}
      {Lisp-Entry "jazz.emit-type" ("jazz.Type") 65 22 65 36 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Type") 66 22 66 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Type") 67 22 67 37 ("environment" "source-declaration" "value")}
      {Lisp-Entry "%%subtype?" #f 70 20 70 30 ("type" "target")}
      {Lisp-Entry "%%subcategory?" #f 74 20 74 34 ("category" "target")}
      {Lisp-Entry "%%subclass?" #f 78 20 78 31 ("class" "target")}
      {Lisp-Entry "%%is?" #f 82 20 82 25 ("type" "object")}
      {Lisp-Entry "%%is-not?" #f 86 20 86 29 ("type" "object")}
      {Lisp-Entry "jazz.Category" #f 95 19 95 32 ("descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Type")}
      {Lisp-Entry "jazz.update-category" ("jazz.Category") 103 22 103 42 ()}
      {Lisp-Entry "jazz.Class" #f 111 19 111 29 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "jazz.allocate-class" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Category")}
      {Lisp-Entry "%%class-subtype?" #f 126 20 126 36 ("%%get-category-ancestors" "%%vector-ref" "%%eq?" ",trg" "%%fx>=" "and" ",cls" "%%get-class-level" "class-level" "let" "cls" "trg" "lambda" "jazz.with-uniqueness" "class" "target")}
      {Lisp-Entry "%%class-is?" #f 136 20 136 31 ("class" "object")}
      {Lisp-Entry "%%category-is?" #f 140 20 140 34 ("category" "object")}
      {Lisp-Entry "%%class?" #f 144 20 144 28 ("object")}
      {Lisp-Entry "%%object-class?" #f 148 20 148 35 ("object")}
      {Lisp-Entry "jazz.Object-Class" #f 157 19 157 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Boolean-Class" #f 166 19 166 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Char-Class" #f 167 19 167 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Numeric-Class" #f 168 19 168 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Number-Class" #f 169 19 169 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Numeric-Class")}
      {Lisp-Entry "jazz.Complex-Class" #f 170 19 170 37 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Number-Class")}
      {Lisp-Entry "jazz.Real-Class" #f 171 19 171 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Complex-Class")}
      {Lisp-Entry "jazz.Rational-Class" #f 172 19 172 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Real-Class")}
      {Lisp-Entry "jazz.Integer-Class" #f 173 19 173 37 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Rational-Class")}
      {Lisp-Entry "jazz.Fixnum-Class" #f 174 19 174 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Integer-Class")}
      {Lisp-Entry "jazz.Flonum-Class" #f 175 19 175 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Real-Class")}
      {Lisp-Entry "jazz.Sequence-Class" #f 176 19 176 38 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.List-Class" #f 177 19 177 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Null-Class" #f 178 19 178 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.List-Class")}
      {Lisp-Entry "jazz.Pair-Class" #f 179 19 179 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.List-Class")}
      {Lisp-Entry "jazz.String-Class" #f 180 19 180 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Vector-Class" #f 181 19 181 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S8Vector-Class" #f 182 19 182 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U8Vector-Class" #f 183 19 183 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S16Vector-Class" #f 184 19 184 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U16Vector-Class" #f 185 19 185 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S32Vector-Class" #f 186 19 186 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U32Vector-Class" #f 187 19 187 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.S64Vector-Class" #f 188 19 188 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U64Vector-Class" #f 189 19 189 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.F32Vector-Class" #f 190 19 190 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.F64Vector-Class" #f 191 19 191 39 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Port-Class" #f 192 19 192 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Continuation-Class" #f 193 19 193 42 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Procedure-Class" #f 194 19 194 39 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Symbol-Class" #f 195 19 195 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Keyword-Class" #f 196 19 196 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Table-Class" #f 197 19 197 35 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Thread-Class" #f 198 19 198 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Promise-Class" #f 199 19 199 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Foreign-Class" #f 200 19 200 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Values-Class" #f 201 19 201 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.EOF-Class" #f 202 19 202 33 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Unspecified-Class" #f 203 19 203 41 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Boolean" #f 206 19 206 31 ("jazz.Boolean-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Char" #f 207 19 207 28 ("jazz.Char-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Numeric" #f 208 19 208 31 ("jazz.Numeric-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Number" #f 209 19 209 30 ("jazz.Number-Class" "jazz.Numeric")}
      {Lisp-Entry "jazz.Complex" #f 210 19 210 31 ("jazz.Complex-Class" "jazz.Number")}
      {Lisp-Entry "jazz.Real" #f 211 19 211 28 ("jazz.Real-Class" "jazz.Complex")}
      {Lisp-Entry "jazz.Rational" #f 212 19 212 32 ("jazz.Rational-Class" "jazz.Real")}
      {Lisp-Entry "jazz.Integer" #f 213 19 213 31 ("jazz.Integer-Class" "jazz.Rational")}
      {Lisp-Entry "jazz.Fixnum" #f 214 19 214 30 ("jazz.Fixnum-Class" "jazz.Integer")}
      {Lisp-Entry "jazz.Flonum" #f 215 19 215 30 ("jazz.Flonum-Class" "jazz.Real")}
      {Lisp-Entry "jazz.Sequence" #f 216 19 216 32 ("jazz.Sequence-Class" "jazz.Object")}
      {Lisp-Entry "jazz.List" #f 217 19 217 28 ("jazz.List-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Null" #f 218 19 218 28 ("jazz.Null-Class" "jazz.List")}
      {Lisp-Entry "jazz.Pair" #f 219 19 219 28 ("jazz.Pair-Class" "jazz.List")}
      {Lisp-Entry "jazz.String" #f 220 19 220 30 ("jazz.String-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Vector" #f 221 19 221 30 ("jazz.Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S8Vector" #f 222 19 222 32 ("jazz.S8Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U8Vector" #f 223 19 223 32 ("jazz.U8Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S16Vector" #f 224 19 224 33 ("jazz.S16Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U16Vector" #f 225 19 225 33 ("jazz.U16Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S32Vector" #f 226 19 226 33 ("jazz.S32Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U32Vector" #f 227 19 227 33 ("jazz.U32Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.S64Vector" #f 228 19 228 33 ("jazz.S64Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U64Vector" #f 229 19 229 33 ("jazz.U64Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.F32Vector" #f 230 19 230 33 ("jazz.F32Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.F64Vector" #f 231 19 231 33 ("jazz.F64Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Port" #f 232 19 232 28 ("jazz.Port-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Continuation" #f 233 19 233 36 ("jazz.Continuation-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Procedure" #f 234 19 234 33 ("jazz.Procedure-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Symbol" #f 235 19 235 30 ("jazz.Symbol-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Keyword" #f 236 19 236 31 ("jazz.Keyword-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Table" #f 237 19 237 29 ("jazz.Table-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Thread" #f 238 19 238 30 ("jazz.Thread-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Promise" #f 239 19 239 31 ("jazz.Promise-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Foreign" #f 240 19 240 31 ("jazz.Foreign-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Values" #f 241 19 241 30 ("jazz.Values-Class" "jazz.Object")}
      {Lisp-Entry "jazz.EOF" #f 242 19 242 27 ("jazz.EOF-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Unspecified" #f 243 19 243 35 ("jazz.Unspecified-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Interface" #f 251 19 251 33 ("%%get-interface-rank" "rank" "%%get-interface-ascendants" "ascendants" "jazz.allocate-interface" "jazz.Object-Class" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Category")}
      {Lisp-Entry "jazz.Field" #f 261 19 261 29 ("%%get-field-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "%%get-category-field" #f 265 20 265 40 ("field-name" "category")}
      {Lisp-Entry "%%set-category-field" #f 269 20 269 40 ("field" "field-name" "category")}
      {Lisp-Entry "jazz.Slot" #f 278 19 278 28 ("%%get-slot-initialize" "initialize" "%%get-slot-offset" "offset" "jazz.allocate-slot" "jazz.Object-Class" "name" "jazz.Field")}
      {Lisp-Entry "jazz.Property" #f 288 19 288 32 ("%%get-property-setter" "setter" "%%get-property-getter" "getter" "jazz.allocate-property" "jazz.Object-Class" "initialize" "offset" "name" "jazz.Slot")}
      {Lisp-Entry "jazz.Method" #f 298 19 298 30 ("%%set-method-implementation-rank" "%%get-method-implementation-rank" "implementation-rank" "%%set-method-category-rank" "%%get-method-category-rank" "category-rank" "%%set-method-implementation-tree" "%%get-method-implementation-tree" "implementation-tree" "%%set-method-implementation" "%%get-method-implementation" "implementation" "%%set-method-dispatch-type" "%%get-method-dispatch-type" "dispatch-type" "jazz.allocate-method" "jazz.Object-Class" "name" "jazz.Field")}
      {Lisp-Entry "jazz.Method-Node" #f 311 19 311 35 ("%%set-method-node-children" "%%get-method-node-children" "children" "%%set-method-node-next-implementation" "%%get-method-node-next-implementation" "next-implementation" "%%set-method-node-next-node" "%%get-method-node-next-node" "next-node" "%%set-method-node-implementation" "%%get-method-node-implementation" "implementation" "%%set-method-node-category" "%%get-method-node-category" "category" "jazz.allocate-method-node" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Queue" #f 324 19 324 29 ("%%set-queue-current" "%%get-queue-current" "current" "%%set-queue-last-anchor" "%%get-queue-last-anchor" "last-anchor" "%%set-queue-last-list" "%%get-queue-last-list" "last-list" "%%set-queue-list" "%%get-queue-list" "list" "jazz.allocate-queue" "jazz.Object-Class" "jazz.Object")}}})
"define-class"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-class.scm"} 1251132602
    {Lisp-Entry "core.class.syntax.define-class" #f 37 18 37 48 ()
      {Lisp-Entry "jazz.define-class" #f 40 20 40 37 (",inherited-slot-names" "',inherited-slot-names" ",',inherited-slot-names" "',',inherited-slot-names" "jazz.validate-inherited-slots" "jazz.identifier-name" "jazz.set-core-class" ",instance-size" "',instance-size" ",',instance-size" ",slot-names" "',slot-names" ",',slot-names" "',',slot-names" ",ascendant-accessor" "',ascendant-accessor" ",',ascendant-accessor" "eq?" "test:" "%%make-table" "',',name" ",class-accessor" "',class-accessor" ",',class-accessor" "jazz.new-core-class" "',name" ",',name" "%%symbol->string" "%%string-append" "%%string->symbol" "jazz.object-size" "%%fx+" "jazz.naturals" "'%%object-set!" "%%object-set!" ",value" ",slot-setter" "'%%object-ref" ",rank" "%%object-ref" "jazz.expected-error" "jazz.object-of-class?" "%%core-assertion" ",object" ",slot-getter" "define" "value" "jazz.generate-symbol" "object" "%%cddr" "slot-setter" "%%cadr" "slot-getter" "%%car" "slot-name" "let" "rank" "slot" "map" "%%object" "'%%object" "%%list" ",@all-variables" "class" ",constructor" "jazz.define-macro" "%%null?" ",name" "jazz.define-variable" "jazz.debug-core?" "if" "begin" "instance-size" "all-variables" "slot-names" "ascendant-size" "ascendant-accessor" "class-accessor" "lambda" "jazz.parse-define-class" "slots" "constructor" "class-name" "inherited-slot-names" "ascendant-name" "name")
        {Lisp-Entry "jazz.parse-define-class" #f 41 11 41 34 ("jazz.object-size" "%%fx+" "instance-size" "all-length" "%%symbol->string" "jazz.generate-symbol" "slot-name" "lambda" "all-variables" "%%append" "all-slot-names" "car" "map" "slot-names" "%%length" "ascendant-size" "ascendant-accessor" "%%null?" "if" "class-accessor" "let*" "proc" "slots" "class-name" "inherited-slot-names" "ascendant-name")}}
      {Lisp-Entry "jazz.define-class-runtime" #f 97 20 97 45 ("name")}}})
"define-method"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-method.scm"} 1238328024
    {Lisp-Entry "core.class.syntax.define-method" #f 37 18 37 49 ()
      {Lisp-Entry "jazz.define-virtual" #f 40 20 40 39 ("jazz.expand-define-virtual" "%%car" "%%null?" "if" "bootstrap-type?" "let" "rest" "signature")}
      {Lisp-Entry "jazz.define-virtual-runtime" #f 45 20 45 47 ("jazz.expand-define-virtual-runtime" "signature")}
      {Lisp-Entry "jazz.define-method" #f 49 20 49 38 ("jazz.expand-define-method" "body" "signature")}}})
"define-method-expander"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-method-expander.scm"} 1249383363
    {Lisp-Entry "core.class.syntax.define-method-expander" #f 37 18 37 58 ()
      {Lisp-Entry "jazz.expand-define-virtual" #f 40 9 40 35 ("obj" "lambda" "jazz.with-uniqueness" ",rank-name" "',rank-name" "%%get-object-class" "'%%get-object-class" "%%get-class-core-vtable" "'%%get-class-core-vtable" "%%vector-ref" "'%%vector-ref" "',name" "jazz.format" "jazz.error" "'jazz.error" ",class-name" "',class-name" ",is-test" "',is-test" "%%core-assertion" "'%%core-assertion" "%%list" "%%symbol?" ",@extra-parameters" ",object-parameter" ",name" "jazz.define-macro" "%%class-is?" "'%%class-is?" "jazz.bootstrap-type?" "'jazz.bootstrap-type?" "if" "is-test" "jazz.method-rank-name" "rank-name" "jazz.method-implementation-name" "implementation-name" "extra-parameters" "%%cadr" "object-parameter" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "bootstrap-type?" "signature")}
      {Lisp-Entry "jazz.expand-define-virtual-runtime" #f 75 9 75 43 (",name" "',name" ",class-name" "jazz.register-virtual-name" ",rank-name" "define" "jazz.method-rank-name" "rank-name" "jazz.method-implementation-name" "implementation-name" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "signature")}
      {Lisp-Entry "jazz.expand-define-method" #f 85 9 85 34 ("jazz.register-method" ",@body" ",@extra-parameters" ",object-parameter" "lambda" ",name" "',name" ",class-name" "jazz.find-nextmethod" "nextmethod" "let" ",implementation-name" "define" "begin" "jazz.method-implementation-name" "implementation-name" "extra-parameters" "%%cadr" "object-parameter" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "body" "signature")}
      {Lisp-Entry "jazz.method-implementation-name" #f 100 9 100 40 ("%%string-append" "%%string->symbol" "%%symbol->string" "jazz.split-string" "jazz.last" "let" "name" "class-name")}
      {Lisp-Entry "jazz.method-rank-name" #f 105 9 105 30 ("%%symbol->string" "%%string-append" "%%string->symbol" "implementation-name")}
      {Lisp-Entry "jazz.inherited-name?" #f 109 9 109 29 ("%%get-class-core-virtual-names" "%%memq" "and" "%%get-class-ascendant" "ascendant" "let" "method-name" "class")}
      {Lisp-Entry "jazz.register-virtual-name" #f 115 9 115 35 ("1" "%%length" "%%fx-" "%%list" "%%get-class-core-virtual-names" "%%append" "%%set-class-core-virtual-names" "method-name" "class")}
      {Lisp-Entry "jazz.register-method" #f 123 9 123 29 ("%%get-class-core-virtual-alist" "%%set-class-core-virtual-alist" "%%cons" "%%list" "%%get-class-core-method-alist" "%%append" "%%set-class-core-method-alist" "jazz.inherited-name?" "if" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.get-method-rank" #f 133 9 133 29 ("1" "%%fx+" "%%cdr" "%%car" "%%eq?" "if" "0" "rank" "%%get-class-core-virtual-names" "scan" "iter" "let" "method-name" "class")}
      {Lisp-Entry "jazz.get-method-implementation" #f 141 9 141 39 ("jazz.get-method-rank" "%%get-class-core-vtable" "%%vector-ref" "method-name" "class")}
      {Lisp-Entry "jazz.find-nextmethod" #f 146 9 146 29 ("jazz.error" "rest" "obj" "lambda" "%%get-class-ascendant" "jazz.get-method-implementation" "jazz.inherited-name?" "if" "method-name" "class")}}})
"development"
 ({Lisp-File-Entry {File core "src" "core" "library" "development.scm"} 1251729948
    {Lisp-Entry "core.library.development" #f 38 8 38 32 ()
      {Lisp-Entry "jazz.parse" #f 49 9 49 19 ("pretty-print" "jazz.read-toplevel-form" "form" "jazz.find-module-src" "jazz.resource-pathname" "source" "let" "module-name")}
      {Lisp-Entry "jazz.parse-source" #f 55 9 55 26 ("jazz.present-source" "pretty-print" "read-source?:" "jazz.read-toplevel-form" "syntax" "jazz.resource-pathname" "source" "jazz.find-module-src" "src" "let*" "walk" "'walk" "jazz.walk-for" "parameterize" "module-name")}
      {Lisp-Entry "jazz.expand-module" #f 70 9 70 27 ("jazz.expand-library-source" "library" "jazz.expand-module-source" "module" "case" "jazz.requested-module-resource" "jazz.requested-module-name" "cdr" "rest" "car" "jazz.source-code" "kind" "read-source?:" "jazz.read-toplevel-form" "form" "jazz.resource-pathname" "source" "jazz.find-module-src" "src" "let*" "walk" "'walk" "or" "jazz.walk-for" "parameterize" "walk-for" "#!key" "module-name")}
      {Lisp-Entry "jazz.expand" #f 84 9 84 20 ("current-output-port" "jazz.expand-to-port" "apply" "rest" "module-name")}
      {Lisp-Entry "jazz.expand-to-file" #f 88 9 88 28 ("jazz.expand-to-port" "apply" "port" "lambda" "or" "call-with-output-file" "rest" "#!rest" "file" "#!key" "module-name")}
      {Lisp-Entry "jazz.expand-to-port" #f 94 9 94 28 ("jazz.expand-module" "apply" "jazz.desourcify-all" "pretty-print" "rest" "port" "module-name")}
      {Lisp-Entry "jazz.expand-source" #f 100 9 100 27 ("jazz.expand-module" "apply" "jazz.present-source" "pretty-print" "rest" "module-name")}
      {Lisp-Entry "jazz.lookup" #f 111 9 111 20 ("jazz.walk-module" "jazz.lookup-declaration" "access" "name" "library-name")}}})
"dialect"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "dialect.scm"} 1238328024
    {Lisp-Entry "core.library.syntax.dialect" #f 37 18 37 45 ("jazz.Dialect" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Dialect" #f 40 27 40 39 ()}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Dialect") 43 30 43 47 ()}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Dialect") 44 30 44 49 ()}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Dialect") 47 21 47 38 ()}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Dialect") 51 21 51 40 ()}
      {Lisp-Entry "jazz.Dialects" #f 63 8 63 21 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-dialect" #f 67 9 67 25 ("jazz.Dialects" "%%table-ref" "name")}
      {Lisp-Entry "jazz.require-dialect" #f 71 9 71 29 ("jazz.error" "jazz.get-dialect" "or" "name")}
      {Lisp-Entry "jazz.register-dialect" #f 76 9 76 30 ("jazz.Dialects" "%%table-set!" "dialect" "name")}}})
"dialect-syntax"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "dialect-syntax.scm"} 1238328024
    {Lisp-Entry "core.library.syntax.dialect-syntax" #f 37 18 37 52 ()
      {Lisp-Entry "jazz.Dialect" #f 40 19 40 31 ("jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Dialect") 44 22 44 39 ()}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Dialect") 45 22 45 41 ()}}})
"error"
 ({Lisp-File-Entry {File core "src" "core" "exception" "runtime" "error.scm"} 1238328024
    {Lisp-Entry "core.exception.runtime.error" #f 37 18 37 46 ("jazz.raise-jazz-error" "jazz.error" "set!" "jazz.Error" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Error" #f 40 27 40 37 ()}
      {Lisp-Entry "jazz.new-error" #f 43 9 43 23 ("jazz.Error" "jazz.allocate-error" "message")}
      {Lisp-Entry "jazz.get-message" ("jazz.Error") 47 21 47 37 ("error" "%%get-error-message")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Error") 51 21 51 43 ("error" "%%get-error-message")}
      {Lisp-Entry "jazz.raise-jazz-error" #f 61 9 61 30 ("jazz.new-error" "raise" "jazz.format" "apply" "message" "let" "rest" "fmt-string")}}}
  {Lisp-File-Entry {File core "src" "core" "class" "syntax" "error.scm"} 1238328024
    {Lisp-Entry "core.class.syntax.error" #f 37 18 37 41 ()
      {Lisp-Entry "jazz.object-of-class?" #f 40 22 40 43 ()}
      {Lisp-Entry "jazz.not-object-error" #f 43 9 43 30 ("jazz.error" "obj")}
      {Lisp-Entry "jazz.outside-object-error" #f 47 9 47 34 ("jazz.error" "rnk" "obj")}
      {Lisp-Entry "jazz.expected-error" #f 51 9 51 28 ("jazz.error" "obj" "class")}}}
  {Lisp-File-Entry {File core "src" "core" "base" "runtime" "error.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.error" #f 37 18 37 41 ()
      {Lisp-Entry "jazz.unimplemented" #f 40 9 40 27 ("%%car" "jazz.error" "%%null?" "if" "rest")}}})
"exception"
 ({Lisp-File-Entry {File core "src" "core" "exception" "runtime" "exception.scm"} 1251206746
    {Lisp-Entry "core.exception.runtime.exception" #f 37 18 37 50 ("newline" "jazz.present-exception" "display" "begin" "%%is?" "%%object?" "and" "if" "port" "exc" "lambda" "set!" "##display-exception-hook" "previous-hook" "let" "jazz.System-Exception" "jazz.Exception-Detail" "jazz.Exception" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Exception" #f 45 27 45 41 ()}
      {Lisp-Entry "jazz.print-object" ("jazz.Exception") 48 21 48 38 ("if" "jazz.object->serial" "jazz.format" "exception" "jazz.get-message" "message" "let" "detail" "output")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Exception") 56 30 56 52 ()}
      {Lisp-Entry "jazz.get-message" ("jazz.Exception") 57 30 57 46 ()}
      {Lisp-Entry "jazz.get-detail" ("jazz.Exception") 58 30 58 45 ()}
      {Lisp-Entry "jazz.present-exception" ("jazz.Exception") 61 21 61 43 ("get-output-string" "exception" "jazz.format" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.get-message" ("jazz.Exception") 67 21 67 37 ()}
      {Lisp-Entry "jazz.get-detail" ("jazz.Exception") 71 21 71 36 ()}
      {Lisp-Entry "jazz.Exception-Detail" #f 83 27 83 48 ()}
      {Lisp-Entry "jazz.new-exception-detail" #f 86 9 86 34 ("jazz.Exception-Detail" "jazz.allocate-exception-detail" "children" "location" "title" "icon")}
      {Lisp-Entry "jazz.System-Exception" #f 98 27 98 48 ()}
      {Lisp-Entry "jazz.present-exception" ("jazz.System-Exception") 101 21 101 43 ("%%substring" "1" "%%fx-" "%%string-ref" "%%eqv?" "0" "%%fx>" "and" "if" "string-length" "len" "get-output-string" "str" "exception" "%%get-system-exception-exception" "display-exception" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.exception-reason" #f 120 9 120 30 ("get-output-string" "jazz.display-exception" "open-output-string" "output" "let" "exc")}
      {Lisp-Entry "jazz.exception-detail" #f 126 9 126 30 ("jazz.get-detail" "jazz.Exception" "%%is?" "%%object?" "and" "if" "exc")}}}
  {Lisp-File-Entry {File core "src" "core" "base" "runtime" "exception.scm"} 1248276859
    {Lisp-Entry "core.base.runtime.exception" #f 38 18 38 45 ()
      {Lisp-Entry "jazz.current-exception-handler" #f 43 12 43 42 ("current-exception-handler")}
      {Lisp-Entry "jazz.with-exception-handler" #f 46 13 46 40 ("continuation-return" "exc" "with-exception-handler" "return" "lambda" "continuation-capture" "thunk" "proc")}
      {Lisp-Entry "jazz.exception-reason" #f 54 13 54 34 ("jazz.format" "%%not" "if" "'arguments" "arguments" "'message" "message" "'location" "'exc" "condition-property-accessor" "location" "let" "exc")}
      {Lisp-Entry "jazz.current-exception-handler" #f 63 12 63 42 ("current-exception-handler")}
      {Lisp-Entry "jazz.with-exception-handler" #f 66 12 66 39 ("with-exception-handler")}
      {Lisp-Entry "jazz.with-exception-catcher" #f 69 12 69 39 ("with-exception-catcher")}
      {Lisp-Entry "jazz.display-exception" #f 72 12 72 34 ("display-exception")}
      {Lisp-Entry "jazz.display-continuation-backtrace" #f 75 12 75 47 ("display-continuation-backtrace")}
      {Lisp-Entry "jazz.raise" #f 78 13 78 23 ("raise" "obj")}}})
"expander"
 ({Lisp-File-Entry {File core "src" "core" "generic" "syntax" "expander.scm"} 1251729948
    {Lisp-Entry "core.generic.syntax.expander" #f 38 18 38 46 ()
      {Lisp-Entry "jazz.dynamic-parameter?" #f 41 9 41 32 ("%%cdr" "jazz.composite-name?" "or" "%%car" "type" "let" "%%pair?" "and" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-type" #f 49 9 49 36 ("jazz.specifier->name" "jazz.specifier?" "if" "%%car" "type" "let" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-types" #f 56 9 56 37 ("%%cdr" "jazz.dynamic-parameter-type" "%%cons" "%%car" "jazz.dynamic-parameter?" "%%pair?" "and" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.dynamic-parameter-name" #f 65 9 65 36 ("%%cadr" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-names" #f 69 9 69 37 ("%%cdr" "jazz.dynamic-parameter-name" "%%cons" "%%car" "jazz.dynamic-parameter?" "%%pair?" "and" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.generic-parameters" #f 78 9 78 32 ("jazz.reverse!" "values" "else" "%%symbol?" "jazz.dynamic-parameter-name" "%%cons" "%%cdr" "jazz.dynamic-parameter?" "cond" "%%car" "parameter" "%%pair?" "if" "result" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.specific-parameters" #f 92 9 92 33 ("else" "%%cdr" "jazz.dynamic-parameter-name" "%%cons" "jazz.dynamic-parameter?" "cond" "%%car" "parameter" "%%pair?" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.expand-define-generic" #f 108 9 108 35 ("apply" "jazz.dynamic-parameter-names" ",parameter" "%%class-of" "parameter" "map" "%%specific-dispatch" ",gensym-specific" "jazz.process-pending-specifics" "%%get-generic-pending-specifics" "%%not" "%%when" ",gensym-rest" ",@mandatory-parameters" ",@dynamic-signature" "%%list" "',generic-method-locator" "jazz.new-generic" "jazz.generic-reset" "jazz.global-value" ",gensym-generic" "',generic-locator" "jazz.global-variable?" ",generic-locator" ",@body" ",generic-method-locator" "jazz.error" ",formal-signature" "lambda" ",specific-implementation-locator" "define" "begin" "%%null?" "if" "gensym-rest" "let" "jazz.generic-parameters" "extra-parameters" "mandatory-parameters" "receive" "gensym-specific" "jazz.generate-symbol" "gensym-generic" "jazz.generic-object-locator" "generic-locator" "jazz.implementation-locator" "specific-implementation-locator" "jazz.specific-parameters" "formal-signature" "jazz.dynamic-parameter-types" "dynamic-signature" "%%cdr" "parameters" "%%car" "generic-method-locator" "let*" "body" "signature")}
      {Lisp-Entry "jazz.generic-object-locator" #f 144 9 144 36 ("%%symbol->string" "%%string-append" "%%string->symbol" "locator")}
      {Lisp-Entry "jazz.expand-define-specific" #f 153 9 153 36 (",generic-locator" "jazz.register-specific" "%%set-specific-implementation" ",@body" ",@nextmethod-bindings" "let" ",formal-signature" ",gensym-lambda" ",@dynamic-signature" "lambda" "jazz.new-specific" ",specific-implementation-locator" "define" ",gensym-specific" "%%get-specific-ancestor-specifics" "%%get-specific-implementation" "nextmethod" "%%list" "if" "nextmethod-bindings" "gensym-lambda" "jazz.generate-symbol" "gensym-specific" "jazz.generic-object-locator" "generic-locator" "jazz.implementation-locator" "specific-implementation-locator" "jazz.specific-parameters" "formal-signature" "jazz.dynamic-parameter-types" "dynamic-signature" "%%cdr" "parameters" "%%car" "generic-method-locator" "root" "'root" "%%eq?" "root?" "let*" "body" "modifier" "signature")}
      {Lisp-Entry "jazz.implementation-locator" #f 174 9 174 36 ("jazz.join-strings" "%%string-append" "%%string->symbol" "%%car" "%%pair?" "if" "class/call" "lambda" "map" "dynamic-signature-strings" "%%symbol->string" "generic-string" "let" "dynamic-signature" "generic-locator")}}})
"generic"
 ({Lisp-File-Entry {File core "src" "core" "generic" "syntax" "generic.scm"} 1249056426
    {Lisp-Entry "core.generic.syntax.generic" #f 44 18 44 45 ("jazz.Generic" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Generic" #f 47 19 47 31 ("%%set-generic-pending-specifics" "%%get-generic-pending-specifics" "pending-specifics" "%%set-generic-root-specific" "%%get-generic-root-specific" "root-specific" "%%get-generic-name" "name" "%%get-generic-locator" "locator" "jazz.allocate-generic" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Generic" #f 54 27 54 39 ()}
      {Lisp-Entry "jazz.define-generic" #f 57 20 57 39 ("jazz.expand-define-generic" "%%apply" "rest")}
      {Lisp-Entry "%%specific-dispatch" #f 61 20 61 39 ("dynamic-classes" "generic")}}}
  {Lisp-File-Entry {File core "src" "core" "generic" "runtime" "generic.scm"} 1248276859
    {Lisp-Entry "core.generic.runtime.generic" #f 38 18 38 46 ()
      {Lisp-Entry "jazz.new-generic" #f 41 9 41 25 ("jazz.generic-make-root" "jazz.Generic" "jazz.allocate-generic" "generic" "jazz.identifier-name" "name" "let*" "root-proc" "dynamic-signature" "locator")}
      {Lisp-Entry "jazz.generic-reset" #f 48 9 48 27 ("%%get-generic-root-specific" "%%get-specific-dynamic-signature" "jazz.generic-make-root" "root-proc" "generic")}
      {Lisp-Entry "jazz.generic-make-root" #f 52 9 52 31 ("%%get-generic-pending-specifics" "%%cons" "%%set-generic-pending-specifics" "%%set-generic-root-specific" "jazz.invalid-generic-call" "apply" "rest" "lambda" "or" "jazz.new-specific" "root-specific" "let" "root-proc" "dynamic-signature" "generic")}
      {Lisp-Entry "jazz.invalid-generic-call" #f 58 9 58 34 ("jazz.generic-error" "%%cdr" "%%car" "%%class-of" "%%cons" "%%pair?" "and" "if" "%%get-generic-root-specific" "%%get-specific-dynamic-signature" "signature" "iter" "dynamic-parameters" "let" "rest" "generic")}
      {Lisp-Entry "jazz.generic-error" #f 68 9 68 27 ("%%cons" "jazz.error" "%%get-generic-root-specific" "%%get-specific-dynamic-signature" "root-signature" "%%get-generic-name" "name" "let" "signature" "generic")}
      {Lisp-Entry "jazz.register-specific" #f 80 9 80 31 ("%%get-generic-pending-specifics" "%%cons" "%%set-generic-pending-specifics" "specific" "generic")}
      {Lisp-Entry "jazz.process-pending-specifics" #f 89 9 89 39 ("%%set-generic-pending-specifics" "%%get-generic-pending-specifics" "%%reverse" "jazz.insert/replace-specific" "specific" "lambda" "for-each" "%%get-generic-root-specific" "jazz.resolve-signature" "generic")}
      {Lisp-Entry "jazz.resolve-signature" #f 99 9 99 31 ("%%set-specific-dynamic-signature" "%%procedure?" "%%when" "%%get-specific-dynamic-signature" "signature/proc" "let" "specific")}
      {Lisp-Entry "jazz.insert/replace-specific" #f 105 9 105 37 ("%%set-car!" "iter" "%%set-generic-root-specific" "%%get-generic-root-specific" "perfect-match" "%%set-specific-descendant-specifics" "set!" "%%memq" "%%when" "else" "jazz.remove!" "jazz.specific-better?" "%%cons" "%%get-specific-ancestor-specifics" "%%car" "best" "brothers" "brother-partition" "%%cdr" "if" "descendants" "%%assq" "descendant-partition" "assv" "jazz.dynamic-signature-compare" "ordered" "'ordered" "%%eq?" "descendant-signature" "descendant" "%%get-specific-descendant-specifics" "jazz.partition" "partition" "ancestor-signature" "ancestor" "lambda" "for-each" "%%set-specific-ancestor-specifics" "descendant-specifics" "put-best-first" "ancestors" "let" "%%pair?" "jazz.generic-error" "%%not" "cond" "jazz.gather-dynamic-signature-ancestors" "matches" "%%get-specific-dynamic-signature" "dynamic-signature" "let*" "specific" "generic")
        {Lisp-Entry "put-best-first" #f 106 11 106 25 ("%%cons" "jazz.specific-better?" "specific" "%%pair?" "if" "others" "%%car" "best" "%%cdr" "scan" "iter" "let" "specifics")}}
      {Lisp-Entry "jazz.gather-dynamic-signature-ancestors" #f 180 9 180 48 ("%%null?" "else" "%%cons" "%%memq" "%%cdr" "%%get-specific-descendant-specifics" "found-in-descendants" "ordered" "set!" "equal" "%%get-specific-dynamic-signature" "jazz.dynamic-signature-compare" "case" "%%car" "specific" "%%pair?" "if" "partial-matches" "%%get-generic-root-specific" "%%list" "specifics" "iter" "or" "perfect-match" "let" "dynamic-signature" "generic")}
      {Lisp-Entry "jazz.dynamic-signature-compare" #f 206 9 206 39 ("else" "ordered" "'ordered" "reverse-ordered" "'reverse-ordered" "jazz.subcategory?" "%%cdr" "%%car" "%%eq?" "cond" "unordered" "'unordered" "and" "%%null?" "or" "if" "equal" "'equal" "match" "iter" "let" "ancestor-signature" "descendant-signature")}
      {Lisp-Entry "jazz.dynamic-signature-equal?" #f 228 9 228 38 ("%%cdr" "%%car" "%%eq?" "and" "%%null?" "or" "if" "iter" "let" "dynamic-signature2" "dynamic-signature1")}
      {Lisp-Entry "jazz.specific-better?" #f 237 9 237 30 ("%%cdr" "%%car" "%%get-class-level" "%%fx>" "or" "signature2" "%%get-specific-dynamic-signature" "signature1" "iter" "let" "specific2" "specific1")}
      {Lisp-Entry "jazz.display-tree" #f 249 9 249 26 ("1" "%%fx+" "newline" "%%get-specific-descendant-specifics" "%%get-specific-ancestor-specifics" "%%get-specific-dynamic-signature" "write" "specific" "lambda" "for-each" "0" "level" "%%get-generic-root-specific" "%%list" "specifics" "iterate" "let" "jazz.process-pending-specifics" "%%get-generic-pending-specifics" "%%null?" "%%not" "%%when" "generic")}
      {Lisp-Entry "jazz.dispatch-from-root" #f 274 9 274 32 ("else" "%%car" "%%pair?" "jazz.generic-error" "%%not" "cond" "jazz.gather-dynamic-signature-ancestors" "matches" "let" "dynamic-classes" "generic")}}})
"initialize"
 ({Lisp-File-Entry {File core "src" "core" "library" "initialize.scm"} 1238328024
    {Lisp-Entry "core.library.initialize" #f 37 18 37 41 ("jazz.initialize-primitive-patterns")}})
"keyword"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "keyword.scm"} 1248276859
    {Lisp-Entry "core.base.runtime.keyword" #f 37 18 37 43 ()
      {Lisp-Entry "jazz.keyword?" #f 42 13 42 26 ("keyword?" "obj")}
      {Lisp-Entry "jazz.keyword->string" #f 45 13 45 33 ("keyword->string" "keyword")}
      {Lisp-Entry "jazz.string->keyword" #f 48 13 48 33 ("string->keyword" "string")}
      {Lisp-Entry "jazz.keyword?" #f 52 13 52 26 ("%%keyword?" "obj")}
      {Lisp-Entry "jazz.keyword->string" #f 55 13 55 33 ("%%keyword->string" "keyword")}
      {Lisp-Entry "jazz.string->keyword" #f 58 13 58 33 ("%%string->keyword" "string")}
      {Lisp-Entry "jazz.keyword?" #f 62 12 62 25 ("1" "%%string-length" "%%fx-" "%%string-ref" "%%eqv?" "%%symbol->string" "str" "let" "%%symbol?" "and" "obj")}
      {Lisp-Entry "jazz.keyword->string" #f 68 12 68 32 ("1" "%%length" "%%fx-" "0" "%%substring" "%%symbol->string" "str" "let" "keyword")}
      {Lisp-Entry "jazz.string->keyword" #f 73 12 73 32 ("%%string-append" "%%string->symbol" "string")}}})
"library"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "library.scm"} 1249056426
    {Lisp-Entry "core.library.syntax.library" #f 37 18 37 45 ()
      {Lisp-Entry "library" #f 40 20 40 27 ("jazz.source-code" "%%cdr" "jazz.expand-library-source" "form-src" "lambda")}}})
"list"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "list.scm"} 1251729948
    {Lisp-Entry "core.base.runtime.list" #f 37 18 37 40 ()
      {Lisp-Entry "jazz.find-in" #f 40 9 40 21 ("%%cdr" "%%car" "or" "%%null?" "if" "scan" "iter" "let" "lst" "proc")}
      {Lisp-Entry "jazz.find-if" #f 48 9 48 21 ("%%cdr" "%%car" "value" "%%null?" "if" "scan" "iter" "let" "lst" "predicate")}
      {Lisp-Entry "jazz.getprop" #f 58 9 58 21 ("%%cddr" "else" "%%car" "%%eqv?" "%%null?" "cond" "scan" "iter" "let" "target" "plist")}
      {Lisp-Entry "jazz.getf" #f 68 9 68 18 ("%%cadr" "if" "jazz.getprop" "pair" "let" "not-found" "#!key" "target" "plist")}
      {Lisp-Entry "jazz.reverse!" #f 75 8 75 21 ("reverse")}
      {Lisp-Entry "jazz.list-copy" #f 79 9 79 23 ("obj" "lambda" "map" "lst")}
      {Lisp-Entry "jazz.last-tail" #f 83 9 83 23 ("else" "%%null?" "cond" "%%cdr" "tail" "scan" "iter" "let" "%%pair?" "if" "lst")}
      {Lisp-Entry "jazz.last-pair" #f 96 9 96 23 ("%%cdr" "tail" "scan" "iter" "let" "%%pair?" "if" "lst")}
      {Lisp-Entry "jazz.last" #f 106 9 106 18 ("jazz.last-pair" "%%car" "lst")}
      {Lisp-Entry "jazz.remove-duplicates" #f 110 9 110 31 ("%%cons" "%%memv" "%%cdr" "result" "%%car" "value" "%%not-null?" "if" "scan" "iter" "let" "lst")}
      {Lisp-Entry "jazz.partition" #f 121 9 121 23 ("%%set-cdr!" "begin" "%%list" "%%cons" "%%not" "set" "category" "%%car" "element" "%%cdr" "partition" "let*" "%%null?" "if" "scan" "iter" "let" "associate" "key" "lst")}
      {Lisp-Entry "jazz.rassq" #f 136 9 136 19 ("%%cdr" "else" "%%car" "%%cdar" "%%eq?" "%%null?" "cond" "rest" "iter" "let" "alist" "obj")}
      {Lisp-Entry "jazz.butlast" #f 146 9 146 21 ("jazz.butlast" "%%car" "%%cons" "%%cdr" "%%null?" "if" "lst")}
      {Lisp-Entry "jazz.naturals" #f 152 9 152 22 ("jazz.reverse!" "1" "%%fx+" "%%cons" "set!" "%%fx<" "%%while" "n" "lst" "let" "to" "from")}
      {Lisp-Entry "jazz.remove!" #f 161 9 161 21 ("%%set-cdr!" "scan" "previous" "let" "begin" "%%null?" "if" "%%cdr" "set!" "%%car" "%%eqv?" "%%not-null?" "and" "%%while" "lst" "target")}}})
"macros"
 ({Lisp-File-Entry {File core "src" "core" "base" "syntax" "macros.scm"} 1248708411
    {Lisp-Entry "core.base.syntax.macros" #f 37 18 37 41 ()
      {Lisp-Entry "%%boolean" #f 40 20 40 29 (",expr" "if" "jazz.source-code" "%%cadr" "expr" "let" "src" "lambda")}
      {Lisp-Entry "%%not-null?" #f 46 20 46 31 (",expr" "%%null?" "%%not" "jazz.source-code" "%%cadr" "expr" "let" "src" "lambda")}
      {Lisp-Entry "%%when" #f 57 20 57 26 (",@body" "begin" ",test" "if" "%%cddr" "body" "jazz.source-code" "%%cadr" "test" "let" "src" "lambda")}
      {Lisp-Entry "%%while" #f 72 20 72 27 (",@body" "begin" ",test" "if" ",iter" "jazz.generate-symbol" "iter" "%%cddr" "body" "jazz.source-code" "%%cadr" "test" "let" "src" "lambda")}
      {Lisp-Entry "%%core-assert" #f 89 20 89 33 ("jazz.debug-core?" "jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%core-assertion" #f 94 20 94 36 ("jazz.debug-core?" "jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "%%debug-assert" #f 99 20 99 34 ("jazz.debug-user?" "jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%debug-assertion" #f 104 20 104 37 ("jazz.debug-user?" "jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "%%assert" #f 109 20 109 28 ("jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%assertion" #f 114 20 114 31 ("jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "jazz.expand-%%assert" #f 119 9 119 29 ("error" "'error" "jazz.expand-%%assertion-body" "%%unspecified" "'%%unspecified" "%%list" "%%null?" "if" "effective-body" "get-output-string" "%%desourcify" "write" "display" "open-output-string" "port" "message" "%%cddr" "body" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-%%assertion" #f 131 9 131 32 ("jazz.expand-%%assertion-body" "%%unspecified" "'%%unspecified" "%%list" "%%null?" "if" "effective-body" "%%cdr" "body" "%%cddr" "%%car" "action" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-%%assertion-body" #f 139 9 139 37 (",@body" "begin" "jazz.simplify-begin" ",action" ",assertion" "%%not" "if" "body" "action" "assertion" "test?")}
      {Lisp-Entry "jazz.bind" #f 166 20 166 29 ("expand-car" ",tree" ",tree-symbol" "jazz.generate-symbol" "tree-symbol" "let" "body" "tree" "bindings")
        {Lisp-Entry "expand-car" #f 168 11 168 21 ("expand-car" ",car-symbol" "jazz.error" "%%null?" "if" "jazz.generate-symbol" "car-symbol" "%%pair?" "expand-cdr" ",tree" ",car-binding" "%%symbol?" "cond" "%%car" "car-binding" "let" "body" "tree" "bindings")}
        {Lisp-Entry "expand-cdr" #f 181 11 181 21 ("expand-car" ",cdr-symbol" "jazz.generate-symbol" "cdr-symbol" "%%pair?" ",@body" ",tree" ",cdr-binding" "%%symbol?" "%%null?" "cond" "%%cdr" "cdr-binding" "let" "body" "tree" "bindings")}}
      {Lisp-Entry "%%compose-name" #f 203 20 203 34 ("s2" "s1")}}})
"object"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "object.scm"} 1248276859
    {Lisp-Entry "core.class.syntax.object" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.instances-statistics?" #f 41 8 41 34 ()}
      {Lisp-Entry "jazz.instances-statistics" #f 45 8 45 33 ("eq?" "test:" "%%make-table" "jazz.instances-statistics?" "if")}
      {Lisp-Entry "jazz.register-instance" #f 51 9 51 31 ("%%cons" "list" "0" "%%table-ref" "%%fx+" "jazz.instances-statistics" "%%table-set!" "count" "case" "1" "##vector-ref" "name" "if" "jazz.keep-instances-statistics" "keep" "let" "obj" "class")}
      {Lisp-Entry "%%register-instance" #f 65 20 65 39 (",obj" ",class" "jazz.register-instance" "jazz.instances-statistics?" "if" "obj" "class")}
      {Lisp-Entry "%%object-content" #f 73 12 73 28 ("0")}
      {Lisp-Entry "%%object-marker" #f 77 11 77 26 ("'jazz.object")}
      {Lisp-Entry "%%object-content" #f 80 11 80 27 ("1")}
      {Lisp-Entry "jazz.object-class" #f 84 8 84 25 ("%%object-content")}
      {Lisp-Entry "jazz.object-size" #f 88 8 88 24 ("1" "jazz.object-class" "%%fx+")}
      {Lisp-Entry "%%subtype-jazz" #f 94 24 94 38 ("7")}
      {Lisp-Entry "%%object?" #f 97 24 97 33 ("expr")}
      {Lisp-Entry "%%object" #f 100 24 100 32 ("%%register-instance" "%%subtype-jazz" ",@rest" ",cls" "##vector" "##subtype-set!" ",obj" "jazz.generate-symbol" "obj" "let" "jazz.instances-statistics?" "if" "cls" "lambda" "jazz.with-uniqueness" "rest" "class")}
      {Lisp-Entry "%%make-object" #f 110 24 110 37 ("%%register-instance" ",cls" "%%set-object-class" "%%subtype-jazz" ",size" "%%make-vector" "##subtype-set!" ",obj" "jazz.generate-symbol" "obj" "let" "cls" "lambda" "jazz.with-uniqueness" "size" "class")}
      {Lisp-Entry "%%object-length" #f 119 24 119 39 (",object" "##vector-length" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "obj" "lambda" "jazz.with-uniqueness" "jazz.debug-core?" "if" "object")}
      {Lisp-Entry "%%object-ref" #f 127 24 127 36 (",object" ",n" "##vector-ref" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "rnk" "obj" "lambda" "jazz.with-uniqueness" "jazz.debug-core?" "if" "n" "object")}
      {Lisp-Entry "%%object-set!" #f 140 24 140 37 (",object" ",value" ",n" "##vector-set!" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "rnk" "obj" "lambda" "jazz.with-uniqueness" "jazz.debug-core?" "if" "value" "n" "object")}
      {Lisp-Entry "%%object?" #f 154 23 154 32 ("expr")}
      {Lisp-Entry "%%object" #f 159 23 159 31 ("rest")}
      {Lisp-Entry "%%make-object" #f 162 23 162 36 ("%%object-marker" "0" "%%object-set!" ",size" "%%make-vector" ",object" "jazz.generate-symbol" "object" "let" "size")}
      {Lisp-Entry "%%object-length" #f 168 23 168 38 ("vector")}
      {Lisp-Entry "%%object-ref" #f 171 23 171 35 ("n" "vector")}
      {Lisp-Entry "%%object-set!" #f 174 23 174 36 ("value" "n" "vector")}
      {Lisp-Entry "%%get-object-slot" #f 178 20 178 37 ("slot-offset" "object")}
      {Lisp-Entry "%%set-object-slot" #f 182 20 182 37 ("value" "slot-offset" "object")}}})
"output"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "output.scm"} 1249474054
    {Lisp-Entry "core.class.runtime.output" #f 37 18 37 43 ("jazz.output-mode" "jazz.print-jazz" "object" "port" "jazz.write-jazz" "jazz.dialect.language.object.Object.print" ":reader" "':reader" "jazz.write" ":human" "':human" "jazz.output-value" "output" "value" "lambda" "jazz.display" "set!")
      {Lisp-Entry "jazz.output-mode" #f 40 8 40 24 ("':reader")}
      {Lisp-Entry "jazz.print" #f 54 9 54 19 ("jazz.error" "else" "write" ":describe" ":text" ":reader" "display" ":human" "case" "detail" "output" "value")}
      {Lisp-Entry "jazz.->string" #f 61 9 61 22 ("get-output-string" "jazz.output-mode" "jazz.output-value" "open-output-string" "output" "let" "else" "%%values?" "%%unspecified?" "cond" "value")}
      {Lisp-Entry "jazz.output-value" #f 72 9 72 26 ("jazz.write-jazz" "else" "jazz.print" "jazz.primitive?" "jazz.output-list" "%%pair?" "%%null?" "or" "cond" "detail" "output" "value")}
      {Lisp-Entry "jazz.output-list" #f 81 9 81 25 ("jazz.output-list-content" "display" "detail" "output" "lst")}
      {Lisp-Entry "jazz.output-list-content" #f 87 9 87 33 ("begin" "display" "%%pair?" "%%cdr" "set!" "%%car" "jazz.output-value" "and" "%%while" "done?" "scan" "let" "%%null?" "%%not" "if" "detail" "output" "lst")}
      {Lisp-Entry "jazz.debug" #f 103 9 103 19 ("force-output" "newline" "%%cdr" "expr" "lambda" "for-each" "%%car" "jazz.->string" "display" "%%not-null?" "%%when" "rest")}
      {Lisp-Entry "jazz.debug-string" #f 114 9 114 26 ("force-output" "newline" "display" "str")}
      {Lisp-Entry "jazz.terminal" #f 120 8 120 21 ("jazz.debug")}
      {Lisp-Entry "jazz.terminal-string" #f 124 8 124 28 ("jazz.debug-string")}
      {Lisp-Entry "jazz.terminal-port" #f 128 9 128 27 ("console-port")}
      {Lisp-Entry "jazz.bootstrap-output-value" #f 132 9 132 36 ("jazz.->string" "display" "output" "value")}
      {Lisp-Entry "jazz.pretty-print" #f 138 13 138 30 ("pretty-print" "apply" "rest" "expr")}
      {Lisp-Entry "jazz.pretty-print" #f 142 13 142 30 ("pretty-print" "apply" "rest" "expr")}
      {Lisp-Entry "jazz.pretty-print" #f 146 12 146 29 ("newline" "display" "rest" "expr")}
      {Lisp-Entry "jazz.dialect.language.object.Object.print" #f 156 8 156 49 ()}
      {Lisp-Entry "jazz.print-jazz" #f 162 9 162 24 ("jazz.print-serial" "jazz.print-object" "2" "0" "%%class-dispatch" "jazz.dialect.language.object.Object.print" "jazz.use-print?" "if" "detail" "output" "object")}}})
"output-hook"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "output-hook.scm"} 1238328024
    {Lisp-Entry "core.class.runtime.output-hook" #f 37 18 37 48 ("##default-wr" "else" "jazz.writeenv-port" "##jazz?" "and" "cond" "obj" "we" "lambda" "##wr" "jazz.write-jazz" "set!")
      {Lisp-Entry "jazz.write-jazz" #f 42 12 42 27 ()}}})
"reader"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "reader.scm"} 1248276859
    {Lisp-Entry "core.base.runtime.reader" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.read-source-all" #f 40 9 40 29 ("%%vector-ref" "%%source-code" "%%cdr" "jazz.readtable-start-syntax" "##unwrap-datum" "##wrap-datum" "%%current-readtable" "%%read-all-as-a-begin-expr-from-port" "begin-vector" "let" "%%input-port-column-set!" "1" "%%fx+" "%%input-port-line-set!" "lambda" "%%input-port-names-set!" "if" "col" "line" "container" "#!optional" "port")}
      {Lisp-Entry "jazz.read-source-first" #f 59 9 59 31 ("jazz.read-source-all" "%%car" "col" "line" "container" "#!optional" "port")}}})
"runtime"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "runtime.scm"} 1251206746
    {Lisp-Entry "core.class.runtime.runtime" #f 37 18 37 44 ("jazz.Queue" "jazz.Method-Node" "jazz.Method" "jazz.Property" "jazz.Slot" "jazz.Field" "jazz.Interface" "port?" "jazz.register-usertype" "4" "3" "2" "1" "0" "jazz.specialtypes" "jazz.subtype-boxvalues" "jazz.subtype-f64vector" "jazz.subtype-f32vector" "jazz.subtype-u64vector" "jazz.subtype-s64vector" "jazz.subtype-u32vector" "jazz.subtype-s32vector" "jazz.subtype-u16vector" "jazz.subtype-s16vector" "jazz.subtype-u8vector" "jazz.subtype-s8vector" "jazz.subtype-foreign" "jazz.subtype-bignum" "jazz.subtype-flonum" "jazz.subtype-string" "jazz.subtype-procedure" "jazz.subtype-continuation" "jazz.subtype-keyword" "jazz.subtype-symbol" "jazz.subtype-cpxnum" "jazz.subtype-ratnum" "jazz.subtype-pair" "jazz.subtype-vector" "jazz.subtypes" "%%vector-set!" "jazz.Unspecified" "jazz.Unspecified-Class" "jazz.EOF" "jazz.EOF-Class" "jazz.Values" "jazz.Values-Class" "jazz.Foreign" "jazz.Foreign-Class" "jazz.Promise" "jazz.Promise-Class" "jazz.Thread" "jazz.Thread-Class" "jazz.Table" "jazz.Table-Class" "jazz.Keyword" "jazz.Keyword-Class" "jazz.Symbol" "jazz.Symbol-Class" "jazz.Procedure" "jazz.Procedure-Class" "jazz.Continuation" "jazz.Continuation-Class" "jazz.Port" "jazz.Port-Class" "jazz.F64Vector" "jazz.F64Vector-Class" "jazz.F32Vector" "jazz.F32Vector-Class" "jazz.U64Vector" "jazz.U64Vector-Class" "jazz.S64Vector" "jazz.S64Vector-Class" "jazz.U32Vector" "jazz.U32Vector-Class" "jazz.S32Vector" "jazz.S32Vector-Class" "jazz.U16Vector" "jazz.U16Vector-Class" "jazz.S16Vector" "jazz.S16Vector-Class" "jazz.U8Vector" "jazz.U8Vector-Class" "jazz.S8Vector" "jazz.S8Vector-Class" "jazz.Vector" "jazz.Vector-Class" "jazz.String" "jazz.String-Class" "jazz.Pair" "jazz.Pair-Class" "jazz.Null" "jazz.Null-Class" "jazz.List" "jazz.List-Class" "jazz.Sequence" "jazz.Sequence-Class" "jazz.Flonum" "jazz.Flonum-Class" "jazz.Fixnum" "jazz.Fixnum-Class" "jazz.Integer" "jazz.Integer-Class" "jazz.Rational" "jazz.Rational-Class" "jazz.Real" "jazz.Real-Class" "jazz.Complex" "jazz.Complex-Class" "jazz.Number" "jazz.Number-Class" "jazz.Numeric" "jazz.Numeric-Class" "jazz.Char" "jazz.Char-Class" "jazz.Boolean" "jazz.Boolean-Class" "%%set-object-class" "jazz.Object-Class" "jazz.Class" "jazz.Category" "jazz.Type" "jazz.Object" "jazz.encapsulate-class" "%%get-object-class" "%%subclass?" "class" "object" "lambda" "jazz.object-of-class?" "set!")
      {Lisp-Entry "jazz.new-interface-rank" #f 40 8 40 31 ("0")}
      {Lisp-Entry "jazz.dispatch?" #f 49 9 49 23 ("%%fx-" "%%string-ref" "%%eqv?" "1" "%%fx>" "%%string-length" "len" "%%symbol->string" "name" "let" "%%symbol?" "and" "symbol")}
      {Lisp-Entry "jazz.dispatch->symbol" #f 58 9 58 30 ("1" "%%string-length" "%%fx-" "0" "%%substring" "%%string->symbol" "%%symbol->string" "name" "let" "dispatch")}
      {Lisp-Entry "jazz.composite-name?" #f 63 9 63 29 ("%%symbol->string" "jazz.memstring" "%%symbol?" "and" "symbol")}
      {Lisp-Entry "jazz.compose-name" #f 68 9 68 26 ("symbol->string" "map" "jazz.join-strings" "%%string->symbol" "rest")}
      {Lisp-Entry "jazz.compose-helper" #f 72 9 72 28 ("%%symbol->string" "%%string-append" "%%string->symbol" "suffix" "locator")}
      {Lisp-Entry "jazz.split-identifier" #f 76 9 76 30 ("%%symbol->string" "jazz.split-string" "string->symbol" "map" "%%symbol?" "%%debug-assert" "identifier")}
      {Lisp-Entry "jazz.inspect-object" #f 86 9 86 28 ("1" "%%fx+" "%%object-ref" "%%vector-set!" "begin" "%%fx<" "if" "0" "n" "iter" "let" "%%make-vector" "content" "%%object-length" "size" "let*" "%%object?" "%%assert" "object")}
      {Lisp-Entry "jazz.Core-Classes" #f 103 8 103 25 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-core-classes" #f 107 9 107 30 ("jazz.Core-Classes")}
      {Lisp-Entry "jazz.core-class?" #f 111 9 111 25 ("jazz.Core-Classes" "%%table-ref" "%%boolean" "name")}
      {Lisp-Entry "jazz.get-core-class" #f 115 9 115 28 ("jazz.Core-Classes" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-core-class" #f 119 9 119 28 ("jazz.Core-Classes" "%%table-set!" "class" "name")}
      {Lisp-Entry "jazz.set-core-class-redefined" #f 123 9 123 38 ("jazz.Core-Classes" "%%table-set!" "class" "name")}
      {Lisp-Entry "jazz.object?" #f 132 9 132 21 ("%%object?" "expr")}
      {Lisp-Entry "jazz.primitive?" #f 136 9 136 24 ("%%object?" "%%not" "expr")}
      {Lisp-Entry "jazz.subtype?" #f 140 9 140 22 ("%%subtype?" "%%boolean" "jazz.type?" "%%assert" "type" "target")}
      {Lisp-Entry "jazz.subcategory?" #f 145 9 145 26 ("%%subcategory?" "%%boolean" "category" "target")}
      {Lisp-Entry "jazz.subclass?" #f 149 9 149 23 ("%%subclass?" "%%boolean" "class" "target")}
      {Lisp-Entry "jazz.get-category-descendants" #f 153 9 153 38 ("%%get-category-descendants" "category")}
      {Lisp-Entry "jazz.get-class-ascendant" #f 157 9 157 33 ("%%get-class-ascendant" "class")}
      {Lisp-Entry "jazz.collect-type" #f 166 9 166 26 ("%%is?" "obj" "lambda" "jazz.collect-if" "lst" "type")}
      {Lisp-Entry "jazz.create-class-tables" #f 172 9 172 33 ("jazz.create-class-class-table" "jazz.create-class-interface-table" "class")}
      {Lisp-Entry "jazz.create-core-class-tables" #f 177 9 177 38 ("jazz.create-class-class-table" "class")}
      {Lisp-Entry "jazz.create-class-interface-table" #f 181 9 181 42 ("%%set-class-interface-table" "%%get-category-ancestors" "%%class-of" "jazz.call-into-abstract" "rest" "object" "%%get-method-implementation-rank" "jazz.Method" "%%is?" "field" "field-name" "%%get-category-fields" "%%iterate-table" "category-name" "%%get-category-name" "class-name" "jazz.call-into-incoherent" "category-vtable" "%%get-category-virtual-size" "%%get-interface-rank" "rank" "let*" "jazz.Interface" "%%class-is?" "category" "lambda" "jazz.vector-for-each" "1" "%%fx+" "%%vector-copy" "%%vector-set!" "%%vector-ref" "ascendant-vtable" "%%fx<" "0" "i" "iter" "%%vector-length" "size" "ascendant-interface-table" "%%get-class-ascendant" "ascendant" "jazz.new-interface-rank" "%%make-vector" "vtable" "let" "%%get-class-interface-table" "%%not" "%%when" "class")}
      {Lisp-Entry "jazz.create-class-class-table" #f 214 9 214 38 ("%%vector-ref" "%%vector-copy" "%%vector-set!" "%%fx<" "0" "i" "iter" "#" "'#" "1" "%%fx+" "%%make-vector" "vtable" "%%vector-length" "size" "ascendant-class-table" "let*" "if" "%%set-class-class-table" "%%get-class-ascendant" "ascendant" "let" "%%get-class-class-table" "%%not" "%%when" "class")}
      {Lisp-Entry "jazz.encapsulate-class" #f 230 9 230 31 ("jazz.update-core-class" "%%set-class-core-vtable" "%%get-class-core-method-alist" "%%get-class-core-virtual-alist" "jazz.get-method-rank" "%%cdr" "method-implementation" "%%car" "method-name" "method" "lambda" "for-each" "%%vector-ref" "%%vector-set!" "%%fx>=" "1" "%%vector-length" "%%fx-" "n" "iter" "%%get-class-core-vtable" "ascendant-vtable" "%%get-class-ascendant" "ascendant" "%%make-vector" "vtable" "0" "%%fx>" "%%when" "%%length" "vtable-size" "%%get-class-core-virtual-names" "virtual-names" "let" "class")}
      {Lisp-Entry "jazz.update-class" #f 257 9 257 26 ("jazz.update-class-class-table" "class")}
      {Lisp-Entry "jazz.update-core-class" #f 261 9 261 31 ("jazz.update-class-class-table" "class")}
      {Lisp-Entry "jazz.update-class-class-table" #f 265 9 265 38 ("%%get-category-descendants" "descendant" "%%vector-set!" "%%get-method-implementation-tree" "%%get-method-node-implementation" "implementation" "%%get-method-implementation-rank" "implementation-rank" "field" "lambda" "for-each" "%%vector-ref" "jazz.resize-vector" "implementation-table" "%%get-class-class-table" "class-table" "let*" "iter" "%%get-category-virtual-size" "class-virtual-size" "%%get-class-level" "class-rank" "%%not-null?" "%%when" "update-class-class-root-methods" "added-methods" "let" "class")
        {Lisp-Entry "update-class-class-root-methods" #f 266 11 266 42 ("%%cons" "set!" "%%set-method-category-rank" "begin" "%%get-category-descendants" "descendant" "for-each" "%%vector-set!" "%%eq?" "implementation-table" "iter" "%%neq?" "%%get-method-implementation-tree" "%%get-method-node-implementation" "new-implementation" "old-implementation" "%%get-method-implementation-rank" "implementation-rank" "let" "%%get-method-category-rank" "if" "jazz.virtual-method?" "%%when" "field" "key" "lambda" "%%get-category-fields" "%%iterate-table" "added-methods" "%%vector-ref" "root-implementation-table" "%%get-class-level" "class-rank" "%%get-class-class-table" "class-table" "let*" "class")}}
      {Lisp-Entry "jazz.new-core-class" #f 316 9 316 28 ("jazz.create-core-class-tables" "%%get-category-descendants" "%%cons" "%%set-category-descendants" "%%when" "jazz.compute-core-class-ancestors" "%%list->vector" "%%set-category-ancestors" "%%get-class-core-virtual-names" "1" "%%get-class-level" "%%fx+" "if" "0" "%%object" "core-class" "let" "instance-size" "slot-names" "ascendant" "fields" "name" "class")}
      {Lisp-Entry "jazz.compute-core-class-ancestors" #f 346 9 346 42 ("%%get-category-ancestors" "%%vector->list" "%%append" "%%list" "%%not" "if" "ascendant" "class")}
      {Lisp-Entry "jazz.validate-inherited-slots" #f 352 9 352 38 ("jazz.error" "core-class-all-slot-names" "%%equal?" "%%null?" "%%not" "and" "or" "if" "inherited-slot-names" "ascendant" "name")
        {Lisp-Entry "core-class-all-slots" #f 353 11 353 31 ("core-class-all-slots" "%%append" "%%not" "if" "%%get-class-ascendant" "ascendant" "%%get-class-slots" "slots" "let" "core-class")}
        {Lisp-Entry "core-class-all-slot-names" #f 360 11 360 36 ("%%get-class-slots" "%%get-field-name" "slot" "lambda" "map" "symbol?" "jazz.some?" "if" "core-class-all-slots" "all-slots" "let" "core-class")}}
      {Lisp-Entry "jazz.Object" #f 379 27 379 38 ()}
      {Lisp-Entry "jazz.get-object-slot" #f 382 9 382 29 ("%%get-object-slot" "slot-offset" "object")}
      {Lisp-Entry "jazz.set-object-slot" #f 386 9 386 29 ("%%set-object-slot" "value" "slot-offset" "object")}
      {Lisp-Entry "jazz.classname->string" #f 390 9 390 31 ("%%get-category-name" "%%symbol->string" "%%null?" "if" "class")}
      {Lisp-Entry "jazz.print-object" ("jazz.Object") 396 30 396 47 ("detail" "output")}
      {Lisp-Entry "jazz.print-object" ("jazz.Object") 399 21 399 38 ("object" "jazz.print-serial" "detail" "output")}
      {Lisp-Entry "jazz.print-serial" #f 403 9 403 26 ("display" "object->serial-number" "serial" "let" "output" "object")}
      {Lisp-Entry "jazz.Type" #f 418 27 418 36 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Type") 421 30 421 43 ("object")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Type") 424 21 424 34 ("%%class-of" "type" "jazz.of-subtype?" "object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Type") 428 30 428 46 ("subtype")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Type") 431 21 431 37 ("type" "jazz.error" "subtype")}
      {Lisp-Entry "jazz.category-type?" ("jazz.Type") 435 30 435 49 ()}
      {Lisp-Entry "jazz.category-type?" ("jazz.Type") 438 21 438 40 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Type") 442 30 442 49 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Type") 445 21 445 40 ("type" "jazz.error")}
      {Lisp-Entry "jazz.emit-type" ("jazz.Type") 449 30 449 44 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-type" ("jazz.Type") 452 21 452 35 ("type" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Type") 456 30 456 44 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Type") 459 21 459 35 (",locator" ",value" "%%is?" "type" "jazz.emit-type" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Type") 464 30 464 45 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Type") 467 21 467 36 (",locator" ",value" "jazz.type-error" "jazz.emit-test" "%%not" "if" "type" "jazz.emit-type" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.bootstrap-type?" #f 474 9 474 29 ("type-class" "object")}
      {Lisp-Entry "jazz.type?" #f 479 9 479 19 ("jazz.Type" "%%is?" "%%object?" "and" "object")}
      {Lisp-Entry "jazz.Category" #f 492 27 492 40 ()}
      {Lisp-Entry "jazz.category?" #f 495 9 495 23 ("jazz.category-type?" "jazz.type?" "and" "object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Category") 500 21 500 37 ("%%get-category-ancestors" "type" "jazz.vector-memq?" "jazz.category-type?" "and" "subtype")}
      {Lisp-Entry "jazz.category-type?" ("jazz.Category") 505 21 505 40 ()}
      {Lisp-Entry "jazz.emit-type" ("jazz.Category") 509 21 509 35 ("type" "%%get-category-name" "environment" "source-declaration")}
      {Lisp-Entry "jazz.update-category" ("jazz.Category") 513 30 513 50 ()}
      {Lisp-Entry "jazz.update-category" ("jazz.Category") 516 21 516 41 ()}
      {Lisp-Entry "jazz.is?" #f 520 9 520 17 ("%%is?" "%%boolean" "category" "object")}
      {Lisp-Entry "jazz.is-not?" #f 524 9 524 21 ("%%is?" "%%not" "%%boolean" "category" "object")}
      {Lisp-Entry "jazz.get-category-name" #f 528 9 528 31 ("%%get-category-name" "jazz.category?" "%%debug-assert" "category")}
      {Lisp-Entry "jazz.add-field" #f 533 9 533 23 ("%%get-field-name" "%%set-category-field" "field" "category")}
      {Lisp-Entry "jazz.Class" #f 545 27 545 37 ()}
      {Lisp-Entry "jazz.new-class" #f 548 9 548 23 ("%%class-dispatch" "jazz.create-class-tables" "%%get-category-descendants" "%%cons" "%%set-category-descendants" "%%when" "jazz.compute-class-ancestors" "%%list->vector" "%%set-category-ancestors" "%%get-class-core-vtable" "1" "%%get-class-level" "%%fx+" "jazz.object-size" "%%get-class-instance-size" "%%get-class-slots" "if" "0" "eq?" "test:" "%%make-table" "jazz.allocate-class" "class" "let" "interfaces" "ascendant" "name" "class-of-class")}
      {Lisp-Entry "jazz.compute-class-ancestors" #f 570 9 570 37 ("add-classes" "%%get-interface-ascendants" "%%cons" "set!" "%%memq" "%%not" "else" "%%get-class-interfaces" "for-each" "%%when" "%%get-class-ascendant" "%%class?" "cond" "category" "add-interfaces" "ancestors" "let" "interfaces" "ascendant" "class")}
      {Lisp-Entry "jazz.class?" #f 589 9 589 20 ("jazz.Class" "%%class-is?" "object")}
      {Lisp-Entry "jazz.i-class-of" #f 593 9 593 24 ("%%i-class-of-impl" "expr")}
      {Lisp-Entry "jazz.class-of" #f 597 9 597 22 ("%%class-of-impl" "expr")}
      {Lisp-Entry "jazz.class-of-native" #f 604 9 604 29 ("jazz.error" "jazz.usertype" "or" "else" "jazz.Unspecified" "%%unspecified?" "jazz.EOF" "%%eof-object?" "jazz.Values" "%%values?" "jazz.Foreign" "%%foreign?" "jazz.Procedure" "%%procedure?" "jazz.Continuation" "%%continuation?" "jazz.Port" "%%port?" "jazz.Keyword" "%%keyword?" "jazz.Symbol" "%%symbol?" "jazz.F64Vector" "%%f64vector?" "jazz.F32Vector" "%%f32vector?" "jazz.U64Vector" "%%u64vector?" "jazz.S64Vector" "%%s64vector?" "jazz.U32Vector" "%%u32vector?" "jazz.S32Vector" "%%s32vector?" "jazz.U16Vector" "%%u16vector?" "jazz.S16Vector" "%%s16vector?" "jazz.U8Vector" "%%u8vector?" "jazz.S8Vector" "%%s8vector?" "jazz.Vector" "%%vector?" "jazz.String" "%%string?" "jazz.Pair" "%%pair?" "jazz.Null" "%%null?" "jazz.Number" "%%number?" "jazz.Complex" "%%complex?" "jazz.Real" "%%real?" "jazz.Rational" "%%rational?" "jazz.Integer" "%%integer?" "jazz.Flonum" "%%flonum?" "jazz.Fixnum" "%%fixnum?" "jazz.Char" "%%char?" "jazz.Boolean" "%%boolean?" "cond" "expr")}
      {Lisp-Entry "jazz.class-subtype?" #f 642 9 642 28 ("%%class-subtype?" "class" "target")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Class") 646 21 646 34 ("class" "%%class-of" "%%class-subtype?" "object")}
      {Lisp-Entry "jazz.update-category" ("jazz.Class") 650 21 650 41 ("class" "jazz.update-class")}
      {Lisp-Entry "jazz.slot-form?" #f 654 9 654 24 ("slot" "'slot" "%%car" "%%eq?" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.new" #f 659 9 659 17 ("0" "%%class-dispatch" "apply" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "rest" "class")}
      {Lisp-Entry "jazz.new0" #f 667 9 667 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "class")}
      {Lisp-Entry "jazz.new1" #f 675 9 675 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "arg1" "class")}
      {Lisp-Entry "jazz.new2" #f 683 9 683 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "arg2" "arg1" "class")}
      {Lisp-Entry "jazz.iterate-descendants-tree" #f 691 9 691 38 ("%%get-category-descendants" "for-each" "iter" "let" "proc" "class")}
      {Lisp-Entry "jazz.Object-Class" #f 705 27 705 44 ()}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Object-Class") 708 21 708 37 ("nextmethod" "class" "%%object-class?" "if" "subtype")}
      {Lisp-Entry "jazz.Boolean-Class" #f 734 27 734 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Boolean-Class") 737 21 737 34 ("%%boolean?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Boolean-Class") 741 21 741 40 ("'bool")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Boolean-Class") 745 21 745 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Boolean" #f 752 27 752 39 ()}
      {Lisp-Entry "jazz.Char-Class" #f 763 27 763 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Char-Class") 766 21 766 34 ("%%char?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Char-Class") 770 21 770 40 ("'char")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Char-Class") 774 21 774 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Char" #f 781 27 781 36 ()}
      {Lisp-Entry "jazz.Numeric-Class" #f 792 27 792 45 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Numeric-Class") 795 21 795 40 ("'numeric")}
      {Lisp-Entry "jazz.Numeric" #f 802 27 802 39 ()}
      {Lisp-Entry "jazz.Number-Class" #f 813 27 813 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Number-Class") 816 21 816 34 ("%%number?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Number-Class") 820 21 820 40 ("'number")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Number-Class") 824 21 824 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Number" #f 831 27 831 38 ()}
      {Lisp-Entry "jazz.Complex-Class" #f 842 27 842 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Complex-Class") 845 21 845 34 ("%%complex?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Complex-Class") 849 21 849 40 ("'complex")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Complex-Class") 853 21 853 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Complex" #f 860 27 860 39 ()}
      {Lisp-Entry "jazz.Real-Class" #f 871 27 871 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Real-Class") 874 21 874 34 ("%%real?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Real-Class") 878 21 878 40 ("'real")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Real-Class") 882 21 882 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Real" #f 889 27 889 36 ()}
      {Lisp-Entry "jazz.Rational-Class" #f 900 27 900 46 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Rational-Class") 903 21 903 34 ("%%rational?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Rational-Class") 907 21 907 40 ("'rational")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Rational-Class") 911 21 911 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Rational" #f 918 27 918 40 ()}
      {Lisp-Entry "jazz.Integer-Class" #f 929 27 929 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Integer-Class") 932 21 932 34 ("%%integer?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Integer-Class") 936 21 936 40 ("'int")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Integer-Class") 940 21 940 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Integer" #f 947 27 947 39 ()}
      {Lisp-Entry "jazz.Fixnum-Class" #f 958 27 958 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Fixnum-Class") 961 21 961 34 ("%%fixnum?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Fixnum-Class") 965 21 965 40 ("'fx")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Fixnum-Class") 969 21 969 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Fixnum" #f 976 27 976 38 ()}
      {Lisp-Entry "jazz.Flonum-Class" #f 987 27 987 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Flonum-Class") 990 21 990 34 ("%%flonum?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Flonum-Class") 994 21 994 40 ("'fl")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Flonum-Class") 998 21 998 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Flonum" #f 1005 27 1005 38 ()}
      {Lisp-Entry "jazz.Sequence-Class" #f 1016 27 1016 46 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Sequence-Class") 1019 21 1019 40 ("'sequence")}
      {Lisp-Entry "jazz.Sequence" #f 1026 27 1026 40 ()}
      {Lisp-Entry "jazz.List-Class" #f 1037 27 1037 42 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.List-Class") 1040 21 1040 40 ("'list")}
      {Lisp-Entry "jazz.emit-test" ("jazz.List-Class") 1044 21 1044 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.List" #f 1051 27 1051 36 ()}
      {Lisp-Entry "jazz.Null-Class" #f 1062 27 1062 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Null-Class") 1065 21 1065 34 ("%%null?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Null-Class") 1069 21 1069 40 ("'null")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Null-Class") 1073 21 1073 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Null" #f 1080 27 1080 36 ()}
      {Lisp-Entry "jazz.Pair-Class" #f 1091 27 1091 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Pair-Class") 1094 21 1094 34 ("%%pair?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Pair-Class") 1098 21 1098 40 ("'pair")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Pair-Class") 1102 21 1102 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Pair" #f 1109 27 1109 36 ()}
      {Lisp-Entry "jazz.String-Class" #f 1120 27 1120 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.String-Class") 1123 21 1123 34 ("%%string?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.String-Class") 1127 21 1127 40 ("'string")}
      {Lisp-Entry "jazz.emit-test" ("jazz.String-Class") 1131 21 1131 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.String" #f 1138 27 1138 38 ()}
      {Lisp-Entry "jazz.Vector-Class" #f 1149 27 1149 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Vector-Class") 1152 21 1152 34 ("%%vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Vector-Class") 1156 21 1156 40 ("'vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Vector-Class") 1160 21 1160 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Vector" #f 1167 27 1167 38 ()}
      {Lisp-Entry "jazz.S8Vector-Class" #f 1178 27 1178 46 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.S8Vector-Class") 1181 21 1181 34 ("%%s8vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.S8Vector-Class") 1185 21 1185 40 ("'s8vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.S8Vector-Class") 1189 21 1189 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S8Vector" #f 1196 27 1196 40 ()}
      {Lisp-Entry "jazz.U8Vector-Class" #f 1207 27 1207 46 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.U8Vector-Class") 1210 21 1210 34 ("%%u8vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.U8Vector-Class") 1214 21 1214 40 ("'u8vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.U8Vector-Class") 1218 21 1218 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U8Vector" #f 1225 27 1225 40 ()}
      {Lisp-Entry "jazz.S16Vector-Class" #f 1236 27 1236 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.S16Vector-Class") 1239 21 1239 34 ("%%s16vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.S16Vector-Class") 1243 21 1243 40 ("'s16vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.S16Vector-Class") 1247 21 1247 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S16Vector" #f 1254 27 1254 41 ()}
      {Lisp-Entry "jazz.U16Vector-Class" #f 1265 27 1265 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.U16Vector-Class") 1268 21 1268 34 ("%%u16vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.U16Vector-Class") 1272 21 1272 40 ("'u16vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.U16Vector-Class") 1276 21 1276 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U16Vector" #f 1283 27 1283 41 ()}
      {Lisp-Entry "jazz.S32Vector-Class" #f 1294 27 1294 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.S32Vector-Class") 1297 21 1297 34 ("%%s32vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.S32Vector-Class") 1301 21 1301 40 ("'s32vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.S32Vector-Class") 1305 21 1305 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S32Vector" #f 1312 27 1312 41 ()}
      {Lisp-Entry "jazz.U32Vector-Class" #f 1323 27 1323 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.U32Vector-Class") 1326 21 1326 34 ("%%u32vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.U32Vector-Class") 1330 21 1330 40 ("'u32vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.U32Vector-Class") 1334 21 1334 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U32Vector" #f 1341 27 1341 41 ()}
      {Lisp-Entry "jazz.S64Vector-Class" #f 1352 27 1352 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.S64Vector-Class") 1355 21 1355 34 ("%%s64vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.S64Vector-Class") 1359 21 1359 40 ("'s64vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.S64Vector-Class") 1363 21 1363 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.S64Vector" #f 1370 27 1370 41 ()}
      {Lisp-Entry "jazz.U64Vector-Class" #f 1381 27 1381 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.U64Vector-Class") 1384 21 1384 34 ("%%u64vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.U64Vector-Class") 1388 21 1388 40 ("'u64vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.U64Vector-Class") 1392 21 1392 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U64Vector" #f 1399 27 1399 41 ()}
      {Lisp-Entry "jazz.F32Vector-Class" #f 1410 27 1410 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.F32Vector-Class") 1413 21 1413 34 ("%%f32vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.F32Vector-Class") 1417 21 1417 40 ("'f32vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.F32Vector-Class") 1421 21 1421 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.F32Vector" #f 1428 27 1428 41 ()}
      {Lisp-Entry "jazz.F64Vector-Class" #f 1439 27 1439 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.F64Vector-Class") 1442 21 1442 34 ("%%f64vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.F64Vector-Class") 1446 21 1446 40 ("'f64vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.F64Vector-Class") 1450 21 1450 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.F64Vector" #f 1457 27 1457 41 ()}
      {Lisp-Entry "jazz.Port-Class" #f 1468 27 1468 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Port-Class") 1471 21 1471 34 ("%%port?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Port-Class") 1475 21 1475 40 ("'port")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Port-Class") 1479 21 1479 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Port" #f 1486 27 1486 36 ()}
      {Lisp-Entry "jazz.Continuation-Class" #f 1497 27 1497 50 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Continuation-Class") 1500 21 1500 34 ("%%continuation?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Continuation-Class") 1504 21 1504 40 ("'continuation")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Continuation-Class") 1508 21 1508 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Continuation" #f 1515 27 1515 44 ()}
      {Lisp-Entry "jazz.Procedure-Class" #f 1526 27 1526 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Procedure-Class") 1529 21 1529 34 ("%%procedure?" "object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Procedure-Class") 1533 21 1533 37 ("class" "nextmethod" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Procedure-Class") 1539 21 1539 40 ("'procedure")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Procedure-Class") 1543 21 1543 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Procedure" #f 1550 27 1550 41 ()}
      {Lisp-Entry "jazz.Symbol-Class" #f 1561 27 1561 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Symbol-Class") 1564 21 1564 34 ("%%symbol?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Symbol-Class") 1568 21 1568 40 ("'symbol")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Symbol-Class") 1572 21 1572 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Symbol" #f 1579 27 1579 38 ()}
      {Lisp-Entry "jazz.Keyword-Class" #f 1590 27 1590 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Keyword-Class") 1593 21 1593 34 ("%%keyword?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Keyword-Class") 1597 21 1597 40 ("'keyword")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Keyword-Class") 1601 21 1601 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Keyword" #f 1608 27 1608 39 ()}
      {Lisp-Entry "jazz.Table-Class" #f 1619 27 1619 43 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Table-Class") 1622 21 1622 34 ("%%table?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Table-Class") 1626 21 1626 40 ("'table")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Table-Class") 1630 21 1630 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Table" #f 1637 27 1637 37 ()}
      {Lisp-Entry "jazz.Thread-Class" #f 1648 27 1648 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Thread-Class") 1651 21 1651 34 ("%%thread?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Thread-Class") 1655 21 1655 40 ("'thread")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Thread-Class") 1659 21 1659 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Thread" #f 1666 27 1666 38 ()}
      {Lisp-Entry "jazz.Promise-Class" #f 1677 27 1677 45 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Promise-Class") 1680 21 1680 40 ("'promise")}
      {Lisp-Entry "jazz.Promise" #f 1687 27 1687 39 ()}
      {Lisp-Entry "jazz.Foreign-Class" #f 1698 27 1698 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Foreign-Class") 1701 21 1701 34 ("%%foreign?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Foreign-Class") 1705 21 1705 40 ("'foreign")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Foreign-Class") 1709 21 1709 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Foreign" #f 1716 27 1716 39 ()}
      {Lisp-Entry "jazz.Values-Class" #f 1727 27 1727 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Values-Class") 1730 21 1730 34 ("%%values?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Values-Class") 1734 21 1734 40 ("'values")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Values-Class") 1738 21 1738 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Values" #f 1745 27 1745 38 ()}
      {Lisp-Entry "jazz.EOF-Class" #f 1756 27 1756 41 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.EOF-Class") 1759 21 1759 34 ("%%eof-object?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.EOF-Class") 1763 21 1763 40 ("'eof")}
      {Lisp-Entry "jazz.emit-test" ("jazz.EOF-Class") 1767 21 1767 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.EOF" #f 1774 27 1774 35 ()}
      {Lisp-Entry "jazz.Unspecified-Class" #f 1785 27 1785 49 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Unspecified-Class") 1788 21 1788 34 ("%%unspecified?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Unspecified-Class") 1792 21 1792 40 ("'unspecified")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Unspecified-Class") 1796 21 1796 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Unspecified" #f 1803 27 1803 43 ()}
      {Lisp-Entry "jazz.subtypes" #f 1816 12 1816 25 ("32" "%%make-vector")}
      {Lisp-Entry "jazz.specialtypes" #f 1819 12 1819 29 ("16" "%%make-vector")}
      {Lisp-Entry "jazz.table-type" #f 1823 12 1823 27 ("make-table" "%%structure-type")}
      {Lisp-Entry "jazz.port-type" #f 1827 12 1827 26 ("open-output-string" "%%structure-type")}
      {Lisp-Entry "jazz.thread-type" #f 1831 12 1831 28 ("current-thread" "%%structure-type")}
      {Lisp-Entry "jazz.usertypes" #f 1867 8 1867 22 ()}
      {Lisp-Entry "jazz.register-usertype" #f 1871 9 1871 31 ("%%cons" "jazz.usertypes" "set!" "type" "test")}
      {Lisp-Entry "jazz.usertype" #f 1875 9 1875 22 ("%%cdr" "%%cdar" "%%caar" "%%null?" "if" "jazz.usertypes" "scan" "iter" "let" "object")}
      {Lisp-Entry "jazz.Interface" #f 1892 27 1892 41 ()}
      {Lisp-Entry "jazz.new-interface" #f 1895 9 1895 27 ("%%get-category-descendants" "%%cons" "%%set-category-descendants" "ascendant" "lambda" "for-each" "compute-interface-ancestors" "%%list->vector" "%%set-category-ancestors" "1" "%%fx+" "set!" "jazz.new-interface-rank" "0" "eq?" "test:" "%%make-table" "jazz.allocate-interface" "interface" "let" "ascendants" "name" "class")
        {Lisp-Entry "compute-interface-ancestors" #f 1896 11 1896 38 ("%%list" "%%get-category-ancestors" "%%vector->list" "ascendant" "lambda" "map" "%%cons" "append" "%%apply" "jazz.remove-duplicates" "ascendants" "interface")}}
      {Lisp-Entry "jazz.interface?" #f 1912 9 1912 24 ("jazz.Interface" "%%class-is?" "object")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Interface") 1927 21 1927 34 ("%%class-of" "interface" "jazz.of-subtype?" "object")}
      {Lisp-Entry "jazz.update-category" ("jazz.Interface") 1931 21 1931 41 ("interface" "jazz.update-interface")}
      {Lisp-Entry "jazz.update-interface" #f 1935 9 1935 30 ("%%get-category-descendants" "descendant" "%%vector-set!" "%%get-method-implementation-tree" "%%get-method-node-implementation" "implementation" "%%get-method-implementation-rank" "implementation-rank" "field" "lambda" "for-each" "%%get-category-virtual-size" "%%vector-ref" "jazz.resize-vector" "implementation-table" "%%get-class-interface-table" "interface-table" "let*" "jazz.Class" "%%class-is?" "category" "iter" "%%get-interface-rank" "interface-rank" "%%not-null?" "%%when" "update-interface-root-methods" "added-methods" "let" "interface")
        {Lisp-Entry "update-interface-root-methods" #f 1936 11 1936 40 ("%%cons" "set!" "%%set-method-category-rank" "%%get-method-category-rank" "%%not" "jazz.virtual-method?" "and" "%%when" "field" "key" "lambda" "%%get-category-fields" "%%iterate-table" "added-methods" "%%get-interface-rank" "interface-rank" "let*" "interface")}}
      {Lisp-Entry "jazz.Field" #f 1973 27 1973 37 ()}
      {Lisp-Entry "jazz.field?" #f 1976 9 1976 20 ("jazz.Field" "%%class-is?" "object")}
      {Lisp-Entry "jazz.field-name" #f 1980 9 1980 24 ("%%get-field-name" "field")}
      {Lisp-Entry "jazz.find-field" #f 1984 9 1984 24 ("jazz.find-field" "and" "%%get-class-ascendant" "ascendant" "let" "%%get-category-field" "or" "field-name" "category")}
      {Lisp-Entry "jazz.require-object-field" #f 1991 9 1991 34 ("%%get-category-name" "jazz.error" "%%not" "if" "jazz.find-field" "field" "%%get-object-class" "class" "let*" "name" "object")}
      {Lisp-Entry "jazz.Slot" #f 2007 27 2007 36 ()}
      {Lisp-Entry "jazz.new-slot" #f 2010 9 2010 22 ("jazz.Slot" "jazz.allocate-slot" "slot-initialize" "slot-offset" "slot-name")}
      {Lisp-Entry "jazz.slot?" #f 2014 9 2014 19 ("jazz.Slot" "%%class-is?" "object")}
      {Lisp-Entry "jazz.add-slot" #f 2018 9 2018 22 ("1" "%%fx+" "%%set-class-instance-size" "%%when" "%%list" "%%get-class-slots" "%%append" "%%set-class-slots" "jazz.add-field" "jazz.new-slot" "slot" "and" "slot-offset" "%%get-class-instance-size" "instance-size" "let*" "%%get-category-field" "or" "slot-allocate?" "slot-initialize" "slot-name" "class")}
      {Lisp-Entry "jazz.remove-own-slots" #f 2031 9 2031 30 ("%%length" "%%get-class-instance-size" "%%fx-" "%%set-class-instance-size" "if" "%%set-class-slots" "%%get-class-slots" "actual" "%%get-class-ascendant" "ascendant" "let" "class")}
      {Lisp-Entry "jazz.slot-value" #f 2038 9 2038 24 ("%%get-slot-offset" "%%get-object-slot" "jazz.require-object-field" "slot" "let" "%%object?" "%%debug-assert" "slot-name" "object")}
      {Lisp-Entry "jazz.set-slot-value" #f 2044 9 2044 28 ("%%get-slot-offset" "%%set-object-slot" "jazz.require-object-field" "slot" "let" "%%object?" "%%debug-assert" "value" "slot-name" "object")}
      {Lisp-Entry "jazz.find-slot-offset" #f 2050 9 2050 30 ("%%get-slot-offset" "jazz.require-object-field" "slot" "let" "slot-name" "object")}
      {Lisp-Entry "jazz.initialize-slots" #f 2055 9 2055 30 ("%%set-object-slot" "%%when" "%%get-slot-initialize" "initialize" "%%get-slot-offset" "offset" "let" "slot" "lambda" "for-each" "%%get-class-slots" "slots" "%%get-object-class" "class" "let*" "object")}
      {Lisp-Entry "jazz.Property" #f 2074 27 2074 40 ()}
      {Lisp-Entry "jazz.new-property" #f 2077 9 2077 26 ("jazz.Property" "jazz.allocate-property" "slot-setter" "slot-getter" "slot-initialize" "slot-offset" "slot-name")}
      {Lisp-Entry "jazz.property?" #f 2081 9 2081 23 ("jazz.Property" "%%class-is?" "object")}
      {Lisp-Entry "jazz.property-getter" #f 2085 9 2085 29 ("%%get-property-getter" "property")}
      {Lisp-Entry "jazz.property-setter" #f 2089 9 2089 29 ("%%get-property-setter" "property")}
      {Lisp-Entry "jazz.all-properties" #f 2093 9 2093 28 ("else" "%%cdr" "%%cons" "%%car" "jazz.property?" "%%null?" "cond" "%%get-class-slots" "slots" "iter" "let" "category")}
      {Lisp-Entry "jazz.add-property" #f 2100 9 2100 26 ("1" "%%fx+" "%%set-class-instance-size" "%%when" "%%list" "%%get-class-slots" "%%append" "%%set-class-slots" "jazz.add-field" "jazz.new-property" "slot" "and" "slot-offset" "%%get-class-instance-size" "instance-size" "let*" "%%get-category-field" "or" "slot-setter" "slot-getter" "slot-allocate?" "slot-initialize" "slot-name" "class")}
      {Lisp-Entry "jazz.Method" #f 2121 27 2121 38 ()}
      {Lisp-Entry "jazz.method?" #f 2124 9 2124 21 ("jazz.Method" "%%class-is?" "object")}
      {Lisp-Entry "jazz.final-method?" #f 2128 9 2128 27 ("final" "'final" "%%get-method-dispatch-type" "%%eq?" "jazz.Method" "%%class-is?" "and" "field")}
      {Lisp-Entry "jazz.virtual-method?" #f 2133 9 2133 29 ("final" "'final" "%%get-method-dispatch-type" "%%neq?" "jazz.Method" "%%class-is?" "and" "field")}
      {Lisp-Entry "jazz.locate-method-owner" #f 2138 9 2138 33 ("%%get-interface-ascendants" "jazz.Interface" "%%get-class-interfaces" "jazz.find-in" "%%get-class-ascendant" "or" "jazz.Class" "%%class-is?" "%%get-category-field" "%%not" "cond" "iter" "let" "method-name" "category")}
      {Lisp-Entry "jazz.new-final-method" #f 2159 9 2159 30 ("final" "'final" "jazz.Method" "jazz.allocate-method" "implementation" "name")}
      {Lisp-Entry "jazz.add-final-method" #f 2163 9 2163 30 ("jazz.error" "else" "update-final-method" "%%eq?" "create-final-method" "%%not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "class")
        {Lisp-Entry "create-final-method" #f 2164 11 2164 30 ("jazz.add-field" "jazz.new-final-method" "method" "let" "method-implementation" "method-name" "class")}
        {Lisp-Entry "update-final-method" #f 2169 11 2169 30 ("jazz.error" "%%set-method-implementation" "jazz.final-method?" "if" "%%get-category-field" "field" "let" "method-implementation" "method-name" "class")}}
      {Lisp-Entry "jazz.new-virtual-method" #f 2190 9 2190 32 ("jazz.Method" "jazz.allocate-method" "implementation-rank" "category-rank" "implementation-tree" "dispatch-type" "name")}
      {Lisp-Entry "jazz.add-virtual-method" #f 2194 9 2194 32 ("jazz.error" "else" "update-virtual-method" "%%eq?" "create-virtual-method" "%%not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "category")
        {Lisp-Entry "create-virtual-method" #f 2195 11 2195 32 ("jazz.update-category" "jazz.add-field" "1" "%%fx+" "%%set-category-virtual-size" "%%set-method-implementation-rank" "%%get-category-virtual-size" "virtual-size" "jazz.new-virtual-method" "method" "jazz.new-method-node" "node" "interface" "'interface" "class" "'class" "jazz.Class" "%%class-is?" "if" "dispatch-type" "let*" "method-implementation" "method-name" "category")}
        {Lisp-Entry "update-virtual-method" #f 2206 11 2206 32 ("%%get-method-implementation-rank" "jazz.update-category" "jazz.error" "%%get-method-node-children" "%%set-method-node-next-implementation" "child" "lambda" "for-each" "%%set-method-node-implementation" "%%get-method-implementation-tree" "node" "jazz.virtual-method?" "if" "%%get-category-field" "field" "let" "method-implementation" "method-name" "category")}}
      {Lisp-Entry "jazz.add-method-node" #f 2232 9 2232 29 ("error" "jazz.final-method?" "%%vector-set!" "%%vector-ref" "method-table" "%%get-class-interface-table" "interface" "%%get-class-class-table" "%%get-method-dispatch-type" "case" "dispatch-table" "let*" "lambda" "update-method-tree" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "category-rank" "create/update-method-node" "end-nodes" "start-node" "receive" "%%get-method-implementation-tree" "root-node" "jazz.virtual-method?" "%%get-category-field" "field" "else" "%%eq?" "jazz.error" "%%not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "class")
        {Lisp-Entry "create/update-method-node" #f 2233 11 2233 36 ("create-method-node" "update-method-node" "%%get-method-node-category" "%%eq?" "if" "locate-most-specific-method-node" "node" "let" "method-implementation" "class" "root-node")}
        {Lisp-Entry "locate-most-specific-method-node" #f 2239 11 2239 43 ("%%cdr" "%%subtype?" "child-category" "%%car" "child" "let*" "%%null?" "%%get-method-node-children" "children" "sub-iter" "%%get-method-node-category" "%%eq?" "if" "iter" "let" "category" "node")}
        {Lisp-Entry "create-method-node" #f 2252 11 2252 29 ("values" "%%cons" "%%set-method-node-children" "%%set-method-node-next-implementation" "%%set-method-node-next-node" "for-each" "jazz.new-method-node" "new-node" "old-children" "%%assq" "or" "%%cdr" "new-children" "assv" "%%subtype?" "%%get-method-node-category" "child-class" "let" "child" "lambda" "%%get-method-node-children" "jazz.partition" "partition" "let*" "method-implementation" "class" "node")}
        {Lisp-Entry "update-method-node" #f 2268 11 2268 29 ("values" "%%get-method-node-children" "%%set-method-node-next-implementation" "child" "lambda" "for-each" "%%set-method-node-implementation" "method-implementation" "class" "node")}
        {Lisp-Entry "update-method-tree" #f 2275 11 2275 29 ("%%get-category-descendants" "descendant" "for-each" "%%memq" "%%not" "%%when" "category" "iter" "%%get-method-node-category" "node" "lambda" "map" "end-categories" "let" "end-nodes" "start-node" "proc")}}
      {Lisp-Entry "jazz.Method-Node" #f 2317 27 2317 43 ()}
      {Lisp-Entry "jazz.new-method-node" #f 2320 9 2320 29 ("jazz.Method-Node" "jazz.allocate-method-node" "%%get-method-node-implementation" "if" "next-implementation" "let" "children" "next-node" "implementation" "category")}
      {Lisp-Entry "jazz.call-into-incoherent" #f 2325 9 2325 34 ("jazz.error" "rest")}
      {Lisp-Entry "jazz.call-into-abstract" #f 2329 9 2329 32 ("jazz.error" "method" "class")}
      {Lisp-Entry "jazz.Queue" #f 2341 27 2341 37 ()}
      {Lisp-Entry "jazz.new-queue" #f 2344 9 2344 23 ("jazz.Queue" "jazz.allocate-queue")}
      {Lisp-Entry "jazz.enqueue" #f 2348 9 2348 21 ("%%set-cdr!" "pair" "jazz.queue-copy-last-list" "%%get-queue-last-list" "%%not-null?" "%%when" "else" "%%set-queue-list" "%%cons" "%%set-queue-current" "%%null?" "cond" "%%get-queue-current" "current" "let" "object" "queue")}
      {Lisp-Entry "jazz.enqueue-list" #f 2361 9 2361 26 ("%%set-cdr!" "%%set-queue-last-anchor" "jazz.queue-copy-last-list" "%%get-queue-last-list" "else" "%%set-queue-list" "%%set-queue-last-list" "%%set-queue-current" "%%get-queue-current" "%%null?" "cond" "%%not-null?" "%%when" "lst" "queue")}
      {Lisp-Entry "jazz.queue-copy-last-list" #f 2375 9 2375 34 ("%%set-queue-last-anchor" "%%set-queue-last-list" "%%set-cdr!" "else" "%%get-queue-list" "jazz.last-tail" "%%set-queue-current" "%%get-queue-last-list" "jazz.list-copy" "%%set-queue-list" "%%null?" "cond" "%%get-queue-last-anchor" "last-anchor" "let" "queue")}
      {Lisp-Entry "jazz.queue-list" #f 2387 9 2387 24 ("%%get-queue-list" "queue")}
      {Lisp-Entry "jazz.reset-queue" #f 2391 9 2391 25 ("%%set-queue-current" "%%set-queue-last-anchor" "%%set-queue-last-list" "%%set-queue-list" "queue")}}})
"serial"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "serial.scm"} 1248276859
    {Lisp-Entry "core.base.runtime.serial" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.object->serial" #f 42 13 42 32 ("object->serial-number" "obj")}
      {Lisp-Entry "jazz.serial->object" #f 45 13 45 32 ("serial-number->object" "number")}
      {Lisp-Entry "jazz.object->serial-symbol" #f 49 13 49 39 ("jazz.object->serial" "%%number->string" "%%string-append" "%%string->symbol" "obj")}
      {Lisp-Entry "jazz.serial-number" #f 56 11 56 29 ("1")}
      {Lisp-Entry "jazz.serialized-objects" #f 59 11 59 34 ("equal?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.object->serial" #f 62 12 62 31 ("%%table-set!" "1" "%%fx+" "set!" "jazz.serial-number" "number" "let" "jazz.serialized-objects" "%%table-ref" "or" "obj")}
      {Lisp-Entry "jazz.serial->object" #f 69 12 69 31 ("%%car" "jazz.error" "%%null?" "continuation-return" "%%fx=" "if" "value" "key" "jazz.serialized-objects" "%%iterate-table" "return" "lambda" "continuation-capture" "rest" "number")}}})
"specific"
 ({Lisp-File-Entry {File core "src" "core" "generic" "syntax" "specific.scm"} 1249056426
    {Lisp-Entry "core.generic.syntax.specific" #f 45 18 45 46 ("jazz.Specific" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Specific" #f 48 19 48 32 ("%%set-specific-descendant-specifics" "%%get-specific-descendant-specifics" "descendant-specifics" "%%set-specific-ancestor-specifics" "%%get-specific-ancestor-specifics" "ancestor-specifics" "%%set-specific-implementation" "%%get-specific-implementation" "implementation" "%%set-specific-dynamic-signature" "%%get-specific-dynamic-signature" "dynamic-signature" "jazz.allocate-specific" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Specific" #f 55 27 55 40 ()}
      {Lisp-Entry "jazz.define-specific" #f 58 20 58 40 ("jazz.expand-define-specific" "%%apply" "rest")}}}
  {Lisp-File-Entry {File core "src" "core" "generic" "runtime" "specific.scm"} 1238328024
    {Lisp-Entry "core.generic.runtime.specific" #f 38 18 38 47 ()
      {Lisp-Entry "jazz.new-specific" #f 41 9 41 26 ("jazz.Specific" "jazz.allocate-specific" "implementation" "signature-proc")}}})
"string"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "string.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.string" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.memstring" #f 40 9 40 23 ("1" "%%fx+" "else" "%%string-ref" "%%eqv?" "%%fx=" "cond" "0" "n" "iter" "%%string-length" "len" "let" "string" "char")}}})
"symbol"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "symbol.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.symbol" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.identifier-module" #f 45 9 45 31 ("0" "%%substring" "%%string->symbol" "%%not" "if" "jazz.string-find-reversed" "pos" "%%symbol->string" "str" "let*" "%%symbol?" "%%assert" "identifier")}
      {Lisp-Entry "jazz.identifier-name" #f 54 9 54 29 ("%%string-length" "1" "%%fx+" "%%substring" "%%string->symbol" "%%not" "if" "jazz.string-find-reversed" "pos" "%%symbol->string" "str" "let*" "%%symbol?" "%%assert" "identifier")}
      {Lisp-Entry "jazz.specifier?" #f 68 9 68 24 ("1" "%%fx-" "0" "%%string-ref" "%%eqv?" "2" "%%fx>" "%%string-length" "len" "%%symbol->string" "str" "let" "%%symbol?" "and" "expr")}
      {Lisp-Entry "jazz.specifier->name" #f 77 9 77 29 ("%%symbol->string" "%%string->symbol" "%%string-length" "%%fx-" "1" "%%substring" "string" "lambda" "extract" "let" "specifier")}
      {Lisp-Entry "jazz.name->specifier" #f 84 9 84 29 ("%%symbol->string" "%%string-append" "%%string->symbol" "name")}
      {Lisp-Entry "jazz.binding-specifier" #f 88 9 88 31 ("%%car" "jazz.specifier?" "%%pair?" "and" "jazz.source-code" "%%cdr" "cdr-binding" "let" "binding")}
      {Lisp-Entry "jazz.enumerator?" #f 100 9 100 25 ("0" "%%symbol->string" "%%string-ref" "%%eqv?" "%%symbol?" "and" "obj")}
      {Lisp-Entry "jazz.enumerator->symbol" #f 105 9 105 32 ("%%string-length" "1" "%%substring" "%%string->symbol" "%%symbol->string" "name" "let" "obj")}}})
"syntax"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "syntax.scm"} 1251388729
    {Lisp-Entry "core.base.runtime.syntax" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.source?" #f 40 9 40 21 ("%%source?" "obj")}
      {Lisp-Entry "jazz.source-code" #f 44 9 44 25 ("%%source-code" "%%source?" "if" "expr")}
      {Lisp-Entry "jazz.source-locat" #f 50 9 50 26 ("%%source-locat" "src")}
      {Lisp-Entry "jazz.desourcify" #f 54 9 54 24 ("%%desourcify" "expr")}
      {Lisp-Entry "jazz.desourcify-all" #f 58 9 58 28 ("desourcify-all" "expr")
        {Lisp-Entry "desourcify-source" #f 60 11 60 28 ("%%source-code" "desourcify-all" "src")}
        {Lisp-Entry "desourcify-list" #f 63 11 63 26 ("else" "%%null?" "%%cdr" "desourcify-list" "%%car" "desourcify-all" "%%cons" "%%pair?" "cond" "lst")}
        {Lisp-Entry "desourcify-vector" #f 72 11 72 28 ("%%vector-ref" "desourcify-all" "%%vector-set!" "begin" "%%fx<" "if" "1" "%%fx-" "i" "loop" "let" "0" "%%make-vector" "x" "%%vector-length" "len" "let*" "vect")}
        {Lisp-Entry "desourcify-box" #f 82 11 82 25 ("%%unbox" "desourcify-all" "%%box" "box")}
        {Lisp-Entry "desourcify-all" #f 85 11 85 25 ("else" "desourcify-box" "%%box?" "desourcify-vector" "%%vector?" "desourcify-list" "%%pair?" "desourcify-source" "%%source?" "cond" "expr")}}
      {Lisp-Entry "jazz.sourcify" #f 100 9 100 22 ("%%sourcify" "src" "expr")}
      {Lisp-Entry "jazz.sourcify-if" #f 104 9 104 25 ("jazz.sourcify" "jazz.source?" "if" "src" "expr")}
      {Lisp-Entry "jazz.locat-container" #f 110 9 110 29 ("%%locat-container" "locat")}
      {Lisp-Entry "jazz.locat-position" #f 114 9 114 28 ("%%locat-position" "locat")}
      {Lisp-Entry "jazz.locat->file/line/col" #f 118 9 118 34 ("%%list" "%%filepos-col" "col" "%%filepos-line" "line" "%%locat-position" "%%position->filepos" "filepos" "%%locat-container" "%%container->path" "file" "let" "if" "locat")}
      {Lisp-Entry "jazz.container->path" #f 130 9 130 29 ("%%container->path" "container")}
      {Lisp-Entry "jazz.position->filepos" #f 134 9 134 31 ("%%position->filepos" "position")}
      {Lisp-Entry "jazz.filepos-line" #f 138 9 138 26 ("%%filepos-line" "filepos")}
      {Lisp-Entry "jazz.filepos-col" #f 142 9 142 25 ("%%filepos-col" "filepos")}
      {Lisp-Entry "jazz.present-source" #f 151 9 151 28 ("else" "present-vector" "%%vector?" "present-list" "%%pair?" "present-src" "%%source?" "cond" "obj")
        {Lisp-Entry "present-src" #f 153 11 153 22 ("%%filepos-col" "1" "%%filepos-line" "%%fx+" "jazz.present-source" "source" "'source" "%%vector" "%%source-locat" "%%locat-position" "pos" "jazz.source-code" "code" "let" "src")}
        {Lisp-Entry "present-list" #f 161 11 161 23 ("else" "%%null?" "%%cdr" "present-list" "%%car" "jazz.present-source" "%%cons" "%%pair?" "cond" "lst")}
        {Lisp-Entry "present-vector" #f 170 11 170 25 ("%%vector-ref" "jazz.present-source" "%%vector-set!" "begin" "%%fx<" "if" "1" "%%fx-" "i" "loop" "let" "0" "%%make-vector" "x" "%%vector-length" "len" "let*" "vect")}}}})
"unspecified"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "unspecified.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.unspecified" #f 37 18 37 47 ()
      {Lisp-Entry "jazz.unspecified" #f 40 9 40 25 ("%%unspecified")}
      {Lisp-Entry "jazz.unspecified?" #f 44 9 44 26 ("%%unspecified?" "expr")}
      {Lisp-Entry "jazz.specified?" #f 48 9 48 24 ("%%unspecified?" "%%not" "expr")}}})
"vector"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "vector.scm"} 1248276859
    {Lisp-Entry "core.base.runtime.vector" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.vector-for-each" #f 40 9 40 29 ("1" "%%fx+" "%%vector-ref" "begin" "%%fx<" "if" "0" "n" "iter" "%%vector-length" "len" "let" "vector" "proc")}
      {Lisp-Entry "jazz.vector-memq?" #f 49 9 49 26 ("1" "%%fx+" "%%vector-ref" "%%eq?" "%%fx<" "if" "0" "n" "iter" "%%vector-length" "len" "let" "vector" "obj")}
      {Lisp-Entry "jazz.resize-vector" #f 59 9 59 27 ("%%vector-ref" "%%vector-set!" "0" "%%fx>=" "%%when" "1" "%%vector-length" "min" "%%fx-" "offset" "iter" "%%make-vector" "new-vector" "let" "size" "vector")}}})
"walker"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "walker.scm"} 1251729948
    {Lisp-Entry "core.library.syntax.walker" #f 59 18 59 44 ("jazz.new-core-dialect" "core" "'core" "jazz.register-dialect" "jazz.Core-Walker" "jazz.Core-Dialect" "jazz.Walker" "jazz.Time-Special" "jazz.Parameterize" "jazz.C-Function" "jazz.C-Initialize" "jazz.C-Named-Declare-Declaration" "jazz.C-Declare" "jazz.C-Include" "jazz.Declare" "jazz.Or" "jazz.And" "jazz.Case" "jazz.Cond" "jazz.If" "jazz.dialect.kernel.not-null?" "'jazz.dialect.kernel.not-null?" "jazz.not-type-tests" "jazz.dialect.kernel.unspecified?" "'jazz.dialect.kernel.unspecified?" "jazz.dialect.kernel.values?" "'jazz.dialect.kernel.values?" "jazz.dialect.kernel.foreign?" "'jazz.dialect.kernel.foreign?" "jazz.dialect.kernel.thread?" "'jazz.dialect.kernel.thread?" "jazz.dialect.kernel.table?" "'jazz.dialect.kernel.table?" "jazz.Method" "jazz.dialect.kernel.method?" "'jazz.dialect.kernel.method?" "jazz.Slot" "jazz.dialect.kernel.slot?" "'jazz.dialect.kernel.slot?" "jazz.Field" "jazz.dialect.kernel.field?" "'jazz.dialect.kernel.field?" "jazz.Interface" "jazz.dialect.kernel.interface?" "'jazz.dialect.kernel.interface?" "jazz.Class" "jazz.dialect.kernel.class?" "'jazz.dialect.kernel.class?" "jazz.Category" "jazz.dialect.kernel.category?" "'jazz.dialect.kernel.category?" "jazz.dialect.kernel.object?" "'jazz.dialect.kernel.object?" "jazz.dialect.kernel.keyword?" "'jazz.dialect.kernel.keyword?" "jazz.dialect.kernel.flonum?" "'jazz.dialect.kernel.flonum?" "jazz.dialect.kernel.fixnum?" "'jazz.dialect.kernel.fixnum?" "scheme.dialect.kernel.eof-object?" "'scheme.dialect.kernel.eof-object?" "scheme.dialect.kernel.output-port?" "'scheme.dialect.kernel.output-port?" "scheme.dialect.kernel.input-port?" "'scheme.dialect.kernel.input-port?" "scheme.dialect.kernel.procedure?" "'scheme.dialect.kernel.procedure?" "jazz.dialect.kernel.continuation?" "'jazz.dialect.kernel.continuation?" "jazz.dialect.kernel.f64vector?" "'jazz.dialect.kernel.f64vector?" "jazz.dialect.kernel.f32vector?" "'jazz.dialect.kernel.f32vector?" "jazz.dialect.kernel.u64vector?" "'jazz.dialect.kernel.u64vector?" "jazz.dialect.kernel.s64vector?" "'jazz.dialect.kernel.s64vector?" "jazz.dialect.kernel.u32vector?" "'jazz.dialect.kernel.u32vector?" "jazz.dialect.kernel.s32vector?" "'jazz.dialect.kernel.s32vector?" "jazz.dialect.kernel.u16vector?" "'jazz.dialect.kernel.u16vector?" "jazz.dialect.kernel.s16vector?" "'jazz.dialect.kernel.s16vector?" "jazz.dialect.kernel.u8vector?" "'jazz.dialect.kernel.u8vector?" "jazz.dialect.kernel.s8vector?" "'jazz.dialect.kernel.s8vector?" "scheme.dialect.kernel.vector?" "'scheme.dialect.kernel.vector?" "scheme.dialect.kernel.string?" "'scheme.dialect.kernel.string?" "scheme.dialect.kernel.char?" "'scheme.dialect.kernel.char?" "scheme.dialect.kernel.symbol?" "'scheme.dialect.kernel.symbol?" "scheme.dialect.kernel.pair?" "'scheme.dialect.kernel.pair?" "scheme.dialect.kernel.null?" "'scheme.dialect.kernel.null?" "scheme.dialect.kernel.list?" "'scheme.dialect.kernel.list?" "scheme.dialect.kernel.boolean?" "'scheme.dialect.kernel.boolean?" "scheme.dialect.kernel.integer?" "'scheme.dialect.kernel.integer?" "scheme.dialect.kernel.rational?" "'scheme.dialect.kernel.rational?" "scheme.dialect.kernel.real?" "'scheme.dialect.kernel.real?" "scheme.dialect.kernel.complex?" "'scheme.dialect.kernel.complex?" "scheme.dialect.kernel.number?" "'scheme.dialect.kernel.number?" "jazz.type-tests" "##string-set!" "##vector-set!" "jazz.dialect.language.functional.set-element!" "'jazz.dialect.language.functional.set-element!" "##string-ref" "##vector-ref" "list-ref" "jazz.dialect.language.functional.element" "'jazz.dialect.language.functional.element" "##string-length" "##vector-length" "##length" "scheme.dialect.kernel.length" "'scheme.dialect.kernel.length" "##cdr" "scheme.dialect.kernel.cdr" "'scheme.dialect.kernel.cdr" "##car" "scheme.dialect.kernel.car" "'scheme.dialect.kernel.car" "##eqv?" "scheme.dialect.kernel.eqv?" "'scheme.dialect.kernel.eqv?" "##eq?" "scheme.dialect.kernel.eq?" "'scheme.dialect.kernel.eq?" "##not" "scheme.dialect.kernel.not" "'scheme.dialect.kernel.not" "##flonum->fixnum" "jazz.dialect.kernel.flonum->fixnum" "'jazz.dialect.kernel.flonum->fixnum" "##fixnum->flonum" "jazz.dialect.kernel.fixnum->flonum" "'jazz.dialect.kernel.fixnum->flonum" "jazz.dialect.kernel.fl/" "'jazz.dialect.kernel.fl/" "jazz.dialect.kernel.fl*" "'jazz.dialect.kernel.fl*" "jazz.dialect.kernel.fl-" "'jazz.dialect.kernel.fl-" "jazz.dialect.kernel.fl+" "'jazz.dialect.kernel.fl+" "jazz.dialect.kernel.fx*" "'jazz.dialect.kernel.fx*" "jazz.dialect.kernel.fx-" "'jazz.dialect.kernel.fx-" "jazz.dialect.kernel.fx+" "'jazz.dialect.kernel.fx+" "##flround" "scheme.dialect.kernel.round" "'scheme.dialect.kernel.round" "##fltruncate" "scheme.dialect.kernel.truncate" "'scheme.dialect.kernel.truncate" "##flceiling" "scheme.dialect.kernel.ceiling" "'scheme.dialect.kernel.ceiling" "##flfloor" "scheme.dialect.kernel.floor" "'scheme.dialect.kernel.floor" "##fxquotient" "scheme.dialect.kernel.quotient" "'scheme.dialect.kernel.quotient" "##/" "##fl/" "scheme.dialect.kernel./" "'scheme.dialect.kernel./" "##*" "##fl*" "##fx*" "scheme.dialect.kernel.*" "'scheme.dialect.kernel.*" "##-" "##fl-" "##fx-" "scheme.dialect.kernel.-" "'scheme.dialect.kernel.-" "##+" "##fl+" "##fx+" "scheme.dialect.kernel.+" "'scheme.dialect.kernel.+" "##fl>=" "##fx>=" "scheme.dialect.kernel.>=" "'scheme.dialect.kernel.>=" "##fl>" "##fx>" "scheme.dialect.kernel.>" "'scheme.dialect.kernel.>" "##fl<=" "##fx<=" "scheme.dialect.kernel.<=" "'scheme.dialect.kernel.<=" "##fl<" "##fx<" "scheme.dialect.kernel.<" "'scheme.dialect.kernel.<" "##=" "##fl=" "##fx=" "scheme.dialect.kernel.=" "'scheme.dialect.kernel.=" "jazz.add-primitive-patterns" "declaration" "arguments" "operator" "jazz.emit-primitive-new-call" "environment" "arguments-codes" "locator" "jazz.emit-specialized-locator" "jazz.Call" "jazz.Do" "jazz.Begin" "jazz.Internal-Define" "jazz.Body" "jazz.Receive" "jazz.Letrec" "jazz.Letstar" "jazz.Named-Let" "jazz.Let" "jazz.Lambda" "jazz.Assignment" "jazz.Method-Reference" "jazz.Reference" "jazz.Quasiquote" "jazz.Delay" "jazz.Constant" "jazz.Proclaim" "jazz.Expression" "jazz.Code" "jazz.Annotated-Frame" "jazz.Restricted-Binding" "jazz.Annotated-Variable" "jazz.Syntax-Form" "jazz.Macro-Form" "jazz.Special-Form" "jazz.Form-Binding" "jazz.Macro-Symbol" "jazz.Local-Variable-Binding" "jazz.Dynamic-Self-Binding" "jazz.Self-Binding" "jazz.Rest-Parameter" "jazz.Named-Parameter" "jazz.Optional-Parameter" "jazz.Dynamic-Parameter" "jazz.Parameter" "jazz.NextMethod-Variable" "jazz.Variable" "jazz.Symbol-Binding" "jazz.Signature" "jazz.Walk-Frame" "jazz.Unresolved-Error" "jazz.Walk-Error" "jazz.Walk-Warning" "jazz.Walk-Problems" "jazz.Walk-Problem" "jazz.Walk-Location" "jazz.Walk-Context" "jazz.C-Definition-Declaration" "jazz.C-Type-Declaration" "jazz.Syntax-Declaration" "jazz.Macro-Declaration" "Unspecified" "'Unspecified" "EOF" "'EOF" "Values" "'Values" "Foreign" "'Foreign" "Promise" "'Promise" "Thread" "'Thread" "Table" "'Table" "F64Vector" "'F64Vector" "F32Vector" "'F32Vector" "U64Vector" "'U64Vector" "S64Vector" "'S64Vector" "U32Vector" "'U32Vector" "S32Vector" "'S32Vector" "U16Vector" "'U16Vector" "S16Vector" "'S16Vector" "U8Vector" "'U8Vector" "S8Vector" "'S8Vector" "Vector" "'Vector" "Keyword" "'Keyword" "Symbol" "'Symbol" "String" "'String" "Procedure" "'Procedure" "Continuation" "'Continuation" "Port" "'Port" "Pair" "'Pair" "Null" "'Null" "List" "'List" "Flonum" "'Flonum" "Fixnum" "'Fixnum" "Integer" "'Integer" "Rational" "'Rational" "Real" "'Real" "Complex" "'Complex" "Number" "'Number" "Char" "'Char" "Boolean" "'Boolean" "Object" "'Object" "jazz.primitive-declarations" "void" "'void" "jazz.Unspecified" "unspecified" "'unspecified" "jazz.EOF" "eof" "'eof" "jazz.Values" "values" "'values" "jazz.Foreign" "foreign" "'foreign" "jazz.Promise" "promise" "'promise" "jazz.Thread" "thread" "'thread" "jazz.Table" "table" "'table" "jazz.F64Vector" "f64vector" "'f64vector" "jazz.F32Vector" "f32vector" "'f32vector" "jazz.U64Vector" "u64vector" "'u64vector" "jazz.S64Vector" "s64vector" "'s64vector" "jazz.U32Vector" "u32vector" "'u32vector" "jazz.S32Vector" "s32vector" "'s32vector" "jazz.U16Vector" "u16vector" "'u16vector" "jazz.S16Vector" "s16vector" "'s16vector" "jazz.U8Vector" "u8vector" "'u8vector" "jazz.S8Vector" "s8vector" "'s8vector" "jazz.Vector" "vector" "'vector" "jazz.Keyword" "keyword" "'keyword" "jazz.Symbol" "symbol" "'symbol" "jazz.String" "string" "'string" "jazz.Procedure" "procedure" "'procedure" "jazz.Continuation" "continuation" "'continuation" "jazz.Port" "port" "'port" "jazz.Pair" "pair" "'pair" "jazz.Null" "null" "'null" "jazz.List" "list" "'list" "jazz.Flonum" "fl" "'fl" "jazz.Fixnum" "fx" "'fx" "jazz.Integer" "int" "'int" "jazz.Rational" "rational" "'rational" "jazz.Real" "real" "'real" "jazz.Complex" "complex" "'complex" "jazz.Number" "number" "'number" "jazz.Char" "char" "'char" "jazz.Boolean" "bool" "'bool" "jazz.Object" "object" "'object" "any" "'any" "jazz.primitive-types" "%%table-set!" "jazz.Any" "jazz.Any-Class" "type" "lambda" "jazz.object-declaration?" "set!" "jazz.Nillable-Type" "jazz.Template-Type" "jazz.Union-Type" "jazz.Complement-Type" "jazz.Restriction-Type" "jazz.Values-Type" "jazz.Category-Type" "jazz.Function-Type" "jazz.Rest-Type" "jazz.Key-Type" "jazz.Opt-Type" "jazz.Void" "jazz.Void-Class" "jazz.Literal" "jazz.Autoload-Declaration" "jazz.Export-Syntax-Declaration" "jazz.Export-Declaration" "jazz.Import-Invoice" "jazz.Export-Invoice" "jazz.Library-Invoice" "jazz.Library-Declaration" "jazz.Namespace-Declaration" "jazz.Module-Declaration" "jazz.Autoload-Reference" "jazz.Export-Reference" "jazz.Library-Reference" "jazz.Declaration-Reference" "jazz.Declaration" "jazz.Lexical-Binding" "jazz.Walk-Binding" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.analysis-mode?" #f 68 8 68 27 ("make-parameter")}
      {Lisp-Entry "jazz.autoload-references" #f 72 8 72 32 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.private-access" #f 82 8 82 27 ("0")}
      {Lisp-Entry "jazz.public-access" #f 86 8 86 26 ("1")}
      {Lisp-Entry "jazz.protected-access" #f 90 8 90 29 ("2")}
      {Lisp-Entry "jazz.make-access-lookups" #f 94 9 94 33 ("eq?" "test:" "%%make-table" "%%vector-set!" "begin" "%%fx<=" "if" "0" "n" "iter" "1" "%%fx+" "%%make-vector" "lookups" "let" "access-level")}
      {Lisp-Entry "jazz.Walk-Binding" #f 109 27 109 44 ()}
      {Lisp-Entry "jazz.emit-type" ("jazz.Walk-Binding") 112 21 112 35 ("type" "jazz.emit-binding-reference" "jazz.sourcified-form" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Binding") 116 30 116 54 ("source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Walk-Binding") 117 30 117 58 ()}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Walk-Binding") 118 30 118 57 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Walk-Binding") 119 30 119 61 ("arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Walk-Binding") 120 30 120 52 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Walk-Binding") 121 30 121 60 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Walk-Binding") 122 30 122 67 ("source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Walk-Binding") 123 30 123 59 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Walk-Binding") 124 30 124 58 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Walk-Binding") 125 30 125 57 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" ("jazz.Walk-Binding") 126 30 126 57 ("form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Walk-Binding") 127 30 127 59 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Walk-Binding") 128 30 128 59 ("form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Binding") 131 21 131 45 ("source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Walk-Binding") 135 21 135 49 ("jazz.unspecified")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Walk-Binding") 139 21 139 48 ("binding" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Walk-Binding") 143 21 143 52 ("jazz.unspecified" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Walk-Binding") 147 21 147 43 ("jazz.call-return-type" "jazz.codes-forms" "jazz.emit-binding-reference" "jazz.sourcified-form" "jazz.new-code" "binding" "%%get-lexical-binding-type" "type" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Walk-Binding") 156 21 156 51 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Walk-Binding") 160 21 160 58 ("jazz.walk-error" "binding" "jazz.walk-binding-assignable?" "%%not" "%%when" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Walk-Binding") 165 21 165 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Walk-Binding") 169 21 169 49 ("jazz.unspecified" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Walk-Binding") 173 21 173 48 ()}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Walk-Binding") 177 21 177 50 ()}
      {Lisp-Entry "jazz.Lexical-Binding" #f 189 27 189 47 ()}
      {Lisp-Entry "jazz.resolve-binding" ("jazz.Lexical-Binding") 192 30 192 50 ()}
      {Lisp-Entry "jazz.resolve-binding" ("jazz.Lexical-Binding") 195 21 195 41 ("binding")}
      {Lisp-Entry "jazz.print-object" ("jazz.Lexical-Binding") 199 21 199 38 ("jazz.object->serial" "%%get-lexical-binding-name" "binding" "%%get-object-class" "%%get-category-name" "jazz.format" "detail" "output")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Lexical-Binding") 206 21 206 45 ("binding" "%%get-lexical-binding-name" "%%eq?" "if" "source-declaration" "symbol")}
      {Lisp-Entry "jazz.get-lexical-binding-name" #f 212 9 212 38 ("%%get-lexical-binding-name" "binding")}
      {Lisp-Entry "jazz.get-lexical-binding-hits" #f 216 9 216 38 ("%%set-lexical-binding-hits" "eq?" "test:" "%%make-table" "table" "let" "%%get-lexical-binding-hits" "or" "binding")}
      {Lisp-Entry "jazz.Declaration" #f 231 27 231 43 ()}
      {Lisp-Entry "jazz.setup-declaration" #f 234 9 234 31 ("%%get-declaration-toplevel" "%%set-declaration-toplevel" "%%get-declaration-locator" "%%compose-name" "%%not" "if" "%%set-declaration-locator" "%%get-lexical-binding-name" "name" "%%get-declaration-parent" "parent" "let" "new-declaration")}
      {Lisp-Entry "jazz.get-declaration-path" #f 241 9 241 34 ("jazz.reverse!" "%%cons" "%%list" "%%not" "if" "%%get-declaration-parent" "parent" "%%get-lexical-binding-name" "name" "let" "lambda" "proc" "letrec" "declaration")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Declaration") 252 21 252 45 ("jazz.private-access" "binding" "jazz.lookup-declaration" "source-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Declaration") 256 21 256 52 ("declaration" "%%get-declaration-locator" "jazz.walk-error" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Declaration") 260 30 260 53 ("source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Declaration") 263 21 263 44 ("source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.get-declaration-inclusions" ("jazz.Declaration") 267 30 267 61 ()}
      {Lisp-Entry "jazz.get-declaration-inclusions" ("jazz.Declaration") 270 21 270 52 ()}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Declaration") 274 30 274 51 ("environment")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Declaration") 277 21 277 42 ("declaration" "jazz.error" "environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.Declaration") 281 30 281 64 ()}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.Declaration") 284 21 284 55 ()}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Declaration") 288 30 288 51 ("s" "k" "f")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Declaration") 291 21 291 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.declaration-result" #f 295 9 295 32 ("jazz.unspecified" "eval" "'eval" "jazz.walk-for" "%%eq?" "if")}
      {Lisp-Entry "jazz.Declaration-Reference" #f 309 27 309 53 ()}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Declaration-Reference") 312 30 312 52 ("library-declaration")}
      {Lisp-Entry "jazz.Library-Reference" #f 323 27 323 49 ()}
      {Lisp-Entry "jazz.new-library-reference" #f 326 9 326 35 ("jazz.Library-Reference" "jazz.allocate-library-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Library-Reference") 330 21 330 43 ("%%set-declaration-reference-declaration" "%%get-declaration-reference-name" "jazz.outline-library" "declaration" "let" "declaration-reference" "%%get-declaration-reference-declaration" "or" "library-declaration")}
      {Lisp-Entry "jazz.Export-Reference" #f 345 27 345 48 ()}
      {Lisp-Entry "jazz.new-export-reference" #f 348 9 348 34 ("jazz.Export-Reference" "jazz.allocate-export-reference" "library-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Declaration-Reference") 352 21 352 43 ("%%set-declaration-reference-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.new-export-declaration" "declaration" "let" "%%get-declaration-reference-name" "jazz.parse-exported-symbol" "symbol" "name" "receive" "declaration-reference" "%%get-declaration-reference-declaration" "or" "library-declaration")}
      {Lisp-Entry "jazz.parse-exported-symbol" #f 360 9 360 35 ("jazz.identifier-name" "values" "jazz.composite-name?" "if" "name" "library-declaration")}
      {Lisp-Entry "jazz.Autoload-Reference" #f 374 27 374 50 ()}
      {Lisp-Entry "jazz.new-autoload-reference" #f 377 9 377 36 ("jazz.Autoload-Reference" "jazz.allocate-autoload-reference" "library-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-autoload-reference" #f 381 9 381 40 ("%%set-declaration-reference-declaration" "%%assert" "jazz.new-autoload-declaration" "declaration" "jazz.Any" "type" "%%get-declaration-reference-name" "name" "let*" "%%get-declaration-reference-declaration" "or" "exported-library-reference" "library-declaration" "declaration-reference")}
      {Lisp-Entry "jazz.Module-Declaration" #f 399 27 399 50 ()}
      {Lisp-Entry "jazz.new-module-declaration" #f 402 9 402 36 ("jazz.setup-declaration" "uptodate" "'uptodate" "jazz.Module-Declaration" "jazz.allocate-module-declaration" "new-declaration" "let" "requires" "parent" "access" "name")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Module-Declaration") 408 21 408 42 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Namespace-Declaration" #f 420 27 420 53 ()}
      {Lisp-Entry "jazz.find-declaration" #f 423 9 423 30 ("jazz.private-access" "%%get-access-lookup" "%%table-ref" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Namespace-Declaration") 427 21 427 44 ("add-to-hits" "add-to-library-references" "namespace-declaration" "%%get-access-lookup" "%%table-ref" "found" "let" "source-declaration" "access" "symbol")
        {Lisp-Entry "add-to-library-references" #f 428 11 428 36 ("%%get-declaration-locator" "%%table-set!" "%%get-library-declaration-references" "references-table" "library-declaration" "let*" "%%get-declaration-toplevel" "namespace-declaration" "%%neq?" "and" "%%when" "declaration")}
        {Lisp-Entry "add-to-hits" #f 436 11 436 22 ("jazz.autoload-references" "jazz.Autoload-Declaration" "%%is?" "%%get-declaration-locator" "%%table-set!" "jazz.get-lexical-binding-hits" "hits-table" "let" "jazz.analysis-mode?" "source-declaration" "and" "%%when" "declaration")}}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Namespace-Declaration") 449 21 449 42 ("%%get-namespace-declaration-body" "jazz.fold-statements" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.get-private-lookup" #f 456 9 456 32 ("jazz.private-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.get-public-lookup" #f 459 9 459 31 ("jazz.public-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.get-protected-lookup" #f 462 9 462 34 ("jazz.protected-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.Library-Declaration" #f 472 27 472 51 ()}
      {Lisp-Entry "jazz.new-library-declaration" #f 475 9 475 37 ("jazz.setup-declaration" "eq?" "test:" "%%make-table" "jazz.new-queue" "jazz.public-access" "jazz.make-access-lookups" "uptodate" "'uptodate" "jazz.Library-Declaration" "jazz.allocate-library-declaration" "new-declaration" "let" "dialect-invoice" "dialect-name" "walker" "parent" "access" "name")}
      {Lisp-Entry "jazz.add-library-require" #f 481 9 481 33 ("%%list" "%%get-library-declaration-requires" "%%append" "%%set-library-declaration-requires" "jazz.load-module" "syntax" "'syntax" "%%eq?" "%%when" "phase" "feature-requirement" "module-name" "lambda" "jazz.parse-require" "require" "library-declaration")}
      {Lisp-Entry "jazz.add-library-import" #f 489 9 489 32 ("jazz.table-merge-reporting-conflicts!" "jazz.public-access" "imported" "imported-library-declaration" "%%get-library-invoice-only" "only" "jazz.private-access" "%%get-access-lookup" "private" "%%list" "%%append" "%%set-library-declaration-imports" "merge-invoice" "jazz.find-library-invoice" "actual" "%%get-library-declaration-imports" "imports" "if" "%%get-lexical-binding-name" "jazz.load-module" "%%get-library-invoice-library" "let" "syntax" "'syntax" "%%get-library-invoice-phase" "%%eq?" "%%when" "register?" "library-invoice" "library-declaration")
        {Lisp-Entry "merge-invoice" #f 490 11 490 24 ("new" "actual")}}
      {Lisp-Entry "jazz.add-library-export" #f 513 9 513 32 ("jazz.table-merge-reporting-conflicts!" "exported-library-declaration" "else" "jazz.resolve-autoload-reference" "exported-library-reference" "%%table-set!" "%%get-declaration-reference-name" "jazz.identifier-name" "name" "declaration-reference" "lambda" "for-each" "cond" "%%get-export-invoice-autoload" "autoload" "%%get-library-invoice-only" "only" "jazz.public-access" "%%get-access-lookup" "public" "%%list" "%%append" "%%set-library-declaration-exports" "merge-invoice" "if" "jazz.find-library-invoice" "actual" "%%get-library-declaration-exports" "exports" "%%get-lexical-binding-name" "jazz.load-module" "%%get-library-invoice-library" "jazz.resolve-reference" "let" "syntax" "'syntax" "%%get-library-invoice-phase" "%%eq?" "%%when" "library-invoice" "library-declaration")
        {Lisp-Entry "merge-invoice" #f 514 11 514 24 ("%%append" "if" "%%set-export-invoice-autoload" "%%when" "new-autoload" "%%get-export-invoice-autoload" "actual-autoload" "let" "new" "actual")}}
      {Lisp-Entry "jazz.table-merge-reporting-conflicts!" #f 547 9 547 46 ("%%get-lexical-binding-name" "jazz.error" "%%null?" "find-actual-conflicts" "conflicts" "%%fx+" "%%fx=" "%%not" "%%when" "%%table-merge!" "add-count" "%%table-length" "table-count" "let" "add" "table" "suffix" "library-declaration")
        {Lisp-Entry "effective-declaration-locator" #f 548 11 548 40 ("%%get-declaration-locator" "else" "%%get-lexical-binding-name" "%%get-autoload-declaration-exported-library" "%%get-declaration-reference-name" "jazz.compose-name" "jazz.Autoload-Declaration" "%%get-export-declaration-symbol" "jazz.Export-Declaration" "%%is?" "cond" "decl")}
        {Lisp-Entry "find-actual-conflicts" #f 558 11 558 32 ("%%list" "%%cons" "set!" "%%neq?" "%%when" "actual-locator" "effective-declaration-locator" "value-locator" "table" "%%table-ref" "actual" "value" "key" "lambda" "add" "%%iterate-table" "lst" "let")}}
      {Lisp-Entry "jazz.generate-reference-list" #f 583 9 583 37 ("%%cons" "%%cdr" "%%cdar" "car" "cdr" "%%pair?" "and" "map" "declarations" "%%caar" "%%get-declaration-locator" "library-locator" "%%null?" "if" "out" "%%table->list" "in" "iter" "%%table-ref" "compose-name" "merge-sorted" "%%table-set!" "%%get-declaration-toplevel" "library" "jazz.resolve-binding" "resolved-declaration" "declaration" "locator" "lambda" "%%get-library-declaration-references" "%%iterate-table" "eq?" "test:" "%%make-table" "partition" "let" "library-declaration")
        {Lisp-Entry "lesser" #f 584 11 584 17 ("cdr" "lesser" "%%string=?" "and" "%%string<?" "string2" "car" "%%symbol->string" "string1" "let" "%%null?" "or" "if" "name2" "name1")}
        {Lisp-Entry "merge-sorted" #f 593 11 593 23 ("%%cdr" "merge-sorted" "else" "%%cons" "%%car" "lesser" "%%list" "%%null?" "cond" "sorted" "item")}
        {Lisp-Entry "compose-name" #f 601 11 601 23 ("%%get-lexical-binding-name" "%%cons" "%%get-declaration-parent" "%%eq?" "if" "composite-name" "iter" "let" "declaration" "root-declaration")}}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Library-Declaration") 628 21 628 44 ("nextmethod" "declaration" "%%get-library-declaration-imports" "%%set-import-invoice-hit?" "%%table-ref" "jazz.public-access" "%%get-access-lookup" "imported" "%%get-library-invoice-library" "imported-library-declaration" "let" "library-invoice" "lambda" "for-each" "jazz.analysis-mode?" "%%when" "source-declaration" "access" "symbol")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Library-Declaration") 640 21 640 42 (",@body-expansion" ",@registration-expansion" ",@variables-expansion" ",@literals-expansion" ",@autoloads-expansion" ",@inclusions-expansion" "jazz.queue-list" "%%get-library-declaration-imports" "%%get-library-declaration-exports" "%%get-lexical-binding-name" "syntax" "'syntax" "and" "%%get-library-invoice-phase" "jazz.resolve-reference" "library-declaration" ",symbol-name" ",name" "',name" "jazz.register-autoload" "jazz.compose-name" "symbol-name" "jazz.identifier-name" "name" "decl" "%%get-library-invoice-library" "%%get-declaration-reference-name" "cond" "%%get-export-invoice-autoload" "autoload" "%%get-library-invoice-only" "only" "library-invoice" "%%get-library-declaration-requires" ",module-name" "',module-name" "phase" "feature-requirement" "module-name" "jazz.parse-require" "spec" "lambda" "for-each" ",dialect-name" "',dialect-name" "core" "'core" "%%neq?" "%%when" "%%get-library-declaration-dialect-name" "dialect-name" "core.library" "'core.library" "jazz.load-module" "jazz.enqueue" "jazz.new-queue" "queue" "library" "'library" "jazz.declares" "else" "eval" "jazz.walk-for" "case" "begin" "jazz.emit-library-registration" "registration-expansion" "jazz.emit-library-autoloads" "autoloads-expansion" "jazz.emit-library-variables" "variables-expansion" "jazz.emit-library-literals" "literals-expansion" "jazz.emit-library-inclusions" "inclusions-expansion" "declaration" "%%get-namespace-declaration-body" "jazz.emit-namespace-statements" "body-expansion" "let" "environment")}
      {Lisp-Entry "jazz.get-library-proclaim" #f 697 9 697 34 ("%%get-library-declaration-proclaims" "%%table-ref" "default" "proclaim-name" "library-declaration")}
      {Lisp-Entry "jazz.set-library-proclaim" #f 701 9 701 34 ("%%get-library-declaration-proclaims" "%%table-set!" "value" "proclaim-name" "library-declaration")}
      {Lisp-Entry "jazz.all-warnings" #f 705 8 705 25 ()}
      {Lisp-Entry "jazz.proclaim" #f 709 9 709 22 ("jazz.remove!" "else" "%%cons" "jazz.set-library-proclaim" "'warn" "jazz.get-library-proclaim" "library-warnings" "jazz.error" "%%memq" "%%not" "cond" "warning" "lambda" "for-each" "jazz.all-warnings" "%%null?" "if" "warnings" "let" "warn" "case" "parse-clause" "parameters" "kind" "not?" "receive" "clause" "library-declaration")
        {Lisp-Entry "parse-not" #f 710 11 710 20 ("values" "%%cdr" "parameters" "%%car" "kind" "let" "%%pair?" "%%assert" "clause" "not?")}
        {Lisp-Entry "parse-clause" #f 716 11 716 23 ("%%cdr" "parse-not" "not" "'not" "%%car" "%%eq?" "if" "%%pair?" "%%assert" "clause")}}
      {Lisp-Entry "jazz.get-library-warn?" #f 742 9 742 31 ("warn" "'warn" "jazz.get-library-proclaim" "%%memq" "warning-name" "library-declaration")}
      {Lisp-Entry "jazz.Library-Invoice" #f 754 27 754 47 ()}
      {Lisp-Entry "jazz.find-library-invoice" #f 760 9 760 34 ("%%eq?" "and" "invoice" "lambda" "jazz.find-if" "%%get-library-invoice-phase" "target-phase" "%%get-library-invoice-name" "target-name" "let" "target" "invoices")}
      {Lisp-Entry "jazz.Export-Invoice" #f 774 27 774 46 ()}
      {Lisp-Entry "jazz.new-export-invoice" #f 777 9 777 32 ("jazz.Export-Invoice" "jazz.allocate-export-invoice" "autoload" "only" "version" "phase" "library" "name")}
      {Lisp-Entry "jazz.Import-Invoice" #f 789 27 789 46 ()}
      {Lisp-Entry "jazz.new-import-invoice" #f 792 9 792 32 ("jazz.Import-Invoice" "jazz.allocate-import-invoice" "only" "version" "phase" "library" "name")}
      {Lisp-Entry "jazz.Export-Declaration" #f 804 27 804 50 ()}
      {Lisp-Entry "jazz.new-export-declaration" #f 807 9 807 36 ("jazz.setup-declaration" "jazz.Export-Declaration" "jazz.allocate-export-declaration" "new-declaration" "let" "symbol" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Export-Declaration") 813 21 813 52 ("jazz.unspecified" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Export-Declaration") 817 21 817 42 ("environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Export-Declaration") 821 21 821 48 ("jazz.Any" "declaration" "%%get-export-declaration-symbol" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Export-Declaration") 828 21 828 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Export-Syntax-Declaration" #f 840 27 840 57 ()}
      {Lisp-Entry "jazz.new-export-syntax-declaration" #f 843 9 843 43 ("jazz.setup-declaration" "jazz.Export-Syntax-Declaration" "jazz.allocate-export-syntax-declaration" "new-declaration" "let" "symbol" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Export-Syntax-Declaration") 849 21 849 52 ("jazz.unspecified" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Export-Syntax-Declaration") 853 21 853 42 ("environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Export-Syntax-Declaration") 857 21 857 48 ("jazz.Any" "declaration" "%%get-export-syntax-declaration-symbol" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Export-Syntax-Declaration") 864 21 864 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Autoload-Declaration" #f 876 27 876 52 ()}
      {Lisp-Entry "jazz.new-autoload-declaration" #f 879 9 879 38 ("jazz.setup-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.Autoload-Declaration" "jazz.allocate-autoload-declaration" "new-declaration" "let" "exported-library" "library-declaration" "parent" "type" "name")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Autoload-Declaration") 885 21 885 37 ("declaration" "jazz.resolve-binding" "jazz.of-subtype?" "subtype")}
      {Lisp-Entry "jazz.resolve-binding" ("jazz.Autoload-Declaration") 890 21 890 41 ("%%set-autoload-declaration-declaration" "%%get-declaration-locator" "jazz.error" "%%assertion" "jazz.public-access" "jazz.lookup-declaration" "decl" "%%get-lexical-binding-name" "name" "%%get-autoload-declaration-library" "%%get-autoload-declaration-exported-library" "jazz.resolve-reference" "exported-library" "let*" "declaration" "%%get-autoload-declaration-declaration" "or")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Autoload-Declaration") 900 21 900 52 ("declaration" "jazz.resolve-binding" "jazz.walk-binding-validate-call" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Autoload-Declaration") 904 21 904 48 ("jazz.autoload-locator" "jazz.new-code" "declaration" "jazz.resolve-binding" "referenced-declaration" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.autoload-locator" #f 912 9 912 30 ("%%get-declaration-locator" "%%symbol->string" "%%string-append" "%%string->symbol" "referenced-declaration")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Autoload-Declaration") 917 21 917 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Literal" #f 929 27 929 39 ()}
      {Lisp-Entry "jazz.new-literal" #f 932 9 932 25 ("jazz.Literal" "jazz.allocate-literal" "arguments" "name")}
      {Lisp-Entry "jazz.Void-Class" #f 944 27 944 42 ()}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Void-Class") 947 21 947 37 ("subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Void-Class") 951 21 951 40 ("'void")}
      {Lisp-Entry "jazz.Void" #f 958 27 958 36 ()}
      {Lisp-Entry "jazz.Opt-Type" #f 969 27 969 40 ()}
      {Lisp-Entry "jazz.new-opt-type" #f 972 9 972 26 ("jazz.Opt-Type" "jazz.allocate-opt-type" "type")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Opt-Type") 976 21 976 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-opt-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.Key-Type" #f 989 27 989 40 ()}
      {Lisp-Entry "jazz.new-key-type" #f 992 9 992 26 ("jazz.Key-Type" "jazz.allocate-key-type" "type" "key")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Key-Type") 996 21 996 40 ("%%symbol->string" "%%keyword->string" "%%string-append" "%%string->symbol" "%%get-key-type-type" "jazz.emit-specifier" "type-specifier" "type" "%%get-key-type-key" "key" "let")}
      {Lisp-Entry "jazz.Rest-Type" #f 1010 27 1010 41 ()}
      {Lisp-Entry "jazz.new-rest-type" #f 1013 9 1013 27 ("jazz.Rest-Type" "jazz.allocate-rest-type" "type")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Rest-Type") 1017 21 1017 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-rest-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.Function-Type" #f 1033 27 1033 45 ()}
      {Lisp-Entry "jazz.new-function-type" #f 1036 9 1036 31 ("jazz.Function-Type" "jazz.allocate-function-type" "%%length" "mandatory" "let" "result" "rest" "named" "optional" "positional")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Function-Type") 1041 21 1041 37 ("jazz.Function-Type" "%%get-object-class" "%%eq?" "jazz.Procedure" "jazz.of-subtype?" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Function-Type") 1046 21 1046 40 ("get-output-string" "%%string->symbol" "%%get-function-type-result" "%%not" "%%when" "%%get-function-type-rest" "rest" "%%get-function-type-positional" "jazz.emit-specifier" "display" "write-char" "set!" "if" "type" "lambda" "for-each" "first?" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Function-Type") 1065 21 1065 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Category-Type" #f 1081 27 1081 45 ()}
      {Lisp-Entry "jazz.new-category-type" #f 1084 9 1084 31 ("jazz.Category-Type" "jazz.allocate-category-type" "declaration")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Category-Type") 1089 21 1089 37 ("subtype")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Category-Type") 1093 21 1093 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Category-Type") 1097 21 1097 40 ("get-output-string" "%%string->symbol" "type" "%%get-category-type-declaration" "jazz.emit-specifier" "write-char" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Values-Type" #f 1114 27 1114 43 ()}
      {Lisp-Entry "jazz.new-values-type" #f 1117 9 1117 29 ("jazz.Values-Type" "jazz.allocate-values-type" "types")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Values-Type") 1121 21 1121 40 ("get-output-string" "%%string->symbol" "%%get-values-type-types" "jazz.emit-specifier" "set!" "if" "type" "lambda" "for-each" "first?" "write-char" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Restriction-Type" #f 1144 27 1144 48 ()}
      {Lisp-Entry "jazz.new-restriction-type" #f 1147 9 1147 34 ("jazz.Restriction-Type" "jazz.allocate-restriction-type" "type" "base")}
      {Lisp-Entry "jazz.Complement-Type" #f 1159 27 1159 47 ()}
      {Lisp-Entry "jazz.new-complement-type" #f 1162 9 1162 33 ("jazz.Complement-Type" "jazz.allocate-complement-type" "type")}
      {Lisp-Entry "jazz.Union-Type" #f 1174 27 1174 42 ()}
      {Lisp-Entry "jazz.new-union-type" #f 1177 9 1177 28 ("jazz.Union-Type" "jazz.allocate-union-type" "types")}
      {Lisp-Entry "jazz.Template-Type" #f 1192 27 1192 45 ()}
      {Lisp-Entry "jazz.new-template-type" #f 1195 9 1195 31 ("jazz.Template-Type" "jazz.allocate-template-type" "types" "class")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Template-Type") 1199 21 1199 40 ("get-output-string" "%%string->symbol" "%%get-template-type-types" "set!" "if" "lambda" "for-each" "first?" "write-char" "type" "%%get-template-type-class" "jazz.emit-specifier" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Nillable-Type" #f 1222 27 1222 45 ()}
      {Lisp-Entry "jazz.new-nillable-type" #f 1225 9 1225 31 ("jazz.Nillable-Type" "jazz.allocate-nillable-type" "type")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Nillable-Type") 1229 21 1229 37 ("type" "%%get-nillable-type-type" "jazz.Boolean" "jazz.of-subtype?" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Nillable-Type") 1234 21 1234 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-nillable-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Nillable-Type") 1239 21 1239 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.object-declaration?" #f 1252 8 1252 32 ()}
      {Lisp-Entry "jazz.Any-Class" #f 1264 27 1264 41 ()}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Any-Class") 1267 21 1267 37 ("subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Any-Class") 1271 21 1271 40 ("'any")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Any-Class") 1275 21 1275 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Any" #f 1282 27 1282 35 ()}
      {Lisp-Entry "jazz.emit-type-cast" #f 1299 13 1299 32 ("%%fixnum->flonum" "%%fixnum?" ",value" "jazz.Flonum" "%%eq?" "jazz.generate-symbol" "value" "let" "jazz.sourcified-form" "%%get-code-type" "%%subtype?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-type-cast" #f 1311 12 1311 31 ("jazz.emit-check" "begin" "%%fixnum->flonum" "%%fixnum?" ",value" "jazz.Flonum" "%%eq?" "jazz.generate-symbol" "value" "let" "jazz.sourcified-form" "%%get-code-type" "%%subtype?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-parameter-cast" #f 1330 13 1330 37 ("%%fixnum->flonum" "set!" ",parameter" "%%fixnum?" "jazz.Flonum" "jazz.sourcified-form" "parameter" "let" "jazz.object-declaration?" "%%object-class?" "jazz.Any" "%%eq?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-parameter-cast" #f 1340 12 1340 36 ("jazz.emit-check" "%%fixnum->flonum" "set!" ",parameter" "%%fixnum?" "jazz.Flonum" "jazz.sourcified-form" "parameter" "let" "jazz.object-declaration?" "%%object-class?" "jazz.Any" "%%eq?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.parse-specifier" #f 1370 9 1370 29 ("%%cdr" "%%car" "jazz.source-code" "jazz.specifier?" "%%pair?" "and" "if" "proc" "lst")}
      {Lisp-Entry "jazz.walk-specifier" #f 1376 9 1376 28 ("%%cons" "%%list" "atomic?" "jazz.new-function-type" "rest" "named" "optional" "positional" "lambda" "jazz.butlast" "jazz.Rest-Type" "%%class-is?" "jazz.last" "last" "%%null?" "proc" "types" "split-parameters" "result" "parameters" "new-function-type" "jazz.new-template-type" "jazz.new-values-type" "values" "'values" "jazz.new-category-type" "category" "'category" "jazz.new-key-type" "%%string->keyword" "key" "'key" "jazz.new-opt-type" "type" "opt" "'opt" "%%eq?" "jazz.new-rest-type" "jazz.new-nillable-type" "case" "parse-atomic" "write-char" "get-output-string" "%%string->symbol" "%%eof-object?" "open-output-string" "output" "parse-name" "else" "cond" "next" "parse" "jazz.enqueue" "jazz.queue-list" "begin" "iter" "jazz.new-queue" "queue" "terminator" "separator" "parse-until" "jazz.lookup-reference" "jazz.lookup-primitive-type" "or" "name" "lookup-type" "%%eqv?" "consume" "1" "%%fx+" "set!" "read-char" "c" "readc" "peek-char" "peekc" "jazz.walk-error" "jazz.error" "%%not" "if" "%%substring" "jazz.format" "error-message" "message" "ill-formed" "define" "0" "at" "open-input-string" "input" "%%symbol->string" "string" "let" "specifier" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.specifier->type" #f 1516 9 1516 29 ("jazz.walk-specifier" "if" "specifier" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.type->specifier" #f 1522 9 1522 29 ("jazz.name->specifier" "jazz.specifier?" "if" "jazz.emit-specifier" "symbol" "let" "type")}
      {Lisp-Entry "jazz.primitive-types" #f 1534 8 1534 28 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.lookup-primitive-type" #f 1579 9 1579 35 ("jazz.primitive-types" "%%table-ref" "name")}
      {Lisp-Entry "jazz.primitive-declarations" #f 1583 8 1583 35 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.patch-type-until-unification" #f 1627 9 1627 42 ("jazz.public-access" "jazz.lookup-declaration" "jazz.get-catalog-entry" "library-declaration" "jazz.dialect.language.functional" "'jazz.dialect.language.functional" "jazz.dialect.language.object" "'jazz.dialect.language.object" "Object" "'Object" "%%eq?" "library-name" "if" "jazz.primitive-declarations" "%%table-ref" "name" "let" "type")}
      {Lisp-Entry "jazz.Macro-Declaration" #f 1643 27 1643 49 ()}
      {Lisp-Entry "jazz.new-macro-declaration" #f 1646 9 1646 35 ("jazz.setup-declaration" "jazz.Macro-Declaration" "jazz.allocate-macro-declaration" "new-declaration" "let" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Macro-Declaration") 1652 21 1652 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Macro-Declaration") 1656 21 1656 50 ("%%cdr" "%%apply" "jazz.need-macro" "expander" "jazz.load-module" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Macro-Declaration") 1667 21 1667 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "jazz.define-macro" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-macro-declaration-body" "body" "%%get-macro-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Macro-Declaration") 1680 21 1680 42 ("%%get-macro-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Syntax-Declaration" #f 1694 27 1694 50 ()}
      {Lisp-Entry "jazz.new-syntax-declaration" #f 1697 9 1697 36 ("jazz.setup-declaration" "jazz.Syntax-Declaration" "jazz.allocate-syntax-declaration" "new-declaration" "let" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Syntax-Declaration") 1703 21 1703 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Syntax-Declaration") 1707 21 1707 50 ("jazz.need-macro" "expander" "jazz.load-module" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Syntax-Declaration") 1717 21 1717 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "jazz.define-macro" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-syntax-declaration-body" "body" "%%get-syntax-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Syntax-Declaration") 1730 21 1730 42 ("%%get-syntax-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Type-Declaration" #f 1744 27 1744 50 ()}
      {Lisp-Entry "jazz.new-c-type-declaration" #f 1747 9 1747 36 ("jazz.setup-declaration" "jazz.C-Type-Declaration" "jazz.allocate-c-type-declaration" "new-declaration" "let" "declare" "scheme-to-c" "c-to-scheme" "inclusions" "base-type" "expansion" "kind" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.get-declaration-inclusions" ("jazz.C-Type-Declaration") 1753 21 1753 52 ("declaration" "%%get-c-type-declaration-inclusions")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.C-Type-Declaration") 1757 21 1757 42 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.C-Type-Declaration") 1761 21 1761 55 ("%%list" "and" "if" ",expansion" ",locator" "c-define-type" "%%get-c-type-declaration-scheme-to-c" "scheme-to-c" "%%get-c-type-declaration-c-to-scheme" "c-to-scheme" "%%get-c-type-declaration-expansion" "expansion" "declaration" "%%get-declaration-locator" "locator" "let")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.C-Type-Declaration") 1771 21 1771 42 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Definition-Declaration" #f 1783 27 1783 56 ()}
      {Lisp-Entry "jazz.new-c-definition-declaration" #f 1786 9 1786 42 ("jazz.setup-declaration" "jazz.C-Definition-Declaration" "jazz.allocate-c-definition-declaration" "new-declaration" "let" "scope" "c-name" "result-type" "parameter-types" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.C-Definition-Declaration") 1792 21 1792 52 ("jazz.validate-arguments" "if" "declaration" "%%get-c-definition-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.C-Definition-Declaration") 1798 21 1798 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" ",scope" ",c-name" ",result-type" ",parameter-types" "jazz.emit-signature" "c-define" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-c-definition-declaration-body" "body" "%%get-c-definition-declaration-scope" "scope" "%%get-c-definition-declaration-c-name" "c-name" "%%get-c-definition-declaration-result-type" "result-type" "%%get-c-definition-declaration-parameter-types" "parameter-types" "%%get-c-definition-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.C-Definition-Declaration") 1815 21 1815 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.C-Definition-Declaration") 1822 21 1822 42 ("%%get-c-definition-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Walk-Context" #f 1836 27 1836 44 ()}
      {Lisp-Entry "jazz.new-walk-context" #f 1839 9 1839 30 ("jazz.Walk-Context" "jazz.allocate-walk-context" "pathname" "locator" "policy")}
      {Lisp-Entry "jazz.walk-context" #f 1843 8 1843 25 ("make-parameter")}
      {Lisp-Entry "jazz.get-walk-context" #f 1847 9 1847 30 ("jazz.walk-context")}
      {Lisp-Entry "jazz.need-walk-context" #f 1851 9 1851 31 ("jazz.error" "jazz.walk-context" "or")}
      {Lisp-Entry "jazz.get-walk-policy" #f 1856 9 1856 29 ("%%get-walk-context-policy" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.get-walk-locator" #f 1863 9 1863 30 ("%%get-walk-context-locator" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.get-walk-pathname" #f 1870 9 1870 31 ("%%get-walk-context-pathname" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.Walk-Location" #f 1885 27 1885 45 ()}
      {Lisp-Entry "jazz.new-walk-location" #f 1888 9 1888 31 ("jazz.Walk-Location" "jazz.allocate-walk-location" "locat" "declaration-locator" "module-locator")}
      {Lisp-Entry "jazz.walk-location" #f 1892 9 1892 27 ("%%get-declaration-locator" "jazz.get-walk-locator" "jazz.new-walk-location" "locat" "declaration" "walker")}
      {Lisp-Entry "jazz.Walk-Problem" #f 1907 27 1907 44 ()}
      {Lisp-Entry "jazz.Walk-Problems" #f 1918 27 1918 45 ()}
      {Lisp-Entry "jazz.new-walk-problems" #f 1921 9 1921 31 ("jazz.Walk-Problems" "jazz.allocate-walk-problems" "errors" "warnings" "message")}
      {Lisp-Entry "jazz.get-detail" ("jazz.Walk-Problems") 1925 21 1925 36 ("jazz.partition-walk-problems-module" "jazz.partition-walk-problems-declaration" "jazz.queue-list" "declaration-details" "1" "%%fx+" "%%substring" "jazz.enqueue" "add-details" "%%fx=" "declaration-locator" "for-each" "jazz.new-queue" "module-details" "or" "%%symbol->string" "%%string-length" "-1" "%%not" "if" "prefix" "module-locator" "jazz.bind" "partition" "lambda" "map" "%%get-walk-problems-errors" "problems" "%%get-walk-problems-warnings" "%%append" "all" "let" "jazz.new-exception-detail")
        {Lisp-Entry "add-details" #f 1926 11 1926 22 ("%%get-walk-problem-location" "jazz.present-exception" "jazz.new-exception-detail" "jazz.enqueue" "problem" "lambda" "for-each" "queue" "problems")}}
      {Lisp-Entry "jazz.Walk-Warning" #f 1961 27 1961 44 ()}
      {Lisp-Entry "jazz.new-walk-warning" #f 1964 9 1964 30 ("jazz.Walk-Warning" "jazz.allocate-walk-warning" "message" "location")}
      {Lisp-Entry "jazz.Walk-Error" #f 1976 27 1976 42 ()}
      {Lisp-Entry "jazz.new-walk-error" #f 1979 9 1979 28 ("jazz.Walk-Error" "jazz.allocate-walk-error" "message" "location")}
      {Lisp-Entry "jazz.Unresolved-Error" #f 1991 27 1991 48 ()}
      {Lisp-Entry "jazz.new-unresolved-error" #f 1994 9 1994 34 ("jazz.Unresolved-Error" "jazz.allocate-unresolved-error" "symbol" "location")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Unresolved-Error") 1998 21 1998 43 ("error" "%%get-unresolved-error-symbol" "jazz.format")}
      {Lisp-Entry "jazz.Walk-Frame" #f 2011 27 2011 42 ()}
      {Lisp-Entry "jazz.new-walk-frame" #f 2014 9 2014 28 ("jazz.Walk-Frame" "jazz.allocate-walk-frame" "%%table-set!" "%%get-lexical-binding-name" "name" "binding" "lambda" "for-each" "eq?" "test:" "%%make-table" "table" "let" "bindings")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Frame") 2023 21 2023 45 ("binding" "%%get-walk-frame-bindings" "%%table-ref" "source-declaration" "symbol")}
      {Lisp-Entry "jazz.Signature" #f 2035 27 2035 41 ()}
      {Lisp-Entry "jazz.new-signature" #f 2038 9 2038 27 ("jazz.Signature" "jazz.allocate-signature" "%%length" "mandatory" "let" "rest" "named" "optional" "positional")}
      {Lisp-Entry "jazz.only-positional?" #f 2043 9 2043 30 ("%%get-signature-rest" "%%not" "%%get-signature-named" "%%get-signature-optional" "%%null?" "and" "signature")}
      {Lisp-Entry "jazz.Symbol-Binding" #f 2057 27 2057 46 ()}
      {Lisp-Entry "jazz.Variable" #f 2068 27 2068 40 ()}
      {Lisp-Entry "jazz.new-variable" #f 2071 9 2071 26 ("0" "jazz.Variable" "jazz.allocate-variable" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.variable-name-valid?" #f 2076 9 2076 34 ("jazz.specifier?" "%%not" "%%symbol?" "and" "name")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Variable") 2081 21 2081 49 ("1" "%%get-variable-reference-count" "%%fx+" "binding" "%%set-variable-reference-count")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Variable") 2085 21 2085 48 ("jazz.find-annotated-type" "binding" "%%get-lexical-binding-name" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Variable") 2092 21 2092 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Variable") 2096 21 2096 49 ("jazz.Any" "jazz.sourcified-form" "%%get-lexical-binding-name" "set!" "jazz.new-code" "%%get-code-type" "jazz.extend-annotated-type" "jazz.Annotated-Variable" "%%class-is?" "%%when" "binding" "jazz.find-annotated" "annotated-type" "annotated-variable" "annotated-frame" "receive" "jazz.emit-expression" "value-code" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.NextMethod-Variable" #f 2115 27 2115 51 ()}
      {Lisp-Entry "jazz.new-nextmethod-variable" #f 2118 9 2118 37 ("0" "jazz.NextMethod-Variable" "jazz.allocate-nextmethod-variable" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.NextMethod-Variable") 2123 21 2123 48 ("jazz.Any" "jazz.sourcified-form" ",name" "apply" "rest" "lambda" "if" "jazz.new-code" "jazz.*self*" "self" "binding" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.NextMethod-Variable") 2134 21 2134 43 ("jazz.call-return-type" "jazz.codes-forms" "jazz.sourcified-form" "jazz.new-code" "if" "jazz.*self*" "self" "%%get-lexical-binding-type" "type" "binding" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.Parameter" #f 2160 27 2160 41 ()}
      {Lisp-Entry "jazz.new-parameter" #f 2163 9 2163 27 ("0" "jazz.Parameter" "jazz.allocate-parameter" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Parameter") 2168 30 2168 49 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Parameter") 2171 21 2171 40 ("parameter" "%%get-lexical-binding-name" "environment" "declaration")}
      {Lisp-Entry "jazz.Dynamic-Parameter" #f 2183 27 2183 49 ()}
      {Lisp-Entry "jazz.new-dynamic-parameter" #f 2186 9 2186 35 ("0" "jazz.Dynamic-Parameter" "jazz.allocate-dynamic-parameter" "class" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Dynamic-Parameter") 2190 21 2190 40 ("%%get-lexical-binding-name" "jazz.emit-expression" "jazz.sourcified-form" "%%list" "parameter" "%%get-dynamic-parameter-class" "class" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Optional-Parameter" #f 2203 27 2203 50 ()}
      {Lisp-Entry "jazz.new-optional-parameter" #f 2206 9 2206 36 ("0" "jazz.Optional-Parameter" "jazz.allocate-optional-parameter" "default" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Optional-Parameter") 2210 21 2210 40 ("jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "%%list" "parameter" "%%get-optional-parameter-default" "default" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Named-Parameter" #f 2223 27 2223 47 ()}
      {Lisp-Entry "jazz.new-named-parameter" #f 2226 9 2226 33 ("0" "jazz.Named-Parameter" "jazz.allocate-named-parameter" "default" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Named-Parameter") 2230 21 2230 40 ("jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "%%list" "parameter" "%%get-named-parameter-default" "default" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Rest-Parameter" #f 2243 27 2243 46 ()}
      {Lisp-Entry "jazz.new-rest-parameter" #f 2246 9 2246 32 ("0" "jazz.Rest-Parameter" "jazz.allocate-rest-parameter" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Rest-Parameter") 2250 21 2250 40 ("parameter" "%%get-lexical-binding-name" "environment" "declaration")}
      {Lisp-Entry "jazz.Self-Binding" #f 2265 27 2265 44 ()}
      {Lisp-Entry "jazz.new-self-binding" #f 2268 9 2268 30 ("self" "'self" "jazz.Self-Binding" "jazz.allocate-self-binding" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Self-Binding") 2272 21 2272 48 ("%%get-declaration-parent" "self" "'self" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Dynamic-Self-Binding" #f 2287 27 2287 52 ()}
      {Lisp-Entry "jazz.new-dynamic-self-binding" #f 2290 9 2290 38 ("self" "'self" "jazz.Dynamic-Self-Binding" "jazz.allocate-dynamic-self-binding" "code" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Dynamic-Self-Binding") 2294 21 2294 48 ("%%get-declaration-parent" "declaration" "%%get-dynamic-self-binding-code" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.*self*" #f 2309 8 2309 19 ("make-parameter")}
      {Lisp-Entry "jazz.Local-Variable-Binding" #f 2318 27 2318 54 ()}
      {Lisp-Entry "jazz.new-local-variable-binding" #f 2321 9 2321 40 ("jazz.Local-Variable-Binding" "jazz.allocate-local-variable-binding" "variable" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Local-Variable-Binding") 2325 21 2325 48 ("jazz.Any" "declaration" "%%get-local-variable-binding-variable" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Macro-Symbol" #f 2340 27 2340 44 ()}
      {Lisp-Entry "jazz.new-macro-symbol" #f 2343 9 2343 30 ("jazz.Macro-Symbol" "jazz.allocate-macro-symbol" "setter" "getter" "name")}
      {Lisp-Entry "jazz.Form-Binding" #f 2372 27 2372 44 ()}
      {Lisp-Entry "jazz.special-forms" #f 2383 8 2383 26 ()}
      {Lisp-Entry "jazz.add-special-form" #f 2387 9 2387 30 ("%%cons" "jazz.special-forms" "set!" "special-form" "symbol")}
      {Lisp-Entry "jazz.find-special-form" #f 2391 9 2391 31 ("symbol")}
      {Lisp-Entry "jazz.Special-Form" #f 2398 27 2398 44 ()}
      {Lisp-Entry "jazz.new-special-form" #f 2401 9 2401 30 ("jazz.Special-Form" "jazz.allocate-special-form" "walk" "name")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Special-Form") 2405 21 2405 48 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" ("jazz.Special-Form") 2409 21 2409 48 ("jazz.find-special-form" "%%symbol?" "if" "walk" "binding" "%%get-special-form-walk" "walk-proc/symbol" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Macro-Form" #f 2426 27 2426 42 ()}
      {Lisp-Entry "jazz.new-macro-form" #f 2429 9 2429 28 ("jazz.Macro-Form" "jazz.allocate-macro-form" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Macro-Form") 2433 21 2433 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Macro-Form") 2437 21 2437 50 ("%%cdr" "apply" "binding" "%%get-macro-form-expander" "expander" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Syntax-Form" #f 2451 27 2451 43 ()}
      {Lisp-Entry "jazz.new-syntax-form" #f 2454 9 2454 29 ("jazz.Syntax-Form" "jazz.allocate-syntax-form" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Syntax-Form") 2458 21 2458 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Syntax-Form") 2462 21 2462 50 ("binding" "%%get-syntax-form-expander" "expander" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Annotated-Variable" #f 2475 27 2475 50 ()}
      {Lisp-Entry "jazz.new-annotated-variable" #f 2478 9 2478 36 ("jazz.Annotated-Variable" "jazz.allocate-annotated-variable" "type" "declared-type" "variable")}
      {Lisp-Entry "jazz.Restricted-Binding" #f 2490 27 2490 50 ()}
      {Lisp-Entry "jazz.new-restricted-binding" #f 2493 9 2493 36 ("jazz.Restricted-Binding" "jazz.allocate-restricted-binding" "type" "binding")}
      {Lisp-Entry "jazz.Annotated-Frame" #f 2505 27 2505 47 ()}
      {Lisp-Entry "jazz.new-annotated-frame" #f 2508 9 2508 33 ("jazz.Annotated-Frame" "jazz.allocate-annotated-frame" "reset" "variables")}
      {Lisp-Entry "jazz.inspect-annotated-variable" #f 2516 9 2516 40 ("%%get-annotated-variable-type" "%%get-annotated-variable-variable" ":variable" "%%get-restricted-binding-type" "%%get-restricted-binding-binding" "%%get-lexical-binding-name" ":restricted" "jazz.Restricted-Binding" "%%class-is?" "if" "jazz.object->serial-symbol" "serial" "let" "variable")}
      {Lisp-Entry "jazz.inspect-annotated-frame" #f 2527 9 2527 37 ("frame")}
      {Lisp-Entry "jazz.inspect-annotated-environment" #f 2532 9 2532 43 ("environment")}
      {Lisp-Entry "jazz.Code" #f 2542 27 2542 36 ()}
      {Lisp-Entry "jazz.new-code" #f 2545 9 2545 22 ("jazz.Code" "jazz.allocate-code" "source" "type" "form")}
      {Lisp-Entry "jazz.codes-forms" #f 2552 9 2552 25 ("jazz.sourcified-form" "code" "lambda" "map" "codes")}
      {Lisp-Entry "jazz.codes-types" #f 2558 9 2558 25 ("%%get-code-type" "code" "lambda" "map" "codes")}
      {Lisp-Entry "jazz.sourcify-code" #f 2565 9 2565 27 ("%%get-code-type" "%%get-code-form" "jazz.new-code" "%%source?" "%%not" "or" "if" "src" "code")}
      {Lisp-Entry "jazz.sourcified-form" #f 2574 9 2574 29 ("jazz.sourcify-if" "%%get-code-source" "src" "%%get-code-form" "form" "let" "code")}
      {Lisp-Entry "jazz.annotate-signature" #f 2585 9 2585 32 ("jazz.queue-list" "%%when" "for-each" "jazz.new-annotated-variable" "jazz.enqueue" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "parameter" "annotate" "define" "jazz.new-queue" "queue" "%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "let" "signature")}
      {Lisp-Entry "jazz.annotate-inlined-signature" #f 2604 9 2604 40 ("jazz.queue-list" "jazz.new-annotated-variable" "jazz.enqueue" "%%get-code-type" "or" "type" "%%get-lexical-binding-type" "declared-type" "argument" "parameter" "lambda" "for-each" "jazz.new-queue" "queue" "%%get-signature-positional" "positional" "let" "arguments" "signature")}
      {Lisp-Entry "jazz.annotate-bindings" #f 2616 9 2616 31 ("jazz.new-annotated-variable" "jazz.Void" "or" "type" "%%get-lexical-binding-type" "declared-type" "%%cdr" "value" "%%car" "variable" "let" "binding" "lambda" "map" "bindings")}
      {Lisp-Entry "jazz.annotate-receive" #f 2626 9 2626 30 ("jazz.new-annotated-variable" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "let" "parameter" "lambda" "map" "parameters")}
      {Lisp-Entry "jazz.annotate-internal-defines" #f 2634 9 2634 39 ("jazz.new-annotated-variable" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "%%get-internal-define-variable" "variable" "let" "internal-define" "lambda" "map" "internal-defines")}
      {Lisp-Entry "jazz.with-annotated-frame" #f 2643 9 2643 34 ("jazz.new-annotated-frame" "set!" "k" "lambda" "continuation-capture" "reset" "let" "proc" "variables")}
      {Lisp-Entry "jazz.find-annotated" #f 2651 9 2651 28 ("%%get-annotated-variable-type" "%%get-annotated-variable-variable" "%%cdr" "set!" "%%not" "begin" "%%get-restricted-binding-type" "values" "%%eq?" "jazz.Declaration" "and" "%%get-restricted-binding-binding" "binding" "jazz.Restricted-Binding" "%%class-is?" "annotated-variable" "%%get-annotated-frame-variables" "variables" "iter-variables" "or" "%%car" "annotated-frame" "%%null?" "if" "frames" "iter-frames" "type" "let" "environment" "variable")}
      {Lisp-Entry "jazz.find-annotated-type" #f 2677 9 2677 33 ("%%get-lexical-binding-type" "info" "let" "jazz.find-annotated" "type" "variable" "frame" "receive" "jazz.Variable" "%%class-is?" "if" "environment" "binding")}
      {Lisp-Entry "jazz.extend-annotated-type" #f 2690 9 2690 35 ("continuation-return" "%%get-annotated-frame-reset" "reset" "jazz.Any" "extended-type" "%%subtype?" "%%not" "%%when" "%%set-annotated-variable-type" "jazz.Void" "%%eq?" "if" "%%get-annotated-variable-type" "actual-type" "%%get-annotated-variable-declared-type" "declared-type" "let" "new-type" "variable" "frame")}
      {Lisp-Entry "jazz.extend-type" #f 2713 9 2713 25 ("else" "%%subtype?" "jazz.Void" "%%eq?" "jazz.Any" "%%not" "or" "cond" "type2" "type1")}
      {Lisp-Entry "jazz.extend-types" #f 2727 9 2727 26 ("%%cdr" "jazz.extend-types" "%%car" "jazz.extend-type" "jazz.Void" "%%null?" "if" "types")}
      {Lisp-Entry "jazz.type-union" #f 2733 9 2733 24 ("jazz.new-union-type" "types")}
      {Lisp-Entry "jazz.type-difference" #f 2737 9 2737 29 ("type2" "type1")}
      {Lisp-Entry "jazz.Walker" #f 2746 27 2746 38 ()}
      {Lisp-Entry "jazz.walk-warning" #f 2754 9 2754 26 ("jazz.new-walk-warning" "jazz.walker-warning" "jazz.format" "apply" "message" "jazz.walk-location" "location" "let" "rest" "fmt-string" "declaration" "walker")}
      {Lisp-Entry "jazz.walk-error" #f 2760 9 2760 24 ("jazz.new-walk-error" "jazz.walker-error" "jazz.format" "apply" "message" "jazz.walk-location" "location" "let" "rest" "fmt-string" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-unresolved" #f 2766 9 2766 29 ("jazz.source-code" "jazz.new-unresolved-error" "jazz.walker-error" "%%source-locat" "%%source?" "if" "jazz.walk-location" "location" "let" "symbol-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walker-warning" #f 2771 9 2771 28 ("%%list" "%%get-walker-warnings" "%%append" "%%set-walker-warnings" "jazz.warnings?" "if" "warning" "walker")}
      {Lisp-Entry "jazz.walker-error" #f 2776 9 2776 26 ("jazz.validate-walk-problems" "jazz.unspecified" "continuation-return" "jazz.delay-reporting?" "and" "if" "%%list" "%%get-walker-errors" "%%append" "%%set-walker-errors" "error" "resume" "walker")}
      {Lisp-Entry "jazz.validate-walk-problems" #f 2783 9 2783 36 ("jazz.new-walk-problems" "raise" "get-output-string" "message" "jazz.partition-walk-problems-module" "jazz.partition-walk-problems-declaration" "jazz.present-exception" "problem" "1" "%%fx+" "%%substring" "%%fx=" "toplevel?" "declaration-locator" "%%symbol->string" "%%string-length" "-1" "%%not" "if" "prefix" "problems" "module-locator" "jazz.bind" "partition" "lambda" "for-each" "jazz.format" "%%append" "all" "open-output-string" "output" "%%not-null?" "or" "%%when" "%%get-walker-errors" "errors" "%%get-walker-warnings" "warnings" "let" "walker")}
      {Lisp-Entry "jazz.partition-walk-problems-module" #f 2811 9 2811 44 ("assv" "%%get-walk-problem-location" "%%get-walk-location-module-locator" "problem" "lambda" "jazz.partition" "problems")}
      {Lisp-Entry "jazz.partition-walk-problems-declaration" #f 2818 9 2818 49 ("assoc" "%%get-walk-problem-location" "%%get-walk-location-declaration-locator" "%%symbol->string" "problem" "lambda" "jazz.partition" "problems")}
      {Lisp-Entry "jazz.parse-modifiers" #f 2830 9 2830 29 ("%%list" "jazz.walk-error" "else" "%%null?" "cond" "modifiers" "%%append" "values" "%%apply" "%%cdr" "%%set-cdr!" "set!" "begin" "%%memq" "if" "%%cdar" "default" "%%caar" "allowed" "partition" "for-each" "found?" "%%car" "%%desourcify" "target" "%%not" "%%not-null?" "and" "%%while" "done?" "%%cons" "info" "lambda" "map" "partitions" "let" "rest" "infos" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-module-declaration" #f 2861 9 2861 38 ("jazz.new-module-declaration" "collect-requires" "requires" "let" "jazz.error" "%%neq?" "jazz.requested-module-name" "and" "if" "body" "access" "name" "lambda" "parse" "partial-form")
        {Lisp-Entry "parse" #f 2862 11 2862 16 ("%%cdr" "'public" "%%cddr" "%%cadr" "public" "protected" "%%memq" "if" "%%car" "jazz.source-code" "first" "let" "proc" "rest")}
        {Lisp-Entry "collect-requires" #f 2868 11 2868 27 ("%%desourcify" "%%cdr" "jazz.filter-features" "jazz.listify" "map" "append" "set!" "require" "'require" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "if" "expr" "lambda" "for-each" "requires" "let" "body")}}
      {Lisp-Entry "jazz.parse-library" #f 2890 9 2890 27 ("values" "%%cddr" "body" "%%cadr" "dialect-name" "%%car" "jazz.source-code" "name" "let" "parse-modifiers" "rest" "access" "receive" "partial-form")
        {Lisp-Entry "parse-modifiers" #f 2891 11 2891 26 ("'public" "%%cdr" "values" "public" "protected" "%%memq" "if" "%%car" "jazz.source-code" "first" "let" "rest")}}
      {Lisp-Entry "jazz.parse-library-invoice" #f 2907 9 2907 35 ("%%reverse" "values" "'autoload" "'only" "'phase" "%%cdar" "begin" "'load" "%%caar" "%%eq?" "if" "%%cons" "set!" "%%not" "and" "%%while" "autoload" "only" "phase" "load" "version" "%%cdr" "scan" "%%car" "name" "let" "jazz.error" "%%pair?" "%%assertion" "specification")}
      {Lisp-Entry "jazz.parse-library-declaration" #f 2947 9 2947 39 ("jazz.walk-library-declaration" "jazz.dialect-walker" "walker" "jazz.require-dialect" "dialect" "jazz.load-dialect-invoice" "dialect-invoice" "let*" "jazz.new-walk-context" "jazz.walk-context" "parameterize" "jazz.error" "%%neq?" "jazz.requested-module-name" "and" "if" "jazz.parse-library" "body" "dialect-name" "access" "name" "receive" "partial-form")}
      {Lisp-Entry "jazz.walk-library-declaration" #f 2958 9 2958 38 ("jazz.validate-walk-problems" "jazz.walker-environment" "%%cons" "jazz.walk-declarations" "jazz.add-library-import" "%%when" "jazz.new-library-declaration" "or" "declaration" "let" "body" "dialect-invoice" "dialect-name" "access" "name" "actual" "walker")}
      {Lisp-Entry "jazz.walk-library-export" #f 2967 9 2967 33 ("jazz.new-autoload-reference" "jazz.new-export-reference" "symbol" "lambda" "map" "%%not" "if" "jazz.new-export-invoice" "jazz.new-library-reference" "library-reference" "let" "jazz.parse-library-invoice" "library-autoload" "library-only" "library-version" "library-phase" "library-load" "library-name" "receive" "export" "walker")}
      {Lisp-Entry "jazz.expand-library-source" #f 2986 9 2986 35 ("jazz.walk-library" "jazz.emit-declaration" "partial-form")}
      {Lisp-Entry "jazz.walk-library" #f 2990 9 2990 26 ("%%set-namespace-declaration-body" "jazz.validate-walk-problems" "jazz.walk-namespace" "jazz.walker-environment" "%%cons" "environment" "jazz.set-catalog-entry" "jazz.desourcify-all" "jazz.walk-library-declaration" "let" "lambda" "jazz.call-with-catalog-entry-lock" "declaration" "jazz.get-catalog-entry" "actual" "resume" "jazz.dialect-walker" "walker" "jazz.require-dialect" "dialect" "jazz.load-dialect-invoice" "dialect-invoice" "let*" "jazz.new-walk-context" "jazz.walk-context" "parameterize" "jazz.error" "%%neq?" "jazz.requested-module-name" "and" "if" "jazz.parse-library" "body" "dialect-name" "access" "name" "receive" "partial-form")}
      {Lisp-Entry "jazz.cond-expand" #f 3012 9 3012 25 ("begin" "else" "'else" "jazz.feature-safisfied?" "feature-requirement" "%%desourcify" "%%symbol?" "%%not" "or" "clause" "jazz.error" "%%null?" "%%cdr" "scan" "iter" "let" "cond-expand" "'cond-expand" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "if" "cont" "form-src")}
      {Lisp-Entry "jazz.walk-namespace" #f 3032 9 3032 28 ("jazz.queue-list" "jazz.walk" "jazz.enqueue" "%%when" "expr?" "expr-src" "jazz.cond-expand" "continuation-capture" "form-src" "lambda" "for-each" "jazz.new-queue" "queue" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.load-dialect-invoice" #f 3045 9 3045 34 ("syntax" "'syntax" "jazz.outline-library" "jazz.new-import-invoice" "core" "'core" "%%eq?" "jazz.error" "%%symbol?" "%%not" "if" "dialect-name")}
      {Lisp-Entry "jazz.emit-library-inclusions" #f 3058 9 3058 37 ("jazz.expand-referenced-declaration" "map" "%%get-library-declaration-inclusions" "jazz.enqueue" "jazz.queue-list" "%%get-lexical-binding-name" "find-name" "%%not" "%%when" "jazz.get-declaration-inclusions" "for-each" "declaration" "lambda" "collect-declarations" "letrec" "jazz.new-queue" "queue" "let" "library-declaration")
        {Lisp-Entry "find-name" #f 3059 11 3059 20 ("%%cdr" "find-name" "%%car" "%%get-lexical-binding-name" "%%eq?" "%%null?" "if" "lst" "name")}}
      {Lisp-Entry "jazz.emit-library-literals" #f 3082 9 3082 35 ("%%get-library-declaration-literals" "jazz.emit-expression" "jazz.sourcified-form" ",name" "define" "%%cdr" "value" "%%car" "name" "let" "info" "lambda" "map" "library-declaration")}
      {Lisp-Entry "jazz.emit-library-variables" #f 3090 9 3090 36 ("%%get-library-declaration-variables" "jazz.queue-list" ",value" ",symbol" "jazz.define-variable" "%%cdr" "value" "%%car" "symbol" "let" "variable" "lambda" "map" "library-declaration")}
      {Lisp-Entry "jazz.emit-library-autoloads" #f 3098 9 3098 36 ("jazz.queue-list" "%%get-library-declaration-autoloads" "jazz.emit-binding-reference" "jazz.sourcified-form" "set!" "%%get-declaration-toplevel" "%%get-declaration-locator" "jazz.load-module" "begin" "if" "loaded?" ",locator" "define" "jazz.enqueue" "%%table-set!" "%%table-ref" "%%not" "%%when" "jazz.autoload-locator" "locator" "jazz.resolve-binding" "referenced-declaration" "autoload-declaration" "lambda" "for-each" "eq?" "test:" "%%make-table" "locators" "jazz.new-queue" "queue" "let" "environment" "library-declaration")}
      {Lisp-Entry "jazz.emit-library-registration" #f 3119 9 3119 39 ("jazz.queue-list" "%%cons" "jazz.enqueue" "jazz.runtime-export" "export" "decl" "name" "lambda" "jazz.public-access" "%%get-access-lookup" "%%iterate-table" "jazz.new-queue" "queue" "%%get-library-declaration-walker" "walker" "let" "%%get-lexical-binding-name" "jazz.register-library" "public" "'public" "%%get-declaration-access" "%%eq?" "if" "environment" "declaration")}
      {Lisp-Entry "jazz.runtime-export" ("jazz.Walker") 3133 30 3133 49 ("declaration")}
      {Lisp-Entry "jazz.runtime-export" ("jazz.Walker") 3136 21 3136 40 ("else" "%%get-declaration-toplevel" "%%cons" "jazz.resolve-binding" "referenced-declaration" "let" "jazz.Autoload-Declaration" "%%get-declaration-locator" "jazz.Export-Declaration" "%%is?" "cond" "declaration")}
      {Lisp-Entry "jazz.core-bindings" #f 3152 9 3152 27 ("jazz.walk-syntax" "syntax" "'syntax" "jazz.walk-macro" "macro" "'macro" "jazz.walk-native-syntax" "native-syntax" "'native-syntax" "jazz.walk-native" "native" "'native" "jazz.walk-proclaim" "proclaim" "'proclaim" "jazz.walk-import" "import" "'import" "jazz.walk-export" "export" "'export" "jazz.walk-require" "require" "'require" "jazz.new-special-form" "%%list")}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Walker") 3164 30 3164 53 ()}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Walker") 3167 21 3167 44 ("jazz.core-bindings" "jazz.new-walk-frame" "%%list")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Walker") 3182 30 3182 51 ("form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Walker") 3185 21 3185 42 ("else" "jazz.walk-syntax-declaration" "syntax" "jazz.walk-macro-declaration" "macro" "jazz.walk-native-syntax-declaration" "native-syntax" "jazz.walk-native-declaration" "native" "jazz.walk-import-declaration" "import" "jazz.walk-export-declaration" "export" "walker" "jazz.walk-require-declaration" "require" "case" "%%car" "first" "let" "%%pair?" "if" "form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-declarations" #f 3200 9 3200 31 ("walk" "forms" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "walk" #f 3201 11 3201 15 ("jazz.walk-declaration" "%%cdr" "walk" "jazz.begin-form?" "if" "environment" "declaration" "walker" "jazz.expand-macros" "expansion" "let" "%%when" "expr?" "expr" "jazz.cond-expand" "resume" "continuation-capture" "form" "lambda" "for-each" "forms")}}
      {Lisp-Entry "jazz.add-declaration-child" #f 3217 9 3217 35 ("jazz.public-access" "private" "'private" "%%get-declaration-access" "%%neq?" "jazz.private-access" "%%get-access-lookup" "%%table-set!" "jazz.enqueue" "jazz.queue-list" "%%memq" "%%not" "%%when" "%%get-namespace-declaration-children" "children" "%%get-lexical-binding-name" "name" "let" "child" "namespace-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.find-form-declaration" #f 3229 9 3229 35 ("jazz.error" "%%assertion" "jazz.find-declaration" "declaration" "let" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.find-typed-declaration" #f 3235 9 3235 36 ("%%class-is?" "and" "if" "find-declaration" "declaration" "let" "name" "class" "namespace-declaration")
        {Lisp-Entry "find-declaration" #f 3236 11 3236 27 ("namespace-declaration" "%%get-namespace-declaration-children" "jazz.queue-list" "name" "%%get-lexical-binding-name" "%%eq?" "decl" "lambda" "jazz.find-if")}}
      {Lisp-Entry "jazz.begin-form?" #f 3246 9 3246 25 ("begin" "'begin" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.define-form?" #f 3251 9 3251 26 ("define" "'define" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.register-autoload-declaration" #f 3261 9 3261 43 ("%%cons" "%%set-library-declaration-autoloads" "%%memq" "%%not" "%%when" "%%get-library-declaration-autoloads" "declarations" "let" "autoload-declaration" "library-declaration")}
      {Lisp-Entry "jazz.lookup-reference" #f 3272 9 3272 30 ("jazz.walk-unresolved" "jazz.lookup-symbol" "or" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Expression" #f 3282 27 3282 42 ()}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Expression") 3285 30 3285 50 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Expression") 3288 21 3288 41 ("expression" "jazz.error" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Expression") 3292 30 3292 44 ("environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Expression") 3295 21 3295 35 ("jazz.Any" "jazz.codes-forms" "expression" "jazz.emit-expression" "jazz.sourcified-form" "jazz.new-code" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Expression") 3302 30 3302 50 ("s" "k" "f")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Expression") 3305 21 3305 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.emit-expressions" #f 3309 9 3309 30 ("jazz.emit-expression" "expression" "lambda" "map" "environment" "declaration" "expressions")}
      {Lisp-Entry "jazz.fold-expressions" #f 3315 9 3315 30 ("%%cdr" "jazz.fold-expressions" "%%car" "jazz.fold-expression" "%%null?" "if" "seed" "s" "k" "f" "expressions")}
      {Lisp-Entry "jazz.Proclaim" #f 3330 27 3330 40 ()}
      {Lisp-Entry "jazz.new-proclaim" #f 3333 9 3333 26 ("jazz.Proclaim" "jazz.allocate-proclaim" "clauses")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Proclaim") 3337 21 3337 41 ("jazz.proclaim" "clause" "lambda" "for-each" "%%get-declaration-toplevel" "library-declaration" "expression" "%%get-proclaim-clauses" "clauses" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Proclaim") 3346 21 3346 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Constant" #f 3358 27 3358 40 ()}
      {Lisp-Entry "jazz.new-constant" #f 3361 9 3361 26 ("jazz.Constant" "jazz.allocate-constant" "type" "expansion")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Constant") 3365 21 3365 41 ("%%get-expression-type" "expression" "%%get-constant-expansion" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Constant") 3372 21 3372 41 ("%%get-constant-expansion" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Delay" #f 3386 27 3386 37 ()}
      {Lisp-Entry "jazz.new-delay" #f 3389 9 3389 23 ("jazz.Delay" "jazz.allocate-delay" "expression")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Delay") 3393 21 3393 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "delay" "jazz.new-code" "%%get-delay-expression" "expression" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Delay") 3401 21 3401 41 ("%%get-delay-expression" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Quasiquote" #f 3415 27 3415 42 ()}
      {Lisp-Entry "jazz.new-quasiquote" #f 3418 9 3418 28 ("jazz.Quasiquote" "jazz.allocate-quasiquote" "form")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Quasiquote") 3422 21 3422 41 ("jazz.List" "expression" "%%get-quasiquote-form" "quasiquote" "'quasiquote" "jazz.new-code" "%%cdr" "%%cons" "%%cadr" "jazz.emit-expression" "jazz.sourcified-form" "%%list" "unquote-splicing" "'unquote-splicing" "unquote" "'unquote" "%%car" "%%eq?" "or" "%%pair?" "if" "form" "lambda" "emit" "letrec" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Quasiquote") 3437 21 3437 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Reference" #f 3449 27 3449 41 ()}
      {Lisp-Entry "jazz.new-reference" #f 3452 9 3452 27 ("jazz.Reference" "jazz.allocate-reference" "binding")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Reference") 3456 21 3456 41 ("expression" "%%get-reference-binding" "jazz.emit-binding-reference" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Reference") 3460 21 3460 35 ("expression" "%%get-reference-binding" "jazz.emit-binding-call" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Reference") 3464 21 3464 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Method-Reference" #f 3476 27 3476 48 ()}
      {Lisp-Entry "jazz.new-method-reference" #f 3479 9 3479 34 ("jazz.Method-Reference" "jazz.allocate-method-reference" "binding")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Method-Reference") 3483 21 3483 41 ("jazz.Any" "%%get-lexical-binding-type" "or" "%%get-declaration-locator" "jazz.new-code" "expression" "%%get-reference-binding" "method-declaration" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Method-Reference") 3492 21 3492 35 ("jazz.Any" "jazz.codes-forms" "expression" "jazz.emit-expression" "jazz.sourcified-form" "jazz.new-code" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Method-Reference") 3499 21 3499 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Assignment" #f 3511 27 3511 42 ()}
      {Lisp-Entry "jazz.new-assignment" #f 3514 9 3514 28 ("jazz.Assignment" "jazz.allocate-assignment" "value" "binding")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Assignment") 3518 21 3518 41 ("%%get-assignment-value" "expression" "%%get-assignment-binding" "jazz.emit-binding-assignment" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Assignment") 3522 21 3522 41 ("%%get-assignment-value" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Lambda" #f 3536 27 3536 38 ()}
      {Lisp-Entry "jazz.new-lambda" #f 3539 9 3539 24 ("jazz.Lambda" "jazz.allocate-lambda" "body" "signature" "source" "type")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Lambda") 3543 21 3543 41 ("%%get-expression-source" "jazz.new-function-type" ",@signature-casts" ",cast-body" ",signature-output" "%%not" "if" "%%get-code-type" "jazz.sourcified-form" "begin" "jazz.new-code" "jazz.emit-type-cast" "jazz.simplify-begin" "cast-body" "jazz.emit-signature-casts" "signature-casts" "jazz.emit-expression" "body-code" "jazz.emit-signature" "signature-output" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "expression" "%%get-expression-type" "type" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Lambda") 3566 21 3566 41 ("%%get-lambda-body" "jazz.fold-statement" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Let" #f 3580 27 3580 35 ()}
      {Lisp-Entry "jazz.new-let" #f 3583 9 3583 21 ("jazz.Let" "jazz.allocate-let" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Let") 3587 21 3587 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-let-body" "body" "expression" "%%get-let-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Let") 3611 21 3611 41 ("%%get-let-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Named-Let" #f 3625 27 3625 41 ()}
      {Lisp-Entry "jazz.new-named-let" #f 3628 9 3628 27 ("jazz.Named-Let" "jazz.allocate-named-let" "body" "bindings" "variable" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Named-Let") 3632 21 3632 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "annotated-variable" "binding" "map" "bindings-output" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.Any" "jazz.new-annotated-variable" "%%cons" "jazz.with-annotated-frame" "%%get-let-body" "body" "%%get-let-bindings" "bindings" "expression" "%%get-named-let-variable" "variable" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Named-Let") 3657 21 3657 41 ("%%get-let-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Letstar" #f 3671 27 3671 39 ()}
      {Lisp-Entry "jazz.new-letstar" #f 3674 9 3674 25 ("jazz.Letstar" "jazz.allocate-letstar" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Letstar") 3678 21 3678 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "let*" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-letstar-body" "body" "expression" "%%get-letstar-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Letstar") 3702 21 3702 41 ("%%get-letstar-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Letrec" #f 3716 27 3716 38 ()}
      {Lisp-Entry "jazz.new-letrec" #f 3719 9 3719 24 ("jazz.Letrec" "jazz.allocate-letrec" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Letrec") 3723 21 3723 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "letrec" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-letrec-body" "body" "expression" "%%get-letrec-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Letrec") 3747 21 3747 41 ("%%get-letrec-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Receive" #f 3761 27 3761 39 ()}
      {Lisp-Entry "jazz.new-receive" #f 3764 9 3764 25 ("jazz.Receive" "jazz.allocate-receive" "body" "expression" "variables" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Receive") 3768 21 3768 41 ("%%get-expression-source" "%%get-code-type" ",expression-output" "%%get-lexical-binding-name" "variable" "map" "receive" "jazz.new-code" "body-code" "jazz.emit-expression" "jazz.sourcified-form" "expression-output" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-receive" "jazz.with-annotated-frame" "%%get-receive-body" "body" "%%get-receive-expression" "expr" "expression" "%%get-receive-variables" "variables" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Receive") 3787 21 3787 41 ("%%get-receive-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Body" #f 3801 27 3801 36 ()}
      {Lisp-Entry "jazz.new-body" #f 3804 9 3804 22 ("jazz.Body" "jazz.allocate-body" "expressions" "internal-defines")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Body") 3808 21 3808 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "%%append" "jazz.new-code" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-internal-defines" "jazz.with-annotated-frame" "%%get-body-expressions" "expressions" "expression" "%%get-body-internal-defines" "internal-defines" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Body") 3821 21 3821 41 ("%%get-body-expressions" "%%get-body-internal-defines" "jazz.fold-statements" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Internal-Define" #f 3835 27 3835 47 ()}
      {Lisp-Entry "jazz.new-internal-define" #f 3838 9 3838 33 ("jazz.Internal-Define" "jazz.allocate-internal-define" "value" "variable")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Internal-Define") 3842 21 3842 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "define" "jazz.new-code" "%%get-internal-define-value" "value" "expression" "%%get-internal-define-variable" "variable" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Internal-Define") 3852 21 3852 41 ("%%get-internal-define-value" "jazz.fold-statement" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Begin" #f 3866 27 3866 37 ()}
      {Lisp-Entry "jazz.new-begin" #f 3869 9 3869 23 ("jazz.Begin" "jazz.allocate-begin" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Begin") 3873 21 3873 41 ("%%get-expression-source" "%%get-code-type" "jazz.sourcified-form" "begin" "jazz.new-code" "jazz.emit-statements-code" "code" "expression" "%%get-begin-expressions" "expressions" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Begin") 3882 21 3882 41 ("%%get-begin-expressions" "jazz.fold-statements" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Do" #f 3895 27 3895 34 ()}
      {Lisp-Entry "jazz.new-do" #f 3898 9 3898 20 ("jazz.Do" "jazz.allocate-do" "body" "result" "test" "bindings")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Do") 3902 21 3902 41 ("%%get-code-type" ",bindings-output" "do" "jazz.new-code" "body-code" "result-code" "test-code" ",@step-code-list" ",init-code" "%%get-lexical-binding-name" "%%list" "if" "step-code-list" "jazz.emit-expression" "jazz.sourcified-form" "init-code" "%%cddr" "step" "%%cadr" "init" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "%%cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-do-body" "body" "%%get-do-result" "result" "%%get-do-test" "test" "expression" "%%get-do-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Do") 3934 21 3934 41 ("%%get-do-body" "%%get-do-result" "%%get-do-test" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Call" #f 3950 27 3950 36 ()}
      {Lisp-Entry "jazz.new-call" #f 3953 9 3953 22 ("jazz.Call" "jazz.allocate-call" "arguments" "operator" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Call") 3957 21 3957 41 ("%%get-expression-source" "jazz.emit-call" "jazz.emit-inlined-call" "jazz.emit-primitive-call" "jazz.emit-primitive-new-call" "jazz.emit-specialized-call" "or" "jazz.sourcify-code" "jazz.emit-expressions" "arguments-codes" "%%get-declaration-locator" "jazz.Declaration" "%%get-reference-binding" "binding" "jazz.Reference" "%%class-is?" "if" "locator" "%%get-call-arguments" "arguments" "expression" "%%get-call-operator" "operator" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Call") 3976 21 3976 41 ("%%get-call-arguments" "jazz.fold-expressions" "%%get-call-operator" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.call-return-type" #f 3985 9 3985 30 ("jazz.Any" "%%get-function-type-result" "jazz.Function-Type" "%%is?" "if" "operator-type")}
      {Lisp-Entry "jazz.specializers" #f 3996 8 3996 25 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.add-specializer" #f 4000 9 4000 29 ("%%list" "%%table-ref" "%%append" "jazz.specializers" "%%table-set!" "specializer" "specialized-declaration")}
      {Lisp-Entry "jazz.get-specializers" #f 4006 9 4006 30 ("jazz.specializers" "%%table-ref" "binding")}
      {Lisp-Entry "jazz.emit-specialized-call" #f 4010 9 4010 35 ("%%cdr" "%%get-function-type-result" "jazz.codes-forms" ",locator" "jazz.new-code" "jazz.emit-inlined-binding-call" "jazz.match-signature?" "%%get-lexical-binding-type" "function-type" "%%car" "specializer" "on" "'on" "jazz.debug-specializers" "%%get-lexical-binding-name" "specialized" "'specialized" "call" "'call" "match" "'match" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "scheme.dialect.kernel./" "scheme.dialect.kernel.*" "scheme.dialect.kernel.-" "scheme.dialect.kernel.+" "scheme.dialect.kernel.>=" "scheme.dialect.kernel.>" "scheme.dialect.kernel.<=" "scheme.dialect.kernel.<" "scheme.dialect.kernel.=" "%%memq" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-library-warn?" "jazz.warnings?" "and" "%%when" "begin" "%%null?" "scan" "iter" "jazz.codes-types" "types" "jazz.get-specializers" "specializers" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "jazz.emit-specialized-locator" "or" "%%not" "if" "environment" "declaration" "arguments-codes" "arguments" "locator" "operator")}
      {Lisp-Entry "jazz.emit-specialized-locator" #f 4051 8 4051 37 ()}
      {Lisp-Entry "jazz.emit-primitive-new-call" #f 4064 8 4064 36 ()}
      {Lisp-Entry "jazz.primitive-patterns" #f 4089 8 4089 31 ()}
      {Lisp-Entry "jazz.initialize-primitive-patterns" #f 4093 9 4093 43 ("set!" "jazz.primitive-patterns" "jazz.walk-specifier" "%%list" "%%cadr" "specifier" "name" "pattern" "map" "%%table-set!" "%%cdr" "patterns" "%%car" "operator" "pair" "lambda" "for-each" "eq?" "test:" "%%make-table" "table" "let")}
      {Lisp-Entry "jazz.add-primitive-patterns" #f 4108 9 4108 36 ("%%cons" "jazz.primitive-patterns" "set!" "patterns" "operator")}
      {Lisp-Entry "jazz.get-primitive-patterns" #f 4112 9 4112 36 ("jazz.primitive-patterns" "%%table-ref" "locator")}
      {Lisp-Entry "jazz.emit-primitive-call" #f 4161 9 4161 33 ("%%cdr" "%%get-function-type-result" "jazz.codes-forms" ",name" "jazz.new-code" "jazz.match-signature?" "%%car" "function-type" "name" "jazz.bind" "jazz.identifier-name" "primitive" "'primitive" "call" "'call" "match" "'match" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "scheme.dialect.kernel.cdr" "scheme.dialect.kernel.car" "%%memq" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-library-warn?" "jazz.warnings?" "and" "%%when" "begin" "%%null?" "scan" "iter" "jazz.codes-types" "types" "jazz.get-primitive-patterns" "patterns" "let" "%%not" "if" "environment" "declaration" "arguments-codes" "arguments" "locator" "operator")}
      {Lisp-Entry "jazz.emit-inlined-call" #f 4189 9 4189 31 ("jazz.emit-inlined-binding-call" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "if" "environment" "declaration" "arguments" "operator")}
      {Lisp-Entry "jazz.match-signature?" #f 4201 9 4201 30 ("list-tail" "lambda" "jazz.every?" "%%get-rest-type-type" "match-rest?" "else" "%%cdr" "%%car" "cond" "expected" "types" "args" "iter" "%%null?" "%%not" "%%fx<=" "%%fx>=" "match-positional?" "jazz.Any" "%%subtype?" "%%get-category-type-declaration" "%%get-reference-binding" "%%eq?" "jazz.Reference" "and" "or" "jazz.Category-Type" "%%class-is?" "if" "expect" "type" "arg" "match?" "define" "%%get-function-type-rest" "rest" "%%get-function-type-named" "named" "%%get-function-type-optional" "optional" "%%get-function-type-positional" "positional" "%%get-function-type-mandatory" "mandatory" "%%length" "argcount" "let" "function-type" "argument-types" "arguments")}
      {Lisp-Entry "jazz.If" #f 4250 27 4250 34 ()}
      {Lisp-Entry "jazz.new-if" #f 4253 9 4253 20 ("jazz.If" "jazz.allocate-if" "no" "yes" "test" "source")}
      {Lisp-Entry "jazz.type-tests" #f 4257 8 4257 23 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.not-type-tests" #f 4308 8 4308 27 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.restrict-type" #f 4315 9 4315 27 ("jazz.new-restriction-type" "type" "base")}
      {Lisp-Entry "jazz.restriction-of?" #f 4319 9 4319 29 ("%%get-restriction-type-type" "jazz.Restriction-Type" "%%class-is?" "and" "class" "type")}
      {Lisp-Entry "jazz.complement-type" #f 4324 9 4324 29 ("jazz.new-complement-type" "jazz.new-restriction-type" "%%get-restriction-type-type" "%%get-complement-type-type" "%%get-restriction-type-base" "%%eq?" "jazz.Complement-Type" "jazz.restriction-of?" "and" "if" "type" "base")}
      {Lisp-Entry "jazz.branch-types" #f 4331 9 4331 26 ("%%cons" "process-expr" "environment" "test")
        {Lisp-Entry "process-not" #f 4332 11 4332 22 ("process-expr" "revenv" "env" "expr")}
        {Lisp-Entry "process-and" #f 4335 11 4335 22 ("%%cons" "%%cdr" "process-expr" "newenv" "%%car" "expr" "%%null?" "if" "augmented" "scan" "iter" "let" "env" "expr-list")}
        {Lisp-Entry "process-or" #f 4343 11 4343 21 ("%%cons" "%%cdr" "process-expr" "newenv" "%%car" "expr" "%%null?" "if" "augmented" "scan" "iter" "let" "env" "expr-list")}
        {Lisp-Entry "process-is" #f 4351 11 4351 21 ("%%cdr" "no" "%%car" "jazz.new-restricted-binding" "%%list" "jazz.new-annotated-frame" "%%cons" "yes" "jazz.Pair" "jazz.Null" "jazz.List" "%%eq?" "no-type" "else" "jazz.resolve-binding" "jazz.Declaration" "%%get-reference-binding" "binding" "jazz.Reference" "%%class-is?" "jazz.type?" "cond" "yes-type" "let" "if" "extract-binding" "actual-type" "origin" "receive" "env" "type-expr" "expr")}
        {Lisp-Entry "extract-binding" #f 4384 11 4384 26 ("else" "%%get-lexical-binding-type" "jazz.Declaration" "values" "%%get-annotated-variable-variable" "origin" "%%car" "jazz.find-annotated" "actual-type" "actual-variable" "frame" "receive" "jazz.Variable" "cond" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "if" "env" "expr")}
        {Lisp-Entry "revenv" #f 4398 11 4398 17 ("%%car" "%%cdr" "%%cons" "env")}
        {Lisp-Entry "process-expr" #f 4401 11 4401 23 ("%%cdr" "no" "%%get-nillable-type-type" "jazz.new-restricted-binding" "%%list" "jazz.new-annotated-frame" "%%cons" "yes" "jazz.Nillable-Type" "extract-binding" "actual-type" "origin" "receive" "jazz.not-type-tests" "jazz.type-tests" "%%table-ref" "class" "else" "revenv" "jazz.dialect.language.functional.is-not?" "%%cadr" "process-is" "2" "jazz.dialect.kernel.is?" "%%car" "process-not" "1" "%%fx=" "scheme.dialect.kernel.not" "case" "%%length" "count" "%%get-call-arguments" "arguments" "%%get-declaration-locator" "operator-locator" "jazz.Declaration" "%%get-reference-binding" "operator-binding" "jazz.Reference" "if" "%%get-call-operator" "operator" "let" "jazz.Call" "%%get-or-expressions" "process-or" "jazz.Or" "%%get-and-expressions" "process-and" "jazz.And" "%%class-is?" "cond" "env" "expr")}}
      {Lisp-Entry "jazz.emit-expression" ("jazz.If") 4452 21 4452 41 ("%%get-expression-source" "%%get-code-type" "jazz.extend-type" "jazz.simplify-begin" "jazz.sourcified-form" "if" "jazz.new-code" "%%get-if-no" "no" "%%get-if-yes" "yes" "jazz.emit-expression" "jazz.branch-types" "no-environment" "yes-environment" "jazz.bind" "expression" "%%get-if-test" "test" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.If") 4466 21 4466 41 ("%%get-if-no" "%%get-if-yes" "%%get-if-test" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Cond" #f 4482 27 4482 36 ()}
      {Lisp-Entry "jazz.new-cond" #f 4485 9 4485 22 ("jazz.Cond" "jazz.allocate-cond" "clauses" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Cond") 4489 21 4489 41 ("%%get-expression-source" "%%get-code-type" "lambda" "map" "jazz.extend-types" "%%cons" "jazz.emit-expression" "jazz.sourcified-form" "else" "'else" "%%not" "output" "jazz.branch-types" "no-environment" "yes-environment" "jazz.bind" "%%cdr" "body" "test" "%%car" "clause" "%%null?" "if" "recurse" "cond" "jazz.new-code" "expression" "%%get-cond-clauses" "clauses" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Cond") 4513 21 4513 41 ("%%get-cond-clauses" "jazz.fold-expression" "%%not" "if" "%%cdr" "body" "%%car" "test" "let" "clause" "lambda" "map" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Case" #f 4533 27 4533 36 ()}
      {Lisp-Entry "jazz.new-case" #f 4536 9 4536 22 ("jazz.Case" "jazz.allocate-case" "clauses" "target" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Case") 4540 21 4540 41 ("%%get-expression-source" "%%get-code-type" "jazz.extend-types" ",tries" "%%car" "tries" "emited-clause" "jazz.sourcified-form" "case" "jazz.new-code" "jazz.emit-expression" "%%cdr" "body" "clause" "lambda" "map" "emited-clauses" "%%get-case-clauses" "clauses" "expression" "%%get-case-target" "target" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Case") 4560 21 4560 41 ("%%get-case-clauses" "cdr" "map" "jazz.fold-expressions" "%%get-case-target" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.And" #f 4574 27 4574 35 ()}
      {Lisp-Entry "jazz.new-and" #f 4577 9 4577 21 ("jazz.And" "jazz.allocate-and" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.And") 4581 21 4581 41 ("%%get-expression-source" "jazz.Any" "expression" "%%get-and-expressions" "jazz.emit-expressions" "jazz.codes-forms" "and" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.And") 4588 21 4588 41 ("%%get-and-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Or" #f 4601 27 4601 34 ()}
      {Lisp-Entry "jazz.new-or" #f 4604 9 4604 20 ("jazz.Or" "jazz.allocate-or" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Or") 4608 21 4608 41 ("%%get-expression-source" "jazz.Any" "expression" "%%get-or-expressions" "jazz.emit-expressions" "jazz.codes-forms" "or" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Or") 4615 21 4615 41 ("%%get-or-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Declare" #f 4628 27 4628 39 ()}
      {Lisp-Entry "jazz.new-declare" #f 4631 9 4631 25 ("jazz.Declare" "jazz.allocate-declare" "declarations")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Declare") 4635 21 4635 41 ("jazz.Any" ",@declarations" "declare" "jazz.new-code" "expression" "%%get-declare-declarations" "declarations" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Declare") 4643 21 4643 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Include" #f 4655 27 4655 41 ()}
      {Lisp-Entry "jazz.new-c-include" #f 4658 9 4658 27 ("jazz.C-Include" "jazz.allocate-c-include" "name")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Include") 4662 21 4662 41 ("jazz.Any" "%%string-append" "c-declare" "jazz.new-code" "expression" "%%get-c-include-name" "name" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Include") 4670 21 4670 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Declare" #f 4682 27 4682 41 ()}
      {Lisp-Entry "jazz.new-c-declare" #f 4685 9 4685 27 ("jazz.C-Declare" "jazz.allocate-c-declare" "code")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Declare") 4689 21 4689 41 ("jazz.Any" ",code" "c-declare" "jazz.new-code" "expression" "%%get-c-declare-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Declare") 4697 21 4697 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Named-Declare-Declaration" #f 4709 27 4709 59 ()}
      {Lisp-Entry "jazz.new-c-named-declare-declaration" #f 4712 9 4712 45 ("jazz.setup-declaration" "jazz.C-Named-Declare-Declaration" "jazz.allocate-c-named-declare-declaration" "new-declaration" "let" "code" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.C-Named-Declare-Declaration") 4718 21 4718 42 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.C-Named-Declare-Declaration") 4722 21 4722 55 (",code" "c-declare" "declaration" "%%get-c-named-declare-declaration-code" "code" "let")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.C-Named-Declare-Declaration") 4727 21 4727 42 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Initialize" #f 4739 27 4739 44 ()}
      {Lisp-Entry "jazz.new-c-initialize" #f 4742 9 4742 30 ("jazz.C-Initialize" "jazz.allocate-c-initialize" "code")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Initialize") 4746 21 4746 41 ("jazz.Any" ",code" "c-initialize" "jazz.new-code" "expression" "%%get-c-initialize-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Initialize") 4754 21 4754 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Function" #f 4766 27 4766 42 ()}
      {Lisp-Entry "jazz.new-c-function" #f 4769 9 4769 28 ("jazz.C-Function" "jazz.allocate-c-function" "expansion")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Function") 4773 21 4773 41 ("jazz.Any" "expression" "%%get-c-function-expansion" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Function") 4780 21 4780 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Parameterize" #f 4792 27 4792 44 ()}
      {Lisp-Entry "jazz.new-parameterize" #f 4795 9 4795 30 ("jazz.Parameterize" "jazz.allocate-parameterize" "body" "bindings")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Parameterize") 4799 21 4799 41 ("%%get-code-type" "jazz.sourcified-form" "%%cdr" "value" "%%car" "variable" "binding" "lambda" "map" "parameterize" "jazz.new-code" "jazz.emit-expression" "body-code" "%%get-parameterize-body" "body" "expression" "%%get-parameterize-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Parameterize") 4815 21 4815 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Time-Special" #f 4827 27 4827 44 ()}
      {Lisp-Entry "jazz.new-time-special" #f 4830 9 4830 30 ("jazz.Time-Special" "jazz.allocate-time" "expression")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Time-Special") 4834 21 4834 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "time" "jazz.new-code" "%%get-time-special-expression" "expression" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Time-Special") 4843 21 4843 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.emit-namespace-statements" #f 4855 9 4855 39 ("jazz.queue-list" "jazz.sourcified-form" "jazz.emit-expression" "code" "jazz.emit-declaration" "jazz.enqueue" "jazz.Declaration" "%%class-is?" "if" "statement" "lambda" "for-each" "jazz.new-queue" "queue" "let" "environment" "declaration" "statements")}
      {Lisp-Entry "jazz.emit-statements-code" #f 4867 9 4867 34 ("jazz.new-code" "jazz.sourcified-form" "%%get-code-type" "set!" "jazz.emit-expression" "code" "jazz.emit-declaration" "jazz.Declaration" "%%class-is?" "if" "statement" "lambda" "map" "emited" "last-type" "let" "environment" "declaration" "statements")}
      {Lisp-Entry "jazz.fold-statement" #f 4880 9 4880 28 ("jazz.fold-expression" "jazz.fold-declaration" "jazz.Declaration" "%%class-is?" "if" "s" "k" "f" "statement")}
      {Lisp-Entry "jazz.fold-statements" #f 4886 9 4886 29 ("%%cdr" "jazz.fold-statements" "%%car" "jazz.fold-statement" "%%null?" "if" "seed" "s" "k" "f" "statements")}
      {Lisp-Entry "jazz.walk" #f 4898 9 4898 18 ("jazz.walk-constant" "else" "jazz.walk-form" "%%pair?" "jazz.walk-symbol" "%%symbol?" "cond" "jazz.source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-list" #f 4908 9 4908 23 ("jazz.queue-list" "jazz.walk" "jazz.enqueue" "continuation-capture" "form" "lambda" "for-each" "jazz.new-queue" "queue" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-body" #f 4918 9 4918 23 ("jazz.queue-list" "jazz.walk-internal-define" "map" "jazz.enqueue" "jazz.new-variable" "variable" "%%symbol?" "name" "%%desourcify" "%%cadr" "signature" "internal-define" "augmented-environment" "jazz.new-queue" "variables" "jazz.walk-list" "jazz.new-body" "%%car" "%%eq?" "%%null?" "or" "scan" "iter" "expressions" "'expressions" "else" "defines" "'defines" "%%cons" "jazz.define-form?" "jazz.source-code" "%%cdr" "jazz.error" "%%neq?" "set!" "%%not" "if" "substate" "sub" "for-each" "state" "jazz.begin-form?" "cond" "form" "lambda" "process" "letrec" "internal-defines" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-internal-define" #f 4961 9 4961 34 ("jazz.walk" "jazz.new-internal-define" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "jazz.source-code" "%%cdr" "jazz.parse-define" "parameters" "value" "specifier" "name" "receive" "variable" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-define" #f 4967 9 4967 26 (",@body" ",@specifier-list" ",parameters" "%%list" "specifier-list" "body" "%%desourcify" "parameters" "values" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "name" "let" "%%car" "jazz.source-code" "%%symbol?" "if" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-quote" #f 4986 9 4986 24 ("jazz.walk-constant" "jazz.Null" "quote" "jazz.new-constant" "%%null?" "if" "%%cadr" "expression" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-keyword" #f 4994 9 4994 26 ("jazz.Keyword" "jazz.new-constant" "keyword" "walker")}
      {Lisp-Entry "jazz.walk-enumerator" #f 4998 9 4998 29 ("jazz.Symbol" "quote" "'quote" "%%list" "jazz.new-constant" "enumerator" "walker")}
      {Lisp-Entry "jazz.walk-constant" #f 5002 9 5002 27 ("jazz.walk-literal/constant" "else" "jazz.Pair" "jazz.scheme-pair-literal?" "jazz.Null" "%%null?" "jazz.Values" "%%values?" "jazz.F64Vector" "%%f64vector?" "jazz.F32Vector" "%%f32vector?" "jazz.U64Vector" "%%u64vector?" "jazz.S64Vector" "%%s64vector?" "jazz.U32Vector" "%%u32vector?" "jazz.S32Vector" "%%s32vector?" "jazz.U16Vector" "%%u16vector?" "jazz.S16Vector" "%%s16vector?" "jazz.U8Vector" "%%u8vector?" "jazz.S8Vector" "%%s8vector?" "jazz.Vector" "%%vector?" "jazz.Symbol" ",form-src" "quote" "%%symbol?" "jazz.Number" "%%number?" "jazz.Flonum" "%%flonum?" "jazz.Fixnum" "%%fixnum?" "jazz.Keyword" "%%keyword?" "jazz.String" "%%string?" "jazz.Char" "%%char?" "jazz.Boolean" "jazz.new-constant" "%%boolean?" "cond" "jazz.source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.scheme-pair-literal?" #f 5052 9 5052 34 ("%%cdr" "%%car" "%%pair?" "and" "%%vector?" "%%symbol?" "%%number?" "%%keyword?" "%%string?" "%%char?" "%%boolean?" "%%null?" "or" "expr" "lambda" "scheme-data?" "letrec" "form")}
      {Lisp-Entry "jazz.walk-literal/constant" #f 5074 9 5074 35 ("jazz.lookup-reference" "jazz.new-constant" "%%class-of" "%%get-category-name" "jazz.identifier-name" "if" "literal-type" "%%set-cdr!" "%%get-library-declaration-literals" "%%set-library-declaration-literals" "info" "%%get-declaration-locator" "%%symbol->string" "%%string-append" "jazz.generate-symbol" "locator" "jazz.error" "else" "%%cdr" "cons" "%%pair?" ",arg" "quote" "arg" "lambda" "map" ",constructor-name" "%%desourcify" "jazz.require-literal-constructor" "%%car" "constructor-name" "%%get-literal-arguments" "arguments" "%%get-literal-name" "name" "cond" "jazz.walk" "jazz.walker-environment" "%%cons" "walk-literal/constant" "define" "jazz.Literal" "%%is?" "literal?" "%%get-declaration-toplevel" "library-declaration" "let" "literal/constant" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.make-symbolic-chars" #f 5106 9 5106 33 ("eq?" "test:" "%%cdr" "integer->char" "%%car" "%%cons" "pair" "lambda" "map" "%%list->table" "alist")}
      {Lisp-Entry "jazz.Symbolic-Chars" #f 5114 8 5114 27 ("#xA9" "copyright" "#x7F" "delete" "#x7D" "close-brace" "#x7B" "open-brace" "#x60" "backquote" "#x5F" "underscore" "#x5E" "exponential" "#x5D" "close-bracket" "#x5C" "backslash" "#x5B" "open-bracket" "#x40" "at" "#x3F" "question-mark" "#x3B" "semi-colon" "#x3A" "colon" "#x2F" "slash" "#x2E" "period" "#x2D" "minus" "#x2C" "comma" "#x2B" "plus" "#x2A" "times" "#x29" "close-parenthesis" "#x28" "open-parenthesis" "#x27" "quote" "#x26" "ampersand" "#x23" "sharp" "#x22" "double-quote" "#x21" "exclamation-point" "#x20" "space" "#x1F" "down-arrow" "#x1E" "up-arrow" "#x1D" "right-arrow" "#x1C" "left-arrow" "#x1B" "escape" "#x0D" "return" "#x0C" "page-down" "#x0B" "page-up" "#x0A" "linefeed" "#x09" "tab" "#x08" "backspace" "#x05" "info" "#x04" "end" "#x03" "enter" "#x01" "home" "#x00" "zero" "jazz.make-symbolic-chars")}
      {Lisp-Entry "jazz.symbolic-char" #f 5162 9 5162 27 ("jazz.Symbolic-Chars" "%%table-ref" "name")}
      {Lisp-Entry "jazz.register-variable" #f 5171 9 5171 31 ("%%get-library-declaration-variables" "jazz.enqueue" "%%cons" "variable" "%%get-declaration-locator" "%%symbol->string" "%%string-append" "jazz.generate-symbol" "symbol" "%%get-declaration-toplevel" "library-declaration" "let" "value" "suffix" "declaration")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Walker") 5184 30 5184 46 ("symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Walker") 5187 21 5187 37 ("jazz.walk-symbol-reference" "else" "walker" "jazz.walk-enumerator" "jazz.enumerator?" "cond" "jazz.source-code" "symbol" "let" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-setbang" #f 5195 9 5195 26 ("%%desourcify" "jazz.error" "jazz.walk-symbol-assignment" "%%symbol?" "if" "%%cddr" "%%car" "value" "jazz.source-code" "%%cadr" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-symbol" #f 5203 9 5203 27 ("jazz.register-autoload-declaration" "%%get-declaration-toplevel" "library" "jazz.Autoload-Declaration" "validate-compatibility" "jazz.Declaration" "%%class-is?" "and" "if" "jazz.source-code" "lookup" "referenced-declaration" "let" "symbol-src" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "lookup-composite" #f 5204 11 5204 27 ("jazz.error" "jazz.new-library-reference" "%%get-declaration-toplevel" "jazz.new-autoload-declaration" "jazz.Autoload-Declaration" "%%is?" "if" "declaration" "jazz.public-access" "jazz.lookup-declaration" "decl" "jazz.outline-library" "exported-library-reference" "let" "jazz.split-composite" "name" "library-name" "receive" "symbol" "environment" "walker")}
        {Lisp-Entry "lookup" #f 5214 11 5214 17 ("declaration" "jazz.walk-binding-lookup" "binding" "lambda" "jazz.find-in" "lookup-composite" "jazz.composite-name?" "if" "symbol" "environment" "walker")}
        {Lisp-Entry "validate-compatibility" #f 5221 11 5221 33 ("jazz.walk-warning" "%%get-declaration-locator" "referenced-locator" "let" "deprecated" "'deprecated" "%%get-declaration-compatibility" "%%eq?" "if" "referenced-declaration" "declaration" "walker")}}
      {Lisp-Entry "jazz.walk-symbol-reference" #f 5240 9 5240 35 ("jazz.walk-free-reference" "jazz.new-reference" "jazz.walk-binding-referenced" "jazz.Variable" "%%class-is?" "begin" "if" "jazz.lookup-symbol" "binding" "let" "symbol-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-free-reference" ("jazz.Walker") 5250 30 5250 54 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-reference" ("jazz.Walker") 5253 21 5253 45 ("walker" "jazz.walk-unresolved" "symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Walker") 5262 30 5262 57 ("value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Walker") 5265 21 5265 48 ("jazz.walk-free-assignment" "jazz.walk" "jazz.new-assignment" "jazz.walk-binding-validate-assignment" "begin" "if" "walker" "jazz.lookup-symbol" "binding" "let" "value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" ("jazz.Walker") 5274 30 5274 55 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" ("jazz.Walker") 5277 21 5277 46 ("walker" "jazz.walk-unresolved" "symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Walker") 5286 30 5286 44 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Walker") 5289 21 5289 35 ("jazz.walk-call" "jazz.walk" "jazz.walk-binding-expand-form" "expansion" "jazz.walk-binding-expandable?" "jazz.walk-binding-walk-form" "jazz.walk-binding-walkable?" "if" "walker" "jazz.lookup-symbol" "%%symbol?" "and" "binding" "jazz.source-code" "%%car" "%%desourcify" "procedure-expr" "let" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.lookup-macro-form" #f 5308 9 5308 31 ("jazz.walk-binding-expandable?" "and" "if" "jazz.lookup-symbol" "binding" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-macros" #f 5315 9 5315 27 ("jazz.expand-macros" "jazz.walk-binding-expand-form" "expansion" "jazz.lookup-macro-form" "%%symbol?" "and" "binding" "%%car" "procedure-expr" "let" "%%pair?" "%%not" "if" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-call" #f 5331 9 5331 23 ("jazz.walk-list" "jazz.walk" "lambda" "continuation-capture" "jazz.new-call" "jazz.desourcify-all" "jazz.walk-binding-validate-call" "if" "%%cdr" "arguments" "jazz.source-code" "%%car" "operator" "let" "form-src" "procedure-binding" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-arguments" ("jazz.Walker") 5343 30 5343 53 ("arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" ("jazz.Walker") 5346 21 5346 44 ("%%fx<" "walker" "jazz.walk-error" "%%fx>" "%%not" "and" "cond" "%%get-signature-named" "%%get-signature-optional" "%%not-null?" "or" "rest?" "%%get-declaration-locator" "locator" "%%length" "passed" "%%get-signature-rest" "rest" "%%get-signature-mandatory" "mandatory" "let" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.walk-require-declaration" #f 5366 9 5366 38 ("jazz.listify" "jazz.add-library-require" "require" "lambda" "for-each" "%%cdr" "jazz.filter-features" "requires" "%%get-declaration-toplevel" "library-declaration" "let" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-require" #f 5374 9 5374 26 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-export-declaration" #f 5383 9 5383 37 ("jazz.add-library-export" "export-invoice" "lambda" "for-each" "%%cdr" "jazz.filter-features" "walk-exports" "export-invoices" "%%get-declaration-toplevel" "library-declaration" "let" "form" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "walk-exports" #f 5384 11 5384 23 ("walker" "jazz.walk-library-export" "export" "%%cdr" "jazz.new-export-reference" "symbol" "lambda" "map" "jazz.new-export-invoice" "%%list" "if" "%%append" "library-exports" "%%assq" "symbols-exports" "assv" "symbol?" "jazz.partition" "partition" "let" "exports")}}
      {Lisp-Entry "jazz.walk-export" #f 5404 9 5404 25 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-import-declaration" #f 5413 9 5413 37 ("jazz.add-library-import" "import-invoice" "lambda" "for-each" "%%cdr" "jazz.filter-features" "walk-imports" "import-invoices" "%%get-declaration-toplevel" "library-declaration" "let" "form" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "jazz.walk-library-import" #f 5414 11 5414 35 ("jazz.new-export-reference" "symbol" "lambda" "map" "%%not" "if" "jazz.lookup-library" "jazz.new-import-invoice" "jazz.parse-library-invoice" "library-autoload" "library-only" "library-version" "library-phase" "library-load" "library-name" "receive" "import")
          {Lisp-Entry "jazz.lookup-library" #f 5415 13 5415 32 ("declaration" "resume" "walker" "jazz.walk-unresolved" "jazz.outline-library" "or" "name")}}
        {Lisp-Entry "walk-imports" #f 5430 11 5430 23 ("jazz.listify" "jazz.walk-library-import" "import" "lambda" "map" "imports")}}
      {Lisp-Entry "jazz.walk-import" #f 5442 9 5442 25 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Walker") 5451 30 5451 52 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Walker") 5454 21 5454 43 ("walker" "jazz.walk-error" "jazz.Library-Declaration" "%%class-is?" "%%not" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-proclaim" #f 5459 9 5459 27 ("jazz.new-proclaim" "%%cdr" "clauses" "%%desourcify" "form" "let" "jazz.validate-proclaim" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.native-modifiers" #f 5471 8 5471 29 ()}
      {Lisp-Entry "jazz.native-keywords" #f 5475 8 5475 28 ()}
      {Lisp-Entry "jazz.parse-native" #f 5479 9 5479 26 ("values" "%%null?" "%%assert" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "name" "let" "jazz.native-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-declaration" #f 5488 9 5488 37 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-export-declaration" "new-declaration" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native" #f 5497 9 5497 25 ("jazz.find-form-declaration" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.native-syntax-modifiers" #f 5509 8 5509 36 ()}
      {Lisp-Entry "jazz.native-syntax-keywords" #f 5513 8 5513 35 ()}
      {Lisp-Entry "jazz.parse-native-syntax" #f 5517 9 5517 33 ("values" "%%null?" "%%assert" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "name" "let" "jazz.native-syntax-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-syntax-declaration" #f 5526 9 5526 44 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-export-syntax-declaration" "new-declaration" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native-syntax" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-syntax" #f 5535 9 5535 32 ("jazz.find-form-declaration" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native-syntax" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.macro-modifiers" #f 5547 8 5547 28 ()}
      {Lisp-Entry "jazz.parse-macro" #f 5552 9 5552 25 ("values" "parameters" "jazz.Any" "type" "%%desourcify" "name" "%%cdr" "body" "%%car" "jazz.source-code" "signature" "let*" "jazz.macro-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-macro-declaration" #f 5562 9 5562 36 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-macro-declaration" "new-declaration" "jazz.walk-parameters" "signature" "let" "%%cdr" "jazz.parse-macro" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-macro" #f 5570 9 5570 24 ("%%set-declaration-source" "jazz.walk-body" "%%set-macro-declaration-body" "%%set-macro-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-macro" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.syntax-modifiers" #f 5586 8 5586 29 ()}
      {Lisp-Entry "jazz.parse-syntax" #f 5591 9 5591 26 ("values" "parameters" "jazz.Any" "type" "%%desourcify" "name" "%%cdr" "body" "%%car" "jazz.source-code" "signature" "let*" "jazz.syntax-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-syntax-declaration" #f 5601 9 5601 37 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-syntax-declaration" "new-declaration" "jazz.walk-parameters" "signature" "let" "%%cdr" "jazz.parse-syntax" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-syntax" #f 5609 9 5609 25 ("%%set-declaration-source" "jazz.walk-body" "%%set-syntax-declaration-body" "%%set-syntax-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-syntax" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-parameters" #f 5630 9 5630 29 ("values" "jazz.queue-list" "append" "jazz.new-signature" "signature" "jazz.List" "jazz.new-rest-parameter" "parameter-expression" "%%symbol?" "%%null?" "jazz.new-named-parameter" "keyword-parameter" "%%keyword->string" "%%string->symbol" "%%eq?" "%%cddr" "jazz.new-optional-parameter" "optional-parameter" "default" "1" "length" "=" "jazz.new-parameter" "positional-parameter" "jazz.walk-specifier" "type" "rest" "lambda" "jazz.parse-specifier" "%%cdr" "jazz.enqueue" "jazz.walk" "jazz.Any" "jazz.new-dynamic-parameter" "dynamic-parameter" "%%cadr" "variable" "jazz.specifier->name" "code" "specifier" "memq" "jazz.desourcify" "jazz.walk-error" "not" "parameter-src" "let*" "case" "section" "allowed?" "positional" "'positional" "optional" "'optional" "else" "keyword" "'keyword" "%%keyword?" "dynamic" "'dynamic" "jazz.specifier?" "or" "cond" "%%car" "jazz.source-code" "first" "%%pair?" "if" "parameter" "parameter-section" "%%cons" "set!" "%%when" "expression" "augment-environment" "sections" "scan" "iterate-parameters" "define" "keywords" "optionals" "positionals" "jazz.new-queue" "dynamics" "augmented-environment" "let" "walk?" "extended?" "parameters" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-signature-casts" #f 5736 9 5736 34 ("jazz.queue-list" "%%get-signature-named" "%%get-signature-optional" "%%get-signature-positional" "for-each" "jazz.enqueue" "jazz.new-queue" "set!" "%%not" "begin" "jazz.emit-binding-reference" "jazz.emit-parameter-cast" "cast" "jazz.Any" "%%neq?" "and" "if" "%%get-lexical-binding-type" "type" "parameter" "process" "define" "queue" "let" "environment" "source-declaration" "signature")}
      {Lisp-Entry "jazz.emit-signature" #f 5758 9 5758 28 ("jazz.queue-list" "#!rest" "#!key" "#!optional" "%%null?" "%%not" "%%when" "for-each" "jazz.emit-parameter" "jazz.enqueue" "parameter" "emit" "define" "jazz.new-queue" "queue" "%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "let" "environment" "declaration" "signature")}
      {Lisp-Entry "jazz.Catalog" #f 5787 8 5787 20 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-catalog" #f 5791 9 5791 25 ("jazz.Catalog")}
      {Lisp-Entry "jazz.get-catalog-entry" #f 5795 9 5795 31 ("jazz.Catalog" "%%table-ref" "module-name")}
      {Lisp-Entry "jazz.set-catalog-entry" #f 5799 9 5799 31 ("jazz.Catalog" "%%table-set!" "entry" "module-name")}
      {Lisp-Entry "jazz.set-catalog-entry-status" #f 5803 9 5803 38 ("%%cons" "jazz.set-catalog-entry" "%%cdr" "%%pair?" "if" "jazz.get-catalog-entry" "entry" "declaration" "let" "status" "module-name")}
      {Lisp-Entry "jazz.release-catalog-entries" #f 5811 9 5811 37 ("%%cdr" "jazz.set-catalog-entry" "%%pair?" "if" "entry" "module-name" "lambda" "jazz.Catalog" "%%iterate-table")}
      {Lisp-Entry "jazz.call-with-catalog-entry-lock" #f 5818 9 5818 42 ("jazz.get-catalog-entry" "%%pair?" "if" "jazz.pop-load-stack" ":walk" "':walk" "jazz.push-load-stack" ":walking" "':walking" "jazz.set-catalog-entry-status" "dynamic-wind" "lambda" "jazz.call-with-load-lock" "thunk" "module-name")}
      {Lisp-Entry "jazz.outline-module" #f 5832 9 5832 28 ("jazz.set-catalog-entry" "jazz.load-toplevel-declaration" "lambda" "jazz.call-with-catalog-entry-lock" "%%not" "jazz.error" "%%cdr" "declaration" "%%car" "%%pair?" "if" "status" "jazz.get-catalog-entry" "entry" "let" "error?" "#!optional" "module-name")}
      {Lisp-Entry "jazz.outline-library" #f 5850 9 5850 29 ("jazz.Library-Declaration" "%%class-is?" "%%assert" "%%not" "if" "jazz.outline-module" "declaration" "let" "error?" "#!optional" "module-name")}
      {Lisp-Entry "jazz.load-toplevel-declaration" #f 5858 9 5858 39 ("lambda" "jazz.parse-verbose?" "jazz.with-verbose" "jazz.parse-library-declaration" "library" "%%cdr" "jazz.parse-module-declaration" "module" "%%car" "case" "jazz.requested-module-resource" "jazz.requested-module-name" "parameterize" "read-literals?:" "jazz.read-toplevel-form" "form" "load-declaration" "define" "jazz.resource-pathname" "source" "%%not" "and" "if" "jazz.find-module-src" "src" "let" "error?" "#!optional" "module-name")}
      {Lisp-Entry "jazz.read-literals?" #f 5879 8 5879 27 ("make-parameter")}
      {Lisp-Entry "jazz.read-toplevel-form" #f 5883 9 5883 32 ("jazz.error" "library" "module" "%%car" "%%memq" "%%pair?" "and" "or" "jazz.read-source-first" "values" "%%eof-object?" "read" "let" "%%not" "if" "jazz.read-literals?" "parameterize" "port" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "lambda" "jazz.pathname-extension" "jazz.with-extension-reader" "extraneous?" "form" "receive" "read-source?" "read-literals?" "#!key" "source")}
      {Lisp-Entry "jazz.walk-module" #f 5902 9 5902 25 ("%%cdr" "jazz.walk-library" "library" "module" "%%car" "case" "jazz.read-toplevel-form" "form" "walk" "'walk" "jazz.walk-for" "jazz.requested-module-resource" "jazz.requested-module-name" "parameterize" "jazz.resource-pathname" "source" "jazz.find-module-src" "src" "let" "module-name")}
      {Lisp-Entry "jazz.Core-Dialect" #f 5921 27 5921 44 ()}
      {Lisp-Entry "jazz.new-core-dialect" #f 5924 9 5924 30 ("jazz.Core-Dialect" "jazz.allocate-core-dialect")}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Core-Dialect") 5928 21 5928 38 ("'core")}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Core-Dialect") 5932 21 5932 40 ("jazz.new-core-walker")}
      {Lisp-Entry "jazz.Core-Walker" #f 5944 27 5944 43 ()}
      {Lisp-Entry "jazz.new-core-walker" #f 5947 9 5947 29 ("jazz.Core-Walker" "jazz.allocate-core-walker")}}})
