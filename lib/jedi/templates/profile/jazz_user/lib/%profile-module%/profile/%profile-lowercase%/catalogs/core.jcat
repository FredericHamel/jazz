"Dispatcher"
 ({Lisp-File-Entry {File core "src" "core" "generic" "runtime" "Dispatcher.jazz"} 1237033579
    {Lisp-Entry "Dispatcher" #f 47 7 47 17 ("Object")
      {Lisp-Entry "dag-root" #f 50 12 50 20 ("generate")}
      {Lisp-Entry "Root-Signature" #f 53 14 53 28 ("root-signature" "'root-signature")}
      {Lisp-Entry "initialize" #f 57 11 57 21 ("Root-Signature" "Dispatch-Node" "new" "dag-root" "set!" "nextmethod")}
      {Lisp-Entry "insert-signature" #f 62 18 62 34 ("insert-node" "else" "proper-list?" "not" "type-name" "error" "locate-node" "cond" "standardize-signature" "let" "category" "signature" "procedure" "symbol")}
      {Lisp-Entry "standardize-signature" #f 74 11 74 32 ("List" "get-type" "essay" "get-typeref" "typeref" "let" "parameter" "function" "accumulate" "signature")}
      {Lisp-Entry "insert-node" #f 82 18 82 29 ("get-specific-nodes" "add-specific-node" "remove-specific-node" "add-generic-node" "remove-generic-node" "get-signature" "can-call-with?" "neq?" "and" "when" "specific" "generic" "function" "for-each" "Dispatch-Node" "new" "node" "gather-generics" "generics" "let*" "signature" "procedure")}
      {Lisp-Entry "remove-node" #f 99 18 99 29 ("remove-generic-node" "get-generic-nodes" "remove-specific-node" "get-specific-nodes" "add-generic-node" "add-specific-node" "specific" "generic" "function" "for-each" "node")}
      {Lisp-Entry "locate-node" #f 114 18 114 29 ("first" "get-signature" "equal?" "length" "1" "=" "and" "if" "gather-generics" "matching" "let" "signature")}
      {Lisp-Entry "gather-generics" #f 122 18 122 33 ("dag-root" "cons" "memq?" "not" "and" "get-specific-nodes" "set!" "can-call-with?" "when" "child-node" "for-each" "no-match?" "walk-node" "function" "iter" "letrec" "generics" "let" "parameter-types")}
      {Lisp-Entry "find-generics" #f 138 18 138 31 ("dag-root" "car" "eq?" "if" "gather-generics" "generics" "let" "parameter-types")}
      {Lisp-Entry "get-node-procedure" #f 145 18 145 36 ("get-procedure" "node")}}
    {Lisp-Entry "Dispatch-Node" #f 154 7 154 20 ("Object")
      {Lisp-Entry "procedure" #f 157 12 157 21 ("generate")}
      {Lisp-Entry "signature" #f 158 12 158 21 ("generate")}
      {Lisp-Entry "generic-nodes" #f 159 12 159 25 ("generate")}
      {Lisp-Entry "specific-nodes" #f 160 12 160 26 ("generate")}
      {Lisp-Entry "initialize" #f 163 11 163 21 ("generic-nodes" "signature" "procedure" "set!" "nextmethod" "gen" "sig" "proc")}
      {Lisp-Entry "print" #f 170 11 170 16 ("type-name" "map" "format" "Root-Signature" "signature" "eq?" "if" "function" "self" "print-unreadable" "readably" "printer")}
      {Lisp-Entry "can-call-with?" #f 178 11 178 25 ("null?" "finally" "return" "Java" "can-cast-into?" "not" "and" "when" "r2" "parameter-type" "r1" "remainder" "in" "data-type" "for" "loop" "Root-Signature" "signature" "eq?" "if" "sig")}
      {Lisp-Entry "add-generic-node" #f 189 11 189 27 ("cons" "set-generic-nodes" "equal?" "generic" "function" "generic-nodes" "find-in" "unless" "get-signature" "sig" "let" "node")}
      {Lisp-Entry "add-specific-node" #f 197 11 197 28 ("cons" "set-specific-nodes" "equal?" "specific" "function" "specific-nodes" "find-in" "unless" "get-signature" "sig" "let" "node")}
      {Lisp-Entry "remove-generic-node" #f 205 11 205 30 ("generic-nodes" "remove" "set-generic-nodes" "generic")}
      {Lisp-Entry "remove-specific-node" #f 209 11 209 31 ("specific-nodes" "remove" "set-specific-nodes" "specific")}}})
"_base"
 ({Lisp-File-Entry {File core "src" "core" "base" "_base.scm"} 1237033579
    {Lisp-Entry "core.base" #f 37 8 37 17 ()}})
"_builder"
 ({Lisp-File-Entry {File core "src" "core" "module" "builder" "_builder.scm"} 1246908056
    {Lisp-Entry "core.module.builder" #f 38 18 38 37 ()
      {Lisp-Entry "jazz.compile-module-internal" #f 50 9 50 37 ("force?:" "ld-options:" "cc-options:" "options:" "jazz.compile-source" "jazz.requested-module-resource" "jazz.requested-module-name" "parameterize" "bin-uptodate?" "bin" "src" "lambda" "jazz.with-module-src/bin" "force?" "ld-options" "cc-options" "options" "#!key" "module-name")}
      {Lisp-Entry "jazz.compile-source" #f 58 9 58 28 ("jazz.update-manifest-compile-time" "src-filepath" "jazz.manifest-pathname" "manifest-filepath" "ld-options:" "cc-options:" "options:" "output:" "compile-file" "compile" "'compile" "jazz.walk-for" "parameterize" "lambda" "%%resource-extension" "jazz.with-extension-reader" "jazz.create-directories" "force-output" "newline" "display" "jazz.copy-package" "build-package" "jazz.resource-build-dir" "bindir" "jazz.resource-pathname" "pathname" "%%resource-path" "path" "%%resource-package" "package" "%%not" "if" "jazz.compile-options" "or" "let" "force?" "ld-options" "cc-options" "options" "#!key" "manifest-name" "bin-uptodate?" "bin" "src")}
      {Lisp-Entry "jazz.copy-package" #f 83 9 83 26 ("%%repository-packages-table" "%%table-set!" "jazz.load-package" "let" "jazz.file-copy" "jazz.file-delete" "jazz.create-directories" "begin" "jazz.repository-find-package" "jazz.file-modification-time" ">=" "jazz.file-exists?" "and" "jazz.Bin-Repository" "dst" "%%package-repository" "jazz.repository-pathname" "src" "jazz.Package-Filename" "path" "%%symbol->string" "%%package-library-path" "%%string-append" "dir" "jazz.copy-package" "if" "bin-parent" "%%package-parent" "parent" "%%package-name" "name" "let*" "package")}
      {Lisp-Entry "jazz.build-module-internal" #f 110 9 110 35 ("jazz.compile-module" "phase" "declaration" "lambda" "jazz.for-each-submodule" "module-name")}
      {Lisp-Entry "jazz.for-each-submodule" #f 121 9 121 32 ("%%get-library-declaration-exports" "%%get-library-invoice-phase" "%%get-declaration-reference-name" "name" "%%get-library-invoice-library" "reference" "export" "%%get-library-declaration-requires" "%%get-module-declaration-requires" "for-each" "jazz.Module-Declaration" "jazz.is?" "jazz.error" "jazz.descendant-module?" "not" "and" "protected" "'protected" "%%get-declaration-access" "%%eq?" "or" "jazz.outline-module" "declaration" "%%cons" "set!" "begin" "%%memq" "%%not" "if" "feature-requirement" "lambda" "jazz.parse-require" "require" "process-require" "define" "toplevel?" "phase" "module-name" "iter" "submodules" "let" "proc" "parent-name")}}})
"_class"
 ({Lisp-File-Entry {File core "src" "core" "class" "_class.scm"} 1237033579
    {Lisp-Entry "core.class" #f 37 8 37 18 ()}})
"_exception"
 ({Lisp-File-Entry {File core "src" "core" "exception" "_exception.scm"} 1237033579
    {Lisp-Entry "core.exception" #f 37 8 37 22 ()}})
"_generic"
 ({Lisp-File-Entry {File core "src" "core" "generic" "_generic.scm"} 1237033579
    {Lisp-Entry "core.generic" #f 37 8 37 20 ()}})
"_library"
 ({Lisp-File-Entry {File core "src" "core" "library" "_library.scm"} 1237033579
    {Lisp-Entry "core.library" #f 37 8 37 20 ()}})
"_module"
 ({Lisp-File-Entry {File core "src" "core" "module" "_module.scm"} 1237033579
    {Lisp-Entry "core.module" #f 37 8 37 19 ()}})
"_runtime"
 ({Lisp-File-Entry {File core "src" "core" "library" "runtime" "_runtime.scm"} 1245732655
    {Lisp-Entry "core.library.runtime" #f 37 18 37 38 ()
      {Lisp-Entry "jazz.type-error" #f 48 9 48 24 ("jazz.error" "type" "value")}
      {Lisp-Entry "jazz.dispatch-error" #f 52 9 52 28 ("%%get-category-name" "%%get-field-name" "jazz.error" "category" "value" "field")}}}
  {Lisp-File-Entry {File core "src" "core" "generic" "runtime" "_runtime.scm"} 1238328024
    {Lisp-Entry "core.generic.runtime" #f 37 18 37 38 ()}}
  {Lisp-File-Entry {File core "src" "core" "class" "runtime" "_runtime.scm"} 1238328024
    {Lisp-Entry "core.class.runtime" #f 37 18 37 36 ()}}
  {Lisp-File-Entry {File core "src" "core" "base" "runtime" "_runtime.scm"} 1238328024
    {Lisp-Entry "core.base.runtime" #f 37 18 37 35 ()}})
"_syntax"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "_syntax.scm"} 1238328024
    {Lisp-Entry "core.library.syntax" #f 37 18 37 37 ()}}
  {Lisp-File-Entry {File core "src" "core" "generic" "syntax" "_syntax.scm"} 1238328024
    {Lisp-Entry "core.generic.syntax" #f 37 18 37 37 ()}}
  {Lisp-File-Entry {File core "src" "core" "class" "syntax" "_syntax.scm"} 1238328024
    {Lisp-Entry "core.class.syntax" #f 37 18 37 35 ()}}
  {Lisp-File-Entry {File core "src" "core" "base" "syntax" "_syntax.scm"} 1238328024
    {Lisp-Entry "core.base.syntax" #f 37 18 37 34 ()}})
"autoload"
 ({Lisp-File-Entry {File core "src" "core" "library" "runtime" "autoload.scm"} 1238328024
    {Lisp-Entry "core.library.runtime.autoload" #f 41 18 41 47 ()
      {Lisp-Entry "jazz.Autoloads" #f 44 8 44 22 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-autoloads" #f 48 9 48 27 ("jazz.Autoloads")}
      {Lisp-Entry "jazz.get-autoload" #f 52 9 52 26 ("jazz.Autoloads" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-autoload" #f 56 9 56 26 ("%%cons" "jazz.Autoloads" "%%table-set!" "loader" "module-name" "name")}
      {Lisp-Entry "jazz.require-autoload" #f 60 9 60 30 ("jazz.error" "jazz.get-autoload" "or" "name")}
      {Lisp-Entry "jazz.register-autoload" #f 65 9 65 31 ("jazz.register-package-autoload" "jazz.requested-module-resource" "%%resource-package" "package" "jazz.error" "jazz.set-autoload" "%%car" "%%eq?" "%%not" "or" "if" "jazz.get-autoload" "actual" "let" "loader" "module-name" "name")}
      {Lisp-Entry "jazz.autoload" #f 74 9 74 22 ("%%cdr" "jazz.require-autoload" "autoload-info" "let" "name")}
      {Lisp-Entry "jazz.autoreload" #f 79 9 79 24 ("%%cdr" "%%car" "jazz.reload-module" "jazz.require-autoload" "autoload-info" "let" "name")}}})
"boolean"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "boolean.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.boolean" #f 37 18 37 43 ()
      {Lisp-Entry "jazz.boolean" #f 40 9 40 21 ("%%boolean" "expr")}
      {Lisp-Entry "jazz.not-null?" #f 44 9 44 23 ("%%not-null?" "expr")}}})
"class"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "class.scm"} 1238328024
    {Lisp-Entry "core.class.syntax.class" #f 37 18 37 41 ()
      {Lisp-Entry "jazz.category-name" #f 40 8 40 26 ("jazz.object-size")}
      {Lisp-Entry "jazz.category-fields" #f 43 8 43 28 ("1" "jazz.category-name" "%%fx+")}
      {Lisp-Entry "jazz.category-virtual-size" #f 46 8 46 34 ("1" "jazz.category-fields" "%%fx+")}
      {Lisp-Entry "jazz.category-ancestors" #f 49 8 49 31 ("1" "jazz.category-virtual-size" "%%fx+")}
      {Lisp-Entry "jazz.category-descendants" #f 52 8 52 33 ("1" "jazz.category-ancestors" "%%fx+")}
      {Lisp-Entry "jazz.class-ascendant" #f 55 8 55 28 ("1" "jazz.category-descendants" "%%fx+")}
      {Lisp-Entry "jazz.class-interfaces" #f 58 8 58 29 ("1" "jazz.class-ascendant" "%%fx+")}
      {Lisp-Entry "jazz.class-slots" #f 61 8 61 24 ("1" "jazz.class-interfaces" "%%fx+")}
      {Lisp-Entry "jazz.class-instance-size" #f 64 8 64 32 ("1" "jazz.class-slots" "%%fx+")}
      {Lisp-Entry "jazz.class-level" #f 67 8 67 24 ("1" "jazz.class-instance-size" "%%fx+")}
      {Lisp-Entry "jazz.class-dispatch-table" #f 70 8 70 33 ("1" "jazz.class-level" "%%fx+")}
      {Lisp-Entry "jazz.class-core-method-alist" #f 73 8 73 36 ("1" "jazz.class-dispatch-table" "%%fx+")}
      {Lisp-Entry "jazz.class-core-virtual-alist" #f 76 8 76 37 ("1" "jazz.class-core-method-alist" "%%fx+")}
      {Lisp-Entry "jazz.class-core-virtual-names" #f 79 8 79 37 ("1" "jazz.class-core-virtual-alist" "%%fx+")}
      {Lisp-Entry "jazz.class-core-vtable" #f 82 8 82 30 ("1" "jazz.class-core-virtual-names" "%%fx+")}
      {Lisp-Entry "jazz.class-class-table" #f 85 8 85 30 ("1" "jazz.class-core-vtable" "%%fx+")}
      {Lisp-Entry "jazz.class-interface-table" #f 88 8 88 34 ("1" "jazz.class-class-table" "%%fx+")}
      {Lisp-Entry "jazz.class-size" #f 92 8 92 23 ("1" "jazz.class-interface-table" "%%fx+")}
      {Lisp-Entry "%%get-category-name" #f 96 20 96 39 ("category")}
      {Lisp-Entry "%%get-category-fields" #f 100 20 100 41 ("category")}
      {Lisp-Entry "%%set-category-fields" #f 104 20 104 41 ("fields" "category")}
      {Lisp-Entry "%%get-category-virtual-size" #f 108 20 108 47 ("category")}
      {Lisp-Entry "%%set-category-virtual-size" #f 112 20 112 47 ("virtual-size" "category")}
      {Lisp-Entry "%%get-category-ancestors" #f 116 20 116 44 ("category")}
      {Lisp-Entry "%%set-category-ancestors" #f 120 20 120 44 ("ancestors" "category")}
      {Lisp-Entry "%%get-category-descendants" #f 124 20 124 46 ("category")}
      {Lisp-Entry "%%set-category-descendants" #f 128 20 128 46 ("descendants" "category")}
      {Lisp-Entry "%%get-class-ascendant" #f 132 20 132 41 ("class")}
      {Lisp-Entry "%%get-class-interfaces" #f 136 20 136 42 ("class")}
      {Lisp-Entry "%%get-class-slots" #f 140 20 140 37 ("class")}
      {Lisp-Entry "%%set-class-slots" #f 144 20 144 37 ("slots" "class")}
      {Lisp-Entry "%%get-class-instance-size" #f 148 20 148 45 ("class")}
      {Lisp-Entry "%%set-class-instance-size" #f 152 20 152 45 ("size" "class")}
      {Lisp-Entry "%%get-class-level" #f 156 20 156 37 ("class")}
      {Lisp-Entry "%%set-class-level" #f 160 20 160 37 ("size" "class")}
      {Lisp-Entry "%%get-class-dispatch-table" #f 164 20 164 46 ("class")}
      {Lisp-Entry "%%set-class-dispatch-table" #f 168 20 168 46 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-method-alist" #f 172 20 172 49 ("class")}
      {Lisp-Entry "%%set-class-core-method-alist" #f 176 20 176 49 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-virtual-alist" #f 180 20 180 50 ("class")}
      {Lisp-Entry "%%set-class-core-virtual-alist" #f 184 20 184 50 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-virtual-names" #f 188 20 188 50 ("class")}
      {Lisp-Entry "%%set-class-core-virtual-names" #f 192 20 192 50 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-vtable" #f 196 20 196 43 ("class")}
      {Lisp-Entry "%%set-class-core-vtable" #f 200 20 200 43 ("vtable" "class")}
      {Lisp-Entry "%%get-class-class-table" #f 204 20 204 43 ("class")}
      {Lisp-Entry "%%set-class-class-table" #f 208 20 208 43 ("vtable" "class")}
      {Lisp-Entry "%%get-class-interface-table" #f 212 20 212 47 ("class")}
      {Lisp-Entry "%%set-class-interface-table" #f 216 20 216 47 ("vtable" "class")}
      {Lisp-Entry "%%get-object-class" #f 220 20 220 38 ("object")}
      {Lisp-Entry "%%set-object-class" #f 224 20 224 38 ("class" "object")}
      {Lisp-Entry "%%final-dispatch" #f 228 20 228 36 ("implementation" "object")}
      {Lisp-Entry "%%class-dispatch" #f 232 20 232 36 ("implementation-rank" "class-level" "object")}
      {Lisp-Entry "%%interface-dispatch" #f 236 20 236 40 ("implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "%%class-native-dispatch" #f 240 20 240 43 ("implementation-rank" "class-level" "object")}
      {Lisp-Entry "%%interface-native-dispatch" #f 244 20 244 47 ("implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "%%c-class-of" #f 250 24 250 36 ("obj")}
      {Lisp-Entry "%%class-of" #f 293 24 293 34 ("jazz.i-class-of" "%%get-object-class" "%%object?" "if" "else" ",symbol" "%%c-class-of" "compile" "jazz.walk-for" "case" "symbol" "lambda" "jazz.with-uniqueness" "obj")}
      {Lisp-Entry "%%i-class-of-impl" #f 304 24 304 41 ("jazz.class-of-native" "%%get-object-class" "%%object?" "if" "else" ",var" "%%c-class-of" "compile" "jazz.walk-for" "case" "var")}
      {Lisp-Entry "%%class-of-impl" #f 313 24 313 39 ("jazz.error" ",var" "%%class-of" "or" "jazz.debug-user?" "if" "var")}
      {Lisp-Entry "%%class-of" #f 320 24 320 34 ("jazz.class-of-native" "%%get-object-class" ",symbol" "%%object?" "if" "symbol" "lambda" "jazz.with-uniqueness" "obj")}}})
"classes"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "classes.scm"} 1246913880
    {Lisp-Entry "core.library.syntax.classes" #f 37 18 37 45 ()
      {Lisp-Entry "jazz.Walk-Binding" #f 45 19 45 36 ("jazz.Object-Class" "jazz.Type")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Binding") 49 22 49 46 ("symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Walk-Binding") 50 22 50 50 ()}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Walk-Binding") 51 22 51 49 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Walk-Binding") 52 22 52 53 ("arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Walk-Binding") 53 22 53 44 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Walk-Binding") 54 22 54 52 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Walk-Binding") 55 22 55 59 ("source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Walk-Binding") 56 22 56 51 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Walk-Binding") 57 22 57 50 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Walk-Binding") 58 22 58 49 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" ("jazz.Walk-Binding") 59 22 59 49 ("form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Walk-Binding") 60 22 60 51 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Walk-Binding") 61 22 61 51 ("form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Lexical-Binding" #f 69 19 69 39 ("%%get-lexical-binding-type" "type" "%%get-lexical-binding-name" "name" "jazz.Object-Class" "jazz.Walk-Binding")}
      {Lisp-Entry "jazz.Declaration" #f 79 19 79 35 ("%%set-declaration-source" "%%get-declaration-source" "source" "%%set-declaration-locator" "%%get-declaration-locator" "locator" "%%set-declaration-parent" "%%get-declaration-parent" "parent" "%%set-declaration-toplevel" "%%get-declaration-toplevel" "toplevel" "%%get-declaration-attributes" "attributes" "%%get-declaration-compatibility" "compatibility" "%%get-declaration-access" "access" "jazz.Object-Class" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.resolve-declaration" ("jazz.Declaration") 89 22 89 46 ()}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Declaration") 90 22 90 45 ("external?" "symbol")}
      {Lisp-Entry "jazz.update-declaration" ("jazz.Declaration") 91 22 91 45 ("new-declaration")}
      {Lisp-Entry "jazz.get-declaration-inclusions" ("jazz.Declaration") 92 22 92 53 ()}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Declaration") 93 22 93 43 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.Declaration") 94 22 94 56 ()}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Declaration") 95 22 95 43 ("s" "k" "f")}
      {Lisp-Entry "jazz.Declaration-Reference" #f 103 19 103 45 ("%%set-declaration-reference-declaration" "%%get-declaration-reference-declaration" "declaration" "%%get-declaration-reference-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Declaration-Reference") 108 22 108 44 ("library-declaration")}
      {Lisp-Entry "jazz.Library-Reference" #f 116 19 116 41 ("jazz.allocate-library-reference" "jazz.Object-Class" "declaration" "name" "jazz.Declaration-Reference")}
      {Lisp-Entry "jazz.Export-Reference" #f 125 19 125 40 ("%%get-export-reference-library-reference" "library-reference" "jazz.allocate-export-reference" "jazz.Object-Class" "declaration" "name" "jazz.Declaration-Reference")}
      {Lisp-Entry "jazz.Autoload-Reference" #f 134 19 134 42 ("jazz.allocate-autoload-reference" "jazz.Object-Class" "library-reference" "declaration" "name" "jazz.Export-Reference")}
      {Lisp-Entry "jazz.Module-Declaration" #f 143 19 143 42 ("%%get-module-declaration-requires" "requires" "jazz.allocate-module-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Namespace-Declaration" #f 152 19 152 45 ("%%set-namespace-declaration-body" "%%get-namespace-declaration-body" "body" "%%set-namespace-declaration-children" "%%get-namespace-declaration-children" "children" "%%get-namespace-declaration-children-lookup" "children-lookup" "%%get-namespace-declaration-lookups" "lookups" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "%%get-access-lookup" #f 159 20 159 39 ("access" "namespace-declaration")}
      {Lisp-Entry "jazz.Library-Declaration" #f 168 19 168 43 ("%%set-library-declaration-autoloads" "%%get-library-declaration-autoloads" "autoloads" "%%set-library-declaration-inclusions" "%%get-library-declaration-inclusions" "inclusions" "%%set-library-declaration-references" "%%get-library-declaration-references" "references" "%%set-library-declaration-variables" "%%get-library-declaration-variables" "variables" "%%set-library-declaration-literals" "%%get-library-declaration-literals" "literals" "%%set-library-declaration-proclaims" "%%get-library-declaration-proclaims" "proclaims" "%%set-library-declaration-imports" "%%get-library-declaration-imports" "imports" "%%set-library-declaration-exports" "%%get-library-declaration-exports" "exports" "%%set-library-declaration-requires" "%%get-library-declaration-requires" "requires" "%%get-library-declaration-dialect-invoice" "dialect-invoice" "%%get-library-declaration-dialect-name" "dialect-name" "jazz.allocate-library-declaration" "jazz.Object-Class" "body" "children" "children-lookup" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Namespace-Declaration")}
      {Lisp-Entry "jazz.Library-Invoice" #f 187 19 187 39 ("%%get-library-invoice-rename" "rename" "%%get-library-invoice-prefix" "prefix" "%%get-library-invoice-except" "except" "%%get-library-invoice-only" "only" "%%get-library-invoice-version" "version" "%%get-library-invoice-phase" "phase" "%%get-library-invoice-library" "library" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Export-Invoice" #f 202 19 202 38 ("%%get-export-invoice-autoload" "autoload" "jazz.allocate-export-invoice" "jazz.Object-Class" "rename" "prefix" "except" "only" "version" "phase" "library" "jazz.Library-Invoice")}
      {Lisp-Entry "jazz.Import-Invoice" #f 211 19 211 38 ("jazz.allocate-import-invoice" "jazz.Object-Class" "rename" "prefix" "except" "only" "version" "phase" "library" "jazz.Library-Invoice")}
      {Lisp-Entry "jazz.Export-Declaration" #f 220 19 220 42 ("%%get-export-declaration-symbol" "symbol" "jazz.allocate-export-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Autoload-Declaration" #f 229 19 229 44 ("%%set-autoload-declaration-declaration" "%%get-autoload-declaration-declaration" "declaration" "%%get-autoload-declaration-exported-library" "exported-library" "%%get-autoload-declaration-library" "library" "jazz.allocate-autoload-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Macro-Declaration" #f 240 19 240 41 ("%%set-macro-declaration-body" "%%get-macro-declaration-body" "body" "%%set-macro-declaration-signature" "%%get-macro-declaration-signature" "signature" "jazz.allocate-macro-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Syntax-Declaration" #f 250 19 250 42 ("%%set-syntax-declaration-body" "%%get-syntax-declaration-body" "body" "%%set-syntax-declaration-signature" "%%get-syntax-declaration-signature" "signature" "jazz.allocate-syntax-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Void-Class" #f 260 19 260 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Void" #f 264 19 264 28 ("jazz.Void-Class" "jazz.Type")}
      {Lisp-Entry "jazz.Opt-Type" #f 273 19 273 32 ("%%get-opt-type-type" "type" "jazz.allocate-opt-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Key-Type" #f 282 19 282 32 ("%%get-key-type-type" "type" "%%get-key-type-key" "key" "jazz.allocate-key-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Rest-Type" #f 292 19 292 33 ("%%get-rest-type-type" "type" "jazz.allocate-rest-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Function-Type" #f 301 19 301 37 ("%%get-function-type-result" "result" "%%get-function-type-rest" "rest" "%%get-function-type-named" "named" "%%get-function-type-optional" "optional" "%%get-function-type-positional" "positional" "%%get-function-type-mandatory" "mandatory" "jazz.allocate-function-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Category-Type" #f 315 19 315 37 ("%%get-category-type-declaration" "declaration" "jazz.allocate-category-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Values-Type" #f 324 19 324 35 ("%%get-values-type-types" "types" "jazz.allocate-values-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Restriction-Type" #f 333 19 333 40 ("%%get-restriction-type-type" "type" "%%get-restriction-type-base" "base" "jazz.allocate-restriction-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Complement-Type" #f 343 19 343 39 ("%%get-complement-type-type" "type" "jazz.allocate-complement-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Union-Type" #f 352 19 352 34 ("%%get-union-type-types" "types" "jazz.allocate-union-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Template-Type" #f 361 19 361 37 ("%%get-template-type-types" "types" "%%get-template-type-class" "class" "jazz.allocate-template-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Nillable-Type" #f 371 19 371 37 ("%%get-nillable-type-type" "type" "jazz.allocate-nillable-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Any-Class" #f 380 19 380 33 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Any" #f 384 19 384 27 ("jazz.Any-Class" "jazz.Type")}
      {Lisp-Entry "jazz.C-Type-Declaration" #f 393 19 393 42 ("%%get-c-type-declaration-declare" "declare" "%%get-c-type-declaration-scheme-to-c" "scheme-to-c" "%%get-c-type-declaration-c-to-scheme" "c-to-scheme" "%%get-c-type-declaration-inclusions" "inclusions" "%%set-c-type-declaration-pointer-types" "%%get-c-type-declaration-pointer-types" "pointer-types" "%%get-c-type-declaration-base-type" "base-type" "%%get-c-type-declaration-expansion" "expansion" "%%get-c-type-declaration-kind" "kind" "jazz.allocate-c-type-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.C-Definition-Declaration" #f 409 19 409 48 ("%%set-c-definition-declaration-body" "%%get-c-definition-declaration-body" "body" "%%get-c-definition-declaration-scope" "scope" "%%get-c-definition-declaration-c-name" "c-name" "%%get-c-definition-declaration-result-type" "result-type" "%%get-c-definition-declaration-parameter-types" "parameter-types" "%%set-c-definition-declaration-signature" "%%get-c-definition-declaration-signature" "signature" "jazz.allocate-c-definition-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Walker" #f 423 19 423 30 ("%%set-walker-errors" "%%get-walker-errors" "errors" "%%set-walker-warnings" "%%get-walker-warnings" "warnings" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Walker") 428 22 428 45 ()}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Walker") 429 22 429 43 ("form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-access" ("jazz.Walker") 430 22 430 42 ("referenced-declaration" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-reference" ("jazz.Walker") 431 22 431 46 ("symbol" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Walker") 432 22 432 49 ("value" "symbol" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" ("jazz.Walker") 433 22 433 47 ("symbol" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Walker") 434 22 434 38 ("symbol" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Walker") 435 22 435 36 ("form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Walker") 436 22 436 44 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" ("jazz.Walker") 437 22 437 45 ("arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.Walk-Context" #f 445 19 445 36 ("%%get-walk-context-pathname" "pathname" "%%get-walk-context-locator" "locator" "%%get-walk-context-policy" "policy" "jazz.allocate-walk-context" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Location" #f 456 19 456 37 ("%%get-walk-location-locat" "locat" "%%get-walk-location-declaration-locator" "declaration-locator" "%%get-walk-location-module-locator" "module-locator" "jazz.allocate-walk-location" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Problem" #f 467 19 467 36 ("%%get-walk-problem-location" "location" "jazz.Object-Class" "message" "jazz.Error")}
      {Lisp-Entry "jazz.Walk-Problems" #f 476 19 476 37 ("%%get-walk-problems-errors" "errors" "%%get-walk-problems-warnings" "warnings" "jazz.allocate-walk-problems" "jazz.Object-Class" "message" "jazz.Error")}
      {Lisp-Entry "jazz.Walk-Warning" #f 486 19 486 36 ("jazz.allocate-walk-warning" "jazz.Object-Class" "location" "message" "jazz.Walk-Problem")}
      {Lisp-Entry "jazz.Walk-Error" #f 495 19 495 34 ("jazz.allocate-walk-error" "jazz.Object-Class" "location" "message" "jazz.Walk-Problem")}
      {Lisp-Entry "jazz.Unresolved-Error" #f 504 19 504 40 ("%%get-unresolved-error-symbol" "symbol" "jazz.allocate-unresolved-error" "jazz.Object-Class" "location" "message" "jazz.Walk-Error")}
      {Lisp-Entry "jazz.Walk-Frame" #f 513 19 513 34 ("%%get-walk-frame-bindings" "bindings" "jazz.allocate-walk-frame" "jazz.Object-Class" "jazz.Walk-Binding")}
      {Lisp-Entry "jazz.Signature" #f 522 19 522 33 ("%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "%%get-signature-mandatory" "mandatory" "jazz.allocate-signature" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Symbol-Binding" #f 535 19 535 38 ("jazz.Object-Class" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Variable" #f 544 19 544 32 ("%%set-variable-reference-count" "%%get-variable-reference-count" "reference-count" "jazz.allocate-variable" "jazz.Object-Class" "type" "name" "jazz.Symbol-Binding")}
      {Lisp-Entry "jazz.NextMethod-Variable" #f 553 19 553 43 ("jazz.allocate-nextmethod-variable" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Variable")}
      {Lisp-Entry "jazz.Parameter" #f 562 19 562 33 ("jazz.allocate-parameter" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Variable")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Parameter") 566 22 566 41 ("environment" "declaration")}
      {Lisp-Entry "jazz.Dynamic-Parameter" #f 574 19 574 41 ("%%get-dynamic-parameter-class" "class" "jazz.allocate-dynamic-parameter" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Optional-Parameter" #f 583 19 583 42 ("%%set-optional-parameter-default" "%%get-optional-parameter-default" "default" "jazz.allocate-optional-parameter" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Named-Parameter" #f 592 19 592 39 ("%%set-named-parameter-default" "%%get-named-parameter-default" "default" "jazz.allocate-named-parameter" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Rest-Parameter" #f 601 19 601 38 ("jazz.allocate-rest-parameter" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Self-Binding" #f 610 19 610 36 ("jazz.allocate-self-binding" "jazz.Object-Class" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Dynamic-Self-Binding" #f 619 19 619 44 ("%%get-dynamic-self-binding-code" "code" "jazz.allocate-dynamic-self-binding" "jazz.Object-Class" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Macro-Symbol" #f 628 19 628 36 ("%%get-macro-symbol-setter" "setter" "%%get-macro-symbol-getter" "getter" "jazz.allocate-macro-symbol" "jazz.Object-Class" "type" "name" "jazz.Symbol-Binding")}
      {Lisp-Entry "jazz.Form-Binding" #f 638 19 638 36 ("jazz.Object-Class" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Special-Form" #f 647 19 647 36 ("%%get-special-form-walk" "walk" "jazz.allocate-special-form" "jazz.Object-Class" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Macro-Form" #f 656 19 656 34 ("%%get-macro-form-expander" "expander" "jazz.allocate-macro-form" "jazz.Object-Class" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Syntax-Form" #f 665 19 665 35 ("%%get-syntax-form-expander" "expander" "jazz.allocate-syntax-form" "jazz.Object-Class" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Annotated-Variable" #f 674 19 674 42 ("%%set-annotated-variable-type" "%%get-annotated-variable-type" "type" "%%get-annotated-variable-declared-type" "declared-type" "%%get-annotated-variable-variable" "variable" "jazz.allocate-annotated-variable" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Restricted-Binding" #f 685 19 685 42 ("%%get-restricted-binding-type" "type" "%%get-restricted-binding-binding" "binding" "jazz.allocate-restricted-binding" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Annotated-Frame" #f 695 19 695 39 ("%%get-annotated-frame-reset" "reset" "%%get-annotated-frame-variables" "variables" "jazz.allocate-annotated-frame" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Code" #f 705 19 705 28 ("%%get-code-source" "source" "%%get-code-type" "type" "%%get-code-form" "form" "jazz.allocate-code" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Access" #f 717 19 717 30 ("%%get-access-context" "context" "%%get-access-name" "name" "jazz.allocate-access" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Expression" #f 727 19 727 34 ("%%get-expression-source" "source" "%%get-expression-type" "type" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Expression") 732 22 732 42 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Expression") 733 22 733 36 ("environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Expression") 734 22 734 42 ("s" "k" "f")}
      {Lisp-Entry "jazz.Proclaim" #f 742 19 742 32 ("%%get-proclaim-clauses" "clauses" "jazz.allocate-proclaim" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Constant" #f 751 19 751 32 ("%%get-constant-expansion" "expansion" "jazz.allocate-constant" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Delay" #f 760 19 760 29 ("%%get-delay-expression" "expression" "jazz.allocate-delay" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Quasiquote" #f 769 19 769 34 ("%%get-quasiquote-form" "form" "jazz.allocate-quasiquote" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Reference" #f 778 19 778 33 ("%%get-reference-binding" "binding" "jazz.allocate-reference" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Assignment" #f 787 19 787 34 ("%%get-assignment-value" "value" "%%get-assignment-binding" "binding" "jazz.allocate-assignment" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Lambda" #f 797 19 797 30 ("%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "jazz.allocate-lambda" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Let" #f 807 19 807 27 ("%%get-let-body" "body" "%%get-let-bindings" "bindings" "jazz.allocate-let" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Named-Let" #f 817 19 817 33 ("%%get-named-let-variable" "variable" "jazz.allocate-named-let" "jazz.Object-Class" "body" "bindings" "source" "type" "jazz.Let")}
      {Lisp-Entry "jazz.Letstar" #f 826 19 826 31 ("%%get-letstar-body" "body" "%%get-letstar-bindings" "bindings" "jazz.allocate-letstar" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Letrec" #f 836 19 836 30 ("%%get-letrec-body" "body" "%%get-letrec-bindings" "bindings" "jazz.allocate-letrec" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Receive" #f 846 19 846 31 ("%%get-receive-body" "body" "%%get-receive-expression" "expression" "%%get-receive-variables" "variables" "jazz.allocate-receive" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Body" #f 857 19 857 28 ("%%get-body-expressions" "expressions" "%%get-body-internal-defines" "internal-defines" "jazz.allocate-body" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Internal-Define" #f 867 19 867 39 ("%%get-internal-define-value" "value" "%%get-internal-define-variable" "variable" "jazz.allocate-internal-define" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Begin" #f 877 19 877 29 ("%%get-begin-expressions" "expressions" "jazz.allocate-begin" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Do" #f 886 19 886 26 ("%%get-do-body" "body" "%%get-do-result" "result" "%%get-do-test" "test" "%%get-do-bindings" "bindings" "jazz.allocate-do" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Call" #f 898 19 898 28 ("%%get-call-arguments" "arguments" "%%get-call-operator" "operator" "jazz.allocate-call" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.If" #f 908 19 908 26 ("%%get-if-no" "no" "%%get-if-yes" "yes" "%%get-if-test" "test" "jazz.allocate-if" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Cond" #f 919 19 919 28 ("%%get-cond-clauses" "clauses" "jazz.allocate-cond" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Case" #f 928 19 928 28 ("%%get-case-clauses" "clauses" "%%get-case-target" "target" "jazz.allocate-case" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.And" #f 938 19 938 27 ("%%get-and-expressions" "expressions" "jazz.allocate-and" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Or" #f 947 19 947 26 ("%%get-or-expressions" "expressions" "jazz.allocate-or" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Declare" #f 956 19 956 31 ("%%get-declare-declarations" "declarations" "jazz.allocate-declare" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Include" #f 965 19 965 33 ("%%get-c-include-name" "name" "jazz.allocate-c-include" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Declare" #f 974 19 974 33 ("%%get-c-declare-code" "code" "jazz.allocate-c-declare" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Named-Declare-Declaration" #f 983 19 983 51 ("%%get-c-named-declare-declaration-code" "code" "jazz.allocate-c-named-declare-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.C-Initialize" #f 992 19 992 36 ("%%get-c-initialize-code" "code" "jazz.allocate-c-initialize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Function" #f 1001 19 1001 34 ("%%get-c-function-expansion" "expansion" "jazz.allocate-c-function" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Parameterize" #f 1010 19 1010 36 ("%%get-parameterize-body" "body" "%%get-parameterize-bindings" "bindings" "jazz.allocate-parameterize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Time-Special" #f 1020 19 1020 36 ("%%get-time-special-expression" "expression" "jazz.allocate-time" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Core-Dialect" #f 1029 19 1029 36 ("jazz.allocate-core-dialect" "jazz.Object-Class" "jazz.Dialect")}
      {Lisp-Entry "jazz.Core-Walker" #f 1038 19 1038 35 ("jazz.allocate-core-walker" "jazz.Object-Class" "errors" "warnings" "jazz.Walker")}}}
  {Lisp-File-Entry {File core "src" "core" "exception" "syntax" "classes.scm"} 1238328024
    {Lisp-Entry "core.exception.syntax.classes" #f 37 18 37 47 ()
      {Lisp-Entry "jazz.Exception" #f 45 19 45 33 ("jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Exception") 49 22 49 44 ()}
      {Lisp-Entry "jazz.get-message" ("jazz.Exception") 50 22 50 38 ()}
      {Lisp-Entry "jazz.get-detail" ("jazz.Exception") 51 22 51 37 ()}
      {Lisp-Entry "jazz.Exception-Detail" #f 59 19 59 40 ("%%get-exception-detail-children" "children" "%%get-exception-detail-location" "location" "%%get-exception-detail-title" "title" "%%get-exception-detail-icon" "icon" "jazz.allocate-exception-detail" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Error" #f 71 19 71 29 ("%%get-error-message" "message" "jazz.allocate-error" "jazz.Object-Class" "jazz.Exception")}}}
  {Lisp-File-Entry {File core "src" "core" "class" "syntax" "classes.scm"} 1238329747
    {Lisp-Entry "core.class.syntax.classes" #f 37 18 37 43 ()
      {Lisp-Entry "jazz.Object" #f 45 19 45 30 ()}
      {Lisp-Entry "jazz.print-object?" ("jazz.Object") 49 22 49 40 ()}
      {Lisp-Entry "jazz.print-object" ("jazz.Object") 50 22 50 39 ("detail" "output")}
      {Lisp-Entry "jazz.Type" #f 58 19 58 28 ("jazz.Object")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Type") 62 22 62 35 ("object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Type") 63 22 63 38 ("subtype")}
      {Lisp-Entry "jazz.category-type?" ("jazz.Type") 64 22 64 41 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Type") 65 22 65 41 ()}
      {Lisp-Entry "jazz.emit-type" ("jazz.Type") 66 22 66 36 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Type") 67 22 67 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Type") 68 22 68 37 ("environment" "source-declaration" "value")}
      {Lisp-Entry "%%subtype?" #f 71 20 71 30 ("type" "target")}
      {Lisp-Entry "%%subcategory?" #f 75 20 75 34 ("category" "target")}
      {Lisp-Entry "%%subclass?" #f 79 20 79 31 ("class" "target")}
      {Lisp-Entry "%%is?" #f 83 20 83 25 ("type" "object")}
      {Lisp-Entry "%%is-not?" #f 87 20 87 29 ("type" "object")}
      {Lisp-Entry "jazz.Category" #f 96 19 96 32 ("descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Type")}
      {Lisp-Entry "jazz.update-category" ("jazz.Category") 104 22 104 42 ()}
      {Lisp-Entry "jazz.Class" #f 112 19 112 29 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "jazz.allocate-class" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Category")}
      {Lisp-Entry "%%class-subtype?" #f 127 20 127 36 ("%%get-category-ancestors" "%%vector-ref" "%%eq?" ",trg" "%%fx>=" "and" ",cls" "%%get-class-level" "class-level" "let" "cls" "trg" "lambda" "jazz.with-uniqueness" "class" "target")}
      {Lisp-Entry "%%class-is?" #f 137 20 137 31 ("class" "object")}
      {Lisp-Entry "%%category-is?" #f 141 20 141 34 ("category" "object")}
      {Lisp-Entry "%%class?" #f 145 20 145 28 ("object")}
      {Lisp-Entry "%%object-class?" #f 149 20 149 35 ("object")}
      {Lisp-Entry "jazz.Object-Class" #f 158 19 158 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Boolean-Class" #f 167 19 167 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Char-Class" #f 168 19 168 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Numeric-Class" #f 169 19 169 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Number-Class" #f 170 19 170 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Numeric-Class")}
      {Lisp-Entry "jazz.Complex-Class" #f 171 19 171 37 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Number-Class")}
      {Lisp-Entry "jazz.Real-Class" #f 172 19 172 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Complex-Class")}
      {Lisp-Entry "jazz.Rational-Class" #f 173 19 173 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Real-Class")}
      {Lisp-Entry "jazz.Integer-Class" #f 174 19 174 37 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Rational-Class")}
      {Lisp-Entry "jazz.Fixnum-Class" #f 175 19 175 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Integer-Class")}
      {Lisp-Entry "jazz.Flonum-Class" #f 176 19 176 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Real-Class")}
      {Lisp-Entry "jazz.Sequence-Class" #f 177 19 177 38 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.List-Class" #f 178 19 178 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Null-Class" #f 179 19 179 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.List-Class")}
      {Lisp-Entry "jazz.Pair-Class" #f 180 19 180 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.List-Class")}
      {Lisp-Entry "jazz.String-Class" #f 181 19 181 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Vector-Class" #f 182 19 182 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U8Vector-Class" #f 183 19 183 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Port-Class" #f 184 19 184 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Continuation-Class" #f 185 19 185 42 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Procedure-Class" #f 186 19 186 39 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Symbol-Class" #f 187 19 187 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Keyword-Class" #f 188 19 188 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Table-Class" #f 189 19 189 35 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Thread-Class" #f 190 19 190 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Promise-Class" #f 191 19 191 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Foreign-Class" #f 192 19 192 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Values-Class" #f 193 19 193 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.EOF-Class" #f 194 19 194 33 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Unspecified-Class" #f 195 19 195 41 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Boolean" #f 198 19 198 31 ("jazz.Boolean-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Char" #f 199 19 199 28 ("jazz.Char-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Numeric" #f 200 19 200 31 ("jazz.Numeric-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Number" #f 201 19 201 30 ("jazz.Number-Class" "jazz.Numeric")}
      {Lisp-Entry "jazz.Complex" #f 202 19 202 31 ("jazz.Complex-Class" "jazz.Number")}
      {Lisp-Entry "jazz.Real" #f 203 19 203 28 ("jazz.Real-Class" "jazz.Complex")}
      {Lisp-Entry "jazz.Rational" #f 204 19 204 32 ("jazz.Rational-Class" "jazz.Real")}
      {Lisp-Entry "jazz.Integer" #f 205 19 205 31 ("jazz.Integer-Class" "jazz.Rational")}
      {Lisp-Entry "jazz.Fixnum" #f 206 19 206 30 ("jazz.Fixnum-Class" "jazz.Integer")}
      {Lisp-Entry "jazz.Flonum" #f 207 19 207 30 ("jazz.Flonum-Class" "jazz.Real")}
      {Lisp-Entry "jazz.Sequence" #f 208 19 208 32 ("jazz.Sequence-Class" "jazz.Object")}
      {Lisp-Entry "jazz.List" #f 209 19 209 28 ("jazz.List-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Null" #f 210 19 210 28 ("jazz.Null-Class" "jazz.List")}
      {Lisp-Entry "jazz.Pair" #f 211 19 211 28 ("jazz.Pair-Class" "jazz.List")}
      {Lisp-Entry "jazz.String" #f 212 19 212 30 ("jazz.String-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Vector" #f 213 19 213 30 ("jazz.Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U8Vector" #f 214 19 214 32 ("jazz.U8Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Port" #f 215 19 215 28 ("jazz.Port-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Continuation" #f 216 19 216 36 ("jazz.Continuation-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Procedure" #f 217 19 217 33 ("jazz.Procedure-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Symbol" #f 218 19 218 30 ("jazz.Symbol-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Keyword" #f 219 19 219 31 ("jazz.Keyword-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Table" #f 220 19 220 29 ("jazz.Table-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Thread" #f 221 19 221 30 ("jazz.Thread-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Promise" #f 222 19 222 31 ("jazz.Promise-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Foreign" #f 223 19 223 31 ("jazz.Foreign-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Values" #f 224 19 224 30 ("jazz.Values-Class" "jazz.Object")}
      {Lisp-Entry "jazz.EOF" #f 225 19 225 27 ("jazz.EOF-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Unspecified" #f 226 19 226 35 ("jazz.Unspecified-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Interface" #f 234 19 234 33 ("%%get-interface-rank" "rank" "%%get-interface-ascendants" "ascendants" "jazz.allocate-interface" "jazz.Object-Class" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Category")}
      {Lisp-Entry "jazz.Field" #f 244 19 244 29 ("%%get-field-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "%%get-category-field" #f 248 20 248 40 ("field-name" "category")}
      {Lisp-Entry "%%set-category-field" #f 252 20 252 40 ("field" "field-name" "category")}
      {Lisp-Entry "jazz.Slot" #f 261 19 261 28 ("%%get-slot-initialize" "initialize" "%%get-slot-offset" "offset" "jazz.allocate-slot" "jazz.Object-Class" "name" "jazz.Field")}
      {Lisp-Entry "jazz.Property" #f 271 19 271 32 ("%%get-property-setter" "setter" "%%get-property-getter" "getter" "jazz.allocate-property" "jazz.Object-Class" "initialize" "offset" "name" "jazz.Slot")}
      {Lisp-Entry "jazz.Method" #f 281 19 281 30 ("%%set-method-implementation-rank" "%%get-method-implementation-rank" "implementation-rank" "%%set-method-category-rank" "%%get-method-category-rank" "category-rank" "%%set-method-implementation-tree" "%%get-method-implementation-tree" "implementation-tree" "%%set-method-implementation" "%%get-method-implementation" "implementation" "%%set-method-dispatch-type" "%%get-method-dispatch-type" "dispatch-type" "jazz.allocate-method" "jazz.Object-Class" "name" "jazz.Field")}
      {Lisp-Entry "jazz.Method-Node" #f 294 19 294 35 ("%%set-method-node-children" "%%get-method-node-children" "children" "%%set-method-node-next-implementation" "%%get-method-node-next-implementation" "next-implementation" "%%set-method-node-next-node" "%%get-method-node-next-node" "next-node" "%%set-method-node-implementation" "%%get-method-node-implementation" "implementation" "%%set-method-node-category" "%%get-method-node-category" "category" "jazz.allocate-method-node" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Queue" #f 307 19 307 29 ("%%set-queue-current" "%%get-queue-current" "current" "%%set-queue-last-anchor" "%%get-queue-last-anchor" "last-anchor" "%%set-queue-last-list" "%%get-queue-last-list" "last-list" "%%set-queue-list" "%%get-queue-list" "list" "jazz.allocate-queue" "jazz.Object-Class" "jazz.Object")}}})
"define-class"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-class.scm"} 1238328024
    {Lisp-Entry "core.class.syntax.define-class" #f 37 18 37 48 ()
      {Lisp-Entry "jazz.define-class" #f 40 20 40 37 (",inherited-slot-names" "',inherited-slot-names" ",',inherited-slot-names" "',',inherited-slot-names" "jazz.validate-inherited-slots" "jazz.identifier-name" "jazz.set-core-class" ",instance-size" "',instance-size" ",',instance-size" ",slot-names" "',slot-names" ",',slot-names" "',',slot-names" ",ascendant-accessor" "',ascendant-accessor" ",',ascendant-accessor" "eq?" "test:" "%%make-table" "',',name" ",class-accessor" "',class-accessor" ",',class-accessor" "jazz.new-core-class" "',name" ",',name" "%%symbol->string" "%%string-append" "%%string->symbol" "jazz.object-size" "%%fx+" "jazz.naturals" "'%%object-set!" "%%object-set!" ",value" ",slot-setter" "'%%object-ref" ",rank" "%%object-ref" "jazz.expected-error" "jazz.object-of-class?" "%%core-assertion" ",object" ",slot-getter" "define" "value" "jazz.generate-symbol" "object" "%%cddr" "slot-setter" "%%cadr" "slot-getter" "%%car" "slot-name" "let" "rank" "slot" "map" "%%object" "'%%object" "%%list" ",@all-variables" "class" ",constructor" "jazz.define-macro" "%%null?" ",name" "jazz.define-variable" "jazz.debug-core?" "if" "begin" "instance-size" "all-variables" "slot-names" "ascendant-size" "ascendant-accessor" "class-accessor" "lambda" "jazz.parse-define-class" "slots" "constructor" "class-name" "inherited-slot-names" "ascendant-name" "name")
        {Lisp-Entry "jazz.parse-define-class" #f 41 11 41 34 ("jazz.object-size" "%%fx+" "instance-size" "all-length" "%%symbol->string" "jazz.generate-symbol" "slot-name" "lambda" "all-variables" "%%append" "all-slot-names" "car" "map" "slot-names" "%%length" "ascendant-size" "ascendant-accessor" "%%null?" "if" "class-accessor" "let*" "proc" "slots" "class-name" "inherited-slot-names" "ascendant-name")}}
      {Lisp-Entry "jazz.define-class-runtime" #f 97 20 97 45 ("name")}}})
"define-method"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-method.scm"} 1238328024
    {Lisp-Entry "core.class.syntax.define-method" #f 37 18 37 49 ()
      {Lisp-Entry "jazz.define-virtual" #f 40 20 40 39 ("jazz.expand-define-virtual" "%%car" "%%null?" "if" "bootstrap-type?" "let" "rest" "signature")}
      {Lisp-Entry "jazz.define-virtual-runtime" #f 45 20 45 47 ("jazz.expand-define-virtual-runtime" "signature")}
      {Lisp-Entry "jazz.define-method" #f 49 20 49 38 ("jazz.expand-define-method" "body" "signature")}}})
"define-method-expander"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "define-method-expander.scm"} 1238328024
    {Lisp-Entry "core.class.syntax.define-method-expander" #f 37 18 37 58 ()
      {Lisp-Entry "jazz.expand-define-virtual" #f 40 9 40 35 ("obj" "lambda" "jazz.with-uniqueness" ",rank-name" "',rank-name" "%%get-object-class" "'%%get-object-class" "%%get-class-core-vtable" "'%%get-class-core-vtable" "%%vector-ref" "'%%vector-ref" "',name" "jazz.format" "jazz.error" "'jazz.error" ",class-name" "',class-name" ",is-test" "',is-test" "list" "%%core-assertion" "'%%core-assertion" "%%list" "%%symbol?" ",@extra-parameters" ",object-parameter" ",name" "jazz.define-macro" "%%class-is?" "'%%class-is?" "jazz.bootstrap-type?" "'jazz.bootstrap-type?" "if" "is-test" "jazz.method-rank-name" "rank-name" "jazz.method-implementation-name" "implementation-name" "extra-parameters" "%%cadr" "object-parameter" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "bootstrap-type?" "signature")}
      {Lisp-Entry "jazz.expand-define-virtual-runtime" #f 63 9 63 43 (",name" "',name" ",class-name" "jazz.register-virtual-name" ",rank-name" "define" "jazz.method-rank-name" "rank-name" "jazz.method-implementation-name" "implementation-name" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "signature")}
      {Lisp-Entry "jazz.expand-define-method" #f 73 9 73 34 ("jazz.register-method" ",@body" ",@extra-parameters" ",object-parameter" "lambda" ",name" "',name" ",class-name" "jazz.find-nextmethod" "nextmethod" "let" ",implementation-name" "define" "begin" "jazz.method-implementation-name" "implementation-name" "extra-parameters" "%%cadr" "object-parameter" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "body" "signature")}
      {Lisp-Entry "jazz.method-implementation-name" #f 88 9 88 40 ("%%string-append" "%%string->symbol" "%%symbol->string" "jazz.split-string" "jazz.last" "let" "name" "class-name")}
      {Lisp-Entry "jazz.method-rank-name" #f 93 9 93 30 ("%%symbol->string" "%%string-append" "%%string->symbol" "implementation-name")}
      {Lisp-Entry "jazz.inherited-name?" #f 97 9 97 29 ("%%get-class-core-virtual-names" "%%memq" "and" "%%get-class-ascendant" "ascendant" "let" "method-name" "class")}
      {Lisp-Entry "jazz.register-virtual-name" #f 103 9 103 35 ("1" "%%length" "%%fx-" "%%list" "%%get-class-core-virtual-names" "%%append" "%%set-class-core-virtual-names" "method-name" "class")}
      {Lisp-Entry "jazz.register-method" #f 111 9 111 29 ("%%get-class-core-virtual-alist" "%%set-class-core-virtual-alist" "%%cons" "%%list" "%%get-class-core-method-alist" "%%append" "%%set-class-core-method-alist" "jazz.inherited-name?" "if" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.get-method-rank" #f 121 9 121 29 ("1" "%%fx+" "%%cdr" "%%car" "%%eq?" "if" "0" "rank" "%%get-class-core-virtual-names" "scan" "iter" "let" "method-name" "class")}
      {Lisp-Entry "jazz.get-method-implementation" #f 129 9 129 39 ("jazz.get-method-rank" "%%get-class-core-vtable" "%%vector-ref" "method-name" "class")}
      {Lisp-Entry "jazz.find-nextmethod" #f 134 9 134 29 ("jazz.error" "rest" "obj" "lambda" "%%get-class-ascendant" "jazz.get-method-implementation" "jazz.inherited-name?" "if" "method-name" "class")}}})
"dialect"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "dialect.scm"} 1238328024
    {Lisp-Entry "core.library.syntax.dialect" #f 37 18 37 45 ("jazz.Dialect" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Dialect" #f 40 27 40 39 ()}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Dialect") 43 30 43 47 ()}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Dialect") 44 30 44 49 ()}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Dialect") 47 21 47 38 ()}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Dialect") 51 21 51 40 ()}
      {Lisp-Entry "jazz.Dialects" #f 63 8 63 21 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-dialect" #f 67 9 67 25 ("jazz.Dialects" "%%table-ref" "name")}
      {Lisp-Entry "jazz.require-dialect" #f 71 9 71 29 ("jazz.error" "jazz.get-dialect" "or" "name")}
      {Lisp-Entry "jazz.register-dialect" #f 76 9 76 30 ("jazz.Dialects" "%%table-set!" "dialect" "name")}}})
"dialect-syntax"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "dialect-syntax.scm"} 1238328024
    {Lisp-Entry "core.library.syntax.dialect-syntax" #f 37 18 37 52 ()
      {Lisp-Entry "jazz.Dialect" #f 40 19 40 31 ("jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Dialect") 44 22 44 39 ()}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Dialect") 45 22 45 41 ()}}})
"error"
 ({Lisp-File-Entry {File core "src" "core" "exception" "runtime" "error.scm"} 1238328024
    {Lisp-Entry "core.exception.runtime.error" #f 37 18 37 46 ("jazz.raise-jazz-error" "jazz.error" "set!" "proper-tail-calls" "declare" "jazz.Error" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Error" #f 40 27 40 37 ()}
      {Lisp-Entry "jazz.new-error" #f 43 9 43 23 ("jazz.Error" "jazz.allocate-error" "message")}
      {Lisp-Entry "jazz.get-message" ("jazz.Error") 47 21 47 37 ("error" "%%get-error-message")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Error") 51 21 51 43 ("error" "%%get-error-message")}
      {Lisp-Entry "jazz.raise-jazz-error" #f 61 9 61 30 ("jazz.new-error" "raise" "jazz.format" "apply" "message" "let" "rest" "fmt-string")}}}
  {Lisp-File-Entry {File core "src" "core" "class" "syntax" "error.scm"} 1238328024
    {Lisp-Entry "core.class.syntax.error" #f 37 18 37 41 ()
      {Lisp-Entry "jazz.object-of-class?" #f 40 22 40 43 ()}
      {Lisp-Entry "jazz.not-object-error" #f 43 9 43 30 ("jazz.error" "obj")}
      {Lisp-Entry "jazz.outside-object-error" #f 47 9 47 34 ("jazz.error" "rnk" "obj")}
      {Lisp-Entry "jazz.expected-error" #f 51 9 51 28 ("jazz.error" "obj" "class")}}}
  {Lisp-File-Entry {File core "src" "core" "base" "runtime" "error.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.error" #f 37 18 37 41 ()
      {Lisp-Entry "jazz.unimplemented" #f 40 9 40 27 ("%%car" "jazz.error" "%%null?" "if" "rest")}}})
"exception"
 ({Lisp-File-Entry {File core "src" "core" "exception" "runtime" "exception.scm"} 1238328024
    {Lisp-Entry "core.exception.runtime.exception" #f 37 18 37 50 ("newline" "jazz.present-exception" "display" "begin" "%%is?" "%%object?" "and" "if" "port" "exc" "lambda" "set!" "##display-exception-hook" "previous-hook" "let" "jazz.Exception-Detail" "jazz.Exception" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Exception" #f 45 27 45 41 ()}
      {Lisp-Entry "jazz.print-object" ("jazz.Exception") 48 21 48 38 ("if" "jazz.object->serial" "jazz.format" "exception" "jazz.get-message" "message" "let" "detail" "output")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Exception") 56 30 56 52 ()}
      {Lisp-Entry "jazz.get-message" ("jazz.Exception") 57 30 57 46 ()}
      {Lisp-Entry "jazz.get-detail" ("jazz.Exception") 58 30 58 45 ()}
      {Lisp-Entry "jazz.present-exception" ("jazz.Exception") 61 21 61 43 ("get-output-string" "exception" "jazz.format" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.get-message" ("jazz.Exception") 66 21 66 37 ()}
      {Lisp-Entry "jazz.get-detail" ("jazz.Exception") 69 21 69 36 ()}
      {Lisp-Entry "jazz.Exception-Detail" #f 81 27 81 48 ()}
      {Lisp-Entry "jazz.new-exception-detail" #f 84 9 84 34 ("jazz.Exception-Detail" "jazz.allocate-exception-detail" "children" "location" "title" "icon")}
      {Lisp-Entry "jazz.exception-reason" #f 96 9 96 30 ("get-output-string" "jazz.display-exception" "open-output-string" "output" "let" "exc")}
      {Lisp-Entry "jazz.exception-detail" #f 102 9 102 30 ("jazz.get-detail" "jazz.Exception" "%%is?" "%%object?" "and" "if" "exc")}}}
  {Lisp-File-Entry {File core "src" "core" "base" "runtime" "exception.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.exception" #f 38 18 38 45 ()
      {Lisp-Entry "jazz.current-exception-handler" #f 43 12 43 42 ("current-exception-handler")}
      {Lisp-Entry "jazz.with-exception-handler" #f 46 13 46 40 ("continuation-return" "exc" "with-exception-handler" "return" "lambda" "continuation-capture" "thunk" "proc")}
      {Lisp-Entry "jazz.exception-reason" #f 54 13 54 34 ("jazz.format" "not" "if" "'arguments" "arguments" "'message" "message" "'location" "'exc" "condition-property-accessor" "location" "let" "exc")}
      {Lisp-Entry "jazz.current-exception-handler" #f 63 12 63 42 ("current-exception-handler")}
      {Lisp-Entry "jazz.with-exception-handler" #f 66 12 66 39 ("with-exception-handler")}
      {Lisp-Entry "jazz.with-exception-catcher" #f 69 12 69 39 ("with-exception-catcher")}
      {Lisp-Entry "jazz.display-exception" #f 72 12 72 34 ("display-exception")}
      {Lisp-Entry "jazz.display-continuation-backtrace" #f 75 12 75 47 ("display-continuation-backtrace")}
      {Lisp-Entry "jazz.raise" #f 78 13 78 23 ("raise" "obj")}}})
"expander"
 ({Lisp-File-Entry {File core "src" "core" "generic" "syntax" "expander.scm"} 1238328024
    {Lisp-Entry "core.generic.syntax.expander" #f 38 18 38 46 ()
      {Lisp-Entry "jazz.dynamic-parameter?" #f 41 9 41 32 ("%%cdr" "%%pair?" "and" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-type" #f 46 9 46 36 ("jazz.specifier->name" "jazz.specifier?" "if" "%%car" "type" "let" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-types" #f 53 9 53 37 ("%%cdr" "jazz.dynamic-parameter-type" "%%cons" "%%car" "jazz.dynamic-parameter?" "%%pair?" "and" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.dynamic-parameter-name" #f 62 9 62 36 ("%%cadr" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-names" #f 66 9 66 37 ("%%cdr" "jazz.dynamic-parameter-name" "%%cons" "%%car" "jazz.dynamic-parameter?" "%%pair?" "and" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.generic-parameters" #f 75 9 75 32 ("jazz.reverse!" "values" "else" "%%symbol?" "jazz.dynamic-parameter-name" "%%cons" "%%cdr" "jazz.dynamic-parameter?" "cond" "%%car" "parameter" "%%pair?" "if" "result" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.specific-parameters" #f 89 9 89 33 ("else" "%%cdr" "jazz.dynamic-parameter-name" "%%cons" "jazz.dynamic-parameter?" "cond" "%%car" "parameter" "%%pair?" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.expand-define-generic" #f 105 9 105 35 ("apply" "jazz.dynamic-parameter-names" ",parameter" "%%class-of" "parameter" "map" "list" "%%specific-dispatch" ",gensym-specific" "jazz.process-pending-specifics" "%%get-generic-pending-specifics" "%%not" "%%when" ",gensym-rest" ",@mandatory-parameters" ",@dynamic-signature" "%%list" "',generic-method-locator" "jazz.new-generic" "jazz.generic-reset" "jazz.global-value" ",gensym-generic" "',generic-locator" "jazz.global-variable?" ",generic-locator" ",@body" ",generic-method-locator" "jazz.error" ",formal-signature" "lambda" ",specific-implementation-locator" "define" "begin" "%%null?" "if" "gensym-rest" "let" "jazz.generic-parameters" "extra-parameters" "mandatory-parameters" "receive" "gensym-specific" "jazz.generate-symbol" "gensym-generic" "jazz.generic-object-locator" "generic-locator" "jazz.implementation-locator" "specific-implementation-locator" "jazz.specific-parameters" "formal-signature" "jazz.dynamic-parameter-types" "dynamic-signature" "%%cdr" "parameters" "%%car" "generic-method-locator" "let*" "body" "signature")}
      {Lisp-Entry "jazz.generic-object-locator" #f 141 9 141 36 ("%%symbol->string" "%%string-append" "%%string->symbol" "locator")}
      {Lisp-Entry "jazz.expand-define-specific" #f 150 9 150 36 (",generic-locator" "jazz.register-specific" "%%set-specific-implementation" ",@body" ",@nextmethod-bindings" "let" ",formal-signature" ",gensym-lambda" ",@dynamic-signature" "%%list" "lambda" "jazz.new-specific" ",specific-implementation-locator" "define" ",gensym-specific" "%%get-specific-ancestor-specifics" "%%get-specific-implementation" "nextmethod" "list" "if" "nextmethod-bindings" "gensym-lambda" "jazz.generate-symbol" "gensym-specific" "jazz.generic-object-locator" "generic-locator" "jazz.implementation-locator" "specific-implementation-locator" "jazz.specific-parameters" "formal-signature" "jazz.dynamic-parameter-types" "dynamic-signature" "%%cdr" "parameters" "%%car" "generic-method-locator" "root" "'root" "%%eq?" "root?" "let*" "body" "modifier" "signature")}
      {Lisp-Entry "jazz.implementation-locator" #f 171 9 171 36 ("jazz.join-strings" "%%string-append" "%%string->symbol" "car" "%%pair?" "if" "symbol->string" "class/call" "lambda" "map" "dynamic-signature-strings" "%%symbol->string" "generic-string" "let" "dynamic-signature" "generic-locator")}}})
"generic"
 ({Lisp-File-Entry {File core "src" "core" "generic" "syntax" "generic.scm"} 1238328024
    {Lisp-Entry "core.generic.syntax.generic" #f 43 18 43 45 ("jazz.Generic" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Generic" #f 46 19 46 31 ("%%set-generic-pending-specifics" "%%get-generic-pending-specifics" "pending-specifics" "%%set-generic-root-specific" "%%get-generic-root-specific" "root-specific" "%%get-generic-name" "name" "%%get-generic-locator" "locator" "jazz.allocate-generic" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Generic" #f 53 27 53 39 ()}
      {Lisp-Entry "jazz.define-generic" #f 56 20 56 39 ("jazz.expand-define-generic" "apply" "rest")}
      {Lisp-Entry "%%specific-dispatch" #f 60 20 60 39 ("dynamic-classes" "generic")}}}
  {Lisp-File-Entry {File core "src" "core" "generic" "runtime" "generic.scm"} 1238328024
    {Lisp-Entry "core.generic.runtime.generic" #f 38 18 38 46 ()
      {Lisp-Entry "jazz.new-generic" #f 41 9 41 25 ("jazz.generic-make-root" "jazz.Generic" "jazz.allocate-generic" "generic" "jazz.identifier-name" "name" "let*" "root-proc" "dynamic-signature" "locator")}
      {Lisp-Entry "jazz.generic-reset" #f 48 9 48 27 ("%%get-generic-root-specific" "%%get-specific-dynamic-signature" "jazz.generic-make-root" "root-proc" "generic")}
      {Lisp-Entry "jazz.generic-make-root" #f 52 9 52 31 ("%%get-generic-pending-specifics" "%%cons" "%%set-generic-pending-specifics" "%%set-generic-root-specific" "jazz.invalid-generic-call" "apply" "rest" "lambda" "or" "jazz.new-specific" "root-specific" "let" "root-proc" "dynamic-signature" "generic")}
      {Lisp-Entry "jazz.invalid-generic-call" #f 58 9 58 34 ("jazz.generic-error" "%%cdr" "%%car" "%%class-of" "%%cons" "%%pair?" "and" "if" "%%get-generic-root-specific" "%%get-specific-dynamic-signature" "signature" "iter" "dynamic-parameters" "let" "rest" "generic")}
      {Lisp-Entry "jazz.generic-error" #f 68 9 68 27 ("%%cons" "jazz.error" "%%get-generic-root-specific" "%%get-specific-dynamic-signature" "root-signature" "%%get-generic-name" "name" "let" "signature" "generic")}
      {Lisp-Entry "jazz.register-specific" #f 80 9 80 31 ("%%get-generic-pending-specifics" "%%cons" "%%set-generic-pending-specifics" "specific" "generic")}
      {Lisp-Entry "jazz.process-pending-specifics" #f 89 9 89 39 ("%%set-generic-pending-specifics" "%%get-generic-pending-specifics" "reverse" "jazz.insert/replace-specific" "specific" "lambda" "for-each" "%%get-generic-root-specific" "jazz.resolve-signature" "generic")}
      {Lisp-Entry "jazz.resolve-signature" #f 99 9 99 31 ("%%set-specific-dynamic-signature" "%%procedure?" "%%when" "%%get-specific-dynamic-signature" "signature/proc" "let" "specific")}
      {Lisp-Entry "jazz.insert/replace-specific" #f 105 9 105 37 ("%%set-car!" "iter" "%%set-generic-root-specific" "%%get-generic-root-specific" "perfect-match" "%%set-specific-descendant-specifics" "set!" "%%memq" "%%when" "else" "jazz.remove!" "jazz.specific-better?" "%%cdr" "%%cons" "%%get-specific-ancestor-specifics" "%%car" "best" "brothers" "brother-partition" "cdr" "if" "descendants" "assq" "descendant-partition" "assv" "jazz.dynamic-signature-compare" "ordered" "'ordered" "%%eq?" "descendant-signature" "descendant" "%%get-specific-descendant-specifics" "jazz.partition" "partition" "ancestor-signature" "ancestor" "lambda" "for-each" "%%set-specific-ancestor-specifics" "descendant-specifics" "put-best-first" "ancestors" "let" "%%pair?" "jazz.generic-error" "%%not" "cond" "jazz.gather-dynamic-signature-ancestors" "matches" "%%get-specific-dynamic-signature" "dynamic-signature" "let*" "specific" "generic")
        {Lisp-Entry "put-best-first" #f 106 11 106 25 ("%%cons" "jazz.specific-better?" "specific" "%%pair?" "if" "others" "%%car" "best" "%%cdr" "scan" "iter" "let" "specifics")}}
      {Lisp-Entry "jazz.gather-dynamic-signature-ancestors" #f 180 9 180 48 ("%%null?" "else" "%%cons" "%%memq" "%%cdr" "%%get-specific-descendant-specifics" "found-in-descendants" "ordered" "set!" "equal" "%%get-specific-dynamic-signature" "jazz.dynamic-signature-compare" "case" "%%car" "specific" "%%pair?" "if" "partial-matches" "%%get-generic-root-specific" "list" "specifics" "iter" "or" "perfect-match" "let" "dynamic-signature" "generic")}
      {Lisp-Entry "jazz.dynamic-signature-compare" #f 206 9 206 39 ("else" "ordered" "'ordered" "reverse-ordered" "'reverse-ordered" "jazz.subcategory?" "%%cdr" "%%car" "%%eq?" "cond" "unordered" "'unordered" "and" "null?" "or" "if" "equal" "'equal" "match" "iter" "let" "ancestor-signature" "descendant-signature")}
      {Lisp-Entry "jazz.dynamic-signature-equal?" #f 228 9 228 38 ("%%cdr" "%%car" "%%eq?" "and" "null?" "or" "if" "iter" "let" "dynamic-signature2" "dynamic-signature1")}
      {Lisp-Entry "jazz.specific-better?" #f 237 9 237 30 ("%%cdr" "%%car" "%%get-class-level" ">" "or" "signature2" "%%get-specific-dynamic-signature" "signature1" "iter" "let" "specific2" "specific1")}
      {Lisp-Entry "jazz.display-tree" #f 249 9 249 26 ("1" "+" "newline" "%%get-specific-descendant-specifics" "%%get-specific-ancestor-specifics" "%%get-specific-dynamic-signature" "%%list" "write" "specific" "lambda" "for-each" "0" "level" "%%get-generic-root-specific" "list" "specifics" "iterate" "let" "jazz.process-pending-specifics" "%%get-generic-pending-specifics" "%%null?" "%%not" "%%when" "generic")}
      {Lisp-Entry "jazz.dispatch-from-root" #f 274 9 274 32 ("else" "%%car" "%%pair?" "jazz.generic-error" "%%not" "cond" "jazz.gather-dynamic-signature-ancestors" "matches" "let" "dynamic-classes" "generic")}}})
"initialize"
 ({Lisp-File-Entry {File core "src" "core" "library" "initialize.scm"} 1238328024
    {Lisp-Entry "core.library.initialize" #f 37 18 37 41 ("jazz.initialize-primitive-patterns")}})
"keyword"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "keyword.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.keyword" #f 37 18 37 43 ()
      {Lisp-Entry "jazz.keyword?" #f 42 13 42 26 ("keyword?" "obj")}
      {Lisp-Entry "jazz.keyword->string" #f 45 13 45 33 ("keyword->string" "keyword")}
      {Lisp-Entry "jazz.string->keyword" #f 48 13 48 33 ("string->keyword" "string")}
      {Lisp-Entry "jazz.keyword?" #f 52 13 52 26 ("keyword?" "obj")}
      {Lisp-Entry "jazz.keyword->string" #f 55 13 55 33 ("keyword->string" "keyword")}
      {Lisp-Entry "jazz.string->keyword" #f 58 13 58 33 ("string->keyword" "string")}
      {Lisp-Entry "jazz.keyword?" #f 62 12 62 25 ("1" "%%string-length" "%%fx-" "%%string-ref" "%%eqv?" "%%symbol->string" "str" "let" "%%symbol?" "and" "obj")}
      {Lisp-Entry "jazz.keyword->string" #f 68 12 68 32 ("1" "%%length" "%%fx-" "0" "%%substring" "%%symbol->string" "str" "let" "keyword")}
      {Lisp-Entry "jazz.string->keyword" #f 73 12 73 32 ("%%string-append" "%%string->symbol" "string")}}})
"library"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "library.scm"} 1238328024
    {Lisp-Entry "core.library.syntax.library" #f 37 18 37 45 ()
      {Lisp-Entry "library" #f 40 20 40 27 ("jazz.source-code" "%%cdr" "jazz.expand-library" "form-src" "lambda")}}})
"list"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "list.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.list" #f 37 18 37 40 ()
      {Lisp-Entry "jazz.find-in" #f 40 9 40 21 ("%%cdr" "%%car" "or" "%%null?" "if" "scan" "iter" "let" "lst" "proc")}
      {Lisp-Entry "jazz.find-if" #f 48 9 48 21 ("%%cdr" "%%car" "value" "%%null?" "if" "scan" "iter" "let" "lst" "predicate")}
      {Lisp-Entry "jazz.getprop" #f 58 9 58 21 ("%%cddr" "else" "%%car" "%%eqv?" "%%null?" "cond" "scan" "iter" "let" "target" "plist")}
      {Lisp-Entry "jazz.getf" #f 68 9 68 18 ("%%cadr" "if" "jazz.getprop" "pair" "let" "not-found" "#!key" "target" "plist")}
      {Lisp-Entry "jazz.reverse!" #f 75 8 75 21 ("reverse")}
      {Lisp-Entry "jazz.list-copy" #f 79 9 79 23 ("obj" "lambda" "map" "lst")}
      {Lisp-Entry "jazz.last-tail" #f 83 9 83 23 ("else" "%%null?" "cond" "%%cdr" "tail" "scan" "iter" "let" "%%pair?" "if" "lst")}
      {Lisp-Entry "jazz.last-pair" #f 96 9 96 23 ("%%cdr" "tail" "scan" "iter" "let" "%%pair?" "if" "lst")}
      {Lisp-Entry "jazz.last" #f 106 9 106 18 ("jazz.last-pair" "%%car" "lst")}
      {Lisp-Entry "jazz.remove-duplicates" #f 110 9 110 31 ("%%cons" "%%memv" "%%cdr" "result" "%%car" "value" "%%not-null?" "if" "scan" "iter" "let" "lst")}
      {Lisp-Entry "jazz.partition" #f 121 9 121 23 ("%%set-cdr!" "begin" "%%list" "%%cons" "%%not" "set" "category" "%%car" "element" "%%cdr" "partition" "let*" "%%null?" "if" "scan" "iter" "let" "associate" "key" "lst")}
      {Lisp-Entry "jazz.rassq" #f 136 9 136 19 ("%%cdr" "else" "%%car" "%%cdar" "%%eq?" "%%null?" "cond" "rest" "iter" "let" "alist" "obj")}
      {Lisp-Entry "jazz.butlast" #f 146 9 146 21 ("jazz.butlast" "%%car" "%%cons" "%%cdr" "%%null?" "if" "lst")}
      {Lisp-Entry "jazz.listify" #f 152 9 152 21 ("%%list" "%%pair?" "%%null?" "or" "if" "obj")}
      {Lisp-Entry "jazz.naturals" #f 158 9 158 22 ("jazz.reverse!" "1" "%%fx+" "%%cons" "set!" "%%fx<" "%%while" "n" "lst" "let" "to" "from")}
      {Lisp-Entry "jazz.remove!" #f 167 9 167 21 ("%%set-cdr!" "scan" "previous" "let" "begin" "%%null?" "if" "%%cdr" "set!" "%%car" "%%eqv?" "%%not-null?" "and" "%%while" "lst" "target")}}})
"macros"
 ({Lisp-File-Entry {File core "src" "core" "base" "syntax" "macros.scm"} 1238328024
    {Lisp-Entry "core.base.syntax.macros" #f 37 18 37 41 ()
      {Lisp-Entry "%%boolean" #f 40 20 40 29 (",expr" "if" "jazz.source-code" "%%cadr" "expr" "let" "src" "lambda")}
      {Lisp-Entry "%%not-null?" #f 46 20 46 31 (",expr" "%%null?" "%%not" "jazz.source-code" "%%cadr" "expr" "let" "src" "lambda")}
      {Lisp-Entry "%%when" #f 57 20 57 26 (",@body" "begin" ",test" "if" "%%cddr" "body" "jazz.source-code" "%%cadr" "test" "let" "src" "lambda")}
      {Lisp-Entry "%%while" #f 72 20 72 27 (",@body" "begin" ",test" "if" ",iter" "jazz.generate-symbol" "iter" "%%cddr" "body" "jazz.source-code" "%%cadr" "test" "let" "src" "lambda")}
      {Lisp-Entry "%%core-assert" #f 89 20 89 33 ("jazz.debug-core?" "jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%core-assertion" #f 94 20 94 36 ("jazz.debug-core?" "jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "%%debug-assert" #f 99 20 99 34 ("jazz.debug-user?" "jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%debug-assertion" #f 104 20 104 37 ("jazz.debug-user?" "jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "%%assert" #f 109 20 109 28 ("jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%assertion" #f 114 20 114 31 ("jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "jazz.expand-%%assert" #f 119 9 119 29 ("error" "'error" "list" "jazz.expand-%%assertion-body" "get-output-string" "%%desourcify" "write" "display" "open-output-string" "port" "message" "%%cddr" "body" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-%%assertion" #f 130 9 130 32 ("jazz.expand-%%assertion-body" "%%cdr" "body" "%%cddr" "%%car" "action" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-%%assertion-body" #f 137 9 137 37 (",@body" "begin" "jazz.simplify-begin" ",action" ",assertion" "%%not" "if" "body" "action" "assertion" "test?")}
      {Lisp-Entry "jazz.bind" #f 164 20 164 29 ("expand-car" ",tree" ",tree-symbol" "jazz.generate-symbol" "tree-symbol" "let" "body" "tree" "bindings")
        {Lisp-Entry "expand-car" #f 166 11 166 21 ("expand-car" ",car-symbol" "jazz.error" "%%null?" "if" "jazz.generate-symbol" "car-symbol" "%%pair?" "expand-cdr" ",tree" ",car-binding" "%%symbol?" "cond" "%%car" "car-binding" "let" "body" "tree" "bindings")}
        {Lisp-Entry "expand-cdr" #f 179 11 179 21 ("expand-car" ",cdr-symbol" "jazz.generate-symbol" "cdr-symbol" "%%pair?" ",@body" ",tree" ",cdr-binding" "%%symbol?" "%%null?" "cond" "%%cdr" "cdr-binding" "let" "body" "tree" "bindings")}}
      {Lisp-Entry "%%compose-name" #f 201 20 201 34 ("s2" "s1")}}})
"object"
 ({Lisp-File-Entry {File core "src" "core" "class" "syntax" "object.scm"} 1245777538
    {Lisp-Entry "core.class.syntax.object" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.instances-statistics?" #f 41 8 41 34 ()}
      {Lisp-Entry "jazz.instances-statistics" #f 45 8 45 33 ("eq?" "test:" "%%make-table" "jazz.instances-statistics?" "if")}
      {Lisp-Entry "jazz.register-instance" #f 51 9 51 31 ("cons" "list" "0" "%%table-ref" "%%fx+" "jazz.instances-statistics" "%%table-set!" "count" "case" "1" "##vector-ref" "name" "if" "jazz.keep-instances-statistics" "keep" "let" "obj" "class")}
      {Lisp-Entry "%%register-instance" #f 65 20 65 39 (",obj" ",class" "jazz.register-instance" "jazz.instances-statistics?" "if" "obj" "class")}
      {Lisp-Entry "%%object-content" #f 73 12 73 28 ("0")}
      {Lisp-Entry "%%object-marker" #f 77 11 77 26 ("'jazz.object")}
      {Lisp-Entry "%%object-content" #f 80 11 80 27 ("1")}
      {Lisp-Entry "jazz.object-class" #f 84 8 84 25 ("%%object-content")}
      {Lisp-Entry "jazz.object-size" #f 88 8 88 24 ("1" "jazz.object-class" "%%fx+")}
      {Lisp-Entry "%%subtype-jazz" #f 94 24 94 38 ("7")}
      {Lisp-Entry "%%object?" #f 97 24 97 33 ("expr")}
      {Lisp-Entry "%%object" #f 100 24 100 32 ("%%register-instance" "%%subtype-jazz" ",@rest" ",cls" "##vector" "##subtype-set!" ",obj" "jazz.generate-symbol" "obj" "let" "jazz.instances-statistics?" "if" "cls" "lambda" "jazz.with-uniqueness" "rest" "class")}
      {Lisp-Entry "%%make-object" #f 110 24 110 37 ("%%register-instance" ",cls" "%%set-object-class" "%%subtype-jazz" ",size" "%%make-vector" "##subtype-set!" ",obj" "jazz.generate-symbol" "obj" "let" "cls" "lambda" "jazz.with-uniqueness" "size" "class")}
      {Lisp-Entry "%%object-length" #f 119 24 119 39 (",object" "##vector-length" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "obj" "lambda" "jazz.with-uniqueness" "jazz.debug-core?" "if" "object")}
      {Lisp-Entry "%%object-ref" #f 127 24 127 36 (",object" ",n" "##vector-ref" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "rnk" "obj" "lambda" "jazz.with-uniqueness" "jazz.debug-core?" "if" "n" "object")}
      {Lisp-Entry "%%object-set!" #f 140 24 140 37 (",object" ",value" ",n" "##vector-set!" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "rnk" "obj" "lambda" "jazz.with-uniqueness" "jazz.debug-core?" "if" "value" "n" "object")}
      {Lisp-Entry "%%object?" #f 154 23 154 32 ("expr")}
      {Lisp-Entry "%%object" #f 159 23 159 31 ("rest")}
      {Lisp-Entry "%%make-object" #f 162 23 162 36 ("%%object-marker" "0" "%%object-set!" ",size" "%%make-vector" ",object" "jazz.generate-symbol" "object" "let" "size")}
      {Lisp-Entry "%%object-length" #f 168 23 168 38 ("vector")}
      {Lisp-Entry "%%object-ref" #f 171 23 171 35 ("n" "vector")}
      {Lisp-Entry "%%object-set!" #f 174 23 174 36 ("value" "n" "vector")}
      {Lisp-Entry "%%get-object-slot" #f 178 20 178 37 ("slot-offset" "object")}
      {Lisp-Entry "%%set-object-slot" #f 182 20 182 37 ("value" "slot-offset" "object")}}})
"output"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "output.scm"} 1238329747
    {Lisp-Entry "core.class.runtime.output" #f 37 18 37 43 ("jazz.output-mode" "jazz.print-jazz" "object" "port" "jazz.write-jazz" "jazz.dialect.language.Object.print" ":reader" "':reader" "jazz.write" ":human" "':human" "jazz.output-value" "output" "value" "lambda" "jazz.display" "set!")
      {Lisp-Entry "jazz.output-mode" #f 40 8 40 24 ("':reader")}
      {Lisp-Entry "jazz.print" #f 54 9 54 19 ("jazz.error" "else" "write" ":describe" ":text" ":reader" "display" ":human" "case" "detail" "output" "value")}
      {Lisp-Entry "jazz.->string" #f 61 9 61 22 ("get-output-string" "jazz.output-mode" "jazz.output-value" "open-output-string" "output" "let" "else" "%%values?" "%%unspecified?" "cond" "value")}
      {Lisp-Entry "jazz.output-value" #f 72 9 72 26 ("jazz.write-jazz" "else" "jazz.print" "jazz.primitive?" "jazz.output-list" "%%pair?" "%%null?" "or" "cond" "detail" "output" "value")}
      {Lisp-Entry "jazz.output-list" #f 81 9 81 25 ("jazz.output-list-content" "display" "detail" "output" "lst")}
      {Lisp-Entry "jazz.output-list-content" #f 87 9 87 33 ("begin" "display" "%%pair?" "%%cdr" "set!" "%%car" "jazz.output-value" "and" "%%while" "done?" "scan" "let" "%%null?" "%%not" "if" "detail" "output" "lst")}
      {Lisp-Entry "jazz.debug" #f 103 9 103 19 ("force-output" "newline" "%%cdr" "expr" "lambda" "for-each" "%%car" "jazz.->string" "display" "%%not-null?" "%%when" "rest")}
      {Lisp-Entry "jazz.debug-string" #f 114 9 114 26 ("force-output" "newline" "display" "str")}
      {Lisp-Entry "jazz.terminal" #f 120 8 120 21 ("jazz.debug")}
      {Lisp-Entry "jazz.terminal-string" #f 124 8 124 28 ("jazz.debug-string")}
      {Lisp-Entry "jazz.terminal-port" #f 128 9 128 27 ("console-port")}
      {Lisp-Entry "jazz.bootstrap-output-value" #f 132 9 132 36 ("jazz.->string" "display" "output" "value")}
      {Lisp-Entry "jazz.pretty-print" #f 138 13 138 30 ("pretty-print" "apply" "rest" "expr")}
      {Lisp-Entry "jazz.pretty-print" #f 142 13 142 30 ("pretty-print" "apply" "rest" "expr")}
      {Lisp-Entry "jazz.pretty-print" #f 146 12 146 29 ("newline" "display" "rest" "expr")}
      {Lisp-Entry "jazz.dialect.language.Object.print" #f 156 8 156 42 ()}
      {Lisp-Entry "jazz.print-jazz" #f 162 9 162 24 ("jazz.print-serial" "jazz.print-object" "2" "0" "%%class-dispatch" "jazz.print-object?" "%%not" "jazz.dialect.language.Object.print" "and" "jazz.use-print?" "if" "detail" "output" "object")}}})
"output-hook"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "output-hook.scm"} 1238328024
    {Lisp-Entry "core.class.runtime.output-hook" #f 37 18 37 48 ("##default-wr" "else" "jazz.writeenv-port" "##jazz?" "and" "cond" "obj" "we" "lambda" "##wr" "jazz.write-jazz" "set!")
      {Lisp-Entry "jazz.write-jazz" #f 42 12 42 27 ()}}})
"reader"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "reader.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.reader" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.read-source-all" #f 40 9 40 29 ("%%vector-ref" "%%source-code" "%%cdr" "jazz.readtable-start-syntax" "##unwrap-datum" "##wrap-datum" "%%current-readtable" "%%read-all-as-a-begin-expr-from-port" "begin-vector" "let" "%%input-port-column-set!" "1" "+" "%%input-port-line-set!" "lambda" "%%input-port-names-set!" "if" "col" "line" "container" "#!optional" "port")}
      {Lisp-Entry "jazz.read-source-first" #f 59 9 59 31 ("jazz.read-source-all" "%%car" "col" "line" "container" "#!optional" "port")}}})
"runtime"
 ({Lisp-File-Entry {File core "src" "core" "class" "runtime" "runtime.scm"} 1245777538
    {Lisp-Entry "core.class.runtime.runtime" #f 37 18 37 44 ("jazz.Queue" "jazz.Method-Node" "jazz.Method" "jazz.Property" "jazz.Slot" "jazz.Field" "jazz.Interface" "port?" "jazz.register-usertype" "4" "3" "2" "1" "0" "jazz.specialtypes" "jazz.subtype-boxvalues" "jazz.subtype-u8vector" "jazz.subtype-foreign" "jazz.subtype-bignum" "jazz.subtype-flonum" "jazz.subtype-string" "jazz.subtype-procedure" "jazz.subtype-continuation" "jazz.subtype-keyword" "jazz.subtype-symbol" "jazz.subtype-cpxnum" "jazz.subtype-ratnum" "jazz.subtype-pair" "jazz.subtype-vector" "jazz.subtypes" "%%vector-set!" "jazz.Unspecified" "jazz.Unspecified-Class" "jazz.EOF" "jazz.EOF-Class" "jazz.Values" "jazz.Values-Class" "jazz.Foreign" "jazz.Foreign-Class" "jazz.Promise" "jazz.Promise-Class" "jazz.Thread" "jazz.Thread-Class" "jazz.Table" "jazz.Table-Class" "jazz.Keyword" "jazz.Keyword-Class" "jazz.Symbol" "jazz.Symbol-Class" "jazz.Procedure" "jazz.Procedure-Class" "jazz.Continuation" "jazz.Continuation-Class" "jazz.Port" "jazz.Port-Class" "jazz.U8Vector" "jazz.U8Vector-Class" "jazz.Vector" "jazz.Vector-Class" "jazz.String" "jazz.String-Class" "jazz.Pair" "jazz.Pair-Class" "jazz.Null" "jazz.Null-Class" "jazz.List" "jazz.List-Class" "jazz.Sequence" "jazz.Sequence-Class" "jazz.Flonum" "jazz.Flonum-Class" "jazz.Fixnum" "jazz.Fixnum-Class" "jazz.Integer" "jazz.Integer-Class" "jazz.Rational" "jazz.Rational-Class" "jazz.Real" "jazz.Real-Class" "jazz.Complex" "jazz.Complex-Class" "jazz.Number" "jazz.Number-Class" "jazz.Numeric" "jazz.Numeric-Class" "jazz.Char" "jazz.Char-Class" "jazz.Boolean" "jazz.Boolean-Class" "%%set-object-class" "jazz.Object-Class" "jazz.Class" "jazz.Category" "jazz.Type" "jazz.Object" "jazz.encapsulate-class" "%%get-object-class" "%%subclass?" "class" "object" "lambda" "jazz.object-of-class?" "set!")
      {Lisp-Entry "jazz.new-interface-rank" #f 40 8 40 31 ("0")}
      {Lisp-Entry "jazz.dispatch?" #f 49 9 49 23 ("%%fx-" "%%string-ref" "%%eqv?" "1" "%%fx>" "%%string-length" "len" "%%symbol->string" "name" "let" "%%symbol?" "and" "symbol")}
      {Lisp-Entry "jazz.dispatch->symbol" #f 58 9 58 30 ("1" "%%string-length" "%%fx-" "0" "%%substring" "%%string->symbol" "%%symbol->string" "name" "let" "dispatch")}
      {Lisp-Entry "jazz.composite-name?" #f 63 9 63 29 ("%%symbol->string" "jazz.memstring" "%%symbol?" "and" "symbol")}
      {Lisp-Entry "jazz.compose-name" #f 68 9 68 26 ("symbol->string" "map" "jazz.join-strings" "%%string->symbol" "rest")}
      {Lisp-Entry "jazz.compose-helper" #f 72 9 72 28 ("%%symbol->string" "%%string-append" "%%string->symbol" "suffix" "locator")}
      {Lisp-Entry "jazz.split-identifier" #f 76 9 76 30 ("%%symbol->string" "jazz.split-string" "string->symbol" "map" "%%symbol?" "%%debug-assert" "identifier")}
      {Lisp-Entry "jazz.split-composite" #f 81 9 81 29 ("%%string-length" "1" "%%fx+" "0" "%%substring" "%%string->symbol" "values" "jazz.string-find-reversed" "n" "%%symbol->string" "str" "let" "identifier")}
      {Lisp-Entry "jazz.inspect-object" #f 93 9 93 28 ("1" "%%fx+" "%%object-ref" "%%vector-set!" "begin" "%%fx<" "if" "0" "n" "iter" "let" "%%make-vector" "content" "%%object-length" "size" "let*" "%%object?" "%%assert" "object")}
      {Lisp-Entry "jazz.Core-Classes" #f 110 8 110 25 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-core-classes" #f 114 9 114 30 ("jazz.Core-Classes")}
      {Lisp-Entry "jazz.core-class?" #f 118 9 118 25 ("jazz.Core-Classes" "%%table-ref" "%%boolean" "name")}
      {Lisp-Entry "jazz.get-core-class" #f 122 9 122 28 ("jazz.Core-Classes" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-core-class" #f 126 9 126 28 ("jazz.Core-Classes" "%%table-set!" "class" "name")}
      {Lisp-Entry "jazz.object?" #f 135 9 135 21 ("%%object?" "expr")}
      {Lisp-Entry "jazz.primitive?" #f 139 9 139 24 ("%%object?" "%%not" "expr")}
      {Lisp-Entry "jazz.subtype?" #f 143 9 143 22 ("%%subtype?" "%%boolean" "jazz.type?" "%%assert" "type" "target")}
      {Lisp-Entry "jazz.subcategory?" #f 148 9 148 26 ("%%subcategory?" "%%boolean" "category" "target")}
      {Lisp-Entry "jazz.subclass?" #f 152 9 152 23 ("%%subclass?" "%%boolean" "class" "target")}
      {Lisp-Entry "jazz.get-category-descendants" #f 156 9 156 38 ("%%get-category-descendants" "category")}
      {Lisp-Entry "jazz.get-class-ascendant" #f 160 9 160 33 ("%%get-class-ascendant" "class")}
      {Lisp-Entry "jazz.collect-type" #f 169 9 169 26 ("%%is?" "obj" "lambda" "jazz.collect-if" "lst" "type")}
      {Lisp-Entry "jazz.get-core-class-all-slots" #f 175 9 175 38 ("jazz.get-core-class-all-slots" "%%append" "%%not" "if" "%%get-class-ascendant" "ascendant" "%%get-class-slots" "slots" "let" "core-class")}
      {Lisp-Entry "jazz.get-core-class-all-slot-names" #f 183 9 183 43 ("jazz.get-core-class-all-slots" "%%get-field-name" "%%symbol?" "if" "name/slot" "lambda" "map" "core-class")}
      {Lisp-Entry "jazz.create-class-tables" #f 191 9 191 33 ("jazz.create-class-class-table" "jazz.create-class-interface-table" "class")}
      {Lisp-Entry "jazz.create-core-class-tables" #f 196 9 196 38 ("jazz.create-class-class-table" "class")}
      {Lisp-Entry "jazz.create-class-interface-table" #f 200 9 200 42 ("%%set-class-interface-table" "%%get-category-ancestors" "%%class-of" "jazz.call-into-abstract" "rest" "object" "%%get-method-implementation-rank" "jazz.Method" "%%is?" "field" "field-name" "%%get-category-fields" "%%iterate-table" "category-name" "%%get-category-name" "class-name" "jazz.call-into-incoherent" "category-vtable" "%%get-category-virtual-size" "%%get-interface-rank" "rank" "let*" "jazz.Interface" "%%class-is?" "category" "lambda" "jazz.vector-for-each" "1" "+" "%%vector-copy" "%%vector-set!" "%%vector-ref" "ascendant-vtable" "<" "0" "i" "iter" "%%vector-length" "size" "ascendant-interface-table" "%%get-class-ascendant" "ascendant" "jazz.new-interface-rank" "%%make-vector" "vtable" "let" "%%get-class-interface-table" "%%not" "%%when" "class")}
      {Lisp-Entry "jazz.create-class-class-table" #f 233 9 233 38 ("%%vector-ref" "%%vector-copy" "%%vector-set!" "<" "0" "i" "iter" "#" "'#" "1" "+" "%%make-vector" "vtable" "%%vector-length" "size" "ascendant-class-table" "let*" "if" "%%set-class-class-table" "%%get-class-ascendant" "ascendant" "let" "%%get-class-class-table" "%%not" "%%when" "class")}
      {Lisp-Entry "jazz.encapsulate-class" #f 249 9 249 31 ("jazz.update-core-class" "%%set-class-core-vtable" "%%get-class-core-method-alist" "%%get-class-core-virtual-alist" "jazz.get-method-rank" "%%cdr" "method-implementation" "%%car" "method-name" "method" "lambda" "for-each" "%%vector-ref" "%%vector-set!" "%%fx>=" "1" "%%vector-length" "%%fx-" "n" "iter" "%%get-class-core-vtable" "ascendant-vtable" "%%get-class-ascendant" "ascendant" "make-vector" "vtable" "0" "%%fx>" "%%when" "%%length" "vtable-size" "%%get-class-core-virtual-names" "virtual-names" "let" "class")}
      {Lisp-Entry "jazz.update-class" #f 276 9 276 26 ("jazz.update-class-class-table" "class")}
      {Lisp-Entry "jazz.update-core-class" #f 280 9 280 31 ("jazz.update-class-class-table" "class")}
      {Lisp-Entry "jazz.update-class-class-table" #f 284 9 284 38 ("%%get-category-descendants" "descendant" "%%vector-set!" "%%get-method-implementation-tree" "%%get-method-node-implementation" "implementation" "%%get-method-implementation-rank" "implementation-rank" "field" "lambda" "for-each" "%%vector-ref" "jazz.resize-vector" "implementation-table" "%%get-class-class-table" "class-table" "let*" "iter" "%%get-category-virtual-size" "class-virtual-size" "%%get-class-level" "class-rank" "%%not-null?" "%%when" "jazz.update-class-class-root-methods" "added-methods" "let" "class")}
      {Lisp-Entry "jazz.update-class-class-root-methods" #f 303 9 303 45 ("cons" "set!" "%%set-method-category-rank" "begin" "%%get-category-descendants" "descendant" "for-each" "%%vector-set!" "%%eq?" "implementation-table" "iter" "%%neq?" "%%get-method-implementation-tree" "%%get-method-node-implementation" "new-implementation" "old-implementation" "%%get-method-implementation-rank" "implementation-rank" "let" "%%get-method-category-rank" "if" "jazz.virtual-method?" "%%when" "field" "key" "lambda" "%%get-category-fields" "%%iterate-table" "added-methods" "%%vector-ref" "root-implementation-table" "%%get-class-level" "class-rank" "%%get-class-class-table" "class-table" "let*" "class")}
      {Lisp-Entry "jazz.new-core-class" #f 336 9 336 28 ("jazz.create-core-class-tables" "%%get-category-descendants" "%%cons" "%%set-category-descendants" "%%when" "jazz.compute-core-class-ancestors" "%%list->vector" "%%set-category-ancestors" "%%get-class-core-virtual-names" "1" "%%get-class-level" "%%fx+" "if" "0" "%%object" "core-class" "let" "instance-size" "slot-names" "ascendant" "fields" "name" "class")}
      {Lisp-Entry "jazz.compute-core-class-ancestors" #f 366 9 366 42 ("%%get-category-ancestors" "%%vector->list" "%%append" "%%list" "%%not" "if" "ascendant" "class")}
      {Lisp-Entry "jazz.validate-inherited-slots" #f 372 9 372 38 ("jazz.error" "jazz.get-core-class-all-slot-names" "%%equal?" "%%null?" "%%not" "and" "or" "if" "inherited-slot-names" "ascendant" "name")}
      {Lisp-Entry "jazz.Object" #f 383 27 383 38 ()}
      {Lisp-Entry "jazz.get-object-slot" #f 386 9 386 29 ("%%get-object-slot" "slot-offset" "object")}
      {Lisp-Entry "jazz.set-object-slot" #f 390 9 390 29 ("%%set-object-slot" "value" "slot-offset" "object")}
      {Lisp-Entry "jazz.classname->string" #f 394 9 394 31 ("%%get-category-name" "%%symbol->string" "%%null?" "if" "class")}
      {Lisp-Entry "jazz.print-object?" ("jazz.Object") 400 30 400 48 ()}
      {Lisp-Entry "jazz.print-object" ("jazz.Object") 401 30 401 47 ("detail" "output")}
      {Lisp-Entry "jazz.print-object?" ("jazz.Object") 404 21 404 39 ()}
      {Lisp-Entry "jazz.print-object" ("jazz.Object") 407 21 407 38 ("object" "jazz.print-serial" "detail" "output")}
      {Lisp-Entry "jazz.print-serial" #f 411 9 411 26 ("display" "object->serial-number" "serial" "let" "output" "object")}
      {Lisp-Entry "jazz.Type" #f 426 27 426 36 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Type") 429 30 429 43 ("object")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Type") 432 21 432 34 ("%%class-of" "type" "jazz.of-subtype?" "object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Type") 436 30 436 46 ("subtype")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Type") 439 21 439 37 ("type" "jazz.error" "subtype")}
      {Lisp-Entry "jazz.category-type?" ("jazz.Type") 443 30 443 49 ()}
      {Lisp-Entry "jazz.category-type?" ("jazz.Type") 446 21 446 40 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Type") 450 30 450 49 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Type") 453 21 453 40 ("type" "jazz.error")}
      {Lisp-Entry "jazz.emit-type" ("jazz.Type") 457 30 457 44 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-type" ("jazz.Type") 460 21 460 35 ("type" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Type") 464 30 464 44 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Type") 467 21 467 35 (",locator" ",value" "%%is?" "type" "jazz.emit-type" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Type") 472 30 472 45 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Type") 475 21 475 36 (",locator" ",value" "jazz.type-error" "jazz.emit-test" "%%not" "if" "type" "jazz.emit-type" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.bootstrap-type?" #f 482 9 482 29 ("type-class" "object")}
      {Lisp-Entry "jazz.type?" #f 487 9 487 19 ("jazz.Type" "%%is?" "%%object?" "and" "object")}
      {Lisp-Entry "jazz.Category" #f 500 27 500 40 ()}
      {Lisp-Entry "jazz.category?" #f 503 9 503 23 ("jazz.category-type?" "jazz.type?" "and" "object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Category") 508 21 508 37 ("%%get-category-ancestors" "type" "jazz.vector-memq?" "jazz.category-type?" "and" "subtype")}
      {Lisp-Entry "jazz.category-type?" ("jazz.Category") 513 21 513 40 ()}
      {Lisp-Entry "jazz.emit-type" ("jazz.Category") 517 21 517 35 ("type" "%%get-category-name" "environment" "source-declaration")}
      {Lisp-Entry "jazz.update-category" ("jazz.Category") 521 30 521 50 ()}
      {Lisp-Entry "jazz.update-category" ("jazz.Category") 524 21 524 41 ()}
      {Lisp-Entry "jazz.is?" #f 528 9 528 17 ("%%is?" "%%boolean" "category" "object")}
      {Lisp-Entry "jazz.is-not?" #f 532 9 532 21 ("%%is?" "%%not" "%%boolean" "category" "object")}
      {Lisp-Entry "jazz.get-category-name" #f 536 9 536 31 ("%%get-category-name" "jazz.category?" "%%debug-assert" "category")}
      {Lisp-Entry "jazz.add-field" #f 541 9 541 23 ("%%get-field-name" "%%set-category-field" "field" "category")}
      {Lisp-Entry "jazz.Class" #f 553 27 553 37 ()}
      {Lisp-Entry "jazz.new-class" #f 556 9 556 23 ("%%class-dispatch" "jazz.create-class-tables" "%%get-category-descendants" "%%cons" "%%set-category-descendants" "%%when" "jazz.compute-class-ancestors" "%%list->vector" "%%set-category-ancestors" "%%get-class-core-vtable" "1" "%%get-class-level" "%%fx+" "jazz.object-size" "%%get-class-instance-size" "%%get-class-slots" "if" "0" "eq?" "test:" "%%make-table" "jazz.allocate-class" "class" "let" "interfaces" "ascendant" "name" "class-of-class")}
      {Lisp-Entry "jazz.compute-class-ancestors" #f 578 9 578 37 ("add-classes" "%%get-interface-ascendants" "cons" "set!" "%%memq" "%%not" "else" "%%get-class-interfaces" "for-each" "%%when" "%%get-class-ascendant" "%%class?" "cond" "category" "add-interfaces" "ancestors" "let" "interfaces" "ascendant" "class")}
      {Lisp-Entry "jazz.class?" #f 597 9 597 20 ("jazz.Class" "%%class-is?" "object")}
      {Lisp-Entry "jazz.i-class-of" #f 601 9 601 24 ("%%i-class-of-impl" "expr")}
      {Lisp-Entry "jazz.class-of" #f 605 9 605 22 ("%%class-of-impl" "expr")}
      {Lisp-Entry "jazz.class-of-native" #f 612 9 612 29 ("jazz.error" "jazz.usertype" "or" "else" "jazz.Unspecified" "%%unspecified?" "jazz.EOF" "%%eof-object?" "jazz.Values" "%%values?" "jazz.Foreign" "%%foreign?" "jazz.Procedure" "%%procedure?" "jazz.Continuation" "%%continuation?" "jazz.Port" "%%port?" "jazz.Keyword" "%%keyword?" "jazz.Symbol" "%%symbol?" "jazz.U8Vector" "%%u8vector?" "jazz.Vector" "%%vector?" "jazz.String" "%%string?" "jazz.Pair" "%%pair?" "jazz.Null" "%%null?" "jazz.Number" "%%number?" "jazz.Complex" "%%complex?" "jazz.Real" "%%real?" "jazz.Rational" "%%rational?" "jazz.Integer" "%%integer?" "jazz.Flonum" "%%flonum?" "jazz.Fixnum" "%%fixnum?" "jazz.Char" "%%char?" "jazz.Boolean" "%%boolean?" "cond" "expr")}
      {Lisp-Entry "jazz.class-subtype?" #f 641 9 641 28 ("%%class-subtype?" "class" "target")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Class") 645 21 645 34 ("class" "%%class-of" "%%class-subtype?" "object")}
      {Lisp-Entry "jazz.update-category" ("jazz.Class") 649 21 649 41 ("class" "jazz.update-class")}
      {Lisp-Entry "jazz.slot-form?" #f 653 9 653 24 ("slot" "'slot" "%%car" "%%eq?" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.new" #f 658 9 658 17 ("0" "%%class-dispatch" "apply" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "rest" "class")}
      {Lisp-Entry "jazz.new0" #f 666 9 666 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "class")}
      {Lisp-Entry "jazz.new1" #f 674 9 674 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "arg1" "class")}
      {Lisp-Entry "jazz.new2" #f 682 9 682 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "arg2" "arg1" "class")}
      {Lisp-Entry "jazz.iterate-descendants-tree" #f 690 9 690 38 ("%%get-category-descendants" "for-each" "iter" "let" "proc" "class")}
      {Lisp-Entry "jazz.Object-Class" #f 704 27 704 44 ()}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Object-Class") 707 21 707 37 ("nextmethod" "class" "%%object-class?" "if" "subtype")}
      {Lisp-Entry "jazz.Boolean-Class" #f 733 27 733 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Boolean-Class") 736 21 736 34 ("%%boolean?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Boolean-Class") 740 21 740 40 ("'bool")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Boolean-Class") 744 21 744 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Boolean" #f 751 27 751 39 ()}
      {Lisp-Entry "jazz.Char-Class" #f 762 27 762 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Char-Class") 765 21 765 34 ("%%char?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Char-Class") 769 21 769 40 ("'char")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Char-Class") 773 21 773 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Char" #f 780 27 780 36 ()}
      {Lisp-Entry "jazz.Numeric-Class" #f 791 27 791 45 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Numeric-Class") 794 21 794 40 ("'numeric")}
      {Lisp-Entry "jazz.Numeric" #f 801 27 801 39 ()}
      {Lisp-Entry "jazz.Number-Class" #f 812 27 812 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Number-Class") 815 21 815 34 ("%%number?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Number-Class") 819 21 819 40 ("'number")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Number-Class") 823 21 823 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Number" #f 830 27 830 38 ()}
      {Lisp-Entry "jazz.Complex-Class" #f 841 27 841 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Complex-Class") 844 21 844 34 ("%%complex?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Complex-Class") 848 21 848 40 ("'complex")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Complex-Class") 852 21 852 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Complex" #f 859 27 859 39 ()}
      {Lisp-Entry "jazz.Real-Class" #f 870 27 870 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Real-Class") 873 21 873 34 ("%%real?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Real-Class") 877 21 877 40 ("'real")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Real-Class") 881 21 881 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Real" #f 888 27 888 36 ()}
      {Lisp-Entry "jazz.Rational-Class" #f 899 27 899 46 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Rational-Class") 902 21 902 34 ("%%rational?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Rational-Class") 906 21 906 40 ("'rational")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Rational-Class") 910 21 910 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Rational" #f 917 27 917 40 ()}
      {Lisp-Entry "jazz.Integer-Class" #f 928 27 928 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Integer-Class") 931 21 931 34 ("%%integer?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Integer-Class") 935 21 935 40 ("'int")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Integer-Class") 939 21 939 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Integer" #f 946 27 946 39 ()}
      {Lisp-Entry "jazz.Fixnum-Class" #f 957 27 957 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Fixnum-Class") 960 21 960 34 ("%%fixnum?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Fixnum-Class") 964 21 964 40 ("'fx")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Fixnum-Class") 968 21 968 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Fixnum" #f 975 27 975 38 ()}
      {Lisp-Entry "jazz.Flonum-Class" #f 986 27 986 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Flonum-Class") 989 21 989 34 ("%%flonum?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Flonum-Class") 993 21 993 40 ("'fl")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Flonum-Class") 997 21 997 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Flonum" #f 1004 27 1004 38 ()}
      {Lisp-Entry "jazz.Sequence-Class" #f 1015 27 1015 46 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Sequence-Class") 1018 21 1018 40 ("'sequence")}
      {Lisp-Entry "jazz.Sequence" #f 1025 27 1025 40 ()}
      {Lisp-Entry "jazz.List-Class" #f 1036 27 1036 42 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.List-Class") 1039 21 1039 40 ("'list")}
      {Lisp-Entry "jazz.emit-test" ("jazz.List-Class") 1043 21 1043 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.List" #f 1050 27 1050 36 ()}
      {Lisp-Entry "jazz.Null-Class" #f 1061 27 1061 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Null-Class") 1064 21 1064 34 ("%%null?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Null-Class") 1068 21 1068 40 ("'null")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Null-Class") 1072 21 1072 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Null" #f 1079 27 1079 36 ()}
      {Lisp-Entry "jazz.Pair-Class" #f 1090 27 1090 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Pair-Class") 1093 21 1093 34 ("%%pair?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Pair-Class") 1097 21 1097 40 ("'pair")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Pair-Class") 1101 21 1101 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Pair" #f 1108 27 1108 36 ()}
      {Lisp-Entry "jazz.String-Class" #f 1119 27 1119 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.String-Class") 1122 21 1122 34 ("%%string?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.String-Class") 1126 21 1126 40 ("'string")}
      {Lisp-Entry "jazz.emit-test" ("jazz.String-Class") 1130 21 1130 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.String" #f 1137 27 1137 38 ()}
      {Lisp-Entry "jazz.Vector-Class" #f 1148 27 1148 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Vector-Class") 1151 21 1151 34 ("%%vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Vector-Class") 1155 21 1155 40 ("'vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Vector-Class") 1159 21 1159 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Vector" #f 1166 27 1166 38 ()}
      {Lisp-Entry "jazz.U8Vector-Class" #f 1177 27 1177 46 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.U8Vector-Class") 1180 21 1180 34 ("%%u8vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.U8Vector-Class") 1184 21 1184 40 ("'u8vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.U8Vector-Class") 1188 21 1188 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U8Vector" #f 1195 27 1195 40 ()}
      {Lisp-Entry "jazz.Port-Class" #f 1206 27 1206 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Port-Class") 1209 21 1209 34 ("%%port?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Port-Class") 1213 21 1213 40 ("'port")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Port-Class") 1217 21 1217 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Port" #f 1224 27 1224 36 ()}
      {Lisp-Entry "jazz.Continuation-Class" #f 1235 27 1235 50 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Continuation-Class") 1238 21 1238 34 ("%%continuation?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Continuation-Class") 1242 21 1242 40 ("'continuation")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Continuation-Class") 1246 21 1246 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Continuation" #f 1253 27 1253 44 ()}
      {Lisp-Entry "jazz.Procedure-Class" #f 1264 27 1264 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Procedure-Class") 1267 21 1267 34 ("%%procedure?" "object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Procedure-Class") 1271 21 1271 37 ("class" "nextmethod" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Procedure-Class") 1277 21 1277 40 ("'procedure")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Procedure-Class") 1281 21 1281 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Procedure" #f 1288 27 1288 41 ()}
      {Lisp-Entry "jazz.Symbol-Class" #f 1299 27 1299 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Symbol-Class") 1302 21 1302 34 ("%%symbol?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Symbol-Class") 1306 21 1306 40 ("'symbol")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Symbol-Class") 1310 21 1310 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Symbol" #f 1317 27 1317 38 ()}
      {Lisp-Entry "jazz.Keyword-Class" #f 1328 27 1328 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Keyword-Class") 1331 21 1331 34 ("%%keyword?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Keyword-Class") 1335 21 1335 40 ("'keyword")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Keyword-Class") 1339 21 1339 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Keyword" #f 1346 27 1346 39 ()}
      {Lisp-Entry "jazz.Table-Class" #f 1357 27 1357 43 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Table-Class") 1360 21 1360 34 ("%%table?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Table-Class") 1364 21 1364 40 ("'table")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Table-Class") 1368 21 1368 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Table" #f 1375 27 1375 37 ()}
      {Lisp-Entry "jazz.Thread-Class" #f 1386 27 1386 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Thread-Class") 1389 21 1389 34 ("%%thread?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Thread-Class") 1393 21 1393 40 ("'thread")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Thread-Class") 1397 21 1397 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Thread" #f 1404 27 1404 38 ()}
      {Lisp-Entry "jazz.Promise-Class" #f 1415 27 1415 45 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Promise-Class") 1418 21 1418 40 ("'promise")}
      {Lisp-Entry "jazz.Promise" #f 1425 27 1425 39 ()}
      {Lisp-Entry "jazz.Foreign-Class" #f 1436 27 1436 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Foreign-Class") 1439 21 1439 34 ("%%foreign?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Foreign-Class") 1443 21 1443 40 ("'foreign")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Foreign-Class") 1447 21 1447 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Foreign" #f 1454 27 1454 39 ()}
      {Lisp-Entry "jazz.Values-Class" #f 1465 27 1465 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Values-Class") 1468 21 1468 34 ("%%values?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Values-Class") 1472 21 1472 40 ("'values")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Values-Class") 1476 21 1476 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Values" #f 1483 27 1483 38 ()}
      {Lisp-Entry "jazz.EOF-Class" #f 1494 27 1494 41 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.EOF-Class") 1497 21 1497 34 ("%%eof-object?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.EOF-Class") 1501 21 1501 40 ("'eof")}
      {Lisp-Entry "jazz.emit-test" ("jazz.EOF-Class") 1505 21 1505 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.EOF" #f 1512 27 1512 35 ()}
      {Lisp-Entry "jazz.Unspecified-Class" #f 1523 27 1523 49 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Unspecified-Class") 1526 21 1526 34 ("%%unspecified?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Unspecified-Class") 1530 21 1530 40 ("'unspecified")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Unspecified-Class") 1534 21 1534 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Unspecified" #f 1541 27 1541 43 ()}
      {Lisp-Entry "jazz.subtypes" #f 1554 12 1554 25 ("32" "make-vector")}
      {Lisp-Entry "jazz.specialtypes" #f 1557 12 1557 29 ("16" "make-vector")}
      {Lisp-Entry "jazz.table-type" #f 1561 12 1561 27 ("make-table" "%%structure-type")}
      {Lisp-Entry "jazz.port-type" #f 1565 12 1565 26 ("open-output-string" "%%structure-type")}
      {Lisp-Entry "jazz.thread-type" #f 1569 12 1569 28 ("current-thread" "%%structure-type")}
      {Lisp-Entry "jazz.usertypes" #f 1596 8 1596 22 ()}
      {Lisp-Entry "jazz.register-usertype" #f 1600 9 1600 31 ("%%cons" "jazz.usertypes" "set!" "type" "test")}
      {Lisp-Entry "jazz.usertype" #f 1604 9 1604 22 ("%%cdr" "%%cdar" "%%caar" "%%null?" "if" "jazz.usertypes" "scan" "iter" "let" "object")}
      {Lisp-Entry "jazz.Interface" #f 1621 27 1621 41 ()}
      {Lisp-Entry "jazz.new-interface" #f 1624 9 1624 27 ("%%get-category-descendants" "%%cons" "%%set-category-descendants" "ascendant" "lambda" "for-each" "jazz.compute-interface-ancestors" "%%list->vector" "%%set-category-ancestors" "1" "+" "set!" "jazz.new-interface-rank" "0" "eq?" "test:" "%%make-table" "jazz.allocate-interface" "interface" "let" "ascendants" "name" "class")}
      {Lisp-Entry "jazz.compute-interface-ancestors" #f 1634 9 1634 41 ("%%list" "%%get-category-ancestors" "%%vector->list" "ascendant" "lambda" "map" "cons" "append" "%%apply" "jazz.remove-duplicates" "ascendants" "interface")}
      {Lisp-Entry "jazz.interface?" #f 1642 9 1642 24 ("jazz.Interface" "%%class-is?" "object")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Interface") 1657 21 1657 34 ("%%class-of" "interface" "jazz.of-subtype?" "object")}
      {Lisp-Entry "jazz.update-category" ("jazz.Interface") 1661 21 1661 41 ("interface" "jazz.update-interface")}
      {Lisp-Entry "jazz.update-interface" #f 1665 9 1665 30 ("%%get-category-descendants" "descendant" "%%vector-set!" "%%get-method-implementation-tree" "%%get-method-node-implementation" "implementation" "%%get-method-implementation-rank" "implementation-rank" "field" "lambda" "for-each" "%%get-category-virtual-size" "%%vector-ref" "jazz.resize-vector" "implementation-table" "%%get-class-interface-table" "interface-table" "let*" "jazz.Class" "%%class-is?" "category" "iter" "%%get-interface-rank" "interface-rank" "%%not-null?" "%%when" "jazz.update-interface-root-methods" "added-methods" "let" "interface")}
      {Lisp-Entry "jazz.update-interface-root-methods" #f 1684 9 1684 43 ("cons" "set!" "%%set-method-category-rank" "%%get-method-category-rank" "%%not" "jazz.virtual-method?" "and" "%%when" "field" "key" "lambda" "%%get-category-fields" "%%iterate-table" "added-methods" "%%get-interface-rank" "interface-rank" "let*" "interface")}
      {Lisp-Entry "jazz.Field" #f 1704 27 1704 37 ()}
      {Lisp-Entry "jazz.field?" #f 1707 9 1707 20 ("jazz.Field" "%%class-is?" "object")}
      {Lisp-Entry "jazz.field-name" #f 1711 9 1711 24 ("%%get-field-name" "field")}
      {Lisp-Entry "jazz.find-field" #f 1715 9 1715 24 ("jazz.find-field" "and" "%%get-class-ascendant" "ascendant" "let" "%%get-category-field" "or" "field-name" "category")}
      {Lisp-Entry "jazz.require-object-field" #f 1722 9 1722 34 ("%%get-category-name" "jazz.error" "%%not" "if" "jazz.find-field" "field" "%%get-object-class" "class" "let*" "name" "object")}
      {Lisp-Entry "jazz.Slot" #f 1738 27 1738 36 ()}
      {Lisp-Entry "jazz.new-slot" #f 1741 9 1741 22 ("jazz.Slot" "jazz.allocate-slot" "slot-initialize" "slot-offset" "slot-name")}
      {Lisp-Entry "jazz.slot?" #f 1745 9 1745 19 ("jazz.Slot" "%%class-is?" "object")}
      {Lisp-Entry "jazz.add-slot" #f 1749 9 1749 22 ("1" "%%fx+" "%%set-class-instance-size" "%%when" "%%list" "%%get-class-slots" "%%append" "%%set-class-slots" "jazz.add-field" "jazz.new-slot" "slot" "and" "slot-offset" "%%get-class-instance-size" "instance-size" "let*" "%%get-category-field" "or" "slot-allocate?" "slot-initialize" "slot-name" "class")}
      {Lisp-Entry "jazz.remove-slots" #f 1762 9 1762 26 ("%%length" "%%get-class-instance-size" "%%fx-" "%%set-class-instance-size" "%%set-class-slots" "%%get-class-slots" "actual" "let" "class")}
      {Lisp-Entry "jazz.slot-value" #f 1768 9 1768 24 ("%%get-slot-offset" "%%get-object-slot" "jazz.require-object-field" "slot" "let" "%%object?" "%%debug-assert" "slot-name" "object")}
      {Lisp-Entry "jazz.set-slot-value" #f 1774 9 1774 28 ("%%get-slot-offset" "%%set-object-slot" "jazz.require-object-field" "slot" "let" "%%object?" "%%debug-assert" "value" "slot-name" "object")}
      {Lisp-Entry "jazz.find-slot-offset" #f 1780 9 1780 30 ("%%get-slot-offset" "jazz.require-object-field" "slot" "let" "slot-name" "object")}
      {Lisp-Entry "jazz.initialize-slots" #f 1785 9 1785 30 ("%%set-object-slot" "%%when" "%%get-slot-initialize" "initialize" "%%get-slot-offset" "offset" "let" "slot" "lambda" "for-each" "%%get-class-slots" "slots" "%%get-object-class" "class" "let*" "object")}
      {Lisp-Entry "jazz.Property" #f 1804 27 1804 40 ()}
      {Lisp-Entry "jazz.new-property" #f 1807 9 1807 26 ("jazz.Property" "jazz.allocate-property" "slot-setter" "slot-getter" "slot-initialize" "slot-offset" "slot-name")}
      {Lisp-Entry "jazz.property?" #f 1811 9 1811 23 ("jazz.Property" "%%class-is?" "object")}
      {Lisp-Entry "jazz.property-getter" #f 1815 9 1815 29 ("%%get-property-getter" "property")}
      {Lisp-Entry "jazz.property-setter" #f 1819 9 1819 29 ("%%get-property-setter" "property")}
      {Lisp-Entry "jazz.all-properties" #f 1823 9 1823 28 ("else" "%%cdr" "%%cons" "%%car" "jazz.property?" "%%null?" "cond" "%%get-class-slots" "slots" "iter" "let" "category")}
      {Lisp-Entry "jazz.add-property" #f 1830 9 1830 26 ("1" "%%fx+" "%%set-class-instance-size" "%%when" "%%list" "%%get-class-slots" "%%append" "%%set-class-slots" "jazz.add-field" "jazz.new-property" "slot" "and" "slot-offset" "%%get-class-instance-size" "instance-size" "let*" "%%get-category-field" "or" "slot-setter" "slot-getter" "slot-allocate?" "slot-initialize" "slot-name" "class")}
      {Lisp-Entry "jazz.Method" #f 1851 27 1851 38 ()}
      {Lisp-Entry "jazz.method?" #f 1854 9 1854 21 ("jazz.Method" "%%class-is?" "object")}
      {Lisp-Entry "jazz.final-method?" #f 1858 9 1858 27 ("final" "'final" "%%get-method-dispatch-type" "%%eq?" "jazz.Method" "%%class-is?" "and" "field")}
      {Lisp-Entry "jazz.virtual-method?" #f 1863 9 1863 29 ("final" "'final" "%%get-method-dispatch-type" "%%neq?" "jazz.Method" "%%class-is?" "and" "field")}
      {Lisp-Entry "jazz.locate-method-owner" #f 1868 9 1868 33 ("%%get-interface-ascendants" "jazz.Interface" "%%get-class-interfaces" "jazz.find-in" "%%get-class-ascendant" "or" "jazz.Class" "%%class-is?" "%%get-category-field" "not" "cond" "iter" "let" "method-name" "category")}
      {Lisp-Entry "jazz.new-final-method" #f 1889 9 1889 30 ("final" "'final" "jazz.Method" "jazz.allocate-method" "implementation" "name")}
      {Lisp-Entry "jazz.add-final-method" #f 1893 9 1893 30 ("jazz.error" "else" "jazz.update-final-method" "%%eq?" "jazz.create-final-method" "not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.create-final-method" #f 1903 9 1903 33 ("jazz.add-field" "jazz.new-final-method" "method" "let" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.update-final-method" #f 1909 9 1909 33 ("jazz.error" "%%set-method-implementation" "jazz.final-method?" "if" "%%get-category-field" "field" "let" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.new-virtual-method" #f 1922 9 1922 32 ("jazz.Method" "jazz.allocate-method" "implementation-rank" "category-rank" "implementation-tree" "dispatch-type" "name")}
      {Lisp-Entry "jazz.add-virtual-method" #f 1926 9 1926 32 ("jazz.error" "else" "jazz.update-virtual-method" "%%eq?" "jazz.create-virtual-method" "not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "category")}
      {Lisp-Entry "jazz.create-virtual-method" #f 1936 9 1936 35 ("jazz.update-category" "jazz.add-field" "1" "+" "%%set-category-virtual-size" "%%set-method-implementation-rank" "%%get-category-virtual-size" "virtual-size" "jazz.new-virtual-method" "method" "jazz.new-method-node" "node" "interface" "'interface" "class" "'class" "jazz.Class" "%%class-is?" "if" "dispatch-type" "let*" "method-implementation" "method-name" "category")}
      {Lisp-Entry "jazz.update-virtual-method" #f 1948 9 1948 35 ("%%get-method-implementation-rank" "jazz.update-category" "jazz.error" "%%get-method-node-children" "%%set-method-node-next-implementation" "child" "lambda" "for-each" "%%set-method-node-implementation" "%%get-method-implementation-tree" "node" "jazz.virtual-method?" "if" "%%get-category-field" "field" "let" "method-implementation" "method-name" "category")}
      {Lisp-Entry "jazz.add-method-node" #f 1966 9 1966 29 ("error" "jazz.final-method?" "%%vector-set!" "%%vector-ref" "method-table" "%%get-class-interface-table" "interface" "%%get-class-class-table" "%%get-method-dispatch-type" "case" "dispatch-table" "let*" "lambda" "jazz.update-method-tree" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "category-rank" "jazz.create/update-method-node" "end-nodes" "start-node" "receive" "%%get-method-implementation-tree" "root-node" "jazz.virtual-method?" "%%get-category-field" "field" "else" "%%eq?" "jazz.error" "not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.create/update-method-node" #f 1993 9 1993 39 ("jazz.create-method-node" "jazz.update-method-node" "%%get-method-node-category" "%%eq?" "if" "jazz.locate-most-specific-method-node" "node" "let" "method-implementation" "class" "root-node")}
      {Lisp-Entry "jazz.create-method-node" #f 2000 9 2000 32 ("values" "%%cons" "%%set-method-node-children" "%%set-method-node-next-implementation" "%%set-method-node-next-node" "for-each" "jazz.new-method-node" "new-node" "old-children" "assq" "or" "%%cdr" "new-children" "assv" "%%subtype?" "%%get-method-node-category" "child-class" "let" "child" "lambda" "%%get-method-node-children" "jazz.partition" "partition" "let*" "method-implementation" "class" "node")}
      {Lisp-Entry "jazz.update-method-node" #f 2017 9 2017 32 ("values" "%%get-method-node-children" "%%set-method-node-next-implementation" "child" "lambda" "for-each" "%%set-method-node-implementation" "method-implementation" "class" "node")}
      {Lisp-Entry "jazz.Method-Node" #f 2030 27 2030 43 ()}
      {Lisp-Entry "jazz.new-method-node" #f 2033 9 2033 29 ("jazz.Method-Node" "jazz.allocate-method-node" "%%get-method-node-implementation" "if" "next-implementation" "let" "children" "next-node" "implementation" "category")}
      {Lisp-Entry "jazz.locate-most-specific-method-node" #f 2038 9 2038 46 ("%%cdr" "%%subtype?" "child-category" "%%car" "child" "let*" "%%null?" "%%get-method-node-children" "children" "sub-iter" "%%get-method-node-category" "%%eq?" "if" "iter" "let" "category" "node")}
      {Lisp-Entry "jazz.update-method-tree" #f 2052 9 2052 32 ("%%get-category-descendants" "descendant" "for-each" "%%memq" "%%not" "%%when" "category" "iter" "%%get-method-node-category" "node" "lambda" "map" "end-categories" "let" "end-nodes" "start-node" "proc")}
      {Lisp-Entry "jazz.call-into-incoherent" #f 2064 9 2064 34 ("jazz.error" "rest")}
      {Lisp-Entry "jazz.call-into-abstract" #f 2068 9 2068 32 ("jazz.error" "method" "class")}
      {Lisp-Entry "jazz.Queue" #f 2080 27 2080 37 ()}
      {Lisp-Entry "jazz.new-queue" #f 2083 9 2083 23 ("jazz.Queue" "jazz.allocate-queue")}
      {Lisp-Entry "jazz.enqueue" #f 2087 9 2087 21 ("%%set-cdr!" "pair" "jazz.queue-copy-last-list" "%%get-queue-last-list" "%%not-null?" "%%when" "else" "%%set-queue-list" "%%cons" "%%set-queue-current" "%%null?" "cond" "%%get-queue-current" "current" "let" "object" "queue")}
      {Lisp-Entry "jazz.enqueue-list" #f 2100 9 2100 26 ("%%set-cdr!" "%%set-queue-last-anchor" "jazz.queue-copy-last-list" "%%get-queue-last-list" "else" "%%set-queue-list" "%%set-queue-last-list" "%%set-queue-current" "%%get-queue-current" "%%null?" "cond" "%%not-null?" "%%when" "lst" "queue")}
      {Lisp-Entry "jazz.queue-copy-last-list" #f 2114 9 2114 34 ("%%set-queue-last-anchor" "%%set-queue-last-list" "%%set-cdr!" "else" "%%get-queue-list" "jazz.last-tail" "%%set-queue-current" "%%get-queue-last-list" "jazz.list-copy" "%%set-queue-list" "%%null?" "cond" "%%get-queue-last-anchor" "last-anchor" "let" "queue")}
      {Lisp-Entry "jazz.queue-list" #f 2126 9 2126 24 ("%%get-queue-list" "queue")}
      {Lisp-Entry "jazz.reset-queue" #f 2130 9 2130 25 ("%%set-queue-current" "%%set-queue-last-anchor" "%%set-queue-last-list" "%%set-queue-list" "queue")}}})
"serial"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "serial.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.serial" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.object->serial" #f 42 13 42 32 ("object->serial-number" "obj")}
      {Lisp-Entry "jazz.serial->object" #f 45 13 45 32 ("serial-number->object" "number")}
      {Lisp-Entry "jazz.object->serial-symbol" #f 49 13 49 39 ("jazz.object->serial" "number->string" "string-append" "string->symbol" "obj")}
      {Lisp-Entry "jazz.serial-number" #f 56 11 56 29 ("1")}
      {Lisp-Entry "jazz.serialized-objects" #f 59 11 59 34 ("equal?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.object->serial" #f 62 12 62 31 ("%%table-set!" "1" "%%fx+" "set!" "jazz.serial-number" "number" "let" "jazz.serialized-objects" "%%table-ref" "or" "obj")}
      {Lisp-Entry "jazz.serial->object" #f 69 12 69 31 ("%%car" "jazz.error" "%%null?" "continuation-return" "%%fx=" "if" "value" "key" "jazz.serialized-objects" "%%iterate-table" "return" "lambda" "continuation-capture" "rest" "number")}}})
"specific"
 ({Lisp-File-Entry {File core "src" "core" "generic" "syntax" "specific.scm"} 1238328024
    {Lisp-Entry "core.generic.syntax.specific" #f 44 18 44 46 ("jazz.Specific" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Specific" #f 47 19 47 32 ("%%set-specific-descendant-specifics" "%%get-specific-descendant-specifics" "descendant-specifics" "%%set-specific-ancestor-specifics" "%%get-specific-ancestor-specifics" "ancestor-specifics" "%%set-specific-implementation" "%%get-specific-implementation" "implementation" "%%set-specific-dynamic-signature" "%%get-specific-dynamic-signature" "dynamic-signature" "jazz.allocate-specific" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Specific" #f 54 27 54 40 ()}
      {Lisp-Entry "jazz.define-specific" #f 57 20 57 40 ("jazz.expand-define-specific" "apply" "rest")}}}
  {Lisp-File-Entry {File core "src" "core" "generic" "runtime" "specific.scm"} 1238328024
    {Lisp-Entry "core.generic.runtime.specific" #f 38 18 38 47 ()
      {Lisp-Entry "jazz.new-specific" #f 41 9 41 26 ("jazz.Specific" "jazz.allocate-specific" "implementation" "signature-proc")}}})
"string"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "string.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.string" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.memstring" #f 40 9 40 23 ("1" "%%fx+" "else" "%%string-ref" "%%eqv?" "%%fx=" "cond" "0" "n" "iter" "%%string-length" "len" "let" "string" "char")}}})
"symbol"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "symbol.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.symbol" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.identifier-module" #f 45 9 45 31 ("0" "%%substring" "%%string->symbol" "%%not" "if" "jazz.string-find-reversed" "pos" "%%symbol->string" "str" "let*" "%%symbol?" "%%assert" "identifier")}
      {Lisp-Entry "jazz.identifier-name" #f 54 9 54 29 ("%%string-length" "1" "%%fx+" "%%substring" "%%string->symbol" "%%not" "if" "jazz.string-find-reversed" "pos" "%%symbol->string" "str" "let*" "%%symbol?" "%%assert" "identifier")}
      {Lisp-Entry "jazz.specifier?" #f 68 9 68 24 ("1" "%%fx-" "0" "%%string-ref" "%%eqv?" "2" "%%fx>" "%%string-length" "len" "%%symbol->string" "str" "let" "%%symbol?" "and" "expr")}
      {Lisp-Entry "jazz.specifier->name" #f 77 9 77 29 ("%%symbol->string" "%%string->symbol" "%%string-length" "%%fx-" "1" "%%substring" "string" "lambda" "extract" "let" "specifier")}
      {Lisp-Entry "jazz.name->specifier" #f 84 9 84 29 ("%%symbol->string" "%%string-append" "%%string->symbol" "name")}
      {Lisp-Entry "jazz.binding-specifier" #f 88 9 88 31 ("%%car" "jazz.specifier?" "%%pair?" "and" "jazz.source-code" "%%cdr" "cdr-binding" "let" "binding")}
      {Lisp-Entry "jazz.enumerator?" #f 100 9 100 25 ("0" "%%symbol->string" "%%string-ref" "%%eqv?" "%%symbol?" "and" "obj")}
      {Lisp-Entry "jazz.enumerator->symbol" #f 105 9 105 32 ("%%string-length" "1" "%%substring" "%%string->symbol" "%%symbol->string" "name" "let" "obj")}}})
"syntax"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "syntax.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.syntax" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.source?" #f 40 9 40 21 ("%%source?" "obj")}
      {Lisp-Entry "jazz.source-code" #f 43 9 43 25 ("%%source-code" "%%source?" "if" "expr")}
      {Lisp-Entry "jazz.source-locat" #f 48 9 48 26 ("%%source-locat" "src")}
      {Lisp-Entry "jazz.desourcify" #f 51 9 51 24 ("%%desourcify" "expr")}
      {Lisp-Entry "jazz.desourcify-list" #f 54 9 54 29 ("jazz.desourcify" "map" "lst")}
      {Lisp-Entry "jazz.sourcify" #f 57 9 57 22 ("%%sourcify" "src" "expr")}
      {Lisp-Entry "jazz.sourcify-if" #f 60 9 60 25 ("jazz.sourcify" "jazz.source?" "if" "src" "expr")}
      {Lisp-Entry "jazz.locat-container" #f 65 9 65 29 ("%%locat-container" "locat")}
      {Lisp-Entry "jazz.locat-position" #f 68 9 68 28 ("%%locat-position" "locat")}
      {Lisp-Entry "jazz.locat->file/line/col" #f 71 9 71 34 ("list" "%%filepos-col" "col" "%%filepos-line" "line" "%%locat-position" "%%position->filepos" "filepos" "%%locat-container" "%%container->path" "file" "let" "if" "locat")}
      {Lisp-Entry "jazz.container->path" #f 82 9 82 29 ("%%container->path" "container")}
      {Lisp-Entry "jazz.position->filepos" #f 85 9 85 31 ("%%position->filepos" "position")}
      {Lisp-Entry "jazz.filepos-line" #f 88 9 88 26 ("%%filepos-line" "filepos")}
      {Lisp-Entry "jazz.filepos-col" #f 91 9 91 25 ("%%filepos-col" "filepos")}
      {Lisp-Entry "jazz.present-source" #f 100 9 100 28 ("else" "present-vector" "%%vector?" "present-list" "%%pair?" "present-src" "%%source?" "cond" "obj")
        {Lisp-Entry "present-src" #f 102 11 102 22 ("%%filepos-col" "1" "%%filepos-line" "%%fx+" "jazz.present-source" "source" "'source" "%%vector" "%%source-locat" "%%locat-position" "pos" "jazz.source-code" "code" "let" "src")}
        {Lisp-Entry "present-list" #f 110 11 110 23 ("else" "%%null?" "%%cdr" "present-list" "%%car" "jazz.present-source" "%%cons" "%%pair?" "cond" "lst")}
        {Lisp-Entry "present-vector" #f 119 11 119 25 ("%%vector-ref" "jazz.present-source" "%%vector-set!" "begin" "%%fx<" "if" "1" "%%fx-" "i" "loop" "let" "0" "%%make-vector" "x" "%%vector-length" "len" "let*" "vect")}}}})
"unspecified"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "unspecified.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.unspecified" #f 37 18 37 47 ()
      {Lisp-Entry "jazz.unspecified" #f 40 9 40 25 ("%%unspecified")}
      {Lisp-Entry "jazz.unspecified?" #f 44 9 44 26 ("%%unspecified?" "expr")}
      {Lisp-Entry "jazz.specified?" #f 48 9 48 24 ("%%unspecified?" "%%not" "expr")}}})
"vector"
 ({Lisp-File-Entry {File core "src" "core" "base" "runtime" "vector.scm"} 1238328024
    {Lisp-Entry "core.base.runtime.vector" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.vector-for-each" #f 40 9 40 29 ("1" "%%fx+" "%%vector-ref" "begin" "%%fx<" "if" "0" "n" "iter" "%%vector-length" "len" "let" "vector" "proc")}
      {Lisp-Entry "jazz.vector-memq?" #f 49 9 49 26 ("1" "%%fx+" "%%vector-ref" "%%eq?" "%%fx<" "if" "0" "n" "iter" "%%vector-length" "len" "let" "vector" "obj")}
      {Lisp-Entry "jazz.resize-vector" #f 59 9 59 27 ("%%vector-ref" "%%vector-set!" "0" ">=" "%%when" "1" "%%vector-length" "min" "-" "offset" "iter" "%%make-vector" "new-vector" "let" "size" "vector")}}})
"walker"
 ({Lisp-File-Entry {File core "src" "core" "library" "syntax" "walker.scm"} 1246942297
    {Lisp-Entry "core.library.syntax.walker" #f 61 18 61 44 ("jazz.new-core-dialect" "core" "'core" "jazz.register-dialect" "jazz.Core-Walker" "jazz.Core-Dialect" "jazz.Walker" "jazz.Time-Special" "jazz.Parameterize" "jazz.C-Function" "jazz.C-Initialize" "jazz.C-Named-Declare-Declaration" "jazz.C-Declare" "jazz.C-Include" "jazz.Declare" "jazz.Or" "jazz.And" "jazz.Case" "jazz.Cond" "jazz.If" "jazz.dialect.kernel.not-null?" "'jazz.dialect.kernel.not-null?" "jazz.not-type-tests" "jazz.dialect.kernel.unspecified?" "'jazz.dialect.kernel.unspecified?" "jazz.dialect.kernel.values?" "'jazz.dialect.kernel.values?" "jazz.dialect.kernel.foreign?" "'jazz.dialect.kernel.foreign?" "jazz.dialect.kernel.thread?" "'jazz.dialect.kernel.thread?" "jazz.dialect.kernel.table?" "'jazz.dialect.kernel.table?" "jazz.Method" "jazz.dialect.kernel.method?" "'jazz.dialect.kernel.method?" "jazz.Slot" "jazz.dialect.kernel.slot?" "'jazz.dialect.kernel.slot?" "jazz.Field" "jazz.dialect.kernel.field?" "'jazz.dialect.kernel.field?" "jazz.Interface" "jazz.dialect.kernel.interface?" "'jazz.dialect.kernel.interface?" "jazz.Class" "jazz.dialect.kernel.class?" "'jazz.dialect.kernel.class?" "jazz.Category" "jazz.dialect.kernel.category?" "'jazz.dialect.kernel.category?" "jazz.dialect.kernel.object?" "'jazz.dialect.kernel.object?" "jazz.dialect.kernel.keyword?" "'jazz.dialect.kernel.keyword?" "jazz.dialect.kernel.flonum?" "'jazz.dialect.kernel.flonum?" "jazz.dialect.kernel.fixnum?" "'jazz.dialect.kernel.fixnum?" "scheme.dialect.kernel.eof-object?" "'scheme.dialect.kernel.eof-object?" "scheme.dialect.kernel.output-port?" "'scheme.dialect.kernel.output-port?" "scheme.dialect.kernel.input-port?" "'scheme.dialect.kernel.input-port?" "scheme.dialect.kernel.procedure?" "'scheme.dialect.kernel.procedure?" "jazz.dialect.kernel.continuation?" "'jazz.dialect.kernel.continuation?" "jazz.dialect.kernel.u8vector?" "'jazz.dialect.kernel.u8vector?" "scheme.dialect.kernel.vector?" "'scheme.dialect.kernel.vector?" "scheme.dialect.kernel.string?" "'scheme.dialect.kernel.string?" "scheme.dialect.kernel.char?" "'scheme.dialect.kernel.char?" "scheme.dialect.kernel.symbol?" "'scheme.dialect.kernel.symbol?" "scheme.dialect.kernel.pair?" "'scheme.dialect.kernel.pair?" "scheme.dialect.kernel.null?" "'scheme.dialect.kernel.null?" "scheme.dialect.kernel.list?" "'scheme.dialect.kernel.list?" "scheme.dialect.kernel.boolean?" "'scheme.dialect.kernel.boolean?" "scheme.dialect.kernel.integer?" "'scheme.dialect.kernel.integer?" "scheme.dialect.kernel.rational?" "'scheme.dialect.kernel.rational?" "scheme.dialect.kernel.real?" "'scheme.dialect.kernel.real?" "scheme.dialect.kernel.complex?" "'scheme.dialect.kernel.complex?" "scheme.dialect.kernel.number?" "'scheme.dialect.kernel.number?" "jazz.type-tests" "##string-set!" "##vector-set!" "jazz.dialect.language.set-element!" "'jazz.dialect.language.set-element!" "##string-ref" "##vector-ref" "list-ref" "jazz.dialect.language.element" "'jazz.dialect.language.element" "##string-length" "##vector-length" "##length" "jazz.dialect.language.length" "'jazz.dialect.language.length" "##cdr" "scheme.dialect.kernel.cdr" "'scheme.dialect.kernel.cdr" "##car" "scheme.dialect.kernel.car" "'scheme.dialect.kernel.car" "##eqv?" "scheme.dialect.kernel.eqv?" "'scheme.dialect.kernel.eqv?" "##eq?" "scheme.dialect.kernel.eq?" "'scheme.dialect.kernel.eq?" "##not" "scheme.dialect.kernel.not" "'scheme.dialect.kernel.not" "##flonum->fixnum" "jazz.dialect.kernel.flonum->fixnum" "'jazz.dialect.kernel.flonum->fixnum" "##fixnum->flonum" "jazz.dialect.kernel.fixnum->flonum" "'jazz.dialect.kernel.fixnum->flonum" "jazz.dialect.kernel.fl/" "'jazz.dialect.kernel.fl/" "jazz.dialect.kernel.fl*" "'jazz.dialect.kernel.fl*" "jazz.dialect.kernel.fl-" "'jazz.dialect.kernel.fl-" "jazz.dialect.kernel.fl+" "'jazz.dialect.kernel.fl+" "jazz.dialect.kernel.fx*" "'jazz.dialect.kernel.fx*" "jazz.dialect.kernel.fx-" "'jazz.dialect.kernel.fx-" "jazz.dialect.kernel.fx+" "'jazz.dialect.kernel.fx+" "##flround" "scheme.dialect.kernel.round" "'scheme.dialect.kernel.round" "##fltruncate" "scheme.dialect.kernel.truncate" "'scheme.dialect.kernel.truncate" "##flceiling" "scheme.dialect.kernel.ceiling" "'scheme.dialect.kernel.ceiling" "##flfloor" "scheme.dialect.kernel.floor" "'scheme.dialect.kernel.floor" "##fxquotient" "scheme.dialect.kernel.quotient" "'scheme.dialect.kernel.quotient" "##/" "##fl/" "scheme.dialect.kernel./" "'scheme.dialect.kernel./" "##*" "##fl*" "##fx*" "scheme.dialect.kernel.*" "'scheme.dialect.kernel.*" "##-" "##fl-" "##fx-" "scheme.dialect.kernel.-" "'scheme.dialect.kernel.-" "##+" "##fl+" "##fx+" "scheme.dialect.kernel.+" "'scheme.dialect.kernel.+" "##fl>=" "##fx>=" "scheme.dialect.kernel.>=" "'scheme.dialect.kernel.>=" "##fl>" "##fx>" "scheme.dialect.kernel.>" "'scheme.dialect.kernel.>" "##fl<=" "##fx<=" "scheme.dialect.kernel.<=" "'scheme.dialect.kernel.<=" "##fl<" "##fx<" "scheme.dialect.kernel.<" "'scheme.dialect.kernel.<" "##=" "##fl=" "##fx=" "scheme.dialect.kernel.=" "'scheme.dialect.kernel.=" "jazz.add-primitive-patterns" "declaration" "arguments" "operator" "jazz.emit-primitive-new-call" "environment" "arguments-codes" "locator" "jazz.emit-specialized-locator" "jazz.Call" "jazz.Do" "jazz.Begin" "jazz.Internal-Define" "jazz.Body" "jazz.Receive" "jazz.Letrec" "jazz.Letstar" "jazz.Named-Let" "jazz.Let" "jazz.Lambda" "jazz.Assignment" "jazz.Reference" "jazz.Quasiquote" "jazz.Delay" "jazz.Constant" "jazz.Proclaim" "jazz.Expression" "jazz.Code" "jazz.Annotated-Frame" "jazz.Restricted-Binding" "jazz.Annotated-Variable" "jazz.Syntax-Form" "jazz.Macro-Form" "jazz.Special-Form" "jazz.Form-Binding" "jazz.Macro-Symbol" "jazz.Dynamic-Self-Binding" "jazz.Self-Binding" "jazz.Rest-Parameter" "jazz.Named-Parameter" "jazz.Optional-Parameter" "jazz.Dynamic-Parameter" "jazz.Parameter" "jazz.NextMethod-Variable" "jazz.Variable" "jazz.Symbol-Binding" "jazz.Signature" "jazz.Walk-Frame" "jazz.Unresolved-Error" "jazz.Walk-Error" "jazz.Walk-Warning" "jazz.Walk-Problems" "jazz.Walk-Problem" "jazz.Walk-Location" "jazz.Walk-Context" "jazz.C-Definition-Declaration" "jazz.C-Type-Declaration" "jazz.Syntax-Declaration" "jazz.Macro-Declaration" "Unspecified" "'Unspecified" "EOF" "'EOF" "Values" "'Values" "Foreign" "'Foreign" "Promise" "'Promise" "Thread" "'Thread" "Table" "'Table" "U8Vector" "'U8Vector" "Vector" "'Vector" "Keyword" "'Keyword" "Symbol" "'Symbol" "String" "'String" "Procedure" "'Procedure" "Continuation" "'Continuation" "Port" "'Port" "Pair" "'Pair" "Null" "'Null" "List" "'List" "Flonum" "'Flonum" "Fixnum" "'Fixnum" "Integer" "'Integer" "Rational" "'Rational" "Real" "'Real" "Complex" "'Complex" "Number" "'Number" "Char" "'Char" "Boolean" "'Boolean" "Object" "'Object" "jazz.primitive-declarations" "void" "'void" "jazz.Unspecified" "unspecified" "'unspecified" "jazz.EOF" "eof" "'eof" "jazz.Values" "values" "'values" "jazz.Foreign" "foreign" "'foreign" "jazz.Promise" "promise" "'promise" "jazz.Thread" "thread" "'thread" "jazz.Table" "table" "'table" "jazz.U8Vector" "u8vector" "'u8vector" "jazz.Vector" "vector" "'vector" "jazz.Keyword" "keyword" "'keyword" "jazz.Symbol" "symbol" "'symbol" "jazz.String" "string" "'string" "jazz.Procedure" "procedure" "'procedure" "jazz.Continuation" "continuation" "'continuation" "jazz.Port" "port" "'port" "jazz.Pair" "pair" "'pair" "jazz.Null" "null" "'null" "jazz.List" "list" "'list" "jazz.Flonum" "fl" "'fl" "jazz.Fixnum" "fx" "'fx" "jazz.Integer" "int" "'int" "jazz.Rational" "rational" "'rational" "jazz.Real" "real" "'real" "jazz.Complex" "complex" "'complex" "jazz.Number" "number" "'number" "jazz.Char" "char" "'char" "jazz.Boolean" "bool" "'bool" "jazz.Object" "object" "'object" "any" "'any" "jazz.primitive-types" "%%table-set!" "jazz.Any" "jazz.Any-Class" "type" "lambda" "jazz.object-declaration?" "set!" "jazz.Nillable-Type" "jazz.Template-Type" "jazz.Union-Type" "jazz.Complement-Type" "jazz.Restriction-Type" "jazz.Values-Type" "jazz.Category-Type" "jazz.Function-Type" "jazz.Rest-Type" "jazz.Key-Type" "jazz.Opt-Type" "jazz.Void" "jazz.Void-Class" "jazz.Autoload-Declaration" "jazz.Export-Declaration" "jazz.Import-Invoice" "jazz.Export-Invoice" "jazz.Library-Invoice" "jazz.Library-Declaration" "jazz.Namespace-Declaration" "jazz.Module-Declaration" "jazz.Autoload-Reference" "jazz.Export-Reference" "jazz.Library-Reference" "jazz.Declaration-Reference" "jazz.Declaration" "jazz.Lexical-Binding" "jazz.Walk-Binding" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.private-access" #f 70 8 70 27 ("0")}
      {Lisp-Entry "jazz.public-access" #f 74 8 74 26 ("1")}
      {Lisp-Entry "jazz.protected-access" #f 78 8 78 29 ("2")}
      {Lisp-Entry "jazz.make-access-lookups" #f 82 9 82 33 ("eq?" "test:" "%%make-table" "%%vector-set!" "begin" "%%fx<=" "if" "0" "n" "iter" "1" "%%fx+" "%%make-vector" "lookups" "let" "access-level")}
      {Lisp-Entry "jazz.Walk-Binding" #f 97 27 97 44 ()}
      {Lisp-Entry "jazz.emit-type" ("jazz.Walk-Binding") 100 21 100 35 ("type" "jazz.emit-binding-reference" "jazz.sourcified-form" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Binding") 104 30 104 54 ("symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Walk-Binding") 105 30 105 58 ()}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Walk-Binding") 106 30 106 57 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Walk-Binding") 107 30 107 61 ("arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Walk-Binding") 108 30 108 52 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Walk-Binding") 109 30 109 60 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Walk-Binding") 110 30 110 67 ("source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Walk-Binding") 111 30 111 59 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Walk-Binding") 112 30 112 58 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Walk-Binding") 113 30 113 57 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" ("jazz.Walk-Binding") 114 30 114 57 ("form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Walk-Binding") 115 30 115 59 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Walk-Binding") 116 30 116 59 ("form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Binding") 119 21 119 45 ("symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Walk-Binding") 123 21 123 49 ("jazz.unspecified")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Walk-Binding") 127 21 127 48 ("binding" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Walk-Binding") 131 21 131 52 ("jazz.unspecified" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Walk-Binding") 135 21 135 43 ("jazz.call-return-type" "jazz.codes-forms" "jazz.emit-binding-reference" "jazz.sourcified-form" "jazz.new-code" "binding" "%%get-lexical-binding-type" "type" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Walk-Binding") 144 21 144 51 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Walk-Binding") 148 21 148 58 ("jazz.walk-error" "binding" "jazz.walk-binding-assignable?" "%%not" "%%when" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Walk-Binding") 153 21 153 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Walk-Binding") 157 21 157 49 ("jazz.unspecified" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Walk-Binding") 161 21 161 48 ()}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Walk-Binding") 165 21 165 50 ()}
      {Lisp-Entry "jazz.Lexical-Binding" #f 177 27 177 47 ()}
      {Lisp-Entry "jazz.print-object?" ("jazz.Lexical-Binding") 180 21 180 39 ()}
      {Lisp-Entry "jazz.print-object" ("jazz.Lexical-Binding") 183 21 183 38 ("jazz.object->serial" "%%get-lexical-binding-name" "binding" "%%get-object-class" "%%get-category-name" "jazz.format" "detail" "output")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Lexical-Binding") 190 21 190 45 ("binding" "%%get-lexical-binding-name" "%%eq?" "if" "symbol")}
      {Lisp-Entry "jazz.get-lexical-binding-name" #f 196 9 196 38 ("%%get-lexical-binding-name" "binding")}
      {Lisp-Entry "jazz.Declaration" #f 208 27 208 43 ()}
      {Lisp-Entry "jazz.setup-declaration" #f 211 9 211 31 ("%%get-declaration-toplevel" "%%set-declaration-toplevel" "%%get-declaration-locator" "%%compose-name" "%%not" "if" "%%set-declaration-locator" "%%get-lexical-binding-name" "name" "%%get-declaration-parent" "parent" "let" "new-declaration")}
      {Lisp-Entry "jazz.resolve-declaration" ("jazz.Declaration") 218 30 218 54 ()}
      {Lisp-Entry "jazz.resolve-declaration" ("jazz.Declaration") 221 21 221 45 ("declaration")}
      {Lisp-Entry "jazz.get-declaration-path" #f 225 9 225 34 ("jazz.reverse!" "%%cons" "%%list" "%%not" "if" "%%get-declaration-parent" "parent" "%%get-lexical-binding-name" "name" "let" "lambda" "proc" "letrec" "declaration")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Declaration") 236 21 236 45 ("binding" "jazz.lookup-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Declaration") 240 21 240 52 ("declaration" "%%get-declaration-locator" "jazz.walk-error" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Declaration") 244 30 244 53 ("external?" "symbol")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Declaration") 247 21 247 44 ("external?" "symbol")}
      {Lisp-Entry "jazz.get-declaration-inclusions" ("jazz.Declaration") 251 30 251 61 ()}
      {Lisp-Entry "jazz.get-declaration-inclusions" ("jazz.Declaration") 254 21 254 52 ()}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Declaration") 258 30 258 51 ("environment")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Declaration") 261 21 261 42 ("declaration" "jazz.error" "environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.Declaration") 265 30 265 64 ()}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.Declaration") 268 21 268 55 ()}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Declaration") 272 30 272 51 ("s" "k" "f")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Declaration") 275 21 275 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.declaration-result" #f 279 9 279 32 ("jazz.unspecified" "eval" "'eval" "jazz.walk-for" "%%eq?" "if")}
      {Lisp-Entry "jazz.Declaration-Reference" #f 293 27 293 53 ()}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Declaration-Reference") 296 30 296 52 ("library-declaration")}
      {Lisp-Entry "jazz.Library-Reference" #f 307 27 307 49 ()}
      {Lisp-Entry "jazz.new-library-reference" #f 310 9 310 35 ("jazz.Library-Reference" "jazz.allocate-library-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Library-Reference") 314 21 314 43 ("%%set-declaration-reference-declaration" "%%get-declaration-reference-name" "jazz.outline-library" "declaration" "let" "declaration-reference" "%%get-declaration-reference-declaration" "or" "library-declaration")}
      {Lisp-Entry "jazz.Export-Reference" #f 329 27 329 48 ()}
      {Lisp-Entry "jazz.new-export-reference" #f 332 9 332 34 ("jazz.Export-Reference" "jazz.allocate-export-reference" "library-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Declaration-Reference") 336 21 336 43 ("%%set-declaration-reference-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.new-export-declaration" "declaration" "let" "%%get-declaration-reference-name" "jazz.parse-exported-symbol" "symbol" "name" "receive" "declaration-reference" "%%get-declaration-reference-declaration" "or" "library-declaration")}
      {Lisp-Entry "jazz.parse-exported-symbol" #f 344 9 344 35 ("jazz.identifier-name" "values" "jazz.composite-name?" "if" "name" "library-declaration")}
      {Lisp-Entry "jazz.Autoload-Reference" #f 358 27 358 50 ()}
      {Lisp-Entry "jazz.new-autoload-reference" #f 361 9 361 36 ("jazz.Autoload-Reference" "jazz.allocate-autoload-reference" "library-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-autoload-reference" #f 365 9 365 40 ("%%set-declaration-reference-declaration" "%%assert" "jazz.new-autoload-declaration" "declaration" "jazz.Any" "type" "%%get-declaration-reference-name" "name" "let*" "%%get-declaration-reference-declaration" "or" "exported-library-reference" "library-declaration" "declaration-reference")}
      {Lisp-Entry "jazz.Module-Declaration" #f 383 27 383 50 ()}
      {Lisp-Entry "jazz.new-module-declaration" #f 386 9 386 36 ("jazz.setup-declaration" "uptodate" "'uptodate" "jazz.Module-Declaration" "jazz.allocate-module-declaration" "new-declaration" "let" "requires" "parent" "access" "name")}
      {Lisp-Entry "jazz.Namespace-Declaration" #f 400 27 400 53 ()}
      {Lisp-Entry "jazz.find-declaration" #f 403 9 403 30 ("jazz.private-access" "%%get-access-lookup" "%%table-ref" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.get-private-lookup" #f 410 9 410 32 ("jazz.private-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.get-public-lookup" #f 413 9 413 31 ("jazz.public-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.get-protected-lookup" #f 416 9 416 34 ("jazz.protected-access" "%%get-access-lookup" "namespace-declaration")}
      {Lisp-Entry "jazz.Library-Declaration" #f 426 27 426 51 ()}
      {Lisp-Entry "jazz.new-library-declaration" #f 429 9 429 37 ("jazz.setup-declaration" "jazz.new-queue" "eq?" "test:" "%%make-table" "jazz.public-access" "jazz.make-access-lookups" "uptodate" "'uptodate" "jazz.Library-Declaration" "jazz.allocate-library-declaration" "new-declaration" "let" "dialect-invoice" "dialect-name" "parent" "access" "name")}
      {Lisp-Entry "jazz.add-library-require" #f 435 9 435 33 ("%%list" "%%get-library-declaration-requires" "%%append" "%%set-library-declaration-requires" "jazz.load-module" "syntax" "'syntax" "%%eq?" "%%when" "phase" "feature-requirement" "module-name" "lambda" "jazz.parse-require" "require" "library-declaration")}
      {Lisp-Entry "jazz.add-library-import" #f 443 9 443 32 ("jazz.table-merge-without-conflicts!" "jazz.public-access" "imported" "imported-library-declaration" "%%get-library-invoice-only" "only" "jazz.private-access" "%%get-access-lookup" "private" "%%list" "%%get-library-declaration-imports" "%%append" "%%set-library-declaration-imports" "if" "%%get-lexical-binding-name" "jazz.load-module" "%%get-library-invoice-library" "let" "syntax" "'syntax" "%%get-library-invoice-phase" "%%eq?" "%%when" "register?" "library-invoice" "library-declaration")}
      {Lisp-Entry "jazz.add-library-export" #f 459 9 459 32 ("jazz.table-merge-without-conflicts!" "exported-library-declaration" "else" "jazz.resolve-autoload-reference" "exported-library-reference" "%%table-set!" "%%get-declaration-reference-name" "jazz.identifier-name" "name" "declaration-reference" "lambda" "for-each" "cond" "%%get-export-invoice-autoload" "autoload" "%%get-library-invoice-only" "only" "jazz.public-access" "%%get-access-lookup" "public" "%%list" "%%get-library-declaration-exports" "%%append" "%%set-library-declaration-exports" "%%get-lexical-binding-name" "jazz.load-module" "%%get-library-invoice-library" "jazz.resolve-reference" "let" "syntax" "'syntax" "%%get-library-invoice-phase" "%%eq?" "%%when" "library-invoice" "library-declaration")}
      {Lisp-Entry "jazz.table-merge-without-conflicts!" #f 483 9 483 44 ("%%cddr" "%%cadr" "%%get-declaration-locator" "%%car" "%%list" "conflict" "lambda" "map" "%%get-lexical-binding-name" "jazz.error" "%%null?" "jazz.find-actual-conflicts" "conflicts" "%%fx+" "%%fx=" "%%not" "%%when" "%%table-merge!" "add-count" "%%table-length" "table-count" "let" "add" "table" "suffix" "library-declaration")}
      {Lisp-Entry "jazz.find-actual-conflicts" #f 502 9 502 35 ("%%list" "%%cons" "set!" "%%neq?" "%%when" "%%table-ref" "actual" "value" "key" "lambda" "%%iterate-table" "lst" "let" "add" "table")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Library-Declaration") 512 21 512 44 ("declaration" "%%get-access-lookup" "%%table-ref" "jazz.private-access" "jazz.public-access" "if" "access" "let" "external?" "symbol")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Library-Declaration") 519 21 519 42 (",@body-expansion" ",@variables-expansion" ",@literals-expansion" ",@autoloads-expansion" ",@inclusions-expansion" "jazz.queue-list" "%%get-library-declaration-imports" "%%get-library-declaration-exports" "%%get-lexical-binding-name" "syntax" "'syntax" "and" "%%get-library-invoice-phase" "jazz.resolve-reference" "library-declaration" ",symbol-name" ",name" "',name" "jazz.register-autoload" "jazz.compose-name" "symbol-name" "jazz.identifier-name" "name" "decl" "%%get-library-invoice-library" "%%get-declaration-reference-name" "cond" "%%get-export-invoice-autoload" "autoload" "%%get-library-invoice-only" "only" "library-invoice" "%%get-library-declaration-requires" ",module-name" "',module-name" "phase" "feature-requirement" "module-name" "jazz.parse-require" "spec" "lambda" "for-each" ",dialect-name" "',dialect-name" "core" "'core" "%%neq?" "%%when" "%%get-library-declaration-dialect-name" "dialect-name" "core.library" "'core.library" "jazz.load-module" "jazz.enqueue" "jazz.new-queue" "queue" "library" "'library" "jazz.declares" "else" "eval" "jazz.walk-for" "case" "begin" "jazz.emit-library-autoloads" "autoloads-expansion" "jazz.emit-library-variables" "variables-expansion" "jazz.emit-library-literals" "literals-expansion" "jazz.emit-library-inclusions" "inclusions-expansion" "declaration" "%%get-namespace-declaration-body" "jazz.emit-namespace-statements" "body-expansion" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Library-Declaration") 574 21 574 42 ("%%get-namespace-declaration-body" "jazz.fold-statements" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.get-library-proclaim" #f 578 9 578 34 ("%%get-library-declaration-proclaims" "%%table-ref" "default" "proclaim-name" "library-declaration")}
      {Lisp-Entry "jazz.set-library-proclaim" #f 582 9 582 34 ("%%get-library-declaration-proclaims" "%%table-set!" "value" "proclaim-name" "library-declaration")}
      {Lisp-Entry "jazz.all-warnings" #f 586 8 586 25 ()}
      {Lisp-Entry "jazz.proclaim" #f 590 9 590 22 ("jazz.remove!" "else" "%%cons" "jazz.set-library-proclaim" "'warn" "jazz.get-library-proclaim" "library-warnings" "jazz.error" "%%memq" "%%not" "cond" "warning" "lambda" "for-each" "jazz.all-warnings" "%%null?" "if" "warnings" "let" "warn" "case" "parse-clause" "parameters" "kind" "not?" "receive" "clause" "library-declaration")
        {Lisp-Entry "parse-not" #f 591 11 591 20 ("values" "%%cdr" "parameters" "%%car" "kind" "let" "%%pair?" "%%assert" "clause" "not?")}
        {Lisp-Entry "parse-clause" #f 597 11 597 23 ("%%cdr" "parse-not" "not" "'not" "%%car" "%%eq?" "if" "%%pair?" "%%assert" "clause")}}
      {Lisp-Entry "jazz.get-library-warn?" #f 623 9 623 31 ("warn" "'warn" "jazz.get-library-proclaim" "%%memq" "warning-name" "library-declaration")}
      {Lisp-Entry "jazz.Library-Invoice" #f 635 27 635 47 ()}
      {Lisp-Entry "jazz.Export-Invoice" #f 646 27 646 46 ()}
      {Lisp-Entry "jazz.new-export-invoice" #f 649 9 649 32 ("jazz.Export-Invoice" "jazz.allocate-export-invoice" "autoload" "only" "version" "phase" "library")}
      {Lisp-Entry "jazz.Import-Invoice" #f 661 27 661 46 ()}
      {Lisp-Entry "jazz.new-import-invoice" #f 664 9 664 32 ("jazz.Import-Invoice" "jazz.allocate-import-invoice" "only" "version" "phase" "library")}
      {Lisp-Entry "jazz.Export-Declaration" #f 676 27 676 50 ()}
      {Lisp-Entry "jazz.new-export-declaration" #f 679 9 679 36 ("jazz.setup-declaration" "jazz.Export-Declaration" "jazz.allocate-export-declaration" "new-declaration" "let" "symbol" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Export-Declaration") 685 21 685 52 ("jazz.unspecified" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Export-Declaration") 689 21 689 42 ("environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Export-Declaration") 693 21 693 48 ("jazz.Any" "declaration" "%%get-export-declaration-symbol" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Autoload-Declaration" #f 708 27 708 52 ()}
      {Lisp-Entry "jazz.new-autoload-declaration" #f 711 9 711 38 ("jazz.setup-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.Autoload-Declaration" "jazz.allocate-autoload-declaration" "new-declaration" "let" "exported-library" "library-declaration" "parent" "type" "name")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Autoload-Declaration") 717 21 717 37 ("declaration" "jazz.resolve-declaration" "jazz.of-subtype?" "subtype")}
      {Lisp-Entry "jazz.resolve-declaration" ("jazz.Autoload-Declaration") 722 21 722 45 ("jazz.error" "%%assertion" "%%set-autoload-declaration-declaration" "jazz.lookup-declaration" "decl" "%%get-lexical-binding-name" "name" "%%get-autoload-declaration-library" "%%get-autoload-declaration-exported-library" "jazz.resolve-reference" "exported-library" "let*" "declaration" "%%get-autoload-declaration-declaration" "or")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Autoload-Declaration") 732 21 732 48 ("jazz.autoload-locator" "jazz.new-code" "declaration" "jazz.resolve-declaration" "referenced-declaration" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.autoload-locator" #f 740 9 740 30 ("%%get-declaration-locator" "%%symbol->string" "%%string-append" "%%string->symbol" "referenced-declaration")}
      {Lisp-Entry "jazz.Void-Class" #f 753 27 753 42 ()}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Void-Class") 756 21 756 37 ("subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Void-Class") 760 21 760 40 ("'void")}
      {Lisp-Entry "jazz.Void" #f 767 27 767 36 ()}
      {Lisp-Entry "jazz.Opt-Type" #f 778 27 778 40 ()}
      {Lisp-Entry "jazz.new-opt-type" #f 781 9 781 26 ("jazz.Opt-Type" "jazz.allocate-opt-type" "type")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Opt-Type") 785 21 785 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-opt-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.Key-Type" #f 798 27 798 40 ()}
      {Lisp-Entry "jazz.new-key-type" #f 801 9 801 26 ("jazz.Key-Type" "jazz.allocate-key-type" "type" "key")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Key-Type") 805 21 805 40 ("%%symbol->string" "%%keyword->string" "%%string-append" "%%string->symbol" "%%get-key-type-type" "jazz.emit-specifier" "type-specifier" "type" "%%get-key-type-key" "key" "let")}
      {Lisp-Entry "jazz.Rest-Type" #f 819 27 819 41 ()}
      {Lisp-Entry "jazz.new-rest-type" #f 822 9 822 27 ("jazz.Rest-Type" "jazz.allocate-rest-type" "type")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Rest-Type") 826 21 826 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-rest-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.Function-Type" #f 842 27 842 45 ()}
      {Lisp-Entry "jazz.new-function-type" #f 845 9 845 31 ("jazz.Function-Type" "jazz.allocate-function-type" "%%length" "mandatory" "let" "result" "rest" "named" "optional" "positional")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Function-Type") 850 21 850 37 ("jazz.Function-Type" "%%get-object-class" "%%eq?" "jazz.Procedure" "jazz.of-subtype?" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Function-Type") 855 21 855 40 ("get-output-string" "%%string->symbol" "%%get-function-type-result" "%%not" "%%when" "%%get-function-type-rest" "rest" "%%get-function-type-positional" "jazz.emit-specifier" "display" "write-char" "set!" "if" "type" "lambda" "for-each" "first?" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Function-Type") 874 21 874 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Category-Type" #f 890 27 890 45 ()}
      {Lisp-Entry "jazz.new-category-type" #f 893 9 893 31 ("jazz.Category-Type" "jazz.allocate-category-type" "declaration")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Category-Type") 898 21 898 37 ("subtype")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Category-Type") 902 21 902 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Category-Type") 906 21 906 40 ("get-output-string" "%%string->symbol" "type" "%%get-category-type-declaration" "jazz.emit-specifier" "write-char" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Values-Type" #f 923 27 923 43 ()}
      {Lisp-Entry "jazz.new-values-type" #f 926 9 926 29 ("jazz.Values-Type" "jazz.allocate-values-type" "types")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Values-Type") 930 21 930 40 ("get-output-string" "%%string->symbol" "%%get-values-type-types" "jazz.emit-specifier" "set!" "if" "type" "lambda" "for-each" "first?" "write-char" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Restriction-Type" #f 953 27 953 48 ()}
      {Lisp-Entry "jazz.new-restriction-type" #f 956 9 956 34 ("jazz.Restriction-Type" "jazz.allocate-restriction-type" "type" "base")}
      {Lisp-Entry "jazz.Complement-Type" #f 968 27 968 47 ()}
      {Lisp-Entry "jazz.new-complement-type" #f 971 9 971 33 ("jazz.Complement-Type" "jazz.allocate-complement-type" "type")}
      {Lisp-Entry "jazz.Union-Type" #f 983 27 983 42 ()}
      {Lisp-Entry "jazz.new-union-type" #f 986 9 986 28 ("jazz.Union-Type" "jazz.allocate-union-type" "types")}
      {Lisp-Entry "jazz.Template-Type" #f 1001 27 1001 45 ()}
      {Lisp-Entry "jazz.new-template-type" #f 1004 9 1004 31 ("jazz.Template-Type" "jazz.allocate-template-type" "types" "class")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Template-Type") 1008 21 1008 40 ("get-output-string" "%%string->symbol" "%%get-template-type-types" "set!" "if" "lambda" "for-each" "first?" "write-char" "type" "%%get-template-type-class" "jazz.emit-specifier" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Nillable-Type" #f 1031 27 1031 45 ()}
      {Lisp-Entry "jazz.new-nillable-type" #f 1034 9 1034 31 ("jazz.Nillable-Type" "jazz.allocate-nillable-type" "type")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Nillable-Type") 1038 21 1038 37 ("type" "%%get-nillable-type-type" "jazz.Boolean" "jazz.of-subtype?" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Nillable-Type") 1043 21 1043 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-nillable-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Nillable-Type") 1048 21 1048 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.object-declaration?" #f 1061 8 1061 32 ()}
      {Lisp-Entry "jazz.Any-Class" #f 1073 27 1073 41 ()}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Any-Class") 1076 21 1076 37 ("subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Any-Class") 1080 21 1080 40 ("'any")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Any-Class") 1084 21 1084 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Any" #f 1091 27 1091 35 ()}
      {Lisp-Entry "jazz.emit-type-cast" #f 1108 13 1108 32 ("%%fixnum->flonum" "%%fixnum?" ",value" "jazz.Flonum" "%%eq?" "jazz.generate-symbol" "value" "let" "jazz.sourcified-form" "%%get-code-type" "%%subtype?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-type-cast" #f 1120 12 1120 31 ("jazz.emit-check" "begin" "%%fixnum->flonum" "%%fixnum?" ",value" "jazz.Flonum" "%%eq?" "jazz.generate-symbol" "value" "let" "jazz.sourcified-form" "%%get-code-type" "%%subtype?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-parameter-cast" #f 1139 13 1139 37 ("%%fixnum->flonum" "set!" ",parameter" "%%fixnum?" "jazz.Flonum" "jazz.sourcified-form" "parameter" "let" "jazz.object-declaration?" "%%object-class?" "jazz.Any" "%%eq?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-parameter-cast" #f 1149 12 1149 36 ("jazz.emit-check" "%%fixnum->flonum" "set!" ",parameter" "%%fixnum?" "jazz.Flonum" "jazz.sourcified-form" "parameter" "let" "jazz.object-declaration?" "%%object-class?" "jazz.Any" "%%eq?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.parse-specifier" #f 1179 9 1179 29 ("%%cdr" "%%car" "jazz.source-code" "jazz.specifier?" "%%pair?" "and" "if" "proc" "lst")}
      {Lisp-Entry "jazz.walk-specifier" #f 1185 9 1185 28 ("cons" "list" "atomic?" "jazz.new-function-type" "rest" "named" "optional" "positional" "lambda" "jazz.butlast" "jazz.Rest-Type" "%%class-is?" "jazz.last" "last" "%%null?" "proc" "types" "split-parameters" "result" "parameters" "new-function-type" "jazz.new-template-type" "jazz.new-values-type" "values" "'values" "jazz.new-category-type" "category" "'category" "jazz.new-key-type" "%%string->keyword" "key" "'key" "jazz.new-opt-type" "type" "opt" "'opt" "%%eq?" "jazz.new-rest-type" "jazz.new-nillable-type" "case" "parse-atomic" "write-char" "get-output-string" "%%string->symbol" "%%eof-object?" "open-output-string" "output" "parse-name" "else" "cond" "next" "parse" "jazz.enqueue" "jazz.queue-list" "begin" "iter" "jazz.new-queue" "queue" "terminator" "separator" "parse-until" "jazz.lookup-reference" "jazz.lookup-primitive-type" "or" "name" "lookup-type" "%%eqv?" "%%not" "consume" "1" "%%fx+" "set!" "read-char" "c" "readc" "peek-char" "peekc" "jazz.walk-error" "jazz.error" "not" "if" "%%substring" "jazz.format" "error-message" "message" "ill-formed" "define" "0" "at" "open-input-string" "input" "%%symbol->string" "string" "let" "specifier" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.specifier->type" #f 1325 9 1325 29 ("jazz.walk-specifier" "if" "specifier" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.type->specifier" #f 1331 9 1331 29 ("jazz.name->specifier" "jazz.specifier?" "if" "jazz.emit-specifier" "symbol" "let" "type")}
      {Lisp-Entry "jazz.primitive-types" #f 1343 8 1343 28 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.lookup-primitive-type" #f 1379 9 1379 35 ("jazz.primitive-types" "%%table-ref" "name")}
      {Lisp-Entry "jazz.primitive-declarations" #f 1383 8 1383 35 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.patch-type-until-unification" #f 1418 9 1418 42 ("jazz.lookup-declaration" "jazz.dialect.language" "'jazz.dialect.language" "jazz.get-catalog-entry" "library-declaration" "if" "jazz.primitive-declarations" "%%table-ref" "name" "let" "type")}
      {Lisp-Entry "jazz.Macro-Declaration" #f 1433 27 1433 49 ()}
      {Lisp-Entry "jazz.new-macro-declaration" #f 1436 9 1436 35 ("jazz.setup-declaration" "jazz.Macro-Declaration" "jazz.allocate-macro-declaration" "new-declaration" "let" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Macro-Declaration") 1442 21 1442 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Macro-Declaration") 1446 21 1446 50 ("%%cdr" "%%apply" "jazz.need-macro" "expander" "jazz.load-module" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Macro-Declaration") 1457 21 1457 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "%%cons" "jazz.define-macro" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-macro-declaration-body" "body" "%%get-macro-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Macro-Declaration") 1470 21 1470 42 ("%%get-macro-declaration-body" "jazz.fold-statement" "%%get-macro-declaration-signature" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Syntax-Declaration" #f 1485 27 1485 50 ()}
      {Lisp-Entry "jazz.new-syntax-declaration" #f 1488 9 1488 36 ("jazz.setup-declaration" "jazz.Syntax-Declaration" "jazz.allocate-syntax-declaration" "new-declaration" "let" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Syntax-Declaration") 1494 21 1494 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Syntax-Declaration") 1498 21 1498 50 ("jazz.need-macro" "expander" "jazz.load-module" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Syntax-Declaration") 1508 21 1508 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "%%cons" "jazz.define-macro" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-syntax-declaration-body" "body" "%%get-syntax-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Syntax-Declaration") 1521 21 1521 42 ("%%get-syntax-declaration-body" "jazz.fold-statement" "%%get-syntax-declaration-signature" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Type-Declaration" #f 1536 27 1536 50 ()}
      {Lisp-Entry "jazz.new-c-type-declaration" #f 1539 9 1539 36 ("jazz.setup-declaration" "jazz.C-Type-Declaration" "jazz.allocate-c-type-declaration" "new-declaration" "let" "declare" "scheme-to-c" "c-to-scheme" "inclusions" "base-type" "expansion" "kind" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.get-declaration-inclusions" ("jazz.C-Type-Declaration") 1545 21 1545 52 ("declaration" "%%get-c-type-declaration-inclusions")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.C-Type-Declaration") 1549 21 1549 42 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.C-Type-Declaration") 1553 21 1553 55 ("list" "and" "if" ",expansion" ",locator" "c-define-type" "%%get-c-type-declaration-scheme-to-c" "scheme-to-c" "%%get-c-type-declaration-c-to-scheme" "c-to-scheme" "%%get-c-type-declaration-expansion" "expansion" "declaration" "%%get-declaration-locator" "locator" "let")}
      {Lisp-Entry "jazz.C-Definition-Declaration" #f 1571 27 1571 56 ()}
      {Lisp-Entry "jazz.new-c-definition-declaration" #f 1574 9 1574 42 ("jazz.setup-declaration" "jazz.C-Definition-Declaration" "jazz.allocate-c-definition-declaration" "new-declaration" "let" "scope" "c-name" "result-type" "parameter-types" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.C-Definition-Declaration") 1580 21 1580 52 ("jazz.validate-arguments" "if" "declaration" "%%get-c-definition-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.C-Definition-Declaration") 1586 21 1586 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" ",scope" ",c-name" ",result-type" ",parameter-types" "jazz.emit-signature" "%%cons" "c-define" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-c-definition-declaration-body" "body" "%%get-c-definition-declaration-scope" "scope" "%%get-c-definition-declaration-c-name" "c-name" "%%get-c-definition-declaration-result-type" "result-type" "%%get-c-definition-declaration-parameter-types" "parameter-types" "%%get-c-definition-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.C-Definition-Declaration") 1603 21 1603 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Walk-Context" #f 1618 27 1618 44 ()}
      {Lisp-Entry "jazz.new-walk-context" #f 1621 9 1621 30 ("jazz.Walk-Context" "jazz.allocate-walk-context" "pathname" "locator" "policy")}
      {Lisp-Entry "jazz.walk-context" #f 1625 8 1625 25 ("make-parameter")}
      {Lisp-Entry "jazz.get-walk-context" #f 1629 9 1629 30 ("jazz.walk-context")}
      {Lisp-Entry "jazz.need-walk-context" #f 1633 9 1633 31 ("jazz.error" "jazz.walk-context" "or")}
      {Lisp-Entry "jazz.get-walk-policy" #f 1638 9 1638 29 ("%%get-walk-context-policy" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.get-walk-locator" #f 1645 9 1645 30 ("%%get-walk-context-locator" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.get-walk-pathname" #f 1652 9 1652 31 ("%%get-walk-context-pathname" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.Walk-Location" #f 1667 27 1667 45 ()}
      {Lisp-Entry "jazz.new-walk-location" #f 1670 9 1670 31 ("jazz.Walk-Location" "jazz.allocate-walk-location" "locat" "declaration-locator" "module-locator")}
      {Lisp-Entry "jazz.walk-location" #f 1674 9 1674 27 ("%%get-declaration-locator" "jazz.get-walk-locator" "jazz.new-walk-location" "locat" "declaration" "walker")}
      {Lisp-Entry "jazz.Walk-Problem" #f 1689 27 1689 44 ()}
      {Lisp-Entry "jazz.Walk-Problems" #f 1700 27 1700 45 ()}
      {Lisp-Entry "jazz.new-walk-problems" #f 1703 9 1703 31 ("jazz.Walk-Problems" "jazz.allocate-walk-problems" "errors" "warnings" "message")}
      {Lisp-Entry "jazz.get-detail" ("jazz.Walk-Problems") 1707 21 1707 36 ("jazz.partition-walk-problems-module" "jazz.partition-walk-problems-declaration" "jazz.queue-list" "declaration-details" "1" "%%fx+" "%%substring" "jazz.enqueue" "add-details" "%%fx=" "declaration-locator" "for-each" "jazz.new-queue" "module-details" "or" "%%symbol->string" "%%string-length" "-1" "%%not" "if" "prefix" "module-locator" "jazz.bind" "partition" "lambda" "map" "%%get-walk-problems-errors" "problems" "%%get-walk-problems-warnings" "%%append" "all" "let" "jazz.new-exception-detail")
        {Lisp-Entry "add-details" #f 1708 11 1708 22 ("%%get-walk-problem-location" "jazz.present-exception" "jazz.new-exception-detail" "jazz.enqueue" "problem" "lambda" "for-each" "queue" "problems")}}
      {Lisp-Entry "jazz.Walk-Warning" #f 1743 27 1743 44 ()}
      {Lisp-Entry "jazz.new-walk-warning" #f 1746 9 1746 30 ("jazz.Walk-Warning" "jazz.allocate-walk-warning" "message" "location")}
      {Lisp-Entry "jazz.Walk-Error" #f 1758 27 1758 42 ()}
      {Lisp-Entry "jazz.new-walk-error" #f 1761 9 1761 28 ("jazz.Walk-Error" "jazz.allocate-walk-error" "message" "location")}
      {Lisp-Entry "jazz.Unresolved-Error" #f 1773 27 1773 48 ()}
      {Lisp-Entry "jazz.new-unresolved-error" #f 1776 9 1776 34 ("jazz.Unresolved-Error" "jazz.allocate-unresolved-error" "symbol" "location")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Unresolved-Error") 1780 21 1780 43 ("error" "%%get-unresolved-error-symbol" "jazz.format")}
      {Lisp-Entry "jazz.Walk-Frame" #f 1793 27 1793 42 ()}
      {Lisp-Entry "jazz.new-walk-frame" #f 1796 9 1796 28 ("jazz.Walk-Frame" "jazz.allocate-walk-frame" "%%table-set!" "%%get-lexical-binding-name" "name" "binding" "lambda" "for-each" "eq?" "test:" "%%make-table" "table" "let" "bindings")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Frame") 1805 21 1805 45 ("binding" "%%get-walk-frame-bindings" "%%table-ref" "symbol")}
      {Lisp-Entry "jazz.Signature" #f 1817 27 1817 41 ()}
      {Lisp-Entry "jazz.new-signature" #f 1820 9 1820 27 ("jazz.Signature" "jazz.allocate-signature" "%%length" "mandatory" "let" "rest" "named" "optional" "positional")}
      {Lisp-Entry "jazz.only-positional?" #f 1825 9 1825 30 ("%%get-signature-rest" "%%not" "%%get-signature-named" "%%get-signature-optional" "%%null?" "and" "signature")}
      {Lisp-Entry "jazz.Symbol-Binding" #f 1839 27 1839 46 ()}
      {Lisp-Entry "jazz.Variable" #f 1850 27 1850 40 ()}
      {Lisp-Entry "jazz.new-variable" #f 1853 9 1853 26 ("0" "jazz.Variable" "jazz.allocate-variable" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.variable-name-valid?" #f 1858 9 1858 34 ("jazz.specifier?" "%%not" "%%symbol?" "and" "name")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Variable") 1863 21 1863 49 ("1" "%%get-variable-reference-count" "%%fx+" "binding" "%%set-variable-reference-count")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Variable") 1867 21 1867 48 ("jazz.find-annotated-type" "binding" "%%get-lexical-binding-name" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Variable") 1874 21 1874 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Variable") 1878 21 1878 49 ("jazz.Any" "jazz.sourcified-form" "%%get-lexical-binding-name" "set!" "jazz.new-code" "%%get-code-type" "jazz.extend-annotated-type" "jazz.Annotated-Variable" "%%class-is?" "%%when" "binding" "jazz.find-annotated" "annotated-type" "annotated-variable" "annotated-frame" "receive" "jazz.emit-expression" "value-code" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.NextMethod-Variable" #f 1897 27 1897 51 ()}
      {Lisp-Entry "jazz.new-nextmethod-variable" #f 1900 9 1900 37 ("0" "jazz.NextMethod-Variable" "jazz.allocate-nextmethod-variable" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.NextMethod-Variable") 1905 21 1905 48 ("jazz.Any" "jazz.sourcified-form" ",name" "apply" "rest" "lambda" "if" "jazz.new-code" "jazz.*self*" "self" "binding" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.NextMethod-Variable") 1916 21 1916 43 ("jazz.call-return-type" "jazz.codes-forms" "jazz.sourcified-form" "jazz.new-code" "if" "jazz.*self*" "self" "%%get-lexical-binding-type" "type" "binding" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.Parameter" #f 1942 27 1942 41 ()}
      {Lisp-Entry "jazz.new-parameter" #f 1945 9 1945 27 ("0" "jazz.Parameter" "jazz.allocate-parameter" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Parameter") 1950 30 1950 49 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Parameter") 1953 21 1953 40 ("parameter" "%%get-lexical-binding-name" "environment" "declaration")}
      {Lisp-Entry "jazz.Dynamic-Parameter" #f 1965 27 1965 49 ()}
      {Lisp-Entry "jazz.new-dynamic-parameter" #f 1968 9 1968 35 ("0" "jazz.Dynamic-Parameter" "jazz.allocate-dynamic-parameter" "class" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Dynamic-Parameter") 1972 21 1972 40 ("%%get-lexical-binding-name" "jazz.emit-expression" "jazz.sourcified-form" "%%list" "parameter" "%%get-dynamic-parameter-class" "class" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Optional-Parameter" #f 1985 27 1985 50 ()}
      {Lisp-Entry "jazz.new-optional-parameter" #f 1988 9 1988 36 ("0" "jazz.Optional-Parameter" "jazz.allocate-optional-parameter" "default" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Optional-Parameter") 1992 21 1992 40 ("jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "%%list" "parameter" "%%get-optional-parameter-default" "default" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Named-Parameter" #f 2005 27 2005 47 ()}
      {Lisp-Entry "jazz.new-named-parameter" #f 2008 9 2008 33 ("0" "jazz.Named-Parameter" "jazz.allocate-named-parameter" "default" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Named-Parameter") 2012 21 2012 40 ("jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "%%list" "parameter" "%%get-named-parameter-default" "default" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Rest-Parameter" #f 2025 27 2025 46 ()}
      {Lisp-Entry "jazz.new-rest-parameter" #f 2028 9 2028 32 ("0" "jazz.Rest-Parameter" "jazz.allocate-rest-parameter" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Rest-Parameter") 2032 21 2032 40 ("parameter" "%%get-lexical-binding-name" "environment" "declaration")}
      {Lisp-Entry "jazz.Self-Binding" #f 2047 27 2047 44 ()}
      {Lisp-Entry "jazz.new-self-binding" #f 2050 9 2050 30 ("self" "'self" "jazz.Self-Binding" "jazz.allocate-self-binding" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Self-Binding") 2054 21 2054 48 ("%%get-declaration-parent" "self" "'self" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Dynamic-Self-Binding" #f 2069 27 2069 52 ()}
      {Lisp-Entry "jazz.new-dynamic-self-binding" #f 2072 9 2072 38 ("self" "'self" "jazz.Dynamic-Self-Binding" "jazz.allocate-dynamic-self-binding" "code" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Dynamic-Self-Binding") 2076 21 2076 48 ("%%get-declaration-parent" "declaration" "%%get-dynamic-self-binding-code" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.*self*" #f 2091 8 2091 19 ("make-parameter")}
      {Lisp-Entry "jazz.Macro-Symbol" #f 2100 27 2100 44 ()}
      {Lisp-Entry "jazz.new-macro-symbol" #f 2103 9 2103 30 ("jazz.Macro-Symbol" "jazz.allocate-macro-symbol" "setter" "getter" "name")}
      {Lisp-Entry "jazz.Form-Binding" #f 2132 27 2132 44 ()}
      {Lisp-Entry "jazz.Special-Form" #f 2143 27 2143 44 ()}
      {Lisp-Entry "jazz.new-special-form" #f 2146 9 2146 30 ("jazz.Special-Form" "jazz.allocate-special-form" "walk" "name")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Special-Form") 2150 21 2150 48 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" ("jazz.Special-Form") 2154 21 2154 48 ("binding" "%%get-special-form-walk" "walk" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Macro-Form" #f 2167 27 2167 42 ()}
      {Lisp-Entry "jazz.new-macro-form" #f 2170 9 2170 28 ("jazz.Macro-Form" "jazz.allocate-macro-form" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Macro-Form") 2174 21 2174 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Macro-Form") 2178 21 2178 50 ("%%cdr" "apply" "binding" "%%get-macro-form-expander" "expander" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Syntax-Form" #f 2192 27 2192 43 ()}
      {Lisp-Entry "jazz.new-syntax-form" #f 2195 9 2195 29 ("jazz.Syntax-Form" "jazz.allocate-syntax-form" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Syntax-Form") 2199 21 2199 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Syntax-Form") 2203 21 2203 50 ("binding" "%%get-syntax-form-expander" "expander" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Annotated-Variable" #f 2216 27 2216 50 ()}
      {Lisp-Entry "jazz.new-annotated-variable" #f 2219 9 2219 36 ("jazz.Annotated-Variable" "jazz.allocate-annotated-variable" "type" "declared-type" "variable")}
      {Lisp-Entry "jazz.Restricted-Binding" #f 2231 27 2231 50 ()}
      {Lisp-Entry "jazz.new-restricted-binding" #f 2234 9 2234 36 ("jazz.Restricted-Binding" "jazz.allocate-restricted-binding" "type" "binding")}
      {Lisp-Entry "jazz.Annotated-Frame" #f 2246 27 2246 47 ()}
      {Lisp-Entry "jazz.new-annotated-frame" #f 2249 9 2249 33 ("jazz.Annotated-Frame" "jazz.allocate-annotated-frame" "reset" "variables")}
      {Lisp-Entry "jazz.inspect-annotated-variable" #f 2257 9 2257 40 ("%%get-annotated-variable-type" "%%get-annotated-variable-variable" ":variable" "%%get-restricted-binding-type" "%%get-restricted-binding-binding" "%%get-lexical-binding-name" ":restricted" "jazz.Restricted-Binding" "%%class-is?" "if" "jazz.object->serial-symbol" "serial" "let" "variable")}
      {Lisp-Entry "jazz.inspect-annotated-frame" #f 2268 9 2268 37 ("frame")}
      {Lisp-Entry "jazz.inspect-annotated-environment" #f 2273 9 2273 43 ("environment")}
      {Lisp-Entry "jazz.Code" #f 2283 27 2283 36 ()}
      {Lisp-Entry "jazz.new-code" #f 2286 9 2286 22 ("jazz.Code" "jazz.allocate-code" "source" "type" "form")}
      {Lisp-Entry "jazz.codes-forms" #f 2293 9 2293 25 ("jazz.sourcified-form" "code" "lambda" "map" "codes")}
      {Lisp-Entry "jazz.codes-types" #f 2299 9 2299 25 ("%%get-code-type" "code" "lambda" "map" "codes")}
      {Lisp-Entry "jazz.sourcify-code" #f 2306 9 2306 27 ("%%get-code-type" "%%get-code-form" "jazz.new-code" "%%source?" "%%not" "or" "if" "src" "code")}
      {Lisp-Entry "jazz.sourcified-form" #f 2315 9 2315 29 ("jazz.sourcify-if" "%%get-code-source" "src" "%%get-code-form" "form" "let" "code")}
      {Lisp-Entry "jazz.annotate-signature" #f 2326 9 2326 32 ("jazz.queue-list" "%%when" "for-each" "jazz.new-annotated-variable" "jazz.enqueue" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "parameter" "annotate" "define" "jazz.new-queue" "queue" "%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "let" "signature")}
      {Lisp-Entry "jazz.annotate-inlined-signature" #f 2345 9 2345 40 ("jazz.queue-list" "jazz.new-annotated-variable" "jazz.enqueue" "%%get-code-type" "or" "type" "%%get-lexical-binding-type" "declared-type" "argument" "parameter" "lambda" "for-each" "jazz.new-queue" "queue" "%%get-signature-positional" "positional" "let" "arguments" "signature")}
      {Lisp-Entry "jazz.annotate-bindings" #f 2357 9 2357 31 ("jazz.new-annotated-variable" "jazz.Void" "or" "type" "%%get-lexical-binding-type" "declared-type" "%%cdr" "value" "%%car" "variable" "let" "binding" "lambda" "map" "bindings")}
      {Lisp-Entry "jazz.annotate-receive" #f 2367 9 2367 30 ("jazz.new-annotated-variable" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "let" "parameter" "lambda" "map" "parameters")}
      {Lisp-Entry "jazz.annotate-internal-defines" #f 2375 9 2375 39 ("jazz.new-annotated-variable" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "%%get-internal-define-variable" "variable" "let" "internal-define" "lambda" "map" "internal-defines")}
      {Lisp-Entry "jazz.with-annotated-frame" #f 2384 9 2384 34 ("jazz.new-annotated-frame" "set!" "k" "lambda" "continuation-capture" "reset" "let" "proc" "variables")}
      {Lisp-Entry "jazz.find-annotated" #f 2392 9 2392 28 ("%%get-annotated-variable-type" "%%get-annotated-variable-variable" "%%cdr" "set!" "%%not" "begin" "%%get-restricted-binding-type" "values" "%%eq?" "jazz.Declaration" "and" "%%get-restricted-binding-binding" "binding" "jazz.Restricted-Binding" "%%class-is?" "annotated-variable" "%%get-annotated-frame-variables" "variables" "iter-variables" "or" "%%car" "annotated-frame" "%%null?" "if" "frames" "iter-frames" "type" "let" "environment" "variable")}
      {Lisp-Entry "jazz.find-annotated-type" #f 2418 9 2418 33 ("%%get-lexical-binding-type" "info" "let" "jazz.find-annotated" "type" "variable" "frame" "receive" "jazz.Variable" "%%class-is?" "if" "environment" "binding")}
      {Lisp-Entry "jazz.extend-annotated-type" #f 2431 9 2431 35 ("continuation-return" "%%get-annotated-frame-reset" "reset" "jazz.Any" "extended-type" "%%subtype?" "%%not" "%%when" "%%set-annotated-variable-type" "jazz.Void" "%%eq?" "if" "%%get-annotated-variable-type" "actual-type" "%%get-annotated-variable-declared-type" "declared-type" "let" "new-type" "variable" "frame")}
      {Lisp-Entry "jazz.extend-type" #f 2454 9 2454 25 ("else" "%%subtype?" "jazz.Void" "%%eq?" "jazz.Any" "%%not" "or" "cond" "type2" "type1")}
      {Lisp-Entry "jazz.extend-types" #f 2468 9 2468 26 ("%%cdr" "jazz.extend-types" "%%car" "jazz.extend-type" "jazz.Void" "%%null?" "if" "types")}
      {Lisp-Entry "jazz.type-union" #f 2474 9 2474 24 ("jazz.new-union-type" "types")}
      {Lisp-Entry "jazz.type-difference" #f 2478 9 2478 29 ("type2" "type1")}
      {Lisp-Entry "jazz.Walker" #f 2487 27 2487 38 ()}
      {Lisp-Entry "jazz.walk-warning" #f 2495 9 2495 26 ("jazz.new-walk-warning" "jazz.walker-warning" "jazz.format" "apply" "message" "jazz.walk-location" "location" "let" "rest" "fmt-string" "declaration" "walker")}
      {Lisp-Entry "jazz.walk-error" #f 2501 9 2501 24 ("jazz.new-walk-error" "jazz.walker-error" "jazz.format" "apply" "message" "jazz.walk-location" "location" "let" "rest" "fmt-string" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-unresolved" #f 2507 9 2507 29 ("jazz.source-code" "jazz.new-unresolved-error" "jazz.walker-error" "%%source-locat" "%%source?" "if" "jazz.walk-location" "location" "let" "symbol-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walker-warning" #f 2512 9 2512 28 ("%%list" "%%get-walker-warnings" "%%append" "%%set-walker-warnings" "jazz.warnings?" "if" "warning" "walker")}
      {Lisp-Entry "jazz.walker-error" #f 2517 9 2517 26 ("jazz.validate-walk-problems" "jazz.unspecified" "continuation-return" "jazz.delay-reporting?" "and" "if" "%%list" "%%get-walker-errors" "%%append" "%%set-walker-errors" "error" "resume" "walker")}
      {Lisp-Entry "jazz.validate-walk-problems" #f 2524 9 2524 36 ("jazz.new-walk-problems" "raise" "get-output-string" "message" "jazz.partition-walk-problems-module" "jazz.partition-walk-problems-declaration" "jazz.present-exception" "problem" "1" "%%fx+" "%%substring" "%%fx=" "toplevel?" "declaration-locator" "%%symbol->string" "%%string-length" "-1" "%%not" "if" "prefix" "problems" "module-locator" "jazz.bind" "partition" "lambda" "for-each" "jazz.format" "%%append" "all" "open-output-string" "output" "%%not-null?" "or" "%%when" "%%get-walker-errors" "errors" "%%get-walker-warnings" "warnings" "let" "walker")}
      {Lisp-Entry "jazz.partition-walk-problems-module" #f 2552 9 2552 44 ("assv" "%%get-walk-problem-location" "%%get-walk-location-module-locator" "problem" "lambda" "jazz.partition" "problems")}
      {Lisp-Entry "jazz.partition-walk-problems-declaration" #f 2559 9 2559 49 ("assoc" "%%get-walk-problem-location" "%%get-walk-location-declaration-locator" "%%symbol->string" "problem" "lambda" "jazz.partition" "problems")}
      {Lisp-Entry "jazz.parse-modifiers" #f 2571 9 2571 29 ("%%list" "jazz.walk-error" "else" "%%null?" "cond" "modifiers" "%%append" "values" "%%apply" "%%cdr" "%%set-cdr!" "set!" "begin" "%%memq" "if" "%%cdar" "default" "%%caar" "allowed" "partition" "for-each" "found?" "%%car" "%%desourcify" "target" "%%not" "%%not-null?" "and" "%%while" "done?" "%%cons" "info" "lambda" "map" "partitions" "let" "rest" "infos" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-module-declaration" #f 2602 9 2602 38 ("jazz.new-module-declaration" "body" "requires" "jazz.parse-module" "jazz.error" "jazz.requested-module-name" "eval" "'eval" "jazz.walk-for" "%%neq?" "and" "if" "rest" "access" "name" "lambda" "parse" "partial-form")
        {Lisp-Entry "parse" #f 2603 11 2603 16 ("%%cdr" "'public" "%%cddr" "%%cadr" "public" "protected" "%%memq" "if" "%%car" "jazz.source-code" "first" "let" "proc" "rest")}}
      {Lisp-Entry "jazz.parse-library" #f 2623 9 2623 27 ("values" "%%cddr" "body" "%%cadr" "dialect-name" "%%car" "jazz.source-code" "name" "let" "parse-modifiers" "rest" "access" "receive" "partial-form")
        {Lisp-Entry "parse-modifiers" #f 2624 11 2624 26 ("'public" "%%cdr" "values" "public" "protected" "%%memq" "if" "%%car" "jazz.source-code" "first" "let" "rest")}}
      {Lisp-Entry "jazz.parse-library-invoice" #f 2640 9 2640 35 ("%%reverse" "values" "'autoload" "'only" "'phase" "%%cdar" "begin" "'load" "%%caar" "%%eq?" "if" "%%cons" "set!" "%%not" "and" "%%while" "autoload" "only" "phase" "load" "version" "%%cdr" "scan" "%%car" "name" "let" "jazz.error" "%%pair?" "%%assertion" "specification")}
      {Lisp-Entry "jazz.parse-library-declaration" #f 2680 9 2680 39 ("jazz.walk-library-declaration" "jazz.dialect-walker" "walker" "jazz.require-dialect" "dialect" "jazz.load-dialect-invoice" "dialect-invoice" "let*" "jazz.new-walk-context" "jazz.walk-context" "parameterize" "jazz.error" "jazz.requested-module-name" "eval" "'eval" "jazz.walk-for" "%%neq?" "and" "if" "jazz.parse-library" "body" "dialect-name" "access" "name" "receive" "partial-form")}
      {Lisp-Entry "jazz.walk-library-declaration" #f 2691 9 2691 38 ("jazz.validate-walk-problems" "jazz.walker-environment" "%%cons" "jazz.walk-declarations" "jazz.add-library-import" "%%when" "jazz.new-library-declaration" "or" "declaration" "let" "body" "dialect-invoice" "dialect-name" "access" "name" "actual" "walker")}
      {Lisp-Entry "jazz.walk-library-exports" #f 2700 9 2700 34 ("jazz.walk-library-export" "export" "%%cdr" "jazz.new-export-reference" "symbol" "lambda" "map" "jazz.new-export-invoice" "%%list" "if" "%%append" "library-exports" "assq" "symbols-exports" "assv" "symbol?" "jazz.partition" "partition" "let" "exports" "walker")}
      {Lisp-Entry "jazz.walk-library-export" #f 2714 9 2714 33 ("jazz.new-autoload-reference" "jazz.new-export-reference" "symbol" "lambda" "map" "%%not" "if" "jazz.new-export-invoice" "jazz.new-library-reference" "library-reference" "let" "jazz.parse-library-invoice" "library-autoload" "library-only" "library-version" "library-phase" "library-load" "library-name" "receive" "export" "walker")}
      {Lisp-Entry "jazz.walk-library-imports" #f 2732 9 2732 34 ("jazz.walk-library-import" "import" "lambda" "map" "imports" "walker")}
      {Lisp-Entry "jazz.walk-library-import" #f 2738 9 2738 33 ("jazz.new-export-reference" "symbol" "lambda" "map" "%%not" "if" "jazz.lookup-library" "jazz.new-import-invoice" "jazz.parse-library-invoice" "library-autoload" "library-only" "library-version" "library-phase" "library-load" "library-name" "receive" "import" "walker")}
      {Lisp-Entry "jazz.expand-library" #f 2750 9 2750 28 ("jazz.walk-library" "jazz.emit-declaration" "partial-form")}
      {Lisp-Entry "jazz.walk-library" #f 2754 9 2754 26 ("%%set-namespace-declaration-body" "jazz.validate-walk-problems" "jazz.walk-namespace" "jazz.walker-environment" "%%cons" "environment" "jazz.set-catalog-entry" "jazz.desourcify-list" "jazz.walk-library-declaration" "let" "lambda" "jazz.call-with-catalog-entry-lock" "declaration" "jazz.get-catalog-entry" "actual" "resume" "jazz.dialect-walker" "walker" "jazz.require-dialect" "dialect" "jazz.load-dialect-invoice" "dialect-invoice" "let*" "jazz.new-walk-context" "jazz.walk-context" "parameterize" "jazz.error" "jazz.requested-module-name" "eval" "'eval" "jazz.walk-for" "%%neq?" "and" "if" "jazz.parse-library" "body" "dialect-name" "access" "name" "receive" "partial-form")}
      {Lisp-Entry "jazz.parse-module" #f 2776 9 2776 26 ("%%desourcify" "%%cdr" "jazz.filter-features" "require" "'require" "%%eq?" "%%car" "jazz.source-code" "%%pair?" "and" "if" "proc" "rest")}
      {Lisp-Entry "jazz.cond-expand" #f 2784 9 2784 25 ("begin" "else" "'else" "jazz.feature-safisfied?" "feature-requirement" "%%desourcify" "%%symbol?" "%%not" "or" "clause" "jazz.error" "%%null?" "%%cdr" "scan" "iter" "let" "cond-expand" "'cond-expand" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "if" "cont" "form-src")}
      {Lisp-Entry "jazz.walk-namespace" #f 2804 9 2804 28 ("jazz.queue-list" "jazz.walk" "jazz.enqueue" "%%when" "expr?" "expr-src" "jazz.cond-expand" "continuation-capture" "form-src" "lambda" "for-each" "jazz.new-queue" "queue" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.load-dialect-invoice" #f 2817 9 2817 34 ("syntax" "'syntax" "jazz.outline-library" "jazz.new-import-invoice" "core" "'core" "%%eq?" "jazz.error" "%%symbol?" "%%not" "if" "dialect-name")}
      {Lisp-Entry "jazz.emit-library-inclusions" #f 2829 9 2829 37 ("jazz.expand-referenced-declaration" "map" "%%get-library-declaration-inclusions" "jazz.enqueue" "jazz.queue-list" "%%get-lexical-binding-name" "find-name" "%%not" "%%when" "jazz.get-declaration-inclusions" "for-each" "declaration" "lambda" "collect-declarations" "letrec" "jazz.new-queue" "queue" "let" "library-declaration")
        {Lisp-Entry "find-name" #f 2830 11 2830 20 ("%%cdr" "find-name" "%%car" "%%get-lexical-binding-name" "%%eq?" "%%null?" "if" "lst" "name")}}
      {Lisp-Entry "jazz.emit-library-literals" #f 2853 9 2853 35 ("%%get-library-declaration-literals" "jazz.emit-expression" "jazz.sourcified-form" ",name" "define" "%%cddr" "value" "%%cadr" "name" "let" "info" "lambda" "map" "library-declaration")}
      {Lisp-Entry "jazz.emit-library-variables" #f 2861 9 2861 36 ("%%get-library-declaration-variables" "jazz.queue-list" ",value" ",symbol" "jazz.define-variable" "%%cdr" "value" "%%car" "symbol" "let" "variable" "lambda" "map" "library-declaration")}
      {Lisp-Entry "jazz.emit-library-autoloads" #f 2869 9 2869 36 ("%%get-library-declaration-autoloads" "jazz.emit-binding-reference" "jazz.sourcified-form" "set!" "%%get-declaration-toplevel" "%%get-declaration-locator" "jazz.load-module" "begin" "%%not" "if" "loaded?" ",locator" "define" "jazz.autoload-locator" "locator" "jazz.resolve-declaration" "referenced-declaration" "let" "autoload-declaration" "lambda" "map" "environment" "library-declaration")}
      {Lisp-Entry "jazz.core-bindings" #f 2889 9 2889 27 ("jazz.walk-syntax" "syntax" "'syntax" "jazz.walk-macro" "macro" "'macro" "jazz.walk-native" "native" "'native" "jazz.walk-proclaim" "proclaim" "'proclaim" "jazz.walk-import" "import" "'import" "jazz.walk-export" "export" "'export" "jazz.walk-require" "require" "'require" "jazz.new-special-form" "%%list")}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Walker") 2900 30 2900 53 ()}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Walker") 2903 21 2903 44 ("jazz.core-bindings" "jazz.new-walk-frame" "%%list")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Walker") 2918 30 2918 51 ("form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Walker") 2921 21 2921 42 ("else" "jazz.walk-syntax-declaration" "syntax" "jazz.walk-macro-declaration" "macro" "jazz.walk-native-declaration" "native" "jazz.walk-import-declaration" "import" "jazz.walk-export-declaration" "export" "walker" "jazz.walk-require-declaration" "require" "case" "%%car" "first" "let" "%%pair?" "if" "form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-declarations" #f 2935 9 2935 31 ("walk" "forms" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "walk" #f 2936 11 2936 15 ("jazz.walk-declaration" "%%cdr" "walk" "jazz.begin-form?" "if" "environment" "declaration" "walker" "jazz.expand-macros" "expansion" "let" "%%when" "expr?" "expr" "jazz.cond-expand" "resume" "continuation-capture" "form" "lambda" "for-each" "forms")}}
      {Lisp-Entry "jazz.add-declaration-child" #f 2952 9 2952 35 ("jazz.public-access" "jazz.private-access" "%%get-access-lookup" "%%get-namespace-declaration-children-lookup" "%%table-set!" "%%list" "%%get-namespace-declaration-children" "%%append" "%%set-namespace-declaration-children" "%%get-lexical-binding-name" "name" "let" "child" "namespace-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.find-form-declaration" #f 2964 9 2964 35 ("jazz.error" "%%assertion" "jazz.find-declaration" "declaration" "let" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.find-actual-declaration" #f 2970 9 2970 37 ("%%class-is?" "and" "jazz.find-declaration" "declaration" "let" "eval" "'eval" "jazz.walk-for" "%%eq?" "if" "name" "class" "namespace-declaration")}
      {Lisp-Entry "jazz.begin-form?" #f 2979 9 2979 25 ("begin" "'begin" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.define-form?" #f 2984 9 2984 26 ("define" "'define" "%%car" "%%eq?" "jazz.source-code" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.register-autoload-declaration" #f 2994 9 2994 43 ("%%cons" "%%set-library-declaration-autoloads" "%%memq" "%%not" "%%when" "%%get-library-declaration-autoloads" "declarations" "let" "autoload-declaration" "library-declaration")}
      {Lisp-Entry "jazz.lookup-library" #f 3005 9 3005 28 ("jazz.walk-unresolved" "jazz.outline-library" "or" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-reference" #f 3010 9 3010 30 ("jazz.walk-unresolved" "jazz.lookup-accessible/compatible-symbol" "or" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Expression" #f 3020 27 3020 42 ()}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Expression") 3023 30 3023 50 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Expression") 3026 21 3026 41 ("expression" "jazz.error" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Expression") 3030 30 3030 44 ("environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Expression") 3033 21 3033 35 ("jazz.Any" "jazz.codes-forms" "expression" "jazz.emit-expression" "jazz.sourcified-form" "jazz.new-code" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Expression") 3040 30 3040 50 ("s" "k" "f")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Expression") 3043 21 3043 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.emit-expressions" #f 3047 9 3047 30 ("jazz.emit-expression" "expression" "lambda" "map" "environment" "declaration" "expressions")}
      {Lisp-Entry "jazz.fold-expressions" #f 3053 9 3053 30 ("%%cdr" "jazz.fold-expressions" "%%car" "jazz.fold-expression" "%%null?" "if" "seed" "s" "k" "f" "expressions")}
      {Lisp-Entry "jazz.Proclaim" #f 3068 27 3068 40 ()}
      {Lisp-Entry "jazz.new-proclaim" #f 3071 9 3071 26 ("jazz.Proclaim" "jazz.allocate-proclaim" "clauses")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Proclaim") 3075 21 3075 41 ("jazz.proclaim" "clause" "lambda" "for-each" "%%get-declaration-toplevel" "library-declaration" "expression" "%%get-proclaim-clauses" "clauses" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Constant" #f 3092 27 3092 40 ()}
      {Lisp-Entry "jazz.new-constant" #f 3095 9 3095 26 ("jazz.Constant" "jazz.allocate-constant" "type" "expansion")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Constant") 3099 21 3099 41 ("%%get-expression-type" "expression" "%%get-constant-expansion" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Constant") 3106 21 3106 41 ("%%get-constant-expansion" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Delay" #f 3120 27 3120 37 ()}
      {Lisp-Entry "jazz.new-delay" #f 3123 9 3123 23 ("jazz.Delay" "jazz.allocate-delay" "expression")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Delay") 3127 21 3127 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "delay" "jazz.new-code" "%%get-delay-expression" "expression" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Quasiquote" #f 3143 27 3143 42 ()}
      {Lisp-Entry "jazz.new-quasiquote" #f 3146 9 3146 28 ("jazz.Quasiquote" "jazz.allocate-quasiquote" "form")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Quasiquote") 3150 21 3150 41 ("jazz.List" "expression" "%%get-quasiquote-form" "quasiquote" "'quasiquote" "jazz.new-code" "%%cdr" "%%cons" "%%cadr" "jazz.emit-expression" "jazz.sourcified-form" "%%list" "unquote-splicing" "'unquote-splicing" "unquote" "'unquote" "%%car" "%%eq?" "or" "%%pair?" "if" "form" "lambda" "emit" "letrec" "environment" "declaration")}
      {Lisp-Entry "jazz.Reference" #f 3173 27 3173 41 ()}
      {Lisp-Entry "jazz.new-reference" #f 3176 9 3176 27 ("jazz.Reference" "jazz.allocate-reference" "binding")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Reference") 3180 21 3180 41 ("expression" "%%get-reference-binding" "jazz.emit-binding-reference" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Reference") 3184 21 3184 35 ("expression" "%%get-reference-binding" "jazz.emit-binding-call" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.Assignment" #f 3196 27 3196 42 ()}
      {Lisp-Entry "jazz.new-assignment" #f 3199 9 3199 28 ("jazz.Assignment" "jazz.allocate-assignment" "value" "binding")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Assignment") 3203 21 3203 41 ("%%get-assignment-value" "expression" "%%get-assignment-binding" "jazz.emit-binding-assignment" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Assignment") 3207 21 3207 41 ("%%get-assignment-value" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Lambda" #f 3221 27 3221 38 ()}
      {Lisp-Entry "jazz.new-lambda" #f 3224 9 3224 24 ("jazz.Lambda" "jazz.allocate-lambda" "body" "signature" "source" "type")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Lambda") 3228 21 3228 41 ("%%get-expression-source" "jazz.new-function-type" ",@signature-casts" ",cast-body" ",signature-output" "%%not" "if" "%%get-code-type" "jazz.sourcified-form" "begin" "jazz.new-code" "jazz.emit-type-cast" "jazz.simplify-begin" "cast-body" "jazz.emit-signature-casts" "signature-casts" "jazz.emit-expression" "body-code" "jazz.emit-signature" "signature-output" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "expression" "%%get-expression-type" "type" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Lambda") 3251 21 3251 41 ("%%get-lambda-body" "jazz.fold-statement" "%%get-lambda-signature" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Let" #f 3266 27 3266 35 ()}
      {Lisp-Entry "jazz.new-let" #f 3269 9 3269 21 ("jazz.Let" "jazz.allocate-let" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Let") 3273 21 3273 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-let-body" "body" "expression" "%%get-let-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Let") 3297 21 3297 41 ("%%get-let-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Named-Let" #f 3311 27 3311 41 ()}
      {Lisp-Entry "jazz.new-named-let" #f 3314 9 3314 27 ("jazz.Named-Let" "jazz.allocate-named-let" "body" "bindings" "variable" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Named-Let") 3318 21 3318 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "annotated-variable" "binding" "map" "bindings-output" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.Any" "jazz.new-annotated-variable" "cons" "jazz.with-annotated-frame" "%%get-let-body" "body" "%%get-let-bindings" "bindings" "expression" "%%get-named-let-variable" "variable" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Named-Let") 3343 21 3343 41 ("%%get-let-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Letstar" #f 3357 27 3357 39 ()}
      {Lisp-Entry "jazz.new-letstar" #f 3360 9 3360 25 ("jazz.Letstar" "jazz.allocate-letstar" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Letstar") 3364 21 3364 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "let*" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-letstar-body" "body" "expression" "%%get-letstar-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Letstar") 3388 21 3388 41 ("%%get-letstar-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Letrec" #f 3402 27 3402 38 ()}
      {Lisp-Entry "jazz.new-letrec" #f 3405 9 3405 24 ("jazz.Letrec" "jazz.allocate-letrec" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Letrec") 3409 21 3409 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "letrec" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-letrec-body" "body" "expression" "%%get-letrec-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Letrec") 3433 21 3433 41 ("%%get-letrec-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Receive" #f 3447 27 3447 39 ()}
      {Lisp-Entry "jazz.new-receive" #f 3450 9 3450 25 ("jazz.Receive" "jazz.allocate-receive" "body" "expression" "variables" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Receive") 3454 21 3454 41 ("%%get-expression-source" "%%get-code-type" ",expression-output" "%%get-lexical-binding-name" "variable" "map" "receive" "jazz.new-code" "body-code" "jazz.emit-expression" "jazz.sourcified-form" "expression-output" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-receive" "jazz.with-annotated-frame" "%%get-receive-body" "body" "%%get-receive-expression" "expr" "expression" "%%get-receive-variables" "variables" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Receive") 3473 21 3473 41 ("%%get-receive-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Body" #f 3487 27 3487 36 ()}
      {Lisp-Entry "jazz.new-body" #f 3490 9 3490 22 ("jazz.Body" "jazz.allocate-body" "expressions" "internal-defines")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Body") 3494 21 3494 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "append" "jazz.new-code" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-internal-defines" "jazz.with-annotated-frame" "%%get-body-expressions" "expressions" "expression" "%%get-body-internal-defines" "internal-defines" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Body") 3507 21 3507 41 ("%%get-body-expressions" "%%get-body-internal-defines" "jazz.fold-statements" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Internal-Define" #f 3521 27 3521 47 ()}
      {Lisp-Entry "jazz.new-internal-define" #f 3524 9 3524 33 ("jazz.Internal-Define" "jazz.allocate-internal-define" "value" "variable")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Internal-Define") 3528 21 3528 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "define" "jazz.new-code" "%%get-internal-define-value" "value" "expression" "%%get-internal-define-variable" "variable" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Internal-Define") 3538 21 3538 41 ("%%get-internal-define-value" "jazz.fold-statement" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Begin" #f 3552 27 3552 37 ()}
      {Lisp-Entry "jazz.new-begin" #f 3555 9 3555 23 ("jazz.Begin" "jazz.allocate-begin" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Begin") 3559 21 3559 41 ("%%get-expression-source" "%%get-code-type" "jazz.sourcified-form" "begin" "jazz.new-code" "jazz.emit-statements-code" "code" "expression" "%%get-begin-expressions" "expressions" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Begin") 3568 21 3568 41 ("%%get-begin-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Do" #f 3581 27 3581 34 ()}
      {Lisp-Entry "jazz.new-do" #f 3584 9 3584 20 ("jazz.Do" "jazz.allocate-do" "body" "result" "test" "bindings")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Do") 3588 21 3588 41 ("%%get-code-type" ",bindings-output" "do" "jazz.new-code" "body-code" "result-code" "test-code" ",@step-code-list" ",init-code" "%%get-lexical-binding-name" "list" "if" "step-code-list" "jazz.emit-expression" "jazz.sourcified-form" "init-code" "%%cddr" "step" "%%cadr" "init" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-do-body" "body" "%%get-do-result" "result" "%%get-do-test" "test" "expression" "%%get-do-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Call" #f 3628 27 3628 36 ()}
      {Lisp-Entry "jazz.new-call" #f 3631 9 3631 22 ("jazz.Call" "jazz.allocate-call" "arguments" "operator" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Call") 3635 21 3635 41 ("%%get-expression-source" "jazz.emit-call" "jazz.emit-inlined-call" "jazz.emit-primitive-call" "jazz.emit-primitive-new-call" "jazz.emit-specialized-call" "or" "jazz.sourcify-code" "jazz.emit-expressions" "arguments-codes" "%%get-declaration-locator" "jazz.Declaration" "%%get-reference-binding" "binding" "jazz.Reference" "%%class-is?" "if" "locator" "%%get-call-arguments" "arguments" "expression" "%%get-call-operator" "operator" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Call") 3654 21 3654 41 ("%%get-call-arguments" "jazz.fold-expressions" "%%get-call-operator" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.call-return-type" #f 3663 9 3663 30 ("jazz.Any" "%%get-function-type-result" "jazz.Function-Type" "%%is?" "if" "operator-type")}
      {Lisp-Entry "jazz.specializers" #f 3674 8 3674 25 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.add-specializer" #f 3678 9 3678 29 ("%%list" "%%table-ref" "%%append" "jazz.specializers" "%%table-set!" "specializer" "specialized-declaration")}
      {Lisp-Entry "jazz.get-specializers" #f 3684 9 3684 30 ("jazz.specializers" "%%table-ref" "binding")}
      {Lisp-Entry "jazz.emit-specialized-call" #f 3688 9 3688 35 ("%%cdr" "%%get-function-type-result" "jazz.codes-forms" ",locator" "jazz.new-code" "jazz.emit-inlined-binding-call" "jazz.match-signature?" "%%get-lexical-binding-type" "function-type" "%%car" "specializer" "on" "'on" "jazz.debug-specializers" "%%get-lexical-binding-name" "specialized" "'specialized" "call" "'call" "match" "'match" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "scheme.dialect.kernel./" "scheme.dialect.kernel.*" "scheme.dialect.kernel.-" "scheme.dialect.kernel.+" "scheme.dialect.kernel.>=" "scheme.dialect.kernel.>" "scheme.dialect.kernel.<=" "scheme.dialect.kernel.<" "scheme.dialect.kernel.=" "%%memq" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-library-warn?" "jazz.warnings?" "and" "%%when" "begin" "%%null?" "scan" "iter" "jazz.codes-types" "types" "jazz.get-specializers" "specializers" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "jazz.emit-specialized-locator" "or" "%%not" "if" "environment" "declaration" "arguments-codes" "arguments" "locator" "operator")}
      {Lisp-Entry "jazz.emit-specialized-locator" #f 3729 8 3729 37 ()}
      {Lisp-Entry "jazz.emit-primitive-new-call" #f 3742 8 3742 36 ()}
      {Lisp-Entry "jazz.primitive-patterns" #f 3767 8 3767 31 ()}
      {Lisp-Entry "jazz.initialize-primitive-patterns" #f 3771 9 3771 43 ("set!" "jazz.primitive-patterns" "jazz.walk-specifier" "list" "%%cadr" "specifier" "name" "pattern" "map" "%%table-set!" "%%cdr" "patterns" "%%car" "operator" "pair" "lambda" "for-each" "eq?" "test:" "%%make-table" "table" "let")}
      {Lisp-Entry "jazz.add-primitive-patterns" #f 3786 9 3786 36 ("%%cons" "jazz.primitive-patterns" "set!" "patterns" "operator")}
      {Lisp-Entry "jazz.get-primitive-patterns" #f 3790 9 3790 36 ("jazz.primitive-patterns" "%%table-ref" "locator")}
      {Lisp-Entry "jazz.emit-primitive-call" #f 3839 9 3839 33 ("%%cdr" "%%get-function-type-result" "jazz.codes-forms" ",name" "jazz.new-code" "jazz.match-signature?" "%%car" "function-type" "name" "jazz.bind" "jazz.identifier-name" "primitive" "'primitive" "call" "'call" "match" "'match" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "scheme.dialect.kernel.cdr" "scheme.dialect.kernel.car" "%%memq" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-library-warn?" "jazz.warnings?" "and" "%%when" "begin" "%%null?" "scan" "iter" "jazz.codes-types" "types" "jazz.get-primitive-patterns" "patterns" "let" "%%not" "if" "environment" "declaration" "arguments-codes" "arguments" "locator" "operator")}
      {Lisp-Entry "jazz.emit-inlined-call" #f 3867 9 3867 31 ("jazz.emit-inlined-binding-call" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "if" "environment" "declaration" "arguments" "operator")}
      {Lisp-Entry "jazz.match-signature?" #f 3879 9 3879 30 ("list-tail" "lambda" "jazz.every?" "%%get-rest-type-type" "match-rest?" "else" "%%cdr" "%%car" "cond" "expected" "types" "args" "iter" "%%null?" "%%not" "%%fx<=" "%%fx>=" "match-positional?" "jazz.Any" "%%subtype?" "%%get-category-type-declaration" "%%get-reference-binding" "%%eq?" "jazz.Reference" "and" "or" "jazz.Category-Type" "%%class-is?" "if" "expect" "type" "arg" "match?" "define" "%%get-function-type-rest" "rest" "%%get-function-type-named" "named" "%%get-function-type-optional" "optional" "%%get-function-type-positional" "positional" "%%get-function-type-mandatory" "mandatory" "%%length" "argcount" "let" "function-type" "argument-types" "arguments")}
      {Lisp-Entry "jazz.If" #f 3928 27 3928 34 ()}
      {Lisp-Entry "jazz.new-if" #f 3931 9 3931 20 ("jazz.If" "jazz.allocate-if" "no" "yes" "test" "source")}
      {Lisp-Entry "jazz.type-tests" #f 3935 8 3935 23 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.not-type-tests" #f 3977 8 3977 27 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.restrict-type" #f 3984 9 3984 27 ("jazz.new-restriction-type" "type" "base")}
      {Lisp-Entry "jazz.restriction-of?" #f 3988 9 3988 29 ("%%get-restriction-type-type" "jazz.Restriction-Type" "%%class-is?" "and" "class" "type")}
      {Lisp-Entry "jazz.complement-type" #f 3993 9 3993 29 ("jazz.new-complement-type" "jazz.new-restriction-type" "%%get-restriction-type-type" "%%get-complement-type-type" "%%get-restriction-type-base" "%%eq?" "jazz.Complement-Type" "jazz.restriction-of?" "and" "if" "type" "base")}
      {Lisp-Entry "jazz.branch-types" #f 4000 9 4000 26 ("cons" "process-expr" "environment" "test")
        {Lisp-Entry "process-not" #f 4001 11 4001 22 ("process-expr" "revenv" "env" "expr")}
        {Lisp-Entry "process-and" #f 4004 11 4004 22 ("%%cons" "%%cdr" "process-expr" "newenv" "%%car" "expr" "%%null?" "if" "augmented" "scan" "iter" "let" "env" "expr-list")}
        {Lisp-Entry "process-or" #f 4012 11 4012 21 ("%%cons" "%%cdr" "process-expr" "newenv" "%%car" "expr" "%%null?" "if" "augmented" "scan" "iter" "let" "env" "expr-list")}
        {Lisp-Entry "process-is" #f 4020 11 4020 21 ("%%cons" "%%cdr" "no" "%%car" "jazz.new-restricted-binding" "list" "jazz.new-annotated-frame" "cons" "yes" "jazz.Pair" "jazz.Null" "jazz.List" "%%eq?" "no-type" "else" "jazz.resolve-declaration" "jazz.Declaration" "%%get-reference-binding" "binding" "jazz.Reference" "%%class-is?" "jazz.type?" "cond" "yes-type" "let" "if" "extract-binding" "actual-type" "origin" "receive" "env" "type-expr" "expr")}
        {Lisp-Entry "extract-binding" #f 4053 11 4053 26 ("else" "%%get-lexical-binding-type" "jazz.Declaration" "values" "%%get-annotated-variable-variable" "origin" "%%car" "jazz.find-annotated" "actual-type" "actual-variable" "frame" "receive" "jazz.Variable" "cond" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "if" "env" "expr")}
        {Lisp-Entry "revenv" #f 4067 11 4067 17 ("%%car" "%%cdr" "%%cons" "env")}
        {Lisp-Entry "process-expr" #f 4070 11 4070 23 ("%%cons" "%%cdr" "no" "%%get-nillable-type-type" "jazz.new-restricted-binding" "list" "jazz.new-annotated-frame" "cons" "yes" "jazz.Nillable-Type" "extract-binding" "actual-type" "origin" "receive" "jazz.not-type-tests" "jazz.type-tests" "%%table-ref" "class" "else" "revenv" "jazz.dialect.language.is-not?" "%%cadr" "process-is" "2" "jazz.dialect.kernel.is?" "%%car" "process-not" "1" "%%fx=" "scheme.dialect.kernel.not" "case" "%%length" "count" "%%get-call-arguments" "arguments" "%%get-declaration-locator" "operator-locator" "jazz.Declaration" "%%get-reference-binding" "operator-binding" "jazz.Reference" "if" "%%get-call-operator" "operator" "let" "jazz.Call" "%%get-or-expressions" "process-or" "jazz.Or" "%%get-and-expressions" "process-and" "jazz.And" "%%class-is?" "cond" "env" "expr")}}
      {Lisp-Entry "jazz.emit-expression" ("jazz.If") 4121 21 4121 41 ("%%get-expression-source" "%%get-code-type" "jazz.extend-type" "jazz.simplify-begin" "jazz.sourcified-form" "if" "jazz.new-code" "%%get-if-no" "no" "%%get-if-yes" "yes" "jazz.emit-expression" "jazz.branch-types" "no-environment" "yes-environment" "jazz.bind" "expression" "%%get-if-test" "test" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.If") 4135 21 4135 41 ("%%get-if-no" "jazz.fold-expressions" "%%get-if-yes" "%%get-if-test" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Cond" #f 4150 27 4150 36 ()}
      {Lisp-Entry "jazz.new-cond" #f 4153 9 4153 22 ("jazz.Cond" "jazz.allocate-cond" "clauses" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Cond") 4157 21 4157 41 ("%%get-expression-source" "%%get-code-type" "lambda" "map" "jazz.extend-types" "cdr" "cons" "jazz.emit-expression" "jazz.sourcified-form" "else" "'else" "%%not" "output" "jazz.branch-types" "no-environment" "yes-environment" "jazz.bind" "%%cdr" "body" "%%car" "test" "car" "clause" "null?" "if" "recurse" "cond" "jazz.new-code" "expression" "%%get-cond-clauses" "clauses" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Cond") 4181 21 4181 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.Case" #f 4193 27 4193 36 ()}
      {Lisp-Entry "jazz.new-case" #f 4196 9 4196 22 ("jazz.Case" "jazz.allocate-case" "clauses" "target" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Case") 4200 21 4200 41 ("%%get-expression-source" "%%get-code-type" "jazz.extend-types" ",tries" "%%car" "tries" "emited-clause" "jazz.sourcified-form" "case" "jazz.new-code" "jazz.emit-expression" "%%cdr" "body" "clause" "lambda" "map" "emited-clauses" "%%get-case-clauses" "clauses" "expression" "%%get-case-target" "target" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Case") 4220 21 4220 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.And" #f 4232 27 4232 35 ()}
      {Lisp-Entry "jazz.new-and" #f 4235 9 4235 21 ("jazz.And" "jazz.allocate-and" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.And") 4239 21 4239 41 ("%%get-expression-source" "jazz.Any" "expression" "%%get-and-expressions" "jazz.emit-expressions" "jazz.codes-forms" "and" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.And") 4246 21 4246 41 ("%%get-and-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Or" #f 4259 27 4259 34 ()}
      {Lisp-Entry "jazz.new-or" #f 4262 9 4262 20 ("jazz.Or" "jazz.allocate-or" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Or") 4266 21 4266 41 ("%%get-expression-source" "jazz.Any" "expression" "%%get-or-expressions" "jazz.emit-expressions" "jazz.codes-forms" "or" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Or") 4273 21 4273 41 ("%%get-or-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Declare" #f 4286 27 4286 39 ()}
      {Lisp-Entry "jazz.new-declare" #f 4289 9 4289 25 ("jazz.Declare" "jazz.allocate-declare" "declarations")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Declare") 4293 21 4293 41 ("jazz.Any" ",@declarations" "declare" "jazz.new-code" "expression" "%%get-declare-declarations" "declarations" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Declare") 4301 21 4301 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.C-Include" #f 4313 27 4313 41 ()}
      {Lisp-Entry "jazz.new-c-include" #f 4316 9 4316 27 ("jazz.C-Include" "jazz.allocate-c-include" "name")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Include") 4320 21 4320 41 ("jazz.Any" "%%string-append" "c-declare" "jazz.new-code" "expression" "%%get-c-include-name" "name" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Include") 4328 21 4328 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.C-Declare" #f 4340 27 4340 41 ()}
      {Lisp-Entry "jazz.new-c-declare" #f 4343 9 4343 27 ("jazz.C-Declare" "jazz.allocate-c-declare" "code")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Declare") 4347 21 4347 41 ("jazz.Any" ",code" "c-declare" "jazz.new-code" "expression" "%%get-c-declare-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Declare") 4355 21 4355 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.C-Named-Declare-Declaration" #f 4367 27 4367 59 ()}
      {Lisp-Entry "jazz.new-c-named-declare-declaration" #f 4370 9 4370 45 ("jazz.setup-declaration" "jazz.C-Named-Declare-Declaration" "jazz.allocate-c-named-declare-declaration" "new-declaration" "let" "code" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.C-Named-Declare-Declaration") 4376 21 4376 42 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.C-Named-Declare-Declaration") 4380 21 4380 55 (",code" "c-declare" "declaration" "%%get-c-named-declare-declaration-code" "code" "let")}
      {Lisp-Entry "jazz.C-Initialize" #f 4393 27 4393 44 ()}
      {Lisp-Entry "jazz.new-c-initialize" #f 4396 9 4396 30 ("jazz.C-Initialize" "jazz.allocate-c-initialize" "code")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Initialize") 4400 21 4400 41 ("jazz.Any" ",code" "c-initialize" "jazz.new-code" "expression" "%%get-c-initialize-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Initialize") 4408 21 4408 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.C-Function" #f 4420 27 4420 42 ()}
      {Lisp-Entry "jazz.new-c-function" #f 4423 9 4423 28 ("jazz.C-Function" "jazz.allocate-c-function" "expansion")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Function") 4427 21 4427 41 ("jazz.Any" "expression" "%%get-c-function-expansion" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Function") 4434 21 4434 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.Parameterize" #f 4446 27 4446 44 ()}
      {Lisp-Entry "jazz.new-parameterize" #f 4449 9 4449 30 ("jazz.Parameterize" "jazz.allocate-parameterize" "body" "bindings")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Parameterize") 4453 21 4453 41 ("%%get-code-type" "jazz.sourcified-form" "%%cdr" "value" "%%car" "variable" "binding" "lambda" "map" "parameterize" "jazz.new-code" "jazz.emit-expression" "body-code" "%%get-parameterize-body" "body" "expression" "%%get-parameterize-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Parameterize") 4469 21 4469 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.Time-Special" #f 4481 27 4481 44 ()}
      {Lisp-Entry "jazz.new-time-special" #f 4484 9 4484 30 ("jazz.Time-Special" "jazz.allocate-time" "expression")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Time-Special") 4488 21 4488 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "time" "jazz.new-code" "%%get-time-special-expression" "expression" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Time-Special") 4497 21 4497 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.emit-namespace-statements" #f 4509 9 4509 39 ("jazz.queue-list" "jazz.sourcified-form" "jazz.emit-expression" "code" "jazz.emit-declaration" "jazz.enqueue" "jazz.Declaration" "%%class-is?" "if" "statement" "lambda" "for-each" "jazz.new-queue" "queue" "let" "environment" "declaration" "statements")}
      {Lisp-Entry "jazz.emit-statements-code" #f 4521 9 4521 34 ("jazz.new-code" "jazz.sourcified-form" "%%get-code-type" "set!" "jazz.emit-expression" "code" "jazz.emit-declaration" "jazz.Declaration" "%%class-is?" "if" "statement" "lambda" "map" "emited" "last-type" "let" "environment" "declaration" "statements")}
      {Lisp-Entry "jazz.fold-statement" #f 4534 9 4534 28 ("jazz.fold-expression" "jazz.fold-declaration" "jazz.Declaration" "%%class-is?" "if" "s" "k" "f" "statement")}
      {Lisp-Entry "jazz.fold-statements" #f 4540 9 4540 29 ("%%cdr" "jazz.fold-statements" "%%car" "jazz.fold-statement" "%%null?" "if" "seed" "s" "k" "f" "statements")}
      {Lisp-Entry "jazz.walk" #f 4591 9 4591 18 ("jazz.walk-constant" "else" "jazz.walk-form" "%%pair?" "jazz.walk-symbol" "%%symbol?" "cond" "jazz.source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-list" #f 4601 9 4601 23 ("jazz.queue-list" "jazz.walk" "jazz.enqueue" "continuation-capture" "form" "lambda" "for-each" "jazz.new-queue" "queue" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-body" #f 4611 9 4611 23 ("jazz.queue-list" "jazz.walk-internal-define" "map" "jazz.enqueue" "jazz.new-variable" "variable" "%%symbol?" "name" "%%desourcify" "%%cadr" "signature" "internal-define" "augmented-environment" "jazz.new-queue" "variables" "jazz.walk-list" "jazz.new-body" "%%car" "%%eq?" "%%null?" "or" "scan" "iter" "expressions" "'expressions" "else" "defines" "'defines" "%%cons" "jazz.define-form?" "jazz.source-code" "%%cdr" "jazz.error" "%%neq?" "set!" "%%not" "if" "substate" "sub" "for-each" "state" "jazz.begin-form?" "cond" "form" "lambda" "process" "letrec" "internal-defines" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-internal-define" #f 4654 9 4654 34 ("jazz.walk" "jazz.new-internal-define" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "jazz.source-code" "%%cdr" "jazz.parse-define" "parameters" "value" "specifier" "name" "receive" "variable" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-define" #f 4660 9 4660 26 (",@body" ",@specifier-list" ",parameters" "%%list" "specifier-list" "body" "%%desourcify" "parameters" "values" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "name" "let" "%%car" "jazz.source-code" "%%symbol?" "if" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-quote" #f 4679 9 4679 24 ("jazz.walk-constant" "jazz.Null" "quote" "jazz.new-constant" "%%null?" "if" "%%cadr" "expression" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-keyword" #f 4687 9 4687 26 ("jazz.Keyword" "jazz.new-constant" "keyword" "walker")}
      {Lisp-Entry "jazz.walk-enumerator" #f 4691 9 4691 29 ("jazz.Symbol" "quote" "'quote" "%%list" "jazz.new-constant" "enumerator" "walker")}
      {Lisp-Entry "jazz.walk-constant" #f 4695 9 4695 27 ("jazz.register-literal" "else" "jazz.Pair" "jazz.scheme-pair-literal?" "jazz.Null" "%%null?" "jazz.Values" "%%values?" "jazz.U8Vector" "%%u8vector?" "jazz.Vector" "%%vector?" "jazz.Symbol" ",form-src" "quote" "%%symbol?" "jazz.Number" "%%number?" "jazz.Flonum" "%%flonum?" "jazz.Fixnum" "%%fixnum?" "jazz.Keyword" "%%keyword?" "jazz.String" "%%string?" "jazz.Char" "%%char?" "jazz.Boolean" "jazz.new-constant" "%%boolean?" "cond" "jazz.source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.scheme-pair-literal?" #f 4727 9 4727 34 ("%%cdr" "%%car" "%%pair?" "and" "%%vector?" "%%symbol?" "%%number?" "%%keyword?" "%%string?" "%%char?" "%%boolean?" "%%null?" "or" "expr" "lambda" "scheme-data?" "letrec" "form")}
      {Lisp-Entry "jazz.Literal-Constructors" #f 4749 8 4749 33 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.register-literal-constructor" #f 4753 9 4753 42 ("jazz.Literal-Constructors" "%%table-set!" "constructor" "name")}
      {Lisp-Entry "jazz.require-literal-constructor" #f 4757 9 4757 41 ("jazz.error" "jazz.Literal-Constructors" "%%table-ref" "or" "name")}
      {Lisp-Entry "jazz.construct-literal" #f 4762 9 4762 31 ("%%cdr" "%%apply" "%%car" "jazz.require-literal-constructor" "constructor" "let" "%%null?" "if" "lst")}
      {Lisp-Entry "jazz.register-literal" #f 4769 9 4769 30 ("jazz.lookup-reference" "jazz.new-constant" "%%class-of" "%%get-category-name" "jazz.identifier-name" "class-name" "jazz.walk-literal" "%%cdr" "%%set-cdr!" "%%get-library-declaration-literals" "%%set-library-declaration-literals" "%%cons" "info" "%%get-declaration-locator" "%%symbol->string" "%%string-append" "jazz.generate-symbol" "name" "%%get-declaration-toplevel" "library-declaration" "let" "literal" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.get-registered-literal" #f 4783 9 4783 36 ("%%cadr" "if" "%%get-library-declaration-literals" "assq" "pair" "let" "literal" "library-declaration")}
      {Lisp-Entry "jazz.walk-literal" #f 4790 9 4790 26 ("3" "0" "%%class-dispatch" "else" "cdr" "car" "cons" "%%pair?" "cond" "jazz.walk" "jazz.walker-environment" "%%cons" "environment" "%%get-declaration-toplevel" "library-declaration" "let*" "literal" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.make-symbolic-chars" #f 4802 9 4802 33 ("eq?" "%%cdr" "integer->char" "%%car" "%%cons" "pair" "lambda" "map" "%%list->table" "alist")}
      {Lisp-Entry "jazz.Symbolic-Chars" #f 4810 8 4810 27 ("#xA9" "copyright" "#x7F" "delete" "#x7D" "close-brace" "#x7B" "open-brace" "#x60" "backquote" "#x5F" "underscore" "#x5E" "exponential" "#x5D" "close-bracket" "#x5C" "backslash" "#x5B" "open-bracket" "#x40" "at" "#x3F" "question-mark" "#x3B" "semi-colon" "#x3A" "colon" "#x2F" "slash" "#x2E" "period" "#x2D" "minus" "#x2C" "comma" "#x2B" "plus" "#x2A" "times" "#x29" "close-parenthesis" "#x28" "open-parenthesis" "#x27" "quote" "#x26" "ampersand" "#x23" "sharp" "#x22" "double-quote" "#x21" "exclamation-point" "#x20" "space" "#x1F" "down-arrow" "#x1E" "up-arrow" "#x1D" "right-arrow" "#x1C" "left-arrow" "#x1B" "escape" "#x0D" "return" "#x0C" "page-down" "#x0B" "page-up" "#x0A" "linefeed" "#x09" "tab" "#x08" "backspace" "#x05" "info" "#x04" "end" "#x03" "enter" "#x01" "home" "#x00" "zero" "jazz.make-symbolic-chars")}
      {Lisp-Entry "jazz.symbolic-char" #f 4858 9 4858 27 ("jazz.Symbolic-Chars" "%%table-ref" "name")}
      {Lisp-Entry "jazz.register-variable" #f 4867 9 4867 31 ("%%get-library-declaration-variables" "jazz.enqueue" "cons" "variable" "%%get-declaration-locator" "%%symbol->string" "%%string-append" "jazz.generate-symbol" "symbol" "%%get-declaration-toplevel" "library-declaration" "let" "value" "suffix" "declaration")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Walker") 4880 30 4880 46 ("symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Walker") 4883 21 4883 37 ("jazz.walk-symbol-reference" "else" "walker" "jazz.walk-enumerator" "jazz.enumerator?" "cond" "jazz.source-code" "symbol" "let" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-setbang" #f 4891 9 4891 26 ("jazz.error" "jazz.walk-symbol-assignment" "%%symbol?" "if" "%%cddr" "%%car" "value" "%%cadr" "jazz.source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-symbol" #f 4899 9 4899 27 ("jazz.walk-binding-lookup" "binding" "lambda" "jazz.find-in" "jazz.lookup-composite" "jazz.composite-name?" "if" "symbol" "environment" "walker")}
      {Lisp-Entry "jazz.lookup-composite" #f 4907 9 4907 30 ("%%list" "jazz.lookup-subpath" "if" "jazz.outline-library" "library-decl" "let" "jazz.split-composite" "name" "library-name" "receive" "symbol" "environment" "walker")}
      {Lisp-Entry "jazz.lookup-subpath" #f 4915 9 4915 28 ("%%cdr" "jazz.lookup-subpath" "%%car" "jazz.lookup-declaration" "subdecl" "let" "%%null?" "if" "subpath" "declaration")}
      {Lisp-Entry "jazz.lookup-accessible/compatible-symbol" #f 4924 9 4924 49 ("jazz.register-autoload-declaration" "%%get-declaration-toplevel" "library" "jazz.Autoload-Declaration" "jazz.validate-compatibility" "jazz.validate-access" "begin" "jazz.Declaration" "%%class-is?" "and" "if" "jazz.source-code" "jazz.lookup-symbol" "referenced-declaration" "let" "symbol-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-access" ("jazz.Walker") 4943 30 4943 50 ("referenced-declaration" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-access" ("jazz.Walker") 4946 21 4946 41 ("jazz.unspecified" "referenced-declaration" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-compatibility" #f 4950 9 4950 36 ("jazz.walk-warning" "%%get-declaration-locator" "referenced-locator" "let" "deprecated" "'deprecated" "%%get-declaration-compatibility" "%%eq?" "if" "referenced-declaration" "declaration" "walker")}
      {Lisp-Entry "jazz.walk-symbol-reference" #f 4961 9 4961 35 ("jazz.walk-free-reference" "jazz.new-reference" "jazz.walk-binding-referenced" "jazz.Variable" "%%class-is?" "begin" "if" "jazz.lookup-accessible/compatible-symbol" "binding" "let" "symbol-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-free-reference" ("jazz.Walker") 4971 30 4971 54 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-reference" ("jazz.Walker") 4974 21 4974 45 ("walker" "jazz.walk-unresolved" "symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Walker") 4983 30 4983 57 ("value" "symbol" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Walker") 4986 21 4986 48 ("jazz.walk-free-assignment" "jazz.walk" "jazz.new-assignment" "jazz.walk-binding-validate-assignment" "begin" "if" "walker" "jazz.lookup-accessible/compatible-symbol" "binding" "let" "value" "symbol" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" ("jazz.Walker") 4995 30 4995 55 ("symbol" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" ("jazz.Walker") 4998 21 4998 46 ("walker" "jazz.walk-unresolved" "symbol" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Walker") 5007 30 5007 44 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Walker") 5010 21 5010 35 ("jazz.walk-call" "jazz.walk" "jazz.walk-binding-expand-form" "expansion" "jazz.walk-binding-expandable?" "jazz.walk-binding-walk-form" "jazz.walk-binding-walkable?" "if" "walker" "jazz.lookup-accessible/compatible-symbol" "%%symbol?" "and" "binding" "jazz.source-code" "%%car" "%%desourcify" "procedure-expr" "let" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.lookup-macro-form" #f 5029 9 5029 31 ("jazz.walk-binding-expandable?" "and" "if" "jazz.lookup-accessible/compatible-symbol" "binding" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-macros" #f 5036 9 5036 27 ("jazz.expand-macros" "jazz.walk-binding-expand-form" "expansion" "jazz.lookup-macro-form" "%%symbol?" "and" "binding" "%%car" "procedure-expr" "let" "%%pair?" "%%not" "if" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-call" #f 5052 9 5052 23 ("jazz.walk-list" "jazz.walk" "lambda" "continuation-capture" "jazz.new-call" "jazz.desourcify-list" "jazz.walk-binding-validate-call" "if" "%%cdr" "arguments" "jazz.source-code" "%%car" "operator" "let" "form-src" "procedure-binding" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-arguments" ("jazz.Walker") 5064 30 5064 53 ("arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" ("jazz.Walker") 5067 21 5067 44 ("walker" "jazz.walk-error" "%%get-declaration-locator" "locator" "%%fx=" "%%not" "%%fx<" "if" "%%length" "passed" "%%get-signature-rest" "rest" "%%get-signature-mandatory" "mandatory" "let" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.walk-require-declaration" #f 5082 9 5082 38 ("jazz.add-library-require" "require" "lambda" "for-each" "%%cdr" "jazz.filter-features" "requires" "%%get-declaration-toplevel" "library-declaration" "let" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-require" #f 5090 9 5090 26 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-export-declaration" #f 5099 9 5099 37 ("jazz.add-library-export" "export-invoice" "lambda" "for-each" "%%cdr" "jazz.filter-features" "jazz.walk-library-exports" "export-invoices" "%%get-declaration-toplevel" "library-declaration" "let" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-export" #f 5107 9 5107 25 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-import-declaration" #f 5116 9 5116 37 ("jazz.add-library-import" "import-invoice" "lambda" "for-each" "%%cdr" "jazz.filter-features" "jazz.walk-library-imports" "import-invoices" "%%get-declaration-toplevel" "library-declaration" "let" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-import" #f 5124 9 5124 25 ("jazz.new-begin" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Walker") 5133 30 5133 52 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Walker") 5136 21 5136 43 ("walker" "jazz.walk-error" "jazz.Library-Declaration" "%%class-is?" "%%not" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-proclaim" #f 5141 9 5141 27 ("jazz.new-proclaim" "%%cdr" "clauses" "%%desourcify" "form" "let" "jazz.validate-proclaim" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.native-modifiers" #f 5153 8 5153 29 ()}
      {Lisp-Entry "jazz.native-keywords" #f 5157 8 5157 28 ()}
      {Lisp-Entry "jazz.parse-native" #f 5161 9 5161 26 ("values" "%%null?" "%%assert" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "name" "let" "jazz.native-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-declaration" #f 5170 9 5170 37 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-export-declaration" "new-declaration" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native" #f 5179 9 5179 25 ("jazz.find-form-declaration" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.macro-modifiers" #f 5191 8 5191 28 ()}
      {Lisp-Entry "jazz.parse-macro" #f 5196 9 5196 25 ("values" "parameters" "jazz.Any" "type" "name" "%%cdr" "body" "%%car" "%%desourcify" "signature" "let*" "jazz.macro-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-macro-declaration" #f 5206 9 5206 36 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-macro-declaration" "new-declaration" "jazz.walk-parameters" "signature" "let" "%%cdr" "jazz.parse-macro" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-macro" #f 5214 9 5214 24 ("%%set-declaration-source" "jazz.walk-body" "%%set-macro-declaration-body" "%%set-macro-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-macro" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.syntax-modifiers" #f 5230 8 5230 29 ()}
      {Lisp-Entry "jazz.parse-syntax" #f 5235 9 5235 26 ("values" "parameters" "jazz.Any" "type" "name" "%%cdr" "body" "%%car" "%%desourcify" "signature" "let*" "jazz.syntax-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-syntax-declaration" #f 5245 9 5245 37 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-syntax-declaration" "new-declaration" "jazz.walk-parameters" "signature" "let" "%%cdr" "jazz.parse-syntax" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-syntax" #f 5253 9 5253 25 ("%%set-declaration-source" "jazz.walk-body" "%%set-syntax-declaration-body" "%%set-syntax-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-syntax" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-parameters" #f 5274 9 5274 29 ("values" "jazz.queue-list" "jazz.new-signature" "signature" "jazz.new-optional-parameter" "optional-parameter" "'optional" "null?" "jazz.new-named-parameter" "named-parameter" "%%keyword->string" "%%string->symbol" "'named" "%%cddr" "default" "keyword" "%%keyword?" "jazz.walk" "jazz.Any" "jazz.new-dynamic-parameter" "dynamic-parameter" "%%cadr" "variable" "jazz.specifier->name" "code" "specifier/code" "let*" "jazz.specifier?" "or" "%%pair?" "and" "jazz.walk-error" "jazz.enqueue" "jazz.new-parameter" "positional-parameter" "jazz.walk-specifier" "type" "%%eq?" "if" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "parameter" "else" "%%cons" "%%when" "set!" "jazz.List" "jazz.new-rest-parameter" "parameter-expression" "%%symbol?" "%%null?" "cond" "scan" "iter" "augmented-environment" "rest" "named" "optional" "jazz.new-queue" "positional" "'positional" "section" "let" "walk?" "extended?" "parameters" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-signature-casts" #f 5359 9 5359 34 ("jazz.queue-list" "%%not" "%%get-signature-named" "%%get-signature-optional" "%%get-signature-positional" "for-each" "jazz.enqueue" "jazz.new-queue" "set!" "not" "begin" "jazz.emit-binding-reference" "jazz.emit-parameter-cast" "cast" "jazz.Any" "%%neq?" "and" "if" "%%get-lexical-binding-type" "type" "parameter" "process" "define" "queue" "let" "environment" "source-declaration" "signature")}
      {Lisp-Entry "jazz.emit-signature" #f 5381 9 5381 28 ("jazz.queue-list" "#!rest" "#!key" "#!optional" "%%null?" "%%not" "%%when" "for-each" "jazz.emit-parameter" "jazz.enqueue" "parameter" "emit" "define" "jazz.new-queue" "queue" "%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "let" "environment" "declaration" "signature")}
      {Lisp-Entry "jazz.Catalog" #f 5410 8 5410 20 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-catalog" #f 5414 9 5414 25 ("jazz.Catalog")}
      {Lisp-Entry "jazz.get-catalog-entry" #f 5418 9 5418 31 ("jazz.Catalog" "%%table-ref" "module-name")}
      {Lisp-Entry "jazz.set-catalog-entry" #f 5422 9 5422 31 ("jazz.Catalog" "%%table-set!" "entry" "module-name")}
      {Lisp-Entry "jazz.call-with-catalog-entry-lock" #f 5426 9 5426 42 ("jazz.get-catalog-entry" "%%eq?" "if" "jazz.pop-load-stack" ":walk" "':walk" "jazz.push-load-stack" ":loading" "':loading" "jazz.set-catalog-entry" "dynamic-wind" "lambda" "jazz.call-with-load-lock" "thunk" "module-name")}
      {Lisp-Entry "jazz.outline-module" #f 5440 9 5440 28 ("else" "jazz.set-catalog-entry" "%%not" "if" "jazz.load-toplevel-declaration" "declaration" "lambda" "jazz.call-with-catalog-entry-lock" "jazz.error" ":loading" "case" "jazz.get-catalog-entry" "entry" "let" "error?" "#!optional" "module-name")}
      {Lisp-Entry "jazz.outline-library" #f 5458 9 5458 29 ("jazz.Library-Declaration" "%%class-is?" "%%assert" "jazz.outline-module" "declaration" "let" "error?" "#!optional" "module-name")}
      {Lisp-Entry "jazz.load-toplevel-declaration" #f 5464 9 5464 39 ("lambda" "jazz.parse-verbose?" "jazz.with-verbose" "jazz.parse-library-declaration" "library" "%%cdr" "jazz.parse-module-declaration" "module" "%%car" "case" "jazz.requested-module-resource" "jazz.requested-module-name" "parameterize" "jazz.read-toplevel-form" "form" "load-declaration" "define" "jazz.resource-pathname" "source" "jazz.find-module-src" "src" "let" "module-name")}
      {Lisp-Entry "jazz.parse-read?" #f 5482 8 5482 24 ("make-parameter")}
      {Lisp-Entry "jazz.read-toplevel-form" #f 5486 9 5486 32 ("jazz.error" "library" "module" "%%car" "%%memq" "%%pair?" "and" "or" "jazz.read-source-first" "values" "%%eof-object?" "%%not" "read" "let" "not" "if" "jazz.parse-read?" "parameterize" "port" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "lambda" "jazz.pathname-extension" "jazz.with-extension-reader" "extraneous?" "form" "receive" "read-source?" "parse-read?" "#!key" "source")}
      {Lisp-Entry "jazz.Core-Dialect" #f 5510 27 5510 44 ()}
      {Lisp-Entry "jazz.new-core-dialect" #f 5513 9 5513 30 ("jazz.Core-Dialect" "jazz.allocate-core-dialect")}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Core-Dialect") 5517 21 5517 38 ("'core")}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Core-Dialect") 5521 21 5521 40 ("jazz.new-core-walker")}
      {Lisp-Entry "jazz.Core-Walker" #f 5533 27 5533 43 ()}
      {Lisp-Entry "jazz.new-core-walker" #f 5536 9 5536 29 ("jazz.Core-Walker" "jazz.allocate-core-walker")}}})
