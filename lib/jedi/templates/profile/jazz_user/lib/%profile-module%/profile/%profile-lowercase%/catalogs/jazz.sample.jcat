"Sample"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample" "files" "scheme" "Sample.scm"} 1236190770
    {Lisp-Entry "f" define #f 7 9 7 10 ("a")}
    {Lisp-Entry "v" define #f 12 8 12 9 ("x" "y" "h" "list")}
    {Lisp-Entry "g" define #f 15 9 15 10 ("e" "b" "a" "x")}
    {Lisp-Entry "h" define #f 22 11 22 12 ("k")}
    {Lisp-Entry "i" define #f 25 11 25 12 ()
      {Lisp-Entry "j" define #f 27 13 27 14 ()
        {Lisp-Entry "k" define #f 29 15 29 16 ("e" "d" "c")}}
      {Lisp-Entry "l" define #f 32 13 32 14 ()}}}
  {C-File-Entry {File Jazz "lib" "jazz.sample" "files" "c" "Sample.h"} 1236190770
    {C-Define-Entry "JSample" 11 8 11 15}
    {C-Define-Entry "MACRO" 21 8 21 13}}
  {C-File-Entry {File Jazz "lib" "jazz.sample" "files" "c" "Sample.cpp"} 1236190770
    {C-Category-Entry "Sample"}
    {C-Include-Entry "Jazz.h" 9 10 9 16}
    {C-Include-Entry "JSample.h" 10 10 10 19}
    {C-Export-Entry "CONSTRUCTOR" 14 0 14 11}
    {C-Export-Entry "METHOD" 23 0 23 6}
    {C-Export-Entry "EXTERN" 30 0 30 6}
    {C-Export-Entry "EXTERN" 37 0 37 6}})
"_lib"
 ({Lisp-File-Entry {File jazz.sample "src" "jazz" "sample" "lib" "_lib.jazz"} 1249474054
    {Lisp-Entry "jazz.sample.lib" library #f 8 9 8 24 ("jazz")}})
"library"
 ({Lisp-File-Entry {File jazz.sample "src" "jazz" "sample" "library.jazz"} 1252923643
    {Lisp-Entry "jazz.sample.library" library #f 19 9 19 28 ("name" "#<<end-of-c-code\n...some c code...\nend-of-c-code\n" "#<<end-of-c-code\nN = 2;\nend-of-c-code\n" "x" "defspe" "define-special-form" "jazz")
      {Lisp-Entry "x" define #f 31 10 31 11 ()}
      {Lisp-Entry "y" define #f 32 10 32 11 ()}
      {Lisp-Entry "z" define #f 33 10 33 11 ()}
      {Lisp-Entry "v" define #f 34 10 34 11 ()}
      {Lisp-Entry "w" define #f 35 10 35 11 ()}
      {Lisp-Entry "gamb" define #f 57 13 57 17 ("x")}
      {Lisp-Entry "chic" define #f 60 13 60 17 ("x")}
      {Lisp-Entry "sche" define #f 63 13 63 17 ("x")}
      {Lisp-Entry "defmac" define-macro #f 72 15 72 21 ("x")}
      {Lisp-Entry "mac" macro #f 81 8 81 11 ("x" "rest")}
      {Lisp-Entry "syn" macro #f 85 9 85 12 ("x" "form")}
      {Lisp-Entry "nat" native #f 94 8 94 11 ()}
      {Lisp-Entry "def" define #f 97 9 97 12 ("y")
        {Lisp-Entry "i" define #f 98 11 98 12 ("x")}}
      {Lisp-Entry "defin" definition #f 103 13 103 18 ("x")}
      {Lisp-Entry "literals" define #f 112 9 112 17 ()}
      {Lisp-Entry "comments" define #f 149 9 149 17 ("|a\n  a|" "#" "a" "x")}
      {Lisp-Entry "functional-syntax" define #f 157 9 157 26 ("y" "x")}
      {Lisp-Entry "specifier-syntax" define #f 163 9 163 25 ("y" "x" "b" "let" "a")}
      {Lisp-Entry "binding" define #f 173 9 173 16 ("bind-keywords" "bind-optionals" "bind" "with-closed" "with" "z" "parameterize" "y" "receive" "letrec" "let*" "x" "a" "let")}
      {Lisp-Entry "functional" define #f 190 9 190 19 ("function" "x" "a" "lambda")}
      {Lisp-Entry "quotation" define #f 197 9 197 18 ("y" "unquote-splicing" "x" "unquote" "quasiquote" "a" "quote" "'a")}
      {Lisp-Entry "logical" define #f 206 9 206 16 ("either" "essay" "or" "x" "and")}
      {Lisp-Entry "conditional" define #f 213 9 213 20 ("typecase" "v" "ecase" "a" "case" "else" "cond" "unless" "when" "z" "y" "x" "if")}
      {Lisp-Entry "control" define #f 234 9 234 16 ("while" "v" "z" "a" "do" "delay" "unwind-protect" "catch" "y" "prog1" "x")}
      {Lisp-Entry "assertion" define #f 252 9 252 18 ("error-occurred?" "y" "assert-type" "x" "assert")}
      {Lisp-Entry "iteration" define #f 260 9 260 18 ("finally" "return" "collect" "sum" "do" "unless" "when" "every" "some" "repeat" "with" "then" "first" "downto" "below" "z" "by" "y" "to" "from" "in-properties" "in-sequence" "in-vector" "b" "remainder" "x" "in" "a" "for" "loop")}
      {Lisp-Entry "assignment" define #f 282 9 282 19 ("0" "a" "let" "3" "decrease!" "2" "increase!" "1" "x" "set!")}
      {Lisp-Entry "other" define #f 292 9 292 14 ("time" "y" "x" "construct" "tie")}
      {Lisp-Entry "optional" definition #f 303 13 303 21 ("x" "b" "a")}
      {Lisp-Entry "keyword" definition #f 307 13 307 20 ("x" "b" "b:" "a")}
      {Lisp-Entry "=" specialize #f 317 20 317 21 ("eq?" "s2" "s1")}
      {Lisp-Entry "t" define #f 322 9 322 10 ("y" "x" "cast")}
      {Lisp-Entry "cconst" c-constant #f 331 12 331 18 ("x")}
      {Lisp-Entry "cenum" c-enumeration #f 335 15 335 20 ("#x02" "BB" "#x01" "AA")}
      {Lisp-Entry "cbool" c-type #f 352 8 352 13 ("bool" "native")}
      {Lisp-Entry "cuint" c-type #f 354 8 354 13 ("unsigned-int" "native")}
      {Lisp-Entry "cstruct" c-structure #f 358 13 358 20 ("a" "cuint")}
      {Lisp-Entry "cext" external #f 363 19 363 23 ()}
      {Lisp-Entry "cfunc" definition #f 367 12 367 17 ("cbool" "cuint" "c-function")}
      {Lisp-Entry "cdef" c-definition #f 373 15 373 19 ("b" "a" "x" "cuint" "cbool")}
      {Lisp-Entry "S" remotable-stub "~stub" 397 16 397 17 ()
        {Lisp-Entry "get-value" method #f 400 29 400 38 ()}
        {Lisp-Entry "call" method #f 401 23 401 27 ("a")}
        {Lisp-Entry "exec" method #f 402 23 402 27 ("a")}
        {Lisp-Entry "post" method #f 403 23 403 27 ("a")}}
      {Lisp-Entry "runtime-errors" define #f 411 9 411 23 ("a" "Object" "new" "obj" "let")}
      {Lisp-Entry "I" interface #f 421 11 421 12 ()
        {Lisp-Entry "i" method #f 424 35 424 36 ()}}
      {Lisp-Entry "A" class #f 432 7 432 8 ("Object")
        {Lisp-Entry "initialize" method #f 435 11 435 21 ("x" "nextmethod")}
        {Lisp-Entry "j" method #f 440 11 440 12 ("x")}
        {Lisp-Entry "virt" method #f 444 19 444 23 ("x" "a")}}
      {Lisp-Entry "B" class #f 448 7 448 8 ("x" "initialize" "I" "A")
        {Lisp-Entry "cls" method #f 451 16 451 19 ("x")}
        {Lisp-Entry "slt" slot #f 455 16 455 19 ()}
        {Lisp-Entry "def" define #f 458 10 458 13 ("x")}
        {Lisp-Entry "defin" definition #f 462 14 462 19 ("x")}
        {Lisp-Entry "initialize" method #f 466 11 466 21 ("y" "x" "nextmethod")}
        {Lisp-Entry "inl" method #f 472 25 472 28 ("x")}
        {Lisp-Entry "chain" method #f 476 19 476 24 ("x")}
        {Lisp-Entry "sync" method #f 480 24 480 28 ("x")}
        {Lisp-Entry "i" method #f 484 11 484 12 ("x")}
        {Lisp-Entry "virt" method #f 488 11 488 15 ("y" "x" "nextmethod" "a")}
        {Lisp-Entry "object-syntax" method #f 493 11 493 24 ("" "y" "x" "a" "self")}}
      {Lisp-Entry "C" class #f 504 7 504 8 ("a" "p:" "x" "initialize" "Component")
        {Lisp-Entry "p" property #f 507 22 507 23 ()}
        {Lisp-Entry "get-p" accessor #f 507 47 507 55 ()}
        {Lisp-Entry "set-p" accessor #f 507 47 507 55 ()}}
      {Lisp-Entry "D" class #f 514 7 514 8 ("c" "q:" "b" "p:" "x" "initialize" "C")
        {Lisp-Entry "q" property #f 517 22 517 23 ()}
        {Lisp-Entry "get-q" accessor #f 517 47 517 55 ()}
        {Lisp-Entry "set-q" accessor #f 517 47 517 55 ()}}
      {Lisp-Entry "E" class #f 524 7 524 8 ("5" "q:" "d" "3" "c" "name:" "2" "p:" "1" "r:" "x" "initialize" "Component")
        {Lisp-Entry "r" property #f 527 22 527 23 ()}
        {Lisp-Entry "get-r" accessor #f 527 47 527 55 ()}
        {Lisp-Entry "set-r" accessor #f 527 47 527 55 ()}}
      {Lisp-Entry "F" class #f 538 7 538 8 ("7" "6" "q:" "d" "4" "p:" "c" "name:" "2" "r:" "E")}
      {Lisp-Entry "G" class #f 549 7 549 8 ("7" "6" "q:" "d" "4" "p:" "c" "name:" "3" "r:" "Component")}
      {Lisp-Entry "K" class #f 565 7 565 8 ("Object")}
      {Lisp-Entry "L" class #f 566 7 566 8 ("K")}
      {Lisp-Entry "g" define-generic/specific ("<K>") 569 10 569 11 ("a")}
      {Lisp-Entry "g" define-generic/specific ("<K>") 571 11 571 12 ("x" "a")}
      {Lisp-Entry "g" define-generic/specific ("<L>") 574 11 574 12 ("x" "a")}
      {Lisp-Entry "h" define-generic/specific ("<K>") 578 10 578 11 ("x" "a")}
      {Lisp-Entry "h" define-generic/specific ("<L>") 581 11 581 12 ("x" "a")}}})
"module"
 ({Lisp-File-Entry {File jazz.sample "src" "jazz" "sample" "module.scm"} 1249474054
    {Lisp-Entry "jazz.sample.module" module #f 8 8 8 26 ()}})
"sample"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample" "files" "lisp" "sample.lisp"} 1236190770
    {Lisp-Entry "hello-world" define #f 0 7 0 18 ("t" "format")}
    {Lisp-Entry "verbose-sum" define #f 3 7 3 18 ("+" "t" "format" "y" "x")}})
"t"
 ({Lisp-File-Entry {File jazz.sample "src" "jazz" "sample" "lib" "t.jazz"} 1249474054
    {Lisp-Entry "jazz.sample.lib.t" library #f 8 9 8 26 ("jazz")
      {Lisp-Entry "make-t" definition #f 11 20 11 26 ("T" "new" "a")}
      {Lisp-Entry "t-a" definition #f 15 27 15 30 ("get-a" "t")}
      {Lisp-Entry "T" class #f 19 7 19 8 ("Object")
        {Lisp-Entry "a" slot #f 22 8 22 9 ()}
        {Lisp-Entry "initialize" method #f 25 11 25 21 ("a~self" "set!" "nextmethod" "a")}}}})
