"Sample"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample" "files" "scheme" "Sample.scm"} 1236190770
    {Lisp-Entry "f" #f 7 9 7 10 ("a")}
    {Lisp-Entry "v" #f 12 8 12 9 ("x" "y" "h" "list")}
    {Lisp-Entry "g" #f 15 9 15 10 ("e" "b" "a" "x")}
    {Lisp-Entry "h" #f 22 11 22 12 ("k")}
    {Lisp-Entry "i" #f 25 11 25 12 ()
      {Lisp-Entry "j" #f 27 13 27 14 ()
        {Lisp-Entry "k" #f 29 15 29 16 ("e" "d" "c")}}
      {Lisp-Entry "l" #f 32 13 32 14 ()}}}
  {C-File-Entry {File Jazz "lib" "jazz.sample" "files" "c" "Sample.h"} 1236190770
    {C-Define-Entry "JSample" 11 8}
    {C-Define-Entry "MACRO" 21 8}}
  {C-File-Entry {File Jazz "lib" "jazz.sample" "files" "c" "Sample.cpp"} 1236190770
    {C-Category-Entry "Sample"}
    {C-Include-Entry "Jazz.h" 9 10}
    {C-Include-Entry "JSample.h" 10 10}})
"_lib"
 ({Lisp-File-Entry {File jazz.sample "src" "jazz" "sample" "lib" "_lib.jazz"} 1249474054
    {Lisp-Entry "jazz.sample.lib" #f 8 9 8 24 ("jazz")}})
"library"
 ({Lisp-File-Entry {File jazz.sample "src" "jazz" "sample" "library.jazz"} 1251729948
    {Lisp-Entry "jazz.sample.library" #f 19 9 19 28 ("name" "#<<end-of-c-code\n...some c code...\nend-of-c-code\n" "#<<end-of-c-code\nN = 2;\nend-of-c-code\n" "s2" "s1" "eq?" "x" "defspe" "define-special-form" "jazz")
      {Lisp-Entry "x" #f 31 10 31 11 ()}
      {Lisp-Entry "y" #f 32 10 32 11 ()}
      {Lisp-Entry "z" #f 33 10 33 11 ()}
      {Lisp-Entry "v" #f 34 10 34 11 ()}
      {Lisp-Entry "w" #f 35 10 35 11 ()}
      {Lisp-Entry "gamb" #f 57 13 57 17 ("x")}
      {Lisp-Entry "chic" #f 60 13 60 17 ("x")}
      {Lisp-Entry "sche" #f 63 13 63 17 ("x")}
      {Lisp-Entry "defmac" #f 72 15 72 21 ("x")}
      {Lisp-Entry "mac" #f 81 8 81 11 ("x" "rest")}
      {Lisp-Entry "syn" #f 85 9 85 12 ("x" "form")}
      {Lisp-Entry "nat" #f 94 8 94 11 ()}
      {Lisp-Entry "def" #f 97 9 97 12 ("y")
        {Lisp-Entry "i" #f 98 11 98 12 ("x")}}
      {Lisp-Entry "defin" #f 103 13 103 18 ("x")}
      {Lisp-Entry "literals" #f 112 9 112 17 ()}
      {Lisp-Entry "comments" #f 133 9 133 17 ("a" "x")}
      {Lisp-Entry "functional-syntax" #f 138 9 138 26 ("y" "x")}
      {Lisp-Entry "specifier-syntax" #f 144 9 144 25 ("y" "x" "b" "let" "a")}
      {Lisp-Entry "binding" #f 154 9 154 16 ("bind-keywords" "bind-optionals" "bind" "with-closed" "with" "z" "parameterize" "y" "receive" "letrec" "let*" "x" "a" "let")}
      {Lisp-Entry "functional" #f 171 9 171 19 ("function" "x" "a" "lambda")}
      {Lisp-Entry "quotation" #f 178 9 178 18 ("y" "unquote-splicing" "x" "unquote" "quasiquote" "a" "quote" "'a")}
      {Lisp-Entry "logical" #f 187 9 187 16 ("either" "essay" "or" "x" "and")}
      {Lisp-Entry "conditional" #f 194 9 194 20 ("typecase" "v" "ecase" "a" "case" "else" "cond" "unless" "when" "z" "y" "x" "if")}
      {Lisp-Entry "control" #f 215 9 215 16 ("while" "v" "z" "a" "do" "delay" "unwind-protect" "catch" "y" "prog1" "x")}
      {Lisp-Entry "assertion" #f 233 9 233 18 ("error-occurred?" "y" "assert-type" "x" "assert")}
      {Lisp-Entry "iteration" #f 241 9 241 18 ("finally" "return" "collect" "sum" "do" "unless" "when" "every" "some" "repeat" "with" "then" "first" "downto" "below" "z" "by" "y" "to" "from" "in-properties" "in-sequence" "in-vector" "b" "remainder" "x" "in" "a" "for" "loop")}
      {Lisp-Entry "assignment" #f 263 9 263 19 ("0" "a" "let" "3" "decrease!" "2" "increase!" "1" "x" "set!")}
      {Lisp-Entry "other" #f 273 9 273 14 ("time" "y" "x" "construct" "tie")}
      {Lisp-Entry "optional" #f 284 13 284 21 ("x" "b" "a")}
      {Lisp-Entry "keyword" #f 288 13 288 20 ("x" "b" "b:" "a")}
      {Lisp-Entry "t" #f 303 9 303 10 ("y" "x" "cast")}
      {Lisp-Entry "cconst" #f 312 12 312 18 ("x")}
      {Lisp-Entry "cenum" #f 316 15 316 20 ("#x02" "BB" "#x01" "AA")}
      {Lisp-Entry "cbool" #f 333 8 333 13 ("bool" "native")}
      {Lisp-Entry "cuint" #f 335 8 335 13 ("unsigned-int" "native")}
      {Lisp-Entry "cstruct" #f 339 13 339 20 ("a" "cuint")}
      {Lisp-Entry "cext" #f 344 19 344 23 ()}
      {Lisp-Entry "cfunc" #f 348 12 348 17 ("cbool" "cuint" "c-function")}
      {Lisp-Entry "cdef" #f 354 15 354 19 ("b" "a" "x" "cuint" "cbool")}
      {Lisp-Entry "S" #f 378 16 378 17 ("l" "x" "a" "k")
        {Lisp-Entry "call" #f 381 17 381 21 ("post" "exec" "a" "call" "public" "method" "get-value" "value")}
        {Lisp-Entry "runtime-errors" #f 392 9 392 23 ("a" "Object" "new" "obj" "let")}
        {Lisp-Entry "I" #f 402 11 402 12 ()
          {Lisp-Entry "i" #f 405 35 405 36 ()}}
        {Lisp-Entry "A" #f 413 7 413 8 ()
          {Lisp-Entry "initialize" #f 416 11 416 21 ("x" "nextmethod")}
          {Lisp-Entry "j" #f 421 11 421 12 ("x")}
          {Lisp-Entry "virt" #f 425 19 425 23 ("x" "a")}}
        {Lisp-Entry "B" #f 429 7 429 8 ("x" "initialize")
          {Lisp-Entry "cls" #f 432 16 432 19 ("x")}
          {Lisp-Entry "slt" #f 436 16 436 19 ()}
          {Lisp-Entry "def" #f 439 10 439 13 ("x")}
          {Lisp-Entry "defin" #f 443 14 443 19 ("x")}
          {Lisp-Entry "initialize" #f 447 11 447 21 ("y" "x" "nextmethod")}
          {Lisp-Entry "inl" #f 453 25 453 28 ("x")}
          {Lisp-Entry "chain" #f 457 19 457 24 ("x")}
          {Lisp-Entry "sync" #f 461 24 461 28 ("x")}
          {Lisp-Entry "i" #f 465 11 465 12 ("x")}
          {Lisp-Entry "virt" #f 469 11 469 15 ("y" "x" "nextmethod" "a")}
          {Lisp-Entry "object-syntax" #f 474 11 474 24 ("" "y" "x" "a" "self")}}
        {Lisp-Entry "C" #f 485 7 485 8 ("a" "p:" "x" "initialize")
          {Lisp-Entry "p" #f 488 22 488 23 ()}
          {Lisp-Entry "get-p" #f 488 47 488 55 ()}
          {Lisp-Entry "set-p" #f 488 47 488 55 ()}}
        {Lisp-Entry "D" #f 495 7 495 8 ("c" "q:" "b" "p:" "x" "initialize")
          {Lisp-Entry "q" #f 498 22 498 23 ()}
          {Lisp-Entry "get-q" #f 498 47 498 55 ()}
          {Lisp-Entry "set-q" #f 498 47 498 55 ()}}
        {Lisp-Entry "E" #f 505 7 505 8 ("5" "q:" "d" "3" "c" "name:" "2" "p:" "1" "r:" "x" "initialize")
          {Lisp-Entry "r" #f 508 22 508 23 ()}
          {Lisp-Entry "get-r" #f 508 47 508 55 ()}
          {Lisp-Entry "set-r" #f 508 47 508 55 ()}}
        {Lisp-Entry "F" #f 519 7 519 8 ("7" "6" "q:" "d" "4" "p:" "c" "name:" "2" "r:")}
        {Lisp-Entry "G" #f 530 7 530 8 ("7" "6" "q:" "d" "4" "p:" "c" "name:" "3" "r:")}
        {Lisp-Entry "K" #f 546 7 546 8 ()}
        {Lisp-Entry "L" #f 547 7 547 8 ()}
        {Lisp-Entry "g" #f 550 10 550 11 ("a" "k")}
        {Lisp-Entry "g" #f 552 11 552 12 ()}
        {Lisp-Entry "g" #f 555 11 555 12 ()}
        {Lisp-Entry "h" #f 559 10 559 11 ("x" "a" "k")}
        {Lisp-Entry "h" #f 562 11 562 12 ()}}}})
"module"
 ({Lisp-File-Entry {File jazz.sample "src" "jazz" "sample" "module.scm"} 1249474054
    {Lisp-Entry "jazz.sample.module" #f 8 8 8 26 ()}})
"sample"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample" "files" "lisp" "sample.lisp"} 1236190770
    {Lisp-Entry "hello-world" #f 0 7 0 18 ("t" "format")}
    {Lisp-Entry "verbose-sum" #f 3 7 3 18 ("+" "t" "format" "y" "x")}})
"t"
 ({Lisp-File-Entry {File jazz.sample "src" "jazz" "sample" "lib" "t.jazz"} 1249474054
    {Lisp-Entry "jazz.sample.lib.t" #f 8 9 8 26 ("jazz")
      {Lisp-Entry "make-t" #f 11 20 11 26 ("T" "new" "a")}
      {Lisp-Entry "t-a" #f 15 27 15 30 ("get-a" "t")}
      {Lisp-Entry "T" #f 19 7 19 8 ()
        {Lisp-Entry "a" #f 22 8 22 9 ()}
        {Lisp-Entry "initialize" #f 25 11 25 21 ("a~self" "set!" "nextmethod" "a")}}}})
