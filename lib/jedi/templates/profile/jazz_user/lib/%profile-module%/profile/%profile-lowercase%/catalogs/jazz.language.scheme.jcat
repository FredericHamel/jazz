"Scheme-Explorer"
 ({Lisp-File-Entry {File jazz.language.scheme "src" "jazz" "language" "scheme" "text" "Scheme-Explorer.jazz"} 1245606997
    {Lisp-Entry "jazz.language.scheme.text.Scheme-Explorer" #f 37 19 37 60 ("jazz")
      {Lisp-Entry "Scheme-Explorer" #f 49 7 49 22 ("Lisp-Explorer")
        {Lisp-Entry "get-modifiers" #f 52 11 52 24 ("public" "protected")}
        {Lisp-Entry "get-syntax" #f 56 11 56 21 ("scheme" "'scheme")}
        {Lisp-Entry "Scheme-Toplevels" #f 65 14 65 30 ("jazz.define-method" "jazz.define-virtual-runtime" "jazz.define-virtual" "jazz.define-specic" "jazz.define-generic" "jazz.define-syntax" "jazz.define-check-macro" "jazz.define-macro" "jazz.define" "define-macro" "define")}
        {Lisp-Entry "Gambit-Toplevels" #f 69 14 69 30 ("define-library-type-of-exception" "define-library-type" "define-runtime-syntax" "define-runtime-macro" "define-type-of-port" "define-type" "define-fail-check-type" "define-check-type" "define-prim" "##define-macro")}
        {Lisp-Entry "definition-name?" #f 82 11 82 27 ("get-declaration?" "and" "get-lisp-form" "form" "let" "Gambit-Toplevels" "Scheme-Toplevels" "memq?" "or" "name")}
        {Lisp-Entry "walk-declaration" #f 94 11 94 27 ("exit-list" "walk-named-declaration" "code" "'code" "end" "start" "get-keywords" "find-marked-symbol" "memq?" "symbol" "'symbol" "kind" "eq?" "and" "forward-expr" "when" "not" "if" "enter-list" "list?" "let" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-named-declaration" #f 110 29 110 51 ("walk-unknown" "self" "walk-named-declaration" "symbol?" "get-walk" "walk" "if" "get-lisp-form" "form" "let" "else" "walk-native" "native" "walk-type" "c-define-type" "walk-define-class" "jazz.define-virtual" "jazz.define-class-runtime" "jazz.define-class" "walk-define-macro" "specialize" "instantiate" "template" "syntax" "macro" "define-runtime-syntax" "define-runtime-macro" "##define-macro" "jazz.define-global" "jazz.define-variable" "jazz.define-setting" "jazz.define-special" "jazz.define-syntax" "jazz.define-check-macro" "jazz.define-macro" "define-syntax" "define-macro" "walk-define-generic/specific" "jazz.define-method" "jazz.define-virtual-runtime" "jazz.define-virtual-syntax" "jazz.define-specific" "jazz.define-generic" "walk-define" "define-type-of-port" "define-type" "define-fail-check-type" "define-check-type" "define-library-type-of-exception" "define-library-type" "define-prim" "jazz.define-remote" "jazz.define" "jazz.define-feature" "define" "walk-import" "export" "import" "require" "walk-category" "module" "library" "walk-cond-expand" "cond-expand" "walk-begin" "begin" "case" "walk-expressions?" "doc" "expression" "keyword" "declaration" "symbol" "context")}
        {Lisp-Entry "walk-modifiers" #f 177 11 177 25 ("set!" "start" "get-modifiers" "find-marked-symbol" "memq?" "forward-constituent" "text-constituent?" "and" "when" "0" "char-forward" "c0" "set-start" "forward-whites" "iterate" "end" "copy" "old" "let" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-begin" #f 192 11 192 21 ("walk-declarations" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-cond-expand" #f 196 11 196 27 ("exit-list" "walk-declarations" "feature" "'feature" "code" "'code" "end" "start" "symbol" "'symbol" "get-kind" "eq?" "when" "forward-expr" "set!" "if" "enter-list" "enter?" "not" "while" "done?" "let" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-category" #f 209 11 209 24 ("walk-declarations" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-import" #f 219 11 219 22 ("end" "start" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define" #f 223 11 223 22 ("walk-declarations" "exit-list" "walk-parameters" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define-generic/specific" #f 241 11 241 39 ("walk-declarations" "walk-parameters" "exit-list" "list" "set!" "typename" "get-marked" "name" "get-end" "get-start" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define-macro" #f 263 11 263 28 ("walk-declarations" "exit-list" "code" "'code" "walk-expressions" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define-class" #f 281 11 281 28 ("walk-expressions" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-native" #f 292 11 292 22 ("walk-expressions" "symbol-documented?" "set!" "get-marked" "name" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "walk-modifiers" "end" "start" "entry" "string-length" "1" "+" "substring" "not" "if" "reversed?:" "find" "pos" "let" "str" "parse-identifier" "define" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-type" #f 311 11 311 20 ("walk-expressions" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "end" "start" "entry" "let" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-unknown" #f 321 11 321 23 ("walk-expressions" "code" "'code" "walk-expression" "when" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "symbol-documentation" #f 328 11 328 31 ("get-definition" "and" "when" "doc" "symbol")}
        {Lisp-Entry "symbol-documented?" #f 333 11 333 29 ("symbol-documentation" "doc" "symbol")}}}})
"Scheme-Parser"
 ({Lisp-File-Entry {File jazz.language.scheme "src" "jazz" "language" "scheme" "parser" "Scheme-Parser.jazz"} 1238328025
    {Lisp-Entry "jazz.language.scheme.parser.Scheme-Parser" #f 37 19 37 60 ("jazz")
      {Lisp-Entry "Scheme-Parser" #f 47 7 47 20 ("Lisp-Parser")
        {Lisp-Entry "explorer-class" #f 50 11 50 25 ("Scheme-Explorer" "file")}
        {Lisp-Entry "text-view-class" #f 54 11 54 26 ("Scheme-Text-View")}}}})
"Scheme-Syntax"
 ({Lisp-File-Entry {File jazz.language.scheme "src" "jazz" "language" "scheme" "syntax" "Scheme-Syntax.jazz"} 1238328025
    {Lisp-Entry "jazz.language.scheme.syntax.Scheme-Syntax" #f 37 19 37 60 ("jazz")
      {Lisp-Entry "Scheme-Syntax" #f 47 7 47 20 ("Lisp-Syntax")
        {Lisp-Entry "translate-key" #f 55 11 55 24 ("translate-lisp-key" "scheme-text" "documents" "get-preferences" "get-translate-keys?" "not" "if" "key")}
        {Lisp-Entry "get-constituent-test" #f 66 11 66 31 ("scheme-constituent?")}}}})
"Scheme-Text-Actions"
 ({Lisp-File-Entry {File jazz.language.scheme "src" "jazz" "language" "scheme" "text" "Scheme-Text-Actions.jazz"} 1238328025
    {Lisp-Entry "jazz.language.scheme.text.Scheme-Text-Actions" #f 37 19 37 64 ("jazz")
      {Lisp-Entry "Scheme-Text-Actions" #f 48 7 48 26 ("Actions")}}})
"Scheme-Text-Preferences"
 ({Lisp-File-Entry {File jazz.language.scheme "src" "jazz" "language" "scheme" "text" "Scheme-Text-Preferences.jazz"} 1238328025
    {Lisp-Entry "jazz.language.scheme.text.Scheme-Text-Preferences" #f 37 19 37 68 ("jazz")
      {Lisp-Entry "Scheme-Text-Preferences" #f 51 7 51 30 ("completions:" "Dark-Orange" "feature-color:" "quotation-color:" "named-string-color:" "string-color:" "boolean-color:" "number-color:" "specifier-color:" "Dark-Purple" "tag-color:" "Ochre" "char-color:" "keyword-color:" "Dark-Green" "declaration-color:" "Dark-Blue" "declaration-keyword-color:" "Text-Gray" "expr-comment-color:" "Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Lisp-Text-Preferences")
        {Lisp-Entry "get-categorized-properties" #f 95 11 95 37 ("translate-keys?" "keyword-color" "declaration-color" "expr-comment-color" "comment-color" "title-color" "completions")}
        {Lisp-Entry "get-row-instance" #f 99 11 99 27 ("nextmethod" "else" "Boolean-Row" "translate-keys?" "Completion-List-Row" "completions" "Color-Row" "new" "keyword-color" "declaration-color" "expr-comment-color" "comment-color" "title-color" "field-name" "case" "property")}}}})
"Scheme-Text-View"
 ({Lisp-File-Entry {File jazz.language.scheme "src" "jazz" "language" "scheme" "text" "Scheme-Text-View.jazz"} 1244896779
    {Lisp-Entry "jazz.language.scheme.text.Scheme-Text-View" #f 37 19 37 61 ("jazz")
      {Lisp-Entry "Scheme-Text-View" #f 54 7 54 23 ("tooltip?:" "Lisp-Text-View")
        {Lisp-Entry "install" #f 61 11 61 18 ("Red" "Color" "frame:" "Reference" "'Reference" "get-feature-color" "Feature" "'Feature" "get-quotation-color" "Quotation" "'Quotation" "get-named-string-color" "Named-String" "'Named-String" "get-delimited-string-color" "Delimited-String" "'Delimited-String" "get-string-color" "String" "'String" "get-boolean-color" "Boolean" "'Boolean" "get-char-color" "Char" "'Char" "get-specifier-color" "Specifier" "'Specifier" "get-tag-color" "Tag" "'Tag" "get-keyword-color" "Keyword" "'Keyword" "get-declaration-color" "Declaration" "'Declaration" "get-declaration-keyword-color" "Declaration-Keyword" "'Declaration-Keyword" "get-expr-comment-color" "Expr-Comment" "'Expr-Comment" "get-comment-color" "Comment" "'Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 82 16 82 29 ("scheme-text" "'scheme-text" "rest")}
        {Lisp-Entry "default-extension" #f 86 11 86 28 ()}
        {Lisp-Entry "extensions" #f 90 11 90 21 ()}
        {Lisp-Entry "new-syntax" #f 94 11 94 21 ("Scheme-Syntax" "new")}
        {Lisp-Entry "focus-actions" #f 103 11 103 24 ("nextmethod" "scheme-text" "'scheme-text" "find-actions" "cons")}
        {Lisp-Entry "get-context-menu" #f 113 11 113 27 ("Scheme-Text-Menu" "new")}
        {Lisp-Entry "default-preferences" #f 122 14 122 33 ("completions:" "Dark-Blue" "keyword-color:" "Dark-Green" "declaration-color:" "Dark-Orange" "expr-comment-color:" "Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "form>>")}
        {Lisp-Entry "preferences" #f 127 11 127 22 ("scheme-text" "documents" "get-preferences")}
        {Lisp-Entry "declaration-style" #f 131 11 131 28 ("Declaration" "'Declaration" "documented?")}
        {Lisp-Entry "Scheme-Specials" #f 140 12 140 27 ("%%when" "%%force-uniqueness" "%%assertion" "%%assert" "%%debug-assertion" "%%debug-assert" "%%core-assertion" "%%core-assert" "jazz.define-syntax" "jazz.define-check-macro" "jazz.define-macro" "jazz.define" "jazz.assert" "receive" "prog1" "parameterize" "module" "-1" "library" "letrec" "let*" "let" "lambda" "if" "2" "do" "define-macro" "define" "1" "case" "call/cc" "0" "begin")}
        {Lisp-Entry "Gambit-Specials" #f 171 12 171 27 ("##define-macro" "define-type" "define-runtime-syntax" "define-runtime-macro" "define-prim" "define-library-type-of-exception" "define-fail-check-type" "2" "define-check-type" "1" "c-lambda")}
        {Lisp-Entry "Chicken-Specials" #f 182 12 182 28 ("1" "##core#lambda")}
        {Lisp-Entry "Specials" #f 186 12 186 20 ("Chicken-Specials" "Gambit-Specials" "Scheme-Specials" "append")}
        {Lisp-Entry "get-specials" #f 193 11 193 23 ("Specials")}
        {Lisp-Entry "get-readtable" #f 202 11 202 24 ("scheme-readtable")}
        {Lisp-Entry "prepare-expressions" #f 211 11 211 30 ("collect-expressions" "scheme" "'scheme" "list" "get-col" "col" "get-start" "get-row" "line" "get-string" "str" "name" "bind" "expr" "function" "map" "get-locat-container" "container" "let" "range")}
        {Lisp-Entry "need-definition?" #f 227 11 227 27 ()}
        {Lisp-Entry "explorer-class" #f 236 11 236 25 ("Scheme-Explorer")}}
      {Lisp-Entry "Scheme-Text-Menu" #f 245 7 245 23 ("paste" "copy" "view" "french:" "english:" "Locales" "cut" "edit-references" "edit-definitions" "code-text" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "evaluate" "name:" "Context-Menu")}}})
"_scheme"
 ({Lisp-File-Entry {File jazz.language.scheme "src" "jazz" "language" "scheme" "_scheme.jazz"} 1238328025
    {Lisp-Entry "jazz.language.scheme" #f 37 9 37 29 ("jazz")}})
"autoload"
 ({Lisp-File-Entry {File jazz.language.scheme "src" "jazz" "language" "scheme" "autoload.jazz"} 1238328025
    {Lisp-Entry "jazz.language.scheme.autoload" #f 37 19 37 48 ("jazz")}})
