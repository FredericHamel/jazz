"_dialect"
 ({Lisp-File-Entry {File Jazz "lib" "scheme" "src" "scheme" "dialect" "_dialect.scm"} 1236813157
    {Lisp-Entry "scheme.dialect" #f 37 9 37 23 ("core")}})
"_scheme"
 ({Lisp-File-Entry {File Jazz "lib" "scheme" "src" "scheme" "_scheme.scm"} 1236813157
    {Lisp-Entry "scheme" #f 37 9 37 15 ("core")}})
"classes"
 ({Lisp-File-Entry {File Jazz "lib" "scheme" "src" "scheme" "dialect" "classes.scm"} 1236813157
    {Lisp-Entry "scheme.dialect.classes" #f 37 8 37 30 ()
      {Lisp-Entry "jazz.Define-Declaration" #f 45 19 45 42 ("%%set-define-declaration-value" "%%get-define-declaration-value" "value" "%%get-define-declaration-signature" "signature" "jazz.allocate-define-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Define-Macro-Declaration" #f 55 19 55 48 ("%%set-define-macro-body" "%%get-define-macro-body" "body" "%%set-define-macro-signature" "%%get-define-macro-signature" "signature" "jazz.allocate-define-macro-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Scheme-Dialect" #f 65 19 65 38 ("jazz.allocate-scheme-dialect" "jazz.Object-Class" "jazz.Dialect")}
      {Lisp-Entry "jazz.Scheme-Walker" #f 74 19 74 37 ("jazz.allocate-scheme-walker" "jazz.Object-Class" "errors" "warnings" "jazz.Walker")}}})
"dialect"
 ({Lisp-File-Entry {File Jazz "lib" "scheme" "src" "scheme" "dialect" "dialect.scm"} 1236813157
    {Lisp-Entry "scheme.dialect.dialect" #f 37 8 37 30 ("jazz.new-scheme-dialect" "scheme" "'scheme" "jazz.register-dialect" "jazz.Scheme-Walker" "jazz.Scheme-Dialect" "jazz.Define-Macro-Declaration" "jazz.Define-Declaration" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Define-Declaration" #f 45 27 45 50 ()}
      {Lisp-Entry "jazz.new-define-declaration" #f 48 9 48 36 ("jazz.setup-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.Define-Declaration" "jazz.allocate-define-declaration" "new-declaration" "let" "signature" "parent" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Define-Declaration") 55 21 55 52 ("jazz.validate-arguments" "if" "declaration" "%%get-define-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Define-Declaration") 61 21 61 42 ("%%get-declaration-source" "%%get-lexical-binding-type" "jazz.emit-expression" "jazz.emit-type-cast" ",locator" "define" "jazz.sourcify-if" "%%get-define-declaration-value" "value" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Define-Declaration") 70 21 70 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Define-Declaration") 77 21 77 58 ("%%get-lexical-binding-name" "jazz.walk-error" "%%get-declaration-toplevel" "%%neq?" "%%when" "declaration" "nextmethod" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Define-Declaration") 83 21 83 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Define-Declaration") 87 21 87 49 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" ",locator" "set!" "jazz.new-code" "declaration" "%%get-declaration-locator" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Define-Macro-Declaration" #f 103 27 103 56 ()}
      {Lisp-Entry "jazz.new-define-macro-declaration" #f 106 9 106 42 ("jazz.setup-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.Define-Macro-Declaration" "jazz.allocate-define-macro-declaration" "new-declaration" "let" "signature" "parent" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Define-Macro-Declaration") 112 21 112 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Define-Macro-Declaration") 116 21 116 50 ("%%cdr" "%%apply" "jazz.need-macro" "expander" "jazz.load-module" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Define-Macro-Declaration") 127 21 127 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "%%cons" "jazz.define-macro" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-define-macro-body" "body" "%%get-define-macro-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.Scheme-Dialect" #f 148 27 148 46 ()}
      {Lisp-Entry "jazz.new-scheme-dialect" #f 151 9 151 32 ("jazz.Scheme-Dialect" "jazz.allocate-scheme-dialect")}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Scheme-Dialect") 155 21 155 38 ("'scheme")}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Scheme-Dialect") 159 21 159 40 ("jazz.new-scheme-walker")}
      {Lisp-Entry "jazz.Scheme-Walker" #f 171 27 171 45 ()}
      {Lisp-Entry "jazz.new-scheme-walker" #f 174 9 174 31 ("jazz.Scheme-Walker" "jazz.allocate-scheme-walker")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Scheme-Walker") 183 21 183 42 ("nextmethod" "else" "jazz.walk-define-macro-declaration" "define-macro" "walker" "jazz.walk-define-declaration" "define" "case" "%%car" "first" "let" "%%pair?" "if" "form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.scheme-bindings" #f 198 9 198 29 ("jazz.walk-quasiquote" "quasiquote" "'quasiquote" "jazz.walk-delay" "delay" "'delay" "jazz.walk-do" "do" "'do" "jazz.walk-or" "or" "'or" "jazz.walk-and" "and" "'and" "jazz.walk-setbang" "set!" "'set!" "jazz.walk-receive" "receive" "'receive" "jazz.walk-let-symbol" "let-symbol" "'let-symbol" "jazz.walk-let-macro" "let-macro" "'let-macro" "jazz.walk-letrec" "letrec" "'letrec" "jazz.walk-letstar" "let*" "'let*" "jazz.walk-let" "let" "'let" "jazz.walk-lambda" "lambda" "'lambda" "jazz.walk-begin" "begin" "'begin" "jazz.walk-cond" "cond" "'cond" "jazz.walk-case" "case" "'case" "jazz.walk-if" "if" "'if" "jazz.walk-quote" "quote" "'quote" "jazz.walk-define-macro" "define-macro" "'define-macro" "jazz.walk-define" "define" "'define" "jazz.new-special-form" "%%list")}
      {Lisp-Entry "jazz.scheme-environment" #f 222 8 222 31 ()}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Scheme-Walker") 226 21 226 44 ("jazz.scheme-bindings" "jazz.core-bindings" "append" "jazz.new-walk-frame" "%%list" "set!" "begin" "jazz.scheme-environment" "or")}
      {Lisp-Entry "jazz.walk-define-declaration" #f 238 9 238 37 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-define-declaration" "new-declaration" "jazz.walk-parameters" "and" "signature" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "jazz.Namespace-Declaration" "%%class-is?" "%%assert" "%%cdr" "jazz.parse-define" "parameters" "value" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-define" #f 248 9 248 25 ("%%set-declaration-source" "jazz.walk" "%%set-define-declaration-value" "%%cons" "new-environment" "jazz.find-form-declaration" "new-declaration" "let*" "jazz.Namespace-Declaration" "%%class-is?" "%%assert" "jazz.source-code" "%%cdr" "jazz.parse-define" "parameters" "value" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-define-macro" #f 264 9 264 32 ("values" "parameters" "jazz.Any" "type" "name" "%%cdr" "body" "%%car" "%%desourcify" "signature" "let*" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-define-macro-declaration" #f 273 9 273 43 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-define-macro-declaration" "new-declaration" "jazz.walk-parameters" "signature" "let" "%%cdr" "jazz.parse-define-macro" "body" "parameters" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-define-macro" #f 281 9 281 31 ("%%set-declaration-source" "jazz.walk-body" "%%set-define-macro-body" "%%set-define-macro-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-define-macro" "body" "parameters" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-let-macro" #f 297 9 297 28 ("jazz.walk-body" "begin" "%%append" "new-environment" "eval" "jazz.new-macro-form" "expander" "%%car" "name" "binding" "lambda" "map" "macro-forms" "%%cddr" "body" "%%cadr" "bindings" "let*" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-let-symbol" #f 316 9 316 29 ("jazz.walk-body" "begin" "%%append" "new-environment" "eval" "jazz.new-macro-symbol" "setter" "getter" "%%car" "name" "binding" "lambda" "map" "macro-symbols" "%%cddr" "body" "%%cadr" "bindings" "let*" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-lambda" #f 336 9 336 25 ("jazz.walk-body" "jazz.new-lambda" "jazz.Any" "jazz.walk-specifier" "if" "type" "jazz.walk-parameters" "augmented-environment" "signature" "receive" "body" "specifier" "lambda" "%%cddr" "jazz.parse-specifier" "jazz.source-code" "%%cadr" "%%desourcify" "parameters" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-binding" #f 351 9 351 27 ("jazz.new-variable" "values" "value" "jazz.walk-specifier" "if" "type" "rest" "specifier" "lambda" "jazz.parse-specifier" "%%car" "symbol" "let" "%%desourcify" "jazz.error" "%%cdr" "jazz.source-code" "%%pair?" "and" "%%assertion" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-let" #f 361 9 361 22 ("jazz.walk-body" "jazz.queue-list" "jazz.new-let" "set!" "jazz.walk" "%%cons" "jazz.enqueue" "jazz.parse-binding" "value" "variable" "receive" "continuation-capture" "binding-form" "lambda" "for-each" "jazz.new-queue" "expanded-bindings" "augmented-environment" "unspecified" "'unspecified" "%%list" "%%null?" "effective-body" "jazz.signature-named-let" "%%car" "%%pair?" "and" "%%cddr" "body" "bindings" "let" "jazz.walk-named-let" "%%cadr" "jazz.source-code" "%%symbol?" "if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-letstar" #f 383 9 383 26 ("jazz.walk-body" "jazz.queue-list" "jazz.new-letstar" "set!" "jazz.walk" "%%cons" "jazz.enqueue" "jazz.parse-binding" "value" "variable" "receive" "continuation-capture" "binding-form" "lambda" "for-each" "jazz.new-queue" "expanded-bindings" "augmented-environment" "%%cddr" "body" "%%cadr" "jazz.source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-letrec" #f 400 9 400 25 ("jazz.walk-body" "jazz.queue-list" "jazz.new-letrec" "jazz.walk" "cons" "jazz.enqueue" "value" "continuation-capture" "variable" "for-each" "jazz.new-queue" "expanded-bindings" "%%append" "augmented-environment" "%%car" "jazz.new-variable" "binding-form" "lambda" "map" "new-variables" "let*" "%%cddr" "body" "%%cadr" "jazz.source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-receive" #f 418 9 418 26 ("jazz.walk-body" "jazz.walk" "lambda" "continuation-capture" "jazz.new-receive" "%%append" "new-environment" "walk-parameters" "variables" "%%cdr" "body" "%%cddr" "%%car" "expression" "jazz.source-code" "%%cadr" "%%desourcify" "parameters" "let*" "form-src" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "walk-parameters" #f 419 11 419 26 ("jazz.new-variable" "jazz.enqueue" "jazz.Any" "environment" "declaration" "resume" "walker" "jazz.walk-specifier" "type" "rest" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "expr" "jazz.queue-list" "%%null?" "if" "scan" "iter" "jazz.new-queue" "queue" "let" "parameters")}}
      {Lisp-Entry "jazz.walk-if" #f 447 9 447 21 ("unspecified" "%%null?" "begin" "'begin" "cons" "jazz.walk" "lambda" "continuation-capture" "jazz.new-if" "%%cdr" "no" "%%cddr" "%%car" "yes" "%%cadr" "test" "let" "%%desourcify" "jazz.walk-error" "3" "jazz.source-code" "length" "<" "if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-cond" #f 467 9 467 23 ("jazz.queue-list" "jazz.new-cond" "jazz.walk-implicit-begin" "jazz.walk" "continuation-capture" "else" "'else" "%%eq?" "if" "cons" "jazz.enqueue" "body" "%%car" "test" "clause" "lambda" "for-each" "jazz.new-queue" "expanded-clauses" "jazz.source-code" "%%cdr" "clauses" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-case" #f 484 9 484 23 ("jazz.walk-error" "jazz.walk-implicit-begin" "cons" "%%pair?" "else" "'else" "%%eq?" "or" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "%%cdr" "body" "%%car" "%%desourcify" "tries" "let*" "clause" "map" "jazz.walk" "lambda" "continuation-capture" "jazz.new-case" "%%cddr" "clauses" "jazz.source-code" "%%cadr" "target" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-and" #f 503 9 503 22 ("jazz.source-code" "%%cdr" "jazz.walk-list" "jazz.new-and" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-or" #f 507 9 507 21 ("jazz.source-code" "%%cdr" "jazz.walk-list" "jazz.new-or" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-begin" #f 516 9 516 24 ("jazz.walk-list" "jazz.new-begin" "jazz.source-code" "%%cdr" "body" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-implicit-begin" #f 521 9 521 33 ("jazz.walk-list" "jazz.new-begin" "unspecified" "jazz.walk" "%%null?" "if" "form-list" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-do" #f 532 9 532 21 ("jazz.walk-body" "jazz.queue-list" "jazz.new-do" "cons" "jazz.enqueue" "%%null?" "if" "step" "jazz.walk" "init" "continuation-capture" "variable" "for-each" "jazz.new-queue" "expanded-bindings" "%%append" "augmented-environment" "jazz.new-variable" "binding-form" "lambda" "map" "new-variables" "let*" "body" "%%cdr" "result" "%%cddr" "%%car" "test" "%%cadr" "jazz.source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-named-let" #f 558 9 558 28 ("jazz.walk-body" "jazz.queue-list" "jazz.new-named-let" "jazz.new-variable" "set!" "jazz.walk" "%%cons" "jazz.enqueue" "jazz.parse-binding" "value" "variable" "receive" "continuation-capture" "binding-form" "lambda" "for-each" "jazz.new-queue" "expanded-bindings" "augmented-environment" "%%cdr" "body" "%%cddr" "%%car" "%%desourcify" "bindings" "%%cadr" "jazz.source-code" "name" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.signature-named-let" #f 578 9 578 33 (",@body" ",bindings" ",name" "jazz.sourcify-if" "jazz.walk-named-let" "%%cdr" "%%car" "jazz.source-code" "name" "let" "body" "bindings" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-delay" #f 593 9 593 24 ("jazz.walk" "jazz.new-delay" "jazz.source-code" "%%cadr" "expression" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-quasiquote" #f 603 9 603 29 ("jazz.new-quasiquote" "%%cdr" "%%cons" "%%cadr" "jazz.walk" "%%list" "unquote-splicing" "'unquote-splicing" "unquote" "'unquote" "%%car" "%%eq?" "or" "%%pair?" "if" "lambda" "walk" "letrec" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}}})
"kernel"
 ({Lisp-File-Entry {File Jazz "lib" "scheme" "src" "scheme" "dialect" "kernel.scm"} 1236813157
    {Lisp-Entry "scheme.dialect.kernel" #f 37 9 37 30 ("core")
      {Lisp-Entry "eq?" #f 55 8 55 11 ()}
      {Lisp-Entry "eqv?" #f 56 8 56 12 ()}
      {Lisp-Entry "equal?" #f 57 8 57 14 ()}
      {Lisp-Entry "number?" #f 70 8 70 15 ()}
      {Lisp-Entry "complex?" #f 71 8 71 16 ()}
      {Lisp-Entry "real?" #f 72 8 72 13 ()}
      {Lisp-Entry "rational?" #f 73 8 73 17 ()}
      {Lisp-Entry "integer?" #f 74 8 74 16 ()}
      {Lisp-Entry "exact?" #f 75 8 75 14 ()}
      {Lisp-Entry "inexact?" #f 76 8 76 16 ()}
      {Lisp-Entry "=" #f 77 8 77 9 ()}
      {Lisp-Entry "<" #f 78 8 78 9 ()}
      {Lisp-Entry ">" #f 79 8 79 9 ()}
      {Lisp-Entry "<=" #f 80 8 80 10 ()}
      {Lisp-Entry ">=" #f 81 8 81 10 ()}
      {Lisp-Entry "zero?" #f 82 8 82 13 ()}
      {Lisp-Entry "positive?" #f 83 8 83 17 ()}
      {Lisp-Entry "negative?" #f 84 8 84 17 ()}
      {Lisp-Entry "odd?" #f 85 8 85 12 ()}
      {Lisp-Entry "even?" #f 86 8 86 13 ()}
      {Lisp-Entry "max" #f 87 8 87 11 ()}
      {Lisp-Entry "min" #f 88 8 88 11 ()}
      {Lisp-Entry "+" #f 89 8 89 9 ()}
      {Lisp-Entry "*" #f 90 8 90 9 ()}
      {Lisp-Entry "-" #f 91 8 91 9 ()}
      {Lisp-Entry "/" #f 92 8 92 9 ()}
      {Lisp-Entry "abs" #f 93 8 93 11 ()}
      {Lisp-Entry "quotient" #f 94 8 94 16 ()}
      {Lisp-Entry "remainder" #f 95 8 95 17 ()}
      {Lisp-Entry "modulo" #f 96 8 96 14 ()}
      {Lisp-Entry "gcd" #f 97 8 97 11 ()}
      {Lisp-Entry "lcm" #f 98 8 98 11 ()}
      {Lisp-Entry "numerator" #f 99 8 99 17 ()}
      {Lisp-Entry "denominator" #f 100 8 100 19 ()}
      {Lisp-Entry "floor" #f 101 8 101 13 ()}
      {Lisp-Entry "ceiling" #f 102 8 102 15 ()}
      {Lisp-Entry "truncate" #f 103 8 103 16 ()}
      {Lisp-Entry "round" #f 104 8 104 13 ()}
      {Lisp-Entry "rationalize" #f 105 8 105 19 ()}
      {Lisp-Entry "exp" #f 106 8 106 11 ()}
      {Lisp-Entry "log" #f 107 8 107 11 ()}
      {Lisp-Entry "sin" #f 108 8 108 11 ()}
      {Lisp-Entry "cos" #f 109 8 109 11 ()}
      {Lisp-Entry "tan" #f 110 8 110 11 ()}
      {Lisp-Entry "asin" #f 111 8 111 12 ()}
      {Lisp-Entry "acos" #f 112 8 112 12 ()}
      {Lisp-Entry "atan" #f 113 8 113 12 ()}
      {Lisp-Entry "sqrt" #f 114 8 114 12 ()}
      {Lisp-Entry "expt" #f 115 8 115 12 ()}
      {Lisp-Entry "make-rectangular" #f 116 8 116 24 ()}
      {Lisp-Entry "make-polar" #f 117 8 117 18 ()}
      {Lisp-Entry "real-part" #f 118 8 118 17 ()}
      {Lisp-Entry "imag-part" #f 119 8 119 17 ()}
      {Lisp-Entry "magnitude" #f 120 8 120 17 ()}
      {Lisp-Entry "angle" #f 121 8 121 13 ()}
      {Lisp-Entry "exact->inexact" #f 122 8 122 22 ()}
      {Lisp-Entry "inexact->exact" #f 123 8 123 22 ()}
      {Lisp-Entry "number->string" #f 131 8 131 22 ()}
      {Lisp-Entry "string->number" #f 132 8 132 22 ()}
      {Lisp-Entry "not" #f 145 8 145 11 ()}
      {Lisp-Entry "boolean?" #f 146 8 146 16 ()}
      {Lisp-Entry "pair?" #f 154 8 154 13 ()}
      {Lisp-Entry "cons" #f 155 8 155 12 ()}
      {Lisp-Entry "car" #f 156 8 156 11 ()}
      {Lisp-Entry "cdr" #f 157 8 157 11 ()}
      {Lisp-Entry "set-car!" #f 158 8 158 16 ()}
      {Lisp-Entry "set-cdr!" #f 159 8 159 16 ()}
      {Lisp-Entry "caar" #f 160 8 160 12 ()}
      {Lisp-Entry "cadr" #f 161 8 161 12 ()}
      {Lisp-Entry "cdar" #f 162 8 162 12 ()}
      {Lisp-Entry "cddr" #f 163 8 163 12 ()}
      {Lisp-Entry "caaar" #f 164 8 164 13 ()}
      {Lisp-Entry "caadr" #f 165 8 165 13 ()}
      {Lisp-Entry "cadar" #f 166 8 166 13 ()}
      {Lisp-Entry "caddr" #f 167 8 167 13 ()}
      {Lisp-Entry "cdaar" #f 168 8 168 13 ()}
      {Lisp-Entry "cdadr" #f 169 8 169 13 ()}
      {Lisp-Entry "cddar" #f 170 8 170 13 ()}
      {Lisp-Entry "cdddr" #f 171 8 171 13 ()}
      {Lisp-Entry "caaaar" #f 172 8 172 14 ()}
      {Lisp-Entry "caaadr" #f 173 8 173 14 ()}
      {Lisp-Entry "caadar" #f 174 8 174 14 ()}
      {Lisp-Entry "caaddr" #f 175 8 175 14 ()}
      {Lisp-Entry "cadaar" #f 176 8 176 14 ()}
      {Lisp-Entry "cadadr" #f 177 8 177 14 ()}
      {Lisp-Entry "caddar" #f 178 8 178 14 ()}
      {Lisp-Entry "cadddr" #f 179 8 179 14 ()}
      {Lisp-Entry "cdaaar" #f 180 8 180 14 ()}
      {Lisp-Entry "cdaadr" #f 181 8 181 14 ()}
      {Lisp-Entry "cdadar" #f 182 8 182 14 ()}
      {Lisp-Entry "cdaddr" #f 183 8 183 14 ()}
      {Lisp-Entry "cddaar" #f 184 8 184 14 ()}
      {Lisp-Entry "cddadr" #f 185 8 185 14 ()}
      {Lisp-Entry "cdddar" #f 186 8 186 14 ()}
      {Lisp-Entry "cddddr" #f 187 8 187 14 ()}
      {Lisp-Entry "null?" #f 188 8 188 13 ()}
      {Lisp-Entry "list?" #f 189 8 189 13 ()}
      {Lisp-Entry "list" #f 190 8 190 12 ()}
      {Lisp-Entry "length" #f 191 8 191 14 ()}
      {Lisp-Entry "append" #f 192 8 192 14 ()}
      {Lisp-Entry "reverse" #f 193 8 193 15 ()}
      {Lisp-Entry "list-tail" #f 194 8 194 17 ()}
      {Lisp-Entry "list-ref" #f 195 8 195 16 ()}
      {Lisp-Entry "memq" #f 196 8 196 12 ()}
      {Lisp-Entry "memv" #f 197 8 197 12 ()}
      {Lisp-Entry "member" #f 198 8 198 14 ()}
      {Lisp-Entry "assq" #f 199 8 199 12 ()}
      {Lisp-Entry "assv" #f 200 8 200 12 ()}
      {Lisp-Entry "assoc" #f 201 8 201 13 ()}
      {Lisp-Entry "symbol?" #f 209 8 209 15 ()}
      {Lisp-Entry "symbol->string" #f 210 8 210 22 ()}
      {Lisp-Entry "string->symbol" #f 211 8 211 22 ()}
      {Lisp-Entry "char?" #f 219 8 219 13 ()}
      {Lisp-Entry "char=?" #f 220 8 220 14 ()}
      {Lisp-Entry "char<?" #f 221 8 221 14 ()}
      {Lisp-Entry "char>?" #f 222 8 222 14 ()}
      {Lisp-Entry "char<=?" #f 223 8 223 15 ()}
      {Lisp-Entry "char>=?" #f 224 8 224 15 ()}
      {Lisp-Entry "char-ci=?" #f 225 8 225 17 ()}
      {Lisp-Entry "char-ci<?" #f 226 8 226 17 ()}
      {Lisp-Entry "char-ci>?" #f 227 8 227 17 ()}
      {Lisp-Entry "char-ci<=?" #f 228 8 228 18 ()}
      {Lisp-Entry "char-ci>=?" #f 229 8 229 18 ()}
      {Lisp-Entry "char-alphabetic?" #f 230 8 230 24 ()}
      {Lisp-Entry "char-numeric?" #f 231 8 231 21 ()}
      {Lisp-Entry "char-whitespace?" #f 232 8 232 24 ()}
      {Lisp-Entry "char-upper-case?" #f 233 8 233 24 ()}
      {Lisp-Entry "char-lower-case?" #f 234 8 234 24 ()}
      {Lisp-Entry "char->integer" #f 235 8 235 21 ()}
      {Lisp-Entry "integer->char" #f 236 8 236 21 ()}
      {Lisp-Entry "char-upcase" #f 237 8 237 19 ()}
      {Lisp-Entry "char-downcase" #f 238 8 238 21 ()}
      {Lisp-Entry "string?" #f 246 8 246 15 ()}
      {Lisp-Entry "make-string" #f 247 8 247 19 ()}
      {Lisp-Entry "string" #f 248 8 248 14 ()}
      {Lisp-Entry "string-length" #f 249 8 249 21 ()}
      {Lisp-Entry "string-ref" #f 250 8 250 18 ()}
      {Lisp-Entry "string-set!" #f 251 8 251 19 ()}
      {Lisp-Entry "string=?" #f 252 8 252 16 ()}
      {Lisp-Entry "string-ci=?" #f 253 8 253 19 ()}
      {Lisp-Entry "string<?" #f 254 8 254 16 ()}
      {Lisp-Entry "string>?" #f 255 8 255 16 ()}
      {Lisp-Entry "string<=?" #f 256 8 256 17 ()}
      {Lisp-Entry "string>=?" #f 257 8 257 17 ()}
      {Lisp-Entry "string-ci<?" #f 258 8 258 19 ()}
      {Lisp-Entry "string-ci>?" #f 259 8 259 19 ()}
      {Lisp-Entry "string-ci<=?" #f 260 8 260 20 ()}
      {Lisp-Entry "string-ci>=?" #f 261 8 261 20 ()}
      {Lisp-Entry "substring" #f 262 8 262 17 ()}
      {Lisp-Entry "string-append" #f 263 8 263 21 ()}
      {Lisp-Entry "string->list" #f 264 8 264 20 ()}
      {Lisp-Entry "list->string" #f 265 8 265 20 ()}
      {Lisp-Entry "string-copy" #f 266 8 266 19 ()}
      {Lisp-Entry "string-fill!" #f 267 8 267 20 ()}
      {Lisp-Entry "vector?" #f 275 8 275 15 ()}
      {Lisp-Entry "make-vector" #f 276 8 276 19 ()}
      {Lisp-Entry "vector" #f 277 8 277 14 ()}
      {Lisp-Entry "vector-length" #f 278 8 278 21 ()}
      {Lisp-Entry "vector-ref" #f 279 8 279 18 ()}
      {Lisp-Entry "vector-set!" #f 280 8 280 19 ()}
      {Lisp-Entry "vector->list" #f 281 8 281 20 ()}
      {Lisp-Entry "list->vector" #f 282 8 282 20 ()}
      {Lisp-Entry "vector-fill!" #f 283 8 283 20 ()}
      {Lisp-Entry "procedure?" #f 291 8 291 18 ()}
      {Lisp-Entry "apply" #f 292 8 292 13 ()}
      {Lisp-Entry "map" #f 293 8 293 11 ()}
      {Lisp-Entry "for-each" #f 294 8 294 16 ()}
      {Lisp-Entry "force" #f 295 8 295 13 ()}
      {Lisp-Entry "call-with-current-continuation" #f 296 8 296 38 ()}
      {Lisp-Entry "call/cc" #f 297 8 297 15 ()}
      {Lisp-Entry "values" #f 298 8 298 14 ()}
      {Lisp-Entry "call-with-values" #f 299 8 299 24 ()}
      {Lisp-Entry "dynamic-wind" #f 300 8 300 20 ()}
      {Lisp-Entry "eval" #f 308 8 308 12 ()}
      {Lisp-Entry "scheme-replace-report-environment" #f 309 8 309 41 ()}
      {Lisp-Entry "null-environment" #f 310 8 310 24 ()}
      {Lisp-Entry "interaction-environment" #f 311 8 311 31 ()}
      {Lisp-Entry "call-with-input-file" #f 324 8 324 28 ()}
      {Lisp-Entry "call-with-output-file" #f 325 8 325 29 ()}
      {Lisp-Entry "input-port?" #f 326 8 326 19 ()}
      {Lisp-Entry "output-port?" #f 327 8 327 20 ()}
      {Lisp-Entry "current-input-port" #f 328 8 328 26 ()}
      {Lisp-Entry "current-output-port" #f 329 8 329 27 ()}
      {Lisp-Entry "with-input-from-file" #f 330 8 330 28 ()}
      {Lisp-Entry "with-output-to-file" #f 331 8 331 27 ()}
      {Lisp-Entry "open-input-file" #f 332 8 332 23 ()}
      {Lisp-Entry "open-output-file" #f 333 8 333 24 ()}
      {Lisp-Entry "close-input-port" #f 334 8 334 24 ()}
      {Lisp-Entry "close-output-port" #f 335 8 335 25 ()}
      {Lisp-Entry "read" #f 343 8 343 12 ()}
      {Lisp-Entry "read-char" #f 344 8 344 17 ()}
      {Lisp-Entry "peek-char" #f 345 8 345 17 ()}
      {Lisp-Entry "eof-object?" #f 346 8 346 19 ()}
      {Lisp-Entry "char-ready?" #f 347 8 347 19 ()}
      {Lisp-Entry "write" #f 355 8 355 13 ()}
      {Lisp-Entry "display" #f 356 8 356 15 ()}
      {Lisp-Entry "newline" #f 357 8 357 15 ()}
      {Lisp-Entry "write-char" #f 358 8 358 18 ()}
      {Lisp-Entry "load" #f 359 8 359 12 ()}
      {Lisp-Entry "transcript-on" #f 360 8 360 21 ()}
      {Lisp-Entry "transcript-off" #f 361 8 361 22 ()}}})
"product"
 ({Lisp-File-Entry {File Jazz "lib" "scheme" "src" "scheme" "product.scm"} 1236813157
    {Lisp-Entry "scheme.product" #f 37 8 37 22 ("jazz.build-scheme" "build:" "scheme" "'scheme" "jazz.register-product")
      {Lisp-Entry "jazz.build-scheme" #f 45 9 45 26 ("scheme" "'scheme" "jazz.build-module")}}})
