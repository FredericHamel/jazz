"IOR"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "IOR.jazz"} 1250272407
    {Lisp-Entry "jazz.jrm.remote.IOR" library #f 37 19 37 38 ("jazz")
      {Lisp-Entry "IOR" class #f 40 7 40 10 ("Object")
        {Lisp-Entry "host" slot #f 43 8 43 12 ()}
        {Lisp-Entry "get-host" accessor #f 43 30 43 38 ()}
        {Lisp-Entry "service" slot #f 44 8 44 15 ()}
        {Lisp-Entry "get-service" accessor #f 44 30 44 38 ()}
        {Lisp-Entry "stub-interface" slot #f 45 8 45 22 ()}
        {Lisp-Entry "get-stub-interface" accessor #f 45 30 45 38 ()}
        {Lisp-Entry "reference" slot #f 46 8 46 17 ()}
        {Lisp-Entry "get-reference" accessor #f 46 30 46 38 ()}
        {Lisp-Entry "values" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-values" accessor #f 47 30 47 38 ()}
        {Lisp-Entry "initialize" method #f 50 11 50 21 ("values~self" "reference~self" "stub-interface~self" "service~self" "host~self" "set!" "nextmethod" "values" "reference" "stub-interface" "service" "host")}
        {Lisp-Entry "print" method #f 59 11 59 16 ("values" "reference" "stub-interface" "service" "host" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}}})
"Local-Proxy"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Local-Proxy.jazz"} 1238328024
    {Lisp-Entry "jazz.jrm.remote.Local-Proxy" library #f 37 19 37 46 ("jazz")
      {Lisp-Entry "Local-Proxy" class #f 43 7 43 18 ("Proxy")
        {Lisp-Entry "object" slot #f 46 8 46 14 ()}
        {Lisp-Entry "get-object" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "set-object" accessor #f 46 25 46 33 ()}
        {Lisp-Entry "initialize" method #f 49 11 49 21 ("object~self" "set!" "nextmethod" "object")}
        {Lisp-Entry "print" method #f 54 11 54 16 ("object" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "proxy-values" method #f 61 29 61 41 ()}
        {Lisp-Entry "live?" method #f 65 11 65 16 ()}}}})
"Proxy"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Proxy.jazz"} 1238328024
    {Lisp-Entry "jazz.jrm.remote.Proxy" library #f 37 19 37 40 ("jazz")
      {Lisp-Entry "Proxy" class #f 40 7 40 12 ("Object")
        {Lisp-Entry "live?" method #f 43 35 43 40 ()}}}})
"Register"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "register" "Register.jazz"} 1238328024
    {Lisp-Entry "jazz.jrm.register.Register" library #f 37 19 37 45 ("jazz")
      {Lisp-Entry "Register" class #f 43 7 43 15 ("eq?" "test:" "make-table" "initialize" "Object")
        {Lisp-Entry "new-local-proxy" method #f 48 23 48 38 ("self" "Register-Local-Proxy" "new")}
        {Lisp-Entry "objects" slot #f 52 8 52 15 ()}
        {Lisp-Entry "find-object" method #f 55 18 55 29 ("objects" "table-ref" "name")}
        {Lisp-Entry "require-object" method #f 59 18 59 32 ("error" "find-object" "either" "name")}
        {Lisp-Entry "register-object" method #f 69 18 69 33 ("objects" "table-set!" "error" "find-object" "if" "error?" "error?:" "object" "name")}
        {Lisp-Entry "unregister-object" method #f 78 18 78 35 ("objects" "table-clear" "error" "find-object" "not" "if" "error?" "error?:" "name")}}}})
"Remotable-Stub"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Remotable-Stub.jazz"} 1248708411
    {Lisp-Entry "jazz.jrm.remote.Remotable-Stub" library #f 37 19 37 49 ("jazz")
      {Lisp-Entry "Remotable-Stub" interface #f 40 11 40 25 ()
        {Lisp-Entry "stub-interface" method #f 43 35 43 49 ()}}}})
"Remote-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Remote-Listener.jazz"} 1238328024
    {Lisp-Entry "jazz.jrm.remote.Remote-Listener" library #f 37 19 37 50 ("jazz")
      {Lisp-Entry "Remote-Listener" class #f 44 7 44 22 ("TCP-Server")
        {Lisp-Entry "server-name" method #f 47 11 47 22 ("remote-listener" "'remote-listener")}
        {Lisp-Entry "connection-name" method #f 51 11 51 26 ("remote-connection" "'remote-connection")}
        {Lisp-Entry "create-thread" method #f 60 11 60 24 ("new-system-thread" "apply" "rest")}
        {Lisp-Entry "accept-connection" method #f 69 11 69 28 ("process-remote" "port")}}}})
"Remote-Proxy"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Remote-Proxy.jazz"} 1238328024
    {Lisp-Entry "jazz.jrm.remote.Remote-Proxy" library #f 37 19 37 47 ("jazz")
      {Lisp-Entry "Remote-Proxy" class #f 43 7 43 19 ("Proxy")
        {Lisp-Entry "ior" slot #f 46 8 46 11 ()}
        {Lisp-Entry "get-ior" accessor #f 46 22 46 30 ()}
        {Lisp-Entry "values" slot #f 47 8 47 14 ()}
        {Lisp-Entry "get-values" accessor #f 47 22 47 30 ()}
        {Lisp-Entry "initialize" method #f 50 11 50 21 ("values~self" "ior~self" "set!" "nextmethod" "values" "ior")}
        {Lisp-Entry "print" method #f 56 11 56 16 ("values" "ior" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "set-values" method #f 64 18 64 28 ("values" "set!" "lst")}
        {Lisp-Entry "proxy-value" method #f 68 18 68 29 ("cadr" "if" "values" "getprop" "prop" "let" "thunk" "keyword")}
        {Lisp-Entry "live?" method #f 75 11 75 16 ("self" "remote-proxy-live?")}}}})
"Stub-Interface"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "remote" "Stub-Interface.jazz"} 1238328024
    {Lisp-Entry "jazz.jrm.remote.Stub-Interface" library #f 37 19 37 49 ("jazz")
      {Lisp-Entry "Stub-Interface" class #f 40 7 40 21 ("Interface")
        {Lisp-Entry "local-class" method #f 43 35 43 46 ()}
        {Lisp-Entry "remote-class" method #f 44 35 44 47 ()}}}})
"_jrm"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "_jrm.jazz"} 1252768921
    {Lisp-Entry "jazz.jrm" library #f 37 9 37 17 ("jazz")
      {Lisp-Entry "*debug?*" definition #f 45 12 45 20 ()}
      {Lisp-Entry "*debug-arguments?*" definition #f 48 12 48 30 ()}
      {Lisp-Entry "*debug-locally?*" definition #f 51 12 51 28 ()}
      {Lisp-Entry "Remote-Listener-Host" definition #f 60 12 60 32 ()}
      {Lisp-Entry "Remote-Listener-Service" definition #f 63 12 63 35 ("any" "'any")}
      {Lisp-Entry "remote-listener" definition #f 67 12 67 27 ()}
      {Lisp-Entry "get-remote-listener" definition #f 71 20 71 39 ("remote-listener")}
      {Lisp-Entry "set-remote-listener" definition #f 74 20 74 39 ("remote-listener" "set!" "server")}
      {Lisp-Entry "require-remote-listener" definition #f 78 20 78 43 ("error" "remote-listener" "not" "if")}
      {Lisp-Entry "start-remote-listener" definition #f 84 20 84 41 ("error" "set!" "error?:" "wait-started" "if" "start" "Remote-Listener-Service" "service:" "Remote-Listener-Host" "either" "host:" "Remote-Listener" "new" "server" "let" "command-host/service" "service" "host" "receive" "remote-listener" "unless" "default-service" "default-service:" "default-host" "default-host:")}
      {Lisp-Entry "stop-remote-listener" definition #f 94 20 94 40 ("set!" "stop" "remote-listener" "when")}
      {Lisp-Entry "Remote-Connection-Broke" class #f 105 7 105 30 ("Exception")}
      {Lisp-Entry "throw-remote-connection-broke" definition #f 108 13 108 42 ("Remote-Connection-Broke" "new" "throw")}
      {Lisp-Entry "live-timeout" definition #f 117 12 117 24 ("0.5")}
      {Lisp-Entry "live-request" definition #f 120 12 120 24 ("live?" "'live?")}
      {Lisp-Entry "live-response" definition #f 123 12 123 25 ("alive" "'alive")}
      {Lisp-Entry "remote-proxy-live?" definition #f 127 21 127 39 ("live-response" "eq?" "close-port" "receive-remote-result" "result" "live-request" "send-remote-message" "function" "with-exception-catcher" "port-number:" "server-address:" "list" "open-tcp-client" "port" "live?" "'live?" "***client***" "'***client***" "terminal" "*debug?*" "when" "get-service" "service" "get-host" "host" "marshall" "proxy-ior" "let" "exc" "Remote-Connection-Broke" "catch" "remote-proxy")}
      {Lisp-Entry "send-timeout" definition #f 151 12 151 24 ("2" "make-parameter")}
      {Lisp-Entry "receive-timeout" definition #f 154 12 154 27 ("10" "make-parameter")}
      {Lisp-Entry "post-remote" definition #f 158 20 158 31 ("post" "'post" "invoke-remote" "arguments" "remote-proxy" "method-name")}
      {Lisp-Entry "exec-remote" definition #f 162 20 162 31 ("exec" "'exec" "invoke-remote" "arguments" "remote-proxy" "method-name")}
      {Lisp-Entry "call-remote" definition #f 166 20 166 31 ("call" "'call" "invoke-remote" "arguments" "remote-proxy" "method-name")}
      {Lisp-Entry "invoke-remote" definition #f 170 13 170 26 ("unmarshall" "call" "error" "if" "result" "err" "bind" "->" "'->" "'received" "receive-remote-result" "received" "exec" "unspecified" "post" "case" "send-remote-message" "port" "function" "port-number:" "server-address:" "list" "call-with-tcp-client" "*debug-arguments?*" "and" "***client***" "'***client***" "terminal" "*debug?*" "when" "get-service" "service" "get-host" "host" "proxy-ior" "marshall" "let" "arguments" "remote-proxy" "method-name" "kind")}
      {Lisp-Entry "send-remote-message" definition #f 202 13 202 32 ("write-port" "throw-remote-connection-broke" "output-port-timeout-set!" "when" "send-timeout" "timeout" "let" "port" "info")}
      {Lisp-Entry "receive-remote-result" definition #f 209 13 209 34 ("throw-remote-connection-broke" "eof-object?" "if" "read-port" "info" "input-port-timeout-set!" "when" "receive-timeout" "timeout" "let" "port")}
      {Lisp-Entry "process-remote" definition #f 224 21 224 35 ("call" "unspecified" "marshall" "list" "return" "'return" "execute-remote" "result" "err" "receive" "exec" "dispatch-remote" "post" "case" "*debug-arguments?*" "and" "***server***" "'***server***" "terminal" "*debug?*" "when" "arguments" "proxy-ior" "method-name" "kind" "bind" "live-response" "send-remote-result" "live-request" "eq?" "if" "receive-remote-message" "message" "let" "port")}
      {Lisp-Entry "execute-remote" definition #f 246 13 246 27 ("exception-reason" "display-continuation-backtrace" "display-exception" "exception" "'exception" "***server***" "'***server***" "terminal" "*debug?*" "when" "cont" "exc" "with-exception-handler" "return" "function" "continuation-capture" "dispatch-remote" "values" "*debug-locally?*" "if" "arguments" "proxy-ior" "method-name")}
      {Lisp-Entry "dispatch-remote" definition #f 264 13 264 28 ("dispatch" "apply" "local-proxy" "unmarshall" "let" "arguments" "proxy-ior" "method-name")}
      {Lisp-Entry "receive-remote-message" definition #f 271 13 271 35 ("throw-remote-connection-broke" "eof-object?" "if" "read-port" "info" "input-port-timeout-set!" "when" "receive-timeout" "timeout" "let" "port")}
      {Lisp-Entry "send-remote-result" definition #f 281 13 281 31 ("write-port" "throw-remote-connection-broke" "output-port-timeout-set!" "when" "send-timeout" "timeout" "let" "port" "info")}
      {Lisp-Entry "proxy?" definition #f 293 20 293 26 ("Proxy" "is?" "object")}
      {Lisp-Entry "proxy=?" definition #f 297 20 297 27 ("else" "local-proxy=?" "local-proxy?" "remote-proxy=?" "remote-proxy?" "and" "cond" "y" "x")}
      {Lisp-Entry "proxy-server=?" definition #f 306 20 306 34 ("else" "local-proxy?" "get-ior" "ior-server=?" "remote-proxy?" "and" "cond" "y" "x")}
      {Lisp-Entry "marshall-proxy" definition #f 316 13 316 27 ("marshall-local-proxy" "marshall-remote-proxy" "remote-proxy?" "if" "proxy")}
      {Lisp-Entry "local-proxy?" definition #f 327 20 327 32 ("Local-Proxy" "is?" "object")}
      {Lisp-Entry "local-proxy=?" definition #f 331 20 331 33 ("get-object" "eq?" "y" "x")}
      {Lisp-Entry "marshall-local-proxy" definition #f 336 13 336 33 ("proxy-values" "marshall" "local-proxy->reference" "stub-interface" "get-name" "identifier-name" "listening-port" "listening-host" "IOR" "new" "require-remote-listener" "server" "let" "local-proxy")}
      {Lisp-Entry "unmarshall-local-ior" definition #f 346 13 346 33 ("get-reference" "reference->local-proxy" "ior" "stub-interface")}
      {Lisp-Entry "remote-proxy?" definition #f 355 20 355 33 ("Remote-Proxy" "is?" "object")}
      {Lisp-Entry "remote-proxy=?" definition #f 359 20 359 34 ("get-ior" "ior=?" "y" "x")}
      {Lisp-Entry "marshall-remote-proxy" definition #f 364 13 364 34 ("get-ior" "marshall" "proxy")}
      {Lisp-Entry "unmarshall-remote-ior" definition #f 368 13 368 34 ("get-values" "unmarshall" "new" "remote-class" "let" "ior" "stub-interface")}
      {Lisp-Entry "local-register" definition #f 378 12 378 26 ()}
      {Lisp-Entry "get-local-register" definition #f 382 20 382 38 ("Register" "new-local-proxy" "set!" "local-register" "not" "when")}
      {Lisp-Entry "new-remote-register" definition #f 388 20 388 39 ("Register-Stub" "'Register-Stub" "IOR" "new" "unmarshall" "port" "host")}
      {Lisp-Entry "*Temp-Mega-Patch*" definition #f 398 12 398 29 ()}
      {Lisp-Entry "ior?" definition #f 402 20 402 24 ("IOR" "is?" "object")}
      {Lisp-Entry "local-ior?" definition #f 406 20 406 30 ("listening-port" "get-service" "service=?" "listening-host" "get-host" "host=?" "and" "require-remote-listener" "server" "let" "ior")}
      {Lisp-Entry "ior=?" definition #f 412 20 412 25 ("get-reference" "reference=?" "get-service" "service=?" "get-host" "host=?" "and" "y" "x")}
      {Lisp-Entry "ior-server=?" definition #f 418 20 418 32 ("get-service" "service=?" "get-host" "host=?" "and" "y" "x")}
      {Lisp-Entry "host=?" definition #f 423 20 423 26 ("equal?" "y" "x")}
      {Lisp-Entry "service=?" definition #f 427 20 427 29 ("eqv?" "y" "x")}
      {Lisp-Entry "reference=?" definition #f 431 20 431 31 ("eqv?" "y" "x")}
      {Lisp-Entry "local-proxy->reference" definition #f 435 13 435 35 ("object->serial" "cons" "*Temp-Mega-Patch*" "set!" "get-object" "object" "let" "local-register" "proxy=?" "if" "local-proxy")}
      {Lisp-Entry "reference->local-proxy" definition #f 443 13 443 35 ("serial->object" "local-class" "new" "local-register" "not" "if" "reference" "stub-interface")}
      {Lisp-Entry "unmarshall-ior" definition #f 449 20 449 34 ("unmarshall-remote-ior" "unmarshall-local-ior" "local-ior?" "if" "get-stub-interface" "autoload" "stub-interface" "let" "ior")}
      {Lisp-Entry "marshall" definition #f 461 13 461 21 ("error" "else" "cdr" "car" "marshall" "cons" "pair?" "marshall-proxy" "proxy?" "Walk-Location" "Exception-Detail" "is?" "ior?" "unspecified?" "u8vector?" "eq?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "object")}
      {Lisp-Entry "unmarshall" definition #f 500 13 500 23 ("error" "else" "cdr" "car" "unmarshall" "cons" "pair?" "unmarshall-ior" "ior?" "Walk-Location" "Exception-Detail" "is?" "unspecified?" "u8vector?" "eq?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "object")}
      {Lisp-Entry "write-port" definition #f 537 13 537 23 ("force-output" "newline" "encode" "write" "info" "port")}
      {Lisp-Entry "read-port" definition #f 543 13 543 22 ("read" "decode" "port")}
      {Lisp-Entry "encode" definition #f 552 13 552 19 (":reader" "->string" "else" "cdr" "car" "encode" "cons" "pair?" "encode-ior" "ior?" "unspecified" "'unspecified" "unspecified?" "true" "'true" "false" "'false" "encode-info" "eq?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "object")}
      {Lisp-Entry "encoded-marker" definition #f 578 12 578 26 ("ENCODED" "'ENCODED")}
      {Lisp-Entry "encoded?" definition #f 582 13 582 21 ("encoded-marker" "car" "eq?" "pair?" "and" "object")}
      {Lisp-Entry "encode-info" definition #f 587 13 587 24 ("encoded-marker" "cons" "info" "kind")}
      {Lisp-Entry "encode-ior" definition #f 591 13 591 23 ("get-values" "encode" "get-reference" "get-stub-interface" "get-service" "get-host" "IOR" "'IOR" "encode-info" "ior")}
      {Lisp-Entry "decode" definition #f 605 13 605 19 ("error" "else" "cdr" "decode" "cons" "pair?" "decode-ior" "IOR" "unspecified" "true" "false" "case" "car" "read-string-element" "function" "with-jazz-readtable" "not" "if" "decode-info" "info" "kind" "receive" "encoded?" "eof-object?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "object")}
      {Lisp-Entry "decode-info" definition #f 636 13 636 24 ("cddr" "cadr" "values" "encoded")}
      {Lisp-Entry "decode-ior" definition #f 640 13 640 23 ("decode" "IOR" "new" "values" "reference" "stub-interface" "service" "host" "bind" "info")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "autoload.jazz"} 1238328024
    {Lisp-Entry "jazz.jrm.autoload" library #f 37 19 37 36 ("jazz")}})
"stub"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jrm" "src" "jazz" "jrm" "register" "stub.jazz"} 1237033581
    {Lisp-Entry "jazz.jrm.register.stub" library #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Register" remotable-stub "~stub" 43 16 43 24 ()
        {Lisp-Entry "find-object" method #f 46 23 46 34 ("name")}
        {Lisp-Entry "require-object" method #f 47 23 47 37 ("name")}
        {Lisp-Entry "register-object" method #f 48 23 48 38 ("rest" "object" "name")}
        {Lisp-Entry "unregister-object" method #f 49 23 49 40 ("rest" "name")}}}})
