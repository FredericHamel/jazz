"Gomoku-AI"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "Gomoku-AI.jazz"} 1248797036
    {Lisp-Entry "jazz.sample.gomoku.Gomoku-AI" #f 38 19 38 47 ("jazz")
      {Lisp-Entry "Gomoku-AI" #f 48 7 48 16 ("Search-Depth" "0" "initialize")
        {Lisp-Entry "current-eval" #f 51 8 51 20 ()}
        {Lisp-Entry "get-current-eval" #f 51 60 51 68 ()}
        {Lisp-Entry "set-current-eval" #f 51 60 51 68 ()}
        {Lisp-Entry "all-lines" #f 52 8 52 17 ()}
        {Lisp-Entry "get-all-lines" #f 52 60 52 68 ()}
        {Lisp-Entry "set-all-lines" #f 52 60 52 68 ()}
        {Lisp-Entry "search-depth" #f 53 8 53 20 ()}
        {Lisp-Entry "get-search-depth" #f 53 60 53 68 ()}
        {Lisp-Entry "set-search-depth" #f 53 60 53 68 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("setup-lines" "nextmethod" "me" "game")}
        {Lisp-Entry "player-kind" #f 61 11 61 22 ("computer" "'computer")}
        {Lisp-Entry "move-played" #f 65 11 65 22 ("evaluate-move-delta" "+" "current-eval" "set!" "token" "move")}
        {Lisp-Entry "computer-move" #f 69 11 69 24 ("search-depth" "search-depth:" "current-eval" "current-eval:" "evaluate-move-delta" "evaluate-position" "unplay" "play" "iterate-candidates" "me" "minimax")}
        {Lisp-Entry "iterate-moves" #f 80 11 80 24 ("game" "get-available-moves" "in" "move" "for" "loop" "proc")}
        {Lisp-Entry "iterate-candidates" #f 85 11 85 29 ("Candidates" "iterate-moves" "for-each" "proc" "gather-candidates" "token")}
        {Lisp-Entry "play" #f 89 11 89 15 ("game" "play" "token" "move")}
        {Lisp-Entry "unplay" #f 93 11 93 17 ("game" "unplay" "move")}
        {Lisp-Entry "evaluate-position" #f 102 11 102 28 ("evaluate-line" "increase!" "all-lines" "in" "line" "for" "loop" "0" "total" "let")}
        {Lisp-Entry "evaluate-line" #f 109 11 109 24 ("evaluate-count" "+" "0" ">" "and" "if" "opponent" "opponent-count" "me" "count-token" "me-count" "let" "line")}
        {Lisp-Entry "evaluate-move-delta" #f 119 11 119 30 ("+" "set!" "evaluate-count" "else" "evaluate-line-delta" "=" "1" ">" "and" "cond" "delta" "-1" "*" "other-count" "count-token" "who-count" "get-lines" "in" "line" "for" "loop" "0" "total" "let" "token" "square")}
        {Lisp-Entry "evaluate-line-delta" #f 135 11 135 30 ("10" "1" "90" "2" "900" "3" "9000" "4" "990000" "5" "case" "cast" "*" "token" "count")}
        {Lisp-Entry "evaluate-count" #f 145 11 145 25 ("0" "10" "1" "100" "2" "1000" "3" "10000" "4" "1000000" "5" "case" "cast" "*" "token" "count")}
        {Lisp-Entry "setup-lines" #f 161 11 161 22 ("get-lines" "cons" "line=?" "test:" "member?" "not" "when" "line" "function" "for-each" "board-ref" "square" "let" "game" "get-board-size" "below" "0" "from" "rank" "for" "loop" "all-lines" "set!")}}}})
"Gomoku-Application"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "Gomoku-Application.jazz"} 1248802932
    {Lisp-Entry "jazz.sample.gomoku.Gomoku-Application" #f 38 19 38 56 ("jazz")
      {Lisp-Entry "Gomoku-Application" #f 53 7 53 25 ()
        {Lisp-Entry "process-name" #f 56 11 56 23 ()}
        {Lisp-Entry "new-toplevel" #f 60 11 60 23 ("Gomoku-Toplevel" "new")}
        {Lisp-Entry "finish-process" #f 64 11 64 25 ("Gomoku-Board" "new-frame" "get-stage" "maximize" "nextmethod")}}
      {Lisp-Entry "Gomoku-Toplevel" #f 75 7 75 22 ("775" "800" "Dimension" "size:" "100" "Point" "position:" "caption-base:")}}})
"Gomoku-Board"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "Gomoku-Board.jazz"} 1248797036
    {Lisp-Entry "jazz.sample.gomoku.Gomoku-Board" #f 38 19 38 50 ("jazz")
      {Lisp-Entry "Gomoku-Board" #f 55 7 55 19 ("White" "Black" "name:" "Color" "20" "50" "100" "initialize")
        {Lisp-Entry "game" #f 58 8 58 12 ()}
        {Lisp-Entry "get-game" #f 58 30 58 38 ()}
        {Lisp-Entry "square-offset" #f 61 8 61 21 ()}
        {Lisp-Entry "square-width" #f 62 8 62 20 ()}
        {Lisp-Entry "square-spacing" #f 63 8 63 22 ()}
        {Lisp-Entry "line-color" #f 64 8 64 18 ()}
        {Lisp-Entry "black-color" #f 65 8 65 19 ()}
        {Lisp-Entry "white-color" #f 66 8 66 19 ()}
        {Lisp-Entry "host-icon" #f 69 16 69 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 73 16 73 26 ()}
        {Lisp-Entry "host-position" #f 77 16 77 29 ("10" "50" "Point")}
        {Lisp-Entry "host-size" #f 81 16 81 25 ("640" "700" "Dimension")}
        {Lisp-Entry "finish" #f 85 11 85 17 ("initialize-board" "WHITE" "Gomoku-AI" "BLACK" "Gomoku-Human" "list" "register-players" "columns:" "rows:" "Gomoku-Game" "new" "game" "24" "19" "large" "13" "medium" "12" "square-spacing" "35" "square-width" "9" "set!" "case" "columns" "rows" "small" "'small" "size" "let" "nextmethod" "rest")}
        {Lisp-Entry "destroy" #f 111 11 111 18 ("nextmethod" "close-ambiance")}
        {Lisp-Entry "initialize-board" #f 117 11 117 27 ("play-move" "game" "computer-move" "move" "let" "COMPUTER" "HUMAN" "who" "eq?" "cond" "invalidate-view")}
        {Lisp-Entry "play-move" #f 132 11 132 20 ("play-defeat" "COMPUTER" "play-victory" "HUMAN" "who" "cond" "computer-move" "computer?" "get-next-player" "player" "let" "play" "'play" "game" "get-status" "eq?" "when" "board-play" "move")}
        {Lisp-Entry "board-play" #f 144 11 144 21 ("invalidate-view" "game" "play-move" "move")}
        {Lisp-Entry "draw" #f 149 11 149 15 ("draw" "get-winner" "present" "format" "draw-status" "win" "case" "white-color" "WHITE" "black-color" "ellipse" "BLACK" "eq?" "cond" "Rect" "new" "rect" "get-square" "get-token" "token" "get-board-columns" "col" "row" "line" "below" "0" "from" "n" "for" "loop" "line-color" "set-color" "get-board-rows" "*" "-" "total-board" "2" "fxfloor/" "half-width" "square-spacing" "square-width" "+" "total-width" "let*" "when" "game" "get-status" "status" "let" "30" "square-offset" "draw-text" "Heading0" "Font" "set-font" "Yellow" "set-text-color" "Dark-Blue" "name:" "Color" "get-bounds" "fill-rect" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-status" #f 178 11 178 22 ("530" "100" "draw-text" "Heading0" "name:" "Font" "set-font" "set-text-color" "color" "message" "surface")}
        {Lisp-Entry "cursor-update" #f 184 11 184 24 (":arrow" ":finger" "if" "set-cursor" "legal-sqr" "square" "let" "pos")}
        {Lisp-Entry "mouse-down" #f 189 11 189 21 ("play-move" "when" "legal-sqr" "square" "let" "pos")}
        {Lisp-Entry "legal-sqr" #f 195 11 195 20 ("EMPTY" "get-token" "get-square" "square" "col" "90" "/" "truncate" "row" "get-board-rows" "-" "get-board-columns" "*" "<" "square-offset" ">=" "and" "square-spacing" "square-width" "+" "total-width" "get-v" "v" "get-h" "h" "let" "play" "'play" "game" "get-status" "eq?" "if" "pos")}
        {Lisp-Entry "restart-game" #f 217 11 217 23 ("self" "initialize-game" "who")}
        {Lisp-Entry "set-search-depth" #f 221 11 221 27 ("invalidate-view" "+" "board-unplay" "computer-move" "get-current-eval" "-" "set-current-eval" "board-play" "EMPTY" "set-token" "evaluate-move-delta" "delta" "-1" "get-current-next" "*" "who" "let" "get-last-move" "when" "game" "set-search-depth" "depth")}
        {Lisp-Entry "play-computer" #f 236 11 236 24 ("play-move" "computer-move" "move" "let" "play" "'play" "game" "get-status" "eq?" "when")}
        {Lisp-Entry "key-press" #f 242 11 242 20 ("play-computer" "9" "8" "7" "6" "5" "4" "3" "2" "1" "set-search-depth" "exit" "self" "load-board" "COMPUTER" "HUMAN" "game" "get-who-starts" "or" "restart-game" "case" "c")}}
      {Lisp-Entry "play-intro?" #f 270 12 270 23 ()}
      {Lisp-Entry "play-ambiance?" #f 273 12 273 26 ()}
      {Lisp-Entry "intro-directory" #f 277 12 277 27 ("Home" "Directory")}
      {Lisp-Entry "ambiance-directory" #f 280 12 280 30 ("Home" "Directory")}
      {Lisp-Entry "victory-directory" #f 283 12 283 29 ("Home" "Directory")}
      {Lisp-Entry "defeat-directory" #f 286 12 286 28 ("Home" "Directory")}
      {Lisp-Entry "play-intro" #f 290 13 290 23 ("asynchronous?:" "play-sound" "intro-directory" "random-file" "sound" "let" "play-intro?" "when")}
      {Lisp-Entry "play-ambiance" #f 297 13 297 26 ("play-music" "open-music" "ambiance-directory" "random-file" "music" "let" "play-ambiance?" "when")}
      {Lisp-Entry "close-ambiance" #f 304 13 304 27 ("close-music")}
      {Lisp-Entry "play-victory" #f 308 13 308 25 ("play-sound" "when" "victory-directory" "random-file" "sound" "let")}
      {Lisp-Entry "play-defeat" #f 313 13 313 24 ("play-sound" "when" "defeat-directory" "random-file" "sound" "let")}
      {Lisp-Entry "random-file" #f 319 13 319 24 ("random-element" "not-null?" "get-extension" "ci=?" "file" "function" "collect-files" "files" "let" "exists?" "if" "extension" "directory")}}})
"Gomoku-Pages"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "Gomoku-Pages.jazz"} 1248797036
    {Lisp-Entry "jazz.sample.gomoku.Gomoku-Pages" #f 37 19 37 50 ("jazz")
      {Lisp-Entry "Gomoku-Pages" #f 46 7 46 19 ()
        {Lisp-Entry "Pattern-Associations" #f 49 14 49 34 ()}
        {Lisp-Entry "get-pattern-associations" #f 53 11 53 35 ("Pattern-Associations")}
        {Lisp-Entry "new-game" #f 62 11 62 19 ("19" "large" "13" "medium" "columns:" "9" "rows:" "Gomoku-Game" "new" "small" "case" "size")}
        {Lisp-Entry "effective-size" #f 69 11 69 25 ("large" "'large" "medium" "'medium" "nu=?" "cond" "small" "'small" "not" "if" "value")}
        {Lisp-Entry "effective-move" #f 80 11 80 25 ("deserialize-move" "else" "all" "'all" "one" "'one" "equal?" "empty-string?" "not" "or" "cond" "value" "game")}
        {Lisp-Entry "create-players" #f 91 11 91 25 ("Gomoku-AI" "WHITE" "BLACK" "Gomoku-Human" "new" "list" "nu=?" "cond" "players" "game")}
        {Lisp-Entry "gomoku" #f 98 12 98 18 ("debug-info" "jazz.sample.gomoku.Gomoku-AI" "'jazz.sample.gomoku.Gomoku-AI" "minimax-interpreted?" "append" "increase!" "2" "modulo" ",text" "present-move" "text" "prog1" "map" "rank" "draw" "get-winner" "present" "win" "+" "colspan:" "present-col" "align:" "below" ",image" "serialize-move" "onclick:" "human?" "play" "'play" "eqv?" "eq?" "BLACK" "WHITE" "image" "format" "EMPTY" "moku-square?" "name" "get-token" "token" "get-square" "square" "let*" "horz" "col" "present-row" "cons" "collect" "else" "=" "cond" "vert" "with" "to" "0" "from" "row" "for" "loop" "get-board-columns" "last-col" "get-board-rows" "last-row" "cellpadding:" "cellspacing:" "valign:" "class:" "26" "70" "10" "30" "width:" "serialize-game" "->string" ",players" "symbol->string" "value:" "method:" "name:" "background:" "src:" "rel:" "href:" "type:" "1" "length" "-" "last" "null?" "if" "last-move" "large" "medium" "small" "case" "prefix" "get-second-player" "second-player" "get-next-player" "next-player" "get-forward-moves" "forward" "backward" "get-status" "status" "play-players" "all" "one" "memq?" "get-backward-moves" "not-null?" "or" "not" "and" "when" "get-players" "computer?" "player" "function" "every?" "all-computers?" "effective-move" "move" "deserialize-game" "create-players" "register-players" "effective-goto" "goto" "new-game" "game" "effective-current" "current" "effective-players" "players" "error?:" "get-parameter" "effective-size" "size" "get-request" "request" "let" "node")}
        {Lisp-Entry "serialize-move" #f 285 11 285 25 ("format" "get-col" "col" "get-row" "row" "let" "move")}
        {Lisp-Entry "deserialize-move" #f 291 11 291 27 ("get-square" "cardinality" "1" "+" "col" "0" "substring" "string->number" "row" "search" "pos" "let" "value" "game")}}}})
"_gomoku"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "_gomoku.jazz"} 1248797036
    {Lisp-Entry "jazz.sample.gomoku" #f 38 9 38 27 ("jazz")
      {Lisp-Entry "EMPTY" #f 46 20 46 25 ("0")}
      {Lisp-Entry "BLACK" #f 49 20 49 25 ("-1")}
      {Lisp-Entry "WHITE" #f 52 20 52 25 ("1")}
      {Lisp-Entry "Search-Depth" #f 56 20 56 32 ("4")}
      {Lisp-Entry "Candidates" #f 59 20 59 30 ("8")}
      {Lisp-Entry "Gomoku-Player" #f 68 7 68 20 ()
        {Lisp-Entry "game" #f 71 8 71 12 ()}
        {Lisp-Entry "get-game" #f 71 24 71 32 ()}
        {Lisp-Entry "me" #f 72 8 72 10 ()}
        {Lisp-Entry "get-me" #f 72 24 72 32 ()}
        {Lisp-Entry "opponent" #f 73 8 73 16 ()}
        {Lisp-Entry "get-opponent" #f 73 24 73 32 ()}
        {Lisp-Entry "initialize" #f 76 11 76 21 ("-1" "*" "opponent~self" "me~self" "game~self" "set!" "nextmethod" "me" "game")}
        {Lisp-Entry "print" #f 83 11 83 16 ("me" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "present" #f 89 11 89 18 ("BLACK" "me" "eq?" "if")}}
      {Lisp-Entry "Gomoku-Human" #f 100 7 100 19 ()
        {Lisp-Entry "player-kind" #f 103 11 103 22 ("human" "'human")}}
      {Lisp-Entry "Square" #f 112 7 112 13 ()
        {Lisp-Entry "game" #f 115 8 115 12 ()}
        {Lisp-Entry "get-game" #f 115 28 115 36 ()}
        {Lisp-Entry "row" #f 116 8 116 11 ()}
        {Lisp-Entry "get-row" #f 116 28 116 36 ()}
        {Lisp-Entry "col" #f 117 8 117 11 ()}
        {Lisp-Entry "get-col" #f 117 28 117 36 ()}
        {Lisp-Entry "token" #f 118 8 118 13 ()}
        {Lisp-Entry "get-token" #f 118 31 118 39 ()}
        {Lisp-Entry "set-token" #f 118 31 118 39 ()}
        {Lisp-Entry "lines" #f 119 8 119 13 ()}
        {Lisp-Entry "get-lines" #f 119 31 119 39 ()}
        {Lisp-Entry "set-lines" #f 119 31 119 39 ()}
        {Lisp-Entry "initialize" #f 122 11 122 21 ("EMPTY" "token~self" "col~self" "row~self" "game~self" "set!" "nextmethod" "col" "row" "game")}
        {Lisp-Entry "print" #f 130 11 130 16 ("token" "game" "present-move" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "moku-square?" #f 136 21 136 33 ("=" "or" "and" "c" "2" "/" "b" "1" "-" "a" "19" "else" "13" "medium" "9" "small" "case" "width" "3" "4" "large" "'large" "eq?" "if" "border" "let" "col" "row" "size")}
      {Lisp-Entry "present-row" #f 146 21 146 32 ("get-board-rows" "-" "->string" "row" "game")}
      {Lisp-Entry "present-col" #f 150 21 150 32 ("Uppercase-Chars" "element" "->string" "col" "game")}
      {Lisp-Entry "present-move" #f 154 21 154 33 ("present-row" "present-col" "format" "get-col" "col" "get-row" "row" "let" "move" "game")}
      {Lisp-Entry "5-Line" #f 167 7 167 13 ()
        {Lisp-Entry "first" #f 170 8 170 13 ()}
        {Lisp-Entry "get-first" #f 170 31 170 39 ()}
        {Lisp-Entry "second" #f 171 8 171 14 ()}
        {Lisp-Entry "get-second" #f 171 31 171 39 ()}
        {Lisp-Entry "third" #f 172 8 172 13 ()}
        {Lisp-Entry "get-third" #f 172 31 172 39 ()}
        {Lisp-Entry "fourth" #f 173 8 173 14 ()}
        {Lisp-Entry "get-fourth" #f 173 31 173 39 ()}
        {Lisp-Entry "fifth" #f 174 8 174 13 ()}
        {Lisp-Entry "get-fifth" #f 174 31 174 39 ()}
        {Lisp-Entry "initialize" #f 177 11 177 21 ("fifth~self" "fourth~self" "third~self" "second~self" "first~self" "set!" "nextmethod" "fifth" "fourth" "third" "second" "first")}
        {Lisp-Entry "count-token" #f 186 11 186 22 ("fifth" "fourth" "third" "second" "0" "1" "first" "get-token" "=" "if" "+" "who")}}
      {Lisp-Entry "line=?" #f 194 21 194 27 ("get-fifth" "get-fourth" "get-third" "get-second" "get-first" "eq?" "and" "l2" "l1")}
      {Lisp-Entry "Gomoku-Game" #f 207 7 207 18 ("initialize")
        {Lisp-Entry "board-rows" #f 211 8 211 18 ()}
        {Lisp-Entry "get-board-rows" #f 211 49 211 57 ()}
        {Lisp-Entry "set-board-rows" #f 211 49 211 57 ()}
        {Lisp-Entry "board-columns" #f 212 8 212 21 ()}
        {Lisp-Entry "get-board-columns" #f 212 49 212 57 ()}
        {Lisp-Entry "set-board-columns" #f 212 49 212 57 ()}
        {Lisp-Entry "board-size" #f 213 8 213 18 ()}
        {Lisp-Entry "get-board-size" #f 213 49 213 57 ()}
        {Lisp-Entry "set-board-size" #f 213 49 213 57 ()}
        {Lisp-Entry "board" #f 214 8 214 13 ()}
        {Lisp-Entry "get-board" #f 214 49 214 57 ()}
        {Lisp-Entry "set-board" #f 214 49 214 57 ()}
        {Lisp-Entry "available-moves" #f 217 8 217 23 ()}
        {Lisp-Entry "get-available-moves" #f 217 49 217 57 ()}
        {Lisp-Entry "set-available-moves" #f 217 49 217 57 ()}
        {Lisp-Entry "initialize" #f 225 11 225 21 ("setup-lines" "make-availables" "available-moves" "make-board" "board" "*" "board-size" "board-columns" "board-rows" "set!" "nextmethod" "columns" "9" "rows" "bind-keywords" "rest")}
        {Lisp-Entry "make-board" #f 236 11 236 21 ("self" "Square" "new" "vector-set!" "square-rank" "rank" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop" "board-size" "make-vector" "board" "let")}
        {Lisp-Entry "make-availables" #f 245 11 245 26 ("List" "board" "coerce")}
        {Lisp-Entry "directions" #f 254 14 254 24 ("-1" "1" "0")}
        {Lisp-Entry "setup-lines" #f 261 11 261 22 ("compute-lines" "set-lines" "board-ref" "square" "let" "board-size" "below" "0" "from" "rank" "for" "loop")}
        {Lisp-Entry "compute-lines" #f 267 11 267 24 ("5-Line" "new" "cons" "set!" "and" "if" "4" "e" "3" "d" "2" "c" "1" "b" "+" "find-next" "a" "0" "to" "-4" "from" "n" "directions" "in" "dir" "for" "loop" "lines" "get-col" "col" "get-row" "row" "let" "square")}
        {Lisp-Entry "find-next" #f 283 11 283 20 ("cdr" "car" "*" "+" "find-square" "n" "col" "row" "dir")}
        {Lisp-Entry "iterate-board" #f 293 18 293 31 ("get-square" "do" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop" "proc")}
        {Lisp-Entry "board-ref" #f 299 18 299 27 ("board" "vector-ref" "rank")}
        {Lisp-Entry "square-rank" #f 303 18 303 29 ("board-columns" "*" "+" "col" "row")}
        {Lisp-Entry "get-square" #f 307 18 307 28 ("square-rank" "board-ref" "col" "row")}
        {Lisp-Entry "find-square" #f 311 11 311 22 ("get-square" "board-columns" "board-rows" "<" "0" ">=" "and" "if" "col" "row")}
        {Lisp-Entry "play" #f 323 11 323 15 ("remove!" "available-moves" "set!" "set-token" "token" "move")}
        {Lisp-Entry "unplay" #f 328 11 328 17 ("EMPTY" "set-token" "cons" "available-moves" "set!" "move")}
        {Lisp-Entry "play-move" #f 338 11 338 20 ("check-status" "inform-players" "add-move" "play" "get-me" "token" "next-player!" "player" "let" "move")}
        {Lisp-Entry "win?" #f 347 11 347 15 ("get-lines" "some?" "5" "count-token" "=" "line" "line?" "define" "token" "move")}
        {Lisp-Entry "draw?" #f 354 11 354 16 ("available-moves" "null?" "token" "move")}
        {Lisp-Entry "save-board" #f 364 11 364 21 ()}
        {Lisp-Entry "load-board" #f 369 11 369 21 ("invalidate-view" ">=" "if" "set-column-move" "length" "move" "COMPUTER" "O" "X" "case" "set-token" "get-square" "square" "let" "downto" "1" "get-board-rows" "-" "row" "token" "get-board-columns" "below" "0" "from" "col" "saved-board" "in" "tokens" "for" "loop" "HUMAN" "initialize-game" "game")}
        {Lisp-Entry "inspect-board" #f 391 11 391 24 ("newline" "COMPUTER" "HUMAN" "EMPTY" "eq?" "cond" "display" "get-square" "get-token" "token" "let" "get-board-columns" "col" "get-board-rows" "below" "0" "from" "row" "for" "loop" "game")}}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "autoload.jazz"} 1238328026
    {Lisp-Entry "jazz.sample.gomoku.autoload" #f 37 19 37 46 ("jazz")}})
"graphics"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "graphics.jazz"} 1248797036
    {Lisp-Entry "jazz.sample.gomoku.graphics" #f 38 9 38 36 ("jazz")
      {Lisp-Entry "Gomoku-Images" #f 46 12 46 25 ("Jazz" "Directory")}
      {Lisp-Entry "generate-gomoku" #f 50 13 50 28 ("large" "medium" "small" "generate-stone" "symbol->string" "new-directory" "create-directories" "user-message" "size" "for-each" "function" "Gomoku-Images" "parse" "with-current-directory")}
      {Lisp-Entry "generate-stone" #f 64 13 64 27 ("list" "error?:" "Gomoku-Images" "new-file" "delete-file" "location" "function" "for-each" "17" "13" "image-composite" "20" "30" "28" "format" "image-convert" "10" "inner" "5" "outer" "last" "0" "first" "2" "1" "-" "/" "half" "let" "*" "fxround/" "x" "prop" "shadow" "moku" "width" "receive" "8" "71" "large" "6" "49" "medium" "4" "3" "35" "values" "small" "case" "parameters" "define" "size" "color" "name")}}})
"run"
 ({Lisp-File-Entry {File jazz.sample.gomoku "src" "jazz" "sample" "gomoku" "run.jazz"} 1249913822
    {Lisp-Entry "jazz.sample.gomoku.run" #f 37 9 37 31 ("Gomoku-Application" "new" "boot-environment" "jazz.sample.gomoku.Gomoku-AI" "'jazz.sample.gomoku.Gomoku-AI" "warn-minimax-interpreted" "descriptor" "function" "jazz.sample.gomoku" "'jazz.sample.gomoku" "register-product-run" "jazz")}})
