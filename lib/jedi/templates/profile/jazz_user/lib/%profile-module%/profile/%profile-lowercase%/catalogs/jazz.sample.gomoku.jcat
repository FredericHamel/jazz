"Gomoku-AI"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "Gomoku-AI.jazz"} 1226584772
    {Lisp-Entry "jazz.sample.gomoku.Gomoku-AI" #f 38 9 38 37 ("jazz")
      {Lisp-Entry "Gomoku-AI" #f 49 7 49 16 ("Gomoku-Player")
        {Lisp-Entry "current-eval" #f 52 8 52 20 ("generate" "0")}
        {Lisp-Entry "all-lines" #f 53 8 53 17 ("generate")}
        {Lisp-Entry "search-depth" #f 54 8 54 20 ("generate" "Search-Depth")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("setup-lines" "nextmethod" "me" "game")}
        {Lisp-Entry "player-kind" #f 62 11 62 22 ("computer" "'computer")}
        {Lisp-Entry "move-played" #f 66 11 66 22 ("evaluate-move-delta" "+" "current-eval" "set!" "token" "move")}
        {Lisp-Entry "computer-move" #f 70 11 70 24 ("search-depth" "search-depth:" "current-eval" "current-eval:" "evaluate-move-delta" "evaluate-position" "unplay" "play" "iterate-candidates" "me" "minimax")}
        {Lisp-Entry "iterate-moves" #f 81 11 81 24 ("game" "get-available-moves" "in" "move" "for" "loop" "proc")}
        {Lisp-Entry "iterate-candidates" #f 86 11 86 29 ("Candidates" "iterate-moves" "for-each" "proc" "gather-candidates" "token")}
        {Lisp-Entry "play" #f 90 11 90 15 ("game" "play" "token" "move")}
        {Lisp-Entry "unplay" #f 94 11 94 17 ("game" "unplay" "move")}
        {Lisp-Entry "evaluate-position" #f 103 11 103 28 ("evaluate-line" "increase!" "all-lines" "in" "line" "for" "loop" "0" "total" "let")}
        {Lisp-Entry "evaluate-line" #f 110 11 110 24 ("evaluate-count" "+" "0" ">" "and" "if" "opponent" "opponent-count" "me" "count-token" "me-count" "let" "line")}
        {Lisp-Entry "evaluate-move-delta" #f 120 11 120 30 ("+" "set!" "evaluate-count" "else" "evaluate-line-delta" "=" "1" ">" "and" "cond" "delta" "-1" "*" "other-count" "count-token" "who-count" "get-lines" "in" "line" "for" "loop" "0" "total" "let" "token" "square")}
        {Lisp-Entry "evaluate-line-delta" #f 136 11 136 30 ("10" "1" "90" "2" "900" "3" "9000" "4" "990000" "5" "case" "cast" "*" "token" "count")}
        {Lisp-Entry "evaluate-count" #f 146 11 146 25 ("0" "10" "1" "100" "2" "1000" "3" "10000" "4" "1000000" "5" "case" "cast" "*" "token" "count")}
        {Lisp-Entry "setup-lines" #f 162 11 162 22 ("get-lines" "cons" "line=?" "test:" "member?" "not" "when" "line" "lambda" "for-each" "board-ref" "square" "let" "game" "get-board-size" "below" "0" "from" "rank" "for" "loop" "all-lines" "set!")}}}})
"Gomoku-Application"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "Gomoku-Application.jazz"} 1226584772
    {Lisp-Entry "jazz.sample.gomoku.Gomoku-Application" #f 38 9 38 46 ("jazz")
      {Lisp-Entry "Gomoku-Application" #f 55 7 55 25 ("Application")
        {Lisp-Entry "process-name" #f 58 11 58 23 ()}
        {Lisp-Entry "new-toplevel" #f 62 11 62 23 ("Gomoku-Toplevel" "new")}
        {Lisp-Entry "finish-process" #f 66 11 66 25 ("Gomoku-Board" "new-frame" "get-stage" "maximize" "nextmethod")}}
      {Lisp-Entry "Gomoku-Toplevel" #f 77 7 77 22 ("775" "800" "Dimension" "size:" "100" "Point" "position:" "caption-base:" "Toplevel")}}})
"Gomoku-Board"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "Gomoku-Board.jazz"} 1226584772
    {Lisp-Entry "jazz.sample.gomoku.Gomoku-Board" #f 38 9 38 40 ("jazz")
      {Lisp-Entry "Gomoku-Board" #f 63 7 63 19 ("View")
        {Lisp-Entry "game" #f 66 8 66 12 ("generate")}
        {Lisp-Entry "square-offset" #f 69 8 69 21 ("100")}
        {Lisp-Entry "square-width" #f 70 8 70 20 ("50")}
        {Lisp-Entry "square-spacing" #f 71 8 71 22 ("20")}
        {Lisp-Entry "line-pen" #f 72 8 72 16 ("Black" "name:" "Pen")}
        {Lisp-Entry "black-color" #f 73 8 73 19 ("Black" "name:" "Color")}
        {Lisp-Entry "white-color" #f 74 8 74 19 ("White" "name:" "Color")}
        {Lisp-Entry "host-icon" #f 77 16 77 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 81 16 81 26 ()}
        {Lisp-Entry "host-position" #f 85 16 85 29 ("10" "50" "Point")}
        {Lisp-Entry "host-size" #f 89 16 89 25 ("640" "700" "Dimension")}
        {Lisp-Entry "finish" #f 93 11 93 17 ("initialize-board" "WHITE" "Gomoku-AI" "BLACK" "Gomoku-Human" "list" "register-players" "columns:" "rows:" "Gomoku-Game" "new" "game" "24" "19" "large" "13" "medium" "12" "square-spacing" "35" "square-width" "9" "set!" "case" "columns" "rows" "small" "'small" "size" "let" "nextmethod" "rest")}
        {Lisp-Entry "destroy" #f 119 11 119 18 ("nextmethod" "close-ambiance")}
        {Lisp-Entry "initialize-board" #f 125 11 125 27 ("play-move" "game" "computer-move" "move" "let" "COMPUTER" "HUMAN" "who" "eq?" "cond" "invalidate-view")}
        {Lisp-Entry "play-move" #f 140 11 140 20 ("play-defeat" "COMPUTER" "play-victory" "HUMAN" "who" "cond" "computer-move" "computer?" "get-next-player" "player" "let" "play" "'play" "game" "get-status" "eq?" "when" "board-play" "move")}
        {Lisp-Entry "board-play" #f 152 11 152 21 ("invalidate-view" "game" "play-move" "move")}
        {Lisp-Entry "draw" #f 157 11 157 15 ("draw" "get-winner" "present" "format" "draw-status" "win" "case" "white-color" "WHITE" "black-color" "ellipse" "BLACK" "eq?" "cond" "Rect" "new" "rect" "get-square" "get-token" "token" "get-board-columns" "col" "row" "line" "below" "0" "from" "n" "for" "loop" "line-pen" "set-pen" "get-board-rows" "*" "-" "total-board" "2" "fxfloor/" "half-width" "square-spacing" "square-width" "+" "total-width" "let*" "when" "game" "get-status" "status" "let" "30" "square-offset" "draw-text" "Heading0" "Font" "set-font" "Yellow" "set-text-color" "Dark-Blue" "name:" "Color" "get-bounds" "fill-rect" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-status" #f 186 11 186 22 ("530" "100" "draw-text" "Heading0" "name:" "Font" "set-font" "set-text-color" "color" "message" "surface")}
        {Lisp-Entry "cursor-update" #f 192 11 192 24 (":arrow" ":finger" "if" "set-cursor" "legal-sqr" "square" "let" "pos")}
        {Lisp-Entry "mouse-down" #f 197 11 197 21 ("play-move" "when" "legal-sqr" "square" "let" "pos")}
        {Lisp-Entry "legal-sqr" #f 203 11 203 20 ("EMPTY" "get-token" "get-square" "square" "col" "90" "/" "truncate" "row" "get-board-rows" "-" "get-board-columns" "*" "<" "square-offset" ">=" "and" "square-spacing" "square-width" "+" "total-width" "get-v" "v" "get-h" "h" "let" "play" "'play" "game" "get-status" "eq?" "if" "pos")}
        {Lisp-Entry "restart-game" #f 225 11 225 23 ("self" "initialize-game" "who")}
        {Lisp-Entry "set-search-depth" #f 229 11 229 27 ("invalidate-view" "+" "board-unplay" "computer-move" "get-current-eval" "-" "set-current-eval" "board-play" "EMPTY" "set-token" "evaluate-move-delta" "delta" "-1" "get-current-next" "*" "who" "let" "get-last-move" "when" "game" "set-search-depth" "depth")}
        {Lisp-Entry "play-computer" #f 244 11 244 24 ("play-move" "computer-move" "move" "let" "play" "'play" "game" "get-status" "eq?" "when")}
        {Lisp-Entry "key-press" #f 250 11 250 20 ("play-computer" "9" "8" "7" "6" "5" "4" "3" "2" "1" "set-search-depth" "exit" "self" "load-board" "COMPUTER" "HUMAN" "game" "get-who-starts" "or" "restart-game" "case" "c")}}
      {Lisp-Entry "play-intro?" #f 278 12 278 23 ()}
      {Lisp-Entry "play-ambiance?" #f 281 12 281 26 ()}
      {Lisp-Entry "intro-directory" #f 285 12 285 27 ("Home" "Directory")}
      {Lisp-Entry "ambiance-directory" #f 288 12 288 30 ("Home" "Directory")}
      {Lisp-Entry "victory-directory" #f 291 12 291 29 ("Home" "Directory")}
      {Lisp-Entry "defeat-directory" #f 294 12 294 28 ("Home" "Directory")}
      {Lisp-Entry "play-intro" #f 298 13 298 23 ("asynchronous?:" "play-sound" "intro-directory" "random-file" "sound" "let" "play-intro?" "when")}
      {Lisp-Entry "play-ambiance" #f 305 13 305 26 ("play-music" "open-music" "ambiance-directory" "random-file" "music" "let" "play-ambiance?" "when")}
      {Lisp-Entry "close-ambiance" #f 312 13 312 27 ("close-music")}
      {Lisp-Entry "play-victory" #f 316 13 316 25 ("play-sound" "when" "victory-directory" "random-file" "sound" "let")}
      {Lisp-Entry "play-defeat" #f 321 13 321 24 ("play-sound" "when" "defeat-directory" "random-file" "sound" "let")}
      {Lisp-Entry "random-file" #f 327 13 327 24 ("random-element" "not-null?" "get-extension" "ci=?" "file" "lambda" "collect-files" "files" "let" "exists?" "if" "extension" "directory")}}})
"Gomoku-Pages"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "Gomoku-Pages.jazz"} 1226584772
    {Lisp-Entry "jazz.sample.gomoku.Gomoku-Pages" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Gomoku-Pages" #f 48 7 48 19 ("Game-Pages")
        {Lisp-Entry "Pattern-Associations" #f 51 14 51 34 ()}
        {Lisp-Entry "get-pattern-associations" #f 55 11 55 35 ("Pattern-Associations")}
        {Lisp-Entry "new-game" #f 64 11 64 19 ("19" "large" "13" "medium" "columns:" "9" "rows:" "Gomoku-Game" "new" "small" "case" "size")}
        {Lisp-Entry "effective-size" #f 71 11 71 25 ("large" "'large" "medium" "'medium" "nu=?" "cond" "small" "'small" "not" "if" "value")}
        {Lisp-Entry "effective-move" #f 82 11 82 25 ("deserialize-move" "else" "all" "'all" "one" "'one" "equal?" "empty-string?" "not" "or" "cond" "value" "game")}
        {Lisp-Entry "create-players" #f 93 11 93 25 ("Gomoku-AI" "WHITE" "BLACK" "Gomoku-Human" "new" "list" "nu=?" "cond" "players" "game")}
        {Lisp-Entry "gomoku" #f 100 12 100 18 ("debug-info" "append" "increase!" "2" "modulo" ",text" "present-move" "text" "prog1" "map" "rank" "draw" "get-winner" "present" "win" "+" "colspan:" "present-col" "align:" "below" ",image" "serialize-move" "onclick:" "human?" "play" "'play" "eqv?" "eq?" "BLACK" "WHITE" "image" "format" "EMPTY" "moku-square?" "name" "get-token" "token" "get-square" "square" "let*" "horz" "col" "present-row" "cons" "collect" "else" "=" "cond" "vert" "with" "to" "0" "from" "row" "for" "loop" "get-board-columns" "last-col" "get-board-rows" "last-row" "cellpadding:" "cellspacing:" "valign:" "class:" "26" "70" "10" "30" "width:" "serialize-game" "->string" ",players" "symbol->string" "value:" "method:" "name:" "background:" "src:" "rel:" "href:" "type:" "1" "length" "-" "last" "null?" "if" "last-move" "large" "medium" "small" "case" "prefix" "get-second-player" "second-player" "get-next-player" "next-player" "get-forward-moves" "forward" "backward" "get-status" "status" "play-players" "all" "one" "memq?" "get-backward-moves" "not-null?" "or" "not" "and" "when" "get-players" "computer?" "player" "function" "every?" "all-computers?" "effective-move" "move" "deserialize-game" "create-players" "register-players" "effective-goto" "goto" "new-game" "game" "effective-current" "current" "effective-players" "players" "error?:" "get-parameter" "effective-size" "size" "get-request" "request" "let" "node")}
        {Lisp-Entry "serialize-move" #f 274 11 274 25 ("format" "get-col" "col" "get-row" "row" "let" "move")}
        {Lisp-Entry "deserialize-move" #f 280 11 280 27 ("get-square" "cardinality" "1" "+" "col" "0" "substring" "string->number" "row" "search" "pos" "let" "value" "game")}}}})
"_gomoku"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "_gomoku.jazz"} 1226584772
    {Lisp-Entry "jazz.sample.gomoku" #f 38 9 38 27 ("jazz")
      {Lisp-Entry "EMPTY" #f 47 12 47 17 ("0")}
      {Lisp-Entry "BLACK" #f 50 12 50 17 ("-1")}
      {Lisp-Entry "WHITE" #f 53 12 53 17 ("1")}
      {Lisp-Entry "Search-Depth" #f 57 12 57 24 ("4")}
      {Lisp-Entry "Candidates" #f 60 12 60 22 ("8")}
      {Lisp-Entry "Gomoku-Player" #f 69 7 69 20 ("Player")
        {Lisp-Entry "game" #f 72 8 72 12 ("generate")}
        {Lisp-Entry "me" #f 73 8 73 10 ("generate")}
        {Lisp-Entry "opponent" #f 74 8 74 16 ("generate")}
        {Lisp-Entry "initialize" #f 77 11 77 21 ("-1" "*" "opponent~self" "me~self" "game~self" "set!" "nextmethod" "me" "game")}
        {Lisp-Entry "print" #f 84 11 84 16 ("me" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "present" #f 90 11 90 18 ("BLACK" "me" "eq?" "if")}}
      {Lisp-Entry "Gomoku-Human" #f 101 7 101 19 ("Gomoku-Player")
        {Lisp-Entry "player-kind" #f 104 11 104 22 ("human" "'human")}}
      {Lisp-Entry "Square" #f 113 7 113 13 ("Object")
        {Lisp-Entry "game" #f 116 8 116 12 ("generate")}
        {Lisp-Entry "row" #f 117 8 117 11 ("generate")}
        {Lisp-Entry "col" #f 118 8 118 11 ("generate")}
        {Lisp-Entry "token" #f 119 8 119 13 ("generate")}
        {Lisp-Entry "lines" #f 120 8 120 13 ("generate")}
        {Lisp-Entry "initialize" #f 123 11 123 21 ("EMPTY" "token~self" "col~self" "row~self" "game~self" "set!" "nextmethod" "col" "row" "game")}
        {Lisp-Entry "print" #f 131 11 131 16 ("token" "game" "present-move" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "moku-square?" #f 137 13 137 25 ("=" "or" "and" "c" "2" "/" "b" "1" "-" "a" "19" "else" "13" "medium" "9" "small" "case" "width" "3" "4" "large" "'large" "eq?" "if" "border" "let" "col" "row" "size")}
      {Lisp-Entry "present-row" #f 147 13 147 24 ("get-board-rows" "-" "->string" "row" "game")}
      {Lisp-Entry "present-col" #f 151 13 151 24 ("Uppercase-Chars" "element" "->string" "col" "game")}
      {Lisp-Entry "present-move" #f 155 13 155 25 ("present-row" "present-col" "format" "get-col" "col" "get-row" "row" "let" "move" "game")}
      {Lisp-Entry "Line" #f 168 7 168 11 ("Object")
        {Lisp-Entry "first" #f 171 8 171 13 ("generate")}
        {Lisp-Entry "second" #f 172 8 172 14 ("generate")}
        {Lisp-Entry "third" #f 173 8 173 13 ("generate")}
        {Lisp-Entry "fourth" #f 174 8 174 14 ("generate")}
        {Lisp-Entry "fifth" #f 175 8 175 13 ("generate")}
        {Lisp-Entry "initialize" #f 178 11 178 21 ("fifth~self" "fourth~self" "third~self" "second~self" "first~self" "set!" "nextmethod" "fifth" "fourth" "third" "second" "first")}
        {Lisp-Entry "count-token" #f 187 11 187 22 ("fifth" "fourth" "third" "second" "0" "1" "first" "get-token" "=" "if" "+" "who")}}
      {Lisp-Entry "line=?" #f 195 13 195 19 ("get-fifth" "get-fourth" "get-third" "get-second" "get-first" "eq?" "and" "l2" "l1")}
      {Lisp-Entry "Gomoku-Game" #f 208 7 208 18 ("Game")
        {Lisp-Entry "board-rows" #f 212 8 212 18 ("generate")}
        {Lisp-Entry "board-columns" #f 213 8 213 21 ("generate")}
        {Lisp-Entry "board-size" #f 214 8 214 18 ("generate")}
        {Lisp-Entry "board" #f 215 8 215 13 ("generate")}
        {Lisp-Entry "available-moves" #f 218 8 218 23 ("generate")}
        {Lisp-Entry "initialize" #f 226 11 226 21 ("setup-lines" "make-availables" "available-moves" "make-board" "board" "*" "board-size" "board-columns" "board-rows" "set!" "nextmethod" "columns" "9" "rows" "bind-keywords" "rest")}
        {Lisp-Entry "make-board" #f 237 11 237 21 ("self" "Square" "new" "vector-set!" "square-rank" "rank" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop" "board-size" "make-vector" "board" "let")}
        {Lisp-Entry "make-availables" #f 246 11 246 26 ("List" "board" "coerce")}
        {Lisp-Entry "directions" #f 255 14 255 24 ("-1" "1" "0")}
        {Lisp-Entry "setup-lines" #f 262 11 262 22 ("compute-lines" "set-lines" "board-ref" "square" "let" "board-size" "below" "0" "from" "rank" "for" "loop")}
        {Lisp-Entry "compute-lines" #f 268 11 268 24 ("Line" "new" "cons" "set!" "and" "if" "4" "e" "3" "d" "2" "c" "1" "b" "+" "find-next" "a" "0" "to" "-4" "from" "n" "directions" "in" "dir" "for" "loop" "lines" "get-col" "col" "get-row" "row" "let" "square")}
        {Lisp-Entry "find-next" #f 284 11 284 20 ("cdr" "car" "*" "+" "find-square" "n" "col" "row" "dir")}
        {Lisp-Entry "iterate-board" #f 294 18 294 31 ("get-square" "do" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop" "proc")}
        {Lisp-Entry "board-ref" #f 300 18 300 27 ("board" "vector-ref" "rank")}
        {Lisp-Entry "square-rank" #f 304 18 304 29 ("board-columns" "*" "+" "col" "row")}
        {Lisp-Entry "get-square" #f 308 18 308 28 ("square-rank" "board-ref" "col" "row")}
        {Lisp-Entry "find-square" #f 312 11 312 22 ("get-square" "board-columns" "board-rows" "<" "0" ">=" "and" "if" "col" "row")}
        {Lisp-Entry "play" #f 324 11 324 15 ("remove!" "available-moves" "set!" "set-token" "token" "move")}
        {Lisp-Entry "unplay" #f 329 11 329 17 ("EMPTY" "set-token" "cons" "available-moves" "set!" "move")}
        {Lisp-Entry "play-move" #f 339 11 339 20 ("check-status" "inform-players" "add-move" "play" "get-me" "token" "next-player!" "player" "let" "move")}
        {Lisp-Entry "win?" #f 348 11 348 15 ("get-lines" "some?" "5" "count-token" "=" "line" "line?" "define" "token" "move")}
        {Lisp-Entry "draw?" #f 355 11 355 16 ("available-moves" "null?" "token" "move")}
        {Lisp-Entry "save-board" #f 365 11 365 21 ()}
        {Lisp-Entry "load-board" #f 370 11 370 21 ("invalidate-view" ">=" "if" "set-column-move" "length" "move" "COMPUTER" "O" "X" "case" "set-token" "get-square" "square" "let" "downto" "1" "get-board-rows" "-" "row" "token" "get-board-columns" "below" "0" "from" "col" "saved-board" "in" "tokens" "for" "loop" "HUMAN" "initialize-game" "game")}
        {Lisp-Entry "inspect-board" #f 392 11 392 24 ("newline" "COMPUTER" "HUMAN" "EMPTY" "eq?" "cond" "display" "get-square" "get-token" "token" "let" "get-board-columns" "col" "get-board-rows" "below" "0" "from" "row" "for" "loop" "game")}}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "autoload.jazz"} 1226584772
    {Lisp-Entry "jazz.sample.gomoku.autoload" #f 37 9 37 36 ("jazz")}})
"graphics"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "graphics.jazz"} 1226584772
    {Lisp-Entry "jazz.sample.gomoku.graphics" #f 38 9 38 36 ("jazz")
      {Lisp-Entry "Gomoku-Images" #f 45 12 45 25 ("Jazz" "Directory")}
      {Lisp-Entry "generate-gomoku" #f 49 13 49 28 ("large" "medium" "small" "generate-stone" "symbol->string" "new-directory" "create-directories" "user-message" "size" "function" "for-each" "Gomoku-Images" "parse" "current-directory" "parameterize")}
      {Lisp-Entry "generate-stone" #f 62 13 62 27 ("list" "error?:" "Gomoku-Images" "new-file" "delete-file" "location" "function" "for-each" "17" "13" "image-composite" "20" "30" "28" "format" "image-convert" "10" "inner" "5" "outer" "last" "0" "first" "2" "1" "-" "/" "half" "let" "*" "fxround/" "x" "prop" "shadow" "moku" "width" "receive" "8" "71" "large" "6" "49" "medium" "4" "3" "35" "values" "small" "case" "parameters" "define" "size" "color" "name")}}})
"product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.gomoku" "src" "jazz" "sample" "gomoku" "product.jazz"} 1226584772
    {Lisp-Entry "jazz.sample.gomoku.product" #f 37 9 37 35 ("build" "build:" "run" "run:" "title:" "gomoku" "'gomoku" "register-product" "jazz")
      {Lisp-Entry "run" #f 48 13 48 16 ("Gomoku-Application" "new" "boot-environment")}
      {Lisp-Entry "update" #f 57 13 57 19 ("jazz.sample.gomoku" "'jazz.sample.gomoku" "jazz.sample.game.minimax" "'jazz.sample.game.minimax" "jazz.sample.game" "'jazz.sample.game" "build-module")}
      {Lisp-Entry "build" #f 68 13 68 18 ("50000" "minimum-heap:" "gomoku" "'gomoku" "build-executable" "update")}}})
