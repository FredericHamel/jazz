"Experiments"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "experiments" "Experiments.jazz"} 1237033581})
"JML-Element"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "model" "JML-Element.jazz"} 1248797036
    {Lisp-Entry "jazz.jml.model.JML-Element" #f 37 19 37 45 ("jazz")
      {Lisp-Entry "JML-Element" #f 44 7 44 18 ("initialize")
        {Lisp-Entry "tag" #f 47 8 47 11 ()}
        {Lisp-Entry "properties" #f 48 8 48 18 ()}
        {Lisp-Entry "children" #f 49 8 49 16 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("properties~self" "tag~self" "set!" "nextmethod" "properties" "properties:" "tag" "parent")}
        {Lisp-Entry "print" #f 58 11 58 16 ("tag" "format" "properties" "null?" "if" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "clone" #f 66 18 66 23 ("set-children" "properties" "set-properties" "tag" "JML-Element" "new" "clone" "let" "children" "children:" "parent" "parent:")}
        {Lisp-Entry "get-tag" #f 78 18 78 25 ("tag")}
        {Lisp-Entry "get-properties" #f 82 18 82 32 ("properties")}
        {Lisp-Entry "set-properties" #f 86 18 86 32 ("properties" "set!" "value")}
        {Lisp-Entry "get-children" #f 90 18 90 30 ("children")}
        {Lisp-Entry "set-children" #f 94 18 94 30 ("children" "set!" "value")}
        {Lisp-Entry "has-property?" #f 103 18 103 31 ("not-found:" "key:" "properties" "getf" "neq?" "Box" "not-found" "symbolize-property" "symbol" "let" "property")}
        {Lisp-Entry "get-property" #f 109 18 109 30 ("cddr" "cadr" "eq?" "car" "null?" "if" "properties" "scan" "iterate" "symbolize-property" "symbol" "let" "not-found" "property")}
        {Lisp-Entry "set-property" #f 120 18 120 30 ("cddr" "cdr" "set-car!" "eq?" "car" "list" "append" "set!" "null?" "if" "properties" "scan" "iterate" "symbolize-property" "symbol" "let" "value" "property")}
        {Lisp-Entry "remove-property" #f 131 18 131 33 ("get-output" "set!" "properties" "put" "neq?" "when" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "symbolize-property" "symbol" "let" "target")}
        {Lisp-Entry "Flattened-Tags" #f 147 14 147 28 ("span" "input" "img" "div")}
        {Lisp-Entry "first-child" #f 151 18 151 29 ("car" "children" "null?" "if")}
        {Lisp-Entry "add-child" #f 157 26 157 35 ("list" "append!" "children" "set!" "node")}
        {Lisp-Entry "composite?" #f 161 18 161 28 ("simple?" "not")}
        {Lisp-Entry "simple?" #f 165 18 165 25 ("JML-Text" "sub" "function" "every?" "simple?" "Flattened-Tags" "get-tag" "memq?" "JML-Element" "is?" "car" "child" "length" "1" "=" "and" "or" "effective-children" "children" "let")}
        {Lisp-Entry "effective-children" #f 177 11 177 29 ("children")}
        {Lisp-Entry "find-by" #f 181 18 181 25 ("children" "find-if" "predicate")}
        {Lisp-Entry "find-node" #f 185 18 185 27 ("get-tag" "eq?" "JML-Element" "is?" "and" "child" "function" "find-by" "tag")}
        {Lisp-Entry "find-name" #f 192 26 192 35 ("'name" "get-property" "eq?" "JML-Element" "is?" "and" "child" "function" "find-by" "name")}
        {Lisp-Entry "find-property" #f 199 18 199 31 ("get-property" "equal?" "JML-Element" "is?" "and" "child" "function" "find-by" "value" "property")}
        {Lisp-Entry "get-child-text" #f 206 18 206 32 ("first-child" "get-text")}
        {Lisp-Entry "get-child-location" #f 215 11 215 29 ("children" "get-rank" "properties" "length" "1" "+" "list" "child")}
        {Lisp-Entry "->jml" #f 226 11 226 16 ("children->jml" "properties->jml" "tag->jml")}
        {Lisp-Entry "tag->jml" #f 230 18 230 26 ("tag" "format" "string->symbol")}
        {Lisp-Entry "properties->jml" #f 234 18 234 33 ("get-output" "properties" "property->jml" "put" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "property->jml" #f 243 18 243 31 ("symbol->keyword" "property")}
        {Lisp-Entry "children->jml" #f 247 18 247 31 ("children" "->jml" "child" "function" "map")}}}})
"JML-Node"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "model" "JML-Node.jazz"} 1248797036
    {Lisp-Entry "jazz.jml.model.JML-Node" #f 37 19 37 42 ("jazz")
      {Lisp-Entry "JML-Node" #f 43 7 43 15 ()
        {Lisp-Entry "parent" #f 46 8 46 14 ()}
        {Lisp-Entry "initialize" #f 49 11 49 21 ("self" "add-child" "when" "parent~self" "set!" "nextmethod" "parent")}
        {Lisp-Entry "get-parent" #f 61 18 61 28 ("parent")}
        {Lisp-Entry "set-parent" #f 65 18 65 28 ("self" "add-child" "when" "parent" "set!" "value")}
        {Lisp-Entry "set-parent-value" #f 71 18 71 34 ("parent" "set!" "value")}
        {Lisp-Entry "get-toplevel" #f 80 18 80 30 ("get-toplevel" "self" "parent" "not" "if")}
        {Lisp-Entry "get-location" #f 91 18 91 30 ("self" "get-child-location" "get-location" "append" "parent" "not" "if")}
        {Lisp-Entry "get-child-location" #f 98 26 98 44 ("child")}
        {Lisp-Entry "->jml" #f 107 35 107 40 ()}
        {Lisp-Entry "pretty-print" #f 116 18 116 30 ("child" "for-each" "car" "null?" "1" "=" "get-children" "children" "table-ref" "max" "neq?" "property" "for-each-property" "length" ">" "pres" "get-property" "value" "7" "+" "'name" "has-property?" "cardinality" "-" "pad" "not-null?" "and" ":human" "case" "get-properties" "properties" "cons" "symbol->string" "name" "get-tag" "tag" "let*" "single-line?" "get-text" "text" "JML-Text" "is?" "if" "set!" "2" "*" "or" "format" "not" "when" "level" "path" "node" "iter" "letrec" "self" "compute-maxes" "maxes" "max-name" "max-tag" "receive" "first?" "let" "function" "with-printer" ":reader" "readably" "readably:" "align-properties?" "align-properties?:" "align-name?" "align-name?:" "space-properties?" "space-properties?:" "0" "base" "base:" "indent-first?" "indent-first?:" "form?" "form?:" "printer")}
        {Lisp-Entry "compute-maxes" #f 188 11 188 24 ("values" "get-children" "1" "child" "for-each" "get-properties" "table-set!" "table-ref" "max" "'name" "eq?" "format" "cast" "value" "property" "for-each-property" "set!" ">" "not" "or" "2" "*" "cardinality" "+" "width" "cons" "symbol->string" "name" "get-tag" "tag" "let*" "JML-Element" "is?" "when" "level" "path" "function" "iter" "letrec" "equal?" "test:" "make-table" "essay" "maxes" "max-name" "max-tag" "let" "align-properties?" "base" "node")}}}})
"JML-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "parser" "JML-Parser.jazz"} 1246940598
    {Lisp-Entry "jazz.jml.parser.JML-Parser" #f 37 19 37 45 ("jazz")
      {Lisp-Entry "JML-Parser" #f 45 7 45 17 ("Object")
        {Lisp-Entry "preferences" #f 53 8 53 19 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("preferences~self" "set!" "nextmethod" "preferences" "preferences:")}
        {Lisp-Entry "get-preferences" #f 66 18 66 33 ("preferences")}
        {Lisp-Entry "parse" #f 75 18 75 23 ("parse-expr" "parse-reader" "port?" "if" "reader/expr")}
        {Lisp-Entry "parse-reader" #f 81 11 81 23 ("read" "parse-expr" "reader")}
        {Lisp-Entry "parse-expr" #f 85 11 85 21 ("parse-any" "expr" "parent")}
        {Lisp-Entry "parse-any" #f 89 11 89 20 ("parse-noexpand" "parse-pattern" "pattern-expr?" "if" "object" "parent")}
        {Lisp-Entry "parse-noexpand" #f 95 11 95 25 ("error" "else" "parse-expr" "sub" "function" "map" "parse-new-node" "car" "symbol?" "pair?" "and" "parse-node" "tagged-expr?" "set-parent" "JML-Node" "is?" "not" "cond" "object" "parent")}
        {Lisp-Entry "parse-pattern" #f 113 11 113 24 ("parse-any" "parse-noexpand" "eq?" "pair?" "and" "if" "expand-pattern" "expansion" "tag->name" "tag" "car" "first" "let*" "pattern" "parent")}
        {Lisp-Entry "parse-node" #f 122 11 122 21 ("parse-new-node" "parse-jml-node" "tag?" "if" "car" "first" "let" "expr" "parent")}
        {Lisp-Entry "parse-new-node" #f 129 11 129 25 ("set-children" "when" "parse-children" "children" "new" "apply" "node" "let*" "parse-jml-properties/children" "children-list" "properties-list" "receive" "autoload" "class" "let" "rest" "model" "bind" "expr" "parent")}
        {Lisp-Entry "parse-jml-node" #f 140 11 140 25 ("set-properties" "parse-children" "children" "parse-properties" "properties" "JML-Element" "new" "node" "let*" "parse-jml-properties/children" "children-list" "properties-list" "receive" "tag->name" "tag" "let" "rest" "first" "bind" "expr" "parent")}
        {Lisp-Entry "parse-properties" #f 151 11 151 27 ("queue-list" "parse-property" "keyword->symbol" "enqueue" "value" "property" "function" "for-each-property" "new-queue" "queue" "let" "properties")}
        {Lisp-Entry "parse-children" #f 160 11 160 25 ("queue-list" "parse-expr" "jml" "JML-Text" "new" "string?" "element" "function" "enqueue" "for-each" "null/pair?" "if" "nodes" "add-nodes" "define" "new-queue" "queue" "let" "children" "parent")}
        {Lisp-Entry "parse-property" #f 176 11 176 25 ("parse-value" "parse-property" "map" ":string" "car" "eq?" "pair?" "and" "if" "value")}
        {Lisp-Entry "parse-value" #f 182 11 182 22 ("parse-path" "Path" "is?" "if" "value")}
        {Lisp-Entry "parse-path" #f 188 11 188 21 ("get-alias" "cons" "append" "apply" "get-path" "path" "alias" "bind" "use-generator?" "use-generator?:" "value")}
        {Lisp-Entry "tag-valid?" #f 193 29 193 39 ("tag")}
        {Lisp-Entry "validate-tag" #f 197 29 197 41 ("error" "tag-valid?" "unless" "tag")}
        {Lisp-Entry "tagged-expr?" #f 207 11 207 23 ("car" "tag?" "pair?" "and" "expr")}
        {Lisp-Entry "pattern-expr?" #f 212 11 212 24 ("self" "find-dispatch" "tag->name" "tag" "tag?" "car" "first" "let" "pair?" "and" "expr")}
        {Lisp-Entry "expand-pattern" #f 220 11 220 25 ("self" "find-dispatch" "pattern" "let" "tag" "tree")}
        {Lisp-Entry "get-alias" #f 230 29 230 38 ("error" "rest" "name")}}}})
"JML-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "preference" "JML-Preferences.jazz"} 1248797036
    {Lisp-Entry "jazz.jml.preference.JML-Preferences" #f 37 19 37 54 ("jazz")
      {Lisp-Entry "JML-Preferences" #f 44 7 44 22 ("2" "initialize")
        {Lisp-Entry "target" #f 47 12 47 18 ()}
        {Lisp-Entry "get-target" #f 47 51 47 59 ()}
        {Lisp-Entry "set-target" #f 47 51 47 59 ()}
        {Lisp-Entry "jml-directory" #f 48 12 48 25 ()}
        {Lisp-Entry "get-jml-directory" #f 48 51 48 59 ()}
        {Lisp-Entry "set-jml-directory" #f 48 51 48 59 ()}
        {Lisp-Entry "html-directory" #f 49 12 49 26 ()}
        {Lisp-Entry "get-html-directory" #f 49 51 49 59 ()}
        {Lisp-Entry "set-html-directory" #f 49 51 49 59 ()}
        {Lisp-Entry "debug-tables?" #f 50 12 50 25 ()}
        {Lisp-Entry "get-debug-tables?" #f 50 51 50 59 ()}
        {Lisp-Entry "set-debug-tables?" #f 50 51 50 59 ()}
        {Lisp-Entry "debug-colors?" #f 51 12 51 25 ()}
        {Lisp-Entry "get-debug-colors?" #f 51 51 51 59 ()}
        {Lisp-Entry "set-debug-colors?" #f 51 51 51 59 ()}
        {Lisp-Entry "tab-size" #f 52 12 52 20 ()}
        {Lisp-Entry "get-tab-size" #f 52 51 52 59 ()}
        {Lisp-Entry "set-tab-size" #f 52 51 52 59 ()}
        {Lisp-Entry "get-class-presentation" #f 59 16 59 38 ()}
        {Lisp-Entry "get-class-image" #f 63 16 63 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 67 16 67 37 ("nextmethod" "else" "tab-size" "debug-colors?" "debug-tables?" "html-directory" "jml-directory" "target" "field-name" "case" "property")}
        {Lisp-Entry "get-presentation" #f 78 11 78 27 ()}
        {Lisp-Entry "get-categorized-properties" #f 82 11 82 37 ("tab-size" "debug-colors?" "debug-tables?" "html-directory" "jml-directory" "target")}
        {Lisp-Entry "get-row-instance" #f 86 11 86 27 ("nextmethod" "else" "Integer-Row" "tab-size" "Boolean-Row" "debug-colors?" "debug-tables?" "Directory-Row" "html-directory" "jml-directory" "String-Row" "new" "target" "field-name" "case" "property")}}}})
"JML-Renderer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "renderer" "JML-Renderer.jazz"} 1238328024
    {Lisp-Entry "jazz.jml.renderer.JML-Renderer" #f 37 19 37 49 ("jazz")
      {Lisp-Entry "JML-Renderer" #f 40 7 40 19 ("Object")
        {Lisp-Entry "preferences" #f 43 8 43 19 ()}
        {Lisp-Entry "initialize" #f 46 11 46 21 ("preferences~self" "set!" "nextmethod" "preferences")}
        {Lisp-Entry "render" #f 56 26 56 32 ("printer" "jml")}
        {Lisp-Entry "render-node" #f 60 26 60 37 ("printer" "level" "mix?" "simple?" "jml" "context")}}}})
"JML-Text"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "model" "JML-Text.jazz"} 1248797036
    {Lisp-Entry "jazz.jml.model.JML-Text" #f 37 19 37 42 ("jazz")
      {Lisp-Entry "JML-Text" #f 43 7 43 15 ()
        {Lisp-Entry "text" #f 46 8 46 12 ()}
        {Lisp-Entry "initialize" #f 49 11 49 21 ("text~self" "set!" "nextmethod" "text" "parent")}
        {Lisp-Entry "print" #f 54 11 54 16 ("text" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-text" #f 65 18 65 26 ("text")}
        {Lisp-Entry "set-text" #f 69 18 69 26 ("text" "set!" "value")}
        {Lisp-Entry "->jml" #f 78 11 78 16 ("text")}
        {Lisp-Entry "multi-line?" #f 87 18 87 29 ("text" "find-in")}
        {Lisp-Entry "single-line?" #f 91 18 91 30 ("multi-line?" "not")}}}})
"JML-Transformation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "transformation" "JML-Transformation.jazz"} 1248797036
    {Lisp-Entry "jazz.jml.transformation.JML-Transformation" #f 37 19 37 61 ("jazz")
      {Lisp-Entry "JML-Transformation" #f 44 7 44 25 ()
        {Lisp-Entry "parser" #f 47 8 47 14 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("JML-Parser" "either" "new" "parser~self" "set!" "nextmethod" "parser-class" "parser-class:")}
        {Lisp-Entry "transform" #f 60 26 60 35 ("transform-jml" "parser" "parse" "node")}
        {Lisp-Entry "transform-jml" #f 64 18 64 31 ("get-children" "transform-jml" "map" "properties->jml" "tag->jml" "get-text" "JML-Text" "is?" "if" "transform-one" "new-node" "let" "node")}
        {Lisp-Entry "transform-one" #f 72 11 72 24 ("self" "parser" "parse" "if" "node-pattern" "pattern" "let" "node")}
        {Lisp-Entry "node-pattern" #f 84 11 84 23 ("self" "find-dispatch" "get-tag" "name->tag" "tag" "let" "JML-Element" "is?" "and" "node")}}}})
"XHTML-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "xhtml" "XHTML-Parser.jazz"} 1248797036
    {Lisp-Entry "jazz.jml.xhtml.XHTML-Parser" #f 37 19 37 46 ("jazz")
      {Lisp-Entry "XHTML-Parser" #f 43 7 43 19 ()
        {Lisp-Entry "Valid-Tags" #f 51 14 51 24 ("var" "ul" "u" "tt" "tr" "title" "thead" "th" "tfoot" "textarea" "td" "tbody" "table" "sup" "sub" "style" "strong" "strike" "span" "small" "select" "script" "samp" "s" "q" "pre" "param" "p" "option" "optgroup" "ol" "object" "noscript" "noframes" "meta" "menu" "map" "link" "li" "legend" "label" "kbd" "isindex" "ins" "input" "img" "iframe" "i" "html" "hr" "head" "h6" "h5" "h4" "h3" "h2" "h1" "frameset" "frame" "form" "font" "fieldset" "em" "dt" "dl" "div" "dir" "dfn" "del" "dd" "colgroup" "col" "code" "cite" "center" "caption" "button" "br" "body" "blockquote" "big" "bdo" "basefont" "base" "b" "area" "applet" "address" "acronym" "abbr" "a")}
        {Lisp-Entry "tag-valid?" #f 145 11 145 21 ("Valid-Tags" "memq?" "tag")}}}})
"XHTML-Renderer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "xhtml" "XHTML-Renderer.jazz"} 1248797036
    {Lisp-Entry "jazz.jml.xhtml.XHTML-Renderer" #f 40 19 40 48 ("jazz")
      {Lisp-Entry "XHTML-Renderer" #f 46 7 46 21 ()
        {Lisp-Entry "Empty-Tags" #f 54 14 54 24 ("param" "meta" "link" "input" "img" "hr" "frame" "col" "br" "basefont" "base" "area")}
        {Lisp-Entry "Mix-Tags" #f 57 14 57 22 ("td" "p")}
        {Lisp-Entry "Pre-Tags" #f 60 14 60 22 ("pre")}
        {Lisp-Entry "Separated-Tags" #f 63 14 63 28 ("frameset" "body" "head")}
        {Lisp-Entry "Separated2-Tags" #f 66 14 66 29 ("html")}
        {Lisp-Entry "render" #f 75 11 75 17 ("0" "render-jml" "printer" "jml")}
        {Lisp-Entry "render-jml" #f 79 11 79 21 ("render-node" "else" "render-text" "JML-Text" "typecase" "printer" "level" "inside-pre?" "mix?" "simple?" "jml" "context")}
        {Lisp-Entry "render-text" #f 87 19 87 30 ("format" "255" ">" "if" "char->integer" "n" "c" "function" "iterate" "get-text" "text" "let" "printer" "jml" "context")}
        {Lisp-Entry "render-node" #f 97 11 97 22 ("render-tag" "get-tag" "tag" "let" "self" "render" "JML-Node" "is-not?" "if" "printer" "level" "inside-pre?" "mix?" "simple?" "jml" "context")}
        {Lisp-Entry "render-tag" #f 104 11 104 21 ("end-tag" "Separated2-Tags" "render-children" "1" "+" "else" "body" "html" "case" "new-level" "let" "Empty-Tags" "get-properties" "render-value" "render-string" ":string" "car" "eq?" "pair?" "null?" "if" "value" "property" "function" "for-each-property" "*" "unless" "output" "not" "Separated-Tags" "and" "when" "or" "Pre-Tags" "pre?" "Mix-Tags" "memq?" "mix?" "composite?" "preferences" "get-tab-size" "tab" "let*" "printer" "level" "inside-pre?" "parent-mix?" "simple?" "tag" "jml" "context")}
        {Lisp-Entry "render-string" #f 141 19 141 32 ("cdr" "string" "function" "for-each" "output" "value" "property" "printer" "context")}
        {Lisp-Entry "render-value" #f 149 19 149 31 ("output" "value" "property" "printer" "context")}
        {Lisp-Entry "render-children" #f 153 11 153 26 ("get-children" "render-jml" "sub" "function" "for-each" "printer" "level" "inside-pre?" "mix?" "simple?" "jml" "context")}
        {Lisp-Entry "output" #f 159 11 159 17 ("output-text" "format" "apply" "text" "let" "parameters" "format-string" "printer" "context")}
        {Lisp-Entry "output-text" #f 164 19 164 30 ("output-to" "text" "printer" "context")}
        {Lisp-Entry "output-to" #f 168 11 168 20 ("format" "when" "text" "printer")}
        {Lisp-Entry "end-tag" #f 173 11 173 18 ("format" "tag")}}}})
"_jml"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "_jml.jazz"} 1251042041
    {Lisp-Entry "jazz.jml" #f 37 9 37 17 ("jazz")
      {Lisp-Entry "Forms" #f 55 12 55 17 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-form" #f 59 21 59 34 ("Forms" "table-set!" "form" "class-locator")}
      {Lisp-Entry "get-registered-form" #f 62 21 62 40 ("Forms" "table-ref" "class-locator")}
      {Lisp-Entry "Autoclasses" #f 71 12 71 23 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-autoclass" #f 75 20 75 33 ("Autoclasses" "table-ref" "name")}
      {Lisp-Entry "set-autoclass" #f 79 20 79 33 ("Autoclasses" "table-set!" "class" "name")}
      {Lisp-Entry "register-autoclass" #f 83 20 83 38 ("type-name" "identifier-name" "set-autoclass" "class")}
      {Lisp-Entry "autoload-class" #f 87 20 87 34 ("autoload" "get-autoload" "when" "get-autoclass" "either" "name")}
      {Lisp-Entry "parse-jml" #f 98 20 98 29 ("parse" "preferences:" "JML-Parser" "parser" "JML-Preferences" "either" "new" "pref" "let*" "parser-class" "parser-class:" "preferences-class" "preferences-class:" "jml")}
      {Lisp-Entry "transform-jml" #f 109 20 109 33 ("transform" "transformation" "node")}
      {Lisp-Entry "render-jml" #f 118 20 118 30 ("render" "JML-Renderer" "renderer" "JML-Preferences" "either" "new" "pref" "let*" "renderer-class" "renderer-class:" "preferences-class" "preferences-class:" "printer" "node")}
      {Lisp-Entry "parse-jml-properties/children" #f 129 20 129 49 ("cdr" "cddr" "cadr" "enqueue" "new-queue" "set!" "when" "begin" "keyword?" "not" "and" "car" "element" "queue-list" "values" "null?" "if" "scan" "iterate" "content" "properties" "let" "list")}
      {Lisp-Entry "get-jml-property" #f 150 20 150 36 ("cddr" "set!" "cadr" "continuation-return" "car" "eqv?" "when" "not-null?" "while" "return" "function" "continuation-capture" "scan" "let" "not-found" "not-found:" "property" "list")}
      {Lisp-Entry "jml->form" #f 169 20 169 29 ("node->form" "parse" "node" "JML-Parser" "new" "parser" "let*" "expr")}
      {Lisp-Entry "jml->form>>" #f 175 20 175 31 ("setup-toplevel-context" "jml->form" "form" "let" "class" "expr")}
      {Lisp-Entry "read-jml" #f 181 20 181 28 ("read" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "file")}
      {Lisp-Entry "node->form" #f 186 20 186 30 ("cdr" "car" "set-children" "install" "'install" "client-form" "'client-form" "set-property" "begin" "null?" "branch-model?" "set-parent-value" "get-children" "map" "children" "extract-node-properties" "properties:" "tag-module" "'tag-module" "tag-module:" "tag-symbolic?:" "name:" "model-name:" "action:" "textual?:" "Form" "form" "'name" "get-property" "butlast" "string->symbol" "name" "memq?" "model-name" "new" "'new" "else" "locate" "'locate" "modify" "'modify" "eq?" "cond" "action" "or" "tag-symbolic?" "" "'" "tag-locate?" "ends-with?" "!" "'!" "neq?" "and" "tag-modify?" "symbol->string" "tag-name" "get-tag" "tag" "let*" "JML-Text" "is?" "if" "parent" "function" "node->form" "letrec" "node")}
      {Lisp-Entry "extract-node-properties" #f 219 13 219 36 ("get-output" "get-properties" "put" "tag-module" "tag-symbolic?" "name" "memq?" "not" "when" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let" "node")}
      {Lisp-Entry "form->node" #f 229 20 229 30 ("add-client-form" "branch-model?" "set-children" "set-properties" "get-children" "map" "children" "extract-form-properties" "properties" "JML-Element" "element" "" "'" "!" "'!" "new" "'install" "install" "locate" "modify" "case" "symbol->string" "string-append" "string->symbol" "tag" "get-tag-symbolic?" "symbolic?" "get-name" "name" "get-model-name" "model-name" "get-action" "action" "let*" "JML-Text" "is?" "if" "parent" "function" "form->node" "letrec" "form")}
      {Lisp-Entry "branch-model?" #f 252 13 252 26 ("Test-Model" "Test-Branch-Aux" "Test-Branch" "Heading-Slide" "Concept-Slide" "Documentation-Slide" "Basic-Slide" "Slide" "Design-Model" "Design-Diagram" "Branch" "memq?" "model-name")}
      {Lisp-Entry "add-client-form" #f 256 13 256 28 ("form->node" "cons" "not" "if" "'client-form" "get-property" "client-form" "let" "children" "form")}
      {Lisp-Entry "extract-form-properties" #f 263 13 263 36 ("get-output" "get-properties" "client-form" "'client-form" "neq?" "field-name" "property?" "if" "value" "property" "function" "for-each-property" "'tag-module" "'name" "put" "not" "and" "when" "get-tag-module" "tag-module" "get-name" "name" "List-Factory" "new" "fact" "let" "symbolic?" "form")}
      {Lisp-Entry "load-jml" #f 287 20 287 28 ("preferences:" "JML-Parser" "parser" "JML-Preferences" "new" "pref" "let*" "reader" "function" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "file")}}})
"_syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "syntax" "_syntax.jazz"} 1246650283
    {Lisp-Entry "jazz.jml.syntax" #f 37 19 37 34 ("jazz")
      {Lisp-Entry "pattern" #f 45 15 45 22 (",@rest" "method" "rest")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.jml" "src" "jazz" "jml" "autoload.jazz"} 1238328024
    {Lisp-Entry "jazz.jml.autoload" #f 37 19 37 36 ("jazz")}})
