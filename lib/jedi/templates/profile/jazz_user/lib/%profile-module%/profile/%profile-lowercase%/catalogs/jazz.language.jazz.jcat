"Class-Browser"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "tools" "Class-Browser.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.tools.Class-Browser" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Class-Browser" #f 50 7 50 20 ("419" "width:" "display-images?:" "on-double-click" "double-click-handler:" ":icons" "portfolio:" "multiple-selection?:" "classes" "document" "562" "391" "35" "classes-border" "on-browse" "action-handler:" "22" "120" "7" "272" "title:" "browse" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "left-padding:" "name" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "border-type:" "19" "250" "9" "2" "Point" "position:" "name-border" "name:" "599" "395" "Dimension" "size:" "View")
        {Lisp-Entry "text" #f 53 12 53 16 ()}
        {Lisp-Entry "host-icon" #f 77 16 77 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 81 16 81 26 ()}
        {Lisp-Entry "host-position" #f 85 16 85 29 ("20" "90" "Point")}
        {Lisp-Entry "host-size" #f 89 16 89 25 ("600" "395" "Dimension")}
        {Lisp-Entry "install-in-host" #f 93 11 93 26 ("name" "'name" "locate" "acquire-focus" "nextmethod" "host")}
        {Lisp-Entry "get-text" #f 103 18 103 26 ("name" "'name" "locate" "get-string-content")}
        {Lisp-Entry "set-text" #f 107 18 107 26 ("either" "name" "'name" "locate" "set-string-content" "value")}
        {Lisp-Entry "guest-actions" #f 117 11 117 24 ("nextmethod" "class-browser" "'class-browser" "find-actions" "cons")}
        {Lisp-Entry "resize" #f 127 11 127 17 ("classes-border" "'classes-border" "size-figure" "0" "browse" "'browse" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-browse" #f 133 11 133 20 ("root:" "browse-inheritance-tree" "function" ":wait" "with-cursor" "name" "'name" "locate" "get-string-content" "format" "message-box" "not" "if" "get-root-class" "root" "let" "evt")}
        {Lisp-Entry "on-return-press" #f 142 11 142 26 ("on-browse" "evt")}
        {Lisp-Entry "on-double-click" #f 146 11 146 26 ("type-name" "identifier-name" "edit-definitions" "get-application" "appl" "get-user-data" "type" "get-row" "row" "when" "get-single-selection" "selection" "get-sender" "tree" "let*" "evt")}
        {Lisp-Entry "get-root-class" #f 156 11 156 25 ("autoload" "get-autoload" "when" "string->symbol" "let" "Object" "empty-string?" "if" "get-string-content" "string" "name" "'name" "locate" "text" "let*")}
        {Lisp-Entry "browse-inheritance-tree" #f 171 11 171 34 ("remove-every-row" "with-update-locked" "symbol->string" "key:" "type-descendants" "string<?" "sort" "subtype" "function" "for-each" "downward" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "essay" "father" "type-ascendant" "ascendant" "type-name" "->string" "title" "expanded" "'expanded" "state" "let*" "type" "upward" "define" "classes" "'classes" "locate" "tree" "let" "Object" "root" "root:")}
        {Lisp-Entry "selected-categories" #f 201 11 201 30 ("get-row" "get-user-data" "rank" "function" "map" "get-selection" "selection" "classes" "'classes" "locate" "tree" "let*")}
        {Lisp-Entry "selected-files" #f 209 11 209 25 ("selected-categories" "type-name" "get-manifest-source" "category" "function" "collect")}}}})
"Class-Browser-Actions"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "tools" "Class-Browser-Actions.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.tools.Class-Browser-Actions" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "Class-Browser-Actions" #f 45 7 45 28 ("Actions")}}})
"Event-Spy"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "spy" "Event-Spy.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.spy.Event-Spy" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Event-Categories" #f 53 10 53 26 ("unknown" "menu" "focus" "clipboard" "keyboard" "mouse" "action" "paint" "window" "component" "Bitmap-Resource" "general")}
      {Lisp-Entry "Event-Classes" #f 67 10 67 23 ("Selection-Event" "Print-Event" "Paint-Event" "mouse" "Mouse-Event" "Keyboard-Event" "Focus-Event" "focus" "Edition-Event" "paint" "Draw-Event" "window" "Cursor-Event" "Component-Event" "general" "Break-Event" "component" "Action-Event")}
      {Lisp-Entry "Event-Spy" #f 87 7 87 16 ("213" "226" "toplevel-controls?:" "140" "width:" "title:" "tree" "tree-header" "content" "tree-scroller" "tree-border" "name:" "Spy-View")
        {Lisp-Entry "host-title" #f 109 16 109 26 ()}
        {Lisp-Entry "host-position" #f 113 16 113 29 ("152" "154" "Point")}
        {Lisp-Entry "host-size" #f 117 16 117 25 ("339" "736" "Dimension")}
        {Lisp-Entry "spy-domain" #f 126 11 126 21 ("views" "'views")}
        {Lisp-Entry "spy" #f 130 11 130 14 ("self" "Spyer" "new" "set-event-consumer" "get-event-consumer" "old-consumer" "set!" "Event-Consumer" "is?" "when" "client")}
        {Lisp-Entry "unspy" #f 136 11 136 16 ("old-consumer" "set-event-consumer" "Event-Consumer" "is?" "when" "client")}
        {Lisp-Entry "incoming-event" #f 141 11 141 25 ("slowdown-quantum" "sleep" "slowdown?" "update-view" "ensure-at-end" "list" "children:" "add-row" "get-visible-count" "item" "5" "*" "make-string" "format" "c3" "c2" "get-kind" "Tree-Label" "c1" "image:" "title:" "Tree-Node" "new" "c0" "parameters" "Event-Categories" "assq" "cdr" "image" "get-tree" "tree" "all" "'all" "category" "eq?" "or" "when" "unknown" "'unknown" "second" "if" "cat" "car" "key:" "Event-Classes" "find-in" "info" "class-of" "type-name" "type" "let*" "evt" "client" "window" "level")}
        {Lisp-Entry "incoming-result" #f 162 11 162 26 ("result" "item" "level")}}
      {Lisp-Entry "Spyer" #f 171 7 171 12 ("Event-Consumer" "Object")
        {Lisp-Entry "level" #f 174 8 174 13 ("0")}
        {Lisp-Entry "spy-window" #f 175 8 175 18 ()}
        {Lisp-Entry "client" #f 176 8 176 14 ()}
        {Lisp-Entry "get-event-consumer" #f 179 11 179 29 ()}
        {Lisp-Entry "set-event-consumer" #f 180 11 180 29 ("consumer")}
        {Lisp-Entry "initialize" #f 183 11 183 21 ("client" "spy-window" "set!" "nextmethod" "clt" "wnd")}
        {Lisp-Entry "deliver-event" #f 189 11 189 24 ("decrease!" "increase!" "client" "level" "spy-window" "incoming-event" "evt" "proc" "target" "handler")}}}})
"Inspector"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "inspector" "Inspector.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.inspector.Inspector" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Inspector" #f 49 7 49 16 ("title:" "name" "name:" ":icons" "portfolio:" "row" "selection-mode:" "multiple-selection?:" "value" "filled-column:" "Tree-View")
        {Lisp-Entry "process" #f 52 12 52 19 ("set-process" "get-process")}
        {Lisp-Entry "client" #f 53 12 53 18 ("set-client" "get-client")}
        {Lisp-Entry "sort?" #f 54 12 54 17 ("set-sort?" "get-sort?")}
        {Lisp-Entry "get-process" #f 68 18 68 29 ("process")}
        {Lisp-Entry "set-process" #f 72 18 72 29 ("process" "set!" "value")}
        {Lisp-Entry "get-client" #f 76 18 76 28 ("client")}
        {Lisp-Entry "set-client" #f 80 18 80 28 ("present-client" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "get-sort?" #f 86 18 86 27 ("sort?")}
        {Lisp-Entry "set-sort?" #f 90 18 90 27 ("sort?" "set!" "value")}
        {Lisp-Entry "update-row" #f 99 11 99 21 ("address" "debuggee" "serial->object" "inspect" "present" "get-local-process" "either" "process" "let" "get-user-data" "kind" "serial" "bind" "row")}
        {Lisp-Entry "present-client" #f 110 11 110 25 ("inspect" "root-row" "present" "kind" "data" "bind" "when" "remove-every-row" "function" "with-update-locked" "client")}
        {Lisp-Entry "present" #f 119 11 119 18 ("cons" "user-data:" "Tree-Label" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "collapsed" "'collapsed" "dynamic" "'dynamic" "if" "state" "let" "kind" "more?" "presented" "address" "name" "bind-optionals" "info" "for-each" "function" "with-update-locked" "values" "row")}
        {Lisp-Entry "inspect" #f 134 26 134 33 ("inspect-value" ":value" "case" "kind" "data")}}}})
"Inspector-View"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "inspector" "Inspector-View.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.inspector.Inspector-View" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Inspector-View" #f 48 7 48 21 ("261" "value" "170" "width:" "name" "row" "selection-mode:" "inspector" "content" "name:" "flat?:" "hscroll?:" "vscroll?:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "process" #f 51 12 51 19 ("set-process" "get-process")}
        {Lisp-Entry "client" #f 52 12 52 18 ("set-client" "get-client")}
        {Lisp-Entry "host-title" #f 71 16 71 26 ()}
        {Lisp-Entry "host-position" #f 75 16 75 29 ("60" "378" "Point")}
        {Lisp-Entry "host-size" #f 79 16 79 25 ("641" "446" "Dimension")}
        {Lisp-Entry "get-process" #f 88 18 88 29 ("inspector" "'inspector" "locate" "get-process")}
        {Lisp-Entry "set-process" #f 92 18 92 29 ("inspector" "'inspector" "locate" "set-process" "process")}
        {Lisp-Entry "get-client" #f 96 18 96 28 ("inspector" "'inspector" "locate" "get-client")}
        {Lisp-Entry "set-client" #f 100 18 100 28 ("inspector" "'inspector" "locate" "set-client" "update-title" "client")}
        {Lisp-Entry "Max-Title" #f 110 14 110 23 ("50")}
        {Lisp-Entry "update-title" #f 114 11 114 23 ("0" "subseq" "set-title" "Max-Title" "cardinality" "<" "if" "car" "format" "title" "let" "client")}}}})
"Jazz-Code-Location"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "text" "Jazz-Code-Location.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Code-Location" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Jazz-Code-Location" #f 48 7 48 25 ("Code-Location")
        {Lisp-Entry "module-name" #f 51 8 51 19 ()}
        {Lisp-Entry "sublocation" #f 52 8 52 19 ()}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("setup-location" "nextmethod" "location")}
        {Lisp-Entry "setup-location" #f 60 11 60 25 ("last" "cons" "butlast" "sublocation" "module-name" "set!" "begin" "find-module-source" "compose-name" "apply" "name" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "null?" "if" "cdr" "sub" "car" "split-identifier" "path" "iterate" "let" "location")}
        {Lisp-Entry "print" #f 74 11 74 16 ("format" "sublocation" "module-name" "and" "when" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "edit" #f 82 11 82 15 ("focus-host" "set-visible?" "bring-to-front" "head" "'head" "force-vertical:" "ensure-displayed" "ensure-displayed?:" "set-selection" "range" "text" "frame" "receive" "when" "find-location" "location" "let" "error?" "error?:" "activate-focus?" "activate-focus?:" "workspace" "workspace:")}
        {Lisp-Entry "find-source" #f 95 18 95 29 ("module-name" "find-module-source")}
        {Lisp-Entry "find-location" #f 99 18 99 31 ("values" "cons" "toplevel-location:" "sublocation" "location-range" "range" "Jazz-Text-View" "is?" "get-guest" "text" "when" "module-name" "find-module" "frame" "let" "error?" "error?:" "workspace" "workspace:")}
        {Lisp-Entry "find-module" #f 109 11 109 22 ("location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "when" "visible?:" "Jazz-Text-View" "class:" "edit-document" "either" "find-module-source" "source" "get-application" "appl" "let*" "error?" "error?:" "workspace" "workspace:" "module-name")}}}})
"Jazz-Explorer"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "text" "Jazz-Explorer.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Explorer" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Jazz-Explorer" #f 49 7 49 20 ("Lisp-Explorer")
        {Lisp-Entry "Modifiers" #f 52 14 52 23 ("value" "call" "exec" "post" "deprecated" "unimplemented" "synchronized" "inline" "abstract" "chained" "virtual" "final" "primitive" "public" "protected" "package" "private" "meta" "dialect")}
        {Lisp-Entry "get-modifiers" #f 56 11 56 24 ("Modifiers")}
        {Lisp-Entry "get-syntax" #f 60 11 60 21 ("jazz" "'jazz")}
        {Lisp-Entry "forward-in" #f 69 18 69 28 ("set-end" "exit-list" "intern-marked-symbol" "package" "forward-expr" "skip-forward" "enter-list" "and" "if" "get-end" "copy" "e" "let")}
        {Lisp-Entry "forward-category" #f 81 18 81 34 ("collect-categories-keywords" "list" "global-value" "symbol-bound?" "essay" "category" "get-end" "end:" "get-start" "start:" "get-marked" "format" "message:" "Explore-Error" "new" "signal" "in-manifest?" "not" "or" "name" "symbol" "'symbol" "get-kind" "eq?" "forward-modifiers" "meta?" "intern-marked-symbol" "kind" "let" "remotable-stub" "interface" "class" "find-marked-symbol" "memq?" "forward-expr" "enter-list" "and" "when")}
        {Lisp-Entry "forward-category-keywords" #f 97 11 97 36 ("set-end" "set-start" "when" "implements" "extends" "metaclass" "remotable-stub" "interface" "class" "library" "module" "memq?" "or" "find-marked-symbol" "set!" "begin" "forward-expr" "and" "while" "get-end" "previous" "keyword" "let" "proc")}
        {Lisp-Entry "collect-categories-keywords" #f 113 11 113 38 ("get-output" "get-marked" "read-string-element" "resolve-categories" "put" "keyword" "function" "forward-category-keywords" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "resolve-categories" #f 122 11 122 29 ("load" "map" "autoload" "symbol?" "if" "names")}
        {Lisp-Entry "forward-location" #f 133 18 133 34 ("forward-numeric" "forward-definition" "symbol?" "forward-form" ":form" "forward-new-form" ":new-form" "meta" "'meta" "eq?" "unless" "else" "either" "location:" "bad" "'bad" "kind:" "Location-Error" "new" "signal" "enter-composite" "not" "1" "and" "cdr" "set!" "forward-expr" "forward" "eqv?" "cond" "0" "char-forward" "c0" "forward-whites" "get-start" "set-end" "car" "ref" "not-null?" "while" "scan" "let" "toplevel-location" "toplevel-location:" "location")}
        {Lisp-Entry "forward-new-form" #f 168 11 168 27 ("get-start" "set-end" "forward-category-keywords" "toplevel-location" "toplevel-location:")}
        {Lisp-Entry "forward-form" #f 173 11 173 23 ("'form" "either" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "forward-valid-expr" "when" "form" "form-expr?" "not" "while" "toplevel-location" "toplevel-location:")}
        {Lisp-Entry "forward-definition" #f 179 11 179 29 ("either" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "forward-valid-expr" "when" "definition-only-name" "neq?" "definition-expr?" "not" "or" "while" "toplevel-location" "toplevel-location:" "name")}
        {Lisp-Entry "forward-numeric" #f 186 11 186 26 ("decrease!" "either" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "forward-valid-expr" "not" "when" "0" ">=" "while" "toplevel-location" "toplevel-location:" "n")}
        {Lisp-Entry "forward-valid-expr" #f 193 11 193 29 ("else" "named-comment" "'named-comment" "eq?" "cond" "forward-expr" "kind" "let")}
        {Lisp-Entry "jazz-declaration?" #f 207 18 207 35 ("remotable-stub" "interface" "class" "library" "module" "form-expr?")}
        {Lisp-Entry "jazz-module-parameters" #f 211 14 211 36 ("require")}
        {Lisp-Entry "jazz-library-parameters" #f 214 14 214 37 ()}
        {Lisp-Entry "jazz-class-keywords" #f 217 14 217 33 ("attributes" "implements" "extends" "metaclass")}
        {Lisp-Entry "jazz-interface-keywords" #f 220 14 220 37 ("attributes" "extends" "metaclass")}
        {Lisp-Entry "jazz-declaration" #f 224 18 224 34 ("set-end" "set-start" "Range$Cell$" "new" "prog1" "jazz-forward-declaration" "end" "e" "start" "copy" "s" "let")}
        {Lisp-Entry "jazz-forward-declaration" #f 233 18 233 42 ("jazz-forward-interface-declaration" "interface" "jazz-forward-class-declaration" "class" "jazz-forward-library-declaration" "library" "jazz-forward-module-declaration" "module" "case" "jazz-symbol" "type" "let" "forward-expr" "enter-list" "start" "set-end")}
        {Lisp-Entry "jazz-forward-module-declaration" #f 245 11 245 42 ("jazz-module-parameters" "jazz-forward-declaration-parameters" "forward-expr" "forward-modifiers")}
        {Lisp-Entry "jazz-forward-library-declaration" #f 251 11 251 43 ("jazz-library-parameters" "jazz-forward-declaration-parameters" "forward-expr" "forward-modifiers")}
        {Lisp-Entry "jazz-forward-class-declaration" #f 258 11 258 41 ("jazz-class-keywords" "jazz-forward-declaration-keywords" "forward-expr" "forward-modifiers")}
        {Lisp-Entry "jazz-forward-interface-declaration" #f 264 11 264 45 ("jazz-interface-keywords" "jazz-forward-declaration-keywords" "forward-expr" "forward-modifiers")}
        {Lisp-Entry "jazz-forward-declaration-parameters" #f 270 11 270 46 ("exit-list" "begin" "memq?" "jazz-symbol" "expr" "symbol" "'symbol" "enter-list" "get-end" "e" "get-start" "s" "list" "'list" "kind" "eq?" "if" "forward-expr" "set-end" "done" "define" "end" "copy" "finish" "iterate" "let" "parameters")}
        {Lisp-Entry "jazz-forward-declaration-keywords" #f 293 11 293 44 ("begin" "memq?" "jazz-symbol" "expr" "symbol" "'symbol" "kind" "eq?" "if" "forward-expr" "set-end" "done" "define" "end" "copy" "finish" "iterate" "let" "keywords")}
        {Lisp-Entry "jazz-symbol" #f 309 11 309 22 ("get-marked" "string->symbol")}
        {Lisp-Entry "Jazz-Toplevels" #f 318 14 318 28 ("pattern" "datacontainer" "attributes" "java-method" "java-external" "com-method" "com-external" "com-interface" "com-class" "c-external" "external" "intrinsic" "specific" "generic" "c-definition" "c-structure" "structure" "c-type" "c-include" "c-enumeration" "c-constant" "global" "enumeration" "constant" "form" "property" "slot" "inline" "method" "syntax" "macro" "definition" "export" "import" "require" "remotable-stub" "interface" "class" "library" "module")}
        {Lisp-Entry "definition-name?" #f 322 11 322 27 ("Jazz-Toplevels" "memq?" "name")}
        {Lisp-Entry "walk-declaration" #f 331 11 331 27 ("exit-list" "unless" "walk-unknown" "else" "walk-datacontainer" "datacontainer" "walk-java-method" "java-method" "walk-java-external" "java-external" "walk-com-external" "com-external" "c-external" "walk-external" "external" "walk-intrinsic" "intrinsic" "walk-specific" "specific" "walk-generic" "generic" "walk-c-definition" "c-definition" "walk-c-structure" "c-structure" "walk-structure" "structure" "walk-type" "c-type" "walk-enumeration" "enumeration" "walk-constant" "constant" "walk-c-include" "c-include" "walk-c-named-declare" "c-named-declare" "walk-c-declare" "c-declare" "walk-c-initialize" "c-initialize" "walk-c-enumeration" "c-enumeration" "walk-c-constant" "c-constant" "walk-global" "global" "walk-form" "form" "walk-property" "property" "c-slot" "walk-slot" "slot" "inline" "c-method" "pattern" "walk-method" "method" "syntax" "macro" "walk-macro" "%macro" "walk-define-macro" "define-macro" "walk-specialize" "specialize" "walk-definition" "definition" "walk-define" "define" "walk-attributes" "walk-native" "native" "walk-properties" "properties" "walk-proclaim" "proclaim" "walk-declare" "declare" "import" "export" "require" "profiles" "products" "project" "install" "walk-import" "root" "package" "repository" "remotable-stub" "interface" "class" "walk-category" "walk-begin" "begin" "case" "code" "'code" "start" "attributes" "includes" "exports" "imports" "dialect" "module" "library" "on" "has" "implements" "extends" "metaclass" "find-marked-symbol" "memq?" "symbol" "'symbol" "kind" "eq?" "and" "forward-expr" "if" "end" "get-row" "=" "not" "or" "when" "enter-list" "list?" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-modifiers" #f 411 11 411 25 ("set!" "start" "get-modifiers" "find-marked-symbol" "memq?" "forward-constituent" "get-row" "=" "not" "or" "jazz-constituent?" "and" "when" "0" "char-forward" "c0" "set-start" "forward-whites" "iterate" "end" "copy" "old" "let" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-begin" #f 428 11 428 21 ("walk-declarations" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-category" #f 432 18 432 31 ("walk-declarations" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-import" #f 442 11 442 22 ("end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-declare" #f 446 11 446 23 ("end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-proclaim" #f 450 11 450 24 ("end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-properties" #f 454 11 454 26 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-native" #f 460 11 460 22 ("walk-expressions" "symbol-documented?" "set!" "get-marked" "name" "get-row" "=" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "walk-modifiers" "end" "start" "entry" "string-length" "1" "+" "substring" "not" "if" "reversed?:" "find" "pos" "let" "str" "parse-identifier" "define" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-attributes" #f 479 11 479 26 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define" #f 485 11 485 22 ("walk-declarations" "exit-list" "walk-parameters" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-definition" #f 503 11 503 26 ("code" "'code" "walk-expressions" "exit-list" "walk-parameters" "or" "enter-list" "else" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "not" "cond" "0" "char-forward" "eqv?" "list?" "=" "when" "forward-whites" "walk-modifiers" "start" "end" "get-row" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-specialize" #f 525 11 525 26 ("code" "'code" "walk-expressions" "exit-list" "walk-parameters" "or" "enter-list" "else" "set!" "cond" "list?" "symbol-documented?" "get-marked" "as" "'as" "find-marked-symbol" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "0" "char-forward" "eqv?" "not" "=" "when" "forward-whites" "walk-modifiers" "start" "end" "get-row" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define-macro" #f 553 11 553 28 ("walk-declarations" "exit-list" "code" "'code" "walk-expressions" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-macro" #f 571 11 571 21 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-method" #f 586 18 586 29 ("code" "'code" "walk-expressions" "exit-list" "walk-parameters" "forward-whites" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-slot" #f 602 11 602 20 ("walk-expressions" "code" "'code" "walk-expression" "accessors" "setter" "getter" "initialize" "memq?" "if" "while" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "=" "when" "forward-whites" "walk-modifiers" "start" "end" "get-row" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-property" #f 620 11 620 24 ("walk-expressions" "code" "'code" "walk-expression" "accessors" "setter" "getter" "initialize" "memq?" "if" "while" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-form" #f 635 11 635 20 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-global" #f 641 11 641 22 ("find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-constant" #f 650 11 650 26 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-enumeration" #f 661 11 661 29 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-initialize" #f 672 11 672 28 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-declare" #f 678 11 678 25 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-named-declare" #f 684 11 684 31 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-include" #f 690 11 690 25 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-constant" #f 696 11 696 24 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-enumeration" #f 707 11 707 27 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-type" #f 718 11 718 20 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-structure" #f 729 11 729 25 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-structure" #f 740 11 740 27 ("walk-expressions" "exit-list" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "0" "char-forward" "eqv?" "list?" "=" "when" "forward-whites" "walk-modifiers" "start" "end" "get-row" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-definition" #f 759 11 759 28 ("walk-expressions" "exit-list" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "0" "char-forward" "eqv?" "list?" "=" "when" "forward-whites" "walk-modifiers" "start" "end" "get-row" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-generic" #f 778 11 778 23 ("walk-expressions" "exit-list" "walk-parameters" "get-row" "=" "or" "enter-list" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "0" "char-forward" "eqv?" "not" "if" "forward-whites" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-specific" #f 796 11 796 24 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-intrinsic" #f 810 11 810 25 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "symbol" "'symbol" "kind" "eq?" "enter-list" "entered?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-external" #f 827 11 827 24 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "symbol" "'symbol" "kind" "eq?" "and" "enter-list" "entered?" "forward-expr" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-com-external" #f 844 11 844 28 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "symbol" "'symbol" "kind" "eq?" "enter-list" "entered?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-java-external" #f 861 11 861 29 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "symbol" "'symbol" "kind" "eq?" "and" "enter-list" "entered?" "forward-expr" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-java-method" #f 878 11 878 27 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "symbol" "'symbol" "kind" "eq?" "and" "enter-list" "entered?" "forward-expr" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-datacontainer" #f 895 11 895 29 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "forward-expr" "when" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-unknown" #f 905 11 905 23 ("walk-expressions" "code" "'code" "walk-expression" "when" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "symbol-documentation" #f 911 11 911 31 ("get-definition" "and" "when" "doc" "symbol")}
        {Lisp-Entry "symbol-documented?" #f 916 11 916 29 ("symbol-documentation" "doc" "symbol")}
        {Lisp-Entry "highlight-range" #f 925 18 925 33 ("edit?:" "break" "update-view" "get-range" "text" "set-selection")}}}})
"Jazz-File"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "builder" "Jazz-File.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.builder.Jazz-File" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Jazz-File" #f 46 7 46 16 ("Project-File")
        {Lisp-Entry "tester?" #f 49 12 49 19 ("generate")}
        {Lisp-Entry "print" #f 52 11 52 16 ("name" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-product" #f 66 18 66 29 ("project" "Product" "self" "is?" "if")}
        {Lisp-Entry "get-class-presentation" #f 79 16 79 38 ()}
        {Lisp-Entry "property-presentation" #f 83 16 83 37 ("nextmethod" "else" "tester?" "field-name" "case" "property")}
        {Lisp-Entry "can-rename-component?" #f 89 11 89 32 ()}
        {Lisp-Entry "get-categorized-properties" #f 93 11 93 37 ("tester?" "build?" "source")}
        {Lisp-Entry "get-row-instance" #f 97 11 97 27 ("nextmethod" "else" "Boolean-Row" "new" "tester?" "field-name" "case" "property")}}}})
"Jazz-Parser"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "parser" "Jazz-Parser.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.parser.Jazz-Parser" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Jazz-Parser" #f 47 7 47 18 ("Lisp-Parser")
        {Lisp-Entry "explorer-class" #f 50 11 50 25 ("Jazz-Explorer" "file")}
        {Lisp-Entry "text-view-class" #f 54 11 54 26 ("Jazz-Text-View")}}}})
"Jazz-Plain-Text-View"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "text" "Jazz-Plain-Text-View.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Plain-Text-View" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Jazz-Plain-Text-View" #f 46 7 46 27 ("Plain-Text-View")
        {Lisp-Entry "install" #f 49 11 49 18 ("get-comment-color" "Comment" "'Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "colorize-comments" #f 61 11 61 28 ("Title" "'Title" "4" "+" "Comment" "'Comment" "stylize" "not" "if" "title?" "end" "start" "function" "for-each-comment" "text-beginning" "end:" "self" "Jazz-Explorer" "new" "expl" "let" "jazz" "'jazz" "type-heuristic" "eq?" "when" "rest")}
        {Lisp-Entry "recolorize-text" #f 72 11 72 26 ("recolorize-row" "for-each" "1" "+" "get-row" "naturals" "range" "let" "jazz" "'jazz" "type-heuristic" "eq?" "when" "end-row" "start")}
        {Lisp-Entry "recolorize-row" #f 78 11 78 25 ("recolorize-comments" "row")}
        {Lisp-Entry "recolorize-comments" #f 82 11 82 30 ("Title" "'Title" "Cell" "new" "Comment" "'Comment" "stylize" "begin" "title-comment-string" "subseq" "=" "<" "if" "4" "+" "title-end" "let" "20" "<=" "when" "search" "and" "comment" "syntax" "comment-string" "cardinality" "len" "paragraph-string" "line" "let*" "row")}}}})
"Jazz-Syntax"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "syntax" "Jazz-Syntax.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.syntax.Jazz-Syntax" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Jazz-Syntax" #f 47 7 47 18 ("Lisp-Syntax")
        {Lisp-Entry "translate-key" #f 55 11 55 24 ("translate-lisp-key" "jazz-text" "documents" "get-preferences" "get-translate-keys?" "not" "if" "key")}
        {Lisp-Entry "get-constituent-test" #f 66 11 66 31 ("jazz-constituent?")}}}})
"Jazz-Text-Actions"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "text" "Jazz-Text-Actions.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Text-Actions" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Jazz-Text-Actions" #f 47 7 47 24 ("on-set-read/write" "set-read/write" "on-remove-break" "remove-break" "F9" "on-add-break" "add-break" "F12" ":shift" "on-edit-documentation" "edit-documentation" "F1" "on-present-documentation" "present-documentation" ":control" "Shortcut" "shortcut:" "on-design-form" ":focus" "Event-Handler" "action-handler:" "design-form" "name:" "Actions")}}})
"Jazz-Text-Preferences"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "text" "Jazz-Text-Preferences.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Text-Preferences" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Jazz-Text-Preferences" #f 51 7 51 28 ("completions:" "Dark-Orange" "feature-color:" "quotation-color:" "named-string-color:" "delimited-string-color:" "string-color:" "boolean-color:" "number-color:" "char-color:" "Ochre" "literal-color:" "specifier-color:" "Dark-Purple" "tag-color:" "keyword-color:" "undocumented-declaration-color:" "Dark-Green" "documented-declaration-color:" "Dark-Blue" "declaration-keyword-color:" "named-comment-color:" "Text-Gray" "expr-comment-color:" "Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Lisp-Text-Preferences")
        {Lisp-Entry "named-comment-color" #f 54 12 54 31 ("generate")}
        {Lisp-Entry "documented-declaration-color" #f 55 12 55 40 ("generate")}
        {Lisp-Entry "undocumented-declaration-color" #f 56 12 56 42 ("generate")}
        {Lisp-Entry "literal-color" #f 57 12 57 25 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 241 11 241 37 ("translate-keys?" "string-color" "specifier-color" "keyword-color" "undocumented-declaration-color" "documented-declaration-color" "named-comment-color" "expr-comment-color" "comment-color" "title-color" "completions")}
        {Lisp-Entry "get-row-instance" #f 245 11 245 27 ("nextmethod" "else" "Boolean-Row" "translate-keys?" "Completion-List-Row" "completions" "Color-Row" "new" "string-color" "specifier-color" "keyword-color" "undocumented-declaration-color" "documented-declaration-color" "named-comment-color" "expr-comment-color" "comment-color" "title-color" "field-name" "case" "property")}}}})
"Jazz-Text-View"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "text" "Jazz-Text-View.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Text-View" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Jazz-Text-View" #f 58 7 58 21 ("tooltip?:" "Lisp-Text-View")
        {Lisp-Entry "install" #f 65 11 65 18 ("highlight:" "Break" "'Break" "Walk-Fatal" "'Walk-Fatal" "Orange" "Walk-Warning" "'Walk-Warning" "Red" "Color" "frame:" "Reference" "'Reference" "get-feature-color" "Feature" "'Feature" "get-literal-color" "Literal" "'Literal" "get-quotation-color" "Quotation" "'Quotation" "get-named-string-color" "Named-String" "'Named-String" "get-delimited-string-color" "Delimited-String" "'Delimited-String" "get-string-color" "String" "'String" "get-boolean-color" "Boolean" "'Boolean" "get-number-color" "Number" "'Number" "get-char-color" "Char" "'Char" "get-specifier-color" "Specifier" "'Specifier" "get-tag-color" "Tag" "'Tag" "get-keyword-color" "Keyword" "'Keyword" "get-undocumented-declaration-color" "Undocumented-Declaration" "'Undocumented-Declaration" "get-documented-declaration-color" "Documented-Declaration" "'Documented-Declaration" "get-declaration-keyword-color" "Declaration-Keyword" "'Declaration-Keyword" "get-named-comment-color" "Named-Comment" "'Named-Comment" "get-expr-comment-color" "Expr-Comment" "'Expr-Comment" "get-comment-color" "Comment" "'Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 93 16 93 29 ("jazz-text" "'jazz-text" "rest")}
        {Lisp-Entry "default-extension" #f 97 11 97 28 ()}
        {Lisp-Entry "extensions" #f 101 11 101 21 ()}
        {Lisp-Entry "new-syntax" #f 105 11 105 21 ("Jazz-Syntax" "new")}
        {Lisp-Entry "focus-actions" #f 114 11 114 24 ("nextmethod" "jazz-text" "'jazz-text" "find-actions" "cons")}
        {Lisp-Entry "get-context-menu" #f 124 11 124 27 ("layout-menu" "set-read/write" "'set-read/write" "locate" "set-visible?" "read/write?" "not" "or" "when" "get-moniker" "moniker" "get-controller" "controller" "Jazz-Text-Menu" "new" "menu" "let*")}
        {Lisp-Entry "on-design-form" #f 140 11 140 25 ("client:" "new-frame" "Manager-View" "View-Editor" "View" "is?" "editor-class" "new" "component" "set-visible?" "bring-to-front" "begin" "find-editor" "essay" "frame" "get-self-form" "form" "error" "Component" "subtype?" "not" "if" "autoload" "class" "current-category-name" "name" "let*" "on-design-form" "'on-design-form" "unimplemented" "evt")}
        {Lisp-Entry "find-editor" #f 158 11 158 22 ("get-children" "continuation-return" "get-form" "eq?" "and" "get-designer" "designer" "Editor-View" "get-guest" "guest" "Host-View" "is?" "when" "frame" "for-each" "return" "function" "continuation-capture" "get-stage" "stage" "let" "form")}
        {Lisp-Entry "on-copy-list" #f 173 11 173 23 ("length" "user-message" "push-clipboard-list" "get-selected-string" "read-string-content" ":reader" "->string" "object" "function" "map" "list" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "get-tooltip-context" #f 185 11 185 30 ("Label" "name:" "Font" "font:" "bounds:" "rect-height" "-10" "Point" "rect-position" "+" "position:" "text:" "view:" "Tooltip-Context" "in-rect?" "get-end" "get-col" "get-start" "get-row" "row-range-rect" "bounds" "present-location" "essay" "text" "range-location" "location" "get-range" "range" "symbol" "'symbol" "eq?" "get-kind" "kind" "let" "outer-composite?:" "composite?:" "outer-expr" "err" "Explore-Error" "catch" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "view->text" "pos" "let*" "debugging?" "Debugger" "'Debugger" "in-manifest?" "and" "when" "view")}
        {Lisp-Entry "default-preferences" #f 214 14 214 33 ("completions:" "Dark-Blue" "keyword-color:" "Dark-Green" "undocumented-declaration-color:" "documented-declaration-color:" "named-comment-color:" "Text-Gray" "expr-comment-color:" "Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "form>>")}
        {Lisp-Entry "preferences" #f 219 11 219 22 ("jazz-text" "documents" "get-preferences")}
        {Lisp-Entry "declaration-style" #f 223 11 223 28 ("Undocumented-Declaration" "'Undocumented-Declaration" "Documented-Declaration" "'Documented-Declaration" "if" "documented?")}
        {Lisp-Entry "colorize-tag" #f 229 11 229 23 ("Tag" "'Tag" "apply-coloring" "end" "start" "colorizer")}
        {Lisp-Entry "colorize-specifier" #f 233 11 233 29 ("Specifier" "'Specifier" "apply-coloring" "end" "start" "colorizer")}
        {Lisp-Entry "recolorize-row" #f 237 11 237 25 ("recolorize-named-comments" "nextmethod" "row")}
        {Lisp-Entry "recolorize-named-comments" #f 242 11 242 36 ("get-start" "Named-Comment" "'Named-Comment" "apply-style" "get-row" "=" "symbol" "'symbol" "eq?" "when" "get-end" "end" "forward-expr" "kind" "end:" "self" "explorer-class" "expl" "+" "Cell" "new" "pos" "1" "-" "element" "eqv?" ">" "and" "unless" "set!" "if" "start:" "search" "comment" "let" "not" "while" "done?" "0" "col" "cardinality" "len" "paragraph-string" "line" "let*" "row")}
        {Lisp-Entry "Specials" #f 266 12 266 20 ("xml>>" "xsl-transformation" "with-closed" "with" "while" "when" "unwind-protect" "unless" "typecase" "template" "syntax" "synchronize" "substitution" "structure" "specific" "repository" "remotable-stub" "receive" "prog1" "profile" "pattern" "parameterize" "package" "new" "module" "method" "macro" "library" "letrec" "let*" "let" "lambda" "jml>>" "jml" "interface" "inline" "in" "if" "generic" "function" "form>>" "form" "enumeration" "ecase" "dialect" "definition" "define" "datacontainer" "c-structure" "5" "c-definition" "c-enumeration" "c-constant" "cotry" "constant" "-1" "comment" "com-method" "com-interface" "class" "catch" "case" "3" "call-with-catch" "block" "2" "bind" "0" "begin" "attributes" "attribute" "assert" "1" "annotate")}
        {Lisp-Entry "get-specials" #f 337 11 337 23 ("Specials")}
        {Lisp-Entry "evaluate-selection" #f 346 11 346 29 ("evaluate-range" ".1" "sleep" ":wait" "with-cursor" "when" "current-definition-range" "range" "let" "function" "with-safe-explore")}
        {Lisp-Entry "evaluate-buffer" #f 357 11 357 26 ("buffer-selection" "evaluate-range" ".1" "sleep" "function" ":wait" "with-cursor")}
        {Lisp-Entry "evaluate-range" #f 364 11 364 25 ("'<expr>" "either" "name" "function" "map" "user-message" "evaluate-expressions" "package-expressions" "col" "line" "str" "receive" "collect-names" "names" "get-locat-container" "container" "get-string" "expressions" "collect-declarations" "declarations" "bell" "not" "if" "get-focused-process" "debugged" "let" "range")}
        {Lisp-Entry "collect-declarations" #f 380 11 380 31 ("cons" "set!" "jazz-declaration" "declaration" "jazz-declaration?" "when" "outer-expr" "while" "range:" "self" "Jazz-Explorer" "new" "expl" "declarations" "let" "range")}
        {Lisp-Entry "collect-names" #f 390 11 390 24 ("string:" "read-text-forms" "form-name" "form" "function" "map" "self" "explorer-class" "new" "expl" "let" "expressions" "range")}
        {Lisp-Entry "package-expressions" #f 397 11 397 30 ("get-output-string" "values" "length" "string" "split" "cardinality" "newline" "not" "cdr" "null?" "last?" "line" "pair" "for-each-pair" "get-string" "declaration" "function" "for-each" "0" "1" "+" "set!" "-" "make-string" "display" "begin" "=" "iterate" "c" "r" "rng" "fill" "define" "open-output-string" "output" "col" "row" "get-col" "first-col" "get-start" "get-row" "first-row" "car" "not-null?" "if" "first" "let" "expressions" "range" "declarations")}
        {Lisp-Entry "on-add-break" #f 443 18 443 30 ("1" "+" "get-start" "Break" "'Break" "apply-style" "add-break" "error" "not" "if" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "range-location" "loc" "current-expr-range" "range" "let*" "evt")}
        {Lisp-Entry "on-remove-break" #f 454 18 454 33 ("get-row" "get-paragraph" "invalidate-paragraph" "default-style" "set-style" "when" "1" "get-start" "+" "get-run-at" "run" "let" "remove-break" "bell" "not" "if" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "range-location" "loc" "current-expr-range" "range" "let*" "evt")}
        {Lisp-Entry "present-location" #f 473 11 473 27 ("present-expr" "current-debugger" "active-frame" "frame" "let" "and" "when" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "location")}
        {Lisp-Entry "present-expr" #f 481 11 481 23 ("present-unknown" "else" "present-constant" "Symbol" "present-field" "Field-Reference" "present-variable" "Variable" "present-self" "Self" "Manifest-Reference" "present-global" "Global-Reference" "typecase" "class-of" "format" "object" "frame")}
        {Lisp-Entry "present-global" #f 495 11 495 25 ("self" "dispatch" "format" "object" "frame")}
        {Lisp-Entry "present-self" #f 499 11 499 23 ("present-value" "format" "frame-context" "context" "get-address" "Interpreter" "frame-closure-frame" "binder" "let*" "when" "object" "frame")}
        {Lisp-Entry "present-variable" #f 509 11 509 27 ("present-value" "variable-symbol" "format" "variable-value" "value" "let" "eq?" "test:" "key:" "find-in" "variable" "" "variable-base" "frame-variables" "variables" "Interpreter" "frame-closure-frame" "binder" "let*" "get-address" "set!" "when" "var" "frame")}
        {Lisp-Entry "present-field" #f 527 11 527 24 ("present-value" "field-name" "format" "get-value" "value" "let" "definition-method?" "definition?" "and" "unless" "field-creator" "is?" "field-reference-form" "field" "frame-context" "context" "Interpreter" "frame-closure-frame" "binder" "let*" "get-address" "set!" "when" "reference" "frame")}
        {Lisp-Entry "present-constant" #f 543 11 543 27 ("format" "object" "frame")}
        {Lisp-Entry "present-unknown" #f 547 11 547 26 ("object" "frame")}
        {Lisp-Entry "present-value" #f 551 11 551 24 ("format" "else" "procedure?" "cond" "value")}
        {Lisp-Entry "current-location" #f 560 11 560 27 ("get-start" "position->location")}
        {Lisp-Entry "position->location" #f 564 11 564 29 ("range-location" "get-range" "range" "outer-composite?:" "outer-expr" "when" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "location-class" #f 571 11 571 25 ("cdr" "class-of" "category-field" "definition-value" "set!" "meta" "'meta" "eq?" "name" "function" "for-each" "meta?" "let" "error" "not" "if" "global-value" "class" "car" "class-name" "let*" "load?" "load?:" "loc")}
        {Lisp-Entry "split-location" #f 587 11 587 25 ("get-output" "values" "cdr" "set!" "put" "car" "symbol?" "while" "List-Factory" "new" "definition" "scan" "let" "location")}
        {Lisp-Entry "definition-name-info" #f 596 11 596 31 ("else" "2" "external?" "procedure?" "definition-value" "value" "let" "field?" "field-modifiers-count" "+" "slot?" "1" "values" "category?" "cond" "definition-name-info" "'definition-name-info" "unimplemented" "object")}
        {Lisp-Entry "definition-name-location?" #f 612 11 612 36 ("0" "and" "list" "=" "or" "inside-allowed?" "skip" "receive" "when" "definition-name-info" "info" "let" "internal-location" "object")}
        {Lisp-Entry "range-location" #f 620 11 620 25 ("else" "meta" "'meta" "cond" "cons" "loc" "definition-name" "name" "meta?" "package?" "receive" "definition-expr?" "def?" "set!" "if" "outer-expr" "rank" "not" "while" "done?" "previous-def?" "location" "get-end" "end:" "get-start" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "range")}
        {Lisp-Entry "location-range" #f 644 18 644 32 ("get-range" "forward-location" "text-beginning" "end:" "self" "Jazz-Explorer" "new" "expl" "let" "toplevel-location" "toplevel-location:" "location")}
        {Lisp-Entry "on-edit-documentation" #f 655 11 655 32 ("edit-documentation" "get-application" "appl" "bell" "not" "if" "current-symbol" "symbol" "let" "evt")}
        {Lisp-Entry "on-edit-documentation" #f 664 11 664 32 ("current-location" "edit-documentation" "evt")}
        {Lisp-Entry "edit-documentation" #f 669 11 669 29 ("edit-field-documentation" "field-reference-form" "edit-field-reference-documentation" "Field-Reference" "is?" "and" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "car" "autoload" "bell" "null?" "if" "location")}
        {Lisp-Entry "edit-field-reference-documentation" #f 680 11 680 45 ("edit-documentation" "field-name" "field-creator" "type-name" "list" "location" "get-application" "appl" "let" "field")}
        {Lisp-Entry "edit-field-documentation" #f 687 11 687 35 ("bell" "self" "edit-documentation" "definition-name-location?" "and" "if" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "split-location" "internal-location" "field-location" "receive" "get-application" "appl" "let" "location")}
        {Lisp-Entry "on-present-documentation" #f 696 11 696 35 ("current-symbol" "present-documentation" "evt")}
        {Lisp-Entry "present-documentation" #f 700 11 700 32 ("border:" "alternate-position:" "popup" "DocToText-Transformation" "parse-jml" "transform-jml" "set-text" "get-display" "display" "entry" "'entry" "style:" "edge" "'edge" "solid" "'solid" "border-type:" "5" "Rect" "border-insets:" "Border-View" "border" "alternate" "100" "Point" "pos" "'text" "locate" "text" "300" "600" "Dimension" "size:" "Documentation-View" "new" "view" "present-text" "jml" "open-java-documentation" "JVM" "class-exists?" "symbol->string" "classname" "let" "get-documentation" "doc" "get-application" "appl" "let*" "bell" "not" "if" "present-documentation" "'present-documentation" "unimplemented" "symbol")}
        {Lisp-Entry "open-java-documentation" #f 725 11 725 34 ("bell" "return" "shell-execute" "exists?" "when" "format" "list" "append" "new-file" "file" "let" "dir" "function" "for-each" "Java" "parse-classname" "name" "package" "receive" "java-apidocs" "apidocs" "get-profile" "profile" "get-application" "appl" "let*" "open-java-documentation" "'open-java-documentation" "unimplemented" "classname")}
        {Lisp-Entry "show-arguments" #f 751 11 751 25 ("show-category-fields" "show-method-arguments" "0" "char-backward" "case" "symbol" "'symbol" "get-kind" "=" "backward-expr" "and" "get-end" "end:" "get-start" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "empty-selection?" "when")}
        {Lisp-Entry "show-method-arguments" #f 762 11 762 32 ("show-symbol-arguments" "uses" "'uses" "getf" "imports" "find-symbol" "symbol" "keywords" "meta?" "kind" "category" "bind" "category-info" "in" "receive" "when" "current-toplevel-info" "info" "get-marked" "name" "let" "expl")}
        {Lisp-Entry "show-symbol-arguments" #f 776 11 776 32 ("Interpreter" "closure-function" "Closure" "show-function-arguments" "%function" "show-external-arguments" "External" "typecase" "definition-value" "value" "when" "find-in" "field" "let" "show-symbol-arguments" "'show-symbol-arguments" "unimplemented" "packages" "class" "symbol")}
        {Lisp-Entry "show-external-arguments" #f 791 11 791 34 ("proxy-result" "proxy-rest?" "if" "List" "get-type" "param" "function" "Interpreter" "proxy-parameters" "accumulate" "type-name" "map" "user-message" "external" "symbol")}
        {Lisp-Entry "show-function-arguments" #f 800 11 800 34 ("get-output-string" "user-message" "present-parameters" "'rest" "rest" "open-output-string" "printer" "Interpreter" "function-parameters" "parameters" "let*" "function" "symbol")}
        {Lisp-Entry "present-parameters" #f 810 11 810 29 ("else" "cdr" "present-parameters" "format" "car" "present-parameter" "pair?" "cond" "when" "printer" "bind" "parameters")}
        {Lisp-Entry "present-parameter" #f 822 11 822 28 ("else" "Interpreter" "variable-symbol" "format" "Variable" "typecase" "printer" "parameter")}
        {Lisp-Entry "find-in" #f 830 11 830 18 ("continuation-return" "when" "class-of" "category-field" "field" "Interpreter-Services" "get-interpreted-category" "either" "type-name" "name" "let*" "package" "for-each" "return" "function" "continuation-capture" "packages" "class" "symbol")}
        {Lisp-Entry "show-category-fields" #f 843 11 843 31 ("show" "500" "Point" "position:" "self" "owner-text:" "Completion-Popup" "new" "popup" "let")}
        {Lisp-Entry "explorer-class" #f 854 11 854 25 ("Jazz-Explorer")}
        {Lisp-Entry "current-class-form" #f 863 18 863 36 ("values" "Form" "fourth" "is?" "class-form" "'class-form" "third" "meta" "'meta" "second" "definition" "'definition" "first" "eq?" "4" "and" "car" "form" "1" "length" "=" "read-text-forms" "forms" "current-toplevel-info" "info" "when" "current-definition-range" "function" "with-safe-explore" "range" "let")}
        {Lisp-Entry "current-classes" #f 884 11 884 26 ("meta" "'meta" "cons" "set!" "definition-name" "name" "meta?" "package?" "receive" "category-expr?" "when" "outer-expr" "while" "classes" "range:" "self" "Jazz-Explorer" "new" "expl" "let" "range")}
        {Lisp-Entry "current-category-name" #f 896 11 896 32 ("keywords" "name" "meta?" "kind" "category" "bind" "current-toplevel-info" "category-info" "in" "receive")}
        {Lisp-Entry "toplevel-expr" #f 903 11 903 24 ("get-range" "set!" "outer-expr" "while" "range" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "edit-symbol-class" #f 916 11 916 28 ("get-application" "edit-class" "in-manifest?" "when" "symbol")}}
      {Lisp-Entry "Documentation-View" #f 928 7 928 25 ("editable?:" "Tooltip" "Color" "background:" "text" "content" "name:" "flat?:" "vscroll?:" "hscroll?:" "fill" "layout-type:" "Layout-View")}
      {Lisp-Entry "Jazz-Text-Menu" #f 943 7 943 21 ("paste" "copy" "view" "french:" "english:" "Locales" "cut" "set-read/write" "show-changes" "text" "show-history" "remove-break" "add-break" "add-to-favorites" "edit-documentation" "edit-references" "edit-definitions" "jazz-text" "design-form" "code-text" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "evaluate" "name:" "Context-Menu")}}})
"Location-Error"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "text" "Location-Error.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.text.Location-Error" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Location-Error" #f 45 7 45 21 ("Error")
        {Lisp-Entry "kind" #f 48 8 48 12 ()}
        {Lisp-Entry "location" #f 49 8 49 16 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("location~self" "kind~self" "set!" "nextmethod" "apply" "others" "location" "bad" "'bad" "kind" "bind-keywords" "rest")}
        {Lisp-Entry "get-kind" #f 64 18 64 26 ("kind")}
        {Lisp-Entry "get-location" #f 68 18 68 30 ("location")}
        {Lisp-Entry "get-message" #f 77 11 77 22 ("unknown" "location" "format" "bad" "kind" "case")}}}})
"Logs-Viewer"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "log" "Logs-Viewer.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.log.Logs-Viewer" #f 37 9 37 43 ("No-Data-Viewer" "register-autoclass" "jazz")
      {Lisp-Entry "Logs-Viewer" #f 52 7 52 18 ("data-container" "log-tree" "header" "scroller" "log-view" "second" "log-border" "200" "width:" "toplevel-controls?:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "log" "filled-column:" "logs-tree" "fill" "content" "vscroll?:" "document" "entry" "style:" "edge" "border-type:" "logs-border" "20" "horz" "first" "horizontal" "50" "division:" "relative" "mode:" "vert" "orientation:" "split" "state:" "center" "vertical" "on-refresh" "refresh" "on-clear" "clear" "10" "on-open" "tail" "open" "on-refresh-logs" "refresh-logs" "on-directory-logs" "directory-logs" "on-memory-logs" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "memory-logs" "0" "6" "flow" "north" "location:" "33" "300" "Dimension" "size:" "tools" "name:" "2" "Rect" "layout-insets:" "border" "layout-type:" "title:" "Layout-View")
        {Lisp-Entry "logs-directory" #f 55 8 55 22 ()}
        {Lisp-Entry "data-viewer" #f 56 8 56 19 ()}
        {Lisp-Entry "finish" #f 92 11 92 17 ("refresh-logs" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 102 16 102 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 106 16 106 26 ()}
        {Lisp-Entry "host-position" #f 110 16 110 29 ("50" "Point")}
        {Lisp-Entry "host-size" #f 114 16 114 25 ("500" "850" "Point")}
        {Lisp-Entry "client-activate" #f 118 11 118 26 ("perserving-refresh-logs")}
        {Lisp-Entry "get-tree" #f 127 11 127 19 ("logs-tree" "'logs-tree" "locate")}
        {Lisp-Entry "Logs-Directory" #f 136 14 136 28 ("Bin" "Directory")}
        {Lisp-Entry "with-directory" #f 140 11 140 25 ("function" "with-preserved-current-directory" "Logs-Directory" "exists?" "and" "if" "proc" "default?")}
        {Lisp-Entry "on-memory-logs" #f 148 11 148 25 ("refresh-logs" "logs-directory" "set!" "evt")}
        {Lisp-Entry "on-directory-logs" #f 153 11 153 28 ("refresh-logs" "logs-directory" "set!" "directory:" "choose-directory" "directory" "let" "dir" "function" "get-shift?" "with-directory" "evt")}
        {Lisp-Entry "on-refresh-logs" #f 161 11 161 26 ("refresh-logs" "evt")}
        {Lisp-Entry "perserving-refresh-logs" #f 165 11 165 34 ("generate-event?:" "data" "'data" "use:" "refresh-logs" "function" "with-preserved-selection" "get-tree" "tree" "let")}
        {Lisp-Entry "refresh-logs" #f 174 18 174 30 ("view-logs" "close-data-viewer")}
        {Lisp-Entry "on-open" #f 179 11 179 18 ("view-log" "set-selection" "'log-view" "locate" "log-view" "load?:" "file:" "Log" "new" "log" "directory:" "extensions:" "choose-file" "file" "get-tree" "tree" "let*" "dir" "function" "get-shift?" "with-directory" "evt")}
        {Lisp-Entry "on-clear" #f 190 11 190 19 ("on-refresh" "on-clear" "'on-clear" "unimplemented" "evt")}
        {Lisp-Entry "on-refresh" #f 195 18 195 28 ("update" "'log-view" "locate" "log-view" "let" "evt")}
        {Lisp-Entry "on-selection-change" #f 200 11 200 30 ("view-data" "node" "log-tree" "view-log" "reload" "get-file" "close-data-viewer" "get-row" "get-user-data" "log" "'log-view" "locate" "log-view" "when" "get-single-selection" "selection" "logs-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" #f 219 11 219 26 ("edit-data" "get-row" "get-user-data" "node" "when" "get-single-selection" "selection" "log-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" #f 229 11 229 26 ("on-double-click" "evt")}
        {Lisp-Entry "view-logs" #f 238 11 238 20 ("insert-file" "ci=?" "when" "get-extension" "extension" "file" "iterate-directory" "get-logs" "insert-log" "log" "for-each" "logs-directory" "null?" "if" "remove-every-row" "function" "with-update-locked" "get-tree" "tree" "let")}
        {Lisp-Entry "insert-log" #f 254 11 254 21 ("user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "get-name" "->string" "name" "let" "log" "tree")}
        {Lisp-Entry "insert-file" #f 259 11 259 22 ("file:" "Log" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "get-base" "name" "let" "file" "tree")}
        {Lisp-Entry "view-data" #f 269 29 269 38 ("layout-view" "parent:" "client:" "new" "data-viewer" "set!" "data-container" "'data-container" "locate" "container" "data-viewer-class" "class" "'data" "get-property" "data" "let*" "JML-Node" "is?" "when" "close-data-viewer" "node")}
        {Lisp-Entry "data-viewer-class" #f 282 11 282 28 ("No-Data-Viewer" "get-viewer-class" "either" "Viewable" "is?" "and" "if" "data")}
        {Lisp-Entry "close-data-viewer" #f 288 11 288 28 ("set!" "close" "data-viewer" "when")}
        {Lisp-Entry "edit-data" #f 299 29 299 38 ("node")}}
      {Lisp-Entry "No-Data-Viewer" #f 308 7 308 21 ("entry" "style:" "edge" "border-type:" "Border-View")
        {Lisp-Entry "client" #f 311 12 311 18 ("generate")}
        {Lisp-Entry "Background-Font" #f 318 14 318 29 ("Heading1" "name:" "Font")}
        {Lisp-Entry "draw" #f 322 11 322 15 ("draw-no-data" "nextmethod" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-no-data" #f 327 11 327 23 ("get-v" "get-h" "draw-text" "Dark-Gray" "name:" "Color" "set-text-color" "get-display-size" "center" "pos" "get-text-extent" "extent" "localize" "title" "let*" "Background-Font" "set-font" "surface")}}}})
"Profile-Results"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "profiler" "Profile-Results.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.profiler.Profile-Results" #f 37 9 37 52 ("Calls-Tree" "register-autoclass" "jazz")
      {Lisp-Entry "Profile-Results" #f 52 7 52 22 ("on-return-press" "return-press-handler:" "on-select-location" "Selection-Handler" "selection-handler:" "calls" "fill" "vscroll?:" "hscroll?:" "document" "style:" "center" "on-refresh" "refresh" "0" "6" "on-reset-profile" "reset" "on-stop-profile" "stop" "on-start-profile" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "start" "tools" "name:" "border" "layout-type:" "612" "412" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "host-icon" #f 76 16 76 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 80 16 80 26 ()}
        {Lisp-Entry "host-position" #f 84 16 84 29 ("14" "28" "Point")}
        {Lisp-Entry "host-size" #f 88 16 88 25 ("608" "408" "Dimension")}
        {Lisp-Entry "get-tools-view" #f 97 11 97 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 101 11 101 24 ("get-tree" "acquire-focus")}
        {Lisp-Entry "get-tree" #f 110 11 110 19 ("calls" "'calls" "locate")}
        {Lisp-Entry "on-start-profile" #f 119 11 119 27 ("user-message" "start-profile" "evt")}
        {Lisp-Entry "on-stop-profile" #f 124 11 124 26 ("user-message" "view-profile" "stop-profile" "evt")}
        {Lisp-Entry "on-reset-profile" #f 130 11 130 27 ("user-message" "view-profile" "reset-profile" "stop-profile" "evt")}
        {Lisp-Entry "on-refresh" #f 137 11 137 21 ("view-profile" "evt")}
        {Lisp-Entry "on-select-location" #f 141 11 141 29 ("edit-source" "evt")}
        {Lisp-Entry "*frame-indicator*" #f 150 14 150 31 ("94" "blue:" "146" "green:" "255" "red:" "Color" "color:" "Frame-Indicator" "new")}
        {Lisp-Entry "edit-source" #f 154 11 154 22 ("selected-location" "*frame-indicator*" "edit")}
        {Lisp-Entry "selected-frame" #f 163 11 163 25 ("get-row" "get-user-data" "not" "if" "get-single-selection" "rank" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-location" #f 171 11 171 28 ("second" "not" "if" "selected-frame" "frame" "let")}
        {Lisp-Entry "view-profile" #f 183 11 183 23 ("active-profile" "get-tree" "view-profile")}}
      {Lisp-Entry "Calls-Tree" #f 192 7 192 17 ("percentage" "75" "count" "250" "width:" "title:" "name:" "procedure" "filled-column:" ":icons" "portfolio:" "Tree-View")
        {Lisp-Entry "view-profile" #f 207 11 207 23 ("view-calls" "remove-every-row" "function" "with-update-locked" "profile")}
        {Lisp-Entry "view-calls" #f 214 11 214 21 ("collect-calls" "butlast" "reverse" "father:" "user-data:" "->string" "Tree-Label" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "row" "number->string" "procedure" "last" "not-null?" "percentage" "count" "stack" "bind" "call" "function" "for-each" "present-identifier" "get-procedure-name" "name" "first" "creator" "let" "if" "either" "frame" "present-procedure" "define" "profile")}
        {Lisp-Entry "collect-calls" #f 240 11 240 24 ("third" "key:" ">" "sort" "cons" "set!" "calculate-percentage" "list" "call" "count" "stack" "function" "profile-calls" "iterate-table" "calls" "profile-total" "total" "let" "profile")}
        {Lisp-Entry "present-filename" #f 250 15 250 31 ("1" "+" "subseq" "if" "reversed?:" "find" "pos" "let" "filename")}
        {Lisp-Entry "calculate-percentage" #f 257 15 257 35 ("100." "10000" "*" "round" "/" "total" "count")}}}})
"Registry-Viewer"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "registry" "Registry-Viewer.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.registry.Registry-Viewer" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Registry-Viewer" #f 51 7 51 22 ("419" "width:" ":icons" "portfolio:" "on-selection-change" "selection-handler:" "registry" "fill" "content" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "center" "registry-border" "on-view-type-libs" ":form" "Event-Handler" "action-handler:" "selected?:" "22" "70" "title:" "type-libs" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "border" "layout-type:" "639" "436" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "conclude" #f 67 11 67 19 ("view-type-libs" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 77 16 77 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 81 16 81 26 ()}
        {Lisp-Entry "host-position" #f 85 16 85 29 ("14" "28" "Point")}
        {Lisp-Entry "host-size" #f 89 16 89 25 ("635" "416" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 93 11 93 26 ("home")}
        {Lisp-Entry "on-view-type-libs" #f 102 11 102 28 ("view-type-libs" "evt")}
        {Lisp-Entry "view-type-libs" #f 106 11 106 25 ("second" "key:" "get-output" "<" "sort" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "list" "children:" "add-row" "empty-string?" "not" "pathname" "language-id" "minor-version" "major-version" "desc" "bind" "with-update-locked" "cons" "put" "when" "get-information" "info" "let" "guid-name" "function" "for-each" "List-Factory" "new" "informations" "gather" "guid-names" "iterate-subkeys" "all" "registry" "'registry" "locate" "tree" "let*" "user-message" "Registry" "open-type-lib" "type-lib" "with-closed")}
        {Lisp-Entry "on-selection-change" #f 129 11 129 30 ("set-visible?" "bring-to-front" "view-file" "get-guest" "view-registered-typelib" "cardinality" "-" "1" "subseq" "GUID" "new" "guid" "Type-Viewer" "singleton" "frame" "pathname" "language-id" "minor-version" "major-version" "desc" "guid-name" "bind" "get-row" "get-user-data" "info" "let" "when" "get-single-selection" "selection" "get-sender" "sender" "let*" "evt")}}}})
"Spy-View"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "spy" "Spy-View.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.spy.Spy-View" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Spy-View" #f 49 7 49 15 ("row" "selection-mode:" "tree" "tree-header" "fill" "layout-type:" "content" "vscroll?:" "tree-scroller" "edge" "border-type:" "306" "33" "0" "tree-border" "on-on/off" "710" "on/off" "on-slowdown" "686" "slowdown" "on-clear" ":form" "605" "clear" "on-spy-family" "180" "spy-family" "on-spy" "156" "spy" "76" "keyboard" "52" "mouse" "28" "paint" "selected?:" ":icons" "portfolio:" "on-category" "parent:" "Event-Handler" "action-handler:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "6" "4" "Point" "position:" "all" "name:" "east" "location:" "339" "736" "Dimension" "size:" "View")
        {Lisp-Entry "clients" #f 52 12 52 19 ("set-clients" "get-clients")}
        {Lisp-Entry "active?" #f 55 8 55 15 ()}
        {Lisp-Entry "slowdown?" #f 56 8 56 17 ()}
        {Lisp-Entry "slowdown-quantum" #f 57 8 57 24 ("1000")}
        {Lisp-Entry "category" #f 58 8 58 16 ("all" "'all")}
        {Lisp-Entry "old-consumer" #f 59 8 59 20 ()}
        {Lisp-Entry "get-tree" #f 86 18 86 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "get-clients" #f 95 18 95 29 ("clients")}
        {Lisp-Entry "set-clients" #f 99 18 99 29 ("activate" "set!" "clients" "unspy" "for-each" "active?" "when" "list")}
        {Lisp-Entry "activate" #f 106 11 106 19 ("on/off" "'on/off" "locate" "set-selected?" "clients" "spy" "for-each" "active?" "set!")}
        {Lisp-Entry "destroy" #f 117 11 117 18 ("nextmethod" "set-clients")}
        {Lisp-Entry "resize" #f 122 11 122 17 ("tree-border" "'tree-border" "size-figure" "on/off" "'on/off" "slowdown" "'slowdown" "0" "clear" "'clear" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-category" #f 130 11 130 22 ("get-sender" "get-name" "category" "set!" "evt")}
        {Lisp-Entry "on-spy" #f 134 11 134 17 ("list" "set-clients" "views" "windows" "case" "figure" "spy-domain" "domain" "let*" "pos" "view" "position" "window" "function" "pick-figure" "unimplemented" "evt")}
        {Lisp-Entry "on-spy-family" #f 144 11 144 24 ("collect-family" "set-clients" "views" "windows" "case" "figure" "spy-domain" "domain" "let*" "pos" "view" "position" "window" "function" "pick-figure" "unimplemented" "evt")}
        {Lisp-Entry "pick-figure" #f 154 11 154 22 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "views" "'views" "eq?" "highlight-figure?:" "highlight:" "click:" "get-player" "list" "exclude:" "pick-figure" "spy-domain" "domain" "let" "unimplemented" "action")}
        {Lisp-Entry "on-clear" #f 168 11 168 19 ("get-tree" "remove-every-row" "evt")}
        {Lisp-Entry "on-slowdown" #f 172 11 172 22 ("not" "slowdown?" "set!" "evt")}
        {Lisp-Entry "on-on/off" #f 176 11 176 20 ("unspy" "clients" "spy" "for-each" "if" "not" "active?" "set!" "evt")}
        {Lisp-Entry "spy-domain" #f 188 29 188 39 ()}
        {Lisp-Entry "spy" #f 192 29 192 32 ("client")}
        {Lisp-Entry "unspy" #f 196 29 196 34 ("client")}}}})
"Stack-Presenter"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "debuggee" "Stack-Presenter.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.debuggee.Stack-Presenter" #f 37 9 37 52 ("jazz")}})
"Type-Extractor"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "registry" "Type-Extractor.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.registry.Type-Extractor" #f 42 9 42 51 ("jazz")
      {Lisp-Entry "Type-Extractor" #f 53 7 53 21 ("Object")
        {Lisp-Entry "library" #f 56 8 56 15 ()}
        {Lisp-Entry "name" #f 57 8 57 12 ()}
        {Lisp-Entry "com-classes?" #f 58 8 58 20 ()}
        {Lisp-Entry "pure-dispatch?" #f 59 8 59 22 ()}
        {Lisp-Entry "to-emit" #f 60 8 60 15 ()}
        {Lisp-Entry "emited" #f 61 8 61 14 ()}
        {Lisp-Entry "waiting" #f 62 8 62 15 ()}
        {Lisp-Entry "initialize" #f 65 11 65 21 ("pure-dispatch?~self" "com-classes?~self" "name~self" "library~self" "set!" "nextmethod" "pure-dispatch?" "pure-dispatch?:" "com-classes?" "com-classes?:" "default-name" "name" "name:" "library" "library:")}
        {Lisp-Entry "default-name" #f 73 11 73 23 ("get-name" "lib")}
        {Lisp-Entry "extract" #f 77 18 77 25 ("emit-package-footer" "emit-library-types" "emit-package-header" "format" "name" "output-header" "printer" "function" "parse" "call-with-output-file" "activity" "activity:" "file")}
        {Lisp-Entry "emit-package-header" #f 92 11 92 30 ("name" "format" "printer")}
        {Lisp-Entry "emit-package-footer" #f 96 11 96 30 ("format" "printer")}
        {Lisp-Entry "emit-section-header" #f 100 11 100 30 ("format" "printer" "section-name")}
        {Lisp-Entry "emit-library-types" #f 107 11 107 29 ("debug" "not-null?" "emit-type-information" "info" "function" "for-each" "length" "0" "Range" "new" "set-range" "when" "waiting" "emited" "info-name" "map" "to-emit" "set!" "library" "get-types" "types" "let" "activity" "printer")}
        {Lisp-Entry "emit-type-information" #f 121 11 121 32 ("1" "delta-pos" "emit-waiting" "emited" "emit-type-info" "cons" "waiting" "set!" "waiting-implemented" "waiting-upon" "user-message" "when" "get-name" "name" "let" "throw-cancel" "cancel-requested?" "and" "if" "activity" "printer" "info")}
        {Lisp-Entry "emit-waiting" #f 137 11 137 23 ("remove!" "waiting" "cons" "set!" "emit-type-information" "emited" "every?" "member?" "and" "when" "names" "info" "bind" "pair" "function" "for-each" "processed" "let" "activity" "printer" "name")}
        {Lisp-Entry "waiting-implemented" #f 153 11 153 30 ("get-implemented-types" "emited" "not" "to-emit" "member?" "and" "when" "get-name" "name" "let" "function" "collect" "info")}
        {Lisp-Entry "emit-type-info" #f 162 11 162 25 ("error" "else" "emit-max" "TKIND_MAX" "emit-union" "TKIND_UNION" "emit-alias" "TKIND_ALIAS" "emit-com-class" "TKIND_COCLASS" "emit-dispatch" "TKIND_DISPATCH" "emit-interface" "TKIND_INTERFACE" "emit-package" "TKIND_MODULE" "emit-record" "TKIND_RECORD" "emit-enum" "TKIND_ENUM" "ecase" "get-kind" "kind" "let" "printer" "info")}
        {Lisp-Entry "emit-enum" #f 177 11 177 20 ("emit-variables" "null?" "if" "format" "emit-section-header" "get-variables" "variables" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-record" #f 188 11 188 22 ("emit-variables" "null?" "if" "format" "emit-section-header" "get-variables" "variables" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-package" #f 199 11 199 23 ("format" "emit-section-header" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-interface" #f 205 11 205 25 ("com-external" "'com-external" "emit-functions" "intern-type" "type-name" "either" "final-typedesc" "TYPEDESC" "'desc" "coerce" "essay" "ptr-typedesc" "VT_PTR" "=" "pointer?" "vt" "'vt" "type" "tdesc" "elemdescVar" "get" "typedesc" "get-member-name" "desc" "function" "for-each" "or" "when" "pure-dispatch?" "if" "format" "emit-section-header" "car" "ascendant" "get-implemented-types" "interfaces" "get-functions" "functions" "get-variables" "variables" "get-guid" "guid" "get-name" "name" "let*" "printer" "info")}
        {Lisp-Entry "emit-dispatch" #f 231 11 231 24 ("emit-interface" "printer" "info")}
        {Lisp-Entry "emit-com-class" #f 235 11 235 25 ("essay" "com-method" "'com-method" "emit-functions" "set!" "get-functions" "functions" "tail" "interface" "bind" "pair" "function" "for-each-pair" "null?" "names" "let" "begin" "and" "else" "car" "1" "0" "length" "case" "com-classes?" "if" "format" "emit-section-header" "info-name" "map" "interface-names" "get-implemented-types" "interfaces" "get-guid" "guid" "get-name" "name" "let*" "printer" "info")}
        {Lisp-Entry "emit-alias" #f 262 11 262 21 ("list" "cons" "waiting" "set!" "emit-alias-code" "emited" "member?" "if" "desc" "tdescAlias" "get-attr" "get" "get-referenced-type" "aliased" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-alias-code" #f 270 11 270 26 ("format" "emit-section-header" "printer" "aliased" "name")}
        {Lisp-Entry "emit-union" #f 277 11 277 21 ("format" "emit-section-header" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-max" #f 285 11 285 19 ("format" "emit-section-header" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-functions" #f 291 11 291 25 ("cons" "set!" "essay" "emit-function" "memq?" "not" "invkind" "'invkind" "get" "effective-name" "effective" "get-member-name" "name" "let*" "tail" "desc" "bind" "pair" "function" "for-each-pair" "format" "when" "null?" "if" "trailer" "printer" "modifiers" "header" "functions" "names" "info")}
        {Lisp-Entry "emit-function" #f 306 11 306 24 ("reverse!" "VARENUM" "value->name" "item" "map" "cParams" "'cParams" "0" "naturals" "or" "'<in-out>" "and" "parameter-direction" "param-direction" "param-type-name" "interface-kind?" "if" "param-pointer?" "get-referenced-type" "VT_USERDEFINED" "param-referenced" "param-typedesc" "param-type" "ptr-ptr-type" "ptr-ptr-typedesc" "ptr-pointer?" "ptr-type" "ptr-typedesc" "pointer?" "type" "'tdesc" "typedesc" "array-ref" "param" "n" "function" "for-each" "get-function-parameters" "params" "let" "cons" "set!" "unpl" "'unpl" "eq?" "when" "format" "intern-type" "return-type-name" "either" "final-return-typedesc" "TYPEDESC" "'desc" "coerce" "essay" "ptr-return-typedesc" "VT_PTR" "=" "return-pointer?" "vt" "'vt" "return-type" "tdesc" "elemdescFunc" "get" "return-typedesc" "unimplemented" "let*" "equal?" "test:" "member?" "unless" "trailer" "printer" "modifiers" "header" "desc" "effective" "info")}
        {Lisp-Entry "interface-kind?" #f 359 11 359 26 ("TKIND_COCLASS" "TKIND_DISPATCH" "TKIND_INTERFACE" "=" "or" "get-kind" "kind" "let" "when" "info")}
        {Lisp-Entry "effective-name" #f 367 11 367 25 ("putref-name" "INVOKE_PROPERTYPUTREF" "put-name" "INVOKE_PROPERTYPUT" "get-name" "INVOKE_PROPERTYGET" "INVOKE_FUNC" "ecase" "name" "kind")}
        {Lisp-Entry "get-name" #f 375 11 375 19 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "put-name" #f 379 11 379 19 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "putref-name" #f 383 11 383 22 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "parameter-direction" #f 387 11 387 30 ("error" "else" "'<out>" "'<in>" "or" "'<in-out>" "cond" "not" "and" "unspecified?" "IDLFLAG_FOUT" "out?" "IDLFLAG_FIN" "mask-bit-set?" "in?" "wIDLFlags" "idldesc" "get" "flags" "let*" "param")}
        {Lisp-Entry "emit-variables" #f 398 11 398 25 ("essay" "emit-variable" "tail" "desc" "bind" "pair" "function" "for-each-pair" "format" "when" "null?" "if" "trailer" "printer" "variables" "info")}
        {Lisp-Entry "emit-variable" #f 408 11 408 24 ("VARENUM" "value->name" "unpl" "'unpl" "=" "and" "when" "TKIND_RECORD" "read-variant" "TKIND_ENUM" "ecase" "format" "intern-type" "variable-type-name" "lpvarValue" "'lpvarValue" "value" "vt" "'vt" "basetype" "tdesc" "elemdescVar" "get" "typedesc" "get-member-name" "name" "get-kind" "kind" "let*" "trailer" "printer" "desc" "info")}
        {Lisp-Entry "info-name" #f 425 11 425 20 ("get-name" "info")}
        {Lisp-Entry "intern-type" #f 434 11 434 22 ("cdr" "format" "car" "pair?" "name" "idl-type-info" "let*" "get-name" "add-modifier" "'desc" "get-referenced-type" "referenced" "VT_USERDEFINED" "=" "if" "vt" "'vt" "get" "type" "debug?" "let" "pointer?" "desc" "info")}
        {Lisp-Entry "idl-type-info" #f 448 11 448 24 ("VARENUM" "value->name" "error" "else" "VT_LPWSTR" "VT_LPSTR" "VT_CY" "VT_SAFEARRAY" "VT_DISPATCH" "VT_UNKNOWN" "VT_USERDEFINED" "VT_DATE" "VT_VARIANT" "VT_BSTR" "VT_CARRAY" "cons" "VT_PTR" "VT_HRESULT" "VT_BOOL" "VT_INT" "VT_R8" "VT_R4" "VT_I4" "VT_I2" "VT_I1" "VT_UINT" "VT_UI4" "VT_UI2" "VT_UI1" "VT_VOID" "ecase" "type")}
        {Lisp-Entry "add-modifier" #f 478 11 478 23 ("format" "if" "pointer?" "name")}}}})
"Type-Viewer"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "registry" "Type-Viewer.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.registry.Type-Viewer" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Type-Viewer" #f 56 7 56 18 ("Code" "Font" "font:" "Default" "Text-Style" "default-style:" "descr" "second" "descr-border" "269" "width:" "on-selection-change" "selection-handler:" "library" "fill" "content" "vscroll?:" "document" "entry" "style:" "edge" "border-type:" "first" "library-border" "30" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "center" "splitter" "on-browse" "tail" "100" "title:" "browse" "on-generate" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "22" "generate" "0" "6" "1" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "border" "layout-type:" "739" "693" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "library" #f 59 8 59 15 ()}
        {Lisp-Entry "singleton" #f 80 23 80 32 ("new-frame" "Type-Viewer" "get-stage" "find-host" "either")}
        {Lisp-Entry "destroy" #f 85 11 85 18 ("nextmethod" "library" "set!")}
        {Lisp-Entry "host-icon" #f 95 16 95 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 99 16 99 26 ()}
        {Lisp-Entry "host-position" #f 103 16 103 29 ("14" "503" "Point")}
        {Lisp-Entry "host-size" #f 107 16 107 25 ("635" "557" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 111 11 111 26 ("home")}
        {Lisp-Entry "on-generate" #f 120 11 120 22 ("extract" ":pure-dispatch?" ":library" "Type-Extractor" "new" "extractor" "shift-down?" "pure-dispatch?" "extensions:" "default-extension:" "initial-filename:" "choose-new-file" "file" "get-name" "name" "let*" "bell" "library" "null?" "if" "evt")}
        {Lisp-Entry "on-browse" #f 130 11 130 20 ("extensions:" "choose-file" "view-file" "evt")}
        {Lisp-Entry "on-selection-change" #f 134 11 134 30 ("get-row" "get-user-data" "library" "describe-item" "null?" "if" "get-single-selection" "selection" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "view-file" #f 142 18 142 27 ("file:" "Type-Lib" "new" "view-library" "file")}
        {Lisp-Entry "view-registered-library" #f 146 18 146 41 (":language-id" ":minor-version" ":major-version" "guid:" "Type-Lib" "new" "view-library" "li" "mi" "ma" "g")}
        {Lisp-Entry "view-library" #f 150 18 150 30 ("describe-item" "insert-library" "remove-every-row" "with-update-locked" "'library" "locate" "tree" "let" "library" "set!" "function" ":wait" "with-cursor" "lib")}
        {Lisp-Entry "insert-library" #f 167 11 167 25 ("get-types" "insert-info" "info" "function" "for-each" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "add-row" "node" "library" "get-name" "title" "let*" "tree")}
        {Lisp-Entry "insert-info" #f 175 11 175 22 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "dynamic" "'dynamic" "state:" "father:" "add-row" "else" "TKIND_UNION" "TKIND_ALIAS" "TKIND_DISPATCH" "TKIND_INTERFACE" "TKIND_COCLASS" "TKIND_RECORD" "Bitmap-Resource" "TKIND_ENUM" "ecase" "icon" "get-kind" "kind" "get-doc" "doc" "get-name" "name" "let*" "node" "tree" "info")}
        {Lisp-Entry "update-info-row" #f 191 11 191 26 ("get-variables" "insert-variable" "get-functions" "insert-function" "desc" "function" "for-each" "get-user-data" "info" "get-parent" "tree" "let" "row")}
        {Lisp-Entry "insert-function" #f 202 11 202 26 ("cons" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "else" "INVOKE_PROPERTYPUTREF" "INVOKE_PROPERTYPUT" "INVOKE_PROPERTYGET" "Bitmap-Resource" "INVOKE_FUNC" "invkind" "'invkind" "get" "ecase" "icon" "get-member-name" "name" "let" "node" "tree" "desc" "info")}
        {Lisp-Entry "insert-variable" #f 213 11 213 26 ("cons" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "get-member-name" "name" "let" "node" "tree" "desc" "info")}
        {Lisp-Entry "describe-item" #f 223 11 223 24 ("get-output" "set-content" "describe-member" "else" "describe-info" "Type-Info" "describe-lib" "Type-Lib" "typecase" "List-Factory" "new" "fact" "descr" "'descr" "locate" "text" "let" "when" "item")}
        {Lisp-Entry "describe-lib" #f 234 11 234 23 ("get-lib-file" "get-lib-guid" "get-doc" "get-name" "format" "put" "fact" "item")}
        {Lisp-Entry "describe-info" #f 242 11 242 24 ("get-implemented-types" "info" "function" "map" "get-guid" "get-kind" "TYPEKIND" "value->name" "get-doc" "get-name" "format" "put" "fact" "item")}
        {Lisp-Entry "describe-member" #f 250 11 250 26 ("describe-variable" "VARDESC" "describe-function" "FUNCDESC" "typecase" "desc" "info" "bind" "fact" "item")}
        {Lisp-Entry "describe-function" #f 257 11 257 28 ("0" "naturals" "get-name" "get-referenced-type" "referenced" "ptr-ptr-type" "ptr-ptr-typedesc" "when" "make-string" "length" "10" "-" "1" "max" "padding" "param-type-name" "ptr-type" "TYPEDESC" "'desc" "coerce" "essay" "ptr-typedesc" "VT_USERDEFINED" "user?" "VT_PTR" "=" "pointer?" "parameter-direction" "direction" "vt" "'vt" "type" "'tdesc" "typedesc" "array-ref" "param" "let*" "n" "function" "for-each" "get-function-parameters" "params" "let" "tdesc" "elemdescFunc" "describe-type" "cParamsOpt" "'cParamsOpt" "cParams" "'cParams" "oVft" "'oVft" "callconv" "'callconv" "CALLCONV" "invkind" "'invkind" "INVOKEKIND" "funckind" "'funckind" "get" "FUNCKIND" "value->name" "format" "put" "fact" "desc" "info")}
        {Lisp-Entry "describe-type" #f 291 11 291 24 ("VARENUM" "value->name" "get-name" "'desc" "get-referenced-type" "referenced" "VT_USERDEFINED" "=" "if" "vt" "'vt" "get" "type" "let" "desc" "info")}
        {Lisp-Entry "parameter-direction" #f 299 11 299 30 ("error" "else" "'<out>" "'<in>" "or" "'<in-out>" "cond" "not" "and" "unspecified?" "IDLFLAG_FOUT" "out?" "IDLFLAG_FIN" "mask-bit-set?" "in?" "wIDLFlags" "idldesc" "get" "flags" "let*" "param")}
        {Lisp-Entry "describe-variable" #f 310 11 310 28 ("TKIND_UNION" "else" "cElements" "rgbounds" "tdescElem" "'tdescElem" "ARRAYDESC" "'desc" "coerce" "arraydesc" "let" "VT_CARRAY" "case" "TKIND_RECORD" "read-variant" "format" "put" "TKIND_ENUM" "ecase" "lpvarValue" "'lpvarValue" "value" "describe-type" "type" "tdesc" "elemdescVar" "get" "typedesc" "get-kind" "kind" "let*" "fact" "desc" "info")}}
      {Lisp-Entry "Type-Tree" #f 340 7 340 16 ("Tree-View")
        {Lisp-Entry "update-row" #f 343 11 343 21 ("update-info-row" "row")}}}})
"User-Log"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "log" "User-Log.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.log.User-Log" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "User-Log" #f 50 7 50 15 ("Log-View")
        {Lisp-Entry "external-name" #f 53 16 53 29 ("user-log" "'user-log" "rest")}
        {Lisp-Entry "finish" #f 57 11 57 17 ("separator3" "'separator3" "0" "8" "Dimension" "separator2" "'separator2" "set-size" "separator1" "'separator1" "close" "none" "'none" "set-border-type" "log-border" "'log-border" "splitter" "'splitter" "locate" "zoom" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 71 16 71 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 75 16 75 26 ()}
        {Lisp-Entry "get-tools-view" #f 84 11 84 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 88 11 88 24 ("acquire-focus" "log-tree" "'log-tree" "locate" "tree" "let")}
        {Lisp-Entry "view-entry" #f 98 11 98 21 ("node")}
        {Lisp-Entry "edit-entry" #f 107 11 107 21 ("bell" "user-message" "else" "output-table" "Data-Table" "typecase" "when" "get-entry" "entry" "let" "node")}
        {Lisp-Entry "output-tables" #f 120 11 120 24 ("sql" "'sql" "select-workspace" "get-application" "appl" "when" "output-tables" "get-sql-console-text" "text" "let" "select?" "select?:" "name" "name:" "tables")}
        {Lisp-Entry "output-table" #f 130 11 130 23 ("list" "output-tables" "select?" "select?:" "name" "name:" "table")}}}})
"_debuggee"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "debuggee" "_debuggee.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.debuggee" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "In-Pick?" #f 54 12 54 20 ()}
      {Lisp-Entry "All-Pickers" #f 57 12 57 23 ()}
      {Lisp-Entry "Highlight-Figure?" #f 60 12 60 29 ()}
      {Lisp-Entry "Highlighted-Player" #f 63 12 63 30 ()}
      {Lisp-Entry "Highlighted-View" #f 66 12 66 28 ()}
      {Lisp-Entry "Highlighted-Root-Rect" #f 69 12 69 33 ()}
      {Lisp-Entry "Highlighted-View-Rect" #f 72 12 72 33 ()}
      {Lisp-Entry "Highlighted-Row-Rect" #f 75 12 75 32 ()}
      {Lisp-Entry "Report-Figure?" #f 78 12 78 26 ()}
      {Lisp-Entry "Obscure-Unhighlighted?" #f 81 12 81 34 ()}
      {Lisp-Entry "pick-figure" #f 85 20 85 31 ("simulate-mouse-move" "cons" "invalidate-window" "tooltips?" "highlight" "menu" "click" "install-overlays" "exclude" "memq?" "not" "or" "and" "overlapped" "for-each" "obscure-unhighlighted?" "Obscure-Unhighlighted?" "report-figure?" "Report-Figure?" "highlight-figure?" "Highlight-Figure?" "All-Pickers" "set!" "setup-pick" "not-null?" "when" "get-toplevel" "toplevel" "process-windows" "windows" "let" "function" "with-locked-update" "In-Pick?" "unless" "include" "include:")}
      {Lisp-Entry "setup-pick" #f 116 13 116 23 ("end-pick" "set-escape-handler" "inhibit-view-cursor")}
      {Lisp-Entry "install-overlays" #f 121 13 121 29 ("tooltips?:" "highlight:" "menu:" "click:" "get-size" "size:" "0" "Point" "position:" "parent:" "Picker-Overlay" "new" "get-root" "root" "let" "window" "function" "for-each-window" "tooltips?" "highlight" "menu" "click" "overlapped")}
      {Lisp-Entry "remove-overlays" #f 135 13 135 28 ("close" "Picker-Overlay" "find-type" "overlay" "when" "get-root" "root" "let" "window" "function" "for-each-window" "overlapped")}
      {Lisp-Entry "for-each-window" #f 145 13 145 28 ("get-visible?" "View-Player" "is?" "Overlapped" "is-not?" "eq?" "or" "and" "when" "level" "window" "function" "for-each-descendant" "proc" "overlapped")}
      {Lisp-Entry "simulate-mouse-move" #f 155 13 155 32 ("Highlighted-Row-Rect" "Highlighted-View-Rect" "Highlighted-Root-Rect" "Highlighted-View" "Highlighted-Player" "set!" "highlight-info" "row-rect" "view-rect" "root-rect" "receive" "mouse-position" "pos" "find-picker" "picker" "get-overlapped" "overlapped" "get-root" "root" "get-display" "display" "get-player" "player" "let*" "when" "mouse-view" "view" "let")}
      {Lisp-Entry "find-picker" #f 172 13 172 24 ("All-Pickers" "eq?" "picker" "function" "find-if" "overlapped")}
      {Lisp-Entry "end-pick" #f 178 13 178 21 ("close-pickers" "set-escape-handler" "setup-highlight" "inhibit-view-cursor" "In-Pick?" "set!")}
      {Lisp-Entry "close-pickers" #f 186 13 186 26 ("set!" "All-Pickers" "remove-overlays" "for-each")}
      {Lisp-Entry "setup-highlight" #f 196 13 196 28 ("eq?" "and" "if" "Highlighted-Root-Rect" "set!" "old-player" "let" "Highlighted-Row-Rect" "Highlighted-View-Rect" "nu/=?" "Highlighted-View" "Highlighted-Player" "neq?" "or" "highlight-info" "row-rect" "view-rect" "root-rect" "player" "receive" "get-handle" "when" "window" "redraw-window" "define" "pos" "view")}
      {Lisp-Entry "highlight-info" #f 222 13 222 27 ("essay" "row-rect" "determine-row-rect" "view-row-rect" "acquire" "view-rect" "get-bounds" "root-rect" "get-root" "root" "get-display" "display" "get-player" "player" "let*" "values" "not" "if" "pos" "view")}
      {Lisp-Entry "determine-row-rect" #f 235 13 235 31 ("cell-rect" "view->tree" "cell" "let" "Tree-View" "is?" "when" "pos" "view")}
      {Lisp-Entry "Picker-Overlay" #f 247 7 247 21 ("View")
        {Lisp-Entry "click" #f 250 12 250 17 ("generate")}
        {Lisp-Entry "menu" #f 251 12 251 16 ("generate")}
        {Lisp-Entry "highlight" #f 252 12 252 21 ("generate")}
        {Lisp-Entry "tooltips?" #f 253 12 253 21 ("generate")}
        {Lisp-Entry "cursor-update" #f 261 11 261 24 (":spy" "set-cursor" "pos")}
        {Lisp-Entry "get-tooltip?" #f 270 11 270 23 ("tooltips?")}
        {Lisp-Entry "get-formatted-tooltip?" #f 274 11 274 33 ()}
        {Lisp-Entry "get-tooltip-context" #f 278 11 278 30 ("Label" "name:" "Font" "font:" "bounds:" "view-describe" "display-description" "text:" "self" "view:" "Tooltip-Context" "new" "player" "bounds" "either" "acquire" "rect" "determine-row-rect" "row-rect" "root" "get-bounds" "view-bounds" "get-root" "view-root" "get-player" "view-player" "let*" "when" "find-view-info" "view" "receive" "pos")}
        {Lisp-Entry "display-description" #f 295 11 295 30 ("format" ":bulleted" "list" "value" "name" "bind" "info" "function" "map" "cons" "description")}
        {Lisp-Entry "mouse-move" #f 308 11 308 21 ("self" "user-message" "not" "Report-Figure?" "setup-highlight" "eq?" "if" "proc" "let" "highlight" "when" "find-view-info" "view" "receive" "nextmethod" "pos")}
        {Lisp-Entry "mouse-up" #f 322 11 322 19 ("click" "end-pick" "function" "with-locked-update" "find-view-info" "view" "receive" "nextmethod" "pos")}
        {Lisp-Entry "find-view-info" #f 331 11 331 25 ("values" "essay" "view-pos" "list" "ignore:" "find-drawing" "view" "self" "acquire" "root-pos" "get-root" "root" "let*" "pos")}
        {Lisp-Entry "context-menu" #f 344 11 344 23 ("processed" "acquire" "track-popup-menu" "setup-actions" "get-root" "root" "let" "find-view-info" "view" "receive" "close-popups" "nextmethod" "menu" "not" "if" "pos")}
        {Lisp-Entry "setup-actions" #f 356 11 356 24 ("get-children" "execute:" "Event-Handler" "set-action-handler" "invoke" "self" ":action" "Action-Event" "new" "apply" "get-properties" "pos:" "view:" "augment" "properties" "when" "end-pick" "event" "execute" "get-action-handler" "action-handler" "let*" "item" "function" "for-each" "pos" "view" "menu")}
        {Lisp-Entry "Overlay-Color" #f 374 14 374 27 ("0.25" "alpha:" "Black" "name:" "Color")}
        {Lisp-Entry "Highlight-Color" #f 378 14 378 29 ("177" "blue:" "green:" "109" "red:" "Color")}
        {Lisp-Entry "Highlight-Proc" #f 381 14 381 28 ("Highlight-Color" "set-color" "2" "set-line-width" "solid" "'solid" "set-style" "surface" "function")}
        {Lisp-Entry "draw" #f 388 11 388 15 ("nu/=?" "Highlighted-View-Rect" "and" "Highlighted-Row-Rect" "Highlight-Proc" "Highlighted-Root-Rect" "rectangle" "Highlight-Figure?" "Overlay-Color" "get-bounds" "fill-rect" "Obscure-Unhighlighted?" "when" "get-root" "neq?" "Highlighted-Player" "not" "or" "if" "lv" "lh" "context" "surface")}}}})
"_inspector"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "inspector" "_inspector.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.inspector" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Unbound" #f 48 12 48 19 ("cons")}
      {Lisp-Entry "package-unbound" #f 52 20 52 35 ("Unbound")}
      {Lisp-Entry "package-info" #f 56 20 56 32 ("list" "128" "0" "subseq" "concatenate" "set!" "512" "cardinality" ">" "when" "more-value?" "context:" "frame:" "memq?" "or" "if" "more?" ":reader" "->string" "else" "cond" "presented" "object->serial" "serial" "Unbound" "eq?" "unbound?" "let*" ":value" "kind" "value" "name")}
      {Lisp-Entry "more-value?" #f 66 13 66 24 ("category?" "Field" "Number" "Char" "Boolean" "Symbol" "is-not?" "empty-string?" "null?" "not" "and" "value")}
      {Lisp-Entry "inspect-value" #f 82 20 82 33 ("inspect-slots" "else" "inspect-sequence" "Sequence" "inspect-table" "Table" "inspect-list" "List" "typecase" "value")}
      {Lisp-Entry "inspect-list" #f 90 13 90 25 ("get-output" "increase!" "rest" "'rest" "cdr" "set!" "car" "package-info" "put" "begin" "pair?" "if" "not-null?" "while" "0" "rank" "List-Factory" "new" "fact" "let" "lst")}
      {Lisp-Entry "inspect-table" #f 104 13 104 26 ("get-output" "package-info" "put" "value" "key" "function" "iterate-table" "List-Factory" "new" "fact" "let" "table")}
      {Lisp-Entry "inspect-sequence" #f 112 13 112 29 ("List" "coerce" "cardinality" "0" "naturals" "package-info" "map" "seq")}
      {Lisp-Entry "inspect-slots" #f 116 13 116 26 ("car" "key:" "<" "sort" "if" "slot-value" "else" "read-property" "property?" "cond" "field-name" "package-info" "slot" "function" "map" "infos" "all-slots" "slots" "class-of" "class" "let*" "object")}}})
"_jazz"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "_jazz.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz" #f 37 9 37 27 ("jazz")}})
"autoload"
 ({Lisp-File-Entry {File jazz.language.jazz "src" "jazz" "language" "jazz" "autoload.jazz"} 1237815288
    {Lisp-Entry "jazz.language.jazz.autoload" #f 37 9 37 36 ("jazz")}})
