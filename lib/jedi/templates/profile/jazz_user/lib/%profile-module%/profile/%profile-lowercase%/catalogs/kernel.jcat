"base"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "base.scm"} 1253395847
    {Lisp-Entry "jazz.make-version" define #f 42 9 42 26 ("version" "'version" "vector" "description" "recompile" "rebuild" "gambit-stamp" "gambit-version" "number")}
    {Lisp-Entry "jazz.version-number" define #f 45 9 45 28 ("1" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-gambit-version" define #f 48 9 48 36 ("2" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-gambit-stamp" define #f 51 9 51 34 ("3" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-rebuild" define #f 54 9 54 29 ("4" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-recompile" define #f 57 9 57 31 ("5" "vector-ref" "version")}
    {Lisp-Entry "jazz.version-description" define #f 60 9 60 33 ("6" "vector-ref" "version")}
    {Lisp-Entry "jazz.new-version" define #f 64 9 64 25 ("jazz.make-version" "description" "recompile" "rebuild" "gambit-stamp" "gambit-version" "version" "#!key")}
    {Lisp-Entry "jazz.split-version" define #f 81 9 81 27 ("values" "revision" "3" "minor" "5" "-" "0" "substring" "string->number" "major" "string-length" "len" "number->string" "str" "let" "number")}
    {Lisp-Entry "jazz.present-version" define #f 90 9 90 29 ("number->string" "string-append" "jazz.split-version" "revision" "minor" "major" "receive" "number")}
    {Lisp-Entry "jazz.source-versions-file" define #f 105 8 105 33 ()}
    {Lisp-Entry "jazz.source-versions" define #f 108 8 108 28 ()}
    {Lisp-Entry "jazz.source-version-number" define #f 111 8 111 34 ()}
    {Lisp-Entry "jazz.gambit-version" define #f 114 8 114 27 ()}
    {Lisp-Entry "jazz.gambit-stamp" define #f 117 8 117 25 ()}
    {Lisp-Entry "jazz.load-source-versions" define #f 121 8 121 33 ("cdr" "jazz.gambit-stamp" "jazz.gambit-version" "begin" "jazz.version-gambit-stamp" "gambit-stamp" "jazz.version-gambit-version" "gambit-version" "source-version" "null?" "not" "source-versions" "iter" "setup-gambit-version/stamp" "car" "jazz.version-number" "jazz.source-version-number" "read-all" "jazz.source-versions" "set!" "jazz.new-version" "apply" "eof-object?" "read" "read-version" "input" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "file-exists?" "if" "file" "load-versions" "string-append" "jazz.kernel-source" "and" "jazz.source-versions-file" "or" "determine-source-versions-file" "define" "lambda" "loaded?" "let")}
    {Lisp-Entry "jazz.get-source-versions" define #f 161 9 161 33 ("jazz.source-versions" "jazz.load-source-versions")}
    {Lisp-Entry "jazz.get-source-version-number" define #f 166 9 166 39 ("jazz.source-version-number" "jazz.load-source-versions")}
    {Lisp-Entry "jazz.get-gambit-version" define #f 171 9 171 32 ("jazz.gambit-version" "jazz.load-source-versions")}
    {Lisp-Entry "jazz.get-gambit-stamp" define #f 176 9 176 30 ("jazz.gambit-stamp" "jazz.load-source-versions")}
    {Lisp-Entry "jazz.gambit-uptodate?" define #f 181 9 181 30 (">" "or" ">=" "not" "if" "jazz.get-gambit-stamp" "gambit-stamp" "jazz.get-gambit-version" "gambit-version" "let" "system-stamp" "system-version")}
    {Lisp-Entry "jazz.print-configuration" define #f 197 9 197 33 ("newline" "destination:" "source-access?:" "eqv?" "interpret-kernel?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "not" "safety:" "windowing:" "platform:" "system:" "name:" "print-property" "if" "display" "output" "destination" "source-access?" "interpret-kernel?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "name")
      {Lisp-Entry "first?" define #f 198 10 198 16 ()}
      {Lisp-Entry "print-property" define #f 201 11 201 25 ("write" "output" "display" "set!" "first?" "if" "value" "property")}}
    {Lisp-Entry "jazz.user-build-directory" define #f 240 8 240 33 ()}
    {Lisp-Entry "jazz.get-user-build-directory" define #f 244 9 244 38 ("set!" "user-build-directory" "dir" "let" "jazz.user-build-directory" "or")
      {Lisp-Entry "user-build-directory" define #f 245 11 245 31 ("jazz.pathname-normalize" "jazz.create-directories" "dir" "let")}}
    {Lisp-Entry "jazz.parse-destination" define #f 256 9 256 31 ("+" "1" "-" "substring" "string->symbol" "0" "=" "string-length" "len" "jazz.string-find" "pos" "let" "not" "if" "proc" "dest")}
    {Lisp-Entry "jazz.destination-directory" define #f 271 9 271 35 ("bin" "jazz" "jazz.get-user-build-directory" "string-append" "user" "'user" "or" "case" "dirname" "alias" "lambda" "else" "jazz.format" "cond" "jazz.parse-destination" "source" "destination" "name")}
    {Lisp-Entry "jazz.pathname-type" define #f 287 8 287 26 ("file-type")}
    {Lisp-Entry "jazz.pathname-exists?" define #f 290 8 290 29 ("file-exists?")}
    {Lisp-Entry "jazz.pathname-standardize" define #f 294 9 294 34 ("jazz.string-replace" "path")}
    {Lisp-Entry "jazz.pathname-normalize" define #f 298 9 298 32 ("string-append" "and" "jazz.pathname-standardize" "standardized" "1" "-" "0" "substring" "path-normalize" "normalized" "jazz.string-ends-with?" "dir?" "string-length" "len" "let" "jazz.error" "jazz.pathname-exists?" "not" "if" "error?" "#!optional" "path")}
    {Lisp-Entry "jazz.create-directory" define #f 312 9 312 30 ("create-directory" "begin" "file-exists?" "not" "if" "feedback" "#!key" "dir")}
    {Lisp-Entry "jazz.create-directories" define #f 320 9 320 32 ("feedback:" "jazz.create-directory" "file-exists?" "jazz.join-strings" "subdir" "begin" "null?" "not" "cdr" "car" "equal?" "if" "scan" "iter" "jazz.split-string" "reverse" "path" "let" "feedback" "#!key" "dir")}
    {Lisp-Entry "jazz.directory-content" define #f 331 9 331 31 ("dot-and-dot-dot" "'dot-and-dot-dot" "ignore-hidden:" "path:" "list" "string?" "if" "directory-files" "directory")}
    {Lisp-Entry "jazz.directory-files" define #f 337 9 337 29 ("jazz.directory-content" "regular" "'regular" "string-append" "jazz.pathname-type" "eq?" "name" "lambda" "jazz.collect-if" "directory")}
    {Lisp-Entry "jazz.directory-directories" define #f 343 9 343 35 ("jazz.directory-content" "'directory" "string-append" "jazz.pathname-type" "eq?" "name" "lambda" "jazz.collect-if" "directory")}
    {Lisp-Entry "jazz.option?" define #f 354 9 354 21 ("string-ref" "char=?" "or" "string-length" "0" "<" "and" "arg")}
    {Lisp-Entry "jazz.convert-option" define #f 360 9 360 28 ("string-length" "1" "substring" "arg")}
    {Lisp-Entry "jazz.option=?" define #f 364 9 364 22 ("jazz.convert-option" "equal?" "jazz.option?" "and" "option" "arg")}
    {Lisp-Entry "jazz.get-option" define #f 369 9 369 24 ("cdr" "if" "assoc" "pair" "let" "options" "name")}
    {Lisp-Entry "jazz.split-command-line" define #f 376 9 376 32 ("reverse" "else" "begin" "cons" "member" "cond" "cdr" "rest" "jazz.convert-option" "opt" "car" "jazz.option?" "pair?" "and" "if" "rev-options" "args" "loop" "let" "cont" "missing-argument-for-option" "options-with-args" "options-with-no-args" "arguments")}
    {Lisp-Entry "jazz.call-process" define #f 403 9 403 26 ("jazz.error" "0" "=" "not" "if" "process-status" "code" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" "current-directory" "or" "directory:" "arguments:" "path:" "list" "open-process" "port" "let" "directory" "#!optional" "arguments" "path")}
    {Lisp-Entry "jazz.feedback" define #f 422 9 422 22 ("force-output" "newline" "jazz.format" "apply" "display" "rest" "fmt-string")}})
"boot"
 ({Lisp-File-Entry {File Jazz "kernel" "boot.scm"} 1250872130
    {Lisp-Entry "jazz.Kernel" define #f 37 8 37 19 ("list")}
    {Lisp-Entry "jazz.load-kernel" define #f 56 8 56 24 ("set!" "jazz.Kernel" "jazz.source" "string-append" "load" "path" "for-each" "begin" "not" "if" "lambda" "loaded?" "let")}})
"build"
 ({Lisp-File-Entry {File Jazz "kernel" "build.scm"} 1253395923
    {Lisp-Entry "jazz.setup-versions" define #f 42 9 42 28 ("validate-gambit-version" "jazz.source-versions-file" "set!")
      {Lisp-Entry "validate-gambit-version" define #f 43 11 43 34 ("wrong-version" "jazz.format" "stamp" "jazz.get-gambit-stamp" "gambit-stamp" "jazz.get-gambit-version" "gambit-version" "let" "system-stamp" "system-version" "jazz.gambit-uptodate?" "not" "if")
        {Lisp-Entry "wrong-version" define #f 44 13 44 26 ("1" "exit" "newline" "display" "message")}}}
    {Lisp-Entry "jazz.make-configuration" define #f 68 9 68 32 ("configuration" "'configuration" "vector" "destination" "source-access?" "interpret-kernel?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "name")}
    {Lisp-Entry "jazz.configuration-name" define #f 71 9 71 32 ("1" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-system" define #f 74 9 74 34 ("2" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-platform" define #f 77 9 77 36 ("3" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-windowing" define #f 80 9 80 37 ("4" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-safety" define #f 83 9 83 34 ("5" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-optimize?" define #f 86 9 86 37 ("6" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-debug-environments?" define #f 89 9 89 47 ("7" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-debug-location?" define #f 92 9 92 43 ("8" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-debug-source?" define #f 95 9 95 41 ("9" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-interpret-kernel?" define #f 98 9 98 45 ("10" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-source-access?" define #f 101 9 101 42 ("11" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.configuration-destination" define #f 104 9 104 39 ("12" "vector-ref" "configuration")}
    {Lisp-Entry "jazz.new-configuration" define #f 108 9 108 31 ("jazz.validate-destination" "jazz.validate-source-access?" "jazz.validate-interpret-kernel?" "jazz.validate-debug-source?" "jazz.validate-debug-location?" "jazz.validate-debug-environments?" "jazz.validate-optimize?" "jazz.validate-safety" "jazz.validate-windowing" "jazz.validate-platform" "jazz.validate-system" "jazz.validate-name" "jazz.make-configuration" "destination" "source-access?" "interpret-kernel?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "name" "#!key")}
    {Lisp-Entry "jazz.anonymous-configuration-file" define #f 142 8 142 41 ()}
    {Lisp-Entry "jazz.named-configurations-file" define #f 145 8 145 38 ()}
    {Lisp-Entry "jazz.configurations" define #f 148 8 148 27 ()}
    {Lisp-Entry "jazz.list-configurations" define #f 152 9 152 33 ("jazz.configurations" "jazz.sort-configurations" "jazz.describe-configuration" "for-each")}
    {Lisp-Entry "jazz.require-configuration" define #f 156 9 156 35 ("jazz.error" "not" "if" "jazz.find-configuration" "or" "name")}
    {Lisp-Entry "jazz.require-default-configuration" define #f 162 9 162 43 ("jazz.require-configuration")}
    {Lisp-Entry "jazz.find-configuration" define #f 166 9 166 32 ("jazz.load-configuration-file" "file-exists?" "string-append" "configuration-file" "jazz.destination-directory" "configuration-dir" "and" "car" "not" "if" "jazz.find-configuration-pair" "pair" "configuration" "let" "name")}
    {Lisp-Entry "jazz.find-configuration-pair" define #f 181 9 181 37 ("cdr" "jazz.configuration-name" "eq?" "car" "configuration" "null?" "if" "jazz.configurations" "configurations" "iter" "let" "name")}
    {Lisp-Entry "jazz.sort-configurations" define #f 191 9 191 33 ("symbol->string" "string-ci<?" "else" "not" "cond" "n2" "jazz.configuration-name" "n1" "let" "c2" "c1" "lambda" "jazz.sort" "configurations")}
    {Lisp-Entry "jazz.split-configurations" define #f 204 9 204 34 ("cons" "cdr" "jazz.configuration-name" "not" "car" "configuration" "values" "null?" "if" "named" "anonymous" "split" "let" "configurations")}
    {Lisp-Entry "jazz.register-configuration" define #f 214 9 214 36 ("jazz.save-configurations" "list" "append" "jazz.configurations" "set!" "set-car!" "if" "jazz.find-configuration-pair" "pair" "jazz.configuration-name" "name" "let" "configuration")}
    {Lisp-Entry "jazz.delete-configuration" define #f 223 9 223 34 ("jazz.save-configurations" "jazz.configuration-name" "eq?" "c2" "c1" "lambda" "jazz.delete" "jazz.configurations" "set!" "name")}
    {Lisp-Entry "jazz.load-configurations" define #f 232 9 232 33 ("jazz.load-configuration-file" "jazz.register-configuration" "jazz.anonymous-configuration-file" "read-all" "jazz.configurations" "set!" "jazz.new-configuration" "apply" "eof-object?" "read" "let" "read-configuration" "define" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "jazz.named-configurations-file" "file-exists?" "if")}
    {Lisp-Entry "jazz.load-configuration-file" define #f 247 9 247 37 ("read" "jazz.new-configuration" "apply" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "file")}
    {Lisp-Entry "jazz.save-configurations" define #f 253 9 253 33 ("configuration" "for-each" "jazz.named-configurations-file" "jazz.feedback" "feedback:" "jazz.create-directories" "begin" "null?" "not" "jazz.sort-configurations" "configurations" "let" "delete-file" "file-exists?" "print-configuration" "output" "lambda" "jazz.anonymous-configuration-file" "call-with-output-file" "if" "jazz.configurations" "jazz.split-configurations" "named" "anonymous" "receive")
      {Lisp-Entry "print-configuration" define #f 254 11 254 30 ("jazz.configuration-destination" "jazz.configuration-source-access?" "jazz.configuration-interpret-kernel?" "jazz.configuration-debug-source?" "jazz.configuration-debug-location?" "jazz.configuration-debug-environments?" "jazz.configuration-optimize?" "jazz.configuration-safety" "jazz.configuration-windowing" "jazz.configuration-platform" "jazz.configuration-system" "jazz.configuration-name" "jazz.print-configuration" "output" "configuration")}}
    {Lisp-Entry "jazz.describe-configuration" define #f 288 9 288 36 ("eqv?" "not" "if" "or" "jazz.feedback" "jazz.configuration-destination" "destination" "jazz.configuration-source-access?" "source-access?" "jazz.configuration-interpret-kernel?" "interpret-kernel?" "jazz.configuration-debug-source?" "debug-source?" "jazz.configuration-debug-location?" "debug-location?" "jazz.configuration-debug-environments?" "debug-environments?" "jazz.configuration-optimize?" "optimize?" "jazz.configuration-safety" "safety" "jazz.configuration-windowing" "windowing" "jazz.configuration-platform" "platform" "jazz.configuration-system" "system" "jazz.configuration-name" "name" "let" "configuration")}
    {Lisp-Entry "jazz.configure" define #f 328 9 328 23 ("jazz.describe-configuration" "jazz.register-configuration" "destination:" "source-access?:" "interpret-kernel?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "name:" "jazz.new-configuration" "configuration" "let" "jazz.require-destination" "jazz.require-source-access?" "jazz.require-interpret-kernel?" "jazz.require-debug-source?" "jazz.require-debug-location?" "jazz.require-debug-environments?" "jazz.require-optimize?" "jazz.require-safety" "jazz.require-windowing" "jazz.require-platform" "jazz.require-system" "jazz.require-name" "let*" "destination" "source-access?" "interpret-kernel?" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system" "name" "#!key")}
    {Lisp-Entry "jazz.require-name" define #f 377 9 377 26 ("name")}
    {Lisp-Entry "jazz.validate-name" define #f 381 9 381 27 ("jazz.error" "symbol->string" "jazz.valid-filename?" "symbol?" "and" "not" "or" "if" "name")}
    {Lisp-Entry "jazz.default-system" define #f 394 12 394 31 ("'gambit")}
    {Lisp-Entry "jazz.default-system" define #f 397 12 397 31 ()}
    {Lisp-Entry "jazz.valid-systems" define #f 400 8 400 26 ()}
    {Lisp-Entry "jazz.require-system" define #f 404 9 404 28 ("jazz.unspecified-feature" "jazz.default-system" "or" "system")}
    {Lisp-Entry "jazz.validate-system" define #f 408 9 408 29 ("jazz.error" "jazz.valid-systems" "memq" "if" "system")}
    {Lisp-Entry "jazz.valid-platforms" define #f 419 8 419 28 ()}
    {Lisp-Entry "jazz.require-platform" define #f 425 9 425 30 ("jazz.guess-platform" "or" "platform")}
    {Lisp-Entry "jazz.guess-platform" define #f 429 9 429 28 ("windows" "'windows" "else" "unix" "'unix" "linux-gnu" "'linux-gnu" "mac" "'mac" "apple" "'apple" "eq?" "cond" "caddr" "os" "system-type" "cadr" "system" "let")}
    {Lisp-Entry "jazz.validate-platform" define #f 437 9 437 31 ("jazz.error" "jazz.valid-platforms" "memq" "if" "platform")}
    {Lisp-Entry "jazz.valid-windowings" define #f 448 8 448 29 ()}
    {Lisp-Entry "jazz.require-windowing" define #f 454 9 454 31 ("jazz.guess-windowing" "or" "windowing" "platform")}
    {Lisp-Entry "jazz.guess-windowing" define #f 458 9 458 29 ("unix" "windows" "x11" "'x11" "mac" "case" "platform")}
    {Lisp-Entry "jazz.validate-windowing" define #f 465 9 465 32 ("jazz.error" "jazz.valid-windowings" "memq" "if" "windowing")}
    {Lisp-Entry "jazz.default-safety" define #f 476 8 476 27 ("'release")}
    {Lisp-Entry "jazz.valid-safeties" define #f 479 8 479 27 ()}
    {Lisp-Entry "jazz.require-safety" define #f 485 9 485 28 ("jazz.unspecified-feature" "jazz.default-safety" "or" "safety")}
    {Lisp-Entry "jazz.validate-safety" define #f 489 9 489 29 ("jazz.error" "jazz.valid-safeties" "memq" "if" "safety")}
    {Lisp-Entry "jazz.valid-optimize" define #f 500 8 500 27 ()}
    {Lisp-Entry "jazz.require-optimize?" define #f 505 9 505 31 ("optimize")}
    {Lisp-Entry "jazz.validate-optimize?" define #f 509 9 509 32 ("jazz.error" "jazz.valid-optimize" "memq" "if" "optimize")}
    {Lisp-Entry "jazz.valid-debug-environments" define #f 520 8 520 37 ()}
    {Lisp-Entry "jazz.require-debug-environments?" define #f 525 9 525 41 ("debug-environments")}
    {Lisp-Entry "jazz.validate-debug-environments?" define #f 529 9 529 42 ("jazz.error" "jazz.valid-debug-environments" "memq" "if" "debug-environments")}
    {Lisp-Entry "jazz.valid-debug-location" define #f 540 8 540 33 ()}
    {Lisp-Entry "jazz.require-debug-location?" define #f 545 9 545 37 ("debug-location")}
    {Lisp-Entry "jazz.validate-debug-location?" define #f 549 9 549 38 ("jazz.error" "jazz.valid-debug-location" "memq" "if" "debug-location")}
    {Lisp-Entry "jazz.valid-debug-source" define #f 560 8 560 31 ()}
    {Lisp-Entry "jazz.require-debug-source?" define #f 565 9 565 35 ("debug-source")}
    {Lisp-Entry "jazz.validate-debug-source?" define #f 569 9 569 36 ("jazz.error" "jazz.valid-debug-source" "memq" "if" "debug-source")}
    {Lisp-Entry "jazz.valid-interpret-kernel" define #f 580 8 580 35 ()}
    {Lisp-Entry "jazz.require-interpret-kernel?" define #f 585 9 585 39 ("interpret-kernel")}
    {Lisp-Entry "jazz.validate-interpret-kernel?" define #f 589 9 589 40 ("jazz.error" "jazz.valid-interpret-kernel" "memq" "if" "interpret-kernel")}
    {Lisp-Entry "jazz.require-source-access?" define #f 600 9 600 36 ("source-access")}
    {Lisp-Entry "jazz.validate-source-access?" define #f 604 9 604 37 ("jazz.error" "eqv?" "or" "if" "source-access")}
    {Lisp-Entry "jazz.require-destination" define #f 616 9 616 33 ("destination")}
    {Lisp-Entry "jazz.validate-destination" define #f 620 9 620 34 ("jazz.error" "jazz.valid-filename?" "'bin" "eq?" "bin" "jazz" "user" "memq" "title" "alias" "lambda" "jazz.parse-destination" "string?" "and" "not" "or" "if" "destination")}
    {Lisp-Entry "jazz.configuration-directory" define #f 632 9 632 37 ("jazz.configuration-destination" "jazz.configuration-name" "jazz.destination-directory" "configuration")}
    {Lisp-Entry "jazz.configuration-file" define #f 639 9 639 32 ("string-append" "jazz.configuration-directory" "dir" "let" "configuration")}
    {Lisp-Entry "jazz.unspecified-feature" define #f 649 9 649 33 ("jazz.error" "feature")}
    {Lisp-Entry "jazz.default-target" define #f 658 8 658 27 ("'jazz")}
    {Lisp-Entry "jazz.make-symbols" define #f 662 9 662 26 ("console-port" "newline" "tail" "make-symbol" "symbol" "not" "jazz.default-target" "list" "null?" "if" "scan" "iter" "jazz.error" "else" "cdr" "set!" "-jobs" "-j" "jobs:" "j:" "car" "case" "option" "for-each" "jobs" "let" "options" "lambda" "parse-symbols" "local?" "symbols")
      {Lisp-Entry "parse-target/configuration/image" define #f 663 11 663 43 ("0" "substring" "string->symbol" "standardize-image" "string-length" "1" "+" "=" "image" "configuration" "target" "lambda" "parse-target/configuration" "not" "if" "jazz.string-find" "colon" "let" "proc" "str")}
      {Lisp-Entry "parse-target/configuration" define #f 677 11 677 37 ("jazz.require-configuration" "string-length" "1" "+" "configuration" "substring" "0" "=" "target" "jazz.require-default-configuration" "string->symbol" "jazz.default-target" "string=?" "not" "if" "jazz.string-find" "at" "let" "proc" "str")}
      {Lisp-Entry "standardize-image" define #f 691 11 691 28 ("jazz.error" "else" "'executable" "executable" "exe" "'library" "library" "lib" "memv" "cond" "image")}
      {Lisp-Entry "parse-symbols" define #f 696 11 696 24 ("else" "cadr" "cons" "cddr" "cdr" "pair?" "0" "symbol->string" "string-ref" "eqv?" "and" "jazz.error" "keyword?" "symbol?" "or" "not" "cond" "car" "obj" "reverse" "null?" "if" "options" "syms" "symbols" "scan" "iter" "let" "proc")}
      {Lisp-Entry "make-symbol" define #f 712 11 712 22 ("local?" "make-target" "image" "configuration" "target" "lambda" "parse-target/configuration/image" "symbol->string" "name" "let" "jobs" "symbol")}
      {Lisp-Entry "make-target" define #f 718 11 718 22 ("jazz.make-product" "else" "jazz.make-install" "install" "jazz.make-kernel" "kernel" "jazz.make-cleankernel" "cleankernel" "jazz.make-clean" "clean" "case" "local?" "jobs" "image" "configuration" "target")}}
    {Lisp-Entry "jazz.make" define #f 748 9 748 18 ("list" "jazz.make-symbols" "symbol")}
    {Lisp-Entry "jazz.build-recursive" define #f 757 9 757 29 (",argument" "jazz.call-process" "windows" "'windows" "jazz.configuration-platform" "eq?" "gsc-path" "symbol->string" "jazz.format" "if" "string-append" "argument" "jazz.configuration-name" "configuration-name" "let" "image" "configuration" "target")}
    {Lisp-Entry "jazz.make-clean" define #f 776 9 776 24 ("jazz.configuration-directory" "jazz.delete-directory" "jazz.feedback" "configuration")}
    {Lisp-Entry "jazz.make-cleankernel" define #f 781 9 781 30 ("jazz.empty-directory" "file-exists?" "if" "jazz.configuration-directory" "dir" "let" "jazz.feedback" "configuration")}
    {Lisp-Entry "jazz.make-install" define #f 793 9 793 26 ("jazz.error" "configuration")}
    {Lisp-Entry "jazz.make-kernel" define #f 802 9 802 25 ("kernel" "'kernel" "jazz.build-recursive" "jazz.build-kernel" "if" "local?" "image" "configuration")}
    {Lisp-Entry "jazz.build-kernel" define #f 808 9 808 26 ("jazz.load-configuration-file" "build" "file-exists?" "if" "jazz.configuration-file" "configuration-file" "jazz.require-default-configuration" "or" "let" "jazz.feedback" "image" "configuration")
      {Lisp-Entry "build" define #f 809 11 809 16 ("console?:" "kernel?:" "image" "image:" "destination-directory:" "destination:" "source-access?:" "source:" "interpret-kernel?:" "include-compiler?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "jazz.build-image" "jazz.configuration-directory" "destination-directory" "jazz.configuration-destination" "destination" "jazz.configuration-source-access?" "source-access?" "source" "jazz.configuration-interpret-kernel?" "interpret-kernel?" "jazz.configuration-debug-source?" "debug-source?" "jazz.configuration-debug-location?" "debug-location?" "jazz.configuration-debug-environments?" "debug-environments?" "jazz.configuration-optimize?" "optimize?" "jazz.configuration-safety" "safety" "jazz.configuration-windowing" "windowing" "jazz.configuration-platform" "platform" "jazz.configuration-system" "system" "jazz.configuration-name" "name" "let" "configuration")}}
    {Lisp-Entry "jazz.make-product" define #f 856 9 856 26 ("product-make" "jazz.make-kernel" "jobs" "configuration" "product")
      {Lisp-Entry "product-make" define #f 857 11 857 23 ("number->string" "if" "symbol->string" "jazz.call-process" "else" "windows" "case" "kernel-path" "string-append" "path" "build-file" "define" "jazz.configuration-platform" "platform" "jazz.configuration-directory" "destdir" "let" "jobs" "configuration" "product")}}
    {Lisp-Entry "jazz.print" define #f 881 9 881 19 ("newline" "display" "output" "line")}
    {Lisp-Entry "jazz.debug" define #f 886 9 886 19 ("console-port" "jazz.print" "rest")}
    {Lisp-Entry "jazz.format" define #f 895 9 895 20 ("get-output-string" "format-to" "open-output-string" "output" "let" "arguments" "fmt-string")
      {Lisp-Entry "format-to" define #f 896 11 896 20 ("else" "write-char" "eqv?" "cond" "begin" "eof-object?" "not" "if" "c" "iter" "newline" "%" "write" "s" "cdr" "set!" "car" "display" "a" "case" "read-char" "read" "directive" "format-directive" "define" "done?" "open-input-string" "control" "let" "arguments" "fmt-string" "output")}}
    {Lisp-Entry "jazz.collect-if" define #f 934 9 934 24 ("cdr" "cons" "car" "value" "null?" "not" "if" "scan" "iter" "let" "lst" "predicate")}
    {Lisp-Entry "jazz.filter" define #f 944 9 944 20 ("cons" "eq?" "new-tail" "cdr" "tail" "car" "head" "null?" "if" "recur" "let" "lis" "pred")}
    {Lisp-Entry "jazz.delete" define #f 956 9 956 20 ("not" "y" "lambda" "jazz.filter" "test" "lis" "x")}
    {Lisp-Entry "jazz.sort" define #f 960 9 960 18 ("merge-sort" "smaller" "l")
      {Lisp-Entry "merge-sort" define #f 961 11 961 21 ("merge" "l2" "split" "merge-sort" "l1" "let*" "cdr" "null?" "or" "if" "l")
        {Lisp-Entry "merge" define #f 962 13 962 18 ("cdr" "merge" "cons" "smaller" "if" "e2" "car" "e1" "let" "else" "null?" "cond" "l2" "l1")}
        {Lisp-Entry "split" define #f 971 13 971 18 ("cddr" "split" "car" "cons" "cdr" "null?" "or" "if" "l")}}}
    {Lisp-Entry "jazz.string-find" define #f 990 9 990 25 ("1" "+" "else" "string-ref" "char=?" ">=" "cond" "0" "n" "iter" "string-length" "len" "let" "c" "str")}
    {Lisp-Entry "jazz.string-replace" define #f 1001 9 1001 28 ("string-set!" "string-ref" "eqv?" "begin" "0" ">=" "if" "1" "string-length" "-" "n" "iter" "string-copy" "cpy" "let" "new" "old" "str")}
    {Lisp-Entry "jazz.string-ends-with?" define #f 1012 9 1012 31 ("-" "substring" "string=?" ">=" "and" "tl" "string-length" "sl" "let" "target" "str")}
    {Lisp-Entry "jazz.split-string" define #f 1019 9 1019 26 ("+" "substring" "cons" "set!" "string-ref" "eqv?" "begin" "0" ">" "if" "1" "-" "pos" "iter" "string-length" "end" "lst" "let" "separator" "str")}
    {Lisp-Entry "jazz.join-strings" define #f 1033 9 1033 26 ("get-output-string" "cdr" "string" "lambda" "for-each" "car" "display" "open-output-string" "output" "let" "separator" "strings")}
    {Lisp-Entry "jazz.valid-filename?" define #f 1048 9 1048 29 ("memv" "char-numeric?" "char-alphabetic?" "or" "string-ref" "c" "0" "<" "if" "1" "string-length" "-" "n" "iter" "let" "str")}
    {Lisp-Entry "jazz.delete-directory" define #f 1060 9 1060 30 ("delete-directory" "jazz.empty-directory" "begin" "file-exists?" "if" "0" "level" "#!optional" "dir")}
    {Lisp-Entry "jazz.empty-directory" define #f 1067 9 1067 29 ("jazz.directory-directories" "1" "+" "jazz.delete-directory" "jazz.directory-files" "delete-file" "jazz.feedback" "2" "<" "string-append" "path" "let" "member" "not" "or" "if" "name" "lambda" "for-each" "0" "level" "ignored" "#!optional" "dir")}
    {Lisp-Entry "jazz.error" define #f 1089 9 1089 19 ("error" "jazz.format" "apply" "error-string" "let" "rest" "fmt-string")}
    {Lisp-Entry "jazz.prompt" define #f 1099 8 1099 19 ()}
    {Lisp-Entry "jazz.display-exception?" define #f 1102 8 1102 31 ()}
    {Lisp-Entry "jazz.display-backtrace?" define #f 1105 8 1105 31 ()}
    {Lisp-Entry "jazz.build-system-repl" define #f 1109 9 1109 31 ("process-command" "set!" "continuation-return" "debug-exception" "exc" "with-exception-handler" "stop" "lambda" "continuation-capture" "processed?" "read-line" "command" "jazz.prompt" "display" "newline" "if" "newline?" "loop" "force-output" "jazz.get-source-version-number" "jazz.present-version" "jazz.format" "jazz.print" "console-port" "console" "let")
      {Lisp-Entry "process-command" define #f 1110 11 1110 26 ("jazz.error" "else" "quit" "help-command" "?" "help" "make-command" "make" "configure-command" "configure" "delete-command" "delete" "list-command" "list" "case" "read-all" "arguments" "begin" "read" "let" "input" "lambda" "call-with-input-string" "quit-command" "eof-object?" "if" "output" "command")}
      {Lisp-Entry "list-command" define #f 1130 11 1130 23 ("jazz.list-configurations" "output" "arguments")}
      {Lisp-Entry "delete-command" define #f 1133 11 1133 25 ("jazz.list-configurations" "jazz.require-configuration" "jazz.delete-configuration" "car" "null?" "if" "name" "let" "output" "arguments")}
      {Lisp-Entry "configure-command" define #f 1138 11 1138 28 ("jazz.configure" "apply" "output" "arguments")}
      {Lisp-Entry "make-command" define #f 1141 11 1141 23 ("jazz.make-symbols" "output" "arguments")}
      {Lisp-Entry "help-command" define #f 1144 11 1144 23 ("jazz.print" "output" "arguments")}
      {Lisp-Entry "quit-command" define #f 1153 11 1153 23 ("exit" "output" "arguments")}
      {Lisp-Entry "debug-exception" define #f 1156 11 1156 26 ("1000" "0" "display-continuation-backtrace" "cont" "lambda" "continuation-capture" "jazz.display-backtrace?" "display-exception" "jazz.display-exception?" "if" "console" "exc")}}
    {Lisp-Entry "jazz.build-system-boot" define #f 1190 9 1190 31 ("jazz.format" "fatal" "else" "##repl-debug-main" "jazz.print" "console-port" "console" "or" "map" "jazz.make-symbols" "jazz.load-kernel-build" "unknown-option" "destination:" "interpret-kernel?:" "debug-source?:" "debug-location?:" "debug-environments?:" "optimize?:" "safety:" "windowing:" "platform:" "system:" "name:" "jazz.configure" "string-option" "destination" "interpret-kernel" "debug-source" "debug-location" "debug-environments" "boolean-option" "optimize" "safety" "windowing" "platform" "system" "symbol-option" "remaining" "options" "lambda" "missing-argument-for-option" "jazz.split-command-line" "jazz.require-configuration" "jazz.delete-configuration" "read-argument" "name" "exit" "jazz.list-configurations" "equal?" "cond" "arguments" "car" "action" "jazz.build-system-repl" "null?" "if" "command-line" "cdr" "command-arguments" "let")
      {Lisp-Entry "fatal" define #f 1191 11 1191 16 ("1" "exit" "force-output" "newline" "display" "message")}
      {Lisp-Entry "missing-argument-for-option" define #f 1197 11 1197 38 ("jazz.format" "fatal" "opt")}
      {Lisp-Entry "read-argument" define #f 1200 11 1200 24 ("read" "init:" "list" "call-with-input-string" "arg")}
      {Lisp-Entry "string-option" define #f 1204 11 1204 24 ("not" "if" "jazz.get-option" "opt" "let" "options" "name")}
      {Lisp-Entry "symbol-option" define #f 1210 11 1210 24 ("string->symbol" "not" "if" "jazz.get-option" "opt" "let" "options" "name")}
      {Lisp-Entry "boolean-option" define #f 1216 11 1216 25 ("jazz.format" "fatal" "else" "string-ci=?" "not" "cond" "jazz.get-option" "opt" "let" "default" "options" "name")}
      {Lisp-Entry "unknown-option" define #f 1227 11 1227 25 ("jazz.format" "fatal" "opt")}}
    {Lisp-Entry "jazz.kernel-system" define #f 1287 8 1287 26 ("'gambit")}
    {Lisp-Entry "jazz.kernel-platform" define #f 1290 8 1290 28 ()}
    {Lisp-Entry "jazz.kernel-windowing" define #f 1293 8 1293 29 ()}
    {Lisp-Entry "jazz.kernel-safety" define #f 1296 8 1296 26 ("'debug")}
    {Lisp-Entry "jazz.kernel-optimize?" define #f 1299 8 1299 29 ()}
    {Lisp-Entry "jazz.kernel-debug-environments?" define #f 1302 8 1302 39 ()}
    {Lisp-Entry "jazz.kernel-debug-location?" define #f 1305 8 1305 35 ()}
    {Lisp-Entry "jazz.kernel-debug-source?" define #f 1308 8 1308 33 ()}
    {Lisp-Entry "jazz.kernel-destination" define #f 1311 8 1311 31 ()}
    {Lisp-Entry "jazz.load-kernel-base" define #f 1315 9 1315 30 ("load")}
    {Lisp-Entry "jazz.load-kernel-build" define #f 1319 9 1319 31 ("load")}}
  {Lisp-File-Entry {File Jazz "kernel" "runtime" "build.scm"} 1252768921
    {Lisp-Entry "jazz.for-each-source-version" define #f 45 9 45 37 ("jazz.get-source-versions" "for-each" "proc")}
    {Lisp-Entry "jazz.for-each-higher-source-version" define #f 49 9 49 44 ("cdr" "begin" "jazz.version-number" ">" "car" "source-version" "null?" "not" "if" "jazz.get-source-versions" "source-versions" "iter" "let" "proc" "version")}
    {Lisp-Entry "jazz.kernel/product-needs-rebuild?" define #f 59 9 59 43 ("set!" "all" "kernel" "jazz.version-rebuild" "memq" "source-version" "lambda" "jazz.for-each-higher-source-version" "rebuild?" "let" "jazz.gambit-uptodate?" "or" "not" "if" "jazz.load-version-file" "gambit-stamp" "gambit-version" "version" "receive" "version-file")}
    {Lisp-Entry "jazz.kernel/product-architecture-needs-rebuild?" define #f 72 9 72 56 ("set!" "jazz.version-recompile" "all" "kernel" "jazz.version-rebuild" "memq" "source-version" "lambda" "jazz.for-each-higher-source-version" "rebuild-architecture?" "let" "jazz.gambit-uptodate?" "or" "not" "if" "jazz.load-version-file" "gambit-stamp" "gambit-version" "version" "receive" "version-file")}
    {Lisp-Entry "jazz.load-version-file" define #f 86 9 86 31 ("values" "gambit-stamp" "gambit-version" "read" "version" "let" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "file-exists?" "if" "version-file")}
    {Lisp-Entry "jazz.manifest-needs-rebuild?-impl" define #f 97 9 97 42 ("set!" "memq" "and" "all" "'all" "eq?" "or" "if" "jazz.version-recompile" "recompile" "jazz.version-rebuild" "rebuild" "source-version" "lambda" "jazz.for-each-higher-source-version" "rebuild?" "%%manifest-version" "version" "%%manifest-name" "name" "let" "manifest")}
    {Lisp-Entry "jazz.build-image-impl" define #f 116 9 116 30 ("jazz.create-directories" "generate-gambcini" "jazz.print-configuration" "generate-configuration" "jazz.executable-extension" "path-expand" "path-strip-trailing-directory-separator" "jazz.call-process" "link-options" "unix" "link-libraries" "gambit-link-libraries" "jazz.quote-gcc-pathname" "list" "resource-file" "resource-files" "feedback:" "jazz.copy-file" "windows" "case" "else" "cond" "'jazz.source-access?" "jazz.relativise-directory" "jazz.source" "'jazz.source" "jazz.source-built" "'jazz.source-built" "jazz.pathname-normalize" "jazz.built" "'jazz.built" "executable" "'executable" "jazz.image" "'jazz.image" "jazz.product" "'jazz.product" "jazz.print-variable" "link-image" "image-file" "base:" "link-incremental" "link-flat" "files" "<" "link-file" "generate-resources" "main-filename" "product-filename" "compile-product-file" "generate-main" "main?" "generate-product" "product?" "compile-product" "build-product" "jazz.print-architecture" "file" "load" "begin" "compile-source-file" "compile-kernel-file" "generate-architecture" "architecture?" "compile-kernel" "build-kernel" "jazz.file-modification-time" "kernel-time" "system-stamp" "system-version" "jazz.get-source-version-number" "write" "lambda" "call-with-output-file" "touched?" "set!" "delete-file" "file-exists?" "touch" "was-touched?" "jazz.kernel/product-architecture-needs-rebuild?" "rebuild-architecture?" "jazz.kernel/product-needs-rebuild?" "proc" "version-file" "with-version-file" "jazz.update-manifest-compile-time" "output:" "options:" "compile-file-to-c" "path-normalize" "jazz.pathname-standardize" "standardized-path" "debug-source" "debug-location" "debug-environments" "options" "jazz.file-exists?" "or" "jazz.load-updated-manifest" "jazz.manifest-uptodate?" "hash-changed?" "jazz.Manifest-Extension" "mnf" "dst" "src" "dir" "name" "rebuild?" "compile-file" "apply" "rest" "fmt-string" "feedback-message" "newline" "display" "output" "line" "print" "product-file" "kernel-file" "build-file" "path" "source-file" "define" "product-dir" "string-append" "kernel-dir" "library" "'library" "eq?" "library-image?" "gambit-library" "symbol->string" "not" "if" "product-name" "let" "jazz.feedback" "feedback" "maximum-heap" "minimum-heap" "console?" "kernel?" "image" "jazz.kernel-install" "destination-directory" "jazz.kernel-destination" "destination" "jazz.source-access?" "source-access?" "jazz.kernel-source" "source" "interpret-kernel?" "include-compiler?" "jazz.kernel-debug-source?" "debug-source?" "jazz.kernel-debug-location?" "debug-location?" "jazz.kernel-debug-environments?" "debug-environments?" "jazz.kernel-optimize?" "optimize?" "jazz.kernel-safety" "safety" "jazz.kernel-windowing" "windowing" "jazz.kernel-platform" "platform" "jazz.kernel-system" "system" "#!key" "product")}
    {Lisp-Entry "jazz.executable-extension" define #f 574 9 574 34 ("else" "windows" "case" "platform")}
    {Lisp-Entry "jazz.print-architecture" define #f 582 9 582 32 ("jazz.get-source-version-number" "jazz.kernel-version" "'jazz.kernel-version" "jazz.kernel-destination" "'jazz.kernel-destination" "jazz.kernel-debug-source?" "'jazz.kernel-debug-source?" "jazz.kernel-debug-location?" "'jazz.kernel-debug-location?" "jazz.kernel-debug-environments?" "'jazz.kernel-debug-environments?" "jazz.kernel-optimize?" "'jazz.kernel-optimize?" "jazz.kernel-safety" "'jazz.kernel-safety" "jazz.kernel-windowing" "'jazz.kernel-windowing" "jazz.kernel-platform" "'jazz.kernel-platform" "newline" "jazz.kernel-system" "'jazz.kernel-system" "jazz.print-variable" "output" "destination" "debug-source?" "debug-location?" "debug-environments?" "optimize?" "safety" "windowing" "platform" "system")}
    {Lisp-Entry "jazz.print-variable" define #f 604 9 604 28 ("write" "list?" "symbol?" "or" "if" "newline" "display" "output" "value" "variable")}})
"common"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "common.scm"} 1252768921
    {Lisp-Entry "jazz.manifest-needs-rebuild?" define #f 45 8 45 36 ()}
    {Lisp-Entry "jazz.build-image" define #f 50 8 50 24 ()}
    {Lisp-Entry "jazz.build-feedback" define #f 59 8 59 27 ("jazz.feedback")}
    {Lisp-Entry "jazz.listify" define #f 68 9 68 21 ("%%list" "%%pair?" "%%null?" "or" "if" "obj")}
    {Lisp-Entry "jazz.collect-if" define #f 74 9 74 24 ("%%cdr" "%%cons" "%%car" "value" "%%null?" "%%not" "if" "scan" "iter" "let" "lst" "predicate")}
    {Lisp-Entry "jazz.remove" define #f 85 9 85 20 ("%%cons" "%%cdr" "%%eq?" "%%car" "value" "%%null?" "%%not" "if" "scan" "iter" "let" "lst" "item")}
    {Lisp-Entry "jazz.string-find" define #f 101 9 101 25 ("1" "%%fx+" "else" "%%string-ref" "%%char=?" "%%fx>=" "cond" "n" "iter" "%%string-length" "len" "let" "0" "start" "#!optional" "c" "str")}
    {Lisp-Entry "jazz.string-replace" define #f 113 9 113 28 ("%%string-set!" "%%string-ref" "%%eqv?" "begin" "0" "%%fx>=" "if" "1" "%%string-length" "%%fx-" "n" "iter" "string-copy" "cpy" "let" "new" "old" "str")}
    {Lisp-Entry "jazz.string-starts-with?" define #f 125 9 125 33 ("0" "%%substring" "%%string=?" "%%fx>=" "and" "tl" "%%string-length" "sl" "let" "target" "str")}
    {Lisp-Entry "jazz.string-ends-with?" define #f 132 9 132 31 ("%%fx-" "%%substring" "%%string=?" "%%fx>=" "and" "tl" "%%string-length" "sl" "let" "target" "str")}
    {Lisp-Entry "jazz.split-string" define #f 139 9 139 26 ("%%fx+" "%%substring" "%%cons" "set!" "%%string-ref" "%%eqv?" "begin" "0" "%%fx>" "if" "1" "%%fx-" "pos" "iter" "%%string-length" "end" "lst" "let" "separator" "str")}
    {Lisp-Entry "jazz.join-strings" define #f 154 9 154 26 ("get-output-string" "%%cdr" "string" "lambda" "for-each" "%%car" "display" "open-output-string" "output" "let" "separator" "strings")}
    {Lisp-Entry "jazz.split-composite" define #f 169 9 169 29 ("%%string-length" "1" "%%fx+" "0" "%%substring" "%%string->symbol" "values" "%%not" "if" "jazz.string-find-reversed" "n" "%%symbol->string" "str" "let" "identifier")}
    {Lisp-Entry "jazz.executable-directory" define #f 183 8 183 33 ()}
    {Lisp-Entry "jazz.file-modification-time" define #f 187 9 187 36 ("file-last-modification-time" "time->seconds" "pathname")}
    {Lisp-Entry "jazz.copy-file" define #f 191 9 191 23 ("copy-file" "delete-file" "file-exists?" "begin" "jazz.file-needs-update?" "if" "feedback" "#!key" "dst" "src")}
    {Lisp-Entry "jazz.file-needs-update?" define #f 201 9 201 32 ("jazz.file-modification-time" ">" "file-exists?" "%%not" "or" "dst" "src")}
    {Lisp-Entry "jazz.relativise-directory" define #f 207 9 207 34 ("%%string-append" "set!" "%%string-ref" "%%eqv?" "begin" "1" "%%fx-" "n" "iter" "relative-dir" "suffix" "0" "%%substring" "%%string=?" "%%fx>=" "and" "if" "baselen" "%%string-length" "len" "jazz.pathname-normalize" "let" "basedir" "dir")}
    {Lisp-Entry "jazz.quote-gcc-pathname" define #f 226 9 226 32 ("else" "string-append" "windows" "case" "platform" "pathname")}
    {Lisp-Entry "jazz.file-exists?" define #f 237 12 237 29 ("file-exists?")}
    {Lisp-Entry "jazz.updated-digest-source?" define #f 248 9 248 36 ("sha-1" "'sha-1" "digest-file" "%%digest-source-hash-set!" "%%digest-source-time-set!" "begin" "%%digest-source-time" "=" "if" "jazz.file-modification-time" "time" "let" "src-filepath" "digest")}
    {Lisp-Entry "jazz.Manifest-Extension" define #f 263 8 263 31 ()}
    {Lisp-Entry "jazz.load-manifest" define #f 267 9 267 27 ("%%make-digest" "%%make-manifest" "%%boolean?" "%%cdr" "source-time" "%%car" "source-hash" "compile-time-hash" "references" "'references" "references-form" "digest" "'digest" "digest-form" "%%cddr" "version" "'version" "%%assq" "version-form" "%%cadr" "name" "read" "form" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "jazz.file-exists?" "if" "pathname" "let" "filepath")}
    {Lisp-Entry "jazz.save-manifest" define #f 289 9 289 27 ("%%cdr" "library-references" "for-each" "%%car" "%%pair?" "begin" "if" "%%digest-source-time" "%%digest-source-hash" "%%digest-compile-time-hash" "write" "newline" "display" "output" "lambda" "call-with-output-file" "%%manifest-references" "references" "%%manifest-digest" "digest" "%%manifest-version" "version" "%%manifest-name" "name" "let" "manifest" "filepath")}
    {Lisp-Entry "jazz.manifest-uptodate?" define #f 328 9 328 32 ("%%digest-compile-time-hash" "%%digest-source-hash" "%%string=?" "%%manifest-digest" "digest" "let" "manifest")}
    {Lisp-Entry "jazz.load/create-manifest" define #f 333 9 333 34 ("0" "%%make-digest" "jazz.kernel-version" "%%make-manifest" "jazz.load-manifest" "or" "manifest-filepath" "name")}
    {Lisp-Entry "jazz.load-updated-manifest" define #f 338 9 338 35 ("jazz.save-manifest" "jazz.updated-digest-source?" "if" "%%manifest-digest" "digest" "jazz.load/create-manifest" "manifest" "let" "src-filepath" "manifest-filepath" "name")}
    {Lisp-Entry "jazz.update-manifest-compile-time" define #f 346 9 346 42 ("jazz.save-manifest" "%%digest-source-hash" "%%digest-compile-time-hash-set!" "%%manifest-references-set!" "if" "jazz.updated-digest-source?" "%%manifest-digest" "digest" "jazz.kernel-version" "%%manifest-version-set!" "jazz.load/create-manifest" "manifest" "let" "updated-references" "src-filepath" "manifest-filepath" "name")}})
"declares"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "declares.scm"} 1252768921
    {Lisp-Entry "jazz.kernel-declares" define-macro #f 39 24 39 44 ()}
    {Lisp-Entry "jazz.declares" define #f 63 13 63 26 ("kind")}})
"digest"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "digest.scm"} 1236190768
    {Lisp-Entry "fx+" define-macro #f 18 15 18 18 ("args")}
    {Lisp-Entry "fx-" define-macro #f 19 15 19 18 ("args")}
    {Lisp-Entry "fx*" define-macro #f 20 15 20 18 ("args")}
    {Lisp-Entry "fxquotient" define-macro #f 21 15 21 25 ("args")}
    {Lisp-Entry "fxmin" define-macro #f 22 15 22 20 ("args")}
    {Lisp-Entry "fx=" define-macro #f 23 15 23 18 ("args")}
    {Lisp-Entry "fx<" define-macro #f 24 15 24 18 ("args")}
    {Lisp-Entry "fx>" define-macro #f 25 15 25 18 ("args")}
    {Lisp-Entry "fx<=" define-macro #f 26 15 26 19 ("args")}
    {Lisp-Entry "fx>=" define-macro #f 27 15 27 19 ("args")}
    {Lisp-Entry "fxnot" define-macro #f 28 15 28 20 ("args")}
    {Lisp-Entry "fxand" define-macro #f 29 15 29 20 ("args")}
    {Lisp-Entry "fxior" define-macro #f 30 15 30 20 ("args")}
    {Lisp-Entry "fxxor" define-macro #f 31 15 31 20 ("args")}
    {Lisp-Entry "fxarithmetic-shift-right" define-macro #f 32 15 32 39 ("args")}
    {Lisp-Entry "fxarithmetic-shift-left" define-macro #f 33 15 33 38 ("args")}
    {Lisp-Entry "make-vector" define-macro #f 34 15 34 26 ("args")}
    {Lisp-Entry "make-u8vector" define-macro #f 35 15 35 28 ("args")}
    {Lisp-Entry "u8vector" define-macro #f 36 15 36 23 ("args")}
    {Lisp-Entry "u8vector-length" define-macro #f 37 15 37 30 ("args")}
    {Lisp-Entry "u8vector-ref" define-macro #f 38 15 38 27 ("args")}
    {Lisp-Entry "u8vector-set!" define-macro #f 39 15 39 28 ("args")}
    {Lisp-Entry "read-subu8vector" define-macro #f 40 15 40 31 ("args")}
    {Lisp-Entry "string-append" define-macro #f 41 15 41 28 ("args")}
    {Lisp-Entry "make-string" define-macro #f 42 15 42 26 ("args")}
    {Lisp-Entry "open-input-file" define-macro #f 43 15 43 30 ("args")}
    {Lisp-Entry "close-input-port" define-macro #f 44 15 44 31 ("args")}
    {Lisp-Entry "number->string" define-macro #f 45 15 45 29 ("args")}
    {Lisp-Entry "digest" define #f 49 13 49 19 ("state" "update" "end" "digest-f65996cb-c1aa-4ee9-86cd-1af55b5ddb74" "id:")}
    {Lisp-Entry "hash-block->hex-string" define #f 57 9 57 31 ("8" "12" "fxarithmetic-shift-right" "hex" "string-set!" "j2" "2" "fx+" "j1" "fxxor" "vector-ref" "x" "0" "fx<" "if" "j" "1" "fx-" "i" "loop" "let" "make-string" "str" "4" "fx*" "n" "16" "fxquotient" "len" "let*" "width" "big-endian?" "hb")
      {Lisp-Entry "hex" define #f 59 11 59 14 ("15" "fxand" "string-ref" "x")}}
    {Lisp-Entry "hash-block->u8vector" define #f 89 9 89 29 ("#xff" "fxand" "8" "fxarithmetic-shift-right" "u8vector-set!" "j2" "fx+" "j1" "fxxor" "vector-ref" "x" "fx<" "if" "j" "1" "fx-" "i" "loop" "let" "0" "make-u8vector" "u8vect" "2" "fx*" "n" "16" "fxquotient" "len" "let*" "width" "big-endian?" "hb")}
    {Lisp-Entry "LO" define-macro #f 103 15 103 17 ("L" "'L" "symbol->string" "string-append" "string->symbol" "var")}
    {Lisp-Entry "HI" define-macro #f 107 15 107 17 ("H" "'H" "symbol->string" "string-append" "string->symbol" "var")}
    {Lisp-Entry "wlet" define-macro #f 111 15 111 19 ("body" "hi" "lo" "var")}
    {Lisp-Entry "cast-u16" define-macro #f 120 15 120 23 ("x")}
    {Lisp-Entry "shift-left-u16" define-macro #f 123 15 123 29 ("shift" "n")}
    {Lisp-Entry "wshr" define-macro #f 128 15 128 19 ("0" ",body" "fx-" "HI" "shift-left-u16" ",r" ",w" "LO" "fxarithmetic-shift-right" "fxior" ",dst" "wlet" "16" "fx<" "if" "body" "r" "w" "dst")}
    {Lisp-Entry "wrot" define-macro #f 141 15 141 19 ("32" ",body" "fx-" "HI" "fxarithmetic-shift-right" ",r" ",w" "LO" "shift-left-u16" "fxior" ",dst" "wlet" "16" "fx<" "if" "body" "r" "w" "dst")}
    {Lisp-Entry "wadd" define-macro #f 160 15 160 19 ("body" "b" "a" "dst")}
    {Lisp-Entry "wxor" define-macro #f 171 15 171 19 ("body" "b" "a" "dst")}
    {Lisp-Entry "wior" define-macro #f 177 15 177 19 ("body" "b" "a" "dst")}
    {Lisp-Entry "wand" define-macro #f 183 15 183 19 ("body" "b" "a" "dst")}
    {Lisp-Entry "wnot" define-macro #f 189 15 189 19 ("body" "a" "dst")}
    {Lisp-Entry "wref" define-macro #f 195 15 195 19 (",i" ",body" "1" "0" "2" "fx*" "fx+" ",v" "vector-ref" ",dst" "wlet" "number?" "if" "body" "i" "v" "dst")}
    {Lisp-Entry "wset" define-macro #f 206 15 206 19 (",i" "HI" "1" ",x" "LO" "0" "2" "fx*" "fx+" ",v" "vector-set!" "begin" "number?" "if" "x" "i" "v")}
    {Lisp-Entry "block-digest" define #f 217 13 217 25 ("width" "big-endian?" "bit-pos" "block-pos" "block" "hash" "hash-update" "block-digest-f65996cb-c1aa-4ee9-86cd-1af55b5ddb74" "id:")}
    {Lisp-Entry "convert-hash-block" define #f 227 9 227 27 ("error" "else" "hash-block->u8vector" "u8vector" "block-digest-width" "block-digest-big-endian?" "hash-block->hex-string" "hex" "case" "block-digest-hash" "hash" "digest-state" "bd" "let*" "result-type" "digest")}
    {Lisp-Entry "process-last-block" define #f 244 9 244 27 ("u8vector-ref" "t" "fx>=" "3" "loop3" "block-digest-big-endian?" "fx+" "begin" "fx>" "7" "2" "i" "loop2" "fxarithmetic-shift-right" "#x01" "#x7f" "fxarithmetic-shift-left" "fxior" "1" "#xff" "u8vector-set!" "digest-update-subu8vector" "fxmin" "m" "fx<" "if" "n" "loop1" "448" "fx-" "511" "fxand" "fxquotient" "zero-padding-bytes" "let" "#x80" "digest-update-u8" "0" "8" "make-u8vector" "buf" "block-digest-bit-pos" "bit-pos" "block-digest-block-pos" "block-pos" "digest-state" "bd" "let*" "digest")}
    {Lisp-Entry "end-block-digest" define #f 300 9 300 25 ("convert-hash-block" "process-last-block" "result-type" "digest")}
    {Lisp-Entry "digest-update-block-digest" define #f 304 9 304 35 ("else" "cond" "block-digest-bit-pos" "2" "16" "block-digest-bit-pos-set!" "aligned16" "block-digest-block-pos" "block-digest-block-pos-set!" "block-digest-hash-update" "512" "vector-ref" "fx+" "new-bit-pos" "8" "u8vector-ref" "fxarithmetic-shift-left" "vector-set!" "1" "fxxor" "block-digest-big-endian?" "begin" "15" "fxand" "0" "fx=" "4" "fxarithmetic-shift-right" "j" "let" "fx<" "if" "bit-pos" "i" "aligned8" "define" "block-digest-block" "block" "digest-state" "bd" "let*" "end" "start" "u8vect" "digest")}
    {Lisp-Entry "hash-block-init-sha-1" define #f 402 9 402 30 ("#xc3d2" "#xe1f0" "#x1032" "#x5476" "#x98ba" "#xdcfe" "#xefcd" "#xab89" "#x6745" "#x2301" "vector")}
    {Lisp-Entry "digest-update-sha-1" define #f 409 9 409 28 ("NEWE" "NEWD" "NEWC" "NEWB" "NEWA" "80" "T5-H" "T5-L" "fx+" "30" "Y" "E" "5" "A" "Y-H" "Y-L" "#xca62" "#xc1d6" "else" "T7-H" "T7-L" "#x8f1b" "#xbcdc" "60" "T4-H" "T4-L" "#x6ed9" "#xeba1" "40" "T6-H" "T6-L" "stage3" "wadd" "#x5a82" "#x7999" "wlet" "wior" "D" "wnot" "C" "B" "wand" "20" "cond" "X-H" "X-L" "wset" "begin" "X" "wrot" "T7" "T6" "T5" "14" "T4" "T3" "wxor" "8" "T2" "fx-" "T1-H" "T1-L" "stage2" "T1" "16" "fx<" "if" "stage1" "define" "OLDE-H" "E-H" "OLDE-L" "E-L" "OLDD-H" "D-H" "OLDD-L" "D-L" "OLDC-H" "C-H" "OLDC-L" "C-L" "OLDB-H" "B-H" "OLDB-L" "B-L" "OLDA-H" "A-H" "OLDA-L" "A-L" "j" "loop" "let" "4" "OLDE" "3" "OLDD" "2" "OLDC" "1" "OLDB" "0" "OLDA" "wref" "block-digest-block" "block" "block-digest-hash" "hash" "digest-state" "bd" "let*" "digest")}
    {Lisp-Entry "open-digest-sha-1" define #f 498 9 498 26 ("0" "160" "make-vector" "hash-block-init-sha-1" "digest-update-sha-1" "make-block-digest" "digest-update-block-digest" "end-block-digest" "make-digest")}
    {Lisp-Entry "open-digest" define #f 513 9 513 20 ("error" "else" "open-digest-sha-1" "SHA-1" "sha-1" "case" "algorithm")}
    {Lisp-Entry "digest-default-result-type" define-macro #f 520 15 520 41 ("''hex")}
    {Lisp-Entry "close-digest" define #f 522 9 522 21 ("digest-default-result-type" "result-type" "#!optional" "digest")}
    {Lisp-Entry "digest-update-subu8vector" define #f 528 9 528 34 ("end" "start" "u8vect" "digest")}
    {Lisp-Entry "zero-u8vector" define #f 531 8 531 21 ("0" "4" "make-u8vector")}
    {Lisp-Entry "get-zero-u8vector" define #f 533 9 533 26 ("zero-u8vector")}
    {Lisp-Entry "digest-update-u8" define #f 535 9 535 25 ("#xff" "fxand" "1" "make-u8vector" "get-zero-u8vector" "0" "eqv?" "if" "digest-update-subu8vector" "n" "digest")}
    {Lisp-Entry "digest-string" define #f 544 9 544 22 ("string-length" "0" "digest-substring" "digest-default-result-type" "result-type" "#!optional" "algorithm" "str")}
    {Lisp-Entry "digest-substring" define #f 556 9 556 25 ("digest-subu8vector" "1" "fx+" "string-ref" "char->integer" "u8vector-set!" "begin" "fx<" "if" "0" "i" "loop" "let" "make-u8vector" "u8vect" "fx-" "len" "let*" "digest-default-result-type" "result-type" "#!optional" "algorithm" "end" "start" "str")}
    {Lisp-Entry "digest-u8vector" define #f 572 9 572 24 ("u8vector-length" "0" "digest-subu8vector" "digest-default-result-type" "result-type" "#!optional" "algorithm" "u8vect")}
    {Lisp-Entry "digest-subu8vector" define #f 584 9 584 27 ("close-digest" "digest-update-subu8vector" "open-digest" "digest" "let" "digest-default-result-type" "result-type" "#!optional" "algorithm" "end" "start" "u8vect")}
    {Lisp-Entry "digest-file" define #f 595 9 595 20 ("digest-update-subu8vector" "close-digest" "close-input-port" "begin" "fx=" "if" "0" "read-subu8vector" "n" "loop" "make-u8vector" "buf" "1024" "bufsize" "open-input-file" "in" "let*" "open-digest" "digest" "let" "digest-default-result-type" "result-type" "#!optional" "algorithm" "filename")}})
"expansion"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "expansion.scm"} 1236190768
    {Lisp-Entry "jazz.source-code" define #f 37 9 37 25 ("##source-code" "##source?" "if" "expr")}
    {Lisp-Entry "jazz.generate-symbol" define #f 43 8 43 28 ("##string->symbol" "1" "##fixnum.+" "set!" "##number->string" "##string-append" "name" "##car" "##null?" "if" "prefix" "rest" "lambda" "0" "unique" "let")}
    {Lisp-Entry "jazz.simplify-begin" define #f 52 9 52 28 ("##cadr" "##cddr" "##null?" "##cdr" "begin" "'begin" "##car" "##eq?" "##pair?" "and" "if" "form")}
    {Lisp-Entry "jazz.with-uniqueness" define #f 61 9 61 29 (",expr" ",value" "jazz.generate-symbol" "value" "let" "jazz.source-code" "##symbol?" "if" "proc" "expr")}
    {Lisp-Entry "%%force-uniqueness" define-macro #f 69 20 69 38 (",code" "##cdr" "%%force-uniqueness" "lambda" ",variable" "jazz.with-uniqueness" "##car" "variable" "let" "##null?" "if" "code" "variables")}
    {Lisp-Entry "jazz.define-check-macro" define-macro #f 83 20 83 43 ("type" "test" "name")}
    {Lisp-Entry "%%check-continuation" define-macro #f 92 25 92 45 ("##continuation?")}
    {Lisp-Entry "%%check-fixnum" define-macro #f 96 25 96 39 ("##fixnum?")}
    {Lisp-Entry "%%check-foreign" define-macro #f 100 25 100 40 ("##foreign?")}
    {Lisp-Entry "%%check-list" define-macro #f 104 25 104 37 ("list?")}
    {Lisp-Entry "%%check-locat" define-macro #f 108 25 108 38 ("##locat?")}
    {Lisp-Entry "%%check-port" define-macro #f 112 25 112 37 ("##port?")}
    {Lisp-Entry "%%check-procedure" define-macro #f 116 25 116 42 ("##procedure?")}
    {Lisp-Entry "%%check-readenv" define-macro #f 120 25 120 40 ("jazz.readenv?")}
    {Lisp-Entry "%%check-readtable" define-macro #f 124 25 124 42 ("##readtable?")}
    {Lisp-Entry "%%check-source" define-macro #f 128 25 128 39 ("##source?")}
    {Lisp-Entry "%%check-string" define-macro #f 132 25 132 39 ("##string?")}
    {Lisp-Entry "%%check-symbol" define-macro #f 136 25 136 39 ("##symbol?")}})
"features"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "features.scm"} 1248276005
    {Lisp-Entry "jazz.install-features" define-macro #f 42 15 42 36 (",features" "',features" "cons" "##cond-expand-features" "set!" "if" "feature" "lambda" "for-each" "jazz.kernel-safety" "jazz.kernel-windowing" "jazz.kernel-platform" "jazz.kernel-system" "list" "features" "let")}
    {Lisp-Entry "jazz.debug-core?" define #f 62 8 62 24 ("core" "'core" "jazz.kernel-safety" "eq?")}
    {Lisp-Entry "jazz.debug-user?" define #f 65 8 65 24 ("release" "'release" "jazz.kernel-safety" "eq?" "not")}})
"header"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "header.scm"} 1252923643
    {Lisp-Entry "jazz.define-macro" define-macro #f 45 23 45 40 ("jazz.register-macro" ",src" "form-size" "##make-macro-descr" "car" "##interaction-cte" "##top-cte-add-macro!" ",pattern" "##define-macro" "begin" ",@rest" "cdr" "lambda" "src" "let" "rest" "pattern")
      {Lisp-Entry "form-size" define #f 47 11 47 20 ("else" "null?" "+" "cdr" "-" "#!rest" "#!key" "#!optional" "memq" "if" "car" "parm" "pair?" "cond" "1" "n" "lst" "loop" "let" "parms")}}
    {Lisp-Entry "jazz.define-syntax" define-macro #f 81 23 81 41 ("expander" "name")}
    {Lisp-Entry "jazz.subtype-vector" define #f 102 8 102 27 ("macro-subtype-vector")}
    {Lisp-Entry "jazz.subtype-pair" define #f 103 8 103 25 ("macro-subtype-pair")}
    {Lisp-Entry "jazz.subtype-ratnum" define #f 104 8 104 27 ("macro-subtype-ratnum")}
    {Lisp-Entry "jazz.subtype-cpxnum" define #f 105 8 105 27 ("macro-subtype-cpxnum")}
    {Lisp-Entry "jazz.subtype-symbol" define #f 106 8 106 27 ("macro-subtype-symbol")}
    {Lisp-Entry "jazz.subtype-keyword" define #f 107 8 107 28 ("macro-subtype-keyword")}
    {Lisp-Entry "jazz.subtype-continuation" define #f 108 8 108 33 ("macro-subtype-continuation")}
    {Lisp-Entry "jazz.subtype-procedure" define #f 109 8 109 30 ("macro-subtype-procedure")}
    {Lisp-Entry "jazz.subtype-string" define #f 110 8 110 27 ("macro-subtype-string")}
    {Lisp-Entry "jazz.subtype-flonum" define #f 111 8 111 27 ("macro-subtype-flonum")}
    {Lisp-Entry "jazz.subtype-bignum" define #f 112 8 112 27 ("macro-subtype-bignum")}
    {Lisp-Entry "jazz.subtype-foreign" define #f 113 8 113 28 ("macro-subtype-foreign")}
    {Lisp-Entry "jazz.subtype-s8vector" define #f 114 8 114 29 ("macro-subtype-s8vector")}
    {Lisp-Entry "jazz.subtype-u8vector" define #f 115 8 115 29 ("macro-subtype-u8vector")}
    {Lisp-Entry "jazz.subtype-s16vector" define #f 116 8 116 30 ("macro-subtype-s16vector")}
    {Lisp-Entry "jazz.subtype-u16vector" define #f 117 8 117 30 ("macro-subtype-u16vector")}
    {Lisp-Entry "jazz.subtype-s32vector" define #f 118 8 118 30 ("macro-subtype-s32vector")}
    {Lisp-Entry "jazz.subtype-u32vector" define #f 119 8 119 30 ("macro-subtype-u32vector")}
    {Lisp-Entry "jazz.subtype-s64vector" define #f 120 8 120 30 ("macro-subtype-s64vector")}
    {Lisp-Entry "jazz.subtype-u64vector" define #f 121 8 121 30 ("macro-subtype-u64vector")}
    {Lisp-Entry "jazz.subtype-f32vector" define #f 122 8 122 30 ("macro-subtype-f32vector")}
    {Lisp-Entry "jazz.subtype-f64vector" define #f 123 8 123 30 ("macro-subtype-f64vector")}
    {Lisp-Entry "jazz.subtype-boxvalues" define #f 124 8 124 30 ("macro-subtype-boxvalues")}
    {Lisp-Entry "macro-code-run-fixed" define-macro #f 132 17 132 37 ("rte" "c")}
    {Lisp-Entry "jazz.code-cte" define #f 137 9 137 22 ("macro-code-cte" "c")}
    {Lisp-Entry "jazz.code-run" define #f 140 9 140 22 ("macro-code-run-fixed" "rte" "c")}
    {Lisp-Entry "jazz.rte-up" define #f 149 9 149 20 ("macro-rte-up" "r")}
    {Lisp-Entry "jazz.repl-context-bind" define #f 158 9 158 31 ("repl-context" "macro-dynamic-bind" "thunk" "val")}
    {Lisp-Entry "jazz.continuation-denv" define #f 167 9 167 31 ("macro-continuation-denv" "cont")}
    {Lisp-Entry "jazz.current-repl-context" define #f 176 9 176 34 ("macro-current-repl-context")}
    {Lisp-Entry "jazz.repl-context-level" define #f 179 9 179 32 ("macro-repl-context-level" "context")}
    {Lisp-Entry "jazz.repl-context-depth" define #f 182 9 182 32 ("macro-repl-context-depth" "context")}
    {Lisp-Entry "jazz.repl-context-cont" define #f 185 9 185 31 ("macro-repl-context-cont" "context")}
    {Lisp-Entry "jazz.repl-context-initial-cont" define #f 188 9 188 39 ("macro-repl-context-initial-cont" "context")}
    {Lisp-Entry "jazz.repl-context-prev-level" define #f 191 9 191 37 ("macro-repl-context-prev-level" "context")}
    {Lisp-Entry "jazz.repl-context-prev-depth" define #f 194 9 194 37 ("macro-repl-context-prev-depth" "context")}
    {Lisp-Entry "jazz.make-repl-context" define #f 197 9 197 31 ("macro-make-repl-context" "prev-depth" "prev-level" "reason" "initial-cont" "cont" "depth" "level")}
    {Lisp-Entry "jazz.readtable-named-char-table" define #f 206 9 206 40 ("macro-readtable-named-char-table" "rt")}
    {Lisp-Entry "jazz.readtable-named-char-table-set!" define #f 209 9 209 45 ("macro-readtable-named-char-table-set!" "nc" "rt")}
    {Lisp-Entry "jazz.readtable-start-syntax" define #f 212 9 212 36 ("macro-readtable-start-syntax" "rt")}
    {Lisp-Entry "jazz.readenv?" define #f 221 9 221 22 ("macro-readenv?" "obj")}
    {Lisp-Entry "jazz.readenv-port" define #f 224 9 224 26 ("macro-readenv-port" "re")}
    {Lisp-Entry "jazz.readenv-wrap" define #f 227 9 227 26 ("macro-readenv-wrap" "x" "re")}
    {Lisp-Entry "jazz.writeenv-port" define #f 236 9 236 27 ("macro-writeenv-port" "we")}
    {Lisp-Entry "jazz.btq-owner" define #f 245 9 245 23 ("macro-btq-owner" "mutex")}
    {Lisp-Entry "jazz.absent-object?" define #f 254 9 254 28 ("macro-absent-obj" "##eq?" "obj")}})
"install"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "install.scm"} 1236190768
    {Lisp-Entry "platform-executable-path" define #f 49 8 49 32 ()}})
"macros"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "macros.scm"} 1236190768
    {Lisp-Entry "jazz.Macros" define #f 37 8 37 19 ("eq?" "test:" "make-table")}
    {Lisp-Entry "jazz.register-macro" define #f 41 9 41 28 ("jazz.Macros" "table-set!" "macro" "name")}
    {Lisp-Entry "jazz.get-macro" define #f 45 9 45 23 ("jazz.Macros" "table-ref" "name")}
    {Lisp-Entry "jazz.need-macro" define #f 49 9 49 24 ("jazz.error" "jazz.get-macro" "or" "name")}
    {Lisp-Entry "jazz.expand-macro" define #f 54 9 54 26 ("cdr" "car" "jazz.need-macro" "apply" "form")}})
"module"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "module.scm"} 1253311789
    {Lisp-Entry "jazz.display" define-macro #f 46 22 46 34 ("display")}
    {Lisp-Entry "jazz.write" define-macro #f 47 22 47 32 ("write")}
    {Lisp-Entry "jazz.format" define #f 55 9 55 20 ("else" "get-output-string" "format-to" "open-output-string" "output" "let" ":string" "case" "arguments" "fmt-string" "port" "lambda" "parse-format" "rest")
      {Lisp-Entry "parse-format" define #f 56 11 56 23 ("%%cddr" "%%cadr" "%%cdr" ":string" "':string" "%%car" "%%string?" "if" "proc" "rest")}
      {Lisp-Entry "format-to" define #f 61 11 61 20 ("write-char" "%%eqv?" "cond" "begin" "%%eof-object?" "%%not" "c" "iter" "jazz.kernel-error" "else" "newline" "%" "display" "if" "element" "lambda" "for-each" "first?" "l" "t" "jazz.write" "s" "%%cdr" "set!" "%%car" "jazz.display" "a" "case" "read-char" "read" "directive" "format-directive" "define" "done?" "open-input-string" "control" "let" "arguments" "fmt-string" "output")}}
    {Lisp-Entry "jazz.pristine-thread-continuation" define #f 119 8 119 41 ("cont" "continuation-capture" "lambda" "make-thread" "thread-start!" "thread-join!")}
    {Lisp-Entry "jazz.kernel-error" define #f 134 9 134 26 ("error" "%%apply" "rest")}
    {Lisp-Entry "jazz.raise-system-error" define #f 138 9 138 32 ("error" "jazz.format" "apply" "error-string" "let" "rest" "fmt-string")}
    {Lisp-Entry "jazz.error" define #f 143 8 143 18 ()}
    {Lisp-Entry "jazz.primitive-type-error" define #f 147 9 147 34 ("%%cons" "jazz.format" "error" "args" "proc" "type" "num")}
    {Lisp-Entry "jazz.some?" define #f 156 9 156 19 ("%%cdr" "%%car" "or" "%%null?" "if" "scan" "iter" "let" "lst" "predicate")}
    {Lisp-Entry "jazz.every?" define #f 165 9 165 20 ("%%cdr" "%%car" "and" "%%null?" "or" "scan" "iter" "let" "lst" "predicate")}
    {Lisp-Entry "jazz.string-find-reversed" define #f 178 9 178 34 ("else" "%%string-ref" "%%char=?" "0" "%%fx<" "cond" "1" "%%string-length" "%%fx-" "n" "iter" "let" "c" "str")}
    {Lisp-Entry "jazz.global-variable?" define #f 198 13 198 34 ("global-bound?" "symbol")}
    {Lisp-Entry "jazz.global-value" define #f 201 13 201 30 ("global-ref" "symbol")}
    {Lisp-Entry "jazz.global-variable?" define #f 205 13 205 34 ("%%global-var-ref" "%%unbound?" "%%not" "%%global-var?" "and" "symbol")}
    {Lisp-Entry "jazz.global-value" define #f 209 13 209 30 ("%%global-var-ref" "symbol")}
    {Lisp-Entry "jazz.pathname-dir" define #f 220 9 220 26 ("1" "%%fx+" "0" "%%substring" "%%not" "if" "jazz.string-find-reversed" "pos" "let" "pathname")}
    {Lisp-Entry "jazz.pathname-name" define #f 227 9 227 27 ("%%string-length" "1" "%%fx+" "%%substring" "%%not" "if" "jazz.string-find-reversed" "pos" "let" "pathname")}
    {Lisp-Entry "jazz.pathname-base" define #f 234 9 234 27 ("0" "%%substring" "if" "jazz.string-find-reversed" "pos" "jazz.pathname-name" "name" "let" "pathname")}
    {Lisp-Entry "jazz.pathname-extension" define #f 242 9 242 32 ("%%string-length" "1" "%%fx+" "%%substring" "if" "jazz.string-find-reversed" "pos" "let" "pathname")}
    {Lisp-Entry "jazz.file-delete" define #f 251 12 251 28 ("delete-file")}
    {Lisp-Entry "jazz.file-copy" define #f 254 12 254 26 ("copy-file")}
    {Lisp-Entry "jazz.directory-exists?" define #f 257 12 257 34 ("file-exists?")}
    {Lisp-Entry "jazz.directory-create" define #f 260 12 260 33 ("create-directory")}
    {Lisp-Entry "jazz.kernel-built" define #f 271 8 271 25 ("jazz.built")}
    {Lisp-Entry "jazz.kernel-install" define #f 275 8 275 27 ("jazz.built" "jazz.pathname-normalize" "jazz.executable-directory" "executable" "'executable" "jazz.image" "%%eq?" "and" "or")}
    {Lisp-Entry "jazz.kernel-source-built" define #f 280 8 280 32 ("jazz.source-built")}
    {Lisp-Entry "jazz.kernel-source" define #f 284 8 284 26 ("jazz.kernel-install" "%%string-append" "jazz.pathname-normalize" "jazz.source" "jazz.string-starts-with?" "jazz.product" "%%not" "jazz.source-access?" "or" "if")}
    {Lisp-Entry "jazz.jazz-product" define #f 294 9 294 26 ("jazz.product")}
    {Lisp-Entry "jazz.jazz-profile" define #f 298 9 298 26 ("jazz.profile")}
    {Lisp-Entry "jazz.profile" define #f 302 8 302 20 ("make-parameter")}
    {Lisp-Entry "jazz.run-loop?" define #f 307 8 307 22 ("make-parameter")}
    {Lisp-Entry "jazz.Repository-Filename" define #f 316 8 316 32 ()}
    {Lisp-Entry "jazz.repository?" define #f 320 9 320 25 ("repository" "'repository" "%%vector-ref" "%%eq?" "0" "%%vector-length" "%%fx>" "%%vector?" "and" "obj")}
    {Lisp-Entry "jazz.make-repository" define #f 326 9 326 29 ("jazz.error" "%%make-repository" "library-directory" "write" "newline" "display" "output" "lambda" "jazz.Repository-Filename" "call-with-output-file" "begin" "or" "jazz.pathname-normalize" "%%string-append" "directory" "let" "jazz.create-directories" "jazz.directory-exists?" "%%not" "and" "if" "error?" "binary?" "#!key" "library-root" "subdir" "dir" "dirname" "name")}
    {Lisp-Entry "jazz.Bin-Repository" define #f 351 8 351 27 ("binary?:" "jazz.kernel-install" "Bin" "'Bin" "jazz.make-repository")}
    {Lisp-Entry "jazz.Jazz-Repository" define #f 354 8 354 28 ("error?:" "jazz.kernel-source" "Jazz" "'Jazz" "jazz.make-repository")}
    {Lisp-Entry "jazz.User-Repository" define #f 357 8 357 28 ("User" "'User" "jazz.make-repository")}
    {Lisp-Entry "jazz.all-repositories" define #f 361 9 361 30 ()
      {Lisp-Entry "listify" define #f 362 11 362 18 ("%%list" "if" "repository")}}
    {Lisp-Entry "jazz.Repositories" define #f 372 8 372 25 ("jazz.all-repositories")}
    {Lisp-Entry "jazz.get-repositories" define #f 376 9 376 30 ("jazz.Repositories")}
    {Lisp-Entry "jazz.load-repository" define #f 380 9 380 29 ("%%make-repository" "%%not" "library-directory" "if" "library-root" "library" "'library" "%%assq" "library-pair" "jazz.pathname-normalize" "%%cddr" "alist" "%%cadr" "name" "read" "form" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "jazz.Repository-Filename" "%%string-append" "repository-file" "let" "directory")}
    {Lisp-Entry "jazz.install-repository" define #f 394 9 394 32 ("jazz.setup-repository" "%%list" "%%append" "jazz.Repositories" "set!" "jazz.load-repository" "repository" "let" "directory")}
    {Lisp-Entry "jazz.install-repository-if-exists" define #f 401 9 401 42 ("jazz.install-repository" "jazz.directory-exists?" "if" "directory")}
    {Lisp-Entry "jazz.uninstall-repository" define #f 406 9 406 34 ("%%remove" "jazz.Repositories" "set!" "repository")}
    {Lisp-Entry "jazz.find-repository" define #f 410 9 410 29 ("%%cdr" "%%repository-name" "%%eq?" "%%car" "repository" "%%null?" "if" "jazz.Repositories" "repositories" "iter" "let" "name")}
    {Lisp-Entry "jazz.find-package" define #f 420 9 420 26 ("jazz.repository-find-package" "package" "%%cdr" "%%repository-binary?" "%%car" "repository" "%%null?" "if" "jazz.Repositories" "repositories" "iter" "let" "package-name")}
    {Lisp-Entry "jazz.repository-pathname" define #f 433 9 433 33 ("%%repository-library-directory" "%%string-append" "path" "repository")}
    {Lisp-Entry "jazz.repository-packages-table" define #f 438 9 438 39 ("jazz.repository-install-packages" "%%repository-packages-table-set!" "eq?" "test:" "%%make-table" "table" "let" "%%repository-packages-table" "or" "repository")}
    {Lisp-Entry "jazz.setup-repositories" define #f 446 9 446 32 ("jazz.Repositories" "jazz.setup-repository" "for-each")}
    {Lisp-Entry "jazz.setup-repository" define #f 450 9 450 30 ("jazz.setup-package" "package" "name" "lambda" "%%iterate-table" "jazz.repository-packages-table" "table" "let" "repository")}
    {Lisp-Entry "jazz.setup-build" define #f 457 9 457 25 ("jazz.Bin-Repository" "%%repository-packages-table-set!" "setup-build-packages")
      {Lisp-Entry "setup-build-packages" define #f 458 11 458 31 ("setup-build-package" "jazz.iterate-packages")}
      {Lisp-Entry "setup-build-package" define #f 462 11 462 30 ("jazz.file-copy" "jazz.file-delete" "jazz.create-directories" "begin" "jazz.file-modification-time" "<" "jazz.file-exists?" "%%not" "or" "jazz.Bin-Repository" "dst" "%%package-repository" "jazz.repository-pathname" "src" "jazz.Package-Filename" "path" "%%symbol->string" "%%package-library-path" "%%string-append" "dir" "setup-build-package" "if" "bin-parent" "%%package-parent" "parent" "%%package-name" "name" "let*" "package")}}
    {Lisp-Entry "jazz.repository-packages" define #f 482 9 482 33 ("%%cons" "set!" "package" "name" "lambda" "%%iterate-table" "packages" "jazz.repository-packages-table" "table" "let" "repository")}
    {Lisp-Entry "jazz.repository-find-package" define #f 491 9 491 37 ("jazz.repository-packages-table" "%%table-ref" "package-name" "repository")}
    {Lisp-Entry "jazz.repository-install-packages" define #f 495 9 495 41 ("%%package-name" "%%table-set!" "package" "lambda" "for-each" "jazz.repository-discover-packages" "packages" "%%repository-packages-table" "table" "let" "repository")}
    {Lisp-Entry "jazz.repository-discover-packages" define #f 504 9 504 42 ("%%repository-library-directory" "%%package-repository" "jazz.repository-pathname" "%%package-library-path" "library-path" "%%cons" "jazz.load-package" "package" "%%cdr" "%%table-ref" "%%string->symbol" "package-name" "jazz.file-exists?" "jazz.Package-Filename" "package-pathname" "%%string-append" "directory" "%%car" "dirname" "%%null?" "jazz.directory-directories" "dirnames" "iter" "jazz.directory-exists?" "if" "packages" "library-directory" "parent" "discover-packages" "define" "%%repository-packages-table" "table" "let" "repository")}
    {Lisp-Entry "jazz.repository-add-package" define #f 531 9 531 36 ("%%package-name" "%%table-set!" "jazz.repository-packages-table" "table" "let" "package" "repository")}
    {Lisp-Entry "jazz.repository-remove-package" define #f 536 9 536 39 ("%%package-name" "%%table-clear" "jazz.repository-packages-table" "table" "let" "package" "repository")}
    {Lisp-Entry "jazz.load-package" define #f 541 9 541 26 ("jazz.error" "jazz.cache-package-roots" "%%cdr" "jazz.make-package" "package" "'project" "project" "'profiles" "profiles" "'products" "products" "'char-encoding" "char-encoding" "'install" "install" "'root" "root" "'library" "%%assq" "library" "%%eq?" "if" "%%cddr" "alist" "%%cadr" "name" "read" "form" "let" "input" "lambda" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "%%list" "call-with-input-file" "package-pathname" "package-name" "parent" "repository")}
    {Lisp-Entry "jazz.setup-package" define #f 569 9 569 27 ("jazz.load-module" "if" "%%package-install" "install" "let" "package")}
    {Lisp-Entry "jazz.inspect-install" define #f 575 9 575 29 ()
      {Lisp-Entry "inspect-path" define #f 576 11 576 23 ("path")}
      {Lisp-Entry "inspect-repository" define #f 579 11 579 29 ("repository")}
      {Lisp-Entry "inspect-package" define #f 585 11 585 26 ("package")}}
    {Lisp-Entry "jazz.Package-Filename" define #f 601 8 601 29 ()}
    {Lisp-Entry "jazz.package?" define #f 605 9 605 22 ("package" "'package" "%%vector-ref" "%%eq?" "0" "%%vector-length" "%%fx>" "%%vector?" "and" "obj")}
    {Lisp-Entry "jazz.make-package" define #f 611 9 611 26 ("%%make-package" "modules-path" "%%symbol->string" "%%string-append" "%%not" "if" "library-path" "let" "project" "profiles" "products" "char-encoding" "install" "modules-root" "library-root" "parent" "name" "repository")}
    {Lisp-Entry "jazz.package-root" define #f 621 9 621 26 ("%%package-name" "%%symbol->string" "%%package-library-path" "if" "%%package-repository" "%%repository-library-root" "%%string-append" "%%package-parent" "parent" "let" "package")}
    {Lisp-Entry "jazz.package-pathname" define #f 629 9 629 30 ("%%package-modules-path" "%%package-library-path" "if" "%%string-append" "%%package-repository" "jazz.repository-pathname" "%%package-parent" "parent" "let" "path" "package")}
    {Lisp-Entry "jazz.iterate-packages" define #f 638 9 638 30 ("package" "jazz.repository-packages" "packages" "iter" "%%cdr" "%%repository-binary?" "%%neq?" "%%car" "repository" "%%null?" "%%not" "if" "jazz.Repositories" "repositories" "iter-repo" "let" "proc" "binary?")}
    {Lisp-Entry "jazz.get-package-autoload" define #f 652 9 652 34 ("%%package-autoloads" "%%table-ref" "name" "package")}
    {Lisp-Entry "jazz.set-package-autoload" define #f 656 9 656 34 ("%%cons" "%%package-autoloads" "%%table-set!" "loader" "module-name" "name" "package")}
    {Lisp-Entry "jazz.register-package-autoload" define #f 660 9 660 39 ("%%package-name" "jazz.error" "jazz.set-package-autoload" "%%car" "%%eq?" "%%not" "or" "if" "jazz.get-package-autoload" "actual" "let" "loader" "module-name" "name" "package")}
    {Lisp-Entry "jazz.module-autoload" define #f 667 9 667 29 ("jazz.error" "else" "cond" "bin-autoload" "find-autoload" "src-autoload" "let" "bin-uptodate?" "bin" "src" "lambda" "jazz.with-module-src/bin" "jazz.load-module" "name" "module-name")
      {Lisp-Entry "find-autoload" define #f 668 11 668 24 ("%%cdr" "name" "jazz.get-package-autoload" "autoload" "%%resource-package" "package" "let" "%%not" "if" "resource")}}
    {Lisp-Entry "jazz.find-resource" define #f 689 9 689 27 ("%%make-resource" "%%fx>=" "previous-pos" "name-length" "name" "%%string-ref" "%%eqv?" "%%fx<" "2" "name-pos" "jazz.string-find-reversed" "pos" "len" "1" "%%fx+" "%%fx-" "set!" "jazz.pathname-extension" "extension" "path" "let*" "0" "%%substring" "%%string=?" "%%fx<=" "and" "package-length" "%%string-length" "pathname-length" "jazz.package-pathname" "package-pathname" "package" "%%cdr" "%%car" "jazz.repository-packages" "packages" "iter" "%%null?" "if" "jazz.Repositories" "repositories" "iter-repo" "let" "pathname")}
    {Lisp-Entry "jazz.descendant-module?" define #f 722 9 722 32 ("%%string-ref" "%%eqv?" "0" "%%substring" "%%string=?" "%%fx>" "and" "descendant-length" "%%string-length" "module-length" "descendant" "%%symbol->string" "module" "let" "descendant-name" "module-name")}
    {Lisp-Entry "jazz.find-pathname-module" define #f 732 9 732 34 ("%%resource-path" "jazz.path->name" "if" "jazz.find-resource" "resource" "let" "pathname")}
    {Lisp-Entry "jazz.gather-profiles" define #f 744 9 744 29 ("%%append" "%%package-profiles" "package-profiles" "jazz.repository-packages" "packages" "iter" "%%cdr" "%%repository-binary?" "%%car" "repository" "%%null?" "if" "profiles" "jazz.Repositories" "repositories" "iter-repo" "let")}
    {Lisp-Entry "jazz.make-profile" define #f 758 9 758 26 ("module-name" "name")}
    {Lisp-Entry "jazz.profile-name" define #f 762 9 762 26 ("%%car" "profile")}
    {Lisp-Entry "jazz.profile-title" define #f 765 9 765 27 ("jazz.profile-name" "%%symbol->string" "profile")}
    {Lisp-Entry "jazz.profile-module" define #f 768 9 768 28 ("%%cdr" "module" "'module" "%%assq" "%%cadr" "profile")}
    {Lisp-Entry "jazz.find-module-bin" define #f 777 9 777 29 ("jazz.cache-package" "begin" "jazz.iterate-packages" "jazz.*binary-packages-cache*" "jazz.cached-packages" "continuation-return" "if" "find-bin" "bin" "package" "for-each" "jazz.name->path" "path" "let" "return" "lambda" "continuation-capture" "module-name")
      {Lisp-Entry "find-bin" define #f 778 11 778 19 ("jazz.pathname-name" "%%string-append" "try" "jazz.package-pathname" "jazz.directory-exists?" "if" "path" "package")
        {Lisp-Entry "try" define #f 779 13 779 16 ("%%make-resource" "%%string-append" "package" "jazz.package-pathname" "jazz.file-exists?" "if" "path")}}}
    {Lisp-Entry "jazz.find-module-src" define #f 813 9 813 29 ("jazz.error" "jazz.cache-package" "begin" "jazz.iterate-packages" "jazz.*source-packages-cache*" "jazz.cached-packages" "continuation-return" "find-src" "src" "package" "for-each" "jazz.name->path" "path" "return" "lambda" "continuation-capture" "%%car" "%%null?" "if" "error?" "let" "rest" "extensions" "module-name")
      {Lisp-Entry "find-src" define #f 814 11 814 19 ("jazz.pathname-name" "%%string-append" "try" "jazz.package-pathname" "jazz.directory-exists?" "if" "path" "package")
        {Lisp-Entry "try" define #f 815 13 815 16 ("%%cdr" "%%car" "try-extension" "%%null?" "if" "or" "extensions" "iter" "let" "path")
          {Lisp-Entry "try-extension" define #f 816 15 816 28 ("%%make-resource" "path" "%%string-append" "package" "jazz.package-pathname" "jazz.file-exists?" "if" "extension")}}}}
    {Lisp-Entry "jazz.with-module-src/bin" define #f 858 9 858 33 ("force-interpreted?" "jazz.manifest-needs-rebuild?" "%%not" "jazz.manifest-uptodate?" "jazz.resource-pathname" "%%resource-package" "jazz.manifest-pathname" "jazz.load-updated-manifest" "manifest" "and" "if" "bin-uptodate?" "jazz.find-module-src" "src" "jazz.find-module-bin" "bin" "let" "proc" "extensions" "module-name")
      {Lisp-Entry "force-interpreted?" define #f 859 11 859 29 ("module-name" "%%memv" "%%boolean?" "if" "jazz.force-interpreted?" "interpreted?" "let")}}
    {Lisp-Entry "jazz.module-uptodate-binary?" define #f 879 9 879 37 ("bin-uptodate?" "bin" "src" "lambda" "jazz.with-module-src/bin" "module-name")}
    {Lisp-Entry "jazz.validate-repository-unicity" define #f 885 9 885 41 ("%%repository-name" "or" "jazz.error" "jazz.repository-unique?" "%%not" "if" "proc" "module-name" "repository")}
    {Lisp-Entry "jazz.repository-unique?" define #f 892 9 892 32 ("%%cdr" "%%car" "package" "%%null?" "if" "found?" "jazz.repository-packages" "packages" "iter" "let" "proc" "repository")}
    {Lisp-Entry "jazz.*binary-packages-cache*" define #f 910 8 910 36 ("eq?" "test:" "%%make-table")}
    {Lisp-Entry "jazz.*source-packages-cache*" define #f 913 8 913 36 ("eq?" "test:" "%%make-table")}
    {Lisp-Entry "jazz.cache-package" define #f 917 9 917 27 ("%%cons" "%%table-set!" "%%memq" "%%not" "if" "%%table-ref" "packages" "let" "singleton-prefix" "prefix" "lambda" "jazz.with-cached-prefix" "package" "module-name" "cache")}
    {Lisp-Entry "jazz.cached-packages" define #f 925 9 925 29 ("if" "%%table-ref" "or" "singleton-prefix" "prefix" "lambda" "jazz.with-cached-prefix" "module-name" "cache")}
    {Lisp-Entry "jazz.with-cached-prefix" define #f 935 9 935 32 ("0" "%%substring" "%%string->symbol" "1" "%%fx+" "second-period" "if" "jazz.string-find" "first-period" "%%symbol->string" "name" "let" "proc" "module-name")}
    {Lisp-Entry "jazz.cache-package-roots" define #f 947 9 947 33 ("jazz.directory-directories" "jazz.directory-content" "jazz.cache-package" "%%string->symbol" "module-name" "directory" "set!" "regular" "jazz.pathname-type" "case" "%%string-append" "second-path" "second-part" "has-files?" "string-append" "first-dir" "first-part" "lambda" "for-each" "jazz.directory-exists?" "jazz.package-pathname" "toplevel-dir" "jazz.*source-packages-cache*" "jazz.*binary-packages-cache*" "%%package-repository" "%%repository-binary?" "if" "cache" "let" "package")}
    {Lisp-Entry "jazz.setup-debuggee" define #f 975 9 975 28 ("jazz.debuggee.setup" "'jazz.debuggee.setup" "jazz.debugger.jazz.stub-autoload" "'jazz.debugger.jazz.stub-autoload" "jazz.debugger.jazz.stub" "'jazz.debugger.jazz.stub" "jazz.debuggee.stub" "'jazz.debuggee.stub" "jazz.debuggee.Debuggee-Thread" "'jazz.debuggee.Debuggee-Thread" "jazz.debuggee.Debuggee-Stop" "'jazz.debuggee.Debuggee-Stop" "jazz.debuggee.Debuggee-Process" "'jazz.debuggee.Debuggee-Process" "jazz.debuggee.Debuggee-Frame" "'jazz.debuggee.Debuggee-Frame" "jazz.debuggee" "'jazz.debuggee" "jazz" "'jazz" "core.library" "'core.library" "jazz.load-module")}
    {Lisp-Entry "jazz.find-product-descriptor" define #f 994 9 994 37 ("else" "set!" "%%repository-binary?" "jazz.find-product-descriptor" "cond" "jazz.product-descriptor-alias" "alias" "%%package-products" "%%assq" "pair" "package" "%%cdr" "jazz.repository-packages" "packages" "iter" "%%car" "repository" "%%null?" "if" "jazz.Repositories" "repositories" "iter-repo" "binary-descriptor" "let" "name")}
    {Lisp-Entry "jazz.product-descriptor-name" define #f 1017 9 1017 37 ("%%car" "descriptor")}
    {Lisp-Entry "jazz.product-descriptor-alias" define #f 1020 9 1020 38 ("%%cadr" "if" "%%cdr" "alias" "'alias" "%%assq" "pair" "let" "descriptor")}
    {Lisp-Entry "jazz.product-descriptor-module" define #f 1026 9 1026 39 ("%%cadr" "if" "%%cdr" "module" "'module" "%%assq" "pair" "let" "descriptor")}
    {Lisp-Entry "jazz.product-descriptor-title" define #f 1032 9 1032 38 ("%%cadr" "if" "%%cdr" "title" "'title" "%%assq" "pair" "let" "descriptor")}
    {Lisp-Entry "jazz.product-descriptor-icon" define #f 1038 9 1038 37 ("%%cadr" "if" "%%cdr" "icon" "'icon" "%%assq" "pair" "let" "descriptor")}
    {Lisp-Entry "jazz.product-descriptor-run" define #f 1044 9 1044 36 ("if" "%%cdr" "run" "'run" "%%assq" "pair" "let" "descriptor")}
    {Lisp-Entry "jazz.product-descriptor-update" define #f 1050 9 1050 39 ("if" "%%cdr" "update" "'update" "%%assq" "pair" "let" "descriptor")}
    {Lisp-Entry "jazz.product-descriptor-build" define #f 1056 9 1056 38 ("if" "%%cdr" "build" "'build" "%%assq" "pair" "let" "descriptor")}
    {Lisp-Entry "jazz.product-descriptor-dependencies" define #f 1062 9 1062 45 ("if" "%%cdr" "dependencies" "'dependencies" "%%assq" "pair" "let" "descriptor")}
    {Lisp-Entry "jazz.Products-Table" define #f 1069 8 1069 27 ("eq?" "test:" "%%make-table")}
    {Lisp-Entry "jazz.Products-Run-Table" define #f 1072 8 1072 31 ("eq?" "test:" "%%make-table")}
    {Lisp-Entry "jazz.process-name" define #f 1076 8 1076 25 ()}
    {Lisp-Entry "jazz.process-title" define #f 1079 8 1079 26 ()}
    {Lisp-Entry "jazz.process-icon" define #f 1082 8 1082 25 ()}
    {Lisp-Entry "jazz.process-version" define #f 1085 8 1085 28 ()}
    {Lisp-Entry "jazz.current-process-name" define #f 1089 9 1089 34 ("jazz.process-name")}
    {Lisp-Entry "jazz.current-process-name-set!" define #f 1092 9 1092 39 ("jazz.process-name" "set!" "name")}
    {Lisp-Entry "jazz.current-process-title" define #f 1095 9 1095 35 ("jazz.process-title")}
    {Lisp-Entry "jazz.current-process-title-set!" define #f 1098 9 1098 40 ("jazz.process-title" "set!" "title")}
    {Lisp-Entry "jazz.current-process-icon" define #f 1101 9 1101 34 ("jazz.process-icon")}
    {Lisp-Entry "jazz.current-process-icon-set!" define #f 1104 9 1104 39 ("jazz.process-icon" "set!" "icon")}
    {Lisp-Entry "jazz.current-process-version" define #f 1107 9 1107 37 ("jazz.process-version")}
    {Lisp-Entry "jazz.current-process-version-set!" define #f 1110 9 1110 42 ("jazz.process-version" "set!" "version")}
    {Lisp-Entry "jazz.current-process-present" define #f 1114 9 1114 37 ("%%symbol->string" "if" "jazz.current-process-name" "name" "let" "jazz.current-process-title" "or")}
    {Lisp-Entry "jazz.register-product" define #f 1122 9 1122 30 ("jazz.find-product-descriptor" "%%make-product" "jazz.Products-Table" "%%table-set!" "build" "update" "run" "icon" "title" "#!key" "name")}
    {Lisp-Entry "jazz.get-registered-product" define #f 1126 9 1126 36 ("jazz.error" "jazz.Products-Table" "%%table-ref" "or" "name")}
    {Lisp-Entry "jazz.get-product-descriptor" define #f 1131 9 1131 36 ("jazz.error" "if" "jazz.find-product-descriptor" "descriptor" "let" "name")}
    {Lisp-Entry "jazz.get-product" define #f 1138 9 1138 25 ("jazz.build-product-descriptor" "jazz.update-product-descriptor" "%%make-product" "jazz.product-descriptor-icon" "icon" "jazz.product-descriptor-title" "title" "jazz.get-registered-product" "jazz.load-module" "begin" "if" "jazz.product-descriptor-module" "module" "jazz.product-descriptor-name" "jazz.get-product-descriptor" "descriptor" "let" "name")}
    {Lisp-Entry "jazz.setup-product" define #f 1155 9 1155 27 ("jazz.debuggee.update" "'jazz.debuggee.update" "jazz.load-module" "jazz.product-descriptor-icon" "%%product-icon" "jazz.process-icon" "jazz.product-descriptor-title" "%%product-title" "or" "jazz.process-title" "%%product-descriptor" "descriptor" "product" "let" "jazz.setup-debuggee" "jazz.process-name" "set!" "begin" "jazz.get-product" "jazz.debugger" "%%not" "if" "name")}
    {Lisp-Entry "jazz.register-product-run" define #f 1170 9 1170 34 ("jazz.Products-Run-Table" "%%table-set!" "proc" "name")}
    {Lisp-Entry "jazz.get-registered-run" define #f 1174 9 1174 32 ("jazz.error" "jazz.Products-Run-Table" "%%table-ref" "or" "name")}
    {Lisp-Entry "jazz.run-product" define #f 1179 9 1179 25 ("jazz.run-product-descriptor" "if" "%%product-descriptor" "descriptor" "%%product-run" "run" "jazz.setup-product" "product" "let" "name")}
    {Lisp-Entry "jazz.run-product-descriptor" define #f 1188 9 1188 36 ("jazz.error" "jazz.get-registered-run" "proc" "jazz.load-module" "for-each" "begin" "if" "jazz.product-descriptor-run" "run" "jazz.product-descriptor-name" "name" "let" "descriptor")}
    {Lisp-Entry "jazz.update-product" define #f 1199 9 1199 28 ("jazz.update-product-descriptor" "if" "%%product-descriptor" "descriptor" "%%product-update" "update" "jazz.setup-product" "product" "let" "name")}
    {Lisp-Entry "jazz.update-product-descriptor" define #f 1208 9 1208 39 ("jazz.product-descriptor-name" "jazz.error" "jazz.build-module" "for-each" "if" "jazz.product-descriptor-update" "update" "let" "descriptor")}
    {Lisp-Entry "jazz.build-product" define #f 1215 9 1215 27 ("jazz.build-product-descriptor" "if" "core.module.builder" "'core.module.builder" "core.library" "'core.library" "jazz.load-module" "jazz.feedback" "%%product-descriptor" "descriptor" "%%product-build" "build" "jazz.setup-product" "product" "let" "name")}
    {Lisp-Entry "jazz.build-product-descriptor" define #f 1227 9 1227 38 ("%%apply" "jazz.build-image" "%%symbol?" "obj" "lambda" "for-each" "if" "jazz.product-descriptor-build" "build" "let" "jazz.update-product-descriptor" "descriptor")}
    {Lisp-Entry "jazz.end-make-marker" define #f 1238 8 1238 28 ()}
    {Lisp-Entry "jazz.make-product" define #f 1242 9 1242 26 ("dynamic-wind" "current-user-interrupt-handler" "parameterize" "jazz.setup-build" "write" "jazz.debug-build?" "make-thread" "thread-start!" "thread" "map" "thread-join!" "remote-make" "jazz.build-product" "jazz.get-product-descriptor" "jazz.product-descriptor-dependencies" "%%table-set!" "make" "%%table-ref" "not" "subname" "lambda" "for-each" "local-make" "%%substring" "%%string=?" "11" "%%fx>=" "0" "%%fx>" "%%string-length" "count" "jazz.end-make-marker" "equal?" "eof-object?" "%%not" "read-line" "iter" "send-command" "memq" "begin" "and" "if" "jazz" "core" "%%memq" "key-product?" "product-modified?" "build-process-ended" "condition-variable-signal!" "jazz.remove" "build-process-died" "force-output" "newline" "display" "line" "atomic-output" "build" "%%cons" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" "directory:" "number->string" "arguments:" "path:" "list" "open-process" "%%fx<" "mutex-unlock!" "%%cdr" "set!" "%%car" "process" "%%pair?" "cond" "jazz.build-jobs" "jazz.jobs" "or" "jobs" "%%length" "active-count" "mutex-lock!" "else" "jazz.kernel-install" "%%string-append" "windows" "jazz.kernel-platform" "case" "kernel-path" "grab-build-process" "define" "stop-build?" "'output-mutex" "output-mutex" "'process-condition" "make-condition-variable" "process-condition" "'process-mutex" "process-mutex" "outdated-processes" "free-processes" "active-processes" "'subproduct-table-mutex" "make-mutex" "subproduct-table-mutex" "make-table" "subproduct-table" "let" "name")}
    {Lisp-Entry "jazz.subprocess-build-products" define #f 1377 9 1377 39 ("jazz.build-product" "begin" "if" "read" "product" "iter" "let" "force-output" "newline" "jazz.end-make-marker" "display" "lambda" "current-user-interrupt-handler" "parameterize")}
    {Lisp-Entry "jazz.default-char-encoding" define #f 1399 8 1399 34 ("'UTF")}
    {Lisp-Entry "jazz.resource-char-encoding" define #f 1403 9 1403 36 ("jazz.default-char-encoding" "%%resource-package" "%%package-char-encoding" "or" "resource")}
    {Lisp-Entry "jazz.resource-pathname" define #f 1408 9 1408 31 ("jazz.resource-package-pathname" "%%resource-package" "jazz.package-pathname" "resource")}
    {Lisp-Entry "jazz.resource-package-pathname" define #f 1413 9 1413 39 ("%%string-append" "%%resource-path" "%%not" "if" "%%resource-extension" "ext" "let" "resource")}
    {Lisp-Entry "jazz.name->path" define #f 1420 9 1420 24 ("%%symbol->string" "jazz.string-replace" "resource-name")}
    {Lisp-Entry "jazz.path->name" define #f 1424 9 1424 24 ("jazz.string-replace" "%%string->symbol" "resource-name")}
    {Lisp-Entry "jazz.manifest-pathname" define #f 1433 9 1433 31 ("jazz.Manifest-Extension" "%%resource-path" "%%string-append" "jazz.package-pathname" "resource" "package")}
    {Lisp-Entry "jazz.load" define #f 1447 13 1447 22 ("void" "lambda" "%%load" "%%car" "%%null?" "if" "quiet?" "let" "rest" "pathname")}
    {Lisp-Entry "jazz.load" define #f 1453 13 1453 22 ("load" "rest" "pathname")}
    {Lisp-Entry "jazz.load-indent" define #f 1457 8 1457 24 ("0" "make-parameter")}
    {Lisp-Entry "jazz.load-resource" define #f 1461 9 1461 27 ("jazz.resource-char-encoding" "char-encoding:" "jazz.resource-pathname" "path:" "%%list" "jazz.load" "lambda" "jazz.resource-package-pathname" "jazz.load-verbose?" "jazz.with-verbose" "%%car" "%%null?" "if" "quiet?" "let" "rest" "resource")}
    {Lisp-Entry "jazz.with-verbose" define #f 1471 9 1471 26 ("verbose-done" "jazz.done-verbose?" "2" "%%fx+" "jazz.load-indent" "parameterize" "result" "let" "verbose-load" "begin" "if" "proc" "path" "action" "flag")
      {Lisp-Entry "verbose-load" define #f 1472 11 1472 23 ("force-output" "newline" "path" "action" "jazz.load-indent" "make-string" "display")}
      {Lisp-Entry "verbose-done" define #f 1482 11 1482 23 ("force-output" "newline" "jazz.load-indent" "make-string" "display")}}
    {Lisp-Entry "jazz.walk-for" define #f 1501 8 1501 21 ("make-parameter")}
    {Lisp-Entry "jazz.load-module-src/bin" define #f 1505 9 1505 33 ("jazz.error" "else" "jazz.with-extension-reader" "load" "'load" "jazz.walk-for" "jazz.Load-Stack" "pp" "%%memq" "%%pair?" "jazz.feedback" "begin" "jazz.warn-interpreted?" "warn" "jazz.load-resource" "%%string=?" "and" "%%resource-extension" "ext" "%%not" "or" "quiet?" "let" "cond" "if" "jazz.requested-module-resource" "jazz.requested-module-name" "parameterize" "bin-uptodate?" "bin" "src" "lambda" "jazz.with-module-src/bin" "module-name")}
    {Lisp-Entry "jazz.resource-build-dir" define #f 1534 9 1534 32 ("%%package-modules-path" "%%package-library-path" "if" "%%string-append" "jazz.Bin-Repository" "jazz.repository-pathname" "%%package-parent" "parent" "%%resource-path" "jazz.pathname-dir" "dir" "%%resource-package" "package" "let" "resource")}
    {Lisp-Entry "jazz.Unloaded-State" define #f 1550 8 1550 27 ()}
    {Lisp-Entry "jazz.Loading-State" define #f 1553 8 1553 26 ()}
    {Lisp-Entry "jazz.Loaded-State" define #f 1556 8 1556 25 ()}
    {Lisp-Entry "jazz.Environment" define #f 1565 8 1565 24 ("eq?" "test:" "%%make-table")}
    {Lisp-Entry "jazz.get-environment" define #f 1569 9 1569 29 ("jazz.Environment")}
    {Lisp-Entry "jazz.get-environment-module" define #f 1573 9 1573 36 ("jazz.Unloaded-State" "jazz.Environment" "%%table-ref" "name")}
    {Lisp-Entry "jazz.set-environment-module" define #f 1577 9 1577 36 ("jazz.Environment" "%%table-set!" "module" "name")}
    {Lisp-Entry "jazz.Load-Mutex" define #f 1586 8 1586 23 ("load" "'load" "make-mutex")}
    {Lisp-Entry "jazz.Load-Thread" define #f 1589 8 1589 24 ()}
    {Lisp-Entry "jazz.Load-Stack" define #f 1592 8 1592 23 ()}
    {Lisp-Entry "jazz.requested-module-name" define #f 1596 8 1596 34 ("make-parameter")}
    {Lisp-Entry "jazz.requested-module-resource" define #f 1599 8 1599 38 ("make-parameter")}
    {Lisp-Entry "jazz.get-load-mutex" define #f 1603 9 1603 28 ("jazz.Load-Mutex")}
    {Lisp-Entry "jazz.get-load-stack" define #f 1606 9 1606 28 ("jazz.Load-Stack")}
    {Lisp-Entry "jazz.push-load-stack" define #f 1610 9 1610 29 ("%%cons" "jazz.Load-Stack" "set!" "module-name" "mode")}
    {Lisp-Entry "jazz.pop-load-stack" define #f 1614 9 1614 28 ("%%cdr" "jazz.Load-Stack" "set!")}
    {Lisp-Entry "jazz.call-with-load-lock" define #f 1618 9 1618 33 ("mutex-unlock!" "set!" "jazz.Load-Mutex" "mutex-lock!" "lambda" "dynamic-wind" "current-thread" "jazz.Load-Thread" "%%eq?" "if" "thunk")}
    {Lisp-Entry "jazz.module-loaded?" define #f 1631 9 1631 28 ("jazz.Loaded-State" "jazz.get-environment-module" "%%eq?" "module-name")}
    {Lisp-Entry "jazz.load-module" define #f 1635 9 1635 25 ("jazz.pop-load-stack" "jazz.load-module-src/bin" ":load" "':load" "jazz.push-load-stack" "jazz.set-environment-module" "dynamic-wind" "jazz.Unloaded-State" "jazz.error" "jazz.Loading-State" "cond" "lambda" "jazz.call-with-load-lock" "jazz.Loaded-State" "%%eq?" "%%not" "if" "jazz.get-environment-module" "module-state" "let" "module-name")}
    {Lisp-Entry "jazz.unload-module" define #f 1657 9 1657 27 ("jazz.unload-module" "mutex-unlock!" "jazz.Unloaded-State" "jazz.set-environment-module" "begin" "jazz.Load-Mutex" "mutex-lock!" "if" "module-name")}
    {Lisp-Entry "jazz.reload-module" define #f 1666 9 1666 27 ("jazz.load-module" "jazz.unload-module" "module-name")}
    {Lisp-Entry "jazz.Services" define #f 1676 8 1676 21 ("eq?" "test:" "%%make-table")}
    {Lisp-Entry "jazz.register-service" define #f 1680 9 1680 30 ("jazz.Services" "%%table-set!" "thunk" "name")}
    {Lisp-Entry "jazz.get-service" define #f 1684 9 1684 25 ("set!" "jazz.load-module" "begin" "%%symbol?" "if" "jazz.Services" "%%table-ref" "symbol/proc" "let" "name")}
    {Lisp-Entry "jazz.require-service" define #f 1695 9 1695 29 ("error" "jazz.get-service" "or" "name")}
    {Lisp-Entry "jazz.Literal-Constructors" define #f 1705 8 1705 33 ("eq?" "test:" "%%make-table")}
    {Lisp-Entry "jazz.register-literal-constructor" define #f 1709 9 1709 42 ("%%cons" "jazz.Literal-Constructors" "%%table-set!" "constructor" "contructor-name" "name")}
    {Lisp-Entry "jazz.require-literal-constructor" define #f 1713 9 1713 41 ("jazz.error" "jazz.Literal-Constructors" "%%table-ref" "or" "name")}
    {Lisp-Entry "jazz.define-literal" define-macro #f 1718 20 1718 39 ("jazz.global-value" "apply" ",contructor-library" "',contructor-library" "jazz.load-module" "arguments" "lambda" ",contructor-name" "',contructor-name" ",name" "',name" "jazz.register-literal-constructor" "jazz.split-composite" "ignore" "contructor-library" "receive" "contructor-name" "name")}
    {Lisp-Entry "jazz.construct-literal" define #f 1726 9 1726 31 ("jazz.require-literal-constructor" "%%cdr" "constructor" "let" "arguments" "name")}
    {Lisp-Entry "jazz.Extension-Readers" define #f 1736 8 1736 30 ("equal?" "test:" "%%make-table")}
    {Lisp-Entry "jazz.get-extension-reader" define #f 1740 9 1740 34 ("jazz.Extension-Readers" "%%table-ref" "extension")}
    {Lisp-Entry "jazz.with-extension-reader" define #f 1744 9 1744 35 ("current-readtable" "parameterize" "if" "jazz.get-extension-reader" "readtable-getter" "let" "thunk" "extension")}
    {Lisp-Entry "jazz.register-reader-extension" define #f 1752 9 1752 39 ("jazz.Extension-Readers" "%%table-set!" "readtable-getter" "extension")}
    {Lisp-Entry "jazz.scheme-readtable" define #f 1761 8 1761 29 ("%%current-readtable")}})
"primitives"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "primitives.scm"} 1252923643
    {Lisp-Entry "%%boolean?" define-macro #f 47 23 47 33 ("obj")}
    {Lisp-Entry "%%not" define-macro #f 50 23 50 28 ("##not" ",expr" "not" "jazz.debug-core?" "if" "expr")}
    {Lisp-Entry "%%box?" define-macro #f 65 23 65 29 ("##box?" ",obj" "box?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%box" define-macro #f 70 23 70 28 ("##box" ",obj" "box" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%unbox" define-macro #f 75 23 75 30 ("##unbox" ",box" "unbox" "jazz.debug-core?" "if" "box")}
    {Lisp-Entry "%%char?" define-macro #f 90 24 90 31 ("##char?" ",obj" "char?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%char=?" define-macro #f 95 24 95 32 ("##char=?" ",c2" ",c1" "char=?" "jazz.debug-core?" "if" "c2" "c1")}
    {Lisp-Entry "%%complex?" define-macro #f 110 24 110 34 ("##complex?" ",obj" "complex?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%continuation?" define-macro #f 125 23 125 38 ("##continuation?" ",obj" "continuation?" "jazz.debug-core?" "if" "##source-code" "##cadr" "obj" "let" "src" "lambda")}
    {Lisp-Entry "%%continuation-capture" define-macro #f 132 23 132 45 ("##continuation-capture" ",proc" "continuation-capture" "jazz.debug-core?" "if" "##source-code" "##cadr" "proc" "let" "src" "lambda")}
    {Lisp-Entry "%%continuation-graft" define-macro #f 139 23 139 43 ("##continuation-graft" ",proc" ",cont" "continuation-graft" "jazz.debug-core?" "if" "##cddr" "##car" "proc" "##source-code" "##cadr" "cont" "let" "src" "lambda")}
    {Lisp-Entry "%%continuation-return" define-macro #f 147 23 147 44 ("##continuation-return" ",@values" ",cont" "continuation-return" "jazz.debug-core?" "if" "##cddr" "values" "##source-code" "##cadr" "cont" "let" "src" "lambda")}
    {Lisp-Entry "%%continuation-graft-no-winding" define-macro #f 155 23 155 54 ("##continuation-graft-no-winding" ",values" "%%continuation-graft-no-winding" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "values" "cont")}
    {Lisp-Entry "%%continuation-return-no-winding" define-macro #f 160 23 160 55 ("##continuation-return-no-winding" ",values" "%%continuation-return-no-winding" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "values" "cont")}
    {Lisp-Entry "%%continuation-creator" define-macro #f 165 23 165 45 ("##continuation-creator" "%%continuation-creator" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
    {Lisp-Entry "%%continuation-locat" define-macro #f 170 23 170 43 ("##continuation-locat" "%%continuation-locat" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
    {Lisp-Entry "%%continuation-locals" define-macro #f 175 23 175 44 ("##continuation-locals" "%%continuation-locals" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
    {Lisp-Entry "%%continuation-next" define-macro #f 180 23 180 42 ("##continuation-next" "%%continuation-next" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
    {Lisp-Entry "%%continuation-first-frame" define-macro #f 185 23 185 49 ("##continuation-first-frame" ",all-frames?" "%%continuation-first-frame" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "all-frames?" "cont")}
    {Lisp-Entry "%%continuation-next-frame" define-macro #f 190 23 190 48 ("##continuation-next-frame" ",all-frames?" "%%continuation-next-frame" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "all-frames?" "cont")}
    {Lisp-Entry "%%interp-continuation?" define-macro #f 195 23 195 45 ("##interp-continuation?" "%%interp-continuation?" "1" ",cont" "%%check-continuation" "%%force-uniqueness" "cont")}
    {Lisp-Entry "%%procedure?" define-macro #f 210 23 210 35 ("##procedure?" ",obj" "procedure?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%apply" define-macro #f 215 23 215 30 ("##apply" ",lst" ",proc" "apply" "jazz.debug-core?" "if" "lst" "proc")}
    {Lisp-Entry "%%eq?" define-macro #f 230 23 230 28 ("##eq?" ",y" ",x" "eq?" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%neq?" define-macro #f 235 23 235 29 ("y" "x")}
    {Lisp-Entry "%%eqv?" define-macro #f 238 23 238 29 ("##eqv?" ",y" ",x" "eqv?" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%equal?" define-macro #f 243 23 243 31 ("##equal?" ",y" ",x" "equal?" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%eq?" define-macro #f 249 23 249 28 ("y" "x")}
    {Lisp-Entry "%%load" define-macro #f 260 23 260 29 (",quiet?" ",raise-os-exception?" ",clone-cte?" ",script-callback" ",path" "##load" "%%force-uniqueness" "quiet?" "raise-os-exception?" "clone-cte?" "script-callback" "path")}
    {Lisp-Entry "%%fixnum?" define-macro #f 274 23 274 32 ("##fixnum?" ",obj" "fixnum?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%fixnum->flonum" define-macro #f 279 23 279 39 ("##fixnum->flonum" ",x" "fixnum->flonum" "jazz.debug-core?" "if" "x")}
    {Lisp-Entry "%%fx=" define-macro #f 284 23 284 28 ("##fixnum.=" ",y" ",x" "=" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fx<" define-macro #f 289 23 289 28 ("##fixnum.<" ",y" ",x" "<" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fx<=" define-macro #f 294 23 294 29 ("##fixnum.<=" ",y" ",x" "<=" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fx>" define-macro #f 299 23 299 28 ("##fixnum.>" ",y" ",x" ">" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fx>=" define-macro #f 304 23 304 29 ("##fixnum.>=" ",y" ",x" ">=" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fx+" define-macro #f 309 23 309 28 ("##fixnum.+" ",y" ",x" "+" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fx-" define-macro #f 314 23 314 28 ("##fixnum.-" ",y" ",x" "-" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fx*" define-macro #f 319 23 319 28 ("##fixnum.*" ",y" ",x" "*" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fxquotient" define-macro #f 324 23 324 35 ("##fxquotient" ",y" ",x" "quotient" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%flonum?" define-macro #f 337 23 337 32 ("##flonum?" ",obj" "flonum?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%fl=" define-macro #f 342 23 342 28 ("##flonum.=" ",y" ",x" "=" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fl<" define-macro #f 347 23 347 28 ("##flonum.<" ",y" ",x" "<" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fl<=" define-macro #f 352 23 352 29 ("##flonum.<=" ",y" ",x" "<=" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fl>" define-macro #f 357 23 357 28 ("##flonum.>" ",y" ",x" ">" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fl>=" define-macro #f 362 23 362 29 ("##flonum.>=" ",y" ",x" ">=" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fl+" define-macro #f 367 23 367 28 ("##flonum.+" ",y" ",x" "+" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fl-" define-macro #f 372 23 372 28 ("##flonum.-" ",y" ",x" "-" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fl*" define-macro #f 377 23 377 28 ("##flonum.*" ",y" ",x" "*" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fl/" define-macro #f 382 23 382 28 ("##flonum./" ",y" ",x" "/" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%fl>" define-macro #f 388 23 388 28 ("y" "x")}
    {Lisp-Entry "%%fl+" define-macro #f 391 23 391 28 ("y" "x")}
    {Lisp-Entry "%%foreign?" define-macro #f 402 23 402 33 ("obj")}
    {Lisp-Entry "%%still-obj-refcount-dec!" define-macro #f 405 23 405 48 ("##still-obj-refcount-dec!" "%%still-obj-refcount-dec!" "1" ",foreign" "%%check-foreign" "%%force-uniqueness" "foreign")}
    {Lisp-Entry "%%still-obj-refcount-inc!" define-macro #f 410 23 410 48 ("##still-obj-refcount-inc!" "%%still-obj-refcount-inc!" "1" ",foreign" "%%check-foreign" "%%force-uniqueness" "foreign")}
    {Lisp-Entry "%%interrupt-handler" define-macro #f 425 24 425 43 ("code")}
    {Lisp-Entry "%%interrupt-vector-set!" define-macro #f 428 24 428 47 ("handler" "code")}
    {Lisp-Entry "%%keyword?" define-macro #f 441 24 441 34 ("##keyword?" ",obj" "keyword?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%string->keyword" define-macro #f 446 24 446 41 ("##string->keyword" ",str" "string->keyword" "jazz.debug-core?" "if" "str")}
    {Lisp-Entry "%%keyword->string" define-macro #f 451 23 451 40 ("##keyword->string" ",keyword" "keyword->string" "jazz.debug-core?" "if" "keyword")}
    {Lisp-Entry "%%null?" define-macro #f 466 24 466 31 ("##null?" ",obj" "null?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%pair?" define-macro #f 471 24 471 31 ("##pair?" ",obj" "pair?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%car" define-macro #f 476 24 476 29 ("##car" ",pair" "car" "jazz.debug-core?" "if" "pair")}
    {Lisp-Entry "%%cdr" define-macro #f 481 24 481 29 ("##cdr" ",pair" "cdr" "jazz.debug-core?" "if" "pair")}
    {Lisp-Entry "%%set-car!" define-macro #f 486 24 486 34 ("##set-car!" ",val" ",pair" "set-car!" "jazz.debug-core?" "if" "val" "pair")}
    {Lisp-Entry "%%set-cdr!" define-macro #f 491 24 491 34 ("##set-cdr!" ",val" ",pair" "set-cdr!" "jazz.debug-core?" "if" "val" "pair")}
    {Lisp-Entry "%%caar" define-macro #f 496 24 496 30 ("##caar" ",pair" "caar" "jazz.debug-core?" "if" "pair")}
    {Lisp-Entry "%%cadr" define-macro #f 501 24 501 30 ("##cadr" ",pair" "cadr" "jazz.debug-core?" "if" "pair")}
    {Lisp-Entry "%%cdar" define-macro #f 506 24 506 30 ("##cdar" ",pair" "cdar" "jazz.debug-core?" "if" "pair")}
    {Lisp-Entry "%%cddr" define-macro #f 511 24 511 30 ("##cddr" ",pair" "cddr" "jazz.debug-core?" "if" "pair")}
    {Lisp-Entry "%%length" define-macro #f 516 24 516 32 ("##length" ",lst" "length" "jazz.debug-core?" "if" "lst")}
    {Lisp-Entry "%%memq" define-macro #f 521 24 521 30 ("##memq" ",lst" ",obj" "memq" "jazz.debug-core?" "if" "lst" "obj")}
    {Lisp-Entry "%%memv" define-macro #f 526 24 526 30 ("lst" "obj")}
    {Lisp-Entry "%%member" define-macro #f 529 24 529 32 ("##member" ",lst" ",obj" "member" "jazz.debug-core?" "if" "lst" "obj")}
    {Lisp-Entry "%%assq" define-macro #f 534 24 534 30 ("##assq" ",alist" ",obj" "assq" "jazz.debug-core?" "if" "alist" "obj")}
    {Lisp-Entry "%%assv" define-macro #f 539 24 539 30 ("##assv" ",alist" ",obj" "assv" "jazz.debug-core?" "if" "alist" "obj")}
    {Lisp-Entry "%%assoc" define-macro #f 544 24 544 31 ("##assoc" ",alist" ",obj" "assoc" "jazz.debug-core?" "if" "alist" "obj")}
    {Lisp-Entry "%%cons" define-macro #f 549 24 549 30 ("##cons" ",y" ",x" "cons" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%list" define-macro #f 554 24 554 30 ("##list" ",@rest" "list" "jazz.debug-core?" "if" "rest")}
    {Lisp-Entry "%%append" define-macro #f 559 24 559 32 ("##append" ",y" ",x" "append" "jazz.debug-core?" "if" "y" "x")}
    {Lisp-Entry "%%remove" define-macro #f 564 24 564 32 ("##remove" ",elem" "%%remove" "2" ",lst" "%%check-list" "%%force-uniqueness" "lst" "elem")}
    {Lisp-Entry "%%reverse" define-macro #f 569 24 569 33 ("##reverse" ",lst" "reverse" "jazz.debug-core?" "if" "lst")}
    {Lisp-Entry "%%list->vector" define-macro #f 574 24 574 38 ("##list->vector" ",lst" "list->vector" "jazz.debug-core?" "if" "lst")}
    {Lisp-Entry "%%memq" define-macro #f 580 23 580 29 ("lst" "obj")}
    {Lisp-Entry "%%gc" define-macro #f 591 24 591 28 ()}
    {Lisp-Entry "%%number?" define-macro #f 602 24 602 33 ("##number?" ",obj" "number?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%integer?" define-macro #f 607 24 607 34 ("##integer?" ",obj" "integer?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%real?" define-macro #f 612 24 612 31 ("##real?" ",obj" "real?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%number->string" define-macro #f 617 24 617 40 ("##number->string" ",n" "number->string" "jazz.debug-core?" "if" "n")}
    {Lisp-Entry "%%string->number" define-macro #f 622 24 622 40 ("##string->number" ",str" "string->number" "jazz.debug-core?" "if" "str")}
    {Lisp-Entry "%%port?" define-macro #f 637 24 637 31 ("##port?" ",obj" "port?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%eof-object?" define-macro #f 642 24 642 37 ("##eof-object?" ",obj" "eof-object?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%input-port-names-set!" define-macro #f 647 24 647 47 ("4" "##vector-set!" ",names" "%%input-port-names-set!" "1" ",port" "%%check-port" "%%force-uniqueness" "names" "port")}
    {Lisp-Entry "%%input-port-line-set!" define-macro #f 653 24 653 46 ("##input-port-line-set!" ",line" "%%input-port-line-set!" "1" ",port" "%%check-port" "%%force-uniqueness" "line" "port")}
    {Lisp-Entry "%%input-port-column-set!" define-macro #f 658 24 658 48 ("##input-port-column-set!" ",col" "%%input-port-column-set!" "1" ",port" "%%check-port" "%%force-uniqueness" "col" "port")}
    {Lisp-Entry "%%read-all-as-a-begin-expr-from-port" define-macro #f 663 24 663 60 ("##read-all-as-a-begin-expr-from-port" "2" "%%check-readtable" ",close-port?" ",start-syntax" ",unwrap" ",wrap" ",readtable" "%%read-all-as-a-begin-expr-from-port" "1" ",port" "%%check-port" "%%force-uniqueness" "close-port?" "start-syntax" "unwrap" "wrap" "readtable" "port")}
    {Lisp-Entry "%%write-string" define-macro #f 669 24 669 38 ("##write-string" "2" "%%check-port" ",port" "%%write-string" "1" ",str" "%%check-string" "%%force-uniqueness" "port" "str")}
    {Lisp-Entry "%%procedure-name" define-macro #f 685 24 685 40 ("##procedure-name" "%%procedure-name" "1" ",procedure" "%%check-procedure" "%%force-uniqueness" "procedure")}
    {Lisp-Entry "%%rational?" define-macro #f 700 24 700 35 ("##rational?" ",obj" "rational?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%readenv?" define-macro #f 715 24 715 34 ("obj")}
    {Lisp-Entry "%%readenv-current-filepos" define-macro #f 718 24 718 49 ("##readenv-current-filepos" "%%readenv-current-filepos" "1" ",readenv" "%%check-readenv" "%%force-uniqueness" "readenv")}
    {Lisp-Entry "%%build-list" define-macro #f 723 24 723 36 ("##build-list" ",close" ",start-pos" ",allow-improper?" "%%build-list" "1" ",readenv" "%%check-readenv" "%%force-uniqueness" "close" "start-pos" "allow-improper?" "readenv")}
    {Lisp-Entry "%%read-datum-or-label-or-none-or-dot" define-macro #f 728 24 728 60 ("##read-datum-or-label-or-none-or-dot" "%%read-datum-or-label-or-none-or-dot" "1" ",readenv" "%%check-readenv" "%%force-uniqueness" "readenv")}
    {Lisp-Entry "%%readtable?" define-macro #f 743 24 743 36 ("##readtable?" ",obj" "readtable?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%current-readtable" define-macro #f 748 24 748 43 ()}
    {Lisp-Entry "%%readtable-copy" define-macro #f 751 24 751 40 ("##readtable-copy" "%%readtable-copy" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "readtable")}
    {Lisp-Entry "%%readtable-char-class-set!" define-macro #f 756 24 756 51 ("##readtable-char-class-set!" ",handler" ",delimiter?" ",c" "%%readtable-char-class-set!" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "handler" "delimiter?" "c" "readtable")}
    {Lisp-Entry "%%readtable-char-sharp-handler-set!" define-macro #f 761 24 761 59 ("##readtable-char-sharp-handler-set!" ",handler" ",c" "%%readtable-char-sharp-handler-set!" "1" ",readtable" "%%check-readtable" "%%force-uniqueness" "handler" "c" "readtable")}
    {Lisp-Entry "%%repl" define-macro #f 776 24 776 30 ("write-reason" "#!optional")}
    {Lisp-Entry "%%thread-repl-context-get!" define-macro #f 779 24 779 50 ()}
    {Lisp-Entry "%%thread-repl-channel-get!" define-macro #f 782 24 782 50 ("thread")}
    {Lisp-Entry "%%repl-channel-result-history-add" define-macro #f 785 24 785 57 ("result" "channel")}
    {Lisp-Entry "%%string?" define-macro #f 798 24 798 33 ("##string?" ",obj" "string?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%string=?" define-macro #f 803 24 803 34 ("##string=?" ",str2" ",str1" "string=?" "jazz.debug-core?" "if" "str2" "str1")}
    {Lisp-Entry "%%string-ci=?" define-macro #f 808 24 808 37 ("##string-ci=?" ",str2" ",str1" "string-ci=?" "jazz.debug-core?" "if" "str2" "str1")}
    {Lisp-Entry "%%string<?" define-macro #f 813 24 813 34 ("##string<?" ",str2" ",str1" "string<?" "jazz.debug-core?" "if" "str2" "str1")}
    {Lisp-Entry "%%string-length" define-macro #f 818 24 818 39 ("##string-length" ",str" "string-length" "jazz.debug-core?" "if" "str")}
    {Lisp-Entry "%%string-ref" define-macro #f 823 23 823 35 ("##string-ref" ",pos" ",str" "string-ref" "jazz.debug-core?" "if" "pos" "str")}
    {Lisp-Entry "%%string-set!" define-macro #f 828 23 828 36 ("##string-set!" ",val" ",pos" ",str" "string-set!" "jazz.debug-core?" "if" "val" "pos" "str")}
    {Lisp-Entry "%%substring" define-macro #f 833 23 833 34 ("##substring" ",end" ",start" ",str" "substring" "jazz.debug-core?" "if" "end" "start" "str")}
    {Lisp-Entry "%%string-append" define-macro #f 838 23 838 38 ("##string-append" ",@rest" "string-append" "jazz.debug-core?" "if" "rest")}
    {Lisp-Entry "%%string-shrink!" define-macro #f 843 23 843 39 ("##string-shrink!" ",len" "%%string-shrink!" "1" ",str" "%%check-string" "%%force-uniqueness" "len" "str")}
    {Lisp-Entry "%%structure?" define-macro #f 858 24 858 36 ("obj")}
    {Lisp-Entry "%%structure-type" define-macro #f 861 24 861 40 ("structure")}
    {Lisp-Entry "%%symbol?" define-macro #f 874 24 874 33 ("##symbol?" ",obj" "symbol?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%string->symbol" define-macro #f 879 24 879 40 ("##string->symbol" ",str" "string->symbol" "jazz.debug-core?" "if" "str")}
    {Lisp-Entry "%%symbol->string" define-macro #f 884 23 884 39 ("##symbol->string" ",symbol" "symbol->string" "jazz.debug-core?" "if" "symbol")}
    {Lisp-Entry "%%unbound?" define-macro #f 889 23 889 33 ("obj")}
    {Lisp-Entry "%%global-var?" define-macro #f 892 23 892 36 ("##global-var?" "%%global-var?" "1" ",symbol" "%%check-symbol" "%%force-uniqueness" "symbol")}
    {Lisp-Entry "%%global-var-ref" define-macro #f 897 23 897 39 ("##global-var-ref" "%%global-var-ref" "1" ",symbol" "%%check-symbol" "%%force-uniqueness" "symbol")}
    {Lisp-Entry "%%source?" define-macro #f 912 24 912 33 ("expr")}
    {Lisp-Entry "%%source-code" define-macro #f 915 24 915 37 ("##source-code" "%%source-code" "1" ",src" "%%check-source" "%%force-uniqueness" "src")}
    {Lisp-Entry "%%source-locat" define-macro #f 920 24 920 38 ("##source-locat" "%%source-locat" "1" ",src" "%%check-source" "%%force-uniqueness" "src")}
    {Lisp-Entry "%%desourcify" define-macro #f 925 24 925 36 ("expr")}
    {Lisp-Entry "%%make-source" define-macro #f 928 24 928 37 ("locat" "code")}
    {Lisp-Entry "%%sourcify" define-macro #f 931 24 931 34 ("##sourcify" ",expr" "%%sourcify" "2" ",src" "%%check-source" "%%force-uniqueness" "src" "expr")}
    {Lisp-Entry "%%locat?" define-macro #f 936 24 936 32 ("expr")}
    {Lisp-Entry "%%locat-container" define-macro #f 939 24 939 41 ("##locat-container" "%%locat-container" "1" ",locat" "%%check-locat" "%%force-uniqueness" "locat")}
    {Lisp-Entry "%%locat-position" define-macro #f 944 24 944 40 ("##locat-position" "%%locat-position" "1" ",locat" "%%check-locat" "%%force-uniqueness" "locat")}
    {Lisp-Entry "%%container->path" define-macro #f 949 24 949 41 ("container")}
    {Lisp-Entry "%%position->filepos" define-macro #f 952 24 952 43 ("position")}
    {Lisp-Entry "%%filepos-line" define-macro #f 955 24 955 38 ("##filepos-line" "%%filepos-line" "1" ",filepos" "%%check-fixnum" "%%force-uniqueness" "filepos")}
    {Lisp-Entry "%%filepos-col" define-macro #f 960 24 960 37 ("##filepos-col" "%%filepos-col" "1" ",filepos" "%%check-fixnum" "%%force-uniqueness" "filepos")}
    {Lisp-Entry "%%table?" define-macro #f 973 24 973 32 ("obj")}
    {Lisp-Entry "%%make-table" define-macro #f 976 24 976 36 ("hash" "eq?" "test" "#!key")}
    {Lisp-Entry "%%table-ref" define-macro #f 981 24 981 35 ("##table-ref" ",default" ",key" ",table" "table-ref" "jazz.debug-core?" "if" "default" "key" "table")}
    {Lisp-Entry "%%table-set!" define-macro #f 986 24 986 36 ("##table-set!" ",value" ",key" ",table" "table-set!" "jazz.debug-core?" "if" "value" "key" "table")}
    {Lisp-Entry "%%table-clear" define-macro #f 991 24 991 37 ("key" "table")}
    {Lisp-Entry "%%table-keys" define-macro #f 994 24 994 36 ("table")}
    {Lisp-Entry "%%table-length" define-macro #f 997 24 997 38 ("table")}
    {Lisp-Entry "%%iterate-table" define-macro #f 1000 24 1000 39 ("proc" "table")}
    {Lisp-Entry "%%table-merge!" define-macro #f 1003 24 1003 38 ("##table-merge!" ",additions-takes-precedence?" ",additions" ",table" "table-merge!" "jazz.debug-core?" "if" "additions-takes-precedence?" "#!optional" "additions" "table")}
    {Lisp-Entry "%%list->table" define-macro #f 1008 24 1008 37 ("rest" "alist")}
    {Lisp-Entry "%%table->list" define-macro #f 1011 24 1011 37 ("table")}
    {Lisp-Entry "%%table-entries" define-macro #f 1014 24 1014 39 ("table")}
    {Lisp-Entry "%%copy-table" define-macro #f 1017 24 1017 36 ("table")}
    {Lisp-Entry "%%thread?" define-macro #f 1030 24 1030 33 ("obj")}
    {Lisp-Entry "%%current-thread" define-macro #f 1033 24 1033 40 ()}
    {Lisp-Entry "jazz.Unspecified-Value" define #f 1046 12 1046 34 ("void")}
    {Lisp-Entry "jazz.Unspecified-Value" define #f 1050 12 1050 34 ("jazz.unspecified" "'jazz.unspecified" "%%list")}
    {Lisp-Entry "%%unspecified" define-macro #f 1054 20 1054 33 ("'jazz.Unspecified-Value")}
    {Lisp-Entry "%%unspecified?" define-macro #f 1058 20 1058 34 ("value")}
    {Lisp-Entry "%%specified?" define-macro #f 1062 20 1062 32 ("value")}
    {Lisp-Entry "%%values?" define-macro #f 1073 24 1073 33 ("obj")}
    {Lisp-Entry "%%vector?" define-macro #f 1085 24 1085 33 ("##vector?" ",obj" "vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%vector" define-macro #f 1090 23 1090 31 ("##vector" ",@rest" "vector" "jazz.debug-core?" "if" "rest")}
    {Lisp-Entry "%%make-vector" define-macro #f 1095 23 1095 36 ("##make-vector" ",@rest" ",size" "make-vector" "jazz.debug-core?" "if" "rest" "size")}
    {Lisp-Entry "%%vector-length" define-macro #f 1100 23 1100 38 ("##vector-length" ",vector" "vector-length" "jazz.debug-core?" "if" "vector")}
    {Lisp-Entry "%%vector-ref" define-macro #f 1105 23 1105 35 ("##vector-ref" ",n" ",vector" "vector-ref" "jazz.debug-core?" "if" "n" "vector")}
    {Lisp-Entry "%%vector-set!" define-macro #f 1110 23 1110 36 ("##vector-set!" ",value" ",n" ",vector" "vector-set!" "jazz.debug-core?" "if" "value" "n" "vector")}
    {Lisp-Entry "%%vector-copy" define-macro #f 1115 23 1115 36 ("##vector-copy" ",@rest" ",vector" "vector-copy" "jazz.debug-core?" "if" "rest" "vector")}
    {Lisp-Entry "%%vector->list" define-macro #f 1120 23 1120 37 ("##vector->list" ",vector" "vector->list" "jazz.debug-core?" "if" "vector")}
    {Lisp-Entry "%%s8vector?" define-macro #f 1125 23 1125 34 ("##s8vector?" ",obj" "s8vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%u8vector?" define-macro #f 1130 23 1130 34 ("##u8vector?" ",obj" "u8vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%s16vector?" define-macro #f 1135 23 1135 35 ("##s16vector?" ",obj" "s16vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%u16vector?" define-macro #f 1140 23 1140 35 ("##u16vector?" ",obj" "u16vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%s32vector?" define-macro #f 1145 23 1145 35 ("##s32vector?" ",obj" "s32vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%u32vector?" define-macro #f 1150 23 1150 35 ("##u32vector?" ",obj" "u32vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%s64vector?" define-macro #f 1155 23 1155 35 ("##s64vector?" ",obj" "s64vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%u64vector?" define-macro #f 1160 23 1160 35 ("##u64vector?" ",obj" "u64vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%f32vector?" define-macro #f 1165 23 1165 35 ("##f32vector?" ",obj" "f32vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%f64vector?" define-macro #f 1170 23 1170 35 ("##f64vector?" ",obj" "f64vector?" "jazz.debug-core?" "if" "obj")}
    {Lisp-Entry "%%vector?" define-macro #f 1176 23 1176 32 ("obj")}
    {Lisp-Entry "%%vector" define-macro #f 1179 23 1179 31 ("rest")}
    {Lisp-Entry "%%make-vector" define-macro #f 1182 23 1182 36 ("rest" "size")}
    {Lisp-Entry "%%vector-length" define-macro #f 1185 23 1185 38 ("vector")}
    {Lisp-Entry "%%vector-ref" define-macro #f 1188 23 1188 35 ("n" "vector")}
    {Lisp-Entry "%%vector-set!" define-macro #f 1191 23 1191 36 ("value" "n" "vector")}
    {Lisp-Entry "%%vector-copy" define-macro #f 1194 23 1194 36 ("rest" "vector")}})
"runtime"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "runtime.scm"} 1252768921
    {Lisp-Entry "jazz.expand-module-source" define #f 45 9 45 34 (",@body" "module" "'module" "jazz.declares" "begin" "jazz.error" "%%neq?" "jazz.requested-module-name" "and" "if" "body" "access" "name" "lambda" "parse" "rest")
      {Lisp-Entry "parse" define #f 46 11 46 16 ("%%cdr" "'public" "%%cddr" "%%cadr" "public" "protected" "%%memq" "if" "%%car" "jazz.source-code" "first" "let" "proc" "rest")}}
    {Lisp-Entry "jazz.expand-require" define #f 66 9 66 28 ("%%desourcify" "src" "jazz.filter-features" ",module-name" "',module-name" "jazz.load-module" "phase" "feature-requirement" "module-name" "jazz.listify" "jazz.parse-require" "require" "lambda" "map" "begin" "jazz.simplify-begin" "rest")}
    {Lisp-Entry "jazz.parse-require" define #f 76 9 76 27 ("'phase" "%%cdar" "set!" "begin" "cond" "'cond" "%%caar" "%%eq?" "%%pair?" "and" "if" "runtime" "'runtime" "phase" "feature-requirement" "%%cdr" "scan" "%%car" "name" "let" "proc" "require")}
    {Lisp-Entry "jazz.filter-features" define #f 98 9 98 29 ("else" "%%cddr" "%%car" "%%cons" "jazz.feature-safisfied?" "%%list" "%%not" "cond" "extract-feature-requirement" "feature-requirement" "let" "invoice" "lambda" "map" "append" "%%apply" "invoices")
      {Lisp-Entry "extract-feature-requirement" define #f 99 11 99 38 ("cond" "'cond" "%%car" "%%eq?" "%%cadr" "%%cdr" "%%null?" "%%not" "%%pair?" "and" "if" "invoice")}}
    {Lisp-Entry "jazz.feature-safisfied?" define #f 119 9 119 32 ("error" "##cond-expand-features" "%%memq" "%%symbol?" "if" "feature-requirement")}})
"settings"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "settings.scm"} 1252768921
    {Lisp-Entry "jazz.load-verbose?" define-macro #f 45 21 45 39 ()}
    {Lisp-Entry "jazz.outline-verbose?" define-macro #f 48 21 48 42 ()}
    {Lisp-Entry "jazz.done-verbose?" define-macro #f 51 21 51 39 ()}
    {Lisp-Entry "jazz.warn-interpreted?" define-macro #f 60 21 60 43 ()}
    {Lisp-Entry "jazz.warnings?" define-macro #f 70 21 70 35 ()}
    {Lisp-Entry "jazz.delay-reporting?" define-macro #f 74 21 74 42 ()}
    {Lisp-Entry "jazz.use-print?" define-macro #f 84 21 84 36 ()}
    {Lisp-Entry "jazz.debug-build?" define-macro #f 93 21 93 38 ()}
    {Lisp-Entry "jazz.build-jobs" define-macro #f 96 21 96 36 ("1")}
    {Lisp-Entry "jazz.inline-definitions?" define-macro #f 107 24 107 48 ()}
    {Lisp-Entry "jazz.inline-definitions?" define-macro #f 110 24 110 48 ()}
    {Lisp-Entry "jazz.debug-specializers" define-macro #f 114 21 114 44 ()}
    {Lisp-Entry "jazz.force-interpreted?" define-macro #f 118 21 118 44 ()}
    {Lisp-Entry "jazz.use-debugger?" define-macro #f 122 21 122 39 ()}
    {Lisp-Entry "jazz.profile-walker?" define-macro #f 131 21 131 41 ()}
    {Lisp-Entry "jazz.keep-instances-statistics" define-macro #f 140 21 140 51 ()}})
"setup"
 ({Lisp-File-Entry {File Jazz "kernel" "runtime" "setup.scm"} 1253395556
    {Lisp-Entry "jazz.compile-module-internal" define-macro #f 45 22 45 50 ()}
    {Lisp-Entry "jazz.build-module-internal" define-macro #f 46 22 46 48 ()}
    {Lisp-Entry "jazz.compile-module" define #f 49 9 49 28 ("jazz.compile-module-internal" "%%apply" "core.module.builder" "'core.module.builder" "core.library" "'core.library" "jazz.load-module" "rest")}
    {Lisp-Entry "jazz.build-module" define #f 54 9 54 26 ("jazz.build-module-internal" "%%apply" "core.module.builder" "'core.module.builder" "core.library" "'core.library" "jazz.load-module" "rest")}
    {Lisp-Entry "jazz.path->container-hook" define #f 65 9 65 34 ("jazz.find-pathname-module" "path")}
    {Lisp-Entry "jazz.container->path-hook" define #f 70 9 70 34 ("else" "jazz.resource-pathname" "if" "jazz.find-module-src" "src" "let" "%%symbol?" "%%string-length" "%%substring" "%%string-append" "jazz.string-starts-with?" "jazz.kernel-source" "jazz.kernel-source-built" "%%string?" "and" "cond" "container")}
    {Lisp-Entry "jazz.container->id-hook" define #f 90 9 90 32 ("%%symbol->string" "%%symbol?" "if" "container")}
    {Lisp-Entry "jazz.debugger" define #f 106 8 106 21 ()}
    {Lisp-Entry "jazz.jobs" define #f 109 8 109 17 ()}
    {Lisp-Entry "jazz.jazzini-file" define #f 112 8 112 25 ()}
    {Lisp-Entry "jazz.buildini-file" define #f 115 8 115 26 ()}
    {Lisp-Entry "jazz.warnings" define #f 118 8 118 21 ()}
    {Lisp-Entry "jazz.process-jazzini-file" define #f 122 9 122 34 ("jazz.load" "jazz.jazzini-file" "file-exists?" "if")}
    {Lisp-Entry "jazz.library-main" define #f 132 9 132 26 ("jazz.setup-repositories" "jazz.process-jazzini-file")}
    {Lisp-Entry "jazz.executable-main" define #f 142 9 142 29 ("jazz.repl-main" "else" "jazz.subprocess-build-products" "jazz.make-product" "jazz.update-product" "jazz.compile-module" "process-buildini-file" "jazz.product" "%%string->symbol" "jazz.run-product" "cond" "jazz.debug-build?" "0" "eqv?" "or" "if" "jazz.setup-repositories" "jazz.process-jazzini-file" "jazz.jobs" "jazz.debugger" "##allow-inner-global-define?" "set!" "number-argument" "jobs" "debugger" "compile" "make" "build" "update" "jazz.get-option" "run" "let" "remaining" "options" "lambda" "missing-argument-for-option" "command-line" "%%cdr" "jazz.split-command-line")
      {Lisp-Entry "missing-argument-for-option" define #f 143 11 143 38 ("jazz.repl-main" "%%write-string" "output-port" "lambda" "jazz.warnings" "set!" "opt")}
      {Lisp-Entry "number-argument" define #f 154 11 154 26 ("%%string->number" "%%string?" "if" "arg")}
      {Lisp-Entry "symbol-argument" define #f 159 11 159 26 ("%%string->symbol" "%%string?" "if" "arg")}
      {Lisp-Entry "process-buildini-file" define #f 164 11 164 32 ("jazz.load" "jazz.buildini-file" "file-exists?" "if")}}
    {Lisp-Entry "jazz.repl-main" define #f 206 9 206 23 ("force-output" "newline" "jazz.kernel-version" "jazz.present-version" "display" "jazz.warnings" "if" "output-port" "first" "lambda" "%%repl" "current-error-port" "repl-output-port" "current-output-port" "repl-input-port" "current-input-port")}})
"syntax"
 ({Lisp-File-Entry {File Jazz "kernel" "syntax" "syntax.scm"} 1252768921
    {Lisp-Entry "jazz.compile-options" define #f 45 8 45 28 ()}
    {Lisp-Entry "jazz.define-setting" define-macro #f 56 20 56 39 ("set!" ",name" ",expr" ",global" "define" "begin" "symbol->string" "jazz.generate-symbol" "global" "%%car" "%%null?" "if" "expr" "let" "rest" "name")}
    {Lisp-Entry "jazz.define-variable" define-macro #f 72 20 72 40 (",expr" "set!" ",name" "define" "begin" "%%car" "%%null?" "if" "expr" "let" "rest" "name")}
    {Lisp-Entry "%%make-repository" define-macro #f 89 20 89 37 ("binary?" "library-directory" "library-root" "directory" "name")}
    {Lisp-Entry "%%repository-name" define-macro #f 93 20 93 37 ("repository")}
    {Lisp-Entry "%%repository-directory" define-macro #f 96 20 96 42 ("repository")}
    {Lisp-Entry "%%repository-library-root" define-macro #f 99 20 99 45 ("repository")}
    {Lisp-Entry "%%repository-library-directory" define-macro #f 102 20 102 50 ("repository")}
    {Lisp-Entry "%%repository-binary?" define-macro #f 105 20 105 40 ("repository")}
    {Lisp-Entry "%%repository-packages-table" define-macro #f 108 20 108 47 ("repository")}
    {Lisp-Entry "%%repository-packages-table-set!" define-macro #f 111 20 111 52 ("packages-table" "repository")}
    {Lisp-Entry "%%make-package" define-macro #f 124 20 124 34 ("project" "profiles" "products" "char-encoding" "install" "modules-path" "modules-root" "library-path" "library-root" "parent" "name" "repository")}
    {Lisp-Entry "%%package-repository" define-macro #f 128 20 128 40 ("package")}
    {Lisp-Entry "%%package-name" define-macro #f 131 20 131 34 ("package")}
    {Lisp-Entry "%%package-parent" define-macro #f 134 20 134 36 ("package")}
    {Lisp-Entry "%%package-library-root" define-macro #f 137 20 137 42 ("package")}
    {Lisp-Entry "%%package-library-path" define-macro #f 140 20 140 42 ("package")}
    {Lisp-Entry "%%package-modules-root" define-macro #f 143 20 143 42 ("package")}
    {Lisp-Entry "%%package-modules-path" define-macro #f 146 20 146 42 ("package")}
    {Lisp-Entry "%%package-install" define-macro #f 149 20 149 37 ("package")}
    {Lisp-Entry "%%package-char-encoding" define-macro #f 152 20 152 43 ("package")}
    {Lisp-Entry "%%package-products" define-macro #f 155 20 155 38 ("package")}
    {Lisp-Entry "%%package-profiles" define-macro #f 158 20 158 38 ("package")}
    {Lisp-Entry "%%package-project" define-macro #f 161 20 161 37 ("package")}
    {Lisp-Entry "%%package-autoloads" define-macro #f 164 20 164 39 ("package")}
    {Lisp-Entry "%%make-product" define-macro #f 176 20 176 34 ("descriptor" "build" "update" "run" "icon" "title" "name")}
    {Lisp-Entry "%%product-name" define-macro #f 180 20 180 34 ("product")}
    {Lisp-Entry "%%product-title" define-macro #f 183 20 183 35 ("product")}
    {Lisp-Entry "%%product-icon" define-macro #f 186 20 186 34 ("product")}
    {Lisp-Entry "%%product-run" define-macro #f 189 20 189 33 ("product")}
    {Lisp-Entry "%%product-update" define-macro #f 192 20 192 36 ("product")}
    {Lisp-Entry "%%product-build" define-macro #f 195 20 195 35 ("product")}
    {Lisp-Entry "%%product-descriptor" define-macro #f 198 20 198 40 ("product")}
    {Lisp-Entry "%%make-resource" define-macro #f 212 20 212 35 ("extension" "path" "package")}
    {Lisp-Entry "%%resource-package" define-macro #f 216 20 216 38 ("resource")}
    {Lisp-Entry "%%resource-path" define-macro #f 219 20 219 35 ("resource")}
    {Lisp-Entry "%%resource-extension" define-macro #f 222 20 222 40 ("resource")}
    {Lisp-Entry "%%make-digest" define-macro #f 231 20 231 33 ("source-time" "source-hash" "compile-time-hash")}
    {Lisp-Entry "%%digest-compile-time-hash" define-macro #f 235 20 235 46 ("digest")}
    {Lisp-Entry "%%digest-compile-time-hash-set!" define-macro #f 238 20 238 51 ("compile-time-hash" "digest")}
    {Lisp-Entry "%%digest-source-hash" define-macro #f 241 20 241 40 ("digest")}
    {Lisp-Entry "%%digest-source-hash-set!" define-macro #f 244 20 244 45 ("source-hash" "digest")}
    {Lisp-Entry "%%digest-source-time" define-macro #f 247 20 247 40 ("digest")}
    {Lisp-Entry "%%digest-source-time-set!" define-macro #f 250 20 250 45 ("source-time" "digest")}
    {Lisp-Entry "%%make-manifest" define-macro #f 259 20 259 35 ("references" "digest" "version" "name")}
    {Lisp-Entry "%%manifest-name" define-macro #f 263 20 263 35 ("manifest")}
    {Lisp-Entry "%%manifest-version" define-macro #f 266 20 266 38 ("manifest")}
    {Lisp-Entry "%%manifest-version-set!" define-macro #f 269 20 269 43 ("version" "manifest")}
    {Lisp-Entry "%%manifest-digest" define-macro #f 272 20 272 37 ("manifest")}
    {Lisp-Entry "%%manifest-references" define-macro #f 275 20 275 41 ("manifest")}
    {Lisp-Entry "%%manifest-references-set!" define-macro #f 278 20 278 46 ("references" "manifest")}
    {Lisp-Entry "module" define-macro #f 287 20 287 26 ("jazz.source-code" "%%cdr" "jazz.expand-module-source" "form-src" "lambda")}
    {Lisp-Entry "require" define-macro #f 292 20 292 27 ("jazz.source-code" "%%cdr" "jazz.expand-require" "form-src" "lambda")}})
