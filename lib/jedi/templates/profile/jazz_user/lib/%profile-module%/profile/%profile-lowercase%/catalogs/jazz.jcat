"Core-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Core-Project.jazz"} 1251404157
    {Lisp-Entry "project.jazz.Core-Project" #f 37 9 37 34 ("Core-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Core-Project" #f 44 7 44 19 ("project.jazz.Core-Project" "module-name:" "core" "product:" "title:")}}})
"Dialect-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Dialect-Project.jazz"} 1251404157
    {Lisp-Entry "project.jazz.Dialect-Project" #f 37 9 37 37 ("Dialect-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Dialect-Project" #f 44 7 44 22 ("project.jazz.Dialect-Project" "module-name:" "jazz" "product:" "title:")}}})
"Jazz-Manifest"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Jazz-Manifest.jazz"} 1251729949
    {Lisp-Entry "project.jazz.Jazz-Manifest" #f 37 9 37 35 ("Jazz-Manifest" "register-autoclass" "jazz")
      {Lisp-Entry "Jazz-Manifest" #f 45 7 45 20 ("Test-Project" "Platform-Project" "Jazz-Manifest" "Dialect-Project" "Core-Project" "development" "literals" "c" "Y" "X" "cffi" "b" "autoload" "a" "_test" "_walker" "scheme" "core" "homogeneous" "functional" "parse" "object" "geometry" "format" "exception" "debug" "_language" "name:" "jazz" "source:" "Directory" "directory:" "project.jazz.Test-Project" "project.jazz.Platform-Project" "project.jazz.Dialect-Project" "project.jazz.Core-Project" "tag-module:" "project.jazz.Jazz-Manifest" "module-name:" "Jazz" "File" "documentation:" "include-extensions:" ":jazz" "catalog-extensions:" "catalog?:" "title:")}}})
"Platform-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Platform-Project.jazz"} 1251404157
    {Lisp-Entry "project.jazz.Platform-Project" #f 37 9 37 38 ("Platform-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Platform-Project" #f 44 7 44 23 ("project.jazz.Platform-Project" "module-name:" "jazz.platform" "product:" "title:")}}})
"Test-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Test-Project.jazz"} 1251404157
    {Lisp-Entry "project.jazz.Test-Project" #f 37 9 37 34 ("Test-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Test-Project" #f 44 7 44 19 ("project.jazz.Test-Project" "module-name:" "jazz.test" "product:" "title:")}}})
"X"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "X.jazz"} 1237033585
    {Lisp-Entry "jazz.test.X" #f 0 9 0 20 ("jazz")
      {Lisp-Entry "X" #f 3 7 3 8 ()
        {Lisp-Entry "foo" #f 6 19 6 22 ("X.foo" "'X.foo" "terminal")}}}})
"Y"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "Y.jazz"} 1237033585
    {Lisp-Entry "jazz.test.Y" #f 0 9 0 20 ("jazz")
      {Lisp-Entry "Y" #f 6 7 6 8 ()
        {Lisp-Entry "foo" #f 9 11 9 14 ("Y.foo" "'Y.foo" "terminal")}}}})
"_core"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "_core.scm"} 1250347032
    {Lisp-Entry "jazz.dialect.core" #f 37 19 37 36 ("scheme")}})
"_dialect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "_dialect.scm"} 1251542592
    {Lisp-Entry "jazz.dialect" #f 37 19 37 31 ("scheme")}})
"_jazz"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "_jazz.scm"} 1248708411
    {Lisp-Entry "jazz" #f 37 9 37 13 ("scheme")}})
"_kernel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "kernel" "_kernel.scm"} 1251747974
    {Lisp-Entry "jazz.dialect.kernel" #f 38 19 38 38 ("scheme")
      {Lisp-Entry "get-autoload" #f 46 8 46 25 ()}
      {Lisp-Entry "autoload" #f 47 8 47 21 ()}
      {Lisp-Entry "autoreload" #f 48 8 48 23 ()}
      {Lisp-Entry "boolean" #f 56 8 56 20 ()}
      {Lisp-Entry "box?" #f 64 8 64 12 ()}
      {Lisp-Entry "box" #f 65 8 65 11 ()}
      {Lisp-Entry "unbox" #f 66 8 66 13 ()}
      {Lisp-Entry "set-box!" #f 67 8 67 16 ()}
      {Lisp-Entry "compile-module" #f 75 8 75 27 ()}
      {Lisp-Entry "build-module" #f 76 8 76 25 ()}
      {Lisp-Entry "build-image" #f 77 8 77 24 ()}
      {Lisp-Entry "for-each-submodule" #f 78 8 78 31 ()}
      {Lisp-Entry "get-category-name" #f 86 8 86 30 ()}
      {Lisp-Entry "get-category-descendants" #f 87 8 87 37 ()}
      {Lisp-Entry "get-class-ascendant" #f 88 8 88 32 ()}
      {Lisp-Entry "symbolic-char" #f 96 8 96 26 ()}
      {Lisp-Entry "char-symbol" #f 97 8 97 24 ()}
      {Lisp-Entry "continuation?" #f 105 8 105 26 ()}
      {Lisp-Entry "continuation-capture" #f 106 8 106 33 ()}
      {Lisp-Entry "continuation-graft" #f 107 8 107 31 ()}
      {Lisp-Entry "continuation-return" #f 108 8 108 32 ()}
      {Lisp-Entry "run-loop?" #f 116 8 116 22 ()}
      {Lisp-Entry "terminal" #f 117 8 117 21 ()}
      {Lisp-Entry "terminal-string" #f 118 8 118 28 ()}
      {Lisp-Entry "terminal-port" #f 119 8 119 26 ()}
      {Lisp-Entry "unimplemented" #f 120 8 120 26 ()}
      {Lisp-Entry "dump-stack" #f 121 8 121 23 ()}
      {Lisp-Entry "log-object" #f 122 8 122 23 ()}
      {Lisp-Entry "log-string" #f 123 8 123 23 ()}
      {Lisp-Entry "log-newline" #f 124 8 124 24 ()}
      {Lisp-Entry "close-log" #f 125 8 125 22 ()}
      {Lisp-Entry "inspect-object" #f 126 8 126 27 ()}
      {Lisp-Entry "generate-proper-tail-calls" #f 127 8 127 34 ()}
      {Lisp-Entry "?" #f 139 8 139 9 ()}
      {Lisp-Entry "get-?" #f 139 19 139 24 ()}
      {Lisp-Entry "set-?" #f 139 34 139 39 ()}
      {Lisp-Entry "%" #f 140 8 140 9 ()}
      {Lisp-Entry "get-%" #f 140 19 140 24 ()}
      {Lisp-Entry "set-%" #f 140 34 140 39 ()}
      {Lisp-Entry "?a" #f 143 8 143 10 ()}
      {Lisp-Entry "get-?a" #f 143 20 143 26 ()}
      {Lisp-Entry "set-?a" #f 143 36 143 42 ()}
      {Lisp-Entry "?b" #f 144 8 144 10 ()}
      {Lisp-Entry "get-?b" #f 144 20 144 26 ()}
      {Lisp-Entry "set-?b" #f 144 36 144 42 ()}
      {Lisp-Entry "?c" #f 145 8 145 10 ()}
      {Lisp-Entry "get-?c" #f 145 20 145 26 ()}
      {Lisp-Entry "set-?c" #f 145 36 145 42 ()}
      {Lisp-Entry "?d" #f 146 8 146 10 ()}
      {Lisp-Entry "get-?d" #f 146 20 146 26 ()}
      {Lisp-Entry "set-?d" #f 146 36 146 42 ()}
      {Lisp-Entry "?e" #f 147 8 147 10 ()}
      {Lisp-Entry "get-?e" #f 147 20 147 26 ()}
      {Lisp-Entry "set-?e" #f 147 36 147 42 ()}
      {Lisp-Entry "?f" #f 148 8 148 10 ()}
      {Lisp-Entry "get-?f" #f 148 20 148 26 ()}
      {Lisp-Entry "set-?f" #f 148 36 148 42 ()}
      {Lisp-Entry "?g" #f 149 8 149 10 ()}
      {Lisp-Entry "get-?g" #f 149 20 149 26 ()}
      {Lisp-Entry "set-?g" #f 149 36 149 42 ()}
      {Lisp-Entry "?h" #f 150 8 150 10 ()}
      {Lisp-Entry "get-?h" #f 150 20 150 26 ()}
      {Lisp-Entry "set-?h" #f 150 36 150 42 ()}
      {Lisp-Entry "?i" #f 151 8 151 10 ()}
      {Lisp-Entry "get-?i" #f 151 20 151 26 ()}
      {Lisp-Entry "set-?i" #f 151 36 151 42 ()}
      {Lisp-Entry "?j" #f 152 8 152 10 ()}
      {Lisp-Entry "get-?j" #f 152 20 152 26 ()}
      {Lisp-Entry "set-?j" #f 152 36 152 42 ()}
      {Lisp-Entry "?k" #f 153 8 153 10 ()}
      {Lisp-Entry "get-?k" #f 153 20 153 26 ()}
      {Lisp-Entry "set-?k" #f 153 36 153 42 ()}
      {Lisp-Entry "?l" #f 154 8 154 10 ()}
      {Lisp-Entry "get-?l" #f 154 20 154 26 ()}
      {Lisp-Entry "set-?l" #f 154 36 154 42 ()}
      {Lisp-Entry "?m" #f 155 8 155 10 ()}
      {Lisp-Entry "get-?m" #f 155 20 155 26 ()}
      {Lisp-Entry "set-?m" #f 155 36 155 42 ()}
      {Lisp-Entry "?n" #f 156 8 156 10 ()}
      {Lisp-Entry "get-?n" #f 156 20 156 26 ()}
      {Lisp-Entry "set-?n" #f 156 36 156 42 ()}
      {Lisp-Entry "?o" #f 157 8 157 10 ()}
      {Lisp-Entry "get-?o" #f 157 20 157 26 ()}
      {Lisp-Entry "set-?o" #f 157 36 157 42 ()}
      {Lisp-Entry "?p" #f 158 8 158 10 ()}
      {Lisp-Entry "get-?p" #f 158 20 158 26 ()}
      {Lisp-Entry "set-?p" #f 158 36 158 42 ()}
      {Lisp-Entry "?q" #f 159 8 159 10 ()}
      {Lisp-Entry "get-?q" #f 159 20 159 26 ()}
      {Lisp-Entry "set-?q" #f 159 36 159 42 ()}
      {Lisp-Entry "?r" #f 160 8 160 10 ()}
      {Lisp-Entry "get-?r" #f 160 20 160 26 ()}
      {Lisp-Entry "set-?r" #f 160 36 160 42 ()}
      {Lisp-Entry "?s" #f 161 8 161 10 ()}
      {Lisp-Entry "get-?s" #f 161 20 161 26 ()}
      {Lisp-Entry "set-?s" #f 161 36 161 42 ()}
      {Lisp-Entry "?t" #f 162 8 162 10 ()}
      {Lisp-Entry "get-?t" #f 162 20 162 26 ()}
      {Lisp-Entry "set-?t" #f 162 36 162 42 ()}
      {Lisp-Entry "?u" #f 163 8 163 10 ()}
      {Lisp-Entry "get-?u" #f 163 20 163 26 ()}
      {Lisp-Entry "set-?u" #f 163 36 163 42 ()}
      {Lisp-Entry "?v" #f 164 8 164 10 ()}
      {Lisp-Entry "get-?v" #f 164 20 164 26 ()}
      {Lisp-Entry "set-?v" #f 164 36 164 42 ()}
      {Lisp-Entry "?w" #f 165 8 165 10 ()}
      {Lisp-Entry "get-?w" #f 165 20 165 26 ()}
      {Lisp-Entry "set-?w" #f 165 36 165 42 ()}
      {Lisp-Entry "?x" #f 166 8 166 10 ()}
      {Lisp-Entry "get-?x" #f 166 20 166 26 ()}
      {Lisp-Entry "set-?x" #f 166 36 166 42 ()}
      {Lisp-Entry "?y" #f 167 8 167 10 ()}
      {Lisp-Entry "get-?y" #f 167 20 167 26 ()}
      {Lisp-Entry "set-?y" #f 167 36 167 42 ()}
      {Lisp-Entry "?z" #f 168 8 168 10 ()}
      {Lisp-Entry "get-?z" #f 168 20 168 26 ()}
      {Lisp-Entry "set-?z" #f 168 36 168 42 ()}
      {Lisp-Entry "%a" #f 171 8 171 10 ()}
      {Lisp-Entry "get-%a" #f 171 20 171 26 ()}
      {Lisp-Entry "set-%a" #f 171 36 171 42 ()}
      {Lisp-Entry "%b" #f 172 8 172 10 ()}
      {Lisp-Entry "get-%b" #f 172 20 172 26 ()}
      {Lisp-Entry "set-%b" #f 172 36 172 42 ()}
      {Lisp-Entry "%c" #f 173 8 173 10 ()}
      {Lisp-Entry "get-%c" #f 173 20 173 26 ()}
      {Lisp-Entry "set-%c" #f 173 36 173 42 ()}
      {Lisp-Entry "%d" #f 174 8 174 10 ()}
      {Lisp-Entry "get-%d" #f 174 20 174 26 ()}
      {Lisp-Entry "set-%d" #f 174 36 174 42 ()}
      {Lisp-Entry "%e" #f 175 8 175 10 ()}
      {Lisp-Entry "get-%e" #f 175 20 175 26 ()}
      {Lisp-Entry "set-%e" #f 175 36 175 42 ()}
      {Lisp-Entry "%f" #f 176 8 176 10 ()}
      {Lisp-Entry "get-%f" #f 176 20 176 26 ()}
      {Lisp-Entry "set-%f" #f 176 36 176 42 ()}
      {Lisp-Entry "%g" #f 177 8 177 10 ()}
      {Lisp-Entry "get-%g" #f 177 20 177 26 ()}
      {Lisp-Entry "set-%g" #f 177 36 177 42 ()}
      {Lisp-Entry "%h" #f 178 8 178 10 ()}
      {Lisp-Entry "get-%h" #f 178 20 178 26 ()}
      {Lisp-Entry "set-%h" #f 178 36 178 42 ()}
      {Lisp-Entry "%i" #f 179 8 179 10 ()}
      {Lisp-Entry "get-%i" #f 179 20 179 26 ()}
      {Lisp-Entry "set-%i" #f 179 36 179 42 ()}
      {Lisp-Entry "%j" #f 180 8 180 10 ()}
      {Lisp-Entry "get-%j" #f 180 20 180 26 ()}
      {Lisp-Entry "set-%j" #f 180 36 180 42 ()}
      {Lisp-Entry "%k" #f 181 8 181 10 ()}
      {Lisp-Entry "get-%k" #f 181 20 181 26 ()}
      {Lisp-Entry "set-%k" #f 181 36 181 42 ()}
      {Lisp-Entry "%l" #f 182 8 182 10 ()}
      {Lisp-Entry "get-%l" #f 182 20 182 26 ()}
      {Lisp-Entry "set-%l" #f 182 36 182 42 ()}
      {Lisp-Entry "%m" #f 183 8 183 10 ()}
      {Lisp-Entry "get-%m" #f 183 20 183 26 ()}
      {Lisp-Entry "set-%m" #f 183 36 183 42 ()}
      {Lisp-Entry "%n" #f 184 8 184 10 ()}
      {Lisp-Entry "get-%n" #f 184 20 184 26 ()}
      {Lisp-Entry "set-%n" #f 184 36 184 42 ()}
      {Lisp-Entry "%o" #f 185 8 185 10 ()}
      {Lisp-Entry "get-%o" #f 185 20 185 26 ()}
      {Lisp-Entry "set-%o" #f 185 36 185 42 ()}
      {Lisp-Entry "%p" #f 186 8 186 10 ()}
      {Lisp-Entry "get-%p" #f 186 20 186 26 ()}
      {Lisp-Entry "set-%p" #f 186 36 186 42 ()}
      {Lisp-Entry "%q" #f 187 8 187 10 ()}
      {Lisp-Entry "get-%q" #f 187 20 187 26 ()}
      {Lisp-Entry "set-%q" #f 187 36 187 42 ()}
      {Lisp-Entry "%r" #f 188 8 188 10 ()}
      {Lisp-Entry "get-%r" #f 188 20 188 26 ()}
      {Lisp-Entry "set-%r" #f 188 36 188 42 ()}
      {Lisp-Entry "%s" #f 189 8 189 10 ()}
      {Lisp-Entry "get-%s" #f 189 20 189 26 ()}
      {Lisp-Entry "set-%s" #f 189 36 189 42 ()}
      {Lisp-Entry "%t" #f 190 8 190 10 ()}
      {Lisp-Entry "get-%t" #f 190 20 190 26 ()}
      {Lisp-Entry "set-%t" #f 190 36 190 42 ()}
      {Lisp-Entry "%u" #f 191 8 191 10 ()}
      {Lisp-Entry "get-%u" #f 191 20 191 26 ()}
      {Lisp-Entry "set-%u" #f 191 36 191 42 ()}
      {Lisp-Entry "%v" #f 192 8 192 10 ()}
      {Lisp-Entry "get-%v" #f 192 20 192 26 ()}
      {Lisp-Entry "set-%v" #f 192 36 192 42 ()}
      {Lisp-Entry "%w" #f 193 8 193 10 ()}
      {Lisp-Entry "get-%w" #f 193 20 193 26 ()}
      {Lisp-Entry "set-%w" #f 193 36 193 42 ()}
      {Lisp-Entry "%x" #f 194 8 194 10 ()}
      {Lisp-Entry "get-%x" #f 194 20 194 26 ()}
      {Lisp-Entry "set-%x" #f 194 36 194 42 ()}
      {Lisp-Entry "%y" #f 195 8 195 10 ()}
      {Lisp-Entry "get-%y" #f 195 20 195 26 ()}
      {Lisp-Entry "set-%y" #f 195 36 195 42 ()}
      {Lisp-Entry "%z" #f 196 8 196 10 ()}
      {Lisp-Entry "get-%z" #f 196 20 196 26 ()}
      {Lisp-Entry "set-%z" #f 196 36 196 42 ()}
      {Lisp-Entry "open-digest" #f 204 8 204 19 ()}
      {Lisp-Entry "close-digest" #f 205 8 205 20 ()}
      {Lisp-Entry "digest-update-subu8vector" #f 206 8 206 33 ()}
      {Lisp-Entry "digest-string" #f 207 8 207 21 ()}
      {Lisp-Entry "digest-substring" #f 208 8 208 24 ()}
      {Lisp-Entry "digest-u8vector" #f 209 8 209 23 ()}
      {Lisp-Entry "digest-subu8vector" #f 210 8 210 26 ()}
      {Lisp-Entry "digest-file" #f 211 8 211 19 ()}
      {Lisp-Entry "enumerator?" #f 219 8 219 24 ()}
      {Lisp-Entry "enumerator->symbol" #f 220 8 220 31 ()}
      {Lisp-Entry "exception-reason" #f 228 8 228 29 ()}
      {Lisp-Entry "exception-detail" #f 229 8 229 29 ()}
      {Lisp-Entry "display-exception" #f 230 8 230 30 ()}
      {Lisp-Entry "display-continuation-backtrace" #f 231 8 231 43 ()}
      {Lisp-Entry "get-exception-hook" #f 232 8 232 31 ()}
      {Lisp-Entry "set-exception-hook" #f 233 8 233 31 ()}
      {Lisp-Entry "invoke-exception-hook" #f 234 8 234 34 ()}
      {Lisp-Entry "system-exception-hook" #f 235 8 235 34 ()}
      {Lisp-Entry "current-exception-handler" #f 236 8 236 38 ()}
      {Lisp-Entry "with-exception-handler" #f 237 8 237 35 ()}
      {Lisp-Entry "with-exception-catcher" #f 238 8 238 35 ()}
      {Lisp-Entry "with-exception-filter" #f 239 8 239 34 ()}
      {Lisp-Entry "with-exception-propagater" #f 240 8 240 38 ()}
      {Lisp-Entry "dump-exception" #f 241 8 241 27 ()}
      {Lisp-Entry "raise" #f 242 8 242 18 ()}
      {Lisp-Entry "field?" #f 250 8 250 19 ()}
      {Lisp-Entry "field-name" #f 251 8 251 23 ()}
      {Lisp-Entry "find-field" #f 252 8 252 23 ()}
      {Lisp-Entry "fixnum?" #f 260 8 260 15 ()}
      {Lisp-Entry "flonum?" #f 261 8 261 15 ()}
      {Lisp-Entry "fixnum->flonum" #f 262 8 262 27 ()}
      {Lisp-Entry "flonum->fixnum" #f 263 8 263 27 ()}
      {Lisp-Entry "fx+" #f 264 8 264 11 ()}
      {Lisp-Entry "fx-" #f 265 8 265 11 ()}
      {Lisp-Entry "fx*" #f 266 8 266 11 ()}
      {Lisp-Entry "+infinity" #f 267 8 267 22 ()}
      {Lisp-Entry "-infinity" #f 268 8 268 22 ()}
      {Lisp-Entry "undocumented" #f 278 8 278 20 ("##fl+")}
      {Lisp-Entry "undocumented" #f 279 8 279 20 ("##fl-")}
      {Lisp-Entry "undocumented" #f 280 8 280 20 ("##fl*")}
      {Lisp-Entry "undocumented" #f 281 8 281 20 ("##fl/")}
      {Lisp-Entry "foreign?" #f 289 8 289 21 ()}
      {Lisp-Entry "foreign-address" #f 290 8 290 28 ()}
      {Lisp-Entry "foreign-release!" #f 291 8 291 29 ()}
      {Lisp-Entry "foreign-released?" #f 292 8 292 30 ()}
      {Lisp-Entry "foreign-tags" #f 293 8 293 25 ()}
      {Lisp-Entry "still-obj-refcount-dec!" #f 295 8 295 36 ()}
      {Lisp-Entry "still-obj-refcount-inc!" #f 296 8 296 36 ()}
      {Lisp-Entry "compile-file" #f 304 8 304 20 ()}
      {Lisp-Entry "datum-parsing-exception?" #f 305 8 305 32 ()}
      {Lisp-Entry "s8vector" #f 314 8 314 16 ()}
      {Lisp-Entry "make-s8vector" #f 315 8 315 21 ()}
      {Lisp-Entry "s8vector-length" #f 316 8 316 23 ()}
      {Lisp-Entry "s8vector-ref" #f 317 8 317 20 ()}
      {Lisp-Entry "s8vector-set!" #f 318 8 318 21 ()}
      {Lisp-Entry "s8vector?" #f 319 8 319 17 ()}
      {Lisp-Entry "s8vector->list" #f 320 8 320 22 ()}
      {Lisp-Entry "list->s8vector" #f 321 8 321 22 ()}
      {Lisp-Entry "u8vector" #f 324 8 324 16 ()}
      {Lisp-Entry "make-u8vector" #f 325 8 325 21 ()}
      {Lisp-Entry "u8vector-length" #f 326 8 326 23 ()}
      {Lisp-Entry "u8vector-ref" #f 327 8 327 20 ()}
      {Lisp-Entry "u8vector-set!" #f 328 8 328 21 ()}
      {Lisp-Entry "u8vector?" #f 329 8 329 17 ()}
      {Lisp-Entry "u8vector->list" #f 330 8 330 22 ()}
      {Lisp-Entry "list->u8vector" #f 331 8 331 22 ()}
      {Lisp-Entry "u8vector->object" #f 332 8 332 24 ()}
      {Lisp-Entry "object->u8vector" #f 333 8 333 24 ()}
      {Lisp-Entry "s16vector" #f 336 8 336 17 ()}
      {Lisp-Entry "make-s16vector" #f 337 8 337 22 ()}
      {Lisp-Entry "s16vector-length" #f 338 8 338 24 ()}
      {Lisp-Entry "s16vector-ref" #f 339 8 339 21 ()}
      {Lisp-Entry "s16vector-set!" #f 340 8 340 22 ()}
      {Lisp-Entry "s16vector?" #f 341 8 341 18 ()}
      {Lisp-Entry "s16vector->list" #f 342 8 342 23 ()}
      {Lisp-Entry "list->s16vector" #f 343 8 343 23 ()}
      {Lisp-Entry "u16vector" #f 346 8 346 17 ()}
      {Lisp-Entry "make-u16vector" #f 347 8 347 22 ()}
      {Lisp-Entry "u16vector-length" #f 348 8 348 24 ()}
      {Lisp-Entry "u16vector-ref" #f 349 8 349 21 ()}
      {Lisp-Entry "u16vector-set!" #f 350 8 350 22 ()}
      {Lisp-Entry "u16vector?" #f 351 8 351 18 ()}
      {Lisp-Entry "u16vector->list" #f 352 8 352 23 ()}
      {Lisp-Entry "list->u16vector" #f 353 8 353 23 ()}
      {Lisp-Entry "s32vector" #f 356 8 356 17 ()}
      {Lisp-Entry "make-s32vector" #f 357 8 357 22 ()}
      {Lisp-Entry "s32vector-length" #f 358 8 358 24 ()}
      {Lisp-Entry "s32vector-ref" #f 359 8 359 21 ()}
      {Lisp-Entry "s32vector-set!" #f 360 8 360 22 ()}
      {Lisp-Entry "s32vector?" #f 361 8 361 18 ()}
      {Lisp-Entry "s32vector->list" #f 362 8 362 23 ()}
      {Lisp-Entry "list->s32vector" #f 363 8 363 23 ()}
      {Lisp-Entry "u32vector" #f 366 8 366 17 ()}
      {Lisp-Entry "make-u32vector" #f 367 8 367 22 ()}
      {Lisp-Entry "u32vector-length" #f 368 8 368 24 ()}
      {Lisp-Entry "u32vector-ref" #f 369 8 369 21 ()}
      {Lisp-Entry "u32vector-set!" #f 370 8 370 22 ()}
      {Lisp-Entry "u32vector?" #f 371 8 371 18 ()}
      {Lisp-Entry "u32vector->list" #f 372 8 372 23 ()}
      {Lisp-Entry "list->u32vector" #f 373 8 373 23 ()}
      {Lisp-Entry "s64vector" #f 376 8 376 17 ()}
      {Lisp-Entry "make-s64vector" #f 377 8 377 22 ()}
      {Lisp-Entry "s64vector-length" #f 378 8 378 24 ()}
      {Lisp-Entry "s64vector-ref" #f 379 8 379 21 ()}
      {Lisp-Entry "s64vector-set!" #f 380 8 380 22 ()}
      {Lisp-Entry "s64vector?" #f 381 8 381 18 ()}
      {Lisp-Entry "s64vector->list" #f 382 8 382 23 ()}
      {Lisp-Entry "list->s64vector" #f 383 8 383 23 ()}
      {Lisp-Entry "u64vector" #f 386 8 386 17 ()}
      {Lisp-Entry "make-u64vector" #f 387 8 387 22 ()}
      {Lisp-Entry "u64vector-length" #f 388 8 388 24 ()}
      {Lisp-Entry "u64vector-ref" #f 389 8 389 21 ()}
      {Lisp-Entry "u64vector-set!" #f 390 8 390 22 ()}
      {Lisp-Entry "u64vector?" #f 391 8 391 18 ()}
      {Lisp-Entry "u64vector->list" #f 392 8 392 23 ()}
      {Lisp-Entry "list->u64vector" #f 393 8 393 23 ()}
      {Lisp-Entry "f32vector" #f 396 8 396 17 ()}
      {Lisp-Entry "make-f32vector" #f 397 8 397 22 ()}
      {Lisp-Entry "f32vector-length" #f 398 8 398 24 ()}
      {Lisp-Entry "f32vector-ref" #f 399 8 399 21 ()}
      {Lisp-Entry "f32vector-set!" #f 400 8 400 22 ()}
      {Lisp-Entry "f32vector?" #f 401 8 401 18 ()}
      {Lisp-Entry "f32vector->list" #f 402 8 402 23 ()}
      {Lisp-Entry "list->f32vector" #f 403 8 403 23 ()}
      {Lisp-Entry "f64vector" #f 406 8 406 17 ()}
      {Lisp-Entry "make-f64vector" #f 407 8 407 22 ()}
      {Lisp-Entry "f64vector-length" #f 408 8 408 24 ()}
      {Lisp-Entry "f64vector-ref" #f 409 8 409 21 ()}
      {Lisp-Entry "f64vector-set!" #f 410 8 410 22 ()}
      {Lisp-Entry "f64vector?" #f 411 8 411 18 ()}
      {Lisp-Entry "f64vector->list" #f 412 8 412 23 ()}
      {Lisp-Entry "list->f64vector" #f 413 8 413 23 ()}
      {Lisp-Entry "command-line" #f 421 8 421 20 ()}
      {Lisp-Entry "user-name" #f 422 8 422 17 ()}
      {Lisp-Entry "composite-name?" #f 430 8 430 28 ()}
      {Lisp-Entry "compose-name" #f 431 8 431 25 ()}
      {Lisp-Entry "identifier-module" #f 432 8 432 30 ()}
      {Lisp-Entry "identifier-name" #f 433 8 433 28 ()}
      {Lisp-Entry "split-identifier" #f 434 8 434 29 ()}
      {Lisp-Entry "split-composite" #f 435 8 435 28 ()}
      {Lisp-Entry "bitwise-not" #f 451 8 451 19 ()}
      {Lisp-Entry "bitwise-and" #f 452 8 452 19 ()}
      {Lisp-Entry "bitwise-ior" #f 453 8 453 19 ()}
      {Lisp-Entry "bitwise-xor" #f 454 8 454 19 ()}
      {Lisp-Entry "arithmetic-shift" #f 455 8 455 24 ()}
      {Lisp-Entry "bit-set?" #f 456 8 456 16 ()}
      {Lisp-Entry "extract-bit-field" #f 457 8 457 25 ()}
      {Lisp-Entry "build-feedback" #f 465 8 465 27 ()}
      {Lisp-Entry "boot-directory" #f 466 8 466 27 ()}
      {Lisp-Entry "kernel-system" #f 467 8 467 26 ()}
      {Lisp-Entry "kernel-platform" #f 468 8 468 28 ()}
      {Lisp-Entry "kernel-windowing" #f 469 8 469 29 ()}
      {Lisp-Entry "kernel-safety" #f 470 8 470 26 ()}
      {Lisp-Entry "kernel-optimize?" #f 471 8 471 29 ()}
      {Lisp-Entry "kernel-debug-environments?" #f 472 8 472 39 ()}
      {Lisp-Entry "kernel-debug-location?" #f 473 8 473 35 ()}
      {Lisp-Entry "kernel-debug-source?" #f 474 8 474 33 ()}
      {Lisp-Entry "kernel-destination" #f 475 8 475 31 ()}
      {Lisp-Entry "kernel-built" #f 476 8 476 25 ()}
      {Lisp-Entry "kernel-install" #f 477 8 477 27 ()}
      {Lisp-Entry "kernel-source" #f 478 8 478 26 ()}
      {Lisp-Entry "kernel-version" #f 479 8 479 27 ()}
      {Lisp-Entry "get-source-version-number" #f 480 8 480 38 ()}
      {Lisp-Entry "jazz-product" #f 481 8 481 25 ()}
      {Lisp-Entry "jazz-profile" #f 482 8 482 25 ()}
      {Lisp-Entry "use-debugger?" #f 483 8 483 26 ()}
      {Lisp-Entry "get-repositories" #f 484 8 484 29 ()}
      {Lisp-Entry "install-repository" #f 485 8 485 31 ()}
      {Lisp-Entry "uninstall-repository" #f 486 8 486 33 ()}
      {Lisp-Entry "find-repository" #f 487 8 487 28 ()}
      {Lisp-Entry "find-package" #f 488 8 488 25 ()}
      {Lisp-Entry "repository?" #f 489 8 489 24 ()}
      {Lisp-Entry "repository-name" #f 490 8 490 28 ()}
      {Lisp-Entry "repository-directory" #f 491 8 491 33 ()}
      {Lisp-Entry "repository-library-root" #f 492 8 492 36 ()}
      {Lisp-Entry "repository-library-directory" #f 493 8 493 41 ()}
      {Lisp-Entry "repository-binary?" #f 494 8 494 31 ()}
      {Lisp-Entry "repository-packages" #f 495 8 495 32 ()}
      {Lisp-Entry "repository-find-package" #f 496 8 496 36 ()}
      {Lisp-Entry "repository-install-packages" #f 497 8 497 40 ()}
      {Lisp-Entry "repository-add-package" #f 498 8 498 35 ()}
      {Lisp-Entry "repository-remove-package" #f 499 8 499 38 ()}
      {Lisp-Entry "package?" #f 500 8 500 21 ()}
      {Lisp-Entry "package-repository" #f 501 8 501 31 ()}
      {Lisp-Entry "package-name" #f 502 8 502 25 ()}
      {Lisp-Entry "package-directory" #f 503 8 503 30 ()}
      {Lisp-Entry "package-products" #f 504 8 504 29 ()}
      {Lisp-Entry "package-project" #f 505 8 505 28 ()}
      {Lisp-Entry "split-version" #f 506 8 506 26 ()}
      {Lisp-Entry "present-version" #f 507 8 507 28 ()}
      {Lisp-Entry "load-package" #f 508 8 508 25 ()}
      {Lisp-Entry "register-product" #f 509 8 509 29 ()}
      {Lisp-Entry "register-product-run" #f 510 8 510 33 ()}
      {Lisp-Entry "product-descriptor-name" #f 511 8 511 36 ()}
      {Lisp-Entry "product-descriptor-module" #f 512 8 512 38 ()}
      {Lisp-Entry "product-descriptor-title" #f 513 8 513 37 ()}
      {Lisp-Entry "product-descriptor-icon" #f 514 8 514 36 ()}
      {Lisp-Entry "product-descriptor-run" #f 515 8 515 35 ()}
      {Lisp-Entry "product-descriptor-update" #f 516 8 516 38 ()}
      {Lisp-Entry "product-descriptor-build" #f 517 8 517 37 ()}
      {Lisp-Entry "product-descriptor-dependencies" #f 518 8 518 44 ()}
      {Lisp-Entry "run-product-descriptor" #f 519 8 519 35 ()}
      {Lisp-Entry "update-product-descriptor" #f 520 8 520 38 ()}
      {Lisp-Entry "build-product-descriptor" #f 521 8 521 37 ()}
      {Lisp-Entry "current-process-name" #f 522 8 522 33 ()}
      {Lisp-Entry "current-process-name-set!" #f 523 8 523 38 ()}
      {Lisp-Entry "current-process-title" #f 524 8 524 34 ()}
      {Lisp-Entry "current-process-title-set!" #f 525 8 525 39 ()}
      {Lisp-Entry "current-process-icon" #f 526 8 526 33 ()}
      {Lisp-Entry "current-process-icon-set!" #f 527 8 527 38 ()}
      {Lisp-Entry "current-process-version" #f 528 8 528 36 ()}
      {Lisp-Entry "current-process-version-set!" #f 529 8 529 41 ()}
      {Lisp-Entry "current-process-present" #f 530 8 530 36 ()}
      {Lisp-Entry "destination-directory" #f 531 8 531 34 ()}
      {Lisp-Entry "executable-extension" #f 532 8 532 33 ()}
      {Lisp-Entry "run-product" #f 533 8 533 24 ()}
      {Lisp-Entry "update-product" #f 534 8 534 27 ()}
      {Lisp-Entry "build-product" #f 535 8 535 26 ()}
      {Lisp-Entry "descendant-module?" #f 536 8 536 31 ()}
      {Lisp-Entry "find-pathname-module" #f 537 8 537 33 ()}
      {Lisp-Entry "find-module-src" #f 538 8 538 28 ()}
      {Lisp-Entry "gather-profiles" #f 539 8 539 28 ()}
      {Lisp-Entry "make-profile" #f 540 8 540 25 ()}
      {Lisp-Entry "profile-name" #f 541 8 541 25 ()}
      {Lisp-Entry "profile-title" #f 542 8 542 26 ()}
      {Lisp-Entry "profile-module" #f 543 8 543 27 ()}
      {Lisp-Entry "module-autoload" #f 544 8 544 28 ()}
      {Lisp-Entry "get-environment" #f 545 8 545 28 ()}
      {Lisp-Entry "get-environment-module" #f 546 8 546 35 ()}
      {Lisp-Entry "module-loaded?" #f 547 8 547 27 ()}
      {Lisp-Entry "module-uptodate-binary?" #f 548 8 548 36 ()}
      {Lisp-Entry "load-module" #f 549 8 549 24 ()}
      {Lisp-Entry "reload-module" #f 550 8 550 26 ()}
      {Lisp-Entry "get-load-mutex" #f 551 8 551 27 ()}
      {Lisp-Entry "get-load-stack" #f 552 8 552 27 ()}
      {Lisp-Entry "get-library" #f 553 8 553 24 ()}
      {Lisp-Entry "require-library" #f 554 8 554 28 ()}
      {Lisp-Entry "library-ref" #f 555 8 555 24 ()}
      {Lisp-Entry "walk-for" #f 556 8 556 21 ()}
      {Lisp-Entry "register-service" #f 557 8 557 29 ()}
      {Lisp-Entry "get-service" #f 558 8 558 24 ()}
      {Lisp-Entry "require-service" #f 559 8 559 28 ()}
      {Lisp-Entry "global-variable?" #f 560 8 560 29 ()}
      {Lisp-Entry "global-value" #f 561 8 561 25 ()}
      {Lisp-Entry "main" #f 562 8 562 12 ()}
      {Lisp-Entry "keyword?" #f 570 8 570 21 ()}
      {Lisp-Entry "string->keyword" #f 571 8 571 28 ()}
      {Lisp-Entry "keyword->string" #f 572 8 572 28 ()}
      {Lisp-Entry "not-null?" #f 580 8 580 22 ()}
      {Lisp-Entry "listify" #f 581 8 581 20 ()}
      {Lisp-Entry "list-copy" #f 582 8 582 22 ()}
      {Lisp-Entry "last-pair" #f 583 8 583 22 ()}
      {Lisp-Entry "proper-list" #f 584 8 584 24 ()}
      {Lisp-Entry "gc" #f 592 8 592 15 ()}
      {Lisp-Entry "process-memory" #f 593 8 593 27 ()}
      {Lisp-Entry "symbols-memory" #f 594 8 594 27 ()}
      {Lisp-Entry "classes-statistics" #f 595 8 595 31 ()}
      {Lisp-Entry "class-instances-count" #f 596 8 596 34 ()}
      {Lisp-Entry "class-instances-size" #f 597 8 597 33 ()}
      {Lisp-Entry "instances-statistics" #f 598 8 598 33 ()}
      {Lisp-Entry "vector-size" #f 599 8 599 24 ()}
      {Lisp-Entry "f64vector-size" #f 600 8 600 27 ()}
      {Lisp-Entry "list-size" #f 601 8 601 22 ()}
      {Lisp-Entry "table-size" #f 602 8 602 23 ()}
      {Lisp-Entry "open-tcp-client" #f 610 8 610 28 ()}
      {Lisp-Entry "open-tcp-server" #f 611 8 611 28 ()}
      {Lisp-Entry "tcp-server-socket-info" #f 612 8 612 35 ()}
      {Lisp-Entry "call-with-tcp-client" #f 613 8 613 33 ()}
      {Lisp-Entry "new" #f 621 8 621 16 ()}
      {Lisp-Entry "class-of" #f 622 8 622 21 ()}
      {Lisp-Entry "object?" #f 623 8 623 20 ()}
      {Lisp-Entry "type?" #f 624 8 624 18 ()}
      {Lisp-Entry "category?" #f 625 8 625 22 ()}
      {Lisp-Entry "interface?" #f 626 8 626 23 ()}
      {Lisp-Entry "method?" #f 627 8 627 20 ()}
      {Lisp-Entry "is?" #f 628 8 628 16 ()}
      {Lisp-Entry "subtype?" #f 629 8 629 21 ()}
      {Lisp-Entry "subcategory?" #f 630 8 630 25 ()}
      {Lisp-Entry "subclass?" #f 631 8 631 22 ()}
      {Lisp-Entry "make-parameter" #f 639 8 639 22 ()}
      {Lisp-Entry "pathname-type" #f 647 8 647 26 ()}
      {Lisp-Entry "pathname-expand" #f 648 8 648 28 ()}
      {Lisp-Entry "pathname-normalize" #f 649 8 649 31 ()}
      {Lisp-Entry "file-exists?" #f 650 8 650 25 ()}
      {Lisp-Entry "file-delete" #f 651 8 651 24 ()}
      {Lisp-Entry "file-copy" #f 652 8 652 22 ()}
      {Lisp-Entry "file-modification-time" #f 653 8 653 35 ()}
      {Lisp-Entry "file-rename" #f 654 8 654 24 ()}
      {Lisp-Entry "current-directory" #f 655 8 655 30 ()}
      {Lisp-Entry "current-directory-set!" #f 656 8 656 35 ()}
      {Lisp-Entry "with-current-directory" #f 657 8 657 35 ()}
      {Lisp-Entry "directory-create" #f 658 8 658 29 ()}
      {Lisp-Entry "directory-content" #f 659 8 659 30 ()}
      {Lisp-Entry "directory-delete" #f 660 8 660 29 ()}
      {Lisp-Entry "open-string-pipe" #f 668 8 668 24 ()}
      {Lisp-Entry "port?" #f 676 8 676 13 ()}
      {Lisp-Entry "close-port" #f 677 8 677 23 ()}
      {Lisp-Entry "input-port-timeout-set!" #f 678 8 678 36 ()}
      {Lisp-Entry "output-port-timeout-set!" #f 679 8 679 37 ()}
      {Lisp-Entry "open-event-queue" #f 680 8 680 24 ()}
      {Lisp-Entry "eof-object" #f 681 8 681 23 ()}
      {Lisp-Entry "open-input-string" #f 682 8 682 25 ()}
      {Lisp-Entry "open-output-string" #f 683 8 683 26 ()}
      {Lisp-Entry "get-output-string" #f 684 8 684 25 ()}
      {Lisp-Entry "call-with-input-string" #f 685 8 685 30 ()}
      {Lisp-Entry "with-input-from-string" #f 686 8 686 30 ()}
      {Lisp-Entry "call-with-output-string" #f 687 8 687 31 ()}
      {Lisp-Entry "read-substring" #f 688 8 688 22 ()}
      {Lisp-Entry "open-vector" #f 689 8 689 19 ()}
      {Lisp-Entry "call-with-input-u8vector" #f 690 8 690 32 ()}
      {Lisp-Entry "open-output-u8vector" #f 691 8 691 28 ()}
      {Lisp-Entry "get-output-u8vector" #f 692 8 692 27 ()}
      {Lisp-Entry "read-u8" #f 693 8 693 20 ()}
      {Lisp-Entry "write-u8" #f 694 8 694 21 ()}
      {Lisp-Entry "read-subu8vector" #f 695 8 695 29 ()}
      {Lisp-Entry "write-subu8vector" #f 696 8 696 30 ()}
      {Lisp-Entry "read-line" #f 697 8 697 22 ()}
      {Lisp-Entry "read-proper-line" #f 698 8 698 29 ()}
      {Lisp-Entry "read-all" #f 699 8 699 21 ()}
      {Lisp-Entry "print" #f 700 8 700 18 ()}
      {Lisp-Entry "pretty-print" #f 701 8 701 25 ()}
      {Lisp-Entry "read-source-all" #f 702 8 702 28 ()}
      {Lisp-Entry "read-source-first" #f 703 8 703 30 ()}
      {Lisp-Entry "force-output" #f 704 8 704 20 ()}
      {Lisp-Entry "current-error-port" #f 705 8 705 26 ()}
      {Lisp-Entry "with-output-to-port" #f 706 8 706 27 ()}
      {Lisp-Entry "write-u8" #f 707 8 707 16 ()}
      {Lisp-Entry "property-getter" #f 715 8 715 28 ()}
      {Lisp-Entry "property-setter" #f 716 8 716 28 ()}
      {Lisp-Entry "new-queue" #f 724 8 724 22 ()}
      {Lisp-Entry "enqueue" #f 725 8 725 20 ()}
      {Lisp-Entry "enqueue-list" #f 726 8 726 25 ()}
      {Lisp-Entry "queue-list" #f 727 8 727 23 ()}
      {Lisp-Entry "reset-queue" #f 728 8 728 24 ()}
      {Lisp-Entry "random-integer" #f 736 8 736 27 ()}
      {Lisp-Entry "random-real" #f 737 8 737 24 ()}
      {Lisp-Entry "random-source-randomize!" #f 738 8 738 37 ()}
      {Lisp-Entry "random-source-pseudo-randomize!" #f 739 8 739 44 ()}
      {Lisp-Entry "default-random-source" #f 740 8 740 34 ()}
      {Lisp-Entry "with-readtable" #f 748 8 748 27 ()}
      {Lisp-Entry "scheme-readtable" #f 749 8 749 29 ()}
      {Lisp-Entry "jazz-readtable" #f 750 8 750 27 ()}
      {Lisp-Entry "with-jazz-readtable" #f 751 8 751 32 ()}
      {Lisp-Entry "current-repl-context" #f 759 8 759 33 ()}
      {Lisp-Entry "repl-context-level" #f 760 8 760 31 ()}
      {Lisp-Entry "repl-context-depth" #f 761 8 761 31 ()}
      {Lisp-Entry "repl-context-cont" #f 762 8 762 30 ()}
      {Lisp-Entry "repl-context-initial-cont" #f 763 8 763 38 ()}
      {Lisp-Entry "repl-context-prev-level" #f 764 8 764 36 ()}
      {Lisp-Entry "repl-context-prev-depth" #f 765 8 765 36 ()}
      {Lisp-Entry "with-repl-context" #f 766 8 766 30 ()}
      {Lisp-Entry "inspect-repl-context" #f 767 8 767 33 ()}
      {Lisp-Entry "repl" #f 768 8 768 17 ()}
      {Lisp-Entry "eval-within-no-winding" #f 769 8 769 35 ()}
      {Lisp-Entry "repl-result-history-add" #f 770 8 770 36 ()}
      {Lisp-Entry "repl-result-history-ref" #f 771 8 771 31 ()}
      {Lisp-Entry "resource-pathname" #f 779 8 779 30 ()}
      {Lisp-Entry "get-object-slot" #f 787 8 787 28 ()}
      {Lisp-Entry "set-object-slot" #f 788 8 788 28 ()}
      {Lisp-Entry "dispatch" #f 789 8 789 21 ()}
      {Lisp-Entry "find-dispatch" #f 790 8 790 26 ()}
      {Lisp-Entry "call-into-abstract" #f 791 8 791 31 ()}
      {Lisp-Entry "get-core-classes" #f 792 8 792 29 ()}
      {Lisp-Entry "object->serial" #f 800 8 800 27 ()}
      {Lisp-Entry "serial->object" #f 801 8 801 27 ()}
      {Lisp-Entry "object->serial-number" #f 804 8 804 29 ()}
      {Lisp-Entry "serial-number->object" #f 805 8 805 29 ()}
      {Lisp-Entry "shell-command" #f 813 8 813 21 ()}
      {Lisp-Entry "slot?" #f 821 8 821 18 ()}
      {Lisp-Entry "slot-value" #f 822 8 822 23 ()}
      {Lisp-Entry "set-slot-value" #f 823 8 823 27 ()}
      {Lisp-Entry "socket-info-address" #f 831 8 831 32 ()}
      {Lisp-Entry "socket-info-port-number" #f 832 8 832 36 ()}
      {Lisp-Entry "get-procedure-name" #f 840 8 840 31 ()}
      {Lisp-Entry "get-continuation-stack" #f 841 8 841 35 ()}
      {Lisp-Entry "get-continuation-name" #f 842 8 842 34 ()}
      {Lisp-Entry "get-continuation-dynamic-environment" #f 843 8 843 49 ()}
      {Lisp-Entry "get-continuation-lexical-environment" #f 844 8 844 49 ()}
      {Lisp-Entry "get-continuation-location" #f 845 8 845 38 ()}
      {Lisp-Entry "interpreted-continuation?" #f 846 8 846 38 ()}
      {Lisp-Entry "join-strings" #f 854 8 854 25 ()}
      {Lisp-Entry "kind?" #f 862 8 862 18 ()}
      {Lisp-Entry "kind-id" #f 863 8 863 20 ()}
      {Lisp-Entry "kind-name" #f 864 8 864 22 ()}
      {Lisp-Entry "kind-flags" #f 865 8 865 23 ()}
      {Lisp-Entry "kind-super" #f 866 8 866 23 ()}
      {Lisp-Entry "kind-length" #f 867 8 867 24 ()}
      {Lisp-Entry "kind-fields" #f 868 8 868 24 ()}
      {Lisp-Entry "structure?" #f 869 8 869 23 ()}
      {Lisp-Entry "structure-kind" #f 870 8 870 27 ()}
      {Lisp-Entry "structure-ref" #f 871 8 871 26 ()}
      {Lisp-Entry "structure-set!" #f 872 8 872 27 ()}
      {Lisp-Entry "make-foo" #f 873 8 873 16 ()}
      {Lisp-Entry "make-bar" #f 874 8 874 16 ()}
      {Lisp-Entry "generate-symbol" #f 882 8 882 28 ()}
      {Lisp-Entry "with-uniqueness" #f 883 8 883 28 ()}
      {Lisp-Entry "source?" #f 891 8 891 20 ()}
      {Lisp-Entry "source-code" #f 892 8 892 24 ()}
      {Lisp-Entry "source-locat" #f 893 8 893 25 ()}
      {Lisp-Entry "desourcify" #f 894 8 894 23 ()}
      {Lisp-Entry "desourcify-all" #f 895 8 895 27 ()}
      {Lisp-Entry "sourcify" #f 896 8 896 21 ()}
      {Lisp-Entry "sourcify-if" #f 897 8 897 24 ()}
      {Lisp-Entry "present-source" #f 898 8 898 27 ()}
      {Lisp-Entry "locat-container" #f 899 8 899 28 ()}
      {Lisp-Entry "locat-position" #f 900 8 900 27 ()}
      {Lisp-Entry "locat->file/line/col" #f 901 8 901 33 ()}
      {Lisp-Entry "container->path" #f 902 8 902 28 ()}
      {Lisp-Entry "position->filepos" #f 903 8 903 30 ()}
      {Lisp-Entry "filepos-line" #f 904 8 904 25 ()}
      {Lisp-Entry "filepos-col" #f 905 8 905 24 ()}
      {Lisp-Entry "switch?" #f 913 8 913 20 ()}
      {Lisp-Entry "switch-name" #f 914 8 914 24 ()}
      {Lisp-Entry "command-argument" #f 915 8 915 29 ()}
      {Lisp-Entry "open-process" #f 916 8 916 25 ()}
      {Lisp-Entry "process-status" #f 917 8 917 27 ()}
      {Lisp-Entry "exit" #f 918 8 918 17 ()}
      {Lisp-Entry "table?" #f 926 8 926 14 ()}
      {Lisp-Entry "make-table" #f 927 8 927 18 ()}
      {Lisp-Entry "table-ref" #f 928 8 928 17 ()}
      {Lisp-Entry "table-set!" #f 929 8 929 18 ()}
      {Lisp-Entry "table->list" #f 930 8 930 19 ()}
      {Lisp-Entry "list->table" #f 931 8 931 19 ()}
      {Lisp-Entry "table-clear" #f 932 8 932 24 ()}
      {Lisp-Entry "table-length" #f 933 8 933 25 ()}
      {Lisp-Entry "iterate-table" #f 934 8 934 26 ()}
      {Lisp-Entry "map-table" #f 935 8 935 22 ()}
      {Lisp-Entry "table-entries" #f 936 8 936 26 ()}
      {Lisp-Entry "eq-hash" #f 937 8 937 20 ()}
      {Lisp-Entry "eqv-hash" #f 938 8 938 21 ()}
      {Lisp-Entry "equal-hash" #f 939 8 939 23 ()}
      {Lisp-Entry "set-terminal-title" #f 947 8 947 31 ()}
      {Lisp-Entry "bring-terminal-to-front" #f 948 8 948 36 ()}
      {Lisp-Entry "clear-terminal" #f 949 8 949 27 ()}
      {Lisp-Entry "current-thread" #f 957 8 957 27 ()}
      {Lisp-Entry "thread?" #f 958 8 958 20 ()}
      {Lisp-Entry "make-thread" #f 959 8 959 24 ()}
      {Lisp-Entry "make-root-thread" #f 960 8 960 29 ()}
      {Lisp-Entry "thread-name" #f 961 8 961 24 ()}
      {Lisp-Entry "thread-specific" #f 962 8 962 28 ()}
      {Lisp-Entry "thread-specific-set!" #f 963 8 963 33 ()}
      {Lisp-Entry "thread-base-priority" #f 964 8 964 33 ()}
      {Lisp-Entry "thread-base-priority-set!" #f 965 8 965 38 ()}
      {Lisp-Entry "thread-priority-boost" #f 966 8 966 34 ()}
      {Lisp-Entry "thread-priority-boost-set!" #f 967 8 967 39 ()}
      {Lisp-Entry "thread-start!" #f 968 8 968 26 ()}
      {Lisp-Entry "thread-yield!" #f 969 8 969 26 ()}
      {Lisp-Entry "thread-sleep!" #f 970 8 970 26 ()}
      {Lisp-Entry "thread-terminate!" #f 971 8 971 30 ()}
      {Lisp-Entry "thread-join!" #f 972 8 972 25 ()}
      {Lisp-Entry "thread-send" #f 973 8 973 24 ()}
      {Lisp-Entry "thread-receive" #f 974 8 974 27 ()}
      {Lisp-Entry "thread-interrupt!" #f 975 8 975 30 ()}
      {Lisp-Entry "thread-thread-group" #f 976 8 976 32 ()}
      {Lisp-Entry "thread-group->thread-group-list" #f 977 8 977 44 ()}
      {Lisp-Entry "thread-group->thread-group-vector" #f 978 8 978 46 ()}
      {Lisp-Entry "thread-group->thread-list" #f 979 8 979 38 ()}
      {Lisp-Entry "thread-group->thread-vector" #f 980 8 980 40 ()}
      {Lisp-Entry "thread-state" #f 981 8 981 25 ()}
      {Lisp-Entry "thread-state-abnormally-terminated-reason" #f 982 8 982 54 ()}
      {Lisp-Entry "thread-state-abnormally-terminated?" #f 983 8 983 48 ()}
      {Lisp-Entry "thread-state-active-timeout" #f 984 8 984 40 ()}
      {Lisp-Entry "thread-state-active-waiting-for" #f 985 8 985 44 ()}
      {Lisp-Entry "thread-state-active?" #f 986 8 986 33 ()}
      {Lisp-Entry "thread-state-initialized?" #f 987 8 987 38 ()}
      {Lisp-Entry "thread-state-normally-terminated-result" #f 988 8 988 52 ()}
      {Lisp-Entry "thread-state-normally-terminated?" #f 989 8 989 46 ()}
      {Lisp-Entry "thread-state-uninitialized?" #f 990 8 990 40 ()}
      {Lisp-Entry "pristine-thread-continuation" #f 991 8 991 41 ()}
      {Lisp-Entry "mutex?" #f 992 8 992 19 ()}
      {Lisp-Entry "make-mutex" #f 993 8 993 23 ()}
      {Lisp-Entry "mutex-name" #f 994 8 994 23 ()}
      {Lisp-Entry "mutex-specific" #f 995 8 995 27 ()}
      {Lisp-Entry "mutex-specific-set!" #f 996 8 996 32 ()}
      {Lisp-Entry "mutex-state" #f 997 8 997 24 ()}
      {Lisp-Entry "mutex-lock!" #f 998 8 998 24 ()}
      {Lisp-Entry "mutex-unlock!" #f 999 8 999 26 ()}
      {Lisp-Entry "mutex-wait" #f 1000 8 1000 23 ()}
      {Lisp-Entry "mutex-owner" #f 1001 8 1001 24 ()}
      {Lisp-Entry "condition?" #f 1002 8 1002 23 ()}
      {Lisp-Entry "make-condition" #f 1003 8 1003 27 ()}
      {Lisp-Entry "condition-name" #f 1004 8 1004 27 ()}
      {Lisp-Entry "condition-specific" #f 1005 8 1005 31 ()}
      {Lisp-Entry "condition-specific-set!" #f 1006 8 1006 36 ()}
      {Lisp-Entry "condition-signal!" #f 1007 8 1007 30 ()}
      {Lisp-Entry "condition-broadcast!" #f 1008 8 1008 33 ()}
      {Lisp-Entry "current-systime" #f 1016 8 1016 28 ()}
      {Lisp-Entry "systime?" #f 1017 8 1017 21 ()}
      {Lisp-Entry "systime->seconds" #f 1018 8 1018 29 ()}
      {Lisp-Entry "seconds->systime" #f 1019 8 1019 29 ()}
      {Lisp-Entry "process-times" #f 1020 8 1020 26 ()}
      {Lisp-Entry "cpu-time" #f 1021 8 1021 21 ()}
      {Lisp-Entry "real-time" #f 1022 8 1022 22 ()}
      {Lisp-Entry "unspecified" #f 1030 8 1030 24 ()}
      {Lisp-Entry "unspecified?" #f 1031 8 1031 25 ()}
      {Lisp-Entry "specified?" #f 1032 8 1032 23 ()}
      {Lisp-Entry "vector-copy" #f 1040 8 1040 24 ()}
      {Lisp-Entry "analysis-mode?" #f 1048 8 1048 27 ()}
      {Lisp-Entry "autoload-references" #f 1049 8 1049 32 ()}
      {Lisp-Entry "new-walk-context" #f 1050 8 1050 29 ()}
      {Lisp-Entry "specifier?" #f 1051 8 1051 23 ()}
      {Lisp-Entry "binding-specifier" #f 1052 8 1052 30 ()}
      {Lisp-Entry "parse-specifier" #f 1053 8 1053 28 ()}
      {Lisp-Entry "requested-module-name" #f 1054 8 1054 34 ()}
      {Lisp-Entry "requested-module-resource" #f 1055 8 1055 38 ()}
      {Lisp-Entry "get-private-lookup" #f 1056 8 1056 31 ()}
      {Lisp-Entry "get-public-lookup" #f 1057 8 1057 30 ()}
      {Lisp-Entry "get-protected-lookup" #f 1058 8 1058 33 ()}
      {Lisp-Entry "get-catalog" #f 1059 8 1059 24 ()}
      {Lisp-Entry "get-catalog-entry" #f 1060 8 1060 30 ()}
      {Lisp-Entry "release-catalog-entries" #f 1061 8 1061 36 ()}
      {Lisp-Entry "outline-module" #f 1062 8 1062 27 ()}
      {Lisp-Entry "walk-module" #f 1063 8 1063 24 ()}
      {Lisp-Entry "expand-module" #f 1064 8 1064 26 ()}}})
"_language"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "language" "_language.jazz"} 1250720196
    {Lisp-Entry "jazz.dialect.language" #f 37 19 37 40 ("jazz.dialect")}})
"_performance"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "_performance.scm"} 1237033585
    {Lisp-Entry "test.performance" #f 0 8 0 24 ()}})
"_syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "_syntax.scm"} 1248708411
    {Lisp-Entry "jazz.dialect.syntax" #f 37 19 37 38 ("scheme")}})
"_test"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "_test.jazz"} 1251746526
    {Lisp-Entry "jazz.test" #f 37 9 37 18 ("'a" "5" "set-element!" "10" "axis-grow" "0" "Axis" "new" "axis" "3" "2" "Point" "b" "a" "debug" "table-values" "apply" "remove-duplicates" "table-keys" "done" "'done" "walking" "'walking" "terminal" "if" "feedback:" "Jazz" "'Jazz" "find-repository" "list" "repositories:" "iterate-modules" "get-symbol" "table-add" "Unresolved-Error" "is?" "when" "problem" "for-each" "get-errors" "get-warnings" "append" "problems" "exc" "Walk-Problems" "catch" "module-name" "walk" "define" "eq?" "test:" "make-table" "unresolved" "let" "cons" "jazz.sample.library" "'jazz.sample.library" "walk-module" "fold-declaration" "pp" "port" "function" "call-with-output-file" "Version" "jazz")
      {Lisp-Entry "Y" #f 338 7 338 8 ()
        {Lisp-Entry "f" #f 341 16 341 17 ("2")}}
      {Lisp-Entry "Y~Class207" #f 347 9 347 19 ()
        {Lisp-Entry "f" #f 350 13 350 14 ("2")}}
      {Lisp-Entry "Y" #f 354 9 354 10 ()}
      {Lisp-Entry "f" #f 451 13 451 14 ("=" "not" "if" "c")}
      {Lisp-Entry "f" #f 512 13 512 14 ("+" "0" "n" "iter" "let")}
      {Lisp-Entry "TC" #f 519 7 519 9 ("3" "1" "initialize")
        {Lisp-Entry "row" #f 522 8 522 11 ()}
        {Lisp-Entry "col" #f 523 8 523 11 ()}
        {Lisp-Entry "f" #f 526 11 526 12 ("col" "0" "subseq!" "row" "when")}
        {Lisp-Entry "g" #f 531 11 531 12 ("col" "0" "subseq!")}}
      {Lisp-Entry "f" #f 536 13 536 14 ("g" "TC" "new" "f" "class-of" "list")}}})
"_walker"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "walker" "_walker.jazz"} 1248708411
    {Lisp-Entry "jazz.dialect.walker" #f 37 19 37 38 ("jazz.dialect")}})
"a"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "a.jazz"} 1250272407
    {Lisp-Entry "jazz.test.a" #f 0 9 0 20 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "a.scm"} 1237033585
    {Lisp-Entry "test.performance.a" #f 0 8 0 26 ()
      {Lisp-Entry "f-separate" #f 8 9 8 19 ("1" "%%fx-" "g-separate" "0" "%%fx=" "if" "n" "s")}}})
"attributes"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "attributes.scm"} 1248797037
    {Lisp-Entry "jazz.dialect.syntax.attributes" #f 37 19 37 49 ("scheme")
      {Lisp-Entry "private" #f 43 8 43 15 ("jazz.getf")}
      {Lisp-Entry "private" #f 44 8 44 15 ("jazz.system-format")}
      {Lisp-Entry "attributes" #f 84 15 84 25 ("set-property" ",setter" ",getter" "public" "setter" "system-format" "string->symbol" "getter" "let*" "set!" "'set!" ",value" "set-value" "nextmethod" "else" "list" "case" ",property" "get-value" ",init" ",name" "slot" "eq?" "if" "not-found:" "initialize" "'initialize" "getf" "init" "rest" "specifier" "parse-specifier" "name" "lambda" "append" "map" "node-properties" "method" "begin" "value" "generate-symbol" "property" "cdr" "properties" "car" "inherited" "let" "symbol->string" "string->keyword" "symbol" "symbol->keyword" "cons" "unspecified" "define" "form")}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "autoload.jazz"} 1237033585
    {Lisp-Entry "jazz.test.autoload" #f 0 9 0 27 ("jazz")}})
"b"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "b.jazz"} 1250272407
    {Lisp-Entry "jazz.test.b" #f 0 9 0 20 ("jazz")
      {Lisp-Entry "Version" #f 3 7 3 14 ()}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "b.scm"} 1237033585
    {Lisp-Entry "test.performance.b" #f 0 8 0 26 ()
      {Lisp-Entry "g-separate" #f 8 9 8 19 ("1" "%%fx-" "f-separate" "0" "%%fx=" "if" "n" "s")}}})
"bind"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind.scm"} 1248708411
    {Lisp-Entry "jazz.dialect.syntax.bind" #f 38 19 38 43 ("scheme")
      {Lisp-Entry "bind" #f 56 16 56 20 ("expand-bind-car" "begin" "tree-value" "lambda" "with-uniqueness" "sourcify-if" "cdr" "body" "cddr" "car" "tree" "source-code" "cadr" "desourcify" "bindings" "let" "form-src")}
      {Lisp-Entry "expand-bind-car" #f 68 9 68 24 ("expand-bind-car" ",car-symbol" "generate-symbol" "car-symbol" "pair?" "expand-bind-cdr" ",tree" ",specifier" ",car-binding" "if" "binding-specifier" "specifier" "symbol?" "cond" "cdr" "cdr-binding" "car" "car-binding" "let" "body" "tree" "bindings")}
      {Lisp-Entry "expand-bind-cdr" #f 85 9 85 24 ("expand-bind-car" ",cdr-symbol" "generate-symbol" "cdr-symbol" "pair?" ",@body" ",tree" "cdr" ",cdr-binding" "let" "symbol?" "null?" "cond" "body" "tree" "cdr-binding")}}})
"bind-keywords"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind-keywords.scm"} 1248708411
    {Lisp-Entry "jazz.dialect.syntax.bind-keywords" #f 38 19 38 52 ("scheme")
      {Lisp-Entry "private" #f 44 8 44 15 ("jazz.last-tail")}
      {Lisp-Entry "bind-keywords" #f 57 16 57 29 ("error" "not-null?" ",@body" "unbox-list" "symbol?" "proper-list" ",default" "symbol->string" "string->keyword" "find-keyword" ",specifier" ",variable" "caddr" "if" "default" "binding-specifier" "specifier" "variable" "binding" "lambda" "map" "let*" ",rest" "box-list" ",box" "sourcify-if" "last-tail" "oth" "new-queue" "bnd" "generate-symbol" "box" "cdr" "body" "cddr" "car" "rest" "cadr" "source-code" "bindings" "let" "form-src")}}})
"bind-optionals"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind-optionals.scm"} 1248708411
    {Lisp-Entry "jazz.dialect.syntax.bind-optionals" #f 38 19 38 53 ("scheme")
      {Lisp-Entry "bind-optionals" #f 61 16 61 30 (",@body" "error" "not-null?" "proper-list" ",value" ",specifier" ",variable" "set!" ",prog" ",default" "null?" "value" "caddr" "if" "default" "binding-specifier" "specifier" "variable" "binding" "lambda" "map" "let*" ",rest" ",scan" "sourcify-if" "prog" "generate-symbol" "scan" "cdr" "body" "cddr" "car" "rest" "cadr" "source-code" "bindings" "let" "form-src")}}})
"c"
 ({Lisp-File-Entry {File jazz "src" "jazz" "test" "c.jazz"} 1250272407
    {Lisp-Entry "jazz.test.c" #f 0 9 0 20 ("jazz")}})
"cffi"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "cffi.jazz"} 1237033585
    {Lisp-Entry "jazz.test.cffi" #f 37 9 37 23 ("#<<end-of-c-declare\nstatic int func2(mult* m, int n)\n{\n    return (*m)(n);\n}\nend-of-c-declare\n" "#<<end-of-c-declare\ntypedef int (mult)(int);\n\nstatic int multiply(int n)\n{\n    return n * n;\n}\n\nstatic mult* func1()\n{\n    return &multiply;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstruct S1_\n{\n    int x;\n    int y;\n};\n\ntypedef struct S1_ S1;\n\nstatic int struct1a(S1 s1)\n{\n    return s1.x + s1.y;\n}\n\n//static int struct1b(S1& s1)\n//{\n//    return s1.x + s1.y;\n//}\n\nstatic int struct1c(S1* s1)\n{\n    return s1->x + s1->y;\n}\n\nstatic void tst()\n{\n    S1 s;\n    \n    struct1a(s);\n    struct1c(&s);\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int scalar3(___SCMOBJ obj)\n{\n    return (int) obj;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int scalar2(int n)\n{\n    return n + n;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic void scalar1(int n)\n{\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nN = 2;\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int N;\nend-of-c-declare\n" "jazz")
      {Lisp-Entry "init1" #f 71 12 71 17 ("int" "c-function")}
      {Lisp-Entry "void" #f 80 8 80 12 ("void" "native")}
      {Lisp-Entry "bool" #f 81 8 81 12 ("bool" "native")}
      {Lisp-Entry "char" #f 82 8 82 12 ("char" "native")}
      {Lisp-Entry "wchar_t" #f 83 8 83 15 ("wchar_t" "native")}
      {Lisp-Entry "int" #f 84 8 84 11 ("int" "native")}
      {Lisp-Entry "double" #f 85 8 85 14 ("double" "native")}
      {Lisp-Entry "scheme-object" #f 86 8 86 21 ("scheme-object" "native")}
      {Lisp-Entry "object" #f 87 8 87 14 ("scheme-object")}
      {Lisp-Entry "scalar1" #f 98 12 98 19 ("void" "int" "c-function")}
      {Lisp-Entry "scalar2" #f 111 12 111 19 ("int" "c-function")}
      {Lisp-Entry "scalar3" #f 124 12 124 19 ("int" "object" "c-function")}
      {Lisp-Entry "ca" #f 186 12 186 14 ("2")}
      {Lisp-Entry "cb" #f 187 12 187 14 ("3")}
      {Lisp-Entry "e" #f 195 15 195 16 ("4" "ec" "2" "eb" "1" "ea")}
      {Lisp-Entry "S1" #f 243 8 243 10 ("struct")}
      {Lisp-Entry "make-S1" #f 246 12 246 19 ("S1" "c-function")}
      {Lisp-Entry "struct1a" #f 251 12 251 20 ("int" "S1" "c-function")}
      {Lisp-Entry "struct1c" #f 257 12 257 20 ("int" "S1" "pointer" "c-function")}
      {Lisp-Entry "cast-S2->S2*" #f 268 12 268 24 ("error" "S2*" "object" "c-function" "S2" "'S2" "foreign-tags" "car" "eq?" "if" "s2" "function")}
      {Lisp-Entry "mult*" #f 305 8 305 13 ("int" "function" "pointer")}
      {Lisp-Entry "func1" #f 324 12 324 17 ("mult*" "c-function")}}})
"classes"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "classes.scm"} 1251729948
    {Lisp-Entry "jazz.dialect.classes" #f 37 18 37 38 ()
      {Lisp-Entry "jazz.Definition-Declaration" #f 45 19 45 46 ("%%set-definition-declaration-value" "%%get-definition-declaration-value" "value" "%%set-definition-declaration-signature" "%%get-definition-declaration-signature" "signature" "%%get-definition-declaration-expansion" "expansion" "jazz.allocate-definition-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Specialize" #f 56 19 56 34 ("jazz.allocate-specialize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Generic-Declaration" #f 65 19 65 43 ("%%set-generic-declaration-body" "%%get-generic-declaration-body" "body" "%%set-generic-declaration-signature" "%%get-generic-declaration-signature" "signature" "%%get-generic-declaration-dispatch-types" "dispatch-types" "jazz.allocate-generic-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Specific-Declaration" #f 76 19 76 44 ("%%get-specific-declaration-root?" "root?" "%%set-specific-declaration-body" "%%get-specific-declaration-body" "body" "%%get-specific-declaration-signature" "signature" "%%get-specific-declaration-generic" "generic" "jazz.allocate-specific-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Category-Declaration" #f 88 19 88 44 ("%%get-category-declaration-metaclass" "metaclass" "%%get-category-declaration-implementor" "implementor" "jazz.Object-Class" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Namespace-Declaration")}
      {Lisp-Entry "jazz.Class-Declaration" #f 98 19 98 41 ("%%get-class-declaration-interfaces" "interfaces" "%%get-class-declaration-ascendant-base" "ascendant-base" "%%get-class-declaration-ascendant-relation" "ascendant-relation" "%%get-class-declaration-ascendant" "ascendant" "jazz.allocate-class-declaration" "jazz.Object-Class" "metaclass" "implementor" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Category-Declaration")}
      {Lisp-Entry "jazz.Interface-Declaration" #f 110 19 110 45 ("%%get-interface-declaration-ascendants" "ascendants" "jazz.allocate-interface-declaration" "jazz.Object-Class" "metaclass" "implementor" "body" "children" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Category-Declaration")}
      {Lisp-Entry "jazz.Field-Declaration" #f 119 19 119 41 ("jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Slot-Declaration" #f 128 19 128 40 ("%%get-slot-declaration-setter-name" "setter-name" "%%get-slot-declaration-getter-name" "getter-name" "%%set-slot-declaration-initialize" "%%get-slot-declaration-initialize" "initialize" "jazz.allocate-slot-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Field-Declaration")}
      {Lisp-Entry "jazz.Property-Declaration" #f 139 19 139 44 ("%%set-property-declaration-setter" "%%get-property-declaration-setter" "setter" "%%set-property-declaration-getter" "%%get-property-declaration-getter" "getter" "jazz.allocate-property-declaration" "jazz.Object-Class" "setter-name" "getter-name" "initialize" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Slot-Declaration")}
      {Lisp-Entry "jazz.Method-Declaration" #f 149 19 149 42 ("%%set-method-declaration-body" "%%get-method-declaration-body" "body" "%%set-method-declaration-signature" "%%get-method-declaration-signature" "signature" "%%get-method-declaration-synchronized" "synchronized" "%%get-method-declaration-remote" "remote" "%%get-method-declaration-expansion" "expansion" "%%get-method-declaration-abstraction" "abstraction" "%%get-method-declaration-propagation" "propagation" "%%get-method-declaration-root" "root" "jazz.allocate-method-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "hits" "type" "name" "jazz.Field-Declaration")}
      {Lisp-Entry "jazz.With-Self" #f 165 19 165 33 ("%%get-with-self-body" "body" "jazz.allocate-with-self" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.With-Dynamic-Self" #f 174 19 174 41 ("%%get-with-dynamic-self-body" "body" "%%get-with-dynamic-self-code" "code" "jazz.allocate-with-dynamic-self" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Cast" #f 184 19 184 28 ("%%get-cast-expression" "expression" "jazz.allocate-cast" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Construct" #f 193 19 193 33 ("%%get-construct-values" "values" "%%get-construct-class" "class" "jazz.allocate-construct" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Dispatch" #f 203 19 203 32 ("%%get-dispatch-arguments" "arguments" "%%get-dispatch-name" "name" "jazz.allocate-dispatch" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Jazz-Dialect" #f 213 19 213 36 ("jazz.allocate-jazz-dialect" "jazz.Object-Class" "jazz.Dialect")}
      {Lisp-Entry "jazz.Jazz-Walker" #f 222 19 222 35 ("jazz.allocate-jazz-walker" "jazz.Object-Class" "errors" "warnings" "jazz.Scheme-Walker")}}})
"common"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "common.scm"} 1237033585
    {Lisp-Entry "test.performance.common" #f 0 8 0 31 ("W" "Z" "X" "jazz.encapsulate-class")
      {Lisp-Entry "ff" #f 11 9 11 11 ("1" "%%fx-" "ff" "%%pair?" "begin" "0" "%%fx>" "if" "n")}
      {Lisp-Entry "gg" #f 24 9 24 11 ("1" "%%fx-" "gg" "%%pair?" "begin" "0" "%%fx>" "if" "n")}
      {Lisp-Entry "f-module-block/standard/not-safe" #f 42 9 42 41 ("1" "%%fx-" "g-module-block/standard/not-safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/standard/not-safe" #f 48 9 48 41 ("1" "%%fx-" "f-module-block/standard/not-safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-block/runtime/safe" #f 66 9 66 36 ("1" "%%fx-" "g-module-block/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/runtime/safe" #f 72 9 72 36 ("1" "%%fx-" "f-module-block/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-separate/runtime/safe" #f 90 9 90 39 ("1" "%%fx-" "g-module-separate/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-separate/runtime/safe" #f 96 9 96 39 ("1" "%%fx-" "f-module-separate/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-block/runtime/notsafe" #f 114 9 114 39 ("1" "%%fx-" "g-module-block/runtime/notsafe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/runtime/notsafe" #f 120 9 120 39 ("1" "%%fx-" "f-module-block/runtime/notsafe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module" #f 137 9 137 17 ("1" "%%fx-" "g-module" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module" #f 143 9 143 17 ("1" "%%fx-" "f-module" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "X" #f 160 19 160 20 ("allocate-x" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "X" #f 163 27 163 28 ()}
      {Lisp-Entry "new-x" #f 168 9 168 14 ("X" "allocate-x")}
      {Lisp-Entry "f-generic" ("X") 172 22 172 31 ("n")}
      {Lisp-Entry "f-generic" ("X") 174 23 174 32 ("1" "%%fx-" "x" "g-generic" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "g-generic" ("X") 180 22 180 31 ("n")}
      {Lisp-Entry "g-generic" ("X") 182 23 182 32 ("1" "%%fx-" "x" "f-generic" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "Z" #f 193 27 193 28 ()}
      {Lisp-Entry "f-vtable" ("Z") 196 30 196 38 ("n")}
      {Lisp-Entry "g-vtable" ("Z") 197 30 197 38 ("n")}
      {Lisp-Entry "new-z" #f 200 9 200 14 ("Z" "allocate-z")}
      {Lisp-Entry "f-vtable" ("Z") 204 21 204 29 ("1" "%%fx-" "z" "g-vtable" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "g-vtable" ("Z") 210 21 210 29 ("1" "%%fx-" "z" "f-vtable" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "W" #f 219 27 219 28 ()}
      {Lisp-Entry "f-vtable" ("W") 222 21 222 29 ("n")}
      {Lisp-Entry "h" ("W") 226 30 226 31 ()}
      {Lisp-Entry "h" ("W") 229 21 229 22 ()}}})
"continuation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "continuation.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.core.continuation" #f 37 18 37 48 ()
      {Lisp-Entry "jazz.continuation?" #f 42 13 42 31 ("%%continuation?" "obj")}
      {Lisp-Entry "jazz.continuation-capture" #f 46 13 46 38 ("%%continuation-capture" "proc")}
      {Lisp-Entry "jazz.continuation-graft" #f 50 13 50 36 ("%%continuation-graft" "proc" "cont")}
      {Lisp-Entry "jazz.continuation-return" #f 54 12 54 36 ("continuation-return")}}})
"core"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "walker" "core.jazz"} 1251729949
    {Lisp-Entry "jazz.dialect.walker.core" #f 37 19 37 43 ("jazz.dialect")
      {Lisp-Entry "Walk-Binding" #f 52 7 52 19 ()}
      {Lisp-Entry "walk-binding-lookup" #f 55 15 55 39 ()}
      {Lisp-Entry "walk-binding-referenced" #f 56 15 56 43 ()}
      {Lisp-Entry "emit-binding-reference" #f 57 15 57 42 ()}
      {Lisp-Entry "walk-binding-validate-call" #f 58 15 58 46 ()}
      {Lisp-Entry "emit-binding-call" #f 59 15 59 37 ()}
      {Lisp-Entry "emit-inlined-binding-call" #f 60 15 60 45 ()}
      {Lisp-Entry "walk-binding-validate-assignment" #f 61 15 61 52 ()}
      {Lisp-Entry "walk-binding-assignable?" #f 62 15 62 44 ()}
      {Lisp-Entry "emit-binding-assignment" #f 63 15 63 43 ()}
      {Lisp-Entry "walk-binding-walkable?" #f 64 15 64 42 ()}
      {Lisp-Entry "walk-binding-walk-form" #f 65 15 65 42 ()}
      {Lisp-Entry "walk-binding-expandable?" #f 66 15 66 44 ()}
      {Lisp-Entry "walk-binding-expand-form" #f 67 15 67 44 ()}
      {Lisp-Entry "Lexical-Binding" #f 75 7 75 22 ()
        {Lisp-Entry "name" #f 78 8 78 12 ()}
        {Lisp-Entry "get-name" #f 78 20 78 28 ()}
        {Lisp-Entry "type" #f 79 8 79 12 ()}
        {Lisp-Entry "get-type" #f 79 20 79 28 ()}
        {Lisp-Entry "hits" #f 80 8 80 12 ()}
        {Lisp-Entry "get-hits" #f 80 23 80 31 ()}
        {Lisp-Entry "set-hits" #f 80 23 80 31 ()}
        {Lisp-Entry "print" #f 83 11 83 16 ("get-name" "format" "function" "self" "print-unreadable" "detail" "output")}}
      {Lisp-Entry "resolve-binding" #f 89 15 89 35 ()}
      {Lisp-Entry "Declaration" #f 97 7 97 18 ()
        {Lisp-Entry "access" #f 100 8 100 14 ()}
        {Lisp-Entry "get-access" #f 100 29 100 37 ()}
        {Lisp-Entry "compatibility" #f 101 8 101 21 ()}
        {Lisp-Entry "get-compatibility" #f 101 29 101 37 ()}
        {Lisp-Entry "attributes" #f 102 8 102 18 ()}
        {Lisp-Entry "get-attributes" #f 102 29 102 37 ()}
        {Lisp-Entry "toplevel" #f 103 8 103 16 ()}
        {Lisp-Entry "get-toplevel" #f 103 29 103 37 ()}
        {Lisp-Entry "parent" #f 104 8 104 14 ()}
        {Lisp-Entry "get-parent" #f 104 29 104 37 ()}
        {Lisp-Entry "locator" #f 105 8 105 15 ()}
        {Lisp-Entry "get-locator" #f 105 29 105 37 ()}
        {Lisp-Entry "source" #f 106 8 106 14 ()}
        {Lisp-Entry "get-source" #f 106 29 106 37 ()}}
      {Lisp-Entry "lookup-declaration" #f 109 15 109 38 ()}
      {Lisp-Entry "update-declaration" #f 110 15 110 38 ()}
      {Lisp-Entry "get-declaration-inclusions" #f 111 15 111 46 ()}
      {Lisp-Entry "emit-declaration" #f 112 15 112 36 ()}
      {Lisp-Entry "expand-referenced-declaration" #f 113 15 113 49 ()}
      {Lisp-Entry "fold-statement" #f 114 15 114 34 ()}
      {Lisp-Entry "fold-declaration" #f 115 15 115 36 ()}
      {Lisp-Entry "fold-expression" #f 116 15 116 35 ()}
      {Lisp-Entry "private-access" #f 117 15 117 34 ()}
      {Lisp-Entry "public-access" #f 118 15 118 33 ()}
      {Lisp-Entry "protected-access" #f 119 15 119 36 ()}
      {Lisp-Entry "Declaration-Reference" #f 127 7 127 28 ()
        {Lisp-Entry "name" #f 130 8 130 12 ()}
        {Lisp-Entry "get-name" #f 130 27 130 35 ()}
        {Lisp-Entry "declaration" #f 131 8 131 19 ()}
        {Lisp-Entry "get-declaration" #f 131 27 131 35 ()}}
      {Lisp-Entry "resolve-reference" #f 134 15 134 37 ()}
      {Lisp-Entry "Library-Reference" #f 142 7 142 24 ()}
      {Lisp-Entry "Export-Reference" #f 150 7 150 23 ()
        {Lisp-Entry "library-reference" #f 153 8 153 25 ()}
        {Lisp-Entry "get-library-reference" #f 153 33 153 41 ()}}
      {Lisp-Entry "Autoload-Reference" #f 161 7 161 25 ()}
      {Lisp-Entry "Module-Declaration" #f 169 7 169 25 ()
        {Lisp-Entry "requires" #f 172 8 172 16 ()}
        {Lisp-Entry "get-requires" #f 172 24 172 32 ()}}
      {Lisp-Entry "Namespace-Declaration" #f 180 7 180 28 ()
        {Lisp-Entry "lookups" #f 183 8 183 15 ()}
        {Lisp-Entry "get-lookups" #f 183 24 183 32 ()}
        {Lisp-Entry "children" #f 184 8 184 16 ()}
        {Lisp-Entry "get-children" #f 184 24 184 32 ()}
        {Lisp-Entry "body" #f 185 8 185 12 ()}
        {Lisp-Entry "get-body" #f 185 24 185 32 ()}}
      {Lisp-Entry "%%get-access-lookup" #f 188 15 188 34 ()}
      {Lisp-Entry "Library-Declaration" #f 196 7 196 26 ()
        {Lisp-Entry "walker" #f 199 8 199 14 ()}
        {Lisp-Entry "get-walker" #f 199 31 199 39 ()}
        {Lisp-Entry "dialect-name" #f 200 8 200 20 ()}
        {Lisp-Entry "get-dialect-name" #f 200 31 200 39 ()}
        {Lisp-Entry "dialect-invoice" #f 201 8 201 23 ()}
        {Lisp-Entry "get-dialect-invoice" #f 201 31 201 39 ()}
        {Lisp-Entry "requires" #f 202 8 202 16 ()}
        {Lisp-Entry "get-requires" #f 202 31 202 39 ()}
        {Lisp-Entry "exports" #f 203 8 203 15 ()}
        {Lisp-Entry "get-exports" #f 203 31 203 39 ()}
        {Lisp-Entry "imports" #f 204 8 204 15 ()}
        {Lisp-Entry "get-imports" #f 204 31 204 39 ()}
        {Lisp-Entry "proclaims" #f 205 8 205 17 ()}
        {Lisp-Entry "get-proclaims" #f 205 31 205 39 ()}
        {Lisp-Entry "literals" #f 206 8 206 16 ()}
        {Lisp-Entry "get-literals" #f 206 31 206 39 ()}
        {Lisp-Entry "variables" #f 207 8 207 17 ()}
        {Lisp-Entry "get-variables" #f 207 31 207 39 ()}
        {Lisp-Entry "references" #f 208 8 208 18 ()}
        {Lisp-Entry "get-references" #f 208 31 208 39 ()}
        {Lisp-Entry "inclusions" #f 209 8 209 18 ()}
        {Lisp-Entry "get-inclusions" #f 209 31 209 39 ()}
        {Lisp-Entry "autoloads" #f 210 8 210 17 ()}
        {Lisp-Entry "get-autoloads" #f 210 31 210 39 ()}}
      {Lisp-Entry "Library-Invoice" #f 218 7 218 22 ()
        {Lisp-Entry "name" #f 221 8 221 12 ()}
        {Lisp-Entry "get-name" #f 221 23 221 31 ()}
        {Lisp-Entry "library" #f 222 8 222 15 ()}
        {Lisp-Entry "get-library" #f 222 23 222 31 ()}
        {Lisp-Entry "phase" #f 223 8 223 13 ()}
        {Lisp-Entry "get-phase" #f 223 23 223 31 ()}
        {Lisp-Entry "version" #f 224 8 224 15 ()}
        {Lisp-Entry "get-version" #f 224 23 224 31 ()}
        {Lisp-Entry "only" #f 225 8 225 12 ()}
        {Lisp-Entry "get-only" #f 225 23 225 31 ()}
        {Lisp-Entry "except" #f 226 8 226 14 ()}
        {Lisp-Entry "get-except" #f 226 23 226 31 ()}
        {Lisp-Entry "prefix" #f 227 8 227 14 ()}
        {Lisp-Entry "get-prefix" #f 227 23 227 31 ()}
        {Lisp-Entry "rename" #f 228 8 228 14 ()}
        {Lisp-Entry "get-rename" #f 228 23 228 31 ()}
        {Lisp-Entry "print" #f 231 11 231 16 ("name" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "Export-Invoice" #f 243 7 243 21 ()
        {Lisp-Entry "autoload" #f 246 8 246 16 ()}
        {Lisp-Entry "get-autoload" #f 246 24 246 32 ()}}
      {Lisp-Entry "Import-Invoice" #f 254 7 254 21 ()
        {Lisp-Entry "hit?" #f 257 8 257 12 ()}
        {Lisp-Entry "get-hit?" #f 257 20 257 28 ()}}
      {Lisp-Entry "Export-Declaration" #f 265 7 265 25 ()
        {Lisp-Entry "symbol" #f 268 8 268 14 ()}
        {Lisp-Entry "get-symbol" #f 268 22 268 30 ()}}
      {Lisp-Entry "Export-Syntax-Declaration" #f 276 7 276 32 ()
        {Lisp-Entry "symbol" #f 279 8 279 14 ()}
        {Lisp-Entry "get-symbol" #f 279 22 279 30 ()}}
      {Lisp-Entry "Autoload-Declaration" #f 287 7 287 27 ()
        {Lisp-Entry "library" #f 290 8 290 15 ()}
        {Lisp-Entry "get-library" #f 290 32 290 40 ()}
        {Lisp-Entry "exported-library" #f 291 8 291 24 ()}
        {Lisp-Entry "get-exported-library" #f 291 32 291 40 ()}
        {Lisp-Entry "declaration" #f 292 8 292 19 ()}
        {Lisp-Entry "get-declaration" #f 292 32 292 40 ()}}
      {Lisp-Entry "Literal" #f 300 7 300 14 ()
        {Lisp-Entry "name" #f 303 8 303 12 ()}
        {Lisp-Entry "get-name" #f 303 25 303 33 ()}
        {Lisp-Entry "arguments" #f 304 8 304 17 ()}
        {Lisp-Entry "get-arguments" #f 304 25 304 33 ()}}
      {Lisp-Entry "Macro-Declaration" #f 312 7 312 24 ()
        {Lisp-Entry "signature" #f 315 8 315 17 ()}
        {Lisp-Entry "get-signature" #f 315 25 315 33 ()}
        {Lisp-Entry "body" #f 316 8 316 12 ()}
        {Lisp-Entry "get-body" #f 316 25 316 33 ()}}
      {Lisp-Entry "Syntax-Declaration" #f 324 7 324 25 ()
        {Lisp-Entry "signature" #f 327 8 327 17 ()}
        {Lisp-Entry "get-signature" #f 327 25 327 33 ()}
        {Lisp-Entry "body" #f 328 8 328 12 ()}
        {Lisp-Entry "get-body" #f 328 25 328 33 ()}}
      {Lisp-Entry "Opt-Type" #f 336 7 336 15 ()
        {Lisp-Entry "type" #f 339 8 339 12 ()}
        {Lisp-Entry "get-type" #f 339 20 339 28 ()}}
      {Lisp-Entry "Key-Type" #f 347 7 347 15 ()
        {Lisp-Entry "key" #f 350 8 350 11 ()}
        {Lisp-Entry "get-key" #f 350 20 350 28 ()}
        {Lisp-Entry "type" #f 351 8 351 12 ()}
        {Lisp-Entry "get-type" #f 351 20 351 28 ()}}
      {Lisp-Entry "Rest-Type" #f 359 7 359 16 ()
        {Lisp-Entry "type" #f 362 8 362 12 ()}
        {Lisp-Entry "get-type" #f 362 20 362 28 ()}}
      {Lisp-Entry "Function-Type" #f 370 7 370 20 ()
        {Lisp-Entry "mandatory" #f 373 8 373 17 ()}
        {Lisp-Entry "get-mandatory" #f 373 26 373 34 ()}
        {Lisp-Entry "positional" #f 374 8 374 18 ()}
        {Lisp-Entry "get-positional" #f 374 26 374 34 ()}
        {Lisp-Entry "optional" #f 375 8 375 16 ()}
        {Lisp-Entry "get-optional" #f 375 26 375 34 ()}
        {Lisp-Entry "named" #f 376 8 376 13 ()}
        {Lisp-Entry "get-named" #f 376 26 376 34 ()}
        {Lisp-Entry "rest" #f 377 8 377 12 ()}
        {Lisp-Entry "get-rest" #f 377 26 377 34 ()}
        {Lisp-Entry "result" #f 378 8 378 14 ()}
        {Lisp-Entry "get-result" #f 378 26 378 34 ()}}
      {Lisp-Entry "Category-Type" #f 386 7 386 20 ()
        {Lisp-Entry "declaration" #f 389 8 389 19 ()}
        {Lisp-Entry "get-declaration" #f 389 27 389 35 ()}}
      {Lisp-Entry "Values-Type" #f 397 7 397 18 ()
        {Lisp-Entry "types" #f 400 8 400 13 ()}
        {Lisp-Entry "get-types" #f 400 21 400 29 ()}}
      {Lisp-Entry "Restriction-Type" #f 408 7 408 23 ()
        {Lisp-Entry "base" #f 411 8 411 12 ()}
        {Lisp-Entry "get-base" #f 411 20 411 28 ()}
        {Lisp-Entry "type" #f 412 8 412 12 ()}
        {Lisp-Entry "get-type" #f 412 20 412 28 ()}}
      {Lisp-Entry "Complement-Type" #f 420 7 420 22 ()
        {Lisp-Entry "type" #f 423 8 423 12 ()}
        {Lisp-Entry "get-type" #f 423 20 423 28 ()}}
      {Lisp-Entry "Union-Type" #f 431 7 431 17 ()
        {Lisp-Entry "types" #f 434 8 434 13 ()}
        {Lisp-Entry "get-types" #f 434 21 434 29 ()}}
      {Lisp-Entry "Template-Type" #f 442 7 442 20 ()
        {Lisp-Entry "class" #f 445 8 445 13 ()}
        {Lisp-Entry "get-class" #f 445 21 445 29 ()}
        {Lisp-Entry "types" #f 446 8 446 13 ()}
        {Lisp-Entry "get-types" #f 446 21 446 29 ()}}
      {Lisp-Entry "Nillable-Type" #f 454 7 454 20 ()
        {Lisp-Entry "type" #f 457 8 457 12 ()}
        {Lisp-Entry "get-type" #f 457 20 457 28 ()}}
      {Lisp-Entry "C-Type-Declaration" #f 465 7 465 25 ()
        {Lisp-Entry "kind" #f 468 8 468 12 ()}
        {Lisp-Entry "get-kind" #f 468 29 468 37 ()}
        {Lisp-Entry "expansion" #f 469 8 469 17 ()}
        {Lisp-Entry "get-expansion" #f 469 29 469 37 ()}
        {Lisp-Entry "base-type" #f 470 8 470 17 ()}
        {Lisp-Entry "get-base-type" #f 470 29 470 37 ()}
        {Lisp-Entry "pointer-types" #f 471 8 471 21 ()}
        {Lisp-Entry "get-pointer-types" #f 471 29 471 37 ()}
        {Lisp-Entry "inclusions" #f 472 8 472 18 ()}
        {Lisp-Entry "get-inclusions" #f 472 29 472 37 ()}
        {Lisp-Entry "c-to-scheme" #f 473 8 473 19 ()}
        {Lisp-Entry "get-c-to-scheme" #f 473 29 473 37 ()}
        {Lisp-Entry "scheme-to-c" #f 474 8 474 19 ()}
        {Lisp-Entry "get-scheme-to-c" #f 474 29 474 37 ()}
        {Lisp-Entry "declare" #f 475 8 475 15 ()}
        {Lisp-Entry "get-declare" #f 475 29 475 37 ()}}
      {Lisp-Entry "C-Definition-Declaration" #f 483 7 483 31 ()
        {Lisp-Entry "signature" #f 486 8 486 17 ()}
        {Lisp-Entry "get-signature" #f 486 31 486 39 ()}
        {Lisp-Entry "parameter-types" #f 487 8 487 23 ()}
        {Lisp-Entry "get-parameter-types" #f 487 31 487 39 ()}
        {Lisp-Entry "result-type" #f 488 8 488 19 ()}
        {Lisp-Entry "get-result-type" #f 488 31 488 39 ()}
        {Lisp-Entry "c-name" #f 489 8 489 14 ()}
        {Lisp-Entry "get-c-name" #f 489 31 489 39 ()}
        {Lisp-Entry "scope" #f 490 8 490 13 ()}
        {Lisp-Entry "get-scope" #f 490 31 490 39 ()}
        {Lisp-Entry "body" #f 491 8 491 12 ()}
        {Lisp-Entry "get-body" #f 491 31 491 39 ()}}
      {Lisp-Entry "Dialect" #f 499 7 499 14 ()}
      {Lisp-Entry "Walker" #f 507 7 507 13 ()
        {Lisp-Entry "warnings" #f 510 8 510 16 ()}
        {Lisp-Entry "get-warnings" #f 510 24 510 32 ()}
        {Lisp-Entry "errors" #f 511 8 511 14 ()}
        {Lisp-Entry "get-errors" #f 511 24 511 32 ()}}
      {Lisp-Entry "walker-environment" #f 514 15 514 38 ()}
      {Lisp-Entry "walk-declaration" #f 515 15 515 36 ()}
      {Lisp-Entry "validate-access" #f 516 15 516 35 ()}
      {Lisp-Entry "walk-free-reference" #f 517 15 517 39 ()}
      {Lisp-Entry "walk-symbol-assignment" #f 518 15 518 42 ()}
      {Lisp-Entry "walk-free-assignment" #f 519 15 519 40 ()}
      {Lisp-Entry "walk-symbol" #f 520 15 520 31 ()}
      {Lisp-Entry "walk-form" #f 521 15 521 29 ()}
      {Lisp-Entry "validate-proclaim" #f 522 15 522 37 ()}
      {Lisp-Entry "validate-arguments" #f 523 15 523 38 ()}
      {Lisp-Entry "Walk-Context" #f 531 7 531 19 ()
        {Lisp-Entry "policy" #f 534 8 534 14 ()}
        {Lisp-Entry "get-policy" #f 534 24 534 32 ()}
        {Lisp-Entry "locator" #f 535 8 535 15 ()}
        {Lisp-Entry "get-locator" #f 535 24 535 32 ()}
        {Lisp-Entry "pathname" #f 536 8 536 16 ()}
        {Lisp-Entry "get-pathname" #f 536 24 536 32 ()}}
      {Lisp-Entry "Walk-Location" #f 544 15 544 28 ()
        {Lisp-Entry "module-locator" #f 547 8 547 22 ()}
        {Lisp-Entry "get-module-locator" #f 547 35 547 43 ()}
        {Lisp-Entry "declaration-locator" #f 548 8 548 27 ()}
        {Lisp-Entry "get-declaration-locator" #f 548 35 548 43 ()}
        {Lisp-Entry "locat" #f 549 8 549 13 ()}
        {Lisp-Entry "get-locat" #f 549 35 549 43 ()}
        {Lisp-Entry "initialize" #f 552 11 552 21 ("locat~self" "declaration-locator~self" "module-locator~self" "set!" "nextmethod" "locat" "declaration-locator" "module-locator")}
        {Lisp-Entry "print" #f 559 11 559 16 ("locat" "declaration-locator" "module-locator" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "Walk-Problem" #f 572 15 572 27 ()
        {Lisp-Entry "location" #f 575 8 575 16 ()}
        {Lisp-Entry "get-location" #f 575 24 575 32 ()}}
      {Lisp-Entry "Walk-Problems" #f 583 15 583 28 ()
        {Lisp-Entry "warnings" #f 586 8 586 16 ()}
        {Lisp-Entry "get-warnings" #f 586 24 586 32 ()}
        {Lisp-Entry "errors" #f 587 8 587 14 ()}
        {Lisp-Entry "get-errors" #f 587 24 587 32 ()}}
      {Lisp-Entry "Walk-Warning" #f 595 15 595 27 ()}
      {Lisp-Entry "Walk-Error" #f 603 15 603 25 ()}
      {Lisp-Entry "Unresolved-Error" #f 611 15 611 31 ()
        {Lisp-Entry "symbol" #f 614 8 614 14 ()}
        {Lisp-Entry "get-symbol" #f 614 22 614 30 ()}}
      {Lisp-Entry "Walk-Frame" #f 622 7 622 17 ()
        {Lisp-Entry "bindings" #f 625 8 625 16 ()}
        {Lisp-Entry "get-bindings" #f 625 24 625 32 ()}}
      {Lisp-Entry "Signature" #f 633 7 633 16 ()
        {Lisp-Entry "mandatory" #f 636 8 636 17 ()}
        {Lisp-Entry "get-mandatory" #f 636 26 636 34 ()}
        {Lisp-Entry "positional" #f 637 8 637 18 ()}
        {Lisp-Entry "get-positional" #f 637 26 637 34 ()}
        {Lisp-Entry "optional" #f 638 8 638 16 ()}
        {Lisp-Entry "get-optional" #f 638 26 638 34 ()}
        {Lisp-Entry "named" #f 639 8 639 13 ()}
        {Lisp-Entry "get-named" #f 639 26 639 34 ()}
        {Lisp-Entry "rest" #f 640 8 640 12 ()}
        {Lisp-Entry "get-rest" #f 640 26 640 34 ()}}
      {Lisp-Entry "Symbol-Binding" #f 648 7 648 21 ()}
      {Lisp-Entry "Variable" #f 656 7 656 15 ()
        {Lisp-Entry "reference-count" #f 659 8 659 23 ()}
        {Lisp-Entry "get-reference-count" #f 659 31 659 39 ()}}
      {Lisp-Entry "NextMethod-Variable" #f 667 7 667 26 ()}
      {Lisp-Entry "Parameter" #f 675 7 675 16 ()}
      {Lisp-Entry "Dynamic-Parameter" #f 683 7 683 24 ()
        {Lisp-Entry "class" #f 686 8 686 13 ()}
        {Lisp-Entry "get-class" #f 686 21 686 29 ()}}
      {Lisp-Entry "Optional-Parameter" #f 694 7 694 25 ()
        {Lisp-Entry "default" #f 697 8 697 15 ()}
        {Lisp-Entry "get-default" #f 697 23 697 31 ()}}
      {Lisp-Entry "Named-Parameter" #f 705 7 705 22 ()
        {Lisp-Entry "default" #f 708 8 708 15 ()}
        {Lisp-Entry "get-default" #f 708 23 708 31 ()}}
      {Lisp-Entry "Rest-Parameter" #f 716 7 716 21 ()}
      {Lisp-Entry "Dynamic-Self-Binding" #f 724 7 724 27 ()
        {Lisp-Entry "code" #f 727 8 727 12 ()}
        {Lisp-Entry "get-code" #f 727 20 727 28 ()}}
      {Lisp-Entry "Local-Variable-Binding" #f 735 7 735 29 ()
        {Lisp-Entry "variable" #f 738 8 738 16 ()}
        {Lisp-Entry "get-variable" #f 738 24 738 32 ()}}
      {Lisp-Entry "Macro-Symbol" #f 746 7 746 19 ()
        {Lisp-Entry "getter" #f 749 8 749 14 ()}
        {Lisp-Entry "get-getter" #f 749 22 749 30 ()}
        {Lisp-Entry "setter" #f 750 8 750 14 ()}
        {Lisp-Entry "get-setter" #f 750 22 750 30 ()}}
      {Lisp-Entry "Form-Binding" #f 758 7 758 19 ()}
      {Lisp-Entry "Special-Form" #f 766 7 766 19 ()
        {Lisp-Entry "walk" #f 769 8 769 12 ()}
        {Lisp-Entry "get-walk" #f 769 20 769 28 ()}}
      {Lisp-Entry "Macro-Form" #f 777 7 777 17 ()
        {Lisp-Entry "expander" #f 780 8 780 16 ()}
        {Lisp-Entry "get-expander" #f 780 24 780 32 ()}}
      {Lisp-Entry "Syntax-Form" #f 788 7 788 18 ()
        {Lisp-Entry "expander" #f 791 8 791 16 ()}
        {Lisp-Entry "get-expander" #f 791 24 791 32 ()}}
      {Lisp-Entry "Annotated-Variable" #f 799 7 799 25 ()
        {Lisp-Entry "variable" #f 802 8 802 16 ()}
        {Lisp-Entry "get-variable" #f 802 29 802 37 ()}
        {Lisp-Entry "declared-type" #f 803 8 803 21 ()}
        {Lisp-Entry "get-declared-type" #f 803 29 803 37 ()}
        {Lisp-Entry "type" #f 804 8 804 12 ()}
        {Lisp-Entry "get-type" #f 804 29 804 37 ()}}
      {Lisp-Entry "Restricted-Binding" #f 812 7 812 25 ()
        {Lisp-Entry "binding" #f 815 8 815 15 ()}
        {Lisp-Entry "get-binding" #f 815 23 815 31 ()}
        {Lisp-Entry "type" #f 816 8 816 12 ()}
        {Lisp-Entry "get-type" #f 816 23 816 31 ()}}
      {Lisp-Entry "Annotated-Frame" #f 824 7 824 22 ()
        {Lisp-Entry "variables" #f 827 8 827 17 ()}
        {Lisp-Entry "get-variables" #f 827 25 827 33 ()}
        {Lisp-Entry "reset" #f 828 8 828 13 ()}
        {Lisp-Entry "get-reset" #f 828 25 828 33 ()}}
      {Lisp-Entry "Code" #f 836 7 836 11 ()
        {Lisp-Entry "form" #f 839 8 839 12 ()}
        {Lisp-Entry "get-form" #f 839 22 839 30 ()}
        {Lisp-Entry "type" #f 840 8 840 12 ()}
        {Lisp-Entry "get-type" #f 840 22 840 30 ()}
        {Lisp-Entry "source" #f 841 8 841 14 ()}
        {Lisp-Entry "get-source" #f 841 22 841 30 ()}}
      {Lisp-Entry "Access" #f 849 7 849 13 ()
        {Lisp-Entry "name" #f 852 8 852 12 ()}
        {Lisp-Entry "get-name" #f 852 23 852 31 ()}
        {Lisp-Entry "context" #f 853 8 853 15 ()}
        {Lisp-Entry "get-context" #f 853 23 853 31 ()}}
      {Lisp-Entry "Expression" #f 861 7 861 17 ()
        {Lisp-Entry "type" #f 864 8 864 12 ()}
        {Lisp-Entry "get-type" #f 864 22 864 30 ()}
        {Lisp-Entry "source" #f 865 8 865 14 ()}
        {Lisp-Entry "get-source" #f 865 22 865 30 ()}}
      {Lisp-Entry "emit-expression" #f 868 15 868 35 ()}
      {Lisp-Entry "emit-call" #f 869 15 869 29 ()}
      {Lisp-Entry "fold-expression" #f 870 15 870 35 ()}
      {Lisp-Entry "Proclaim" #f 878 7 878 15 ()
        {Lisp-Entry "clauses" #f 881 8 881 15 ()}
        {Lisp-Entry "get-clauses" #f 881 23 881 31 ()}}
      {Lisp-Entry "Constant" #f 889 7 889 15 ()
        {Lisp-Entry "expansion" #f 892 8 892 17 ()}
        {Lisp-Entry "get-expansion" #f 892 25 892 33 ()}}
      {Lisp-Entry "Delay" #f 900 7 900 12 ()
        {Lisp-Entry "expression" #f 903 8 903 18 ()}
        {Lisp-Entry "get-expression" #f 903 26 903 34 ()}}
      {Lisp-Entry "Quasiquote" #f 911 7 911 17 ()
        {Lisp-Entry "form" #f 914 8 914 12 ()}
        {Lisp-Entry "get-form" #f 914 20 914 28 ()}}
      {Lisp-Entry "Reference" #f 922 7 922 16 ()
        {Lisp-Entry "binding" #f 925 8 925 15 ()}
        {Lisp-Entry "get-binding" #f 925 23 925 31 ()}
        {Lisp-Entry "print" #f 928 11 928 16 ("binding" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "Assignment" #f 940 7 940 17 ()
        {Lisp-Entry "binding" #f 943 8 943 15 ()}
        {Lisp-Entry "get-binding" #f 943 23 943 31 ()}
        {Lisp-Entry "value" #f 944 8 944 13 ()}
        {Lisp-Entry "get-value" #f 944 23 944 31 ()}}
      {Lisp-Entry "Lambda" #f 952 7 952 13 ()
        {Lisp-Entry "signature" #f 955 8 955 17 ()}
        {Lisp-Entry "get-signature" #f 955 25 955 33 ()}
        {Lisp-Entry "body" #f 956 8 956 12 ()}
        {Lisp-Entry "get-body" #f 956 25 956 33 ()}}
      {Lisp-Entry "Let" #f 964 7 964 10 ()
        {Lisp-Entry "bindings" #f 967 8 967 16 ()}
        {Lisp-Entry "get-bindings" #f 967 24 967 32 ()}
        {Lisp-Entry "body" #f 968 8 968 12 ()}
        {Lisp-Entry "get-body" #f 968 24 968 32 ()}}
      {Lisp-Entry "Named-Let" #f 976 7 976 16 ()
        {Lisp-Entry "variable" #f 979 8 979 16 ()}
        {Lisp-Entry "get-variable" #f 979 24 979 32 ()}}
      {Lisp-Entry "Letstar" #f 987 7 987 14 ()
        {Lisp-Entry "bindings" #f 990 8 990 16 ()}
        {Lisp-Entry "get-bindings" #f 990 24 990 32 ()}
        {Lisp-Entry "body" #f 991 8 991 12 ()}
        {Lisp-Entry "get-body" #f 991 24 991 32 ()}}
      {Lisp-Entry "Letrec" #f 999 7 999 13 ()
        {Lisp-Entry "bindings" #f 1002 8 1002 16 ()}
        {Lisp-Entry "get-bindings" #f 1002 24 1002 32 ()}
        {Lisp-Entry "body" #f 1003 8 1003 12 ()}
        {Lisp-Entry "get-body" #f 1003 24 1003 32 ()}}
      {Lisp-Entry "Receive" #f 1011 7 1011 14 ()
        {Lisp-Entry "variables" #f 1014 8 1014 17 ()}
        {Lisp-Entry "get-variables" #f 1014 26 1014 34 ()}
        {Lisp-Entry "expression" #f 1015 8 1015 18 ()}
        {Lisp-Entry "get-expression" #f 1015 26 1015 34 ()}
        {Lisp-Entry "body" #f 1016 8 1016 12 ()}
        {Lisp-Entry "get-body" #f 1016 26 1016 34 ()}}
      {Lisp-Entry "Body" #f 1024 7 1024 11 ()
        {Lisp-Entry "internal-defines" #f 1027 8 1027 24 ()}
        {Lisp-Entry "get-internal-defines" #f 1027 32 1027 40 ()}
        {Lisp-Entry "expressions" #f 1028 8 1028 19 ()}
        {Lisp-Entry "get-expressions" #f 1028 32 1028 40 ()}}
      {Lisp-Entry "Internal-Define" #f 1036 7 1036 22 ()
        {Lisp-Entry "variable" #f 1039 8 1039 16 ()}
        {Lisp-Entry "get-variable" #f 1039 24 1039 32 ()}
        {Lisp-Entry "value" #f 1040 8 1040 13 ()}
        {Lisp-Entry "get-value" #f 1040 24 1040 32 ()}}
      {Lisp-Entry "Begin" #f 1048 7 1048 12 ()
        {Lisp-Entry "expressions" #f 1051 8 1051 19 ()}
        {Lisp-Entry "get-expressions" #f 1051 27 1051 35 ()}}
      {Lisp-Entry "Do" #f 1059 7 1059 9 ()
        {Lisp-Entry "bindings" #f 1062 8 1062 16 ()}
        {Lisp-Entry "get-bindings" #f 1062 24 1062 32 ()}
        {Lisp-Entry "test" #f 1063 8 1063 12 ()}
        {Lisp-Entry "get-test" #f 1063 24 1063 32 ()}
        {Lisp-Entry "result" #f 1064 8 1064 14 ()}
        {Lisp-Entry "get-result" #f 1064 24 1064 32 ()}
        {Lisp-Entry "body" #f 1065 8 1065 12 ()}
        {Lisp-Entry "get-body" #f 1065 24 1065 32 ()}}
      {Lisp-Entry "Call" #f 1073 7 1073 11 ()
        {Lisp-Entry "operator" #f 1076 8 1076 16 ()}
        {Lisp-Entry "get-operator" #f 1076 25 1076 33 ()}
        {Lisp-Entry "arguments" #f 1077 8 1077 17 ()}
        {Lisp-Entry "get-arguments" #f 1077 25 1077 33 ()}}
      {Lisp-Entry "If" #f 1085 7 1085 9 ()
        {Lisp-Entry "test" #f 1088 8 1088 12 ()}
        {Lisp-Entry "get-test" #f 1088 20 1088 28 ()}
        {Lisp-Entry "yes" #f 1089 8 1089 11 ()}
        {Lisp-Entry "get-yes" #f 1089 20 1089 28 ()}
        {Lisp-Entry "no" #f 1090 8 1090 10 ()}
        {Lisp-Entry "get-no" #f 1090 20 1090 28 ()}}
      {Lisp-Entry "Cond" #f 1098 7 1098 11 ()
        {Lisp-Entry "clauses" #f 1101 8 1101 15 ()}
        {Lisp-Entry "get-clauses" #f 1101 23 1101 31 ()}}
      {Lisp-Entry "Case" #f 1109 7 1109 11 ()
        {Lisp-Entry "target" #f 1112 8 1112 14 ()}
        {Lisp-Entry "get-target" #f 1112 23 1112 31 ()}
        {Lisp-Entry "clauses" #f 1113 8 1113 15 ()}
        {Lisp-Entry "get-clauses" #f 1113 23 1113 31 ()}}
      {Lisp-Entry "And" #f 1121 7 1121 10 ()
        {Lisp-Entry "expressions" #f 1124 8 1124 19 ()}
        {Lisp-Entry "get-expressions" #f 1124 27 1124 35 ()}}
      {Lisp-Entry "Or" #f 1132 7 1132 9 ()
        {Lisp-Entry "expressions" #f 1135 8 1135 19 ()}
        {Lisp-Entry "get-expressions" #f 1135 27 1135 35 ()}}
      {Lisp-Entry "Declare" #f 1143 7 1143 14 ()
        {Lisp-Entry "declarations" #f 1146 8 1146 20 ()}
        {Lisp-Entry "get-declarations" #f 1146 28 1146 36 ()}}
      {Lisp-Entry "C-Include" #f 1154 7 1154 16 ()
        {Lisp-Entry "name" #f 1157 8 1157 12 ()}
        {Lisp-Entry "get-name" #f 1157 20 1157 28 ()}}
      {Lisp-Entry "C-Declare" #f 1165 7 1165 16 ()
        {Lisp-Entry "code" #f 1168 8 1168 12 ()}
        {Lisp-Entry "get-code" #f 1168 20 1168 28 ()}}
      {Lisp-Entry "C-Named-Declare-Declaration" #f 1176 7 1176 34 ()
        {Lisp-Entry "code" #f 1179 8 1179 12 ()}
        {Lisp-Entry "get-code" #f 1179 20 1179 28 ()}}
      {Lisp-Entry "C-Initialize" #f 1187 7 1187 19 ()
        {Lisp-Entry "code" #f 1190 8 1190 12 ()}
        {Lisp-Entry "get-code" #f 1190 20 1190 28 ()}}
      {Lisp-Entry "C-Function" #f 1198 7 1198 17 ()
        {Lisp-Entry "expansion" #f 1201 8 1201 17 ()}
        {Lisp-Entry "get-expansion" #f 1201 25 1201 33 ()}}
      {Lisp-Entry "Parameterize" #f 1209 7 1209 19 ()
        {Lisp-Entry "bindings" #f 1212 8 1212 16 ()}
        {Lisp-Entry "get-bindings" #f 1212 24 1212 32 ()}
        {Lisp-Entry "body" #f 1213 8 1213 12 ()}
        {Lisp-Entry "get-body" #f 1213 24 1213 32 ()}}
      {Lisp-Entry "Time-Special" #f 1221 7 1221 19 ()
        {Lisp-Entry "expression" #f 1224 8 1224 18 ()}
        {Lisp-Entry "get-expression" #f 1224 26 1224 34 ()}}
      {Lisp-Entry "Core-Dialect" #f 1232 7 1232 19 ()}
      {Lisp-Entry "Core-Walker" #f 1240 7 1240 18 ()}}})
"debug"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "debug.jazz"} 1248708411
    {Lisp-Entry "jazz.dialect.language.debug" #f 37 19 37 46 ("get-console-port" ":console" "register-printer" "jazz.dialect")
      {Lisp-Entry "*console-port-getter*" #f 53 12 53 33 ()}
      {Lisp-Entry "set-console-port-getter" #f 57 20 57 43 ("*console-port-getter*" "set!" "getter")}
      {Lisp-Entry "get-console-port" #f 61 20 61 36 ("terminal-port" "*console-port-getter*" "not" "if")}
      {Lisp-Entry "console-input-port" #f 67 20 67 38 ("get-console-port")}
      {Lisp-Entry "console-output-port" #f 70 20 70 39 ("get-console-port")}
      {Lisp-Entry "force-console" #f 74 20 74 33 ("get-console-port" "force-output")}
      {Lisp-Entry "console" #f 86 20 86 27 ("format" "console-string" "rest")}
      {Lisp-Entry "console-string" #f 90 20 90 34 ("force-output" "format" "terminal-string" "not" "if" "console-output-port" "output" "let" "color" "color:" "string")}
      {Lisp-Entry "debug" #f 103 19 103 24 ("console")}
      {Lisp-Entry "debug-string" #f 107 19 107 31 ("console-string")}
      {Lisp-Entry "continuation-stack" #f 116 20 116 38 ("get-continuation-dynamic-environment" "append" "else" "get-continuation-lexical-environment" "cons" "not" "and" "cond" "get-continuation-name" "name" "function" "map" "get-continuation-stack" "stack" "let" "depth" "depth:" "lexical-environment?" "lexical-environment?:" "dynamic-environment?" "dynamic-environment?:" "cont")}
      {Lisp-Entry "execution-stack" #f 130 20 130 35 ("continuation-stack" "cont" "function" "continuation-capture" "depth" "depth:" "lexical-environment?" "lexical-environment?:" "dynamic-environment?" "dynamic-environment?:")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "debug.scm"} 1248273219
    {Lisp-Entry "jazz.dialect.core.debug" #f 37 18 37 41 ()
      {Lisp-Entry "inspect" #f 41 9 41 16 ("jazz.serial->object" "integer?" "if" "jazz.inspect-object" "obj")}
      {Lisp-Entry "run-loop" #f 46 9 46 17 ("jazz.system.process.Process.Process.run-loop" "'jazz.system.process.Process.Process.run-loop" "run-loop" "jazz.system.access.get-process" "'jazz.system.access.get-process" "jazz.global-value" "get-process" "let")}
      {Lisp-Entry "resume" #f 53 9 53 15 ("jazz.system.process.Process.Process.resume-loop" "'jazz.system.process.Process.Process.resume-loop" "resume-loop" "jazz.system.access.get-process" "'jazz.system.access.get-process" "jazz.global-value" "get-process" "let")}}})
"declares"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "declares.scm"} 1237033585
    {Lisp-Entry "f-run-time-bindings/safe" #f 3 9 3 33 ("car" "x")}
    {Lisp-Entry "f-not-run-time-bindings/safe" #f 10 9 10 37 ("car" "x")}
    {Lisp-Entry "f-run-time-bindings/not-safe" #f 17 9 17 37 ("car" "x")}
    {Lisp-Entry "f-not-run-time-bindings/not-safe" #f 24 9 24 41 ("car" "x")}
    {Lisp-Entry "f-standard-bindings/not-run-time-bindings/not-safe" #f 32 9 32 59 ("##pair?" "car" "x")}
    {Lisp-Entry "f-standard-bindings/run-time-bindings/not-safe" #f 41 9 41 55 ("##pair?" "car" "x")}
    {Lisp-Entry "f-standard-bindings/extended-bindings/not-safe" #f 50 9 50 55 ("##pair?" "car" "x")}
    {Lisp-Entry "f-block" #f 57 9 57 16 ("g-block")}
    {Lisp-Entry "g-block" #f 60 9 60 16 ("f-block")}
    {Lisp-Entry "f-separate" #f 66 9 66 19 ("g-separate")}
    {Lisp-Entry "g-separate" #f 69 9 69 19 ("f-separate")}})
"development"
 ({Lisp-File-Entry {File jazz "src" "jazz" "development.jazz"} 1251042041
    {Lisp-Entry "jazz.development" #f 37 9 37 25 ("jazz")
      {Lisp-Entry "iter-list" #f 55 13 55 22 ("cdr" "iter-list" "car" "when" "proc" "lst")}
      {Lisp-Entry "iter-node" #f 61 13 61 22 ("get-children" "for-each" "function" "iter" "letrec" "proc" "node")}
      {Lisp-Entry "iter" #f 69 13 69 17 ("iter-node" "JML-Node" "is?" "iter-list" "null/pair?" "cond" "proc" "obj")}
      {Lisp-Entry "foldl-list" #f 74 13 74 23 ("car" "cdr" "foldl-list" "not" "if" "s" "f" "x")}
      {Lisp-Entry "foldr-list" #f 80 13 80 23 ("cdr" "foldr-list" "car" "not" "if" "s" "f" "x")}
      {Lisp-Entry "foldl-node" #f 86 13 86 23 ("foldl-node" "c" "function" "get-children" "foldl" "s" "f" "x")}
      {Lisp-Entry "foldr-node" #f 93 13 93 23 ("s" "f" "x")}
      {Lisp-Entry "foldl-component" #f 97 13 97 28 ("foldl-component" "c" "function" "get-children" "foldl" "s" "f" "x")}
      {Lisp-Entry "foldr-component" #f 104 13 104 28 ("s" "f" "x")}
      {Lisp-Entry "foldl" #f 108 13 108 18 ("foldl-component" "Component" "foldl-node" "JML-Node" "is?" "foldl-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "foldr" #f 114 13 114 18 ("foldr-component" "Component" "foldr-node" "JML-Node" "is?" "foldr-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "iter-map" #f 120 13 120 21 ("get-output" "put" "x" "function" "iter" "List-Factory" "new" "fact" "let" "obj" "proc")}
      {Lisp-Entry "iter-linearize" #f 128 13 128 27 ("identity" "iter-map" "obj")}
      {Lisp-Entry "fold-map" #f 132 13 132 21 ("cons" "lst" "x" "function" "foldr" "obj" "proc")}
      {Lisp-Entry "foldl-map" #f 139 13 139 22 ("cons" "lst" "x" "function" "foldl" "obj" "proc")}
      {Lisp-Entry "fold-linearize" #f 146 13 146 27 ("identity" "fold-map" "obj")}
      {Lisp-Entry "fold" #f 150 20 150 24 ("fold-component" "Component" "fold-node" "JML-Node" "is?" "foldl-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "fold-node" #f 156 13 156 22 ("get-children" "fold-node" "c" "function" "for-each" "ps" "let" "s" "f" "x")}
      {Lisp-Entry "fold-component" #f 164 13 164 27 ("get-children" "fold-component" "c" "function" "for-each" "ps" "let" "s" "f" "x")}
      {Lisp-Entry "component->jml" #f 172 20 172 34 ("component-self->jml" "fold" "x")}
      {Lisp-Entry "component-self->jml" #f 178 13 178 32 ("object->serial" "serial" "'serial" "get-size" "size" "'size" "get-position" "jazz.ui.layout.Figure.Figure" "'jazz.ui.layout.Figure.Figure" "typed?" "essay" "position" "'position" "get-name" "name" "'name" "list" "properties:" "class-of" "type-name" "identifier-name" "JML-Element" "new" "p" "c")}
      {Lisp-Entry "component-ascendants->jml" #f 188 13 188 38 ("find-toplevel" "if" "get-parent" "parent" "let" "component-self->jml" "component->jml" "define" "c")}
      {Lisp-Entry "pprint-component" #f 204 20 204 36 (":console" "component->jml" "pretty-print" "x")}
      {Lisp-Entry "pprint-component-ascendants" #f 210 20 210 47 (":console" "component-ascendants->jml" "pretty-print" "x")}
      {Lisp-Entry "ppd" #f 221 20 221 23 ("unspecified" "pprint-component" "c")}
      {Lisp-Entry "ppa" #f 226 20 226 23 ("unspecified" "pprint-component-ascendants" "c")}
      {Lisp-Entry "hex" #f 236 20 236 23 ("format" "n")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "development.scm"} 1248276859
    {Lisp-Entry "jazz.dialect.core.development" #f 37 18 37 47 ()
      {Lisp-Entry "jazz.define-global" #f 45 20 45 38 ("set!" ",value" ",setter" ",getter" ",name" "define" "begin" "jazz.generate-symbol" "value" "setter" "%%symbol->string" "%%string-append" "%%string->symbol" "getter" "let" "name")}
      {Lisp-Entry "?" #f 63 20 63 21 ()}
      {Lisp-Entry "%" #f 64 20 64 21 ()}
      {Lisp-Entry "?a" #f 67 20 67 22 ()}
      {Lisp-Entry "?b" #f 68 20 68 22 ()}
      {Lisp-Entry "?c" #f 69 20 69 22 ()}
      {Lisp-Entry "?d" #f 70 20 70 22 ()}
      {Lisp-Entry "?e" #f 71 20 71 22 ()}
      {Lisp-Entry "?f" #f 72 20 72 22 ()}
      {Lisp-Entry "?g" #f 73 20 73 22 ()}
      {Lisp-Entry "?h" #f 74 20 74 22 ()}
      {Lisp-Entry "?i" #f 75 20 75 22 ()}
      {Lisp-Entry "?j" #f 76 20 76 22 ()}
      {Lisp-Entry "?k" #f 77 20 77 22 ()}
      {Lisp-Entry "?l" #f 78 20 78 22 ()}
      {Lisp-Entry "?m" #f 79 20 79 22 ()}
      {Lisp-Entry "?n" #f 80 20 80 22 ()}
      {Lisp-Entry "?o" #f 81 20 81 22 ()}
      {Lisp-Entry "?p" #f 82 20 82 22 ()}
      {Lisp-Entry "?q" #f 83 20 83 22 ()}
      {Lisp-Entry "?r" #f 84 20 84 22 ()}
      {Lisp-Entry "?s" #f 85 20 85 22 ()}
      {Lisp-Entry "?t" #f 86 20 86 22 ()}
      {Lisp-Entry "?u" #f 87 20 87 22 ()}
      {Lisp-Entry "?v" #f 88 20 88 22 ()}
      {Lisp-Entry "?w" #f 89 20 89 22 ()}
      {Lisp-Entry "?x" #f 90 20 90 22 ()}
      {Lisp-Entry "?y" #f 91 20 91 22 ()}
      {Lisp-Entry "?z" #f 92 20 92 22 ()}
      {Lisp-Entry "%a" #f 95 20 95 22 ()}
      {Lisp-Entry "%b" #f 96 20 96 22 ()}
      {Lisp-Entry "%c" #f 97 20 97 22 ()}
      {Lisp-Entry "%d" #f 98 20 98 22 ()}
      {Lisp-Entry "%e" #f 99 20 99 22 ()}
      {Lisp-Entry "%f" #f 100 20 100 22 ()}
      {Lisp-Entry "%g" #f 101 20 101 22 ()}
      {Lisp-Entry "%h" #f 102 20 102 22 ()}
      {Lisp-Entry "%i" #f 103 20 103 22 ()}
      {Lisp-Entry "%j" #f 104 20 104 22 ()}
      {Lisp-Entry "%k" #f 105 20 105 22 ()}
      {Lisp-Entry "%l" #f 106 20 106 22 ()}
      {Lisp-Entry "%m" #f 107 20 107 22 ()}
      {Lisp-Entry "%n" #f 108 20 108 22 ()}
      {Lisp-Entry "%o" #f 109 20 109 22 ()}
      {Lisp-Entry "%p" #f 110 20 110 22 ()}
      {Lisp-Entry "%q" #f 111 20 111 22 ()}
      {Lisp-Entry "%r" #f 112 20 112 22 ()}
      {Lisp-Entry "%s" #f 113 20 113 22 ()}
      {Lisp-Entry "%t" #f 114 20 114 22 ()}
      {Lisp-Entry "%u" #f 115 20 115 22 ()}
      {Lisp-Entry "%v" #f 116 20 116 22 ()}
      {Lisp-Entry "%w" #f 117 20 117 22 ()}
      {Lisp-Entry "%x" #f 118 20 118 22 ()}
      {Lisp-Entry "%y" #f 119 20 119 22 ()}
      {Lisp-Entry "%z" #f 120 20 120 22 ()}}})
"dialect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "dialect.scm"} 1251729948
    {Lisp-Entry "jazz.dialect.dialect" #f 37 18 37 38 ("jazz.dialect" "'jazz.dialect" "jazz" "'jazz" "jazz.register-dialect" "jazz.new-jazz-dialect" "dialect" "jazz.Jazz-Walker" "jazz.Dispatch" "jazz.Construct" "jazz.Cast" "jazz.With-Dynamic-Self" "jazz.With-Self" "jazz.new" "jazz.new2" "2" "jazz.new1" "1" "jazz.codes-forms" "jazz.new0" "0" "%%length" "jazz.new-code" "values-codes" "jazz.Autoload-Declaration" "or" "%%get-reference-binding" "binding" "jazz.Reference" "class-expression" "let" "jazz.dialect.kernel.new" "'jazz.dialect.kernel.new" "%%eq?" "if" "declaration" "arguments-codes" "operator" "jazz.emit-primitive-new-call" "else" "%%car" "jazz.emit-specialized-class-of" "%%cdr" "%%null?" "%%pair?" "%%assert" "jazz.dialect.kernel.class-of" "case" "environment" "arguments" "locator" "jazz.emit-specialized-locator" "jazz.Jazz-Dialect" "jazz.Method-Declaration" "jazz.Property-Declaration" "jazz.Slot-Declaration" "jazz.Field-Declaration" "jazz.Interface-Declaration" "%%get-class-declaration-ascendant" "%%not" "%%class-is?" "and" "type" "lambda" "jazz.object-declaration?" "set!" "jazz.Class-Declaration" "jazz.Category-Declaration" "jazz.Specific-Declaration" "jazz.Generic-Declaration" "jazz.Specialize" "jazz.Definition-Declaration" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Definition-Declaration" #f 45 27 45 54 ()}
      {Lisp-Entry "jazz.new-definition-declaration" #f 48 9 48 40 ("jazz.setup-declaration" "jazz.Definition-Declaration" "jazz.allocate-definition-declaration" "new-declaration" "let" "signature" "expansion" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Definition-Declaration") 54 21 54 52 ("jazz.validate-arguments" "if" "declaration" "%%get-definition-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Definition-Declaration") 60 21 60 51 ("jazz.error" "jazz.call-return-type" "jazz.sourcified-form" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "argument" "parameter" "map" "jazz.new-code" "jazz.emit-expression" "body-code" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-inlined-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "jazz.untyped-inline-definition?" "jazz.inline-definitions?" "or" "inline" "'inline" "%%get-definition-declaration-expansion" "%%eq?" "and" "jazz.Lambda" "%%class-is?" "if" "declaration" "%%get-definition-declaration-value" "value" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.untyped-inline-definition?" #f 92 9 92 40 ("%%get-lambda-signature" "%%get-signature-positional" "%%get-lexical-binding-type" "%%not" "parameter" "lambda" "jazz.every?" "value")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Definition-Declaration") 98 21 98 42 ("%%get-declaration-source" "%%get-lexical-binding-type" "jazz.emit-expression" "jazz.emit-type-cast" ",locator" "define" "jazz.sourcify-if" "%%get-definition-declaration-value" "value" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Definition-Declaration") 107 21 107 48 ("jazz.Any" "%%get-lexical-binding-type" "or" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Definition-Declaration") 115 21 115 58 ("%%get-lexical-binding-name" "jazz.walk-error" "%%get-declaration-toplevel" "%%neq?" "%%when" "declaration" "nextmethod" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Definition-Declaration") 121 21 121 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Definition-Declaration") 125 21 125 49 ("jazz.Any" "%%get-lexical-binding-type" "jazz.emit-expression" "jazz.emit-type-cast" ",locator" "set!" "jazz.new-code" "declaration" "%%get-declaration-locator" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Definition-Declaration") 133 21 133 42 ("%%get-definition-declaration-value" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Specialize" #f 147 27 147 42 ()}
      {Lisp-Entry "jazz.new-specialize" #f 150 9 150 28 ("jazz.Specialize" "jazz.allocate-specialize")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Specialize") 154 21 154 41 ("jazz.Any" "begin" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Specialize") 161 21 161 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Generic-Declaration" #f 173 27 173 51 ()}
      {Lisp-Entry "jazz.new-generic-declaration" #f 176 9 176 37 ("jazz.setup-declaration" "jazz.Generic-Declaration" "jazz.allocate-generic-declaration" "new-declaration" "let" "signature" "dispatch-types" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Generic-Declaration") 182 21 182 52 ("%%get-generic-declaration-signature" "declaration" "jazz.validate-arguments" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Generic-Declaration") 186 21 186 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "jazz.define-generic" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-generic-declaration-body" "body" "%%get-generic-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "generic-locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Generic-Declaration") 199 21 199 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Generic-Declaration") 206 21 206 42 ("%%get-generic-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Specific-Declaration" #f 220 27 220 52 ()}
      {Lisp-Entry "jazz.new-specific-declaration" #f 223 9 223 38 ("jazz.setup-declaration" "jazz.Specific-Declaration" "jazz.allocate-specific-declaration" "new-declaration" "let" "root?" "signature" "generic" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Specific-Declaration") 229 21 229 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" ",modifier" "jazz.emit-signature" "jazz.define-specific" "jazz.sourcify-if" "child" "'child" "root" "'root" "%%get-specific-declaration-root?" "if" "modifier" "%%cons" "augmented-environment" "let" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-specific-declaration-body" "body" "%%get-specific-declaration-signature" "signature" "jazz.generic-object-locator" "generic-object-locator" "%%get-declaration-locator" "generic-locator" "declaration" "%%get-specific-declaration-generic" "generic-declaration" "let*" "environment")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Specific-Declaration") 245 21 245 42 ("%%get-specific-declaration-body" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Category-Declaration" #f 259 27 259 52 ()}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Category-Declaration") 262 21 262 48 ("jazz.Category-Declaration" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Class-Declaration" #f 277 27 277 49 ()}
      {Lisp-Entry "jazz.new-class-declaration" #f 280 9 280 35 ("jazz.setup-declaration" "jazz.new-queue" "jazz.protected-access" "jazz.make-access-lookups" "jazz.Class-Declaration" "jazz.allocate-class-declaration" "new-declaration" "let" "interfaces" "ascendant-base" "ascendant-relation" "ascendant" "metaclass" "implementor" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.setup-class-lookups" #f 286 9 286 33 ("jazz.protected-access" "%%get-namespace-declaration-lookups" "%%vector-set!" "not-private" "public" "interface" "lambda" "for-each" "jazz.public-access" "%%table-merge!" "%%get-declaration-toplevel" "%%eq?" "same-library?" "if" "jazz.private-access" "%%get-access-lookup" "private" "%%get-class-declaration-interfaces" "resolve-interface" "map" "interfaces" "%%get-class-declaration-ascendant" "resolve-class" "ascendant" "let" "class-declaration")
        {Lisp-Entry "resolve-class" #f 287 11 287 24 ("jazz.Class-Declaration" "%%is?" "%%assert" "jazz.resolve-binding" "class-declaration" "let" "if" "decl")}
        {Lisp-Entry "resolve-interface" #f 294 11 294 28 ("jazz.Interface-Declaration" "%%is?" "%%assert" "jazz.resolve-binding" "interface-declaration" "let" "if" "decl")}}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Class-Declaration") 333 21 333 48 ("jazz.Class-Declaration" "%%get-category-declaration-metaclass" "or" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Class-Declaration") 341 21 341 37 ("%%get-class-declaration-ascendant" "%%eq?" "jazz.resolve-binding" "target-declaration" "%%not" "target" "iter" "let" "jazz.Class-Declaration" "%%class-is?" "and" "declaration" "jazz.object-declaration?" "if" "subtype")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Class-Declaration") 354 21 354 42 ("%%get-declaration-source" "jazz.emit-namespace-statements" ",@interface-accesses" "%%list" ",metaclass-access" "jazz.new-class" "jazz.global-value" "',locator" "jazz.global-variable?" "lambda" "map" "interface-accesses" ",ascendant-access" "%%get-object-class" "jazz.Object-Class" "'jazz.Object-Class" "metaclass-access" "jazz.emit-ascendant-access" "%%get-category-declaration-metaclass" "metaclass-declaration" "jazz.remove-own-slots" ",name" "',name" "jazz.identifier-name" "jazz.set-core-class-redefined" "%%get-class-level" ",level-locator" "%%get-category-name" ",locator" "define" "jazz.emit-binding-reference" "jazz.sourcified-form" "%%not" "ascendant-access" "jazz.validate-core-class" "jazz.get-core-class" "core-class" "jazz.core-class?" "if" "begin" "jazz.sourcify-if" "level" "'level" "jazz.compose-helper" "level-locator" "%%get-namespace-declaration-body" "body" "%%get-class-declaration-interfaces" "interface-declarations" "%%get-class-declaration-ascendant" "ascendant-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let" "environment")}
      {Lisp-Entry "jazz.emit-ascendant-access" #f 385 9 385 35 ("%%get-object-class" "else" "jazz.emit-binding-reference" "jazz.sourcified-form" "%%not" "cond" "%%get-class-declaration-ascendant-base" "ascendant-base" "%%get-class-declaration-ascendant-relation" "ascendant-relation" "%%get-class-declaration-ascendant" "ascendant" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.find-class-declaration" #f 400 9 400 36 ("%%get-declaration-parent" "else" "jazz.Class-Declaration" "%%class-is?" "jazz.error" "%%not" "cond" "decl" "iter" "let" "declaration")}
      {Lisp-Entry "jazz.validate-core-class" #f 421 9 421 33 ("validate-slots" "validate-category" "declaration" "core-class")
        {Lisp-Entry "validate-category" #f 422 11 422 28 ("validate-interfaces" "validate-ascendant")
          {Lisp-Entry "validate-ascendant" #f 423 13 423 31 ("%%get-lexical-binding-name" "jazz.error" "%%eq?" "%%when" "%%get-declaration-locator" "declaration-ascendant-name" "declaration" "%%get-class-declaration-ascendant" "declaration-ascendant" "%%get-category-name" "jazz.identifier-name" "%%not" "if" "core-class-ascendant-name" "core-class" "%%get-class-ascendant" "core-class-ascendant" "let*")}
          {Lisp-Entry "validate-interfaces" #f 431 13 431 32 ("%%get-lexical-binding-name" "jazz.error" "%%null?" "%%not" "%%when" "declaration" "%%get-class-declaration-interfaces" "declaration-interfaces" "let")}}
        {Lisp-Entry "validate-slots" #f 439 11 439 25 ("jazz.error" "%%equal?" "%%not" "%%when" "declaration" "%%get-namespace-declaration-body" "collect-slots" "%%get-lexical-binding-name" "decl" "declaration-slot-names" "core-class" "%%get-class-slots" "%%get-field-name" "%%symbol?" "if" "name/slot" "lambda" "map" "core-class-slot-names" "let")
          {Lisp-Entry "collect-slots" #f 440 13 440 26 ("jazz.queue-list" "%%get-begin-expressions" "for-each" "jazz.Begin" "jazz.enqueue" "jazz.Slot-Declaration" "%%is?" "cond" "obj" "process" "define" "jazz.new-queue" "queue" "let" "lst")}}}
      {Lisp-Entry "jazz.Interface-Declaration" #f 465 27 465 53 ()}
      {Lisp-Entry "jazz.new-interface-declaration" #f 468 9 468 39 ("jazz.setup-declaration" "jazz.new-queue" "jazz.protected-access" "jazz.make-access-lookups" "jazz.Interface-Declaration" "jazz.allocate-interface-declaration" "new-declaration" "let" "ascendants" "metaclass" "implementor" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.setup-interface-lookups" #f 474 9 474 37 ("jazz.protected-access" "%%get-namespace-declaration-lookups" "%%vector-set!" "jazz.public-access" "%%table-merge!" "interface" "lambda" "for-each" "jazz.private-access" "%%get-access-lookup" "private" "%%get-interface-declaration-ascendants" "resolve-interface" "map" "ascendants" "let" "interface-declaration")
        {Lisp-Entry "resolve-interface" #f 475 11 475 28 ("jazz.Interface-Declaration" "%%is?" "%%assert" "jazz.resolve-binding" "interface-declaration" "let" "if" "decl")}}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Interface-Declaration") 507 21 507 37 ("subtype")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Interface-Declaration") 512 21 512 42 ("%%get-declaration-source" "jazz.emit-namespace-statements" "%%get-interface-rank" ",rank-locator" ",@ascendant-accesses" "%%list" "',locator" ",metaclass-access" "jazz.new-interface" ",locator" "define" "begin" "jazz.sourcify-if" "%%get-namespace-declaration-body" "body" "lambda" "map" "ascendant-accesses" "jazz.emit-binding-reference" "jazz.sourcified-form" "jazz.Interface" "'jazz.Interface" "%%not" "if" "metaclass-access" "%%get-category-declaration-metaclass" "metaclass-declaration" "%%get-interface-declaration-ascendants" "ascendant-declarations" "rank" "'rank" "jazz.compose-helper" "rank-locator" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.Field-Declaration" #f 539 27 539 49 ()}
      {Lisp-Entry "jazz.Slot-Declaration" #f 550 27 550 48 ()}
      {Lisp-Entry "jazz.new-slot-declaration" #f 553 9 553 34 ("jazz.setup-declaration" "jazz.Slot-Declaration" "jazz.allocate-slot-declaration" "new-declaration" "let" "setter-name" "getter-name" "initialize" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Slot-Declaration") 559 21 559 52 ("arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Slot-Declaration") 563 21 563 42 ("%%get-declaration-source" "jazz.declaration-result" "%%get-slot-offset" ",offset-locator" ",allocate?" ",name" "',name" ",class-locator" "jazz.add-slot" ",slot-locator" "jazz.emit-expression" "jazz.sourcified-form" "self" ",initialize-locator" "define" "if" "begin" "jazz.sourcify-if" "offset" "'offset" "offset-locator" "slot" "'slot" "slot-locator" "'initialize" "jazz.compose-helper" "and" "initialize-locator" "%%get-slot-declaration-initialize" "initialize" "jazz.Void" "%%get-lexical-binding-type" "%%neq?" "allocate?" "class-locator" "%%get-declaration-parent" "class-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Slot-Declaration") 587 21 587 48 ("jazz.error" "jazz.find-annotated-type" ",offset-locator" "jazz.sourcified-form" "%%object-ref" "jazz.new-code" "offset" "'offset" "declaration" "%%get-declaration-locator" "jazz.compose-helper" "offset-locator" "if" "jazz.*self*" "self" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Slot-Declaration") 598 21 598 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Slot-Declaration") 602 21 602 49 ("jazz.error" "jazz.Any" "jazz.emit-expression" ",offset-locator" "jazz.sourcified-form" "%%object-set!" "jazz.new-code" "offset" "'offset" "declaration" "%%get-declaration-locator" "jazz.compose-helper" "offset-locator" "if" "jazz.*self*" "self" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Slot-Declaration") 613 21 613 42 ("%%get-slot-declaration-initialize" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Property-Declaration" #f 627 27 627 52 ()}
      {Lisp-Entry "jazz.new-property-declaration" #f 630 9 630 38 ("jazz.setup-declaration" "jazz.Property-Declaration" "jazz.allocate-property-declaration" "new-declaration" "let" "setter-name" "getter-name" "initialize" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Property-Declaration") 636 21 636 42 ("%%get-declaration-source" "jazz.declaration-result" "%%get-slot-offset" ",offset-locator" ",allocate?" ",name" "',name" ",class-locator" "jazz.add-property" ",slot-locator" "jazz.emit-expression" "jazz.sourcified-form" "self" ",initialize-locator" "define" "if" "begin" "jazz.sourcify-if" "%%get-property-declaration-setter" "setter" "%%get-property-declaration-getter" "getter" "offset" "'offset" "offset-locator" "slot" "'slot" "slot-locator" "'initialize" "jazz.compose-helper" "and" "initialize-locator" "%%get-slot-declaration-initialize" "initialize" "jazz.Void" "%%get-lexical-binding-type" "%%neq?" "allocate?" "class-locator" "%%get-declaration-parent" "class-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.Method-Declaration" #f 672 27 672 50 ()}
      {Lisp-Entry "jazz.new-method-declaration" #f 675 9 675 36 ("jazz.setup-declaration" "jazz.Method-Declaration" "jazz.allocate-method-declaration" "new-declaration" "let" "signature" "synchronized" "remote" "expansion" "abstraction" "propagation" "root" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.method-dispatch-info" #f 681 9 681 34 ("error" "else" "interface" "'interface" "jazz.Interface-Declaration" "class" "'class" "jazz.Class-Declaration" "%%class-is?" "cond" "%%get-declaration-parent" "category-declaration" "method-declaration" "root-method-declaration" "values" "inherited" "'inherited" "final" "'final" "%%eq?" "or" "%%not" "and" "if" "%%get-method-declaration-propagation" "propagation" "%%get-method-declaration-root" "root" "let" "declaration")}
      {Lisp-Entry "jazz.native-category?" #f 697 9 697 30 ("primitive" "'primitive" "%%get-category-declaration-implementor" "%%neq?" "category-declaration")}
      {Lisp-Entry "jazz.emit-method-dispatch" #f 701 9 701 34 ("%%get-lexical-binding-type" "jazz.call-return-type" "%%interface-dispatch" ",interface-rank-locator" "%%interface-native-dispatch" "interface-rank-locator" "interface" "%%class-dispatch" ",method-rank-locator" ",class-level-locator" "%%class-native-dispatch" "jazz.native-category?" "if" "rank" "'rank" "method-rank-locator" "level" "'level" "jazz.compose-helper" "class-level-locator" "class" ",implementation-locator" "jazz.sourcified-form" "%%final-dispatch" "%%get-declaration-locator" "implementation-locator" "final" "case" "jazz.new-code" "%%get-declaration-parent" "category-declaration" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "%%get-lexical-binding-name" "name" "let" "declaration" "object")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Method-Declaration") 726 21 726 48 ("%%get-declaration-locator" "%%get-lexical-binding-name" "jazz.error" "%%get-code-type" "jazz.sourcified-form" "apply" "rest" "lambda" "jazz.new-code" "declaration" "jazz.emit-method-dispatch" "dispatch-code" "if" "jazz.*self*" "self" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Method-Declaration") 738 21 738 52 ("jazz.validate-arguments" "if" "declaration" "%%get-method-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Method-Declaration") 744 21 744 51 ("else" "jazz.error" "jazz.call-return-type" "jazz.sourcified-form" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "argument" "parameter" "map" "jazz.new-code" "jazz.emit-expression" "body-code" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "let" "final" "case" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "inline" "'inline" "declaration" "%%get-method-declaration-expansion" "%%eq?" "if" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Method-Declaration") 774 21 774 43 ("%%get-declaration-locator" "%%get-lexical-binding-name" "jazz.error" "%%get-code-type" ",@arguments" "jazz.sourcified-form" "jazz.new-code" "jazz.emit-method-dispatch" "dispatch-code" "jazz.codes-forms" "declaration" "%%get-lexical-binding-type" "type" "if" "jazz.*self*" "self" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Method-Declaration") 789 21 789 42 ("%%get-declaration-source" "',class-locator" "jazz.call-into-abstract" "rest" ",method-rank-locator" "abstract" "'abstract" "%%eq?" "if" "jazz.declaration-result" ",name" "',name" ",class-locator" ",method-call" "jazz.emit-expression" "jazz.sourcified-form" ",method-node-locator" "%%get-method-node-next-implementation" "nextmethod" "jazz.emit-signature-casts" "jazz.emit-signature" "self" ",method-locator" "define" "begin" "jazz.generate-symbol" "jazz.sourcify-if" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "jazz.Interface-Declaration" "jazz.add-virtual-method" "'jazz.add-virtual-method" "chained" "virtual" "jazz.add-final-method" "'jazz.add-final-method" "inherited" "final" "case" "jazz.Class-Declaration" "%%class-is?" "jazz.add-method-node" "'jazz.add-method-node" "cond" "method-call" "node" "'node" "method-node-locator" "rank" "'rank" "jazz.compose-helper" "method-rank-locator" "method-locator" "%%get-declaration-locator" "class-locator" "and" "root-category-declaration" "%%get-method-declaration-root" "root-method-declaration" "%%get-declaration-parent" "category-declaration" "let*" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "%%get-method-declaration-abstraction" "abstraction" "%%get-method-declaration-propagation" "propagation" "declaration" "%%get-lexical-binding-name" "name" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Method-Declaration") 845 21 845 42 ("jazz.fold-statement" "%%not" "if" "%%get-method-declaration-body" "body" "let" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Jazz-Dialect" #f 861 27 861 44 ()}
      {Lisp-Entry "jazz.new-jazz-dialect" #f 864 9 864 30 ("jazz.Jazz-Dialect" "jazz.allocate-jazz-dialect")}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Jazz-Dialect") 868 21 868 38 ("'jazz")}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Jazz-Dialect") 872 21 872 40 ("jazz.new-jazz-walker")}
      {Lisp-Entry "jazz.Jazz-Walker" #f 884 27 884 43 ()}
      {Lisp-Entry "jazz.new-jazz-walker" #f 887 9 887 29 ("jazz.Jazz-Walker" "jazz.allocate-jazz-walker")}
      {Lisp-Entry "jazz.runtime-export" ("jazz.Jazz-Walker") 891 21 891 40 ("%%get-declaration-locator" "jazz.Category-Declaration" "jazz.Generic-Declaration" "jazz.Definition-Declaration" "%%is?" "if" "walker" "nextmethod" "or" "declaration")}
      {Lisp-Entry "jazz.jazz-bindings" #f 905 9 905 27 ("jazz.expand-form" "form" "'form" "jazz.expand-com-external" "com-external" "'com-external" "jazz.expand-c-external-so" "c-external-so" "'c-external-so" "jazz.expand-c-external" "c-external" "'c-external" "jazz.expand-c-union" "c-union" "'c-union" "jazz.expand-c-structure" "c-structure" "'c-structure" "jazz.expand-assertion" "assertion" "'assertion" "jazz.expand-assert" "assert" "'assert" "jazz.expand-remotable-stub" "remotable-stub" "'remotable-stub" "jazz.walk-time" "time" "'time" "jazz.walk-construct" "construct" "'construct" "jazz.walk-cast" "cast" "'cast" "jazz.walk-with-local-variables" "with-local-variables" "'with-local-variables" "jazz.walk-with-dynamic-self" "with-dynamic-self" "'with-dynamic-self" "jazz.walk-with-self" "with-self" "'with-self" "jazz.walk-with-slots" "with-slots" "'with-slots" "jazz.walk-parameterize" "parameterize" "'parameterize" "jazz.walk-specialize" "%specialize" "'%specialize" "jazz.expand-specialize" "specialize" "'specialize" "jazz.new-macro-form" "jazz.walk-function" "function" "'function" "jazz.walk-c-definition" "c-definition" "'c-definition" "jazz.walk-c-type" "c-type" "'c-type" "jazz.walk-c-function" "c-function" "'c-function" "jazz.walk-c-initialize" "c-initialize" "'c-initialize" "jazz.walk-c-named-declare" "c-named-declare" "'c-named-declare" "jazz.walk-c-declare" "c-declare" "'c-declare" "jazz.walk-c-include" "c-include" "'c-include" "jazz.walk-declare" "declare" "'declare" "jazz.walk-method" "method" "'method" "%property" "'%property" "jazz.walk-%slot" "%slot" "'%slot" "jazz.expand-property" "property" "'property" "jazz.expand-slot" "slot" "'slot" "jazz.walk-interface" "interface" "'interface" "jazz.walk-%class" "%class" "'%class" "jazz.expand-class" "class" "'class" "jazz.new-syntax-form" "jazz.walk-specific" "specific" "'specific" "jazz.walk-generic" "generic" "'generic" "jazz.walk-definition" "definition" "'definition" "jazz.new-special-form" "%%list")}
      {Lisp-Entry "jazz.jazz-environment" #f 950 8 950 29 ()}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Jazz-Walker") 954 21 954 44 ("jazz.jazz-bindings" "jazz.scheme-bindings" "jazz.core-bindings" "append" "jazz.new-walk-frame" "%%list" "set!" "begin" "jazz.jazz-environment" "or")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Jazz-Walker") 966 21 966 42 ("nextmethod" "else" "jazz.walk-c-definition-declaration" "c-definition" "jazz.walk-c-type-declaration" "c-type" "jazz.walk-c-named-declare-declaration" "c-named-declare" "c-include" "jazz.walk-with-local-variables-declaration" "with-local-variables" "jazz.walk-with-dynamic-self-declaration" "with-dynamic-self" "jazz.walk-method-declaration" "method" "jazz.walk-%slot-declaration" "%property" "%slot" "jazz.walk-interface-declaration" "interface" "jazz.walk-%class-declaration" "%class" "specific" "jazz.walk-generic-declaration" "generic" "jazz.walk-%specialize-declaration" "%specialize" "walker" "jazz.walk-definition-declaration" "definition" "case" "%%car" "first" "let" "%%pair?" "if" "form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.parse-keywords" #f 993 9 993 28 ("%%list" "jazz.unspecified" "%%table-ref" "keyword" "lambda" "map" "%%append" "values" "%%apply" "%%cddr" "%%cadr" "%%table-set!" "begin" "set!" "%%memq" "if" "%%car" "jazz.source-code" "symbol" "%%null?" "%%not" "and" "%%while" "done?" "eq?" "test:" "%%make-table" "table" "let" "rest" "keywords")}
      {Lisp-Entry "jazz.emit-specialized-class-of" #f 1024 9 1024 39 ("%%get-category-declaration-metaclass" "jazz.Class-Declaration" "%%class-is?" "%%get-code-type" "type" "let" "%%class-of" "jazz.sourcified-form" "jazz.class-of" "jazz.debug-user?" "if" "jazz.new-code" "environment" "object")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Jazz-Walker") 1069 21 1069 37 ("nextmethod" "else" "jazz.error" "or" "jazz.new-method-reference" "jazz.Method-Declaration" "method-declaration" "jazz.Category-Declaration" "walker" "jazz.lookup-reference" "jazz.resolve-binding" "category-declaration" "jazz.new-reference" "jazz.Slot-Declaration" "%%class-is?" "%%assert" "jazz.private-access" "jazz.find-class-declaration" "jazz.lookup-declaration" "slot-declaration" "self" "'self" "%%eq?" "and" "cond" "if" "self/class-name" "name" "tilde?" "lambda" "jazz.split-tilde" "jazz.source-code" "symbol" "let" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.split-tilde" #f 1091 9 1091 25 ("1" "%%fx+" "%%fx<" "%%substring" "%%string->symbol" "0" "%%fx>" "%%string-length" "len" "%%not" "if" "jazz.string-find-reversed" "n" "%%symbol->string" "str" "let" "proc" "symbol")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Jazz-Walker") 1107 21 1107 48 ("nextmethod" "%%desourcify" "jazz.error" "walker" "jazz.walk" "jazz.new-assignment" "jazz.Slot-Declaration" "%%class-is?" "%%assert" "jazz.private-access" "jazz.find-class-declaration" "jazz.lookup-declaration" "slot-declaration" "let" "self" "'self" "%%eq?" "and" "if" "self/class-name" "name" "tilde?" "lambda" "jazz.source-code" "jazz.split-tilde" "value" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Jazz-Walker") 1124 21 1124 35 ("nextmethod" "walker" "jazz.walk-dispatch" "jazz.dispatch?" "if" "%%car" "jazz.source-code" "procedure-expr" "let" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.With-Self" #f 1136 27 1136 41 ()}
      {Lisp-Entry "jazz.new-with-self" #f 1139 9 1139 27 ("jazz.With-Self" "jazz.allocate-with-self" "body")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.With-Self") 1143 21 1143 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "self" "'self" "jazz.*self*" "parameterize" "begin" "jazz.simplify-begin" "jazz.new-code" "expression" "%%get-with-self-body" "body" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.With-Self") 1154 21 1154 41 ("%%get-with-self-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.With-Dynamic-Self" #f 1168 27 1168 49 ()}
      {Lisp-Entry "jazz.new-with-dynamic-self" #f 1171 9 1171 35 ("jazz.With-Dynamic-Self" "jazz.allocate-with-dynamic-self" "body" "code")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.With-Dynamic-Self") 1175 21 1175 41 ("jazz.Any" "jazz.emit-statements-code" "jazz.sourcified-form" "jazz.*self*" "parameterize" "begin" "jazz.simplify-begin" "jazz.new-code" "%%get-with-dynamic-self-body" "body" "expression" "%%get-with-dynamic-self-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.With-Dynamic-Self") 1187 21 1187 41 ("%%get-with-dynamic-self-body" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Cast" #f 1200 27 1200 36 ()}
      {Lisp-Entry "jazz.new-cast" #f 1203 9 1203 22 ("jazz.Cast" "jazz.allocate-cast" "expression" "type")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Cast") 1207 21 1207 41 ("jazz.emit-expression" "jazz.emit-type-cast" "jazz.new-code" "%%get-cast-expression" "expression" "%%get-expression-type" "type" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Cast") 1220 21 1220 41 ("%%get-cast-expression" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Construct" #f 1233 27 1233 41 ()}
      {Lisp-Entry "jazz.new-construct" #f 1236 9 1236 27 ("jazz.Construct" "jazz.allocate-construct" "values" "class")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Construct") 1240 21 1240 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "jazz.emit-expression" "jazz.sourcified-form" "%%object" "jazz.new-code" "%%get-construct-values" "values" "expression" "%%get-construct-class" "class" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Construct") 1250 21 1250 41 ("%%get-construct-values" "jazz.fold-expressions" "%%get-construct-class" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.cache-dispatch" #f 1264 9 1264 28 ("jazz.interface-dispatch" "interface" "jazz.class-dispatch" "jazz.final-dispatch" "final" "%%get-method-dispatch-type" "case" "proc" "%%get-category-field" "field" "jazz.error" "%%assertion" "jazz.locate-method-owner" "category" "%%class-of" "class" "let" "object" "lambda" "setter" "name")}
      {Lisp-Entry "jazz.final-dispatch" #f 1282 9 1282 28 ("%%get-method-implementation" "%%final-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "type" "field")}
      {Lisp-Entry "jazz.class-dispatch" #f 1288 9 1288 28 ("%%class-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "class-level" "let" "type" "field")}
      {Lisp-Entry "jazz.interface-dispatch" #f 1296 9 1296 32 ("%%interface-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "interface-rank" "let" "type" "field")}
      {Lisp-Entry "jazz.dispatch" #f 1304 9 1304 22 ("jazz.error" "jazz.find-dispatch" "or" "name" "object")}
      {Lisp-Entry "jazz.find-dispatch" #f 1309 9 1309 27 ("%%interface-dispatch" "interface" "%%get-method-implementation-rank" "%%get-method-category-rank" "%%class-dispatch" "%%get-method-implementation" "%%final-dispatch" "final" "%%get-method-dispatch-type" "case" "%%get-category-field" "field" "%%not" "if" "jazz.locate-method-owner" "category" "%%class-of" "class" "let" "name" "object")}
      {Lisp-Entry "jazz.Dispatch" #f 1324 27 1324 40 ()}
      {Lisp-Entry "jazz.new-dispatch" #f 1327 9 1327 26 ("jazz.Dispatch" "jazz.allocate-dispatch" "arguments" "name" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Dispatch") 1331 21 1331 41 ("expression" "jazz.emit-dispatch" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-dispatch" #f 1335 9 1335 27 ("jazz.Any" ",object" "object" "jazz.with-uniqueness" ",d" "set!" ",name" "',name" "jazz.cache-dispatch" "%%set-cdr!" "d" "%%symbol->string" "%%string-append" "jazz.register-variable" "dv" "%%get-expression-source" "jazz.codes-forms" "jazz.sourcified-form" "jazz.new-code" "jazz.emit-method-dispatch" "dispatch-code" "code" "lambda" "jazz.with-code-value" "jazz.emit-inlined-final-dispatch" "or" "jazz.emit-expressions" "rest-codes" "jazz.emit-expression" "%%cdr" "rest-arguments" "%%car" "object-argument" "method" "'method" "dispatch" "'dispatch" "find" "'find" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-library-warn?" "jazz.warnings?" "begin" "%%not" "method-declaration" "lookup-method/warn" "jazz.Method-Declaration" "and" "jazz.public-access" "jazz.lookup-declaration" "jazz.Category-Declaration" "lookup-method" "jazz.resolve-binding" "jazz.Autoload-Declaration" "%%class-is?" "if" "%%get-code-type" "jazz.patch-type-until-unification" "object-type" "object-code" "resolve-type" "define" "%%get-dispatch-arguments" "arguments" "%%get-dispatch-name" "name" "let" "environment" "declaration" "expression")}
      {Lisp-Entry "jazz.with-code-value" #f 1389 9 1389 29 ("%%get-code-source" ",form" ",value" "%%get-code-type" "jazz.new-code" "jazz.generate-symbol" "value" "%%symbol?" "if" "%%get-code-form" "form" "let" "proc" "code")}
      {Lisp-Entry "jazz.emit-inlined-final-dispatch" #f 1402 9 1402 41 ("else" "jazz.error" "jazz.call-return-type" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "argument" "parameter" "map" "jazz.sourcified-form" "self" "jazz.new-code" "jazz.emit-expression" "body-code" "%%cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "let" "final" "case" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "inline" "'inline" "%%get-method-declaration-expansion" "%%eq?" "if" "environment" "source-declaration" "arguments" "object" "declaration" "expression")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Dispatch") 1433 21 1433 41 ("%%get-dispatch-arguments" "jazz.fold-expressions" "%%get-dispatch-name" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.walk-dispatch" #f 1442 9 1442 27 ("jazz.walk-list" "jazz.new-dispatch" "%%desourcify" "jazz.error" "%%null?" "%%not" "%%assertion" "%%cdr" "arguments" "%%car" "jazz.source-code" "jazz.dispatch->symbol" "name" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.definition-modifiers" #f 1455 8 1455 33 ()}
      {Lisp-Entry "jazz.parse-definition" #f 1461 9 1461 30 (",@effective-body" ",parameters" "value" "unspecified" "'unspecified" "%%list" "%%null?" "effective-body" "body" "%%desourcify" "parameters" "let*" "values" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "name" "let" "%%car" "jazz.source-code" "%%symbol?" "if" "jazz.definition-modifiers" "jazz.parse-modifiers" "expansion" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-definition-declaration" #f 1479 9 1479 41 ("jazz.walk" "%%set-definition-declaration-value" "%%cons" "new-environment" "inline" "'inline" "%%eq?" "%%when" "jazz.add-declaration-child" "effective-declaration" "jazz.new-definition-declaration" "new-declaration" "jazz.build-function-type" "if" "effective-type" "jazz.walk-parameters" "and" "signature" "jazz.specifier->type" "type" "let" "%%cdr" "jazz.parse-definition" "parameters" "value" "expansion" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-definition" #f 1493 9 1493 29 ("%%set-declaration-source" "jazz.walk" "%%set-definition-declaration-value" "%%cons" "%%set-definition-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "if" "new-environment" "inline" "'inline" "%%neq?" "%%when" "jazz.find-form-declaration" "new-declaration" "let" "jazz.source-code" "%%cdr" "jazz.parse-definition" "parameters" "value" "expansion" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.build-function-type" #f 1512 9 1512 33 ("jazz.Any" "or" "and" "%%get-signature-rest" "rest" "let" "%%get-signature-named" "%%get-signature-optional" "%%get-signature-positional" "parameter-type" "map" "jazz.new-function-type" "result-type" "signature")
        {Lisp-Entry "parameter-type" #f 1513 11 1513 25 ("jazz.Any" "%%get-lexical-binding-type" "or" "parameter")}}
      {Lisp-Entry "jazz.specialize-modifiers" #f 1531 8 1531 33 ()}
      {Lisp-Entry "jazz.parse-specialize" #f 1535 9 1535 30 ("%%cddr" "%%cadr" "values" "as" "'as" "%%car" "%%eq?" "if" "jazz.specialize-modifiers" "jazz.parse-modifiers" "expansion" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-specialize" #f 1542 9 1542 31 (",operator" "%specialize" ",@rest" ",@parameters" ",name" ",expansion" "undocumented" "public" "definition" "begin" "jazz.compose-specializer-name" "or" "name" "parameters" "operator" "%%cdr" "%%car" "signature" "let" "jazz.parse-specialize" "as" "expansion" "receive" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.compose-specializer-name" #f 1554 9 1554 38 ("jazz.specifier->name" "%%list" "jazz.specifier?" "if" "parameter" "lambda" "map" "append" "string-append" "%%apply" "%%symbol->string" "%%string-append" "%%string->symbol" "parameters" "operator")}
      {Lisp-Entry "jazz.walk-%specialize-declaration" #f 1569 9 1569 42 ("jazz.new-specialize" "jazz.add-specializer" "specializer-declaration" "jazz.lookup-reference" "specialized-declaration" "%%cddr" "%%car" "specializer" "%%cadr" "specialized" "let" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-specialize" #f 1579 9 1579 29 ("jazz.new-specialize" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.generic-modifiers" #f 1588 8 1588 30 ()}
      {Lisp-Entry "jazz.parse-generic" #f 1593 9 1593 27 ("values" "body" "specifier" "lambda" "jazz.parse-specifier" "%%cdr" "parameters" "name" "%%car" "jazz.source-code" "signature" "let" "jazz.generic-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-generic-declaration" #f 1603 9 1603 38 ("jazz.walk-error" "jazz.add-declaration-child" "effective-declaration" "jazz.new-generic-declaration" "new-declaration" "jazz.walk-parameters" "signature" "jazz.dynamic-parameter-types" "jazz.lookup-reference" "dynamic-parameter-type" "lambda" "map" "dispatch-type-declarations" "jazz.Any" "jazz.walk-specifier" "type" "let" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-generic" "body" "parameters" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-generic" #f 1617 9 1617 26 ("%%set-declaration-source" "jazz.walk-body" "%%set-generic-declaration-body" "%%set-generic-declaration-signature" "jazz.find-form-declaration" "new-declaration" "let" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.source-code" "%%cdr" "jazz.parse-generic" "body" "parameters" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.specific-modifiers" #f 1633 8 1633 31 ()}
      {Lisp-Entry "jazz.parse-specific" #f 1637 9 1637 28 ("values" "parameters" "name" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "%%cdr" "body" "%%car" "jazz.desourcify" "signature" "let*" "jazz.specific-modifiers" "jazz.parse-modifiers" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-specific" #f 1647 9 1647 27 ("jazz.walk-error" "%%set-declaration-source" "jazz.walk-body" "%%set-specific-declaration-body" "nextmethod" "'nextmethod" "jazz.new-nextmethod-variable" "%%cons" "body-environment" "uptodate" "'uptodate" "public" "'public" "jazz.new-specific-declaration" "new-declaration" "jazz.walk-specific-root-dynamic-parameters?" "root?" "let*" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.Generic-Declaration" "jazz.private-access" "jazz.lookup-declaration" "generic-declaration" "let" "jazz.Library-Declaration" "%%class-is?" "if" "jazz.source-code" "%%cdr" "jazz.parse-specific" "body" "parameters" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-specific-root-dynamic-parameters?" #f 1664 9 1664 52 ("else" "or" "%%cons" "%%get-declaration-locator" "%%get-lexical-binding-name" "jazz.walk-error" "%%eq?" "%%cdr" "if" "specific-class" "%%get-dynamic-parameter-class" "%%get-reference-binding" "jazz.resolve-binding" "generic-class" "cond" "specific-dynamic?" "jazz.Dynamic-Parameter" "%%is?" "generic-dynamic?" "specific-parameter" "%%car" "%%pair?" "and" "generic-parameter" "root?" "specific-parameters" "%%get-generic-declaration-signature" "%%get-signature-positional" "generic-parameters" "iter" "let" "parameters" "name" "specific-signature" "generic-declaration" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.class-modifiers" #f 1694 8 1694 28 ()}
      {Lisp-Entry "jazz.class-keywords" #f 1700 8 1700 27 ()}
      {Lisp-Entry "jazz.parse-class" #f 1704 9 1704 25 ("values" "jazz.class-keywords" "jazz.parse-keywords" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "%%cdr" "jazz.Any" "type" "%%car" "jazz.source-code" "name" "let" "jazz.class-modifiers" "jazz.parse-modifiers" "implementor" "compatibility" "abstraction" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-class" #f 1713 9 1713 26 (",@class-body" ",interface-names" "implements" "metaclass" ",name" ",implementor" ",compatibility" ",abstraction" ",access" ",@metaclass-body" ",ascendant-name" ":class" "extends" ",metaclass-name" "begin" "%%symbol->string" "%%string-append" "%%string->symbol" "let" "else" "jazz.walk-error" "%%specified?" "%class" "%%null?" "cond" "jazz.preprocess-meta" "class-body" "metaclass-body" "jazz.source-code" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.preprocess-meta" #f 1729 9 1729 29 ("jazz.queue-list" "values" "%%cddr" "%%car" "%%cons" "jazz.enqueue" "meta" "'meta" "%%cadr" "%%eq?" "%%cdr" "jazz.source-code" "%%pair?" "and" "if" "expr" "lambda" "for-each" "class" "jazz.new-queue" "metaclass" "let" "body")}
      {Lisp-Entry "jazz.walk-%class-declaration" #f 1743 9 1743 37 ("jazz.walk-error" "jazz.walk-declarations" "%%cons" "new-environment" "jazz.setup-class-lookups" "jazz.add-declaration-child" "effective-declaration" "jazz.new-class-declaration" "jazz.Class-Declaration" "jazz.find-typed-declaration" "or" "new-declaration" "jazz.listify" "jazz.lookup-reference" "interface-name" "lambda" "map" "jazz.unspecified?" "interfaces" "jazz.lookup-metaclass" "metaclass" "let" "jazz.lookup-ascendant" "ascendant-base" "ascendant-relation" "ascendant" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%class" #f 1760 9 1760 25 ("%%set-declaration-source" "jazz.walk-namespace" "%%set-namespace-declaration-body" "begin" "jazz.error" "Object" "'Object" "%%neq?" "%%not" "and" "if" "%%get-class-declaration-ascendant" "ascendant-declaration" "%%cons" "new-environment" "jazz.find-form-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-metaclass" #f 1774 9 1774 30 ("jazz.lookup-reference" "Object-Class" "'Object-Class" "%%eq?" "jazz.unspecified?" "or" "if" "metaclass-name" "ascendant" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-ascendant" #f 1780 9 1780 30 ("else" "Object-Class" "'Object-Class" "jazz.effective-class-declaration-metaclass" "or" "%%cadr" "jazz.lookup-reference" "base" "relation" "let" ":class" "':class" "%%car" "%%eq?" "%%pair?" "and" "values" "jazz.unspecified?" "cond" "ascendant-name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.effective-class-declaration-metaclass" #f 1800 9 1800 51 ("jazz.effective-class-declaration-metaclass" "%%get-class-declaration-ascendant" "ascendant" "%%get-category-declaration-metaclass" "or" "jazz.resolve-binding" "let" "%%not" "if" "class-declaration")}
      {Lisp-Entry "jazz.interface-modifiers" #f 1816 8 1816 32 ()}
      {Lisp-Entry "jazz.interface-keywords" #f 1821 8 1821 31 ()}
      {Lisp-Entry "jazz.parse-interface" #f 1825 9 1825 29 ("values" "jazz.interface-keywords" "jazz.parse-keywords" "body" "attributes" "ascendant-names" "metaclass-name" "%%cdr" "jazz.Any" "type" "%%car" "name" "let" "jazz.interface-modifiers" "jazz.parse-modifiers" "implementor" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-interface-declaration" #f 1834 9 1834 40 ("jazz.walk-error" "jazz.walk-declarations" "%%cons" "new-environment" "jazz.setup-interface-lookups" "jazz.add-declaration-child" "effective-declaration" "jazz.new-interface-declaration" "new-declaration" "jazz.listify" "ascendant-name" "lambda" "map" "ascendants" "jazz.lookup-reference" "Interface" "'Interface" "%%eq?" "jazz.unspecified?" "or" "metaclass" "let" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-interface" "body" "attributes" "ascendant-names" "metaclass-name" "implementor" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-interface" #f 1848 9 1848 28 ("%%set-declaration-source" "jazz.walk-namespace" "%%set-namespace-declaration-body" "%%cons" "new-environment" "jazz.find-form-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-interface" "body" "attributes" "ascendant-names" "metaclass-name" "implementor" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.slot-modifiers" #f 1864 8 1864 27 ()}
      {Lisp-Entry "jazz.slot-keywords" #f 1868 8 1868 26 ()}
      {Lisp-Entry "jazz.slot-accessors-modifiers" #f 1872 8 1872 37 ()}
      {Lisp-Entry "jazz.slot-accessor-modifiers" #f 1880 8 1880 36 ()}
      {Lisp-Entry "jazz.parse-slot" #f 1888 9 1888 24 ("values" "%%desourcify" "jazz.walk-error" "%%not-null?" "if" "jazz.slot-keywords" "jazz.parse-keywords" "setter" "getter" "accessors" "initialize" "specifier" "lambda" "jazz.parse-specifier" "%%car" "name" "let" "jazz.source-code" "%%cdr" "jazz.slot-modifiers" "jazz.parse-modifiers" "rest" "compatibility" "access" "receive" "form-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-slot" #f 1899 9 1899 25 ("%slot" "'%slot" "jazz.expand-slot-form" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-slot-accessors" #f 1903 9 1903 34 ("or" "values" "jazz.walk-error" "%%not-null?" "if" "jazz.slot-accessors-modifiers" "jazz.parse-modifiers" "rest" "generation" "expansion" "abstraction" "propagation" "access" "receive" "slot-access" "form" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-slot-accessor" #f 1910 9 1910 33 ("values" "jazz.walk-error" "else" "%%car" "%%cdr" "%%symbol->string" "%%string-append" "%%string->symbol" "generate" "'generate" "%%eq?" "and" "%%null?" "cond" "name" "or" "let" "jazz.slot-accessor-modifiers" "jazz.parse-modifiers" "rest" "generation" "expansion" "abstraction" "propagation" "access" "receive" "prefix" "form" "default-generation" "default-expansion" "default-abstraction" "default-propagation" "default-access" "slot-name" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-slot-form" #f 1928 9 1928 30 ("set!" ",value" ",setter-expansion" ",setter-abstraction" ",setter-propagation" "protected" "'protected" ",@specifier-list" ",getter-expansion" ",getter-abstraction" ",getter-propagation" "public" "'public" "or" "method" ",setter-name" ",getter-name" ",initialize" "with-self" "%%unspecified?" ",compatibility" ",access" ",specifier" ",name" ",symbol" "begin" "if" "specifier-list" "generate-setter?" "generate" "'generate" "%%eq?" "generate-getter?" "jazz.generate-symbol" "value" "let*" "setter-name" "setter-generation" "setter-expansion" "setter-abstraction" "setter-propagation" "setter-access" "jazz.parse-slot-accessor" "getter-name" "getter-generation" "getter-expansion" "getter-abstraction" "getter-propagation" "getter-access" "jazz.parse-slot-accessors" "default-generation" "default-expansion" "default-abstraction" "default-propagation" "default-access" "else" "%%list" "%%symbol?" "jazz.unspecified?" "cond" "jazz.desourcify" "info" "lambda" "standardize" "let" "jazz.parse-slot" "setter" "getter" "accessors" "initialize" "compatibility" "access" "specifier" "name" "receive" "symbol" "form-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%slot-declaration" #f 1961 9 1961 36 ("jazz.add-declaration-child" "effective-declaration" "new-declaration" "jazz.new-slot-declaration" "jazz.new-property-declaration" "%property" "'%property" "%%car" "%%eq?" "new" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "%%cdr" "setter-name" "getter-name" "initialize" "compatibility" "access" "specifier" "name" "jazz.bind" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%slot" #f 1970 9 1970 24 ("%%set-declaration-source" ",name" "set!" ",setter-name" ",value" "jazz.generate-symbol" "value" "%%set-property-declaration-setter" ",getter-name" "with-self" "self" "lambda" "%%set-property-declaration-getter" "jazz.Property-Declaration" "%%class-is?" "%%when" "jazz.walk" "%%set-slot-declaration-initialize" "%%cadr" "jazz.find-form-declaration" "new-declaration" "jazz.unspecified?" "if" "%%cdr" "setter-name" "getter-name" "initialize" "compatibility" "access" "specifier" "name" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-property" #f 2002 9 2002 29 ("%property" "'%property" "jazz.expand-slot-form" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.method-modifiers" #f 2011 8 2011 29 ()}
      {Lisp-Entry "jazz.parse-method" #f 2022 9 2022 26 ("values" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "body" "specifier" "lambda" "jazz.parse-specifier" "%%desourcify" "%%cdr" "jazz.wrap-parameters" "parameters" "name" "let" "jazz.desourcify-all" "method" "'method" "%%cons" "%%get-declaration-toplevel" "%%get-lexical-binding-name" "jazz.error" "%%car" "jazz.source-code" "%%pair?" "and" "%%assertion" "jazz.method-modifiers" "jazz.parse-modifiers" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-method-declaration" #f 2033 9 2033 37 (",@body" "with-self" "jazz.walk" "%%set-method-declaration-body" "%%set-method-declaration-signature" "%%when" "jazz.add-declaration-child" "effective-declaration" "jazz.new-method-declaration" "new-declaration" "find-root-declaration" "root-declaration" "let*" "jazz.unspecified" "values" "jazz.walk-parameters" "augmented-environment" "signature" "concrete" "'concrete" "inline" "'inline" "%%eq?" "and" "inline?" "jazz.Procedure" "jazz.walk-specifier" "jazz.new-function-type" "if" "type" "let" "jazz.walk-error" "jazz.Category-Declaration" "%%class-is?" "%%assertion" "%%cdr" "jazz.parse-method" "body" "parameters" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "find-root-declaration" #f 2034 11 2034 32 ("%%get-declaration-parent" "%%eq?" "if" "%%get-method-declaration-root" "or" "and" "root-declaration" "jazz.private-access" "declaration" "jazz.lookup-declaration" "next-declaration" "let*" "name")}}
      {Lisp-Entry "jazz.walk-method" #f 2063 9 2063 25 ("%%set-declaration-source" "%%set-method-declaration-body" "%%set-method-declaration-signature" "inline" "'inline" "%%when" "concrete" "'concrete" ",@body" "with-self" "%%get-lexical-binding-type" "nextmethod" "'nextmethod" "jazz.new-nextmethod-variable" "%%cons" "jazz.walk" "body-expression" "let" "jazz.walk-parameters" "augmented-environment" "signature" "else" "'virtual" "jazz.Interface-Declaration" "%%not" "case" "'inherited" "%%neq?" "chained" "virtual" "inherited" "final" "%%memq" "%%eq?" "cond" "root-category-declaration" "%%get-method-declaration-propagation" "and" "root-method-propagation" "%%get-method-declaration-root" "root-method-declaration" "%%get-declaration-parent" "category-declaration" "jazz.private-access" "jazz.lookup-declaration" "new-declaration" "let*" "jazz.walk-error" "jazz.Category-Declaration" "%%class-is?" "%%assertion" "jazz.source-code" "%%cdr" "jazz.parse-method" "body" "parameters" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.wrap-parameters" #f 2100 9 2100 29 ("jazz.queue-list" "%%cdr" "with-self" ",@specifier-list" "%%cadr" "%%list" "specifier-list" "rest" "specifier" "lambda" "%%cddr" "jazz.parse-specifier" "%%keyword?" "jazz.enqueue" "jazz.specifier?" "%%pair?" "if" "%%car" "parameter" "else" "jazz.enqueue-list" "%%symbol?" "%%null?" "cond" "scan" "iter" "jazz.new-queue" "queue" "let" "parameters")}
      {Lisp-Entry "jazz.walk-cast" #f 2130 9 2130 23 ("jazz.walk" "jazz.walk-specifier" "jazz.new-cast" "%%cddr" "%%car" "expression" "%%cadr" "specifier" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-construct" #f 2143 9 2143 28 ("jazz.walk-list" "jazz.walk" "jazz.new-construct" "%%cddr" "values" "%%cadr" "class" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-self" #f 2156 9 2156 28 ("jazz.walk-body" "%%cdr" "body" "jazz.new-with-self" "jazz.new-self-binding" "%%cons" "new-environment" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-with-dynamic-self" #f 2169 9 2169 37 ("values" "%%cdr" "body" "%%car" "code" "let" "form")}
      {Lisp-Entry "jazz.walk-with-dynamic-self-declaration" #f 2175 9 2175 48 ("jazz.walk-declarations" "%%cdr" "jazz.parse-with-dynamic-self" "body" "code" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-dynamic-self" #f 2180 9 2180 36 ("jazz.walk-list" "jazz.new-with-dynamic-self" "jazz.new-dynamic-self-binding" "%%cons" "new-environment" "let" "%%desourcify" "%%cdr" "jazz.parse-with-dynamic-self" "body" "code" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-with-local-variables" #f 2193 9 2193 40 ("values" "%%cdr" "body" "%%car" "variables" "let" "form")}
      {Lisp-Entry "jazz.walk-with-local-variables-declaration" #f 2199 9 2199 51 ("jazz.walk-declarations" "%%cdr" "jazz.parse-with-local-variables" "body" "variables" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-local-variables" #f 2204 9 2204 39 ("jazz.walk-list" "jazz.new-begin" "jazz.new-local-variable-binding" "variable" "lambda" "map" "jazz.new-walk-frame" "%%cons" "new-environment" "let" "%%desourcify" "%%cdr" "jazz.parse-with-local-variables" "body" "variables" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Jazz-Walker") 2215 21 2215 43 ("walker" "jazz.walk-error" "jazz.Category-Declaration" "jazz.Library-Declaration" "%%class-is?" "%%not" "and" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.remotable-stub-modifiers" #f 2226 8 2226 37 ()}
      {Lisp-Entry "jazz.remotable-stub-keywords" #f 2229 8 2229 36 ()}
      {Lisp-Entry "jazz.parse-remotable-stub" #f 2233 9 2233 34 ("values" "jazz.remotable-stub-keywords" "jazz.parse-keywords" "body" "ascendant-name" "%%cdr" "%%car" "name" "let" "jazz.remotable-stub-modifiers" "jazz.parse-modifiers" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.method-stub-modifiers" #f 2241 8 2241 34 ()}
      {Lisp-Entry "jazz.parse-method-stub" #f 2247 9 2247 31 ("jazz.Any" "values" "body" "%%cdr" "parameters" "name" "%%car" "signature" "let*" "jazz.method-stub-modifiers" "jazz.parse-modifiers" "passage" "invocation" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-remotable-stub" #f 2256 9 2256 35 ("Remote-Proxy" "'Remote-Proxy" ",@values-method" "implements" "Local-Proxy" "'Local-Proxy" "metaclass" "Remotable-Stub" "'Remotable-Stub" ",stub-interface" ",stub-access" "interface" ",remote-class" ",local-class" "Stub-Interface" "'Stub-Interface" "jazz.specified?" "extends" ",interface-class" "package" "class" "begin" "nextmethod" ",@values-list" "list" "append" "proxy-values" "values-method" "values-list" ",call" "function" ",value-keyword" "proxy-value" "self" "',name" ",invoker" "if" ",dispatch" ",@local-result" ",rest" ",@positional" "object" "" "apply" "%%not-null?" "%%when" ",@parameters" ",name" "abstract" "virtual" ",access" "value-keyword" "unspecified" "local-result" "dispatch" "call-remote" "'call-remote" "call" "exec-remote" "'exec-remote" "exec" "post-remote" "'post-remote" "post" "invoker" "jazz.parse-method-stub" "invocation" "access" "method" "'method" "%%eq?" "method-form" "lambda" "for-each" "remotes" "locals" "proxies" "remote-class" "local-class" "stub-interface" "interface-class" "jazz.string->keyword" "0" "%%substring" "%%string=?" "4" "%%fx>" "and" "%%assert" "%%string-length" "len" "str" "let*" "value" "reference" "case" "passage" "parse-value-keyword" "%%cdr" "jazz.enqueue" "%%car" "else" "jazz.enqueue-list" "%%symbol?" "jazz.queue-list" "values" "%%null?" "cond" "scan" "iter" "parameter" "encode" "positional" "jazz.new-queue" "parameters" "let" "params" "parse-parameters" "%%symbol->string" "%%string-append" "%%string->symbol" "suffix" "add" "define" "jazz.parse-remotable-stub" "body" "ascendant-name" "stub-access" "type" "name" "receive" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-com-external" #f 2399 9 2399 33 ("jazz.emit-com-external" ",name" "public" "jazz.emit-com-function" ",lowlevel-name" "definition" "begin" "%%cons" "jazz.C-Type-Declaration" "%%class-is?" "resolved" "jazz.every?" "jazz.platform.windows.com.HRESULT" "'jazz.platform.windows.com.HRESULT" "%%get-declaration-locator" "%%eq?" "hresult?" "%%symbol->string" "%%string-append" "%%string->symbol" "lowlevel-name" "car" "resolved-directions" "resolved-params" "resolved-result" "let" "jazz.walk-error" "jazz.resolve-c-type-reference" "%%symbol?" "type" "lambda" "resolve-declaration" "%%null?" "if" "refiid" "%%cdr" "cadr" "map" "param-types" "%%car" "name" "let*" "rest" "signature" "result-type" "offset" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-com-function" #f 2417 9 2417 31 ("resolved-params" "param-types" "resolved-result" "result-type" "offset")
        {Lisp-Entry "fix-locator" #f 2418 11 2418 22 ("%%symbol->string" "%%string-append" "%%string->symbol" "'type" "%%get-c-type-declaration-kind" "%%eq?" "if" "declaration" "type")}}
      {Lisp-Entry "jazz.emit-com-external" #f 2448 9 2448 31 ("'result" "%%fx=" ",@out-list" "values" "else" "%%car" "1" "unspecified" "0" "%%length" "case" "generate-free" "generate-ref" "begin" "validate-hresult" ",refiid" "validate-hresult2" "if" "generate-low" ",lowlevel-name" "result" "generate-encode/enref" "generate-in" "coptr" "function" "generate-out" "generate-cotype-transform" "out-list" "let" "refiid" "resolved-directions" "resolved-params" "lowlevel-name" "hresult?")
        {Lisp-Entry "generate-in" #f 2449 11 2449 22 ("%%number->string" "%%string-append" "%%string->symbol" "out" "'out" "%%eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-low" #f 2454 11 2454 23 ("%%number->string" "%%string-append" "%%string->symbol" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-out" #f 2457 11 2457 23 ("%%number->string" "%%string-append" "%%string->symbol" "in" "'in" "%%eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-encode/enref" #f 2462 11 2462 32 (",value" ",encode/enref" ",binding" "generate-in" "get-cotype-default-value" "out" "'out" "%%eq?" "if" "value" "get-cotype-encode/enref" "encode/enref" "generate-low" "binding" "let" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-ref" #f 2472 11 2472 23 (",value" ",ref" ",binding" "generate-low" "value" "get-cotype-ref" "ref" "generate-out" "binding" "let" "in" "'in" "%%eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-free" #f 2482 11 2482 24 (",value" ",free" "if" "generate-low" "value" "get-cotype-free" "free" "let" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-cotype-transform" #f 2489 11 2489 36 ("%%fx+" "%%cdr" "cons" "%%car" "generated" "%%pair?" "if" "1" "order" "resolved-directions" "resolved-params" "iter" "let" "generator")}}
      {Lisp-Entry "get-cotype-default-value" #f 2525 9 2525 33 ("else" "jazz.platform.windows.WinTypes.LONG*" "0" "jazz.platform.windows.WinTypes.INT*" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "jazz.platform.windows.com.VARIANT" "jazz.platform.windows.com.VARIANT_BOOL*" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "jazz.platform.windows.com.GUID" "jazz.platform.windows.com.BSTR*" "error" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-encode/enref" #f 2542 9 2542 32 ("else" "LONG-enref" "'LONG-enref" "jazz.platform.windows.WinTypes.LONG*" "INT-enref" "'INT-enref" "jazz.platform.windows.WinTypes.INT*" "IUnknown*-enref" "'IUnknown*-enref" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-encode" "'VARIANT-encode" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL-enref" "'VARIANT_BOOL-enref" "jazz.platform.windows.com.VARIANT_BOOL*" "VARIANT_BOOL-encode" "'VARIANT_BOOL-encode" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-encode" "'GUID-encode" "jazz.platform.windows.com.GUID" "BSTR*-enref" "'BSTR*-enref" "jazz.platform.windows.com.BSTR*" "BSTR-encode" "'BSTR-encode" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-ref" #f 2559 9 2559 23 ("else" "LONG*-ref" "'LONG*-ref" "jazz.platform.windows.WinTypes.LONG*" "INT*-ref" "'INT*-ref" "jazz.platform.windows.WinTypes.INT*" "IUnknown**-ref" "'IUnknown**-ref" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-ref" "'VARIANT-ref" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL*-ref" "'VARIANT_BOOL*-ref" "jazz.platform.windows.com.VARIANT_BOOL*" "VARIANT_BOOL-decode" "'VARIANT_BOOL-decode" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-ref" "'GUID-ref" "jazz.platform.windows.com.GUID" "BSTR*-ref" "'BSTR*-ref" "jazz.platform.windows.com.BSTR*" "BSTR-ref" "'BSTR-ref" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-free" #f 2576 9 2576 24 ("else" "LONG*-free" "'LONG*-free" "jazz.platform.windows.WinTypes.LONG*" "INT*-free" "'INT*-free" "jazz.platform.windows.WinTypes.INT*" "IUnknown**-free" "'IUnknown**-free" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-decode" "'VARIANT-decode" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL*-free" "'VARIANT_BOOL*-free" "jazz.platform.windows.com.VARIANT_BOOL*" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-free" "'GUID-free" "jazz.platform.windows.com.GUID" "BSTR*-free" "'BSTR*-free" "jazz.platform.windows.com.BSTR*" "BSTR-free" "'BSTR-free" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "jazz.expand-assert" #f 2598 9 2598 27 ("jazz.expand-assert-test" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-assertion" #f 2603 9 2603 30 ("jazz.expand-assertion-test" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-assert-test" #f 2608 9 2608 32 ("error" "'error" "%%list" "jazz.expand-assertion-body" "get-output-string" "%%desourcify" "write" "display" "open-output-string" "port" "message" "%%cddr" "body" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-assertion-test" #f 2619 9 2619 35 ("jazz.expand-assertion-body" "%%cdr" "body" "%%cddr" "%%car" "action" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-assertion-body" #f 2626 9 2626 35 (",@body" "begin" "jazz.simplify-begin" ",action" ",assertion" "not" "unspecified" "%%not-null?" "if" "let" "body" "action" "assertion" "test?")}
      {Lisp-Entry "jazz.walk-declare" #f 2642 9 2642 26 ("jazz.new-declare" "%%cdr" "declarations" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-include" #f 2653 9 2653 28 ("jazz.new-c-include" "%%cdr" "name" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-declare" #f 2664 9 2664 28 ("jazz.new-c-declare" "%%cdr" "code" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-named-declare-modifiers" #f 2675 8 2675 38 ()}
      {Lisp-Entry "jazz.parse-c-named-declare" #f 2680 9 2680 35 ("values" "jazz.Any" "type" "let" "code" "name" "jazz.bind" "jazz.c-named-declare-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-named-declare-declaration" #f 2687 9 2687 46 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-c-named-declare-declaration" "new-declaration" "let" "%%cdr" "jazz.parse-c-named-declare" "code" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-named-declare-reference" #f 2694 9 2694 47 ("%%get-declaration-locator" "jazz.walk-error" "jazz.C-Named-Declare-Declaration" "%%class-is?" "if" "jazz.lookup-reference" "c-named-declare-declaration" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-named-declare" #f 2701 9 2701 34 ("jazz.find-form-declaration" "new-declaration" "%%cdr" "jazz.parse-c-named-declare" "code" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-initialize" #f 2713 9 2713 31 ("jazz.new-c-initialize" "%%cdr" "code" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-type-modifiers" #f 2724 8 2724 29 ()}
      {Lisp-Entry "jazz.parse-c-type" #f 2729 9 2729 26 ("declare" "scheme-to-c" "c-to-scheme" "values" "%%null?" "if" "jazz.Any" "type" "let" "conversions" "c-type" "name" "jazz.bind" "jazz.c-type-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-type-declaration" #f 2739 9 2739 37 ("jazz.add-declaration-child" "effective-declaration" "%%get-c-type-declaration-pointer-types" "%%set-c-type-declaration-pointer-types" "%%when" "jazz.new-c-type-declaration" "new-declaration" "jazz.walk-error" "jazz.resolve-c-named-declare-reference" "%%cons" "%%string?" "let" "jazz.resolve-c-type" "inclusions" "base-type-declaration" "expansion" "kind" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-c-type" "declare" "scheme-to-c" "c-to-scheme" "c-type" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-type" #f 2756 9 2756 25 ("jazz.find-form-declaration" "%%cdr" "jazz.parse-c-type" "declare" "scheme-to-c" "c-to-scheme" "c-type" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-type" #f 2762 9 2762 28 ("jazz.queue-list" "base-type-declaration" "expansion" "kind" "receive" "jazz.error" "else" "'union" "union" "'struct" "struct" "map" "'function" "result-type" "parameter-types" "function" "and" "resolve-expansion" "'pointer" "base-type" "pointer" ",@tag-rest" ",c-string" "%%cdr" "tag-rest" "c-string" "jazz.bind" "%%cadr" "'native" "native" "%%car" "case" "%%pair?" "'type" "%%string?" "%%get-declaration-locator" "alias" "'alias" "values" "jazz.enqueue" "jazz.resolve-c-type-reference" "c-type-declaration" "%%symbol?" "cond" "resolve" "define" "jazz.new-queue" "queue" "let" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-type-reference" #f 2802 9 2802 38 ("%%get-declaration-locator" "jazz.walk-error" "jazz.C-Type-Declaration" "%%class-is?" "if" "jazz.lookup-reference" "c-type-declaration" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-type-reference" #f 2809 9 2809 37 ("%%get-library-declaration-inclusions" "%%append" "%%set-library-declaration-inclusions" "%%get-declaration-toplevel" "library-declaration" "let" "jazz.resolve-c-type" "inclusions" "base-type-declaration" "expansion" "kind" "receive" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-function" #f 2821 9 2821 29 (",c-name-or-code" "map" "c-lambda" "jazz.new-c-function" "jazz.expand-c-type-reference" "type" "lambda" "resolve-access" "%%cdr" "c-name-or-code" "result-type" "types" "jazz.bind" "jazz.error" "%%length" "4" "%%fx=" "list?" "and" "%%assertion" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-definition-modifiers" #f 2835 8 2835 35 ()}
      {Lisp-Entry "jazz.parse-c-definition" #f 2840 9 2840 32 ("values" "%%cdr" "parameters" "jazz.Any" "type" "%%car" "name" "let" "body" "scope" "c-name" "result-type" "parameter-types" "signature" "jazz.bind" "jazz.c-definition-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-definition-declaration" #f 2849 9 2849 43 ("jazz.add-declaration-child" "effective-declaration" "map" "jazz.new-c-definition-declaration" "new-declaration" "jazz.walk-parameters" "signature" "jazz.expand-c-type-reference" "lambda" "resolve-access" "let" "%%cdr" "jazz.parse-c-definition" "body" "scope" "c-name" "result-type" "parameter-types" "parameters" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-definition" #f 2858 9 2858 31 ("%%set-declaration-source" "jazz.walk-body" "%%set-c-definition-declaration-body" "%%set-c-definition-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-c-definition" "body" "scope" "c-name" "result-type" "parameter-types" "parameters" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.build-pointer-symbol" #f 2875 9 2875 34 ("%%symbol->string" "%%string-append" "%%string->symbol" "type")}
      {Lisp-Entry "jazz.pointer?" #f 2879 9 2879 22 ("1" "%%fx-" "%%string-ref" "%%eq?" "%%string-length" "lgt" "%%symbol->string" "str" "let*" "type")}
      {Lisp-Entry "jazz.build-method-symbol" #f 2885 9 2885 33 ("symbol->string" "map" "%%symbol->string" "string-append" "apply" "%%string->symbol" "rest" "struct")}
      {Lisp-Entry "jazz.parse-structure-name" #f 2889 9 2889 34 ("%%cddr" "%%cadr" "%%car" "%%symbol->string" "values" "%%symbol?" "if" "name")}
      {Lisp-Entry "jazz.kind+type" #f 2895 9 2895 23 ("values" "%%car" "alias" "'alias" "%%eq?" "if" "%%get-c-type-declaration-inclusions" "inclusions" "%%get-c-type-declaration-expansion" "expansion" "%%get-c-type-declaration-kind" "kind" "jazz.resolve-c-type-reference" "loop" "let" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-accessor" #f 2905 9 2905 29 ("values" ",setter-string" "void" "-set!" "'-set!" "setter" ",getter-string" ",type" ",struct*" "c-function" "-ref" "'-ref" "jazz.build-method-symbol" "public" "definition" "getter" "%%memq" "wchar_t-string" "char-string" "type*" "jazz.build-pointer-symbol" "struct*" "let*" "'type" "'union" "'struct" "else" "%%number->string" "size-string" "cond" "setter-string" "union" "function" "pointer" "native" "case" "%%string-append" "wchar_t" "'wchar_t" "char" "'char" "%%eq?" "or" "if" "getter-string" "%%symbol->string" "id-string" "jazz.kind+type" "expansion" "kind" "receive" "jazz.walk-error" "%%symbol?" "%%integer?" "%%when" "%%null?" "%%not" "and" "%%cddr" "clause-rest" "size" "%%cadr" "id" "%%car" "type" "let" "struct" "clause" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-structure/union" #f 2961 9 2961 36 ("map" "append" "%%apply" "unsigned-int" "'sizeof" "void" "native" "free" "'free" "c-function" "make" "'make" "jazz.build-method-symbol" "public" "definition" ",@tag*-rest" "pointer" ",struct*" ",@tag-rest" ",c-struct-string" "type" ",struct" "c-type" "begin" "%%list" "jazz.expand-accessor" "setter" "getter" "clause" "expand-accessor" "define" "%%cdr" "%%car" "%%cons" "%%null?" "if" "tag*-rest" "%%string-append" "sizeof" "jazz.build-pointer-symbol" "struct*" "let" "jazz.parse-structure-name" "tag-rest" "c-struct-string" "struct" "receive" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-structure" #f 2983 9 2983 32 ("jazz.expand-structure/union" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-structure-array" #f 2987 9 2987 38 ("array-element" "'array-element" "%%string-append" ",struct*" "int" "c-function" "array-make" "'array-make" "jazz.build-method-symbol" "public" "definition" "begin" "%%symbol->string" "%%car" "%%null?" "%%not" "if" "c-struct-string" "jazz.build-pointer-symbol" "struct*" "struct" "let*" "rest" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-union" #f 2998 9 2998 28 ("jazz.expand-structure/union" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-external" #f 3007 9 3007 31 (",c-name" ",type" ",params" "c-function" ",s-name" "public" "definition" "%%symbol->string" "%%null?" "if" "c-name" "%%cdr" "params" "%%car" "s-name" "let*" "rest" "signature" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-external-so" #f 3016 9 3016 34 ("WCHAR-string" "values" ",ext-s-name" "result" "WCHAR-copy" "1" ",string-param" "string-length" "+" "WCHAR-array-make" "pt" "let" ",@new-params" ",s-name" "public" "definition" ",c-name" "%%cons" ",type" "c-external" "begin" "%%null?" "if" "c-name" "list-ref" "string-param" "jazz.generate-symbol" "param" "lambda" "map" "new-params" "%%cdr" "params" "%%symbol->string" "%%string-append" "%%string->symbol" "ext-s-name" "%%car" "s-name" "let*" "rest" "signature" "arg" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-function" #f 3038 9 3038 28 ("values" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "body" "%%car" "%%desourcify" "parameters" "jazz.source-code" "%%cdr" "rest" "let*" "form-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-function" #f 3046 9 3046 27 (",@body" ",parameters" "lambda" "jazz.walk-lambda" "jazz.parse-function" "body" "parameters" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-parameterize" #f 3059 9 3059 31 ("jazz.walk-body" "jazz.queue-list" "jazz.new-parameterize" "jazz.walk" "%%cons" "jazz.enqueue" "%%cdr" "value" "%%car" "variable" "continuation-capture" "binding-form" "lambda" "for-each" "jazz.new-queue" "expanded-bindings" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "%%cddr" "body" "%%cadr" "jazz.source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-slots" #f 3086 9 3086 29 (",@body" ",setter-name" "',setter-name" "value" "',object-symbol" ",getter-name" "',getter-name" "%%list" "%%get-slot-declaration-setter-name" "setter-name" "%%get-slot-declaration-getter-name" "getter-name" "jazz.lookup-reference" "slot-declaration" "let*" "slot-name" "lambda" "map" "let-symbol" ",object" ",object-symbol" "jazz.walk" "jazz.generate-symbol" "object-symbol" "%%cdr" "body" "object" "slot-names" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-time" #f 3106 9 3106 23 ("jazz.walk" "jazz.new-time-special" "%%cadr" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-form" #f 3117 9 3117 25 ("nextmethod" "cons" "get-class-forms" "get-class-form" "method" ",class-locator" "',class-locator" "register-form" ",class-name" ",form" "',form" "jml->form>>" "class-form" "definition" "begin" "%%get-declaration-locator" "class-locator" "%%get-lexical-binding-name" "class-name" "let*" "form" "environment" "declaration" "resume" "walker")}}})
"ecase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "ecase.scm"} 1251729949
    {Lisp-Entry "jazz.dialect.syntax.ecase" #f 37 19 37 44 ("scheme")
      {Lisp-Entry "private" #f 43 8 43 15 ("jazz.error")}
      {Lisp-Entry "ecase" #f 53 16 53 21 ("desourcify" "error" "eqv?" "'eqv?" "=" "'=" "list" "integer?" "if" "value" "or" "'or" "pair?" "cons" "else" "'else" "eq?" "cdr" "body" "car" "selector" "clause" "map" "cond" "symbol" "lambda" "with-uniqueness" "sourcify-if" "cddr" "clauses" "source-code" "cadr" "target" "let" "form-src")}}})
"either"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "either.scm"} 1248708411
    {Lisp-Entry "jazz.dialect.syntax.either" #f 37 19 37 45 ("scheme")
      {Lisp-Entry "private" #f 45 8 45 15 ("jazz.error")}
      {Lisp-Entry "either" #f 51 16 51 22 ("'let" "generate-symbol" "symbol" "'if" "list" "rest" "expr" "bind" "pair" "lambda" "proc" "letrec" "set!" "car" "symbol?" "when" "not" "while" "complex?" "scan" "sourcify-if" "error" "null?" "if" "source-code" "cdr" "expressions" "let" "form-src")}}})
"enumeration"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "enumeration.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.syntax.enumeration" #f 37 19 37 50 ("scheme")}})
"essay"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "essay.scm"} 1248797037
    {Lisp-Entry "jazz.dialect.syntax.essay" #f 37 19 37 44 ("scheme")
      {Lisp-Entry "private" #f 43 8 43 15 ("jazz.butlast")}
      {Lisp-Entry "private" #f 44 8 44 15 ("jazz.error")}
      {Lisp-Entry "private" #f 45 8 45 15 ("jazz.last")}
      {Lisp-Entry "essay" #f 50 16 50 21 (",expr" ",@tests" "and" "when" "last" "expr" "butlast" "tests" "sourcify-if" "error" "null?" "if" "source-code" "cdr" "expressions" "let" "form-src")}}})
"exception"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "exception.jazz"} 1251206746
    {Lisp-Entry "jazz.dialect.language.exception" #f 37 19 37 50 ("jazz.dialect")
      {Lisp-Entry "*exception-debugger*" #f 55 12 55 32 ()}
      {Lisp-Entry "get-exception-debugger" #f 59 20 59 42 ("*exception-debugger*")}
      {Lisp-Entry "set-exception-debugger" #f 62 20 62 42 ("*exception-debugger*" "set!" "exception-debugger")}
      {Lisp-Entry "current-exception-debugger" #f 66 12 66 38 ("make-parameter")}
      {Lisp-Entry "exception-debugger-hook" #f 70 21 70 44 ("system-exception-hook" "if" "*exception-debugger*" "current-exception-debugger" "either" "exception-debugger" "let" "other" "exc")}
      {Lisp-Entry "with-exception-debugger" #f 77 20 77 43 ("current-exception-debugger" "parameterize" "thunk" "exception-debugger")}
      {Lisp-Entry "system-exception-debugger" #f 82 20 82 45 ("system-exception-hook" "invoke-exception-hook" "exc")}
      {Lisp-Entry "with-system-exception-debugger" #f 86 20 86 50 ("system-exception-debugger" "with-exception-debugger" "thunk")}
      {Lisp-Entry "Exception" #f 91 7 91 16 ()
        {Lisp-Entry "get-message" #f 94 26 94 37 ()}
        {Lisp-Entry "present-message" #f 98 26 98 41 ("get-message" "list" "rest")}
        {Lisp-Entry "print" #f 102 11 102 16 ("get-message" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "exception?" #f 108 20 108 30 ("Exception" "is?" "object?" "and" "obj")}
      {Lisp-Entry "Exception-Detail" #f 113 15 113 31 ()
        {Lisp-Entry "icon" #f 116 8 116 12 ()}
        {Lisp-Entry "get-icon" #f 116 24 116 32 ()}
        {Lisp-Entry "title" #f 117 8 117 13 ()}
        {Lisp-Entry "get-title" #f 117 24 117 32 ()}
        {Lisp-Entry "location" #f 118 8 118 16 ()}
        {Lisp-Entry "get-location" #f 118 24 118 32 ()}
        {Lisp-Entry "children" #f 119 8 119 16 ()}
        {Lisp-Entry "get-children" #f 119 24 119 32 ()}
        {Lisp-Entry "initialize" #f 122 11 122 21 ("children~self" "location~self" "title~self" "icon~self" "set!" "nextmethod" "children" "location" "title" "icon")}
        {Lisp-Entry "print" #f 130 11 130 16 ("children" "location" "title" "icon" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "System-Exception" #f 139 7 139 23 ()
        {Lisp-Entry "exception" #f 142 8 142 17 ()}
        {Lisp-Entry "get-exception" #f 142 25 142 33 ()}
        {Lisp-Entry "initialize" #f 145 11 145 21 ("exception~self" "set!" "nextmethod" "exception")}}
      {Lisp-Entry "wrap-exception" #f 150 20 150 34 ("System-Exception" "new" "exception?" "if" "obj")}
      {Lisp-Entry "Continue" #f 156 7 156 15 ()}
      {Lisp-Entry "Error" #f 159 7 159 12 ("generate" "inherited")
        {Lisp-Entry "message" #f 162 8 162 15 ()}
        {Lisp-Entry "set-message" #f 162 23 162 31 ()}
        {Lisp-Entry "initialize" #f 165 11 165 21 ("set-message" "nextmethod" "message" "message:")}}
      {Lisp-Entry "error?" #f 170 20 170 26 ("Error" "is?" "object?" "and" "obj")}
      {Lisp-Entry "Read-Error" #f 175 15 175 25 ()
        {Lisp-Entry "source" #f 178 8 178 14 ()}
        {Lisp-Entry "start" #f 179 8 179 13 ()}
        {Lisp-Entry "end" #f 180 8 180 11 ()}
        {Lisp-Entry "initialize" #f 183 11 183 21 ("end~self" "start~self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "source" "bind-keywords" "rest")}
        {Lisp-Entry "get-source" #f 191 18 191 28 ("source")}
        {Lisp-Entry "get-start" #f 195 18 195 27 ("start")}
        {Lisp-Entry "get-end" #f 199 18 199 25 ("end")}
        {Lisp-Entry "get-range" #f 203 18 203 27 ("end" "start" "Range" "new")}}
      {Lisp-Entry "Parse-Error" #f 207 15 207 26 ()
        {Lisp-Entry "source" #f 210 8 210 14 ()}
        {Lisp-Entry "start" #f 211 8 211 13 ()}
        {Lisp-Entry "end" #f 212 8 212 11 ()}
        {Lisp-Entry "initialize" #f 215 11 215 21 ("end~self" "start~self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "source" "bind-keywords" "rest")}
        {Lisp-Entry "get-source" #f 223 18 223 28 ("source")}
        {Lisp-Entry "get-start" #f 227 18 227 27 ("start")}
        {Lisp-Entry "get-end" #f 231 18 231 25 ("end")}}
      {Lisp-Entry "Convertion-Error" #f 235 15 235 31 ()
        {Lisp-Entry "object" #f 238 8 238 14 ()}
        {Lisp-Entry "type" #f 239 8 239 12 ()}
        {Lisp-Entry "initialize" #f 242 11 242 21 ("type~self" "object~self" "set!" "nextmethod" "apply" "others" "type" "object" "bind-keywords" "rest")}
        {Lisp-Entry "get-object" #f 249 18 249 28 ("object")}
        {Lisp-Entry "get-type" #f 253 18 253 26 ("type")}
        {Lisp-Entry "get-message" #f 257 11 257 22 ("format-gender" "object" "format" "type-name" "string?" "if" "type" "let")}}
      {Lisp-Entry "Signal" #f 265 7 265 13 ()}
      {Lisp-Entry "Cancel-Signal" #f 268 15 268 28 ()}
      {Lisp-Entry "call-with-catch" #f 271 20 271 35 ("is?" "object?" "and" "procedure?" "if" "obj" "function" "with-exception-filter" "thunk" "catcher" "predicate/type")}
      {Lisp-Entry "throw" #f 289 20 289 25 ("raise" "exception")}
      {Lisp-Entry "throw-cancel" #f 293 27 293 39 ("Cancel-Signal" "new" "throw")}
      {Lisp-Entry "signal" #f 297 19 297 25 ("throw")}
      {Lisp-Entry "error" #f 300 20 300 25 ("format" "apply" "message:" "Error" "new" "signal" "rest")}
      {Lisp-Entry "Restart" #f 309 7 309 14 ()
        {Lisp-Entry "name" #f 312 8 312 12 ()}
        {Lisp-Entry "get-name" #f 312 23 312 31 ()}
        {Lisp-Entry "message" #f 313 8 313 15 ()}
        {Lisp-Entry "get-message" #f 313 23 313 31 ()}
        {Lisp-Entry "handler" #f 314 8 314 15 ()}
        {Lisp-Entry "get-handler" #f 314 23 314 31 ()}
        {Lisp-Entry "initialize" #f 317 11 317 21 ("handler~self" "message~self" "name~self" "set!" "nextmethod" "handler" "message" "name")}
        {Lisp-Entry "print" #f 324 11 324 16 ("name" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "current-restarts" #f 331 19 331 35 ("make-parameter")}
      {Lisp-Entry "with-restart-handler" #f 335 20 335 40 ("Restart" "new" "cons" "current-restarts" "parameterize" "thunk" "handler" "message" "name")}
      {Lisp-Entry "with-restart-catcher" #f 340 20 340 40 ("else" "car" "null?" "not" "cond" "continuation-return" "rest" "with-restart-handler" "catcher-cont" "function" "continuation-capture" "thunk" "catcher" "message" "name")}
      {Lisp-Entry "find-restart" #f 352 20 352 32 ("current-restarts" "get-name" "eq?" "restart" "function" "find-if" "name")}
      {Lisp-Entry "find-restarts" #f 358 20 358 33 ("current-restarts" "get-name" "eq?" "restart" "function" "collect-if" "name")}
      {Lisp-Entry "invoke-restart" #f 364 20 364 34 ("apply" "get-handler" "handler" "let" "rest" "restart")}
      {Lisp-Entry "new-system-thread" #f 374 20 374 37 ("with-system-exception-debugger" "function" "new-thread" "apply" "rest" "thunk")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "exception.scm"} 1250852530
    {Lisp-Entry "jazz.dialect.core.exception" #f 39 18 39 45 ()
      {Lisp-Entry "jazz.get-exception-hook" #f 47 9 47 32 ("##primordial-exception-handler-hook")}
      {Lisp-Entry "jazz.set-exception-hook" #f 50 9 50 32 ("##primordial-exception-handler-hook" "set!" "hook")}
      {Lisp-Entry "jazz.invoke-exception-hook" #f 54 9 54 35 ("##thread-end-with-uncaught-exception!" "exc" "hook")}
      {Lisp-Entry "jazz.system-exception-hook" #f 63 9 63 35 ("##repl-exception-handler-hook" "other" "exc")}
      {Lisp-Entry "jazz.set-terminal-title" #f 72 9 72 32 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.bring-terminal-to-front" #f 75 9 75 37 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.clear-terminal" #f 78 9 78 28 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.with-exception-filter" #f 87 9 87 35 ("%%continuation-graft" "filter-exc" "if" "exc" "with-exception-handler" "catcher-cont" "lambda" "%%continuation-capture" "current-exception-handler" "previous-handler" "let" "thunk" "catcher" "filter")}
      {Lisp-Entry "jazz.with-exception-propagater" #f 112 9 112 39 ("current-exception-handler" "let" "%%continuation-graft" "raise-cont" "exc" "with-exception-handler" "catcher-cont" "lambda" "%%continuation-capture" "thunk" "handler")}}})
"foreign"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "foreign.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.core.foreign" #f 37 18 37 43 ()
      {Lisp-Entry "jazz.foreign?" #f 42 12 42 25 ("foreign?")}
      {Lisp-Entry "jazz.foreign-address" #f 43 12 43 32 ("foreign-address")}
      {Lisp-Entry "jazz.foreign-release!" #f 44 12 44 33 ("foreign-release!")}
      {Lisp-Entry "jazz.foreign-released?" #f 45 12 45 34 ("foreign-released?")}
      {Lisp-Entry "jazz.foreign-tags" #f 46 12 46 29 ("foreign-tags")}
      {Lisp-Entry "jazz.still-obj-refcount-dec!" #f 51 13 51 41 ("%%still-obj-refcount-dec!" "foreign")}
      {Lisp-Entry "jazz.still-obj-refcount-inc!" #f 54 13 54 41 ("%%still-obj-refcount-inc!" "foreign")}}})
"format"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "format.jazz"} 1251729948
    {Lisp-Entry "jazz.dialect.language.format" #f 37 19 37 47 ("jazz.dialect")
      {Lisp-Entry "private" #f 47 8 47 15 ("jazz.error")}
      {Lisp-Entry "format" #f 68 20 68 26 ("with-printer" ":string" "':string" "string?" "parse-format" "cdr" "prog1" ":reader" "detail:" "empty-value:" "properties:" "3" "precision:" "after:" "before:" "last-separator:" "separator:" "padding:" "justify:" "width:" "list?:" "get-list?" "not-found:" "getf" "keyword" "keyword-parameter" ":v" "param" "default" ":right" ":left" "n" ">=" "cardinality" "size" "justify" "buffer" "get-padding" "padding" "get-justify" "justification" "get-width" "width" "proc" "localize" "'localize-directive" "unimplemented" "force-output" "-" "fresh-line" "newline" "do" "repeat" "loop" "1" "optional-parameter" "count" "cddr" "neq?" "memq" "cadr" "value" "car" "key" "not-null?" "scan" "get-empty-value" "empty-value" "get-properties" "properties" "print-list" "get-detail" "get-after" "after" "get-before" "before" "get-last-separator" "last-separator" "get-separator" "separator" "let*" "print-real" "get-precision" "precision" "print-hexadecimal" "print-binary" "print-unsigned" "print-expr" "detail" "textual" "write" "display" "function" "with-justification" "argument" "peek-argument" "next-argument" "or" "open-input-string" "subreader" "explicit?" "get-output-string" "begin" "open-output-string" "printer" "read-control-string" "process-conditional" "eqv?" "cond" "null?" "eq?" "read-delimited" "arguments-empty?" "toplevel?" "and" "localize-directive" "z" "force-directive" "!" "freshline-directive" "$" "newline-directive" "%" "tab-directive" "&" "column-directive" "_" "properties-directive" "k" "list-directive" "l" "real-directive" "r" "hexadecimal-directive" "x" "binary-directive" "b" "unsigned-directive" "u" "char-directive" "print-directive" "p" "text-directive" "t" "write-directive" "s" "display-directive" "a" "read-parameters" "parameters" "read" "directive" "else" "conditional-directive" "error" "peek-char" "write-char" "when" "require-char" "case" "set!" "eof-object?" "if" "read-char" "c" "not" "while" "done?" "let" "output?" "reader" "process" "arguments-scan" "control-reader" "out" "arguments" "control-string" "destination" "process-format" "define" "rest")}
      {Lisp-Entry "format-cardinality" #f 420 20 420 38 ("->string" "0" "=" "if" "n")}
      {Lisp-Entry "format-plural" #f 426 20 426 33 ("1" "=" "if" "plural" "n")}
      {Lisp-Entry "format-gender" #f 432 20 432 33 ("first" "vowel?" "if" "word")}
      {Lisp-Entry "format-is/are" #f 438 20 438 33 ("1" "=" "if" "n")}
      {Lisp-Entry "format-was/were" #f 444 20 444 35 ("1" "=" "if" "n")}
      {Lisp-Entry "format-y/ies" #f 450 20 450 32 ("1" "=" "if" "n")}
      {Lisp-Entry "format-following" #f 456 20 456 36 ("format" "1" "=" "if" "n" "name")}
      {Lisp-Entry "print-expr" #f 467 13 467 23 ("print" "current-output-port" "printer" "detail" "expr")}
      {Lisp-Entry "print-unsigned" #f 471 13 471 27 ("print-unsigned" "'print-unsigned" "unimplemented" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-binary" #f 475 13 475 25 ("2" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-hexadecimal" #f 479 13 479 30 ("16" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-real" #f 483 13 483 23 ("new-frac" ">" "and" "carry?" "dot-pos" "or" "if" "len" "string->number" "round" "temp-str" "last-part" "first-part" "else" "-" "make-string" "string-append" "<" "display" "=" "cond" "frac-len" "string-length" "1" "+" "frac-str" "0" "substring" "pre-str" "find" "dot-index" "exact->inexact" "number->string" "str" "let*" "current-output-port" "printer" "precision" "r")}
      {Lisp-Entry "print-list" #f 522 13 522 23 ("null?" "pair?" "if" "cdr" "next" "print" "car" "expr" "scan" "iter" "let" "display" "not-null?" "when" "current-output-port" "printer" "detail" "after" "before" "last-separator" "separator" "list")}}})
"functional"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "functional.jazz"} 1251729948
    {Lisp-Entry "jazz.dialect.language.functional" #f 37 19 37 51 ("set-element!" "get-start" "+" "subseq" "get-sequence" "element" "sequence" "Subseq$string$" "construct" "terminal-port" ":terminal" "register-printer" "axis-find-in" "axis-find" "axis-for-each" "size" "new-axis" "get-size" "axis" "get-content" "vector-length" "obj" "vector-set!" "vector" "vector-ref" "instantiate-ends-with?" "instantiate-starts-with?" "string-find-in" "instantiate-find-in" "string-find" "instantiate-find" "instantiate-butlast" "string-for-each" "instantiate-for-each" "end" "start" "substring" "string-length" "c" "string-set!" "string" "string-ref" "string=?" "length" "n" "list" "list-ref" "s2" "s1" "eq?" "jazz.dialect")
      {Lisp-Entry "private" #f 47 8 47 15 ("jazz.error")}
      {Lisp-Entry "private" #f 48 8 48 15 ("jazz.system-format")}
      {Lisp-Entry "Library" #f 56 7 56 14 ()
        {Lisp-Entry "name" #f 59 8 59 12 ()}
        {Lisp-Entry "get-name" #f 59 23 59 31 ()}
        {Lisp-Entry "exports" #f 60 8 60 15 ()}
        {Lisp-Entry "get-exports" #f 60 23 60 31 ()}}
      {Lisp-Entry "Type" #f 68 7 68 11 ()}
      {Lisp-Entry "Category" #f 76 7 76 15 ()
        {Lisp-Entry "name" #f 79 8 79 12 ()}
        {Lisp-Entry "get-name" #f 79 28 79 36 ()}
        {Lisp-Entry "fields" #f 80 8 80 14 ()}
        {Lisp-Entry "get-fields" #f 80 28 80 36 ()}
        {Lisp-Entry "virtual-size" #f 81 8 81 20 ()}
        {Lisp-Entry "get-virtual-size" #f 81 28 81 36 ()}
        {Lisp-Entry "ancestors" #f 82 8 82 17 ()}
        {Lisp-Entry "get-ancestors" #f 82 28 82 36 ()}
        {Lisp-Entry "descendants" #f 83 8 83 19 ()}
        {Lisp-Entry "get-descendants" #f 83 28 83 36 ()}
        {Lisp-Entry "print" #f 86 11 86 16 ("get-name" "system-format" "function" "self" "print-unreadable" "detail" "output")}}
      {Lisp-Entry "typed?" #f 92 20 92 26 ("class-of" "get-ancestors" "get-name" "eq?" "category" "function" "some?" "category-name" "obj")}
      {Lisp-Entry "Class" #f 103 7 103 12 ()
        {Lisp-Entry "ascendant" #f 106 8 106 17 ()}
        {Lisp-Entry "get-ascendant" #f 106 34 106 42 ()}
        {Lisp-Entry "interfaces" #f 107 8 107 18 ()}
        {Lisp-Entry "get-interfaces" #f 107 34 107 42 ()}
        {Lisp-Entry "slots" #f 108 8 108 13 ()}
        {Lisp-Entry "get-slots" #f 108 34 108 42 ()}
        {Lisp-Entry "instance-size" #f 109 8 109 21 ()}
        {Lisp-Entry "get-instance-size" #f 109 34 109 42 ()}
        {Lisp-Entry "level" #f 110 8 110 13 ()}
        {Lisp-Entry "get-level" #f 110 34 110 42 ()}
        {Lisp-Entry "dispatch-table" #f 111 8 111 22 ()}
        {Lisp-Entry "get-dispatch-table" #f 111 34 111 42 ()}
        {Lisp-Entry "core-method-alist" #f 112 8 112 25 ()}
        {Lisp-Entry "get-core-method-alist" #f 112 34 112 42 ()}
        {Lisp-Entry "core-virtual-alist" #f 113 8 113 26 ()}
        {Lisp-Entry "get-core-virtual-alist" #f 113 34 113 42 ()}
        {Lisp-Entry "core-virtual-names" #f 114 8 114 26 ()}
        {Lisp-Entry "get-core-virtual-names" #f 114 34 114 42 ()}
        {Lisp-Entry "core-vtable" #f 115 8 115 19 ()}
        {Lisp-Entry "get-core-vtable" #f 115 34 115 42 ()}
        {Lisp-Entry "class-table" #f 116 8 116 19 ()}
        {Lisp-Entry "get-class-table" #f 116 34 116 42 ()}
        {Lisp-Entry "interface-table" #f 117 8 117 23 ()}
        {Lisp-Entry "get-interface-table" #f 117 34 117 42 ()}
        {Lisp-Entry "coerce-object" #f 120 26 120 39 ("self" "type-name" "error" "obj")}
        {Lisp-Entry "external-name" #f 124 26 124 39 ("self" "type-name" "error" "when" "error?" "error?:")}}
      {Lisp-Entry "Object-Class" #f 129 7 129 19 ()}
      {Lisp-Entry "class?" #f 132 27 132 33 ("Class" "is?" "obj")}
      {Lisp-Entry "instance-of?" #f 136 27 136 39 ("class-of" "eq?" "class" "obj")}
      {Lisp-Entry "coerce" #f 140 27 140 33 ("coerce-object" "class" "object")}
      {Lisp-Entry "allocate" #f 144 20 144 28 ("call-into-abstract" "size" "class")}
      {Lisp-Entry "Interface" #f 153 7 153 16 ()
        {Lisp-Entry "ascendants" #f 156 8 156 18 ()}
        {Lisp-Entry "get-ascendants" #f 156 26 156 34 ()}
        {Lisp-Entry "rank" #f 157 8 157 12 ()}
        {Lisp-Entry "get-rank" #f 157 26 157 34 ()}}
      {Lisp-Entry "Field" #f 165 7 165 12 ()
        {Lisp-Entry "name" #f 168 8 168 12 ()}
        {Lisp-Entry "get-name" #f 168 20 168 28 ()}
        {Lisp-Entry "print" #f 171 11 171 16 ("get-name" "system-format" "function" "self" "print-unreadable" "detail" "output")}}
      {Lisp-Entry "category-field" #f 177 20 177 34 ("find-field" "field-name" "category")}
      {Lisp-Entry "all-slots" #f 181 20 181 29 ("get-slots" "model")}
      {Lisp-Entry "Method" #f 190 7 190 13 ()
        {Lisp-Entry "dispatch-type" #f 193 8 193 21 ()}
        {Lisp-Entry "get-dispatch-type" #f 193 35 193 43 ()}
        {Lisp-Entry "implementation" #f 194 8 194 22 ()}
        {Lisp-Entry "get-implementation" #f 194 35 194 43 ()}
        {Lisp-Entry "implementation-tree" #f 195 8 195 27 ()}
        {Lisp-Entry "get-implementation-tree" #f 195 35 195 43 ()}
        {Lisp-Entry "category-rank" #f 196 8 196 21 ()}
        {Lisp-Entry "get-category-rank" #f 196 35 196 43 ()}
        {Lisp-Entry "implementation-rank" #f 197 8 197 27 ()}
        {Lisp-Entry "get-implementation-rank" #f 197 35 197 43 ()}}
      {Lisp-Entry "object-method" #f 201 20 201 33 ("apply" "rest" "function" "class-of" "find-field" "get-implementation" "impl" "let" "name" "object")}
      {Lisp-Entry "Method-Node" #f 212 7 212 18 ()
        {Lisp-Entry "category" #f 215 8 215 16 ()}
        {Lisp-Entry "get-category" #f 215 35 215 43 ()}
        {Lisp-Entry "implementation" #f 216 8 216 22 ()}
        {Lisp-Entry "get-implementation" #f 216 35 216 43 ()}
        {Lisp-Entry "next-node" #f 217 8 217 17 ()}
        {Lisp-Entry "get-next-node" #f 217 35 217 43 ()}
        {Lisp-Entry "next-implementation" #f 218 8 218 27 ()}
        {Lisp-Entry "get-next-implementation" #f 218 35 218 43 ()}
        {Lisp-Entry "children" #f 219 8 219 16 ()}
        {Lisp-Entry "get-children" #f 219 35 219 43 ()}}
      {Lisp-Entry "Queue" #f 227 7 227 12 ()
        {Lisp-Entry "list" #f 230 8 230 12 ()}
        {Lisp-Entry "get-list" #f 230 27 230 35 ()}
        {Lisp-Entry "last-list" #f 231 8 231 17 ()}
        {Lisp-Entry "get-last-list" #f 231 27 231 35 ()}
        {Lisp-Entry "last-anchor" #f 232 8 232 19 ()}
        {Lisp-Entry "get-last-anchor" #f 232 27 232 35 ()}
        {Lisp-Entry "current" #f 233 8 233 15 ()}
        {Lisp-Entry "get-current" #f 233 27 233 35 ()}}
      {Lisp-Entry "Generic" #f 241 7 241 14 ()
        {Lisp-Entry "locator" #f 244 8 244 15 ()}
        {Lisp-Entry "get-locator" #f 244 36 244 44 ()}
        {Lisp-Entry "name" #f 245 8 245 12 ()}
        {Lisp-Entry "get-name" #f 245 36 245 44 ()}
        {Lisp-Entry "root-specific" #f 246 8 246 21 ()}
        {Lisp-Entry "get-root-specific" #f 246 36 246 44 ()}
        {Lisp-Entry "pending-specifics" #f 247 8 247 25 ()}
        {Lisp-Entry "get-pending-specifics" #f 247 36 247 44 ()}}
      {Lisp-Entry "Specific" #f 250 7 250 15 ()
        {Lisp-Entry "dynamic-signature" #f 253 8 253 25 ()}
        {Lisp-Entry "get-dynamic-signature" #f 253 36 253 44 ()}
        {Lisp-Entry "implementation" #f 254 8 254 22 ()}
        {Lisp-Entry "get-implementation" #f 254 36 254 44 ()}
        {Lisp-Entry "ancestor-specifics" #f 255 8 255 26 ()}
        {Lisp-Entry "get-ancestor-specifics" #f 255 36 255 44 ()}
        {Lisp-Entry "descendant-specifics" #f 256 8 256 28 ()}
        {Lisp-Entry "get-descendant-specifics" #f 256 36 256 44 ()}}
      {Lisp-Entry "Boolean-Class" #f 264 7 264 20 ()}
      {Lisp-Entry "Boolean" #f 267 17 267 24 ()
        {Lisp-Entry "initialize" #f 270 11 270 21 ("native-class" "rest")}}
      {Lisp-Entry "/=" #f 274 27 274 29 ("=" "not" "y" "x")}
      {Lisp-Entry "neq?" #f 278 27 278 31 ("eq?" "not" "y" "x")}
      {Lisp-Entry "xor" #f 282 27 282 30 ("not" "and" "or" "y" "x")}
      {Lisp-Entry "nu=?" #f 287 20 287 24 ("cdr" "else" "car" "neq?" "null?" "cond" "scan" "iter" "first" "let" ":equal" "compare" "eq?" "and" "rest" "m" "n")}
      {Lisp-Entry "nu/=?" #f 299 20 299 25 ("nu=?" "apply" "not" ":equal" "compare" "neq?" "null?" "if" "rest" "m" "n")}
      {Lisp-Entry "nu<?" #f 305 20 305 24 ("cdr" "car" "value" "null?" "if" "max" "scan" "iter" "let" "error" "else" ":equal" ":greater" ":less" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu<=?" #f 320 20 320 25 ("cdr" "car" "value" "null?" "if" "max" "scan" "iter" "let" "error" "else" ":greater" ":equal" ":less" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu>?" #f 335 20 335 24 ("cdr" "car" "value" "null?" "if" "min" "scan" "iter" "let" "error" "else" ":equal" ":less" ":greater" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu>=?" #f 350 20 350 25 ("cdr" "car" "value" "null?" "if" "min" "scan" "iter" "let" "error" "else" ":less" ":equal" ":greater" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "ci=?" #f 365 20 365 24 ("finally" "return" ":equal" "ci-compare" "neq?" "when" "cdr" "in" "object" "for" "loop" "car" "first" "let" "null?" "if" "rest")}
      {Lisp-Entry "ci/=?" #f 375 20 375 25 ("ci=?" "apply" "not" "rest")}
      {Lisp-Entry "ci<?" #f 379 20 379 24 ("error" "else" ":equal" ":greater" "cdr" ":less" "ci-compare" "case" "car" "value" "null?" "if" "max" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci<=?" #f 390 20 390 25 ("error" "else" ":greater" "cdr" ":equal" ":less" "ci-compare" "case" "car" "value" "null?" "if" "max" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci>?" #f 401 20 401 24 ("error" "else" ":equal" ":less" "cdr" ":greater" "ci-compare" "case" "car" "value" "null?" "if" "min" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci>=?" #f 412 20 412 25 ("error" "else" ":less" "cdr" ":equal" ":greater" "ci-compare" "case" "car" "value" "null?" "if" "min" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "boolean->integer" #f 423 27 423 43 ("0" "1" "if" "bool")}
      {Lisp-Entry "integer->boolean" #f 427 27 427 43 ("0" "/=" "n")}
      {Lisp-Entry "Whitespace-Chars" #f 436 19 436 35 ()}
      {Lisp-Entry "Uppercase-Chars" #f 439 19 439 34 ()}
      {Lisp-Entry "Lowercase-Chars" #f 442 19 442 34 ()}
      {Lisp-Entry "Alphabetic-Chars" #f 445 19 445 35 ("Lowercase-Chars" "Uppercase-Chars" "append")}
      {Lisp-Entry "Numeric-Chars" #f 448 19 448 32 ()}
      {Lisp-Entry "Uppercase-Lowerbound" #f 452 12 452 32 ("char->integer")}
      {Lisp-Entry "Uppercase-Upperbound" #f 455 12 455 32 ("char->integer")}
      {Lisp-Entry "Lowercase-Lowerbound" #f 458 12 458 32 ("char->integer")}
      {Lisp-Entry "Lowercase-Upperbound" #f 461 12 461 32 ("char->integer")}
      {Lisp-Entry "Numeric-Lowerbound" #f 464 12 464 30 ("char->integer")}
      {Lisp-Entry "Numeric-Upperbound" #f 467 12 467 30 ("char->integer")}
      {Lisp-Entry "Char-Class" #f 471 7 471 17 ()}
      {Lisp-Entry "Char" #f 474 17 474 21 ()
        {Lisp-Entry "initialize" #f 477 11 477 21 ("native-class" "rest")}
        {Lisp-Entry "coerce-string" #f 481 11 481 24 ("get-output-string" "self" "write-char" "open-output-string" "port" "let")}
        {Lisp-Entry "compare-object" #f 487 11 487 25 (":incompatible" ":less" "else" ":greater" ">" ":equal" "=" "cond" "v2" "self" "char->integer" "v1" "let" "Char" "is?" "if" "c")}
        {Lisp-Entry "ci-compare-object" #f 497 11 497 28 ("self" "downcase" "compare" "c")}
        {Lisp-Entry "object-similar?" #f 502 11 502 26 ("self" "char-similar?" "char?" "and" "object-similar?" "'object-similar?" "unimplemented" "object")}
        {Lisp-Entry "object-alphabetic?" #f 509 11 509 29 ("object-lower-case?" "object-upper-case?" "or")}
        {Lisp-Entry "object-numeric?" #f 514 11 514 26 ("Numeric-Upperbound" "<=" "Numeric-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-alphanumeric?" #f 520 11 520 31 ("object-numeric?" "object-alphabetic?" "or")}
        {Lisp-Entry "object-whitespace?" #f 525 11 525 29 ("self" "eqv?" "or")}
        {Lisp-Entry "object-upper-case?" #f 533 11 533 29 ("Uppercase-Upperbound" "<=" "Uppercase-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-lower-case?" #f 539 11 539 29 ("Lowercase-Upperbound" "<=" "Lowercase-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-upcase" #f 545 11 545 24 ("32" "char->integer" "-" "integer->char" "self" "lower-case?" "if")}
        {Lisp-Entry "object-downcase" #f 551 11 551 26 ("32" "char->integer" "+" "integer->char" "self" "upper-case?" "if")}
        {Lisp-Entry "object-capitalize" #f 557 11 557 28 ("object-upcase")}}
      {Lisp-Entry "whitechar?" #f 561 12 561 22 ("char-whitespace?")}
      {Lisp-Entry "char-presentation" #f 565 20 565 37 ("string" "char-symbol" "or" "char")}
      {Lisp-Entry "alphabetic?" #f 570 27 570 38 ("object-alphabetic?" "object")}
      {Lisp-Entry "numeric?" #f 574 27 574 35 ("object-numeric?" "object")}
      {Lisp-Entry "alphanumeric?" #f 578 27 578 40 ("object-alphanumeric?" "object")}
      {Lisp-Entry "whitespace?" #f 582 27 582 38 ("object-whitespace?" "object")}
      {Lisp-Entry "upper-case?" #f 586 27 586 38 ("object-upper-case?" "object")}
      {Lisp-Entry "lower-case?" #f 590 27 590 38 ("object-lower-case?" "object")}
      {Lisp-Entry "upcase" #f 594 27 594 33 ("object-upcase" "object")}
      {Lisp-Entry "downcase" #f 598 27 598 35 ("object-downcase" "object")}
      {Lisp-Entry "capitalize" #f 602 27 602 37 ("object-capitalize" "object")}
      {Lisp-Entry "vowel?" #f 606 20 606 26 ("downcase" "memv?" "c")}
      {Lisp-Entry "character-types" #f 610 12 610 27 ("symbol" "literal" "quasiquote" "backslash" "reference" "exprcomment" "comment" "unquote" "terminator" "list" "quote" "sharp" "string" "constituent" "whitespace" "invalid" "#")}
      {Lisp-Entry "character-type" #f 629 20 629 34 ("character-types" "vector-ref" "constituent" "'constituent" "127" ">" "if" "char->integer" "num" "let" "ascii-c")}
      {Lisp-Entry "word-constituent?" #f 636 20 636 37 ("memq?" "numeric?" "alphabetic?" "or" "c")}
      {Lisp-Entry "scheme-constituent?" #f 642 20 642 39 ("eqv?" "constituent" "'constituent" "character-type" "eq?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "jazz-constituent?" #f 649 20 649 37 ("eqv?" "constituent" "'constituent" "character-type" "eq?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "c-constituent?" #f 655 20 655 34 ("eqv?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "sql-constituent?" #f 660 20 660 36 ("eqv?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "Port-Class" #f 673 7 673 17 ()}
      {Lisp-Entry "Port" #f 676 17 676 21 ()
        {Lisp-Entry "initialize" #f 679 11 679 21 ("native-class" "rest")}
        {Lisp-Entry "destroy" #f 683 11 683 18 ("nextmethod" "self" "close-port")}}
      {Lisp-Entry "Symbol-Class" #f 693 7 693 19 ()}
      {Lisp-Entry "Symbol" #f 696 17 696 23 ()
        {Lisp-Entry "initialize" #f 699 11 699 21 ("native-class" "rest")}
        {Lisp-Entry "coerce-string" #f 703 11 703 24 ("self" "symbol->string")}
        {Lisp-Entry "compare-object" #f 707 11 707 25 (":incompatible" "self" "symbol->string" "compare" "symbol?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" #f 713 11 713 28 (":incompatible" "self" "symbol->string" "ci-compare" "symbol?" "if" "obj")}}
      {Lisp-Entry "generated-symbol?" #f 723 20 723 37 ("symbol->string" "starts-with?" "symbol")}
      {Lisp-Entry "symbol->keyword" #f 727 27 727 42 ("symbol->string" "string->keyword" "symbol")}
      {Lisp-Entry "keyword->symbol" #f 731 27 731 42 ("keyword->string" "string->symbol" "keyword")}
      {Lisp-Entry "find-symbol" #f 735 20 735 31 ("string->symbol" "str")}
      {Lisp-Entry "symbol-bound?" #f 740 20 740 33 ("rest" "name")}
      {Lisp-Entry "symbol-unbound?" #f 743 20 743 35 ("rest" "name")}
      {Lisp-Entry "Keyword-Class" #f 753 7 753 20 ()}
      {Lisp-Entry "Keyword" #f 756 17 756 24 ()
        {Lisp-Entry "initialize" #f 759 11 759 21 ("native-class" "rest")}}
      {Lisp-Entry "find-keyword" #f 763 20 763 32 ("specified?" "null?" "cdr" "cddr" "set-cdr!" "cadr" "set!" "begin" "eq?" "error" "car" "keyword?" "if" "elem" "not-null?" "unspecified?" "and" "while" "unspecified" "found" "unbox-list" "scan" "before" "let" "default" "box" "keyword")}
      {Lisp-Entry "box-list" #f 789 21 789 29 ("cons" "lst")}
      {Lisp-Entry "unbox-list" #f 793 21 793 31 ("cdr" "box")}
      {Lisp-Entry "Continuation-Class" #f 802 7 802 25 ()}
      {Lisp-Entry "Continuation" #f 805 17 805 29 ()}
      {Lisp-Entry "Procedure-Class" #f 813 7 813 22 ()}
      {Lisp-Entry "Procedure" #f 816 17 816 26 ()}
      {Lisp-Entry "Foreign-Class" #f 824 7 824 20 ()}
      {Lisp-Entry "Foreign" #f 827 17 827 24 ()}
      {Lisp-Entry "Numeric-Class" #f 835 7 835 20 ()}
      {Lisp-Entry "Numeric" #f 838 17 838 24 ()
        {Lisp-Entry "numeric-norm" #f 841 35 841 47 ()}
        {Lisp-Entry "numeric-add" #f 842 35 842 46 ("obj")}
        {Lisp-Entry "numeric-negate" #f 843 35 843 49 ()}
        {Lisp-Entry "numeric-multiply" #f 844 35 844 51 ("n")}
        {Lisp-Entry "numeric-inverse" #f 845 35 845 50 ()}}
      {Lisp-Entry "Number-Class" #f 853 7 853 19 ()}
      {Lisp-Entry "Number" #f 856 17 856 23 ()
        {Lisp-Entry "initialize" #f 859 11 859 21 ("native-class" "rest")}
        {Lisp-Entry "compare-object" #f 863 11 863 25 (":incompatible" ":greater" "else" ":less" "<" ":equal" "self" "=" "cond" "number?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" #f 871 11 871 28 ("compare-object" "obj")}
        {Lisp-Entry "numeric-norm" #f 875 11 875 23 ("self" "abs")}
        {Lisp-Entry "numeric-add" #f 879 11 879 22 ("error" "self" "+" "number?" "if" "obj")}
        {Lisp-Entry "numeric-negate" #f 885 11 885 25 ("self" "-")}
        {Lisp-Entry "numeric-multiply" #f 889 11 889 27 ("error" "self" "*" "number?" "if" "obj")}
        {Lisp-Entry "numeric-inverse" #f 895 11 895 26 ("self" "/")}}
      {Lisp-Entry "Complex-Class" #f 904 7 904 20 ()}
      {Lisp-Entry "Complex" #f 907 17 907 24 ()
        {Lisp-Entry "numeric-norm" #f 910 11 910 23 ("imag-part" "2" "self" "real-part" "expt" "+" "sqrt")}}
      {Lisp-Entry "Real-Class" #f 919 7 919 17 ()}
      {Lisp-Entry "Real" #f 922 17 922 21 ()}
      {Lisp-Entry "Rational-Class" #f 930 7 930 21 ()}
      {Lisp-Entry "Rational" #f 933 17 933 25 ()}
      {Lisp-Entry "Integer-Class" #f 941 7 941 20 ()}
      {Lisp-Entry "Integer" #f 944 17 944 24 ()}
      {Lisp-Entry "Fixnum-Class" #f 952 7 952 19 ()}
      {Lisp-Entry "Fixnum" #f 955 17 955 23 ()}
      {Lisp-Entry "Flonum-Class" #f 963 7 963 19 ()}
      {Lisp-Entry "Flonum" #f 966 17 966 23 ()}
      {Lisp-Entry "fl+" #f 971 27 971 30 ("##fl+" "y" "x")}
      {Lisp-Entry "fl-" #f 974 27 974 30 ("##fl-" "y" "x")}
      {Lisp-Entry "fl*" #f 977 27 977 30 ("##fl*" "y" "x")}
      {Lisp-Entry "fl/" #f 980 27 980 30 ("##fl/" "y" "x")}
      {Lisp-Entry "relate" #f 989 20 989 26 ("0" "else" "1" ">" "-1" "<" "cond" "y" "x")}
      {Lisp-Entry "sign" #f 995 20 995 24 ("0" "relate" "n")}
      {Lisp-Entry "nu+" #f 999 20 999 23 ("numeric-add" "cdr" "scan" "car" "result" "iter" "let" "0" "null?" "if" "rest")}
      {Lisp-Entry "nu-" #f 1008 20 1008 23 ("nu+" "apply" "r" "let" "numeric-negate" "null?" "if" "rest" "n")}
      {Lisp-Entry "nu*" #f 1015 20 1015 23 ("numeric-multiply" "cdr" "scan" "car" "result" "iter" "let" "1" "null?" "if" "rest")}
      {Lisp-Entry "nu/" #f 1024 20 1024 23 ("nu*" "apply" "r" "let" "numeric-inverse" "null?" "if" "rest" "n")}
      {Lisp-Entry "minimum" #f 1031 20 1031 27 ("cdr" "set!" ":less" "apply-key" "eq?" "when" "object" "function" "for-each" "car" "min" "let" "compare" "compare:" "key" "key:" "lst")}
      {Lisp-Entry "maximum" #f 1040 20 1040 27 ("cdr" "set!" ":greater" "apply-key" "eq?" "when" "object" "function" "for-each" "car" "max" "let" "compare" "compare:" "key" "key:" "lst")}
      {Lisp-Entry "between?" #f 1049 20 1049 28 ("<=" ">=" "not" "or" "and" "upper" "lower" "n")}
      {Lisp-Entry "between" #f 1054 20 1054 27 ("else" ">" "<" "cond" "upper" "n" "lower")}
      {Lisp-Entry "in-interval?" #f 1060 20 1060 32 ("<" ">=" "and" "upper" "lower" "n")}
      {Lisp-Entry "norm" #f 1064 27 1064 31 ("numeric-norm" "x")}
      {Lisp-Entry "distance" #f 1068 20 1068 28 ("nu-" "norm" "end" "start")}
      {Lisp-Entry "near?" #f 1072 20 1072 25 ("nu-" "norm" "<=" "distance" "y" "x")}
      {Lisp-Entry "contiguous-range" #f 1076 20 1076 36 ("cons" "cdr" "continuation-return" "set!" "1" "+" "=" "if" "n" "for-each" "second" "car" "first" "let*" "return" "function" "continuation-capture" "not-null?" "when" "lst")}
      {Lisp-Entry "naturals" #f 1090 20 1090 28 ("collect" "below" "from" "n" "for" "loop" "upper" "lower")}
      {Lisp-Entry "lobyte" #f 1095 20 1095 26 ("#xFF" "bitwise-and" "word")}
      {Lisp-Entry "hibyte" #f 1099 20 1099 26 ("-8" "arithmetic-shift" "lobyte" "word")}
      {Lisp-Entry "make-word" #f 1103 20 1103 29 ("8" "arithmetic-shift" "bitwise-ior" "hi" "lo")}
      {Lisp-Entry "lochar" #f 1107 20 1107 26 ("#xFF" "#x80" "+" "bitwise-and" "-" "word")}
      {Lisp-Entry "hichar" #f 1111 20 1111 26 ("-8" "arithmetic-shift" "lochar" "word")}
      {Lisp-Entry "make-int" #f 1115 20 1115 28 ("16" "arithmetic-shift" "bitwise-ior" "hi" "lo")}
      {Lisp-Entry "loword" #f 1119 20 1119 26 ("#xFFFF" "bitwise-and" "dword")}
      {Lisp-Entry "hiword" #f 1123 20 1123 26 ("-16" "arithmetic-shift" "loword" "dword")}
      {Lisp-Entry "signed-loword" #f 1127 20 1127 33 ("#xFFFF" "#x8000" "+" "bitwise-and" "-" "dword")}
      {Lisp-Entry "signed-hiword" #f 1131 20 1131 33 ("-16" "arithmetic-shift" "signed-loword" "dword")}
      {Lisp-Entry "sign-word" #f 1135 20 1135 29 ("#x10000" "-" "15" "bit-set?" "if" "word")}
      {Lisp-Entry "separate" #f 1141 20 1141 28 ("values" "*" "-" "r" "quotient" "q" "let*" "int2" "int1")}
      {Lisp-Entry "randomize" #f 1147 20 1147 29 ("default-random-source" "random-source-randomize!")}
      {Lisp-Entry "random" #f 1150 20 1150 26 ("random-integer" "n")}
      {Lisp-Entry "bit-set" #f 1154 20 1154 27 ("bitwise-not" "bitwise-and" "bitwise-ior" "if" "1" "arithmetic-shift" "msk" "let" "bit" "pos" "num")}
      {Lisp-Entry "mask-bit-set" #f 1161 20 1161 32 ("bitwise-not" "bitwise-and" "bitwise-ior" "if" "bit" "msk" "num")}
      {Lisp-Entry "mask-bit-set?" #f 1167 20 1167 33 ("0" "bitwise-and" "/=" "msk" "num")}
      {Lisp-Entry "bit-mask" #f 1171 20 1171 28 ("1" "arithmetic-shift" "-" "lo" "hi")}
      {Lisp-Entry "random-seed" #f 1175 20 1175 31 ("10000" "random" "randomize")}
      {Lisp-Entry "sqr" #f 1181 27 1181 30 ("2" "expt" "num")}
      {Lisp-Entry "percentage" #f 1185 27 1185 37 ("100." "/" "*" "total" "part")}
      {Lisp-Entry "percent" #f 1189 27 1189 34 ("100." "*" "/" "n" "percent")}
      {Lisp-Entry "fxfloor" #f 1193 27 1193 34 ("floor" "flonum->fixnum" "r")}
      {Lisp-Entry "fxceiling" #f 1196 27 1196 36 ("ceiling" "flonum->fixnum" "r")}
      {Lisp-Entry "fxtruncate" #f 1199 27 1199 37 ("truncate" "flonum->fixnum" "r")}
      {Lisp-Entry "fxround" #f 1202 27 1202 34 ("round" "flonum->fixnum" "r")}
      {Lisp-Entry "fxfloor/" #f 1208 27 1208 35 ("fl/" "fxfloor" "d" "n")}
      {Lisp-Entry "fxceiling/" #f 1211 27 1211 37 ("fl/" "fxceiling" "d" "n")}
      {Lisp-Entry "fxtruncate/" #f 1214 27 1214 38 ("fl/" "fxtruncate" "d" "n")}
      {Lisp-Entry "fxround/" #f 1217 27 1217 35 ("fl/" "fxround" "d" "n")}
      {Lisp-Entry "Iterator" #f 1226 15 1226 23 ("Empty" "initialize")
        {Lisp-Entry "Empty" #f 1229 14 1229 19 ("empty")}
        {Lisp-Entry "peeked" #f 1233 8 1233 14 ()}
        {Lisp-Entry "iterate-object" #f 1236 11 1236 25 ("self")}
        {Lisp-Entry "get-next" #f 1240 26 1240 34 ("next" "peek" "prog1")}
        {Lisp-Entry "peek" #f 1245 26 1245 30 ("next" "set!" "Empty" "peeked" "eq?" "when")}
        {Lisp-Entry "unget" #f 1251 26 1251 31 ("error" "set!" "Empty" "peeked" "eq?" "if" "object")}
        {Lisp-Entry "next" #f 1257 26 1257 30 ("get-next!" "else" "set!" "prog1" "Empty" "neq?" "peeked" "eof-object?" "cond")}
        {Lisp-Entry "done?" #f 1267 26 1267 31 ("peek" "eof-object?")}
        {Lisp-Entry "get-next!" #f 1271 26 1271 35 ()}
        {Lisp-Entry "put" #f 1275 26 1275 29 ("error" "object")}
        {Lisp-Entry "get-position" #f 1279 26 1279 38 ("self" "error")}
        {Lisp-Entry "set-position" #f 1283 26 1283 38 ("self" "error" "pos")}
        {Lisp-Entry "get-state" #f 1287 26 1287 35 ()}
        {Lisp-Entry "reset-state" #f 1291 26 1291 37 ("old")}}
      {Lisp-Entry "iterate-sequence" #f 1295 27 1295 43 ("iterate-object" "obj")}
      {Lisp-Entry "Explorer" #f 1304 15 1304 23 ("forward" "'forward" "initialize")
        {Lisp-Entry "direction" #f 1307 8 1307 17 ()}
        {Lisp-Entry "peek-forward" #f 1310 29 1310 41 ("error")}
        {Lisp-Entry "peek-backward" #f 1314 29 1314 42 ("error")}
        {Lisp-Entry "peek" #f 1318 11 1318 15 ("peek-backward" "backward" "peek-forward" "forward" "direction" "case" "eof-object" "done?" "if")}
        {Lisp-Entry "goto-beginning" #f 1326 26 1326 40 ("error")}
        {Lisp-Entry "goto-end" #f 1330 26 1330 34 ("error")}
        {Lisp-Entry "forward" #f 1334 26 1334 33 ("error")}
        {Lisp-Entry "backward" #f 1338 26 1338 34 ("error")}
        {Lisp-Entry "next" #f 1342 11 1342 15 ("backward" "forward" "direction" "case" "done?" "not" "when")}
        {Lisp-Entry "done-forward?" #f 1349 29 1349 42 ("error")}
        {Lisp-Entry "done-backward?" #f 1353 29 1353 43 ("error")}
        {Lisp-Entry "done?" #f 1357 11 1357 16 ("done-backward?" "backward" "done-forward?" "forward" "direction" "case")}
        {Lisp-Entry "put-forward" #f 1363 29 1363 40 ("error" "object")}
        {Lisp-Entry "put-backward" #f 1367 29 1367 41 ("error" "object")}
        {Lisp-Entry "put" #f 1371 11 1371 14 ("put-backward" "backward" "put-forward" "forward" "direction" "case" "object")}
        {Lisp-Entry "set-direction" #f 1377 18 1377 31 ("direction" "set!" "dir")}}
      {Lisp-Entry "explore" #f 1381 20 1381 27 ("Sequence-Explorer" "new" "apply" "rest" "object")}
      {Lisp-Entry "Sequence-Class" #f 1391 7 1391 21 ()
        {Lisp-Entry "allocate-sequence" #f 1394 35 1394 52 ("len")}
        {Lisp-Entry "coerce-object" #f 1397 11 1397 24 ("element" "set-element!" "below" "0" "from" "n" "for" "loop" "allocate-sequence" "new-sequence" "cardinality" "len" "let" "seq")}}
      {Lisp-Entry "Sequence" #f 1406 17 1406 25 ()
        {Lisp-Entry "compare-object" #f 1409 11 1409 25 (":incompatible" "1" "+" "neq?" "element" "compare" "cmp" ":less" "else" ":greater" ">" ":equal" "=" "cond" ">=" "or" "0" "i" "iter" "l2" "self" "cardinality" "l1" "let" "Sequence" "is?" "if" "seq")}
        {Lisp-Entry "copy-object" #f 1425 11 1425 22 ("1" "+" "element" "set-element!" "begin" "=" "0" "i" "iter" "let" "class-of" "allocate-sequence" "new-seq" "self" "cardinality" "len" "identity" "x" "function" "if" "subcopy" "let*" "deep?")}
        {Lisp-Entry "iterate-object" #f 1437 11 1437 25 ("self" "Sequence-Explorer" "new")}
        {Lisp-Entry "object-alphabetic?" #f 1441 11 1441 29 ("self" "alphabetic?" "every?")}
        {Lisp-Entry "object-numeric?" #f 1445 11 1445 26 ("self" "numeric?" "every?")}
        {Lisp-Entry "object-alphanumeric?" #f 1449 11 1449 31 ("self" "alphanumeric?" "every?")}
        {Lisp-Entry "object-whitespace?" #f 1453 11 1453 29 ("self" "whitespace?" "every?")}
        {Lisp-Entry "object-upper-case?" #f 1457 11 1457 29 ("self" "upper-case?" "every?")}
        {Lisp-Entry "object-lower-case?" #f 1461 11 1461 29 ("self" "lower-case?" "every?")}
        {Lisp-Entry "object-upcase" #f 1465 11 1465 24 ("class-of" "upcase" "self" "accumulate")}
        {Lisp-Entry "object-downcase" #f 1469 11 1469 26 ("class-of" "downcase" "self" "accumulate")}
        {Lisp-Entry "object-capitalize" #f 1473 11 1473 28 ("class-of" "upcase" "set!" "not" "alphanumeric?" "if" "object" "function" "self" "accumulate" "break?" "let")}
        {Lisp-Entry "sequence-element" #f 1487 38 1487 54 ("n")}
        {Lisp-Entry "sequence-set-element!" #f 1490 38 1490 59 ("obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 1493 38 1493 58 ()}
        {Lisp-Entry "sequence-tail" #f 1496 38 1496 51 ("start")}
        {Lisp-Entry "sequence-last" #f 1499 38 1499 51 ()}
        {Lisp-Entry "sequence-butlast" #f 1502 38 1502 54 ()}
        {Lisp-Entry "sequence-subseq!" #f 1505 29 1505 45 ("cardinality" "-" "Subseq" "new" "self" "-1" "0" "=" "and" "if" "end" "start")}
        {Lisp-Entry "sequence-replace-subseq!" #f 1511 29 1511 53 ("cardinality" "0" "self" "subseq" "concatenate!" "replacement" "end" "start")}}
      {Lisp-Entry "sequence?" #f 1517 27 1517 36 ("Sequence" "is?" "obj")}
      {Lisp-Entry "element" #f 1521 27 1521 34 ("sequence-element" "n" "seq")}
      {Lisp-Entry "set-element!" #f 1525 27 1525 39 ("sequence-set-element!" "obj" "n" "seq")}
      {Lisp-Entry "cardinality" #f 1529 27 1529 38 ("sequence-cardinality" "seq")}
      {Lisp-Entry "empty?" #f 1533 27 1533 33 ("cardinality" "0" "=" "seq")}
      {Lisp-Entry "tail" #f 1537 27 1537 31 ("sequence-tail" "start" "seq")}
      {Lisp-Entry "last" #f 1541 27 1541 31 ("sequence-last" "seq")}
      {Lisp-Entry "butlast" #f 1545 27 1545 34 ("sequence-butlast" "seq")}
      {Lisp-Entry "skip-whitespace" #f 1549 20 1549 35 ("else" "1" "+" "element" "eq?" "cardinality" "=" "cond" "0" "either" "i" "iter" "let" "start" "start:" "seq")}
      {Lisp-Entry "subseq" #f 1556 20 1556 26 ("1" "+" "set!" "element" "set-element!" "<" "while" "j" "0" "i" "allocate-sequence" "sub" "class-of" "cls" "cardinality" "either" "-" "len" "let*" "type" "end" "start" "seq")}
      {Lisp-Entry "replace-subseq!" #f 1569 27 1569 42 ("sequence-replace-subseq!" "replacement" "end" "start" "seq")}
      {Lisp-Entry "subseq!" #f 1573 20 1573 27 ("sequence-subseq!" "cardinality" "end" "start" "seq")}
      {Lisp-Entry "sort" #f 1577 20 1577 24 ("class-of" "List" "sort" "coerce" "null/pair?" "let*" "cddr" "or" "split" "cdr" "cons" "apply-key" "if" "e2" "car" "e1" "let" "else" "null?" "cond" "l2" "l1" "merge" "merge-sort" "smaller" "l" "sort-list" "define" "key" "key:" "seq" "test")}
      {Lisp-Entry "first" #f 1608 27 1608 32 ("0" "element" "seq")}
      {Lisp-Entry "second" #f 1609 27 1609 33 ("1" "element" "seq")}
      {Lisp-Entry "third" #f 1610 27 1610 32 ("2" "element" "seq")}
      {Lisp-Entry "fourth" #f 1611 27 1611 33 ("3" "element" "seq")}
      {Lisp-Entry "fifth" #f 1612 27 1612 32 ("4" "element" "seq")}
      {Lisp-Entry "sixth" #f 1613 27 1613 32 ("5" "element" "seq")}
      {Lisp-Entry "seventh" #f 1614 27 1614 34 ("6" "element" "seq")}
      {Lisp-Entry "eighth" #f 1615 27 1615 33 ("7" "element" "seq")}
      {Lisp-Entry "ninth" #f 1616 27 1616 32 ("8" "element" "seq")}
      {Lisp-Entry "tenth" #f 1617 27 1617 32 ("9" "element" "seq")}
      {Lisp-Entry "set-first!" #f 1619 27 1619 37 ("0" "set-element!" "value" "seq")}
      {Lisp-Entry "set-second!" #f 1620 27 1620 38 ("1" "set-element!" "value" "seq")}
      {Lisp-Entry "set-third!" #f 1621 27 1621 37 ("2" "set-element!" "value" "seq")}
      {Lisp-Entry "set-fourth!" #f 1622 27 1622 38 ("3" "set-element!" "value" "seq")}
      {Lisp-Entry "set-fifth!" #f 1623 27 1623 37 ("4" "set-element!" "value" "seq")}
      {Lisp-Entry "set-sixth!" #f 1624 27 1624 37 ("5" "set-element!" "value" "seq")}
      {Lisp-Entry "set-seventh!" #f 1625 27 1625 39 ("6" "set-element!" "value" "seq")}
      {Lisp-Entry "set-eighth!" #f 1626 27 1626 38 ("7" "set-element!" "value" "seq")}
      {Lisp-Entry "set-ninth!" #f 1627 27 1627 37 ("8" "set-element!" "value" "seq")}
      {Lisp-Entry "set-tenth!" #f 1628 27 1628 37 ("9" "set-element!" "value" "seq")}
      {Lisp-Entry "element-reversed" #f 1631 27 1631 43 ("1" "cardinality" "-" "element" "n" "seq")}
      {Lisp-Entry "iterate" #f 1635 20 1635 27 ("in-sequence" "obj" "for" "loop" "proc" "seq")}
      {Lisp-Entry "accumulate" #f 1640 20 1640 30 ("coerce" "not" "if" "collect" "in-sequence" "obj" "for" "loop" "lst" "let" "type" "proc" "seq")}
      {Lisp-Entry "apply-key" #f 1649 28 1649 37 ("not" "if" "object" "key")}
      {Lisp-Entry "apply-test" #f 1655 28 1655 38 ("eqv?" "not" "if" "y" "x" "test")}
      {Lisp-Entry "gather" #f 1661 20 1661 26 ("collect" "in-sequence" "obj" "for" "loop" "coerce" "List" "type" "type:" "iterable")}
      {Lisp-Entry "collect" #f 1667 20 1667 27 ("class-of" "either" "collect" "when" "apply-key" "val" "with" "in-sequence" "obj" "for" "loop" "coerce" "type" "type:" "key" "key:" "seq" "proc")}
      {Lisp-Entry "collect-if" #f 1675 20 1675 30 ("class-of" "collect" "apply-key" "when" "in-sequence" "obj" "for" "loop" "coerce" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "collect-type" #f 1682 20 1682 32 ("class-of" "collect" "apply-key" "is?" "when" "in-sequence" "obj" "for" "loop" "coerce" "key" "key:" "seq" "type")}
      {Lisp-Entry "collect-sections" #f 1689 20 1689 36 ("reset" "get-output" "put" "begin" "apply-test" "if" "value" "function" "for-each" "section" "List-Factory" "new" "sections" "let" "test" "test:" "separator" "separator:" "lst")}
      {Lisp-Entry "count" #f 1703 20 1703 25 ("increase!" "apply-key" "apply-test" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "test" "test:" "key" "key:" "seq" "target")}
      {Lisp-Entry "count-if" #f 1711 20 1711 28 ("increase!" "apply-key" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "count-type" #f 1719 20 1719 30 ("increase!" "apply-key" "is?" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "key" "key:" "seq" "type")}
      {Lisp-Entry "find" #f 1727 20 1727 24 ("1" "-" "get-position" "continuation-return" "apply-key" "apply-test" "object" "iterate" "exit" "function" "continuation-capture" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "0" "either" "list-find" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "target" "seq")}
      {Lisp-Entry "list-find" #f 1742 13 1742 22 ("1" "+" "cdr" "else" "car" "null?" "cond" "rank" "tail" "rest" "iter" "eqv?" "x" "function" "not" "if" "let" "start" "test" "key" "target" "list")}
      {Lisp-Entry "find-in" #f 1753 20 1753 27 ("continuation-return" "apply-key" "apply-test" "object" "iterate" "exit" "function" "continuation-capture" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "0" "either" "list-find-in" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "target" "seq")}
      {Lisp-Entry "list-find-in" #f 1768 13 1768 25 ("1" "+" "cdr" "else" "car" "null?" "cond" "rank" "tail" "rest" "iter" "eqv?" "x" "function" "not" "if" "let" "start" "test" "key" "target" "list")}
      {Lisp-Entry "find-balanced" #f 1779 20 1779 33 ("error" "else" "1" "-" "get-position" "position" "continuation-return" "case" "<" "decrease!" "increase!" "apply-key" "apply-test" "cond" "object" "iterate" "exit" "function" "continuation-capture" "set-position" "when" "0" "count" "iterate-sequence" "backward" "'backward" "direction:" "explore" "if" "iterator" "let" "item" "'item" "return" "return:" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "seq" "close" "open")}
      {Lisp-Entry "find-if" #f 1800 20 1800 27 ("error" "else" "1" "-" "get-position" "position" "continuation-return" "case" "apply-key" "object" "iterate" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "exit" "function" "continuation-capture" "0" "either" "find-if-list" "not" "null/pair?" "and" "if" "item" "'item" "return" "return:" "reversed?" "reversed?:" "start" "start:" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "get-rank" #f 1818 20 1818 28 ("1" "-" "get-position" "continuation-return" "apply-key" "apply-test" "object" "iterate" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "exit" "function" "continuation-capture" "string-find" "string?" "0" "either" "list-find" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "seq" "target")}
      {Lisp-Entry "skip" #f 1835 20 1835 24 ("1" "get-position" "-" "continuation-return" "apply-key" "not" "when" "object" "iterate" "set-position" "iterate-sequence" "iterator" "let" "return" "function" "continuation-capture" "0" "start" "start:" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "some?" #f 1847 20 1847 25 ("continuation-return" "apply-key" "when" "object" "iterate-sequence" "iterate" "return" "function" "continuation-capture" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "every?" #f 1857 20 1857 26 ("continuation-return" "apply-key" "not" "when" "object" "iterate-sequence" "iterate" "return" "function" "continuation-capture" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "concatenate" #f 1867 20 1867 31 ("class-of" "coerce" "not" "get-output" "output" "put-sequence" "sequence" "function" "for-each" "null/pair?" "list?" "car" "first" "let*" "List-Factory" "new" "fact" "let" "null?" "if" "rest")}
      {Lisp-Entry "concatenate!" #f 1882 20 1882 32 ("concatenate" "apply" "rest")}
      {Lisp-Entry "subset?" #f 1886 20 1886 27 ("memv?" "element" "function" "every?" "null?" "or" "set2" "set1")}
      {Lisp-Entry "union" #f 1893 20 1893 25 ("apply-union" "rest")}
      {Lisp-Entry "apply-union" #f 1897 20 1897 31 ("class-of" "coerce" "cdr" "put" "get-output" "member?" "not" "when" "object" "iterate-sequence" "iterate" "set" "function" "for-each" "put-sequence" "List-Factory" "new" "dst" "car" "first" "let" "null?" "if" "test" "test:" "lst")}
      {Lisp-Entry "intersection" #f 1912 20 1912 32 ("cons" "apply-intersection" "rest" "first")}
      {Lisp-Entry "apply-intersection" #f 1916 20 1916 38 ("class-of" "get-output" "coerce" "put" "member?" "set" "every?" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "cdr" "car" "first" "let" "null?" "if" "test" "test:" "lst")}
      {Lisp-Entry "difference" #f 1931 20 1931 30 ("class-of" "get-output" "coerce" "put" "member?" "not" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "null?" "if" "eqv?" "test" "test:" "y" "x")}
      {Lisp-Entry "set-xor" #f 1942 20 1942 27 ("difference" "union" "eqv?" "test" "test:" "y" "x")}
      {Lisp-Entry "remove" #f 1947 20 1947 26 ("class-of" "get-output" "coerce" "put" "apply-test" "not" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "eqv?" "test" "test:" "seq" "target")}
      {Lisp-Entry "string-remove" #f 1956 15 1956 28 ()}
      {Lisp-Entry "remove" #f 1956 30 1956 36 ("get-output-string" "write-char" "eqv?" "not" "when" "element" "c" "cardinality" "below" "0" "from" "n" "for" "loop" "open-output-string" "output" "let" "str" "target")}
      {Lisp-Entry "remove-trailing" #f 1965 20 1965 35 ("reverse" "cons" "set!" "apply-test" "and" "unless" "element" "function" "for-each" "trailing?" "result" "let" "eqv?" "test" "test:" "list" "target")}
      {Lisp-Entry "remove-enclosing" #f 1976 20 1976 36 ("subseq" "decrease!" "1" "-" ">" "increase!" "element" "apply-test" "<" "and" "while" "tail" "head" "cardinality" "end" "0" "start" "let*" "eqv?" "test" "test:" "seq" "target")}
      {Lisp-Entry "remove-duplicates" #f 1988 20 1988 37 ("class-of" "coerce" "put" "get-output" "apply-key" "member?" "not" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "eqv?" "test" "test:" "key" "key:" "seq")}
      {Lisp-Entry "remove-nils" #f 1997 20 1997 31 ("identity" "collect-if" "seq")}
      {Lisp-Entry "remove-empty-strings" #f 2001 20 2001 40 ("empty-string?" "not" "obj" "function" "collect-if" "seq")}
      {Lisp-Entry "trim-spaces" #f 2007 20 2007 31 ("remove-enclosing" "seq")}
      {Lisp-Entry "trim-whitespace" #f 2011 20 2011 35 ("whitespace?" "ignore" "c" "function" "test:" "remove-enclosing" "seq")}
      {Lisp-Entry "mismatch" #f 2017 20 2017 28 ("if" "increase!" "continuation-return" "get-next" "or" "when" "done?" "not" "while" "0" "pos" "targ" "iterate-sequence" "srce" "let" "return" "function" "continuation-capture" "equal?" "test" "test:" "seq" "target")}
      {Lisp-Entry "prefix" #f 2032 20 2032 26 ("0" "subseq" "cdr" "set!" "<" "not" "or" "and" "when" "mismatch" "n" "object" "function" "for-each" "min" "car" "ref" "let" "null?" "if" "equal?" "test" "test:" "sequences")}
      {Lisp-Entry "prefix?" #f 2047 20 2047 27 ("continuation-return" "get-next" "nu/=?" "when" "done?" "not" "and" "while" "iter" "iterate-sequence" "targ" "let" "return" "function" "continuation-capture" "seq" "target")}
      {Lisp-Entry "Search-Context" #f 2058 15 2058 29 ()
        {Lisp-Entry "target" #f 2061 8 2061 14 ()}
        {Lisp-Entry "get-target" #f 2061 48 2061 56 ()}
        {Lisp-Entry "set-target" #f 2061 48 2061 56 ()}
        {Lisp-Entry "whole-words?" #f 2062 8 2062 20 ()}
        {Lisp-Entry "get-whole-words?" #f 2062 48 2062 56 ()}
        {Lisp-Entry "set-whole-words?" #f 2062 48 2062 56 ()}
        {Lisp-Entry "ignore-case?" #f 2063 8 2063 20 ()}
        {Lisp-Entry "get-ignore-case?" #f 2063 48 2063 56 ()}
        {Lisp-Entry "set-ignore-case?" #f 2063 48 2063 56 ()}
        {Lisp-Entry "constituent-test" #f 2064 8 2064 24 ()}
        {Lisp-Entry "get-constituent-test" #f 2064 48 2064 56 ()}
        {Lisp-Entry "set-constituent-test" #f 2064 48 2064 56 ()}
        {Lisp-Entry "user-data" #f 2065 8 2065 17 ()}
        {Lisp-Entry "get-user-data" #f 2065 48 2065 56 ()}
        {Lisp-Entry "set-user-data" #f 2065 48 2065 56 ()}}
      {Lisp-Entry "construct-search-context" #f 2068 20 2068 44 ("Search-Context" "construct" "user-data" "constituent-test" "ignore-case?" "whole-words?" "target")}
      {Lisp-Entry "make-search-context" #f 2072 20 2072 39 ("construct-search-context" "user-data" "user-data:" "constituent-test" "constituent-test:" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "target")}
      {Lisp-Entry "standardize-search-contexts" #f 2080 20 2080 47 ("list" "map" "null/pair?" "if" "error" "else" "make-search-context" "string?" "Search-Context" "is?" "cond" "standardize-context" "define" "obj")}
      {Lisp-Entry "multisearch-impl" #f 2091 13 2091 29 (">" "cons" "cdr" "found" "last" "find-forward" "<=" "find-backward" "eqv?" "c" "<" "after" "before" "and" "match?" "+" "else" "element" "not" ">=" "cond" "j" "i" "iter" "1" "-" "to" "match-case?" "define" "size" "char=?" "char-ci=?" "test" "word-constituent?" "get-constituent-test" "or" "get-ignore-case?" "ignore-case?" "get-whole-words?" "whole-words?" "get-target" "target" "car" "context" "null?" "best" "scan" "iterate" "0" "if" "either" "pos" "cardinality" "len" "let" "reversed?" "start" "constituent-test" "contexts" "seq")}
      {Lisp-Entry "multisearch" #f 2164 20 2164 31 ("multisearch-impl" "reversed?" "reversed?:" "start" "start:" "constituent-test" "constituent-test:" "contexts" "seq")}
      {Lisp-Entry "multisearch-all" #f 2171 20 2171 35 ("queue-list" "car" "get-target" "+" "cdr" "enqueue" "begin" "multisearch-impl" "found" "0" "if" "either" "pos" "iter" "new-queue" "queue" "cardinality" "len" "let" "reversed?" "reversed?:" "start" "start:" "constituent-test" "constituent-test:" "contexts" "seq")}
      {Lisp-Entry "search" #f 2188 20 2188 26 ("cdr" "if" "construct-search-context" "list" "multisearch-impl" "found" "let" "constituent-test" "constituent-test:" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "reversed?" "reversed?:" "start" "start:" "target" "seq")}
      {Lisp-Entry "search-all" #f 2200 20 2200 30 ("construct-search-context" "list" "multisearch-all" "cdr" "map" "constituent-test" "constituent-test:" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "reversed?" "reversed?:" "start" "start:" "target" "seq")}
      {Lisp-Entry "split" #f 2211 20 2211 25 ("when" "search" "iterate" "incr" "else" "get-output" "1" "+" "subseq" "put" "set!" "if" "position" "'position" "return:" "start:" "find-if" "pos" "not" "while" "done?" "List-Factory" "new" "result" "0" "previous" "let" "procedure?" "list" "cardinality" "zero?" "cond" "separator" "seq")}
      {Lisp-Entry "split-justified" #f 2240 20 2240 35 ("get-output" "increase!" "+" "set!" "subseq" "put" "begin" "<=" "if" "-" "effective-width" "not" "while" "done?" "List-Factory" "new" "result" "cardinality" "size" "pos" "let" "0" "column" "column:" "separators" "width" "seq")}
      {Lisp-Entry "join" #f 2257 20 2257 24 ("get-output" "concatenate" "apply" "seq" "function" "for-each" "put" "List-Factory" "new" "dst" "join-strings" "string?" "if" "first" "let" "else" "car" "cdr" "null?" "cond" "separator" "sequences")}
      {Lisp-Entry "inject" #f 2276 20 2276 26 ("get-output" "put" "put-sequence" "set!" "if" "element" "function" "for-each" "first?" "List-Factory" "new" "fact" "let" "inserted" "sequence")}
      {Lisp-Entry "substitute" #f 2288 20 2288 30 ("class-of" "get-output" "coerce" "put-sequence" "put" "apply-key" "apply-test" "if" "get-next" "object" "done?" "not" "while" "List-Factory" "new" "dst" "iterate-sequence" "src" "let" "sequence?" "sequence?:" "test" "test:" "key" "key:" "seq" "new-value" "old-value")}
      {Lisp-Entry "substitute-alist" #f 2301 20 2301 36 ("class-of" "get-output" "coerce" "put" "set!" "put-sequence" "apply-key" "apply-test" "when" "old" "bind" "unless" "replacement" "function" "for-each" "found?" "get-next" "object" "done?" "not" "while" "List-Factory" "new" "dst" "iterate-sequence" "src" "let" "test" "test:" "key" "key:" "seq" "replacements")}
      {Lisp-Entry "fill!" #f 2319 20 2319 25 ("next" "put" "done?" "not" "while" "set-position" "when" "iterate-sequence" "src" "let" "start" "start:" "object" "seq")}
      {Lisp-Entry "replace!" #f 2329 20 2329 28 ("next" "get-next" "put" "done?" "not" "and" "while" "set-position" "when" "rep" "iterate-sequence" "src" "let" "start" "start:" "replacement" "seq")}
      {Lisp-Entry "ordered-position" #f 2340 20 2340 36 ("find" "<=" "test" "test:" "key" "key:" "seq" "object")}
      {Lisp-Entry "insert-ordered!" #f 2344 20 2344 35 ("cardinality" "either" "insert!" "ordered-position" "n" "let" "<=" "test" "test:" "key" "key:" "seq" "object")}
      {Lisp-Entry "merge-ordered" #f 2349 20 2349 33 ("get-next" "expr" "error" "else" ":right" ":greater" ":left" ":less" "next" ":same" ":equal" "case" "ky" "apply-key" "kx" "ey" "peek" "ex" "let*" "done?" "not" "and" "while" "compare" "ci-compare" "if" "either" "compare-proc" "iy" "iterate-sequence" "ix" "let" "case-insensitive?" "case-insensitive?:" "test" "test:" "right-key" "right-key:" "left-key" "left-key:" "key" "key:" "y" "x" "proc")}
      {Lisp-Entry "merge" #f 2375 20 2375 25 ("get-output" "cdr" "set-car!" "put" ":equal" "neq?" "not" "or" "if" "object" "list" "pair" "function" "for-each-pair" "List-Factory" "new" "res" "apply-key" "min-key" ":compare" "remove-nils" "car" "map" "minimum" "min" "let*" "identity" "some?" "while" "copy" "scan" "let" "compare" "compare:" "key" "key:" "lists" "proc")}
      {Lisp-Entry "random-element" #f 2393 20 2393 34 ("cardinality" "random" "element" "seq")}
      {Lisp-Entry "partition" #f 2397 20 2397 29 ("elements" "bind" "partition" "map" "reverse!" "cdr" "set-cdr!" "list" "cons" "set!" "not" "if" "associate" "pair" "category" "let*" "element" "function" "for-each" "result" "let" "test" "test:" "identity" "key" "key:" "sequence")}
      {Lisp-Entry "partition-binary" #f 2412 20 2412 36 ("values" "cons" "set!" "if" "elem" "function" "for-each" "no" "yes" "let" "predicate" "lst")}
      {Lisp-Entry "starts-with?" #f 2423 20 2423 32 ("0" "subseq" ">=" "and" "string=?" "string-ci=?" "if" "test" "tl" "cardinality" "sl" "let" "ignore-case?" "ignore-case?:" "target" "seq")}
      {Lisp-Entry "ends-with?" #f 2433 20 2433 30 ("-" "subseq" ">=" "and" "string=?" "string-ci=?" "if" "test" "tl" "cardinality" "sl" "let" "ignore-case?" "ignore-case?:" "target" "seq")}
      {Lisp-Entry "for-each-reversed" #f 2443 20 2443 37 ("car" "cdr" "pair?" "when" "iterate" "let" "lst" "proc")}
      {Lisp-Entry "find-if-list" #f 2450 13 2450 25 ("1" "+" "cdr" "error" "else" "item" "'item" "position" "'position" "eq?" "car" "null?" "cond" "rank" "tail" "rest" "iter" "x" "function" "not" "if" "let" "returned" "start" "key" "list" "predicate")}
      {Lisp-Entry "insert-sequence!" #f 2462 27 2462 43 ("replace-subseq!" "seq" "pos" "sequence")}
      {Lisp-Entry "Sequence-Explorer" #f 2471 15 2471 32 ()
        {Lisp-Entry "sequence" #f 2474 8 2474 16 ()}
        {Lisp-Entry "sequence-cardinality" #f 2475 8 2475 28 ()}
        {Lisp-Entry "current" #f 2476 8 2476 15 ()}
        {Lisp-Entry "initialize" #f 2479 11 2479 21 ("current" "goto-end" "backward" "goto-beginning" "case" "not" "if" "set-direction" "cardinality" "sequence-cardinality" "sequence" "set!" "nextmethod" "start" "start:" "forward" "'forward" "direction" "direction:" "seq")}
        {Lisp-Entry "peek-forward" #f 2491 11 2491 23 ("current" "sequence" "element")}
        {Lisp-Entry "peek-backward" #f 2495 11 2495 24 ("1" "current" "-" "sequence" "element")}
        {Lisp-Entry "goto-beginning" #f 2499 11 2499 25 ("0" "current" "set!")}
        {Lisp-Entry "goto-end" #f 2503 11 2503 19 ("sequence-cardinality" "current" "set!")}
        {Lisp-Entry "forward" #f 2507 11 2507 18 ("1" "current" "increase!")}
        {Lisp-Entry "backward" #f 2511 11 2511 19 ("1" "current" "decrease!")}
        {Lisp-Entry "done-forward?" #f 2515 11 2515 24 ("sequence-cardinality" "current" ">=")}
        {Lisp-Entry "done-backward?" #f 2519 11 2519 25 ("0" "current" "=")}
        {Lisp-Entry "put-forward" #f 2523 11 2523 22 ("current" "sequence" "set-element!" "object")}
        {Lisp-Entry "put-backward" #f 2527 11 2527 23 ("1" "current" "-" "sequence" "set-element!" "object")}
        {Lisp-Entry "get-position" #f 2531 11 2531 23 ("current")}
        {Lisp-Entry "set-position" #f 2535 11 2535 23 ("sequence-cardinality" "0" "between" "current" "set!" "pos")}
        {Lisp-Entry "get-state" #f 2539 11 2539 20 ("current")}
        {Lisp-Entry "reset-state" #f 2543 11 2543 22 ("current" "set!" "state")}}
      {Lisp-Entry "List-Class" #f 2552 7 2552 17 ()
        {Lisp-Entry "allocate-sequence" #f 2555 11 2555 28 ("make-list" "len")}}
      {Lisp-Entry "List" #f 2559 17 2559 21 ()
        {Lisp-Entry "initialize" #f 2562 11 2562 21 ("native-class" "rest")}
        {Lisp-Entry "copy-object" #f 2566 11 2566 22 ("self" "subcopy" "if" "x" "function" "map" "deep?")}
        {Lisp-Entry "iterate-object" #f 2574 11 2574 25 ("self" "List-Iterator" "new")}
        {Lisp-Entry "sequence-element" #f 2578 11 2578 27 ("self" "list-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 2582 11 2582 32 ("self" "list-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 2586 11 2586 31 ("self" "length")}
        {Lisp-Entry "sequence-tail" #f 2590 11 2590 24 ("1" "-" "cdr" "tail" "0" "=" "self" "null?" "or" "if" "n")}
        {Lisp-Entry "sequence-last" #f 2596 11 2596 24 ("last" "car" "self" "cdr" "null?" "if")}
        {Lisp-Entry "sequence-butlast" #f 2602 11 2602 27 ("butlast" "car" "cons" "cdr" "self" "null?" "or" "if")}
        {Lisp-Entry "sequence-subseq!" #f 2608 11 2608 27 ("subseq" "self" "-1" "0" "=" "or" "if" "end" "start")}
        {Lisp-Entry "replace-subseq!" #f 2614 11 2614 26 ("+" "after" "1" "-" "before" "let*" "self" "tail" "last-tail" "set-cdr!" "begin" "0" "=" "if" "seq" "end" "start")}}
      {Lisp-Entry "Null-Class" #f 2626 7 2626 17 ()}
      {Lisp-Entry "Null" #f 2629 17 2629 21 ()
        {Lisp-Entry "compare-object" #f 2632 11 2632 25 (":not-equal" ":equal" "null?" "if" "obj")}}
      {Lisp-Entry "Pair-Class" #f 2638 7 2638 17 ()}
      {Lisp-Entry "Pair" #f 2641 17 2641 21 ()
        {Lisp-Entry "compare-object" #f 2644 11 2644 25 (":not-equal" "else" "null?" "and" "cond" "right" "cdr" "left" "let" ":equal" ":greater" ":less" "self" "car" "compare" "case" "pair?" "if" "obj")}}
      {Lisp-Entry "insert!" #f 2672 27 2672 34 ("class-of" "list" "coerce" "insert-sequence!" "obj" "pos" "seq")}
      {Lisp-Entry "atom?" #f 2676 27 2676 32 ("pair?" "not" "obj")}
      {Lisp-Entry "null/pair?" #f 2680 27 2680 37 ("pair?" "null?" "or" "obj")}
      {Lisp-Entry "last-tail" #f 2684 20 2684 29 ("cdr" "pair?" "cur" "iter" "let" "null?" "if" "lst")}
      {Lisp-Entry "make-list" #f 2693 20 2693 29 ("1" "-" "cons" "set!" "0" ">" "while" "list" "car" "null?" "if" "fill" "let" "rest" "n")}
      {Lisp-Entry "list-set!" #f 2702 27 2702 36 ("list-tail" "set-car!" "value" "n" "list")}
      {Lisp-Entry "set-cadr!" #f 2706 27 2706 36 ("cdr" "set-car!" "value" "pair")}
      {Lisp-Entry "append!" #f 2710 20 2710 27 ("queue-list" "enqueue-list" "lst" "function" "for-each" "new-queue" "queue" "let" "rest")}
      {Lisp-Entry "position" #f 2718 20 2718 28 ("0" "1" "+" "cdr" "else" "car" "eqv?" "null?" "cond" "pos" "function" "position" "letrec" "lst" "element")}
      {Lisp-Entry "copy-tree" #f 2730 20 2730 29 ("cdr" "car" "copy-tree" "cons" "pair?" "if" "tree")}
      {Lisp-Entry "position-of" #f 2737 20 2737 31 ("1" "+" "cdr" "car" "eq?" "null?" "if" "0" "i" "rst" "iter" "let" "lst" "obj")}
      {Lisp-Entry "proper-list?" #f 2746 20 2746 32 ("cdr" "proper-list?" "else" "pair?" "not" "null?" "cond" "lst")}
      {Lisp-Entry "last-cdr" #f 2752 20 2752 28 ("cdr" "last-cdr" "pair?" "if" "lst")}
      {Lisp-Entry "but-last-cdr" #f 2758 20 2758 32 ("cdr" "but-last-cdr" "car" "cons" "pair?" "if" "lst")}
      {Lisp-Entry "move-to-head!" #f 2764 20 2764 33 ("else" "cons" "set-cdr!" "cond" "cdr" "scan" "previous" "iter" "let" "car" "eq?" "null?" "or" "if" "lst" "target")}
      {Lisp-Entry "move-to-tail!" #f 2775 20 2775 33 ("begin" "if" "scan" "previous" "iter" "let" "else" "cdr" "cons" "last-tail" "set-cdr!" "car" "eq?" "null?" "cond" "lst" "target")}
      {Lisp-Entry "augment" #f 2794 20 2794 27 ("get-output" "set!" "put" "car" "put-sequence" "cdr" "null?" "if" "not-null?" "while" "scan" "List-Factory" "new" "fact" "let" "rest")}
      {Lisp-Entry "memq?" #f 2805 27 2805 32 ("memq" "boolean" "list" "target")}
      {Lisp-Entry "memv?" #f 2809 27 2809 32 ("memv" "boolean" "list" "target")}
      {Lisp-Entry "member?" #f 2813 20 2813 27 ("cdr" "else" "car" "apply-key" "apply-test" "null?" "cond" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "assq-value" #f 2823 20 2823 30 ("cdr" "if" "assq" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "assv-value" #f 2830 20 2830 30 ("cdr" "if" "assv" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "assoc-value" #f 2837 20 2837 31 ("cdr" "if" "assoc" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "associate" #f 2844 20 2844 29 ("cdr" "apply-key" "apply-test" "car" "pair" "null?" "if" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "rassociate" #f 2854 20 2854 30 ("cdr" "apply-key" "apply-test" "car" "pair" "null?" "if" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "find-pair" #f 2864 20 2864 29 ("cdr" "else" "car" "eq?" "null?" "cond" "scan" "iter" "let" "list" "target")}
      {Lisp-Entry "reverse!" #f 2874 20 2874 28 ("set-cdr!" "cdr" "set!" "not-null?" "while" "ptr" "res" "let" "list")}
      {Lisp-Entry "remove!" #f 2885 20 2885 27 ("set-cdr!" "begin" "scan" "previous" "let" "null?" "if" "cdr" "set!" "car" "apply-key" "not-null?" "and" "while" "eqv?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "getprop" #f 2902 20 2902 27 ("cddr" "else" "car" "apply-key" "eqv?" "null?" "cond" "scan" "iter" "let" "key" "key:" "target" "plist")}
      {Lisp-Entry "getf" #f 2912 20 2912 24 ("cadr" "not" "if" "getprop" "pair" "let" "not-found" "not-found:" "key" "key:" "target" "plist")}
      {Lisp-Entry "setf" #f 2919 20 2919 24 ("getprop" "set-second!" "value" "target" "plist")}
      {Lisp-Entry "addf" #f 2923 20 2923 24 ("set-second!" "list" "append!" "not" "if" "getprop" "pair" "let" "value" "target" "plist")}
      {Lisp-Entry "for-each-pair" #f 2931 20 2931 33 ("cdr" "set!" "not-null?" "while" "lst" "proc")}
      {Lisp-Entry "for-each-property" #f 2937 20 2937 37 ("cddr" "set!" "cadr" "car" "not-null?" "while" "lst" "proc")}
      {Lisp-Entry "map-property" #f 2943 20 2943 32 ("queue-list" "enqueue" "value" "property" "function" "for-each-property" "new-queue" "queue" "let" "lst" "proc")}
      {Lisp-Entry "flatten" #f 2951 20 2951 27 ("append" "apply" "llist")}
      {Lisp-Entry "uniform" #f 2955 20 2955 27 ("cdr" "continuation-return" "apply-test" "unless" "value" "object" "for-each" "car" "apply-key" "first" "let" "return" "function" "continuation-capture" "null?" "if" "test" "test:" "key" "key:" "lst")}
      {Lisp-Entry "sort-property-list" #f 2969 20 2969 38 ("append" "apply" "car" "key:" "<" "sort" "sorted" "get-output" "for-each-property" "begin" "alist" "list" "put" "value" "property" "function" "proc" "List-Factory" "new" "factory" "let*" "prop-list")}
      {Lisp-Entry "List-Iterator" #f 2985 15 2985 28 ()
        {Lisp-Entry "current" #f 2988 8 2988 15 ()}
        {Lisp-Entry "position" #f 2989 8 2989 16 ()}
        {Lisp-Entry "initialize" #f 2992 11 2992 21 ("0" "position" "current" "set!" "nextmethod" "list")}
        {Lisp-Entry "get-next!" #f 2998 11 2998 20 ("1" "+" "position" "cdr" "set!" "car" "prog1" "eof-object" "current" "null?" "if")}
        {Lisp-Entry "done?" #f 3006 11 3006 16 ("Empty" "peeked" "eq?" "current" "null?" "and")}
        {Lisp-Entry "put" #f 3010 11 3010 14 ("current" "set-car!" "object")}
        {Lisp-Entry "get-position" #f 3014 11 3014 23 ("position")}
        {Lisp-Entry "set-position" #f 3018 11 3018 23 ("tail" "current" "set!" ">" "error" "0" "<" "cond" "position" "-" "delta" "let" "pos")}
        {Lisp-Entry "get-state" #f 3026 11 3026 20 ("position" "current" "cons")}
        {Lisp-Entry "reset-state" #f 3030 11 3030 22 ("cdr" "position" "car" "current" "set!" "state")}
        {Lisp-Entry "get-list" #f 3035 18 3035 26 ("current")}}
      {Lisp-Entry "List-Factory" #f 3044 7 3044 19 ("0" "initialize")
        {Lisp-Entry "list" #f 3047 8 3047 12 ()}
        {Lisp-Entry "last-list" #f 3048 8 3048 17 ()}
        {Lisp-Entry "last-anchor" #f 3049 8 3049 19 ()}
        {Lisp-Entry "current" #f 3050 8 3050 15 ()}
        {Lisp-Entry "size" #f 3051 8 3051 12 ()}
        {Lisp-Entry "put" #f 3054 11 3054 14 ("increase!" "size" "prog1" "cdr" "set-cdr!" "copy-last-list" "last-list" "when" "else" "list" "cons" "set!" "current" "null?" "cond" "object")}
        {Lisp-Entry "put-unique" #f 3067 11 3067 21 ("put" "list" "member?" "unless" "eqv?" "test" "test:" "object")}
        {Lisp-Entry "put-sequence" #f 3072 11 3072 23 ("cardinality" "increase!" "size" "prog1" "set-cdr!" "last-anchor" "copy-last-list" "else" "list" "last-list" "set!" "current" "null?" "cond" "put" "iterate" "pair?" "not" "if" "when" "seq")}
        {Lisp-Entry "is-empty?" #f 3090 18 3090 27 ("current" "null?")}
        {Lisp-Entry "get-size" #f 3094 18 3094 26 ("size")}
        {Lisp-Entry "get-list" #f 3098 18 3098 26 ("list")}
        {Lisp-Entry "get-last-element" #f 3102 18 3102 34 ("current" "car")}
        {Lisp-Entry "get-output" #f 3106 11 3106 21 ("list")}
        {Lisp-Entry "reset" #f 3110 18 3110 23 ("0" "size" "current" "last-anchor" "last-list" "list" "set!")}
        {Lisp-Entry "copy-last-list" #f 3118 19 3118 33 ("set-cdr!" "else" "last-tail" "current" "last-list" "copy" "list" "set!" "last-anchor" "not" "cond")}}
      {Lisp-Entry "Table" #f 3134 17 3134 22 ()
        {Lisp-Entry "initialize" #f 3137 11 3137 21 ("native-class" "rest")}
        {Lisp-Entry "print" #f 3141 11 3141 16 ("table-length" "system-format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "table-add" #f 3148 20 3148 29 ("table-ref" "cons" "table-set!" "value" "key" "table")}
      {Lisp-Entry "table-remove!" #f 3152 20 3152 33 ("table-ref" "remove!" "table-set!" "value" "name" "table")}
      {Lisp-Entry "empty-table" #f 3156 20 3156 31 ("empty-table" "'empty-table" "unimplemented" "table")}
      {Lisp-Entry "table-keys" #f 3160 20 3160 30 ("cons" "set!" "value" "key" "function" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-values" #f 3168 20 3168 32 ("cons" "set!" "value" "key" "function" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-keys/values" #f 3176 20 3176 37 ("cons" "set!" "value" "key" "function" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-load" #f 3184 20 3184 30 ("table-set!" "error" "table-ref" "if" "eof-object?" "not" "and" "when" "object" "read" "name" "iterate" "let" "reader" "function" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "error-on-duplicates?" "file" "table")}
      {Lisp-Entry "Slot" #f 3203 7 3203 11 ()
        {Lisp-Entry "offset" #f 3206 8 3206 14 ()}
        {Lisp-Entry "get-offset" #f 3206 26 3206 34 ()}
        {Lisp-Entry "initialize" #f 3207 8 3207 18 ()}
        {Lisp-Entry "get-initialize" #f 3207 26 3207 34 ()}}
      {Lisp-Entry "Property" #f 3215 7 3215 15 ()
        {Lisp-Entry "getter" #f 3218 8 3218 14 ()}
        {Lisp-Entry "get-getter" #f 3218 22 3218 30 ()}
        {Lisp-Entry "setter" #f 3219 8 3219 14 ()}
        {Lisp-Entry "get-setter" #f 3219 22 3219 30 ()}}
      {Lisp-Entry "property?" #f 3222 27 3222 36 ("Property" "is?" "obj")}
      {Lisp-Entry "symbolize-property" #f 3226 20 3226 38 ("else" "keyword->symbol" "keyword?" "get-name" "field?" "cond" "property")}
      {Lisp-Entry "symbolize-properties" #f 3232 20 3232 40 ("get-output" "symbolize-property" "put" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let" "properties")}
      {Lisp-Entry "keywordize-property" #f 3242 20 3242 39 ("else" "keyword?" "field-name" "symbol->keyword" "field?" "cond" "property")}
      {Lisp-Entry "keywordize-properties" #f 3248 20 3248 41 ("get-output" "keywordize-property" "put" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let" "properties")}
      {Lisp-Entry "read-property" #f 3258 20 3258 33 ("property-field" "property-getter" "getter" "let" "expr" "object")}
      {Lisp-Entry "write-property" #f 3263 20 3263 34 ("property-field" "property-setter" "setter" "let" "value" "expr" "object")}
      {Lisp-Entry "property-field" #f 3268 20 3268 34 ("error" "keyword->symbol" "keyword?" "class-of" "category-field" "field" "let" "property?" "if" "expr" "object")}
      {Lisp-Entry "String-Class" #f 3282 7 3282 19 ()
        {Lisp-Entry "allocate-sequence" #f 3285 11 3285 28 ("make-string" "len")}
        {Lisp-Entry "coerce-object" #f 3289 11 3289 24 ("coerce-string" "nextmethod" "sequence?" "if" "obj")}}
      {Lisp-Entry "String" #f 3295 17 3295 23 ()
        {Lisp-Entry "initialize" #f 3298 11 3298 21 ("native-class" "rest")}
        {Lisp-Entry "compare-object" #f 3302 11 3302 25 (":incompatible" ":greater" "else" ":less" "string<?" ":equal" "self" "string=?" "cond" "string?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" #f 3314 11 3314 28 (":incompatible" ":greater" "else" ":less" "string-ci<?" ":equal" "self" "string-ci=?" "cond" "string?" "if" "obj")}
        {Lisp-Entry "sequence-element" #f 3326 11 3326 27 ("self" "string-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 3330 11 3330 32 ("self" "string-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 3334 11 3334 31 ("self" "string-length")}
        {Lisp-Entry "sequence-tail" #f 3338 11 3338 24 ("substring" ">=" "if" "self" "cardinality" "lgt" "let" "n")}
        {Lisp-Entry "sequence-last" #f 3345 11 3345 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 3349 11 3349 27 ("1" "cardinality" "-" "0" "self" "substring")}}
      {Lisp-Entry "replace-subseq!" #f 3373 13 3373 28 ("cardinality" "0" "subseq" "string-append" "replacement" "end" "start" "string")}
      {Lisp-Entry "empty-string?" #f 3388 27 3388 40 ("string-length" "zero?" "string?" "and" "object")}
      {Lisp-Entry "->string" #f 3393 20 3393 28 ("get-output-string" "print" "open-output-string" "output" "let" ":human" "':human" "detail" "expr")}
      {Lisp-Entry "remove-trailing-char" #f 3399 20 3399 40 ("subseq" "1" "-" "element" "eqv?" "0" ">" "and" "if" "cardinality" "len" "let" "c" "string")}
      {Lisp-Entry "value-string?" #f 3407 20 3407 33 ("empty-string?" "not" "string?" "and" "object")}
      {Lisp-Entry "wi=" #f 3412 20 3412 23 ("else" "eqv?" "eq?" "continuation-return" "cond" "when" ">=" "increase!" "element" "whitechar?" "and" "set!" "not" "or" "while" "d2?" "=" "d1?" "w2?" "w1?" "s?" "l2" "cardinality" "l1" "n2" "0" "n1" "let*" "return" "function" "continuation-capture" "s2" "s1")}
      {Lisp-Entry "unique-domain-name" #f 3452 20 3452 38 ("increase!" "->string" "set!" "iterate" "let" "suffix" "1" "n" "subseq" "starts-with?" "when" "string" "function" "collect" "suffixes" "cardinality" "common-length" "append" "common-prefix" "let*" "member?" "not" "if" "separator" "separator:" "domain" "name")}
      {Lisp-Entry "remove-numeric-suffix" #f 3472 20 3472 41 ("1" "+" "0" "subseq" "if" "position" "'position" "return:" "reversed?:" "numeric?" "not" "c" "function" "find-if" "pos" "let" "string")}
      {Lisp-Entry "compare-n" #f 3479 20 3479 29 ("1" "+" "string-ref" "not" "or" ">=" "if" "0" "n" "iter" "ylen" "string-length" "xlen" "let" "eqv?" "test" "test:" "max" "y" "x")}
      {Lisp-Entry "string-checksum" #f 3490 20 3490 35 ("1" "+" "string-ref" "char->integer" "increase!" "<" "when" "n" "iter" "string-length" "len" "0" "sum" "let" "str")}
      {Lisp-Entry "primordial-thread-object" #f 3505 12 3505 36 ("current-thread")}
      {Lisp-Entry "primordial-thread" #f 3509 20 3509 37 ("primordial-thread-object")}
      {Lisp-Entry "primordial-thread?" #f 3513 20 3513 38 ("primordial-thread" "current-thread" "eq?")}
      {Lisp-Entry "new-thread" #f 3517 20 3517 30 ("make-root-thread" "apply" "rest" "thunk")}
      {Lisp-Entry "top-threads" #f 3523 20 3523 31 ("primordial-thread" "thread-thread-group" "thread-group->thread-list")}
      {Lisp-Entry "present-thread-name" #f 3527 20 3527 39 ("->string" "else" "unspecified?" "not" "or" "cond" "name")}
      {Lisp-Entry "present-thread-state" #f 3532 20 3532 40 ("get-output-string" "else" "when" "write" "thread-state-active-timeout" "thread-state-active-waiting-for" "wf" "thread-state-active?" "thread-state-abnormally-terminated?" "thread-state-normally-terminated?" "thread-state-initialized?" "system-format" "thread-state-uninitialized?" "cond" "10.0" "*" "round" "/" "current-systime" "systime->seconds" "-" "expiry" "display" "to" "write-timeout" "define" "open-output-string" "port" "let" "state")}
      {Lisp-Entry "present-object" #f 3570 20 3570 34 (":reader" "->string" "object->serial" "number->string" "class-of" "type-name" "identifier-name" "symbol->string" "string-append" "class-string" "let" "exc" "function" "with-exception-catcher" "object")}
      {Lisp-Entry "thread-loop?" #f 3585 21 3585 33 ("thread-specific" "thread")}
      {Lisp-Entry "thread-start-loop" #f 3588 21 3588 38 ("thread-specific-set!" "thread")}
      {Lisp-Entry "thread-stop-loop" #f 3591 21 3591 37 ("thread-specific-set!" "thread")}
      {Lisp-Entry "thread-loop" #f 3595 21 3595 32 ("current-thread" "thread-loop?" "when" "thread-read" "thunk" "loop" "let")}
      {Lisp-Entry "thread-ports" #f 3603 12 3603 24 ("weak-keys:" "eq?" "test:" "make-table")}
      {Lisp-Entry "thread-ports-mutex" #f 3606 12 3606 30 ("thread-ports" "'thread-ports" "make-mutex")}
      {Lisp-Entry "get-thread-port" #f 3610 13 3610 28 ("mutex-unlock!" "table-set!" "open-vector" "port" "let" "thread-ports" "table-ref" "either" "prog1" "thread-ports-mutex" "mutex-lock!" "thread")}
      {Lisp-Entry "thread-write" #f 3619 21 3619 33 ("force-output" "write" "get-thread-port" "thread-port" "let" "value" "thread")}
      {Lisp-Entry "thread-read" #f 3625 21 3625 32 ("read" "+infinity" "input-port-timeout-set!" "current-thread" "get-thread-port" "thread-port" "let")}
      {Lisp-Entry "thread-read-non-blocking" #f 3631 21 3631 45 ("read" "0" "input-port-timeout-set!" "current-thread" "get-thread-port" "thread-port" "let")}
      {Lisp-Entry "thread-post" #f 3637 20 3637 31 ("thread-write" "current-thread" "eq?" "if" "thunk" "name" "thread")}
      {Lisp-Entry "thread-execute" #f 3643 20 3643 34 ("mutex-unlock!" "unwind-protect" "function" "thread-write" "mutex-lock!" "make-mutex" "mutex" "let" "current-thread" "eq?" "if" "thunk" "name" "thread")}
      {Lisp-Entry "thread-call-noresult" #f 3656 12 3656 32 ("thread-call-noresult" "'thread-call-noresult" "list")}
      {Lisp-Entry "thread-call-result?" #f 3660 21 3660 40 ("thread-call-noresult" "neq?" "result")}
      {Lisp-Entry "thread-call" #f 3664 20 3664 31 ("mutex-specific" "mutex-unlock!" "unwind-protect" "function" "thread-write" "thread-call-noresult" "mutex-specific-set!" "mutex-lock!" "make-mutex" "mutex" "eq?" "if" "current-thread" "delegator" "let" "thunk" "name" "thread")}
      {Lisp-Entry "thread-exit" #f 3680 20 3680 31 ("pristine-thread-continuation" "continuation-return")}
      {Lisp-Entry "is-not?" #f 3689 27 3689 34 ("is?" "not" "type" "object")}
      {Lisp-Entry "type-name" #f 3693 27 3693 36 ("get-category-name" "type")}
      {Lisp-Entry "type-ascendant" #f 3697 27 3697 41 ("get-class-ascendant" "type")}
      {Lisp-Entry "type-descendants" #f 3701 20 3701 36 ("get-category-descendants" "type")}
      {Lisp-Entry "Vector-Class" #f 3710 7 3710 19 ()
        {Lisp-Entry "allocate-sequence" #f 3713 11 3713 28 ("make-vector" "len")}}
      {Lisp-Entry "Vector" #f 3717 17 3717 23 ()
        {Lisp-Entry "initialize" #f 3720 11 3720 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 3725 11 3725 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 3731 11 3731 27 ("self" "vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 3735 11 3735 32 ("self" "vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 3739 11 3739 31 ("self" "vector-length")}
        {Lisp-Entry "sequence-tail" #f 3743 11 3743 24 ("self" "vector->list" "tail" "list->vector" "n")}
        {Lisp-Entry "sequence-last" #f 3747 11 3747 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 3751 11 3751 27 ("self" "vector->list" "butlast" "list->vector")}}
      {Lisp-Entry "AXIS_MIN_SIZE" #f 3772 12 3772 25 ("8")}
      {Lisp-Entry "AXIS_GOLDEN_RATIO" #f 3773 12 3773 29 ("1.6")}
      {Lisp-Entry "Axis-Class" #f 3776 7 3776 17 ()
        {Lisp-Entry "allocate-sequence" #f 3779 11 3779 28 ("Axis" "new" "len")}}
      {Lisp-Entry "Axis" #f 3783 7 3783 11 ()
        {Lisp-Entry "size" #f 3786 8 3786 12 ()}
        {Lisp-Entry "get-size" #f 3786 35 3786 43 ()}
        {Lisp-Entry "set-size" #f 3786 35 3786 43 ()}
        {Lisp-Entry "content" #f 3787 8 3787 15 ()}
        {Lisp-Entry "get-content" #f 3787 35 3787 43 ()}
        {Lisp-Entry "set-content" #f 3787 35 3787 43 ()}
        {Lisp-Entry "initialize" #f 3790 11 3790 21 ("make-vector" "content" "size" "set!" "s")}
        {Lisp-Entry "print" #f 3795 11 3795 16 ("content" "size" "system-format" "function" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "sequence-element" #f 3801 11 3801 27 ("self" "element" "n")}
        {Lisp-Entry "sequence-set-element!" #f 3805 11 3805 32 ("self" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 3809 11 3809 31 ("self" "cardinality")}
        {Lisp-Entry "sequence-tail" #f 3813 11 3813 24 ("self" "tail" "n")}
        {Lisp-Entry "sequence-last" #f 3817 11 3817 24 ("self" "last")}}
      {Lisp-Entry "axis" #f 3821 20 3821 24 ("Axis" "coerce" "rest")}
      {Lisp-Entry "tail" #f 3837 13 3837 17 ("1" "+" "element" "set-element!" ">=" "if" "0" "i" "iter" "get-size" "-" "offset" "Axis" "new" "new-axis" "let" "n" "axis")}
      {Lisp-Entry "last" #f 3847 13 3847 17 ("1" "get-size" "-" "element" "axis")}
      {Lisp-Entry "insert!" #f 3851 13 3851 20 ("list" "replace-subseq!" "obj" "pos" "axis")}
      {Lisp-Entry "replace-subseq!" #f 3855 13 3855 28 ("axis-grow" "1" "element" "set-element!" "0" ">" "when" "dst" "src" "n" "iter" "let" "<" "cond" "+" "new-size" "get-size" "old-size" "delta" "cardinality" "after" "-" "before" "let*" "replacement" "end" "start" "axis")}
      {Lisp-Entry "axis-remove!" #f 3885 20 3885 32 ("replace-subseq!" "1" "+" "end" "start" "let*" "when" "find" "n" "let" "element" "axis")}
      {Lisp-Entry "axis-grow" #f 3893 20 3893 29 ("1" "+" "element" "set-element!" "begin" "<" "when" "i" "iter" "AXIS_GOLDEN_RATIO" "*" "fxround" "old-content" "old-real-size" "let" "else" "AXIS_MIN_SIZE" "make-vector" "set-content" "0" "get-size" "=" "set-size" "get-content" "cardinality" "<=" "cond" "n" "axis")}
      {Lisp-Entry "axis-add" #f 3911 20 3911 28 ("set-element!" "1" "+" "axis-grow" "cardinality" "size" "let" "obj" "axis")}
      {Lisp-Entry "new-axis" #f 3917 27 3917 35 ("make-vector" "Axis" "construct" "size")}
      {Lisp-Entry "allocate" #f 3924 13 3924 21 ("new-axis" "size" "class")}
      {Lisp-Entry "coerce" #f 3928 13 3928 19 ("element" "set-element!" "below" "0" "from" "n" "for" "loop" "allocate" "new-sequence" "cardinality" "len" "let" "class" "seq")}
      {Lisp-Entry "as" #f 3936 19 3936 21 ("get-content" "vector-ref" "n" "axis" "element" "axis-ref")}
      {Lisp-Entry "as" #f 3940 19 3940 21 ("get-content" "vector-set!" "obj" "n" "axis" "set-element!" "axis-set!")}
      {Lisp-Entry "as" #f 3944 19 3944 21 ("get-size" "axis" "cardinality" "axis-cardinality")}
      {Lisp-Entry "Enumeration" #f 3959 7 3959 18 ()
        {Lisp-Entry "name" #f 3962 8 3962 12 ()}
        {Lisp-Entry "entries" #f 3963 8 3963 15 ()}
        {Lisp-Entry "construct-literal" #f 3967 16 3967 33 ("self" "new" "entries" "name" "context")}
        {Lisp-Entry "initialize" #f 3971 11 3971 21 ("entries~self" "name~self" "set!" "Enumeration" "nextmethod" "entries" "name")}
        {Lisp-Entry "print" #f 3977 11 3977 16 ("entries" "name" "self" "class-of" "type-name" "system-format" "readably" "printer")}
        {Lisp-Entry "get-name" #f 3984 18 3984 26 ("name")}
        {Lisp-Entry "get-entries" #f 3988 18 3988 29 ("entries")}
        {Lisp-Entry "set-value" #f 3992 18 3992 27 ("entry-from-name" "cdr" "set-car!" "value" "name")}
        {Lisp-Entry "get-size" #f 3996 11 3996 19 ("int" "size-of")}
        {Lisp-Entry "read-content" #f 4000 11 4000 23 ("%read-int" "address")}
        {Lisp-Entry "write-content" #f 4004 11 4004 24 ("%write-int" "object" "address")}
        {Lisp-Entry "entry-from-name" #f 4008 11 4008 26 ("self" "error" "eq?" "test:" "first" "key:" "entries" "find-in" "either" "name")}
        {Lisp-Entry "entry-from-value" #f 4013 11 4013 27 ("self" "error" "eqv?" "test:" "second" "key:" "entries" "find-in" "either" "value")}
        {Lisp-Entry "value->name" #f 4018 18 4018 29 ("entry-from-value" "car" "value")}
        {Lisp-Entry "name->value" #f 4022 18 4022 29 ("entry-from-name" "cadr" "name")}
        {Lisp-Entry "get-rank" #f 4026 18 4026 26 ("eq?" "test:" "first" "key:" "entries" "find" "1" "+" "0" "name" "=" "if" "target")}}
      {Lisp-Entry "enumeration?" #f 4032 27 4032 39 ("enumeration?" "'enumeration?" "unimplemented" "object")}
      {Lisp-Entry "set-enumeration!" #f 4036 20 4036 36 ("set-value" "set-enumeration!" "'set-enumeration!" "unimplemented" "value" "name" "enumeration")}
      {Lisp-Entry "nil" #f 4047 19 4047 22 ("nil" "'nil" "list")}
      {Lisp-Entry "nil?" #f 4051 27 4051 31 ("nil" "eq?" "obj")}
      {Lisp-Entry "not-nil?" #f 4055 27 4055 35 ("nil" "eq?" "not" "obj")}
      {Lisp-Entry "parse-file" #f 4064 20 4064 30 ("parse" "string?" "if" "file")}
      {Lisp-Entry "Chunk-Size" #f 4070 12 4070 22 ("1024")}
      {Lisp-Entry "make-u8-content" #f 4074 33 4074 48 ("cons" "content" "size")}
      {Lisp-Entry "u8-content-size" #f 4077 33 4077 48 ("car" "content")}
      {Lisp-Entry "iterate-u8-content" #f 4080 33 4080 51 ("cdr" "size" "u8vector" "bind" "chunk" "function" "for-each" "proc" "content")}
      {Lisp-Entry "read-u8-content" #f 4087 33 4087 48 ("cons" "put" "increase!" "get-output" "make-u8-content" "=" "if" "read-subu8vector" "read" "Chunk-Size" "make-u8vector" "u8vector" "loop" "List-Factory" "new" "fact" "0" "size" "let" "port")}
      {Lisp-Entry "write-u8-content" #f 4100 33 4100 49 ("0" "write-subu8vector" "size" "u8vector" "function" "iterate-u8-content" "port" "content")}
      {Lisp-Entry "start-pump" #f 4106 33 4106 43 ("substring" ">" "if" "1" "0" "read-substring" "n" "iterate" "make-string" "buffer" "1000" "size" "let" "proper-tail-calls" "declare" "proc" "port")}
      {Lisp-Entry "read-until" #f 4124 20 4124 30 ("enqueue" "queue-list" "if" "read" "expr" "iterate" "new-queue" "queue" "let" "reader" "test")}
      {Lisp-Entry "read-string-element" #f 4134 20 4134 39 ("read" "call-with-input-string" "string")}
      {Lisp-Entry "read-string-content" #f 4139 20 4139 39 ("eof-object?" "read-until" "reader" "function" "call-with-input-string" "string")}
      {Lisp-Entry "read-delimited-string" #f 4145 20 4145 41 ("get-output" "peek-char" "eof-object?" "if" "skip-whites" "put" "read-delimited" "lst" "iterate" "List-Factory" "new" "fact" "let" "reader" "function" "call-with-input-string" "char" "string")}
      {Lisp-Entry "require-char" #f 4158 20 4158 32 ("error" "eof-object?" "if" "read-char" "c" "let" "reader")}
      {Lisp-Entry "skip-line" #f 4165 20 4165 29 ("eqv?" "eof-object?" "not" "and" "if" "read-char" "c" "iterate" "let" "reader")}
      {Lisp-Entry "skip-whites" #f 4176 20 4176 31 ("read-char" "whitespace?" "when" "skip-line" "eqv?" "if" "eof-object?" "unless" "peek-char" "c" "iterate" "let" "reader")}
      {Lisp-Entry "read-delimited" #f 4187 20 4187 34 ("enqueue" "else" "read" "enqueue-list" "read-char" "eqv?" "error" "queue-list" "if" "eof-object?" "cond" "peek-char" "c" "skip-whites" "iterate" "new-queue" "queue" "let" "allow-eof?" "delimiter" "kind" "reader")}
      {Lisp-Entry "string-delimiter?" #f 4207 27 4207 44 ("eqv?" "c")}
      {Lisp-Entry "read-lines" #f 4211 20 4211 30 ("queue-list" "when" "enqueue" "begin" "if" "read-proper-line" "proper?" "line" "receive" "last-proper?" "iterate" "new-queue" "queue" "let" "proper-tail-calls" "declare" "reader")}
      {Lisp-Entry "read-content-string" #f 4225 20 4225 39 ("eof-object?" "if" "read-line" "line" "let" "reader")}
      {Lisp-Entry "pipe" #f 4234 20 4234 24 ("write-char" "begin" "eof-object?" "not" "if" "read-char" "c" "iterate" "let" "output" "input")}
      {Lisp-Entry "textual" #f 4248 20 4248 27 (":text" "print" "write" "current-output-port" "printer" "expr")}
      {Lisp-Entry "describe" #f 4254 20 4254 28 (":describe" "print" "current-output-port" "printer" "expr")}
      {Lisp-Entry "print-expr" #f 4258 13 4258 23 ("print" "current-output-port" "printer" "detail" "expr")}
      {Lisp-Entry "print-unsigned" #f 4262 13 4262 27 ("print-unsigned" "'print-unsigned" "unimplemented" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-binary" #f 4266 13 4266 25 ("2" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-hexadecimal" #f 4270 13 4270 30 ("16" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-real" #f 4274 13 4274 23 ("new-frac" ">" "and" "carry?" "dot-pos" "or" "if" "len" "string->number" "round" "temp-str" "last-part" "first-part" "else" "-" "make-string" "string-append" "<" "display" "=" "cond" "frac-len" "string-length" "1" "+" "frac-str" "0" "substring" "pre-str" "find" "dot-index" "exact->inexact" "number->string" "str" "let*" "current-output-port" "printer" "precision" "r")}
      {Lisp-Entry "print-list" #f 4313 13 4313 23 ("null?" "pair?" "if" "cdr" "next" "print" "car" "expr" "scan" "iter" "let" "display" "not-null?" "when" "current-output-port" "printer" "detail" "after" "before" "last-separator" "separator" "list")}
      {Lisp-Entry "fresh-line" #f 4331 20 4331 30 ("newline" "at-fresh-line?" "unless" "current-output-port" "printer")}
      {Lisp-Entry "at-fresh-line?" #f 4336 20 4336 34 ("current-output-port" "printer")}
      {Lisp-Entry "*printers*" #f 4346 12 4346 22 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-printer" #f 4350 21 4350 37 ("*printers*" "table-set!" "proc" "name")}
      {Lisp-Entry "with-printer" #f 4354 20 4354 32 ("*printers*" "table-ref" "printer-proc" "get-output-string" "open-output-string" "let" ":string" "eq?" "if" "proc" "printer")}
      {Lisp-Entry "pp" #f 4374 19 4374 21 ("pretty-print")}
      {Lisp-Entry "present-identifier" #f 4378 20 4378 38 ("0" "1" "element" "system-format" "reverse!" "reversed" "car" "cdr" "null?" "if" "symbol->string" "split" "names" "let" "identifier")}
      {Lisp-Entry "write-line" #f 4386 20 4386 30 ("newline" "display" "car" "null?" "if" "port" "let" "rest" "line")}
      {Lisp-Entry "write-lines" #f 4392 20 4392 31 ("newline" "null?" "unless" "display" "do" "remain" "remainder" "in" "line" "for" "loop" "lines" "printer")}
      {Lisp-Entry "identity" #f 4404 27 4404 35 ("x")}
      {Lisp-Entry "compose" #f 4408 27 4408 34 ("x" "function" "g" "f")}
      {Lisp-Entry "Subseq-Class" #f 4418 7 4418 19 ()}
      {Lisp-Entry "Subseq" #f 4421 7 4421 13 ()
        {Lisp-Entry "sequence" #f 4424 8 4424 16 ()}
        {Lisp-Entry "get-sequence" #f 4424 32 4424 40 ()}
        {Lisp-Entry "start" #f 4425 8 4425 13 ()}
        {Lisp-Entry "get-start" #f 4425 32 4425 40 ()}
        {Lisp-Entry "set-start" #f 4425 32 4425 40 ()}
        {Lisp-Entry "size" #f 4426 8 4426 12 ()}
        {Lisp-Entry "get-size" #f 4426 32 4426 40 ()}
        {Lisp-Entry "set-size" #f 4426 32 4426 40 ()}
        {Lisp-Entry "initialize" #f 4429 11 4429 21 ("size~self" "start~self" "sequence~self" "set!" "nextmethod" "size" "start" "sequence")}
        {Lisp-Entry "print" #f 4436 11 4436 16 ("system-format" "function" "self" "print-unreadable" "string-ref" "write-char" "do" "size" "+" "below" "start" "from" "n" "for" "loop" "sequence" "string?" "if" "detail" "output")}
        {Lisp-Entry "coerce-string" #f 4446 11 4446 24 ("error" "size" "+" "start" "substring" "sequence" "string?" "if")}
        {Lisp-Entry "sequence-element" #f 4452 11 4452 27 ("start" "+" "sequence" "element" "n")}
        {Lisp-Entry "sequence-set-element!" #f 4456 11 4456 32 ("start" "+" "sequence" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 4460 11 4460 31 ("size")}
        {Lisp-Entry "sequence-subseq!" #f 4464 11 4464 27 ("cardinality" "-" "start" "+" "sequence" "Subseq" "new" "self" "-1" "0" "=" "or" "if" "e" "s")}}
      {Lisp-Entry "offset-subseq!" #f 4470 20 4470 34 ("get-start" "+" "set-start" "offset" "subseq")}
      {Lisp-Entry "grow-subseq!" #f 4474 20 4474 32 ("get-size" "+" "set-size" "n" "subseq")}
      {Lisp-Entry "as" #f 4478 19 4478 21 ("get-start" "+" "get-sequence" "n" "subseq" "element" "subseq-ref")}
      {Lisp-Entry "as" #f 4482 19 4482 21 ("get-start" "+" "get-sequence" "obj" "n" "subseq" "set-element!" "subseq-set!")}
      {Lisp-Entry "as" #f 4486 19 4486 21 ("get-size" "subseq" "cardinality" "subseq-cardinality")}
      {Lisp-Entry "Subseq$string$-Class" #f 4495 7 4495 27 ()}
      {Lisp-Entry "Subseq$string$" #f 4498 7 4498 21 ()
        {Lisp-Entry "sequence" #f 4501 8 4501 16 ()}
        {Lisp-Entry "get-sequence" #f 4501 36 4501 44 ()}
        {Lisp-Entry "start" #f 4502 8 4502 13 ()}
        {Lisp-Entry "get-start" #f 4502 36 4502 44 ()}
        {Lisp-Entry "set-start" #f 4502 36 4502 44 ()}
        {Lisp-Entry "size" #f 4503 8 4503 12 ()}
        {Lisp-Entry "get-size" #f 4503 36 4503 44 ()}
        {Lisp-Entry "set-size" #f 4503 36 4503 44 ()}
        {Lisp-Entry "initialize" #f 4506 11 4506 21 ("size~self" "start~self" "sequence~self" "set!" "nextmethod" "size" "start" "sequence")}
        {Lisp-Entry "print" #f 4513 11 4513 16 ("size" "+" "start" "sequence" "substring" "display" "detail" "output")}
        {Lisp-Entry "sequence-element" #f 4518 11 4518 27 ("start" "+" "sequence" "element" "n")}
        {Lisp-Entry "sequence-set-element!" #f 4522 11 4522 32 ("start" "+" "sequence" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 4526 11 4526 31 ("size")}
        {Lisp-Entry "sequence-subseq!" #f 4530 11 4530 27 ("cardinality" "-" "start" "+" "sequence" "Subseq$string$" "new" "self" "-1" "0" "=" "or" "if" "e" "s")}}
      {Lisp-Entry "subseq!" #f 4552 13 4552 20 ("-" "Subseq$string$" "new" "e" "s" "seq")}
      {Lisp-Entry "subseq!" #f 4556 13 4556 20 ("-" "get-start" "+" "get-sequence" "Subseq$string$" "new" "e" "s" "subseq")}
      {Lisp-Entry "offset-subseq!" #f 4560 13 4560 27 ("get-start" "+" "set-start" "offset" "subseq")}
      {Lisp-Entry "grow-subseq!" #f 4564 13 4564 25 ("get-size" "+" "set-size" "n" "subseq")}}})
"geometry"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "geometry.jazz"} 1250272407
    {Lisp-Entry "jazz.dialect.language.geometry" #f 37 19 37 49 ("bottom" "right" "top" "left" "new-rect" "height" "width" "new-dimension" "get-v" "p" "get-h" "Point" "v" "h" "new-point" "get-end" "r2" "r1" "get-start" "=" "and" "Range$Cell$" "construct" "end" "start" "new-range" "-" "n" "get-col" "+" "c" "get-row" "Cell" "new" "col" "row" "new-cell" "jazz.dialect")
      {Lisp-Entry "private" #f 49 8 49 15 ("jazz.error")}
      {Lisp-Entry "Cell" #f 57 7 57 11 ()
        {Lisp-Entry "row" #f 60 8 60 11 ()}
        {Lisp-Entry "get-row" #f 60 27 60 35 ()}
        {Lisp-Entry "set-row" #f 60 27 60 35 ()}
        {Lisp-Entry "col" #f 61 8 61 11 ()}
        {Lisp-Entry "get-col" #f 61 27 61 35 ()}
        {Lisp-Entry "set-col" #f 61 27 61 35 ()}
        {Lisp-Entry "initialize" #f 64 11 64 21 ("col" "row" "set!" "c" "r")}
        {Lisp-Entry "copy-object" #f 69 11 69 22 ("col" "row" "Cell" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 73 11 73 25 ("get-col" "col" ":equal" "eq?" "not" "get-row" "row" "compare" "compared" "let" ":incompatible" "Cell" "is-not?" "if" "target")}
        {Lisp-Entry "print" #f 82 11 82 16 ("col" "row" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" #f 89 11 89 23 ("self" "error")}
        {Lisp-Entry "numeric-add" #f 93 11 93 22 ("self" "error" "else" "integer?" "get-col" "col" "get-row" "row" "+" "new" "Cell" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" #f 99 11 99 25 ("col" "row" "-" "Cell" "new")}
        {Lisp-Entry "numeric-multiply" #f 103 11 103 27 ("self" "error" "col" "row" "*" "Cell" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" #f 109 11 109 26 ("self" "error")}
        {Lisp-Entry "increase-row" #f 113 18 113 30 ("+" "row" "set!" "1" "delta")}
        {Lisp-Entry "increase-col" #f 117 18 117 30 ("+" "col" "set!" "1" "delta")}}
      {Lisp-Entry "new-cell" #f 121 27 121 35 ("Cell" "construct" "col" "row")}
      {Lisp-Entry "as" #f 128 19 128 21 ("get-col" "get-row" "Cell" "new" "c" "copy" "copy-cell")}
      {Lisp-Entry "as" #f 132 19 132 21 ("get-col" "get-row" "and" "c2" "c1" "=" "cell=")}
      {Lisp-Entry "cell<" #f 137 15 137 20 ()}
      {Lisp-Entry "<" #f 137 22 137 23 ("get-col" "=" "and" "<" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell<=" #f 145 15 145 21 ()}
      {Lisp-Entry "<=" #f 145 23 145 25 ("get-col" "<=" "=" "and" "<" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell>" #f 153 15 153 20 ()}
      {Lisp-Entry ">" #f 153 22 153 23 ("get-col" "=" "and" ">" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell>=" #f 161 15 161 21 ()}
      {Lisp-Entry ">=" #f 161 23 161 25 ("get-col" ">=" "=" "and" ">" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "as" #f 169 19 169 21 ("get-col" "get-row" "Cell" "new" "c2" "c1" "+" "cell+")}
      {Lisp-Entry "as" #f 181 19 181 21 ("get-col" "get-row" "Cell" "new" "c2" "c1" "-" "cell-")}
      {Lisp-Entry "Range" #f 198 7 198 12 ()
        {Lisp-Entry "start" #f 201 8 201 13 ()}
        {Lisp-Entry "end" #f 202 8 202 11 ()}
        {Lisp-Entry "initialize" #f 205 11 205 21 ("end" "start" "set!" "nextmethod" "e" "s")}
        {Lisp-Entry "copy-object" #f 211 11 211 22 ("end" "start" "Range" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 215 11 215 25 (":not-equal" "else" ":equal" "get-end" "end" "get-start" "start" "=" "and" ":incompatible" "Range" "is-not?" "cond" "target")}
        {Lisp-Entry "print" #f 224 11 224 16 ("end" "start" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-start" #f 231 25 231 34 ("start")}
        {Lisp-Entry "get-end" #f 235 25 235 32 ("end")}
        {Lisp-Entry "extent" #f 239 26 239 32 ("start" "end" "-")}
        {Lisp-Entry "extended?" #f 243 26 243 35 ("end" "start" "=" "not")}
        {Lisp-Entry "inside?" #f 247 18 247 25 ("end" "<" "start" ">=" "and" "n")}
        {Lisp-Entry "before?" #f 252 18 252 25 ("start" "<" "n")}
        {Lisp-Entry "after?" #f 256 18 256 24 ("end" ">" "n")}
        {Lisp-Entry "intersect?" #f 260 18 260 28 ("start" "get-end" ">=" "end" "get-start" "<" "and" "range")}
        {Lisp-Entry "intersect" #f 265 18 265 27 ("get-end" "end" "min" "get-start" "start" "max" "self" "class-of" "new" "intersect?" "when" "range")}}
      {Lisp-Entry "new-range" #f 270 27 270 36 ("Range" "construct" "end" "start")}
      {Lisp-Entry "as" #f 277 19 277 21 ("get-end" "get-start" "and" "r2" "r1" "=" "range=")}
      {Lisp-Entry "Range$Cell$" #f 287 7 287 18 ()
        {Lisp-Entry "start" #f 290 8 290 13 ()}
        {Lisp-Entry "get-start" #f 290 28 290 36 ()}
        {Lisp-Entry "end" #f 291 8 291 11 ()}
        {Lisp-Entry "get-end" #f 291 28 291 36 ()}
        {Lisp-Entry "initialize" #f 294 11 294 21 ("end" "start" "set!" "nextmethod" "e" "s")}
        {Lisp-Entry "copy-object" #f 300 11 300 22 ("end" "start" "Range$Cell$" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 304 11 304 25 (":not-equal" "else" ":equal" "get-end" "end" "get-start" "start" "=" "and" ":incompatible" "Range$Cell$" "is-not?" "cond" "target")}
        {Lisp-Entry "print" #f 313 11 313 16 ("end" "start" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "extent" #f 320 26 320 32 ("start" "end" "-")}
        {Lisp-Entry "extended?" #f 324 26 324 35 ("end" "start" "=" "not")}
        {Lisp-Entry "inside?" #f 328 18 328 25 ("end" "<" "start" ">=" "and" "n")}
        {Lisp-Entry "before?" #f 333 18 333 25 ("start" "<" "n")}
        {Lisp-Entry "after?" #f 337 18 337 24 ("end" ">" "n")}
        {Lisp-Entry "intersect?" #f 341 18 341 28 ("start" "get-end" ">=" "end" "get-start" "<" "and" "range")}
        {Lisp-Entry "intersect" #f 346 18 346 27 ("get-end" "end" "min" "get-start" "start" "max" "self" "class-of" "new" "intersect?" "when" "range")}}
      {Lisp-Entry "Point" #f 365 7 365 12 ()
        {Lisp-Entry "h" #f 368 8 368 9 ()}
        {Lisp-Entry "get-h" #f 368 22 368 30 ()}
        {Lisp-Entry "v" #f 369 8 369 9 ()}
        {Lisp-Entry "get-v" #f 369 22 369 30 ()}
        {Lisp-Entry "initialize" #f 372 11 372 21 ("v~self" "h~self" "set!" "nextmethod" "v" "h")}
        {Lisp-Entry "copy-object" #f 378 11 378 22 ("v" "h" "Point" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 382 11 382 25 (":not-equal" "else" ":equal" "get-v" "v" "get-h" "h" "=" "and" "target-point" "let" ":incompatible" "Point" "is-not?" "cond" "target")}
        {Lisp-Entry "print" #f 392 11 392 16 ("v" "h" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" #f 398 11 398 23 ("v" "2" "h" "expt" "+" "sqrt")}
        {Lisp-Entry "numeric-add" #f 402 11 402 22 ("self" "error" "else" "integer?" "get-height" "get-width" "Dimension" "get-v" "v" "get-h" "h" "+" "new" "Point" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" #f 409 11 409 25 ("v" "h" "-" "Point" "new")}
        {Lisp-Entry "numeric-multiply" #f 413 11 413 27 ("self" "error" "v" "h" "*" "Point" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" #f 419 11 419 26 ("self" "error")}}
      {Lisp-Entry "new-point" #f 423 27 423 36 ("Point" "construct" "v" "h")}
      {Lisp-Entry "as" #f 430 19 430 21 ("get-v" "get-h" "and" "p2" "p1" "=" "point=")}
      {Lisp-Entry "as" #f 435 19 435 21 ("get-v" "get-h" "Point" "new" "p2" "p1" "+" "point+")}
      {Lisp-Entry "as" #f 447 19 447 21 ("get-v" "get-h" "Point" "new" "p2" "p1" "-" "point-")}
      {Lisp-Entry "as" #f 465 19 465 21 ("get-v" "get-h" "Point" "new" "n" "p" "*" "point*")}
      {Lisp-Entry "Dimension" #f 476 7 476 16 ()
        {Lisp-Entry "width" #f 479 8 479 13 ()}
        {Lisp-Entry "get-width" #f 479 27 479 35 ()}
        {Lisp-Entry "height" #f 480 8 480 14 ()}
        {Lisp-Entry "get-height" #f 480 27 480 35 ()}
        {Lisp-Entry "initialize" #f 483 11 483 21 ("height" "width" "set!" "nextmethod" "h" "w")}
        {Lisp-Entry "copy-object" #f 489 11 489 22 ("height" "width" "Dimension" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 493 11 493 25 ("get-height" "height" ":equal" "neq?" "get-width" "width" "compare" "compared" "let" ":incompatible" "Dimension" "is-not?" "if" "target")}
        {Lisp-Entry "print" #f 502 11 502 16 ("height" "width" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" #f 508 11 508 23 ("self" "error")}
        {Lisp-Entry "numeric-add" #f 512 11 512 22 ("self" "error" "else" "integer?" "get-v" "get-h" "Point" "get-height" "height" "get-width" "width" "+" "new" "Dimension" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" #f 519 11 519 25 ("height" "width" "-" "Dimension" "new")}
        {Lisp-Entry "numeric-multiply" #f 523 11 523 27 ("self" "error" "height" "width" "*" "Dimension" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" #f 529 11 529 26 ("self" "error")}}
      {Lisp-Entry "new-dimension" #f 533 27 533 40 ("Dimension" "construct" "height" "width")}
      {Lisp-Entry "as" #f 540 19 540 21 ("get-height" "get-width" "and" "d2" "d1" "=" "dimension=")}
      {Lisp-Entry "as" #f 545 19 545 21 ("get-height" "get-width" "Dimension" "new" "d2" "d1" "+" "dimension+")}
      {Lisp-Entry "as" #f 551 19 551 21 ("get-height" "get-width" "Dimension" "new" "d2" "d1" "-" "dimension-")}
      {Lisp-Entry "as" #f 557 19 557 21 ("get-height" "get-width" "Dimension" "new" "n" "d" "*" "dimension*")}
      {Lisp-Entry "Rect-Class" #f 568 7 568 17 ()
        {Lisp-Entry "coerce-object" #f 571 11 571 24 ("nextmethod" "else" "0" "get-v" "get-h" "Rect" "new" "Point" "typecase" "object")}}
      {Lisp-Entry "Rect" #f 577 7 577 11 ()
        {Lisp-Entry "left" #f 581 8 581 12 ()}
        {Lisp-Entry "get-left" #f 581 34 581 42 ()}
        {Lisp-Entry "set-left" #f 581 34 581 42 ()}
        {Lisp-Entry "top" #f 582 8 582 11 ()}
        {Lisp-Entry "get-top" #f 582 34 582 42 ()}
        {Lisp-Entry "set-top" #f 582 34 582 42 ()}
        {Lisp-Entry "right" #f 583 8 583 13 ()}
        {Lisp-Entry "get-right" #f 583 34 583 42 ()}
        {Lisp-Entry "set-right" #f 583 34 583 42 ()}
        {Lisp-Entry "bottom" #f 584 8 584 14 ()}
        {Lisp-Entry "get-bottom" #f 584 34 584 42 ()}
        {Lisp-Entry "set-bottom" #f 584 34 584 42 ()}
        {Lisp-Entry "initialize" #f 587 11 587 21 ("bottom" "right" "top" "left" "set!" "nextmethod" "b" "r" "t" "l")}
        {Lisp-Entry "copy-object" #f 595 11 595 22 ("bottom" "right" "top" "left" "Rect" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 599 11 599 25 (":not-equal" "else" ":equal" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "=" "and" ":incompatible" "Rect" "is-not?" "cond" "target")}
        {Lisp-Entry "print" #f 608 11 608 16 ("bottom" "right" "top" "left" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "new-rect" #f 617 27 617 35 ("Rect" "construct" "bottom" "right" "top" "left")}
      {Lisp-Entry "as" #f 624 19 624 21 ("get-bottom" "get-right" "get-top" "get-left" "and" "r2" "r1" "=" "rect=")}}})
"homogeneous"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "homogeneous.jazz"} 1250720196
    {Lisp-Entry "jazz.dialect.language.homogeneous" #f 37 19 37 52 ("f64vector-length" "f64vector-set!" "f64vector-ref" "f32vector-length" "f32vector-set!" "f32vector-ref" "u64vector-length" "u64vector-set!" "u64vector-ref" "s64vector-length" "s64vector-set!" "s64vector-ref" "u32vector-length" "u32vector-set!" "u32vector-ref" "s32vector-length" "s32vector-set!" "s32vector-ref" "u16vector-length" "u16vector-set!" "u16vector-ref" "s16vector-length" "s16vector-set!" "s16vector-ref" "u8vector-length" "u8vector-set!" "u8vector-ref" "s8vector-length" "obj" "s8vector-set!" "n" "vector" "s8vector-ref" "jazz.dialect")
      {Lisp-Entry "S8Vector-Class" #f 53 7 53 21 ()
        {Lisp-Entry "allocate-sequence" #f 56 11 56 28 ("make-s8vector" "len")}}
      {Lisp-Entry "S8Vector" #f 60 17 60 25 ()
        {Lisp-Entry "initialize" #f 63 11 63 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 68 11 68 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 74 11 74 27 ("self" "s8vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 78 11 78 32 ("self" "s8vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 82 11 82 31 ("self" "s8vector-length")}
        {Lisp-Entry "sequence-tail" #f 86 11 86 24 ("self" "s8vector->list" "tail" "list->s8vector" "n")}
        {Lisp-Entry "sequence-last" #f 90 11 90 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 94 11 94 27 ("self" "s8vector->list" "butlast" "list->s8vector")}}
      {Lisp-Entry "U8Vector-Class" #f 115 7 115 21 ()
        {Lisp-Entry "allocate-sequence" #f 118 11 118 28 ("make-u8vector" "len")}}
      {Lisp-Entry "U8Vector" #f 122 17 122 25 ()
        {Lisp-Entry "initialize" #f 125 11 125 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 130 11 130 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 136 11 136 27 ("self" "u8vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 140 11 140 32 ("self" "u8vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 144 11 144 31 ("self" "u8vector-length")}
        {Lisp-Entry "sequence-tail" #f 148 11 148 24 ("self" "u8vector->list" "tail" "list->u8vector" "n")}
        {Lisp-Entry "sequence-last" #f 152 11 152 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 156 11 156 27 ("self" "u8vector->list" "butlast" "list->u8vector")}}
      {Lisp-Entry "S16Vector-Class" #f 177 7 177 22 ()
        {Lisp-Entry "allocate-sequence" #f 180 11 180 28 ("make-s16vector" "len")}}
      {Lisp-Entry "S16Vector" #f 184 17 184 26 ()
        {Lisp-Entry "initialize" #f 187 11 187 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 192 11 192 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 198 11 198 27 ("self" "s16vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 202 11 202 32 ("self" "s16vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 206 11 206 31 ("self" "s16vector-length")}
        {Lisp-Entry "sequence-tail" #f 210 11 210 24 ("self" "s16vector->list" "tail" "list->s16vector" "n")}
        {Lisp-Entry "sequence-last" #f 214 11 214 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 218 11 218 27 ("self" "s16vector->list" "butlast" "list->s16vector")}}
      {Lisp-Entry "U16Vector-Class" #f 239 7 239 22 ()
        {Lisp-Entry "allocate-sequence" #f 242 11 242 28 ("make-u16vector" "len")}}
      {Lisp-Entry "U16Vector" #f 246 17 246 26 ()
        {Lisp-Entry "initialize" #f 249 11 249 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 254 11 254 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 260 11 260 27 ("self" "u16vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 264 11 264 32 ("self" "u16vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 268 11 268 31 ("self" "u16vector-length")}
        {Lisp-Entry "sequence-tail" #f 272 11 272 24 ("self" "u16vector->list" "tail" "list->u16vector" "n")}
        {Lisp-Entry "sequence-last" #f 276 11 276 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 280 11 280 27 ("self" "u16vector->list" "butlast" "list->u16vector")}}
      {Lisp-Entry "S32Vector-Class" #f 301 7 301 22 ()
        {Lisp-Entry "allocate-sequence" #f 304 11 304 28 ("make-s32vector" "len")}}
      {Lisp-Entry "S32Vector" #f 308 17 308 26 ()
        {Lisp-Entry "initialize" #f 311 11 311 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 316 11 316 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 322 11 322 27 ("self" "s32vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 326 11 326 32 ("self" "s32vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 330 11 330 31 ("self" "s32vector-length")}
        {Lisp-Entry "sequence-tail" #f 334 11 334 24 ("self" "s32vector->list" "tail" "list->s32vector" "n")}
        {Lisp-Entry "sequence-last" #f 338 11 338 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 342 11 342 27 ("self" "s32vector->list" "butlast" "list->s32vector")}}
      {Lisp-Entry "U32Vector-Class" #f 363 7 363 22 ()
        {Lisp-Entry "allocate-sequence" #f 366 11 366 28 ("make-u32vector" "len")}}
      {Lisp-Entry "U32Vector" #f 370 17 370 26 ()
        {Lisp-Entry "initialize" #f 373 11 373 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 378 11 378 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 384 11 384 27 ("self" "u32vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 388 11 388 32 ("self" "u32vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 392 11 392 31 ("self" "u32vector-length")}
        {Lisp-Entry "sequence-tail" #f 396 11 396 24 ("self" "u32vector->list" "tail" "list->u32vector" "n")}
        {Lisp-Entry "sequence-last" #f 400 11 400 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 404 11 404 27 ("self" "u32vector->list" "butlast" "list->u32vector")}}
      {Lisp-Entry "S64Vector-Class" #f 425 7 425 22 ()
        {Lisp-Entry "allocate-sequence" #f 428 11 428 28 ("make-s64vector" "len")}}
      {Lisp-Entry "S64Vector" #f 432 17 432 26 ()
        {Lisp-Entry "initialize" #f 435 11 435 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 440 11 440 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 446 11 446 27 ("self" "s64vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 450 11 450 32 ("self" "s64vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 454 11 454 31 ("self" "s64vector-length")}
        {Lisp-Entry "sequence-tail" #f 458 11 458 24 ("self" "s64vector->list" "tail" "list->s64vector" "n")}
        {Lisp-Entry "sequence-last" #f 462 11 462 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 466 11 466 27 ("self" "s64vector->list" "butlast" "list->s64vector")}}
      {Lisp-Entry "U64Vector-Class" #f 487 7 487 22 ()
        {Lisp-Entry "allocate-sequence" #f 490 11 490 28 ("make-u64vector" "len")}}
      {Lisp-Entry "U64Vector" #f 494 17 494 26 ()
        {Lisp-Entry "initialize" #f 497 11 497 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 502 11 502 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 508 11 508 27 ("self" "u64vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 512 11 512 32 ("self" "u64vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 516 11 516 31 ("self" "u64vector-length")}
        {Lisp-Entry "sequence-tail" #f 520 11 520 24 ("self" "u64vector->list" "tail" "list->u64vector" "n")}
        {Lisp-Entry "sequence-last" #f 524 11 524 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 528 11 528 27 ("self" "u64vector->list" "butlast" "list->u64vector")}}
      {Lisp-Entry "F32Vector-Class" #f 549 7 549 22 ()
        {Lisp-Entry "allocate-sequence" #f 552 11 552 28 ("make-f32vector" "len")}}
      {Lisp-Entry "F32Vector" #f 556 17 556 26 ()
        {Lisp-Entry "initialize" #f 559 11 559 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 564 11 564 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 570 11 570 27 ("self" "f32vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 574 11 574 32 ("self" "f32vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 578 11 578 31 ("self" "f32vector-length")}
        {Lisp-Entry "sequence-tail" #f 582 11 582 24 ("self" "f32vector->list" "tail" "list->f32vector" "n")}
        {Lisp-Entry "sequence-last" #f 586 11 586 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 590 11 590 27 ("self" "f32vector->list" "butlast" "list->f32vector")}}
      {Lisp-Entry "F64Vector-Class" #f 611 7 611 22 ()
        {Lisp-Entry "allocate-sequence" #f 614 11 614 28 ("make-f64vector" "len")}}
      {Lisp-Entry "F64Vector" #f 618 17 618 26 ()
        {Lisp-Entry "initialize" #f 621 11 621 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 626 11 626 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 632 11 632 27 ("self" "f64vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 636 11 636 32 ("self" "f64vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 640 11 640 31 ("self" "f64vector-length")}
        {Lisp-Entry "sequence-tail" #f 644 11 644 24 ("self" "f64vector->list" "tail" "list->f64vector" "n")}
        {Lisp-Entry "sequence-last" #f 648 11 648 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 652 11 652 27 ("self" "f64vector->list" "butlast" "list->f64vector")}}}})
"increase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "increase.scm"} 1251729949
    {Lisp-Entry "jazz.dialect.syntax.increase" #f 37 19 37 47 ("scheme")
      {Lisp-Entry "increase!" #f 46 16 46 25 (",increment" "+" ",location" "set!" "car" "1" "null?" "if" "increment" "cddr" "rest" "source-code" "cadr" "location" "let" "form-src")}
      {Lisp-Entry "decrease!" #f 56 16 56 25 (",increment" "-" ",location" "set!" "car" "1" "null?" "if" "increment" "cddr" "rest" "source-code" "cadr" "location" "let" "form-src")}}})
"install"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "install.scm"} 1249913822
    {Lisp-Entry "jazz.install" #f 37 8 37 20 ("jazz.jazz-readtable" "'jazz.jazz-readtable" "jazz.global-value" "jazz.dialect" "'jazz.dialect" "core.library" "'core.library" "jazz.load-module" "lambda" "jazz.register-reader-extension")
      {Lisp-Entry "Point" #f 45 21 45 26 ("jazz.literals.construct-point")}
      {Lisp-Entry "Dimension" #f 46 21 46 30 ("jazz.literals.construct-dimension")}
      {Lisp-Entry "Cell" #f 47 21 47 25 ("jazz.literals.construct-cell")}
      {Lisp-Entry "Rect" #f 48 21 48 25 ("jazz.literals.construct-rect")}
      {Lisp-Entry "Range" #f 49 21 49 26 ("jazz.literals.construct-range")}
      {Lisp-Entry "Exception-Detail" #f 50 21 50 37 ("jazz.literals.construct-exception-detail")}
      {Lisp-Entry "Walk-Location" #f 51 21 51 34 ("jazz.literals.construct-walk-location")}}})
"jazz"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "walker" "jazz.jazz"} 1251206746
    {Lisp-Entry "jazz.dialect.walker.jazz" #f 37 19 37 43 ("jazz.dialect")
      {Lisp-Entry "Definition-Declaration" #f 49 7 49 29 ()
        {Lisp-Entry "expansion" #f 52 8 52 17 ()}
        {Lisp-Entry "get-expansion" #f 52 25 52 33 ()}
        {Lisp-Entry "signature" #f 53 8 53 17 ()}
        {Lisp-Entry "get-signature" #f 53 25 53 33 ()}
        {Lisp-Entry "value" #f 54 8 54 13 ()}
        {Lisp-Entry "get-value" #f 54 25 54 33 ()}}
      {Lisp-Entry "Specialize" #f 62 7 62 17 ()}
      {Lisp-Entry "Generic-Declaration" #f 70 7 70 26 ()
        {Lisp-Entry "dispatch-types" #f 73 8 73 22 ()}
        {Lisp-Entry "get-dispatch-types" #f 73 30 73 38 ()}
        {Lisp-Entry "signature" #f 74 8 74 17 ()}
        {Lisp-Entry "get-signature" #f 74 30 74 38 ()}
        {Lisp-Entry "body" #f 75 8 75 12 ()}
        {Lisp-Entry "get-body" #f 75 30 75 38 ()}}
      {Lisp-Entry "Specific-Declaration" #f 83 7 83 27 ()
        {Lisp-Entry "generic" #f 86 8 86 15 ()}
        {Lisp-Entry "get-generic" #f 86 25 86 33 ()}
        {Lisp-Entry "signature" #f 87 8 87 17 ()}
        {Lisp-Entry "get-signature" #f 87 25 87 33 ()}
        {Lisp-Entry "body" #f 88 8 88 12 ()}
        {Lisp-Entry "get-body" #f 88 25 88 33 ()}
        {Lisp-Entry "root?" #f 89 8 89 13 ()}
        {Lisp-Entry "get-root?" #f 89 25 89 33 ()}}
      {Lisp-Entry "Category-Declaration" #f 97 7 97 27 ()
        {Lisp-Entry "implementor" #f 100 8 100 19 ()}
        {Lisp-Entry "get-implementor" #f 100 27 100 35 ()}
        {Lisp-Entry "metaclass" #f 101 8 101 17 ()}
        {Lisp-Entry "get-metaclass" #f 101 27 101 35 ()}}
      {Lisp-Entry "Class-Declaration" #f 109 7 109 24 ()
        {Lisp-Entry "ascendant" #f 112 8 112 17 ()}
        {Lisp-Entry "get-ascendant" #f 112 34 112 42 ()}
        {Lisp-Entry "ascendant-relation" #f 113 8 113 26 ()}
        {Lisp-Entry "get-ascendant-relation" #f 113 34 113 42 ()}
        {Lisp-Entry "ascendant-base" #f 114 8 114 22 ()}
        {Lisp-Entry "get-ascendant-base" #f 114 34 114 42 ()}
        {Lisp-Entry "interfaces" #f 115 8 115 18 ()}
        {Lisp-Entry "get-interfaces" #f 115 34 115 42 ()}}
      {Lisp-Entry "Interface-Declaration" #f 123 7 123 28 ()
        {Lisp-Entry "ascendants" #f 126 8 126 18 ()}
        {Lisp-Entry "get-ascendants" #f 126 26 126 34 ()}}
      {Lisp-Entry "Field-Declaration" #f 134 7 134 24 ()}
      {Lisp-Entry "Slot-Declaration" #f 142 7 142 23 ()
        {Lisp-Entry "initialize" #f 145 8 145 18 ()}
        {Lisp-Entry "get-initialize" #f 145 27 145 35 ()}
        {Lisp-Entry "getter-name" #f 146 8 146 19 ()}
        {Lisp-Entry "get-getter-name" #f 146 27 146 35 ()}
        {Lisp-Entry "setter-name" #f 147 8 147 19 ()}
        {Lisp-Entry "get-setter-name" #f 147 27 147 35 ()}}
      {Lisp-Entry "Property-Declaration" #f 155 7 155 27 ()
        {Lisp-Entry "getter" #f 158 8 158 14 ()}
        {Lisp-Entry "get-getter" #f 158 22 158 30 ()}
        {Lisp-Entry "setter" #f 159 8 159 14 ()}
        {Lisp-Entry "get-setter" #f 159 22 159 30 ()}}
      {Lisp-Entry "Method-Declaration" #f 167 7 167 25 ()
        {Lisp-Entry "root" #f 170 8 170 12 ()}
        {Lisp-Entry "get-root" #f 170 28 170 36 ()}
        {Lisp-Entry "propagation" #f 171 8 171 19 ()}
        {Lisp-Entry "get-propagation" #f 171 28 171 36 ()}
        {Lisp-Entry "abstraction" #f 172 8 172 19 ()}
        {Lisp-Entry "get-abstraction" #f 172 28 172 36 ()}
        {Lisp-Entry "expansion" #f 173 8 173 17 ()}
        {Lisp-Entry "get-expansion" #f 173 28 173 36 ()}
        {Lisp-Entry "remote" #f 174 8 174 14 ()}
        {Lisp-Entry "get-remote" #f 174 28 174 36 ()}
        {Lisp-Entry "synchronized" #f 175 8 175 20 ()}
        {Lisp-Entry "get-synchronized" #f 175 28 175 36 ()}
        {Lisp-Entry "signature" #f 176 8 176 17 ()}
        {Lisp-Entry "get-signature" #f 176 28 176 36 ()}
        {Lisp-Entry "body" #f 177 8 177 12 ()}
        {Lisp-Entry "get-body" #f 177 28 177 36 ()}}
      {Lisp-Entry "With-Self" #f 185 7 185 16 ()
        {Lisp-Entry "body" #f 188 8 188 12 ()}
        {Lisp-Entry "get-body" #f 188 20 188 28 ()}}
      {Lisp-Entry "With-Dynamic-Self" #f 196 7 196 24 ()
        {Lisp-Entry "code" #f 199 8 199 12 ()}
        {Lisp-Entry "get-code" #f 199 20 199 28 ()}
        {Lisp-Entry "body" #f 200 8 200 12 ()}
        {Lisp-Entry "get-body" #f 200 20 200 28 ()}}
      {Lisp-Entry "Cast" #f 208 7 208 11 ()
        {Lisp-Entry "expression" #f 211 8 211 18 ()}
        {Lisp-Entry "get-expression" #f 211 26 211 34 ()}}
      {Lisp-Entry "Construct" #f 219 7 219 16 ()
        {Lisp-Entry "class" #f 222 8 222 13 ()}
        {Lisp-Entry "get-class" #f 222 22 222 30 ()}
        {Lisp-Entry "values" #f 223 8 223 14 ()}
        {Lisp-Entry "get-values" #f 223 22 223 30 ()}}
      {Lisp-Entry "Dispatch" #f 231 7 231 15 ()
        {Lisp-Entry "name" #f 234 8 234 12 ()}
        {Lisp-Entry "get-name" #f 234 25 234 33 ()}
        {Lisp-Entry "arguments" #f 235 8 235 17 ()}
        {Lisp-Entry "get-arguments" #f 235 25 235 33 ()}}
      {Lisp-Entry "Jazz-Dialect" #f 243 7 243 19 ()}
      {Lisp-Entry "Jazz-Walker" #f 251 7 251 18 ()}}})
"list"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "list.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.core.list" #f 37 18 37 40 ()
      {Lisp-Entry "jazz.proper-list" #f 40 9 40 25 ("jazz.queue-list" "%%cdr" "set!" "%%car" "jazz.enqueue" "%%pair?" "%%while" "jazz.new-queue" "proper" "let" "lst")}}})
"literals"
 ({Lisp-File-Entry {File jazz "src" "jazz" "literals.jazz"} 1249913822
    {Lisp-Entry "jazz.literals" #f 37 9 37 22 ("jazz")
      {Lisp-Entry "construct-point" #f 45 21 45 36 ("Point" "new" "v" "h")}
      {Lisp-Entry "construct-dimension" #f 49 21 49 40 ("Dimension" "new" "height" "width")}
      {Lisp-Entry "construct-cell" #f 53 21 53 35 ("Cell" "new" "col" "row")}
      {Lisp-Entry "construct-rect" #f 57 21 57 35 ("Rect" "new" "bottom" "right" "top" "left")}
      {Lisp-Entry "construct-range" #f 61 21 61 36 ("Range" "new" "end" "start")}
      {Lisp-Entry "construct-exception-detail" #f 70 21 70 47 ("Exception-Detail" "new" "children" "location" "title" "icon")}
      {Lisp-Entry "construct-walk-location" #f 79 21 79 44 ("Walk-Location" "new" "locat" "declaration-locator" "module-locator")}}})
"loop"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "loop.scm"} 1251729949
    {Lisp-Entry "jazz.dialect.syntax.loop" #f 37 19 37 43 ("scheme")
      {Lisp-Entry "private" #f 47 8 47 15 ("jazz.->string")}
      {Lisp-Entry "private" #f 48 8 48 15 ("jazz.error")}
      {Lisp-Entry "loop" #f 135 16 135 20 ("expand-loop" "sourcify-if" "source-code" "cdr" "clauses" "let" "form-src")}
      {Lisp-Entry "noobject" #f 142 8 142 16 ("noobject" "'noobject" "list")}
      {Lisp-Entry "expand-loop" #f 146 9 146 20 ("set-cdr!" "'set-cdr!" "'begin" "jazz.null?" "'jazz.null?" "'cons" "'<list+>" "'<list>" "cns" "ptr" ",@unless-actions" "unless-actions" ",@when-actions" ",test" "when-actions" "body" "'when" "res" "what" ">" "'>" "rpt" "count" "specifier?" "then" "then-key" "first" "symbol?" "end" "decrease!" "'decrease!" ">=" "'>=" "downto" "below" "cddr" "<=" "'<=" "cadr" "scan" "by" "'increase!" "update" "to" "from" "in-properties" "get-next" "'get-next" "done?" "'done?" "iterate-sequence" "'iterate-sequence" "Iterator" "'Iterator" "is?" "'is?" "'if" "'<Iterator>" "itr" "val" "iterator" "in-sequence" "1" "+" "'+" "element" "'element" "<" "'<" "length" "'length" "'<fx>" "'<vector>" "len" "vec" "vector" "in-vector" "error" "remainder" "keyword" "'cdr" "'car" "'set!" "'null?" "either" "'<Object>" "in" "parse-for" "receive" "lst" "set-finally" "expr" "add-epilogue" "after" "add-after" "enqueue-list" "action-list" "add-actions" "action" "before" "add-before" "test" "add-test" "exit-safe" "values" "'not" "add-initial-test" "'<bool>" "'<Object+>" "ext" "ret" "get-return/exit" "add-with" "append" "list" "binding" "null?" "value" "type" "variable" "add-binding" "cons" "Unbound" "increase!" "->string" "string-append" "string->symbol" "symbol" "prefix" "unique" ",@finally" "begin" ",return" ",exit" "eq?" ",@epilogue" ",@afters" ",@actions" ",withs" ",@befores" ",@tests" "and" ",bindings" "let*" "queue-list" "cdr" "else" "process-finally" "process-return" "process-collect" "collect" "process-sum" "sum" "process-do" "do" "process-unless" "unless" "process-when" "when" "process-every" "every" "process-some" "some" "process-repeat" "repeat" "process-for" "for" "process-with" "with" "case" "rest" "key" "bind" "add-action" "source-code" "pair?" "not" "if" "car" "clause" "not-null?" "while" "new-queue" "expand-loop" "process-clauses" "set!" "expand" "define" "0" "unique-rank" "finally" "epilogue" "afters" "actions" "befores" "withs" "tests" "exit" "noobject" "return" "bindings" "let" "clauses")}}})
"macros"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "macros.scm"} 1251206746
    {Lisp-Entry "jazz.dialect.syntax.macros" #f 37 19 37 45 ("scheme")
      {Lisp-Entry "private" #f 43 8 43 15 ("jazz.->string")}
      {Lisp-Entry "private" #f 44 8 44 15 ("jazz.error")}
      {Lisp-Entry "constant" #f 47 16 47 24 (",value" ",name" "public" "definition" "sourcify-if" "caddr" "value" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "enumeration" #f 55 16 55 27 (",@definitions" "begin" "public" "definition" "declaration" "lambda" "map" "definitions" "sourcify-if" "cddr" "declarations" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "when" #f 64 16 64 20 ("unspecified" "'unspecified" "list" "null?" "begin" ",test" "if" "sourcify-if" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "unless" #f 77 16 77 22 (",@body" "begin" ",test" "not" "if" "sourcify-if" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "prog1" #f 87 16 87 21 (",@body" "begin" ",returned" ",value" "sourcify-if" "generate-symbol" "value" "cddr" "body" "source-code" "cadr" "returned" "let" "form-src")}
      {Lisp-Entry "while" #f 98 16 98 21 (",@body" "begin" ",test" "if" ",iter" "sourcify-if" "generate-symbol" "iter" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "unwind-protect" #f 111 16 111 30 (",@protection" ",body" "function" "dynamic-wind" "sourcify-if" "cddr" "protection" "source-code" "cadr" "body" "let" "form-src")}
      {Lisp-Entry "catch" #f 124 16 124 21 ("desourcify" "error" "else" "car" "pair?" ",@body" "exc" "lambda" ",predicate/type" "call-with-catch" "symbol?" "cond" "sourcify-if" "cddr" "body" "source-code" "cadr" "predicate/type" "let" "form-src")}
      {Lisp-Entry "~" #f 141 16 141 17 (",name" "',name" ",obj" "dispatch" "apply" "rest" "obj" "lambda" "with-uniqueness" "sourcify-if" "cddr" "car" "object" "cadr" "source-code" "name" "let" "form-src")}
      {Lisp-Entry "form>>" #f 152 15 152 21 (",form" "',form" "jml->form" "form")}
      {Lisp-Entry "expand-push!" #f 158 9 158 21 ("cons" "'cons" "set!" "'set!" "list" "value" "location")}
      {Lisp-Entry "expand-pop!" #f 164 9 164 20 ("cdr" "'cdr" "set!" "'set!" "list" "location")}
      {Lisp-Entry "expand-assert" #f 168 9 168 22 ("proc" "car" "error" "'error" "unless" "'unless" "list" ":text" "->string" "string-append" "message" "expr" "let*" "null?" "if" "rest" "first")}
      {Lisp-Entry "expand-assert-type" #f 179 9 179 27 ("type-name" "'type-name" "error" "'error" "is-not?" "'is-not?" "when" "'when" "list" "let*" "'let*" "cons" "generate-symbol" "value" "let" "type" "expr")}
      {Lisp-Entry "expand-error?" #f 187 9 187 22 ("begin" "'begin" "cons" "Error" "'Error" "catch" "'catch" "list" "generate-symbol" "err" "let" "body")}
      {Lisp-Entry "c-constant" #f 200 16 200 26 (",value" ",name" "public" "definition" "sourcify-if" "caddr" "value" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "c-enumeration" #f 208 16 208 29 (",@definitions" "begin" "public" "definition" "declaration" "lambda" "map" "definitions" "sourcify-if" "cddr" "declarations" "source-code" "cadr" "name" "let" "form-src")}}})
"memory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "memory.scm"} 1248276859
    {Lisp-Entry "jazz.dialect.core.memory" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.gc" #f 40 9 40 16 ("%%gc")}
      {Lisp-Entry "jazz.process-memory" #f 49 9 49 28 ("inexact->exact" "values" "19" "nonmovable" "18" "movable" "17" "live" "16" "alloc" "15" "f64vector-ref" "heap" "##process-statistics" "vec" "let")}
      {Lisp-Entry "jazz.symbols-memory" #f 62 9 62 28 ("values" "##symbol-table" "%%vector->list" "%%reverse" "%%cons" "2" "%%vector-ref" "%%symbol?" "if" "loop" "map" "%%symbol->string" "%%string-length" "s" "%%length" "%%fx+" "set!" "lst" "lambda" "for-each" "chars" "0" "count" "let")}
      {Lisp-Entry "jazz.classes-statistics" #f 84 9 84 32 ("values" "jazz.Object" "method" "slot" "for-each" "process-method" "jazz.Method" "process-slot" "jazz.Slot" "jazz.is?" "cond" "field" "name" "lambda" "%%iterate-table" "%%get-class-interface-table" "%%get-class-class-table" "jazz.vector-vector-size" "%%get-class-core-vtable" "%%get-class-slots" "%%get-class-interfaces" "%%get-category-descendants" "jazz.list-size" "%%get-category-ancestors" "%%get-category-fields" "jazz.table-size" "jazz.vector-size" "fx+" "1" "%%fx+" "set!" "class" "process-class" "define" "sz-methods" "nb-methods" "sz-slots" "nb-slots" "sz-interfaces" "nb-interfaces" "sz-classes" "0" "nb-classes" "let")}
      {Lisp-Entry "jazz.class-instances-count" #f 128 9 128 35 ("%%get-category-descendants" "for-each" "%%get-category-name" "jazz.instances-statistics" "%%table-ref" "%%fx+" "set!" "iter" "0" "count" "let" "class")}
      {Lisp-Entry "jazz.class-instances-size" #f 136 9 136 34 ("%%get-category-descendants" "for-each" "%%get-class-instance-size" "%%get-category-name" "jazz.instances-statistics" "%%table-ref" "%%fx*" "%%fx+" "set!" "iter" "0" "size" "let" "class")}
      {Lisp-Entry "jazz.word-bytes" #f 150 8 150 23 ("4")}
      {Lisp-Entry "jazz.f64-bytes" #f 151 8 151 22 ("8")}
      {Lisp-Entry "jazz.pair-bytes" #f 152 8 152 23 ("12")}
      {Lisp-Entry "jazz.table-bytes" #f 153 8 153 24 ("32")}
      {Lisp-Entry "jazz.vector-size" #f 156 9 156 25 ("%%vector-length" "%%fx*" "jazz.word-bytes" "%%fx+" "v")}
      {Lisp-Entry "jazz.safe-vector-size" #f 159 9 159 30 ("0" "jazz.vector-size" "%%vector?" "if" "v")}
      {Lisp-Entry "jazz.f64vector-size" #f 164 9 164 28 ("f64vector-length" "jazz.f64-bytes" "%%fx*" "jazz.word-bytes" "%%fx+" "v")}
      {Lisp-Entry "jazz.vector-vector-size" #f 167 9 167 32 ("1" "%%vector-ref" "%%vector-length" "%%fx<" "size" "n" "iter" "let" "jazz.vector-size" "%%fx+" "0" "%%not" "if" "v")}
      {Lisp-Entry "jazz.list-size" #f 177 9 177 23 ("%%length" "jazz.pair-bytes" "%%fx*" "l")}
      {Lisp-Entry "jazz.table-size" #f 180 9 180 24 ("0" "%%fx+" "##gc-hash-table?" "if" "%%vector-length" "1" "fx+" "jazz.word-bytes" "%%fx*" "4" "floats" "5" "gcht2" "3" "%%vector-ref" "gcht1" "let" "t")}}})
"network"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "network.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.core.network" #f 37 18 37 43 ()
      {Lisp-Entry "jazz.open-tcp-client" #f 42 12 42 32 ("open-tcp-client")}
      {Lisp-Entry "jazz.open-tcp-server" #f 43 12 43 32 ("open-tcp-server")}
      {Lisp-Entry "jazz.tcp-server-socket-info" #f 44 12 44 39 ("tcp-server-socket-info")}
      {Lisp-Entry "jazz.call-with-tcp-client" #f 46 13 46 38 ("close-port" "if" "open-tcp-client" "set!" "lambda" "dynamic-wind" "port" "let" "proc" "settings")}
      {Lisp-Entry "jazz.socket-info-address" #f 57 12 57 36 ("socket-info-address")}
      {Lisp-Entry "jazz.socket-info-port-number" #f 58 12 58 40 ("socket-info-port-number")}}})
"number"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "number.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.core.number" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.fixnum->flonum" #f 47 9 47 28 ("jazz.Fixnum" "jazz.type-error" "##fixnum->flonum" "%%fixnum?" "if" "n")}
      {Lisp-Entry "jazz.flonum->fixnum" #f 52 9 52 28 ("jazz.Flonum" "jazz.type-error" "##flonum->fixnum" "%%flonum?" "if" "n")}
      {Lisp-Entry "jazz.+infinity" #f 63 8 63 22 ("+inf.0")}
      {Lisp-Entry "jazz.-infinity" #f 66 8 66 22 ("-inf.0")}
      {Lisp-Entry "jazz.random-integer" #f 77 12 77 31 ("random-integer")}
      {Lisp-Entry "jazz.random-real" #f 78 12 78 28 ("random-real")}
      {Lisp-Entry "jazz.random-source-randomize!" #f 79 12 79 41 ("random-source-randomize!")}
      {Lisp-Entry "jazz.random-source-pseudo-randomize!" #f 80 12 80 48 ("random-source-pseudo-randomize!")}
      {Lisp-Entry "jazz.default-random-source" #f 81 12 81 38 ("default-random-source")}}})
"object"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "object.jazz"} 1250272407
    {Lisp-Entry "jazz.dialect.language.object" #f 37 19 37 47 ("jazz.dialect")
      {Lisp-Entry "private" #f 46 8 46 15 ("jazz.error")}
      {Lisp-Entry "Object" #f 54 17 54 23 ()
        {Lisp-Entry "initialize" #f 57 19 57 29 ()}
        {Lisp-Entry "destroy" #f 61 19 61 26 ()}
        {Lisp-Entry "print" #f 65 26 65 31 ("print-detail" "function" "print-unreadable" "self" "object?" "if" "detail" "output")}
        {Lisp-Entry "print-detail" #f 74 21 74 33 ("write" "self" "display" ":human" "eq?" "if" "detail" "output")}
        {Lisp-Entry "class-actions" #f 80 26 80 39 ()}
        {Lisp-Entry "focus-actions" #f 84 26 84 39 ()}
        {Lisp-Entry "guest-actions" #f 88 26 88 39 ()}
        {Lisp-Entry "initialized?" #f 92 18 92 30 ("self" "object-initialized?")}
        {Lisp-Entry "hash-object" #f 96 26 96 37 ("self" "error")}
        {Lisp-Entry "copy-object" #f 100 29 100 40 ("self" "error" "deep?")}
        {Lisp-Entry "compare-object" #f 104 29 104 43 (":incompatible" "object")}
        {Lisp-Entry "ci-compare-object" #f 108 29 108 46 (":incompatible" "object")}
        {Lisp-Entry "describe-object" #f 112 29 112 44 ("print" "printer")}
        {Lisp-Entry "release" #f 116 26 116 33 ()}
        {Lisp-Entry "close" #f 120 26 120 31 ("self" "call-destroy")}
        {Lisp-Entry "destroy-mandatory" #f 124 21 124 38 ("self" "set-must-destroy")}
        {Lisp-Entry "destroyed?" #f 128 18 128 28 ("self" "object-destroyed?")}
        {Lisp-Entry "get-sort-value" #f 132 26 132 40 ()}
        {Lisp-Entry "redirect-handler" #f 136 29 136 45 ("self" "sender" "handler")}
        {Lisp-Entry "coerce-string" #f 140 29 140 42 ("self" "error")}
        {Lisp-Entry "iterate-object" #f 144 29 144 43 ("self" "error")}
        {Lisp-Entry "object-similar?" #f 153 29 153 44 ("self" "eq?" "object")}
        {Lisp-Entry "object-alphabetic?" #f 157 29 157 47 ("self" "error")}
        {Lisp-Entry "object-numeric?" #f 161 29 161 44 ("self" "error")}
        {Lisp-Entry "object-alphanumeric?" #f 165 29 165 49 ("self" "error")}
        {Lisp-Entry "object-whitespace?" #f 169 29 169 47 ("self" "error")}
        {Lisp-Entry "object-upper-case?" #f 173 29 173 47 ("self" "error")}
        {Lisp-Entry "object-lower-case?" #f 177 29 177 47 ("self" "error")}
        {Lisp-Entry "object-upcase" #f 181 29 181 42 ("self" "error")}
        {Lisp-Entry "object-downcase" #f 185 29 185 44 ("self" "error")}
        {Lisp-Entry "object-capitalize" #f 189 29 189 46 ("self" "error")}}
      {Lisp-Entry "compare" #f 193 27 193 34 ("compare-object" ":equal" "eqv?" "if" "b" "a")}
      {Lisp-Entry "ci-compare" #f 199 27 199 37 ("ci-compare-object" ":equal" "eqv?" "if" "b" "a")}
      {Lisp-Entry "copy" #f 205 20 205 24 ("subcopy" "obj")}
      {Lisp-Entry "subcopy" #f 209 20 209 27 ("copy-object" "deep?" "obj")}
      {Lisp-Entry "print-unreadable" #f 213 20 213 36 ("string=?" "unless" "display" "object->serial" "serial" "get-output-string" "open-output-string" "string" "class-of" "get-name" "identifier-name" "class-name" "let" "proc" "output" "object")}
      {Lisp-Entry "native-class" #f 229 21 229 33 ("error" "name")}
      {Lisp-Entry "=-hash" #f 233 13 233 19 ("hash-object" "obj")}
      {Lisp-Entry "object-initialized?" #f 237 13 237 32 ("obj")}
      {Lisp-Entry "get-must-destroy" #f 242 13 242 29 ("obj")}
      {Lisp-Entry "set-must-destroy" #f 246 13 246 29 ("obj")}
      {Lisp-Entry "set-was-destroyed" #f 251 13 251 30 ("obj")}
      {Lisp-Entry "object-destroyed?" #f 256 21 256 38 ("obj")}
      {Lisp-Entry "destroy-mandatory" #f 261 21 261 38 ()}
      {Lisp-Entry "call-destroy" #f 266 21 266 33 ("set-was-destroyed" "destroy" "obj")}}})
"parse"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "language" "parse.jazz"} 1248708411
    {Lisp-Entry "jazz.dialect.language.parse" #f 37 19 37 46 ("jazz.dialect")
      {Lisp-Entry "parse-integer" #f 49 20 49 33 ("type:" "object:" "Convertion-Error" "new" "signal" "read-string-element" "numeric?" "empty-string?" "not" "and" "if" "string")}
      {Lisp-Entry "parse-hexadecimal" #f 55 20 55 37 ("format" "read-string-element" "string")}
      {Lisp-Entry "parse-boolean" #f 59 20 59 33 ("type:" "object:" "Convertion-Error" "new" "signal" "else" "ci=?" "or" "not" "cond" "string")}
      {Lisp-Entry "parse-strings" #f 66 20 66 33 ("split" "trim-spaces" "function" "map" "string=?" "empty-string?" "or" "if" "separator" "separator:" "string")}
      {Lisp-Entry "parse-delimited-string" #f 74 20 74 42 ("parse-strings" "function" "map" "separator" "separator:" "string")}}})
"pathname"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "pathname.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.core.pathname" #f 37 18 37 44 ()
      {Lisp-Entry "jazz.pathname-expand" #f 42 12 42 32 ("path-expand")}
      {Lisp-Entry "jazz.file-rename" #f 43 12 43 28 ("rename-file")}
      {Lisp-Entry "jazz.directory-delete" #f 44 12 44 33 ("delete-directory")}
      {Lisp-Entry "jazz.current-directory" #f 46 13 46 35 ("jazz.pathname-exists?" "if" "jazz.pathname-normalize" "current-directory" "dir" "let")}
      {Lisp-Entry "jazz.current-directory-set!" #f 53 13 53 40 ("current-directory" "dir")}
      {Lisp-Entry "jazz.with-current-directory" #f 56 13 56 40 ("current-directory" "parameterize" "thunk" "dir")}}})
"port"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "port.scm"} 1248214776
    {Lisp-Entry "jazz.dialect.core.port" #f 37 18 37 40 ("jazz.dialect.language.debug.get-console-port" "set!")
      {Lisp-Entry "jazz.system-format" #f 45 8 45 26 ("jazz.format")}
      {Lisp-Entry "jazz.close-port" #f 56 12 56 27 ("close-port")}
      {Lisp-Entry "jazz.input-port-timeout-set!" #f 57 12 57 40 ("input-port-timeout-set!")}
      {Lisp-Entry "jazz.output-port-timeout-set!" #f 58 12 58 41 ("output-port-timeout-set!")}
      {Lisp-Entry "jazz.dialect.language.debug.get-console-port" #f 68 8 68 52 ()}
      {Lisp-Entry "jazz.get-console-port" #f 74 9 74 30 ("jazz.dialect.language.debug.get-console-port" "if")}}})
"profile"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "profile.scm"} 1248276859
    {Lisp-Entry "jazz.dialect.core.profile" #f 37 18 37 43 ()
      {Lisp-Entry "active-profile" #f 40 22 40 36 ()}
      {Lisp-Entry "profile-total" #f 41 22 41 35 ()}
      {Lisp-Entry "profile-unknown" #f 42 22 42 37 ()}
      {Lisp-Entry "profile-calls" #f 43 22 43 35 ()}
      {Lisp-Entry "profile-new" #f 44 22 44 33 ()}
      {Lisp-Entry "profile-reset!" #f 45 22 45 36 ()}
      {Lisp-Entry "profile-start!" #f 46 22 46 36 ()}
      {Lisp-Entry "profile-stop!" #f 47 22 47 35 ()}
      {Lisp-Entry "profile-running?" #f 48 22 48 38 ()}
      {Lisp-Entry "jazz.statprof-loaded?" #f 56 8 56 29 ()}
      {Lisp-Entry "jazz.load-statprof" #f 60 9 60 27 ("set!" "statprof" "'statprof" "jazz.load-module" "begin" "jazz.statprof-loaded?" "%%not" "if")}
      {Lisp-Entry "jazz.active-profile" #f 67 9 67 28 ("active-profile" "jazz.load-statprof")}
      {Lisp-Entry "jazz.profile-total" #f 72 9 72 27 ("profile-total" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.profile-unknown" #f 77 9 77 29 ("profile-unknown" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.profile-calls" #f 82 9 82 27 ("profile-calls" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.new-profile" #f 87 9 87 25 ("profile-new" "%%apply" "jazz.load-statprof" "rest")}
      {Lisp-Entry "jazz.reset-profile" #f 92 9 92 27 ("profile-reset!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.start-profile" #f 97 9 97 27 ("profile-start!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.stop-profile" #f 102 9 102 26 ("profile-stop!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.profile-running?" #f 107 9 107 30 ("profile-running?" "jazz.load-statprof")}}})
"reader"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "reader.scm"} 1251746526
    {Lisp-Entry "jazz.dialect.core.reader" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.make-jazz-readtable" #f 47 13 47 37 ("jazz.jazzify-readtable!" "##main-readtable" "%%readtable-copy" "readtable-max-unescaped-char-set" "readtable" "let")}
      {Lisp-Entry "jazz.jazzify-readtable!" #f 53 13 53 36 ("jazz.read-delimited-string" "%%readtable-char-sharp-handler-set!" "jazz.read-comment" "jazz.read-literal" "%%readtable-char-class-set!" "jazz.named-chars" "jazz.readtable-named-char-table" "%%append" "jazz.readtable-named-char-table-set!" "readtable")}
      {Lisp-Entry "jazz.named-chars" #f 60 12 60 28 ()}
      {Lisp-Entry "jazz.in-expression-comment?" #f 108 12 108 39 ("make-parameter")}
      {Lisp-Entry "jazz.read-literal" #f 112 13 112 30 ("jazz.construct-literal" "else" "%%cdr" "%%car" "jazz.new-literal" "jazz.walk-for" "%%null?" "jazz.in-expression-comment?" "jazz.read-literals?" "%%not" "or" "cond" "jazz.readenv-wrap" "%%build-list" "lst" "jazz.error" "peek-char" "%%eqv?" "if" "read-char" "%%readenv-current-filepos" "start-pos" "jazz.readenv-port" "port" "let" "c" "re")}
      {Lisp-Entry "jazz.read-comment" #f 134 13 134 30 ("%%read-datum-or-label-or-none-or-dot" "read" "read-char" "jazz.in-expression-comment?" "parameterize" "jazz.readenv-port" "port" "let" "c" "re")}
      {Lisp-Entry "jazz.read-delimited-string" #f 143 13 143 39 ("get-output-string" "jazz.readenv-wrap" "peek-char" "and" "else" "write-char" "case" "escaped" "%%eqv?" "%%eof-object?" "cond" "c" "iter" "open-output-string" "output" "read-char" "jazz.readenv-port" "port" "let" "start-pos" "next" "re")}
      {Lisp-Entry "jazz.jazz-readtable" #f 172 12 172 31 ("jazz.make-jazz-readtable")}
      {Lisp-Entry "jazz.with-jazz-readtable" #f 176 13 176 37 ("jazz.jazz-readtable" "current-readtable" "parameterize" "thunk")}
      {Lisp-Entry "jazz.char-symbol" #f 181 13 181 29 ("%%car" "and" "jazz.rassq" "res" "jazz.jazz-readtable" "jazz.readtable-named-char-table" "table" "let" "char")}
      {Lisp-Entry "jazz.eof-object" #f 197 13 197 28 ("#!eof")}
      {Lisp-Entry "jazz.read-u8" #f 200 12 200 24 ("read-u8")}
      {Lisp-Entry "jazz.write-u8" #f 201 12 201 25 ("write-u8")}
      {Lisp-Entry "jazz.read-subu8vector" #f 202 12 202 33 ("read-subu8vector")}
      {Lisp-Entry "jazz.write-subu8vector" #f 203 12 203 34 ("write-subu8vector")}
      {Lisp-Entry "jazz.read-line" #f 205 12 205 26 ("read-line")}
      {Lisp-Entry "jazz.read-proper-line" #f 208 13 208 34 ("%%string-shrink!" "1" "%%fx-" "%%string-ref" "%%eqv?" "0" "%%fx>" "and" "%%string-length" "len" "values" "eof-object?" "if" "read-line" "line" "let" "port")}
      {Lisp-Entry "jazz.read-all" #f 217 12 217 25 ("read-all")}
      {Lisp-Entry "jazz.with-readtable" #f 220 13 220 32 ("current-readtable" "parameterize" "thunk" "readtable")}
      {Lisp-Entry "jazz.skip-whitespace" #f 227 9 227 29 ("read-char" "peek-char" "char-whitespace?" "%%while" "port")}
      {Lisp-Entry "jazz.read-delimited" #f 232 9 232 28 ("jazz.queue-list" "read-char" "read" "jazz.enqueue" "peek-char" "%%eqv?" "%%not" "%%while" "jazz.skip-whitespace" "jazz.new-queue" "queue" "let" "delimiter" "port")}
      {Lisp-Entry "jazz.read-until" #f 242 9 242 24 ("jazz.queue-list" "jazz.enqueue" "set!" "if" "read" "%%not" "%%while" "done?" "jazz.new-queue" "queue" "expr" "let" "port" "test")}
      {Lisp-Entry "jazz.read-content" #f 254 9 254 26 ("eof-object?" "jazz.read-until" "port")}}})
"repository"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "repository.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.core.repository" #f 37 18 37 46 ()
      {Lisp-Entry "jazz.repository-name" #f 45 9 45 29 ("%%repository-name" "repository")}
      {Lisp-Entry "jazz.repository-directory" #f 48 9 48 34 ("%%repository-directory" "repository")}
      {Lisp-Entry "jazz.repository-library-root" #f 51 9 51 37 ("%%repository-library-root" "repository")}
      {Lisp-Entry "jazz.repository-library-directory" #f 54 9 54 42 ("%%repository-library-directory" "repository")}
      {Lisp-Entry "jazz.repository-binary?" #f 57 9 57 32 ("%%repository-binary?" "repository")}
      {Lisp-Entry "jazz.package-repository" #f 66 9 66 32 ("%%package-repository" "package")}
      {Lisp-Entry "jazz.package-name" #f 69 9 69 26 ("%%package-name" "package")}
      {Lisp-Entry "jazz.package-directory" #f 72 9 72 31 ("jazz.package-pathname" "package")}
      {Lisp-Entry "jazz.package-products" #f 75 9 75 30 ("%%package-products" "package")}
      {Lisp-Entry "jazz.package-project" #f 78 9 78 29 ("%%package-project" "package")}}})
"scheme"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "walker" "scheme.jazz"} 1251206746
    {Lisp-Entry "jazz.dialect.walker.scheme" #f 37 19 37 45 ("jazz.dialect")
      {Lisp-Entry "Define-Declaration" #f 49 7 49 25 ()
        {Lisp-Entry "signature" #f 52 8 52 17 ()}
        {Lisp-Entry "get-signature" #f 52 25 52 33 ()}
        {Lisp-Entry "value" #f 53 8 53 13 ()}
        {Lisp-Entry "get-value" #f 53 25 53 33 ()}}
      {Lisp-Entry "Define-Special-Form-Declaration" #f 61 7 61 38 ()
        {Lisp-Entry "signature" #f 64 8 64 17 ()}
        {Lisp-Entry "get-signature" #f 64 25 64 33 ()}
        {Lisp-Entry "body" #f 65 8 65 12 ()}
        {Lisp-Entry "get-body" #f 65 25 65 33 ()}}
      {Lisp-Entry "Define-Macro-Declaration" #f 73 7 73 31 ()
        {Lisp-Entry "signature" #f 76 8 76 17 ()}
        {Lisp-Entry "get-signature" #f 76 25 76 33 ()}
        {Lisp-Entry "body" #f 77 8 77 12 ()}
        {Lisp-Entry "get-body" #f 77 25 77 33 ()}}
      {Lisp-Entry "Scheme-Dialect" #f 85 7 85 21 ()}
      {Lisp-Entry "Scheme-Walker" #f 93 7 93 20 ()}}})
"stack"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "stack.scm"} 1250852530
    {Lisp-Entry "jazz.dialect.core.stack" #f 37 18 37 41 ()
      {Lisp-Entry "jazz.get-procedure-name" #f 47 13 47 36 ("%%procedure-name" "if" "procedure")}
      {Lisp-Entry "jazz.get-continuation-stack" #f 53 13 53 40 ("jazz.queue-list" "%%continuation-next-frame" "1" "%%fx+" "jazz.enqueue" "begin" "and" "%%fx<" "%%not" "or" "if" "0" "d" "iter" "jazz.new-queue" "queue" "let" "depth" "cont")}
      {Lisp-Entry "jazz.get-continuation-name" #f 66 13 66 39 ("%%continuation-creator" "jazz.get-procedure-name" "cont")}
      {Lisp-Entry "jazz.collect-var-val" #f 70 13 70 33 ("##cte-parent-cte" "##inverse-eval-in-env" "##cte-top?" "##procedure?" "if" "##object->string" "%%cons" "jazz.enqueue" "queue" "cte" "val" "var")}
      {Lisp-Entry "jazz.get-continuation-dynamic-environment" #f 80 13 80 54 ("jazz.queue-list" "##interaction-cte" "jazz.code-cte" "##interp-continuation-rte" "rte" "##interp-continuation-code" "$code" "%%interp-continuation?" "if" "jazz.continuation-denv" "##dynamic-env->list" "collect-parameters" "and" "jazz.new-queue" "queue" "let" "cont")
        {Lisp-Entry "collect-parameters" #f 82 15 82 33 ("%%list" "jazz.collect-var-val" "##inverse-eval-in-env" "x" "##hidden-parameter?" "%%not" "%%cdr" "val" "param" "%%car" "param-val" "let*" "%%pair?" "if" "iter" "let" "queue" "cte" "lst")}}
      {Lisp-Entry "jazz.get-continuation-lexical-environment" #f 107 13 107 54 ("jazz.queue-list" "##interaction-cte" "%%continuation-locals" "collect-locals" "begin" "jazz.code-cte" "collect-rte" "##interp-continuation-rte" "rte" "##interp-continuation-code" "$code" "%%interp-continuation?" "if" "and" "jazz.new-queue" "queue" "let" "cont")
        {Lisp-Entry "collect-rte" #f 109 15 109 26 ("else" "jazz.rte-up" "##cte-parent-cte" "jazz.collect-var-val" "##hidden-local-var?" "%%not" "%%car" "var" "%%pair?" "if" "%%vector->list" "%%cdr" "vals" "##cte-frame-vars" "vars" "loop2" "##cte-frame?" "##cte-top?" "cond" "r" "c" "loop1" "let" "queue" "rte" "cte")}
        {Lisp-Entry "collect-vars" #f 128 15 128 27 ("jazz.collect-var-val" "%%cdr" "val" "var" "%%car" "var-val" "let*" "%%pair?" "if" "iter" "let" "queue" "cte" "lst")}
        {Lisp-Entry "collect-locals" #f 137 15 137 29 ("collect-vars" "and" "queue" "cte" "lst")}}
      {Lisp-Entry "jazz.get-continuation-location" #f 154 13 154 43 ("%%continuation-locat" "jazz.locat->file/line/col" "cont")}
      {Lisp-Entry "jazz.interpreted-continuation?" #f 158 13 158 43 ("%%interp-continuation?" "%%not" "or" "%%continuation-creator" "creator" "let" "cont")}
      {Lisp-Entry "jazz.with-repl-context" #f 164 13 164 35 ("jazz.repl-context-bind" "0" "1" "jazz.repl-context-level" "%%fx+" "jazz.make-repl-context" "context" "%%thread-repl-context-get!" "prev-context" "let" "thunk" "cont")}
      {Lisp-Entry "jazz.repl" #f 180 13 180 22 ("%%repl")}
      {Lisp-Entry "eval-within-no-winding" #f 192 13 192 35 ("##interaction-cte" "##compile-top" "%%make-source" "%%sourcify" "##compile-inner" "run" "##interp-continuation-rte" "rte" "jazz.code-cte" "cte" "##interp-continuation-code" "$code" "let*" "%%interp-continuation?" "if" "receiver" "repl-context" "cont" "src")
        {Lisp-Entry "run" #f 194 15 194 18 ("jazz.code-run" "let" "receiver" "repl-context" "jazz.repl-context-bind" "lambda" "cont" "%%continuation-graft-no-winding" "rte" "c")}}
      {Lisp-Entry "jazz.eval-within-no-winding" #f 217 13 217 40 ("%%car" "%%continuation-return-no-winding" "call-with-values" "results" "jazz.current-repl-context" "eval-within-no-winding" "return" "lambda" "continuation-capture" "cont" "expr")}
      {Lisp-Entry "jazz.repl-result-history-add" #f 232 13 232 41 ("%%repl-channel-result-history-add" "%%current-thread" "%%thread-repl-channel-get!" "channel" "let" "result")}
      {Lisp-Entry "jazz.inspect-repl-context" #f 242 13 242 38 ("context")}}})
"structure"
 ({Lisp-File-Entry {File jazz "src" "jazz" "dialect" "core" "structure.scm"} 1250720196
    {Lisp-Entry "jazz.dialect.core.structure" #f 37 18 37 45 ()
      {Lisp-Entry "jazz.kind?" #f 40 9 40 19 ("##type?" "obj")}
      {Lisp-Entry "jazz.kind-id" #f 43 9 43 21 ("##type-id" "type")}
      {Lisp-Entry "jazz.kind-name" #f 46 9 46 23 ("##type-name" "type")}
      {Lisp-Entry "jazz.kind-flags" #f 49 9 49 24 ("##type-flags" "type")}
      {Lisp-Entry "jazz.kind-super" #f 52 9 52 24 ("##type-super" "type")}
      {Lisp-Entry "jazz.kind-length" #f 55 9 55 25 ("##type-field-count" "type")}
      {Lisp-Entry "jazz.kind-fields" #f 58 9 58 25 ("jazz.reverse!" "%%list" "%%cons" "%%fx+" "val" "options" "%%cdr" "rest" "%%car" "name" "let*" "%%pair?" "if" "alist" "##type-fields" "%%vector->list" "lst" "1" "i" "loop" "let" "type")}
      {Lisp-Entry "jazz.structure?" #f 76 9 76 24 ("##structure?" "obj")}
      {Lisp-Entry "jazz.structure-kind" #f 79 9 79 28 ("##structure-type" "obj")}
      {Lisp-Entry "jazz.structure-ref" #f 82 9 82 27 ("##structure-ref" "type" "i" "obj")}
      {Lisp-Entry "jazz.structure-set!" #f 85 9 85 28 ("##structure-set!" "type" "i" "val" "obj")}}})
"syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "syntax.scm"} 1237033585
    {Lisp-Entry "test.performance.syntax" #f 0 8 0 31 ()
      {Lisp-Entry "Z" #f 3 19 3 20 ("allocate-z" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "f-vtable" ("Z") 7 22 7 30 ("n")}
      {Lisp-Entry "g-vtable" ("Z") 8 22 8 30 ("n")}
      {Lisp-Entry "W" #f 11 19 11 20 ("allocate-w" "jazz.Object-Class" "Z")}
      {Lisp-Entry "h" ("W") 15 22 15 23 ()}}})
"system"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "system.scm"} 1248276859
    {Lisp-Entry "jazz.dialect.core.system" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.open-process" #f 42 12 42 29 ("open-process")}
      {Lisp-Entry "jazz.process-status" #f 43 12 43 31 ("process-status")}
      {Lisp-Entry "jazz.exit" #f 44 12 44 21 ("exit")}
      {Lisp-Entry "jazz.switch?" #f 49 9 49 21 ("0" "%%string-ref" "%%eqv?" "or" "2" "%%string-length" "%%fx>=" "and" "arg")}
      {Lisp-Entry "jazz.switch-name" #f 55 9 55 25 ("%%string-length" "1" "%%substring" "arg")}
      {Lisp-Entry "jazz.command-argument" #f 59 9 59 30 ("%%cddr" "else" "%%cadr" "jazz.switch-name" "%%equal?" "jazz.error" "jazz.switch?" "%%not" "or" "cond" "%%car" "arg" "%%null?" "if" "arguments" "iter" "command-line" "%%cdr" "all" "let" "name")}}})
"table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "table.scm"} 1250272407
    {Lisp-Entry "jazz.dialect.core.table" #f 37 18 37 41 ()
      {Lisp-Entry "jazz.table-clear" #f 40 9 40 25 ("%%table-clear" "%%table?" "%%debug-assert" "key" "table")}
      {Lisp-Entry "jazz.table-keys" #f 45 9 45 24 ("%%table-keys" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.table-length" #f 50 9 50 26 ("%%table-length" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.iterate-table" #f 55 9 55 27 ("%%iterate-table" "%%table?" "%%debug-assert" "proc" "table")}
      {Lisp-Entry "jazz.map-table" #f 60 9 60 23 ("jazz.queue-list" "jazz.enqueue" "value" "key" "lambda" "%%iterate-table" "jazz.new-queue" "queue" "let" "%%table?" "%%debug-assert" "proc" "table")}
      {Lisp-Entry "jazz.list->table" #f 69 9 69 25 ("test:" "%%list->table" "equal?" "test" "#!key" "alist")}
      {Lisp-Entry "jazz.table->list" #f 73 9 73 25 ("%%table->list" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.table-entries" #f 78 9 78 27 ("%%table-entries" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.eq-hash" #f 85 12 85 24 ("eq?-hash")}
      {Lisp-Entry "jazz.eqv-hash" #f 86 12 86 25 ("eqv?-hash")}
      {Lisp-Entry "jazz.equal-hash" #f 87 12 87 27 ("equal?-hash")}}})
"template"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "template.scm"} 1248708411
    {Lisp-Entry "jazz.dialect.syntax.template" #f 37 19 37 47 ("scheme")}})
"templates"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "templates.scm"} 1250791795
    {Lisp-Entry "jazz.dialect.syntax.templates" #f 37 19 37 48 ("scheme")
      {Lisp-Entry "instantiate-for-each" #f 44 15 44 35 ("+" "element" "<=" "when" "0" "n" "iterate" "1" "cardinality" "-" "end" "let" ",T" "seq" "proc" "for-each" ",name" "as" "specialize" "T" "name")}
      {Lisp-Entry "instantiate-butlast" #f 53 15 53 34 ("1" "cardinality" "-" "0" "subseq" ",T" "seq" "butlast" "specialize" "T")}
      {Lisp-Entry "instantiate-find" #f 60 15 60 31 ("element" "obj" "n" "iterate" "1" "0" "-" "+" "next" ">=" "<=" "not" "if" "inside" "eqv?" "or" "cardinality" "len" "let" "reversed?" "reversed?:" "end" "end:" "start" "start:" "test" "test:" "key" "key:" "target" ",T" "seq" "find" ",name" "as" "specialize" "T" "name")}
      {Lisp-Entry "instantiate-find-in" #f 79 15 79 34 ("element" "obj" "n" "iterate" "1" "0" "-" "+" "next" ">=" "<=" "not" "if" "inside" "eqv?" "or" "cardinality" "len" "let" "reversed?" "reversed?:" "end" "end:" "start" "start:" "test" "test:" "key" "key:" "target" ",T" "seq" "find-in" ",name" "as" "specialize" "T" "name")}
      {Lisp-Entry "instantiate-starts-with?" #f 207 15 207 39 ("0" "subseq" "=" ">=" "and" "tlen" "cardinality" "slen" "let" "target" ",T" "seq" "starts-with?" "specialize" "T")}
      {Lisp-Entry "instantiate-ends-with?" #f 215 15 215 37 ("-" "subseq" "=" ">=" "and" "tlen" "cardinality" "slen" "let" "target" ",T" "seq" "ends-with?" "specialize" "T")}}})
"thread"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "thread.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.core.thread" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.current-thread" #f 47 12 47 31 ("current-thread")}
      {Lisp-Entry "jazz.thread?" #f 48 12 48 24 ("thread?")}
      {Lisp-Entry "jazz.make-thread" #f 49 12 49 28 ("make-thread")}
      {Lisp-Entry "jazz.make-root-thread" #f 50 12 50 33 ("make-root-thread")}
      {Lisp-Entry "jazz.thread-name" #f 51 12 51 28 ("thread-name")}
      {Lisp-Entry "jazz.thread-specific" #f 52 12 52 32 ("thread-specific")}
      {Lisp-Entry "jazz.thread-specific-set!" #f 53 12 53 37 ("thread-specific-set!")}
      {Lisp-Entry "jazz.thread-base-priority" #f 54 12 54 37 ("thread-base-priority")}
      {Lisp-Entry "jazz.thread-base-priority-set!" #f 55 12 55 42 ("thread-base-priority-set!")}
      {Lisp-Entry "jazz.thread-priority-boost" #f 56 12 56 38 ("thread-priority-boost")}
      {Lisp-Entry "jazz.thread-priority-boost-set!" #f 57 12 57 43 ("thread-priority-boost-set!")}
      {Lisp-Entry "jazz.thread-start!" #f 58 12 58 30 ("thread-start!")}
      {Lisp-Entry "jazz.thread-yield!" #f 59 12 59 30 ("thread-yield!")}
      {Lisp-Entry "jazz.thread-sleep!" #f 60 12 60 30 ("thread-sleep!")}
      {Lisp-Entry "jazz.thread-terminate!" #f 61 12 61 34 ("thread-terminate!")}
      {Lisp-Entry "jazz.thread-join!" #f 62 12 62 29 ("thread-join!")}
      {Lisp-Entry "jazz.thread-send" #f 63 12 63 28 ("thread-send")}
      {Lisp-Entry "jazz.thread-receive" #f 64 12 64 31 ("thread-receive")}
      {Lisp-Entry "jazz.thread-interrupt!" #f 65 12 65 34 ("thread-interrupt!")}
      {Lisp-Entry "jazz.thread-thread-group" #f 66 12 66 36 ("thread-thread-group")}
      {Lisp-Entry "jazz.thread-group->thread-group-list" #f 67 12 67 48 ("thread-group->thread-group-list")}
      {Lisp-Entry "jazz.thread-group->thread-group-vector" #f 68 12 68 50 ("thread-group->thread-group-vector")}
      {Lisp-Entry "jazz.thread-group->thread-list" #f 69 12 69 42 ("thread-group->thread-list")}
      {Lisp-Entry "jazz.thread-group->thread-vector" #f 70 12 70 44 ("thread-group->thread-vector")}
      {Lisp-Entry "jazz.thread-state" #f 71 12 71 29 ("thread-state")}
      {Lisp-Entry "jazz.thread-state-abnormally-terminated-reason" #f 72 12 72 58 ("thread-state-abnormally-terminated-reason")}
      {Lisp-Entry "jazz.thread-state-abnormally-terminated?" #f 73 12 73 52 ("thread-state-abnormally-terminated?")}
      {Lisp-Entry "jazz.thread-state-active-timeout" #f 74 12 74 44 ("thread-state-active-timeout")}
      {Lisp-Entry "jazz.thread-state-active-waiting-for" #f 75 12 75 48 ("thread-state-active-waiting-for")}
      {Lisp-Entry "jazz.thread-state-active?" #f 76 12 76 37 ("thread-state-active?")}
      {Lisp-Entry "jazz.thread-state-initialized?" #f 77 12 77 42 ("thread-state-initialized?")}
      {Lisp-Entry "jazz.thread-state-normally-terminated-result" #f 78 12 78 56 ("thread-state-normally-terminated-result")}
      {Lisp-Entry "jazz.thread-state-normally-terminated?" #f 79 12 79 50 ("thread-state-normally-terminated?")}
      {Lisp-Entry "jazz.thread-state-uninitialized?" #f 80 12 80 44 ("thread-state-uninitialized?")}
      {Lisp-Entry "jazz.mutex?" #f 92 12 92 23 ("mutex?")}
      {Lisp-Entry "jazz.make-mutex" #f 93 12 93 27 ("make-mutex")}
      {Lisp-Entry "jazz.mutex-name" #f 94 12 94 27 ("mutex-name")}
      {Lisp-Entry "jazz.mutex-specific" #f 95 12 95 31 ("mutex-specific")}
      {Lisp-Entry "jazz.mutex-specific-set!" #f 96 12 96 36 ("mutex-specific-set!")}
      {Lisp-Entry "jazz.mutex-state" #f 97 12 97 28 ("mutex-state")}
      {Lisp-Entry "jazz.mutex-lock!" #f 98 12 98 28 ("mutex-lock!")}
      {Lisp-Entry "jazz.mutex-unlock!" #f 99 12 99 30 ("mutex-unlock!")}
      {Lisp-Entry "jazz.mutex-owner" #f 101 13 101 29 ("jazz.btq-owner" "mutex")}
      {Lisp-Entry "jazz.mutex-wait" #f 104 13 104 28 ("mutex-unlock!" "mutex-lock!" "mutex")}
      {Lisp-Entry "jazz.condition?" #f 118 12 118 27 ("condition-variable?")}
      {Lisp-Entry "jazz.make-condition" #f 119 12 119 31 ("make-condition-variable")}
      {Lisp-Entry "jazz.condition-name" #f 120 12 120 31 ("condition-variable-name")}
      {Lisp-Entry "jazz.condition-specific" #f 121 12 121 35 ("condition-variable-specific")}
      {Lisp-Entry "jazz.condition-specific-set!" #f 122 12 122 40 ("condition-variable-specific-set!")}
      {Lisp-Entry "jazz.condition-signal!" #f 123 12 123 34 ("condition-variable-signal!")}
      {Lisp-Entry "jazz.condition-broadcast!" #f 124 12 124 37 ("condition-variable-broadcast!")}}})
"time"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "time.scm"} 1237033585
    {Lisp-Entry "test.performance.time" #f 0 8 0 29 ("new-z" "f-vtable" "f-generic" "f-separate" "iterations" "new-x" "f-module" "time")
      {Lisp-Entry "iterations" #f 3 8 3 18 ("100000000")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "time.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.core.time" #f 37 18 37 40 ()
      {Lisp-Entry "jazz.current-systime" #f 40 8 40 28 ("current-time")}
      {Lisp-Entry "jazz.systime?" #f 41 8 41 21 ("time?")}
      {Lisp-Entry "jazz.systime->seconds" #f 42 8 42 29 ("time->seconds")}
      {Lisp-Entry "jazz.seconds->systime" #f 43 8 43 29 ("seconds->time")}
      {Lisp-Entry "jazz.process-times" #f 44 8 44 26 ("process-times")}
      {Lisp-Entry "jazz.cpu-time" #f 45 8 45 21 ("cpu-time")}
      {Lisp-Entry "jazz.real-time" #f 46 8 46 22 ("real-time")}}})
"typecase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "typecase.scm"} 1251729949
    {Lisp-Entry "jazz.dialect.syntax.typecase" #f 38 19 38 47 ("scheme")
      {Lisp-Entry "private" #f 44 8 44 15 ("jazz.error")}
      {Lisp-Entry "typecase" #f 54 16 54 24 ("desourcify" "error" ",value" ",variable" "is?" "value" "or" "pair?" ",@body" "else" "'else" "eq?" "cdr" "body" "car" "selector" "clause" "map" "cond" "variable" "lambda" "with-uniqueness" "sourcify-if" "cddr" "clauses" "source-code" "cadr" "target" "let" "form-src")}}})
"variables"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "variables.scm"} 1237033585
    {Lisp-Entry "SEPARATE" #f 4 8 4 16 ("2")}
    {Lisp-Entry "inc-separate" #f 7 9 7 21 ("-" "1" "+" "SEPARATE" "set!" "begin" "0" ">" "if" "n" "iter" "let" "cnt")}
    {Lisp-Entry "BLOCK" #f 19 8 19 13 ("3")}
    {Lisp-Entry "inc-block" #f 22 9 22 18 ("-" "1" "+" "BLOCK" "set!" "begin" "0" ">" "if" "n" "iter" "let" "cnt")}})
"vb"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "vb.scm"} 1237033585
    {Lisp-Entry "VAR" #f 5 8 5 11 ("2")}
    {Lisp-Entry "inc" #f 8 9 8 12 ("##fixnum.-" "1" "##fixnum.+" "VAR" "set!" "begin" "0" "##fixnum.>" "if" "n" "iter" "let" "cnt")}})
"vector"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "vector.scm"} 1238328026
    {Lisp-Entry "jazz.dialect.core.vector" #f 37 18 37 42 ()
      {Lisp-Entry "jazz.vector-copy" #f 45 8 45 24 ("vector-copy")}}})
"vs"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "vs.scm"} 1237033585
    {Lisp-Entry "VAR" #f 4 8 4 11 ("2")}
    {Lisp-Entry "inc" #f 7 9 7 12 ("##fixnum.-" "1" "##fixnum.+" "VAR" "set!" "begin" "0" "##fixnum.>" "if" "n" "iter" "let" "cnt")}})
"with"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "with.scm"} 1248708411
    {Lisp-Entry "jazz.dialect.syntax.with" #f 37 19 37 43 ("scheme")
      {Lisp-Entry "with" #f 44 16 44 20 ("reverse" "car" "release" "binding" "lambda" "map" ",@body" "begin" "prog1" ",bindings" "let*" "sourcify-if" "cddr" "body" "cadr" "source-code" "bindings" "let" "form-src")}
      {Lisp-Entry "with-closed" #f 58 16 58 27 ("close" ",@body" "function" "dynamic-wind" "caddr" ",variable" "set!" "if" "variable" ",specifier" "car" "'<Object>" "binding-specifier" "or" "specifier" "binding" "lambda" "map" "sourcify-if" "cddr" "body" "cadr" "source-code" "bindings" "let" "form-src")}}})
