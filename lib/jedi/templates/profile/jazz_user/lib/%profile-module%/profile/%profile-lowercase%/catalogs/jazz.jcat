"All-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "All-Project.jazz"} 1236813155
    {Lisp-Entry "project.jazz.All-Project" #f 37 9 37 33 ("All-Project" "register-autoclass" "jazz")
      {Lisp-Entry "All-Project" #f 48 7 48 18 ("project.jazz.All-Project" "module-name:" "all" "product:" "title:" "Jazz-Project")}}})
"Core-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Core-Project.jazz"} 1236813155
    {Lisp-Entry "project.jazz.Core-Project" #f 37 9 37 34 ("Core-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Core-Project" #f 48 7 48 19 ("project.jazz.Core-Project" "module-name:" "core" "product:" "title:" "Jazz-Project")}}})
"Dialect-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Dialect-Project.jazz"} 1236813155
    {Lisp-Entry "project.jazz.Dialect-Project" #f 37 9 37 37 ("Dialect-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Dialect-Project" #f 48 7 48 22 ("project.jazz.Dialect-Project" "module-name:" "jazz" "product:" "title:" "Jazz-Project")}}})
"Jazz-Manifest"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Jazz-Manifest.jazz"} 1237329051
    {Lisp-Entry "project.jazz.Jazz-Manifest" #f 37 9 37 35 ("Jazz-Manifest" "register-autoclass" "jazz")
      {Lisp-Entry "Jazz-Manifest" #f 47 7 47 20 ("Test-Project" "Platform-Project" "Jazz-Manifest" "Dialect-Project" "Core-Project" "All-Project" "Y" "X" "cffi" "b" "autoload" "a" "_test" "constructors" "_literals" "_language" "name:" "source:" "Directory" "directory:" "project.jazz.Test-Project" "project.jazz.All-Project" "project.jazz.Platform-Project" "project.jazz.Dialect-Project" "project.jazz.Core-Project" "tag-module:" "project.jazz.Jazz-Manifest" "module-name:" "Jazz" "File" "documentation:" "include-extensions:" ":jazz" "catalog-extensions:" "catalog?:" "title:" "Project")}}})
"Platform-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Platform-Project.jazz"} 1236813155
    {Lisp-Entry "project.jazz.Platform-Project" #f 37 9 37 38 ("Platform-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Platform-Project" #f 48 7 48 23 ("project.jazz.Platform-Project" "module-name:" "platform" "product:" "title:" "Jazz-Project")}}})
"Test-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "project" "jazz" "Test-Project.jazz"} 1236813155
    {Lisp-Entry "project.jazz.Test-Project" #f 37 9 37 34 ("Test-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Test-Project" #f 48 7 48 19 ("project.jazz.Test-Project" "module-name:" "test" "product:" "title:" "Jazz-Project")}}})
"X"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "X.jazz"} 1236813153
    {Lisp-Entry "jazz.test.X" #f 0 9 0 20 ("jazz")
      {Lisp-Entry "X" #f 3 7 3 8 ("Object")
        {Lisp-Entry "foo" #f 6 19 6 22 ("X.foo" "'X.foo" "terminal")}}}})
"Y"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "Y.jazz"} 1236813153
    {Lisp-Entry "jazz.test.Y" #f 0 9 0 20 ("jazz")
      {Lisp-Entry "Y" #f 6 7 6 8 ("Object")
        {Lisp-Entry "foo" #f 9 11 9 14 ("Y.foo" "'Y.foo" "terminal")}}}})
"_core"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "_core.scm"} 1228421270
    {Lisp-Entry "jazz.dialect.core" #f 37 9 37 26 ("scheme")}})
"_dialect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "_dialect.scm"} 1226584778
    {Lisp-Entry "jazz.dialect" #f 37 9 37 21 ("scheme")}})
"_jazz"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "_jazz.scm"} 1237390061
    {Lisp-Entry "jazz" #f 37 9 37 13 ("scheme")}})
"_kernel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "kernel" "_kernel.scm"} 1237815288
    {Lisp-Entry "jazz.dialect.kernel" #f 38 9 38 28 ("scheme")
      {Lisp-Entry "get-autoload" #f 46 8 46 25 ()}
      {Lisp-Entry "autoload" #f 47 8 47 21 ()}
      {Lisp-Entry "autoreload" #f 48 8 48 23 ()}
      {Lisp-Entry "boolean" #f 56 8 56 20 ()}
      {Lisp-Entry "box?" #f 64 8 64 12 ()}
      {Lisp-Entry "box" #f 65 8 65 11 ()}
      {Lisp-Entry "unbox" #f 66 8 66 13 ()}
      {Lisp-Entry "set-box!" #f 67 8 67 16 ()}
      {Lisp-Entry "build-module" #f 75 8 75 25 ()}
      {Lisp-Entry "build-executable" #f 76 8 76 29 ()}
      {Lisp-Entry "compile-module" #f 77 8 77 27 ()}
      {Lisp-Entry "for-each-submodule" #f 78 8 78 31 ()}
      {Lisp-Entry "get-category-name" #f 86 8 86 30 ()}
      {Lisp-Entry "get-category-descendants" #f 87 8 87 37 ()}
      {Lisp-Entry "get-class-ascendant" #f 88 8 88 32 ()}
      {Lisp-Entry "symbolic-char" #f 96 8 96 26 ()}
      {Lisp-Entry "char-symbol" #f 97 8 97 24 ()}
      {Lisp-Entry "continuation?" #f 105 8 105 26 ()}
      {Lisp-Entry "continuation-capture" #f 106 8 106 33 ()}
      {Lisp-Entry "continuation-graft" #f 107 8 107 31 ()}
      {Lisp-Entry "continuation-return" #f 108 8 108 32 ()}
      {Lisp-Entry "run-loop?" #f 116 8 116 22 ()}
      {Lisp-Entry "terminal" #f 117 8 117 21 ()}
      {Lisp-Entry "terminal-string" #f 118 8 118 28 ()}
      {Lisp-Entry "terminal-port" #f 119 8 119 26 ()}
      {Lisp-Entry "error" #f 120 8 120 18 ()}
      {Lisp-Entry "unimplemented" #f 121 8 121 26 ()}
      {Lisp-Entry "dump-stack" #f 122 8 122 23 ()}
      {Lisp-Entry "log-object" #f 123 8 123 23 ()}
      {Lisp-Entry "log-string" #f 124 8 124 23 ()}
      {Lisp-Entry "log-newline" #f 125 8 125 24 ()}
      {Lisp-Entry "close-log" #f 126 8 126 22 ()}
      {Lisp-Entry "generate-proper-tail-calls" #f 127 8 127 34 ()}
      {Lisp-Entry "?" #f 139 8 139 9 ()}
      {Lisp-Entry "get-?" #f 139 19 139 24 ()}
      {Lisp-Entry "set-?" #f 139 34 139 39 ()}
      {Lisp-Entry "%" #f 140 8 140 9 ()}
      {Lisp-Entry "get-%" #f 140 19 140 24 ()}
      {Lisp-Entry "set-%" #f 140 34 140 39 ()}
      {Lisp-Entry "?a" #f 143 8 143 10 ()}
      {Lisp-Entry "get-?a" #f 143 20 143 26 ()}
      {Lisp-Entry "set-?a" #f 143 36 143 42 ()}
      {Lisp-Entry "?b" #f 144 8 144 10 ()}
      {Lisp-Entry "get-?b" #f 144 20 144 26 ()}
      {Lisp-Entry "set-?b" #f 144 36 144 42 ()}
      {Lisp-Entry "?c" #f 145 8 145 10 ()}
      {Lisp-Entry "get-?c" #f 145 20 145 26 ()}
      {Lisp-Entry "set-?c" #f 145 36 145 42 ()}
      {Lisp-Entry "?d" #f 146 8 146 10 ()}
      {Lisp-Entry "get-?d" #f 146 20 146 26 ()}
      {Lisp-Entry "set-?d" #f 146 36 146 42 ()}
      {Lisp-Entry "?e" #f 147 8 147 10 ()}
      {Lisp-Entry "get-?e" #f 147 20 147 26 ()}
      {Lisp-Entry "set-?e" #f 147 36 147 42 ()}
      {Lisp-Entry "?f" #f 148 8 148 10 ()}
      {Lisp-Entry "get-?f" #f 148 20 148 26 ()}
      {Lisp-Entry "set-?f" #f 148 36 148 42 ()}
      {Lisp-Entry "?g" #f 149 8 149 10 ()}
      {Lisp-Entry "get-?g" #f 149 20 149 26 ()}
      {Lisp-Entry "set-?g" #f 149 36 149 42 ()}
      {Lisp-Entry "?h" #f 150 8 150 10 ()}
      {Lisp-Entry "get-?h" #f 150 20 150 26 ()}
      {Lisp-Entry "set-?h" #f 150 36 150 42 ()}
      {Lisp-Entry "?i" #f 151 8 151 10 ()}
      {Lisp-Entry "get-?i" #f 151 20 151 26 ()}
      {Lisp-Entry "set-?i" #f 151 36 151 42 ()}
      {Lisp-Entry "?j" #f 152 8 152 10 ()}
      {Lisp-Entry "get-?j" #f 152 20 152 26 ()}
      {Lisp-Entry "set-?j" #f 152 36 152 42 ()}
      {Lisp-Entry "?k" #f 153 8 153 10 ()}
      {Lisp-Entry "get-?k" #f 153 20 153 26 ()}
      {Lisp-Entry "set-?k" #f 153 36 153 42 ()}
      {Lisp-Entry "?l" #f 154 8 154 10 ()}
      {Lisp-Entry "get-?l" #f 154 20 154 26 ()}
      {Lisp-Entry "set-?l" #f 154 36 154 42 ()}
      {Lisp-Entry "?m" #f 155 8 155 10 ()}
      {Lisp-Entry "get-?m" #f 155 20 155 26 ()}
      {Lisp-Entry "set-?m" #f 155 36 155 42 ()}
      {Lisp-Entry "?n" #f 156 8 156 10 ()}
      {Lisp-Entry "get-?n" #f 156 20 156 26 ()}
      {Lisp-Entry "set-?n" #f 156 36 156 42 ()}
      {Lisp-Entry "?o" #f 157 8 157 10 ()}
      {Lisp-Entry "get-?o" #f 157 20 157 26 ()}
      {Lisp-Entry "set-?o" #f 157 36 157 42 ()}
      {Lisp-Entry "?p" #f 158 8 158 10 ()}
      {Lisp-Entry "get-?p" #f 158 20 158 26 ()}
      {Lisp-Entry "set-?p" #f 158 36 158 42 ()}
      {Lisp-Entry "?q" #f 159 8 159 10 ()}
      {Lisp-Entry "get-?q" #f 159 20 159 26 ()}
      {Lisp-Entry "set-?q" #f 159 36 159 42 ()}
      {Lisp-Entry "?r" #f 160 8 160 10 ()}
      {Lisp-Entry "get-?r" #f 160 20 160 26 ()}
      {Lisp-Entry "set-?r" #f 160 36 160 42 ()}
      {Lisp-Entry "?s" #f 161 8 161 10 ()}
      {Lisp-Entry "get-?s" #f 161 20 161 26 ()}
      {Lisp-Entry "set-?s" #f 161 36 161 42 ()}
      {Lisp-Entry "?t" #f 162 8 162 10 ()}
      {Lisp-Entry "get-?t" #f 162 20 162 26 ()}
      {Lisp-Entry "set-?t" #f 162 36 162 42 ()}
      {Lisp-Entry "?u" #f 163 8 163 10 ()}
      {Lisp-Entry "get-?u" #f 163 20 163 26 ()}
      {Lisp-Entry "set-?u" #f 163 36 163 42 ()}
      {Lisp-Entry "?v" #f 164 8 164 10 ()}
      {Lisp-Entry "get-?v" #f 164 20 164 26 ()}
      {Lisp-Entry "set-?v" #f 164 36 164 42 ()}
      {Lisp-Entry "?w" #f 165 8 165 10 ()}
      {Lisp-Entry "get-?w" #f 165 20 165 26 ()}
      {Lisp-Entry "set-?w" #f 165 36 165 42 ()}
      {Lisp-Entry "?x" #f 166 8 166 10 ()}
      {Lisp-Entry "get-?x" #f 166 20 166 26 ()}
      {Lisp-Entry "set-?x" #f 166 36 166 42 ()}
      {Lisp-Entry "?y" #f 167 8 167 10 ()}
      {Lisp-Entry "get-?y" #f 167 20 167 26 ()}
      {Lisp-Entry "set-?y" #f 167 36 167 42 ()}
      {Lisp-Entry "?z" #f 168 8 168 10 ()}
      {Lisp-Entry "get-?z" #f 168 20 168 26 ()}
      {Lisp-Entry "set-?z" #f 168 36 168 42 ()}
      {Lisp-Entry "%a" #f 171 8 171 10 ()}
      {Lisp-Entry "get-%a" #f 171 20 171 26 ()}
      {Lisp-Entry "set-%a" #f 171 36 171 42 ()}
      {Lisp-Entry "%b" #f 172 8 172 10 ()}
      {Lisp-Entry "get-%b" #f 172 20 172 26 ()}
      {Lisp-Entry "set-%b" #f 172 36 172 42 ()}
      {Lisp-Entry "%c" #f 173 8 173 10 ()}
      {Lisp-Entry "get-%c" #f 173 20 173 26 ()}
      {Lisp-Entry "set-%c" #f 173 36 173 42 ()}
      {Lisp-Entry "%d" #f 174 8 174 10 ()}
      {Lisp-Entry "get-%d" #f 174 20 174 26 ()}
      {Lisp-Entry "set-%d" #f 174 36 174 42 ()}
      {Lisp-Entry "%e" #f 175 8 175 10 ()}
      {Lisp-Entry "get-%e" #f 175 20 175 26 ()}
      {Lisp-Entry "set-%e" #f 175 36 175 42 ()}
      {Lisp-Entry "%f" #f 176 8 176 10 ()}
      {Lisp-Entry "get-%f" #f 176 20 176 26 ()}
      {Lisp-Entry "set-%f" #f 176 36 176 42 ()}
      {Lisp-Entry "%g" #f 177 8 177 10 ()}
      {Lisp-Entry "get-%g" #f 177 20 177 26 ()}
      {Lisp-Entry "set-%g" #f 177 36 177 42 ()}
      {Lisp-Entry "%h" #f 178 8 178 10 ()}
      {Lisp-Entry "get-%h" #f 178 20 178 26 ()}
      {Lisp-Entry "set-%h" #f 178 36 178 42 ()}
      {Lisp-Entry "%i" #f 179 8 179 10 ()}
      {Lisp-Entry "get-%i" #f 179 20 179 26 ()}
      {Lisp-Entry "set-%i" #f 179 36 179 42 ()}
      {Lisp-Entry "%j" #f 180 8 180 10 ()}
      {Lisp-Entry "get-%j" #f 180 20 180 26 ()}
      {Lisp-Entry "set-%j" #f 180 36 180 42 ()}
      {Lisp-Entry "%k" #f 181 8 181 10 ()}
      {Lisp-Entry "get-%k" #f 181 20 181 26 ()}
      {Lisp-Entry "set-%k" #f 181 36 181 42 ()}
      {Lisp-Entry "%l" #f 182 8 182 10 ()}
      {Lisp-Entry "get-%l" #f 182 20 182 26 ()}
      {Lisp-Entry "set-%l" #f 182 36 182 42 ()}
      {Lisp-Entry "%m" #f 183 8 183 10 ()}
      {Lisp-Entry "get-%m" #f 183 20 183 26 ()}
      {Lisp-Entry "set-%m" #f 183 36 183 42 ()}
      {Lisp-Entry "%n" #f 184 8 184 10 ()}
      {Lisp-Entry "get-%n" #f 184 20 184 26 ()}
      {Lisp-Entry "set-%n" #f 184 36 184 42 ()}
      {Lisp-Entry "%o" #f 185 8 185 10 ()}
      {Lisp-Entry "get-%o" #f 185 20 185 26 ()}
      {Lisp-Entry "set-%o" #f 185 36 185 42 ()}
      {Lisp-Entry "%p" #f 186 8 186 10 ()}
      {Lisp-Entry "get-%p" #f 186 20 186 26 ()}
      {Lisp-Entry "set-%p" #f 186 36 186 42 ()}
      {Lisp-Entry "%q" #f 187 8 187 10 ()}
      {Lisp-Entry "get-%q" #f 187 20 187 26 ()}
      {Lisp-Entry "set-%q" #f 187 36 187 42 ()}
      {Lisp-Entry "%r" #f 188 8 188 10 ()}
      {Lisp-Entry "get-%r" #f 188 20 188 26 ()}
      {Lisp-Entry "set-%r" #f 188 36 188 42 ()}
      {Lisp-Entry "%s" #f 189 8 189 10 ()}
      {Lisp-Entry "get-%s" #f 189 20 189 26 ()}
      {Lisp-Entry "set-%s" #f 189 36 189 42 ()}
      {Lisp-Entry "%t" #f 190 8 190 10 ()}
      {Lisp-Entry "get-%t" #f 190 20 190 26 ()}
      {Lisp-Entry "set-%t" #f 190 36 190 42 ()}
      {Lisp-Entry "%u" #f 191 8 191 10 ()}
      {Lisp-Entry "get-%u" #f 191 20 191 26 ()}
      {Lisp-Entry "set-%u" #f 191 36 191 42 ()}
      {Lisp-Entry "%v" #f 192 8 192 10 ()}
      {Lisp-Entry "get-%v" #f 192 20 192 26 ()}
      {Lisp-Entry "set-%v" #f 192 36 192 42 ()}
      {Lisp-Entry "%w" #f 193 8 193 10 ()}
      {Lisp-Entry "get-%w" #f 193 20 193 26 ()}
      {Lisp-Entry "set-%w" #f 193 36 193 42 ()}
      {Lisp-Entry "%x" #f 194 8 194 10 ()}
      {Lisp-Entry "get-%x" #f 194 20 194 26 ()}
      {Lisp-Entry "set-%x" #f 194 36 194 42 ()}
      {Lisp-Entry "%y" #f 195 8 195 10 ()}
      {Lisp-Entry "get-%y" #f 195 20 195 26 ()}
      {Lisp-Entry "set-%y" #f 195 36 195 42 ()}
      {Lisp-Entry "%z" #f 196 8 196 10 ()}
      {Lisp-Entry "get-%z" #f 196 20 196 26 ()}
      {Lisp-Entry "set-%z" #f 196 36 196 42 ()}
      {Lisp-Entry "open-digest" #f 204 8 204 19 ()}
      {Lisp-Entry "close-digest" #f 205 8 205 20 ()}
      {Lisp-Entry "digest-update-subu8vector" #f 206 8 206 33 ()}
      {Lisp-Entry "digest-string" #f 207 8 207 21 ()}
      {Lisp-Entry "digest-substring" #f 208 8 208 24 ()}
      {Lisp-Entry "digest-u8vector" #f 209 8 209 23 ()}
      {Lisp-Entry "digest-subu8vector" #f 210 8 210 26 ()}
      {Lisp-Entry "digest-file" #f 211 8 211 19 ()}
      {Lisp-Entry "enumerator?" #f 219 8 219 24 ()}
      {Lisp-Entry "enumerator->symbol" #f 220 8 220 31 ()}
      {Lisp-Entry "exception-reason" #f 228 8 228 29 ()}
      {Lisp-Entry "exception-detail" #f 229 8 229 29 ()}
      {Lisp-Entry "display-exception" #f 230 8 230 30 ()}
      {Lisp-Entry "display-continuation-backtrace" #f 231 8 231 43 ()}
      {Lisp-Entry "get-exception-hook" #f 232 8 232 31 ()}
      {Lisp-Entry "set-exception-hook" #f 233 8 233 31 ()}
      {Lisp-Entry "invoke-exception-hook" #f 234 8 234 34 ()}
      {Lisp-Entry "system-exception-hook" #f 235 8 235 34 ()}
      {Lisp-Entry "current-exception-handler" #f 236 8 236 38 ()}
      {Lisp-Entry "with-exception-handler" #f 237 8 237 35 ()}
      {Lisp-Entry "with-exception-catcher" #f 238 8 238 35 ()}
      {Lisp-Entry "with-exception-filter" #f 239 8 239 34 ()}
      {Lisp-Entry "with-exception-propagater" #f 240 8 240 38 ()}
      {Lisp-Entry "dump-exception" #f 241 8 241 27 ()}
      {Lisp-Entry "raise" #f 242 8 242 18 ()}
      {Lisp-Entry "present-exception" #f 243 8 243 30 ()}
      {Lisp-Entry "get-detail" #f 244 8 244 23 ()}
      {Lisp-Entry "field?" #f 252 8 252 19 ()}
      {Lisp-Entry "field-name" #f 253 8 253 23 ()}
      {Lisp-Entry "find-field" #f 254 8 254 23 ()}
      {Lisp-Entry "fixnum?" #f 262 8 262 15 ()}
      {Lisp-Entry "flonum?" #f 263 8 263 15 ()}
      {Lisp-Entry "fixnum->flonum" #f 264 8 264 27 ()}
      {Lisp-Entry "flonum->fixnum" #f 265 8 265 27 ()}
      {Lisp-Entry "fx+" #f 266 8 266 11 ()}
      {Lisp-Entry "fx-" #f 267 8 267 11 ()}
      {Lisp-Entry "fx*" #f 268 8 268 11 ()}
      {Lisp-Entry "+infinity" #f 269 8 269 22 ()}
      {Lisp-Entry "-infinity" #f 270 8 270 22 ()}
      {Lisp-Entry "##fl+" #f 280 8 280 13 ()}
      {Lisp-Entry "##fl-" #f 281 8 281 13 ()}
      {Lisp-Entry "##fl*" #f 282 8 282 13 ()}
      {Lisp-Entry "##fl/" #f 283 8 283 13 ()}
      {Lisp-Entry "foreign?" #f 291 8 291 21 ()}
      {Lisp-Entry "foreign-address" #f 292 8 292 28 ()}
      {Lisp-Entry "foreign-release!" #f 293 8 293 29 ()}
      {Lisp-Entry "foreign-released?" #f 294 8 294 30 ()}
      {Lisp-Entry "foreign-tags" #f 295 8 295 25 ()}
      {Lisp-Entry "still-obj-refcount-dec!" #f 297 8 297 36 ()}
      {Lisp-Entry "still-obj-refcount-inc!" #f 298 8 298 36 ()}
      {Lisp-Entry "compile-file" #f 306 8 306 20 ()}
      {Lisp-Entry "command-line" #f 314 8 314 20 ()}
      {Lisp-Entry "user-name" #f 315 8 315 17 ()}
      {Lisp-Entry "composite-name?" #f 323 8 323 28 ()}
      {Lisp-Entry "compose-name" #f 324 8 324 25 ()}
      {Lisp-Entry "identifier-module" #f 325 8 325 30 ()}
      {Lisp-Entry "identifier-name" #f 326 8 326 28 ()}
      {Lisp-Entry "split-identifier" #f 327 8 327 29 ()}
      {Lisp-Entry "bitwise-not" #f 343 8 343 19 ()}
      {Lisp-Entry "bitwise-and" #f 344 8 344 19 ()}
      {Lisp-Entry "bitwise-ior" #f 345 8 345 19 ()}
      {Lisp-Entry "bitwise-xor" #f 346 8 346 19 ()}
      {Lisp-Entry "arithmetic-shift" #f 347 8 347 24 ()}
      {Lisp-Entry "bit-set?" #f 348 8 348 16 ()}
      {Lisp-Entry "extract-bit-field" #f 349 8 349 25 ()}
      {Lisp-Entry "build-feedback" #f 357 8 357 27 ()}
      {Lisp-Entry "boot-directory" #f 358 8 358 27 ()}
      {Lisp-Entry "kernel-system" #f 359 8 359 26 ()}
      {Lisp-Entry "kernel-platform" #f 360 8 360 28 ()}
      {Lisp-Entry "kernel-windowing" #f 361 8 361 29 ()}
      {Lisp-Entry "kernel-safety" #f 362 8 362 26 ()}
      {Lisp-Entry "kernel-optimize?" #f 363 8 363 29 ()}
      {Lisp-Entry "kernel-debug-environments?" #f 364 8 364 39 ()}
      {Lisp-Entry "kernel-debug-location?" #f 365 8 365 35 ()}
      {Lisp-Entry "kernel-debug-source?" #f 366 8 366 33 ()}
      {Lisp-Entry "kernel-destination" #f 367 8 367 31 ()}
      {Lisp-Entry "kernel-built" #f 368 8 368 25 ()}
      {Lisp-Entry "kernel-install" #f 369 8 369 27 ()}
      {Lisp-Entry "kernel-source" #f 370 8 370 26 ()}
      {Lisp-Entry "kernel-version" #f 371 8 371 27 ()}
      {Lisp-Entry "get-source-version-number" #f 372 8 372 38 ()}
      {Lisp-Entry "jazz-product" #f 373 8 373 25 ()}
      {Lisp-Entry "jazz-profile" #f 374 8 374 25 ()}
      {Lisp-Entry "use-debugger?" #f 375 8 375 26 ()}
      {Lisp-Entry "get-repositories" #f 376 8 376 29 ()}
      {Lisp-Entry "install-repository" #f 377 8 377 31 ()}
      {Lisp-Entry "uninstall-repository" #f 378 8 378 33 ()}
      {Lisp-Entry "find-repository" #f 379 8 379 28 ()}
      {Lisp-Entry "find-package" #f 380 8 380 25 ()}
      {Lisp-Entry "repository?" #f 381 8 381 24 ()}
      {Lisp-Entry "repository-name" #f 382 8 382 28 ()}
      {Lisp-Entry "repository-directory" #f 383 8 383 33 ()}
      {Lisp-Entry "repository-library-root" #f 384 8 384 36 ()}
      {Lisp-Entry "repository-library-directory" #f 385 8 385 41 ()}
      {Lisp-Entry "repository-binary?" #f 386 8 386 31 ()}
      {Lisp-Entry "repository-packages" #f 387 8 387 32 ()}
      {Lisp-Entry "repository-find-package" #f 388 8 388 36 ()}
      {Lisp-Entry "repository-install-packages" #f 389 8 389 40 ()}
      {Lisp-Entry "repository-add-package" #f 390 8 390 35 ()}
      {Lisp-Entry "repository-remove-package" #f 391 8 391 38 ()}
      {Lisp-Entry "package?" #f 392 8 392 21 ()}
      {Lisp-Entry "package-repository" #f 393 8 393 31 ()}
      {Lisp-Entry "package-name" #f 394 8 394 25 ()}
      {Lisp-Entry "package-project" #f 395 8 395 28 ()}
      {Lisp-Entry "split-version" #f 396 8 396 26 ()}
      {Lisp-Entry "present-version" #f 397 8 397 28 ()}
      {Lisp-Entry "load-package" #f 398 8 398 25 ()}
      {Lisp-Entry "register-product" #f 399 8 399 29 ()}
      {Lisp-Entry "register-product-run" #f 400 8 400 33 ()}
      {Lisp-Entry "product-descriptor-name" #f 401 8 401 36 ()}
      {Lisp-Entry "product-descriptor-module" #f 402 8 402 38 ()}
      {Lisp-Entry "product-descriptor-title" #f 403 8 403 37 ()}
      {Lisp-Entry "product-descriptor-icon" #f 404 8 404 36 ()}
      {Lisp-Entry "product-descriptor-run" #f 405 8 405 35 ()}
      {Lisp-Entry "product-descriptor-update" #f 406 8 406 38 ()}
      {Lisp-Entry "product-descriptor-build" #f 407 8 407 37 ()}
      {Lisp-Entry "product-descriptor-dependencies" #f 408 8 408 44 ()}
      {Lisp-Entry "run-product-descriptor" #f 409 8 409 35 ()}
      {Lisp-Entry "update-product-descriptor" #f 410 8 410 38 ()}
      {Lisp-Entry "build-product-descriptor" #f 411 8 411 37 ()}
      {Lisp-Entry "current-process-name" #f 412 8 412 33 ()}
      {Lisp-Entry "current-process-name-set!" #f 413 8 413 38 ()}
      {Lisp-Entry "current-process-title" #f 414 8 414 34 ()}
      {Lisp-Entry "current-process-title-set!" #f 415 8 415 39 ()}
      {Lisp-Entry "current-process-icon" #f 416 8 416 33 ()}
      {Lisp-Entry "current-process-icon-set!" #f 417 8 417 38 ()}
      {Lisp-Entry "current-process-version" #f 418 8 418 36 ()}
      {Lisp-Entry "current-process-version-set!" #f 419 8 419 41 ()}
      {Lisp-Entry "current-process-present" #f 420 8 420 36 ()}
      {Lisp-Entry "destination-directory" #f 421 8 421 34 ()}
      {Lisp-Entry "executable-extension" #f 422 8 422 33 ()}
      {Lisp-Entry "run-product" #f 423 8 423 24 ()}
      {Lisp-Entry "update-product" #f 424 8 424 27 ()}
      {Lisp-Entry "build-product" #f 425 8 425 26 ()}
      {Lisp-Entry "find-pathname-module" #f 426 8 426 33 ()}
      {Lisp-Entry "find-module-src" #f 427 8 427 28 ()}
      {Lisp-Entry "gather-profiles" #f 428 8 428 28 ()}
      {Lisp-Entry "make-profile" #f 429 8 429 25 ()}
      {Lisp-Entry "profile-name" #f 430 8 430 25 ()}
      {Lisp-Entry "profile-title" #f 431 8 431 26 ()}
      {Lisp-Entry "profile-module" #f 432 8 432 27 ()}
      {Lisp-Entry "module-autoload" #f 433 8 433 28 ()}
      {Lisp-Entry "get-environment" #f 434 8 434 28 ()}
      {Lisp-Entry "get-environment-module" #f 435 8 435 35 ()}
      {Lisp-Entry "module-loaded?" #f 436 8 436 27 ()}
      {Lisp-Entry "module-uptodate-binary?" #f 437 8 437 36 ()}
      {Lisp-Entry "load-module" #f 438 8 438 24 ()}
      {Lisp-Entry "reload-module" #f 439 8 439 26 ()}
      {Lisp-Entry "load-all" #f 440 8 440 21 ()}
      {Lisp-Entry "get-load-mutex" #f 441 8 441 27 ()}
      {Lisp-Entry "get-load-stack" #f 442 8 442 27 ()}
      {Lisp-Entry "walk-for" #f 443 8 443 21 ()}
      {Lisp-Entry "main" #f 444 8 444 12 ()}
      {Lisp-Entry "keyword?" #f 452 8 452 21 ()}
      {Lisp-Entry "string->keyword" #f 453 8 453 28 ()}
      {Lisp-Entry "keyword->string" #f 454 8 454 28 ()}
      {Lisp-Entry "not-null?" #f 462 8 462 22 ()}
      {Lisp-Entry "listify" #f 463 8 463 20 ()}
      {Lisp-Entry "list-copy" #f 464 8 464 22 ()}
      {Lisp-Entry "last-pair" #f 465 8 465 22 ()}
      {Lisp-Entry "proper-list" #f 466 8 466 24 ()}
      {Lisp-Entry "gc" #f 474 8 474 15 ()}
      {Lisp-Entry "process-memory" #f 475 8 475 27 ()}
      {Lisp-Entry "symbols-memory" #f 476 8 476 27 ()}
      {Lisp-Entry "classes-statistics" #f 477 8 477 31 ()}
      {Lisp-Entry "instances-statistics" #f 478 8 478 33 ()}
      {Lisp-Entry "open-tcp-client" #f 486 8 486 28 ()}
      {Lisp-Entry "open-tcp-server" #f 487 8 487 28 ()}
      {Lisp-Entry "tcp-server-socket-info" #f 488 8 488 35 ()}
      {Lisp-Entry "call-with-tcp-client" #f 489 8 489 33 ()}
      {Lisp-Entry "new" #f 497 8 497 16 ()}
      {Lisp-Entry "class-of" #f 498 8 498 21 ()}
      {Lisp-Entry "object?" #f 499 8 499 20 ()}
      {Lisp-Entry "type?" #f 500 8 500 18 ()}
      {Lisp-Entry "category?" #f 501 8 501 22 ()}
      {Lisp-Entry "interface?" #f 502 8 502 23 ()}
      {Lisp-Entry "method?" #f 503 8 503 20 ()}
      {Lisp-Entry "is?" #f 504 8 504 16 ()}
      {Lisp-Entry "subtype?" #f 505 8 505 21 ()}
      {Lisp-Entry "subcategory?" #f 506 8 506 25 ()}
      {Lisp-Entry "subclass?" #f 507 8 507 22 ()}
      {Lisp-Entry "make-parameter" #f 515 8 515 22 ()}
      {Lisp-Entry "pathname-type" #f 523 8 523 26 ()}
      {Lisp-Entry "pathname-expand" #f 524 8 524 28 ()}
      {Lisp-Entry "pathname-normalize" #f 525 8 525 31 ()}
      {Lisp-Entry "file-exists?" #f 526 8 526 25 ()}
      {Lisp-Entry "file-delete" #f 527 8 527 24 ()}
      {Lisp-Entry "file-copy" #f 528 8 528 22 ()}
      {Lisp-Entry "file-modification-time" #f 529 8 529 35 ()}
      {Lisp-Entry "file-rename" #f 530 8 530 24 ()}
      {Lisp-Entry "current-directory" #f 531 8 531 30 ()}
      {Lisp-Entry "current-directory-set!" #f 532 8 532 35 ()}
      {Lisp-Entry "with-current-directory" #f 533 8 533 35 ()}
      {Lisp-Entry "directory-create" #f 534 8 534 29 ()}
      {Lisp-Entry "directory-content" #f 535 8 535 30 ()}
      {Lisp-Entry "directory-delete" #f 536 8 536 29 ()}
      {Lisp-Entry "open-string-pipe" #f 544 8 544 24 ()}
      {Lisp-Entry "port?" #f 552 8 552 13 ()}
      {Lisp-Entry "close-port" #f 553 8 553 23 ()}
      {Lisp-Entry "input-port-timeout-set!" #f 554 8 554 36 ()}
      {Lisp-Entry "output-port-timeout-set!" #f 555 8 555 37 ()}
      {Lisp-Entry "open-event-queue" #f 556 8 556 24 ()}
      {Lisp-Entry "eof-object" #f 557 8 557 23 ()}
      {Lisp-Entry "open-input-string" #f 558 8 558 25 ()}
      {Lisp-Entry "open-output-string" #f 559 8 559 26 ()}
      {Lisp-Entry "get-output-string" #f 560 8 560 25 ()}
      {Lisp-Entry "call-with-input-string" #f 561 8 561 30 ()}
      {Lisp-Entry "with-input-from-string" #f 562 8 562 30 ()}
      {Lisp-Entry "call-with-output-string" #f 563 8 563 31 ()}
      {Lisp-Entry "read-substring" #f 564 8 564 22 ()}
      {Lisp-Entry "open-vector" #f 565 8 565 19 ()}
      {Lisp-Entry "call-with-input-u8vector" #f 566 8 566 32 ()}
      {Lisp-Entry "open-output-u8vector" #f 567 8 567 28 ()}
      {Lisp-Entry "get-output-u8vector" #f 568 8 568 27 ()}
      {Lisp-Entry "read-u8" #f 569 8 569 20 ()}
      {Lisp-Entry "write-u8" #f 570 8 570 21 ()}
      {Lisp-Entry "read-subu8vector" #f 571 8 571 29 ()}
      {Lisp-Entry "write-subu8vector" #f 572 8 572 30 ()}
      {Lisp-Entry "read-line" #f 573 8 573 22 ()}
      {Lisp-Entry "read-proper-line" #f 574 8 574 29 ()}
      {Lisp-Entry "read-all" #f 575 8 575 21 ()}
      {Lisp-Entry "print" #f 576 8 576 18 ()}
      {Lisp-Entry "pretty-print" #f 577 8 577 25 ()}
      {Lisp-Entry "read-source-all" #f 578 8 578 28 ()}
      {Lisp-Entry "read-source-first" #f 579 8 579 30 ()}
      {Lisp-Entry "force-output" #f 580 8 580 20 ()}
      {Lisp-Entry "current-error-port" #f 581 8 581 26 ()}
      {Lisp-Entry "with-output-to-port" #f 582 8 582 27 ()}
      {Lisp-Entry "write-u8" #f 583 8 583 16 ()}
      {Lisp-Entry "property-getter" #f 591 8 591 28 ()}
      {Lisp-Entry "property-setter" #f 592 8 592 28 ()}
      {Lisp-Entry "new-queue" #f 600 8 600 22 ()}
      {Lisp-Entry "enqueue" #f 601 8 601 20 ()}
      {Lisp-Entry "enqueue-list" #f 602 8 602 25 ()}
      {Lisp-Entry "queue-list" #f 603 8 603 23 ()}
      {Lisp-Entry "reset-queue" #f 604 8 604 24 ()}
      {Lisp-Entry "random-integer" #f 612 8 612 27 ()}
      {Lisp-Entry "random-real" #f 613 8 613 24 ()}
      {Lisp-Entry "random-source-randomize!" #f 614 8 614 37 ()}
      {Lisp-Entry "random-source-pseudo-randomize!" #f 615 8 615 44 ()}
      {Lisp-Entry "default-random-source" #f 616 8 616 34 ()}
      {Lisp-Entry "with-readtable" #f 624 8 624 27 ()}
      {Lisp-Entry "scheme-readtable" #f 625 8 625 29 ()}
      {Lisp-Entry "jazz-readtable" #f 626 8 626 27 ()}
      {Lisp-Entry "with-jazz-readtable" #f 627 8 627 32 ()}
      {Lisp-Entry "install-jazz-literals" #f 628 8 628 34 ()}
      {Lisp-Entry "current-repl-context" #f 636 8 636 33 ()}
      {Lisp-Entry "repl-context-level" #f 637 8 637 31 ()}
      {Lisp-Entry "repl-context-depth" #f 638 8 638 31 ()}
      {Lisp-Entry "repl-context-cont" #f 639 8 639 30 ()}
      {Lisp-Entry "repl-context-initial-cont" #f 640 8 640 38 ()}
      {Lisp-Entry "repl-context-prev-level" #f 641 8 641 36 ()}
      {Lisp-Entry "repl-context-prev-depth" #f 642 8 642 36 ()}
      {Lisp-Entry "with-repl-context" #f 643 8 643 30 ()}
      {Lisp-Entry "inspect-repl-context" #f 644 8 644 33 ()}
      {Lisp-Entry "repl" #f 645 8 645 17 ()}
      {Lisp-Entry "eval-within-no-winding" #f 646 8 646 35 ()}
      {Lisp-Entry "repl-result-history-add" #f 647 8 647 36 ()}
      {Lisp-Entry "repl-result-history-ref" #f 648 8 648 31 ()}
      {Lisp-Entry "resource-pathname" #f 656 8 656 30 ()}
      {Lisp-Entry "get-catalog" #f 664 8 664 24 ()}
      {Lisp-Entry "get-catalog-entry" #f 665 8 665 30 ()}
      {Lisp-Entry "locate-library-declaration" #f 666 8 666 39 ()}
      {Lisp-Entry "get-object-slot" #f 667 8 667 28 ()}
      {Lisp-Entry "set-object-slot" #f 668 8 668 28 ()}
      {Lisp-Entry "dispatch" #f 669 8 669 21 ()}
      {Lisp-Entry "find-dispatch" #f 670 8 670 26 ()}
      {Lisp-Entry "call-into-abstract" #f 671 8 671 31 ()}
      {Lisp-Entry "object->serial" #f 679 8 679 27 ()}
      {Lisp-Entry "serial->object" #f 680 8 680 27 ()}
      {Lisp-Entry "object->serial-number" #f 683 8 683 29 ()}
      {Lisp-Entry "serial-number->object" #f 684 8 684 29 ()}
      {Lisp-Entry "shell-command" #f 692 8 692 21 ()}
      {Lisp-Entry "slot?" #f 700 8 700 18 ()}
      {Lisp-Entry "slot-value" #f 701 8 701 23 ()}
      {Lisp-Entry "set-slot-value" #f 702 8 702 27 ()}
      {Lisp-Entry "socket-info-address" #f 710 8 710 32 ()}
      {Lisp-Entry "socket-info-port-number" #f 711 8 711 36 ()}
      {Lisp-Entry "get-procedure-name" #f 719 8 719 31 ()}
      {Lisp-Entry "get-continuation-stack" #f 720 8 720 35 ()}
      {Lisp-Entry "get-continuation-name" #f 721 8 721 34 ()}
      {Lisp-Entry "get-continuation-dynamic-environment" #f 722 8 722 49 ()}
      {Lisp-Entry "get-continuation-lexical-environment" #f 723 8 723 49 ()}
      {Lisp-Entry "get-continuation-location" #f 724 8 724 38 ()}
      {Lisp-Entry "active-profile" #f 732 8 732 27 ()}
      {Lisp-Entry "profile-total" #f 733 8 733 26 ()}
      {Lisp-Entry "profile-unknown" #f 734 8 734 28 ()}
      {Lisp-Entry "profile-calls" #f 735 8 735 26 ()}
      {Lisp-Entry "reset-profile" #f 736 8 736 26 ()}
      {Lisp-Entry "start-profile" #f 737 8 737 26 ()}
      {Lisp-Entry "stop-profile" #f 738 8 738 25 ()}
      {Lisp-Entry "profile-running?" #f 739 8 739 29 ()}
      {Lisp-Entry "join-strings" #f 747 8 747 25 ()}
      {Lisp-Entry "generate-symbol" #f 755 8 755 28 ()}
      {Lisp-Entry "with-uniqueness" #f 756 8 756 28 ()}
      {Lisp-Entry "source?" #f 764 8 764 20 ()}
      {Lisp-Entry "source-code" #f 765 8 765 24 ()}
      {Lisp-Entry "source-locat" #f 766 8 766 25 ()}
      {Lisp-Entry "desourcify" #f 767 8 767 23 ()}
      {Lisp-Entry "desourcify-list" #f 768 8 768 28 ()}
      {Lisp-Entry "sourcify" #f 769 8 769 21 ()}
      {Lisp-Entry "sourcify-if" #f 770 8 770 24 ()}
      {Lisp-Entry "present-source" #f 771 8 771 27 ()}
      {Lisp-Entry "locat-container" #f 772 8 772 28 ()}
      {Lisp-Entry "locat-position" #f 773 8 773 27 ()}
      {Lisp-Entry "locat->file/line/col" #f 774 8 774 33 ()}
      {Lisp-Entry "container->path" #f 775 8 775 28 ()}
      {Lisp-Entry "position->filepos" #f 776 8 776 30 ()}
      {Lisp-Entry "filepos-line" #f 777 8 777 25 ()}
      {Lisp-Entry "filepos-col" #f 778 8 778 24 ()}
      {Lisp-Entry "switch?" #f 786 8 786 20 ()}
      {Lisp-Entry "switch-name" #f 787 8 787 24 ()}
      {Lisp-Entry "command-argument" #f 788 8 788 29 ()}
      {Lisp-Entry "open-process" #f 789 8 789 25 ()}
      {Lisp-Entry "process-status" #f 790 8 790 27 ()}
      {Lisp-Entry "exit" #f 791 8 791 17 ()}
      {Lisp-Entry "table?" #f 799 8 799 14 ()}
      {Lisp-Entry "make-table" #f 800 8 800 18 ()}
      {Lisp-Entry "table-ref" #f 801 8 801 17 ()}
      {Lisp-Entry "table-set!" #f 802 8 802 18 ()}
      {Lisp-Entry "table->list" #f 803 8 803 19 ()}
      {Lisp-Entry "list->table" #f 804 8 804 19 ()}
      {Lisp-Entry "table-clear" #f 805 8 805 24 ()}
      {Lisp-Entry "table-length" #f 806 8 806 25 ()}
      {Lisp-Entry "iterate-table" #f 807 8 807 26 ()}
      {Lisp-Entry "map-table" #f 808 8 808 22 ()}
      {Lisp-Entry "table-entries" #f 809 8 809 26 ()}
      {Lisp-Entry "eq-hash" #f 810 8 810 20 ()}
      {Lisp-Entry "eqv-hash" #f 811 8 811 21 ()}
      {Lisp-Entry "equal-hash" #f 812 8 812 23 ()}
      {Lisp-Entry "set-terminal-title" #f 820 8 820 31 ()}
      {Lisp-Entry "bring-terminal-to-front" #f 821 8 821 36 ()}
      {Lisp-Entry "clear-terminal" #f 822 8 822 27 ()}
      {Lisp-Entry "current-thread" #f 830 8 830 27 ()}
      {Lisp-Entry "thread?" #f 831 8 831 20 ()}
      {Lisp-Entry "make-thread" #f 832 8 832 24 ()}
      {Lisp-Entry "make-root-thread" #f 833 8 833 29 ()}
      {Lisp-Entry "thread-name" #f 834 8 834 24 ()}
      {Lisp-Entry "thread-specific" #f 835 8 835 28 ()}
      {Lisp-Entry "thread-specific-set!" #f 836 8 836 33 ()}
      {Lisp-Entry "thread-base-priority" #f 837 8 837 33 ()}
      {Lisp-Entry "thread-base-priority-set!" #f 838 8 838 38 ()}
      {Lisp-Entry "thread-priority-boost" #f 839 8 839 34 ()}
      {Lisp-Entry "thread-priority-boost-set!" #f 840 8 840 39 ()}
      {Lisp-Entry "thread-start!" #f 841 8 841 26 ()}
      {Lisp-Entry "thread-yield!" #f 842 8 842 26 ()}
      {Lisp-Entry "thread-sleep!" #f 843 8 843 26 ()}
      {Lisp-Entry "thread-terminate!" #f 844 8 844 30 ()}
      {Lisp-Entry "thread-join!" #f 845 8 845 25 ()}
      {Lisp-Entry "thread-send" #f 846 8 846 24 ()}
      {Lisp-Entry "thread-receive" #f 847 8 847 27 ()}
      {Lisp-Entry "thread-interrupt!" #f 848 8 848 30 ()}
      {Lisp-Entry "thread-thread-group" #f 849 8 849 32 ()}
      {Lisp-Entry "thread-group->thread-group-list" #f 850 8 850 44 ()}
      {Lisp-Entry "thread-group->thread-group-vector" #f 851 8 851 46 ()}
      {Lisp-Entry "thread-group->thread-list" #f 852 8 852 38 ()}
      {Lisp-Entry "thread-group->thread-vector" #f 853 8 853 40 ()}
      {Lisp-Entry "thread-state" #f 854 8 854 25 ()}
      {Lisp-Entry "thread-state-abnormally-terminated-reason" #f 855 8 855 54 ()}
      {Lisp-Entry "thread-state-abnormally-terminated?" #f 856 8 856 48 ()}
      {Lisp-Entry "thread-state-active-timeout" #f 857 8 857 40 ()}
      {Lisp-Entry "thread-state-active-waiting-for" #f 858 8 858 44 ()}
      {Lisp-Entry "thread-state-active?" #f 859 8 859 33 ()}
      {Lisp-Entry "thread-state-initialized?" #f 860 8 860 38 ()}
      {Lisp-Entry "thread-state-normally-terminated-result" #f 861 8 861 52 ()}
      {Lisp-Entry "thread-state-normally-terminated?" #f 862 8 862 46 ()}
      {Lisp-Entry "thread-state-uninitialized?" #f 863 8 863 40 ()}
      {Lisp-Entry "pristine-thread-continuation" #f 864 8 864 41 ()}
      {Lisp-Entry "mutex?" #f 865 8 865 19 ()}
      {Lisp-Entry "make-mutex" #f 866 8 866 23 ()}
      {Lisp-Entry "mutex-name" #f 867 8 867 23 ()}
      {Lisp-Entry "mutex-specific" #f 868 8 868 27 ()}
      {Lisp-Entry "mutex-specific-set!" #f 869 8 869 32 ()}
      {Lisp-Entry "mutex-state" #f 870 8 870 24 ()}
      {Lisp-Entry "mutex-lock!" #f 871 8 871 24 ()}
      {Lisp-Entry "mutex-unlock!" #f 872 8 872 26 ()}
      {Lisp-Entry "mutex-wait" #f 873 8 873 23 ()}
      {Lisp-Entry "mutex-owner" #f 874 8 874 24 ()}
      {Lisp-Entry "condition?" #f 875 8 875 23 ()}
      {Lisp-Entry "make-condition" #f 876 8 876 27 ()}
      {Lisp-Entry "condition-name" #f 877 8 877 27 ()}
      {Lisp-Entry "condition-specific" #f 878 8 878 31 ()}
      {Lisp-Entry "condition-specific-set!" #f 879 8 879 36 ()}
      {Lisp-Entry "condition-signal!" #f 880 8 880 30 ()}
      {Lisp-Entry "condition-broadcast!" #f 881 8 881 33 ()}
      {Lisp-Entry "current-systime" #f 889 8 889 28 ()}
      {Lisp-Entry "systime?" #f 890 8 890 21 ()}
      {Lisp-Entry "systime->seconds" #f 891 8 891 29 ()}
      {Lisp-Entry "seconds->systime" #f 892 8 892 29 ()}
      {Lisp-Entry "process-times" #f 893 8 893 26 ()}
      {Lisp-Entry "cpu-time" #f 894 8 894 21 ()}
      {Lisp-Entry "real-time" #f 895 8 895 22 ()}
      {Lisp-Entry "unspecified" #f 903 8 903 24 ()}
      {Lisp-Entry "unspecified?" #f 904 8 904 25 ()}
      {Lisp-Entry "specified?" #f 905 8 905 23 ()}
      {Lisp-Entry "vector-copy" #f 913 8 913 24 ()}
      {Lisp-Entry "u8vector" #f 914 8 914 16 ()}
      {Lisp-Entry "make-u8vector" #f 915 8 915 21 ()}
      {Lisp-Entry "u8vector-length" #f 916 8 916 23 ()}
      {Lisp-Entry "u8vector-ref" #f 917 8 917 20 ()}
      {Lisp-Entry "u8vector-set!" #f 918 8 918 21 ()}
      {Lisp-Entry "u8vector?" #f 919 8 919 17 ()}
      {Lisp-Entry "u8vector->list" #f 920 8 920 22 ()}
      {Lisp-Entry "list->u8vector" #f 921 8 921 22 ()}
      {Lisp-Entry "u16vector" #f 922 8 922 17 ()}
      {Lisp-Entry "make-u16vector" #f 923 8 923 22 ()}
      {Lisp-Entry "u16vector-length" #f 924 8 924 24 ()}
      {Lisp-Entry "u16vector-ref" #f 925 8 925 21 ()}
      {Lisp-Entry "u16vector-set!" #f 926 8 926 22 ()}
      {Lisp-Entry "u16vector?" #f 927 8 927 18 ()}
      {Lisp-Entry "u32vector" #f 928 8 928 17 ()}
      {Lisp-Entry "make-u32vector" #f 929 8 929 22 ()}
      {Lisp-Entry "u32vector-length" #f 930 8 930 24 ()}
      {Lisp-Entry "u32vector-ref" #f 931 8 931 21 ()}
      {Lisp-Entry "u32vector-set!" #f 932 8 932 22 ()}
      {Lisp-Entry "u32vector?" #f 933 8 933 18 ()}
      {Lisp-Entry "f32vector" #f 934 8 934 17 ()}
      {Lisp-Entry "make-f32vector" #f 935 8 935 22 ()}
      {Lisp-Entry "f32vector-length" #f 936 8 936 24 ()}
      {Lisp-Entry "f32vector-ref" #f 937 8 937 21 ()}
      {Lisp-Entry "f32vector-set!" #f 938 8 938 22 ()}
      {Lisp-Entry "f32vector?" #f 939 8 939 18 ()}
      {Lisp-Entry "f64vector" #f 940 8 940 17 ()}
      {Lisp-Entry "make-f64vector" #f 941 8 941 22 ()}
      {Lisp-Entry "f64vector-length" #f 942 8 942 24 ()}
      {Lisp-Entry "f64vector-ref" #f 943 8 943 21 ()}
      {Lisp-Entry "f64vector-set!" #f 944 8 944 22 ()}
      {Lisp-Entry "f64vector?" #f 945 8 945 18 ()}
      {Lisp-Entry "new-walk-context" #f 953 8 953 29 ()}
      {Lisp-Entry "register-literal-constructor" #f 954 8 954 41 ()}
      {Lisp-Entry "specifier?" #f 955 8 955 23 ()}
      {Lisp-Entry "binding-specifier" #f 956 8 956 30 ()}
      {Lisp-Entry "parse-specifier" #f 957 8 957 28 ()}
      {Lisp-Entry "requested-module-name" #f 958 8 958 34 ()}
      {Lisp-Entry "requested-module-resource" #f 959 8 959 38 ()}}})
"_language"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "language" "_language.jazz"} 1237390601
    {Lisp-Entry "jazz.dialect.language" #f 37 9 37 30 ("axis-find-in" "axis-find" "axis-for-each" "instantiate-ends-with?" "instantiate-starts-with?" "string-find-in" "instantiate-find-in" "string-find" "instantiate-find" "instantiate-butlast" "string-for-each" "instantiate-for-each" "jazz.dialect")
      {Lisp-Entry "nil" #f 48 12 48 15 ("nil" "'nil" "list")}
      {Lisp-Entry "nil?" #f 52 27 52 31 ("nil" "eq?" "obj")}
      {Lisp-Entry "not-nil?" #f 56 27 56 35 ("nil" "eq?" "not" "obj")}
      {Lisp-Entry "Object" #f 65 17 65 23 ("Object-Class")
        {Lisp-Entry "initialize" #f 68 19 68 29 ()}
        {Lisp-Entry "destroy" #f 72 19 72 26 ()}
        {Lisp-Entry "print" #f 76 26 76 31 ("print-detail" "function" "print-unreadable" "self" "object?" "if" "detail" "output")}
        {Lisp-Entry "print-detail" #f 85 21 85 33 ("write" "self" "display" ":human" "eq?" "if" "detail" "output")}
        {Lisp-Entry "fold-literal" #f 91 26 91 38 ("self" "error")}
        {Lisp-Entry "class-actions" #f 95 26 95 39 ()}
        {Lisp-Entry "focus-actions" #f 99 26 99 39 ()}
        {Lisp-Entry "guest-actions" #f 103 26 103 39 ()}
        {Lisp-Entry "initialized?" #f 107 18 107 30 ("self" "object-initialized?")}
        {Lisp-Entry "hash-object" #f 111 26 111 37 ("self" "error")}
        {Lisp-Entry "copy-object" #f 115 29 115 40 ("self" "error" "deep?")}
        {Lisp-Entry "compare-object" #f 119 26 119 40 (":incompatible" "object")}
        {Lisp-Entry "ci-compare-object" #f 123 26 123 43 (":incompatible" "object")}
        {Lisp-Entry "describe-object" #f 127 29 127 44 ("print" "printer")}
        {Lisp-Entry "release" #f 131 26 131 33 ()}
        {Lisp-Entry "close" #f 135 26 135 31 ("self" "call-destroy")}
        {Lisp-Entry "destroy-mandatory" #f 139 21 139 38 ("self" "set-must-destroy")}
        {Lisp-Entry "destroyed?" #f 143 18 143 28 ("self" "object-destroyed?")}
        {Lisp-Entry "get-sort-value" #f 147 26 147 40 ()}
        {Lisp-Entry "redirect-handler" #f 151 26 151 42 ("self" "sender" "handler")}
        {Lisp-Entry "coerce-string" #f 155 26 155 39 ("self" "error")}
        {Lisp-Entry "iterate-object" #f 159 26 159 40 ("self" "error")}
        {Lisp-Entry "object-similar?" #f 168 26 168 41 ("self" "eq?" "object")}
        {Lisp-Entry "object-alphabetic?" #f 172 26 172 44 ("self" "error")}
        {Lisp-Entry "object-numeric?" #f 176 26 176 41 ("self" "error")}
        {Lisp-Entry "object-alphanumeric?" #f 180 26 180 46 ("self" "error")}
        {Lisp-Entry "object-whitespace?" #f 184 26 184 44 ("self" "error")}
        {Lisp-Entry "object-upper-case?" #f 188 26 188 44 ("self" "error")}
        {Lisp-Entry "object-lower-case?" #f 192 26 192 44 ("self" "error")}
        {Lisp-Entry "object-upcase" #f 196 26 196 39 ("self" "error")}
        {Lisp-Entry "object-downcase" #f 200 26 200 41 ("self" "error")}
        {Lisp-Entry "object-capitalize" #f 204 26 204 43 ("self" "error")}}
      {Lisp-Entry "compare" #f 208 27 208 34 ("compare-object" ":equal" "eqv?" "if" "b" "a")}
      {Lisp-Entry "ci-compare" #f 214 27 214 37 ("ci-compare-object" ":equal" "eqv?" "if" "b" "a")}
      {Lisp-Entry "copy" #f 220 20 220 24 ("subcopy" "obj")}
      {Lisp-Entry "subcopy" #f 224 20 224 27 ("copy-object" "deep?" "obj")}
      {Lisp-Entry "native-class" #f 228 13 228 25 ("error" "name")}
      {Lisp-Entry "=-hash" #f 232 13 232 19 ("hash-object" "obj")}
      {Lisp-Entry "object-initialized?" #f 236 13 236 32 ("obj")}
      {Lisp-Entry "get-must-destroy" #f 241 13 241 29 ("obj")}
      {Lisp-Entry "set-must-destroy" #f 245 13 245 29 ("obj")}
      {Lisp-Entry "set-was-destroyed" #f 250 13 250 30 ("obj")}
      {Lisp-Entry "object-destroyed?" #f 255 13 255 30 ("obj")}
      {Lisp-Entry "destroy-mandatory" #f 260 20 260 37 ()}
      {Lisp-Entry "call-destroy" #f 265 13 265 25 ("set-was-destroyed" "destroy" "obj")}
      {Lisp-Entry "Type" #f 275 7 275 11 ("Object")}
      {Lisp-Entry "Category" #f 283 7 283 15 ("Type")
        {Lisp-Entry "name" #f 286 8 286 12 ("generate")}
        {Lisp-Entry "fields" #f 287 8 287 14 ("generate")}
        {Lisp-Entry "virtual-size" #f 288 8 288 20 ("generate")}
        {Lisp-Entry "ancestors" #f 289 8 289 17 ("generate")}
        {Lisp-Entry "descendants" #f 290 8 290 19 ("generate")}
        {Lisp-Entry "print" #f 293 11 293 16 ("get-name" "format" "function" "self" "print-unreadable" "detail" "output")}}
      {Lisp-Entry "Class" #f 304 7 304 12 ("Category")
        {Lisp-Entry "ascendant" #f 307 8 307 17 ("generate")}
        {Lisp-Entry "interfaces" #f 308 8 308 18 ("generate")}
        {Lisp-Entry "slots" #f 309 8 309 13 ("generate")}
        {Lisp-Entry "instance-size" #f 310 8 310 21 ("generate")}
        {Lisp-Entry "level" #f 311 8 311 13 ("generate")}
        {Lisp-Entry "dispatch-table" #f 312 8 312 22 ("generate")}
        {Lisp-Entry "core-method-alist" #f 313 8 313 25 ("generate")}
        {Lisp-Entry "core-virtual-alist" #f 314 8 314 26 ("generate")}
        {Lisp-Entry "core-virtual-names" #f 315 8 315 26 ("generate")}
        {Lisp-Entry "core-vtable" #f 316 8 316 19 ("generate")}
        {Lisp-Entry "class-table" #f 317 8 317 19 ("generate")}
        {Lisp-Entry "interface-table" #f 318 8 318 23 ("generate")}
        {Lisp-Entry "coerce-object" #f 321 26 321 39 ("self" "type-name" "error" "obj")}
        {Lisp-Entry "external-name" #f 325 26 325 39 ("self" "type-name" "error" "when" "error?" "error?:")}}
      {Lisp-Entry "Object-Class" #f 330 7 330 19 ("Class")}
      {Lisp-Entry "class?" #f 333 27 333 33 ("Class" "is?" "obj")}
      {Lisp-Entry "coerce" #f 337 27 337 33 ("coerce-object" "class" "object")}
      {Lisp-Entry "allocate" #f 341 20 341 28 ("call-into-abstract" "size" "class")}
      {Lisp-Entry "Interface" #f 350 7 350 16 ("Category")
        {Lisp-Entry "ascendants" #f 353 8 353 18 ("generate")}
        {Lisp-Entry "rank" #f 354 8 354 12 ("generate")}}
      {Lisp-Entry "Field" #f 362 7 362 12 ("Object")
        {Lisp-Entry "name" #f 365 8 365 12 ("generate")}}
      {Lisp-Entry "category-field" #f 368 20 368 34 ("find-field" "field-name" "category")}
      {Lisp-Entry "all-slots" #f 372 20 372 29 ("get-slots" "model")}
      {Lisp-Entry "Method" #f 381 7 381 13 ("Field")
        {Lisp-Entry "dispatch-type" #f 384 8 384 21 ("generate")}
        {Lisp-Entry "implementation" #f 385 8 385 22 ("generate")}
        {Lisp-Entry "implementation-tree" #f 386 8 386 27 ("generate")}
        {Lisp-Entry "category-rank" #f 387 8 387 21 ("generate")}
        {Lisp-Entry "implementation-rank" #f 388 8 388 27 ("generate")}}
      {Lisp-Entry "Generic" #f 396 7 396 14 ("Object")
        {Lisp-Entry "locator" #f 399 8 399 15 ("generate")}
        {Lisp-Entry "name" #f 400 8 400 12 ("generate")}
        {Lisp-Entry "root-specific" #f 401 8 401 21 ("generate")}
        {Lisp-Entry "pending-specifics" #f 402 8 402 25 ("generate")}}
      {Lisp-Entry "Specific" #f 405 7 405 15 ("Object")
        {Lisp-Entry "dynamic-signature" #f 408 8 408 25 ("generate")}
        {Lisp-Entry "implementation" #f 409 8 409 22 ("generate")}
        {Lisp-Entry "ancestor-specifics" #f 410 8 410 26 ("generate")}
        {Lisp-Entry "descendant-specifics" #f 411 8 411 28 ("generate")}}
      {Lisp-Entry "Boolean-Class" #f 419 7 419 20 ("Class")}
      {Lisp-Entry "Boolean" #f 422 17 422 24 ("Object" "Boolean-Class")
        {Lisp-Entry "initialize" #f 425 11 425 21 ("native-class" "rest")}}
      {Lisp-Entry "/=" #f 429 27 429 29 ("=" "not" "y" "x")}
      {Lisp-Entry "neq?" #f 433 27 433 31 ("eq?" "not" "y" "x")}
      {Lisp-Entry "xor" #f 437 27 437 30 ("not" "and" "or" "y" "x")}
      {Lisp-Entry "nu=?" #f 442 20 442 24 ("cdr" "else" "car" "neq?" "null?" "cond" "scan" "iter" "first" "let" ":equal" "compare" "eq?" "and" "rest" "m" "n")}
      {Lisp-Entry "nu/=?" #f 454 20 454 25 ("nu=?" "apply" "not" ":equal" "compare" "neq?" "null?" "if" "rest" "m" "n")}
      {Lisp-Entry "nu<?" #f 460 20 460 24 ("cdr" "car" "value" "null?" "if" "max" "scan" "iter" "let" "error" "else" ":equal" ":greater" ":less" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu<=?" #f 475 20 475 25 ("cdr" "car" "value" "null?" "if" "max" "scan" "iter" "let" "error" "else" ":greater" ":equal" ":less" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu>?" #f 490 20 490 24 ("cdr" "car" "value" "null?" "if" "min" "scan" "iter" "let" "error" "else" ":equal" ":less" ":greater" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu>=?" #f 505 20 505 25 ("cdr" "car" "value" "null?" "if" "min" "scan" "iter" "let" "error" "else" ":less" ":equal" ":greater" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "ci=?" #f 520 20 520 24 ("finally" "return" ":equal" "ci-compare" "neq?" "when" "cdr" "in" "object" "for" "loop" "car" "first" "let" "null?" "if" "rest")}
      {Lisp-Entry "ci/=?" #f 530 20 530 25 ("ci=?" "apply" "not" "rest")}
      {Lisp-Entry "ci<?" #f 534 20 534 24 ("error" "else" ":equal" ":greater" "cdr" ":less" "ci-compare" "case" "car" "value" "null?" "if" "max" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci<=?" #f 545 20 545 25 ("error" "else" ":greater" "cdr" ":equal" ":less" "ci-compare" "case" "car" "value" "null?" "if" "max" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci>?" #f 556 20 556 24 ("error" "else" ":equal" ":less" "cdr" ":greater" "ci-compare" "case" "car" "value" "null?" "if" "min" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci>=?" #f 567 20 567 25 ("error" "else" ":less" "cdr" ":equal" ":greater" "ci-compare" "case" "car" "value" "null?" "if" "min" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "boolean->integer" #f 578 27 578 43 ("0" "1" "if" "bool")}
      {Lisp-Entry "integer->boolean" #f 582 27 582 43 ("0" "/=" "n")}
      {Lisp-Entry "Whitespace-Chars" #f 591 12 591 28 ()}
      {Lisp-Entry "Uppercase-Chars" #f 594 12 594 27 ()}
      {Lisp-Entry "Lowercase-Chars" #f 597 12 597 27 ()}
      {Lisp-Entry "Alphabetic-Chars" #f 600 12 600 28 ("Lowercase-Chars" "Uppercase-Chars" "append")}
      {Lisp-Entry "Numeric-Chars" #f 603 12 603 25 ()}
      {Lisp-Entry "Uppercase-Lowerbound" #f 607 12 607 32 ("char->integer")}
      {Lisp-Entry "Uppercase-Upperbound" #f 610 12 610 32 ("char->integer")}
      {Lisp-Entry "Lowercase-Lowerbound" #f 613 12 613 32 ("char->integer")}
      {Lisp-Entry "Lowercase-Upperbound" #f 616 12 616 32 ("char->integer")}
      {Lisp-Entry "Numeric-Lowerbound" #f 619 12 619 30 ("char->integer")}
      {Lisp-Entry "Numeric-Upperbound" #f 622 12 622 30 ("char->integer")}
      {Lisp-Entry "Char-Class" #f 626 7 626 17 ("Class")}
      {Lisp-Entry "Char" #f 629 17 629 21 ("Object" "Char-Class")
        {Lisp-Entry "initialize" #f 632 11 632 21 ("native-class" "rest")}
        {Lisp-Entry "coerce-string" #f 636 11 636 24 ("get-output-string" "self" "write-char" "open-output-string" "port" "let")}
        {Lisp-Entry "compare-object" #f 642 11 642 25 (":incompatible" ":less" "else" ":greater" ">" ":equal" "=" "cond" "v2" "self" "char->integer" "v1" "let" "Char" "is?" "if" "c")}
        {Lisp-Entry "ci-compare-object" #f 652 11 652 28 ("self" "downcase" "compare" "c")}
        {Lisp-Entry "object-similar?" #f 657 11 657 26 ("self" "char-similar?" "char?" "and" "object-similar?" "'object-similar?" "unimplemented" "object")}
        {Lisp-Entry "object-alphabetic?" #f 664 11 664 29 ("object-lower-case?" "object-upper-case?" "or")}
        {Lisp-Entry "object-numeric?" #f 669 11 669 26 ("Numeric-Upperbound" "<=" "Numeric-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-alphanumeric?" #f 675 11 675 31 ("object-numeric?" "object-alphabetic?" "or")}
        {Lisp-Entry "object-whitespace?" #f 680 11 680 29 ("self" "eqv?" "or")}
        {Lisp-Entry "object-upper-case?" #f 687 11 687 29 ("Uppercase-Upperbound" "<=" "Uppercase-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-lower-case?" #f 693 11 693 29 ("Lowercase-Upperbound" "<=" "Lowercase-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-upcase" #f 699 11 699 24 ("32" "char->integer" "-" "integer->char" "self" "lower-case?" "if")}
        {Lisp-Entry "object-downcase" #f 705 11 705 26 ("32" "char->integer" "+" "integer->char" "self" "upper-case?" "if")}
        {Lisp-Entry "object-capitalize" #f 711 11 711 28 ("object-upcase")}}
      {Lisp-Entry "whitechar?" #f 715 12 715 22 ("char-whitespace?")}
      {Lisp-Entry "char-presentation" #f 719 20 719 37 ("string" "char-symbol" "or" "char")}
      {Lisp-Entry "alphabetic?" #f 724 27 724 38 ("object-alphabetic?" "object")}
      {Lisp-Entry "numeric?" #f 728 27 728 35 ("object-numeric?" "object")}
      {Lisp-Entry "alphanumeric?" #f 732 27 732 40 ("object-alphanumeric?" "object")}
      {Lisp-Entry "whitespace?" #f 736 27 736 38 ("object-whitespace?" "object")}
      {Lisp-Entry "upper-case?" #f 740 27 740 38 ("object-upper-case?" "object")}
      {Lisp-Entry "lower-case?" #f 744 27 744 38 ("object-lower-case?" "object")}
      {Lisp-Entry "upcase" #f 748 27 748 33 ("object-upcase" "object")}
      {Lisp-Entry "downcase" #f 752 27 752 35 ("object-downcase" "object")}
      {Lisp-Entry "capitalize" #f 756 27 756 37 ("object-capitalize" "object")}
      {Lisp-Entry "vowel?" #f 760 20 760 26 ("downcase" "memv?" "c")}
      {Lisp-Entry "character-types" #f 764 12 764 27 ("symbol" "literal" "quasiquote" "backslash" "reference" "exprcomment" "comment" "unquote" "terminator" "list" "quote" "sharp" "string" "constituent" "whitespace" "invalid" "#")}
      {Lisp-Entry "character-type" #f 783 20 783 34 ("character-types" "vector-ref" "constituent" "'constituent" "127" ">" "if" "char->integer" "num" "let" "ascii-c")}
      {Lisp-Entry "scheme-constituent?" #f 790 13 790 32 ("eqv?" "constituent" "'constituent" "character-type" "eq?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "jazz-constituent?" #f 797 13 797 30 ("eqv?" "constituent" "'constituent" "character-type" "eq?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "c-constituent?" #f 803 13 803 27 ("eqv?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "sql-constituent?" #f 808 13 808 29 ("eqv?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "Diacritic-Equivalences" #f 823 12 823 34 ()}
      {Lisp-Entry "make-diacritic-table" #f 832 13 832 33 ("table-set!" "char" "function" "for-each" "eqv?" "test:" "make-table" "table" "let" "equivalences")}
      {Lisp-Entry "Diacritic-Table" #f 841 12 841 27 ("Diacritic-Equivalences" "make-diacritic-table")}
      {Lisp-Entry "di=?" #f 845 13 845 17 ("Diacritic-Table" "table-ref" "memv?" "ci=?" "or" "y" "x")}
      {Lisp-Entry "string-di=?" #f 850 13 850 24 ("di=?" "every" "b" "in-sequence" "a" "for" "loop" "string-length" "=" "and" "y" "x")}
      {Lisp-Entry "*exception-debugger*" #f 862 12 862 32 ()}
      {Lisp-Entry "get-exception-debugger" #f 866 13 866 35 ("*exception-debugger*")}
      {Lisp-Entry "set-exception-debugger" #f 869 13 869 35 ("*exception-debugger*" "set!" "exception-debugger")}
      {Lisp-Entry "current-exception-debugger" #f 873 12 873 38 ("make-parameter")}
      {Lisp-Entry "exception-debugger-hook" #f 877 13 877 36 ("system-exception-hook" "if" "*exception-debugger*" "current-exception-debugger" "either" "exception-debugger" "let" "other" "exc")}
      {Lisp-Entry "with-exception-debugger" #f 884 13 884 36 ("current-exception-debugger" "parameterize" "thunk" "exception-debugger")}
      {Lisp-Entry "system-exception-debugger" #f 889 13 889 38 ("system-exception-hook" "invoke-exception-hook" "exc")}
      {Lisp-Entry "with-system-exception-debugger" #f 893 13 893 43 ("system-exception-debugger" "with-exception-debugger" "thunk")}
      {Lisp-Entry "Exception" #f 898 7 898 16 ("Object")
        {Lisp-Entry "get-message" #f 901 26 901 37 ()}
        {Lisp-Entry "present-message" #f 905 26 905 41 ("get-message" "list" "rest")}
        {Lisp-Entry "print" #f 909 11 909 16 ("get-message" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "Exception-Detail" #f 915 7 915 23 ("Object")
        {Lisp-Entry "icon" #f 918 8 918 12 ("generate")}
        {Lisp-Entry "title" #f 919 8 919 13 ("generate")}
        {Lisp-Entry "location" #f 920 8 920 16 ("generate")}
        {Lisp-Entry "children" #f 921 8 921 16 ("generate")}
        {Lisp-Entry "initialize" #f 924 11 924 21 ("set-children" "set-location" "set-title" "set-icon" "nextmethod" "children" "location" "title" "icon")}
        {Lisp-Entry "fold-literal" #f 932 11 932 23 ("children" ",children" "',children" "location" ",location" "',location" "title" ",title" "',title" "icon" ",icon" "',icon" "Exception-Detail" "new")}
        {Lisp-Entry "print" #f 936 11 936 16 ("children" "location" "title" "icon" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "Continue" #f 945 7 945 15 ("Exception")}
      {Lisp-Entry "Error" #f 948 7 948 12 ("Exception")
        {Lisp-Entry "message" #f 951 8 951 15 ("generate")}
        {Lisp-Entry "initialize" #f 954 11 954 21 ("set-message" "nextmethod" "message" "message:")}}
      {Lisp-Entry "Read-Error" #f 959 7 959 17 ("Error")
        {Lisp-Entry "source" #f 962 8 962 14 ()}
        {Lisp-Entry "start" #f 963 8 963 13 ()}
        {Lisp-Entry "end" #f 964 8 964 11 ()}
        {Lisp-Entry "initialize" #f 967 11 967 21 ("end~self" "start~self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "source" "bind-keywords" "rest")}
        {Lisp-Entry "get-source" #f 975 18 975 28 ("source")}
        {Lisp-Entry "get-start" #f 979 18 979 27 ("start")}
        {Lisp-Entry "get-end" #f 983 18 983 25 ("end")}
        {Lisp-Entry "get-range" #f 987 18 987 27 ("end" "start" "Range" "new")}}
      {Lisp-Entry "Parse-Error" #f 991 7 991 18 ("Error")
        {Lisp-Entry "source" #f 994 8 994 14 ()}
        {Lisp-Entry "start" #f 995 8 995 13 ()}
        {Lisp-Entry "end" #f 996 8 996 11 ()}
        {Lisp-Entry "initialize" #f 999 11 999 21 ("end~self" "start~self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "source" "bind-keywords" "rest")}
        {Lisp-Entry "get-source" #f 1007 18 1007 28 ("source")}
        {Lisp-Entry "get-start" #f 1011 18 1011 27 ("start")}
        {Lisp-Entry "get-end" #f 1015 18 1015 25 ("end")}}
      {Lisp-Entry "Convertion-Error" #f 1019 7 1019 23 ("Parse-Error")
        {Lisp-Entry "object" #f 1022 8 1022 14 ()}
        {Lisp-Entry "type" #f 1023 8 1023 12 ()}
        {Lisp-Entry "initialize" #f 1026 11 1026 21 ("type~self" "object~self" "set!" "nextmethod" "apply" "others" "type" "object" "bind-keywords" "rest")}
        {Lisp-Entry "get-object" #f 1033 18 1033 28 ("object")}
        {Lisp-Entry "get-type" #f 1037 18 1037 26 ("type")}
        {Lisp-Entry "get-message" #f 1041 11 1041 22 ("format-gender" "object" "format" "type-name" "string?" "if" "type" "let")}}
      {Lisp-Entry "Signal" #f 1049 7 1049 13 ("Exception")}
      {Lisp-Entry "Cancel-Signal" #f 1052 7 1052 20 ("Signal")}
      {Lisp-Entry "call-with-catch" #f 1055 13 1055 28 ("is?" "object?" "and" "exception" "function" "with-exception-filter" "thunk" "handler" "type")}
      {Lisp-Entry "throw" #f 1071 20 1071 25 ("raise" "exception")}
      {Lisp-Entry "throw-cancel" #f 1075 27 1075 39 ("Cancel-Signal" "new" "throw")}
      {Lisp-Entry "signal" #f 1079 12 1079 18 ("throw")}
      {Lisp-Entry "error" #f 1082 13 1082 18 ("format" "apply" "message:" "Error" "new" "signal" "rest")}
      {Lisp-Entry "Restart" #f 1091 7 1091 14 ("Object")
        {Lisp-Entry "name" #f 1094 8 1094 12 ("generate")}
        {Lisp-Entry "message" #f 1095 8 1095 15 ("generate")}
        {Lisp-Entry "handler" #f 1096 8 1096 15 ("generate")}
        {Lisp-Entry "initialize" #f 1099 11 1099 21 ("handler~self" "message~self" "name~self" "set!" "nextmethod" "handler" "message" "name")}
        {Lisp-Entry "print" #f 1106 11 1106 16 ("name" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "current-restarts" #f 1113 12 1113 28 ("make-parameter")}
      {Lisp-Entry "with-restart-handler" #f 1117 13 1117 33 ("Restart" "new" "cons" "current-restarts" "parameterize" "thunk" "handler" "message" "name")}
      {Lisp-Entry "with-restart-catcher" #f 1122 13 1122 33 ("else" "car" "null?" "not" "cond" "continuation-return" "rest" "with-restart-handler" "catcher-cont" "function" "continuation-capture" "thunk" "catcher" "message" "name")}
      {Lisp-Entry "find-restart" #f 1134 20 1134 32 ("current-restarts" "get-name" "eq?" "restart" "function" "find-if" "name")}
      {Lisp-Entry "find-restarts" #f 1140 20 1140 33 ("current-restarts" "get-name" "eq?" "restart" "function" "collect-if" "name")}
      {Lisp-Entry "invoke-restart" #f 1146 13 1146 27 ("apply" "get-handler" "handler" "let" "rest" "restart")}
      {Lisp-Entry "Walk-Location" #f 1156 7 1156 20 ("Object")
        {Lisp-Entry "module-locator" #f 1159 8 1159 22 ("generate")}
        {Lisp-Entry "declaration-locator" #f 1160 8 1160 27 ("generate")}
        {Lisp-Entry "locat" #f 1161 8 1161 13 ("generate")}
        {Lisp-Entry "initialize" #f 1164 11 1164 21 ("locat~self" "declaration-locator~self" "module-locator~self" "set!" "nextmethod" "locat" "declaration-locator" "module-locator")}
        {Lisp-Entry "fold-literal" #f 1171 11 1171 23 ("locat" ",locat" "',locat" "declaration-locator" ",declaration-locator" "',declaration-locator" "module-locator" ",module-locator" "',module-locator" "Walk-Location" "new")}
        {Lisp-Entry "print" #f 1175 11 1175 16 ("locat" "declaration-locator" "module-locator" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "Port-Class" #f 1188 7 1188 17 ("Class")}
      {Lisp-Entry "Port" #f 1191 17 1191 21 ("Object" "Port-Class")
        {Lisp-Entry "initialize" #f 1194 11 1194 21 ("native-class" "rest")}
        {Lisp-Entry "destroy" #f 1198 11 1198 18 ("nextmethod" "self" "close-port")}}
      {Lisp-Entry "Symbol-Class" #f 1208 7 1208 19 ("Class")}
      {Lisp-Entry "Symbol" #f 1211 17 1211 23 ("Object" "Symbol-Class")
        {Lisp-Entry "initialize" #f 1214 11 1214 21 ("native-class" "rest")}
        {Lisp-Entry "coerce-string" #f 1218 11 1218 24 ("self" "symbol->string")}
        {Lisp-Entry "compare-object" #f 1222 11 1222 25 (":incompatible" "self" "symbol->string" "compare" "symbol?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" #f 1228 11 1228 28 (":incompatible" "self" "symbol->string" "ci-compare" "symbol?" "if" "obj")}}
      {Lisp-Entry "=" #f 1234 20 1234 21 ("eq?" "s2" "s1")}
      {Lisp-Entry "generated-symbol?" #f 1238 20 1238 37 ("symbol->string" "starts-with?" "symbol")}
      {Lisp-Entry "symbol->keyword" #f 1242 27 1242 42 ("symbol->string" "string->keyword" "symbol")}
      {Lisp-Entry "keyword->symbol" #f 1246 27 1246 42 ("keyword->string" "string->symbol" "keyword")}
      {Lisp-Entry "find-symbol" #f 1250 13 1250 24 ("string->symbol" "str")}
      {Lisp-Entry "symbol-bound?" #f 1255 13 1255 26 ("rest" "name")}
      {Lisp-Entry "symbol-unbound?" #f 1258 13 1258 28 ("rest" "name")}
      {Lisp-Entry "Keyword-Class" #f 1268 7 1268 20 ("Class")}
      {Lisp-Entry "Keyword" #f 1271 17 1271 24 ("Object" "Keyword-Class")
        {Lisp-Entry "initialize" #f 1274 11 1274 21 ("native-class" "rest")}}
      {Lisp-Entry "find-keyword" #f 1278 20 1278 32 ("specified?" "null?" "cdr" "cddr" "set-cdr!" "cadr" "set!" "begin" "eq?" "error" "car" "keyword?" "if" "elem" "not-null?" "unspecified?" "and" "while" "unspecified" "found" "unbox-list" "scan" "before" "let" "default" "box" "keyword")}
      {Lisp-Entry "Continuation-Class" #f 1305 7 1305 25 ("Class")}
      {Lisp-Entry "Continuation" #f 1308 17 1308 29 ("Object" "Continuation-Class")}
      {Lisp-Entry "Procedure-Class" #f 1316 7 1316 22 ("Class")}
      {Lisp-Entry "Procedure" #f 1319 17 1319 26 ("Object" "Procedure-Class")}
      {Lisp-Entry "Foreign-Class" #f 1327 7 1327 20 ("Class")}
      {Lisp-Entry "Foreign" #f 1330 17 1330 24 ("Object" "Foreign-Class")}
      {Lisp-Entry "Numeric-Class" #f 1338 7 1338 20 ("Class")}
      {Lisp-Entry "Numeric" #f 1341 17 1341 24 ("Object" "Numeric-Class")
        {Lisp-Entry "numeric-norm" #f 1344 35 1344 47 ()}
        {Lisp-Entry "numeric-add" #f 1345 35 1345 46 ("obj")}
        {Lisp-Entry "numeric-negate" #f 1346 35 1346 49 ()}
        {Lisp-Entry "numeric-multiply" #f 1347 35 1347 51 ("n")}
        {Lisp-Entry "numeric-inverse" #f 1348 35 1348 50 ()}}
      {Lisp-Entry "Number-Class" #f 1356 7 1356 19 ("Numeric-Class")}
      {Lisp-Entry "Number" #f 1359 17 1359 23 ("Numeric" "Number-Class")
        {Lisp-Entry "initialize" #f 1362 11 1362 21 ("native-class" "rest")}
        {Lisp-Entry "compare-object" #f 1366 11 1366 25 (":greater" "else" ":less" "<" ":equal" "self" "=" "cond" "obj")}
        {Lisp-Entry "numeric-norm" #f 1372 11 1372 23 ("self" "abs")}
        {Lisp-Entry "numeric-add" #f 1376 11 1376 22 ("error" "self" "+" "number?" "if" "obj")}
        {Lisp-Entry "numeric-negate" #f 1382 11 1382 25 ("self" "-")}
        {Lisp-Entry "numeric-multiply" #f 1386 11 1386 27 ("error" "self" "*" "number?" "if" "obj")}
        {Lisp-Entry "numeric-inverse" #f 1392 11 1392 26 ("self" "/")}}
      {Lisp-Entry "Complex-Class" #f 1401 7 1401 20 ("Number-Class")}
      {Lisp-Entry "Complex" #f 1404 17 1404 24 ("Number" "Complex-Class")
        {Lisp-Entry "numeric-norm" #f 1407 11 1407 23 ("imag-part" "2" "self" "real-part" "expt" "+" "sqrt")}}
      {Lisp-Entry "Real-Class" #f 1416 7 1416 17 ("Complex-Class")}
      {Lisp-Entry "Real" #f 1419 17 1419 21 ("Complex" "Real-Class")}
      {Lisp-Entry "Rational-Class" #f 1427 7 1427 21 ("Real-Class")}
      {Lisp-Entry "Rational" #f 1430 17 1430 25 ("Real" "Rational-Class")}
      {Lisp-Entry "Integer-Class" #f 1438 7 1438 20 ("Rational-Class")}
      {Lisp-Entry "Integer" #f 1441 17 1441 24 ("Rational" "Integer-Class")}
      {Lisp-Entry "Fixnum-Class" #f 1449 7 1449 19 ("Integer-Class")}
      {Lisp-Entry "Fixnum" #f 1452 17 1452 23 ("Integer" "Fixnum-Class")}
      {Lisp-Entry "Flonum-Class" #f 1460 7 1460 19 ("Real-Class")}
      {Lisp-Entry "Flonum" #f 1463 17 1463 23 ("Real" "Flonum-Class")}
      {Lisp-Entry "fl+" #f 1468 27 1468 30 ("##fl+" "y" "x")}
      {Lisp-Entry "fl-" #f 1471 27 1471 30 ("##fl-" "y" "x")}
      {Lisp-Entry "fl*" #f 1474 27 1474 30 ("##fl*" "y" "x")}
      {Lisp-Entry "fl/" #f 1477 27 1477 30 ("##fl/" "y" "x")}
      {Lisp-Entry "relate" #f 1486 20 1486 26 ("0" "else" "1" ">" "-1" "<" "cond" "y" "x")}
      {Lisp-Entry "sign" #f 1492 20 1492 24 ("0" "relate" "n")}
      {Lisp-Entry "nu+" #f 1496 20 1496 23 ("numeric-add" "cdr" "scan" "car" "result" "iter" "let" "0" "null?" "if" "rest")}
      {Lisp-Entry "nu-" #f 1505 20 1505 23 ("nu+" "apply" "r" "let" "numeric-negate" "null?" "if" "rest" "n")}
      {Lisp-Entry "nu*" #f 1512 20 1512 23 ("numeric-multiply" "cdr" "scan" "car" "result" "iter" "let" "1" "null?" "if" "rest")}
      {Lisp-Entry "nu/" #f 1521 20 1521 23 ("nu*" "apply" "r" "let" "numeric-inverse" "null?" "if" "rest" "n")}
      {Lisp-Entry "minimum" #f 1528 20 1528 27 ("cdr" "set!" ":less" "apply-key" "eq?" "when" "object" "function" "for-each" "car" "min" "let" "compare" "compare:" "key" "key:" "lst")}
      {Lisp-Entry "maximum" #f 1537 20 1537 27 ("cdr" "set!" ":greater" "apply-key" "eq?" "when" "object" "function" "for-each" "car" "max" "let" "compare" "compare:" "key" "key:" "lst")}
      {Lisp-Entry "between?" #f 1546 20 1546 28 ("<=" ">=" "not" "or" "and" "upper" "lower" "n")}
      {Lisp-Entry "between" #f 1551 20 1551 27 ("else" ">" "<" "cond" "upper" "n" "lower")}
      {Lisp-Entry "in-interval?" #f 1557 20 1557 32 ("<" ">=" "and" "upper" "lower" "n")}
      {Lisp-Entry "norm" #f 1561 27 1561 31 ("numeric-norm" "x")}
      {Lisp-Entry "distance" #f 1565 20 1565 28 ("nu-" "norm" "end" "start")}
      {Lisp-Entry "near?" #f 1569 20 1569 25 ("nu-" "norm" "<=" "distance" "y" "x")}
      {Lisp-Entry "contiguous-range" #f 1573 20 1573 36 ("cons" "cdr" "continuation-return" "set!" "1" "+" "=" "if" "n" "for-each" "second" "car" "first" "let*" "return" "function" "continuation-capture" "not-null?" "when" "lst")}
      {Lisp-Entry "naturals" #f 1587 20 1587 28 ("collect" "below" "from" "n" "for" "loop" "upper" "lower")}
      {Lisp-Entry "lobyte" #f 1592 20 1592 26 ("#xFF" "bitwise-and" "word")}
      {Lisp-Entry "hibyte" #f 1596 20 1596 26 ("-8" "arithmetic-shift" "lobyte" "word")}
      {Lisp-Entry "make-word" #f 1600 20 1600 29 ("8" "arithmetic-shift" "bitwise-ior" "hi" "lo")}
      {Lisp-Entry "lochar" #f 1604 20 1604 26 ("#xFF" "#x80" "+" "bitwise-and" "-" "word")}
      {Lisp-Entry "hichar" #f 1608 20 1608 26 ("-8" "arithmetic-shift" "lochar" "word")}
      {Lisp-Entry "make-int" #f 1612 20 1612 28 ("16" "arithmetic-shift" "bitwise-ior" "hi" "lo")}
      {Lisp-Entry "loword" #f 1616 20 1616 26 ("#xFFFF" "bitwise-and" "dword")}
      {Lisp-Entry "hiword" #f 1620 20 1620 26 ("-16" "arithmetic-shift" "loword" "dword")}
      {Lisp-Entry "signed-loword" #f 1624 20 1624 33 ("#xFFFF" "#x8000" "+" "bitwise-and" "-" "dword")}
      {Lisp-Entry "signed-hiword" #f 1628 20 1628 33 ("-16" "arithmetic-shift" "signed-loword" "dword")}
      {Lisp-Entry "sign-word" #f 1632 20 1632 29 ("#x10000" "-" "15" "bit-set?" "if" "word")}
      {Lisp-Entry "separate" #f 1638 13 1638 21 ("values" "*" "-" "r" "quotient" "q" "let*" "int2" "int1")}
      {Lisp-Entry "randomize" #f 1644 13 1644 22 ("default-random-source" "random-source-randomize!")}
      {Lisp-Entry "random" #f 1647 12 1647 18 ("random-integer")}
      {Lisp-Entry "bit-set" #f 1650 13 1650 20 ("bitwise-not" "bitwise-and" "bitwise-ior" "if" "1" "arithmetic-shift" "msk" "let" "bit" "pos" "num")}
      {Lisp-Entry "mask-bit-set" #f 1657 13 1657 25 ("bitwise-not" "bitwise-and" "bitwise-ior" "if" "bit" "msk" "num")}
      {Lisp-Entry "mask-bit-set?" #f 1663 13 1663 26 ("0" "bitwise-and" "/=" "msk" "num")}
      {Lisp-Entry "bit-mask" #f 1667 20 1667 28 ("1" "arithmetic-shift" "-" "lo" "hi")}
      {Lisp-Entry "random-seed" #f 1671 20 1671 31 ("10000" "random" "randomize")}
      {Lisp-Entry "sqr" #f 1677 27 1677 30 ("2" "expt" "num")}
      {Lisp-Entry "percentage" #f 1681 27 1681 37 ("100." "/" "*" "total" "part")}
      {Lisp-Entry "percent" #f 1685 27 1685 34 ("100." "*" "/" "n" "percent")}
      {Lisp-Entry "fxfloor" #f 1689 27 1689 34 ("floor" "flonum->fixnum" "r")}
      {Lisp-Entry "fxceiling" #f 1692 27 1692 36 ("ceiling" "flonum->fixnum" "r")}
      {Lisp-Entry "fxtruncate" #f 1695 27 1695 37 ("truncate" "flonum->fixnum" "r")}
      {Lisp-Entry "fxround" #f 1698 27 1698 34 ("round" "flonum->fixnum" "r")}
      {Lisp-Entry "fxfloor/" #f 1704 20 1704 28 ("fl/" "fxfloor" "d" "n")}
      {Lisp-Entry "fxceiling/" #f 1707 20 1707 30 ("fl/" "fxceiling" "d" "n")}
      {Lisp-Entry "fxtruncate/" #f 1710 20 1710 31 ("fl/" "fxtruncate" "d" "n")}
      {Lisp-Entry "fxround/" #f 1713 20 1713 28 ("fl/" "fxround" "d" "n")}
      {Lisp-Entry "Iterator" #f 1722 7 1722 15 ("Object")
        {Lisp-Entry "Empty" #f 1725 14 1725 19 ("empty")}
        {Lisp-Entry "peeked" #f 1729 8 1729 14 ("Empty")}
        {Lisp-Entry "iterate-object" #f 1732 11 1732 25 ("self")}
        {Lisp-Entry "get-next" #f 1736 26 1736 34 ("next" "peek" "prog1")}
        {Lisp-Entry "peek" #f 1741 26 1741 30 ("next" "set!" "Empty" "peeked" "eq?" "when")}
        {Lisp-Entry "unget" #f 1747 26 1747 31 ("error" "set!" "Empty" "peeked" "eq?" "if" "object")}
        {Lisp-Entry "next" #f 1753 26 1753 30 ("get-next!" "else" "set!" "prog1" "Empty" "neq?" "peeked" "eof-object?" "cond")}
        {Lisp-Entry "done?" #f 1763 26 1763 31 ("peek" "eof-object?")}
        {Lisp-Entry "get-next!" #f 1767 26 1767 35 ()}
        {Lisp-Entry "put" #f 1771 26 1771 29 ("error" "object")}
        {Lisp-Entry "get-position" #f 1775 26 1775 38 ("self" "error")}
        {Lisp-Entry "set-position" #f 1779 26 1779 38 ("self" "error" "pos")}
        {Lisp-Entry "get-state" #f 1783 26 1783 35 ()}
        {Lisp-Entry "reset-state" #f 1787 26 1787 37 ("old")}}
      {Lisp-Entry "iterate-sequence" #f 1791 27 1791 43 ("iterate-object" "obj")}
      {Lisp-Entry "Explorer" #f 1800 7 1800 15 ("Iterator")
        {Lisp-Entry "direction" #f 1803 8 1803 17 ("forward" "'forward")}
        {Lisp-Entry "peek-forward" #f 1806 29 1806 41 ("error")}
        {Lisp-Entry "peek-backward" #f 1810 29 1810 42 ("error")}
        {Lisp-Entry "peek" #f 1814 11 1814 15 ("peek-backward" "backward" "peek-forward" "forward" "direction" "case" "eof-object" "done?" "if")}
        {Lisp-Entry "goto-beginning" #f 1822 26 1822 40 ("error")}
        {Lisp-Entry "goto-end" #f 1826 26 1826 34 ("error")}
        {Lisp-Entry "forward" #f 1830 26 1830 33 ("error")}
        {Lisp-Entry "backward" #f 1834 26 1834 34 ("error")}
        {Lisp-Entry "next" #f 1838 11 1838 15 ("backward" "forward" "direction" "case" "done?" "not" "when")}
        {Lisp-Entry "done-forward?" #f 1845 29 1845 42 ("error")}
        {Lisp-Entry "done-backward?" #f 1849 29 1849 43 ("error")}
        {Lisp-Entry "done?" #f 1853 11 1853 16 ("done-backward?" "backward" "done-forward?" "forward" "direction" "case")}
        {Lisp-Entry "put-forward" #f 1859 29 1859 40 ("error" "object")}
        {Lisp-Entry "put-backward" #f 1863 29 1863 41 ("error" "object")}
        {Lisp-Entry "put" #f 1867 11 1867 14 ("put-backward" "backward" "put-forward" "forward" "direction" "case" "object")}
        {Lisp-Entry "set-direction" #f 1873 18 1873 31 ("direction" "set!" "dir")}}
      {Lisp-Entry "explore" #f 1877 20 1877 27 ("Sequence-Explorer" "new" "apply" "rest" "object")}
      {Lisp-Entry "Sequence-Class" #f 1887 7 1887 21 ("Class")
        {Lisp-Entry "allocate-sequence" #f 1890 35 1890 52 ("len")}
        {Lisp-Entry "coerce-object" #f 1893 11 1893 24 ("element" "set-element!" "below" "0" "from" "n" "for" "loop" "allocate-sequence" "new-sequence" "cardinality" "len" "let" "seq")}}
      {Lisp-Entry "Sequence" #f 1902 17 1902 25 ("Object" "Sequence-Class")
        {Lisp-Entry "compare-object" #f 1905 11 1905 25 (":incompatible" "1" "+" "neq?" "element" "compare" "cmp" ":less" "else" ":greater" ">" ":equal" "=" "cond" ">=" "or" "0" "i" "iter" "l2" "self" "cardinality" "l1" "let" "Sequence" "is?" "if" "seq")}
        {Lisp-Entry "copy-object" #f 1921 11 1921 22 ("1" "+" "element" "set-element!" "begin" "=" "0" "i" "iter" "let" "class-of" "allocate-sequence" "new-seq" "self" "cardinality" "len" "copy" "x" "function" "if" "subcopy" "let*" "deep?")}
        {Lisp-Entry "iterate-object" #f 1933 11 1933 25 ("self" "Sequence-Explorer" "new")}
        {Lisp-Entry "object-alphabetic?" #f 1937 11 1937 29 ("self" "alphabetic?" "every?")}
        {Lisp-Entry "object-numeric?" #f 1941 11 1941 26 ("self" "numeric?" "every?")}
        {Lisp-Entry "object-alphanumeric?" #f 1945 11 1945 31 ("self" "alphanumeric?" "every?")}
        {Lisp-Entry "object-whitespace?" #f 1949 11 1949 29 ("self" "whitespace?" "every?")}
        {Lisp-Entry "object-upper-case?" #f 1953 11 1953 29 ("self" "upper-case?" "every?")}
        {Lisp-Entry "object-lower-case?" #f 1957 11 1957 29 ("self" "lower-case?" "every?")}
        {Lisp-Entry "object-upcase" #f 1961 11 1961 24 ("class-of" "upcase" "self" "accumulate")}
        {Lisp-Entry "object-downcase" #f 1965 11 1965 26 ("class-of" "downcase" "self" "accumulate")}
        {Lisp-Entry "object-capitalize" #f 1969 11 1969 28 ("class-of" "upcase" "set!" "not" "alphanumeric?" "if" "object" "function" "self" "accumulate" "break?" "let")}
        {Lisp-Entry "sequence-element" #f 1983 35 1983 51 ("n")}
        {Lisp-Entry "sequence-set-element!" #f 1986 35 1986 56 ("obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 1989 35 1989 55 ()}
        {Lisp-Entry "sequence-tail" #f 1992 35 1992 48 ("start")}
        {Lisp-Entry "sequence-last" #f 1995 35 1995 48 ()}
        {Lisp-Entry "sequence-butlast" #f 1998 35 1998 51 ()}
        {Lisp-Entry "sequence-subseq!" #f 2001 26 2001 42 ("cardinality" "-" "Subseq" "new" "self" "-1" "0" "=" "and" "if" "end" "start")}
        {Lisp-Entry "sequence-replace-subseq!" #f 2007 26 2007 50 ("cardinality" "0" "self" "subseq" "concatenate!" "replacement" "end" "start")}}
      {Lisp-Entry "sequence?" #f 2013 27 2013 36 ("Sequence" "is?" "seq")}
      {Lisp-Entry "element" #f 2017 27 2017 34 ("sequence-element" "n" "seq")}
      {Lisp-Entry "set-element!" #f 2021 27 2021 39 ("sequence-set-element!" "obj" "n" "seq")}
      {Lisp-Entry "cardinality" #f 2025 27 2025 38 ("sequence-cardinality" "seq")}
      {Lisp-Entry "empty?" #f 2029 27 2029 33 ("cardinality" "0" "=" "seq")}
      {Lisp-Entry "tail" #f 2033 27 2033 31 ("sequence-tail" "start" "seq")}
      {Lisp-Entry "last" #f 2037 27 2037 31 ("sequence-last" "seq")}
      {Lisp-Entry "butlast" #f 2041 27 2041 34 ("sequence-butlast" "seq")}
      {Lisp-Entry "skip-whitespace" #f 2045 20 2045 35 ("else" "1" "+" "element" "eq?" "cardinality" "=" "cond" "0" "either" "i" "iter" "let" "start" "start:" "seq")}
      {Lisp-Entry "subseq" #f 2052 20 2052 26 ("1" "+" "set!" "element" "set-element!" "<" "while" "j" "0" "i" "allocate-sequence" "sub" "class-of" "cls" "cardinality" "either" "-" "len" "let*" "type" "end" "start" "seq")}
      {Lisp-Entry "replace-subseq!" #f 2065 27 2065 42 ("sequence-replace-subseq!" "replacement" "end" "start" "seq")}
      {Lisp-Entry "subseq!" #f 2069 20 2069 27 ("sequence-subseq!" "cardinality" "end" "start" "seq")}
      {Lisp-Entry "sort" #f 2073 20 2073 24 ("class-of" "List" "sort" "coerce" "null/pair?" "let*" "cddr" "or" "split" "cdr" "cons" "apply-key" "if" "e2" "car" "e1" "let" "else" "null?" "cond" "l2" "l1" "merge" "merge-sort" "smaller" "l" "sort-list" "define" "key" "key:" "seq" "test")}
      {Lisp-Entry "first" #f 2104 27 2104 32 ("0" "element" "seq")}
      {Lisp-Entry "second" #f 2105 27 2105 33 ("1" "element" "seq")}
      {Lisp-Entry "third" #f 2106 27 2106 32 ("2" "element" "seq")}
      {Lisp-Entry "fourth" #f 2107 27 2107 33 ("3" "element" "seq")}
      {Lisp-Entry "fifth" #f 2108 27 2108 32 ("4" "element" "seq")}
      {Lisp-Entry "sixth" #f 2109 27 2109 32 ("5" "element" "seq")}
      {Lisp-Entry "seventh" #f 2110 27 2110 34 ("6" "element" "seq")}
      {Lisp-Entry "eighth" #f 2111 27 2111 33 ("7" "element" "seq")}
      {Lisp-Entry "ninth" #f 2112 27 2112 32 ("8" "element" "seq")}
      {Lisp-Entry "tenth" #f 2113 27 2113 32 ("9" "element" "seq")}
      {Lisp-Entry "set-first!" #f 2115 27 2115 37 ("0" "set-element!" "value" "seq")}
      {Lisp-Entry "set-second!" #f 2116 27 2116 38 ("1" "set-element!" "value" "seq")}
      {Lisp-Entry "set-third!" #f 2117 27 2117 37 ("2" "set-element!" "value" "seq")}
      {Lisp-Entry "set-fourth!" #f 2118 27 2118 38 ("3" "set-element!" "value" "seq")}
      {Lisp-Entry "set-fifth!" #f 2119 27 2119 37 ("4" "set-element!" "value" "seq")}
      {Lisp-Entry "set-sixth!" #f 2120 27 2120 37 ("5" "set-element!" "value" "seq")}
      {Lisp-Entry "set-seventh!" #f 2121 27 2121 39 ("6" "set-element!" "value" "seq")}
      {Lisp-Entry "set-eighth!" #f 2122 27 2122 38 ("7" "set-element!" "value" "seq")}
      {Lisp-Entry "set-ninth!" #f 2123 27 2123 37 ("8" "set-element!" "value" "seq")}
      {Lisp-Entry "set-tenth!" #f 2124 27 2124 37 ("9" "set-element!" "value" "seq")}
      {Lisp-Entry "element-reversed" #f 2127 27 2127 43 ("1" "cardinality" "-" "element" "n" "seq")}
      {Lisp-Entry "iterate" #f 2131 20 2131 27 ("in-sequence" "obj" "for" "loop" "proc" "seq")}
      {Lisp-Entry "accumulate" #f 2136 20 2136 30 ("coerce" "not" "if" "collect" "in-sequence" "obj" "for" "loop" "lst" "let" "type" "proc" "seq")}
      {Lisp-Entry "apply-key" #f 2145 28 2145 37 ("not" "if" "object" "key")}
      {Lisp-Entry "apply-test" #f 2151 28 2151 38 ("eqv?" "not" "if" "y" "x" "test")}
      {Lisp-Entry "gather" #f 2157 20 2157 26 ("collect" "in-sequence" "obj" "for" "loop" "coerce" "List" "type" "type:" "iterable")}
      {Lisp-Entry "collect" #f 2163 20 2163 27 ("class-of" "either" "collect" "when" "apply-key" "val" "with" "in-sequence" "obj" "for" "loop" "coerce" "type" "type:" "key" "key:" "seq" "proc")}
      {Lisp-Entry "collect-if" #f 2171 20 2171 30 ("class-of" "collect" "apply-key" "when" "in-sequence" "obj" "for" "loop" "coerce" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "collect-type" #f 2178 20 2178 32 ("class-of" "collect" "apply-key" "is?" "when" "in-sequence" "obj" "for" "loop" "coerce" "key" "key:" "seq" "type")}
      {Lisp-Entry "collect-sections" #f 2185 20 2185 36 ("reset" "get-output" "put" "begin" "apply-test" "if" "value" "function" "for-each" "section" "List-Factory" "new" "sections" "let" "test" "test:" "separator" "separator:" "lst")}
      {Lisp-Entry "count" #f 2199 20 2199 25 ("increase!" "apply-key" "apply-test" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "test" "test:" "key" "key:" "seq" "target")}
      {Lisp-Entry "count-if" #f 2207 20 2207 28 ("increase!" "apply-key" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "count-type" #f 2215 20 2215 30 ("increase!" "apply-key" "is?" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "key" "key:" "seq" "type")}
      {Lisp-Entry "find" #f 2223 20 2223 24 ("1" "-" "get-position" "continuation-return" "apply-key" "apply-test" "object" "iterate" "exit" "function" "continuation-capture" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "0" "either" "list-find" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "target" "seq")}
      {Lisp-Entry "list-find" #f 2238 13 2238 22 ("1" "+" "cdr" "else" "car" "null?" "cond" "rank" "tail" "rest" "iter" "eqv?" "x" "function" "not" "if" "let" "start" "test" "key" "target" "list")}
      {Lisp-Entry "find-in" #f 2249 20 2249 27 ("continuation-return" "apply-key" "apply-test" "object" "iterate" "exit" "function" "continuation-capture" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "0" "either" "list-find-in" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "target" "seq")}
      {Lisp-Entry "list-find-in" #f 2264 13 2264 25 ("1" "+" "cdr" "else" "car" "null?" "cond" "rank" "tail" "rest" "iter" "eqv?" "x" "function" "not" "if" "let" "start" "test" "key" "target" "list")}
      {Lisp-Entry "find-balanced" #f 2275 20 2275 33 ("error" "else" "1" "-" "get-position" "position" "continuation-return" "case" "<" "decrease!" "increase!" "apply-key" "apply-test" "cond" "object" "iterate" "exit" "function" "continuation-capture" "set-position" "when" "0" "count" "iterate-sequence" "backward" "'backward" "direction:" "explore" "if" "iterator" "let" "item" "'item" "return" "return:" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "seq" "close" "open")}
      {Lisp-Entry "find-if" #f 2296 20 2296 27 ("error" "else" "1" "-" "get-position" "position" "continuation-return" "case" "apply-key" "object" "iterate" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "exit" "function" "continuation-capture" "0" "either" "find-if-list" "not" "null/pair?" "and" "if" "item" "'item" "return" "return:" "reversed?" "reversed?:" "start" "start:" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "get-rank" #f 2314 20 2314 28 ("1" "-" "get-position" "continuation-return" "apply-key" "apply-test" "object" "iterate" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "exit" "function" "continuation-capture" "string-find" "string?" "0" "either" "list-find" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "seq" "target")}
      {Lisp-Entry "skip" #f 2331 20 2331 24 ("1" "get-position" "-" "continuation-return" "apply-key" "not" "when" "object" "iterate" "set-position" "iterate-sequence" "iterator" "let" "return" "function" "continuation-capture" "0" "start" "start:" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "some?" #f 2343 20 2343 25 ("continuation-return" "apply-key" "when" "object" "iterate-sequence" "iterate" "return" "function" "continuation-capture" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "every?" #f 2353 20 2353 26 ("continuation-return" "apply-key" "not" "when" "object" "iterate-sequence" "iterate" "return" "function" "continuation-capture" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "concatenate" #f 2363 20 2363 31 ("class-of" "coerce" "not" "get-output" "output" "put-sequence" "sequence" "function" "for-each" "null/pair?" "list?" "car" "first" "let*" "List-Factory" "new" "fact" "let" "null?" "if" "rest")}
      {Lisp-Entry "concatenate!" #f 2378 20 2378 32 ("concatenate" "apply" "rest")}
      {Lisp-Entry "subset?" #f 2382 20 2382 27 ("memv?" "element" "function" "every?" "null?" "or" "set2" "set1")}
      {Lisp-Entry "union" #f 2389 20 2389 25 ("apply-union" "rest")}
      {Lisp-Entry "apply-union" #f 2393 20 2393 31 ("class-of" "coerce" "cdr" "put" "get-output" "member?" "not" "when" "object" "iterate-sequence" "iterate" "set" "function" "for-each" "put-sequence" "List-Factory" "new" "dst" "car" "first" "let" "null?" "if" "test" "test:" "lst")}
      {Lisp-Entry "intersection" #f 2408 20 2408 32 ("cons" "apply-intersection" "rest" "first")}
      {Lisp-Entry "apply-intersection" #f 2412 20 2412 38 ("class-of" "get-output" "coerce" "put" "member?" "set" "every?" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "cdr" "car" "first" "let" "null?" "if" "test" "test:" "lst")}
      {Lisp-Entry "difference" #f 2427 20 2427 30 ("class-of" "get-output" "coerce" "put" "member?" "not" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "null?" "if" "eqv?" "test" "test:" "y" "x")}
      {Lisp-Entry "set-xor" #f 2438 20 2438 27 ("difference" "union" "eqv?" "test" "test:" "y" "x")}
      {Lisp-Entry "remove" #f 2443 20 2443 26 ("class-of" "get-output" "coerce" "put" "apply-test" "not" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "eqv?" "test" "test:" "seq" "target")}
      {Lisp-Entry "string-remove" #f 2452 15 2452 28 ()}
      {Lisp-Entry "remove" #f 2452 30 2452 36 ("get-output-string" "write-char" "eqv?" "not" "when" "element" "c" "cardinality" "below" "0" "from" "n" "for" "loop" "open-output-string" "output" "let" "str" "target")}
      {Lisp-Entry "remove-trailing" #f 2461 20 2461 35 ("reverse" "cons" "set!" "apply-test" "and" "unless" "element" "function" "for-each" "trailing?" "result" "let" "eqv?" "test" "test:" "list" "target")}
      {Lisp-Entry "remove-enclosing" #f 2472 20 2472 36 ("subseq" "decrease!" "1" "-" ">" "increase!" "element" "apply-test" "<" "and" "while" "tail" "head" "cardinality" "end" "0" "start" "let*" "eqv?" "test" "test:" "seq" "target")}
      {Lisp-Entry "remove-duplicates" #f 2484 20 2484 37 ("class-of" "coerce" "put" "get-output" "apply-key" "member?" "not" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "eqv?" "test" "test:" "key" "key:" "seq")}
      {Lisp-Entry "remove-nils" #f 2493 20 2493 31 ("identity" "collect-if" "seq")}
      {Lisp-Entry "remove-empty-strings" #f 2497 20 2497 40 ("empty-string?" "not" "obj" "function" "collect-if" "seq")}
      {Lisp-Entry "trim-spaces" #f 2503 20 2503 31 ("remove-enclosing" "seq")}
      {Lisp-Entry "trim-whitespace" #f 2507 20 2507 35 ("whitespace?" "ignore" "c" "function" "test:" "remove-enclosing" "seq")}
      {Lisp-Entry "mismatch" #f 2513 20 2513 28 ("if" "increase!" "continuation-return" "get-next" "or" "when" "done?" "not" "while" "0" "pos" "targ" "iterate-sequence" "srce" "let" "return" "function" "continuation-capture" "equal?" "test" "test:" "seq" "target")}
      {Lisp-Entry "prefix" #f 2528 20 2528 26 ("0" "subseq" "cdr" "set!" "<" "not" "or" "and" "when" "mismatch" "n" "object" "function" "for-each" "min" "car" "ref" "let" "null?" "if" "equal?" "test" "test:" "sequences")}
      {Lisp-Entry "prefix?" #f 2543 20 2543 27 ("continuation-return" "get-next" "nu/=?" "when" "done?" "not" "and" "while" "iter" "iterate-sequence" "targ" "let" "return" "function" "continuation-capture" "seq" "target")}
      {Lisp-Entry "Search-Context" #f 2554 7 2554 21 ("Object")
        {Lisp-Entry "target" #f 2557 8 2557 14 ("generate")}
        {Lisp-Entry "whole-words?" #f 2558 8 2558 20 ("generate")}
        {Lisp-Entry "ignore-case?" #f 2559 8 2559 20 ("generate")}
        {Lisp-Entry "constituent-test" #f 2560 8 2560 24 ("generate")}
        {Lisp-Entry "user-data" #f 2561 8 2561 17 ("generate")}}
      {Lisp-Entry "construct-search-context" #f 2564 20 2564 44 ("Search-Context" "construct" "user-data" "constituent-test" "ignore-case?" "whole-words?" "target")}
      {Lisp-Entry "make-search-context" #f 2568 20 2568 39 ("user-data" "constituent-test" "ignore-case?" "whole-words?" "construct-search-context" "target")}
      {Lisp-Entry "multisearch-impl" #f 2576 13 2576 29 ("cdr" "cons" "found" "last" "find-forward" "<=" "find-backward" "eqv?" "c" "<" "after" "before" "or" "and" "match?" "+" "else" "element" "not" ">=" "cond" "j" "i" "1" "-" "to" "match-case?" "define" "size" "char=?" "char-ci=?" "test" "get-constituent-test" "constituent-test" "get-ignore-case?" "ignore-case?" "get-whole-words?" "whole-words?" "get-target" "target" "car" "context" "null?" "scan" "iter" "0" "if" "either" "pos" "cardinality" "len" "let" "reverse?" "start" "contexts" "seq")}
      {Lisp-Entry "multisearch" #f 2643 20 2643 31 ("reverse?" "start" "multisearch-impl" "contexts" "seq")}
      {Lisp-Entry "multisearch-all" #f 2649 20 2649 35 ("queue-list" "car" "get-target" "+" "cdr" "enqueue" "begin" "multisearch-impl" "found" "0" "reverse?" "if" "start" "either" "pos" "iter" "new-queue" "queue" "cardinality" "len" "let" "contexts" "seq")}
      {Lisp-Entry "search" #f 2665 20 2665 26 ("cdr" "if" "reverse?" "start" "constituent-test" "ignore-case?" "whole-words?" "construct-search-context" "list" "multisearch-impl" "found" "let" "target" "seq")}
      {Lisp-Entry "search-all" #f 2677 20 2677 30 ("reverse?" "reverse?:" "start" "start:" "constituent-test" "ignore-case?" "whole-words?" "construct-search-context" "list" "multisearch-all" "cdr" "map" "target" "seq")}
      {Lisp-Entry "split" #f 2688 20 2688 25 ("when" "search" "iterate" "incr" "else" "get-output" "1" "+" "subseq" "put" "set!" "if" "position" "'position" "return:" "start:" "find-if" "pos" "not" "while" "done?" "List-Factory" "new" "result" "0" "previous" "let" "procedure?" "list" "cardinality" "zero?" "cond" "separator" "seq")}
      {Lisp-Entry "split-justified" #f 2717 20 2717 35 ("get-output" "increase!" "+" "set!" "subseq" "put" "begin" "<=" "if" "-" "effective-width" "not" "while" "done?" "List-Factory" "new" "result" "cardinality" "size" "pos" "let" "0" "column" "column:" "separators" "width" "seq")}
      {Lisp-Entry "join" #f 2734 20 2734 24 ("get-output" "concatenate" "apply" "seq" "function" "for-each" "put" "List-Factory" "new" "dst" "join-strings" "string?" "if" "first" "let" "else" "car" "cdr" "null?" "cond" "separator" "sequences")}
      {Lisp-Entry "inject" #f 2753 20 2753 26 ("get-output" "put" "put-sequence" "set!" "if" "element" "function" "for-each" "first?" "List-Factory" "new" "fact" "let" "inserted" "sequence")}
      {Lisp-Entry "substitute" #f 2765 20 2765 30 ("class-of" "get-output" "coerce" "put-sequence" "put" "apply-key" "apply-test" "if" "get-next" "object" "done?" "not" "while" "List-Factory" "new" "dst" "iterate-sequence" "src" "let" "sequence?" "sequence?:" "test" "test:" "key" "key:" "seq" "new-value" "old-value")}
      {Lisp-Entry "substitute-alist" #f 2778 20 2778 36 ("class-of" "get-output" "coerce" "put" "set!" "put-sequence" "apply-key" "apply-test" "when" "old" "bind" "unless" "replacement" "function" "for-each" "found?" "get-next" "object" "done?" "not" "while" "List-Factory" "new" "dst" "iterate-sequence" "src" "let" "test" "test:" "key" "key:" "seq" "replacements")}
      {Lisp-Entry "fill!" #f 2796 20 2796 25 ("next" "put" "done?" "not" "while" "set-position" "when" "iterate-sequence" "src" "let" "start" "start:" "object" "seq")}
      {Lisp-Entry "replace!" #f 2806 20 2806 28 ("next" "get-next" "put" "done?" "not" "and" "while" "set-position" "when" "rep" "iterate-sequence" "src" "let" "start" "start:" "replacement" "seq")}
      {Lisp-Entry "ordered-position" #f 2817 20 2817 36 ("find" "<=" "test" "test:" "key" "key:" "seq" "object")}
      {Lisp-Entry "insert-ordered!" #f 2821 20 2821 35 ("cardinality" "either" "insert!" "ordered-position" "n" "let" "<=" "test" "test:" "key" "key:" "seq" "object")}
      {Lisp-Entry "merge-ordered" #f 2826 20 2826 33 ("get-next" "expr" "error" "else" ":right" ":greater" ":left" ":less" "next" ":same" ":equal" "case" "ky" "apply-key" "kx" "ey" "peek" "ex" "let*" "done?" "not" "and" "while" "compare" "ci-compare" "if" "either" "compare-proc" "iy" "iterate-sequence" "ix" "let" "case-insensitive?" "case-insensitive?:" "test" "test:" "right-key" "right-key:" "left-key" "left-key:" "key" "key:" "y" "x" "proc")}
      {Lisp-Entry "merge" #f 2852 20 2852 25 ("get-output" "cdr" "set-car!" "put" ":equal" "neq?" "not" "or" "if" "object" "list" "pair" "function" "for-each-pair" "List-Factory" "new" "res" "apply-key" "min-key" ":compare" "remove-nils" "car" "map" "minimum" "min" "let*" "identity" "some?" "while" "copy" "scan" "let" "compare" "compare:" "key" "key:" "lists" "proc")}
      {Lisp-Entry "random-element" #f 2870 20 2870 34 ("cardinality" "random" "element" "seq")}
      {Lisp-Entry "partition" #f 2874 20 2874 29 ("elements" "bind" "partition" "map" "reverse!" "cdr" "set-cdr!" "list" "cons" "set!" "not" "if" "associate" "pair" "category" "let*" "element" "function" "for-each" "result" "let" "test" "test:" "identity" "key" "key:" "sequence")}
      {Lisp-Entry "partition-binary" #f 2889 20 2889 36 ("values" "cons" "set!" "if" "elem" "function" "for-each" "no" "yes" "let" "predicate" "lst")}
      {Lisp-Entry "starts-with?" #f 2900 13 2900 25 ("0" "subseq" "string=?" ">=" "and" "tl" "cardinality" "sl" "let" "target" "seq")}
      {Lisp-Entry "ends-with?" #f 2909 13 2909 23 ("-" "subseq" "string=?" ">=" "and" "tl" "cardinality" "sl" "let" "target" "seq")}
      {Lisp-Entry "for-each-reversed" #f 2918 13 2918 30 ("car" "cdr" "pair?" "when" "iterate" "let" "lst" "proc")}
      {Lisp-Entry "find-if-list" #f 2925 13 2925 25 ("1" "+" "cdr" "error" "else" "item" "'item" "position" "'position" "eq?" "car" "null?" "cond" "rank" "tail" "rest" "iter" "x" "function" "not" "if" "let" "returned" "start" "key" "list" "predicate")}
      {Lisp-Entry "insert-sequence!" #f 2937 27 2937 43 ("replace-subseq!" "seq" "pos" "sequence")}
      {Lisp-Entry "Sequence-Explorer" #f 2946 7 2946 24 ("Explorer")
        {Lisp-Entry "sequence" #f 2949 8 2949 16 ()}
        {Lisp-Entry "sequence-cardinality" #f 2950 8 2950 28 ()}
        {Lisp-Entry "current" #f 2951 8 2951 15 ()}
        {Lisp-Entry "initialize" #f 2954 11 2954 21 ("current" "goto-end" "backward" "goto-beginning" "case" "not" "if" "set-direction" "cardinality" "sequence-cardinality" "sequence" "set!" "nextmethod" "start" "start:" "forward" "'forward" "direction" "direction:" "seq")}
        {Lisp-Entry "peek-forward" #f 2966 11 2966 23 ("current" "sequence" "element")}
        {Lisp-Entry "peek-backward" #f 2970 11 2970 24 ("1" "current" "-" "sequence" "element")}
        {Lisp-Entry "goto-beginning" #f 2974 11 2974 25 ("0" "current" "set!")}
        {Lisp-Entry "goto-end" #f 2978 11 2978 19 ("sequence-cardinality" "current" "set!")}
        {Lisp-Entry "forward" #f 2982 11 2982 18 ("1" "current" "increase!")}
        {Lisp-Entry "backward" #f 2986 11 2986 19 ("1" "current" "decrease!")}
        {Lisp-Entry "done-forward?" #f 2990 11 2990 24 ("sequence-cardinality" "current" ">=")}
        {Lisp-Entry "done-backward?" #f 2994 11 2994 25 ("0" "current" "=")}
        {Lisp-Entry "put-forward" #f 2998 11 2998 22 ("current" "sequence" "set-element!" "object")}
        {Lisp-Entry "put-backward" #f 3002 11 3002 23 ("1" "current" "-" "sequence" "set-element!" "object")}
        {Lisp-Entry "get-position" #f 3006 11 3006 23 ("current")}
        {Lisp-Entry "set-position" #f 3010 11 3010 23 ("sequence-cardinality" "0" "between" "current" "set!" "pos")}
        {Lisp-Entry "get-state" #f 3014 11 3014 20 ("current")}
        {Lisp-Entry "reset-state" #f 3018 11 3018 22 ("current" "set!" "state")}}
      {Lisp-Entry "List-Class" #f 3027 7 3027 17 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" #f 3030 11 3030 28 ("make-list" "len")}}
      {Lisp-Entry "List" #f 3034 17 3034 21 ("Sequence" "List-Class")
        {Lisp-Entry "initialize" #f 3037 11 3037 21 ("native-class" "rest")}
        {Lisp-Entry "copy-object" #f 3041 11 3041 22 ("self" "copy" "if" "x" "function" "map" "deep?")}
        {Lisp-Entry "iterate-object" #f 3049 11 3049 25 ("self" "List-Iterator" "new")}
        {Lisp-Entry "sequence-element" #f 3053 11 3053 27 ("self" "list-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 3057 11 3057 32 ("self" "list-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 3061 11 3061 31 ("self" "length")}
        {Lisp-Entry "sequence-tail" #f 3065 11 3065 24 ("1" "-" "cdr" "tail" "0" "=" "self" "null?" "or" "if" "n")}
        {Lisp-Entry "sequence-last" #f 3071 11 3071 24 ("last" "car" "self" "cdr" "null?" "if")}
        {Lisp-Entry "sequence-butlast" #f 3077 11 3077 27 ("butlast" "car" "cons" "cdr" "self" "null?" "or" "if")}
        {Lisp-Entry "sequence-subseq!" #f 3083 11 3083 27 ("subseq" "self" "-1" "0" "=" "or" "if" "end" "start")}
        {Lisp-Entry "replace-subseq!" #f 3089 11 3089 26 ("+" "after" "1" "-" "before" "let*" "self" "tail" "last-tail" "set-cdr!" "begin" "0" "=" "if" "seq" "end" "start")}}
      {Lisp-Entry "Null-Class" #f 3101 7 3101 17 ("List-Class")}
      {Lisp-Entry "Null" #f 3104 17 3104 21 ("List" "Null-Class")
        {Lisp-Entry "compare-object" #f 3107 11 3107 25 (":not-equal" ":equal" "null?" "if" "obj")}}
      {Lisp-Entry "Pair-Class" #f 3113 7 3113 17 ("List-Class")}
      {Lisp-Entry "Pair" #f 3116 17 3116 21 ("List" "Pair-Class")
        {Lisp-Entry "compare-object" #f 3119 11 3119 25 (":not-equal" "else" "null?" "and" "cond" "right" "cdr" "left" "let" ":equal" ":greater" ":less" "self" "car" "compare" "case" "pair?" "if" "obj")}}
      {Lisp-Entry "element" #f 3139 20 3139 27 ("list-ref" "n" "list")}
      {Lisp-Entry "cardinality" #f 3143 20 3143 31 ("length" "list")}
      {Lisp-Entry "insert!" #f 3147 27 3147 34 ("class-of" "list" "coerce" "insert-sequence!" "obj" "pos" "seq")}
      {Lisp-Entry "atom?" #f 3151 27 3151 32 ("pair?" "not" "obj")}
      {Lisp-Entry "null/pair?" #f 3155 27 3155 37 ("pair?" "null?" "or" "obj")}
      {Lisp-Entry "last-tail" #f 3159 20 3159 29 ("cdr" "pair?" "cur" "iter" "let" "null?" "if" "lst")}
      {Lisp-Entry "make-list" #f 3168 20 3168 29 ("1" "-" "cons" "set!" "0" ">" "while" "list" "car" "null?" "if" "fill" "let" "rest" "n")}
      {Lisp-Entry "list-set!" #f 3177 27 3177 36 ("list-tail" "set-car!" "value" "n" "list")}
      {Lisp-Entry "set-cadr!" #f 3181 27 3181 36 ("cdr" "set-car!" "value" "pair")}
      {Lisp-Entry "append!" #f 3185 20 3185 27 ("queue-list" "enqueue-list" "lst" "function" "for-each" "new-queue" "queue" "let" "rest")}
      {Lisp-Entry "position" #f 3193 20 3193 28 ("0" "1" "+" "cdr" "else" "car" "eqv?" "null?" "cond" "pos" "function" "position" "letrec" "lst" "element")}
      {Lisp-Entry "copy-tree" #f 3205 20 3205 29 ("cdr" "car" "copy-tree" "cons" "pair?" "if" "tree")}
      {Lisp-Entry "position-of" #f 3212 20 3212 31 ("1" "+" "cdr" "car" "eq?" "null?" "if" "0" "i" "rst" "iter" "let" "lst" "obj")}
      {Lisp-Entry "proper-list?" #f 3221 13 3221 25 ("cdr" "proper-list?" "else" "pair?" "not" "null?" "cond" "lst")}
      {Lisp-Entry "last-cdr" #f 3227 13 3227 21 ("cdr" "last-cdr" "pair?" "if" "lst")}
      {Lisp-Entry "but-last-cdr" #f 3233 13 3233 25 ("cdr" "but-last-cdr" "car" "cons" "pair?" "if" "lst")}
      {Lisp-Entry "move-to-head!" #f 3239 13 3239 26 ("else" "cons" "set-cdr!" "cond" "cdr" "scan" "previous" "iter" "let" "car" "eq?" "null?" "or" "if" "lst" "target")}
      {Lisp-Entry "move-to-tail!" #f 3250 13 3250 26 ("begin" "if" "scan" "previous" "iter" "let" "else" "cdr" "cons" "last-tail" "set-cdr!" "car" "eq?" "null?" "cond" "lst" "target")}
      {Lisp-Entry "augment" #f 3269 20 3269 27 ("get-output" "set!" "put" "car" "put-sequence" "cdr" "null?" "if" "not-null?" "while" "scan" "List-Factory" "new" "fact" "let" "rest")}
      {Lisp-Entry "memq?" #f 3280 27 3280 32 ("memq" "boolean" "list" "target")}
      {Lisp-Entry "memv?" #f 3284 27 3284 32 ("memv" "boolean" "list" "target")}
      {Lisp-Entry "member?" #f 3288 20 3288 27 ("cdr" "else" "car" "apply-key" "apply-test" "null?" "cond" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "assq-value" #f 3298 20 3298 30 ("cdr" "if" "assq" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "assv-value" #f 3305 20 3305 30 ("cdr" "if" "assv" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "assoc-value" #f 3312 20 3312 31 ("cdr" "if" "assoc" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "associate" #f 3319 20 3319 29 ("cdr" "apply-key" "apply-test" "car" "pair" "null?" "if" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "rassociate" #f 3329 20 3329 30 ("cdr" "apply-key" "apply-test" "car" "pair" "null?" "if" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "find-pair" #f 3339 20 3339 29 ("cdr" "else" "car" "eq?" "null?" "cond" "scan" "iter" "let" "list" "target")}
      {Lisp-Entry "reverse!" #f 3349 20 3349 28 ("set-cdr!" "cdr" "set!" "not-null?" "while" "ptr" "res" "let" "list")}
      {Lisp-Entry "remove!" #f 3360 20 3360 27 ("set-cdr!" "begin" "scan" "previous" "let" "null?" "if" "cdr" "set!" "car" "apply-key" "not-null?" "and" "while" "eqv?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "getprop" #f 3377 20 3377 27 ("cddr" "else" "car" "apply-key" "eqv?" "null?" "cond" "scan" "iter" "let" "key" "key:" "target" "plist")}
      {Lisp-Entry "getf" #f 3387 20 3387 24 ("cadr" "not" "if" "getprop" "pair" "let" "not-found" "not-found:" "key" "key:" "target" "plist")}
      {Lisp-Entry "setf" #f 3394 20 3394 24 ("getprop" "set-second!" "value" "target" "plist")}
      {Lisp-Entry "addf" #f 3398 20 3398 24 ("set-second!" "list" "append!" "not" "if" "getprop" "pair" "let" "value" "target" "plist")}
      {Lisp-Entry "for-each-pair" #f 3406 20 3406 33 ("cdr" "set!" "not-null?" "while" "lst" "proc")}
      {Lisp-Entry "for-each-property" #f 3412 20 3412 37 ("cddr" "set!" "cadr" "car" "not-null?" "while" "lst" "proc")}
      {Lisp-Entry "map-property" #f 3418 20 3418 32 ("queue-list" "enqueue" "value" "property" "function" "for-each-property" "new-queue" "queue" "let" "lst" "proc")}
      {Lisp-Entry "flatten" #f 3426 20 3426 27 ("append" "apply" "llist")}
      {Lisp-Entry "uniform" #f 3430 20 3430 27 ("cdr" "continuation-return" "apply-test" "unless" "value" "object" "for-each" "car" "apply-key" "first" "let" "return" "function" "continuation-capture" "null?" "if" "test" "test:" "key" "key:" "lst")}
      {Lisp-Entry "sort-property-list" #f 3444 20 3444 38 ("append" "apply" "car" "key:" "<" "sort" "sorted" "get-output" "for-each-property" "begin" "alist" "list" "put" "value" "property" "function" "proc" "List-Factory" "new" "factory" "let*" "prop-list")}
      {Lisp-Entry "List-Iterator" #f 3460 7 3460 20 ("Iterator")
        {Lisp-Entry "current" #f 3463 8 3463 15 ()}
        {Lisp-Entry "position" #f 3464 8 3464 16 ()}
        {Lisp-Entry "initialize" #f 3467 11 3467 21 ("0" "position" "current" "set!" "nextmethod" "list")}
        {Lisp-Entry "get-next!" #f 3473 11 3473 20 ("1" "+" "position" "cdr" "set!" "car" "prog1" "eof-object" "current" "null?" "if")}
        {Lisp-Entry "done?" #f 3481 11 3481 16 ("Empty" "peeked" "eq?" "current" "null?" "and")}
        {Lisp-Entry "put" #f 3485 11 3485 14 ("current" "set-car!" "object")}
        {Lisp-Entry "get-position" #f 3489 11 3489 23 ("position")}
        {Lisp-Entry "set-position" #f 3493 11 3493 23 ("tail" "current" "set!" ">" "error" "0" "<" "cond" "position" "-" "delta" "let" "pos")}
        {Lisp-Entry "get-state" #f 3501 11 3501 20 ("position" "current" "cons")}
        {Lisp-Entry "reset-state" #f 3505 11 3505 22 ("cdr" "position" "car" "current" "set!" "state")}
        {Lisp-Entry "get-list" #f 3510 18 3510 26 ("current")}}
      {Lisp-Entry "List-Factory" #f 3519 7 3519 19 ("Object")
        {Lisp-Entry "list" #f 3522 8 3522 12 ()}
        {Lisp-Entry "last-list" #f 3523 8 3523 17 ()}
        {Lisp-Entry "last-anchor" #f 3524 8 3524 19 ()}
        {Lisp-Entry "current" #f 3525 8 3525 15 ()}
        {Lisp-Entry "size" #f 3526 8 3526 12 ("0")}
        {Lisp-Entry "put" #f 3529 11 3529 14 ("increase!" "size" "prog1" "cdr" "set-cdr!" "copy-last-list" "last-list" "when" "else" "list" "cons" "set!" "current" "null?" "cond" "object")}
        {Lisp-Entry "put-unique" #f 3542 11 3542 21 ("put" "list" "member?" "unless" "eqv?" "test" "test:" "object")}
        {Lisp-Entry "put-sequence" #f 3547 11 3547 23 ("cardinality" "increase!" "size" "prog1" "set-cdr!" "last-anchor" "copy-last-list" "else" "list" "last-list" "set!" "current" "null?" "cond" "put" "iterate" "pair?" "not" "if" "when" "seq")}
        {Lisp-Entry "is-empty?" #f 3565 18 3565 27 ("current" "null?")}
        {Lisp-Entry "get-size" #f 3569 18 3569 26 ("size")}
        {Lisp-Entry "get-list" #f 3573 18 3573 26 ("list")}
        {Lisp-Entry "get-last-element" #f 3577 18 3577 34 ("current" "car")}
        {Lisp-Entry "get-output" #f 3581 11 3581 21 ("list")}
        {Lisp-Entry "reset" #f 3585 18 3585 23 ("0" "size" "current" "last-anchor" "last-list" "list" "set!")}
        {Lisp-Entry "copy-last-list" #f 3593 19 3593 33 ("set-cdr!" "else" "last-tail" "current" "last-list" "copy" "list" "set!" "last-anchor" "not" "cond")}}
      {Lisp-Entry "Table" #f 3609 17 3609 22 ("Object")
        {Lisp-Entry "initialize" #f 3612 11 3612 21 ("native-class" "rest")}
        {Lisp-Entry "print" #f 3616 11 3616 16 ("table-length" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "table-add" #f 3623 20 3623 29 ("table-ref" "cons" "table-set!" "value" "key" "table")}
      {Lisp-Entry "table-remove!" #f 3627 20 3627 33 ("table-ref" "remove!" "table-set!" "value" "name" "table")}
      {Lisp-Entry "empty-table" #f 3631 13 3631 24 ("empty-table" "'empty-table" "unimplemented" "table")}
      {Lisp-Entry "table-keys" #f 3635 20 3635 30 ("cons" "set!" "value" "key" "function" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-values" #f 3643 20 3643 32 ("cons" "set!" "value" "key" "function" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-keys/values" #f 3651 20 3651 37 ("cons" "set!" "value" "key" "function" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-load" #f 3659 20 3659 30 ("table-set!" "error" "table-ref" "if" "eof-object?" "not" "and" "when" "object" "read" "name" "iterate" "let" "reader" "function" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "error-on-duplicates?" "file" "table")}
      {Lisp-Entry "Cell" #f 3678 7 3678 11 ("Numeric")
        {Lisp-Entry "row" #f 3681 8 3681 11 ("generate")}
        {Lisp-Entry "col" #f 3682 8 3682 11 ("generate")}
        {Lisp-Entry "initialize" #f 3685 11 3685 21 ("col" "row" "set!" "c" "r")}
        {Lisp-Entry "copy-object" #f 3690 11 3690 22 ("col" "row" "Cell" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 3694 11 3694 25 ("get-col" "col" ":equal" "eq?" "not" "get-row" "row" "compare" "compared" "let" ":incompatible" "Cell" "is-not?" "if" "target")}
        {Lisp-Entry "fold-literal" #f 3703 11 3703 23 ("col" ",col" "',col" "row" ",row" "',row" "Cell" "new")}
        {Lisp-Entry "print" #f 3707 11 3707 16 ("col" "row" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" #f 3714 11 3714 23 ("self" "error")}
        {Lisp-Entry "numeric-add" #f 3718 11 3718 22 ("self" "error" "else" "integer?" "get-col" "col" "get-row" "row" "+" "new" "Cell" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" #f 3724 11 3724 25 ("col" "row" "-" "Cell" "new")}
        {Lisp-Entry "numeric-multiply" #f 3728 11 3728 27 ("self" "error" "col" "row" "*" "Cell" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" #f 3734 11 3734 26 ("self" "error")}
        {Lisp-Entry "increase-row" #f 3738 18 3738 30 ("+" "row" "set!" "1" "delta")}
        {Lisp-Entry "increase-col" #f 3742 18 3742 30 ("+" "col" "set!" "1" "delta")}}
      {Lisp-Entry "new-cell" #f 3746 27 3746 35 ("Cell" "construct" "col" "row")}
      {Lisp-Entry "new" #f 3749 20 3749 23 ("new-cell" "col" "row" "class")}
      {Lisp-Entry "copy-cell" #f 3753 22 3753 31 ()}
      {Lisp-Entry "copy" #f 3753 33 3753 37 ("get-col" "get-row" "Cell" "new" "c")}
      {Lisp-Entry "cell=" #f 3757 22 3757 27 ()}
      {Lisp-Entry "=" #f 3757 29 3757 30 ("get-col" "get-row" "=" "and" "c2" "c1")}
      {Lisp-Entry "cell<" #f 3762 15 3762 20 ()}
      {Lisp-Entry "<" #f 3762 22 3762 23 ("get-col" "=" "and" "<" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell<=" #f 3770 15 3770 21 ()}
      {Lisp-Entry "<=" #f 3770 23 3770 25 ("get-col" "<=" "=" "and" "<" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell>" #f 3778 15 3778 20 ()}
      {Lisp-Entry ">" #f 3778 22 3778 23 ("get-col" "=" "and" ">" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell>=" #f 3786 15 3786 21 ()}
      {Lisp-Entry ">=" #f 3786 23 3786 25 ("get-col" ">=" "=" "and" ">" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell+" #f 3794 22 3794 27 ()}
      {Lisp-Entry "+" #f 3794 29 3794 30 ("get-col" "get-row" "+" "Cell" "new" "c2" "c1")}
      {Lisp-Entry "+" #f 3800 20 3800 21 ("get-col" "+" "get-row" "Cell" "new" "n" "c")}
      {Lisp-Entry "cell-" #f 3806 22 3806 27 ()}
      {Lisp-Entry "-" #f 3806 29 3806 30 ("get-col" "get-row" "-" "Cell" "new" "c2" "c1")}
      {Lisp-Entry "-" #f 3812 20 3812 21 ("get-col" "-" "get-row" "Cell" "new" "n" "c")}
      {Lisp-Entry "Range" #f 3823 7 3823 12 ("Object")
        {Lisp-Entry "start" #f 3826 8 3826 13 ()}
        {Lisp-Entry "end" #f 3827 8 3827 11 ()}
        {Lisp-Entry "initialize" #f 3830 11 3830 21 ("end" "start" "set!" "nextmethod" "e" "s")}
        {Lisp-Entry "copy-object" #f 3836 11 3836 22 ("end" "start" "Range" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 3840 11 3840 25 (":not-equal" "else" ":equal" "get-end" "end" "get-start" "start" "=" "and" ":incompatible" "Range" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 3849 11 3849 23 ("end" ",end" "',end" "start" ",start" "',start" "Range" "new")}
        {Lisp-Entry "print" #f 3853 11 3853 16 ("end" "start" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-start" #f 3860 25 3860 34 ("start")}
        {Lisp-Entry "get-end" #f 3864 25 3864 32 ("end")}
        {Lisp-Entry "extent" #f 3868 26 3868 32 ("start" "end" "-")}
        {Lisp-Entry "extended?" #f 3872 26 3872 35 ("end" "start" "=" "not")}
        {Lisp-Entry "inside?" #f 3876 18 3876 25 ("end" "<" "start" ">=" "and" "n")}
        {Lisp-Entry "before?" #f 3881 18 3881 25 ("start" "<" "n")}
        {Lisp-Entry "after?" #f 3885 18 3885 24 ("end" ">" "n")}
        {Lisp-Entry "intersect?" #f 3889 18 3889 28 ("start" "get-end" ">=" "end" "get-start" "<" "and" "range")}
        {Lisp-Entry "intersect" #f 3894 18 3894 27 ("get-end" "end" "min" "get-start" "start" "max" "self" "class-of" "new" "intersect?" "when" "range")}}
      {Lisp-Entry "new-range" #f 3899 27 3899 36 ("Range" "construct" "end" "start")}
      {Lisp-Entry "new" #f 3902 20 3902 23 ("new-range" "end" "start" "class")}
      {Lisp-Entry "range=" #f 3906 22 3906 28 ()}
      {Lisp-Entry "=" #f 3906 30 3906 31 ("get-end" "get-start" "=" "and" "r2" "r1")}
      {Lisp-Entry "Range$Cell$" #f 3916 7 3916 18 ("Object")
        {Lisp-Entry "start" #f 3919 8 3919 13 ("generate")}
        {Lisp-Entry "end" #f 3920 8 3920 11 ("generate")}
        {Lisp-Entry "initialize" #f 3923 11 3923 21 ("end" "start" "set!" "nextmethod" "e" "s")}
        {Lisp-Entry "copy-object" #f 3929 11 3929 22 ("end" "start" "Range$Cell$" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 3933 11 3933 25 (":not-equal" "else" ":equal" "get-end" "end" "get-start" "start" "=" "and" ":incompatible" "Range$Cell$" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 3942 11 3942 23 ("end" ",end" "',end" "start" ",start" "',start" "Range$Cell$" "new")}
        {Lisp-Entry "print" #f 3946 11 3946 16 ("end" "start" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "extent" #f 3953 26 3953 32 ("start" "end" "-")}
        {Lisp-Entry "extended?" #f 3957 26 3957 35 ("end" "start" "=" "not")}
        {Lisp-Entry "inside?" #f 3961 18 3961 25 ("end" "<" "start" ">=" "and" "n")}
        {Lisp-Entry "before?" #f 3966 18 3966 25 ("start" "<" "n")}
        {Lisp-Entry "after?" #f 3970 18 3970 24 ("end" ">" "n")}
        {Lisp-Entry "intersect?" #f 3974 18 3974 28 ("start" "get-end" ">=" "end" "get-start" "<" "and" "range")}
        {Lisp-Entry "intersect" #f 3979 18 3979 27 ("get-end" "end" "min" "get-start" "start" "max" "self" "class-of" "new" "intersect?" "when" "range")}}
      {Lisp-Entry "new" #f 3984 20 3984 23 ("Range$Cell$" "construct" "end" "start" "class")}
      {Lisp-Entry "=" #f 3988 20 3988 21 ("get-end" "get-start" "=" "and" "r2" "r1")}
      {Lisp-Entry "Point" #f 3998 7 3998 12 ("Numeric")
        {Lisp-Entry "h" #f 4001 8 4001 9 ("generate")}
        {Lisp-Entry "v" #f 4002 8 4002 9 ("generate")}
        {Lisp-Entry "initialize" #f 4005 11 4005 21 ("v~self" "h~self" "set!" "nextmethod" "v" "h")}
        {Lisp-Entry "copy-object" #f 4011 11 4011 22 ("v" "h" "Point" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 4015 11 4015 25 (":not-equal" "else" ":equal" "get-v" "v" "get-h" "h" "=" "and" "target-point" "let" ":incompatible" "Point" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 4025 11 4025 23 ("v" ",v" "',v" "h" ",h" "',h" "Point" "new")}
        {Lisp-Entry "print" #f 4029 11 4029 16 ("v" "h" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" #f 4035 11 4035 23 ("v" "2" "h" "expt" "+" "sqrt")}
        {Lisp-Entry "numeric-add" #f 4039 11 4039 22 ("self" "error" "else" "integer?" "get-height" "get-width" "Dimension" "get-v" "v" "get-h" "h" "+" "new" "Point" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" #f 4046 11 4046 25 ("v" "h" "-" "Point" "new")}
        {Lisp-Entry "numeric-multiply" #f 4050 11 4050 27 ("self" "error" "v" "h" "*" "Point" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" #f 4056 11 4056 26 ("self" "error")}}
      {Lisp-Entry "new-point" #f 4060 27 4060 36 ("Point" "construct" "v" "h")}
      {Lisp-Entry "new" #f 4063 20 4063 23 ("new-point" "v" "h" "class")}
      {Lisp-Entry "point=" #f 4067 22 4067 28 ()}
      {Lisp-Entry "=" #f 4067 30 4067 31 ("get-v" "get-h" "=" "and" "p2" "p1")}
      {Lisp-Entry "point+" #f 4072 22 4072 28 ()}
      {Lisp-Entry "+" #f 4072 30 4072 31 ("get-v" "get-h" "+" "Point" "new" "p2" "p1")}
      {Lisp-Entry "+" #f 4078 20 4078 21 ("get-v" "get-h" "+" "Point" "new" "n" "p")}
      {Lisp-Entry "point-" #f 4084 22 4084 28 ()}
      {Lisp-Entry "-" #f 4084 30 4084 31 ("get-v" "get-h" "-" "Point" "new" "p2" "p1")}
      {Lisp-Entry "-" #f 4090 20 4090 21 ("get-v" "get-h" "-" "Point" "new" "n" "p")}
      {Lisp-Entry "-" #f 4096 20 4096 21 ("get-v" "get-h" "-" "Point" "new" "p")}
      {Lisp-Entry "point*" #f 4102 22 4102 28 ()}
      {Lisp-Entry "*" #f 4102 30 4102 31 ("get-v" "get-h" "*" "Point" "new" "n" "p")}
      {Lisp-Entry "Dimension" #f 4113 7 4113 16 ("Numeric")
        {Lisp-Entry "width" #f 4116 8 4116 13 ("generate")}
        {Lisp-Entry "height" #f 4117 8 4117 14 ("generate")}
        {Lisp-Entry "initialize" #f 4120 11 4120 21 ("height" "width" "set!" "nextmethod" "h" "w")}
        {Lisp-Entry "copy-object" #f 4126 11 4126 22 ("height" "width" "Dimension" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 4130 11 4130 25 ("get-height" "height" ":equal" "neq?" "get-width" "width" "compare" "compared" "let" ":incompatible" "Dimension" "is-not?" "if" "target")}
        {Lisp-Entry "fold-literal" #f 4139 11 4139 23 ("height" ",height" "',height" "width" ",width" "',width" "Dimension" "new")}
        {Lisp-Entry "print" #f 4143 11 4143 16 ("height" "width" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" #f 4149 11 4149 23 ("self" "error")}
        {Lisp-Entry "numeric-add" #f 4153 11 4153 22 ("self" "error" "else" "integer?" "get-v" "get-h" "Point" "get-height" "height" "get-width" "width" "+" "new" "Dimension" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" #f 4160 11 4160 25 ("height" "width" "-" "Dimension" "new")}
        {Lisp-Entry "numeric-multiply" #f 4164 11 4164 27 ("self" "error" "height" "width" "*" "Dimension" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" #f 4170 11 4170 26 ("self" "error")}}
      {Lisp-Entry "new-dimension" #f 4174 27 4174 40 ("Dimension" "construct" "height" "width")}
      {Lisp-Entry "new" #f 4177 20 4177 23 ("new-dimension" "height" "width" "class")}
      {Lisp-Entry "dimension=" #f 4181 22 4181 32 ()}
      {Lisp-Entry "=" #f 4181 34 4181 35 ("get-height" "get-width" "=" "and" "d2" "d1")}
      {Lisp-Entry "dimension+" #f 4186 22 4186 32 ()}
      {Lisp-Entry "+" #f 4186 34 4186 35 ("get-height" "get-width" "+" "Dimension" "new" "d2" "d1")}
      {Lisp-Entry "dimension-" #f 4192 22 4192 32 ()}
      {Lisp-Entry "-" #f 4192 34 4192 35 ("get-height" "get-width" "-" "Dimension" "new" "d2" "d1")}
      {Lisp-Entry "dimension*" #f 4198 22 4198 32 ()}
      {Lisp-Entry "*" #f 4198 34 4198 35 ("get-height" "get-width" "*" "Dimension" "new" "n" "d")}
      {Lisp-Entry "Rect-Class" #f 4209 7 4209 17 ("Class")
        {Lisp-Entry "coerce-object" #f 4212 11 4212 24 ("nextmethod" "else" "0" "get-v" "get-h" "Rect" "new" "Point" "typecase" "object")}}
      {Lisp-Entry "Rect" #f 4218 7 4218 11 ("Object" "Rect-Class")
        {Lisp-Entry "left" #f 4222 8 4222 12 ("generate")}
        {Lisp-Entry "top" #f 4223 8 4223 11 ("generate")}
        {Lisp-Entry "right" #f 4224 8 4224 13 ("generate")}
        {Lisp-Entry "bottom" #f 4225 8 4225 14 ("generate")}
        {Lisp-Entry "initialize" #f 4228 11 4228 21 ("bottom" "right" "top" "left" "set!" "nextmethod" "b" "r" "t" "l")}
        {Lisp-Entry "copy-object" #f 4236 11 4236 22 ("bottom" "right" "top" "left" "Rect" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 4240 11 4240 25 (":not-equal" "else" ":equal" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "=" "and" ":incompatible" "Rect" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 4249 11 4249 23 ("bottom" ",bottom" "',bottom" "right" ",right" "',right" "top" ",top" "',top" "left" ",left" "',left" "Rect" "new")}
        {Lisp-Entry "print" #f 4253 11 4253 16 ("bottom" "right" "top" "left" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "new-rect" #f 4262 27 4262 35 ("Rect" "construct" "bottom" "right" "top" "left")}
      {Lisp-Entry "new" #f 4265 20 4265 23 ("new-rect" "bottom" "right" "top" "left" "class")}
      {Lisp-Entry "rect=" #f 4269 22 4269 27 ()}
      {Lisp-Entry "=" #f 4269 29 4269 30 ("get-bottom" "get-right" "get-top" "get-left" "=" "and" "r2" "r1")}
      {Lisp-Entry "Active-Process" #f 4281 12 4281 26 ()}
      {Lisp-Entry "Process-Active?" #f 4284 12 4284 27 ()}
      {Lisp-Entry "get-process" #f 4288 20 4288 31 ("Active-Process")}
      {Lisp-Entry "get-application" #f 4292 20 4292 35 ("Active-Process")}
      {Lisp-Entry "set-process" #f 4296 13 4296 24 ("Active-Process" "set!" "process")}
      {Lisp-Entry "set-application" #f 4300 13 4300 28 ("Active-Process" "set!" "application")}
      {Lisp-Entry "activate-process" #f 4304 13 4304 29 ("Process-Active?" "set!")}
      {Lisp-Entry "process-active?" #f 4308 13 4308 28 ("Process-Active?")}
      {Lisp-Entry "get-toplevel" #f 4312 13 4312 25 ("get-toplevel" "when" "get-application" "appl" "let")}
      {Lisp-Entry "Slot" #f 4323 7 4323 11 ("Field")
        {Lisp-Entry "offset" #f 4326 8 4326 14 ("generate")}
        {Lisp-Entry "initialize" #f 4327 8 4327 18 ("generate")}}
      {Lisp-Entry "Property" #f 4335 7 4335 15 ("Slot")
        {Lisp-Entry "getter" #f 4338 8 4338 14 ("generate")}
        {Lisp-Entry "setter" #f 4339 8 4339 14 ("generate")}}
      {Lisp-Entry "property?" #f 4342 27 4342 36 ("Property" "is?" "obj")}
      {Lisp-Entry "symbolize-property" #f 4346 20 4346 38 ("else" "keyword->symbol" "keyword?" "get-name" "field?" "cond" "property")}
      {Lisp-Entry "symbolize-properties" #f 4352 20 4352 40 ("get-output" "symbolize-property" "put" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let" "properties")}
      {Lisp-Entry "keywordize-property" #f 4362 20 4362 39 ("else" "keyword?" "field-name" "symbol->keyword" "field?" "cond" "property")}
      {Lisp-Entry "keywordize-properties" #f 4368 20 4368 41 ("get-output" "keywordize-property" "put" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let" "properties")}
      {Lisp-Entry "read-property" #f 4378 20 4378 33 ("property-field" "property-getter" "getter" "let" "expr" "object")}
      {Lisp-Entry "write-property" #f 4383 20 4383 34 ("property-field" "property-setter" "setter" "let" "value" "expr" "object")}
      {Lisp-Entry "property-field" #f 4388 20 4388 34 ("error" "keyword->symbol" "keyword?" "class-of" "category-field" "field" "let" "property?" "if" "expr" "object")}
      {Lisp-Entry "String-Class" #f 4402 7 4402 19 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" #f 4405 11 4405 28 ("make-string" "len")}
        {Lisp-Entry "coerce-object" #f 4409 11 4409 24 ("coerce-string" "nextmethod" "sequence?" "if" "obj")}}
      {Lisp-Entry "String" #f 4415 17 4415 23 ("Sequence" "String-Class")
        {Lisp-Entry "initialize" #f 4418 11 4418 21 ("native-class" "rest")}
        {Lisp-Entry "compare-object" #f 4422 11 4422 25 (":incompatible" ":greater" "else" ":less" "string<?" ":equal" "self" "string=?" "cond" "string?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" #f 4434 11 4434 28 (":incompatible" ":greater" "else" ":less" "string-ci<?" ":equal" "self" "string-ci=?" "cond" "string?" "if" "obj")}
        {Lisp-Entry "sequence-element" #f 4446 11 4446 27 ("self" "string-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 4450 11 4450 32 ("self" "string-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 4454 11 4454 31 ("self" "string-length")}
        {Lisp-Entry "sequence-tail" #f 4458 11 4458 24 ("substring" ">=" "if" "self" "cardinality" "lgt" "let" "n")}
        {Lisp-Entry "sequence-last" #f 4465 11 4465 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 4469 11 4469 27 ("1" "cardinality" "-" "0" "self" "substring")}}
      {Lisp-Entry "=" #f 4473 20 4473 21 ("string=?" "s2" "s1")}
      {Lisp-Entry "element" #f 4477 20 4477 27 ("string-ref" "n" "string")}
      {Lisp-Entry "set-element!" #f 4481 20 4481 32 ("string-set!" "c" "n" "string")}
      {Lisp-Entry "cardinality" #f 4485 20 4485 31 ("string-length" "string")}
      {Lisp-Entry "subseq" #f 4489 20 4489 26 ("substring" "end" "start" "string")}
      {Lisp-Entry "replace-subseq!" #f 4493 13 4493 28 ("cardinality" "0" "subseq" "string-append" "replacement" "end" "start" "string")}
      {Lisp-Entry "empty-string?" #f 4508 27 4508 40 ("string-length" "zero?" "string?" "and" "object")}
      {Lisp-Entry "->string" #f 4513 20 4513 28 ("get-output-string" "print" "open-output-string" "output" "let" ":human" "':human" "detail" "expr")}
      {Lisp-Entry "remove-trailing-char" #f 4519 20 4519 40 ("0" "subseq" "1" "-" "element" "eqv?" "if" "cardinality" "len" "let" "c" "string")}
      {Lisp-Entry "value-string?" #f 4526 20 4526 33 ("empty-string?" "not" "string?" "and" "object")}
      {Lisp-Entry "wi=" #f 4531 20 4531 23 ("else" "eqv?" "eq?" "continuation-return" "cond" "when" ">=" "increase!" "element" "whitechar?" "and" "set!" "not" "or" "while" "d2?" "=" "d1?" "w2?" "w1?" "s?" "l2" "cardinality" "l1" "n2" "0" "n1" "let*" "return" "function" "continuation-capture" "s2" "s1")}
      {Lisp-Entry "unique-domain-name" #f 4571 20 4571 38 ("increase!" "->string" "set!" "iterate" "let" "suffix" "1" "n" "subseq" "starts-with?" "when" "string" "function" "collect" "suffixes" "cardinality" "common-length" "append" "common-prefix" "let*" "member?" "not" "if" "separator" "separator:" "domain" "name")}
      {Lisp-Entry "remove-numeric-suffix" #f 4591 20 4591 41 ("1" "+" "0" "subseq" "if" "position" "'position" "return:" "reversed?:" "numeric?" "not" "c" "function" "find-if" "pos" "let" "string")}
      {Lisp-Entry "compare-n" #f 4598 13 4598 22 ("1" "+" "string-ref" "not" "or" ">=" "if" "0" "n" "iter" "ylen" "string-length" "xlen" "let" "eqv?" "test" "test:" "max" "y" "x")}
      {Lisp-Entry "string-checksum" #f 4609 13 4609 28 ("1" "+" "string-ref" "char->integer" "increase!" "<" "when" "n" "iter" "string-length" "len" "0" "sum" "let" "str")}
      {Lisp-Entry "primordial-thread-object" #f 4624 12 4624 36 ("current-thread")}
      {Lisp-Entry "primordial-thread" #f 4628 20 4628 37 ("primordial-thread-object")}
      {Lisp-Entry "primordial-thread?" #f 4632 20 4632 38 ("primordial-thread" "current-thread" "eq?")}
      {Lisp-Entry "new-thread" #f 4636 20 4636 30 ("make-root-thread" "apply" "rest" "thunk")}
      {Lisp-Entry "new-system-thread" #f 4642 20 4642 37 ("with-system-exception-debugger" "function" "new-thread" "apply" "rest" "thunk")}
      {Lisp-Entry "top-threads" #f 4650 20 4650 31 ("primordial-thread" "thread-thread-group" "thread-group->thread-list")}
      {Lisp-Entry "present-thread-name" #f 4654 20 4654 39 ("->string" "else" "unspecified?" "not" "or" "cond" "name")}
      {Lisp-Entry "present-thread-state" #f 4659 20 4659 40 ("get-output-string" "else" "when" "write" "thread-state-active-timeout" "thread-state-active-waiting-for" "wf" "thread-state-active?" "thread-state-abnormally-terminated?" "thread-state-normally-terminated?" "thread-state-initialized?" "format" "thread-state-uninitialized?" "cond" "10.0" "*" "round" "/" "current-systime" "systime->seconds" "-" "expiry" "display" "to" "write-timeout" "define" "open-output-string" "port" "let" "state")}
      {Lisp-Entry "present-object" #f 4697 20 4697 34 (":reader" "->string" "exc" "function" "with-exception-catcher" "object")}
      {Lisp-Entry "thread-loop?" #f 4706 20 4706 32 ("thread-specific" "thread")}
      {Lisp-Entry "thread-start-loop" #f 4709 20 4709 37 ("thread-specific-set!" "thread")}
      {Lisp-Entry "thread-stop-loop" #f 4712 20 4712 36 ("thread-specific-set!" "thread")}
      {Lisp-Entry "thread-loop" #f 4716 20 4716 31 ("thread-loop?" "when" "thread-read" "thunk" "loop" "let")}
      {Lisp-Entry "thread-ports" #f 4724 12 4724 24 ("weak-keys:" "eq?" "test:" "make-table")}
      {Lisp-Entry "thread-ports-mutex" #f 4727 12 4727 30 ("thread-ports" "'thread-ports" "make-mutex")}
      {Lisp-Entry "get-thread-port" #f 4730 13 4730 28 ("mutex-unlock!" "table-set!" "open-vector" "port" "let" "thread-ports" "table-ref" "either" "prog1" "thread-ports-mutex" "mutex-lock!" "thread")}
      {Lisp-Entry "thread-write" #f 4738 13 4738 25 ("force-output" "write" "get-thread-port" "thread-port" "let" "value" "thread")}
      {Lisp-Entry "thread-read" #f 4743 13 4743 24 ("read" "+infinity" "input-port-timeout-set!" "current-thread" "get-thread-port" "thread-port" "let")}
      {Lisp-Entry "thread-read-non-blocking" #f 4748 13 4748 37 ("read" "0" "input-port-timeout-set!" "current-thread" "get-thread-port" "thread-port" "let")}
      {Lisp-Entry "thread-post" #f 4754 20 4754 31 ("thread-write" "current-thread" "eq?" "if" "thunk" "name" "thread")}
      {Lisp-Entry "thread-execute" #f 4760 20 4760 34 ("mutex-unlock!" "unwind-protect" "function" "thread-write" "mutex-lock!" "make-mutex" "mutex" "let" "current-thread" "eq?" "if" "thunk" "name" "thread")}
      {Lisp-Entry "thread-call-noresult" #f 4773 12 4773 32 ("thread-call-noresult" "'thread-call-noresult" "list")}
      {Lisp-Entry "thread-call-result?" #f 4777 20 4777 39 ("thread-call-noresult" "neq?" "result")}
      {Lisp-Entry "thread-call" #f 4781 20 4781 31 ("mutex-specific" "mutex-unlock!" "unwind-protect" "function" "thread-write" "thread-call-noresult" "mutex-specific-set!" "mutex-lock!" "make-mutex" "mutex" "eq?" "if" "current-thread" "delegator" "let" "thunk" "name" "thread")}
      {Lisp-Entry "thread-exit" #f 4797 20 4797 31 ("pristine-thread-continuation" "continuation-return")}
      {Lisp-Entry "wait" #f 4806 13 4806 17 ("wait" "'wait" "unimplemented" "delay")}
      {Lisp-Entry "is-not?" #f 4815 27 4815 34 ("is?" "not" "type" "object")}
      {Lisp-Entry "type-name" #f 4819 27 4819 36 ("get-category-name" "type")}
      {Lisp-Entry "type-ascendant" #f 4823 27 4823 41 ("get-class-ascendant" "type")}
      {Lisp-Entry "type-descendants" #f 4827 20 4827 36 ("get-category-descendants" "type")}
      {Lisp-Entry "Vector-Class" #f 4836 7 4836 19 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" #f 4839 11 4839 28 ("make-vector" "len")}}
      {Lisp-Entry "Vector" #f 4843 17 4843 23 ("Sequence" "Vector-Class")
        {Lisp-Entry "initialize" #f 4846 11 4846 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 4851 11 4851 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 4857 11 4857 27 ("self" "vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 4861 11 4861 32 ("self" "vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 4865 11 4865 31 ("self" "vector-length")}
        {Lisp-Entry "sequence-tail" #f 4869 11 4869 24 ("self" "vector->list" "tail" "list->vector" "n")}
        {Lisp-Entry "sequence-last" #f 4873 11 4873 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 4877 11 4877 27 ("self" "vector->list" "butlast" "list->vector")}}
      {Lisp-Entry "element" #f 4881 20 4881 27 ("vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" #f 4885 20 4885 32 ("vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" #f 4889 20 4889 31 ("vector-length" "vector")}
      {Lisp-Entry "U8Vector-Class" #f 4898 7 4898 21 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" #f 4901 11 4901 28 ("make-u8vector" "len")}}
      {Lisp-Entry "U8Vector" #f 4905 17 4905 25 ("Sequence" "U8Vector-Class")
        {Lisp-Entry "initialize" #f 4908 11 4908 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 4913 11 4913 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 4919 11 4919 27 ("self" "u8vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 4923 11 4923 32 ("self" "u8vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 4927 11 4927 31 ("self" "u8vector-length")}
        {Lisp-Entry "sequence-tail" #f 4931 11 4931 24 ("self" "u8vector->list" "tail" "list->u8vector" "n")}
        {Lisp-Entry "sequence-last" #f 4935 11 4935 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 4939 11 4939 27 ("self" "u8vector->list" "butlast" "list->u8vector")}}
      {Lisp-Entry "element" #f 4943 20 4943 27 ("u8vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" #f 4947 20 4947 32 ("u8vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" #f 4951 20 4951 31 ("u8vector-length" "vector")}
      {Lisp-Entry "AXIS_MIN_SIZE" #f 4960 12 4960 25 ("8")}
      {Lisp-Entry "AXIS_GOLDEN_RATIO" #f 4961 12 4961 29 ("1.6")}
      {Lisp-Entry "Axis-Class" #f 4964 7 4964 17 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" #f 4967 11 4967 28 ("Axis" "new" "len")}}
      {Lisp-Entry "Axis" #f 4971 7 4971 11 ("Sequence" "Axis-Class")
        {Lisp-Entry "size" #f 4974 8 4974 12 ("generate")}
        {Lisp-Entry "content" #f 4975 8 4975 15 ("generate")}
        {Lisp-Entry "initialize" #f 4978 11 4978 21 ("make-vector" "content" "size" "set!" "s")}
        {Lisp-Entry "print" #f 4983 11 4983 16 ("content" "size" "format" "function" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "sequence-element" #f 4989 11 4989 27 ("self" "element" "n")}
        {Lisp-Entry "sequence-set-element!" #f 4993 11 4993 32 ("self" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 4997 11 4997 31 ("self" "cardinality")}
        {Lisp-Entry "sequence-tail" #f 5001 11 5001 24 ("self" "tail" "n")}
        {Lisp-Entry "sequence-last" #f 5005 11 5005 24 ("self" "last")}}
      {Lisp-Entry "axis" #f 5009 13 5009 17 ("Axis" "coerce" "rest")}
      {Lisp-Entry "element" #f 5013 20 5013 27 ("get-content" "vector-ref" "n" "axis")}
      {Lisp-Entry "set-element!" #f 5017 20 5017 32 ("get-content" "vector-set!" "obj" "n" "axis")}
      {Lisp-Entry "cardinality" #f 5021 20 5021 31 ("get-size" "axis")}
      {Lisp-Entry "tail" #f 5025 13 5025 17 ("1" "+" "element" "set-element!" ">=" "if" "0" "i" "iter" "get-size" "-" "offset" "Axis" "new" "new-axis" "let" "n" "axis")}
      {Lisp-Entry "last" #f 5035 13 5035 17 ("1" "get-size" "-" "element" "axis")}
      {Lisp-Entry "insert!" #f 5039 13 5039 20 ("list" "replace-subseq!" "obj" "pos" "axis")}
      {Lisp-Entry "replace-subseq!" #f 5043 13 5043 28 ("axis-grow" "1" "element" "set-element!" "0" ">" "when" "dst" "src" "n" "iter" "let" "<" "cond" "+" "new-size" "get-size" "old-size" "delta" "cardinality" "after" "-" "before" "let*" "replacement" "end" "start" "axis")}
      {Lisp-Entry "axis-remove!" #f 5073 20 5073 32 ("replace-subseq!" "1" "+" "end" "start" "let*" "when" "find" "n" "let" "element" "axis")}
      {Lisp-Entry "axis-grow" #f 5081 20 5081 29 ("1" "+" "element" "set-element!" "begin" "<" "when" "i" "iter" "AXIS_GOLDEN_RATIO" "*" "fxround" "old-content" "old-real-size" "let" "else" "AXIS_MIN_SIZE" "make-vector" "set-content" "0" "get-size" "=" "set-size" "get-content" "cardinality" "<=" "cond" "n" "axis")}
      {Lisp-Entry "axis-add" #f 5099 20 5099 28 ("set-element!" "1" "+" "axis-grow" "cardinality" "size" "let" "obj" "axis")}
      {Lisp-Entry "new-axis" #f 5105 27 5105 35 ("make-vector" "Axis" "construct" "size")}
      {Lisp-Entry "new" #f 5108 20 5108 23 ("new-axis" "size" "class")}
      {Lisp-Entry "allocate" #f 5112 13 5112 21 ("new-axis" "size" "class")}
      {Lisp-Entry "coerce" #f 5116 13 5116 19 ("element" "set-element!" "below" "0" "from" "n" "for" "loop" "allocate" "new-sequence" "cardinality" "len" "let" "class" "seq")}
      {Lisp-Entry "axis-ref" #f 5124 22 5124 30 ()}
      {Lisp-Entry "element" #f 5124 32 5124 39 ("get-content" "vector-ref" "n" "axis")}
      {Lisp-Entry "axis-set!" #f 5128 22 5128 31 ()}
      {Lisp-Entry "set-element!" #f 5128 33 5128 45 ("get-content" "vector-set!" "obj" "n" "axis")}
      {Lisp-Entry "axis-cardinality" #f 5132 22 5132 38 ()}
      {Lisp-Entry "cardinality" #f 5132 40 5132 51 ("get-size" "axis")}
      {Lisp-Entry "box-list" #f 5146 20 5146 28 ("cons" "lst")}
      {Lisp-Entry "unbox-list" #f 5150 20 5150 30 ("cdr" "box")}
      {Lisp-Entry "Enumeration" #f 5160 7 5160 18 ("Type")
        {Lisp-Entry "name" #f 5163 8 5163 12 ()}
        {Lisp-Entry "entries" #f 5164 8 5164 15 ()}
        {Lisp-Entry "construct-literal" #f 5168 16 5168 33 ("self" "new" "entries" "name" "context")}
        {Lisp-Entry "initialize" #f 5172 11 5172 21 ("entries~self" "name~self" "set!" "Enumeration" "nextmethod" "entries" "name")}
        {Lisp-Entry "foldable?" #f 5179 11 5179 20 ()}
        {Lisp-Entry "fold-object" #f 5184 11 5184 22 ("entries" "name" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "print" #f 5192 11 5192 16 ("entries" "name" "self" "class-of" "type-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" #f 5199 18 5199 26 ("name")}
        {Lisp-Entry "get-entries" #f 5203 18 5203 29 ("entries")}
        {Lisp-Entry "set-value" #f 5207 18 5207 27 ("entry-from-name" "cdr" "set-car!" "value" "name")}
        {Lisp-Entry "get-size" #f 5211 11 5211 19 ("int" "size-of")}
        {Lisp-Entry "read-content" #f 5215 11 5215 23 ("%read-int" "address")}
        {Lisp-Entry "write-content" #f 5219 11 5219 24 ("%write-int" "object" "address")}
        {Lisp-Entry "entry-from-name" #f 5223 11 5223 26 ("self" "error" "eq?" "test:" "first" "key:" "entries" "find-in" "either" "name")}
        {Lisp-Entry "entry-from-value" #f 5228 11 5228 27 ("self" "error" "eqv?" "test:" "second" "key:" "entries" "find-in" "either" "value")}
        {Lisp-Entry "value->name" #f 5233 18 5233 29 ("entry-from-value" "car" "value")}
        {Lisp-Entry "name->value" #f 5237 18 5237 29 ("entry-from-name" "cadr" "name")}
        {Lisp-Entry "get-rank" #f 5241 18 5241 26 ("eq?" "test:" "first" "key:" "entries" "find" "1" "+" "0" "name" "=" "if" "target")}}
      {Lisp-Entry "enumeration?" #f 5247 27 5247 39 ("enumeration?" "'enumeration?" "unimplemented" "object")}
      {Lisp-Entry "set-enumeration!" #f 5251 20 5251 36 ("set-value" "set-enumeration!" "'set-enumeration!" "unimplemented" "value" "name" "enumeration")}
      {Lisp-Entry "parse-file" #f 5262 20 5262 30 ("parse" "string?" "if" "file")}
      {Lisp-Entry "Chunk-Size" #f 5268 12 5268 22 ("1024")}
      {Lisp-Entry "make-u8-content" #f 5272 13 5272 28 ("cons" "content" "size")}
      {Lisp-Entry "u8-content-size" #f 5275 13 5275 28 ("car" "content")}
      {Lisp-Entry "iterate-u8-content" #f 5278 13 5278 31 ("cdr" "size" "u8vector" "bind" "chunk" "function" "for-each" "proc" "content")}
      {Lisp-Entry "read-u8-content" #f 5285 13 5285 28 ("cons" "put" "increase!" "get-output" "make-u8-content" "=" "if" "read-subu8vector" "read" "Chunk-Size" "make-u8vector" "u8vector" "loop" "List-Factory" "new" "fact" "0" "size" "let" "port")}
      {Lisp-Entry "write-u8-content" #f 5298 13 5298 29 ("0" "write-subu8vector" "size" "u8vector" "function" "iterate-u8-content" "port" "content")}
      {Lisp-Entry "Permanent-Port" #f 5305 7 5305 21 ("Object")
        {Lisp-Entry "port" #f 5308 8 5308 12 ("generate")}
        {Lisp-Entry "eof?" #f 5309 8 5309 12 ("generate")}
        {Lisp-Entry "initialize" #f 5312 11 5312 21 ("eof?~self" "port~self" "set!" "nextmethod" "port")}}
      {Lisp-Entry "read-substring-blocking-for-1" #f 5318 13 5318 42 ("else" "not" "len" "set!" "function" "-inf.0" "to?" "=" "and" "if" "1" "+" "read-substring" "n" "+inf.0" "input-port-timeout-set!" "get-port" "port" "let" "<" "0" "set-eof?" "get-eof?" "cond" "permanent-port" "end" "start" "str")}
      {Lisp-Entry "start-pump" #f 5340 13 5340 23 ("substring" ">" "if" "0" "read-substring-blocking-for-1" "n" "iterate" "make-string" "buffer" "1000" "size" "let" "proper-tail-calls" "declare" "proc" "permanent-port")}
      {Lisp-Entry "read-until" #f 5358 20 5358 30 ("enqueue" "queue-list" "if" "read" "expr" "iterate" "new-queue" "queue" "let" "reader" "test")}
      {Lisp-Entry "read-string-element" #f 5368 20 5368 39 ("read" "call-with-input-string" "string")}
      {Lisp-Entry "read-string-content" #f 5373 20 5373 39 ("eof-object?" "read-until" "reader" "function" "call-with-input-string" "string")}
      {Lisp-Entry "read-delimited-string" #f 5379 20 5379 41 ("get-output" "peek-char" "eof-object?" "if" "skip-whites" "put" "read-delimited" "lst" "iterate" "List-Factory" "new" "fact" "let" "reader" "function" "call-with-input-string" "char" "string")}
      {Lisp-Entry "parse-integer" #f 5392 20 5392 33 ("type:" "object:" "Convertion-Error" "new" "signal" "read-string-element" "numeric?" "empty-string?" "not" "and" "if" "string")}
      {Lisp-Entry "parse-hexadecimal" #f 5398 20 5398 37 ("format" "read-string-element" "string")}
      {Lisp-Entry "parse-boolean" #f 5402 20 5402 33 ("type:" "object:" "Convertion-Error" "new" "signal" "else" "ci=?" "cond" "string")}
      {Lisp-Entry "parse-strings" #f 5408 20 5408 33 ("split" "trim-spaces" "function" "map" "=" "empty-string?" "or" "if" "separator" "separator:" "string")}
      {Lisp-Entry "parse-delimited-string" #f 5416 20 5416 42 ("parse-strings" "function" "map" "separator" "separator:" "string")}
      {Lisp-Entry "require-char" #f 5422 20 5422 32 ("error" "eof-object?" "if" "read-char" "c" "let" "reader")}
      {Lisp-Entry "skip-line" #f 5429 20 5429 29 ("eqv?" "eof-object?" "not" "and" "if" "read-char" "c" "iterate" "let" "reader")}
      {Lisp-Entry "skip-whites" #f 5440 20 5440 31 ("read-char" "whitespace?" "when" "skip-line" "eqv?" "if" "eof-object?" "unless" "peek-char" "c" "iterate" "let" "reader")}
      {Lisp-Entry "read-delimited" #f 5451 20 5451 34 ("enqueue" "else" "read" "enqueue-list" "read-char" "eqv?" "error" "queue-list" "if" "eof-object?" "cond" "peek-char" "c" "skip-whites" "iterate" "new-queue" "queue" "let" "allow-eof?" "delimiter" "kind" "reader")}
      {Lisp-Entry "string-delimiter?" #f 5471 27 5471 44 ("eqv?" "c")}
      {Lisp-Entry "read-lines" #f 5475 13 5475 23 ("queue-list" "when" "enqueue" "begin" "if" "read-proper-line" "proper?" "line" "receive" "last-proper?" "iterate" "new-queue" "queue" "let" "proper-tail-calls" "declare" "reader")}
      {Lisp-Entry "read-content-string" #f 5489 20 5489 39 ("eof-object?" "if" "read-line" "line" "let" "reader")}
      {Lisp-Entry "pipe" #f 5498 20 5498 24 ("write-char" "begin" "eof-object?" "not" "if" "read-char" "c" "iterate" "let" "output" "input")}
      {Lisp-Entry "*console-port-getter*" #f 5512 12 5512 33 ()}
      {Lisp-Entry "set-console-port-getter" #f 5516 13 5516 36 ("*console-port-getter*" "set!" "getter")}
      {Lisp-Entry "get-console-port" #f 5520 13 5520 29 ("terminal-port" "*console-port-getter*" "not" "if")}
      {Lisp-Entry "console-input-port" #f 5526 20 5526 38 ("get-console-port")}
      {Lisp-Entry "console-output-port" #f 5529 20 5529 39 ("get-console-port")}
      {Lisp-Entry "force-console" #f 5533 20 5533 33 ("get-console-port" "force-output")}
      {Lisp-Entry "console" #f 5542 20 5542 27 ("format" "console-string" "rest")}
      {Lisp-Entry "console-string" #f 5546 20 5546 34 ("force-output" "format" "terminal-string" "not" "if" "console-output-port" "output" "let" "color" "color:" "string")}
      {Lisp-Entry "debug" #f 5559 19 5559 24 ("console")}
      {Lisp-Entry "debug-string" #f 5563 19 5563 31 ("console-string")}
      {Lisp-Entry "with-printer" #f 5572 20 5572 32 ("else" "get-console-port" ":console" "terminal-port" ":terminal" "get-output-string" "open-output-string" "let" ":string" "case" "proc" "printer")}
      {Lisp-Entry "textual" #f 5586 13 5586 20 (":text" "print" "write" "current-output-port" "printer" "expr")}
      {Lisp-Entry "describe" #f 5592 13 5592 21 (":describe" "print" "current-output-port" "printer" "expr")}
      {Lisp-Entry "print-expr" #f 5596 13 5596 23 ("print" "current-output-port" "printer" "detail" "expr")}
      {Lisp-Entry "print-unsigned" #f 5600 13 5600 27 ("print-unsigned" "'print-unsigned" "unimplemented" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-binary" #f 5604 13 5604 25 ("2" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-hexadecimal" #f 5608 13 5608 30 ("16" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-real" #f 5612 13 5612 23 ("new-frac" ">" "and" "carry?" "dot-pos" "or" "if" "len" "string->number" "round" "temp-str" "last-part" "first-part" "else" "-" "make-string" "string-append" "<" "display" "=" "cond" "frac-len" "string-length" "1" "+" "frac-str" "0" "substring" "pre-str" "find" "dot-index" "exact->inexact" "number->string" "str" "let*" "current-output-port" "printer" "precision" "r")}
      {Lisp-Entry "print-list" #f 5651 13 5651 23 ("null?" "pair?" "if" "cdr" "next" "print" "car" "expr" "scan" "iter" "let" "display" "not-null?" "when" "current-output-port" "printer" "detail" "after" "before" "last-separator" "separator" "list")}
      {Lisp-Entry "fresh-line" #f 5669 13 5669 23 ("newline" "at-fresh-line?" "unless" "current-output-port" "printer")}
      {Lisp-Entry "at-fresh-line?" #f 5674 13 5674 27 ("current-output-port" "printer")}
      {Lisp-Entry "pp" #f 5684 19 5684 21 ("pretty-print")}
      {Lisp-Entry "print-unreadable" #f 5688 20 5688 36 ("format" "object->serial" "serial" "empty-string?" "if" "spacer" "get-output-string" "open-output-string" "let" "string" "class-of" "get-name" "identifier-name" "class-name" "let*" "proc" "output" "object")}
      {Lisp-Entry "present-identifier" #f 5698 20 5698 38 ("0" "1" "element" "format" "reverse!" "reversed" "car" "cdr" "null?" "if" "symbol->string" "split" "names" "let" "identifier")}
      {Lisp-Entry "write-line" #f 5706 20 5706 30 ("newline" "display" "car" "null?" "if" "port" "let" "rest" "line")}
      {Lisp-Entry "write-lines" #f 5712 20 5712 31 ("newline" "null?" "unless" "display" "do" "remain" "remainder" "in" "line" "for" "loop" "lines" "printer")}
      {Lisp-Entry "Format-Processor" #f 5737 7 5737 23 ("Object")
        {Lisp-Entry "out" #f 5740 8 5740 11 ()}
        {Lisp-Entry "control-string" #f 5741 8 5741 22 ()}
        {Lisp-Entry "control-reader" #f 5742 8 5742 22 ()}
        {Lisp-Entry "arguments" #f 5743 8 5743 17 ()}
        {Lisp-Entry "arguments-iterator" #f 5744 8 5744 26 ()}
        {Lisp-Entry "formatter" #f 5745 8 5745 17 ()}
        {Lisp-Entry "initialize" #f 5748 11 5748 21 ("formatter~self" "List-Iterator" "new" "arguments-iterator~self" "arguments~self" "open-input-string" "control-reader~self" "control-string~self" "set!" "nextmethod" "arguments" "control-string")}
        {Lisp-Entry "process-format" #f 5762 11 5762 25 ("control-reader" "process" "out" "set!" "printer" "function" "with-printer" "destination")}
        {Lisp-Entry "process" #f 5774 11 5774 18 ("arguments-empty?" "toplevel?" "and" "localize-directive" "z" "force-directive" "!" "freshline-directive" "$" "newline-directive" "%" "tab-directive" "&" "column-directive" "_" "properties-directive" "k" "list-directive" "l" "real-directive" "r" "hexadecimal-directive" "x" "binary-directive" "b" "unsigned-directive" "u" "char-directive" "print-directive" "p" "text-directive" "t" "sexpr-directive" "s" "ascii-directive" "a" "read-parameters" "parameters" "read" "directive" "else" "conditional-directive" "error" "peek-char" "out" "write-char" "when" "require-char" "case" "set!" "eof-object?" "if" "read-char" "c" "not" "while" "done?" "let" "output?" "reader")}
        {Lisp-Entry "read-parameters" #f 5822 11 5822 26 ("read-delimited" "reader")}
        {Lisp-Entry "toplevel?" #f 5826 11 5826 20 ("control-reader" "eq?" "reader")}
        {Lisp-Entry "arguments-empty?" #f 5830 11 5830 27 ("arguments-iterator" "done?")}
        {Lisp-Entry "conditional-directive" #f 5839 11 5839 32 ("else" "process-conditional" "read-char" "peek-char" "eqv?" "cond" "reader")}
        {Lisp-Entry "read-control-string" #f 5847 11 5847 30 ("get-output-string" "write-char" "set!" "read-char" "begin" "peek-char" "eqv?" "and" "if" "require-char" "c" "not" "while" "done?" "open-output-string" "printer" "let" "reader")}
        {Lisp-Entry "process-conditional" #f 5860 11 5860 30 ("process" "peek-argument" "not" "next-argument" "and" "or" "output?" "read-control-string" "open-input-string" "subreader" "let" "explicit?" "reader")}
        {Lisp-Entry "ascii-directive" #f 5871 11 5871 26 ("display" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "sexpr-directive" #f 5879 11 5879 26 ("write" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "text-directive" #f 5887 11 5887 25 ("textual" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "print-directive" #f 5895 11 5895 26 ("print-expr" "printer" "function" "with-justification" "when" "detail" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "char-directive" #f 5904 11 5904 25 ("write-char" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "unsigned-directive" #f 5912 11 5912 29 ("print-unsigned" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "binary-directive" #f 5920 11 5920 27 ("print-binary" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "hexadecimal-directive" #f 5928 11 5928 32 ("print-hexadecimal" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "real-directive" #f 5936 11 5936 25 ("print-real" "printer" "function" "with-justification" "when" "get-precision" "precision" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "list-directive" #f 5945 11 5945 25 ("print-list" "printer" "function" "with-justification" "when" "get-detail" "detail" "get-after" "after" "get-before" "before" "get-last-separator" "last-separator" "get-separator" "separator" "next-argument" "argument" "let*" "output?" "parameters")}
        {Lisp-Entry "properties-directive" #f 5958 11 5958 31 ("cddr" "set!" "print-expr" "write-char" "neq?" "not" "memq?" "null?" "or" "and" "cadr" "value" "car" "key" "not-null?" "while" "scan" "printer" "function" "with-justification" "when" "get-detail" "detail" "get-empty-value" "empty-value" "get-properties" "properties" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "column-directive" #f 5979 11 5979 27 ("out" "write-char" "do" "repeat" "loop" "1" "optional-parameter" "count" "let" "when" "output?" "parameters")}
        {Lisp-Entry "tab-directive" #f 5986 11 5986 24 ("out" "write-char" "do" "repeat" "loop" "1" "optional-parameter" "count" "let" "when" "output?" "parameters")}
        {Lisp-Entry "newline-directive" #f 5993 11 5993 28 ("out" "newline" "do" "repeat" "loop" "1" "optional-parameter" "count" "let" "when" "output?" "parameters")}
        {Lisp-Entry "freshline-directive" #f 6000 11 6000 30 ("newline" "do" "-" "repeat" "loop" "out" "fresh-line" "1" "optional-parameter" "count" "let" "when" "output?" "parameters")}
        {Lisp-Entry "force-directive" #f 6008 11 6008 26 ("out" "force-output" "when" "output?" "parameters")}
        {Lisp-Entry "localize-directive" #f 6013 11 6013 29 ("display" "printer" "function" "with-justification" "when" "next-argument" "localize" "argument" "let" "localize-directive" "'localize-directive" "unimplemented" "output?" "parameters")}
        {Lisp-Entry "with-justification" #f 6028 11 6028 29 ("justify" "get-output-string" "buffer" "open-output-string" "printer" "get-padding" "padding" "get-justify" "justification" "out" "not" "if" "get-width" "width" "let" "proc" "parameters")}
        {Lisp-Entry "justify" #f 6040 11 6040 18 (":right" "write-char" "do" "repeat" "loop" ":left" "case" "-" "n" "out" "display" ">=" "if" "cardinality" "size" "let" "padding" "justification" "width" "buffer")}
        {Lisp-Entry "optional-parameter" #f 6061 11 6061 29 ("next-argument" ":v" "eq?" "car" "param" "let" "null?" "if" "default" "parameters")}
        {Lisp-Entry "keyword-parameter" #f 6070 11 6070 28 ("next-argument" ":v" "eq?" "if" "not-found:" "getf" "param" "let" "default" "keyword" "parameters")}
        {Lisp-Entry "get-list?" #f 6077 11 6077 20 ("list?:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-width" #f 6081 11 6081 20 ("width:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-justify" #f 6085 11 6085 22 ("error" ":right" "memq?" "not" "if" ":left" "justify:" "keyword-parameter" "param" "let" "parameters")}
        {Lisp-Entry "get-padding" #f 6092 11 6092 22 ("padding:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-separator" #f 6096 11 6096 24 ("separator:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-last-separator" #f 6100 11 6100 29 ("last-separator:" "keyword-parameter" "separator" "parameters")}
        {Lisp-Entry "get-before" #f 6104 11 6104 21 ("before:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-after" #f 6108 11 6108 20 ("after:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-precision" #f 6112 11 6112 24 ("3" "precision:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-properties" #f 6116 11 6116 25 ("properties:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-empty-value" #f 6120 11 6120 26 ("empty-value:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-detail" #f 6124 11 6124 21 (":reader" "detail:" "keyword-parameter" "parameters")}
        {Lisp-Entry "peek-argument" #f 6133 11 6133 24 ("peek" "control-string" "error" "arguments-iterator" "done?" "if")}
        {Lisp-Entry "next-argument" #f 6139 11 6139 24 ("get-next" "control-string" "error" "arguments-iterator" "done?" "if")}}
      {Lisp-Entry "Formatting" #f 6151 7 6151 17 ("Reader")
        {Lisp-Entry "read-string" #f 6154 18 6154 29 ("self" "formatting-read-string")}
        {Lisp-Entry "read-parameters" #f 6158 18 6158 33 ("self" "formatting-read-parameters")}}
      {Lisp-Entry "parse-format" #f 6167 13 6167 25 ("cddr" "cadr" "cdr" ":string" "':string" "car" "string?" "if" "proc" "rest")}
      {Lisp-Entry "format" #f 6173 20 6173 26 ("process-format" "Format-Processor" "new" "processor" "let" "arguments" "control-string" "destination" "function" "jazz.parse-format" "rest")}
      {Lisp-Entry "format-cardinality" #f 6185 20 6185 38 ("->string" "0" "=" "if" "n")}
      {Lisp-Entry "format-plural" #f 6191 20 6191 33 ("1" "=" "if" "plural" "n")}
      {Lisp-Entry "format-gender" #f 6197 20 6197 33 ("first" "vowel?" "if" "word")}
      {Lisp-Entry "format-is/are" #f 6203 20 6203 33 ("1" "=" "if" "n")}
      {Lisp-Entry "format-was/were" #f 6209 20 6209 35 ("1" "=" "if" "n")}
      {Lisp-Entry "format-y/ies" #f 6215 20 6215 32 ("1" "=" "if" "n")}
      {Lisp-Entry "format-following" #f 6221 20 6221 36 ("format" "1" "=" "if" "n" "name")}
      {Lisp-Entry "identity" #f 6232 27 6232 35 ("x")}
      {Lisp-Entry "compose" #f 6236 27 6236 34 ("x" "function" "g" "f")}
      {Lisp-Entry "profile" #f 6247 15 6247 22 (",condition" ",name" "%profile" ",@body" "begin" "not" "if" ":condition" "condition" "name:" "name" "not-found:" "unwrap-syntax" "key:" ":on?" "getf" "on?" "cdr" "body" "car" "control" "let" "expressions")}
      {Lisp-Entry "build-search-automata" #f 6264 13 6264 34 ("build-search-automata" "'build-search-automata" "unimplemented" "constituent-test" "object" "ignore-case?" "whole-words?" "targets")}
      {Lisp-Entry "automata-statistics" #f 6268 13 6268 32 ("automata-statistics" "'automata-statistics" "unimplemented" "automata")}
      {Lisp-Entry "automata-search" #f 6272 13 6272 28 ("automata-search" "'automata-search" "unimplemented" "col" "row" "limit" "paragraphs" "automata")}
      {Lisp-Entry "Subseq-Class" #f 6281 7 6281 19 ("Sequence-Class")}
      {Lisp-Entry "Subseq" #f 6284 7 6284 13 ("Sequence" "Subseq-Class")
        {Lisp-Entry "sequence" #f 6287 8 6287 16 ("generate")}
        {Lisp-Entry "start" #f 6288 8 6288 13 ("generate")}
        {Lisp-Entry "size" #f 6289 8 6289 12 ("generate")}
        {Lisp-Entry "initialize" #f 6292 11 6292 21 ("size~self" "start~self" "sequence~self" "set!" "nextmethod" "size" "start" "sequence")}
        {Lisp-Entry "print" #f 6299 11 6299 16 ("format" "function" "self" "print-unreadable" "string-ref" "write-char" "do" "size" "+" "below" "start" "from" "n" "for" "loop" "sequence" "string?" "if" "detail" "output")}
        {Lisp-Entry "coerce-string" #f 6309 11 6309 24 ("error" "size" "+" "start" "substring" "sequence" "string?" "if")}
        {Lisp-Entry "sequence-element" #f 6315 11 6315 27 ("start" "+" "sequence" "element" "n")}
        {Lisp-Entry "sequence-set-element!" #f 6319 11 6319 32 ("start" "+" "sequence" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 6323 11 6323 31 ("size")}
        {Lisp-Entry "sequence-subseq!" #f 6327 11 6327 27 ("cardinality" "-" "start" "+" "sequence" "Subseq" "new" "self" "-1" "0" "=" "or" "if" "e" "s")}}
      {Lisp-Entry "offset-subseq!" #f 6333 13 6333 27 ("get-start" "+" "set-start" "offset" "subseq")}
      {Lisp-Entry "grow-subseq!" #f 6337 13 6337 25 ("get-size" "+" "set-size" "n" "subseq")}
      {Lisp-Entry "subseq-ref" #f 6341 22 6341 32 ()}
      {Lisp-Entry "element" #f 6341 34 6341 41 ("get-start" "+" "get-sequence" "element" "n" "subseq")}
      {Lisp-Entry "subseq-set!" #f 6345 22 6345 33 ()}
      {Lisp-Entry "set-element!" #f 6345 35 6345 47 ("get-start" "+" "get-sequence" "set-element!" "obj" "n" "subseq")}
      {Lisp-Entry "subseq-cardinality" #f 6349 22 6349 40 ()}
      {Lisp-Entry "cardinality" #f 6349 42 6349 53 ("get-size" "subseq")}
      {Lisp-Entry "Subseq$string$-Class" #f 6358 7 6358 27 ("Sequence-Class")}
      {Lisp-Entry "Subseq$string$" #f 6361 7 6361 21 ("Sequence" "Subseq$string$-Class")
        {Lisp-Entry "sequence" #f 6364 8 6364 16 ("generate")}
        {Lisp-Entry "start" #f 6365 8 6365 13 ("generate")}
        {Lisp-Entry "size" #f 6366 8 6366 12 ("generate")}
        {Lisp-Entry "initialize" #f 6369 11 6369 21 ("size~self" "start~self" "sequence~self" "set!" "nextmethod" "size" "start" "sequence")}
        {Lisp-Entry "print" #f 6376 11 6376 16 ("size" "+" "start" "sequence" "substring" "display" "detail" "output")}
        {Lisp-Entry "sequence-element" #f 6381 11 6381 27 ("start" "+" "sequence" "element" "n")}
        {Lisp-Entry "sequence-set-element!" #f 6385 11 6385 32 ("start" "+" "sequence" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 6389 11 6389 31 ("size")}
        {Lisp-Entry "sequence-subseq!" #f 6393 11 6393 27 ("cardinality" "-" "start" "+" "sequence" "Subseq$string$" "new" "self" "-1" "0" "=" "or" "if" "e" "s")}}
      {Lisp-Entry "new" #f 6399 20 6399 23 ("Subseq$string$" "construct" "size" "start" "sequence" "class")}
      {Lisp-Entry "element" #f 6403 20 6403 27 ("get-start" "+" "get-sequence" "element" "n" "subseq")}
      {Lisp-Entry "set-element!" #f 6407 20 6407 32 ("get-start" "+" "get-sequence" "set-element!" "obj" "n" "subseq")}
      {Lisp-Entry "cardinality" #f 6411 20 6411 31 ("get-size" "subseq")}
      {Lisp-Entry "subseq!" #f 6415 13 6415 20 ("-" "Subseq$string$" "new" "e" "s" "seq")}
      {Lisp-Entry "subseq!" #f 6419 13 6419 20 ("-" "get-start" "+" "get-sequence" "Subseq$string$" "new" "e" "s" "subseq")}
      {Lisp-Entry "offset-subseq!" #f 6423 13 6423 27 ("get-start" "+" "set-start" "offset" "subseq")}
      {Lisp-Entry "grow-subseq!" #f 6427 13 6427 25 ("get-size" "+" "set-size" "n" "subseq")}
      {Lisp-Entry "syntax?" #f 6436 27 6436 34 ("syntax?" "'syntax?" "unimplemented" "expr")}
      {Lisp-Entry "unwrap-syntax" #f 6440 20 6440 33 ("syntax-expression" "syntax?" "if" "unwrap-syntax" "'unwrap-syntax" "unimplemented" "expr")}
      {Lisp-Entry "word-constituent?" #f 6457 20 6457 37 ("memq?" "numeric?" "alphabetic?" "or" "c")}}})
"_literals"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "literals" "_literals.jazz"} 1237815288
    {Lisp-Entry "jazz.literals" #f 37 9 37 22 ("jazz")}})
"_performance"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "_performance.scm"} 1236813153
    {Lisp-Entry "test.performance" #f 0 8 0 24 ()}})
"_syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "_syntax.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax" #f 37 9 37 28 ("scheme")}})
"_test"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "_test.jazz"} 1237407418
    {Lisp-Entry "jazz.test" #f 37 9 37 18 ("'a" "5" "set-element!" "10" "axis-grow" "0" "Axis" "new" "axis" "let" "for-each" "3" "2" "Point" "b" "a" "debug" "jazz")
      {Lisp-Entry "Y" #f 285 7 285 8 ("X")
        {Lisp-Entry "f" #f 288 16 288 17 ("2")}}
      {Lisp-Entry "Y~Class207" #f 294 9 294 19 ()
        {Lisp-Entry "f" #f 297 13 297 14 ("2")}}
      {Lisp-Entry "Y" #f 301 9 301 10 ("X" "Y~Class207")}
      {Lisp-Entry "f" #f 398 13 398 14 ("=" "not" "if" "c")}
      {Lisp-Entry "f" #f 460 13 460 14 ("+" "0" "n" "iter" "let")}
      {Lisp-Entry "TC" #f 467 7 467 9 ("Object")
        {Lisp-Entry "row" #f 470 8 470 11 ("1")}
        {Lisp-Entry "col" #f 471 8 471 11 ("3")}
        {Lisp-Entry "f" #f 474 11 474 12 ("col" "0" "subseq!" "row" "when")}
        {Lisp-Entry "g" #f 479 11 479 12 ("col" "0" "subseq!")}}
      {Lisp-Entry "f" #f 484 13 484 14 ("g" "TC" "new" "f" "class-of" "list")}}})
"a"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "a.jazz"} 1236813153
    {Lisp-Entry "jazz.test.a" #f 0 9 0 20 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "a.scm"} 1236813153
    {Lisp-Entry "test.performance.a" #f 0 8 0 26 ("safe" "not" "standard-bindings" "block" "declare")
      {Lisp-Entry "f-separate" #f 8 9 8 19 ("1" "%%fx-" "g-separate" "0" "%%fx=" "if" "n" "s")}}})
"attributes"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "attributes.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.attributes" #f 37 9 37 39 ("scheme")
      {Lisp-Entry "attributes" #f 81 8 81 18 ("set-property" ",setter" ",getter" "public" "setter" "format" "string->symbol" "getter" "let*" "set!" "'set!" ",value" "set-value" "nextmethod" "else" "list" "case" ",property" "get-value" ",init" ",name" "slot" "eq?" "if" "unspecified" "not-found:" "initialize" "'initialize" "getf" "init" "rest" "specifier" "parse-specifier" "name" "lambda" "append" "symbol->keyword" "map" "node-properties" "method" "begin" "value" "generate-symbol" "property" "cdr" "properties" "car" "inherited" "let" "form")
        {Lisp-Entry "unspecified" #f 82 10 82 21 ("cons")}
        {Lisp-Entry "symbol->keyword" #f 85 11 85 26 ("symbol->string" "string->keyword" "symbol")}}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "autoload.jazz"} 1236813153
    {Lisp-Entry "jazz.test.autoload" #f 0 9 0 27 ("jazz")}})
"b"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "b.jazz"} 1236813153
    {Lisp-Entry "jazz.test.b" #f 0 9 0 20 ("jazz")
      {Lisp-Entry "Version" #f 6 7 6 14 ("Object")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "b.scm"} 1236813153
    {Lisp-Entry "test.performance.b" #f 0 8 0 26 ("safe" "not" "standard-bindings" "block" "declare")
      {Lisp-Entry "g-separate" #f 8 9 8 19 ("1" "%%fx-" "f-separate" "0" "%%fx=" "if" "n" "s")}}})
"bind"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind.scm"} 1228877389
    {Lisp-Entry "jazz.dialect.syntax.bind" #f 38 9 38 33 ("scheme")
      {Lisp-Entry "bind" #f 56 9 56 13 ("expand-bind-car" "begin" "tree-value" "lambda" "with-uniqueness" "sourcify-if" "cdr" "body" "cddr" "car" "tree" "source-code" "cadr" "desourcify" "bindings" "let" "form-src")}
      {Lisp-Entry "expand-bind-car" #f 68 9 68 24 ("expand-bind-car" ",car-symbol" "generate-symbol" "car-symbol" "pair?" "expand-bind-cdr" ",tree" ",specifier" ",car-binding" "if" "binding-specifier" "specifier" "symbol?" "cond" "cdr" "cdr-binding" "car" "car-binding" "let" "body" "tree" "bindings")}
      {Lisp-Entry "expand-bind-cdr" #f 85 9 85 24 ("expand-bind-car" ",cdr-symbol" "generate-symbol" "cdr-symbol" "pair?" ",@body" ",tree" "cdr" ",cdr-binding" "let" "symbol?" "null?" "cond" "body" "tree" "cdr-binding")}}})
"bind-keywords"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind-keywords.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.bind-keywords" #f 38 9 38 42 ("scheme")
      {Lisp-Entry "bind-keywords" #f 54 9 54 22 ("error" "not-null?" ",@body" "unbox-list" "symbol?" "proper-list" ",default" "symbol->string" "string->keyword" "find-keyword" ",specifier" ",variable" "caddr" "if" "default" "binding-specifier" "specifier" "variable" "binding" "lambda" "map" "let*" ",rest" "box-list" ",box" "sourcify-if" "last-tail" "oth" "new-queue" "bnd" "generate-symbol" "box" "cdr" "body" "cddr" "car" "rest" "cadr" "source-code" "bindings" "let" "form-src")}}})
"bind-optionals"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind-optionals.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.bind-optionals" #f 38 9 38 43 ("scheme")
      {Lisp-Entry "bind-optionals" #f 61 9 61 23 (",@body" "error" "not-null?" "proper-list" ",value" ",specifier" ",variable" "set!" ",prog" ",default" "null?" "value" "caddr" "if" "default" "binding-specifier" "specifier" "variable" "binding" "lambda" "map" "let*" ",rest" ",scan" "sourcify-if" "prog" "generate-symbol" "scan" "cdr" "body" "cddr" "car" "rest" "cadr" "source-code" "bindings" "let" "form-src")}}})
"boot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "kernel" "boot.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.kernel.boot" #f 38 9 38 33 ("scheme")
      {Lisp-Entry "format" #f 52 8 52 19 ()}
      {Lisp-Entry "last" #f 60 8 60 17 ()}
      {Lisp-Entry "butlast" #f 61 8 61 20 ()}
      {Lisp-Entry "last-tail" #f 62 8 62 22 ()}
      {Lisp-Entry "getprop" #f 63 8 63 20 ()}
      {Lisp-Entry "getf" #f 64 8 64 17 ()}
      {Lisp-Entry "->string" #f 72 8 72 21 ()}}})
"cffi"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "cffi.jazz"} 1236813153
    {Lisp-Entry "jazz.test.cffi" #f 37 9 37 23 ("#<<end-of-c-declare\nstatic int func2(mult* m, int n)\n{\n    return (*m)(n);\n}\nend-of-c-declare\n" "#<<end-of-c-declare\ntypedef int (mult)(int);\n\nstatic int multiply(int n)\n{\n    return n * n;\n}\n\nstatic mult* func1()\n{\n    return &multiply;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstruct S1_\n{\n    int x;\n    int y;\n};\n\ntypedef struct S1_ S1;\n\nstatic int struct1a(S1 s1)\n{\n    return s1.x + s1.y;\n}\n\n//static int struct1b(S1& s1)\n//{\n//    return s1.x + s1.y;\n//}\n\nstatic int struct1c(S1* s1)\n{\n    return s1->x + s1->y;\n}\n\nstatic void tst()\n{\n    S1 s;\n    \n    struct1a(s);\n    struct1c(&s);\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int scalar3(___SCMOBJ obj)\n{\n    return (int) obj;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int scalar2(int n)\n{\n    return n + n;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic void scalar1(int n)\n{\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nN = 2;\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int N;\nend-of-c-declare\n" "jazz")
      {Lisp-Entry "init1" #f 71 12 71 17 ("int" "c-function")}
      {Lisp-Entry "void" #f 80 8 80 12 ("void" "native")}
      {Lisp-Entry "bool" #f 81 8 81 12 ("bool" "native")}
      {Lisp-Entry "char" #f 82 8 82 12 ("char" "native")}
      {Lisp-Entry "wchar_t" #f 83 8 83 15 ("wchar_t" "native")}
      {Lisp-Entry "int" #f 84 8 84 11 ("int" "native")}
      {Lisp-Entry "double" #f 85 8 85 14 ("double" "native")}
      {Lisp-Entry "scheme-object" #f 86 8 86 21 ("scheme-object" "native")}
      {Lisp-Entry "object" #f 87 8 87 14 ("scheme-object")}
      {Lisp-Entry "scalar1" #f 98 12 98 19 ("void" "int" "c-function")}
      {Lisp-Entry "scalar2" #f 111 12 111 19 ("int" "c-function")}
      {Lisp-Entry "scalar3" #f 124 12 124 19 ("int" "object" "c-function")}
      {Lisp-Entry "ca" #f 186 12 186 14 ("2")}
      {Lisp-Entry "cb" #f 187 12 187 14 ("3")}
      {Lisp-Entry "e" #f 195 15 195 16 ("4" "ec" "2" "eb" "1" "ea")}
      {Lisp-Entry "S1" #f 243 8 243 10 ("struct")}
      {Lisp-Entry "make-S1" #f 246 12 246 19 ("S1" "c-function")}
      {Lisp-Entry "struct1a" #f 251 12 251 20 ("int" "S1" "c-function")}
      {Lisp-Entry "struct1c" #f 257 12 257 20 ("int" "S1" "pointer" "c-function")}
      {Lisp-Entry "cast-S2->S2*" #f 268 12 268 24 ("error" "S2*" "object" "c-function" "S2" "'S2" "foreign-tags" "car" "eq?" "if" "s2" "function")}
      {Lisp-Entry "mult*" #f 305 8 305 13 ("int" "function" "pointer")}
      {Lisp-Entry "func1" #f 324 12 324 17 ("mult*" "c-function")}}})
"classes"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "classes.scm"} 1235590818
    {Lisp-Entry "jazz.dialect.classes" #f 37 8 37 28 ()
      {Lisp-Entry "jazz.Definition-Declaration" #f 45 19 45 46 ("%%set-definition-declaration-value" "%%get-definition-declaration-value" "value" "%%get-definition-declaration-signature" "signature" "%%get-definition-declaration-expansion" "expansion" "jazz.allocate-definition-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Specialize" #f 56 19 56 34 ("jazz.allocate-specialize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Generic-Declaration" #f 65 19 65 43 ("%%set-generic-declaration-body" "%%get-generic-declaration-body" "body" "%%set-generic-declaration-signature" "%%get-generic-declaration-signature" "signature" "%%get-generic-declaration-dispatch-types" "dispatch-types" "jazz.allocate-generic-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Specific-Declaration" #f 76 19 76 44 ("%%get-specific-declaration-root?" "root?" "%%set-specific-declaration-body" "%%get-specific-declaration-body" "body" "%%get-specific-declaration-signature" "signature" "%%get-specific-declaration-generic" "generic" "jazz.allocate-specific-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Category-Declaration" #f 88 19 88 44 ("%%get-category-declaration-metaclass" "metaclass" "%%get-category-declaration-implementor" "implementor" "jazz.Object-Class" "body" "children" "children-lookup" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Namespace-Declaration")}
      {Lisp-Entry "jazz.Class-Declaration" #f 98 19 98 41 ("%%get-class-declaration-interfaces" "interfaces" "%%get-class-declaration-ascendant-base" "ascendant-base" "%%get-class-declaration-ascendant-relation" "ascendant-relation" "%%get-class-declaration-ascendant" "ascendant" "jazz.allocate-class-declaration" "jazz.Object-Class" "metaclass" "implementor" "body" "children" "children-lookup" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Category-Declaration")}
      {Lisp-Entry "jazz.Interface-Declaration" #f 110 19 110 45 ("%%get-interface-declaration-ascendants" "ascendants" "jazz.allocate-interface-declaration" "jazz.Object-Class" "metaclass" "implementor" "body" "children" "children-lookup" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Category-Declaration")}
      {Lisp-Entry "jazz.Field-Declaration" #f 119 19 119 41 ("jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Slot-Declaration" #f 128 19 128 40 ("%%get-slot-declaration-setter-name" "setter-name" "%%get-slot-declaration-getter-name" "getter-name" "%%set-slot-declaration-initialize" "%%get-slot-declaration-initialize" "initialize" "jazz.allocate-slot-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Field-Declaration")}
      {Lisp-Entry "jazz.Property-Declaration" #f 139 19 139 44 ("%%set-property-declaration-setter" "%%get-property-declaration-setter" "setter" "%%set-property-declaration-getter" "%%get-property-declaration-getter" "getter" "jazz.allocate-property-declaration" "jazz.Object-Class" "setter-name" "getter-name" "initialize" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Slot-Declaration")}
      {Lisp-Entry "jazz.Method-Declaration" #f 149 19 149 42 ("%%set-method-declaration-body" "%%get-method-declaration-body" "body" "%%set-method-declaration-signature" "%%get-method-declaration-signature" "signature" "%%get-method-declaration-synchronized" "synchronized" "%%get-method-declaration-remote" "remote" "%%get-method-declaration-expansion" "expansion" "%%get-method-declaration-abstraction" "abstraction" "%%get-method-declaration-propagation" "propagation" "%%get-method-declaration-root" "root" "jazz.allocate-method-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Field-Declaration")}
      {Lisp-Entry "jazz.With-Self" #f 165 19 165 33 ("%%get-with-self-body" "body" "jazz.allocate-with-self" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.With-Dynamic-Self" #f 174 19 174 41 ("%%get-with-dynamic-self-body" "body" "%%get-with-dynamic-self-code" "code" "jazz.allocate-with-dynamic-self" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Cast" #f 184 19 184 28 ("%%get-cast-expression" "expression" "jazz.allocate-cast" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Construct" #f 193 19 193 33 ("%%get-construct-values" "values" "%%get-construct-class" "class" "jazz.allocate-construct" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Slot-Reference" #f 203 19 203 38 ("%%get-slot-reference-context" "context" "%%get-slot-reference-name" "name" "%%get-slot-reference-declaration" "declaration" "jazz.allocate-slot-reference" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Slot-Assignment" #f 214 19 214 39 ("%%get-slot-assignment-value" "value" "%%get-slot-assignment-context" "context" "%%get-slot-assignment-name" "name" "%%get-slot-assignment-declaration" "declaration" "jazz.allocate-slot-assignment" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Dispatch" #f 226 19 226 32 ("%%get-dispatch-arguments" "arguments" "%%get-dispatch-name" "name" "jazz.allocate-dispatch" "jazz.Object-Class" "source" "type" "jazz.Expression")}}})
"common"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "common.scm"} 1236813153
    {Lisp-Entry "test.performance.common" #f 0 8 0 31 ("W" "Z" "X" "jazz.encapsulate-class" "separate" "run-time-bindings" "extended-bindings" "safe" "not" "standard-bindings" "block" "declare")
      {Lisp-Entry "ff" #f 11 9 11 11 ("1" "%%fx-" "ff" "%%pair?" "begin" "0" "%%fx>" "if" "n")}
      {Lisp-Entry "gg" #f 24 9 24 11 ("1" "%%fx-" "gg" "%%pair?" "begin" "0" "%%fx>" "if" "n")}
      {Lisp-Entry "f-module-block/standard/not-safe" #f 42 9 42 41 ("1" "%%fx-" "g-module-block/standard/not-safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/standard/not-safe" #f 48 9 48 41 ("1" "%%fx-" "f-module-block/standard/not-safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-block/runtime/safe" #f 66 9 66 36 ("1" "%%fx-" "g-module-block/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/runtime/safe" #f 72 9 72 36 ("1" "%%fx-" "f-module-block/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-separate/runtime/safe" #f 90 9 90 39 ("1" "%%fx-" "g-module-separate/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-separate/runtime/safe" #f 96 9 96 39 ("1" "%%fx-" "f-module-separate/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-block/runtime/notsafe" #f 114 9 114 39 ("1" "%%fx-" "g-module-block/runtime/notsafe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/runtime/notsafe" #f 120 9 120 39 ("1" "%%fx-" "f-module-block/runtime/notsafe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module" #f 137 9 137 17 ("1" "%%fx-" "g-module" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module" #f 143 9 143 17 ("1" "%%fx-" "f-module" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "X" #f 160 19 160 20 ("allocate-x" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "X" #f 163 27 163 28 ()}
      {Lisp-Entry "new-x" #f 168 9 168 14 ("X" "allocate-x")}
      {Lisp-Entry "f-generic" ("X") 172 22 172 31 ("n")}
      {Lisp-Entry "f-generic" ("X") 174 23 174 32 ("1" "%%fx-" "x" "g-generic" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "g-generic" ("X") 180 22 180 31 ("n")}
      {Lisp-Entry "g-generic" ("X") 182 23 182 32 ("1" "%%fx-" "x" "f-generic" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "Z" #f 193 27 193 28 ()}
      {Lisp-Entry "f-vtable" ("Z") 196 30 196 38 ("n")}
      {Lisp-Entry "g-vtable" ("Z") 197 30 197 38 ("n")}
      {Lisp-Entry "new-z" #f 200 9 200 14 ("Z" "allocate-z")}
      {Lisp-Entry "f-vtable" ("Z") 204 21 204 29 ("1" "%%fx-" "z" "g-vtable" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "g-vtable" ("Z") 210 21 210 29 ("1" "%%fx-" "z" "f-vtable" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "W" #f 219 27 219 28 ()}
      {Lisp-Entry "f-vtable" ("W") 222 21 222 29 ("n")}
      {Lisp-Entry "h" ("W") 226 30 226 31 ()}
      {Lisp-Entry "h" ("W") 229 21 229 22 ()}}})
"constructors"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "literals" "constructors.jazz"} 1237815288
    {Lisp-Entry "jazz.literals.constructors" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "construct-point" #f 63 13 63 28 ("Point" "new" "v" "h")}
      {Lisp-Entry "construct-dimension" #f 72 13 72 32 ("Dimension" "new" "height" "width")}
      {Lisp-Entry "construct-cell" #f 81 13 81 27 ("Cell" "new" "col" "row")}
      {Lisp-Entry "construct-rect" #f 90 13 90 27 ("Rect" "new" "bottom" "right" "top" "left")}
      {Lisp-Entry "construct-range" #f 99 13 99 28 ("Range" "new" "end" "start")}
      {Lisp-Entry "construct-action" #f 108 13 108 29 ("Action" "new" "properties" "action-name" "action-context")}
      {Lisp-Entry "construct-exception-detail" #f 117 13 117 39 ("Exception-Detail" "new" "children" "location" "title" "icon")}
      {Lisp-Entry "construct-walk-location" #f 126 13 126 36 ("Walk-Location" "new" "locat" "declaration-locator" "module-locator")}
      {Lisp-Entry "construct-box" #f 135 13 135 26 ("car" "Box" "new" "null?" "if" "rest")}
      {Lisp-Entry "construct-shortcut" #f 146 13 146 31 ("last" "butlast" "Shortcut" "new" "rest")}
      {Lisp-Entry "construct-locales" #f 155 13 155 30 ("Locales" "new" "apply" "rest")}
      {Lisp-Entry "construct-color" #f 164 13 164 28 ("Color" "new" "apply" "alpha:" "getf" "registered-color" "if" "others" "name" "bind-keywords" "rest")}
      {Lisp-Entry "construct-font" #f 176 13 176 27 ("Font" "new" "apply" "registered-font" "if" "others" "name" "bind-keywords" "rest")}
      {Lisp-Entry "construct-file" #f 188 13 188 27 ("File" "new" "rest")}
      {Lisp-Entry "construct-directory" #f 197 13 197 32 ("Directory" "new" "rest")}
      {Lisp-Entry "construct-directory-group" #f 206 13 206 38 ("Directory-Group" "new" "rest")}
      {Lisp-Entry "construct-host" #f 215 13 215 27 ("Host" "new" "apply" "rest")}
      {Lisp-Entry "construct-ior" #f 224 13 224 26 ("IOR" "new" "values" "reference" "remotable" "port" "host")}
      {Lisp-Entry "construct-guid" #f 235 13 235 27 ("GUID" "new" "rest")}
      {Lisp-Entry "construct-format" #f 244 13 244 29 ("Format" "new" "apply" "rest")}
      {Lisp-Entry "construct-text-style" #f 253 13 253 33 ("Text-Style" "new" "apply" "rest")}
      {Lisp-Entry "construct-hyperlink-style" #f 262 13 262 38 ("Hyperlink-Style" "new" "apply" "rest")}
      {Lisp-Entry "construct-text" #f 271 13 271 27 ("Text" "new" "apply" "rest")}
      {Lisp-Entry "construct-formatted-text" #f 280 13 280 37 ("Formatted-Text" "new" "apply" "rest")}
      {Lisp-Entry "construct-bitmap-resource" #f 289 13 289 38 ("Bitmap-Resource" "new" "name")}
      {Lisp-Entry "construct-icon-resource" #f 298 13 298 36 ("Icon-Resource" "new" "name")}
      {Lisp-Entry "construct-cursor-resource" #f 307 13 307 38 ("Cursor-Resource" "new" "name")}
      {Lisp-Entry "construct-event" #f 316 13 316 28 ("Event" "new" "properties" "kind")}
      {Lisp-Entry "construct-event-handler" #f 325 13 325 36 ("properties:" "method-name:" "target-name:" "Event-Handler" "new" "properties" "method-name" "target-name")}
      {Lisp-Entry "construct-selection-handler" #f 334 13 334 40 ("properties:" "force?:" "method-name:" "target-name:" "Selection-Handler" "new" "properties" "force?" "method-name" "target-name")}
      {Lisp-Entry "construct-version" #f 343 13 343 30 ("Version" "new" "stage" "0" "revision" "minor" "major")}
      {Lisp-Entry "construct-c-file-entry" #f 352 13 352 35 ("seconds->time" "C-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-c-category-entry" #f 356 13 356 39 ("C-Category-Entry" "new" "name")}
      {Lisp-Entry "construct-c-define-entry" #f 360 13 360 37 ("C-Define-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-c-include-entry" #f 364 13 364 38 ("C-Include-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-c-export-entry" #f 368 13 368 37 ("C-Export-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-css-file-entry" #f 377 13 377 37 ("seconds->time" "CSS-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-css-entry" #f 381 13 381 32 ("CSS-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-java-file-entry" #f 390 13 390 38 ("seconds->time" "Java-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-javascript-file-entry" #f 399 13 399 44 ("seconds->time" "JavaScript-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-javascript-variable-entry" #f 403 13 403 48 ("JavaScript-Variable-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-javascript-function-entry" #f 407 13 407 48 ("JavaScript-Function-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-lua-file-entry" #f 416 13 416 37 ("seconds->time" "Lua-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-lua-function-entry" #f 420 13 420 41 ("Lua-Function-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-properties-file-entry" #f 429 13 429 44 ("seconds->time" "Properties-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-properties-entry" #f 433 13 433 39 ("Properties-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-python-file-entry" #f 442 13 442 40 ("seconds->time" "Python-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-python-class-entry" #f 446 13 446 41 ("Python-Class-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-python-def-entry" #f 450 13 450 39 ("Python-Def-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-lisp-file-entry" #f 459 13 459 38 ("seconds->time" "Lisp-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-lisp-entry" #f 463 13 463 33 ("Lisp-Entry" "new" "definitions" "references" "end-column" "end-line" "column" "line" "signature" "name")}}})
"continuation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "continuation.scm"} 1228854445
    {Lisp-Entry "jazz.dialect.core.continuation" #f 37 8 37 38 ()
      {Lisp-Entry "jazz.continuation?" #f 42 13 42 31 ("%%continuation?" "obj")}
      {Lisp-Entry "jazz.continuation-capture" #f 46 13 46 38 ("%%continuation-capture" "proc")}
      {Lisp-Entry "jazz.continuation-graft" #f 50 13 50 36 ("%%continuation-graft" "proc" "cont")}
      {Lisp-Entry "jazz.continuation-return" #f 54 12 54 36 ("continuation-return")}}})
"debug"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "debug.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.debug" #f 37 8 37 31 ()
      {Lisp-Entry "inspect" #f 41 9 41 16 ("jazz.serial->object" "integer?" "if" "jazz.inspect-object" "obj")}
      {Lisp-Entry "resume" #f 46 9 46 15 ("jazz.system.process.Process.Process.resume-loop" "'jazz.system.process.Process.Process.resume-loop" "resume-loop" "jazz.dialect.language.get-process" "'jazz.dialect.language.get-process" "jazz.global-value" "get-process" "let")}}})
"declares"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "declares.scm"} 1236813153
    {Lisp-Entry "f-run-time-bindings/safe" #f 3 9 3 33 ("car" "x")}
    {Lisp-Entry "f-not-run-time-bindings/safe" #f 10 9 10 37 ("car" "x")}
    {Lisp-Entry "f-run-time-bindings/not-safe" #f 17 9 17 37 ("car" "x")}
    {Lisp-Entry "f-not-run-time-bindings/not-safe" #f 24 9 24 41 ("car" "x")}
    {Lisp-Entry "f-standard-bindings/not-run-time-bindings/not-safe" #f 32 9 32 59 ("##pair?" "car" "x")}
    {Lisp-Entry "f-standard-bindings/run-time-bindings/not-safe" #f 41 9 41 55 ("##pair?" "car" "x")}
    {Lisp-Entry "f-standard-bindings/extended-bindings/not-safe" #f 50 9 50 55 ("##pair?" "car" "x")}
    {Lisp-Entry "f-block" #f 57 9 57 16 ("g-block")}
    {Lisp-Entry "g-block" #f 60 9 60 16 ("f-block")}
    {Lisp-Entry "f-separate" #f 66 9 66 19 ("g-separate")}
    {Lisp-Entry "g-separate" #f 69 9 69 19 ("f-separate")}})
"development"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "development.scm"} 1227528863
    {Lisp-Entry "jazz.dialect.core.development" #f 37 8 37 37 ()
      {Lisp-Entry "jazz.define-global" #f 45 20 45 38 ("set!" ",value" ",setter" ",getter" ",name" "define" "begin" "jazz.generate-symbol" "value" "setter" "symbol->string" "string-append" "string->symbol" "getter" "let" "name")}
      {Lisp-Entry "?" #f 63 20 63 21 ()}
      {Lisp-Entry "%" #f 64 20 64 21 ()}
      {Lisp-Entry "?a" #f 67 20 67 22 ()}
      {Lisp-Entry "?b" #f 68 20 68 22 ()}
      {Lisp-Entry "?c" #f 69 20 69 22 ()}
      {Lisp-Entry "?d" #f 70 20 70 22 ()}
      {Lisp-Entry "?e" #f 71 20 71 22 ()}
      {Lisp-Entry "?f" #f 72 20 72 22 ()}
      {Lisp-Entry "?g" #f 73 20 73 22 ()}
      {Lisp-Entry "?h" #f 74 20 74 22 ()}
      {Lisp-Entry "?i" #f 75 20 75 22 ()}
      {Lisp-Entry "?j" #f 76 20 76 22 ()}
      {Lisp-Entry "?k" #f 77 20 77 22 ()}
      {Lisp-Entry "?l" #f 78 20 78 22 ()}
      {Lisp-Entry "?m" #f 79 20 79 22 ()}
      {Lisp-Entry "?n" #f 80 20 80 22 ()}
      {Lisp-Entry "?o" #f 81 20 81 22 ()}
      {Lisp-Entry "?p" #f 82 20 82 22 ()}
      {Lisp-Entry "?q" #f 83 20 83 22 ()}
      {Lisp-Entry "?r" #f 84 20 84 22 ()}
      {Lisp-Entry "?s" #f 85 20 85 22 ()}
      {Lisp-Entry "?t" #f 86 20 86 22 ()}
      {Lisp-Entry "?u" #f 87 20 87 22 ()}
      {Lisp-Entry "?v" #f 88 20 88 22 ()}
      {Lisp-Entry "?w" #f 89 20 89 22 ()}
      {Lisp-Entry "?x" #f 90 20 90 22 ()}
      {Lisp-Entry "?y" #f 91 20 91 22 ()}
      {Lisp-Entry "?z" #f 92 20 92 22 ()}
      {Lisp-Entry "%a" #f 95 20 95 22 ()}
      {Lisp-Entry "%b" #f 96 20 96 22 ()}
      {Lisp-Entry "%c" #f 97 20 97 22 ()}
      {Lisp-Entry "%d" #f 98 20 98 22 ()}
      {Lisp-Entry "%e" #f 99 20 99 22 ()}
      {Lisp-Entry "%f" #f 100 20 100 22 ()}
      {Lisp-Entry "%g" #f 101 20 101 22 ()}
      {Lisp-Entry "%h" #f 102 20 102 22 ()}
      {Lisp-Entry "%i" #f 103 20 103 22 ()}
      {Lisp-Entry "%j" #f 104 20 104 22 ()}
      {Lisp-Entry "%k" #f 105 20 105 22 ()}
      {Lisp-Entry "%l" #f 106 20 106 22 ()}
      {Lisp-Entry "%m" #f 107 20 107 22 ()}
      {Lisp-Entry "%n" #f 108 20 108 22 ()}
      {Lisp-Entry "%o" #f 109 20 109 22 ()}
      {Lisp-Entry "%p" #f 110 20 110 22 ()}
      {Lisp-Entry "%q" #f 111 20 111 22 ()}
      {Lisp-Entry "%r" #f 112 20 112 22 ()}
      {Lisp-Entry "%s" #f 113 20 113 22 ()}
      {Lisp-Entry "%t" #f 114 20 114 22 ()}
      {Lisp-Entry "%u" #f 115 20 115 22 ()}
      {Lisp-Entry "%v" #f 116 20 116 22 ()}
      {Lisp-Entry "%w" #f 117 20 117 22 ()}
      {Lisp-Entry "%x" #f 118 20 118 22 ()}
      {Lisp-Entry "%y" #f 119 20 119 22 ()}
      {Lisp-Entry "%z" #f 120 20 120 22 ()}}})
"dialect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "dialect.scm"} 1236952892
    {Lisp-Entry "jazz.dialect.dialect" #f 37 8 37 28 ("jazz.dialect" "'jazz.dialect" "jazz" "'jazz" "jazz.register-dialect" "jazz.new-jazz-dialect" "dialect" "jazz.Jazz-Walker" "jazz.Dispatch" "jazz.Construct" "jazz.Cast" "jazz.With-Dynamic-Self" "jazz.With-Self" "jazz.new" "jazz.new2" "2" "jazz.new1" "1" "jazz.codes-forms" "jazz.new0" "0" "%%length" "jazz.new-code" "values-codes" "jazz.Autoload-Declaration" "or" "%%get-reference-binding" "binding" "jazz.Reference" "class-expression" "let" "jazz.dialect.kernel.new" "'jazz.dialect.kernel.new" "%%eq?" "if" "declaration" "arguments-codes" "operator" "jazz.emit-primitive-new-call" "else" "%%car" "jazz.emit-specialized-class-of" "%%cdr" "%%null?" "%%pair?" "%%assert" "jazz.dialect.kernel.class-of" "case" "environment" "arguments" "locator" "jazz.emit-specialized-locator" "jazz.Jazz-Dialect" "jazz.Method-Declaration" "jazz.Property-Declaration" "jazz.Slot-Declaration" "jazz.Field-Declaration" "jazz.Interface-Declaration" "%%get-class-declaration-ascendant" "%%not" "%%class-is?" "and" "type" "lambda" "jazz.object-declaration?" "set!" "jazz.Class-Declaration" "jazz.Category-Declaration" "jazz.Specific-Declaration" "jazz.Generic-Declaration" "jazz.Specialize" "jazz.Definition-Declaration" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Definition-Declaration" #f 45 27 45 54 ()}
      {Lisp-Entry "jazz.new-definition-declaration" #f 48 9 48 40 ("jazz.setup-declaration" "jazz.Definition-Declaration" "jazz.allocate-definition-declaration" "new-declaration" "let" "signature" "expansion" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Definition-Declaration") 54 21 54 52 ("jazz.validate-arguments" "if" "declaration" "%%get-definition-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Definition-Declaration") 60 21 60 51 ("jazz.error" "jazz.call-return-type" "jazz.sourcified-form" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "argument" "parameter" "map" "jazz.new-code" "jazz.emit-expression" "body-code" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-inlined-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "jazz.untyped-inline-definition?" "jazz.inline-definitions?" "or" "inline" "'inline" "%%get-definition-declaration-expansion" "%%eq?" "and" "jazz.Lambda" "%%class-is?" "if" "declaration" "%%get-definition-declaration-value" "value" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.untyped-inline-definition?" #f 92 9 92 40 ("%%get-lambda-signature" "%%get-signature-positional" "%%get-lexical-binding-type" "%%not" "parameter" "lambda" "jazz.every?" "value")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Definition-Declaration") 98 21 98 42 ("%%get-declaration-source" "%%get-lexical-binding-type" "jazz.emit-expression" "jazz.emit-type-cast" ",locator" "define" "jazz.sourcify-if" "%%get-definition-declaration-value" "value" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Definition-Declaration") 107 21 107 48 ("jazz.Any" "%%get-lexical-binding-type" "or" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Definition-Declaration") 115 21 115 58 ("%%get-lexical-binding-name" "jazz.walk-error" "%%get-declaration-toplevel" "%%neq?" "%%when" "declaration" "nextmethod" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Definition-Declaration") 121 21 121 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Definition-Declaration") 125 21 125 49 ("jazz.Any" "%%get-lexical-binding-type" "jazz.emit-expression" "jazz.emit-type-cast" ",locator" "set!" "jazz.new-code" "declaration" "%%get-declaration-locator" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Definition-Declaration") 133 21 133 42 ("%%get-definition-declaration-value" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Specialize" #f 147 27 147 42 ()}
      {Lisp-Entry "jazz.new-specialize" #f 150 9 150 28 ("jazz.Specialize" "jazz.allocate-specialize")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Specialize") 154 21 154 41 ("jazz.Any" "begin" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.Generic-Declaration" #f 169 27 169 51 ()}
      {Lisp-Entry "jazz.new-generic-declaration" #f 172 9 172 37 ("jazz.setup-declaration" "jazz.Generic-Declaration" "jazz.allocate-generic-declaration" "new-declaration" "let" "signature" "dispatch-types" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Generic-Declaration") 178 21 178 52 ("%%get-generic-declaration-signature" "declaration" "jazz.validate-arguments" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Generic-Declaration") 182 21 182 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "%%cons" "jazz.define-generic" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-generic-declaration-body" "body" "%%get-generic-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "generic-locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Generic-Declaration") 195 21 195 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Specific-Declaration" #f 210 27 210 52 ()}
      {Lisp-Entry "jazz.new-specific-declaration" #f 213 9 213 38 ("jazz.setup-declaration" "jazz.Specific-Declaration" "jazz.allocate-specific-declaration" "new-declaration" "let" "root?" "signature" "generic" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Specific-Declaration") 219 21 219 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" ",modifier" "jazz.emit-signature" "%%cons" "jazz.define-specific" "jazz.sourcify-if" "child" "'child" "root" "'root" "%%get-specific-declaration-root?" "if" "modifier" "cons" "augmented-environment" "let" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-specific-declaration-body" "body" "%%get-specific-declaration-signature" "signature" "jazz.generic-object-locator" "generic-object-locator" "%%get-declaration-locator" "generic-locator" "declaration" "%%get-specific-declaration-generic" "generic-declaration" "let*" "environment")}
      {Lisp-Entry "jazz.Category-Declaration" #f 243 27 243 52 ()}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Category-Declaration") 246 21 246 48 ("jazz.Category-Declaration" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Category-Declaration") 253 21 253 44 ("category-declaration" "%%get-access-lookup" "%%table-ref" "jazz.private-access" "jazz.public-access" "if" "access" "let" "external?" "symbol")}
      {Lisp-Entry "jazz.Class-Declaration" #f 268 27 268 49 ()}
      {Lisp-Entry "jazz.new-class-declaration" #f 271 9 271 35 ("jazz.setup-declaration" "eq?" "test:" "%%make-table" "jazz.protected-access" "jazz.make-access-lookups" "jazz.Class-Declaration" "jazz.allocate-class-declaration" "new-declaration" "let" "interfaces" "ascendant-base" "ascendant-relation" "ascendant" "metaclass" "implementor" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.setup-class-lookups" #f 277 9 277 33 ("jazz.protected-access" "%%get-namespace-declaration-lookups" "%%vector-set!" "interface" "lambda" "for-each" "jazz.public-access" "%%table-merge!" "if" "jazz.private-access" "%%get-access-lookup" "private" "%%get-class-declaration-interfaces" "map" "interfaces" "%%get-class-declaration-ascendant" "resolve-declaration" "ascendant" "let" "class-declaration")
        {Lisp-Entry "resolve-declaration" #f 278 11 278 30 ("jazz.resolve-declaration" "if" "decl")}}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Class-Declaration") 315 21 315 48 ("jazz.Class-Declaration" "%%get-category-declaration-metaclass" "or" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Class-Declaration") 323 21 323 37 ("%%get-class-declaration-ascendant" "%%eq?" "jazz.resolve-declaration" "target-declaration" "%%not" "target" "iter" "let" "jazz.Class-Declaration" "%%class-is?" "and" "declaration" "jazz.object-declaration?" "if" "subtype")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Class-Declaration") 336 21 336 42 ("%%get-declaration-source" "jazz.emit-namespace-statements" ",@interface-accesses" ",metaclass-access" "jazz.new-class" "jazz.global-value" "',locator" "jazz.global-variable?" "lambda" "map" "interface-accesses" ",ascendant-access" "%%get-object-class" "jazz.Object-Class" "'jazz.Object-Class" "metaclass-access" "jazz.emit-ascendant-access" "%%get-category-declaration-metaclass" "metaclass-declaration" "jazz.remove-slots" "%%list" "%%get-class-level" ",level-locator" "%%get-category-name" ",locator" "define" "jazz.emit-binding-reference" "jazz.sourcified-form" "%%not" "ascendant-access" "jazz.validate-core-class/class" "jazz.get-core-class" "core-class" "jazz.core-class?" "if" "begin" "jazz.sourcify-if" "level" "'level" "jazz.compose-helper" "level-locator" "%%get-namespace-declaration-body" "body" "%%get-class-declaration-interfaces" "interface-declarations" "%%get-class-declaration-ascendant" "ascendant-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let" "environment")}
      {Lisp-Entry "jazz.emit-ascendant-access" #f 368 9 368 35 ("%%get-object-class" "else" "jazz.emit-binding-reference" "jazz.sourcified-form" "%%not" "cond" "%%get-class-declaration-ascendant-base" "ascendant-base" "%%get-class-declaration-ascendant-relation" "ascendant-relation" "%%get-class-declaration-ascendant" "ascendant" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.find-class-declaration" #f 383 9 383 36 ("%%get-declaration-parent" "else" "jazz.Class-Declaration" "%%class-is?" "jazz.error" "%%not" "cond" "decl" "iter" "let" "declaration")}
      {Lisp-Entry "jazz.validate-core-class/class" #f 404 9 404 39 ("jazz.validate-core-class/slots" "jazz.validate-core-class/category" "declaration" "core-class")}
      {Lisp-Entry "jazz.validate-core-class/slots" #f 409 9 409 39 ("jazz.error" "%%equal?" "%%not" "%%when" "%%get-namespace-declaration-children" "jazz.Slot-Declaration" "jazz.collect-type" "%%get-lexical-binding-name" "decl" "declaration-slot-names" "%%get-class-slots" "%%get-field-name" "%%symbol?" "if" "name/slot" "lambda" "map" "core-class-slot-names" "let" "declaration" "core-class")}
      {Lisp-Entry "jazz.validate-core-class/category" #f 416 9 416 42 ("jazz.validate-core-class/interfaces" "jazz.validate-core-class/ascendant" "declaration" "core-class")}
      {Lisp-Entry "jazz.validate-core-class/ascendant" #f 421 9 421 43 ("%%get-lexical-binding-name" "jazz.error" "%%eq?" "%%when" "%%get-declaration-locator" "declaration-ascendant-name" "%%get-class-declaration-ascendant" "declaration-ascendant" "%%get-category-name" "jazz.identifier-name" "%%not" "if" "core-class-ascendant-name" "%%get-class-ascendant" "core-class-ascendant" "let*" "declaration" "core-class")}
      {Lisp-Entry "jazz.validate-core-class/interfaces" #f 430 9 430 44 ("%%get-lexical-binding-name" "jazz.error" "%%null?" "%%not" "%%when" "%%get-class-declaration-interfaces" "declaration-interfaces" "let" "declaration" "core-class")}
      {Lisp-Entry "jazz.Interface-Declaration" #f 441 27 441 53 ()}
      {Lisp-Entry "jazz.new-interface-declaration" #f 444 9 444 39 ("jazz.setup-declaration" "eq?" "test:" "%%make-table" "jazz.protected-access" "jazz.make-access-lookups" "jazz.Interface-Declaration" "jazz.allocate-interface-declaration" "new-declaration" "let" "ascendants" "metaclass" "implementor" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.setup-interface-lookups" #f 450 9 450 37 ("jazz.protected-access" "%%get-namespace-declaration-lookups" "%%vector-set!" "jazz.public-access" "%%table-merge!" "interface" "lambda" "for-each" "jazz.private-access" "%%get-access-lookup" "private" "%%get-interface-declaration-ascendants" "resolve-declaration" "map" "ascendants" "let" "interface-declaration")
        {Lisp-Entry "resolve-declaration" #f 451 11 451 30 ("jazz.resolve-declaration" "if" "decl")}}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Interface-Declaration") 481 21 481 37 ("subtype")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Interface-Declaration") 486 21 486 42 ("%%get-declaration-source" "jazz.emit-namespace-statements" "%%get-interface-rank" ",rank-locator" ",@ascendant-accesses" "%%list" "',locator" ",metaclass-access" "jazz.new-interface" ",locator" "define" "begin" "jazz.sourcify-if" "%%get-namespace-declaration-body" "body" "lambda" "map" "ascendant-accesses" "jazz.emit-binding-reference" "jazz.sourcified-form" "jazz.Interface" "'jazz.Interface" "%%not" "if" "metaclass-access" "%%get-category-declaration-metaclass" "metaclass-declaration" "%%get-interface-declaration-ascendants" "ascendant-declarations" "rank" "'rank" "jazz.compose-helper" "rank-locator" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.Field-Declaration" #f 513 27 513 49 ()}
      {Lisp-Entry "jazz.Slot-Declaration" #f 524 27 524 48 ()}
      {Lisp-Entry "jazz.new-slot-declaration" #f 527 9 527 34 ("jazz.setup-declaration" "jazz.Slot-Declaration" "jazz.allocate-slot-declaration" "new-declaration" "let" "setter-name" "getter-name" "initialize" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Slot-Declaration") 533 21 533 52 ("arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Slot-Declaration") 537 21 537 42 ("%%get-declaration-source" "jazz.declaration-result" "%%get-slot-offset" ",offset-locator" ",name" "',name" ",class-locator" "jazz.add-slot" ",slot-locator" "jazz.emit-expression" "jazz.sourcified-form" "self" ",initialize-locator" "define" "begin" "jazz.sourcify-if" "offset" "'offset" "offset-locator" "slot" "'slot" "slot-locator" "'initialize" "jazz.compose-helper" "initialize-locator" "%%get-slot-declaration-initialize" "initialize" "class-locator" "%%get-declaration-parent" "class-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Slot-Declaration") 558 21 558 48 ("jazz.error" "jazz.find-annotated-type" ",offset-locator" "jazz.sourcified-form" "%%object-ref" "jazz.new-code" "offset" "'offset" "declaration" "%%get-declaration-locator" "jazz.compose-helper" "offset-locator" "if" "jazz.*self*" "self" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Slot-Declaration") 569 21 569 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Slot-Declaration") 573 21 573 49 ("jazz.error" "jazz.Any" "jazz.emit-expression" ",offset-locator" "jazz.sourcified-form" "%%object-set!" "jazz.new-code" "offset" "'offset" "declaration" "%%get-declaration-locator" "jazz.compose-helper" "offset-locator" "if" "jazz.*self*" "self" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Property-Declaration" #f 592 27 592 52 ()}
      {Lisp-Entry "jazz.new-property-declaration" #f 595 9 595 38 ("jazz.setup-declaration" "jazz.Property-Declaration" "jazz.allocate-property-declaration" "new-declaration" "let" "setter-name" "getter-name" "initialize" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Property-Declaration") 601 21 601 42 ("%%get-declaration-source" "jazz.declaration-result" "%%get-slot-offset" ",offset-locator" ",name" "',name" ",class-locator" "jazz.add-property" ",slot-locator" "jazz.emit-expression" "jazz.sourcified-form" "self" ",initialize-locator" "define" "begin" "jazz.sourcify-if" "%%get-property-declaration-setter" "setter" "%%get-property-declaration-getter" "getter" "offset" "'offset" "offset-locator" "slot" "'slot" "slot-locator" "'initialize" "jazz.compose-helper" "initialize-locator" "%%get-slot-declaration-initialize" "initialize" "class-locator" "%%get-declaration-parent" "class-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.Method-Declaration" #f 634 27 634 50 ()}
      {Lisp-Entry "jazz.new-method-declaration" #f 637 9 637 36 ("jazz.setup-declaration" "jazz.Method-Declaration" "jazz.allocate-method-declaration" "new-declaration" "let" "signature" "synchronized" "remote" "expansion" "abstraction" "propagation" "root" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.method-dispatch-info" #f 643 9 643 34 ("error" "else" "interface" "'interface" "jazz.Interface-Declaration" "class" "'class" "jazz.Class-Declaration" "%%class-is?" "cond" "%%get-declaration-parent" "category-declaration" "method-declaration" "root-method-declaration" "values" "inherited" "'inherited" "final" "'final" "%%eq?" "or" "%%not" "and" "if" "%%get-method-declaration-propagation" "propagation" "%%get-method-declaration-root" "root" "let" "declaration")}
      {Lisp-Entry "jazz.native-category?" #f 659 9 659 30 ("primitive" "'primitive" "%%get-category-declaration-implementor" "%%neq?" "category-declaration")}
      {Lisp-Entry "jazz.emit-method-dispatch" #f 663 9 663 34 ("%%get-lexical-binding-type" "jazz.call-return-type" "%%interface-dispatch" ",interface-rank-locator" "%%interface-native-dispatch" "interface-rank-locator" "interface" "%%class-dispatch" ",method-rank-locator" ",class-level-locator" "%%class-native-dispatch" "jazz.native-category?" "if" "rank" "'rank" "method-rank-locator" "level" "'level" "jazz.compose-helper" "class-level-locator" "class" ",implementation-locator" "jazz.sourcified-form" "%%final-dispatch" "%%get-declaration-locator" "implementation-locator" "final" "case" "jazz.new-code" "%%get-declaration-parent" "category-declaration" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "%%get-lexical-binding-name" "name" "let" "declaration" "object")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Method-Declaration") 688 21 688 48 ("%%get-declaration-locator" "%%get-lexical-binding-name" "jazz.error" "%%get-code-type" "jazz.sourcified-form" "apply" "rest" "lambda" "jazz.new-code" "declaration" "jazz.emit-method-dispatch" "dispatch-code" "if" "jazz.*self*" "self" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Method-Declaration") 700 21 700 52 ("jazz.validate-arguments" "if" "declaration" "%%get-method-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Method-Declaration") 706 21 706 51 ("else" "jazz.error" "jazz.call-return-type" "jazz.sourcified-form" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "argument" "parameter" "map" "jazz.new-code" "jazz.emit-expression" "body-code" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "let" "final" "case" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "inline" "'inline" "declaration" "%%get-method-declaration-expansion" "%%eq?" "if" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Method-Declaration") 736 21 736 43 ("%%get-declaration-locator" "%%get-lexical-binding-name" "jazz.error" "%%get-code-type" ",@arguments" "jazz.sourcified-form" "jazz.new-code" "jazz.emit-method-dispatch" "dispatch-code" "jazz.codes-forms" "declaration" "%%get-lexical-binding-type" "type" "if" "jazz.*self*" "self" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Method-Declaration") 751 21 751 42 ("%%get-declaration-source" "',class-locator" "jazz.call-into-abstract" "rest" ",method-rank-locator" "abstract" "'abstract" "%%eq?" "if" "jazz.declaration-result" ",name" "',name" ",class-locator" ",method-call" "jazz.emit-expression" "jazz.sourcified-form" ",method-node-locator" "%%get-method-node-next-implementation" "nextmethod" "jazz.emit-signature-casts" "jazz.emit-signature" "self" ",method-locator" "define" "begin" "jazz.generate-symbol" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "jazz.Interface-Declaration" "jazz.add-virtual-method" "'jazz.add-virtual-method" "chained" "virtual" "jazz.add-final-method" "'jazz.add-final-method" "inherited" "final" "case" "jazz.Class-Declaration" "%%class-is?" "jazz.add-method-node" "'jazz.add-method-node" "cond" "method-call" "node" "'node" "method-node-locator" "rank" "'rank" "jazz.compose-helper" "method-rank-locator" "method-locator" "%%get-declaration-locator" "class-locator" "and" "root-category-declaration" "%%get-method-declaration-root" "root-method-declaration" "%%get-declaration-parent" "category-declaration" "let*" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "%%get-method-declaration-abstraction" "abstraction" "%%get-method-declaration-propagation" "propagation" "declaration" "%%get-lexical-binding-name" "name" "let" "environment")}
      {Lisp-Entry "jazz.Jazz-Dialect" #f 815 19 815 36 ("jazz.allocate-jazz-dialect" "jazz.Object-Class" "jazz.Dialect")}
      {Lisp-Entry "jazz.Jazz-Dialect" #f 819 27 819 44 ()}
      {Lisp-Entry "jazz.new-jazz-dialect" #f 822 9 822 30 ("jazz.Jazz-Dialect" "jazz.allocate-jazz-dialect")}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Jazz-Dialect") 826 21 826 38 ("'jazz")}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Jazz-Dialect") 830 21 830 40 ("jazz.new-jazz-walker")}
      {Lisp-Entry "jazz.Jazz-Walker" #f 842 19 842 35 ("jazz.allocate-jazz-walker" "jazz.Object-Class" "errors" "warnings" "jazz.Scheme-Walker")}
      {Lisp-Entry "jazz.Jazz-Walker" #f 846 27 846 43 ()}
      {Lisp-Entry "jazz.new-jazz-walker" #f 849 9 849 29 ("jazz.Jazz-Walker" "jazz.allocate-jazz-walker")}
      {Lisp-Entry "jazz.jazz-bindings" #f 858 9 858 27 ("jazz.expand-form" "form" "'form" "jazz.expand-com-external" "com-external" "'com-external" "jazz.expand-c-external-so" "c-external-so" "'c-external-so" "jazz.expand-c-external" "c-external" "'c-external" "jazz.expand-c-union" "c-union" "'c-union" "jazz.expand-c-structure" "c-structure" "'c-structure" "jazz.expand-assertion" "assertion" "'assertion" "jazz.expand-assert" "assert" "'assert" "jazz.expand-remotable-stub" "remotable-stub" "'remotable-stub" "jazz.walk-time" "time" "'time" "jazz.walk-construct" "construct" "'construct" "jazz.walk-cast" "cast" "'cast" "jazz.walk-with-dynamic-self" "with-dynamic-self" "'with-dynamic-self" "jazz.walk-with-self" "with-self" "'with-self" "jazz.walk-with-slots" "with-slots" "'with-slots" "jazz.walk-parameterize" "parameterize" "'parameterize" "jazz.walk-specialize" "%specialize" "'%specialize" "jazz.expand-specialize" "specialize" "'specialize" "jazz.walk-function" "function" "'function" "jazz.walk-c-definition" "c-definition" "'c-definition" "jazz.walk-c-type" "c-type" "'c-type" "jazz.walk-c-function" "c-function" "'c-function" "jazz.walk-c-initialize" "c-initialize" "'c-initialize" "jazz.walk-c-named-declare" "c-named-declare" "'c-named-declare" "jazz.walk-c-declare" "c-declare" "'c-declare" "jazz.walk-c-include" "c-include" "'c-include" "jazz.walk-declare" "declare" "'declare" "jazz.walk-method" "method" "'method" "%property" "'%property" "jazz.walk-%slot" "%slot" "'%slot" "jazz.expand-property" "property" "'property" "jazz.expand-slot" "slot" "'slot" "jazz.new-macro-form" "jazz.walk-interface" "interface" "'interface" "jazz.walk-%class" "%class" "'%class" "jazz.expand-class" "class" "'class" "jazz.new-syntax-form" "jazz.walk-specific" "specific" "'specific" "jazz.walk-generic" "generic" "'generic" "jazz.walk-definition" "definition" "'definition" "jazz.new-special-form" "%%list")}
      {Lisp-Entry "jazz.jazz-environment" #f 902 8 902 29 ()}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Jazz-Walker") 906 21 906 44 ("jazz.jazz-bindings" "jazz.scheme-bindings" "jazz.core-bindings" "append" "jazz.new-walk-frame" "%%list" "set!" "begin" "jazz.jazz-environment" "or")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Jazz-Walker") 918 21 918 42 ("nextmethod" "else" "jazz.walk-c-definition-declaration" "c-definition" "jazz.walk-c-type-declaration" "c-type" "jazz.walk-c-named-declare-declaration" "c-named-declare" "c-include" "jazz.walk-with-dynamic-self-declaration" "with-dynamic-self" "jazz.walk-method-declaration" "method" "jazz.walk-%slot-declaration" "%property" "%slot" "jazz.walk-interface-declaration" "interface" "jazz.walk-%class-declaration" "%class" "specific" "jazz.walk-generic-declaration" "generic" "jazz.walk-specialize-declaration" "%specialize" "walker" "jazz.walk-definition-declaration" "definition" "case" "%%car" "first" "let" "%%pair?" "if" "form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.parse-keywords" #f 944 9 944 28 ("%%list" "jazz.unspecified" "%%table-ref" "keyword" "lambda" "map" "%%append" "values" "%%apply" "%%cddr" "%%cadr" "%%table-set!" "begin" "set!" "%%car" "jazz.source-code" "%%memq" "%%null?" "or" "if" "%%not" "%%while" "done?" "eq?" "test:" "%%make-table" "table" "let" "rest" "keywords")}
      {Lisp-Entry "jazz.emit-specialized-class-of" #f 974 9 974 39 ("%%get-category-declaration-metaclass" "jazz.Class-Declaration" "%%class-is?" "%%get-code-type" "type" "let" "%%class-of" "jazz.sourcified-form" "jazz.class-of" "jazz.debug-user?" "if" "jazz.new-code" "environment" "object")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Jazz-Walker") 1019 21 1019 37 ("walker" "nextmethod" "jazz.new-reference" "jazz.Slot-Declaration" "%%class-is?" "%%assert" "jazz.find-class-declaration" "jazz.lookup-declaration" "slot-declaration" "if" "jazz.self-access" "slot-name" "jazz.source-code" "symbol" "let" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.self-access" #f 1029 9 1029 25 ("%%string->symbol" "%%substring" "%%equal?" "0" "%%fx>" "and" "5" "%%fx-" "size" "%%string-length" "len" "%%symbol->string" "name" "let*" "symbol")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Jazz-Walker") 1043 21 1043 48 ("nextmethod" "walker" "jazz.walk" "jazz.new-assignment" "jazz.Slot-Declaration" "%%class-is?" "%%assert" "jazz.find-class-declaration" "jazz.lookup-declaration" "slot-declaration" "if" "jazz.self-access" "slot-name" "let" "value" "symbol" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Jazz-Walker") 1057 21 1057 35 ("nextmethod" "walker" "jazz.walk-dispatch" "jazz.dispatch?" "if" "%%car" "jazz.source-code" "procedure-expr" "let" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.With-Self" #f 1069 27 1069 41 ()}
      {Lisp-Entry "jazz.new-with-self" #f 1072 9 1072 27 ("jazz.With-Self" "jazz.allocate-with-self" "body")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.With-Self") 1076 21 1076 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "self" "'self" "jazz.*self*" "parameterize" "begin" "jazz.simplify-begin" "jazz.new-code" "expression" "%%get-with-self-body" "body" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.With-Self") 1087 21 1087 41 ("%%get-with-self-body" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.With-Dynamic-Self" #f 1100 27 1100 49 ()}
      {Lisp-Entry "jazz.new-with-dynamic-self" #f 1103 9 1103 35 ("jazz.With-Dynamic-Self" "jazz.allocate-with-dynamic-self" "body" "code")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.With-Dynamic-Self") 1107 21 1107 41 ("jazz.Any" "jazz.emit-statements-code" "jazz.sourcified-form" "jazz.*self*" "parameterize" "begin" "jazz.simplify-begin" "jazz.new-code" "%%get-with-dynamic-self-body" "body" "expression" "%%get-with-dynamic-self-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.With-Dynamic-Self") 1119 21 1119 41 ("%%get-with-dynamic-self-body" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Cast" #f 1132 27 1132 36 ()}
      {Lisp-Entry "jazz.new-cast" #f 1135 9 1135 22 ("jazz.Cast" "jazz.allocate-cast" "expression" "type")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Cast") 1139 21 1139 41 ("jazz.emit-expression" "jazz.emit-type-cast" "jazz.new-code" "%%get-cast-expression" "expression" "%%get-expression-type" "type" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Construct" #f 1160 27 1160 41 ()}
      {Lisp-Entry "jazz.new-construct" #f 1163 9 1163 27 ("jazz.Construct" "jazz.allocate-construct" "values" "class")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Construct") 1167 21 1167 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "jazz.emit-expression" "jazz.sourcified-form" "%%object" "jazz.new-code" "%%get-construct-values" "values" "expression" "%%get-construct-class" "class" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.cache-dispatch" #f 1185 9 1185 28 ("jazz.interface-dispatch" "interface" "%%get-method-implementation-rank" "%%get-method-category-rank" "jazz.class-dispatch" "jazz.final-dispatch" "final" "%%get-method-dispatch-type" "case" "proc" "%%get-category-field" "field" "jazz.error" "%%assertion" "jazz.locate-method-owner" "category" "%%class-of" "class" "let" "object" "lambda" "setter" "name")}
      {Lisp-Entry "jazz.final-dispatch" #f 1203 9 1203 28 ("%%get-method-implementation" "%%final-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "type" "field")}
      {Lisp-Entry "jazz.class-dispatch" #f 1209 9 1209 28 ("%%class-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "type" "implementation-rank" "class-level")}
      {Lisp-Entry "jazz.interface-dispatch" #f 1215 9 1215 32 ("%%interface-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "object" "lambda" "type" "implementation-rank" "interface-rank")}
      {Lisp-Entry "jazz.dispatch" #f 1221 9 1221 22 ("jazz.error" "jazz.find-dispatch" "or" "name" "object")}
      {Lisp-Entry "jazz.find-dispatch" #f 1226 9 1226 27 ("%%interface-dispatch" "interface" "%%get-method-implementation-rank" "%%get-method-category-rank" "%%class-dispatch" "%%get-method-implementation" "%%final-dispatch" "final" "%%get-method-dispatch-type" "case" "%%get-category-field" "field" "%%not" "if" "jazz.locate-method-owner" "category" "%%class-of" "class" "let" "name" "object")}
      {Lisp-Entry "jazz.Dispatch" #f 1241 27 1241 40 ()}
      {Lisp-Entry "jazz.new-dispatch" #f 1244 9 1244 26 ("jazz.Dispatch" "jazz.allocate-dispatch" "arguments" "name" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Dispatch") 1248 21 1248 41 ("expression" "jazz.emit-dispatch" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-dispatch" #f 1252 9 1252 27 ("jazz.Any" ",object" "object" "jazz.with-uniqueness" ",d" "set!" ",name" "',name" "jazz.cache-dispatch" "%%set-cdr!" "d" "%%symbol->string" "%%string-append" "jazz.register-variable" "dv" "%%get-expression-source" "jazz.codes-forms" "jazz.sourcified-form" "jazz.new-code" "jazz.emit-method-dispatch" "dispatch-code" "code" "lambda" "jazz.with-code-value" "jazz.emit-inlined-final-dispatch" "or" "jazz.emit-expressions" "rest-codes" "jazz.emit-expression" "%%cdr" "rest-arguments" "%%car" "object-argument" "method" "'method" "dispatch" "'dispatch" "find" "'find" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-library-warn?" "jazz.warnings?" "begin" "%%not" "method-declaration" "lookup-method/warn" "jazz.Method-Declaration" "and" "jazz.lookup-declaration" "jazz.Category-Declaration" "lookup-method" "jazz.resolve-declaration" "jazz.Autoload-Declaration" "%%class-is?" "if" "%%get-code-type" "jazz.patch-type-until-unification" "object-type" "object-code" "resolve-type" "define" "%%get-dispatch-arguments" "arguments" "%%get-dispatch-name" "name" "let" "environment" "declaration" "expression")}
      {Lisp-Entry "jazz.with-code-value" #f 1306 9 1306 29 ("%%get-code-source" ",form" ",value" "%%get-code-type" "jazz.new-code" "jazz.generate-symbol" "value" "%%symbol?" "if" "%%get-code-form" "form" "let" "proc" "code")}
      {Lisp-Entry "jazz.emit-inlined-final-dispatch" #f 1319 9 1319 41 ("else" "jazz.error" "jazz.call-return-type" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "argument" "parameter" "map" "jazz.sourcified-form" "self" "jazz.new-code" "jazz.emit-expression" "body-code" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "let" "final" "case" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "inline" "'inline" "%%get-method-declaration-expansion" "%%eq?" "if" "environment" "source-declaration" "arguments" "object" "declaration" "expression")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Dispatch") 1350 21 1350 41 ("%%get-dispatch-arguments" "jazz.fold-expressions" "%%get-dispatch-name" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.walk-dispatch" #f 1359 9 1359 27 ("jazz.walk-list" "jazz.new-dispatch" "%%desourcify" "jazz.error" "%%null?" "%%not" "%%assertion" "%%cdr" "arguments" "%%car" "jazz.source-code" "jazz.dispatch->symbol" "name" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.definition-modifiers" #f 1372 8 1372 33 ()}
      {Lisp-Entry "jazz.parse-definition" #f 1378 9 1378 30 (",@effective-body" ",parameters" "value" "unspecified" "'unspecified" "%%list" "%%null?" "effective-body" "body" "%%desourcify" "parameters" "let*" "values" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "name" "let" "%%car" "jazz.source-code" "%%symbol?" "if" "jazz.definition-modifiers" "jazz.parse-modifiers" "expansion" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-definition-declaration" #f 1396 9 1396 41 ("jazz.walk" "%%set-definition-declaration-value" "%%cons" "new-environment" "inline" "'inline" "%%eq?" "%%when" "jazz.add-declaration-child" "effective-declaration" "jazz.new-definition-declaration" "new-declaration" "jazz.build-function-type" "if" "effective-type" "jazz.walk-parameters" "and" "signature" "jazz.specifier->type" "type" "let" "%%cdr" "jazz.parse-definition" "parameters" "value" "expansion" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-definition" #f 1410 9 1410 29 ("%%set-declaration-source" "jazz.walk" "%%set-definition-declaration-value" "inline" "'inline" "%%eq?" "%%not" "%%when" "%%cons" "new-environment" "jazz.find-form-declaration" "new-declaration" "let*" "jazz.source-code" "%%cdr" "jazz.parse-definition" "parameters" "value" "expansion" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.build-function-type" #f 1423 9 1423 33 ("jazz.Any" "or" "and" "%%get-signature-rest" "rest" "let" "%%get-signature-named" "%%get-signature-optional" "%%get-signature-positional" "parameter-type" "map" "jazz.new-function-type" "result-type" "signature")
        {Lisp-Entry "parameter-type" #f 1424 11 1424 25 ("jazz.Any" "%%get-lexical-binding-type" "or" "parameter")}}
      {Lisp-Entry "jazz.specialize-modifiers" #f 1442 8 1442 33 ()}
      {Lisp-Entry "jazz.parse-specialize" #f 1446 9 1446 30 ("%%cddr" "%%cadr" "values" "as" "'as" "%%car" "%%eq?" "if" "jazz.specialize-modifiers" "jazz.parse-modifiers" "expansion" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-specialize" #f 1453 9 1453 31 (",operator" "%specialize" ",@rest" ",@parameters" ",name" ",expansion" "definition" "begin" "jazz.compose-specializer-name" "or" "name" "parameters" "operator" "%%cdr" "%%car" "signature" "let" "jazz.parse-specialize" "as" "expansion" "receive" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.compose-specializer-name" #f 1465 9 1465 38 ("jazz.specifier->name" "%%list" "jazz.specifier?" "if" "parameter" "lambda" "map" "append" "string-append" "apply" "%%symbol->string" "%%string-append" "%%string->symbol" "parameters" "operator")}
      {Lisp-Entry "jazz.walk-specialize-declaration" #f 1480 9 1480 41 ("jazz.new-specialize" "jazz.add-specializer" "specializer-declaration" "jazz.lookup-reference" "specialized-declaration" "%%cddr" "%%car" "specializer" "%%cadr" "specialized" "let" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-specialize" #f 1490 9 1490 29 ("jazz.new-specialize" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.generic-modifiers" #f 1499 8 1499 30 ()}
      {Lisp-Entry "jazz.parse-generic" #f 1504 9 1504 27 ("values" "body" "specifier" "lambda" "jazz.parse-specifier" "%%cdr" "parameters" "name" "%%car" "signature" "let" "jazz.generic-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-generic-declaration" #f 1514 9 1514 38 ("jazz.walk-error" "jazz.add-declaration-child" "effective-declaration" "jazz.new-generic-declaration" "new-declaration" "jazz.walk-parameters" "signature" "jazz.dynamic-parameter-types" "jazz.lookup-reference" "dynamic-parameter-type" "lambda" "map" "dispatch-type-declarations" "jazz.Any" "jazz.walk-specifier" "type" "let" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-generic" "body" "parameters" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-generic" #f 1528 9 1528 26 ("%%set-declaration-source" "jazz.walk-body" "%%set-generic-declaration-body" "%%set-generic-declaration-signature" "jazz.find-form-declaration" "new-declaration" "jazz.walk-parameters" "augmented-environment" "signature" "%%cdr" "jazz.parse-generic" "body" "parameters" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.specific-modifiers" #f 1545 8 1545 31 ()}
      {Lisp-Entry "jazz.parse-specific" #f 1549 9 1549 28 ("values" "parameters" "name" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "%%cdr" "body" "%%car" "signature" "let*" "jazz.specific-modifiers" "jazz.parse-modifiers" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-specific" #f 1559 9 1559 27 ("cons" "jazz.walk-error" "%%set-declaration-source" "jazz.walk-body" "%%set-specific-declaration-body" "nextmethod" "'nextmethod" "jazz.new-nextmethod-variable" "%%cons" "body-environment" "uptodate" "'uptodate" "public" "'public" "jazz.new-specific-declaration" "new-declaration" "jazz.walk-specific-root-dynamic-parameters?" "root?" "let*" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.Generic-Declaration" "jazz.lookup-declaration" "generic-declaration" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-specific" "body" "parameters" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-specific-root-dynamic-parameters?" #f 1577 9 1577 52 ("else" "or" "cons" "%%get-declaration-locator" "%%get-lexical-binding-name" "jazz.walk-error" "%%eq?" "cdr" "if" "specific-class" "%%get-dynamic-parameter-class" "%%get-reference-binding" "jazz.resolve-declaration" "generic-class" "cond" "specific-dynamic?" "jazz.Dynamic-Parameter" "%%is?" "generic-dynamic?" "specific-parameter" "car" "%%pair?" "and" "generic-parameter" "root?" "specific-parameters" "%%get-generic-declaration-signature" "%%get-signature-positional" "generic-parameters" "iter" "let" "parameters" "name" "specific-signature" "generic-declaration" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.class-modifiers" #f 1607 8 1607 28 ()}
      {Lisp-Entry "jazz.class-keywords" #f 1613 8 1613 27 ()}
      {Lisp-Entry "jazz.parse-class" #f 1617 9 1617 25 ("values" "jazz.class-keywords" "jazz.parse-keywords" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "%%cdr" "jazz.Any" "type" "%%car" "jazz.source-code" "name" "let" "jazz.class-modifiers" "jazz.parse-modifiers" "implementor" "compatibility" "abstraction" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-class" #f 1626 9 1626 26 (",@class-body" ",interface-names" "implements" "metaclass" ",name" ",access" ",@metaclass-body" ",ascendant-name" ":class" "extends" ",metaclass-name" "begin" "%%symbol->string" "%%string-append" "%%string->symbol" "let" "else" "jazz.walk-error" "%%specified?" "%class" "%%null?" "cond" "jazz.preprocess-meta" "class-body" "metaclass-body" "jazz.source-code" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.preprocess-meta" #f 1642 9 1642 29 ("jazz.queue-list" "values" "%%cddr" "%%car" "%%cons" "jazz.enqueue" "meta" "'meta" "%%cadr" "%%eq?" "%%cdr" "jazz.source-code" "%%pair?" "and" "if" "expr" "lambda" "for-each" "class" "jazz.new-queue" "metaclass" "let" "body")}
      {Lisp-Entry "jazz.walk-%class-declaration" #f 1656 9 1656 37 ("jazz.walk-error" "jazz.walk-declarations" "%%cons" "new-environment" "jazz.setup-class-lookups" "jazz.add-declaration-child" "effective-declaration" "jazz.new-class-declaration" "jazz.Class-Declaration" "jazz.find-actual-declaration" "or" "new-declaration" "jazz.listify" "jazz.lookup-reference" "interface-name" "lambda" "map" "jazz.unspecified?" "interfaces" "jazz.lookup-metaclass" "metaclass" "let" "jazz.lookup-ascendant" "ascendant-base" "ascendant-relation" "ascendant" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%class" #f 1673 9 1673 25 ("%%set-declaration-source" "jazz.walk-namespace" "%%set-namespace-declaration-body" "begin" "jazz.error" "Object" "'Object" "%%neq?" "%%not" "and" "if" "%%get-class-declaration-ascendant" "ascendant-declaration" "%%cons" "new-environment" "jazz.find-form-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-metaclass" #f 1687 9 1687 30 ("jazz.lookup-reference" "Object-Class" "'Object-Class" "%%eq?" "jazz.unspecified?" "or" "if" "metaclass-name" "ascendant" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-ascendant" #f 1693 9 1693 30 ("else" "Object-Class" "'Object-Class" "jazz.effective-class-declaration-metaclass" "or" "%%cadr" "jazz.lookup-reference" "base" "relation" "let" ":class" "':class" "%%car" "%%eq?" "%%pair?" "and" "values" "jazz.unspecified?" "cond" "ascendant-name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.effective-class-declaration-metaclass" #f 1713 9 1713 51 ("jazz.effective-class-declaration-metaclass" "%%get-class-declaration-ascendant" "ascendant" "%%get-category-declaration-metaclass" "or" "jazz.resolve-declaration" "let" "%%not" "if" "class-declaration")}
      {Lisp-Entry "jazz.interface-modifiers" #f 1730 8 1730 32 ()}
      {Lisp-Entry "jazz.interface-keywords" #f 1735 8 1735 31 ()}
      {Lisp-Entry "jazz.parse-interface" #f 1739 9 1739 29 ("values" "jazz.interface-keywords" "jazz.parse-keywords" "body" "attributes" "ascendant-names" "metaclass-name" "%%cdr" "jazz.Any" "type" "%%car" "name" "let" "jazz.interface-modifiers" "jazz.parse-modifiers" "implementor" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-interface-declaration" #f 1748 9 1748 40 ("jazz.walk-error" "jazz.walk-declarations" "%%cons" "new-environment" "jazz.setup-interface-lookups" "jazz.add-declaration-child" "effective-declaration" "jazz.new-interface-declaration" "new-declaration" "jazz.listify" "ascendant-name" "lambda" "map" "ascendants" "jazz.lookup-reference" "Interface" "'Interface" "%%eq?" "jazz.unspecified?" "or" "metaclass" "let" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-interface" "body" "attributes" "ascendant-names" "metaclass-name" "implementor" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-interface" #f 1762 9 1762 28 ("%%set-declaration-source" "jazz.walk-namespace" "%%set-namespace-declaration-body" "%%cons" "new-environment" "jazz.find-form-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-interface" "body" "attributes" "ascendant-names" "metaclass-name" "implementor" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.slot-modifiers" #f 1778 8 1778 27 ()}
      {Lisp-Entry "jazz.slot-keywords" #f 1782 8 1782 26 ()}
      {Lisp-Entry "jazz.slot-accessors-modifiers" #f 1786 8 1786 37 ()}
      {Lisp-Entry "jazz.slot-accessor-modifiers" #f 1794 8 1794 36 ()}
      {Lisp-Entry "jazz.parse-slot" #f 1802 9 1802 24 ("values" "jazz.walk-error" "%%not-null?" "if" "jazz.slot-keywords" "jazz.parse-keywords" "setter" "getter" "accessors" "initialize" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "name" "let" "jazz.slot-modifiers" "jazz.parse-modifiers" "rest" "compatibility" "access" "receive" "form" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-slot" #f 1813 9 1813 25 ("slot" "'slot" "%%cons" "jazz.expand-slot-form" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-slot-accessors" #f 1817 9 1817 34 ("values" "jazz.walk-error" "%%not-null?" "if" "jazz.slot-accessors-modifiers" "jazz.parse-modifiers" "rest" "generation" "expansion" "abstraction" "propagation" "access" "receive" "form" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-slot-accessor" #f 1824 9 1824 33 ("values" "jazz.walk-error" "else" "%%car" "%%cdr" "%%symbol->string" "%%string-append" "%%string->symbol" "generate" "'generate" "%%eq?" "and" "%%null?" "cond" "name" "or" "let" "jazz.slot-accessor-modifiers" "jazz.parse-modifiers" "rest" "generation" "expansion" "abstraction" "propagation" "access" "receive" "prefix" "form" "default-generation" "default-expansion" "default-abstraction" "default-propagation" "default-access" "slot-name" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-slot-form" #f 1842 9 1842 30 ("set!" ",value" ",setter-expansion" ",setter-abstraction" ",setter-propagation" ",setter-access" ",@specifier-list" ",getter-expansion" ",getter-abstraction" ",getter-propagation" ",getter-access" "method" ",setter-name" ",getter-name" ",initialize" "with-self" "%%unspecified?" ",compatibility" ",access" ",specifier" ",name" "%slot" "'%slot" "%property" "'%property" "property" "'property" "%%car" "begin" "if" "specifier-list" "generate-setter?" "generate" "'generate" "%%eq?" "generate-getter?" "jazz.generate-symbol" "value" "let*" "setter-name" "setter-generation" "setter-expansion" "setter-abstraction" "setter-propagation" "setter-access" "jazz.parse-slot-accessor" "getter-name" "getter-generation" "getter-expansion" "getter-abstraction" "getter-propagation" "getter-access" "jazz.parse-slot-accessors" "default-generation" "default-expansion" "default-abstraction" "default-propagation" "default-access" "else" "%%list" "%%symbol?" "jazz.unspecified?" "cond" "info" "lambda" "standardize" "let" "%%cdr" "jazz.parse-slot" "setter" "getter" "accessors" "initialize" "compatibility" "access" "specifier" "name" "receive" "form" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%slot-declaration" #f 1884 9 1884 36 ("jazz.add-declaration-child" "effective-declaration" "new-declaration" "jazz.new-slot-declaration" "jazz.new-property-declaration" "%property" "'%property" "%%car" "%%eq?" "new" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "%%cdr" "setter-name" "getter-name" "initialize" "compatibility" "access" "specifier" "name" "jazz.bind" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%slot" #f 1893 9 1893 24 ("%%set-declaration-source" ",name" "set!" ",setter-name" ",value" "jazz.generate-symbol" "value" "%%set-property-declaration-setter" ",getter-name" "with-self" "self" "lambda" "%%set-property-declaration-getter" "jazz.Property-Declaration" "%%class-is?" "%%when" "jazz.walk" "%%set-slot-declaration-initialize" "%%cadr" "jazz.find-form-declaration" "new-declaration" "jazz.unspecified?" "if" "%%cdr" "setter-name" "getter-name" "initialize" "compatibility" "access" "specifier" "name" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-property" #f 1925 9 1925 29 ("property" "'property" "%%cons" "jazz.expand-slot-form" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.method-modifiers" #f 1934 8 1934 29 ()}
      {Lisp-Entry "jazz.parse-method" #f 1945 9 1945 26 ("values" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "body" "specifier" "lambda" "jazz.parse-specifier" "%%desourcify" "%%cdr" "jazz.wrap-parameters" "parameters" "name" "let" "jazz.desourcify-list" "method" "'method" "%%cons" "%%get-declaration-toplevel" "%%get-lexical-binding-name" "jazz.error" "%%car" "jazz.source-code" "%%pair?" "and" "%%assertion" "jazz.method-modifiers" "jazz.parse-modifiers" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-method-declaration" #f 1956 9 1956 37 (",@body" "with-self" "jazz.walk" "%%set-method-declaration-body" "%%set-method-declaration-signature" "%%when" "jazz.add-declaration-child" "effective-declaration" "jazz.new-method-declaration" "new-declaration" "find-root-declaration" "root-declaration" "let*" "jazz.unspecified" "values" "jazz.walk-parameters" "augmented-environment" "signature" "concrete" "'concrete" "inline" "'inline" "%%eq?" "and" "inline?" "jazz.Procedure" "jazz.walk-specifier" "jazz.new-function-type" "if" "type" "let" "jazz.walk-error" "jazz.Category-Declaration" "%%class-is?" "%%assertion" "%%cdr" "jazz.parse-method" "body" "parameters" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "find-root-declaration" #f 1957 11 1957 32 ("%%get-declaration-parent" "%%eq?" "if" "%%get-method-declaration-root" "or" "and" "root-declaration" "declaration" "jazz.lookup-declaration" "next-declaration" "let*" "name")}}
      {Lisp-Entry "jazz.walk-method" #f 1986 9 1986 25 ("%%set-declaration-source" "%%set-method-declaration-body" "%%set-method-declaration-signature" "inline" "'inline" "%%when" "concrete" "'concrete" ",@body" "with-self" "%%get-lexical-binding-type" "nextmethod" "'nextmethod" "jazz.new-nextmethod-variable" "%%cons" "jazz.walk" "body-expression" "let" "jazz.walk-parameters" "augmented-environment" "signature" "else" "'virtual" "jazz.Interface-Declaration" "%%not" "case" "'inherited" "%%neq?" "chained" "virtual" "inherited" "final" "%%memq" "%%eq?" "cond" "root-category-declaration" "%%get-method-declaration-propagation" "and" "root-method-propagation" "%%get-method-declaration-root" "root-method-declaration" "%%get-declaration-parent" "category-declaration" "jazz.lookup-declaration" "new-declaration" "let*" "jazz.walk-error" "jazz.Category-Declaration" "%%class-is?" "%%assertion" "jazz.source-code" "%%cdr" "jazz.parse-method" "body" "parameters" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.wrap-parameters" #f 2023 9 2023 29 ("jazz.queue-list" "%%cdr" "with-self" ",@specifier-list" "%%cadr" "%%list" "specifier-list" "rest" "specifier" "lambda" "%%cddr" "jazz.parse-specifier" "%%keyword?" "jazz.enqueue" "jazz.specifier?" "%%pair?" "if" "%%car" "parameter" "else" "jazz.enqueue-list" "%%symbol?" "%%null?" "cond" "scan" "iter" "jazz.new-queue" "queue" "let" "parameters")}
      {Lisp-Entry "jazz.walk-cast" #f 2053 9 2053 23 ("jazz.walk" "jazz.walk-specifier" "jazz.new-cast" "%%cddr" "%%car" "expression" "%%cadr" "specifier" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-construct" #f 2066 9 2066 28 ("jazz.walk-list" "jazz.walk" "jazz.new-construct" "%%cddr" "values" "%%cadr" "class" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-self" #f 2079 9 2079 28 ("jazz.walk-body" "%%cdr" "body" "jazz.new-with-self" "jazz.new-self-binding" "%%cons" "new-environment" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-with-dynamic-self" #f 2092 9 2092 37 ("values" "%%cdr" "body" "%%car" "code" "let" "form")}
      {Lisp-Entry "jazz.walk-with-dynamic-self-declaration" #f 2098 9 2098 48 ("jazz.walk-declarations" "%%cdr" "jazz.parse-with-dynamic-self" "body" "code" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-dynamic-self" #f 2103 9 2103 36 ("jazz.walk-list" "jazz.new-with-dynamic-self" "jazz.new-dynamic-self-binding" "%%cons" "new-environment" "let" "%%desourcify" "%%cdr" "jazz.parse-with-dynamic-self" "body" "code" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Jazz-Walker") 2116 21 2116 43 ("walker" "jazz.walk-error" "jazz.Category-Declaration" "jazz.Library-Declaration" "%%class-is?" "%%not" "and" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" ("jazz.Jazz-Walker") 2128 21 2128 44 ("jazz.unspecified" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.remotable-stub-modifiers" #f 2137 8 2137 37 ()}
      {Lisp-Entry "jazz.remotable-stub-keywords" #f 2140 8 2140 36 ()}
      {Lisp-Entry "jazz.parse-remotable-stub" #f 2144 9 2144 34 ("values" "jazz.remotable-stub-keywords" "jazz.parse-keywords" "body" "ascendant-name" "%%cdr" "%%car" "name" "let" "jazz.remotable-stub-modifiers" "jazz.parse-modifiers" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.method-stub-modifiers" #f 2152 8 2152 34 ()}
      {Lisp-Entry "jazz.parse-method-stub" #f 2158 9 2158 31 ("jazz.Any" "values" "body" "%%cdr" "parameters" "name" "%%car" "signature" "let*" "jazz.method-stub-modifiers" "jazz.parse-modifiers" "passage" "invocation" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-remotable-stub" #f 2167 9 2167 35 ("Remote-Proxy" "'Remote-Proxy" ",@values-method" "implements" "Local-Proxy" "'Local-Proxy" "metaclass" "Remotable-Stub" "'Remotable-Stub" ",stub-interface" "interface" ",remote-class" ",local-class" "Stub-Interface" "'Stub-Interface" "jazz.specified?" "extends" ",interface-class" "private" "class" "begin" "nextmethod" ",@values-list" "list" "append" "proxy-values" "values-method" "values-list" ",call" "function" ",value-keyword" "proxy-value" "self" "',name" ",invoker" "if" ",dispatch" ",@local-result" ",rest" ",@positional" "object" "" "apply" "%%not-null?" "%%when" ",@parameters" ",name" "abstract" "virtual" ",access" "value-keyword" "unspecified" "local-result" "dispatch" "call-remote" "'call-remote" "call" "exec-remote" "'exec-remote" "exec" "post-remote" "'post-remote" "post" "invoker" "jazz.parse-method-stub" "invocation" "method" "'method" "%%eq?" "method-form" "lambda" "for-each" "remotes" "locals" "proxies" "remote-class" "local-class" "stub-interface" "interface-class" "jazz.string->keyword" "0" "%%substring" "%%string=?" "4" "%%fx>" "and" "%%assert" "%%string-length" "len" "str" "let*" "value" "reference" "case" "passage" "parse-value-keyword" "%%cdr" "jazz.enqueue" "%%car" "else" "jazz.enqueue-list" "symbol?" "jazz.queue-list" "values" "%%null?" "cond" "scan" "iter" "parameter" "encode" "positional" "jazz.new-queue" "parameters" "let" "params" "parse-parameters" "%%symbol->string" "%%string-append" "%%string->symbol" "suffix" "add" "define" "jazz.parse-remotable-stub" "body" "ascendant-name" "access" "type" "name" "receive" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-com-external" #f 2310 9 2310 33 ("jazz.emit-com-external" ",name" "jazz.emit-com-function" ",lowlevel-name" "definition" "begin" "cons" "jazz.C-Type-Declaration" "%%class-is?" "resolved" "jazz.every?" "jazz.platform.windows.com.HRESULT" "'jazz.platform.windows.com.HRESULT" "%%get-declaration-locator" "eq?" "hresult?" "%%symbol->string" "%%string-append" "%%string->symbol" "lowlevel-name" "resolved-directions" "cdr" "cadr" "map" "resolved-params" "resolved-result" "let" "jazz.walk-error" "jazz.resolve-c-type-reference" "symbol?" "type" "lambda" "resolve-declaration" "%%car" "%%null?" "if" "refiid" "car" "name" "let*" "rest" "signature" "result-type" "offset" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-com-function" #f 2327 9 2327 31 ("resolved-params" "resolved-result" "offset")
        {Lisp-Entry "fix-locator" #f 2328 11 2328 22 ("%%get-declaration-locator" "symbol->string" "string-append" "string->symbol" "type" "'type" "%%get-c-type-declaration-kind" "eq?" "if" "declaration")}}
      {Lisp-Entry "jazz.emit-com-external" #f 2357 9 2357 31 ("'result" "=" ",@out-list" "values" "else" "car" "1" "unspecified" "0" "length" "case" "generate-free" "generate-ref" "begin" "validate-hresult" ",refiid" "validate-hresult2" "if" "generate-low" ",lowlevel-name" "result" "generate-encode/enref" "generate-in" "coptr" "function" "generate-out" "generate-cotype-transform" "out-list" "let" "refiid" "resolved-directions" "resolved-params" "lowlevel-name" "hresult?")
        {Lisp-Entry "generate-in" #f 2358 11 2358 22 ("%%number->string" "%%string-append" "%%string->symbol" "out" "'out" "eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-low" #f 2362 11 2362 23 ("%%number->string" "%%string-append" "%%string->symbol" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-out" #f 2364 11 2364 23 ("%%number->string" "%%string-append" "%%string->symbol" "in" "'in" "eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-encode/enref" #f 2368 11 2368 32 (",value" ",encode/enref" ",binding" "generate-in" "get-cotype-default-value" "out" "'out" "eq?" "if" "value" "get-cotype-encode/enref" "encode/enref" "generate-low" "binding" "let" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-ref" #f 2377 11 2377 23 (",value" ",ref" ",binding" "generate-low" "value" "get-cotype-ref" "ref" "generate-out" "binding" "let" "in" "'in" "eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-free" #f 2386 11 2386 24 (",value" ",free" "if" "generate-low" "value" "get-cotype-free" "free" "let" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-cotype-transform" #f 2392 11 2392 36 ("+" "cdr" "cons" "car" "generated" "pair?" "if" "1" "order" "resolved-directions" "resolved-params" "iter" "let" "generator")}}
      {Lisp-Entry "get-cotype-default-value" #f 2427 9 2427 33 ("else" "jazz.platform.windows.com.LONG*" "0" "jazz.platform.windows.com.INT*" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "jazz.platform.windows.com.VARIANT" "jazz.platform.windows.com.VARIANT_BOOL*" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "jazz.platform.windows.com.GUID" "jazz.platform.windows.com.BSTR*" "error" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-encode/enref" #f 2444 9 2444 32 ("else" "LONG-enref" "'LONG-enref" "jazz.platform.windows.com.LONG*" "INT-enref" "'INT-enref" "jazz.platform.windows.com.INT*" "IUnknown*-enref" "'IUnknown*-enref" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-encode" "'VARIANT-encode" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL-enref" "'VARIANT_BOOL-enref" "jazz.platform.windows.com.VARIANT_BOOL*" "VARIANT_BOOL-encode" "'VARIANT_BOOL-encode" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-encode" "'GUID-encode" "jazz.platform.windows.com.GUID" "BSTR*-enref" "'BSTR*-enref" "jazz.platform.windows.com.BSTR*" "BSTR-encode" "'BSTR-encode" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-ref" #f 2461 9 2461 23 ("else" "LONG*-ref" "'LONG*-ref" "jazz.platform.windows.com.LONG*" "INT*-ref" "'INT*-ref" "jazz.platform.windows.com.INT*" "IUnknown**-ref" "'IUnknown**-ref" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-ref" "'VARIANT-ref" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL*-ref" "'VARIANT_BOOL*-ref" "jazz.platform.windows.com.VARIANT_BOOL*" "VARIANT_BOOL-decode" "'VARIANT_BOOL-decode" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-ref" "'GUID-ref" "jazz.platform.windows.com.GUID" "BSTR*-ref" "'BSTR*-ref" "jazz.platform.windows.com.BSTR*" "BSTR-ref" "'BSTR-ref" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-free" #f 2478 9 2478 24 ("else" "LONG*-free" "'LONG*-free" "jazz.platform.windows.com.LONG*" "INT*-free" "'INT*-free" "jazz.platform.windows.com.INT*" "IUnknown**-free" "'IUnknown**-free" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-decode" "'VARIANT-decode" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL*-free" "'VARIANT_BOOL*-free" "jazz.platform.windows.com.VARIANT_BOOL*" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-free" "'GUID-free" "jazz.platform.windows.com.GUID" "BSTR*-free" "'BSTR*-free" "jazz.platform.windows.com.BSTR*" "BSTR-free" "'BSTR-free" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "jazz.validate-access" ("jazz.Jazz-Walker") 2500 21 2500 41 ("referenced-declaration" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-private-access" #f 2510 9 2510 37 ("jazz.illegal-access" "%%get-declaration-toplevel" "%%neq?" "if" "referenced-declaration" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-protected-access" #f 2516 9 2516 39 ("jazz.unspecified" "referenced-declaration" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.illegal-access" #f 2521 9 2521 28 ("jazz.walk-error" "%%get-declaration-locator" "referenced-locator" "%%get-declaration-access" "referenced-access" "let" "referenced-declaration" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-assert" #f 2532 9 2532 27 ("jazz.debug-user?" "jazz.expand-assert-test" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-assertion" #f 2536 9 2536 30 ("jazz.debug-user?" "jazz.expand-assertion-test" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-assert-test" #f 2540 9 2540 32 ("error" "'error" "list" "jazz.expand-assertion-body" "get-output-string" "%%desourcify" "write" "display" "open-output-string" "port" "message" "%%cddr" "body" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-assertion-test" #f 2551 9 2551 35 ("jazz.expand-assertion-body" "%%cdr" "body" "%%cddr" "%%car" "action" "jazz.source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-assertion-body" #f 2558 9 2558 35 (",@body" "begin" "jazz.simplify-begin" ",action" ",assertion" "not" "unspecified" "%%not-null?" "if" "let" "body" "action" "assertion" "test?")}
      {Lisp-Entry "jazz.walk-declare" #f 2574 9 2574 26 ("jazz.new-declare" "%%cdr" "declarations" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-include" #f 2585 9 2585 28 ("jazz.new-c-include" "%%cdr" "name" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-declare" #f 2596 9 2596 28 ("jazz.new-c-declare" "%%cdr" "code" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-named-declare-modifiers" #f 2607 8 2607 38 ()}
      {Lisp-Entry "jazz.parse-c-named-declare" #f 2612 9 2612 35 ("values" "jazz.Any" "type" "let" "code" "name" "jazz.bind" "jazz.c-named-declare-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-named-declare-declaration" #f 2619 9 2619 46 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-c-named-declare-declaration" "new-declaration" "let" "%%cdr" "jazz.parse-c-named-declare" "code" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-named-declare-reference" #f 2626 9 2626 47 ("%%get-declaration-locator" "jazz.walk-error" "jazz.C-Named-Declare-Declaration" "%%class-is?" "if" "jazz.lookup-reference" "c-named-declare-declaration" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-named-declare" #f 2633 9 2633 34 ("jazz.find-form-declaration" "new-declaration" "%%cdr" "jazz.parse-c-named-declare" "code" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-initialize" #f 2646 9 2646 31 ("jazz.new-c-initialize" "%%cdr" "code" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-type-modifiers" #f 2657 8 2657 29 ()}
      {Lisp-Entry "jazz.parse-c-type" #f 2662 9 2662 26 ("declare" "scheme-to-c" "c-to-scheme" "values" "%%null?" "if" "jazz.Any" "type" "let" "conversions" "c-type" "name" "jazz.bind" "jazz.c-type-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-type-declaration" #f 2672 9 2672 37 ("jazz.add-declaration-child" "effective-declaration" "%%get-c-type-declaration-pointer-types" "cons" "%%set-c-type-declaration-pointer-types" "%%when" "jazz.new-c-type-declaration" "new-declaration" "jazz.walk-error" "jazz.resolve-c-named-declare-reference" "%%cons" "%%string?" "let" "jazz.resolve-c-type" "references" "base-type-declaration" "expansion" "kind" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-c-type" "declare" "scheme-to-c" "c-to-scheme" "c-type" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-type" #f 2689 9 2689 25 ("jazz.find-form-declaration" "%%cdr" "jazz.parse-c-type" "declare" "scheme-to-c" "c-to-scheme" "c-type" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-type" #f 2695 9 2695 28 ("jazz.queue-list" "base-type-declaration" "expansion" "kind" "receive" "jazz.error" "else" "'union" "union" "'struct" "struct" "map" "'function" "result-type" "parameter-types" "function" "and" "resolve-expansion" "'pointer" "base-type" "pointer" ",@tag-rest" ",c-string" "%%cdr" "tag-rest" "c-string" "jazz.bind" "%%cadr" "'native" "native" "%%car" "case" "%%pair?" "'type" "%%string?" "%%get-declaration-locator" "alias" "'alias" "values" "jazz.enqueue" "jazz.resolve-c-type-reference" "c-type-declaration" "%%symbol?" "cond" "resolve" "define" "jazz.new-queue" "queue" "let" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-type-reference" #f 2735 9 2735 38 ("%%get-declaration-locator" "jazz.walk-error" "jazz.C-Type-Declaration" "%%class-is?" "if" "jazz.lookup-reference" "c-type-declaration" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-type-reference" #f 2742 9 2742 37 ("%%get-library-declaration-references" "%%append" "%%set-library-declaration-references" "%%get-declaration-toplevel" "library-declaration" "let" "jazz.resolve-c-type" "references" "base-type-declaration" "expansion" "kind" "receive" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-function" #f 2754 9 2754 29 (",c-name-or-code" "map" "c-lambda" "jazz.new-c-function" "jazz.expand-c-type-reference" "type" "lambda" "resolve-access" "%%cdr" "c-name-or-code" "result-type" "types" "jazz.bind" "jazz.error" "%%length" "4" "=" "list?" "and" "%%assertion" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-definition-modifiers" #f 2768 8 2768 35 ()}
      {Lisp-Entry "jazz.parse-c-definition" #f 2773 9 2773 32 ("values" "%%cdr" "parameters" "jazz.Any" "type" "%%car" "name" "let" "body" "scope" "c-name" "result-type" "parameter-types" "signature" "jazz.bind" "jazz.c-definition-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-definition-declaration" #f 2782 9 2782 43 ("jazz.add-declaration-child" "effective-declaration" "map" "jazz.new-c-definition-declaration" "new-declaration" "jazz.walk-parameters" "signature" "jazz.expand-c-type-reference" "lambda" "resolve-access" "let" "%%cdr" "jazz.parse-c-definition" "body" "scope" "c-name" "result-type" "parameter-types" "parameters" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-definition" #f 2791 9 2791 31 ("%%set-declaration-source" "jazz.walk-body" "%%set-c-definition-declaration-body" "%%set-c-definition-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-c-definition" "body" "scope" "c-name" "result-type" "parameter-types" "parameters" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.build-pointer-symbol" #f 2808 9 2808 34 ("%%symbol->string" "%%string-append" "%%string->symbol" "type")}
      {Lisp-Entry "jazz.pointer?" #f 2812 9 2812 22 ("1" "%%fx-" "%%string-ref" "%%eq?" "%%string-length" "lgt" "%%symbol->string" "str" "let*" "type")}
      {Lisp-Entry "jazz.build-method-symbol" #f 2818 9 2818 33 ("map" "symbol->string" "string-append" "apply" "%%string->symbol" "rest" "struct")}
      {Lisp-Entry "jazz.parse-structure-name" #f 2822 9 2822 34 ("%%cddr" "%%cadr" "%%car" "%%symbol->string" "values" "%%symbol?" "if" "name")}
      {Lisp-Entry "jazz.kind+type" #f 2828 11 2828 25 ("values" "car" "alias" "'alias" "eq?" "if" "%%get-c-type-declaration-references" "references" "%%get-c-type-declaration-expansion" "expansion" "%%get-c-type-declaration-kind" "kind" "jazz.resolve-c-type-reference" "loop" "let" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-accessor" #f 2837 11 2837 31 ("values" ",setter-string" "void" "-set!" "'-set!" "setter" ",getter-string" ",type" ",struct*" "c-function" "-ref" "'-ref" "jazz.build-method-symbol" "definition" "getter" "%%memq" "wchar_t-string" "char-string" "type*" "jazz.build-pointer-symbol" "struct*" "let*" "'type" "'union" "'struct" "else" "number->string" "size-string" "cond" "setter-string" "union" "function" "pointer" "native" "case" "%%string-append" "wchar_t" "'wchar_t" "char" "'char" "%%eq?" "or" "if" "getter-string" "%%symbol->string" "id-string" "jazz.kind+type" "expansion" "kind" "receive" "jazz.walk-error" "%%symbol?" "%%integer?" "%%when" "%%null?" "%%not" "and" "%%cddr" "clause-rest" "size" "%%cadr" "id" "%%car" "type" "let" "struct" "clause" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-structure/union" #f 2901 9 2901 36 ("map" "append" "apply" "unsigned-int" "'sizeof" "void" "native" "free" "'free" "c-function" "make" "'make" "jazz.build-method-symbol" "definition" ",@tag*-rest" "pointer" ",struct*" ",@tag-rest" ",c-struct-string" "type" ",struct" "c-type" "begin" "%%list" "jazz.expand-accessor" "setter" "getter" "clause" "expand-accessor" "define" "cdr" "car" "cons" "null?" "if" "tag*-rest" "%%string-append" "sizeof" "jazz.build-pointer-symbol" "struct*" "let" "jazz.parse-structure-name" "tag-rest" "c-struct-string" "struct" "receive" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-structure" #f 2997 9 2997 32 ("jazz.expand-structure/union" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-structure-array" #f 3001 9 3001 38 ("array-element" "'array-element" "%%string-append" ",struct*" "int" "c-function" "array-make" "'array-make" "jazz.build-method-symbol" "definition" "begin" "%%symbol->string" "%%car" "%%null?" "%%not" "if" "c-struct-string" "jazz.build-pointer-symbol" "struct*" "struct" "let*" "rest" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-union" #f 3012 9 3012 28 ("jazz.expand-structure/union" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-external" #f 3021 9 3021 31 (",c-name" ",type" ",params" "c-function" ",s-name" "definition" "%%symbol->string" "%%null?" "if" "c-name" "%%cdr" "params" "%%car" "s-name" "let*" "rest" "signature" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-external-so" #f 3030 9 3030 34 ("WCHAR-string" "values" ",ext-s-name" "result" "WCHAR-copy" "1" ",string-param" "string-length" "+" "WCHAR-array-make" "pt" "let" ",@new-params" ",s-name" "definition" ",c-name" "%%cons" ",type" "c-external" "begin" "%%null?" "if" "c-name" "list-ref" "string-param" "jazz.generate-symbol" "param" "lambda" "map" "new-params" "%%cdr" "params" "%%symbol->string" "%%string-append" "%%string->symbol" "ext-s-name" "%%car" "s-name" "let*" "rest" "signature" "arg" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-function" #f 3052 9 3052 28 ("values" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "body" "%%car" "%%desourcify" "parameters" "jazz.source-code" "%%cdr" "rest" "let*" "form-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-function" #f 3060 9 3060 27 (",@body" ",parameters" "lambda" "jazz.walk-lambda" "jazz.parse-function" "body" "parameters" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-parameterize" #f 3073 9 3073 31 ("jazz.walk-body" "jazz.queue-list" "jazz.new-parameterize" "jazz.walk" "%%cons" "jazz.enqueue" "%%cdr" "value" "%%car" "variable" "continuation-capture" "binding-form" "lambda" "for-each" "jazz.new-queue" "expanded-bindings" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "%%cddr" "body" "%%cadr" "jazz.source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-slots" #f 3100 9 3100 29 (",@body" ",setter-name" "',setter-name" "value" "',object-symbol" ",getter-name" "',getter-name" "%%list" "%%get-slot-declaration-setter-name" "setter-name" "%%get-slot-declaration-getter-name" "getter-name" "jazz.lookup-reference" "slot-declaration" "let*" "slot-name" "lambda" "map" "let-symbol" ",object" ",object-symbol" "jazz.walk" "jazz.generate-symbol" "object-symbol" "%%cdr" "body" "object" "slot-names" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-time" #f 3120 9 3120 23 ("jazz.walk" "jazz.new-time-special" "%%cadr" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-form" #f 3131 9 3131 25 ("nextmethod" "cons" "get-class-forms" "get-class-form" "method" "',class-locator" "register-form" ",class-locator" ",form" "',form" "jml->form>>" "class-form" "definition" "begin" "%%get-declaration-locator" "class-locator" "class-declaration" "let*" "form" "environment" "declaration" "resume" "walker")}}})
"ecase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "ecase.scm"} 1228877389
    {Lisp-Entry "jazz.dialect.syntax.ecase" #f 37 9 37 34 ("scheme")
      {Lisp-Entry "ecase" #f 50 9 50 14 ("=" "'=" "integer?" "eqv?" "'eqv?" "list" "or" "'or" "pair?" "cons" "else" "'else" "eq?" "cdr" "body" "car" "desourcify" "value" "clause" "map" "cond" "symbol" "lambda" "with-uniqueness" "sourcify-if" "cddr" "clauses" "source-code" "cadr" "target" "let" "form-src")}}})
"either"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "either.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.either" #f 37 9 37 35 ("scheme")
      {Lisp-Entry "either" #f 48 9 48 15 ("'let" "generate-symbol" "symbol" "'if" "list" "rest" "expr" "bind" "pair" "lambda" "proc" "letrec" "set!" "car" "symbol?" "when" "not" "while" "complex?" "scan" "sourcify-if" "error" "null?" "if" "source-code" "cdr" "expressions" "let" "form-src")}}})
"enumeration"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "enumeration.scm"} 1226584778})
"essay"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "essay.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.essay" #f 37 9 37 34 ("scheme")
      {Lisp-Entry "essay" #f 46 9 46 14 (",expr" ",@tests" "and" "when" "last" "expr" "butlast" "tests" "sourcify-if" "error" "null?" "if" "source-code" "cdr" "expressions" "let" "form-src")}}})
"exception"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "exception.scm"} 1237728672
    {Lisp-Entry "jazz.dialect.core.exception" #f 39 8 39 35 ()
      {Lisp-Entry "jazz.get-exception-hook" #f 47 9 47 32 ("##primordial-exception-handler-hook")}
      {Lisp-Entry "jazz.set-exception-hook" #f 50 9 50 32 ("##primordial-exception-handler-hook" "set!" "hook")}
      {Lisp-Entry "jazz.invoke-exception-hook" #f 54 9 54 35 ("##thread-end-with-uncaught-exception!" "exc" "hook")}
      {Lisp-Entry "jazz.system-exception-hook" #f 63 9 63 35 ("##repl-exception-handler-hook" "jazz.setup-terminal" "other" "exc")}
      {Lisp-Entry "jazz.setup-terminal" #f 73 9 73 28 ("jazz.bring-terminal-to-front" "jazz.set-terminal-title" "begin" "repl-output-port" "tty?" "if")}
      {Lisp-Entry "jazz.set-terminal-title" #f 80 9 80 32 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.bring-terminal-to-front" #f 83 9 83 37 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.clear-terminal" #f 86 9 86 28 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.with-exception-filter" #f 95 9 95 35 ("%%continuation-graft" "filter-exc" "if" "exc" "with-exception-handler" "catcher-cont" "lambda" "%%continuation-capture" "current-exception-handler" "previous-handler" "let" "thunk" "catcher" "filter")}
      {Lisp-Entry "jazz.with-exception-propagater" #f 120 9 120 39 ("current-exception-handler" "let" "%%continuation-graft" "raise-cont" "exc" "with-exception-handler" "catcher-cont" "lambda" "%%continuation-capture" "thunk" "handler")}}})
"foreign"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "foreign.scm"} 1228854445
    {Lisp-Entry "jazz.dialect.core.foreign" #f 37 8 37 33 ()
      {Lisp-Entry "jazz.foreign?" #f 42 12 42 25 ("foreign?")}
      {Lisp-Entry "jazz.foreign-address" #f 43 12 43 32 ("foreign-address")}
      {Lisp-Entry "jazz.foreign-release!" #f 44 12 44 33 ("foreign-release!")}
      {Lisp-Entry "jazz.foreign-released?" #f 45 12 45 34 ("foreign-released?")}
      {Lisp-Entry "jazz.foreign-tags" #f 46 12 46 29 ("foreign-tags")}
      {Lisp-Entry "jazz.still-obj-refcount-dec!" #f 51 13 51 41 ("%%still-obj-refcount-dec!" "foreign")}
      {Lisp-Entry "jazz.still-obj-refcount-inc!" #f 54 13 54 41 ("%%still-obj-refcount-inc!" "foreign")}}})
"increase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "increase.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.increase" #f 37 9 37 37 ("scheme")
      {Lisp-Entry "increase!" #f 43 8 43 17 (",increment" "+" ",location" "set!" "car" "1" "null?" "if" "increment" "let" "rest" "location")}
      {Lisp-Entry "decrease!" #f 51 8 51 17 (",increment" "-" ",location" "set!" "car" "1" "null?" "if" "increment" "let" "rest" "location")}}})
"install"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "install.scm"} 1237815288
    {Lisp-Entry "jazz.install" #f 37 8 37 20 ("jazz.install-jazz-literals" "jazz.register-reader-extension" "construct-lisp-entry" "'construct-lisp-entry" "Lisp-Entry" "'Lisp-Entry" "construct-lisp-file-entry" "'construct-lisp-file-entry" "Lisp-File-Entry" "'Lisp-File-Entry" "construct-c-export-entry" "'construct-c-export-entry" "C-Export-Entry" "'C-Export-Entry" "construct-c-include-entry" "'construct-c-include-entry" "C-Include-Entry" "'C-Include-Entry" "construct-c-define-entry" "'construct-c-define-entry" "C-Define-Entry" "'C-Define-Entry" "construct-c-category-entry" "'construct-c-category-entry" "C-Category-Entry" "'C-Category-Entry" "construct-c-file-entry" "'construct-c-file-entry" "C-File-Entry" "'C-File-Entry" "construct-version" "'construct-version" "Version" "'Version" "construct-selection-handler" "'construct-selection-handler" "Selection-Handler" "'Selection-Handler" "construct-event-handler" "'construct-event-handler" "Event-Handler" "'Event-Handler" "construct-event" "'construct-event" "Event" "'Event" "construct-cursor-resource" "'construct-cursor-resource" "Cursor-Resource" "'Cursor-Resource" "construct-icon-resource" "'construct-icon-resource" "Icon-Resource" "'Icon-Resource" "construct-bitmap-resource" "'construct-bitmap-resource" "Bitmap-Resource" "'Bitmap-Resource" "construct-formatted-text" "'construct-formatted-text" "Formatted-Text" "'Formatted-Text" "construct-text" "'construct-text" "Text" "'Text" "construct-hyperlink-style" "'construct-hyperlink-style" "Hyperlink-Style" "'Hyperlink-Style" "construct-text-style" "'construct-text-style" "Text-Style" "'Text-Style" "construct-format" "'construct-format" "Format" "'Format" "construct-ior" "'construct-ior" "IOR" "'IOR" "construct-host" "'construct-host" "Host" "'Host" "construct-directory-group" "'construct-directory-group" "Directory-Group" "'Directory-Group" "construct-directory" "'construct-directory" "Directory" "'Directory" "construct-file" "'construct-file" "File" "'File" "construct-font" "'construct-font" "Font" "'Font" "construct-color" "'construct-color" "Color" "'Color" "construct-locales" "'construct-locales" "Locales" "'Locales" "construct-shortcut" "'construct-shortcut" "Shortcut" "'Shortcut" "construct-action" "'construct-action" "Action" "'Action" "construct-box" "'construct-box" "Box" "'Box" "construct-walk-location" "'construct-walk-location" "Walk-Location" "'Walk-Location" "construct-exception-detail" "'construct-exception-detail" "Exception-Detail" "'Exception-Detail" "construct-range" "'construct-range" "Range" "'Range" "construct-rect" "'construct-rect" "Rect" "'Rect" "construct-cell" "'construct-cell" "Cell" "'Cell" "construct-dimension" "'construct-dimension" "Dimension" "'Dimension" "construct-point" "'construct-point" "jazz.literals" "'jazz.literals" "Point" "'Point" "jazz.register-jazz-literal")
      {Lisp-Entry "jazz.registered-jazz-literals" #f 45 8 45 37 ()}
      {Lisp-Entry "jazz.jazz-literals-installed?" #f 48 8 48 37 ()}
      {Lisp-Entry "jazz.register-jazz-literal" #f 52 9 52 35 ("cons" "jazz.registered-jazz-literals" "set!" "register" "jazz.jazz-literals-installed?" "if" "constructor-name" "module" "name")
        {Lisp-Entry "register" #f 53 11 53 19 ()}}
      {Lisp-Entry "jazz.install-jazz-literals" #f 67 8 67 34 ("set!" "jazz.registered-jazz-literals" "literal" "for-each" "jazz.dialect" "'jazz.dialect" "core.library" "'core.library" "jazz.load-module" "begin" "jazz.jazz-readtable" "'jazz.jazz-readtable" "jazz.global-value" "jazz.jazz-literals-installed?" "if" "lambda")}}})
"list"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "list.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.list" #f 37 8 37 30 ()
      {Lisp-Entry "jazz.proper-list" #f 40 9 40 25 ("jazz.queue-list" "%%cdr" "set!" "%%car" "jazz.enqueue" "%%pair?" "%%while" "jazz.new-queue" "proper" "let" "lst")}}})
"loop"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "loop.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.loop" #f 37 9 37 33 ("scheme")
      {Lisp-Entry "loop" #f 131 9 131 13 ("expand-loop" "sourcify-if" "source-code" "cdr" "clauses" "let" "form-src")}
      {Lisp-Entry "noobject" #f 138 8 138 16 ("noobject" "'noobject" "list")}
      {Lisp-Entry "expand-loop" #f 142 9 142 20 ("set-cdr!" "'set-cdr!" "'begin" "jazz.null?" "'jazz.null?" "'cons" "'<list+>" "'<list>" "cns" "ptr" ",@unless-actions" "unless-actions" ",@when-actions" ",test" "when-actions" "body" "'when" "res" "what" ">" "'>" "rpt" "count" "specifier?" "then" "then-key" "first" "symbol?" "end" "decrease!" "'decrease!" ">=" "'>=" "downto" "below" "cddr" "<=" "'<=" "cadr" "scan" "by" "'increase!" "update" "to" "from" "in-properties" "1" "+" "'+" "element" "'element" "<" "'<" "length" "'length" "'<fx>" "'<vector>" "len" "vec" "vector" "in-vector" "get-next" "'get-next" "done?" "'done?" "iterate-sequence" "'iterate-sequence" "Iterator" "'Iterator" "is?" "'is?" "'if" "'<Iterator>" "itr" "val" "iterator" "in-sequence" "error" "remainder" "keyword" "'cdr" "'car" "'set!" "'null?" "either" "'<Object>" "in" "parse-for" "receive" "lst" "set-finally" "expr" "add-epilogue" "after" "add-after" "enqueue-list" "action-list" "add-actions" "action" "before" "add-before" "test" "add-test" "exit-safe" "values" "'not" "add-initial-test" "'<bool>" "'<Object+>" "ext" "ret" "get-return/exit" "add-with" "append" "list" "binding" "null?" "value" "type" "variable" "add-binding" "cons" "Unbound" "increase!" "->string" "string-append" "string->symbol" "symbol" "prefix" "unique" ",@finally" "begin" ",return" ",exit" "eq?" ",@epilogue" ",@afters" ",@actions" ",withs" ",@befores" ",@tests" "and" ",bindings" "let*" "queue-list" "cdr" "else" "process-finally" "process-return" "process-collect" "collect" "process-sum" "sum" "process-do" "do" "process-unless" "unless" "process-when" "when" "process-every" "every" "process-some" "some" "process-repeat" "repeat" "process-for" "for" "process-with" "with" "case" "rest" "key" "bind" "add-action" "source-code" "pair?" "not" "if" "car" "clause" "not-null?" "while" "new-queue" "expand-loop" "process-clauses" "set!" "expand" "define" "0" "unique-rank" "finally" "epilogue" "afters" "actions" "befores" "withs" "tests" "exit" "noobject" "return" "bindings" "let" "clauses")}}})
"macros"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "macros.scm"} 1228877389
    {Lisp-Entry "jazz.dialect.syntax.macros" #f 37 9 37 35 ("scheme")
      {Lisp-Entry "constant" #f 43 9 43 17 (",value" ",name" "definition" "sourcify-if" "caddr" "value" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "enumeration" #f 51 9 51 20 (",@definitions" "begin" "definition" "declaration" "lambda" "map" "definitions" "sourcify-if" "cddr" "declarations" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "when" #f 60 9 60 13 ("unspecified" "'unspecified" "list" "null?" "begin" ",test" "if" "sourcify-if" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "unless" #f 73 9 73 15 (",@body" "begin" ",test" "not" "if" "sourcify-if" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "prog1" #f 83 9 83 14 (",@body" "begin" ",returned" ",value" "sourcify-if" "generate-symbol" "value" "cddr" "body" "source-code" "cadr" "returned" "let" "form-src")}
      {Lisp-Entry "while" #f 94 9 94 14 (",@body" "begin" ",test" "if" ",iter" "sourcify-if" "generate-symbol" "iter" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "unwind-protect" #f 107 9 107 23 (",@protection" ",body" "function" "dynamic-wind" "sourcify-if" "cddr" "protection" "source-code" "cadr" "body" "let" "form-src")}
      {Lisp-Entry "catch" #f 120 9 120 14 ("desourcify" "error" "else" "car" "pair?" ",@body" "exc" "lambda" ",type" "call-with-catch" "symbol?" "cond" "sourcify-if" "cddr" "body" "source-code" "cadr" "type" "let" "form-src")}
      {Lisp-Entry "~" #f 137 9 137 10 (",name" "',name" ",obj" "dispatch" "apply" "rest" "obj" "lambda" "with-uniqueness" "sourcify-if" "cddr" "car" "object" "cadr" "source-code" "name" "let" "form-src")}
      {Lisp-Entry "form>>" #f 148 8 148 14 ("form")}
      {Lisp-Entry "expand-push!" #f 154 9 154 21 ("cons" "'cons" "set!" "'set!" "list" "value" "location")}
      {Lisp-Entry "expand-pop!" #f 160 9 160 20 ("cdr" "'cdr" "set!" "'set!" "list" "location")}
      {Lisp-Entry "expand-assert" #f 164 9 164 22 ("proc" "car" "error" "'error" "unless" "'unless" "list" ":text" "->string" "string-append" "message" "expr" "let*" "null?" "if" "rest" "first")}
      {Lisp-Entry "expand-assert-type" #f 175 9 175 27 ("type-name" "'type-name" "error" "'error" "is-not?" "'is-not?" "when" "'when" "list" "let*" "'let*" "cons" "generate-symbol" "value" "let" "type" "expr")}
      {Lisp-Entry "expand-error?" #f 183 9 183 22 ("begin" "'begin" "cons" "Error" "'Error" "catch" "'catch" "list" "generate-symbol" "err" "let" "body")}
      {Lisp-Entry "c-constant" #f 196 9 196 19 (",value" ",name" "definition" "sourcify-if" "caddr" "value" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "c-enumeration" #f 204 9 204 22 (",@definitions" "begin" "definition" "declaration" "lambda" "map" "definitions" "sourcify-if" "cddr" "declarations" "source-code" "cadr" "name" "let" "form-src")}}})
"memory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "memory.scm"} 1236952892
    {Lisp-Entry "jazz.dialect.core.memory" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.gc" #f 40 9 40 16 ("%%gc")}
      {Lisp-Entry "jazz.process-memory" #f 44 9 44 28 ("inexact->exact" "values" "19" "nonmovable" "18" "movable" "17" "live" "16" "alloc" "15" "f64vector-ref" "heap" "##process-statistics" "vec" "let")}
      {Lisp-Entry "jazz.symbols-memory" #f 57 9 57 28 ("values" "##symbol-table" "vector->list" "reverse" "cons" "2" "##vector-ref" "symbol?" "if" "loop" "map" "symbol->string" "string-length" "s" "length" "+" "set!" "lst" "lambda" "for-each" "chars" "0" "count" "let")}
      {Lisp-Entry "jazz.classes-statistics" #f 74 9 74 32 ("values" "jazz.Object" "method" "slot" "for-each" "process-method" "jazz.Method" "process-slot" "jazz.Slot" "jazz.is?" "cond" "field" "name" "lambda" "%%iterate-table" "%%get-class-interface-table" "%%get-class-class-table" "%%get-class-core-vtable" "%%get-class-slots" "%%get-class-interfaces" "%%get-category-descendants" "%%get-category-ancestors" "%%get-category-fields" "set!" "class" "process-class" "5" "3" "##vector-ref" "t" "table-size" "length" "l" "list-size" "1" "vector-ref" "vector-length" "<" "size" "n" "iter" "not" "vector-vector-size" "f64vector-length" "f64vector-size" "vector?" "if" "safe-vector-size" "##vector-length" "*" "+" "v" "vector-size" "define" "sz-methods" "nb-methods" "sz-slots" "nb-slots" "sz-interfaces" "nb-interfaces" "sz-classes" "0" "nb-classes" "32" "table-bytes" "12" "pair-bytes" "8" "f64-bytes" "4" "word-bytes" "let")}}})
"network"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "network.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.network" #f 37 8 37 33 ()
      {Lisp-Entry "jazz.open-tcp-client" #f 42 12 42 32 ("open-tcp-client")}
      {Lisp-Entry "jazz.open-tcp-server" #f 43 12 43 32 ("open-tcp-server")}
      {Lisp-Entry "jazz.tcp-server-socket-info" #f 44 12 44 39 ("tcp-server-socket-info")}
      {Lisp-Entry "jazz.call-with-tcp-client" #f 46 13 46 38 ("close-port" "if" "open-tcp-client" "set!" "lambda" "dynamic-wind" "port" "let" "proc" "settings")}
      {Lisp-Entry "jazz.socket-info-address" #f 57 12 57 36 ("socket-info-address")}
      {Lisp-Entry "jazz.socket-info-port-number" #f 58 12 58 40 ("socket-info-port-number")}}})
"number"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "number.scm"} 1235481698
    {Lisp-Entry "jazz.dialect.core.number" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.fixnum->flonum" #f 47 9 47 28 ("jazz.Fixnum" "jazz.type-error" "##fixnum->flonum" "%%fixnum?" "if" "n")}
      {Lisp-Entry "jazz.flonum->fixnum" #f 52 9 52 28 ("jazz.Flonum" "jazz.type-error" "##flonum->fixnum" "%%flonum?" "if" "n")}
      {Lisp-Entry "jazz.+infinity" #f 63 8 63 22 ("+inf.0")}
      {Lisp-Entry "jazz.-infinity" #f 66 8 66 22 ("-inf.0")}
      {Lisp-Entry "jazz.random-integer" #f 77 12 77 31 ("random-integer")}
      {Lisp-Entry "jazz.random-real" #f 78 12 78 28 ("random-real")}
      {Lisp-Entry "jazz.random-source-randomize!" #f 79 12 79 41 ("random-source-randomize!")}
      {Lisp-Entry "jazz.random-source-pseudo-randomize!" #f 80 12 80 48 ("random-source-pseudo-randomize!")}
      {Lisp-Entry "jazz.default-random-source" #f 81 12 81 38 ("default-random-source")}}})
"pathname"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "pathname.scm"} 1230921731
    {Lisp-Entry "jazz.dialect.core.pathname" #f 37 8 37 34 ()
      {Lisp-Entry "jazz.pathname-expand" #f 42 12 42 32 ("path-expand")}
      {Lisp-Entry "jazz.file-rename" #f 43 12 43 28 ("rename-file")}
      {Lisp-Entry "jazz.directory-delete" #f 44 12 44 33 ("delete-directory")}
      {Lisp-Entry "jazz.current-directory" #f 46 13 46 35 ("jazz.pathname-exists?" "if" "jazz.pathname-normalize" "current-directory" "dir" "let")}
      {Lisp-Entry "jazz.current-directory-set!" #f 53 13 53 40 ("current-directory" "dir")}
      {Lisp-Entry "jazz.with-current-directory" #f 56 13 56 40 ("current-directory" "parameterize" "thunk" "dir")}}})
"port"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "port.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.port" #f 37 8 37 30 ("jazz.dialect.language.get-console-port" "set!")
      {Lisp-Entry "jazz.close-port" #f 42 12 42 27 ("close-port")}
      {Lisp-Entry "jazz.input-port-timeout-set!" #f 43 12 43 40 ("input-port-timeout-set!")}
      {Lisp-Entry "jazz.output-port-timeout-set!" #f 44 12 44 41 ("output-port-timeout-set!")}
      {Lisp-Entry "jazz.dialect.language.get-console-port" #f 54 8 54 46 ()}
      {Lisp-Entry "jazz.get-console-port" #f 60 9 60 30 ("jazz.dialect.language.get-console-port" "if")}}})
"profile"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "profile.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.profile" #f 37 8 37 33 ()
      {Lisp-Entry "active-profile" #f 40 22 40 36 ()}
      {Lisp-Entry "profile-total" #f 41 22 41 35 ()}
      {Lisp-Entry "profile-unknown" #f 42 22 42 37 ()}
      {Lisp-Entry "profile-calls" #f 43 22 43 35 ()}
      {Lisp-Entry "profile-reset!" #f 44 22 44 36 ()}
      {Lisp-Entry "profile-start!" #f 45 22 45 36 ()}
      {Lisp-Entry "profile-stop!" #f 46 22 46 35 ()}
      {Lisp-Entry "profile-running?" #f 47 22 47 38 ()}
      {Lisp-Entry "jazz.statprof-loaded?" #f 55 8 55 29 ()}
      {Lisp-Entry "jazz.load-statprof" #f 59 9 59 27 ("set!" "statprof" "'statprof" "jazz.load-module" "begin" "jazz.statprof-loaded?" "not" "if")}
      {Lisp-Entry "jazz.active-profile" #f 66 9 66 28 ("active-profile" "jazz.load-statprof")}
      {Lisp-Entry "jazz.profile-total" #f 71 9 71 27 ("profile-total" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.profile-unknown" #f 76 9 76 29 ("profile-unknown" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.profile-calls" #f 81 9 81 27 ("profile-calls" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.reset-profile" #f 86 9 86 27 ("profile-reset!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.start-profile" #f 91 9 91 27 ("profile-start!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.stop-profile" #f 96 9 96 26 ("profile-stop!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.profile-running?" #f 101 9 101 30 ("profile-running?" "jazz.load-statprof")}}})
"reader"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "reader.scm"} 1230095412
    {Lisp-Entry "jazz.dialect.core.reader" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.make-jazz-readtable" #f 47 13 47 37 ("jazz.jazzify-readtable!" "##main-readtable" "%%readtable-copy" "readtable-max-unescaped-char-set" "readtable" "let")}
      {Lisp-Entry "jazz.jazzify-readtable!" #f 53 13 53 36 ("jazz.read-delimited-string" "%%readtable-char-sharp-handler-set!" "jazz.read-comment" "jazz.read-literal" "%%readtable-char-class-set!" "jazz.named-chars" "jazz.readtable-named-char-table" "append" "jazz.readtable-named-char-table-set!" "readtable")}
      {Lisp-Entry "jazz.named-chars" #f 60 12 60 28 ()}
      {Lisp-Entry "jazz.in-expression-comment?" #f 107 12 107 39 ("make-parameter")}
      {Lisp-Entry "jazz.read-literal" #f 111 13 111 30 ("%%desourcify" "expr" "lambda" "map" "jazz.construct-literal" "jazz.in-expression-comment?" "jazz.parse-read?" "or" "jazz.readenv-wrap" "%%build-list" "lst" "jazz.error" "peek-char" "%%eqv?" "if" "read-char" "%%readenv-current-filepos" "start-pos" "jazz.readenv-port" "port" "let" "c" "re")}
      {Lisp-Entry "jazz.read-comment" #f 124 13 124 30 ("%%read-datum-or-label-or-none-or-dot" "read" "read-char" "jazz.in-expression-comment?" "parameterize" "jazz.readenv-port" "port" "let" "c" "re")}
      {Lisp-Entry "jazz.read-delimited-string" #f 133 13 133 39 ("get-output-string" "jazz.readenv-wrap" "peek-char" "and" "else" "write-char" "case" "escaped" "%%eqv?" "%%eof-object?" "cond" "c" "iter" "open-output-string" "output" "read-char" "jazz.readenv-port" "port" "let" "start-pos" "next" "re")}
      {Lisp-Entry "jazz.jazz-readtable" #f 162 12 162 31 ("jazz.make-jazz-readtable")}
      {Lisp-Entry "jazz.with-jazz-readtable" #f 166 13 166 37 ("jazz.jazz-readtable" "current-readtable" "parameterize" "thunk")}
      {Lisp-Entry "jazz.char-symbol" #f 171 13 171 29 ("%%car" "and" "jazz.rassq" "res" "jazz.jazz-readtable" "jazz.readtable-named-char-table" "table" "let" "char")}
      {Lisp-Entry "jazz.eof-object" #f 187 13 187 28 ("#!eof")}
      {Lisp-Entry "jazz.read-u8" #f 190 12 190 24 ("read-u8")}
      {Lisp-Entry "jazz.write-u8" #f 191 12 191 25 ("write-u8")}
      {Lisp-Entry "jazz.read-subu8vector" #f 192 12 192 33 ("read-subu8vector")}
      {Lisp-Entry "jazz.write-subu8vector" #f 193 12 193 34 ("write-subu8vector")}
      {Lisp-Entry "jazz.read-line" #f 195 12 195 26 ("read-line")}
      {Lisp-Entry "jazz.read-proper-line" #f 198 13 198 34 ("%%string-shrink!" "1" "%%fx-" "%%string-ref" "%%eqv?" "0" "%%fx>" "and" "%%string-length" "len" "values" "eof-object?" "if" "read-line" "line" "let" "port")}
      {Lisp-Entry "jazz.read-all" #f 207 12 207 25 ("read-all")}
      {Lisp-Entry "jazz.with-readtable" #f 210 13 210 32 ("current-readtable" "parameterize" "thunk" "readtable")}
      {Lisp-Entry "jazz.skip-whitespace" #f 217 9 217 29 ("read-char" "peek-char" "char-whitespace?" "%%while" "port")}
      {Lisp-Entry "jazz.read-delimited" #f 222 9 222 28 ("jazz.queue-list" "read-char" "read" "jazz.enqueue" "peek-char" "%%eqv?" "%%not" "%%while" "jazz.skip-whitespace" "jazz.new-queue" "queue" "let" "delimiter" "port")}
      {Lisp-Entry "jazz.read-until" #f 232 9 232 24 ("jazz.queue-list" "jazz.enqueue" "set!" "if" "read" "%%not" "%%while" "done?" "jazz.new-queue" "queue" "expr" "let" "port" "test")}
      {Lisp-Entry "jazz.read-content" #f 244 9 244 26 ("eof-object?" "jazz.read-until" "port")}}})
"repository"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "repository.scm"} 1237815288
    {Lisp-Entry "jazz.dialect.core.repository" #f 37 8 37 36 ()
      {Lisp-Entry "jazz.repository-name" #f 45 9 45 29 ("%%repository-name" "repository")}
      {Lisp-Entry "jazz.repository-directory" #f 48 9 48 34 ("%%repository-directory" "repository")}
      {Lisp-Entry "jazz.repository-library-root" #f 51 9 51 37 ("%%repository-library-root" "repository")}
      {Lisp-Entry "jazz.repository-library-directory" #f 54 9 54 42 ("%%repository-library-directory" "repository")}
      {Lisp-Entry "jazz.repository-binary?" #f 57 9 57 32 ("%%repository-binary?" "repository")}
      {Lisp-Entry "jazz.package-repository" #f 66 9 66 32 ("%%package-repository" "package")}
      {Lisp-Entry "jazz.package-name" #f 69 9 69 26 ("%%package-name" "package")}
      {Lisp-Entry "jazz.package-project" #f 72 9 72 29 ("%%package-project" "package")}}})
"stack"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "stack.scm"} 1234973704
    {Lisp-Entry "jazz.dialect.core.stack" #f 37 8 37 31 ()
      {Lisp-Entry "jazz.get-procedure-name" #f 47 13 47 36 ("%%procedure-name" "if" "procedure")}
      {Lisp-Entry "jazz.get-continuation-stack" #f 53 13 53 40 ("jazz.queue-list" "%%continuation-next-frame" "1" "%%fx+" "jazz.enqueue" "begin" "and" "%%fx<" "not" "or" "if" "0" "d" "iter" "jazz.new-queue" "queue" "let" "depth" "cont")}
      {Lisp-Entry "jazz.get-continuation-name" #f 66 13 66 39 ("%%continuation-creator" "jazz.get-procedure-name" "cont")}
      {Lisp-Entry "jazz.collect-var-val" #f 70 13 70 33 ("##cte-parent-cte" "##inverse-eval-in-env" "##cte-top?" "if" "##object->string" "cons" "jazz.enqueue" "queue" "cte" "val" "var")}
      {Lisp-Entry "jazz.get-continuation-dynamic-environment" #f 78 13 78 54 ("jazz.queue-list" "##interaction-cte" "jazz.code-cte" "##interp-continuation-rte" "rte" "##interp-continuation-code" "$code" "%%interp-continuation?" "if" "jazz.continuation-denv" "##dynamic-env->list" "collect-parameters" "and" "jazz.new-queue" "queue" "let" "cont")
        {Lisp-Entry "collect-parameters" #f 80 15 80 33 ("%%list" "jazz.collect-var-val" "##inverse-eval-in-env" "x" "##hidden-parameter?" "%%not" "%%cdr" "val" "param" "%%car" "param-val" "let*" "%%pair?" "if" "iter" "let" "queue" "cte" "lst")}}
      {Lisp-Entry "jazz.get-continuation-lexical-environment" #f 105 13 105 54 ("jazz.queue-list" "##interaction-cte" "%%continuation-locals" "collect-locals" "begin" "jazz.code-cte" "collect-rte" "##interp-continuation-rte" "rte" "##interp-continuation-code" "$code" "%%interp-continuation?" "if" "and" "jazz.new-queue" "queue" "let" "cont")
        {Lisp-Entry "collect-rte" #f 107 15 107 26 ("else" "jazz.rte-up" "##cte-parent-cte" "jazz.collect-var-val" "##hidden-local-var?" "%%not" "%%car" "var" "%%pair?" "if" "%%vector->list" "%%cdr" "vals" "##cte-frame-vars" "vars" "loop2" "##cte-frame?" "##cte-top?" "cond" "r" "c" "loop1" "let" "queue" "rte" "cte")}
        {Lisp-Entry "collect-vars" #f 126 15 126 27 ("jazz.collect-var-val" "%%cdr" "val" "var" "%%car" "var-val" "let*" "%%pair?" "if" "iter" "let" "queue" "cte" "lst")}
        {Lisp-Entry "collect-locals" #f 135 15 135 29 ("collect-vars" "and" "queue" "cte" "lst")}}
      {Lisp-Entry "jazz.get-continuation-location" #f 152 13 152 43 ("%%continuation-locat" "jazz.locat->file/line/col" "cont")}
      {Lisp-Entry "jazz.with-repl-context" #f 156 13 156 35 ("jazz.repl-context-bind" "0" "1" "jazz.repl-context-level" "%%fx+" "jazz.make-repl-context" "context" "%%thread-repl-context-get!" "prev-context" "let" "thunk" "cont")}
      {Lisp-Entry "jazz.repl" #f 172 13 172 22 ("%%repl")}
      {Lisp-Entry "eval-within-no-winding" #f 184 13 184 35 ("##interaction-cte" "##compile-top" "%%make-source" "%%sourcify" "##compile-inner" "run" "##interp-continuation-rte" "rte" "jazz.code-cte" "cte" "##interp-continuation-code" "$code" "let*" "%%interp-continuation?" "if" "receiver" "repl-context" "cont" "src")
        {Lisp-Entry "run" #f 186 15 186 18 ("jazz.code-run" "let" "receiver" "repl-context" "jazz.repl-context-bind" "lambda" "cont" "%%continuation-graft-no-winding" "rte" "c")}}
      {Lisp-Entry "jazz.eval-within-no-winding" #f 209 13 209 40 ("car" "%%continuation-return-no-winding" "call-with-values" "results" "jazz.current-repl-context" "eval-within-no-winding" "return" "lambda" "continuation-capture" "cont" "expr")}
      {Lisp-Entry "jazz.repl-result-history-add" #f 224 13 224 41 ("%%repl-channel-result-history-add" "%%current-thread" "%%thread-repl-channel-get!" "channel" "let" "result")}
      {Lisp-Entry "jazz.inspect-repl-context" #f 234 13 234 38 ("context")}}})
"syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "syntax.scm"} 1236813153
    {Lisp-Entry "test.performance.syntax" #f 0 8 0 31 ()
      {Lisp-Entry "Z" #f 3 19 3 20 ("allocate-z" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "W" #f 11 19 11 20 ("allocate-w" "jazz.Object-Class" "Z")}}})
"system"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "system.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.system" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.open-process" #f 42 12 42 29 ("open-process")}
      {Lisp-Entry "jazz.process-status" #f 43 12 43 31 ("process-status")}
      {Lisp-Entry "jazz.exit" #f 44 12 44 21 ("exit")}
      {Lisp-Entry "jazz.switch?" #f 49 9 49 21 ("0" "string-ref" "eqv?" "or" "2" "string-length" ">=" "and" "arg")}
      {Lisp-Entry "jazz.switch-name" #f 55 9 55 25 ("string-length" "1" "substring" "arg")}
      {Lisp-Entry "jazz.command-argument" #f 59 9 59 30 ("cddr" "else" "cadr" "jazz.switch-name" "equal?" "jazz.error" "jazz.switch?" "not" "or" "cond" "car" "arg" "null?" "if" "arguments" "iter" "command-line" "cdr" "all" "let" "name")}}})
"table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "table.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.table" #f 37 8 37 31 ()
      {Lisp-Entry "jazz.table-clear" #f 40 9 40 25 ("%%table-clear" "%%table?" "%%debug-assert" "key" "table")}
      {Lisp-Entry "jazz.table-keys" #f 45 9 45 24 ("%%table-keys" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.table-length" #f 50 9 50 26 ("%%table-length" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.iterate-table" #f 55 9 55 27 ("%%iterate-table" "%%table?" "%%debug-assert" "proc" "table")}
      {Lisp-Entry "jazz.map-table" #f 60 9 60 23 ("jazz.queue-list" "jazz.enqueue" "value" "key" "lambda" "%%iterate-table" "jazz.new-queue" "queue" "let" "%%table?" "%%debug-assert" "proc" "table")}
      {Lisp-Entry "jazz.list->table" #f 69 9 69 25 ("%%list->table" "equal?" "test" "#!optional" "alist")}
      {Lisp-Entry "jazz.table->list" #f 73 9 73 25 ("%%table->list" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.table-entries" #f 78 9 78 27 ("%%table-entries" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.eq-hash" #f 85 12 85 24 ("eq?-hash")}
      {Lisp-Entry "jazz.eqv-hash" #f 86 12 86 25 ("eqv?-hash")}
      {Lisp-Entry "jazz.equal-hash" #f 87 12 87 27 ("equal?-hash")}}})
"template"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "template.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.template" #f 37 9 37 37 ("@w" "scheme")
      {Lisp-Entry "template" #f 45 8 45 16 ("type")}
      {Lisp-Entry "class" #f 52 3 52 8 ("col" "generate" "getter" "T" "row" "slot" "Object" "extends" "Cell<T>")}
      {Lisp-Entry "Cell<fx>" #f 58 13 58 21 ()}
      {Lisp-Entry "butlast<T>" #f 61 11 61 21 ("1" "cardinality" "-" "0" "subseq" "T" "seq")}
      {Lisp-Entry "butlast<string>" #f 65 13 65 28 ()}
      {Lisp-Entry "butlast" #f 68 13 68 20 ("1" "length" "-" "0" "subseq" "string" "seq")}
      {Lisp-Entry "instantiate-butlast" #f 73 8 73 27 ("type")}}})
"templates"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "templates.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.templates" #f 37 9 37 38 ("scheme")
      {Lisp-Entry "instantiate-for-each" #f 45 8 45 28 ("T" "name")}
      {Lisp-Entry "instantiate-butlast" #f 54 8 54 27 ("T")}
      {Lisp-Entry "instantiate-find" #f 61 8 61 24 ("T" "name")}
      {Lisp-Entry "instantiate-find-in" #f 80 8 80 27 ("T" "name")}
      {Lisp-Entry "instantiate-starts-with?" #f 208 8 208 32 ("T")}
      {Lisp-Entry "instantiate-ends-with?" #f 216 8 216 30 ("T")}}})
"thread"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "thread.scm"} 1230095412
    {Lisp-Entry "jazz.dialect.core.thread" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.current-thread" #f 47 12 47 31 ("current-thread")}
      {Lisp-Entry "jazz.thread?" #f 48 12 48 24 ("thread?")}
      {Lisp-Entry "jazz.make-thread" #f 49 12 49 28 ("make-thread")}
      {Lisp-Entry "jazz.make-root-thread" #f 50 12 50 33 ("make-root-thread")}
      {Lisp-Entry "jazz.thread-name" #f 51 12 51 28 ("thread-name")}
      {Lisp-Entry "jazz.thread-specific" #f 52 12 52 32 ("thread-specific")}
      {Lisp-Entry "jazz.thread-specific-set!" #f 53 12 53 37 ("thread-specific-set!")}
      {Lisp-Entry "jazz.thread-base-priority" #f 54 12 54 37 ("thread-base-priority")}
      {Lisp-Entry "jazz.thread-base-priority-set!" #f 55 12 55 42 ("thread-base-priority-set!")}
      {Lisp-Entry "jazz.thread-priority-boost" #f 56 12 56 38 ("thread-priority-boost")}
      {Lisp-Entry "jazz.thread-priority-boost-set!" #f 57 12 57 43 ("thread-priority-boost-set!")}
      {Lisp-Entry "jazz.thread-start!" #f 58 12 58 30 ("thread-start!")}
      {Lisp-Entry "jazz.thread-yield!" #f 59 12 59 30 ("thread-yield!")}
      {Lisp-Entry "jazz.thread-sleep!" #f 60 12 60 30 ("thread-sleep!")}
      {Lisp-Entry "jazz.thread-terminate!" #f 61 12 61 34 ("thread-terminate!")}
      {Lisp-Entry "jazz.thread-join!" #f 62 12 62 29 ("thread-join!")}
      {Lisp-Entry "jazz.thread-send" #f 63 12 63 28 ("thread-send")}
      {Lisp-Entry "jazz.thread-receive" #f 64 12 64 31 ("thread-receive")}
      {Lisp-Entry "jazz.thread-interrupt!" #f 65 12 65 34 ("thread-interrupt!")}
      {Lisp-Entry "jazz.thread-thread-group" #f 66 12 66 36 ("thread-thread-group")}
      {Lisp-Entry "jazz.thread-group->thread-group-list" #f 67 12 67 48 ("thread-group->thread-group-list")}
      {Lisp-Entry "jazz.thread-group->thread-group-vector" #f 68 12 68 50 ("thread-group->thread-group-vector")}
      {Lisp-Entry "jazz.thread-group->thread-list" #f 69 12 69 42 ("thread-group->thread-list")}
      {Lisp-Entry "jazz.thread-group->thread-vector" #f 70 12 70 44 ("thread-group->thread-vector")}
      {Lisp-Entry "jazz.thread-state" #f 71 12 71 29 ("thread-state")}
      {Lisp-Entry "jazz.thread-state-abnormally-terminated-reason" #f 72 12 72 58 ("thread-state-abnormally-terminated-reason")}
      {Lisp-Entry "jazz.thread-state-abnormally-terminated?" #f 73 12 73 52 ("thread-state-abnormally-terminated?")}
      {Lisp-Entry "jazz.thread-state-active-timeout" #f 74 12 74 44 ("thread-state-active-timeout")}
      {Lisp-Entry "jazz.thread-state-active-waiting-for" #f 75 12 75 48 ("thread-state-active-waiting-for")}
      {Lisp-Entry "jazz.thread-state-active?" #f 76 12 76 37 ("thread-state-active?")}
      {Lisp-Entry "jazz.thread-state-initialized?" #f 77 12 77 42 ("thread-state-initialized?")}
      {Lisp-Entry "jazz.thread-state-normally-terminated-result" #f 78 12 78 56 ("thread-state-normally-terminated-result")}
      {Lisp-Entry "jazz.thread-state-normally-terminated?" #f 79 12 79 50 ("thread-state-normally-terminated?")}
      {Lisp-Entry "jazz.thread-state-uninitialized?" #f 80 12 80 44 ("thread-state-uninitialized?")}
      {Lisp-Entry "jazz.mutex?" #f 92 12 92 23 ("mutex?")}
      {Lisp-Entry "jazz.make-mutex" #f 93 12 93 27 ("make-mutex")}
      {Lisp-Entry "jazz.mutex-name" #f 94 12 94 27 ("mutex-name")}
      {Lisp-Entry "jazz.mutex-specific" #f 95 12 95 31 ("mutex-specific")}
      {Lisp-Entry "jazz.mutex-specific-set!" #f 96 12 96 36 ("mutex-specific-set!")}
      {Lisp-Entry "jazz.mutex-state" #f 97 12 97 28 ("mutex-state")}
      {Lisp-Entry "jazz.mutex-lock!" #f 98 12 98 28 ("mutex-lock!")}
      {Lisp-Entry "jazz.mutex-unlock!" #f 99 12 99 30 ("mutex-unlock!")}
      {Lisp-Entry "jazz.mutex-owner" #f 101 13 101 29 ("jazz.btq-owner" "mutex")}
      {Lisp-Entry "jazz.mutex-wait" #f 104 13 104 28 ("mutex-unlock!" "mutex-lock!" "mutex")}
      {Lisp-Entry "jazz.condition?" #f 118 12 118 27 ("condition-variable?")}
      {Lisp-Entry "jazz.make-condition" #f 119 12 119 31 ("make-condition-variable")}
      {Lisp-Entry "jazz.condition-name" #f 120 12 120 31 ("condition-variable-name")}
      {Lisp-Entry "jazz.condition-specific" #f 121 12 121 35 ("condition-variable-specific")}
      {Lisp-Entry "jazz.condition-specific-set!" #f 122 12 122 40 ("condition-variable-specific-set!")}
      {Lisp-Entry "jazz.condition-signal!" #f 123 12 123 34 ("condition-variable-signal!")}
      {Lisp-Entry "jazz.condition-broadcast!" #f 124 12 124 37 ("condition-variable-broadcast!")}}})
"time"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "time.scm"} 1236813153
    {Lisp-Entry "test.performance.time" #f 0 8 0 29 ("new-z" "f-vtable" "f-generic" "f-separate" "iterations" "new-x" "f-module" "time")
      {Lisp-Entry "iterations" #f 3 8 3 18 ("100000000")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "time.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.time" #f 37 8 37 30 ()
      {Lisp-Entry "jazz.current-systime" #f 40 8 40 28 ("current-time")}
      {Lisp-Entry "jazz.systime?" #f 41 8 41 21 ("time?")}
      {Lisp-Entry "jazz.systime->seconds" #f 42 8 42 29 ("time->seconds")}
      {Lisp-Entry "jazz.seconds->systime" #f 43 8 43 29 ("seconds->time")}
      {Lisp-Entry "jazz.process-times" #f 44 8 44 26 ("process-times")}
      {Lisp-Entry "jazz.cpu-time" #f 45 8 45 21 ("cpu-time")}
      {Lisp-Entry "jazz.real-time" #f 46 8 46 22 ("real-time")}}})
"typecase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "typecase.scm"} 1228877389
    {Lisp-Entry "jazz.dialect.syntax.typecase" #f 38 9 38 37 ("scheme")
      {Lisp-Entry "typecase" #f 51 9 51 17 (",value" ",variable" "is?" "or" "pair?" ",@body" "else" "'else" "eq?" "cdr" "body" "car" "desourcify" "value" "clause" "map" "cond" "variable" "lambda" "with-uniqueness" "sourcify-if" "cddr" "clauses" "source-code" "cadr" "target" "let" "form-src")}}})
"variables"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "variables.scm"} 1236813153
    {Lisp-Entry "SEPARATE" #f 4 8 4 16 ("2")}
    {Lisp-Entry "inc-separate" #f 7 9 7 21 ("-" "1" "+" "SEPARATE" "set!" "begin" "0" ">" "if" "n" "iter" "let" "cnt")}
    {Lisp-Entry "BLOCK" #f 19 8 19 13 ("3")}
    {Lisp-Entry "inc-block" #f 22 9 22 18 ("-" "1" "+" "BLOCK" "set!" "begin" "0" ">" "if" "n" "iter" "let" "cnt")}})
"vb"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "vb.scm"} 1236813153
    {Lisp-Entry "VAR" #f 5 8 5 11 ("2")}
    {Lisp-Entry "inc" #f 8 9 8 12 ("##fixnum.-" "1" "##fixnum.+" "VAR" "set!" "begin" "0" "##fixnum.>" "if" "n" "iter" "let" "cnt")}})
"vector"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "vector.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.vector" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.vector-copy" #f 45 8 45 24 ("vector-copy")}}})
"vs"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "test" "performance" "vs.scm"} 1236813153
    {Lisp-Entry "VAR" #f 4 8 4 11 ("2")}
    {Lisp-Entry "inc" #f 7 9 7 12 ("##fixnum.-" "1" "##fixnum.+" "VAR" "set!" "begin" "0" "##fixnum.>" "if" "n" "iter" "let" "cnt")}})
"with"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "with.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.with" #f 37 9 37 33 ("scheme")
      {Lisp-Entry "with" #f 44 9 44 13 ("reverse" "car" "release" "binding" "lambda" "map" ",@body" "begin" "prog1" ",bindings" "let*" "sourcify-if" "cddr" "body" "cadr" "source-code" "bindings" "let" "form-src")}
      {Lisp-Entry "with-closed" #f 58 9 58 20 ("close" ",@body" "function" "dynamic-wind" "caddr" ",variable" "set!" "if" "variable" ",specifier" "car" "'<Object>" "binding-specifier" "or" "specifier" "binding" "lambda" "map" "sourcify-if" "cddr" "body" "cadr" "source-code" "bindings" "let" "form-src")}}})
