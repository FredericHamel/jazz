"_io"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.io" "src" "jazz" "io" "_io.jazz"} 1253311789
    {Lisp-Entry "jazz.io" library #f 37 9 37 16 ("jazz")
      {Lisp-Entry "*eol-encoding*" definition #f 51 15 51 29 ("cr-lf" "'cr-lf")}
      {Lisp-Entry "*eol-encoding*" definition #f 54 15 54 29 ("lf" "'lf")}
      {Lisp-Entry "get-eol-encoding" definition #f 58 20 58 36 ("*eol-encoding*")}
      {Lisp-Entry "set-eol-encoding" definition #f 62 20 62 36 ("*eol-encoding*" "set!" "encoding")}
      {Lisp-Entry "*aliases*" definition #f 71 12 71 21 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-aliases" definition #f 75 20 75 31 ("*aliases*")}
      {Lisp-Entry "is-alias?" definition #f 79 20 79 29 ("find-alias" "boolean" "name")}
      {Lisp-Entry "valid-alias?" definition #f 83 20 83 32 ("is-alias?" "name")}
      {Lisp-Entry "get-alias" definition #f 87 20 87 29 ("error" "when" "find-alias" "either" "error?" "error?:" "name")}
      {Lisp-Entry "find-alias" definition #f 93 20 93 30 ("resolve-alias" "when" "get-process" "process" "let" "get-aliases" "table-ref" "either" "name")}
      {Lisp-Entry "register-alias" definition #f 100 20 100 34 ("set-alias" "error" "get-aliases" "table-ref" ":up" "second" "eq?" "2" "length" ">=" "pair?" "and" "if" "process-up" "get-list" "append" "cddr" "sub" "ignored-anchors:" "car" "list" "Directory" "new" "get-parent" "anchorize" "dir" "let" "expand-up" "define" "path" "name")}
      {Lisp-Entry "unregister-alias" definition #f 118 20 118 36 ("get-aliases" "table-clear" "name")}
      {Lisp-Entry "set-alias" definition #f 122 20 122 29 ("get-aliases" "table-set!" "path" "name")}
      {Lisp-Entry "initialize-aliases" definition #f 126 20 126 38 ("register-repositories-aliases" "pathname-normalize" "tokenise-filename" "Home" "'Home" "register-alias" "initialize-platform-aliases")}
      {Lisp-Entry "initialize-platform-aliases" definition #f 134 17 134 44 ("Network" "'Network" "register-alias")}
      {Lisp-Entry "initialize-platform-aliases" definition #f 137 17 137 44 ()}
      {Lisp-Entry "register-repositories-aliases" definition #f 141 13 141 42 ("get-repositories" "repository-packages" ",name" "package-root" "package-name" "package" "function" "for-each" "repository-binary?" "unless" "tokenise-filename" "register-alias" "repository-directory" "remove-trailing-char" "directory" "repository-name" "name" "let" "repository" "register-repository" "define")}
      {Lisp-Entry "validate-alias" definition #f 157 13 157 27 ("error" "Directory" "new" "exists?" "if" "path" "name")}
      {Lisp-Entry "extract-name" definition #f 168 20 168 32 ("cardinality" "1" "+" "subseq" "not" "if" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "extract-base" definition #f 175 20 175 32 ("0" "subseq" "not" "if" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "extract-extension" definition #f 182 20 182 37 ("cardinality" "1" "+" "subseq" "when" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "normalize-filename-separators" definition #f 190 16 190 45 ("substitute" "filename")}
      {Lisp-Entry "normalize-filename-separators" definition #f 193 16 193 45 ("filename")}
      {Lisp-Entry "tokenise-filename" definition #f 197 20 197 37 ("cdr" "remove-empty-strings" ":root" "cons" "car" "empty-string?" "if" "normalize-filename-separators" "split" "lst" "let" "filename")}
      {Lisp-Entry "tokenise-windows" definition #f 204 20 204 36 ("cardinality" "2" "subseq" "split" "remove-empty-strings" "Network" "'Network" "cons" "starts-with?" "if" "filename")}
      {Lisp-Entry "get-tmp-directory" definition #f 210 20 210 37 ("tokenise-windows" "Directory" "new" "make-string" "path" "NULL" "0" "GetTempPath" "size" "let*" "get-tmp-directory" "'get-tmp-directory" "unimplemented")}
      {Lisp-Entry "get-protocol-handler" definition #f 224 20 224 40 ("format" "message:" "Parse-Error" "new" "signal" "else" "Directory" "dir" "File" "file" "case" "keyword->symbol" "keyword?" "if" "let" "protocol")}
      {Lisp-Entry "Moniker-Class" class #f 237 7 237 20 ("Class")
        {Lisp-Entry "get-protocol" method #f 240 26 240 38 ()}}
      {Lisp-Entry "Moniker" class #f 244 7 244 14 ("Object" "Moniker-Class")
        {Lisp-Entry "compare-pathname" method #f 247 26 247 42 ("object")}
        {Lisp-Entry "present" method #f 256 26 256 33 ()}
        {Lisp-Entry "present-base" method #f 260 26 260 38 ("get-base" "->string")}
        {Lisp-Entry "present-name" method #f 264 26 264 38 ("get-name" "->string")}
        {Lisp-Entry "present-location" method #f 268 26 268 42 ("get-list" "format")}
        {Lisp-Entry "exists?" method #f 277 26 277 33 ()}
        {Lisp-Entry "read-only?" method #f 281 18 281 28 ("get-writable?" "not")}
        {Lisp-Entry "read/write?" method #f 285 18 285 29 ("get-writable?")}
        {Lisp-Entry "set-read-only" method #f 289 18 289 31 ("set-writable?")}
        {Lisp-Entry "set-read/write" method #f 293 18 293 32 ("set-writable?")}
        {Lisp-Entry "get-writable?" method #f 297 26 297 39 ()}
        {Lisp-Entry "set-writable?" method #f 301 26 301 39 ("flag")}
        {Lisp-Entry "writable?" method #f 305 26 305 35 ()}
        {Lisp-Entry "get-modification-time" method #f 309 26 309 47 ()}
        {Lisp-Entry "get-file" method #f 313 26 313 34 ()}
        {Lisp-Entry "get-name" method #f 317 26 317 34 ()}
        {Lisp-Entry "get-base" method #f 321 26 321 34 ()}
        {Lisp-Entry "get-extension" method #f 325 26 325 39 ()}
        {Lisp-Entry "get-list" method #f 329 26 329 34 ()}
        {Lisp-Entry "get-parent" method #f 333 26 333 36 ()}
        {Lisp-Entry "get-hierarchy" method #f 337 18 337 31 ("cons" "get-parent" "not" "if" "hierarchy" "self" "moniker" "loop" "let")}
        {Lisp-Entry "get-content" method #f 344 26 344 37 ("rest")}
        {Lisp-Entry "get-children" method #f 349 26 349 38 ("rest")}
        {Lisp-Entry "is-different?" method #f 353 26 353 39 ("moniker")}
        {Lisp-Entry "relocated-list" method #f 357 18 357 32 ("length" "tail" "get-list" "append" "new-root" "old-root")}
        {Lisp-Entry "load-lines" method #f 366 26 366 36 ("rest")}
        {Lisp-Entry "save-lines" method #f 370 26 370 36 ("rest" "lines")}
        {Lisp-Entry "load-form" method #f 374 26 374 35 ()}}
      {Lisp-Entry "platform-separator" definition #f 385 16 385 34 ()}
      {Lisp-Entry "platform-separator" definition #f 388 16 388 34 ()}
      {Lisp-Entry "Pathname-Class" class #f 392 7 392 21 ("Moniker" ":class")}
      {Lisp-Entry "Pathname" class #f 395 7 395 15 ("Moniker" "Pathname-Class")
        {Lisp-Entry "path" slot #f 398 8 398 12 ()}
        {Lisp-Entry "initialize" method #f 401 11 401 21 ("set-list" "validate-component" "nextmethod" "lst")}
        {Lisp-Entry "validate-component" definition #f 407 15 407 33 ("else" "cdr" "error" "car" "if" "pair?" "symbol?" "string?" "null?" "cond" "function" "validate" "letrec" "original" "let" "object")}
        {Lisp-Entry "parse" method #f 423 18 423 23 ("get-output-string" "pathname-expand" "add-suffix" "get-list" "else" "cdr" "car" "pair?" "get-alias" "is-alias?" "cons" "self" "error" "memq?" "symbol?" "set!" "if" "string?" "display" ":root" "eq?" "null?" "cond" "path" "function" "parse" "letrec" "aliases" "first?" "open-output-string" "printer" "let" "separator" "bind-optionals" "rest")}
        {Lisp-Entry "platform-parse" method #f 455 18 455 32 ("platform-separator" "parse")}
        {Lisp-Entry "add-suffix" method #f 459 29 459 39 ("printer")}
        {Lisp-Entry "relocated-pathname" method #f 463 18 463 36 ("length" "tail" "get-list" "append" "new-root" "old-root")}
        {Lisp-Entry "create" method #f 467 26 467 32 ()}
        {Lisp-Entry "move-pathname" method #f 471 18 471 31 ("parse" "file-rename" "error?" "error?:" "dst")}
        {Lisp-Entry "compare-object" method #f 475 11 475 25 (":not-equal" "else" ":equal" "get-list" "=" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "compare-pathname" method #f 484 11 484 27 ("parse" "ci=?" "Pathname" "is?" "and" "object")}
        {Lisp-Entry "valid-aliases?" method #f 489 18 489 32 ("get-list" "get-alias" "is-alias?" "and" "symbol?" "not" "item" "every?" "eq?" "or" "list" "function" "valid?" "letrec")}
        {Lisp-Entry "expand" method #f 501 18 501 24 ("get-output" "get-list" "cdr" "car" "pair?" "get-alias" "symbol?" "string?" "put" ":root" "eq?" "cond" "object" "function" "expand" "letrec" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "get-list" method #f 516 18 516 26 ("path")}
        {Lisp-Entry "set-list" method #f 520 18 520 26 ("path" "set!" "value")}
        {Lisp-Entry "get-name" method #f 524 11 524 19 ("get-list" "effective-name")}
        {Lisp-Entry "effective-name" method #f 528 11 528 25 ("else" "get-alias" "effective-name" "symbol?" ":root" "eq?" "cond" "last" "name" "let" "lst")}
        {Lisp-Entry "get-base" method #f 538 11 538 19 ("extract-base" "symbol?" "if" "get-name" "name" "let")}
        {Lisp-Entry "get-extension" method #f 545 11 545 24 ("get-name" "extract-extension")}
        {Lisp-Entry "get-parent" method #f 549 11 549 21 ("butlast" "Directory" "new" "cdr" "null?" "or" "expand" "1" "path" "length" "=" "if" "effective-path" "let")}
        {Lisp-Entry "get-brother" method #f 556 18 556 29 ("list" "get-parent" "get-list" "append" "self" "class-of" "new" "name")}
        {Lisp-Entry "new-brother" method #f 560 26 560 37 ("name")}
        {Lisp-Entry "get-directory" method #f 564 26 564 39 ()}
        {Lisp-Entry "get-attributes" method #f 568 18 568 32 ("self" "error" "when" "-1" "=" "if" "parse" "GetFileAttributes" "attributes" "let" "get-attributes" "'get-attributes" "unimplemented" "error?" "error?:")}
        {Lisp-Entry "set-attributes" method #f 578 18 578 32 ("self" "error" "not" "when" "parse" "SetFileAttributes" "ok?" "let" "set-attributes" "'set-attributes" "unimplemented" "flags")}
        {Lisp-Entry "get-writable?" method #f 586 11 586 24 ("FILE_ATTRIBUTE_READONLY" "get-attributes" "mask-bit-set?" "not")}
        {Lisp-Entry "set-writable?" method #f 592 11 592 24 ("not" "FILE_ATTRIBUTE_READONLY" "get-attributes" "mask-bit-set" "set-attributes" "set-writable?" "'set-writable?" "unimplemented" "flag")}
        {Lisp-Entry "exists?" method #f 598 11 598 18 ("parse" "file-exists?")}
        {Lisp-Entry "create-directories" method #f 602 18 602 36 ("create" "exists?" "unless" "dir" "function" "for-each" "get-parent" "cons" "set!" "while" "dirs" "expand" "Directory" "new" "scan" "get-directory" "base" "let*")}
        {Lisp-Entry "anchor-to" method #f 621 18 621 27 ("class-of" "new" "subseq" "append" "else" "continuation-return" "self" "error" "if" "<" "set!" "not" "cond" "return" "function" "continuation-capture" "unspecified" "result-list" "ci=?" "test:" "mismatch" "rank" "expd" "length" "base-length" "expand" "base-expd" "get-list" "base-list" "let*" "error?" "error?:" "anchor")}
        {Lisp-Entry "anchorize" method #f 641 18 641 27 ("car" "self" "null?" "if" "get-list" "length" "path" "key:" "<" "sort" "sorted" "error?:" "list" "Directory" "new" "anchor-to" "valid-alias?" "when" "anchor" "function" "collect" "anchored" "default-anchors" "either" "difference" "let*" "ignored-anchors" "ignored-anchors:" "anchors" "anchors:")}
        {Lisp-Entry "default-anchors" method #f 650 11 650 26 ("get-application" "application-anchors")}}
      {Lisp-Entry "pathname?" definition #f 654 27 654 36 ("Pathname" "is?" "object")}
      {Lisp-Entry "pathname=?" definition #f 658 27 658 37 ("compare-pathname" "y" "x")}
      {Lisp-Entry "pathname-exists?" definition #f 662 27 662 43 ("parse" "file-exists?" "pathname")}
      {Lisp-Entry "pathname-delete" definition #f 666 27 666 42 ("parse" "file-delete" "pathname")}
      {Lisp-Entry "pathname-modification-time" definition #f 670 27 670 53 ("parse" "file-modification-time" "pathname")}
      {Lisp-Entry "File-Class" class #f 679 7 679 17 ("Pathname" ":class")
        {Lisp-Entry "get-protocol" method #f 682 11 682 23 ("file" "'file")}}
      {Lisp-Entry "create-temporary-file" definition #f 686 20 686 41 ("tokenise-windows" "File" "new" "adjust-string" "0" "GetTempFileName" "MAX_PATH" "make-string" "filename" "let" "error" "empty-string?" "if" "parse" "dir" "get-tmp-directory" "either" "let*" "create-temporary-file" "'create-temporary-file" "unimplemented" "prefix" "prefix:" "directory" "directory:")}
      {Lisp-Entry "File" class #f 699 7 699 11 ("Pathname" "File-Class")
        {Lisp-Entry "print" method #f 702 11 702 16 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "new-brother" method #f 713 11 713 22 ("get-parent" "new-file" "name")}
        {Lisp-Entry "present" method #f 717 11 717 18 ("get-list" "format")}
        {Lisp-Entry "get-file" method #f 726 11 726 19 ("self")}
        {Lisp-Entry "get-directory" method #f 730 11 730 24 ("get-parent")}
        {Lisp-Entry "create" method #f 734 11 734 17 ("output" "function" "parse" "call-with-output-file" "create-directories" "exists?" "unless")}
        {Lisp-Entry "copy-file" method #f 743 18 743 27 ("parse" "file-copy" "delete-file" "exists?" "and" "when" "overwrite-read-only" "overwrite-read-only?" "overwrite-read-only?:" "overwrite?" "overwrite?:" "dst")}
        {Lisp-Entry "delete-file" method #f 750 18 750 29 ("parse" "file-delete" "overwrite-read-only" "self" "error" "when" "exists?" "not" "if" "error?" "error?:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "overwrite-read-only" method #f 758 11 758 30 ("set-read/write" "read-only?" "exists?" "and" "when" "overwrite-read-only?")}
        {Lisp-Entry "get-size" method #f 764 18 764 26 ("readable?:" "self" "File-Reader" "new" "reader" "with-closed" "get-size" "'get-size" "unimplemented")}
        {Lisp-Entry "get-modification-time" method #f 771 11 771 32 ("parse" "file-modification-time" "floor" "inexact->exact" "seconds->time")}
        {Lisp-Entry "set-modification-time" method #f 775 18 775 39 ("set-attributes" "NULL" "get-handle" "SetFileTime" "printer" "function" "append" "'append" "mode:" "parse" "list" "call-with-output-file" "set-read/write" "get-attributes" "at" "get-filetime" "ft" "let" "set-modification-time" "'set-modification-time" "unimplemented" "time")}
        {Lisp-Entry "touch" method #f 788 18 788 23 ("universal-date" "get-time" "set-modification-time" "touch" "'touch" "unimplemented")}
        {Lisp-Entry "get-hidden?" method #f 794 18 794 29 ("FILE_ATTRIBUTE_HIDDEN" "get-attributes" "mask-bit-set?" "get-hidden?" "'get-hidden?" "unimplemented")}
        {Lisp-Entry "set-hidden?" method #f 800 18 800 29 ("FILE_ATTRIBUTE_HIDDEN" "get-attributes" "mask-bit-set" "set-attributes" "set-hidden?" "'set-hidden?" "unimplemented" "flag")}
        {Lisp-Entry "writable?" method #f 806 11 806 20 ("CloseHandle" "INVALID_HANDLE_VALUE" "=" "if" "FILE_ATTRIBUTE_NORMAL" "OPEN_EXISTING" "NULL" "0" "GENERIC_WRITE" "parse" "CreateFile" "handle" "let" "writable?" "'writable?" "unimplemented")}
        {Lisp-Entry "clone-file" method #f 816 18 816 28 ("get-base" "format" "list" "get-directory" "get-list" "append" "File" "new" "extension")}
        {Lisp-Entry "load-lines" method #f 825 11 825 21 ("read-lines" "cr-lf" "'cr-lf" "eol-encoding:" "UTF" "'UTF" "either" "parse" "path:" "list" "call-with-input-file" "char-encoding-errors" "char-encoding-errors:" "char-encoding" "char-encoding:")}
        {Lisp-Entry "save-lines" method #f 830 11 830 21 ("write-lines" "printer" "function" "get-eol-encoding" "UTF-8" "'UTF-8" "either" "parse" "path:" "list" "call-with-output-file" "eol-encoding" "eol-encoding:" "char-encoding" "char-encoding:" "lines")}}
      {Lisp-Entry "file?" definition #f 836 27 836 32 ("File" "is?" "object")}
      {Lisp-Entry "timestamped-file" definition #f 840 20 840 36 ("1" "+" "exists?" "new-file" "file" "=" "suffix" "0" "n" "iterate" "current-date" "date->string" "timestamp" "format" "if" "prefix" "let" "ext" "base" "dir")}
      {Lisp-Entry "Directory-Class" class #f 857 7 857 22 ("Pathname" ":class")
        {Lisp-Entry "get-protocol" method #f 860 11 860 23 ("dir" "'dir")}}
      {Lisp-Entry "Directory" class #f 864 7 864 16 ("Pathname" "Directory-Class")
        {Lisp-Entry "print" method #f 867 11 867 16 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "new-brother" method #f 878 11 878 22 ("get-parent" "new-directory" "name")}
        {Lisp-Entry "present" method #f 882 11 882 18 ("get-list" "format")}
        {Lisp-Entry "get-directory" method #f 891 11 891 24 ("self")}
        {Lisp-Entry "get-modification-time" method #f 895 11 895 32 ()}
        {Lisp-Entry "get-parent" method #f 902 15 902 25 ("nextmethod" "Windows-Meta-Root" "new" "expand" "1" "path" "length" "=" "if" "effective-path" "let")}
        {Lisp-Entry "create" method #f 910 11 910 17 ("parse" "directory-create")}
        {Lisp-Entry "new-file" method #f 914 18 914 26 ("list" "null/pair?" "if" "get-list" "append" "File" "new" "name")}
        {Lisp-Entry "new-directory" method #f 918 18 918 31 ("list" "null/pair?" "if" "get-list" "append" "Directory" "new" "name")}
        {Lisp-Entry "new-unique-file" method #f 922 18 922 33 ("increase!" "either" "format" "set!" "while" "1" "suffix" "extract-extension" "ext" "extract-base" "base" "exists?" "not" "if" "new-file" "file" "let" "separator" "separator:" "name")}
        {Lisp-Entry "copy-directory" method #f 935 18 935 32 ("recursive?:" "directories?:" "files?:" "Directory" "copy-directory" "touch" "copy-file" "new" "dest" "File" "is?" "if" "eq?" "or" "iterate-directory" "get-name" "list" "get-list" "append" "path" "function" "destination" "let" "create-directories" "self" "when" "copy?" "copy?:" "touch-files?" "touch-files?:" "feedback" "feedback:" "copier" "copier:" "dst")}
        {Lisp-Entry "delete-directory" method #f 959 26 959 42 ("remove-directory" "empty-directory" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "empty-directory" method #f 964 18 964 33 ("recursive?:" "directories?:" "files?:" "delete-directory" "delete-file" "File" "is?" "if" "path" "function" "iterate-directory" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "remove-directory" method #f 975 18 975 34 ("parse" "directory-delete")}
        {Lisp-Entry "get-content" method #f 979 18 979 29 ("get-output" "collect-leaves" "collect-nodes" "when" "List-Factory" "new" "fact" "let" "leaves?" "leaves?:" "nodes?" "nodes?:")}
        {Lisp-Entry "collect-nodes" method #f 986 11 986 24 ("recursive?:" "directories?:" "files?:" "put" "item" "function" "iterate-directory" "fact")}
        {Lisp-Entry "collect-leaves" method #f 995 11 995 25 ("recursive?:" "directories?:" "files?:" "put" "item" "function" "iterate-directory" "fact")}
        {Lisp-Entry "add-suffix" method #f 1009 11 1009 21 ("write-char" "printer")}
        {Lisp-Entry "collect-files" method #f 1018 18 1018 31 ("get-output" "recursive?:" "put" "when" "file" "function" "iterate-directory" "List-Factory" "new" "fact" "let" "predicate")}
        {Lisp-Entry "iterate-directory" method #f 1033 26 1033 43 ("'directory" "Directory" "'file" "append" "File" "new" "file" "case" "kind" "list" "function" "parse" "iterate-directory-content" "get-list" "if" "directory" "let" "ignored-directories" "ignored-directories:" "recursive?" "recursive?:" "sort?" "sort?:" "directories?" "directories?:" "files?" "files?:" "full?" "full?:" "proc")}
        {Lisp-Entry "iterate-directory-content" method #f 1042 11 1042 36 ("file" "'file" "files" "'files" "directory" "'directory" "concatenate" "list" "append" "iterate-directory-content" "when" "name" "function" "directories" "'directories" "iterate-content" "proc" "base" "prefix" "ignored-directories" "recursive?" "sort?" "directories?" "files?")}
        {Lisp-Entry "iterate-content" method #f 1055 11 1055 26 ("for-each" "ci<?" "sort" "sorted" "cons" "set!" "object" "function" "list" "let" "iterate-content-unsorted" "not" "if" "proc" "ignored-directories" "sort?" "kind" "base")}
        {Lisp-Entry "iterate-content-unsorted" method #f 1066 11 1066 35 ("directory-content-patch" "member?" "not" "directory" "'directory" "directories" "'directories" "regular" "'regular" "files" "'files" "eq?" "and" "or" "pathname-type" "type" "file-exists?" "when" "string-append" "path" "let" "name" "function" "for-each" "proc" "ignored-directories" "kind" "base")}
        {Lisp-Entry "directory-content-patch" definition #f 1082 19 1082 42 ("directory-content" "path")}
        {Lisp-Entry "directory-content-patch" definition #f 1085 19 1085 42 ("dot-and-dot-dot" "'dot-and-dot-dot" "ignore-hidden:" "path:" "list" "directory-content" "path")}
        {Lisp-Entry "count-files" method #f 1089 18 1089 29 ("continuation-return" ">" "and" "increase!" "not" "or" "when" "file" "iterate-directory" "return" "function" "continuation-capture" "0" "count" "let" "max-count" "max-count:" "filter" "filter:")}}
      {Lisp-Entry "Windows-Meta-Root" class #f 1105 24 1105 41 ("Pathname")
        {Lisp-Entry "initialize" method #f 1108 15 1108 25 ()}
        {Lisp-Entry "get-name" method #f 1112 15 1112 23 ()}
        {Lisp-Entry "present" method #f 1116 15 1116 22 ("get-name")}
        {Lisp-Entry "get-parent" method #f 1120 15 1120 25 ()}
        {Lisp-Entry "get-directory" method #f 1124 15 1124 28 ("list" "Directory" "new")}
        {Lisp-Entry "exists?" method #f 1128 15 1128 22 ()}
        {Lisp-Entry "get-content" method #f 1132 15 1132 26 ("get-output" "enumerate-drives" "string" "list" "Directory" "put" "letter" "function" "for-each" "when" "List-Factory" "new" "fact" "let" "leaves?" "leaves?:" "nodes?" "nodes?:")}
        {Lisp-Entry "enumerate-drives" method #f 1141 15 1141 31 ("integer->char" "cons" "bitwise-and" "/=" "1" "+" "-1" "arithmetic-shift" "0" "=" "if" "result" "char->integer" "letter" "jazz.platform.windows.GetLogicalDrives" "drives" "loop" "let" "reverse!")}}
      {Lisp-Entry "directory?" definition #f 1156 27 1156 37 ("Directory" "is?" "obj")}
      {Lisp-Entry "get-current-directory" definition #f 1160 20 1160 41 ("current-directory" "tokenise-filename" "Directory" "new")}
      {Lisp-Entry "set-current-directory" definition #f 1164 20 1164 41 ("parse" "current-directory-set!" "directory")}
      {Lisp-Entry "with-preserved-current-directory" definition #f 1168 20 1168 52 ("set-current-directory" "unwind-protect" "get-current-directory" "preserved" "let" "proc")}}})
"protocol"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.io" "src" "jazz" "io" "protocol.jazz"} 1238328024
    {Lisp-Entry "jazz.io.protocol" library #f 37 9 37 25 ("jazz")
      {Lisp-Entry "moniker-modal" define-generic/specific ("<Moniker-Class>") 44 10 44 23 ("rest")}
      {Lisp-Entry "moniker-modal" define-generic/specific ("<File-Class>") 47 11 47 24 ("choose-new-file" "save" "directory:" "choose-file" "apply" "case" "get-directory" "essay" "directory" "let" "others" "actual" "open" "'open" "mode" "bind-keywords" "rest")}
      {Lisp-Entry "moniker-modal" define-generic/specific ("<Directory-Class>") 55 11 55 24 ("directory:" "choose-directory" "apply" "others" "actual" "mode" "bind-keywords" "rest")}
      {Lisp-Entry "moniker-new" define-generic/specific ("<Moniker-Class>") 60 10 60 21 ("class" "new" "parameters")}}})
