"_io"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.io" "src" "jazz" "io" "_io.jazz"} 1251729948
    {Lisp-Entry "jazz.io" #f 37 9 37 16 ("jazz")
      {Lisp-Entry "*eol-encoding*" #f 51 15 51 29 ("cr-lf" "'cr-lf")}
      {Lisp-Entry "*eol-encoding*" #f 54 15 54 29 ("lf" "'lf")}
      {Lisp-Entry "get-eol-encoding" #f 58 20 58 36 ("*eol-encoding*")}
      {Lisp-Entry "set-eol-encoding" #f 62 20 62 36 ("*eol-encoding*" "set!" "encoding")}
      {Lisp-Entry "*aliases*" #f 71 12 71 21 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-aliases" #f 75 20 75 31 ("*aliases*")}
      {Lisp-Entry "is-alias?" #f 79 20 79 29 ("find-alias" "boolean" "name")}
      {Lisp-Entry "valid-alias?" #f 83 20 83 32 ("is-alias?" "name")}
      {Lisp-Entry "get-alias" #f 87 20 87 29 ("error" "when" "find-alias" "either" "error?" "error?:" "name")}
      {Lisp-Entry "find-alias" #f 93 20 93 30 ("resolve-alias" "when" "get-process" "process" "let" "get-aliases" "table-ref" "either" "name")}
      {Lisp-Entry "register-alias" #f 100 20 100 34 ("set-alias" "error" "get-aliases" "table-ref" ":up" "second" "eq?" "2" "length" ">=" "pair?" "and" "if" "process-up" "get-list" "append" "cddr" "sub" "ignored-anchors:" "car" "list" "Directory" "new" "get-parent" "anchorize" "dir" "let" "expand-up" "define" "path" "name")}
      {Lisp-Entry "unregister-alias" #f 118 20 118 36 ("get-aliases" "table-clear" "name")}
      {Lisp-Entry "set-alias" #f 122 20 122 29 ("get-aliases" "table-set!" "path" "name")}
      {Lisp-Entry "initialize-aliases" #f 126 20 126 38 ("register-repositories-aliases" "pathname-normalize" "tokenise-filename" "Home" "'Home" "register-alias" "initialize-platform-aliases")}
      {Lisp-Entry "initialize-platform-aliases" #f 134 17 134 44 ("Network" "'Network" "register-alias")}
      {Lisp-Entry "initialize-platform-aliases" #f 137 17 137 44 ()}
      {Lisp-Entry "register-repositories-aliases" #f 141 13 141 42 ("get-repositories" "repository-packages" "symbol->string" "if" ",name" "package-name" "package" "function" "for-each" "repository-binary?" "unless" "tokenise-filename" "register-alias" "repository-library-root" "library-root" "repository-directory" "remove-trailing-char" "directory" "repository-name" "name" "let" "repository" "register-repository" "define")}
      {Lisp-Entry "validate-alias" #f 159 13 159 27 ("error" "Directory" "new" "exists?" "if" "path" "name")}
      {Lisp-Entry "extract-name" #f 170 20 170 32 ("cardinality" "1" "+" "subseq" "not" "if" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "extract-base" #f 177 20 177 32 ("0" "subseq" "not" "if" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "extract-extension" #f 184 20 184 37 ("cardinality" "1" "+" "subseq" "when" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "normalize-filename-separators" #f 192 16 192 45 ("substitute" "filename")}
      {Lisp-Entry "normalize-filename-separators" #f 195 16 195 45 ("filename")}
      {Lisp-Entry "tokenise-filename" #f 199 20 199 37 ("cdr" "remove-empty-strings" ":root" "cons" "car" "empty-string?" "if" "normalize-filename-separators" "split" "lst" "let" "filename")}
      {Lisp-Entry "tokenise-windows" #f 206 20 206 36 ("cardinality" "2" "subseq" "split" "remove-empty-strings" "Network" "'Network" "cons" "starts-with?" "if" "filename")}
      {Lisp-Entry "get-tmp-directory" #f 212 20 212 37 ("tokenise-windows" "Directory" "new" "make-string" "path" "NULL" "0" "GetTempPath" "size" "let*" "get-tmp-directory" "'get-tmp-directory" "unimplemented")}
      {Lisp-Entry "get-protocol-handler" #f 226 20 226 40 ("format" "message:" "Parse-Error" "new" "signal" "else" "Directory" "dir" "File" "file" "case" "keyword->symbol" "keyword?" "if" "let" "protocol")}
      {Lisp-Entry "Moniker-Class" #f 239 7 239 20 ()
        {Lisp-Entry "get-protocol" #f 242 26 242 38 ()}}
      {Lisp-Entry "Moniker" #f 246 7 246 14 ()
        {Lisp-Entry "compare-pathname" #f 249 26 249 42 ("object")}
        {Lisp-Entry "present" #f 258 26 258 33 ()}
        {Lisp-Entry "present-base" #f 262 26 262 38 ("get-base" "->string")}
        {Lisp-Entry "present-name" #f 266 26 266 38 ("get-name" "->string")}
        {Lisp-Entry "present-location" #f 270 26 270 42 ("get-list" "format")}
        {Lisp-Entry "exists?" #f 279 26 279 33 ()}
        {Lisp-Entry "read-only?" #f 283 18 283 28 ("get-writable?" "not")}
        {Lisp-Entry "read/write?" #f 287 18 287 29 ("get-writable?")}
        {Lisp-Entry "set-read-only" #f 291 18 291 31 ("set-writable?")}
        {Lisp-Entry "set-read/write" #f 295 18 295 32 ("set-writable?")}
        {Lisp-Entry "get-writable?" #f 299 26 299 39 ()}
        {Lisp-Entry "set-writable?" #f 303 26 303 39 ("flag")}
        {Lisp-Entry "writable?" #f 307 26 307 35 ()}
        {Lisp-Entry "get-modification-time" #f 311 26 311 47 ()}
        {Lisp-Entry "get-file" #f 315 26 315 34 ()}
        {Lisp-Entry "get-name" #f 319 26 319 34 ()}
        {Lisp-Entry "get-base" #f 323 26 323 34 ()}
        {Lisp-Entry "get-extension" #f 327 26 327 39 ()}
        {Lisp-Entry "get-list" #f 331 26 331 34 ()}
        {Lisp-Entry "get-parent" #f 335 26 335 36 ()}
        {Lisp-Entry "get-hierarchy" #f 339 18 339 31 ("cons" "get-parent" "not" "if" "hierarchy" "self" "moniker" "loop" "let")}
        {Lisp-Entry "get-content" #f 346 26 346 37 ("rest")}
        {Lisp-Entry "get-children" #f 351 26 351 38 ("rest")}
        {Lisp-Entry "is-different?" #f 355 26 355 39 ("moniker")}
        {Lisp-Entry "relocated-list" #f 359 18 359 32 ("length" "tail" "get-list" "append" "new-root" "old-root")}
        {Lisp-Entry "load-lines" #f 368 26 368 36 ("rest")}
        {Lisp-Entry "save-lines" #f 372 26 372 36 ("rest" "lines")}
        {Lisp-Entry "load-form" #f 376 26 376 35 ()}}
      {Lisp-Entry "platform-separator" #f 387 16 387 34 ()}
      {Lisp-Entry "platform-separator" #f 390 16 390 34 ()}
      {Lisp-Entry "Pathname-Class" #f 394 7 394 21 ()}
      {Lisp-Entry "Pathname" #f 397 7 397 15 ()
        {Lisp-Entry "path" #f 400 8 400 12 ()}
        {Lisp-Entry "initialize" #f 403 11 403 21 ("set-list" "validate-component" "nextmethod" "lst")}
        {Lisp-Entry "validate-component" #f 409 15 409 33 ("else" "cdr" "error" "car" "if" "pair?" "symbol?" "string?" "null?" "cond" "function" "validate" "letrec" "original" "let" "object")}
        {Lisp-Entry "parse" #f 425 18 425 23 ("get-output-string" "pathname-expand" "add-suffix" "get-list" "else" "cdr" "car" "pair?" "get-alias" "is-alias?" "cons" "self" "error" "memq?" "symbol?" "set!" "if" "string?" "display" ":root" "eq?" "null?" "cond" "path" "function" "parse" "letrec" "aliases" "first?" "open-output-string" "printer" "let" "separator" "bind-optionals" "rest")}
        {Lisp-Entry "platform-parse" #f 457 18 457 32 ("platform-separator" "parse")}
        {Lisp-Entry "add-suffix" #f 461 29 461 39 ("printer")}
        {Lisp-Entry "relocated-pathname" #f 465 18 465 36 ("length" "tail" "get-list" "append" "new-root" "old-root")}
        {Lisp-Entry "create" #f 469 26 469 32 ()}
        {Lisp-Entry "move-pathname" #f 473 18 473 31 ("parse" "file-rename" "error?" "error?:" "dst")}
        {Lisp-Entry "compare-object" #f 477 11 477 25 (":not-equal" "else" ":equal" "get-list" "=" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "compare-pathname" #f 486 11 486 27 ("parse" "ci=?" "Pathname" "is?" "and" "object")}
        {Lisp-Entry "valid-aliases?" #f 491 18 491 32 ("get-list" "get-alias" "is-alias?" "and" "symbol?" "not" "item" "every?" "eq?" "or" "list" "function" "valid?" "letrec")}
        {Lisp-Entry "expand" #f 503 18 503 24 ("get-output" "get-list" "cdr" "car" "pair?" "get-alias" "symbol?" "string?" "put" ":root" "eq?" "cond" "object" "function" "expand" "letrec" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "get-list" #f 518 18 518 26 ("path")}
        {Lisp-Entry "set-list" #f 522 18 522 26 ("path" "set!" "value")}
        {Lisp-Entry "get-name" #f 526 11 526 19 ("get-list" "effective-name")}
        {Lisp-Entry "effective-name" #f 530 11 530 25 ("else" "get-alias" "effective-name" "symbol?" ":root" "eq?" "cond" "last" "name" "let" "lst")}
        {Lisp-Entry "get-base" #f 540 11 540 19 ("extract-base" "symbol?" "if" "get-name" "name" "let")}
        {Lisp-Entry "get-extension" #f 547 11 547 24 ("get-name" "extract-extension")}
        {Lisp-Entry "get-parent" #f 551 11 551 21 ("butlast" "Directory" "new" "cdr" "null?" "or" "expand" "1" "path" "length" "=" "if" "effective-path" "let")}
        {Lisp-Entry "get-brother" #f 558 18 558 29 ("list" "get-parent" "get-list" "append" "self" "class-of" "new" "name")}
        {Lisp-Entry "new-brother" #f 562 26 562 37 ("name")}
        {Lisp-Entry "get-directory" #f 566 26 566 39 ()}
        {Lisp-Entry "get-attributes" #f 570 18 570 32 ("self" "error" "when" "-1" "=" "if" "parse" "GetFileAttributes" "attributes" "let" "get-attributes" "'get-attributes" "unimplemented" "error?" "error?:")}
        {Lisp-Entry "set-attributes" #f 580 18 580 32 ("self" "error" "not" "when" "parse" "SetFileAttributes" "ok?" "let" "set-attributes" "'set-attributes" "unimplemented" "flags")}
        {Lisp-Entry "get-writable?" #f 588 11 588 24 ("FILE_ATTRIBUTE_READONLY" "get-attributes" "mask-bit-set?" "not")}
        {Lisp-Entry "set-writable?" #f 594 11 594 24 ("not" "FILE_ATTRIBUTE_READONLY" "get-attributes" "mask-bit-set" "set-attributes" "set-writable?" "'set-writable?" "unimplemented" "flag")}
        {Lisp-Entry "exists?" #f 600 11 600 18 ("parse" "file-exists?")}
        {Lisp-Entry "create-directories" #f 604 18 604 36 ("create" "exists?" "unless" "dir" "function" "for-each" "get-parent" "cons" "set!" "while" "dirs" "expand" "Directory" "new" "scan" "get-directory" "base" "let*")}
        {Lisp-Entry "anchor-to" #f 623 18 623 27 ("class-of" "new" "subseq" "append" "else" "continuation-return" "self" "error" "if" "<" "set!" "not" "cond" "return" "function" "continuation-capture" "unspecified" "result-list" "ci=?" "test:" "mismatch" "rank" "expd" "length" "base-length" "expand" "base-expd" "get-list" "base-list" "let*" "error?" "error?:" "anchor")}
        {Lisp-Entry "anchorize" #f 643 18 643 27 ("car" "self" "null?" "if" "get-list" "length" "path" "key:" "<" "sort" "sorted" "error?:" "list" "Directory" "new" "anchor-to" "valid-alias?" "when" "anchor" "function" "collect" "anchored" "default-anchors" "either" "difference" "let*" "ignored-anchors" "ignored-anchors:" "anchors" "anchors:")}
        {Lisp-Entry "default-anchors" #f 652 11 652 26 ("get-application" "application-anchors")}}
      {Lisp-Entry "pathname?" #f 656 27 656 36 ("Pathname" "is?" "object")}
      {Lisp-Entry "pathname=?" #f 660 27 660 37 ("compare-pathname" "y" "x")}
      {Lisp-Entry "pathname-exists?" #f 664 27 664 43 ("parse" "file-exists?" "pathname")}
      {Lisp-Entry "pathname-delete" #f 668 27 668 42 ("parse" "file-delete" "pathname")}
      {Lisp-Entry "pathname-modification-time" #f 672 27 672 53 ("parse" "file-modification-time" "pathname")}
      {Lisp-Entry "File-Class" #f 681 7 681 17 ()
        {Lisp-Entry "get-protocol" #f 684 11 684 23 ("file" "'file")}}
      {Lisp-Entry "create-temporary-file" #f 688 20 688 41 ("tokenise-windows" "File" "new" "adjust-string" "0" "GetTempFileName" "MAX_PATH" "make-string" "filename" "let" "error" "empty-string?" "if" "parse" "dir" "get-tmp-directory" "either" "let*" "create-temporary-file" "'create-temporary-file" "unimplemented" "prefix" "prefix:" "directory" "directory:")}
      {Lisp-Entry "File" #f 701 7 701 11 ()
        {Lisp-Entry "print" #f 704 11 704 16 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "new-brother" #f 715 11 715 22 ("get-parent" "new-file" "name")}
        {Lisp-Entry "present" #f 719 11 719 18 ("get-list" "format")}
        {Lisp-Entry "get-file" #f 728 11 728 19 ("self")}
        {Lisp-Entry "get-directory" #f 732 11 732 24 ("get-parent")}
        {Lisp-Entry "create" #f 736 11 736 17 ("output" "function" "parse" "call-with-output-file" "create-directories" "exists?" "unless")}
        {Lisp-Entry "copy-file" #f 745 18 745 27 ("parse" "file-copy" "delete-file" "exists?" "and" "when" "overwrite-read-only" "overwrite-read-only?" "overwrite-read-only?:" "overwrite?" "overwrite?:" "dst")}
        {Lisp-Entry "delete-file" #f 752 18 752 29 ("parse" "file-delete" "overwrite-read-only" "self" "error" "when" "exists?" "not" "if" "error?" "error?:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "overwrite-read-only" #f 760 11 760 30 ("set-read/write" "read-only?" "exists?" "and" "when" "overwrite-read-only?")}
        {Lisp-Entry "get-size" #f 766 18 766 26 ("readable?:" "self" "File-Reader" "new" "reader" "with-closed" "get-size" "'get-size" "unimplemented")}
        {Lisp-Entry "get-modification-time" #f 773 11 773 32 ("parse" "file-modification-time" "floor" "inexact->exact" "seconds->time")}
        {Lisp-Entry "set-modification-time" #f 777 18 777 39 ("set-attributes" "NULL" "get-handle" "SetFileTime" "printer" "function" "append" "'append" "mode:" "parse" "list" "call-with-output-file" "set-read/write" "get-attributes" "at" "get-filetime" "ft" "let" "set-modification-time" "'set-modification-time" "unimplemented" "time")}
        {Lisp-Entry "touch" #f 790 18 790 23 ("universal-date" "get-time" "set-modification-time" "touch" "'touch" "unimplemented")}
        {Lisp-Entry "get-hidden?" #f 796 18 796 29 ("FILE_ATTRIBUTE_HIDDEN" "get-attributes" "mask-bit-set?" "get-hidden?" "'get-hidden?" "unimplemented")}
        {Lisp-Entry "set-hidden?" #f 802 18 802 29 ("FILE_ATTRIBUTE_HIDDEN" "get-attributes" "mask-bit-set" "set-attributes" "set-hidden?" "'set-hidden?" "unimplemented" "flag")}
        {Lisp-Entry "writable?" #f 808 11 808 20 ("CloseHandle" "INVALID_HANDLE_VALUE" "=" "if" "FILE_ATTRIBUTE_NORMAL" "OPEN_EXISTING" "NULL" "0" "GENERIC_WRITE" "parse" "CreateFile" "handle" "let" "writable?" "'writable?" "unimplemented")}
        {Lisp-Entry "clone-file" #f 818 18 818 28 ("get-base" "format" "list" "get-directory" "get-list" "append" "File" "new" "extension")}
        {Lisp-Entry "load-lines" #f 827 11 827 21 ("read-lines" "cr-lf" "'cr-lf" "eol-encoding:" "UTF" "'UTF" "either" "parse" "path:" "list" "call-with-input-file" "char-encoding-errors" "char-encoding-errors:" "char-encoding" "char-encoding:")}
        {Lisp-Entry "save-lines" #f 832 11 832 21 ("write-lines" "printer" "function" "get-eol-encoding" "UTF-8" "'UTF-8" "either" "parse" "path:" "list" "call-with-output-file" "eol-encoding" "eol-encoding:" "char-encoding" "char-encoding:" "lines")}}
      {Lisp-Entry "file?" #f 838 27 838 32 ("File" "is?" "object")}
      {Lisp-Entry "timestamped-file" #f 842 20 842 36 ("1" "+" "exists?" "new-file" "file" "=" "suffix" "0" "n" "iterate" "current-date" "date->string" "timestamp" "format" "if" "prefix" "let" "ext" "base" "dir")}
      {Lisp-Entry "Directory-Class" #f 859 7 859 22 ()
        {Lisp-Entry "get-protocol" #f 862 11 862 23 ("dir" "'dir")}}
      {Lisp-Entry "Directory" #f 866 7 866 16 ()
        {Lisp-Entry "print" #f 869 11 869 16 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "new-brother" #f 880 11 880 22 ("get-parent" "new-directory" "name")}
        {Lisp-Entry "present" #f 884 11 884 18 ("get-list" "format")}
        {Lisp-Entry "get-directory" #f 893 11 893 24 ("self")}
        {Lisp-Entry "get-modification-time" #f 897 11 897 32 ()}
        {Lisp-Entry "get-parent" #f 904 15 904 25 ("nextmethod" "Windows-Meta-Root" "new" "expand" "1" "path" "length" "=" "if" "effective-path" "let")}
        {Lisp-Entry "create" #f 912 11 912 17 ("parse" "directory-create")}
        {Lisp-Entry "new-file" #f 916 18 916 26 ("list" "null/pair?" "if" "get-list" "append" "File" "new" "name")}
        {Lisp-Entry "new-directory" #f 920 18 920 31 ("list" "null/pair?" "if" "get-list" "append" "Directory" "new" "name")}
        {Lisp-Entry "new-unique-file" #f 924 18 924 33 ("increase!" "either" "format" "set!" "while" "1" "suffix" "extract-extension" "ext" "extract-base" "base" "exists?" "not" "if" "new-file" "file" "let" "separator" "separator:" "name")}
        {Lisp-Entry "copy-directory" #f 937 18 937 32 ("recursive?:" "directories?:" "files?:" "Directory" "copy-directory" "touch" "copy-file" "new" "dest" "File" "is?" "if" "eq?" "or" "iterate-directory" "get-name" "list" "get-list" "append" "path" "function" "destination" "let" "create-directories" "self" "when" "copy?" "copy?:" "touch-files?" "touch-files?:" "feedback" "feedback:" "copier" "copier:" "dst")}
        {Lisp-Entry "delete-directory" #f 961 26 961 42 ("remove-directory" "empty-directory" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "empty-directory" #f 966 18 966 33 ("recursive?:" "directories?:" "files?:" "delete-directory" "delete-file" "File" "is?" "if" "path" "function" "iterate-directory" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "remove-directory" #f 977 18 977 34 ("parse" "directory-delete")}
        {Lisp-Entry "get-content" #f 981 18 981 29 ("get-output" "collect-leaves" "collect-nodes" "when" "List-Factory" "new" "fact" "let" "leaves?" "leaves?:" "nodes?" "nodes?:")}
        {Lisp-Entry "collect-nodes" #f 988 11 988 24 ("recursive?:" "directories?:" "files?:" "put" "item" "function" "iterate-directory" "fact")}
        {Lisp-Entry "collect-leaves" #f 997 11 997 25 ("recursive?:" "directories?:" "files?:" "put" "item" "function" "iterate-directory" "fact")}
        {Lisp-Entry "add-suffix" #f 1011 11 1011 21 ("write-char" "printer")}
        {Lisp-Entry "collect-files" #f 1020 18 1020 31 ("get-output" "recursive?:" "put" "when" "file" "function" "iterate-directory" "List-Factory" "new" "fact" "let" "predicate")}
        {Lisp-Entry "iterate-directory" #f 1035 26 1035 43 ("'directory" "Directory" "'file" "append" "File" "new" "file" "case" "kind" "list" "function" "parse" "iterate-directory-content" "get-list" "if" "directory" "let" "ignored-directories" "ignored-directories:" "recursive?" "recursive?:" "sort?" "sort?:" "directories?" "directories?:" "files?" "files?:" "full?" "full?:" "proc")}
        {Lisp-Entry "iterate-directory-content" #f 1044 11 1044 36 ("file" "'file" "files" "'files" "directory" "'directory" "concatenate" "list" "append" "iterate-directory-content" "when" "name" "function" "directories" "'directories" "iterate-content" "proc" "base" "prefix" "ignored-directories" "recursive?" "sort?" "directories?" "files?")}
        {Lisp-Entry "iterate-content" #f 1057 11 1057 26 ("for-each" "ci<?" "sort" "sorted" "cons" "set!" "object" "function" "list" "let" "iterate-content-unsorted" "not" "if" "proc" "ignored-directories" "sort?" "kind" "base")}
        {Lisp-Entry "iterate-content-unsorted" #f 1068 11 1068 35 ("directory-content-patch" "member?" "not" "directory" "'directory" "directories" "'directories" "regular" "'regular" "files" "'files" "eq?" "and" "or" "when" "string-append" "pathname-type" "type" "let" "name" "function" "for-each" "proc" "ignored-directories" "kind" "base")}
        {Lisp-Entry "directory-content-patch" #f 1081 19 1081 42 ("directory-content" "path")}
        {Lisp-Entry "directory-content-patch" #f 1084 19 1084 42 ("dot-and-dot-dot" "'dot-and-dot-dot" "ignore-hidden:" "path:" "list" "directory-content" "path")}
        {Lisp-Entry "count-files" #f 1088 18 1088 29 ("continuation-return" ">" "and" "increase!" "not" "or" "when" "file" "iterate-directory" "return" "function" "continuation-capture" "0" "count" "let" "max-count" "max-count:" "filter" "filter:")}}
      {Lisp-Entry "Windows-Meta-Root" #f 1104 24 1104 41 ()
        {Lisp-Entry "initialize" #f 1107 15 1107 25 ()}
        {Lisp-Entry "get-name" #f 1111 15 1111 23 ()}
        {Lisp-Entry "present" #f 1115 15 1115 22 ("get-name")}
        {Lisp-Entry "get-parent" #f 1119 15 1119 25 ()}
        {Lisp-Entry "get-directory" #f 1123 15 1123 28 ("list" "Directory" "new")}
        {Lisp-Entry "exists?" #f 1127 15 1127 22 ()}
        {Lisp-Entry "get-content" #f 1131 15 1131 26 ("get-output" "enumerate-drives" "string" "list" "Directory" "put" "letter" "function" "for-each" "when" "List-Factory" "new" "fact" "let" "leaves?" "leaves?:" "nodes?" "nodes?:")}
        {Lisp-Entry "enumerate-drives" #f 1140 15 1140 31 ("integer->char" "cons" "bitwise-and" "/=" "1" "+" "-1" "arithmetic-shift" "0" "=" "if" "result" "char->integer" "letter" "jazz.platform.windows.GetLogicalDrives" "drives" "loop" "let" "reverse!")}}
      {Lisp-Entry "directory?" #f 1155 27 1155 37 ("Directory" "is?" "obj")}
      {Lisp-Entry "get-current-directory" #f 1159 20 1159 41 ("current-directory" "tokenise-filename" "Directory" "new")}
      {Lisp-Entry "set-current-directory" #f 1163 20 1163 41 ("parse" "current-directory-set!" "directory")}
      {Lisp-Entry "with-preserved-current-directory" #f 1167 20 1167 52 ("set-current-directory" "unwind-protect" "get-current-directory" "preserved" "let" "proc")}}})
"protocol"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.io" "src" "jazz" "io" "protocol.jazz"} 1238328024
    {Lisp-Entry "jazz.io.protocol" #f 37 9 37 25 ("choose-directory" "choose-new-file" "save" "directory:" "choose-file" "apply" "case" "get-directory" "essay" "directory" "let" "others" "actual" "open" "'open" "mode" "bind-keywords" "rest" "class" "jazz")
      {Lisp-Entry "moniker-modal" #f 44 10 44 23 ("rest" "class")}
      {Lisp-Entry "moniker-modal" #f 47 11 47 24 ()}
      {Lisp-Entry "moniker-modal" #f 55 11 55 24 ()}
      {Lisp-Entry "moniker-new" #f 60 10 60 21 ("new" "parameters" "class")}}})
