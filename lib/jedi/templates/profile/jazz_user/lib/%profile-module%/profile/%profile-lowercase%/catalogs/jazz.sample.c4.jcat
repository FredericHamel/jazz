"C4-AI"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "C4-AI.jazz"} 1229950064
    {Lisp-Entry "jazz.sample.c4.C4-AI" #f 38 9 38 29 ("jazz")
      {Lisp-Entry "C4-AI" #f 49 7 49 12 ("C4-Player")
        {Lisp-Entry "current-eval" #f 52 8 52 20 ("generate" "0")}
        {Lisp-Entry "all-lines" #f 53 8 53 17 ("generate")}
        {Lisp-Entry "search-depth" #f 54 8 54 20 ("generate" "Search-Depth")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("setup-lines" "nextmethod" "me" "game")}
        {Lisp-Entry "player-kind" #f 62 11 62 22 ("computer" "'computer")}
        {Lisp-Entry "move-played" #f 66 11 66 22 ("evaluate-move-delta" "+" "current-eval" "set!" "token" "move")}
        {Lisp-Entry "computer-move" #f 70 11 70 24 ("search-depth" "search-depth:" "current-eval" "current-eval:" "evaluate-move-delta" "evaluate-position" "unplay" "play" "iterate-candidates" "me" "minimax")}
        {Lisp-Entry "iterate-moves" #f 81 11 81 24 ("when" "available-move" "square" "let" "game" "get-board-columns" "below" "0" "from" "col" "for" "loop" "proc")}
        {Lisp-Entry "iterate-candidates" #f 88 11 88 29 ("game" "get-board-columns" "iterate-moves" "for-each" "proc" "gather-candidates" "token")}
        {Lisp-Entry "play" #f 92 11 92 15 ("game" "play" "token" "move")}
        {Lisp-Entry "unplay" #f 96 11 96 17 ("game" "unplay" "move")}
        {Lisp-Entry "evaluate-position" #f 105 11 105 28 ("evaluate-line" "increase!" "all-lines" "in" "line" "for" "loop" "0" "total" "let")}
        {Lisp-Entry "evaluate-line" #f 112 11 112 24 ("evaluate-count" "+" "0" ">" "and" "if" "opponent" "opponent-count" "me" "count-token" "me-count" "let" "line")}
        {Lisp-Entry "evaluate-move-delta" #f 122 11 122 30 ("+" "set!" "evaluate-count" "else" "evaluate-line-delta" "=" "1" ">" "and" "cond" "delta" "-1" "*" "other-count" "count-token" "who-count" "get-lines" "in" "line" "for" "loop" "0" "total" "let" "token" "square")}
        {Lisp-Entry "evaluate-line-delta" #f 138 11 138 30 ("10" "1" "90" "2" "900" "3" "999000" "4" "case" "cast" "*" "token" "count")}
        {Lisp-Entry "evaluate-count" #f 147 11 147 25 ("0" "10" "1" "100" "2" "1000" "3" "1000000" "4" "case" "cast" "*" "token" "count")}
        {Lisp-Entry "setup-lines" #f 162 11 162 22 ("get-lines" "cons" "line=?" "test:" "member?" "not" "when" "line" "function" "for-each" "board-ref" "square" "let" "game" "get-board-size" "below" "0" "from" "rank" "for" "loop" "all-lines" "set!")}}}})
"C4-Application"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "C4-Application.jazz"} 1229003417
    {Lisp-Entry "jazz.sample.c4.C4-Application" #f 38 9 38 38 ("jazz")
      {Lisp-Entry "C4-Application" #f 55 7 55 21 ("Application")
        {Lisp-Entry "process-name" #f 58 11 58 23 ()}
        {Lisp-Entry "new-toplevel" #f 62 11 62 23 ("C4-Toplevel" "new")}
        {Lisp-Entry "finish-process" #f 66 11 66 25 ("C4-Board" "new-frame" "get-stage" "maximize" "nextmethod")}}
      {Lisp-Entry "C4-Toplevel" #f 77 7 77 18 ("625" "800" "Dimension" "size:" "100" "Point" "position:" "caption-base:" "Toplevel")}}})
"C4-Board"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "C4-Board.jazz"} 1229950064
    {Lisp-Entry "jazz.sample.c4.C4-Board" #f 38 9 38 32 ("jazz")
      {Lisp-Entry "C4-Board" #f 56 7 56 15 ("View")
        {Lisp-Entry "game" #f 59 8 59 12 ("generate")}
        {Lisp-Entry "display-evaluations?" #f 61 8 61 28 ("generate")}
        {Lisp-Entry "last-move" #f 62 8 62 17 ("generate")}
        {Lisp-Entry "last-token" #f 63 8 63 18 ("generate")}
        {Lisp-Entry "last-v" #f 64 8 64 14 ("generate")}
        {Lisp-Entry "host-icon" #f 72 16 72 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 76 16 76 26 ()}
        {Lisp-Entry "host-position" #f 80 16 80 29 ("70" "90" "Point")}
        {Lisp-Entry "host-size" #f 84 16 84 25 ("624" "884" "Dimension")}
        {Lisp-Entry "finish" #f 88 11 88 17 ("initialize-board" "RED" "C4-AI" "GREEN" "C4-Human" "list" "register-players" "C4-Game" "new" "game" "set!" "nextmethod" "rest")}
        {Lisp-Entry "destroy" #f 95 11 95 18 ("nextmethod" "close-ambiance")}
        {Lisp-Entry "initialize-board" #f 101 11 101 27 ("play-move" "computer-move" "move" "let" "COMPUTER" "game" "HUMAN" "who" "eq?" "cond" "invalidate-view" "play-ambiance" "play-intro" "close-ambiance")}
        {Lisp-Entry "play-move" #f 128 11 128 20 ("play-defeat" "COMPUTER" "play-victory" "HUMAN" "who" "cond" "computer-move" "computer?" "get-next-player" "player" "let" "play" "'play" "get-status" "eq?" "when" "invalidate-view" "game" "play-move" "move-animation" "board-play" "define" "move")}
        {Lisp-Entry "fall-speed" #f 150 14 150 24 ("25")}
        {Lisp-Entry "move-animation" #f 154 11 154 25 ("fall-speed" "increase!" "redraw-view" "<" "when" "loop" "60" "last-v" "game" "get-next-player" "get-me" "last-token" "last-move" "set!" "70" "get-row" "*" "100" "+" "end-v" "let" "move")}
        {Lisp-Entry "draw" #f 174 11 174 15 ("get-last-evaluations" "24" "increase!" "Dark-Green" "get-last-move" "=" "if" "eval" "function" "for-each" "225" "v" "c" "Text" "get-last-time" "175" "get-last-evaluations-count" "150" "get-last-eval" "display-evaluations?" "and" "get-search-depth" "650" "Heading2" "Ochre" "draw" "get-winner" "present" "format" "draw-status" "win" "case" "last-token" "last-move" "get-col" "last-v" "Green" "else" "Red" "RED" "White" "ellipse" "EMPTY" "eq?" "cond" "50" "70" "*" "+" "Rect" "new" "rect" "get-square" "get-token" "token" "get-board-columns" "col" "get-board-rows" "below" "0" "from" "row" "for" "loop" "when" "game" "get-status" "status" "let" "30" "100" "draw-text" "Heading0" "Font" "set-font" "Yellow" "set-text-color" "Dark-Blue" "name:" "Color" "get-bounds" "fill-rect" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-status" #f 222 11 222 22 ("525" "100" "draw-text" "Heading0" "name:" "Font" "set-font" "set-text-color" "color" "message" "surface")}
        {Lisp-Entry "cursor-update" #f 228 11 228 24 (":arrow" ":finger" "if" "set-cursor" "legal-column" "col" "let" "pos")}
        {Lisp-Entry "mouse-down" #f 233 11 233 21 ("game" "available-move" "play-move" "when" "legal-column" "col" "let" "pos")}
        {Lisp-Entry "legal-column" #f 239 11 239 23 ("available-move" "0" "90" "-" "/" "truncate" "col" "get-board-rows" "-20" "70" "get-board-columns" "*" "+" "<" "100" ">=" "and" "get-v" "v" "get-h" "h" "let" "play" "'play" "game" "get-status" "eq?" "if" "pos")}
        {Lisp-Entry "restart-game" #f 258 11 258 23 ("self" "initialize-game" "who")}
        {Lisp-Entry "toggle-evaluations" #f 262 11 262 29 ("invalidate-view" "not" "display-evaluations?" "set!")}
        {Lisp-Entry "set-search-depth" #f 267 11 267 27 ("invalidate-view" "+" "get-up" "computer-move" "get-current-eval" "-" "set-current-eval" "get-col" "set-column-move" "EMPTY" "set-token" "evaluate-move-delta" "delta" "-1" "get-next-player" "*" "who" "let" "get-last-move" "when" "game" "set-search-depth" "depth")}
        {Lisp-Entry "play-computer" #f 282 11 282 24 ("play-move" "computer-move" "move" "let" "play" "'play" "game" "get-status" "eq?" "when")}
        {Lisp-Entry "key-press" #f 293 11 293 20 ("play-computer" "9" "8" "7" "6" "5" "4" "3" "2" "1" "set-search-depth" "exit" "self" "load-board" "toggle-evaluations" "COMPUTER" "HUMAN" "game" "get-who-starts" "or" "restart-game" "case" "c")}}
      {Lisp-Entry "play-intro?" #f 323 12 323 23 ()}
      {Lisp-Entry "play-ambiance?" #f 326 12 326 26 ()}
      {Lisp-Entry "intro-directory" #f 330 12 330 27 ("Home" "Directory")}
      {Lisp-Entry "ambiance-directory" #f 333 12 333 30 ("Home" "Directory")}
      {Lisp-Entry "victory-directory" #f 336 12 336 29 ("Home" "Directory")}
      {Lisp-Entry "defeat-directory" #f 339 12 339 28 ("Home" "Directory")}
      {Lisp-Entry "play-intro" #f 343 13 343 23 ("asynchronous?:" "play-sound" "intro-directory" "random-file" "sound" "let" "play-intro?" "when")}
      {Lisp-Entry "play-ambiance" #f 350 13 350 26 ("play-music" "open-music" "ambiance-directory" "random-file" "music" "let" "play-ambiance?" "when")}
      {Lisp-Entry "close-ambiance" #f 357 13 357 27 ("close-music")}
      {Lisp-Entry "play-victory" #f 361 13 361 25 ("play-sound" "when" "victory-directory" "random-file" "sound" "let")}
      {Lisp-Entry "play-defeat" #f 366 13 366 24 ("play-sound" "when" "defeat-directory" "random-file" "sound" "let")}
      {Lisp-Entry "random-file" #f 372 13 372 24 ("random-element" "not-null?" "get-extension" "ci=?" "file" "function" "collect-files" "files" "let" "exists?" "if" "extension" "directory")}
      {Lisp-Entry "inspect-board" #f 390 13 390 26 ("newline" "COMPUTER" "HUMAN" "EMPTY" "eq?" "cond" "display" "get-square" "get-token" "token" "let" "get-board-columns" "col" "get-board-rows" "below" "0" "from" "row" "for" "loop" "game")}}})
"C4-Pages"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "C4-Pages.jazz"} 1228599382
    {Lisp-Entry "jazz.sample.c4.C4-Pages" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "C4-Pages" #f 49 7 49 15 ("Game-Pages")
        {Lisp-Entry "Pattern-Associations" #f 52 14 52 34 ()}
        {Lisp-Entry "get-pattern-associations" #f 56 11 56 35 ("Pattern-Associations")}
        {Lisp-Entry "new-game" #f 65 11 65 19 ("C4-Game" "new")}
        {Lisp-Entry "effective-move" #f 69 11 69 25 ("deserialize-col" "available-move" "else" "all" "'all" "one" "'one" "equal?" "empty-string?" "not" "or" "cond" "value" "game")}
        {Lisp-Entry "create-players" #f 80 11 80 25 ("C4-AI" "GREEN" "RED" "C4-Human" "new" "list" "nu=?" "cond" "players" "game")}
        {Lisp-Entry "c4" #f 87 12 87 14 ("debug-info" "append" "increase!" "2" "modulo" ",text" "present-move" "text" "prog1" "map" "rank" "else" "draw" "get-winner" "present" "win" "case" "colspan:" "present-col" "align:" ",image" "serialize-col" "onclick:" "human?" "play" "'play" "eqv?" "if" "RED" "GREEN" "EMPTY" "=" "cond" "format" "image" "get-token" "token" "get-square" "square" "let*" "get-board-columns" "col" "present-row" "cons" "collect" "get-board-rows" "below" "0" "from" "row" "for" "loop" "cellpadding:" "cellspacing:" "valign:" "class:" "26" "30" "width:" "id:" "serialize-game" "1" "length" "-" "->string" ",players" "value:" "method:" "name:" "background:" "src:" "rel:" "href:" "type:" "get-second-player" "second-player" "get-next-player" "next-player" "get-forward-moves" "forward" "backward" "get-status" "status" "play-players" "all" "one" "memq?" "get-backward-moves" "not-null?" "or" "not" "and" "when" "get-players" "computer?" "player" "function" "every?" "all-computers?" "effective-move" "move" "deserialize-game" "create-players" "register-players" "effective-goto" "goto" "new-game" "game" "effective-current" "current" "error?:" "get-parameter" "effective-players" "players" "get-request" "request" "let" "node")}
        {Lisp-Entry "serialize-col" #f 219 11 219 24 ("number->string" "col")}
        {Lisp-Entry "deserialize-col" #f 223 11 223 26 ("string->number" "value" "game")}
        {Lisp-Entry "serialize-move" #f 227 11 227 25 ("format" "get-col" "col" "get-row" "row" "let" "move")}
        {Lisp-Entry "deserialize-move" #f 233 11 233 27 ("get-square" "cardinality" "1" "+" "col" "0" "substring" "string->number" "row" "search" "pos" "let" "value" "game")}}}})
"_c4"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "_c4.jazz"} 1226584771
    {Lisp-Entry "jazz.sample.c4" #f 37 9 37 23 ("jazz")
      {Lisp-Entry "EMPTY" #f 46 12 46 17 ("0")}
      {Lisp-Entry "RED" #f 49 12 49 15 ("-1")}
      {Lisp-Entry "GREEN" #f 52 12 52 17 ("1")}
      {Lisp-Entry "Search-Depth" #f 56 12 56 24 ("5")}
      {Lisp-Entry "C4-Player" #f 65 7 65 16 ("Player")
        {Lisp-Entry "game" #f 68 8 68 12 ("generate")}
        {Lisp-Entry "me" #f 69 8 69 10 ("generate")}
        {Lisp-Entry "opponent" #f 70 8 70 16 ("generate")}
        {Lisp-Entry "initialize" #f 73 11 73 21 ("-1" "*" "opponent~self" "me~self" "game~self" "set!" "nextmethod" "me" "game")}
        {Lisp-Entry "print" #f 80 11 80 16 ("me" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "present" #f 86 11 86 18 ("GREEN" "me" "eq?" "if")}}
      {Lisp-Entry "C4-Human" #f 97 7 97 15 ("C4-Player")
        {Lisp-Entry "player-kind" #f 100 11 100 22 ("human" "'human")}}
      {Lisp-Entry "Square" #f 109 7 109 13 ("Object")
        {Lisp-Entry "game" #f 112 8 112 12 ("generate")}
        {Lisp-Entry "row" #f 113 8 113 11 ("generate")}
        {Lisp-Entry "col" #f 114 8 114 11 ("generate")}
        {Lisp-Entry "token" #f 115 8 115 13 ("generate")}
        {Lisp-Entry "up" #f 116 8 116 10 ("generate")}
        {Lisp-Entry "down" #f 117 8 117 12 ("generate")}
        {Lisp-Entry "lines" #f 118 8 118 13 ("generate")}
        {Lisp-Entry "initialize" #f 121 11 121 21 ("EMPTY" "token~self" "col~self" "row~self" "game~self" "set!" "nextmethod" "col" "row" "game")}
        {Lisp-Entry "print" #f 129 11 129 16 ("token" "game" "present-move" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "present-row" #f 135 13 135 24 ("get-board-rows" "-" "->string" "row" "game")}
      {Lisp-Entry "present-col" #f 139 13 139 24 ("Uppercase-Chars" "element" "->string" "col" "game")}
      {Lisp-Entry "present-move" #f 143 13 143 25 ("present-row" "present-col" "format" "get-col" "col" "get-row" "row" "let" "move" "game")}
      {Lisp-Entry "Line" #f 156 7 156 11 ("Object")
        {Lisp-Entry "first" #f 159 8 159 13 ("generate")}
        {Lisp-Entry "second" #f 160 8 160 14 ("generate")}
        {Lisp-Entry "third" #f 161 8 161 13 ("generate")}
        {Lisp-Entry "fourth" #f 162 8 162 14 ("generate")}
        {Lisp-Entry "initialize" #f 165 11 165 21 ("fourth~self" "third~self" "second~self" "first~self" "set!" "nextmethod" "fourth" "third" "second" "first")}
        {Lisp-Entry "count-token" #f 173 11 173 22 ("fourth" "third" "second" "0" "1" "first" "get-token" "=" "if" "+" "token")}}
      {Lisp-Entry "line=?" #f 180 13 180 19 ("get-fourth" "get-third" "get-second" "get-first" "eq?" "and" "l2" "l1")}
      {Lisp-Entry "C4-Game" #f 192 7 192 14 ("Game")
        {Lisp-Entry "board-rows" #f 196 8 196 18 ("generate")}
        {Lisp-Entry "board-columns" #f 197 8 197 21 ("generate")}
        {Lisp-Entry "board-size" #f 198 8 198 18 ("generate")}
        {Lisp-Entry "board" #f 199 8 199 13 ("generate")}
        {Lisp-Entry "available-moves" #f 202 8 202 23 ("generate")}
        {Lisp-Entry "initialize" #f 205 11 205 21 ("setup-lines" "setup-squares" "make-availables" "available-moves" "make-board" "board" "*" "board-size" "board-columns" "board-rows" "set!" "nextmethod" "7" "columns" "6" "rows" "bind-keywords" "rest")}
        {Lisp-Entry "make-board" #f 217 11 217 21 ("self" "Square" "new" "vector-set!" "square-rank" "rank" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop" "board-size" "make-vector" "board" "let")}
        {Lisp-Entry "make-availables" #f 226 11 226 26 ("get-square" "vector-set!" "below" "0" "from" "col" "for" "loop" "1" "board-rows" "-" "bottom-row" "board-columns" "make-vector" "moves" "let")}
        {Lisp-Entry "setup-squares" #f 234 11 234 24 ("+" "set-down" "1" "-" "find-square" "set-up" "get-square" "square" "let" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop")}
        {Lisp-Entry "directions" #f 247 14 247 24 ("-1" "1" "0")}
        {Lisp-Entry "setup-lines" #f 254 11 254 22 ("compute-lines" "set-lines" "board-ref" "square" "let" "board-size" "below" "0" "from" "rank" "for" "loop")}
        {Lisp-Entry "compute-lines" #f 260 11 260 24 ("Line" "new" "cons" "set!" "and" "if" "3" "d" "2" "c" "1" "b" "+" "find-next" "a" "0" "to" "-3" "from" "n" "directions" "in" "dir" "for" "loop" "lines" "get-col" "col" "get-row" "row" "let" "square")}
        {Lisp-Entry "find-next" #f 275 11 275 20 ("cdr" "car" "*" "+" "find-square" "n" "col" "row" "dir")}
        {Lisp-Entry "iterate-board" #f 286 18 286 31 ("get-square" "do" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop" "proc")}
        {Lisp-Entry "board-ref" #f 292 18 292 27 ("board" "vector-ref" "rank")}
        {Lisp-Entry "square-rank" #f 296 18 296 29 ("board-columns" "*" "+" "col" "row")}
        {Lisp-Entry "get-square" #f 300 18 300 28 ("square-rank" "board-ref" "col" "row")}
        {Lisp-Entry "find-square" #f 304 11 304 22 ("get-square" "board-columns" "board-rows" "<" "0" ">=" "and" "if" "col" "row")}
        {Lisp-Entry "available-move" #f 316 18 316 32 ("available-moves" "vector-ref" "col")}
        {Lisp-Entry "set-available-move" #f 320 18 320 36 ("available-moves" "vector-set!" "square" "col")}
        {Lisp-Entry "play" #f 324 11 324 15 ("get-up" "get-col" "set-available-move" "set-token" "token" "move")}
        {Lisp-Entry "unplay" #f 329 11 329 17 ("EMPTY" "set-token" "get-col" "set-available-move" "move")}
        {Lisp-Entry "play-move" #f 339 11 339 20 ("check-status" "inform-players" "add-move" "play" "get-me" "token" "next-player!" "player" "let" "move")}
        {Lisp-Entry "win?" #f 348 11 348 15 ("get-lines" "some?" "4" "count-token" "=" "line" "line?" "define" "token" "move")}
        {Lisp-Entry "draw?" #f 355 11 355 16 ("available-move" "some" "board-columns" "below" "0" "from" "col" "for" "loop" "not" "token" "move")}
        {Lisp-Entry "load-board" #f 366 11 366 21 ("invalidate-view" ">=" "if" "set-available-move" "length" "move" "COMPUTER" "O" "X" "case" "set-token" "get-square" "square" "let" "downto" "1" "board-rows" "-" "row" "token" "board-columns" "below" "0" "from" "col" "saved-board" "in" "tokens" "for" "loop" "HUMAN" "initialize-game" "game")}
        {Lisp-Entry "inspect-board" #f 387 11 387 24 ("newline" "GREEN" "RED" "EMPTY" "eq?" "cond" "display" "get-square" "get-token" "token" "let" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop")}}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "autoload.jazz"} 1226584771
    {Lisp-Entry "jazz.sample.c4.autoload" #f 37 9 37 32 ("jazz")}})
"graphics"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "graphics.jazz"} 1230039525
    {Lisp-Entry "jazz.sample.c4.graphics" #f 38 9 38 32 ("jazz")
      {Lisp-Entry "C4-Images" #f 45 12 45 21 ("Jazz" "Directory")}
      {Lisp-Entry "generate-c4" #f 49 13 49 24 ("user-message" "format" "image-convert" "color" "name" "generate" "define" "10" "inner" "2" "1" "-" "/" "half" "71" "width" "let" "function" "C4-Images" "parse" "with-current-directory")}}})
"product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "product.jazz"} 1226584771
    {Lisp-Entry "jazz.sample.c4.product" #f 37 9 37 31 ("build" "build:" "run" "run:" "title:" "c4" "'c4" "register-product" "jazz")
      {Lisp-Entry "run" #f 48 13 48 16 ("C4-Application" "new" "boot-environment")}
      {Lisp-Entry "update" #f 57 13 57 19 ("jazz.sample.c4" "'jazz.sample.c4" "jazz.sample.game.minimax" "'jazz.sample.game.minimax" "jazz.sample.game" "'jazz.sample.game" "build-module")}
      {Lisp-Entry "build" #f 68 13 68 18 ("50000" "minimum-heap:" "c4" "'c4" "build-executable" "update")}}})
