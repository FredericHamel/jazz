"C4-AI"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "C4-AI.jazz"} 1248797036
    {Lisp-Entry "jazz.sample.c4.C4-AI" library #f 38 19 38 39 ("jazz")
      {Lisp-Entry "C4-AI" class #f 48 7 48 12 ("Search-Depth" "0" "initialize" "C4-Player")
        {Lisp-Entry "current-eval" slot #f 51 8 51 20 ()}
        {Lisp-Entry "get-current-eval" accessor #f 51 60 51 68 ()}
        {Lisp-Entry "set-current-eval" accessor #f 51 60 51 68 ()}
        {Lisp-Entry "all-lines" slot #f 52 8 52 17 ()}
        {Lisp-Entry "get-all-lines" accessor #f 52 60 52 68 ()}
        {Lisp-Entry "set-all-lines" accessor #f 52 60 52 68 ()}
        {Lisp-Entry "search-depth" slot #f 53 8 53 20 ()}
        {Lisp-Entry "get-search-depth" accessor #f 53 60 53 68 ()}
        {Lisp-Entry "set-search-depth" accessor #f 53 60 53 68 ()}
        {Lisp-Entry "initialize" method #f 56 11 56 21 ("setup-lines" "nextmethod" "me" "game")}
        {Lisp-Entry "player-kind" method #f 61 11 61 22 ("computer" "'computer")}
        {Lisp-Entry "move-played" method #f 65 11 65 22 ("evaluate-move-delta" "+" "current-eval" "set!" "token" "move")}
        {Lisp-Entry "computer-move" method #f 69 11 69 24 ("search-depth" "search-depth:" "current-eval" "current-eval:" "evaluate-move-delta" "evaluate-position" "unplay" "play" "iterate-candidates" "me" "minimax")}
        {Lisp-Entry "iterate-moves" method #f 80 11 80 24 ("when" "available-move" "square" "let" "game" "get-board-columns" "below" "0" "from" "col" "for" "loop" "proc")}
        {Lisp-Entry "iterate-candidates" method #f 87 11 87 29 ("game" "get-board-columns" "iterate-moves" "for-each" "proc" "gather-candidates" "token")}
        {Lisp-Entry "play" method #f 91 11 91 15 ("game" "play" "token" "move")}
        {Lisp-Entry "unplay" method #f 95 11 95 17 ("game" "unplay" "move")}
        {Lisp-Entry "evaluate-position" method #f 104 11 104 28 ("evaluate-line" "increase!" "all-lines" "in" "line" "for" "loop" "0" "total" "let")}
        {Lisp-Entry "evaluate-line" method #f 111 11 111 24 ("evaluate-count" "+" "0" ">" "and" "if" "opponent" "opponent-count" "me" "count-token" "me-count" "let" "line")}
        {Lisp-Entry "evaluate-move-delta" method #f 121 11 121 30 ("+" "set!" "evaluate-count" "else" "evaluate-line-delta" "=" "1" ">" "and" "cond" "delta" "-1" "*" "other-count" "count-token" "who-count" "get-lines" "in" "line" "for" "loop" "0" "total" "let" "token" "square")}
        {Lisp-Entry "evaluate-line-delta" method #f 137 11 137 30 ("10" "1" "90" "2" "900" "3" "999000" "4" "case" "cast" "*" "token" "count")}
        {Lisp-Entry "evaluate-count" method #f 146 11 146 25 ("0" "10" "1" "100" "2" "1000" "3" "1000000" "4" "case" "cast" "*" "token" "count")}
        {Lisp-Entry "setup-lines" method #f 161 11 161 22 ("get-lines" "cons" "line=?" "test:" "member?" "not" "when" "line" "function" "for-each" "board-ref" "square" "let" "game" "get-board-size" "below" "0" "from" "rank" "for" "loop" "all-lines" "set!")}}}})
"C4-Application"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "C4-Application.jazz"} 1252954861
    {Lisp-Entry "jazz.sample.c4.C4-Application" library #f 38 19 38 48 ("jazz")
      {Lisp-Entry "C4-Application" class #f 53 7 53 21 ("Application")
        {Lisp-Entry "process-name" method #f 56 11 56 23 ()}
        {Lisp-Entry "new-toplevel" method #f 60 11 60 23 ("C4-Toplevel" "new")}
        {Lisp-Entry "finish-process" method #f 64 11 64 25 ("C4-Board" "new-frame" "get-stage" "maximize" "nextmethod")}}
      {Lisp-Entry "C4-Toplevel" class #f 75 7 75 18 ("625" "800" "Dimension" "size:" "100" "Point" "position:" "caption-base:" "Toplevel")}}})
"C4-Board"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "C4-Board.jazz"} 1252768922
    {Lisp-Entry "jazz.sample.c4.C4-Board" library #f 38 19 38 42 ("jazz")
      {Lisp-Entry "C4-Board" class #f 50 7 50 15 ("initialize" "View")
        {Lisp-Entry "game" slot #f 53 8 53 12 ()}
        {Lisp-Entry "get-game" accessor #f 53 50 53 58 ()}
        {Lisp-Entry "display-evaluations?" slot #f 55 8 55 28 ()}
        {Lisp-Entry "get-display-evaluations?" accessor #f 55 53 55 61 ()}
        {Lisp-Entry "set-display-evaluations?" accessor #f 55 53 55 61 ()}
        {Lisp-Entry "last-move" slot #f 56 8 56 17 ()}
        {Lisp-Entry "get-last-move" accessor #f 56 53 56 61 ()}
        {Lisp-Entry "set-last-move" accessor #f 56 53 56 61 ()}
        {Lisp-Entry "last-token" slot #f 57 8 57 18 ()}
        {Lisp-Entry "get-last-token" accessor #f 57 53 57 61 ()}
        {Lisp-Entry "set-last-token" accessor #f 57 53 57 61 ()}
        {Lisp-Entry "last-v" slot #f 58 8 58 14 ()}
        {Lisp-Entry "get-last-v" accessor #f 58 53 58 61 ()}
        {Lisp-Entry "set-last-v" accessor #f 58 53 58 61 ()}
        {Lisp-Entry "host-icon" method #f 66 16 66 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" method #f 70 16 70 26 ()}
        {Lisp-Entry "host-position" method #f 74 16 74 29 ("70" "90" "Point")}
        {Lisp-Entry "host-size" method #f 78 16 78 25 ("624" "884" "Dimension")}
        {Lisp-Entry "finish" method #f 82 11 82 17 ("initialize-board" "RED" "C4-AI" "GREEN" "C4-Human" "list" "register-players" "C4-Game" "new" "game" "set!" "nextmethod" "rest")}
        {Lisp-Entry "destroy" method #f 89 11 89 18 ("nextmethod" "close-ambiance")}
        {Lisp-Entry "initialize-board" method #f 95 11 95 27 ("play-move" "computer-move" "move" "let" "COMPUTER" "game" "HUMAN" "who" "eq?" "cond" "invalidate-view" "play-ambiance" "play-intro" "close-ambiance")}
        {Lisp-Entry "play-move" method #f 122 11 122 20 ("play-defeat" "COMPUTER" "play-victory" "HUMAN" "who" "cond" "computer-move" "computer?" "get-next-player" "player" "let" "play" "'play" "get-status" "eq?" "when" "invalidate-view" "game" "play-move" "move-animation" "board-play" "define" "move")}
        {Lisp-Entry "fall-speed" definition #f 144 14 144 24 ("25")}
        {Lisp-Entry "move-animation" method #f 148 11 148 25 ("fall-speed" "increase!" "redraw-view" "<" "when" "loop" "60" "last-v" "game" "get-next-player" "get-me" "last-token" "last-move" "set!" "70" "get-row" "*" "100" "+" "end-v" "let" "move")}
        {Lisp-Entry "draw" method #f 168 11 168 15 ("get-last-evaluations" "24" "increase!" "Dark-Green" "get-last-move" "=" "if" "eval" "function" "for-each" "225" "v" "c" "Text" "get-last-time" "175" "get-last-evaluations-count" "150" "get-last-eval" "display-evaluations?" "and" "get-search-depth" "650" "Heading2" "Ochre" "draw" "get-winner" "present" "format" "draw-status" "win" "case" "last-token" "last-move" "get-col" "last-v" "Green" "else" "Red" "RED" "White" "ellipse" "EMPTY" "eq?" "cond" "50" "70" "*" "+" "Rect" "new" "rect" "get-square" "get-token" "token" "get-board-columns" "col" "get-board-rows" "below" "0" "from" "row" "for" "loop" "when" "game" "get-status" "status" "let" "30" "100" "draw-text" "Heading0" "Font" "set-font" "Yellow" "set-text-color" "Dark-Blue" "name:" "Color" "get-bounds" "fill-rect" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-status" method #f 216 11 216 22 ("525" "100" "draw-text" "Heading0" "name:" "Font" "set-font" "set-text-color" "color" "message" "surface")}
        {Lisp-Entry "cursor-update" method #f 222 11 222 24 (":arrow" ":finger" "if" "set-cursor" "legal-column" "col" "let" "pos")}
        {Lisp-Entry "mouse-down" method #f 227 11 227 21 ("game" "available-move" "play-move" "when" "legal-column" "col" "let" "pos")}
        {Lisp-Entry "legal-column" method #f 233 11 233 23 ("available-move" "0" "90" "-" "/" "truncate" "col" "get-board-rows" "-20" "70" "get-board-columns" "*" "+" "<" "100" ">=" "and" "get-v" "v" "get-h" "h" "let" "play" "'play" "game" "get-status" "eq?" "if" "pos")}
        {Lisp-Entry "restart-game" method #f 252 11 252 23 ("self" "initialize-game" "who")}
        {Lisp-Entry "toggle-evaluations" method #f 256 11 256 29 ("invalidate-view" "not" "display-evaluations?" "set!")}
        {Lisp-Entry "set-search-depth" method #f 261 11 261 27 ("invalidate-view" "+" "get-up" "computer-move" "get-current-eval" "-" "set-current-eval" "get-col" "set-column-move" "EMPTY" "set-token" "evaluate-move-delta" "delta" "-1" "get-next-player" "*" "who" "let" "get-last-move" "when" "game" "set-search-depth" "depth")}
        {Lisp-Entry "play-computer" method #f 276 11 276 24 ("play-move" "computer-move" "move" "let" "play" "'play" "game" "get-status" "eq?" "when")}
        {Lisp-Entry "key-press" method #f 287 11 287 20 ("play-computer" "9" "8" "7" "6" "5" "4" "3" "2" "1" "set-search-depth" "exit" "test" "self" "load-board" "toggle-evaluations" "COMPUTER" "HUMAN" "game" "get-who-starts" "or" "restart-game" "case" "c")}}
      {Lisp-Entry "play-intro?" definition #f 318 12 318 23 ()}
      {Lisp-Entry "play-ambiance?" definition #f 321 12 321 26 ()}
      {Lisp-Entry "intro-directory" definition #f 325 12 325 27 ("Home" "Directory")}
      {Lisp-Entry "ambiance-directory" definition #f 328 12 328 30 ("Home" "Directory")}
      {Lisp-Entry "victory-directory" definition #f 331 12 331 29 ("Home" "Directory")}
      {Lisp-Entry "defeat-directory" definition #f 334 12 334 28 ("Home" "Directory")}
      {Lisp-Entry "play-intro" definition #f 338 13 338 23 ("asynchronous?:" "play-sound" "intro-directory" "random-file" "sound" "let" "play-intro?" "when")}
      {Lisp-Entry "play-ambiance" definition #f 345 13 345 26 ("play-music" "open-music" "ambiance-directory" "random-file" "music" "let" "play-ambiance?" "when")}
      {Lisp-Entry "close-ambiance" definition #f 352 13 352 27 ("close-music")}
      {Lisp-Entry "play-victory" definition #f 356 13 356 25 ("play-sound" "when" "victory-directory" "random-file" "sound" "let")}
      {Lisp-Entry "play-defeat" definition #f 361 13 361 24 ("play-sound" "when" "defeat-directory" "random-file" "sound" "let")}
      {Lisp-Entry "random-file" definition #f 367 13 367 24 ("random-element" "not-null?" "get-extension" "ci=?" "file" "function" "collect-files" "files" "let" "exists?" "if" "extension" "directory")}
      {Lisp-Entry "test" definition #f 384 13 384 17 ()}
      {Lisp-Entry "inspect-board" definition #f 389 13 389 26 ("newline" "COMPUTER" "HUMAN" "EMPTY" "eq?" "cond" "display" "get-square" "get-token" "token" "let" "get-board-columns" "col" "get-board-rows" "below" "0" "from" "row" "for" "loop" "game")}}})
"C4-Pages"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "C4-Pages.jazz"} 1248797036
    {Lisp-Entry "jazz.sample.c4.C4-Pages" library #f 37 19 37 42 ("jazz")
      {Lisp-Entry "C4-Pages" class #f 46 7 46 15 ("Game-Pages")
        {Lisp-Entry "Pattern-Associations" definition #f 49 14 49 34 ()}
        {Lisp-Entry "get-pattern-associations" method #f 53 11 53 35 ("Pattern-Associations")}
        {Lisp-Entry "new-game" method #f 62 11 62 19 ("C4-Game" "new")}
        {Lisp-Entry "effective-move" method #f 66 11 66 25 ("deserialize-col" "available-move" "else" "all" "'all" "one" "'one" "equal?" "empty-string?" "not" "or" "cond" "value" "game")}
        {Lisp-Entry "create-players" method #f 77 11 77 25 ("C4-AI" "GREEN" "RED" "C4-Human" "new" "list" "nu=?" "cond" "players" "game")}
        {Lisp-Entry "c4" method #f 84 12 84 14 ("debug-info" "jazz.sample.c4.C4-AI" "'jazz.sample.c4.C4-AI" "minimax-interpreted?" "append" "increase!" "2" "modulo" ",text" "present-move" "text" "prog1" "map" "rank" "else" "draw" "get-winner" "present" "win" "case" "colspan:" "present-col" "align:" ",image" "serialize-col" "onclick:" "human?" "play" "'play" "eqv?" "if" "RED" "GREEN" "EMPTY" "=" "cond" "format" "image" "get-token" "token" "get-square" "square" "let*" "get-board-columns" "col" "present-row" "cons" "collect" "get-board-rows" "below" "0" "from" "row" "for" "loop" "cellpadding:" "cellspacing:" "valign:" "class:" "26" "30" "width:" "id:" "serialize-game" "1" "length" "-" "->string" ",players" "value:" "method:" "name:" "background:" "src:" "rel:" "href:" "type:" "get-second-player" "second-player" "get-next-player" "next-player" "get-forward-moves" "forward" "backward" "get-status" "status" "play-players" "all" "one" "memq?" "get-backward-moves" "not-null?" "or" "not" "and" "when" "get-players" "computer?" "player" "function" "every?" "all-computers?" "effective-move" "move" "deserialize-game" "create-players" "register-players" "effective-goto" "goto" "new-game" "game" "effective-current" "current" "error?:" "get-parameter" "effective-players" "players" "get-request" "request" "let" "node")}
        {Lisp-Entry "serialize-col" method #f 229 11 229 24 ("number->string" "col")}
        {Lisp-Entry "deserialize-col" method #f 233 11 233 26 ("string->number" "value" "game")}
        {Lisp-Entry "serialize-move" method #f 237 11 237 25 ("format" "get-col" "col" "get-row" "row" "let" "move")}
        {Lisp-Entry "deserialize-move" method #f 243 11 243 27 ("get-square" "cardinality" "1" "+" "col" "0" "substring" "string->number" "row" "search" "pos" "let" "value" "game")}}}})
"_c4"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "_c4.jazz"} 1248797036
    {Lisp-Entry "jazz.sample.c4" library #f 37 9 37 23 ("jazz")
      {Lisp-Entry "EMPTY" definition #f 45 20 45 25 ("0")}
      {Lisp-Entry "RED" definition #f 48 20 48 23 ("-1")}
      {Lisp-Entry "GREEN" definition #f 51 20 51 25 ("1")}
      {Lisp-Entry "Search-Depth" definition #f 55 20 55 32 ("5")}
      {Lisp-Entry "C4-Player" class #f 64 7 64 16 ("Player")
        {Lisp-Entry "game" slot #f 67 8 67 12 ()}
        {Lisp-Entry "get-game" accessor #f 67 24 67 32 ()}
        {Lisp-Entry "me" slot #f 68 8 68 10 ()}
        {Lisp-Entry "get-me" accessor #f 68 24 68 32 ()}
        {Lisp-Entry "opponent" slot #f 69 8 69 16 ()}
        {Lisp-Entry "get-opponent" accessor #f 69 24 69 32 ()}
        {Lisp-Entry "initialize" method #f 72 11 72 21 ("-1" "*" "opponent~self" "me~self" "game~self" "set!" "nextmethod" "me" "game")}
        {Lisp-Entry "print" method #f 79 11 79 16 ("me" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "present" method #f 85 11 85 18 ("GREEN" "me" "eq?" "if")}}
      {Lisp-Entry "C4-Human" class #f 96 7 96 15 ("C4-Player")
        {Lisp-Entry "player-kind" method #f 99 11 99 22 ("human" "'human")}}
      {Lisp-Entry "Square" class #f 108 7 108 13 ("Object")
        {Lisp-Entry "game" slot #f 111 8 111 12 ()}
        {Lisp-Entry "get-game" accessor #f 111 31 111 39 ()}
        {Lisp-Entry "row" slot #f 112 8 112 11 ()}
        {Lisp-Entry "get-row" accessor #f 112 31 112 39 ()}
        {Lisp-Entry "col" slot #f 113 8 113 11 ()}
        {Lisp-Entry "get-col" accessor #f 113 31 113 39 ()}
        {Lisp-Entry "token" slot #f 114 8 114 13 ()}
        {Lisp-Entry "get-token" accessor #f 114 34 114 42 ()}
        {Lisp-Entry "set-token" accessor #f 114 34 114 42 ()}
        {Lisp-Entry "up" slot #f 115 8 115 10 ()}
        {Lisp-Entry "get-up" accessor #f 115 34 115 42 ()}
        {Lisp-Entry "set-up" accessor #f 115 34 115 42 ()}
        {Lisp-Entry "down" slot #f 116 8 116 12 ()}
        {Lisp-Entry "get-down" accessor #f 116 34 116 42 ()}
        {Lisp-Entry "set-down" accessor #f 116 34 116 42 ()}
        {Lisp-Entry "lines" slot #f 117 8 117 13 ()}
        {Lisp-Entry "get-lines" accessor #f 117 34 117 42 ()}
        {Lisp-Entry "set-lines" accessor #f 117 34 117 42 ()}
        {Lisp-Entry "initialize" method #f 120 11 120 21 ("EMPTY" "token~self" "col~self" "row~self" "game~self" "set!" "nextmethod" "col" "row" "game")}
        {Lisp-Entry "print" method #f 128 11 128 16 ("token" "game" "present-move" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "present-row" definition #f 134 21 134 32 ("get-board-rows" "-" "->string" "row" "game")}
      {Lisp-Entry "present-col" definition #f 138 21 138 32 ("Uppercase-Chars" "element" "->string" "col" "game")}
      {Lisp-Entry "present-move" definition #f 142 21 142 33 ("present-row" "present-col" "format" "get-col" "col" "get-row" "row" "let" "move" "game")}
      {Lisp-Entry "4-Line" class #f 155 7 155 13 ("Object")
        {Lisp-Entry "first" slot #f 158 8 158 13 ()}
        {Lisp-Entry "get-first" accessor #f 158 31 158 39 ()}
        {Lisp-Entry "second" slot #f 159 8 159 14 ()}
        {Lisp-Entry "get-second" accessor #f 159 31 159 39 ()}
        {Lisp-Entry "third" slot #f 160 8 160 13 ()}
        {Lisp-Entry "get-third" accessor #f 160 31 160 39 ()}
        {Lisp-Entry "fourth" slot #f 161 8 161 14 ()}
        {Lisp-Entry "get-fourth" accessor #f 161 31 161 39 ()}
        {Lisp-Entry "initialize" method #f 164 11 164 21 ("fourth~self" "third~self" "second~self" "first~self" "set!" "nextmethod" "fourth" "third" "second" "first")}
        {Lisp-Entry "count-token" method #f 172 11 172 22 ("fourth" "third" "second" "0" "1" "first" "get-token" "=" "if" "+" "token")}}
      {Lisp-Entry "line=?" definition #f 179 21 179 27 ("get-fourth" "get-third" "get-second" "get-first" "eq?" "and" "l2" "l1")}
      {Lisp-Entry "C4-Game" class #f 191 7 191 14 ("initialize" "Game")
        {Lisp-Entry "board-rows" slot #f 195 8 195 18 ()}
        {Lisp-Entry "get-board-rows" accessor #f 195 49 195 57 ()}
        {Lisp-Entry "set-board-rows" accessor #f 195 49 195 57 ()}
        {Lisp-Entry "board-columns" slot #f 196 8 196 21 ()}
        {Lisp-Entry "get-board-columns" accessor #f 196 49 196 57 ()}
        {Lisp-Entry "set-board-columns" accessor #f 196 49 196 57 ()}
        {Lisp-Entry "board-size" slot #f 197 8 197 18 ()}
        {Lisp-Entry "get-board-size" accessor #f 197 49 197 57 ()}
        {Lisp-Entry "set-board-size" accessor #f 197 49 197 57 ()}
        {Lisp-Entry "board" slot #f 198 8 198 13 ()}
        {Lisp-Entry "get-board" accessor #f 198 49 198 57 ()}
        {Lisp-Entry "set-board" accessor #f 198 49 198 57 ()}
        {Lisp-Entry "available-moves" slot #f 201 8 201 23 ()}
        {Lisp-Entry "get-available-moves" accessor #f 201 49 201 57 ()}
        {Lisp-Entry "set-available-moves" accessor #f 201 49 201 57 ()}
        {Lisp-Entry "initialize" method #f 204 11 204 21 ("setup-lines" "setup-squares" "make-availables" "available-moves" "make-board" "board" "*" "board-size" "board-columns" "board-rows" "set!" "nextmethod" "7" "columns" "6" "rows" "bind-keywords" "rest")}
        {Lisp-Entry "make-board" method #f 216 11 216 21 ("self" "Square" "new" "vector-set!" "square-rank" "rank" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop" "board-size" "make-vector" "board" "let")}
        {Lisp-Entry "make-availables" method #f 225 11 225 26 ("get-square" "vector-set!" "below" "0" "from" "col" "for" "loop" "1" "board-rows" "-" "bottom-row" "board-columns" "make-vector" "moves" "let")}
        {Lisp-Entry "setup-squares" method #f 233 11 233 24 ("+" "set-down" "1" "-" "find-square" "set-up" "get-square" "square" "let" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop")}
        {Lisp-Entry "directions" definition #f 246 14 246 24 ("-1" "1" "0")}
        {Lisp-Entry "setup-lines" method #f 253 11 253 22 ("compute-lines" "set-lines" "board-ref" "square" "let" "board-size" "below" "0" "from" "rank" "for" "loop")}
        {Lisp-Entry "compute-lines" method #f 259 11 259 24 ("4-Line" "new" "cons" "set!" "and" "if" "3" "d" "2" "c" "1" "b" "+" "find-next" "a" "0" "to" "-3" "from" "n" "directions" "in" "dir" "for" "loop" "lines" "get-col" "col" "get-row" "row" "let" "square")}
        {Lisp-Entry "find-next" method #f 274 11 274 20 ("cdr" "car" "*" "+" "find-square" "n" "col" "row" "dir")}
        {Lisp-Entry "iterate-board" method #f 285 18 285 31 ("get-square" "do" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop" "proc")}
        {Lisp-Entry "board-ref" method #f 291 18 291 27 ("board" "vector-ref" "rank")}
        {Lisp-Entry "square-rank" method #f 295 18 295 29 ("board-columns" "*" "+" "col" "row")}
        {Lisp-Entry "get-square" method #f 299 18 299 28 ("square-rank" "board-ref" "col" "row")}
        {Lisp-Entry "find-square" method #f 303 11 303 22 ("get-square" "board-columns" "board-rows" "<" "0" ">=" "and" "if" "col" "row")}
        {Lisp-Entry "available-move" method #f 315 18 315 32 ("available-moves" "vector-ref" "col")}
        {Lisp-Entry "set-available-move" method #f 319 18 319 36 ("available-moves" "vector-set!" "square" "col")}
        {Lisp-Entry "play" method #f 323 11 323 15 ("get-up" "get-col" "set-available-move" "set-token" "token" "move")}
        {Lisp-Entry "unplay" method #f 328 11 328 17 ("EMPTY" "set-token" "get-col" "set-available-move" "move")}
        {Lisp-Entry "play-move" method #f 338 11 338 20 ("check-status" "inform-players" "add-move" "play" "get-me" "token" "next-player!" "player" "let" "move")}
        {Lisp-Entry "win?" method #f 347 11 347 15 ("get-lines" "some?" "4" "count-token" "=" "line" "line?" "define" "token" "move")}
        {Lisp-Entry "draw?" method #f 354 11 354 16 ("available-move" "some" "board-columns" "below" "0" "from" "col" "for" "loop" "not" "token" "move")}
        {Lisp-Entry "load-board" method #f 365 11 365 21 ("invalidate-view" ">=" "if" "set-available-move" "length" "move" "COMPUTER" "O" "X" "case" "set-token" "get-square" "square" "let" "downto" "1" "board-rows" "-" "row" "token" "board-columns" "below" "0" "from" "col" "saved-board" "in" "tokens" "for" "loop" "HUMAN" "initialize-game" "game")}
        {Lisp-Entry "inspect-board" method #f 386 11 386 24 ("newline" "GREEN" "RED" "EMPTY" "eq?" "cond" "display" "get-square" "get-token" "token" "let" "board-columns" "col" "board-rows" "below" "0" "from" "row" "for" "loop")}}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "autoload.jazz"} 1238328026
    {Lisp-Entry "jazz.sample.c4.autoload" library #f 37 19 37 42 ("jazz")}})
"graphics"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.sample.c4" "src" "jazz" "sample" "c4" "graphics.jazz"} 1248797036
    {Lisp-Entry "jazz.sample.c4.graphics" library #f 38 9 38 32 ("jazz")
      {Lisp-Entry "C4-Images" definition #f 46 12 46 21 ("Jazz" "Directory")}
      {Lisp-Entry "generate-c4" definition #f 50 13 50 24 ("user-message" "format" "image-convert" "color" "name" "generate" "define" "10" "inner" "2" "1" "-" "/" "half" "71" "width" "let" "function" "C4-Images" "parse" "with-current-directory")}}})
"run"
 ({Lisp-File-Entry {File jazz.sample.c4 "src" "jazz" "sample" "c4" "run.jazz"} 1249913822
    {Lisp-Entry "jazz.sample.c4.run" library #f 37 9 37 27 ("C4-Application" "new" "boot-environment" "jazz.sample.c4.C4-AI" "'jazz.sample.c4.C4-AI" "warn-minimax-interpreted" "descriptor" "function" "jazz.sample.c4" "'jazz.sample.c4" "register-product-run" "jazz")}})
