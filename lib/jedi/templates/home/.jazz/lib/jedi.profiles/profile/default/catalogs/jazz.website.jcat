"JazzScheme-Server"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.website" "src" "jazz" "website" "server" "JazzScheme-Server.jazz"} 1226584772
    {Lisp-Entry "jazz.website.server.JazzScheme-Server" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "JazzScheme-Server" #f 40 7 40 24 ("Web-Server")
        {Lisp-Entry "Pages-Associations" #f 48 14 48 32 ("JazzScheme-Site")}
        {Lisp-Entry "get-pages-associations" #f 53 11 53 33 ("Pages-Associations")}}}})
"JazzScheme-Site"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.website" "src" "jazz" "website" "server" "JazzScheme-Site.jazz"} 1226584772
    {Lisp-Entry "jazz.website.server.JazzScheme-Site" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "JazzScheme-Site" #f 40 7 40 22 ("HTTP-Pages")}}})
"JazzWebsite-Transformation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.website" "src" "jazz" "website" "transformation" "JazzWebsite-Transformation.jazz"} 1227876046
    {Lisp-Entry "jazz.website.transformation.JazzWebsite-Transformation" #f 37 9 37 63 ("jazz")
      {Lisp-Entry "JazzWebsite-Transformation" #f 45 7 45 33 ("DocToHTML-Transformation")
        {Lisp-Entry "Generate-Manual?" #f 48 14 48 30 ()}
        {Lisp-Entry "anchors" #f 52 8 52 15 ()}
        {Lisp-Entry "anchor-names" #f 53 8 53 20 ()}
        {Lisp-Entry "next-section" #f 54 8 54 20 ()}
        {Lisp-Entry "<website>" #f 62 12 62 21 ("process-website" "user-message" "node")}
        {Lisp-Entry "<division>" #f 67 12 67 22 ("children->jml" ",title" "'title" "get-property" "title" "let" "node")}
        {Lisp-Entry "<screenshot>" #f 76 12 76 24 (",label" "align:" "class:" ",preview" "src:" ",image" "href:" "'image" "image" "'preview" "preview" "'label" "get-property" "label" "let" "node")}
        {Lisp-Entry "process-website" #f 91 11 91 26 ("get-output" "user-message" "process-sections" "collect-sections" "sections" "List-Factory" "new" "pages" "let" "website")}
        {Lisp-Entry "collect-sections" #f 100 11 100 27 ("get-children" "'section" "get-tag" "eq?" "node" "collect-if" "cons" "section" "function" "map" "website")}
        {Lisp-Entry "validate-anchor-names" #f 108 11 108 32 ("message-box" "->string" ":bulleted" "list" "map" "cons" "message" "not-null?" "get-output" "ambiguities" "put" "1" "length" ">" "when" "lst" "name" "function" "anchor-names" "iterate-table" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "process-sections" #f 129 11 129 27 ("subsection" "process-section" "subsections" "section" "bind" "info" "function" "for-each" "pages" "sections")}
        {Lisp-Entry "process-section" #f 139 11 139 26 ("validate-anchor-names" ",html" "section-path" "format" "path:" "put" "manual?" "'manual?" "not" "Generate-Manual?" "or" "when" "section-output" "html" "let" "reset-section" "name" "'name" "get-property" "user-message" "pages" "sections" "section")}
        {Lisp-Entry "reset-section" #f 149 11 149 24 ("1" "next-section" "anchor-names" "eq?" "test:" "make-table" "anchors" "set!")}
        {Lisp-Entry "section-path" #f 155 11 155 23 ("index" "'index" "home" "'home" "eq?" "if" "'name" "get-property" "name" "let" "section")}
        {Lisp-Entry "section-output" #f 162 11 162 25 ("section-content-output" "manual-output" "manual?" "'manual?" "if" "navigation-output" "id:" ",title" "type:" "rel:" "href:" "'title" "get-property" "title" "let" "sections" "section")}
        {Lisp-Entry "section-content-output" #f 180 11 180 33 ("get-output" "get-children" "error" "else" "1" "output-article" "article" "get-tag" "case" "JML-Element" "is?" "if" "node" "function" "for-each" "List-Factory" "new" "output" "let" "section")}
        {Lisp-Entry "navigation-output" #f 198 11 198 28 ("get-output" "subsec" "memq?" "or" "when" ",title" "if" ",path" "href:" "class:" "put" "nu=?" "unless" "eq?" "selected?" "'title" "title" "section-path" "format" "path" "'name" "get-property" "name" "subsecs" "sec" "bind" "info" "function" "for-each" "List-Factory" "new" "output" "let" "sections" "section")}
        {Lisp-Entry "manual-output" #f 225 11 225 24 ("summary-output" "summary" "toc-output" "toc" "index-output" "index?" "'index?" "if" "index" "manual-content-output" "content" "find-docs" "map" "append" "apply" "projects" "'projects" "project-paths" "'title" "get-property" "title" "let*" "section")}
        {Lisp-Entry "manual-content-output" #f 239 11 239 32 ("get-output" "0" "output-manual-doc-children" "project" "function" "for-each" "List-Factory" "new" "output" "let" "projects")}
        {Lisp-Entry "output-manual-doc" #f 247 11 247 28 ("output-manual-doc-children" "output-manual-method" "Method-Doc" "output-manual-property" "Property-Doc" "output-manual-slot" "Slot-Doc" "output-manual-constant" "Constant-Doc" "output-manual-primitive" "Primitive-Doc" "output-manual-syntax" "Syntax-Doc" "output-manual-concept" "Concept-Doc" "output-manual-form" "Form-Doc" "output-manual-class" "Class-Doc" "output-manual-interface" "Interface-Doc" "output-manual-package" "Package-Doc" "output-manual-section" "Section-Doc" "output-manual-project" "Project-Doc" "typecase" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-project" #f 265 11 265 32 ("output-doc-description" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-section" #f 271 11 271 32 ("output-doc-description" "else" "2" ",title" "class:" "put" "1" "case" "get-effective-title" "present-toc-path" "format" "title" "let" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-package" #f 281 11 281 32 ("output-doc-description" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-interface" #f 287 11 287 34 ("output-doc-description" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-class" #f 293 11 293 30 ("output-doc-description" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-form" #f 299 11 299 29 ("output-doc-description" "get-parameters" "either" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-concept" #f 306 11 306 32 ("output-doc-description" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-syntax" #f 312 11 312 31 ("output-doc-description" "get-parameters" "either" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-primitive" #f 319 11 319 34 ("output-doc-description" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-constant" #f 326 11 326 33 ("output-doc-description" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-slot" #f 333 11 333 29 ("output-doc-description" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-property" #f 340 11 340 33 ("output-doc-description" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-manual-method" #f 347 11 347 31 ("output-doc-examples" "output-doc-description" "get-parameters" "either" "get-effective-title" "class:" "put" "output-anchor" "output" "path" "level" "doc")}
        {Lisp-Entry "output-doc-description" #f 355 11 355 33 ("put-sequence" "form->node" "->jml" "paragraphs" "tag" "bind" "when" "get-description" "description" "let" "output" "doc")}
        {Lisp-Entry "output-doc-examples" #f 362 11 362 30 ("get-children" ",@rest" "form->node" "->jml" "rest" "tag" "bind" "example" "function" "map" "put" "not-null?" "when" "get-examples" "examples" "let" "output" "doc")}
        {Lisp-Entry "output-manual-doc-children" #f 374 11 374 37 ("length" "0" "naturals" "cons" "1" "+" "output-manual-doc" "rank" "for-each" "get-name" "child" "function" "key:" "<" "sort" "if" "sorted" "effective-manual-doc-children" "children" "get-sort?" "Section-Doc" "is?" "and" "sort?" "let*" "output" "path" "level" "doc")}
        {Lisp-Entry "effective-manual-doc-children" #f 386 11 386 40 ("get-output" "get-children" "put" "put-sequence" "find-docs" "docs" "get-path" "path" "let*" "Doc-Insert" "is?" "if" "child" "function" "for-each" "List-Factory" "new" "fact" "let" "doc")}
        {Lisp-Entry "find-docs" #f 398 11 398 20 ("get-output" "find-docs" "'find-docs" "unimplemented" "else" "get-catalogs" "get-parent-project" "eq?" "when" "function" "for-each" "get-project" "parent" "*" "equal?" "get-client" "put" "null?" "cond" "find-catalog" "catalog" "let" "list" "symbol?" "if" "rest" "name" "bind" "List-Factory" "new" "docs" "get-documentation-cataloguer" "cataloguer" "get-application" "appl" "let*" "path")}
        {Lisp-Entry "output-anchor" #f 417 11 417 24 ("anchor-names" "table-add" "when" ",anchor" "name:" "put" "anchors" "register-anchor" "anchor" "get-name" "name" "let" "output" "doc")}
        {Lisp-Entry "register-anchor" #f 425 11 425 26 ("table-set!" "increase!" "next-section" "format" "prog1" "->string" "if" "anchor" "let" "anchors" "name" "object")}
        {Lisp-Entry "summary-output" #f 436 11 436 25 ("0" "naturals" "+" "list" "doc-summary-output" "rank" "doc" "function" "map" "car" "get-children" "1" "length" "=" "docs" "let" "index?" "'index?" "get-property" "if" "href:" ",title" "class:" "style:" "user-message" "projects" "section" "title")}
        {Lisp-Entry "doc-summary-output" #f 451 11 451 29 ("length" "0" "naturals" "cons" "1" "+" "doc-summary-output" "rank" "child" "function" "map" "null?" "if" ",text" ",anchor" "href:" "class:" "collect-summary-children" "children" "anchors" "table-ref" "anchor" "present-toc-path" "format" "text" "present-doc-title" "title" "let*" "path" "level" "doc")}
        {Lisp-Entry "collect-summary-children" #f 467 11 467 35 ("get-name" "child" "function" "key:" "<" "sort" "if" "has-project-descendant?" "collect-if" "effective-manual-doc-children" "children" "get-sort?" "Section-Doc" "is?" "and" "sort?" "let" "doc")}
        {Lisp-Entry "has-project-descendant?" #f 476 11 476 34 ("effective-manual-doc-children" "for-each" "Section-Doc" "set!" "Project-Doc" "typecase" "function" "iter" "letrec" "has?" "let" "doc")}
        {Lisp-Entry "toc-output" #f 492 11 492 21 ("0" "naturals" "+" "list" "doc-toc-output" "rank" "doc" "function" "map" "car" "get-children" "1" "length" "=" "if" "docs" "let" "class:" "name:" "user-message" "projects")}
        {Lisp-Entry "doc-toc-output" #f 502 11 502 25 ("length" "0" "naturals" "cons" "+" "doc-toc-output" "child" "function" "map" "null?" ",text" ",anchor" "href:" "class:" "3" "<=" "1" "=" "and" "if" "toc-prefix" "car" "rank" "collect-toc-children" "children" "anchors" "table-ref" "anchor" "present-toc-path" "format" "text" "present-doc-title" "title" "let*" "path" "level" "doc")}
        {Lisp-Entry "present-doc-title" #f 520 11 520 28 ("get-effective-title" "doc")}
        {Lisp-Entry "present-toc-path" #f 524 11 524 27 ("reverse" "->string" "map" "join" "path")}
        {Lisp-Entry "collect-toc-children" #f 528 11 528 31 ("get-name" "key:" "<" "sort" "if" "Category-Doc" "Package-Doc" "Project-Doc" "or" "child" "function" "collect-if" "effective-manual-doc-children" "children" "get-sort?" "Section-Doc" "is?" "and" "sort?" "let" "doc")}
        {Lisp-Entry "index-output" #f 546 11 546 23 ("get-output" "width:" "index-navigator" "class:" "name:" "output-letter" "letter" "function" "for-each" "List-Factory" "new" "output" "eq?" "test:" "make-table" "letter-anchors" "car" "key:" "letters-partition" "nu<?" "sort" "letters" "let" "user-message")}
        {Lisp-Entry "output-letter" #f 560 11 560 24 (",title" "href:" "format" "title" "doc" "info" "function" "for-each" "string" ",anchor" "name:" "class:" "colspan:" "put" "register-anchor" "anchor" "let" "infos" "char" "bind" "output" "letter-anchors" "letter")}
        {Lisp-Entry "letters-partition" #f 573 11 573 28 ("third" "first" "upcase" "info" "function" "key:" "gather-anchors" "partition")}
        {Lisp-Entry "gather-anchors" #f 577 11 577 25 ("third" "key:" "nu<?" "sort" "list" "cons" "set!" "get-effective-title" "title" "get-name" "when" "anchor" "doc" "function" "anchors" "iterate-table" "lst" "let")}
        {Lisp-Entry "index-navigator" #f 587 11 587 26 ("get-output" "not-null?" "when" "string" ",anchor" "href:" "class:" "put" "table-ref" "format" "anchor" "car" "char" "let" "letter" "for-each" "letter-set" "function" "process-letter-set" "List-Factory" "new" "output" "alpha" "assv-value" "non-alpha" "alphabetic-partition" "partition" "let*" "letter-anchors" "letters")}
        {Lisp-Entry "alphabetic-partition" #f 608 11 608 31 ("alphabetic?" "car" "char" "let" "letter" "function" "key:" "partition" "letters")}
        {Lisp-Entry "output-article" #f 619 11 619 25 ("get-children" "error" "else" "1" "+" "output-article" "output-article-description" "description" "get-tag" "case" "JML-Element" "is?" "if" "node" "function" "for-each" "output" "level" "article")}
        {Lisp-Entry "output-article-description" #f 630 11 630 37 ("children->jml" "else" "class:" "2" ",title" "1" "case" "'title" "title" "->string" "name:" "null?" "if" "'name" "get-property" "name" "let" "put" "output" "level" "description" "article")}}}})
"_website"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.website" "src" "jazz" "website" "_website.jazz"} 1226584772
    {Lisp-Entry "jazz.website" #f 37 9 37 21 ("jazz")}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz.website" "src" "jazz" "website" "autoload.jazz"} 1226584772
    {Lisp-Entry "jazz.website.autoload" #f 37 9 37 30 ("jazz")}})
