"ADO-Connection"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "connection" "ADO-Connection.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.connection.ADO-Connection" #f 37 9 37 62 ("jazz")
      {Lisp-Entry "ADO-Connection" #f 48 7 48 21 ("Connection")
        {Lisp-Entry "handle" #f 51 8 51 14 ()}
        {Lisp-Entry "setup-connection" #f 54 11 54 27 ("0" "put-CommandTimeout" "Connection-class" "com-create" "handle" "set!" "nextmethod")}
        {Lisp-Entry "destroy-connection" #f 61 11 61 29 ("nextmethod" "set!" "com-release" "Connection$Close" "handle" "when")}
        {Lisp-Entry "get-handle" #f 74 18 74 28 ("handle")}
        {Lisp-Entry "open" #f 83 11 83 15 ("nextmethod" "adConnectUnspecified" "handle" "Connection$Open" "get-connection-string" "connection-string" "let" "rest" "data-source")}
        {Lisp-Entry "get-state" #f 94 11 94 20 ("unknown" "'unknown" "else" "closed" "'closed" "adStateClosed" "open" "'open" "adStateOpen" "=" "cond" "handle" "get-State" "state" "let")}
        {Lisp-Entry "new-request" #f 106 11 106 22 ("self" "ADO-Request" "new")}
        {Lisp-Entry "execute" #f 115 11 115 18 ("adExecuteNoRecords" "adCmdText" "bitwise-ior" "handle" "Connection$Execute" "recordset" "affected" "receive" "trace-ado" "command")}
        {Lisp-Entry "begin-transaction" #f 126 11 126 28 ("handle" "Connection$BeginTrans")}
        {Lisp-Entry "commit-transaction" #f 130 11 130 29 ("handle" "Connection$CommitTrans")}
        {Lisp-Entry "rollback-transaction" #f 134 11 134 31 ("handle" "Connection$RollbackTrans")}}}})
"ADO-Data-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "ADO-Data-Source.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.ADO-Data-Source" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "ADO-Data-Source" #f 48 7 48 22 ("Data-Source")
        {Lisp-Entry "dsn" #f 51 12 51 15 ("generate")}
        {Lisp-Entry "external-name" #f 54 16 54 29 ("ado" "'ado" "rest")}
        {Lisp-Entry "new-inventory" #f 63 11 63 24 ("get-connection-string" "ADO-Inventory" "new" "rest" "connection")}
        {Lisp-Entry "new-connection" #f 72 11 72 25 ("self" "ADO-Connection" "new")}
        {Lisp-Entry "get-connection-string" #f 76 11 76 32 ("format" "dsn" "when")}
        {Lisp-Entry "get-class-presentation" #f 86 16 86 38 ()}
        {Lisp-Entry "property-presentation" #f 90 16 90 37 ("nextmethod" "else" "dsn" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 96 11 96 27 ("nextmethod" "else" "String-Row" "new" "dsn" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 102 11 102 37 ("password" "username" "dsn" "class-info")}}}})
"ADO-Datatype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "inventory" "ADO-Datatype.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.inventory.ADO-Datatype" #f 37 9 37 59 ("jazz")
      {Lisp-Entry "get-types" #f 46 13 46 22 ()}
      {Lisp-Entry "ADO-Datatype" #f 50 7 50 19 ("Datatype")}}})
"ADO-Inventory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "inventory" "ADO-Inventory.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.inventory.ADO-Inventory" #f 37 9 37 60 ("jazz")
      {Lisp-Entry "ADO-Inventory" #f 45 7 45 20 ("Inventory")}
      {Lisp-Entry "ADO-Inventory" #f 51 7 51 20 ("Inventory")
        {Lisp-Entry "handle" #f 54 8 54 14 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("destroy-mandatory" "put-ActiveConnection" "Catalog" "com-create" "handle" "set!" "nextmethod" "connection-string" "connection")}
        {Lisp-Entry "destroy" #f 64 11 64 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-tables" #f 74 11 74 21 ("get-output" "0" "naturals" "self" "ADO-Inventory-Table" "put" "get-Type" "=" "unless" "get-Item" "table" "n" "function" "for-each" "List-Factory" "new" "fact" "get-Count" "count" "let" "handle" "get-Tables" "tables" "with-closed")}
        {Lisp-Entry "get-table" #f 86 11 86 20 ("get-Item" "self" "ADO-Inventory-Table" "new" "handle" "get-Tables" "tables" "with-closed" "name")}
        {Lisp-Entry "get-views" #f 91 11 91 20 ("get-Item" "self" "ADO-Inventory-View" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "handle" "get-Views" "views" "with-closed")}
        {Lisp-Entry "get-procedures" #f 97 11 97 25 ("get-Item" "self" "ADO-Inventory-Procedure" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "handle" "get-Procedures" "procedures" "with-closed")}}}})
"ADO-Inventory-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "inventory" "ADO-Inventory-Column.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.inventory.ADO-Inventory-Column" #f 37 9 37 67 ("jazz")
      {Lisp-Entry "ADO-Inventory-Column" #f 45 7 45 27 ("Inventory-Column")}
      {Lisp-Entry "ADO-Inventory-Column" #f 51 7 51 27 ("Inventory-Column")
        {Lisp-Entry "handle" #f 54 8 54 14 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "index-column?" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-title" #f 73 11 73 20 ("handle" "get-Name")}
        {Lisp-Entry "get-datatype" #f 77 11 77 23 ("get-size" "get-type" "ADO-Datatype" "new-datatype")}
        {Lisp-Entry "get-type" #f 81 11 81 19 ("2" "handle" "get-Type" "DataTypeEnum" "value->name" "symbol->string" "subseq")}
        {Lisp-Entry "get-size" #f 85 11 85 19 ("handle" "get-DefinedSize")}
        {Lisp-Entry "get-scale" #f 89 11 89 20 ("handle" "get-NumericScale")}
        {Lisp-Entry "get-precision" #f 93 11 93 24 ("handle" "get-Precision")}
        {Lisp-Entry "get-nullable?" #f 97 11 97 24 ("adColNullable" "handle" "get-Attributes" "mask-bit-set?")}
        {Lisp-Entry "get-fixed?" #f 101 11 101 21 ("adColFixed" "handle" "get-Attributes" "mask-bit-set?")}
        {Lisp-Entry "get-description" #f 105 11 105 26 ()}}}})
"ADO-Inventory-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "inventory" "ADO-Inventory-Constraint.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.inventory.ADO-Inventory-Constraint" #f 37 9 37 71 ("jazz")
      {Lisp-Entry "ADO-Inventory-Constraint" #f 45 7 45 31 ("Inventory-Constraint")}
      {Lisp-Entry "ADO-Inventory-Constraint" #f 51 7 51 31 ("Inventory-Constraint")
        {Lisp-Entry "handle" #f 54 8 54 14 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-title" #f 73 11 73 20 ("handle" "get-Name")}}}})
"ADO-Inventory-Index"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "inventory" "ADO-Inventory-Index.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.inventory.ADO-Inventory-Index" #f 37 9 37 66 ("jazz")
      {Lisp-Entry "ADO-Inventory-Index" #f 45 7 45 26 ("Inventory-Index")}
      {Lisp-Entry "ADO-Inventory-Index" #f 51 7 51 26 ("Inventory-Index")
        {Lisp-Entry "handle" #f 54 8 54 14 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-title" #f 73 11 73 20 ("handle" "get-Name")}
        {Lisp-Entry "get-unique?" #f 77 11 77 22 ("handle" "get-Unique")}
        {Lisp-Entry "get-required?" #f 81 11 81 24 ("unspecified")}
        {Lisp-Entry "get-ignore-nulls?" #f 85 11 85 28 ("handle" "get-IndexNulls")}
        {Lisp-Entry "get-primary?" #f 89 11 89 23 ("handle" "get-PrimaryKey")}
        {Lisp-Entry "get-fields" #f 93 11 93 21 ("get-Item" "self" "inventory" "ADO-Inventory-Column" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "handle" "get-Columns" "fields" "with-closed")}}}})
"ADO-Inventory-Procedure"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "inventory" "ADO-Inventory-Procedure.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.inventory.ADO-Inventory-Procedure" #f 37 9 37 70 ("jazz")
      {Lisp-Entry "ADO-Inventory-Procedure" #f 45 7 45 30 ("Inventory-Procedure")}
      {Lisp-Entry "ADO-Inventory-Procedure" #f 51 7 51 30 ("Inventory-Procedure")
        {Lisp-Entry "handle" #f 54 8 54 14 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-title" #f 73 11 73 20 ("handle" "get-Name")}
        {Lisp-Entry "get-text" #f 77 11 77 19 ("get-text" "'get-text" "unimplemented")}}}})
"ADO-Inventory-Table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "inventory" "ADO-Inventory-Table.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.inventory.ADO-Inventory-Table" #f 37 9 37 66 ("jazz")
      {Lisp-Entry "ADO-Inventory-Table" #f 45 7 45 26 ("Inventory-Table")}
      {Lisp-Entry "ADO-Inventory-Table" #f 51 7 51 26 ("Inventory-Table")
        {Lisp-Entry "handle" #f 54 8 54 14 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-title" #f 73 11 73 20 ("handle" "get-Name")}
        {Lisp-Entry "get-columns" #f 77 11 77 22 ("get-Item" "self" "inventory" "ADO-Inventory-Column" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "handle" "get-Columns" "columns" "with-closed")}
        {Lisp-Entry "get-keys" #f 84 26 84 34 ("get-output" "0" "naturals" "put" "columns" "get-Item" "key" "n" "function" "for-each" "List-Factory" "new" "fact" "get-Count" "count" "let" "handle" "get-Keys" "keys" "with-closed")}
        {Lisp-Entry "get-indexes" #f 95 11 95 22 ("get-Item" "self" "inventory" "ADO-Inventory-Index" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "handle" "get-Indexes" "indexes" "with-closed")}
        {Lisp-Entry "get-triggers" #f 101 11 101 23 ()}
        {Lisp-Entry "get-constraints" #f 105 11 105 26 ()}}}})
"ADO-Inventory-Trigger"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "inventory" "ADO-Inventory-Trigger.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.inventory.ADO-Inventory-Trigger" #f 37 9 37 68 ("jazz")
      {Lisp-Entry "ADO-Inventory-Trigger" #f 45 7 45 28 ("Inventory-Trigger")}
      {Lisp-Entry "ADO-Inventory-Trigger" #f 51 7 51 28 ("Inventory-Trigger")
        {Lisp-Entry "handle" #f 54 8 54 14 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-title" #f 73 11 73 20 ("handle" "get-Name")}}}})
"ADO-Inventory-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "inventory" "ADO-Inventory-View.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.inventory.ADO-Inventory-View" #f 37 9 37 65 ("jazz")
      {Lisp-Entry "ADO-Inventory-View" #f 46 7 46 25 ("Inventory-View")}
      {Lisp-Entry "ADO-Inventory-View" #f 52 7 52 25 ("Inventory-View")
        {Lisp-Entry "handle" #f 55 8 55 14 ()}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 64 11 64 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-title" #f 74 11 74 20 ("handle" "get-Name")}}}})
"ADO-Recordset"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "connection" "ADO-Recordset.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.connection.ADO-Recordset" #f 37 9 37 61 ("jazz")
      {Lisp-Entry "ADO-Recordset" #f 48 7 48 20 ("Recordset")
        {Lisp-Entry "handle" #f 51 8 51 14 ()}
        {Lisp-Entry "setup-recordset" #f 54 11 54 26 ("Recordset-class" "com-create" "handle" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "destroy-recordset" #f 59 11 59 28 ("nextmethod" "set!" "com-release" "Recordset$Close" "adStateClosed" "Recordset$get-State" "/=" "handle" "and" "when")}
        {Lisp-Entry "get-handle" #f 72 18 72 28 ("handle")}
        {Lisp-Entry "opened?" #f 81 11 81 18 ("handle" "boolean")}
        {Lisp-Entry "open" #f 85 11 85 15 ("options" "lock-type" "cursor-type" "Recordset$Open" "1" "+" "handle" "put-MaxRecords" "max-load" "neq?" "when" "else" "format" "data-source" "get-handle" "cond" "connection" "let" "command")}
        {Lisp-Entry "get-state" #f 108 11 108 20 ("unknown" "'unknown" "else" "closed" "'closed" "adStateClosed" "open" "'open" "adStateOpen" "=" "cond" "handle" "Recordset$get-State" "state" "let")}
        {Lisp-Entry "new-recordset-metadata" #f 120 11 120 33 ("handle" "Recordset$get-Fields" "ADO-Recordset-Metadata" "new")}
        {Lisp-Entry "get-field-type" #f 124 11 124 25 ("get-Type" "field" "metadata")}
        {Lisp-Entry "get-field-value" #f 128 11 128 26 ("Field$get-Value" "field" "metadata")}
        {Lisp-Entry "safe-field-value" #f 132 11 132 27 ("else" "adVarBinary" "adLongVarBinary" "get-field-type" "ecase" "get-field-value" "field" "metadata")}
        {Lisp-Entry "next-recordset!" #f 146 11 146 26 ("set!" "destroy-recordset" "handle" "NextRecordset" "new-handle" "records-affected" "receive")}
        {Lisp-Entry "move-first" #f 157 11 157 21 ("handle" "MoveFirst")}
        {Lisp-Entry "move-last" #f 161 11 161 20 ("handle" "MoveLast")}
        {Lisp-Entry "move-next" #f 165 11 165 20 ("handle" "Recordset$MoveNext")}
        {Lisp-Entry "move-previous" #f 169 11 169 24 ("handle" "MovePrevious")}
        {Lisp-Entry "at-bof?" #f 173 11 173 18 ("handle" "get-BOF")}
        {Lisp-Entry "at-eof?" #f 177 11 177 18 ("handle" "Recordset$get-EOF")}
        {Lisp-Entry "iterate-records" #f 181 11 181 26 ("move-next" "not" "and" "while" "move-first" "at-eof?" "unless" "proc")}}}})
"ADO-Recordset-Metadata"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "connection" "ADO-Recordset-Metadata.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.connection.ADO-Recordset-Metadata" #f 37 9 37 70 ("jazz")
      {Lisp-Entry "ADO-Recordset-Metadata" #f 47 7 47 29 ("Recordset-Metadata")
        {Lisp-Entry "handle" #f 50 8 50 14 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("destroy-mandatory" "handle" "set!" "nextmethod" "hnd")}
        {Lisp-Entry "destroy" #f 59 11 59 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 69 18 69 28 ("handle")}
        {Lisp-Entry "get-count" #f 78 11 78 20 ("handle" "Collection$get-Count")}
        {Lisp-Entry "get-field" #f 82 11 82 20 ("handle" "Fields$get-Item" "field-name")}
        {Lisp-Entry "get-field-value" #f 86 11 86 26 ("Field$get-Value" "get-field" "field" "with-closed" "field-name")}
        {Lisp-Entry "get-field-name" #f 91 11 91 25 ("Field$get-Name" "field")}
        {Lisp-Entry "get-field-type" #f 95 11 95 25 ("get-Type" "field")}
        {Lisp-Entry "get-field-size" #f 99 11 99 25 ("get-DefinedSize" "field")}
        {Lisp-Entry "get-field-precision" #f 103 11 103 30 ("get-Precision" "field")}}}})
"ADO-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "connection" "ADO-Request.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.connection.ADO-Request" #f 37 9 37 59 ("jazz")
      {Lisp-Entry "ADO-Request" #f 46 7 46 18 ("Request")
        {Lisp-Entry "new-recordset" #f 49 11 49 24 ("connection" "connection:" "ADO-Recordset" "new" "apply" "trace-ado" "rest" "request")}}}})
"ADODB"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "com" "ADODB.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.com.ADODB" #f 37 9 37 40 ("BSTR*" "VARIANT" "VARIANT_BOOL*" "INT" "LONG*" "IUnknown**" "LONG" "VARIANT*" "BSTR" "in" "INT*" "out" "jazz")
      {Lisp-Entry "patch-link" #f 46 13 46 23 ("HRESULT" "LPVOID*" "DWORD" "IUnknown*" "GUID*" "c-function" "coptr*" "interface" "context" "aggregate" "class")}
      {Lisp-Entry "Collection$get-Count" #f 55 25 55 45 ()}
      {Lisp-Entry "_Connection" #f 63 12 63 23 ("com-interface")}
      {Lisp-Entry "Connection-class" #f 67 12 67 28 ("_Connection" "com-class")}
      {Lisp-Entry "Connection$Close" #f 71 26 71 42 ()}
      {Lisp-Entry "Connection$Execute" #f 72 26 72 44 ()}
      {Lisp-Entry "Connection$BeginTrans" #f 73 26 73 47 ()}
      {Lisp-Entry "Connection$CommitTrans" #f 74 26 74 48 ()}
      {Lisp-Entry "Connection$RollbackTrans" #f 75 26 75 50 ()}
      {Lisp-Entry "Connection$Open" #f 76 26 76 41 ()}
      {Lisp-Entry "Recordset-class" #f 84 12 84 27 ("cons")}
      {Lisp-Entry "Recordset$get-EOF" #f 88 26 88 43 ()}
      {Lisp-Entry "Recordset$get-Fields" #f 89 26 89 46 ()}
      {Lisp-Entry "Recordset$Close" #f 90 26 90 41 ()}
      {Lisp-Entry "Recordset$MoveNext" #f 91 26 91 44 ()}
      {Lisp-Entry "Recordset$Open" #f 92 26 92 40 ()}
      {Lisp-Entry "Recordset$get-State" #f 93 26 93 45 ()}
      {Lisp-Entry "Fields$get-Item" #f 101 26 101 41 ()}
      {Lisp-Entry "Field$get-Name" #f 109 26 109 40 ()}
      {Lisp-Entry "Field$get-Value" #f 110 26 110 41 ()}
      {Lisp-Entry "CursorTypeEnum" #f 118 15 118 29 ("3" "adOpenStatic" "2" "adOpenDynamic" "1" "adOpenKeyset" "0" "adOpenForwardOnly" "-1" "adOpenUnspecified")}
      {Lisp-Entry "CursorOptionEnum" #f 133 15 133 31 ("8388608" "adIndex" "4194304" "adSeek" "524288" "adFind" "262144" "adNotify" "131072" "adResync" "65536" "adUpdateBatch" "16384" "adApproxPosition" "8192" "adBookmark" "16809984" "adUpdate" "16779264" "adDelete" "16778240" "adAddNew" "512" "adMovePrevious" "256" "adHoldRecords")}
      {Lisp-Entry "LockTypeEnum" #f 156 15 156 27 ("4" "adLockBatchOptimistic" "3" "adLockOptimistic" "2" "adLockPessimistic" "1" "adLockReadOnly" "-1" "adLockUnspecified")}
      {Lisp-Entry "ExecuteOptionEnum" #f 171 15 171 32 ("128" "adExecuteNoRecords" "64" "adAsyncFetchNonBlocking" "32" "adAsyncFetch" "16" "adAsyncExecute" "-1" "adOptionUnspecified")}
      {Lisp-Entry "ConnectOptionEnum" #f 186 15 186 32 ("16" "adAsyncConnect" "-1" "adConnectUnspecified")}
      {Lisp-Entry "ObjectStateEnum" #f 198 15 198 30 ("8" "adStateFetching" "4" "adStateExecuting" "2" "adStateConnecting" "1" "adStateOpen" "0" "adStateClosed")}
      {Lisp-Entry "CursorLocationEnum" #f 213 15 213 33 ("adUseClientBatch" "3" "adUseClient" "2" "adUseServer" "1" "adUseNone")}
      {Lisp-Entry "DataTypeEnum" #f 227 15 227 27 ("8192" "adArray" "139" "adVarNumeric" "138" "adPropVariant" "64" "adFileTime" "136" "adChapter" "205" "adLongVarBinary" "204" "adVarBinary" "128" "adBinary" "203" "adLongVarWChar" "202" "adVarWChar" "130" "adWChar" "201" "adLongVarChar" "200" "adVarChar" "129" "adChar" "8" "adBSTR" "135" "adDBTimeStamp" "134" "adDBTime" "133" "adDBDate" "7" "adDate" "72" "adGUID" "13" "adIUnknown" "9" "adIDispatch" "12" "adVariant" "132" "adUserDefined" "10" "adError" "11" "adBoolean" "131" "adNumeric" "14" "adDecimal" "6" "adCurrency" "5" "adDouble" "4" "adSingle" "21" "adUnsignedBigInt" "19" "adUnsignedInt" "18" "adUnsignedSmallInt" "17" "adUnsignedTinyInt" "20" "adBigInt" "3" "adInteger" "2" "adSmallInt" "16" "adTinyInt" "0" "adEmpty")}
      {Lisp-Entry "FieldAttributeEnum" #f 277 15 277 33 ("262144" "adFldIsCollection" "131072" "adFldIsDefaultStream" "65536" "adFldIsRowURL" "32768" "adFldKeyColumn" "16384" "adFldNegativeScale" "8192" "adFldIsChapter" "4096" "adFldCacheDeferred" "512" "adFldRowVersion" "256" "adFldRowID" "128" "adFldLong" "64" "adFldMayBeNull" "32" "adFldIsNullable" "16" "adFldFixed" "8" "adFldUnknownUpdatable" "4" "adFldUpdatable" "2" "adFldMayDefer" "-1" "adFldUnspecified")}
      {Lisp-Entry "EditModeEnum" #f 304 15 304 27 ("4" "adEditDelete" "2" "adEditAdd" "1" "adEditInProgress" "0" "adEditNone")}
      {Lisp-Entry "RecordStatusEnum" #f 318 15 318 31 ("262144" "adRecDBDeleted" "131072" "adRecSchemaViolation" "65536" "adRecPermissionDenied" "32768" "adRecOutOfMemory" "16384" "adRecObjectOpen" "8192" "adRecMaxChangesExceeded" "4096" "adRecIntegrityViolation" "2048" "adRecConcurrencyViolation" "1024" "adRecCantRelease" "256" "adRecCanceled" "128" "adRecPendingChanges" "64" "adRecMultipleChanges" "16" "adRecInvalid" "8" "adRecUnmodified" "4" "adRecDeleted" "2" "adRecModified" "1" "adRecNew" "0" "adRecOK")}
      {Lisp-Entry "GetRowsOptionEnum" #f 346 15 346 32 ("-1" "adGetRowsRest")}
      {Lisp-Entry "PositionEnum" #f 357 15 357 27 ("-3" "adPosEOF" "-2" "adPosBOF" "-1" "adPosUnknown")}
      {Lisp-Entry "BookmarkEnum" #f 370 15 370 27 ("2" "adBookmarkLast" "1" "adBookmarkFirst" "0" "adBookmarkCurrent")}
      {Lisp-Entry "MarshalOptionsEnum" #f 384 15 384 33 ("1" "adMarshalModifiedOnly" "0" "adMarshalAll")}
      {Lisp-Entry "AffectEnum" #f 397 15 397 25 ("4" "adAffectAllChapters" "3" "adAffectAll" "2" "adAffectGroup" "1" "adAffectCurrent")}
      {Lisp-Entry "ResyncEnum" #f 412 15 412 25 ("2" "adResyncAllValues" "1" "adResyncUnderlyingValues")}
      {Lisp-Entry "CompareEnum" #f 425 15 425 26 ("4" "adCompareNotComparable" "3" "adCompareNotEqual" "2" "adCompareGreaterThan" "1" "adCompareEqual" "0" "adCompareLessThan")}
      {Lisp-Entry "FilterGroupEnum" #f 441 15 441 30 ("5" "adFilterConflictingRecords" "4" "adFilterPredicate" "3" "adFilterFetchedRecords" "2" "adFilterAffectedRecords" "1" "adFilterPendingRecords" "0" "adFilterNone")}
      {Lisp-Entry "SearchDirectionEnum" #f 458 15 458 34 ("-1" "adSearchBackward" "1" "adSearchForward")}
      {Lisp-Entry "PersistFormatEnum" #f 479 15 479 32 ("1" "adPersistXML" "0" "adPersistADTG")}
      {Lisp-Entry "StringFormatEnum" #f 492 15 492 31 ("2" "adClipString")}
      {Lisp-Entry "ConnectPromptEnum" #f 503 15 503 32 ("4" "adPromptNever" "3" "adPromptCompleteRequired" "2" "adPromptComplete" "1" "adPromptAlways")}
      {Lisp-Entry "ConnectModeEnum" #f 517 15 517 30 ("4194304" "adModeRecursive" "16" "adModeShareDenyNone" "12" "adModeShareExclusive" "8" "adModeShareDenyWrite" "4" "adModeShareDenyRead" "3" "adModeReadWrite" "2" "adModeWrite" "1" "adModeRead" "0" "adModeUnknown")}
      {Lisp-Entry "RecordCreateOptionsEnum" #f 536 15 536 38 ("-1" "adFailIfNotExists" "67108864" "adCreateOverwrite" "33554432" "adOpenIfExists" "0" "adCreateNonCollection" "-2147483648" "adCreateStructDoc" "8192" "adCreateCollection")}
      {Lisp-Entry "RecordOpenOptionsEnum" #f 552 15 552 36 ("32768" "adDelayFetchFields" "16384" "adDelayFetchStream" "4096" "adOpenAsync" "8388608" "adOpenSource" "-1" "adOpenRecordUnspecified")}
      {Lisp-Entry "IsolationLevelEnum" #f 567 15 567 33 ("adXactIsolated" "1048576" "adXactSerializable" "65536" "adXactRepeatableRead" "adXactReadCommitted" "4096" "adXactCursorStability" "adXactBrowse" "256" "adXactReadUncommitted" "16" "adXactChaos" "-1" "adXactUnspecified")}
      {Lisp-Entry "XactAttributeEnum" #f 587 15 587 32 ("1048576" "adXactSyncPhaseOne" "524288" "adXactAsyncPhaseOne" "262144" "adXactAbortRetaining" "131072" "adXactCommitRetaining")}
      {Lisp-Entry "PropertyAttributesEnum" #f 601 15 601 37 ("1024" "adPropWrite" "512" "adPropRead" "2" "adPropOptional" "1" "adPropRequired" "0" "adPropNotSupported")}
      {Lisp-Entry "ErrorValueEnum" #f 617 15 617 29 ("3751" "adErrDenyTypeNotSupported" "3750" "adErrDenyNotSupported" "3749" "adErrFieldsUpdateFailed" "3748" "adErrCantChangeConnection" "3747" "adErrCatalogNotSet" "3746" "adErrPropNotSupported" "3745" "adErrPropNotSettable" "3744" "adErrPropNotSet" "3743" "adErrPropNotAllSettable" "3742" "adErrPropConflicting" "3741" "adErrPropInvalidValue" "3740" "adErrPropInvalidOption" "3739" "adErrPropInvalidColumn" "3738" "adErrDelResOutOfScope" "3737" "adErrURLNamedRowDoesNotExist" "3736" "adErrUnavailable" "3735" "adErrResourceOutOfScope" "3734" "adErrOutOfSpace" "3733" "adErrVolumeNotFound" "3732" "adErrCannotComplete" "3731" "adErrResourceExists" "3730" "adErrResourceLocked" "3729" "adErrInvalidURL" "3728" "adErrTreePermissionDenied" "3727" "adErrURLDoesNotExist" "3726" "adErrColumnNotOnThisRow" "3725" "adErrCantCreate" "3724" "adErrCantConvertvalue" "3723" "adErrSignMismatch" "3722" "adErrSchemaViolation" "3721" "adErrDataOverflow" "3720" "adErrPermissionDenied" "3719" "adErrIntegrityViolation" "3718" "adwrnSecurityDialogHeader" "3717" "adwrnSecurityDialog" "3716" "adErrUnsafeOperation" "3715" "adErrNotExecuting" "3714" "adErrInvalidTransaction" "3713" "adErrStillConnecting" "3712" "adErrOperationCancelled" "3711" "adErrStillExecuting" "3710" "adErrNotReentrant" "3709" "adErrInvalidConnection" "3708" "adErrInvalidParamInfo" "3707" "adErrBoundToCommand" "3706" "adErrProviderNotFound" "3705" "adErrObjectOpen" "3704" "adErrObjectClosed" "3421" "adErrDataConversion" "3420" "adErrObjectNotSet" "3367" "adErrObjectInCollection" "3265" "adErrItemNotFound" "3251" "adErrFeatureNotAvailable" "3246" "adErrInTransaction" "3220" "adErrCantChangeProvider" "3219" "adErrIllegalOperation" "3021" "adErrNoCurrentRecord" "3004" "adErrWriteFile" "3003" "adErrReadFile" "3002" "adErrOpeningFile" "3001" "adErrInvalidArgument" "3000" "adErrProviderFailed")}
      {Lisp-Entry "ParameterAttributesEnum" #f 689 15 689 38 ("128" "adParamLong" "64" "adParamNullable" "16" "adParamSigned")}
      {Lisp-Entry "ParameterDirectionEnum" #f 702 15 702 37 ("4" "adParamReturnValue" "3" "adParamInputOutput" "2" "adParamOutput" "1" "adParamInput" "0" "adParamUnknown")}
      {Lisp-Entry "CommandTypeEnum" #f 717 15 717 30 ("512" "adCmdTableDirect" "256" "adCmdFile" "4" "adCmdStoredProc" "2" "adCmdTable" "1" "adCmdText" "8" "adCmdUnknown" "-1" "adCmdUnspecified")}
      {Lisp-Entry "EventStatusEnum" #f 735 15 735 30 ("5" "adStatusUnwantedEvent" "4" "adStatusCancel" "3" "adStatusCantDeny" "2" "adStatusErrorsOccurred" "1" "adStatusOK")}
      {Lisp-Entry "EventReasonEnum" #f 751 15 751 30 ("15" "adRsnMoveLast" "14" "adRsnMovePrevious" "13" "adRsnMoveNext" "12" "adRsnMoveFirst" "11" "adRsnFirstChange" "10" "adRsnMove" "9" "adRsnClose" "8" "adRsnResynch" "7" "adRsnRequery" "6" "adRsnUndoDelete" "5" "adRsnUndoAddNew" "4" "adRsnUndoUpdate" "3" "adRsnUpdate" "2" "adRsnDelete" "1" "adRsnAddNew")}
      {Lisp-Entry "SchemaEnum" #f 777 15 777 25 ("39" "adSchemaTrustees" "38" "adSchemaMembers" "37" "adSchemaProperties" "36" "adSchemaMeasures" "35" "adSchemaLevels" "34" "adSchemaHierarchies" "33" "adSchemaDimensions" "32" "adSchemaCubes" "31" "adSchemaDBInfoLiterals" "30" "adSchemaDBInfoKeywords" "29" "adSchemaProcedureColumns" "28" "adSchemaPrimaryKeys" "27" "adSchemaForeignKeys" "26" "adSchemaProcedureParameters" "25" "adSchemaViewTableUsage" "24" "adSchemaViewColumnUsage" "23" "adSchemaViews" "22" "adSchemaProviderTypes" "21" "adSchemaTranslations" "20" "adSchemaTables" "19" "adSchemaStatistics" "18" "adSchemaSQLLanguages" "17" "adSchemaSchemata" "16" "adSchemaProcedures" "15" "adSchemaUsagePrivileges" "14" "adSchemaTablePrivileges" "13" "adSchemaColumnPrivileges" "12" "adSchemaIndexes" "11" "adSchemaColumnsDomainUsage" "10" "adSchemaTableConstraints" "adSchemaReferentialConstraints" "9" "adSchemaReferentialContraints" "8" "adSchemaKeyColumnUsage" "7" "adSchemaConstraintTableUsage" "6" "adSchemaConstraintColumnUsage" "5" "adSchemaCheckConstraints" "4" "adSchemaColumns" "3" "adSchemaCollations" "2" "adSchemaCharacterSets" "1" "adSchemaCatalogs" "0" "adSchemaAsserts" "-1" "adSchemaProviderSpecific")}
      {Lisp-Entry "FieldStatusEnum" #f 830 15 830 30 ("1048576" "adFieldPendingUnknownDelete" "524288" "adFieldPendingUnknown" "262144" "adFieldPendingChange" "131072" "adFieldPendingDelete" "65536" "adFieldPendingInsert" "26" "adFieldAlreadyExists" "25" "adFieldResourceOutOfScope" "24" "adFieldReadOnly" "23" "adFieldCannotDeleteSource" "22" "adFieldOutOfSpace" "21" "adFieldVolumeNotFound" "20" "adFieldCannotComplete" "19" "adFieldResourceExists" "18" "adFieldResourceLocked" "17" "adFieldInvalidURL" "16" "adFieldDoesNotExist" "15" "adFieldIgnore" "13" "adFieldDefault" "12" "adFieldBadStatus" "11" "adFieldSchemaViolation" "10" "adFieldIntegrityViolation" "9" "adFieldPermissionDenied" "8" "adFieldUnavailable" "7" "adFieldCantCreate" "6" "adFieldDataOverflow" "5" "adFieldSignMismatch" "4" "adFieldTruncated" "3" "adFieldIsNull" "2" "adFieldCantConvertValue" "0" "adFieldOK")}
      {Lisp-Entry "SeekEnum" #f 871 15 871 23 ("32" "adSeekBefore" "16" "adSeekBeforeEQ" "8" "adSeekAfter" "4" "adSeekAfterEQ" "2" "adSeekLastEQ" "1" "adSeekFirstEQ")}
      {Lisp-Entry "ADCPROP_UPDATECRITERIA_ENUM" #f 888 15 888 42 ("3" "adCriteriaTimeStamp" "2" "adCriteriaUpdCols" "1" "adCriteriaAllCols" "0" "adCriteriaKey")}
      {Lisp-Entry "ADCPROP_ASYNCTHREADPRIORITY_ENUM" #f 903 15 903 47 ("5" "adPriorityHighest" "4" "adPriorityAboveNormal" "3" "adPriorityNormal" "2" "adPriorityBelowNormal" "1" "adPriorityLowest")}
      {Lisp-Entry "ADCPROP_AUTORECALC_ENUM" #f 919 15 919 38 ("1" "adRecalcAlways" "0" "adRecalcUpFront")}
      {Lisp-Entry "ADCPROP_UPDATERESYNC_ENUM" #f 932 15 932 40 ("15" "adResyncAll" "8" "adResyncInserts" "4" "adResyncUpdates" "2" "adResyncConflicts" "1" "adResyncAutoIncrement" "0" "adResyncNone")}
      {Lisp-Entry "MoveRecordOptionsEnum" #f 948 15 948 36 ("4" "adMoveAllowEmulation" "2" "adMoveDontUpdateLinks" "1" "adMoveOverWrite" "-1" "adMoveUnspecified")}
      {Lisp-Entry "CopyRecordOptionsEnum" #f 962 15 962 36 ("2" "adCopyNonRecursive" "4" "adCopyAllowEmulation" "1" "adCopyOverWrite" "-1" "adCopyUnspecified")}
      {Lisp-Entry "StreamTypeEnum" #f 977 15 977 29 ("2" "adTypeText" "1" "adTypeBinary")}
      {Lisp-Entry "LineSeparatorEnum" #f 990 15 990 32 ("-1" "adCRLF" "13" "adCR" "10" "adLF")}
      {Lisp-Entry "StreamOpenOptionsEnum" #f 1004 15 1004 36 ("4" "adOpenStreamFromRecord" "1" "adOpenStreamAsync" "-1" "adOpenStreamUnspecified")}
      {Lisp-Entry "StreamWriteEnum" #f 1018 15 1018 30 ("stWriteLine" "stWriteChar" "1" "adWriteLine" "0" "adWriteChar")}
      {Lisp-Entry "SaveOptionsEnum" #f 1033 15 1033 30 ("2" "adSaveCreateOverWrite" "1" "adSaveCreateNotExist")}
      {Lisp-Entry "FieldEnum" #f 1046 15 1046 24 ("-2" "adRecordURL" "-1" "adDefaultStream")}
      {Lisp-Entry "StreamReadEnum" #f 1059 15 1059 29 ("-2" "adReadLine" "-1" "adReadAll")}
      {Lisp-Entry "RecordTypeEnum" #f 1071 15 1071 29 ("2" "adStructDoc" "1" "adCollectionRecord" "0" "adSimpleRecord")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "connection" "ADODB.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.connection.ADODB" #f 37 9 37 53 ("jazz")}})
"ADOX"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "inventory" "ADOX.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.inventory.ADOX" #f 37 9 37 51 ("jazz")}})
"Access-Data-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "Access-Data-Source.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.Access-Data-Source" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "Access-Data-Source" #f 48 7 48 25 ("Data-Source")
        {Lisp-Entry "database" #f 51 12 51 20 ("generate")}
        {Lisp-Entry "dsn" #f 52 12 52 15 ("generate")}
        {Lisp-Entry "external-name" #f 55 16 55 29 ("access" "'access" "rest")}
        {Lisp-Entry "new-inventory" #f 65 11 65 24 ("password" "database" "Access-Inventory" "new" "read-only?" "read-only?:" "connection")}
        {Lisp-Entry "new-connection" #f 74 11 74 25 ("self" "ADO-Connection" "new")}
        {Lisp-Entry "get-connection-string" #f 78 11 78 32 ("password" "username" "either" "database" "parse" "format" "dsn" "if")}
        {Lisp-Entry "get-connection-properties" #f 87 11 87 36 ("password" "password:" "username" "username:" "database" "database:" "list")}
        {Lisp-Entry "present" #f 98 11 98 18 ("database" "get-name" "format" "dsn" "if")}
        {Lisp-Entry "present-detailed" #f 104 11 104 27 ("database" "get-name" "format" ":bulleted" "list")}
        {Lisp-Entry "get-class-presentation" #f 115 16 115 38 ()}
        {Lisp-Entry "property-presentation" #f 119 16 119 37 ("nextmethod" "else" "dsn" "database" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 127 11 127 27 ("nextmethod" "else" "nullable?:" "String-Row" "dsn" "extensions:" "parameters:" "open" "'open" "mode:" "Access-Database-Row" "new" "database" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 134 11 134 37 ("password" "username" "database" "dsn" "class-info")}}}})
"Access-Database-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Database-Row.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Database-Row" #f 37 9 37 69 ("jazz")
      {Lisp-Entry "Access-Database-Row" #f 46 7 46 26 ("File-Row")
        {Lisp-Entry "edit" #f 49 11 49 15 ("self" "get-tree" "expand" "edit-in-cell")}
        {Lisp-Entry "close-editor" #f 54 11 54 23 ("self" "get-tree" "collapse" "nextmethod")}}}})
"Access-Datatype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Datatype.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Datatype" #f 37 9 37 65 ("jazz")
      {Lisp-Entry "get-systypes" #f 46 13 46 25 ("4" "2" "0" "18" "16" "8" "1" "Systype")}
      {Lisp-Entry "Access-Datatype" #f 62 7 62 22 ("Datatype")}}})
"Access-Inventory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Inventory.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Inventory" #f 37 9 37 66 ("jazz")
      {Lisp-Entry "Access-Inventory" #f 45 7 45 23 ("Inventory")
        {Lisp-Entry "engine" #f 48 8 48 14 ()}
        {Lisp-Entry "database" #f 49 8 49 16 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("destroy-mandatory" ":access-database-version" "get-version" "get-name" "access-database" "'access-database" "type-connection-string" "OpenDatabase" "database" "0" "get-Item" "workspace" "get-Workspaces" "workspaces" "with-closed" "destroy-inventory" "cleanup:" ":dao-version" "register:" "get-DAO-version" "dao" "'dao" "validate-version" "DAO.DBEngine" "com-create" "engine" "set!" "parse" "format" "error" "exists?" "unless" "nextmethod" "read-only?" "read-only?:" "password" "pathname" "connection")}
        {Lisp-Entry "destroy" #f 66 11 66 18 ("nextmethod" "destroy-inventory")}
        {Lisp-Entry "destroy-inventory" #f 71 11 71 28 ("set!" "com-release" "engine" "com-interface-refcount" "***" "'***" "debug" "Close" "database" "when")}
        {Lisp-Entry "get-version" #f 90 11 90 22 ("0" "Version" "new" "split" "parse-integer" "map" "minor" "major" "bind" "database" "get-Version" "string" "let")}
        {Lisp-Entry "get-DAO-version" #f 96 18 96 33 ("0" "Version" "new" "split" "parse-integer" "map" "minor" "major" "bind" "engine" "get-Version" "string" "let")}
        {Lisp-Entry "type-connection-string" #f 107 11 107 33 ()}
        {Lisp-Entry "get-tables" #f 116 11 116 21 ("get-output" "self" "Access-Inventory-Table" "put" "com-release" "DAO.dbSystemObject" "get-Attributes" "mask-bit-set?" "if" "get-Item" "table" "get-Count" "below" "0" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "database" "get-TableDefs" "tables" "with-closed")}
        {Lisp-Entry "get-table" #f 127 11 127 20 ("com-release" "self" "Access-Inventory-Table" "new" "DAO.dbSystemObject" "get-Attributes" "mask-bit-set?" "not" "if" "get-Item" "table" "let" "database" "get-TableDefs" "tables" "with-closed" "name")}
        {Lisp-Entry "create-table" #f 136 11 136 23 ("database" "CreateTableDef" "self" "Access-Inventory-Table" "new" "name")}
        {Lisp-Entry "append-table" #f 140 11 140 23 ("get-handle" "Append" "database" "get-TableDefs" "tabledefs" "with-closed" "table")}
        {Lisp-Entry "remove-table" #f 145 11 145 23 ("Delete" "database" "get-TableDefs" "tabledefs" "with-closed" "name")}
        {Lisp-Entry "column-supports-property?" #f 151 11 151 36 ("else" "equal?" "test:" "get-name" "member?" "get-datatype" "third" "datatype" "let" "allow-zero-length?" "case" "property" "object")}
        {Lisp-Entry "get-views" #f 163 11 163 20 ()}
        {Lisp-Entry "get-view" #f 167 11 167 19 ("rest" "name")}
        {Lisp-Entry "create-view" #f 171 11 171 22 ("views-unsupported" "name")}
        {Lisp-Entry "append-view" #f 175 11 175 22 ("views-unsupported" "view")}
        {Lisp-Entry "remove-view" #f 179 11 179 22 ("views-unsupported" "name")}
        {Lisp-Entry "views-unsupported" #f 183 11 183 28 ("error")}
        {Lisp-Entry "get-relations" #f 192 11 192 24 ("get-Item" "self" "Access-Inventory-Relation" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "database" "get-Relations" "relations" "with-closed")}
        {Lisp-Entry "get-relation" #f 198 11 198 23 ("get-Item" "self" "Access-Inventory-Relation" "new" "database" "get-Relations" "relations" "with-closed" "name")}
        {Lisp-Entry "create-relation" #f 203 11 203 26 ("database" "CreateRelation" "self" "Access-Inventory-Relation" "new" "name")}
        {Lisp-Entry "append-relation" #f 207 11 207 26 ("get-handle" "Append" "database" "get-Relations" "relations" "with-closed" "relation")}
        {Lisp-Entry "remove-relation" #f 212 11 212 26 ("Delete" "database" "get-Relations" "relations" "with-closed" "name")}
        {Lisp-Entry "get-procedures" #f 222 11 222 25 ("get-Item" "self" "Access-Inventory-Procedure" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "database" "get-QueryDefs" "procedures" "with-closed")}
        {Lisp-Entry "Procedure-Not-Existant" #f 228 13 228 35 ("#x800A0CC1")}
        {Lisp-Entry "get-procedure" #f 232 11 232 24 ("self" "Access-Inventory-Procedure" "new" "when" "Procedure-Not-Existant" "cotry" "if" "procedure" "get-Item" "function" "action" "let" "database" "get-QueryDefs" "procedures" "with-closed" "error?" "error?:" "name")}
        {Lisp-Entry "create-procedure" #f 245 11 245 27 ("database" "CreateQueryDef" "self" "Access-Inventory-Procedure" "new" "name")}
        {Lisp-Entry "append-procedure" #f 249 11 249 27 ("procedure")}
        {Lisp-Entry "remove-procedure" #f 254 11 254 27 ("database" "DeleteQueryDef" "name")}}}})
"Access-Inventory-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Inventory-Column.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Inventory-Column" #f 37 9 37 73 ("jazz")
      {Lisp-Entry "Access-Inventory-Column" #f 45 7 45 30 ("Inventory-Column")}
      {Lisp-Entry "Access-Inventory-Column" #f 51 7 51 30 ("Inventory-Column")
        {Lisp-Entry "handle" #f 54 8 54 14 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "index-column?" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "reload" #f 68 11 68 17 ("get-title" "get-Item" "handle" "set!" "parent" "get-handle" "get-Fields" "fields" "with-closed")}
        {Lisp-Entry "get-handle" #f 78 18 78 28 ("handle")}
        {Lisp-Entry "get-default-value" #f 82 11 82 28 ("empty-string?" "if" "handle" "get-DefaultValue" "value" "let")}
        {Lisp-Entry "set-default-value" #f 89 11 89 28 ("either" "handle" "put-DefaultValue" "value")}
        {Lisp-Entry "get-description" #f 93 11 93 26 ("get-property")}
        {Lisp-Entry "set-description" #f 97 11 97 26 ("set-property" "value")}
        {Lisp-Entry "get-datatype" #f 101 11 101 23 ("get-size" "get-type" "Access-Datatype" "new-datatype")}
        {Lisp-Entry "get-type" #f 105 11 105 19 ("2" "handle" "get-Type" "DAO.DataTypeEnum" "value->name" "symbol->string" "subseq")}
        {Lisp-Entry "get-size" #f 109 11 109 19 ("handle" "get-Size")}
        {Lisp-Entry "set-datatype" #f 113 11 113 23 ("put-Size" "when" "concatenate" "string->symbol" "DAO.DataTypeEnum" "name->value" "handle" "put-Type" "get-size" "size" "get-name" "name" "let" "value")}
        {Lisp-Entry "set-size" #f 121 11 121 19 ("handle" "put-Size" "when" "size")}
        {Lisp-Entry "get-nullable?" #f 126 11 126 24 ("handle" "get-Required" "not")}
        {Lisp-Entry "set-nullable?" #f 130 11 130 24 ("not" "handle" "put-Required" "value")}
        {Lisp-Entry "get-validation-rule" #f 134 11 134 30 ("empty-string?" "if" "handle" "get-ValidationRule" "value" "let")}
        {Lisp-Entry "set-validation-rule" #f 141 11 141 30 ("either" "handle" "put-ValidationRule" "value")}
        {Lisp-Entry "get-validation-text" #f 145 11 145 30 ("empty-string?" "if" "handle" "get-ValidationText" "value" "let")}
        {Lisp-Entry "set-validation-text" #f 152 11 152 30 ("either" "handle" "put-ValidationText" "value")}
        {Lisp-Entry "get-allow-zero-length?" #f 156 11 156 33 ("handle" "get-AllowZeroLength")}
        {Lisp-Entry "set-allow-zero-length?" #f 160 11 160 33 ("handle" "put-AllowZeroLength" "value")}
        {Lisp-Entry "get-display-format" #f 164 11 164 29 ("get-property")}
        {Lisp-Entry "set-display-format" #f 168 11 168 29 ("set-property" "value")}
        {Lisp-Entry "get-ordinal-position" #f 172 11 172 31 ("handle" "get-OrdinalPosition")}
        {Lisp-Entry "set-ordinal-position" #f 176 11 176 31 ("handle" "put-OrdinalPosition" "value")}
        {Lisp-Entry "get-auto-increment?" #f 180 11 180 30 ("DAO.dbAutoIncrField" "get-attributes" "mask-bit-set?")}
        {Lisp-Entry "set-auto-increment?" #f 184 11 184 30 ("DAO.dbAutoIncrField" "get-attributes" "mask-bit-set" "set-attributes" "value")}
        {Lisp-Entry "get-title" #f 188 11 188 20 ("handle" "get-Name")}
        {Lisp-Entry "get-fixed?" #f 192 11 192 21 ("DAO.dbFixedField" "get-attributes" "mask-bit-set?")}
        {Lisp-Entry "get-indexes" #f 196 11 196 22 ("handle" "get-Indexes")}
        {Lisp-Entry "get-order" #f 200 11 200 20 ("ascending" "'ascending" "descending" "'descending" "DAO.dbDescending" "get-attributes" "mask-bit-set?" "if")}
        {Lisp-Entry "get-attributes" #f 211 11 211 25 ("handle" "get-Attributes")}
        {Lisp-Entry "set-attributes" #f 215 11 215 25 ("handle" "put-Attributes" "value")}
        {Lisp-Entry "Property-Inexistant" #f 219 12 219 31 ("#x800A0CC6")}
        {Lisp-Entry "Object-Already-Existant" #f 223 12 223 35 ("#x800A0D27")}
        {Lisp-Entry "Element-Not-Found" #f 227 12 227 29 ("#x800A0CC1")}
        {Lisp-Entry "get-property" #f 231 11 231 23 ("get-Value" "null?" "if" "Property-Inexistant" "get-Item" "cotry" "property" "handle" "get-Properties" "properties" "with-closed" "property-name")}
        {Lisp-Entry "set-property" #f 239 11 239 23 ("Element-Not-Found" "Delete" "set-existant-property" "Object-Already-Existant" "Append" "cotry" "DAO.dbText" "CreateProperty" "property" "if" "handle" "get-Properties" "properties" "with-closed" "value" "property-name")}
        {Lisp-Entry "set-existant-property" #f 249 11 249 32 ("put-Value" "when" "Property-Inexistant" "get-Item" "cotry" "property" "handle" "get-Properties" "properties" "with-closed" "value" "property-name")}}}})
"Access-Inventory-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Inventory-Constraint.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Inventory-Constraint" #f 37 9 37 77 ("jazz")
      {Lisp-Entry "Access-Inventory-Constraint" #f 45 7 45 34 ("Inventory-Constraint")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 67 18 67 28 ("handle")}}}})
"Access-Inventory-Index"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Inventory-Index.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Inventory-Index" #f 37 9 37 72 ("jazz")
      {Lisp-Entry "Access-Inventory-Index" #f 45 7 45 29 ("Inventory-Index")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "fields" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 58 11 58 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 68 18 68 28 ("handle")}
        {Lisp-Entry "get-title" #f 72 11 72 20 ("handle" "get-Name")}
        {Lisp-Entry "get-fields" #f 76 11 76 21 ("get-effective-fields" "fields" "either")}
        {Lisp-Entry "get-effective-fields" #f 80 11 80 31 ("DAO._Field" "get-Item" "item" "self" "inventory" "Access-Inventory-Column" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "DAO.IndexFields" "coquery" "index-fields" "handle" "get-Fields" "fields" "with-closed")}
        {Lisp-Entry "set-fields/orders" #f 88 18 88 35 ("Append" "DAO.IndexFields" "coquery" "index-fields" "get-Fields" "fields" "DAO.dbDescending" "put-Attributes" "descending" "'descending" "eq?" "when" "handle" "CreateField" "field" "with-closed" "cadr" "field-order" "car" "field-name" "let" "field-values" "function" "for-each" "value")}
        {Lisp-Entry "get-unique?" #f 101 11 101 22 ("handle" "get-Unique")}
        {Lisp-Entry "set-unique?" #f 105 18 105 29 ("handle" "put-Unique" "value")}
        {Lisp-Entry "get-required?" #f 109 11 109 24 ("handle" "get-Required")}
        {Lisp-Entry "get-ignore-nulls?" #f 113 11 113 28 ("handle" "get-IgnoreNulls")}}}})
"Access-Inventory-Primary-Key"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Inventory-Primary-Key.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Inventory-Primary-Key" #f 37 9 37 78 ("jazz")
      {Lisp-Entry "Access-Inventory-Primary-Key" #f 45 7 45 35 ("Inventory-Primary-Key")
        {Lisp-Entry "index" #f 48 8 48 13 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "index~self" "set!" "nextmethod" "index" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "set!" "index" "close")}
        {Lisp-Entry "get-index" #f 68 17 68 26 ("index")}
        {Lisp-Entry "get-title" #f 72 11 72 20 ("index" "get-title")}
        {Lisp-Entry "get-fields" #f 76 11 76 21 ("index" "get-fields")}}}})
"Access-Inventory-Procedure"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Inventory-Procedure.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Inventory-Procedure" #f 37 9 37 76 ("jazz")
      {Lisp-Entry "Access-Inventory-Procedure" #f 45 7 45 33 ("Inventory-Procedure")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-title" #f 67 11 67 20 ("handle" "get-Name")}
        {Lisp-Entry "get-text" #f 71 11 71 19 ("handle" "get-SQL")}
        {Lisp-Entry "set-text" #f 75 18 75 26 ("handle" "put-SQL" "value")}}}})
"Access-Inventory-Relation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Inventory-Relation.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Inventory-Relation" #f 37 9 37 75 ("jazz")
      {Lisp-Entry "Access-Inventory-Relation" #f 45 7 45 32 ("Inventory-Relation")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 67 18 67 28 ("handle")}
        {Lisp-Entry "get-title" #f 71 18 71 27 ("handle" "get-Name")}
        {Lisp-Entry "get-primary-table" #f 75 11 75 28 ("handle" "get-Table")}
        {Lisp-Entry "set-primary-table" #f 79 11 79 28 ("handle" "put-Table" "value")}
        {Lisp-Entry "get-primary-field-names" #f 83 11 83 34 ("get-Count" "0" "naturals" "get-Name" "get-Item" "field" "n" "function" "map" "handle" "get-Fields" "fields" "with-closed")}
        {Lisp-Entry "set-primary-field-names" #f 91 11 91 34 ("Append" "CreateField" "field" "field-name" "function" "for-each" "handle" "get-Fields" "fields" "with-closed" "values")}
        {Lisp-Entry "get-foreign-table" #f 99 11 99 28 ("handle" "get-ForeignTable")}
        {Lisp-Entry "set-foreign-table" #f 103 11 103 28 ("handle" "put-ForeignTable" "value")}
        {Lisp-Entry "get-foreign-field-names" #f 107 11 107 34 ("get-Count" "0" "naturals" "get-ForeignName" "get-Item" "field" "n" "function" "map" "handle" "get-Fields" "fields" "with-closed")}
        {Lisp-Entry "set-foreign-field-names" #f 115 11 115 34 ("length" "0" "naturals" "put-ForeignName" "get-Item" "field" "i" "field-name" "function" "for-each" "handle" "get-Fields" "fields" "with-closed" "values")}
        {Lisp-Entry "get-unique?" #f 124 11 124 22 ("DAO.dbRelationUnique" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "set-unique?" #f 128 18 128 29 ("DAO.dbRelationUnique" "get-attribute" "mask-bit-set" "set-attribute" "value")}
        {Lisp-Entry "get-dont-enforce?" #f 132 11 132 28 ("DAO.dbRelationDontEnforce" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "get-inherited?" #f 136 11 136 25 ("DAO.dbRelationInherited" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "get-update-cascade?" #f 140 11 140 30 ("DAO.dbRelationUpdateCascade" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "set-update-cascade?" #f 144 18 144 37 ("DAO.dbRelationUpdateCascade" "get-attribute" "mask-bit-set" "set-attribute" "value")}
        {Lisp-Entry "get-delete-cascade?" #f 148 11 148 30 ("DAO.dbRelationDeleteCascade" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "set-delete-cascade?" #f 152 18 152 37 ("DAO.dbRelationDeleteCascade" "get-attribute" "mask-bit-set" "set-attribute" "value")}
        {Lisp-Entry "get-left?" #f 156 11 156 20 ("DAO.dbRelationLeft" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "set-left?" #f 160 18 160 27 ("DAO.dbRelationLeft" "get-attribute" "mask-bit-set" "set-attribute" "value")}
        {Lisp-Entry "get-right?" #f 164 11 164 21 ("DAO.dbRelationRight" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "set-right?" #f 168 18 168 28 ("DAO.dbRelationRight" "get-attribute" "mask-bit-set" "set-attribute" "value")}
        {Lisp-Entry "get-attribute" #f 172 11 172 24 ("handle" "get-Attributes")}
        {Lisp-Entry "set-attribute" #f 176 11 176 24 ("handle" "put-Attributes" "value")}}}})
"Access-Inventory-Table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Inventory-Table.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Inventory-Table" #f 37 9 37 72 ("jazz")
      {Lisp-Entry "Access-Inventory-Table" #f 45 7 45 29 ("Inventory-Table")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "indexes" #f 49 8 49 15 ("not-loaded" "'not-loaded")}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 58 11 58 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-owner" #f 68 11 68 20 ()}
        {Lisp-Entry "get-handle" #f 72 18 72 28 ("handle")}
        {Lisp-Entry "get-title" #f 76 11 76 20 ("handle" "get-Name")}
        {Lisp-Entry "get-linked?" #f 80 11 80 22 ("handle" "get-SourceTableName" "empty-string?" "not")}
        {Lisp-Entry "get-connect" #f 84 11 84 22 ("handle" "get-Connect")}
        {Lisp-Entry "set-connect" #f 88 11 88 22 ("handle" "put-Connect" "connect")}
        {Lisp-Entry "get-source-table-name" #f 92 11 92 32 ("handle" "get-SourceTableName")}
        {Lisp-Entry "set-source-table-name" #f 96 11 96 32 ("handle" "put-SourceTableName" "source-table-name")}
        {Lisp-Entry "get-validation-rule" #f 100 11 100 30 ("empty-string?" "if" "handle" "get-ValidationRule" "value" "let")}
        {Lisp-Entry "set-validation-rule" #f 107 11 107 30 ("either" "handle" "put-ValidationRule" "value")}
        {Lisp-Entry "get-validation-text" #f 111 11 111 30 ("empty-string?" "if" "handle" "get-ValidationText" "value" "let")}
        {Lisp-Entry "set-validation-text" #f 118 11 118 30 ("either" "handle" "put-ValidationText" "value")}
        {Lisp-Entry "get-description" #f 122 11 122 26 ("get-property")}
        {Lisp-Entry "set-description" #f 126 11 126 26 ("set-property" "value")}
        {Lisp-Entry "get-primary-key" #f 135 18 135 33 ("get-output" "car" "com-release" "Access-Inventory-Index" "self" "inventory" "Access-Inventory-Primary-Key" "put" "get-Primary" "if" "get-Item" "index" "get-Count" "below" "0" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "handle" "get-Indexes" "indexes" "with-closed")}
        {Lisp-Entry "create-primary-key" #f 146 18 146 36 ("Access-Inventory-Index" "self" "inventory" "Access-Inventory-Primary-Key" "new" "Append" "DAO.IndexFields" "coquery" "index-fields" "get-Fields" "fields" "DAO.dbDescending" "put-Attributes" "descending" "'descending" "eq?" "when" "CreateField" "with-closed" "order" "field" "bind" "field/order" "function" "for-each" "put-Primary" "handle" "CreateIndex" "primary-index" "let" "fields/orders" "name")}
        {Lisp-Entry "remove-primary-key" #f 161 11 161 29 ("Delete" "handle" "get-Indexes" "indexes-handle" "with-closed" "get-index" "index" "let" "name")}
        {Lisp-Entry "append-primary-key" #f 167 11 167 29 ("get-index" "get-handle" "Append" "handle" "get-Indexes" "indexes-handle" "with-closed" "primary-key")}
        {Lisp-Entry "get-columns" #f 177 11 177 22 ("get-Item" "self" "inventory" "Access-Inventory-Column" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "handle" "get-Fields" "fields" "with-closed")}
        {Lisp-Entry "get-column" #f 183 11 183 21 ("get-Item" "self" "inventory" "Access-Inventory-Column" "new" "handle" "get-Fields" "fields" "with-closed" "name")}
        {Lisp-Entry "create-column" #f 188 11 188 24 ("handle" "CreateField" "self" "inventory" "Access-Inventory-Column" "new" "name")}
        {Lisp-Entry "append-column" #f 192 11 192 24 ("get-handle" "Append" "handle" "get-Fields" "fields" "with-closed" "column")}
        {Lisp-Entry "remove-column" #f 197 11 197 24 ("Delete" "handle" "get-Fields" "fields" "with-closed" "name")}
        {Lisp-Entry "indexes-loaded?" #f 207 11 207 26 ("not-loaded" "'not-loaded" "indexes" "neq?")}
        {Lisp-Entry "load-indexes" #f 211 11 211 23 ("get-effective-indexes" "indexes" "set!" "indexes-loaded?" "unless")}
        {Lisp-Entry "get-indexes" #f 216 11 216 22 ("indexes" "load-indexes")}
        {Lisp-Entry "get-effective-indexes" #f 221 11 221 32 ("get-output" "com-release" "self" "inventory" "Access-Inventory-Index" "put" "get-Primary" "get-Foreign" "not" "and" "if" "get-Item" "index" "get-Count" "below" "0" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "handle" "get-Indexes" "indexes" "with-closed")}
        {Lisp-Entry "get-index" #f 233 11 233 20 ("get-indexes" "get-title" "=" "index" "function" "find-if" "name")}
        {Lisp-Entry "create-index" #f 239 11 239 23 ("handle" "CreateIndex" "self" "inventory" "Access-Inventory-Index" "new" "name")}
        {Lisp-Entry "append-index" #f 243 11 243 23 ("cons" "indexes" "set!" "get-handle" "Append" "handle" "get-Indexes" "indexes-handle" "with-closed" "load-indexes" "new-index")}
        {Lisp-Entry "remove-index" #f 250 11 250 23 ("remove!" "indexes" "set!" "Delete" "handle" "get-Indexes" "indexes-handle" "with-closed" "get-index" "index" "let" "name")}
        {Lisp-Entry "get-triggers" #f 262 11 262 23 ()}
        {Lisp-Entry "get-trigger" #f 266 11 266 22 ("rest" "name")}
        {Lisp-Entry "triggers-unsupported" #f 270 11 270 31 ("error")}
        {Lisp-Entry "create-trigger" #f 274 11 274 25 ("triggers-unsupported" "name")}
        {Lisp-Entry "append-trigger" #f 278 11 278 25 ("triggers-unsupported" "trigger")}
        {Lisp-Entry "delete-trigger" #f 282 11 282 25 ("triggers-unsupported" "name")}
        {Lisp-Entry "get-constraints" #f 291 11 291 26 ()}
        {Lisp-Entry "get-constraint" #f 295 11 295 25 ("rest" "name")}
        {Lisp-Entry "constraints-unsupported" #f 299 11 299 34 ("error")}
        {Lisp-Entry "create-constraint" #f 303 11 303 28 ("constraints-unsupported" "name")}
        {Lisp-Entry "append-constraint" #f 307 11 307 28 ("constraints-unsupported" "constraint")}
        {Lisp-Entry "delete-constraint" #f 311 11 311 28 ("constraints-unsupported" "name")}
        {Lisp-Entry "Property-Inexistant" #f 320 12 320 31 ("#x800A0CC6")}
        {Lisp-Entry "Object-Already-Existant" #f 324 12 324 35 ("#x800A0D27")}
        {Lisp-Entry "Element-Not-Found" #f 328 12 328 29 ("#x800A0CC1")}
        {Lisp-Entry "get-property" #f 332 11 332 23 ("get-Value" "null?" "if" "Property-Inexistant" "get-Item" "cotry" "property" "handle" "get-Properties" "properties" "with-closed" "property-name")}
        {Lisp-Entry "set-property" #f 340 11 340 23 ("Element-Not-Found" "Delete" "set-existant-property" "Object-Already-Existant" "Append" "cotry" "DAO.dbText" "CreateProperty" "property" "if" "handle" "get-Properties" "properties" "with-closed" "value" "property-name")}
        {Lisp-Entry "set-existant-property" #f 350 11 350 32 ("put-Value" "when" "Property-Inexistant" "get-Item" "cotry" "property" "handle" "get-Properties" "properties" "with-closed" "value" "property-name")}}}})
"Access-Inventory-Updater"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Inventory-Updater.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Inventory-Updater" #f 37 9 37 74 ("jazz")
      {Lisp-Entry "Access-Inventory-Updater" #f 45 7 45 31 ("Inventory-Updater")}}})
"Access-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Provider.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Provider" #f 37 9 37 65 ("jazz")
      {Lisp-Entry "Access-Provider" #f 45 7 45 22 ("Provider")
        {Lisp-Entry "external-name" #f 48 11 48 24 ("access" "'access")}
        {Lisp-Entry "get-datatype" #f 57 11 57 23 ("Access-Datatype")}
        {Lisp-Entry "present" #f 66 11 66 18 ()}
        {Lisp-Entry "browser-class" #f 75 11 75 24 ("Access-Widget")}
        {Lisp-Entry "new-updater" #f 84 11 84 22 ("Access-Inventory-Updater" "new" "connection")}}}})
"Access-Widget"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "Access-Widget.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.Access-Widget" #f 37 9 37 63 ("jazz")
      {Lisp-Entry "Access-Widget" #f 49 7 49 20 ("password" "62" "password-border" "56" "65" "password-label" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "username" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "style:" "edge" "border-type:" "21" "203" "38" "username-border" "59" "41" "username-label" "extensions:" "parameters:" "file" "protocol:" "23" "301" "67" "database-browser" "16" "57" "5" "0" "Point" "position:" "title:" "database-label" "name:" "113" "376" "Dimension" "size:" "Data-Source-Widget")
        {Lisp-Entry "get-data-source" #f 73 11 73 26 ("password" "'password" "password:" "username" "'username" "get-string-content" "username:" "database-browser" "'database-browser" "locate" "get-moniker" "database:" "Access-Data-Source" "new")}
        {Lisp-Entry "set-data-source" #f 80 11 80 26 ("get-password" "password" "'password" "get-username" "username" "'username" "set-string-content" "get-database" "database-browser" "'database-browser" "locate" "set-moniker" "source")}
        {Lisp-Entry "setup-username/password-mode" #f 86 11 86 39 ("select-all" "username" "'username" "acquire-focus" "database-browser" "'database-browser" "locate" "set-enabled?")}
        {Lisp-Entry "set-enabled?" #f 97 11 97 23 ("invalidate-view" "password" "'password" "username" "'username" "database-browser" "'database-browser" "locate" "set-enabled?" "enabled?" "set!" "flag")}
        {Lisp-Entry "get-tab-stops" #f 110 11 110 24 ("password" "'password" "username" "'username" "database-browser" "'database-browser" "locate" "get-text" "list")}
        {Lisp-Entry "set-default-focus" #f 117 11 117 28 ("database-browser" "'database-browser" "locate" "get-text" "set-focus")}
        {Lisp-Entry "on-return-press" #f 121 11 121 26 ("self" "invoke" "return-press-handler" "when" "evt")}
        {Lisp-Entry "validate-content" #f 131 11 131 27 ("parse" "format" "exists?" "throw-cancel" "focus-body" "yes:" "message-box" "not-null?" "unless" "get-moniker" "moniker" "validate-content" "database-browser" "'database-browser" "locate" "browser" "let")}}}})
"Action"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "action" "Action.jazz"} 1226584786
    {Lisp-Entry "jazz.ui.action.Action" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Action" #f 40 7 40 13 ("Object")
        {Lisp-Entry "action-context" #f 43 8 43 22 ()}
        {Lisp-Entry "action-name" #f 44 8 44 19 ()}
        {Lisp-Entry "properties" #f 45 8 45 18 ()}
        {Lisp-Entry "initialize" #f 48 11 48 21 ("properties~self" "action-name~self" "action-context~self" "set!" "nextmethod" "properties" "action-name" "action-context")}
        {Lisp-Entry "fold-literal" #f 55 11 55 23 ("properties" ",properties" "',properties" "action-name" ",action-name" "',action-name" "action-context" ",action-context" "',action-context" "Action" "new")}
        {Lisp-Entry "print" #f 59 11 59 16 ("properties" "not-null?" "action-name" "action-context" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-action-context" #f 73 18 73 36 ("action-context")}
        {Lisp-Entry "get-action-name" #f 77 18 77 33 ("action-name")}
        {Lisp-Entry "get-properties" #f 81 18 81 32 ("properties")}}}})
"Action-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Action-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Action-Event" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Action-Event" #f 44 7 44 19 ("Event")}}})
"Action-Icon"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Action-Icon.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Action-Icon" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Action-Icon" #f 47 7 47 18 (":icons" "portfolio:" "tooltip?:" "22" "Dimension" "size:" "Push-Tool")
        {Lisp-Entry "finish" #f 54 11 54 17 ("preload-images" "nextmethod" "rest")}}}})
"Action-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "action" "Action-Item.jazz"} 1226584786
    {Lisp-Entry "jazz.ui.action.Action-Item" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Action-Item" #f 45 7 45 18 ("Component")
        {Lisp-Entry "action-handler" #f 48 12 48 26 ("set-action-handler" "get-action-handler")}
        {Lisp-Entry "shortcut" #f 49 12 49 20 ("set-shortcut" "get-shortcut")}
        {Lisp-Entry "enabled?" #f 50 12 50 20 ("set-enabled?" "get-enabled?")}
        {Lisp-Entry "actionables" #f 53 8 53 19 ()}
        {Lisp-Entry "get-action-handler" #f 61 18 61 36 ("action-handler")}
        {Lisp-Entry "set-action-handler" #f 65 18 65 36 ("action-handler" "set!" "value")}
        {Lisp-Entry "get-shortcut" #f 69 18 69 30 ("shortcut")}
        {Lisp-Entry "set-shortcut" #f 73 18 73 30 ("process-shortcut-update" "shortcut" "set!" "value")}
        {Lisp-Entry "get-enabled?" #f 78 18 78 30 ("enabled?")}
        {Lisp-Entry "set-enabled?" #f 82 18 82 30 ("process-enabled-update" "set!" "boolean" "enabled?" "neq?" "when" "value")}
        {Lisp-Entry "register-actionable" #f 93 18 93 37 ("enabled-update" "self" "shortcut-update" "cons" "actionables" "set!" "actionable")}
        {Lisp-Entry "unregister-actionable" #f 99 18 99 39 ("remove!" "actionables" "set!" "actionable")}
        {Lisp-Entry "process-shortcut-update" #f 103 11 103 34 ("actionables" "self" "shortcut-update" "actionable" "function" "for-each")}
        {Lisp-Entry "process-enabled-update" #f 109 11 109 33 ("actionables" "self" "enabled-update" "actionable" "function" "for-each")}
        {Lisp-Entry "invoke" #f 124 18 124 24 ("invoke" ":action" "Action-Event" "new" "apply" "action-handler" "get-properties" "either" "let*" "enabled?" "when" "event" "event:" "action" "action:" "properties" "sender")}
        {Lisp-Entry "get-class-image" #f 136 16 136 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 140 16 140 37 ("nextmethod" "else" "shortcut" "field-name" "case" "property")}
        {Lisp-Entry "can-rename-component?" #f 146 11 146 32 ()}
        {Lisp-Entry "can-delete-component?" #f 150 11 150 32 ()}
        {Lisp-Entry "can-move-component?" #f 154 11 154 30 ()}
        {Lisp-Entry "can-copy-component?" #f 158 11 158 30 ()}
        {Lisp-Entry "get-categorized-properties" #f 162 11 162 37 ("shortcut")}}}})
"Actionable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "action" "Actionable.jazz"} 1226584786
    {Lisp-Entry "jazz.ui.action.Actionable" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Actionable" #f 45 11 45 21 ()
        {Lisp-Entry "shortcut-update" #f 48 35 48 50 ("action-item")}
        {Lisp-Entry "enabled-update" #f 49 35 49 49 ("action-item")}}}})
"Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "action" "Actions.jazz"} 1226584786
    {Lisp-Entry "jazz.ui.action.Actions" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Actions" #f 45 7 45 14 ("Component")
        {Lisp-Entry "can-rename-component?" #f 53 11 53 32 ()}
        {Lisp-Entry "can-delete-component?" #f 57 11 57 32 ()}
        {Lisp-Entry "can-move-component?" #f 61 11 61 30 ()}
        {Lisp-Entry "can-copy-component?" #f 65 11 65 30 ()}
        {Lisp-Entry "get-categorized-properties" #f 69 11 69 37 ()}
        {Lisp-Entry "get-addable-classes" #f 73 11 73 30 ("Action-Item" "list")}
        {Lisp-Entry "get-addable-details" #f 78 11 78 30 ("shortcut" "200" "name-info")}}}})
"Activities-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "activity" "Activities-Manager.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.activity.Activities-Manager" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Activities-Manager" #f 47 7 47 25 ("100" "337" "375" "width:" "title:" "row" "selection-mode:" "multiple-selection?:" "on-return-press" "return-press-handler:" "on-context-menu" "context-menu-handler:" "on-double-click" "double-click-handler:" "results" "header" "fill" "content" "flat?:" "hscroll?:" "vscroll?:" "center" "scroller" "on-launch" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "launch" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "external-name" #f 64 16 64 29 ("activities-manager" "'activities-manager" "rest")}
        {Lisp-Entry "host-icon" #f 73 16 73 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 77 16 77 26 ()}
        {Lisp-Entry "get-tools-view" #f 86 11 86 25 ("tools" "'tools" "locate")}}}})
"Activity"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "activity" "Activity.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.activity.Activity" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Activity" #f 49 7 49 15 ("Thread")
        {Lisp-Entry "reporter" #f 52 8 52 16 ()}
        {Lisp-Entry "unregister?" #f 53 8 53 19 ()}
        {Lisp-Entry "initialize" #f 61 11 61 21 ("destroy-mandatory" "unregister?~self" "set!" "nextmethod" "apply" "others" "unregister?" "bind-keywords" "rest")}
        {Lisp-Entry "destroy" #f 73 11 73 18 ("nextmethod" "unregister-reporter")}
        {Lisp-Entry "unregister-reporter" #f 78 11 78 30 ("set!" "get-manager" "unregister-activity" "reporter" "unregister?" "and" "when")}
        {Lisp-Entry "get-manager" #f 89 18 89 29 ("get-activity-manager" "visible?" "visible?:")}
        {Lisp-Entry "get-reporter" #f 98 18 98 30 ("get-manager" "register-activity" "set!" "reporter" "unless")}
        {Lisp-Entry "cancel-requested?" #f 104 18 104 35 ("get-reporter" "cancel-requested?")}
        {Lisp-Entry "set-range" #f 108 18 108 27 ("get-reporter" "set-range" "range")}
        {Lisp-Entry "user-message" #f 112 18 112 30 ("get-reporter" "get-user-message" "apply" "rest" "fmt")}
        {Lisp-Entry "update-view" #f 116 18 116 29 ("get-reporter" "get-root" "update-view")}
        {Lisp-Entry "set-pos" #f 120 18 120 25 ("get-reporter" "set-pos" "pos")}
        {Lisp-Entry "delta-pos" #f 124 18 124 27 ("get-reporter" "delta-pos" "increment")}
        {Lisp-Entry "set-step" #f 128 18 128 26 ("get-reporter" "set-step" "increment")}
        {Lisp-Entry "step-it" #f 132 18 132 25 ("get-reporter" "step-it")}
        {Lisp-Entry "set-done" #f 136 18 136 26 ("get-reporter" "set-done")}}}})
"Activity-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "activity" "Activity-Manager.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.activity.Activity-Manager" #f 37 9 37 42 ("Activities-Border" "register-autoclass" "jazz")
      {Lisp-Entry "Activity-Manager" #f 48 7 48 23 ("border" "fill" "layout-type:" "root" "name:" "57" "247" "Dimension" "size:" "917" "787" "Point" "position:" "title:" "Palette")
        {Lisp-Entry "window-style" #f 58 11 58 23 ("WS_CLIPCHILDREN" "WS_POPUP" "bitwise-ior" "rest")}
        {Lisp-Entry "show" #f 62 11 62 15 ("show-noactivate" "get-application" "get-active?" "when" "set-visible-flag")}
        {Lisp-Entry "mouse-activate?" #f 68 11 68 26 ()}
        {Lisp-Entry "on-close" #f 77 11 77 19 ("hide" "evt")}
        {Lisp-Entry "destroy" #f 81 11 81 18 ("nextmethod" "destroy-manager")}
        {Lisp-Entry "close-manager" #f 91 18 91 31 ("close" "get-reporters" "not-null?" "unless")}
        {Lisp-Entry "toggle-visible?" #f 101 18 101 33 ("set-visible?" "delay:" "up" "'up" "direction:" "Wipe-Effect" "new" "root" "set-effect" "length" "1" "null?" "if" "0.005" "/" "delay" "get-reporters" "reporters" "let*" "when" "get-visible?" "not" "visible?" "let")}
        {Lisp-Entry "register-activity" #f 116 18 116 35 ("update-rectangle" "update-title" "14" "get-width" "-" "Dimension" "set-size" "get-height" "height" "rank:" "parent:" "Activity-Reporter" "new" "reporter" "'border" "locate" "border" "1" "max-reporter-rank" "+" "0" "null?" "if" "rank" "get-reporters" "reporters" "get-size" "size" "let*")}
        {Lisp-Entry "unregister-activity" #f 129 18 129 37 ("update-rectangle" "update-title" "close" "reporter")}
        {Lisp-Entry "update-title" #f 140 21 140 33 ("activities" "'activities" "child" "when" "get-application" "get-status-bar" "status" "let" "set-title" "1" "format-cardinality" "format" "0" "=" "if" "text" "get-reporters" "get-done" "not" "reporter" "function" "count-if" "n" "let*")}
        {Lisp-Entry "update-rectangle" #f 154 21 154 37 ("get-v" "-" "get-h" "Point" "new" "2" "8" "*" "10" "height" "car" "get-size" "get-height" "v" "max-reporter-rank" "1" "+" "n" "let*" "57" "247" "Dimension" "set-size" "set-position" "hide" "begin" "null?" "if" "manager-position" "base" "get-reporters" "reporters" "get-width" "width" "let" "compact-reporters")}
        {Lisp-Entry "compact-reporters" #f 171 21 171 38 ("reporter-rank" "key:" "get-reporters" "<" "sort" "increase!" "set-rank" "reporter" "function" "for-each" "0" "rank" "let")}
        {Lisp-Entry "clear-done" #f 179 18 179 28 ("update-rectangle" "get-reporters" "close" "get-done" "when" "reporter" "function" "for-each")}
        {Lisp-Entry "get-reporters" #f 192 21 192 34 ("border" "'border" "locate" "get-children")}
        {Lisp-Entry "max-reporter-rank" #f 196 11 196 28 ("reporter-rank" "map" "max" "apply" "reporters")}
        {Lisp-Entry "reporter-rank" #f 200 11 200 24 ("get-rank" "reporter")}}
      {Lisp-Entry "Activities-Border" #f 209 7 209 24 ("View")
        {Lisp-Entry "draw" #f 212 11 212 15 ("bottom" "sunken" "'sunken" "right" "top" "left" "edges:" "outer:" "raised" "'raised" "inner:" "draw-edge" "get-bounds" "bounds" "let" "lv" "lh" "context" "surface")}}}})
"Activity-Reporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "activity" "Activity-Reporter.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.activity.Activity-Reporter" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Activity-Reporter" #f 47 7 47 24 ("on-cancel" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "15" "157" "cancel" "20" "progress" "16" "150" "0" "Point" "position:" "message" "name:" "37" "180" "Dimension" "size:" "View")
        {Lisp-Entry "rank" #f 50 12 50 16 ("set-rank" "get-rank")}
        {Lisp-Entry "cancelled?" #f 53 8 53 18 ()}
        {Lisp-Entry "done?" #f 54 8 54 13 ()}
        {Lisp-Entry "install" #f 64 11 64 18 ("0" "set-pos" "'progress" "locate" "progress" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-rank" #f 75 18 75 26 ("rank")}
        {Lisp-Entry "set-rank" #f 79 18 79 26 ("8" "get-height" "*" "+" "10" "Point" "new" "set-position" "get-size" "size" "let" "set!" "/=" "rank" "not" "or" "when" "r")}
        {Lisp-Entry "cancel-requested?" #f 86 18 86 35 ("cancelled?")}
        {Lisp-Entry "get-done" #f 90 18 90 26 ("done?")}
        {Lisp-Entry "resize" #f 99 11 99 17 ("cancel" "'cancel" "move-figure" "progress" "'progress" "0" "message" "'message" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-cancel" #f 106 11 106 20 ("set-message" "cancelled?" "set!" "update-rectangle" "close" "get-frame" "frame" "let" "done?" "if" "evt")}
        {Lisp-Entry "set-message" #f 120 18 120 29 ("message" "'message" "locate" "set-title" "msg")}
        {Lisp-Entry "user-message" #f 124 18 124 30 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-done" #f 128 18 128 26 ("get-frame" "update-title" "Bitmap-Resource" "cancel" "'cancel" "locate" "set-image-name" "done?" "set!")}
        {Lisp-Entry "set-infinite?" #f 134 18 134 31 ("progress" "'progress" "locate" "set-infinite?" "flag")}
        {Lisp-Entry "set-range" #f 138 18 138 27 ("progress" "'progress" "locate" "set-range" "range")}
        {Lisp-Entry "set-pos" #f 142 18 142 25 ("progress" "'progress" "locate" "set-pos" "pos")}
        {Lisp-Entry "delta-pos" #f 146 18 146 27 ("progress" "'progress" "locate" "delta-pos" "increment")}
        {Lisp-Entry "set-step" #f 150 18 150 26 ("progress" "'progress" "locate" "set-step" "increment")}
        {Lisp-Entry "step-it" #f 154 18 154 25 ("progress" "'progress" "locate" "step-it")}}}})
"Add-File-Dialog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Add-File-Dialog.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Add-File-Dialog" #f 37 9 37 47 ("Name-Text-View" "register-autoclass" "jazz")
      {Lisp-Entry "Add-File-Dialog" #f 49 7 49 22 ("on-cancel" "253" "cancel" "on-ok" ":host" "action-handler:" "default?:" "80" "227" "167" "ok" "213" "editable?:" "text" "scroller" "moniker-border" "on-moniker-update" "moniker-update-handler:" "display-protocol?:" "dir" "protocol:" "269" "directory" "24" "143" "directory-label" "on-content-change" "content-change-handler:" "Default" "Text-Style" "default-style:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "name-text" "hscroll?:" "19" "244" "109" "221" "name-border" "33" "111" "182" "name-label" "display-images?:" "controls?:" "toplevel-controls?:" "176" "width:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "Event-Handler" "double-click-handler:" "on-selection-change" ":form" "Selection-Handler" "selection-handler:" "tooltip-text:" "tooltip?:" "can-select-empty?:" "row" "selection-mode:" "15" "default-row-height:" "show-header?:" ":icons" "portfolio:" "kinds" "fill" "layout-type:" "content" "document" "vscroll?:" "entry" "style:" "edge" "border-type:" "137" "140" "64" "13" "kind-border" "8" "50" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "261" "500" "Dimension" "size:" "View")
        {Lisp-Entry "directory" #f 52 12 52 21 ("generate")}
        {Lisp-Entry "finish" #f 81 11 81 17 ("directory" "'directory" "set-moniker" "name-text" "'name-text" "locate" "set-string-content" "setup-kinds" "nextmethod" "rest")}
        {Lisp-Entry "install-in-host" #f 88 11 88 26 ("kinds" "'kinds" "locate" "acquire-focus" "nextmethod" "host")}
        {Lisp-Entry "Kinds" #f 98 14 98 19 ("text" "sql" "java" "c" "lisp" "scheme" "product" "project" "template:" "jazz" "kind:" "name:")}
        {Lisp-Entry "setup-kinds" #f 120 11 120 22 ("update-ok" "ensure-displayed" "0" "set-single-selection" "get-children" "child" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "'icon" "icon" "name" "'name" "get-property" "title" "let*" "father" "node" "function" "insert" "letrec" "remove-every-row" "Kinds" "parse-jml" "root" "name-text" "'name-text" "text" "kinds" "'kinds" "locate" "tree" "let")}
        {Lisp-Entry "host-title" #f 146 16 146 26 ()}
        {Lisp-Entry "validate-dialog" #f 155 11 155 26 ("throw-cancel" "message-box" "when" "validate-name" "message" "format" "new-file" "destination" "extract-extension" "extension" "let*" "get-modal-result" "name" "directory" "template" "kind" "receive")}
        {Lisp-Entry "get-modal-result" #f 165 11 165 27 ("name-text" "'name-text" "get-string-content" "directory" "'directory" "locate" "get-moniker" "template" "'template" "kind" "'kind" "get-property" "values" "selected-kind" "node" "let")}
        {Lisp-Entry "selected-kind" #f 170 11 170 24 ("get-user-data" "node" "get-row" "row" "get-single-selection" "rank" "kinds" "'kinds" "locate" "tree" "let*")}
        {Lisp-Entry "get-tab-stops" #f 183 11 183 24 ("directory" "'directory" "get-text" "name-text" "'name-text" "kinds" "'kinds" "locate" "list")}
        {Lisp-Entry "on-selection-change" #f 195 11 195 30 ("update-ok" "evt")}
        {Lisp-Entry "on-content-change" #f 199 11 199 28 ("update-ok" "evt")}
        {Lisp-Entry "on-moniker-update" #f 203 11 203 28 ("update-ok" "evt")}
        {Lisp-Entry "on-double-click" #f 207 11 207 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" #f 215 11 215 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" #f 223 11 223 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update-ok" #f 233 11 233 20 ("name-text" "'name-text" "get-string-content" "empty-string?" "not" "directory" "'directory" "get-moniker" "kind" "'kind" "selected-kind" "get-property" "and" "ok" "'ok" "locate" "set-enabled?")}
        {Lisp-Entry "validate-name" #f 237 11 237 24 ("else" "in-manifest?" "and" "find-symbol" "symbol" "memv?" "numeric?" "char" "function" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "cond" "jazz" "case" "parse" "format" "get-workbench" "find-source" "if" "destination" "name" "kind")}
        {Lisp-Entry "Header-Color" #f 267 14 267 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" #f 271 11 271 15 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Name-Text-View" #f 281 7 281 21 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" #f 284 11 284 27 ("new-text-context-menu")}}}})
"Add-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "menu" "Add-Menu.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.menu.Add-Menu" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Add-Menu" #f 46 7 46 15 ("Context-Menu")
        {Lisp-Entry "add-components" #f 49 21 49 35 ("class:" "client:" "list" "properties:" "on-add" "'on-add" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "icon:" "Label-Item" "get-class-presentation" "localize" "format" "title" "get-class-image" "icon" "self" "parent:" "Separator-Item" "new" "not" "if" "class" "for-each" "addable-classes" "classes" "let" "function" "with-update-locked" "client")}
        {Lisp-Entry "on-add" #f 63 11 63 17 ("add-component-class" "class:" "class" "client:" "get-property" "client" "let" "evt")}}}})
"Aligned-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "display" "Aligned-Column.jazz"} 1226584781
    {Lisp-Entry "jazz.library.display.Aligned-Column" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Aligned-Column" #f 44 7 44 21 ("Display-Column")
        {Lisp-Entry "alignment" #f 47 8 47 17 ()}
        {Lisp-Entry "max-data" #f 48 8 48 16 ("0")}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("alignment~self" "set!" "nextmethod" "apply" "others" "left" "'left" "alignment" "bind-keywords" "rest" "displayer")}
        {Lisp-Entry "prepare-print" #f 67 11 67 24 ("content" "set!" "max-data" ">" "when" "length" "let" "data" "function" "for-each" "nextmethod")}
        {Lisp-Entry "print-to" #f 76 11 76 19 ("right" "border-after" "border" "format" "left" "alignment" "case" "length" "max-data" "-" "padding" "let" "printer" "previous-data" "previous-column" "data")}}}})
"Aligned-Column-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "display" "Aligned-Column-Preferences.jazz"} 1226584781
    {Lisp-Entry "jazz.library.display.Aligned-Column-Preferences" #f 37 9 37 56 ("jazz")
      {Lisp-Entry "Aligned-Column-Preferences" #f 44 7 44 33 ("Column-Preferences")
        {Lisp-Entry "alignment" #f 47 12 47 21 ("generate" "left" "'left")}
        {Lisp-Entry "column-class" #f 55 11 55 23 ("Aligned-Column")}
        {Lisp-Entry "new-column" #f 59 11 59 21 ("alignment" "alignment:" "minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Aligned-Column" "new" "display")}}}})
"Anchor-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Anchor-Style.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Anchor-Style" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Anchor-Style" #f 45 7 45 19 ("Text-Style")}
      {Lisp-Entry "Anchor-Style" #f 51 7 51 19 ("initialize" "label" "highlight" "color" "font" "alignment" "Text-Style")}}})
"Application"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "application" "Application.jazz"} 1227444007
    {Lisp-Entry "jazz.system.application.Application" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Application" #f 71 7 71 18 ("Exit-Listener" "Save-Environment-Listener" "Event-Consumer" "History-Provider" "Context-Provider" "Process")
        {Lisp-Entry "toplevel" #f 74 8 74 16 ()}
        {Lisp-Entry "stage-border" #f 75 8 75 20 ()}
        {Lisp-Entry "stage" #f 76 8 76 13 ()}
        {Lisp-Entry "menubar" #f 77 8 77 15 ()}
        {Lisp-Entry "status-bar" #f 78 8 78 18 ()}
        {Lisp-Entry "profile-module" #f 79 8 79 22 ()}
        {Lisp-Entry "profile" #f 80 8 80 15 ()}
        {Lisp-Entry "focus-listeners" #f 81 8 81 23 ()}
        {Lisp-Entry "application-listeners" #f 82 8 82 29 ("eq?" "test:" "make-table")}
        {Lisp-Entry "selected-owner" #f 83 8 83 22 ()}
        {Lisp-Entry "selected" #f 84 8 84 16 ()}
        {Lisp-Entry "selected-listeners" #f 85 8 85 26 ()}
        {Lisp-Entry "event-consumer" #f 86 8 86 22 ("self")}
        {Lisp-Entry "history-manager" #f 87 8 87 23 ("self" "History-Manager" "new")}
        {Lisp-Entry "depots-preferences" #f 88 8 88 26 ()}
        {Lisp-Entry "active?" #f 89 8 89 15 ()}
        {Lisp-Entry "application-actions" #f 90 8 90 27 ()}
        {Lisp-Entry "profile-actions" #f 91 8 91 23 ()}
        {Lisp-Entry "guest-actions" #f 92 8 92 21 ()}
        {Lisp-Entry "focus-actions" #f 93 8 93 21 ()}
        {Lisp-Entry "bindings" #f 94 8 94 16 ()}
        {Lisp-Entry "bindings-designer" #f 95 8 95 25 ()}
        {Lisp-Entry "shortcut-table" #f 96 8 96 22 ()}
        {Lisp-Entry "shortcut-hook" #f 97 8 97 21 ()}
        {Lisp-Entry "resources" #f 98 8 98 17 ("equal?" "test:" "make-table")}
        {Lisp-Entry "prepare-exit" #f 101 11 101 23 ()}
        {Lisp-Entry "external-name" #f 104 16 104 29 ("application" "'application" "rest")}
        {Lisp-Entry "get-toplevel" #f 113 11 113 23 ("toplevel")}
        {Lisp-Entry "get-stage" #f 117 18 117 27 ("stage")}
        {Lisp-Entry "get-menubar" #f 121 18 121 29 ("menubar")}
        {Lisp-Entry "set-menubar" #f 125 18 125 29 ("menubar" "set!" "bar")}
        {Lisp-Entry "get-status-bar" #f 129 18 129 32 ("status-bar")}
        {Lisp-Entry "set-status-bar" #f 133 18 133 32 ("status-bar" "set!" "status")}
        {Lisp-Entry "get-profile-module" #f 137 18 137 36 ("profile-module")}
        {Lisp-Entry "get-profile" #f 141 18 141 29 ("profile")}
        {Lisp-Entry "get-resources" #f 145 18 145 31 ("resources")}
        {Lisp-Entry "prepare-environment" #f 154 11 154 30 ("log-profile" "use-profile?" "when" "initialize-platform" "setup-resources" "set-look" "list" "set-looks" "Windows-Look" "windows-look" "Flat-Look" "new" "flat-look" "let" "test-java" "setup-shortcuts" "self" "set-application" "nextmethod")}
        {Lisp-Entry "start-environment" #f 170 11 170 28 ("register-clipboard-formats" "initialize-clipboard" "setup-depots" "initialize-stage" "initialize-toplevel" "setup-bindings" "nextmethod")}
        {Lisp-Entry "finalize-environment" #f 181 11 181 31 ("install-wallpaper" "stage" "when" "splash-screen" ":arrow" "set-cursor" "nextmethod")}
        {Lisp-Entry "setup-profile" #f 189 11 189 24 ("profile" "get-class-actions" "set-profile-actions" "create-profile" "use-profile?" "when")}
        {Lisp-Entry "finish-environment" #f 195 11 195 29 ("remove-splash-screen" "reload-session" "err" "continue-handler:" "init" "function" "with-safe-execution" "profile" "when" "self" "add-save-environment-listener" "nextmethod")}
        {Lisp-Entry "finish-process" #f 209 11 209 25 ("update-windowing-actions" "select-default-workspace" "nextmethod")}
        {Lisp-Entry "conclude-environment" #f 215 11 215 31 ("err" "continue-handler:" "finalize" "function" "with-safe-execution" "profile" "get-handle" "select-foreground-window" "run-loop?" "when" "toplevel" "set-visible?" "nextmethod")}
        {Lisp-Entry "conclude-process" #f 229 11 229 27 ("get-console-port" "event-thread" "start-repl-thread" "controller-debugger" "when" "nextmethod")}
        {Lisp-Entry "Java-Classpath" #f 241 14 241 28 ("File")}
        {Lisp-Entry "test-java" #f 250 11 250 20 ("format" "message-box" "java.lang.Class" "forName" "class" "java.lang.ClassLoader" "getSystemClassLoader" "loader" "let*" "c-test" "Java-Classpath" "classpath:" "setup-jvm")}
        {Lisp-Entry "start-loop" #f 263 11 263 21 ("process-events" "setup-events")}
        {Lisp-Entry "resume-loop-action" #f 268 11 268 29 ("get-handle" "select-foreground-window" "toplevel" "when")}
        {Lisp-Entry "clipboard-prefix" #f 278 26 278 42 ("process-version" "present" "process-name" "format")}
        {Lisp-Entry "register-clipboard-formats" #f 284 29 284 55 ("register-jazz-clipboard-formats")}
        {Lisp-Entry "Clipboard-Stack" #f 293 14 293 29 ()}
        {Lisp-Entry "Max-Stack" #f 296 14 296 23 ("256")}
        {Lisp-Entry "get-clipboard-stack" #f 300 18 300 37 ("Clipboard-Stack")}
        {Lisp-Entry "empty-clipboard-stack?" #f 304 18 304 40 ("Clipboard-Stack" "null?")}
        {Lisp-Entry "add-clipboard" #f 308 18 308 31 ("trim-clipboard" "cons" "Clipboard-Stack" "set!" "when" "get-clipboard-text" "text" "let")}
        {Lisp-Entry "push-clipboard-list" #f 315 18 315 37 ("trim-clipboard" "append" "Clipboard-Stack" "set!" "error" "Max-Stack" ">" "if" "length" "pushed" "let" "list")}
        {Lisp-Entry "trim-clipboard" #f 323 11 323 25 ("1" "-" "tail" "set-cdr!" "Max-Stack" "Clipboard-Stack" "length" ">" "when")}
        {Lisp-Entry "pop-clipboard" #f 328 18 328 31 ("set-clipboard-text" "cdr" "set!" "Clipboard-Stack" "car" "string" "let")}
        {Lisp-Entry "on-paste-from-stack" #f 335 18 335 37 ("paste-clipboard" "pop-clipboard" "Clipboard-Stack" "null?" "bell" "Text-View" "is-not?" "if" "get-focus" "focus" "let" "evt")}
        {Lisp-Entry "on-pop-clipboard-stack" #f 345 18 345 40 ("user-message" "pop-clipboard" "string" "let" "bell" "Clipboard-Stack" "null?" "if" "evt")}
        {Lisp-Entry "on-add-history" #f 357 18 357 32 ("history-manager" "add-current" "evt")}
        {Lisp-Entry "on-backward-history" #f 361 18 361 37 ("history-manager" "go-backward-history" "evt")}
        {Lisp-Entry "on-forward-history" #f 365 18 365 36 ("history-manager" "go-forward-history" "evt")}
        {Lisp-Entry "add-history" #f 369 18 369 29 ("history-manager" "add-history" "item")}
        {Lisp-Entry "current-history-item" #f 373 11 373 31 ("current-history-item" "Document" "is?" "get-guest" "guest" "when" "current-frame" "frame" "let")}
        {Lisp-Entry "update-history-actions" #f 381 18 381 40 ("forward-history" "not-null?" "backward-history" "application" "Action" "set-action-enabled?" "get-forward-history" "forward" "history-manager" "get-backward-history" "backward" "let")}
        {Lisp-Entry "get-recorder" #f 393 26 393 38 ()}
        {Lisp-Entry "use-profile?" #f 402 29 402 41 ()}
        {Lisp-Entry "use-profile-logging?" #f 406 29 406 49 ()}
        {Lisp-Entry "log-profile" #f 410 11 410 22 ("load-profile-jazzini" "install-profile" "system-profile-module" "jazz.profile.Me" "'jazz.profile.Me" "else" "login-profile" "standard-profile-module" "cond" "profile-module" "set!" "profile" "'profile" "argument/setting" "jazz-profile" "shift-down?" "not" "or" "and" "profile-arg" "use-profile-logging?" "use-logging?" "let")}
        {Lisp-Entry "standard-profile-module" #f 420 11 420 34 ("format" "string->symbol" "name")}
        {Lisp-Entry "standard-project-module" #f 424 11 424 34 ("format" "string->symbol" "name")}
        {Lisp-Entry "system-profile-module" #f 428 11 428 32 ("get-system-user-name" "standard-profile-module")}
        {Lisp-Entry "login-profile" #f 432 11 432 24 ("string->symbol" "compose-name" "module-name" "let" "format" "message-box" "save-content" "if" "'profile" "set-setting" "settings" "when" "choose-login" "always-use?" "profile" "receive" "exit" "signal" "Cancel-Signal" "catch")}
        {Lisp-Entry "install-profile" #f 446 11 446 26 ("install-new-profile" "Profiles" "'Profiles" "list" "identifier-name" "symbol->string" "name" "get-parent" "get-list" "Profile" "'Profile" "register-alias" "if" "profile-module" "find-module-source" "source" "let")}
        {Lisp-Entry "install-new-profile" #f 455 11 455 30 ("copy-jedi-settings" "Home" "copy-project" "copy-profile" "format" "new-file" "file" "copy-profile-settings" "copy-profile-catalogs" "copy-profiles-package" "User" "File" "copy-jazzini" "create-directories" "Profiles" "'Profiles" "Directory" "directory" "downcase" "project-title" "'project-title" "standard-project-module" "project-module" "'project-module" "profile" "'profile" "profile-module" "module" "'module" "cons" "list" "associations" "Template-Expander" "new" "expander" "let" "name")}
        {Lisp-Entry "load-profile-jazzini" #f 475 11 475 31 ("parse" "load" "exists?" "when" "Profile" "File" "file" "let")}
        {Lisp-Entry "copy-jazzini" #f 481 11 481 23 ("copy-template" "Jazz" "File" "template" "let" "exists?" "not" "when" "associations" "expander" "destination")}
        {Lisp-Entry "copy-profiles-package" #f 487 11 487 32 ("parse" "jedi.profiles" "'jedi.profiles" "load-package" "repository-add-package" "user" "'user" "find-repository" "repository" "copy-template" "Jazz" "File" "template" "let" "exists?" "not" "when" "associations" "expander" "destination")}
        {Lisp-Entry "copy-profile-catalogs" #f 495 11 495 32 ("touch-files?:" "new-directory" "copy-directory" "Jazz" "Directory" "catalogs" "let" "directory")}
        {Lisp-Entry "copy-profile-settings" #f 501 11 501 32 ("touch-files?:" "copy-template" "dst" "src" "function" "copier:" "new-directory" "copy-directory" "Jazz" "Directory" "settings" "let" "associations" "expander" "directory")}
        {Lisp-Entry "copy-profile" #f 509 11 509 23 ("copy-template" "Jazz" "File" "template" "let" "associations" "expander" "destination")}
        {Lisp-Entry "copy-project" #f 514 11 514 23 ("copy-template" "Jazz" "File" "template" "let" "associations" "expander" "destination")}
        {Lisp-Entry "copy-template" #f 519 11 519 24 ("expand" "printer" "function" "parse" "call-with-output-file" "associations" "expander" "destination" "template")}
        {Lisp-Entry "copy-jedi-settings" #f 525 11 525 29 ("copy-template" "Jazz" "File" "template" "let" "exists?" "not" "when" "associations" "expander" "destination")}
        {Lisp-Entry "create-profile" #f 531 11 531 25 ("Me" "err" "continue-handler:" "identifier-name" "format" "list" "continue-text:" "profile-module" "load-profile-class" "new" "profile" "set!" "function" "with-safe-execution")}
        {Lisp-Entry "preserve-environment" #f 546 11 546 31 ("call-save-environment-listeners" "nextmethod")}
        {Lisp-Entry "close-environment" #f 551 11 551 28 ("nextmethod" "save-page-setup" "save-bindings" "close-all" "confirm-all-close" "call-exit-listeners")}
        {Lisp-Entry "confirm-all-close" #f 563 18 563 35 ("get-children" "confirm-close" "unless" "for-each" "when" "dependent-document?" "get-controller" "controller" "Document" "get-guest" "guest" "Host-View" "is?" "and" "frame" "function" "frame-dependent-document?" "get-stage" "stage" "let")}
        {Lisp-Entry "close-all" #f 579 11 579 20 ("close-children" "when" "get-stage" "stage" "let")}
        {Lisp-Entry "Splash-Screen" #f 590 14 590 27 ()}
        {Lisp-Entry "Splash-End" #f 593 14 593 24 ()}
        {Lisp-Entry "splash-screen" #f 597 29 597 42 ()}
        {Lisp-Entry "show-splash-screen" #f 601 11 601 29 ("current-time" "time->seconds" "+" "essay" "Splash-End" "show-splash" "Splash-Screen" "set!" "duration" "duration:")}
        {Lisp-Entry "remove-splash-screen" #f 606 11 606 31 ("remove-splash" "-" "sleep" ">" "Splash-End" "and" "current-time" "time->seconds" "time" "let" "Splash-Screen" "when")}
        {Lisp-Entry "show-splash" #f 614 29 614 40 ()}
        {Lisp-Entry "remove-splash" #f 618 29 618 42 ("splash-screen")}
        {Lisp-Entry "on-about" #f 627 18 627 26 ("show-about" "evt")}
        {Lisp-Entry "show-about" #f 631 26 631 36 ("title:" "if" "when" "format" "Dark-Blue" "Color" "color:" "Text" "name:" "Font" "font:" "list" "append!" "message-box" "process-email" "email" "process-version" "present" "version" "process-licensee" "licensee" "process-copyright" "copyright" "process-owner" "owner" "process-name" "name" "let")}
        {Lisp-Entry "exit-listeners" #f 663 8 663 22 ()}
        {Lisp-Entry "add-exit-listener" #f 666 18 666 35 ("cons" "exit-listeners" "set!" "listener")}
        {Lisp-Entry "remove-exit-listener" #f 670 18 670 38 ("remove!" "exit-listeners" "set!" "listener")}
        {Lisp-Entry "call-exit-listeners" #f 674 18 674 37 ("exit-listeners" "prepare-exit" "listener" "function" "for-each")}
        {Lisp-Entry "get-active?" #f 685 18 685 29 ("active?")}
        {Lisp-Entry "deactivate" #f 689 26 689 36 ("active?" "set!" "set-mouse-in" "toplevel" "close-popups")}
        {Lisp-Entry "activate" #f 695 26 695 34 ("verify-reloads" "function" "set-delayed-mouse-action" "mouse-clicked?" "if" "active?" "set!")}
        {Lisp-Entry "verify-reloads" #f 705 18 705 32 ("include-invisibles?:" "get-views" "get-controller" "verify-reload" "Document" "get-guest" "guest" "let" "Frame-Host" "is?" "view" "function" "for-each" "stage" "when")}
        {Lisp-Entry "verify-reload" #f 715 18 715 31 ("get-controller" "verify-reload" "get-guest" "document" "when" "find-document" "frame" "let" "moniker")}
        {Lisp-Entry "save-environment-listeners" #f 727 8 727 34 ()}
        {Lisp-Entry "add-save-environment-listener" #f 730 18 730 47 ("cons" "save-environment-listeners" "set!" "listener")}
        {Lisp-Entry "remove-save-environment-listener" #f 734 18 734 50 ("remove!" "save-environment-listeners" "set!" "listener")}
        {Lisp-Entry "call-save-environment-listeners" #f 738 18 738 49 ("save-environment-listeners" "save-environment" "listener" "function" "for-each")}
        {Lisp-Entry "reload-session" #f 749 18 749 32 ("reload-opened-windows")}
        {Lisp-Entry "reload-opened-windows" #f 753 26 753 47 ()}
        {Lisp-Entry "reload-component" #f 757 26 757 42 ("properties" "class")}
        {Lisp-Entry "save-environment" #f 761 11 761 27 ("save-all-guest" "save-application")}
        {Lisp-Entry "save-application" #f 766 11 766 27 ("get-current-directory" "current-directory:" "branch:" "context" "active-context:" "preferences-designer" "set-property" "preferences-root" "when")}
        {Lisp-Entry "save-all-guest" #f 773 11 773 25 ("get-children" "session" "session-designer" "save-guest" "get-guest" "guest" "Host-Frame" "is?" "frame" "function" "for-each" "when" "get-stage" "stage" "let")}
        {Lisp-Entry "display-aliases?" #f 790 26 790 42 ()}
        {Lisp-Entry "display-protocol?" #f 794 26 794 43 ()}
        {Lisp-Entry "application-anchors" #f 798 26 798 45 ("get-projects-table" "not" "if" "get-workbench" "workbench" "let" "get-aliases" "table-keys" "append!" "list" "Directory" "new" "alias" "function" "map")}
        {Lisp-Entry "add-focus-listener" #f 813 18 813 36 ("add-listener" "focus-listeners" "set!" "listener")}
        {Lisp-Entry "remove-focus-listener" #f 817 18 817 39 ("remove-listener" "focus-listeners" "set!" "listener")}
        {Lisp-Entry "process-focus-change" #f 821 18 821 38 ("update-focus-actions" "invoke" "listener" "function" "for-each" "self" ":focus-change" "Focus-Event" "new" "evt" "let" "focus-listeners" "when" "new-focus" "old-focus")}
        {Lisp-Entry "update-focus-actions" #f 830 18 830 38 ("focus-update-actions" "can-select-all?" "select-all" "can-delete?" "delete" "can-paste-properties?" "paste-properties" "pop-clipboard-stack" "Clipboard-Stack" "not-null?" "paste-from-stack" "application" "can-paste?" "paste" "can-copy?" "copy" "can-cut?" "cut" "can-redo?" "redo" "can-undo?" "undo" "view" "Action" "set-action-enabled?" "preferences-root" "when" "View" "is?" "and" "view?" "get-focus" "focus" "let*")}
        {Lisp-Entry "add-selected-listener" #f 853 18 853 39 ("add-listener" "selected-listeners" "set!" "listener")}
        {Lisp-Entry "remove-selected-listener" #f 857 18 857 42 ("remove-listener" "selected-listeners" "set!" "listener")}
        {Lisp-Entry "get-selected" #f 861 18 861 30 ("selected")}
        {Lisp-Entry "get-selected-owner" #f 865 18 865 36 ("selected-owner")}
        {Lisp-Entry "set-selected" #f 869 18 869 30 ("process-selected-change" "selected" "or" "when" "selected-owner" "neq?" "new-owner?" "let" "force?" "force?:" "sel" "owner")}
        {Lisp-Entry "close-selected" #f 875 18 875 32 ("selected" "process-selected-change" "set!" "selected-owner" "eq?" "when" "owner")}
        {Lisp-Entry "process-selected-change" #f 881 11 881 34 ("invoke" "listener" "function" "for-each" "force?:" "self" ":selected-change" "Selected-Event" "new" "evt" "let" "selected-listeners" "when" "selected" "selected-owner" "set!" "force?" "new-selected" "old-selected" "owner")}
        {Lisp-Entry "add-application-listener" #f 896 18 896 42 ("get-application-listeners" "add-listener" "set-application-listeners" "listener" "category")}
        {Lisp-Entry "remove-application-listener" #f 900 18 900 45 ("get-application-listeners" "remove-listener" "set-application-listeners" "listener" "category")}
        {Lisp-Entry "process-application-event" #f 904 18 904 43 ("self" "invoke" "listener" "function" "for-each" "Application-Event" "new" "apply" "evt" "get-application-listeners" "listeners" "let" "properties" "sender" "kind" "category")}
        {Lisp-Entry "get-application-listeners" #f 912 11 912 36 ("application-listeners" "table-ref" "category")}
        {Lisp-Entry "set-application-listeners" #f 916 11 916 36 ("application-listeners" "table-set!" "listeners" "category")}
        {Lisp-Entry "get-depots-preferences" #f 925 18 925 40 ("depots-preferences")}
        {Lisp-Entry "setup-depots" #f 929 11 929 23 ("load-depots-preferences")}
        {Lisp-Entry "depots-file" #f 933 11 933 22 ("Profile" "File")}
        {Lisp-Entry "load-depots-preferences" #f 937 11 937 34 ("depots-preferences" "set!" "install-context" "read-from-file" "instantiate" "preferences" "exists?" "Profile" "'Profile" "is-alias?" "and" "when" "depots-file" "file" "let" "function" "with-safe-execution")}
        {Lisp-Entry "get-depot-classes" #f 947 26 947 43 ()}
        {Lisp-Entry "base-frame-class" #f 956 26 956 42 ()}
        {Lisp-Entry "default-frame-class" #f 960 26 960 45 ()}
        {Lisp-Entry "file-frame-class" #f 964 26 964 42 ("error" "extension-frame-class" "either" "get-extension" "extension" "let" "file")}
        {Lisp-Entry "extension-frame-class" #f 970 26 970 47 ("unknown-extension-frame-class" "known-extension-frame-class" "profile-extension-frame-class" "either" "ext")}
        {Lisp-Entry "profile-extension-frame-class" #f 976 11 976 40 ("extension-frame-class" "profile" "when" "ext")}
        {Lisp-Entry "known-extension-frame-class" #f 981 26 981 53 ("ext")}
        {Lisp-Entry "unknown-extension-frame-class" #f 985 26 985 55 ()}
        {Lisp-Entry "frame-class" #f 989 26 989 37 ("file-frame-class" "default-frame-class" "not" "if" "file" "file:")}
        {Lisp-Entry "get-default-frame-class" #f 995 11 995 34 ("default-frame-class" "autoload" "if" "get-frame-model" "model" "get-workspace-preferences" "pref" "let*")}
        {Lisp-Entry "initialize-toplevel" #f 1008 11 1008 30 ("initialize-actions" "ensure-displayed" "new-toplevel" "toplevel" "set!")}
        {Lisp-Entry "new-toplevel" #f 1014 26 1014 38 ("Toplevel" "new")}
        {Lisp-Entry "initialize-actions" #f 1018 11 1018 29 ("self" "get-class-actions" "set-application-actions")}
        {Lisp-Entry "initialize-stage" #f 1027 11 1027 27 ("new-stage" "stage" "set!")}
        {Lisp-Entry "new-stage" #f 1031 26 1031 35 ("stage" "'stage" "name:" "Stage-Border" "parent:" "stage-class" "new")}
        {Lisp-Entry "stage-class" #f 1035 29 1035 40 ("Stage")}
        {Lisp-Entry "setup-shortcuts" #f 1044 11 1044 26 ("shortcut-hash" "hash:" "shortcut=?" "test:" "make-table" "shortcut-table" "set!")}
        {Lisp-Entry "register-actions-shortcuts" #f 1048 11 1048 37 ("table-add" "for-each-reversed" "get-children" "table-remove!" "table-ref" "and" "get-shortcut" "shortcut" "let" "get-visible?" "action-item" "actions" "function" "for-each" "shortcut-table" "when" "new-actions" "old-actions")}
        {Lisp-Entry "update-shortcut" #f 1069 18 1069 33 ("table-add" "shortcut-table" "table-remove!" "when" "new-shortcut" "old-shortcut" "action-item")}
        {Lisp-Entry "dispatch-shortcut" #f 1076 18 1076 35 ("self" "car" "invoke" "not-null?" "when" "get-bound-actions" "action-items" "let" "shortcut-hook" "if" "shortcut")}
        {Lisp-Entry "get-bound-actions" #f 1085 18 1085 35 ("shortcut-table" "table-ref" "shortcut")}
        {Lisp-Entry "get-shortcut-hook" #f 1089 18 1089 35 ("shortcut-hook")}
        {Lisp-Entry "set-shortcut-hook" #f 1093 18 1093 35 ("shortcut-hook" "set!" "value")}
        {Lisp-Entry "Bindings-File" #f 1102 14 1102 27 ("Profile" "File")}
        {Lisp-Entry "setup-bindings" #f 1106 11 1106 25 ("err" "continue-handler:" "set-active-branch" "Branch" "is?" "when" "locate-component" "branch" "jazz" "'jazz" "get-preferences" "get-active-bindings" "either" "active" "let" "reference:" "get-form" "form:" "Designer" "new" "bindings-designer" "load-bindings" "bindings" "set!" "function" "with-safe-execution")}
        {Lisp-Entry "load-bindings" #f 1120 29 1120 42 ("default-bindings" "read-from-file" "instantiate" "exists?" "Profile" "'Profile" "is-alias?" "and" "if" "Bindings-File" "file" "let")}
        {Lisp-Entry "default-bindings" #f 1127 29 1127 45 ("Application-Bindings" "new")}
        {Lisp-Entry "save-bindings" #f 1131 11 1131 24 ("save" "Me" "profile" "is-not?" "get-modified?" "bindings-designer" "and" "when")}
        {Lisp-Entry "get-bindings" #f 1136 18 1136 30 ("bindings")}
        {Lisp-Entry "get-bindings-designer" #f 1140 18 1140 39 ("bindings-designer")}
        {Lisp-Entry "set-application-actions" #f 1149 18 1149 41 ("set!" "application-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-profile-actions" #f 1154 18 1154 37 ("set!" "profile-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-guest-actions" #f 1159 18 1159 35 ("set!" "guest-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "set-focus-actions" #f 1164 18 1164 35 ("set!" "focus-actions" "register-actions-shortcuts" "actions-list")}
        {Lisp-Entry "get-menubar-class" #f 1174 18 1174 35 ("cdr" "autoload" ":menubar" "assq" "model-info" "get-toolbar-classes" "classes" "let*" "when" "workspaces" "'workspaces" "get-preferences" "pref" "let")}
        {Lisp-Entry "find-menubar" #f 1183 18 1183 30 ("toplevel" "find-palette" "when" "get-menubar-class" "menubar-class" "let")}
        {Lisp-Entry "update-menubar-buttons" #f 1189 18 1189 40 ("update-buttons" "menubar" "when")}
        {Lisp-Entry "Undisplayed-Message" #f 1199 14 1199 33 ()}
        {Lisp-Entry "set-status-message" #f 1203 18 1203 36 ("->string" "else" "Locales" "is?" "cond" "set-title" "Undisplayed-Message" "set!" "not" "if" "get-message-view" "message" "let" "msg")}
        {Lisp-Entry "get-message-view" #f 1213 18 1213 34 ("message" "'message" "find-component" "status-bar" "when")}
        {Lisp-Entry "show-undisplayed-message" #f 1218 18 1218 42 ("set!" "set-status-message" "Undisplayed-Message" "when")}
        {Lisp-Entry "class-actions" #f 1229 11 1229 24 ("nextmethod" "application" "'application" "find-actions" "cons")}
        {Lisp-Entry "process-alias" #f 1239 11 1239 24 ("nextmethod" "else" "get-banner-icons-cache" ":banner-icons" "get-invite-icons-cache" ":invite-icons" "get-large-icons-cache" ":large-icons" "get-small-icons-cache" ":small-icons" "get-icons-cache" ":icons" "get-profile" ":profile" "get-focus" ":focus" "focus-guest" ":focus-guest" "current-guest" ":guest" "current-document" ":document" "current-frame" ":frame" "get-stage" ":stage" "get-toplevel" ":toplevel" "self" ":application" "case" "name")}
        {Lisp-Entry "text-menu" #f 1263 26 1263 35 ("new-text-context-menu" "text")}
        {Lisp-Entry "show-box" #f 1272 11 1272 19 ("ui-message-box" "system-message" "apply" "get-application" "get-bindings" "not" "if" "rest" "text")}
        {Lisp-Entry "get-output-log" #f 1283 26 1283 40 ()}
        {Lisp-Entry "All-Results" #f 1292 14 1292 25 ()}
        {Lisp-Entry "Active-Results" #f 1295 14 1295 28 ()}
        {Lisp-Entry "navigable-results" #f 1299 26 1299 43 ("navigable-results" "'navigable-results" "must-implement")}
        {Lisp-Entry "get-navigable-results" #f 1303 11 1303 32 ("navigable-results" "set!" "All-Results" "unless")}
        {Lisp-Entry "get-active-results" #f 1309 18 1309 36 ("get-navigable-results" "car" "set!" "Active-Results" "unless")}
        {Lisp-Entry "set-active-results" #f 1315 18 1315 36 ("Active-Results" "set!" "results")}
        {Lisp-Entry "select-locale" #f 1324 18 1324 31 ("present-locale" "localize" "set-title" "locales" "'locales" "locate-component" "label" "when" "get-status-bar" "status" "let" "locale")}
        {Lisp-Entry "locale-update" #f 1332 18 1332 31 ("get-toplevel" "redraw-window" "get-menubar" "layout-menu")}
        {Lisp-Entry "select-default-workspace" #f 1343 11 1343 35 ("apply-preferences" "child" "get-active" "active" "default-workspace" "not" "if" "error?:" "workspaces" "'workspaces" "get-preferences" "pref" "let" "find-workspace" "define")}
        {Lisp-Entry "default-workspace" #f 1356 11 1356 28 ("Default-Workspace" "new")}
        {Lisp-Entry "on-select-workspace" #f 1360 18 1360 37 ("workspace:" "get-property" "select-workspace" "evt")}
        {Lisp-Entry "on-next-workspace" #f 1364 18 1364 35 ("select-next-workspace" "evt")}
        {Lisp-Entry "on-previous-workspace" #f 1368 18 1368 39 ("select-previous-workspace" "evt")}
        {Lisp-Entry "on-workspace" #f 1372 26 1372 38 ("workspace:" "get-property" "activate-workspace-button" "activate" "get-kind" "case" "evt")}
        {Lisp-Entry "activate-workspace-button" #f 1378 18 1378 43 ("set-selected?" "set-visit?" "'workspace" "group:" "Radio-Tool" "class:" "unselect-elements" "not" "if" "get-name" "locate-component" "radio" "when" "find-toolbar" "toolbar" "let" "workspace")}
        {Lisp-Entry "select-workspace" #f 1388 18 1388 34 ("workspaces" "'workspaces" "list" "get-preferences" "apply-preferences" "name")}
        {Lisp-Entry "select-next-workspace" #f 1392 18 1392 39 ("apply-preferences" "eq?" "unless" "length" "1" "+" "modulo" "element" "next" "find" "rank" "'workspaces" "get-preferences" "get-children" "Workspace-Preferences" "collect-type" "workspaces" "get-workspace-preferences" "current" "let*")}
        {Lisp-Entry "select-previous-workspace" #f 1401 21 1401 46 ("apply-preferences" "eq?" "unless" "element" "previous" "1" "length" "-" "0" "=" "if" "previous-rank" "find" "rank" "'workspaces" "get-preferences" "get-children" "Workspace-Preferences" "collect-type" "workspaces" "get-workspace-preferences" "current" "let*")}
        {Lisp-Entry "workspace-installed" #f 1411 26 1411 45 ()}
        {Lisp-Entry "on-zoom-horizontally" #f 1415 18 1415 38 ("set!" "unzoom" "zoom" "workspace-zoomable?" "split" "'split" "get-state" "continuation-return" "when" "vert" "'vert" "get-orientation" "eq?" "if" "window" "splitter" "get-stage-border" "for-each-splitter" "return" "continuation-capture" "started?" "let" "function" "with-locked-update" "evt")}
        {Lisp-Entry "on-zoom-vertically" #f 1434 18 1434 36 ("set!" "unzoom" "zoom" "split" "'split" "get-state" "continuation-return" "when" "horz" "'horz" "get-orientation" "eq?" "if" "window" "splitter" "for-each-splitter" "return" "continuation-capture" "get-stage-border" "border" "started?" "let" "function" "with-locked-update" "evt")}
        {Lisp-Entry "on-maximize/restore" #f 1454 18 1454 37 ("maximize" "restore" "get-maximized?" "if" "get-stage" "stage" "let" "evt")}
        {Lisp-Entry "on-full-screen" #f 1461 18 1461 32 ("full-screen-stage" "selected-workspace" "set-fullscreen?" "get-toplevel" "get-fullscreen?" "fullscreen?" "fullscreen-warned?" "'fullscreen-warned?" "preferences-designer" "set-property" "message-box" "get-fullscreen-warned?" "not" "when" "get-preferences" "pref" "let" "evt")}
        {Lisp-Entry "full-screen-stage" #f 1471 18 1471 35 ("get-stage-border" "full-screen" "fullscreen?")}
        {Lisp-Entry "toggle-full-screen" #f 1475 18 1475 36 ("full-screen" "get-toplevel" "get-fullscreen?" "not" "fullscreen?" "let" "window")}
        {Lisp-Entry "full-screen" #f 1480 18 1480 29 ("unzoom" "zoom" "if" "set-full?" "splitter" "for-each-splitter" "set-fullscreen?" "function" "with-locked-update" "get-fullscreen?" "neq?" "when" "get-stage" "stage" "get-toplevel" "toplevel" "let" "fullscreen?" "window")}
        {Lisp-Entry "get-toolbar-class" #f 1501 18 1501 35 ("cdr" "autoload" ":toolbar" "assq" "model-info" "get-toolbar-classes" "classes" "let*" "when" "workspaces" "'workspaces" "get-preferences" "pref" "let")}
        {Lisp-Entry "find-toolbar" #f 1510 18 1510 30 ("toplevel" "find-palette" "when" "get-toolbar-class" "toolbar-class" "let")}
        {Lisp-Entry "get-context-text" #f 1521 11 1521 27 ()}
        {Lisp-Entry "get-text-class" #f 1530 26 1530 40 ("Plain-Text-View")}
        {Lisp-Entry "setup-resources" #f 1539 11 1539 26 ("Install" "icon" "'icon" "cursor" "'cursor" "Directory" "bitmap" "'bitmap" "setup-resources-directory" "begin" "Jazz" "'Jazz" "find-alias" "if")}
        {Lisp-Entry "setup-resources-directory" #f 1550 11 1550 36 ("get-base" "register-resource" "get-extension" "ci=?" "file" "function" "iterate-directory" "exists?" "when" "extension" "directory" "type")}
        {Lisp-Entry "register-resource" #f 1558 18 1558 35 ("cons" "resources" "table-set!" "file" "name" "type")}
        {Lisp-Entry "get-resource" #f 1562 18 1562 30 ("error" "cons" "resources" "table-ref" "or" "name" "type")}
        {Lisp-Entry "Icons-Cache" #f 1572 14 1572 25 ()}
        {Lisp-Entry "Small-Icons-Cache" #f 1575 14 1575 31 ()}
        {Lisp-Entry "Large-Icons-Cache" #f 1578 14 1578 31 ()}
        {Lisp-Entry "Invite-Icons-Cache" #f 1581 14 1581 32 ()}
        {Lisp-Entry "Banner-Icons-Cache" #f 1584 14 1584 32 ()}
        {Lisp-Entry "get-icons-cache" #f 1588 18 1588 33 ("height:" "16" "width:" "Portfolio" "new" "set!" "Icons-Cache" "unless")}
        {Lisp-Entry "get-small-icons-cache" #f 1594 18 1594 39 ("height:" "12" "width:" "Portfolio" "new" "set!" "Small-Icons-Cache" "unless")}
        {Lisp-Entry "get-large-icons-cache" #f 1600 18 1600 39 ("height:" "32" "width:" "Portfolio" "new" "set!" "Large-Icons-Cache" "unless")}
        {Lisp-Entry "get-invite-icons-cache" #f 1606 18 1606 40 ("height:" "52" "width:" "Portfolio" "new" "set!" "Invite-Icons-Cache" "unless")}
        {Lisp-Entry "get-banner-icons-cache" #f 1612 18 1612 40 ("200" "height:" "1200" "width:" "Portfolio" "new" "set!" "Banner-Icons-Cache" "unless")}
        {Lisp-Entry "get-cataloguer" #f 1623 26 1623 40 ()}
        {Lisp-Entry "get-catalog-context" #f 1627 26 1627 45 ()}
        {Lisp-Entry "user-feedback" #f 1636 11 1636 24 ("message")}
        {Lisp-Entry "get-event-consumer" #f 1645 11 1645 29 ("event-consumer")}
        {Lisp-Entry "set-event-consumer" #f 1649 11 1649 29 ("event-consumer" "set!" "consumer")}
        {Lisp-Entry "deliver-event" #f 1653 11 1653 24 ("event" "proc" "target" "handler")}
        {Lisp-Entry "record-event?" #f 1657 26 1657 39 ("event")}
        {Lisp-Entry "fresh-prompt" #f 1666 18 1666 30 ("ensure-displayed" "fresh-prompt" "when" "get-console-text" "either" "let" "text" "text:")}
        {Lisp-Entry "on-console" #f 1673 18 1673 28 ("fresh-prompt" "when" "show-console" "Console-Text-View" "get-focus" "is?" "had-focus?" "let" "evt")}
        {Lisp-Entry "show-console" #f 1680 18 1680 30 ("acquire-focus" "bell" "not" "if" "get-text" "text" "focus?" "and" "when" "workspace" "workspace:" "select-palette" "manager" "let" "Console-Manager" "class" "class:")}
        {Lisp-Entry "on-sql-console" #f 1692 18 1692 32 ("get-sql-console-text" "text:" "fresh-prompt" "when" "sql" "'sql" "workspace:" "SQL-Console-Manager" "class:" "show-console" "SQL-Console-Text-View" "get-focus" "is?" "had-focus?" "let" "evt")}
        {Lisp-Entry "on-sql-connections" #f 1700 11 1700 29 ("focus?:" "sql" "'sql" "workspace:" "SQL-Connections-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-sql-inventory" #f 1705 11 1705 27 ("focus?:" "sql" "'sql" "workspace:" "Inventory-Browser" "select-palette" "evt")}
        {Lisp-Entry "on-sql-tree-output" #f 1710 11 1710 29 ("focus?:" "sql" "'sql" "SQL-Tree-Output" "select-palette" "evt")}
        {Lisp-Entry "log-error" #f 1720 16 1720 25 ("log-generic-error" "else" "log-walk-error" "Walk-Error" "log-read-error" "Read-Error" "typecase" "output" "error")}
        {Lisp-Entry "edit-error" #f 1728 16 1728 26 ("edit-generic-error" "else" "edit-walk-error" "Walk-Error" "edit-read-error" "Read-Error" "typecase" "error")}
        {Lisp-Entry "edit-error-child" #f 1736 16 1736 32 ("edit-generic-error-child" "else" "edit-walk-error-child" "Walk-Error" "edit-read-error-child" "Read-Error" "typecase" "info" "error")}
        {Lisp-Entry "log-generic-error" #f 1744 16 1744 33 ("user-data:" "Bitmap-Resource" "image:" "get-message" "log-line" "output" "error")}
        {Lisp-Entry "edit-generic-error" #f 1749 16 1749 34 ("bell" "error")}
        {Lisp-Entry "edit-generic-error-child" #f 1754 16 1754 40 ("bell" "info" "error")}
        {Lisp-Entry "report-read-error" #f 1764 11 1764 28 ("stop-debugging" "edit-read-error" "'yes" "eq?" "when" "no:" "yes:" "title:" "'message" "type:" "message-box" "code" "no" "yes" "present-message" "message" "let*" "exception")}
        {Lisp-Entry "present-read-error" #f 1779 16 1779 34 (":hyperlink" ":bulleted" "edit" "close-modal-dialog" "function" "action" "let" "list" "get-message" "message" "get-base" "string?" "if" "format" "header" "get-source" "source" "let*" "active-content?" "prefix?" "error")}
        {Lisp-Entry "log-read-error" #f 1793 16 1793 30 ("user-data:" "Bitmap-Resource" "image:" "get-message" "log-line" "output" "error")}
        {Lisp-Entry "edit-read-error" #f 1798 16 1798 31 ("get-application" "edit-document" "Range" "new" "selection:" "message-box" "string?" "if" "get-end" "end" "get-start" "start" "get-source" "source" "let" "error")}
        {Lisp-Entry "edit-read-error-child" #f 1808 16 1808 37 ("edit-generic-error-child" "info" "error")}
        {Lisp-Entry "report-walk-error" #f 1818 11 1818 28 ("stop-debugging" "highlight-walk-problems" "'yes" "eq?" "when" "no:" "yes:" "title:" "'message" "type:" "message-box" "code" "no" "yes" "present-message" "message" "let*" "exception")}
        {Lisp-Entry "present-walk-error" #f 1833 16 1833 34 (":hyperlink" "if" ":bulleted" "list" "edit-child" "close-modal-dialog" "action" "walk-problem-message" "message" "let" "problem" "function" "map" "cons" "get-category-name" "format-plural" "format" "header" "length" "count" "get-problems" "problems" "let*" "active-content?" "prefix?" "error")}
        {Lisp-Entry "log-walk-error" #f 1853 16 1853 30 ("get-problems" "cons" "father:" "format" "walk-problem-declarations" "declarations" "walk-problem-message" "message" "problem" "function" "for-each" "user-data:" "Bitmap-Resource" "image:" "expanded" "'expanded" "state:" "get-message" "log-line" "row" "let" "output" "error")}
        {Lisp-Entry "edit-walk-error" #f 1863 16 1863 31 ("edit-generic-error" "error")}
        {Lisp-Entry "edit-walk-error-child" #f 1868 16 1868 37 ("acquire-focus" "set-visible?" "bring-to-front" "set-selection" "get-guest" "range" "text" "frame" "receive" "when" "edit-walk-problem" "location" "user-message" "walk-problem-message" "message" "let" "problem" "error")}
        {Lisp-Entry "edit-walk-problem" #f 1882 16 1882 33 ("Jazz-Code-Location" "new" "find-location" "closure-function" "object-location" "location" "procedure?" "definition-value" "value" "definition?" "and" "when" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "walk-problem-declarations" "declarations" "let" "problem")}
        {Lisp-Entry "highlight-walk-problems" #f 1894 11 1894 34 ("0" "Cell" "new" "ensure-cell-displayed" "acquire-focus" "set-visible?" "bring-to-front" "get-end" "apply-style" "Walk-Fatal" "'Walk-Fatal" "fatal" "Walk-Warning" "'Walk-Warning" "warning" "case" "style" "set!" "<" "not" "or" "get-start" "get-row" "row" "get-guest" "range" "text" "frame" "receive" "when" "edit-walk-problem" "location" "walk-problem-message" "message" "Interpreter" "walk-problem-severity" "severity" "problem" "function" "for-each" "first-row" "first-text" "get-problems" "problems" "let" "exception")}
        {Lisp-Entry "process-debuggee-loop" #f 1926 11 1926 32 ("nextmethod" "process-events" "event-thread?" "controller-debugger" "local-proxy?" "and" "if")}
        {Lisp-Entry "exception-reported" #f 1938 11 1938 29 ("cleanup-mouse-processing" "Exception" "catch")}
        {Lisp-Entry "present-execution-context" #f 1945 11 1945 36 ("prefix?:" "type:" "Exception-Presenter" "new" "present" "prefix?" "type" "exception")}
        {Lisp-Entry "get-search-manager" #f 1954 26 1954 44 ()}
        {Lisp-Entry "get-search-results" #f 1958 26 1958 44 ("Search-Results" "singleton-docked" "get-guest")}
        {Lisp-Entry "active-search" #f 1962 18 1962 31 ("get-guest" "get-search" "when" "get-search-manager" "manager" "let")}
        {Lisp-Entry "update-search-actions" #f 1969 18 1969 39 ("replace-all-selected" "replace-all" "replace&find-forward" "replace" "find-backward" "find-forward" ">" "pop-results" "edit-current" "edit-previous" "1" ">=" "edit-next" "application" "Action" "set-action-enabled?" "in-modal?" "get-results-stack" "results-stack-count" "get-tree" "get-visible-count" "results-count" "get-search-results" "results" "length" "count" "get-views" "not" "if" "frames" "get-stage" "stage" "let*")}
        {Lisp-Entry "on-find" #f 1995 18 1995 25 ("active-window" "'active-window" "text" "'text" "update-search" "evt")}
        {Lisp-Entry "on-find-in-text" #f 1999 18 1999 33 ("text" "'text" "update-search" "evt")}
        {Lisp-Entry "on-find-in-directories" #f 2003 18 2003 40 ("directories" "'directories" "update-search" "evt")}
        {Lisp-Entry "on-find-in-projects" #f 2007 18 2007 37 ("projects" "'projects" "update-search" "evt")}
        {Lisp-Entry "update-search" #f 2011 11 2011 24 ("select-search" "get-searches" "list" "set-search-targets" "first" "equal?" "not-null?" "or" "unless" "get-search-targets" "targets" "let" "search" "function" "for-each" "set-visible?" "bring-to-front" "set-search-domain" "set-selection-name" "when" "get-search" "next-radio" "get-window-focus" "get-selection-name" "eq?" "same-tab?" "'tab" "locate" "tab-view" "get-guest" "manager" "get-player" "player" "get-search-manager" "palette" "get-selected-string" "Text-View" "not" "and" "if" "string" "Tree-Embedded-Search-Text-View" "is?" "internal?" "get-focus" "focus" "let*" "domain" "tab")}
        {Lisp-Entry "end-search-edition" #f 2041 18 2041 36 ("end-edition" "get-targets-tree" "tree" "get-search" "search" "get-guest" "manager" "get-search-manager" "palette" "let*")}
        {Lisp-Entry "on-edit-next" #f 2049 18 2049 30 ("get-active-results" "edit-next" "evt")}
        {Lisp-Entry "on-edit-previous" #f 2053 18 2053 34 ("get-active-results" "edit-previous" "evt")}
        {Lisp-Entry "on-edit-current" #f 2057 18 2057 33 ("get-active-results" "edit-current" "evt")}
        {Lisp-Entry "on-pop-results" #f 2061 18 2061 32 ("get-search-results" "clear-results" "evt")}
        {Lisp-Entry "on-find-forward" #f 2065 18 2065 33 ("on-find-forward" "bell" "select-next" "unless" "get-syntax" "get-constituent-test" "get-find-targets" "targets" "stage" "first-view" "get-guest" "get-text-view" "text" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-find-backward" #f 2075 18 2075 34 ("on-find-backward" "bell" "select-previous" "unless" "get-syntax" "get-constituent-test" "get-find-targets" "targets" "stage" "first-view" "get-guest" "get-text-view" "text" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace" #f 2085 18 2085 28 ("on-replace" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace&find-forward" #f 2092 18 2092 41 ("on-replace&find-forward" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace-all" #f 2099 18 2099 32 ("on-replace-all" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-replace-all-selected" #f 2106 18 2106 41 ("on-replace-all-selected" "bell" "not" "if" "active-search" "search" "let" "evt")}
        {Lisp-Entry "on-command-shell" #f 2118 18 2118 34 ("execute" "'execute" "select-command-mode" "evt")}
        {Lisp-Entry "get-command-shell" #f 2122 26 2122 43 ("command-shell" "'command-shell" "find-toolbar" "locate")}
        {Lisp-Entry "get-command-text" #f 2126 26 2126 42 ("get-command-shell" "get-text")}
        {Lisp-Entry "select-command-mode" #f 2130 18 2130 37 ("get-command-text" "select-mode" "mode")}
        {Lisp-Entry "get-search-targets" #f 2139 18 2139 36 ("get-search-targets" "Search-Targets" "'Search-Targets" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "set-search-targets" #f 2146 18 2146 36 ("set-search-targets" "Search-Targets" "'Search-Targets" "set-setting" "not" "if" "active-search" "search" "let" "targets")}
        {Lisp-Entry "get-find-targets" #f 2153 18 2153 34 ("get-find-targets" "get-search-targets" "constituent-test:" "get-ignore-case?" "ignore-case?:" "get-whole-words?" "whole-words?:" "first" "make-search-context" "target" "function" "map" "not" "if" "active-search" "search" "let" "constituent-test")}
        {Lisp-Entry "get-replace-targets" #f 2165 18 2165 37 ("get-replace-targets" "get-search-targets" "second" "map" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-whole-words?" #f 2172 18 2172 34 ("get-whole-words?" "Search-Whole-Words?" "'Search-Whole-Words?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-ignore-case?" #f 2179 18 2179 34 ("get-ignore-case?" "Search-Ignore-Case?" "'Search-Ignore-Case?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-preserve-case?" #f 2186 18 2186 36 ("get-preserve-case?" "Search-Preserve-Case?" "'Search-Preserve-Case?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-play-recording?" #f 2193 18 2193 37 ("get-play-recording?" "Search-Play-Recording?" "'Search-Play-Recording?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "get-expression?" #f 2200 18 2200 33 ("get-expression?" "Search-Expression?" "'Search-Expression?" "get-setting" "not" "if" "active-search" "search" "let")}
        {Lisp-Entry "on-new" #f 2212 26 2212 32 ("get-default-frame-class" "new-event" "evt")}
        {Lisp-Entry "on-open" #f 2216 26 2216 33 ("open-files" "evt")}
        {Lisp-Entry "open-files" #f 2220 18 2220 28 ("get-name" "file" "function" "key:" "string>?" "sort" "edit-file" "for-each" "multiple-selection?:" "open-extensions" "extensions:" "choose-file" "files" "let" "directory" "directory:")}
        {Lisp-Entry "receive-files" #f 2226 26 2226 39 ("edit-file" "class:" "edit-document" "file?" "when" "pathname" "function" "for-each" "else" "Jazz-Text-View" "shift-down?" "Jazz-Plain-Text-View" "alt-down?" "cond" "class" "parse" "user-message" "set-current-directory" "dir" "let" "car" "directory?" "1" "length" "=" "and" "if" "pathnames" "pos")}
        {Lisp-Entry "edit-file" #f 2242 26 2242 35 ("edit-document" "file")}
        {Lisp-Entry "open-extensions" #f 2247 26 2247 41 ()}
        {Lisp-Entry "find-document" #f 2251 18 2251 31 ("stage" "get-children" "pathname=?" "get-controller" "get-moniker" "guest-moniker" "Document" "get-guest" "guest" "let" "Frame-Host" "is?" "and" "frame" "function" "find-if" "moniker")}
        {Lisp-Entry "edit-document" #f 2262 18 2262 31 ("verify-reload" "focus-host" "set-visible?" "bring-to-front" "get-guest" "center-caret" "'center-caret" "ensure-displayed?:" "set-selection-safe" "selection" "set-wrap?" "wrap?" "get-controller" "set-moniker" "char-encoding" "set-char-encoding" "document" "host" "initialize:" "activate-focus?" "host-focus?:" "visible?" "host-visible?:" "workspace" "host-workspace:" "new-frame" ":wait" "with-cursor" "file-frame-class" "either" "class" "values" "return-new?" "new?" "function" "result" "find-document" "force-new?" "frame" "let*" "file" "let" "error" "exists?" "not" "if" "when" "moniker")}
        {Lisp-Entry "edit-help-document" #f 2306 18 2306 36 ("set-editable?" "get-guest" "text" "edit-document" "frame" "let*" "moniker")}
        {Lisp-Entry "edit-filename" #f 2312 18 2312 31 ("get-controller" "verify-reload" "get-guest" "text" "get-source" "edit-document" "frame" "error" "not" "if" "find-filename" "project-file" "get-workbench" "workbench" "let*" "filename")}
        {Lisp-Entry "edit-category" #f 2322 26 2322 39 ("name")}
        {Lisp-Entry "on-close" #f 2326 26 2326 34 ("close-with-confirm" "when" "stage" "first-view" "frame" "let" "evt")}
        {Lisp-Entry "on-close-all" #f 2332 26 2332 38 ("stage" "get-views" "close" "confirm-close" "get-controller" "close-on-close-all?" "Document" "and" "get-guest" "guest" "let" "Frame-Host" "is?" "when" "view" "function" "for-each" "evt")}
        {Lisp-Entry "on-save-all" #f 2342 26 2342 37 ("save-all" "evt")}
        {Lisp-Entry "on-print" #f 2346 26 2346 34 ("print-document" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-print-layout" #f 2351 26 2351 41 ("print-layout" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-print-preview" #f 2356 26 2356 42 ("print-preview" "current-guest" "guest" "let" "evt")}
        {Lisp-Entry "on-quit-application" #f 2361 26 2361 45 ("exit-process" "evt")}
        {Lisp-Entry "save-all" #f 2365 18 2365 26 ("include-invisibles?:" "stage" "get-views" "save" "get-modified?" "dependent-document?" "xor" "get-moniker" "or" "and" "get-controller" "controller" "get-guest" "guest" "Frame-Host" "is?" "when" "window" "for-each" "main-documents?" "function" "save-documents" "let" "save-unanchored?" "save-unanchored?:" "Document" "class" "class:")}
        {Lisp-Entry "edit-definitions" #f 2389 26 2389 42 ("rest" "object")}
        {Lisp-Entry "edit-references" #f 2393 26 2393 41 ("rest" "object")}
        {Lisp-Entry "context-update" #f 2402 11 2402 25 ("context" "user-message" "modify-profile" "modify-catalogs" "nextmethod")}
        {Lisp-Entry "modify-catalogs" #f 2409 11 2409 26 ("get-children" "get-active?" "set-active?" "get-catalog" "catalog" "get-name" "name" "let*" "config" "function" "for-each" "get-cataloguer" "cataloguer" "when" "error?:" "catalogs" "'catalogs" "get-preferences" "pref" "let")}
        {Lisp-Entry "modify-profile" #f 2421 11 2421 25 ("finalize" "init" "autoload" "new" "set!" "Profile" "get-profile-class" "either" "class" "error?:" "get-preferences" "pref" "let" "close" "profile" "when")}
        {Lisp-Entry "on-add-to-favorites" #f 2440 11 2440 30 ("add-to-favorites" "bell" "not" "if" "current-document" "guest" "let" "evt")}
        {Lisp-Entry "default-preferences" #f 2452 11 2452 30 ("Application-Preferences" "new")}
        {Lisp-Entry "close-preferences" #f 2456 11 2456 28 ("save" "Me" "is-not?" "profile" "persist-preferences?" "preferences-designer" "and" "when")}
        {Lisp-Entry "Default-Page-Setup" #f 2466 14 2466 32 ()}
        {Lisp-Entry "Default-Page-Setup-Designer" #f 2469 14 2469 41 ()}
        {Lisp-Entry "Default-Page-Setup-Form" #f 2472 14 2472 37 ("form>>")}
        {Lisp-Entry "Default-Page-Setup-File" #f 2476 14 2476 37 ("Profile" "File")}
        {Lisp-Entry "set-default-page-setup" #f 2480 18 2480 40 ("Default-Page-Setup" "set!" "page-setup")}
        {Lisp-Entry "default-page-setup" #f 2484 18 2484 36 ("setup-page-setup" "Default-Page-Setup" "not" "when")}
        {Lisp-Entry "default-page-setup-designer" #f 2490 18 2490 45 ("setup-page-setup" "Default-Page-Setup-Designer" "not" "when")}
        {Lisp-Entry "setup-page-setup" #f 2496 19 2496 35 ("reference:" "get-form" "form:" "Designer" "new" "Default-Page-Setup-Designer" "instantiate" "Default-Page-Setup" "set!" "Default-Page-Setup-Form" "read-from-file" "exists?" "Profile" "'Profile" "is-alias?" "and" "if" "form" "Default-Page-Setup-File" "file" "let*")}
        {Lisp-Entry "save-page-setup" #f 2503 19 2503 34 ("save" "Default-Page-Setup-File" "set-origin" "get-origin" "not" "get-form" "form" "let" "Me" "profile" "is-not?" "Default-Page-Setup-Designer" "and" "when")}
        {Lisp-Entry "get-documentation-cataloguer" #f 2516 26 2516 54 ()}
        {Lisp-Entry "on-zoom-out" #f 2525 11 2525 22 ("0.25" "-" "scale-view" "get-scaling" "scaling" "bell" "not" "if" "what:" "get-property" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "on-zoom-in" #f 2533 11 2533 21 ("0.25" "+" "scale-view" "get-scaling" "scaling" "bell" "not" "if" "what:" "get-property" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "on-unzoom" #f 2541 11 2541 20 ("1.0" "scale-view" "bell" "not" "if" "what:" "get-property" "scaled-view" "view" "let" "evt")}
        {Lisp-Entry "scaled-view" #f 2548 11 2548 22 ("mouse-view" "current-document" "document" "case" "what")}
        {Lisp-Entry "scale-view" #f 2554 11 2554 21 ("set-scaled?" "set-scaling" "user-message" "scaled?" "scaling" "view")}
        {Lisp-Entry "on-capture-document" #f 2566 11 2566 30 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "highlight-figure?:" "highlight:" "click:" "pick-figure" "export-picture" "get-guest" "guest" "when" "get-host" "host" "let" "pos" "view" "capture" "define" "evt")}
        {Lisp-Entry "on-capture-host" #f 2583 11 2583 26 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "highlight-figure?:" "highlight:" "click:" "pick-figure" "export-picture" "bell" "not" "if" "get-host" "host" "let" "pos" "view" "capture" "define" "evt")}
        {Lisp-Entry "update-windowing-actions" #f 2604 26 2604 50 ()}
        {Lisp-Entry "update-window-actions" #f 2608 18 2608 39 ("tile-vertically" "tile-horizontally" "cascade" "toggle-frame" "current-frame" "previous-frame" "2" "next-frame" "print" "print-preview" "print-layout" "page-setup" "compare-saved" "revert-saved" "save-all" "save-as" "save" "guest" "close-all" "not" "1" ">=" "and" "close" "application" "Action" "set-action-enabled?" "in-modal?" "length" "count" "get-views" "frames" "let*" "when" "get-stage" "stage" "let")}
        {Lisp-Entry "on-next-frame" #f 2636 26 2636 39 ("current-frame" "focus-host" "send-to-back" "first-view" "first" "get-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-previous-frame" #f 2643 26 2643 43 ("current-frame" "focus-host" "bring-to-front" "last-view" "last" "get-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-current-frame" #f 2650 26 2650 42 ("focus-host" "first-view" "first" "get-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-toggle-frame" #f 2656 26 2656 41 ("bell" "toggle-text" "Text-View" "is?" "if" "current-document" "text" "let" "evt")}
        {Lisp-Entry "toggle-text" #f 2663 11 2663 22 ("else" "toggle-c-text" "ci=?" "test:" "C-Extensions" "member?" "cond" "get-extension" "ext" "bell" "not" "if" "get-controller" "get-moniker" "file" "let" "text")}
        {Lisp-Entry "toggle-c-text" #f 2672 11 2672 24 ("edit-filename" "format" "filename" "ci=?" "if" "toggled" "get-extension" "ext" "get-base" "base" "let*" "file")}
        {Lisp-Entry "on-cascade" #f 2680 26 2680 36 ("on-cascade" "'on-cascade" "unimplemented" "get-views" "frames" "get-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-tile-horizontally" #f 2686 26 2686 46 ("increase!" "Dimension" "set-size" "Point" "new" "set-position" "frame" "for-each" "restore" "function" "with-locked-update" "0" "t" "quotient" "h" "get-height" "height" "get-width" "width" "length" "count" "get-views" "frames" "get-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-tile-vertically" #f 2704 26 2704 44 ("increase!" "Dimension" "set-size" "Point" "new" "set-position" "frame" "for-each" "restore" "function" "with-locked-update" "0" "l" "quotient" "w" "get-height" "height" "get-width" "width" "length" "count" "get-views" "frames" "get-stage" "stage" "let*" "evt")}
        {Lisp-Entry "on-select-window" #f 2722 26 2722 42 ("focus-host" "bring-to-front" "window:" "get-property" "window" "let" "evt")}}}})
"Application-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "application" "Application-Actions.jazz"} 1226584785
    {Lisp-Entry "jazz.system.application.Application-Actions" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Application-Actions" #f 48 7 48 26 ("on-tile-vertically" "tile-vertically" "on-tile-horizontally" "tile-horizontally" "on-cascade" "cascade" "F7" "on-preprocess-file" "preprocess" "Tab" "on-toggle-frame" "toggle-frame" "on-current-frame" "current-frame" "on-previous-frame" "previous-frame" "on-next-frame" "next-frame" "on-previous-workspace" "previous-workspace" "F6" "on-next-workspace" "next-workspace" "Backspace" "on-full-screen" "full-screen" "on-maximize/restore" "maximize/restore" "Space" "on-zoom-vertically" "zoom-vertically" "Return" "on-zoom-horizontally" "zoom-horizontally" "on-command-shell" "command-shell" "on-replace-all-selected" "replace-all-selected" "on-replace-all" "replace-all" "on-replace&find-forward" "replace&find-forward" "on-replace" "replace" "on-find-backward" "find-backward" "F3" "on-find-forward" "find-forward" "on-pop-results" "pop-results" "on-edit-current" "edit-current" "on-edit-previous" "edit-previous" "F4" "on-edit-next" "edit-next" "on-find-in-projects" "find-in-projects" "on-find-in-directories" "find-in-directories" ":shift" "on-find-in-text" "find-in-text" "on-find" "find" "on-forward-history" "forward-history" "on-backward-history" "backward-history" "on-add-history" "add-history" "on-pop-clipboard-stack" "pop-clipboard-stack" "on-paste-from-stack" "paste-from-stack" "on-quit-application" "exit" "on-page-setup" "page-setup" "on-print-preview" "print-preview" "on-print-layout" "print-layout" "on-print" "print" "on-save-all" "save-all" "on-close-all" "close-all" "on-close" "close" "on-open" "open" ":alt" ":control" "Shortcut" "shortcut:" "on-new" ":application" "Event-Handler" "action-handler:" "new" "name:" "Actions")}}})
"Application-Bindings"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "application" "Application-Bindings.jazz"} 1226584785
    {Lisp-Entry "jazz.system.application.Application-Bindings" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Application-Bindings" #f 48 7 48 27 ("guest" "tree" "text" "view" "application" "name:" "Bindings")}}})
"Application-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "application" "Application-Event.jazz"} 1226584785
    {Lisp-Entry "jazz.system.application.Application-Event" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Application-Event" #f 45 7 45 24 ("Event")}}})
"Application-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "application" "Application-Preferences.jazz"} 1226584785
    {Lisp-Entry "jazz.system.application.Application-Preferences" #f 37 9 37 56 ("jazz")
      {Lisp-Entry "Application-Preferences" #f 48 7 48 30 ("interface" "workspaces" "tools" "documents" "favorites" "aliases" "name:" "Process-Preferences")
        {Lisp-Entry "toplevel-title" #f 51 12 51 26 ("generate")}
        {Lisp-Entry "toplevel-state" #f 52 12 52 26 ("generate" "restored" "'restored")}
        {Lisp-Entry "catalog-types" #f 53 12 53 25 ("generate")}
        {Lisp-Entry "documented?" #f 54 12 54 23 ("generate")}
        {Lisp-Entry "fullscreen-warned?" #f 55 12 55 30 ("generate")}
        {Lisp-Entry "active-bindings" #f 56 12 56 27 ("generate")}
        {Lisp-Entry "walk-form" #f 75 16 75 25 ("push-reference" "in-manifest?" "when" "cdr" "catalog-type" "info" "function" "for-each" "'catalog-types" "get-property" "catalog-types" "let" "nextmethod" "form" "analyser")}
        {Lisp-Entry "get-row-instance" #f 90 11 90 27 ("nextmethod" "else" "Boolean-Row" "documented?" "String-Row" "new" "toplevel-title" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 97 11 97 37 ("documented?" "catalog-types" "toplevel-state" "toplevel-title" "protocols" "current-directory" "active-context")}}}})
"Archive-Schema-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "archive" "Archive-Schema-Browser.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.archive.Archive-Schema-Browser" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Archive-Schema-Browser" #f 49 7 49 29 ("Label" "Font" "font:" "Default" "Text-Style" "default-style:" "top-padding:" "2" "left-padding:" "body" "schema-combo" "edge" "border-type:" "19" "168" "29" "schema-border" "55" "31" "schema-label" "extensions:" "parameters:" "file" "protocol:" "24" "302" "62" "file-browser" "16" "80" "6" "0" "Point" "position:" "title:" "file-label" "name:" "78" "370" "Dimension" "size:" "View")
        {Lisp-Entry "get-source" #f 67 18 67 28 ("schema-combo" "'schema-combo" "get-value" "file-browser" "'file-browser" "locate" "get-moniker" "Archive-Schema-Source" "new")}
        {Lisp-Entry "set-source" #f 73 18 73 28 ("setup-source" "value")}
        {Lisp-Entry "setup-source" #f 82 11 82 23 ("schema-combo" "'schema-combo" "set-content" "file-browser" "'file-browser" "locate" "set-moniker" "get-schema" "content" "get-file" "if" "moniker" "let" "source")}
        {Lisp-Entry "moniker-changed" #f 94 11 94 26 ("either" "schema-combo" "'schema-combo" "set-content" "update-valid-combo" "present-schema" "car" "kind" "schema" "bind" "title" "schemas:" "getf" "typed-schemas" "Schema-Archive" "read-header" "properties" "version" "receive" "valid-archive-pathname?" "when" "get-moniker" "file" "file-browser" "'file-browser" "locate" "browser" "let*")}
        {Lisp-Entry "valid-archive-pathname?" #f 107 11 107 34 ("exists?" "get-extension" "=" "and" "file")}
        {Lisp-Entry "update-schema-combo" #f 118 11 118 30 ("select-all" "acquire-focus" "get-text" "text" "message-box" "update-valid-combo" "schemas:" "getf" "typed-schemas" "let" "Schema-Archive" "read-header" "properties" "version" "receive" "valid-archive-pathname?" "if" "get-moniker" "file" "file-browser" "'file-browser" "locate" "browser" "let*")}
        {Lisp-Entry "update-valid-combo" #f 133 11 133 29 ("schema-combo" "'schema-combo" "locate" "set-choices" "list" "present-schema" "title" "kind" "schema" "bind" "typed-schema" "function" "map" "choices" "let" "typed-schemas")}
        {Lisp-Entry "present-schema" #f 143 11 143 25 ("present" "format" "Provider" "get-provider" "provider" "let" "kind" "schema")}
        {Lisp-Entry "validate-content" #f 153 11 153 27 ("schema-combo" "'schema-combo" "locate" "validate-content")}}
      {Lisp-Entry "Archive-Browser" #f 162 7 162 22 ("Moniker-Widget")
        {Lisp-Entry "moniker-update" #f 166 11 166 25 ("moniker-changed")}}
      {Lisp-Entry "Schema-Combo" #f 175 7 175 19 ("condensed?:" "Combo-Box")
        {Lisp-Entry "update-choices" #f 183 11 183 25 ("update-schema-combo")}}}})
"Archive-Schema-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "archive" "Archive-Schema-Source.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.archive.Archive-Schema-Source" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Archive-Schema-Source" #f 45 7 45 28 ("Schema-Source" "Object")
        {Lisp-Entry "file" #f 48 8 48 12 ()}
        {Lisp-Entry "schema" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("schema~self" "file~self" "set!" "nextmethod" "schema" "file")}
        {Lisp-Entry "get-file" #f 63 18 63 26 ("file")}
        {Lisp-Entry "get-schema" #f 67 18 67 28 ("schema")}
        {Lisp-Entry "present" #f 76 11 76 18 ("schema" "file" "get-name" "format")}
        {Lisp-Entry "present-detailed" #f 82 11 82 27 ("schema" "file" "get-name" "format" ":bulleted" "list")}
        {Lisp-Entry "get-data-schema" #f 94 11 94 26 ("get-schema" "load-archive" "archive" "=" "assert" "schema" "valid-schema" "provider" "name" "bind" "schemas:" "getf" "schemas" "let" "file" "Schema-Archive" "read-header" "properties" "version" "receive" "reporter" "reporter:")}
        {Lisp-Entry "valid-schema" #f 103 11 103 23 ("assoc" "either" "error" "empty-string?" "if" "schemas" "schema")}}}})
"Array-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Array-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Array-Tester" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Array-Tester" #f 44 7 44 19 ("title:" "Tester")
        {Lisp-Entry "test" #f 51 11 51 15 ("test-array" "invoke")}
        {Lisp-Entry "array" #f 61 14 61 19 ("10" "int" "new-array")}
        {Lisp-Entry "test-array" #f 65 11 65 21 ()}}}})
"Automata"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "automata" "Automata.jazz"} 1226584780
    {Lisp-Entry "jazz.library.automata.Automata" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "no-char" #f 40 12 40 19 ("no-char")}
      {Lisp-Entry "Automata" #f 49 7 49 15 ("Object")
        {Lisp-Entry "nbVectored" #f 52 8 52 18 ()}
        {Lisp-Entry "nbListed" #f 53 8 53 16 ()}
        {Lisp-Entry "nbLettered" #f 54 8 54 18 ()}
        {Lisp-Entry "start" #f 55 8 55 13 ()}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("start~self" "nbLettered~self" "nbListed~self" "0" "nbVectored~self" "set!" "s")}
        {Lisp-Entry "run" #f 65 18 65 21 ("transition" "when" "start" "state" "iter" "let" "tape")}}
      {Lisp-Entry "Tape" #f 76 7 76 11 ("Object")
        {Lisp-Entry "paragraphs" #f 79 8 79 18 ()}
        {Lisp-Entry "limit" #f 80 8 80 13 ()}
        {Lisp-Entry "row" #f 81 8 81 11 ()}
        {Lisp-Entry "col" #f 82 8 82 11 ()}
        {Lisp-Entry "scan" #f 83 8 83 12 ()}
        {Lisp-Entry "start-row" #f 84 8 84 17 ()}
        {Lisp-Entry "start-col" #f 85 8 85 17 ()}
        {Lisp-Entry "found" #f 86 8 86 13 ()}
        {Lisp-Entry "initialize" #f 89 11 89 21 ("new-queue" "found~self" "start-col~self" "0" "start-row~self" "row" "paragraphs" "element" "get-string" "scan~self" "col~self" "row~self" "limit~self" "paragraphs~self" "set!" "c" "r" "l" "p")}
        {Lisp-Entry "get-next" #f 100 18 100 26 ("-" "no-char" "paragraphs" "element" "get-string" "0" "1" "+" "set!" "begin" "limit" "row" "<" "scan" "length" "col" "=" "if")}
        {Lisp-Entry "add-found" #f 113 18 113 27 ("found" "enqueue" "info")}
        {Lisp-Entry "get-found" #f 117 18 117 27 ("found" "queue-list")}}
      {Lisp-Entry "Transitions" #f 126 7 126 18 ("Object")
        {Lisp-Entry "add-transition" #f 129 26 129 40 ("state" "char")}
        {Lisp-Entry "follow" #f 130 26 130 32 ("char")}}
      {Lisp-Entry "NbAscii" #f 138 12 138 19 ("256")}
      {Lisp-Entry "NbTransitions" #f 139 12 139 25 ("2" "NbAscii" "+")}
      {Lisp-Entry "EOFTransition" #f 140 12 140 25 ("NbAscii")}
      {Lisp-Entry "NotAsciiTransition" #f 141 12 141 30 ("1" "NbAscii" "+")}
      {Lisp-Entry "VectoredTransitions" #f 144 7 144 26 ("Transitions")
        {Lisp-Entry "vector" #f 147 18 147 24 ()}
        {Lisp-Entry "initialize" #f 150 11 150 21 ("Nil" "NbTransitions" "make-vector" "vector" "set!" "rest")}
        {Lisp-Entry "add-transition" #f 154 11 154 25 ("NotAsciiTransition" "NbAscii" ">" "if" "char->integer" "vector" "set-element!" "state" "c")}
        {Lisp-Entry "follow" #f 158 11 158 17 ("NotAsciiTransition" "NbAscii" ">" "if" "char->integer" "vector" "element" "c")}}
      {Lisp-Entry "State" #f 167 7 167 12 ("Object")
        {Lisp-Entry "name" #f 170 8 170 12 ()}
        {Lisp-Entry "transitions" #f 171 8 171 19 ()}
        {Lisp-Entry "initialize" #f 174 11 174 21 ("transitions" "name" "set!" "t" "n")}
        {Lisp-Entry "add-transition" #f 179 18 179 32 ("transitions" "add-transition" "state" "c")}
        {Lisp-Entry "transition" #f 183 26 183 36 ("Nil" "EOFTransition" "action" "follow" "no-char" "neq?" "if" "get-next" "c" "let" "tape")}
        {Lisp-Entry "follow" #f 191 18 191 24 ("transitions" "follow" "c")}
        {Lisp-Entry "action" #f 195 26 195 32 ("tape")}}
      {Lisp-Entry "StartState" #f 203 7 203 17 ("State")
        {Lisp-Entry "initialize" #f 206 11 206 21 ("nextmethod" "t")}
        {Lisp-Entry "transition" #f 210 11 210 21 ("nextmethod" "get-col" "set-start-col" "get-row" "set-start-row" "tape")}}
      {Lisp-Entry "FoundState" #f 221 7 221 17 ("State")
        {Lisp-Entry "found" #f 224 8 224 13 ()}
        {Lisp-Entry "next-state" #f 225 8 225 18 ()}
        {Lisp-Entry "initialize" #f 228 11 228 21 ("Nil" "nextmethod" "next-state" "found" "set!" "ns" "f")}
        {Lisp-Entry "transition" #f 234 11 234 21 ("get-next-state" "action" "tape")}
        {Lisp-Entry "action" #f 239 11 239 17 ("get-start-col" "get-start-row" "found" "list" "add-found" "tape")}}}})
"Basic-Slide"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "slide" "Basic-Slide.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.slide.Basic-Slide" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Basic-Slide" #f 46 7 46 18 ("Slide")}}})
"Basic-Slide-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "slide" "Basic-Slide-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.slide.Basic-Slide-Text-View" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Basic-Slide-Text-View" #f 49 7 49 28 ("editable?:" "White" "Color" "color:" "Text" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "show-unfocused-selection?:" "enabled?:" "Plain-Formatted-Text-View")
        {Lisp-Entry "get-presentation" #f 62 11 62 27 ("get-guest")}
        {Lisp-Entry "mouse-down" #f 71 11 71 21 ("get-presentation" "acquire-focus" "pos")}
        {Lisp-Entry "cursor-update" #f 80 11 80 24 (":no" ":finger" "set-cursor" "get-focus" "get-presentation" "eq?" "if" "view")}
        {Lisp-Entry "draw-enabled?" #f 91 11 91 24 ()}
        {Lisp-Entry "get-context-menu" #f 100 11 100 27 ("new-text-context-menu")}}}})
"Basic-Slide-Title"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "slide" "Basic-Slide-Title.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.slide.Basic-Slide-Title" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Basic-Slide-Title" #f 48 7 48 24 ("center" "justification:" "Label-View")
        {Lisp-Entry "get-presentation" #f 60 11 60 27 ("parent" "get-parent")}
        {Lisp-Entry "mouse-down" #f 69 11 69 21 ("get-presentation" "acquire-focus" "pos")}
        {Lisp-Entry "cursor-update" #f 78 11 78 24 (":no" ":finger" "set-cursor" "get-focus" "get-presentation" "eq?" "if" "view")}}}})
"Binding-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Binding-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Binding-Tester" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Binding-Tester" #f 45 7 45 21 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-function" "test-bind" "test-with" "test-letrec" "test-let" "invoke")}
        {Lisp-Entry "test-let" #f 65 11 65 19 ("self" "code-walk" "error?" "begin" "cons" "lst" "reverse" "equal?" "5" "set!" "8" "3" "y" "4" "+" "2" "x" "let" "=" "rpt" "validate")}
        {Lisp-Entry "test-letrec" #f 103 11 103 22 ("3" "+" "x" "error?" "begin" "120" "5" "-" "*" "1" "0" "if" "n" "function" "fact" "letrec" "=" "rpt" "validate")}
        {Lisp-Entry "test-with" #f 125 11 125 20 ()}
        {Lisp-Entry "test-bind" #f 134 11 134 20 ("error?" "begin" "6" "+" "3" "2" "1" "list" "z" "y" "x" "bind" "=" "rpt" "validate")}
        {Lisp-Entry "test-function" #f 148 11 148 24 ("reverse" "cons" "for-each" "list" "25" "16" "9" "*" "map" "set!" "let" "4" "1" "equal?" "5" "3" "+" "y" "x" "2" "function" "=" "rpt" "validate")}}}})
"Bindings"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "action" "Bindings.jazz"} 1226584786
    {Lisp-Entry "jazz.ui.action.Bindings" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Bindings" #f 45 7 45 15 ("Component")}}})
"Bindings-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Bindings-Manager.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Bindings-Manager" #f 37 9 37 44 ("Branches-Combo" "register-autoclass" "jazz")
      {Lisp-Entry "Bindings-Manager" #f 49 7 49 23 ("on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "bindings" "fill" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "center" "bindings-border" "default?:" "on-bind-key" "100" "title:" "tail" "bind-key" "on-edit-action" "edit-action" "on-restore-key" "restore-key" "on-unbind-key" "unbind-key" "branches" "166" "blue:" "188" "green:" "200" "red:" "Medium" "Color" "border-color:" "3" "2" "border-insets:" "140" "16" "on-categorize" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "categorize" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "border" "layout-type:" "639" "420" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "categorized?" #f 52 8 52 20 ()}
        {Lisp-Entry "conclude" #f 78 11 78 19 ("update-buttons" "update-branches" "view-bindings" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 90 16 90 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 94 16 94 26 ()}
        {Lisp-Entry "host-position" #f 98 16 98 29 ("14" "28" "Point")}
        {Lisp-Entry "host-size" #f 102 16 102 25 ("635" "466" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 106 11 106 26 ("home")}
        {Lisp-Entry "focus-default" #f 110 11 110 24 ("get-tree" "acquire-focus")}
        {Lisp-Entry "get-tree" #f 119 11 119 19 ("bindings" "'bindings" "locate")}
        {Lisp-Entry "on-categorize" #f 128 11 128 24 ("view-bindings" "name" "bindings" "locate" "set-toplevel-controls?" "not" "categorized?" "set!" "evt")}
        {Lisp-Entry "on-show-all" #f 134 11 134 22 ("evt")}
        {Lisp-Entry "on-double-click" #f 138 11 138 26 ("bind-key" "evt")}
        {Lisp-Entry "on-return-press" #f 142 11 142 26 ("bind-key" "evt")}
        {Lisp-Entry "on-unbind-key" #f 146 11 146 24 ("unbind-key" "evt")}
        {Lisp-Entry "on-restore-key" #f 150 11 150 25 ("restore-key" "evt")}
        {Lisp-Entry "on-bind-key" #f 154 11 154 22 ("bind-key" "evt")}
        {Lisp-Entry "on-edit-action" #f 158 11 158 25 ("edit-action" "evt")}
        {Lisp-Entry "on-selection-change" #f 162 11 162 30 ("update-buttons" "evt")}
        {Lisp-Entry "branch-change" #f 166 11 166 24 ("update-buttons" "view-bindings" "get-name" "active-bindings" "'active-bindings" "get-preferences" "set-preferences-property" "set-active-branch" "function" ":wait" "with-cursor" "get-active-branch" "neq?" "when" "get-bindings" "bindings" "get-application" "appl" "let" "branch")}
        {Lisp-Entry "unbind-key" #f 183 11 183 21 ("update-action-item" "update-shortcut" "shortcut" "'shortcut" "set-property" "get-shortcut" "old" "get-bindings-designer" "designer" "selected-action-item/rank" "rank" "action-item" "receive" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "restore-key" #f 194 11 194 22 ("update-action-item" "update-shortcut" "shortcut" "'shortcut" "remove-property" "get-shortcut" "old" "get-bindings-designer" "designer" "selected-action-item/rank" "rank" "action-item" "receive" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "bind-key" #f 205 11 205 19 ("update-action-item" "update-shortcut" "Shortcut-Chooser" "get-modal" "shortcut" "'shortcut" "set-property" "get-shortcut" "old" "get-bindings-designer" "designer" "selected-action-item/rank" "rank" "action-item" "receive" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "update-action-item" #f 216 11 216 29 ("invalidate-cell" "shortcut" "'shortcut" "owner-image" "image:" "Tree-Image" "get-shortcut" "present-shortcut" "title:" "Tree-Label" "set-cell-data" "2" "owner-cell" "1" "Cell" "new" "key-cell" "let" "rank" "action-item" "designer" "tree")}
        {Lisp-Entry "edit-action" #f 230 11 230 22 ("get-method-name" "get-application" "edit-definitions" "bell" "not" "if" "selected-action-item" "get-action-handler" "action-handler" "let")}
        {Lisp-Entry "selected-action-item/rank" #f 242 11 242 36 ("values" "get-row" "get-user-data" "data" "let" "when" "get-single-selection" "rank" "get-tree" "tree" "let*")}
        {Lisp-Entry "selected-action-item" #f 250 11 250 31 ("rank" "action-item" "receive" "not" "if" "selected-action-item/rank" "info" "let")}
        {Lisp-Entry "view-bindings" #f 263 11 263 24 ("view-bindings" "get-tree" "tree" "flat" "'flat" "categorized" "'categorized" "categorized?" "if" "kind" "get-bindings" "bindings" "get-bindings-designer" "designer" "get-application" "appl" "let")}
        {Lisp-Entry "update-branches" #f 272 11 272 26 ("get-branch" "set-value" "get-branches" "get-name" "->string" "list" "branch" "function" "map" "set-choices" "branches" "'branches" "locate" "combo" "get-application" "get-bindings" "bindings" "let")}
        {Lisp-Entry "update-buttons" #f 281 11 281 25 ("bind-key" "'bind-key" "edit-action" "'edit-action" "restore-key" "'restore-key" "unbind-key" "'unbind-key" "locate" "set-enabled?" "selected-action-item" "action-item" "let")}}
      {Lisp-Entry "Branches-Combo" #f 294 7 294 21 ("Combo-Box")
        {Lisp-Entry "content-change" #f 297 11 297 25 ("get-value" "get-host" "get-guest" "branch-change" "origin")}}}})
"Bindings-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "action" "Bindings-Preferences.jazz"} 1226584786
    {Lisp-Entry "jazz.ui.action.Bindings-Preferences" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Bindings-Preferences" #f 46 7 46 27 ("title:" "Preferences")
        {Lisp-Entry "can-rename-component?" #f 58 11 58 32 ()}
        {Lisp-Entry "can-delete-component?" #f 62 11 62 32 ()}
        {Lisp-Entry "can-move-component?" #f 66 11 66 30 ()}
        {Lisp-Entry "can-copy-component?" #f 70 11 70 30 ()}}}})
"Bindings-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Bindings-Tree.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Bindings-Tree" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Bindings-Tree" #f 46 7 46 20 ("center" "justification:" "50" "owner" "150" "key" "toplevel-controls?:" "235" "width:" "title:" "name:" "name" "filled-column:" ":icons" "portfolio:" "Tree-View")
        {Lisp-Entry "view-bindings" #f 61 21 61 34 ("view-list" "list" "view-flat" "flat" "view-categorized" "categorized" "case" "remove-every-row" "function" "with-update-locked" "kind" "bindings" "designer")}
        {Lisp-Entry "view-categorized" #f 71 11 71 27 ("get-children" "present-shortcut" "father:" "'shortcut" "owner-image" "owner" "get-shortcut" "shortcut" "action" "user-data:" "Tree-Image" "Tree-Label" "Bitmap-Resource" "image:" "get-name" "->string" "title:" "Tree-Node" "new" "list" "children:" "add-row" "row" "let" "Actions" "is?" "when" "actions" "function" "for-each" "bindings" "designer")}
        {Lisp-Entry "view-flat" #f 83 11 83 20 ("get-children" "user-data:" "present-shortcut" "Tree-Label" "Bitmap-Resource" "get-name" "format" "title:" "Tree-Node" "list" "children:" "add-row" "'shortcut" "owner-image" "image:" "Tree-Image" "new" "owner" "get-shortcut" "shortcut" "let" "action" "Actions" "is?" "when" "actions" "function" "for-each" "bindings" "designer")}
        {Lisp-Entry "view-list" #f 94 11 94 20 ("user-data:" "present-shortcut" "Tree-Label" "Bitmap-Resource" "get-parent" "get-name" "format" "title:" "Tree-Node" "list" "children:" "add-row" "'shortcut" "owner-image" "image:" "Tree-Image" "new" "owner" "get-shortcut" "shortcut" "let" "action" "function" "for-each" "actions" "designer")}
        {Lisp-Entry "present-shortcut" #f 102 21 102 37 ("present" "not" "if" "shortcut")}
        {Lisp-Entry "owner-image" #f 108 21 108 32 ("default-owner-image" "else" "root-owner-image" "get-reference" "eq?" "branch-owner-image" "Branch" "is?" "cond" "find-owner" "owner" "let" "property" "component" "designer")}
        {Lisp-Entry "default-owner-image" #f 115 11 115 30 ()}
        {Lisp-Entry "root-owner-image" #f 119 11 119 27 ("Bitmap-Resource")}
        {Lisp-Entry "branch-owner-image" #f 123 11 123 29 ("Bitmap-Resource")}}}})
"Bitmap"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "platform" "windows" "Bitmap.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.graphic.platform.windows.Bitmap" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Bitmap" #f 46 7 46 13 ("Object")
        {Lisp-Entry "handle" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("destroy-mandatory" "height" "width" "surface" "get-hdc" "CreateCompatibleBitmap" "handle~self" "set!" "not" "if" "nextmethod" "handle" "handle:")}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "handle" "DeleteObject")}
        {Lisp-Entry "get-handle" #f 68 11 68 21 ("handle")}
        {Lisp-Entry "get-size" #f 72 18 72 26 ("BITMAP-bmHeight-ref" "BITMAP-bmWidth-ref" "Dimension" "new" "size-of-BITMAP" "handle" "GetObject" "BITMAP-make" "info" "let")}}}})
"Bitmap-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "resource" "Bitmap-File.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.resource.Bitmap-File" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Bitmap-File" #f 45 7 45 18 ("Resource-File")
        {Lisp-Entry "resource-class" #f 48 11 48 25 ("Bitmap-Resource")}
        {Lisp-Entry "resource-marker" #f 52 11 52 26 ()}}}})
"Bitmap-Resource"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "resource" "Bitmap-Resource.jazz"} 1226584782
    {Lisp-Entry "jazz.library.resource.Bitmap-Resource" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Bitmap-Resource" #f 43 7 43 22 ("Resource")
        {Lisp-Entry "fold-literal" #f 46 11 46 23 ("name" ",name" "',name" "Bitmap-Resource" "new")}
        {Lisp-Entry "resource-type" #f 56 16 56 29 ("bitmap" "'bitmap")}}}})
"Book-Controller"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "book" "Book-Controller.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.book.Book-Controller" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Book-Controller" #f 46 7 46 22 ("Document-Controller")
        {Lisp-Entry "get-modified?" #f 49 11 49 24 ("continuation-return" "get-editor" "get-modified?" "when" "section" "name" "document" "for-each-section" "return" "function" "continuation-capture")}
        {Lisp-Entry "set-modified?" #f 59 11 59 24 ("update-status" "get-editor" "set-modified?" "section" "name" "function" "document" "for-each-section" "state")}}}})
"Book-Section"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "book" "Book-Section.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.book.Book-Section" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Book-Section" #f 45 7 45 19 ("Object")
        {Lisp-Entry "title" #f 48 8 48 13 ()}
        {Lisp-Entry "model-name" #f 49 8 49 18 ()}
        {Lisp-Entry "client" #f 50 8 50 14 ()}
        {Lisp-Entry "designer" #f 51 8 51 16 ()}
        {Lisp-Entry "editor" #f 52 8 52 14 ()}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("editor" "editor~self" "designer" "designer~self" "client" "client~self" "model-name" "model-name~self" "title~self" "set!" "nextmethod" "title" "title:")}
        {Lisp-Entry "print" #f 68 11 68 16 ("title" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-title" #f 79 18 79 27 ("title")}
        {Lisp-Entry "set-title" #f 83 18 83 27 ("title" "set!" "value")}
        {Lisp-Entry "get-model-name" #f 87 18 87 32 ("model-name")}
        {Lisp-Entry "set-model-name" #f 91 18 91 32 ("model-name" "set!" "value")}
        {Lisp-Entry "get-client" #f 95 18 95 28 ("client")}
        {Lisp-Entry "set-client" #f 99 18 99 28 ("set-client" "editor" "when" "designer" "client" "set!" "value")}
        {Lisp-Entry "get-designer" #f 106 18 106 30 ("editor" "get-designer" "set!" "designer" "unless")}
        {Lisp-Entry "set-designer" #f 112 18 112 30 ("designer" "set!" "value")}
        {Lisp-Entry "get-editor" #f 116 18 116 28 ("editor")}
        {Lisp-Entry "set-editor" #f 120 18 120 28 ("editor" "set!" "value")}}}})
"Book-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "book" "Book-View.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.book.Book-View" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Book-View" #f 48 7 48 16 ("Document" "Layout-View")
        {Lisp-Entry "sections" #f 51 8 51 16 ("eq?" "test:" "make-table")}
        {Lisp-Entry "book" #f 52 8 52 12 ()}
        {Lisp-Entry "controller" #f 53 8 53 18 ()}
        {Lisp-Entry "default-extension" #f 56 11 56 28 ()}
        {Lisp-Entry "extensions" #f 57 11 57 21 ()}
        {Lisp-Entry "focus-document" #f 58 11 58 25 ()}
        {Lisp-Entry "current-history-item" #f 59 11 59 31 ()}
        {Lisp-Entry "compare-moniker" #f 60 11 60 26 ("moniker")}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "controller" "close")}
        {Lisp-Entry "get-book" #f 68 18 68 26 ("book")}
        {Lisp-Entry "set-book" #f 72 18 72 26 ("book" "set!" "value")}
        {Lisp-Entry "get-version" #f 81 18 81 29 ("book" "get-version")}
        {Lisp-Entry "get-properties" #f 85 18 85 32 ("book" "get-properties")}
        {Lisp-Entry "get-description" #f 89 18 89 33 ("book" "get-description")}
        {Lisp-Entry "get-book-name" #f 93 18 93 31 ("book" "get-book-name")}
        {Lisp-Entry "add-section" #f 102 18 102 29 ("sections" "table-set!" "book" "get-client" "when" "section" "name")}
        {Lisp-Entry "remove-section" #f 107 18 107 32 ("sections" "table-set!" "book" "get-client" "when" "name")}
        {Lisp-Entry "get-section" #f 112 18 112 29 ("error" "sections" "table-ref" "either" "name")}
        {Lisp-Entry "get-client" #f 117 18 117 28 ("get-section" "get-client" "name")}
        {Lisp-Entry "get-designer" #f 121 18 121 30 ("get-section" "get-designer" "name")}
        {Lisp-Entry "get-editor" #f 125 18 125 28 ("get-section" "get-editor" "name")}
        {Lisp-Entry "for-each-section" #f 129 18 129 34 ("book" "get-names" "get-section" "name" "function" "for-each" "proc")}
        {Lisp-Entry "set-client-from-forms" #f 140 18 140 39 ("clients-update" "set-client" "book" "book:" "instantiate" "client" "let" "form" "name" "function" "for-each-property" "client-forms")}
        {Lisp-Entry "clients-update" #f 148 26 148 40 ("set-client" "get-section" "section" "let" "client" "name" "function" "book" "for-each-client")}
        {Lisp-Entry "update-names" #f 155 11 155 23 ("branch:" "set-name" "get-designer" "designer" "get-client" "client" "let" "section" "name" "function" "for-each-section" "book-name")}
        {Lisp-Entry "new-event" #f 169 16 169 25 ("set-visible?" "bring-to-front" "update-names" "clients-update" "update-status" "set-newname" "List-Factory" "new" "fact" "get-controller" "controller" "collect-names" "unique-domain-name" "book-name" "get-guest" "book-view" "rest" "new-frame" "apply" "frame" "let*" "host-visible?" "host-visible?:")}
        {Lisp-Entry "collect-names" #f 185 16 185 29 ("get-children" "get-book-name" "neq?" "and" "get-guest" "guest" "Frame-Host" "is?" "when" "frame" "function" "collect" "get-stage" "stage" "class-of" "model" "let" "book")}
        {Lisp-Entry "empty-sections" #f 201 18 201 32 ("clients-update" "set-name" "get-designer" "designer" "let" "set-client" "self" "book:" "instantiate" "client" "get-model-name" "model-name:" "'new" "action:" "textual?:" "Form" "new" "form" "get-name" "old-name" "get-client" "old-client" "get-section" "section" "let*" "name" "function" "for-each" "sections")}
        {Lisp-Entry "install-in-host" #f 220 11 220 26 ("get-controller" "install-in-host" "nextmethod" "host")}
        {Lisp-Entry "get-controller" #f 230 11 230 25 ("new-controller" "set!" "controller" "unless")}
        {Lisp-Entry "new-controller" #f 236 11 236 25 ("self" "Book-Controller" "new")}
        {Lisp-Entry "save" #f 240 11 240 15 ("get-controller" "save")}
        {Lisp-Entry "save-as" #f 244 11 244 18 ("get-controller" "save-as")}
        {Lisp-Entry "save-to" #f 248 11 248 18 ("get-controller" "save-to" "moniker")}
        {Lisp-Entry "save-all" #f 252 26 252 34 ("get-controller" "save-all")}
        {Lisp-Entry "install-scroller?" #f 256 11 256 28 ()}
        {Lisp-Entry "get-moniker" #f 260 11 260 22 ("get-controller" "get-moniker")}
        {Lisp-Entry "set-moniker" #f 264 11 264 22 ("get-controller" "set-moniker" "moniker")}
        {Lisp-Entry "verify-reload" #f 268 11 268 24 ()}
        {Lisp-Entry "reload-moniker" #f 272 11 272 25 ("update-moniker-time" "reload-content" "function" "with-locked-update" "when" "moniker")}
        {Lisp-Entry "reload-content" #f 280 11 280 25 ("update-status" "set-modified?" "load-content" "empty-content" "moniker")}
        {Lisp-Entry "empty-content" #f 287 29 287 42 ()}
        {Lisp-Entry "get-modified?" #f 291 11 291 24 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 295 11 295 24 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "update-status" #f 299 11 299 24 ("get-controller" "update-status")}
        {Lisp-Entry "update-moniker-time" #f 303 11 303 30 ("get-controller" "update-moniker-time" "moniker")}
        {Lisp-Entry "confirm-close" #f 307 11 307 24 ("get-controller" "confirm-close" "rest")}
        {Lisp-Entry "tool-update" #f 311 11 311 22 ("tool?")}
        {Lisp-Entry "console-update" #f 315 11 315 25 ("console?")}
        {Lisp-Entry "load-content" #f 324 11 324 23 ("update-status" "clients-update" "book" "load-content" "moniker")}
        {Lisp-Entry "save-content" #f 335 11 335 23 ("process-saved" "update-status" "set-modified?" "update-moniker-time" "-1" "print-to" "format" "get-title" "output-section" "set!" "output-properties" "output-version" "get-description" "output-header" "when" "first?" "printer" "UTF-8" "'UTF-8" "char-encoding:" "parse" "path:" "list" "call-with-output-file" "get-editor" "process-saving" "branch:" "get-client" "set-name" "get-form" "set-origin" "get-designer" "designer" "section" "name" "for-each-section" "get-base" "base" "let" "function" ":wait" "with-cursor" "moniker")}
        {Lisp-Entry "output-version" #f 367 11 367 25 ("get-version" "format" "printer")}
        {Lisp-Entry "output-properties" #f 371 11 371 28 ("null?" "if" "format" "get-properties" "properties" "let" "printer")}}}})
"Boolean-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Boolean-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Boolean-Domain" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Boolean-Domain" #f 45 7 45 21 ("Domain")
        {Lisp-Entry "validate-value" #f 53 11 53 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "memq?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 63 11 63 18 ("if" "value")}
        {Lisp-Entry "setup-entry" #f 74 11 74 22 ("self" "domain:" "parent:" "Boolean-Entry" "new" "client" "view")}}}})
"Boolean-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "entry" "Boolean-Entry.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.entry.Boolean-Entry" #f 37 9 37 42 ("Entry-Check-Box" "register-autoclass" "jazz")
      {Lisp-Entry "Boolean-Entry" #f 47 7 47 20 ("focusable?:" "checkbox" "name:" "auto-size?:" "Property-Entry")
        {Lisp-Entry "preferred-size" #f 55 11 55 25 ("16" "Dimension")}
        {Lisp-Entry "finish" #f 59 11 59 17 ("self" "checkbox" "'checkbox" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" #f 69 11 69 19 ("checkbox" "'checkbox" "locate")}
        {Lisp-Entry "validate" #f 78 11 78 19 ("domain")}
        {Lisp-Entry "get-value" #f 87 11 87 20 ("checkbox" "'checkbox" "locate" "get-checked?")}
        {Lisp-Entry "set-value" #f 91 11 91 20 ("nil?" "if" "checkbox" "'checkbox" "locate" "set-checked?" "value")}
        {Lisp-Entry "get-modified?" #f 95 11 95 24 ("checkbox" "'checkbox" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 99 11 99 24 ("checkbox" "'checkbox" "locate" "set-modified?" "value")}}
      {Lisp-Entry "Entry-Check-Box" #f 108 7 108 22 ("Check-Box")
        {Lisp-Entry "editor" #f 111 12 111 18 ("generate")}
        {Lisp-Entry "focus-gain" #f 114 11 114 21 ("editor-focus-gain" "get-manager" "manager" "let" "editable?" "editor" "and" "when" "nextmethod" "old")}
        {Lisp-Entry "focus-lose" #f 122 11 122 21 ("editor-focus-lose" "get-manager" "manager" "let" "editable?" "editor" "and" "when" "nextmethod" "view")}}}})
"Boolean-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Boolean-Row.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.row.Boolean-Row" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Boolean-Row" #f 44 7 44 18 ("Combo-Row")
        {Lisp-Entry "initialize" #f 47 11 47 21 ("set-choices" "nextmethod" "apply" "rest")}
        {Lisp-Entry "double-click" #f 52 11 52 23 ("focus-editor" "value" "not" "set-edited-value" "enter-edited-value" "pos")}}}})
"Boolean-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Boolean-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Boolean-Tester" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Boolean-Tester" #f 45 7 45 21 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-boolean" "invoke")}
        {Lisp-Entry "test-boolean" #f 61 11 61 23 ("not" "<" "ci=?" "/=" "=" "rpt" "validate")}}}})
"Border-Layout"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "layout" "Border-Layout.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.layout.Border-Layout" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Border-Layout" #f 45 7 45 20 ("Layout")
        {Lisp-Entry "insets" #f 48 12 48 18 ("generate" "0" "Rect")}
        {Lisp-Entry "padding" #f 49 12 49 19 ("generate" "0")}
        {Lisp-Entry "layout" #f 57 11 57 17 ("get-bottom" "get-right" "get-top" "insets" "get-left" "+" "center" "'center" "east" "'east" "get-width" "west" "'west" "decrease!" "-" "south" "'south" "padding" "set!" "increase!" "Dimension" "set-size" "Point" "new" "set-position" "get-size" "get-height" "let" "north" "'north" "get-location" "eq?" "when" "for-each" "bottom-padding" "right-padding" "top-padding" "left-padding" "bottom" "right" "top" "0" "left" "reverse" "reversed" "get-visible?" "Figure" "is?" "and" "figure" "function" "collect-if" "visibles" "let*" "height" "width" "figures")}}}})
"Border-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Border-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Border-View" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Border-View" #f 49 7 49 18 ("fill" "layout-type:" "Layout-View")
        {Lisp-Entry "border-type" #f 53 12 53 23 ("set-border-type" "get-border-type" "solid" "'solid")}
        {Lisp-Entry "border-color" #f 54 12 54 24 ("set-border-color" "get-border-color" "Black" "name:" "Color")}
        {Lisp-Entry "border-insets" #f 55 12 55 25 ("set-border-insets" "get-border-insets" "1" "Rect")}
        {Lisp-Entry "style" #f 56 12 56 17 ("set-style" "get-style")}
        {Lisp-Entry "get-border-type" #f 68 18 68 33 ("border-type")}
        {Lisp-Entry "set-border-type" #f 72 18 72 33 ("invalidate-borders" "recalculate-border-insets" "border-type" "set!" "type")}
        {Lisp-Entry "get-border-color" #f 78 18 78 34 ("border-color")}
        {Lisp-Entry "set-border-color" #f 82 18 82 34 ("invalidate-borders" "border-color" "set!" "color")}
        {Lisp-Entry "get-border-insets" #f 87 18 87 35 ("border-insets")}
        {Lisp-Entry "set-border-insets" #f 91 18 91 35 ("layout-view" "border-insets" "set!" "insets")}
        {Lisp-Entry "get-style" #f 96 18 96 27 ("style")}
        {Lisp-Entry "set-style" #f 100 18 100 27 ("recalculate-border-insets" "style" "set!" "value")}
        {Lisp-Entry "recalculate-border-insets" #f 105 11 105 36 ("3" "shadow" "2" "else" "1" "entry" "style" "palette" "raised" "edge" "0" "Rect" "set-border-insets" "none" "border-type" "case")}
        {Lisp-Entry "add-child" #f 117 11 117 20 ("layout-view" "View" "is?" "when" "nextmethod" "child")}
        {Lisp-Entry "fill-position" #f 128 11 128 24 ("get-top" "border-insets" "get-left" "Point" "new" "nextmethod" "+")}
        {Lisp-Entry "fill-size" #f 133 11 133 20 ("get-bottom" "get-top" "get-right" "border-insets" "get-left" "+" "Dimension" "new" "nextmethod" "-")}
        {Lisp-Entry "inner?" #f 145 11 145 17 ("children" "memq?" "view")}
        {Lisp-Entry "invalidate-borders" #f 154 11 154 29 ("border-insets" "insets:" "invalidate-border")}
        {Lisp-Entry "draw" #f 163 11 163 15 ("+" "line" "Black" "Pen" "set-pen" "get-bottom" "get-right" "-" "0" "expand-rect" "shadow" "'raised" "raised" "rectangle" "'rectangle" "edges:" "2" "1" "border-insets" "get-left" "inner:" "sunken" "'sunken" "outer:" "draw-edge" "else" "Outline-Border" "-1" "inflate-rect" "inner" "outline/edge/flat?" "'outline/edge/flat?" "outline" "'outline" "Entry-Border" "name:" "Color" "entry/edge/flat?" "'entry/edge/flat?" "get-element" "entry" "'entry" "style" "eq?" "and" "cond" "get-look" "look" "edge" "frame-rect" "border-color" "when" "solid" "unspecified" "none" "border-type" "case" "get-bounds" "bounds" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-children" #f 192 11 192 24 ("top" "edges:" "raised" "'raised" "inner:" "sunken" "'sunken" "outer:" "draw-edge" "get-bounds" "bounds" "let" "palette" "border-type" "case" "nextmethod" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-class-image" #f 205 16 205 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-row-instance" #f 209 11 209 27 ("nextmethod" "else" "Color-Row" "new" "border-color" "field-name" "case" "property")}}}})
"Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "utility" "Box.jazz"} 1226584782
    {Lisp-Entry "jazz.library.utility.Box" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Box" #f 43 7 43 10 ("Object")
        {Lisp-Entry "boxed" #f 46 8 46 13 ()}
        {Lisp-Entry "initialize" #f 49 11 49 21 ("boxed~self" "set!" "nextmethod" "boxed")}
        {Lisp-Entry "fold-literal" #f 54 11 54 23 ("boxed" ",boxed" "',boxed" "Box" "new")}
        {Lisp-Entry "print" #f 58 11 58 16 ("self" "class-of" "type-name" "identifier-name" "format" "boxed" "not" "if" "readably" "printer")}
        {Lisp-Entry "get-boxed" #f 72 18 72 27 ("boxed")}}}})
"Branch"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "component" "Branch.jazz"} 1226584780
    {Lisp-Entry "jazz.library.component.Branch" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Branch" #f 44 7 44 13 ("Component")
        {Lisp-Entry "client-form" #f 47 12 47 23 ("set-client-form" "get-client-form")}
        {Lisp-Entry "client" #f 50 8 50 14 ()}
        {Lisp-Entry "restore-form" #f 51 8 51 20 ()}
        {Lisp-Entry "restoreable?" #f 52 8 52 20 ()}
        {Lisp-Entry "install" #f 55 11 55 18 ("default-client" "client" "set!" "nextmethod" "rest")}
        {Lisp-Entry "default-client" #f 60 11 60 25 ("get-client" "Branch" "parent" "is?" "if")}
        {Lisp-Entry "get-client" #f 71 18 71 28 ("client")}
        {Lisp-Entry "set-client" #f 75 18 75 28 ("client" "set!" "clt")}
        {Lisp-Entry "get-client-form" #f 79 18 79 33 ("client-form")}
        {Lisp-Entry "set-client-form" #f 83 18 83 33 ("client-form" "set!" "form")}
        {Lisp-Entry "get-restore-form" #f 87 18 87 34 ("restore-form")}
        {Lisp-Entry "get-restoreable?" #f 91 18 91 34 ("restoreable?")}
        {Lisp-Entry "set-restoreable?" #f 95 18 95 34 ("restoreable?" "set!" "value")}
        {Lisp-Entry "install-branch" #f 104 11 104 25 ("nextmethod" "self" "parent" "install-branch" "br")}
        {Lisp-Entry "configure-client" #f 109 21 109 37 ("parent" "set-branch" "creator" "client" "install-form" "client-form" "neq?" "configure-inherited" "configured" "let" "install" "'install" "action:" "self" "context:" "Restore-Form" "new" "restore-form" "set!" "restoreable?" "when")}
        {Lisp-Entry "configure-inherited" #f 119 11 119 30 ("restore-form" "self" "creator" "client" "install-form" "client-form:" "get-property" "client-form" "when" "get-class-form" "form" "let")}
        {Lisp-Entry "configure-inherited" #f 129 11 129 30 ("restore-form" "self" "creator" "client" "install-form" "neq?" "client-form:" "get-property" "client-form" "get-class-form" "form" "type-ascendant" "configure-inherited" "configured" "let" "Branch" "subtype?" "when" "model")}
        {Lisp-Entry "installed?" #f 141 18 141 28 ("restore-form")}
        {Lisp-Entry "restore-client" #f 150 21 150 35 ("set!" "restore-form" "client" "install-form" "parent" "set-branch" "restore-client" "branch" "when")}
        {Lisp-Entry "get-class-image" #f 163 16 163 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-name-mandatory?" #f 167 16 167 35 ()}
        {Lisp-Entry "get-name-unicity?" #f 171 16 171 33 ()}
        {Lisp-Entry "set-presentation" #f 175 11 175 27 ("branch:" "string->symbol" "self" "set-name" "presentation" "designer")}
        {Lisp-Entry "display-property?" #f 179 11 179 28 ("client-form" "field-name" "memq?" "not" "nextmethod" "and" "property")}}}})
"Branch-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Branch-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Branch-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Branch-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ()}}}})
"Branches-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "branch" "Branches-Editor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.branch.Branches-Editor" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Branches-Editor" #f 49 7 49 22 ("183" "width:" "branch" "tree" "shown?:" "header" "content" "flat?:" "vscroll?:" "hscroll?:" "scroller" "on-new-default" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "new-default" "tools" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "external-name" #f 64 16 64 29 ("branches-editor" "'branches-editor" "rest")}
        {Lisp-Entry "host-icon" #f 73 16 73 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 77 16 77 26 ()}
        {Lisp-Entry "client-activate" #f 81 11 81 26 ("get-designer" "set-designer" "get-client" "set-client" "set-editor" "View-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" #f 89 11 89 28 ("set-designer" "set-client" "set-editor")}
        {Lisp-Entry "focus-default" #f 100 11 100 24 ("auto-select-first" "acquire-focus" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" #f 106 11 106 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "install-in-host" #f 115 11 115 26 ("2" "0" "Rect" "set-layout-insets" "fill" "'fill" "get-root" "set-layout-type" "nextmethod" "host")}
        {Lisp-Entry "get-tree" #f 126 18 126 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "on-new-default" #f 135 11 135 25 ("new-default" "evt")}
        {Lisp-Entry "new-default" #f 144 29 144 40 ("get-tree" "new-default-branch")}
        {Lisp-Entry "get-editor" #f 153 18 153 28 ("get-tree" "get-editor")}
        {Lisp-Entry "set-editor" #f 157 18 157 28 ("get-tree" "set-editor" "editor")}
        {Lisp-Entry "get-client" #f 166 18 166 28 ("get-tree" "get-client")}
        {Lisp-Entry "set-client" #f 170 18 170 28 ("get-tree" "set-client" "client")}
        {Lisp-Entry "get-designer" #f 179 18 179 30 ("get-tree" "get-designer")}
        {Lisp-Entry "set-designer" #f 183 18 183 30 ("get-tree" "set-designer" "designer")}}}})
"Branches-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "branch" "Branches-Tree.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.branch.Branches-Tree" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Branches-Tree" #f 49 7 49 20 ("157" "width:" "title:" "branch" "name:" "on-selection-change" ":form" "Event-Handler" "selection-handler:" ":icons" "portfolio:" "multiple-selection?:" "Tree-View")
        {Lisp-Entry "editor" #f 52 8 52 14 ()}
        {Lisp-Entry "client" #f 53 8 53 14 ()}
        {Lisp-Entry "designer" #f 54 8 54 16 ()}
        {Lisp-Entry "context-menu" #f 67 11 67 23 ("track-popup-menu" "layout-menu" "action-handler:" "title:" "icon:" "Label-Item" "class:" "list" "properties:" "on-add-branch" "'on-add-branch" "method-name:" "self" "target:" "Event-Handler" "handler" "title" "get-class-image" "icon" "Separator-Item" "not" "class" "for-each" "parent:" "Context-Menu" "submenu" "get-class-presentation" "format" "set-title" "get-addable-default-branch" "default" "let" "eqv?" "if" "rename" "'rename" "close" "'close" "Branch" "is-not?" "separator" "'separator" "set-visible?" "null?" "with-update-locked" "when" "selected-branch" "branch" "get-addable-branches" "client" "essay" "classes" "add" "'add" "locate" "item" "Branch-Menu" "new" "menu" "let*" "function" "with-context-click" "pos")}
        {Lisp-Entry "on-add-branch" #f 103 11 103 24 ("add-branch" "selected-branch" "parent" "client" "get-addable-default-branch" "class:" "get-property" "either" "class" "let" "evt")}
        {Lisp-Entry "new-default-branch" #f 109 18 109 36 ("add-branch" "selected-branch" "either" "parent" "get-addable-branches" "add-here?" "get-addable-default-branch" "class" "let*" "client" "when")}
        {Lisp-Entry "add-branch" #f 118 18 118 28 ("rename-branch" "branch-index" "set-single-selection" "update-tree" "install" "'install" "action:" "textual?:" "Form" "client-form:" "set-property" "branch:" "add-child" "editor" "get-designer" "designer" "parent:" "new" "branch" "get-branches" "branch-presentation-request" "presentation" "let" "parent" "class")}
        {Lisp-Entry "branch-presentation-request" #f 131 29 131 56 ("validator:" "unicity-domain:" "not" "accepts-empty?:" "get-class-presentation" "format" "title:" "request-string" "presentation" "branch-name-validator" "name-validator" "get-presentation" "component" "function" "map" "essay" "unicity-domain" "get-name-unicity?" "name-unicity?" "get-name-mandatory?" "name-mandatory?" "let*" "initial-value" "initial-value:" "brothers" "class")}
        {Lisp-Entry "branch-name-validator" #f 140 29 140 50 ()}
        {Lisp-Entry "on-close-branch" #f 144 11 144 26 ("delete-selection" "evt")}
        {Lisp-Entry "delete-selection" #f 148 11 148 27 ("remove-branch" "bell" "Branch" "is-not?" "if" "selected-branch" "branch" "let")}
        {Lisp-Entry "remove-branch" #f 155 29 155 42 ("update-tree" "remove-child" "select-branch" "editor" "get-designer" "designer" "get-client" "client" "let" "branch")}
        {Lisp-Entry "on-rename-branch" #f 163 11 163 27 ("rename-selected-branch" "evt")}
        {Lisp-Entry "rename-selected-branch" #f 167 11 167 33 ("rename-branch" "get-presentation" "initial-value:" "get-brothers" "class-of" "branch-presentation-request" "presentation" "selected-branch" "branch" "let*")}
        {Lisp-Entry "rename-branch" #f 173 11 173 24 ("branch-index" "set-single-selection" "update-tree" "set-presentation" "editor" "get-designer" "designer" "get-client" "Branch" "is?" "if" "client" "let" "presentation" "branch")}
        {Lisp-Entry "on-branch-properties" #f 181 11 181 31 (":select-palette?" "show-properties" "evt")}
        {Lisp-Entry "show-properties" #f 185 11 185 26 ("workspace:" "Properties-Manager" "select-palette" "when" "focus?:" "force?:" "self" "origin:" "list" "if" "editor" "set-selection" "selected-branch" "branch" "let" "select-palette?" "select-palette?:")}
        {Lisp-Entry "maybe-show-properties" #f 192 11 192 32 ("show-properties" "Branch" "is?" "get-client" "eq?" "car" "1" "length" "=" "and" "null?" "or" "get-selection" "selection" "selected-branch" "branch" "let" "editor" "when")}
        {Lisp-Entry "get-editor" #f 209 18 209 28 ("editor")}
        {Lisp-Entry "set-editor" #f 213 18 213 28 ("on-editor" "'on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" #f 222 11 222 20 ("branch:" "branch-changed" ":branch-changed" "designer:" "set-designer" ":designer-change" "client:" "get-property" "set-client" ":client-change" "get-kind" "case" "evt")}
        {Lisp-Entry "branch-changed" #f 229 11 229 25 ("branch-index" "set-single-selection" "branch")}
        {Lisp-Entry "get-designer" #f 238 18 238 30 ("designer")}
        {Lisp-Entry "set-designer" #f 242 26 242 38 ("install-listener" "set!" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "install-listener" #f 251 11 251 27 ("add-designer-listener" "on-designer" "'on-designer" "method-name:" "self" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" #f 256 11 256 29 ("self" "remove-designer-listener" "designer")}
        {Lisp-Entry "on-designer" #f 260 11 260 22 ("presentation:" "component:" "get-property" "presentation-change" ":presentation-change" "get-kind" "case" "evt")}
        {Lisp-Entry "presentation-change" #f 265 11 265 30 ("invalidate-cell" "get-cell-data" "set-title" "0" "Cell" "cell" "let" "client" "eq?" "when" "presentation" "component")}
        {Lisp-Entry "get-client" #f 277 18 277 28 ("client")}
        {Lisp-Entry "set-client" #f 281 18 281 28 ("update-selection" "update-tree" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update" #f 293 11 293 17 ("update-selection" "update-tree")}
        {Lisp-Entry "update-tree" #f 298 11 298 22 ("get-branches" "sort-branches" "insert-branch" "branch" "function" "for-each" "insert-client" "node" "let" "client" "when" "remove-every-row")}
        {Lisp-Entry "sort-branches" #f 307 29 307 42 ("branches")}
        {Lisp-Entry "update-selection" #f 311 11 311 27 ("set-single-selection" "either" "user-data-index" "index" "get-active-branch" "branch" "let*" "generate-event?:" "set-selection" "client" "not" "if")}
        {Lisp-Entry "insert-client" #f 321 11 321 24 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "add-row" "component-image" "image" "client" "get-presentation" "title" "let")}
        {Lisp-Entry "insert-branch" #f 327 11 327 24 ("sort-branches" "insert-branch" "child" "function" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "handle" "component-image" "image" "component-presentation" "title" "get-children" "children" "let" "branch" "node")}
        {Lisp-Entry "component-presentation" #f 337 29 337 51 ("get-presentation" "component")}
        {Lisp-Entry "component-image" #f 341 29 341 44 ("get-component-image" "component")}
        {Lisp-Entry "can-undo?" #f 350 11 350 20 ()}
        {Lisp-Entry "can-redo?" #f 354 11 354 20 ()}
        {Lisp-Entry "can-delete?" #f 358 11 358 22 ("Branch" "is?" "selected-branch" "branch" "let")}
        {Lisp-Entry "on-selection-change" #f 368 11 368 30 ("get-application" "update-focus-actions" "maybe-show-properties" "client" "selected-branch" "either" "select-branch" "evt")}
        {Lisp-Entry "selected-branch" #f 374 18 374 33 ("get-row" "get-user-data" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "select-branch" #f 380 11 380 24 ("editor" "process-branch-changing" "function" ":wait" "with-cursor" "client" "get-active-branch" "either" "neq?" "and" "when" "branch")}
        {Lisp-Entry "branch-index" #f 387 11 387 23 ("user-data-index" "branch")}}
      {Lisp-Entry "Branch-Menu" #f 396 7 396 18 ("branch-properties" "properties" "rename-branch" "rename" "close-branch" "close" "separator" "add-branch" "branches-tree" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "add" "name:" "Context-Menu")}}})
"Branches-Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "branch" "Branches-Tree-Actions.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.branch.Branches-Tree-Actions" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Branches-Tree-Actions" #f 47 7 47 28 ("on-branch-properties" "properties" "F2" "on-rename-branch" "rename" "Delete" "Shortcut" "shortcut:" "on-close-branch" "close" "on-add-branch" ":focus" "Event-Handler" "action-handler:" "add" "name:" "Actions")}}})
"Branches-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "branch" "Branches-Viewer.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.branch.Branches-Viewer" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Branches-Viewer" #f 48 7 48 22 ("183" "width:" "branch" "tree" "shown?:" "header" "content" "flat?:" "vscroll?:" "hscroll?:" "scroller" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "host-icon" #f 66 16 66 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 70 16 70 26 ()}
        {Lisp-Entry "client-activate" #f 74 11 74 26 ("current-document" "set-client")}
        {Lisp-Entry "client-deactivate" #f 78 11 78 28 ("set-client")}
        {Lisp-Entry "focus-default" #f 87 11 87 24 ("auto-select-first" "acquire-focus" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "install-in-host" #f 98 11 98 26 ("2" "0" "Rect" "set-layout-insets" "fill" "'fill" "get-root" "set-layout-type" "nextmethod" "host")}
        {Lisp-Entry "get-tree" #f 109 18 109 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "get-client" #f 118 18 118 28 ("get-tree" "get-client")}
        {Lisp-Entry "set-client" #f 122 18 122 28 ("get-tree" "set-client" "client")}}
      {Lisp-Entry "Viewer-Tree" #f 131 7 131 18 ("157" "width:" "title:" "branch" "name:" "on-selection-change" ":self" "Event-Handler" "selection-handler:" ":icons" "portfolio:" "multiple-selection?:" "Tree-View")
        {Lisp-Entry "client" #f 139 8 139 14 ()}
        {Lisp-Entry "get-client" #f 147 18 147 28 ("client")}
        {Lisp-Entry "set-client" #f 151 18 151 28 ("update-tree" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update-tree" #f 157 11 157 22 ("get-branches" "insert-branch" "branch" "function" "for-each" "insert-client" "node" "let" "client" "when" "remove-every-row")}
        {Lisp-Entry "insert-client" #f 166 11 166 24 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "add-row" "component-image" "image" "client" "get-presentation" "title" "let")}
        {Lisp-Entry "insert-branch" #f 172 11 172 24 ("insert-branch" "child" "function" "for-each" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "handle" "component-image" "image" "get-presentation" "title" "get-children" "children" "let" "branch" "node")}
        {Lisp-Entry "component-image" #f 182 29 182 44 ("get-component-image" "component")}
        {Lisp-Entry "on-selection-change" #f 191 11 191 30 ("client" "selected-branch" "either" "select-branch" "evt")}
        {Lisp-Entry "selected-branch" #f 195 18 195 33 ("get-row" "get-user-data" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "select-branch" #f 201 11 201 24 ("client" "set-active-branch" "when" "branch")}}}})
"Break-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "break" "Break-Event.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.break.Break-Event" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Break-Event" #f 45 7 45 18 ("Event")}}})
"Build-Configuration"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "configuration" "Build-Configuration.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.configuration.Build-Configuration" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "Build-Configuration" #f 48 7 48 26 ("Bitmap-Resource" "icon:" "Preferences")
        {Lisp-Entry "system" #f 51 12 51 18 ("generate")}
        {Lisp-Entry "platform" #f 52 12 52 20 ("generate")}
        {Lisp-Entry "windowing" #f 53 12 53 21 ("generate")}
        {Lisp-Entry "safety" #f 54 12 54 18 ("generate")}
        {Lisp-Entry "optimize?" #f 55 12 55 21 ("generate")}
        {Lisp-Entry "include-source?" #f 56 12 56 27 ("generate")}
        {Lisp-Entry "interpret?" #f 57 12 57 22 ("generate")}
        {Lisp-Entry "install" #f 58 12 58 19 ("generate")}
        {Lisp-Entry "get-domain" #f 70 16 70 26 ("nextmethod" "else" "field-name" "case" "property")}
        {Lisp-Entry "property-presentation" #f 80 16 80 37 ("nextmethod" "else" "install" "interpret?" "include-source?" "optimize?" "safety" "windowing" "platform" "system" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 93 11 93 37 ("install" "interpret?" "include-source?" "optimize?" "safety" "windowing" "platform" "system" "title")}
        {Lisp-Entry "get-row-instance" #f 105 11 105 27 ("nextmethod" "else" "field-name" "case" "property")}}}})
"Build-Configurations"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "configuration" "Build-Configurations.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.configuration.Build-Configurations" #f 37 9 37 56 ("jazz")
      {Lisp-Entry "Build-Configurations" #f 47 7 47 27 ("title:" "Preferences")
        {Lisp-Entry "can-rename-component?" #f 59 11 59 32 ()}
        {Lisp-Entry "can-delete-component?" #f 63 11 63 32 ()}
        {Lisp-Entry "can-move-component?" #f 67 11 67 30 ()}
        {Lisp-Entry "can-copy-component?" #f 71 11 71 30 ()}
        {Lisp-Entry "get-addable-classes" #f 75 11 75 30 ("Build-Configuration" "list")}
        {Lisp-Entry "get-addable-details" #f 80 11 80 30 ("install" "options" "safety" "windowing" "platform" "system" "100" "name-info")}}}})
"Build-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "preference" "Build-Preferences.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.preference.Build-Preferences" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Build-Preferences" #f 47 7 47 24 ("configurations" "name:" "title:" "Preferences")
        {Lisp-Entry "active-product" #f 50 12 50 26 ("generate")}
        {Lisp-Entry "active-configuration" #f 51 12 51 32 ("generate")}
        {Lisp-Entry "get-configurations" #f 64 18 64 36 ("configurations" "'configurations" "child" "get-children")}}}})
"C-Category-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "catalog" "C-Category-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.catalog.C-Category-Entry" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "C-Category-Entry" #f 46 7 46 23 ("C-Entry")
        {Lisp-Entry "construct-literal" #f 50 16 50 33 ("self" "new" "name" "context")}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("nextmethod" "name")}
        {Lisp-Entry "print-catalog" #f 58 11 58 24 ("name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 70 11 70 20 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" #f 79 11 79 25 ("name" "update-index" "references-index" "definitions-index")}}}})
"C-Define-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "catalog" "C-Define-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.catalog.C-Define-Entry" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "C-Define-Entry" #f 46 7 46 21 ("C-Definition-Entry")}}})
"C-Definition-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "catalog" "C-Definition-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.catalog.C-Definition-Entry" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "C-Definition-Entry" #f 46 7 46 25 ("C-Entry")
        {Lisp-Entry "construct-literal" #f 50 16 50 33 ("self" "new" "column" "line" "name" "context")}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("nextmethod" "column" "line" "name")}
        {Lisp-Entry "print-catalog" #f 58 11 58 24 ("column" "line" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "update-indexes" #f 70 11 70 25 ("name" "update-index" "references-index" "definitions-index")}}}})
"C-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "catalog" "C-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.catalog.C-Entry" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "C-Entry" #f 47 7 47 14 ("Indexed-Entry")
        {Lisp-Entry "source-frame-type" #f 50 11 50 28 ("C-Text-View")}}}})
"C-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "text" "C-Explorer.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.text.C-Explorer" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "C-Explorer" #f 46 7 46 17 ("Code-Explorer")
        {Lisp-Entry "get-syntax" #f 49 11 49 21 ("c" "'c")}
        {Lisp-Entry "current-expr" #f 53 18 53 30 ("get-marked" "symbol" "'symbol" "kind" "eq?" "backward-expr" "and" "when")}
        {Lisp-Entry "forward-expr" #f 58 18 58 30 ("set-start" "forward-simple-expr" "found" "forward" "0" "char-forward" "eqv?" "when" "end" "copy" "start" "let" "forward-whites")}
        {Lisp-Entry "backward-expr" #f 69 18 69 31 ("else" "expr-comment" "'expr-comment" "backward" "case" "0" "char-backward" "prev" "when" "backward-simple-expr" "found" "let" "start" "set-end" "backward-whites")}
        {Lisp-Entry "forward-simple-expr" #f 86 19 86 38 ("else" "literal" "'literal" "reference" "'reference" "list" "'list" "forward-composite" "forward-expr-comment" "eqv?" "forward-constituent" "c-constituent?" "forward-string" "string-delimiter?" "cond" "when" "0" "char-forward" "c" "let")}
        {Lisp-Entry "backward-simple-expr" #f 98 19 98 39 ("else" "literal" "'literal" "reference" "'reference" "list" "'list" "backward-composite" "eqv?" "backward-constituent" "c-constituent?" "backward-string" "string-delimiter?" "cond" "when" "0" "char-backward" "c" "let")}
        {Lisp-Entry "forward-all-expr" #f 109 18 109 34 ("start" "set!" "forward-expr" "while" "end" "copy" "initial-end" "let")}
        {Lisp-Entry "backward-all-expr" #f 116 18 116 35 ("end" "set!" "backward-expr" "while" "start" "copy" "initial-start" "let")}
        {Lisp-Entry "forward-constituent" #f 123 19 123 38 ("else" "continuation-return" "symbol" "'symbol" "kind" "set!" "c-constituent?" "not" "null?" "or" "forward" "eqv?" "cond" "0" "char-forward" "c" "let" "while" "return" "function" "continuation-capture")}
        {Lisp-Entry "backward-constituent" #f 139 19 139 39 ("else" "continuation-return" "symbol" "'symbol" "kind" "set!" "c-constituent?" "not" "null?" "or" "backward" "1" "eqv?" "cond" "0" "char-backward" "c" "let" "while" "return" "function" "continuation-capture")}
        {Lisp-Entry "forward-expr-comment" #f 155 19 155 39 ("expr-comment" "'expr-comment" "kind" "set!" "forward-expr" "forward")}
        {Lisp-Entry "forward-string" #f 162 19 162 33 ("else" "continuation-return" "string" "'string" "kind" "set!" "string-delimiter?" "eqv?" "null?" "cond" "0" "char-forward" "c" "let" "while" "forward" "return" "function" "continuation-capture")}
        {Lisp-Entry "backward-string" #f 182 19 182 34 ("else" "continuation-return" "string" "'string" "kind" "set!" "string-delimiter?" "1" "eqv?" "null?" "cond" "0" "char-backward" "c" "let" "while" "backward" "return" "function" "continuation-capture")}
        {Lisp-Entry "forward-composite" #f 202 19 202 36 ("kind" "set!" "0" "char-forward" "eqv?" "when" "forward-whites" "forward-all-expr" "forward" "end" "set-start" "delimiter" "knd")}
        {Lisp-Entry "backward-composite" #f 213 19 213 37 ("kind" "end" "set!" "0" "char-backward" "eqv?" "when" "backward-whites" "backward-all-expr" "backward" "start" "copy" "initial-start" "let" "delimiter" "knd")}
        {Lisp-Entry "skip-forward" #f 225 18 225 30 ("get-marked" "eq?" "forward-expr" "and" "name")}
        {Lisp-Entry "skip-backward" #f 229 18 229 31 ("get-marked" "eq?" "backward-expr" "and" "name")}
        {Lisp-Entry "forward-comments" #f 233 11 233 27 ("next-paragraph")}
        {Lisp-Entry "backward-comments" #f 237 11 237 28 ()}
        {Lisp-Entry "forward-whites" #f 241 18 241 32 ("set!" "forward-comments" "forward" "eqv?" "whitespace?" "or" "and" "if" "0" "char-forward" "c" "not" "while" "done?" "let")}
        {Lisp-Entry "backward-whites" #f 252 11 252 26 ("backward" "whitespace?" "and" "when" "0" "char-backward" "c" "iterate" "let")}
        {Lisp-Entry "outer-expr" #f 264 18 264 28 ("forward" "backward" "set-end" "backward-all-expr" "skipped" "set-start" "set!" "forward-all-expr" "when" "else" "forward-expr" "open-composite?" "backward-constituent" "forward-constituent" "c-constituent?" "backward-expr" "string-delimiter?" "close-composite?" "or" "=" "and" "cond" "next-char" "nxt" "0" "previous-char" "prv" "end" "e" "start" "copy" "s" "let" "outer-composite?" "outer-composite?:")}
        {Lisp-Entry "open-composite?" #f 298 11 298 26 ("memq?" "char")}
        {Lisp-Entry "close-composite?" #f 302 11 302 27 ("memq?" "char")}}}})
"C-Export-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "catalog" "C-Export-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.catalog.C-Export-Entry" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "C-Export-Entry" #f 46 7 46 21 ("C-Definition-Entry")
        {Lisp-Entry "get-image" #f 54 11 54 20 ("Bitmap-Resource")}}}})
"C-Extern-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "catalog" "C-Extern-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.catalog.C-Extern-Entry" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "C-Extern-Entry" #f 46 7 46 21 ("C-Definition-Entry")
        {Lisp-Entry "get-image" #f 54 11 54 20 ("Bitmap-Resource")}}}})
"C-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "builder" "C-File.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.builder.C-File" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "C-File" #f 45 7 45 13 ("Project-File")}
      {Lisp-Entry "C-File" #f 51 7 51 13 ("Project-File")
        {Lisp-Entry "precompiled-headers" #f 54 12 54 31 ("generate" "use" "'use")}
        {Lisp-Entry "warnings-as-errors?" #f 55 12 55 31 ("generate")}
        {Lisp-Entry "preprocess" #f 63 11 63 21 ("preprocess?:" "output:" "log:" "reporter:" "compile" "warnings-as-errors?" "warnings-as-errors?:" "file:" "product:" "VC-Compiler" "new" "compiler" "dependency-modified?" "exists?" "not" "or" "when" "source" "get-base" "get-object-file" "object" "product-c-catalog" "catalog" "let" "force?" "force?:" "output" "log" "reporter" "product")}
        {Lisp-Entry "build" #f 73 11 73 16 ("output:" "log:" "reporter:" "compile" "warnings-as-errors?" "warnings-as-errors?:" "precompiled-headers" "precompiled-headers:" "file:" "product:" "new" "vc" "get-compiler-class" "compiler" "let*" "dependency-modified?" "exists?" "not" "or" "when" "source" "get-base" "get-object-file" "object" "product-c-catalog" "catalog" "let" "force?" "force?:" "output" "log" "reporter" "product")}
        {Lisp-Entry "dependency-modified?" #f 89 11 89 31 ("null?" "get-file-entry" "essay" "file-def" "get-includes" "when" "get-include-file" "include" "let" "for-each" "cons" "set!" "continuation-return" "get-time" ">" "if" "memq?" "unless" "def" "proc" "verified" "get-modification-time" "object-time" "letrec" "return" "function" "continuation-capture" "catalog" "file" "object")}
        {Lisp-Entry "get-class-presentation" #f 117 16 117 38 ()}}}})
"C-File-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "catalog" "C-File-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.catalog.C-File-Entry" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "C-File-Entry" #f 46 7 46 19 ("File-Entry")
        {Lisp-Entry "header?" #f 49 8 49 15 ()}
        {Lisp-Entry "includes" #f 50 8 50 16 ()}
        {Lisp-Entry "construct-literal" #f 54 16 54 33 ("self" "new" "definitions" "time" "file" "context")}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("collect-includes" "includes" "file" "get-extension" "member?" "header?" "set!" "nextmethod" "d" "t" "f" "c")}
        {Lisp-Entry "collect-includes" #f 64 11 64 27 ("definitions" "C-Include-Entry" "is?" "entry" "function" "collect-if")}
        {Lisp-Entry "get-title" #f 75 11 75 20 ()}
        {Lisp-Entry "get-header?" #f 79 18 79 29 ("header?")}
        {Lisp-Entry "get-source?" #f 83 18 83 29 ("header?" "not")}
        {Lisp-Entry "get-includes" #f 87 18 87 30 ("includes")}}}})
"C-Include-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "catalog" "C-Include-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.catalog.C-Include-Entry" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "C-Include-Entry" #f 47 7 47 22 ("C-Entry")
        {Lisp-Entry "include" #f 50 8 50 15 ()}
        {Lisp-Entry "include-base" #f 51 8 51 20 ()}
        {Lisp-Entry "construct-literal" #f 55 16 55 33 ("self" "new" "column" "line" "include" "context")}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("extract-base" "include-base~self" "include~self" "set!" "nextmethod" "column" "line" "include")}
        {Lisp-Entry "print" #f 65 11 65 16 ("include" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print-catalog" #f 71 11 71 24 ("column" "line" "include" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 83 11 83 20 ("Bitmap-Resource")}
        {Lisp-Entry "present-name" #f 87 11 87 23 ("include")}
        {Lisp-Entry "get-include" #f 96 18 96 29 ("include")}
        {Lisp-Entry "get-include-file" #f 100 18 100 34 ("include-base" "get-catalog" "get-header")}
        {Lisp-Entry "get-header" #f 104 11 104 21 ("get-file-definitions" "get-header?" "def" "function" "find-if" "name" "catalog")}}}})
"C-Method-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "catalog" "C-Method-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.catalog.C-Method-Entry" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "C-Method-Entry" #f 46 7 46 21 ("C-Definition-Entry")
        {Lisp-Entry "class" #f 49 8 49 13 ()}
        {Lisp-Entry "construct-literal" #f 53 16 53 33 ("self" "new" "column" "line" "name" "class" "context")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("class~self" "set!" "nextmethod" "column" "line" "name" "class")}
        {Lisp-Entry "print" #f 62 11 62 16 ("class" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print-catalog" #f 68 11 68 24 ("column" "line" "name" "class" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 80 11 80 20 ("Bitmap-Resource")}}}})
"C-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "parser" "C-Parser.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.parser.C-Parser" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "C-Parser" #f 46 7 46 15 ("File-Parser")
        {Lisp-Entry "parse" #f 49 11 49 16 ("parse-definitions" "catalog" "C-File-Entry" "new" "time" "file")}
        {Lisp-Entry "parse-definitions" #f 53 11 53 28 ("get-output" "find-gambit-function" "gambit" "find-open-brace-function" "function" "open-brace" "case" "find-include" "include" "find-define" "define" "vector-ref" "line" "do" "cardinality" "below" "0" "from" "n" "for" "loop" "get-base" "C-Category-Entry" "put" "get-extension" "member?" "when" "c-function" "'c-function" "get-heuristic" "function-heuristic" "List-Factory" "new" "fact" "char-encoding-errors:" "char-encoding" "char-encoding:" "load-lines" "list->vector" "lines" "let" "file")}
        {Lisp-Entry "define" #f 85 12 85 18 ()}
        {Lisp-Entry "find-define" #f 89 11 89 22 ("subseq" "C-Define-Entry" "new" "<=" "c-constituent?" "or" "c" "function" "skip" "<" ">" "and" "+" "start" "let*" "start:" "define" "search" "when" "skip-whitespace" "col" "string-length" "len" "let" "n" "line")}
        {Lisp-Entry "include" #f 107 12 107 19 ()}
        {Lisp-Entry "find-include" #f 111 11 111 23 ("subseq" "C-Include-Entry" "new" "c-constituent?" "or" "c" "function" "skip" "1" "element" "eqv?" "<" ">" "and" "+" "start" "let*" "start:" "include" "search" "when" "skip-whitespace" "col" "string-length" "len" "let" "n" "line")}
        {Lisp-Entry "find-open-brace-function" #f 129 11 129 35 ("subseq" "C-Export-Entry" "new" "continuation-return" "c-constituent?" "skip" "end" "vector-ref" "do" "downto" "1" "-" "from" "i" "for" "loop" "return" "function" "continuation-capture" "string-ref" "eqv?" "0" ">" "and" "when" "string-length" "len" "let" "n" "line" "lines")}
        {Lisp-Entry "gambit-function" #f 150 12 150 27 ()}
        {Lisp-Entry "find-gambit-function" #f 154 11 154 31 ("subseq" "C-Export-Entry" "new" ">" "c-constituent?" "end" "1" "<" "and" "eqv?" "not" "c" "function" "skip" "+" "start" "let*" "start:" "gambit-function" "search" "when" "skip-whitespace" "col" "string-length" "len" "let" "n" "line")}}}})
"C-Static-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "catalog" "C-Static-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.catalog.C-Static-Entry" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "C-Static-Entry" #f 46 7 46 21 ("C-Definition-Entry")
        {Lisp-Entry "get-image" #f 54 11 54 20 ("Bitmap-Resource")}}}})
"C-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "syntax" "C-Syntax.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.syntax.C-Syntax" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "C-Syntax" #f 45 7 45 15 ("Code-Syntax")
        {Lisp-Entry "get-constituent-test" #f 53 11 53 31 ("c-constituent?")}
        {Lisp-Entry "auto-complete-characters" #f 62 11 62 35 ("auto-complete-characters")}
        {Lisp-Entry "auto-complete-char?" #f 66 11 66 30 ("text-constituent?" "not" "lower-case?" "upper-case?" "and" "eqv?" "or" "last" "key")}}}})
"C-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "text" "C-Text-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.text.C-Text-Preferences" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "C-Text-Preferences" #f 49 7 49 25 ("completions:" "profile-type-color:" "profile-keyword-color:" "Dark-Orange" "profile-macro-color:" "Dark-Blue" "keyword-color:" "Dark-Green" "balanced-comment-color:" "Purple" "line-comment-color:" "title-color:" "Dark-Red" "name:" "Color" "definition-color:" "title:" "CLike-Text-Preferences")}}})
"C-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "text" "C-Text-View.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.text.C-Text-View" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "C-Text-View" #f 49 7 49 18 ("CLike-Text-View")
        {Lisp-Entry "external-name" #f 52 16 52 29 ("c" "'c" "rest")}
        {Lisp-Entry "preferences" #f 56 11 56 22 ("c-text" "documents" "get-preferences")}
        {Lisp-Entry "favorite-completions" #f 65 11 65 31 ("preferences" "get-completions")}
        {Lisp-Entry "Syntax-Targets" #f 74 14 74 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 77 14 77 29 ()}
        {Lisp-Entry "syntax-targets" #f 81 11 81 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 87 11 87 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "colorize-entries" #f 93 11 93 27 ()}
        {Lisp-Entry "Keywords" #f 102 12 102 20 ()}
        {Lisp-Entry "get-keywords" #f 162 11 162 23 ("Keywords")}
        {Lisp-Entry "get-profile-macros" #f 171 11 171 29 ("c-text" "documents" "get-preferences" "get-macros" "profile")}
        {Lisp-Entry "get-profile-keywords" #f 175 11 175 31 ("c-text" "documents" "get-preferences" "get-keywords" "profile")}
        {Lisp-Entry "get-profile-types" #f 179 11 179 28 ("c-text" "documents" "get-preferences" "get-types" "profile")}
        {Lisp-Entry "get-profile-definitions" #f 183 11 183 34 ("c-text" "documents" "get-preferences" "get-definitions" "profile")}
        {Lisp-Entry "get-first-special?" #f 192 11 192 29 ()}
        {Lisp-Entry "on-add-break" #f 201 18 201 30 ("user-message" "set-clipboard-text" "get-name" "format" "break-command" "1" "get-row" "+" "row" "get-start" "start" "get-controller" "get-moniker" "file" "let*" "evt")}
        {Lisp-Entry "on-remove-break" #f 210 18 210 33 ("evt")}
        {Lisp-Entry "get-context-menu" #f 219 11 219 27 ("C-Text-Menu" "new")}}
      {Lisp-Entry "C-Text-Menu" #f 223 7 223 18 ("text" "goto-line" "recolorize-syntax" "code-text" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "update-catalog" "name:" "Context-Menu")}}})
"CLike-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "clike" "text" "CLike-Text-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.language.clike.text.CLike-Text-Preferences" #f 37 9 37 56 ("jazz")
      {Lisp-Entry "CLike-Text-Preferences" #f 47 7 47 29 ("title:" "Code-Text-Preferences")
        {Lisp-Entry "title-color" #f 50 12 50 23 ("generate")}
        {Lisp-Entry "definition-color" #f 51 12 51 28 ("generate")}
        {Lisp-Entry "line-comment-color" #f 52 12 52 30 ("generate")}
        {Lisp-Entry "balanced-comment-color" #f 53 12 53 34 ("generate")}
        {Lisp-Entry "keyword-color" #f 54 12 54 25 ("generate")}
        {Lisp-Entry "profile-macro-color" #f 55 12 55 31 ("generate")}
        {Lisp-Entry "profile-keyword-color" #f 56 12 56 33 ("generate")}
        {Lisp-Entry "profile-type-color" #f 57 12 57 30 ("generate")}
        {Lisp-Entry "macros" #f 58 12 58 18 ("generate")}
        {Lisp-Entry "keywords" #f 59 12 59 20 ("generate")}
        {Lisp-Entry "types" #f 60 12 60 17 ("generate")}
        {Lisp-Entry "completions" #f 61 12 61 23 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 73 11 73 37 ("profile-type-color" "profile-macro-color" "profile-keyword-color" "keyword-color" "balanced-comment-color" "line-comment-color" "definition-color" "title-color" "completions" "types" "keywords" "macros")}
        {Lisp-Entry "get-row-instance" #f 78 11 78 27 ("nextmethod" "else" "Completion-List-Row" "completions" "Macro/Keyword/Type-List-Row" "types" "keywords" "macros" "Color-Row" "new" "profile-type-color" "profile-macro-color" "profile-keyword-color" "keyword-color" "balanced-comment-color" "line-comment-color" "definition-color" "title-color" "field-name" "case" "property")}}
      {Lisp-Entry "Macro/Keyword/Type-List-Row" #f 91 7 91 34 ("List-Row")
        {Lisp-Entry "get-subrow-class" #f 94 11 94 27 ("Macro/Keyword/Type-Row")}}
      {Lisp-Entry "Macro/Keyword/Type-Row" #f 103 7 103 29 ("Value-Row")}}})
"CLike-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "clike" "text" "CLike-Text-View.jazz"} 1226931364
    {Lisp-Entry "jazz.language.clike.text.CLike-Text-View" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "CLike-Text-View" #f 46 7 46 22 ("Code-Text-View")
        {Lisp-Entry "install" #f 49 11 49 18 ("get-profile-type-color" "Profile-Type" "'Profile-Type" "get-profile-keyword-color" "Profile-Keyword" "'Profile-Keyword" "get-profile-macro-color" "Profile-Macro" "'Profile-Macro" "get-keyword-color" "Keyword" "'Keyword" "get-balanced-comment-color" "Balanced-Comment" "'Balanced-Comment" "get-line-comment-color" "Line-Comment" "'Line-Comment" "get-definition-color" "Definition" "'Definition" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "new-syntax" #f 62 11 62 21 ("C-Syntax" "new")}
        {Lisp-Entry "flash-character?" #f 72 11 72 27 ("char")}
        {Lisp-Entry "return-press" #f 81 11 81 23 ("tabulate" "nextmethod" "key")}
        {Lisp-Entry "commented?" #f 91 11 91 21 ("Balanced-Comment" "'Balanced-Comment" "Line-Comment" "'Line-Comment" "Title" "'Title" "inherits?" "or" "and" "get-style-at" "style" "let" "pos")}
        {Lisp-Entry "get-keywords" #f 104 29 104 41 ()}
        {Lisp-Entry "get-profile-macros" #f 113 29 113 47 ("profile")}
        {Lisp-Entry "get-profile-keywords" #f 117 29 117 49 ("profile")}
        {Lisp-Entry "get-profile-types" #f 121 29 121 46 ("profile")}
        {Lisp-Entry "mouse-insert" #f 130 11 130 23 ("insert-string" "function" "with-update-locked" "last" "text-ending" "concatenate" "set!" "memq?" "not" "0" "element" "syntax" "text-constituent?" "and" "previous-cell" "get-char" "sc" "text-beginning" "/=" "when" "get-end" "end" "get-start" "start" "let" "copy")}
        {Lisp-Entry "compute-syntax-targets" #f 151 11 151 33 ("get-profile-types" "profile-type" "'profile-type" "get-profile-keywords" "profile-keyword" "'profile-keyword" "get-profile-macros" "profile-macro" "'profile-macro" "get-keywords" "keyword" "'keyword" "str" "function" "map" "line-comment" "'line-comment" "balanced-comment-backward" "'balanced-comment-backward" "balanced-comment" "'balanced-comment" "list" "append" "get-application" "get-profile" "profile" "let")}
        {Lisp-Entry "compute-syntax-automata" #f 162 11 162 34 ("c-constituent?" "self" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "colorize-type" #f 166 11 166 24 ("Profile-Type" "'Profile-Type" "profile-type" "Profile-Keyword" "'Profile-Keyword" "profile-keyword" "Profile-Macro" "'Profile-Macro" "profile-macro" "Keyword" "'Keyword" "colorize-keyword" "keyword" "Title" "'Title" "Line-Comment" "'Line-Comment" "colorize-line-comment" "line-comment" "colorize-balanced-comment-backward" "balanced-comment-backward" "Balanced-Comment" "'Balanced-Comment" "colorize-balanced-comment" "balanced-comment" "case" "recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "explorer-class" #f 182 11 182 25 ("C-Explorer")}
        {Lisp-Entry "get-context" #f 191 11 191 22 ("c")}
        {Lisp-Entry "current-name" #f 195 11 195 23 ("current-expr-range" "name-at")}
        {Lisp-Entry "name-at" #f 199 11 199 18 ("read-string-element" "0" "element" "eqv?" "if" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "current-expr" #f 207 11 207 23 ("current-name")}
        {Lisp-Entry "current-expr-range" #f 211 11 211 29 ("get-end" "expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "expr-range" #f 217 11 217 21 ("get-range" "outer-expr" "end:" "start:" "self" "C-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "expr-at" #f 223 11 223 18 ("expr-range" "name-at" "pos")}
        {Lisp-Entry "headers" #f 232 12 232 19 ("string" "concatenate" "list")}
        {Lisp-Entry "get-headers" #f 238 11 238 22 ("headers")}}}})
"COM-ffi-struct"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "com" "COM-ffi-struct.jazz"} 1226584783
    {Lisp-Entry "cast-void*" #f 0 12 0 22 ("void*" "int" "c-function")}
    {Lisp-Entry "cast-int*" #f 3 12 3 21 ("int*" "int" "c-function")}
    {Lisp-Entry "foo-foo" #f 9 13 9 20 ("u32vect-ref" "defoo" "void" "U32PTR" "c-lambda" "enfoo" "0" "u32vect-set!" "1" "make-u32vect" "vect" "let*")}
    {Lisp-Entry "typed-foreign->ulong" #f 57 13 57 33 ("unimplemented" "foreign" "type")}
    {Lisp-Entry "ulong->typed-foreign" #f 58 13 58 33 ("unimplemented" "ulong" "type")}
    {Lisp-Entry "IUnknown*-enref" #f 61 12 61 27 ("0" "u32vect-set!" "1" "make-u32vect" "coptr*" "'IUnknown*" "typed-foreign->ulong" "coptr" "function" "decast2" "ulong" "IUnknown*" "c-function" "decast" "let")}
    {Lisp-Entry "IUnknown*-deref" #f 70 12 70 27 ("0" "u32vect-ref" "coptr*" "'IUnknown*" "ulong->typed-foreign" "u" "function" "encast2" "IUnknown*" "ulong" "c-function" "encast" "let")}
    {Lisp-Entry "ffi-COM-foo-IUnknown*" #f 77 12 77 33 ("values" "IUnknown*-deref" "out$1" "res" "IUnknown*-enref" "low$1" "coptr" "function" "HRESULT" "U32PTR" "IUnknown*" "c-function" "proc" "let")}
    {Lisp-Entry "recast-int->ulong" #f 98 13 98 30 ("unimplemented" "ulong")}
    {Lisp-Entry "recast-unlong->int" #f 99 13 99 31 ("unimplemented" "int")}
    {Lisp-Entry "INT-enref" #f 102 12 102 21 ("0" "u32vect-set!" "1" "make-u32vect" "int*" "function" "recast-int->ulong" "decast2" "ulong" "int" "c-function" "decast" "let")}
    {Lisp-Entry "INT-deref" #f 111 12 111 21 ("0" "u32vect-ref" "int*" "function" "recast-ulong->int" "encast2" "int" "ulong" "c-function" "encast" "let")}
    {Lisp-Entry "ffi-foo-INT" #f 118 12 118 23 ("INT-deref" "out$1" "res" "0" "INT-enref" "low$1" "function" "HRESULT" "U32PTR" "c-function" "proc" "let")}
    {Lisp-Entry "typed-foreign?" #f 147 13 147 27 ("unimplemented" "foreign" "type")}
    {Lisp-Entry "GUID-Data1-set!" #f 150 12 150 27 ("DWORD" "GUID*" "c-function")}
    {Lisp-Entry "$$GUID-Data1-set!" #f 154 12 154 29 ("DWORD" "FOREIGNPTR" "c-function")}
    {Lisp-Entry "GUID-Data1-set!" #f 158 13 158 28 ("error" "$$GUID-Data1-set!" "GUID" "'GUID" "typed-foreign?" "if" "value" "guid")}
    {Lisp-Entry "zero-fill" #f 164 13 164 22 ("-" "make-string" "string-append" ">" "if" "string-length" "len" "let" "n" "str")}
    {Lisp-Entry "GUID" #f 171 13 171 17 ("8" "Data4" "byte" "Data3" "Data2" "WORD" "Data1" "DWORD")}
    {Lisp-Entry "GUID-make" #f 178 12 178 21 ("GUID*" "c-function")}
    {Lisp-Entry "GUID-free" #f 182 12 182 21 ("void" "GUID*" "c-function")}
    {Lisp-Entry "GUID-set!" #f 186 13 186 22 ("34" "32" "30" "28" "26" "24" "21" "19" "map" "naturals" "byte*-set!" "byte" "n" "for-each" "2" "+" "offset" "lambda" "string->byte" "GUID-Data4-ref" "data4+" "let" "18" "14" "GUID-Data3-set!" "13" "9" "GUID-Data2-set!" "16" "8" "0" "substring" "string->number" "GUID-Data1-set!" "str" "guid")}
    {Lisp-Entry "GUID-ref" #f 198 13 198 21 ("naturals" "map" "1" "0" "GUID-Data3-ref" "4" "GUID-Data2-ref" "8" "GUID-Data1-ref" "string-append" "apply" "2" "byte*-ref" "proc4" "GUID-Data4-ref" "data4+" "16" "number->string" "zero-fill" "n" "i" "lambda" "proc" "let*" "guid")}
    {Lisp-Entry "GUID-encode" #f 211 13 211 24 ("GUID-set!" "GUID-make" "guid" "let" "str")}
    {Lisp-Entry "GUID-decode" #f 217 13 217 24 ("GUID-free" "GUID-ref" "str" "let" "guid")}
    {Lisp-Entry "CoCreateInstance" #f 223 13 223 29 ("IUnknown*-deref" "GUID-free" "CLSCTX_SERVER" "validate-hresult" "HRESULT" "LPVOID*" "DWORD" "IUnknown*" "GUID*" "c-function" "proc" "IUnknown*-enref" "coptr*" "interface-guid" "GUID-encode" "class-guid" "let" "interface" "class")}
    {Lisp-Entry "ado" #f 234 13 234 16 ("coptr" "CoRelease" "CoCreateInstance" "connection" "let" "initialize-com")}})
"CSS-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "css" "text" "CSS-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.css.text.CSS-Entry" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "CSS-Entry" #f 46 7 46 16 ("Indexed-Entry")
        {Lisp-Entry "construct-literal" #f 50 16 50 33 ("self" "new" "column" "line" "name" "context")}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("nextmethod" "column" "line" "name")}
        {Lisp-Entry "print-catalog" #f 58 11 58 24 ("column" "line" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 70 11 70 20 ("Bitmap-Resource")}}}})
"CSS-File-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "css" "text" "CSS-File-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.css.text.CSS-File-Entry" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "CSS-File-Entry" #f 46 7 46 21 ("File-Entry")
        {Lisp-Entry "get-image" #f 49 11 49 20 ("Bitmap-Resource")}}}})
"CSS-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "css" "text" "CSS-Parser.jazz"} 1226584778
    {Lisp-Entry "jazz.language.css.text.CSS-Parser" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "CSS-Parser" #f 46 7 46 17 ("File-Parser")
        {Lisp-Entry "parse" #f 49 11 49 16 ("catalog" "CSS-File-Entry" "new" "parse-definitions" "definitions" "let" "time" "file")}
        {Lisp-Entry "parse-definitions" #f 54 11 54 28 ("get-output" "length" "0" "naturals" "put" "when" "parse-line" "entry" "no" "line" "function" "for-each" "List-Factory" "new" "fact" "char-encoding" "char-encoding:" "load-lines" "lines" "let" "file")}
        {Lisp-Entry "parse-line" #f 66 11 66 21 ("+" "CSS-Entry" "new" "split-selector" "offset" "name" "receive" "subseq" "selector" "end" "let*" ">" "start:" "css-constituent?" "skip" "start" "0" "=" "when" "skip-whitespace" "col" "let" "no" "line")}
        {Lisp-Entry "split-selector" #f 78 11 78 25 ("+" "else" "1" "subseq" "=" "0" "values" "not" "cond" "find" "pos" "let" "selector")}
        {Lisp-Entry "css-constituent?" #f 88 11 88 27 ("eqv?" "alphanumeric?" "or" "char")}}}})
"CSS-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "css" "text" "CSS-Text-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.language.css.text.CSS-Text-Preferences" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "CSS-Text-Preferences" #f 49 7 49 27 ("Dark-Blue" "keyword-color:" "definition-color:" "Purple" "balanced-comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "CLike-Text-Preferences")}}})
"CSS-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "css" "text" "CSS-Text-View.jazz"} 1226584778
    {Lisp-Entry "jazz.language.css.text.CSS-Text-View" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "CSS-Text-View" #f 47 7 47 20 ("CLike-Text-View")
        {Lisp-Entry "install" #f 50 11 50 18 ("get-keyword-color" "Keyword" "'Keyword" "get-definition-color" "Definition" "'Definition" "get-balanced-comment-color" "Balanced-Comment" "'Balanced-Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 59 16 59 29 ("css-text" "'css-text" "rest")}
        {Lisp-Entry "preferences" #f 63 11 63 22 ("css-text" "documents" "get-preferences")}
        {Lisp-Entry "favorite-completions" #f 72 11 72 31 ("preferences" "get-completions")}
        {Lisp-Entry "Syntax-Targets" #f 81 14 81 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 84 14 84 29 ()}
        {Lisp-Entry "syntax-targets" #f 88 11 88 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 94 11 94 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" #f 100 11 100 33 ("get-keywords" "keyword" "'keyword" "str" "function" "map" "balanced-comment-backward" "'balanced-comment-backward" "balanced-comment" "'balanced-comment" "list" "append")}
        {Lisp-Entry "colorize-type" #f 106 11 106 24 ("Keyword" "'Keyword" "colorize-keyword" "keyword" "colorize-balanced-comment-backward" "balanced-comment-backward" "Balanced-Comment" "'Balanced-Comment" "colorize-balanced-comment" "balanced-comment" "case" "recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "Keywords" #f 118 12 118 20 ()}
        {Lisp-Entry "get-keywords" #f 122 11 122 23 ("Keywords")}}}})
"CSharp-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "csharp" "text" "CSharp-Text-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.language.csharp.text.CSharp-Text-Preferences" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "CSharp-Text-Preferences" #f 48 7 48 30 ("completions:" "keywords:" "Dark-Orange" "profile-macro-color:" "profile-keyword-color:" "Dark-Blue" "keyword-color:" "Dark-Green" "balanced-comment-color:" "Purple" "line-comment-color:" "title-color:" "Dark-Red" "name:" "Color" "definition-color:" "title:" "CLike-Text-Preferences")}}})
"CSharp-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "csharp" "text" "CSharp-Text-View.jazz"} 1226584778
    {Lisp-Entry "jazz.language.csharp.text.CSharp-Text-View" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "CSharp-Text-View" #f 47 7 47 23 ("CLike-Text-View")
        {Lisp-Entry "external-name" #f 50 16 50 29 ("csharp-text" "'csharp-text" "rest")}
        {Lisp-Entry "preferences" #f 54 11 54 22 ("csharp-text" "documents" "get-preferences")}
        {Lisp-Entry "host-workspaces" #f 63 11 63 26 ("text")}
        {Lisp-Entry "favorite-completions" #f 72 11 72 31 ("csharp-text" "documents" "get-preferences" "get-completions")}
        {Lisp-Entry "get-first-special?" #f 81 11 81 29 ()}
        {Lisp-Entry "Keywords" #f 90 12 90 20 ()}
        {Lisp-Entry "get-keywords" #f 126 11 126 23 ("Keywords")}
        {Lisp-Entry "get-profile-macros" #f 135 11 135 29 ("csharp-text" "documents" "get-preferences" "get-macros" "profile")}
        {Lisp-Entry "get-profile-keywords" #f 139 11 139 31 ("csharp-text" "documents" "get-preferences" "get-keywords" "profile")}
        {Lisp-Entry "get-profile-types" #f 143 11 143 28 ("csharp-text" "documents" "get-preferences" "get-types" "profile")}
        {Lisp-Entry "Syntax-Targets" #f 152 14 152 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 155 14 155 29 ()}
        {Lisp-Entry "syntax-targets" #f 159 11 159 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 165 11 165 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "colorize-entries" #f 171 11 171 27 ()}}}})
"Calendar-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "calendar" "Calendar-Actions.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.calendar.Calendar-Actions" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Calendar-Actions" #f 46 7 46 23 ("Next" "on-next" "next" "Prior" "Shortcut" "shortcut:" "on-prior" ":focus" "Event-Handler" "action-handler:" "prior" "name:" "Actions")}}})
"Calendar-Day"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "calendar" "Calendar-Day.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.calendar.Calendar-Day" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Calendar-Day" #f 47 7 47 19 ("View")
        {Lisp-Entry "week" #f 50 12 50 16 ("generate")}
        {Lisp-Entry "day" #f 51 12 51 15 ("generate")}
        {Lisp-Entry "date" #f 52 12 52 16 ("generate")}
        {Lisp-Entry "selected?" #f 55 8 55 17 ()}
        {Lisp-Entry "print" #f 58 11 58 16 ("date" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-manager" #f 69 11 69 22 ("get-calendar" "get-manager")}
        {Lisp-Entry "get-calendar" #f 78 18 78 30 ("parent")}
        {Lisp-Entry "same-day?" #f 82 11 82 20 ("get-calendar" "get-date" "date" "=")}
        {Lisp-Entry "same-month?" #f 86 11 86 22 ("get-calendar" "get-date" "date" "get-month" "=")}
        {Lisp-Entry "get-selected?" #f 95 18 95 31 ("selected?")}
        {Lisp-Entry "set-selected?" #f 99 18 99 31 ("invalidate-view" "selected?" "set!" "flag")}
        {Lisp-Entry "mouse-down" #f 109 11 109 21 ("self" "set-selection" "acquire-focus" "get-calendar" "calendar" "let" "pos")}
        {Lisp-Entry "double-click" #f 120 11 120 23 ("self" "get-manager" "double-click-day" "pos")}
        {Lisp-Entry "Current-Day-Font" #f 129 14 129 30 ("bold?:" "8" "point-size:" "font-name:" "Text" "name:" "Font")}
        {Lisp-Entry "draw" #f 135 11 135 15 ("draw-header" "draw-day" "self" "day-color" "either" "fill-rect" "get-calendar" "calendar" "get-bounds" "bounds" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-day" #f 143 29 143 37 ("surface")}
        {Lisp-Entry "draw-header" #f 147 29 147 40 ("draw-text" "Black" "else" "White" "Color" "not" "cond" "set-text-color" "day-label" "same-month?" "let*" "Label" "name:" "Font" "Current-Day-Font" "current-day?" "if" "set-font" "selection-color" "fill-rect" "14" "get-right" "0" "Rect" "new" "header" "selected?" "when" "get-bounds" "bounds" "let" "context" "surface")}
        {Lisp-Entry "selection-color" #f 159 11 159 26 ("Unfocused-Selection" "Focused-Selection" "name:" "Color" "focused?" "if")}
        {Lisp-Entry "day-color" #f 165 11 165 20 ("Light-Purple" "White" "name:" "Color" "same-month?" "if")}
        {Lisp-Entry "current-day?" #f 171 11 171 23 ("local-date" "date" "day-date" "=")}
        {Lisp-Entry "day-label" #f 176 11 176 20 ("->string" "month-abbrev" "localize" "format" "1" "=" "and" "if" "date" "get-day" "day" "let" "same-month?")}
        {Lisp-Entry "draw-day" #f 184 11 184 19 ("set!" "11" "3" "<=" "if" "increase!" "10" "+" "Rect" "new" "get-color" "color" "event" "for-each" "get-client" "get-holiday-color" "fill-rect" "get-bounds" "bounds" "let" "when" "col" "0" "row" "15" "v" "1" "h" "get-date" "time" "function" "key:" "append" "<" "sort" "displayed" "collect-events" "events" "collect-holidays" "holidays" "collect-recurring" "recurring" "get-editor" "editor" "get-calendar" "calendar" "let*" "nextmethod" "surface")}
        {Lisp-Entry "focused?" #f 217 29 217 37 ("parent" "get-focus" "eq?")}}}})
"Calendar-Dialog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "calendar" "Calendar-Dialog.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.calendar.Calendar-Dialog" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Calendar-Dialog" #f 48 7 48 22 ("on-cancel" "222" "cancel" "default?:" "on-ok" ":host" "action-handler:" "24" "80" "262" "138" "title:" "ok" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "calendar" "calendar-border" "247" "391" "Dimension" "size:" "5" "9" "Point" "position:" "navigator" "name:" "Layout-View")
        {Lisp-Entry "host-title" #f 51 12 51 22 ("generate")}
        {Lisp-Entry "initial-date" #f 52 12 52 24 ("generate")}
        {Lisp-Entry "multiple-selection?" #f 53 12 53 31 ("generate")}
        {Lisp-Entry "finish" #f 65 11 65 17 ("set-selection" "find-calendar-day" "day" "initial-date" "set-date" "multiple-selection?" "set-multiple-selection?" "navigator" "'navigator" "locate" "get-calendar" "calendar" "let" "nextmethod" "rest")}
        {Lisp-Entry "install-in-host" #f 74 11 74 26 ("navigator" "'navigator" "locate" "get-calendar" "acquire-focus" "set-title" "host-title" "when" "nextmethod" "host")}
        {Lisp-Entry "host-title" #f 86 16 86 26 ()}
        {Lisp-Entry "host-size" #f 90 16 90 25 ("297" "408" "Dimension")}
        {Lisp-Entry "double-click-day" #f 99 18 99 34 ("get-modal-result" "get-host" "end-modal" "day")}
        {Lisp-Entry "on-return-press" #f 104 11 104 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" #f 110 11 110 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "get-modal-result" #f 120 11 120 27 ("get-selection" "get-date" "get-calendar" "calendar" "'navigator" "locate" "navigator" "let*")}}}})
"Calendar-Navigator"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "calendar" "Calendar-Navigator.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.calendar.Calendar-Navigator" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Calendar-Navigator" #f 47 7 47 25 ("calendar" "entry" "style:" "edge" "border-type:" "240" "320" "calendar-border" "on-next-month" "next-month" "on-double-click" "double-click-handler:" "Heading4" "Font" "font:" "justification:" "month" "2" "0" "Rect" "layout-insets:" "120" "month-header" "on-previous-month" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "previous-month" "flow" "164" "centered" "center" "north" "location:" "24" "300" "Dimension" "size:" "tools" "name:" "border" "layout-type:" "Layout-View")
        {Lisp-Entry "finish" #f 67 11 67 17 ("get-calendar" "get-date" "update-month" "tools" "'tools" "centered" "'centered" "month-header" "'month-header" "locate" "layout-view" "nextmethod" "host")}
        {Lisp-Entry "get-tree" #f 80 18 80 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "get-calendar" #f 84 18 84 30 ("calendar" "'calendar" "locate")}
        {Lisp-Entry "on-double-click" #f 93 11 93 26 ("find-calendar-day" "set-selection" "set-date" "get-calendar" "calendar" "month-date" "local-date" "day-date" "date" "let*" "month" "get-sender" "get-name" "case" "evt")}
        {Lisp-Entry "on-previous-month" #f 104 11 104 28 ("goto-previous-month" "get-calendar" "calendar" "let" "evt")}
        {Lisp-Entry "on-next-month" #f 109 11 109 24 ("goto-next-month" "get-calendar" "calendar" "let" "evt")}
        {Lisp-Entry "update-month" #f 119 18 119 30 ("get-year" "month-name" "localize" "format" "month" "'month" "locate" "set-title" "date")}}
      {Lisp-Entry "Navigator-Calendar" #f 128 7 128 25 ("Calendar-View")
        {Lisp-Entry "date-update" #f 131 11 131 22 ("date" "parent" "get-parent" "update-month" "nextmethod")}}}})
"Calendar-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "calendar" "Calendar-View.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.calendar.Calendar-View" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Calendar-View" #f 46 7 46 20 ("View")
        {Lisp-Entry "date" #f 49 12 49 16 ("set-date" "get-date")}
        {Lisp-Entry "spacing" #f 50 12 50 19 ("set-spacing" "get-spacing" "1")}
        {Lisp-Entry "multiple-selection?" #f 51 12 51 31 ("set-multiple-selection?" "get-multiple-selection?")}
        {Lisp-Entry "selection" #f 54 8 54 17 ()}
        {Lisp-Entry "finish" #f 57 11 57 17 ("date" "find-calendar-day" "set-selection" "install-days" "set-date" "nextmethod" "rest")}
        {Lisp-Entry "get-date" #f 69 18 69 26 ("date")}
        {Lisp-Entry "set-date" #f 73 18 73 26 ("date-update" "get-finished?" "when" "local-date" "day-date" "either" "date" "set!" "value")}
        {Lisp-Entry "date-update" #f 80 29 80 40 ("invalidate-view" "update-days")}
        {Lisp-Entry "get-spacing" #f 85 18 85 29 ("spacing")}
        {Lisp-Entry "set-spacing" #f 89 18 89 29 ("spacing" "set!" "value")}
        {Lisp-Entry "get-multiple-selection?" #f 93 18 93 41 ("multiple-selection?")}
        {Lisp-Entry "set-multiple-selection?" #f 97 18 97 41 ("multiple-selection?" "set!" "value")}
        {Lisp-Entry "get-manager" #f 101 26 101 37 ("Calendar-Dialog" "find-ascendant")}
        {Lisp-Entry "guest-actions" #f 110 11 110 24 ("nextmethod" "calendar" "'calendar" "find-actions" "cons")}
        {Lisp-Entry "on-prior" #f 120 11 120 19 ("prior-press" "evt")}
        {Lisp-Entry "on-next" #f 124 11 124 18 ("next-press" "evt")}
        {Lisp-Entry "focus-gain" #f 133 11 133 21 ("invalidate-view" "selection" "when" "old")}
        {Lisp-Entry "focus-lose" #f 138 11 138 21 ("invalidate-view" "selection" "when" "view")}
        {Lisp-Entry "left-arrow-press" #f 148 11 148 27 ("0" "-1" "move-selection" "modifiers")}
        {Lisp-Entry "up-arrow-press" #f 152 11 152 25 ("-1" "0" "move-selection" "modifiers")}
        {Lisp-Entry "right-arrow-press" #f 156 11 156 28 ("0" "1" "move-selection" "modifiers")}
        {Lisp-Entry "down-arrow-press" #f 160 11 160 27 ("1" "0" "move-selection" "modifiers")}
        {Lisp-Entry "prior-press" #f 164 26 164 37 ("goto-previous-month")}
        {Lisp-Entry "next-press" #f 168 26 168 36 ("goto-next-month")}
        {Lisp-Entry "move-selection" #f 172 11 172 25 ("find-calendar-cell" "set-selection" "get-week" "4" "ny" "get-day" "+" "6" "min" "0" "max" "nx" "let" "bell" "selection" "null?" "if" "dy" "dx")}
        {Lisp-Entry "install-days" #f 185 11 185 23 ("6" "7" "0" "naturals" "1" "'day" "add" "set!" "install-day" "day" "week" "function" "for-each" "calendar-base" "let" "date" "when")}
        {Lisp-Entry "install-day" #f 196 11 196 22 ("date:" "day:" "week:" "self" "parent:" "calendar-day-class" "new" "date" "day" "week")}
        {Lisp-Entry "calendar-day-class" #f 200 29 200 47 ("Calendar-Day")}
        {Lisp-Entry "calendar-base" #f 204 11 204 24 ("date" "first-day-of-month" "first-day-of-week")}
        {Lisp-Entry "update-days" #f 213 11 213 22 ("6" "7" "0" "naturals" "cdr" "1" "'day" "add" "set!" "set-date" "car" "calendar-day" "day" "week" "function" "for-each" "children" "scan" "calendar-base" "date" "let")}
        {Lisp-Entry "layout" #f 231 11 231 17 ("children" "Dimension" "set-size" "spacing" "*" "1" "+" "Point" "new" "set-position" "get-day" "col" "get-week" "row" "Calendar-Day" "is?" "when" "view" "function" "for-each" "6" "get-height" "height" "7" "get-width" "quotient" "width" "let")}
        {Lisp-Entry "day-color" #f 248 26 248 35 ("day")}
        {Lisp-Entry "find-calendar-day" #f 257 18 257 35 ("children" "get-date" "=" "Calendar-Day" "is?" "and" "view" "function" "find-if" "date")}
        {Lisp-Entry "find-calendar-cell" #f 264 18 264 36 ("children" "get-week" "get-day" "=" "Calendar-Day" "is?" "and" "view" "function" "find-if" "y" "x")}
        {Lisp-Entry "get-selection" #f 277 18 277 31 ("selection")}
        {Lisp-Entry "set-selection" #f 281 18 281 31 ("selection-update" "set!" "set-selected?" "selection" "neq?" "when" "day")}
        {Lisp-Entry "selection-update" #f 291 29 291 45 ()}
        {Lisp-Entry "goto-previous-month" #f 300 18 300 37 ("date" "previous-month" "goto-month")}
        {Lisp-Entry "goto-next-month" #f 304 18 304 33 ("date" "next-month" "goto-month")}
        {Lisp-Entry "goto-month" #f 308 11 308 21 ("find-calendar-day" "set-selection" "set-date" "month")}}}})
"Canvas"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "canvas" "Canvas.jazz"} 1226584780
    {Lisp-Entry "jazz.library.canvas.Canvas" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Canvas" #f 51 7 51 13 ("Component")
        {Lisp-Entry "violations" #f 54 12 54 22 ("set-violations" "get-violations")}
        {Lisp-Entry "violations-factory" #f 57 8 57 26 ("List-Factory" "new")}
        {Lisp-Entry "get-integrity-manager" #f 65 11 65 32 ("Integrity-Manager" "new")}
        {Lisp-Entry "validate-integrity" #f 69 18 69 36 ("select-violations-manager" "IDI_ERROR" "icon:" "format-plural" "length" "count" "format" "message-box" "null?" "if" "update-violations-manager" "get-presentation" "presentation" "user-message" "when" "get-output" "violations" "set!" "self" "validate-integrity" "violations-factory" "reset" "get-integrity-manager" "integrity-manager" "let" "report?" "report?:" "reporter" "reporter:" "context" "context:")}
        {Lisp-Entry "get-violations-manager" #f 87 11 87 33 ("violations-manager-class" "singleton-docked" "get-guest")}
        {Lisp-Entry "update-violations-manager" #f 91 11 91 36 ("update" "get-violations-manager" "manager" "let" "violations")}
        {Lisp-Entry "select-violations-manager" #f 96 18 96 43 ("focus?:" "violations-manager-workspace" "workspace:" "violations-manager-class" "select-palette" "select-first" "select-results" "get-violations-manager" "manager" "let")}
        {Lisp-Entry "violations-manager-class" #f 103 29 103 53 ("Violations-Manager")}
        {Lisp-Entry "violations-manager-workspace" #f 107 29 107 57 ()}
        {Lisp-Entry "get-violations" #f 116 18 116 32 ("violations")}
        {Lisp-Entry "set-violations" #f 120 18 120 32 ("violations" "set!" "value")}
        {Lisp-Entry "add-violation" #f 124 18 124 31 ("violations-factory" "put" "violation")}
        {Lisp-Entry "clear-violations" #f 128 18 128 34 ("violations" "set!" "violations-factory" "reset")}}}})
"Canvas-Element"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "canvas" "Canvas-Element.jazz"} 1226584780
    {Lisp-Entry "jazz.library.canvas.Canvas-Element" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Canvas-Element" #f 44 7 44 21 ("Component")
        {Lisp-Entry "get-name-mandatory?" #f 52 16 52 35 ()}
        {Lisp-Entry "get-name-unicity?" #f 56 16 56 33 ("get-name-mandatory?")}
        {Lisp-Entry "presentation->name" #f 60 16 60 34 ("=" "empty-string?" "or" "get-name-mandatory?" "not" "and" "if" "presentation")}
        {Lisp-Entry "name->presentation" #f 66 16 66 34 ("get-name-mandatory?" "or" "if" "name")}
        {Lisp-Entry "can-view-properties?" #f 72 11 72 31 ()}
        {Lisp-Entry "get-addable-details" #f 76 11 76 30 ("100" "name-info")}}}})
"Canvas-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "canvas" "Canvas-Manager.jazz"} 1226584780
    {Lisp-Entry "jazz.library.canvas.Canvas-Manager" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Canvas-Manager" #f 49 7 49 21 ("card-border" "bottom-right" "toplevel-controls?:" "element" "details" "vscroll?:" "hscroll?:" "document" "100" "details-border" "details-pane" "60" "relative" "mode:" "vert" "366" "360" "289" "editor-splitter" "fill" "second" "right" "title:" "descendant" "on-tab-press" "tab-press-handler:" "highlight-edited?:" "tree" "header" "content" "scroller" "descendants" "entry" "style:" "edge" "border-type:" "first" "338" "278" "4" "Point" "position:" "descendants-border" "250" "division:" "horz" "orientation:" "split" "state:" "center" "367" "splitter" "on-new" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "22" "new" "north" "location:" "7" "flow" "33" "300" "toolbar" "name:" "2" "0" "Rect" "layout-insets:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Editor-View")
        {Lisp-Entry "host-icon" #f 84 16 84 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-position" #f 88 16 88 29 ()}
        {Lisp-Entry "host-size" #f 92 16 92 25 ()}
        {Lisp-Entry "host-workspaces" #f 96 11 96 26 ("home")}
        {Lisp-Entry "new-event" #f 106 16 106 25 ("set-visible?" "bring-to-front" "set-client" "instantiate" "client" "name:" "Canvas-Base" "'Canvas-Base" "model-name:" "'new" "action:" "textual?:" "Form" "new" "form" "update-status" "set-newname" "get-controller" "controller" "collect-names" "unique-domain-name" "newname" "localize" "newbase" "get-guest" "manager" "host-visible?:" "new-frame" "apply" "frame" "let*" "rest")}
        {Lisp-Entry "collect-names" #f 123 16 123 29 ("get-children" "get-client" "get-name" "neq?" "and" "get-guest" "guest" "Frame-Host" "is?" "when" "frame" "function" "collect" "get-stage" "stage" "class-of" "model" "let" "base")}
        {Lisp-Entry "Canvas-Manager-Controller" #f 140 9 140 34 ("Editor-View-Controller")
          {Lisp-Entry "document-status" #f 143 13 143 28 ("modified-status" "name-status" "format")}}
        {Lisp-Entry "new-controller" #f 150 11 150 25 ("self" "Canvas-Manager-Controller" "new")}
        {Lisp-Entry "tool-preferences" #f 159 11 159 27 ("canvas-manager" "tools" "get-preferences")}
        {Lisp-Entry "install" #f 168 11 168 18 ("details" "'details" "self" "descendants" "'descendants" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "install-in-host" #f 174 11 174 26 ("get-size" "set-size" "cascade-position" "set-position" "when" "tool-preferences" "pref" "let" "nextmethod" "host")}
        {Lisp-Entry "focus-document" #f 182 11 182 25 ("tree" "descendants" "locate" "acquire-focus")}
        {Lisp-Entry "selection-changed" #f 191 11 191 28 ("update-new" "nextmethod" "focus?" "force-parent?" "origin" "new" "old")}
        {Lisp-Entry "update-new" #f 196 11 196 21 (":french" "french:" ":english" "localize-to" "format" "english:" "Locales" "get-class-presentation" "pres" "car" "class" "set-tooltip-text" "set-enabled?" "begin" "1" "length" "/=" "if" "new" "'new" "tool" "get-addable-classes" "essay" "classes" "get-client" "client" "details" "'details" "locate" "tree" "let*")}
        {Lisp-Entry "on-editor" #f 218 11 218 20 ("save-client" "Custom-Card" "is?" "when" "get-card" "current" ":saving" "setup-card" "setup-details" "get-selection" "car" "component" "let" ":selection-changing" "get-kind" "case" "nextmethod" "evt")}
        {Lisp-Entry "setup-details" #f 236 11 236 24 ("card-update" "categorized" "'categorized" "get-tree" "set-filter" "is?" "designer" "set-designer" "begin" "self" "set-editor" "details-border" "'details-border" "locate" "parent:" "details" "'details" "name:" "new" "card" "class-of" "neq?" "or" "Details-Card" "get-custom-details" "either" "details-class" "close" "when" "null?" "if" "get-details" "current" "let" "component")}
        {Lisp-Entry "get-details" #f 258 11 258 22 ("details" "'details" "details-border" "'details-border" "locate" "find-component")}
        {Lisp-Entry "get-card" #f 267 11 267 19 ("properties" "'properties" "card-border" "'card-border" "locate" "find-component")}
        {Lisp-Entry "setup-card" #f 271 11 271 21 ("card-update" "categorized" "'categorized" "get-tree" "set-filter" "designer" "set-designer" "self" "set-editor" "card-border" "'card-border" "locate" "parent:" "properties" "'properties" "name:" "new" "card" "class-of" "neq?" "or" "Properties-Card" "get-custom-card" "either" "card-class" "close" "null?" "if" "save-client" "Custom-Card" "is?" "when" "get-card" "current" "let" "component")}
        {Lisp-Entry "card-update" #f 290 26 290 37 ("card")}
        {Lisp-Entry "on-selection-change" #f 299 11 299 30 ("focus?:" "force-parent?:" "origin:" "list" "set-selection" "get-user-data" "component" "get-row" "row" "let*" "when" "get-single-selection" "selection" "log" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-new" #f 311 18 311 24 ("acquire-focus" "generate-event?:" "set-single-selection" "row-rank" "rank" "component-row" "row" "origin:" "list" "set-selection" "select?:" "tree" "descendants" "add-component-class" "component" "get-addable-classes" "car" "class" "get-client" "client" "'details" "locate" "details" "let*" "evt")}
        {Lisp-Entry "on-tab-press" #f 323 18 323 30 ("get-row" "auto-select" "when" "get-single-selection" "rank" "acquire-focus" "card" "'card" "locate" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "Validation-Reporter" #f 337 9 337 28 ("invite" "name:" "title:" "Progress-Reporter")
          {Lisp-Entry "dialog-title" #f 345 18 345 30 ()}}
        {Lisp-Entry "on-validate-integrity" #f 350 11 350 32 ("cancelable?:" "Validation-Reporter" "progress-reporter:" "self" "context:" "name:" "threaded?:" "set-done" "user-message" "reporter:" "validate-integrity" "reporter" "function" "with-progress" "get-designer" "designer" "get-client" "client" "let" "evt")}
        {Lisp-Entry "Cascade-Position" #f 370 14 370 30 ("25" "Point")}
        {Lisp-Entry "Cascade-Step" #f 373 14 373 26 ("22" "Dimension")}
        {Lisp-Entry "cascade-position" #f 377 11 377 27 ("continuation-return" "Cascade-Step" "increase!" "get-position" "frame" "key:" "member?" "if" "while" "return" "function" "continuation-capture" "Cascade-Position" "pos" "collect-managers" "frames" "let")}
        {Lisp-Entry "collect-managers" #f 388 11 388 27 ("get-stage" "get-children" "Canvas-Manager" "get-guest" "Frame-Host" "is?" "and" "frame" "function" "collect-if")}}}})
"Canvas-Node"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "canvas" "Canvas-Node.jazz"} 1226584780
    {Lisp-Entry "jazz.library.canvas.Canvas-Node" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Canvas-Node" #f 44 7 44 18 ("Component")
        {Lisp-Entry "get-class-image" #f 52 16 52 31 ("Bitmap-Resource")}
        {Lisp-Entry "name->presentation" #f 56 16 56 34 ("get-class-presentation" "name")}
        {Lisp-Entry "can-rename-component?" #f 60 11 60 32 ()}
        {Lisp-Entry "can-delete-component?" #f 64 11 64 32 ()}
        {Lisp-Entry "can-move-component?" #f 68 11 68 30 ()}
        {Lisp-Entry "can-copy-component?" #f 72 11 72 30 ()}
        {Lisp-Entry "indexable?" #f 76 11 76 21 ()}
        {Lisp-Entry "get-addable-details" #f 80 11 80 30 ("100" "name-info")}
        {Lisp-Entry "get-categorized-properties" #f 84 11 84 37 ()}}}})
"CanvasToSql-Exporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "canvas" "CanvasToSql-Exporter.jazz"} 1226584780
    {Lisp-Entry "jazz.library.canvas.CanvasToSql-Exporter" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "CanvasToSQL-Exporter" #f 44 7 44 27 ("Object")}
      {Lisp-Entry "CanvasToSQL-Exporter" #f 50 7 50 27 ("Object")
        {Lisp-Entry "provider" #f 53 8 53 16 ()}
        {Lisp-Entry "separator" #f 54 8 54 17 ()}
        {Lisp-Entry "keys" #f 55 8 55 12 ()}
        {Lisp-Entry "key-suffix" #f 56 8 56 18 ("0")}
        {Lisp-Entry "key-id?" #f 57 8 57 15 ()}
        {Lisp-Entry "key-serial" #f 58 8 58 18 ("equal?" "test:" "make-table")}
        {Lisp-Entry "printer" #f 59 8 59 15 ("open-output-string")}
        {Lisp-Entry "Default-Separator" #f 62 14 62 31 ()}
        {Lisp-Entry "initialize" #f 66 11 66 21 ("key-id?~self" "Default-Separator" "either" "separator~self" "get-provider" "Provider" "is?" "if" "provider~self" "set!" "nextmethod" "key-id?" "key-id?:" "separator" "separator:" "provider" "provider:")}
        {Lisp-Entry "export" #f 80 18 80 24 ("export-code" "export-component" "export-deletes" "export-header" "canvas")}
        {Lisp-Entry "export-to" #f 87 18 87 27 ("format" "printer" "function" "parse" "call-with-output-file" "export" "code" "let" "file" "canvas")}
        {Lisp-Entry "export-code" #f 94 11 94 22 ("format" "open-output-string" "printer" "get-output-string" "code" "let")}
        {Lisp-Entry "export-header" #f 101 29 101 42 ("canvas")}
        {Lisp-Entry "export-deletes" #f 105 29 105 43 ("canvas")}
        {Lisp-Entry "export-component" #f 109 29 109 45 ("export-children" "export-properties" "component")}
        {Lisp-Entry "export-properties" #f 114 29 114 46 ("component")}
        {Lisp-Entry "export-children" #f 118 29 118 44 ("get-children" "export-component" "child" "function" "for-each" "component")}
        {Lisp-Entry "output-section" #f 130 11 130 25 ("printer" "format" "section")}
        {Lisp-Entry "ouput-comment" #f 138 11 138 24 ("printer" "format" "comment")}
        {Lisp-Entry "format-sql-value" #f 147 11 147 27 ("provider" "format-value" "value")}
        {Lisp-Entry "select-primary-key" #f 156 11 156 29 ("separator" "format-sql-value" "printer" "sqlserver" "provider" "external-name" "case" "increase!" "key-suffix" "format" "string->symbol" "var" "let" "get-serial-key" "register-primary-key" "key-id?" "if" "column" "table" "component")}
        {Lisp-Entry "get-serial-key" #f 171 11 171 25 ("+" "1" "table-set!" "not" "if" "key-serial" "table-ref" "id" "let" "table")}
        {Lisp-Entry "with-serial-insert" #f 178 11 178 29 ("else" "separator" "printer" "format" "sqlserver" "provider" "external-name" "case" "proc" "table")}
        {Lisp-Entry "register-primary-key" #f 188 11 188 31 ("cons" "keys" "set!" "value" "component")}
        {Lisp-Entry "get-primary-key" #f 193 11 193 26 ("error" "cdr" "if" "keys" "assq" "info" "let" "component")}
        {Lisp-Entry "insert-row" #f 205 11 205 21 ("symbol?" "when" "value" "property" "function" "for-each-property" "separator" "printer" "join" "format" "command" "property-value" "format-sql-value" "map" "values" "property-column" "map-property" "columns" "let*" "properties" "table")}
        {Lisp-Entry "property-column" #f 221 11 221 26 ("value" "column")}
        {Lisp-Entry "property-value" #f 225 11 225 25 ("default-value" "null?" "not" "if" "value" "column")}
        {Lisp-Entry "default-value" #f 231 29 231 42 ("error" "column")}}}})
"Caption-Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "hosting" "Caption-Host.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.hosting.Caption-Host" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Caption-Host" #f 46 7 46 19 ("Host-View")
        {Lisp-Entry "maximized?" #f 49 8 49 18 ()}
        {Lisp-Entry "get-maximized?" #f 57 18 57 32 ("maximized?")}
        {Lisp-Entry "set-maximized?" #f 61 18 61 32 ("restore" "maximize" "if" "value")}
        {Lisp-Entry "caption-icon" #f 72 29 72 41 ()}
        {Lisp-Entry "caption-title" #f 76 29 76 42 ()}
        {Lisp-Entry "caption-font" #f 80 29 80 41 ("Caption" "name:" "Font")}
        {Lisp-Entry "caption-focused?" #f 84 29 84 45 ()}
        {Lisp-Entry "caption-visible?" #f 88 29 88 45 ()}
        {Lisp-Entry "caption-rect" #f 97 29 97 41 ("20" "+" "get-width" "-" "Rect" "new" "4" "0" "maximized?" "if" "border" "let")}
        {Lisp-Entry "Active-Colors" #f 107 14 107 27 ("255" "113" "28" "227" "blue:" "84" "green:" "0" "red:" "Color" "list")}
        {Lisp-Entry "Inactive-Colors" #f 110 14 110 29 ("235" "185" "157" "223" "blue:" "150" "green:" "122" "red:" "Color" "list")}
        {Lisp-Entry "draw" #f 114 11 114 15 ("draw-caption" "caption-visible?" "rectangle" "'rectangle" "edges:" "outer:" "raised" "'raised" "inner:" "draw-edge" "get-bounds" "bounds" "let" "maximized?" "not" "when" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-caption" #f 122 11 122 23 ("draw-text" "title-offset" "White" "Color" "set-text-color" "set-font" "get-v" "get-top" "get-h" "get-left" "+" "get-application" "get-icons-cache" "draw-image" "icon-offset" "offset" "when" "vertical" "'vertical" "direction:" "0" "list" "gradient-fill" "24" "3" "-" "1" "line" "Light" "name:" "Pen" "set-pen" "get-height" "height" "get-width" "width" "second" "end" "first" "start" "Inactive-Colors" "Active-Colors" "if" "colors" "caption-focused?" "focused?" "caption-font" "font" "caption-title" "title" "caption-icon" "icon" "let*" "caption-rect" "rect" "let" "context" "surface")}
        {Lisp-Entry "icon-offset" #f 146 29 146 40 ("2" "Point")}
        {Lisp-Entry "title-offset" #f 150 29 150 41 ("3" "22" "Point")}}}})
"Capture-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Capture-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Capture-Event" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Capture-Event" #f 44 7 44 20 ("Event")
        {Lisp-Entry "window" #f 47 8 47 14 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("window" "set!" "nextmethod" "wnd" "sender" "kind")}
        {Lisp-Entry "get-window" #f 60 18 60 28 ("window")}}}})
"Card"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "card" "Card.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.card.Card" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Card" #f 46 7 46 11 ("Layout-View")
        {Lisp-Entry "editor" #f 49 8 49 14 ()}
        {Lisp-Entry "client" #f 50 8 50 14 ()}
        {Lisp-Entry "designer" #f 51 8 51 16 ()}
        {Lisp-Entry "destroy" #f 59 11 59 18 ("nextmethod" "set-editor" "set-designer")}
        {Lisp-Entry "get-editor" #f 70 26 70 36 ("editor")}
        {Lisp-Entry "set-editor" #f 74 26 74 36 ("on-editor" "'on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" #f 83 29 83 38 ("get-force?" "force?:" "get-selection" "car" "set-client" ":selection-changed" "designer:" "get-property" "set-designer" ":designer-change" "get-kind" "case" "evt")}
        {Lisp-Entry "get-client" #f 94 26 94 36 ("client")}
        {Lisp-Entry "set-client" #f 98 26 98 36 ("client-update" "set!" "client" "neq?" "or" "when" "force?" "force?:" "clt")}
        {Lisp-Entry "client-update" #f 104 26 104 39 ()}
        {Lisp-Entry "get-designer" #f 113 26 113 38 ("designer")}
        {Lisp-Entry "set-designer" #f 117 26 117 38 ("set!" "install-listener" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "on-designer" #f 126 11 126 22 ("call-property-change" ":property-change" "get-kind" "case" "evt")}
        {Lisp-Entry "call-property-change" #f 132 29 132 49 ("value:" "property:" "property-change" "client" "eq?" "when" "component:" "get-property" "component" "let" "evt")}
        {Lisp-Entry "property-change" #f 138 26 138 41 ("value" "property" "component")}
        {Lisp-Entry "install-listener" #f 147 11 147 27 ("add-designer-listener" "on-designer" "'on-designer" "method-name:" "self" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" #f 152 11 152 29 ("self" "remove-designer-listener" "designer")}
        {Lisp-Entry "enter-value" #f 161 26 161 37 ("designer" "set-property" "client" "when" "value" "property")}}}})
"Catalog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "catalog" "Catalog.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.catalog.Catalog" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Catalog" #f 45 7 45 14 ("Object")
        {Lisp-Entry "name" #f 48 8 48 12 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("name~self" "set!" "nextmethod" "name")}
        {Lisp-Entry "print" #f 56 11 56 16 ("name" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-name" #f 67 18 67 26 ("name")}
        {Lisp-Entry "in-memory?" #f 71 26 71 36 ()}
        {Lisp-Entry "present" #f 80 26 80 33 ()}
        {Lisp-Entry "get-active?" #f 89 26 89 37 ()}
        {Lisp-Entry "set-active?" #f 93 26 93 37 ("flag")}
        {Lisp-Entry "activate" #f 97 26 97 34 ()}
        {Lisp-Entry "deactivate" #f 101 26 101 36 ()}
        {Lisp-Entry "get-definitions" #f 110 26 110 41 ("name")}
        {Lisp-Entry "get-category-definitions" #f 114 26 114 50 ("name")}
        {Lisp-Entry "get-file-entry" #f 118 26 118 40 ("file")}
        {Lisp-Entry "get-references" #f 122 26 122 40 ("name")}
        {Lisp-Entry "get-completions" #f 126 26 126 41 ("name")}
        {Lisp-Entry "in-context?" #f 135 26 135 37 ("context")}}}})
"Catalog-Configuration"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "catalog" "Catalog-Configuration.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.catalog.Catalog-Configuration" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Catalog-Configuration" #f 48 7 48 28 ("Bitmap-Resource" "icon:" "Preferences")
        {Lisp-Entry "type" #f 51 12 51 16 ("generate")}
        {Lisp-Entry "output-file" #f 52 12 52 23 ("generate")}
        {Lisp-Entry "directories" #f 53 12 53 23 ("generate")}
        {Lisp-Entry "extensions" #f 54 12 54 22 ("generate")}
        {Lisp-Entry "recursive?" #f 55 12 55 22 ("generate")}
        {Lisp-Entry "active?" #f 56 12 56 19 ("generate")}
        {Lisp-Entry "references?" #f 57 12 57 23 ("generate")}
        {Lisp-Entry "get-domain" #f 69 16 69 26 ("nextmethod" "else" "Boolean-Domain" "new" "references?" "active?" "recursive?" "field-name" "case" "property")}
        {Lisp-Entry "get-class-presentation" #f 80 16 80 38 ()}
        {Lisp-Entry "property-presentation" #f 84 16 84 37 ("nextmethod" "else" "references?" "active?" "recursive?" "extensions" "directories" "output-file" "type" "field-name" "case" "property")}
        {Lisp-Entry "presentation-property?" #f 96 11 96 33 ("property")}
        {Lisp-Entry "get-presentation" #f 100 11 100 27 ("name" "self" "class-of" "name->presentation")}
        {Lisp-Entry "set-presentation" #f 104 11 104 27 ("class-of" "presentation->name" "self" "set-name" "presentation" "designer")}
        {Lisp-Entry "get-row-instance" #f 108 11 108 27 ("nextmethod" "else" "Boolean-Row" "references?" "active?" "recursive?" "Directory-Group-Row" "directories" "save" "'save" "mode:" "File-Row" "output-file" "collect-catalog-types" "choices:" "Combo-Row" "new" "type" "field-name" "case" "property")}
        {Lisp-Entry "collect-catalog-types" #f 117 11 117 32 ("get-catalog-types" "->string" "list" "car" "type" "info" "function" "map" "get-preferences" "pref" "let")}
        {Lisp-Entry "get-categorized-properties" #f 125 11 125 37 ("references?" "active?" "recursive?" "extensions" "directories" "output-file" "type")}}}})
"Catalog-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Catalog-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Catalog-Entry" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Catalog-Entry" #f 46 7 46 20 ("Object")
        {Lisp-Entry "parent" #f 49 8 49 14 ()}
        {Lisp-Entry "root-definition" #f 50 8 50 23 ()}
        {Lisp-Entry "file-definition" #f 51 8 51 23 ()}
        {Lisp-Entry "get-parent" #f 59 25 59 35 ("parent")}
        {Lisp-Entry "set-parent" #f 63 25 63 35 ("parent" "set!" "p")}
        {Lisp-Entry "get-root-definition" #f 67 26 67 45 ("root-definition")}
        {Lisp-Entry "set-root-definition" #f 71 26 71 45 ("root-definition" "set!" "def")}
        {Lisp-Entry "get-file-definition" #f 75 26 75 45 ("file-definition")}
        {Lisp-Entry "set-file-definition" #f 79 26 79 45 ("file-definition" "set!" "def")}
        {Lisp-Entry "get-file" #f 88 26 88 34 ()}
        {Lisp-Entry "get-moniker" #f 92 26 92 37 ()}
        {Lisp-Entry "get-title" #f 96 26 96 35 ()}
        {Lisp-Entry "get-category-name" #f 100 26 100 43 ()}
        {Lisp-Entry "get-name" #f 104 26 104 34 ()}
        {Lisp-Entry "get-line" #f 108 26 108 34 ()}
        {Lisp-Entry "get-column" #f 112 26 112 36 ()}
        {Lisp-Entry "get-definitions" #f 116 26 116 41 ()}
        {Lisp-Entry "get-image" #f 120 26 120 35 ()}
        {Lisp-Entry "present" #f 129 26 129 33 ()}
        {Lisp-Entry "present-name" #f 133 26 133 38 ()}
        {Lisp-Entry "present-identifier" #f 137 26 137 44 ()}
        {Lisp-Entry "present-detailed" #f 141 26 141 42 ("present-name")}
        {Lisp-Entry "edit" #f 150 26 150 30 ("rest")}
        {Lisp-Entry "edit-reference" #f 155 26 155 40 ("edit" "apply" "->string" "list" "get-application" "set-search-targets" "rest" "target")}
        {Lisp-Entry "insert-definition" #f 165 26 165 43 ("insert-self-definitions" "dynamic" "'dynamic" "get-state" "eq?" "unless" "insert-self" "row" "let" "sort?" "father" "tree")}
        {Lisp-Entry "insert-self" #f 171 29 171 40 ("self" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "present-name" "title" "dynamic" "'dynamic" "expanded" "'expanded" "insert-state" "if" "state" "get-definitions" "definitions" "get-image" "image" "let*" "father" "tree")}
        {Lisp-Entry "insert-self-definitions" #f 179 29 179 52 ("get-definitions" "insert-definitions" "sort?" "father" "tree")}
        {Lisp-Entry "insert-state" #f 183 29 183 41 ("expanded" "'expanded" "definitions")}
        {Lisp-Entry "insert-definitions" #f 187 11 187 29 ("insert-definition" "definition" "function" "for-each" "sort-definitions" "if" "ordered" "let" "sort?" "definitions" "father" "tree")}
        {Lisp-Entry "sort-definitions" #f 194 11 194 27 ("present-name" "definition" "function" "key:" "string<?" "sort" "definitions")}
        {Lisp-Entry "update-indexes" #f 203 26 203 40 ("references-index" "definitions-index")}}}})
"Catalog-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Catalog-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Catalog-Tester" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Catalog-Tester" #f 45 7 45 21 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-catalog" "invoke")}
        {Lisp-Entry "test-catalog" #f 61 11 61 23 ()}}}})
"Catalogs-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "tools" "Catalogs-Manager.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.tools.Catalogs-Manager" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Catalogs-Manager" #f 50 7 50 23 ("250" "statistics" "references?" "display-images?:" "toplevel-controls?:" "150" "width:" "multiple-selection?:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "name" "filled-column:" "catalogs" "document" "fill" "layout-type:" "content" "vscroll?:" "entry" "style:" "edge" "border-type:" "486" "599" "35" "2" "catalogs-border" "default?:" "on-update" ":form" "Event-Handler" "action-handler:" "22" "100" "7" "499" "Point" "position:" "title:" "update" "name:" "523" "603" "Dimension" "size:" "View")
        {Lisp-Entry "external-name" #f 67 16 67 29 ("catalogs-manager" "'catalogs-manager" "rest")}
        {Lisp-Entry "finish" #f 76 11 76 17 ("update-buttons" "view-catalogs" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 87 16 87 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 91 16 91 26 ()}
        {Lisp-Entry "host-position" #f 95 16 95 29 ("70" "90" "Point")}
        {Lisp-Entry "host-size" #f 99 16 99 25 ("423" "623" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 103 11 103 26 ("home")}
        {Lisp-Entry "resize" #f 112 11 112 17 ("catalogs-border" "'catalogs-border" "size-figure" "0" "update" "'update" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-change-active" #f 118 11 118 27 ("get-checked?" "set-active?" "get-user-data" "catalog" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-selection-change" #f 124 11 124 30 ("update-buttons" "evt")}
        {Lisp-Entry "view-catalogs" #f 133 18 133 31 ("get-indexed-catalogs" "list" "children:" "add-row" "get-statistics" "c2" "get-references?" "Tree-Label" "c1" "Tree-Node" "content-change-handler:" "user-data:" "get-active?" "checked?:" "get-name" "->string" "title:" "Check-Box" "c0" "on-change-active" "'on-change-active" "method-name:" "self" "target:" "Event-Handler" "new" "handler" "catalog" "for-each" "remove-every-row" "function" "with-update-locked" "catalogs" "'catalogs" "locate" "tree" "let")}
        {Lisp-Entry "get-indexed-catalogs" #f 149 11 149 31 ("get-application" "get-cataloguer" "get-catalogs" "Indexed-Catalog" "is?" "catalog" "function" "collect-if")}
        {Lisp-Entry "on-update" #f 155 18 155 27 ("update-selection" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-double-click" #f 161 11 161 26 ("update-selection" "function" ":wait" "with-cursor" "catalogs" "get-name" "case" "get-alt?" "alt?" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "update-selection" #f 171 11 171 27 ("invalidate-cell" "get-statistics" "get-cell-data" "set-title" "2" "Cell" "new" "cell" "update" "get-row" "get-user-data" "catalog" "let" "row" "function" "for-each" "get-row-count" "0" "naturals" "null?" "if" "effective-selection" "define" "get-selection" "selection" "catalogs" "'catalogs" "locate" "tree" "let*")}
        {Lisp-Entry "update-buttons" #f 188 11 188 25 ("0" ">" "update" "'update" "set-enabled?" "get-row-count" "count" "catalogs" "'catalogs" "locate" "tree" "let")}
        {Lisp-Entry "confirm-close" #f 199 11 199 24 ("save-session" "rest")}
        {Lisp-Entry "save-session" #f 203 11 203 23 ("Opened-Windows" "'Opened-Windows" "properties" "push-property" "get-size" "size:" "get-position" "position:" "external-name" "list" "info" "let")}}}})
"Catalogs-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "catalog" "Catalogs-Preferences.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.catalog.Catalogs-Preferences" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Catalogs-Preferences" #f 47 7 47 27 ("title:" "Preferences")
        {Lisp-Entry "main" #f 50 12 50 16 ("generate")}
        {Lisp-Entry "recolorize-on-save?" #f 51 12 51 31 ("generate")}
        {Lisp-Entry "can-rename-component?" #f 63 11 63 32 ()}
        {Lisp-Entry "can-delete-component?" #f 67 11 67 32 ()}
        {Lisp-Entry "can-move-component?" #f 71 11 71 30 ()}
        {Lisp-Entry "can-copy-component?" #f 75 11 75 30 ()}
        {Lisp-Entry "get-addable-classes" #f 79 11 79 30 ("Catalog-Configuration" "list")}
        {Lisp-Entry "get-addable-details" #f 84 11 84 30 ("references?" "active?" "85" "recursive?" "extensions" "directories" "output-file" "100" "type" "75" "name-info")}}}})
"Cataloguer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "catalog" "Cataloguer.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.catalog.Cataloguer" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Cataloguer" #f 45 7 45 17 ("Object")
        {Lisp-Entry "catalogs" #f 48 8 48 16 ()}
        {Lisp-Entry "get-catalogs" #f 56 18 56 30 ("catalogs")}
        {Lisp-Entry "get-catalog" #f 60 18 60 29 ("add-catalog" "create-catalog" "catalog" "error" "when" "not" "if" "catalogs" "'catalogs" "get-preferences" "find-component" "pref" "let" "find-catalog" "either" "report?" "report?:" "error?" "error?:" "name")}
        {Lisp-Entry "add-catalog" #f 71 18 71 29 ("list" "append!" "set!" "catalogs" "memq?" "unless" "catalog")}
        {Lisp-Entry "remove-catalog" #f 76 18 76 32 ("remove!" "set!" "catalogs" "memq?" "when" "catalog")}
        {Lisp-Entry "find-catalog" #f 81 18 81 30 ("catalogs" "get-name" "eq?" "catalog" "function" "find-if" "name")}
        {Lisp-Entry "for-each-catalog" #f 87 11 87 27 ("catalogs" "in-context?" "get-active?" "and" "when" "catalog" "function" "for-each" "list" "pair?" "if" "let" "proc" "context")}
        {Lisp-Entry "create-catalog" #f 100 11 100 25 ("report?:" "get-references-size" "get-definitions-size" "get-content-size" "get-references?" "get-active?" "get-recursive?" "get-extensions" "get-directories" "get-output-file" "get-name" "new" "catalog-class" "class" "get-type" "type" "let*" "report?" "pref")}
        {Lisp-Entry "catalog-class" #f 117 11 117 24 ("cdr" "autoload" "error" "not" "if" "get-preferences" "get-catalog-types" "assq" "pair" "let" "type")}
        {Lisp-Entry "save-catalogs" #f 129 18 129 31 ("catalogs" "save" "catalog" "function" "for-each")}
        {Lisp-Entry "get-context" #f 140 18 140 29 ("list" "symbol?" "if" "get-application" "get-catalog-context" "context" "let")}
        {Lisp-Entry "class-definition?" #f 152 11 152 28 ("Class-Entry" "is?" "object")}
        {Lisp-Entry "get-definitions" #f 156 18 156 33 ("get-output" "get-definitions" "put-sequence" "catalog" "function" "for-each-catalog" "List-Factory" "new" "fact" "let" "get-context" "context" "context:" "name")}
        {Lisp-Entry "get-definition" #f 164 18 164 32 ("car" "not-null?" "when" "get-definitions" "definitions" "let" "name")}
        {Lisp-Entry "get-category-definitions" #f 171 18 171 42 ("get-output" "get-category-definitions" "put-sequence" "catalog" "function" "for-each-catalog" "List-Factory" "new" "fact" "let" "get-context" "context" "context:" "name")}
        {Lisp-Entry "get-coalesced-definitions" #f 179 18 179 43 ("Category-Entry" "car" "is?" "length" "1" "=" "and" "if" "Constructor-Entry" "is-not?" "entry" "function" "collect-if" "coalesced" "get-definitions" "definitions" "let*" "get-context" "context" "context:" "name")}
        {Lisp-Entry "search-definitions" #f 190 18 190 36 ("get-output" "search-definitions" "put-sequence" "catalog" "function" "for-each-catalog" "List-Factory" "new" "fact" "let" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "get-context" "context" "context:" "name")}
        {Lisp-Entry "get-references" #f 198 18 198 32 ("get-output" "get-references" "put-sequence" "catalog" "function" "for-each-catalog" "List-Factory" "new" "fact" "let" "get-context" "context" "context:" "name")}
        {Lisp-Entry "get-file-entries" #f 206 18 206 34 ("get-output" "put" "when" "get-file-entry" "entry" "catalog" "function" "for-each-catalog" "List-Factory" "new" "fact" "let" "get-context" "context" "context:" "file")}
        {Lisp-Entry "get-completions" #f 221 18 221 33 ("get-output" "get-completions" "put-sequence" "catalog" "function" "for-each-catalog" "List-Factory" "new" "fact" "let" "get-context" "context" "context:" "name")}}}})
"Category-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Category-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Category-Doc" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Category-Doc" #f 45 7 45 19 ("Element-Doc")
        {Lisp-Entry "extends" #f 48 12 48 19 ("generate")}
        {Lisp-Entry "catalog" #f 51 8 51 15 ()}
        {Lisp-Entry "get-catalog" #f 59 11 59 22 ("catalog")}
        {Lisp-Entry "set-catalog" #f 63 11 63 22 ("children" "set-catalog" "child" "function" "for-each" "catalog" "set!" "cat")}
        {Lisp-Entry "update-indexes" #f 75 11 75 25 ("children" "update-indexes" "child" "function" "for-each" "nextmethod" "references-index" "definitions-index")}
        {Lisp-Entry "print-catalog" #f 83 11 83 24 ("children" "1" "+" "print-catalog" "child" "function" "for-each" "doc" "extends" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "present" #f 100 11 100 18 ("doc" "name" "format")}
        {Lisp-Entry "property-presentation" #f 109 16 109 37 ("nextmethod" "else" "extends" "field-name" "case" "property")}
        {Lisp-Entry "sort-components?" #f 115 11 115 27 ()}}}})
"Category-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Category-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Category-Entry" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Category-Entry" #f 46 7 46 21 ("Hierarchical-Entry")
        {Lisp-Entry "extends" #f 49 8 49 15 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("extends~self" "set!" "nextmethod" "definitions" "column" "line" "extends" "name" "qualified" "modifiers")}
        {Lisp-Entry "get-extends" #f 57 18 57 29 ("extends")}
        {Lisp-Entry "set-extends" #f 61 18 61 29 ("extends" "set!" "value")}
        {Lisp-Entry "present" #f 65 11 65 18 ("get-category-name")}
        {Lisp-Entry "update-indexes" #f 74 11 74 25 ("extends" "last" "update-index" "qualified" "function" "for-each" "nextmethod" "references-index" "definitions-index")}
        {Lisp-Entry "insert-self-definitions" #f 86 11 86 34 ("nextmethod" "insert-inherited" "insert-interfaces" "insert-ascendants" "sort?" "father" "tree")}
        {Lisp-Entry "collect-ascendants" #f 93 11 93 29 ("get-output" "extends" "get-extends" "for-each" "put" "get-list" "memq?" "not" "and" "get-qualified-category" "category" "when" "qualified" "function" "process" "letrec" "List-Factory" "new" "fact" "get-catalog" "catalog" "let")}
        {Lisp-Entry "collect-inherited" #f 107 11 107 28 ("get-definitions" "ascendant" "function" "map" "append" "apply" "ascendants")}
        {Lisp-Entry "insert-ascendants" #f 111 29 111 46 ("user-data:" "get-image" "present-name" "category" "function" "for-each" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "17" "row-height:" "collapsed" "'collapsed" "state:" "father:" "add-row" "row" "when" "collect-ascendants" "ascendants" "let" "father" "tree")}
        {Lisp-Entry "insert-interfaces" #f 120 29 120 46 ("father" "tree")}
        {Lisp-Entry "insert-interfaces-list" #f 124 11 124 33 ("get-extends" "for-each" "user-data:" "get-image" "present-name" "get-qualified-category" "interface" "qualified" "function" "insert" "letrec" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "17" "row-height:" "collapsed" "'collapsed" "state:" "father:" "add-row" "row" "get-catalog" "catalog" "let" "when" "interfaces" "title" "father" "tree")}
        {Lisp-Entry "insert-inherited" #f 142 11 142 27 ("insert-definitions" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "17" "row-height:" "collapsed" "'collapsed" "state:" "father:" "add-row" "row" "let" "when" "collect-inherited" "inherited" "collect-ascendants" "ascendants" "let*" "father" "tree")}}}})
"Category-Moniker"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "moniker" "Category-Moniker.jazz"} 1226584782
    {Lisp-Entry "jazz.library.moniker.Category-Moniker" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Category-Moniker" #f 46 7 46 23 ("Moniker")}
      {Lisp-Entry "Category-Moniker" #f 52 7 52 23 ("Moniker")
        {Lisp-Entry "category-name" #f 55 8 55 21 ()}
        {Lisp-Entry "construct-literal" #f 59 16 59 33 ("self" "new" "category-name" "context")}
        {Lisp-Entry "print" #f 63 11 63 16 ("category-name" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" #f 74 11 74 19 ("category-name")}
        {Lisp-Entry "get-file" #f 78 11 78 19 ("get-source")}
        {Lisp-Entry "get-protocol" #f 88 16 88 28 ("category" "'category")}
        {Lisp-Entry "new-moniker" #f 93 16 93 27 ("car" "self" "new" "list")}
        {Lisp-Entry "present" #f 97 11 97 18 ("category-name" "format")}
        {Lisp-Entry "initialize" #f 106 11 106 21 ("category-name" "set!" "nextmethod" "name")}
        {Lisp-Entry "get-source" #f 116 18 116 28 ("error" "category-name" "get-manifest-source" "either")}
        {Lisp-Entry "load-lines" #f 126 11 126 21 ("get-source" "load-lines" "rest")}
        {Lisp-Entry "save-lines" #f 130 11 130 21 ("get-source" "save-lines" "rest" "lines")}
        {Lisp-Entry "load-form" #f 134 11 134 20 ("get-source" "load-form")}}}})
"Cell-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Cell-Row.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.row.Cell-Row" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Cell-Row" #f 45 7 45 15 ("Value-Row")
        {Lisp-Entry "present" #f 53 11 53 18 ("get-col" "get-row" "format" "cell")}
        {Lisp-Entry "get-edited-value" #f 64 11 64 27 ("Cell" "new" "col" "row" "bind" "editor" "get-string-content" "read-delimited-string" "list" "let")}
        {Lisp-Entry "edit" #f 70 11 70 15 ("get-tree" "expand/collapse" "get-col" "value" "get-row" "self" "add-row" "edit-in-cell")}
        {Lisp-Entry "close-editor" #f 77 11 77 23 ("remove-every-son" "nextmethod")}
        {Lisp-Entry "in-edition?" #f 82 11 82 22 ("0" "get-sons" "cardinality" ">" "nextmethod" "or")}}}})
"Chapters-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "code" "Chapters-Browser.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.code.Chapters-Browser" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Chapters-Browser" #f 48 7 48 23 ("329" "width:" "title:" "on-selection-change" "Selection-Handler" "selection-handler:" "show-header?:" "chapters" "shown?:" "header" "content" "flat?:" "hscroll?:" "vscroll?:" "scroller" "on-update" "update" "on-toggle-sorted" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "sorted?" "tools" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "client" #f 51 12 51 18 ("set-client" "get-client")}
        {Lisp-Entry "external-name" #f 67 16 67 29 ("chapters-browser" "'chapters-browser" "rest")}
        {Lisp-Entry "host-icon" #f 76 16 76 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 80 16 80 26 ()}
        {Lisp-Entry "client-activate" #f 84 11 84 26 ("set-client" "Text-View" "is?" "if" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" #f 91 11 91 28 ("set-client")}
        {Lisp-Entry "get-tools-view" #f 100 11 100 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 104 11 104 24 ("acquire-focus" "chapters" "'chapters" "locate" "tree" "let")}
        {Lisp-Entry "get-sorted?" #f 114 11 114 22 ("sorted?" "'sorted?" "locate" "get-selected?")}
        {Lisp-Entry "on-toggle-sorted" #f 123 11 123 27 ("update" "evt")}
        {Lisp-Entry "on-update" #f 127 11 127 20 ("update" "evt")}
        {Lisp-Entry "on-selection-change" #f 131 11 131 30 ("head" "'head" "force-vertical:" "ensure-displayed" "ensure-displayed?:" "Cell" "Range$Cell$" "new" "set-selection" "client" "paragraph-length" "len" "get-col" "col" "row" "get-row" "get-user-data" "cdr" "pos" "let*" "when" "get-single-selection" "selection" "chapters" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "get-client" #f 150 18 150 28 ("client")}
        {Lisp-Entry "set-client" #f 154 18 154 28 ("update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update" #f 160 11 160 17 ("cardinality" "cast" "+" "cons" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "17" "row-height:" "state:" "father:" "add-row" "row" "collapsed" "'collapsed" "eq?" "state" "Bitmap-Resource" "image" "find-father-row" "father" "first?" "title" "header" "pos" "level" "bind" "info" "for-each" "previous-row" "get-root-row" "root-row" "expanded" "'expanded" "insert-item" "set!" "when" "first-row" "fourth" "key:" "string<?" "sort" "get-sorted?" "sorted" "get-remaining-chapters" "remaining" "get-first-chapter" "first" "get-chapters" "lst" "let*" "function" "with-update-locked" "remove-every-row" "client" "not" "if" "chapters" "'chapters" "locate" "tree" "let")}
        {Lisp-Entry "insert-item" #f 187 11 187 22 ("cardinality" "cast" "+" "0" "cons" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "Bitmap-Resource" "if" "image" "let" "title" "header" "pos" "level" "bind" "first?" "item" "state" "father" "tree")}
        {Lisp-Entry "find-father-row" #f 193 11 193 26 ("get-user-data" "car" "<" "continuation-return" "eq?" "if" "row" "for-each-ancestor" "return" "function" "continuation-capture" "when" "level" "previous-row" "root-row")}}}})
"Char-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Char-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Char-Tester" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Char-Tester" #f 45 7 45 18 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-char" "invoke")}
        {Lisp-Entry "test-char" #f 61 11 61 20 ()}}}})
"Check-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Check-Box.jazz"} 1227128961
    {Lisp-Entry "jazz.ui.view.Check-Box" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Check-Box" #f 48 7 48 16 ("View")
        {Lisp-Entry "box-size" #f 51 14 51 22 ("13")}
        {Lisp-Entry "checked?" #f 55 12 55 20 ("set-checked?" "get-checked?")}
        {Lisp-Entry "editable?" #f 56 12 56 21 ("set-editable?" "get-editable?")}
        {Lisp-Entry "focusable?" #f 57 12 57 22 ("set-focusable?" "get-focusable?")}
        {Lisp-Entry "color" #f 58 12 58 17 ("set-color" "get-color" "Black" "name:" "Color")}
        {Lisp-Entry "flat?" #f 59 12 59 17 ("generate")}
        {Lisp-Entry "tracking?" #f 62 8 62 17 ()}
        {Lisp-Entry "inside?" #f 63 8 63 15 ()}
        {Lisp-Entry "default-size" #f 66 11 66 23 ("16" "100" "Dimension")}
        {Lisp-Entry "get-sort-value" #f 70 11 70 25 ("title" "localize")}
        {Lisp-Entry "get-checked?" #f 79 18 79 30 ("checked?")}
        {Lisp-Entry "set-checked?" #f 83 18 83 30 ("invalidate-view" "set-modified?" "call-content-change" "checked?" "set!" "flag")}
        {Lisp-Entry "get-editable?" #f 90 18 90 31 ("editable?")}
        {Lisp-Entry "set-editable?" #f 94 18 94 31 ("editable?" "set!" "flag")}
        {Lisp-Entry "get-focusable?" #f 98 18 98 32 ("focusable?")}
        {Lisp-Entry "set-focusable?" #f 102 18 102 32 ("focusable?" "set!" "flag")}
        {Lisp-Entry "get-color" #f 106 18 106 27 ("color")}
        {Lisp-Entry "set-color" #f 110 18 110 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "change-state" #f 120 29 120 41 ("checked?" "not" "set-checked?" "reverse?")}
        {Lisp-Entry "process-change-state" #f 124 11 124 31 ("self" "process-action" "outline-view" "not" "if" "set-modified?" "shift-down?" "change-state")}
        {Lisp-Entry "text-extent" #f 137 11 137 22 ("font" "text-extent" "localize" "title" "let")}
        {Lisp-Entry "box-rect" #f 142 11 142 19 ("Rect" "new" "get-height" "v" "2" "0" "5" "title" "if" "box-size" "+" "get-width" "-" "quotient" "h" "text-extent" "extent" "let*")}
        {Lisp-Entry "draw" #f 154 11 154 15 ("draw-text" "color" "determine-color" "either" "set-text-color" "font" "set-font" "Focused-Selection" "cell" "row" "get-selection-mode" "memq?" "Tree-View" "outline-view" "is?" "rect" "text-v" "18" "text-h" "selected?:" "getf" "selected?" "let" "when" "3" "draw-check" "White" "Medium" "name:" "Color" "-2" "inflate-rect" "fill-rect" "rectangle" "'rectangle" "edges:" "outer:" "sunken" "'sunken" "inner:" "draw-edge" "flat?" "unless" "inside?" "tracking?" "and" "enabled?" "or" "grayed?" "+" "Rect" "new" "box-rect" "get-height" "box-v" "0" "2" "box-size" "get-width" "-" "quotient" "box-h" "not" "center?" "text-extent" "if" "extent" "localize" "title" "let*" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-check" #f 183 29 183 39 ("draw-check" "Black" "Dark" "name:" "Pen" "if" "set-pen" "checked?" "when" "grayed?" "v" "h" "surface")}
        {Lisp-Entry "key-press" #f 194 11 194 20 ("process-change-state" "case" "key")}
        {Lisp-Entry "mouse-down" #f 205 11 205 21 ("invalidate-view" "acquire-capture" "inside?" "tracking?" "set!" "enabled?" "when" "focus?:" "outline-select" "box-rect" "in-rect?" "not" "outline-view" "and" "if" "pos")}
        {Lisp-Entry "drag-move" #f 215 11 215 20 ("invalidate-view" "set!" "inside?" "neq?" "over-view?" "over?" "let" "tracking?" "when" "pos")}
        {Lisp-Entry "drag-up" #f 223 11 223 18 ("process-change-state" "acquire-focus" "focusable?" "inside?" "set!" "release-capture" "tracking?" "when" "rest" "pos")}
        {Lisp-Entry "property-presentation" #f 238 16 238 37 ("nextmethod" "else" "color" "checked?" "field-name" "case" "property")}}}})
"Check-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Check-Item.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Check-Item" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Check-Item" #f 45 7 45 17 ("Label-Item")
        {Lisp-Entry "checked?" #f 48 12 48 20 ("set-checked?" "get-checked?")}
        {Lisp-Entry "get-checked?" #f 56 18 56 30 ("checked?")}
        {Lisp-Entry "set-checked?" #f 60 18 60 30 ("invalidate-view" "checked?" "set!" "flag")}
        {Lisp-Entry "preferred-prefix-width" #f 70 11 70 33 ("0" "12" "checked?" "if")}
        {Lisp-Entry "draw-prefix" #f 79 11 79 22 ("Bitmap-Resource" "get-small-icons-cache" "draw-image" "2" "top" "5" "left" "get-application" "appl" "let" "checked?" "when" "context" "surface")}}}})
"Children-Descriptor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "descriptor" "Children-Descriptor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.descriptor.Children-Descriptor" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Children-Descriptor" #f 45 7 45 26 ("Component")
        {Lisp-Entry "get-class-descriptor" #f 54 16 54 36 ("Descriptors.Children-Descriptor")}}}})
"Children-Rights"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "security" "Children-Rights.jazz"} 1226584782
    {Lisp-Entry "jazz.library.security.Children-Rights" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Children-Rights" #f 44 7 44 22 ("Rights")}}})
"Children-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Children-Tree.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Children-Tree" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Children-Tree" #f 47 7 47 20 ("on-selection-change" ":self" "Event-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" ":icons" "portfolio:" "reorderable?:" "draggable?:" "Components-Tree")
        {Lisp-Entry "base" #f 50 12 50 16 ("set-base" "get-base")}
        {Lisp-Entry "details" #f 51 12 51 19 ("set-details" "get-details")}
        {Lisp-Entry "get-base" #f 63 18 63 26 ("base")}
        {Lisp-Entry "set-base" #f 67 18 67 26 ("base" "set!" "value")}
        {Lisp-Entry "get-details" #f 71 18 71 29 ("details")}
        {Lisp-Entry "set-details" #f 75 18 75 29 ("details" "set!" "value")}
        {Lisp-Entry "branch-changed" #f 84 11 84 25 ("update")}
        {Lisp-Entry "update" #f 93 11 93 17 ("insert-rows" "setup-columns" "function" "with-update-locked" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "setup-columns" #f 100 11 100 24 ("width:" "title:" "name:" "Tree-Label-Column" "class:" "self" "context:" "add-column" "set-width" "set-title" "set-name" "get-node-column" "column" "begin" "when" "detail-presentation" "title" "category-field" "property" "let*" "filled?" "width" "name" "bind" "detail" "function" "for-each" "first?" "node-column" "get-name" "details" "null?" "not" "or" "if" "preserve-node-column?:" "remove-columns" "set-filled-column" "get-addable-base" "client" "essay" "base" "set!" "get-header" "header" "let")}
        {Lisp-Entry "insert-rows" #f 125 11 125 22 ("update-selection" "insert-components" "get-recursive-details?" "recursive?" "let" "client" "when" "remove-every-row" "selected-components" "expand-state")}
        {Lisp-Entry "insert-components" #f 133 11 133 28 ("get-presentation" "key:" "<" "sort" "sort-components?" "if" "insert-component" "Group" "is?" "unless" "child" "function" "for-each" "get-components" "components" "let" "recursive?" "father" "component")}
        {Lisp-Entry "insert-component" #f 143 29 143 45 ("insert-components" "user-data:" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "cons" "children" "title" "value" "property" "filled?" "width" "name" "Tree-Label" "if" "detail" "function" "map" "labels" "image:" "title:" "Tree-Node" "new" "node" "get-component-image" "ni" "present-property" "nt" "read-property" "nv" "category-field" "np" "car" "nn" "let*" "filled" "name-info" "set!" "not" "is?" "based?" "rest" "first" "bind" "details" "base" "and" "when" "row" "let" "recursive?" "father" "component")}
        {Lisp-Entry "present-location" #f 171 11 171 27 ("get-presentation" "localize" "ascendant" "function" "map" "join" "null?" "if" "collect-ascendants" "cdr" "ascendants" "let" "component")}
        {Lisp-Entry "on-designer" #f 183 11 183 22 ("value:" "property:" "component:" "property-change" ":property-change" "child-remove" ":child-remove" "parent:" "child:" "get-property" "child-add" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "child-add" #f 190 11 190 20 ("insert-component" "function" "with-update-locked" "client" "neq?" "Group" "is?" "or" "unless" "parent" "child")}
        {Lisp-Entry "child-remove" #f 197 11 197 23 ("remove-row" "function" "with-update-locked" "when" "component-row" "row" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "child")}
        {Lisp-Entry "property-change" #f 206 11 206 26 ("invalidate-cell" "set-title" "present-property" "title" "get-cell-data" "data" "Cell" "new" "cell" "let*" "get-user-data" "eq?" "rank" "row" "function" "for-each-visible-row" "when" "car" "key:" "field-name" "details" "find" "col" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "value" "property" "component")}}}})
"Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Chooser.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Chooser" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "Chooser" #f 47 7 47 14 ("on-cancel" "310" "cancel" "on-ok" ":host" "Event-Handler" "action-handler:" "24" "80" "172" "220" "title:" "ok" "116" "404" "44" "-2" "content" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title" "name:" "206" "400" "Dimension" "size:" "View")
        {Lisp-Entry "resize" #f 64 11 64 17 ("cancel" "'cancel" "ok" "'ok" "move-figure" "content" "'content" "locate" "size-figure" "nextmethod" "dv" "dh")}}}})
"Class-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "tools" "Class-Browser.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.tools.Class-Browser" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Class-Browser" #f 50 7 50 20 ("419" "width:" "display-images?:" "on-double-click" "double-click-handler:" ":icons" "portfolio:" "multiple-selection?:" "classes" "document" "562" "391" "35" "classes-border" "on-browse" "action-handler:" "22" "120" "7" "272" "title:" "browse" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "focus-selects-all?:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "left-padding:" "name" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "border-type:" "19" "250" "9" "2" "Point" "position:" "name-border" "name:" "599" "395" "Dimension" "size:" "View")
        {Lisp-Entry "text" #f 53 12 53 16 ()}
        {Lisp-Entry "host-icon" #f 77 16 77 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 81 16 81 26 ()}
        {Lisp-Entry "host-position" #f 85 16 85 29 ("20" "90" "Point")}
        {Lisp-Entry "host-size" #f 89 16 89 25 ("600" "395" "Dimension")}
        {Lisp-Entry "install-in-host" #f 93 11 93 26 ("name" "'name" "locate" "acquire-focus" "nextmethod" "host")}
        {Lisp-Entry "get-text" #f 103 18 103 26 ("name" "'name" "locate" "get-string-content")}
        {Lisp-Entry "set-text" #f 107 18 107 26 ("either" "name" "'name" "locate" "set-string-content" "value")}
        {Lisp-Entry "guest-actions" #f 117 11 117 24 ("nextmethod" "class-browser" "'class-browser" "find-actions" "cons")}
        {Lisp-Entry "resize" #f 127 11 127 17 ("classes-border" "'classes-border" "size-figure" "0" "browse" "'browse" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-browse" #f 133 11 133 20 ("root:" "browse-inheritance-tree" "function" ":wait" "with-cursor" "name" "'name" "locate" "get-string-content" "format" "message-box" "not" "if" "get-root-class" "root" "let" "evt")}
        {Lisp-Entry "on-return-press" #f 142 11 142 26 ("on-browse" "evt")}
        {Lisp-Entry "on-double-click" #f 146 11 146 26 ("type-name" "edit-definitions" "get-application" "appl" "get-user-data" "type" "get-row" "row" "when" "get-single-selection" "selection" "get-sender" "tree" "let*" "evt")}
        {Lisp-Entry "get-root-class" #f 156 11 156 25 ("autoload" "get-autoload" "when" "string->symbol" "let" "Object" "empty-string?" "if" "get-string-content" "string" "name" "'name" "locate" "text" "let*")}
        {Lisp-Entry "browse-inheritance-tree" #f 171 11 171 34 ("remove-every-row" "with-update-locked" "symbol->string" "key:" "type-descendants" "string<?" "sort" "subtype" "function" "for-each" "downward" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "essay" "father" "type-ascendant" "ascendant" "type-name" "->string" "title" "expanded" "'expanded" "state" "let*" "type" "upward" "define" "classes" "'classes" "locate" "tree" "let" "Object" "root" "root:")}
        {Lisp-Entry "selected-categories" #f 201 11 201 30 ("get-row" "get-user-data" "rank" "function" "map" "get-selection" "selection" "classes" "'classes" "locate" "tree" "let*")}
        {Lisp-Entry "selected-files" #f 209 11 209 25 ("selected-categories" "type-name" "get-manifest-source" "category" "function" "collect")}}}})
"Class-Browser-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "tools" "Class-Browser-Actions.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.tools.Class-Browser-Actions" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "Class-Browser-Actions" #f 45 7 45 28 ("Actions")}}})
"Class-Descriptor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "descriptor" "Class-Descriptor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.descriptor.Class-Descriptor" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Class-Descriptor" #f 45 7 45 23 ("Component")
        {Lisp-Entry "title" #f 48 12 48 17 ("generate")}
        {Lisp-Entry "image" #f 49 12 49 17 ("generate")}
        {Lisp-Entry "name-prohibited?" #f 50 12 50 28 ("generate")}
        {Lisp-Entry "name-mandatory?" #f 51 12 51 27 ("generate")}
        {Lisp-Entry "name-unicity?" #f 52 12 52 25 ("generate")}
        {Lisp-Entry "get-class-descriptor" #f 61 16 61 36 ("Descriptors.Class-Descriptor")}}}})
"Class-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Class-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Class-Doc" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Class-Doc" #f 45 7 45 16 ("Category-Doc")
        {Lisp-Entry "implements" #f 48 12 48 22 ("generate")}
        {Lisp-Entry "print-catalog" #f 57 11 57 24 ("children" "1" "+" "print-catalog" "child" "function" "for-each" "doc" "implements" "extends" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "present" #f 73 11 73 18 ("name" "format")}
        {Lisp-Entry "get-class-image" #f 82 16 82 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 86 16 86 37 ("nextmethod" "else" "implements" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 92 11 92 37 ("implements" "extends" "package-name")}}}})
"Class-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Class-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Class-Entry" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Class-Entry" #f 45 7 45 18 ("Category-Entry")
        {Lisp-Entry "implements" #f 48 8 48 18 ()}
        {Lisp-Entry "construct-literal" #f 52 16 52 33 ("self" "new" "definitions" "column" "line" "implements" "extends" "name" "modifiers" "context")}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("implements~self" "set!" "nextmethod" "definitions" "column" "line" "implements" "extends" "name" "qualified" "modifiers")}
        {Lisp-Entry "get-implements" #f 61 18 61 32 ("implements")}
        {Lisp-Entry "set-implements" #f 65 18 65 32 ("implements" "set!" "value")}
        {Lisp-Entry "print-catalog" #f 69 11 69 24 ("definitions" "1" "+" "print-catalog" "definition" "function" "for-each" "column" "line" "implements" "extends" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 80 11 80 20 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" #f 89 11 89 25 ("implements" "last" "update-index" "qualified" "function" "for-each" "nextmethod" "references-index" "definitions-index")}
        {Lisp-Entry "insert-interfaces" #f 101 11 101 28 ("implements" "insert-interfaces-list" "father" "tree")}}}})
"Class-Rights"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "security" "Class-Rights.jazz"} 1226584782
    {Lisp-Entry "jazz.library.security.Class-Rights" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Class-Rights" #f 44 7 44 19 ("Rights")
        {Lisp-Entry "model" #f 47 12 47 17 ("generate")}
        {Lisp-Entry "print" #f 55 11 55 16 ("model" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-model-class" #f 66 18 66 33 ("model" "autoload")}
        {Lisp-Entry "find-component-rights" #f 75 18 75 39 ("get-ancestry" "self" "cdr" "when" "car" "find-child-rights" "child-rights" "let" "null?" "if" "ancestry" "rights" "function" "proc" "letrec" "component" "reference")}
        {Lisp-Entry "children-rights" #f 91 18 91 33 ("children" "'children" "find-component")}
        {Lisp-Entry "child-rights" #f 95 18 95 30 ("get-children" "when" "children-rights" "children" "let")}
        {Lisp-Entry "find-child-rights" #f 101 18 101 35 ("child-rights" "get-model-class" "is?" "child-right" "function" "find-if" "component")}
        {Lisp-Entry "properties-rights" #f 112 18 112 35 ("properties" "'properties" "find-component")}
        {Lisp-Entry "property-rights" #f 116 18 116 33 ("get-children" "when" "properties-rights" "properties" "let")}
        {Lisp-Entry "filter-properties" #f 122 18 122 35 ("can-access?" "field-name" "get-name" "eq?" "and" "some?" "property" "function" "collect-if" "property-rights" "property-rigths" "let" "properties")}}}})
"Classpath-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Classpath-Row.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.row.Classpath-Row" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Classpath-Row" #f 45 7 45 20 ("String-Row")
        {Lisp-Entry "present" #f 53 11 53 18 ("else" "join" "List" "is?" "not" "nullable?" "and" "cond" "value")}
        {Lisp-Entry "get-edited-value" #f 64 11 64 27 ("split" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"Client-Surface"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "Client-Surface.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.Client-Surface" #f 38 9 38 39 ("jazz")
      {Lisp-Entry "Client-Surface" #f 47 7 47 21 ("Surface")
        {Lisp-Entry "window" #f 50 8 50 14 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("get-handle" "GetDC" "nextmethod" "window" "set!" "wnd")}
        {Lisp-Entry "destroy-hdc" #f 59 11 59 22 ("hdc" "window" "get-handle" "ReleaseDC")}}}})
"CoError"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "toconvert" "CoError.jazz"} 1226584783
    {Lisp-Entry "jazz.kernel.runtime.CoError" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "CoError" #f 44 7 44 14 ("Object" "get-errorinfo-description" "Error")
        {Lisp-Entry "hresult" #f 47 8 47 15 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("get-coerror-message" "set-message" "hresult~self" "set!" "nextmethod" "message/com-interface" "hresult")}
        {Lisp-Entry "get-hresult" #f 56 18 56 29 ("hresult")}
        {Lisp-Entry "get-message" #f 60 11 60 22 ("hresult" "format" "message" "either")}
        {Lisp-Entry "get-coerror-message" #f 65 11 65 30 ("get-errorinfo-message" "string?" "if" "message/com-interface" "hresult")}
        {Lisp-Entry "get-errorinfo-message" #f 71 11 71 32 ("get-errorinfo-description" "format" "com-interface" "hresult")}
        {Lisp-Entry "Object" #f 82 17 82 23 ()}}}})
"CoInterface"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "toconvert" "CoInterface.jazz"} 1226584783
    {Lisp-Entry "jazz.kernel.runtime.CoInterface" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "CoInterface" #f 44 7 44 18 ("Object")
        {Lisp-Entry "print" #f 47 11 47 16 ("function" "self" "print-unreadable" "readably" "printer")}}}})
"CoObject"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "toconvert" "CoObject.jazz"} 1226584783
    {Lisp-Entry "jazz.kernel.runtime.CoObject" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "CoObject" #f 44 7 44 15 ("Object")
        {Lisp-Entry "print" #f 47 11 47 16 ("function" "self" "print-unreadable" "readably" "printer")}}}})
"Code-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Code-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Code-Entry" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Code-Entry" #f 45 7 45 17 ("Hierarchical-Entry")
        {Lisp-Entry "type" #f 48 8 48 12 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("type~self" "set!" "nextmethod" "definitions" "column" "line" "type" "name")}
        {Lisp-Entry "get-type" #f 56 18 56 26 ("type")}}}})
"Code-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Code-Explorer.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Code-Explorer" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Code-Explorer" #f 48 7 48 20 ("Text-Explorer")
        {Lisp-Entry "backward-expr" #f 51 26 51 39 ("string" "'string" "kind" "set!" "backward-word" "when")}
        {Lisp-Entry "forward-expr" #f 57 26 57 38 ("string" "'string" "kind" "set!" "forward-word" "when")}
        {Lisp-Entry "collect-backward-exprs" #f 63 18 63 40 ("get-mark" "cons" "set!" "backward-expr" "while" "list" "let")}
        {Lisp-Entry "collect-forward-exprs" #f 70 18 70 39 ("get-output" "decrease!" "get-mark" "put" "forward-expr" "0" ">=" "and" "while" "List-Factory" "new" "fact" "let" "n")}}}})
"Code-Location"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Code-Location.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Code-Location" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Code-Location" #f 45 7 45 20 ("Object")
        {Lisp-Entry "edit" #f 48 26 48 30 ("rest")}}}})
"Code-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "syntax" "Code-Syntax.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.syntax.Code-Syntax" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Code-Syntax" #f 45 7 45 18 ("Text-Syntax")}}})
"Code-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Code-Text-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Code-Text-Actions" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Code-Text-Actions" #f 46 7 46 24 ("paste&next-aux" "paste&stay-aux" "edit-references-aux" "edit-definitions-aux" "on-paste&next" "paste&next" "F2" "on-paste&stay" "paste&stay" "F5" "on-recolorize-syntax" "recolorize-syntax" "on-update-catalog" "update-catalog" "Up" "on-exit-composite" "exit-composite" "Down" "on-enter-composite" "enter-composite" "Right" "on-forward" "forward-composite" "Left" ":alt" ":control" "on-backward" "backward-composite" ":shift" "on-edit-references" "edit-references" "F12" "Shortcut" "shortcut:" "on-edit-definitions" ":focus" "Event-Handler" "action-handler:" "edit-definitions" "name:" "Actions")}}})
"Code-Text-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Code-Text-Event.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Code-Text-Event" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Code-Text-Event" #f 45 7 45 22 ("Text-Event")}}})
"Code-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Code-Text-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Code-Text-Preferences" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Code-Text-Preferences" #f 43 7 43 28 ("Text-Preferences")}}})
"Code-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Code-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Code-Text-View" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Code-Text-View" #f 54 7 54 21 ("12" "left-padding:" "Code" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Text-View")
        {Lisp-Entry "mouse-copy-selection" #f 57 8 57 28 ()}
        {Lisp-Entry "new-syntax" #f 64 11 64 21 ("Code-Syntax" "new")}
        {Lisp-Entry "host-workspaces" #f 73 11 73 26 ("debugger" "text")}
        {Lisp-Entry "tab-press" #f 82 11 82 20 ("tabulate" "insert-char" "get-end" "get-start" "get-row" "=" "empty-selection?" "nextmethod" "accepts-returns?" "not" "has-completion?" "or" "if" "modifiers" "key")}
        {Lisp-Entry "backspace-press" #f 91 11 91 26 ("complete-current" "when" "insert-char/backspace" "completion-active?" "not" "if" "get-start" "previous-cell" "previous" "let" "word?" "word?:" "key")}
        {Lisp-Entry "char-press" #f 99 11 99 21 ("show-arguments" "eqv?" "when" "flash-matching-character" "nextmethod" "translated" "key")}
        {Lisp-Entry "mouse-down" #f 106 11 106 21 ("nextmethod" "get-selection" "alt-down?" "essay" "mouse-copy-selection" "set!" "end-completion" "pos")}
        {Lisp-Entry "drag-up" #f 116 11 116 18 ("set!" "mouse-insert" "set-selection" "get-string" "copy" "get-start" "expr-range" "selection" "has-selection?" "if" "range" "let*" "alt-down?" "mouse-copy-selection" "and" "when" "nextmethod" "rest" "pos")}
        {Lisp-Entry "select-outer" #f 126 11 126 23 ("nextmethod" "end-completion")}
        {Lisp-Entry "context-menu" #f 131 11 131 23 ("get-context-menu" "track-popup-menu" "edit-references" "edit-definitions" "move-caret:" "context-menu-click" "always" "'always" "else" "never" "'never" "outside-selection" "'outside-selection" "not" "and" "cond" "move-caret" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "pos")}
        {Lisp-Entry "focus-actions" #f 149 11 149 24 ("nextmethod" "code-text" "'code-text" "find-actions" "cons")}
        {Lisp-Entry "explorer-class" #f 159 11 159 25 ("Code-Explorer")}
        {Lisp-Entry "backward-compound" #f 168 11 168 28 ("backward-expr")}
        {Lisp-Entry "forward-compound" #f 172 11 172 27 ("forward-expr")}
        {Lisp-Entry "upward-compound" #f 176 11 176 26 ("exit-composite")}
        {Lisp-Entry "downward-compound" #f 180 11 180 28 ("enter-composite")}
        {Lisp-Entry "on-backward" #f 184 18 184 29 ("backward-expr" "evt")}
        {Lisp-Entry "on-forward" #f 188 18 188 28 ("forward-expr" "evt")}
        {Lisp-Entry "on-enter-composite" #f 192 18 192 36 ("enter-composite" "evt")}
        {Lisp-Entry "on-exit-composite" #f 196 18 196 35 ("exit-composite" "evt")}
        {Lisp-Entry "forward-expr" #f 200 29 200 41 ("get-range" "set-selection" "forward-expr" "when" "get-end" "end:" "self" "explorer-class" "new" "expl" "let")}
        {Lisp-Entry "backward-expr" #f 206 29 206 42 ("get-range" "set-selection" "backward-expr" "when" "get-start" "start:" "self" "explorer-class" "new" "expl" "let")}
        {Lisp-Entry "enter-composite" #f 212 29 212 44 ("set-caret" "enter-composite" "when" "get-end" "end:" "get-start" "start:" "self" "explorer-class" "new" "expl" "let")}
        {Lisp-Entry "exit-composite" #f 218 29 218 43 ("set-caret" "exit-list" "when" "end:" "get-end" "start:" "self" "explorer-class" "new" "expl" "let")}
        {Lisp-Entry "move-caret" #f 224 11 224 21 ("end-completion" "nextmethod" "shift?" "direction" "pos")}
        {Lisp-Entry "get-context" #f 234 26 234 37 ()}
        {Lisp-Entry "header-string?" #f 238 11 238 25 ("last" "first" "eqv?" "2" "string-length" ">=" "string?" "and" "form")}
        {Lisp-Entry "edition-workspace" #f 245 29 245 46 ()}
        {Lisp-Entry "on-edit-definitions" #f 249 11 249 30 ("get-context" "context:" "current-history-item" "history-item:" "edit-definitions" "standardize-form" "else" "edition-workspace" "workspace:" "edit-document" "file?" "string-length" "-" "1" "subseq" "edit-filename" "header-string?" "cond" "when" "get-application" "appl" "current-expr" "form" "let" "evt")}
        {Lisp-Entry "on-edit-references" #f 262 11 262 29 ("get-context" "context:" "current-history-item" "history-item:" "edit-references" "standardize-form" "when" "get-application" "appl" "current-expr" "form" "let" "evt")}
        {Lisp-Entry "standardize-form" #f 270 11 270 27 ("else" "dispatch->name" "dispatch?" "tag->name" "tag?" "cond" "form")}
        {Lisp-Entry "on-add-to-favorites" #f 276 11 276 30 (":symbol" "list" "Favorite-Symbol" "Favorites-Manager" "singleton-palette" "get-guest" "add-to-favorites" "when" "current-expr" "form" "let" "evt")}
        {Lisp-Entry "expr-at" #f 282 29 282 36 ("pos")}
        {Lisp-Entry "edit-symbol-class" #f 286 29 286 46 ("symbol")}
        {Lisp-Entry "edit-definitions" #f 290 21 290 37 ("definitions:" "history-item:" "Definitions-Menu" "new" "track-popup-menu" "car" "edit" "add-history" "bell" "0" "length" "case" "get-context" "context:" "get-coalesced-definitions" "list" "standardize-form" "current-history-item" "item" "get-cataloguer" "cataloguer" "appl" "let*" "else" "edit-document" "file?" "string-length" "-" "1" "subseq" "get-application" "edit-filename" "header-string?" "cond" "when" "view->text" "expr-at" "form" "let" "pos")}
        {Lisp-Entry "edit-references" #f 310 21 310 36 ("definitions:" "target:" "history-item:" "References-Menu" "new" "track-popup-menu" "else" "car" "edit-reference" "add-history" "1" "bell" "0" "length" "case" "get-context" "context:" "get-references" "list" "standardize-form" "current-history-item" "item" "get-cataloguer" "cataloguer" "get-application" "appl" "let*" "when" "view->text" "expr-at" "form" "let" "pos")}
        {Lisp-Entry "current-history-item" #f 330 11 330 31 ("History-File-Item" "History-Document-Item" "new" "when" "get-frame" "frame" "not" "if" "get-moniker" "moniker" "get-selection" "selection" "let")}
        {Lisp-Entry "save-content" #f 345 11 345 23 ("update-catalog" "nextmethod" "moniker")}
        {Lisp-Entry "on-update-catalog" #f 356 18 356 35 ("update-catalog" "evt")}
        {Lisp-Entry "update-catalog" #f 360 11 360 25 ("user-message" "get-moniker" "update-file" "bell" "not" "if" "find-catalog" "catalog" "let")}
        {Lisp-Entry "find-catalog" #f 369 11 369 23 ("get-catalog" "car" "entry" "not-null?" "get-application" "get-cataloguer" "get-file-entries" "entries" "when" "get-moniker" "moniker" "let")}
        {Lisp-Entry "on-recolorize-syntax" #f 384 18 384 38 ("recolorize-syntax" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "recolorize-syntax" #f 390 18 390 35 ("recoloring?:" "colorize-syntax" "uncolorize-all")}
        {Lisp-Entry "uncolorize-all" #f 395 11 395 25 ("get-length" "0" "naturals" "uncolorize-row" "for-each")}
        {Lisp-Entry "preferences" #f 399 29 399 40 ()}
        {Lisp-Entry "syntax-targets" #f 403 29 403 43 ()}
        {Lisp-Entry "syntax-automata" #f 407 29 407 44 ()}
        {Lisp-Entry "compute-syntax-targets" #f 411 29 411 51 ()}
        {Lisp-Entry "compute-syntax-automata" #f 415 29 415 52 ("c-constituent?" "self" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "colorize-syntax" #f 419 11 419 26 ("colorize-entries" "when" "text-beginning" "colorize-syntax-from" "entries?" "entries?:" "recoloring?" "recoloring?:")}
        {Lisp-Entry "colorize-syntax-from" #f 425 11 425 31 ("finish-current" "when" "colorize-type" "set!" "string-length" "+" "end" "Cell" "new" "start" "col" "row" "type" "target" "bind" "car" "info" "while" "0" "get-limit" "get-paragraphs" "syntax-automata" "automata-search" "found" "syntax-targets" "targets" "self" "new-colorizer" "not" "essay" "colorizer" "let" "recoloring?" "pos")}
        {Lisp-Entry "apply-coloring" #f 440 21 440 35 ("apply-style" "not" "if" "style-name" "end" "start" "colorizer")}
        {Lisp-Entry "colorize-type" #f 446 29 446 42 ("recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "colorize-balanced-comment" #f 450 29 450 54 ("set!" "cdr" "continuation-return" "apply-coloring" "2" "+" "Cell" "new" "balanced-comment-backward" "'balanced-comment-backward" "eq?" "if" "col" "row" "type" "target" "bind" "car" "info" "let" "while" "return" "function" "continuation-capture" "style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "colorize-balanced-comment-backward" #f 464 21 464 55 ("cdr" "apply-coloring" "eq?" "type" "target" "pos" "bind" "reverse?:" "position:" "'open" "'close" "user-data:" "make-search-context" "list" "text-multisearch" "let" "when" "close" "close:" "open" "open:" "recolorize?" "style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "colorize-line-comment" #f 474 21 474 42 ("car" "second" "=" "while" "cdr" "set!" "row" "3" "+" "paragraph-length" "get-row" "Cell" "new" "apply-coloring" "not" "if" "2" "next-pos" "get-char" "eqv?" "and" "title?" "let" "title-char" "title-style" "line-style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "colorize-keyword" #f 487 21 487 37 ("cdr" "apply-coloring" "style" "colorizer" "end" "start" "found")}
        {Lisp-Entry "find-specifier-end" #f 492 11 492 29 ("Cell" "new" "when" "position" "'position" "return:" "start:" "find-balanced" "eqv?" "or" "element" "nxt" "let" "cardinality" "1" "+" ">=" "unless" "paragraph-string" "str" "get-col" "col" "get-row" "row" "let*" "start")}
        {Lisp-Entry "recolorize-text" #f 504 11 504 26 ("finish-current" "colorize-type" "string-length" "end" "col" "row" "car" "info" "while" "get-col" "get-paragraphs" "syntax-automata" "automata-search" "found" "self" "new-colorizer" "colorizer" "uncolorize-row" "for-each" "1" "+" "naturals" "range" "set!" "eq?" "type" "target" "bind" "reverse?:" "position:" "close" "'close" "open" "'open" "user-data:" "make-search-context" "list" "text-multisearch" "opening" "when" "syntax-targets" "targets" "0" "get-row" "Cell" "new" "pos" "let" "end-row" "start")}
        {Lisp-Entry "colorize-entries" #f 528 26 528 42 ("colorize-entry" "for-each" "when" "get-parsed-entries" "entries" "let")}
        {Lisp-Entry "get-parsed-entries" #f 534 29 534 47 ("get-definitions" "get-controller" "get-moniker-time" "get-time" "time->seconds" "=" "car" "file-entry" "not-null?" "c" "context:" "get-file-entries" "entries" "get-application" "get-cataloguer" "cataloguer" "get-modified?" "not" "file?" "and" "when" "get-moniker" "moniker" "let")}
        {Lisp-Entry "colorize-entry" #f 546 11 546 25 ("get-definitions" "for-each" "get-implements" "get-extends" "colorize-entry" "class-of" "Class-Entry" "equal?" "Definition" "'Definition" "stylize" "get-limit" "<=" "when" "string-length" "+" "end" "Cell" "new" "start" "get-column" "column" "get-line" "line" "get-name" "name" "let*" "function" "proc" "letrec" "entry")}
        {Lisp-Entry "recolorize-entries" #f 565 18 565 36 ("colorize-entry" "for-each" "entries?:" "colorize-syntax" "uncolorize-all" "when" "get-parsed-entries" "entries" "let")}
        {Lisp-Entry "on-paste&stay" #f 578 18 578 31 ("paste&stay" "evt")}
        {Lisp-Entry "on-paste&next" #f 582 18 582 31 ("down-arrow-move" "paste&stay" "evt")}
        {Lisp-Entry "paste&stay" #f 587 11 587 21 ("set-caret" "paste-clipboard" "get-start" "pos" "let")}
        {Lisp-Entry "read-text-forms" #f 598 11 598 26 ("eof-object?" "read-until" "reader" "function" "jazz-readtable" "readtable:" "init:" "list" "call-with-input-string" "get-string" "either" "let" "console?" "console?:" "string" "string:" "range")}
        {Lisp-Entry "offset-pos/range" #f 605 11 605 27 ("get-col" "Cell" "+" "Range$Cell$" "new" "get-end" "get-start" "get-row" "0" "=" "if" "range" "pos")}
        {Lisp-Entry "evaluate-forms" #f 618 29 618 43 ("rest")}
        {Lisp-Entry "tabulate" #f 627 26 627 34 ("subseq" "insert-string" "position" "'position" "return:" "whitespace?" "not" "c" "function" "find-if" "rank" "1" "-" "paragraph-string" "line" "=" "0" ">" "and" "when" "get-col" "col" "get-row" "row" "get-start" "pos" "let*" "selected-lines" "tabulate-line" "untabulate-line" "shift-down?" "for-each" "has-selection?" "if")}
        {Lisp-Entry "tabulate-line" #f 642 29 642 42 ("string" "list" "0" "Cell" "Range$Cell$" "new" "replace-text" "row")}
        {Lisp-Entry "untabulate-line" #f 647 11 647 26 ("list" "1" "Range$Cell$" "replace-text" "0" "Cell" "new" "get-char" "space/tab?" "when" "row")}
        {Lisp-Entry "space/tab?" #f 653 11 653 21 ("memq?" "c")}
        {Lisp-Entry "tabulate-lines" #f 657 26 657 40 ("end" "start")}
        {Lisp-Entry "auto-complete?" #f 666 11 666 25 ()}
        {Lisp-Entry "completion-name" #f 670 11 670 26 ("either" "get-symbol-string" "string-append" "or" "0" "char-backward" "string" "keyword" "symbol" "get-kind" "memq?" "backward-expr" "and" "when" "end:" "start:" "self" "explorer-class" "new" "expl" "string-delimiter?" "c" "not" "previous-cell" "prev" "let" "get-end" "has-selection?" "if" "get-char" "syntax" "text-constituent?" "unless" "postfix" "pos")}
        {Lisp-Entry "symbol-completions" #f 686 11 686 29 ("cons" "set!" "->string" "compare-n" "when" "cdr" "favorite" "pair" "function" "for-each" "string-length" "length" "get-context" "context:" "get-completions" "completions" "not" "get-application" "get-cataloguer" "cataloguer" "let" "numeric?" "if" "favorites" "name")}
        {Lisp-Entry "show-arguments" #f 707 29 707 43 ()}
        {Lisp-Entry "cursor-update" #f 716 11 716 24 (":finger" "set-cursor" "show-text-cursor" "nextmethod" "alt-down?" "not" "if" "pos")}
        {Lisp-Entry "mouse-copy" #f 723 11 723 21 ("mouse-insert" "get-string" "copy" "let" "1" "get-start" "-" "set-start" "control-down?" "expr-range" "range" "view->text" "cell" "let*" "when" "destination" "pos")}
        {Lisp-Entry "expr-range" #f 735 29 735 39 ("pos")}
        {Lisp-Entry "left-arrow-move" #f 744 11 744 26 ("nextmethod" "convert-completion" "word?" "extend?")}
        {Lisp-Entry "right-arrow-move" #f 749 11 749 27 ("nextmethod" "convert-completion" "word?" "extend?")}
        {Lisp-Entry "up-arrow-move" #f 754 11 754 24 ("nextmethod" "convert-completion" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" #f 759 11 759 26 ("nextmethod" "convert-completion" "scroll?" "extend?")}
        {Lisp-Entry "on-tabify" #f 769 11 769 20 ("tabify" "evt")}
        {Lisp-Entry "tabify" #f 773 11 773 17 ("1" "get-end" "+" "get-start" "get-row" "naturals" "tabify-line" "for-each")}
        {Lisp-Entry "tabify-line" #f 778 11 778 22 ("make-string" "append!" "list" "Cell" "Range$Cell$" "new" "replace-text" "modulo" "spaces" "tab-size" "/" "floor" "tabs" "char->column" "column" "0" ">" "and" "when" "position" "'position" "return:" "whitespace?" "not" "c" "function" "find-if" "char" "paragraph-string" "line" "let*" "row")}
        {Lisp-Entry "flash-matching-character" #f 796 11 796 35 ("get-start" "flash-character" "backward-expr" "if" "start:" "self" "explorer-class" "new" "expl" "bell" "err" "Explore-Error" "catch" "get-char" "flash-character?" "get-end" "previous-cell" "pos" "let" "at-beginning?" "not" "empty-selection?" "and" "when")}
        {Lisp-Entry "flash-character" #f 808 11 808 26 ("3" "collect-forward-exprs" "get-range" "get-string" "mark" "function" "map" "user-message" "end:" "1" "nu+" "start:" "explorer-class" "expl" "visible?:" "20" "100" "Dimension" "size:" "position:" "Tooltip" "tool" "self" "get-desktop" "acquire" "tran" "text->view" "pos" "let*" ".2" "sleep" "update-view" "next-cell" "Range$Cell$" "new" "set-selection" "get-selection" "old" "let" "cell-displayed?" "if" "macro-playing?" "unless" "end" "start")}
        {Lisp-Entry "on-browse-java" #f 832 11 832 25 ("browse-java" "evt")}
        {Lisp-Entry "browse-java" #f 836 11 836 22 ("list" "browse-classes" "get-guest" "manager" "Java-Manager" "new-frame" "host" "error" "not" "org.apache.bcel.Repository" "lookupClass" "javaClass" "->string" "classname" "let*" "bell" "Symbol" "is-not?" "if" "current-expr" "expr" "let")}
        {Lisp-Entry "on-set-read/write" #f 855 11 855 28 ("update-status" "set-read/write" "controller" "get-moniker" "moniker" "let" "evt")}}
      {Lisp-Entry "Definitions-Menu" #f 866 7 866 23 ("Context-Menu")
        {Lisp-Entry "definitions" #f 869 12 869 23 ("set-definitions" "get-definitions")}
        {Lisp-Entry "history-item" #f 870 12 870 24 ("set-history-item" "get-history-item")}
        {Lisp-Entry "get-definitions" #f 873 18 873 33 ("definitions")}
        {Lisp-Entry "set-definitions" #f 877 18 877 33 ("definitions" "set!" "list")}
        {Lisp-Entry "get-history-item" #f 881 18 881 34 ("history-item")}
        {Lisp-Entry "set-history-item" #f 885 18 885 34 ("history-item" "set!" "item")}
        {Lisp-Entry "finish" #f 889 11 889 17 ("key:" "make-condensed-menu" "get-string" "parent" "user-data" "create-item" "menu" "let*" "definition<?" "sort" "definition:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "present" "title" "let" "definition" "function" "for-each" "20" "definitions" "length" "<" "if" "nextmethod" "rest")}
        {Lisp-Entry "definition<?" #f 903 11 903 23 ("present" "string<?" "y" "x")}
        {Lisp-Entry "on-action" #f 907 11 907 20 ("definition:" "get-property" "edit" "history-item" "get-application" "add-history" "evt")}}
      {Lisp-Entry "References-Menu" #f 917 7 917 22 ("Context-Menu")
        {Lisp-Entry "target" #f 920 12 920 18 ("set-target" "get-target")}
        {Lisp-Entry "definitions" #f 921 12 921 23 ("set-definitions" "get-definitions")}
        {Lisp-Entry "history-item" #f 922 12 922 24 ("set-history-item" "get-history-item")}
        {Lisp-Entry "get-target" #f 925 18 925 28 ("target")}
        {Lisp-Entry "set-target" #f 929 18 929 28 ("target" "set!" "trg")}
        {Lisp-Entry "get-definitions" #f 933 18 933 33 ("definitions")}
        {Lisp-Entry "set-definitions" #f 937 18 937 33 ("definitions" "set!" "list")}
        {Lisp-Entry "get-history-item" #f 941 18 941 34 ("history-item")}
        {Lisp-Entry "set-history-item" #f 945 18 945 34 ("history-item" "set!" "item")}
        {Lisp-Entry "finish" #f 949 11 949 17 ("key:" "make-condensed-menu" "get-string" "parent" "user-data" "create-item" "menu" "let*" "definition<?" "sort" "definition:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "present" "->string" "title" "let" "definition" "function" "for-each" "20" "definitions" "length" "<" "if" "nextmethod" "rest")}
        {Lisp-Entry "definition<?" #f 963 11 963 23 ("present" "string<?" "y" "x")}
        {Lisp-Entry "on-action" #f 967 11 967 20 ("target" "definition:" "get-property" "edit-reference" "history-item" "get-application" "add-history" "evt")}}}})
"Code-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "code" "Code-Tree.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.code.Code-Tree" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Code-Tree" #f 45 7 45 16 ("Tree-View")
        {Lisp-Entry "sort?" #f 48 12 48 17 ("generate")}
        {Lisp-Entry "insert-definition" #f 51 18 51 35 ("self" "insert-definition" "sort?" "definition" "father")}
        {Lisp-Entry "update-row" #f 55 11 55 21 ("sort?" "self" "insert-definition" "get-user-data" "definition" "let" "row")}}}})
"Collector-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Collector-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Collector-Tester" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Collector-Tester" #f 45 7 45 23 ("title:" "Tester")}}})
"Color"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "Color.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.Color" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Color" #f 45 7 45 12 ("Object")
        {Lisp-Entry "name" #f 48 8 48 12 ("generate")}
        {Lisp-Entry "red" #f 49 8 49 11 ("generate")}
        {Lisp-Entry "green" #f 50 8 50 13 ("generate")}
        {Lisp-Entry "blue" #f 51 8 51 12 ("generate")}
        {Lisp-Entry "alpha" #f 52 8 52 13 ("generate")}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("alpha" "alpha~self" "blue" "blue~self" "green" "green~self" "red" "red~self" "name~self" "set!" "nextmethod" "name" "name:")}
        {Lisp-Entry "copy-object" #f 68 11 68 22 ("alpha" "alpha:" "blue" "blue:" "green" "green:" "red" "red:" "name" "name:" "Color" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 77 11 77 25 (":not-equal" "else" ":equal" "alpha" "blue" "green" "get-ref" "red" "and" "get-name" "=" "name" "if" ":incompatible" "Color" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 91 11 91 23 ("alpha:" "blue" ",blue" "',blue" "blue:" "green" ",green" "',green" "green:" "red" ",red" "',red" "red:" "Color" "new" "alpha" ",alpha" "',alpha" ",name" "',name" "registered-color" "name" "if")}
        {Lisp-Entry "print" #f 97 11 97 16 ("blue" "green" "red" "alpha" "self" "class-of" "type-name" "identifier-name" "format" "name" "if" "readably" "printer")}
        {Lisp-Entry "white?" #f 116 18 116 24 ("alpha" "not" "blue" "green" "255" "red" "=" "and")}
        {Lisp-Entry "parse-string" #f 129 23 129 35 ("blue:" "green:" "red:" "integer?" "blue" "green" "red" "bind" "3" "dispatch" "Constants" "memq?" "car" "symbol?" "1" "=" "and" "self" "type:" "object:" "Convertion-Error" "new" "signal" "function" "err" "length" "len" "read-string-content" "lst" "let*" "empty-string?" "if" "string")}
        {Lisp-Entry "present" #f 147 18 147 25 ("alpha" "blue" "green" "red" "format" "->string" "name" "if")}
        {Lisp-Entry "determine-color" #f 162 18 162 33 ("self" "else" "get-opposite" "Light-Gray" "'Light-Gray" "registered-color" "not" "cond" "selected?" "enabled?")}
        {Lisp-Entry "get-opposite" #f 169 18 169 30 ("else" "Gray" "'Gray" "Dark-Gray" "Yellow" "'Yellow" "registered-color" "Dark-Red" "name" "case")}
        {Lisp-Entry "rgb->hls" #f 177 18 177 26 ("rgb" "colorref:" "Color" "new" "ref" "ColorRGBToHLS" "saturation" "lightness" "hue" "receive")}
        {Lisp-Entry "hls->rgb" #f 182 18 182 26 ("colorref:" "Color" "new" "blue-part" "green-part" "red-part" "ColorHLSToRGB" "ref" "let")}
        {Lisp-Entry "color-cycle" #f 193 23 193 34 ("hls->rgb" "blue:" "green:" "red:" "Color" "new" "hls" "round" "+" "n" "function" "map" "blue-part" "sat" "green-part" "lig" "red-part" "hue" "rgb->hls" "get-colorref" "ref" "240" "/" "inc" "*" "cardinality" "cycle-naturals" "seq" "let*" "subcycle" "cycle" "base")}}}})
"Color-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Color-Button.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Color-Button" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Color-Button" #f 46 7 46 19 ("Push-Icon")
        {Lisp-Entry "color" #f 49 12 49 17 ("set-color" "get-color")}
        {Lisp-Entry "get-color" #f 57 18 57 27 ("color")}
        {Lisp-Entry "set-color" #f 61 18 61 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "action-properties" #f 71 11 71 28 ("color" "color:" "list")}
        {Lisp-Entry "draw-tool" #f 80 11 80 20 ("Dark" "name:" "Color" "get-enabled?" "fill-rect" "18" "14" "Rect" "new" "offset-rect" "rect" "1" "2" "pushed" "'pushed" "state" "eq?" "if" "offset" "let*" "color" "when" "nextmethod" "context" "surface")}}}})
"Color-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Color-Combo.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Color-Combo" #f 37 9 37 33 ("Color-View" "register-autoclass" "jazz")
      {Lisp-Entry "Color-Combo" #f 47 7 47 18 ("color" "Black" "border-color:" "solid" "border-type:" "color-border" "2" "Rect" "layout-insets:" "fill" "layout-type:" "White" "Color" "background:" "15" "Dimension" "size:" "color-contour" "name:" "Combo-Box")
        {Lisp-Entry "form-model" #f 57 11 57 21 ("nextmethod" "else" "Color-Text-View" "body" "get-name" "case" "form")}
        {Lisp-Entry "get-color" #f 68 18 68 27 ("color" "'color" "locate" "get-background")}
        {Lisp-Entry "set-color" #f 72 18 72 27 ("select-all" "present" "null?" "if" "set-string-content" "body" "'body" "locate" "text" "let" "set-color-value" "color")}
        {Lisp-Entry "set-color-value" #f 79 11 79 26 ("'color" "locate" "set-background" "color")}
        {Lisp-Entry "content-change" #f 88 11 88 25 ("get-content" "Color" "parse-string" "set-color-value" "origin")}
        {Lisp-Entry "button-action" #f 92 11 92 24 ("initiator:" "on-color-picked" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "colors:" "Color-Picker" "popup" "get-height" "12" "get-width" "-" "Point" "new" "pos" "let")}
        {Lisp-Entry "on-color-picked" #f 97 11 97 26 ("popup" "'popup" "content-change" "set-color" "close-popups" "color:" "get-property" "color" "let" "evt")}
        {Lisp-Entry "layout" #f 109 11 109 17 ("pick" "'pick" "15" "get-width" "-" "Dimension" "set-size" "get-right" "new" "scroller" "'scroller" "0" "Point" "set-position" "color-contour" "'color-contour" "locate" "countour" "get-height" "width" "get-size" "size" "let")}}
      {Lisp-Entry "Color-View" #f 125 7 125 17 ("View")
        {Lisp-Entry "draw" #f 128 11 128 15 ("get-height" "-1" "0" "1" "get-width" "-" "line" "Black" "name:" "Pen" "set-pen" "get-size" "size" "let" "background" "null?" "when" "nextmethod" "lv" "lh" "context" "surface")}}}})
"Color-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editors" "Color-Editor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editors.Color-Editor" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Color-Editor" #f 48 7 48 19 ("2" "1" "Rect" "layout-insets:" "15" "14" "Dimension" "size:" "color-contour" "name:" "Color-Combo")
        {Lisp-Entry "value-row" #f 51 12 51 21 ("set-value-row" "get-value-row")}
        {Lisp-Entry "get-value-row" #f 59 18 59 31 ("value-row")}
        {Lisp-Entry "set-value-row" #f 63 18 63 31 ("body" "'body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "content-change" #f 68 11 68 25 ("nextmethod" "value-row" "editor-return" "origin")}}}})
"Color-Picker"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Color-Picker.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Color-Picker" #f 37 9 37 34 ("More-Tool" "register-autoclass" "jazz")
      {Lisp-Entry "Color-Picker" #f 48 7 48 19 ("title:" "more" "0" "fill" "south" "20" "100" "Dimension" "size:" "center" "location:" "colors" "name:" "4" "Rect" "layout-insets:" "border" "layout-type:" "Layout-View")
        {Lisp-Entry "colors" #f 51 12 51 18 ("set-colors" "get-colors")}
        {Lisp-Entry "geometry" #f 52 12 52 20 ("set-geometry" "get-geometry")}
        {Lisp-Entry "get-colors" #f 67 18 67 28 ("colors")}
        {Lisp-Entry "set-colors" #f 71 18 71 28 ("layout-view" "invalidate-tools" "colors" "set!" "value")}
        {Lisp-Entry "get-geometry" #f 77 18 77 30 ("geometry")}
        {Lisp-Entry "set-geometry" #f 81 18 81 30 ("layout-view" "geometry" "set!" "value")}
        {Lisp-Entry "set-action-handler" #f 91 11 91 29 ("more" "'more" "colors" "'colors" "locate" "get-children" "set-action-handler" "tool" "function" "for-each" "action-handler" "set!" "handler")}
        {Lisp-Entry "Default-Colors" #f 104 14 104 28 ("Dark-Gray" "Gray" "Light-Gray" "Dark-Purple" "Purple" "Light-Purple" "Dark-Blue" "Blue" "Light-Blue" "Dark-Green" "Green" "Light-Green" "Dark-Yellow" "Yellow" "Light-Yellow" "Dark-Orange" "Orange" "Light-Orange" "Dark-Red" "Red" "Light-Red" "Black" "White" "name:" "Color")}
        {Lisp-Entry "effective-colors" #f 139 11 139 27 ("Default-Colors" "colors" "either")}
        {Lisp-Entry "invalidate-tools" #f 148 11 148 27 ("effective-colors" "action-handler" "action-handler:" "color:" "18" "Dimension" "size:" "parent:" "Color-Tool" "new" "color" "get-children" "close" "tool" "function" "for-each" "colors" "'colors" "locate" "view" "let")}
        {Lisp-Entry "layout" #f 163 11 163 17 ("nextmethod" "30" "Dimension" "set-size" "0" "naturals" "18" "2" "Point" "new" "set-position" "element" "tool" "*" "+" "n" "v" "h" "function" "for-each" "get-col" "columns" "get-row" "rows" "8" "3" "Cell" "either" "geometry" "not-null?" "when" "get-children" "children" "colors" "'colors" "locate" "view" "let*")}}
      {Lisp-Entry "Color-Tool" #f 186 7 186 17 ("Push-Tool")
        {Lisp-Entry "client" #f 189 12 189 18 ()}
        {Lisp-Entry "color" #f 190 12 190 17 ("set-color" "get-color")}
        {Lisp-Entry "get-color" #f 193 18 193 27 ("color")}
        {Lisp-Entry "set-color" #f 197 18 197 27 ("color" "set!" "value")}
        {Lisp-Entry "get-tooltip?" #f 201 11 201 23 ()}
        {Lisp-Entry "get-tooltip-text" #f 205 11 205 27 ("get-name" "->string" "color" "null?" "if")}
        {Lisp-Entry "action-properties" #f 211 11 211 28 ("color" "color:" "list")}
        {Lisp-Entry "mouse-enter" #f 215 11 215 22 ("invalidate-view" "highlighted" "'highlighted" "set-state")}
        {Lisp-Entry "mouse-leave" #f 220 11 220 22 ("invalidate-view" "inactive" "'inactive" "set-state")}
        {Lisp-Entry "mouse-up" #f 225 11 225 19 ("self" "process-action" "pos")}
        {Lisp-Entry "up" #f 229 11 229 13 ()}
        {Lisp-Entry "draw-highlighted" #f 233 11 233 27 ("nextmethod" "draw-pushed" "mouse-down?" "if" "surface")}
        {Lisp-Entry "draw-tool" #f 239 11 239 20 ("get-bottom" "+" "2" "get-left" "1" "get-top" "-" "get-right" "line" "Pen" "set-pen" "fill-rect" "color" "if" "Dark" "name:" "Color" "frame-rect" "-1" "inside" "-3" "inflate-rect" "outside" "get-bounds" "rect" "let*" "nextmethod" "context" "surface")}}
      {Lisp-Entry "More-Tool" #f 256 7 256 16 ("Label-Tool")
        {Lisp-Entry "mouse-enter" #f 259 11 259 22 ("invalidate-view" "highlighted" "'highlighted" "set-state")}
        {Lisp-Entry "mouse-leave" #f 264 11 264 22 ("invalidate-view" "inactive" "'inactive" "set-state")}
        {Lisp-Entry "mouse-up" #f 269 11 269 19 ("Color-Request" "get-modal" "color:" "list" "self" "process-action" "close-popups" "pos")}
        {Lisp-Entry "up" #f 274 11 274 13 ()}
        {Lisp-Entry "draw-highlighted" #f 278 11 278 27 ("nextmethod" "draw-pushed" "mouse-down?" "if" "surface")}}}})
"Color-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Color-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Color-Request" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Color-Request" #f 47 7 47 20 ("Dialog")
        {Lisp-Entry "custom-colors" #f 51 19 51 32 ("16" "int" "new-array")}
        {Lisp-Entry "get-modal" #f 56 16 56 25 ("error" "throw-cancel" "0" "=" "CommDlgExtendedError" "code" "get" "colorref:" "ChooseColor" "if" "CC_FULLOPEN" "CC_RGBINIT" "CC_ANYCOLOR" "bitwise-ior" "Flags" "'Flags" "custom-colors" "lpCustColors" "'lpCustColors" "Black" "name:" "Color" "either" "get-ref" "rgbResult" "'rgbResult" "get-toplevel" "get-handle" "hwndOwner" "'hwndOwner" "size-of" "lStructSize" "'lStructSize" "set" "CHOOSECOLOR" "new" "r" "let" "close-all-popups" "initial-color" "initial-color:")}}}})
"Color-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Color-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Color-Row" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Color-Row" #f 48 7 48 16 ("Value-Row")
        {Lisp-Entry "present" #f 56 11 56 18 ("present" "get-name" "format" "Color" "is-not?" "not" "if" "color")}
        {Lisp-Entry "update-color" #f 70 18 70 30 ("get-edited-value" "color" "'color" "editor" "locate" "set-background")}
        {Lisp-Entry "draw-cell" #f 79 11 79 20 ("get-bottom" "get-left" "get-top" "1" "get-right" "line" "Pen" "set-pen" "fill-rect" "if" "Black" "name:" "Color" "frame-rect" "-1" "inflate-rect" "inner" "-" "13" "3" "2" "Rect" "new" "outer" "let*" "0" "15" "draw-at" "height" "width" "cell" "row" "column" "value" "context" "surface")}
        {Lisp-Entry "new-editor" #f 95 11 95 21 ("self" "value-row:" "editor-class" "new")}
        {Lisp-Entry "editor-class" #f 100 11 100 23 ("Color-Row-Editor")}
        {Lisp-Entry "get-edited-value" #f 104 11 104 27 ("Color" "parse-string" "body" "'body" "editor" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-edited-value" #f 109 11 109 27 ("color" "'color" "set-background" "present" "body" "'body" "editor" "locate" "set-string-content" "value")}
        {Lisp-Entry "get-edited-modified?" #f 114 11 114 31 ("body" "'body" "editor" "locate" "get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" #f 118 11 118 31 ("body" "'body" "editor" "locate" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" #f 122 11 122 22 ("body" "'body" "editor" "locate" "show-text-cursor")}
        {Lisp-Entry "focused-editor" #f 126 11 126 25 ("body" "'body" "editor" "locate")}}
      {Lisp-Entry "Color-Row-Editor" #f 135 7 135 23 ("2" "1" "Rect" "layout-insets:" "15" "14" "Dimension" "size:" "color-contour" "name:" "Color-Combo")
        {Lisp-Entry "value-row" #f 143 12 143 21 ("set-value-row" "get-value-row")}
        {Lisp-Entry "form-model" #f 146 11 146 21 ("nextmethod" "else" "Color-Value-Text-View" "body" "get-name" "case" "form")}
        {Lisp-Entry "get-value-row" #f 152 18 152 31 ("value-row")}
        {Lisp-Entry "set-value-row" #f 156 18 156 31 ("body" "'body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "content-change" #f 161 11 161 25 ("nextmethod" "enter-edited-value" "popup" "value-row" "editor-return" "return" "case" "origin")}}
      {Lisp-Entry "Color-Value-Text-View" #f 173 7 173 28 ("Color-Text-View")
        {Lisp-Entry "value-row" #f 176 12 176 21 ("set-value-row" "get-value-row")}
        {Lisp-Entry "get-value-row" #f 184 18 184 31 ("value-row")}
        {Lisp-Entry "set-value-row" #f 188 18 188 31 ("value-row" "set!" "value")}
        {Lisp-Entry "up-arrow-move" #f 197 11 197 24 ("value-row" "editor-up-arrow" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" #f 201 11 201 26 ("value-row" "editor-down-arrow" "scroll?" "extend?")}
        {Lisp-Entry "document-menu" #f 205 11 205 24 ()}
        {Lisp-Entry "focus-validate" #f 215 11 215 25 ("value-row" "editor-focus-validate" "view")}
        {Lisp-Entry "focus-lose" #f 219 11 219 21 ("value-row" "editor-focus-lose" "nextmethod" "view")}
        {Lisp-Entry "focus-master" #f 224 11 224 23 ("value-row" "get-tree")}}}})
"Color-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Color-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Color-Text-View" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Color-Text-View" #f 45 7 45 22 ("Combo-Text-View")
        {Lisp-Entry "symbol-completions" #f 54 11 54 29 ("complete" "Symbol-Completer" "new" "completer" "Color.Constants" "domain" "let*" "favorites" "name")}}}})
"Column-Detail"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "choosers" "Column-Detail.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.choosers.Column-Detail" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Column-Detail" #f 45 7 45 20 ("Object")
        {Lisp-Entry "name" #f 48 12 48 16 ("generate")}
        {Lisp-Entry "width" #f 49 12 49 17 ("generate" "0")}
        {Lisp-Entry "filled?" #f 50 12 50 19 ("generate")}
        {Lisp-Entry "displayed?" #f 51 12 51 22 ("generate")}
        {Lisp-Entry "construct-literal" #f 55 16 55 33 ("self" "new" "displayed?" "filled?" "width" "name" "context")}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("displayed?" "filled?" "width" "name" "set!" "nextmethod" "d?" "f?" "w" "n")}
        {Lisp-Entry "copy-object" #f 67 11 67 22 ("displayed?" "filled?" "width" "name" "Column-Detail" "new" "deep?")}
        {Lisp-Entry "foldable?" #f 72 11 72 20 ()}
        {Lisp-Entry "fold-object" #f 77 11 77 22 ("displayed?" "filled?" "width" "name" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "print" #f 87 11 87 16 ("displayed?" "filled?" "width" "name" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}}})
"Column-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Column-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Column-Menu" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Column-Menu" #f 46 7 46 18 ("on-fill-to-column" "fill-to-column" "on-mark-column" ":focus" "Event-Handler" "action-handler:" "title:" "mark-column" "name:" "Context-Menu")}}})
"Column-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "display" "Column-Preferences.jazz"} 1226584781
    {Lisp-Entry "jazz.library.display.Column-Preferences" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Column-Preferences" #f 45 7 45 25 ("Preferences")
        {Lisp-Entry "border" #f 48 12 48 18 ("generate" "0")}
        {Lisp-Entry "border-after" #f 49 12 49 24 ("generate" "0")}
        {Lisp-Entry "minimum" #f 50 12 50 19 ("generate" "0")}
        {Lisp-Entry "presentation-property?" #f 58 11 58 33 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 62 11 62 27 ("name" "column-class" "type-name" "format" "title" "either")}
        {Lisp-Entry "set-presentation" #f 66 11 66 27 ("title:" "self" "set-property" "title" "designer")}
        {Lisp-Entry "column-class" #f 75 29 75 41 ("Display-Column")}
        {Lisp-Entry "new-column" #f 79 26 79 36 ("display")}}}})
"Columns-Display"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "display" "Columns-Display.jazz"} 1226584781
    {Lisp-Entry "jazz.library.display.Columns-Display" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Columns-Display" #f 44 7 44 22 ("Object")
        {Lisp-Entry "columns" #f 47 18 47 25 ()}
        {Lisp-Entry "line" #f 48 18 48 22 ("0")}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("nextmethod" "rest")}
        {Lisp-Entry "get-columns" #f 65 18 65 29 ("columns")}
        {Lisp-Entry "add-column" #f 74 18 74 28 ("insert!" "find" "rank" "let" "list" "append!" "columns" "set!" "null?" "if" "before" "before:" "column")}
        {Lisp-Entry "add-columns" #f 81 18 81 29 ("add-column" "column" "function" "for-each" "before" "before:" "columns")}
        {Lisp-Entry "newline" #f 92 18 92 25 ("line" "increase!")}
        {Lisp-Entry "print-to" #f 96 18 96 26 ("print-columns" "prepare-columns" "printer")}
        {Lisp-Entry "prepare-columns" #f 101 18 101 33 ("prepare-print" "prepare-empties" "prepare-base")}
        {Lisp-Entry "prepare-base" #f 107 11 107 23 ("columns" "rewind" "fill-empty" "column" "function" "for-each")}
        {Lisp-Entry "prepare-empties" #f 114 11 114 26 ("columns" "set!" "replace-empty" "data" "get-empty?" "unless" "column" "function" "for-each" "previous-data" "previous-column" "let" "line" "below" "0" "from" "n" "for" "loop")}
        {Lisp-Entry "prepare-print" #f 126 11 126 24 ("columns" "prepare-print" "get-empty?" "unless" "column" "function" "for-each")}
        {Lisp-Entry "print-columns" #f 135 18 135 31 ("format" "/=" "columns" "when" "set!" "print-to" "get-next" "data" "get-empty?" "unless" "column" "function" "for-each" "previous-data" "previous-column" "below" "0" "from" "n" "for" "loop" "1" "line" "-" "last" "let" "printer")}}}})
"Combo-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Combo-Box.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Combo-Box" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Combo-Box" #f 66 7 66 16 ("Label" "Font" "font:" "Default" "Text-Style" "default-style:" "show-unfocused-selection?:" "accepts-returns?:" "selectable?:" "editable?:" "top-padding:" "1" "left-padding:" "body" "content" "scroller" "name:" "Combo-View")
        {Lisp-Entry "condensed?" #f 69 12 69 22 ("set-condensed?" "get-condensed?")}
        {Lisp-Entry "complete?" #f 70 12 70 21 ("set-complete?" "get-complete?")}
        {Lisp-Entry "editable?" #f 71 12 71 21 ("set-editable?" "get-editable?")}
        {Lisp-Entry "focusable?" #f 72 12 72 22 ("set-focusable?" "get-focusable?")}
        {Lisp-Entry "content" #f 73 12 73 19 ("set-content" "get-content")}
        {Lisp-Entry "choices" #f 74 12 74 19 ("set-choices" "get-choices")}
        {Lisp-Entry "nullable?" #f 75 12 75 21 ("set-nullable?" "get-nullable?")}
        {Lisp-Entry "choices-updater" #f 76 12 76 27 ("set-choices-updater" "get-choices-updater")}
        {Lisp-Entry "entry-test" #f 77 12 77 22 ("set-entry-test" "get-entry-test")}
        {Lisp-Entry "default-size" #f 87 11 87 23 ("15" "100" "Dimension")}
        {Lisp-Entry "button-action" #f 96 11 96 24 ("5" "alternate-position:" "1" "+" "-1" "Point" "new" "track-popup-menu" "4" "-" "width:" "layout-menu" "get-height" "height" "get-width" "width" "get-size" "size" "inactive" "'inactive" "highlighted" "'highlighted" "mouse-view" "picker-view?" "set-state" "bell" "begin" "not" "if" "get-pick" "pick" "new-choices-menu" "menu" "let" "update-choices" "get-body" "acquire-focus" "focusable?" "when")}
        {Lisp-Entry "on-action" #f 113 29 113 38 ("combo-choice" "popup" "'popup" "call-content-change" "set-modified?" "select-all" "set-entry" "get-body" "text" "get-user-data" "choice" "get-title" "entry" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "combo-choice" #f 125 29 125 41 ()}
        {Lisp-Entry "get-nullable?" #f 134 18 134 31 ("nullable?")}
        {Lisp-Entry "set-nullable?" #f 138 18 138 31 ("nullable?" "set!" "value")}
        {Lisp-Entry "get-condensed?" #f 142 18 142 32 ("condensed?")}
        {Lisp-Entry "set-condensed?" #f 146 18 146 32 ("condensed?" "set!" "value")}
        {Lisp-Entry "get-complete?" #f 150 18 150 31 ("complete?")}
        {Lisp-Entry "set-complete?" #f 154 18 154 31 ("set-editable?" "set-selectable?" "get-body" "text" "let" "when" "complete?" "set!" "value")}
        {Lisp-Entry "get-focusable?" #f 162 18 162 32 ("focusable?")}
        {Lisp-Entry "set-focusable?" #f 166 18 166 32 ("focusable?" "set!" "flag")}
        {Lisp-Entry "get-choices-updater" #f 170 18 170 37 ("choices-updater")}
        {Lisp-Entry "set-choices-updater" #f 174 18 174 37 ("get-pick" "set-enabled?" "pick" "'pick" "kind" "eq?" "and" "when" "choices-updater" "set!" "value")}
        {Lisp-Entry "get-entry-test" #f 180 18 180 32 ("entry-test")}
        {Lisp-Entry "set-entry-test" #f 184 18 184 32 ("entry-test" "set!" "value")}
        {Lisp-Entry "get-editable?" #f 193 11 193 24 ("editable?")}
        {Lisp-Entry "set-editable?" #f 197 11 197 24 ("set-visible?" "Medium" "White" "name:" "Color" "if" "set-background" "not" "set-selectable?" "set-editable?" "get-pick" "pick" "get-body" "text" "let" "editable?" "set!" "flag")}
        {Lisp-Entry "update-choices" #f 212 29 212 43 ("self" "choices" "null?" "choices-updater" "and" "if")}
        {Lisp-Entry "new-choices-menu" #f 218 29 218 45 ("new-choices-menu-plain" "new-choices-menu-condensed" "condensed?" "if" "choices" "when")}
        {Lisp-Entry "new-choices-menu-plain" #f 225 29 225 51 ("action-handler:" "user-data:" "string=?" "checked?:" "title:" "Check-Item" "present-choice" "title" "parent:" "Separator-Item" "not" "if" "choice" "function" "for-each" "on-action" "'on-action" "method-name:" "self" "target:" "Event-Handler" "action-handler" "either" "handler" "Context-Menu" "new" "menu" "get-entry" "current" "let" "choices" "when")}
        {Lisp-Entry "new-choices-menu-condensed" #f 239 11 239 37 ("key:" "make-condensed-menu" "present-choice" "get-string" "action-handler:" "cons" "user-data:" "equal?" "checked?:" "title:" "parent:" "Check-Item" "parent" "string" "value" "function" "create-leaf" "on-action" "'on-action" "method-name:" "self" "target:" "Event-Handler" "action-handler" "either" "handler" "Context-Menu" "new" "menu" "get-entry" "current" "let" "choices" "when")}
        {Lisp-Entry "highlight-pick?" #f 256 11 256 26 ()}
        {Lisp-Entry "set-enabled?" #f 265 11 265 23 ("invalidate-view" "get-pick" "Medium" "White" "name:" "Color" "if" "set-background" "get-body" "set-enabled?" "enabled?" "set!" "flag")}
        {Lisp-Entry "inner?" #f 278 11 278 17 ("children" "memq?" "view")}
        {Lisp-Entry "get-choices" #f 287 18 287 29 ("choices")}
        {Lisp-Entry "set-choices" #f 291 18 291 29 ("car" "set-value" "not-null?" "choices-updater" "or" "get-pick" "set-enabled?" "pick" "'pick" "kind" "eq?" "when" "choices" "set!" "get-choice" "old" "let" "value")}
        {Lisp-Entry "get-choice" #f 300 11 300 21 ("get-entry" "entry->choice")}
        {Lisp-Entry "present-choices" #f 309 18 309 33 ("choices" "present-choice" "map" "format")}
        {Lisp-Entry "present-choice" #f 314 21 314 35 ("first" "localize" "value->presented" "not" "if" "presented" "value" "bind" "when" "choice")}
        {Lisp-Entry "present-value" #f 327 18 327 31 ("present-choice" "value->presented" "not" "if" "value->choice" "choice" "let" "value")}
        {Lisp-Entry "value->choice" #f 334 11 334 24 ("choices" "assoc" "value")}
        {Lisp-Entry "value->presented" #f 338 26 338 42 ("localize" "->string" "value")}
        {Lisp-Entry "invalid->value" #f 342 26 342 40 ("format" "message:" "Parse-Error" "new" "signal" "presented")}
        {Lisp-Entry "entry->choice" #f 351 11 351 24 ("choices" "value->presented" "not" "if" "continuation-return" "localize" "localized" "string" "tryout" "presented" "value" "bind" "when" "choice" "for-each" "return" "function" "continuation-capture" "nu=?" "entry-test" "either" "test" "let" "entry")}
        {Lisp-Entry "edit" #f 375 18 375 22 ("focus-body")}
        {Lisp-Entry "focus-body" #f 379 11 379 21 ("select-all" "acquire-focus" "get-body" "text" "let")}
        {Lisp-Entry "get-entry" #f 390 26 390 35 ("get-content")}
        {Lisp-Entry "set-entry" #f 394 26 394 35 ("set-content" "content")}
        {Lisp-Entry "get-content" #f 398 18 398 29 ("get-body" "get-string-content")}
        {Lisp-Entry "set-content" #f 402 18 402 29 ("localize" "if" "get-body" "set-string-content" "content")}
        {Lisp-Entry "valid-value?" #f 406 18 406 30 ("get-choice" "boolean")}
        {Lisp-Entry "get-value" #f 410 18 410 27 ("car" "get-content" "invalid->value" "not" "if" "get-choice" "choice" "let")}
        {Lisp-Entry "set-value" #f 417 18 417 27 ("present-value" "set-entry" "value")}
        {Lisp-Entry "get-modified?" #f 421 18 421 31 ("get-body" "get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 425 18 425 31 ("get-body" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "validate-content" #f 434 11 434 27 ("get-value" "set-entry" "throw-cancel" "focus-body" "yes" "no:" "yes:" "type:" "get-message" "message-box" "case" "err" "Parse-Error" "catch" "format" "no" "message" "'message" "question" "'question" "if" "type" "present-choice" "unique-entry" "car" "essay" "unique" "choices" "length" "1" "=" "unique?" "let*")}
        {Lisp-Entry "layout" #f 455 11 455 17 ("get-width" "-" "Dimension" "new" "set-size" "0" "Point" "set-position" "get-height" "width" "get-pick" "pick" "'scroller" "locate" "scroller" "get-size" "size" "let")}}}})
"Combo-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Combo-Button.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Combo-Button" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Combo-Button" #f 46 7 46 19 ("Push-Tool")
        {Lisp-Entry "get-combo" #f 55 18 55 27 ("parent")}
        {Lisp-Entry "get-enabled?" #f 64 11 64 23 ("parent" "get-enabled?" "enabled?" "and")}
        {Lisp-Entry "get-state" #f 68 11 68 20 ("self" "parent" "child-state")}
        {Lisp-Entry "mouse-enter" #f 72 11 72 22 ("self" "parent" "enter-child")}
        {Lisp-Entry "mouse-leave" #f 76 11 76 22 ("self" "parent" "leave-child")}
        {Lisp-Entry "mouse-down" #f 80 11 80 21 ("self" "parent" "child-down" "pos")}
        {Lisp-Entry "drag-up" #f 84 11 84 18 ("self" "parent" "child-up" "rest" "pos")}
        {Lisp-Entry "down" #f 93 11 93 15 ("self" "process-action" "pick" "'pick" "parent" "get-kind" "eq?" "get-enabled?" "when")}
        {Lisp-Entry "up" #f 99 11 99 13 ("self" "process-action" "choose" "'choose" "parent" "get-kind" "eq?" "when")}
        {Lisp-Entry "close-popups" #f 109 11 109 23 ("invalidate-view" "nextmethod" "double-click" "mouse-down" "memq?" "unless" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "light-pen" #f 120 11 120 20 ("Light-Background" "name:" "Pen")}
        {Lisp-Entry "dark-pen" #f 124 11 124 19 ("Dark" "name:" "Pen")}
        {Lisp-Entry "draw-inactive" #f 128 11 128 24 ("Medium" "Light" "name:" "Color" "get-enabled?" "if" "frame-rect" "get-bounds" "bounds" "let" "parent" "highlight-pick?" "when" "surface")}
        {Lisp-Entry "draw-tool" #f 134 11 134 20 ("draw-ellipsis" "choose" "draw-arrow" "pick" "parent" "get-kind" "case" "context" "surface")}
        {Lisp-Entry "draw-arrow" #f 140 11 140 21 ("down" "'down" "3" "draw-arrow-tip" "1" "get-height" "v" "2" "get-width" "quotient" "-" "+" "h" "get-offset" "offset" "get-size" "size" "let*" "Dark" "Black" "name:" "Pen" "get-enabled?" "if" "set-pen" "surface")}
        {Lisp-Entry "draw-ellipsis" #f 149 11 149 24 ("enabled?" "get-v" "get-h" "draw-text" "Black" "name:" "Color" "set-text-color" "center" "'center" "justify" "pos" "get-text-extent" "extent" "title" "get-offset" "offset" "get-size" "size" "let*" "surface")}
        {Lisp-Entry "get-offset" #f 159 11 159 21 ("0" "1" "choose" "pushed" "get-state" "memq?" "if")}}}})
"Combo-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Combo-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Combo-Row" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Combo-Row" #f 46 7 46 16 ("Value-Row")
        {Lisp-Entry "condensed?" #f 49 12 49 22 ("set-condensed?" "get-condensed?")}
        {Lisp-Entry "choices" #f 50 12 50 19 ("set-choices" "get-choices")}
        {Lisp-Entry "kind" #f 51 12 51 16 ("set-kind" "get-kind")}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("set-kind" "set-choices" "set-condensed?" "entry-test:" "not-found:" "getf" "nullable?:" "self" "value-row:" "editor-class" "new" "editor" "set!" "nextmethod" "apply" "others" "condensed?" "entry-test" "pick" "'pick" "kind" "choices" "bind-keywords" "rest")}
        {Lisp-Entry "editor-class" #f 68 11 68 23 ("Combo-Row-Editor")}
        {Lisp-Entry "get-condensed?" #f 77 18 77 32 ("editor" "get-condensed?")}
        {Lisp-Entry "set-condensed?" #f 81 18 81 32 ("editor" "set-condensed?" "value")}
        {Lisp-Entry "get-choices" #f 85 18 85 29 ("editor" "get-choices")}
        {Lisp-Entry "set-choices" #f 89 18 89 29 ("editor" "set-choices" "when" "value")}
        {Lisp-Entry "set-choices-updater" #f 94 18 94 37 ("editor" "set-choices-updater" "value")}
        {Lisp-Entry "get-kind" #f 98 18 98 26 ("editor" "get-kind")}
        {Lisp-Entry "set-kind" #f 102 18 102 26 ("editor" "set-kind" "value")}
        {Lisp-Entry "enter-combo-choice" #f 111 11 111 29 ("focus-editor" "enter-edited-value")}
        {Lisp-Entry "present" #f 121 11 121 18 ("editor" "present-value" "value")}
        {Lisp-Entry "default-value" #f 130 11 130 24 ("get-choices" "caar")}
        {Lisp-Entry "close-editor?" #f 139 11 139 24 ()}
        {Lisp-Entry "get-edited-value" #f 143 11 143 27 ("get-value" "limit-to-list?" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-content" "string" "let")}
        {Lisp-Entry "set-edited-value" #f 152 11 152 27 ("editor" "set-value" "value")}
        {Lisp-Entry "get-edited-modified?" #f 156 11 156 31 ("editor" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" #f 160 11 160 31 ("editor" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" #f 164 11 164 22 ("editor" "get-body" "show-text-cursor")}
        {Lisp-Entry "focused-editor" #f 168 11 168 25 ("editor" "get-body")}
        {Lisp-Entry "combo-choose" #f 172 29 172 41 ()}}}})
"Combo-Row-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Combo-Row-Editor.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Combo-Row-Editor" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Combo-Row-Editor" #f 46 7 46 23 ("Combo-Box")
        {Lisp-Entry "value-row" #f 49 12 49 21 ("set-value-row" "get-value-row")}
        {Lisp-Entry "form-model" #f 52 11 52 21 ("nextmethod" "else" "Combo-Value-Text-View" "body" "get-name" "case" "form")}
        {Lisp-Entry "get-value-row" #f 58 18 58 31 ("value-row")}
        {Lisp-Entry "set-value-row" #f 62 18 62 31 ("body" "'body" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "button-action" #f 67 11 67 24 ("nextmethod" "value-row" "combo-choose" "unless")}
        {Lisp-Entry "content-change" #f 72 11 72 25 ("nextmethod" "enter-edited-value" "popup" "editor-return" "validate-value" "value-row" "get-limit-to-list?" "and" "when" "return" "case" "origin")}
        {Lisp-Entry "combo-choice" #f 79 11 79 23 ("value-row" "enter-combo-choice")}}
      {Lisp-Entry "Combo-Value-Text-View" #f 88 7 88 28 ("Combo-Text-View")
        {Lisp-Entry "value-row" #f 91 12 91 21 ("set-value-row" "get-value-row")}
        {Lisp-Entry "get-value-row" #f 99 18 99 31 ("value-row")}
        {Lisp-Entry "set-value-row" #f 103 18 103 31 ("value-row" "set!" "value")}
        {Lisp-Entry "up-arrow-move" #f 112 11 112 24 ("value-row" "editor-up-arrow" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" #f 116 11 116 26 ("value-row" "editor-down-arrow" "scroll?" "extend?")}
        {Lisp-Entry "tab-press" #f 120 11 120 20 ("value-row" "editor-tab" "end-completion" "has-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "document-menu" #f 126 11 126 24 ()}
        {Lisp-Entry "focus-validate" #f 136 11 136 25 ("value-row" "editor-focus-validate" "view")}
        {Lisp-Entry "focus-lose" #f 140 11 140 21 ("value-row" "editor-focus-lose" "nextmethod" "view")}
        {Lisp-Entry "focus-master" #f 145 11 145 23 ("value-row" "get-tree")}}}})
"Combo-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Combo-Text-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Combo-Text-Actions" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Combo-Text-Actions" #f 46 7 46 25 ("Return" ":control" "Shortcut" "shortcut:" "on-push-button" ":focus" "Event-Handler" "action-handler:" "push-button" "name:" "Actions")}}})
"Combo-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Combo-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Combo-Text-View" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Combo-Text-View" #f 45 7 45 22 ("Text-View")
        {Lisp-Entry "get-combo" #f 53 11 53 20 ("parent" "get-parent")}
        {Lisp-Entry "focus-actions" #f 62 11 62 24 ("nextmethod" "combo-text" "'combo-text" "find-actions" "cons")}
        {Lisp-Entry "on-push-button" #f 67 11 67 25 ("push-button" "get-combo" "combo" "let" "evt")}
        {Lisp-Entry "return-press" #f 77 11 77 23 ("return" "'return" "get-combo" "content-change" "key")}
        {Lisp-Entry "mouse-enter" #f 86 11 86 22 ("get-pick" "enter-child" "get-combo" "combo" "let" "nextmethod" "selectable?" "if")}
        {Lisp-Entry "mouse-leave" #f 93 11 93 22 ("get-pick" "leave-child" "get-combo" "combo" "let" "nextmethod" "selectable?" "if")}
        {Lisp-Entry "mouse-down" #f 100 11 100 21 ("get-pick" "child-down" "get-combo" "combo" "let" "nextmethod" "selectable?" "if" "pos")}
        {Lisp-Entry "drag-up" #f 107 11 107 18 ("get-pick" "child-up" "get-combo" "combo" "let" "nextmethod" "selectable?" "if" "rest" "pos")}
        {Lisp-Entry "close-popups" #f 119 11 119 23 ("invalidate-view" "double-click" "mouse-down" "memq?" "unless" "nextmethod" "get-combo" "get-editable?" "not" "if" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "auto-complete?" #f 132 11 132 25 ("get-combo" "get-complete?")}
        {Lisp-Entry "completion-name" #f 136 11 136 26 ("either" "0" "Cell" "Range$Cell$" "new" "get-string" "string-append" "get-row" "row" "not" "previous-cell" "prev" "let" "get-end" "has-selection?" "if" "get-char" "syntax" "text-constituent?" "unless" "postfix" "pos")}
        {Lisp-Entry "complete-name?" #f 145 11 145 25 ("1" ">=" "size")}
        {Lisp-Entry "symbol-completions" #f 149 11 149 29 ("di=?" "test:" "complete" "Symbol-Completer" "new" "completer" "present-choice" "choice" "function" "map" "domain" "get-choices" "choices" "get-combo" "combo" "let*" "favorites" "name")}
        {Lisp-Entry "completions-prefix" #f 157 11 157 29 ("di=?" "test:" "prefix" "completions")}}}})
"Combo-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Combo-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Combo-View" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Combo-View" #f 48 7 48 17 ("on-pick" ":form" "Event-Handler" "action-handler:" "Medium" "Color" "background:" "pick" "name:" "View")
        {Lisp-Entry "kind" #f 51 12 51 16 ("set-kind" "get-kind" "pick" "'pick")}
        {Lisp-Entry "state" #f 54 8 54 13 ("inactive" "'inactive")}
        {Lisp-Entry "get-body" #f 67 18 67 26 ("body" "'body" "locate")}
        {Lisp-Entry "get-pick" #f 71 18 71 26 ("pick" "'pick" "locate")}
        {Lisp-Entry "get-kind" #f 75 18 75 26 ("kind")}
        {Lisp-Entry "set-kind" #f 79 18 79 26 ("invalidate-view" "get-pick" "set-enabled?" "'choose" "eq?" "when" "set!" "error" "choose" "pick" "kind" "memq?" "not" "if" "value")}
        {Lisp-Entry "get-state" #f 88 18 88 27 ("state")}
        {Lisp-Entry "set-state" #f 92 18 92 27 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "picker-view?" #f 102 11 102 23 ("or" "eq?" "get-selectable?" "if" "get-pick" "pick" "get-body" "text" "let" "view")}
        {Lisp-Entry "on-pick" #f 116 18 116 25 ("button-action" "evt")}
        {Lisp-Entry "button-action" #f 120 29 120 42 ()}
        {Lisp-Entry "push-button" #f 124 18 124 29 ("inactive" "'inactive" "button-action" "pushed" "'pushed" "set-state" "begin" "unwind-protect")}
        {Lisp-Entry "child-state" #f 137 18 137 29 ("else" "pushed" "'pushed" "pick" "highlighted" "'highlighted" "body" "out-choose" "choose-failed" "choose" "state" "case" "get-name" "name" "let" "child")}
        {Lisp-Entry "highlight-pick?" #f 144 26 144 41 ()}
        {Lisp-Entry "popup-destroy" #f 153 11 153 24 ("invalidate-view" "inactive" "'inactive" "out-choose" "highlighted" "'highlighted" "set-state" "choose" "state" "case" "popup")}
        {Lisp-Entry "layout" #f 165 11 165 17 ("9" "22" "Dimension" "set-size" "0" "Point" "set-position" "get-pick" "pick" "get-body" "body" "let")}
        {Lisp-Entry "enter-child" #f 179 18 179 29 ("invalidate-view" "choose" "'choose" "out-choose" "pushed" "'pushed" "out-pushed" "highlighted" "'highlighted" "set-state" "inactive" "state" "case" "mouse-down-view" "picker-view?" "mouse-down?" "not" "or" "get-enabled?" "and" "when" "child")}
        {Lisp-Entry "leave-child" #f 188 18 188 29 ("invalidate-view" "out-choose" "'out-choose" "choose" "out-pushed" "'out-pushed" "pushed" "inactive" "'inactive" "set-state" "highlighted" "state" "case" "child")}
        {Lisp-Entry "child-down" #f 196 18 196 28 ("invalidate-view" "'highlighted" "close-popups" "choose-failed" "'choose-failed" "Popup" "is-not?" "inactive" "'inactive" "not" "popup" "let" "kind" "choose" "'choose" "highlighted" "state" "pick" "down" "pushed" "'pushed" "set-state" "body" "get-name" "case" "enabled?" "when" "child")}
        {Lisp-Entry "child-up" #f 223 18 223 26 ("invalidate-view" "out-pushed" "highlighted" "'highlighted" "choose-failed" "pushed" "state" "case" "inactive" "'inactive" "set-state" "choose" "'choose" "kind" "eq?" "if" "up" "unwind-protect" "enabled?" "when" "child")}}}})
"Command-Execute-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "Command-Execute-Actions.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.Command-Execute-Actions" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Command-Execute-Actions" #f 46 7 46 30 (":control" "Shortcut" "shortcut:" "on-done" ":focus" "Event-Handler" "action-handler:" "done" "name:" "Actions")}}})
"Command-Line"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "process" "Command-Line.jazz"} 1226584785
    {Lisp-Entry "jazz.system.process.Command-Line" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Command-Line" #f 45 7 45 19 ("Object")}
      {Lisp-Entry "Command-Line" #f 51 7 51 19 ("Object")
        {Lisp-Entry "for-each-action" #f 59 23 59 38 ("'argument" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "'section" "arguments" "section" "list" "'action" "sections" "action-help" "action" "bind" "info" "function" "for-each" "actions" "proc")}
        {Lisp-Entry "present-version" #f 80 16 80 31 ("present" "format" "version" "name")}
        {Lisp-Entry "present-syntax" #f 86 16 86 30 ("format" "name")}
        {Lisp-Entry "present-help" #f 91 16 91 28 ("get-output-string" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "section" "format" "action-help" "bind" "action" "case" "info" "type" "function" "for-each-action" "open-output-string" "printer" "let" "actions")}
        {Lisp-Entry "present-examples" #f 110 16 110 32 ("get-output-string" "present-argument-value" "when" "argument-example" "bind-optionals" "rest" "argument-help" "argument" "get-process" "process-name" "format" "action-help" "bind" "action" "case" "info" "type" "function" "for-each-action" "open-output-string" "printer" "let" "actions")}
        {Lisp-Entry "present-argument-value" #f 127 16 127 38 ("format" "string?" "if" "value")}
        {Lisp-Entry "command-help" #f 133 23 133 35 ("title:" "present-examples" "present-help" "present-syntax" "present-version" "format" "message-box" "actions" "version" "name")}}}})
"Command-Search-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "Command-Search-Actions.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.Command-Search-Actions" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Command-Search-Actions" #f 46 7 46 29 ("Return" "on-search-finish" "search-finish" "on-search-backward" "search-backward" ":control" "Shortcut" "shortcut:" "on-search-forward" ":focus" "Event-Handler" "action-handler:" "search-forward" "name:" "Actions")}}})
"Command-Shell"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "Command-Shell.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.Command-Shell" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Command-Shell" #f 49 7 49 20 ("content" "vscroll?:" "hscroll?:" "scroller" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "install" #f 58 11 58 18 ("get-controller" "set-tool?" "scroller" "'scroller" "locate" "set-client" "new-text" "text" "let" "nextmethod" "rest")}
        {Lisp-Entry "new-text" #f 65 11 65 19 ("text" "'text" "name:" "scroller" "'scroller" "locate" "get-content" "parent:" "Command-Text-View" "new")}
        {Lisp-Entry "get-text" #f 76 18 76 26 ("text" "'text" "scroller" "'scroller" "locate" "get-content" "child")}
        {Lisp-Entry "get-string-content" #f 80 18 80 36 ("get-text" "get-string-content")}}}})
"Command-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "Command-Text-View.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.Command-Text-View" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Command-Text-View" #f 49 7 49 24 ("tooltip-text:" "tooltip?:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "show-unfocused-selection?:" "focus-selects-all?:" "IDE-Text-View")
        {Lisp-Entry "mode" #f 52 8 52 12 ("generate")}
        {Lisp-Entry "client" #f 53 8 53 14 ("generate")}
        {Lisp-Entry "search-context" #f 54 8 54 22 ()}
        {Lisp-Entry "search-ranges" #f 55 8 55 21 ()}
        {Lisp-Entry "search-pristine?" #f 56 8 56 24 ()}
        {Lisp-Entry "auto-complete?" #f 75 11 75 25 ()}
        {Lisp-Entry "focus-gain" #f 84 11 84 21 ("client" "set!" "nextmethod" "old")}
        {Lisp-Entry "focus-actions" #f 89 11 89 24 ("nextmethod" "command-execute" "'command-execute" "else" "command-search" "'command-search" "find-actions" "search-backward" "search-forward" "mode" "case" "cons")}
        {Lisp-Entry "key-press" #f 101 11 101 20 ("search" "search-backward" "search-forward" "mode" "case" "nextmethod" "key")}
        {Lisp-Entry "backspace-press" #f 108 11 108 26 ("search" "search-backward" "search-forward" "mode" "case" "nextmethod" "word?" "word?:" "key")}
        {Lisp-Entry "select-mode" #f 120 18 120 29 ("acquire-focus" "select-mode-execute" "else" "select-mode-search-backward" "search-backward" "select-mode-search-forward" "search-forward" "case" "value")}
        {Lisp-Entry "select-mode-execute" #f 133 11 133 30 ("execute" "'execute" "mode" "set!")}
        {Lisp-Entry "on-done" #f 137 11 137 18 ("acquire-focus" "client" "when" "evt")}
        {Lisp-Entry "select-mode-search-forward" #f 147 11 147 37 ("search-pristine?" "search-forward" "'search-forward" "mode" "set!")}
        {Lisp-Entry "select-mode-search-backward" #f 152 11 152 38 ("search-pristine?" "search-backward" "'search-backward" "mode" "set!")}
        {Lisp-Entry "on-search-forward" #f 157 11 157 28 ("text-ending" "set-caret" "search-forward" "'search-forward" "search" "evt")}
        {Lisp-Entry "on-search-backward" #f 162 11 162 29 ("text-ending" "set-caret" "search-backward" "'search-backward" "search" "evt")}
        {Lisp-Entry "on-search-finish" #f 167 11 167 27 ("search-finish" "evt")}
        {Lisp-Entry "search" #f 171 11 171 17 ("search-key" "key" "function" "for-each" "last" "set-selection" "not" "empty-string?" "and" "if" "subseq" "suffix" "cardinality" "reset-prefix" "prefix" "get-target" "target" "get-string-content" "content" "let" "client" "get-selection" "list" "search-ranges" "ignore-case?:" "make-search-context" "search-context" "set!" "search-pristine?" "when" "again?" "direction")}
        {Lisp-Entry "search-pos" #f 190 11 190 21 ("get-end" "search-backward" "get-start" "search-forward" "case" "direction" "range")}
        {Lisp-Entry "reset-prefix" #f 196 11 196 23 ("1" "+" "search-ranges" "set!" "0" "get-target" "subseq" "search-context" "set-target" "len")}
        {Lisp-Entry "search-key" #f 201 11 201 21 ("set-selection" "Range$Cell$" "new" "context" "bind" "bell" "begin" "append" "set!" "set-car!" "last-pair" "pair" "range" "update-range" "define" "reverse?:" "start:" "list" "client" "text-multisearch" "found" "set-target" "'search-backward" "eq?" "reverse?" "cardinality" "nu+" "search-backward" "get-start" "get-end" "search-forward" "case" "pos" "search-ranges" "last" "last-range" "format" "concatenate" "search-context" "get-target" "not" "if" "target" "let" "direction" "key")}
        {Lisp-Entry "search-finish" #f 228 11 228 24 ("acquire-focus" "get-start" "search-backward" "get-end" "search-forward" "mode" "case" "set-caret" "client" "when")}}}})
"CommonLisp-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "commonlisp" "text" "CommonLisp-Explorer.jazz"} 1226584778
    {Lisp-Entry "jazz.language.commonlisp.text.CommonLisp-Explorer" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "CommonLisp-Explorer" #f 46 7 46 26 ("Lisp-Explorer")
        {Lisp-Entry "Modifiers" #f 49 14 49 23 ()}
        {Lisp-Entry "get-modifiers" #f 53 11 53 24 ("Modifiers")}
        {Lisp-Entry "Toplevels" #f 62 14 62 23 ("defstruct" "defparameter" "defvar" "defmacro" "defun")}
        {Lisp-Entry "definition-name?" #f 66 11 66 27 ("Toplevels" "memq?" "name")}
        {Lisp-Entry "walk-declaration" #f 75 11 75 27 ("exit-list" "unless" "walk-unknown" "else" "walk-define-variable" "define-modify-macro" "define-condition" "defpackage" "defclass" "defstruct" "defparameter" "defvar" "walk-define-macro" "defmacro" "walk-define" "defgeneric" "defmethod" "defun" "walk-eval-when" "eval-when" "case" "find-marked-symbol" "symbol" "'symbol" "eq?" "and" "kind" "code" "'code" "start" "forward-expr" "if" "end" "get-row" "=" "not" "or" "when" "enter-list" "list?" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-eval-when" #f 101 11 101 25 ("walk-declarations" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define" #f 105 11 105 22 ("walk-declarations" "exit-list" "walk-parameters" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define-macro" #f 123 11 123 28 ("walk-declarations" "exit-list" "code" "'code" "walk-expressions" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define-variable" #f 141 11 141 31 ("walk-declarations" "exit-list" "walk-parameters" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-unknown" #f 159 11 159 23 ("walk-expressions" "code" "'code" "walk-expression" "when" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}}}})
"CommonLisp-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "commonlisp" "parser" "CommonLisp-Parser.jazz"} 1226584778
    {Lisp-Entry "jazz.language.commonlisp.parser.CommonLisp-Parser" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "CommonLisp-Parser" #f 47 7 47 24 ("Lisp-Parser")
        {Lisp-Entry "explorer-class" #f 50 11 50 25 ("CommonLisp-Explorer" "file")}
        {Lisp-Entry "text-view-class" #f 54 11 54 26 ("CommonLisp-Text-View")}}}})
"CommonLisp-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "commonlisp" "text" "CommonLisp-Text-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.language.commonlisp.text.CommonLisp-Text-Preferences" #f 37 9 37 66 ("jazz")
      {Lisp-Entry "CommonLisp-Text-Preferences" #f 50 7 50 34 ("completions:" "quotation-color:" "named-string-color:" "string-color:" "boolean-color:" "number-color:" "Ochre" "char-color:" "keyword-color:" "Dark-Green" "declaration-color:" "Dark-Blue" "declaration-keyword-color:" "Text-Gray" "expr-comment-color:" "Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Lisp-Text-Preferences")
        {Lisp-Entry "get-categorized-properties" #f 86 11 86 37 ("translate-keys?" "keyword-color" "declaration-color" "expr-comment-color" "comment-color" "title-color" "completions")}
        {Lisp-Entry "get-row-instance" #f 90 11 90 27 ("nextmethod" "else" "Boolean-Row" "translate-keys?" "Completion-List-Row" "completions" "Color-Row" "new" "keyword-color" "declaration-color" "expr-comment-color" "comment-color" "title-color" "field-name" "case" "property")}}}})
"CommonLisp-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "commonlisp" "text" "CommonLisp-Text-View.jazz"} 1226584778
    {Lisp-Entry "jazz.language.commonlisp.text.CommonLisp-Text-View" #f 37 9 37 59 ("jazz")
      {Lisp-Entry "CommonLisp-Text-View" #f 49 7 49 27 ("tooltip?:" "Lisp-Text-View")
        {Lisp-Entry "install" #f 56 11 56 18 ("Red" "Color" "frame:" "Reference" "'Reference" "get-quotation-color" "Quotation" "'Quotation" "get-named-string-color" "Named-String" "'Named-String" "get-delimited-string-color" "Delimited-String" "'Delimited-String" "get-string-color" "String" "'String" "get-boolean-color" "Boolean" "'Boolean" "get-char-color" "Char" "'Char" "get-keyword-color" "Keyword" "'Keyword" "get-declaration-color" "Declaration" "'Declaration" "get-declaration-keyword-color" "Declaration-Keyword" "'Declaration-Keyword" "get-expr-comment-color" "Expr-Comment" "'Expr-Comment" "get-comment-color" "Comment" "'Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 74 16 74 29 ("commonlisp-text" "'commonlisp-text" "rest")}
        {Lisp-Entry "default-extension" #f 78 11 78 28 ()}
        {Lisp-Entry "extensions" #f 82 11 82 21 ()}
        {Lisp-Entry "get-context-menu" #f 91 11 91 27 ("CommonLisp-Text-Menu" "new")}
        {Lisp-Entry "default-preferences" #f 100 14 100 33 ("completions:" "Dark-Blue" "keyword-color:" "Dark-Green" "declaration-color:" "Dark-Orange" "expr-comment-color:" "Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "form>>")}
        {Lisp-Entry "preferences" #f 105 11 105 22 ("commonlisp-text" "documents" "get-preferences")}
        {Lisp-Entry "declaration-style" #f 109 11 109 28 ("Declaration" "'Declaration" "documented?")}
        {Lisp-Entry "Specials" #f 118 12 118 20 ("receive" "prog1" "parameterize" "letrec" "let*" "let" "lambda" "if" "2" "do" "define-macro" "define" "cond" "1" "case" "call/cc" "0" "begin")}
        {Lisp-Entry "get-specials" #f 136 11 136 23 ("Specials")}
        {Lisp-Entry "explorer-class" #f 145 11 145 25 ("CommonLisp-Explorer")}}
      {Lisp-Entry "CommonLisp-Text-Menu" #f 154 7 154 27 ("recolorize-syntax" "update-catalog" "edit-references" "code-text" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "edit-definitions" "name:" "Context-Menu")}}})
"Compare-Databases"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Databases.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Databases" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Compare-Databases" #f 46 7 46 24 ("title:" "trees" "name:" "Compare-Forms")
        {Lisp-Entry "external-name" #f 54 16 54 29 ("compare-databases" "'compare-databases" "rest")}
        {Lisp-Entry "host-title" #f 63 16 63 26 ()}}}})
"Compare-Diff"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Diff.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Diff" #f 38 9 38 44 ("jazz")
      {Lisp-Entry "Compare-Diff" #f 46 7 46 19 ("Object")
        {Lisp-Entry "green" #f 49 18 49 23 ("generate")}
        {Lisp-Entry "blue" #f 50 18 50 22 ("generate")}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("blue" "green" "set!" "nextmethod" "b" "g")}
        {Lisp-Entry "get-start" #f 59 21 59 30 ("blue" "get-start" "green" "if")}
        {Lisp-Entry "get-end" #f 63 21 63 28 ("green" "get-end" "blue" "if")}
        {Lisp-Entry "print" #f 67 11 67 16 ("blue" "green" "format" "function" "self" "print-unreadable" "readably" "printer")}}}})
"Compare-Directories"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Directories.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Directories" #f 38 9 38 51 ("jazz")
      {Lisp-Entry "Compare-Directories" #f 52 7 52 26 ("right-value" "left-value" "blue" "blue-border" "dir" "protocol:" "green" "green-border" "content" "title:" "trees" "name:" "Compare-Trees")
        {Lisp-Entry "scanned-date" #f 55 8 55 20 ()}
        {Lisp-Entry "external-name" #f 70 16 70 29 ("compare-directories" "'compare-directories" "rest")}
        {Lisp-Entry "host-icon" #f 79 16 79 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 83 16 83 26 ()}
        {Lisp-Entry "host-position" #f 87 16 87 29 ("110" "120" "Point")}
        {Lisp-Entry "host-size" #f 91 16 91 25 ("500" "795" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 95 11 95 26 ("groupware")}
        {Lisp-Entry "on-scan-date" #f 104 11 104 23 ("get-date" "date-universal->local" "set-base-date" "scanned-date" "when" "evt")}
        {Lisp-Entry "new-comparer" #f 114 11 114 23 ("Directory-Comparer" "new")}
        {Lisp-Entry "get-merge-date" #f 118 11 118 25 ("get-time" "when" "get-base-date" "date" "let" "mode")}
        {Lisp-Entry "scan-feedback" #f 125 11 125 24 ("trim-left" "user-message" "right" "left")}
        {Lisp-Entry "present-root" #f 134 11 134 23 ("format" "string=?" "if" "r" "l" "let" "else" "present-item" "not" "cond" "right" "left")}
        {Lisp-Entry "present-item" #f 147 11 147 23 ("get-name" "item")}
        {Lisp-Entry "present-value" #f 151 11 151 24 ("date-universal->local" "time-utc->date" "present-date" "not" "if" "date" "kind")}
        {Lisp-Entry "backup-action" #f 157 11 157 24 ("copy-right" "'copy-right" ">" "date-local->universal" "base-date" "let" "if" "right-date" "right" "left-date" "left" "local-date")}
        {Lisp-Entry "merge-action" #f 166 11 166 23 ("get-name" "format" "debug-string" ":not-equal" "Depot-Moniker" "is?" ":equal" ":less" "memq?" "merge" "'merge" ":greater" "eq?" "r" "compare" "l" "else" "copy-right" "'copy-right" "copy-left" "'copy-left" ">" "if" "not" "and" "cond" "date-local->universal" "base-date" "let" "when" "right-date" "right" "left-date" "left" "local-date")}
        {Lisp-Entry "Not-Ignored-Leaves" #f 199 14 199 32 ()}
        {Lisp-Entry "overwrite-read-only?" #f 203 29 203 49 ()}
        {Lisp-Entry "add-item" #f 207 11 207 19 ("nextmethod" "else" "get-list" "user-message" "dir" "feedback:" "add-path?" "path" "function" "copy?:" "copy-directory" "Directory" "is?" "and" "cond" "dst" "src")}
        {Lisp-Entry "add-path?" #f 215 29 215 38 ("get-extension" "Not-Ignored-Leaves" "ignored-extensions" "null?" "is-not?" "or" "member?" "not" "and" "else" "ignored-leaves" "File" "ignored-nodes" "Directory" "typecase" "ignored" "get-name" "name" "let" "path")}
        {Lisp-Entry "copy-item" #f 228 11 228 20 ("user-message" "error" "overwrite-read-only?" "overwrite-read-only?:" "copy-file" "File" "is?" "and" "if" "dst" "src")}
        {Lisp-Entry "delete-item" #f 235 11 235 22 ("delete-item" "'delete-item" "unimplemented" "else" "get-list" "user-message" "dir" "function" "feedback:" "delete-directory" "Directory" "overwrite-read-only?" "overwrite-read-only?:" "delete-file" "File" "typecase" "item")}
        {Lisp-Entry "add-project" #f 246 11 246 22 ("get-base" "add-project" "dir" "dst")}
        {Lisp-Entry "on-compare" #f 255 11 255 21 ("compare-trees" "scanned-date" "set!" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "compare-leaves" #f 261 11 261 25 ("compare-files" "else" "format" "message-box" "compare-forms" "member?" "cond" "get-extension" "ext" "let" "user-data" "right" "left")}
        {Lisp-Entry "compare-files" #f 268 11 268 24 ("text" "'text" "locate" "acquire-focus" "set-visible?" "bring-to-front" "message-box" "close" "begin" "not" "if" "compare-monikers" "has-differences?" "get-guest" "comparer" "host-visible?:" "Compare-Files" "new-frame" "frame" "let*" "function" ":wait" "with-cursor" "user-data" "right" "left")}
        {Lisp-Entry "compare-monikers" #f 283 29 283 45 ("compare-directory-cookie:" "self" "compare-directory:" "compare-monikers" "user-data" "right" "left" "comparer")}
        {Lisp-Entry "compare-forms" #f 287 11 287 24 ("set-visible?" "bring-to-front" "get-guest" "compare-trees" "right-moniker:" "left-moniker:" "host-visible?:" "Compare-Forms" "new-frame" "frame" "let" "function" ":wait" "with-cursor" "user-data" "right" "left")}
        {Lisp-Entry "add-to-favorites" #f 301 11 301 27 ("Favorite-Compare-Directories" "Favorites-Manager" "singleton-palette" "get-guest" "add-to-favorites" "ignored-extensions" "ignored-extensions:" "ignored-leaves" "ignored-leaves:" "ignored-nodes" "ignored-nodes:" "right:" "left:" "mode:" "list" "initargs" "get-right-moniker" "right" "get-left-moniker" "left" "get-mode" "mode" "title" "let*")}
        {Lisp-Entry "make-item" #f 315 11 315 20 ("get-project?" "error" "else" "Directory" "join" "Depot-Moniker" "is?" "if" "new" "File" "typecase" "get-name" "get-list" "append" "list" "let" "father" "root" "item")}
        {Lisp-Entry "tree-base" #f 342 11 342 20 ("get-list" "length" "tree")}
        {Lisp-Entry "trim-left" #f 346 11 346 20 ("left-base" "get-list" "tail" "item")}
        {Lisp-Entry "trim-right" #f 350 11 350 21 ("right-base" "get-list" "tail" "item")}
        {Lisp-Entry "get-compare-menu" #f 359 11 359 27 ("Compare-Directories-Menu" "new")}}
      {Lisp-Entry "Compare-Directories-Menu" #f 363 7 363 31 ("on-scan-date" ":document" "Event-Handler" "action-handler:" "reset-actions" "before:" "title:" "scanned-date" "name:" "Compare-Menu")}}})
"Compare-Directories-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "preference" "Compare-Directories-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.preference.Compare-Directories-Preferences" #f 37 9 37 66 ("jazz")
      {Lisp-Entry "Compare-Directories-Preferences" #f 46 7 46 38 ("Bitmap-Resource" "icon:" "title:" "Compare-Trees-Preferences")
        {Lisp-Entry "get-addable-classes" #f 53 11 53 30 ("Favorite-Compare-Directories" "list")}
        {Lisp-Entry "get-addable-details" #f 63 11 63 30 ("check-algorithm" "ignored-extensions" "ignored-leaves" "ignored-nodes" "right" "250" "left" "100" "mode" "150" "name-info")}}}})
"Compare-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Entry" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Compare-Entry" #f 45 7 45 20 ("Object")
        {Lisp-Entry "parent" #f 48 18 48 24 ("generate")}
        {Lisp-Entry "kind" #f 49 18 49 22 ("generate")}
        {Lisp-Entry "left" #f 50 18 50 22 ("generate")}
        {Lisp-Entry "left-value" #f 51 18 51 28 ("generate")}
        {Lisp-Entry "right" #f 52 18 52 23 ("generate")}
        {Lisp-Entry "right-value" #f 53 18 53 29 ("generate")}
        {Lisp-Entry "action" #f 54 18 54 24 ("generate")}
        {Lisp-Entry "children" #f 55 18 55 26 ("generate")}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("children~self" "action~self" "right-value~self" "right~self" "left-value~self" "left~self" "kind~self" "parent~self" "set!" "nextmethod" "right-value" "right" "left-value" "left" "kind" "parent")}
        {Lisp-Entry "print" #f 70 11 70 16 ("action" "right" "left" "format" "function" "self" "print-unreadable" "readably" "printer")}}}})
"Compare-Files"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Files.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Files" #f 38 9 38 45 ("jazz")
      {Lisp-Entry "Compare-Files" #f 48 7 48 20 ("Compare-Texts")
        {Lisp-Entry "external-name" #f 51 16 51 29 ("compare-files" "'compare-files" "rest")}
        {Lisp-Entry "install-configuration" #f 60 18 60 39 ("get-blue" "get-green" "install-monikers" "config")}
        {Lisp-Entry "add-to-favorites" #f 69 11 69 27 ("Favorite-Compare-Files" "Favorites-Manager" "singleton-palette" "get-guest" "add-to-favorites" "blue:" "green:" "list" "initargs" "'blue" "blue" "'green" "locate" "get-moniker" "green" "title" "let*")}}}})
"Compare-Forms"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Forms.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Forms" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Compare-Forms" #f 46 7 46 20 ("green" "green-border" "file" "protocol:" "blue" "blue-border" "title:" "trees" "name:" "Compare-Trees")
        {Lisp-Entry "host-icon" #f 63 16 63 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 67 16 67 26 ()}
        {Lisp-Entry "form-present" #f 76 11 76 23 ("get-presentation" "get-name" "form")}
        {Lisp-Entry "form-image" #f 82 11 82 21 ("get-model" "get-class-image" "Bitmap-Resource" "form")}
        {Lisp-Entry "new-comparer" #f 93 11 93 23 ("Form-Comparer" "new")}
        {Lisp-Entry "scan-feedback" #f 97 11 97 24 ("form-present" "user-message" "right" "left")}
        {Lisp-Entry "moniker->tree" #f 101 11 101 24 ("load-form" "moniker")}
        {Lisp-Entry "present-root" #f 110 11 110 23 ("format" "=" "if" "r" "present-item" "l" "let" "right" "left")}
        {Lisp-Entry "present-item" #f 118 11 118 23 ("car" "form-present" "Form" "is?" "if" "item")}
        {Lisp-Entry "present-value" #f 124 11 124 24 ("->string" "leaf" "node" "case" "value" "kind")}
        {Lisp-Entry "entry-image" #f 130 11 130 22 ("Bitmap-Resource" "leaf" "form-image" "node" "get-kind" "case" "ref" "entry")}}}})
"Compare-Forms-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "preference" "Compare-Forms-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.preference.Compare-Forms-Preferences" #f 37 9 37 60 ("jazz")
      {Lisp-Entry "Compare-Forms-Preferences" #f 46 7 46 32 ("Bitmap-Resource" "icon:" "title:" "Compare-Trees-Preferences")}}})
"Compare-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Item.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Item" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Compare-Item" #f 45 7 45 19 ("Object")
        {Lisp-Entry "moniker" #f 48 18 48 25 ("generate")}
        {Lisp-Entry "name" #f 49 18 49 22 ("generate")}
        {Lisp-Entry "getter" #f 50 26 50 32 ("generate")}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("value~self" "name~self" "moniker~self" "set!" "nextmethod" "value" "name" "moniker")}
        {Lisp-Entry "print" #f 60 11 60 16 ("value" "name" "moniker" "format" "function" "self" "print-unreadable" "readably" "printer")}}}})
"Compare-Line"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Line.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Line" #f 38 9 38 44 ("jazz")
      {Lisp-Entry "Compare-Line" #f 47 7 47 19 ("Object")
        {Lisp-Entry "moniker" #f 50 18 50 25 ("generate")}
        {Lisp-Entry "string" #f 51 18 51 24 ("generate")}
        {Lisp-Entry "rank" #f 52 18 52 22 ("generate")}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("rank" "string" "moniker" "set!" "nextmethod" "r" "s" "m")}
        {Lisp-Entry "print" #f 62 11 62 16 ("string" "rank" "moniker" "get-base" "format" "function" "self" "print-unreadable" "readably" "printer")}}}})
"Compare-Node"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Node.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Node" #f 38 9 38 44 ("jazz")
      {Lisp-Entry "Compare-Node" #f 46 7 46 19 ("Object")
        {Lisp-Entry "lines" #f 49 18 49 23 ("generate")}
        {Lisp-Entry "children" #f 50 18 50 26 ("generate")}
        {Lisp-Entry "key" #f 51 18 51 21 ("generate")}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("key" "lines" "set!" "nextmethod" "k" "l")}
        {Lisp-Entry "set-lines" #f 60 21 60 30 ("lines" "set!" "l")}
        {Lisp-Entry "print" #f 64 11 64 16 ("children" "lines" "length" "key" "string" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "add-line" #f 73 21 73 29 ("cons" "lines" "set!" "line")}
        {Lisp-Entry "add-child" #f 77 21 77 30 ("cons" "children" "set!" "node")}
        {Lisp-Entry "get-moniker-line" #f 81 11 81 27 ("eq?" "test:" "get-moniker" "line" "function" "key:" "lines" "find-in" "moniker")}
        {Lisp-Entry "extract-diff" #f 85 21 85 33 ("get-moniker-line" "list" "moniker2" "moniker1")}}}})
"Compare-Run"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Run.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Run" #f 38 9 38 43 ("jazz")
      {Lisp-Entry "Compare-Run" #f 47 7 47 18 ("Object")
        {Lisp-Entry "color" #f 50 18 50 23 ("generate")}
        {Lisp-Entry "start" #f 51 18 51 23 ("generate")}
        {Lisp-Entry "end" #f 52 18 52 21 ("generate")}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("end" "start" "color" "set!" "nextmethod" "e" "s" "c")}
        {Lisp-Entry "get-range" #f 62 21 62 30 ("1" "+" "paragraph-length" "get-limit" "end" "=" "if" "0" "start" "Cell" "Range$Cell$" "new" "text")}
        {Lisp-Entry "get-height" #f 66 21 66 31 ("get-start" "get-end" "get-row" "-" "get-range" "range" "let" "text")}
        {Lisp-Entry "print" #f 71 11 71 16 ("end" "start" "color" "format" "function" "self" "print-unreadable" "readably" "printer")}}}})
"Compare-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Text-Actions.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Text-Actions" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Compare-Text-Actions" #f 47 7 47 27 ("F12" "on-keep-both" "keep-both" "on-keep-blue-file" "keep-blue-file" "keep-blue" "F11" "on-keep-blue" "keep-blue&next-diff" "on-keep-green-file" "keep-green-file" "keep-green" "F10" "next?:" "on-keep-green" "keep-green&next-diff" "on-compare-previous" "compare-previous" "on-compare-next" "compare-next" ":shift" "on-previous-diff" "previous-diff" "F9" "on-next-diff" ":focus-guest" "next-diff" "on-edit-references" "edit-references" "on-edit-definitions" ":focus" "edit-definitions" "on-save-to-both" "save-to-both" "on-save-to-blue" "save-to-blue" "on-save-to-green" "save-to-green" "on-save-as" "save-as" ":control" "Shortcut" "shortcut:" "on-save" "save" "on-open-blue" "open-blue" "on-open-green" ":document" "Event-Handler" "action-handler:" "open-green" "name:" "Actions")}}})
"Compare-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Text-View.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Text-View" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Compare-Text-View" #f 51 7 51 24 ("Code" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "IDE-Text-View")
        {Lisp-Entry "focus-actions" #f 63 11 63 24 ("nextmethod" "compare-text" "'compare-text" "find-actions" "cons")}
        {Lisp-Entry "context-menu" #f 73 11 73 23 ("get-context-menu" "track-popup-menu" "move-caret:" "context-menu-click" "always" "'always" "else" "never" "'never" "outside-selection" "'outside-selection" "not" "and" "cond" "move-caret" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "pos")}
        {Lisp-Entry "edition-workspace" #f 84 11 84 28 ("groupware" "'groupware")}
        {Lisp-Entry "colorize-syntax" #f 93 11 93 26 ("rest")}
        {Lisp-Entry "recolorize-text" #f 97 11 97 26 ("end-row" "start")}
        {Lisp-Entry "mouse-down" #f 106 11 106 21 ("get-start" "get-row" "line-color" "user-message" "nextmethod" "pos")}
        {Lisp-Entry "line-color" #f 111 11 111 21 ("else" "blue" "'blue" "Blue-Color" "green" "'green" "Green-Color" "eq?" "cond" "get-color" "color" "let" "Text-Style" "is?" "get-style" "style" "first" "run" "get-guest" "guest" "get-frame" "frame" "length" "1" "=" "get-runs" "runs" "get-paragraph" "paragraph" "let*" "get-limit" "<=" "0" ">=" "and" "when" "row")}
        {Lisp-Entry "get-run" #f 127 11 127 18 ("Compare-Run" "new" "increase!" "+" "decrease!" "1" "-" "eq?" "while" "get-guest" "guest" "get-frame" "frame" "get-limit" "limit" "end" "start" "let*" "when" "line-color" "color" "let" "row")}
        {Lisp-Entry "get-diff" #f 142 11 142 19 ("get-start" "-" "blue" "1" "get-end" "+" "Compare-Diff" "new" "green" "get-color" "case" "when" "get-run" "run" "get-guest" "guest" "get-frame" "frame" "let*" "row")}
        {Lisp-Entry "select-diff" #f 152 21 152 32 ("bell" "set-selection" "if" "get-end" "next-line-or-end-of-text" "0" "get-start" "Cell" "Range$Cell$" "new" "essay" "new-selection" "let" "default-selection" "diff")}
        {Lisp-Entry "goto-next-diff" #f 162 21 162 35 ("get-row" "next-diff" "nu=?" "if" "select-diff" "get-end" "move-forward" "set-caret" "selection" "old-selection" "let")}
        {Lisp-Entry "goto-previous-diff" #f 168 21 168 39 ("get-row" "previous-diff" "nu=?" "if" "select-diff" "get-start" "move-backward" "set-caret" "selection" "old-selection" "let")}
        {Lisp-Entry "goto-first-diff" #f 174 21 174 36 ("selection" "text-beginning" "get-row" "next-diff" "select-diff")}
        {Lisp-Entry "goto-last-diff" #f 178 21 178 35 ("selection" "text-ending" "get-row" "previous-diff" "select-diff")}
        {Lisp-Entry "next-diff" #f 182 11 182 20 ("increase!" "line-color" "not" "<" "and" "while" "get-length" "len" "get-diff" "diff" "let" "row")}
        {Lisp-Entry "previous-diff" #f 190 11 190 24 ("decrease!" "line-color" "not" "0" ">=" "and" "while" "get-diff" "diff" "let" "row")}
        {Lisp-Entry "previous-end-of-line" #f 197 21 197 41 ("paragraph-length" "1" "-" "Cell" "new" "0" "=" "if" "row")}
        {Lisp-Entry "next-line-or-end-of-text" #f 203 21 203 45 ("0" "1" "+" "paragraph-length" "Cell" "new" "get-limit" "=" "if" "row")}
        {Lisp-Entry "keep-green" #f 209 21 209 31 ("Range$Cell$" "new" "set-selection" "range" "let" "previous-end-of-line" "set-caret" "1" "get-end" "+" "naturals" "uncolorize-row" "n" "function" "for-each" "get-green" "self" "get-range" "replace-text" "get-blue" "when" "bell" "not" "if" "get-row" "get-diff" "diff" "get-start" "pos" "let*")}
        {Lisp-Entry "keep-blue" #f 226 21 226 30 ("previous-end-of-line" "-" "Cell" "Range$Cell$" "new" "set-selection" "get-height" "0" "row-count" "range" "let" "set-caret" "self" "get-range" "replace-text" "get-green" "1" "get-end" "+" "naturals" "uncolorize-row" "n" "function" "for-each" "get-blue" "when" "bell" "not" "if" "get-row" "get-diff" "diff" "get-start" "pos" "let*")}
        {Lisp-Entry "keep-both" #f 245 21 245 30 ("1" "get-end" "+" "naturals" "uncolorize-row" "n" "function" "for-each" "bell" "not" "if" "get-row" "get-diff" "diff" "get-start" "pos" "let*")}
        {Lisp-Entry "get-context-menu" #f 255 11 255 27 ("Compare-Text-Menu" "new")}}
      {Lisp-Entry "Compare-Text-Menu" #f 264 7 264 24 ("edit-references" "code-text" "edit-definitions" "save-to-both" "save-to-blue" "save-to-green" "save-as" "Bitmap-Resource" "icon:" "save" "open-blue" "compare-text" "Action" "action:" "title:" "open-green" "name:" "Context-Menu")}}})
"Compare-Texts"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Texts.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Texts" #f 38 9 38 45 ("jazz")
      {Lisp-Entry "Compare-Texts" #f 52 7 52 20 ("12" "left-padding:" "text" "content" "vscroll?:" "hscroll?:" "462" "791" "on-compare" "770" "compare" "blue" "493" "blue-border" "30" "460" "blue-label" "on-return-press" "return-press-handler:" "file" "protocol:" "green" "entry" "style:" "edge" "border-type:" "19" "250" "9" "190" "green-border" "Label" "Font" "font:" "16" "35" "11" "150" "title:" "green-label" "on-keep-both" "104" "keep-both" "on-keep-blue" "82" "keep-blue" "on-keep-green" "60" "keep-green" "on-previous-diff" "24" "previous-diff" "on-next-diff" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "7" "2" "Point" "position:" "next-diff" "name:" "499" "795" "Dimension" "size:" "View")
        {Lisp-Entry "green" #f 55 8 55 13 ()}
        {Lisp-Entry "blue" #f 56 8 56 12 ()}
        {Lisp-Entry "compare-directory" #f 57 8 57 25 ()}
        {Lisp-Entry "compare-directory-cookie" #f 58 8 58 32 ()}
        {Lisp-Entry "host-icon" #f 86 16 86 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 90 16 90 26 ()}
        {Lisp-Entry "host-position" #f 94 16 94 29 ("80" "90" "Point")}
        {Lisp-Entry "host-size" #f 98 16 98 25 ("500" "795" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 102 11 102 26 ("groupware")}
        {Lisp-Entry "resize" #f 111 11 111 17 ("blue-border" "'blue-border" "blue-label" "'blue-label" "green-border" "'green-border" "2" "get-width" "resize-parts" "second-dh" "first-dh" "bind" "3" "text" "'text" "child" "size-figure" "0" "compare" "'compare" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-compare" #f 122 11 122 21 ("text" "'text" "locate" "acquire-focus" "require-blue" "require-green" "compare-monikers" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-return-press" #f 129 11 129 26 ("on-compare" "evt")}
        {Lisp-Entry "on-next-diff" #f 133 11 133 23 ("acquire-focus" "text" "'text" "locate" "goto-next-diff" "evt")}
        {Lisp-Entry "on-previous-diff" #f 138 11 138 27 ("acquire-focus" "text" "'text" "locate" "goto-previous-diff" "evt")}
        {Lisp-Entry "on-compare-next" #f 143 11 143 26 ("compare-next" "evt")}
        {Lisp-Entry "on-compare-previous" #f 147 11 147 30 ("compare-previous" "evt")}
        {Lisp-Entry "on-keep-green-file" #f 151 11 151 29 ("keep-green-file" "evt")}
        {Lisp-Entry "on-keep-blue-file" #f 155 11 155 28 ("keep-blue-file" "evt")}
        {Lisp-Entry "on-keep-green" #f 159 11 159 24 ("goto-next-diff" "next?:" "get-property" "when" "text" "'text" "locate" "keep-green" "evt")}
        {Lisp-Entry "on-keep-blue" #f 165 11 165 23 ("goto-next-diff" "next?:" "get-property" "when" "text" "'text" "locate" "keep-blue" "evt")}
        {Lisp-Entry "on-keep-both" #f 171 11 171 23 ("text" "'text" "locate" "keep-both" "evt")}
        {Lisp-Entry "compare-next" #f 180 29 180 41 ("compare-next" "bell" "Compare-Trees" "is-not?" "if" "current-guest" "guest" "let" "get-host" "close")}
        {Lisp-Entry "compare-previous" #f 188 29 188 45 ("compare-previous" "bell" "Compare-Trees" "is-not?" "if" "current-guest" "guest" "let" "get-host" "close")}
        {Lisp-Entry "keep-green-file" #f 196 29 196 44 ("merge-leaves" "goto-next-comparable" "not" "copy-right" "bell" "Compare-Trees" "is-not?" "if" "current-guest" "guest" "let" "get-host" "close")}
        {Lisp-Entry "keep-blue-file" #f 207 29 207 43 ("merge-leaves" "goto-next-comparable" "not" "copy-left" "bell" "Compare-Trees" "is-not?" "if" "current-guest" "guest" "let" "get-host" "close")}
        {Lisp-Entry "get-tab-stops" #f 223 11 223 24 ("blue" "'blue" "green" "'green" "locate" "get-text" "list")}
        {Lisp-Entry "compare-monikers" #f 234 18 234 34 ("goto-first-diff" "when" "layout-scrollee" "colorize-output" "has-differences?" "compare-monikers" "output" "clear-all" "install-monikers" "'text" "locate" "text" "new-comparer" "compare" "let" "set-title" "string=?" "if" "self" "class-of" "host-title" "format" "title" "blue" "get-name" "green" "get-host" "host" "let*" "compare-directory-cookie~self" "compare-directory~self" "set!" "compare-directory-cookie" "compare-directory-cookie:" "compare-directory" "compare-directory:" "blue-moniker" "green-moniker")}
        {Lisp-Entry "new-comparer" #f 254 29 254 41 ("Text-Comparer" "new")}
        {Lisp-Entry "require-green" #f 258 11 258 24 ("error" "get-green" "either")}
        {Lisp-Entry "require-blue" #f 263 11 263 23 ("error" "get-blue" "either")}
        {Lisp-Entry "get-green" #f 268 11 268 20 ("get-moniker" "get-read-only?" "if" "green" "'green" "locate" "browser" "let")}
        {Lisp-Entry "get-blue" #f 275 11 275 19 ("get-moniker" "get-read-only?" "if" "blue" "'blue" "locate" "browser" "let")}
        {Lisp-Entry "install-monikers" #f 282 29 282 45 ("set!" "blue" "'blue" "green" "'green" "locate" "set-moniker" "blue-moniker" "green-moniker")}
        {Lisp-Entry "colorize-output" #f 289 11 289 26 ("paragraphs:" "styles:" "formats:" "Formatted-Text" "set-formatted-content" "get-string" "set!" "/=" "when" "0" "else" "2" "1" "case" "style" "let" "color" "line" "rank2" "rank1" "bind" "info" "function" "map" "paragraphs" "has-differences?" "styles" "Blue-Color" "blue" "Green-Color" "color:" "green" "font:" "base:" "Text-Style" "new" "intern-style" "plain" "Code" "name:" "Font" "font" "Default" "'Default" "get-format" "list" "formats" "let*" "text" "output")}
        {Lisp-Entry "on-open-green" #f 313 11 313 24 ("green" "open-item" "evt")}
        {Lisp-Entry "on-open-blue" #f 317 11 317 23 ("blue" "open-item" "evt")}
        {Lisp-Entry "open-item" #f 321 11 321 20 ("get-source" "groupware" "'groupware" "workspace:" "edit-document" "Moniker" "is?" "if" "get-application" "appl" "let" "item")}
        {Lisp-Entry "on-save-to-green" #f 333 11 333 27 ("save-to-green" "evt")}
        {Lisp-Entry "on-save-to-blue" #f 337 11 337 26 ("save-to-blue" "evt")}
        {Lisp-Entry "on-save-to-both" #f 341 11 341 26 ("save-to-both" "evt")}
        {Lisp-Entry "save" #f 345 11 345 15 ("get-host" "close" "compare-directory-cookie" "merge-done" "compare-directory" "when" "save-to-both")}
        {Lisp-Entry "save-as" #f 352 11 352 18 ("text" "'text" "locate" "save-as")}
        {Lisp-Entry "save-to-green" #f 356 11 356 24 ("green" "save-to")}
        {Lisp-Entry "save-to-blue" #f 360 11 360 23 ("blue" "save-to")}
        {Lisp-Entry "save-to-both" #f 364 11 364 23 ("get-modification-time" "set-modification-time" "File" "is?" "and" "when" "blue" "green" "save-to")}
        {Lisp-Entry "save-to" #f 372 11 372 18 ("get-content" "save-lines" "'text" "locate" "text" "let" "ensure-read/write" "item")}}}})
"Compare-Trees"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Trees.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Trees" #f 38 9 38 45 ("Configure-Menu" "Right-Column" "Action-Column" "Left-Column" "register-autoclass" "jazz")
      {Lisp-Entry "Compare-Trees" #f 53 7 53 20 ("75" "center" "justification:" "right-value" "200" "left-value" "235" "width:" "row" "selection-mode:" "on-context-menu" "context-menu-handler:" "on-double-click" "double-click-handler:" "multiple-selection?:" "name" "filled-column:" "results" "document" "outline" "363" "891" "90" "results-border" "on-transfer" "869" "transfer" "on-no-action" "789" "no-action" "on-copy-left" "767" "copy-left" "on-merge-leaves" "745" "merge-leaves" "on-copy-right" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "57" "723" "copy-right" "default?:" "on-compare" "action-handler:" "24" "80" "810" "compare" "45" "whitespace" "25" "79" "timestamp" "78" "4" "603" "check-algorithm" "blue" "blue-border" "30" "34" "blue-label" "green" "320" "7" "46" "green-border" "9" "6" "green-label" "375" "222" "trees" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "Label" "Font" "font:" "base-date" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "entry" "edge" "border-type:" "19" "111" "32" "81" "selected?:" "35" "merge" "16" "60" "15" "13" "backup" "styled" "style:" "76" "210" "5" "Point" "position:" "title:" "mode" "name:" "455" "895" "Dimension" "size:" "Tool-View")
        {Lisp-Entry "mode" #f 56 12 56 16 ("set-mode" "get-mode")}
        {Lisp-Entry "base-date" #f 57 12 57 21 ("set-base-date" "get-base-date")}
        {Lisp-Entry "left-moniker" #f 58 12 58 24 ("set-left-moniker" "get-left-moniker" ":uninitialized")}
        {Lisp-Entry "right-moniker" #f 59 12 59 25 ("set-right-moniker" "get-right-moniker" ":uninitialized")}
        {Lisp-Entry "left-content" #f 60 12 60 24 ("set-left-content" "get-left-content")}
        {Lisp-Entry "right-content" #f 61 12 61 25 ("set-right-content" "get-right-content")}
        {Lisp-Entry "ignored-nodes" #f 62 12 62 25 ("set-ignored-nodes" "get-ignored-nodes")}
        {Lisp-Entry "ignored-leaves" #f 63 12 63 26 ("set-ignored-leaves" "get-ignored-leaves")}
        {Lisp-Entry "ignored-extensions" #f 64 12 64 30 ("set-ignored-extensions" "get-ignored-extensions")}
        {Lisp-Entry "check-algorithm" #f 65 12 65 27 ("set-check-algorithm" "get-check-algorithm")}
        {Lisp-Entry "left-root" #f 68 8 68 17 ()}
        {Lisp-Entry "left-base" #f 69 8 69 17 ()}
        {Lisp-Entry "right-root" #f 70 8 70 18 ()}
        {Lisp-Entry "right-base" #f 71 8 71 18 ()}
        {Lisp-Entry "root-entry" #f 72 8 72 18 ()}
        {Lisp-Entry "installed-configuration" #f 73 8 73 31 ()}
        {Lisp-Entry "$Left-Value-Column" #f 124 12 124 30 ("1")}
        {Lisp-Entry "$Right-Value-Column" #f 125 12 125 31 ("2")}
        {Lisp-Entry "$Left-Column" #f 126 12 126 24 ("3")}
        {Lisp-Entry "$Action-Column" #f 127 12 127 26 ("4")}
        {Lisp-Entry "$Right-Column" #f 128 12 128 25 ("5")}
        {Lisp-Entry "install" #f 136 11 136 18 ("load-session" "nextmethod" "rest")}
        {Lisp-Entry "host-workspaces" #f 146 11 146 26 ("groupware")}
        {Lisp-Entry "focus-default" #f 150 11 150 24 ("results" "'results" "locate" "acquire-focus")}
        {Lisp-Entry "get-left-content" #f 159 18 159 34 ("left-content")}
        {Lisp-Entry "set-left-content" #f 163 18 163 34 ("left-content" "set!" "content")}
        {Lisp-Entry "get-right-content" #f 167 18 167 35 ("right-content")}
        {Lisp-Entry "set-right-content" #f 171 18 171 35 ("right-content" "set!" "content")}
        {Lisp-Entry "get-ignored-nodes" #f 175 18 175 35 ("ignored-nodes")}
        {Lisp-Entry "set-ignored-nodes" #f 179 18 179 35 ("ignored-nodes" "set!" "ignored")}
        {Lisp-Entry "get-ignored-leaves" #f 183 18 183 36 ("ignored-leaves")}
        {Lisp-Entry "set-ignored-leaves" #f 187 18 187 36 ("ignored-leaves" "set!" "ignored")}
        {Lisp-Entry "get-ignored-extensions" #f 191 18 191 40 ("ignored-extensions")}
        {Lisp-Entry "set-ignored-extensions" #f 195 18 195 40 ("ignored-extensions" "set!" "ignored")}
        {Lisp-Entry "guest-actions" #f 204 11 204 24 ("nextmethod" "compare-trees" "'compare-trees" "find-actions" "cons")}
        {Lisp-Entry "host-activate" #f 215 11 215 24 ("results" "'results" "locate" "acquire-focus" "get-finished?" "when" "nextmethod")}
        {Lisp-Entry "resize" #f 221 11 221 17 ("results" "'results" "invalidate-header" "results-border" "'results-border" "transfer" "'transfer" "build-updater" "'build-updater" "no-action" "'no-action" "copy-left" "'copy-left" "merge-leaves" "'merge-leaves" "copy-right" "'copy-right" "compare" "'compare" "blue-border" "'blue-border" "green-border" "'green-border" "check-algorithm" "'check-algorithm" "move-figure" "0" "trees" "'trees" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-copy-right" #f 239 11 239 24 ("bell" "goto-next-comparable" "unless" "next?:" "get-property" "when" "copy-right" "evt")}
        {Lisp-Entry "copy-right" #f 246 21 246 31 ("get-selection" "invalidate-cell" "$Action-Column" "Cell" "new" "cell" "copy-right" "'copy-right" "set-action" "get-right" "get-left" "node" "'node" "get-kind" "eq?" "and" "unless" "get-row" "get-user-data" "entry" "n" "for-each" "function" "with-update-locked" "results" "'results" "locate" "tree" "let")}
        {Lisp-Entry "on-copy-left" #f 259 11 259 23 ("bell" "goto-next-comparable" "unless" "next?:" "get-property" "when" "copy-left" "evt")}
        {Lisp-Entry "copy-left" #f 266 21 266 30 ("get-selection" "invalidate-cell" "copy-left" "'copy-left" "set-action" "$Action-Column" "Cell" "new" "cell" "get-right" "get-left" "node" "'node" "get-kind" "eq?" "and" "unless" "get-row" "get-user-data" "entry" "n" "for-each" "function" "with-update-locked" "results" "'results" "locate" "tree" "let")}
        {Lisp-Entry "on-merge-leaves" #f 279 11 279 26 ("merge-leaves" "evt")}
        {Lisp-Entry "merge-leaves" #f 283 21 283 33 ("compare-leaves" "get-right" "get-left" "leaf" "'leaf" "get-kind" "eq?" "and" "car" "get-row" "get-user-data" "entry" "let" "bell" "1" "length" ">" "if" "not-null?" "when" "get-selection" "selection" "results" "'results" "locate" "tree" "let*")}
        {Lisp-Entry "on-no-action" #f 294 11 294 23 ("get-selection" "invalidate-cell" "$Action-Column" "Cell" "new" "cell" "set-action" "get-right" "get-left" "node" "'node" "get-kind" "eq?" "and" "unless" "get-row" "get-user-data" "entry" "n" "for-each" "function" "with-update-locked" "results" "'results" "locate" "tree" "let" "evt")}
        {Lisp-Entry "on-compare-next" #f 307 11 307 26 ("compare-next" "evt")}
        {Lisp-Entry "on-compare-previous" #f 311 11 311 30 ("compare-previous" "evt")}
        {Lisp-Entry "compare-next" #f 315 21 315 33 ("merge-leaves" "bell" "goto-next-comparable" "not" "if")}
        {Lisp-Entry "compare-previous" #f 321 21 321 37 ("merge-leaves" "bell" "goto-previous-comparable" "not" "if")}
        {Lisp-Entry "on-build-updater" #f 328 11 328 27 ("updater-built" "build-updater" "choose-updater" "file" "let" "evt")}
        {Lisp-Entry "choose-updater" #f 334 29 334 43 ("choose-new-file")}
        {Lisp-Entry "on-transfer" #f 338 11 338 22 ("transfer" "evt")}
        {Lisp-Entry "transfer" #f 342 29 342 37 ("increase!" "decrease!" "remove-row" "$Action-Column" "set-action" "$Right-Column" "invalidate-cell" "$Left-Column" "Cell" "new" "cell" "begin" "'copy-left" "not" "'copy-right" "or" "node" "'node" "get-kind" "eq?" "and" "set-left" "left-root" "new-left" "add-item" "set-right" "right-root" "make-item" "new-right" "let" "delete-item" "copy-item" "if" "case" "copy-left" "copy-right" "memq?" "when" "get-action" "action" "get-right" "right" "get-left" "left" "get-father" "entry-father" "get-user-data" "entry" "get-row" "row" "<" "while" "function" "with-update-locked" "0" "n" "get-visible-count" "count" "results" "'results" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-double-click" #f 394 11 394 26 ("on-merge-leaves" "results" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" #f 401 11 401 26 ("on-compare" "else" "on-merge-leaves" "results" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-compare" #f 410 29 410 39 ("compare-trees" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-context-menu" #f 416 11 416 26 ("get-compare-menu" "track-popup-menu" "function" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-next-comparable" #f 425 11 425 29 ("bell" "goto-next-comparable" "unless" "evt")}
        {Lisp-Entry "on-previous-comparable" #f 430 11 430 33 ("bell" "goto-previous-comparable" "unless" "evt")}
        {Lisp-Entry "on-next-uncomparable" #f 435 11 435 31 ("bell" "goto-next-uncomparable" "unless" "evt")}
        {Lisp-Entry "on-previous-uncomparable" #f 440 11 440 35 ("bell" "goto-previous-uncomparable" "unless" "evt")}
        {Lisp-Entry "get-tab-stops" #f 450 11 450 24 ("blue" "'blue" "text" "'text" "green" "'green" "base-date" "'base-date" "locate" "list")}
        {Lisp-Entry "load-session" #f 462 11 462 23 ("get-base-dates" "Base-Dates" "set!" "compare-directories" "tools" "get-preferences" "pref" "let")}
        {Lisp-Entry "save-guest" #f 467 11 467 21 ("Base-Dates" "base-dates:" "get-right-moniker" "right-moniker:" "get-left-moniker" "left-moniker:" "get-base-date" "base-date:" "get-mode" "mode:" "add-guest-preferences" "session" "designer")}
        {Lisp-Entry "Base-Dates" #f 481 14 481 24 ()}
        {Lisp-Entry "on-configure" #f 485 18 485 30 ("configuration:" "get-property" "install-configuration" "evt")}
        {Lisp-Entry "on-register-base-date" #f 489 18 489 39 ("set-base-date" "set-cdr!" "cons" "set!" "Base-Dates" "assq" "pair" "universal-date" "present" "date" "let" "merge" "'merge" "/=" "mode" "name" "bind" "error" "installed-configuration" "not" "if" "unimplemented" "evt")}
        {Lisp-Entry "on-reset-actions" #f 505 18 505 34 ("reset-actions" "evt")}
        {Lisp-Entry "configure" #f 509 18 509 27 ("compare-directories" "tools" "get-preferences" "child" "install-configuration" "name")}
        {Lisp-Entry "install-configuration" #f 513 18 513 39 ("results" "'results" "locate" "remove-every-row" "get-check-algorithm" "set-check-algorithm" "get-ignored-extensions" "set-ignored-extensions" "get-ignored-leaves" "set-ignored-leaves" "get-ignored-nodes" "set-ignored-nodes" "get-right" "set-right-moniker" "get-left" "set-left-moniker" "get-name" "find-base-date" "merge" "'merge" "eq?" "essay" "set-base-date" "get-mode" "set-mode" "installed-configuration" "set!" "config")}
        {Lisp-Entry "find-base-date" #f 526 11 526 25 ("Base-Dates" "assq-value" "name")}
        {Lisp-Entry "on-open-green" #f 530 11 530 24 ("groupware" "'groupware" "workspace:" "edit-document" "get-application" "appl" "bell" "get-left" "not" "node" "'node" "get-kind" "eq?" "or" "if" "get-row" "get-user-data" "entry" "let" "when" "get-single-selection" "selection" "results" "'results" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "on-open-blue" #f 541 11 541 23 ("groupware" "'groupware" "workspace:" "edit-document" "get-application" "appl" "bell" "get-right" "not" "node" "'node" "get-kind" "eq?" "or" "if" "get-row" "get-user-data" "entry" "let" "when" "get-single-selection" "selection" "results" "'results" "locate" "tree" "let*" "evt")}
        {Lisp-Entry "get-mode" #f 557 11 557 19 ("mode" "'mode" "locate" "get-content" "get-selected-element")}
        {Lisp-Entry "set-mode" #f 561 11 561 19 ("'mode" "locate" "get-content" "set-selected-element" "mode")}
        {Lisp-Entry "get-check-algorithm" #f 565 11 565 30 ("check-algorithm" "'check-algorithm" "locate" "get-content" "get-selected-element")}
        {Lisp-Entry "set-check-algorithm" #f 569 11 569 30 ("timestamp" "'timestamp" "either" "check-algorithm" "'check-algorithm" "locate" "get-content" "set-selected-element" "algorithm")}
        {Lisp-Entry "get-base-date" #f 573 11 573 24 ("Date" "parse-string" "empty-string?" "if" "base-date" "'base-date" "locate" "get-string-content" "text" "let")}
        {Lisp-Entry "set-base-date" #f 582 11 582 24 ("base-date" "'base-date" "locate" "set-string-content" "else" "present" "Date" "is?" "not" "cond" "text" "let" "date")}
        {Lisp-Entry "get-left-moniker" #f 588 29 588 45 ("get-moniker" "set!" "left-moniker" "get-read-only?" "if" "green" "'green" "locate" "browser" "let")}
        {Lisp-Entry "set-left-moniker" #f 596 29 596 45 ("green" "'green" "locate" "set-moniker" "left-moniker" "set!" "moniker")}
        {Lisp-Entry "get-right-moniker" #f 601 29 601 46 ("get-moniker" "set!" "right-moniker" "get-read-only?" "if" "blue" "'blue" "locate" "browser" "let")}
        {Lisp-Entry "set-right-moniker" #f 609 29 609 46 ("blue" "'blue" "locate" "set-moniker" "right-moniker" "set!" "moniker")}
        {Lisp-Entry "select-all" #f 614 11 614 21 ("user-origin?:" "results" "'results" "locate" "select-all" "rest")}
        {Lisp-Entry "require-left-moniker" #f 623 11 623 31 ("error" "get-left-moniker" "either")}
        {Lisp-Entry "require-right-moniker" #f 628 11 628 32 ("error" "get-right-moniker" "either")}
        {Lisp-Entry "new-comparer" #f 633 29 633 41 ("Tree-Comparer" "new")}
        {Lisp-Entry "get-trees" #f 637 29 637 38 ("require-right-moniker" "require-left-moniker" "moniker->tree" "values")}
        {Lisp-Entry "moniker->tree" #f 642 29 642 42 ("moniker")}
        {Lisp-Entry "compare-trees" #f 646 18 646 31 ("essay" "user-message" "display-results" "scan-feedback" "right" "left" "function" "feedback:" "get-check-algorithm" "check-algorithm:" "ignored-extensions" "ignored-extensions:" "ignored-leaves" "ignored-leaves:" "ignored-nodes" "ignored-nodes:" "right-content" "right-content:" "left-content" "left-content:" "compare-nodes" "scanned-values" "has-differences?" "entry" "new-comparer" "comparer" "let" "right-base" "tree-base" "left-base" "right-root" "left-root" "set!" "get-trees" "right-tree" "left-tree" "receive")}
        {Lisp-Entry "scan-feedback" #f 667 29 667 42 ("user-message" "right" "left")}
        {Lisp-Entry "display-results" #f 676 11 676 26 ("set-selection" "0" "display-entry" "remove-every-row" "function" "with-update-locked" "root-entry" "set!" "results" "'results" "locate" "tree" "get-merge-date" "date" "get-mode" "mode" "let*" "entry")}
        {Lisp-Entry "display-entry" #f 688 11 688 24 ("get-children" "1" "+" "display-entry" "child" "function" "for-each" "ensure-expanded" "setup-action" "not" "when" "user-data:" "list" "children:" "expanded" "'expanded" "collapsed" "'collapsed" "state:" "father:" "add-row" "row" "c5" "c4" "c3" "get-right-value" "c2" "get-left-value" "present-value" "Tree-Label" "c1" "image:" "title:" "Tree-Node" "new" "c0" "entry-image" "image" "present-item" "present-root" "2" "<" "if" "name" "node" "'node" "eq?" "and" "lvl?" "either" "ref" "get-action" "action" "get-right" "right" "get-left" "left" "get-kind" "kind" "let*" "level" "entry" "father" "tree" "date" "mode")}
        {Lisp-Entry "setup-action" #f 712 11 712 23 ("setup-merge" "merge" "setup-backup" "backup" "case" "entry" "base-date" "mode")}
        {Lisp-Entry "setup-backup" #f 718 11 718 23 ("backup-action" "set-action" "get-right-value" "right-value" "get-right" "right" "get-left-value" "left-value" "get-left" "left" "let" "entry" "base-date")}
        {Lisp-Entry "setup-merge" #f 726 11 726 22 ("merge-action" "set-action" "get-right-value" "right-value" "get-right" "right" "get-left-value" "left-value" "get-left" "left" "let" "leaf" "'leaf" "get-kind" "eq?" "when" "entry" "base-date")}
        {Lisp-Entry "reset-actions" #f 735 11 735 24 ("invalidate-view" "get-selection" "get-row" "n" "for-each" "setup-action" "Compare-Entry" "is?" "when" "get-user-data" "entry" "let" "row" "function" "proc" "self" "comparer" "results" "'results" "locate" "tree" "get-merge-date" "base-date" "get-mode" "mode" "let*")}
        {Lisp-Entry "backup-action" #f 751 29 751 42 ("copy-right" "'copy-right" "right-value" "right" "left-value" "left" "base-date")}
        {Lisp-Entry "merge-action" #f 755 29 755 41 ("right-value" "right" "left-value" "left" "base-date")}
        {Lisp-Entry "get-merge-date" #f 759 29 759 43 ("get-time" "get-base-date" "date" "let" "merge" "'merge" "eq?" "when" "mode")}
        {Lisp-Entry "add-item" #f 771 29 771 37 ("copy-item" "dst" "src")}
        {Lisp-Entry "copy-item" #f 775 29 775 38 ("error" "dst" "src")}
        {Lisp-Entry "delete-item" #f 779 29 779 40 ("error" "item")}
        {Lisp-Entry "compare-leaves" #f 783 29 783 43 ("user-data" "right" "left")}
        {Lisp-Entry "merge-done" #f 787 18 787 28 ("goto-next-comparable" "remove-row" "get-row" "row" "let" "when" "user-data-index" "n" "results" "'results" "locate" "tree" "let*" "user-data")}
        {Lisp-Entry "goto-next-comparable" #f 796 21 796 41 ("comparable?" "goto-next" "rank")}
        {Lisp-Entry "goto-previous-comparable" #f 800 21 800 45 ("comparable?" "goto-previous" "rank")}
        {Lisp-Entry "goto-next-uncomparable" #f 804 21 804 43 ("uncomparable?" "goto-next" "rank")}
        {Lisp-Entry "goto-previous-uncomparable" #f 808 21 808 47 ("uncomparable?" "goto-previous" "rank")}
        {Lisp-Entry "goto-next" #f 812 21 812 30 ("list" "set-selection" "when" "find-next" "next" "1" "max" "apply" "+" "0" "null?" "if" "either" "get-selection" "selection" "results" "'results" "locate" "tree" "let*" "rank" "predicate")}
        {Lisp-Entry "goto-previous" #f 822 21 822 34 ("list" "set-selection" "when" "find-previous" "previous" "min" "apply" "1" "get-visible-count" "-" "null?" "if" "either" "get-selection" "selection" "results" "'results" "locate" "tree" "let*" "rank" "predicate")}
        {Lisp-Entry "find-next" #f 833 11 833 20 ("finally" "return" "when" "get-user-data" "entry" "get-row" "row" "with" "get-visible-count" "below" "from" "n" "for" "loop" "predicate" "rank" "tree")}
        {Lisp-Entry "find-next" #f 842 11 842 20 ("continuation-return" "when" "get-user-data" "entry" "get-row" "row" "let*" "do" "get-visible-count" "below" "from" "n" "for" "loop" "return" "function" "continuation-capture" "predicate" "rank" "tree")}
        {Lisp-Entry "find-previous" #f 853 11 853 24 ("continuation-return" "when" "get-user-data" "entry" "get-row" "row" "let*" "do" "0" "downto" "from" "n" "for" "loop" "return" "function" "continuation-capture" "predicate" "rank" "tree")}
        {Lisp-Entry "comparable?" #f 864 11 864 22 ("get-right" "get-left" "leaf" "'leaf" "get-kind" "eq?" "and" "entry")}
        {Lisp-Entry "uncomparable?" #f 868 11 868 24 ("get-right" "get-left" "xor" "entry")}
        {Lisp-Entry "make-item" #f 877 29 877 38 ("father" "root" "item")}
        {Lisp-Entry "tree-base" #f 881 29 881 38 ("tree")}
        {Lisp-Entry "trim-left" #f 885 29 885 38 ("item")}
        {Lisp-Entry "trim-right" #f 889 29 889 39 ("item")}
        {Lisp-Entry "present-root" #f 893 29 893 41 ("either" "present-item" "right" "left")}
        {Lisp-Entry "present-item" #f 897 29 897 41 ("item")}
        {Lisp-Entry "present-value" #f 901 29 901 42 ("value" "kind")}
        {Lisp-Entry "entry-image" #f 905 29 905 40 ("leaf" "Bitmap-Resource" "node" "get-kind" "case" "ref" "entry")}
        {Lisp-Entry "action-image" #f 911 29 911 41 ("copy-left" "merge" "else" "Bitmap-Resource" "not" "cond" "copy-right" "case" "right" "left" "action")}
        {Lisp-Entry "get-compare-menu" #f 925 29 925 45 ("Compare-Menu" "new")}}
      {Lisp-Entry "Item-Column" #f 934 7 934 18 ("Tree-Column")
        {Lisp-Entry "draw-cell" #f 937 11 937 20 ("0" "2" "16" "-" "quotient" "get-application" "get-icons-cache" "draw-image" "present-image" "image" "present?" "not" "when" "get-right" "get-left" "node" "'node" "get-kind" "eq?" "and" "lvl?" "let" "draw-background" "height" "width" "cell" "row" "context" "surface")}
        {Lisp-Entry "present?" #f 945 38 945 46 ("cell")}
        {Lisp-Entry "present-image" #f 949 38 949 51 ("cell")}}
      {Lisp-Entry "Left-Column" #f 958 7 958 18 ("Item-Column")
        {Lisp-Entry "present?" #f 961 11 961 19 ("get-left" "cell")}
        {Lisp-Entry "present-image" #f 965 11 965 24 ("Bitmap-Resource" "cell")}}
      {Lisp-Entry "Action-Column" #f 977 7 977 20 ("Tree-Column")
        {Lisp-Entry "draw-cell" #f 980 11 980 20 ("0" "1" "2" "16" "-" "quotient" "+" "get-icons-cache" "draw-image" "get-right" "get-left" "creator" "action-image" "image" "get-application" "appl" "when" "get-action" "action" "let" "draw-background" "height" "width" "cell" "row" "context" "surface")}}
      {Lisp-Entry "Right-Column" #f 997 7 997 19 ("Item-Column")
        {Lisp-Entry "present?" #f 1000 11 1000 19 ("get-right" "cell")}
        {Lisp-Entry "present-image" #f 1004 11 1004 24 ("Bitmap-Resource" "cell")}}
      {Lisp-Entry "Compare-Menu" #f 1016 7 1016 19 ("on-open-blue" "open-blue" "on-open-green" "open-green" "open-group" "on-reset-actions" "reset-actions" "on-register-base-date" ":document" "Event-Handler" "action-handler:" "register-base-date" "action-group" "name:" "Bitmap-Resource" "icon:" "title:" "Context-Menu")}
      {Lisp-Entry "Configure-Menu" #f 1037 7 1037 21 ("Context-Menu")
        {Lisp-Entry "finish" #f 1040 11 1040 17 ("update-menu" "nextmethod" "rest")}
        {Lisp-Entry "update-menu" #f 1045 18 1045 29 ("compare-directories" "tools" "get-preferences" "get-children" "configuration:" "list" "properties:" "on-configure" "'on-configure" "method-name:" ":document" "target-name:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "get-presentation" "title" "let" "config" "function" "for-each")}}}})
"Compare-Trees-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Compare-Trees-Actions.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Compare-Trees-Actions" #f 38 9 38 53 ("jazz")
      {Lisp-Entry "Compare-Trees-Actions" #f 48 7 48 28 ("on-compare-previous" "compare-previous" ":control" "on-compare-next" "compare-next" "copy-left" "F11" "on-copy-left" "copy-left&next-comparable" "on-copy-righ" "copy-right" "F10" "next?:" "on-copy-right" "copy-right&next-comparable" "on-previous-uncomparable" "previous-uncomparable" ":alt" "on-next-uncomparable" "next-uncomparable" ":shift" "on-previous-comparable" "previous-comparable" "F9" "Shortcut" "shortcut:" "on-next-comparable" ":document" "Event-Handler" "action-handler:" "next-comparable" "name:" "Actions")}}})
"Compare-Trees-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "preference" "Compare-Trees-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.preference.Compare-Trees-Preferences" #f 37 9 37 60 ("jazz")
      {Lisp-Entry "Compare-Trees-Preferences" #f 46 7 46 32 ("Frame-Preferences")
        {Lisp-Entry "active-configuration" #f 49 12 49 32 ("generate")}
        {Lisp-Entry "base-dates" #f 50 12 50 22 ("generate")}}}})
"Completion-List-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Completion-List-Row.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Completion-List-Row" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Completion-List-Row" #f 47 7 47 26 ("List-Row")
        {Lisp-Entry "get-subrow-class" #f 50 11 50 27 ("Completion-Row")}
        {Lisp-Entry "auto-number?" #f 54 11 54 23 ()}
        {Lisp-Entry "get-list-value" #f 58 11 58 25 ("car" "key:" "value" "<" "sort")}
        {Lisp-Entry "add-value" #f 62 11 62 20 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
        {Lisp-Entry "new-value" #f 66 11 66 20 ("cons" "request-title" "prefix" "let")}
        {Lisp-Entry "request-title" #f 71 11 71 24 ("initial-value:" "prefix:" "title:" "request-string" "current")}}
      {Lisp-Entry "Completion-Row" #f 80 7 80 21 ("String-Row")
        {Lisp-Entry "get-subvalue" #f 88 11 88 23 ("get-value" "get-title" "cons")}}}})
"Component"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "component" "Component.jazz"} 1226584780
    {Lisp-Entry "jazz.library.component.Component" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Component" #f 47 7 47 16 ("Event-Consumer" "Object")
        {Lisp-Entry "Installed-Flag" #f 58 14 58 28 ("#x00000001")}
        {Lisp-Entry "Finished-Flag" #f 59 14 59 27 ("#x00000002")}
        {Lisp-Entry "Visible-Flag" #f 60 14 60 26 ("#x00000004")}
        {Lisp-Entry "Layout-Valid-Flag" #f 61 14 61 31 ("#x00000100")}
        {Lisp-Entry "name" #f 64 8 64 12 ()}
        {Lisp-Entry "parent" #f 65 8 65 14 ()}
        {Lisp-Entry "branch" #f 66 8 66 14 ()}
        {Lisp-Entry "creation-form" #f 67 8 67 21 ()}
        {Lisp-Entry "creator" #f 68 8 68 15 ()}
        {Lisp-Entry "creator-branch" #f 69 8 69 22 ()}
        {Lisp-Entry "event-consumer" #f 70 8 70 22 ("self")}
        {Lisp-Entry "designers" #f 71 8 71 17 ()}
        {Lisp-Entry "surrogate" #f 72 8 72 17 ()}
        {Lisp-Entry "index" #f 73 8 73 13 ()}
        {Lisp-Entry "flags" #f 74 8 74 13 ("Visible-Flag")}
        {Lisp-Entry "before" #f 77 12 77 18 ("set-before" "get-before")}
        {Lisp-Entry "children" #f 78 12 78 20 ("set-children" "get-children")}
        {Lisp-Entry "visible?" #f 79 12 79 20 ("set-visible?" "get-visible?")}
        {Lisp-Entry "class-info" #f 80 12 80 22 ("get-class-info")}
        {Lisp-Entry "name-info" #f 81 12 81 21 ("get-name-info")}
        {Lisp-Entry "presentation-info" #f 82 12 82 29 ("get-presentation-info")}
        {Lisp-Entry "get-name" #f 90 25 90 33 ("name")}
        {Lisp-Entry "set-name" #f 94 25 94 33 ("name" "set!" "value")}
        {Lisp-Entry "get-parent" #f 98 25 98 35 ("parent")}
        {Lisp-Entry "set-parent" #f 102 26 102 36 ("install-in-parent" "set!" "self" "remove-child" "parent" "when" "value")}
        {Lisp-Entry "get-before" #f 110 25 110 35 ("before")}
        {Lisp-Entry "set-before" #f 114 18 114 28 ("child" "self" "parent" "send-child-before" "get-finished?" "when" "before" "set!" "value")}
        {Lisp-Entry "get-children" #f 120 25 120 37 ("children")}
        {Lisp-Entry "set-children" #f 124 26 124 38 ("self" "set-parent" "do" "in" "child" "for" "loop" "when" "children" "set!" "lst")}
        {Lisp-Entry "get-branch" #f 131 25 131 35 ("branch")}
        {Lisp-Entry "set-branch" #f 135 25 135 35 ("branch" "set!" "value")}
        {Lisp-Entry "get-form" #f 139 25 139 33 ("creation-form")}
        {Lisp-Entry "set-form" #f 143 25 143 33 ("creation-form" "set!" "value")}
        {Lisp-Entry "get-creator" #f 147 25 147 36 ("creator")}
        {Lisp-Entry "set-creator" #f 151 25 151 36 ("creator" "set!" "value")}
        {Lisp-Entry "get-creator-branch" #f 155 25 155 43 ("creator-branch")}
        {Lisp-Entry "set-creator-branch" #f 159 25 159 43 ("creator-branch" "set!" "value")}
        {Lisp-Entry "get-class-info" #f 163 11 163 25 ("self" "class-of" "get-class-presentation")}
        {Lisp-Entry "get-class-form" #f 167 19 167 33 ()}
        {Lisp-Entry "get-class-forms" #f 171 19 171 34 ()}
        {Lisp-Entry "get-name-info" #f 175 11 175 24 ("name")}
        {Lisp-Entry "get-presentation-info" #f 179 11 179 32 ("get-presentation")}
        {Lisp-Entry "get-installed?" #f 188 21 188 35 ("Installed-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-installed?" #f 192 21 192 35 ("Installed-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-finished?" #f 196 21 196 34 ("Finished-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-finished?" #f 200 11 200 24 ("Finished-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "print" #f 209 11 209 16 ("get-installed-branches" "component" "map" "branch" "get-presentation" "not" "if" "name" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "initialize" #f 230 11 230 21 ("initialize-component" "self" "class-of" "setup-toplevel-context" "get-origin" "not" "and" "when" "get-class-form" "form" "let" "nextmethod" "rest")}
        {Lisp-Entry "initialize-component" #f 238 29 238 49 ("hide" "show" "if" "initially-visible?" "neq?" "when" "get-visible?" "visible?" "let" "conclude" "set-finished?" "install-in-parent" "finish" "set-installed?" "install" "prepare" "rest")}
        {Lisp-Entry "default-name" #f 253 29 253 41 ()}
        {Lisp-Entry "default-parent" #f 257 29 257 43 ()}
        {Lisp-Entry "prepare" #f 261 29 261 36 ("prepare-component" "prepare-parent" "initargs")}
        {Lisp-Entry "prepare-parent" #f 266 11 266 25 ("default-parent" "not" "if" "parent" "set!" "not-found:" "parent:" "getf" "arg" "let" "initargs")}
        {Lisp-Entry "prepare-component" #f 271 11 271 28 ("creator-branch:" "set-creator-branch" "creator:" "set-creator" "get-class-form" "form:" "set-form" "default-name" "name:" "getf" "either" "set-name" "initargs")}
        {Lisp-Entry "install" #f 278 29 278 36 ("install-component" "initargs")}
        {Lisp-Entry "install-component" #f 282 11 282 28 ("get-class-forms" "install-inherited" "initargs")}
        {Lisp-Entry "install-inherited" #f 286 11 286 28 ("self" "car" "install-form" "cdr" "install-inherited" "not-null?" "when" "forms")}
        {Lisp-Entry "install-form" #f 292 18 292 30 ("get-children" "install-children" "get-properties" "install-properties" "when" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "install-children" #f 298 29 298 45 ("install-child" "do" "in" "child" "for" "loop" "restore-form" "creator-branch" "creator" "children")}
        {Lisp-Entry "install-child" #f 303 26 303 39 ("error" "else" "close" "get-component" "child" "remove" "equal?" "find-to-modify" "install-form" "remember-reference" "set!" "locate" "modify" "remember-creation" "add-to-index" "when" "creator-branch:" "creator:" "form:" "name:" "parent:" "component" "self" "either" "form-model" "get-model-name" "load-class" "if" "model" "get-tag-module" "module" "let*" "new" "case" "get-name" "name" "get-action" "action" "let" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "install-properties" #f 326 11 326 29 ("cddr" "write-property-to" "remember-property" "set-car!" "self" "class-of" "component-property" "set!" "symbol?" "when" "cadr" "value" "car" "expr" "let" "not-null?" "while" "restore-form" "properties")}
        {Lisp-Entry "find-to-modify" #f 339 26 339 40 ("locate" "find-component-with" "either" "test" "name")}
        {Lisp-Entry "form-model" #f 346 26 346 36 ("get-model" "form")}
        {Lisp-Entry "finish" #f 350 29 350 35 ("write-properties" "creator~self" "set!" "self" "install-form" "neq?" "if" "when" "others" "creator" "form" "bind-keywords" "initargs")}
        {Lisp-Entry "write-properties" #f 361 18 361 34 ("self" "write-initarg-to" "do" "in-properties" "value" "property" "for" "loop" "properties")}
        {Lisp-Entry "install-in-parent" #f 368 29 368 46 ("parent-add-child" "get-editor" "install-surrogate" "get-surrogate" "surrogate" "set-designers" "not-null?" "get-designers" "designers" "let" "parent" "when")}
        {Lisp-Entry "parent-add-child" #f 379 18 379 34 ("self" "add-child" "parent" "when")}
        {Lisp-Entry "conclude" #f 384 29 384 37 ("initargs")}
        {Lisp-Entry "close" #f 393 11 393 16 ("destroy-component" "destroyed?" "unless")}
        {Lisp-Entry "destroy-component" #f 398 19 398 36 ("self" "call-destroy" "destroy-component" "Component" "is?" "when" "children" "in" "child" "for" "loop" "set-active-branch")}
        {Lisp-Entry "destroy" #f 406 11 406 18 ("nextmethod" "name" "remove-from-index" "creator" "self" "remove-child" "parent" "when")}
        {Lisp-Entry "close-children" #f 414 18 414 32 ("close" "do" "children" "in" "child" "for" "loop")}
        {Lisp-Entry "confirm-close" #f 419 26 419 39 ("rest")}
        {Lisp-Entry "initially-visible?" #f 428 26 428 44 ()}
        {Lisp-Entry "get-visible?" #f 432 26 432 38 ("get-visible-flag")}
        {Lisp-Entry "set-visible?" #f 436 26 436 38 ("hide" "show" "get-visible-flag" "neq?" "when" "set-visible-flag" "get-finished?" "not" "if" "flag")}
        {Lisp-Entry "show" #f 445 26 445 30 ("set-visible-flag")}
        {Lisp-Entry "hide" #f 449 26 449 30 ("set-visible-flag")}
        {Lisp-Entry "get-visible-flag" #f 453 18 453 34 ("Visible-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-visible-flag" #f 457 18 457 34 ("Visible-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-properties" #f 466 23 466 37 ("self" "all-slots" "property-getter" "property?" "and" "property" "function" "collect-if")}
        {Lisp-Entry "component-property" #f 473 11 473 29 ("error" "initer-property?" "property?" "or" "if" "category-field" "field" "let" "name" "category")}
        {Lisp-Entry "initer-property?" #f 480 19 480 35 ("creator-branch" "creator" "form" "parent" "memq?" "name")}
        {Lisp-Entry "write-property-to" #f 484 11 484 28 ("property-setter" "setter" "let" "property?" "when" "value" "property" "object")}
        {Lisp-Entry "write-initarg-to" #f 490 11 490 27 ("keyword->symbol" "class-of" "component-property" "write-property-to" "value" "property" "object")}
        {Lisp-Entry "get-filtered-properties" #f 494 18 494 41 ("map" "else" "error" "category-field" "either" "symbol?" "string?" "cond" "object" "function" "standardize" "letrec" "self" "class-of" "class" "get-all-properties" "get-categorized-properties" "properties" "let" "eq?" "if" "categorized" "'categorized" "filter" "filter:")}
        {Lisp-Entry "get-all-properties" #f 513 11 513 29 ("self" "class-of" "all-slots" "display-filtered-property?" "property" "collect-if" "field-name" "symbol->string" "string<?" "=" "and" "<" "or" "yr" "get-row-class" "get-filter-rank" "xr" "let" "categorized" "all" "memq?" "if" "y" "x" "function" "sort" "filter")}
        {Lisp-Entry "display-filtered-property?" #f 527 11 527 37 ("display-property?" "get-filter-name" "eq?" "get-row-class" "class" "let" "categorized" "all" "memq?" "or" "property-getter" "property?" "and" "filter" "property")}
        {Lisp-Entry "name?" #f 541 18 541 23 ("pair?" "null?" "integer?" "symbol?" "or" "object")}
        {Lisp-Entry "add-child" #f 548 26 548 35 ("find-component" "send-child-before" "list" "append!" "children" "set!" "not" "if" "get-before" "Component" "is?" "essay" "before" "let" "child")}
        {Lisp-Entry "add-child-at" #f 555 18 555 30 ("insert!" "children" "set!" "rank" "child")}
        {Lisp-Entry "append-child" #f 559 18 559 30 ("list" "append!" "children" "set!" "child")}
        {Lisp-Entry "remove-child" #f 563 26 563 38 ("remove!" "children" "set!" "child")}
        {Lisp-Entry "replace-child" #f 567 26 567 39 ("remove!" "insert!" "set!" "self" "set-parent" "children" "element" "child" "let" "replacement" "rank")}
        {Lisp-Entry "send-child-to-front" #f 574 26 574 45 ("move-to-head!" "children" "set!" "child")}
        {Lisp-Entry "send-child-to-back" #f 578 26 578 44 ("move-to-tail!" "children" "set!" "child")}
        {Lisp-Entry "send-child-before" #f 582 18 582 35 ("insert!" "set!" "error" "find" "either" "essay" "rank" "children" "remove!" "removed" "let*" "target" "child")}
        {Lisp-Entry "child" #f 588 18 588 23 ("error" "find-component" "either" "name")}
        {Lisp-Entry "find-component" #f 593 18 593 32 ("equal?" "find-component-with" "name")}
        {Lisp-Entry "find-component-with" #f 597 18 597 37 ("find-child-with" "component-alias" "either" "else" "cdr" "next" "when" "car" "sub" "let" "pair?" "1" "-" "parent" "find-component" "0" "=" "integer?" "error" "null?" "cond" "self" "get-player" "if" "test" "name")}
        {Lisp-Entry "brother" #f 619 18 619 25 ("parent" "child" "name")}
        {Lisp-Entry "child-ranked" #f 623 18 623 30 ("children" "element" "rank")}
        {Lisp-Entry "component-alias" #f 627 26 627 41 ("get-process" "process-alias" "else" "creator" ":creator" "parent" ":parent" "self" ":self" "case" "name")}
        {Lisp-Entry "find-child" #f 635 18 635 28 ("children" "get-name" "equal?" "child" "function" "find-if" "name")}
        {Lisp-Entry "find-child-with" #f 641 18 641 33 ("children" "get-name" "child" "function" "find-if" "test" "name")}
        {Lisp-Entry "find-type" #f 647 18 647 27 ("children" "is?" "child" "function" "find-if" "type")}
        {Lisp-Entry "find-key" #f 653 18 653 26 ("children" "equal?" "child" "function" "find-if" "value" "key")}
        {Lisp-Entry "find-ascendant" #f 659 18 659 32 ("set!" "is-not?" "and" "while" "get-parent" "parent" "let" "type")}
        {Lisp-Entry "collect-ascendants" #f 666 18 666 36 ("is?" "if" "cons" "set!" "is-not?" "not" "or" "and" "while" "get-parent" "parent" "ascendants" "let" "type")}
        {Lisp-Entry "child-rank" #f 677 18 677 28 ("children" "find" "child")}
        {Lisp-Entry "get-frame" #f 681 26 681 35 ()}
        {Lisp-Entry "get-brothers" #f 685 18 685 30 ("get-children" "self" "remove" "parent" "when")}
        {Lisp-Entry "has-parent?" #f 690 18 690 29 ("has-parent?" "eq?" "or" "parent" "and" "component")}
        {Lisp-Entry "get-root-parent" #f 694 18 694 33 ("get-root-parent" "self" "parent" "not" "if")}
        {Lisp-Entry "get-visible-children" #f 700 18 700 38 ("children" "get-visible?" "child" "function" "collect-if")}
        {Lisp-Entry "first-visible-child" #f 706 18 706 37 ("car" "null?" "if" "get-visible-children" "visible" "let")}
        {Lisp-Entry "get-ancestry" #f 713 18 713 30 ("error" "null?" "when" "get-parent" "cons" "set!" "neq?" "while" "self" "scan" "ancestry" "let" "root")}
        {Lisp-Entry "get-self-form" #f 729 23 729 36 ("self" "get-name" "get-registered-form")}
        {Lisp-Entry "add-form" #f 733 26 733 34 ("append-child" "child-form" "parent-form")}
        {Lisp-Entry "add-to-index" #f 742 26 742 38 ("table-set!" "table-ref" "if" "new-index" "set!" "index" "not" "when" "component" "name")}
        {Lisp-Entry "remove-from-index" #f 751 26 751 43 ("table-clear" "index" "and" "when" "component" "name")}
        {Lisp-Entry "new-index" #f 756 29 756 38 ("eq?" "test:" "make-table")}
        {Lisp-Entry "locate" #f 760 26 760 32 ("else" "eq?" "error" "not" "cond" "locate-component" "component" "let" "name")}
        {Lisp-Entry "locate-component" #f 767 18 767 34 ("table-ref" "index" "essay" "else" "null?" "if" "cdr" "next" "when" "car" "locate-component" "sub" "let" "pair?" "cond" "name")}
        {Lisp-Entry "get-database-component" #f 784 18 784 40 ("get-root-parent")}
        {Lisp-Entry "get-event-consumer" #f 793 11 793 29 ("event-consumer")}
        {Lisp-Entry "set-event-consumer" #f 797 11 797 29 ("event-consumer" "set!" "consumer")}
        {Lisp-Entry "deliver-event" #f 801 11 801 24 ("event" "proc" "target" "handler")}
        {Lisp-Entry "first-child" #f 810 18 810 29 ("car" "children" "null?" "if")}
        {Lisp-Entry "last-child" #f 816 18 816 28 ("children" "last")}
        {Lisp-Entry "bring-to-front" #f 820 26 820 40 ("self" "send-child-to-front" "parent" "when")}
        {Lisp-Entry "send-to-back" #f 825 26 825 38 ("self" "send-child-to-back" "parent" "when")}
        {Lisp-Entry "send-before" #f 830 26 830 37 ("self" "send-child-before" "parent" "when" "target")}
        {Lisp-Entry "get-branches" #f 840 18 840 30 ("children" "Branch" "is?" "child" "function" "collect-if")}
        {Lisp-Entry "branch-installed?" #f 846 18 846 35 ("branch")}
        {Lisp-Entry "get-active-branch" #f 850 18 850 35 ("get-active-branch" "Branch" "self" "is?" "essay" "branch" "not" "if")}
        {Lisp-Entry "get-active-branch-name" #f 856 18 856 40 ("get-name" "when" "get-active-branch" "branch" "let")}
        {Lisp-Entry "get-active-branch-presentation" #f 862 18 862 48 ("get-presentation" "not" "if" "get-active-branch" "branch" "let")}
        {Lisp-Entry "set-active-branch" #f 869 18 869 35 ("install-branch" "locate" "Branch" "is?" "let" "restore-client" "branch" "when" "self" "eq?" "not" "or" "if" "active-branch")}
        {Lisp-Entry "install-branch" #f 877 29 877 43 ("configure-client" "restore-client" "branch" "neq?" "when" "br")}
        {Lisp-Entry "for-each-branch" #f 885 18 885 33 ("get-branches" "for-each-branch" "branch" "function" "for-each" "proc")}
        {Lisp-Entry "with-each-branch" #f 892 18 892 34 ("set-active-branch" "branch" "function" "for-each-branch" "get-branch" "active-branch" "let" "proc")}
        {Lisp-Entry "get-installed-branches" #f 901 18 901 40 ("get-installed-branches" "cons" "branch" "not" "if")}
        {Lisp-Entry "iterate-branch-spine" #f 907 18 907 38 ("creator-effective-form" "self" "get-parent" "set!" "get-client-form" "Branch" "is?" "while" "get-active-branch" "either" "let" "branch" "branch:" "proc")}
        {Lisp-Entry "creator-effective-form" #f 919 18 919 40 ("class-of" "form" "creator" "self" "eq?" "if" "get-class-form")}
        {Lisp-Entry "save-session" #f 932 26 932 38 ()}
        {Lisp-Entry "get-class-descriptor" #f 941 31 941 51 ()}
        {Lisp-Entry "get-integrity-manager" #f 950 26 950 47 ()}
        {Lisp-Entry "validate-component" #f 954 26 954 44 ("get-categorized-properties" "validate-property" "self" "property-field" "property" "let" "symbol" "function" "for-each" "manager" "context" "client" "root")}
        {Lisp-Entry "validate-property" #f 961 26 961 43 ("validate" "self" "read-property" "value" "property-domain" "domain" "let" "manager" "context" "client" "root" "property")}
        {Lisp-Entry "search-component" #f 972 26 972 42 ("search-type" "search-name" "not" "or" "and" "type:" "type" "name:" "getf" "name" "let" "target")}
        {Lisp-Entry "search-name" #f 979 21 979 32 ("ignore-case?:" "search" "get-presentation" "localize" "presentation" "let" "name")}
        {Lisp-Entry "search-type" #f 984 21 984 32 ("self" "is?" "type")}
        {Lisp-Entry "search-text" #f 988 21 988 32 ("else" "search-plain-text" "Text" "search-formatted-text" "Formatted-Text" "typecase" "search-text" "'search-text" "unimplemented" "target" "text")}
        {Lisp-Entry "search-plain-text" #f 1000 11 1000 28 ("get-paragraphs" "ignore-case?:" "search" "line" "function" "some?" "target" "text")}
        {Lisp-Entry "search-formatted-text" #f 1006 11 1006 32 ("get-paragraphs" "ignore-case?:" "search" "car" "string" "let" "run" "runs" "format" "bind" "info" "function" "some?" "target" "text")}
        {Lisp-Entry "launch" #f 1021 26 1021 32 ("rest")}
        {Lisp-Entry "component-path" #f 1030 26 1030 40 ("Path" "new" "null?" "when" "get-parent-component" "cons" "set!" "error" "not" "if" "get-name" "name" "neq?" "while" "self" "scan" "path" "let" "creator" "root")}
        {Lisp-Entry "present-path" #f 1044 26 1044 38 ("Path" "new" "values" "null?" "get-parent-component" "cons" "set!" "present-in-path?" "when" "error" "not" "if" "get-name" "name" "neq?" "while" "self" "scan" "pres" "path" "let" "root")}
        {Lisp-Entry "present-in-path?" #f 1061 26 1061 42 ()}
        {Lisp-Entry "unfold-branches" #f 1070 18 1070 33 ("cons" "set-active-branch" "set-restoreable?" "child" "when" "" "apply" "client" "let" "self" "eq?" "if" "branch-name" "instantiate" "get-branches" "branch" "function" "map" "all-branch-names" "get-name" "essay" "active-branch-name" "get-branch" "active-branch" "get-creator" "get-form" "form" "let*" "include-root?" "include-root?:" "properties" "properties:" "branches" "branches:")}
        {Lisp-Entry "get-domain" #f 1097 31 1097 41 ("Value-Domain" "else" "Boolean-Domain" "visible?" "Presentation-Domain" "presentation-info" "Name-Domain" "new" "name-info" "field-name" "case" "property")}
        {Lisp-Entry "property-domain" #f 1105 26 1105 41 ("set-property-domain" "domain" "field-creator" "class" "get-property-domain" "either" "get-domain" "essay" "descriptor-domain" "field-name" "self" "class-of" "get-property-descriptor" "descriptor" "let*" "property")}
        {Lisp-Entry "search-descendants" #f 1123 26 1123 44 ("search-descendants" "'search-descendants" "unimplemented" "get-children" "not" "if" "criteria")}
        {Lisp-Entry "get-class-presentation" #f 1134 31 1134 53 ("type-name" "identifier-name" "->string" "get-title" "if" "self" "get-descriptor" "descriptor" "let")}
        {Lisp-Entry "get-class-image" #f 1141 31 1141 46 ("Bitmap-Resource" "get-image" "if" "self" "get-descriptor" "descriptor" "let")}
        {Lisp-Entry "get-name-prohibited?" #f 1148 31 1148 51 ("get-name-prohibited?" "if" "self" "get-descriptor" "descriptor" "let")}
        {Lisp-Entry "get-name-mandatory?" #f 1155 31 1155 50 ("get-name-mandatory?" "if" "self" "get-descriptor" "descriptor" "let")}
        {Lisp-Entry "get-name-unicity?" #f 1162 31 1162 48 ("get-name-unicity?" "if" "self" "get-descriptor" "descriptor" "let")}
        {Lisp-Entry "presentation->name" #f 1169 31 1169 49 ("string->symbol" "=" "empty-string?" "or" "if" "presentation")}
        {Lisp-Entry "name->presentation" #f 1175 31 1175 49 ("->string" "not" "if" "name")}
        {Lisp-Entry "property-presentation" #f 1181 31 1181 52 ("->string" "get-title" "if" "self" "get-property-descriptor" "descriptor" "else" "visible?" "children" "before" "presentation-info" "name-info" "class-info" "case" "field-name" "name" "let" "property")}
        {Lisp-Entry "detail-presentation" #f 1196 31 1196 50 ("property-presentation" "else" "presentation-info" "name-info" "class-info" "field-name" "case" "property")}
        {Lisp-Entry "persist-property?" #f 1204 31 1204 48 ("property")}
        {Lisp-Entry "presentation-property?" #f 1208 26 1208 48 ("property")}
        {Lisp-Entry "get-presentation" #f 1212 26 1212 42 ("name" "self" "class-of" "name->presentation")}
        {Lisp-Entry "set-presentation" #f 1216 26 1216 42 ("class-of" "presentation->name" "self" "set-name" "presentation" "designer")}
        {Lisp-Entry "get-string-presentation" #f 1220 21 1220 44 ("get-name" "either")}
        {Lisp-Entry "set-string-presentation" #f 1224 21 1224 44 ("self" "set-name" "empty-string?" "if" "presentation" "designer")}
        {Lisp-Entry "present-property" #f 1230 26 1230 42 ("present" "property-domain" "domain" "let" "value" "property")}
        {Lisp-Entry "get-parent-component" #f 1235 26 1235 46 ("get-parent")}
        {Lisp-Entry "get-components" #f 1239 26 1239 40 ("get-children")}
        {Lisp-Entry "get-component-image" #f 1243 26 1243 45 ("self" "class-of" "get-class-image")}
        {Lisp-Entry "can-cut-component?" #f 1247 26 1247 44 ("can-delete-component?")}
        {Lisp-Entry "can-copy-component?" #f 1251 26 1251 45 ()}
        {Lisp-Entry "can-paste-component?" #f 1255 26 1255 46 ()}
        {Lisp-Entry "can-rename-component?" #f 1259 26 1259 47 ("self" "class-of" "get-name-prohibited?" "not")}
        {Lisp-Entry "can-delete-component?" #f 1263 26 1263 47 ()}
        {Lisp-Entry "can-move-component?" #f 1267 26 1267 45 ()}
        {Lisp-Entry "can-view-properties?" #f 1271 26 1271 46 ()}
        {Lisp-Entry "determine-can-paste" #f 1275 18 1275 37 ("determine-paster" "boolean" "try-parent?")}
        {Lisp-Entry "determine-paster" #f 1279 18 1279 34 ("determine-paster" "parent" "else" "self" "addable-class?" "every?" "memq?" "cond" "get-master-model" "parcel" "function" "map" "remove-duplicates" "models" "format:" "get-clipboard-text" "read-string-element" "parcels" "let*" "jazz-parcels" "'jazz-parcels" "clipboard-format-available?" "can-paste-component?" "and" "when" "try-parent?")}
        {Lisp-Entry "can-send-before?" #f 1292 26 1292 42 ("sort-components?" "not" "addable-class?" "every?" "and" "before" "father" "types")}
        {Lisp-Entry "sort-components?" #f 1297 26 1297 42 ()}
        {Lisp-Entry "sort-components" #f 1301 26 1301 41 ("get-presentation" "component" "function" "key:" "smaller" "'smaller" "sort-predicate" "sort" "components")}
        {Lisp-Entry "indexable?" #f 1305 26 1305 36 ()}
        {Lisp-Entry "get-surrogate" #f 1309 18 1309 31 ("surrogate")}
        {Lisp-Entry "component-surrogate" #f 1313 26 1313 45 ("Component-Surrogate")}
        {Lisp-Entry "install-surrogate" #f 1317 26 1317 43 ("install-children-surrogates" "install-handlers" "editor:" "self" "client:" "component-surrogate" "new" "surrogate" "set!" "editor")}
        {Lisp-Entry "install-children-surrogates" #f 1323 26 1323 53 ("get-components" "install-surrogate" "component" "function" "for-each" "editor")}
        {Lisp-Entry "remove-surrogate" #f 1329 18 1329 34 ("remove-component-surrogate")}
        {Lisp-Entry "remove-component-surrogate" #f 1333 18 1333 44 ("set!" "remove-handlers" "surrogate" "when" "get-components" "remove-component-surrogate" "component" "function" "for-each")}
        {Lisp-Entry "get-default-property" #f 1342 26 1342 46 ()}
        {Lisp-Entry "get-categorized-properties" #f 1346 26 1346 52 ()}
        {Lisp-Entry "display-property?" #f 1350 26 1350 43 ("children" "'children" "field-name" "neq?" "property")}
        {Lisp-Entry "get-row-class" #f 1354 26 1354 39 ("Value-Row" "else" "presentation-info" "name-info" "Info-Row" "class-info" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 1362 26 1362 42 ("else" "Boolean-Row" "new" "visible?" "field-name" "case" "property")}
        {Lisp-Entry "update-property-row" #f 1368 26 1368 45 ("row")}
        {Lisp-Entry "get-addable-default" #f 1372 26 1372 45 ()}
        {Lisp-Entry "get-addable-classes" #f 1376 26 1376 45 ()}
        {Lisp-Entry "addable-class?" #f 1380 26 1380 40 ("get-addable-classes" "subtype?" "and" "addable-class" "function" "some?" "class")}
        {Lisp-Entry "get-component-classes" #f 1386 26 1386 47 ()}
        {Lisp-Entry "get-addable-branches" #f 1390 26 1390 46 ()}
        {Lisp-Entry "get-addable-default-branch" #f 1394 26 1394 52 ("Branch")}
        {Lisp-Entry "get-addable-base" #f 1398 26 1398 42 ("Component" "car" "length" "1" "=" "if" "when" "get-addable-classes" "classes" "let")}
        {Lisp-Entry "get-addable-details" #f 1406 26 1406 45 ("100" "name-info" "when" "get-addable-base" "base" "let")}
        {Lisp-Entry "get-recursive-details?" #f 1412 26 1412 48 ()}
        {Lisp-Entry "get-class-searchable-classes" #f 1416 26 1416 54 ()}
        {Lisp-Entry "get-custom-details" #f 1420 26 1420 44 ()}
        {Lisp-Entry "get-custom-card" #f 1424 26 1424 41 ()}
        {Lisp-Entry "save-component-properties" #f 1428 26 1428 51 ("designer")}
        {Lisp-Entry "get-designers" #f 1437 18 1437 31 ("designers")}
        {Lisp-Entry "set-designers" #f 1441 18 1441 31 ("children" "set-designers" "child" "function" "for-each" "designers" "set!" "lst")}
        {Lisp-Entry "install-designer" #f 1448 18 1448 34 ("get-components" "install-designer" "child" "function" "for-each" "cons" "designers" "set!" "designer")}
        {Lisp-Entry "uninstall-designer" #f 1455 18 1455 36 ("get-components" "uninstall-designer" "child" "function" "for-each" "remove!" "designers" "set!" "designer")}
        {Lisp-Entry "print-component" #f 1467 18 1467 33 ("print-html" "self" "Component-HTML-Printer" "new" "let" "print-component" "'print-component" "unimplemented" "printer" "formatter")}
        {Lisp-Entry "export-text" #f 1475 18 1475 29 ("get-output-string" "set-clipboard-text" "generate-text" "open-output-string" "printer" "let" "export-text" "'export-text" "unimplemented")}
        {Lisp-Entry "generate-text" #f 1483 26 1483 39 ("print-text" "new-text-formatter" "formatter" "let" "printer")}
        {Lisp-Entry "new-text-formatter" #f 1488 29 1488 47 ("Formatter" "new" "new-text-formatter" "'new-text-formatter" "unimplemented")}
        {Lisp-Entry "print-text" #f 1494 26 1494 36 ("printer" "formatter")}
        {Lisp-Entry "output-component" #f 1498 26 1498 42 ("text")}
        {Lisp-Entry "output-properties" #f 1502 26 1502 43 ("get-properties" "format" "insert-bulleted-line" "read-property" "->string" "value" "self" "class-of" "property-presentation" "localize" "title" "let" "property" "function" "for-each" "output-properties" "'output-properties" "unimplemented" "text")}
        {Lisp-Entry "for-each-parent" #f 1517 18 1517 33 ("for-each-parent" "parent" "when" "proc")}
        {Lisp-Entry "for-each-ascendant" #f 1523 18 1523 36 ("for-each-parent" "self" "proc")}
        {Lisp-Entry "for-each-descendant" #f 1528 18 1528 37 ("0" "self" "1" "+" "do" "get-children" "in" "child" "for" "loop" "when" "level" "include?" "component" "function" "iter" "letrec" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "for-each-sibling" #f 1538 18 1538 34 ("self" "neq?" "when" "parent" "get-children" "in" "child" "for" "loop" "proc")}
        {Lisp-Entry "collect-family" #f 1544 18 1544 32 ("get-output" "put" "rest" "child" "function" "for-each-descendant" "List-Factory" "new" "factory" "let")}}}})
"Component-Catalog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "catalog" "Component-Catalog.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.catalog.Component-Catalog" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Component-Catalog" #f 46 7 46 24 ("Catalog")
        {Lisp-Entry "client" #f 49 8 49 14 ()}
        {Lisp-Entry "definitions-index" #f 50 8 50 25 ()}
        {Lisp-Entry "references-index" #f 51 8 51 24 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("update-catalog-indexes" "references-index~self" "eq?" "test:" "make-table" "definitions-index~self" "client~self" "set!" "nextmethod" "client" "name")}
        {Lisp-Entry "get-client" #f 67 18 67 28 ("client")}
        {Lisp-Entry "get-definitions-index" #f 71 18 71 39 ("definitions-index")}
        {Lisp-Entry "get-references-index" #f 75 18 75 38 ("references-index")}
        {Lisp-Entry "get-statistics" #f 79 18 79 32 ("format-plural" "format" "references-index" "r" "definitions-index" "table-length" "d" "let")}
        {Lisp-Entry "table-info" #f 87 11 87 21 ("table-length" "format" "table")}
        {Lisp-Entry "update-catalog-indexes" #f 97 11 97 33 ("definitions-index" "table-add" "when" "get-name" "name" "let" "level" "child" "function" "for-each-descendant" "self" "client" "set-catalog")}
        {Lisp-Entry "get-definitions" #f 111 11 111 26 ("definitions-index" "table-ref" "name")}
        {Lisp-Entry "get-references" #f 115 11 115 25 ("references-index" "table-ref" "name")}}}})
"Component-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "menu" "Component-Menu.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.menu.Component-Menu" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Component-Menu" #f 47 7 47 21 ("properties" "before-properties" "rename" "rename-component" "delete" "components-tree" "delete-selection" "end-edit-group" "paste-properties" "paste" "copy" "view" "Action" "action:" "cut" "end-add-group" "add-menu" "Bitmap-Resource" "icon:" "title:" "add-item" "name:" "Context-Menu")
        {Lisp-Entry "finish" #f 66 11 66 17 ("self" "client" "update-menu" "nextmethod" "rest")}}}})
"Component-Parcel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "clipboard" "Component-Parcel.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.clipboard.Component-Parcel" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Component-Parcel" #f 46 7 46 23 ("Entity-Parcel")
        {Lisp-Entry "get-master" #f 54 18 54 28 ("content" "car")}
        {Lisp-Entry "get-master-model" #f 58 18 58 34 ("autoload" "in-manifest?" "when" "get-model-name" "model-name" "get-master" "master" "let*" "get-master-model" "'get-master-model" "unimplemented")}
        {Lisp-Entry "get-master-name" #f 69 18 69 33 ("get-name" "get-master" "master" "let")}}}})
"Component-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "surrogate" "Component-Surrogate.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.surrogate.Component-Surrogate" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Component-Surrogate" #f 44 7 44 26 ("Component")
        {Lisp-Entry "client" #f 47 18 47 24 ()}
        {Lisp-Entry "editor" #f 48 18 48 24 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("set-client" "editor~self" "set!" "nextmethod" "editor" "editor:" "client" "client:")}
        {Lisp-Entry "install-handlers" #f 67 26 67 42 ()}
        {Lisp-Entry "remove-handlers" #f 71 26 71 41 ()}
        {Lisp-Entry "get-client" #f 80 18 80 28 ("client")}
        {Lisp-Entry "set-client" #f 84 18 84 28 ("client" "set!" "clt")}
        {Lisp-Entry "outer-client" #f 88 26 88 38 ("client")}
        {Lisp-Entry "get-editor" #f 97 18 97 28 ("editor")}
        {Lisp-Entry "invalidate-border" #f 106 26 106 43 ()}
        {Lisp-Entry "redraw-border" #f 110 26 110 39 ()}
        {Lisp-Entry "select" #f 119 26 119 32 ("focus?" "rank")}
        {Lisp-Entry "unselect" #f 123 26 123 34 ()}
        {Lisp-Entry "get-selected?" #f 127 18 127 31 ("get-selection" "client" "memq?")}
        {Lisp-Entry "selection-rank" #f 131 18 131 32 ("client" "get-selection" "find")}
        {Lisp-Entry "get-selection" #f 135 18 135 31 ("editor" "get-selection")}
        {Lisp-Entry "set-selection" #f 139 18 139 31 ("editor" "set-selection" "selection")}
        {Lisp-Entry "acquire-selection" #f 143 18 143 35 ("client" "list" "set-selection")}
        {Lisp-Entry "get-component-selection" #f 147 26 147 49 ("get-selection")}
        {Lisp-Entry "close-selection" #f 151 26 151 41 ("get-client" "get-editor" "get-designer" "remove-child" "surrogate" "get-surrogate" "outer-client" "outer" "for-each" "1" "length" "=" "if" "set-selection" "get-parent" "client" "function" "map" "remove-duplicates" "parents" "get-component-selection" "selection" "let*")}}}})
"Component-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Component-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Component-Tester" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Component-Tester" #f 45 7 45 23 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ()}}}})
"Component-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Component-Viewer.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Component-Viewer" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Component-Viewer" #f 46 7 46 23 ("Object")}
      {Lisp-Entry "Component-Viewer" #f 52 7 52 23 ("HTML-Viewer")
        {Lisp-Entry "editor" #f 55 8 55 14 ()}
        {Lisp-Entry "client" #f 56 8 56 14 ()}
        {Lisp-Entry "destroy" #f 64 11 64 18 ("nextmethod" "set-editor")}
        {Lisp-Entry "get-editor" #f 74 26 74 36 ("editor")}
        {Lisp-Entry "set-editor" #f 78 26 78 36 ("on-editor" "'on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "on-editor" #f 87 29 87 38 ("get-selection" "car" "set-client" ":selection-changed" "get-kind" "case" "evt")}
        {Lisp-Entry "get-client" #f 97 26 97 36 ("client")}
        {Lisp-Entry "set-client" #f 101 26 101 36 ("client-update" "set!" "client" "/=" "or" "when" "force?" "force?:" "clt")}
        {Lisp-Entry "client-update" #f 107 26 107 39 ("get-action-list" "get-browser" "set-action-list" "set-text" "empty-string?" "get-output-string" "text" "generate-html" "html-printer" "open-output-string" "printer" "let*" "navigate" "client" "not" "if" "when" "get-site" "site" "let")}}}})
"Components-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Components-Tree.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Components-Tree" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Components-Tree" #f 51 7 51 22 ("Components-Viewer")
        {Lisp-Entry "last-class" #f 54 8 54 18 ()}
        {Lisp-Entry "focus-actions" #f 62 11 62 24 ("nextmethod" "components-tree" "'components-tree" "find-actions" "cons")}
        {Lisp-Entry "get-last-class" #f 72 18 72 32 ("last-class")}
        {Lisp-Entry "on-delete-selection" #f 81 11 81 30 ("delete-selection" "evt")}
        {Lisp-Entry "on-rename-component" #f 85 11 85 30 ("rename-selection" "evt")}
        {Lisp-Entry "on-preview-html" #f 89 11 89 26 ("set-text" "get-guest" "view" "400" "600" "Dimension" "host-size:" "50" "Point" "host-position:" "host-title:" "HTML-Viewer" "new-frame" "frame" "get-output-string" "text" "let*" "generate-html" "open-output-string" "printer" "with-closed" "get-presentation" "format" "title" "function" ":wait" "with-cursor" "bell" "not" "if" "selected-component" "component" "let" "evt")}
        {Lisp-Entry "on-export-html" #f 105 11 105 25 ("user-message" "get-output-string" "set-clipboard-text" "generate-html" "open-output-string" "printer" "function" ":wait" "with-cursor" "bell" "not" "if" "selected-component" "component" "let" "evt")}
        {Lisp-Entry "on-export-text" #f 118 11 118 25 ("user-message" "export-text" "function" ":wait" "with-cursor" "bell" "not" "if" "selected-component" "component" "let" "evt")}
        {Lisp-Entry "on-properties" #f 128 11 128 24 ("show-properties" "evt")}
        {Lisp-Entry "focus-gain" #f 137 11 137 21 ("selected-components" "get-editor" "get-application" "set-selected" "nextmethod" "old")}
        {Lisp-Entry "focus-update-actions" #f 142 11 142 31 ("can-rename?" "rename" "components-tree" "Action" "set-action-enabled?")}
        {Lisp-Entry "on-editor" #f 151 11 151 20 ("nextmethod" "else" "get-user-origin?" "get-force-parent?" "get-origin" "get-old" "get-selection" "selection-changed" ":selection-changed" "branch-changed" ":branch-changed" "end-edition" ":saving" "get-kind" "case" "evt")}
        {Lisp-Entry "branch-changed" #f 159 29 159 43 ()}
        {Lisp-Entry "selection-changed" #f 163 29 163 46 ("focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "client-update" #f 172 11 172 24 ("update")}
        {Lisp-Entry "set-designer" #f 181 18 181 30 ("highlight-edited" "install-listener" "set!" "uninstall-listener" "get-reference" "unhighlight-edited" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "highlight-edited" #f 197 29 197 45 ("component")}
        {Lisp-Entry "unhighlight-edited" #f 201 29 201 47 ("component")}
        {Lisp-Entry "component-presentation" #f 210 29 210 51 ("get-presentation" "component")}
        {Lisp-Entry "component-image" #f 214 29 214 44 ("get-component-image" "component")}
        {Lisp-Entry "component-state" #f 218 29 218 44 ("component")}
        {Lisp-Entry "parent-relocation" #f 227 29 227 46 ("parent")}
        {Lisp-Entry "relocation-parent" #f 231 29 231 46 ("class" "destination")}
        {Lisp-Entry "can-undo?" #f 240 11 240 20 ()}
        {Lisp-Entry "can-redo?" #f 244 11 244 20 ()}
        {Lisp-Entry "can-cut?" #f 248 11 248 19 ("redundant-descendant?" "not" "can-cut-component?" "Component" "is?" "client" "neq?" "component" "function" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-copy?" #f 259 11 259 20 ("redundant-descendant?" "not" "can-copy-component?" "Component" "is?" "component" "function" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-paste?" #f 269 11 269 21 ("determine-unique-paster" "Component" "is?" "component" "function" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-paste-properties?" #f 277 11 277 32 ("class-of" "subtype?" "component" "function" "every?" "get-master-model" "parcel-model" "car" "parcel" "let*" "1" "length" "=" "format:" "get-clipboard-text" "read-string-element" "parcels" "jazz-parcels" "'jazz-parcels" "clipboard-format-available?" "when" "selected-components" "components" "let")}
        {Lisp-Entry "can-delete?" #f 291 11 291 22 ("redundant-descendant?" "not" "can-delete-component?" "Component" "is?" "client" "neq?" "component" "function" "every?" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-rename?" #f 302 11 302 22 ("can-rename-component?" "Component" "is?" "car" "component" "1" "length" "=" "and" "selected-components" "components" "let")}
        {Lisp-Entry "can-select-all?" #f 310 11 310 26 ()}
        {Lisp-Entry "redundant-descendant?" #f 315 11 315 32 ("has-parent?" "neq?" "and" "target" "function" "some?" "components" "component")}
        {Lisp-Entry "cut-selection" #f 322 11 322 24 ("can-survive?:" "designer" "cut-components" "get-selection" "with-deleted-selection" "function" "with-update-locked" "bell" "null?" "if" "selected-components" "components" "let")}
        {Lisp-Entry "copy-selection" #f 334 11 334 25 (".150" "duration:" "get-application" "update-focus-actions" "designer" "copy-components" "function" ":wait" "with-cursor" "bell" "null?" "if" "selected-components" "components" "let")}
        {Lisp-Entry "Paste-Reporter" #f 346 9 346 23 ("invite" "name:" "title:" "Progress-Reporter")
          {Lisp-Entry "dialog-title" #f 354 18 354 30 ()}}
        {Lisp-Entry "paste-clipboard" #f 359 11 359 26 ("cancelable?:" "Paste-Reporter" "progress-reporter:" "self" "context:" "name:" "threaded?:" "set-done" "user-message" "get-model" "get-master" "master" "parcel" "key:" "partition" "reporter:" "relocation-parent" "designer" "paste-parcels" "model" "bind" "info" "for-each" ":wait" "with-cursor" "with-update-locked" "length" "0" "Range" "new" "set-range" "reporter" "function" "with-progress" "get-jazz-parcels" "parcels" "client" "selected-component" "either" "parent" "let")}
        {Lisp-Entry "paste-properties" #f 386 11 386 27 ("designer" "paste-properties" "selected-components" "components" "let")}
        {Lisp-Entry "delete-selection" #f 391 11 391 27 ("can-survive?:" "designer" "delete-components" "function" "with-deleted-selection" "confirm-close" "get-selected-data" "components" "not-null?" "when" "get-selection" "selection" "let")}
        {Lisp-Entry "confirm-close" #f 402 11 402 24 ("confirm-action" "components")}
        {Lisp-Entry "confirm-action" #f 406 11 406 25 ("throw-cancel" "cancel" "no" "yes" "case" "confirmation" "'confirmation" "type:" "localize" "message-box" "code" "let" "text")}
        {Lisp-Entry "on-add-component" #f 419 11 419 27 ("add-component-class" "car" "class" "addable-classes" "remove-nils" "classes" "1" "length" "=" "when" "selected-components" "components" "let" "evt")}
        {Lisp-Entry "addable-classes" #f 428 11 428 26 ("cons" "set!" "memq?" "and" "when" "class-of" "model" "classes" "get-addable-classes" "essay" "parent-classes" "get-parent" "parent-relocation" "parent" "let*" "else" "Component" "is-not?" "addable-root-classes" "not" "cond" "selected-component" "component" "let")}
        {Lisp-Entry "add-component-class" #f 445 11 445 30 ("select-component" "create-new-component" "child" "add-component-request" "values" "if" "creation-info" "get-parent" "set!" "get-addable-classes" "memq?" "not" "when" "extra-properties" "client" "relocation-parent" "either" "selected-component" "selected" "let*" "select?" "select?:" "properties" "properties:" "presentation" "presentation:" "parent" "parent:" "class")}
        {Lisp-Entry "add-component-request" #f 460 29 460 50 ("component-properties-request" "get-children" "component-presentation-request" "values" "parent" "class")}
        {Lisp-Entry "component-presentation-request" #f 465 29 465 59 ("validator:" "unicity-domain:" "not" "accepts-empty?:" "french:" "format" "english:" "Locales" "new" "title:" "request-string" "presentation" "get-class-presentation" "localize" "pres" "component-name-validator" "name-validator" "get-presentation" "component" "function" "map" "essay" "unicity-domain" "get-name-unicity?" "name-unicity?" "get-name-mandatory?" "name-mandatory?" "let*" "get-name-prohibited?" "if" "initial-value" "initial-value:" "brothers" "class")}
        {Lisp-Entry "component-properties-request" #f 477 29 477 57 ("class")}
        {Lisp-Entry "component-name-validator" #f 481 29 481 53 ()}
        {Lisp-Entry "create-new-component" #f 485 11 485 31 ("install-new-component" "function" "with-update-locked" "last-class" "set!" "set-name" "when" "get-designer" "designer" "presentation->name" "essay" "name" "parent:" "new" "child" "let" "added-properties" "presentation" "receive" "extra-properties" "creation-info" "parent" "class")}
        {Lisp-Entry "install-new-component" #f 499 29 499 50 ("install-new-properties" "set-presentation" "when" "add-child" "extra-properties" "added-properties" "presentation" "parent" "child" "designer")}
        {Lisp-Entry "install-new-properties" #f 506 29 506 51 ("append" "add-properties" "extra-properties" "added-properties" "child" "designer")}
        {Lisp-Entry "add-properties" #f 510 29 510 43 ("designer" "set-property" "value" "property" "function" "for-each-property" "properties" "component")}
        {Lisp-Entry "rename-selection" #f 521 11 521 27 ("rename-component" "when" "selected-component" "component" "let")}
        {Lisp-Entry "rename-component" #f 527 18 527 34 ("select-all" "acquire-focus" "self" "set-tree" "set-client" "get-string-content" "function" "end-proc:" "draw-preserved?:" "3" "Point" "location:" "editor:" "edit-cell" "set-string-content" "ensure-row-displayed" "font" "font:" "top-padding:" "1" "left-padding:" "get-content" "Tree-Embedded-Presentation-Text-View" "text" "hscroll?:" "vscroll?:" "parent:" "Scroller-View" "scroller" "Dark-Red" "name:" "Color" "border-color:" "solid" "'solid" "border-type:" "Border-View" "border" "end-rename" "0" "Cell" "new" "cell" "row-rank" "rank" "get-presentation" "initial-value:" "get-brothers" "class-of" "component-presentation-request" "presentation" "let*" "ensure-expanded" "when" "component-row" "row" "let" "component")}
        {Lisp-Entry "end-rename" #f 554 11 554 21 ("select-component" "acquire-focus" "reorder-component" "sort-components?" "and" "when" "get-parent" "parent" "let" "designer" "set-presentation" "get-cell-data" "set-title" "function" "with-update-locked" "presentation" "cell" "component")}
        {Lisp-Entry "move-components" #f 571 11 571 26 ("select-components" "send-component-before" "send-before" "for-each" "essay" "target-data" "element" "cardinality" "<" "1" "+" "after" "before" "case" "position" "son-rank" "rank" "get-sons" "sons" "get-father" "father" "move-components" "bell" "not" "class-of" "relocation-parent" "component" "key:" "uniform" "parent" "let" "row" "'row" "eq?" "if" "function" "with-update-locked" "get-user-data" "destination" "get-part" "part" "get-row" "dst" "get-view" "get-selected-data" "components" "get-designer" "designer" "let*" "target" "source")}
        {Lisp-Entry "move-component-row" #f 596 11 596 29 ("find-component-position" "not" "if" "function" "move-row" "sort-components?" "sort?" "client" "either" "destination" "get-user-data" "source" "let*" "get-sons" "cardinality" "1" "=" "get-father" "eq?" "and" "unless" "position" "position:" "father" "row")}
        {Lisp-Entry "reorder-component" #f 608 18 608 35 ("get-father" "move-component-row" "find-row" "row" "let" "component")}
        {Lisp-Entry "find-component-position" #f 613 29 613 52 ("get-presentation" "find-ordered-position" "father" "row" "component")}
        {Lisp-Entry "find-component-insertion" #f 617 29 617 53 ("find-row" "son-rank" "when" "target" "component" "parent-row")}
        {Lisp-Entry "send-component-before" #f 622 29 622 50 ("before" "component")}
        {Lisp-Entry "get-row-reorder-target" #f 631 11 631 33 ("part:" "row:" "self" "view:" "Tree-Drop-Target" "new" "when" "else" "after" "'after" "'before" "=" "'row" "4" "3" "cond" "part" "can-send-before?" "cdr" "either" "/=" "addable-class?" "has-parent?" "every?" "neq?" "or" "not" "and" "move?" "visible-count" "<" "before" "+" "2" "1" "memq?" "if" "essay" "before-rank" "get-sons" "last" "before-last" "eq?" "before?" "dst-parent" "row-rank" "dst-rank" "get-father" "dst-father" "dst" "get-parent" "parent-relocation" "component" "key:" "uniform" "src-parent" "class-of" "remove-duplicates" "src-types" "get-row" "get-user-data" "n" "function" "map" "src" "contiguous-range" "src-range" "get-source" "get-view" "get-selection" "src-selection" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "get-row-target" #f 655 11 655 25 ("else" "'row" "get-row-reorder-target" "Descendants-Tree" "row:" "self" "view:" "Tree-Drop-Target" "new" "addable-class?" "when" "get-user-data" "component" "autoload" "class" "get-model" "model" "Model-Icon" "typecase" "get-view" "view" "get-source" "source" "let*" "row" "drag-drop")}
        {Lisp-Entry "receive-drop" #f 675 11 675 23 ("receive-model" "Model-Icon" "typecase" "move-components" "self" "eq?" "if" "get-target" "target" "get-view" "view" "get-source" "source" "let*" "drag-drop" "pos" "sender")}
        {Lisp-Entry "receive-model" #f 689 11 689 24 ("rename-component" "centered?:" "0" "Point" "position:" "get-designer" "add-view" "function" "with-update-locked" "visible?:" "new" "child" "get-row" "get-user-data" "parent" "get-model" "self" "dispatch" "model" "let*" "target" "window")}
        {Lisp-Entry "show-properties" #f 705 18 705 33 ("-" "value" "'value" "100" "property" "'property" "locate" "set-width" "get-width" "width" "let" "expand/collapse" "set-parent" "auto-expanded-row" "set!" "row-height:" "father:" "Editor-Row" "class:" "add-row" "subrow" "get-height" "+" "height" "2" "borders-height" "16" "header-height" "set-client" "designer" "set-designer" "get-editor" "set-editor" "categorized" "'categorized" "set-filter" "get-header" "set-flat?" "get-tree" "tree" "parent:" "Properties-Card" "card" "1" "Rect" "border-insets:" "edge" "'edge" "border-type:" "Border-View" "new" "border" "selected-component" "component" "get-row" "row" "get-single-selection" "selection" "let*")}
        {Lisp-Entry "show-properties" #f 730 26 730 41 ("editor" "show-properties")}
        {Lisp-Entry "on-selection-change" #f 739 11 739 30 ("focus?:" "force?:" "self" "origin:" "selected-components" "set-selection" "get-application" "get-selected-owner" "eq?" "editor" "and" "when" "evt")}
        {Lisp-Entry "select-component" #f 744 18 744 34 ("set-single-selection" "when" "component-visible-row" "row" "let" "component")}
        {Lisp-Entry "select-components" #f 751 18 751 35 ("set-selection" "component-visible-row" "map" "remove-nils" "rows" "let" "components")}
        {Lisp-Entry "find-row" #f 757 29 757 37 ("component-row" "component")}}}})
"Components-Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Components-Tree-Actions.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Components-Tree-Actions" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Components-Tree-Actions" #f 47 7 47 30 ("on-properties" "properties" "F2" "on-rename-component" "rename" "Delete" "Shortcut" "shortcut:" "on-delete-selection" ":focus" "Event-Handler" "action-handler:" "delete" "name:" "Actions")}}})
"Components-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Components-Viewer.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Components-Viewer" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Components-Viewer" #f 47 7 47 24 ("Tree-View")
        {Lisp-Entry "editor" #f 50 8 50 14 ()}
        {Lisp-Entry "client" #f 51 8 51 14 ()}
        {Lisp-Entry "designer" #f 52 8 52 16 ()}
        {Lisp-Entry "focus-actions" #f 60 11 60 24 ("nextmethod" "components-viewer" "'components-viewer" "find-actions" "cons")}
        {Lisp-Entry "destroy" #f 70 11 70 18 ("nextmethod" "set-editor" "set-designer")}
        {Lisp-Entry "context-menu" #f 76 11 76 23 ("track-popup-menu" "when" "get-context-menu" "menu" "let" "function" "with-context-click" "pos")}
        {Lisp-Entry "get-context-menu" #f 84 11 84 27 ("self" "client:" "Component-Menu" "new")}
        {Lisp-Entry "update-menu" #f 88 26 88 37 ("cleanup-separators" "properties" "'properties" "rename-component" "'rename-component" "delete-selection" "'delete-selection" "'paste-properties" "'paste" "'copy" "'cut" "not" "set!" "end-add-group" "'end-add-group" "set-before" "set-parent" ":control" "Shortcut" "set-shortcut" "get-title" "localize" "format" "set-title" "get-icon" "set-icon" "unique" "set-visible?" "when" "get-children" "Label-Item" "collect-type" "children" "self" "add-components" "=" "use-add-menu?" "if" "'add-item" "add-item" "'add-menu" "locate" "add-menu" "let" "empty-add?" "can-view-properties?" "Component" "is?" "and" "can-properties?" "rename" "components-tree" "can-rename?" "delete" "can-delete?" "paste-properties" "can-paste-properties?" "paste" "can-paste?" "copy" "can-copy?" "cut" "view" "Action" "get-action-enabled?" "can-cut?" "car" "1" ">=" "essay" "component" "length" "count" "selected-components" "components" "get-application" "appl" "let*" "menu")}
        {Lisp-Entry "use-add-menu?" #f 132 26 132 39 ()}
        {Lisp-Entry "on-add-component" #f 136 29 136 45 ("evt")}
        {Lisp-Entry "addable-classes" #f 145 26 145 41 ()}
        {Lisp-Entry "addable-root-classes" #f 149 26 149 46 ()}
        {Lisp-Entry "add-component-class" #f 153 26 153 45 ("rest" "class")}
        {Lisp-Entry "get-editor" #f 162 18 162 28 ("editor")}
        {Lisp-Entry "set-editor" #f 166 18 166 28 ("editor-update" "on-editor" "'on-editor" "method-name:" "target:" "Event-Handler" "new" "add-editor-listener" "set!" "self" "remove-editor-listener" "editor" "neq?" "when" "edt")}
        {Lisp-Entry "editor-update" #f 176 29 176 42 ()}
        {Lisp-Entry "on-editor" #f 180 29 180 38 ("designer:" "set-designer" ":designer-change" "client:" "get-property" "set-client" ":client-change" "get-kind" "case" "evt")}
        {Lisp-Entry "get-client" #f 191 18 191 28 ("client")}
        {Lisp-Entry "set-client" #f 195 18 195 28 ("client-update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "client-update" #f 201 29 201 42 ()}
        {Lisp-Entry "get-designer" #f 210 18 210 30 ("designer")}
        {Lisp-Entry "set-designer" #f 214 26 214 38 ("install-listener" "set!" "uninstall-listener" "designer" "neq?" "when" "dsg")}
        {Lisp-Entry "install-listener" #f 228 11 228 27 ("add-designer-listener" "on-designer" "'on-designer" "method-name:" "self" "target:" "Event-Handler" "new" "listener" "let" "designer")}
        {Lisp-Entry "uninstall-listener" #f 233 11 233 29 ("self" "remove-designer-listener" "designer")}
        {Lisp-Entry "on-designer" #f 242 29 242 40 ("evt")}
        {Lisp-Entry "selected-component" #f 251 18 251 36 ("get-row" "get-user-data" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "selected-components" #f 257 18 257 37 ("get-ordered-selection" "get-row" "get-user-data" "row" "function" "map")}
        {Lisp-Entry "component-row" #f 263 18 263 31 ("continuation-return" "get-user-data" "eq?" "when" "rank" "row" "for-each-row" "return" "function" "continuation-capture" "component")}
        {Lisp-Entry "component-visible-row" #f 273 11 273 32 ("user-data-index" "component")}
        {Lisp-Entry "preserving-update" #f 282 18 282 35 ("selected-components" "selected-components:" "get-expand-state" "expand-state:" "update")}
        {Lisp-Entry "update" #f 286 26 286 32 ("rest")}
        {Lisp-Entry "update-selection" #f 290 26 290 42 ("generate-event?:" "force?:" "component-visible-row" "collect" "set-selection" "when" "set-expand-state" "selected-components" "expand-state")}}}})
"Components-Viewer-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Components-Viewer-Actions.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Components-Viewer-Actions" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "Components-Viewer-Actions" #f 47 7 47 32 (":control" "Shortcut" "shortcut:" "on-add-component" ":focus" "Event-Handler" "action-handler:" "add" "name:" "Actions")}}})
"Composite-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Composite-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Composite-Row" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Composite-Row" #f 50 7 50 20 ("String-Row")
        {Lisp-Entry "editor-class" #f 58 11 58 23 ("Composite-Text-View")}
        {Lisp-Entry "get-edited-value" #f 67 11 67 27 ("current-entries" "parse-entries" "=" "empty-string?" "or" "if" "editor" "get-string-content" "string" "let")}
        {Lisp-Entry "accepts-spaces?" #f 79 29 79 44 ()}
        {Lisp-Entry "parse-entries" #f 83 29 83 42 ("parse-entry" "map" "entries")}
        {Lisp-Entry "parse-entry" #f 87 29 87 40 ("entry")}
        {Lisp-Entry "parse-error" #f 91 11 91 22 ("0" "Cell" "Parse-Error" "new" "signal" "get-end" "get-start" "essay" "syntax-message" "either" "let" "part" "part:" "end" "end:" "start" "start:" "message" "message:")}
        {Lisp-Entry "syntax-message" #f 98 29 98 43 ()}
        {Lisp-Entry "present" #f 107 11 107 18 ("present-value" "format" "not" "if" "value")}
        {Lisp-Entry "present-value" #f 114 29 114 42 ("present-entry" "map" "value")}
        {Lisp-Entry "present-entry" #f 118 29 118 42 ("entry")}
        {Lisp-Entry "navigate-backward" #f 127 11 127 28 ("select-part" "=" "when" "function" "for-each-part" "1" "get-rank" "-" "previous" "let" "bell" "not" "if" "pos->part" "part" "editor" "get-start" "get-col" "pos" "current-entries" "entries" "let*")}
        {Lisp-Entry "navigate-forward" #f 140 11 140 27 ("select-part" "=" "when" "function" "for-each-part" "1" "get-rank" "+" "next" "let" "bell" "not" "if" "pos->part" "part" "editor" "get-end" "get-col" "pos" "current-entries" "entries" "let*")}
        {Lisp-Entry "current-entries" #f 153 11 153 26 ("editor" "get-string-content" "determine-entries")}
        {Lisp-Entry "current-part" #f 157 11 157 23 ("pos->part" "editor" "get-start" "get-col" "pos" "let" "entries")}
        {Lisp-Entry "current-position" #f 162 11 162 27 ("pos->position" "editor" "get-start" "get-col" "pos" "let" "entries")}
        {Lisp-Entry "pos->part" #f 167 11 167 20 ("continuation-return" "get-end" "<=" "get-start" ">=" "and" "when" "part" "for-each-part" "return" "function" "continuation-capture" "pos" "entries")}
        {Lisp-Entry "pos->position" #f 177 11 177 24 ("else" "eqv?" "accepts-spaces?" "cond" "element" "c" "0" "<" "while" "decrease!" "1" "+" "and" "when" "find-entry-end" "end" "n" "let*" "get-position" "continuation-return" "get-end" "get-start" "between?" "if" "part" "for-each-part" "editor" "get-string-content" "string" "let" "return" "function" "continuation-capture" "pos" "entries")}
        {Lisp-Entry "find-entry-end" #f 199 11 199 25 ("else" "increase!" "eqv?" "accepts-spaces?" "and" "cond" "element" "c" "continuation-return" ">=" "if" "while" "return" "function" "continuation-capture" "cardinality" "len" "let" "n" "string")}
        {Lisp-Entry "for-each-part" #f 212 11 212 24 ("entry" "function" "for-each" "proc" "entries")}
        {Lisp-Entry "view-completions" #f 223 11 223 27 ("acquire-focus" "locate-prefix" "0" "set-selection" "border:" "alternate-position:" "popup" "-2" "alternate" "2" "get-height" "-10" "+" "pos" "text->view" "view" "get-row" "get-paragraph" "par" "get-start" "user-data:" "title:" "Bitmap-Resource" "image:" "Tree-Node" "list" "children:" "add-row" "name" "function" "for-each" "ci<?" "sort" "sorted" "set-client" "set-parent" "fill" "'fill" "set-layout-type" "end:" "start:" "editor" "get-selection" "selected:" "self" "value-row:" "Completion-Tree" "tree" "get-content" "content" "vscroll?:" "flat?:" "250" "min" "50" "max" "150" "Dimension" "size:" "Scroller-View" "scroller" "blue:" "green:" "128" "red:" "Color" "border-color:" "solid" "'solid" "border-type:" "'border" "name:" "Border-View" "new" "border" "17" "length" "*" "height" "let*" "part-domain" "domain" "end" "start" "text" "position" "receive" "bell" "not" "if" "find-to-complete" "info" "let")}
        {Lisp-Entry "find-to-complete" #f 255 11 255 27 ("get-text" "get-position" "get-end" "editor" "get-start" "get-col" "values" "when" "current-position" "position" "let" "not" "if" "current-part" "part" "current-entries" "entries" "let*")}
        {Lisp-Entry "complete-part" #f 265 11 265 24 ("insert-string" "0" "Cell" "Range$Cell$" "new" "editor" "set-selection" "all?:" "parent" "get-player" "close-popups" "get-row" "get-user-data" "string" "bell" "not" "if" "get-single-selection" "rank" "let" "tree" "end" "start")}
        {Lisp-Entry "determine-entries" #f 280 11 280 28 ("get-output" "split" "1" "cardinality" "+" "length" "increase!" "put" "determine-entry" "parts" "function" "for-each" "offset" "0" "rank" "List-Factory" "new" "entries" "let" "string")}
        {Lisp-Entry "determine-entry" #f 293 11 293 26 ("get-output" "begin" "not" "eqv?" "accepts-spaces?" "and" "if" "from" "n" "in-sequence" "c" "for" "loop" "set!" "increase!" "1" "+" "subseq" "Part" "put" "when" "function" "end-part" "end" "start" "0" "position" "List-Factory" "new" "parts" "let*" "offset" "rank" "string")}
        {Lisp-Entry "part-domain" #f 324 29 324 40 ("position")}
        {Lisp-Entry "select-part" #f 328 11 328 22 ("get-end" "get-start" "0" "Cell" "Range$Cell$" "new" "editor" "set-selection" "part")}}
      {Lisp-Entry "Part" #f 337 7 337 11 ("Object")
        {Lisp-Entry "rank" #f 340 8 340 12 ()}
        {Lisp-Entry "position" #f 341 8 341 16 ()}
        {Lisp-Entry "text" #f 342 8 342 12 ()}
        {Lisp-Entry "start" #f 343 8 343 13 ()}
        {Lisp-Entry "end" #f 344 8 344 11 ()}
        {Lisp-Entry "initialize" #f 347 11 347 21 ("end~self" "start~self" "text~self" "position~self" "rank~self" "set!" "nextmethod" "end" "start" "text" "position" "rank")}
        {Lisp-Entry "print" #f 356 11 356 16 ("end" "start" "text" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-rank" #f 362 18 362 26 ("rank")}
        {Lisp-Entry "get-position" #f 366 18 366 30 ("position")}
        {Lisp-Entry "get-text" #f 370 18 370 26 ("text")}
        {Lisp-Entry "get-start" #f 374 18 374 27 ("start")}
        {Lisp-Entry "get-end" #f 378 18 378 25 ("end")}}
      {Lisp-Entry "Composite-Text-View" #f 387 7 387 26 ("Value-Text-View")
        {Lisp-Entry "tab-press" #f 390 11 390 20 ("navigate-forward" "else" "navigate-backward" "shift-key?" "value-row" "view-completions" "control-key?" "end-completion" "has-completion?" "cond" "modifiers" "key")}
        {Lisp-Entry "get-context-menu" #f 397 11 397 27 ("Composite-Menu" "new")}
        {Lisp-Entry "on-navigate-backward" #f 401 11 401 31 ("value-row" "navigate-backward" "evt")}
        {Lisp-Entry "on-navigate-forward" #f 405 11 405 30 ("value-row" "navigate-forward" "evt")}
        {Lisp-Entry "on-view-completions" #f 409 11 409 30 ("value-row" "view-completions" "evt")}
        {Lisp-Entry "focus-actions" #f 418 11 418 24 ("nextmethod" "composite-text" "'composite-text" "find-actions" "cons")}
        {Lisp-Entry "complete-name?" #f 428 11 428 25 ("1" ">=" "size")}
        {Lisp-Entry "favorite-completions" #f 432 11 432 31 ()}
        {Lisp-Entry "symbol-completions" #f 436 11 436 29 ("complete" "Symbol-Completer" "new" "completer" "part-domain" "domain" "let" "when" "current-position" "position" "value-row" "current-entries" "entries" "let*" "favorites" "name")}}
      {Lisp-Entry "Composite-Menu" #f 451 7 451 21 ("view-completions" "navigate-forward" "composite-text" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "navigate-backward" "name:" "Text-Context-Menu")}
      {Lisp-Entry "Completion-Tree" #f 468 7 468 22 ("toplevel-controls?:" "200" "width:" "node" "selection-mode:" ":icons" "portfolio:" "Tree-View")
        {Lisp-Entry "value-row" #f 476 12 476 21 ("generate")}
        {Lisp-Entry "selected" #f 477 12 477 20 ("generate")}
        {Lisp-Entry "start" #f 478 12 478 17 ("generate")}
        {Lisp-Entry "end" #f 479 12 479 15 ("generate")}
        {Lisp-Entry "return-press" #f 482 11 482 23 ("self" "end" "start" "value-row" "complete-part" "key")}
        {Lisp-Entry "tab-press" #f 486 11 486 20 ("self" "end" "start" "value-row" "complete-part" "modifiers" "key")}
        {Lisp-Entry "double-click" #f 490 11 490 23 ("self" "end" "start" "value-row" "complete-part" "pos")}}}})
"Composite-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Composite-Text-Actions.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Composite-Text-Actions" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Composite-Text-Actions" #f 47 7 47 29 ("Space" ":control" "on-view-completions" "view-completions" "on-navigate-forward" "navigate-forward" "Tab" ":shift" "Shortcut" "shortcut:" "on-navigate-backward" ":focus" "Event-Handler" "action-handler:" "navigate-backward" "name:" "Actions")}}})
"Computer-Snapshot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "snapshot" "Computer-Snapshot.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.snapshot.Computer-Snapshot" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Computer-Snapshot" #f 45 7 45 24 ("Component")
        {Lisp-Entry "user-name" #f 48 12 48 21 ("generate")}
        {Lisp-Entry "computer-name" #f 49 12 49 25 ("generate")}
        {Lisp-Entry "processor-type" #f 50 12 50 26 ("generate")}
        {Lisp-Entry "windows-version" #f 51 12 51 27 ("generate")}
        {Lisp-Entry "construct-literal" #f 55 16 55 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "print" #f 59 11 59 16 ("windows-version" "windows-version:" "processor-type" "processor-type:" "computer-name" "computer-name:" "user-name" "user-name:" "list" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}}})
"Concept-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Concept-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Concept-Doc" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Concept-Doc" #f 45 7 45 18 ("Doc")
        {Lisp-Entry "get-class-image" #f 53 16 53 31 ("Bitmap-Resource")}}}})
"Concept-Slide"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "documentation" "Concept-Slide.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.documentation.Concept-Slide" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "Concept-Slide" #f 46 7 46 20 ("Documentation-Slide")}}})
"Configurations-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "configuration" "Configurations-Manager.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.configuration.Configurations-Manager" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "Configurations-Manager" #f 49 7 49 29 ("View")}
      {Lisp-Entry "Configurations-Manager" #f 52 7 52 29 ("install" "options" "safety" "windowing" "250" "platform" "system" "display-images?:" "toplevel-controls?:" "150" "width:" "multiple-selection?:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "name" "filled-column:" "configurations" "document" "fill" "layout-type:" "content" "vscroll?:" "entry" "style:" "edge" "border-type:" "477" "599" "35" "2" "border" "default?:" "on-update" ":form" "Event-Handler" "action-handler:" "22" "100" "7" "499" "Point" "position:" "title:" "update" "name:" "514" "603" "Dimension" "size:" "View")
        {Lisp-Entry "external-name" #f 73 16 73 29 ("configurations-manager" "'configurations-manager" "rest")}
        {Lisp-Entry "finish" #f 82 11 82 17 ("update-buttons" "view-configurations" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 93 16 93 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 97 16 97 26 ()}
        {Lisp-Entry "host-position" #f 101 16 101 29 ("70" "90" "Point")}
        {Lisp-Entry "host-size" #f 105 16 105 25 ("414" "623" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 109 11 109 26 ("home")}
        {Lisp-Entry "resize" #f 118 11 118 17 ("border" "'border" "size-figure" "0" "update" "'update" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-selection-change" #f 124 11 124 30 ("update-buttons" "evt")}
        {Lisp-Entry "view-configurations" #f 133 18 133 37 ("get-indexed-configurations" "user-data:" "list" "children:" "add-row" "get-statistics" "c2" "get-references?" "Tree-Label" "c1" "get-name" "->string" "title:" "Tree-Node" "c0" "on-change-active" "'on-change-active" "method-name:" "self" "target:" "Event-Handler" "new" "handler" "configuration" "for-each" "remove-every-row" "function" "with-update-locked" "configurations" "'configurations" "locate" "tree" "let")}
        {Lisp-Entry "get-indexed-catalogs" #f 147 11 147 31 ("get-application" "get-cataloguer" "get-catalogs" "Indexed-Catalog" "is?" "catalog" "function" "collect-if")}
        {Lisp-Entry "on-update" #f 153 18 153 27 ("update-selection" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-double-click" #f 159 11 159 26 ("update-selection" "function" ":wait" "with-cursor" "configurations" "get-name" "case" "get-alt?" "alt?" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "update-selection" #f 169 11 169 27 ("invalidate-cell" "get-statistics" "get-cell-data" "set-title" "2" "Cell" "new" "cell" "update" "get-row" "get-user-data" "configuration" "let" "row" "function" "for-each" "get-row-count" "0" "naturals" "null?" "if" "effective-selection" "define" "get-selection" "selection" "configurations" "'configurations" "locate" "tree" "let*")}
        {Lisp-Entry "update-buttons" #f 186 11 186 25 ("0" ">" "update" "'update" "set-enabled?" "get-row-count" "count" "configurations" "'configurations" "locate" "tree" "let")}}}})
"Connection"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "connection" "Connection.jazz"} 1226584774
    {Lisp-Entry "jazz.database.connection.Connection" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Connection" #f 45 7 45 17 ("Object")
        {Lisp-Entry "data-source" #f 48 8 48 19 ()}
        {Lisp-Entry "inventory" #f 49 8 49 17 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("destroy-mandatory" "open" "apply" "setup-connection" "nextmethod" "rest" "data-source")}
        {Lisp-Entry "setup-connection" #f 59 19 59 35 ()}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "destroy-connection")}
        {Lisp-Entry "destroy-connection" #f 68 19 68 37 ("data-source" "set!" "close" "inventory" "when")}
        {Lisp-Entry "print" #f 75 11 75 16 ("get-connection-string" "format" "data-source" "when" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-data-source" #f 87 18 87 33 ("data-source")}
        {Lisp-Entry "get-inventory" #f 91 18 91 31 ("reload-inventory" "apply" "inventory" "either" "rest")}
        {Lisp-Entry "reload-inventory" #f 95 18 95 34 ("self" "new-inventory" "" "apply" "inventory" "set!" "data-source" "when" "rest")}
        {Lisp-Entry "open" #f 105 19 105 23 ("data-source~self" "set!" "rest" "data-source")}
        {Lisp-Entry "get-state" #f 114 26 114 35 ()}
        {Lisp-Entry "new-request" #f 123 26 123 37 ()}
        {Lisp-Entry "supports-multirequests?" #f 127 26 127 49 ("data-source" "get-provider" "supports-multirequests?")}
        {Lisp-Entry "load-request" #f 136 26 136 38 ("load-request" "new-request" "request" "with-closed" "data-class" "data-class:" "max-load" "max-load:" "name" "name:" "command")}
        {Lisp-Entry "load-multirequest" #f 141 26 141 43 ("load-multirequest" "new-request" "request" "with-closed" "data-classes" "data-classes:" "max-load" "max-load:" "command")}
        {Lisp-Entry "load-rows" #f 146 26 146 35 ("load-request" "get-rows" "command")}
        {Lisp-Entry "load-row" #f 150 26 150 34 ("car" "length" "1" "=" "assert" "load-rows" "rows" "let" "command")}
        {Lisp-Entry "load-value" #f 156 18 156 28 ("car" "get" "length" "1" "=" "assert" "load-rows" "rows" "let" "column" "command")}
        {Lisp-Entry "load-values" #f 162 18 162 29 ("load-rows" "get" "row" "function" "map" "column" "command")}
        {Lisp-Entry "execute" #f 173 26 173 33 ("command")}
        {Lisp-Entry "comment" #f 177 26 177 33 ("parameters" "string")}
        {Lisp-Entry "begin-transaction" #f 186 26 186 43 ()}
        {Lisp-Entry "commit-transaction" #f 190 26 190 44 ()}
        {Lisp-Entry "rollback-transaction" #f 194 26 194 46 ()}
        {Lisp-Entry "with-transaction" #f 198 18 198 34 ("rollback-transaction" "commit-transaction" "if" "when" "set!" "begin-transaction" "begin" "unwind-protect" "completed?" "started?" "let" "proc")}}}})
"Connector"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Connector.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Connector" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Connector" #f 47 7 47 16 ("Line-View")
        {Lisp-Entry "client" #f 50 12 50 18 ("set-client" "get-client")}
        {Lisp-Entry "start" #f 51 12 51 17 ("set-start" "get-start")}
        {Lisp-Entry "end" #f 52 12 52 15 ("set-end" "get-end")}
        {Lisp-Entry "start-view" #f 55 8 55 18 ()}
        {Lisp-Entry "end-view" #f 56 8 56 16 ()}
        {Lisp-Entry "initially-visible?" #f 59 11 59 29 ()}
        {Lisp-Entry "get-client" #f 68 18 68 28 ("client")}
        {Lisp-Entry "set-client" #f 72 18 72 28 ("client" "set!" "value")}
        {Lisp-Entry "get-start" #f 76 18 76 27 ("start")}
        {Lisp-Entry "set-start" #f 80 18 80 27 ("ending-removed" "start-view" "when" "start" "set!" "value")}
        {Lisp-Entry "get-end" #f 87 18 87 25 ("end")}
        {Lisp-Entry "set-end" #f 91 18 91 25 ("ending-removed" "end-view" "when" "end" "set!" "value")}
        {Lisp-Entry "default-client" #f 103 29 103 43 ("parent")}
        {Lisp-Entry "get-start-view" #f 112 18 112 32 ("setup-ending" "set!" "start" "essay" "start-view" "either")}
        {Lisp-Entry "get-end-view" #f 116 18 116 30 ("setup-ending" "set!" "end" "essay" "end-view" "either")}
        {Lisp-Entry "setup-ending" #f 120 11 120 23 ("ending-added" "find-ending" "view" "when" "default-client" "find-component" "if" "client" "let" "name")}
        {Lisp-Entry "find-ending" #f 129 29 129 40 ("find-component" "name" "client")}
        {Lisp-Entry "ending-added" #f 133 29 133 41 ("view")}
        {Lisp-Entry "ending-removed" #f 137 29 137 43 ("view")}
        {Lisp-Entry "update" #f 146 18 146 24 ("set-to" "set-from" "get-position" "p" "Rect" "new" "set-bounds" "bottom" "max" "right" "get-h" "left" "get-v" "min" "-" "top" "Tolerance" "2" "line-width" "/" "+" "fxceiling" "lw" "get-center" "let*" "and" "when" "get-end-view" "e" "get-start-view" "s" "let")}
        {Lisp-Entry "Unselected-Color" #f 169 14 169 30 ("Black" "name:" "Color")}
        {Lisp-Entry "unselected-color" #f 173 29 173 45 ("Unselected-Color")}
        {Lisp-Entry "line-color" #f 177 11 177 21 ("unselected-color" "get-editor" "selected-color" "if" "surrogate" "selection-rank" "rank" "let")}
        {Lisp-Entry "property-presentation" #f 189 16 189 37 ("nextmethod" "else" "end" "start" "field-name" "case" "property")}
        {Lisp-Entry "component-surrogate" #f 196 11 196 30 ("Connector-Surrogate")}
        {Lisp-Entry "get-row-instance" #f 200 11 200 27 ("nextmethod" "else" "nullable?:" "String-Row" "new" "end" "start" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 206 11 206 37 ("end" "start")}}}})
"Connector-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Connector-Surrogate.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Connector-Surrogate" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Connector-Surrogate" #f 45 7 45 26 ("Line-Surrogate")
        {Lisp-Entry "move-client?" #f 48 11 48 23 ()}
        {Lisp-Entry "size-client?" #f 52 11 52 23 ()}
        {Lisp-Entry "select" #f 56 11 56 17 ("redraw-border" "focus?" "rank")}
        {Lisp-Entry "redraw-border" #f 60 11 60 24 ("client" "invalidate-view")}
        {Lisp-Entry "draw" #f 64 11 64 15 ("draw-showed-property" "surface")}
        {Lisp-Entry "draw-selected" #f 68 11 68 24 ("rank" "surface")}}}})
"Console-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "console" "Console-Manager.jazz"} 1226584774
    {Lisp-Entry "jazz.console.Console-Manager" #f 37 9 37 37 ("Console-View" "register-autoclass" "jazz")
      {Lisp-Entry "Console-Manager" #f 49 7 49 22 ("center" "pad" "on-clear-console" "22" "clear" "tail" "location:" "pick" "on-print-detail-menu" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "Bitmap-Resource" "image-name:" ":icons" "portfolio:" "body" "detail" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "external-name" #f 64 16 64 29 ("console-manager" "'console-manager" "rest")}
        {Lisp-Entry "host-icon" #f 73 16 73 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 77 16 77 26 ()}
        {Lisp-Entry "get-tools-view" #f 86 11 86 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 90 11 90 24 ("acquire-focus" "when" "get-text" "text" "let")}
        {Lisp-Entry "get-pad" #f 101 11 101 18 ("pad" "'pad" "locate")}
        {Lisp-Entry "get-text" #f 105 18 105 26 ("get-text" "essay" "get-pad" "get-selection" "console" "let")}
        {Lisp-Entry "register-console" #f 115 11 115 27 ("set-selected?" "acquire-focus" "event" "function" "execute:" "Event-Handler" "set-action-handler" "layout-view" "set-selection" "when" "add-view" "get-selection" "not" "select?" "get-text" "text" "button:" "Console-View" "view" "get-pad" "pad" "get-host" "add-tool" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "head" "'head" "location:" "auto-size?:" "title:" "Console-Button" "new" "tool" "let" "title")}
        {Lisp-Entry "unregister-console" #f 136 11 136 29 ("get-player" "invalidate-window" "function" "post-event" "get-pad" "remove-view" "get-button" "get-host" "remove-tool" "get-parent" "let" "console")}
        {Lisp-Entry "on-print-detail-menu" #f 150 11 150 31 ("initiator:" "track-popup-menu" "layout-menu" "child" "set-checked?" "get-print-detail" "detail" "console" "tools" "get-preferences" "pref" "self" "client:" "Print-Detail-Menu" "menu" "get-size" "get-height" "0" "Point" "new" "pos" "Combo-Button" "get-combo" "Push-Icon" "typecase" "combo" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-print-detail" #f 162 11 162 26 ("user-message" "print-detail" "'print-detail" "set-preference" "detail:" "get-property" "detail" "console" "tools" "get-preferences" "pref" "let" "evt")}
        {Lisp-Entry "on-clear-console" #f 169 11 169 27 ("acquire-focus" "clear-console" "get-text" "text" "let" "evt")}}
      {Lisp-Entry "Console-View" #f 180 7 180 19 ("text" "content" "name:" "flat?:" "hscroll?:" "vscroll?:" "Scroller-View")
        {Lisp-Entry "button" #f 183 12 183 18 ("generate")}
        {Lisp-Entry "get-text" #f 192 11 192 19 ("text" "'text" "locate")}}
      {Lisp-Entry "Console-Button" #f 204 7 204 21 ("Radio-Tool")
        {Lisp-Entry "draw-frame" #f 207 11 207 21 ("pixel-to" "Medium" "name:" "Color" "color:" "Pen" "new" "set-pen" "get-bottom" "bottom" "1" "get-right" "-" "right" "get-top" "top" "get-left" "left" "get-bounds" "rect" "let*" "nextmethod" "surface")}}
      {Lisp-Entry "Print-Detail-Menu" #f 226 7 226 24 (":describe" ":reader" ":text" "detail:" "on-print-detail" ":client" ":form" "Event-Handler" "action-handler:" "title:" ":human" "name:" "Context-Menu")}}})
"Console-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "console" "Console-Preferences.jazz"} 1226584774
    {Lisp-Entry "jazz.console.Console-Preferences" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Console-Preferences" #f 47 7 47 26 ("Bitmap-Resource" "icon:" "title:" "Frame-Preferences")
        {Lisp-Entry "wrap?" #f 50 12 50 17 ("generate")}
        {Lisp-Entry "context" #f 51 12 51 19 ("generate")}
        {Lisp-Entry "print-detail" #f 52 12 52 24 ("generate" ":reader")}}}})
"Console-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "console" "Console-Text-Actions.jazz"} 1226584774
    {Lisp-Entry "jazz.console.Console-Text-Actions" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Console-Text-Actions" #f 47 7 47 27 ("insert-next-aux" "Down" "on-insert-next" "insert-next" "insert-previous-aux" "Up" "on-insert-previous" "insert-previous" ":alt" "on-fresh-prompt" "fresh-prompt" "Return" "Shortcut" "shortcut:" "on-evaluate" ":focus" "Event-Handler" "action-handler:" "evaluate" "name:" "Actions")}}})
"Console-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "console" "Console-Text-Preferences.jazz"} 1226584774
    {Lisp-Entry "jazz.console.Console-Text-Preferences" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Console-Text-Preferences" #f 48 7 48 31 ("Text-Gray" "comment-color:" "Dark-Blue" "output-color:" "Dark-Green" "input-color:" "Dark-Red" "name:" "Color" "entry-color:" "title:" "Code-Text-Preferences")
        {Lisp-Entry "entry-color" #f 51 12 51 23 ("generate")}
        {Lisp-Entry "input-color" #f 52 12 52 23 ("generate")}
        {Lisp-Entry "output-color" #f 53 12 53 24 ("generate")}
        {Lisp-Entry "comment-color" #f 54 12 54 25 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 71 11 71 37 ("comment-color" "output-color" "input-color" "entry-color")}
        {Lisp-Entry "get-row-instance" #f 75 11 75 27 ("nextmethod" "else" "Color-Row" "new" "comment-color" "output-color" "input-color" "entry-color" "field-name" "case" "property")}}}})
"Console-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "console" "Console-Text-View.jazz"} 1226584774
    {Lisp-Entry "jazz.console.Console-Text-View" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Console-Text-View" #f 53 7 53 24 ("2" "left-padding:" "wrap?:" "IDE-Text-View")
        {Lisp-Entry "inserted-rank" #f 56 8 56 21 ()}
        {Lisp-Entry "inserted-where" #f 57 8 57 22 ()}
        {Lisp-Entry "banner" #f 58 8 58 14 ("generate")}
        {Lisp-Entry "prompt" #f 59 8 59 14 ("generate")}
        {Lisp-Entry "console-port" #f 60 8 60 20 ("generate")}
        {Lisp-Entry "console-pump" #f 61 8 61 20 ("generate")}
        {Lisp-Entry "external-name" #f 68 16 68 29 ("console-text" "'console-text" "rest")}
        {Lisp-Entry "default-tool?" #f 72 11 72 24 ()}
        {Lisp-Entry "default-console?" #f 76 11 76 27 ()}
        {Lisp-Entry "propagate-styles?" #f 80 11 80 28 ()}
        {Lisp-Entry "install" #f 84 11 84 18 ("get-style" "set-default-style" "get-comment-color" "Comment" "'Comment" "get-output-color" "Output" "'Output" "get-input-color" "Input" "'Input" "get-entry-color" "color:" "base:" "Entry" "'Entry" "Code-Bold" "Base-Bold" "'Base-Bold" "Code" "Font" "font:" "Base" "'Base" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "preferences" #f 96 11 96 22 ("console-text" "documents" "get-preferences")}
        {Lisp-Entry "host-icon" #f 105 16 105 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 109 16 109 26 ()}
        {Lisp-Entry "position-host" #f 118 11 118 24 ("100" "1280" "Dimension" "set-size" "host")}
        {Lisp-Entry "focus-actions" #f 127 11 127 24 ("nextmethod" "console-text" "'console-text" "find-actions" "cons")}
        {Lisp-Entry "on-fresh-prompt" #f 137 11 137 26 ("fresh-prompt" "evt")}
        {Lisp-Entry "on-evaluate" #f 141 11 141 22 ("get-string" "remove-enclosing" "insert-string" "else" "console-evaluate" "last-block" "nu=?" "text-ending" "set-caret" "empty-block?" "cond" "get-end" "block-at" "block" "let" "evt")}
        {Lisp-Entry "on-insert-previous" #f 152 11 152 29 ("insert-previous-block" "evt")}
        {Lisp-Entry "on-insert-next" #f 156 11 156 25 ("insert-next-block" "evt")}
        {Lisp-Entry "delete-char" #f 160 11 160 22 ("nextmethod" "send-end-of-file" "current-command" "extended?" "not" "at-end?" "and" "if")}
        {Lisp-Entry "send-end-of-file" #f 167 11 167 27 ("console-port" "close-port")}
        {Lisp-Entry "scrollee-size" #f 171 11 171 24 ("nextmethod" "scrollee-height" "get-display-width" "Dimension" "new" "wrap?" "if")}
        {Lisp-Entry "context-menu" #f 177 11 177 23 ("nextmethod" "Console-Menu" "new" "track-popup-menu" "context-menu-click" "begin" "not" "and" "if" "modifiers-down" "alt?" "control?" "shift?" "receive" "pos")}
        {Lisp-Entry "set-selection" #f 186 18 186 31 ("inserted-where" "set!" "nextmethod" "apply" "rest" "range")}
        {Lisp-Entry "console-evaluate" #f 196 11 196 27 ("eval-from-prompt" "insert-newline" "text-ending" "set-caret")}
        {Lisp-Entry "eval-from-prompt" #f 202 11 202 27 ("reset-inserted" "Input" "'Input" "get-style" "set-style" "force-output" "console-port" "display" "empty-string?" "unless" "get-string" "command" "current-command" "range" "let")}
        {Lisp-Entry "current-command" #f 212 11 212 26 ("Entry" "'Entry" "inherits?" "style" "function" "text-ending" "select-style")}
        {Lisp-Entry "get-modified?" #f 223 11 223 24 ()}
        {Lisp-Entry "get-tooltip-context" #f 227 11 227 30 ("pos")}
        {Lisp-Entry "home-column" #f 231 11 231 22 ("0" "Cell" "new" "new-range" "get-string" "=" "2" "paragraph-length" ">=" "and" "if" "row")}
        {Lisp-Entry "current-history-item" #f 242 11 242 31 ()}
        {Lisp-Entry "recolorize-text" #f 251 11 251 26 ("end-row" "start")}
        {Lisp-Entry "expression-color" #f 255 26 255 42 ("Expression-Color")}
        {Lisp-Entry "eval-color" #f 259 26 259 36 ("Eval-Color")}
        {Lisp-Entry "process-formatted-directive" #f 268 11 268 38 ("nextmethod" "else" "fresh-prompt" "prompt" "display-banner" "banner" "case" "input" "directive")}
        {Lisp-Entry "backward-style" #f 283 21 283 35 ("get-range" "backward-style" "end:" "start:" "self" "explorer-class" "new" "explorer" "let" "predicate" "pos")}
        {Lisp-Entry "forward-style" #f 289 21 289 34 ("get-range" "forward-style" "end:" "start:" "self" "explorer-class" "new" "explorer" "let" "predicate" "pos")}
        {Lisp-Entry "select-style" #f 295 21 295 33 ("get-range" "select-style" "end:" "start:" "self" "explorer-class" "new" "explorer" "let" "predicate" "pos")}
        {Lisp-Entry "display-banner" #f 306 26 306 40 ("display-prompt" "insert-newline" "Banner-Color" "colorize" "insert-string" "get-start" "start" "get-application" "appl" "let" "Output" "'Output" "insert-styled" "when" "banner")}
        {Lisp-Entry "clear-console" #f 320 18 320 31 ("display-banner" "clear-all" "determine-banner" "or" "banner" "let")}
        {Lisp-Entry "determine-banner" #f 326 11 326 27 ("get-string" "when" "Output" "'Output" "inherits?" "style" "function" "text-beginning" "forward-style" "range" "let")}
        {Lisp-Entry "fresh-prompt" #f 337 18 337 30 ("text-ending" "set-caret" "Comment" "'Comment" "get-style" "last-block" "set-style")}
        {Lisp-Entry "reset-inserted" #f 347 11 347 25 ("inserted-where" "inserted-rank" "set!")}
        {Lisp-Entry "text-style?" #f 352 15 352 26 ("Comment" "'Comment" "Output" "'Output" "inherits?" "or" "style")}
        {Lisp-Entry "user-style?" #f 357 15 357 26 ("text-style?" "not" "style")}
        {Lisp-Entry "block-at" #f 361 11 361 19 ("forward-style" "get-end" "user-style?" "backward-style" "get-start" "new-range" "pos")}
        {Lisp-Entry "next-block" #f 367 11 367 21 ("new-range" "user-style?" "next-end" "text-style?" "forward-style" "get-end" "next-start" "let*" "block")}
        {Lisp-Entry "previous-block" #f 373 11 373 25 ("new-range" "user-style?" "previous-start" "text-style?" "backward-style" "get-start" "previous-end" "let*" "block")}
        {Lisp-Entry "last-block" #f 379 11 379 21 ("user-style?" "backward-style" "text-ending" "ending" "let")}
        {Lisp-Entry "find-block" #f 384 11 384 21 ("1" "-" "previous-block" "0" "<=" "if" "n" "last-block" "block" "iterate" "let" "rank")}
        {Lisp-Entry "empty-block?" #f 391 11 391 23 ("get-end" "get-start" "nu=?" "block")}
        {Lisp-Entry "insert-previous-block" #f 396 11 396 32 ("new-range" "set!" "get-string" "remove-enclosing" "insert-string" "get-start" "start" "let" "set-selection" "inserted-where" "when" "empty-block?" "unless" "find-block" "block" "1" "+" "previous" "0" "inserted-rank" "either" "current" "let*")}
        {Lisp-Entry "insert-next-block" #f 409 11 409 28 ("new-range" "set!" "get-string" "remove-enclosing" "insert-string" "get-start" "start" "set-selection" "inserted-where" "empty-block?" "unless" "find-block" "block" "let" ">" "when" "1" "-" "next" "0" "inserted-rank" "either" "current" "let*")}}
      {Lisp-Entry "Console-Menu" #f 428 7 428 19 ("insert-next" "insert-previous" "edit-references" "code-text" "edit-definitions" "fresh-prompt" "console-text" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "evaluate" "name:" "Context-Menu")}}})
"Constant-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Constant-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Constant-Doc" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Constant-Doc" #f 45 7 45 19 ("Element-Doc")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("doc:" "name:" "self" "new" "doc" "name" "context")}
        {Lisp-Entry "get-class-image" #f 58 16 58 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" #f 62 11 62 37 ()}}}})
"Constructor-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Constructor-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Constructor-Entry" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Constructor-Entry" #f 45 7 45 24 ("Method-Entry")
        {Lisp-Entry "get-image" #f 48 11 48 20 ("Bitmap-Resource")}}}})
"Consumer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "consumer" "Consumer.jazz"} 1226584780
    {Lisp-Entry "jazz.library.consumer.Consumer" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Consumer" #f 40 11 40 19 ()}}})
"Container"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Container.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Container" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Container" #f 46 7 46 16 ("content" "name:" "Layout-View")
        {Lisp-Entry "get-content" #f 59 18 59 29 ("content" "'content" "child")}
        {Lisp-Entry "inner?" #f 68 11 68 17 ("get-content" "eq?" "view")}
        {Lisp-Entry "content-inner?" #f 72 26 72 40 ("view")}}}})
"Containment-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Containment-Editor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Containment-Editor" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Containment-Editor" #f 48 7 48 25 ("View")
        {Lisp-Entry "client" #f 51 12 51 18 ("set-client" "get-client")}
        {Lisp-Entry "flow-layout" #f 54 8 54 19 ()}
        {Lisp-Entry "external-name" #f 61 16 61 29 ("containment-editor" "'containment-editor" "rest")}
        {Lisp-Entry "host-icon" #f 70 16 70 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 74 16 74 26 ()}
        {Lisp-Entry "client-activate" #f 78 11 78 26 ("get-client" "set-client" "View-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "finish" #f 89 11 89 17 ("layout-view" "0" "5" "4" "Rect" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" #f 95 11 95 17 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "get-client" #f 104 18 104 28 ("client")}
        {Lisp-Entry "set-client" #f 108 18 108 28 ("set!" "client" "neq?" "when" "clt")}}}})
"Content-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Content-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Content-View" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Content-View" #f 45 7 45 19 ("Layout-View")
        {Lisp-Entry "size-change" #f 53 11 53 22 ("content-size-change" "when" "get-client" "client" "let" "nextmethod" "size")}
        {Lisp-Entry "get-container" #f 65 18 65 31 ("parent")}
        {Lisp-Entry "get-client" #f 69 18 69 28 ("car" "children" "not-null?" "if")}
        {Lisp-Entry "inner?" #f 80 11 80 17 ("parent" "content-inner?" "nextmethod" "or" "view")}
        {Lisp-Entry "get-scroll-client" #f 90 11 90 28 ("get-scroll-client" "when" "get-client" "client" "let")}
        {Lisp-Entry "get-class-image" #f 101 16 101 31 ("Bitmap-Resource")}}}})
"Context-Action"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "context" "Context-Action.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.context.Context-Action" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Context-Action" #f 45 7 45 21 ("Component")
        {Lisp-Entry "image" #f 48 12 48 17 ("generate")}
        {Lisp-Entry "title" #f 49 12 49 17 ("generate")}
        {Lisp-Entry "handler" #f 50 12 50 19 ("generate")}
        {Lisp-Entry "construct-literal" #f 54 16 54 33 ("self" "new" "handler" "title" "image" "context")}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("handler~self" "title~self" "image~self" "set!" "nextmethod" "handler" "title" "image")}
        {Lisp-Entry "foldable?" #f 66 11 66 20 ()}
        {Lisp-Entry "fold-object" #f 71 11 71 22 ("handler" "title" "image" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "print" #f 80 11 80 16 ("handler" "title" "image" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}}})
"Context-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "context" "Context-Combo.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.context.Context-Combo" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Context-Combo" #f 47 7 47 20 ("Label" "Font" "font:" "Default" "Text-Style" "default-style:" "top-padding:" "2" "left-padding:" "body" "name:" "Combo-Box")
        {Lisp-Entry "finish" #f 55 11 55 17 ("update" "nextmethod" "rest")}
        {Lisp-Entry "update" #f 65 11 65 17 ("set-value" "when" "->string" "list" "get-name" "name" "let" "branch" "function" "map" "set-choices" "get-process" "get-context" "active" "get-children" "Branch" "collect-type" "all" "get-preferences" "pref" "let*")}
        {Lisp-Entry "selection-change" #f 82 11 82 27 ("get-value" "get-process" "set-context")}
        {Lisp-Entry "combo-choice" #f 91 11 91 23 ("selection-change")}}}})
"Context-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "context" "Context-Manager.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.context.Context-Manager" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Context-Manager" #f 48 7 48 22 ("251" "blue:" "174" "green:" "123" "red:" "Color" "background:" "Layout-View")
        {Lisp-Entry "external-name" #f 55 16 55 29 ("context-manager" "'context-manager" "rest")}
        {Lisp-Entry "host-icon" #f 64 16 64 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 68 16 68 26 ()}
        {Lisp-Entry "client-activate" #f 72 11 72 26 ("current-document" "install-context")}
        {Lisp-Entry "client-deactivate" #f 76 11 76 28 ("install-context")}
        {Lisp-Entry "workspace-minimisable?" #f 80 11 80 33 ()}
        {Lisp-Entry "layout" #f 89 11 89 17 ("children" "+" "increase!" "20" "-" "Dimension" "set-size" "Point" "new" "set-position" "view-height" "get-height" "height" "get-width" "width" "view" "function" "for-each" "10" "top" "let")}
        {Lisp-Entry "install-context" #f 106 11 106 26 ("layout-view" "get-application" "install-text" "close-children" "guest")}
        {Lisp-Entry "install-text" #f 113 11 113 23 ("get-context-text" "12" "24" "get-height" "+" "get-width" "Dimension" "set-size" "set-text" "title:" "Bitmap-Resource" "icon:" "self" "parent:" "Context-View" "new" "view" "let" "text-view" "title" "bind" "info" "function" "for-each" "when" "provider")}}}})
"Context-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Context-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Context-Menu" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Context-Menu" #f 45 7 45 19 ("Menu")
        {Lisp-Entry "client" #f 48 12 48 18 ("generate")}
        {Lisp-Entry "component-alias" #f 51 11 51 26 ("nextmethod" "else" "client" ":client" "case" "name")}
        {Lisp-Entry "make-condensed-menu" #f 62 18 62 37 ("layout-menu" "condense-section" "parent:" "Separator-Item" "new" "set!" "if" "section" "function" "for-each" "first?" "collect-sections" "sections" "self" "top-menu" "let" "15" "max-leafs" "max-leafs:" "identity" "key" "key:" "create-leaf" "user-items")}
        {Lisp-Entry "condense-section" #f 75 11 75 27 ("layout-menu" "first" "sub-items" "Context-Menu" "submenu" "user-data:" "string-append" "title:" "parent:" "Label-Item" "new" "menu-item" "let*" "else" "car" ":leafs" "eq?" "null?" "cond" "rest" "string" "value" "bind" "item" "for-each" "menu" "items" "proc" "letrec" "max-leafs:" "second" "key:" "list" "user-item" "function" "map" "string<?" "sort" "create-tree" "values-tree" "self" "top-menu" "let" "max-leafs" "key" "create-leaf" "user-items")}
        {Lisp-Entry "create-tree" #f 102 11 102 22 ("0" "prefix" "sub-items" "let*" "else" "cdr" "first" "string=?" "2" "=" "cond" "group" "map" "equal?" "test:" "1" "+" "subseq" "string-length" "second" "title" "leaf" "key:" "partition" "groups" ":leafs" "list" "length" "<=" "if" "level" "items" "function" "proc" "letrec" "15" "max-leafs" "let" "rest" "leafs")}}}})
"Context-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "context" "Context-Provider.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.context.Context-Provider" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Context-Provider" #f 45 11 45 27 ()
        {Lisp-Entry "get-context-text" #f 48 35 48 51 ()}}}})
"Context-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "context" "Context-Text-View.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.context.Context-Text-View" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Context-Text-View" #f 47 7 47 24 ("4" "top-padding:" "6" "left-padding:" "Label" "Font" "font:" "Default" "Text-Style" "default-style:" "Light" "name:" "Color" "background:" "editable?:" "Plain-Formatted-Text-View")
        {Lisp-Entry "new-hyperlink-style" #f 54 11 54 30 ("action:" "Hyperlink" "Color" "color:" "Hyperlink-Small" "name:" "Font" "font:" "Hyperlink-Style" "new" "action")}}}})
"Context-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "context" "Context-View.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.context.Context-View" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Context-View" #f 47 7 47 19 ("fill" "layout-type:" "content" "White" "name:" "Color" "background:" "Container")
        {Lisp-Entry "icon" #f 50 12 50 16 ("set-icon" "get-icon")}
        {Lisp-Entry "title" #f 51 12 51 17 ("set-title" "get-title")}
        {Lisp-Entry "get-icon" #f 64 18 64 26 ("icon")}
        {Lisp-Entry "set-icon" #f 68 18 68 26 ("icon" "set!" "value")}
        {Lisp-Entry "get-title" #f 72 18 72 27 ("title")}
        {Lisp-Entry "set-title" #f 76 18 76 27 ("title" "set!" "value")}
        {Lisp-Entry "get-text" #f 85 18 85 26 ("text" "'text" "get-content" "find-component")}
        {Lisp-Entry "set-text" #f 89 18 89 26 ("get-content" "set-parent" "close-text" "text")}
        {Lisp-Entry "close-text" #f 94 11 94 21 ("close" "when" "get-text" "text" "let")}
        {Lisp-Entry "size-change" #f 105 11 105 22 ("2" "Rect" "insets:" "invalidate-border" "invalidate-caption" "nextmethod" "size")}
        {Lisp-Entry "layout" #f 116 11 116 17 ("-" "Dimension" "new" "set-size" "24" "0" "Point" "set-position" "get-content" "content" "get-height" "height" "get-width" "width" "let")}
        {Lisp-Entry "caption-rect" #f 129 11 129 23 ("24" "get-width" "0" "Rect" "new")}
        {Lisp-Entry "invalidate-caption" #f 138 11 138 29 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "Active-Colors" #f 147 14 147 27 ("223" "blue:" "94" "green:" "6" "red:" "Color" "list")}
        {Lisp-Entry "Frame-Dark-Color" #f 151 14 151 30 ("blue:" "green:" "128" "red:" "Color")}
        {Lisp-Entry "Frame-Medium-Pen" #f 154 14 154 30 ("blue:" "green:" "142" "red:" "Color" "color:" "Pen" "new")}
        {Lisp-Entry "Frame-Light-Pen" #f 157 14 157 29 ("blue:" "green:" "160" "red:" "Color" "color:" "Pen" "new")}
        {Lisp-Entry "draw" #f 161 11 161 15 ("7" "6" "22" "if" "draw-text" "White" "Color" "set-text-color" "Label" "name:" "Font" "set-font" "title" "5" "4" "get-application" "get-icons-cache" "draw-image" "icon" "when" "second" "1" "Active-Colors" "first" "0" "list" "gradient-fill" "caption-rect" "caption" "get-bounds" "bounds" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "mouse-down" #f 178 11 178 21 ("caption-rect" "in-rect?" "cond" "pos")}}}})
"Control-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Control-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Control-Tester" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Control-Tester" #f 45 7 45 21 ("title:" "Tester")}
      {Lisp-Entry "Foo" #f 102 7 102 10 ("Signal")}}})
"Convertion"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "convertion" "Convertion.jazz"} 1226584780
    {Lisp-Entry "jazz.library.convertion.Convertion" #f 37 9 37 43 ("jazz")}})
"Cryptography-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "cryptography" "Cryptography-Provider.jazz"} 1226584780
    {Lisp-Entry "jazz.library.cryptography.Cryptography-Provider" #f 37 9 37 56 ("jazz")
      {Lisp-Entry "Cryptography-Provider" #f 44 7 44 28 ("Object")}
      {Lisp-Entry "Cryptography-Provider" #f 50 7 50 28 ("crypt-hash-data" "crypt-destroy-hash" "crypt-create-hash" "int" "crypt-release-context" "crypt-acquire-context" "Object")
        {Lisp-Entry "handle" #f 53 8 53 14 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("destroy-mandatory" "crypt-acquire-context" "handle" "set!" "nextmethod")}
        {Lisp-Entry "destroy" #f 62 11 62 18 ("nextmethod" "handle" "crypt-release-context")}
        {Lisp-Entry "hash-data" #f 72 18 72 27 ("crypt-hash-data" "hash" "function" "with-hash" "data")}
        {Lisp-Entry "with-hash" #f 78 11 78 20 ("crypt-destroy-hash" "when" "handle" "crypt-create-hash" "set!" "begin" "unwind-protect" "hash" "let" "proc")}
        {Lisp-Entry "int" #f 93 17 93 20 ()}
        {Lisp-Entry "void" #f 94 17 94 21 ()}
        {Lisp-Entry "int" #f 95 17 95 20 ()}
        {Lisp-Entry "void" #f 96 17 96 21 ()}
        {Lisp-Entry "Object" #f 97 17 97 23 ()}}}})
"Cursor-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Cursor-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Cursor-Event" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Cursor-Event" #f 44 7 44 19 ("Event")
        {Lisp-Entry "position" #f 47 8 47 16 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("position" "set!" "nextmethod" "pos" "sender" "kind")}
        {Lisp-Entry "get-position" #f 55 18 55 30 ("position")}}}})
"Cursor-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "resource" "Cursor-File.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.resource.Cursor-File" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Cursor-File" #f 45 7 45 18 ("Resource-File")
        {Lisp-Entry "resource-class" #f 48 11 48 25 ("Cursor-Resource")}
        {Lisp-Entry "resource-marker" #f 52 11 52 26 ()}}}})
"Cursor-Resource"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "resource" "Cursor-Resource.jazz"} 1226584782
    {Lisp-Entry "jazz.library.resource.Cursor-Resource" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Cursor-Resource" #f 43 7 43 22 ("Resource")
        {Lisp-Entry "fold-literal" #f 46 11 46 23 ("name" ",name" "',name" "Cursor-Resource" "new")}
        {Lisp-Entry "resource-type" #f 56 16 56 29 ("cursor" "'cursor")}}}})
"Custom-Card"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "card" "Custom-Card.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.card.Custom-Card" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Custom-Card" #f 46 7 46 18 ("Card")
        {Lisp-Entry "setup?" #f 49 8 49 14 ()}
        {Lisp-Entry "setup-properties" #f 57 11 57 27 ("set!" "layout-view" "client" "setup-entry" "domain" "property" "view" "function" "for-each-property-view" "setup?" "unless")}
        {Lisp-Entry "update-properties" #f 66 11 66 28 ("set-property-value" "client" "read-property" "value" "let" "domain" "property" "view" "function" "for-each-property-view")}
        {Lisp-Entry "save-properties-new" #f 73 11 73 30 ("set-property-modified?" "set-property" "designer" "set-name" "name-info" "'name-info" "field-name" "eq?" "if" "get-property-value" "value" "let" "get-property-modified?" "domain" "property" "view" "function" "for-each-property-view" "client" "when")}
        {Lisp-Entry "for-each-property-view" #f 85 11 85 33 ("property-domain" "domain" "get-property" "client" "class-of" "category-field" "property" "let*" "Property-View" "is?" "when" "level" "view" "function" "for-each-descendant" "proc")}
        {Lisp-Entry "find-property-view" #f 94 18 94 36 ("continuation-return" "get-property" "eq?" "Property-View" "is?" "and" "when" "level" "component" "for-each-descendant" "return" "function" "continuation-capture" "property")}
        {Lisp-Entry "client-update" #f 109 11 109 24 ("get-properties-mapping" "property-update" "read-property" "value" "locate" "view" "let" "type" "name" "property" "bind" "mapping" "function" "for-each" "update-properties" "setup-properties" "client" "when")}
        {Lisp-Entry "property-update" #f 121 29 121 44 ("error" "else" "set-color" "color" "seconds?:" "present" "not" "if" "date" "set-checked?" "boolean" "set-content" "text" "either" "set-string-content" "string" "case" "type" "value" "view")}
        {Lisp-Entry "save-client" #f 131 26 131 37 ("save-properties" "save-properties-new")}
        {Lisp-Entry "save-properties" #f 136 11 136 26 ("get-properties-mapping" "set!" "save-property" "when" "locate" "view" "type" "name" "property" "bind" "mapping" "function" "for-each" "modified?" "let")}
        {Lisp-Entry "save-property" #f 147 29 147 42 ("error" "else" "get-color" "color" "Date" "parse-string" "empty-string?" "if" "content" "let" "date" "get-checked?" "boolean" "get-content" "text" "set-modified?" "design-events?:" "get-string-content" "client" "designer" "set-property" "get-modified?" "when" "string" "case" "type" "property" "view")}
        {Lisp-Entry "get-properties-mapping" #f 181 29 181 51 ()}
        {Lisp-Entry "property-change" #f 190 11 190 26 ("client-update" "value" "property" "component")}}}})
"DAO"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "DAO.scm"} 1226584783}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "com" "DAO.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.com.DAO" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "patch-link" #f 46 13 46 23 ("HRESULT" "LPVOID*" "DWORD" "IUnknown*" "GUID*" "c-function" "coptr*" "interface" "context" "aggregate" "class")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "inventory" "DAO.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.inventory.DAO" #f 37 9 37 53 ("jazz")}})
"DC-Snapshot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "DC-Snapshot.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.DC-Snapshot" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Snapshot-Size" #f 47 10 47 23 ("200" "Dimension")}
      {Lisp-Entry "DC-Snapshot" #f 51 7 51 18 ("Viewable" "Object")
        {Lisp-Entry "memory-dc" #f 54 8 54 17 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("Snapshot-Size" "destination-size:" "bit-blit" "size:" "Memory-Surface" "new" "memory-dc" "set!" "nextmethod" "size" "surface")}
        {Lisp-Entry "get-title" #f 64 11 64 20 ()}
        {Lisp-Entry "get-viewer-class" #f 68 11 68 27 ("DC-Viewer")}
        {Lisp-Entry "get-memory-dc" #f 72 18 72 31 ("memory-dc")}}
      {Lisp-Entry "DC-Viewer" #f 81 7 81 16 ("entry" "style:" "edge" "border-type:" "202" "Dimension" "size:" "center" "layout-type:" "Layout-View")
        {Lisp-Entry "client" #f 90 12 90 18 ("generate")}}
      {Lisp-Entry "DC-Renderer" #f 98 7 98 18 ("View")
        {Lisp-Entry "client" #f 101 12 101 18 ()}
        {Lisp-Entry "draw" #f 104 11 104 15 ("get-size" "destination-size:" "size:" "bit-blit" "client" "get-memory-dc" "memory-dc" "Snapshot-Size" "size" "let" "lv" "lh" "context" "surface")}}}})
"Data-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Column.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Column" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Data-Column" #f 45 7 45 18 ("Data-Object")
        {Lisp-Entry "datatype" #f 48 8 48 16 ()}
        {Lisp-Entry "width" #f 49 8 49 13 ()}
        {Lisp-Entry "construct-literal" #f 53 16 53 33 ("properties:" "name:" "self" "new" "properties" "name" "context")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("properties~self" "width~self" "datatype~self" "parent~self" "name~self" "set!" "nextmethod" "others" "bind-keywords" "properties" "properties:" "width" "width:" "datatype" "datatype:" "parent" "parent:" "name" "name:")}
        {Lisp-Entry "print-schema" #f 72 21 72 33 ("properties" "datatype" "name" "self" "class-of" "type-name" "identifier-name" "format" "printer")}
        {Lisp-Entry "get-kind" #f 85 11 85 19 ("column" "'column")}
        {Lisp-Entry "get-datatype" #f 94 18 94 30 ("datatype")}
        {Lisp-Entry "get-width" #f 98 18 98 27 ("width")}
        {Lisp-Entry "property-names" #f 102 11 102 25 ("description" "timestamp?" "identity-increment" "identity-seed" "identity-replication?" "identity?" "allow-zero-length?" "validation-text" "validation-rule" "display-format" "auto-increment?" "default-value" "ordinal-position" "nullable?" "datatype")}
        {Lisp-Entry "get-property" #f 106 11 106 23 ("nextmethod" "apply" "else" "width" "width:" "datatype" "datatype:" "case" "rest" "keyword")}
        {Lisp-Entry "set-property" #f 113 11 113 23 ("nextmethod" "else" "width" "width:" "datatype" "set!" "datatype:" "case" "value" "keyword")}
        {Lisp-Entry "auto-generate?" #f 120 18 120 32 ("identity?" "'identity?" "get-property" "timestamp?" "'timestamp?" "has-property?" "and" "or")}
        {Lisp-Entry "get-prefered-width" #f 130 18 130 36 ("10" "datatype" "get-size" "either")}}}})
"Data-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Constraint.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Constraint" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Data-Constraint" #f 45 7 45 22 ("Data-Object")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("properties:" "name:" "self" "new" "properties" "name" "context")}
        {Lisp-Entry "print-schema" #f 58 21 58 33 ("properties" "name" "self" "class-of" "type-name" "identifier-name" "format" "printer")}
        {Lisp-Entry "get-kind" #f 70 11 70 19 ("constraint" "'constraint")}
        {Lisp-Entry "property-names" #f 79 11 79 25 ("exclude-replication?" "checked?" "text")}}}})
"Data-Container"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Container.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Container" #f 38 9 38 40 ("jazz")
      {Lisp-Entry "Data-Container" #f 47 7 47 21 ("Object")
        {Lisp-Entry "table" #f 50 8 50 13 ()}
        {Lisp-Entry "state" #f 51 8 51 13 ("generate")}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("table~self" "state~self" "set!" "nextmethod" "state" "table")}
        {Lisp-Entry "get-table" #f 65 18 65 27 ("table")}
        {Lisp-Entry "get-values" #f 74 26 74 36 ()}
        {Lisp-Entry "get" #f 75 26 75 29 ("identifier")}
        {Lisp-Entry "save" #f 78 18 78 22 ("execute" "if" "save-statement" "statement" "let" "user" "user:" "connection")}
        {Lisp-Entry "save-statement" #f 85 11 85 25 ("else" "delete-statement" "delete" "insert-statement" "insert" "update-statement" "update" "state" "case" "user")}
        {Lisp-Entry "insert-statement" #f 93 19 93 35 ("tie" "format" "if" "format-column" "join" "let" "get" "format-value" "name" "map" "values" "table" "get-columns" "get-name" "auto-generate?" "not" "essay" "column" "function" "collect" "columns" "let*" "user")}
        {Lisp-Entry "update-statement" #f 103 19 103 35 ("tie" "format" "if" "string-append" "value" "join" "columns+values" "format-column" "map" "values" "get-columns" "equal?" "auto-generate?" "not" "essay" "name" "let" "column" "function" "collect" "columns" "get" "format-value" "primary-value" "table" "get-primary-key" "get-name" "primary-key" "let*" "user")}
        {Lisp-Entry "delete-statement" #f 120 19 120 35 ("tie" "format-column" "get" "format-value" "primary-value" "get-primary-key" "primary-key" "table" "get-name" "name" "let" "user")}
        {Lisp-Entry "format-column" #f 128 11 128 24 ("string-append" "name")}
        {Lisp-Entry "format-value" #f 132 11 132 23 ("error" "else" "number->string" "number?" "present-date-day" "date?" "if" "boolean?" "sql-sanitize-string" "string-append" "string?" "nil?" "cond" "value")}}}})
"Data-Entity"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Entity.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Entity" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Data-Entity" #f 45 7 45 18 ("Data-Object")
        {Lisp-Entry "owner" #f 48 8 48 13 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("owner~self" "set!" "nextmethod" "apply" "others" "owner" "bind-keywords" "rest")}
        {Lisp-Entry "get-owner" #f 62 18 62 27 ("owner")}
        {Lisp-Entry "get-children" #f 66 26 66 38 ()}
        {Lisp-Entry "get-categorized-children" #f 70 26 70 50 ("get-children")}
        {Lisp-Entry "create" #f 74 26 74 32 ("name" "kind")}
        {Lisp-Entry "add" #f 78 26 78 29 ("object" "kind")}
        {Lisp-Entry "object-name" #f 82 21 82 32 ("get-name" "object")}}}})
"Data-Group"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "view" "Data-Group.jazz"} 1226584775
    {Lisp-Entry "jazz.database.view.Data-Group" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Data-Group" #f 46 7 46 17 ("Group")}}})
"Data-Index"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Index.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Index" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Data-Index" #f 45 7 45 17 ("Data-Object")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("properties:" "name:" "self" "new" "properties" "name" "context")}
        {Lisp-Entry "print-schema" #f 58 21 58 33 ("properties" "name" "self" "class-of" "type-name" "identifier-name" "format" "printer")}
        {Lisp-Entry "get-kind" #f 70 11 70 19 ("index" "'index")}
        {Lisp-Entry "property-names" #f 79 11 79 25 ("fields/orders" "pad-index?" "fill-factor" "recompute-statistics?" "ignore-duplicates?" "clustered?" "unique?")}
        {Lisp-Entry "present-property" #f 83 11 83 27 ("nextmethod" "else" "second" "first" "field/order" "function" "map" "format" "fields/orders" "case" "value" "property")}}}})
"Data-Object"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Object.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Object" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Data-Object" #f 45 7 45 18 ("Object")
        {Lisp-Entry "name" #f 48 8 48 12 ()}
        {Lisp-Entry "parent" #f 49 8 49 14 ()}
        {Lisp-Entry "properties" #f 50 8 50 18 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("properties~self" "parent~self" "name~self" "set!" "nextmethod" "properties" "properties:" "parent" "parent:" "name" "name:")}
        {Lisp-Entry "print" #f 60 11 60 16 ("name" "either" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-name" #f 71 18 71 26 ("name")}
        {Lisp-Entry "set-name" #f 75 18 75 26 ("name" "set!" "value")}
        {Lisp-Entry "get-parent" #f 79 18 79 28 ("parent")}
        {Lisp-Entry "set-parent" #f 83 18 83 28 ("parent" "set!" "value")}
        {Lisp-Entry "get-kind" #f 87 26 87 34 ()}
        {Lisp-Entry "Error" #f 96 14 96 19 ("cons")}
        {Lisp-Entry "Inexistant" #f 99 14 99 24 ("cons")}
        {Lisp-Entry "property-names" #f 103 26 103 40 ()}
        {Lisp-Entry "present-property" #f 107 26 107 42 ("else" "present" "Datatype" "typecase" "null?" "if" "value" "property")}
        {Lisp-Entry "get-properties" #f 115 18 115 32 ("properties")}
        {Lisp-Entry "has-property?" #f 119 18 119 31 ("get-property" "neq?" "Box" "not-found" "let" "property")}
        {Lisp-Entry "get-property" #f 124 26 124 38 ("error" "neq?" "if" "Inexistant" "not-found:" "properties" "getf" "value" "let" "Error" "not-found" "keyword")}
        {Lisp-Entry "set-property" #f 133 26 133 38 ("list" "append!" "set!" "cdr" "set-car!" "if" "properties" "getprop" "pair" "let" "value" "keyword")}}}})
"Data-Primary-Key"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Primary-Key.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Primary-Key" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Data-Primary-Key" #f 45 7 45 23 ("Data-Object")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("properties:" "name:" "self" "new" "properties" "name" "context")}
        {Lisp-Entry "print-schema" #f 58 21 58 33 ("properties" "name" "self" "class-of" "type-name" "identifier-name" "format" "printer")}
        {Lisp-Entry "get-kind" #f 70 11 70 19 ("primary-key" "'primary-key")}
        {Lisp-Entry "property-names" #f 79 11 79 25 ("fill-factor" "clustered?" "fields/orders")}
        {Lisp-Entry "present-property" #f 83 11 83 27 ("nextmethod" "else" "second" "first" "field/order" "function" "map" "format" "fields/orders" "case" "value" "property")}}}})
"Data-Procedure"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Procedure.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Procedure" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Data-Procedure" #f 45 7 45 21 ("Data-Entity")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("properties:" "name:" "self" "new" "properties" "name" "context")}
        {Lisp-Entry "print-schema" #f 58 21 58 33 ("properties" "name" "self" "class-of" "type-name" "identifier-name" "format" "printer")}
        {Lisp-Entry "get-kind" #f 70 11 70 19 ("procedure" "'procedure")}
        {Lisp-Entry "property-names" #f 79 11 79 25 ("text")}}}})
"Data-Relation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Relation.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Relation" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Data-Relation" #f 45 7 45 20 ("Data-Entity")
        {Lisp-Entry "primary-table" #f 48 8 48 21 ()}
        {Lisp-Entry "primary-columns" #f 49 8 49 23 ()}
        {Lisp-Entry "foreign-table" #f 50 8 50 21 ()}
        {Lisp-Entry "foreign-columns" #f 51 8 51 23 ()}
        {Lisp-Entry "construct-literal" #f 55 16 55 33 ("properties:" "name:" "self" "new" "properties" "name" "context")}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("properties~self" "foreign-columns~self" "foreign-table~self" "primary-columns~self" "primary-table~self" "parent~self" "name~self" "set!" "nextmethod" "others" "foreign-columns" "foreign-table" "primary-columns" "primary-table" "properties" "parent" "name" "bind-keywords" "rest")}
        {Lisp-Entry "print-schema" #f 77 21 77 33 ("properties" "foreign-columns" "foreign-table" "primary-columns" "primary-table" "name" "self" "class-of" "type-name" "identifier-name" "format" "printer")}
        {Lisp-Entry "get-kind" #f 93 11 93 19 ("relation" "'relation")}
        {Lisp-Entry "get-primary-table" #f 102 18 102 35 ("primary-table")}
        {Lisp-Entry "get-primary-columns" #f 106 18 106 37 ("primary-columns")}
        {Lisp-Entry "get-foreign-table" #f 110 18 110 35 ("foreign-table")}
        {Lisp-Entry "get-foreign-columns" #f 114 18 114 37 ("foreign-columns")}
        {Lisp-Entry "property-names" #f 118 11 118 25 ("exclude-replication?" "checked?" "right?" "left?" "delete-cascade?" "update-cascade?" "unique?" "foreign-columns" "foreign-table" "primary-columns" "primary-table")}
        {Lisp-Entry "present-property" #f 122 11 122 27 ("nextmethod" "else" "format" "foreign-columns" "primary-columns" "case" "value" "property")}
        {Lisp-Entry "get-property" #f 128 11 128 23 ("nextmethod" "apply" "else" "foreign-columns" "foreign-columns:" "foreign-table" "foreign-table:" "primary-columns" "primary-columns:" "primary-table" "primary-table:" "case" "rest" "keyword")}
        {Lisp-Entry "set-property" #f 137 11 137 23 ("nextmethod" "else" "foreign-columns" "foreign-columns:" "foreign-table" "foreign-table:" "primary-columns" "primary-columns:" "primary-table" "set!" "primary-table:" "case" "value" "keyword")}}}})
"Data-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Row.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Row" #f 38 9 38 34 ("jazz")
      {Lisp-Entry "Data-Row" #f 46 7 46 15 ("Data-Container")
        {Lisp-Entry "values" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("get-columns" "nil" "column" "function" "map" "either" "values~self" "set!" "nextmethod" "values" "state" "table")}
        {Lisp-Entry "print" #f 57 11 57 16 ("values" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-values" #f 68 11 68 21 ("values")}
        {Lisp-Entry "get" #f 77 11 77 14 ("get" "map" "else" "error" "continuation-return" "get-name" "ci=?" "when" "value" "column" "for-each" "table" "get-columns" "columns" "let" "return" "function" "continuation-capture" "string?" "values" "element" "integer?" "cond" "name/rank")}
        {Lisp-Entry "set" #f 94 18 94 21 ("cdr" "set-car!" "get-name" "ci=?" "car" "column" "error" "null?" "or" "if" "values" "scan" "table" "get-columns" "columns" "iterate" "let" "value" "name")}}}})
"Data-Schema"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Schema.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Schema" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Data-Schema" #f 45 7 45 18 ("Entity" "Data-Entity")
        {Lisp-Entry "tables" #f 48 8 48 14 ("equal?" "test:" "make-table")}
        {Lisp-Entry "views" #f 49 8 49 13 ("equal?" "test:" "make-table")}
        {Lisp-Entry "relations" #f 50 8 50 17 ("equal?" "test:" "make-table")}
        {Lisp-Entry "procedures" #f 51 8 51 18 ("equal?" "test:" "make-table")}
        {Lisp-Entry "construct-literal" #f 55 16 55 33 ("procedures:" "relations:" "views:" "tables:" "properties:" "self" "new" "procedures" "relations" "views" "tables" "properties" "context")}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("add-procedures" "add-relations" "add-views" "add-tables" "properties~self" "parent~self" "name~self" "set!" "nextmethod" "procedures" "procedures:" "relations" "relations:" "views" "views:" "tables" "tables:" "properties" "properties:" "parent" "parent:" "name" "name:")}
        {Lisp-Entry "print" #f 70 11 70 16 ("procedures" "relations" "views" "tables" "table-length" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print-schema" #f 85 18 85 30 ("print-procedures" "print-relations" "print-views" "print-tables" "properties" "self" "class-of" "type-name" "identifier-name" "format" "sort-predicates" "greater" "smaller" "equal" "receive" "printer")}
        {Lisp-Entry "print-tables" #f 97 11 97 23 ("object-name" "key:" "tables" "gather" "sort" "print-schema" "set!" "if" "table" "function" "for-each" "first?" "let" "format" "printer" "smaller")}
        {Lisp-Entry "print-views" #f 109 11 109 22 ("object-name" "key:" "views" "gather" "sort" "print-schema" "set!" "if" "view" "function" "for-each" "first?" "let" "format" "printer" "smaller")}
        {Lisp-Entry "print-relations" #f 121 11 121 26 ("object-name" "key:" "relations" "gather" "sort" "print-schema" "set!" "if" "relation" "function" "for-each" "first?" "let" "format" "printer" "smaller")}
        {Lisp-Entry "print-procedures" #f 133 11 133 27 ("object-name" "key:" "procedures" "gather" "sort" "print-schema" "set!" "if" "procedure" "function" "for-each" "first?" "let" "format" "printer" "smaller")}
        {Lisp-Entry "get-kind" #f 150 11 150 19 ("schema" "'schema")}
        {Lisp-Entry "create" #f 159 11 159 17 ("Data-Procedure" "procedure" "Data-Relation" "relation" "Data-View" "view" "name:" "Data-Table" "new" "table" "case" "name" "kind")}
        {Lisp-Entry "add" #f 167 11 167 14 ("add-procedure" "procedure" "add-relation" "relation" "add-view" "view" "add-table" "table" "case" "object" "kind")}
        {Lisp-Entry "get-children" #f 180 11 180 23 ("get-output" "procedures" "relations" "views" "tables" "for-each" "put" "object" "function" "add" "List-Factory" "new" "fact" "let*")}
        {Lisp-Entry "get-categorized-children" #f 192 11 192 35 ("get-output" "get-categorized-procedures" "get-categorized-relations" "get-categorized-views" "get-categorized-tables" "put-sequence" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "get-tables" #f 206 18 206 28 ("tables" "gather")}
        {Lisp-Entry "get-categorized-tables" #f 210 18 210 40 ("collect-linked-tables" "object-name" "key:" "collect-normal-tables" "sort" "append!" "get-tables" "tables" "let" "sort-predicates" "greater" "smaller" "equal" "receive")}
        {Lisp-Entry "collect-normal-tables" #f 217 18 217 39 ("linked?:" "get-property" "not" "table" "function" "collect-if" "tables")}
        {Lisp-Entry "collect-linked-tables" #f 223 18 223 39 ("linked?:" "get-property" "table" "function" "collect-if" "tables")}
        {Lisp-Entry "get-table" #f 229 18 229 27 ("tables" "table-ref" "name")}
        {Lisp-Entry "add-table" #f 233 18 233 27 ("get-name" "tables" "table-set!" "self" "set-parent" "table")}
        {Lisp-Entry "add-tables" #f 238 18 238 28 ("add-table" "for-each" "tables")}
        {Lisp-Entry "get-views" #f 247 18 247 27 ("views" "gather")}
        {Lisp-Entry "get-categorized-views" #f 251 18 251 39 ("object-name" "key:" "get-views" "sort" "sort-predicates" "greater" "smaller" "equal" "receive")}
        {Lisp-Entry "get-view" #f 256 18 256 26 ("views" "table-ref" "name")}
        {Lisp-Entry "add-view" #f 260 18 260 26 ("get-name" "views" "table-set!" "self" "set-parent" "view")}
        {Lisp-Entry "add-views" #f 265 18 265 27 ("add-view" "for-each" "views")}
        {Lisp-Entry "get-relations" #f 274 18 274 31 ("relations" "gather")}
        {Lisp-Entry "get-categorized-relations" #f 278 18 278 43 ("object-name" "key:" "get-relations" "sort" "sort-predicates" "greater" "smaller" "equal" "receive")}
        {Lisp-Entry "get-relation" #f 283 18 283 30 ("relations" "table-ref" "name")}
        {Lisp-Entry "add-relation" #f 287 18 287 30 ("get-name" "relations" "table-set!" "self" "set-parent" "relation")}
        {Lisp-Entry "add-relations" #f 292 18 292 31 ("add-relation" "for-each" "relations")}
        {Lisp-Entry "get-procedures" #f 301 18 301 32 ("procedures" "gather")}
        {Lisp-Entry "get-categorized-procedures" #f 305 18 305 44 ("object-name" "key:" "get-procedures" "sort" "sort-predicates" "greater" "smaller" "equal" "receive")}
        {Lisp-Entry "get-procedure" #f 310 18 310 31 ("procedures" "table-ref" "name")}
        {Lisp-Entry "add-procedure" #f 314 18 314 31 ("get-name" "procedures" "table-set!" "self" "set-parent" "procedure")}
        {Lisp-Entry "add-procedures" #f 319 18 319 32 ("add-procedure" "for-each" "procedures")}
        {Lisp-Entry "present" #f 328 18 328 25 ("name:" "get-property")}
        {Lisp-Entry "import-inventory" #f 337 23 337 39 ("import-inventory" "read-only?:" "get-inventory" "inventory" "let" "new-connection" "connection" "with-closed" "properties:" "self" "new" "schema" "data-source:" "get-provider" "external-name" "provider:" "present" "name:" "list" "properties" "let*" "reporter" "data-source" "source-name")}
        {Lisp-Entry "import-inventory" #f 346 11 346 27 ("import-procedures" "import-relations" "import-views" "import-tables" "reporter" "inventory" "source-name")}
        {Lisp-Entry "import-tables" #f 353 11 353 24 ("add-table" "create-constraints" "set-constraints" "create-triggers" "set-triggers" "create-indexes" "set-indexes" "create-columns" "set-columns" "create-primary-key" "set-primary-key" "linked?:" "getf" "unless" "user-message" "properties:" "name:" "owner:" "Data-Table" "new" "data-table" "table-properties" "properties" "get-title" "name" "get-owner" "owner" "let*" "table" "function" "for-each" "get-tables" "tables" "with-closed" "columns-ordinal-position-consecutive?" "columns-consecutive?" "let" "reporter" "inventory" "source-name")}
        {Lisp-Entry "table-properties" #f 372 11 372 27 ("get-source-table-name" "source-table-name:" "get-connect" "essay" "connect:" "get-validation-text" "validation-text:" "get-validation-rule" "validation-rule:" "get-description" "description:" "linked?:" "list" "get-linked?" "linked?" "let" "table")}
        {Lisp-Entry "create-primary-key" #f 383 11 383 29 ("properties:" "name:" "Data-Primary-Key" "new" "primary-key-properties" "properties" "get-title" "name" "let" "when" "get-primary-key" "primary-key" "with-closed" "table" "data-table")}
        {Lisp-Entry "primary-key-properties" #f 391 11 391 33 ("get-fields/orders" "fields/orders:" "get-fill-factor" "fill-factor:" "get-clustered?" "clustered?:" "list" "primary-key")}
        {Lisp-Entry "create-columns" #f 398 11 398 25 ("properties:" "name:" "Data-Column" "new" "increase!" "not" "essay" "column-properties" "properties" "get-title" "name" "column" "function" "map" "get-columns" "columns" "with-closed" "0" "ordinal-position" "let" "columns-consecutive?" "table" "data-table")}
        {Lisp-Entry "column-properties" #f 409 11 409 28 ("get-identity-increment" "identity-increment:" "get-identity-seed" "identity-seed:" "get-identity-replication?" "identity-replication?:" "get-identity?" "identity?:" "get-auto-increment?" "auto-increment?:" "get-display-format" "display-format:" "get-ordinal-position" "either" "ordinal-position:" "get-description" "description:" "get-allow-zero-length?" "allow-zero-length?:" "get-validation-text" "validation-text:" "get-validation-rule" "validation-rule:" "get-default-value" "default-value:" "get-nullable?" "nullable?:" "get-datatype" "datatype:" "list" "ordinal-position" "column")}
        {Lisp-Entry "create-indexes" #f 427 11 427 25 ("properties:" "name:" "Data-Index" "new" "index-properties" "properties" "get-title" "name" "let" "index" "function" "map" "get-indexes" "indexes" "with-closed" "table" "data-table")}
        {Lisp-Entry "index-properties" #f 436 11 436 27 ("get-fields/orders" "fields/orders:" "get-pad-index?" "pad-index?:" "get-fill-factor" "fill-factor:" "get-recompute-statistics?" "recompute-statistics?:" "get-ignore-duplicates?" "ignore-duplicates?:" "get-clustered?" "clustered?:" "get-unique?" "unique?:" "list" "index")}
        {Lisp-Entry "create-triggers" #f 447 11 447 26 ("properties:" "name:" "Data-Trigger" "new" "trigger-properties" "properties" "get-title" "name" "let" "trigger" "function" "map" "get-triggers" "triggers" "with-closed" "table" "data-table")}
        {Lisp-Entry "trigger-properties" #f 456 11 456 29 ("get-text" "text:" "list" "trigger")}
        {Lisp-Entry "create-constraints" #f 461 11 461 29 ("properties:" "name:" "Data-Constraint" "new" "constraint-properties" "properties" "get-title" "name" "let" "constraint" "function" "map" "get-constraints" "constraints" "with-closed" "table" "data-table")}
        {Lisp-Entry "constraint-properties" #f 470 11 470 32 ("get-exclude-replication?" "exclude-replication?:" "get-checked?" "checked?:" "get-text" "text:" "list" "constraint")}
        {Lisp-Entry "import-views" #f 477 11 477 23 ("add-view" "user-message" "properties:" "name:" "Data-View" "new" "data-view" "view-properties" "properties" "get-title" "name" "let*" "view" "function" "for-each" "get-views" "views" "with-closed" "reporter" "inventory" "source-name")}
        {Lisp-Entry "view-properties" #f 488 11 488 26 ("get-text" "text:" "list" "view")}
        {Lisp-Entry "import-relations" #f 493 11 493 27 ("add-relation" "user-message" "properties:" "name:" "Data-Relation" "new" "data-relation" "relation-properties" "properties" "get-title" "name" "let*" "relation" "function" "for-each" "get-relations" "relations" "with-closed" "reporter" "inventory" "source-name")}
        {Lisp-Entry "relation-properties" #f 504 11 504 30 ("get-exclude-replication?" "exclude-replication?:" "get-checked?" "checked?:" "get-right?" "right?:" "get-left?" "left?:" "get-delete-cascade?" "delete-cascade?:" "get-update-cascade?" "update-cascade?:" "get-unique?" "unique?:" "get-foreign-field-names" "foreign-columns:" "get-foreign-table" "foreign-table:" "get-primary-field-names" "primary-columns:" "get-primary-table" "primary-table:" "list" "relation")}
        {Lisp-Entry "import-procedures" #f 519 11 519 28 ("add-procedure" "user-message" "properties:" "name:" "Data-Procedure" "new" "data-procedure" "procedure-properties" "properties" "get-title" "name" "let*" "procedure" "function" "for-each" "get-procedures" "procedures" "with-closed" "reporter" "inventory" "source-name")}
        {Lisp-Entry "procedure-properties" #f 530 11 530 31 ("get-text" "text:" "list" "procedure")}
        {Lisp-Entry "get-factory" #f 540 11 540 22 ("Data-Schema-Factory" "new")}
        {Lisp-Entry "get-factories" #f 544 11 544 24 ()}
        {Lisp-Entry "get-presentation" #f 548 11 548 27 ("name:" "get-property")}
        {Lisp-Entry "set-presentation" #f 552 11 552 27 ("name:" "set-property" "presentation" "controller")}
        {Lisp-Entry "can-cut-entity?" #f 556 11 556 26 ()}
        {Lisp-Entry "can-copy-entity?" #f 562 11 562 27 ()}
        {Lisp-Entry "can-paste-entity?" #f 568 11 568 28 ()}
        {Lisp-Entry "determine-paster" #f 572 11 572 27 ("rest")}
        {Lisp-Entry "can-rename-entity?" #f 576 11 576 29 ()}
        {Lisp-Entry "can-delete-entity?" #f 580 11 580 29 ()}
        {Lisp-Entry "can-move-entity?" #f 584 11 584 27 ()}
        {Lisp-Entry "can-view-properties?" #f 588 11 588 31 ()}
        {Lisp-Entry "get-categorized-properties" #f 592 11 592 37 ()}}}})
"Data-Schema-Factory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "factory" "Data-Schema-Factory.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.factory.Data-Schema-Factory" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Data-Schema-Factory" #f 45 7 45 26 ("Entity-Factory")
        {Lisp-Entry "get-class" #f 48 11 48 20 ("Data-Schema")}
        {Lisp-Entry "get-name-prohibited?" #f 52 11 52 31 ()}
        {Lisp-Entry "get-name-mandatory?" #f 56 11 56 30 ()}
        {Lisp-Entry "get-name-unicity?" #f 60 11 60 28 ()}
        {Lisp-Entry "presentation->name" #f 64 11 64 29 ("presentation")}
        {Lisp-Entry "get-factory-presentation" #f 68 11 68 35 ()}
        {Lisp-Entry "get-factory-image" #f 72 11 72 28 ("Bitmap-Resource")}}}})
"Data-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Source.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Source" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Data-Source" #f 47 7 47 18 ("Schema-Source" "Component")
        {Lisp-Entry "username" #f 50 12 50 20 ("generate")}
        {Lisp-Entry "password" #f 51 12 51 20 ("generate")}
        {Lisp-Entry "launch" #f 60 11 60 17 ("self" "SQL-Connections-Manager" "set-active-data-source")}
        {Lisp-Entry "validate" #f 69 26 69 34 ()}
        {Lisp-Entry "get-provider" #f 79 26 79 38 ("external-name" "Provider" "get-provider")}
        {Lisp-Entry "new-connection" #f 88 26 88 40 ()}
        {Lisp-Entry "get-connection-string" #f 92 26 92 47 ()}
        {Lisp-Entry "get-connection-properties" #f 96 26 96 51 ()}
        {Lisp-Entry "new-inventory" #f 105 26 105 39 ("rest" "connection")}
        {Lisp-Entry "get-data-schema" #f 115 11 115 26 ("self" "present" "Data-Schema" "import-inventory" "reporter" "reporter:")}
        {Lisp-Entry "present" #f 125 26 125 33 ()}
        {Lisp-Entry "get-class-presentation" #f 134 16 134 38 ()}
        {Lisp-Entry "get-class-image" #f 138 16 138 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-name-mandatory?" #f 142 16 142 35 ()}
        {Lisp-Entry "get-name-unicity?" #f 146 16 146 33 ()}
        {Lisp-Entry "presentation->name" #f 150 16 150 34 ("presentation")}
        {Lisp-Entry "name->presentation" #f 154 16 154 34 ("name")}
        {Lisp-Entry "property-presentation" #f 158 16 158 37 ("nextmethod" "else" "password" "username" "field-name" "case" "property")}
        {Lisp-Entry "persist-property?" #f 165 16 165 33 ("nextmethod" "else" "persist-passwords?" "password:" "persist-usernames?" "username:" "case" "get-process" "process" "let" "property")}
        {Lisp-Entry "get-categorized-properties" #f 173 11 173 37 ("password" "username" "class-info")}
        {Lisp-Entry "get-row-instance" #f 177 11 177 27 ("nextmethod" "else" "Password-Row" "password" "nullable?:" "String-Row" "new" "username" "field-name" "case" "property")}}}})
"Data-Source-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "view" "Data-Source-Browser.jazz"} 1226584775
    {Lisp-Entry "jazz.database.view.Data-Source-Browser" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Data-Source-Browser" #f 48 7 48 26 ("160" "450" "33" "source" "top-padding:" "2" "left-padding:" "body" "content" "scroller" "on-provider-change" ":form" "Event-Handler" "content-change-handler:" "provider" "edge" "border-type:" "19" "146" "1" "67" "provider-border" "20" "50" "0" "Point" "position:" "title:" "provider-label" "name:" "206" "500" "Dimension" "size:" "View")
        {Lisp-Entry "provider" #f 51 12 51 20 ("set-provider" "get-provider")}
        {Lisp-Entry "install" #f 65 11 65 18 ("setup-providers" "nextmethod" "rest")}
        {Lisp-Entry "get-provider" #f 75 18 75 30 ("provider")}
        {Lisp-Entry "set-provider" #f 79 18 79 30 ("provider-update" "provider" "set!" "value")}
        {Lisp-Entry "get-data-source" #f 84 18 84 33 ("get-data-source" "when" "get-data-source-browser" "browser" "let")}
        {Lisp-Entry "set-data-source" #f 90 18 90 33 ("get-data-source-browser" "set-data-source" "provider-update" "set-value" "get-provider" "external-name" "set!" "set-entry" "null?" "if" "provider" "'provider" "locate" "combo" "let" "source")}
        {Lisp-Entry "setup-username/password-mode" #f 100 18 100 46 ("setup-username/password-mode" "when" "get-data-source-browser" "browser" "let")}
        {Lisp-Entry "set-default-focus" #f 111 18 111 35 ()}
        {Lisp-Entry "on-provider-change" #f 115 11 115 29 ("provider-update" "get-value" "set!" "provider" "'provider" "locate" "combo" "let" "evt")}
        {Lisp-Entry "on-return-press" #f 121 11 121 26 ("self" "invoke" "return-press-handler" "when" "evt")}
        {Lisp-Entry "layout" #f 131 11 131 17 ("get-size" "-" "set-size" "33" "0" "Point" "source" "'source" "set-position" "provider-border" "'provider-border" "provider-label" "'provider-label" "locate" "set-visible?" "begin" "provider" "null?" "if")}
        {Lisp-Entry "validate-content" #f 149 11 149 27 ("when" "get-data-source-browser" "browser" "let" "provider" "'provider" "locate" "validate-content")}
        {Lisp-Entry "setup-providers" #f 161 11 161 26 ("set-entry" "set-choices" "second" "key:" "Provider" "get-providers" "present" "external-name" "list" "function" "map" "<" "sort" "choices" "provider" "'provider" "locate" "combo" "let")}
        {Lisp-Entry "get-data-source-browser" #f 178 11 178 34 ("source" "'source" "locate" "first-child")}
        {Lisp-Entry "provider-update" #f 182 11 182 26 ("layout-view" "parent:" "Provider" "get-provider" "browser-class" "new" "provider" "when" "close-children" "'source" "locate" "source" "let")}}}})
"Data-Source-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "view" "Data-Source-Chooser.jazz"} 1226584775
    {Lisp-Entry "jazz.database.view.Data-Source-Chooser" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Data-Source-Chooser" #f 48 7 48 26 ("on-cancel" ":host" "195" "cancel" "on-update" ":guest" "Event-Handler" "action-handler:" "default?:" "24" "80" "170" "105" "update" "browser" "0" "22" "Rect" "layout-insets:" "fill" "layout-type:" "116" "604" "44" "-2" "database" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "202" "500" "Dimension" "size:" "View")
        {Lisp-Entry "provider" #f 51 12 51 20 ()}
        {Lisp-Entry "finish" #f 65 11 65 17 ("target-provider" "setup-browser" "nextmethod" "rest")}
        {Lisp-Entry "target-provider" #f 70 29 70 44 ("provider")}
        {Lisp-Entry "host-title" #f 79 16 79 26 ()}
        {Lisp-Entry "host-size" #f 83 16 83 25 ("250" "650" "Dimension")}
        {Lisp-Entry "get-provider" #f 92 18 92 30 ("provider")}
        {Lisp-Entry "set-provider" #f 96 18 96 30 ("get-browser" "set-provider" "provider" "set!" "value")}
        {Lisp-Entry "get-data-source" #f 101 18 101 33 ("get-browser" "get-data-source")}
        {Lisp-Entry "set-data-source" #f 105 18 105 33 ("get-browser" "set-data-source" "value")}
        {Lisp-Entry "get-browser" #f 109 18 109 29 ("browser" "'browser" "locate")}
        {Lisp-Entry "setup-browser" #f 118 11 118 24 ("set-default-focus" "browser" "'browser" "locate" "set-provider" "provider")}
        {Lisp-Entry "resize" #f 128 11 128 17 ("cancel" "'cancel" "update" "'update" "move-figure" "database" "'database" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "get-tab-stops" #f 135 11 135 24 ("get-browser" "get-tab-stops")}
        {Lisp-Entry "on-return-press" #f 139 11 139 26 ("update-database" "evt")}
        {Lisp-Entry "on-update" #f 143 11 143 20 ("update-database" "evt")}
        {Lisp-Entry "on-close" #f 147 11 147 19 ("get-host" "close" "evt")}
        {Lisp-Entry "update-database" #f 156 29 156 44 ("end-modal" "get-data-source" "source" "get-host" "dialog" "let")}
        {Lisp-Entry "Header-Color" #f 167 14 167 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" #f 171 11 171 15 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}}})
"Data-Source-Widget"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "view" "Data-Source-Widget.jazz"} 1226584775
    {Lisp-Entry "jazz.database.view.Data-Source-Widget" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Data-Source-Widget" #f 46 7 46 25 ("Layout-View")
        {Lisp-Entry "get-data-source" #f 54 26 54 41 ()}
        {Lisp-Entry "set-data-source" #f 58 26 58 41 ("source")}
        {Lisp-Entry "setup-username/password-mode" #f 62 26 62 54 ()}
        {Lisp-Entry "set-default-focus" #f 71 26 71 43 ()}}}})
"Data-Sources"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Sources.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Sources" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Data-Sources" #f 49 7 49 19 ("Group")
        {Lisp-Entry "default-source" #f 52 12 52 26 ("generate")}
        {Lisp-Entry "get-class-image" #f 60 16 60 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-presentation" #f 64 11 64 27 ()}
        {Lisp-Entry "get-addable-classes" #f 68 11 68 30 ("SQLServer-Data-Source" "Access-Data-Source" "Data-Group" "list")}}}})
"Data-Table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Table.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Table" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Data-Table" #f 45 7 45 17 ("Data-Entity")
        {Lisp-Entry "request" #f 48 8 48 15 ()}
        {Lisp-Entry "primary-key" #f 49 8 49 19 ()}
        {Lisp-Entry "columns" #f 50 8 50 15 ()}
        {Lisp-Entry "indexes" #f 51 8 51 15 ()}
        {Lisp-Entry "triggers" #f 52 8 52 16 ()}
        {Lisp-Entry "constraints" #f 53 8 53 19 ()}
        {Lisp-Entry "rows" #f 54 8 54 12 ()}
        {Lisp-Entry "missing?" #f 55 8 55 16 ()}
        {Lisp-Entry "construct-literal" #f 59 16 59 33 ("constraints:" "triggers:" "indexes:" "columns:" "primary-key:" "properties:" "name:" "self" "new" "constraints" "triggers" "indexes" "columns" "primary-key" "properties" "name" "context")}
        {Lisp-Entry "initialize" #f 63 11 63 21 ("rows~self" "set-constraints" "set-triggers" "set-indexes" "create-columns" "either" "set-columns" "set-primary-key" "request~self" "properties~self" "parent~self" "name~self" "owner~self" "set!" "nextmethod" "rows" "rows:" "constraints" "constraints:" "triggers" "triggers:" "indexes" "indexes:" "column-names" "column-names:" "columns" "columns:" "primary-key" "primary-key:" "request" "request:" "properties" "properties:" "parent" "parent:" "name" "name:" "owner" "owner:")}
        {Lisp-Entry "create-columns" #f 78 11 78 25 ("name:" "Data-Column" "new" "name" "function" "map" "column-names")}
        {Lisp-Entry "print" #f 84 11 84 16 ("format-plural" "name" "if" "format" "rows" "length" "let" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print-schema" #f 99 21 99 33 ("print-constraints" "print-triggers" "print-indexes" "print-columns" "print-primary-key" "properties" "name" "self" "class-of" "type-name" "identifier-name" "format" "printer")}
        {Lisp-Entry "print-primary-key" #f 112 11 112 28 ("print-schema" "primary-key" "null?" "if" "format" "printer")}
        {Lisp-Entry "print-columns" #f 120 11 120 24 ("object-name" "key:" "columns" "<" "sort" "print-schema" "set!" "if" "column" "function" "for-each" "first?" "let" "format" "printer")}
        {Lisp-Entry "print-indexes" #f 132 11 132 24 ("object-name" "key:" "indexes" "<" "sort" "print-schema" "set!" "if" "index" "function" "for-each" "first?" "let" "format" "printer")}
        {Lisp-Entry "print-triggers" #f 144 11 144 25 ("object-name" "key:" "triggers" "<" "sort" "print-schema" "set!" "if" "trigger" "function" "for-each" "first?" "let" "format" "printer")}
        {Lisp-Entry "print-constraints" #f 156 11 156 28 ("object-name" "key:" "constraints" "<" "sort" "print-schema" "set!" "if" "constraint" "function" "for-each" "first?" "let" "format" "printer")}
        {Lisp-Entry "get-kind" #f 173 11 173 19 ("table" "'table")}
        {Lisp-Entry "create" #f 182 11 182 17 ("Data-Constraint" "constraint" "Data-Trigger" "trigger" "Data-Index" "index" "Data-Column" "column" "name:" "Data-Primary-Key" "new" "primary-key" "case" "name" "kind")}
        {Lisp-Entry "add" #f 191 11 191 14 ("add-constraint" "constraint" "add-trigger" "trigger" "add-index" "index" "add-column" "column" "add-primary-key" "primary-key" "case" "object" "kind")}
        {Lisp-Entry "get-request" #f 205 18 205 29 ("request")}
        {Lisp-Entry "get-children" #f 209 11 209 23 ("constraints" "triggers" "indexes" "columns" "list" "primary-key" "if" "append")}
        {Lisp-Entry "get-categorized-children" #f 213 11 213 35 ("get-output" "constraints" "triggers" "indexes" "object-name" "key:" "columns" "<" "sort" "put-sequence" "put" "primary-key" "when" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "property-names" #f 224 11 224 25 ("description" "validation-text" "validation-rule" "source-table-name" "connect" "linked?:" "get-property" "if")}
        {Lisp-Entry "get-primary-key" #f 235 18 235 33 ("primary-key")}
        {Lisp-Entry "set-primary-key" #f 239 18 239 33 ("self" "set-parent" "when" "primary-key" "set!" "value")}
        {Lisp-Entry "add-primary-key" #f 245 18 245 33 ("set-primary-key" "primary-key")}
        {Lisp-Entry "get-columns" #f 255 18 255 29 ("columns")}
        {Lisp-Entry "set-columns" #f 259 18 259 29 ("self" "set-parent" "column" "function" "for-each" "columns" "set!" "value")}
        {Lisp-Entry "get-columns-sql" #f 266 18 266 33 ("columns" "append" "null?" "if" "get-name" "name" "let" "column" "function" "map" "join" "prefix" "prefix:")}
        {Lisp-Entry "add-column" #f 276 18 276 28 ("self" "set-parent" "cons" "columns" "set!" "column")}
        {Lisp-Entry "find-column" #f 282 18 282 29 ("values" "continuation-return" "get-name" "string=?" "when" "do" "columns" "in" "column" "0" "from" "rank" "for" "loop" "return" "lambda" "continuation-capture" "name")}
        {Lisp-Entry "get-indexes" #f 297 18 297 29 ("indexes")}
        {Lisp-Entry "set-indexes" #f 301 18 301 29 ("self" "set-parent" "index" "function" "for-each" "indexes" "set!" "value")}
        {Lisp-Entry "add-index" #f 308 18 308 27 ("self" "set-parent" "cons" "indexes" "set!" "index")}
        {Lisp-Entry "get-triggers" #f 319 18 319 30 ("triggers")}
        {Lisp-Entry "set-triggers" #f 323 18 323 30 ("self" "set-parent" "trigger" "function" "for-each" "triggers" "set!" "value")}
        {Lisp-Entry "add-trigger" #f 330 18 330 29 ("self" "set-parent" "cons" "triggers" "set!" "trigger")}
        {Lisp-Entry "get-constraints" #f 341 18 341 33 ("constraints")}
        {Lisp-Entry "set-constraints" #f 345 18 345 33 ("self" "set-parent" "constraint" "function" "for-each" "constraints" "set!" "value")}
        {Lisp-Entry "add-constraint" #f 352 18 352 32 ("self" "set-parent" "cons" "constraints" "set!" "constraint")}
        {Lisp-Entry "get-rows" #f 363 18 363 26 ("rows")}
        {Lisp-Entry "set-rows" #f 367 18 367 26 ("rows" "set!" "lst")}
        {Lisp-Entry "get-count" #f 371 18 371 27 ("rows" "length")}
        {Lisp-Entry "get-missing?" #f 375 18 375 30 ("missing?")}
        {Lisp-Entry "set-missing?" #f 379 18 379 30 ("missing?" "set!" "value")}
        {Lisp-Entry "remove-row" #f 383 18 383 28 ("remove!" "rows" "set!" "row")}
        {Lisp-Entry "remove-rows" #f 387 18 387 29 ("rows" "set!")}
        {Lisp-Entry "add-row" #f 391 18 391 25 ("cons" "rows" "set!" "row")}
        {Lisp-Entry "append-row" #f 396 18 396 28 ("list" "append" "rows" "set!" "row")}
        {Lisp-Entry "new-row" #f 401 18 401 25 ("self" "Data-Row" "new" "add-row" "values" "values:" "state" "state:")}
        {Lisp-Entry "get-row" #f 405 18 405 25 ("rows" "element" "rank")}
        {Lisp-Entry "load-request" #f 414 18 414 30 ("missing?" "append!" "rows" "set!" "self" "load-rows" "rows-missing?" "new-rows" "columns" "receive" "new-request" "request" "let" "max-load" "max-load:" "connection" "command")}
        {Lisp-Entry "find-row" #f 427 18 427 26 ("rows" "continuation-return" "=" "when" "get" "actual" "let" "row" "for-each" "return" "function" "continuation-capture" "value" "name")}
        {Lisp-Entry "find-rows" #f 438 18 438 27 ("rows" "get" "=" "row" "function" "collect-if" "value" "name")}
        {Lisp-Entry "find-row-by" #f 444 18 444 29 ("rows" "find-if" "predicate")}
        {Lisp-Entry "find-rows-by" #f 448 18 448 30 ("rows" "collect-if" "predicate")}
        {Lisp-Entry "filter!" #f 457 18 457 25 ("car" "set!" "cddr" "set-cdr!" "not" "if" "cadr" "row" "cdr" "while" "scan" "let" "rows" "when" "predicate")}
        {Lisp-Entry "sort-by" #f 474 18 474 25 ("get" "row" "function" "key:" "sort" "rows" "set!" ">" "<" "if" "fn" "let" "ascending?" "ascending?:" "name")}}}})
"Data-Trigger"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-Trigger.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-Trigger" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Data-Trigger" #f 45 7 45 19 ("Data-Object")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("properties:" "name:" "self" "new" "properties" "name" "context")}
        {Lisp-Entry "print-schema" #f 58 21 58 33 ("properties" "name" "self" "class-of" "type-name" "identifier-name" "format" "printer")}
        {Lisp-Entry "get-kind" #f 70 11 70 19 ("trigger" "'trigger")}
        {Lisp-Entry "property-names" #f 79 11 79 25 ("text")}}}})
"Data-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Data-View.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Data-View" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Data-View" #f 46 7 46 16 ("Data-Entity")
        {Lisp-Entry "construct-literal" #f 50 16 50 33 ("properties:" "name:" "self" "new" "properties" "name" "context")}
        {Lisp-Entry "print-schema" #f 59 21 59 33 ("properties" "name" "self" "class-of" "type-name" "identifier-name" "format" "printer")}
        {Lisp-Entry "get-kind" #f 71 11 71 19 ("view" "'view")}
        {Lisp-Entry "property-names" #f 80 11 80 25 ("text")}}}})
"Database"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "database" "Database.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.database.Database" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Database" #f 46 7 46 15 ("sort?:" "title:" "Group")
        {Lisp-Entry "get-class-presentation" #f 58 16 58 38 ()}
        {Lisp-Entry "get-class-image" #f 62 16 62 31 ("Bitmap-Resource")}}}})
"Database-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "database" "Database-Editor.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.database.Database-Editor" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Database-Editor" #f 46 7 46 22 ("Descendants-Editor")
        {Lisp-Entry "form-model" #f 49 11 49 21 ("nextmethod" "else" "Database-Tree" "tree" "get-name" "case" "form")}}}})
"Database-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "database" "Database-Manager.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.database.Database-Manager" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Database-Manager" #f 50 7 50 23 ("visible?:" "viewer" "card" "360" "289" "card-border" "on-splitter-move" "move-handler:" "3" "286" "right" "search" "307" "35" "search-border" "on-return-press" "return-press-handler:" "top-padding:" "left-padding:" "accepts-returns?:" "find" "19" "238" "9" "40" "find-border" "60" "12" "8" "search-sheet" "160" "width:" "index" "fill" "vscroll?:" "hscroll?:" "index-border" "index-sheet" "descendant" "on-tab-press" "tab-press-handler:" "highlight-edited?:" "tree" "header" "scroller" "descendants" "edge" "border-type:" "338" "278" "descendants-border" "content" "title:" "contents-sheet" "on-selection" "selection-handler:" "366" "285" "1" "Point" "position:" "tab" "367" "center" "4" "on-edit/view" "tail" "edit/view" "on-redo" "redo" "on-undo" "undo" "on-print" "print" "16" "on-synchronize" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "synchronize" "north" "location:" "6" "flow" "33" "300" "toolbar" "name:" "2" "0" "Rect" "layout-insets:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Editor-View")
        {Lisp-Entry "mode" #f 53 8 53 12 ("edit" "'edit")}
        {Lisp-Entry "host-icon" #f 113 16 113 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-position" #f 117 16 117 29 ()}
        {Lisp-Entry "host-size" #f 121 16 121 25 ()}
        {Lisp-Entry "host-workspaces" #f 125 11 125 26 ("database")}
        {Lisp-Entry "Empty-Database" #f 130 19 130 33 ("form>>")}
        {Lisp-Entry "new-event" #f 136 16 136 25 ("set-visible?" "Empty-Database" "instantiate" "get-guest" "set-client" "host-visible?:" "nextmethod" "apply" "frame" "let" "rest")}
        {Lisp-Entry "tool-preferences" #f 148 11 148 27 ("database-manager" "tools" "get-preferences")}
        {Lisp-Entry "install" #f 157 11 157 18 ("categorized" "'categorized" "tree" "set-filter" "properties" "'properties" "viewer" "'viewer" "search" "'search" "index" "'index" "self" "descendants" "'descendants" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "client-update" #f 167 11 167 24 ("search" "'search" "client" "index" "'index" "locate" "set-client" "nextmethod")}
        {Lisp-Entry "install-in-host" #f 173 11 173 26 ("get-size" "set-size" "cascade-position" "set-position" "when" "tool-preferences" "pref" "let" "update-viewer" "client-update" "get-browser" "get-window" "set-visible?" "viewer" "'viewer" "locate" "setup" "nextmethod" "host")}
        {Lisp-Entry "focus-document" #f 185 11 185 25 ("tree" "descendants" "locate" "acquire-focus")}
        {Lisp-Entry "Cascade-Position" #f 194 14 194 30 ("25" "Point")}
        {Lisp-Entry "Cascade-Step" #f 197 14 197 26 ("22" "Dimension")}
        {Lisp-Entry "cascade-position" #f 201 11 201 27 ("continuation-return" "Cascade-Step" "increase!" "get-position" "frame" "key:" "member?" "if" "while" "return" "function" "continuation-capture" "Cascade-Position" "pos" "collect-managers" "frames" "let")}
        {Lisp-Entry "collect-managers" #f 212 11 212 27 ("get-stage" "get-children" "Database-Manager" "get-guest" "Frame-Host" "is?" "and" "frame" "function" "collect-if")}
        {Lisp-Entry "resize-center" #f 224 29 224 42 ("viewer" "'viewer" "card-border" "'card-border" "right" "'right" "search-border" "'search-border" "index-border" "'index-border" "descendants-border" "'descendants-border" "0" "tab" "'tab" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-splitter-move" #f 234 18 234 34 ("update-view" "viewer" "'viewer" "-" "card-border" "'card-border" "move-figure" "search-border" "'search-border" "find-border" "'find-border" "index-border" "'index-border" "descendants-border" "'descendants-border" "0" "tab" "'tab" "locate" "size-figure" "right" "get-name" "case" "delta:" "get-property" "delta" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-selection" #f 251 18 251 30 ("select-all" "acquire-focus" "find" "'find" "text" "search-sheet" "'search-sheet" "get-selection-name" "eq?" "when" "'tab" "locate" "tab" "let" "evt")}
        {Lisp-Entry "on-synchronize" #f 259 18 259 32 ("properties" "'properties" "locate" "get-client" "synchronize-tree" "evt")}
        {Lisp-Entry "on-print" #f 263 18 263 26 ("get-site" "print-browser" "evt")}
        {Lisp-Entry "on-return-press" #f 267 18 267 33 ("find" "'find" "locate" "get-string-content" "search" "evt")}
        {Lisp-Entry "on-tab-press" #f 271 18 271 30 ("get-row" "auto-select" "when" "get-single-selection" "rank" "acquire-focus" "properties" "'properties" "locate" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "on-edit/view" #f 279 18 279 30 ("edit" "view" "mode" "case" "evt")}
        {Lisp-Entry "get-site" #f 285 11 285 19 ("viewer" "'viewer" "locate" "get-browser" "get-site")}
        {Lisp-Entry "edit" #f 294 11 294 15 ("set!" "viewer" "'viewer" "card-border" "'card-border" "locate" "set-visible?" "edit" "'edit" "mode" "neq?" "when")}
        {Lisp-Entry "view" #f 301 11 301 15 ("update-viewer" "set!" "viewer" "'viewer" "card-border" "'card-border" "locate" "set-visible?" "view" "'view" "mode" "neq?" "when")}
        {Lisp-Entry "update-viewer" #f 309 11 309 24 ()}
        {Lisp-Entry "synchronize-tree" #f 318 11 318 27 ("contents-sheet" "'contents-sheet" "tab" "'tab" "set-selection-name" "row-rank" "set-single-selection" "ensure-expanded" "bell" "null?" "if" "component-row" "row" "descendants" "locate" "tree" "let*" "component")}
        {Lisp-Entry "search" #f 333 11 333 17 ("search" "'search" "locate" "set-target" "target")}}
      {Lisp-Entry "Center-View" #f 342 7 342 18 ("Layout-View")
        {Lisp-Entry "resize" #f 346 11 346 17 ("resize-center" "nextmethod" "dv" "dh")}}}})
"Database-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "database" "Database-Tree.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.database.Database-Tree" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Database-Tree" #f 46 7 46 20 ("Descendants-Tree")
        {Lisp-Entry "row-state" #f 49 11 49 20 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Database-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Database-Workspace.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Database-Workspace" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Database-Workspace" #f 46 7 46 25 ("Text-Palette" "59" "vert" "second" "Output-Log" "Search-Results" "Properties-Manager" "Console-Manager" "model-name:" "selection" "5" "Rect" "insets:" "20" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "Database-Manager" "frame-model:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 66 11 66 23 ("database" "'database")}}}})
"Datatype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Datatype.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Datatype" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Datatype" #f 44 7 44 15 ("Object")
        {Lisp-Entry "fold-literal" #f 47 11 47 23 ("Datatype" "new")}}
      {Lisp-Entry "Datatype" #f 54 7 54 15 ("Object")
        {Lisp-Entry "name" #f 57 8 57 12 ()}
        {Lisp-Entry "size" #f 58 8 58 12 ()}
        {Lisp-Entry "precision" #f 59 8 59 17 ()}
        {Lisp-Entry "scale" #f 60 8 60 13 ()}
        {Lisp-Entry "construct-literal" #f 64 16 64 33 ("self" "new" "null?" "integer?" "or" "assert" "scale" "precision" "size" "name" "context")}
        {Lisp-Entry "new-datatype" #f 71 23 71 35 ("get-scalable?" "get-precisionable?" "find-systype" "get-sizeable?" "if" "self" "new" "scale" "precision" "size" "name")}
        {Lisp-Entry "initialize" #f 78 11 78 21 ("scale~self" "precision~self" "size~self" "name~self" "set!" "nextmethod" "scale" "precision" "size" "name")}
        {Lisp-Entry "compare-object" #f 86 11 86 25 (":not-equal" "else" ":equal" "get-scale" "scale" "get-precision" "precision" "get-size" "size" "get-name" "name" "=" "and" ":incompatible" "Datatype" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 98 11 98 23 ("Datatype" "new")}
        {Lisp-Entry "foldable?" #f 103 11 103 20 ()}
        {Lisp-Entry "fold-object" #f 108 11 108 22 ("scale" "precision" "size" "name" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "print" #f 118 11 118 16 ("scale" "precision" "size" "name" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" #f 132 18 132 26 ("name")}
        {Lisp-Entry "get-size" #f 136 18 136 26 ("size")}
        {Lisp-Entry "get-precision" #f 140 18 140 31 ("precision")}
        {Lisp-Entry "set-precision" #f 145 18 145 31 ("precision" "set!" "value")}
        {Lisp-Entry "get-scale" #f 149 18 149 27 ("scale")}
        {Lisp-Entry "set-scale" #f 154 18 154 27 ("scale" "set!" "value")}
        {Lisp-Entry "has-size?" #f 158 18 158 27 ("size" "not-null?")}
        {Lisp-Entry "has-precision?" #f 162 18 162 32 ("precision" "not-null?")}
        {Lisp-Entry "has-scale?" #f 166 18 166 28 ("scale" "not-null?")}
        {Lisp-Entry "get-native-with-value" #f 170 26 170 47 ("read-only" "'read-only" "eq?" "double-apostrophe" "number?" "else" "format" "string?" "cond" "-" "1" "0" "subseq" "=" "2" ">=" "and" "if" "length" "len" "let" "either" "name" "find-systype" "get-default-value" "default-value" "let*" "indirect?" "indirect?:" "value")}
        {Lisp-Entry "double-apostrophe" #f 189 11 189 28 ("substitute-alist" "value")}
        {Lisp-Entry "get-native" #f 193 26 193 36 ("else" "scale" "precision" "null?" "name" "format" "size" "cond")}
        {Lisp-Entry "get-systypes" #f 210 31 210 43 ()}
        {Lisp-Entry "find-systype" #f 214 23 214 35 ("get-systypes" "get-name" "=" "systype" "function" "find-if" "name")}
        {Lisp-Entry "get-defaultable?" #f 220 18 220 34 ("get-defaultable?" "and" "name" "find-systype" "systype" "let")}
        {Lisp-Entry "get-default-value" #f 225 18 225 35 ("get-default-value" "essay" "name" "find-systype" "systype" "let")}
        {Lisp-Entry "present" #f 235 26 235 33 ("else" "scale" "precision" "null?" "name" "format" "size" "cond")}}}})
"Datatype-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "designer" "Datatype-Row.jazz"} 1226584774
    {Lisp-Entry "jazz.database.designer.Datatype-Row" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Datatype-Row" #f 47 7 47 19 ("Combo-Row")
        {Lisp-Entry "datatype-class" #f 50 12 50 26 ("generate")}
        {Lisp-Entry "allow-partial-datatype?" #f 51 12 51 35 ("generate")}
        {Lisp-Entry "systypes" #f 54 8 54 16 ()}
        {Lisp-Entry "initialize" #f 62 11 62 21 ("systypes" "setup" "get-systypes" "essay" "systypes~self" "allow-partial-datatype?~self" "datatype-class~self" "set!" "nextmethod" "apply" "others" "allow-partial-datatype?" "unavailable-systypes-message" "datatype-class" "bind-keywords" "rest")}
        {Lisp-Entry "setup" #f 71 11 71 16 ("get-name" "present-format" "list" "systype" "map" "set-choices" "message-box" "combo" "function" "set-choices-updater" "null?" "if" "unavailable-systypes-message" "systypes")}
        {Lisp-Entry "present" #f 86 11 86 18 ("present" "null?" "if" "type")}
        {Lisp-Entry "editor-class" #f 97 11 97 23 ("Datatype-Row-Editor")}
        {Lisp-Entry "get-edited-value" #f 101 11 101 27 ("Datatype" "datatype-class" "either" "new" "scale" "precision" "size" "name" "receive" "when" "parse-content" "parsed" "editor" "get-content" "string" "let*")}
        {Lisp-Entry "set-edited-value" #f 109 11 109 27 ("present" "editor" "set-content" "value")}
        {Lisp-Entry "read-content" #f 113 11 113 23 ("separator:" "substitute" "parse-strings" "empty-string?" "not" "string" "function" "collect-if" "content")}
        {Lisp-Entry "parse-content" #f 119 11 119 24 ("present-format" "format" "parse-error" "null?" "if" "parse-systype" "systype" "name" "let*" "else" "parse-decimal" "3" "parse-variable" "2" "car" "parse-fixed" "1" "0" "length" "case" "read-content" "content" "let" "string")}
        {Lisp-Entry "present-format" #f 134 11 134 25 ("get-fixed?" "get-sizeable?" "format" "get-precisionable?" "cond" "allow-partial-datatype?" "if" "name" "systype")}
        {Lisp-Entry "parse-fixed" #f 146 11 146 22 ("values" "present-format" "parse-error" "get-precisionable?" "get-sizeable?" "or" "allow-partial-datatype?" "not" "and" "if" "parse-systype" "systype" "let" "name")}
        {Lisp-Entry "parse-variable" #f 154 11 154 25 ("present-format" "parse-error" "else" "allow-partial-datatype?" "get-precisionable?" "and" "parse-integer" "values" "get-sizeable?" "cond" "parse-systype" "systype" "let" "precision" "name" "bind" "list")}
        {Lisp-Entry "parse-decimal" #f 166 11 166 24 ("present-format" "parse-error" "parse-integer" "values" "get-scalable?" "get-precisionable?" "and" "if" "parse-systype" "systype" "let" "scale" "precision" "name" "bind" "list")}
        {Lisp-Entry "parse-systype" #f 174 11 174 24 ("format" "parse-error" "find-systype" "either" "datatype-class" "when" "name")}
        {Lisp-Entry "parse-error" #f 180 11 180 22 ("format" "message:" "Parse-Error" "new" "signal" "message")}}
      {Lisp-Entry "Datatype-Row-Editor" #f 189 7 189 26 ("Combo-Row-Editor")
        {Lisp-Entry "content-change" #f 192 11 192 25 ("nextmethod" "popup" "'popup" "eq?" "unless" "origin")}
        {Lisp-Entry "combo-choice" #f 197 11 197 23 ()}
        {Lisp-Entry "get-entry" #f 201 11 201 20 ("car" "when" "get-content" "value-row" "read-content" "content" "let")}
        {Lisp-Entry "set-entry" #f 207 11 207 20 ("cdr" "cons" "join" "set-content" "separator:" "parse-strings" "car" "get-content" "value-row" "read-content" "actual" "let" "entry")}}}})
"Date-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Date-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Date-Domain" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Date-Domain" #f 47 7 47 18 ("Domain")
        {Lisp-Entry "validate-value" #f 55 11 55 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "date?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 65 11 65 18 ("present-date-day" "not" "if" "value")}
        {Lisp-Entry "setup-entry" #f 76 11 76 22 ("self" "domain:" "parent:" "Date-Entry" "new" "client" "view")}}}})
"Date-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "entry" "Date-Entry.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.entry.Date-Entry" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Date-Entry" #f 51 7 51 17 ("on-choose-date" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "Bitmap-Resource" "image-name:" "22" "Dimension" "size:" "action" "name:" "Text-Entry")
        {Lisp-Entry "validate" #f 64 11 64 19 ("french:" "english:" "Locales" "message:" "Property-Violation" "new" "8" "7" "5" "string-ref" "eqv?" "4" "0" "substring" "numeric?" "10" "string-length" "=" "and" "empty-string?" "if" "text" "'text" "locate" "get-string-content" "content" "let" "nextmethod" "or" "domain")}
        {Lisp-Entry "get-value" #f 83 11 83 20 ("parse-date-day" "nil" "string=?" "empty-string?" "or" "if" "text" "'text" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-value" #f 90 11 90 20 ("present-date-day" "nil?" "if" "text" "'text" "locate" "set-string-content" "value")}
        {Lisp-Entry "layout" #f 102 11 102 17 ("22" "get-width" "Point" "new" "action" "'action" "set-position" "0" "24" "Dimension" "-" "border" "'border" "locate" "set-size" "get-size" "size" "let")}
        {Lisp-Entry "on-choose-date" #f 113 11 113 25 ("set-modified?" "get-value" "initial-date:" "Calendar-Dialog" "get-modal" "set-value" "evt")}}}})
"Date-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Date-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Date-Request" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Date-Request" #f 47 7 47 19 ("String-Request")}
      {Lisp-Entry "Date-Request" #f 53 7 53 19 ("title:" "prefix" "name:" "String-Request")
        {Lisp-Entry "form-model" #f 61 11 61 21 ("nextmethod" "else" "Date-Text-View" "text" "get-name" "case" "form")}}}})
"Date-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Date-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Date-Row" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Date-Row" #f 48 7 48 15 ("Combo-Row")}
      {Lisp-Entry "Date-Row" #f 54 7 54 15 ("Combo-Row")
        {Lisp-Entry "multiple-selection?" #f 57 8 57 27 ()}
        {Lisp-Entry "initialize" #f 65 11 65 21 ("choose" "'choose" "set-kind" "set-multiple-selection?" "nextmethod" "apply" "others" "multiple-selection?" "bind-keywords" "rest")}
        {Lisp-Entry "get-multiple-selection?" #f 77 18 77 41 ("multiple-selection?")}
        {Lisp-Entry "set-multiple-selection?" #f 81 18 81 41 ("multiple-selection?" "set!" "value")}
        {Lisp-Entry "combo-choose" #f 90 11 90 23 ("focus-editor" "enter-edited-value" "set-edited-value" "multiple-selection?" "multiple-selection?:" "get-edited-value" "initial-date:" "Calendar-Dialog" "get-modal" "date" "let")}
        {Lisp-Entry "present" #f 103 11 103 18 ("present-date-day" "not" "if" "date")}
        {Lisp-Entry "get-edited-value" #f 114 11 114 27 ("Date" "parse-date" "=" "empty-string?" "or" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" #f 121 11 121 27 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Date-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Date-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Date-Text-View" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Date-Text-View" #f 46 7 46 21 ("Text-View")}}})
"Debug-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "preference" "Debug-Preferences.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.preference.Debug-Preferences" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Debug-Preferences" #f 48 7 48 24 ("title:" "Preferences")
        {Lisp-Entry "debug-depot?" #f 51 12 51 24 ("generate")}
        {Lisp-Entry "get-row-instance" #f 63 11 63 27 ("nextmethod" "else" "Boolean-Row" "new" "debug-depot?" "field-name" "case" "property")}}}})
"Debugged"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugged" "Debugged.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugged.Debugged" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Debugged" #f 43 7 43 15 ("Object")
        {Lisp-Entry "debugger" #f 46 8 46 16 ("generate")}
        {Lisp-Entry "process" #f 47 8 47 15 ("generate")}
        {Lisp-Entry "reference" #f 48 8 48 17 ("generate")}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("reference~self" "process~self" "debugger~self" "set!" "nextmethod" "reference" "process" "debugger")}
        {Lisp-Entry "print" #f 58 11 58 16 ("reference" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "same?" #f 69 26 69 31 ("debugged")}}}})
"Debugged-Frame"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugged" "Debugged-Frame.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugged.Debugged-Frame" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Debugged-Frame" #f 43 7 43 21 ("Debugged")
        {Lisp-Entry "same?" #f 51 11 51 16 ("get-reference" "get-process" "reference" "process" "debugger" "frame=?" "Debugged-Frame" "is?" "and" "debugged")}
        {Lisp-Entry "get-name" #f 61 18 61 26 ("reference" "process" "debugger" "frame-name")}
        {Lisp-Entry "get-location" #f 65 18 65 30 ("reference" "process" "debugger" "frame-location")}
        {Lisp-Entry "get-variables" #f 69 18 69 31 ("reference" "process" "debugger" "frame-variables")}
        {Lisp-Entry "get-variable-name" #f 73 18 73 35 ("reference" "process" "debugger" "frame-variable-name" "variable")}
        {Lisp-Entry "get-variable-value" #f 77 18 77 36 ("reference" "process" "debugger" "frame-variable-value" "variable")}}}})
"Debugged-Process"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugged" "Debugged-Process.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugged.Debugged-Process" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Debugged-Process" #f 44 7 44 23 ("Debugged")
        {Lisp-Entry "same?" #f 52 11 52 16 ("get-reference" "reference" "debugger" "process=?" "Debugged-Process" "is?" "and" "debugged")}
        {Lisp-Entry "live?" #f 62 18 62 23 ("reference" "debugger" "process-live?")}
        {Lisp-Entry "get-title" #f 66 18 66 27 ("reference" "debugger" "process-title" "either")}
        {Lisp-Entry "get-icon" #f 71 18 71 26 ("reference" "debugger" "process-icon" "either" "Bitmap-Resource" "new")}
        {Lisp-Entry "get-threads" #f 77 18 77 29 ("reference" "debugger" "process-threads")}
        {Lisp-Entry "present" #f 81 18 81 25 ("reference" "debugger" "present-process")}
        {Lisp-Entry "restart-stop" #f 85 18 85 30 ("reference" "debugger" "restart-stop" "restart")}
        {Lisp-Entry "break-thread" #f 89 18 89 30 ("reference" "debugger" "break-thread" "thread")}
        {Lisp-Entry "continue-stop" #f 93 18 93 31 ("reference" "debugger" "continue-stop" "stop")}
        {Lisp-Entry "evaluate-expressions" #f 97 18 97 38 ("reference" "debugger" "evaluate-expressions" "expressions")}
        {Lisp-Entry "exit" #f 101 18 101 22 ("reference" "debugger" "process-exit")}}}})
"Debugged-Restart"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugged" "Debugged-Restart.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugged.Debugged-Restart" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Debugged-Restart" #f 43 7 43 23 ("Debugged")
        {Lisp-Entry "same?" #f 51 11 51 16 ("get-reference" "get-process" "reference" "process" "debugger" "restart=?" "Debugged-Restart" "is?" "and" "debugged")}
        {Lisp-Entry "get-name" #f 61 18 61 26 ("reference" "process" "debugger" "restart-name")}
        {Lisp-Entry "get-message" #f 65 18 65 29 ("reference" "process" "debugger" "restart-message")}}}})
"Debugged-Stop"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugged" "Debugged-Stop.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugged.Debugged-Stop" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Debugged-Stop" #f 43 7 43 20 ("Debugged")
        {Lisp-Entry "same?" #f 51 11 51 16 ("get-reference" "get-process" "reference" "process" "debugger" "stop=?" "Debugged-Stop" "is?" "and" "debugged")}
        {Lisp-Entry "get-kind" #f 61 18 61 26 ("reference" "process" "debugger" "stop-kind")}
        {Lisp-Entry "get-reason" #f 65 18 65 28 ("reference" "process" "debugger" "stop-reason")}
        {Lisp-Entry "get-detail" #f 69 18 69 28 ("reference" "process" "debugger" "stop-detail")}
        {Lisp-Entry "get-restarts" #f 73 18 73 30 ("reference" "process" "debugger" "stop-restarts")}
        {Lisp-Entry "get-frames" #f 77 18 77 28 ("reference" "process" "debugger" "stop-frames")}}}})
"Debugged-Thread"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugged" "Debugged-Thread.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugged.Debugged-Thread" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Debugged-Thread" #f 43 7 43 22 ("Debugged")
        {Lisp-Entry "same?" #f 51 11 51 16 ("get-reference" "get-process" "reference" "process" "debugger" "thread=?" "Debugged-Thread" "is?" "and" "debugged")}
        {Lisp-Entry "get-name" #f 61 18 61 26 ("reference" "process" "debugger" "thread-name")}
        {Lisp-Entry "get-state" #f 65 18 65 27 ("reference" "process" "debugger" "thread-state")}
        {Lisp-Entry "get-stops" #f 69 18 69 27 ("reference" "process" "debugger" "thread-stops")}
        {Lisp-Entry "get-active-stop" #f 73 18 73 33 ("reference" "process" "debugger" "thread-active-stop")}
        {Lisp-Entry "set-repl-frame" #f 77 18 77 32 ("reference" "process" "debugger" "set-repl-frame" "frame")}}}})
"Debuggee-Frame"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "Debuggee-Frame.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.Debuggee-Frame" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Debuggee-Frame" #f 40 7 40 21 ("Object")
        {Lisp-Entry "id" #f 43 8 43 10 ("generate")}
        {Lisp-Entry "continuation" #f 44 8 44 20 ("generate")}
        {Lisp-Entry "name" #f 45 8 45 12 ("generate")}
        {Lisp-Entry "initialize" #f 48 11 48 21 ("name~self" "continuation~self" "id~self" "set!" "nextmethod" "name" "continuation" "id")}
        {Lisp-Entry "get-location" #f 60 11 60 23 ("get-continuation-location" "continuation" "serial->object" "cont" "let")}
        {Lisp-Entry "get-variables" #f 65 11 65 24 ("get-continuation-lexical-environment" "present-object" "cons" "value" "name" "bind" "variable" "function" "map" "continuation" "serial->object" "cont" "let")}}}})
"Debuggee-Process"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "Debuggee-Process.jazz"} 1227124458
    {Lisp-Entry "jazz.debuggee.Debuggee-Process" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Debuggee-Process" #f 44 7 44 23 ("Object")
        {Lisp-Entry "get-title" #f 47 18 47 27 ("current-process-present")}
        {Lisp-Entry "get-icon" #f 51 18 51 26 ("current-process-icon")}
        {Lisp-Entry "detach-process" #f 60 18 60 32 ("detach-from-controller")}
        {Lisp-Entry "exit-process" #f 64 18 64 30 ("function" "exit-process" "'exit-process" "primordial-thread" "thread-post" "exit" "detach-from-controller" "begin" "not" "if" "get-process" "process" "let")}
        {Lisp-Entry "get-toplevel-hwnd" #f 80 18 80 35 ("get-toplevel" "get-handle")}
        {Lisp-Entry "get-threads" #f 90 11 90 22 ("top-threads" "Debuggee-Thread" "Debuggee-Thread-Local-Proxy" "new" "thread" "function" "map")}
        {Lisp-Entry "break-thread" #f 101 11 101 23 ("break" "function" "thread-interrupt!" "get-object" "get-thread" "thread" "let" "thread-proxy")}
        {Lisp-Entry "restart-stop" #f 113 11 113 23 ("invoke-restart" "function" "restart-stop" "'restart-stop" "thread-post" "get-restart" "restart" "get-thread" "thread" "get-object" "debuggee-restart" "let" "restart-proxy")}
        {Lisp-Entry "continue-stop" #f 127 11 127 24 ("continuation-return" "function" "continue-stop" "'continue-stop" "thread-post" "get-continuation" "continuation" "get-thread" "thread" "get-object" "stop" "let" "stop-proxy")}
        {Lisp-Entry "console-input" #f 141 11 141 24 ("force-output" "display" "close-port" "not" "if" "thread-console-pump-port" "port" "get-object" "get-thread" "thread" "let" "str" "thread-proxy")}
        {Lisp-Entry "module/library-form?" #f 155 11 155 31 ("library" "module" "car" "memq?" "pair?" "and" "expr")}
        {Lisp-Entry "evaluate-expressions" #f 160 11 160 31 (":reader" "eval" "->string" "requested-module-name" "parameterize" "locate-library-declaration" "load-module" "cadr" "module-name" "module/library-form?" "if" "expr" "read-string-element" "map" "function" "with-jazz-readtable" "let" "expressions")}
        {Lisp-Entry "remote" #f 181 17 181 23 ("kind" "serial" "inspect")}}}})
"Debuggee-Restart"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "Debuggee-Restart.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.Debuggee-Restart" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Debuggee-Restart" #f 44 7 44 23 ("Object")
        {Lisp-Entry "thread" #f 47 8 47 14 ("generate")}
        {Lisp-Entry "restart" #f 48 8 48 15 ("generate")}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("restart~self" "thread~self" "set!" "nextmethod" "restart" "thread")}
        {Lisp-Entry "get-id" #f 57 18 57 24 ("restart" "object->serial")}
        {Lisp-Entry "get-name" #f 61 18 61 26 ("restart" "get-name")}
        {Lisp-Entry "get-message" #f 65 18 65 29 ("restart" "get-message")}}}})
"Debuggee-Stop"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "Debuggee-Stop.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.Debuggee-Stop" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "system-frames" #f 44 12 44 25 ("jazz.with-exception-filter" "jazz.dialect.language.with-system-exception-debugger" "jazz.dialect.language.with-exception-debugger" "jazz.dialect.language.*exception-debugger*" "##primordial-exception-handler-hook" "##thread-start-action!" "##dynamic-env-bind")}
      {Lisp-Entry "Debuggee-Stop" #f 54 7 54 20 ("Object")
        {Lisp-Entry "thread" #f 57 8 57 14 ("generate")}
        {Lisp-Entry "kind" #f 58 8 58 12 ("generate")}
        {Lisp-Entry "reason" #f 59 8 59 14 ("generate")}
        {Lisp-Entry "detail" #f 60 8 60 14 ("generate")}
        {Lisp-Entry "continuation" #f 61 8 61 20 ("generate")}
        {Lisp-Entry "restarts" #f 62 8 62 16 ("generate")}
        {Lisp-Entry "stack" #f 63 8 63 13 ("generate")}
        {Lisp-Entry "initialize" #f 66 11 66 21 ("collect-continuation-stack" "stack~self" "restarts~self" "continuation~self" "detail~self" "reason~self" "kind~self" "thread~self" "set!" "nextmethod" "restarts" "continuation" "detail" "reason" "kind" "thread")}
        {Lisp-Entry "collect-continuation-stack" #f 77 15 77 41 ("1000" "get-continuation-stack" "list" "system-frames" "memq" "not" "when" "get-continuation-name" "name" "let" "function" "collect" "cont")}
        {Lisp-Entry "get-id" #f 85 18 85 24 ("self" "object->serial")}
        {Lisp-Entry "get-frames" #f 94 18 94 28 ("stack" "length" "0" "naturals" "make-frame" "frame" "id" "function" "map")}
        {Lisp-Entry "make-frame" #f 101 15 101 25 ("Debuggee-Frame-Local-Proxy" "object->serial" "Debuggee-Frame" "new" "let" "name" "cont" "bind" "frame" "id")}}}})
"Debuggee-Thread"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "Debuggee-Thread.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.Debuggee-Thread" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Debuggee-Thread" #f 43 7 43 22 ("Object")
        {Lisp-Entry "thread" #f 46 8 46 14 ("generate")}
        {Lisp-Entry "initialize" #f 49 11 49 21 ("thread~self" "set!" "nextmethod" "thread")}
        {Lisp-Entry "get-id" #f 54 18 54 24 ("thread" "object->serial")}
        {Lisp-Entry "get-name" #f 58 18 58 26 ("thread" "thread-name")}
        {Lisp-Entry "get-state" #f 62 18 62 27 ("thread" "thread-state" "present-thread-state")}
        {Lisp-Entry "get-stops" #f 66 18 66 27 ("thread" "get-thread-stops")}
        {Lisp-Entry "set-repl-frame" #f 70 11 70 25 ("set-box!" "box?" "when" "current-repl-frame" "box" "function" "set-repl-frame" "'set-repl-frame" "thread" "thread-post" "get-object" "essay" "frame" "let" "frame-proxy")}}}})
"Debugger"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugger" "Debugger.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugger.Debugger" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Debugger" #f 43 7 43 15 ("Object")
        {Lisp-Entry "start-debugger" #f 51 26 51 40 ()}
        {Lisp-Entry "stop-debugger" #f 52 26 52 39 ()}
        {Lisp-Entry "get-processes" #f 53 26 53 39 ("rest")}
        {Lisp-Entry "detach-processes" #f 54 26 54 42 ()}
        {Lisp-Entry "process=?" #f 62 26 62 35 ("y-process" "x-process")}
        {Lisp-Entry "process-live?" #f 63 26 63 39 ("process")}
        {Lisp-Entry "process-title" #f 64 26 64 39 ("process")}
        {Lisp-Entry "process-icon" #f 65 26 65 38 ("process")}
        {Lisp-Entry "process-threads" #f 66 26 66 41 ("process")}
        {Lisp-Entry "present-process" #f 67 26 67 41 ("process")}
        {Lisp-Entry "evaluate-expressions" #f 68 26 68 46 ("expressions" "process")}
        {Lisp-Entry "process-detach" #f 69 26 69 40 ("process")}
        {Lisp-Entry "process-exit" #f 70 26 70 38 ("process")}
        {Lisp-Entry "thread=?" #f 78 26 78 34 ("y-thread" "y-process" "x-thread" "x-process")}
        {Lisp-Entry "thread-name" #f 79 26 79 37 ("thread" "process")}
        {Lisp-Entry "thread-state" #f 80 26 80 38 ("thread" "process")}
        {Lisp-Entry "thread-stops" #f 81 26 81 38 ("thread" "process")}
        {Lisp-Entry "thread-active-stop" #f 82 26 82 44 ("thread" "process")}
        {Lisp-Entry "break-thread" #f 83 26 83 38 ("thread" "process")}
        {Lisp-Entry "set-repl-frame" #f 84 26 84 40 ("frame" "thread" "process")}
        {Lisp-Entry "restart=?" #f 92 26 92 35 ("y-restart" "y-process" "x-restart" "x-process")}
        {Lisp-Entry "restart-name" #f 93 26 93 38 ("restart" "process")}
        {Lisp-Entry "restart-message" #f 94 26 94 41 ("restart" "process")}
        {Lisp-Entry "restart-stop" #f 95 26 95 38 ("restart" "process")}
        {Lisp-Entry "stop=?" #f 103 26 103 32 ("y" "y-process" "x" "x-process")}
        {Lisp-Entry "stop-kind" #f 104 26 104 35 ("stop" "process")}
        {Lisp-Entry "stop-reason" #f 105 26 105 37 ("stop" "process")}
        {Lisp-Entry "stop-detail" #f 106 26 106 37 ("stop" "process")}
        {Lisp-Entry "stop-restarts" #f 107 26 107 39 ("stop" "process")}
        {Lisp-Entry "stop-frames" #f 108 26 108 37 ("stop" "process")}
        {Lisp-Entry "continue-stop" #f 109 26 109 39 ("stop" "process")}
        {Lisp-Entry "frame=?" #f 117 26 117 33 ("y-frame" "y-process" "x-frame" "x-process")}
        {Lisp-Entry "frame-name" #f 118 26 118 36 ("frame" "process")}
        {Lisp-Entry "frame-location" #f 119 26 119 40 ("frame" "process")}
        {Lisp-Entry "frame-variables" #f 120 26 120 41 ("frame" "process")}
        {Lisp-Entry "frame-variable-name" #f 121 26 121 45 ("variable" "frame" "process")}
        {Lisp-Entry "frame-variable-value" #f 122 26 122 46 ("variable" "frame" "process")}}}})
"Debugger-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugger" "Debugger-Event.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugger.Debugger-Event" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Debugger-Event" #f 45 7 45 21 ("Object")}}})
"Debugger-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugger" "Debugger-Listener.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugger.Debugger-Listener" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Debugger-Listener" #f 45 11 45 28 ()
        {Lisp-Entry "display-output" #f 48 35 48 49 ("string")}
        {Lisp-Entry "newline-output" #f 49 35 49 49 ()}
        {Lisp-Entry "debug-output" #f 50 35 50 47 ("output")}}}})
"Debugger-Resource"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugger" "Debugger-Resource.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugger.Debugger-Resource" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Debugger-Resource" #f 45 7 45 24 ("Object")
        {Lisp-Entry "process" #f 48 8 48 15 ("generate")}
        {Lisp-Entry "reference" #f 49 8 49 17 ("generate")}
        {Lisp-Entry "close" #f 50 8 50 13 ("generate")}
        {Lisp-Entry "closed?" #f 51 8 51 15 ("generate")}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("closed?~self" "close~self" "reference~self" "process~self" "set!" "nextmethod" "close" "reference" "process")}
        {Lisp-Entry "print" #f 62 11 62 16 ("reference" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "close-resource" #f 68 11 68 25 ("set!" "self" "process" "unregister-debugger-resource" "close" "closed?" "not" "when")}}}})
"Debugger-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Debugger-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Debugger-Tester" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Debugger-Tester" #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-assert" "test-error?" "invoke")}
        {Lisp-Entry "test-error?" #f 62 11 62 22 ()}
        {Lisp-Entry "test-assert" #f 71 11 71 22 ()}}}})
"Debugger-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "workspace" "Debugger-Workspace.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.workspace.Debugger-Workspace" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Debugger-Workspace" #f 47 7 47 25 ("Web-Servers-Manager" "Output-Log" "Profile-Results" "Search-Results" "Properties-Manager" "Console-Manager" "-29" "Hierarchy-Browser" "Chapters-Browser" "31" "Workbench-Manager" "50" "33" "Variables-View" "Detail-View" "Frames-View" "selection" "Threads-View" "250" "second" "Processes-View" "model-name:" "160" "668" "horz" "5" "Rect" "insets:" "23" "division:" "relative" "mode:" "vert" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 83 11 83 23 ("debugger" "'debugger")}}}})
"Definition-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Definition-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Definition-Doc" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Definition-Doc" #f 45 7 45 21 ("Element-Doc")}}})
"Definition-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Definition-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Definition-Entry" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Definition-Entry" #f 45 7 45 23 ("Hierarchical-Entry")
        {Lisp-Entry "type" #f 48 8 48 12 ()}
        {Lisp-Entry "literal?" #f 49 8 49 16 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("literal?~self" "type~self" "set!" "nextmethod" "references" "definitions" "column" "line" "literal?" "type" "name" "modifiers")}
        {Lisp-Entry "get-type" #f 63 18 63 26 ("type")}
        {Lisp-Entry "set-type" #f 67 18 67 26 ("type" "set!" "value")}
        {Lisp-Entry "get-literal?" #f 71 18 71 30 ("literal?")}
        {Lisp-Entry "update-indexes" #f 80 11 80 25 ("references" "key" "function" "for-each" "name" "update-index" "references-index" "definitions-index")}}}})
"Depot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "depot" "depot" "Depot.jazz"} 1226584775
    {Lisp-Entry "jazz.depot.depot.Depot" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Depot" #f 46 16 46 21 ("Object")
        {Lisp-Entry "name" #f 49 8 49 12 ("generate")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("name~self" "set!" "nextmethod" "name" "name:")}
        {Lisp-Entry "print" #f 62 11 62 16 ("name" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "show-history" #f 73 26 73 38 ("file:" "Depot-Version-Browser" "get-modal" "file")}
        {Lisp-Entry "show-changes" #f 78 26 78 38 ("locate" "acquire-focus" "set-visible?" "bring-to-front" "message-box" "close" "begin" "not" "if" "get-guest" "compare-monikers" "has-differences?" "file->path" "self" "Depot-Moniker" "new" "right" "left" "text" "'text" "host-workspace:" "host-visible?:" "Compare-Files" "new-frame" "frame" "let*" "function" ":wait" "with-cursor" "file")}}}})
"Depot-Moniker"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "depot" "manager" "Depot-Moniker.jazz"} 1226584775
    {Lisp-Entry "jazz.depot.manager.Depot-Moniker" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Depot-Moniker" #f 47 7 47 20 ("Moniker")
        {Lisp-Entry "depot" #f 50 8 50 13 ()}
        {Lisp-Entry "path" #f 51 8 51 12 ()}
        {Lisp-Entry "construct-literal" #f 55 16 55 33 ("self" "new" "item" "let" "path" "depot" "context")}
        {Lisp-Entry "compare-object" #f 60 11 60 25 (":not-equal" "else" ":equal" "get-path" "path" "equal?" "get-depot" "depot" "eq?" "and" ":incompatible" "Depot-Moniker" "is-not?" "cond" "target")}
        {Lisp-Entry "print" #f 70 11 70 16 ("path" "depot" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-protocol" #f 84 16 84 28 ("item" "'item")}
        {Lisp-Entry "new-moniker" #f 89 16 89 27 ("car" "self" "new" "length" "1" "=" "assert" "list")}
        {Lisp-Entry "present" #f 94 11 94 18 ("path" "format")}
        {Lisp-Entry "initialize" #f 103 11 103 21 ("path~self" "depot~self" "set!" "nextmethod" "path" "depot")}
        {Lisp-Entry "get-content" #f 114 11 114 22 ("get-path" "depot" "Depot-Moniker" "new" "function" "map" "get-content" "items" "get-depot-item" "item" "with-closed" "leaves?" "leaves?:" "nodes?" "nodes?:")}
        {Lisp-Entry "get-children" #f 123 11 123 23 ("get-content" "leaves?" "leaves?:" "nodes?" "nodes?:")}
        {Lisp-Entry "get-list" #f 132 18 132 26 ("path")}
        {Lisp-Entry "load-lines" #f 141 11 141 21 ("rest")}
        {Lisp-Entry "get-depot" #f 150 18 150 27 ("depot")}
        {Lisp-Entry "get-path" #f 154 18 154 26 ("path")}}}})
"Depot-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "depot" "preference" "Depot-Preferences.jazz"} 1226584775
    {Lisp-Entry "jazz.depot.preference.Depot-Preferences" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Depot-Preferences" #f 49 7 49 24 ("Bitmap-Resource" "icon:" "title:" "Preferences")
        {Lisp-Entry "active?" #f 52 12 52 19 ("generate")}
        {Lisp-Entry "depot-class" #f 64 26 64 37 ()}
        {Lisp-Entry "install-preferences" #f 68 26 68 45 ("initargs" "designer")}
        {Lisp-Entry "get-class-presentation" #f 77 16 77 38 ()}
        {Lisp-Entry "get-class-image" #f 81 16 81 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-name-mandatory?" #f 85 16 85 35 ()}
        {Lisp-Entry "get-name-unicity?" #f 89 16 89 33 ()}
        {Lisp-Entry "presentation->name" #f 93 16 93 34 ("presentation")}
        {Lisp-Entry "name->presentation" #f 97 16 97 34 ("name")}
        {Lisp-Entry "property-presentation" #f 101 16 101 37 ("nextmethod" "else" "active?" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 107 11 107 27 ("nextmethod" "else" "Boolean-Row" "new" "active?" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 113 11 113 37 ("active?")}}}})
"Depot-Synchronizer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Depot-Synchronizer.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Depot-Synchronizer" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Depot-Synchronizer" #f 46 7 46 25 ("Directory-Comparer")
        {Lisp-Entry "leaf-feedback" #f 54 11 54 24 ("get-moniker" "feedback" "leaf2" "leaf1")}
        {Lisp-Entry "create-item" #f 63 11 63 22 ("get-name" "make-item" "moniker")}
        {Lisp-Entry "get-item-content" #f 67 11 67 27 ("get-name" "make-item" "function" "map" "leaves" "'leaves" "leaves?:" "nodes" "'nodes" "=" "nodes?:" "get-children" "children" "nextmethod" "Depot-Moniker" "is-not?" "if" "get-moniker" "moniker" "let" "kind" "item")}
        {Lisp-Entry "get-item-type" #f 79 11 79 24 ("nextmethod" "else" "leaf" "'leaf" "node" "'node" "get-product" "if" "Depot-Moniker" "get-moniker" "is?" "cond" "item")}
        {Lisp-Entry "new-entry" #f 94 11 94 20 ("nextmethod" "leaf" "'leaf" "=" "and" "unless" "right-value" "right" "left-value" "left" "kind" "parent")}
        {Lisp-Entry "different?" #f 99 11 99 21 ("get-moniker" "is-different" "check-algorithm" "item" "file")}
        {Lisp-Entry "collect-item?" #f 103 11 103 24 ("/=" "get-name" "name" "let" "nextmethod" "and" "ignored-extensions" "ignored-leaves" "ignored-nodes" "content" "item")}}}})
"Depot-Version-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "depot" "manager" "Depot-Version-Browser.jazz"} 1226584775
    {Lisp-Entry "jazz.depot.manager.Depot-Version-Browser" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Depot-Version-Browser" #f 52 7 52 28 ("253" "150" "date" "125" "username" "display-images?:" "toplevel-controls?:" "75" "width:" "title:" "version" "row" "selection-mode:" "multiple-selection?:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "action" "filled-column:" "versions" "fill" "layout-type:" "content" "vscroll?:" "edge" "border-type:" "277" "749" "35" "versions-border" "on-show-differences" "30" "show-differences" "on-view-versions" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "7" "2" "Point" "position:" "view-versions" "name:" "314" "753" "Dimension" "size:" "View")
        {Lisp-Entry "external-name" #f 55 16 55 29 ("depot-version-browser" "'depot-version-browser" "rest")}
        {Lisp-Entry "file" #f 59 12 59 16 ("set-file" "get-file")}
        {Lisp-Entry "finish" #f 83 11 83 17 ("update-buttons" "update-versions" "nextmethod" "initargs")}
        {Lisp-Entry "host-title" #f 94 16 94 26 ()}
        {Lisp-Entry "host-position" #f 98 16 98 29 ("270" "290" "Point")}
        {Lisp-Entry "host-size" #f 102 16 102 25 ("450" "853" "Dimension")}
        {Lisp-Entry "get-file" #f 111 18 111 26 ("file")}
        {Lisp-Entry "set-file" #f 115 18 115 26 ("file" "set!" "value")}
        {Lisp-Entry "resize" #f 124 11 124 17 ("versions-border" "'versions-border" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-view-versions" #f 129 11 129 27 ("view-versions" "evt")}
        {Lisp-Entry "on-show-differences" #f 133 11 133 30 ("show-differences" "evt")}
        {Lisp-Entry "on-selection-change" #f 137 11 137 30 ("update-buttons" "versions" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" #f 144 11 144 26 ("view-versions" "versions" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "update-versions" #f 156 11 156 26 ("user-data:" "list" "children:" "add-row" "get-action" "c3" "get-date" "c2" "get-username" "Tree-Label" "c1" "Label-Bold" "name:" "Font" "if" "font:" "title:" "Tree-Node" "new" "c0" "=" "and" "current?" "get-version-number" "no" "let*" "version" "for-each" "get-versions" "get-item" "item" "with-closed" "file-version" "Depot" "find-depot" "depot" "file" "when" "remove-every-row" "function" "with-update-locked" "versions" "'versions" "locate" "tree" "let")}
        {Lisp-Entry "update-buttons" #f 177 11 177 25 ("2" "=" "or" "show-differences" "'show-differences" "1" ">=" "view-versions" "'view-versions" "locate" "set-enabled?" "length" "count" "selected-versions" "versions" "let*")}
        {Lisp-Entry "file-version" #f 189 29 189 41 ()}
        {Lisp-Entry "view-versions" #f 198 11 198 24 ("close-modal-dialog" "get-locals" "view-version" "for-each")}
        {Lisp-Entry "view-version" #f 203 29 203 41 ("edit-document" "get-application" "appl" "let" "local")}
        {Lisp-Entry "show-differences" #f 208 11 208 27 ("close-modal-dialog" "compare-versions" "function" ":wait" "with-cursor" "car" "right" "cadr" "left/nil" "get-locals" "locals" "let*")}
        {Lisp-Entry "compare-versions" #f 218 29 218 45 ("locate" "acquire-focus" "set-visible?" "bring-to-front" "file" "either" "get-guest" "compare-monikers" "text" "'text" "host-workspace:" "host-visible?:" "Compare-Files" "new-frame" "frame" "let" "right" "left/nil")}
        {Lisp-Entry "get-locals" #f 227 29 227 39 ("get-local" "Profile" "'Profile" "list" "File" "new" "local" "get-name" "format" "filename" "get-application" "appl" "let*" "get-version" "version-item" "get-item" "item" "with-closed" "file" "Depot" "find-depot" "depot" "no" "function" "map" "selected-versions" "versions" "let")}
        {Lisp-Entry "selected-versions" #f 246 11 246 28 ("get-selected-data" "<" "sort" "versions" "'versions" "locate" "tree" "let")}}}})
"Depots-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "depot" "preference" "Depots-Preferences.jazz"} 1226584775
    {Lisp-Entry "jazz.depot.preference.Depots-Preferences" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Depots-Preferences" #f 48 7 48 25 ("title:" "Preferences")
        {Lisp-Entry "active" #f 51 12 51 18 ("generate")}
        {Lisp-Entry "editor-class" #f 59 31 59 43 ()}
        {Lisp-Entry "can-view-properties?" #f 68 11 68 31 ()}
        {Lisp-Entry "can-rename-component?" #f 72 11 72 32 ()}
        {Lisp-Entry "can-delete-component?" #f 76 11 76 32 ()}
        {Lisp-Entry "can-move-component?" #f 80 11 80 30 ()}
        {Lisp-Entry "can-copy-component?" #f 84 11 84 30 ()}
        {Lisp-Entry "get-addable-classes" #f 88 11 88 30 ("preferences-class" "essay" "depot-class" "function" "map" "get-depot-classes" "depot-classes" "get-application" "appl" "let*")}}}})
"Descendants-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Descendants-Editor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Descendants-Editor" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Descendants-Editor" #f 50 7 50 25 ("183" "width:" "descendant" "tree" "header" "content" "vscroll?:" "hscroll?:" "document" "style:" "scroller" "on-toggle-branches" "toggle-branches" "on-new-default" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "new-default" "tools" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "external-name" #f 67 16 67 29 ("descendants-editor" "'descendants-editor" "rest")}
        {Lisp-Entry "host-icon" #f 76 16 76 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 80 16 80 26 ()}
        {Lisp-Entry "client-activate" #f 84 11 84 26 ("get-designer" "set-designer" "get-client" "set-client" "set-editor" "View-Editor" "is?" "when" "current-document" "guest" "let")}
        {Lisp-Entry "client-deactivate" #f 92 11 92 28 ("set-designer" "set-client" "set-editor")}
        {Lisp-Entry "focus-default" #f 103 11 103 24 ("auto-select-first" "acquire-focus" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" #f 109 11 109 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "install-in-host" #f 118 11 118 26 ("header" "'header" "set-shown?" "scroller" "'scroller" "locate" "set-flat?" "Docked-Host" "is?" "when" "2" "0" "Rect" "set-layout-insets" "fill" "'fill" "get-root" "set-layout-type" "nextmethod" "host")}
        {Lisp-Entry "get-tree" #f 132 18 132 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "on-new-default" #f 141 11 141 25 ("new-default" "evt")}
        {Lisp-Entry "on-toggle-contents" #f 146 11 146 29 ("get-show-contents?" "not" "set-show-contents?" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "on-toggle-branches" #f 151 11 151 29 ("get-show-branches?" "not" "set-show-branches?" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "new-default" #f 161 29 161 40 ("bell")}
        {Lisp-Entry "add-default" #f 165 11 165 22 ("parent:" "add-component-class" "get-client" "parent" "get-tree" "tree" "let*" "class")}
        {Lisp-Entry "get-editor" #f 176 18 176 28 ("get-tree" "get-editor")}
        {Lisp-Entry "set-editor" #f 180 18 180 28 ("get-tree" "set-editor" "editor")}
        {Lisp-Entry "get-client" #f 189 18 189 28 ("get-tree" "get-client")}
        {Lisp-Entry "set-client" #f 193 18 193 28 ("get-tree" "set-client" "client")}
        {Lisp-Entry "get-designer" #f 202 18 202 30 ("get-tree" "get-designer")}
        {Lisp-Entry "set-designer" #f 206 18 206 30 ("get-tree" "set-designer" "designer")}}}})
"Descendants-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Descendants-Tree.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Descendants-Tree" #f 37 9 37 46 ("Component-Column" "register-autoclass" "jazz")
      {Lisp-Entry "Descendants-Tree" #f 50 7 50 23 ("187" "width:" "title:" "descendant" "name:" "on-selection-change" ":form" "Event-Handler" "selection-handler:" "multiple-selection?:" ":icons" "portfolio:" "reorderable?:" "draggable?:" "Components-Tree")
        {Lisp-Entry "group?" #f 53 12 53 18 ("set-group?" "get-group?")}
        {Lisp-Entry "editable?" #f 54 12 54 21 ("set-editable?" "get-editable?")}
        {Lisp-Entry "highlight-edited?" #f 55 12 55 29 ("set-highlight-edited?" "get-highlight-edited?")}
        {Lisp-Entry "show-branches?" #f 56 12 56 26 ("set-show-branches?" "get-show-branches?")}
        {Lisp-Entry "get-group?" #f 69 18 69 28 ("group?")}
        {Lisp-Entry "set-group?" #f 73 18 73 28 ("group?" "set!" "value")}
        {Lisp-Entry "get-editable?" #f 77 18 77 31 ("editable?")}
        {Lisp-Entry "set-editable?" #f 81 18 81 31 ("editable?" "set!" "value")}
        {Lisp-Entry "get-highlight-edited?" #f 85 18 85 39 ("highlight-edited?")}
        {Lisp-Entry "set-highlight-edited?" #f 89 18 89 39 ("highlight-edited?" "set!" "flag")}
        {Lisp-Entry "get-show-branches?" #f 93 18 93 36 ("show-branches?")}
        {Lisp-Entry "set-show-branches?" #f 97 18 97 36 ("preserving-update" "show-branches?" "set!" "value")}
        {Lisp-Entry "mouse-down" #f 107 11 107 21 ("editor" "edit-component" "bell" "not" "if" "selected-component" "component" "let" "editable?" "alt-down?" "and" "when" "nextmethod" "pos")}
        {Lisp-Entry "double-click" #f 116 11 116 23 ("editor" "edit-component" "bell" "selected-component" "component" "let" "nextmethod" "editable?" "highlight-edited?" "not" "or" "if" "pos")}
        {Lisp-Entry "branch-changed" #f 130 11 130 25 ("preserving-update")}
        {Lisp-Entry "selection-changed" #f 134 11 134 28 ("generate-event?:" "row-rank" "set-selection" "ensure-expanded" "for-each" "groupify-selection" "if" "component-row" "map" "remove-nils" "rows" "let" "Details-Tree" "is?" "self" "eq?" "not" "group?" "or" "unless" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "groupify-selection" #f 141 11 141 29 ("find-ascendant" "Group" "is?" "if" "component" "function" "map" "selection")}
        {Lisp-Entry "update" #f 154 11 154 17 ("update-selection" "get-rights" "insert-toplevel" "client" "when" "remove-every-row" "function" "with-update-locked" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "insert-toplevel" #f 163 29 163 44 ("0" "client" "insert-component" "rights")}
        {Lisp-Entry "insert-component?" #f 167 29 167 46 ("component")}
        {Lisp-Entry "insert-component" #f 171 29 171 45 ("insert-components" "user-data:" "title:" "Component-Node" "new" "list" "children:" "father:" "Component-Row" "class:" "add-row" "subrow" "row-state" "collapsed" "'collapsed" "null?" "if" "component-state" "component-image" "either" "component-presentation" "title" "get-components" "components" "let*" "insert-component?" "when" "state" "state:" "image" "image:" "level" "update?" "rights" "component" "row")}
        {Lisp-Entry "insert-components" #f 182 29 182 46 ("get-components" "insert-component-list" "level" "update?" "rights" "component" "row")}
        {Lisp-Entry "insert-component-list" #f 186 29 186 50 ("sort-components" "sort-components?" "if" "1" "+" "essay" "insert-component" "access-rights" "child-rights" "access-granted?" "receive" "child" "for-each" "Branch" "is-not?" "show-branches?" "not" "Group" "is?" "function" "collect-if" "set!" "group?" "when" "level" "update?" "rights" "components" "component" "row")}
        {Lisp-Entry "row-state" #f 200 29 200 38 ("collapsed" "'collapsed" "expanded" "'expanded" "if" "level" "update?" "component")}
        {Lisp-Entry "refresh" #f 211 11 211 18 ("refresh-descendants" "descendants" "refresh-component" "case" "what" "component")}
        {Lisp-Entry "refresh-component" #f 217 11 217 28 ("invalidate-cell" "get-cell-data" "set-title" "get-presentation" "title" "0" "Cell" "new" "cell" "let" "when" "row-rank" "rank" "component-row" "row" "let*" "component")}
        {Lisp-Entry "refresh-descendants" #f 228 11 228 30 ("expand" "expanded" "'expanded" "eq?" "insert-components" "remove-every-son" "1" "get-level" "+" "level" "get-state" "state" "function" "with-update-locked" "when" "component-row" "row" "let" "component")}
        {Lisp-Entry "get-rights" #f 246 11 246 21 ("get-rights" "editor" "essay")}
        {Lisp-Entry "access-rights" #f 252 11 252 24 ("can-access?" "find-child-rights" "child-rights" "let" "values" "not" "if" "child" "rights")}
        {Lisp-Entry "highlight-component" #f 266 18 266 37 ("set-component-highlighted?" "component")}
        {Lisp-Entry "unhighlight-component" #f 270 18 270 39 ("set-component-highlighted?" "component")}
        {Lisp-Entry "highlight-edited" #f 274 11 274 27 ("set-component-highlighted?" "highlight-edited?" "when" "component")}
        {Lisp-Entry "unhighlight-edited" #f 279 11 279 29 ("set-component-highlighted?" "highlight-edited?" "when" "component")}
        {Lisp-Entry "set-component-highlighted?" #f 284 11 284 37 ("invalidate-cell" "get-cell-data" "set-highlighted?" "0" "Cell" "new" "cell" "when" "component-visible-row" "rank" "let" "flag" "component")}
        {Lisp-Entry "get-draggable?" #f 297 11 297 25 ("can-move-component?" "Component" "is?" "and" "selected-component" "component" "let")}
        {Lisp-Entry "on-designer" #f 307 11 307 22 ("what:" "refresh" ":refresh" "target:" "send-before-target" ":send-before" "child-remove" ":child-remove" "descendant?:" "parent:" "child:" "child-add" ":child-add" "presentation:" "component:" "get-property" "presentation-change" ":presentation-change" "get-kind" "case" "evt")}
        {Lisp-Entry "presentation-change" #f 316 11 316 30 ("invalidate-cell" "0" "Cell" "new" "cell" "let" "set-title" "when" "first-child" "node" "row-rank" "rank" "find-row" "row" "let*" "Branch" "is?" "show-branches?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "presentation" "component")}
        {Lisp-Entry "child-add" #f 329 11 329 20 ("expand" "reorder-component" "when" "state:" "insert-component" "function" "with-update-locked" "collapsed" "'collapsed" "expanded" "'expanded" "state" "0" "get-level" "if" "level" "parent-relocation" "find-row" "row" "let*" "Branch" "is?" "show-branches?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "descendant?" "parent" "child")}
        {Lisp-Entry "child-remove" #f 343 11 343 23 ("remove-row" "function" "with-update-locked" "find-row" "row" "let" "Branch" "is?" "show-branches?" "not" "Group" "is-not?" "group?" "and" "or" "unless" "child")}
        {Lisp-Entry "send-before-target" #f 352 11 352 29 ("find-component-insertion" "position:" "move-component-row" "function" "with-update-locked" "parent-relocation" "parent-row" "find-row" "child-row" "let" "target" "parent" "child")}}
      {Lisp-Entry "Component-Column" #f 367 7 367 23 ("Tree-Node-Column")
        {Lisp-Entry "highlight-color" #f 370 12 370 27 ("set-highlight-color" "Dark-Red" "name:" "Color")}
        {Lisp-Entry "get-highlight-color" #f 373 18 373 37 ("highlight-color")}
        {Lisp-Entry "set-highlight-color" #f 377 18 377 37 ("highlight-color" "set!" "value")}
        {Lisp-Entry "draw-cell" #f 381 11 381 20 ("highlight-color" "text-rect" "frame-rect" "get-highlighted?" "Component-Node" "is?" "and" "when" "nextmethod" "height" "width" "cell" "row" "context" "surface")}}
      {Lisp-Entry "Component-Row" #f 395 7 395 20 ("Tree-Row")
        {Lisp-Entry "auto-collapse" #f 398 11 398 24 ("get-editor" "close" "remove-row" "Editor-Row" "is?" "when" "nextmethod" "0" "get-sons" "element" "row" "get-tree" "tree" "let")}}
      {Lisp-Entry "Component-Node" #f 412 7 412 21 ("Tree-Node")
        {Lisp-Entry "highlighted?" #f 415 18 415 30 ("generate")}}}})
"Descriptors"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "descriptor" "Descriptors.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.descriptor.Descriptors" #f 37 9 37 45 ("jazz")}})
"Designer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "designer" "Designer.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.designer.Designer" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Designer" #f 53 7 53 15 ("Object")
        {Lisp-Entry "form" #f 56 8 56 12 ()}
        {Lisp-Entry "reference" #f 57 8 57 17 ()}
        {Lisp-Entry "listeners" #f 58 8 58 17 ()}
        {Lisp-Entry "modified?" #f 59 8 59 17 ()}
        {Lisp-Entry "initialize" #f 67 11 67 21 ("setup-form" "reference~self" "set!" "nextmethod" "reference" "reference:" "form" "form:")}
        {Lisp-Entry "setup-form" #f 73 11 73 21 ("setup-class-form" "setup-file-form" "file?" "get-origin" "origin" "let" "install" "'install" "model-name:" "'new" "action:" "reference" "class-of" "origin:" "textual?:" "Form" "new" "form" "set!" "not" "if" "frm")}
        {Lisp-Entry "setup-class-form" #f 94 11 94 27 ("form" "set!" "frm")}
        {Lisp-Entry "setup-file-form" #f 98 11 98 26 ("form" "set!" "frm")}
        {Lisp-Entry "get-form" #f 107 18 107 26 ("form")}
        {Lisp-Entry "set-form" #f 111 18 111 26 ("form" "set!" "value")}
        {Lisp-Entry "get-reference" #f 115 18 115 31 ("reference")}
        {Lisp-Entry "get-modified?" #f 119 18 119 31 ("modified?")}
        {Lisp-Entry "set-modified?" #f 123 18 123 31 ("modified?" "set!" "state")}
        {Lisp-Entry "save" #f 132 26 132 30 ("save-content" "save-as" "not" "if" "form" "get-origin" "origin" "let" "function" ":wait" "with-cursor" "extensions" "extensions:" "default-extension" "default-extension:")}
        {Lisp-Entry "save-to" #f 141 18 141 25 ("set-modified?" "save-to-file" "form" "set-origin" "save-as" "not" "if" "file")}
        {Lisp-Entry "Default-Extension" #f 149 14 149 31 ()}
        {Lisp-Entry "Default-Extensions" #f 152 14 152 32 ()}
        {Lisp-Entry "save-as" #f 156 11 156 18 ("save-content" "Default-Extensions" "Default-Extension" "either" "choose-new-file" "form" "set-origin" "extensions" "extensions:" "default-extension" "default-extension:")}
        {Lisp-Entry "save-content" #f 161 11 161 23 ("set-modified?" "save-to-class" "save-to-file" "file?" "if" "form" "get-origin" "origin" "let")}
        {Lisp-Entry "save-to-class" #f 169 11 169 24 ("focus-host" "bring-to-front" "set-visible?" "close" "save" "begin" "not" "format" "insert-string" "set-selection" "function" "with-update-locked" "find-location" "range" "text" "frame" "receive" "set-class-form" "Language" "Interpreter" "evaluate" "when" "2" "saved-form" "output" "find-document" "being-edited?" "find-source" "code-source" "Jazz-Code-Location" "new" "code-location" "list" "location" ":new-form" ":form" "get-self-form" "form" "eq?" "if" "where" "type-name" "class-name" "get-application" "appl" "let*" "class")}
        {Lisp-Entry "save-to-file" #f 201 11 201 23 ("0" "print-to" "form" "get-model-name" "output-header" "printer" "function" "UTF-8" "'UTF-8" "char-encoding:" "parse" "path:" "list" "call-with-output-file" "format" "message-box" "read-only?" "exists?" "and" "if" "file")}
        {Lisp-Entry "saved-form" #f 211 18 211 28 ("get-output-string" "print-to" "open-output-string" "printer" "let" "function" "with-jazz-readtable" "align-name?" "align-name?:" "space-properties?" "space-properties?:" "level" "class-form?")}
        {Lisp-Entry "print-to" #f 219 18 219 26 ("base:" "form?:" "pretty-print" "if" "base" "form" "form->node" "node" "let" "format" "when" "align-name?" "align-name?:" "space-properties?" "space-properties?:" "printer" "level" "class-form?")}
        {Lisp-Entry "set-name" #f 235 26 235 34 ("set-modified?" "fire-property-change" "name-info" "'name-info" "property-field" "property" "fire-presentation-change" "presentation" "fire-name-change" "set-name" "install" "'install" "get-action" "neq?" "and" "owned-form" "component-form" "component-ancestry" "ancestry" "when" "get-client-form" "let" "function" "reference" "either" "for-each-branch" "get-presentation" "old-presentation" "get-name" "old-name" "find-form" "form" "target-branch" "let*" "undoable?" "undoable?:" "design-events?" "design-events?:" "branch" "branch:" "name" "component")}
        {Lisp-Entry "set-tag-module" #f 259 26 259 40 ("set-modified?" "set-tag-module" "find-form" "form" "let" "tag-module" "parent" "component")}
        {Lisp-Entry "set-property" #f 265 26 265 38 ("set-modified?" "get-property" "fire-property-change" "fire-presentation-change" "presentation" "write-property" "get-presentation" "old-presentation" "presentation-property?" "essay" "fire-presentation?" "has-property?" "read-property" "old-value" "find-next-branch" "next-restore" "next-form" "restore?:" "find-form" "restore" "receive" "error" "neq?" "get-creator-branch" "creator-branch" "when" "assert" "property-field" "reference" "follow-component" "component" "let*" "get-client-form" "follow-form" "form" "and" "Path" "is?" "path?" "not" "or" "installed?" "set-property" "eq?" "if" "target-branch" "let" "undoable?" "undoable?:" "design-events?" "design-events?:" "branch" "branch:" "value" "property" "component/path")}
        {Lisp-Entry "remove-property" #f 307 26 307 41 ("set-modified?" "remove-property" "set-property" "fire-property-change" "write-property" "begin" "get-property" "value" "let" "has-property?" "when" "find-next-branch" "next-restore" "next-form" "restore?:" "find-form" "restore" "form" "receive" "assert" "property-field" "reference" "follow-component" "if" "component" "Path" "is?" "path?" "not" "or" "installed?" "target-branch" "let*" "undoable?" "undoable?:" "design-events?" "design-events?:" "branch" "branch:" "default-value" "property" "component/path")}
        {Lisp-Entry "add-child" #f 331 26 331 35 ("set-modified?" "fire-child-add" "set-property" "value" "property" "function" "for-each-property" "get-name" "add-to-index" "reference" "set-creator" "set-name" "self" "remember-creation" "when" "add-form" "set-form" "class-of" "type-name" "identifier-name" "model-name:" "'new" "action:" "get-context" "context:" "textual?:" "Form" "new" "child-form" "restore?:" "find-form" "restore" "form" "receive" "set-parent" "target-branch" "let" "descendant?" "descendant?:" "design-events?" "design-events?:" "properties" "properties:" "name" "name:" "branch" "branch:" "parent" "child")}
        {Lisp-Entry "remove-child" #f 357 26 357 38 ("set-modified?" "fire-child-remove" "close" "get-restore-form" "get-client-form" "for-each-branch" "remove-child" "find-child" "child-form" "owned-form" "component-ancestry" "parent-ancestry" "when" "function" "purge-references" "form" "find-form" "parent-form" "get-parent" "parent" "get-name" "name" "let*" "get-presentation" "neq?" "and" "find-owner" "owner" "either" "effective" "error" "reference" "eq?" "if" "target-branch" "let" "design-events?" "design-events?:" "branch" "branch:" "child")}
        {Lisp-Entry "remove-children" #f 390 18 390 33 ("get-children" "remove-child" "child" "function" "for-each" "design-events?" "design-events?:" "branch" "branch:" "parent")}
        {Lisp-Entry "purge-branch" #f 398 26 398 38 ("remove-child" "install-form" "restore?:" "restore-form" "form" "receive" "find-form" "parent-form" "get-parent" "parent" "target-branch" "let*" "design-events?" "design-events?:" "branch" "branch:" "component")}
        {Lisp-Entry "move-components" #f 407 26 407 41 ("set-modified?" "descendant?:" "design-events?:" "name-resolution:" "instantiate-parcels" "prog1" "delete-components" "verify-name-conflicts" "name-resolution" "package-components" "parcels" "remove-redundant-descendants" "let*" "branch" "branch:" "destination" "components")}
        {Lisp-Entry "send-before" #f 416 26 416 37 ("set-modified?" "fire-send-before" "send-child-before" "send-before" "essay" "target-form" "child-form" "find-form" "parent-form" "get-parent" "parent" "target-branch" "let*" "branch" "branch:" "target" "child")}
        {Lisp-Entry "send-to-back" #f 428 18 428 30 ("get-parent" "first-child" "send-before" "branch" "branch:" "child")}
        {Lisp-Entry "bring-to-front" #f 432 18 432 32 ("send-before" "branch" "branch:" "child")}
        {Lisp-Entry "cut-components" #f 441 26 441 40 ("delete-components" "copy-components" "remove-redundant-descendants" "let" "components")}
        {Lisp-Entry "copy-components" #f 447 26 447 41 ("jazz-parcels" "'jazz-parcels" "format:" "set-clipboard-text" "copy-components-text" "text" "remove-redundant-descendants" "let" "components")}
        {Lisp-Entry "copy-components-text" #f 453 18 453 38 ("get-output-string" "get-content" "0" "print-form" "form" "get-object-id" "get-process-id" "class-of" "type-name" "parcel" "function" "for-each" "format" "package-components" "parcels" "open-output-string" "output" "get-printer-class" "new" "printer" "let" "branch" "branch:" "components")}
        {Lisp-Entry "paste-clipboard" #f 474 26 474 41 ("paste-parcels" "get-jazz-parcels" "parcels" "let" "design-events?" "design-events?:" "branch" "branch:" "parent")}
        {Lisp-Entry "paste-parcels" #f 479 26 479 39 ("set-modified?" "descendant?:" "name-resolution:" "instantiate-parcels" "prog1" "verify-name-conflicts" "name-resolution" "determine-paster" "let*" "reporter" "reporter:" "design-events?" "design-events?:" "branch" "branch:" "parent" "parcels")}
        {Lisp-Entry "paste-properties" #f 486 26 486 42 ("paste-parcel-properties" "get-jazz-parcels" "car" "parcel" "let" "design-events?" "design-events?:" "branch" "branch:" "components")}
        {Lisp-Entry "paste-parcel-properties" #f 491 18 491 41 ("set-modified?" "get-properties" "instantiate-properties" "form" "component" "function" "for-each" "get-content" "forms" "let" "design-events?" "design-events?:" "branch" "branch:" "components" "parcel")}
        {Lisp-Entry "delete-components" #f 501 26 501 43 ("delete-component" "component" "function" "for-each" "remove-redundant-descendants" "let" "design-events?" "design-events?:" "branch" "branch:" "components")}
        {Lisp-Entry "delete-component" #f 508 26 508 42 ("remove-child" "design-events?" "design-events?:" "branch" "branch:" "component")}
        {Lisp-Entry "remove-redundant-descendants" #f 514 11 514 39 ("has-parent?" "neq?" "and" "target" "some?" "not" "component" "function" "collect-if" "components")}
        {Lisp-Entry "package-components" #f 531 11 531 29 ("package-component" "component" "function" "map" "branch" "branch:" "components")}
        {Lisp-Entry "package-component" #f 537 11 537 28 ("error" "object->serial" "GetCurrentProcessId" "Component-Parcel" "install" "new" "car" "get-action" "memq?" "and" "if" "cons" "set!" "when" "owned-form" "form" "owner" "function" "reference" "iterate-branch-spine" "forms" "component-ancestry" "ancestry" "let" "branch" "branch:" "component")}
        {Lisp-Entry "instantiate-parcels" #f 556 26 556 45 ("step-it" "instantiate-parcel" "prog1" "get-master-name" "user-message" "when" "parcel" "function" "map" "reporter" "reporter:" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution" "name-resolution:" "branch" "branch:" "parent" "parcels")}
        {Lisp-Entry "instantiate-parcel" #f 566 26 566 44 ("cdr" "instantiate-form" "component" "delete-components" "list" "name-conflicts" "conflicts" "let" "override" "set-name" "form" "function" "for-each" "unique-name" "set!" "rename" "case" "when" "test:" "member?" "and" "conflict?" "'equal" "sort-predicate" "equal" "component-name" "map" "domain" "get-children" "brothers" "get-name" "name" "car" "master" "get-content" "forms" "let*" "descendant?" "descendant?:" "design-events?" "design-events?:" "name-resolution" "name-resolution:" "branch" "branch:" "parent" "parcel")}
        {Lisp-Entry "instantiate-form" #f 589 26 589 42 ("get-children" "instantiate-children" "get-properties" "instantiate-properties" "when" "instantiate-component" "component" "let" "descendant?" "design-events?" "branch" "parent" "form" "name-resolution" "name")}
        {Lisp-Entry "instantiate-component" #f 597 26 597 47 ("error" "else" "equal" "'equal" "sort-predicate" "get-name" "find-to-modify" "locate" "modify" "instantiate-new-component" "new" "case" "get-action" "action" "let" "descendant?" "design-events?" "branch" "parent" "form" "name-resolution" "name")}
        {Lisp-Entry "instantiate-new-component" #f 605 26 605 51 ("descendant?:" "design-events?:" "name:" "branch:" "add-child" "parent:" "instantiate-component" "component" "let" "descendant?" "design-events?" "branch" "parent" "form" "name")}
        {Lisp-Entry "instantiate-properties" #f 611 26 611 48 ("undoable?:" "design-events?:" "branch:" "set-property" "value" "property" "function" "for-each-property" "design-events?" "branch" "properties" "component")}
        {Lisp-Entry "instantiate-children" #f 617 26 617 46 ("get-name" "instantiate-form" "form" "function" "for-each" "design-events?" "branch" "children" "component")}
        {Lisp-Entry "unique-name" #f 628 29 628 40 ("string->symbol" "symbol?" "if" "unique-separator" "separator:" "map" "->string" "unique-domain-name" "unique-name" "let" "domain" "name")}
        {Lisp-Entry "unique-separator" #f 635 29 635 45 ()}
        {Lisp-Entry "verify-name-conflicts" #f 644 18 644 39 ("confirm-name-resolution" "when" "name-conflicts" "conflicts" "get-children" "children" "get-master-name" "parcel" "function" "map" "names" "let*" "destination" "parcels")}
        {Lisp-Entry "name-conflicts" #f 652 11 652 25 ("get-name" "name" "some?" "child" "function" "collect-if" "'equal" "sort-predicate" "equal" "let" "children" "names")}
        {Lisp-Entry "confirm-name-resolution" #f 661 29 661 52 ("throw-cancel" "no" "override" "'override" "yes" "case" "question" "'question" "type:" "message-box" "code" "present-conflicts" "text" "header" "let*" "rename" "'rename" "get-name" "object->serial" "child" "some?" "GetCurrentProcessId" "=" "and" "get-master-name" "name" "get-object-id" "component-id" "get-process-id" "process-id" "'equal" "sort-predicate" "equal" "let" "parcel" "function" "every?" "if" "conflicts" "children" "parcels")}
        {Lisp-Entry "present-conflicts" #f 682 11 682 28 ("get-output" "get-name" "->string" ":bulleted" "list" "conflict" "function" "for-each" "put" "List-Factory" "new" "fact" "let" "conflicts" "header")}
        {Lisp-Entry "add-view" #f 698 26 698 34 ("set-modified?" "set-visible?" "get-height" "2" "get-width" "quotient" "-" "move-figure" "get-size" "size" "let" "'position" "set-property" "when" "add-child" "apply" "others" "visible?" "visible?:" "centered?" "centered?:" "position" "position:" "parent" "child")}
        {Lisp-Entry "find-form" #f 715 11 715 20 ("values" "error" "not" "and" "restore" "embed-form" "get-restore-form" "essay" "restore-form" "form" "get-client-form" "if" "branch-form" "component-ancestry" "ancestry" "let*" "error?" "error?:" "restore?" "restore?:" "branch" "component")}
        {Lisp-Entry "embed-form" #f 728 11 728 21 ("equal?" "test:" "form-name" "subform" "error" "get-name" "name" "get-component" "Restore-Form" "is?" "essay" "key:" "find-in" "restore-form" "set!" "memq?" "embed-new-form" "not" "if" "get-form" "cpn-form" "get-children" "children" "let" "cpn" "function" "for-each" "ancestry" "form")}
        {Lisp-Entry "embed-new-form" #f 750 11 750 25 ("add-child" "name:" "modify" "'modify" "action:" "Form" "new" "subform" "let" "name" "form")}
        {Lisp-Entry "target-branch" #f 756 11 756 24 ("else" "follow-component" "Path" "is?" "reference" "get-active-branch" "eq?" "cond" "branch")}
        {Lisp-Entry "component-ancestry" #f 762 11 762 29 ("error" "not" "when" "get-parent-component" "cons" "set!" "reference" "neq?" "while" "scan" "ancestry" "let" "component")}
        {Lisp-Entry "find-owner" #f 778 18 778 28 ("continuation-return" "has-property?" "new" "'new" "get-action" "eq?" "not" "or" "and" "owned-form" "when" "form" "owner" "reference" "iterate-branch-spine" "return" "function" "continuation-capture" "component-ancestry" "ancestry" "let" "property" "component")}
        {Lisp-Entry "find-next-branch" #f 793 11 793 27 ("get-restore-form" "continuation-return" "has-property?" "owned-form" "form" "when" "get-client-form" "client-form" "for-each" "return" "function" "continuation-capture" "component-ancestry" "ancestry" "reference" "either" "get-installed-branches" "lower" "let" "values" "installed?" "not" "and" "if" "property" "component" "branch")}
        {Lisp-Entry "owned-form" #f 810 11 810 21 ("equal?" "test:" "form-name" "key:" "find-in" "subform" "get-name" "name" "set!" "memq?" "continuation-return" "not" "if" "get-form" "cpn-form" "get-children" "children" "let" "cpn" "for-each" "return" "function" "continuation-capture" "ancestry" "form")}
        {Lisp-Entry "get-name" #f 840 18 840 26 ("follow-form" "get-name" "get-client-form" "if" "form" "target-branch" "let*" "branch" "branch:" "path")}
        {Lisp-Entry "get-property" #f 846 18 846 30 ("follow-form" "get-property" "get-client-form" "if" "form" "target-branch" "let*" "branch" "branch:" "property" "path")}
        {Lisp-Entry "edit-form" #f 857 18 857 27 ("edit" "2" "list" "form-location" "append" "Jazz-Code-Location" "new" "location" "edit-document" "file?" "if" "form" "get-origin" "origin" "get-application" "appl" "let")}
        {Lisp-Entry "form-location" #f 866 18 866 31 ("class-form" "'class-form" "list" "get-category-location" "append" "form-location" "'form-location" "unimplemented" "file?" "if" "form" "get-origin" "origin" "let")}
        {Lisp-Entry "fire-name-change" #f 880 11 880 27 ("get-designers" "process-name-change" "designer" "function" "for-each" "undoable?" "old-name" "name" "component")}
        {Lisp-Entry "fire-presentation-change" #f 886 11 886 35 ("get-designers" "process-presentation-change" "designer" "function" "for-each" "undoable?" "old-presentation" "presentation" "component")}
        {Lisp-Entry "fire-property-change" #f 892 11 892 31 ("get-designers" "process-property-change" "designer" "function" "for-each" "undoable?" "value" "property" "component" "branch")}
        {Lisp-Entry "fire-child-add" #f 898 11 898 25 ("get-designers" "process-child-add" "designer" "function" "for-each" "descendant?" "parent" "child")}
        {Lisp-Entry "fire-child-remove" #f 904 11 904 28 ("get-designers" "process-child-remove" "designer" "function" "for-each" "parent" "child")}
        {Lisp-Entry "fire-send-before" #f 910 11 910 27 ("get-designers" "process-send-before" "designer" "function" "for-each" "target" "parent" "child")}
        {Lisp-Entry "add-designer-listener" #f 921 18 921 39 ("add-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "remove-designer-listener" #f 925 18 925 42 ("remove-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "process-name-change" #f 929 11 929 30 ("invoke" "listener" "function" "for-each" "undoable?:" "old-name:" "name:" "component:" "self" ":name-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "old-name" "name" "component")}
        {Lisp-Entry "process-presentation-change" #f 937 11 937 38 ("invoke" "listener" "function" "for-each" "undoable?:" "old-presentation:" "presentation:" "component:" "self" ":presentation-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "old-presentation" "presentation" "component")}
        {Lisp-Entry "process-property-change" #f 945 11 945 34 ("invoke" "listener" "function" "for-each" "undoable?:" "value:" "property:" "component:" "branch:" "self" ":property-change" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "undoable?" "value" "property" "component" "branch")}
        {Lisp-Entry "process-child-add" #f 953 11 953 28 ("invoke" "listener" "function" "for-each" "descendant?:" "parent:" "child:" "self" ":child-add" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "descendant?" "parent" "child")}
        {Lisp-Entry "process-child-remove" #f 961 11 961 31 ("invoke" "listener" "function" "for-each" "parent:" "child:" "self" ":child-remove" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "parent" "child")}
        {Lisp-Entry "process-send-before" #f 969 11 969 30 ("invoke" "listener" "function" "for-each" "target:" "parent:" "child:" "self" ":send-before" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "target" "parent" "child")}
        {Lisp-Entry "process-refresh" #f 977 18 977 33 ("invoke" "listener" "function" "for-each" "what:" "component:" "self" ":refresh" "Designer-Event" "new" "evt" "let" "listeners" "not-null?" "when" "what" "component")}
        {Lisp-Entry "process-user-event" #f 985 18 985 36 ("self" "invoke" "listener" "function" "for-each" "listeners" "not-null?" "when" "event")}}}})
"Designer-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "event" "Designer-Event.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.event.Designer-Event" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Designer-Event" #f 45 7 45 21 ("Event")}}})
"Designer-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "preference" "Designer-Preferences.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.preference.Designer-Preferences" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Designer-Preferences" #f 47 7 47 27 ("Bitmap-Resource" "icon:" "title:" "Preferences")
        {Lisp-Entry "aligned-properties" #f 50 12 50 30 ("generate")}
        {Lisp-Entry "can-rename-component?" #f 62 11 62 32 ()}
        {Lisp-Entry "can-delete-component?" #f 66 11 66 32 ()}
        {Lisp-Entry "can-move-component?" #f 70 11 70 30 ()}
        {Lisp-Entry "can-copy-component?" #f 74 11 74 30 ()}
        {Lisp-Entry "get-row-instance" #f 78 11 78 27 ("nextmethod" "else" "List-Row" "new" "aligned-properties" "field-name" "case" "property")}
        {Lisp-Entry "get-addable-classes" #f 84 11 84 30 ("Indented-Column-Preferences" "Aligned-Column-Preferences" "list")}}}})
"Designer-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Designer-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Designer-Tester" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Designer-Tester" #f 46 7 46 22 ("title:" "Tester")}}})
"Designer-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "workspace" "Designer-Workspace.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.workspace.Designer-Workspace" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Designer-Workspace" #f 47 7 47 25 ("Console-Manager" "Properties-Manager" "-20" "caption?:" "Text-Palette" "-37" "Containment-Editor" "Alignment-Editor" "52" "Designer-Manager" "26" "59" "-30" "View-Descendants-Editor" "Branches-Editor" "second" "Toolbox-Manager" "model-name:" "65" "50" "vert" "5" "Rect" "insets:" "18" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 76 11 76 23 ("designer" "'designer")}}}})
"Desktop"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "Desktop.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.Desktop" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Desktop" #f 46 7 46 14 ("Window")
        {Lisp-Entry "get-size" #f 49 11 49 19 ("platform-get-size" "handle" "assert")}
        {Lisp-Entry "create-hwnd" #f 54 11 54 22 ("platform-get-desktop" "rest")}}}})
"Detail-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugger" "Detail-View.jazz"} 1227218394
    {Lisp-Entry "jazz.debugger.debugger.Detail-View" #f 37 9 37 43 ("Detail-Tree" "register-autoclass" "jazz")
      {Lisp-Entry "Detail-View" #f 59 7 59 18 ("on-edit-detail" "Selection-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" "detail" "shown?:" "header" "fill" "content" "flat?:" "vscroll?:" "center" "scroller" "on-update" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "update" "tools" "name:" "border" "layout-type:" "Layout-View")
        {Lisp-Entry "thread" #f 62 12 62 18 ()}
        {Lisp-Entry "stop" #f 65 8 65 12 ()}
        {Lisp-Entry "external-name" #f 79 16 79 29 ("detail-view" "'detail-view" "rest")}
        {Lisp-Entry "host-icon" #f 88 16 88 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 92 16 92 26 ()}
        {Lisp-Entry "get-tools-view" #f 101 11 101 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 105 11 105 24 ("acquire-focus" "detail" "'detail" "locate" "tree" "let")}
        {Lisp-Entry "get-thread" #f 115 18 115 28 ("thread")}
        {Lisp-Entry "set-thread" #f 119 18 119 28 ("update" "stop" "set!" "Debugged-Stop" "new" "get-process" "process" "get-debugger" "debugger" "not" "if" "get-active-stop" "object" "let" "when" "thread" "thread-stop" "define" "value")}
        {Lisp-Entry "*detail*" #f 139 14 139 22 ()}
        {Lisp-Entry "*detail-indicators*" #f 142 14 142 33 ()}
        {Lisp-Entry "edit-detail" #f 146 11 146 22 ("install-detail-indicators" "bell" "begin" "null?" "collect-locations" "locations" "uninstall-active-detail-indicators" "not" "if" "selected-detail" "detail" "let")}
        {Lisp-Entry "install-detail-indicators" #f 158 11 158 36 ("*detail-indicators*" "set!" "set-visible?" "bring-to-front" "reset-tooltip" "ensure-cell-displayed" "get-end" "get-start" "Walk-Fatal" "'Walk-Fatal" "apply-style" "find-location" "range" "text" "frame" "receive" "location" "function" "for-each" "uninstall-active-detail-indicators" "locations")}
        {Lisp-Entry "uninstall-detail-indicators" #f 171 11 171 38 ("reset-tooltip" "get-end" "get-start" "get-default-style" "apply-style" "find-location" "range" "text" "frame" "receive" "location" "function" "for-each" "locations")}
        {Lisp-Entry "uninstall-active-detail-indicators" #f 179 21 179 55 ("set!" "uninstall-detail-indicators" "*detail-indicators*" "when")}
        {Lisp-Entry "find-location" #f 185 11 185 24 ("get-guest" "values" "Range$Cell$" "range" "visible?:" "activate-focus?:" "get-application" "edit-document" "frame" "1" "+" "end" "Cell" "start" "list" "File" "new" "file" "let" "col" "line" "filename" "bind" "location")}
        {Lisp-Entry "collect-locations" #f 195 11 195 28 ("collect-details" "get-locat" "locat->file/line/col" "when" "get-location" "location" "let" "function" "collect" "detail")}
        {Lisp-Entry "collect-details" #f 205 11 205 26 ("queue-list" "get-children" "for-each" "enqueue" "when" "recurse" "define" "new-queue" "queue" "let" "detail")}
        {Lisp-Entry "resize" #f 221 11 221 17 ("scroller" "'scroller" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-context-menu" #f 227 11 227 26 ("track-popup-menu" "when" "selected-frame" "new-context-menu" "menu" "let" "function" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-edit-detail" #f 238 11 238 25 ("edit-detail" "evt")}
        {Lisp-Entry "on-update" #f 242 11 242 20 ("update" "evt")}
        {Lisp-Entry "update" #f 251 21 251 27 ("cdr" "empty-string?" "stop-row" "get-detail" "when" "remove-every-row" "with-update-locked" "'detail" "locate" "with-system-exception-debugger" "get-children" "subdetail" "function" "for-each" "user-data:" "image:" "title:" "Tree-Node" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "new" "image" "get-icon" "icon" "get-title" "title" "detail" "father" "tree" "insert-detail" "either" "stop-reason-lines" "else" "Bitmap-Resource" "exception" "get-kind" "case" "stop-image" "split" "car" "line" "not" "if" "get-reason" "reason" "let" "stop" "stop-title" "define")}
        {Lisp-Entry "selected-detail" #f 303 18 303 33 ("get-user-data" "when" "selected-row" "row" "let")}
        {Lisp-Entry "selected-row" #f 309 11 309 23 ("get-row" "when" "get-single-selection" "n" "detail" "'detail" "locate" "tree" "let*")}
        {Lisp-Entry "new-context-menu" #f 322 11 322 27 ("Detail-Menu" "new" "when" "object")}}
      {Lisp-Entry "Detail-Tree" #f 332 7 332 18 ("toplevel-controls?:" "431" "width:" "title:" ":icons" "portfolio:" "Tree-View")}}})
"Details-Card"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "details" "Details-Card.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.details.Details-Card" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Details-Card" #f 47 7 47 19 ("toplevel-controls?:" "title:" "element" "details" "content" "name:" "vscroll?:" "hscroll?:" "document" "style:" "fill" "layout-type:" "Layout-View")}}})
"Details-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "choosers" "Details-Chooser.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.choosers.Details-Chooser" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Details-Chooser" #f 48 7 48 22 ("on-cancel" "193" "cancel" "default?:" "on-ok" ":host" "363" "109" "ok" "270" "348" "6" "show-unfocused-selection?:" "focus-selects-all?:" "text" "scroller" "21" "40" "318" "155" "column-size" "on-width" "90" "width" "on-filled" "47" "321" "filled" "110" "300" "8" "size-label" "on-hide" "123" "hide" "on-show" "95" "show" "on-move-down" "61" "move-down" "on-move-up" "24" "80" "move-up" "200" "width:" "display-images?:" "toplevel-controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-selection-change" "selection-handler:" "on-action" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "2" "top-padding:" "detail" "filled-column:" "details-tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "254" "171" "33" "details-border" "Label" "name:" "Font" "font:" "16" "191" "9" "10" "Point" "position:" "title:" "400" "282" "Dimension" "size:" "View")
        {Lisp-Entry "reference" #f 51 12 51 21 ("set-reference" "get-reference")}
        {Lisp-Entry "details" #f 52 12 52 19 ("set-details" "get-details")}
        {Lisp-Entry "defaults" #f 54 12 54 20 ("set-defaults" "get-defaults")}
        {Lisp-Entry "finish" #f 81 11 81 17 ("acquire-focus" "update-buttons" "setup-selection" "setup-details" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-reference" #f 95 18 95 31 ("reference")}
        {Lisp-Entry "set-reference" #f 99 18 99 31 ("reference" "set!" "value")}
        {Lisp-Entry "get-details" #f 103 18 103 29 ("details")}
        {Lisp-Entry "set-details" #f 107 18 107 29 ("details" "set!" "value")}
        {Lisp-Entry "get-defaults" #f 112 18 112 30 ("defaults")}
        {Lisp-Entry "set-defaults" #f 117 18 117 30 ("defaults" "set!" "value")}
        {Lisp-Entry "get-tree" #f 121 11 121 19 ("details-tree" "'details-tree" "locate")}
        {Lisp-Entry "get-text" #f 125 11 125 19 ("text" "column-size" "locate")}
        {Lisp-Entry "host-title" #f 134 16 134 26 ()}
        {Lisp-Entry "host-position" #f 138 16 138 29 ("300" "450" "Point")}
        {Lisp-Entry "host-size" #f 142 16 142 25 ("120" "302" "Dimension")}
        {Lisp-Entry "on-action" #f 151 11 151 20 ("update-buttons" "toggle-displayed?" "Check-Box" "is?" "when" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-selection-change" #f 158 11 158 30 ("update-details" "enter-width" "update-buttons" "first" "details" "element" "essay" "old-detail" "get-old" "old" "let*" "evt")}
        {Lisp-Entry "on-move-up" #f 166 11 166 21 ("set-single-selection" "acquire-focus" "setup-details" "1" "-" "insert!" "remove!" "set!" "details" "element" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-move-down" #f 177 11 177 23 ("set-single-selection" "acquire-focus" "setup-details" "1" "+" "insert!" "remove!" "set!" "details" "element" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-show" #f 188 11 188 18 ("update-buttons" "toggle-displayed?" "set-checked?" "acquire-focus" "get-row" "get-user-data" "checkbox" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-hide" #f 198 11 198 18 ("update-buttons" "toggle-displayed?" "set-checked?" "acquire-focus" "get-row" "get-user-data" "checkbox" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-filled" #f 208 11 208 20 ("change-filled" "evt")}
        {Lisp-Entry "on-width" #f 212 11 212 19 ("Label" "name:" "Font" "set-detail-font" "set-filled?" "enter-width" "details" "element" "essay" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-reset" #f 222 11 222 19 ("on-reset" "'on-reset" "unimplemented" "evt")}
        {Lisp-Entry "on-return-press" #f 227 11 227 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" #f 233 11 233 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "setup-details" #f 243 11 243 24 ("details" "list" "children:" "add-row" "user-data:" "color:" "get-displayed?" "checked?:" ":enabled?" "title:" ":outline" "parent:" "font:" "Check-Box" "checkbox" "Label" "Label-Bold" "Font" "get-filled?" "if" "font" "'mandatory" "neq?" "enabled?" "Black" "name:" "Color" "color" "4" "Rect" "layout-insets:" "fill" "'fill" "layout-type:" "Layout-View" "new" "layout" "0" "border" "let*" "reference" "get-name" "assoc" "mandatory" "width" "title" "name" "bind" "detail" "for-each" "remove-every-row" "function" "with-update-locked" "tree")}
        {Lisp-Entry "setup-selection" #f 260 11 260 26 ("0" "list" "set-selection" "details" "when" "tree")}
        {Lisp-Entry "update-buttons" #f 270 11 270 25 ("defaults" "reset" "'reset" "'mandatory" "neq?" "and" "get-displayed?" "not" "1" "-" "<" "0" ">" "reference" "get-name" "assoc" "mandatory" "width" "title" "name" "bind" "details" "element" "detail" "let" "hide" "'hide" "show" "'show" "move-down" "'move-down" "move-up" "'move-up" "locate" "set-enabled?" "begin" "null?" "if" "get-visible-count" "count" "get-single-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "update-details" #f 290 11 290 25 ("get-filled?" "set-selected?" "get-width" "->string" "details" "element" "detail" "set-string-content" "set-enabled?" "begin" "null?" "if" "get-text" "text" "'width" "width" "'filled" "filled" "size-label" "'size-label" "locate" "label" "get-tree" "get-single-selection" "selection" "let")}
        {Lisp-Entry "toggle-displayed?" #f 317 11 317 28 ("not" "set-displayed?" "get-displayed?" "visible?" "get-user-data" "detail" "let*" "checkbox")}
        {Lisp-Entry "enter-width" #f 328 11 328 22 ("parse-integer" "set-width" "throw-cancel" "select-all" "acquire-focus" "get-message" "message-box" "err" "Parse-Error" "catch" "get-string-content" "content" "get-text" "text" "get-tree" "tree" "let*" "when" "edited-detail")}
        {Lisp-Entry "set-detail-font" #f 341 11 341 26 ("set-font" "get-user-data" "checkbox" "details" "find" "get-row" "row" "let*" "font" "detail" "tree")}
        {Lisp-Entry "find-filled" #f 352 11 352 22 ("details" "get-filled?" "detail" "function" "find-if")}
        {Lisp-Entry "change-filled" #f 358 11 358 24 ("Label-Bold" "Label" "name:" "Font" "set-detail-font" "set-filled?" "neq?" "when" "find-filled" "filled" "details" "element" "essay" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "get-modal-result" #f 377 11 377 27 ("get-output" "put" "Check-Box" "is?" "when" "get-user-data" "checkbox" "let" "rank" "row" "function" "for-each-row" "enter-width" "List-Factory" "new" "details" "element" "essay" "detail" "get-single-selection" "selection" "get-tree" "tree" "let*")}}}})
"Details-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Details-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Details-Row" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Details-Row" #f 46 7 46 18 ("Combo-Row")
        {Lisp-Entry "all" #f 49 12 49 15 ("generate")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("choose" "'choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "present" #f 67 11 67 18 ("format" "not" "if" "value")}
        {Lisp-Entry "combo-choose" #f 78 11 78 23 ("focus-editor" "enter-edited-value" "set-edited-value" "get-edited-value" "details:" "all" "all:" "Details-Chooser" "get-modal" "details" "let")}
        {Lisp-Entry "get-edited-value" #f 91 11 91 27 ("=" "empty-string?" "or" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" #f 98 11 98 27 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Details-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Details-Tree.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Details-Tree" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Details-Tree" #f 47 7 47 19 ("on-selection-change" ":self" "Event-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" ":icons" "portfolio:" "reorderable?:" "draggable?:" "Components-Tree")
        {Lisp-Entry "base" #f 50 12 50 16 ("generate")}
        {Lisp-Entry "details" #f 51 12 51 19 ("generate")}
        {Lisp-Entry "branch-changed" #f 63 11 63 25 ("update")}
        {Lisp-Entry "selection-changed" #f 67 11 67 28 ("generate-event?:" "row-rank" "list" "set-selection" "unspecified" "component-row" "row" "if" "set-client" "determine-client" "parent?" "client" "receive" "when" "car" "component" "let" "self" "eq?" "not" "or" "unless" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "selection-changed" #f 83 11 83 28 ("set-client" "generate-event?:" "set-selection" "Group" "is?" "not" "or" "when" "car" "component" "let" "focus?" "force-parent?" "origin" "old" "selection")}
        {Lisp-Entry "determine-client" #f 90 11 90 27 ("values" "null?" "or" "get-addable-classes" "and" "if" "get-parent" "parent" "let" "force-parent?" "component")}
        {Lisp-Entry "update" #f 102 11 102 17 ("insert-rows" "setup-columns" "function" "with-update-locked" "selected-components" "selected-components:" "get-expand-state" "expand-state" "expand-state:")}
        {Lisp-Entry "setup-columns" #f 109 11 109 24 ("width:" "title:" "name:" "Tree-Label-Column" "class:" "self" "context:" "add-column" "set-width" "set-title" "set-name" "get-node-column" "column" "begin" "when" "detail-presentation" "either" "error" "category-field" "property" "split-detail-path" "title" "name" "ignore" "receive" "filled?" "width" "path" "bind" "detail" "function" "for-each" "first?" "node-column" "get-name" "null?" "not" "or" "if" "preserve-node-column?:" "remove-columns" "set-filled-column" "get-addable-details" "details" "get-addable-base" "client" "essay" "base" "set!" "get-header" "header" "let")}
        {Lisp-Entry "insert-rows" #f 138 11 138 22 ("update-selection" "insert-components" "get-recursive-details?" "recursive?" "let" "client" "when" "remove-every-row" "selected-components" "expand-state")}
        {Lisp-Entry "insert-components" #f 146 11 146 28 ("get-presentation" "key:" "<" "sort" "sort-components?" "if" "insert-component" "Group" "is?" "unless" "child" "function" "for-each" "get-components" "components" "let" "recursive?" "father" "component")}
        {Lisp-Entry "insert-component" #f 156 29 156 45 ("insert-components" "user-data:" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "cons" "children" "title" "value" "property" "split-detail-path" "ignore" "name" "receive" "filled?" "width" "path" "Tree-Label" "if" "detail" "function" "map" "labels" "image:" "title:" "Tree-Node" "new" "node" "get-component-image" "ni" "present-property" "nt" "read-property" "nv" "category-field" "np" "car" "nn" "let*" "filled" "name-info" "set!" "not" "is?" "based?" "rest" "first" "bind" "details" "base" "and" "when" "row" "let" "recursive?" "father" "component")}
        {Lisp-Entry "split-detail-path" #f 185 11 185 28 ("child" "essay" "follow-submodels" "reverse!" "cons" "car" "string?" "subpath" "name" "title" "bind" "reverse" "reversed" "let" "values" "symbol?" "if" "path" "component" "base")}
        {Lisp-Entry "follow-submodels" #f 194 11 194 27 ("cdr" "car" "follow-submodels" "else" "get-class-form" "child" "get-model" "symbol?" "null?" "cond" "path" "model")}
        {Lisp-Entry "present-location" #f 203 11 203 27 ("get-presentation" "localize" "ascendant" "function" "map" "join" "null?" "if" "collect-ascendants" "cdr" "ascendants" "let" "component")}
        {Lisp-Entry "on-designer" #f 215 11 215 22 ("value:" "property:" "component:" "property-change" ":property-change" "child-remove" ":child-remove" "parent:" "child:" "get-property" "child-add" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "child-add" #f 222 11 222 20 ("insert-component" "function" "with-update-locked" "client" "neq?" "Group" "is?" "or" "unless" "parent" "child")}
        {Lisp-Entry "child-remove" #f 229 11 229 23 ("remove-row" "function" "with-update-locked" "when" "component-row" "row" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "child")}
        {Lisp-Entry "property-change" #f 238 11 238 26 ("invalidate-cell" "set-title" "present-property" "title" "get-cell-data" "data" "Cell" "new" "cell" "let*" "get-user-data" "eq?" "rank" "row" "function" "for-each-visible-row" "when" "car" "key:" "field-name" "details" "find" "col" "let" "client" "get-parent" "neq?" "Group" "is?" "or" "unless" "value" "property" "component")}}}})
"Dialog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Dialog.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Dialog" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Dialog" #f 44 7 44 13 ("Overlapped")
        {Lisp-Entry "sizable?" #f 47 12 47 20 ("set-sizable?" "get-sizable?")}
        {Lisp-Entry "closable?" #f 48 12 48 21 ("set-closable?" "get-closable?")}
        {Lisp-Entry "new-root" #f 51 11 51 19 ("offscreen?:" "Dialog-Host" "new")}
        {Lisp-Entry "get-sizable?" #f 60 11 60 23 ("sizable?")}
        {Lisp-Entry "set-sizable?" #f 64 11 64 23 ("sizable?" "set!" "value")}
        {Lisp-Entry "get-closable?" #f 68 11 68 24 ("closable?")}
        {Lisp-Entry "set-closable?" #f 72 11 72 24 ("closable?" "set!" "value")}
        {Lisp-Entry "on-close" #f 81 11 81 19 ("root" "cancel-modal" "processed" "closable?" "not" "if" "evt")}
        {Lisp-Entry "destroy" #f 87 11 87 18 ("nextmethod" "root" "destroy-modal")}}}})
"Dialog-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Dialog-Actions.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Dialog-Actions" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Dialog-Actions" #f 45 7 45 21 ("Actions")}}})
"Dialog-Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "hosting" "Dialog-Host.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.hosting.Dialog-Host" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Dialog-Host" #f 47 7 47 18 ("Host-View")
        {Lisp-Entry "modal-done?" #f 50 8 50 19 ()}
        {Lisp-Entry "modal-closed?" #f 51 8 51 21 ()}
        {Lisp-Entry "modal-result" #f 52 8 52 20 ()}
        {Lisp-Entry "modal-signal" #f 53 8 53 20 ()}
        {Lisp-Entry "modal-action" #f 54 8 54 20 ()}
        {Lisp-Entry "processing-modal?" #f 62 18 62 35 ("modal-done?" "not")}
        {Lisp-Entry "destroy-modal" #f 71 11 71 24 ("modal-done?" "modal-result" "modal-closed?" "set!")}
        {Lisp-Entry "class-actions" #f 82 11 82 24 ("nextmethod" "dialog" "'dialog" "find-actions" "cons")}
        {Lisp-Entry "on-ok" #f 92 18 92 23 ("get-modal-result" "end-modal" "validate-dialog" "evt")}
        {Lisp-Entry "on-cancel" #f 97 18 97 27 ("cancel-modal" "evt")}
        {Lisp-Entry "validate-dialog" #f 106 11 106 26 ("validate-dialog" "guest" "when")}
        {Lisp-Entry "get-modal-result" #f 111 11 111 27 ("guest" "get-modal-result")}
        {Lisp-Entry "process-modal" #f 115 18 115 31 ("modal-action" "close" "enable-window" "modal-result" "else" "signal" "modal-signal" "throw-cancel" "modal-closed?" "cond" "process-events" "Cancel-Signal" "Modal-Done" "catch" "function" "execute-event" "show" "update-windowing-actions" "self" "set-current-modal" "modal-done?" "set!" "begin" "unwind-protect" "disable-window" "when" "player" "preserved" "get-player" "current-modal" "essay" "either" "overlapped" "get-toplevel" "toplevel" "get-application" "application" "let*" "prog1" "release-captured-view" "close-popups")}
        {Lisp-Entry "end-modal" #f 156 18 156 27 ("modal-done" "modal-result" "modal-closed?" "set!" "result")}
        {Lisp-Entry "signal-modal" #f 162 18 162 30 ("modal-done" "modal-signal" "set!" "signal")}
        {Lisp-Entry "cancel-modal" #f 167 18 167 30 ("Cancel-Signal" "new" "signal-modal")}
        {Lisp-Entry "close-modal" #f 171 18 171 29 ("modal-done" "modal-action" "modal-result" "modal-closed?" "set!" "action")}}
      {Lisp-Entry "Modal-Done" #f 178 7 178 17 ("Signal")}
      {Lisp-Entry "modal-done" #f 181 13 181 23 ("Modal-Done" "new" "throw")}}})
"Diff-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "diff" "text" "Diff-Text-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.language.diff.text.Diff-Text-Preferences" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Diff-Text-Preferences" #f 47 7 47 28 ("Dark-Red" "remove-color:" "Dark-Green" "add-color:" "Dark-Purple" "diff-color:" "Ochre" "name:" "Color" "file-color:" "title:" "Code-Text-Preferences")
        {Lisp-Entry "file-color" #f 50 12 50 22 ("generate")}
        {Lisp-Entry "diff-color" #f 51 12 51 22 ("generate")}
        {Lisp-Entry "add-color" #f 52 12 52 21 ("generate")}
        {Lisp-Entry "remove-color" #f 53 12 53 24 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 70 11 70 37 ("remove-color" "add-color" "diff-color" "file-color")}
        {Lisp-Entry "get-row-instance" #f 74 11 74 27 ("nextmethod" "else" "Color-Row" "new" "remove-color" "add-color" "diff-color" "file-color" "field-name" "case" "property")}}}})
"Diff-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "diff" "text" "Diff-Text-View.jazz"} 1226584778
    {Lisp-Entry "jazz.language.diff.text.Diff-Text-View" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Diff-Text-View" #f 45 7 45 21 ("Code-Text-View")
        {Lisp-Entry "external-name" #f 48 16 48 29 ("diff" "'diff" "rest")}
        {Lisp-Entry "preferences" #f 52 11 52 22 ("diff-text" "documents" "get-preferences")}
        {Lisp-Entry "install" #f 56 11 56 18 ("get-remove-color" "Remove" "'Remove" "get-add-color" "Add" "'Add" "get-diff-color" "Diff" "'Diff" "get-file-color" "color:" "Default" "'Default" "base:" "File" "'File" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "host-workspaces" #f 70 11 70 26 ("text")}
        {Lisp-Entry "headers" #f 79 12 79 19 ("list")}
        {Lisp-Entry "get-headers" #f 84 11 84 22 ("headers")}
        {Lisp-Entry "get-chapter-label" #f 88 11 88 28 ("nextmethod" "1" "+" "subseq" "if" "reversed?:" "find" "pos" "let" "header" "col" "string")}
        {Lisp-Entry "get-first-special?" #f 95 11 95 29 ()}
        {Lisp-Entry "colorize-syntax" #f 104 11 104 26 ("finish-current" "colorize-diff" "self" "new-colorizer" "colorizer" "let" "entries?" "entries?:" "recoloring?" "recoloring?:")}
        {Lisp-Entry "colorize-diff" #f 110 11 110 24 ("else" "Remove" "'Remove" "Add" "'Add" "Diff" "'Diff" "File" "'File" "0" "Cell" "new" "apply-coloring" "starts-with?" "or" "cond" "cardinality" "len" "get-string" "line" "let" "paragraph" "row" "function" "for-each-paragraph" "colorizer")}}}})
"Dimension-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Dimension-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Dimension-Row" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Dimension-Row" #f 45 7 45 20 ("Value-Row")
        {Lisp-Entry "present" #f 53 11 53 18 ("get-height" "get-width" "format" "size")}
        {Lisp-Entry "get-edited-value" #f 64 11 64 27 ("Dimension" "new" "height" "width" "bind" "editor" "get-string-content" "read-delimited-string" "list" "let")}
        {Lisp-Entry "edit" #f 71 11 71 15 ("get-tree" "expand/collapse" "get-height" "value" "get-width" "self" "add-row" "edit-in-cell")}
        {Lisp-Entry "close-editor" #f 79 11 79 23 ("remove-every-son" "nextmethod")}
        {Lisp-Entry "in-edition?" #f 85 11 85 22 ("0" "get-sons" "cardinality" ">" "nextmethod" "or")}}}})
"Directories-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Directories-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Directories-Request" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Directories-Request" #f 49 7 49 26 ("on-cancel" "694" "cancel" "default?:" "on-ok" ":host" "315" "610" "ok" "8" "770" "300" "6" "on-remove-directory" "123" "remove-directory" "on-add-directory" "95" "692" "add-directory" "on-move-down" "61" "move-down" "on-move-up" "24" "80" "691" "move-up" "400" "width:" "display-images?:" "toplevel-controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-selection-change" "selection-handler:" "on-action" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "2" "top-padding:" "directory" "filled-column:" "directories-tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "254" "671" "33" "directories-border" "Label" "name:" "Font" "font:" "16" "191" "9" "10" "Point" "position:" "title:" "350" "782" "Dimension" "size:" "View")
        {Lisp-Entry "directories" #f 52 12 52 23 ("generate")}
        {Lisp-Entry "edited-directory" #f 55 8 55 24 ()}
        {Lisp-Entry "finish" #f 75 11 75 17 ("acquire-focus" "update-buttons" "setup-selection" "setup-directories" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-tree" #f 89 11 89 19 ("directories-tree" "'directories-tree" "locate")}
        {Lisp-Entry "host-title" #f 98 16 98 26 ()}
        {Lisp-Entry "host-position" #f 102 16 102 29 ("300" "450" "Point")}
        {Lisp-Entry "host-size" #f 106 16 106 25 ("120" "302" "Dimension")}
        {Lisp-Entry "on-action" #f 115 11 115 20 ("update-buttons" "evt")}
        {Lisp-Entry "on-selection-change" #f 119 11 119 30 ("update-buttons" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-add-directory" #f 125 11 125 27 ("update" "list" "append" "directories" "set!" "choose-directory" "directory" "get-tree" "tree" "let" "evt")}
        {Lisp-Entry "on-remove-directory" #f 132 11 132 30 ("set-single-selection" "get-visible-count" "<" "when" "update" "remove" "set!" "directories" "element" "directory" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-move-up" #f 142 11 142 21 ("set-single-selection" "acquire-focus" "setup-directories" "1" "-" "insert!" "remove!" "set!" "directories" "element" "directory" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-move-down" #f 153 11 153 23 ("set-single-selection" "acquire-focus" "setup-directories" "1" "+" "insert!" "remove!" "set!" "directories" "element" "directory" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-reset" #f 165 11 165 19 ("on-reset" "'on-reset" "unimplemented" "evt")}
        {Lisp-Entry "on-return-press" #f 170 11 170 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" #f 176 11 176 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update" #f 186 11 186 17 ("get-tree" "setup-directories")}
        {Lisp-Entry "setup-directories" #f 190 11 190 28 ("directories" "user-data:" "present" "title:" "Tree-Node" "new" "list" "children:" "add-row" "directory" "for-each" "remove-every-row" "function" "with-update-locked" "tree")}
        {Lisp-Entry "setup-selection" #f 199 11 199 26 ("0" "list" "set-selection" "directories" "when" "tree")}
        {Lisp-Entry "update-buttons" #f 209 11 209 25 ("defaults" "reset" "'reset" "1" "-" "<" "0" ">" "directories" "element" "directory" "let" "remove-directory" "'remove-directory" "add-directory" "'add-directory" "move-down" "'move-down" "move-up" "'move-up" "locate" "set-enabled?" "begin" "null?" "if" "get-visible-count" "count" "get-single-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "edit-directory" #f 233 11 233 25 ("enter-directory" "selection")}
        {Lisp-Entry "enter-directory" #f 237 11 237 26 ()}
        {Lisp-Entry "get-modal-result" #f 246 11 246 27 ("get-output" "put" "get-user-data" "directory" "rank" "row" "function" "for-each-visible-row" "List-Factory" "new" "directories" "get-tree" "tree" "let" "enter-directory")}}}})
"Directories-Search"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Directories-Search.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Directories-Search" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Directories-Search" #f 50 7 50 25 ("extensions" "46" "48" "static-ext" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "show-unfocused-selection?:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "directories" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "Entry-Border" "Color" "border-color:" "solid" "border-type:" "19" "248" "83" "16" "60" "Dimension" "size:" "18" "13" "Point" "position:" "static-dir" "title:" "domain" "name:" "Search-View")
        {Lisp-Entry "search-targets" #f 74 11 74 25 ("thread" "function" "execute:" "self" "context:" "name:" "Thread" "new" "search-threaded" "targets")}
        {Lisp-Entry "search-threaded" #f 84 24 84 39 ("close-manager" "unregister-activity" "get-activity-manager" "manager" "when" "select-results" "get-search-targets" "get-output" "add-results" "text" "'text" "set-mode" "get-results" "results" "let" "search-in-directories" "List-Factory" "factory" "get-expression?" "expression?" "not-null?" "if" "effective-extensions" "'extensions" "append!" "apply" "->string" "extensions" "'directories" "locate" "get-string-content" "read-delimited-string" "Directory" "list" "function" "map" "directories" "get-search-reporter" "User-Reporter" "new" "reporter" "get-application" "appl" "let*" "targets")}
        {Lisp-Entry "on-action" #f 111 11 111 20 ("on-search" "evt")}
        {Lisp-Entry "get-tab-stops" #f 115 11 115 24 ("targets" "'targets" "extensions" "'extensions" "directories" "'directories" "locate" "list")}
        {Lisp-Entry "setup-search-reporter" #f 127 11 127 32 ("set-step" "1" "set-pos" "500" "0" "Range" "set-range" "set-infinite?" "count" "reporter")}}}})
"Directories-Search-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Directories-Search-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Directories-Search-Preferences" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Directories-Search-Preferences" #f 46 7 46 37 ("title:" "Search-View-Preferences")}}})
"Directory-Comparer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Directory-Comparer.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Directory-Comparer" #f 38 9 38 50 ("jazz")
      {Lisp-Entry "Directory-Comparer" #f 48 7 48 25 ("Tree-Comparer")
        {Lisp-Entry "scanned-date" #f 51 8 51 20 ()}
        {Lisp-Entry "create-item" #f 59 11 59 22 ("get-modification-time" "get-name" "make-item" "moniker")}
        {Lisp-Entry "get-item-type" #f 63 11 63 24 ("leaf" "'leaf" "File" "node" "'node" "Directory" "get-moniker" "typecase" "item")}
        {Lisp-Entry "get-item-content" #f 69 11 69 27 ("create-item" "length" "0" "naturals" "get-modification-time" "->string" "append" "make-item" "index" "moniker" "function" "map" "Directory-Group" "is?" "if" "leaves" "'leaves" "leaves?:" "nodes" "'nodes" "eq?" "nodes?:" "get-content" "content" "get-moniker" "parent" "let*" "kind" "item")}
        {Lisp-Entry "compare-leaf-values" #f 80 11 80 30 ("else" "set!" "time->seconds" ">" "scanned-date" "or" "timestamp" "'timestamp" "not" "leaf" "'leaf" "new-entry" "set-car!" "different?" "cond" "and" "when" "value2" "get-value" "value1" "let" "leaf-feedback" "has-differences?" "feedback" "check-algorithm" "ignored-extensions" "ignored-leaves" "ignored-nodes" "content2" "leaf2" "content1" "leaf1" "parent")}
        {Lisp-Entry "different?" #f 97 11 97 21 ("different-file-content-no-whitespace?" "whitespace" "get-moniker" "different-file-content?" "and" "content" "get-value" "different-times?" "timestamp" "'timestamp" "either" "case" "check-algorithm" "leaf2" "leaf1")}
        {Lisp-Entry "scanned-values" #f 109 11 109 25 ("scanned-date")}}}})
"Directory-Group"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "moniker" "Directory-Group.jazz"} 1226584782
    {Lisp-Entry "jazz.library.moniker.Directory-Group" #f 38 9 38 45 ("jazz")
      {Lisp-Entry "Directory-Group" #f 45 7 45 22 ("Directory")
        {Lisp-Entry "fold-literal" #f 48 11 48 23 ("path" ",path" "',path" "Directory-Group" "new")}
        {Lisp-Entry "print" #f 52 11 52 16 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "validate-component" #f 59 16 59 34 ("error" "Directory" "is-not?" "when" "dir" "function" "for-each" "lst")}
        {Lisp-Entry "get-protocol" #f 72 16 72 28 ("group" "'group")}
        {Lisp-Entry "get-modal" #f 77 16 77 25 ("get-list" "essay" "directories:" "Directories-Request" "get-modal" "Directory-Group" "new" "others" "actual" "bind-keywords" "rest")}
        {Lisp-Entry "new-moniker" #f 83 16 83 27 ("self" "new" "list")}
        {Lisp-Entry "present" #f 87 11 87 18 ("get-list" "format")}
        {Lisp-Entry "get-name" #f 96 11 96 19 ()}
        {Lisp-Entry "get-directory" #f 100 11 100 24 ("self")}
        {Lisp-Entry "get-content" #f 104 18 104 29 ("expand" "class-of" "new" "map" "and" "if" "string?" "some-string?" "key:" "symbol?" "some?" "some-symbol?" "get-name" "moniker" "function" "key" "nextmethod" "apply" "content" "let*" "rest")}
        {Lisp-Entry "get-modification-time" #f 118 11 118 32 ()}
        {Lisp-Entry "create" #f 122 18 122 24 ()}
        {Lisp-Entry "delete-directory" #f 127 18 127 34 ("empty-directory" "self" "when" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "iterate-directory" #f 138 18 138 35 ("parse" "iterate-directory-content" "directory" "'directory" "member?" "not" "and" "name" "Directory" "file" "'file" "get-name" "list" "if" "when" "File" "typecase" "element" "function" "for-each" "get-list" "items" "let" "ignored-directories" "ignored-directories:" "recursive?" "recursive?:" "directories?" "directories?:" "files?" "files?:" "full?" "full?:" "proc")}}}})
"Directory-Group-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Directory-Group-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Directory-Group-Row" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Directory-Group-Row" #f 47 7 47 26 ("Pathname-Row")
        {Lisp-Entry "initialize" #f 55 11 55 21 ("group" "'group" "editor" "set-protocol" "nextmethod" "apply" "others" "parameters" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" #f 66 11 66 23 ("focus-editor" "enter-edited-value" "Directory-Group" "new" "set-edited-value" "get-list" "essay" "directories:" "choose-directory" "directories" "get-edited-value" "actual" "let*")}}}})
"Directory-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Directory-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Directory-Request" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Directory-Request" #f 49 7 49 24 ("title:" "ok" "buttonbar" "name:" "Pathname-Request")
        {Lisp-Entry "host-title" #f 58 16 58 26 ()}
        {Lisp-Entry "update-content" #f 67 11 67 25 ("for-each" "remove-every-row" "function" "with-update-locked" "add-pathname" "pathname" "add" "define" "get-tree" "tree" "leaves?:" "nodes?:" "directory" "get-content" "directories" "let")}
        {Lisp-Entry "update-buttons" #f 79 11 79 25 ("directory?" "ok" "'ok" "locate" "set-enabled?" "selected-pathname" "pathname" "let" "nextmethod")}
        {Lisp-Entry "default-action" #f 90 11 90 25 ("down" "directory?" "cond" "selected-pathname" "pathname" "let")}}}})
"Directory-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Directory-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Directory-Row" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Directory-Row" #f 47 7 47 20 ("Pathname-Row")
        {Lisp-Entry "initialize" #f 55 11 55 21 ("dir" "'dir" "editor" "set-protocol" "nextmethod" "apply" "others" "parameters" "bind-keywords" "rest")}
        {Lisp-Entry "combo-choose" #f 66 11 66 23 ("focus-editor" "enter-edited-value" "set-edited-value" "choose-directory" "dir" "let")}}}})
"Dispatch-Designer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "designer" "Dispatch-Designer.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.designer.Dispatch-Designer" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Dispatch-Designer" #f 45 7 45 24 ("Designer")}
      {Lisp-Entry "Dispatch-Designer" #f 51 7 51 24 ("Designer")
        {Lisp-Entry "designers" #f 54 8 54 17 ()}
        {Lisp-Entry "initialize" #f 62 11 62 21 ("install-designers" "nextmethod" "apply" "rest")}
        {Lisp-Entry "install-designers" #f 72 11 72 28 ("install-designer" "install-designer?" "when" "level" "descendant" "function" "reference" "for-each-descendant")}
        {Lisp-Entry "install-designer?" #f 79 26 79 43 ("component")}
        {Lisp-Entry "get-designer-class" #f 83 26 83 44 ("Designer")}
        {Lisp-Entry "install-designer" #f 87 11 87 27 ("add-project-designer" "reference:" "form:" "get-designer-class" "new" "designer" "get-self-form" "form" "project" "class-of" "class" "let*" "component")}
        {Lisp-Entry "add-designer" #f 94 11 94 23 ("cons" "designers" "set!" "designer" "component")}
        {Lisp-Entry "remove-designer" #f 98 11 98 26 ("assq" "remove!" "designers" "set!" "component")}
        {Lisp-Entry "get-designer" #f 102 21 102 33 ("designers" "assq-value" "component")}
        {Lisp-Entry "for-each-designer" #f 106 11 106 28 ("designers" "designer" "component" "bind" "pair" "function" "for-each" "proc")}
        {Lisp-Entry "project-add" #f 113 21 113 32 ("add-designer" "Project" "is?" "when" "level" "descendant" "function" "for-each-descendant" "project")}
        {Lisp-Entry "project-remove" #f 120 21 120 35 ("cleanup-project-designers" "project")}
        {Lisp-Entry "set-name" #f 132 11 132 19 ("set-name" "" "apply" "find-modification-designer" "designer" "let" "others" "use-owner?" "bind-keywords" "rest" "name" "component")}
        {Lisp-Entry "set-property" #f 138 11 138 23 ("set-property" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "value" "property" "component")}
        {Lisp-Entry "add-child" #f 147 11 147 20 ("add-child" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "parent" "child")}
        {Lisp-Entry "remove-child" #f 156 11 156 23 ("remove-child" "" "get-project-designer" "designer" "let" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parent" "parent" "let*" "rest" "child")}
        {Lisp-Entry "instantiate-parcels" #f 166 11 166 30 ("instantiate-parcels" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent" "parcels")}
        {Lisp-Entry "move-components" #f 175 11 175 26 ("move-components" "" "get-project-designer" "designer" "rest" "nextmethod" "apply" "reference" "eq?" "if" "verify-name-conflicts" "package-components" "let*" "set-modified?" "descendant?:" "design-events?:" "name-resolution" "name-resolution:" "parcels" "instantiate-parcels" "prog1" "delete-components" "destination-owner" "get-parent" "find-modification-owner" "component" "function" "key:" "uniform" "owner" "let" "branch" "branch:" "destination" "components")}
        {Lisp-Entry "move-components" #f 191 11 191 26 ("set-modified?" "descendant?:" "design-events?:" "name-resolution:" "instantiate-parcels" "prog1" "delete-components" "verify-name-conflicts" "name-resolution" "package-components" "parcels" "let*" "branch" "branch:" "destination" "components")}
        {Lisp-Entry "cut-components" #f 204 11 204 25 ("cut-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "copy-components" #f 213 11 213 26 ("copy-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "paste-clipboard" #f 222 11 222 26 ("paste-clipboard" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent")}
        {Lisp-Entry "get-parents" #f 230 11 230 22 ("get-parent" "component" "function" "map" "components")}
        {Lisp-Entry "find-modification-designer" #f 241 11 241 37 ("get-designer" "my-designer??" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "use-owner?" "components")}
        {Lisp-Entry "find-modification-owner" #f 248 11 248 34 ("car" "error" "1" "length" ">" "map" "remove-duplicates" "owners" "let" "pair?" "get-parent" "install-designer?" "reference" "eq?" "or" "if" "component" "function" "find-owner-project" "letrec" "components")}
        {Lisp-Entry "save-designer" #f 267 21 267 34 ("designer" "project" "function" "for-each-designer" "save" "set!" "get-modified?" "when" "some-modified?" "let")}}}})
"Dispatcher"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "generic" "runtime" "Dispatcher.jazz"} 1226584774
    {Lisp-Entry "Dispatcher" #f 47 7 47 17 ("Object")
      {Lisp-Entry "dag-root" #f 50 12 50 20 ("generate")}
      {Lisp-Entry "Root-Signature" #f 53 14 53 28 ("root-signature" "'root-signature")}
      {Lisp-Entry "initialize" #f 57 11 57 21 ("Root-Signature" "Dispatch-Node" "new" "dag-root" "set!" "nextmethod")}
      {Lisp-Entry "insert-signature" #f 62 18 62 34 ("insert-node" "else" "proper-list?" "not" "type-name" "error" "locate-node" "cond" "standardize-signature" "let" "category" "signature" "procedure" "symbol")}
      {Lisp-Entry "standardize-signature" #f 74 11 74 32 ("List" "get-type" "essay" "get-typeref" "typeref" "let" "parameter" "function" "accumulate" "signature")}
      {Lisp-Entry "insert-node" #f 82 18 82 29 ("get-specific-nodes" "add-specific-node" "remove-specific-node" "add-generic-node" "remove-generic-node" "get-signature" "can-call-with?" "neq?" "and" "when" "specific" "generic" "function" "for-each" "Dispatch-Node" "new" "node" "gather-generics" "generics" "let*" "signature" "procedure")}
      {Lisp-Entry "remove-node" #f 99 18 99 29 ("remove-generic-node" "get-generic-nodes" "remove-specific-node" "get-specific-nodes" "add-generic-node" "add-specific-node" "specific" "generic" "function" "for-each" "node")}
      {Lisp-Entry "locate-node" #f 114 18 114 29 ("first" "get-signature" "equal?" "length" "1" "=" "and" "if" "gather-generics" "matching" "let" "signature")}
      {Lisp-Entry "gather-generics" #f 122 18 122 33 ("dag-root" "cons" "memq?" "not" "and" "get-specific-nodes" "set!" "can-call-with?" "when" "child-node" "for-each" "no-match?" "walk-node" "function" "iter" "letrec" "generics" "let" "parameter-types")}
      {Lisp-Entry "find-generics" #f 138 18 138 31 ("dag-root" "car" "eq?" "if" "gather-generics" "generics" "let" "parameter-types")}
      {Lisp-Entry "get-node-procedure" #f 145 18 145 36 ("get-procedure" "node")}}
    {Lisp-Entry "Dispatch-Node" #f 154 7 154 20 ("Object")
      {Lisp-Entry "procedure" #f 157 12 157 21 ("generate")}
      {Lisp-Entry "signature" #f 158 12 158 21 ("generate")}
      {Lisp-Entry "generic-nodes" #f 159 12 159 25 ("generate")}
      {Lisp-Entry "specific-nodes" #f 160 12 160 26 ("generate")}
      {Lisp-Entry "initialize" #f 163 11 163 21 ("generic-nodes" "signature" "procedure" "set!" "nextmethod" "gen" "sig" "proc")}
      {Lisp-Entry "print" #f 170 11 170 16 ("type-name" "map" "format" "Root-Signature" "signature" "eq?" "if" "function" "self" "print-unreadable" "readably" "printer")}
      {Lisp-Entry "can-call-with?" #f 178 11 178 25 ("null?" "finally" "return" "Java" "can-cast-into?" "not" "and" "when" "r2" "parameter-type" "r1" "remainder" "in" "data-type" "for" "loop" "Root-Signature" "signature" "eq?" "if" "sig")}
      {Lisp-Entry "add-generic-node" #f 189 11 189 27 ("cons" "set-generic-nodes" "equal?" "generic" "function" "generic-nodes" "find-in" "unless" "get-signature" "sig" "let" "node")}
      {Lisp-Entry "add-specific-node" #f 197 11 197 28 ("cons" "set-specific-nodes" "equal?" "specific" "function" "specific-nodes" "find-in" "unless" "get-signature" "sig" "let" "node")}
      {Lisp-Entry "remove-generic-node" #f 205 11 205 30 ("generic-nodes" "remove" "set-generic-nodes" "generic")}
      {Lisp-Entry "remove-specific-node" #f 209 11 209 31 ("specific-nodes" "remove" "set-specific-nodes" "specific")}}})
"Display-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "display" "Display-Column.jazz"} 1226584781
    {Lisp-Entry "jazz.library.display.Display-Column" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Display-Column" #f 44 7 44 21 ("Object")
        {Lisp-Entry "displayer" #f 47 8 47 17 ()}
        {Lisp-Entry "factory" #f 48 8 48 15 ()}
        {Lisp-Entry "content" #f 49 8 49 15 ()}
        {Lisp-Entry "current" #f 50 8 50 15 ()}
        {Lisp-Entry "border" #f 51 8 51 14 ("0")}
        {Lisp-Entry "border-after" #f 52 8 52 20 ("0")}
        {Lisp-Entry "minimum" #f 53 8 53 15 ("0")}
        {Lisp-Entry "line" #f 54 8 54 12 ("0")}
        {Lisp-Entry "empty?" #f 55 8 55 14 ()}
        {Lisp-Entry "initialize" #f 63 11 63 21 ("minimum~self" "border-after~self" "border~self" "List-Factory" "new" "factory~self" "displayer~self" "set!" "nextmethod" "minimum" "minimum:" "border-after" "border-after:" "0" "border" "border:" "displayer")}
        {Lisp-Entry "get-border" #f 77 18 77 28 ("border")}
        {Lisp-Entry "set-border" #f 81 18 81 28 ("border" "set!" "value")}
        {Lisp-Entry "get-border-after" #f 85 18 85 34 ("border-after")}
        {Lisp-Entry "set-border-after" #f 89 18 89 34 ("border-after" "set!" "value")}
        {Lisp-Entry "get-empty?" #f 93 18 93 28 ("empty?")}
        {Lisp-Entry "output" #f 102 18 102 24 ("increase-line" "empty?" "set!" "when" "put-data" "fill-empty" "rest" "data")}
        {Lisp-Entry "put-data" #f 110 26 110 34 ("factory" "put" "rest" "data")}
        {Lisp-Entry "increase-line" #f 114 26 114 39 ("line" "increase!")}
        {Lisp-Entry "get-next" #f 118 21 118 29 ("cdr" "set!" "car" "prog1" "current" "when")}
        {Lisp-Entry "rewind" #f 124 18 124 24 ("current" "factory" "get-output" "content" "set!")}
        {Lisp-Entry "fill-empty" #f 129 18 129 28 ("increase!" "factory" "put" "line" "<" "while" "displayer" "get-line" "main" "let")}
        {Lisp-Entry "replace-empty" #f 136 21 136 34 ("cdr" "set!" "set-car!" "empty-replacement" "replacement" "null?" "if" "current" "car" "data" "let" "previous-data" "previous-column")}
        {Lisp-Entry "empty-replacement" #f 147 29 147 46 ("previous-data" "previous-column")}
        {Lisp-Entry "prepare-print" #f 156 26 156 39 ("rewind")}
        {Lisp-Entry "print-to" #f 160 26 160 34 ("border-after" "border" "format" "printer" "previous-data" "previous-column" "data")}}}})
"Display-Outline"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "outline" "Display-Outline.jazz"} 1226584782
    {Lisp-Entry "jazz.library.outline.Display-Outline" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Display-Outline" #f 43 7 43 22 ("Outline")
        {Lisp-Entry "first-displayed" #f 46 8 46 23 ("generate")}
        {Lisp-Entry "first-displayed-rank" #f 47 8 47 28 ("generate" "0")}
        {Lisp-Entry "first-displayed-offset" #f 48 8 48 30 ("generate" "0")}
        {Lisp-Entry "get-row" #f 56 11 56 18 ("nextmethod" "-" "get-row-from" "first-displayed-rank" ">=" "first-displayed" "and" "if" "n")}
        {Lisp-Entry "call-with-v->row" #f 62 11 62 27 ("when" "get-next" "set!" "increase!" "<" "or" "and" "while" "row-spacing" "get-height" "bottom" "first-displayed-offset" "top" "0" "first-displayed-rank" "rank" "first-row" "row" "+" "-" ">=" "displayed?" "let*" "first-displayed" "if" "proc" "scrolled" "v")}
        {Lisp-Entry "update-displayed" #f 87 11 87 27 ("first-displayed-offset" "first-displayed-rank" "first-displayed" "row-spacing" "increase!" "set!" "not" "if" "get-next" "next" ">" "while" "get-height" "-" "bottom" "when" "v" "0" "rank" "root-row" "first-visible-son" "row" "let" "display-v")}
        {Lisp-Entry "follow" #f 106 11 106 17 ("update-displayed" "not" "when" "-" "follow-backward" "<" "follow-forward" "0" ">" "cond" "succeeded?" "let" "v" "display-v")}
        {Lisp-Entry "follow-forward" #f 117 11 117 25 ("decrease!" "first-displayed-rank" "get-next" "set!" "increase!" "begin" "<" "if" "first-displayed-offset" "-" "remaining" "row-spacing" "first-displayed" "get-height" "+" "height" "let*" "0" ">" "while" "v")}
        {Lisp-Entry "follow-backward" #f 132 11 132 26 ("row-spacing" "get-height" "-" "1" "+" "first-displayed-rank" "continuation-return" "not" "get-previous" "first-displayed" "set!" "decrease!" "begin" "first-displayed-offset" "<=" "if" "0" ">" "while" "return" "function" "continuation-capture" "v")}}}})
"DnD"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dnd" "DnD.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dnd.DnD" #f 37 9 37 24 ("jazz")
      {Lisp-Entry "DnD" #f 45 7 45 10 ("Object")
        {Lisp-Entry "source" #f 48 8 48 14 ("generate")}
        {Lisp-Entry "target" #f 49 8 49 14 ("generate")}
        {Lisp-Entry "view" #f 50 8 50 12 ("generate")}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("source~self" "set!" "nextmethod" "source" "source:")}
        {Lisp-Entry "print" #f 58 11 58 16 ("view" "target" "source" "format" "function" "self" "print-unreadable" "readably" "printer")}}}})
"Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Doc" #f 11 9 11 25 ("jazz")
      {Lisp-Entry "Doc" #f 21 7 21 10 ("Component")
        {Lisp-Entry "title" #f 24 12 24 17 ("generate")}
        {Lisp-Entry "description" #f 25 12 25 23 ("generate")}
        {Lisp-Entry "construct-literal" #f 29 16 29 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "install-child" #f 33 11 33 24 ("nextmethod" "else" "set-description" "description" "get-model-name" "case" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "get-catalog" #f 44 26 44 37 ("parent" "get-catalog")}
        {Lisp-Entry "set-catalog" #f 48 26 48 37 ("cat")}
        {Lisp-Entry "get-effective-title" #f 57 18 57 37 ("name" "->string" "title" "either")}
        {Lisp-Entry "update-indexes" #f 66 26 66 40 ("self" "table-add" "name" "not-null?" "when" "references-index" "definitions-index")}
        {Lisp-Entry "print-catalog" #f 71 26 71 39 ("description" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-documentation" #f 83 18 83 35 ("get-definitions" "self" "get-parent" "eq?" "doc" "function" "find-if" "get-catalog" "catalog" "let" "symbol")}
        {Lisp-Entry "present" #f 95 26 95 33 ("description")}
        {Lisp-Entry "present-text" #f 99 26 99 38 (",@paragraphs" "form->node" "->jml" "paragraphs" "tag" "bind" "description" "when")}
        {Lisp-Entry "Red-Ball" #f 111 12 111 20 ()}
        {Lisp-Entry "property-presentation" #f 120 16 120 37 ("nextmethod" "else" "description" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 126 11 126 27 ("nextmethod" "else" "Doc-Text-Row" "description" "String-Row" "new" "title" "field-name" "case" "property")}
        {Lisp-Entry "display-property?" #f 133 11 133 28 ("visible?" "children" "before" "name-info" "field-name" "memq?" "not" "property")}
        {Lisp-Entry "get-categorized-properties" #f 137 11 137 37 ("description" "title")}
        {Lisp-Entry "get-addable-classes" #f 141 11 141 30 ("Method-Doc" "Syntax-Doc" "Constant-Doc" "Interface-Doc" "Class-Doc" "Package-Doc" "Concept-Doc" "Section-Doc" "list")}}}})
"Doc-Catalog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "catalog" "Doc-Catalog.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.catalog.Doc-Catalog" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Doc-Catalog" #f 45 7 45 18 ("Component-Catalog")
        {Lisp-Entry "project" #f 48 8 48 15 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("project~self" "set!" "nextmethod" "project" "client" "name")}
        {Lisp-Entry "get-project" #f 61 18 61 29 ("project")}}}})
"Doc-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "tools" "Doc-Editor.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.tools.Doc-Editor" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Doc-Editor" #f 50 7 50 17 ("card" "card-border" "second" "390" "card-contour" "183" "width:" "descendant" "descendants" "header" "fill" "content" "vscroll?:" "hscroll?:" "document" "scroller" "entry" "style:" "edge" "border-type:" "first" "366" "255" "descendants-border" "250" "division:" "horz" "orientation:" "split" "state:" "center" "367" "splitter" "on-edit" "tail" "edit" "on-build" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "build" "6" "flow" "north" "location:" "33" "300" "toolbar" "name:" "0" "2" "Rect" "layout-insets:" "border" "layout-type:" "400" "650" "Dimension" "size:" "title:" "Editor-View")
        {Lisp-Entry "entry" #f 53 12 53 17 ("set-entry" "get-entry")}
        {Lisp-Entry "type" #f 56 8 56 12 ()}
        {Lisp-Entry "location" #f 57 8 57 16 ()}
        {Lisp-Entry "expression" #f 58 8 58 18 ()}
        {Lisp-Entry "text-object" #f 59 8 59 19 ()}
        {Lisp-Entry "text-location" #f 60 8 60 21 ()}
        {Lisp-Entry "form-model" #f 81 11 81 21 ("nextmethod" "else" "Docs-Tree" "descendants" "get-name" "case" "form")}
        {Lisp-Entry "install" #f 87 11 87 18 ("self" "set-editor" "categorized" "'categorized" "card" "'card" "get-tree" "set-filter" "descendant" "'descendant" "descendants" "'descendants" "locate" "child" "set-title" "nextmethod" "rest")}
        {Lisp-Entry "focus-document" #f 95 11 95 25 ("descendant" "'descendant" "descendants" "'descendants" "locate" "child" "acquire-focus")}
        {Lisp-Entry "get-tree" #f 104 18 104 26 ("tree" "descendants" "locate")}
        {Lisp-Entry "host-icon" #f 113 16 113 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 117 16 117 26 ()}
        {Lisp-Entry "host-position" #f 121 16 121 29 ("59" "52" "Point")}
        {Lisp-Entry "host-size" #f 125 16 125 25 ("500" "800" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 129 11 129 26 ("home")}
        {Lisp-Entry "new-controller" #f 139 11 139 25 ("self" "Doc-Editor-Controller" "new")}
        {Lisp-Entry "Doc-Editor-Controller" #f 144 9 144 30 ("Editor-View-Controller")
          {Lisp-Entry "name-status" #f 147 13 147 24 ("document" "editor-title")}}
        {Lisp-Entry "resize-center" #f 156 11 156 24 ("card-contour" "'card-contour" "0" "descendants-border" "'descendants-border" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-build" #f 161 11 161 19 ("on-build" "'on-build" "unimplemented" "bell" "client" "null?" "if" "evt")}
        {Lisp-Entry "on-edit" #f 167 11 167 18 ("edit-form" "evt")}
        {Lisp-Entry "get-entry" #f 176 18 176 27 ("entry")}
        {Lisp-Entry "set-entry" #f 180 18 180 27 ("setup" "text-location" "text" "object" "location" "bind" "entry" "set!" "info")}
        {Lisp-Entry "setup" #f 186 11 186 16 ("text-location" "text-object" "expression" "location" "set!" "text-loc" "text" "object" "loc")}
        {Lisp-Entry "editor-title" #f 198 11 198 23 ("get-form" "get-origin" "get-base" "format" "null?" "if" "get-reference" "reference" "let")}}}})
"Doc-Insert"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Doc-Insert.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Doc-Insert" #f 11 9 11 32 ("jazz")
      {Lisp-Entry "Doc-Insert" #f 19 7 19 17 ("Doc")
        {Lisp-Entry "path" #f 22 12 22 16 ("generate")}}}})
"Doc-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "designer" "Doc-Text-Actions.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.designer.Doc-Text-Actions" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Doc-Text-Actions" #f 47 7 47 23 (":control" "Shortcut" "shortcut:" "on-parameter" ":focus" "Event-Handler" "action-handler:" "parameter" "name:" "Actions")}}})
"Doc-Text-List-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "designer" "Doc-Text-List-Row.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.designer.Doc-Text-List-Row" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Doc-Text-List-Row" #f 46 7 46 24 ("List-Row")
        {Lisp-Entry "get-subrow-class" #f 49 11 49 27 ("Doc-Text-Row")}}}})
"Doc-Text-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "designer" "Doc-Text-Row.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.designer.Doc-Text-Row" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Doc-Text-Row" #f 47 7 47 19 ("Formatted-Text-Row")
        {Lisp-Entry "new-editor" #f 55 11 55 21 ("editor-class" "new")}
        {Lisp-Entry "editor-class" #f 59 11 59 23 ("Doc-Text-View")}
        {Lisp-Entry "editor-height" #f 63 11 63 24 ("700")}}}})
"Doc-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "designer" "Doc-Text-View.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.designer.Doc-Text-View" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Doc-Text-View" #f 49 7 49 20 ("Text" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "4" "left-padding:" "Row-Formatted-Text-View")
        {Lisp-Entry "install" #f 56 11 56 18 ("Variable" "Code" "Dark-Blue" "Hyperlink" "Reference" "Purple" "Comment" "Dark-Red" "Color" "color:" "Title" "Font" "font:" "Text-Style" "add-style" "Heading3" "Heading2" "Heading1" "Default" "base:" "Heading0" "name:" "Format" "add-format" "nextmethod" "rest")}
        {Lisp-Entry "focus-actions" #f 81 11 81 24 ("nextmethod" "doc-text" "'doc-text" "find-actions" "cons")}
        {Lisp-Entry "get-context-menu" #f 91 11 91 27 ()}
        {Lisp-Entry "on-parameter" #f 95 11 95 23 ("12" "+" "get-end" "end" "copy" "start" "let" "1" "get-start" "-" "set-caret" "insert-string" "begin" "empty-selection?" "if" "evt")}}}})
"DocToHTML-Transformation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "transformation" "DocToHTML-Transformation.jazz"} 1226931364
    {Lisp-Entry "jazz.doc.transformation.DocToHTML-Transformation" #f 37 9 37 57 ("jazz")
      {Lisp-Entry "DocToHTML-Transformation" #f 43 7 43 31 ("JML-Transformation")
        {Lisp-Entry "<parameter>" #f 46 12 46 23 (",text" "get-child-text" "text" "let" "node")}
        {Lisp-Entry "<code>" #f 51 12 51 18 (",text" "get-child-text" "text" "let" "node")}
        {Lisp-Entry "<reference>" #f 56 12 56 23 (",text" ",name" "href:" "->string" "get-text" "if" "text" "first-child" "child" "format" "name" "'href" "get-property" "href" "let*" "node")}
        {Lisp-Entry "<header>" #f 64 12 64 20 (",text" "get-child-text" "text" "let" "node")}
        {Lisp-Entry "<node>" #f 69 12 69 18 ("->jml" "get-children" "map" "'node" "get-tag" "eq?" "JML-Element" "is?" "and" "if" "expand" "define" "node")}
        {Lisp-Entry "<definition>" #f 78 12 78 24 ("children->jml" ",title" "class:" "name" "'name" "->string" "'title" "get-property" "either" "title" "let" "node")}
        {Lisp-Entry "<properties>" #f 85 12 85 24 ("JML-Text" "is?" "if" "get-text" "get-children" "value" "property" "bind" "prop" "function" "map" "class:" "node")}
        {Lisp-Entry "<terminology>" #f 95 12 95 25 ("JML-Text" "is?" "get-text" "get-children" "bind" "definition" "function" "map" ",text" ",term" "if" "class:" "'text" "text" "'term" "get-property" "term" "let" "node")}
        {Lisp-Entry "<styled-table>" #f 109 12 109 26 ("children->jml" "properties->jml" ",style" "style:" "red" "'red" "1" "solid" "'solid" "format" "style" "let" "node")}}}})
"DocToText-Transformation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "transformation" "DocToText-Transformation.jazz"} 1226584778
    {Lisp-Entry "DocToText-Transformation" #f 37 7 37 31 ("JML-Transformation")
      {Lisp-Entry "<parameter>" #f 40 12 40 23 (",text" "Dark-Red" "color:" "get-child-text" "text" "let" "node")}
      {Lisp-Entry "<code>" #f 45 12 45 18 (",text" "Dark-Red" "color:" "get-child-text" "text" "let" "node")}
      {Lisp-Entry "<hyperlink>" #f 50 12 50 23 (",text" "Dark-Blue" "color:" "get-child-text" "text" "let" "node")}
      {Lisp-Entry "<node>" #f 55 12 55 18 ("children->jml" "bulleted?:" "node")}
      {Lisp-Entry "<properties>" #f 59 12 59 24 ("get-text" "get-children" "value" "property" "bind" "prop" "function" "map" "node")}
      {Lisp-Entry "<styled-table>" #f 69 12 69 26 ("children->jml" "properties->jml" ",style" "style:" "red" "'red" "1" "solid" "'solid" "format" "style" "let" "node")}}})
"Docked-Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "hosting" "Docked-Host.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.hosting.Docked-Host" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Docked-Host" #f 50 7 50 18 ("flow" "layout-type:" "22" "0" "Dimension" "size:" "tools" "name:" "Host-View")
        {Lisp-Entry "fullscreen?" #f 53 12 53 23 ("generate")}
        {Lisp-Entry "caption?" #f 54 12 54 20 ("generate")}
        {Lisp-Entry "zoomable?" #f 55 12 55 21 ("generate")}
        {Lisp-Entry "size-change" #f 68 11 68 22 ("invalidate-border" "invalidate-top" "nextmethod" "size")}
        {Lisp-Entry "on-close" #f 78 11 78 19 ("selection" "'selection" "first-child" "Pad-View" "close" "get-location" "set-location" "layout-view" "zoom" "'zoom" "set-mode" "begin" "Workspace-Splitter" "if" "when" "first-view" "other" "let" "Splitter-View" "is?" "cond" "get-toplevel" "set-parent" "set-visible?" "function" "with-locked-update" "grand" "get-parent" "parent" "get-host" "host" "let*" "evt")}
        {Lisp-Entry "on-close" #f 104 11 104 19 ("hide-splitted" "evt")}
        {Lisp-Entry "hide-splitted" #f 108 18 108 31 ("selection" "'selection" "first-child" "Pad-View" "close" "get-location" "set-location" "layout-view" "zoom" "'zoom" "set-mode" "begin" "Workspace-Splitter" "if" "when" "first-view" "other" "let" "Splitter-View" "is?" "cond" "get-toplevel" "set-parent" "set-visible?" "function" "with-locked-update" "grand" "get-parent" "parent" "get-host" "host" "let*")}
        {Lisp-Entry "mouse-activate?" #f 139 11 139 26 ()}
        {Lisp-Entry "activate-focus" #f 143 11 143 25 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "deactivate-focus" #f 148 11 148 27 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "install-tools" #f 158 11 158 24 ("22" "tools-width" "Dimension" "new" "set-size" "set-visible?" "layout-view" "set-parent" "tail" "'tail" "set-location" "tool" "function" "for-each" "'tools" "locate" "dest" "get-children" "tools" "let" "when" "get-tools-view" "view" "get-guest" "guest" "get-host" "host" "let*")}
        {Lisp-Entry "add-tool" #f 176 18 176 26 ("22" "get-children" "tools-width" "Dimension" "new" "set-size" "layout-view" "set-parent" "'tools" "locate" "tools" "let" "tool")}
        {Lisp-Entry "remove-tool" #f 184 18 184 29 ("22" "get-children" "tools-width" "Dimension" "new" "set-size" "layout-view" "set-parent" "'tools" "locate" "tools" "let" "tool")}
        {Lisp-Entry "tools-width" #f 192 11 192 22 ("get-size" "get-width" "increase!" "get-visible?" "when" "tool" "function" "for-each" "0" "total" "let" "tools")}
        {Lisp-Entry "redirect-handler" #f 204 11 204 27 ("get-guest" "guest" "get-host" "host" "let*" ":form" "eq?" "get-target-name" "name" "let" "nextmethod" "Item" "is?" "if" "sender" "handler")}
        {Lisp-Entry "layout" #f 220 11 220 17 ("else" "26" "2" "-" "25" "1" "layout-tools" "caption?" "Dimension" "new" "set-size" "0" "Point" "set-position" "set-visible?" "fullscreen?" "cond" "'tools" "locate" "tools" "get-height" "height" "get-width" "width" "let" "guest" "when")}
        {Lisp-Entry "layout-tools" #f 240 11 240 23 ("2" "0" "get-width" "3" "-" "max" "Point" "new" "set-position" "get-size" "size" "'tools" "locate" "tools" "let*" "width")}
        {Lisp-Entry "caption-rect" #f 252 11 252 23 ("24" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "top-rect" #f 256 11 256 19 ("25" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "invalidate-top" #f 265 11 265 25 ("top-rect" "invalidate-rect")}
        {Lisp-Entry "invalidate-caption" #f 269 11 269 29 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "Active-Start-Color" #f 278 14 278 32 ("252" "blue:" "234" "green:" "225" "red:" "Color")}
        {Lisp-Entry "Active-End-Color" #f 281 14 281 30 ("243" "blue:" "186" "green:" "153" "red:" "Color")}
        {Lisp-Entry "Inactive-Start-Color" #f 284 14 284 34 ("235" "blue:" "244" "green:" "245" "red:" "Color")}
        {Lisp-Entry "Inactive-End-Color" #f 287 14 287 32 ("Medium" "name:" "Color")}
        {Lisp-Entry "Frame-Color" #f 290 14 290 25 ("blue:" "green:" "128" "red:" "Color")}
        {Lisp-Entry "draw" #f 294 11 294 15 ("get-width" "line" "increase!" "7" "21" "draw-text" "75" "100" "Black" "set-text-color" "Label" "Font" "set-font" "5" "3" "get-application" "get-icons-cache" "draw-image" "stroke" "cairo-line-to" "cairo-move-to" "not" "set-line-width" "184" "215" "220" "204" "blue:" "225" "green:" "230" "red:" "Dark" "name:" "Color" "set-color" "vertical" "'vertical" "direction:" "Inactive-End-Color" "Active-End-Color" "Inactive-Start-Color" "Active-Start-Color" "if" "0" "list" "Rect" "new" "gradient-fill" "and" "when" "bottom" "right" "24" "height" "37" "get-text-width" "+" "width" "top" ".5" "-" "left" "let*" "selected?" "first?" "get-guest" "class-of" "host-icon" "icon" "get-title" "title" "docked" "function" "for-each" "first" "1" "h" "Frame-Color" "frame-rect" "collect-all" "all" "get-focused-host" "self" "eq?" "focused?" "get-bounds" "bounds" "get-host" "host" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "mouse-down" #f 343 11 343 21 ("focus-host" "set-selection" "Pad-View" "is?" "get-host" "get-parent" "parent" "let" "in-rect?" "when" "rect" "docked" "function" "for-each-docked" "pos")}
        {Lisp-Entry "toggle-docked" #f 353 11 353 24 ("select-next" "function" "with-locked-update" "get-h" "<" "text-width" "28" "+" "h" "Label" "name:" "Font" "font" "get-title" "localize" "title" "Pad-View" "is?" "when" "get-parent" "parent" "get-host" "host" "let*" "pos")}
        {Lisp-Entry "double-click" #f 366 11 366 23 ("unzoom" "zoom" "split" "'split" "get-state" "eq?" "function" "with-locked-update" "Splitter-View" "splitter" "let" "get-application" "toggle-full-screen" "shift-down?" "Pad-View" "is?" "if" "target" "get-parent" "parent" "get-host" "host" "let*" "zoomable?" "when" "pos")}
        {Lisp-Entry "for-each-docked" #f 387 11 387 26 ("increase!" "Rect" "new" "23" "height" "37" "Label" "name:" "Font" "text-width" "width" "top" "1" "+" "if" "left" "eq?" "first?" "get-title" "title" "docked" "function" "for-each" "first" "0" "h" "collect-all" "all" "let" "proc")}
        {Lisp-Entry "collect-all" #f 403 11 403 22 ("list" "get-children" "Pad-View" "is?" "if" "get-host" "get-parent" "pad" "let")}
        {Lisp-Entry "collect-others" #f 410 11 410 25 ("get-children" "neq?" "hst" "function" "collect-if" "Pad-View" "is?" "when" "get-host" "get-parent" "pad" "let" "host")}
        {Lisp-Entry "select-menu" #f 423 11 423 22 ("25" "2" "Point" "track-popup-menu" "layout-menu" "host:" "list" "properties:" "on-select" "'on-select" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "parent:" "Label-Item" "class-of" "host-icon" "icon" "get-title" "title" "get-guest" "guest" "docked" "function" "for-each" "Context-Menu" "new" "menu" "let" "when" "collect-others" "others" "get-host" "host" "let*")}
        {Lisp-Entry "on-select" #f 438 11 438 20 ("focus-host" "set-selection" "function" "with-locked-update" "host:" "get-property" "host" "get-host" "get-parent" "parent" "let" "evt")}}}})
"Docked-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Docked-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Docked-Preferences" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Docked-Preferences" #f 47 7 47 25 ("Bitmap-Resource" "icon:" "Figure-Preferences")
        {Lisp-Entry "model-name" #f 50 12 50 22 ("generate")}
        {Lisp-Entry "caption?" #f 51 12 51 20 ("generate")}
        {Lisp-Entry "zoomable?" #f 52 12 52 21 ("generate")}
        {Lisp-Entry "walk-form" #f 65 16 65 25 ("push-reference" "in-manifest?" "and" "when" "'model-name" "get-property" "model-name" "let" "form" "analyser")}
        {Lisp-Entry "presentation-property?" #f 76 11 76 33 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 80 11 80 27 ("name" "format" "title" "either")}
        {Lisp-Entry "set-presentation" #f 84 11 84 27 ("title:" "self" "set-property" "title" "designer")}
        {Lisp-Entry "apply-preferences" #f 93 11 93 28 ("set-visible?" "get-guest" "client-activate" "location" "set-location" "zoomable?" "set-zoomable?" "caption?" "set-caption?" "set-title" "title" "when" "set-parent" "name" "singleton-docked" "host" "model-name" "autoload" "class" "let*" "assert" "parent")}
        {Lisp-Entry "get-class-image" #f 112 16 112 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" #f 116 11 116 37 ("zoomable" "caption?" "model-name" "location")}}}})
"Docs-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "tools" "Docs-Tree.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.tools.Docs-Tree" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Docs-Tree" #f 46 7 46 16 ("Descendants-Tree")
        {Lisp-Entry "row-state" #f 49 11 49 20 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Document"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "document" "Document.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.document.Document" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Document" #f 45 11 45 19 ()
        {Lisp-Entry "get-controller" #f 48 35 48 49 ()}
        {Lisp-Entry "new-controller" #f 49 35 49 49 ()}
        {Lisp-Entry "load-content" #f 50 35 50 47 ("moniker")}
        {Lisp-Entry "save-content" #f 51 35 51 47 ("moniker")}
        {Lisp-Entry "verify-reload" #f 52 35 52 48 ()}
        {Lisp-Entry "reload-moniker" #f 53 35 53 49 ("moniker")}
        {Lisp-Entry "default-extension" #f 54 35 54 52 ()}
        {Lisp-Entry "extensions" #f 55 35 55 45 ()}
        {Lisp-Entry "focus-document" #f 56 35 56 49 ()}
        {Lisp-Entry "install-scroller?" #f 57 35 57 52 ()}
        {Lisp-Entry "tool-update" #f 58 35 58 46 ("tool?")}
        {Lisp-Entry "console-update" #f 59 35 59 49 ("console?")}
        {Lisp-Entry "current-history-item" #f 60 35 60 55 ()}
        {Lisp-Entry "compare-moniker" #f 61 35 61 50 ("moniker")}
        {Lisp-Entry "frame-guest?" #f 62 35 62 47 ()}}}})
"Document-Controller"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "document" "Document-Controller.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.document.Document-Controller" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Document-Controller" #f 51 7 51 26 ("Object")
        {Lisp-Entry "document" #f 54 8 54 16 ()}
        {Lisp-Entry "newname" #f 55 8 55 15 ()}
        {Lisp-Entry "moniker" #f 56 8 56 15 ()}
        {Lisp-Entry "tool?" #f 57 8 57 13 ()}
        {Lisp-Entry "console?" #f 58 8 58 16 ()}
        {Lisp-Entry "modified?" #f 59 8 59 17 ()}
        {Lisp-Entry "read-only?" #f 60 8 60 18 ()}
        {Lisp-Entry "moniker-time" #f 61 8 61 20 ()}
        {Lisp-Entry "initialize" #f 64 11 64 21 ("console?~self" "tool?~self" "document~self" "set!" "nextmethod" "console?" "console?:" "tool?" "tool?:" "document")}
        {Lisp-Entry "install-in-host" #f 76 18 76 33 ("document" "focus-document" "get-visible?" "when" "update-status" "position-host" "install-container" "host")}
        {Lisp-Entry "install-container" #f 84 29 84 46 ("install-scroller" "document" "install-scroller?" "when")}
        {Lisp-Entry "install-scroller" #f 89 21 89 37 ("set-content" "set-client" "get-content" "set-parent" "hscroll?:" "vscroll?:" "parent:" "Scroller-View" "new" "scroller" "document" "get-host" "host" "let*")}
        {Lisp-Entry "position-host" #f 97 11 97 24 ("set-size" "set-position" "10" "get-height" "Dimension" "size" "5" "get-width" "-" "Point" "new" "position" "documents" "'documents" "get-preferences" "get-default-width" "width" "get-parent" "get-size" "parent-size" "let*" "host")}
        {Lisp-Entry "confirm-close" #f 111 26 111 39 ("throw-cancel" "cancel" "no" "save-all" "yes" "case" "confirmation" "'confirmation" "type:" "name-status" "format" "message-box" "code" "let" "get-modified?" "when")}
        {Lisp-Entry "close-on-close-all?" #f 121 18 121 37 ("get-tool?" "not")}
        {Lisp-Entry "get-newname" #f 130 18 130 29 ("newname")}
        {Lisp-Entry "set-newname" #f 134 18 134 29 ("newname" "set!" "value")}
        {Lisp-Entry "effective-newname" #f 138 11 138 28 ("localize" "newname" "either")}
        {Lisp-Entry "get-moniker" #f 142 18 142 29 ("moniker")}
        {Lisp-Entry "set-moniker" #f 146 18 146 29 ("document" "load-content" "set!" "moniker" "/=" "when" "mnk")}
        {Lisp-Entry "change-moniker" #f 152 18 152 32 ("moniker" "set!" "1" "car" "Moniker" "is-not?" "when" "mnk")}
        {Lisp-Entry "save" #f 158 26 158 30 ("save-content" "safe-zipped?" "write-allowed?" "and" "when" "save-as" "moniker" "not" "if")}
        {Lisp-Entry "save-as" #f 165 26 165 33 ("save-to" "set-read/write" "read-only?" "exists?" "and" "when" "extensions:" "default-extension:" "get-name" "effective-newname" "not" "if" "initial-filename:" "choose-new-file" "moniker" "extensions" "document" "default-extension" "extension" "let*")}
        {Lisp-Entry "save-to" #f 174 18 174 25 ("update-status" "moniker" "set!" "save-content" "mnk")}
        {Lisp-Entry "save-all" #f 180 18 180 26 ("save")}
        {Lisp-Entry "save-content" #f 184 11 184 23 ("document" "save-content" "moniker")}
        {Lisp-Entry "revert-saved" #f 188 18 188 30 ("throw-cancel" "cancel" "no" "document" "reload-moniker" "yes" "case" "confirmation" "'confirmation" "type:" "message-box" "code" "let" "bell" "moniker" "not" "if")}
        {Lisp-Entry "compare-saved" #f 199 18 199 31 ("document" "compare-moniker" "bell" "moniker" "not" "if")}
        {Lisp-Entry "get-modified?" #f 210 26 210 39 ("modified?" "console?" "if")}
        {Lisp-Entry "set-modified?" #f 216 26 216 39 ("update-status" "set!" "modified?" "neq?" "when" "state")}
        {Lisp-Entry "dependent-document?" #f 227 26 227 45 ()}
        {Lisp-Entry "set-caption" #f 236 18 236 29 ("invalidate-caption" "get-toplevel" "set-caption" "front-view?" "get-maximized?" "Frame-Host" "is?" "and" "if" "get-visible?" "when" "set-title" "document" "get-host" "host" "let" "title")}
        {Lisp-Entry "update-status" #f 251 26 251 39 ("document-status" "set-caption" "get-guest" "eq?" "Host-View" "is?" "and" "when" "document" "get-host" "host" "let" "update-state")}
        {Lisp-Entry "document-status" #f 258 26 258 41 ("read/write-status" "directory-status" "modified-status" "name-status" "format")}
        {Lisp-Entry "name-status" #f 266 26 266 37 ("get-name" "get-base" "tool?" "effective-newname" "moniker" "not" "if")}
        {Lisp-Entry "modified-status" #f 274 11 274 26 ("get-modified?" "if")}
        {Lisp-Entry "directory-status" #f 280 11 280 27 ("present-location" "format" "get-parent" "parent" "let" "tool?" "moniker" "not" "or" "if")}
        {Lisp-Entry "read/write-status" #f 289 11 289 28 ("read-only?" "tool?" "moniker" "not" "or" "if")}
        {Lisp-Entry "get-read-only?" #f 302 18 302 32 ("read-only?")}
        {Lisp-Entry "get-moniker-time" #f 306 18 306 34 ("moniker-time")}
        {Lisp-Entry "update-state" #f 310 18 310 30 ("Zipped" "is?" "read-only?" "set!" "exists?" "moniker" "not" "or" "if")}
        {Lisp-Entry "update-moniker-time" #f 319 26 319 45 ("get-modification-time" "moniker-time" "set!" "moniker")}
        {Lisp-Entry "verify-reload" #f 323 18 323 31 ("propose-reload" "needs-reload?" "when" "cancel-edition?" "cancel-edition?:" "propose-reload?" "propose-reload?:")}
        {Lisp-Entry "needs-reload?" #f 328 18 328 31 ("Zipped" "is-not?" "get-modification-time" "time->seconds" "/=" "exists?" "moniker-time" "moniker" "and")}
        {Lisp-Entry "propose-reload" #f 338 18 338 32 ("cancel" "update-status" "update-moniker-time" "no" "throw-cancel" "when" "moniker" "document" "reload-moniker" "case" "confirmation" "'confirmation" "type:" "title:" "get-moniker" "format" "message-box" "yes" "'yes" "not" "if" "code" "let" "cancel-edition?" "cancel-edition?:" "propose-reload?" "propose-reload?:")}
        {Lisp-Entry "write-allowed?" #f 361 18 361 32 ("get-read-only?" "not")}
        {Lisp-Entry "in-write-allowed?" #f 365 11 365 28 ("no-action" "read-only" "update-status" "read/write" "case" "ensure-read/write" "code" "let" "moniker")}
        {Lisp-Entry "out-write-allowed?" #f 373 11 373 29 ("throw-cancel" "cancel" "no" "update-status" "set-read/write" "yes" "case" "confirmation" "'confirmation" "type:" "title:" "get-name" "format" "message-box" "code" "let" "moniker")}
        {Lisp-Entry "Safe-Zipped" #f 393 14 393 25 ("64")}
        {Lisp-Entry "safe-zipped?" #f 397 18 397 30 ("safe-zipped-confirmed?" "Safe-Zipped" "<=" "1024" "get-size" "quotient" "size" "get-file" "file" "let*" "Zipped" "moniker" "is-not?" "or")}
        {Lisp-Entry "safe-zipped-confirmed?" #f 405 11 405 33 ("throw-cancel" "cancel" "no" "yes" "case" "confirmation" "'confirmation" "type:" "title:" "get-name" "format" "message-box" "code" "let" "size" "file")}
        {Lisp-Entry "get-tool?" #f 424 18 424 27 ("tool?")}
        {Lisp-Entry "set-tool?" #f 428 18 428 27 ("document" "tool-update" "set!" "tool?" "neq?" "when" "flag")}
        {Lisp-Entry "get-console?" #f 434 18 434 30 ("console?")}
        {Lisp-Entry "set-console?" #f 438 18 438 30 ("document" "console-update" "set!" "console?" "neq?" "when" "flag")}
        {Lisp-Entry "select-next" #f 449 26 449 37 ("rest" "strings")}
        {Lisp-Entry "select-previous" #f 453 26 453 41 ("rest" "strings")}
        {Lisp-Entry "select-expr" #f 457 26 457 37 ("targets")}
        {Lisp-Entry "select-expr-backward" #f 461 26 461 46 ("targets")}
        {Lisp-Entry "show-history" #f 470 18 470 30 ("moniker" "Depot" "find-depot" "show-history" "'show-history" "unimplemented")}
        {Lisp-Entry "show-changes" #f 476 18 476 30 ("moniker" "Depot" "find-depot" "show-changes" "'show-changes" "unimplemented")}}}})
"Document-Moniker"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "document" "Document-Moniker.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.document.Document-Moniker" #f 37 9 37 42 ("File" "new" "parameters" "class" "jazz")
      {Lisp-Entry "Document-Moniker-Class" #f 48 7 48 29 ()
        {Lisp-Entry "get-protocol" #f 51 11 51 23 ("doc" "'doc")}}
      {Lisp-Entry "Document-Moniker" #f 55 7 55 23 ("Moniker" "Document-Moniker-Class")
        {Lisp-Entry "pathname" #f 58 8 58 16 ()}
        {Lisp-Entry "construct-literal" #f 62 16 62 33 ("self" "new" "pathname" "context")}
        {Lisp-Entry "print" #f 66 11 66 16 ("pathname" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "present" #f 77 11 77 18 ("pathname" "get-list" "format")}
        {Lisp-Entry "initialize" #f 86 11 86 21 ("pathname" "set!" "nextmethod" "path")}
        {Lisp-Entry "get-name" #f 96 18 96 26 ("pathname" "get-name")}
        {Lisp-Entry "get-document" #f 100 18 100 30 ("get-guest" "error" "null?" "if" "pathname" "find-document" "frame" "get-application" "appl" "let*")}
        {Lisp-Entry "load-lines" #f 108 11 108 21 ("get-document" "get-content" "rest")}
        {Lisp-Entry "load-form" #f 112 11 112 20 ("get-document" "get-designer" "get-form")}}
      {Lisp-Entry "moniker-new" #f 116 11 116 22 ()}}})
"Document-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "document" "Document-Preferences.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.document.Document-Preferences" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Document-Preferences" #f 46 7 46 27 ("Bitmap-Resource" "icon:" "title:" "Preferences")
        {Lisp-Entry "can-rename-component?" #f 58 11 58 32 ()}
        {Lisp-Entry "can-delete-component?" #f 62 11 62 32 ()}
        {Lisp-Entry "can-move-component?" #f 66 11 66 30 ()}
        {Lisp-Entry "can-copy-component?" #f 70 11 70 30 ()}}}})
"Documentation-Slide"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "documentation" "Documentation-Slide.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.documentation.Documentation-Slide" #f 37 9 37 61 ("jazz")
      {Lisp-Entry "Documentation-Slide" #f 46 7 46 26 ("Slide")}}})
"Documentation-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "documentation" "Documentation-Text-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.documentation.Documentation-Text-View" #f 37 9 37 65 ("jazz")
      {Lisp-Entry "Documentation-Text-View" #f 48 7 48 30 ("Text" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "4" "left-padding:" "Formatted-Text-View")
        {Lisp-Entry "install" #f 55 11 55 18 ("Variable" "Code" "Dark-Blue" "Hyperlink" "Reference" "Purple" "Comment" "Dark-Red" "Color" "color:" "Title" "Doc-Heading3" "Doc-Heading2" "Doc-Heading1" "Doc-Heading0" "Font" "font:" "Text-Style" "add-style" "Heading3" "Heading2" "Heading1" "Default" "base:" "Heading0" "name:" "Format" "add-format" "nextmethod" "rest")}
        {Lisp-Entry "get-context-menu" #f 75 11 75 27 ("new-text-context-menu")}}}})
"Documentation-Title"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "documentation" "Documentation-Title.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.documentation.Documentation-Title" #f 37 9 37 61 ("jazz")
      {Lisp-Entry "Documentation-Title" #f 46 7 46 26 ("Label-View")}}})
"Documents-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "document" "Documents-Preferences.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.document.Documents-Preferences" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Documents-Preferences" #f 48 7 48 28 ("title:" "Preferences")
        {Lisp-Entry "default-width" #f 51 12 51 25 ("generate" "800")}
        {Lisp-Entry "default-background" #f 52 12 52 30 ("generate" "White" "name:" "Color")}
        {Lisp-Entry "can-rename-component?" #f 64 11 64 32 ()}
        {Lisp-Entry "can-delete-component?" #f 68 11 68 32 ()}
        {Lisp-Entry "can-move-component?" #f 72 11 72 30 ()}
        {Lisp-Entry "can-copy-component?" #f 76 11 76 30 ()}
        {Lisp-Entry "get-categorized-properties" #f 80 11 80 37 ("default-background" "default-width")}
        {Lisp-Entry "get-row-instance" #f 84 11 84 27 ("nextmethod" "else" "Color-Row" "new" "default-background" "field-name" "case" "property")}}}})
"Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Domain" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Domain" #f 45 7 45 13 ("initialize" "nullable?" "Node")
        {Lisp-Entry "validate" #f 57 26 57 34 ("validate-value" "field-name" "property:" "class-of" "property-presentation" "localize" "format" "message:" "Integrity-Violation" "new" "add-violation" "nullable?" "when" "not" "if" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "validate-value" #f 64 26 64 40 ("manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 73 26 73 33 ("present" "'present" "unimplemented" "value")}
        {Lisp-Entry "setup-entry" #f 82 26 82 37 ("client" "view")}
        {Lisp-Entry "setup-list-entry" #f 86 26 86 42 ("client" "view")}
        {Lisp-Entry "get-property-value" #f 95 26 95 44 ("get-entry" "get-value" "view")}
        {Lisp-Entry "set-property-value" #f 99 26 99 44 ("get-entry" "set-value" "value" "view")}
        {Lisp-Entry "get-property-modified?" #f 103 26 103 48 ("get-modified?" "and" "get-entry" "entry" "let" "view")}
        {Lisp-Entry "set-property-modified?" #f 109 26 109 48 ("get-entry" "set-modified?" "value" "view")}}}})
"Domain-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "choosers" "Domain-Chooser.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.choosers.Domain-Chooser" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Domain-Chooser" #f 48 7 48 21 ("on-cancel" "114" "cancel" "default?:" "on-ok" ":host" "action-handler:" "24" "80" "351" "30" "ok" "200" "width:" "display-images?:" "toplevel-controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" ":icons" "portfolio:" "2" "top-padding:" "detail" "filled-column:" "names-tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "304" "33" "names-border" "Label" "name:" "Font" "font:" "16" "201" "9" "10" "Point" "position:" "title:" "388" "222" "Dimension" "size:" "View")
        {Lisp-Entry "names" #f 51 12 51 17 ("set-names" "get-names")}
        {Lisp-Entry "selected" #f 52 12 52 20 ("set-selected" "get-selected")}
        {Lisp-Entry "finish" #f 67 11 67 17 ("acquire-focus" "setup-names" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-names" #f 79 18 79 27 ("names")}
        {Lisp-Entry "set-names" #f 83 18 83 27 ("names" "set!" "value")}
        {Lisp-Entry "get-selected" #f 87 18 87 30 ("selected")}
        {Lisp-Entry "set-selected" #f 91 18 91 30 ("selected" "set!" "value")}
        {Lisp-Entry "get-tree" #f 95 11 95 19 ("names-tree" "'names-tree" "locate")}
        {Lisp-Entry "get-text" #f 99 11 99 19 ("text" "column-size" "locate")}
        {Lisp-Entry "host-title" #f 108 16 108 26 ()}
        {Lisp-Entry "host-position" #f 112 16 112 29 ("300" "450" "Point")}
        {Lisp-Entry "host-size" #f 116 16 116 25 ("120" "252" "Dimension")}
        {Lisp-Entry "on-return-press" #f 126 11 126 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" #f 132 11 132 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "setup-names" #f 142 11 142 22 ("names" "list" "children:" "add-row" "user-data:" "color:" "checked?:" "title:" "parent:" "font:" "Check-Box" "checkbox" "selected" "member?" "checked?" "cadr" "localize" "title" "car" "string?" "name" "Label" "Label-Bold" "Font" "filled" "'filled" "size" "eq?" "if" "font" "Black" "name:" "Color" "color" "4" "Rect" "layout-insets:" "fill" "'fill" "layout-type:" "Layout-View" "new" "layout" "0" "border" "let*" "info" "for-each" "remove-every-row" "function" "with-update-locked" "tree")}
        {Lisp-Entry "get-modal-result" #f 164 11 164 27 ("get-output" "put" "name" "get-checked?" "Check-Box" "is?" "and" "when" "get-user-data" "checkbox" "rank" "row" "function" "for-each-row" "List-Factory" "new" "fact" "get-tree" "tree" "let")}}}})
"Domain-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Domain-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Domain-Row" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Domain-Row" #f 46 7 46 17 ("Value-Row")
        {Lisp-Entry "domain" #f 49 12 49 18 ("generate")}
        {Lisp-Entry "present" #f 57 11 57 18 ("value")}
        {Lisp-Entry "new-editor" #f 66 11 66 21 ("self" "value-row:" "Domain-Editor" "new" "editor" "let")}
        {Lisp-Entry "editor-class" #f 72 11 72 23 ("Color-Row-Editor")}
        {Lisp-Entry "get-edited-value" #f 76 11 76 27 ("Color" "parse-string" "body" "'body" "editor" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-edited-value" #f 81 11 81 27 ("color" "'color" "set-background" "present" "body" "'body" "editor" "locate" "set-string-content" "value")}
        {Lisp-Entry "get-edited-modified?" #f 86 11 86 31 ("body" "'body" "editor" "locate" "get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" #f 90 11 90 31 ("body" "'body" "editor" "locate" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" #f 94 11 94 22 ("body" "'body" "editor" "locate" "show-text-cursor")}
        {Lisp-Entry "focused-editor" #f 98 11 98 25 ("body" "'body" "editor" "locate")}}
      {Lisp-Entry "Domain-Editor" #f 107 7 107 20 ("Layout-View")
        {Lisp-Entry "value-row" #f 110 12 110 21 ("set-value-row" "get-value-row")}
        {Lisp-Entry "get-value-row" #f 113 18 113 31 ("value-row")}
        {Lisp-Entry "set-value-row" #f 117 18 117 31 ("body" "'body" "locate" "set-value-row" "value-row" "set!" "value")}}}})
"Drag-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dnd" "Drag-Source.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dnd.Drag-Source" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Drag-Source" #f 45 7 45 18 ("Object")
        {Lisp-Entry "view" #f 48 8 48 12 ()}
        {Lisp-Entry "position" #f 49 8 49 16 ()}
        {Lisp-Entry "image" #f 50 8 50 13 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("image~self" "position~self" "view~self" "set!" "nextmethod" "image" "image:" "position" "position:" "view" "view:")}
        {Lisp-Entry "print" #f 60 11 60 16 ("image" "position" "view" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-view" #f 71 18 71 26 ("view")}
        {Lisp-Entry "get-position" #f 75 18 75 30 ("position")}
        {Lisp-Entry "get-image" #f 79 18 79 27 ("image")}}}})
"Draw-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Draw-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Draw-Event" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Draw-Event" #f 44 7 44 17 ("Event")
        {Lisp-Entry "surface" #f 47 8 47 15 ()}
        {Lisp-Entry "update" #f 48 8 48 14 ()}
        {Lisp-Entry "lh" #f 49 8 49 10 ()}
        {Lisp-Entry "lv" #f 50 8 50 10 ()}
        {Lisp-Entry "info" #f 51 8 51 12 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("info~self" "lv~self" "lh~self" "update~self" "surface~self" "set!" "nextmethod" "info" "lv" "lh" "update" "surface" "sender" "kind")}
        {Lisp-Entry "get-dc" #f 63 18 63 24 ("surface")}}}})
"Drawing"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Drawing.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Drawing" #f 38 9 38 29 ("jazz")
      {Lisp-Entry "Drawing" #f 50 7 50 14 ("Figure")
        {Lisp-Entry "get-player" #f 58 26 58 36 ("get-player" "parent" "essay")}
        {Lisp-Entry "get-lie" #f 67 18 67 25 ("fxround" "Point" "new" "1.0" "0.0" "get-lie-parent" "sc" "v" "h" "receive")}
        {Lisp-Entry "get-lie-parent" #f 72 29 72 43 ("get-v" "position" "get-h" "+" "get-lie-parent" "values" "parent" "not" "if" "sc" "v" "h")}
        {Lisp-Entry "set-lie" #f 78 18 78 25 ("set-position" "position" "+" "pos" "-" "delta" "get-lie" "actual" "let*" "lie")}
        {Lisp-Entry "get-root" #f 91 26 91 34 ("get-root" "when" "get-player" "player" "let")}
        {Lisp-Entry "acquire" #f 102 18 102 25 ("acquire-delta" "get-delta" "sc" "dv" "dh" "receive" "shape" "origin")}
        {Lisp-Entry "acquire-delta" #f 107 18 107 31 ("error" "else" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "Rect" "*" "+" "fxround" "new" "get-v" "v" "get-h" "h" "let" "Point" "typecase" "shape" "sc" "dv" "dh")}
        {Lisp-Entry "get-delta" #f 127 29 127 38 ("-" "/" "values" "sc" "dv" "dh" "1.0" "0.0" "get-lie-parent" "origin-sc" "origin-v" "origin-h" "receive" "origin")}
        {Lisp-Entry "get-size" #f 138 11 138 19 ("size")}
        {Lisp-Entry "set-size" #f 142 11 142 19 ("call-layout" "get-finished?" "invalidate-layout" "set!" "size" "/=" "when" "sz")}
        {Lisp-Entry "set-size-noevent" #f 150 26 150 42 ("size" "set!" "sz")}
        {Lisp-Entry "get-width" #f 154 18 154 27 ("size" "get-width")}
        {Lisp-Entry "set-width" #f 158 18 158 27 ("get-height" "Dimension" "new" "set-size" "width")}
        {Lisp-Entry "get-height" #f 162 18 162 28 ("size" "get-height")}
        {Lisp-Entry "set-height" #f 166 18 166 28 ("get-width" "Dimension" "new" "set-size" "height")}
        {Lisp-Entry "set-height-noevent" #f 170 18 170 36 ("get-width" "Dimension" "new" "set-size-noevent" "height")}
        {Lisp-Entry "get-left" #f 174 18 174 26 ("position" "get-h")}
        {Lisp-Entry "get-top" #f 178 18 178 25 ("position" "get-v")}
        {Lisp-Entry "get-right" #f 182 18 182 27 ("size" "get-width" "position" "get-h" "+")}
        {Lisp-Entry "get-bottom" #f 186 18 186 28 ("size" "get-height" "position" "get-v" "+")}
        {Lisp-Entry "get-bounds" #f 190 18 190 28 ("get-size" "size-rect")}
        {Lisp-Entry "set-bounds" #f 194 18 194 28 ("rect-size" "set-size" "rect-position" "set-position" "bounds")}
        {Lisp-Entry "grow-bounds" #f 199 18 199 29 ("set-position" "set-size" "Dimension" "get-size" "size" "Point" "new" "get-position" "+" "pos" "let" "dheight" "dwidth" "dv" "dh")}
        {Lisp-Entry "get-rect" #f 206 18 206 26 ("get-size" "get-position" "position/size->rect")}
        {Lisp-Entry "set-rect" #f 210 18 210 26 ("rect-size" "set-size" "rect-position" "set-position" "rect")}
        {Lisp-Entry "get-layout-valid?" #f 220 11 220 28 ("Layout-Valid-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-layout-valid?" #f 224 11 224 28 ("Layout-Valid-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "get-scaled?" #f 233 26 233 37 ()}
        {Lisp-Entry "set-scaled?" #f 237 26 237 37 ("value")}
        {Lisp-Entry "get-scaling" #f 241 26 241 37 ("1.0")}
        {Lisp-Entry "set-scaling" #f 245 26 245 37 ("value")}
        {Lisp-Entry "logical->device" #f 249 18 249 33 ("error" "else" "case" "Number" "get-bottom" "get-right" "get-top" "get-left" "Rect" "get-height" "get-width" "Dimension" "get-v" "get-h" "new" "Point" "typecase" "lv" "vert" "-" "*" "+" "fxround" "lh" "function" "horz" "sc" "sv" "sh" "receive" "not" "if" "scaling-info" "either" "let" "info" "info:" "orientation" "orientation:" "shape")}
        {Lisp-Entry "device->logical" #f 267 18 267 33 ("error" "else" "case" "Number" "get-bottom" "get-right" "get-top" "get-left" "Rect" "get-height" "get-width" "Dimension" "get-v" "get-h" "new" "Point" "typecase" "dv" "vert" "-" "quotient" "+" "dh" "function" "horz" "sc" "sv" "sh" "receive" "not" "if" "scaling-info" "either" "let" "info" "info:" "orientation" "orientation:" "shape")}
        {Lisp-Entry "scaling-info" #f 287 11 287 23 ("get-parent" "set!" "get-v" "get-h" "decrease!" "get-position" "pos" "values" "continuation-return" "if" "get-scaling" "sc" "get-scaled?" "sc?" "while" "return" "function" "continuation-capture" "sv" "0" "sh" "self" "drawing" "let")}
        {Lisp-Entry "view-visible?" #f 310 18 310 31 ("view-visible?" "parent" "not" "or" "get-visible?" "and")}
        {Lisp-Entry "get-transparent?" #f 319 26 319 42 ()}
        {Lisp-Entry "invalidate-layout" #f 328 21 328 38 ("set-layout-valid?")}
        {Lisp-Entry "call-layout" #f 332 21 332 32 ("set-layout-valid?" "layout" "get-layout-valid?" "unless")}
        {Lisp-Entry "layout-drawing" #f 338 18 338 32 ("call-layout" "invalidate-layout" "get-finished?" "when")}
        {Lisp-Entry "layout" #f 346 26 346 32 ()}
        {Lisp-Entry "for-each-drawing" #f 355 18 355 34 ("get-visible?" "or" "View" "is?" "and" "when" "children" "in" "child" "for" "loop" "include-invisibles?" "include-invisibles?:" "proc")}
        {Lisp-Entry "for-each-drawing-reversed" #f 362 18 362 43 ("children" "get-visible?" "or" "View" "is?" "and" "when" "child" "function" "for-each-reversed" "include-invisibles?" "include-invisibles?:" "proc")}
        {Lisp-Entry "find-drawing" #f 375 18 375 30 ("self" "get-transparent?" "unless" "find-subdrawing" "either" "size" "in-drawing?" "when" "ignore" "ignore:" "pos")}
        {Lisp-Entry "in-drawing?" #f 382 29 382 40 ("in-size?" "size" "pos")}
        {Lisp-Entry "find-subdrawing" #f 386 29 386 44 ("continuation-return" "memq?" "or" "and" "when" "get-v" "get-h" "/" "fxround" "Point" "new" "scaled" "get-scaling" "scaling" "find-drawing" "not" "if" "found" "get-scaled?" "scaled?" "let*" "get-position" "-" "delta" "let" "view" "for-each-drawing-reversed" "return" "function" "continuation-capture" "ignore" "pos")}
        {Lisp-Entry "invalidate-drawing" #f 410 18 410 36 ("parent" "invalidate-rect" "get-rect" "rect" "let")}
        {Lisp-Entry "paint" #f 420 18 420 23 ("set-effect" "animate" "Point" "new" "lie" "get-effect" "effect" "size" "size:" "blit-surface" "get-clipper" "setup-clipper" "get-offscreen" "offscreen" "let" "paint-drawing" "get-offscreen?" "not" "if" "get-visible?" "when" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "paint-drawing" #f 436 18 436 31 ("render" "get-clipper" "rects-intersect?" "Point" "new" "lie" "let" "when" "function" "get-height" "size" "get-width" "self" "with-transform" "new-sc?" "new-sc" "new-sv" "not" "if" "new-sh" "get-scaling" "scaling" "get-scaled?" "scaled?" "let*" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "render" #f 449 26 449 32 ("draw-children" "draw-content" "draw-background" "cycle-debug-color!" "get-bounds" "fill-rect" "*debug-paint*" "if" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-background" #f 457 26 457 41 ("context" "surface")}
        {Lisp-Entry "draw-content" #f 461 26 461 38 ("draw" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw" #f 465 26 465 30 ("lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-children" #f 469 26 469 39 ("children" "get-v" "get-h" "+" "paint" "get-position" "pos" "let" "get-visible?" "View" "is?" "and" "when" "drawing" "function" "for-each" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-offscreen" #f 483 29 483 42 ()}
        {Lisp-Entry "get-clipper" #f 492 18 492 29 ("0" "get-translated-clipper")}
        {Lisp-Entry "get-translated-clipper" #f 496 29 496 51 ("rect-intersection" "get-v" "position" "get-h" "-" "get-translated-clipper" "p" "let" "parent" "not" "if" "fxround" "offset-rect" "r" "get-bounds" "b" "let*" "v" "h")}
        {Lisp-Entry "get-offscreen?" #f 505 26 505 40 ()}
        {Lisp-Entry "set-offscreen?" #f 509 26 509 40 ("flag")}
        {Lisp-Entry "get-layer" #f 518 26 518 35 ()}
        {Lisp-Entry "set-layer" #f 522 26 522 35 ("value")}
        {Lisp-Entry "get-effect" #f 531 26 531 36 ()}
        {Lisp-Entry "set-effect" #f 535 26 535 36 ("value")}}}})
"Drop-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dnd" "Drop-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dnd.Drop-Event" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Drop-Event" #f 45 7 45 17 ("Mouse-Event")
        {Lisp-Entry "drag-drop" #f 48 8 48 17 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("drag-drop~self" "set!" "nextmethod" "drag-drop" "pos" "sender" "kind")}
        {Lisp-Entry "print" #f 56 11 56 16 ("function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-drag-drop" #f 67 18 67 31 ("drag-drop")}}}})
"Drop-Target"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dnd" "Drop-Target.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dnd.Drop-Target" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Drop-Target" #f 45 7 45 18 ("Object")
        {Lisp-Entry "view" #f 48 8 48 12 ()}
        {Lisp-Entry "position" #f 49 8 49 16 ()}
        {Lisp-Entry "criteria" #f 50 8 50 16 ()}
        {Lisp-Entry "handler" #f 51 8 51 15 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("handler~self" "criteria~self" "position~self" "view~self" "set!" "nextmethod" "handler" "handler:" "criteria" "criteria:" "position" "position:" "view" "view:")}
        {Lisp-Entry "print" #f 62 11 62 16 ("view" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-view" #f 73 18 73 26 ("view")}
        {Lisp-Entry "get-position" #f 77 18 77 30 ("position")}
        {Lisp-Entry "get-criteria" #f 81 18 81 30 ("criteria")}
        {Lisp-Entry "get-handler" #f 85 18 85 29 ("handler")}}}})
"Edit-Base-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Edit-Base-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Edit-Base-Menu" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Edit-Base-Menu" #f 46 7 46 21 ("select-all" "delete" "end-paste" "paste" "copy" "cut" "redo" "view" "Action" "action:" "Bitmap-Resource" "icon:" "undo" "name:" "french:" "english:" "Locales" "title:" "Menu")}}})
"Edit-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Edit-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Edit-Menu" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Edit-Menu" #f 46 7 46 16 ("forward-history" "backward-history" "Bitmap-Resource" "icon:" "add-history" "view" "paste-properties" "pop-clipboard-stack" "application" "Action" "action:" "end-paste" "before:" "title:" "paste-from-stack" "name:" "Edit-Base-Menu")}}})
"Edition-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Edition-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Edition-Event" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Edition-Event" #f 44 7 44 20 ("Event")}}})
"Editor-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "event" "Editor-Event.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.event.Editor-Event" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Editor-Event" #f 45 7 45 19 ("Event")}}})
"Editor-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Editor-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Editor-Row" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Editor-Row" #f 46 7 46 17 ("Tree-Row")
        {Lisp-Entry "editor" #f 49 8 49 14 ()}
        {Lisp-Entry "get-editor" #f 57 18 57 28 ("editor")}
        {Lisp-Entry "set-editor" #f 61 18 61 28 ("editor" "set!" "edt")}
        {Lisp-Entry "auto-inplace?" #f 70 11 70 24 ()}
        {Lisp-Entry "layout" #f 79 11 79 17 ("get-height" "get-width" "-" "Dimension" "set-size" "0" "Point" "new" "set-position" "1" "get-indentation" "level" "*" "12" "+" "width" "get-size" "size" "get-tree" "tree" "let*" "editor" "when")}
        {Lisp-Entry "draw" #f 93 11 93 15 ("get-height" "get-width" "self" "draw-level" "get-node-column" "column" "get-tree" "tree" "let*" "lv" "lh" "context" "surface")}}}})
"Editor-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Editor-View.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Editor-View" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Editor-View" #f 53 7 53 18 ("Document" "Layout-View")
        {Lisp-Entry "client" #f 56 12 56 18 ("set-client" "get-client")}
        {Lisp-Entry "designer" #f 59 8 59 16 ()}
        {Lisp-Entry "listeners" #f 60 8 60 17 ()}
        {Lisp-Entry "undoer" #f 61 8 61 14 ()}
        {Lisp-Entry "selection" #f 62 8 62 17 ()}
        {Lisp-Entry "controller" #f 63 8 63 18 ()}
        {Lisp-Entry "rights" #f 64 8 64 14 ()}
        {Lisp-Entry "default-extension" #f 67 11 67 28 ()}
        {Lisp-Entry "extensions" #f 68 11 68 21 ()}
        {Lisp-Entry "focus-document" #f 69 11 69 25 ()}
        {Lisp-Entry "current-history-item" #f 70 11 70 31 ()}
        {Lisp-Entry "get-editor-view" #f 73 11 73 26 ("self")}
        {Lisp-Entry "host-icon" #f 82 16 82 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 86 16 86 26 ()}
        {Lisp-Entry "install-in-host" #f 95 11 95 26 ("get-controller" "update-status" "nextmethod" "host")}
        {Lisp-Entry "install-scroller" #f 100 11 100 27 ()}
        {Lisp-Entry "position-host" #f 104 11 104 24 ("host")}
        {Lisp-Entry "get-controller" #f 113 11 113 25 ("new-controller" "set!" "controller" "unless")}
        {Lisp-Entry "new-controller" #f 119 11 119 25 ("self" "Editor-View-Controller" "new")}
        {Lisp-Entry "save" #f 123 11 123 15 ("get-controller" "save")}
        {Lisp-Entry "save-as" #f 127 11 127 18 ("get-controller" "save-as")}
        {Lisp-Entry "save-all" #f 131 26 131 34 ("get-controller" "save-all")}
        {Lisp-Entry "install-scroller?" #f 135 11 135 28 ()}
        {Lisp-Entry "get-moniker" #f 139 11 139 22 ("get-controller" "get-moniker")}
        {Lisp-Entry "set-moniker" #f 143 11 143 22 ("get-controller" "set-moniker" "moniker")}
        {Lisp-Entry "load-content" #f 147 11 147 23 ("set-client" "instantiate" "cpnt" "read-from-file" "form" "let*" "moniker")}
        {Lisp-Entry "verify-reload" #f 153 11 153 24 ()}
        {Lisp-Entry "reload-moniker" #f 157 11 157 25 ("moniker")}
        {Lisp-Entry "get-modified?" #f 161 11 161 24 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 165 11 165 24 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "set-controller-modified?" #f 169 29 169 53 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "update-status" #f 173 11 173 24 ("get-controller" "update-status")}
        {Lisp-Entry "update-moniker-time" #f 177 11 177 30 ("get-controller" "update-moniker-time" "moniker")}
        {Lisp-Entry "confirm-close" #f 181 11 181 24 ("get-controller" "confirm-close" "rest")}
        {Lisp-Entry "compare-moniker" #f 185 11 185 26 ("bring-to-front" "set-visible?" "get-guest" "compare-trees" "function" ":wait" "with-cursor" "right-moniker:" "left-moniker:" "host-visible?:" "Compare-Databases" "new-frame" "frame" "right" "Document-Moniker" "new" "left" "let*" "moniker")}
        {Lisp-Entry "tool-update" #f 196 11 196 22 ("tool?")}
        {Lisp-Entry "console-update" #f 200 11 200 25 ("console?")}
        {Lisp-Entry "install" #f 209 11 209 18 ("on-editor" "'on-editor" "method-name:" "self" "target:" "Event-Handler" "new" "add-editor-listener" "nextmethod" "rest")}
        {Lisp-Entry "destroy" #f 219 11 219 18 ("nextmethod" "close-application-selected" "self" "remove-editor-listener" "controller" "close" "set-client")}
        {Lisp-Entry "new-form" #f 232 11 232 19 ()}
        {Lisp-Entry "open-form" #f 236 11 236 20 ("open-form" "instantiate" "set-client")}
        {Lisp-Entry "save-form" #f 241 11 241 20 ("edit-document" "file?" "when" "designer" "get-form" "get-origin" "origin" "get-application" "appl" "let" "save" "function" ":wait" "with-cursor")}
        {Lisp-Entry "edit-form" #f 251 11 251 20 ("view-component")}
        {Lisp-Entry "select-branch" #f 260 18 260 31 ("process-branch-changing" "function" ":wait" "with-cursor" "client" "get-active-branch" "either" "neq?" "when" "branch")}
        {Lisp-Entry "change-branch" #f 267 11 267 24 ("process-branch-changed" "get-client" "set-active-branch" "branch")}
        {Lisp-Entry "select-component" #f 277 11 277 27 ("edit-component" "bell" "not" "if" "selected-component" "component" "let" "descendants" "'descendants" "locate" "get-highlight-edited?" "and" "when" "control?" "tree")}
        {Lisp-Entry "property-change" #f 290 21 290 36 ("list" "undoer" "register-undo" "find-changed-property" "Info-Row" "subtype?" "or" "unless" "symbolize-property" "get-row-class" "row-class" "let" "when" "undoable?" "value" "property" "component" "branch")}
        {Lisp-Entry "find-changed-property" #f 298 21 298 42 ("eq?" "and" "prop" "cpn" "br" "bind" "action" "function" "find-if" "undoer" "get-undo-list" "undo-list" "symbolize-property" "let" "property" "component" "branch")}
        {Lisp-Entry "select-property" #f 309 18 309 33 ("process-property-selected" "property")}
        {Lisp-Entry "show-properties" #f 313 26 313 41 ("focus?:" "workspace:" "Properties-Manager" "select-palette")}
        {Lisp-Entry "get-selection" #f 322 18 322 31 ("selection")}
        {Lisp-Entry "set-selection" #f 326 18 326 31 ("update-focus-actions" "set-application-selected" "process-selection-changed" "process-selection-changing" "selection" "old" "get-application" "appl" "let" "focus?" "focus?:" "force?" "force?:" "force-parent?" "force-parent?:" "origin" "origin:" "new")}
        {Lisp-Entry "set-application-selected" #f 335 11 335 35 ("force?:" "self" "set-selected" "get-application" "appl" "let" "force?" "selected")}
        {Lisp-Entry "close-application-selected" #f 340 11 340 37 ("self" "close-selected" "get-application" "appl" "let")}
        {Lisp-Entry "select-all" #f 345 18 345 28 ("rest")}
        {Lisp-Entry "unselect-all" #f 349 18 349 30 ("set-selection")}
        {Lisp-Entry "select" #f 353 18 353 24 ("cons" "list" "append" "remove" "set-selection" "selection" "memq?" "shift-down?" "if" "focus?" "focus?:" "component")}
        {Lisp-Entry "selection-changed" #f 363 29 363 46 ("length" "0" "naturals" "select" "rank" "unselect" "get-surrogate" "surrogate" "let" "Component" "is?" "when" "component" "function" "for-each" "selection" "set!" "focus?" "force-parent?" "origin" "new" "old")}
        {Lisp-Entry "cleanup-selection" #f 381 11 381 28 ("not" "component" "function" "collect-if" "set-selection" "selection" "object-destroyed?" "some?" "when")}
        {Lisp-Entry "save-content" #f 393 11 393 23 ("process-saved" "set-modified?" "update-status" "get-modified?" "not" "if" "update-moniker-time" "branch:" "get-base" "get-client" "set-name" "designer" "save-to" "process-saving" "moniker")}
        {Lisp-Entry "save-content-patch" #f 405 18 405 36 ("set-modified?" "update-status" "get-modified?" "not" "if" "update-moniker-time" "designer-save" "process-saving" "moniker")}
        {Lisp-Entry "designer-save" #f 414 29 414 42 ("designer" "save")}
        {Lisp-Entry "view-component" #f 423 11 423 25 ("edit-form" "bell" "designer" "not" "if")}
        {Lisp-Entry "on-editor" #f 434 29 434 38 ("selection-changed" "get-user-origin?" "focus?" "get-force-parent?" "force-parent?" "get-origin" "origin" "get-selection" "get-old" "old" ":selection-changed" "designer" "save-component-properties" "Component" "is?" "car" "cpn" "let" "selection" "not-null?" "when" ":saving" ":selection-changing" "cleanup-selection" ":branch-changed" "branch:" "get-property" "change-branch" ":branch-changing" "get-kind" "case" "evt")}
        {Lisp-Entry "get-client" #f 459 18 459 28 ("client")}
        {Lisp-Entry "set-client" #f 463 18 463 28 ("client-updated" "edit-component" "process-client-change" "client-update" "self" "Editor-Undoer" "new" "essay" "undoer" "set!" "remove-surrogate" "old" "let" "client" "neq?" "when" "clt")}
        {Lisp-Entry "client-update" #f 476 29 476 42 ("install-client-surrogate")}
        {Lisp-Entry "client-updated" #f 480 29 480 43 ()}
        {Lisp-Entry "install-client-surrogate" #f 484 29 484 53 ()}
        {Lisp-Entry "get-designer-class" #f 493 29 493 47 ("Designer")}
        {Lisp-Entry "get-designer" #f 497 18 497 30 ("designer")}
        {Lisp-Entry "get-reference" #f 501 18 501 31 ("get-reference" "designer" "essay")}
        {Lisp-Entry "edit-component" #f 505 18 505 32 ("update-status" "process-designer-change" "install-current-designer" "uninstall-current-designer" "designer" "old" "let" "get-reference" "neq?" "when" "get-edited-form" "form" "form:" "component")}
        {Lisp-Entry "get-edited-form" #f 515 11 515 26 ("class-of" "get-self-form" "get-origin" "file?" "and" "if" "get-form" "component-form" "let" "when" "component")}
        {Lisp-Entry "install-current-designer" #f 523 29 523 53 ("client" "install-designer" "on-designer" "'on-designer" "method-name:" "self" "target:" "Event-Handler" "add-designer-listener" "reference:" "form:" "get-designer-class" "new" "designer" "set!" "form" "component")}
        {Lisp-Entry "uninstall-current-designer" #f 529 29 529 55 ("set!" "uninstall-designer" "client" "self" "remove-designer-listener" "designer" "when")}
        {Lisp-Entry "on-designer" #f 537 29 537 40 (":send-before" ":child-remove" ":child-add" "set-controller-modified?" "undoable?:" "value:" "property:" "component:" "branch:" "get-property" "property-change" ":property-change" "case" "get-kind" "kind" "let" "evt")}
        {Lisp-Entry "add-editor-listener" #f 552 18 552 37 ("add-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "remove-editor-listener" #f 556 18 556 40 ("remove-listener" "listeners" "set!" "listener")}
        {Lisp-Entry "process-client-change" #f 560 11 560 32 ("invoke" "listener" "function" "for-each" "client:" "old:" "self" ":client-change" "Editor-Event" "new" "evt" "let" "listeners" "when" "client" "old")}
        {Lisp-Entry "process-designer-change" #f 568 11 568 34 ("invoke" "listener" "function" "for-each" "designer:" "old:" "self" ":designer-change" "Editor-Event" "new" "evt" "let" "listeners" "when" "designer" "old")}
        {Lisp-Entry "process-branch-changing" #f 576 18 576 41 ("invoke" "listener" "function" "for-each" "branch:" "self" ":branch-changing" "Editor-Event" "new" "evt" "let" "listeners" "when" "branch")}
        {Lisp-Entry "process-branch-changed" #f 584 18 584 40 ("invoke" "listener" "function" "for-each" "branch:" "self" ":branch-changed" "Editor-Event" "new" "evt" "let" "listeners" "when" "branch")}
        {Lisp-Entry "process-selection-changing" #f 592 18 592 44 ("invoke" "listener" "function" "for-each" "user-origin?:" "force?:" "force-parent?:" "origin:" "self" ":selection-changing" "Selection-Event" "new" "evt" "let" "listeners" "when" "user-origin?" "force?" "force-parent?" "origin" "selection" "old")}
        {Lisp-Entry "process-selection-changed" #f 600 18 600 43 ("invoke" "listener" "function" "for-each" "user-origin?:" "force?:" "force-parent?:" "origin:" "self" ":selection-changed" "Selection-Event" "new" "evt" "let" "listeners" "when" "user-origin?" "force?" "force-parent?" "origin" "selection" "old")}
        {Lisp-Entry "process-property-selected" #f 608 18 608 43 ("invoke" "listener" "function" "for-each" "property:" "self" ":property-selected" "Editor-Event" "new" "evt" "let" "listeners" "when" "property")}
        {Lisp-Entry "process-saving" #f 616 18 616 32 ("invoke" "listener" "function" "for-each" "self" ":saving" "Editor-Event" "new" "evt" "let" "listeners" "when")}
        {Lisp-Entry "process-saved" #f 624 18 624 31 ("invoke" "listener" "function" "for-each" "self" ":saved" "Editor-Event" "new" "evt" "let" "listeners" "when")}
        {Lisp-Entry "get-rights" #f 637 18 637 28 ("rights")}
        {Lisp-Entry "set-rights" #f 641 18 641 28 ("rights" "set!" "value")}
        {Lisp-Entry "editor-title" #f 650 26 650 38 ("class-of" "type-name" "format" "not" "if" "get-reference" "reference" "let")}}
      {Lisp-Entry "Editor-Undoer" #f 662 7 662 20 ("Undoer")
        {Lisp-Entry "play-action" #f 665 11 665 22 ("play-action" "'play-action" "unimplemented" "action")}}}})
"Editor-View-Controller"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Editor-View-Controller.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Editor-View-Controller" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Editor-View-Controller" #f 48 7 48 29 ("Document-Controller")
        {Lisp-Entry "save" #f 52 11 52 15 ("document" "save-content-patch")}
        {Lisp-Entry "name-status" #f 56 11 56 22 ("type-name" "get-name" "file?" "get-origin" "origin" "get-form" "form" "newname" "not" "if" "document" "get-designer" "designer" "let")}
        {Lisp-Entry "update-moniker-time" #f 71 11 71 30 ("moniker")}}}})
"Effect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "effect" "Effect.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.effect.Effect" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Effect" #f 45 7 45 13 ("Object")
        {Lisp-Entry "animate" #f 48 26 48 33 ("size" "pos" "dst" "src")}}}})
"Element-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Element-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Element-Doc" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Element-Doc" #f 45 7 45 18 ("Doc")
        {Lisp-Entry "examples" #f 48 12 48 20 ("generate")}
        {Lisp-Entry "package-name" #f 49 12 49 24 ("generate")}
        {Lisp-Entry "install-child" #f 52 11 52 24 ("nextmethod" "else" "set-examples" "examples" "get-model-name" "case" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "property-presentation" #f 63 16 63 37 ("nextmethod" "else" "package-name" "examples" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 70 11 70 27 ("nextmethod" "else" "Doc-Text-List-Row" "new" "examples" "field-name" "case" "property")}}}})
"Entities-Controller"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "entity" "Entities-Controller.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.entity.Entities-Controller" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Entities-Controller" #f 57 7 57 26 ("Object")
        {Lisp-Entry "add-child" #f 65 35 65 44 ("parent" "child")}
        {Lisp-Entry "remove-child" #f 66 35 66 47 ("child")}
        {Lisp-Entry "set-name" #f 67 35 67 43 ("name" "entity")}
        {Lisp-Entry "set-property" #f 68 35 68 47 ("value" "property" "entity")}
        {Lisp-Entry "cut-entities" #f 69 35 69 47 ("entities")}
        {Lisp-Entry "copy-entities" #f 70 35 70 48 ("entities")}
        {Lisp-Entry "paste-parcels" #f 71 35 71 48 ("parent" "parcels")}
        {Lisp-Entry "delete-entities" #f 79 26 79 41 ("delete-entity" "entity" "function" "for-each" "entities")}
        {Lisp-Entry "delete-entity" #f 85 26 85 39 ("remove-child" "entity")}}}})
"Entities-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "entity" "Entities-Tree.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.entity.Entities-Tree" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Entities-Tree" #f 61 7 61 20 ("Tree-View")
        {Lisp-Entry "client" #f 64 8 64 14 ()}
        {Lisp-Entry "controller" #f 65 8 65 18 ()}
        {Lisp-Entry "focus-actions" #f 73 11 73 24 ("nextmethod" "entities-tree" "'entities-tree" "find-actions" "cons")}
        {Lisp-Entry "on-delete-selection" #f 83 11 83 30 ("delete-selection" "evt")}
        {Lisp-Entry "on-rename-selection" #f 87 11 87 30 ("rename-selection" "evt")}
        {Lisp-Entry "context-menu" #f 91 11 91 23 ("track-popup-menu" "when" "get-context-menu" "menu" "let" "function" "with-context-click" "pos")}
        {Lisp-Entry "get-context-menu" #f 99 11 99 27 ("self" "client:" "Entity-Menu" "new")}
        {Lisp-Entry "on-properties" #f 103 11 103 24 ("show-properties" "evt")}
        {Lisp-Entry "get-client" #f 112 18 112 28 ("client")}
        {Lisp-Entry "set-client" #f 116 18 116 28 ("client" "set!" "value")}
        {Lisp-Entry "get-controller" #f 125 18 125 32 ("controller")}
        {Lisp-Entry "set-controller" #f 129 18 129 32 ("controller" "set!" "value")}
        {Lisp-Entry "focus-update-actions" #f 138 11 138 31 ("can-rename?" "rename" "entities-tree" "Action" "set-action-enabled?")}
        {Lisp-Entry "get-factories" #f 147 26 147 39 ("get-factories" "root-factories" "null?" "if" "selected-entity" "entity" "let")}
        {Lisp-Entry "root-factories" #f 154 26 154 40 ()}
        {Lisp-Entry "add-entity" #f 158 26 158 36 ("select-entity" "append" "install-new-entity" "function" "with-update-locked" "set-name" "when" "get-controller" "controller" "presentation->name" "name" "new" "child" "let" "add-entity-request" "values" "if" "added-properties" "receive" "extra-properties" "client" "relocation-parent" "either" "selected-entity" "selected" "get-class" "class" "let*" "select?" "select?:" "properties" "properties:" "presentation" "presentation:" "parent" "parent:" "factory")}
        {Lisp-Entry "add-entity-request" #f 177 29 177 47 ("entity-properties-request" "entity-children" "entity-presentation-request" "values" "parent" "factory")}
        {Lisp-Entry "entity-presentation-request" #f 182 29 182 56 ("validator:" "unicity-domain:" "not" "accepts-empty?:" "french:" "format" "english:" "Locales" "new" "title:" "request-string" "presentation" "get-factory-presentation" "localize" "pres" "entity-name-validator" "name-validator" "get-presentation" "entity" "function" "map" "essay" "unicity-domain" "get-name-unicity?" "name-unicity?" "get-name-mandatory?" "name-mandatory?" "let*" "get-name-prohibited?" "if" "initial-value" "initial-value:" "brothers" "factory")}
        {Lisp-Entry "entity-properties-request" #f 194 29 194 54 ("factory")}
        {Lisp-Entry "entity-name-validator" #f 198 29 198 50 ()}
        {Lisp-Entry "install-new-entity" #f 202 29 202 47 ("add-properties" "set-presentation" "add-child" "properties" "presentation" "parent" "child" "controller")}
        {Lisp-Entry "add-properties" #f 208 29 208 43 ("controller" "set-property" "value" "property" "function" "for-each-property" "properties" "entity")}
        {Lisp-Entry "rename-selection" #f 219 11 219 27 ("rename-entity" "when" "selected-entity" "entity" "let")}
        {Lisp-Entry "rename-entity" #f 225 18 225 31 ("end-rename" "0" "Cell" "new" "cell" "row-rank" "rank" "get-presentation" "initial-value:" "entity-brothers" "get-factory" "entity-presentation-request" "presentation" "let*" "ensure-expanded" "when" "entity-row" "row" "let" "entity")}
        {Lisp-Entry "end-rename" #f 235 11 235 21 ("select-entity" "acquire-focus" "reorder-entity" "sort-entitys?" "and" "when" "get-parent" "parent" "let" "controller" "set-name" "get-cell-data" "set-title" "function" "with-update-locked" "presentation" "cell" "entity")}
        {Lisp-Entry "move-entities" #f 252 11 252 24 ("select-entities" "send-entity-before" "send-before" "for-each" "essay" "target-data" "element" "cardinality" "<" "1" "+" "after" "before" "case" "position" "son-rank" "rank" "get-sons" "sons" "get-father" "father" "move-entities" "bell" "not" "class-of" "relocation-parent" "entity" "key:" "uniform" "parent" "let" "row" "'row" "eq?" "if" "function" "with-update-locked" "get-user-data" "destination" "get-part" "part" "get-row" "dst" "get-view" "get-selected-data" "entities" "get-controller" "controller" "let*" "target" "source")}
        {Lisp-Entry "move-entity-row" #f 277 11 277 26 ("find-entity-position" "not" "if" "function" "move-row" "sort-entities?" "sort?" "client" "either" "destination" "get-user-data" "source" "let*" "get-sons" "cardinality" "1" "=" "get-father" "eq?" "and" "unless" "position" "position:" "father" "row")}
        {Lisp-Entry "reorder-entity" #f 289 11 289 25 ("get-father" "move-entity-row" "find-row" "row" "let" "entity")}
        {Lisp-Entry "find-entity-position" #f 294 29 294 49 ("get-presentation" "find-ordered-position" "father" "row" "entity")}
        {Lisp-Entry "find-entity-insertion" #f 298 29 298 50 ("find-row" "son-rank" "when" "target" "entity" "parent-row")}
        {Lisp-Entry "send-entity-before" #f 303 29 303 47 ("before" "entity")}
        {Lisp-Entry "get-draggable?" #f 312 11 312 25 ("can-move-entity?" "and" "selected-entity" "entity" "let")}
        {Lisp-Entry "get-row-reorder-target" #f 325 11 325 33 ("part:" "row:" "self" "view:" "Tree-Drop-Target" "new" "when" "else" "after" "'after" "'before" "=" "'row" "4" "3" "cond" "part" "can-send-before?" "cdr" "either" "/=" "addable-class?" "has-parent?" "every?" "neq?" "null?" "or" "not" "and" "move?" "visible-count" "<" "before" "+" "2" "1" "memq?" "if" "essay" "before-rank" "get-sons" "last" "before-last" "eq?" "before?" "dst-parent" "row-rank" "dst-rank" "get-father" "dst-father" "dst" "get-parent" "parent-relocation" "entity" "key:" "uniform" "src-parent" "class-of" "remove-duplicates" "src-types" "get-row" "get-user-data" "n" "function" "map" "src" "contiguous-range" "src-range" "get-source" "get-view" "get-selection" "src-selection" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "get-row-target" #f 350 11 350 25 ("get-view" "view" "get-source" "source" "let*" "row" "drag-drop")}
        {Lisp-Entry "receive-drop" #f 357 11 357 23 ("move-entities" "self" "eq?" "when" "get-target" "target" "get-view" "view" "get-source" "source" "let*" "drag-drop" "pos" "sender")}
        {Lisp-Entry "receive-model" #f 366 11 366 24 ("rename-entity" "centered?:" "0" "Point" "position:" "get-controller" "add-view" "function" "with-update-locked" "visible?:" "new" "child" "get-row" "get-user-data" "parent" "get-model" "self" "dispatch" "model" "let*" "target" "window")}
        {Lisp-Entry "parent-relocation" #f 381 29 381 46 ("parent")}
        {Lisp-Entry "relocation-parent" #f 385 29 385 46 ("class" "destination")}
        {Lisp-Entry "can-undo?" #f 394 11 394 20 ()}
        {Lisp-Entry "can-redo?" #f 398 11 398 20 ()}
        {Lisp-Entry "can-cut?" #f 402 11 402 19 ("can-cut-entity?" "entity" "function" "every?" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-copy?" #f 410 11 410 20 ("can-copy-entity?" "entity" "function" "every?" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-paste?" #f 418 11 418 21 ("remove-duplicates" "length" "1" "=" "memq?" "not" "and" "determine-paster" "entity" "function" "map" "parents" "selected-entities" "entities" "let*")}
        {Lisp-Entry "can-delete?" #f 427 11 427 22 ("can-delete-entity?" "entity" "function" "every?" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-rename?" #f 435 11 435 22 ("can-rename-entity?" "car" "entity" "1" "length" "=" "and" "selected-entities" "entities" "let")}
        {Lisp-Entry "can-select-all?" #f 442 11 442 26 ()}
        {Lisp-Entry "cut-selection" #f 446 11 446 24 ("controller" "cut-entities" "get-selection" "with-deleted-selection" "function" "with-update-locked" "bell" "null?" "if" "selected-entities" "entities" "let")}
        {Lisp-Entry "copy-selection" #f 457 11 457 25 (".150" "duration:" "get-application" "update-focus-actions" "controller" "copy-entities" "function" ":wait" "with-cursor" "bell" "null?" "if" "selected-entities" "entities" "let")}
        {Lisp-Entry "paste-clipboard" #f 468 11 468 26 ("get-model" "get-content" "car" "master" "parcel" "key:" "partition" "relocation-parent" "controller" "paste-parcels" "model" "bind" "info" "for-each" ":wait" "with-cursor" "function" "with-update-locked" "get-jazz-parcels" "parcels" "client" "selected-entity" "either" "parent" "let")}
        {Lisp-Entry "delete-selection" #f 481 11 481 27 ("controller" "delete-entities" "function" "with-deleted-selection" "confirm-close" "get-selected-data" "entities" "not-null?" "when" "get-selection" "selection" "let")}
        {Lisp-Entry "confirm-close" #f 491 11 491 24 ("confirm-action" "entities")}
        {Lisp-Entry "confirm-action" #f 495 11 495 25 ("throw-cancel" "cancel" "no" "yes" "case" "confirmation" "'confirmation" "type:" "localize" "message-box" "code" "let" "text")}
        {Lisp-Entry "selection-change" #f 508 11 508 27 ("update-focus-actions" "get-application" "appl" "let" "user-origin?" "force?" "old-selection")}
        {Lisp-Entry "selected-entity" #f 513 18 513 33 ("get-row" "get-user-data" "client" "null?" "if" "get-single-selection" "selection" "let")}
        {Lisp-Entry "selected-entities" #f 520 18 520 35 ("get-row" "get-user-data" "row" "function" "map" "client" "list" "null?" "if" "get-ordered-selection" "selection" "let")}
        {Lisp-Entry "entity-row" #f 529 18 529 28 ("continuation-return" "get-user-data" "eq?" "when" "rank" "row" "for-each-row" "return" "function" "continuation-capture" "entity")}
        {Lisp-Entry "entity-visible-row" #f 539 11 539 29 ("user-data-index" "entity")}
        {Lisp-Entry "select-entity" #f 543 18 543 31 ("set-single-selection" "when" "entity-visible-row" "row" "let" "entity")}
        {Lisp-Entry "select-entities" #f 550 18 550 33 ("set-selection" "entity-visible-row" "map" "remove-nils" "rows" "let" "entities")}
        {Lisp-Entry "find-row" #f 556 29 556 37 ("entity-row" "entity")}
        {Lisp-Entry "preserving-update" #f 565 18 565 35 ("selected-entities" ":selected-entities" "get-expand-state" "expand-state:" "update")}
        {Lisp-Entry "update" #f 569 26 569 32 ("rest")}
        {Lisp-Entry "entity-parent" #f 578 38 578 51 ("entity")}
        {Lisp-Entry "entity-children" #f 582 38 582 53 ("entity")}
        {Lisp-Entry "entity-brothers" #f 586 11 586 26 ("entity-children" "remove" "when" "entity-parent" "parent" "let" "entity")}
        {Lisp-Entry "update-menu" #f 597 18 597 29 ("before-properties" "'before-properties" "end-edit-group" "'end-edit-group" "or" "empty-properties?" "get-visible?" "empty-entity?" "empty-edit?" "properties" "'properties" "rename-selection" "'rename-selection" "delete-selection" "'delete-selection" "'paste" "'copy" "'cut" "not" "set!" "end-add-group" "'end-add-group" "set-before" "set-parent" "get-title" "localize" "format" "set-title" "get-icon" "set-icon" "unique" "set-visible?" "when" "get-children" "children" "self" "add-entities" "1" "=" "if" "'add-item" "add-item" "'add-menu" "locate" "add-menu" "let" "empty-add?" "get-categorized-properties" "can-view-properties?" "and" "can-properties?" "rename" "entities-tree" "can-rename?" "delete" "can-delete?" "paste" "can-paste?" "copy" "can-copy?" "cut" "view" "Action" "get-action-enabled?" "can-cut?" "length" "count" "car" "entity" "selected-entities" "entities" "get-application" "appl" "let*" "menu")}
        {Lisp-Entry "show-properties" #f 650 18 650 33 ("focus?:" "workspace:" "Properties-Manager" "select-palette")}}}})
"Entities-Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "entity" "Entities-Tree-Actions.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.entity.Entities-Tree-Actions" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Entities-Tree-Actions" #f 46 7 46 28 ("F2" "Shortcut" "shortcut:" "on-rename" ":focus" "Event-Handler" "action-handler:" "rename" "name:" "Actions")}}})
"Entity"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "entity" "Entity.jazz"} 1226584781
    {Lisp-Entry "jazz.library.entity.Entity" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Entity" #f 75 11 75 17 ()
        {Lisp-Entry "get-factory" #f 78 35 78 46 ()}
        {Lisp-Entry "get-factories" #f 79 35 79 48 ()}
        {Lisp-Entry "get-presentation" #f 80 35 80 51 ()}
        {Lisp-Entry "set-presentation" #f 81 35 81 51 ("presentation" "controller")}
        {Lisp-Entry "can-cut-entity?" #f 82 35 82 50 ()}
        {Lisp-Entry "can-copy-entity?" #f 83 35 83 51 ()}
        {Lisp-Entry "can-paste-entity?" #f 84 35 84 52 ()}
        {Lisp-Entry "determine-paster" #f 85 35 85 51 ("rest")}
        {Lisp-Entry "can-rename-entity?" #f 86 35 86 53 ()}
        {Lisp-Entry "can-delete-entity?" #f 87 35 87 53 ()}
        {Lisp-Entry "can-move-entity?" #f 88 35 88 51 ()}
        {Lisp-Entry "can-view-properties?" #f 89 35 89 55 ()}
        {Lisp-Entry "get-categorized-properties" #f 90 35 90 61 ()}}}})
"Entity-Factory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "entity" "Entity-Factory.jazz"} 1226584781
    {Lisp-Entry "jazz.library.entity.Entity-Factory" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Entity-Factory" #f 56 7 56 21 ("Object")
        {Lisp-Entry "get-class" #f 59 35 59 44 ()}
        {Lisp-Entry "get-name-prohibited?" #f 60 35 60 55 ()}
        {Lisp-Entry "get-name-mandatory?" #f 61 35 61 54 ()}
        {Lisp-Entry "get-name-unicity?" #f 62 35 62 52 ()}
        {Lisp-Entry "presentation->name" #f 63 35 63 53 ("presentation")}
        {Lisp-Entry "get-factory-presentation" #f 64 35 64 59 ()}
        {Lisp-Entry "get-factory-image" #f 65 35 65 52 ()}}}})
"Entity-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "entity" "Entity-Menu.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.entity.Entity-Menu" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Entity-Menu" #f 58 7 58 18 ("properties" "before-properties" "rename" "rename-selection" "delete" "components-tree" "delete-selection" "end-edit-group" "paste" "copy" "view" "Action" "action:" "cut" "end-add-group" "add-menu" "Bitmap-Resource" "icon:" "title:" "add-item" "name:" "Context-Menu")
        {Lisp-Entry "finish" #f 76 11 76 17 ("self" "client" "update-menu" "nextmethod" "rest")}}
      {Lisp-Entry "Add-Menu" #f 86 7 86 15 ("Context-Menu")
        {Lisp-Entry "add-entities" #f 89 21 89 33 (":factory" "client:" "list" "properties:" "on-add" "'on-add" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "icon:" "Label-Item" "get-factory-presentation" "localize" "format" "title" "get-factory-image" "icon" "self" "parent:" "Separator-Item" "new" "null?" "if" "factory" "for-each" "get-factories" "factories" "let" "function" "with-update-locked" "client")}
        {Lisp-Entry "on-add" #f 103 11 103 17 ("add-entity" "factory:" "factory" "client:" "get-property" "client" "let" "evt")}}}})
"Entity-Parcel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "entity" "Entity-Parcel.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.entity.Entity-Parcel" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Entity-Parcel" #f 46 7 46 20 ("Clipboard-Parcel")}}})
"Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Entry" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Entry" #f 45 7 45 12 ("Object")}}})
"Entry-Combo-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Entry-Combo-Box.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Entry-Combo-Box" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Entry-Combo-Box" #f 48 7 48 22 ("Combo-Box")
        {Lisp-Entry "form-model" #f 51 11 51 21 ("nextmethod" "else" "Entry-Combo-Text-View" "body" "get-name" "case" "form")}}}})
"Entry-Combo-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Entry-Combo-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.view.Entry-Combo-Text-View" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Entry-Combo-Text-View" #f 46 7 46 28 ("show-unfocused-selection?:" "focus-selects-all?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Combo-Text-View")
        {Lisp-Entry "editor" #f 49 12 49 18 ("generate")}
        {Lisp-Entry "focus-gain" #f 56 11 56 21 ("editor-focus-gain" "get-manager" "manager" "let" "editable?" "editor" "and" "when" "nextmethod" "old")}
        {Lisp-Entry "focus-lose" #f 64 11 64 21 ("editor-focus-lose" "get-manager" "manager" "let" "editable?" "editor" "and" "when" "nextmethod" "view")}
        {Lisp-Entry "get-context-menu" #f 72 11 72 27 ("new-text-context-menu")}}}})
"Entry-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Entry-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Entry-Text-View" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Entry-Text-View" #f 47 7 47 22 ("show-unfocused-selection?:" "focus-selects-all?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Plain-Text-View")
        {Lisp-Entry "editor" #f 50 12 50 18 ("generate")}
        {Lisp-Entry "focus-gain" #f 57 11 57 21 ("editor-focus-gain" "get-manager" "manager" "let" "editable?" "editor" "and" "when" "nextmethod" "old")}
        {Lisp-Entry "focus-lose" #f 65 11 65 21 ("editor-focus-lose" "get-manager" "manager" "let" "editable?" "editor" "and" "when" "nextmethod" "view")}
        {Lisp-Entry "get-context-menu" #f 73 11 73 27 ("new-text-context-menu")}}}})
"Entry-Widget"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "widget" "Entry-Widget.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.widget.Entry-Widget" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Entry-Widget" #f 47 7 47 19 ("text" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "scroller" "name:" "edge" "border-type:" "Border-View")
        {Lisp-Entry "default-size" #f 57 11 57 23 ("21" "200" "Dimension")}}}})
"Enumeration-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Enumeration-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Enumeration-Domain" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Enumeration-Domain" #f 45 7 45 25 ("limit" "strict?" "choices" "100" "initialize" "width" "nullable?" "Domain")
        {Lisp-Entry "validate-value" #f 60 11 60 25 ("property:" "present-choice" "map" "join" "format" "message:" "Integrity-Violation" "new" "add-violation" "car" "key:" "choices" "member?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present-choice" #f 65 11 65 25 ("cadr" "localize" "car" "cdr" "not" "if" "choice")}
        {Lisp-Entry "present" #f 76 11 76 18 ("cadr" "localize" "choices" "assq" "pair" "let" "not" "if" "value")}
        {Lisp-Entry "setup-entry" #f 90 11 90 22 ("choices" "combo" "'combo" "locate" "set-choices" "self" "domain:" "19" "width" "Dimension" "size:" "parent:" "Enumeration-Entry" "new" "entry" "let" "client" "view")}
        {Lisp-Entry "setup-list-entry" #f 95 11 95 27 ("choices" "setup" "self" "domain:" "parent:" "Enumeration-List-Entry" "new" "entry" "let" "client" "view")}}}})
"Enumeration-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "entry" "Enumeration-Entry.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.entry.Enumeration-Entry" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Enumeration-Entry" #f 48 7 48 24 ("Label" "Font" "font:" "Default" "Text-Style" "default-style:" "top-padding:" "2" "left-padding:" "body" "focusable?:" "condensed?:" "combo" "entry" "style:" "edge" "border-type:" "border" "name:" "Property-Entry")
        {Lisp-Entry "finish" #f 58 11 58 17 ("self" "body" "set-editor" "string-di=?" "combo" "'combo" "locate" "set-entry-test" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" #f 69 11 69 19 ("body" "combo" "locate")}
        {Lisp-Entry "validate" #f 78 11 78 19 ("else" "format-plural" "format" "tie" "string-length" ">" "string?" "get-nullable?" "nil?" "cond" "value" "french:" "english:" "Locales" "message:" "Property-Violation" "new" "car" "key:" "get-value" "member?" "combo" "'combo" "locate" "valid-value?" "not" "get-strict?" "and" "if" "get-limit" "limit" "get-choices" "choices" "let" "domain")}
        {Lisp-Entry "get-value" #f 103 11 103 20 ("combo" "'combo" "locate" "get-value")}
        {Lisp-Entry "set-value" #f 107 11 107 20 ("combo" "'combo" "locate" "set-value" "value")}
        {Lisp-Entry "get-modified?" #f 111 11 111 24 ("combo" "'combo" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 115 11 115 24 ("combo" "'combo" "locate" "set-modified?" "value")}
        {Lisp-Entry "set-editable?" #f 124 11 124 24 ("combo" "'combo" "set-editable?" "none" "'none" "edge" "'edge" "if" "border" "'border" "locate" "set-border-type" "value")}}}})
"Enumeration-List-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "entry" "Enumeration-List-Entry.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.entry.Enumeration-List-Entry" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Enumeration-List-Entry" #f 47 7 47 29 ("200" "width:" "toplevel-controls?:" "controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" ":icons" "portfolio:" "entry" "filled-column:" "show-header?:" "tree" "document" "style:" "shown?:" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "border" "name:" "Property-Entry")
        {Lisp-Entry "setup" #f 66 21 66 26 ("patch-tree" "list" "children:" "add-row" "user-data:" "color:" "title:" "parent:" "font:" "Check-Box" "checkbox" "Label" "Label-Bold" "Font" "filled" "'filled" "size" "eq?" "if" "font" "Black" "name:" "Color" "color" "4" "Rect" "layout-insets:" "fill" "'fill" "layout-type:" "Layout-View" "new" "layout" "0" "border" "title" "get-name" "name" "let*" "component" "for-each" "remove-every-row" "function" "with-update-locked" "'tree" "locate" "tree" "get-creator" "child" "get-children" "components" "let" "key" "client")}
        {Lisp-Entry "patch-tree" #f 86 18 86 28 ("layout-drawing" "rank" "row" "function" "for-each-visible-row" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "get-value" #f 98 11 98 20 ("get-output" "put" "get-checked?" "when" "name" "checkbox" "row" "function" "for-each-checkbox" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "set-value" #f 107 11 107 20 ("set-checked?" "member?" "checked?" "let" "name" "checkbox" "row" "function" "for-each-checkbox" "value")}
        {Lisp-Entry "get-modified?" #f 114 11 114 24 ("continuation-return" "get-modified?" "when" "name" "checkbox" "row" "function" "for-each-checkbox" "return" "lambda" "continuation-capture")}
        {Lisp-Entry "set-modified?" #f 124 11 124 24 ("set-modified?" "name" "checkbox" "row" "function" "for-each-checkbox" "value")}
        {Lisp-Entry "for-each-checkbox" #f 135 11 135 28 ("name" "Check-Box" "is?" "when" "get-user-data" "checkbox" "rank" "row" "function" "for-each-row" "'tree" "locate" "tree" "let" "proc")}}}})
"Enumeration-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Enumeration-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Enumeration-Row" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Enumeration-Row" #f 46 7 46 22 ("Combo-Row")
        {Lisp-Entry "list?" #f 50 12 50 17 ("set-list?" "get-list?")}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("choose" "'choose" "set-kind" "list?~self" "choices~self" "set!" "nextmethod" "apply" "others" "list?" "choices" "bind-keywords" "rest")}
        {Lisp-Entry "get-list?" #f 71 18 71 27 ("list?")}
        {Lisp-Entry "set-list?" #f 75 18 75 27 ("list?" "set!" "value")}
        {Lisp-Entry "combo-choose" #f 84 11 84 23 ("focus-editor" "enter-edited-value" "set-edited-value" "selected:" "choices" "names:" "Domain-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" #f 97 11 97 18 ("choices" "assq" "cadr" "localize" "name" "function" "map" "join" "null?" "if" "names")}
        {Lisp-Entry "get-edited-value" #f 111 11 111 27 ("equal?" "test:" "cadr" "localize" "info" "key:" "choices" "find-in" "car" "title" "function" "map" "parse-strings" "strings" "=" "empty-string?" "or" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" #f 121 11 121 27 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Enumeration-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Enumeration-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Enumeration-Tester" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Enumeration-Tester" #f 44 7 44 25 ("title:" "Tester")}}})
"Error-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Error-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Error-Tester" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Error-Tester" #f 45 7 45 19 ("title:" "Tester")}}})
"Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "event" "Event.jazz"} 1226584781
    {Lisp-Entry "jazz.library.event.Event" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Event" #f 46 7 46 12 ("Object")
        {Lisp-Entry "kind" #f 49 8 49 12 ()}
        {Lisp-Entry "sender" #f 50 8 50 14 ()}
        {Lisp-Entry "properties" #f 51 8 51 18 ()}
        {Lisp-Entry "modifiers" #f 52 8 52 17 ()}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("modifiers-keys" "modifiers~self" "properties~self" "sender~self" "kind~self" "set!" "nextmethod" "properties" "sender" "kind")}
        {Lisp-Entry "print" #f 63 11 63 16 ("properties" "not-null?" "kind" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-kind" #f 76 18 76 26 ("kind")}
        {Lisp-Entry "get-sender" #f 80 18 80 28 ("sender")}
        {Lisp-Entry "get-properties" #f 84 18 84 32 ("properties")}
        {Lisp-Entry "get-property" #f 88 18 88 30 ("properties" "getf" "keyword")}
        {Lisp-Entry "get-modifiers" #f 92 18 92 31 ("modifiers")}
        {Lisp-Entry "get-shift?" #f 96 18 96 28 ("modifiers" "shift-key?")}
        {Lisp-Entry "get-control?" #f 100 18 100 30 ("modifiers" "control-key?")}
        {Lisp-Entry "get-alt?" #f 104 18 104 26 ("modifiers" "alt-key?")}}}})
"Event-Consumer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "consumer" "Event-Consumer.jazz"} 1226584780
    {Lisp-Entry "jazz.library.consumer.Event-Consumer" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Event-Consumer" #f 44 11 44 25 ("Consumer")
        {Lisp-Entry "get-event-consumer" #f 47 35 47 53 ()}
        {Lisp-Entry "set-event-consumer" #f 48 35 48 53 ("consumer")}
        {Lisp-Entry "deliver-event" #f 49 35 49 48 ("evt" "proc" "target" "handler")}}}})
"Event-Handler"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "handler" "Event-Handler.jazz"} 1226584781
    {Lisp-Entry "jazz.library.handler.Event-Handler" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Event-Handler" #f 44 7 44 20 ("Handler")
        {Lisp-Entry "properties" #f 47 8 47 18 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("properties~self" "set!" "nextmethod" "apply" "others" "properties" "bind-keywords" "rest")}
        {Lisp-Entry "fold-literal" #f 56 11 56 23 ("properties" ",properties" "',properties" "properties:" "target" ",target" "',target" "target:" "execute" ",execute" "',execute" "execute:" "form-level" ",form-level" "',form-level" "form-level:" "method-name" ",method-name" "',method-name" "method-name:" "target-name" ",target-name" "',target-name" "target-name:" "Event-Handler" "new")}
        {Lisp-Entry "print" #f 66 11 66 16 ("properties" "null?" "if" "method-name" "target-name" "target" "either" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-properties" #f 81 18 81 32 ("properties")}
        {Lisp-Entry "get-property" #f 85 18 85 30 ("properties" "getf" "keyword")}
        {Lisp-Entry "invoke" #f 98 11 98 17 ("self" "redirect-handler" "invoke-target" "target-name" "error" "not" "find-target" "either" "target" "let" "execute" "if" "action" "action:" "event" "sender")}
        {Lisp-Entry "invoke-target" #f 107 18 107 31 ("else" "record" "get-recorder" "recorder" "action/handler" "record-event?" "macro-recording?" "and" "when" "get-application" "appl" "self" "deliver-event" "prog1" "get-event-consumer" "consumer" "Event-Consumer" "is?" "error" "not" "cond" "method-name" "dispatch" "proc" "let" "action" "action:" "event" "target")}}}})
"Event-Spy"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "spy" "Event-Spy.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.spy.Event-Spy" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Event-Categories" #f 53 10 53 26 ("unknown" "menu" "focus" "clipboard" "keyboard" "mouse" "action" "paint" "window" "component" "Bitmap-Resource" "general")}
      {Lisp-Entry "Event-Classes" #f 67 10 67 23 ("Selection-Event" "Print-Event" "Paint-Event" "mouse" "Mouse-Event" "Keyboard-Event" "Focus-Event" "focus" "Edition-Event" "paint" "Draw-Event" "window" "Cursor-Event" "Component-Event" "general" "Break-Event" "component" "Action-Event")}
      {Lisp-Entry "Event-Spy" #f 87 7 87 16 ("213" "226" "toplevel-controls?:" "140" "width:" "title:" "tree" "tree-header" "content" "tree-scroller" "tree-border" "name:" "Spy-View")
        {Lisp-Entry "host-title" #f 109 16 109 26 ()}
        {Lisp-Entry "host-position" #f 113 16 113 29 ("152" "154" "Point")}
        {Lisp-Entry "host-size" #f 117 16 117 25 ("339" "736" "Dimension")}
        {Lisp-Entry "spy-domain" #f 126 11 126 21 ("views" "'views")}
        {Lisp-Entry "spy" #f 130 11 130 14 ("self" "Spyer" "new" "set-event-consumer" "get-event-consumer" "old-consumer" "set!" "Event-Consumer" "is?" "when" "client")}
        {Lisp-Entry "unspy" #f 136 11 136 16 ("old-consumer" "set-event-consumer" "Event-Consumer" "is?" "when" "client")}
        {Lisp-Entry "incoming-event" #f 141 11 141 25 ("slowdown-quantum" "sleep" "slowdown?" "update-view" "ensure-at-end" "list" "children:" "add-row" "get-visible-count" "item" "5" "*" "make-string" "format" "c3" "c2" "get-kind" "Tree-Label" "c1" "image:" "title:" "Tree-Node" "new" "c0" "parameters" "Event-Categories" "assq" "cdr" "image" "get-tree" "tree" "all" "'all" "category" "eq?" "or" "when" "unknown" "'unknown" "second" "if" "cat" "car" "key:" "Event-Classes" "find-in" "info" "class-of" "type-name" "type" "let*" "evt" "client" "window" "level")}
        {Lisp-Entry "incoming-result" #f 162 11 162 26 ("result" "item" "level")}}
      {Lisp-Entry "Spyer" #f 171 7 171 12 ("Event-Consumer" "Object")
        {Lisp-Entry "level" #f 174 8 174 13 ("0")}
        {Lisp-Entry "spy-window" #f 175 8 175 18 ()}
        {Lisp-Entry "client" #f 176 8 176 14 ()}
        {Lisp-Entry "get-event-consumer" #f 179 11 179 29 ()}
        {Lisp-Entry "set-event-consumer" #f 180 11 180 29 ("consumer")}
        {Lisp-Entry "initialize" #f 183 11 183 21 ("client" "spy-window" "set!" "nextmethod" "clt" "wnd")}
        {Lisp-Entry "deliver-event" #f 189 11 189 24 ("decrease!" "increase!" "client" "level" "spy-window" "incoming-event" "evt" "proc" "target" "handler")}}}})
"Exception-Presenter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "application" "Exception-Presenter.jazz"} 1226584785
    {Lisp-Entry "jazz.system.application.Exception-Presenter" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Exception-Presenter" #f 48 7 48 26 ("Object")}
      {Lisp-Entry "Exception-Presenter" #f 54 7 54 26 ("Object")
        {Lisp-Entry "present" #f 57 18 57 25 ("set-auto-continue?" "remove-nils" "actions:" "present-execution-stack" "content:" "message-box" "code" "let" "continue-exception" "get-continuable?" "get-auto-continue?" "and" "get-execution-stack" "execution-stack" "get-execution-context" "execution-context" "cancel" "'cancel" "cancel-action" "continue-all" "continue-all-action" "continue" "continue-action" "restart" "restart-action" "yes" "'yes" "else" "if" "case" "list" "yes-action" "continuable?" "restartable?" "present-message" "message" "let*" "prefix?" "prefix?:" "error" "'error" "type" "type:" "exception")}
        {Lisp-Entry "present-execution-stack" #f 89 11 89 34 ("father:" "detail" "Bitmap-Resource" "image:" "either" "title:" "Tree-Node" "list" "children:" "collapsed" "'collapsed" "state:" "add-row" "row" "get-details" "details" "get-title" "title" "node" "function" "for-each" "'tree" "locate" "tree" "150" "450" "Dimension" "size:" "Context-Border" "new" "border" "let*" "when" "execution-stack")}}
      {Lisp-Entry "Context-Border" #f 109 7 109 21 ("300" "width:" "title:" "node" "selection-mode:" ":icons" "portfolio:" "tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "flat?:" "Outline-Border" "name:" "Color" "border-color:" "solid" "border-type:" "Border-View")}
      {Lisp-Entry "Context-Tree" #f 127 7 127 19 ("Tree-View")}}})
"Exception-Snapshot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "snapshot" "Exception-Snapshot.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.snapshot.Exception-Snapshot" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Exception-Snapshot" #f 45 7 45 25 ("Component")
        {Lisp-Entry "address" #f 48 12 48 19 ("generate")}
        {Lisp-Entry "code" #f 49 12 49 16 ("generate")}
        {Lisp-Entry "description" #f 50 12 50 23 ("generate")}
        {Lisp-Entry "construct-literal" #f 54 16 54 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "print" #f 58 11 58 16 ("description" "description:" "code" "code:" "address" "address:" "list" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}}})
"Exit-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "process" "Exit-Listener.jazz"} 1226584785
    {Lisp-Entry "jazz.system.process.Exit-Listener" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Exit-Listener" #f 46 11 46 24 ("Listener")
        {Lisp-Entry "prepare-exit" #f 49 35 49 47 ()}}}})
"Exit-Signal"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "process" "Exit-Signal.jazz"} 1226584785
    {Lisp-Entry "jazz.system.process.Exit-Signal" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Exit-Signal" #f 44 7 44 18 ("Signal")
        {Lisp-Entry "status" #f 47 8 47 14 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("status~self" "set!" "nextmethod" "0" "status" "status:")}
        {Lisp-Entry "get-status" #f 60 18 60 28 ("status")}}}})
"Experiments"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "experiments" "Experiments.jazz"} 1226584778})
"Explore-Error"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "exception" "Explore-Error.jazz"} 1226584781
    {Lisp-Entry "jazz.library.exception.Explore-Error" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Explore-Error" #f 44 7 44 20 ("Error")
        {Lisp-Entry "start" #f 47 8 47 13 ()}
        {Lisp-Entry "end" #f 48 8 48 11 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("end~self" "start~self" "set!" "nextmethod" "apply" "others" "end" "start" "bind-keywords" "rest")}
        {Lisp-Entry "get-start" #f 63 18 63 27 ("start")}
        {Lisp-Entry "get-end" #f 67 18 67 25 ("end")}
        {Lisp-Entry "get-range" #f 71 18 71 27 ("end" "start" "Range$Cell$" "new")}}}})
"Explorer-Mark"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Explorer-Mark.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Explorer-Mark" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Explorer-Mark" #f 45 7 45 20 ("Object")
        {Lisp-Entry "kind" #f 48 8 48 12 ("generate")}
        {Lisp-Entry "range" #f 49 8 49 13 ("generate")}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("range~self" "kind~self" "set!" "nextmethod" "range" "kind")}
        {Lisp-Entry "print" #f 58 11 58 16 ("range" "kind" "format" "function" "self" "print-unreadable" "readably" "printer")}}}})
"Explorer-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Explorer-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Explorer-Tester" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Explorer-Tester" #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-sequence-explorer" "invoke")}
        {Lisp-Entry "test-sequence-explorer" #f 61 11 61 33 ("backward" "'backward" "direction:" "String" "type:" "2" "start:" "c" "b" "a" "Sequence-Explorer" "new" "gather" "=" "rpt" "validate")}}}})
"FTP-Connection"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "inet" "FTP-Connection.jazz"} 1226584783
    {Lisp-Entry "jazz.library.internet.FTP-Connection" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "FTP-Connection" #f 44 7 44 21 ("Internet-Connection")
        {Lisp-Entry "default-port" #f 47 11 47 23 ("INTERNET_DEFAULT_FTP_PORT")}
        {Lisp-Entry "open-connection" #f 51 11 51 26 ("0" "INTERNET_SERVICE_FTP" "NULL" "either" "get-handle" "InternetConnect" "validate-server" "password" "username" "port" "server" "session")}
        {Lisp-Entry "validate-server" #f 56 11 56 26 ("error" "0" "subseq" "=" "3" "length" ">=" "and" "when" "server")}
        {Lisp-Entry "get-current-directory" #f 62 18 62 39 ("adjust-string" "error" "handle" "FtpGetCurrentDirectory" "not" "if" "MAX_PATH" "make-string" "dirname" "let")}
        {Lisp-Entry "get-file" #f 70 18 70 26 ("error" "encore-transfer-type" "0" "parse" "handle" "FtpGetFile" "not" "when" "ascii" "'ascii" "transfer-type" "transfer-type:" "local" "remote")}
        {Lisp-Entry "put-file" #f 75 18 75 26 ("error" "0" "encore-transfer-type" "parse" "handle" "FtpPutFile" "not" "when" "ascii" "'ascii" "transfer-type" "transfer-type:" "remote" "local")}
        {Lisp-Entry "delete-file" #f 80 18 80 29 ("error" "handle" "FtpDeleteFile" "not" "when" "remote")}
        {Lisp-Entry "encore-transfer-type" #f 90 11 90 31 ("error" "else" "FTP_TRANSFER_TYPE_BINARY" "binary" "FTP_TRANSFER_TYPE_ASCII" "ascii" "case" "transfer-type")}}}})
"Favorite"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorite.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorite" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Favorite" #f 46 7 46 15 ("Component")
        {Lisp-Entry "title" #f 49 12 49 17 ("generate")}
        {Lisp-Entry "get-class-image" #f 57 16 57 31 ("Bitmap-Resource")}
        {Lisp-Entry "display-property?" #f 61 11 61 28 ("visible?" "children" "before" "name-info" "field-name" "memq?" "not" "property")}
        {Lisp-Entry "get-row-instance" #f 65 11 65 27 ("nextmethod" "else" "String-Row" "new" "title" "field-name" "case" "property")}}}})
"Favorite-Clipboard"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorite-Clipboard.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorite-Clipboard" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Favorite-Clipboard" #f 46 7 46 25 ("Favorite")
        {Lisp-Entry "string" #f 49 12 49 18 ("generate")}
        {Lisp-Entry "launch" #f 57 11 57 17 ("user-message" "set-clipboard-text" "string" "when")}
        {Lisp-Entry "get-class-image" #f 68 16 68 31 ("Bitmap-Resource")}}}})
"Favorite-Compare-Directories"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "favorite" "Favorite-Compare-Directories.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.favorite.Favorite-Compare-Directories" #f 37 9 37 61 ("jazz")
      {Lisp-Entry "Mode-Values" #f 48 12 48 23 ("merge" "backup")}
      {Lisp-Entry "Check-Algorithm-Values" #f 52 12 52 34 ("content" "timestamp")}
      {Lisp-Entry "Favorite-Compare-Directories" #f 57 7 57 35 ("Favorite")
        {Lisp-Entry "mode" #f 60 12 60 16 ("generate")}
        {Lisp-Entry "left" #f 61 12 61 16 ("generate")}
        {Lisp-Entry "right" #f 62 12 62 17 ("generate")}
        {Lisp-Entry "ignored-nodes" #f 63 12 63 25 ("generate")}
        {Lisp-Entry "ignored-leaves" #f 64 12 64 26 ("generate")}
        {Lisp-Entry "ignored-extensions" #f 65 12 65 30 ("generate")}
        {Lisp-Entry "check-algorithm" #f 66 12 66 27 ("generate")}
        {Lisp-Entry "launch" #f 74 11 74 17 ("self" "install-configuration" "get-guest" "guest" "Compare-Directories" "new-frame" "frame" "let*")}
        {Lisp-Entry "get-domain" #f 85 16 85 26 ("nextmethod" "else" "Check-Algorithm-Values" "check-algorithm" "Mode-Values" "choices:" "Enumeration-Domain" "new" "mode" "field-name" "case" "property")}
        {Lisp-Entry "property-presentation" #f 97 16 97 37 ("nextmethod" "else" "check-algorithm" "ignored-extensions" "ignored-leaves" "ignored-nodes" "right" "left" "mode" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 109 11 109 37 ("check-algorithm" "ignored-extensions" "ignored-leaves" "ignored-nodes" "right" "left" "mode")}
        {Lisp-Entry "get-row-instance" #f 113 11 113 27 ("nextmethod" "else" "Directory-Row" "right" "left" "Check-Algorithm-Values" "check-algorithm" "Mode-Values" "choices:" "Combo-Row" "new" "mode" "field-name" "case" "property")}}}})
"Favorite-Compare-Files"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "favorite" "Favorite-Compare-Files.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.favorite.Favorite-Compare-Files" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "Favorite-Compare-Files" #f 48 7 48 29 ("Favorite")
        {Lisp-Entry "green" #f 51 12 51 17 ("generate")}
        {Lisp-Entry "blue" #f 52 12 52 16 ("generate")}
        {Lisp-Entry "launch" #f 60 11 60 17 ("self" "install-configuration" "get-guest" "guest" "Compare-Files" "new-frame" "frame" "let*")}
        {Lisp-Entry "get-categorized-properties" #f 71 11 71 37 ("blue" "green")}
        {Lisp-Entry "get-row-instance" #f 75 11 75 27 ("nextmethod" "else" "File-Row" "new" "blue" "green" "field-name" "case" "property")}}}})
"Favorite-Definition"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorite-Definition.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorite-Definition" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Favorite-Definition" #f 45 7 45 26 ("Favorite")
        {Lisp-Entry "definition" #f 48 12 48 22 ("generate")}
        {Lisp-Entry "launch" #f 56 11 56 17 ("get-application" "edit-definitions" "definition" "when")}
        {Lisp-Entry "get-class-image" #f 67 16 67 31 ("Bitmap-Resource")}
        {Lisp-Entry "presentation-property?" #f 71 11 71 33 ("definition" "title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 75 11 75 27 ("definition" "title" "either")}
        {Lisp-Entry "set-presentation" #f 79 11 79 27 ("title:" "self" "set-property" "title" "designer")}}}})
"Favorite-Directory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorite-Directory.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorite-Directory" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Favorite-Directory" #f 47 7 47 25 ("Favorite")
        {Lisp-Entry "directory" #f 50 12 50 21 ("generate")}
        {Lisp-Entry "launch" #f 58 11 58 17 ("parse" "user-message" "set-current-directory" "directory" "when")}
        {Lisp-Entry "get-class-image" #f 69 16 69 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-row-instance" #f 73 11 73 27 ("nextmethod" "else" "Directory-Row" "new" "directory" "field-name" "case" "property")}}}})
"Favorite-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorite-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorite-Event" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Favorite-Event" #f 45 7 45 21 ("Favorite")
        {Lisp-Entry "handler" #f 48 12 48 19 ("generate")}
        {Lisp-Entry "launch" #f 56 11 56 17 ("get-properties" ":launch" "Event" "new" "apply" "self" "invoke" "handler" "when")}
        {Lisp-Entry "get-class-image" #f 66 16 66 31 ("Bitmap-Resource")}}}})
"Favorite-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorite-File.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorite-File" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Favorite-File" #f 46 7 46 20 ("Favorite")
        {Lisp-Entry "file" #f 49 12 49 16 ("generate")}
        {Lisp-Entry "launch" #f 57 11 57 17 ("get-application" "edit-document" "file" "when")}
        {Lisp-Entry "get-class-image" #f 67 16 67 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-class-presentation" #f 71 16 71 38 ()}
        {Lisp-Entry "get-row-instance" #f 75 11 75 27 ("nextmethod" "else" "File-Row" "new" "file" "field-name" "case" "property")}}}})
"Favorite-Launch"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorite-Launch.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorite-Launch" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Favorite-Launch" #f 46 7 46 22 ("Favorite")
        {Lisp-Entry "file" #f 49 12 49 16 ("generate")}
        {Lisp-Entry "launch" #f 57 11 57 17 ("shell-execute" "file" "when")}
        {Lisp-Entry "get-class-image" #f 68 16 68 31 ("Bitmap-Resource")}
        {Lisp-Entry "presentation-property?" #f 72 11 72 33 ("file" "title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 76 11 76 27 ("file" "title" "either")}
        {Lisp-Entry "set-presentation" #f 80 11 80 27 ("title:" "self" "set-property" "title" "designer")}
        {Lisp-Entry "get-row-instance" #f 84 11 84 27 ("nextmethod" "else" "File-Row" "new" "file" "field-name" "case" "property")}}}})
"Favorite-Search"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorite-Search.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorite-Search" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Favorite-Search" #f 46 7 46 22 ("Favorite")
        {Lisp-Entry "directories" #f 49 12 49 23 ("generate")}
        {Lisp-Entry "extensions" #f 50 12 50 22 ("generate")}
        {Lisp-Entry "launch" #f 58 11 58 17 ("select-search" "set-visible?" "bring-to-front" "extensions" "'extensions" "get-list" "dir" "function" "map" "format" "set-string-content" "directories-search" "'directories-search" "search" "let" "directories" "'directories" "tab" "'tab" "locate" "set-selection-name" "get-guest" "manager" "get-search-manager" "frame" "get-application" "appl" "let*")}
        {Lisp-Entry "get-class-image" #f 76 16 76 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-row-instance" #f 80 11 80 27 ("nextmethod" "else" "List-Row" "new" "extensions" "directories" "field-name" "case" "property")}}}})
"Favorite-Symbol"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorite-Symbol.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorite-Symbol" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Favorite-Symbol" #f 45 7 45 22 ("Favorite")
        {Lisp-Entry "symbol" #f 48 12 48 18 ("generate")}
        {Lisp-Entry "launch" #f 56 11 56 17 ("get-application" "edit-definitions" "symbol" "when")}
        {Lisp-Entry "get-class-image" #f 66 16 66 31 ("Bitmap-Resource")}
        {Lisp-Entry "presentation-property?" #f 70 11 70 33 ("symbol" "title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 74 11 74 27 ("symbol" "title" "either")}
        {Lisp-Entry "set-presentation" #f 78 11 78 27 ("title:" "self" "set-property" "title" "designer")}}}})
"Favorites"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorites.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorites" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Favorites" #f 45 7 45 16 ("Group")
        {Lisp-Entry "get-class-presentation" #f 53 16 53 38 ()}
        {Lisp-Entry "get-class-image" #f 57 16 57 31 ("Bitmap-Resource")}
        {Lisp-Entry "can-rename-component?" #f 61 11 61 32 ()}
        {Lisp-Entry "can-delete-component?" #f 65 11 65 32 ()}
        {Lisp-Entry "can-move-component?" #f 69 11 69 30 ()}
        {Lisp-Entry "can-copy-component?" #f 73 11 73 30 ()}
        {Lisp-Entry "get-categorized-properties" #f 77 11 77 37 ()}}}})
"Favorites-Adder"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorites-Adder.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorites-Adder" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Favorites-Adder" #f 47 7 47 22 ("39" "cancel" "default?:" "action-handler:" "24" "80" "9" "290" "ok" "tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "172" "191" "38" "43" "on-cancel" "escape-press-handler:" "on-ok" ":host" "Event-Handler" "return-press-handler:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "title" "edge" "border-type:" "19" "204" "11" "70" "Label" "name:" "Font" "font:" "16" "55" "15" "10" "Point" "position:" "title:" "218" "382" "Dimension" "size:" "View")
        {Lisp-Entry "default-title" #f 50 12 50 25 ("set-default-title" "get-default-title")}
        {Lisp-Entry "default-root" #f 51 12 51 24 ("set-default-root" "get-default-root")}
        {Lisp-Entry "finish" #f 68 11 68 17 ("auto-select-first" "'tree" "locate" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "dialog-class" #f 80 16 80 28 ("Favorites-Adder-Dialog")}
        {Lisp-Entry "Favorites-Adder-Dialog" #f 85 14 85 36 ("218" "382" "Dimension" "size:" "300" "450" "Point" "position:" "title:" "Dialog")
          {Lisp-Entry "focus-gain" #f 92 13 92 23 ("title" "'title" "guest" "locate" "acquire-focus" "nextmethod")}
          {Lisp-Entry "get-modal-result" #f 97 13 97 29 ("/=" "essay" "values" "tree" "'tree" "selected-component" "favorite" "'title" "guest" "locate" "get-string-content" "title" "let")}}
        {Lisp-Entry "get-default-title" #f 109 18 109 35 ("default-title")}
        {Lisp-Entry "set-default-title" #f 113 18 113 35 ("'title" "locate" "set-string-content" "set!" "default-title" "/=" "when" "title")}
        {Lisp-Entry "get-default-root" #f 119 18 119 34 ("default-root")}
        {Lisp-Entry "set-default-root" #f 123 18 123 34 ("set-client" "'tree" "locate" "tree" "let" "set!" "default-root" "neq?" "when" "root")}}
      {Lisp-Entry "Request-Tree" #f 135 7 135 19 ("on-double-click" ":form" "Event-Handler" "double-click-handler:" "reorderable?:" "draggable?:" "Favorites-Tree")
        {Lisp-Entry "on-double-click" #f 142 11 142 26 ("get-host" "on-ok" "evt")}}}})
"Favorites-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorites-Editor.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorites-Editor" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Favorites-Editor" #f 46 7 46 23 ("Descendants-Editor")
        {Lisp-Entry "form-model" #f 49 11 49 21 ("nextmethod" "else" "Favorites-Tree" "tree" "get-name" "case" "form")}}}})
"Favorites-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorites-Manager.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorites-Manager" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Favorites-File" #f 59 12 59 26 ("Profile" "File")}
      {Lisp-Entry "read-favorites" #f 63 13 63 27 ("err" "continue-handler:" "install-context" "read-from-file" "instantiate" "favorites" "get-process" "process" "exists?" "when" "Favorites-File" "file" "let" "function" "with-safe-execution")}
      {Lisp-Entry "Favorites-Manager" #f 77 7 77 24 ("291" "width:" "title:" "descendant" "highlight-edited?:" "show-header?:" "tree" "flat?:" "scroller" "center" "location:" "descendants" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Exit-Listener" "Editor-View")
        {Lisp-Entry "external-name" #f 89 16 89 29 ("favorites-manager" "'favorites-manager" "rest")}
        {Lisp-Entry "host-icon" #f 98 16 98 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 102 16 102 26 ()}
        {Lisp-Entry "get-tools-view" #f 111 11 111 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 115 11 115 24 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" #f 125 11 125 19 ("tree" "descendants" "locate")}
        {Lisp-Entry "Favorites-Manager-Controller" #f 135 9 135 37 ("Editor-View-Controller")
          {Lisp-Entry "document-status" #f 138 13 138 28 ()}}
        {Lisp-Entry "new-controller" #f 143 11 143 25 ("self" "Favorites-Manager-Controller" "new")}
        {Lisp-Entry "install" #f 152 11 152 18 ("read-favorites" "set-client" "get-application" "add-exit-listener" "self" "'descendants" "locate" "set-editor" "header" "descendants" "locate-component" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "resize-center" #f 165 11 165 24 ("descendants" "'descendants" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-launch" #f 169 18 169 27 ("launch-selection" "evt")}
        {Lisp-Entry "prepare-exit" #f 173 11 173 23 ("save" "get-modified?" "when")}
        {Lisp-Entry "launch-selection" #f 183 18 183 34 ("launch" "bell" "null?" "if" "selected-component" "favorite" "get-tree" "tree" "let*")}
        {Lisp-Entry "add-to-favorites" #f 196 18 196 34 ("value" "property" "function" "for-each-property" "set-property" "designer" "add-child" "title:" "new" "apply" "favorite" "let" "when" "client" "default-root:" "default-title:" "Favorites-Adder" "get-modal" "parent" "receive" "initargs" "title" "class")}
        {Lisp-Entry "import-favorites" #f 212 11 212 27 ("with-update-locked" "recursive?:" "directories?:" "bell" "set-property" "designer" "add-child" "visible?:" "Group" "new" "set" "directory?" "if" "title" "let" "get-base" "user-message" "pathname" "iterate-directory" "function" "proc" "bad" "title:" "choose-directory" "directory" "selected-component" "component" "get-tree" "tree" "letrec")}
        {Lisp-Entry "extract-url" #f 237 11 237 22 ("cdr" "set!" "0" "subseq" "=" "4" "length" ">=" "when" "car" "line" "not" "not-null?" "and" "while" "found" "load-lines" "lines" "let" "file")}
        {Lisp-Entry "new-favorites-menu" #f 253 18 253 36 ("layout-menu" "import-favorites" "'import-favorites" "import-separator" "'import-separator" "Browser-View" "'Browser-View" "in-manifest?" "not" "end-open-group" "'end-open-group" "open" "'open" "set-visible?" "Favorite" "car" "is-not?" "1" "length" "/=" "or" "when" "selected-components" "components" "descendants" "'descendants" "locate" "tree" "get-tree" "client:" "Favorites-Menu" "new" "menu" "let*" "new-favorites-menu" "'new-favorites-menu" "unimplemented")}}
      {Lisp-Entry "Favorites-Menu" #f 274 7 274 21 ("end-open-group" "on-launch" ":form" "Event-Handler" "action-handler:" "default?:" "add-item" "before:" "title:" "open" "name:" "Component-Menu")
        {Lisp-Entry "on-launch" #f 283 11 283 20 ("launch-selection" "evt")}
        {Lisp-Entry "on-import-favorites" #f 288 11 288 30 ("import-favorites" "evt")}
        {Lisp-Entry "on-properties" #f 293 11 293 24 ("show-properties" "evt")}}}})
"Favorites-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "favorite" "Favorites-Tree.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.favorite.Favorites-Tree" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Favorites-Tree" #f 47 7 47 21 ("show-branches?:" "multiple-selection?:" "auto-expand/collapse?:" "reorderable?:" "draggable?:" ":icons" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "context-menu" #f 54 11 54 23 ("new-favorites-menu" "track-popup-menu" "function" "with-context-click" "Favorites-Manager" "is?" "when" "get-guest" "guest" "get-host" "host" "let*" "pos")}
        {Lisp-Entry "update-selection" #f 63 11 63 27 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" #f 67 11 67 20 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}
        {Lisp-Entry "double-click" #f 73 11 73 23 ("get-host" "get-guest" "launch-selection" "nextmethod" "pos")}
        {Lisp-Entry "key-press" #f 78 11 78 20 ("nextmethod" "else" "get-host" "get-guest" "launch-selection" "case" "key")}
        {Lisp-Entry "addable-root-classes" #f 84 11 84 31 ("Favorite-Symbol" "Favorite-Search" "Favorite-Launch" "Favorite-File" "Favorite-Event" "Favorite-Directory" "Favorite-Clipboard" "Group" "list")}}}})
"Field-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Field-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Field-Doc" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Field-Doc" #f 45 7 45 16 ("Definition-Doc")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("doc:" "name:" "self" "new" "doc" "name" "context")}
        {Lisp-Entry "get-class-image" #f 58 16 58 31 ("Bitmap-Resource")}}}})
"Figure"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "layout" "Figure.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.layout.Figure" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Figure" #f 46 7 46 13 ("Component")
        {Lisp-Entry "location" #f 49 12 49 20 ("set-location" "get-location")}
        {Lisp-Entry "position" #f 50 12 50 20 ("set-position" "get-position" "default-position")}
        {Lisp-Entry "size" #f 51 12 51 16 ("set-size" "get-size" "default-size")}
        {Lisp-Entry "get-location" #f 59 26 59 38 ("location")}
        {Lisp-Entry "set-location" #f 63 26 63 38 ("location" "set!" "loc")}
        {Lisp-Entry "find-child-located" #f 67 18 67 36 ("children" "get-location" "eq?" "child" "function" "find-if" "location")}
        {Lisp-Entry "default-position" #f 78 29 78 45 ("0" "Point")}
        {Lisp-Entry "get-position" #f 82 26 82 38 ("position")}
        {Lisp-Entry "get-effective-position" #f 86 26 86 48 ("get-position")}
        {Lisp-Entry "set-position" #f 90 26 90 38 ("position" "set!" "pos")}
        {Lisp-Entry "move-figure" #f 94 18 94 29 ("get-v" "get-h" "+" "Point" "new" "set-position" "get-position" "pos" "let" "dv" "dh")}
        {Lisp-Entry "get-center" #f 99 18 99 28 ("get-height" "get-v" "2" "size" "get-width" "quotient" "position" "get-h" "+" "Point" "new")}
        {Lisp-Entry "get-bottom-right" #f 105 18 105 34 ("get-height" "get-v" "size" "get-width" "position" "get-h" "+" "Point" "new")}
        {Lisp-Entry "default-size" #f 116 29 116 41 ("100" "Dimension")}
        {Lisp-Entry "get-size" #f 120 26 120 34 ("size")}
        {Lisp-Entry "get-effective-size" #f 124 26 124 44 ("get-size")}
        {Lisp-Entry "set-size" #f 128 26 128 34 ("size" "set!" "sz")}
        {Lisp-Entry "size-figure" #f 132 18 132 29 ("get-height" "get-width" "+" "Dimension" "new" "set-size" "get-size" "size" "let" "dh" "dw")}
        {Lisp-Entry "property-presentation" #f 142 16 142 37 ("nextmethod" "else" "size" "position" "location" "field-name" "case" "property")}}}})
"Figure-Mover"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "action" "Figure-Mover.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.action.Figure-Mover" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Figure-Mover" #f 45 7 45 19 ("Component")
        {Lisp-Entry "client" #f 48 12 48 18 ("set-client" "get-client")}
        {Lisp-Entry "dragging?" #f 51 8 51 17 ()}
        {Lisp-Entry "base-position" #f 52 8 52 21 ()}
        {Lisp-Entry "get-client" #f 60 18 60 28 ("client")}
        {Lisp-Entry "set-client" #f 64 18 64 28 ("child" "client" "set!" "clt")}
        {Lisp-Entry "on-mouse-down" #f 73 11 73 24 ("get-sender" "acquire-capture" "get-position" "base-position" "dragging?" "set!" "evt")}
        {Lisp-Entry "on-drag-move" #f 79 11 79 23 ("get-v" "get-h" "client" "move-figure" "base-position" "get-position" "-" "delta" "let" "dragging?" "when" "evt")}
        {Lisp-Entry "on-drag-up" #f 85 11 85 21 ("set!" "get-sender" "release-capture" "dragging?" "when" "evt")}}}})
"Figure-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Figure-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Figure-Preferences" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Figure-Preferences" #f 45 7 45 25 ("Preferences")
        {Lisp-Entry "location" #f 48 12 48 20 ("generate")}
        {Lisp-Entry "position" #f 49 12 49 20 ("generate")}
        {Lisp-Entry "size" #f 50 12 50 16 ("generate")}
        {Lisp-Entry "find-child-located" #f 58 18 58 36 ("children" "get-location" "eq?" "child" "function" "find-if" "location")}
        {Lisp-Entry "presentation-property?" #f 69 11 69 33 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 73 11 73 27 ("name" "->string" "title" "either")}
        {Lisp-Entry "set-presentation" #f 77 11 77 27 ("title:" "self" "set-property" "title" "designer")}
        {Lisp-Entry "apply-root" #f 86 26 86 36 ("self" "error" "player")}
        {Lisp-Entry "apply-preferences" #f 90 11 90 28 ("set-size" "size" "set-position" "position" "when" "find-client" "either" "let" "client")}
        {Lisp-Entry "save-preferences" #f 104 11 104 27 ("get-effective-size" "size" "'size" "get-effective-position" "position" "'position" "set-property" "when" "find-client" "either" "let" "client" "designer")}
        {Lisp-Entry "find-client" #f 116 29 116 40 ()}}}})
"File-Base-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "File-Base-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.File-Base-Menu" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "File-Base-Menu" #f 46 7 46 21 ("exit" "on-quit-application" "end-print-group" "print-preview" "on-print-preview" "print-layout" "on-print-layout" "print" "on-print" "end-revert-group" "revert-saved" "on-revert-saved" "end-save-group" "save-all" "on-save-all" "save-as" "on-save-as" "save" "guest" "on-save" "end-open-group" "close-all" "on-close-all" "close" "on-close" "open" "on-open" "new" "application" "Action" "action:" "Bitmap-Resource" "icon:" "on-new" "name:" "french:" "english:" "Locales" "title:" "Menu")}}})
"File-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "File-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.File-Entry" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "File-Entry" #f 46 7 46 17 ("Catalog-Entry")
        {Lisp-Entry "catalog" #f 49 8 49 15 ()}
        {Lisp-Entry "marked?" #f 50 8 50 15 ()}
        {Lisp-Entry "file" #f 51 8 51 12 ()}
        {Lisp-Entry "time" #f 52 8 52 12 ()}
        {Lisp-Entry "definitions" #f 53 8 53 19 ()}
        {Lisp-Entry "category-name" #f 54 8 54 21 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("set-file-definition" "self" "set-parent" "definition" "function" "for-each" "marked?" "get-base" "category-name" "definitions" "time" "file" "catalog" "set!" "nextmethod" "d" "t" "f" "c")}
        {Lisp-Entry "print" #f 71 11 71 16 ("file" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print-catalog" #f 77 26 77 39 ("definitions" "print-catalog" "definition" "function" "for-each" "time" "time->seconds" "file" "self" "class-of" "type-name" "identifier-name" "2" "format" "not" "when" "printer" "first?")}
        {Lisp-Entry "get-catalog" #f 95 18 95 29 ("catalog")}
        {Lisp-Entry "set-catalog" #f 99 18 99 29 ("catalog" "set!" "cat")}
        {Lisp-Entry "get-marked?" #f 103 18 103 29 ("marked?")}
        {Lisp-Entry "set-marked?" #f 107 18 107 29 ("marked?" "set!" "flag")}
        {Lisp-Entry "get-file" #f 111 11 111 19 ("file")}
        {Lisp-Entry "get-moniker" #f 115 11 115 22 ("file")}
        {Lisp-Entry "get-time" #f 119 18 119 26 ("time")}
        {Lisp-Entry "get-definitions" #f 123 11 123 26 ("definitions")}
        {Lisp-Entry "get-category-name" #f 127 18 127 35 ("category-name")}
        {Lisp-Entry "get-file-definition" #f 131 11 131 30 ("self")}
        {Lisp-Entry "get-definition" #f 135 18 135 32 ("definitions" "get-name" "=" "definition" "function" "find-if" "name")}
        {Lisp-Entry "get-image" #f 146 11 146 20 ("Bitmap-Resource")}
        {Lisp-Entry "present-detailed" #f 150 11 150 27 ("file" "get-name")}
        {Lisp-Entry "update-indexes" #f 159 11 159 25 ("definitions" "update-indexes" "definition" "function" "for-each" "references-index" "definitions-index")}
        {Lisp-Entry "insert-definition" #f 170 11 170 28 ("get-definitions" "insert-definitions" "sort?" "father" "tree")}}}})
"File-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "File-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.File-Menu" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "File-Menu" #f 46 7 46 16 ("guest" "Action" "action:" "end-revert-group" "before:" "title:" "compare-saved" "name:" "File-Base-Menu")}}})
"File-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "parser" "File-Parser.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.parser.File-Parser" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "File-Parser" #f 45 7 45 18 ("Object")
        {Lisp-Entry "catalog" #f 48 8 48 15 ()}
        {Lisp-Entry "char-encoding" #f 49 8 49 21 ()}
        {Lisp-Entry "heuristics" #f 50 8 50 18 ()}
        {Lisp-Entry "references?" #f 51 8 51 19 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("references?~self" "heuristics~self" "char-encoding~self" "catalog~self" "set!" "nextmethod" "references?" "references?:" "heuristics" "heuristics:" "char-encoding" "char-encoding:" "catalog")}
        {Lisp-Entry "get-heuristic" #f 62 11 62 24 ("getf" "heuristics" "when" "name")}
        {Lisp-Entry "parse" #f 67 35 67 40 ("time" "file")}
        {Lisp-Entry "parse-zipped" #f 71 26 71 38 ("error" "zipped")}}}})
"File-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "File-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.File-Request" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "File-Request" #f 49 7 49 19 ("title:" "ok" "buttonbar" "name:" "Pathname-Request")
        {Lisp-Entry "host-title" #f 58 16 58 26 ()}
        {Lisp-Entry "multiple-selection?" #f 62 12 62 31 ()}
        {Lisp-Entry "finish" #f 65 11 65 17 ("multiple-selection?" "get-tree" "set-multiple-selection?" "nextmethod" "rest")}
        {Lisp-Entry "update-content" #f 75 11 75 25 ("for-each" "remove-every-row" "function" "with-update-locked" "add-pathname" "pathname" "add" "define" "get-tree" "tree" "files" "leaves?:" "nodes?:" "directory" "get-content" "directories" "let")}
        {Lisp-Entry "update-buttons" #f 89 11 89 25 ("file?" "every?" "not-null?" "and" "ok" "'ok" "locate" "set-enabled?" "selected-pathnames" "pathnames" "let" "nextmethod")}
        {Lisp-Entry "get-modal-result" #f 100 11 100 27 ("selected-pathname" "selected-pathnames" "anchorize" "map" "multiple-selection?" "if" "directory" "set-current-directory")}
        {Lisp-Entry "default-action" #f 112 11 112 25 ("get-modal-result" "get-host" "end-modal" "ok-enabled?" "down" "car" "directory?" "1" "length" "=" "and" "cond" "selected-pathnames" "pathnames" "let")}
        {Lisp-Entry "selected-pathnames" #f 125 11 125 29 ("get-tree" "get-selected-data")}}}})
"File-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "File-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.File-Row" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "File-Row" #f 48 7 48 15 ("Pathname-Row")
        {Lisp-Entry "mode" #f 51 12 51 16 ("set-mode" "get-mode")}
        {Lisp-Entry "parameters" #f 52 12 52 22 ("set-parameters" "get-parameters")}
        {Lisp-Entry "initialize" #f 60 11 60 21 ("set-parameters" "set-mode" "file" "'file" "editor" "set-protocol" "nextmethod" "apply" "others" "parameters" "open" "'open" "mode" "bind-keywords" "rest")}
        {Lisp-Entry "get-mode" #f 73 18 73 26 ("editor" "get-mode")}
        {Lisp-Entry "set-mode" #f 77 18 77 26 ("editor" "set-mode" "value")}
        {Lisp-Entry "get-parameters" #f 81 18 81 32 ("editor" "get-parameters")}
        {Lisp-Entry "set-parameters" #f 85 18 85 32 ("editor" "set-parameters" "value")}
        {Lisp-Entry "combo-choose" #f 94 11 94 23 ("focus-editor" "enter-edited-value" "set-edited-value" "parameters" "choose-file" "apply" "file" "let")}}}})
"Filing-Catalog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "catalog" "Filing-Catalog.jazz"} 1227444344
    {Lisp-Entry "jazz.catalog.catalog.Filing-Catalog" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Filing-Catalog" #f 47 7 47 21 ("Catalog")
        {Lisp-Entry "file" #f 50 8 50 12 ()}
        {Lisp-Entry "active?" #f 51 8 51 15 ()}
        {Lisp-Entry "loaded?" #f 52 8 52 15 ()}
        {Lisp-Entry "modified?" #f 53 8 53 17 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("active?~self" "file~self" "set!" "nextmethod" "active?" "file" "name")}
        {Lisp-Entry "get-file" #f 67 18 67 26 ("file")}
        {Lisp-Entry "get-active?" #f 71 11 71 22 ("active?")}
        {Lisp-Entry "set-active?" #f 75 11 75 22 ("deactivate" "activate" "if" "set!" "active?" "neq?" "when" "flag")}
        {Lisp-Entry "get-modified?" #f 83 18 83 31 ("modified?")}
        {Lisp-Entry "set-modified?" #f 87 18 87 31 ("set!" "modified?" "neq?" "when" "state")}
        {Lisp-Entry "get-category-definitions" #f 97 11 97 35 ("get-definitions" "Category-Entry" "collect-type" "name")}
        {Lisp-Entry "iterate-content" #f 106 26 106 41 ("proc")}
        {Lisp-Entry "update" #f 115 26 115 32 ("name" "reset-marks" "sweep" "scan" "present" "user-message" "when" "set-active?" "report?" "report?:")}
        {Lisp-Entry "reset-marks" #f 126 29 126 40 ()}
        {Lisp-Entry "scan" #f 135 21 135 25 ("scan-directories" "throw-cancel" "Range" "new" "selection:" "get-source" "edit-document" "get-end" "end" "get-start" "start" "get-application" "appl" "let" "get-message" "message-box" "err" "Parse-Error" "catch" "reset-marks")}
        {Lisp-Entry "scan-directories" #f 147 29 147 45 ()}
        {Lisp-Entry "scan-directory" #f 151 21 151 35 ("directories?:" "files?:" "increase!" "process-file" "when" "file" "function" "iterate-directory" "0" "processed" "let" "recursive?" "recursive?:" "directory")}
        {Lisp-Entry "process-file" #f 163 21 163 33 ("add-entry" "update-entry" "scan-file" "entry" "let" "set-modified?" "set-marked?" "begin" "if" "get-unmodified-file-entry" "definition" "get-modification-time" "time" "get-base" "name" "let*" "scan-file?" "when" "get-message" "debug" "err" "Parse-Error" "catch" "file")}
        {Lisp-Entry "get-unmodified-file-entry" #f 183 11 183 36 ("get-time" "time->seconds" "=" "and" "when" "get-file-entry" "old" "let" "time" "file" "name")}
        {Lisp-Entry "scan-file?" #f 189 29 189 39 ("file")}
        {Lisp-Entry "scan-file" #f 193 29 193 38 ("time" "file")}
        {Lisp-Entry "update-entry" #f 197 29 197 41 ("entry")}
        {Lisp-Entry "add-entry" #f 201 29 201 38 ("entry" "name")}
        {Lisp-Entry "sweep" #f 211 29 211 34 ()}
        {Lisp-Entry "marked?" #f 216 29 216 36 ("get-file-entry" "get-marked?" "definition")}
        {Lisp-Entry "sweep-table" #f 221 29 221 40 ("table-set!" "not" "cddr" "set-cdr!" "set-marked?" "set!" "begin" "if" "car" "definition" "while" "cdr" "list" "previous" "let" "not-null?" "when" "definitions" "class-name" "function" "iterate-table" "reset?" "marked?" "table")}
        {Lisp-Entry "save" #f 246 26 246 30 ("set-modified?" "save-content" "present" "name" "user-message" "modified?" "when")}
        {Lisp-Entry "save-content" #f 255 29 255 41 ("print-catalog" "definition" "let" "definitions" "name" "bind" "set!" "format" "not" "if" "info" "for-each" "printer" "function" "platform-eol-encoding" "eol-encoding:" "file" "parse" "path:" "list" "call-with-output-file" "first?" "car" "key:" "<" "sort" "sorted" "gather-definitions" "all" "let*")}
        {Lisp-Entry "gather-definitions" #f 277 11 277 29 ("cons" "set!" "value" "property" "function" "iterate-content" "list" "let")}}}})
"Flat-Look"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "look" "Flat-Look.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.look.Flat-Look" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Flat-Look" #f 45 7 45 16 ("Look")
        {Lisp-Entry "present" #f 53 11 53 18 ()}
        {Lisp-Entry "get-element" #f 62 11 62 22 ("document/scrollbar/flat?" "document/header/flat?" "tool/scrollbar/flat?" "tool/header/flat?" "group/border/flat?" "outline/edge/flat?" "entry/edge/flat?" "case" "name")}}}})
"Flow-Layout"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "layout" "Flow-Layout.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.layout.Flow-Layout" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Flow-Layout" #f 45 7 45 18 ("Layout")
        {Lisp-Entry "insets" #f 48 12 48 18 ("generate" "0" "Rect")}
        {Lisp-Entry "justification" #f 49 12 49 25 ("generate" "horizontal" "'horizontal")}
        {Lisp-Entry "padding" #f 50 12 50 19 ("generate" "0")}
        {Lisp-Entry "layout" #f 59 11 59 17 ("layout-horizontal" "else" "layout-vertical" "vertical" "justification" "case" "rest" "height" "width" "figures")}
        {Lisp-Entry "layout-vertical" #f 67 11 67 26 ("get-width" "Dimension" "set-size" "center" "'center" "decrease!" "get-v" ">" "let*" "'tail" "for-each-reversed" "padding" "get-height" "increase!" "0" "+" "set-position" "get-size" "size" "'head" "eq?" "get-visible?" "and" "when" "get-location" "standardize-location" "offset" "where" "receive" "figure" "function" "for-each" "get-bottom" "-" "get-left" "Point" "new" "tail" "insets" "rect-position" "head" "let" "height" "width" "figures")}
        {Lisp-Entry "layout-horizontal" #f 96 11 96 28 ("get-height" "Dimension" "set-size" "center" "'center" "decrease!" "get-h" ">" "let*" "'tail" "for-each-reversed" "padding" "get-width" "increase!" "0" "+" "set-position" "get-size" "size" "'head" "eq?" "get-visible?" "and" "when" "get-location" "standardize-location" "offset" "where" "receive" "figure" "function" "for-each" "get-top" "get-right" "-" "Point" "new" "tail" "insets" "rect-position" "head" "let" "height" "width" "figures")}
        {Lisp-Entry "standardize-location" #f 125 11 125 31 ("values" "0" "second" "pair?" "offset" "first" "else" "symbol?" "head" "'head" "integer?" "not" "or" "cond" "where" "let" "location")}}}})
"Focus-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Focus-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Focus-Event" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Focus-Event" #f 44 7 44 18 ("Event")
        {Lisp-Entry "old" #f 47 8 47 11 ()}
        {Lisp-Entry "new" #f 48 8 48 11 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("new~self" "old~self" "set!" "nextmethod" "new" "old" "sender" "kind")}
        {Lisp-Entry "print" #f 57 11 57 16 ("function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-old" #f 68 18 68 25 ("old")}
        {Lisp-Entry "get-new" #f 72 18 72 25 ("new")}}}})
"Font"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "font" "Font.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.font.Font" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Font" #f 47 7 47 11 ("else" "72" "96" "*" "fxround/" "point-size" "calculate-height" "definition" "windows" "cond-expand" "Object")
        {Lisp-Entry "name" #f 50 8 50 12 ()}
        {Lisp-Entry "font-name" #f 51 8 51 17 ()}
        {Lisp-Entry "point-size" #f 52 8 52 18 ()}
        {Lisp-Entry "color" #f 53 8 53 13 ()}
        {Lisp-Entry "bold?" #f 54 8 54 13 ()}
        {Lisp-Entry "italic?" #f 55 8 55 15 ()}
        {Lisp-Entry "underline?" #f 56 8 56 18 ()}
        {Lisp-Entry "monospace?" #f 57 8 57 18 ()}
        {Lisp-Entry "handle" #f 58 8 58 14 ()}
        {Lisp-Entry "source" #f 59 8 59 14 ()}
        {Lisp-Entry "metrics" #f 60 8 60 15 ()}
        {Lisp-Entry "all-widths" #f 61 8 61 18 ()}
        {Lisp-Entry "cairo-font" #f 62 8 62 18 ()}
        {Lisp-Entry "scaled-font" #f 63 8 63 19 ()}
        {Lisp-Entry "initialize" #f 66 11 66 21 ("self" "cairo-add-font" "cairo-font" "create-cairo-scaled-font" "scaled-font" "create-cairo-font-handle" "cairo-font~self" "underline?:" "italic?:" "bold?:" "point-size:" "font-name:" "create-font-handle" "handle~self" "monospace?" "monospace?~self" "underline?" "underline?~self" "italic?" "italic?~self" "bold?" "bold?~self" "color" "color~self" "point-size" "point-size~self" "font-name" "font-name~self" "name~self" "set!" "nextmethod" "name" "name:")}
        {Lisp-Entry "create-cairo-scaled-font" #f 91 11 91 35 ("cairo_font_options_destroy" "cairo_matrix_t-free" "cairo_scaled_font_create" "prog1" "cairo_matrix_init_identity" "exact->inexact" "cairo_matrix_init_scale" "CAIRO_HINT_STYLE_FULL" "CAIRO_HINT_STYLE_SLIGHT" "bold?" "if" "cairo_font_options_set_hint_style" "CAIRO_ANTIALIAS_SUBPIXEL" "cairo_font_options_set_antialias" "cairo_font_options_create" "options" "ctm" "cairo_matrix_t-make" "matrix" "calculate-height" "height" "let" "point-size" "font-face")}
        {Lisp-Entry "destroy" #f 115 11 115 18 ("nextmethod" "handle" "destroy-font-handle" "cairo-font" "destroy-cairo-font-handle" "scaled-font" "cairo_scaled_font_destroy")}
        {Lisp-Entry "compare-object" #f 122 11 122 25 (":not-equal" "else" "get-handle" "handle" "get-underline?" "underline?" "get-italic?" "italic?" "get-bold?" "bold?" "get-color" "color" "get-point-size" "point-size" "get-font-name" "font-name" "direct" "'direct" "source" ":equal" "get-name" "=" "name" "and" ":incompatible" "Font" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 141 11 141 23 ("monospace?" ",monospace?" "',monospace?" "monospace?:" "underline?" ",underline?" "',underline?" "underline?:" "italic?" ",italic?" "',italic?" "italic?:" "bold?" ",bold?" "',bold?" "bold?:" "color" ",color" "',color" "color:" "point-size" ",point-size" "',point-size" "point-size:" "font-name" ",font-name" "',font-name" "font-name:" "Font" "new" ",name" "',name" "registered-font" "name" "if")}
        {Lisp-Entry "print" #f 154 11 154 16 ("function" "print-unreadable" "else" "monospace?" "underline?" "italic?" "bold?" "color" "point-size" "font-name" "self" "class-of" "type-name" "identifier-name" "format" "name" "cond" "readably" "printer")}
        {Lisp-Entry "get-name" #f 180 18 180 26 ("name")}
        {Lisp-Entry "get-font-name" #f 184 18 184 31 ("font-name")}
        {Lisp-Entry "get-point-size" #f 188 18 188 32 ("point-size")}
        {Lisp-Entry "get-color" #f 192 18 192 27 ("color")}
        {Lisp-Entry "get-bold?" #f 196 18 196 27 ("bold?")}
        {Lisp-Entry "get-italic?" #f 200 18 200 29 ("italic?")}
        {Lisp-Entry "get-underline?" #f 204 18 204 32 ("underline?")}
        {Lisp-Entry "get-monospace?" #f 208 18 208 32 ("monospace?")}
        {Lisp-Entry "get-cairo-font" #f 212 18 212 32 ("cairo-font")}
        {Lisp-Entry "get-scaled-font" #f 216 18 216 33 ("scaled-font")}
        {Lisp-Entry "get-handle" #f 220 11 220 21 ("handle")}
        {Lisp-Entry "Work-DC" #f 229 14 229 21 ()}
        {Lisp-Entry "work-dc" #f 233 15 233 22 ("Memory-Surface" "new" "set!" "Work-DC" "unless")}
        {Lisp-Entry "text-extent" #f 239 18 239 29 ("get-text-extent" "self" "work-dc" "set-font" "text")}
        {Lisp-Entry "text-width" #f 244 18 244 28 ("get-text-width" "self" "work-dc" "set-font" "text")}
        {Lisp-Entry "font-height" #f 249 18 249 29 ("get-font-height" "self" "work-dc" "set-font")}
        {Lisp-Entry "get-metrics" #f 259 18 259 29 ("get-text-metrics" "Font-Metrics" "new" "self" "work-dc" "set-font" "begin" "set!" "metrics" "unless")}
        {Lisp-Entry "get-all-widths" #f 268 18 268 32 ("get-char-widths" "self" "work-dc" "set-font" "begin" "set!" "all-widths" "unless")}
        {Lisp-Entry "get-widths" #f 277 18 277 28 ("get-char-widths" "self" "work-dc" "set-font" "rest")}
        {Lisp-Entry "get-char-width" #f 282 18 282 32 ("get-char-width" "self" "work-dc" "set-font" "get-all-widths" "vector-ref" "256" "<" "if" "char->integer" "n" "let" "c")}
        {Lisp-Entry "extend-font-name" #f 295 18 295 34 ("monospace?" "monospace?:" "underline?" "underline?:" "italic?" "italic?:" "bold?" "bold?:" "point-size" "point-size:" "font-name:" "Font" "new" "name")}
        {Lisp-Entry "extend-point-size" #f 305 18 305 35 ("monospace?" "monospace?:" "underline?" "underline?:" "italic?" "italic?:" "bold?" "bold?:" "point-size:" "font-name" "font-name:" "Font" "new" "point-size")}
        {Lisp-Entry "toggle-bold" #f 315 18 315 29 ("monospace?" "monospace?:" "underline?" "underline?:" "italic?" "italic?:" "bold?" "not" "bold?:" "point-size" "point-size:" "font-name" "font-name:" "Font" "new")}
        {Lisp-Entry "toggle-italic" #f 325 18 325 31 ("monospace?" "monospace?:" "underline?" "underline?:" "italic?" "not" "italic?:" "bold?" "bold?:" "point-size" "point-size:" "font-name" "font-name:" "Font" "new")}
        {Lisp-Entry "toggle-underline" #f 335 18 335 34 ("monospace?" "monospace?:" "underline?" "not" "underline?:" "italic?" "italic?:" "bold?" "bold?:" "point-size" "point-size:" "font-name" "font-name:" "Font" "new")}}}})
"Font-Metrics"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "Font-Metrics.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.Font-Metrics" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Font-Metrics" #f 46 7 46 19 ("fxceiling" "1" "+" "else" "metrics" "cairo_font_extents_t-height-ref" "fxround" "get-height" "public" "method" "windows" "cond-expand" "Object")
        {Lisp-Entry "metrics" #f 49 8 49 15 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("metrics~self" "set!" "nextmethod" "metrics")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "metrics" "cairo_font_extents_t-free")}
        {Lisp-Entry "print" #f 61 11 61 16 ("function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-ascent" #f 82 18 82 28 ("metrics" "cairo_font_extents_t-ascent-ref" "fxround")}
        {Lisp-Entry "get-max-char-width" #f 86 18 86 36 ("metrics" "cairo_font_extents_t-max_x_advance-ref" "fxround")}}}})
"Font-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Font-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Font-Request" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Font-Request" #f 47 7 47 19 ("Dialog")
        {Lisp-Entry "get-modal" #f 51 16 51 25 ("error" "throw-cancel" "=" "CommDlgExtendedError" "code" "logfont:" "Font" "ChooseFont" "0" "CF_INITTOLOGFONTSTRUCT" "CF_NOSCRIPTSEL" "CF_EFFECTS" "CF_SCREENFONTS" "bitwise-ior" "Flags" "'Flags" "get-ref" "rgbColors" "'rgbColors" "lpLogFont" "'lpLogFont" "get-toplevel" "get-handle" "hwndOwner" "'hwndOwner" "size-of" "lStructSize" "'lStructSize" "set" "LOGFONT" "get-logfont" "if" "logfont" "CHOOSEFONT" "new" "r" "let" "close-all-popups" "Black" "name:" "Color" "initial-color" "initial-color:" "initial-font" "initial-font:")}}}})
"Font-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Font-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Font-Row" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Font-Row" #f 45 7 45 15 ("Combo-Row")
        {Lisp-Entry "initialize" #f 48 11 48 21 ("Fonts" "list" "->string" "title" "Font" "dispatch" "font" "let" "name" "function" "map" "set-choices" "nextmethod" "apply" "rest")}}}})
"Foreign-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Foreign-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Foreign-Domain" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Foreign-Domain" #f 45 7 45 21 ("Domain")}
      {Lisp-Entry "Foreign-Domain" #f 51 7 51 21 ("criteria" "objects" "initialize" "key" "nullable?" "Domain")
        {Lisp-Entry "validate-value" #f 65 11 65 25 ("property:" "violation-message" "message:" "Integrity-Violation" "new" "add-violation" "member?" "not" "when" "key" "foreign-values" "values" "let" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "foreign-values" #f 71 11 71 25 ("criteria" "search-descendants" "component-name" "map" "child" "foreign" "let" "key" "client")}
        {Lisp-Entry "violation-message" #f 76 29 76 46 ("else" "join" "pair?" "key" "not" "cond" "format" "value")}
        {Lisp-Entry "present" #f 89 11 89 18 ("join" "pair?" "not" "if" "value")}
        {Lisp-Entry "setup-entry" #f 102 11 102 22 ("key" "foreign-choices" "combo" "'combo" "locate" "set-choices" "self" "domain:" "parent:" "Foreign-Entry" "new" "entry" "let" "client" "view")}
        {Lisp-Entry "foreign-choices" #f 107 11 107 26 ("list" "get-name" "name" "component" "function" "map" "child" "get-children" "either" "objects" "let" "key" "client")}
        {Lisp-Entry "setup-list-entry" #f 115 11 115 27 ("key" "setup" "parent:" "Foreign-List-Entry" "new" "entry" "let" "client" "view")}}}})
"Foreign-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "entry" "Foreign-Entry.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.entry.Foreign-Entry" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Foreign-Entry" #f 48 7 48 20 ("Label" "Font" "font:" "Default" "Text-Style" "default-style:" "top-padding:" "2" "left-padding:" "body" "combo" "edge" "border-type:" "border" "name:" "Property-Entry")
        {Lisp-Entry "get-value" #f 63 11 63 20 ("combo" "'combo" "locate" "get-value")}
        {Lisp-Entry "set-value" #f 67 11 67 20 ("combo" "'combo" "locate" "set-value" "value")}
        {Lisp-Entry "get-modified?" #f 71 11 71 24 ("combo" "'combo" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 75 11 75 24 ("combo" "'combo" "locate" "set-modified?" "value")}}}})
"Foreign-List-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "choosers" "Foreign-List-Chooser.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.choosers.Foreign-List-Chooser" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Foreign-List-Chooser" #f 48 7 48 27 ("on-cancel" "222" "cancel" "default?:" "on-ok" ":host" "Event-Handler" "action-handler:" "24" "80" "268" "138" "title:" "ok" "8" "253" "230" "430" "10" "Point" "position:" "entry" "name:" "305" "450" "Dimension" "size:" "View")
        {Lisp-Entry "foreign" #f 51 12 51 19 ("generate")}
        {Lisp-Entry "foreign-objects" #f 52 12 52 27 ("generate")}
        {Lisp-Entry "key" #f 53 12 53 15 ("generate")}
        {Lisp-Entry "list?" #f 54 12 54 17 ("generate")}
        {Lisp-Entry "allow-duplicates?" #f 55 12 55 29 ("generate")}
        {Lisp-Entry "all" #f 56 12 56 15 ("generate")}
        {Lisp-Entry "initialize" #f 57 30 57 40 ("generate")}
        {Lisp-Entry "finish" #f 68 11 68 17 ("value" "set-value" "allow-duplicates?" "set-allow-duplicates?" "list?" "set-list?" "all" "get-children" "foreign-objects" "null?" "key" "map" "foreign" "if" "set-all" "present" "entry" "'entry" "locate" "set-presenter" "nextmethod" "rest")}
        {Lisp-Entry "install-in-host" #f 77 11 77 26 ("list?" "if" "get-host" "set-title" "entry" "'entry" "locate" "guest-installed-in-host" "nextmethod" "host")}
        {Lisp-Entry "present" #f 90 11 90 18 ("join" "atom?" "if" "object")}
        {Lisp-Entry "get-modal-result" #f 101 11 101 27 ("entry" "'entry" "locate" "get-result")}}}})
"Foreign-List-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "entry" "Foreign-List-Entry.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.entry.Foreign-List-Entry" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Foreign-List-Entry" #f 48 7 48 25 ("to-entry" "to-tree" "to-border" "on-remove" "remove" "on-add" "action-handler:" "22" "80" "title:" "add" "200" "width:" "display-images?:" "toplevel-controls?:" "controls?:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-tab-press" "tab-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" ":form" "Event-Handler" "selection-handler:" ":icons" "portfolio:" "show-unfocused-selection?:" "multiple-selection?:" "row" "selection-mode:" "from-entry" "filled-column:" "show-header?:" "from-tree" "document" "style:" "shown?:" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "from-border" "name:" "320" "352" "Dimension" "size:" "Property-Entry")
        {Lisp-Entry "list?" #f 51 12 51 17 ("set-list?" "get-list?")}
        {Lisp-Entry "allow-duplicates?" #f 52 12 52 29 ("set-allow-duplicates?" "get-allow-duplicates?")}
        {Lisp-Entry "presenter" #f 53 12 53 21 ("set-presenter" "get-presenter")}
        {Lisp-Entry "all" #f 54 12 54 15 ("set-all" "get-all")}
        {Lisp-Entry "initialize" #f 55 30 55 40 ("set-value" "get-value")}
        {Lisp-Entry "to" #f 58 8 58 10 ()}
        {Lisp-Entry "guest-installed-in-host" #f 81 21 81 44 ("focus-and-select" "from-tree" "'from-tree" "locate" "tree" "let")}
        {Lisp-Entry "host-title" #f 91 16 91 26 ()}
        {Lisp-Entry "host-position" #f 95 16 95 29 ("300" "450" "Point")}
        {Lisp-Entry "host-size" #f 99 16 99 25 ("320" "252" "Dimension")}
        {Lisp-Entry "get-result" #f 108 18 108 28 ("<" "sort" "list?" "if" "to->value" "value" "let")}
        {Lisp-Entry "get-presenter" #f 120 18 120 31 ("presenter")}
        {Lisp-Entry "set-presenter" #f 124 18 124 31 ("update" "presenter" "set!" "value")}
        {Lisp-Entry "get-all" #f 129 18 129 25 ("all")}
        {Lisp-Entry "set-all" #f 133 18 133 25 ("update" "all" "set!" "value")}
        {Lisp-Entry "get-value" #f 138 11 138 20 ("value")}
        {Lisp-Entry "set-value" #f 142 11 142 20 ("update" "value->to" "to" "value" "set!" "v")}
        {Lisp-Entry "get-list?" #f 148 18 148 27 ("list?")}
        {Lisp-Entry "set-list?" #f 152 18 152 27 ("from-tree" "'from-tree" "set-multiple-selection?" "if" "add" "'add" "locate" "set-title" "value->to" "to" "list?" "set!" "value")}
        {Lisp-Entry "get-allow-duplicates?" #f 159 18 159 39 ("allow-duplicates?")}
        {Lisp-Entry "set-allow-duplicates?" #f 163 18 163 39 ("allow-duplicates?" "set!" "value")}
        {Lisp-Entry "value->to" #f 168 11 168 20 ("list" "not" "value" "list?" "if")}
        {Lisp-Entry "to->value" #f 177 11 177 20 ("car" "not" "to" "list?" "if")}
        {Lisp-Entry "setup" #f 190 21 190 26 ("get-children" "get-name" "component" "function" "map" "set-all" "get-creator" "child" "foreign" "let" "key" "client")}
        {Lisp-Entry "layout" #f 202 11 202 17 ("30" "remove" "'remove" "10" "+" "add" "'add" "Dimension" "set-size" "0" "Point" "new" "set-position" "52" "buttons-pos" "2" "100" "-" "quotient" "tree-width" "to-border" "'to-border" "to" "from-border" "'from-border" "locate" "from" "get-height" "height" "get-width" "width" "get-size" "size" "let*")}
        {Lisp-Entry "on-selection-change" #f 223 11 223 30 ("update-buttons" "evt")}
        {Lisp-Entry "on-double-click" #f 227 11 227 26 ("on-remove" "remove" "'remove" "to-tree" "on-add" "add" "'add" "locate" "get-enabled?" "when" "from-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-add" #f 234 11 234 17 ("set-modified?" "acquire-focus" "user-data-indexes" "set-selection" "allow-duplicates?" "update" "append" "list?" "if" "to" "set!" "get-selected-data" "values" "'to-tree" "to-tree" "'from-tree" "locate" "from-tree" "let*" "evt")}
        {Lisp-Entry "on-remove" #f 247 11 247 20 ("set-modified?" "user-data-indexes" "set-selection" "acquire-focus" "allow-duplicates?" "unless" "update" "difference" "to" "set!" "get-selected-data" "values" "'to-tree" "to-tree" "'from-tree" "locate" "from-tree" "let*" "evt")}
        {Lisp-Entry "update-buttons" #f 259 11 259 25 ("remove" "'remove" "add" "'add" "set-enabled?" "to?" "'to-tree" "to-tree" "get-selection" "from?" "'from-tree" "locate" "from-tree" "let*")}
        {Lisp-Entry "on-tab-press" #f 268 11 268 23 ("'from-tree" "to-tree" "'to-tree" "locate" "focus-and-select" "from-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" #f 278 11 278 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" #f 284 11 284 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update" #f 294 11 294 17 ("update-buttons" "update-to" "update-from")}
        {Lisp-Entry "update-from" #f 300 11 300 22 ("equal?" "test:" "to" "difference" "all" "allow-duplicates?" "if" "<" "sort" "user-data:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "present" "title" "object" "for-each" "remove-every-row" "function" "with-update-locked" "'from-tree" "locate" "from-tree" "let")}
        {Lisp-Entry "update-to" #f 311 11 311 20 ("to" "<" "sort" "user-data:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "present" "title" "object" "for-each" "remove-every-row" "function" "with-update-locked" "'to-tree" "locate" "to-tree" "let")}
        {Lisp-Entry "present" #f 322 11 322 18 ("presenter" "not" "if" "object")}}}})
"Foreign-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Foreign-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Foreign-Row" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Foreign-Row" #f 46 7 46 18 ("Combo-Row")
        {Lisp-Entry "foreign" #f 49 12 49 19 ("set-foreign" "get-foreign")}
        {Lisp-Entry "foreign-objects" #f 50 12 50 27 ("set-foreign-objects" "get-foreign-objects")}
        {Lisp-Entry "key" #f 51 12 51 15 ("set-key" "get-key")}
        {Lisp-Entry "list?" #f 52 12 52 17 ("set-list?" "get-list?")}
        {Lisp-Entry "allow-duplicates?" #f 53 12 53 29 ("set-allow-duplicates?" "get-allow-duplicates?")}
        {Lisp-Entry "initialize" #f 61 11 61 21 ("choose" "'choose" "set-kind" "allow-duplicates?~self" "list?~self" "component-name" "either" "key~self" "foreign-objects~self" "foreign~self" "set!" "nextmethod" "apply" "others" "allow-duplicates?" "list?" "key" "foreign-objects" "foreign" "bind-keywords" "rest")}
        {Lisp-Entry "get-foreign" #f 77 18 77 29 ("foreign")}
        {Lisp-Entry "set-foreign" #f 81 18 81 29 ("foreign-objects" "foreign-choices" "set-choices" "foreign" "set!" "value")}
        {Lisp-Entry "get-foreign-objects" #f 86 18 86 37 ("foreign-objects")}
        {Lisp-Entry "set-foreign-objects" #f 90 18 90 37 ("foreign" "foreign-choices" "set-choices" "foreign-objects" "set!" "value")}
        {Lisp-Entry "get-key" #f 95 18 95 25 ("key")}
        {Lisp-Entry "set-key" #f 99 18 99 25 ("key" "set!" "value")}
        {Lisp-Entry "get-list?" #f 103 18 103 27 ("list?")}
        {Lisp-Entry "set-list?" #f 107 18 107 27 ("list?" "set!" "value")}
        {Lisp-Entry "get-allow-duplicates?" #f 111 18 111 39 ("allow-duplicates?")}
        {Lisp-Entry "set-allow-duplicates?" #f 115 18 115 39 ("allow-duplicates?" "set!" "value")}
        {Lisp-Entry "foreign-choices" #f 119 11 119 26 ("get-children" "null?" "if" "list" "key" "name" "let" "component" "function" "map" "when" "foreign-objects" "foreign")}
        {Lisp-Entry "combo-choose" #f 134 11 134 23 ("focus-editor" "enter-edited-value" "set-edited-value" "value:" "allow-duplicates?" "allow-duplicates?:" "list?" "list?:" "key" "key:" "foreign-objects" "foreign-objects:" "foreign" "foreign:" "Foreign-List-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" #f 147 11 147 18 ("atom?" "key" "function" "map" "else" "join" "pair?" "if" "list?" "not" "cond" "value")}
        {Lisp-Entry "parse-string" #f 163 11 163 23 ("split" "find-in" "if" "string")}
        {Lisp-Entry "get-edited-value" #f 174 11 174 27 ("parse-strings" "map" "parse-string" "list?" "not" "=" "empty-string?" "or" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" #f 183 11 183 27 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Form"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "component" "Form.jazz"} 1226584780
    {Lisp-Entry "jazz.library.component.Form" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Form" #f 63 7 63 11 ("JML-Element")
        {Lisp-Entry "origin" #f 66 8 66 14 ()}
        {Lisp-Entry "context" #f 67 8 67 15 ()}
        {Lisp-Entry "action" #f 68 8 68 14 ()}
        {Lisp-Entry "model-name" #f 69 8 69 18 ()}
        {Lisp-Entry "name" #f 70 8 70 12 ()}
        {Lisp-Entry "tag-symbolic?" #f 71 8 71 21 ()}
        {Lisp-Entry "tag-module" #f 72 8 72 18 ()}
        {Lisp-Entry "initialize" #f 80 11 80 21 ("canonicalize-properties" "when" "children" "children~self" "properties" "properties~self" "tag-module" "tag-module~self" "tag-symbolic?" "tag-symbolic?~self" "name" "name~self" "model-name" "model-name~self" "action" "action~self" "context" "context~self" "origin" "origin~self" "set!" "nextmethod" "textual?" "textual?:")}
        {Lisp-Entry "copy-object" #f 104 11 104 22 ("children" "children:" "properties" "copy" "properties:" "tag-module" "tag-module:" "tag-symbolic?" "tag-symbolic?:" "name" "name:" "model-name" "model-name:" "action" "action:" "context" "context:" "origin" "origin:" "textual?:" "Form" "new" "deep?")}
        {Lisp-Entry "print" #f 110 11 110 16 ("length" "children" "name" "model-name" "if" "action" "class-of" "type-name" "identifier-name" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print" #f 122 11 122 16 ("children" "keywordize-properties" "properties" "name" "model-name" "if" "action" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "setup-toplevel-context" #f 140 18 140 40 ("0" "setup-context" "origin" "set!" "ctx")}
        {Lisp-Entry "setup-context" #f 145 11 145 24 ("children" "1" "+" "setup-context" "when" "child" "for-each" "properties" "setup-toplevel-context" "Form" "set-form-level" "Handler" "is?" "cond" "value" "name" "function" "for-each-property" "level" "ctx")}
        {Lisp-Entry "canonicalize-properties" #f 159 11 159 34 ("cddr" "set!" "car" "keyword->symbol" "set-car!" "not-null?" "while" "lst")}
        {Lisp-Entry "get-origin" #f 170 18 170 28 ("origin")}
        {Lisp-Entry "set-origin" #f 174 18 174 28 ("origin" "set!" "o")}
        {Lisp-Entry "get-context" #f 178 18 178 29 ("context")}
        {Lisp-Entry "set-context" #f 182 18 182 29 ("context" "set!" "ctx")}
        {Lisp-Entry "get-action" #f 186 18 186 28 ("action")}
        {Lisp-Entry "get-model-name" #f 190 18 190 32 ("model-name")}
        {Lisp-Entry "set-model-name" #f 194 18 194 32 ("model-name" "set!" "value")}
        {Lisp-Entry "get-name" #f 198 18 198 26 ("name")}
        {Lisp-Entry "set-name" #f 202 18 202 26 ("name" "set!" "value")}
        {Lisp-Entry "get-tag-symbolic?" #f 206 18 206 35 ("tag-symbolic?")}
        {Lisp-Entry "set-tag-symbolic?" #f 210 18 210 35 ("tag-symbolic?" "set!" "value")}
        {Lisp-Entry "get-tag-module" #f 214 18 214 32 ("tag-module")}
        {Lisp-Entry "set-tag-module" #f 218 18 218 32 ("tag-module" "set!" "value")}
        {Lisp-Entry "get-model" #f 222 18 222 27 ("slot-value" "autoload" "model-name" "get-autoclass" "either" "context" "not" "if")}
        {Lisp-Entry "child" #f 234 18 234 23 ("error" "find-child" "either" "name")}
        {Lisp-Entry "find-child" #f 239 18 239 28 ("get-name" "eq?" "child" "function" "find-by" "name")}
        {Lisp-Entry "find-name" #f 244 11 244 20 ("find-child" "name")}
        {Lisp-Entry "find-type" #f 248 18 248 27 ("get-model-name" "eq?" "child" "function" "find-by" "type")}
        {Lisp-Entry "add-child" #f 254 18 254 27 ("cons" "children" "set!" "child")}
        {Lisp-Entry "add-child-at" #f 258 18 258 30 ("insert!" "children" "set!" "rank" "child")}
        {Lisp-Entry "append-child" #f 262 18 262 30 ("list" "append!" "children" "set!" "child")}
        {Lisp-Entry "remove-child" #f 266 18 266 30 ("remove!" "children" "set!" "child")}
        {Lisp-Entry "send-child-before" #f 270 18 270 35 ("insert!" "set!" "error" "find" "either" "essay" "rank" "children" "remove!" "removed" "let*" "target" "child")}
        {Lisp-Entry "sort-children" #f 276 18 276 31 ("sort" "children" "set!" "get-name" "child" "function" "key" "key:" "test")}
        {Lisp-Entry "get-presentation" #f 286 18 286 34 ("get-model" "get-class-presentation" "title" "'title" "get-property" "either")}
        {Lisp-Entry "remember-creation" #f 296 18 296 35 ("children:" "properties:" "component:" "remove" "'remove" "action:" "self" "context:" "Restore-Form" "new" "cons" "children" "set!" "component" "unused")}
        {Lisp-Entry "remember-reference" #f 300 18 300 36 ("cons" "children" "set!" "children:" "properties:" "name:" "model-name:" "modify" "'modify" "action:" "self" "context:" "Restore-Form" "new" "form" "let" "name" "unused")}
        {Lisp-Entry "remember-property" #f 306 18 306 35 ("set-property" "read-property" "actual-value" "let" "property" "component")}
        {Lisp-Entry "instantiate" #f 316 18 316 29 ("name" "name:" "creator:" "self" "form:" "new" "apply" "model-name" "autoload" "model" "let" "rest")}
        {Lisp-Entry "instantiate-component" #f 321 18 321 39 ("name" "name:" "creator:" "new" "apply" "model-name" "autoload" "model" "let" "rest")}
        {Lisp-Entry "get-parts" #f 331 18 331 27 ("get-children" "get-properties" "keywordize-properties" "get-name" "get-model-name" "get-action" "values")}
        {Lisp-Entry "get-child-location" #f 345 11 345 29 ("children" "get-rank" "properties" "length" "tag-module" "tag-symbolic?" "0" "2" "name" "if" "1" "+" "list" "child")}
        {Lisp-Entry "foldable?" #f 360 11 360 20 ()}
        {Lisp-Entry "fold-object" #f 365 11 365 22 ("children" "properties" "symbolize-properties" "tag-module" "tag-symbolic?" "name" "model-name" "action" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}}}})
"Form-Comparer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Form-Comparer.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Form-Comparer" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Form-Comparer" #f 45 7 45 20 ("Tree-Comparer")
        {Lisp-Entry "compare-nodes/leaves" #f 48 11 48 31 ("leaves" "nodes")}
        {Lisp-Entry "form-present" #f 58 11 58 23 ("get-presentation" "get-name" "form")}
        {Lisp-Entry "create-item" #f 69 11 69 22 ("cdr" "car" "make-item" "error" "not" "form-present" "title" "let" "Form" "is?" "if" "item")}
        {Lisp-Entry "get-item-content" #f 78 11 78 27 ("create-item" "map" "get-leaves" "leaves" "get-nodes" "nodes" "case" "content" "get-moniker" "form" "let*" "kind" "item")}
        {Lisp-Entry "get-nodes" #f 84 11 84 20 ("get-children" "form")}
        {Lisp-Entry "get-leaves" #f 88 11 88 21 ("get-properties" "cons" "set!" "field-name" "field?" "if" "symbol" "value" "property" "function" "for-each-property" "leaves" "let" "form")}
        {Lisp-Entry "get-item-type" #f 97 11 97 24 ("leaf" "'leaf" "node" "'node" "Form" "is?" "if" "item")}
        {Lisp-Entry "different?" #f 103 11 103 21 ("/=" "value2" "get-value" "value1" "let" "check-algorithm" "leaf2" "leaf1")}}}})
"Form-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Form-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Form-Doc" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Form-Doc" #f 45 7 45 15 ("Element-Doc")
        {Lisp-Entry "parameters" #f 48 12 48 22 ("generate")}}}})
"Form-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Form-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Form-Tester" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Form-Tester" #f 45 7 45 18 ("title:" "Tester")
        {Lisp-Entry "test-form" #f 52 11 52 20 ("test-fields" "invoke")}
        {Lisp-Entry "test-fields" #f 61 11 61 22 ("1" "get-children" "length" "2" "a" "'a" "category-field" "list" "get-properties" "get-name" "'X" "get-model-name" "=" "rpt" "validate" "get-class-form" "form" "let" "X" "new")}}
      {Lisp-Entry "F" #f 76 7 76 8 ("2" "f1:" "Component")
        {Lisp-Entry "f1" #f 79 12 79 14 ("set-f1" "get-f1")}
        {Lisp-Entry "get-f1" #f 86 11 86 17 ("f1")}
        {Lisp-Entry "set-f1" #f 87 11 87 17 ("f1" "set!" "value")}}
      {Lisp-Entry "X" #f 90 7 90 8 ("5" "fc" "4" "fb" "f1:" "fa" "name:" "3" "x2:" "2" "x1:" "Component")
        {Lisp-Entry "x1" #f 93 12 93 14 ("set-x1" "get-x1")}
        {Lisp-Entry "x2" #f 94 12 94 14 ("set-x2" "get-x2")}
        {Lisp-Entry "get-x1" #f 104 11 104 17 ("x1")}
        {Lisp-Entry "set-x1" #f 105 11 105 17 ("x1" "set!" "value")}
        {Lisp-Entry "get-x2" #f 108 11 108 17 ("x2")}
        {Lisp-Entry "set-x2" #f 109 11 109 17 ("x2" "set!" "value")}}
      {Lisp-Entry "Y" #f 112 7 112 8 ("5" "x2:" "X")}}})
"Format"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Format.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Format" #f 37 9 37 28 ("jazz")
      {Lisp-Entry "Format" #f 44 7 44 13 ("keep-with-next?" "bullet-inside" "bullet-outside" "bulleted?" "left" "'left" "justification" "right-margin" "0" "initialize" "left-margin" "Exemplar")
        {Lisp-Entry "fold-literal" #f 57 11 57 23 ("Format" "'Format" "fold-exemplar")}}}})
"Format-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Format-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Format-Menu" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Format-Menu" #f 46 7 46 18 ("on-capitalize-selection" "capitalize-selection" "on-downcase-selection" "downcase-selection" "on-upcase-selection" "upcase-selection" "on-tabify" ":focus" "Event-Handler" "action-handler:" "title:" "tabify-selection" "name:" "Context-Menu")}}})
"Format-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Format-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Format-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Format-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-format" "invoke")}
        {Lisp-Entry "test-format" #f 61 11 61 22 ("error?" ":right" "5" "12345" "hello" "'hello" "yyy" "'yyy" "string" "3" ":b" ":a" "2.3" "#b1010" "#x0A" "-1" ":reader" ":human" "2" "format" "=" "rpt" "validate")}}}})
"Formatted-Presentation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Formatted-Presentation.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Formatted-Presentation" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Formatted-Presentation" #f 46 7 46 29 ("Presentation")
        {Lisp-Entry "moniker" #f 49 12 49 19 ("generate")}
        {Lisp-Entry "guest-actions" #f 57 11 57 24 ("nextmethod" "formatted-presentation" "'formatted-presentation" "find-actions" "cons")}
        {Lisp-Entry "on-edit-slide" #f 67 11 67 24 ("selection:" "moniker" "edit-document" "get-heading-range" "range" "get-application" "appl" "bell" "Heading-Slide" "is-not?" "if" "get-active-branch" "branch" "let" "evt")}}}})
"Formatted-Presentation-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Formatted-Presentation-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Formatted-Presentation-Actions" #f 37 9 37 60 ("jazz")
      {Lisp-Entry "Formatted-Presentation-Actions" #f 46 7 46 37 ("F12" "Shortcut" "shortcut:" "on-edit-slide" ":document" "Event-Handler" "action-handler:" "edit-slide" "name:" "Actions")}}})
"Formatted-Text"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Formatted-Text.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Formatted-Text" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Formatted-Text" #f 45 7 45 21 ("Text")
        {Lisp-Entry "formats" #f 48 18 48 25 ()}
        {Lisp-Entry "styles" #f 49 18 49 24 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("styles~self" "formats~self" "set!" "nextmethod" "apply" "others" "styles" "formats" "bind-keywords" "rest")}
        {Lisp-Entry "fold-literal" #f 59 11 59 23 ("paragraphs" ",paragraphs" "',paragraphs" "paragraphs:" "styles" ",styles" "',styles" "styles:" "formats" ",formats" "',formats" "formats:" "Formatted-Text" "new")}
        {Lisp-Entry "print" #f 66 11 66 16 ("paragraphs" "styles" "formats" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-formats" #f 79 18 79 29 ("formats")}
        {Lisp-Entry "set-formats" #f 83 18 83 29 ("formats" "set!" "value")}
        {Lisp-Entry "get-styles" #f 87 18 87 28 ("styles")}
        {Lisp-Entry "set-styles" #f 91 18 91 28 ("styles" "set!" "value")}}}})
"Formatted-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Formatted-Text-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Formatted-Text-Actions" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Formatted-Text-Actions" #f 46 7 46 29 ("on-bulleted" "bulleted" "Heading5" "heading5-style" "Heading4" "heading4-style" "Heading3" "heading3-style" "Heading2" "heading2-style" "Heading1" "heading1-style" "Heading0" "heading0-style" ":alt" "Shortcut" "shortcut:" "Default" "style:" "on-paragraph-style" ":focus" "Event-Handler" "action-handler:" "default-style" "name:" "Actions")}}})
"Formatted-Text-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Formatted-Text-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Formatted-Text-Row" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Formatted-Text-Row" #f 46 7 46 25 ("Text-Row")
        {Lisp-Entry "new-editor" #f 54 11 54 21 ("editor-class" "new")}
        {Lisp-Entry "editor-class" #f 58 11 58 23 ("Row-Formatted-Text-View")}
        {Lisp-Entry "editor-height" #f 62 11 62 24 ("250")}}}})
"Formatted-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Formatted-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Formatted-Text-View" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Formatted-Text-View" #f 48 7 48 26 ("wrap?:" "Text-View")
        {Lisp-Entry "ruler" #f 51 8 51 13 ()}
        {Lisp-Entry "external-name" #f 63 16 63 29 ("formatted-text" "'formatted-text" "rest")}
        {Lisp-Entry "default-extension" #f 67 11 67 28 ()}
        {Lisp-Entry "extensions" #f 71 11 71 21 ()}
        {Lisp-Entry "focus-actions" #f 80 11 80 24 ("nextmethod" "formatted-text" "'formatted-text" "find-actions" "cons")}
        {Lisp-Entry "host-workspaces" #f 90 11 90 26 ("formatted")}
        {Lisp-Entry "Formatted-Text-Controller" #f 100 9 100 34 ("Document-Controller")
          {Lisp-Entry "install-container" #f 103 13 103 30 ("install-ruler" "install-scroller")}
          {Lisp-Entry "install-ruler" #f 108 13 108 26 ("set-client" "set-parent" "set-ruler" "get-content" "parent:" "Ruler" "new" "ruler" "get-scroller" "scroller" "document" "get-root" "root" "let*")}}
        {Lisp-Entry "new-controller" #f 118 11 118 25 ("self" "Formatted-Text-Controller" "new")}
        {Lisp-Entry "get-ruler" #f 127 18 127 27 ("ruler")}
        {Lisp-Entry "set-ruler" #f 131 18 131 27 ("ruler" "set!" "r")}
        {Lisp-Entry "empty-content" #f 140 11 140 24 ("list" "paragraphs:" "styles:" "formats:" "Formatted-Text" "new")}
        {Lisp-Entry "get-content" #f 147 11 147 22 ("get-formatted-content")}
        {Lisp-Entry "set-content" #f 151 11 151 22 ("empty-content" "either" "set-formatted-content" "text")}
        {Lisp-Entry "get-context-menu" #f 161 11 161 27 ()}
        {Lisp-Entry "cursor-update" #f 170 11 170 24 (":ibeam" ":finger" "Hyperlink-Style" "is?" "get-style-at" "style" "let" ":left-arrow" "set-cursor" "paragraph-left" "get-h" "<" "if" "get-row" "get-paragraph" "par" "view->text" "pos" "let*" "selectable?" "enabled?" "and" "when" "show-text-cursor" "view")}
        {Lisp-Entry "mouse-down" #f 188 11 188 21 ("nextmethod" "Hyperlink-Style" "is?" "unless" "get-style-at" "style" "view->text" "pos" "let*" "enabled?" "when" "view")}
        {Lisp-Entry "drag-up" #f 196 11 196 18 ("bell" "else" "goto-anchor" "invoke-action" "cond" "get-action" "action" "get-anchor" "anchor" "Hyperlink-Style" "is?" "get-style-at" "style" "view->text" "pos" "let*" "not" "enabled?" "and" "when" "nextmethod" "mouse-selecting?" "let" "rest" "view")}
        {Lisp-Entry "invoke-action" #f 213 11 213 24 ("else" "get-properties" ":hyperlink" "Event" "new" "apply" "self" "invoke" "Event-Handler" "is?" "cond" "action")}
        {Lisp-Entry "goto-anchor" #f 220 11 220 22 ("cardinality" "0" "Cell" "Range$Cell$" "new" "set-selection" "=" "when" "string" "row" "heading" "function" "for-each-heading" "anchor")}
        {Lisp-Entry "copy-selection" #f 234 11 234 25 ("copy-formatted-selection" "nextmethod")}
        {Lisp-Entry "paste-clipboard" #f 239 11 239 26 ("paste-formatted-clipboard")}
        {Lisp-Entry "read-moniker" #f 248 11 248 23 ("read-formatted" "moniker")}
        {Lisp-Entry "save-to" #f 252 11 252 18 ("save-formatted" "moniker")}
        {Lisp-Entry "for-each-heading" #f 261 18 261 34 ("get-string" "get-name" "memq?" "essay" "style" "first-run" "run" "let*" "paragraph" "row" "function" "for-each-paragraph" "list" "all" "and" "when" "Heading3" "'Heading3" "heading3" "Heading2" "'Heading2" "heading2" "Heading1" "'Heading1" "heading1" "error?:" "Heading0" "'Heading0" "get-style" "heading0" "let" "proc")}
        {Lisp-Entry "collect-headings" #f 276 18 276 34 ("get-output" "list" "put" "string" "row" "heading" "function" "for-each-heading" "List-Factory" "new" "headings" "let")}
        {Lisp-Entry "insert-table-of-content" #f 289 11 289 34 ("toggle-bulleted" "unless" "anchor:" "insert-hyperlink" "get-row" "get-start" "start" "let*" "eq?" "when" "string" "row" "bind" "heading" "function" "for-each" "insert-newline" "Heading0" "'Heading0" "insert-styled" "collect-headings" "headings" "let")}
        {Lisp-Entry "Heading-Levels" #f 313 14 313 28 ("5" "Heading5" "4" "Heading4" "3" "Heading3" "2" "Heading2" "1" "Heading1" "0" "Heading0")}
        {Lisp-Entry "heading-level" #f 322 18 322 31 ("error" "cdr" "if" "Heading-Levels" "assq" "info" "let" "heading")}
        {Lisp-Entry "get-chapters" #f 334 11 334 23 ("collect-headings" "0" "Cell" "new" "heading-level" "list" "string" "row" "bind" "heading" "function" "map")}
        {Lisp-Entry "get-first-chapter" #f 341 11 341 28 ("lst")}
        {Lisp-Entry "get-remaining-chapters" #f 345 11 345 33 ("lst")}}}})
"Formatted-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Formatted-Workspace.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Formatted-Workspace" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Formatted-Workspace" #f 46 7 46 26 ("Text-Palette" "59" "Favorites-Manager" "Workbench-Manager" "Hierarchy-Browser" "Chapters-Browser" "31" "46" "Output-Log" "Search-Results" "Properties-Manager" "Console-Manager" "model-name:" "selection" "second" "-27" "vert" "5" "Rect" "insets:" "36" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "Plain-Formatted-Text-View" "frame-model:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 75 11 75 23 ("formatted" "'formatted")}}}})
"Formatter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "factory" "Formatter.jazz"} 1226584781
    {Lisp-Entry "jazz.library.factory.Formatter" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Formatter" #f 44 7 44 16 ("Object")
        {Lisp-Entry "format-directive" #f 47 26 47 42 ("directive" "output" "formatting")}}}})
"Frame"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "Frame.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.Frame" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "Frame" #f 48 7 48 12 ("View-Player")}}})
"Frame-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Frame-Button.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Frame-Button" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Frame-Button" #f 46 7 46 19 ("View")
        {Lisp-Entry "type" #f 49 12 49 16 ("set-type" "get-type")}
        {Lisp-Entry "state" #f 52 8 52 13 ("inactive" "'inactive")}
        {Lisp-Entry "get-type" #f 60 18 60 26 ("type")}
        {Lisp-Entry "set-type" #f 64 18 64 26 ("invalidate-view" "type" "set!" "value")}
        {Lisp-Entry "get-state" #f 74 18 74 27 ("state")}
        {Lisp-Entry "set-state" #f 78 18 78 27 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "mouse-activate?" #f 88 11 88 26 ()}
        {Lisp-Entry "mouse-enter" #f 92 11 92 22 ("pushed" "'pushed" "out-pushed" "highlighted" "'highlighted" "set-state" "inactive" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "get-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" #f 99 11 99 22 ("out-pushed" "'out-pushed" "pushed" "inactive" "'inactive" "set-state" "highlighted" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "get-enabled?" "and" "when")}
        {Lisp-Entry "mouse-down" #f 106 11 106 21 ("pushed" "'pushed" "set-state" "enabled?" "when" "pos")}
        {Lisp-Entry "drag-up" #f 111 11 111 18 ("inactive" "'inactive" "out-pushed" "highlighted" "'highlighted" "set-state" "pushed" "get-state" "case" "up" "unwind-protect" "get-enabled?" "when" "rest" "pos")}
        {Lisp-Entry "up" #f 120 11 120 13 ("self" "process-action" "pushed" "'pushed" "get-state" "eq?" "when")}
        {Lisp-Entry "type-icon" #f 130 11 130 20 ("close" "restore" "Bitmap-Resource" "maximize" "case" "type")}
        {Lisp-Entry "draw" #f 137 11 137 15 ("pushed" "'pushed" "state" "eq?" "if" "draw-caption" "+" "16" "Rect" "new" "rect" "0" "type" "type-icon" "get-application" "get-small-icons-cache" "draw-image" "get-height" "14" "center" "top" "let" "lv" "lh" "context" "surface")}}}})
"Frame-Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "hosting" "Frame-Host.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.hosting.Frame-Host" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Frame-Host" #f 51 7 51 17 ("else" "22" "6" "Rect" "in-rect?" "pos" "in-close-rect?" "method" "windows" "cond-expand" "on-close" "close" "on-maximize" ":form" "Event-Handler" "action-handler:" "french:" "english:" "Locales" "tooltip-text:" "tooltip?:" "type:" "maximize" "name:" "Caption-Host")
        {Lisp-Entry "dragging?" #f 54 8 54 17 ()}
        {Lisp-Entry "current-part" #f 55 8 55 20 ()}
        {Lisp-Entry "old-position" #f 56 8 56 20 ()}
        {Lisp-Entry "preserved-position" #f 57 8 57 26 ()}
        {Lisp-Entry "preserved-size" #f 58 8 58 22 ()}
        {Lisp-Entry "workspace" #f 59 8 59 17 ()}
        {Lisp-Entry "conclude" #f 73 11 73 19 ("destroy-mandatory" "nextmethod" "rest")}
        {Lisp-Entry "get-preserved-position" #f 83 18 83 40 ("preserved-position")}
        {Lisp-Entry "get-preserved-size" #f 87 18 87 36 ("preserved-size")}
        {Lisp-Entry "size-change" #f 96 11 96 22 ("4" "Rect" "insets:" "invalidate-border" "invalidate-caption" "nextmethod" "size")}
        {Lisp-Entry "on-maximize" #f 102 29 102 40 ("get-stage" "maximize" "evt")}
        {Lisp-Entry "on-close" #f 106 29 106 37 ("close-host" "evt")}
        {Lisp-Entry "close-host" #f 110 11 110 21 ("get-host" "close-with-confirm")}
        {Lisp-Entry "close-with-confirm" #f 114 11 114 29 ("nextmethod" "confirm-close" "close-popups")}
        {Lisp-Entry "activate-frame" #f 125 11 125 25 ("get-application" "update-windowing-actions" "get-player" "simulate-mouse-move" "select-workspace" "client-activate" "view" "function" "for-each-docked" "get-locked-activations?" "unless" "get-title" "get-toplevel" "set-caption" "get-maximized?" "when" "get-stage" "stage" "let" "self" "set-active-frame" "close-popups")}
        {Lisp-Entry "deactivate-frame" #f 141 11 141 27 ("stage-activate" "get-views" "null?" "when" "get-stage" "stage" "let" "set-active-frame")}
        {Lisp-Entry "destroy" #f 153 11 153 18 ("get-application" "update-windowing-actions" "focus-host" "activate-frame" "deactivate-frame" "nextmethod" "parent" "second-view" "essay" "new-active" "get-active-frame" "self" "eq?" "was-active?" "let*" "remove-surrogate" "get-surrogate" "when")}
        {Lisp-Entry "bring-to-front" #f 172 11 172 25 ("activate-front" "get-visible?" "when" "nextmethod")}
        {Lisp-Entry "send-to-back" #f 178 11 178 23 ("activate-front" "nextmethod")}
        {Lisp-Entry "show" #f 188 11 188 15 ("force?:" "activate-front" "guest" "get-size" "maximize-bounds" "maximize" "get-maximized?" "when" "get-stage" "stage" "let" "nextmethod")}
        {Lisp-Entry "get-workspace" #f 203 18 203 31 ("workspace")}
        {Lisp-Entry "set-workspace" #f 207 18 207 31 ("workspace" "set!" "value")}
        {Lisp-Entry "select-workspace" #f 211 18 211 34 ("apply-preferences" "error?:" "car" "'workspaces" "get-preferences" "memq?" "not" "not-null?" "and" "effective-host-workspaces" "else" "list" "workspace" "cond" "workspaces" "get-name" "current" "get-workspace-preferences" "pref" "let" "guest" "when")}
        {Lisp-Entry "ensure-displayed" #f 227 18 227 34 ("set-position" "set-size" "8" "padding:" "fit-within" "new-size" "new-position" "receive" "get-rect" "rect" "parent" "get-size" "outer" "let")}
        {Lisp-Entry "get-effective-position" #f 240 11 240 33 ("get-position" "get-preserved-position" "get-maximized?" "if")}
        {Lisp-Entry "get-effective-size" #f 246 11 246 29 ("get-size" "get-preserved-size" "get-maximized?" "if")}
        {Lisp-Entry "dispatch-mouse-copy" #f 257 11 257 30 ("mouse-position" "mouse-copy" "and" "when" "get-focus" "dest" "mouse-view" "view" "let")}
        {Lisp-Entry "confirm-close" #f 269 11 269 24 ("confirm-close" "guest" "when" "rest")}
        {Lisp-Entry "caption-rect" #f 279 11 279 23 ("20" "+" "get-width" "-" "Rect" "new" "4" "0" "maximized?" "if" "border" "let")}
        {Lisp-Entry "maximize-rect" #f 284 29 284 42 ("17" "21" "3" "+" "37" "-" "Rect" "new" "right" "top")}
        {Lisp-Entry "close-rect" #f 288 29 288 39 ("17" "3" "+" "19" "-" "Rect" "new" "right" "top")}
        {Lisp-Entry "mouse-activate?" #f 297 11 297 26 ()}
        {Lisp-Entry "mouse-activate" #f 301 11 301 25 ("nextmethod" "bring-to-front")}
        {Lisp-Entry "activate-focus" #f 306 11 306 25 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "deactivate-focus" #f 311 11 311 27 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "maximize" #f 321 11 321 19 ("update-buttons" "get-size" "preserved-size" "get-position" "preserved-position" "set!" "maximized?" "unless" "get-host" "host" "let")}
        {Lisp-Entry "maximize-bounds" #f 330 18 330 33 ("invalidate-view" "layout-view" "set-size" "0" "Point" "set-position" "get-host" "host" "let" "size")}
        {Lisp-Entry "restore" #f 338 11 338 18 ("invalidate-view" "layout-view" "update-buttons" "maximized?" "set!" "set-size" "preserved-size" "set-position" "preserved-position" "when" "get-host" "host" "let")}
        {Lisp-Entry "layout" #f 357 11 357 17 ("get-height" "get-width" "-" "Dimension" "set-size" "+" "Point" "new" "set-position" "content" "when" "layout-buttons" "rect-height" "caption-height" "caption-rect" "0" "4" "if" "border" "caption-visible?" "caption?" "let*")}
        {Lisp-Entry "layout-buttons" #f 368 29 368 43 ("close-rect" "close" "'close" "maximize-rect" "maximize" "'maximize" "locate" "set-rect" "get-right" "-" "right" "get-bounds" "bounds" "top" "buttons-border" "border" "let*")}
        {Lisp-Entry "buttons-border" #f 377 29 377 43 ("0" "4" "caption-visible?" "if")}
        {Lisp-Entry "invalidate-caption" #f 386 11 386 29 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "update-buttons" #f 390 29 390 43 ("close" "'close" "maximize" "'maximize" "locate" "set-visible?" "caption-visible?" "visible?" "let")}
        {Lisp-Entry "caption-icon" #f 401 11 401 23 ("guest-icon" "get-guest" "guest" "get-host" "host" "let*")}
        {Lisp-Entry "caption-title" #f 407 11 407 24 ("get-title" "get-host" "host" "let")}
        {Lisp-Entry "caption-focused?" #f 412 11 412 27 ("get-focused-host" "self" "eq?")}
        {Lisp-Entry "caption-visible?" #f 416 11 416 27 ("maximized?" "not")}
        {Lisp-Entry "cursor-update" #f 425 11 425 24 ("get-resize-cursor" "get-size" "find-resize-part" "maximized?" "essay" "part" "let" ":arrow" "set-cursor" "resizeable?" "not" "if" "pos")}
        {Lisp-Entry "moveable?" #f 439 29 439 38 ()}
        {Lisp-Entry "resizeable?" #f 443 29 443 40 ()}
        {Lisp-Entry "mouse-down" #f 447 11 447 21 ("acquire-capture" "to-desktop" "old-position" "resizeable?" "essay" "current-part" "dragging?" "set!" "or" "get-size" "find-resize-part" "part" "moveable?" "when" "send-to-back" "control-down?" "and" "if" "caption-rect" "in-rect?" "in-caption?" "let" "pos")}
        {Lisp-Entry "drag-move" #f 460 11 460 20 ("set!" "resize-host" "dheight" "dwidth" "function" "resize-client" "get-host" "move-figure" "current-part" "not" "if" "get-v" "dv" "get-h" "dh" "old-position" "point-" "delta" "to-desktop" "desktop-pos" "let*" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" #f 474 11 474 18 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "double-click" #f 480 11 480 23 ("toggle-maximized" "caption-rect" "in-rect?" "close-host" "in-close-rect?" "cond" "pos")}
        {Lisp-Entry "resize-host" #f 496 29 496 40 ("grow-bounds" "dheight" "dwidth" "dv" "dh")}
        {Lisp-Entry "toggle-maximized" #f 500 29 500 45 ("get-stage" "toggle-maximized")}}}})
"Frame-Indicator"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugger" "Frame-Indicator.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugger.Frame-Indicator" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Frame-Indicator" #f 48 7 48 22 ("Object")
        {Lisp-Entry "color" #f 51 8 51 13 ()}
        {Lisp-Entry "location" #f 52 8 52 16 ()}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("color~self" "set!" "nextmethod" "color" "color:")}
        {Lisp-Entry "edit" #f 65 18 65 22 ("install-indicator" "uninstall-active-indicator" "not" "if" "activate-focus?" "activate-focus?:" "location")}
        {Lisp-Entry "install-indicator" #f 71 11 71 28 ("set-visible?" "bring-to-front" "reset-tooltip" "location~self" "set!" "ensure-cell-displayed" "get-start" "color" "fill" "find-location" "range" "text" "frame" "receive" "uninstall-active-indicator" "location")}
        {Lisp-Entry "uninstall-indicator" #f 82 11 82 30 ("reset-tooltip" "get-start" "unfill" "find-location" "range" "text" "frame" "receive" "location")}
        {Lisp-Entry "uninstall-active-indicator" #f 88 21 88 47 ("set!" "uninstall-indicator" "location" "when")}
        {Lisp-Entry "find-location" #f 94 11 94 24 ("get-guest" "values" "Range$Cell$" "range" "visible?:" "activate-focus?:" "get-application" "edit-document" "frame" "1" "+" "end" "Cell" "start" "list" "File" "new" "file" "let" "col" "line" "filename" "bind" "location")}}}})
"Frame-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Frame-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Frame-Preferences" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Frame-Preferences" #f 48 7 48 24 ("Bitmap-Resource" "icon:" "Figure-Preferences")
        {Lisp-Entry "find-client" #f 60 11 60 22 ("get-name" "autoload" "get-stage" "find-host")}}}})
"Frame-Snapshot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "snapshot" "Frame-Snapshot.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.snapshot.Frame-Snapshot" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Frame-Snapshot" #f 45 7 45 21 ("Object")
        {Lisp-Entry "thread" #f 48 8 48 14 ()}
        {Lisp-Entry "parameters" #f 49 8 49 18 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("parameters~self" "thread~self" "set!" "nextmethod" "parameters" "thread")}
        {Lisp-Entry "compare-object" #f 58 11 58 25 (":not-equal" "else" ":equal" "present" "=" ":incompatible" "Frame-Snapshot" "is-not?" "cond" "target")}
        {Lisp-Entry "get-thread" #f 72 18 72 28 ("thread")}
        {Lisp-Entry "get-parameters" #f 76 26 76 40 ("parameters")}
        {Lisp-Entry "present" #f 85 26 85 33 ()}
        {Lisp-Entry "get-image" #f 89 26 89 35 ()}
        {Lisp-Entry "edit" #f 98 26 98 30 ()}}}})
"Frames-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugger" "Frames-View.jazz"} 1227218394
    {Lisp-Entry "jazz.debugger.debugger.Frames-View" #f 37 9 37 43 ("Frames-Tree" "register-autoclass" "jazz")
      {Lisp-Entry "Frames-View" #f 59 7 59 18 ("on-context-menu" "context-menu-handler:" "on-select-frame" "Selection-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" "frames" "shown?:" "header" "fill" "content" "flat?:" "vscroll?:" "center" "scroller" "on-update" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "update" "tools" "name:" "border" "layout-type:" "Layout-View")
        {Lisp-Entry "process" #f 62 12 62 19 ("generate")}
        {Lisp-Entry "thread" #f 63 12 63 18 ()}
        {Lisp-Entry "external-name" #f 77 16 77 29 ("frames-view" "'frames-view" "rest")}
        {Lisp-Entry "host-icon" #f 86 16 86 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 90 16 90 26 ()}
        {Lisp-Entry "get-tools-view" #f 99 11 99 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 103 11 103 24 ("acquire-focus" "frames" "'frames" "locate" "tree" "let")}
        {Lisp-Entry "get-thread" #f 113 18 113 28 ("thread")}
        {Lisp-Entry "set-thread" #f 117 18 117 28 ("update" "thread" "set!" "value")}
        {Lisp-Entry "resize" #f 127 11 127 17 ("scroller" "'scroller" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-context-menu" #f 132 11 132 26 ("track-popup-menu" "when" "selected-frame" "new-context-menu" "menu" "let" "function" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-select-frame" #f 143 11 143 26 ("edit-frame" "frame-change" "get-reference" "essay" "set-repl-frame" "selected-frame" "frame" "let" "get-active-stop" "thread" "and" "when" "evt")}
        {Lisp-Entry "on-update" #f 151 11 151 20 ("update" "evt")}
        {Lisp-Entry "with-preserving-update" #f 160 11 160 33 ("generate-event?:" "debugged=?" "test:" "data" "'data" "use:" "with-preserved-selection" "thunk" "tree")}
        {Lisp-Entry "update" #f 168 21 168 27 ("get-frames" "user-data:" "image:" "title:" "Tree-Node" "list" "children:" "add-row" "Debugged-Frame" "new" "debugged" "image" "title" "for-each" "get-active-stop" "stop" "get-process" "process" "get-debugger" "debugger" "thread" "when" "remove-every-row" "with-preserving-update" "with-update-locked" "frames" "'frames" "locate" "tree" "function" "with-system-exception-debugger" "get-location" "if" "Bitmap-Resource" "frame-image" "else" "present-identifier" "symbol?" "not" "cond" "get-name" "name" "let" "frame" "frame-title" "define")}
        {Lisp-Entry "*frame-indicator*" #f 211 14 211 31 ("Light-Green" "name:" "Color" "color:" "Frame-Indicator" "new")}
        {Lisp-Entry "edit-frame" #f 215 11 215 21 ("*frame-indicator*" "edit" "get-location" "jazz.continuation-capture" "'jazz.continuation-capture" "get-name" "eq?" "if" "location" "selected-frame" "frame" "let" "activate-focus?" "activate-focus?:")}
        {Lisp-Entry "frame-change" #f 226 11 226 23 ("Frame-Snapshot" "is?" "not" "or" "when" "frame" "let" "selected-frame" "process-frame-change")}
        {Lisp-Entry "select-first-frame" #f 235 18 235 36 ("set-single-selection" "0" "get-visible-count" ">" "get-single-selection" "not" "and" "when" "frames" "'frames" "locate" "tree" "let")}
        {Lisp-Entry "selected-frame" #f 246 18 246 32 ("get-user-data" "when" "selected-row" "row" "let")}
        {Lisp-Entry "selected-row" #f 252 11 252 23 ("get-row" "when" "get-single-selection" "n" "frames" "'frames" "locate" "tree" "let*")}
        {Lisp-Entry "new-context-menu" #f 264 11 264 27 ("Frame-Menu" "new" "when" "object")}}
      {Lisp-Entry "Frames-Tree" #f 274 7 274 18 ("toplevel-controls?:" "431" "width:" "title:" ":icons" "portfolio:" "Tree-View")}
      {Lisp-Entry "Frame-Menu" #f 290 7 290 17 ("on-edit" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "edit" "name:" "Context-Menu")
        {Lisp-Entry "on-edit" #f 298 11 298 18 ("evt")}}}})
"Function-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Function-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Function-Tester" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Function-Tester" #f 45 7 45 22 ("title:" "Tester")}}})
"Gambit-Debugger"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debuggers" "gambit" "Gambit-Debugger.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debuggers.gambit.Gambit-Debugger" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "Gambit-Debugger" #f 46 7 46 22 ("Debugger")
        {Lisp-Entry "start-debugger" #f 54 11 54 25 ("rdi-debugger-init" "lambda" "make-thread" "thread-start!" "rdi-function" "rdi-init" "user-message")}
        {Lisp-Entry "stop-debugger" #f 64 11 64 24 ()}
        {Lisp-Entry "get-processes" #f 68 11 68 24 ("validate-liveness?" "validate-liveness?:")}
        {Lisp-Entry "detach-processes" #f 72 18 72 34 ()}
        {Lisp-Entry "process=?" #f 81 11 81 20 ("y" "x")}
        {Lisp-Entry "process-live?" #f 85 11 85 24 ("process")}
        {Lisp-Entry "process-title" #f 89 11 89 24 ("process")}
        {Lisp-Entry "process-icon" #f 93 11 93 23 ("process")}
        {Lisp-Entry "process-threads" #f 97 11 97 26 ("process")}
        {Lisp-Entry "present-process" #f 101 11 101 26 ("process")}
        {Lisp-Entry "evaluate-expressions" #f 105 11 105 31 ("expressions" "process")}
        {Lisp-Entry "process-detach" #f 109 11 109 25 ("process")}
        {Lisp-Entry "process-exit" #f 113 11 113 23 ("process")}
        {Lisp-Entry "thread-name" #f 122 11 122 22 ("thread")}
        {Lisp-Entry "thread-state" #f 126 11 126 23 ("thread")}
        {Lisp-Entry "thread-stops" #f 130 11 130 23 ("thread")}
        {Lisp-Entry "break-thread" #f 134 11 134 23 ("thread" "process")}
        {Lisp-Entry "restart-stop" #f 143 11 143 23 ("restart" "process")}
        {Lisp-Entry "stop-kind" #f 152 11 152 20 ("stop")}
        {Lisp-Entry "stop-reason" #f 156 11 156 22 ("stop")}
        {Lisp-Entry "stop-frames" #f 160 11 160 22 ("stop")}
        {Lisp-Entry "continue-stop" #f 164 11 164 24 ("stop" "process")}
        {Lisp-Entry "frame-name" #f 173 11 173 21 ("frame")}
        {Lisp-Entry "frame-location" #f 177 11 177 25 ("frame")}
        {Lisp-Entry "frame-variables" #f 181 11 181 26 ("frame")}
        {Lisp-Entry "frame-variable-name" #f 185 11 185 30 ("variable" "frame")}
        {Lisp-Entry "frame-variable-value" #f 189 11 189 31 ("variable" "frame")}}
      {Lisp-Entry "console-no" #f 203 12 203 22 ("1")}
      {Lisp-Entry "open-console-window" #f 207 13 207 32 ("setup-debugger-console-ports" "values" "register-console" "text" "increase!" "console-no" "format" "title" "get-console-manager" "manager" "let")}
      {Lisp-Entry "register-console" #f 216 16 216 32 ("object->serial" "register-debugger-resource" "unregister-debugger-console" "Debugger-Resource" "console" "register-debugger-console" "text" "self" "Debugged-Process" "new" "process" "let" "function" "call-event" "thread-proxy" "process-proxy")}
      {Lisp-Entry "setup-debugger-console-ports" #f 230 13 230 41 ("set-console-port" "permanent-close:" "list" "open-string-pipe" "tail" "head" "receive" "text")}
      {Lisp-Entry "setup-debugger-console-ports" #f 237 13 237 41 ("start-debugger-console-pump" "set-console-pump" "set-console-port" "permanent-close:" "list" "open-string-pipe" "tail" "head" "receive" "thread-proxy" "process-proxy" "text")}
      {Lisp-Entry "rdi" #f 248 12 248 15 ()}
      {Lisp-Entry "rdi-debugger-init" #f 252 13 252 30 ("rdi-force-connection" "rdi-create-server" "rdi" "set!")}
      {Lisp-Entry "rdi-function" #f 257 13 257 25 ("error" "else" "rdi-console-output" "console-output" "rdi-register-console" "register-console" "case" "fn")}
      {Lisp-Entry "rdi-console-table" #f 272 12 272 29 ("make-table")}
      {Lisp-Entry "rdi-register-console" #f 276 13 276 33 ("rdi-console-input-pump-start!" "rdi-console-table" "table-set!" "open-console-window" "console-port" "console-text" "receive" "console-id")}
      {Lisp-Entry "rdi-console-input-pump-start!" #f 284 13 284 42 ("rdi-console-input" "rdi" "rdi-console-input-eof" "not" "if" "str" "Permanent-Port" "new" "start-pump" "lambda" "make-thread" "thread-start!" "console-port" "console-id")}
      {Lisp-Entry "rdi-console-output" #f 296 13 296 31 ("debugger-console-output" "if" "rdi-console-table" "table-ref" "console-text" "let" "output" "console-id")}
      {Lisp-Entry "rdi-console-input" #f 309 13 309 30 ("console-input" "'console-input" "rdi-remote-call" "text" "console-id" "rdi")}
      {Lisp-Entry "rdi-console-input-eof" #f 312 13 312 34 ("console-input" "'console-input" "rdi-remote-call" "console-id" "rdi")}
      {Lisp-Entry "rdi-user-interrupt" #f 315 13 315 31 ("user-interrupt" "'user-interrupt" "rdi-remote-call" "console-id" "rdi")}
      {Lisp-Entry "rdi-get-threads" #f 318 13 318 28 ("get-threads" "'get-threads" "rdi-remote-call" "rdi")}
      {Lisp-Entry "rdi-get-external-representation" #f 321 13 321 44 ("get-external-representation" "'get-external-representation" "rdi-remote-call" "max-length" "$obj" "rdi")}}})
"Gambit-Product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debuggers" "gambit" "Gambit-Product.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debuggers.gambit.Gambit-Product" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Gambit-Product" #f 49 7 49 21 ("Product")
        {Lisp-Entry "started?" #f 57 14 57 22 ()}
        {Lisp-Entry "start-debugger" #f 61 11 61 25 ("set!" "register-debugger" "start-debugger" "Gambit-Debugger" "new" "debugger" "let" "started?" "not" "when")}
        {Lisp-Entry "launch" #f 74 11 74 17 ("show-console:" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" "arguments:" "path:" "list" "open-process" "start-debugger" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:" "debug?" "debug?:" "configuration" "configuration:")}}}})
"Group"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "database" "Group.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.database.Group" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Group" #f 47 7 47 12 ("title:" "Component")
        {Lisp-Entry "title" #f 50 12 50 17 ("set-title" "get-title")}
        {Lisp-Entry "classes" #f 51 12 51 19 ("set-classes" "get-classes")}
        {Lisp-Entry "sort?" #f 52 12 52 17 ("set-sort?" "get-sort?")}
        {Lisp-Entry "print" #f 59 11 59 16 ("title" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-title" #f 71 18 71 27 ("title")}
        {Lisp-Entry "set-title" #f 75 18 75 27 ("title" "set!" "t")}
        {Lisp-Entry "get-classes" #f 79 18 79 29 ("classes")}
        {Lisp-Entry "set-classes" #f 83 18 83 29 ("classes" "set!" "value")}
        {Lisp-Entry "get-sort?" #f 87 18 87 27 ("sort?")}
        {Lisp-Entry "set-sort?" #f 91 18 91 27 ("designers" "descendants" "'descendants" "self" "process-refresh" "designer" "function" "for-each" "set!" "sort?" "neq?" "when" "value")}
        {Lisp-Entry "get-addable-classes" #f 104 11 104 30 ("get-component-classes" "autoload" "when" "model" "function" "map")}
        {Lisp-Entry "get-component-classes" #f 111 11 111 32 ("get-component-classes" "parent" "when" "classes" "either")}
        {Lisp-Entry "get-class-presentation" #f 122 16 122 38 ()}
        {Lisp-Entry "get-class-image" #f 126 16 126 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 130 16 130 37 ("nextmethod" "else" "sort?" "classes" "title" "field-name" "case" "property")}
        {Lisp-Entry "get-custom-card" #f 138 11 138 26 ("Group-Card")}
        {Lisp-Entry "sort-components?" #f 142 11 142 27 ("sort?")}
        {Lisp-Entry "display-property?" #f 146 11 146 28 ("title" "visible?" "children" "before" "name-info" "class-info" "field-name" "memq?" "not" "property")}
        {Lisp-Entry "indexable?" #f 150 11 150 21 ()}
        {Lisp-Entry "get-row-instance" #f 154 11 154 27 ("nextmethod" "else" "Boolean-Row" "sort?" "Class-List-Row" "new" "classes" "field-name" "case" "property")}}
      {Lisp-Entry "Class-List-Row" #f 166 7 166 21 ("List-Row")
        {Lisp-Entry "get-subrow-class" #f 169 11 169 27 ("Class-Combo-Row")}}
      {Lisp-Entry "Class-Combo-Row" #f 178 7 178 22 ("Combo-Row")
        {Lisp-Entry "initialize" #f 181 11 181 21 ("Recipe" "Apartment" "Password" "Person" "Organism" "Company" "Anniversary" "Calendar-Event" "Task" "Note" "Group" "set-choices" "nextmethod" "apply" "rest")}}}})
"Group-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Group-Box.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Group-Box" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Group-Box" #f 48 7 48 16 ("Container")
        {Lisp-Entry "flat?" #f 51 12 51 17 ("set-flat?" "get-flat?")}
        {Lisp-Entry "style" #f 52 12 52 17 ("set-style" "get-style")}
        {Lisp-Entry "get-flat?" #f 60 18 60 27 ("flat?")}
        {Lisp-Entry "set-flat?" #f 64 18 64 27 ("invalidate-view" "flat?" "set!" "value")}
        {Lisp-Entry "get-style" #f 69 18 69 27 ("style")}
        {Lisp-Entry "set-style" #f 73 18 73 27 ("invalidate-view" "style" "set!" "value")}
        {Lisp-Entry "set-title" #f 78 11 78 20 ("layout-view" "nextmethod" "value")}
        {Lisp-Entry "flat-look?" #f 88 11 88 21 ("flat?" "else" "group/border/flat?" "'group/border/flat?" "get-look" "get-element" "styled" "style" "case")}
        {Lisp-Entry "layout" #f 99 11 99 17 ("Dimension" "set-size" "Point" "new" "set-position" "get-content" "content" "height" "4" "-" "width" "else" "+" "title" "cond" "top" "2" "1" "flat?" "if" "left" "get-ascent" "ascent" "font" "get-metrics" "metrics" "get-height" "box-height" "get-width" "box-width" "get-size" "size" "let*")}
        {Lisp-Entry "draw" #f 119 11 119 15 ("draw-text" "Black" "set-text-color" "+" "-" "fill-rect" "when" "rectangle" "'rectangle" "edges:" "sunken" "'sunken" "outer:" "raised" "'raised" "inner:" "draw-edge" "Rect" "new" "frame-rect" "cairo_font_extents_t-free" "0" "2" "cairo_font_extents_t-ascent-ref" "/" "fxceiling" "if" "top" "get-text-extent" "and" "extent" "get-text-metrics" "metrics" "get-bounds" "rect" "Group-Border" "else" "Entry-Border" "entry" "style" "case" "frame-color" "flat-look?" "flat?" "Medium" "name:" "Color" "color" "9" "offset" "get-height" "height" "get-width" "width" "get-size" "size" "get-title" "localize" "title" "let*" "lv" "lh" "context" "surface")}}}})
"Group-Card"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "card" "Group-Card.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.card.Group-Card" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Group-Card" #f 48 7 48 17 ("classes-invite" "classes-image" "501" "346" "classes-group" "64" "sort?" "Label" "Font" "font:" "Default" "Text-Style" "default-style:" "top-padding:" "2" "left-padding:" "title" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "19" "262" "33" "61" "title-border" "16" "250" "48" "general-invite" "visible?:" "Bitmap-Resource" "image-name:" ":large-icons" "portfolio:" "32" "8" "general-image" "347" "334" "0" "7" "title:" "general-group" "name:" "350" "850" "Dimension" "size:" "107" "184" "Point" "position:" "Custom-Card")
        {Lisp-Entry "Properties-Mapping" #f 73 14 73 32 ("boolean" "sort?" "string" "title")}
        {Lisp-Entry "get-properties-mapping" #f 78 11 78 33 ("Properties-Mapping")}
        {Lisp-Entry "resize" #f 87 11 87 17 ("classes-group" "'classes-group" "0" "general-group" "'general-group" "locate" "size-figure" "dv" "dh")}}}})
"Groupable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Groupable.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Groupable" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Groupable" #f 45 11 45 20 ()
        {Lisp-Entry "get-group" #f 48 35 48 44 ()}
        {Lisp-Entry "set-group" #f 49 35 49 44 ("value")}}}})
"Groupware-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "workspace" "Groupware-Workspace.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.workspace.Groupware-Workspace" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Groupware-Workspace" #f 47 7 47 26 ("Search-Results" "Properties-Manager" "selection" "second" "Workbench-Manager" "model-name:" "-31" "vert" "5" "Rect" "insets:" "20" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 64 11 64 23 ("groupware" "'groupware")}}}})
"Guest-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "hosting" "Guest-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.hosting.Guest-Actions" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Guest-Actions" #f 46 7 46 20 ("on-compare-saved" "compare-saved" "on-revert-saved" "revert-saved" "on-save-as" "save-as" ":alt" ":control" "Shortcut" "shortcut:" "on-save" ":document" "Event-Handler" "action-handler:" "save" "name:" "Actions")}}})
"Guest-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "hosting" "Guest-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.hosting.Guest-Preferences" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Guest-Preferences" #f 45 7 45 24 ("Frame-Preferences")
        {Lisp-Entry "initargs" #f 48 12 48 20 ("generate")}}}})
"HTML-Generator"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTML-Generator.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTML-Generator" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "HTML-Generator" #f 45 7 45 21 ("Object")
        {Lisp-Entry "directory" #f 48 8 48 17 ()}
        {Lisp-Entry "get-directory" #f 56 18 56 31 ("directory")}
        {Lisp-Entry "generate-page?" #f 65 26 65 40 ("pages" "resource")}
        {Lisp-Entry "setup-directory" #f 69 26 69 41 ("generated-directory" "directory" "set!" "pages" "resource" "request")}
        {Lisp-Entry "generated-directory" #f 73 26 73 45 ("pages" "resource" "request")}
        {Lisp-Entry "generated-page" #f 77 26 77 40 ("directory" "new-directory" "new-file" "file" "generated-pagename" "name" "let*" "pages" "resource" "root-directory" "request")}
        {Lisp-Entry "generated-pagename" #f 83 26 83 44 ("either" "format" "name" "substitute" "base" "error?:" "get-parameter" "essay" "action" "let*" "include-action?" "include-action?:" "pages" "resource" "request")}
        {Lisp-Entry "get-alias" #f 95 26 95 35 ("error" "name")}}}})
"HTML-Page"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTML-Page.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTML-Page" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "HTML-Page" #f 45 7 45 16 ("Object")
        {Lisp-Entry "name" #f 48 8 48 12 ()}
        {Lisp-Entry "html" #f 49 8 49 12 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("name~self" "set!" "nextmethod" "name" "name:")}
        {Lisp-Entry "print" #f 57 11 57 16 ("html" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-name" #f 68 18 68 26 ("name")}
        {Lisp-Entry "get-html" #f 72 18 72 26 ("html")}
        {Lisp-Entry "get-children" #f 81 11 81 23 ("html" "list")}
        {Lisp-Entry "set-children" #f 85 11 85 23 ("car" "html" "set!" "children")}
        {Lisp-Entry "add-child" #f 89 11 89 20 ("html" "set!" "child")}
        {Lisp-Entry "render" #f 98 11 98 17 ("html" "render-node" "printer" "level" "simple?" "context" "renderer")}}}})
"HTML-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "html" "text" "HTML-Text-Actions.jazz"} 1226584778
    {Lisp-Entry "jazz.language.html.text.HTML-Text-Actions" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "HTML-Text-Actions" #f 47 7 47 24 ("on-preformatted" "preformatted" "on-code" "code" "on-variable" "variable" "on-definition-data" "definition-data" "on-definition-term" "definition-term" "on-definition-list" "definition-list" "on-list-item" "list-item" "on-unordered-list" "unordered-list" "on-ordered-list" "ordered-list" "on-table-data" "table-data" "on-table-row" "table-row" "on-table-header" "table-header" "on-table" "table" "on-image" "image" "on-anchor" "anchor" "on-center" "center" "on-font" "font" "on-italic" "italic" "on-bold" "bold" "on-line-break" "line-break" "on-paragraph" "paragraph" "on-division" "division" "on-comment" "comment" "header3" "header2" ":control" "Shortcut" "shortcut:" "on-header" "header1" "on-base-template" ":focus" "Event-Handler" "action-handler:" "base-template" "name:" "Actions")}}})
"HTML-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "html" "text" "HTML-Text-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.language.html.text.HTML-Text-Preferences" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "HTML-Text-Preferences" #f 49 7 49 28 ("Dark-Purple" "specifier-color:" "option-color:" "Purple" "attribute-color:" "Dark-Blue" "name:" "Color" "tag-color:" "title:" "Code-Text-Preferences")
        {Lisp-Entry "tag-color" #f 52 12 52 21 ("generate")}
        {Lisp-Entry "attribute-color" #f 53 12 53 27 ("generate")}
        {Lisp-Entry "option-color" #f 54 12 54 24 ("generate")}
        {Lisp-Entry "specifier-color" #f 55 12 55 27 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 72 11 72 37 ("specifier-color" "option-color" "attribute-color" "tag-color")}
        {Lisp-Entry "get-row-instance" #f 76 11 76 27 ("nextmethod" "else" "Color-Row" "new" "specifier-color" "option-color" "attribute-color" "tag-color" "field-name" "case" "property")}}}})
"HTML-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "html" "text" "HTML-Text-View.jazz"} 1226584778
    {Lisp-Entry "jazz.language.html.text.HTML-Text-View" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "HTML-Text-View" #f 48 7 48 21 ("Code-Text-View")
        {Lisp-Entry "install" #f 51 11 51 18 ("get-specifier-color" "Specifier" "'Specifier" "get-option-color" "Option" "'Option" "get-attribute-color" "Attribute" "'Attribute" "get-tag-color" "color:" "Default" "'Default" "base:" "Tag" "'Tag" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 60 16 60 29 ("html-text" "'html-text" "rest")}
        {Lisp-Entry "host-icon" #f 69 16 69 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-workspaces" #f 73 11 73 26 ("html")}
        {Lisp-Entry "context-menu" #f 82 11 82 23 ("HTML-Text-Menu" "else" "Action-Menu" "new" "track-popup-menu" "cond" "always" "'always" "never" "'never" "if" "move-caret:" "context-menu-click" "not" "and" "action?" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "pos")}
        {Lisp-Entry "focus-actions" #f 95 11 95 24 ("nextmethod" "html-text" "'html-text" "find-actions" "cons")}
        {Lisp-Entry "auto-complete" #f 105 11 105 24 ("insert-char/backspace" "key")}
        {Lisp-Entry "on-base-template" #f 114 11 114 27 ("get-output-string" "insert-string" "format" "open-output-string" "printer" "with-closed" "evt")}
        {Lisp-Entry "on-header" #f 135 11 135 20 ("format" "insert-tag" "level:" "get-property" "level" "let" "evt")}
        {Lisp-Entry "on-comment" #f 140 11 140 21 ("insert-pair" "evt")}
        {Lisp-Entry "on-division" #f 144 11 144 22 ("insert-tag" "evt")}
        {Lisp-Entry "on-paragraph" #f 148 11 148 23 ("insert-tag" "evt")}
        {Lisp-Entry "on-line-break" #f 152 11 152 24 ("insert-tag" "evt")}
        {Lisp-Entry "on-insert-bold" #f 156 11 156 25 ("insert-tag" "evt")}
        {Lisp-Entry "on-insert-italic" #f 160 11 160 27 ("insert-tag" "evt")}
        {Lisp-Entry "on-font" #f 164 11 164 18 ("insert-tag" "evt")}
        {Lisp-Entry "on-center" #f 168 11 168 20 ("insert-tag" "evt")}
        {Lisp-Entry "on-anchor" #f 172 11 172 20 ("insert-tag" "evt")}
        {Lisp-Entry "on-image" #f 176 11 176 19 ("insert-tag" "evt")}
        {Lisp-Entry "on-table" #f 180 11 180 19 ("vertical?:" "insert-tag" "evt")}
        {Lisp-Entry "on-table-header" #f 184 11 184 26 ("vertical?:" "insert-tag" "evt")}
        {Lisp-Entry "on-table-row" #f 188 11 188 23 ("vertical?:" "insert-tag" "evt")}
        {Lisp-Entry "on-table-data" #f 192 11 192 24 ("insert-tag" "evt")}
        {Lisp-Entry "on-ordered-list" #f 196 11 196 26 ("vertical?:" "insert-tag" "evt")}
        {Lisp-Entry "on-unordered-list" #f 200 11 200 28 ("vertical?:" "insert-tag" "evt")}
        {Lisp-Entry "on-list-item" #f 204 11 204 23 ("insert-string" "evt")}
        {Lisp-Entry "on-definition-list" #f 208 11 208 29 ("insert-string" "evt")}
        {Lisp-Entry "on-definition-term" #f 212 11 212 29 ("insert-string" "evt")}
        {Lisp-Entry "on-definition-data" #f 216 11 216 29 ("insert-string" "evt")}
        {Lisp-Entry "on-variable" #f 220 11 220 22 ("insert-tag" "evt")}
        {Lisp-Entry "on-code" #f 224 11 224 18 ("insert-tag" "evt")}
        {Lisp-Entry "on-preformatted" #f 228 11 228 26 ("insert-tag" "evt")}
        {Lisp-Entry "insert-tag" #f 237 11 237 21 ("end-tag" "start-tag" "insert-pair" "apply" "rest" "tag")}
        {Lisp-Entry "insert-pair" #f 241 11 241 22 ("Range$Cell$" "set-selection" "get-end" "e" "get-start" "s" "0" "1" "get-row" "Cell" "new" "length" "+" "set-caret" "insert-string" "format" "not" "str" "get-caret" "pos" "let" "empty-selection?" "if" "vertical?" "vertical?:" "end" "start")}
        {Lisp-Entry "start-tag" #f 260 11 260 20 ("format" "tag")}
        {Lisp-Entry "end-tag" #f 264 11 264 18 ("format" "tag")}
        {Lisp-Entry "Tags" #f 273 12 273 16 ()}
        {Lisp-Entry "get-tags" #f 321 29 321 37 ("Tags")}
        {Lisp-Entry "Attributes" #f 330 12 330 22 ()}
        {Lisp-Entry "get-attributes" #f 348 29 348 43 ("Attributes")}
        {Lisp-Entry "Options" #f 357 12 357 19 ()}
        {Lisp-Entry "get-options" #f 365 29 365 40 ("Options")}
        {Lisp-Entry "Syntax-Targets" #f 374 14 374 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 377 14 377 29 ()}
        {Lisp-Entry "syntax-targets" #f 381 11 381 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 387 11 387 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" #f 393 11 393 33 ("get-options" "option" "'option" "concatenate" "get-attributes" "attribute" "'attribute" "get-tags" "tag" "'tag" "list" "str" "function" "map" "append")}
        {Lisp-Entry "compute-syntax-automata" #f 399 11 399 34 ("c-constituent?" "self" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "preferences" #f 408 11 408 22 ("html-text" "documents" "get-preferences")}
        {Lisp-Entry "colorize-type" #f 412 11 412 24 ("Option" "'Option" "option" "Attribute" "'Attribute" "attribute" "Tag" "'Tag" "colorize-keyword" "tag" "case" "recolorize?" "colorizer" "end" "start" "type" "found")}}
      {Lisp-Entry "HTML-Text-Menu" #f 424 7 424 21 ("recolorize-syntax" "code-text" "Bitmap-Resource" "icon:" "update-catalog" "text" "goto-line" "html-text" "Action" "action:" "title:" "render" "name:" "Context-Menu")}
      {Lisp-Entry "Action-Menu" #f 441 7 441 18 ("preformatted" "code" "variable" "definition-data" "definition-term" "definition-list" "list-item" "unordered-list" "ordered-list" "table-data" "table-row" "table-header" "table" "image" "anchor" "center" "font" "italic" "bold" "line-break" "paragraph" "division" "comment" "header-3" "header3" "header-2" "header2" "header-1" "header1" "html-text" "Action" "action:" "title:" "base-template" "name:" "Context-Menu")}}})
"HTML-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "html" "workspace" "HTML-Workspace.jazz"} 1226584778
    {Lisp-Entry "jazz.language.html.workspace.HTML-Workspace" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "HTML-Workspace" #f 47 7 47 21 ("Console-Manager" "vert" "-33" "second" "HTML-Previewer" "model-name:" "5" "Rect" "insets:" "36" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "HTML-Text-View" "frame-model:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 62 11 62 23 ("html" "'html")}}}})
"HTTP-Client"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-Client.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-Client" #f 44 9 44 38 ("jazz")
      {Lisp-Entry "HTTP-Client" #f 52 7 52 18 ("Object")
        {Lisp-Entry "cookies" #f 55 8 55 15 ("equal?" "test:" "make-table")}
        {Lisp-Entry "navigate" #f 63 18 63 26 ("else" "name:" "Host" "navigate-safely" "concatenate" "let" "split" "hostname" "receive" "list" "URL" "new" "url" "get-header" "location" "see-other" "case" "store-cookies" "get-code" "code" "send-request" "response" "build-request" "request" "let*" "parameters" "parameters:" "http" "'http" "port" "port:" "resource" "operation" "host")}
        {Lisp-Entry "navigate-safely" #f 82 11 82 26 ("navigate" "resource" "operation" "host")}
        {Lisp-Entry "store-cookies" #f 91 11 91 24 ("add-cookie" "cookie" "name" "function" "for-each-cookie" "response")}
        {Lisp-Entry "add-cookie" #f 97 11 97 21 ("cookies" "table-set!" "get-name" "name" "let" "cookie")}
        {Lisp-Entry "for-each-cookie" #f 102 11 102 26 ("cookies" "iterate-table" "proc")}
        {Lisp-Entry "send-request" #f 111 11 111 23 ("socket:" "HTTP-Response" "send-raw" "connect" "Heap-Block" "coerce" "block" "message-string" "string" "let*" "Socket" "new" "socket" "with-closed" "send-request" "'send-request" "unimplemented" "port" "host" "request")}
        {Lisp-Entry "build-request" #f 122 11 122 24 ("add-cookies" "add-headers" "parameters:" "resource:" "operation:" "HTTP-Request" "new" "request" "let" "parameters" "resource" "operation" "port" "host")}
        {Lisp-Entry "add-headers" #f 129 11 129 22 ("get-name" "add-header" "host" "request")}
        {Lisp-Entry "add-cookies" #f 135 11 135 22 ("add-cookie" "cookie" "name" "function" "for-each-cookie" "request")}}}})
"HTTP-Connection"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "inet" "HTTP-Connection.jazz"} 1226584783
    {Lisp-Entry "jazz.library.internet.HTTP-Connection" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "HTTP-Connection" #f 44 7 44 22 ("Internet-Connection")
        {Lisp-Entry "default-port" #f 47 11 47 23 ("INTERNET_DEFAULT_HTTP_PORT")}
        {Lisp-Entry "open-connection" #f 51 11 51 26 ("0" "INTERNET_SERVICE_HTTP" "NULL" "either" "get-handle" "InternetConnect" "validate-server" "password" "username" "port" "server" "session")}
        {Lisp-Entry "validate-server" #f 56 11 56 26 ("error" "0" "subseq" "=" "4" "length" ">=" "and" "when" "server")}}}})
"HTTP-Cookie"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-Cookie.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-Cookie" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "HTTP-Cookie" #f 45 7 45 18 ("Object")
        {Lisp-Entry "name" #f 48 8 48 12 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("value~self" "name~self" "set!" "nextmethod" "value" "name")}
        {Lisp-Entry "print" #f 58 11 58 16 ("value" "name" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-name" #f 69 18 69 26 ("name")}
        {Lisp-Entry "get-value" #f 73 18 73 27 ("value")}}}})
"HTTP-File-Response"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-File-Response.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-File-Response" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "HTTP-File-Response" #f 45 7 45 25 ("HTTP-Response")
        {Lisp-Entry "content" #f 48 8 48 15 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("read-u8-content" "content" "set!" "port" "function" "parse" "call-with-input-file" "nextmethod" "apply" "others" "file" "bind-keywords" "rest")}
        {Lisp-Entry "get-content" #f 64 18 64 29 ("content")}
        {Lisp-Entry "send-message" #f 73 11 73 23 ("content" "write-u8-content" "nextmethod" "port")}}}})
"HTTP-Get-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "inet" "HTTP-Get-Request.jazz"} 1226584783
    {Lisp-Entry "jazz.library.internet.HTTP-Get-Request" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "HTTP-Get-Request" #f 44 7 44 23 ("HTTP-InetRequest")
        {Lisp-Entry "open-request" #f 47 11 47 23 ("INTERNET_OPTION_PASSWORD" "length" "INTERNET_OPTION_USERNAME" "InternetSetOption" "when" "winerror" "error" "not" "if" "INTERNET_FLAG_RELOAD" "0" "NULL" "get-handle" "HttpOpenRequest" "handle" "let" "password" "username" "parameter" "connection")}
        {Lisp-Entry "get-html" #f 61 18 61 26 ("get-output-string" "multi-byte->string" "display" "set-element!" "set!" "0" "=" "handle" "InternetReadFile" "bytes-read" "ok?" "receive" "not" "while" "done?" "1" "+" "size:" "Heap-Block" "new" "buffer" "1024" "size" "open-output-string" "printer" "let*" "error" "HTTP_STATUS_OK" "/=" "if" "query-status-code" "status" "let" "get-html" "'get-html" "unimplemented" "send")}
        {Lisp-Entry "get-image" #f 81 18 81 27 ("handle" "InternetReadFile" "bytes-read" "ok?" "receive" "size:" "Heap-Block" "new" "buffer" "query-content-length" "size" "let*" "error" "when" "HTTP_STATUS_OK" "/=" "if" "query-status-code" "status" "let" "send" "get-image" "'get-image" "unimplemented" "error?" "error?:")}}}})
"HTTP-InetRequest"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "inet" "HTTP-InetRequest.jazz"} 1226584783
    {Lisp-Entry "jazz.library.internet.HTTP-InetRequest" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "HTTP-InetRequest" #f 44 7 44 23 ("Object")
        {Lisp-Entry "handle" #f 47 8 47 14 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("destroy-mandatory" "open-request" "handle" "set!" "nextmethod" "password" "password:" "username" "username:" "parameter" "connection")}
        {Lisp-Entry "open-request" #f 56 29 56 41 ("password" "username" "parameter" "connection")}
        {Lisp-Entry "destroy" #f 60 11 60 18 ("nextmethod" "handle" "InternetCloseHandle")}
        {Lisp-Entry "get-handle" #f 65 18 65 28 ("handle")}
        {Lisp-Entry "send" #f 74 18 74 22 ("winerror" "error" "0" "NULL" "handle" "HttpSendRequest" "unless")}
        {Lisp-Entry "query-status-code" #f 84 18 84 35 ("HTTP_QUERY_STATUS_CODE" "query-numerical-value")}
        {Lisp-Entry "query-content-length" #f 88 18 88 38 ("HTTP_QUERY_CONTENT_LENGTH" "query-numerical-value2")}
        {Lisp-Entry "query-numerical-value" #f 92 11 92 32 ("parse-integer" "0" "handle" "HttpQueryInfo" "128" "make-string" "string" "let" "flag")}
        {Lisp-Entry "query-numerical-value2" #f 99 11 99 33 ("parse-integer" "0" "handle" "HttpQueryInfo" "128" "make-string" "string" "let" "flag")}
        {Lisp-Entry "get-extension" #f 110 11 110 24 ("1" "+" "subseq" "when" "find" "pos" "let" "page")}}}})
"HTTP-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-Listener.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-Listener" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "HTTP-Listener" #f 45 11 45 24 ()
        {Lisp-Entry "hit" #f 48 35 48 38 ("server")}
        {Lisp-Entry "receive-request" #f 49 35 49 50 ("request" "server")}
        {Lisp-Entry "receive-pages-request" #f 50 35 50 56 ("pages-class" "resource" "request" "server")}
        {Lisp-Entry "process-request" #f 51 35 51 50 ("response" "request" "server")}}}})
"HTTP-Message"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-Message.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-Message" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "HTTP-Message" #f 45 7 45 19 ("Object")
        {Lisp-Entry "headers" #f 48 8 48 15 ("equal?" "test:" "make-table")}
        {Lisp-Entry "cookies" #f 49 8 49 15 ("equal?" "test:" "make-table")}
        {Lisp-Entry "read-line/headers" #f 58 11 58 28 ("put" "get-output" "values" "empty-string?" "if" "str" "loop" "List-Factory" "new" "fact" "read-line" "line" "let" "port")}
        {Lisp-Entry "read-line/headers" #f 69 11 69 28 ("read-all" "read-line" "values" "input" "function" "cr-lf" "'cr-lf" "eol-encoding:" "get-output-u8vector" "init:" "list" "call-with-input-u8vector" "10" "13" "eqv?" "and" "if" "write-u8" "read-u8" "c3" "c2" "c1" "c0" "loop" "open-output-u8vector" "output" "let" "port")}
        {Lisp-Entry "parse-headers" #f 87 11 87 24 ("add-header" "2" "+" "value" "0" "subseq" "name" "find" "pos" "let*" "empty-string?" "unless" "header" "function" "for-each" "headers")}
        {Lisp-Entry "parse-cookies" #f 97 11 97 24 ("parse-cookie" "for-each" "when" "error?:" "get-list-header" "headers" "let" "header")}
        {Lisp-Entry "parse-cookie" #f 103 11 103 23 ("HTTP-Cookie" "new" "add-cookie" "1" "+" "value" "0" "subseq" "name" "semi" "find" "pos" "let*" "cookie-value")}
        {Lisp-Entry "read-body" #f 111 11 111 20 ("0" "read-subu8vector" "make-u8vector" "body" "parse-integer" "not" "if" "error?:" "get-header" "content-length" "let" "port")}
        {Lisp-Entry "get-headers" #f 126 18 126 29 ("headers")}
        {Lisp-Entry "get-header" #f 130 18 130 28 ("error" "when" "headers" "table-ref" "either" "error?" "error?:" "name")}
        {Lisp-Entry "get-list-header" #f 136 18 136 33 ("list" "string?" "if" "get-header" "apply" "value" "let" "rest" "name")}
        {Lisp-Entry "add-header" #f 143 18 143 28 ("table-set!" "else" "list" "append" "pair?" "not" "cond" "new-value" "headers" "table-ref" "actual" "let*" "value" "name")}
        {Lisp-Entry "get-cookies" #f 157 18 157 29 ("cookies")}
        {Lisp-Entry "get-cookie" #f 161 18 161 28 ("cookies" "table-ref" "name")}
        {Lisp-Entry "get-cookie-value" #f 165 18 165 34 ("get-value" "when" "get-cookie" "cookie" "let" "name")}
        {Lisp-Entry "add-cookie" #f 171 18 171 28 ("cookies" "table-set!" "get-name" "name" "let" "cookie")}
        {Lisp-Entry "for-each-cookie" #f 176 18 176 33 ("cookies" "iterate-table" "proc")}
        {Lisp-Entry "send-message" #f 185 26 185 38 ("display" "message-string" "str" "let" "port")}
        {Lisp-Entry "message-string" #f 190 29 190 43 ()}
        {Lisp-Entry "output-headers" #f 199 11 199 25 ("output-header" "value" "name" "function" "headers" "iterate-table" "printer")}
        {Lisp-Entry "output-header" #f 205 11 205 24 ("format" "printer" "value" "name")}
        {Lisp-Entry "output-cookies" #f 209 11 209 25 ("format" "output-header" "get-value" "value" "let" "cookie" "name" "function" "for-each-cookie" "printer" "header")}}}})
"HTTP-Pages"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-Pages.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-Pages" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "HTTP-Pages" #f 46 7 46 17 ("XHTML-Parser")
        {Lisp-Entry "server" #f 49 8 49 14 ()}
        {Lisp-Entry "request" #f 50 8 50 15 ()}
        {Lisp-Entry "generator" #f 51 8 51 17 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("generator~self" "request~self" "server~self" "set!" "preferences:" "nextmethod" "preferences" "generator" "request" "server")}
        {Lisp-Entry "get-server" #f 66 18 66 28 ("server")}
        {Lisp-Entry "get-request" #f 70 18 70 29 ("request")}
        {Lisp-Entry "get-generator" #f 74 18 74 31 ("generator")}
        {Lisp-Entry "process-request" #f 83 18 83 33 ("invoke-pages" "parse" "resource" "request")}
        {Lisp-Entry "invoke-pages" #f 88 19 88 31 ("error" "find-pattern" "either" "resource" "request")}
        {Lisp-Entry "find-pattern" #f 98 11 98 23 ("assoc" "cadr" "get-pattern-associations" "associations" "let" "resource" "request")}
        {Lisp-Entry "get-pattern-associations" #f 103 29 103 53 ()}
        {Lisp-Entry "forward-pages" #f 112 18 112 31 ()}
        {Lisp-Entry "debug-info" #f 121 11 121 21 ("request" "all-details" "server" "get-debug?" "not" "if")}
        {Lisp-Entry "debug-values" #f 128 11 128 23 ("->string" "value" "function" "map" "border:" "server" "get-debug?" "when" "values")}}}})
"HTTP-Put-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "inet" "HTTP-Put-Request.jazz"} 1226584783
    {Lisp-Entry "jazz.library.internet.HTTP-Put-Request" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "HTTP-Put-Request" #f 44 7 44 23 ("HTTP-InetRequest")}}})
"HTTP-Recorder"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-Recorder.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-Recorder" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "HTTP-Recorder" #f 45 7 45 20 ("HTTP-Listener" "Object")
        {Lisp-Entry "server" #f 48 8 48 14 ()}
        {Lisp-Entry "requests" #f 49 8 49 16 ()}
        {Lisp-Entry "get-requests" #f 57 18 57 30 ("requests" "get-output")}
        {Lisp-Entry "recording?" #f 66 18 66 28 ("server" "not-null?")}
        {Lisp-Entry "start-recording" #f 70 18 70 33 ("self" "add-listener" "List-Factory" "new" "requests~self" "server~self" "set!" "server")}
        {Lisp-Entry "stop-recording" #f 76 18 76 32 ("server~self" "set!" "self" "server" "remove-listener")}
        {Lisp-Entry "record-pages?" #f 81 29 81 42 ("pages-class" "resource")}
        {Lisp-Entry "hit" #f 90 11 90 14 ("server")}
        {Lisp-Entry "receive-request" #f 94 11 94 26 ("request" "server")}
        {Lisp-Entry "receive-pages-request" #f 98 11 98 32 ("requests" "put" "record-pages?" "when" "pages-class" "resource" "request" "server")}
        {Lisp-Entry "process-request" #f 103 11 103 26 ("response" "request" "server")}}}})
"HTTP-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-Request.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-Request" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "HTTP-Request" #f 46 7 46 19 ("HTTP-Message")
        {Lisp-Entry "Cookie-Header" #f 49 14 49 27 ()}
        {Lisp-Entry "host" #f 53 8 53 12 ()}
        {Lisp-Entry "service" #f 54 8 54 15 ()}
        {Lisp-Entry "operation" #f 55 8 55 17 ()}
        {Lisp-Entry "resource" #f 56 8 56 16 ()}
        {Lisp-Entry "version" #f 57 8 57 15 ()}
        {Lisp-Entry "parameters" #f 58 8 58 18 ()}
        {Lisp-Entry "server" #f 59 8 59 14 ()}
        {Lisp-Entry "session" #f 60 8 60 15 ()}
        {Lisp-Entry "initialize" #f 63 11 63 21 ("parse-request" "get-service" "service" "get-host" "host" "when" "parameters~self" "resource~self" "operation~self" "set!" "nextmethod" "port" "port:" "parameters" "parameters:" "resource" "resource:" "operation" "operation:")}
        {Lisp-Entry "parse-request" #f 115 11 115 24 ("parse-parameters" "Cookie-Header" "parse-cookies" "parse-headers" "version~self" "resource~self" "operation~self" "set!" "parse-resource" "fragment" "split" "version" "resource" "operation" "bind" "read-line/headers" "headers" "line" "receive" "port")}
        {Lisp-Entry "parse-resource" #f 127 11 127 25 ("+" "1" "subseq" "url-decode" "values" "not" "if" "find" "pos" "let" "resource")}
        {Lisp-Entry "parse-parameters" #f 136 11 136 27 ("call-with-input-u8vector" "when" "read-body" "body" "parameters~self" "set!" "lambda" "call-with-input-string" "if" "url-decode" "cons" "1" "+" "parse-value" "value" "0" "subseq" "name" "find" "pos" "let*" "parameter" "map" "read-line" "function" "read-all" "parameters" "let" "split-parameters" "define" "port" "fragment")}
        {Lisp-Entry "parse-value" #f 157 11 157 22 ("substitute" "value")}
        {Lisp-Entry "get-host" #f 166 18 166 26 ("host")}
        {Lisp-Entry "get-service" #f 170 18 170 29 ("service")}
        {Lisp-Entry "get-operation" #f 174 18 174 31 ("operation")}
        {Lisp-Entry "get-resource" #f 178 18 178 30 ("resource")}
        {Lisp-Entry "get-version" #f 182 18 182 29 ("version")}
        {Lisp-Entry "get-parameters" #f 186 18 186 32 ("parameters")}
        {Lisp-Entry "get-parameter" #f 190 18 190 31 ("error" "when" "cdr" "if" "parameters" "assoc" "info" "let" "error?" "error?:" "name")}
        {Lisp-Entry "get-server" #f 198 18 198 28 ("server")}
        {Lisp-Entry "set-server" #f 202 18 202 28 ("server" "set!" "value")}
        {Lisp-Entry "get-session" #f 206 18 206 29 ("session")}
        {Lisp-Entry "set-session" #f 210 18 210 29 ("session" "set!" "value")}
        {Lisp-Entry "close-session" #f 214 18 214 31 ("set!" "session" "HTTP-Session" "close-session")}
        {Lisp-Entry "message-string" #f 224 11 224 25 ("get-output-string" "output-parameters" "format" "operation" "=" "when" "Cookie-Header" "output-cookies" "output-headers" "output-control" "open-output-string" "printer" "let")}
        {Lisp-Entry "output-control" #f 235 11 235 25 ("output-parameters" "=" "when" "resource" "operation" "format" "printer")}
        {Lisp-Entry "output-parameters" #f 243 11 243 28 ("url-encode" "format" "unless" "value" "name" "bind" "do" "then" "first" "first?" "parameters" "in" "parameter" "for" "loop" "printer")}}}})
"HTTP-Response"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-Response.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-Response" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "HTTP-Response" #f 45 7 45 20 ("HTTP-Message")
        {Lisp-Entry "Cookie-Header" #f 48 14 48 27 ()}
        {Lisp-Entry "version" #f 52 8 52 15 ()}
        {Lisp-Entry "code" #f 53 8 53 12 ()}
        {Lisp-Entry "body" #f 54 8 54 12 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("parse-response" "when" "body~self" "ok" "'ok" "either" "code~self" "set!" "nextmethod" "port" "port:" "body" "body:" "code" "code:")}
        {Lisp-Entry "parse-response" #f 94 11 94 25 ("read-body" "body~self" "Cookie-Header" "parse-cookies" "parse-headers" "parse-code" "code~self" "version~self" "set!" "split" "code-text" "code" "version" "bind" "read-line/headers" "headers" "line" "receive" "port")}
        {Lisp-Entry "get-version" #f 109 18 109 29 ("version")}
        {Lisp-Entry "get-code" #f 113 18 113 26 ("code")}
        {Lisp-Entry "Response-Codes" #f 122 14 122 28 ("server-error" "not-found" "see-other" "ok")}
        {Lisp-Entry "parse-code" #f 129 11 129 21 ("unknown" "'unknown" "first" "if" "equal?" "test:" "second" "key:" "Response-Codes" "find-in" "info" "let" "code")}
        {Lisp-Entry "response-code-info" #f 136 11 136 29 ("error" "Response-Codes" "assq" "either" "code")}
        {Lisp-Entry "get-body" #f 146 18 146 26 ("body")}
        {Lisp-Entry "message-string" #f 155 11 155 25 ("get-output-string" "output-body" "Cookie-Header" "output-cookies" "output-headers" "output-control" "open-output-string" "printer" "let")}
        {Lisp-Entry "output-control" #f 164 11 164 25 ("format" "response-code-info" "text" "number" "code" "bind" "printer")}
        {Lisp-Entry "output-body" #f 169 11 169 22 ("body" "when" "format" "printer")}}}})
"HTTP-Server"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-Server.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-Server" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "HTTP-Server" #f 46 7 46 18 ("TCP-Server")
        {Lisp-Entry "hits" #f 49 8 49 12 ("0")}
        {Lisp-Entry "listeners" #f 50 8 50 17 ()}
        {Lisp-Entry "debug?" #f 51 8 51 14 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("debug?~self" "set!" "nextmethod" "apply" "others" "debug?" "bind-keywords" "rest")}
        {Lisp-Entry "server-name" #f 60 11 60 22 ()}
        {Lisp-Entry "connection-name" #f 64 11 64 26 ()}
        {Lisp-Entry "get-hits" #f 73 18 73 26 ("hits")}
        {Lisp-Entry "get-debug?" #f 77 18 77 28 ("debug?")}
        {Lisp-Entry "set-debug?" #f 81 18 81 28 ("debug?" "set!" "value")}
        {Lisp-Entry "accept-connection" #f 90 11 90 28 ("close-port" "send-message" "Server-Error" "catch" "request-html" "response" "let" "unwind-protect" "server-hit" "port")}
        {Lisp-Entry "server-hit" #f 102 11 102 21 ("call-listeners-hit" "hits" "increase!")}
        {Lisp-Entry "request-html" #f 107 11 107 23 ("call-listeners-process-request" "not-found" "'not-found" "code:" "generate-not-found" "request-response" "if" "response" "generate-response" "response/html" "let*" "setup-session" "self" "set-server" "function" "with-error-reporting" "call-listeners-receive-request" "port:" "HTTP-Request" "new" "request" "let" "port")}
        {Lisp-Entry "with-error-reporting" #f 123 11 123 31 ("debugger" "'debugger" "select-workspace" "read-string-element" "get-processes-view" "add-snapshot" "IDE" "is?" "when" "get-application" "appl" ":string" "print-stack" "stack" "present-error" "set!" "debug?" "not" "if" "Exception" "call-with-catch" "server-error" "'server-error" "code:" "request-response" "html" "let" "5" "depth:" "lexical-environment?:" "execution-stack" "pretty-print" "exception-reason" "display" "exc" "with-exception-handler" "return" "function" "continuation-capture" "thunk" "request")}
        {Lisp-Entry "present-error" #f 156 11 156 24 (",stack" ",text" ",msg" "format" "msg" "debug?" "not" "if" "get-message" "text" "let" "stack" "err")}
        {Lisp-Entry "SessionID" #f 176 14 176 23 ()}
        {Lisp-Entry "NoSession" #f 179 14 179 23 ()}
        {Lisp-Entry "setup-session" #f 183 11 183 24 ("set-session" "HTTP-Session" "find-session" "session" "parse-integer" "session-id" "let*" "NoSession" "nu/=?" "and" "when" "SessionID" "get-cookie-value" "sessionid" "let" "request")}
        {Lisp-Entry "add-session-cookie" #f 192 11 192 29 ("HTTP-Cookie" "new" "add-cookie" "get-id" "->string" "NoSession" "not" "if" "value" "SessionID" "name" "let" "session" "response")}
        {Lisp-Entry "request-response" #f 205 11 205 27 ("add-session-cookie" "calculate-content-length" "add-content-length" "add-content-type" "add-connection-close" "body:" "new" "response" "get-session" "session" "effective-html" "body" "let*" "HTTP-Response" "is?" "if" "code" "code:" "response/html" "request")}
        {Lisp-Entry "effective-html" #f 218 11 218 25 ("error" "else" "process-jml" "pair?" "string?" "cond" "html" "request")}
        {Lisp-Entry "calculate-content-length" #f 227 11 227 35 ("count" "cardinality" "+" "body")}
        {Lisp-Entry "add-connection-close" #f 232 11 232 31 ("add-header" "response")}
        {Lisp-Entry "add-content-type" #f 236 11 236 27 ("add-header" "type" "response")}
        {Lisp-Entry "add-location" #f 240 11 240 23 ("add-header" "location" "response")}
        {Lisp-Entry "add-content-length" #f 244 11 244 29 ("format" "add-header" "length" "response")}
        {Lisp-Entry "generate-response" #f 253 29 253 46 ("request")}
        {Lisp-Entry "generate-not-found" #f 257 11 257 29 ("request-content" "request")}
        {Lisp-Entry "jml-preferences" #f 273 29 273 44 ("JML-Preferences" "new")}
        {Lisp-Entry "jml-parser" #f 277 29 277 39 ("preferences:" "XHTML-Parser" "new" "pref")}
        {Lisp-Entry "jml-renderer" #f 281 29 281 41 ("XHTML-Renderer" "new" "pref")}
        {Lisp-Entry "process-jml" #f 285 11 285 22 ("get-output-string" "render" "open-output-string" "printer" "parse" "jml-renderer" "renderer" "jml-parser" "parser" "jml-preferences" "pref" "let*" "jml" "request")}
        {Lisp-Entry "add-listener" #f 300 18 300 30 ("cons" "listeners" "set!" "listener")}
        {Lisp-Entry "remove-listener" #f 304 18 304 33 ("remove!" "listeners" "set!" "listener")}
        {Lisp-Entry "call-listeners-hit" #f 308 11 308 29 ("listeners" "self" "hit" "listener" "function" "for-each")}
        {Lisp-Entry "call-listeners-receive-request" #f 314 11 314 41 ("listeners" "self" "receive-request" "listener" "function" "for-each" "request")}
        {Lisp-Entry "call-listeners-receive-pages-request" #f 320 11 320 47 ("listeners" "self" "receive-pages-request" "listener" "function" "for-each" "pages-class" "resource" "request")}
        {Lisp-Entry "call-listeners-process-request" #f 326 11 326 41 ("listeners" "self" "process-request" "listener" "function" "for-each" "response" "request")}
        {Lisp-Entry "all-details" #f 337 18 337 29 ("session-details" "request-details" "request")}
        {Lisp-Entry "debug-request" #f 342 18 342 31 ("request-details" "request")}
        {Lisp-Entry "request-details" #f 350 11 350 26 ("request-content" "request")}
        {Lisp-Entry "request-content" #f 355 11 355 26 ("bind" "parameter" "map" "null?" "if" "get-value" "cookie" ",value" ",name" "value" "name" "function" "map-table" ",version" ",resource" ",operation" "->string" "border:" "get-parameters" "parameters" "get-cookies" "cookies" "get-headers" "headers" "get-version" "version" "get-resource" "resource" "get-operation" "operation" "get-port" "port" "get-host" "host" "let" "request")}
        {Lisp-Entry "session-details" #f 412 11 412 26 ("session-content" "not" "if" "get-session" "session" "let" "request")}
        {Lisp-Entry "session-content" #f 420 11 420 26 ("value" "property" "function" "map-property" "->string" "border:" "get-properties" "properties" "get-id" "id" "let" "session" "request")}}}})
"HTTP-Session"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "HTTP-Session.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.HTTP-Session" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Session-Id" #f 50 12 50 22 ("0")}
      {Lisp-Entry "Sessions" #f 54 12 54 20 ()}
      {Lisp-Entry "get-sessions" #f 58 20 58 32 ("Sessions")}
      {Lisp-Entry "new-session" #f 62 20 62 31 ("increase!" "cons" "Sessions" "set!" "Session-Id" "HTTP-Session" "new" "session" "let")}
      {Lisp-Entry "close-session" #f 69 20 69 33 ("remove!" "Sessions" "set!" "session")}
      {Lisp-Entry "find-session" #f 73 20 73 32 ("Sessions" "get-id" "=" "session" "function" "find-if" "session-id")}
      {Lisp-Entry "HTTP-Session" #f 84 7 84 19 ("Object")
        {Lisp-Entry "id" #f 87 8 87 10 ()}
        {Lisp-Entry "properties" #f 88 8 88 18 ()}
        {Lisp-Entry "initialize" #f 91 11 91 21 ("id~self" "set!" "nextmethod" "id")}
        {Lisp-Entry "print" #f 96 11 96 16 ("id" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-id" #f 107 18 107 24 ("id")}
        {Lisp-Entry "Not-Found" #f 116 14 116 23 ("not-found" "Box")}
        {Lisp-Entry "get-properties" #f 120 18 120 32 ("properties")}
        {Lisp-Entry "get-property" #f 124 18 124 30 ("error" "when" "neq?" "if" "Not-Found" "not-found:" "properties" "getf" "value" "let" "error?" "error?:" "name")}
        {Lisp-Entry "set-property" #f 132 18 132 30 ("addf" "set!" "setf" "properties" "getprop" "if" "value" "name")}}}})
"Handler"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "handler" "Handler.jazz"} 1226584781
    {Lisp-Entry "jazz.library.handler.Handler" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Handler" #f 43 7 43 14 ("Object")
        {Lisp-Entry "execute" #f 46 8 46 15 ("generate")}
        {Lisp-Entry "target" #f 47 8 47 14 ("generate")}
        {Lisp-Entry "target-name" #f 48 8 48 19 ("generate")}
        {Lisp-Entry "method-name" #f 49 8 49 19 ("generate")}
        {Lisp-Entry "form-level" #f 50 8 50 18 ("generate")}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("form-level~self" "method-name~self" "target-name~self" "target~self" "execute~self" "set!" "nextmethod" "form-level" "form-level:" "method-name" "method-name:" "target-name" "target-name:" "target" "target:" "execute" "execute:")}
        {Lisp-Entry "print" #f 62 11 62 16 ("method-name" "target-name" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "invoke" #f 74 26 74 32 ("" "apply" "method-name" "dispatch" "proc" "find-target" "either" "target" "let*" "execute" "if" "rest" "sender")}
        {Lisp-Entry "find-target" #f 82 18 82 29 ("else" "cdr" "car" "pair?" "and" "form-level" "child" ":form" "eq?" "cond" "target-name" "get-process" "process-alias" "Component" "is-not?" "if" "sender")}}}})
"Handler-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Handler-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Handler-Row" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Handler-Row" #f 47 7 47 18 ("Value-Row")
        {Lisp-Entry "get-filter-name" #f 55 16 55 31 ("handlers" "'handlers")}
        {Lisp-Entry "get-filter-rank" #f 59 16 59 31 ("2")}
        {Lisp-Entry "get-filter-image" #f 63 16 63 32 ("Bitmap-Resource")}
        {Lisp-Entry "double-click" #f 72 11 72 23 ("edit-definitions" "pos")}
        {Lisp-Entry "present" #f 81 11 81 18 ("get-preserved" "Surrogate-Handler" "is?" "if" "present-handler" "value")}
        {Lisp-Entry "present-handler" #f 85 11 85 26 ("format" "->string" ":form" "eq?" "get-method-name" "method" "get-target-name" "target" "let" "not" "if" "handler")}
        {Lisp-Entry "get-edited-value" #f 100 11 100 27 ("second" "2" "first" "method-name:" ":form" "target-name:" "Event-Handler" "new" "1" "length" "case" "read-string-content" "list" "string=?" "if" "editor" "get-string-content" "content" "let")}
        {Lisp-Entry "edit-definitions" #f 115 11 115 27 ("Jazz-Field-Entry" "entry" "edit" "Jazz-Entry" "get-category-location" "Jazz-Code-Location" "new" "location" "let" "get-method-name" "category-field" "field" "find-target-type" "class" "find-target" "target" "bell" "not" "if" "property" "read-property" "handler" "get-client" "car" "client" "let*" "edit-definitions" "'edit-definitions" "unimplemented")}
        {Lisp-Entry "get-menu-class" #f 137 11 137 25 ("Handler-Menu")}}
      {Lisp-Entry "Handler-Menu" #f 146 7 146 19 ("on-edit" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "edit" "name:" "Value-Menu")
        {Lisp-Entry "on-edit" #f 154 11 154 18 ("value-row" "edit-definitions" "evt")}}}})
"Header-Bar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Header-Bar.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Header-Bar" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Header-Bar" #f 47 7 47 17 ("Container")
        {Lisp-Entry "flat?" #f 50 12 50 17 ("set-flat?" "get-flat?")}
        {Lisp-Entry "shown?" #f 51 12 51 18 ("set-shown?" "get-shown?")}
        {Lisp-Entry "style" #f 52 12 52 17 ("set-style" "get-style")}
        {Lisp-Entry "client" #f 55 8 55 14 ()}
        {Lisp-Entry "get-flat?" #f 63 18 63 27 ("flat?")}
        {Lisp-Entry "set-flat?" #f 67 18 67 27 ("layout-view" "set!" "flat?" "neq?" "when" "value")}
        {Lisp-Entry "get-shown?" #f 73 18 73 28 ("shown?")}
        {Lisp-Entry "set-shown?" #f 77 18 77 28 ("layout-view" "set!" "shown?" "neq?" "when" "value")}
        {Lisp-Entry "get-style" #f 83 18 83 27 ("style")}
        {Lisp-Entry "set-style" #f 87 18 87 27 ("style" "set!" "value")}
        {Lisp-Entry "flat-look?" #f 96 11 96 21 ("flat?" "else" "document/header/flat?" "'document/header/flat?" "document" "tool/header/flat?" "'tool/header/flat?" "get-look" "get-element" "tool" "style" "case")}
        {Lisp-Entry "get-client" #f 108 18 108 28 ("client")}
        {Lisp-Entry "set-client" #f 112 18 112 28 ("client" "set!" "clt")}
        {Lisp-Entry "layout" #f 121 11 121 17 ("content-size" "set-size" "content-position" "set-position" "get-size" "size" "when" "get-content" "content" "let")}
        {Lisp-Entry "content-position" #f 129 11 129 27 ("get-header-height" "0" "Point" "new" "size")}
        {Lisp-Entry "content-size" #f 133 11 133 23 ("get-header-height" "get-height" "-" "get-width" "Dimension" "new" "size")}
        {Lisp-Entry "get-header-height" #f 139 26 139 43 ("0" "16" "15" "flat?" "shown?" "if")}
        {Lisp-Entry "get-row-instance" #f 148 11 148 27 ("nextmethod" "else" "Boolean-Row" "new" "shown?" "flat?" "field-name" "case" "property")}}}})
"Header-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Header-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Header-View" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Header-View" #f 47 7 47 18 ("Container")
        {Lisp-Entry "flat?" #f 50 12 50 17 ("set-flat?" "get-flat?")}
        {Lisp-Entry "shown?" #f 51 12 51 18 ("set-shown?" "get-shown?")}
        {Lisp-Entry "style" #f 52 12 52 17 ("set-style" "get-style")}
        {Lisp-Entry "client" #f 55 8 55 14 ()}
        {Lisp-Entry "default-name" #f 58 11 58 23 ("header" "'header")}
        {Lisp-Entry "get-flat?" #f 67 18 67 27 ("flat?")}
        {Lisp-Entry "set-flat?" #f 71 18 71 27 ("layout-view" "set!" "flat?" "neq?" "when" "value")}
        {Lisp-Entry "get-shown?" #f 77 18 77 28 ("shown?")}
        {Lisp-Entry "set-shown?" #f 81 18 81 28 ("layout-view" "set!" "shown?" "neq?" "when" "value")}
        {Lisp-Entry "get-style" #f 87 18 87 27 ("style")}
        {Lisp-Entry "set-style" #f 91 18 91 27 ("style" "set!" "value")}
        {Lisp-Entry "flat-look?" #f 100 11 100 21 ("flat?" "else" "document/header/flat?" "'document/header/flat?" "document" "tool/header/flat?" "'tool/header/flat?" "get-look" "get-element" "tool" "style" "case")}
        {Lisp-Entry "get-client" #f 112 18 112 28 ("client")}
        {Lisp-Entry "set-client" #f 116 18 116 28 ("client" "set!" "clt")}
        {Lisp-Entry "layout" #f 125 11 125 17 ("content-size" "set-size" "content-position" "set-position" "get-size" "size" "when" "get-content" "content" "let")}
        {Lisp-Entry "content-position" #f 133 11 133 27 ("get-header-height" "0" "Point" "new" "size")}
        {Lisp-Entry "content-size" #f 137 11 137 23 ("get-header-height" "get-height" "-" "get-width" "Dimension" "new" "size")}
        {Lisp-Entry "get-header-height" #f 143 26 143 43 ("0" "16" "15" "flat?" "shown?" "if")}
        {Lisp-Entry "get-row-instance" #f 152 11 152 27 ("nextmethod" "else" "Boolean-Row" "new" "shown?" "flat?" "field-name" "case" "property")}}}})
"Heading-Slide"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "slide" "Heading-Slide.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.slide.Heading-Slide" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Heading-Slide" #f 45 7 45 20 ("Slide")
        {Lisp-Entry "heading-range" #f 48 12 48 25 ("generate")}}}})
"Help-Contents"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "help" "Help-Contents.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.help.Help-Contents" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Help-Contents" #f 49 7 49 20 ("descendant" "highlight-edited?:" "show-header?:" "tree" "shown?:" "header" "content" "flat?:" "scroller" "center" "location:" "descendants" "on-synchronize" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "synchronize" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Editor-View")
        {Lisp-Entry "external-name" #f 65 16 65 29 ("help-contents" "'help-contents" "rest")}
        {Lisp-Entry "host-icon" #f 74 16 74 25 ("Bitmap-Resource")}
        {Lisp-Entry "get-tools-view" #f 83 11 83 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "tool-preferences" #f 92 11 92 27 ("help-contents" "tools" "get-preferences")}
        {Lisp-Entry "install" #f 101 11 101 18 ("get-client" "set-client" "when" "get-application" "get-documentation-catalog" "catalog" "let" "self" "descendants" "'descendants" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "document-status" #f 115 11 115 26 ()}
        {Lisp-Entry "on-synchronize" #f 124 11 124 25 ("evt")}
        {Lisp-Entry "synchronize-tree" #f 133 11 133 27 ("contents-sheet" "'contents-sheet" "tab" "'tab" "set-selection-name" "row-rank" "set-single-selection" "ensure-expanded" "bell" "null?" "if" "component-row" "row" "descendants" "locate" "tree" "let*" "component")}}}})
"Help-Index"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "help" "Help-Index.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.help.Help-Index" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Help-Contents" #f 49 7 49 20 ("search" "307" "35" "search-border" "on-return-press" "return-press-handler:" "top-padding:" "left-padding:" "show-unfocused-selection?:" "focus-selects-all?:" "accepts-returns?:" "find" "19" "238" "9" "40" "find-border" "16" "60" "12" "8" "search-sheet" "160" "width:" "index" "fill" "vscroll?:" "hscroll?:" "index-border" "index-sheet" "edge" "border-type:" "338" "276" "4" "descendants-border" "title:" "contents-sheet" "on-selection" "selection-handler:" "366" "285" "1" "Point" "position:" "tab" "367" "descendant" "highlight-edited?:" "show-header?:" "tree" "header" "content" "flat?:" "scroller" "center" "location:" "descendants" "on-synchronize" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "synchronize" "tools" "name:" "2" "0" "Rect" "layout-insets:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Editor-View")
        {Lisp-Entry "host-icon" #f 112 16 112 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 116 16 116 26 ()}
        {Lisp-Entry "get-tools-view" #f 125 11 125 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "tool-preferences" #f 134 11 134 27 ("help-index" "tools" "get-preferences")}
        {Lisp-Entry "install" #f 143 11 143 18 ("search" "'search" "index" "'index" "self" "'descendants" "set-editor" "header" "descendants" "locate" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "client-update" #f 151 11 151 24 ("search" "'search" "client" "index" "'index" "locate" "set-client" "nextmethod")}
        {Lisp-Entry "focus-document" #f 157 11 157 25 ("tree" "descendants" "locate" "acquire-focus")}
        {Lisp-Entry "document-status" #f 166 11 166 26 ()}
        {Lisp-Entry "resize-center" #f 175 29 175 42 ("search-border" "'search-border" "index-border" "'index-border" "descendants-border" "'descendants-border" "0" "tab" "'tab" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-splitter-move" #f 182 18 182 34 ("update-view" "search-border" "'search-border" "find-border" "'find-border" "index-border" "'index-border" "descendants-border" "'descendants-border" "0" "tab" "'tab" "locate" "size-figure" "right" "get-name" "case" "delta:" "get-property" "delta" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-selection" #f 195 18 195 30 ("select-all" "acquire-focus" "find" "'find" "text" "search-sheet" "'search-sheet" "get-selection-name" "eq?" "when" "'tab" "locate" "tab" "let" "evt")}
        {Lisp-Entry "synchronize-tree" #f 208 11 208 27 ("contents-sheet" "'contents-sheet" "tab" "'tab" "set-selection-name" "row-rank" "set-single-selection" "ensure-expanded" "bell" "null?" "if" "component-row" "row" "descendants" "locate" "tree" "let*" "component")}
        {Lisp-Entry "search" #f 223 11 223 17 ("search" "'search" "locate" "set-target" "target")}}}})
"Help-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Help-Workspace.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Help-Workspace" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Help-Workspace" #f 46 7 46 21 ("second" "Help-Contents" "model-name:" "5" "Rect" "insets:" "18" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 59 11 59 23 ("help" "'help")}}}})
"Hierarchical-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Hierarchical-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Hierarchical-Entry" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Hierarchical-Entry" #f 46 7 46 25 ("Indexed-Entry")
        {Lisp-Entry "modifiers" #f 49 8 49 17 ()}
        {Lisp-Entry "qualified" #f 50 8 50 17 ()}
        {Lisp-Entry "construct-literal" #f 54 16 54 33 ("self" "new" "definitions" "column" "line" "name" "qualified" "modifiers" "context")}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("qualified" "modifiers" "set!" "nextmethod" "apply" "rest" "q" "m")}
        {Lisp-Entry "print-catalog" #f 64 11 64 24 ("print-definitions" "column" "line" "name" "qualified" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-modifiers" #f 78 11 78 24 ("modifiers")}
        {Lisp-Entry "get-qualified" #f 82 18 82 31 ("qualified")}
        {Lisp-Entry "set-qualified" #f 86 18 86 31 ("qualified" "set!" "qualified-path")}
        {Lisp-Entry "has-modifier?" #f 90 18 90 31 ("modifiers" "memq?" "modifier")}
        {Lisp-Entry "get-visibility" #f 94 18 94 32 ("first" "package" "'package" "null?" "if" "modifiers" "private" "protected" "public" "intersection" "common" "let")}}}})
"Hierarchy-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "code" "Hierarchy-Browser.jazz"} 1227191353
    {Lisp-Entry "jazz.ui.code.Hierarchy-Browser" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Hierarchy-Browser" #f 52 7 52 24 ("329" "width:" "title:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "show-header?:" "definitions" "shown?:" "header" "content" "flat?:" "hscroll?:" "vscroll?:" "scroller" "on-update" "update" "on-toggle-sorted" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "sorted?" "tools" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "client" #f 55 12 55 18 ("set-client" "get-client")}
        {Lisp-Entry "external-name" #f 71 16 71 29 ("definitions-browser" "'definitions-browser" "rest")}
        {Lisp-Entry "host-icon" #f 80 16 80 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 84 16 84 26 ()}
        {Lisp-Entry "client-activate" #f 88 11 88 26 ("set-client" "not" "if" "current-document" "client-entry" "entry" "let")}
        {Lisp-Entry "client-deactivate" #f 95 11 95 28 ("set-client")}
        {Lisp-Entry "client-entry" #f 99 11 99 23 ("car" "length" "1" "=" "get-context" "context:" "get-file-entries" "entries" "get-cataloguer" "cataloguer" "get-application" "appl" "let*" "read-jml" "ci=?" "get-extension" "ext" "get-controller" "get-moniker" "moniker" "let" "Code-Text-View" "is?" "if" "when" "guest")}
        {Lisp-Entry "get-tools-view" #f 120 11 120 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 124 11 124 24 ("acquire-focus" "definitions" "'definitions" "locate" "tree" "let")}
        {Lisp-Entry "get-sorted?" #f 134 11 134 22 ("sorted?" "'sorted?" "locate" "get-selected?")}
        {Lisp-Entry "on-toggle-sorted" #f 143 11 143 27 ("update" "get-sorted?" "definitions" "'definitions" "locate" "set-sort?" "evt")}
        {Lisp-Entry "on-update" #f 148 11 148 20 ("update" "reload-jml-client" "Form" "Exception" "client" "is?" "or" "when" "evt")}
        {Lisp-Entry "on-selection-change" #f 154 11 154 30 ("selection-change" "definitions" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" #f 161 11 161 26 ("selection-change" "definitions" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "mouse-copy" #f 169 18 169 28 ("get-name" "mouse-insert" "get-row" "get-user-data" "definition" "let" "view->tree" "cell" "definitions" "'definitions" "locate" "tree" "mouse-position" "pos" "let*" "when" "destination")}
        {Lisp-Entry "read-jml" #f 188 11 188 19 ("read-from-file" "err" "Error" "catch" "moniker")}
        {Lisp-Entry "reload-jml-client" #f 195 11 195 28 ("read-jml" "client" "set!" "get-controller" "get-moniker" "moniker" "if" "current-document" "document" "let")}
        {Lisp-Entry "get-client-title" #f 205 11 205 27 ("get-title" "JML-Node" "is?" "if" "client")}
        {Lisp-Entry "insert-client-definition" #f 211 11 211 35 ("insert-definition" "get-sorted?" "0" "insert-jml-definition" "JML-Node" "is?" "if" "client" "tree")}
        {Lisp-Entry "insert-jml-definition" #f 217 11 217 32 ("insert-jml-self-definitions" "insert-jml-self" "row" "let" "sort?" "node" "level" "father" "tree")}
        {Lisp-Entry "insert-jml-self" #f 222 11 222 26 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "state" "get-name" "->string" "'title" "get-property" "either" "title" "Bitmap-Resource" "get-class-image" "Component" "subtype?" "and" "if" "image" "get-jml-model" "model" "let*" "node" "level" "father" "tree")}
        {Lisp-Entry "get-jml-model" #f 230 11 230 24 ("autoload-class" "when" "get-model-name" "model-name" "let" "node")}
        {Lisp-Entry "get-jml-named-children" #f 236 11 236 33 ("get-children" "title" "'title" "get-property" "get-name" "or" "and" "child" "function" "collect-if" "JML-Element" "is?" "when" "node")}
        {Lisp-Entry "insert-jml-self-definitions" #f 245 11 245 38 ("get-jml-named-children" "insert-jml-definitions" "sort?" "node" "level" "father" "tree")}
        {Lisp-Entry "insert-jml-definitions" #f 249 11 249 33 ("1" "+" "insert-jml-definition" "definition" "function" "for-each" "sort-jml-definitions" "if" "ordered" "let" "sort?" "definitions" "level" "father" "tree")}
        {Lisp-Entry "sort-jml-definitions" #f 256 11 256 31 ("get-name" "->string" "definition" "function" "key:" "string<?" "sort" "definitions")}
        {Lisp-Entry "edit-definitions" #f 260 11 260 27 ("activate-focus?:" "edit" "edit-jml-definition" "JML-Node" "is?" "if" "definition")}
        {Lisp-Entry "edit-jml-definition" #f 266 11 266 30 ("set-visible?" "bring-to-front" "center-caret" "'center-caret" "ensure-displayed?:" "set-selection-safe" "location-range" "range" "0" "list" "get-location" "append" "location" "get-guest" "text" "visible?:" "edit-document" "frame" "client" "get-origin" "moniker" "get-application" "appl" "let*" "definition")}
        {Lisp-Entry "get-client" #f 283 18 283 28 ("client")}
        {Lisp-Entry "set-client" #f 287 18 287 28 ("update" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "update" #f 293 11 293 17 ("insert-client-definition" "function" "with-update-locked" "get-client-title" "format" "else" "user-data:" "Bitmap-Resource" "image:" "get-message" "title:" "Tree-Node" "new" "list" "children:" "add-row" "Exception" "is?" "remove-every-row" "set-title" "client" "not" "cond" "definitions" "'definitions" "locate" "tree" "let")}
        {Lisp-Entry "selection-change" #f 314 11 314 27 ("edit-definitions" "same-file?" "Indexed-Entry" "is-not?" "or" "and" "Exception" "is?" "unless" "get-row" "get-user-data" "definition" "get-single-selection" "selection" "get-controller" "get-moniker" "moniker" "when" "current-document" "guest" "let" "double-click?" "tree")}
        {Lisp-Entry "same-file?" #f 326 11 326 21 ("get-file-definition" "get-file" "pathname=?" "and" "moniker" "definition")}}}})
"History-Document-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "history" "History-Document-Item.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.history.History-Document-Item" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "History-Document-Item" #f 45 7 45 28 ("History-Item")
        {Lisp-Entry "document" #f 48 8 48 16 ()}
        {Lisp-Entry "selection" #f 49 8 49 17 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("selection~self" "document~self" "set!" "nextmethod" "selection" "document")}
        {Lisp-Entry "valid?" #f 58 11 58 17 ("document" "open?")}
        {Lisp-Entry "open-item" #f 62 11 62 20 ("bring-to-front" "selection" "document" "set-selection")}
        {Lisp-Entry "present" #f 67 11 67 18 ("document" "get-document-view" "name-status")}}}})
"History-File-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "history" "History-File-Item.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.history.History-File-Item" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "History-File-Item" #f 45 7 45 24 ("History-Item")
        {Lisp-Entry "file" #f 48 8 48 12 ()}
        {Lisp-Entry "selection" #f 49 8 49 17 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("selection~self" "file~self" "set!" "nextmethod" "selection" "file")}
        {Lisp-Entry "open-item" #f 58 11 58 20 ("selection" "selection:" "file" "get-application" "edit-document")}
        {Lisp-Entry "present" #f 62 11 62 18 ("file" "get-name")}}}})
"History-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "history" "History-Item.jazz"} 1226584781
    {Lisp-Entry "jazz.library.history.History-Item" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "History-Item" #f 44 7 44 19 ("Object")
        {Lisp-Entry "valid?" #f 47 26 47 32 ()}
        {Lisp-Entry "open-item" #f 51 26 51 35 ()}
        {Lisp-Entry "present" #f 55 26 55 33 ()}}}})
"History-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "history" "History-Manager.jazz"} 1226584781
    {Lisp-Entry "jazz.library.history.History-Manager" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "History-Manager" #f 45 7 45 22 ("Object")
        {Lisp-Entry "history-provider" #f 48 8 48 24 ()}
        {Lisp-Entry "backward-history" #f 49 8 49 24 ()}
        {Lisp-Entry "forward-history" #f 50 8 50 23 ()}
        {Lisp-Entry "max-history" #f 51 8 51 19 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("max-history~self" "history-provider" "set!" "nextmethod" "max-history" "bind-keywords" "rest" "provider")}
        {Lisp-Entry "get-backward-history" #f 66 18 66 38 ("backward-history" "cleanup-history")}
        {Lisp-Entry "get-forward-history" #f 70 18 70 37 ("forward-history" "cleanup-history")}
        {Lisp-Entry "add-current" #f 79 18 79 29 ("present" "user-message" "add-history" "bell" "null?" "if" "history-provider" "current-history-item" "item" "let")}
        {Lisp-Entry "add-history" #f 87 18 87 29 ("update-history-actions" "forward-history" "set!" "1" "-" "tail" "set-cdr!" "backward-history" "length" ">" "max-history" "and" "add-backward-history" "when" "item")}
        {Lisp-Entry "add-backward-history" #f 96 11 96 31 ("cons" "backward-history" "set!" "when" "item")}
        {Lisp-Entry "add-forward-history" #f 101 11 101 30 ("cons" "forward-history" "set!" "when" "item")}
        {Lisp-Entry "append-forward-history" #f 106 11 106 33 ("list" "append" "forward-history" "set!" "when" "item")}
        {Lisp-Entry "go-backward-history" #f 111 18 111 37 ("update-history-actions" "open-item" "decrease!" "cdr" "car" "set!" "add-forward-history" "while" "history-provider" "current-history-item" "item" "let" "bell" "begin" "backward-history" "length" ">=" "if" "cleanup-backward-history" "0" "rank" "rank:")}
        {Lisp-Entry "go-forward-history" #f 128 18 128 36 ("update-history-actions" "open-item" "decrease!" "cdr" "car" "set!" "add-backward-history" ">=" "while" "history-provider" "current-history-item" "item" "let" "bell" "begin" "forward-history" "null?" "if" "cleanup-forward-history" "0" "rank" "rank:")}
        {Lisp-Entry "cleanup-history" #f 145 11 145 26 ("valid?" "item" "function" "collect-if" "history")}
        {Lisp-Entry "cleanup-backward-history" #f 151 11 151 35 ("cleanup-history" "backward-history" "set!")}
        {Lisp-Entry "cleanup-forward-history" #f 155 11 155 34 ("cleanup-history" "forward-history" "set!")}
        {Lisp-Entry "update-history-actions" #f 165 11 165 33 ("update-history-actions" "when" "get-application" "appl" "let")}}}})
"History-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "history" "History-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.history.History-Menu" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "History-Menu" #f 47 7 47 19 ("Context-Menu")
        {Lisp-Entry "manager" #f 50 12 50 19 ("generate")}
        {Lisp-Entry "direction" #f 51 12 51 21 ("generate")}
        {Lisp-Entry "finish" #f 59 11 59 17 ("direction" "manager" "get-history" "increase!" "rank:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "present" "title" "item" "function" "for-each" "0" "rank" "let" "nextmethod" "rest")}
        {Lisp-Entry "on-action" #f 74 11 74 20 ("go-forward-history" "forward" "manager" "go-backward-history" "backward" "direction" "case" "rank:" "get-property" "rank" "get-application" "appl" "let" "evt")}}}})
"History-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "history" "History-Provider.jazz"} 1226584781
    {Lisp-Entry "jazz.library.history.History-Provider" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "History-Provider" #f 44 11 44 27 ()
        {Lisp-Entry "current-history-item" #f 47 35 47 55 ()}}}})
"History-Request-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "history" "History-Request-Item.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.history.History-Request-Item" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "History-Request-Item" #f 49 7 49 27 ("History-Item")
        {Lisp-Entry "request" #f 52 8 52 15 ()}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("request~self" "set!" "nextmethod" "request")}
        {Lisp-Entry "open-item" #f 60 11 60 20 ("evaluate" "insert-line" "fresh-prompt" "get-sql-console-text" "text" "let" "bell" "request" "null?" "if")}
        {Lisp-Entry "present" #f 69 11 69 18 ("request")}}}})
"History-Search-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "History-Search-Item.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.History-Search-Item" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "History-Search-Item" #f 45 7 45 26 ("History-Item")
        {Lisp-Entry "mode" #f 48 18 48 22 ()}
        {Lisp-Entry "domain" #f 49 18 49 24 ()}
        {Lisp-Entry "targets" #f 50 18 50 25 ()}
        {Lisp-Entry "whole-words?" #f 51 18 51 30 ()}
        {Lisp-Entry "ignore-case?" #f 52 18 52 30 ()}
        {Lisp-Entry "preserve-case?" #f 53 18 53 32 ()}
        {Lisp-Entry "play-recording?" #f 54 18 54 33 ()}
        {Lisp-Entry "expression?" #f 55 18 55 29 ()}
        {Lisp-Entry "content" #f 56 18 56 25 ()}
        {Lisp-Entry "selection" #f 57 18 57 27 ()}
        {Lisp-Entry "initialize" #f 60 11 60 21 ("selection~self" "content~self" "expression?~self" "play-recording?~self" "preserve-case?~self" "ignore-case?~self" "whole-words?~self" "targets~self" "domain~self" "mode~self" "set!" "nextmethod" "selection" "content" "expression?" "play-recording?" "preserve-case?" "ignore-case?" "whole-words?" "targets" "domain" "mode")}
        {Lisp-Entry "open-item" #f 74 11 74 20 ("select-results" "set-visible?" "bring-to-front" "self" "install-history-item" "get-application" "get-search-manager" "search" "let")}
        {Lisp-Entry "present" #f 82 11 82 18 ("format" "null?" "if" "targets" "caar" "target" "let")}}}})
"Home-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Home-Workspace.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Home-Workspace" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Home-Workspace" #f 46 7 46 21 ("Workbench-Manager" "Web-Servers-Manager" "Output-Log" "Profile-Results" "Search-Results" "Properties-Manager" "Console-Manager" "model-name:" "selection" "-27" "vert" "second" "5" "Rect" "insets:" "20" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 68 11 68 23 ("home" "'home")}}}})
"Horizontal-Line"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Horizontal-Line.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Horizontal-Line" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Horizontal-Line" #f 46 7 46 22 ("View")
        {Lisp-Entry "default-size" #f 49 11 49 23 ("8" "100" "Dimension")}
        {Lisp-Entry "draw" #f 58 11 58 15 ("top" "edges:" "sunken" "'sunken" "outer:" "raised" "'raised" "inner:" "2" "0" "Rect" "new" "draw-edge" "Medium" "name:" "Color" "color" "get-width" "width" "let" "lv" "lh" "context" "surface")}}}})
"Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "host" "Host.jazz"} 1226584783
    {Lisp-Entry "jazz.network.host.Host" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Host" #f 43 7 43 11 ("Object")
        {Lisp-Entry "name" #f 46 8 46 12 ()}
        {Lisp-Entry "address" #f 47 8 47 15 ()}
        {Lisp-Entry "ip" #f 48 8 48 10 ()}
        {Lisp-Entry "origin" #f 49 8 49 14 ("generate")}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("error" "else" "'ip" "ip~self" "'address" "address~self" "'name" "origin~self" "name~self" "set!" "cond" "nextmethod" "ip" "ip:" "address" "address:" "name" "name:")}
        {Lisp-Entry "compare-object" #f 67 11 67 25 (":not-equal" "else" ":equal" "get-ip" "=" ":incompatible" "Host" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 76 11 76 23 (",ip" "',ip" "ip:" "ip" ",address" "',address" "address:" "address" ",name" "',name" "name:" "Host" "new" "name" "origin" "case")}
        {Lisp-Entry "print" #f 83 11 83 16 ("present-host" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" #f 94 18 94 26 ("address" "address->ip" "ip" "either" "ip->name" "set!" "name" "unless")}
        {Lisp-Entry "get-address" #f 102 18 102 29 ("name" "name->ip" "ip" "either" "ip->address" "set!" "address" "unless")}
        {Lisp-Entry "get-ip" #f 110 18 110 24 ("get-address" "address->ip" "set!" "ip" "unless")}
        {Lisp-Entry "present" #f 123 18 123 25 ("get-address" "name" "either")}
        {Lisp-Entry "present-host" #f 127 18 127 30 ("ip" "address" "format" "name" "origin" "case")}
        {Lisp-Entry "present-compact" #f 134 18 134 33 ("->string" "ip" "address" "name" "origin" "case")}}}})
"Host-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "hosting" "Host-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.hosting.Host-View" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Host-View" #f 47 7 47 16 ("Medium" "name:" "Color" "background:" "View")
        {Lisp-Entry "content" #f 54 12 54 19 ("set-content" "get-content")}
        {Lisp-Entry "guest" #f 55 12 55 17 ("set-guest" "get-guest")}
        {Lisp-Entry "focused" #f 58 8 58 15 ()}
        {Lisp-Entry "destroy-component" #f 61 11 61 28 ("nextmethod" "close-guest")}
        {Lisp-Entry "close-guest" #f 66 11 66 22 ("close" "set-guest" "view" "let" "guest" "when")}
        {Lisp-Entry "get-content" #f 78 18 78 29 ("content")}
        {Lisp-Entry "set-content" #f 82 18 82 29 ("layout-view" "set!" "content" "neq?" "when" "view")}
        {Lisp-Entry "get-guest" #f 88 18 88 27 ("guest")}
        {Lisp-Entry "set-guest" #f 92 18 92 27 ("install-guest" "set!" "content" "not" "uninstall-guest" "guest" "neq?" "when" "view")}
        {Lisp-Entry "mouse-activate?" #f 108 11 108 26 ()}
        {Lisp-Entry "mouse-activate" #f 112 26 112 40 ("focus-host")}
        {Lisp-Entry "layout" #f 121 11 121 17 ("get-size" "set-size" "0" "Point" "new" "set-position" "content" "when")}
        {Lisp-Entry "get-host" #f 132 11 132 19 ("self")}
        {Lisp-Entry "install-guest" #f 141 11 141 24 ("install-tools" "install-in-host" "set-visible?" "get-size" "set-size" "0" "Point" "set-position" "self" "guest" "set-parent")}
        {Lisp-Entry "uninstall-guest" #f 150 11 150 26 ("close" "self" "guest" "uninstall-from-host")}
        {Lisp-Entry "focus-host" #f 160 18 160 28 ("acquire-focus" "else" "focus-default" "guest" "reactivate-focused" "focused" "cond")}
        {Lisp-Entry "activate-focus" #f 169 26 169 40 ("host-activate" "get-guest-actions" "get-application" "set-guest-actions" "guest" "when")}
        {Lisp-Entry "deactivate-focus" #f 175 26 175 42 ("host-deactivate" "guest" "get-application" "set-guest-actions" "focus-master" "focused" "set!" "self" "get-host" "eq?" "and" "when" "get-focus" "focus" "let")}
        {Lisp-Entry "focus-default" #f 184 11 184 24 ()}
        {Lisp-Entry "reactivate-focused" #f 188 21 188 39 ("acquire-focus" "focused" "when")}
        {Lisp-Entry "view-destroyed" #f 193 21 193 35 ("set!" "focused" "eq?" "when" "view")}
        {Lisp-Entry "install-tools" #f 203 29 203 42 ("layout-view")}}}})
"Hyperlink-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Hyperlink-Style.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Hyperlink-Style" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Hyperlink-Style" #f 44 7 44 22 ("action" "initialize" "anchor" "highlight" "color" "font" "alignment" "Text-Style")
        {Lisp-Entry "fold-literal" #f 52 11 52 23 ("Hyperlink-Style" "'Hyperlink-Style" "fold-exemplar")}}}})
"I"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "suite" "I.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.suite.I-Class" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "I-Class" #f 40 7 40 14 ("Interface")
        {Lisp-Entry "foo" #f 43 18 43 21 ("2")}}
      {Lisp-Entry "I" #f 47 11 47 12 ("I-Class")
        {Lisp-Entry "f" #f 50 35 50 36 ()}}}})
"IDE"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "IDE.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.IDE" #f 37 9 37 21 ("jazz")
      {Lisp-Entry "IDE" #f 70 7 70 10 ("else" "use-profile-logging?" "method" "carbon" "cond-expand" "Application")
        {Lisp-Entry "local-debugger" #f 73 8 73 22 ()}
        {Lisp-Entry "cataloguer" #f 74 8 74 18 ("Cataloguer" "new")}
        {Lisp-Entry "catalog-context" #f 75 8 75 23 ()}
        {Lisp-Entry "catalog-file" #f 76 8 76 20 ()}
        {Lisp-Entry "search" #f 77 8 77 14 ()}
        {Lisp-Entry "recorder" #f 78 8 78 16 ("Macro-Recorder" "new")}
        {Lisp-Entry "start-process" #f 81 11 81 24 ("start-jazz-debugger" "process-title" "set-caption-base" "toplevel" "get-caption-base" "not" "when" "nextmethod")}
        {Lisp-Entry "prepare-workbench" #f 88 11 88 28 ("setup-workbench" "nextmethod")}
        {Lisp-Entry "process-title" #f 93 11 93 24 ("get-preferences" "get-toplevel-title" "either")}
        {Lisp-Entry "workspace-installed" #f 98 11 98 30 ("update-catalog-context" "nextmethod")}
        {Lisp-Entry "finish-process" #f 103 11 103 25 ("get-workbench" "load-catalogs" "nextmethod")}
        {Lisp-Entry "conclude-environment" #f 108 11 108 31 ("get-local-register" "attach-to-controller" "get-controller-debugger" "not" "when" "nextmethod")}
        {Lisp-Entry "close-environment" #f 116 11 116 28 ("nextmethod" "detach-debugger-processes")}
        {Lisp-Entry "get-backward-history" #f 126 18 126 38 ("history-manager" "get-backward-history")}
        {Lisp-Entry "get-forward-history" #f 130 18 130 37 ("history-manager" "get-forward-history")}
        {Lisp-Entry "get-recorder" #f 139 11 139 23 ("recorder")}
        {Lisp-Entry "use-profile?" #f 148 11 148 23 ()}
        {Lisp-Entry "base-frame-class" #f 167 11 167 27 ("Text-View")}
        {Lisp-Entry "default-frame-class" #f 171 11 171 30 ("Plain-Text-View")}
        {Lisp-Entry "known-extension-frame-class" #f 175 11 175 38 ("nextmethod" "else" "Image-View" "'Image-View" "jazz.ui" "'jazz.ui" "Python-Text-View" "'Python-Text-View" "jazz.language.python" "'jazz.language.python" "Lua-Text-View" "'Lua-Text-View" "jazz.language.lua" "'jazz.language.lua" "JavaScript-Text-View" "'JavaScript-Text-View" "jazz.language.javascript" "'jazz.language.javascript" "Properties-Text-View" "'Properties-Text-View" "jazz.language.properties" "'jazz.language.properties" "CSS-Text-View" "'CSS-Text-View" "jazz.language.css" "'jazz.language.css" "SQL-Text-View" "'SQL-Text-View" "jazz.language.sql" "'jazz.language.sql" "XML-Text-View" "HTML-Text-View" "'HTML-Text-View" "jazz.language.html" "'jazz.language.html" "CSharp-Text-View" "'CSharp-Text-View" "jazz.language.csharp" "'jazz.language.csharp" "C-Text-View" "'C-Text-View" "jazz.language.c" "'jazz.language.c" "Java-Text-View" "'Java-Text-View" "jazz.language.java" "'jazz.language.java" "Prop-Text-View" "'Prop-Text-View" "jazz.language.prop" "'jazz.language.prop" "module-autoload" "Plain-Formatted-Text-View" "Plain-Text-View" "ci=?" "test:" "member?" "cond" "ext")}
        {Lisp-Entry "unknown-extension-frame-class" #f 196 11 196 40 ("Plain-Text-View")}
        {Lisp-Entry "get-cataloguer" #f 205 11 205 25 ("cataloguer")}
        {Lisp-Entry "get-catalog-context" #f 209 11 209 30 ("catalog-context")}
        {Lisp-Entry "update-catalog-context" #f 213 18 213 40 ("get-catalog-context" "set-catalog-context")}
        {Lisp-Entry "set-catalog-context" #f 217 18 217 37 ("catalog-context" "set!" "set-title" "set-icon" "'mode" "find-component" "mode" "IDE-Status" "toplevel" "find-palette" "status" "Bitmap-Resource" "icon" "c" "jazz" "case" "title" "let" "when" "context")}
        {Lisp-Entry "get-search-manager" #f 235 11 235 29 ("search")}
        {Lisp-Entry "get-history-manager" #f 239 18 239 37 ("history-manager")}
        {Lisp-Entry "user-feedback" #f 243 11 243 24 ("user-message" "message")}
        {Lisp-Entry "stage-class" #f 252 11 252 22 ("Wallpaper-Stage")}
        {Lisp-Entry "class-actions" #f 261 11 261 24 ("nextmethod" "ide" "'ide" "find-actions" "cons")}
        {Lisp-Entry "save-environment" #f 271 11 271 27 ("save-catalogs" "cataloguer" "when" "nextmethod")}
        {Lisp-Entry "load-session" #f 283 11 283 23 ("set-current-directory" "when" "session" "application" "get-preferences" "get-current-directory" "dir" "let")}
        {Lisp-Entry "reload-opened-windows" #f 290 11 290 32 ("session" "application" "get-preferences" "get-opened-windows" "reload-component" "exists?" "not" "or" "when" "others" "file" "bind-keywords" "properties" "class" "bind" "info" "function" "for-each")}
        {Lisp-Entry "reload-component" #f 300 11 300 27 ("nextmethod" "else" "Compare-Files-Frame" "compare-files" "Compare-Directories-Frame" "compare-directories" "Catalogs-Manager" "catalogs-manager" "Browser-Frame" "browser-frame" "Image-Frame" "image-frame" "Java-Text-Palette" "java-palette" "HTML-Text-Frame" "html-text" "Prop-Text-Frame" "prop-text" "Java-Text-Frame" "java-text" "C-Text-Frame" "c-text" "Plain-Text-Frame" "new" "apply" "plain-text" "case" "properties" "class")}
        {Lisp-Entry "Workbench-File" #f 324 14 324 28 ("Profile" "File")}
        {Lisp-Entry "load-workbench" #f 328 11 328 25 ("default-workbench" "read-from-file" "instantiate" "exists?" "if" "Workbench-File" "file" "let")}
        {Lisp-Entry "default-workbench" #f 335 29 335 46 ("Workbench" "new")}
        {Lisp-Entry "setup-workbench" #f 339 18 339 33 ("err" "continue-handler:" "title:" "load-workbench" "set-workbench" "with-execution-context" "function" "with-safe-execution")}
        {Lisp-Entry "get-output-log" #f 356 11 356 25 ("Output-Log" "singleton-docked" "get-guest")}
        {Lisp-Entry "register-base-objects" #f 365 11 365 32 ("local-debugger" "Jazz-Debugger-Local-Proxy" "new" "debugger" "'debugger" "get-local-register" "register-object" "nextmethod")}
        {Lisp-Entry "get-local-debugger" #f 375 11 375 29 ("local-debugger")}
        {Lisp-Entry "start-jazz-debugger" #f 379 11 379 30 ("register-debugger" "start-debugger" "Jazz-Debugger" "new" "set!" "local-debugger" "not" "when")}
        {Lisp-Entry "detach-debugger-processes" #f 386 11 386 36 ("get-debuggers" "detach-processes" "debugger" "function" "for-each")}
        {Lisp-Entry "process-alias" #f 397 11 397 24 ("nextmethod" "else" "recorder" ":recorder" "current-view-debugger" ":view-debugger" "current-debugger" ":debugger" "case" "name")}
        {Lisp-Entry "on-open-favorite" #f 410 11 410 27 ("get-file" "edit-document" "error" "not" "if" "find-favorite" "favorite" "char:" "get-property" "char" "let*" "evt")}
        {Lisp-Entry "find-favorite" #f 418 11 418 24 ("get-shortcut" "eqv?" "favorite" "function" "find-if" "get-children" "when" "error?:" "favorites" "'favorites" "get-preferences" "pref" "let" "char")}
        {Lisp-Entry "edit-definitions" #f 432 11 432 27 ("get-search-manager" "get-guest" "edit-definitions" "else" "car" "edit" "1" "length" "case" "add-history" "bell" "null?" "if" "get-cataloguer" "get-coalesced-definitions" "filter-entries" "definitions" "let" "history-item" "history-item:" "workspace" "workspace:" "catalog-context" "context" "context:" "class" "class:" "object")}
        {Lisp-Entry "edit-references" #f 442 11 442 26 ("get-search-manager" "get-guest" "edit-references" "else" "car" "edit-reference" "1" "length" "case" "add-history" "bell" "null?" "if" "get-cataloguer" "get-references" "definitions" "let" "history-item" "history-item:" "catalog-context" "context" "context:" "object")}
        {Lisp-Entry "filter-entries" #f 453 11 453 25 ("class" "entries")}
        {Lisp-Entry "get-documentation" #f 462 18 462 35 ("get-definition" "get-documentation-cataloguer" "cataloguer" "let" "when" "symbol")}
        {Lisp-Entry "edit-documentation" #f 469 18 469 36 ("focus-host" "set-visible?" "bring-to-front" "set-selection" "location-range" "range" "0" "list" "get-location" "append" "location" "get-guest" "text" "visible?:" "edit-document" "frame" "get-toplevel" "get-origin" "moniker" "get-form" "form" "let*" "bell" "not" "if" "get-documentation" "doc" "let" "symbol")}
        {Lisp-Entry "edit-documentation" #f 486 18 486 36 ("get-host" "bring-to-front" "set-entry" "entry:" "get-documentation-catalog" "client:" "new-frame" "not" "if" "list" "info" "stage" "find-guest" "editor" "Doc-Editor" "class" "let*" "text-location" "text" "object" "location")}
        {Lisp-Entry "on-open-text" #f 501 18 501 30 ("get-name" "key:" "string>?" "sort" "char-encoding:" "Jazz-Plain-Text-View" "class:" "edit-document" "file" "function" "for-each" "text?:" "multiple-selection?:" "choose-file" "char-encoding" "files" "receive" "evt")}
        {Lisp-Entry "on-open-jazz-text" #f 508 18 508 35 ("get-name" "key:" "string>?" "sort" "Jazz-Text-View" "class:" "edit-document" "file" "function" "for-each" "multiple-selection?:" "title:" "choose-file" "files" "let" "evt")}
        {Lisp-Entry "on-show-terminal" #f 515 18 515 34 ("repl" "bring-terminal-to-front" "set-terminal-title" "evt")}
        {Lisp-Entry "on-clear-terminal" #f 521 18 521 35 ("clear-terminal" "evt")}
        {Lisp-Entry "on-test" #f 525 26 525 33 ("get-profile" "test" "evt")}
        {Lisp-Entry "on-test-shift" #f 529 26 529 39 ("get-profile" "test-shift" "evt")}
        {Lisp-Entry "on-test-no" #f 533 11 533 21 ("test9" "9" "test8" "8" "test7" "7" "test6" "6" "test5" "5" "test4" "4" "test3" "3" "test2" "2" "test1" "1" "test0" "0" "no:" "get-property" "case" "get-profile" "profile" "let" "evt")}
        {Lisp-Entry "on-debug-views" #f 548 18 548 32 ("current-view-debugger" "debug-views" "evt")}
        {Lisp-Entry "on-explore-views" #f 552 18 552 34 ("current-view-debugger" "explore-views" "evt")}
        {Lisp-Entry "on-processes" #f 556 18 556 30 ("focus?:" "debugger" "'debugger" "workspace:" "Processes-View" "select-palette" "evt")}
        {Lisp-Entry "on-threads" #f 560 18 560 28 ("focus?:" "debugger" "'debugger" "workspace:" "Threads-View" "select-palette" "evt")}
        {Lisp-Entry "on-frames" #f 564 18 564 27 ("focus?:" "debugger" "'debugger" "workspace:" "Frames-View" "select-palette" "evt")}
        {Lisp-Entry "on-detail" #f 568 18 568 27 ("focus?:" "debugger" "'debugger" "workspace:" "Detail-View" "select-palette" "evt")}
        {Lisp-Entry "on-variables" #f 572 18 572 30 ("focus?:" "debugger" "'debugger" "workspace:" "Variables-View" "select-palette" "evt")}
        {Lisp-Entry "on-resources-monitor" #f 576 11 576 31 ("Resources-Monitor" "show-palette" "evt")}
        {Lisp-Entry "on-logs-viewer" #f 580 18 580 32 ("Logs-Viewer" "show-palette" "evt")}
        {Lisp-Entry "on-class-browser" #f 584 11 584 27 ("set-text" "browser" "palette" "function" "initialize:" "Class-Browser" "show-palette" "get-selected-string" "Text-View" "is?" "if" "text" "get-focus" "focus" "let*" "evt")}
        {Lisp-Entry "on-edit-clipboard" #f 591 18 591 35 ("bell" "edit-definitions" "string?" "if" "get-clipboard-text" "clipboard" "let" "evt")}
        {Lisp-Entry "get-workbench-manager" #f 598 18 598 39 ("Workbench-Manager" "singleton-docked" "get-guest")}
        {Lisp-Entry "on-select-product" #f 602 18 602 35 ("get-workbench-manager" "select-current" "evt")}
        {Lisp-Entry "on-edit-product" #f 606 18 606 33 ("get-workbench-manager" "edit-current" "evt")}
        {Lisp-Entry "on-compile-file" #f 610 18 610 33 ("get-workbench-manager" "compile-current" "evt")}
        {Lisp-Entry "on-preprocess-file" #f 614 18 614 36 ("get-workbench-manager" "preprocess-current" "evt")}
        {Lisp-Entry "on-build-product" #f 618 18 618 34 ("get-workbench-manager" "build-current" "evt")}
        {Lisp-Entry "on-clean-product" #f 622 18 622 34 ("get-workbench-manager" "clean-current" "evt")}
        {Lisp-Entry "on-view-product-log" #f 626 18 626 37 ("get-workbench-manager" "view-log" "evt")}
        {Lisp-Entry "on-test-product" #f 630 18 630 33 ("get-workbench-manager" "test-current" "evt")}
        {Lisp-Entry "on-run-product" #f 634 18 634 32 ("get-workbench-manager" "run-current" "evt")}
        {Lisp-Entry "on-debug-product" #f 638 18 638 34 ("get-workbench-manager" "launch-current" "evt")}
        {Lisp-Entry "on-distribute-product" #f 642 18 642 39 ("get-workbench-manager" "distribute-current" "evt")}
        {Lisp-Entry "on-properties" #f 651 18 651 31 ("focus?:" "Properties-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-search-results" #f 655 18 655 35 ("focus?:" "Search-Results" "select-palette" "evt")}
        {Lisp-Entry "on-profile-results" #f 659 18 659 36 ("focus?:" "Profile-Results" "select-palette" "evt")}
        {Lisp-Entry "on-web-servers" #f 663 18 663 32 ("focus?:" "Web-Servers-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-output-log" #f 667 18 667 31 ("focus?:" "Output-Log" "select-palette" "evt")}
        {Lisp-Entry "on-user-log" #f 671 18 671 29 ("refresh" "focus?:" "User-Log" "select-palette" "user-log" "let" "evt")}
        {Lisp-Entry "on-activities" #f 676 18 676 31 ("focus?:" "Activities-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-workbench" #f 680 18 680 30 ("focus?:" "Workbench-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-favorites" #f 684 18 684 30 ("focus?:" "Favorites-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-depots" #f 688 18 688 27 ("focus?:" "Depots-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-contacts" #f 693 18 693 29 ("focus?:" "Contacts-Manager" "select-palette" "evt")}
        {Lisp-Entry "on-chapters" #f 698 18 698 29 ("focus?:" "text" "'text" "workspace:" "Chapters-Browser" "select-palette" "evt")}
        {Lisp-Entry "on-hierarchy" #f 702 18 702 30 ("focus?:" "text" "'text" "workspace:" "Hierarchy-Browser" "select-palette" "evt")}
        {Lisp-Entry "on-bindings-manager" #f 706 18 706 37 ("new-frame" "focus-host" "set-visible?" "bring-to-front" "begin" "if" "Bindings-Manager" "stage" "find-host" "frame" "let" "evt")}
        {Lisp-Entry "on-view-bindings" #f 716 18 716 34 ("Shortcut-Viewer" "get-modal" "evt")}
        {Lisp-Entry "on-preferences" #f 720 18 720 32 ("Preferences-Manager" "new-frame" "evt")}
        {Lisp-Entry "on-toggle-catalog-context" #f 724 18 724 43 ("'jazz" "c" "'c" "set-catalog-context" "jazz" "catalog-context" "case" "evt")}
        {Lisp-Entry "on-save-workspace" #f 731 18 731 35 ("call-exit-listeners" "call-save-environment-listeners" "user-message" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-exit-without-save" #f 740 18 740 38 ("exit" "yes" "'yes" "question" "'question" "type:" "message-box" "eq?" "when" "evt")}
        {Lisp-Entry "on-compare-directories" #f 745 18 745 40 ("focus-host" "set-visible?" "bring-to-front" "compare-trees" "get-guest" "configure" "function" ":wait" "with-cursor" "host-visible?:" "frame" "Compare-Directories" "new-frame" "not" "compare-directories" "tools" "get-preferences" "get-active-configuration" "default" "let" "get-shift?" "if" "evt")}
        {Lisp-Entry "on-compare-files" #f 761 18 761 34 ("Compare-Files" "new-frame" "evt")}
        {Lisp-Entry "on-compare-databases" #f 765 18 765 38 ("Compare-Databases" "new-frame" "evt")}
        {Lisp-Entry "on-update-catalogs" #f 775 11 775 29 ("listify" "cataloguer" "get-catalog" "update" "name" "for-each" "function" ":wait" "with-cursor" "message-box" "not" "if" "catalogs" "'catalogs" "get-preferences" "get-main" "main" "let" "evt")}
        {Lisp-Entry "on-catalogs-manager" #f 786 11 786 30 ("new-frame" "focus-host" "set-visible?" "bring-to-front" "begin" "if" "Catalogs-Manager" "stage" "find-host" "frame" "let" "evt")}}}})
"IDE-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "IDE-Actions.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.IDE-Actions" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "IDE-Actions" #f 47 7 47 18 ("on-user-code" "user-code" "F12" "on-edit-clipboard" "edit-clipboard" "open-favorite-0" "open-favorite-9" "open-favorite-8" "open-favorite-7" "open-favorite-6" "open-favorite-5" "open-favorite-4" "open-favorite-3" "open-favorite-2" "open-favorite-1" "open-favorite-Z" "open-favorite-Y" "open-favorite-X" "open-favorite-W" "open-favorite-V" "open-favorite-U" "open-favorite-T" "open-favorite-S" "open-favorite-R" "open-favorite-Q" "open-favorite-P" "open-favorite-O" "open-favorite-N" "open-favorite-M" "open-favorite-L" "open-favorite-K" "open-favorite-J" "open-favorite-I" "open-favorite-H" "open-favorite-G" "open-favorite-F" "open-favorite-E" "open-favorite-D" "open-favorite-C" "open-favorite-B" ":alt" ":shift" ":control" "char:" "on-open-favorite" ":application" "open-favorite-A" "F2" "Shortcut" "shortcut:" "on-paste" ":focus" "Event-Handler" "action-handler:" "paste" "name:" "Actions")}}})
"IDE-Bindings"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "IDE-Bindings.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.IDE-Bindings" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "IDE-Bindings" #f 49 7 49 19 ("ide" "name:" "Application-Bindings")}}})
"IDE-File-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "IDE-File-Menu.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.IDE-File-Menu" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "IDE-File-Menu" #f 47 7 47 20 ("exit-without-save" "on-exit-without-save" "save-workspace" "on-quit-application" "on-save-workspace" "open-jazz-text" "on-open-jazz-text" "open-text" "jedi" "Action" "action:" "on-close" "before:" "title:" "on-open-text" "name:" "File-Menu")}}})
"IDE-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "IDE-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.IDE-Preferences" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "IDE-Preferences" #f 48 7 48 22 ("title:" "Application-Preferences")}}})
"IDE-Profile"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "IDE-Profile.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.IDE-Profile" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "IDE-Profile" #f 53 7 53 18 ("Profile")
        {Lisp-Entry "format-sql" #f 62 11 62 21 ("error" "else" "format" "string?" "cond" "value")}
        {Lisp-Entry "output-tables" #f 68 11 68 24 ("sql" "'sql" "select-workspace" "get-application" "appl" "when" "output-tables" "get-sql-console-text" "text" "let" "select?" "select?:" "name" "name:" "tables")}
        {Lisp-Entry "output-table" #f 77 11 77 23 ("list" "output-tables" "select?" "select?:" "name" "name:" "table")}
        {Lisp-Entry "log-tables" #f 82 11 82 21 ("log-table" "for-each" "tables")}
        {Lisp-Entry "log-table" #f 87 11 87 20 ("data:" "get-name" "name:" "log-entry" "table")}
        {Lisp-Entry "glue" #f 97 11 97 15 ("user-message" "set-clipboard-text" "join" "2" "format" "case" "glued" "-" "0" "subseq" "get-clipboard-text" "cons" "lst" "get-clipboard-stack" "stack" "get-application" "appl" "let*" "1" "kind" "n")}
        {Lisp-Entry "get-source" #f 114 11 114 21 ("find-zipped" "find-file" "find-document" "either" "class-name")}
        {Lisp-Entry "find-document" #f 121 11 121 24 ("get-stage" "get-children" "continuation-return" "ci=?" "=" "and" "get-extension" "ext" "get-base" "base" "get-controller" "get-moniker" "moniker" "Document" "get-guest" "guest" "Frame-Host" "is?" "when" "frame" "for-each" "return" "function" "continuation-capture" "->string" "target" "let" "get-manifest-source" "unless" "class-name")}
        {Lisp-Entry "find-file" #f 142 11 142 20 ("source-directories" "continuation-return" "exists?" "when" "new-file" "file" "dir" "for-each" "return" "function" "continuation-capture" "tie" "name" "let" "class-name")}
        {Lisp-Entry "source-directories" #f 155 29 155 47 ()}
        {Lisp-Entry "find-zipped" #f 160 11 160 22 ("source-zips" "Zipped" "continuation-return" "extract-name" "=" "size" "entry" "iterate-files" "Unzip-File" "new" "unzip" "with-closed" "exists?" "when" "zip" "for-each" "return" "function" "continuation-capture" "format" "target" "let" "class-name")}
        {Lisp-Entry "source-zips" #f 177 29 177 40 ()}}}})
"IDE-Status"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "IDE-Status.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.IDE-Status" #f 37 9 37 28 ("jazz")
      {Lisp-Entry "IDE-Status" #f 52 7 52 17 ("Status-Toolbar")
        {Lisp-Entry "on-context-menu" #f 60 29 60 44 ("Mode-Menu" "new" "track-popup-menu" "mode" "case" "get-position" "acquire" "pos" "get-name" "name" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-mouse-down" #f 68 29 68 42 ("Mode-Menu" "new" "track-popup-menu" "mode" "case" "get-position" "acquire" "pos" "get-name" "name" "get-sender" "sender" "let*" "evt")}}
      {Lisp-Entry "Activities-Menu" #f 81 7 81 22 ("on-clear-done" "Bitmap-Resource" "icon:" "clear-done" "on-close" "close" "on-open" ":form" "Event-Handler" "action-handler:" "open" "name:" "title:" "Context-Menu")
        {Lisp-Entry "on-open" #f 92 11 92 18 ("get-activity-manager" "show" "evt")}
        {Lisp-Entry "on-close" #f 96 11 96 19 ("get-activity-manager" "hide" "evt")}
        {Lisp-Entry "on-clear-done" #f 100 11 100 24 ("get-activity-manager" "clear-done" "evt")}}
      {Lisp-Entry "Locales-Menu" #f 109 7 109 19 ("Context-Menu")
        {Lisp-Entry "install" #f 112 11 112 18 ("insert-locales" "nextmethod" "rest")}
        {Lisp-Entry "insert-locales" #f 117 11 117 25 ("eq?" "insert-locale" "locale" "function" "for-each" "get-locales" "locales" "get-locale" "current" "let")}
        {Lisp-Entry "insert-locale" #f 125 11 125 24 ("set-checked?" "when" "locale:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Check-Item" "new" "item" "present-locale" "title" "let*" "checked?" "locale")}
        {Lisp-Entry "on-action" #f 132 11 132 20 ("locale:" "get-property" "set-locale" "evt")}}
      {Lisp-Entry "Look-Menu" #f 141 7 141 16 ("Context-Menu")
        {Lisp-Entry "install" #f 144 11 144 18 ("insert-looks" "nextmethod" "rest")}
        {Lisp-Entry "insert-looks" #f 149 11 149 23 ("eq?" "insert-look" "look" "function" "for-each" "get-looks" "looks" "get-look" "current" "let")}
        {Lisp-Entry "insert-look" #f 157 11 157 22 ("set-checked?" "when" "look:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Check-Item" "new" "item" "present" "title" "let*" "checked?" "look")}
        {Lisp-Entry "on-action" #f 164 11 164 20 ("get-toplevel" "redraw-window" "look:" "get-property" "set-look" "evt")}}
      {Lisp-Entry "Mode-Menu" #f 174 7 174 16 ("Context-Menu")
        {Lisp-Entry "install" #f 177 11 177 18 ("c" "'c" "Bitmap-Resource" "jazz" "'jazz" "insert-item" "nextmethod" "rest")}
        {Lisp-Entry "insert-item" #f 183 11 183 22 ("set-checked?" "eq?" "when" "mode:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "self" "parent:" "Check-Item" "new" "item" "get-application" "get-catalog-context" "current" "let" "icon" "title" "mode")}
        {Lisp-Entry "on-action" #f 190 11 190 20 ("mode:" "get-property" "get-application" "set-catalog-context" "evt")}}}})
"IDE-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "IDE-Text-View.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.IDE-Text-View" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "IDE-Text-View" #f 53 7 53 20 ("Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Code-Text-View")
        {Lisp-Entry "context" #f 56 12 56 19 ("set-context" "get-context")}
        {Lisp-Entry "new-syntax" #f 64 11 64 21 ("Jazz-Syntax" "new")}
        {Lisp-Entry "get-context" #f 73 11 73 22 ("syntax" "get-catalog-context" "list" "context" "not" "if")}
        {Lisp-Entry "set-context" #f 79 18 79 29 ("context" "set!" "value")}
        {Lisp-Entry "catalog-context" #f 88 11 88 26 ("syntax" "get-catalog-context" "context" "either")}
        {Lisp-Entry "jazz-preferences" #f 97 11 97 27 ("jazz-text" "documents" "get-preferences")}
        {Lisp-Entry "c-preferences" #f 101 11 101 24 ("java-text" "documents" "get-preferences")}
        {Lisp-Entry "sql-preferences" #f 105 11 105 26 ("sql-text" "documents" "get-preferences")}
        {Lisp-Entry "current-history-item" #f 114 11 114 31 ()}
        {Lisp-Entry "explorer-class" #f 123 11 123 25 ("nextmethod" "else" "SQL-Explorer" "sql" "C-Explorer" "c" "Jazz-Explorer" "jazz" "catalog-context" "case")}
        {Lisp-Entry "expr-at" #f 137 11 137 18 ("sql-expr-range" "sql-name-at" "sql" "c-expr-range" "c-name-at" "c" "jazz-expr-range" "jazz-name-at" "jazz" "catalog-context" "case" "pos")}
        {Lisp-Entry "expr-range" #f 144 11 144 21 ("sql-expr-range" "sql" "c-expr-range" "c" "jazz-expr-range" "jazz" "catalog-context" "case" "pos")}
        {Lisp-Entry "current-expr" #f 151 11 151 23 ("current-sql-expr" "sql" "current-c-expr" "c" "current-jazz-expr" "jazz" "catalog-context" "case")}
        {Lisp-Entry "current-jazz-expr" #f 163 11 163 28 ("get-string" "read-string-element" "when" "current-jazz-expr-range" "range" "let")}
        {Lisp-Entry "current-jazz-symbol" #f 169 21 169 40 ("symbol?" "when" "current-jazz-expr" "expr" "let")}
        {Lisp-Entry "current-jazz-expr-range" #f 175 11 175 34 ("get-end" "jazz-expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "jazz-expr-range" #f 181 11 181 26 ("get-range" "outer-expr" "when" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "jazz-name-at" #f 187 11 187 23 ("get-string" "read-string-element" "when" "range")}
        {Lisp-Entry "current-c-expr" #f 197 11 197 25 ("current-c-name")}
        {Lisp-Entry "current-c-name" #f 201 11 201 25 ("c-current-expr-range" "c-name-at")}
        {Lisp-Entry "c-current-expr-range" #f 205 11 205 31 ("get-end" "c-expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "c-expr-range" #f 211 11 211 23 ("get-range" "outer-expr" "end:" "start:" "self" "C-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "c-name-at" #f 217 11 217 20 ("read-string-element" "0" "element" "=" "if" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "current-sql-expr" #f 230 11 230 27 ("current-sql-name")}
        {Lisp-Entry "current-sql-name" #f 234 11 234 27 ("sql-current-expr-range" "sql-name-at")}
        {Lisp-Entry "sql-current-expr-range" #f 238 11 238 33 ("get-end" "sql-expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "sql-expr-range" #f 244 11 244 25 ("get-range" "outer-expr" "end:" "start:" "self" "SQL-Explorer" "new" "expl" "let" "sql-expr-range" "'sql-expr-range" "unimplemented" "pos")}
        {Lisp-Entry "sql-name-at" #f 252 11 252 22 ("read-string-element" "0" "element" "=" "if" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "favorite-completions" #f 265 11 265 31 ("nextmethod" "else" "sql-preferences" "sql" "c-preferences" "c" "jazz-preferences" "get-completions" "jazz" "catalog-context" "case")}
        {Lisp-Entry "colorize-syntax" #f 278 11 278 26 ("rest")}
        {Lisp-Entry "recolorize-text" #f 282 11 282 26 ("end-row" "start")}
        {Lisp-Entry "flash-character?" #f 291 11 291 27 ("nextmethod" "else" "memq?" "jazz" "catalog-context" "case" "char")}
        {Lisp-Entry "context-menu" #f 302 11 302 23 ("nextmethod" "else" "edit-references" "edit-definitions" "cond" "context-menu-click" "or" "references?" "not" "definition?" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "editable?" "enabled?" "and" "when" "pos")}
        {Lisp-Entry "get-context-menu" #f 314 11 314 27 ("new-text-context-menu")}}}})
"IDE-Toolbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "IDE-Toolbar.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.IDE-Toolbar" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "IDE-Toolbar" #f 50 7 50 18 ("Toolbar")
        {Lisp-Entry "on-clipboard-menu" #f 58 11 58 28 ("clipboards:" "Clipboards-Menu" "track-popup-menu" "not-null?" "when" "cons" "if" "clipboards" "get-application" "get-clipboard-stack" "stack" "get-clipboard-text" "text" "get-size" "get-height" "0" "Point" "new" "get-position" "nu+" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-backward-menu" #f 68 11 68 27 ("backward" "'backward" "get-application" "get-history-manager" "track-history" "get-combo" "initiator" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-forward-menu" #f 74 11 74 26 ("forward" "'forward" "get-application" "get-history-manager" "track-history" "get-combo" "initiator" "get-sender" "sender" "let*" "evt")}}
      {Lisp-Entry "Clipboards-Menu" #f 85 7 85 22 ("Context-Menu")
        {Lisp-Entry "clipboards" #f 88 12 88 22 ("generate")}
        {Lisp-Entry "finish" #f 91 11 91 17 ("for-each" "self" "parent:" "Separator-Item" "new" "not-null?" "when" "insert-item" "clipboards" "others" "clipboard" "bind" "nextmethod" "rest")}
        {Lisp-Entry "insert-item" #f 100 11 100 22 ("string:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "self" "parent:" "Label-Item" "new" "item")}
        {Lisp-Entry "on-action" #f 104 11 104 20 ("paste-clipboard-string" "string:" "get-property" "string" "bell" "Text-View" "is-not?" "if" "get-focus" "focus" "let" "evt")}}}})
"IDE-Toplevel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "IDE-Toplevel.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.IDE-Toplevel" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "IDE-Toplevel" #f 46 7 46 19 ("Toplevel")}}})
"IDispatch"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "IDispatch.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.com.IDispatch" #f 37 9 37 44 ("DISPPARAMS&" "Invoke" "GetIDsOfNames" "GetTypeInfo" "int&" "GetTypeInfoCount" "int" "abstract" "virtual" "public" "com-external" "GUID" "guid:" "attributes" "IUnknown" "extends" "IDispatch" "com-interface" "jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "comlib" "IDispatch.jazz"} 1226584783
    {Lisp-Entry "jazz.library.com.IDispatch" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "IDispatch" #f 44 11 44 20 ("GUID" "guid:" "IUnknown")}}})
"IEnumVARIANT"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "comlib" "IEnumVARIANT.jazz"} 1226584783
    {Lisp-Entry "jazz.library.com.IEnumVARIANT" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "IEnumVARIANT" #f 44 11 44 23 ("GUID" "guid:" "IUnknown")}}})
"IErrorInfo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "toconvert" "IErrorInfo.jazz"} 1226584783
    {Lisp-Entry "jazz.kernel.runtime.IErrorInfo" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "IErrorInfo" #f 44 11 44 21 ("GUID" "guid:" "IUnknown")}}})
"IOR"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "remote" "IOR.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm.remote.IOR" #f 37 9 37 28 ("jazz")
      {Lisp-Entry "IOR" #f 40 7 40 10 ("Object")
        {Lisp-Entry "host" #f 43 8 43 12 ("generate")}
        {Lisp-Entry "service" #f 44 8 44 15 ("generate")}
        {Lisp-Entry "stub-interface" #f 45 8 45 22 ("generate")}
        {Lisp-Entry "reference" #f 46 8 46 17 ("generate")}
        {Lisp-Entry "values" #f 47 8 47 14 ("generate")}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("values~self" "reference~self" "stub-interface~self" "service~self" "host~self" "set!" "nextmethod" "values" "reference" "stub-interface" "service" "host")}
        {Lisp-Entry "fold-literal" #f 59 11 59 23 ("values" ",values" "',values" "reference" ",reference" "',reference" "stub-interface" ",stub-interface" "',stub-interface" "service" ",service" "',service" "host" ",host" "',host" "IOR" "new")}
        {Lisp-Entry "print" #f 63 11 63 16 ("values" "reference" "stub-interface" "service" "host" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}}})
"ISupportErrorInfo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "toconvert" "ISupportErrorInfo.jazz"} 1226584783
    {Lisp-Entry "jazz.kernel.runtime.ISupportErrorInfo" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "ISupportErrorInfo" #f 44 11 44 28 ("GUID" "guid:" "IUnknown")}}})
"IUnknown"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "IUnknown.scm"} 1226584783}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "IUnknown.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.com.IUnknown" #f 37 9 37 43 ("Release" "AddRef" "int&" "QueryInterface" "int" "virtual" "public" "com-external" "IUnknown" "com-interface" "jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "toconvert" "IUnknown.jazz"} 1226584783
    {Lisp-Entry "jazz.kernel.runtime.IUnknown" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "IUnknown" #f 44 11 44 19 ("GUID" "guid:")}}})
"Icon-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "resource" "Icon-File.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.resource.Icon-File" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Icon-File" #f 45 7 45 16 ("Resource-File")
        {Lisp-Entry "resource-class" #f 48 11 48 25 ("Icon-Resource")}
        {Lisp-Entry "resource-marker" #f 52 11 52 26 ()}}}})
"Icon-Resource"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "resource" "Icon-Resource.jazz"} 1226584782
    {Lisp-Entry "jazz.library.resource.Icon-Resource" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Icon-Resource" #f 43 7 43 20 ("Resource")
        {Lisp-Entry "fold-literal" #f 46 11 46 23 ("name" ",name" "',name" "Icon-Resource" "new")}
        {Lisp-Entry "resource-type" #f 56 16 56 29 ("icon" "'icon")}}}})
"Image"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "image" "Image.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.image.Image" #f 37 9 37 28 ("jazz")
      {Lisp-Entry "Image" #f 49 7 49 12 ("Object")
        {Lisp-Entry "icon" #f 52 8 52 12 ()}
        {Lisp-Entry "bitmap" #f 53 8 53 14 ()}
        {Lisp-Entry "metafile" #f 54 8 54 16 ()}
        {Lisp-Entry "portfolio" #f 55 8 55 17 ()}
        {Lisp-Entry "image-name" #f 56 8 56 18 ()}
        {Lisp-Entry "moniker" #f 57 8 57 15 ()}
        {Lisp-Entry "source" #f 58 8 58 14 ()}
        {Lisp-Entry "scaled?" #f 59 8 59 15 ()}
        {Lisp-Entry "scaling" #f 60 8 60 15 ("1.0")}
        {Lisp-Entry "cache?" #f 61 8 61 14 ()}
        {Lisp-Entry "handle" #f 62 8 62 14 ()}
        {Lisp-Entry "size" #f 63 8 63 12 ()}
        {Lisp-Entry "view-position" #f 64 8 64 21 ("0" "Point")}
        {Lisp-Entry "view-size" #f 65 8 65 17 ()}
        {Lisp-Entry "mode" #f 66 8 66 12 ()}
        {Lisp-Entry "initialize" #f 69 11 69 21 ("view-size" "view-size~self" "view-position" "view-position~self" "image-name" "image-name~self" "portfolio" "portfolio~self" "cache?~self" "set!" "nextmethod" "cache?" "cache?:")}
        {Lisp-Entry "get-bounds" #f 82 18 82 28 ("self" "error" "else" "rclBounds" "'rclBounds" "get" "RECT->rect" "scaling" "scale" "scaled?" "if" "bounds" "function" "proc" "GetEnhMetaFileHeader" "nSize" "'nSize" "set" "new" "header" "with" "ENHMETAHEADER" "size-of" "size" "let" "metafile" "cond" "get-bounds" "'get-bounds" "unimplemented")}
        {Lisp-Entry "get-size" #f 101 18 101 26 ("self" "error" "when" "else" "rect-height" "1" "rect-width" "+" "get-bounds" "bounds" "metafile" "BITMAP-bmHeight-ref" "BITMAP-bmWidth-ref" "Dimension" "new" "size-of-BITMAP" "'bitmap" "load-image" "handle" "either" "GetObject" "BITMAP-make" "info" "let" "bitmap" "size" "source" "cond" "error?" "error?:")}
        {Lisp-Entry "get-width" #f 122 18 122 27 ("get-size" "else" "get-width" "portfolio" "cond")}
        {Lisp-Entry "get-height" #f 127 18 127 28 ("get-size" "else" "get-height" "portfolio" "cond")}
        {Lisp-Entry "draw" #f 138 18 138 22 ("draw-image-aux" "get-v" "view-position" "get-h" "+" "let" "enabled?" "enabled?:" "style" "style:" "error?:" "get-size" "size" "size:" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-image-aux" #f 144 21 144 35 ("cache?" "handle" "and" "draw-source" "source" "draw-image" "portfolio" "draw-metafile" "metafile" "draw-bitmap" "bitmap" "draw-icon" "icon" "cond" "enabled?" "style" "size" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-icon" #f 153 11 153 20 ("draw-image" "'icon" "load-image" "handle" "either" "icon" "let" "size" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-bitmap" #f 158 11 158 22 ("icon" "draw-image" "'bitmap" "load-image" "handle" "either" "bitmap" "let" "size" "v" "h" "surface")}
        {Lisp-Entry "draw-metafile" #f 163 11 163 24 ("metafile" "get-hdc" "PlayEnhMetaFile" "rect->RECT" "rect" "with" "get-bounds" "bounds" "let" "draw-metafile" "'draw-metafile" "unimplemented" "size" "v" "h" "surface")}
        {Lisp-Entry "draw-image" #f 171 11 171 21 ("enabled?:" "style:" "portfolio" "draw-image" "image-name" "when" "enabled?" "style" "size" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-source" #f 176 11 176 22 ("else" "stretched" "0" "draw-positioned" "filled" "draw-tiled" "tiled" "draw-centered" "centered" "mode" "case" "size" "v" "h" "surface")}
        {Lisp-Entry "draw-source-bitmap" #f 185 11 185 29 ("NULL" "get-height" "size" "get-width" "get-hdc" "Imaging" "draw-HBITMAP" "handle" "when" "draw-source-bitmap" "'draw-source-bitmap" "unimplemented" "v" "h" "surface")}
        {Lisp-Entry "draw-centered" #f 192 11 192 24 ("get-v" "get-h" "draw-source-bitmap" "Black" "name:" "Color" "fill-rect" "0" "Rect" "new" "rect" "get-height" "get-width" ">" "or" "when" "view-size" "size" "center" "centered" "let" "v" "h" "surface")}
        {Lisp-Entry "draw-tiled" #f 201 11 201 21 ("size" "increase!" "draw-source-bitmap" "get-width" "view-size" "get-height" "<" "while" "0" "let" "v" "h" "surface")}
        {Lisp-Entry "draw-positioned" #f 211 11 211 26 ("get-v" "view-position" "get-h" "+" "draw-source-bitmap" "v" "h" "surface")}
        {Lisp-Entry "preload-image" #f 220 18 220 31 ("preload" "image-name" "portfolio" "and" "when")}
        {Lisp-Entry "get-scaled?" #f 230 18 230 29 ("scaled?")}
        {Lisp-Entry "set-scaled?" #f 234 18 234 29 ("scaled?" "set!" "value")}
        {Lisp-Entry "get-scaling" #f 238 18 238 29 ("scaling")}
        {Lisp-Entry "set-scaling" #f 242 18 242 29 ("scaling" "set!" "value")}
        {Lisp-Entry "get-mode" #f 251 18 251 26 ("mode")}
        {Lisp-Entry "set-mode" #f 255 18 255 26 ("force?:" "update-image" "stretched" "'stretched" "filled" "'filled" "eq?" "or" "set!" "old" "let" "mode" "neq?" "when" "md")}
        {Lisp-Entry "get-view-position" #f 264 18 264 35 ("view-position")}
        {Lisp-Entry "set-view-position" #f 268 18 268 35 ("view-position" "set!" "pos")}
        {Lisp-Entry "get-view-size" #f 272 18 272 31 ("view-size")}
        {Lisp-Entry "set-view-size" #f 276 18 276 31 ("view-size" "set!" "s")}
        {Lisp-Entry "get-icon" #f 280 18 280 26 ("icon")}
        {Lisp-Entry "set-icon" #f 284 18 284 26 ("icon" "set!" "icn")}
        {Lisp-Entry "get-portfolio" #f 288 18 288 31 ("portfolio")}
        {Lisp-Entry "set-portfolio" #f 292 18 292 31 ("portfolio" "set!" "pf")}
        {Lisp-Entry "get-image-name" #f 296 18 296 32 ("image-name")}
        {Lisp-Entry "set-image-name" #f 300 18 300 32 ("image-name" "set!" "name")}
        {Lisp-Entry "get-bitmap" #f 304 18 304 28 ("bitmap")}
        {Lisp-Entry "set-bitmap" #f 308 18 308 28 ("'bitmap" "load-image" "DeleteObject" "handle" "cache?" "when" "bitmap" "set!" "set-bitmap" "'set-bitmap" "unimplemented" "b")}
        {Lisp-Entry "get-handle" #f 320 18 320 28 ("handle")}
        {Lisp-Entry "set-handle" #f 324 18 324 28 ("handle" "set!" "hnd")}
        {Lisp-Entry "get-source" #f 328 18 328 28 ("source")}
        {Lisp-Entry "set-source" #f 332 18 332 28 ("load-image-source" "DeleteObject" "handle" "when" "source" "set!" "set-source" "'set-source" "unimplemented" "file")}
        {Lisp-Entry "get-moniker" #f 343 18 343 29 ("source" "bitmap" "moniker" "either")}
        {Lisp-Entry "set-moniker" #f 347 18 347 29 ("set-source" "else" "load-metafile" "test:" "member?" "set-bitmap" "ci=?" "cond" "get-extension" "ext" "let" "moniker" "set!" "mnk")}
        {Lisp-Entry "load-metafile" #f 358 11 358 24 ("parse" "GetEnhMetaFile" "metafile" "set!" "load-metafile" "'load-metafile" "unimplemented" "moniker")}
        {Lisp-Entry "update-image" #f 364 18 364 30 ("source" "set-source" "stretched" "'stretched" "filled" "'filled" "mode" "eq?" "or" "when" "force?" "force?:")}
        {Lisp-Entry "load-image-source" #f 369 11 369 28 ("Dimension" "size" "handle" "source" "get-hdc" "NULL" "RGB->HBITMAP" "bmp" "get-desktop" "Client-Surface" "new" "compatibility-dc" "with-closed" "fxround" ">" "ratio" "rh" "/" "rw" "stretched" "set!" "heap-free" "resize-RGB" "3" "*" "heap-alloc" "resized-rgb" "get-height" "nh" "get-width" "nw" "let*" "filled" "mode" "case" "view-size" "when" "error" "not" "if" "Imaging" "close-source" "read-source" "h" "w" "rgb" "receive" "open-source" "src" "let" "load-image-source" "'load-image-source" "unimplemented" "file")}
        {Lisp-Entry "open-source" #f 408 11 408 22 ("length" "get-handle" "open-memory-source" "Ansi-String" "parse" "coerce" "Imaging" "open-file-source" "file?" "if" "open-source" "'open-source" "unimplemented" "source")}
        {Lisp-Entry "read-source" #f 416 11 416 22 ("read-TIFF->RGB" "tiff" "read-JPG->RGB" "jpg" "read-PNG->RGB" "png" "Imaging" "read-BMP->RGB" "bmp" "source-type" "case" "read-source" "'read-source" "unimplemented" "src" "source")}
        {Lisp-Entry "source-type" #f 426 11 426 22 ("error" "else" "tiff" "'tiff" "jpg" "'jpg" "test:" "member?" "png" "'png" "bmp" "'bmp" "ci=?" "cond" "get-extension" "ext" "let" "file?" "if" "source")}}}})
"Image-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "image" "Image-Browser.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.image.Image-Browser" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Image-Browser" #f 50 7 50 20 ("toplevel-controls?:" "419" "width:" "title:" "tree" "header" "content" "vscroll?:" "hscroll?:" "document" "style:" "scroller" "on-select-directory" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "select" "tools" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "directory" #f 53 8 53 17 ()}
        {Lisp-Entry "external-name" #f 68 16 68 29 ("images-browser" "'images-browser" "rest")}
        {Lisp-Entry "on-select-directory" #f 72 11 72 30 ("update-images" "choose-directory" "directory" "set!" "evt")}
        {Lisp-Entry "update-images" #f 77 11 77 24 ("recursive?:" "directories?:" "files?:" "load-image" "image-file?" "when" "file" "directory" "iterate-directory" "function" "with-update-locked" "get-tree" "tree" "let")}
        {Lisp-Entry "image-file?" #f 90 11 90 22 ("ci=?" "test:" "get-extension" "member?" "file")}
        {Lisp-Entry "load-image" #f 95 11 95 21 ("image:" "title:" "Tree-Node" "list" "children:" "add-row" "Resource" "new" "image" "get-base" "name" "let*" "file" "tree")}
        {Lisp-Entry "host-icon" #f 106 16 106 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 110 16 110 26 ()}
        {Lisp-Entry "get-tools-view" #f 119 11 119 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 123 11 123 24 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" #f 133 11 133 19 ("tree" "'tree" "locate")}
        {Lisp-Entry "install" #f 142 11 142 18 ("header" "'header" "locate" "set-shown?" "nextmethod" "rest")}}}})
"Image-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Image-Style.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Image-Style" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Image-Style" #f 45 7 45 18 ("Style")
        {Lisp-Entry "properties" #f 48 14 48 24 ("scaling:" "scaled?:" "image-name:" "portfolio:" "moniker:" "alignment:")}
        {Lisp-Entry "image" #f 57 8 57 13 ("Image" "new")}
        {Lisp-Entry "scaled?" #f 58 8 58 15 ()}
        {Lisp-Entry "scaling" #f 59 8 59 15 ("1.0")}
        {Lisp-Entry "get-value" #f 62 11 62 20 ("nextmethod" "else" "get-scaling" "scaling:" "get-scaled?" "scaled?:" "get-image-name" "image-name:" "get-portfolio" "portfolio:" "image" "get-moniker" "moniker:" "case" "property")}
        {Lisp-Entry "set-value" #f 72 11 72 20 ("nextmethod" "else" "set-scaling" "scaling:" "set-scaled?" "scaled?:" "set-image-name" "image-name:" "set-portfolio" "portfolio:" "image" "set-moniker" "moniker:" "case" "value" "property")}
        {Lisp-Entry "get-image" #f 87 18 87 27 ("image")}
        {Lisp-Entry "get-width" #f 96 11 96 20 ("image" "get-width")}
        {Lisp-Entry "get-height" #f 100 11 100 21 ("image" "get-height")}
        {Lisp-Entry "run-width" #f 104 11 104 20 ("get-width" "run")}
        {Lisp-Entry "propagate?" #f 113 11 113 21 ()}
        {Lisp-Entry "wrap" #f 122 11 122 15 ("get-width" "+" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "draw-style" #f 132 11 132 21 ("+" "image" "draw" "justify-element" "top" "get-height" "height" "get-width" "width" "let*" "enabled?" "left" "tabs" "line-height" "v" "h" "string" "context" "surface")}}}})
"Image-Tool"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Image-Tool.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Image-Tool" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Image-Tool" #f 45 7 45 17 ("Tool-Button")
        {Lisp-Entry "portfolio" #f 48 12 48 21 ("set-portfolio" "get-portfolio")}
        {Lisp-Entry "image-name" #f 49 12 49 22 ("set-image-name" "get-image-name")}
        {Lisp-Entry "disabled-image-name" #f 50 12 50 31 ("set-disabled-image-name" "get-disabled-image-name")}
        {Lisp-Entry "image" #f 53 8 53 13 ("2" "Point" "view-position:" "Image" "new")}
        {Lisp-Entry "disabled-image" #f 54 8 54 22 ("2" "Point" "view-position:" "Image" "new")}
        {Lisp-Entry "get-portfolio" #f 62 18 62 31 ("image" "get-portfolio")}
        {Lisp-Entry "set-portfolio" #f 66 18 66 31 ("invalidate-view" "disabled-image" "image" "set-portfolio" "child" "Portfolio" "is?" "if" "let" "portfolio")}
        {Lisp-Entry "get-image-name" #f 73 18 73 32 ("image" "get-image-name")}
        {Lisp-Entry "set-image-name" #f 77 18 77 32 ("invalidate-view" "image" "set-image-name" "default-disabled-resource" "set-disabled-image-name" "get-disabled-image-name" "not" "when" "name")}
        {Lisp-Entry "get-disabled-image-name" #f 84 18 84 41 ("disabled-image" "get-image-name")}
        {Lisp-Entry "set-disabled-image-name" #f 88 18 88 41 ("invalidate-view" "disabled-image" "set-image-name" "name")}
        {Lisp-Entry "preload-images" #f 93 18 93 32 ("disabled-image" "image" "preload-image")}
        {Lisp-Entry "draw-tool" #f 103 11 103 20 ("enabled?:" "image" "disabled-image" "draw" "not" "get-enabled?" "enabled?" "1" "2" "pushed" "'pushed" "get-state" "eq?" "if" "offset" "let" "context" "surface")}}}})
"Image-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "image" "Image-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.image.Image-View" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Image-View" #f 50 7 50 17 ("Document" "View")
        {Lisp-Entry "icon" #f 53 12 53 16 ("set-icon" "get-icon")}
        {Lisp-Entry "portfolio" #f 54 12 54 21 ("set-portfolio" "get-portfolio")}
        {Lisp-Entry "image-name" #f 55 12 55 22 ("set-image-name" "get-image-name")}
        {Lisp-Entry "moniker" #f 56 12 56 19 ("set-moniker" "get-moniker")}
        {Lisp-Entry "view-position" #f 57 12 57 25 ("set-view-position" "get-view-position" "0" "Point")}
        {Lisp-Entry "view-size" #f 58 12 58 21 ("set-view-size" "get-view-size")}
        {Lisp-Entry "mode" #f 59 12 59 16 ("set-mode" "get-mode")}
        {Lisp-Entry "image" #f 62 8 62 13 ("Image" "new")}
        {Lisp-Entry "dragging?" #f 63 8 63 17 ()}
        {Lisp-Entry "base-position" #f 64 8 64 21 ()}
        {Lisp-Entry "controller" #f 65 8 65 18 ()}
        {Lisp-Entry "save-content" #f 68 11 68 23 ("moniker")}
        {Lisp-Entry "default-extension" #f 69 11 69 28 ()}
        {Lisp-Entry "extensions" #f 70 11 70 21 ()}
        {Lisp-Entry "focus-document" #f 71 11 71 25 ()}
        {Lisp-Entry "current-history-item" #f 72 11 72 31 ()}
        {Lisp-Entry "compare-moniker" #f 73 11 73 26 ("moniker")}
        {Lisp-Entry "external-name" #f 76 16 76 29 ("image-view" "'image-view" "rest")}
        {Lisp-Entry "destroy" #f 80 11 80 18 ("nextmethod" "image" "close" "controller" "when")}
        {Lisp-Entry "install-in-host" #f 92 11 92 26 ("centered" "'centered" "set-mode" "set-view-size" "set-size" "get-size" "size" "let" "nextmethod" "host")}
        {Lisp-Entry "size-change" #f 100 11 100 22 ("update-image" "set-view-size" "nextmethod" "size")}
        {Lisp-Entry "host-workspaces" #f 106 11 106 26 ("image")}
        {Lisp-Entry "get-controller" #f 115 11 115 25 ("new-controller" "set!" "controller" "unless")}
        {Lisp-Entry "new-controller" #f 121 11 121 25 ("self" "Document-Controller" "new")}
        {Lisp-Entry "install-scroller?" #f 125 11 125 28 ()}
        {Lisp-Entry "get-moniker" #f 129 11 129 22 ("get-controller" "get-moniker")}
        {Lisp-Entry "set-moniker" #f 133 11 133 22 ("get-controller" "image" "set-moniker" "moniker")}
        {Lisp-Entry "load-content" #f 138 11 138 23 ("invalidate-view" "image" "set-moniker" "moniker")}
        {Lisp-Entry "verify-reload" #f 143 11 143 24 ()}
        {Lisp-Entry "reload-moniker" #f 147 11 147 25 ("moniker")}
        {Lisp-Entry "get-modified?" #f 151 11 151 24 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 155 11 155 24 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "update-status" #f 159 11 159 24 ("get-controller" "update-status")}
        {Lisp-Entry "update-moniker-time" #f 163 11 163 30 ("get-controller" "update-moniker-time" "moniker")}
        {Lisp-Entry "tool-update" #f 167 11 167 22 ("tool?")}
        {Lisp-Entry "console-update" #f 171 11 171 25 ("console?")}
        {Lisp-Entry "scrollee-size" #f 180 11 180 24 ("error?:" "image" "get-size")}
        {Lisp-Entry "draw" #f 189 11 189 15 ("0" "draw-at" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-at" #f 193 29 193 36 ("draw-image" "get-size" "size" "size:" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-image" #f 197 11 197 21 ("image" "draw" "enabled?" "enabled?:" "get-size" "size" "size:" "v" "h" "context" "surface")}
        {Lisp-Entry "mouse-down" #f 206 11 206 21 ("acquire-capture" "base-position" "dragging?" "set!" "scroller" "when" "pos")}
        {Lisp-Entry "drag-move" #f 213 11 213 20 ("get-v" "get-h" "move-figure" "base-position" "-" "delta" "let" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" #f 219 11 219 18 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "get-icon" #f 230 18 230 26 ("image" "get-icon")}
        {Lisp-Entry "set-icon" #f 234 18 234 26 ("invalidate-view" "image" "set-icon" "icn")}
        {Lisp-Entry "get-portfolio" #f 239 18 239 31 ("image" "get-portfolio")}
        {Lisp-Entry "set-portfolio" #f 243 18 243 31 ("invalidate-view" "child" "Portfolio" "is?" "if" "image" "set-portfolio" "pf")}
        {Lisp-Entry "get-image-name" #f 248 18 248 32 ("image" "get-image-name")}
        {Lisp-Entry "set-image-name" #f 252 18 252 32 ("invalidate-view" "image" "set-image-name" "name")}
        {Lisp-Entry "get-view-position" #f 257 18 257 35 ("image" "get-view-position")}
        {Lisp-Entry "set-view-position" #f 261 18 261 35 ("invalidate-view" "image" "set-view-position" "pos")}
        {Lisp-Entry "get-view-size" #f 266 18 266 31 ("image" "get-view-size")}
        {Lisp-Entry "set-view-size" #f 270 18 270 31 ("invalidate-view" "image" "set-view-size" "s")}
        {Lisp-Entry "get-mode" #f 275 18 275 26 ("mode")}
        {Lisp-Entry "set-mode" #f 279 18 279 26 ("update-image" "image" "set-mode" "md")}
        {Lisp-Entry "set-handle" #f 284 18 284 28 ("invalidate-view" "image" "set-handle" "handle")}
        {Lisp-Entry "cursor-update" #f 294 11 294 24 (":arrow" ":finger" "scroller" "if" "set-cursor" "pos")}
        {Lisp-Entry "get-context-menu" #f 298 11 298 27 ("Image-Menu" "new")}
        {Lisp-Entry "on-change-mode" #f 302 11 302 25 ("update-image" "get-sender" "get-name" "image" "set-mode" "evt")}
        {Lisp-Entry "update-image" #f 307 18 307 30 ("invalidate-view" "image" "update-image")}
        {Lisp-Entry "save-session" #f 317 11 317 23 ("Opened-Windows" "'Opened-Windows" "properties" "push-property" "get-size" "size:" "get-position" "position:" "get-moniker" "moniker:" "external-name" "list" "info" "get-host" "host" "let*")}
        {Lisp-Entry "preload-image" #f 333 18 333 31 ("image" "preload-image")}
        {Lisp-Entry "get-row-instance" #f 342 11 342 27 ("nextmethod" "else" "String-Row" "new" "image-name" "field-name" "case" "property")}}
      {Lisp-Entry "Image-Menu" #f 353 7 353 17 ("stretched" "filled" "tiled" "on-change-mode" ":focus" "Event-Handler" "action-handler:" "title:" "centered" "name:" "Context-Menu")}}})
"Image-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Image-Workspace.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Image-Workspace" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Image-Workspace" #f 46 7 46 22 ("Output-Log" "Search-Results" "Properties-Manager" "Console-Manager" "second" "Favorites-Manager" "Image-Browser" "model-name:" "selection" "-31" "vert" "5" "Rect" "insets:" "20" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "Image-View" "frame-model:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 69 11 69 23 ("image" "'image")}}}})
"Imaging"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "image" "Imaging.jazz"} 1226584788
    {Lisp-Entry "Imaging" #f 37 9 37 16 ("jazz")}})
"Import-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Import-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Import-Entry" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Import-Entry" #f 45 7 45 19 ("Hierarchical-Entry")
        {Lisp-Entry "present-name" #f 48 11 48 23 ("qualified" "join")}
        {Lisp-Entry "get-image" #f 52 11 52 20 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" #f 61 11 61 25 ("references" "update-index" "key" "function" "for-each" "references-index" "definitions-index")}}}})
"Indented-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "display" "Indented-Column.jazz"} 1226584781
    {Lisp-Entry "jazz.library.display.Indented-Column" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Indented-Column" #f 44 7 44 22 ("Display-Column")
        {Lisp-Entry "indentation" #f 47 8 47 19 ()}
        {Lisp-Entry "use-contouring?" #f 48 8 48 23 ()}
        {Lisp-Entry "max-data" #f 49 8 49 16 ("0")}
        {Lisp-Entry "max-width" #f 50 8 50 17 ("0")}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("use-contouring?~self" "indentation~self" "set!" "nextmethod" "apply" "others" "use-contouring?" "2" "indentation" "bind-keywords" "rest" "displayer")}
        {Lisp-Entry "get-indentation" #f 70 18 70 33 ("indentation")}
        {Lisp-Entry "set-indentation" #f 74 18 74 33 ("indentation" "set!" "value")}
        {Lisp-Entry "get-use-contouring?" #f 78 18 78 37 ("use-contouring?")}
        {Lisp-Entry "set-use-contouring?" #f 82 18 82 37 ("use-contouring?" "set!" "value")}
        {Lisp-Entry "put-data" #f 91 11 91 19 ("cons" "factory" "put" "0" "level" "data")}
        {Lisp-Entry "empty-replacement" #f 95 11 95 28 ("0" "cons" "previous-data" "previous-column")}
        {Lisp-Entry "prepare-print" #f 104 11 104 24 ("minimum" "content" "+" "max-width" "max" "max-data" "set!" "indentation" "*" "indent" "length" "either" "let*" "data" "level" "bind" "info" "function" "for-each" "nextmethod")}
        {Lisp-Entry "print-to" #f 118 11 118 19 ("border-after" "0" "border" "format" "get-use-contouring?" "Indented-Column" "is?" "and" "puc?" "max-width" "max-data" "-" "use-contouring?" "if" "padding" "indentation" "*" "indent" "length" "either" "let*" "data" "level" "bind" "printer" "previous-data" "previous-column" "info")}}}})
"Indented-Column-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "display" "Indented-Column-Preferences.jazz"} 1226584781
    {Lisp-Entry "jazz.library.display.Indented-Column-Preferences" #f 37 9 37 57 ("jazz")
      {Lisp-Entry "Indented-Column-Preferences" #f 46 7 46 34 ("Bitmap-Resource" "icon:" "Column-Preferences")
        {Lisp-Entry "indentation" #f 49 12 49 23 ("generate" "2")}
        {Lisp-Entry "use-contouring?" #f 50 12 50 27 ("generate")}
        {Lisp-Entry "column-class" #f 62 11 62 23 ("Indented-Column")}
        {Lisp-Entry "new-column" #f 66 11 66 21 ("use-contouring?" "use-contouring?:" "indentation" "indentation:" "minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Indented-Column" "new" "display")}
        {Lisp-Entry "get-row-instance" #f 75 11 75 27 ("nextmethod" "else" "Boolean-Row" "new" "use-contouring?" "field-name" "case" "property")}}}})
"Index-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Index-Tree.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Index-Tree" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Index-Tree" #f 47 7 47 17 ("kind" "275" "location" "toplevel-controls?:" "100" "width:" "title:" "name:" "on-selection-change" ":self" "Event-Handler" "selection-handler:" "can-select-empty?:" "multiple-selection?:" "row" "selection-mode:" ":icons" "portfolio:" "component" "filled-column:" "Details-Tree")
        {Lisp-Entry "selection-changed" #f 62 11 62 28 ("focus?" "force-parent?" "origin" "old" "component")}
        {Lisp-Entry "on-designer" #f 71 11 71 22 ("update" ":property-change" ":child-remove" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "update" #f 82 11 82 17 ("get-presentation" "key:" "collect-components" "<" "sort" "insert-component" "component" "for-each" "client" "when" "remove-every-row" "function" "with-update-locked" "rest")}
        {Lisp-Entry "collect-components" #f 92 11 92 29 ("cons" "set!" "indexable?" "when" "level" "component" "function" "client" "for-each-descendant" "list" "let")}
        {Lisp-Entry "insert-component" #f 101 11 101 27 ("user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "class-of" "get-class-presentation" "kind" "present-location" "location" "get-component-image" "image" "get-presentation" "title" "let" "recursive?" "father" "component")}}}})
"Indexed-Catalog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "catalog" "Indexed-Catalog.jazz"} 1227444296
    {Lisp-Entry "jazz.catalog.catalog.Indexed-Catalog" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Indexed-Catalog" #f 46 7 46 22 ("Filing-Catalog")
        {Lisp-Entry "directories" #f 49 8 49 19 ()}
        {Lisp-Entry "extensions" #f 50 8 50 18 ()}
        {Lisp-Entry "char-encoding" #f 51 8 51 21 ()}
        {Lisp-Entry "heuristics" #f 52 8 52 18 ()}
        {Lisp-Entry "recursive?" #f 53 8 53 18 ()}
        {Lisp-Entry "references?" #f 54 8 54 19 ()}
        {Lisp-Entry "content-index" #f 55 8 55 21 ()}
        {Lisp-Entry "definitions-index" #f 56 8 56 25 ()}
        {Lisp-Entry "references-index" #f 57 8 57 24 ()}
        {Lisp-Entry "initialize" #f 60 11 60 21 ("references-index~self" "definitions-index~self" "equal?" "test:" "make-table" "content-index~self" "references?~self" "recursive?~self" "heuristics~self" "char-encoding~self" "extensions~self" "directories~self" "set!" "nextmethod" "report?" "report?:" "references?" "active?" "recursive?" "heuristics" "char-encoding" "extensions" "directories" "file" "name")}
        {Lisp-Entry "get-directories" #f 78 18 78 33 ("directories")}
        {Lisp-Entry "get-extensions" #f 82 26 82 40 ("extensions")}
        {Lisp-Entry "get-char-encoding" #f 86 26 86 43 ("char-encoding")}
        {Lisp-Entry "get-heuristics" #f 90 26 90 40 ("heuristics")}
        {Lisp-Entry "get-recursive?" #f 94 18 94 32 ("recursive?")}
        {Lisp-Entry "get-references?" #f 98 18 98 33 ("references?")}
        {Lisp-Entry "get-content-index" #f 102 18 102 35 ("content-index")}
        {Lisp-Entry "get-definitions-index" #f 106 18 106 39 ("definitions-index")}
        {Lisp-Entry "get-references-index" #f 110 18 110 38 ("references-index")}
        {Lisp-Entry "get-file-definitions" #f 114 18 114 38 ("content-index" "table-ref" "name")}
        {Lisp-Entry "get-file-entry" #f 118 11 118 25 ("get-base" "get-file-definitions" "get-file" "pathname=?" "definition" "function" "find-if" "file")}
        {Lisp-Entry "get-statistics" #f 124 18 124 32 ("format-plural" "format" "references-index" "r" "definitions-index" "table-length" "d" "content-index" "count-file-entries" "f" "let")}
        {Lisp-Entry "count-file-entries" #f 134 11 134 29 ("length" "increase!" "file-entries" "name" "function" "iterate-table" "0" "count" "let" "content-index")}
        {Lisp-Entry "table-info" #f 142 11 142 21 ("table-length" "format" "table")}
        {Lisp-Entry "get-entry-time" #f 147 11 147 25 ("get-time" "definition")}
        {Lisp-Entry "update-entry" #f 151 11 151 23 ("references-index" "definitions-index" "update-indexes" "entry")}
        {Lisp-Entry "add-entry" #f 155 11 155 20 ("content-index" "table-add" "entry" "name")}
        {Lisp-Entry "activate" #f 164 11 164 19 ("report?:" "load-content")}
        {Lisp-Entry "deactivate" #f 168 11 168 21 ()}
        {Lisp-Entry "load-content" #f 177 18 177 30 ("set!" "update-catalog-indexes" "content-index" "table-load" "function" "with-jazz-readtable" "user-message" "file" "exists?" "get-active?" "loaded?" "not" "and" "when" "report?" "report?:")}
        {Lisp-Entry "update-catalog-indexes" #f 190 11 190 33 ("references-index" "definitions-index" "update-indexes" "self" "set-catalog" "file-definition" "for-each" "definitions" "class-name" "function" "content-index" "iterate-table" "user-message" "when" "report?")}
        {Lisp-Entry "save" #f 206 11 206 15 ("set-modified?" "save-content" "name" "user-message" "modified?" "when")}
        {Lisp-Entry "save-content" #f 214 11 214 23 ("set!" "print-catalog" "definition" "first?" "let" "format" "not-null?" "when" "definitions" "name" "bind" "info" "for-each" "printer" "function" "platform-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "file" "create-directories" "car" "key:" "string<?" "sort" "sorted" "content-index" "table-keys/values" "all" "let*")}
        {Lisp-Entry "update" #f 239 11 239 17 ("reset-marks" "sweep" "scan" "processed" "let" "name" "user-message" "when" "set-active?" "report?" "report?:")}
        {Lisp-Entry "update-file" #f 252 18 252 29 ("sweep" "process-file" "prog1" "set-marked?" "when" "get-start" "get-row" "user-message" "err" "Parse-Error" "catch" "get-marked?" "and" "marked?" "get-file-entry" "entry" "let*" "set-active?" "file")}
        {Lisp-Entry "reset-marks" #f 267 11 267 22 ("set-marked?" "file-definition" "for-each" "definitions" "class-name" "function" "content-index" "iterate-table")}
        {Lisp-Entry "Zip-Extensions" #f 280 14 280 28 ()}
        {Lisp-Entry "scan-directories" #f 284 11 284 27 ("get-list" "for-each" "Directory-Group" "directories" "is?" "if" "recursive?" "recursive?:" "scan-directory" "increase!" "dir" "function" "scandir" "0" "processed" "let*")}
        {Lisp-Entry "Parser-Associations" #f 295 14 295 33 ("Scheme-Parser" "jazz.language.scheme" "Python-Parser" "jazz.language.python" "Properties-Parser" "jazz.language.properties" "Lua-Parser" "jazz.language.lua" "JavaScript-Parser" "jazz.language.javascript" "Java-Parser" "jazz.language.java" "Jazz-Parser" "jazz.language.jazz" "CSS-Parser" "jazz.language.css" "C-Parser" "jazz.language.c" "CommonLisp-Parser" "jazz.language.commonlisp")}
        {Lisp-Entry "get-parser-class" #f 308 11 308 27 ("cadr" "module-autoload" "car" "autoload-info" "when" "ci=?" "member?" "extensions" "ext" "function" "test:" "Parser-Associations" "rassociate" "info" "let" "extension")}
        {Lisp-Entry "get-parser" #f 318 11 318 21 ("references?" "references?:" "get-heuristics" "heuristics:" "char-encoding" "char-encoding:" "self" "new" "when" "get-parser-class" "class" "let" "extension")}
        {Lisp-Entry "scan-file?" #f 324 11 324 21 ("get-parser-class" "ci=?" "test:" "member?" "not" "or" "and" "get-extensions" "extensions" "get-extension" "extension" "let" "file")}
        {Lisp-Entry "scan-file" #f 331 11 331 20 ("get-parser" "parse" "scan-zip-file" "ci=?" "test:" "Zip-Extensions" "member?" "if" "get-extension" "extension" "let" "user-message" "time" "file")}
        {Lisp-Entry "scan-zip-file" #f 339 11 339 24 ("get-output" "catalog" "Zip-File-Entry" "parse-zipped" "put" "user-message" "get-entry" "entry" "Zipped" "zipped" "let*" "when" "extract-extension" "get-parser" "parser" "size" "filename" "function" "iterate-files" "Unzip-File" "unzip" "with-closed" "List-Factory" "new" "entries" "let" "time" "file")}
        {Lisp-Entry "sweep" #f 359 11 359 16 ("references-index" "definitions-index" "marked?" "content-index" "sweep-table")}
        {Lisp-Entry "marked?" #f 365 11 365 18 ("get-file-definition" "get-marked?" "definition")}
        {Lisp-Entry "sweep-table" #f 369 11 369 22 ("table-set!" "set-modified?" "not" "cddr" "set-cdr!" "set-marked?" "set!" "begin" "if" "car" "definition" "while" "cdr" "list" "previous" "let" "not-null?" "when" "definitions" "class-name" "function" "iterate-table" "reset?" "marked?" "table")}
        {Lisp-Entry "get-definitions" #f 395 11 395 26 ("canonicalize-name" "definitions-index" "table-ref" "name")}
        {Lisp-Entry "search-definitions" #f 399 11 399 29 ("get-output" "put-sequence" "->string" "search" "when" "definitions" "name" "function" "definitions-index" "iterate-table" "List-Factory" "new" "fact" "let" "get-definitions" "not" "and" "if" "ignore-case?" "ignore-case?:" "whole-words?" "whole-words?:" "target")}
        {Lisp-Entry "get-references" #f 410 11 410 25 ("canonicalize-name" "references-index" "table-ref" "name")}
        {Lisp-Entry "get-completions" #f 414 11 414 26 ("references-index" "definitions-index" "table-complete" "either" "name")}
        {Lisp-Entry "canonicalize-name" #f 419 29 419 46 ("->string" "name")}
        {Lisp-Entry "get-qualified-category" #f 425 18 425 40 ("get-definitions" "get-qualified" "=" "get-category-package" "package" "Category-Entry" "is?" "and" "definition" "function" "find-if" "butlast" "qualifier" "last" "name" "let" "qualified")}
        {Lisp-Entry "get-category-package" #f 436 11 436 31 ("get-file-definition" "get-definitions" "Package-Entry" "is?" "function" "find-if" "definition")}
        {Lisp-Entry "table-complete" #f 447 11 447 25 ("cons" "set!" "compare-n" "when" "value" "name" "function" "iterate-table" "result" "cardinality" "length" "let" "string" "table")}}}})
"Indexed-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Indexed-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Indexed-Entry" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Indexed-Entry" #f 48 7 48 20 ("Catalog-Entry")
        {Lisp-Entry "name" #f 51 8 51 12 ()}
        {Lisp-Entry "line" #f 52 8 52 12 ()}
        {Lisp-Entry "column" #f 53 8 53 14 ()}
        {Lisp-Entry "definitions" #f 54 8 54 19 ()}
        {Lisp-Entry "references" #f 55 8 55 18 ()}
        {Lisp-Entry "construct-literal" #f 59 16 59 33 ("self" "new" "definitions" "column" "line" "name" "context")}
        {Lisp-Entry "initialize" #f 63 11 63 21 ("self" "set-parent" "definition" "function" "for-each" "references" "definitions" "column" "line" "name" "set!" "nextmethod" "r" "d" "c" "l" "n")}
        {Lisp-Entry "print" #f 75 11 75 16 ("name" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "print-catalog" #f 81 26 81 39 ("print-definitions" "column" "line" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "print-definitions" #f 90 11 90 28 ("definitions" "1" "+" "print-catalog" "definition" "function" "for-each" "printer" "level")}
        {Lisp-Entry "get-file" #f 101 11 101 19 ("file-definition" "get-file")}
        {Lisp-Entry "get-moniker" #f 105 11 105 22 ("file-definition" "root-definition" "either" "get-moniker")}
        {Lisp-Entry "get-title" #f 109 18 109 27 ("name")}
        {Lisp-Entry "get-category-name" #f 113 11 113 28 ("file-definition" "root-definition" "either" "get-category-name")}
        {Lisp-Entry "get-name" #f 117 11 117 19 ("name")}
        {Lisp-Entry "get-line" #f 121 11 121 19 ("line")}
        {Lisp-Entry "get-column" #f 125 11 125 21 ("column")}
        {Lisp-Entry "get-definitions" #f 129 11 129 26 ("definitions")}
        {Lisp-Entry "add-definition" #f 133 18 133 32 ("list" "append!" "definitions" "set!" "definition")}
        {Lisp-Entry "get-references" #f 137 18 137 32 ("references")}
        {Lisp-Entry "add-reference" #f 141 18 141 31 ("cons" "set!" "references" "member?" "unless" "reference")}
        {Lisp-Entry "get-catalog" #f 146 18 146 29 ("file-definition" "get-catalog")}
        {Lisp-Entry "set-root-definition" #f 150 11 150 30 ("definitions" "set-root-definition" "definition" "function" "for-each" "nextmethod" "def")}
        {Lisp-Entry "set-file-definition" #f 157 11 157 30 ("definitions" "set-file-definition" "definition" "function" "for-each" "nextmethod" "def")}
        {Lisp-Entry "update-indexes" #f 169 11 169 25 ("definitions" "update-indexes" "definition" "function" "for-each" "name" "update-index" "references-index" "definitions-index")}
        {Lisp-Entry "update-index" #f 176 21 176 33 ("self" "table-add" "when" "key" "index")}
        {Lisp-Entry "present" #f 186 11 186 18 ("format" "references" "get-category-name" "definitions" "mode" "case" "present-name")}
        {Lisp-Entry "present-name" #f 194 11 194 23 ("present-noname" "get-name" "either")}
        {Lisp-Entry "present-noname" #f 198 29 198 43 ()}
        {Lisp-Entry "file-name" #f 207 11 207 20 ("get-name" "file")}
        {Lisp-Entry "entry-range" #f 211 29 211 40 ("name" "->string" "cardinality" "+" "Cell" "Range$Cell$" "new" "column" "line" "essay")}
        {Lisp-Entry "edit" #f 215 11 215 15 ("selection:" "char-encoding:" "edit-document" "entry-range" "selection" "get-catalog" "get-char-encoding" "char-encoding" "get-application" "appl" "error" "exists?" "not" "if" "get-moniker" "moniker" "let" "activate-focus?" "activate-focus?:" "workspace" "workspace:")}
        {Lisp-Entry "find-source" #f 225 11 225 22 ("get-stage" "get-children" "file-name" "string=?" "get-moniker" "file" "get-guest" "guest" "Frame-Host" "is?" "and" "frame" "function" "find-if" "source-frame-type" "type" "let" "name")}
        {Lisp-Entry "source-frame-type" #f 237 29 237 46 ()}}}})
"Info-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Info-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Info-Row" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Info-Row" #f 45 7 45 15 ("Value-Row")
        {Lisp-Entry "get-filter-name" #f 53 16 53 31 ("infos" "'infos")}
        {Lisp-Entry "get-filter-rank" #f 57 16 57 31 ("0")}
        {Lisp-Entry "get-filter-image" #f 61 16 61 32 ("Bitmap-Resource")}
        {Lisp-Entry "present" #f 70 11 70 18 ("format" "Locales" "is?" "if" "value")}
        {Lisp-Entry "edit" #f 81 11 81 15 ()}
        {Lisp-Entry "end-edition" #f 85 11 85 22 ()}
        {Lisp-Entry "save-edition" #f 89 11 89 23 ()}
        {Lisp-Entry "select-editor" #f 93 11 93 24 ()}
        {Lisp-Entry "set-edited-modified?" #f 97 11 97 31 ("flag")}
        {Lisp-Entry "get-menu-class" #f 106 11 106 25 ()}}}})
"Info-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Info-Style.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Info-Style" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Info-Style" #f 45 7 45 17 ("initialize" "what" "highlight" "color" "font" "alignment" "Text-Style")
        {Lisp-Entry "get-width" #f 57 11 57 20 ("16")}
        {Lisp-Entry "get-context-width" #f 61 11 61 28 ("get-width" "info-value" "->string" "font" "text-width" ":printing?" "getf" "if" "context")}
        {Lisp-Entry "propagate?" #f 72 11 72 21 ()}
        {Lisp-Entry "scan" #f 81 11 81 15 ("default-scan" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "wrap" #f 90 11 90 15 ("get-context-width" "+" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "info-icon" #f 100 11 100 20 ("time" "date" "count" "no" "Bitmap-Resource" "filename" "what" "case")}
        {Lisp-Entry "info-value" #f 109 11 109 21 ("print-time:" "time" "print-date:" "date" "page-count:" "count" "page-no:" "1" "+" "no" "filename:" "getf" "filename" "what" "case" "context")}
        {Lisp-Entry "draw-style" #f 123 11 123 21 ("+" "get-application" "get-icons-cache" "draw-image" "info-icon" "icon" "16" "justify-element" "top" "get-width" "width" "let" "info-value" "->string" "nextmethod" "printing?:" "getf" "if" "enabled?" "left" "tabs" "line-height" "v" "h" "string" "context" "surface")}}}})
"Inspector"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "inspector" "Inspector.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.inspector.Inspector" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Inspector" #f 49 7 49 16 ("title:" "name" "name:" ":icons" "portfolio:" "row" "selection-mode:" "multiple-selection?:" "value" "filled-column:" "Tree-View")
        {Lisp-Entry "process" #f 52 12 52 19 ("set-process" "get-process")}
        {Lisp-Entry "client" #f 53 12 53 18 ("set-client" "get-client")}
        {Lisp-Entry "sort?" #f 54 12 54 17 ("set-sort?" "get-sort?")}
        {Lisp-Entry "get-process" #f 68 18 68 29 ("process")}
        {Lisp-Entry "set-process" #f 72 18 72 29 ("process" "set!" "value")}
        {Lisp-Entry "get-client" #f 76 18 76 28 ("client")}
        {Lisp-Entry "set-client" #f 80 18 80 28 ("present-client" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "get-sort?" #f 86 18 86 27 ("sort?")}
        {Lisp-Entry "set-sort?" #f 90 18 90 27 ("sort?" "set!" "value")}
        {Lisp-Entry "update-row" #f 99 11 99 21 ("address" "debuggee" "inspect" "serial->object" "inspect-value" "present" "get-local-process" "either" "process" "let" "get-user-data" "kind" "serial" "bind" "row")}
        {Lisp-Entry "present-client" #f 110 11 110 25 ("inspect" "root-row" "present" "kind" "data" "bind" "when" "remove-every-row" "function" "with-update-locked" "client")}
        {Lisp-Entry "present" #f 119 11 119 18 ("cons" "user-data:" "Tree-Label" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "state:" "father:" "add-row" "collapsed" "'collapsed" "dynamic" "'dynamic" "if" "state" "let" "kind" "more?" "presented" "address" "name" "bind-optionals" "info" "for-each" "function" "with-update-locked" "values" "row")}
        {Lisp-Entry "inspect" #f 134 26 134 33 ("inspect-value" ":value" "case" "kind" "data")}}}})
"Inspector-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "inspector" "Inspector-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.inspector.Inspector-View" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Inspector-View" #f 48 7 48 21 ("261" "value" "170" "width:" "name" "row" "selection-mode:" "inspector" "content" "name:" "flat?:" "hscroll?:" "vscroll?:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "process" #f 51 12 51 19 ("set-process" "get-process")}
        {Lisp-Entry "client" #f 52 12 52 18 ("set-client" "get-client")}
        {Lisp-Entry "host-title" #f 71 16 71 26 ()}
        {Lisp-Entry "host-position" #f 75 16 75 29 ("60" "378" "Point")}
        {Lisp-Entry "host-size" #f 79 16 79 25 ("641" "446" "Dimension")}
        {Lisp-Entry "get-process" #f 88 18 88 29 ("inspector" "'inspector" "locate" "get-process")}
        {Lisp-Entry "set-process" #f 92 18 92 29 ("inspector" "'inspector" "locate" "set-process" "process")}
        {Lisp-Entry "get-client" #f 96 18 96 28 ("inspector" "'inspector" "locate" "get-client")}
        {Lisp-Entry "set-client" #f 100 18 100 28 ("inspector" "'inspector" "locate" "set-client" "update-title" "client")}
        {Lisp-Entry "Max-Title" #f 110 14 110 23 ("50")}
        {Lisp-Entry "update-title" #f 114 11 114 23 ("0" "subseq" "set-title" "Max-Title" "cardinality" "<" "if" "car" "format" "title" "let" "client")}}}})
"Instance-Init-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Instance-Init-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Instance-Init-Entry" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Instance-Init-Entry" #f 45 7 45 26 ("Hierarchical-Entry")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("self" "new" "references" "column" "line" "name" "modifiers" "context")}
        {Lisp-Entry "present-name" #f 53 11 53 23 ()}
        {Lisp-Entry "print-catalog" #f 57 11 57 24 ("references" "column" "line" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 64 11 64 20 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" #f 73 11 73 25 ("references" "update-index" "key" "function" "for-each" "references-index" "definitions-index")}}}})
"Integer-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Integer-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Integer-Domain" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Integer-Domain" #f 45 7 45 21 ("Domain")
        {Lisp-Entry "validate-value" #f 53 11 53 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "integer?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 63 11 63 18 ("->string" "not" "if" "value")}}}})
"Integer-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Integer-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Integer-Row" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Integer-Row" #f 45 7 45 18 ("Value-Row")
        {Lisp-Entry "present" #f 53 11 53 18 ("->string" "value")}
        {Lisp-Entry "get-edited-value" #f 62 11 62 27 ("parse-integer" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"Integrity-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "integrity" "Integrity-Constraint.jazz"} 1226584781
    {Lisp-Entry "jazz.library.integrity.Integrity-Constraint" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Integrity-Constraint" #f 44 7 44 27 ("Object")
        {Lisp-Entry "register-constraints" #f 52 31 52 51 ("manager")}
        {Lisp-Entry "validate" #f 61 26 61 34 ("manager" "context" "client" "root" "component")}}}})
"Integrity-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "integrity" "Integrity-Manager.jazz"} 1226584781
    {Lisp-Entry "jazz.library.integrity.Integrity-Manager" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Integrity-Manager" #f 44 7 44 24 ("Object")
        {Lisp-Entry "constraints" #f 47 8 47 19 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("setup-constraints" "nextmethod")}
        {Lisp-Entry "print" #f 55 11 55 16 ("format-plural" "format-cardinality" "format" "constraints" "length" "entries" "let" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "setup-constraints" #f 69 11 69 28 ("get-output" "register-constraints" "List-Factory" "new" "constraints" "set!")}
        {Lisp-Entry "register-constraints" #f 75 26 75 46 ()}
        {Lisp-Entry "register-constraint" #f 79 18 79 37 ("list" "constraints" "put" "root?" "root?:" "model" "constraint")}
        {Lisp-Entry "validate-integrity" #f 88 18 88 36 ("validate-all" "clear-violations" "reporter" "reporter:" "context" "context:" "root")}
        {Lisp-Entry "validate-all" #f 93 29 93 41 ("validate-hierarchy" "reporter" "context" "root")}
        {Lisp-Entry "validate-hierarchy" #f 97 29 97 47 ("get-children" "validate-hierarchy" "child" "function" "for-each" "stop-descent" "'stop-descent" "validate" "eq?" "unless" "report-progress" "when" "reporter" "context" "client" "root" "component")}
        {Lisp-Entry "validate" #f 106 18 106 26 ("constraints" "continuation-return" "validate" "branch-installed?" "is?" "null?" "or" "and" "when" "root?" "model" "constraint" "bind" "info" "for-each" "return" "function" "continuation-capture" "stop-descent" "'stop-descent" "self" "validate-component" "eq?" "if" "validation-context" "new-context" "let" "context" "client" "root" "component")}
        {Lisp-Entry "validation-context" #f 121 29 121 47 ("context" "root" "component")}
        {Lisp-Entry "report-progress" #f 125 29 125 44 ("get-name" "user-message" "test-cancelled" "reporter" "root" "component")}
        {Lisp-Entry "add-violation" #f 135 26 135 39 ("add-violation" "cons" "if" "set-path-presentation" "set-path" "set-branch-presentation" "set-branch" "present-path" "presentation" "path" "receive" "get-presentation" "branch-presentation" "get-name" "essay" "branch-name" "get-active-branch" "branch" "let*" "client" "root" "component" "violation")}
        {Lisp-Entry "clear-violations" #f 147 26 147 42 ("clear-violations" "root")}}}})
"Integrity-Violation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "integrity" "Integrity-Violation.jazz"} 1226584781
    {Lisp-Entry "jazz.library.integrity.Integrity-Violation" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Integrity-Violation" #f 44 7 44 26 ("Object")
        {Lisp-Entry "message" #f 47 8 47 15 ()}
        {Lisp-Entry "branch" #f 48 8 48 14 ()}
        {Lisp-Entry "branch-presentation" #f 49 8 49 27 ()}
        {Lisp-Entry "path" #f 50 8 50 12 ()}
        {Lisp-Entry "path-presentation" #f 51 8 51 25 ()}
        {Lisp-Entry "property" #f 52 8 52 16 ()}
        {Lisp-Entry "construct-literal" #f 56 16 56 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" #f 60 11 60 21 ("property" "property~self" "path-presentation" "path-presentation~self" "path" "path~self" "branch-presentation" "branch-presentation~self" "branch" "branch~self" "message~self" "set!" "nextmethod" "message" "message:")}
        {Lisp-Entry "print" #f 75 11 75 16 ("path-presentation" "path" "branch-presentation" "branch" "message" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-branch" #f 90 18 90 28 ("branch")}
        {Lisp-Entry "set-branch" #f 94 18 94 28 ("branch" "set!" "value")}
        {Lisp-Entry "get-branch-presentation" #f 98 18 98 41 ("branch-presentation")}
        {Lisp-Entry "set-branch-presentation" #f 102 18 102 41 ("branch-presentation" "set!" "value")}
        {Lisp-Entry "get-path" #f 106 18 106 26 ("path")}
        {Lisp-Entry "set-path" #f 110 18 110 26 ("path" "set!" "value")}
        {Lisp-Entry "get-path-presentation" #f 114 18 114 39 ("path-presentation")}
        {Lisp-Entry "set-path-presentation" #f 118 18 118 39 ("path-presentation" "set!" "value")}
        {Lisp-Entry "get-property" #f 122 18 122 30 ("property")}
        {Lisp-Entry "set-property" #f 126 18 126 30 ("property" "set!" "value")}
        {Lisp-Entry "get-message" #f 135 26 135 37 ("message")}
        {Lisp-Entry "get-image" #f 144 26 144 35 ("Bitmap-Resource")}
        {Lisp-Entry "present-message" #f 148 26 148 41 ("get-message")}
        {Lisp-Entry "present-location" #f 152 26 152 42 ("join" "path" "get-path" "path-presentation" "either" "location" "let")}}}})
"Interface-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Interface-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Interface-Doc" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Interface-Doc" #f 45 7 45 20 ("Category-Doc")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("definitions:" "doc:" "extends:" "name:" "self" "new" "definitions" "doc" "extends" "name" "context")}
        {Lisp-Entry "get-class-image" #f 58 16 58 31 ("Bitmap-Resource")}}}})
"Interface-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Interface-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Interface-Entry" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Interface-Entry" #f 45 7 45 22 ("Category-Entry")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("self" "new" "definitions" "column" "line" "extends" "name" "modifiers" "context")}
        {Lisp-Entry "print-catalog" #f 53 11 53 24 ("definitions" "1" "+" "print-catalog" "definition" "function" "for-each" "column" "line" "extends" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 64 11 64 20 ("Bitmap-Resource")}
        {Lisp-Entry "insert-ascendants" #f 73 11 73 28 ("extends" "insert-interfaces-list" "father" "tree")}}}})
"Interface-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Interface-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Interface-Preferences" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Interface-Preferences" #f 46 7 46 28 ("print" "tree" "name:" "title:" "Preferences")
        {Lisp-Entry "can-rename-component?" #f 60 11 60 32 ()}
        {Lisp-Entry "can-delete-component?" #f 64 11 64 32 ()}
        {Lisp-Entry "can-move-component?" #f 68 11 68 30 ()}
        {Lisp-Entry "can-copy-component?" #f 72 11 72 30 ()}
        {Lisp-Entry "get-categorized-properties" #f 76 11 76 37 ()}}}})
"Internet-Connection"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "inet" "Internet-Connection.jazz"} 1226584783
    {Lisp-Entry "jazz.library.internet.Internet-Connection" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Internet-Connection" #f 44 7 44 26 ("Object")
        {Lisp-Entry "handle" #f 47 8 47 14 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("destroy-mandatory" "handle" "set!" "error" "not" "if" "open-connection" "hnd" "let" "nextmethod" "password" "password:" "username" "username:" "default-port" "port" "port:" "server" "session")}
        {Lisp-Entry "default-port" #f 59 29 59 41 ()}
        {Lisp-Entry "open-connection" #f 63 29 63 44 ("port" "server" "session")}
        {Lisp-Entry "destroy" #f 67 11 67 18 ("nextmethod" "handle" "InternetCloseHandle")}
        {Lisp-Entry "get-handle" #f 72 18 72 28 ("handle")}}}})
"Internet-Session"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "inet" "Internet-Session.jazz"} 1226584783
    {Lisp-Entry "jazz.library.internet.Internet-Session" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Internet-Session" #f 44 7 44 23 ("Object")
        {Lisp-Entry "handle" #f 47 8 47 14 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("destroy-mandatory" "handle" "set!" "error" "not" "if" "0" "NULL" "INTERNET_OPEN_TYPE_PRECONFIG" "InternetOpen" "hnd" "let" "nextmethod")}
        {Lisp-Entry "destroy" #f 59 11 59 18 ("nextmethod" "handle" "InternetCloseHandle")}
        {Lisp-Entry "get-handle" #f 64 18 64 28 ("handle")}}}})
"Inventory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Inventory" #f 45 7 45 16 ("Object")
        {Lisp-Entry "connection" #f 48 8 48 18 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "connection" "set!" "nextmethod" "conn")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "connection" "close")}
        {Lisp-Entry "get-version" #f 67 26 67 37 ()}
        {Lisp-Entry "type-connection-string" #f 76 26 76 48 ()}
        {Lisp-Entry "get-connection" #f 85 18 85 32 ("connection")}
        {Lisp-Entry "get-tables" #f 94 26 94 36 ()}
        {Lisp-Entry "get-table" #f 98 26 98 35 ("name")}
        {Lisp-Entry "create-table" #f 102 26 102 38 ("name")}
        {Lisp-Entry "append-table" #f 106 26 106 38 ("table")}
        {Lisp-Entry "remove-table" #f 110 26 110 38 ("name")}
        {Lisp-Entry "columns-ordinal-position-consecutive?" #f 114 26 114 63 ()}
        {Lisp-Entry "column-supports-property?" #f 118 26 118 51 ("property" "object")}
        {Lisp-Entry "create-or-modify-view" #f 127 26 127 47 ("append-view" "set-text" "create-view" "new-view" "remove-view" "when" "error?:" "get-view" "view" "with-closed" "text" "name")}
        {Lisp-Entry "get-views" #f 136 26 136 35 ()}
        {Lisp-Entry "get-view" #f 140 26 140 34 ("rest" "name")}
        {Lisp-Entry "create-view" #f 144 26 144 37 ("name")}
        {Lisp-Entry "append-view" #f 148 26 148 37 ("view")}
        {Lisp-Entry "remove-view" #f 152 26 152 37 ("name")}
        {Lisp-Entry "get-relations" #f 161 26 161 39 ()}
        {Lisp-Entry "get-relation" #f 165 26 165 38 ("name")}
        {Lisp-Entry "create-relation" #f 169 26 169 41 ("name")}
        {Lisp-Entry "create-relation-complete" #f 173 26 173 50 ("foreign-fields" "foreign-table" "primary-fields" "primary-table" "name")}
        {Lisp-Entry "append-relation" #f 177 26 177 41 ("new-relation")}
        {Lisp-Entry "remove-relation" #f 181 26 181 41 ("relation-name")}
        {Lisp-Entry "create-or-modify-procedure" #f 190 26 190 52 ("append-procedure" "set-text" "create-procedure" "new-procedure" "remove-procedure" "when" "error?:" "get-procedure" "procedure" "with-closed" "text" "name")}
        {Lisp-Entry "get-procedures" #f 199 26 199 40 ()}
        {Lisp-Entry "get-procedure" #f 203 26 203 39 ("rest" "name")}
        {Lisp-Entry "create-procedure" #f 207 26 207 42 ("name")}
        {Lisp-Entry "append-procedure" #f 211 26 211 42 ("procedure")}
        {Lisp-Entry "remove-procedure" #f 215 26 215 42 ("name")}
        {Lisp-Entry "create-or-modify-trigger" #f 224 26 224 50 ("create-or-modify-trigger" "get-table" "table" "let" "text" "trigger-name" "table-name")}
        {Lisp-Entry "create-or-modify-constraint" #f 229 26 229 53 ("create-or-modify-constraint" "get-table" "table" "let" "exclude-replication?" "checked?" "text" "constraint-name" "table-name")}}}})
"Inventory-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "inventory" "Inventory-Browser.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.inventory.Inventory-Browser" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Inventory-Browser" #f 51 7 51 24 ("329" "width:" "title:" "on-context-menu" "context-menu-handler:" "on-selection-change" "selection-handler:" "show-header?:" "inventory" "shown?:" "header" "content" "flat?:" "hscroll?:" "vscroll?:" "scroller" "on-refresh" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "refresh" "tools" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "connection" #f 55 12 55 22 ("set-connection" "get-connection")}}}})
"Inventory-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory-Column.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory-Column" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Inventory-Column" #f 45 7 45 23 ("Object")
        {Lisp-Entry "inventory" #f 48 8 48 17 ()}
        {Lisp-Entry "parent" #f 49 8 49 14 ()}
        {Lisp-Entry "index-column?" #f 50 8 50 21 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("index-column?~self" "parent~self" "inventory~self" "set!" "nextmethod" "index-column?" "parent" "inventory")}
        {Lisp-Entry "get-inventory" #f 65 18 65 31 ("inventory")}
        {Lisp-Entry "get-parent" #f 69 18 69 28 ("parent")}
        {Lisp-Entry "get-table" #f 73 18 73 27 ("parent")}
        {Lisp-Entry "get-index-column?" #f 77 18 77 35 ("index-column?")}
        {Lisp-Entry "get-default-value" #f 86 26 86 43 ()}
        {Lisp-Entry "set-default-value" #f 90 26 90 43 ("value")}
        {Lisp-Entry "get-default-value-name" #f 94 26 94 48 ()}
        {Lisp-Entry "set-default-value-name" #f 98 26 98 48 ("value")}
        {Lisp-Entry "get-used-defined-datatype" #f 102 26 102 51 ()}
        {Lisp-Entry "get-datatype" #f 106 26 106 38 ()}
        {Lisp-Entry "set-datatype" #f 110 26 110 38 ("value")}
        {Lisp-Entry "get-type" #f 114 26 114 34 ()}
        {Lisp-Entry "get-size" #f 118 26 118 34 ()}
        {Lisp-Entry "set-size" #f 122 26 122 34 ("size")}
        {Lisp-Entry "get-nullable?" #f 126 26 126 39 ()}
        {Lisp-Entry "set-nullable?" #f 130 26 130 39 ("value")}
        {Lisp-Entry "get-validation-rule" #f 134 26 134 45 ()}
        {Lisp-Entry "set-validation-rule" #f 138 26 138 45 ("value")}
        {Lisp-Entry "get-validation-text" #f 142 26 142 45 ()}
        {Lisp-Entry "set-validation-text" #f 146 26 146 45 ("value")}
        {Lisp-Entry "get-allow-zero-length?" #f 150 26 150 48 ()}
        {Lisp-Entry "set-allow-zero-length?" #f 154 26 154 48 ("value")}
        {Lisp-Entry "get-description" #f 158 26 158 41 ()}
        {Lisp-Entry "set-description" #f 162 26 162 41 ("value")}
        {Lisp-Entry "get-display-format" #f 166 26 166 44 ()}
        {Lisp-Entry "set-display-format" #f 170 26 170 44 ("value")}
        {Lisp-Entry "get-ordinal-position" #f 174 26 174 46 ()}
        {Lisp-Entry "set-ordinal-position" #f 178 26 178 46 ("value")}
        {Lisp-Entry "get-auto-increment?" #f 182 26 182 45 ()}
        {Lisp-Entry "set-auto-increment?" #f 186 26 186 45 ("value")}
        {Lisp-Entry "get-title" #f 190 26 190 35 ()}
        {Lisp-Entry "get-scale" #f 194 26 194 35 ()}
        {Lisp-Entry "set-scale" #f 198 26 198 35 ("value")}
        {Lisp-Entry "get-precision" #f 202 26 202 39 ()}
        {Lisp-Entry "set-precision" #f 206 26 206 39 ("value")}
        {Lisp-Entry "get-fixed?" #f 210 26 210 36 ()}
        {Lisp-Entry "get-order" #f 214 26 214 35 ()}
        {Lisp-Entry "get-identity?" #f 218 26 218 39 ()}
        {Lisp-Entry "set-identity?" #f 222 26 222 39 ("value")}
        {Lisp-Entry "get-identity-replication?" #f 226 26 226 51 ()}
        {Lisp-Entry "set-identity-replication?" #f 230 26 230 51 ("value")}
        {Lisp-Entry "get-identity-seed" #f 234 26 234 43 ("0")}
        {Lisp-Entry "set-identity-seed" #f 238 26 238 43 ("value")}
        {Lisp-Entry "get-identity-increment" #f 242 26 242 48 ("0")}
        {Lisp-Entry "set-identity-increment" #f 246 26 246 48 ("value")}
        {Lisp-Entry "get-row-guid-col?" #f 250 26 250 43 ()}
        {Lisp-Entry "get-computed?" #f 254 26 254 39 ()}
        {Lisp-Entry "get-computed-text" #f 258 26 258 43 ()}
        {Lisp-Entry "get-collation" #f 262 26 262 39 ()}}}})
"Inventory-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory-Constraint.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory-Constraint" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Inventory-Constraint" #f 45 7 45 27 ("Object")
        {Lisp-Entry "inventory" #f 48 8 48 17 ()}
        {Lisp-Entry "parent" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-inventory" #f 63 18 63 31 ("inventory")}
        {Lisp-Entry "get-parent" #f 67 18 67 28 ("parent")}
        {Lisp-Entry "get-handle" #f 76 26 76 36 ()}
        {Lisp-Entry "get-title" #f 80 26 80 35 ()}
        {Lisp-Entry "get-text" #f 84 26 84 34 ()}
        {Lisp-Entry "set-text" #f 88 26 88 34 ("value")}
        {Lisp-Entry "get-checked?" #f 92 26 92 38 ()}
        {Lisp-Entry "set-checked?" #f 96 26 96 38 ("value")}
        {Lisp-Entry "get-exclude-replication?" #f 100 26 100 50 ()}
        {Lisp-Entry "set-exclude-replication?" #f 104 26 104 50 ("value")}}}})
"Inventory-Index"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory-Index.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory-Index" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Inventory-Index" #f 45 7 45 22 ("Object")
        {Lisp-Entry "inventory" #f 48 8 48 17 ()}
        {Lisp-Entry "parent" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-inventory" #f 63 18 63 31 ("inventory")}
        {Lisp-Entry "get-parent" #f 67 18 67 28 ("parent")}
        {Lisp-Entry "get-title" #f 76 26 76 35 ()}
        {Lisp-Entry "get-unique?" #f 80 26 80 37 ()}
        {Lisp-Entry "set-unique?" #f 84 26 84 37 ("value")}
        {Lisp-Entry "get-required?" #f 88 26 88 39 ()}
        {Lisp-Entry "get-ignore-nulls?" #f 92 26 92 43 ()}
        {Lisp-Entry "get-fields" #f 96 26 96 36 ()}
        {Lisp-Entry "get-fields/orders" #f 100 26 100 43 ("get-order" "get-title" "list" "field" "function" "map" "get-fields" "fields" "with-closed")}
        {Lisp-Entry "set-fields/orders" #f 107 26 107 43 ("value")}
        {Lisp-Entry "get-ignore-duplicates?" #f 111 26 111 48 ()}
        {Lisp-Entry "get-clustered?" #f 115 26 115 40 ()}
        {Lisp-Entry "get-pad-index?" #f 119 26 119 40 ()}
        {Lisp-Entry "get-recompute-statistics?" #f 123 26 123 51 ()}
        {Lisp-Entry "get-fill-factor" #f 127 26 127 41 ("0")}}}})
"Inventory-Primary-Key"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory-Primary-Key.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory-Primary-Key" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Inventory-Primary-Key" #f 45 7 45 28 ("Object")
        {Lisp-Entry "inventory" #f 48 8 48 17 ()}
        {Lisp-Entry "parent" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-inventory" #f 63 18 63 31 ("inventory")}
        {Lisp-Entry "get-parent" #f 67 18 67 28 ("parent")}
        {Lisp-Entry "get-title" #f 76 26 76 35 ()}
        {Lisp-Entry "get-fields" #f 80 26 80 36 ()}
        {Lisp-Entry "get-fields/orders" #f 84 26 84 43 ("get-order" "get-title" "list" "field" "function" "map" "get-fields" "fields" "with-closed")}
        {Lisp-Entry "get-clustered?" #f 91 26 91 40 ()}
        {Lisp-Entry "get-fill-factor" #f 95 26 95 41 ("0")}}}})
"Inventory-Procedure"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory-Procedure.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory-Procedure" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Inventory-Procedure" #f 45 7 45 26 ("Object")
        {Lisp-Entry "inventory" #f 48 8 48 17 ()}
        {Lisp-Entry "parent" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-inventory" #f 63 18 63 31 ("inventory")}
        {Lisp-Entry "get-parent" #f 67 18 67 28 ("parent")}
        {Lisp-Entry "get-title" #f 76 26 76 35 ()}
        {Lisp-Entry "get-text" #f 80 26 80 34 ()}
        {Lisp-Entry "set-text" #f 84 26 84 34 ("value")}}}})
"Inventory-Relation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory-Relation.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory-Relation" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Inventory-Relation" #f 45 7 45 25 ("Object")
        {Lisp-Entry "inventory" #f 48 8 48 17 ()}
        {Lisp-Entry "parent" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-inventory" #f 63 18 63 31 ("inventory")}
        {Lisp-Entry "get-parent" #f 67 18 67 28 ("parent")}
        {Lisp-Entry "get-title" #f 76 26 76 35 ()}
        {Lisp-Entry "get-primary-table" #f 80 26 80 43 ()}
        {Lisp-Entry "set-primary-table" #f 84 26 84 43 ("value")}
        {Lisp-Entry "get-primary-field-names" #f 88 26 88 49 ()}
        {Lisp-Entry "set-primary-field-names" #f 92 26 92 49 ("value")}
        {Lisp-Entry "get-foreign-table" #f 96 26 96 43 ()}
        {Lisp-Entry "set-foreign-table" #f 100 26 100 43 ("value")}
        {Lisp-Entry "get-foreign-field-names" #f 104 26 104 49 ()}
        {Lisp-Entry "set-foreign-field-names" #f 108 26 108 49 ("value")}
        {Lisp-Entry "get-unique?" #f 112 26 112 37 ()}
        {Lisp-Entry "set-unique?" #f 116 26 116 37 ("value")}
        {Lisp-Entry "get-dont-enforce?" #f 120 26 120 43 ()}
        {Lisp-Entry "get-inherited?" #f 124 26 124 40 ()}
        {Lisp-Entry "get-update-cascade?" #f 128 26 128 45 ()}
        {Lisp-Entry "set-update-cascade?" #f 132 26 132 45 ("value")}
        {Lisp-Entry "get-delete-cascade?" #f 136 26 136 45 ()}
        {Lisp-Entry "set-delete-cascade?" #f 140 26 140 45 ("value")}
        {Lisp-Entry "get-left?" #f 144 26 144 35 ()}
        {Lisp-Entry "set-left?" #f 148 26 148 35 ("value")}
        {Lisp-Entry "get-right?" #f 152 26 152 36 ()}
        {Lisp-Entry "set-right?" #f 156 26 156 36 ("value")}
        {Lisp-Entry "get-checked?" #f 160 26 160 38 ()}
        {Lisp-Entry "get-exclude-replication?" #f 164 26 164 50 ()}}}})
"Inventory-Table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory-Table.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory-Table" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Inventory-Table" #f 45 7 45 22 ("Object")
        {Lisp-Entry "inventory" #f 48 8 48 17 ()}
        {Lisp-Entry "parent" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-inventory" #f 63 18 63 31 ("inventory")}
        {Lisp-Entry "get-parent" #f 67 18 67 28 ("parent")}
        {Lisp-Entry "get-owner" #f 76 26 76 35 ()}
        {Lisp-Entry "set-owner" #f 80 26 80 35 ("value")}
        {Lisp-Entry "get-name" #f 84 26 84 34 ()}
        {Lisp-Entry "get-title" #f 88 26 88 35 ()}
        {Lisp-Entry "get-linked?" #f 92 26 92 37 ()}
        {Lisp-Entry "get-connect" #f 96 26 96 37 ()}
        {Lisp-Entry "set-connect" #f 100 26 100 37 ("value")}
        {Lisp-Entry "get-source-table-name" #f 104 26 104 47 ()}
        {Lisp-Entry "set-source-table-name" #f 108 26 108 47 ("value")}
        {Lisp-Entry "get-validation-rule" #f 112 26 112 45 ()}
        {Lisp-Entry "set-validation-rule" #f 116 26 116 45 ("value")}
        {Lisp-Entry "get-validation-text" #f 120 26 120 45 ()}
        {Lisp-Entry "set-validation-text" #f 124 26 124 45 ("value")}
        {Lisp-Entry "get-description" #f 128 26 128 41 ()}
        {Lisp-Entry "set-description" #f 132 26 132 41 ("value")}
        {Lisp-Entry "get-primary-key" #f 141 26 141 41 ()}
        {Lisp-Entry "create-primary-key" #f 145 26 145 44 ("fields/orders" "name")}
        {Lisp-Entry "remove-primary-key" #f 149 26 149 44 ("name")}
        {Lisp-Entry "append-primary-key" #f 153 26 153 44 ("primary-key")}
        {Lisp-Entry "get-columns" #f 162 26 162 37 ()}
        {Lisp-Entry "get-column" #f 166 26 166 36 ("name")}
        {Lisp-Entry "create-column" #f 170 26 170 39 ("name")}
        {Lisp-Entry "append-column" #f 174 26 174 39 ("column")}
        {Lisp-Entry "remove-column" #f 178 26 178 39 ("name")}
        {Lisp-Entry "get-indexes" #f 187 26 187 37 ()}
        {Lisp-Entry "get-index" #f 191 26 191 35 ("name")}
        {Lisp-Entry "create-index" #f 195 26 195 38 ("name")}
        {Lisp-Entry "append-index" #f 199 26 199 38 ("index")}
        {Lisp-Entry "remove-index" #f 203 26 203 38 ("name")}
        {Lisp-Entry "create-or-modify-trigger" #f 212 26 212 50 ("append-trigger" "set-text" "create-trigger" "new-trigger" "remove-trigger" "when" "error?:" "get-trigger" "trigger" "with-closed" "text" "name")}
        {Lisp-Entry "get-triggers" #f 221 26 221 38 ()}
        {Lisp-Entry "get-trigger" #f 225 26 225 37 ("rest" "name")}
        {Lisp-Entry "create-trigger" #f 229 26 229 40 ("name")}
        {Lisp-Entry "append-trigger" #f 233 26 233 40 ("trigger")}
        {Lisp-Entry "remove-trigger" #f 237 26 237 40 ("name")}
        {Lisp-Entry "create-or-modify-constraint" #f 246 26 246 53 ("set-checked?" "append-constraint" "set-exclude-replication?" "set-text" "create-constraint" "new-constraint" "remove-constraint" "when" "error?:" "get-constraint" "constraint" "with-closed" "exclude-replication?" "checked?" "text" "name")}
        {Lisp-Entry "get-constraints" #f 257 26 257 41 ()}
        {Lisp-Entry "get-constraint" #f 261 26 261 40 ("rest" "name")}
        {Lisp-Entry "create-constraint" #f 265 26 265 43 ("name")}
        {Lisp-Entry "append-constraint" #f 269 26 269 43 ("constraint")}
        {Lisp-Entry "remove-constraint" #f 273 26 273 43 ("name")}
        {Lisp-Entry "get-text-file-group" #f 282 26 282 45 ()}
        {Lisp-Entry "set-text-file-group" #f 286 26 286 45 ("value")}
        {Lisp-Entry "get-file-group" #f 290 26 290 40 ()}
        {Lisp-Entry "set-file-group" #f 294 26 294 40 ("value")}}}})
"Inventory-Table-Updater"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "update" "Inventory-Table-Updater.jazz"} 1226584775
    {Lisp-Entry "jazz.database.update.Inventory-Table-Updater" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Inventory-Table-Updater" #f 45 7 45 30 ("Object")
        {Lisp-Entry "table-name" #f 48 8 48 18 ()}
        {Lisp-Entry "columns" #f 49 8 49 15 ()}
        {Lisp-Entry "indexes" #f 50 8 50 15 ()}
        {Lisp-Entry "primary-key" #f 51 8 51 19 ()}
        {Lisp-Entry "foreign-keys" #f 52 8 52 20 ()}
        {Lisp-Entry "constraints" #f 53 8 53 19 ()}
        {Lisp-Entry "defaults-values" #f 54 8 54 23 ()}
        {Lisp-Entry "descriptions" #f 55 8 55 20 ()}}}})
"Inventory-Trigger"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory-Trigger.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory-Trigger" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Inventory-Trigger" #f 45 7 45 24 ("Object")
        {Lisp-Entry "inventory" #f 48 8 48 17 ()}
        {Lisp-Entry "parent" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-inventory" #f 63 18 63 31 ("inventory")}
        {Lisp-Entry "get-parent" #f 67 18 67 28 ("parent")}
        {Lisp-Entry "get-title" #f 76 26 76 35 ()}
        {Lisp-Entry "get-text" #f 80 26 80 34 ()}
        {Lisp-Entry "set-text" #f 84 26 84 34 ("value")}}}})
"Inventory-Updater"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory-Updater.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory-Updater" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Inventory-Updater" #f 45 7 45 24 ("Object")}
      {Lisp-Entry "Inventory-Updater" #f 51 7 51 24 ("Object")
        {Lisp-Entry "connection" #f 54 8 54 18 ()}
        {Lisp-Entry "inventory" #f 55 8 55 17 ()}
        {Lisp-Entry "pending-properties" #f 56 8 56 26 ()}
        {Lisp-Entry "pending-deletes" #f 57 8 57 23 ()}
        {Lisp-Entry "pending-triggers/indexes" #f 58 8 58 32 ()}
        {Lisp-Entry "ugly-patch" #f 59 8 59 18 ()}
        {Lisp-Entry "initialize" #f 62 11 62 21 ("get-inventory" "inventory~self" "connection~self" "set!" "nextmethod" "connection")}
        {Lisp-Entry "Actions" #f 73 14 73 21 ("no-action" "modify" "add" "right" "remove" "left")}
        {Lisp-Entry "update-inventory" #f 80 18 80 34 ("reporter:" "title:" "ugly-patch" "close" "proxy" "for-each" "process-pending-deletes" "process-pending-triggers/indexes" "process-pending-properties" "process-table-triggers" "SQLServer-Inventory" "is?" "when" "inventory" "process-children" "pending-triggers/indexes" "pending-deletes" "pending-properties" "set!" "function" "with-execution-context" "reporter" "delta")}
        {Lisp-Entry "process-children" #f 101 11 101 27 ("8" "constraint" "7" "trigger" "6" "index" "5" "primary-key" "-1" "ordinal-position:" "get-property" "third" "either" "4" "column" "3" "relation" "2" "procedure" "1" "view" "0" "list" "table" "get-kind" "case" "get-name" "name" "let" "x" "key:" "get-children" "<" "sort" "process-entity" "create-sql" "SQLServer-Inventory" "is?" "if" "object" "function" "for-each" "reporter" "parent-proxy" "entity")}
        {Lisp-Entry "create-sql" #f 125 11 125 21 ("view" "generate-sql-procedure" "procedure" "generate-sql-table" "table" "when" "has-differences?:" "get-property" "has-differences?" "let" "else" "generate-sql-relation" "relation" "get-kind" "case" "function" "with-continue" "reporter" "parent-proxy" "object")}
        {Lisp-Entry "process-object" #f 139 11 139 25 ("modify" "right" "case" "left" "'left" "eq?" "unless" "if" "difference:" "get-property" "action" "let" "drop-proc" "create-proc" "recreate-table?" "object")}
        {Lisp-Entry "find-action-on-process-property" #f 151 11 151 42 ("left" "'left" "modify" "'modify" "eq?" "right" "'right" "/=" "and" "when" "if" "recreate-table?" "new-value" "old-value" "action")}
        {Lisp-Entry "drop-object" #f 164 11 164 22 ("execute-sql-commit-preserve" "tie" "script" "get-kind" "object-kind" "get-name" "object-name" "let*" "object")}
        {Lisp-Entry "generate-sql-header-script" #f 171 11 171 37 ("tie")}
        {Lisp-Entry "Table-Not-Found" #f 187 12 187 27 ("#x80045510")}
        {Lisp-Entry "set-table-tempo-name" #f 191 11 191 31 ("Table-Not-Found" "Item" "cotry" "format" "set!" "increase!" "while" "inventory" "get-database" "get-Tables" "tables" "with-closed" "looking" "table-tempo-name" "-1" "suffix" "get-name" "table-name" "let" "object")}
        {Lisp-Entry "generate-sql-table" #f 204 11 204 29 ("modify" "drop-table" "left" "right" "case" "generate-sql-partial-table" "generate-sql-full-table" "regenerate-full-table?" "null?" "if" "difference:" "get-property" "action" "let" "reporter" "table")}
        {Lisp-Entry "regenerate-full-table?" #f 218 11 218 33 ("left" "right" "modify" "case" "modify-column?" "null?" "if" "difference:" "get-property" "action" "let" "table")}
        {Lisp-Entry "modify-column?" #f 228 11 228 25 ("-1" "either" "key:" "get-columns" "<" "sort" "third" "second" "+" "/=" "null?" "when" "else" "decrease!" "left" "increase!" "right" "case" "nullable?:" "datatype:" "modify" "'modify" "ordinal-position:" "first" "=" "or" "difference:" "get-property" "action" "column" "function" "some?" "0" "column-pos" "let" "table")}
        {Lisp-Entry "generate-sql-full-table" #f 249 11 249 34 ("generate-sql-access-right" "process-triggers" "process-constraints" "process-indexes" "process-primary-key" "generate-sql-identity-end" "recreate-table?:" "set-property" "undo-create-table" "set!" "process-copy-data" "generate-sql-identity-start" "check-default-values" "process-default-values" "process-description-columns" "process-description-table" "begin" "unwind-protect" "temp-table-created" "let" "generate-sql-create-table" "drop-default-values" "drop-table-relation" "generate-sql-header-script" "execute-sql-commit-preserve" "user-message" "get-columns" "identity?:" "third" "column" "function" "some?" "identity-column?" "if" "table-current-name" "set-table-tempo-name" "not" "when" "table-tempo-name" "right" "'right" "=" "new-table?" "difference:" "get-property" "action" "get-name" "table-name" "let*" "reporter" "table")}
        {Lisp-Entry "undo-create-table" #f 290 11 290 28 ("execute-sql-commit-preserve" "tie" "script" "let" "table-name")}
        {Lisp-Entry "generate-sql-partial-table" #f 295 11 295 37 ("process-triggers" "process-constraints" "process-indexes" "process-primary-key" "process-default-values" "process-description-columns" "process-description-table" "user-message" "when" "get-name" "table-name" "let" "reporter" "table")}
        {Lisp-Entry "create-fields-list" #f 309 11 309 29 ("0" ">=" "tie" "identity-replication?:" "id-repl" "identity-increment:" "id-inc" "identity-seed:" "id-seed" "identity?:" "identity-string" "nullable?:" "if" "nullable-string" "ordinal-position:" "ordinal-position" "get-datatype" "third" "get-native" "datatype" "get-name" "field-name" "let" "left" "'left" "difference:" "get-property" "/=" "when" "field" "function" "collect" "list")}
        {Lisp-Entry "generate-sql-create-table" #f 331 11 331 36 ("tie" "def-table" "-1" "ordinal-position:" "get-property" "third" "either" "column" "function" "key:" "get-columns" "<" "sort" "create-fields-list" "join" "fields-list" "let*" "table-name" "object")}
        {Lisp-Entry "get-added-columns-without-default-value" #f 341 11 341 50 ("get-columns" "get-defaultable?" "=" "or" "not" "second" "null?" "and" "datatype:" "new-datatype" "nullable?:" "new-nullable?" "first" "new-default-value-action" "default-value:" "third" "new-default-value" "ordinal-position:" "get-property" "ordinal-position" "let" "column" "function" "collect-if" "table")}
        {Lisp-Entry "process-copy-data" #f 358 11 358 28 ("execute-sql-commit-preserve" "script-drop-rename-table" "tie" "script-copy" "get-native" "format" "not" "and" "need-default?" "modify" "'modify" "action-for-property" "eq?" "must-convert?" "safe-name" "let" "else" "if" "cond" "read-only" "'read-only" "=" "read-only?" "indirect?:" "default-value:" "get-native-with-value" "default-value" "datatype:" "datatype" "nullable?:" "nullable?" "object-old-property" "null?" "new-column?" "new-values" "get-name" "encapsulate-name" "map" "new-names" "key:" "get-columns" "ordinal-position:" "object-new-property" "not-null?" "column" "function" "collect-if" "<" "sort" "new-columns" "let*" "old-table" "new-table" "object")}
        {Lisp-Entry "drop-table" #f 403 11 403 21 ("drop-object" "drop-default-values" "drop-table-relation" "table")}
        {Lisp-Entry "process-description-table" #f 409 11 409 36 ("generate-sql-update-description-table" "modify" "generate-sql-drop-description-table" "left" "generate-sql-add-description-table" "right" "case" "execute-sql-commit-preserve" "when" "find-action-on-process-property" "set!" "description:" "get-property" "new-value" "old-value" "action" "bind" "recreate-table?" "table-name" "table")}
        {Lisp-Entry "generate-sql-add-description-table" #f 420 11 420 45 ("tie" "script" "substitute-alist" "user" "let*" "description" "table-name")}
        {Lisp-Entry "generate-sql-drop-description-table" #f 429 11 429 46 ("tie" "script" "user" "let*" "table-name")}
        {Lisp-Entry "generate-sql-update-description-table" #f 435 11 435 48 ("tie" "script" "substitute-alist" "user" "let*" "description" "table-name")}
        {Lisp-Entry "generate-sql-drop-columns" #f 450 11 450 36 ("tie" "script" "list" "join" "columns-list" "let*" "table-name" "object")}
        {Lisp-Entry "generate-sql-add-default-value" #f 457 11 457 41 ("tie" "script" "let" "default-value" "constraint-name" "column-name" "table-name")}
        {Lisp-Entry "process-default-values" #f 463 11 463 33 ("get-columns" "script-add-default-value" "script-drop-default-value" "modify" "generate-sql-drop-constraint" "find-constraint-name" "old-constraint-name" "left" "format" "title:" "generate-sql-add-default-value" "execute-sql-commit-preserve" "with-execution-node" "right" "case" "tie" "new-constraint-name" "column-name" "let*" "when" "find-action-on-process-property" "set!" "default-value:" "get-property" "new-value" "old-value" "action" "bind" "column" "function" "for-each" "get-name" "constraint-table-name" "let" "recreate-table?" "table-name" "table")}
        {Lisp-Entry "check-default-values" #f 494 11 494 31 ("get-columns" "error" "find-default-value" "/=" "modify" "right" "case" "tie" "new-constraint-name" "column-name" "let*" "when" "find-action-on-process-property" "set!" "default-value:" "get-property" "new-value" "old-value" "action" "bind" "column" "function" "for-each" "get-name" "constraint-table-name" "let" "table-name" "table")}
        {Lisp-Entry "drop-default-values" #f 508 11 508 30 ("get-columns" "execute-sql-commit-preserve" "generate-sql-drop-constraint" "script-drop-constraint" "generate-sql-header-script" "script-header" "find-constraint-name" "constraint-name" "column-name" "let*" "default-value:" "get-property" "second" "when" "column" "function" "for-each" "get-name" "table-name" "let" "table")}
        {Lisp-Entry "find-constraint-name" #f 521 11 521 31 ("get-Name" "get-DRIDefault" "default" "column" "get-Columns" "columns" "Item" "table" "inventory" "get-database" "get-Tables" "tables" "with-closed" "column-name" "table-name")}
        {Lisp-Entry "find-default-value" #f 530 11 530 29 ("0" "connection" "load-value" "tie" "script" "let" "constraint-name")}
        {Lisp-Entry "generate-sql-identity-start" #f 535 11 535 38 ("tie" "script" "let" "table-name")}
        {Lisp-Entry "generate-sql-identity-end" #f 540 11 540 36 ("tie" "script" "let" "table-name")}
        {Lisp-Entry "process-description-columns" #f 545 11 545 38 ("get-columns" "generate-sql-update-description-column" "modify" "generate-sql-drop-description-column" "left" "generate-sql-add-description-column" "right" "case" "execute-sql-commit-preserve" "when" "get-name" "column-name" "let" "find-action-on-process-property" "set!" "description:" "get-property" "new-value" "old-value" "action" "bind" "column" "function" "for-each" "recreate-table?" "table-name" "table")}
        {Lisp-Entry "generate-sql-add-description-column" #f 559 11 559 46 ("tie" "script" "substitute-alist" "user" "let*" "description" "column-name" "table-name")}
        {Lisp-Entry "generate-sql-drop-description-column" #f 568 11 568 47 ("tie" "script" "user" "let*" "column-name" "table-name")}
        {Lisp-Entry "generate-sql-update-description-column" #f 574 11 574 49 ("tie" "script" "substitute-alist" "user" "let*" "description" "column-name" "table-name")}
        {Lisp-Entry "process-primary-key" #f 588 11 588 30 ("drop-primary-key" "add-primary-key" "process-object" "when" "get-primary-key" "primary-key" "let" "recreate-table?" "table")}
        {Lisp-Entry "add-primary-key" #f 594 11 594 26 ("execute-sql-commit-preserve" "generate-sql-primary-key" "script-create-primary-key" "generate-sql-header-script" "script-header" "let" "object")}
        {Lisp-Entry "drop-primary-key" #f 601 11 601 27 ("execute-sql-commit-preserve" "drop-table-relation" "generate-sql-drop-constraint" "script-drop-constraint" "generate-sql-header-script" "script-header" "table-name" "get-parent" "table" "get-name" "constraint-name" "let*" "primary-key")}
        {Lisp-Entry "generate-sql-primary-key" #f 612 11 612 35 ("script" "tie" "0" ">" "fill-factor-text" "fill-factor:" "fill-factor" "clustered?:" "if" "clustered" "fields/orders:" "get-property" "third" "create-fields/orders-list" "fields/orders" "pk-name" "get-parent" "get-name" "table-name" "let*" "primary-key")}
        {Lisp-Entry "create-fields/orders-list" #f 627 11 627 36 ("tie" "ascending" "'ascending" "=" "if" "order-string" "second" "order" "first" "encapsulate-name" "field" "let*" "field/order" "function" "map" "join" "list")}
        {Lisp-Entry "process-indexes" #f 643 11 643 26 ("get-indexes" "drop-index" "add-index" "process-object" "index" "function" "for-each" "recreate-table?" "object")}
        {Lisp-Entry "add-index" #f 649 11 649 20 ("execute-sql-commit-preserve" "generate-sql-index" "script-create-index" "generate-sql-header-script" "script-header" "let" "index")}
        {Lisp-Entry "drop-index" #f 656 11 656 21 ("execute-sql-commit-preserve" "tie" "script" "get-parent" "table-name" "get-name" "index-name" "let*" "index")}
        {Lisp-Entry "generate-sql-index" #f 663 11 663 29 ("script" "options" "list" "remove-nils" "options-list" "recompute-statistics?:" "statistics-norecompute" "ignore-duplicates?:" "ignore-dup-key" "tie" "0" ">" "fill-factor-text" "fill-factor:" "fill-factor" "pad-index?:" "pad-index" "clustered?:" "clustered" "unique?:" "if" "unique" "fields/orders:" "get-property" "third" "create-fields/orders-list" "fields/orders" "index-name" "get-parent" "get-name" "table-name" "let*" "index")}
        {Lisp-Entry "process-triggers" #f 692 11 692 27 ("get-triggers" "drop-object" "create-procedure" "process-object" "with-continue" "trigger" "function" "for-each" "recreate-table?" "object")}
        {Lisp-Entry "process-table-triggers" #f 700 11 700 33 ("get-tables" "process-triggers" "left" "'left" "=" "unless" "difference:" "action" "recreate-table?:" "get-property" "recreate-table?" "let" "table" "function" "for-each" "objects")}
        {Lisp-Entry "process-constraints" #f 714 11 714 30 ("get-constraints" "drop-constraint" "create-constraint" "process-object" "constraint" "function" "for-each" "recreate-table?" "table")}
        {Lisp-Entry "create-constraint" #f 720 11 720 28 ("execute-sql-commit-preserve" "script" "tie" "checked?:" "not" "checked-text" "exclude-replication?:" "replication-text" "if" "check-text" "check?" "text:" "get-property" "third" "text" "constraint-name" "get-parent" "get-name" "table-name" "let*" "constraint")}
        {Lisp-Entry "drop-constraint" #f 737 11 737 26 ("execute-sql-commit-preserve" "tie" "script" "constraint-name" "get-parent" "get-name" "table-name" "let*" "constraint")}
        {Lisp-Entry "generate-sql-drop-constraint" #f 745 11 745 39 ("tie" "script" "let" "constraint-name" "table-name")}
        {Lisp-Entry "generate-sql-relation" #f 756 11 756 32 ("drop-relation" "create-relation" "process-object" "recreate-table?:" "get-property" "recreate-table?" "let" "relation")}
        {Lisp-Entry "create-relation" #f 761 11 761 26 ("execute-sql-commit-preserve" "script" "tie" "checked?:" "not" "checked-text" "check-text" "check?" "exclude-replication?:" "replication-text" "delete-cascade?:" "on-delete-cascade" "update-cascade?:" "get-property" "if" "on-update-cascade" "get-foreign-columns" "foreign-fields" "get-foreign-table" "foreign-table" "get-primary-columns" "primary-fields" "get-primary-table" "third" "primary-table" "get-name" "relation-name" "let*" "relation")}
        {Lisp-Entry "drop-relation" #f 788 11 788 24 ("execute-sql-commit-preserve" "tie" "script" "get-foreign-table" "second" "foreign-table" "get-name" "relation-name" "let*" "relation")}
        {Lisp-Entry "drop-table-relation" #f 796 11 796 30 ("get-parent" "get-relations" "set-property" "drop-relation" "=" "or" "when" "get-primary-table" "primary-table" "get-foreign-table" "second" "foreign-table" "recreate-table?:" "get-property" "unless" "relation" "function" "for-each" "get-name" "table-name" "let" "table")}
        {Lisp-Entry "generate-sql-procedure" #f 814 11 814 33 ("modify" "drop-object" "left" "create-procedure" "right" "case" "user-message" "when" "get-name" "name" "difference:" "get-property" "action" "let" "reporter" "object")}
        {Lisp-Entry "create-procedure" #f 826 11 826 27 ("connection" "execute" "text:" "get-property" "third" "script-create-procedure" "generate-sql-header-script" "script-header" "let" "object")}
        {Lisp-Entry "generate-sql-access-right" #f 839 11 839 36 ("tie" "script" "user" "let*")}
        {Lisp-Entry "object-new-property" #f 856 11 856 30 ("get-property" "third" "property" "object")}
        {Lisp-Entry "object-old-property" #f 860 11 860 30 ("get-property" "second" "property" "object")}
        {Lisp-Entry "action-for-property" #f 864 11 864 30 ("get-property" "first" "property" "object")}
        {Lisp-Entry "encapsulate-name" #f 868 11 868 27 ("format" "name")}
        {Lisp-Entry "execute-sql-commit-preserve" #f 872 11 872 38 ("connection" "execute" "commit" "tie" "let*" "script")}
        {Lisp-Entry "process-entity" #f 885 11 885 25 ("process-modify" "no-action" "modify" "process-delete" "remove" "process-new" "add" "case" "get-name" "name" "get-kind" "kind" "Actions" "difference:" "get-property" "assq" "cdr" "action" "let" "function" "with-continue" "reporter" "parent-proxy" "object")}
        {Lisp-Entry "process-new" #f 897 11 897 22 ("format" "title:" "process-proxy" "cons" "ugly-patch" "set!" "new-proxy" "proxy" "let" "function" "with-execution-node" "reporter" "name" "kind" "parent-proxy" "object")}
        {Lisp-Entry "process-delete" #f 906 11 906 25 ("format" "title:" "process-proxy" "function" "with-execution-node" "reporter" "name" "kind" "parent-proxy" "object")}
        {Lisp-Entry "process-modify" #f 913 11 913 25 ("format" "title:" "process-proxy" "cons" "ugly-patch" "set!" "get-proxy" "proxy" "let" "function" "with-execution-node" "reporter" "name" "kind" "parent-proxy" "object")}
        {Lisp-Entry "Recreate" #f 922 14 922 22 ("procedure" "relation" "view" "constraint" "trigger" "index" "primary-key")}
        {Lisp-Entry "process-proxy" #f 926 11 926 24 ("add-pending-trigger/index" "index" "trigger" "complete-append" "SQLServer-Inventory-Relation" "unless" "process-children" "modify-proxy" "cons" "ugly-patch" "new-proxy" "set!" "delete-proxy" "linked?:" "table" "'table" "Recreate" "memq?" "has-differences?:" "and" "modify" "'modify" "no-action" "'no-action" "or" "process-pending-triggers/indexes" "relation" "'relation" "eq?" "list" "add-pending-delete" "remove" "'remove" "if" "user-message" "when" "add" "'add" "=" "new?" "Data-Entity" "is?" "entity?" "get-name" "name" "get-kind" "kind" "Actions" "difference:" "get-property" "assq" "cdr" "action" "let*" "reporter" "proxy" "parent-proxy" "object")}
        {Lisp-Entry "new-proxy" #f 964 11 964 20 ("error" "else" "create-procedure" "procedure" "create-relation-complete" "foreign-columns:" "foreign-fields" "foreign-table:" "foreign-table" "primary-columns:" "primary-fields" "primary-table:" "primary-table" "create-relation" "SQLServer-Inventory" "is-not?" "if" "relation" "create-view" "view" "create-constraint" "constraint" "create-trigger" "trigger" "create-index" "index" "create-column" "column" "create-primary-key" "fields/orders:" "get-property" "third" "fields/orders" "let" "primary-key" "create-table" "table" "case" "object" "name" "kind" "parent")}
        {Lisp-Entry "get-proxy" #f 990 11 990 20 ("error" "else" "get-procedure" "procedure" "get-relation" "relation" "get-view" "view" "get-constraint" "constraint" "get-trigger" "trigger" "get-index" "index" "get-column" "column" "get-primary-key" "primary-key" "get-table" "table" "case" "name" "kind" "parent")}
        {Lisp-Entry "modify-proxy" #f 1009 11 1009 23 ("property-names" "modify-proxy-property" "list" "add-pending-property" "allow-zero-length?" "display-format" "description" "memq?" "if" "modify" "'modify" "=" "or" "when" "new-value" "old-value" "action" "bind" "get-property" "composite" "symbol->keyword" "property" "let*" "symbol" "function" "for-each" "force?" "kind" "physical" "object")}
        {Lisp-Entry "modify-proxy-property" #f 1021 11 1021 32 ("format" "title:" "error" "else" "modify-relation-property" "relation" "modify-procedure-property" "procedure" "modify-view-property" "view" "modify-constraint-property" "constraint" "modify-trigger-property" "trigger" "modify-index-property" "index" "modify-column-property" "column" "modify-primary-key-property" "primary-key" "modify-table-property" "table" "case" "function" "with-execution-node" "force?" "value" "property" "kind" "physical" "object")}
        {Lisp-Entry "modify-table-property" #f 1038 11 1038 32 ("error" "else" "set-validation-text" "validation-text" "set-validation-rule" "validation-rule" "set-description" "description" "set-source-table-name" "source-table-name" "set-connect" "connect" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-primary-key-property" #f 1048 11 1048 38 ("error" "else" "fill-factor" "clustered?" "fields/orders" "case" "value" "property" "physical")}
        {Lisp-Entry "create-field-by-sql" #f 1054 11 1054 30 ("connection" "execute" "tie" "request" "format" "if" "size-label" "has-size?" "sizeable?" "get-size" "size" "get-name" "type-name" "get-nullable?" "nullable?" "field-name" "get-table" "get-title" "table-name" "let*" "value" "physical")}
        {Lisp-Entry "modify-column-property" #f 1071 11 1071 33 ("error" "set-identity-seed" "identity-seed" "set-identity-increment" "identity-increment" "identity-replication?" "set-identity?" "identity?" "set-auto-increment?" "auto-increment?" "set-ordinal-position" "ordinal-position" "set-display-format" "display-format" "set-allow-zero-length?" "allow-zero-length?" "set-validation-text" "validation-text" "set-validation-rule" "validation-rule" "set-nullable?" "get-size" "set-size" "begin" "=" "get-name" "new-type" "get-type" "type" "get-nullable?" "nullable?" "let" "else" "create-field-by-sql" "Access-Datatype" "typecase" "set-datatype" "if" "datatype" "set-description" "description" "set-default-value" "default-value" "case" "inventory" "column-supports-property?" "when" "force?" "value" "property" "physical" "object")}
        {Lisp-Entry "modify-index-property" #f 1106 11 1106 32 ("error" "else" "exclude-replication?" "checked?" "fill-factor" "recompute-statistics?" "pad-index?" "clustered?" "ignore-duplicates?" "set-unique?" "SQLServer-Inventory-Index" "is?" "unless" "unique?" "set-fields/orders" "fields/orders" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-trigger-property" #f 1114 11 1114 34 ("error" "else" "set-text" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-constraint-property" #f 1120 11 1120 37 ("error" "else" "checked?" "exclude-replication?" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-procedure-property" #f 1126 11 1126 36 ("error" "else" "set-text" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-view-property" #f 1132 11 1132 31 ("error" "else" "set-text" "text" "case" "value" "property" "physical")}
        {Lisp-Entry "modify-relation-property" #f 1138 11 1138 35 ("error" "else" "checked?" "exclude-replication?" "set-update-cascade?" "update-cascade?" "set-delete-cascade?" "delete-cascade?" "set-unique?" "unique?" "set-left?" "left?" "set-right?" "right?" "set-foreign-table" "foreign-table" "set-foreign-field-names" "foreign-columns" "set-primary-table" "primary-table" "set-primary-field-names" "primary-columns" "case" "SQLServer-Inventory-Relation" "is?" "unless" "value" "property" "physical")}
        {Lisp-Entry "complete-append" #f 1159 11 1159 26 ("error" "else" "append-procedure" "procedure" "append-relation" "relation" "append-view" "view" "append-constraint" "constraint" "append-trigger" "trigger" "append-index" "index" "append-column" "column" "append-primary-key" "primary-key" "append-table" "table" "case" "function" "with-continue" "child" "parent" "kind")}
        {Lisp-Entry "delete-proxy" #f 1180 11 1180 23 ("error" "else" "remove-procedure" "procedure" "foreign-table:" "get-property" "second" "foreign-table" "let" "remove-relation" "SQLServer-Inventory" "is-not?" "if" "relation" "remove-view" "view" "remove-constraint" "constraint" "remove-trigger" "trigger" "remove-index" "index" "remove-column" "column" "remove-primary-key" "primary-key" "remove-table" "table" "case" "object" "child-name" "parent" "kind")}
        {Lisp-Entry "add-pending-property" #f 1202 11 1202 31 ("cons" "pending-properties" "set!" "info")}
        {Lisp-Entry "add-pending-delete" #f 1206 11 1206 29 ("cons" "pending-deletes" "set!" "info")}
        {Lisp-Entry "add-pending-trigger/index" #f 1210 11 1210 36 ("cons" "pending-triggers/indexes" "set!" "info")}
        {Lisp-Entry "process-pending-properties" #f 1214 11 1214 37 ("pending-properties" "modify-proxy-property" "with-continue" "new-value" "symbol" "kind" "physical" "object" "bind" "element" "function" "for-each")}
        {Lisp-Entry "Entities-Delete" #f 1223 14 1223 29 ("column" "primary-key" "index" "constraint" "trigger" "table" "view" "procedure" "relation")}
        {Lisp-Entry "process-pending-deletes" #f 1227 11 1227 34 ("first" "Entities-Delete" "find" "lst" "key:" "pending-deletes" "<" "sort" "delete-proxy" "with-continue" "object" "name" "physical" "kind" "bind" "element" "function" "for-each")}
        {Lisp-Entry "process-pending-triggers/indexes" #f 1237 11 1237 43 ("set!" "pending-triggers/indexes" "complete-append" "subentity" "entity" "kind" "bind" "element" "function" "for-each")}}}})
"Inventory-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "inventory" "Inventory-View.jazz"} 1226584774
    {Lisp-Entry "jazz.database.inventory.Inventory-View" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Inventory-View" #f 46 7 46 21 ("Object")
        {Lisp-Entry "inventory" #f 49 8 49 17 ()}
        {Lisp-Entry "parent" #f 50 8 50 14 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("parent~self" "inventory~self" "set!" "nextmethod" "parent" "inventory")}
        {Lisp-Entry "get-inventory" #f 64 18 64 31 ("inventory")}
        {Lisp-Entry "get-parent" #f 68 18 68 28 ("parent")}
        {Lisp-Entry "get-title" #f 77 26 77 35 ()}
        {Lisp-Entry "get-text" #f 81 26 81 34 ()}
        {Lisp-Entry "set-text" #f 85 26 85 34 ("value")}}}})
"Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Item.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Item" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "Item" #f 45 7 45 11 ("View")
        {Lisp-Entry "prefix-width" #f 48 8 48 20 ("0")}
        {Lisp-Entry "icon-width" #f 49 8 49 18 ("0")}
        {Lisp-Entry "body-width" #f 50 8 50 18 ("0")}
        {Lisp-Entry "shortcut-width" #f 51 8 51 22 ("0")}
        {Lisp-Entry "arrow-width" #f 52 8 52 19 ("0")}
        {Lisp-Entry "in?" #f 53 8 53 11 ()}
        {Lisp-Entry "set-prefix-width" #f 61 18 61 34 ("prefix-width" "set!" "width")}
        {Lisp-Entry "set-icon-width" #f 65 18 65 32 ("icon-width" "set!" "width")}
        {Lisp-Entry "set-body-width" #f 69 18 69 32 ("body-width" "set!" "width")}
        {Lisp-Entry "set-shortcut-width" #f 73 18 73 36 ("shortcut-width" "set!" "width")}
        {Lisp-Entry "set-arrow-width" #f 77 18 77 33 ("arrow-width" "set!" "width")}
        {Lisp-Entry "get-menubar" #f 86 11 86 22 ("Menubar" "find-ascendant")}
        {Lisp-Entry "preferred-prefix-width" #f 95 26 95 48 ("0")}
        {Lisp-Entry "preferred-icon-width" #f 99 26 99 46 ("0")}
        {Lisp-Entry "preferred-body-width" #f 103 26 103 46 ("0")}
        {Lisp-Entry "preferred-shortcut-width" #f 107 26 107 50 ("0")}
        {Lisp-Entry "preferred-arrow-width" #f 111 26 111 47 ("0")}
        {Lisp-Entry "preferred-height" #f 115 26 115 42 ("preferred-size" "get-height")}
        {Lisp-Entry "layout-menu" #f 119 21 119 32 ("layout-menu" "Menu" "parent" "is?" "when")}
        {Lisp-Entry "mouse-enter" #f 129 11 129 22 ("invalidate-view" "when" "popup-initiator" "initiator" "let" "redraw-view" "in?" "set!")}
        {Lisp-Entry "mouse-leave" #f 137 11 137 22 ("redraw-view" "in?" "set!")}
        {Lisp-Entry "poped?" #f 147 21 147 27 ("self" "popup-initiator" "eq?" "and" "parent" "get-poped" "poped" "let")}
        {Lisp-Entry "poped-tool" #f 152 21 152 31 ("get-player" "self" "popup-initiator" "eq?" "and" "when" "parent" "get-poped" "poped" "let")}
        {Lisp-Entry "close-other-popups" #f 158 21 158 39 ("poped-tool" "list" "exclude:" "close-popups" "poped?" "if")}}}})
"Iterator-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Iterator-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Iterator-Tester" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Iterator-Tester" #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ()}}}})
"J"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "suite" "J.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.suite.J" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "J" #f 40 11 40 12 ("I")}}})
"JDBC-Connection"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "connection" "JDBC-Connection.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.connection.JDBC-Connection" #f 37 9 37 64 ("jazz")
      {Lisp-Entry "JDBC-Connection" #f 45 7 45 22 ("Connection")}
      {Lisp-Entry "JDBC-Connection" #f 51 7 51 22 ("Connection")
        {Lisp-Entry "handle" #f 54 8 54 14 ()}
        {Lisp-Entry "destroy-connection" #f 57 11 57 29 ("nextmethod" "set!" "close" "handle" "when")}
        {Lisp-Entry "get-handle" #f 69 18 69 28 ("handle")}
        {Lisp-Entry "open" #f 78 11 78 15 ("nextmethod" "handle" "set!" "getConnection" "connection" "get-password" "password" "get-username" "username" "get-connection-string" "url" "let*" "org.jazzscheme.java.Runtime" "getRuntime" "runtime" "let" "preload-drivers" "rest" "data-source")}
        {Lisp-Entry "Drivers-Loaded?" #f 89 14 89 29 ()}
        {Lisp-Entry "preload-drivers" #f 93 11 93 26 ("set!" "load-drivers" "Drivers-Loaded?" "unless")}
        {Lisp-Entry "load-drivers" #f 99 11 99 23 ("forName" "driver" "function" "for-each" "org.jazzscheme.java.Runtime" "getRuntime" "runtime" "jdbc-drivers" "drivers" "get-profile" "profile" "get-application" "appl" "let*")}
        {Lisp-Entry "get-state" #f 115 11 115 20 ("open" "'open")}
        {Lisp-Entry "new-request" #f 124 11 124 22 ("self" "JDBC-Request" "new")}
        {Lisp-Entry "supports-multirequests?" #f 129 11 129 34 ()}
        {Lisp-Entry "execute" #f 138 11 138 18 ("execute" "new-request" "request" "with-closed" "command")}}}})
"JDBC-Data-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "JDBC-Data-Source.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.JDBC-Data-Source" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "JDBC-Data-Source" #f 47 7 47 23 ("Data-Source")
        {Lisp-Entry "url" #f 50 12 50 15 ("generate")}
        {Lisp-Entry "schemas" #f 51 12 51 19 ("generate")}
        {Lisp-Entry "table-types" #f 52 12 52 23 ("generate")}
        {Lisp-Entry "external-name" #f 55 16 55 29 ("jdbc" "'jdbc" "rest")}
        {Lisp-Entry "new-inventory" #f 64 11 64 24 ("password" "username" "table-types" "schemas" "url" "JDBC-Inventory" "new" "rest" "connection")}
        {Lisp-Entry "new-connection" #f 73 11 73 25 ("self" "JDBC-Connection" "new")}
        {Lisp-Entry "get-connection-string" #f 77 11 77 32 ("url")}
        {Lisp-Entry "get-connection-properties" #f 81 11 81 36 ("password" "password:" "username" "username:" "table-types" "table-types:" "schemas" "schemas:" "url" "url:" "list")}
        {Lisp-Entry "present" #f 94 11 94 18 ("url" "format")}
        {Lisp-Entry "present-detailed" #f 98 11 98 27 ("table-types" "schemas" "url" "format" ":bulleted" "list")}
        {Lisp-Entry "get-class-presentation" #f 111 16 111 38 ()}
        {Lisp-Entry "property-presentation" #f 115 16 115 37 ("nextmethod" "else" "table-types" "schemas" "url" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 123 11 123 27 ("nextmethod" "else" "table-types" "schemas" "nullable?:" "String-Row" "new" "url" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 131 11 131 37 ("password" "username" "table-types" "schemas" "url" "class-info")}}}})
"JDBC-Datatype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Datatype.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Datatype" #f 37 9 37 61 ("jazz")
      {Lisp-Entry "JDBC-Datatype" #f 46 7 46 20 ("Datatype")
        {Lisp-Entry "DATATYPES" #f 49 22 49 31 ("16" "BOOLEAN" "70" "DATALINK" "2006" "REF" "2005" "CLOB" "2004" "BLOB" "2003" "ARRAY" "2002" "STRUCT" "2001" "DISTINCT" "2000" "JAVA_OBJECT" "1111" "OTHER" "0" "NULL" "-4" "LONGVARBINARY" "-3" "VARBINARY" "-2" "BINARY" "93" "TIMESTAMP" "92" "TIME" "91" "DATE" "-1" "LONGVARCHAR" "12" "VARCHAR" "1" "CHAR" "3" "DECIMA" "2" "NUMERIC" "8" "DOUBLE" "7" "REAL" "6" "FLOAT" "-5" "BIGINT" "4" "INTEGER" "5" "SMALLINT" "-6" "TINYINT" "-7" "BIT")}
        {Lisp-Entry "datatype-name" #f 82 23 82 36 ("DATATYPES" "value->name" "symbol->string" "no")}
        {Lisp-Entry "get-systypes" #f 86 16 86 28 ("Systype")}}}})
"JDBC-Inventory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Inventory.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Inventory" #f 37 9 37 62 ("jazz")
      {Lisp-Entry "JDBC-Inventory" #f 45 7 45 21 ("Inventory")
        {Lisp-Entry "schemas" #f 48 8 48 15 ()}
        {Lisp-Entry "table-types" #f 49 8 49 19 ()}
        {Lisp-Entry "metadata" #f 50 8 50 16 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("setup-metadata" "table-types~self" "schemas~self" "set!" "nextmethod" "rest" "password" "table-types" "schemas" "url" "connection")}
        {Lisp-Entry "setup-metadata" #f 60 11 60 25 ("connection" "get-handle" "getMetaData" "metadata" "set!")}
        {Lisp-Entry "get-schemas" #f 69 18 69 29 ("schemas")}
        {Lisp-Entry "get-table-types" #f 73 18 73 33 ("table-types")}
        {Lisp-Entry "get-metadata" #f 77 18 77 30 ("metadata")}
        {Lisp-Entry "get-version" #f 86 11 86 22 ("getDatabaseMinorVersion" "metadata" "getDatabaseMajorVersion" "Version" "new")}
        {Lisp-Entry "match-schema" #f 97 11 97 23 ("schemas" "Regular-Expression" "new" "match" "null?" "or" "schema")}
        {Lisp-Entry "match-table-type" #f 102 11 102 27 ("table-types" "Regular-Expression" "new" "match" "table-type")}
        {Lisp-Entry "get-tables" #f 111 11 111 21 ("get-output" "self" "JDBC-Inventory-Table" "put" "resultset" "name" "schema" "function" "for-each-table" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "get-table-names" #f 121 11 121 26 ("get-output" "cons" "put" "resultset" "name" "schema" "function" "for-each-table" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "for-each-table" #f 129 11 129 25 ("match-table-type" "match-schema" "and" "when" "table-type" "name" "getString" "schema" "next" "while" "list" "metadata" "getTables" "resultset" "let" "proc")}
        {Lisp-Entry "get-views" #f 146 11 146 20 ("get-output" "self" "JDBC-Inventory-View" "put" "match-schema" "when" "getString" "schema" "next" "while" "List-Factory" "new" "fact" "list" "metadata" "getTables" "resultset" "let")}
        {Lisp-Entry "get-relations" #f 162 11 162 24 ("get-output" "close" "put-sequence" "if" "table" "get-table-relations" "relations" "name" "schema" "bind" "info" "function" "for-each" "get-table-names" "table-names" "List-Factory" "new" "fact" "let")}}}})
"JDBC-Inventory-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Inventory-Column.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Inventory-Column" #f 37 9 37 69 ("jazz")
      {Lisp-Entry "JDBC-Inventory-Column" #f 45 7 45 28 ("Inventory-Column")
        {Lisp-Entry "title" #f 48 8 48 13 ()}
        {Lisp-Entry "datatype" #f 49 8 49 16 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("column-datatype" "datatype" "getString" "title" "set!" "nextmethod" "resultset" "parent" "inventory")}
        {Lisp-Entry "column-datatype" #f 59 11 59 26 ("new-datatype" "size" "getInt" "JDBC-Datatype" "datatype-name" "type" "let" "resultset")}
        {Lisp-Entry "get-title" #f 70 11 70 20 ("title")}
        {Lisp-Entry "get-datatype" #f 74 11 74 23 ("datatype")}
        {Lisp-Entry "get-size" #f 78 11 78 19 ("datatype" "get-size")}
        {Lisp-Entry "get-ordinal-position" #f 83 11 83 31 ("0")}}}})
"JDBC-Inventory-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Inventory-Constraint.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Inventory-Constraint" #f 37 9 37 73 ("jazz")
      {Lisp-Entry "JDBC-Inventory-Constraint" #f 45 7 45 32 ("Inventory-Constraint")}}})
"JDBC-Inventory-Index"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Inventory-Index.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Inventory-Index" #f 37 9 37 68 ("jazz")
      {Lisp-Entry "JDBC-Inventory-Index" #f 45 7 45 27 ("Inventory-Index")}}})
"JDBC-Inventory-Primary-Key"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Inventory-Primary-Key.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Inventory-Primary-Key" #f 37 9 37 74 ("jazz")
      {Lisp-Entry "JDBC-Inventory-Primary-Key" #f 45 7 45 33 ("Inventory-Primary-Key")}}})
"JDBC-Inventory-Procedure"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Inventory-Procedure.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Inventory-Procedure" #f 37 9 37 72 ("jazz")
      {Lisp-Entry "JDBC-Inventory-Procedure" #f 45 7 45 31 ("Inventory-Procedure")}}})
"JDBC-Inventory-Relation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Inventory-Relation.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Inventory-Relation" #f 37 9 37 71 ("jazz")
      {Lisp-Entry "JDBC-Inventory-Relation" #f 45 7 45 30 ("Inventory-Relation")}}})
"JDBC-Inventory-Table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Inventory-Table.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Inventory-Table" #f 37 9 37 68 ("jazz")
      {Lisp-Entry "JDBC-Inventory-Table" #f 45 7 45 27 ("Inventory-Table")
        {Lisp-Entry "owner" #f 48 8 48 13 ()}
        {Lisp-Entry "name" #f 49 8 49 12 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("name" "getString" "owner" "set!" "nextmethod" "resultset" "parent" "inventory")}
        {Lisp-Entry "get-owner" #f 63 11 63 20 ("owner")}
        {Lisp-Entry "get-name" #f 67 11 67 19 ("name")}
        {Lisp-Entry "get-title" #f 71 11 71 20 ("append" "name" "owner" "null?" "if")}
        {Lisp-Entry "get-columns" #f 82 11 82 22 ("get-output" "self" "JDBC-Inventory-Column" "put" "next" "while" "List-Factory" "new" "fact" "name" "owner" "getColumns" "resultset" "inventory" "get-metadata" "metadata" "let*")}}}})
"JDBC-Inventory-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Inventory-View.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Inventory-View" #f 37 9 37 67 ("jazz")
      {Lisp-Entry "JDBC-Inventory-View" #f 46 7 46 26 ("Inventory-View")
        {Lisp-Entry "title" #f 49 8 49 13 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("getString" "title" "set!" "nextmethod" "resultset" "parent" "inventory")}
        {Lisp-Entry "get-title" #f 62 11 62 20 ("title")}
        {Lisp-Entry "get-text" #f 67 11 67 19 ()}}}})
"JDBC-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "inventory" "JDBC-Provider.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.inventory.JDBC-Provider" #f 37 9 37 61 ("jazz")
      {Lisp-Entry "JDBC-Provider" #f 45 7 45 20 ("Provider")
        {Lisp-Entry "external-name" #f 48 11 48 24 ("jdbc" "'jdbc")}
        {Lisp-Entry "get-datatype" #f 57 11 57 23 ("JDBC-Datatype")}
        {Lisp-Entry "present" #f 66 11 66 18 ()}}}})
"JDBC-Recordset"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "connection" "JDBC-Recordset.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.connection.JDBC-Recordset" #f 37 9 37 63 ("jazz")
      {Lisp-Entry "JDBC-Recordset" #f 45 7 45 21 ("Recordset")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "setup-recordset" #f 51 11 51 26 ("handle:" "getf" "handle" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "get-handle" #f 61 18 61 28 ("handle")}
        {Lisp-Entry "opened?" #f 70 11 70 18 ("handle" "boolean")}
        {Lisp-Entry "open" #f 74 11 74 15 ("executeQuery" "handle" "set!" "1" "+" "setMaxRows" "neq?" "when" "get-handle" "createStatement" "statement" "let" "max-load" "max-load:" "connection" "connection:" "command")}
        {Lisp-Entry "get-state" #f 88 11 88 20 ("open" "'open")}
        {Lisp-Entry "new-recordset-metadata" #f 97 11 97 33 ("handle" "getMetaData" "JDBC-Recordset-Metadata" "new")}
        {Lisp-Entry "get-field-type" #f 101 11 101 25 ("1" "+" "get-handle" "getColumnTypeName" "field" "metadata")}
        {Lisp-Entry "get-field-value" #f 105 11 105 26 ("1" "+" "handle" "getString" "field" "metadata")}
        {Lisp-Entry "next-recordset!" #f 114 11 114 26 ()}
        {Lisp-Entry "move-first" #f 123 11 123 21 ("move-first" "'move-first" "unimplemented")}
        {Lisp-Entry "move-last" #f 127 11 127 20 ("move-last" "'move-last" "unimplemented")}
        {Lisp-Entry "move-next" #f 131 11 131 20 ("move-next" "'move-next" "unimplemented")}
        {Lisp-Entry "move-previous" #f 135 11 135 24 ("move-previous" "'move-previous" "unimplemented")}
        {Lisp-Entry "at-bof?" #f 139 11 139 18 ("at-bof?" "'at-bof?" "unimplemented")}
        {Lisp-Entry "at-eof?" #f 143 11 143 18 ("handle" "isAfterLast")}
        {Lisp-Entry "iterate-records" #f 147 11 147 26 ("handle" "next" "and" "while" "proc")}}}})
"JDBC-Recordset-Metadata"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "connection" "JDBC-Recordset-Metadata.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.connection.JDBC-Recordset-Metadata" #f 37 9 37 72 ("jazz")
      {Lisp-Entry "JDBC-Recordset-Metadata" #f 45 7 45 30 ("Recordset-Metadata")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("handle" "set!" "nextmethod" "hnd")}
        {Lisp-Entry "get-handle" #f 61 18 61 28 ("handle")}
        {Lisp-Entry "get-count" #f 70 11 70 20 ("handle" "getColumnCount")}
        {Lisp-Entry "get-field" #f 74 11 74 20 ("field-name")}
        {Lisp-Entry "get-field-name" #f 78 11 78 25 ("1" "+" "handle" "getColumnName" "field")}
        {Lisp-Entry "get-field-type" #f 82 11 82 25 ("1" "+" "handle" "getColumnTypeName" "field")}
        {Lisp-Entry "get-field-size" #f 86 11 86 25 ("1" "+" "handle" "getColumnDisplaySize" "field")}
        {Lisp-Entry "get-field-precision" #f 90 11 90 30 ("1" "+" "handle" "getPrecision" "field")}}}})
"JDBC-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "connection" "JDBC-Request.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.connection.JDBC-Request" #f 37 9 37 61 ("jazz")
      {Lisp-Entry "JDBC-Request" #f 45 7 45 19 ("Request")
        {Lisp-Entry "new-recordset" #f 48 11 48 24 ("connection" "connection:" "JDBC-Recordset" "new" "apply" "rest" "request")}
        {Lisp-Entry "execute" #f 57 11 57 18 ("executeUpdate" "connection" "get-handle" "createStatement" "statement" "let" "command")}}}})
"JML-Element"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "model" "JML-Element.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.model.JML-Element" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "JML-Element" #f 45 7 45 18 ("JML-Node")
        {Lisp-Entry "tag" #f 48 8 48 11 ()}
        {Lisp-Entry "properties" #f 49 8 49 18 ()}
        {Lisp-Entry "children" #f 50 8 50 16 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("properties~self" "tag~self" "set!" "nextmethod" "properties" "properties:" "tag" "parent")}
        {Lisp-Entry "print" #f 59 11 59 16 ("tag" "format" "properties" "null?" "if" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "clone" #f 67 18 67 23 ("set-children" "properties" "set-properties" "tag" "JML-Element" "new" "clone" "let" "children" "children:" "parent" "parent:")}
        {Lisp-Entry "get-tag" #f 79 18 79 25 ("tag")}
        {Lisp-Entry "get-properties" #f 83 18 83 32 ("properties")}
        {Lisp-Entry "set-properties" #f 87 18 87 32 ("properties" "set!" "value")}
        {Lisp-Entry "get-children" #f 91 18 91 30 ("children")}
        {Lisp-Entry "set-children" #f 95 18 95 30 ("children" "set!" "value")}
        {Lisp-Entry "has-property?" #f 104 18 104 31 ("not-found:" "key:" "properties" "getf" "neq?" "Box" "not-found" "symbolize-property" "symbol" "let" "property")}
        {Lisp-Entry "get-property" #f 110 18 110 30 ("cddr" "cadr" "eq?" "car" "null?" "if" "properties" "scan" "iterate" "symbolize-property" "symbol" "let" "not-found" "property")}
        {Lisp-Entry "set-property" #f 121 18 121 30 ("cddr" "cdr" "set-car!" "eq?" "car" "list" "append" "set!" "null?" "if" "properties" "scan" "iterate" "symbolize-property" "symbol" "let" "value" "property")}
        {Lisp-Entry "remove-property" #f 132 18 132 33 ("get-output" "set!" "properties" "put" "neq?" "when" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "symbolize-property" "symbol" "let" "target")}
        {Lisp-Entry "Flattened-Tags" #f 148 14 148 28 ("span" "input" "img" "div")}
        {Lisp-Entry "first-child" #f 152 18 152 29 ("car" "children" "null?" "if")}
        {Lisp-Entry "add-child" #f 158 26 158 35 ("list" "append!" "children" "set!" "node")}
        {Lisp-Entry "composite?" #f 162 18 162 28 ("simple?" "not")}
        {Lisp-Entry "simple?" #f 166 18 166 25 ("JML-Text" "sub" "function" "every?" "simple?" "Flattened-Tags" "get-tag" "memq?" "JML-Element" "is?" "car" "child" "length" "1" "=" "and" "or" "effective-children" "children" "let")}
        {Lisp-Entry "effective-children" #f 178 11 178 29 ("children")}
        {Lisp-Entry "find-by" #f 182 18 182 25 ("children" "find-if" "predicate")}
        {Lisp-Entry "find-node" #f 186 18 186 27 ("get-tag" "eq?" "JML-Element" "is?" "and" "child" "function" "find-by" "tag")}
        {Lisp-Entry "find-name" #f 193 26 193 35 ("'name" "get-property" "eq?" "JML-Element" "is?" "and" "child" "function" "find-by" "name")}
        {Lisp-Entry "find-property" #f 200 18 200 31 ("get-property" "equal?" "JML-Element" "is?" "and" "child" "function" "find-by" "value" "property")}
        {Lisp-Entry "get-child-text" #f 207 18 207 32 ("first-child" "get-text")}
        {Lisp-Entry "get-child-location" #f 216 11 216 29 ("children" "get-rank" "properties" "length" "1" "+" "list" "child")}
        {Lisp-Entry "->jml" #f 227 11 227 16 ("children->jml" "properties->jml" "tag->jml")}
        {Lisp-Entry "tag->jml" #f 231 18 231 26 ("tag" "format" "string->symbol")}
        {Lisp-Entry "properties->jml" #f 235 18 235 33 ("get-output" "properties" "property->jml" "put" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "property->jml" #f 244 18 244 31 ("symbol->keyword" "property")}
        {Lisp-Entry "children->jml" #f 248 18 248 31 ("children" "->jml" "child" "function" "map")}}}})
"JML-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jml" "text" "JML-Explorer.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jml.text.JML-Explorer" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "JML-Explorer" #f 46 7 46 19 ("C-Explorer")}}})
"JML-Node"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "model" "JML-Node.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.model.JML-Node" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "JML-Node" #f 45 7 45 15 ("Object")
        {Lisp-Entry "parent" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("self" "add-child" "when" "parent~self" "set!" "nextmethod" "parent")}
        {Lisp-Entry "get-parent" #f 63 18 63 28 ("parent")}
        {Lisp-Entry "set-parent" #f 67 18 67 28 ("self" "add-child" "when" "parent" "set!" "value")}
        {Lisp-Entry "set-parent-value" #f 73 18 73 34 ("parent" "set!" "value")}
        {Lisp-Entry "get-toplevel" #f 82 18 82 30 ("get-toplevel" "self" "parent" "not" "if")}
        {Lisp-Entry "get-location" #f 93 18 93 30 ("self" "get-child-location" "get-location" "append" "parent" "not" "if")}
        {Lisp-Entry "get-child-location" #f 100 26 100 44 ("child")}
        {Lisp-Entry "->jml" #f 109 35 109 40 ()}
        {Lisp-Entry "pretty-print" #f 118 18 118 30 ("child" "for-each" "car" "null?" "1" "=" "get-children" "children" "table-ref" "max" "neq?" "property" "for-each-property" "length" ">" "pres" "get-property" "value" "7" "+" "'name" "has-property?" "align-name?" "cardinality" "-" "pad" "not-null?" "space-properties?" "and" ":reader" ":human" "readably" "case" "get-properties" "properties" "cons" "symbol->string" "name" "get-tag" "tag" "let*" "single-line?" "get-text" "text" "JML-Text" "is?" "if" "set!" "2" "*" "indent-first?" "or" "format" "not" "when" "level" "path" "node" "iter" "letrec" "align-properties?" "base" "self" "compute-maxes" "maxes" "max-name" "max-tag" "receive" "first?" "let" "function" "with-printer" "printer")}
        {Lisp-Entry "compute-maxes" #f 190 11 190 24 ("values" "get-children" "1" "child" "for-each" "get-properties" "table-set!" "table-ref" "max" "'name" "eq?" "format" "cast" "value" "property" "for-each-property" "set!" ">" "not" "or" "2" "*" "cardinality" "+" "width" "cons" "symbol->string" "name" "get-tag" "tag" "let*" "JML-Element" "is?" "when" "level" "path" "function" "iter" "letrec" "equal?" "test:" "make-table" "essay" "maxes" "max-name" "max-tag" "let" "align-properties?" "base" "node")}}}})
"JML-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "parser" "JML-Parser.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.parser.JML-Parser" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "JML-Parser" #f 45 7 45 17 ("Object")
        {Lisp-Entry "preferences" #f 53 8 53 19 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("preferences~self" "set!" "nextmethod" "preferences" "preferences:")}
        {Lisp-Entry "get-preferences" #f 66 18 66 33 ("preferences")}
        {Lisp-Entry "parse" #f 75 18 75 23 ("parse-expr" "parse-reader" "port?" "if" "reader/expr")}
        {Lisp-Entry "parse-reader" #f 81 11 81 23 ("read" "parse-expr" "reader")}
        {Lisp-Entry "parse-expr" #f 85 11 85 21 ("parse-any" "expr" "parent")}
        {Lisp-Entry "parse-any" #f 89 11 89 20 ("parse-noexpand" "parse-pattern" "pattern-expr?" "if" "object" "parent")}
        {Lisp-Entry "parse-noexpand" #f 95 11 95 25 ("error" "else" "parse-expr" "sub" "function" "map" "parse-new-node" "car" "symbol?" "pair?" "and" "parse-node" "tagged-expr?" "set-parent" "JML-Node" "is?" "not" "cond" "object" "parent")}
        {Lisp-Entry "parse-pattern" #f 113 11 113 24 ("parse-any" "parse-noexpand" "eq?" "pair?" "and" "if" "expand-pattern" "expansion" "tag->name" "tag" "car" "first" "let*" "pattern" "parent")}
        {Lisp-Entry "parse-node" #f 122 11 122 21 ("parse-new-node" "parse-jml-node" "tag?" "if" "car" "first" "let" "expr" "parent")}
        {Lisp-Entry "parse-new-node" #f 129 11 129 25 ("set-children" "when" "parse-children" "children" "new" "apply" "node" "let*" "keywords?:" "parse-jml-properties/children" "children-list" "properties-list" "receive" "autoload" "class" "let" "rest" "model" "bind" "expr" "parent")}
        {Lisp-Entry "parse-jml-expr" #f 140 11 140 25 ("values" "parse-jml-properties/children" "children-list" "properties-list" "receive" "tag->name" "tag" "let" "rest" "first" "bind" "expr")}
        {Lisp-Entry "parse-jml-node" #f 147 11 147 25 ("set-properties" "parse-children" "children" "parse-properties" "properties" "JML-Element" "new" "node" "let*" "parse-jml-properties/children" "children-list" "properties-list" "receive" "tag->name" "tag" "let" "rest" "first" "bind" "expr" "parent")}
        {Lisp-Entry "parse-properties" #f 158 11 158 27 ("get-output" "put" "validate-property" "parse-property" "error" "ends-with?" "starts-with?" "or" "if" "symbol->string" "name" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let" "properties")}
        {Lisp-Entry "parse-children" #f 172 11 172 25 ("get-output" "add-nodes" "parse-expr" "jml" "JML-Text" "put" "string?" "if" "element" "function" "for-each" "List-Factory" "new" "fact" "let" "children" "parent")}
        {Lisp-Entry "add-nodes" #f 183 11 183 20 ("put" "add-nodes" "node" "function" "for-each" "null/pair?" "if" "nodes" "fact")}
        {Lisp-Entry "parse-property" #f 191 11 191 25 ("parse-value" "parse-property" "map" ":string" "car" "eq?" "pair?" "and" "if" "value")}
        {Lisp-Entry "parse-value" #f 197 11 197 22 ("parse-path" "Path" "is?" "if" "value")}
        {Lisp-Entry "parse-path" #f 203 11 203 21 ("get-alias" "cons" "append" "apply" "get-path" "path" "alias" "bind" "use-generator?" "use-generator?:" "value")}
        {Lisp-Entry "tag-valid?" #f 208 29 208 39 ("tag")}
        {Lisp-Entry "validate-tag" #f 212 29 212 41 ("error" "tag-valid?" "unless" "tag")}
        {Lisp-Entry "validate-property" #f 217 29 217 46 ("value" "property")}
        {Lisp-Entry "parse-result" #f 226 11 226 23 ("parse-noexpand" "expr")}
        {Lisp-Entry "tagged-expr?" #f 232 11 232 23 ("tag?" "car" "first" "let" "pair?" "and" "expr")}
        {Lisp-Entry "pattern-expr?" #f 238 11 238 24 ("self" "find-dispatch" "tag->name" "tag" "tag?" "car" "first" "let" "pair?" "and" "expr")}
        {Lisp-Entry "expand-pattern" #f 246 11 246 25 ("self" "find-dispatch" "pattern" "let" "tag" "tree")}
        {Lisp-Entry "get-alias" #f 256 29 256 38 ("error" "rest" "name")}}}})
"JML-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "preference" "JML-Preferences.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.preference.JML-Preferences" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "JML-Preferences" #f 45 7 45 22 ("Component")
        {Lisp-Entry "target" #f 48 12 48 18 ("generate")}
        {Lisp-Entry "jml-directory" #f 49 12 49 25 ("generate")}
        {Lisp-Entry "html-directory" #f 50 12 50 26 ("generate")}
        {Lisp-Entry "debug-tables?" #f 51 12 51 25 ("generate")}
        {Lisp-Entry "debug-colors?" #f 52 12 52 25 ("generate")}
        {Lisp-Entry "tab-size" #f 53 12 53 20 ("generate" "2")}
        {Lisp-Entry "get-class-presentation" #f 60 16 60 38 ()}
        {Lisp-Entry "get-class-image" #f 64 16 64 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 68 16 68 37 ("nextmethod" "else" "tab-size" "debug-colors?" "debug-tables?" "html-directory" "jml-directory" "target" "field-name" "case" "property")}
        {Lisp-Entry "get-presentation" #f 79 11 79 27 ()}
        {Lisp-Entry "get-categorized-properties" #f 83 11 83 37 ("tab-size" "debug-colors?" "debug-tables?" "html-directory" "jml-directory" "target")}
        {Lisp-Entry "get-row-instance" #f 87 11 87 27 ("nextmethod" "else" "Integer-Row" "tab-size" "Boolean-Row" "debug-colors?" "debug-tables?" "Directory-Row" "html-directory" "jml-directory" "String-Row" "new" "target" "field-name" "case" "property")}}}})
"JML-Renderer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "renderer" "JML-Renderer.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.renderer.JML-Renderer" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "JML-Renderer" #f 40 7 40 19 ("Object")
        {Lisp-Entry "preferences" #f 43 8 43 19 ()}
        {Lisp-Entry "initialize" #f 46 11 46 21 ("preferences~self" "set!" "nextmethod" "preferences")}
        {Lisp-Entry "render" #f 56 26 56 32 ("printer" "jml")}
        {Lisp-Entry "render-node" #f 60 26 60 37 ("printer" "level" "mix?" "simple?" "jml" "context")}}}})
"JML-SQL"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "JML-SQL.jazz"} 1226584780
    {Lisp-Entry "load-schedule-data" #f 3 11 3 29 ("Data-Schedule" "data-class:" "load-request" "get-connection" "d.intCommunity" "s.intCommunityOCDepartment" "h.intOCSchedule" "e.intOCScheduleShift" "=" ",id-list" "in" "e" "tblOCScheduleEvent" "h" "tblOCScheduleShift" "s" "tblOCSchedule" "d" "tblCommunityOCDepartment" "c" "as:" "tblCommunity" "e.intUser" "e.dteEnd" "e.dteStart" "e.intType" "e.intOCScheduleEvent" "h.intNextDay" "h.txtEnd" "h.txtStart" "h.txtShift" "h.intOCScheduleShift" "s.dteEnd" "s.dteStart" "s.txtName" "s.intOCSchedule" "d.txtName" "d.intCommunityOCDepartment" "c.txtName" "c.intCommunity" "name:" "request" "->string" "map" "join" "format" "id-list" "let*" "schedules" "connection")}})
"JML-Text"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "model" "JML-Text.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.model.JML-Text" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "JML-Text" #f 45 7 45 15 ("JML-Node")
        {Lisp-Entry "text" #f 48 8 48 12 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("text~self" "set!" "nextmethod" "text" "parent")}
        {Lisp-Entry "print" #f 56 11 56 16 ("text" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-text" #f 67 18 67 26 ("text")}
        {Lisp-Entry "set-text" #f 71 18 71 26 ("text" "set!" "value")}
        {Lisp-Entry "->jml" #f 80 11 80 16 ("text")}
        {Lisp-Entry "multi-line?" #f 89 18 89 29 ("text" "find-in")}
        {Lisp-Entry "single-line?" #f 93 18 93 30 ("multi-line?" "not")}}}})
"JML-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jml" "text" "JML-Text-Preferences.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jml.text.JML-Text-Preferences" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "JML-Text-Preferences" #f 47 7 47 27 ("title:" "Code-Text-Preferences")
        {Lisp-Entry "title-color" #f 50 12 50 23 ("generate")}
        {Lisp-Entry "line-comment-color" #f 51 12 51 30 ("generate")}
        {Lisp-Entry "definition-color" #f 52 12 52 28 ("generate")}
        {Lisp-Entry "keyword-color" #f 53 12 53 25 ("generate")}
        {Lisp-Entry "specifier-color" #f 54 12 54 27 ("generate")}
        {Lisp-Entry "keywords" #f 55 12 55 20 ("generate")}
        {Lisp-Entry "completions" #f 56 12 56 23 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 68 11 68 37 ("specifier-color" "keyword-color" "definition-color" "line-comment-color" "title-color" "completions" "keywords")}
        {Lisp-Entry "get-row-instance" #f 73 11 73 27 ("nextmethod" "else" "Completion-List-Row" "completions" "Color-Row" "new" "specifier-color" "keyword-color" "definition-color" "line-comment-color" "title-color" "field-name" "case" "property")}}}})
"JML-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jml" "text" "JML-Text-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jml.text.JML-Text-View" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "JML-Text-View" #f 47 7 47 20 ("Code-Text-View")
        {Lisp-Entry "install" #f 50 11 50 18 ("get-specifier-color" "Specifier" "'Specifier" "get-keyword-color" "Keyword" "'Keyword" "get-definition-color" "Definition" "'Definition" "get-line-comment-color" "Line-Comment" "'Line-Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 60 16 60 29 ("jml-text" "'jml-text" "rest")}
        {Lisp-Entry "preferences" #f 64 11 64 22 ("jml-text" "documents" "get-preferences")}
        {Lisp-Entry "get-constituent-test" #f 69 16 69 36 ("c-constituent?")}
        {Lisp-Entry "host-workspaces" #f 78 11 78 26 ("text")}
        {Lisp-Entry "favorite-completions" #f 87 11 87 31 ("jml-text" "documents" "get-preferences" "get-completions")}
        {Lisp-Entry "commented?" #f 91 11 91 21 ("Line-Comment" "'Line-Comment" "Title" "'Title" "inherits?" "or" "and" "get-style-at" "style" "let" "pos")}
        {Lisp-Entry "explorer-class" #f 103 11 103 25 ("JML-Explorer")}
        {Lisp-Entry "get-context" #f 112 11 112 22 ("jml")}
        {Lisp-Entry "current-name" #f 116 11 116 23 ("current-expr-range" "name-at")}
        {Lisp-Entry "name-at" #f 120 11 120 18 ("read-string-element" "element" "eqv?" "if" "0" "cardinality" ">" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "current-expr" #f 129 11 129 23 ("current-name")}
        {Lisp-Entry "current-expr-range" #f 133 11 133 29 ("get-end" "expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "expr-range" #f 139 11 139 21 ("get-range" "outer-expr" "end:" "start:" "self" "JML-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "expr-at" #f 145 11 145 18 ("expr-range" "name-at" "pos")}
        {Lisp-Entry "headers" #f 154 12 154 19 ("list")}
        {Lisp-Entry "get-headers" #f 159 11 159 22 ("headers")}
        {Lisp-Entry "get-first-special?" #f 163 11 163 29 ()}
        {Lisp-Entry "Definitions" #f 172 12 172 23 ()}
        {Lisp-Entry "get-definitions" #f 176 11 176 26 ("Definitions")}
        {Lisp-Entry "Keywords" #f 185 12 185 20 ()}
        {Lisp-Entry "get-keywords" #f 189 29 189 41 ("Keywords")}
        {Lisp-Entry "Syntax-Targets" #f 198 14 198 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 201 14 201 29 ()}
        {Lisp-Entry "syntax-targets" #f 205 11 205 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 211 11 211 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" #f 217 11 217 33 ("get-keywords" "keyword" "'keyword" "get-definitions" "definition" "'definition" "str" "function" "map" "line-comment" "'line-comment" "list" "append")}
        {Lisp-Entry "compute-syntax-automata" #f 223 11 223 34 ("c-constituent?" "self" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "colorize-syntax" #f 227 11 227 26 ("colorize-comments" "colorize-declarations" "function" "with-safe-explore" "rest")}
        {Lisp-Entry "colorize-type" #f 234 11 234 24 ("Keyword" "'Keyword" "keyword" "Definition" "'Definition" "colorize-keyword" "definition" "Title" "'Title" "Line-Comment" "'Line-Comment" "colorize-line-comment" "line-comment" "case" "recolorize?" "colorizer" "end" "start" "type" "found")}}}})
"JML-Transformation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "transformation" "JML-Transformation.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.transformation.JML-Transformation" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "JML-Transformation" #f 45 7 45 25 ("Object")
        {Lisp-Entry "parser" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("JML-Parser" "either" "new" "parser~self" "set!" "nextmethod" "parser-class" "parser-class:")}
        {Lisp-Entry "transform" #f 61 26 61 35 ("transform-jml" "parser" "parse" "node")}
        {Lisp-Entry "transform-jml" #f 65 18 65 31 ("get-children" "transform-jml" "map" "properties->jml" "tag->jml" "get-text" "JML-Text" "is?" "if" "transform-one" "new-node" "let" "node")}
        {Lisp-Entry "transform-one" #f 73 11 73 24 ("self" "parser" "parse" "if" "node-pattern" "pattern" "let" "node")}
        {Lisp-Entry "node-pattern" #f 85 11 85 23 ("self" "find-dispatch" "get-tag" "name->tag" "tag" "let" "JML-Element" "is?" "and" "node")}}}})
"JML-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jml" "viewer" "JML-Viewer.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jml.viewer.JML-Viewer" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "JML-Viewer" #f 47 7 47 17 ("notes" "notes-border" "Heading5" "Font" "font:" "Default" "Text-Style" "default-style:" "text" "text-border" "70" "vert" "second" "219" "width:" "on-selection-change" ":form" "Event-Handler" "selection-handler:" ":icons" "portfolio:" "jml-tree" "fill" "content" "vscroll?:" "document" "entry" "style:" "edge" "border-type:" "first" "jml-border" "30" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "center" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "Dimension" "size:" "toolbar" "name:" "border" "layout-type:" "title:" "Layout-View")
        {Lisp-Entry "document" #f 50 12 50 20 ("set-document" "get-document")}
        {Lisp-Entry "finish" #f 75 11 75 17 ("refresh" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 85 16 85 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 89 16 89 26 ()}
        {Lisp-Entry "host-position" #f 93 16 93 29 ("50" "Point")}
        {Lisp-Entry "host-size" #f 97 16 97 25 ("500" "800" "Point")}
        {Lisp-Entry "host-workspaces" #f 101 11 101 26 ("home")}
        {Lisp-Entry "get-document" #f 110 18 110 30 ("document")}
        {Lisp-Entry "set-document" #f 114 18 114 30 ("refresh" "document" "set!" "value")}
        {Lisp-Entry "resize" #f 124 11 124 17 ("notes-border" "'notes-border" "text-border" "'text-border" "0" "jml-border" "'jml-border" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "refresh" #f 131 18 131 25 ("view-text" "document" "view-tree" "clear-node")}
        {Lisp-Entry "clear-node" #f 137 11 137 21 ("clear-all" "'notes" "notes" "'text" "locate" "text" "let")}
        {Lisp-Entry "view-tree" #f 149 11 149 20 ("insert-node" "node" "for-each" "collect-children" "child-nodes" "get-childNodes" "lst" "with-closed" "hasChildNodes" "and" "when" "remove-every-row" "function" "with-update-locked" "jml-tree" "'jml-tree" "locate" "tree" "let" "document")}
        {Lisp-Entry "insert-node" #f 162 11 162 22 ("insert-node" "subnode" "function" "for-each" "collect-children" "child-nodes" "get-childNodes" "lst" "with-closed" "hasChildNodes" "when" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "subfather" "get-nodeName" "title" "jml-tree" "'jml-tree" "locate" "tree" "let*" "father" "node")}
        {Lisp-Entry "collect-children" #f 174 11 174 27 ("get-item" "collect" "get-length" "below" "0" "from" "n" "for" "loop" "lst")}
        {Lisp-Entry "view-text" #f 179 11 179 20 ("get-jml" "set-string-content" "clear-all" "null?" "if" "'text" "locate" "text" "let" "document")}
        {Lisp-Entry "describe-node" #f 186 11 186 24 ("get-nodeType" "get-nodeValue" "get-nodeName" "insert-bulleted-line" "'notes" "locate" "notes" "let" "node")}
        {Lisp-Entry "on-selection-change" #f 198 11 198 30 ("describe-node" "get-row" "get-user-data" "node" "when" "get-single-selection" "selection" "jml-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}}}})
"JVM"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "runtime" "JVM.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.runtime.JVM" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "JVM" #f 45 7 45 10 ("Object")
        {Lisp-Entry "setup-jvm" #f 49 23 49 32 ("Ansi-String" "build-option" "coerce" "parse" "jvm-setup" "classpath" "classpath:" "jvm-dll" "jvm-dll:")}
        {Lisp-Entry "build-option" #f 54 16 54 28 ("Java" "parse-classpath" "format" "classpath")}
        {Lisp-Entry "destroy-jvm" #f 59 23 59 34 ("jvm-destroy")}
        {Lisp-Entry "new-object" #f 69 23 69 33 ("jvm-new-object" "apply" "object" "get-method" "method" "proxy-parameters" "parameter-types" "java-external-signature" "signature" "get-node-procedure" "external" "find-constructor" "node" "Interpreter" "generic-dispatcher" "dispatcher" "'<init>" "category-field" "definition-value" "generic" "java-class" "class" "let*" "parameters" "jazz-class")}
        {Lisp-Entry "find-constructor" #f 83 16 83 32 ("car" "else" "cdr" "not-null?" "error" "null?" "cond" "class-of" "map" "find-generics" "nodes" "let" "parameters" "dispatcher")}
        {Lisp-Entry "find-class" #f 91 23 91 33 ("Java" "period->slash-notation-ansi" "jvm-find-class" "name")}
        {Lisp-Entry "class-exists?" #f 96 23 96 36 ("find-class" "exception" "Java-Exception" "catch" "name")}
        {Lisp-Entry "get-method" #f 105 23 105 33 ("Ansi-String" "coerce" "java-class" "jvm-get-method-id" "signature" "name" "jazz-class")}}}})
"Java"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "java" "Java.jazz"} 1226584779
    {Lisp-Entry "Java" #f 42 9 42 13 ("jazz")}})
"Java-Array"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "runtime" "Java-Array.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.runtime.Java-Array" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Java-Array" #f 45 7 45 17 ("Java-Object")}}})
"Java-Compiler"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "sdk" "Java-Compiler.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.sdk.Java-Compiler" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Java-Compiler" #f 48 7 48 20 ("Object")
        {Lisp-Entry "compile" #f 56 18 56 25 ("report-errors" "EXIT_SUCCESS" "/=" "if" "visible?:" "capture-error?:" "capture-output?:" "create-process" "error-lines" "output-lines" "code" "receive" "build-command" "command" "let" "parse" "user-message" "classpath" "classpath:" "directory" "directory:" "file")}
        {Lisp-Entry "build-command" #f 75 11 75 24 ("parse" "Java" "parse-classpath" "format" "classpath" "file")}
        {Lisp-Entry "report-errors" #f 84 11 84 24 ("error" "get-output-string" "msg" "line" "function" "for-each" "format" "open-output-string" "printer" "let" "lines")}}}})
"Java-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "catalog" "Java-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.java.catalog.Java-Entry" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Java-Entry" #f 47 7 47 17 ("Hierarchical-Entry")
        {Lisp-Entry "source-frame-type" #f 50 11 50 28 ("Java-Text-View")}}}})
"Java-Exception"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "exception" "Java-Exception.jazz"} 1226584778
    {Lisp-Entry "jazz.language.java.exception.Java-Exception" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Java-Exception" #f 45 7 45 21 ("Exception")
        {Lisp-Entry "exception" #f 48 8 48 17 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("exception~self" "set!" "nextmethod" "exception")}
        {Lisp-Entry "get-exception" #f 61 18 61 31 ("exception")}
        {Lisp-Entry "get-message" #f 70 11 70 22 ("get-output-string" "getStackTrace" "getMethodName" "getClassName" "element" "function" "for-each" "getMessage" "exception" "getClass" "getName" "format" "open-output-string" "printer" "let")}}}})
"Java-Extractor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "tools" "Java-Extractor.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.tools.Java-Extractor" #f 42 9 42 48 ("jazz")
      {Lisp-Entry "Java-Extractor" #f 54 7 54 21 ("Object")
        {Lisp-Entry "extract" #f 57 18 57 25 ("import-class" "printer" "function" "parse" "call-with-output-file" "slash->period-notation" "format" "new-file" "file" "let" "directory" "classname")}
        {Lisp-Entry "copy-methods" #f 64 18 64 30 ("get-output-string" "set-clipboard-text" "import-methods" "getMethods" "all-methods" "org.apache.bcel.Repository" "lookupClass" "javaClass" "open-output-string" "printer" "let*" "methods" "classname")}
        {Lisp-Entry "import-class" #f 72 11 72 23 ("import-methods" "when" "format" "getMethods" "methods" "getInterfaceNames" "interfaceNames" "getSuperclassName" "superclassName" "getPackageName" "packageName" "getClassName" "className" "org.apache.bcel.Repository" "lookupClass" "javaClass" "let*" "output-header" "printer" "classname")}
        {Lisp-Entry "import-methods" #f 90 11 90 25 ("import-method" "method-info" "function" "for-each" "first" "max-name" "third" "length" "max" "apply" "max-return" "method-infos" "get-method-info" "map" "all-method-infos" "let*" "printer" "methods" "all-methods")}
        {Lisp-Entry "get-method-info" #f 100 11 100 26 ("list" "getArgumentTypes" "map" "parameter-types" "getReturnType" "jazz-type" "return-type" "isFinal" "if" "propagation" "getName" "name" "let" "method")}
        {Lisp-Entry "import-method" #f 108 11 108 24 ("format" "=" "unless" "parameter-types" "return-type" "propagation" "name" "bind" "printer" "max-name" "max-return" "method-info")}
        {Lisp-Entry "Type-Alist" #f 121 14 121 24 ()}
        {Lisp-Entry "jazz-type" #f 132 11 132 20 ("jazz-signature-type" "getSignature" "signature" "let" "type")}
        {Lisp-Entry "jazz-signature-type" #f 137 11 137 30 ("error" "cdr" "if" "Type-Alist" "assv" "info" "else" "jazz-reference-type" "jazz-array-type" "case" "0" "element" "first" "let" "signature")}
        {Lisp-Entry "jazz-array-type" #f 149 11 149 26 ("1" "subseq" "jazz-signature-type" "format" "signature")}
        {Lisp-Entry "jazz-reference-type" #f 153 11 153 30 ("format" "=" "if" "length" "-" "1" "subseq" "classname" "substitute" "subs" "let*" "signature")}}}})
"Java-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "builder" "Java-File.jazz"} 1226584778
    {Lisp-Entry "jazz.language.java.builder.Java-File" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Java-File" #f 45 7 45 16 ("Project-File")
        {Lisp-Entry "build" #f 54 11 54 16 ("classpath:" "source" "compile" "require-classpath" "classpath" "Java-Compiler" "new" "javac" "let" "rest" "output" "log" "reporter" "product")}
        {Lisp-Entry "get-class-presentation" #f 65 16 65 38 ()}}}})
"Java-File-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "catalog" "Java-File-Entry.jazz"} 1226584778
    {Lisp-Entry "jazz.language.java.catalog.Java-File-Entry" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Java-File-Entry" #f 46 7 46 22 ("File-Entry")
        {Lisp-Entry "insert-definition" #f 55 11 55 28 ("insert-definitions" "get-output" "insert-imports" "insert-self" "when" "else" "put" "Import-Entry" "set!" "Package-Entry" "typecase" "definition" "function" "for-each" "others" "List-Factory" "new" "imports" "package" "get-definitions" "definitions" "let" "sort?" "father" "tree")}
        {Lisp-Entry "insert-imports" #f 73 11 73 25 ("insert-self" "import" "function" "for-each" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "17" "row-height:" "collapsed" "'collapsed" "state:" "father:" "add-row" "row" "get-catalog" "catalog" "let" "imports" "father" "tree")}}}})
"Java-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "tools" "Java-Manager.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.tools.Java-Manager" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Java-Manager" #f 53 7 53 19 ("175" "width:" "signature" "filled-column:" "methods" "second" "methods-border" "toplevel-controls?:" "name" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "multiple-selection?:" "classes" "fill" "content" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "first" "classes-border" "35" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "center" "splitter" "on-browse" "tail" "100" "title:" "browse" "on-copy-methods" "copy-methods" "on-generate-classes" "generate-classes" "on-edit" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "22" "edit" "0" "6" "2" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "Dimension" "size:" "toolbar" "name:" "border" "layout-type:" "Layout-View")
        {Lisp-Entry "current-classname" #f 56 8 56 25 ()}
        {Lisp-Entry "host-icon" #f 91 16 91 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 95 16 95 26 ()}
        {Lisp-Entry "host-position" #f 99 16 99 29 ("75" "74" "Point")}
        {Lisp-Entry "host-size" #f 103 16 103 25 ("460" "825" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 107 11 107 26 ("home")}
        {Lisp-Entry "resize" #f 116 11 116 17 ("0" "browse" "'browse" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-edit" #f 121 11 121 18 ("edit-source" "evt")}
        {Lisp-Entry "on-generate-classes" #f 125 11 125 30 ("generate-classes" "evt")}
        {Lisp-Entry "on-copy-methods" #f 129 11 129 26 ("copy-methods" "evt")}
        {Lisp-Entry "on-browse" #f 133 11 133 20 ("browse-jarfile" "browse-classfile" "ci=?" "cond" "get-extension" "ext" "extensions:" "choose-file" "file" "let*" "evt")}
        {Lisp-Entry "on-selection-change" #f 140 11 140 30 ("browse-methods" "1" "length" "=" "edit" "'edit" "locate" "set-enabled?" "get-selected-data" "classnames" "classes" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" #f 149 11 149 26 ("copy-methods" "methods" "edit-source" "classes" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "browse-classfile" #f 163 18 163 34 ("classfile")}
        {Lisp-Entry "browse-jarfile" #f 172 18 172 32 ("extract-jarfile-classnames" "view-classes" "jarfile")}
        {Lisp-Entry "extract-jarfile-classnames" #f 176 11 176 37 ("get-output" "put" "length" "-" "0" "subseq" "classname" "=" "when" "extract-extension" "extension" "find-in" "unless" "size" "filename" "function" "iterate-files" "Unzip-File" "unzip" "with-closed" "List-Factory" "new" "fact" "let" "jarfile")}
        {Lisp-Entry "browse-classes" #f 194 18 194 32 ("0" "list" "set-selection" "classes" "'classes" "locate" "tree" "let" "1" "length" "=" "when" "view-classes" "classnames")}
        {Lisp-Entry "view-classes" #f 201 11 201 23 ("insert-class" "classname" "for-each" "remove-every-row" "function" "with-update-locked" "classes" "'classes" "locate" "tree" "let" "classnames")}
        {Lisp-Entry "insert-class" #f 211 11 211 23 ("user-data:" "title:" "Bitmap-Resource" "image:" "Tree-Node" "new" "list" "children:" "add-row" "classname" "tree")}
        {Lisp-Entry "edit-source" #f 215 11 215 22 ("edit-category" "get-application" "appl" "car" "string->symbol" "classname" "get-selected-data" "classnames" "classes" "'classes" "locate" "tree" "let*")}
        {Lisp-Entry "generate-classes" #f 223 11 223 27 ("extract" "user-message" "classname" "function" "for-each" "get-selected-data" "classnames" "Java-Extractor" "new" "extractor" "choose-directory" "directory" "classes" "'classes" "locate" "tree" "let*")}
        {Lisp-Entry "browse-methods" #f 240 11 240 25 ("insert-methods" "car" "classname" "current-classname" "set!" "1" "length" "/=" "if" "remove-every-row" "function" "with-update-locked" "methods" "'methods" "locate" "tree" "let" "classnames")}
        {Lisp-Entry "insert-methods" #f 252 11 252 25 ("insert-method" "for-each" "getName" "method" "function" "key:" "getMethods" "<" "sort" "methods" "error" "null?" "if" "org.apache.bcel.Repository" "lookupClass" "javaClass" "let" "classname" "tree")}
        {Lisp-Entry "insert-method" #f 262 11 262 24 ("user-data:" "Tree-Label" "title:" "Bitmap-Resource" "image:" "Tree-Node" "new" "list" "children:" "add-row" "getSignature" "signature" "getName" "name" "let" "method" "tree")}
        {Lisp-Entry "insert-method" #f 269 11 269 24 ("Bitmap-Resource" "image:" "Tree-Node" "list" "children:" "add-row" "user-data:" "checked?:" "title:" "parent:" "Check-Box" "checkbox" "0" "2" "Rect" "layout-insets:" "fill" "'fill" "layout-type:" "Layout-View" "new" "layout-view" "getName" "name" "let*" "method" "tree")}
        {Lisp-Entry "copy-methods" #f 276 11 276 23 ("format-plural" "format" "message-box" "length" "count" "let" "copy-methods" "get-selected-data" "current-classname" "classname" "Java-Extractor" "new" "extractor" "methods" "'methods" "locate" "tree" "let*")}}}})
"Java-Object"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "runtime" "Java-Object.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.runtime.Java-Object" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Java-Object" #f 45 7 45 18 ("Object")}
      {Lisp-Entry "Java-Object" #f 51 7 51 18 ("int" "set-java-object" "get-java-object" "get-java-class" "Object")
        {Lisp-Entry "initialize" #f 54 11 54 21 ("class-of" "JVM" "new-object" "self" "set-java-object" "nextmethod" "rest")}
        {Lisp-Entry "print" #f 59 11 59 16 ("function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "java-class" #f 70 23 70 33 ("self" "get-java-class")}
        {Lisp-Entry "int" #f 74 22 74 25 ()}
        {Lisp-Entry "get-object" #f 82 18 82 28 ("self" "get-java-object")}
        {Lisp-Entry "int" #f 91 17 91 20 ()}
        {Lisp-Entry "void" #f 92 17 92 21 ()}}}})
"Java-Object-Array"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "runtime" "Java-Object-Array.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.runtime.Java-Object-Array" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Java-Object-Array" #f 45 7 45 24 ("Java-Array")}}})
"Java-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "parser" "Java-Parser.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.parser.Java-Parser" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Java-Parser" #f 46 7 46 18 ("File-Parser")
        {Lisp-Entry "parse" #f 49 11 49 16 ("catalog" "Java-File-Entry" "new" "time" "file")}
        {Lisp-Entry "parse" #f 54 11 54 16 ("references?" "include-references?:" "java-definitions" "catalog" "Java-File-Entry" "new" "Java-AST" "parse-java" "ast" "let" "time" "file")}
        {Lisp-Entry "parse-zipped" #f 60 11 60 23 ("references?" "include-references?:" "java-definitions" "Zipped-Entry" "new" "Java-AST" "read-content" "parse-java" "ast" "let" "zipped")}
        {Lisp-Entry "sweep" #f 71 11 71 16 ("qualify-origins" "qualify-categories" "file-entry" "function" "for-each" "content" "table-values" "append" "apply" "file-entries" "let" "nextmethod")}
        {Lisp-Entry "qualify-categories" #f 83 11 83 29 ("Category-Entry" "set-qualified" "list" "append" "qualified-path" "get-name" "name" "category-entry" "function" "for-each" "when" "first" "get-qualified" "essay" "package-path" "Package-Entry" "collect-type" "package-entries" "get-definitions" "definitions" "let*" "file-entry")}
        {Lisp-Entry "qualify-origins" #f 96 11 96 26 ("Category-Entry" "qualify-return-types" "set-implements" "set-extends" "best-implements" "best-qualify" "best-extends" "get-implements" "Class-Entry" "is?" "when" "implements" "get-extends" "extends" "category-entry" "for-each" "get-name" "equal?" "import" "function" "some?" "star-import?" "Import-Entry" "import-entries" "Package-Entry" "collect-type" "package-entries" "get-definitions" "definitions" "let*" "file-entry")}
        {Lisp-Entry "qualify-return-types" #f 118 11 118 31 ("get-definitions" "Method-Entry" "collect-type" "set-type" "when" "best-qualify-type" "best-type" "get-type" "return-type" "let*" "method-entry" "function" "for-each" "star-import?" "packages" "imports" "category-entry")}
        {Lisp-Entry "best-qualify" #f 128 11 128 23 ("get-parent" "else" "best-qualify" "'best-qualify" "debug" "not" "if" "0" "first" "case" "category-from-package" "packaged" "category-from-import" "imported" "last" "category-from-index" "indexed" "let" "map" "length" "1" "=" "item" "function" "some?" "when" "star-import?" "packages" "imports" "name-list")}
        {Lisp-Entry "best-qualify-type" #f 148 11 148 28 ("else" "not" "if" "0" "1" "length" "case" "category-from-package" "packaged" "category-from-import" "imported" "category-from-index" "indexed" "let" "first" "object-upper-case?" "String" "is?" "and" "when" "star-import?" "packages" "imports" "name")}
        {Lisp-Entry "category-from-index" #f 163 11 163 30 ("get-definitions" "Class-Entry" "collect-type" "get-qualified" "entry" "function" "map" "name")}
        {Lisp-Entry "category-from-import" #f 170 11 170 31 ("get-qualified" "import" "map" "last" "equal?" "import-path" "function" "collect-if" "remove-duplicates" "imports" "name")}
        {Lisp-Entry "category-from-package" #f 180 11 180 32 ("list" "append" "essay" "first" "get-qualified" "qualified" "let" "when" "packages" "name")}}}})
"Java-Primitive"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "runtime" "Java-Primitive.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.runtime.Java-Primitive" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Java-Primitive" #f 48 7 48 21 ("Primitive")}}})
"Java-Runtime"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "sdk" "Java-Runtime.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.sdk.Java-Runtime" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Java-Runtime" #f 48 7 48 19 ("Object")
        {Lisp-Entry "execute" #f 56 18 56 25 ("report-errors" "EXIT_SUCCESS" "/=" "if" "visible?:" "capture-error?:" "capture-output?:" "create-process" "error-lines" "output-lines" "code" "receive" "build-command" "command" "let" "arguments" "arguments:" "classpath" "classpath:" "directory" "directory:" "class-name")}
        {Lisp-Entry "build-command" #f 74 11 74 24 ("Java" "parse-classpath" "format" "arguments" "classpath" "class-name")}
        {Lisp-Entry "report-errors" #f 83 11 83 24 ("error" "get-output-string" "msg" "line" "function" "for-each" "format" "open-output-string" "printer" "let" "lines")}}}})
"Java-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "text" "Java-Text-Actions.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.text.Java-Text-Actions" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Java-Text-Actions" #f 46 7 46 24 ("java-text" "Action" "action:" "insert-accessors" "name:" "Actions")}}})
"Java-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "text" "Java-Text-Preferences.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.text.Java-Text-Preferences" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Java-Text-Preferences" #f 48 7 48 28 ("completions:" "keywords:" "Dark-Orange" "profile-macro-color:" "profile-keyword-color:" "Dark-Blue" "keyword-color:" "Dark-Green" "balanced-comment-color:" "Purple" "line-comment-color:" "title-color:" "Dark-Red" "name:" "Color" "definition-color:" "title:" "CLike-Text-Preferences")}}})
"Java-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "text" "Java-Text-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.text.Java-Text-View" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Java-Text-View" #f 49 7 49 21 ("CLike-Text-View")
        {Lisp-Entry "external-name" #f 52 16 52 29 ("java-text" "'java-text" "rest")}
        {Lisp-Entry "preferences" #f 56 11 56 22 ("java-text" "documents" "get-preferences")}
        {Lisp-Entry "host-workspaces" #f 65 11 65 26 ("text")}
        {Lisp-Entry "get-context-menu" #f 74 11 74 27 ("Java-Text-Menu" "new")}
        {Lisp-Entry "favorite-completions" #f 83 11 83 31 ("java-text" "documents" "get-preferences" "get-completions")}
        {Lisp-Entry "get-first-special?" #f 92 11 92 29 ()}
        {Lisp-Entry "Keywords" #f 101 12 101 20 ("nextmethod")}
        {Lisp-Entry "get-keywords" #f 158 11 158 23 ("Keywords")}
        {Lisp-Entry "get-user-macros" #f 167 11 167 26 ("java-text" "documents" "get-preferences" "get-macros" "user")}
        {Lisp-Entry "get-user-keywords" #f 171 11 171 28 ("java-text" "documents" "get-preferences" "get-keywords" "user")}
        {Lisp-Entry "get-user-types" #f 175 11 175 25 ("java-text" "documents" "get-preferences" "get-types" "user")}
        {Lisp-Entry "Syntax-Targets" #f 184 14 184 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 187 14 187 29 ()}
        {Lisp-Entry "syntax-targets" #f 191 11 191 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 197 11 197 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "get-parsed-entries" #f 204 11 204 29 ("delete-file" "unwind-protect" "get-content" "save-lines" "create-temporary-file" "file" "get-parsed-entries-from" "get-definitions" "get-controller" "get-moniker-time" "get-time" "time->seconds" "=" "car" "not-null?" "essay" "file-entry" "c" "context:" "get-file-entries" "entries" "let*" "get-modified?" "not" "file?" "and" "if" "get-application" "get-cataloguer" "cataloguer" "get-moniker" "moniker" "let")}
        {Lisp-Entry "get-parsed-entries-from" #f 221 11 221 34 ("clear-user-message" "include-references?:" "java-definitions" "definitions" "Java-AST" "parse-java" "ast" "let*" "get-start" "get-row" "user-message" "err" "Parse-Error" "catch" "file")}
        {Lisp-Entry "save-content" #f 236 11 236 23 ("recolorize-entries" "get-recolorize-on-save?" "and" "when" "error?:" "catalogs" "'catalogs" "get-preferences" "pref" "let" "nextmethod" "moniker")}
        {Lisp-Entry "on-insert-accessors" #f 248 11 248 30 ("insert-accessors" "0" "get-row" "Cell" "set-caret" "function" "undoer" "with-atomic-undo" "self" "Text-Printer" "new" "printer" "get-start" "start" "gather-properties" "properties" "car" "class" "get-parsed-entries" "entries" "let*" "evt")}
        {Lisp-Entry "gather-properties" #f 261 11 261 28 ("List" "static" "'static" "has-modifier?" "not" "Variable-Entry" "is?" "and" "entry" "function" "collect-if" "coerce" "get-definitions" "definitions" "let" "class")}
        {Lisp-Entry "insert-accessors" #f 270 11 270 27 ("insert-tostring" "insert-setter" "insert-getter" "format" "property" "function" "for-each" "printer" "properties" "class")}
        {Lisp-Entry "insert-getter" #f 281 11 281 24 ("capitalize" "format" "get-type" "type" "get-name" "name" "let" "printer" "property")}
        {Lisp-Entry "insert-setter" #f 290 11 290 24 ("capitalize" "format" "get-type" "type" "get-name" "name" "let" "printer" "property")}
        {Lisp-Entry "insert-tostring" #f 299 11 299 26 ("-" "name" "for-each" "length" "apply" "max" "capitalize" "property" "function" "map" "names" "let*" "get-name" "format" "printer" "properties" "class")}}
      {Lisp-Entry "Java-Text-Menu" #f 321 7 321 21 ("text" "goto-line" "java-text" "get-latest" "before:" "insert-accessors" "recolorize-syntax" "code-text" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "update-catalog" "name:" "Context-Menu")}}})
"JavaExternal-Expander"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "macro" "JavaExternal-Expander.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.macro.JavaExternal-Expander" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "JavaExternal-Expander" #f 45 7 45 28 ("Ansi-String" "executeQuery" "virtual" "public" "%java-external" "Object")
        {Lisp-Entry "executeQuery" #f 49 54 49 66 ()}
        {Lisp-Entry "expand" #f 58 23 58 29 (",signature" ",entry-name" ",parameter-types" ",return-type" ",@modifiers" "%java-external" ",name" ":location" "attribute" "compute-signature" "signature" "Ansi-String" "symbol->string" "coerce" "entry-name" "let" "parameter-types" "name" "return-type" "bind" "Interpreter" "parse-modifiers" "list" "modifiers" "meta?" "receive" "form")}
        {Lisp-Entry "compute-signature" #f 68 16 68 33 ("get-output-string" "java-type" "type" "function" "for-each" "format" "open-output-string" "printer" "let" "parameter-types" "return-type")}
        {Lisp-Entry "java-type" #f 80 16 80 25 ("Interpreter" "parse-specifier" "java-typeref" "specifier")}
        {Lisp-Entry "java-typeref" #f 85 16 85 28 ("error" "java-reference-type" "either" "else" "java-array-type" "javaarray" "javastring" "javadouble" "javafloat" "javalong" "javaint" "javashort" "javachar" "javabyte" "javabool" "javavoid" "case" "get-reference" "reference" "let" "typeref")}
        {Lisp-Entry "java-array-type" #f 104 16 104 31 ("java-typeref" "format" "get-parameters" "car" "let" "typeref")}
        {Lisp-Entry "java-reference-type" #f 110 16 110 35 ("symbol->string" "Java" "period->slash-notation" "format" "symbol?" "when" "reference")}}}})
"JavaScript-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "javascript" "text" "JavaScript-Explorer.jazz"} 1226584779
    {Lisp-Entry "jazz.language.javascript.text.JavaScript-Explorer" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "JavaScript-Explorer" #f 46 7 46 26 ("C-Explorer")}}})
"JavaScript-File-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "javascript" "text" "JavaScript-File-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.javascript.text.JavaScript-File-Entry" #f 37 9 37 60 ("jazz")
      {Lisp-Entry "JavaScript-File-Entry" #f 46 7 46 28 ("File-Entry")}}})
"JavaScript-Function-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "javascript" "text" "JavaScript-Function-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.javascript.text.JavaScript-Function-Entry" #f 37 9 37 64 ("jazz")
      {Lisp-Entry "JavaScript-Function-Entry" #f 46 7 46 32 ("C-Definition-Entry")
        {Lisp-Entry "get-image" #f 54 11 54 20 ("Bitmap-Resource")}}}})
"JavaScript-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "javascript" "text" "JavaScript-Parser.jazz"} 1226584779
    {Lisp-Entry "jazz.language.javascript.text.JavaScript-Parser" #f 37 9 37 56 ("jazz")
      {Lisp-Entry "JavaScript-Parser" #f 46 7 46 24 ("File-Parser")
        {Lisp-Entry "parse" #f 49 11 49 16 ("parse-definitions" "catalog" "JavaScript-File-Entry" "new" "time" "file")}
        {Lisp-Entry "parse-definitions" #f 53 11 53 28 ("get-output" "length" "0" "naturals" "find-function" "fn" "put" "when" "find-variable" "var" "n" "line" "function" "for-each" "List-Factory" "new" "fact" "char-encoding" "char-encoding:" "load-lines" "lines" "let" "file")}
        {Lisp-Entry "Var" #f 73 12 73 15 ()}
        {Lisp-Entry "find-variable" #f 77 11 77 24 ("subseq" "JavaScript-Variable-Entry" "new" "c-constituent?" "skip" ">" "start:" "skip-whitespace" "col" "start" "let*" "0" "=" "and" "when" "Var" "search" "pos" "cardinality" "len" "let" "n" "line")}
        {Lisp-Entry "Function" #f 95 12 95 20 ()}
        {Lisp-Entry "find-function" #f 99 11 99 24 ("subseq" "JavaScript-Function-Entry" "new" "c-constituent?" "skip" ">" "start:" "skip-whitespace" "col" "start" "let*" "0" "=" "and" "when" "Function" "search" "pos" "cardinality" "len" "let" "n" "line")}}}})
"JavaScript-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "javascript" "text" "JavaScript-Text-Preferences.jazz"} 1226584779
    {Lisp-Entry "jazz.language.javascript.text.JavaScript-Text-Preferences" #f 37 9 37 66 ("jazz")
      {Lisp-Entry "JavaScript-Text-Preferences" #f 49 7 49 34 ("completions:" "Dark-Blue" "keyword-color:" "definition-color:" "Purple" "line-comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "CLike-Text-Preferences")}}})
"JavaScript-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "javascript" "text" "JavaScript-Text-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.javascript.text.JavaScript-Text-View" #f 37 9 37 59 ("jazz")
      {Lisp-Entry "JavaScript-Text-View" #f 47 7 47 27 ("CLike-Text-View")
        {Lisp-Entry "external-name" #f 50 16 50 29 ("javascript-text" "'javascript-text" "rest")}
        {Lisp-Entry "preferences" #f 54 11 54 22 ("javascript-text" "documents" "get-preferences")}
        {Lisp-Entry "Syntax-Targets" #f 63 14 63 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 66 14 66 29 ()}
        {Lisp-Entry "syntax-targets" #f 70 11 70 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 76 11 76 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "favorite-completions" #f 87 11 87 31 ("javascript-text" "documents" "get-preferences" "get-completions")}
        {Lisp-Entry "Keywords" #f 96 12 96 20 ()}
        {Lisp-Entry "get-keywords" #f 120 11 120 23 ("Keywords")}
        {Lisp-Entry "get-user-macros" #f 129 11 129 26 ("javascript-text" "documents" "get-preferences" "get-macros" "user")}
        {Lisp-Entry "get-user-keywords" #f 133 11 133 28 ("javascript-text" "documents" "get-preferences" "get-keywords" "user")}
        {Lisp-Entry "get-user-types" #f 137 11 137 25 ("javascript-text" "documents" "get-preferences" "get-types" "user")}
        {Lisp-Entry "get-user-definitions" #f 141 11 141 31 ("javascript-text" "documents" "get-preferences" "get-definitions" "user")}}}})
"JavaScript-Variable-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "javascript" "text" "JavaScript-Variable-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.javascript.text.JavaScript-Variable-Entry" #f 37 9 37 64 ("jazz")
      {Lisp-Entry "JavaScript-Variable-Entry" #f 46 7 46 32 ("C-Definition-Entry")
        {Lisp-Entry "get-image" #f 54 11 54 20 ("Bitmap-Resource")}}}})
"Jazz-Code-Location"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "text" "Jazz-Code-Location.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Code-Location" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Jazz-Code-Location" #f 48 7 48 25 ("Code-Location")
        {Lisp-Entry "module-name" #f 51 8 51 19 ()}
        {Lisp-Entry "sublocation" #f 52 8 52 19 ()}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("setup-location" "nextmethod" "location")}
        {Lisp-Entry "setup-location" #f 60 11 60 25 ("last" "cons" "butlast" "sublocation" "module-name" "set!" "begin" "find-module-source" "compose-name" "apply" "name" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "null?" "if" "cdr" "sub" "car" "split-identifier" "path" "iterate" "let" "location")}
        {Lisp-Entry "print" #f 74 11 74 16 ("format" "sublocation" "module-name" "and" "when" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "edit" #f 82 11 82 15 ("focus-host" "set-visible?" "bring-to-front" "head" "'head" "force-vertical:" "ensure-displayed" "ensure-displayed?:" "set-selection" "range" "text" "frame" "receive" "when" "find-location" "location" "let" "error?" "error?:" "activate-focus?" "activate-focus?:" "workspace" "workspace:")}
        {Lisp-Entry "find-source" #f 95 18 95 29 ("module-name" "find-module-source")}
        {Lisp-Entry "find-location" #f 99 18 99 31 ("values" "cons" "toplevel-location:" "sublocation" "location-range" "range" "Jazz-Text-View" "is?" "get-guest" "text" "when" "module-name" "find-module" "frame" "let" "error?" "error?:" "workspace" "workspace:")}
        {Lisp-Entry "find-module" #f 109 11 109 22 ("location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "when" "visible?:" "Jazz-Text-View" "class:" "edit-document" "either" "find-module-source" "source" "get-application" "appl" "let*" "error?" "error?:" "workspace" "workspace:" "module-name")}}}})
"Jazz-Debugger"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debuggers" "jazz" "Jazz-Debugger.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debuggers.jazz.Jazz-Debugger" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Jazz-Debugger" #f 56 7 56 20 ("Debugger")
        {Lisp-Entry "processes" #f 59 8 59 17 ()}
        {Lisp-Entry "start-debugger" #f 67 11 67 25 ()}
        {Lisp-Entry "stop-debugger" #f 71 11 71 24 ()}
        {Lisp-Entry "get-processes" #f 75 11 75 24 ("processes" "validate-processes" "when" "validate-liveness?" "validate-liveness?:")}
        {Lisp-Entry "detach-processes" #f 81 11 81 27 ("processes" "detach-process" "proxy=?" "not" "when" "process-proxy" "function" "for-each" "get-local-process" "local-process" "let" "validate-processes")}
        {Lisp-Entry "validate-processes" #f 90 11 90 29 ("queue-list" "set!" "processes" "self" "Debugged-Process" "new" "close-process-debugger-resources" "enqueue" "valid-process?" "if" "process" "function" "for-each" "new-queue" "valid" "let")}
        {Lisp-Entry "valid-process?" #f 100 11 100 25 ("live?" "Local-Proxy" "is?" "or" "process-proxy")}
        {Lisp-Entry "process=?" #f 110 11 110 20 ("proxy-server=?" "y" "x")}
        {Lisp-Entry "process-live?" #f 114 11 114 24 ("live?" "process-proxy")}
        {Lisp-Entry "process-title" #f 118 11 118 24 ("get-title" "process-proxy")}
        {Lisp-Entry "process-icon" #f 122 11 122 23 ("get-icon" "process-proxy")}
        {Lisp-Entry "process-threads" #f 126 11 126 26 ("get-threads" "process-proxy")}
        {Lisp-Entry "present-process" #f 130 11 130 26 ("host->string" "format" "get-remoting-server" "listening-host" "host=?" "get-ior" "get-host" "host" "local-proxy?" "if" "get-title" "either" "title" "let" "process-proxy")}
        {Lisp-Entry "evaluate-expressions" #f 140 11 140 31 ("evaluate-expressions" "expressions" "process-proxy")}
        {Lisp-Entry "process-detach" #f 144 11 144 25 ("detach-process" "process-proxy")}
        {Lisp-Entry "process-exit" #f 148 11 148 23 ("exit-process" "process-proxy")}
        {Lisp-Entry "thread=?" #f 157 11 157 19 ("get-id" "=" "proxy-server=?" "and" "y" "y-process" "x" "x-process")}
        {Lisp-Entry "thread-name" #f 162 11 162 22 ("get-name" "thread-proxy" "process-proxy")}
        {Lisp-Entry "thread-state" #f 166 11 166 23 ("get-state" "thread-proxy" "process-proxy")}
        {Lisp-Entry "thread-stops" #f 170 11 170 23 ("get-stops" "thread-proxy" "process-proxy")}
        {Lisp-Entry "thread-active-stop" #f 174 11 174 29 ("last" "null?" "if" "thread-stops" "stops" "let" "thread-proxy" "process-proxy")}
        {Lisp-Entry "break-thread" #f 181 11 181 23 ("break-thread" "thread-proxy" "process-proxy")}
        {Lisp-Entry "set-repl-frame" #f 185 11 185 25 ("set-repl-frame" "frame-proxy" "thread-proxy" "process-proxy")}
        {Lisp-Entry "restart=?" #f 194 11 194 20 ("get-id" "=" "proxy-server=?" "and" "y" "y-process" "x" "x-process")}
        {Lisp-Entry "restart-name" #f 199 11 199 23 ("get-name" "restart-proxy" "process-proxy")}
        {Lisp-Entry "restart-message" #f 203 11 203 26 ("get-message" "restart-proxy" "process-proxy")}
        {Lisp-Entry "restart-stop" #f 207 11 207 23 ("restart-stop" "restart-proxy" "process-proxy")}
        {Lisp-Entry "stop=?" #f 216 11 216 17 ("get-id" "=" "proxy-server=?" "and" "y" "y-process" "x" "x-process")}
        {Lisp-Entry "stop-kind" #f 221 11 221 20 ("get-kind" "stop-proxy" "process-proxy")}
        {Lisp-Entry "stop-reason" #f 225 11 225 22 ("get-reason" "stop-proxy" "process-proxy")}
        {Lisp-Entry "stop-detail" #f 229 11 229 22 ("get-detail" "stop-proxy" "process-proxy")}
        {Lisp-Entry "stop-restarts" #f 233 11 233 24 ("get-restarts" "stop-proxy" "process-proxy")}
        {Lisp-Entry "stop-frames" #f 237 11 237 22 ("get-frames" "stop-proxy" "process-proxy")}
        {Lisp-Entry "continue-stop" #f 241 11 241 24 ("continue-stop" "stop-proxy" "process-proxy")}
        {Lisp-Entry "frame=?" #f 250 11 250 18 ("get-id" "=" "proxy-server=?" "and" "y" "y-process" "x" "x-process")}
        {Lisp-Entry "frame-name" #f 255 11 255 21 ("get-name" "frame-proxy" "process-proxy")}
        {Lisp-Entry "frame-location" #f 259 11 259 25 ("get-location" "frame-proxy" "process-proxy")}
        {Lisp-Entry "frame-variables" #f 263 11 263 26 ("get-variables" "frame-proxy" "process-proxy")}
        {Lisp-Entry "frame-variable-name" #f 267 11 267 30 ("car" "variable" "frame-proxy" "process-proxy")}
        {Lisp-Entry "frame-variable-value" #f 271 11 271 31 ("cdr" "variable" "frame-proxy" "process-proxy")}
        {Lisp-Entry "attach-process" #f 285 11 285 25 ("get-processes-view" "update" "self" "Debugged-Process" "new" "focus-process" "get-focused-process" "not" "when" "list" "append!" "set!" "process=?" "test:" "processes" "member?" "unless" "process-proxy")}
        {Lisp-Entry "update-process" #f 293 11 293 25 ("get-processes-view" "update" "get-values" "set-values" "and" "process=?" "test:" "processes" "find-in" "actual" "let" "remote-proxy?" "when" "process-proxy")}
        {Lisp-Entry "detach-process" #f 301 11 301 25 ("get-processes-view" "update" "car" "not-null?" "focus-process" "get-reference" "and" "get-focused-process" "focused-process" "let" "remove!" "set!" "self" "Debugged-Process" "new" "close-process-debugger-resources" "process=?" "test:" "processes" "member?" "when" "process-proxy")}
        {Lisp-Entry "register-console" #f 316 18 316 34 ("object->serial" "register-debugger-resource" "unregister-debugger-console" "Debugger-Resource" "console" "register-debugger-console" "text" "self" "Debugged-Process" "new" "process" "let" "function" "call-event" "thread-proxy" "process-proxy")}
        {Lisp-Entry "unregister-console" #f 330 18 330 36 ("serial->object" "close-resource" "resource")}
        {Lisp-Entry "console-output" #f 334 18 334 32 ("debugger-console-output" "serial->object" "get-reference" "text" "let" "str" "resource")}
        {Lisp-Entry "status-message" #f 344 18 344 32 ("user-message" "message")}
        {Lisp-Entry "get-toplevel-hwnd" #f 353 18 353 35 ("get-toplevel" "get-handle")}
        {Lisp-Entry "debugger-sound" #f 362 14 362 28 ("Jazz" "File")}
        {Lisp-Entry "debuggee-stop" #f 366 18 366 31 ("thread-change" "set-selected-thread" "selected-thread" "process-change" "set-selected-process" "if" "debugged=?" "not" "or" "when" "selected-process" "selection" "highlight-process" "set-debugged-problem?" "set-debugged-visit?" "get-frames-view" "frames-view" "Debugged-Thread" "thread" "get-threads-view" "threads-view" "self" "Debugged-Process" "new" "process" "get-processes-view" "processes-view" "notify" "problem?" "selected-workspace" "get-name" "neq?" "visit?" "debugger" "'debugger" "get-application" "find-toolbar" "locate-component" "button" "let" "with-locked-update" "debugger-sound" "play-sound" "function" "execute-event" "reason" "kind" "stop-proxy" "thread-proxy" "process-proxy")}}}})
"Jazz-Documentation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "documentation" "Jazz-Documentation.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.documentation.Jazz-Documentation" #f 37 9 37 60 ("jazz")
      {Lisp-Entry "Jazz-Documentation" #f 48 7 48 25 ("Black" "gradient-end:" "Red" "name:" "Color" "gradient-start:" "630" "800" "Dimension" "size:" "Presentation")
        {Lisp-Entry "default-name" #f 55 11 55 23 ("Documentation" "'Documentation")}
        {Lisp-Entry "host-title" #f 64 16 64 26 ()}
        {Lisp-Entry "host-position" #f 68 16 68 29 ("20" "35" "Point")}
        {Lisp-Entry "host-size" #f 72 16 72 25 ("630" "600" "Dimension")}}}})
"Jazz-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "text" "Jazz-Explorer.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Explorer" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Jazz-Explorer" #f 49 7 49 20 ("Lisp-Explorer")
        {Lisp-Entry "Modifiers" #f 52 14 52 23 ("value" "call" "exec" "post" "deprecated" "unimplemented" "synchronized" "inline" "abstract" "chained" "virtual" "final" "primitive" "public" "protected" "package" "private" "meta" "dialect")}
        {Lisp-Entry "get-modifiers" #f 56 11 56 24 ("Modifiers")}
        {Lisp-Entry "forward-in" #f 65 18 65 28 ("set-end" "exit-list" "intern-marked-symbol" "package" "forward-expr" "skip-forward" "enter-list" "and" "if" "get-end" "copy" "e" "let")}
        {Lisp-Entry "forward-category" #f 77 18 77 34 ("collect-categories-keywords" "list" "global-value" "symbol-bound?" "essay" "category" "get-end" "end:" "get-start" "start:" "get-marked" "format" "message:" "Explore-Error" "new" "signal" "in-manifest?" "not" "or" "name" "symbol" "'symbol" "get-kind" "eq?" "forward-modifiers" "meta?" "intern-marked-symbol" "kind" "let" "remotable-stub" "interface" "class" "find-marked-symbol" "memq?" "forward-expr" "enter-list" "and" "when")}
        {Lisp-Entry "forward-category-keywords" #f 93 11 93 36 ("set-end" "set-start" "when" "implements" "extends" "metaclass" "remotable-stub" "interface" "class" "library" "module" "memq?" "or" "find-marked-symbol" "set!" "begin" "forward-expr" "and" "while" "get-end" "previous" "keyword" "let" "proc")}
        {Lisp-Entry "collect-categories-keywords" #f 109 11 109 38 ("get-output" "get-marked" "read-string-element" "resolve-categories" "put" "keyword" "function" "forward-category-keywords" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "resolve-categories" #f 118 11 118 29 ("load" "map" "autoload" "symbol?" "if" "names")}
        {Lisp-Entry "forward-location" #f 129 18 129 34 ("forward-numeric" "forward-definition" "symbol?" "forward-form" ":form" "forward-new-form" ":new-form" "meta" "'meta" "eq?" "unless" "else" "either" "location:" "bad" "'bad" "kind:" "Location-Error" "new" "signal" "enter-composite" "not" "1" "and" "cdr" "set!" "forward-expr" "forward" "eqv?" "cond" "0" "char-forward" "c0" "forward-whites" "get-start" "set-end" "car" "ref" "not-null?" "while" "scan" "let" "toplevel-location" "toplevel-location:" "location")}
        {Lisp-Entry "forward-new-form" #f 164 11 164 27 ("get-start" "set-end" "forward-category-keywords" "toplevel-location" "toplevel-location:")}
        {Lisp-Entry "forward-form" #f 169 11 169 23 ("'form" "either" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "forward-valid-expr" "when" "form" "form-expr?" "not" "while" "toplevel-location" "toplevel-location:")}
        {Lisp-Entry "forward-definition" #f 175 11 175 29 ("either" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "forward-valid-expr" "when" "definition-only-name" "neq?" "definition-expr?" "not" "or" "while" "toplevel-location" "toplevel-location:" "name")}
        {Lisp-Entry "forward-numeric" #f 182 11 182 26 ("decrease!" "either" "location:" "unknown" "'unknown" "kind:" "Location-Error" "new" "signal" "forward-valid-expr" "not" "when" "0" ">=" "while" "toplevel-location" "toplevel-location:" "n")}
        {Lisp-Entry "forward-valid-expr" #f 189 11 189 29 ("else" "expr-comment" "'expr-comment" "eq?" "cond" "forward-expr" "kind" "let")}
        {Lisp-Entry "jazz-declaration?" #f 203 18 203 35 ("remotable-stub" "interface" "class" "library" "module" "form-expr?")}
        {Lisp-Entry "jazz-module-parameters" #f 207 14 207 36 ("require")}
        {Lisp-Entry "jazz-library-parameters" #f 210 14 210 37 ("import" "export" "require")}
        {Lisp-Entry "jazz-class-keywords" #f 213 14 213 33 ("attributes" "implements" "extends" "metaclass")}
        {Lisp-Entry "jazz-interface-keywords" #f 216 14 216 37 ("attributes" "extends" "metaclass")}
        {Lisp-Entry "jazz-declaration" #f 220 18 220 34 ("set-start" "jazz-interface-declaration" "interface" "jazz-class-declaration" "class" "jazz-library-declaration" "library" "jazz-module-declaration" "module" "case" "prog1" "jazz-symbol" "type" "forward-expr" "enter-list" "set-end" "end" "e" "start" "copy" "s" "let")}
        {Lisp-Entry "jazz-module-declaration" #f 236 11 236 34 ("cons" "jazz-module-parameters" "jazz-collect-parameters" "parameters" "get-marked" "name" "let" "forward-expr" "forward-modifiers")}
        {Lisp-Entry "jazz-library-declaration" #f 245 11 245 35 ("cons" "jazz-library-parameters" "jazz-collect-parameters" "parameters" "dialect" "get-marked" "name" "let" "forward-expr" "forward-modifiers")}
        {Lisp-Entry "jazz-class-declaration" #f 256 11 256 33 ("cons" "jazz-class-keywords" "jazz-collect-keywords" "keywords" "get-marked" "name" "let" "forward-expr" "forward-modifiers")}
        {Lisp-Entry "jazz-interface-declaration" #f 265 11 265 37 ("cons" "jazz-interface-keywords" "jazz-collect-keywords" "keywords" "get-marked" "name" "let" "forward-expr" "forward-modifiers")}
        {Lisp-Entry "jazz-collect-parameters" #f 274 11 274 34 ("get-output" "exit-list" "get-range-string" "put" "memq?" "jazz-symbol" "expr" "symbol" "'symbol" "forward-expr" "enter-list" "set-end" "get-end" "e" "get-start" "s" "list" "'list" "kind" "eq?" "when" "iterate" "List-Factory" "new" "fact" "let" "parameters")}
        {Lisp-Entry "jazz-collect-keywords" #f 293 11 293 32 ("get-output" "get-marked" "forward-expr" "->string" "put" "memq?" "jazz-symbol" "expr" "symbol" "'symbol" "kind" "eq?" "when" "iterate" "List-Factory" "new" "fact" "let" "keywords")}
        {Lisp-Entry "jazz-symbol" #f 307 11 307 22 ("get-marked" "string->symbol")}
        {Lisp-Entry "Jazz-Toplevels" #f 316 14 316 28 ("datacontainer" "attributes" "java-method" "java-external" "com-method" "com-external" "com-interface" "com-class" "c-external" "external" "intrinsic" "specific" "generic" "c-definition" "c-structure" "structure" "c-type" "c-include" "c-enumeration" "c-constant" "global" "enumeration" "constant" "form" "property" "slot" "inline" "method" "syntax" "macro" "definition" "remotable-stub" "interface" "class" "library" "module")}
        {Lisp-Entry "definition-name?" #f 320 11 320 27 ("Jazz-Toplevels" "memq?" "name")}
        {Lisp-Entry "walk-declaration" #f 329 11 329 27 ("exit-list" "unless" "walk-unknown" "else" "walk-datacontainer" "datacontainer" "walk-java-method" "java-method" "walk-java-external" "java-external" "walk-com-external" "com-external" "c-external" "walk-external" "external" "walk-intrinsic" "intrinsic" "walk-specific" "specific" "walk-generic" "generic" "walk-c-definition" "c-definition" "walk-c-structure" "c-structure" "walk-structure" "structure" "walk-type" "c-type" "walk-enumeration" "enumeration" "walk-constant" "constant" "walk-c-include" "c-include" "walk-c-named-declare" "c-named-declare" "walk-c-declare" "c-declare" "walk-c-initialize" "c-initialize" "walk-c-enumeration" "c-enumeration" "walk-c-constant" "c-constant" "walk-global" "global" "walk-form" "form" "walk-property" "property" "c-slot" "walk-slot" "slot" "inline" "c-method" "pattern" "walk-method" "method" "syntax" "macro" "walk-macro" "%macro" "walk-define-macro" "define-macro" "walk-specialize" "specialize" "walk-definition" "definition" "walk-define" "define" "walk-attributes" "walk-native" "native" "walk-properties" "properties" "walk-proclaim" "proclaim" "walk-declare" "declare" "import" "export" "require" "products" "project" "install" "walk-import" "root" "package" "remotable-stub" "interface" "class" "walk-category" "walk-begin" "begin" "case" "code" "'code" "start" "attributes" "includes" "exports" "imports" "dialect" "module" "library" "on" "has" "implements" "extends" "metaclass" "find-marked-symbol" "memq?" "symbol" "'symbol" "kind" "eq?" "and" "forward-expr" "if" "end" "get-row" "=" "not" "or" "when" "enter-list" "list?" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-modifiers" #f 407 11 407 25 ("set!" "start" "get-modifiers" "find-marked-symbol" "memq?" "forward-constituent" "get-row" "=" "not" "or" "jazz-constituent?" "and" "when" "0" "char-forward" "c0" "set-start" "forward-whites" "iterate" "end" "copy" "old" "let" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-begin" #f 424 11 424 21 ("walk-declarations" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-category" #f 428 18 428 31 ("walk-declarations" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-import" #f 438 11 438 22 ("end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-declare" #f 442 11 442 23 ("end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-proclaim" #f 446 11 446 24 ("end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-properties" #f 450 11 450 26 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-native" #f 456 11 456 22 ("walk-expressions" "symbol-documented?" "set!" "get-marked" "name" "get-row" "=" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "walk-modifiers" "end" "start" "entry" "string-length" "1" "+" "substring" "not" "if" "reversed?:" "find" "pos" "let" "str" "parse-identifier" "define" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-attributes" #f 475 11 475 26 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define" #f 481 11 481 22 ("walk-declarations" "exit-list" "walk-parameters" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-definition" #f 499 11 499 26 ("code" "'code" "walk-expressions" "exit-list" "walk-parameters" "or" "enter-list" "else" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "not" "cond" "0" "char-forward" "eqv?" "list?" "=" "when" "forward-whites" "walk-modifiers" "start" "end" "get-row" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-specialize" #f 521 11 521 26 ("code" "'code" "walk-expressions" "exit-list" "walk-parameters" "or" "enter-list" "else" "set!" "cond" "list?" "symbol-documented?" "get-marked" "as" "'as" "find-marked-symbol" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "0" "char-forward" "eqv?" "not" "=" "when" "forward-whites" "walk-modifiers" "start" "end" "get-row" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define-macro" #f 549 11 549 28 ("walk-declarations" "exit-list" "code" "'code" "walk-expressions" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-macro" #f 567 11 567 21 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-method" #f 582 18 582 29 ("code" "'code" "walk-expressions" "exit-list" "walk-parameters" "forward-whites" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-slot" #f 598 11 598 20 ("walk-expressions" "code" "'code" "walk-expression" "accessors" "setter" "getter" "initialize" "memq?" "if" "while" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "=" "when" "forward-whites" "walk-modifiers" "start" "end" "get-row" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-property" #f 616 11 616 24 ("walk-expressions" "code" "'code" "walk-expression" "accessors" "setter" "getter" "initialize" "memq?" "if" "while" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-form" #f 631 11 631 20 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-global" #f 637 11 637 22 ("find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-constant" #f 646 11 646 26 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-enumeration" #f 657 11 657 29 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-initialize" #f 668 11 668 28 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-declare" #f 674 11 674 25 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-named-declare" #f 680 11 680 31 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-include" #f 686 11 686 25 ("walk-expressions" "when" "end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-constant" #f 692 11 692 24 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-enumeration" #f 703 11 703 27 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-type" #f 714 11 714 20 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-structure" #f 725 11 725 25 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-structure" #f 736 11 736 27 ("walk-expressions" "exit-list" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "0" "char-forward" "eqv?" "list?" "=" "when" "forward-whites" "walk-modifiers" "start" "end" "get-row" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-c-definition" #f 755 11 755 28 ("walk-expressions" "exit-list" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "0" "char-forward" "eqv?" "list?" "=" "when" "forward-whites" "walk-modifiers" "start" "end" "get-row" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-generic" #f 774 11 774 23 ("walk-expressions" "exit-list" "walk-parameters" "get-row" "=" "or" "enter-list" "find-marked-symbol" "symbol-documented?" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "0" "char-forward" "eqv?" "not" "if" "forward-whites" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-specific" #f 792 11 792 24 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-intrinsic" #f 806 11 806 25 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "symbol" "'symbol" "kind" "eq?" "enter-list" "entered?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-external" #f 823 11 823 24 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "symbol" "'symbol" "kind" "eq?" "and" "enter-list" "entered?" "forward-expr" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-com-external" #f 840 11 840 28 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "symbol" "'symbol" "kind" "eq?" "enter-list" "entered?" "forward-expr" "and" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-java-external" #f 857 11 857 29 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "symbol" "'symbol" "kind" "eq?" "and" "enter-list" "entered?" "forward-expr" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-java-method" #f 874 11 874 27 ("walk-expressions" "exit-list" "walk-parameters" "find-marked-symbol" "symbol-documented?" "get-marked" "symbol" "'symbol" "kind" "eq?" "and" "enter-list" "entered?" "forward-expr" "when" "walk-modifiers" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-datacontainer" #f 891 11 891 29 ("walk-expressions" "find-marked-symbol" "symbol-documented?" "get-marked" "forward-expr" "when" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-unknown" #f 901 11 901 23 ("walk-expressions" "code" "'code" "walk-expression" "when" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "symbol-documentation" #f 907 11 907 31 ("get-definition" "and" "when" "doc" "symbol")}
        {Lisp-Entry "symbol-documented?" #f 912 11 912 29 ("symbol-documentation" "doc" "symbol")}
        {Lisp-Entry "highlight-range" #f 921 18 921 33 ("edit?:" "break" "update-view" "get-range" "text" "set-selection")}}}})
"Jazz-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "builder" "Jazz-File.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.builder.Jazz-File" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Jazz-File" #f 46 7 46 16 ("Project-File")
        {Lisp-Entry "tester?" #f 49 12 49 19 ("generate")}
        {Lisp-Entry "print" #f 52 11 52 16 ("name" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-product" #f 66 18 66 29 ("project" "Product" "self" "is?" "if")}
        {Lisp-Entry "get-class-presentation" #f 79 16 79 38 ()}
        {Lisp-Entry "property-presentation" #f 83 16 83 37 ("nextmethod" "else" "tester?" "field-name" "case" "property")}
        {Lisp-Entry "can-rename-component?" #f 89 11 89 32 ()}
        {Lisp-Entry "get-categorized-properties" #f 93 11 93 37 ("tester?" "build?" "source")}
        {Lisp-Entry "get-row-instance" #f 97 11 97 27 ("nextmethod" "else" "Boolean-Row" "new" "tester?" "field-name" "case" "property")}}}})
"Jazz-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "parser" "Jazz-Parser.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.parser.Jazz-Parser" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Jazz-Parser" #f 47 7 47 18 ("Lisp-Parser")
        {Lisp-Entry "explorer-class" #f 50 11 50 25 ("Jazz-Explorer" "file")}
        {Lisp-Entry "text-view-class" #f 54 11 54 26 ("Jazz-Text-View")}}}})
"Jazz-Plain-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "text" "Jazz-Plain-Text-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Plain-Text-View" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Jazz-Plain-Text-View" #f 46 7 46 27 ("Plain-Text-View")
        {Lisp-Entry "install" #f 49 11 49 18 ("get-comment-color" "Comment" "'Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "colorize-comments" #f 61 11 61 28 ("Title" "'Title" "4" "+" "Comment" "'Comment" "stylize" "not" "if" "title?" "end" "start" "function" "for-each-comment" "text-beginning" "end:" "self" "Jazz-Explorer" "new" "expl" "let" "jazz" "'jazz" "type-heuristic" "eq?" "when" "rest")}
        {Lisp-Entry "recolorize-text" #f 72 11 72 26 ("recolorize-row" "for-each" "1" "+" "get-row" "naturals" "range" "let" "jazz" "'jazz" "type-heuristic" "eq?" "when" "end-row" "start")}
        {Lisp-Entry "recolorize-row" #f 78 11 78 25 ("recolorize-comments" "row")}
        {Lisp-Entry "recolorize-comments" #f 82 11 82 30 ("Title" "'Title" "Cell" "new" "Comment" "'Comment" "stylize" "begin" "title-comment-string" "subseq" "=" "<" "if" "4" "+" "title-end" "let" "20" "<=" "when" "search" "and" "comment" "syntax" "comment-string" "cardinality" "len" "paragraph-string" "line" "let*" "row")}}}})
"Jazz-Presentation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "presentation" "Jazz-Presentation.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.presentation.Jazz-Presentation" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "Jazz-Presentation" #f 48 7 48 24 ("Black" "gradient-end:" "Blue" "name:" "Color" "gradient-start:" "Presentation")
        {Lisp-Entry "default-name" #f 55 11 55 23 ("Presentation" "'Presentation")}
        {Lisp-Entry "host-title" #f 64 16 64 26 ()}
        {Lisp-Entry "host-position" #f 68 16 68 29 ("20" "35" "Point")}
        {Lisp-Entry "host-size" #f 72 16 72 25 ("600" "800" "Dimension")}}}})
"Jazz-Product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debuggers" "jazz" "Jazz-Product.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debuggers.jazz.Jazz-Product" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Jazz-Product" #f 47 7 47 19 ("Product")
        {Lisp-Entry "product" #f 50 12 50 19 ("generate")}
        {Lisp-Entry "launch" #f 58 11 58 17 ("show-console:" "stderr-redirection:" "stdout-redirection:" "stdin-redirection:" "arguments:" "get-parent" "directory:" "parse" "get-name" "path:" "open-process" "debug" "save-all" "find-executable" "executable" "append" "arguments" "arguments-arg" "action-arg" "profile-arg" "default-profile" "either" "listening-port" "port->string" "controllerport-arg" "get-remoting-server" "listening-host" "host->string" "controllerhost-arg" "if" "debug-arg" "product" "->string" "product-arg" "list" "runtime-arg" "interpreted?" "let*" "start-jazz-debugger" "start-remoting-server" "when" "get-process" "ide" "let" "wait?" "wait?:" "show-console?" "show-console?:" "command-arguments" "command-arguments:" "command-action" "command-action:" "profile" "profile:" "debug?" "debug?:" "configuration" "configuration:")}
        {Lisp-Entry "default-profile" #f 93 29 93 44 ()}
        {Lisp-Entry "find-executable" #f 97 29 97 44 ("find-runtime" "else" "not" "debug" "'debug" "safety:" "actual-runtime" "cond" "get-process" "ide" "let" "interpreted?" "configuration")}
        {Lisp-Entry "property-presentation" #f 112 16 112 37 ("nextmethod" "else" "product" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 118 11 118 37 ("catalog-heuristics" "catalog-extensions" "catalog?" "version" "copyright" "owner" "icon" "include-extensions" "product" "title")}}}})
"Jazz-Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "Jazz-Project.jazz"} 1227124458
    {Lisp-Entry "Jazz-Project" #f 37 9 37 21 ("Jazz-Project" "register-autoclass" "jazz")
      {Lisp-Entry "Jazz-Project" #f 48 7 48 19 ("Jazz-Project" "test" "pt" "product" "cffi" "b" "a" "_test" "XSLT" "XML-Tree-Viewer" "XML-Transformer" "XML-Handler" "XML-Formatter" "XML-Consumer" "SXML" "XML" "XML-Parser" "XML-Text" "XML-Node" "XML-Element" "XML-Document" "XML-Data" "XML-Comment" "XML-Attribute" "_validation" "_q" "_p" "J" "I" "q" "p" "m" "_modules" "Y" "X" "_validate" "Validation-Suite" "Validate" "Tester" "Tester-Error" "Test-Table" "Test-Model" "Test-Architecture" "Test-Architecture-Form" "Vector-Tester" "Variable-Tester" "Values-Tester" "Thread-Tester" "Table-Tester" "Syntax-Tester" "Symbol-Tester" "Structure-Tester" "String-Tester" "Sequence-Tester" "Scheme-Tester" "Reader-Tester" "Pathname-Tester" "Object-Tester" "Number-Tester" "List-Tester" "Iterator-Tester" "Function-Tester" "Format-Tester" "Form-Tester" "Explorer-Tester" "Error-Tester" "Enumeration-Tester" "Designer-Tester" "Debugger-Tester" "Control-Tester" "Component-Tester" "Collector-Tester" "Char-Tester" "Catalog-Tester" "Branch-Tester" "Boolean-Tester" "Binding-Tester" "Array-Tester" "_utilities" "development" "_ui" "_workspace" "Workspaces-Preferences" "Workspace-Preferences" "Workspace-Button" "Text-Workspace" "Standard-Workspace" "Presenter-Workspace" "Navigator-Workspace" "Image-Workspace" "Home-Workspace" "Help-Workspace" "Formatted-Workspace" "Database-Workspace" "_window" "Window" "View-Player" "Transient" "Toplevel" "Tooltip" "Popup" "Palette" "Overlapped" "Menu-Transient" "Frame" "Desktop" "independant" "Tree-Widget" "Moniker-Widget" "Moniker-Text-View" "Moniker-Browser" "Entry-Widget" "Wallpaper-Stage" "Wallpaper-Actions" "View" "Vertical-Line" "Tooltip-Text" "Tooltip-Text-View" "Tooltip-Label" "Tooltip-Context" "Toolbar" "Tool-Button" "Toggle-Tool" "Threeway-Checkbox" "Tab-View" "Tab-Sheet" "Status-Toolbar" "Status-Label" "Stage" "Stage-Border" "Splitter" "Splitter-View" "Separator-View" "Selectable" "Scroller-View" "Scrollbar" "Renderer" "Radio-Tool" "Radio-Button" "Push-Tool" "Push-Icon" "Push-Combo" "Push-Button" "Progress-Bar" "Pad-View" "Line-View" "Line-Surrogate" "Layout-View" "Label-View" "Label-Tool" "Image-Tool" "Horizontal-Line" "Header-View" "Header-Bar" "Groupable" "Group-Box" "Frame-Button" "Entry-Combo-Text-View" "Entry-Combo-Box" "Drawing" "Content-View" "Container" "Connector" "Connector-Surrogate" "Combo-View" "Combo-Text-View" "Combo-Text-Actions" "Combo-Button" "Combo-Box" "Color-Text-View" "Color-Picker" "Color-Combo" "Color-Button" "Chooser" "Check-Box" "Border-View" "Action-Icon" "Tree-View" "Tree-Row" "Tree-Path" "Tree-Path-Column" "Tree-Node" "Tree-Node-Column" "Tree-Label" "Tree-Label-Column" "Tree-Image" "Tree-Image-Column" "Tree-Highlight" "Tree-Header" "Tree-Embedded-Search-Text-View" "Tree-Embedded-Search-Text-Actions" "Tree-Embedded-Presentation-Text-View" "Tree-Drop-Target" "Tree-Drag-Source" "Tree-Column" "Tree-Cell" "Tree-Cell-View" "Tree-Actions" "Table" "Table-Row" "Tools-Preferences" "Tool-View" "Tool-Preferences" "View-Style" "TextToHTML-Exporter" "Text" "Text-View" "Text-Style" "Text-Style-Combo" "Text-Size-Combo" "Text-Palette" "Text-Font-Combo" "Text-Explorer" "Text-Context-Menu" "Text-Combo" "Text-Colorizer" "Text-Color-Combo" "Table-Tree-View" "Table-Text-View" "Table-Cell" "Table-Border" "Symbol-Completer" "Style" "Run" "Ruler" "Plain-Text-View" "Plain-Formatted-Text-View" "Password-Text-View" "Paragraph" "Line" "Layout-Text-View" "Info-Style" "Image-Style" "Hyperlink-Style" "Formatted-Text" "Formatted-Text-View" "Formatted-Text-Actions" "Format" "Format-Menu" "Explorer-Mark" "Entry-Text-View" "Date-Text-View" "Column-Menu" "Code-Text-View" "Code-Text-Event" "Code-Explorer" "Anchor-Style" "Text-Syntax" "Code-Syntax" "Text-Slide-Conductor" "Slide" "Slide-Conductor" "Heading-Slide" "Basic-Slide" "Basic-Slide-Title" "Basic-Slide-Text-View" "Selection-Provider" "Selection-Manager" "Text-Search" "Text-Search-Preferences" "Search-View" "Search-View-Preferences" "Search-Results" "Search-Results-Tree" "Search-Results-Tree-Actions" "Search-Preferences" "Search-Menu" "Search-Manager" "Search-Manager-Actions" "Projects-Search" "Projects-Search-Preferences" "Navigable-Results" "History-Search-Item" "Directories-Search" "Directories-Search-Preferences" "_resizer" "_print" "Printer-Job" "Print-Job" "Preview-Workspace" "Preview-Toolbar" "Preview-Status" "Preview-Pane" "Preview-Pane-Actions" "Preview-Page" "Preview-Job" "Page-Workspace" "Page-Toolbar" "Page-Text-View" "Page-Text-Palette" "Page-Status" "Page-Setup" "Page-Printable" "Page-Header" "Page-Footer" "Page-Editor" "Page-Document" "Page-Content" "Presentation" "Presentation-Properties" "Presentation-Generator" "Presentation-Editor" "Presentation-Content" "Presentation-Components" "Presentation-Branches" "Presentation-Actions" "Playlist-Manager" "Formatted-Presentation" "Formatted-Presentation-Actions" "wallpaper" "favorites" "aliases" "View-Actions" "Tree-Preferences" "Toolbar-Preferences" "Text-Preferences" "Text-Actions" "Stage-Preferences" "Splitter-Preferences" "Shortcut-Viewer" "Shortcut-Chooser" "Prop-Text-Preferences" "Print-Preferences" "Preferences" "Preferences-Manager" "Preferences-Manager-Preferences" "Plain-Text-Preferences" "Palette-Preferences" "Pad-Preferences" "Interface-Preferences" "Frame-Preferences" "Figure-Preferences" "Docked-Preferences" "Completion-List-Row" "Code-Text-Preferences" "Code-Text-Actions" "Bindings-Tree" "Bindings-Manager" "Outline-View" "Outline-Row" "_offscreen" "Navigation-Branches" "_menu" "Workspaces-Menu" "Workspace-Menu" "Window-Menu" "Window-Advanced-Menu" "Separator-Item" "Recorder-Menu" "Radio-Item" "Menubar" "Menu" "Label-Item" "Item" "File-Menu" "File-Base-Menu" "Edit-Menu" "Edit-Base-Menu" "Context-Menu" "Check-Item" "_look" "Windows-Look" "Look" "Flat-Look" "_login" "Login-Dialog" "Localized-Row" "Locale-Row" "pens" "fonts" "colors" "Runtime-Listener" "Listener" "Split-Layout" "Snap-Layout" "Separator" "Layout" "Flow-Layout" "Figure" "Border-Layout" "_image" "Portfolio" "Imaging" "Image" "Image-View" "Image-Browser" "Toolbar-Host" "Palette-Host" "Host-View" "Guest-Preferences" "Guest-Actions" "Frame-Host" "Docked-Host" "Dialog-Host" "Caption-Host" "_history" "History-Menu" "History-File-Item" "History-Document-Item" "Help-Index" "Help-Contents" "Selection-Handler" "Viewable" "Surface" "Pen" "Memory-Surface" "Font-Metrics" "DC-Snapshot" "Color" "Client-Surface" "Picture" "Picture-Job" "Bitmap" "Region" "_font" "Font" "logfont" "freetype" "Favorites" "Favorites-Tree" "Favorites-Manager" "Favorites-Editor" "Favorites-Adder" "Favorite" "Favorite-Symbol" "Favorite-Search" "Favorite-Launch" "Favorite-File" "Favorite-Event" "Favorite-Directory" "Favorite-Definition" "Favorite-Clipboard" "Text-Event" "Selection-Event" "Selected-Event" "Runtime-Event" "Print-Event" "Paint-Event" "Mouse-Event" "Keyboard-Event" "Focus-Event" "Edition-Event" "Draw-Event" "Cursor-Event" "Capture-Event" "Action-Event" "Entity-Parcel" "Entity-Menu" "Entities-Tree" "Entities-Tree-Actions" "Entities-Controller" "Wipe-Effect" "Effect" "Documents-Preferences" "Document" "Document-Preferences" "Document-Moniker" "Document-Controller" "Drop-Target" "Drop-Event" "Drag-Source" "DnD" "_dialog" "User-Reporter" "Text-Request" "Text-File-Request" "Symbol-Request" "String-Request" "Progress-Reporter" "Pathname-Request" "Password-Request" "NewFile-Request" "Message-Box" "Font-Request" "File-Request" "Directory-Request" "Directories-Request" "Dialog" "Dialog-Actions" "Date-Request" "Color-Request" "Note-Row" "Note-List-Row" "Group" "Database" "Database-Tree" "Database-Manager" "Database-Editor" "Context-View" "Context-Text-View" "Context-Provider" "Context-Manager" "Context-Combo" "Context-Action" "Hierarchy-Browser" "Code-Tree" "Chapters-Browser" "_clipboard" "Periods-Chooser" "Calendar-View" "Calendar-Navigator" "Calendar-Dialog" "Calendar-Day" "Calendar-Actions" "_activity" "Activity" "Activity-Reporter" "Activity-Manager" "Activities-Manager" "Shortcut" "Figure-Mover" "Bindings" "Bindings-Preferences" "Actions" "Actionable" "Action" "Action-Item" "_system" "_service" "Service" "Service-Manager" "Service-Handle" "_process" "Save-Environment-Listener" "Process" "Process-Preferences" "Exit-Signal" "Exit-Listener" "Command-Line" "_performance" "Performance-Query" "_log" "_application" "Exception-Presenter" "Application" "Application-Preferences" "Application-Event" "Application-Bindings" "Application-Actions" "_schema" "Schema-Source" "Table-Inspector" "Table-Inspector-Tree" "Data-Schema-Factory" "Logical-Datatype" "Datatype" "Data-View" "Data-Trigger" "Data-Table" "Data-Sources" "Data-Source" "Data-Schema" "Data-Row" "Data-Relation" "Data-Procedure" "Data-Primary-Key" "Data-Object" "Data-Index" "Data-Entity" "Data-Container" "Data-Constraint" "Data-Column" "Schema-Archive" "Archive-Schema-Source" "Archive-Schema-Browser" "_runtime" "_recorder" "Recordable" "Macro-Recorder" "_project" "JazzTest-Product" "JazzPlatform-Product" "JazzDialect-Product" "JazzCore-Product" "JazzAll-Product" "_profile" "Profile" "Me" "types" "_platform" "x11-types" "_x11" "_windows" "WinUser" "WinTypes" "WinShell" "WinMM" "WinKernel" "WinIDL" "WinGDI" "WinDef" "WinCtrl" "WinBase" "WinPerf" "WinOLE" "WinNT" "WinInet" "WinError" "WinDlg" "WinAdv" "Type-Lib" "Type-Info" "Registry" "Registry-Key" "Internet-Session" "Internet-Connection" "HTTP-Put-Request" "HTTP-InetRequest" "HTTP-Get-Request" "HTTP-Connection" "FTP-Connection" "typelib" "IUnknown" "ISupportErrorInfo" "IErrorInfo" "CoObject" "CoInterface" "CoError" "IEnumVARIANT" "IDispatch" "_com" "COM-ffi-struct" "_freetype" "_crash" "clipboard" "carbon-types" "_carbon" "cairo-x11" "cairo-windows" "cairo-logfont" "cairo-freetype" "cairo-carbon" "_cairo" "_network" "_http" "Web-Servers-Manager" "Web-Servers-Actions" "Web-Server" "Web-Server-Configurations" "Web-Server-Configuration" "Web-Page" "Web-Context" "Server-Error" "HTTP-Session" "HTTP-Server" "HTTP-Response" "HTTP-Request" "HTTP-Recorder" "HTTP-Pages" "HTTP-Message" "HTTP-Listener" "HTTP-File-Response" "HTTP-Cookie" "HTTP-Client" "HTML-Page" "HTML-Generator" "TCP-Server" "TCP-Client" "Host" "_media" "x11" "windows" "carbon" "constructors" "_literals" "codec" "_license" "License" "License-Dialog" "License-Creator" "_library" "Version" "Undoer" "Timer" "Pulse" "Period" "Output-Log" "Loggable" "Locator" "Box" "Template-Expander" "Rights" "Property-Rights" "Properties-Rights" "Class-Rights" "Children-Rights" "Sound-Resource" "Resource" "Icon-Resource" "Cursor-Resource" "Bitmap-Resource" "Reporter" "Multiplexer-Reporter" "Log-Reporter" "Regular-Expression" "Path" "Sparse-Outline" "Outline" "Display-Outline" "_node" "URL" "Directory-Group" "Category-Moniker" "Log" "Locales" "_listener" "Violations-Manager" "Violations-Found" "Integrity-Violation" "Integrity-Manager" "Integrity-Constraint" "History-Provider" "History-Manager" "History-Item" "Handler" "Event-Handler" "Print-Sequencer" "Formatter" "_exemplar" "Walk-Error" "Explore-Error" "Event" "Entity" "Entity-Factory" "Sequenced-Column" "Sequenced-Column-Preferences" "Indented-Column" "Indented-Column-Preferences" "Display-Column" "Columns-Display" "Column-Preferences" "Aligned-Column" "Aligned-Column-Preferences" "Cryptography-Provider" "Convertion" "Event-Consumer" "Consumer" "_compression" "Zipped" "Zip-File" "Unzip-File" "_component" "Restore-Form" "Form" "Component" "Branch" "CanvasToSql-Exporter" "Canvas" "Canvas-Node" "Canvas-Manager" "Canvas-Element" "Automata" "_java" "Java-Manager" "Java-Extractor" "Java-Text-View" "Java-Text-Preferences" "Java-Text-Actions" "Java-Runtime" "Java-Compiler" "Java-Primitive" "Java-Object" "Java-Object-Array" "Java-Array" "JVM" "Java-Parser" "JavaExternal-Expander" "Java" "org.jazzscheme.test.X" "org.jazzscheme.test.Test" "org.jazzscheme.java.Runtime" "java.lang.Throwable" "java.lang.String" "java.lang.StackTraceElement" "java.lang.Object" "java.lang.ClassLoader" "java.lang.Class" "Java-Exception" "Java-File-Entry" "Java-Entry" "Java-File" "_xml" "XML-Viewer" "XML-Text-View" "XML-Text-Preferences" "XML-Explorer" "_sql" "JML-SQL" "SQL-Workspace" "_view" "SQL-Tree-Output" "SQL-Text-View" "SQL-Text-Output" "SQL-Text-Actions" "SQL-Syntax" "SQL-Output-Tree" "SQL-Output-Text-View" "SQL-Explorer" "SQL-Console-Text-View" "SQL-Console-Manager" "SQL-Connections-Tree" "SQL-Connections-Manager" "SQL-Connections-Editor" "SQL-Text-Preferences" "SQL-Preferences" "Inventory-Browser" "History-Request-Item" "_scheme" "Scheme-Text-View" "Scheme-Text-Preferences" "Scheme-Text-Actions" "Scheme-Explorer" "Scheme-Syntax" "Scheme-Parser" "_python" "Python-Text-View" "Python-Text-Preferences" "Python-Syntax" "Python-Parser" "Python-File-Entry" "Python-Explorer" "Python-Def-Entry" "Python-Class-Entry" "_properties" "Properties-Text-View" "Properties-Text-Preferences" "Properties-Syntax" "Properties-Parser" "Properties-File-Entry" "Properties-Entry" "_prop" "Prop-Text-View" "Prop-Syntax" "_lua" "Lua-Text-View" "Lua-Text-Preferences" "Lua-Syntax" "Lua-Parser" "Lua-Function-Entry" "Lua-File-Entry" "Lua-Explorer" "_lisp" "Lisp-Text-View" "Lisp-Text-Preferences" "Lisp-Text-Actions" "Lisp-Syntax" "Lisp-Explorer" "Lisp-Parser" "Lisp-File-Entry" "Lisp-Entry" "JML-Viewer" "JML-Text-View" "JML-Text-Preferences" "JML-Explorer" "Class-Browser" "Class-Browser-Actions" "Location-Error" "Jazz-Text-View" "Jazz-Text-Preferences" "Jazz-Text-Actions" "Jazz-Plain-Text-View" "Jazz-Explorer" "Jazz-Code-Location" "Jazz-Syntax" "Profile-Results" "Spy-View" "Event-Spy" "Type-Viewer" "Type-Extractor" "Registry-Viewer" "Jazz-Presentation" "Jazz-Parser" "User-Log" "Logs-Viewer" "_inspector" "Inspector" "Inspector-View" "Jazz-Documentation" "Documentation-Title" "Documentation-Text-View" "Documentation-Slide" "Concept-Slide" "Stack-Presenter" "Jazz-File" "_javascript" "JavaScript-Variable-Entry" "JavaScript-Text-View" "JavaScript-Text-Preferences" "JavaScript-Parser" "JavaScript-Function-Entry" "JavaScript-File-Entry" "JavaScript-Explorer" "_html" "HTML-Workspace" "HTML-Text-View" "HTML-Text-Preferences" "HTML-Text-Actions" "_diff" "Diff-Text-View" "Diff-Text-Preferences" "_css" "CSS-Text-View" "CSS-Text-Preferences" "CSS-Parser" "CSS-File-Entry" "CSS-Entry" "_csharp" "CSharp-Text-View" "CSharp-Text-Preferences" "_commonlisp" "CommonLisp-Text-View" "CommonLisp-Text-Preferences" "CommonLisp-Explorer" "CommonLisp-Parser" "_clike" "CLike-Text-View" "CLike-Text-Preferences" "_c" "C-Text-View" "C-Text-Preferences" "C-Explorer" "C-Syntax" "C-Parser" "C-Static-Entry" "C-Method-Entry" "C-Include-Entry" "C-File-Entry" "C-Extern-Entry" "C-Export-Entry" "C-Entry" "C-Definition-Entry" "C-Define-Entry" "C-Category-Entry" "C-File" "_jrm" "Stub-Interface" "Remoting-Server" "Remote-Proxy" "Remotable-Stub" "Proxy" "Local-Proxy" "IOR" "Register" "_jml" "XHTML-Renderer" "XHTML-Parser" "JML-Transformation" "_syntax" "JML-Renderer" "JML-Preferences" "JML-Parser" "JML-Text" "JML-Node" "JML-Element" "Experiments" "protocol" "_io" "_ide" "IDE" "IDE-Toplevel" "IDE-Toolbar" "IDE-Text-View" "IDE-Status" "IDE-Profile" "IDE-Preferences" "IDE-File-Menu" "IDE-Bindings" "IDE-Actions" "Command-Text-View" "Command-Shell" "Command-Search-Actions" "Command-Execute-Actions" "_groupware" "Groupware-Workspace" "Compare-Trees-Preferences" "Compare-Forms-Preferences" "Compare-Directories-Preferences" "Favorite-Compare-Files" "Favorite-Compare-Directories" "Tree-Comparer" "Text-Comparer" "Synchronize-Depots" "Form-Comparer" "Directory-Comparer" "Depot-Synchronizer" "Compare-Trees" "Compare-Trees-Actions" "Compare-Texts" "Compare-Text-View" "Compare-Text-Actions" "Compare-Run" "Compare-Node" "Compare-Line" "Compare-Item" "Compare-Forms" "Compare-Files" "Compare-Entry" "Compare-Directories" "Compare-Diff" "Compare-Databases" "_doc" "DocToText-Transformation" "DocToHTML-Transformation" "Docs-Tree" "Doc-Editor" "Syntax-Doc" "Slot-Doc" "Section-Doc" "Property-Doc" "Project-Doc" "Product-Doc" "Primitive-Doc" "Package-Doc" "Module-Doc" "Method-Doc" "Interface-Doc" "Form-Doc" "Field-Doc" "Element-Doc" "Doc" "Doc-Insert" "Definition-Doc" "Constant-Doc" "Concept-Doc" "Class-Doc" "Category-Doc" "Doc-Text-View" "Doc-Text-Row" "Doc-Text-List-Row" "Doc-Text-Actions" "Doc-Catalog" "Component-Catalog" "_language" "syntax" "_development" "_designer" "Designer-Workspace" "Toolbox" "Toolbox-Tree" "Toolbox-Model" "Toolbox-Manager" "Toolbox-Group" "Toolbox-Editor" "View-Surrogate" "View-Surrogate-Actions" "Text-Surrogate" "Surrogate-Handler" "Component-Surrogate" "Value-Row" "Value-Menu" "Text-Row" "String-Row" "Reference-Row" "Rect-Row" "Range-Row" "Point-Row" "Periods-Row" "Period-Row" "Pen-Row" "Pathname-Row" "Password-Row" "Memo-Row" "Matches-Row" "List-Row" "Integer-Row" "Info-Row" "Handler-Row" "Formatted-Text-Row" "Foreign-Row" "Font-Row" "File-Row" "Enumeration-Row" "Editor-Row" "Domain-Row" "Directory-Row" "Directory-Group-Row" "Dimension-Row" "Details-Row" "Date-Row" "Composite-Text-Actions" "Composite-Row" "Combo-Row" "Combo-Row-Editor" "Color-Row" "Classpath-Row" "Cell-Row" "Boolean-Row" "Property-Violation" "Property-View" "Property-Manager" "Property-Editor" "Designer-Preferences" "Property-Moniker" "Component-Menu" "Add-Menu" "Editor-Event" "Designer-Event" "Text-Entry" "Property-Entry" "Number-Entry" "Name-Entry" "Foreign-List-Entry" "Foreign-Entry" "Enumeration-List-Entry" "Enumeration-Entry" "Date-Entry" "Boolean-Entry" "Color-Editor" "View-Editor" "View-Editor-Actions" "View-Descendants-Tree" "View-Descendants-Editor" "Value-Text-View" "Search-Tree" "Row-Text-View" "Row-Formatted-Text-View" "Index-Tree" "Editor-View" "Editor-View-Controller" "Details-Tree" "Descendants-Tree" "Descendants-Editor" "Containment-Editor" "Components-Viewer" "Components-Viewer-Actions" "Components-Tree" "Components-Tree-Actions" "Component-Viewer" "Children-Tree" "Value-Domain" "Time-Domain" "String-Domain" "Presentation-Domain" "Period-Domain" "Password-Domain" "Number-Domain" "Name-Domain" "List-Domain" "Integer-Domain" "Foreign-Domain" "Enumeration-Domain" "Domain" "Date-Domain" "Boolean-Domain" "Details-Card" "Dispatch-Designer" "Designer" "Property-Descriptor" "Properties-Descriptor" "Descriptors" "Class-Descriptor" "Children-Descriptor" "Component-Parcel" "Foreign-List-Chooser" "Domain-Chooser" "Details-Chooser" "Column-Detail" "Properties-Tree" "Properties-Manager" "Properties-Card" "Group-Card" "Custom-Card" "Card" "Branches-Viewer" "Branches-Tree" "Branches-Tree-Actions" "Branches-Editor" "Book-View" "Book-Section" "Book-Controller" "_depot" "Depots-Preferences" "Depot-Preferences" "Depot-Version-Browser" "Depot-Moniker" "_git" "Depot" "_debugger" "Debugger-Workspace" "Thread-Snapshot" "Stack-Snapshot" "Process-Snapshot" "Frame-Snapshot" "Exception-Snapshot" "Computer-Snapshot" "Debug-Preferences" "stub-autoload" "_jazz" "Jazz-Product" "Jazz-Debugger" "_gambit" "Gambit-Product" "Gambit-Debugger" "Frame-Indicator" "Variables-View" "Threads-View" "Processes-View" "Frames-View" "Detail-View" "Debugger" "Debugger-Resource" "Debugger-Listener" "Debugger-Event" "Debugged" "Debugged-Thread" "Debugged-Stop" "Debugged-Restart" "Debugged-Process" "Debugged-Frame" "Break-Event" "update" "stub" "setup" "_debuggee" "Debuggee-Thread" "Debuggee-Stop" "Debuggee-Restart" "Debuggee-Process" "Debuggee-Frame" "View-Debugger" "Resources-View" "Resources-Monitor" "Profiler-View" "Profiler-Manager" "Log-View" "_database" "Schema-Chooser" "Schema-Browser" "Data-Source-Widget" "Data-Source-Chooser" "Data-Source-Browser" "Data-Group" "Inventory-Table-Updater" "_sqlserver" "SQLServer-Data-Source" "SQLServer-Widget" "SQLServer-Trigger-Name-Global-Unicity-Constraint" "SQLServer-Text-View" "SQLServer-Server-Row" "SQLServer-Server-Browser" "SQLServer-Provider" "SQLServer-Procedure-Validity-Constraint" "SQLServer-Primary-Key-Name-Global-Unicity-Constraint" "SQLServer-Primary-Key-Constraint" "SQLServer-Inventory" "SQLServer-Inventory-View" "SQLServer-Inventory-Updater" "SQLServer-Inventory-Trigger" "SQLServer-Inventory-Table" "SQLServer-Inventory-Relation" "SQLServer-Inventory-Procedure" "SQLServer-Inventory-Primary-Key" "SQLServer-Inventory-Index" "SQLServer-Inventory-Constraint" "SQLServer-Inventory-Column" "SQLServer-Index-Constraint" "SQLServer-Default-Value-Constraint" "SQLServer-Datatype" "SQLServer-Database-Row" "SQLServer-Database-Browser" "SQLServer-Constraint-Name-Global-Unicity-Constraint" "SQLDMO" "_oracle" "Oracle-Data-Source" "Oracle-Provider" "Oracle-Datatype" "_mysql" "MySQL-Data-Source" "MySQL-Widget" "MySQL-Provider" "MySQL-Inventory" "MySQL-Inventory-View" "MySQL-Inventory-Updater" "MySQL-Inventory-Table" "MySQL-Inventory-Relation" "MySQL-Inventory-Procedure" "MySQL-Inventory-Primary-Key" "MySQL-Inventory-Index" "MySQL-Inventory-Constraint" "MySQL-Inventory-Column" "MySQL-Datatype" "MySQL-Database-Row" "_jdbc" "JDBC-Data-Source" "JDBC-Provider" "JDBC-Inventory" "JDBC-Inventory-View" "JDBC-Inventory-Table" "JDBC-Inventory-Relation" "JDBC-Inventory-Procedure" "JDBC-Inventory-Primary-Key" "JDBC-Inventory-Index" "JDBC-Inventory-Constraint" "JDBC-Inventory-Column" "JDBC-Datatype" "JDBC-Request" "JDBC-Recordset" "JDBC-Recordset-Metadata" "JDBC-Connection" "_ado" "ADO-Data-Source" "ADOX" "ADO-Inventory" "ADO-Inventory-View" "ADO-Inventory-Trigger" "ADO-Inventory-Table" "ADO-Inventory-Procedure" "ADO-Inventory-Index" "ADO-Inventory-Constraint" "ADO-Inventory-Column" "ADO-Datatype" "ADODB" "ADO-Request" "ADO-Recordset" "ADO-Recordset-Metadata" "ADO-Connection" "_access" "Access-Data-Source" "DAO" "Access-Widget" "Access-Provider" "Access-Inventory" "Access-Inventory-Updater" "Access-Inventory-Table" "Access-Inventory-Relation" "Access-Inventory-Procedure" "Access-Inventory-Primary-Key" "Access-Inventory-Index" "Access-Inventory-Constraint" "Access-Inventory-Column" "Access-Datatype" "Access-Database-Row" "Systype" "Provider" "java.sql.Statement" "java.sql.ResultSetMetaData" "java.sql.ResultSet" "java.sql.DriverManager" "java.sql.DatabaseMetaData" "java.sql.Connection" "Inventory" "Inventory-View" "Inventory-Updater" "Inventory-Trigger" "Inventory-Table" "Inventory-Relation" "Inventory-Procedure" "Inventory-Primary-Key" "Inventory-Index" "Inventory-Constraint" "Inventory-Column" "Logical-Datatype-Row" "Datatype-Row" "Request" "Recordset" "Recordset-Metadata" "Printer-Connection" "Connection" "_console" "Console-Text-View" "Console-Text-Preferences" "Console-Text-Actions" "Console-Preferences" "Console-Manager" "_catalog" "Catalogs-Manager" "File-Parser" "Zipped-Entry" "Zip-File-Entry" "Variable-Entry" "Static-Init-Entry" "Package-Entry" "Method-Entry" "Interface-Entry" "Instance-Init-Entry" "Indexed-Entry" "Import-Entry" "Hierarchical-Entry" "File-Entry" "Entry" "Definition-Entry" "Constructor-Entry" "Code-Location" "Code-Entry" "Class-Entry" "Category-Entry" "Catalog-Entry" "Indexed-Catalog" "Filing-Catalog" "Cataloguer" "Catalogs-Preferences" "Catalog" "Catalog-Configuration" "autoload" "_builder" "Product-Selector" "_workbench" "Workbench" "Workbench-Tree" "Workbench-Tree-Actions" "Workbench-Manager" "Workbench-Manager-Actions" "Workbench-Editor" "Workbench-Designer" "Synchronize-Tree" "Synchronize-Entry" "Synchronize-Box" "Add-File-Dialog" "Solution" "Sound-File" "Resource-File" "Icon-File" "Cursor-File" "Bitmap-File" "Project-Designer" "Project-Catalog" "Product" "Build-Preferences" "Package" "Project-Group" "Project-File" "Project-Directory" "Configurations-Manager" "Build-Configurations" "Build-Configuration" "Dispatcher" "name:" "source:" "Directory" "directory:" "Jazz" "File" "documentation:" "include-extensions:" ":jazz" "catalog-extensions:" "catalog?:" "title:" "Project")}}})
"Jazz-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "syntax" "Jazz-Syntax.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.syntax.Jazz-Syntax" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Jazz-Syntax" #f 47 7 47 18 ("Lisp-Syntax")
        {Lisp-Entry "translate-key" #f 55 11 55 24 ("translate-lisp-key" "jazz-text" "documents" "get-preferences" "get-translate-keys?" "not" "if" "key")}}}})
"Jazz-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "text" "Jazz-Text-Actions.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Text-Actions" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Jazz-Text-Actions" #f 47 7 47 24 ("on-set-read/write" "set-read/write" "on-remove-break" "remove-break" "F9" "on-add-break" "add-break" "F12" ":shift" "on-edit-documentation" "edit-documentation" "F1" "on-present-documentation" "present-documentation" "on-design-form" "design-form" "Return" ":control" "Shortcut" "shortcut:" "on-evaluate" ":focus" "Event-Handler" "action-handler:" "evaluate" "name:" "Actions")}}})
"Jazz-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "text" "Jazz-Text-Preferences.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Text-Preferences" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Jazz-Text-Preferences" #f 50 7 50 28 ("completions:" "Dark-Orange" "feature-color:" "quotation-color:" "named-string-color:" "delimited-string-color:" "string-color:" "boolean-color:" "number-color:" "char-color:" "Ochre" "literal-color:" "specifier-color:" "Dark-Purple" "tag-color:" "keyword-color:" "undocumented-declaration-color:" "Dark-Green" "documented-declaration-color:" "Dark-Blue" "declaration-keyword-color:" "Text-Gray" "expr-comment-color:" "Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Lisp-Text-Preferences")
        {Lisp-Entry "documented-declaration-color" #f 53 12 53 40 ("generate")}
        {Lisp-Entry "undocumented-declaration-color" #f 54 12 54 42 ("generate")}
        {Lisp-Entry "literal-color" #f 55 12 55 25 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 236 11 236 37 ("translate-keys?" "string-color" "specifier-color" "keyword-color" "undocumented-declaration-color" "documented-declaration-color" "expr-comment-color" "comment-color" "title-color" "completions")}
        {Lisp-Entry "get-row-instance" #f 240 11 240 27 ("nextmethod" "else" "Boolean-Row" "translate-keys?" "Completion-List-Row" "completions" "Color-Row" "new" "string-color" "specifier-color" "keyword-color" "undocumented-declaration-color" "documented-declaration-color" "expr-comment-color" "comment-color" "title-color" "field-name" "case" "property")}}}})
"Jazz-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "text" "Jazz-Text-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.text.Jazz-Text-View" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Jazz-Text-View" #f 57 7 57 21 ("tooltip?:" "Lisp-Text-View")
        {Lisp-Entry "install" #f 64 11 64 18 ("highlight:" "Break" "'Break" "Walk-Fatal" "'Walk-Fatal" "Orange" "Walk-Warning" "'Walk-Warning" "Red" "Color" "frame:" "Reference" "'Reference" "get-feature-color" "Feature" "'Feature" "get-literal-color" "Literal" "'Literal" "get-quotation-color" "Quotation" "'Quotation" "get-named-string-color" "Named-String" "'Named-String" "get-delimited-string-color" "Delimited-String" "'Delimited-String" "get-string-color" "String" "'String" "get-boolean-color" "Boolean" "'Boolean" "get-number-color" "Number" "'Number" "get-char-color" "Char" "'Char" "get-specifier-color" "Specifier" "'Specifier" "get-tag-color" "Tag" "'Tag" "get-keyword-color" "Keyword" "'Keyword" "get-undocumented-declaration-color" "Undocumented-Declaration" "'Undocumented-Declaration" "get-documented-declaration-color" "Documented-Declaration" "'Documented-Declaration" "get-declaration-keyword-color" "Declaration-Keyword" "'Declaration-Keyword" "get-expr-comment-color" "Expr-Comment" "'Expr-Comment" "get-comment-color" "Comment" "'Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 91 16 91 29 ("jazz-text" "'jazz-text" "rest")}
        {Lisp-Entry "default-extension" #f 95 11 95 28 ()}
        {Lisp-Entry "extensions" #f 99 11 99 21 ()}
        {Lisp-Entry "new-syntax" #f 103 11 103 21 ("Jazz-Syntax" "new")}
        {Lisp-Entry "focus-actions" #f 112 11 112 24 ("nextmethod" "jazz-text" "'jazz-text" "find-actions" "cons")}
        {Lisp-Entry "get-context-menu" #f 122 11 122 27 ("layout-menu" "set-read/write" "'set-read/write" "locate" "set-visible?" "read/write?" "not" "or" "when" "get-moniker" "moniker" "get-controller" "controller" "Jazz-Text-Menu" "new" "menu" "let*")}
        {Lisp-Entry "on-design-form" #f 137 11 137 25 ("client:" "new-frame" "Manager-View" "View-Editor" "View" "is?" "editor-class" "new" "component" "set-visible?" "bring-to-front" "begin" "find-editor" "essay" "frame" "get-self-form" "form" "error" "Component" "subtype?" "not" "if" "autoload" "class" "current-category-name" "name" "let*" "on-design-form" "'on-design-form" "unimplemented" "evt")}
        {Lisp-Entry "find-editor" #f 155 11 155 22 ("get-children" "continuation-return" "get-form" "eq?" "and" "get-designer" "designer" "Editor-View" "get-guest" "guest" "Host-View" "is?" "when" "frame" "for-each" "return" "function" "continuation-capture" "get-stage" "stage" "let" "form")}
        {Lisp-Entry "on-copy-list" #f 170 11 170 23 ("length" "user-message" "push-clipboard-list" "get-selected-string" "read-string-content" ":reader" "->string" "object" "function" "map" "list" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "get-tooltip-context" #f 182 11 182 30 ("Label" "name:" "Font" "font:" "bounds:" "rect-height" "-10" "Point" "rect-position" "+" "position:" "text:" "view:" "Tooltip-Context" "in-rect?" "get-end" "get-col" "get-start" "get-row" "row-range-rect" "bounds" "present-location" "essay" "text" "range-location" "location" "get-range" "range" "symbol" "'symbol" "eq?" "get-kind" "kind" "let" "outer-composite?:" "composite?:" "outer-expr" "err" "Explore-Error" "catch" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "view->text" "pos" "let*" "debugging?" "Debugger" "'Debugger" "in-manifest?" "and" "when" "view")}
        {Lisp-Entry "default-preferences" #f 211 14 211 33 ("completions:" "Dark-Blue" "keyword-color:" "Dark-Green" "undocumented-declaration-color:" "documented-declaration-color:" "Dark-Orange" "expr-comment-color:" "Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "form>>")}
        {Lisp-Entry "preferences" #f 216 11 216 22 ("jazz-text" "documents" "get-preferences")}
        {Lisp-Entry "declaration-style" #f 220 11 220 28 ("Undocumented-Declaration" "'Undocumented-Declaration" "Documented-Declaration" "'Documented-Declaration" "if" "documented?")}
        {Lisp-Entry "colorize-tag" #f 226 11 226 23 ("Tag" "'Tag" "apply-coloring" "end" "start" "colorizer")}
        {Lisp-Entry "colorize-specifier" #f 230 11 230 29 ("Specifier" "'Specifier" "apply-coloring" "end" "start" "colorizer")}
        {Lisp-Entry "Specials" #f 239 12 239 20 ("xml>>" "xsl-transformation" "with-closed" "with" "while" "when" "unwind-protect" "unless" "typecase" "template" "syntax" "synchronize" "substitution" "structure" "specific" "remotable-stub" "receive" "prog1" "profile" "pattern" "parameterize" "package" "new" "module" "method" "macro" "library" "letrec" "let*" "let" "lambda" "jml>>" "jml" "interface" "inline" "in" "if" "generic" "function" "form>>" "form" "enumeration" "ecase" "dialect" "definition" "define" "datacontainer" "c-structure" "5" "c-definition" "c-enumeration" "c-constant" "cotry" "constant" "-1" "comment" "com-method" "com-interface" "class" "catch" "case" "3" "call-with-catch" "block" "2" "bind" "0" "begin" "attributes" "attribute" "assert" "1" "annotate")}
        {Lisp-Entry "get-specials" #f 309 11 309 23 ("Specials")}
        {Lisp-Entry "on-evaluate" #f 318 11 318 22 ("read-text-forms" "evaluate-forms" "collect-declarations" "footer" "header" "receive" ".1" "sleep" ":wait" "with-cursor" "when" "current-definition-range" "range" "let" "function" "with-safe-explore" "evt")}
        {Lisp-Entry "evaluate-forms" #f 330 11 330 25 ("'<expr>" "either" "name" "user-message" "evaluate-expressions" "format" "expressions" "form-name" "->string" "form" "function" "map" "names" "self" "explorer-class" "new" "expl" "bell" "not" "if" "get-focused-process" "debugged" "let" "footer" "header" "forms")}
        {Lisp-Entry "collect-declarations" #f 346 11 346 31 ("values" "format" "set!" "join" "declaration-header" "jazz-declaration" "declaration" "let*" "jazz-declaration?" "when" "outer-expr" "while" "range:" "self" "Jazz-Explorer" "new" "expl" "footer" "header" "let" "range")}
        {Lisp-Entry "on-add-break" #f 364 18 364 30 ("1" "+" "get-start" "Break" "'Break" "apply-style" "add-break" "error" "not" "if" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "range-location" "loc" "current-expr-range" "range" "let*" "evt")}
        {Lisp-Entry "on-remove-break" #f 375 18 375 33 ("get-row" "get-paragraph" "invalidate-paragraph" "default-style" "set-style" "when" "1" "get-start" "+" "get-run-at" "run" "let" "remove-break" "bell" "not" "if" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "range-location" "loc" "current-expr-range" "range" "let*" "evt")}
        {Lisp-Entry "present-location" #f 394 11 394 27 ("present-expr" "current-debugger" "active-frame" "frame" "let" "and" "when" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "location")}
        {Lisp-Entry "present-expr" #f 402 11 402 23 ("present-unknown" "else" "present-constant" "Symbol" "present-field" "Field-Reference" "present-variable" "Variable" "present-self" "Self" "Manifest-Reference" "present-global" "Global-Reference" "typecase" "class-of" "format" "object" "frame")}
        {Lisp-Entry "present-global" #f 416 11 416 25 ("self" "dispatch" "format" "object" "frame")}
        {Lisp-Entry "present-self" #f 420 11 420 23 ("present-value" "format" "frame-context" "context" "get-address" "Interpreter" "frame-closure-frame" "binder" "let*" "when" "object" "frame")}
        {Lisp-Entry "present-variable" #f 430 11 430 27 ("present-value" "variable-symbol" "format" "variable-value" "value" "let" "eq?" "test:" "key:" "find-in" "variable" "" "variable-base" "frame-variables" "variables" "Interpreter" "frame-closure-frame" "binder" "let*" "get-address" "set!" "when" "var" "frame")}
        {Lisp-Entry "present-field" #f 448 11 448 24 ("present-value" "field-name" "format" "get-value" "value" "let" "definition-method?" "definition?" "and" "unless" "field-creator" "is?" "field-reference-form" "field" "frame-context" "context" "Interpreter" "frame-closure-frame" "binder" "let*" "get-address" "set!" "when" "reference" "frame")}
        {Lisp-Entry "present-constant" #f 464 11 464 27 ("format" "object" "frame")}
        {Lisp-Entry "present-unknown" #f 468 11 468 26 ("object" "frame")}
        {Lisp-Entry "present-value" #f 472 11 472 24 ("format" "else" "procedure?" "cond" "value")}
        {Lisp-Entry "current-location" #f 481 11 481 27 ("get-start" "position->location")}
        {Lisp-Entry "position->location" #f 485 11 485 29 ("range-location" "get-range" "range" "outer-composite?:" "outer-expr" "when" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "location-class" #f 492 11 492 25 ("cdr" "class-of" "category-field" "definition-value" "set!" "meta" "'meta" "eq?" "name" "function" "for-each" "meta?" "let" "error" "not" "if" "global-value" "class" "car" "class-name" "let*" "load?" "load?:" "loc")}
        {Lisp-Entry "split-location" #f 508 11 508 25 ("get-output" "values" "cdr" "set!" "put" "car" "symbol?" "while" "List-Factory" "new" "definition" "scan" "let" "location")}
        {Lisp-Entry "definition-name-info" #f 517 11 517 31 ("else" "2" "external?" "procedure?" "definition-value" "value" "let" "field?" "field-modifiers-count" "+" "slot?" "1" "values" "category?" "cond" "definition-name-info" "'definition-name-info" "unimplemented" "object")}
        {Lisp-Entry "definition-name-location?" #f 533 11 533 36 ("0" "and" "list" "=" "or" "inside-allowed?" "skip" "receive" "when" "definition-name-info" "info" "let" "internal-location" "object")}
        {Lisp-Entry "range-location" #f 541 11 541 25 ("else" "meta" "'meta" "cond" "cons" "loc" "definition-name" "name" "meta?" "package?" "receive" "definition-expr?" "def?" "set!" "if" "outer-expr" "rank" "not" "while" "done?" "previous-def?" "location" "get-end" "end:" "get-start" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "range")}
        {Lisp-Entry "location-range" #f 565 18 565 32 ("get-range" "forward-location" "text-beginning" "end:" "self" "Jazz-Explorer" "new" "expl" "let" "toplevel-location" "toplevel-location:" "location")}
        {Lisp-Entry "on-edit-documentation" #f 576 11 576 32 ("edit-documentation" "get-application" "appl" "bell" "not" "if" "current-symbol" "symbol" "let" "evt")}
        {Lisp-Entry "on-edit-documentation" #f 585 11 585 32 ("current-location" "edit-documentation" "evt")}
        {Lisp-Entry "edit-documentation" #f 590 11 590 29 ("edit-field-documentation" "field-reference-form" "edit-field-reference-documentation" "Field-Reference" "is?" "and" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "receive" "car" "autoload" "bell" "null?" "if" "location")}
        {Lisp-Entry "edit-field-reference-documentation" #f 601 11 601 45 ("edit-documentation" "field-name" "field-creator" "type-name" "list" "location" "get-application" "appl" "let" "field")}
        {Lisp-Entry "edit-field-documentation" #f 608 11 608 35 ("bell" "self" "edit-documentation" "definition-name-location?" "and" "if" "Interpreter" "resolve-location" "object" "toplevel-closure" "in-context?" "resolved?" "split-location" "internal-location" "field-location" "receive" "get-application" "appl" "let" "location")}
        {Lisp-Entry "on-present-documentation" #f 617 11 617 35 ("current-symbol" "present-documentation" "evt")}
        {Lisp-Entry "present-documentation" #f 621 11 621 32 ("border:" "alternate-position:" "popup" "DocToText-Transformation" "parse-jml" "transform-jml" "set-text" "get-display" "display" "entry" "'entry" "style:" "edge" "'edge" "solid" "'solid" "border-type:" "5" "Rect" "border-insets:" "Border-View" "border" "alternate" "100" "Point" "pos" "'text" "locate" "text" "300" "600" "Dimension" "size:" "Documentation-View" "new" "view" "present-text" "jml" "open-java-documentation" "JVM" "class-exists?" "symbol->string" "classname" "let" "get-documentation" "doc" "get-application" "appl" "let*" "bell" "not" "if" "present-documentation" "'present-documentation" "unimplemented" "symbol")}
        {Lisp-Entry "open-java-documentation" #f 646 11 646 34 ("bell" "return" "shell-execute" "exists?" "when" "format" "list" "append" "new-file" "file" "let" "dir" "function" "for-each" "Java" "parse-classname" "name" "package" "receive" "java-apidocs" "apidocs" "get-profile" "profile" "get-application" "appl" "let*" "open-java-documentation" "'open-java-documentation" "unimplemented" "classname")}
        {Lisp-Entry "show-arguments" #f 672 11 672 25 ("show-category-fields" "show-method-arguments" "0" "char-backward" "case" "symbol" "'symbol" "get-kind" "=" "backward-expr" "and" "get-end" "end:" "get-start" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "empty-selection?" "when")}
        {Lisp-Entry "show-method-arguments" #f 683 11 683 32 ("show-symbol-arguments" "uses" "'uses" "getf" "imports" "find-symbol" "symbol" "keywords" "meta?" "kind" "category" "bind" "category-info" "in" "receive" "when" "current-toplevel-info" "info" "get-marked" "name" "let" "expl")}
        {Lisp-Entry "show-symbol-arguments" #f 697 11 697 32 ("Interpreter" "closure-function" "Closure" "show-function-arguments" "%function" "show-external-arguments" "External" "typecase" "definition-value" "value" "when" "find-in" "field" "let" "show-symbol-arguments" "'show-symbol-arguments" "unimplemented" "packages" "class" "symbol")}
        {Lisp-Entry "show-external-arguments" #f 712 11 712 34 ("proxy-result" "proxy-rest?" "if" "List" "get-type" "param" "function" "Interpreter" "proxy-parameters" "accumulate" "type-name" "map" "user-message" "external" "symbol")}
        {Lisp-Entry "show-function-arguments" #f 721 11 721 34 ("get-output-string" "user-message" "present-parameters" "'rest" "rest" "open-output-string" "printer" "Interpreter" "function-parameters" "parameters" "let*" "function" "symbol")}
        {Lisp-Entry "present-parameters" #f 731 11 731 29 ("else" "cdr" "present-parameters" "format" "car" "present-parameter" "pair?" "cond" "when" "printer" "bind" "parameters")}
        {Lisp-Entry "present-parameter" #f 743 11 743 28 ("else" "Interpreter" "variable-symbol" "format" "Variable" "typecase" "printer" "parameter")}
        {Lisp-Entry "find-in" #f 751 11 751 18 ("continuation-return" "when" "class-of" "category-field" "field" "Interpreter-Services" "get-interpreted-category" "either" "type-name" "name" "let*" "package" "for-each" "return" "function" "continuation-capture" "packages" "class" "symbol")}
        {Lisp-Entry "show-category-fields" #f 764 11 764 31 ("show" "500" "Point" "position:" "self" "owner-text:" "Completion-Popup" "new" "popup" "let")}
        {Lisp-Entry "explorer-class" #f 775 11 775 25 ("Jazz-Explorer")}
        {Lisp-Entry "current-class-form" #f 784 18 784 36 ("values" "Form" "fourth" "is?" "class-form" "'class-form" "third" "meta" "'meta" "second" "definition" "'definition" "first" "eq?" "4" "and" "car" "form" "1" "length" "=" "read-text-forms" "forms" "current-toplevel-info" "info" "when" "current-definition-range" "function" "with-safe-explore" "range" "let")}
        {Lisp-Entry "current-classes" #f 805 11 805 26 ("meta" "'meta" "cons" "set!" "definition-name" "name" "meta?" "package?" "receive" "category-expr?" "when" "outer-expr" "while" "classes" "range:" "self" "Jazz-Explorer" "new" "expl" "let" "range")}
        {Lisp-Entry "current-category-name" #f 817 11 817 32 ("keywords" "name" "meta?" "kind" "category" "bind" "current-toplevel-info" "category-info" "in" "receive")}
        {Lisp-Entry "toplevel-expr" #f 824 11 824 24 ("get-range" "set!" "outer-expr" "while" "range" "end:" "start:" "self" "Jazz-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "edit-symbol-class" #f 837 11 837 28 ("get-application" "edit-class" "in-manifest?" "when" "symbol")}}
      {Lisp-Entry "Documentation-View" #f 849 7 849 25 ("editable?:" "Tooltip" "Color" "background:" "text" "content" "name:" "flat?:" "vscroll?:" "hscroll?:" "fill" "layout-type:" "Layout-View")}
      {Lisp-Entry "Jazz-Text-Menu" #f 864 7 864 21 ("recolorize-syntax" "update-catalog" "set-read/write" "show-changes" "text" "show-history" "remove-break" "add-break" "add-to-favorites" "edit-documentation" "edit-references" "code-text" "edit-definitions" "design-form" "jazz-text" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "evaluate" "name:" "Context-Menu")}}})
"JazzAll-Product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "project" "JazzAll-Product.jazz"} 1226584783
    {Lisp-Entry "jazz.project.JazzAll-Product" #f 37 9 37 37 ("JazzAll-Product" "register-autoclass" "jazz")
      {Lisp-Entry "JazzAll-Product" #f 48 7 48 22 ("all" "product:" "title:" "Jazz-Product")}}})
"JazzCore-Product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "project" "JazzCore-Product.jazz"} 1226584783
    {Lisp-Entry "jazz.project.JazzCore-Product" #f 37 9 37 38 ("JazzCore-Product" "register-autoclass" "jazz")
      {Lisp-Entry "JazzCore-Product" #f 48 7 48 23 ("core" "product:" "title:" "Jazz-Product")}}})
"JazzDialect-Product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "project" "JazzDialect-Product.jazz"} 1226584783
    {Lisp-Entry "jazz.project.JazzDialect-Product" #f 37 9 37 41 ("JazzDialect-Product" "register-autoclass" "jazz")
      {Lisp-Entry "JazzDialect-Product" #f 48 7 48 26 ("jazz" "product:" "title:" "Jazz-Product")}}})
"JazzPlatform-Product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "project" "JazzPlatform-Product.jazz"} 1226584783
    {Lisp-Entry "jazz.project.JazzPlatform-Product" #f 37 9 37 42 ("JazzPlatform-Product" "register-autoclass" "jazz")
      {Lisp-Entry "JazzPlatform-Product" #f 48 7 48 27 ("platform" "product:" "title:" "Jazz-Product")}}})
"JazzTest-Product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "project" "JazzTest-Product.jazz"} 1226584783
    {Lisp-Entry "jazz.project.JazzTest-Product" #f 37 9 37 38 ("JazzTest-Product" "register-autoclass" "jazz")
      {Lisp-Entry "JazzTest-Product" #f 48 7 48 23 ("test" "product:" "title:" "Jazz-Product")}}})
"Keyboard-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Keyboard-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Keyboard-Event" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Keyboard-Event" #f 44 7 44 21 ("Event")
        {Lisp-Entry "key" #f 47 8 47 11 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("key" "set!" "nextmethod" "k" "sender" "kind")}
        {Lisp-Entry "print" #f 55 11 55 16 ("key" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-key" #f 61 18 61 25 ("key")}}}})
"Label-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Label-Item.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Label-Item" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Label-Item" #f 47 7 47 17 ("Item")
        {Lisp-Entry "icon" #f 50 12 50 16 ("set-icon" "get-icon")}
        {Lisp-Entry "disabled-icon" #f 51 12 51 25 ("set-disabled-icon" "get-disabled-icon")}
        {Lisp-Entry "shortcut" #f 52 12 52 20 ("set-shortcut" "get-shortcut")}
        {Lisp-Entry "default?" #f 53 12 53 20 ("set-default?" "get-default?")}
        {Lisp-Entry "content" #f 56 8 56 15 ()}
        {Lisp-Entry "mouse-activate?" #f 59 11 59 26 ()}
        {Lisp-Entry "component-alias" #f 68 11 68 26 ("nextmethod" "else" "content" "case" "name")}
        {Lisp-Entry "shortcut-update" #f 79 11 79 26 ("get-shortcut" "set-shortcut" "action-item")}
        {Lisp-Entry "add-child" #f 88 11 88 20 ("content" "set!" "child")}
        {Lisp-Entry "get-content" #f 92 18 92 29 ("content")}
        {Lisp-Entry "get-title" #f 101 11 101 20 ("get-title" "content" "when" "title" "either")}
        {Lisp-Entry "get-icon" #f 107 18 107 26 ("icon")}
        {Lisp-Entry "set-icon" #f 111 18 111 26 ("layout-menu" "icon" "set!" "icn")}
        {Lisp-Entry "get-disabled-icon" #f 116 18 116 35 ("disabled-icon")}
        {Lisp-Entry "set-disabled-icon" #f 120 18 120 35 ("layout-menu" "disabled-icon" "set!" "icn")}
        {Lisp-Entry "get-shortcut" #f 125 18 125 30 ("shortcut")}
        {Lisp-Entry "set-shortcut" #f 129 18 129 30 ("layout-menu" "shortcut" "set!" "shc")}
        {Lisp-Entry "get-default?" #f 134 18 134 30 ("default?")}
        {Lisp-Entry "set-default?" #f 138 18 138 30 ("default?" "set!" "value")}
        {Lisp-Entry "default-size" #f 147 11 147 23 ("17" "100" "Dimension")}
        {Lisp-Entry "preferred-icon-width" #f 151 11 151 31 ("0" "16" "+" "icon" "if" "4" "left" "let")}
        {Lisp-Entry "preferred-body-width" #f 156 11 156 31 ("get-width" "+" "10" "6" "menubar-label?" "if" "left" "text-extent" "extent" "get-title" "localize" "title" "effective-font" "font" "let*")}
        {Lisp-Entry "preferred-shortcut-width" #f 164 11 164 35 ("get-width" "+" "12" "right" "6" "left" "present-shortcut" "text-extent" "extent" "effective-font" "font" "let*" "0" "shortcut" "not" "if")}
        {Lisp-Entry "preferred-arrow-width" #f 174 11 174 32 ("0" "10" "menubar-label?" "not" "content" "and" "if")}
        {Lisp-Entry "preferred-height" #f 180 11 180 27 ("4" "+" "font-height" "height" "get-title" "localize" "title" "effective-font" "font" "let*")}
        {Lisp-Entry "Label-Font" #f 192 14 192 24 ("Label" "name:" "Font")}
        {Lisp-Entry "Default-Label-Font" #f 195 14 195 32 ()}
        {Lisp-Entry "get-label-font" #f 199 11 199 25 ("Label-Font")}
        {Lisp-Entry "get-default-label-font" #f 202 11 202 33 ("Label-Font" "toggle-bold" "set!" "Default-Label-Font" "unless")}
        {Lisp-Entry "effective-font" #f 208 11 208 25 ("get-label-font" "get-default-label-font" "default?" "if")}
        {Lisp-Entry "draw" #f 212 11 212 15 ("draw-arrow" "draw-shortcut" "draw-body" "draw-icon" "draw-prefix" "draw-highlight" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-highlight" #f 221 11 221 25 ("Focused-Selection" "name:" "Color" "fill-rect" "rectangle" "'rectangle" "edges:" "sunken" "'sunken" "outer:" "raised" "'raised" "highlight-flag" "inner:" "draw-edge" "menubar-label?" "if" "get-bounds" "bounds" "let" "item-selected?" "when" "surface")}
        {Lisp-Entry "draw-prefix" #f 229 29 229 40 ("context" "surface")}
        {Lisp-Entry "draw-icon" #f 233 11 233 20 ("enabled?:" "0" "draw-image" "default-disabled-resource" "either" "disabled-icon" "let" "enabled?" "not" "if" "get-icons-cache" "portfolio" "9" "prefix-width" "+" "left" "get-application" "appl" "let*" "icon" "when" "context" "surface")}
        {Lisp-Entry "draw-body" #f 244 11 244 20 ("text-enabled?" "draw-text" "effective-font" "set-font" "text-color" "set-text-color" "2" "get-height" "quotient" "-" "v" "icon-width" "prefix-width" "+" "h" "1" "0" "top" "10" "6" "menubar-label?" "if" "left" "get-font-height" "height" "let*" "when" "get-title" "localize" "title" "let" "surface")}
        {Lisp-Entry "draw-shortcut" #f 257 11 257 24 ("text-enabled?" "draw-text" "2" "get-height" "quotient" "-" "v" "body-width" "icon-width" "prefix-width" "+" "h" "1" "top" "6" "left" "get-font-height" "height" "present-shortcut" "text" "let*" "shortcut" "when" "surface")}
        {Lisp-Entry "draw-arrow" #f 268 11 268 21 ("right" "'right" "4" "5" "10" "-" "draw-arrow-tip" "tip-pen" "set-pen" "get-width" "width" "let" "menubar-label?" "not" "content" "and" "when" "surface")}
        {Lisp-Entry "item-selected?" #f 275 11 275 25 ("get-player" "owned?" "self" "popup-initiator" "eq?" "in?" "or" "mouse-view" "view" "parent" "get-poped" "poped" "let" "surrogate" "not" "and")}
        {Lisp-Entry "menubar-label?" #f 286 11 286 25 ("Menubar" "parent" "is?")}
        {Lisp-Entry "in-menubar?" #f 290 11 290 22 ("Context-Menu" "parent" "is-not?")}
        {Lisp-Entry "highlight-flag" #f 294 11 294 25 ("parent" "get-poped" "eq?" "content" "and")}
        {Lisp-Entry "tip-pen" #f 298 11 298 18 ("Black" "White" "name:" "Pen" "item-selected?" "if")}
        {Lisp-Entry "text-enabled?" #f 302 11 302 24 ("item-selected?" "enabled?" "or")}
        {Lisp-Entry "text-color" #f 306 11 306 21 ("Black" "else" "White" "menubar-label?" "item-selected?" "and" "Dark" "name:" "Color" "enabled?" "not" "cond")}
        {Lisp-Entry "mouse-enter" #f 317 11 317 22 ("popup-content" "poped?" "close-other-popups" "if" "content" "popup-initiator" "invalidate-view" "track-hovering" "parent" "get-poped" "poped" "let" "unless" "nextmethod" "Label-Item" "mouse-down-view" "is?" "mouse-down?" "menubar-label?" "not" "or" "get-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" #f 334 11 334 22 ("cancel-hovering" "menubar-label?" "not" "when" "nextmethod")}
        {Lisp-Entry "mouse-hover" #f 340 11 340 22 ("popup-content" "surrogate" "not" "content" "and" "when" "close-other-popups" "pos")}
        {Lisp-Entry "mouse-down" #f 346 11 346 21 ("popup-content" "neq?" "not" "or" "content" "and" "when" "list" "if" "exclude:" "close-popups" "menubar-label?" "menubar?" "parent" "get-poped" "poped" "let" "pos")}
        {Lisp-Entry "mouse-up" #f 354 11 354 19 ("self" "process-action" "enabled?" "when" "all?:" "player" "close-popups" "content" "unless" "pos")}
        {Lisp-Entry "popup-content" #f 366 11 366 24 ("popup-menu" "invalidate-view" "parent" "set-poped" "-2" "3" "get-width" "-" "get-height" "0" "Point" "new" "menubar-label?" "if" "position" "get-size" "size" "let*" "get-children" "when" "update" "get-content" "content" "let")}
        {Lisp-Entry "popup-menu" #f 377 11 377 21 ("-2" "2" "Point" "new" "alternate-position:" "close-root?:" "3.0" "fade-speed:" "Menu-Transient" "class:" "popup" "position" "menu")}
        {Lisp-Entry "close-popups" #f 381 11 381 23 ("invalidate-view" "nextmethod" "double-click" "mouse-down" "memq?" "unless" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "popup-destroy" #f 387 11 387 24 ("parent" "set-poped" "popup")}}}})
"Label-Tool"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Label-Tool.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Label-Tool" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Label-Tool" #f 46 7 46 17 ("Tool-Button")
        {Lisp-Entry "justification" #f 49 12 49 25 ("set-justification" "get-justification" "center" "'center")}
        {Lisp-Entry "color" #f 50 12 50 17 ("set-color" "get-color" "Black" "name:" "Color")}
        {Lisp-Entry "default-size" #f 53 11 53 23 ("20" "100" "Dimension")}
        {Lisp-Entry "get-justification" #f 62 18 62 35 ("justification")}
        {Lisp-Entry "set-justification" #f 66 18 66 35 ("invalidate-view" "justification" "set!" "value")}
        {Lisp-Entry "get-color" #f 71 18 71 27 ("color")}
        {Lisp-Entry "set-color" #f 75 18 75 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "draw-tool" #f 85 11 85 20 ("enabled?" "get-v" "get-h" "+" "draw-text" "color" "set-text-color" "center" "'center" "justification" "list" "get-size" "justify" "pos" "get-text-extent" "extent" "localize" "title" "let*" "0" "1" "pushed" "'pushed" "get-state" "eq?" "if" "offset" "let" "context" "surface")}}}})
"Label-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Label-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Label-View" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Label-View" #f 47 7 47 17 ("View")
        {Lisp-Entry "justification" #f 50 12 50 25 ("set-justification" "get-justification" "head" "'head")}
        {Lisp-Entry "color" #f 51 12 51 17 ("set-color" "get-color" "Black" "name:" "Color")}
        {Lisp-Entry "shadow?" #f 52 12 52 19 ("set-shadow?" "get-shadow?")}
        {Lisp-Entry "default-size" #f 55 11 55 23 ("16" "100" "Dimension")}
        {Lisp-Entry "get-justification" #f 64 18 64 35 ("justification")}
        {Lisp-Entry "set-justification" #f 68 18 68 35 ("invalidate-view" "justification" "set!" "value")}
        {Lisp-Entry "get-color" #f 73 18 73 27 ("color")}
        {Lisp-Entry "set-color" #f 77 18 77 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "get-shadow?" #f 82 18 82 29 ("shadow?")}
        {Lisp-Entry "set-shadow?" #f 86 18 86 29 ("invalidate-view" "shadow?" "set!" "value")}
        {Lisp-Entry "label-title" #f 96 29 96 40 ("title")}
        {Lisp-Entry "preferred-size" #f 105 11 105 25 ("16" "font" "text-width" "Dimension" "new" "default-size" "not" "if" "label-title" "localize" "title" "let")}
        {Lisp-Entry "draw" #f 117 11 117 15 ("Dark" "color" "enabled?" "get-v" "2" "get-h" "+" "draw-text" "Dark-Gray" "name:" "Color" "set-text-color" "shadow?" "when" "get-size" "justify" "pos" "center" "'center" "list" "pair?" "if" "justification" "get-text-extent" "extent" "label-title" "either" "localize" "title" "let*" "lv" "lh" "context" "surface")}
        {Lisp-Entry "property-presentation" #f 134 16 134 37 ("nextmethod" "else" "shadow?" "color" "justification" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 142 11 142 27 ("nextmethod" "else" "Boolean-Row" "shadow?" "Color-Row" "color" "Justification-Combo-Row" "new" "justification" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 151 11 151 37 ("auto-size?" "shadow?" "justification" "font" "size" "position" "color" "background" "title" "name-info" "class-info")}}
      {Lisp-Entry "Justification-Combo-Row" #f 163 7 163 30 ("Combo-Row")
        {Lisp-Entry "Justification-Choices" #f 166 14 166 35 ("tail" "center" "head")}
        {Lisp-Entry "initialize" #f 172 11 172 21 ("Justification-Choices" "set-choices" "nextmethod" "apply" "rest")}}}})
"Layout"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "layout" "Layout.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.layout.Layout" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Layout" #f 45 7 45 13 ("Component")
        {Lisp-Entry "layout" #f 48 26 48 32 ("rest" "height" "width" "figures")}}}})
"Layout-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Layout-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Layout-Text-View" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Layout-Text-View" #f 45 7 45 23 ("Formatted-Text-View")}}})
"Layout-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Layout-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Layout-View" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Layout-View" #f 46 7 46 18 ("View")
        {Lisp-Entry "layout-type" #f 61 12 61 23 ("set-layout-type" "get-layout-type")}
        {Lisp-Entry "layout-insets" #f 62 12 62 25 ("set-layout-insets" "get-layout-insets" "0" "Rect")}
        {Lisp-Entry "layout-justification" #f 63 12 63 32 ("set-layout-justification" "get-layout-justification" "center" "'center")}
        {Lisp-Entry "layout-padding" #f 64 12 64 26 ("set-layout-padding" "get-layout-padding" "0")}
        {Lisp-Entry "get-layout-type" #f 72 18 72 33 ("layout-type")}
        {Lisp-Entry "set-layout-type" #f 76 18 76 33 ("layout-view" "set!" "layout-type" "neq?" "when" "type")}
        {Lisp-Entry "get-layout-insets" #f 83 18 83 35 ("layout-insets")}
        {Lisp-Entry "set-layout-insets" #f 87 18 87 35 ("layout-view" "layout-type" "when" "layout-insets" "set!" "insets")}
        {Lisp-Entry "get-layout-justification" #f 93 18 93 42 ("layout-justification")}
        {Lisp-Entry "set-layout-justification" #f 97 18 97 42 ("layout-view" "layout-type" "when" "layout-justification" "set!" "just")}
        {Lisp-Entry "get-layout-padding" #f 103 18 103 36 ("layout-padding")}
        {Lisp-Entry "set-layout-padding" #f 107 18 107 36 ("layout-view" "layout-type" "when" "layout-padding" "set!" "pad")}
        {Lisp-Entry "inner?" #f 118 11 118 17 ("children" "memq?" "layout-type" "and" "view")}
        {Lisp-Entry "layout" #f 127 11 127 17 ("error" "else" "Flow-Layout" "flow" "self" "justification:" "Snap-Layout" "snap" "layout" "layout-padding" "padding:" "insets:" "Border-Layout" "ly" "border" "layout-justification" "get-location" "either" "justification" "rect-size" "topleft" "-" "expand-rect" "rect" "get-bounds" "bounds" "let*" "justify" "pos" "get-size" "center" "get-bottom" "get-height" "get-top" "get-right" "get-width" "get-left" "+" "Dimension" "new" "set-size-noevent" "layout-insets" "rect-position" "first-child" "fit" "children" "set-size" "set-position" "View" "is?" "when" "child" "function" "for-each" "fill-size" "size" "fill-position" "position" "let" "fill" "layout-type" "case")}
        {Lisp-Entry "fill-position" #f 176 29 176 42 ("get-top" "layout-insets" "get-left" "Point" "new")}
        {Lisp-Entry "fill-size" #f 180 29 180 38 ("get-bottom" "get-top" "get-right" "layout-insets" "get-left" "+" "Dimension" "new" "get-size" "-")}
        {Lisp-Entry "get-class-image" #f 189 16 189 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 193 16 193 37 ("nextmethod" "else" "layout-padding" "layout-justification" "layout-insets" "layout-type" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 202 11 202 27 ("nextmethod" "else" "Rect-Row" "layout-insets" "Justification-Combo-Row" "layout-justification" "Type-Combo-Row" "new" "layout-type" "field-name" "case" "property")}}
      {Lisp-Entry "Type-Combo-Row" #f 215 7 215 21 ("Combo-Row")
        {Lisp-Entry "Choices" #f 218 14 218 21 ("flow" "border" "justify" "center" "fill")}
        {Lisp-Entry "initialize" #f 227 11 227 21 ("Choices" "set-choices" "nextmethod" "apply" "rest")}}
      {Lisp-Entry "Justification-Combo-Row" #f 237 7 237 30 ("Combo-Row")
        {Lisp-Entry "Choices" #f 240 14 240 21 ("tail" "center" "head")}
        {Lisp-Entry "initialize" #f 248 11 248 21 ("Choices" "set-choices" "nextmethod" "apply" "rest")}}}})
"License"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "license" "License.jazz"} 1226584782
    {Lisp-Entry "jazz.license.License" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "License" #f 59 7 59 14 ("Object")}
      {Lisp-Entry "License" #f 65 7 65 14 ("Object")
        {Lisp-Entry "license" #f 68 12 68 19 ("set-license" "get-license")}
        {Lisp-Entry "owner" #f 69 12 69 17 ("set-owner" "get-owner")}
        {Lisp-Entry "get-license" #f 72 18 72 29 ("license" "encode32")}
        {Lisp-Entry "set-license" #f 76 18 76 29 ("string" "decode32" "license" "set!" "value")}
        {Lisp-Entry "get-owner" #f 80 18 80 27 ("owner")}
        {Lisp-Entry "set-owner" #f 84 18 84 27 ("owner" "set!" "value")}
        {Lisp-Entry "valid-code?" #f 88 18 88 29 ("license" "hashcode" "bitwise-xor" "apply" "0" "=")}
        {Lisp-Entry "valid-owner?" #f 92 18 92 30 ("prefix?" "8" "license" "hashcode" "subseq" "hashed-license" "owner" "hash-owner" "hashed-owner" "let")}
        {Lisp-Entry "key-expired?" #f 98 18 98 30 ("now" ">" "2" "8" "1" "element" "arithmetic-shift" "+" "key-expires" "license" "hashcode" "hashed-license" "let*")}
        {Lisp-Entry "license-expired?" #f 105 18 105 34 ("now" ">" "4" "8" "3" "element" "arithmetic-shift" "+" "license-expires" "license" "hashcode" "hashed-license" "let*")}
        {Lisp-Entry "demo?" #f 113 18 113 23 ("1" "mask-bit-set?" "5" "element" "bitfield" "license" "hashcode" "hashed-license" "let*")}
        {Lisp-Entry "ElapseInDay" #f 120 19 120 30 ("864000000000L" "2" "1" "2001" "Date" "new" "get-time" "time->seconds" "-")}
        {Lisp-Entry "now" #f 128 16 128 19 ("ElapseInDay" "2001" "Date" "new" "get-time" "universal-time" "time->seconds" "-" "/")}
        {Lisp-Entry "hashcode" #f 139 16 139 24 ("length" "0" "naturals" "Roll20" "5" "modulo" "element" "bitwise-xor" "n" "offset" "function" "map" "Hash8" "decode32" "hash" "let" "list")}
        {Lisp-Entry "hash-owner" #f 148 11 148 21 ("hash-data" "gather" "Heap-Block" "coerce" "data" "let" "Cryptography-Provider" "new" "provider" "with-closed" "hash-owner" "'hash-owner" "unimplemented" "owner")}}}})
"License-Creator"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "license" "License-Creator.jazz"} 1226584782
    {Lisp-Entry "jazz.license.License-Creator" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "License-Creator" #f 55 7 55 22 ("License")
        {Lisp-Entry "Demo-Flag" #f 58 12 58 21 ("#x01")}
        {Lisp-Entry "flags" #f 61 8 61 13 ("Demo-Flag")}
        {Lisp-Entry "license-expires" #f 64 12 64 27 ("set-license-expires" "get-license-expires")}
        {Lisp-Entry "key-expires" #f 65 12 65 23 ("set-key-expires" "get-key-expires")}
        {Lisp-Entry "demo?" #f 66 12 66 17 ("set-demo?" "get-demo?")}
        {Lisp-Entry "get-license-expires" #f 69 18 69 37 ("license-expires")}
        {Lisp-Entry "set-license-expires" #f 73 18 73 37 ("license-expires" "set!" "value")}
        {Lisp-Entry "get-key-expires" #f 77 18 77 33 ("key-expires")}
        {Lisp-Entry "set-key-expires" #f 81 18 81 33 ("key-expires" "set!" "value")}
        {Lisp-Entry "get-demo?" #f 85 18 85 27 ("Demo-Flag" "flags" "mask-bit-set?")}
        {Lisp-Entry "set-demo?" #f 89 18 89 27 ("Demo-Flag" "mask-bit-set" "flags" "set!" "flag")}
        {Lisp-Entry "unroll20" #f 99 16 99 24 ("length" "0" "naturals" "Roll20" "get-rank" "n" "function" "map")}
        {Lisp-Entry "unhashcode" #f 105 16 105 26 ("length" "0" "naturals" "Roll20" "5" "modulo" "element" "bitwise-xor" "n" "offset" "function" "map" "Hash8" "decode32" "hash" "let" "list")}}}})
"License-Dialog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "license" "License-Dialog.jazz"} 1226584782
    {Lisp-Entry "jazz.license.License-Dialog" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "License-Dialog" #f 48 7 48 21 ("on-cancel" "310" "cancel" "on-ok" ":host" "action-handler:" "default?:" "24" "80" "172" "220" "ok" "license" "52" "license-border" "82" "54" "license-label" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "Default" "Text-Style" "default-style:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "name" "fill" "layout-type:" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "border-type:" "19" "196" "151" "name-border" "33" "29" "58" "name-label" "116" "404" "44" "-2" "content" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "206" "400" "Dimension" "size:" "View")
        {Lisp-Entry "install-in-host" #f 71 11 71 26 ("name" "'name" "locate" "acquire-focus" "nextmethod" "host")}
        {Lisp-Entry "host-title" #f 81 16 81 26 ()}
        {Lisp-Entry "host-position" #f 85 16 85 29 ("300" "450" "Point")}
        {Lisp-Entry "host-size" #f 89 16 89 25 ("120" "302" "Dimension")}
        {Lisp-Entry "get-modal-result" #f 98 11 98 27 ("license" "'license" "name" "'name" "locate" "get-string-content" "values")}
        {Lisp-Entry "get-tab-stops" #f 108 11 108 24 ("license" "'license" "name" "'name" "locate" "list")}
        {Lisp-Entry "on-double-click" #f 120 11 120 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-return-press" #f 126 11 126 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" #f 132 11 132 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "Header-Color" #f 142 14 142 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" #f 146 11 146 15 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}}})
"Line"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Line.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Line" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "Line" #f 45 7 45 11 ("Object")
        {Lisp-Entry "text" #f 48 18 48 22 ("generate")}
        {Lisp-Entry "runs" #f 49 18 49 22 ("generate")}
        {Lisp-Entry "rank" #f 50 18 50 22 ("generate")}
        {Lisp-Entry "offset" #f 51 18 51 24 ("generate")}
        {Lisp-Entry "length" #f 52 18 52 24 ("generate")}
        {Lisp-Entry "left" #f 53 18 53 22 ("generate")}
        {Lisp-Entry "top" #f 54 18 54 21 ("generate")}
        {Lisp-Entry "width" #f 55 18 55 23 ("generate")}
        {Lisp-Entry "height" #f 56 18 56 24 ("generate")}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("compute-height" "height~self" "compute-length" "length~self" "width~self" "top~self" "left~self" "offset~self" "rank~self" "runs~self" "text~self" "set!" "nextmethod" "width" "top" "left" "offset" "rank" "runs" "text")}
        {Lisp-Entry "print" #f 72 11 72 16 ("runs" "write" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-limit" #f 83 18 83 27 ("length" "offset" "+")}
        {Lisp-Entry "compute-length" #f 92 11 92 25 ("runs" "get-length" "increase!" "run" "function" "for-each" "0" "len" "let")}
        {Lisp-Entry "compute-height" #f 105 11 105 25 ("max" "set!" "run-height" "run" "function" "for-each" "0" "height" "let" "text" "get-default-style" "get-height" "runs" "null?" "if")}
        {Lisp-Entry "get-bottom" #f 116 18 116 28 ("height" "top" "+")}
        {Lisp-Entry "range-region" #f 125 21 125 33 ("acquire-delta" "rect:" "Region" "offset-rect" "offset" "get-bottom" "top" "Rect" "new" "rect" "let*" "not" "if" "right" "0" "either" "col->view" "get-h" "left" "let" "sc" "dv" "dh" "paragraph" "end" "start" "paragraph-width" "paragraph-top" "paragraph-left")}
        {Lisp-Entry "scan" #f 138 21 138 25 ("runs" "1" "increase!" "set!" "continuation-return" "+" ">=" "and" "if" "right" "mid" "n" "c" "scan" "get-length" "len" "rightmost" "nmost" "run" "for-each" "return" "function" "continuation-capture" "text" "get-tabs" "tabs" "left" "h" "0" "b" "let" "proc" "end")}
        {Lisp-Entry "draw-line" #f 165 21 165 30 ("runs" "increase!" "height" "draw-run" "width" "run" "function" "for-each" "text" "draw-enabled?" "enabled?" "left~self" "+" "let" "left" "tabs" "v" "h" "context" "surface")}
        {Lisp-Entry "view->col" #f 179 21 179 30 ("get-length" "continuation-return" ">" "right" "mid" "left" "n" "c" "scan" "return" "function" "continuation-capture" "get-bottom" "<" "top" ">=" "and" "when" "get-v" "v" "get-h" "h" "let" "view")}
        {Lisp-Entry "col->view" #f 192 21 192 30 ("runs" "not-null?" "unless" "set!" "top" "Point" "new" "continuation-return" "=" "when" "right" "mid" "left" "n" "c" "scan" "return" "function" "continuation-capture" "0" "rightmost" "let" "strict?" "col")}
        {Lisp-Entry "col->text" #f 209 21 209 30 ("-" "rank" "Cell" "new" "get-limit" "<" "offset" ">=" "and" "when" "col")}}}})
"Line-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Line-Surrogate.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Line-Surrogate" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Line-Surrogate" #f 46 7 46 21 ("View-Surrogate")}}})
"Line-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Line-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Line-View" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Line-View" #f 46 7 46 16 ("View")
        {Lisp-Entry "from" #f 49 12 49 16 ("set-from" "get-from")}
        {Lisp-Entry "to" #f 50 12 50 14 ("set-to" "get-to")}
        {Lisp-Entry "color" #f 51 12 51 17 ("set-color" "get-color")}
        {Lisp-Entry "style" #f 52 12 52 17 ("set-style" "generate" "solid" "'solid")}
        {Lisp-Entry "get-from" #f 60 18 60 26 ("from")}
        {Lisp-Entry "set-from" #f 64 18 64 26 ("invalidate-view" "from" "set!" "value")}
        {Lisp-Entry "get-to" #f 69 18 69 24 ("to")}
        {Lisp-Entry "set-to" #f 73 18 73 24 ("invalidate-view" "to" "set!" "value")}
        {Lisp-Entry "get-color" #f 78 18 78 27 ("color")}
        {Lisp-Entry "set-color" #f 82 18 82 27 ("invalidate-view" "color" "set!" "value")}
        {Lisp-Entry "set-style" #f 87 18 87 27 ("invalidate-view" "style" "set!" "value")}
        {Lisp-Entry "Tolerance" #f 97 14 97 23 ("4.0")}
        {Lisp-Entry "in-drawing?" #f 101 11 101 22 ("Tolerance" "<" "line-distance" "distance" "let" "to" "from" "null?" "or" "nextmethod" "and" "size" "pos")}
        {Lisp-Entry "mouse-down" #f 109 11 109 21 ("pos")}
        {Lisp-Entry "draw" #f 118 11 118 15 ("color:" "line-width" "width:" "Pen" "new" "alternate" "'alternate" "style" "eq?" "get-v" "get-h" "line" "set-pen" "line-pen" "pen" "with-closed" "line-color" "color" "let" "to" "from" "and" "when" "lv" "lh" "context" "surface")}
        {Lisp-Entry "line-width" #f 128 29 128 39 ("1")}
        {Lisp-Entry "line-color" #f 132 29 132 39 ("Black" "name:" "Color" "color" "either")}
        {Lisp-Entry "line-pen" #f 136 29 136 37 ("error" "else" "'alternate" "style:" "alternate" "color:" "line-width" "width:" "Pen" "new" "solid" "style" "case" "color")}
        {Lisp-Entry "component-surrogate" #f 148 11 148 30 ("Line-Surrogate")}}}})
"Lisp-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lisp" "catalog" "Lisp-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lisp.catalog.Lisp-Entry" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Lisp-Entry" #f 45 7 45 17 ("Indexed-Entry")
        {Lisp-Entry "end-line" #f 48 8 48 16 ()}
        {Lisp-Entry "end-column" #f 49 8 49 18 ()}
        {Lisp-Entry "signature" #f 50 8 50 17 ()}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("signature~self" "end-column~self" "end-line~self" "set!" "nextmethod" "r" "d" "ec" "el" "c" "l" "s" "n")}
        {Lisp-Entry "print-catalog" #f 62 11 62 24 ("print-definitions" "references" "end-column" "end-line" "column" "line" "signature" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 72 11 72 20 ("Bitmap-Resource")}
        {Lisp-Entry "get-end-line" #f 81 18 81 30 ("end-line")}
        {Lisp-Entry "get-end-column" #f 85 18 85 32 ("end-column")}
        {Lisp-Entry "get-signature" #f 89 18 89 31 ("signature")}
        {Lisp-Entry "present" #f 98 11 98 18 ("present-identifier")}
        {Lisp-Entry "present-name" #f 102 11 102 23 ("present-noname" "not" "if" "get-name" "name" "let")}
        {Lisp-Entry "present-identifier" #f 109 11 109 29 ("compose-name" ":string" "format" "signature" "present-noname" "not" "if" "get-name" "name" "let")}
        {Lisp-Entry "compose-name" #f 118 11 118 23 (":string" "format" "present-name" "parent-name" "let" "get-name" "Lisp-Entry" "parent" "is?" "and" "if" "name")}
        {Lisp-Entry "present-noname" #f 125 11 125 25 ()}
        {Lisp-Entry "entry-range" #f 134 11 134 22 ("end-column" "end-line" "column" "line" "Cell" "Range$Cell$" "new")}
        {Lisp-Entry "edit-reference" #f 138 11 138 25 ("center-caret" "'center-caret" "ensure-displayed?:" "set-selection" "find-expression" "reference-range" "let" "when" "get-start" "definition-range" "range" "get-guest" "text" "edit" "apply" "frame" "let*" "rest" "target")}
        {Lisp-Entry "update-indexes" #f 153 11 153 25 ("definitions" "update-indexes" "definition" "references" "key" "function" "for-each" "name" "update-index" "references-index" "definitions-index")}}}})
"Lisp-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lisp" "text" "Lisp-Explorer.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lisp.text.Lisp-Explorer" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Lisp-Explorer" #f 65 7 65 20 ("Code-Explorer")
        {Lisp-Entry "find-comment-last-row" #f 70 8 70 29 ()}
        {Lisp-Entry "find-comment-last-col" #f 71 8 71 29 ()}
        {Lisp-Entry "Composites" #f 74 12 74 22 ("literal" "reference" "list")}
        {Lisp-Entry "Open-Composites" #f 80 12 80 27 ()}
        {Lisp-Entry "Close-Composites" #f 86 12 86 28 ()}
        {Lisp-Entry "get-modifiers" #f 92 26 92 39 ()}
        {Lisp-Entry "get-syntax" #f 96 11 96 21 ("jazz" "'jazz")}
        {Lisp-Entry "explore-error" #f 100 11 100 24 ("end:" "start:" "message:" "Explore-Error" "new" "signal" "end" "start" "message")}
        {Lisp-Entry "present-char" #f 104 11 104 23 ("string" "else" "char-symbol" "memv?" "not" "cond" "c")}
        {Lisp-Entry "current-expr" #f 113 18 113 30 ("get-marked" "symbol" "'symbol" "kind" "eq?" "backward-expr" "and" "when")}
        {Lisp-Entry "forward-expr" #f 118 11 118 23 ("forward-simple-expr" "forward-expr" "if" "found" "eqv?" "and" "or" "next" "forward" "when" "memv?" "quotation?" "get-start" "start" "0" "char-forward" "c" "let" "end" "set-start" "forward-whites")}
        {Lisp-Entry "backward-expr" #f 138 11 138 24 ("else" "expr-comment" "'expr-comment" "not" "backward" "case" "prev" "when" "backward-simple-expr" "found" "backward-scheme-char" "2" "backward-delimited-string" "eqv?" "and" "if" "1" "c1" "0" "char-backward" "c0" "let" "start" "set-end" "backward-whites")}
        {Lisp-Entry "forward-simple-expr" #f 171 19 171 38 ("else" "literal" "'literal" "reference" "'reference" "list" "'list" "forward-composite" "forward-expr-comment" "forward-constituent" "jazz-constituent?" "forward-escaped-symbol" "forward-string" "string-delimiter?" "forward-sharp" "eqv?" "cond" "when" "0" "char-forward" "c" "let")}
        {Lisp-Entry "backward-simple-expr" #f 185 19 185 39 ("else" "literal" "'literal" "reference" "'reference" "list" "'list" "backward-composite" "backward-constituent" "jazz-constituent?" "backward-escaped-symbol" "eqv?" "backward-string" "string-delimiter?" "cond" "when" "0" "char-backward" "c" "let")}
        {Lisp-Entry "forward-all-expr" #f 197 18 197 34 ("start" "set!" "forward-expr" "while" "end" "copy" "initial-end" "let")}
        {Lisp-Entry "backward-all-expr" #f 204 18 204 35 ("end" "set!" "backward-expr" "while" "start" "copy" "initial-start" "let")}
        {Lisp-Entry "forward-constituent" #f 211 19 211 38 ("else" "symbol" "'symbol" "keyword" "'keyword" "and" "if" "kind" "jazz-constituent?" "not" "or" "set!" "forward" "cond" "c" "iterate" "last" "0" "char-forward" "eqv?" "keyword?" "let")}
        {Lisp-Entry "backward-constituent" #f 230 19 230 39 ("else" "symbol" "'symbol" "keyword" "'keyword" "if" "kind" "jazz-constituent?" "not" "or" "set!" "backward" "1" "cond" "c" "iterate" "unspecified" "last" "0" "char-backward" "eqv?" "keyword?" "let")}
        {Lisp-Entry "backward-escaped-symbol" #f 249 19 249 42 ("else" "symbol" "'symbol" "kind" "set!" "1" "eqv?" "cond" "not" "if" "0" "char-backward" "c" "iterate" "let" "backward")}
        {Lisp-Entry "backward-scheme-char" #f 268 19 268 39 ("char" "'char" "kind" "set!" "backward")}
        {Lisp-Entry "forward-expr-comment" #f 276 19 276 39 ("expr-comment" "'expr-comment" "kind" "set!" "forward-expr" "forward")}
        {Lisp-Entry "forward-scheme-comment" #f 283 19 283 41 ("expr-comment" "'expr-comment" "kind" "set!" "forward-expr" "forward")}
        {Lisp-Entry "forward-sharp" #f 290 19 290 32 ("forward-constituent" "else" "forward-scheme-comment" "forward-scheme-char" "forward-named-string" "1" "and" "forward-delimited-string" "eqv?" "boolean" "'boolean" "kind" "set!" "memq?" "cond" "0" "char-forward" "c0" "let" "forward")}
        {Lisp-Entry "forward-escaped-symbol" #f 309 19 309 41 ("else" "symbol" "'symbol" "kind" "set!" "eqv?" "cond" "not" "if" "0" "char-forward" "c" "iterate" "let" "forward")}
        {Lisp-Entry "forward-delimited-string" #f 328 19 328 43 ("else" "delimited-string" "'delimited-string" "kind" "set!" "eqv?" "and" "not" "or" "cond" "1" "c1" "0" "char-forward" "c0" "iterate" "let" "forward")}
        {Lisp-Entry "forward-named-string" #f 345 19 345 39 ("named-string" "'named-string" "continuation-return" "begin" "nu=?" "if" "limit" "<" "while" "0" "1" "+" "Cell" "new" "set-end" "get-col" "end" "get-row" "paragraph-string" "subseq" "name" "let" "return" "function" "continuation-capture" "forward")}
        {Lisp-Entry "forward-scheme-char" #f 361 19 361 38 ("else" "jazz-constituent?" "cond" "iterate" "char" "'char" "kind" "set!" "begin" "alphanumeric?" "not" "if" "0" "char-forward" "c" "let" "forward")}
        {Lisp-Entry "forward-string" #f 381 19 381 33 ("else" "string" "'string" "kind" "set!" "string-delimiter?" "eqv?" "not" "cond" "0" "char-forward" "c" "iterate" "let" "forward")}
        {Lisp-Entry "backward-delimited-string" #f 400 19 400 44 ("else" "delimited-string" "'delimited-string" "kind" "set!" "eqv?" "and" "not" "or" "cond" "1" "c1" "0" "char-backward" "c0" "iterate" "let" "backward")}
        {Lisp-Entry "backward-string" #f 418 19 418 34 ("else" "string" "'string" "kind" "set!" "string-delimiter?" "1" "eqv?" "not" "cond" "0" "char-backward" "c" "iterate" "let" "backward")}
        {Lisp-Entry "forward-composite" #f 437 19 437 36 ("kind" "set!" "1" "next-pos" "present-char" "format" "explore-error" "eqv?" "not" "if" "0" "char-forward" "c" "let" "forward-whites" "forward-all-expr" "forward" "end" "set-start" "delimiter" "knd")}
        {Lisp-Entry "backward-composite" #f 450 19 450 37 ("kind" "end" "set!" "1" "previous-pos" "present-char" "format" "explore-error" "eqv?" "not" "if" "0" "char-backward" "c" "backward-whites" "backward-all-expr" "backward" "start" "copy" "initial-start" "let" "delimiter" "knd")}
        {Lisp-Entry "enter-list" #f 464 18 464 28 ("forward" "0" "char-forward" "eqv?" "when" "forward-whites")}
        {Lisp-Entry "exit-list" #f 471 18 471 27 ("forward" "0" "char-forward" "eqv?" "when" "forward-whites" "forward-all-expr")}
        {Lisp-Entry "enter-composite" #f 479 18 479 33 ("else" "literal" "'literal" "reference" "'reference" "list" "'list" "quasiquote" "'quasiquote" "quote" "'quote" "unquote" "'unquote" "unquote-splicing" "'unquote-splicing" "kind" "set!" "forward" "1" "eqv?" "and" "cond" "0" "char-forward" "c0" "forward-whites" "get-start" "set-end" "get-end" "end" "let")}
        {Lisp-Entry "exit-composite" #f 518 18 518 32 ("forward" "Close-Composites" "0" "char-forward" "memv?" "when" "forward-whites" "forward-all-expr")}
        {Lisp-Entry "skip-forward" #f 526 18 526 30 ("get-marked" "=" "forward-expr" "and" "name")}
        {Lisp-Entry "skip-backward" #f 530 18 530 31 ("get-marked" "=" "backward-expr" "and" "name")}
        {Lisp-Entry "forward-modifiers" #f 534 18 534 35 ("meta" "'meta" "get-modifiers" "memq?" "find-marked-symbol" "set!" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "iterate" "symbol" "meta?" "end" "copy" "old" "let")}
        {Lisp-Entry "forward-comments" #f 550 11 550 27 ("next-paragraph")}
        {Lisp-Entry "backward-comments" #f 554 11 554 28 ()}
        {Lisp-Entry "forward-whites" #f 558 18 558 32 ("forward" "forward-comments" "begin" "if" "eqv?" "whitespace?" "or" "and" "when" "0" "char-forward" "c" "iterate" "let")}
        {Lisp-Entry "backward-whites" #f 570 18 570 33 ("backward-lisp-comment" "backward" "whitespace?" "and" "when" "0" "char-backward" "c" "iterate" "let")}
        {Lisp-Entry "backward-lisp-comment" #f 580 11 580 32 ("set-col" "<" "and" "when" "set!" "find-lisp-comment" "find-comment-last-col" "find-comment-last-row" "eqv?" "if" "col" "get-col" "start-col" "start" "get-row" "start-row" "let")}
        {Lisp-Entry "find-lisp-comment" #f 594 11 594 28 ("else" "forward-scheme-char" "forward-delimited-string" "forward" "1" "c1" "forward-string" "eqv?" "cond" "char-forward" "c0" "get-col" "<" "get-row" "=" "and" "when" "iterate" "0" "Cell" "new" "set-end" "result" "end" "copy" "preserved-end" "paragraph-length" "max-col" "let" "row")}
        {Lisp-Entry "outer-expr" #f 656 11 656 21 ("kind" "forward" "backward" "knd" "close" "open" "bind" "Composites" "assq" "info" "nc" "pc" "present-char" "format" "explore-error" "composites-match?" "char-backward" "starter" "backward-all-expr" "skipped" "set!" "char-forward" "ender" "forward-all-expr" "when" "else" "next-pos" "set-end" "1" "previous-pos" "set-start" "eqv?" "get-char" "let*" "memv?" "forward-expr" "open-composite?" "backward-constituent" "forward-constituent" "backward-expr" "jazz-constituent?" "not" "string-delimiter?" "close-composite?" "or" "=" "and" "cond" "next-char" "nxt" "0" "previous-char" "prv" "end" "e" "start" "copy" "s" "let" "outer-composite?" "outer-composite?:" "composite?" "composite?:")}
        {Lisp-Entry "form-expr" #f 715 18 715 27 ("set-start" "find-marked-symbol" "symbol" "'symbol" "kind" "eq?" "forward-expr" "enter-list" "0" "next-char" "eqv?" "when" "prog1" "set-end" "end" "e" "start" "copy" "s" "let")}
        {Lisp-Entry "form-expr?" #f 729 18 729 28 ("form-expr" "memq?" "symbols")}
        {Lisp-Entry "form-name" #f 733 18 733 27 ("symbol?" "if" "expr" "set!" "memq?" "not-null?" "while" "get-modifiers" "modifiers" "cdr" "scan" "let" "car" "definition-name?" "pair?" "and" "when" "form")}
        {Lisp-Entry "category-expr?" #f 748 18 748 32 ("com-interface" "com-class" "remotable-stub" "package" "interface" "class" "form-expr?")}
        {Lisp-Entry "definition-expr?" #f 752 26 752 42 ("form-expr" "definition-name?")}
        {Lisp-Entry "definition-name?" #f 756 26 756 42 ("com-interface" "com-class" "remotable-stub" "package" "interface" "class" "memq?" "name")}
        {Lisp-Entry "definition-name" #f 760 18 760 33 ("set-start" "values" "prog1" "begin" "0" "char-forward" "eqv?" "if" "forward-whites" "java-method" "java-external" "com-method" "com-external" "specific" "generic" "intrinsic" "winexternal" "external" "memq?" "cond" "forward-modifiers" "meta?" "package" "'package" "eq?" "package?" "find-marked-symbol" "type" "let*" "forward-expr" "enter-list" "set-end" "end" "e" "start" "copy" "s" "let")}
        {Lisp-Entry "definition-only-name" #f 785 11 785 31 ("definition-name" "name" "meta?" "package?" "receive")}
        {Lisp-Entry "for-each-comment" #f 795 18 795 34 ("comment-string" "text-search-all" "get-syntax" "title-comment-string" "subseq" "string=?" "cardinality" "cast" "4" "+" "<" "and" "end" "paragraph-end" "set-end" "set!" "string-style?" "Expr-Comment" "'Expr-Comment" "get-name" "eq?" "unless" "start" "text" "get-style-at" "style" "paragraph-string" "string" "/=" "not" "or" "when" "get-col" "col" "get-row" "row" "pos" "function" "for-each" "previous-row" "let" "proc")}
        {Lisp-Entry "walk-declarations" #f 817 26 817 43 ("walk-declaration" "while" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-declaration" #f 822 26 822 42 ("walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-parameters" #f 826 21 826 36 ("code" "'code" "walk-expression" "set!" "start" "/=" "if" "not" "forward-expr" "and" "while" "out?" "end" "get-row" "let" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "iterate-expressions" #f 840 18 840 37 ("for-each-expressions" "recursive?" "recursive?:" "code" "'code" "mode" "mode:" "proc")}
        {Lisp-Entry "iterate-expression" #f 844 18 844 36 ("for-each-expression" "recursive?" "recursive?:" "code" "'code" "mode" "mode:" "proc")}
        {Lisp-Entry "for-each-expressions" #f 848 11 848 31 ("for-each-expression" "forward-expr" "while" "mode" "proc")}
        {Lisp-Entry "for-each-expression" #f 853 11 853 30 ("for-each-expression" "forward-expr" "code" "'code" "quasiquote" "quote" "memq?" "else" "exit-composite" "for-each-expressions" "quotation" "'quotation" "literal" "'literal" "if" "let" "composite-kind?" "exit-list" "for-each-forms" "list" "'list" "kind" "eq?" "cond" "enter-composite" "when" "mode" "proc")}
        {Lisp-Entry "Quotation-Forms" #f 869 14 869 29 ("intrinsic" "external" "jml>>" "form>>" "form" "quasiquote" "quote")}
        {Lisp-Entry "for-each-forms" #f 873 11 873 25 ("for-each-expressions" "for-each-expression" "quotation" "'quotation" "0" "char-forward" "eqv?" "form" "'form" "intern-marked-symbol" "neq?" "or" "Quotation-Forms" "find-marked-symbol" "memq?" "symbol" "'symbol" "eq?" "and" "if" "let" "kind" "when" "forward-expr" "mode" "proc")}
        {Lisp-Entry "walk-expressions" #f 886 18 886 34 ("set!" "walk-expression" "forward-expr" "while" "first?" "code" "'code" "mode" "expression" "context")}
        {Lisp-Entry "walk-expression" #f 892 11 892 26 ("walk-expression" "forward-expr" "code" "'code" "quasiquote" "quote" "memq?" "let" "else" "exit-composite" "walk-expressions" "composite-kind?" "cond" "enter-composite" "when" "specifier" "'specifier" "tag" "'tag" "specifier-marked?" "symbol" "'symbol" "kind" "eq?" "and" "if" "end" "start" "first?" "mode" "expression" "context")}
        {Lisp-Entry "specifier-marked?" #f 909 11 909 28 ("1" "end" "-" "start" "get-char" "eqv?" "symbol" "'symbol" "kind" "eq?" "and")}
        {Lisp-Entry "constant?" #f 920 18 920 27 ("keyword" "symbol" "char" "boolean" "number" "kind" "memq?")}
        {Lisp-Entry "get-constant" #f 924 18 924 30 ("get-marked" "read-string-element" "function" "with-jazz-readtable" "else" "intern-marked-symbol" "symbol" "kind" "case")}
        {Lisp-Entry "search-expressions" #f 965 18 965 36 ("mode:" "get-range" "list" "continuation-return" "match?" "start" ">=" "and" "when" "bind" "info" "for-each" "iterate-expressions" "return" "continuation-capture" "cons" "read-string-element" "target" "target-string" "function" "map" "all" "let" "ignore-case?" "whole-words?" "position" "targets" "mode")}
        {Lisp-Entry "match?" #f 983 11 983 17 ("get-marked" "read-string-element" "equal?" "expression-kind" "eq?" "not" "or" "and" "parse-pattern-variable" "kind" "name" "pattern-variable?" "if" "get-kind" "expl-kind" "let" "parse-expression" "expression" "mode" "receive" "target" "expl-mode")}
        {Lisp-Entry "expression-kind" #f 996 11 996 26 ("expression-kind" "'expression-kind" "unimplemented" "else" "symbol" "'symbol" "symbol?" "string" "'string" "string?" "char" "'char" "char?" "boolean" "'boolean" "boolean?" "number" "'number" "number?" "cond" "expression")}
        {Lisp-Entry "parse-expression" #f 1005 11 1005 27 ("cadr" "quotation" "'quotation" "values" "quote" "'quote" "car" "eq?" "pair?" "and" "if" "expression")}
        {Lisp-Entry "pattern-variable?" #f 1011 11 1011 28 ("0" "symbol->string" "element" "eqv?" "symbol?" "and" "expression")}
        {Lisp-Entry "parse-pattern-variable" #f 1016 11 1016 33 ("string->symbol" "empty-string?" "if" "values" "mode" "kind" "name" "bind-optionals" "separator:" "1" "symbol->string" "subseq" "parse-strings" "elements" "let" "variable")}
        {Lisp-Entry "open-composite?" #f 1029 11 1029 26 ("Open-Composites" "memv?" "char")}
        {Lisp-Entry "close-composite?" #f 1033 11 1033 27 ("Close-Composites" "memv?" "char")}
        {Lisp-Entry "composite-kind?" #f 1037 11 1037 26 ("literal" "reference" "list" "memq?" "kind")}
        {Lisp-Entry "composites-match?" #f 1041 11 1041 28 ("eqv?" "and" "or" "end" "start")}}}})
"Lisp-File-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lisp" "catalog" "Lisp-File-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lisp.catalog.Lisp-File-Entry" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Lisp-File-Entry" #f 45 7 45 22 ("File-Entry")}}})
"Lisp-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lisp" "parser" "Lisp-Parser.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lisp.parser.Lisp-Parser" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Lisp-Parser" #f 46 7 46 18 ("File-Parser")
        {Lisp-Entry "parse" #f 49 11 49 16 ("parse-definitions" "catalog" "Lisp-File-Entry" "new" "time" "file")}
        {Lisp-Entry "Lisp-Period" #f 54 14 54 25 ()}
        {Lisp-Entry "parse-definitions" #f 58 11 58 28 ("get-output" "else" "dispatch->name" "dispatch-string?" "tag->name" "tag-string?" "cond" "add-reference" "Lisp-Period" "string=?" "unless" "get-marked" "keyword" "symbol" "memq?" "and" "when" "kind" "mode" "add-definition" "set-parent" "put" "not" "get-col" "get-row" "Lisp-Entry" "entry" "cdr" "signature" "car" "pair?" "if" "name" "documented?" "marked" "end" "start" "parent" "function" "walk-declarations" "List-Factory" "fact" "end:" "start:" "explorer-class" "expl" "text-beginning" "beginning" "let*" "set-moniker" "colorize?:" "char-encoding" "char-encoding:" "text-view-class" "new" "text" "let" "file")}
        {Lisp-Entry "explorer-class" #f 91 29 91 43 ("file")}
        {Lisp-Entry "text-view-class" #f 95 29 95 44 ()}}}})
"Lisp-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lisp" "text" "Lisp-Syntax.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lisp.text.Lisp-Syntax" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Lisp-Syntax" #f 45 7 45 18 ("Code-Syntax")
        {Lisp-Entry "translate-lisp-key" #f 53 11 53 29 ("else" "case" "key")}
        {Lisp-Entry "Comment" #f 77 14 77 21 ("1" "make-string")}
        {Lisp-Entry "Title-Comment" #f 81 14 81 27 ("4" "make-string")}
        {Lisp-Entry "comment-string" #f 85 11 85 25 ("Comment")}
        {Lisp-Entry "title-comment-string" #f 89 11 89 31 ("Title-Comment")}
        {Lisp-Entry "get-constituent-test" #f 98 11 98 31 ("jazz-constituent?")}
        {Lisp-Entry "Auto-Complete-Characters" #f 107 14 107 38 ()}
        {Lisp-Entry "auto-complete-characters" #f 111 11 111 35 ("Auto-Complete-Characters")}}}})
"Lisp-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lisp" "text" "Lisp-Text-Actions.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lisp.text.Lisp-Text-Actions" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Lisp-Text-Actions" #f 47 7 47 24 (":shift" "on-remove-highlights" "remove-highlights" "on-highlight-selection" "highlight-selection" ":alt" "Shortcut" "shortcut:" "on-toggle-expr" ":focus" "Event-Handler" "action-handler:" "toggle-expr" "name:" "Actions")}}})
"Lisp-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lisp" "text" "Lisp-Text-Preferences.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lisp.text.Lisp-Text-Preferences" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Lisp-Text-Preferences" #f 46 7 46 28 ("Code-Text-Preferences")
        {Lisp-Entry "title-color" #f 49 12 49 23 ("generate")}
        {Lisp-Entry "comment-color" #f 50 12 50 25 ("generate")}
        {Lisp-Entry "expr-comment-color" #f 51 12 51 30 ("generate")}
        {Lisp-Entry "declaration-keyword-color" #f 52 12 52 37 ("generate")}
        {Lisp-Entry "declaration-color" #f 53 12 53 29 ("generate")}
        {Lisp-Entry "keyword-color" #f 54 12 54 25 ("generate")}
        {Lisp-Entry "tag-color" #f 55 12 55 21 ("generate")}
        {Lisp-Entry "specifier-color" #f 56 12 56 27 ("generate")}
        {Lisp-Entry "char-color" #f 57 12 57 22 ("generate")}
        {Lisp-Entry "number-color" #f 58 12 58 24 ("generate")}
        {Lisp-Entry "boolean-color" #f 59 12 59 25 ("generate")}
        {Lisp-Entry "string-color" #f 60 12 60 24 ("generate")}
        {Lisp-Entry "delimited-string-color" #f 61 12 61 34 ("generate")}
        {Lisp-Entry "named-string-color" #f 62 12 62 30 ("generate")}
        {Lisp-Entry "quotation-color" #f 63 12 63 27 ("generate")}
        {Lisp-Entry "feature-color" #f 64 12 64 25 ("generate")}
        {Lisp-Entry "completions" #f 65 12 65 23 ("generate")}
        {Lisp-Entry "translate-keys?" #f 66 12 66 27 ("generate")}}}})
"Lisp-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lisp" "text" "Lisp-Text-View.jazz"} 1226849355
    {Lisp-Entry "jazz.language.lisp.text.Lisp-Text-View" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Auto-Complete-Characters" #f 48 10 48 34 ()}
      {Lisp-Entry "Lisp-Text-View" #f 52 7 52 21 ("cond" "list" "x" "function" "for-each" "b" "a" "foo" "virtual" "public" "method" "comment" "Code-Text-View")
        {Lisp-Entry "new-syntax" #f 55 11 55 21 ("Lisp-Syntax" "new")}
        {Lisp-Entry "host-icon" #f 64 16 64 25 ("Bitmap-Resource")}
        {Lisp-Entry "focus-actions" #f 73 11 73 24 ("nextmethod" "lisp-text" "'lisp-text" "find-actions" "cons")}
        {Lisp-Entry "context-menu" #f 83 11 83 23 ("get-context-menu" "track-popup-menu" "edit-references" "edit-definitions" "move-caret:" "context-menu-click" "always" "'always" "else" "never" "'never" "outside-selection" "'outside-selection" "not" "and" "cond" "move-caret" "let" "modifiers-down" "alt?" "control?" "shift?" "receive" "pos")}
        {Lisp-Entry "tab-press" #f 96 11 96 20 ("tabulate" "function" "undoer" "with-atomic-undo" "insert-char" "shift-key?" "nextmethod" "accepts-returns?" "not" "has-completion?" "or" "if" "modifiers" "key")}
        {Lisp-Entry "on-toggle-expr" #f 107 11 107 25 ("set-modified?" "replace" "rs" "range-strings" "ls" "not" "or" "right" "get-range" "left" "forward-expr" "get-end" "backward-expr" "get-start" "set-pos" "right-expl" "self" "explorer-class" "new" "left-expl" "let" "function" "undoer" "with-atomic-undo" "bell" "has-selection?" "if" "evt")}
        {Lisp-Entry "colorize-syntax" #f 134 11 134 26 ("colorize-comments" "colorize-declarations" "function" "with-safe-explore" "entries?:" "nextmethod" "recoloring?" "recoloring?:")}
        {Lisp-Entry "Syntax-Targets" #f 142 14 142 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 145 14 145 29 ()}
        {Lisp-Entry "syntax-targets" #f 149 11 149 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 155 11 155 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" #f 161 11 161 33 ("Syntax-Targets")}
        {Lisp-Entry "compute-syntax-automata" #f 165 11 165 34 ("jazz-constituent?" "self" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "colorize-type" #f 169 11 169 24 ("recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "colorize-declarations" #f 173 11 173 32 ("finish-current" "get-application" "get-documentation-cataloguer" "Feature" "'Feature" "feature" "Literal" "'Literal" "literal" "Expr-Comment" "'Expr-Comment" "expr-comment" "Named-String" "'Named-String" "named-string" "Delimited-String" "'Delimited-String" "delimited-string" "String" "'String" "string" "Boolean" "'Boolean" "boolean" "Number" "'Number" "number" "Char" "'Char" "char" "colorize-specifier" "specifier" "colorize-tag" "tag" "Keyword" "'Keyword" "Default" "'Default" "get-style-at" "get-name" "eq?" "keyword" "Quotation" "'Quotation" "quasiquote" "quote" "memq?" "symbol" "case" "kind" "mode" "Declaration-Keyword" "'Declaration-Keyword" "declaration-style" "apply-coloring" "when" "documented?" "marked" "end" "start" "context" "function" "walk-declarations" "new-colorizer" "not" "essay" "colorizer" "end:" "text-beginning" "start:" "self" "explorer-class" "new" "expl" "let" "recoloring?")}
        {Lisp-Entry "colorize-tag" #f 224 29 224 41 ("end" "start" "colorizer")}
        {Lisp-Entry "colorize-specifier" #f 228 29 228 47 ("end" "start" "colorizer")}
        {Lisp-Entry "declaration-style" #f 232 29 232 46 ("documented?")}
        {Lisp-Entry "colorize-comments" #f 236 11 236 28 ("finish-current" "when" "Title" "'Title" "4" "+" "Comment" "'Comment" "apply-coloring" "if" "Cell" "paragraph-length" "len" "get-row" "row" "let*" "title?" "end" "start" "function" "for-each-comment" "new-colorizer" "not" "essay" "colorizer" "text-beginning" "end:" "self" "explorer-class" "new" "expl" "let" "recoloring?")}
        {Lisp-Entry "recolorize-text" #f 252 11 252 26 ("recolorize-row" "to" "get-row" "from" "row" "for" "loop" "nextmethod" "end-row" "start")}
        {Lisp-Entry "recolorize-row" #f 258 11 258 25 ("recolorize-delimited-strings" "recolorize-strings" "recolorize-specifiers" "recolorize-chars" "recolorize-booleans" "recolorize-comments" "recolorize-expr-comments" "recolorize-declarations" "row")}
        {Lisp-Entry "Max-Declaration-Col" #f 269 14 269 33 ("4")}
        {Lisp-Entry "recolorize-declarations" #f 273 11 273 34 ("get-application" "get-documentation-cataloguer" "Expr-Comment" "'Expr-Comment" "expr-comment" "String" "'String" "string" "Specifier" "'Specifier" "specifier" "Tag" "'Tag" "tag" "case" "kind" "mode" "Declaration-Keyword" "'Declaration-Keyword" "declaration-style" "apply-style" "documented?" "marked" "end" "start" "context" "function" "walk-declaration" "end:" "start:" "self" "explorer-class" "expl" "Cell" "new" "pos" "element" "eqv?" "Max-Declaration-Col" "<=" "cardinality" "<" "and" "when" "skip-whitespace" "col" "paragraph-string" "line" "let*" "Explore-Error" "catch" "row")}
        {Lisp-Entry "recolorize-expr-comments" #f 302 11 302 35 ("get-start" "Expr-Comment" "'Expr-Comment" "apply-style" "get-row" "=" "symbol" "'symbol" "eq?" "when" "get-end" "end" "forward-expr" "kind" "end:" "self" "explorer-class" "expl" "+" "Cell" "new" "pos" "1" "-" "element" "eqv?" ">" "and" "unless" "set!" "if" "start:" "search" "comment" "let" "not" "while" "done?" "0" "col" "cardinality" "len" "paragraph-string" "line" "let*" "row")}
        {Lisp-Entry "recolorize-comments" #f 321 11 321 30 ("Title" "'Title" "Comment" "'Comment" "apply-style" "begin" "title-comment-string" "subseq" "string=?" "<" "if" "4" "+" "title-end" "let" "Cell" "new" "get-style-at" "textual-style?" "not" "and" "when" "syntax" "comment-string" "search" "comment" "cardinality" "len" "paragraph-string" "line" "let*" "row")}
        {Lisp-Entry "recolorize-booleans" #f 334 11 334 30 ("Boolean" "'Boolean" "apply-style" "Cell" "new" "commented?" "unless" "get-target" "+" "end" "ctx" "bind" "set!" "if" "start:" "multisearch" "pos" "let" "not" "while" "done?" "0" "col" "cardinality" "len" "make-search-context" "list" "trg" "paragraph-string" "str" "let*" "row")}
        {Lisp-Entry "recolorize-chars" #f 351 11 351 27 ("increase!" "jazz-constituent?" "<" "and" "Char" "'Char" "apply-style" "commented?" "unless" "3" "end" "2" "+" "Cell" "new" "get-char" "alphanumeric?" "set!" "if" "start:" "search" "pos" "let" "not" "while" "done?" "0" "col" "cardinality" "len" "paragraph-string" "str" "let*" "row")}
        {Lisp-Entry "recolorize-specifiers" #f 373 11 373 32 ("get-col" "+" "Specifier" "'Specifier" "Tag" "'Tag" "eqv?" "apply-style" "1" "-" "get-char" ">" "essay" "before" "Cell" "new" "find-specifier-end" "end" "set!" "if" "start:" "search" "pos" "let" "not" "while" "done?" "0" "col" "cardinality" "len" "paragraph-string" "str" "let*" "row")}
        {Lisp-Entry "recolorize-strings" #f 390 11 390 29 ("commented?" "unless" "Cell" "new" "String" "'String" "apply-style" "begin" "1" "+" "end" "set!" "if" "start:" "search" "pos" "let" "not" "while" "done?" "0" "col" "cardinality" "len" "paragraph-string" "str" "let*" "row")}
        {Lisp-Entry "recolorize-delimited-strings" #f 409 11 409 39 ("commented?" "unless" "Cell" "new" "Delimited-String" "'Delimited-String" "apply-style" "begin" "2" "+" "end" "set!" "if" "start:" "search" "pos" "let" "not" "while" "done?" "0" "col" "cardinality" "len" "paragraph-string" "str" "let*" "row")}
        {Lisp-Entry "Comment-Styles" #f 433 14 433 28 ("Comment" "Title")}
        {Lisp-Entry "String-Styles" #f 436 14 436 27 ("Named-String" "Delimited-String" "String")}
        {Lisp-Entry "commented?" #f 440 11 440 21 ("get-style-at" "comment-style?" "pos")}
        {Lisp-Entry "comment-style?" #f 444 11 444 25 ("Comment-Styles" "inherits?" "style-name" "function" "some?" "style")}
        {Lisp-Entry "string-style?" #f 450 11 450 24 ("String-Styles" "inherits?" "style-name" "function" "some?" "style")}
        {Lisp-Entry "textual-style?" #f 456 11 456 25 ("string-style?" "comment-style?" "or" "style")}
        {Lisp-Entry "favorite-completions" #f 461 11 461 31 ("preferences" "get-completions")}
        {Lisp-Entry "get-specials" #f 492 29 492 41 ()}
        {Lisp-Entry "return-press" #f 496 11 496 23 ("tabulate" "nextmethod" "function" "undoer" "with-atomic-undo" "key")}
        {Lisp-Entry "tabulate" #f 503 11 503 19 ("ignore" "'ignore" "action:" "set-modified?" "when" "+" "get-row" "tabulate-lines" "last-delta" "modified?" "receive" "set-caret" "with-safe-explore" "function" "with-update-locked" "get-end" "end" "get-start" "start" "let")}
        {Lisp-Entry "tabulate-lines" #f 518 11 518 25 ("values" "set!" "0" "/=" "when" "tabulate-line" "delta" "with" "to" "from" "row" "for" "loop" "last-delta" "modified?" "let" "end" "start")}
        {Lisp-Entry "remove-specifiers" #f 529 11 529 28 ("cdr" "1" "get-end" "-" "get-start" "get-char" "eqv?" "or" "get-range" "range" "let" "mark" "function" "collect-if" "car" "cons" "pair?" "not" "if" "lst")}
        {Lisp-Entry "effective-symbol" #f 540 11 540 27 ("1" "cardinality" "cast" "-" "0" "subseq" "string->symbol" "ends-with?" "if" "string")}
        {Lisp-Entry "tabulate-line" #f 546 11 546 24 ("tabulate-column" "tabulate-delta" "delta" "let" "row")}
        {Lisp-Entry "tabulate-delta" #f 552 18 552 32 ("get-column" "*" "-1" "count-modifiers" "decrease!" "when" "specials" "modifiers?" "bind" "element" "upper-case?" ">" "default-col" "4" "threshold" "proposed-col" "else" "'else" "neq?" "2" "/=" "=" "get-row" "first-row" "first-on-last-line" "first-last" "let" "cdr" "info" "get-specials" "assq" "special-info" "not" "or" "first-indent" "ends-with?" "first-dispatch?" "first-without?" "first-with?" "starts-with?" "and" "first-call-with?" "tag?" "first-tag?" "effective-symbol" "symbol" "'symbol" "get-kind" "eq?" "essay" "first-symbol" "get-range" "get-string" "first-string" "car" "first" "get-col" "+" "set!" "null?" "if" "col" "rank" "length" "count" "1" "get-start" "-" "opening" "collect-backward-exprs" "remove-specifiers" "expressions" "start:" "self" "explorer-class" "expl" "0" "Cell" "new" "pos" "let*" "row")}
        {Lisp-Entry "tabulate-column" #f 600 11 600 26 ("+" "make-string" "list" "Cell" "Range$Cell$" "new" "replace-text" "get-column" "actual" "let" "0" "/=" "when" "delta" "row")}
        {Lisp-Entry "count-modifiers" #f 607 11 607 26 ("cdr" "increase!" "set!" "self" "explorer-class" "new" "get-modifiers" "memq?" "or" "if" "car" "get-range" "get-string" "find-symbol" "symbol" "not" "not-null?" "and" "while" "done?" "0" "total" "let" "expressions")}
        {Lisp-Entry "first-on-last-line" #f 620 11 620 29 ("set!" "=" "not-null?" "and" "while" "get-range" "get-start" "get-row" "line" "car" "first" "cdr" "reverse" "1" ">" "if" "reversed" "let*" "count" "expressions")}
        {Lisp-Entry "current-name" #f 635 11 635 23 ("get-string" "when" "current-expr-range" "range" "let")}
        {Lisp-Entry "current-expr" #f 641 11 641 23 ("get-string" "read-string-element" "when" "current-expr-range" "range" "let")}
        {Lisp-Entry "current-expr-range" #f 647 11 647 29 ("get-end" "expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "expr-range" #f 653 11 653 21 ("get-range" "outer-expr" "end:" "start:" "self" "explorer-class" "new" "expl" "let" "pos")}
        {Lisp-Entry "current-symbol" #f 659 11 659 25 ("symbol?" "when" "current-expr" "expr" "let")}
        {Lisp-Entry "expr-at" #f 665 11 665 18 ("butlast" "read-string-element" "ends-with?" "if" "expr-range" "get-string" "string" "let" "pos")}
        {Lisp-Entry "flash-character?" #f 677 11 677 27 ("memq?" "char")}
        {Lisp-Entry "headers" #f 686 12 686 19 ("4" "make-string" "string-append" "list")}
        {Lisp-Entry "get-headers" #f 691 11 691 22 ("headers")}
        {Lisp-Entry "get-context" #f 700 11 700 22 ("jazz")}
        {Lisp-Entry "current-definition" #f 704 11 704 29 ("get-string" "read-string-element" "when" "current-definition-range" "range" "let")}
        {Lisp-Entry "current-definition-range" #f 710 11 710 35 ("get-end" "definition-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "definition-range" #f 716 18 716 34 ("need-definition?" "or" "and" "definition-expr?" "when" "get-range" "set!" "outer-expr" "if" "not" "while" "done?" "definition?" "range" "end:" "start:" "self" "explorer-class" "new" "expl" "let" "pos")}
        {Lisp-Entry "need-definition?" #f 732 29 732 45 ()}
        {Lisp-Entry "Highlight-Styles" #f 741 14 741 30 ("Break" "Walk-Fatal" "Walk-Warning" "Reference")}
        {Lisp-Entry "highlight-style?" #f 745 11 745 27 ("Highlight-Styles" "inherits?" "style-name" "function" "some?" "style")}
        {Lisp-Entry "constant?" #f 751 18 751 27 ("keyword?" "symbol?" "char?" "boolean?" "number?" "or" "expr")}
        {Lisp-Entry "on-highlight-selection" #f 759 11 759 33 ("highlight-expression" "unhighlight-expression" "highlight-style?" "get-end" "get-style-at" "style" "bell" "constant?" "not" "or" "if" "current-expr" "constant" "get-start" "definition-range" "range" "let" "evt")}
        {Lisp-Entry "on-remove-highlights" #f 770 11 770 31 ("remove-highlights" "bell" "not" "if" "get-start" "definition-range" "range" "let" "evt")}
        {Lisp-Entry "find-expression" #f 777 18 777 33 ("get-range" "continuation-return" "get-constant" "standardize-form" "eqv?" "constant?" "and" "when" "mode" "function" "iterate-expression" "return" "lambda" "continuation-capture" "end:" "get-start" "start:" "self" "explorer-class" "new" "expl" "let" "constant" "range")}
        {Lisp-Entry "highlight-expression" #f 788 18 788 38 ("get-end" "Reference" "'Reference" "apply-style" "get-constant" "standardize-form" "eqv?" "constant?" "and" "when" "mode" "function" "iterate-expression" "end:" "get-start" "start:" "self" "explorer-class" "new" "expl" "let" "constant" "range")}
        {Lisp-Entry "unhighlight-expression" #f 796 18 796 40 ("get-end" "default-style" "apply-style" "get-constant" "standardize-form" "eqv?" "constant?" "and" "when" "mode" "function" "iterate-expression" "end:" "get-start" "start:" "self" "explorer-class" "new" "expl" "let" "constant" "range")}
        {Lisp-Entry "remove-highlights" #f 804 18 804 35 ("1" "get-end" "+" "end:" "get-start" "get-row" "start:" "get-runs" "invalidate-paragraph" "default-style" "set-style" "highlight-style?" "when" "get-style" "style" "let" "run" "for-each" "paragraph" "row" "function" "for-each-paragraph" "range")}}}})
"List-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "List-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.List-Domain" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "List-Domain" #f 45 7 45 18 ("initialize" "domain" "nullable?" "Domain")
        {Lisp-Entry "validate-value" #f 57 11 57 25 ("domain" "validate-value" "subvalue" "function" "for-each" "property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "pair?" "not" "if" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 70 11 70 18 ("domain" "present" "function" "map" "join" "not" "if" "value")}
        {Lisp-Entry "setup-entry" #f 84 11 84 22 ("domain" "setup-list-entry" "client" "view")}}}})
"List-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "List-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.List-Row" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "List-Row" #f 47 7 47 15 ("Value-Row")
        {Lisp-Entry "current-rank" #f 50 8 50 20 ("0")}
        {Lisp-Entry "present" #f 58 11 58 18 ("format-plural" "format" "length" "n" "let" "not" "if" "value")}
        {Lisp-Entry "reset-rank" #f 70 11 70 21 ("0" "current-rank" "set!")}
        {Lisp-Entry "next-rank" #f 74 11 74 20 ("increase!" "current-rank" "prog1")}
        {Lisp-Entry "auto-inplace?" #f 84 11 84 24 ()}
        {Lisp-Entry "get-edited-value" #f 93 11 93 27 ("get-list-edited-value")}
        {Lisp-Entry "get-edited-modified?" #f 97 11 97 31 ("get-list-edited-modified?")}
        {Lisp-Entry "set-edited-modified?" #f 101 11 101 31 ("set-list-edited-modified?" "flag")}
        {Lisp-Entry "edit" #f 110 11 110 15 ("edit-in-list" "reset-rank")}
        {Lisp-Entry "add-value" #f 115 11 115 20 ("class:" "next-rank" "self" "add-row" "class" "value")}
        {Lisp-Entry "close-editor" #f 119 11 119 23 ("close-in-list-editor")}
        {Lisp-Entry "select-editor" #f 123 11 123 24 ()}
        {Lisp-Entry "focus-editor" #f 127 11 127 23 ("rest")}
        {Lisp-Entry "focused-editor" #f 131 11 131 25 ()}
        {Lisp-Entry "update" #f 135 11 135 17 ("1" "self" "row-rank" "Cell" "new" "invalidate-cell" "present" "set-title" "set-property-modified?" "get-children" "second" "data" "get-tree" "tree" "let" "set-value" "value")}
        {Lisp-Entry "in-edition?" #f 144 11 144 22 ("0" "get-sons" "cardinality" ">")}
        {Lisp-Entry "auto-number?" #f 153 26 153 38 ()}
        {Lisp-Entry "add-item" #f 157 26 157 34 ("set-modified?" "focus-editor" "edit-row" "get-subrow-class" "new-value" "add-value" "row" "let")}
        {Lisp-Entry "new-value" #f 165 26 165 35 ()}
        {Lisp-Entry "remove-item" #f 169 26 169 37 ("set-modified?" "self" "set-auto-expanded-row" "remove-row" "get-tree" "tree" "let" "item")}
        {Lisp-Entry "rename-item" #f 176 18 176 29 ("set-title" "request-title" "title" "get-title" "current" "let*" "item")}
        {Lisp-Entry "request-title" #f 182 29 182 42 ("initial-value:" "prefix:" "title:" "request-string" "current")}
        {Lisp-Entry "get-menu-class" #f 191 11 191 25 ("List-Menu")}}
      {Lisp-Entry "List-Menu" #f 200 7 200 16 ("on-add-item" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "add-item" "name:" "Value-Menu")
        {Lisp-Entry "on-add-item" #f 208 11 208 22 ("list" "set-selection" "row-rank" "rank" "get-tree" "tree" "value-row" "add-item" "row" "let*" "evt")}}}})
"List-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "List-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.List-Tester" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "List-Tester" #f 45 7 45 18 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-list" "invoke")}
        {Lisp-Entry "test-list" #f 61 11 61 20 ("'b" "set-element!" "0" "element" "car" "error?" "begin" "second" "key:" "4" "8" "5" "<" "sort" "ci=?" "test:" "associate" "cdr" "=" "assoc" "eq?" "x" "let" "f" "e" "d" "append" "null?" "reverse" "3" "2" "1" "list" "equal?" "not" "c" "b" "a" "pair?" "rpt" "validate")}}}})
"Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "listener" "Listener.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.listener.Listener" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Listener" #f 45 11 45 19 ()}}})
"Local-Proxy"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "remote" "Local-Proxy.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm.remote.Local-Proxy" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Local-Proxy" #f 43 7 43 18 ("Proxy")
        {Lisp-Entry "object" #f 46 8 46 14 ("generate")}
        {Lisp-Entry "initialize" #f 49 11 49 21 ("object~self" "set!" "nextmethod" "object")}
        {Lisp-Entry "print" #f 54 11 54 16 ("object" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "proxy-values" #f 61 29 61 41 ()}
        {Lisp-Entry "live?" #f 65 11 65 16 ()}}}})
"Locale-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "locale" "Locale-Row.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.locale.Locale-Row" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Locale-Row" #f 46 7 46 17 ("String-Row")}}})
"Locales"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "locale" "Locales.jazz"} 1226584781
    {Lisp-Entry "jazz.library.locale.Locales" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Locales" #f 40 7 40 14 ("Object")
        {Lisp-Entry "locales" #f 43 8 43 15 ()}
        {Lisp-Entry "initialize" #f 46 11 46 21 ("locales" "set!" "nextmethod" "rest")}
        {Lisp-Entry "fold-literal" #f 51 11 51 23 ("locales" ",@locales" "Locales" "new")}
        {Lisp-Entry "print" #f 55 11 55 16 ("locales" "if" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-locales" #f 67 18 67 29 ("locales")}
        {Lisp-Entry "get-locale" #f 71 18 71 28 ("locales" "getf" "locale")}
        {Lisp-Entry "localize" #f 80 18 80 26 ("second" "locales" "getf" "either" "locale")}}}})
"Localized-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "locale" "Localized-Row.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.locale.Localized-Row" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Localized-Row" #f 47 7 47 20 ("Value-Row")
        {Lisp-Entry "localized?" #f 50 8 50 18 ()}
        {Lisp-Entry "present" #f 58 11 58 18 ("get-locales" "format" "Locales" "is?" "if" "value")}
        {Lisp-Entry "get-edited-value" #f 69 11 69 27 ("get-output" "Locales" "apply" "get-value" "get-user-data" "put" "subrow" "function" "get-sons" "iterate" "List-Factory" "new" "fact" "let" "editor" "get-string-content" "localized?" "not" "if")}
        {Lisp-Entry "get-edited-modified?" #f 80 11 80 31 ("get-list-edited-modified?" "nextmethod" "localized?" "not" "if")}
        {Lisp-Entry "set-edited-modified?" #f 86 11 86 31 ("set-list-edited-modified?" "nextmethod" "localized?" "not" "if" "flag")}
        {Lisp-Entry "edit" #f 92 11 92 15 ("get-tree" "expand/collapse" "get-locales" "user-data:" "Locale-Row" "class:" "get-locale" "self" "add-row" "locale" "function" "for-each" "edit-in-cell" "not" "if" "Locales" "value" "is?" "localized?" "set!")}
        {Lisp-Entry "select-editor" #f 102 11 102 24 ("nextmethod" "Locales" "value" "is-not?" "when")}
        {Lisp-Entry "close-editor" #f 107 11 107 23 ("close-in-list-editor" "close-in-cell-editor" "localized?" "not" "if")}
        {Lisp-Entry "in-edition?" #f 113 11 113 22 ("0" "get-sons" "cardinality" ">" "localized?" "and" "nextmethod" "or")}
        {Lisp-Entry "get-menu-class" #f 123 11 123 25 ("Localized-Menu")}}
      {Lisp-Entry "Localized-Menu" #f 132 7 132 21 ("on-toggle-localized" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "localized" "name:" "Value-Menu")
        {Lisp-Entry "on-toggle-localized" #f 140 11 140 30 ("evt")}}}})
"Location-Error"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "text" "Location-Error.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.text.Location-Error" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Location-Error" #f 45 7 45 21 ("Error")
        {Lisp-Entry "kind" #f 48 8 48 12 ()}
        {Lisp-Entry "location" #f 49 8 49 16 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("location~self" "kind~self" "set!" "nextmethod" "apply" "others" "location" "bad" "'bad" "kind" "bind-keywords" "rest")}
        {Lisp-Entry "get-kind" #f 64 18 64 26 ("kind")}
        {Lisp-Entry "get-location" #f 68 18 68 30 ("location")}
        {Lisp-Entry "get-message" #f 77 11 77 22 ("unknown" "location" "format" "bad" "kind" "case")}}}})
"Locator"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "utility" "Locator.jazz"} 1226584782
    {Lisp-Entry "jazz.library.utility.Locator" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Locator" #f 46 7 46 14 ("Object")
        {Lisp-Entry "prefix" #f 49 8 49 14 ()}
        {Lisp-Entry "reset-time" #f 50 8 50 18 ()}
        {Lisp-Entry "max-delay" #f 51 8 51 17 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("max-delay~self" "set!" "nextmethod" "0.5" "max-delay" "max-delay:")}
        {Lisp-Entry "get-prefix" #f 64 18 64 28 ("prefix")}
        {Lisp-Entry "setup" #f 73 18 73 23 ("max-delay" "current-time" "time->seconds" "+" "reset-time" "prefix" "set!" "string")}
        {Lisp-Entry "enter" #f 83 18 83 23 ("locate" "concatenate" "prefix" "not" "if" "target" "validate" "string" "let" "key")}
        {Lisp-Entry "validate" #f 90 11 90 19 ("reset" "ci=?" "reset-time" "current-time" "time->seconds" ">" "or" "prefix" "and" "when" "string")}
        {Lisp-Entry "locate" #f 96 18 96 24 ("continuation-return" "setup" "select" "ci=?" "and" "when" "0" "subseq" ">=" "essay" "prefix" "rank" "title" "iterate" "return" "function" "continuation-capture" "cardinality" "len" "let" "target")}
        {Lisp-Entry "iterate" #f 114 26 114 33 ("proc")}
        {Lisp-Entry "select" #f 118 26 118 32 ("rank")}
        {Lisp-Entry "reset" #f 127 18 127 23 ("reset-time" "prefix" "set!")}}}})
"Log"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "log" "Log.jazz"} 1226584782
    {Lisp-Entry "jazz.library.log.Log" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "Log" #f 45 7 45 10 ("Object")
        {Lisp-Entry "name" #f 48 8 48 12 ()}
        {Lisp-Entry "file" #f 49 8 49 12 ()}
        {Lisp-Entry "last-mark" #f 50 8 50 17 ()}
        {Lisp-Entry "read-error?" #f 51 8 51 19 ()}
        {Lisp-Entry "current-node" #f 52 8 52 20 ()}
        {Lisp-Entry "toplevel-nodes" #f 53 8 53 22 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("load-toplevel-nodes" "when" "List-Factory" "new" "toplevel-nodes~self" "current-node~self" "file~self" "name~self" "set!" "nextmethod" "load?" "load?:" "file" "file:" "name" "name:")}
        {Lisp-Entry "get-name" #f 71 18 71 26 ("name")}
        {Lisp-Entry "get-file" #f 75 18 75 26 ("file")}
        {Lisp-Entry "get-current-node" #f 79 18 79 34 ("current-node")}
        {Lisp-Entry "get-toplevel-nodes" #f 83 18 83 36 ("toplevel-nodes" "get-list")}
        {Lisp-Entry "reload" #f 92 18 92 24 ("load-toplevel-nodes" "name" "error" "file" "null?" "if")}
        {Lisp-Entry "get-mark-position" #f 99 11 99 28 ("first" "mark")}
        {Lisp-Entry "get-mark-line" #f 103 11 103 24 ("third" "mark")}
        {Lisp-Entry "get-mark-column" #f 107 11 107 26 ("fourth" "mark")}
        {Lisp-Entry "handle-read-error" #f 111 11 111 28 ("set!" "format" "message-box" "get-mark-column" "column" "get-mark-line" "1" "+" "line" "file" "parse" "file-path" "let" "last-mark" "get-mark-position" "=" "read-error?" "and" "if" "current-mark")}
        {Lisp-Entry "load-toplevel-nodes" #f 121 11 121 30 ("read-error?" "toplevel-nodes" "put" "parse-jml" "node" "eof-object?" "if" "read" "expr" "reader-file-mark" "set!" "not" "while" "handle-read-error" "err" "Error" "catch" "current-mark" "done?" "let" "set-reader-file-mark" "last-mark" "when" "read/write" "'read/write" "sharing:" "file" "File-Reader" "new" "reader" "with-closed")}
        {Lisp-Entry "add-toplevel-node" #f 146 11 146 28 ("toplevel-nodes" "put" "file" "null?" "when" "node")}
        {Lisp-Entry "output-toplevel-node" #f 151 11 151 31 ("pretty-print" "printer" "function" "read" "'read" "sharing:" "append" "'append" "mode:" "parse" "list" "call-with-output-file" "file" "when" "node")}
        {Lisp-Entry "with-node" #f 163 18 163 27 ("output-toplevel-node" "set!" "set-parent" "begin" "unwind-protect" "prog1" "add-toplevel-node" "not" "when" "preserved" "current-node" "parent" "let" "proc" "node")}
        {Lisp-Entry "log-node" #f 178 18 178 26 ("output-toplevel-node" "add-toplevel-node" "not" "when" "set-parent" "current-node" "parent" "let" "node")}
        {Lisp-Entry "log-entry" #f 187 18 187 27 ("new-entry" "log-node" "data" "message" "name" "tag")}
        {Lisp-Entry "new-entry" #f 191 18 191 27 ("'data" "'message" "'name" "set-property" "'entry" "either" "JML-Element" "new" "entry" "let" "data" "message" "name" "tag")}
        {Lisp-Entry "clear" #f 199 18 199 23 ("clear" "'clear" "unimplemented")}}}})
"Log-Reporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "reporter" "Log-Reporter.jazz"} 1226584782
    {Lisp-Entry "jazz.library.reporter.Log-Reporter" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Log-Reporter" #f 44 7 44 19 ("Reporter" "Object")
        {Lisp-Entry "log" #f 47 8 47 11 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("log~self" "set!" "nextmethod" "log")}
        {Lisp-Entry "section-title" #f 55 11 55 24 ("log" "format" "title")}
        {Lisp-Entry "set-message" #f 59 11 59 22 ("log" "format" "msg")}
        {Lisp-Entry "user-message" #f 63 11 63 23 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-range" #f 67 11 67 20 ("range")}
        {Lisp-Entry "set-pos" #f 71 11 71 18 ("pos")}
        {Lisp-Entry "delta-pos" #f 75 11 75 20 ("increment")}
        {Lisp-Entry "set-step" #f 79 11 79 19 ("increment")}
        {Lisp-Entry "step-it" #f 83 11 83 18 ()}
        {Lisp-Entry "set-done" #f 87 11 87 19 ()}
        {Lisp-Entry "disable-cancel" #f 91 11 91 25 ()}
        {Lisp-Entry "cancel-requested?" #f 95 11 95 28 ()}
        {Lisp-Entry "test-cancelled" #f 99 11 99 25 ()}}}})
"Log-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "view" "Log-View.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.view.Log-View" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Log-View" #f 48 7 48 15 ("data" "200" "width:" "title:" "name" ":icons" "portfolio:" "message" "filled-column:" "log-tree" "shown?:" "header" "content" "flat?:" "vscroll?:" "document" "style:" "scroller" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "log" #f 51 12 51 15 ("generate")}
        {Lisp-Entry "get-tree" #f 71 11 71 19 ("log-tree" "'log-tree" "locate")}
        {Lisp-Entry "clear" #f 80 18 80 23 ("update" "clear" "bell" "log" "null?" "if")}
        {Lisp-Entry "update" #f 92 18 92 24 ("view-content" "reload" "get-file" "log" "and" "when" "reload?" "reload?:")}
        {Lisp-Entry "extract-log-content" #f 98 29 98 48 ("get-toplevel-nodes" "log")}
        {Lisp-Entry "view-log" #f 107 18 107 26 ("view-content" "log~self" "set!" "log")}
        {Lisp-Entry "view-content" #f 112 11 112 23 ("extract-log-content" "insert-node" "node" "for-each-reversed" "log" "when" "remove-every-row" "function" "with-update-locked" "get-tree" "tree" "let")}
        {Lisp-Entry "insert-node" #f 123 11 123 22 ("get-children" "insert-node" "subnode" "function" "for-each" "user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "subfather" "'data" "data" "'message" "message" "node-image" "image" "'name" "get-property" "either" "->string" "name" "let*" "else" "resources" "get-tag" "case" "node" "father" "tree")}
        {Lisp-Entry "node-image" #f 137 11 137 21 ("else" "problem" "Bitmap-Resource" "resources" "get-tag" "case" "node")}}}})
"Loggable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "utility" "Loggable.jazz"} 1226584782
    {Lisp-Entry "jazz.library.utility.Loggable" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Loggable" #f 44 11 44 19 ()
        {Lisp-Entry "log-info" #f 47 35 47 43 ("output")}
        {Lisp-Entry "edit" #f 48 35 48 39 ()}
        {Lisp-Entry "edit-child" #f 49 35 49 45 ("child")}}}})
"Logical-Datatype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "data" "Logical-Datatype.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.data.Logical-Datatype" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Logical-Datatype" #f 45 7 45 23 ("Object")
        {Lisp-Entry "name" #f 48 8 48 12 ()}
        {Lisp-Entry "size" #f 49 8 49 12 ()}
        {Lisp-Entry "precision" #f 50 8 50 17 ()}
        {Lisp-Entry "scale" #f 51 8 51 13 ()}
        {Lisp-Entry "construct-literal" #f 55 16 55 33 ("self" "new" "null?" "integer?" "or" "assert" "scale" "precision" "size" "name" "context")}
        {Lisp-Entry "initialize" #f 62 11 62 21 ("scale~self" "precision~self" "size~self" "name~self" "set!" "nextmethod" "scale" "precision" "size" "name")}
        {Lisp-Entry "compare-object" #f 70 11 70 25 (":not-equal" "else" ":equal" "get-scale" "scale" "get-precision" "precision" "get-size" "size" "get-name" "name" "=" "and" ":incompatible" "Logical-Datatype" "is-not?" "cond" "target")}
        {Lisp-Entry "foldable?" #f 83 11 83 20 ()}
        {Lisp-Entry "fold-object" #f 88 11 88 22 ("scale" "precision" "size" "name" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "print" #f 98 11 98 16 ("scale" "precision" "size" "name" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" #f 112 18 112 26 ("name")}
        {Lisp-Entry "get-size" #f 116 18 116 26 ("size")}
        {Lisp-Entry "has-size?" #f 120 18 120 27 ("size" "not-null?")}
        {Lisp-Entry "has-precision?" #f 124 18 124 32 ("precision" "not-null?")}
        {Lisp-Entry "has-scale?" #f 128 18 128 28 ("scale" "not-null?")}
        {Lisp-Entry "present" #f 137 26 137 33 ("scale" "name" "format" "precision" "size" "null?" "if")}}}})
"Logical-Datatype-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "designer" "Logical-Datatype-Row.jazz"} 1226584774
    {Lisp-Entry "jazz.database.designer.Logical-Datatype-Row" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Logical-Datatype-Row" #f 47 7 47 27 ("Combo-Row")
        {Lisp-Entry "domains" #f 50 12 50 19 ("set-domains" "get-domains")}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("setup" "domains~self" "set!" "nextmethod" "apply" "others" "domains" "bind-keywords" "rest")}
        {Lisp-Entry "setup" #f 65 11 65 16 ("get-children" "get-name" "list" "domain" "function" "map" "set-choices" "domains")}
        {Lisp-Entry "get-domains" #f 76 18 76 29 ("domains")}
        {Lisp-Entry "set-domains" #f 80 18 80 29 ("domains" "set!" "value")}
        {Lisp-Entry "present" #f 89 11 89 18 ("present" "null?" "if" "type")}
        {Lisp-Entry "editor-class" #f 100 11 100 23 ("Logical-Datatype-Row-Editor")}
        {Lisp-Entry "get-edited-value" #f 104 11 104 27 ("Logical-Datatype" "new" "size" "name" "receive" "when" "parse-content" "parsed" "editor" "get-content" "string" "let*")}
        {Lisp-Entry "set-edited-value" #f 112 11 112 27 ("present" "editor" "set-content" "value")}
        {Lisp-Entry "read-content" #f 116 11 116 23 ("separator:" "substitute" "parse-strings" "content")}
        {Lisp-Entry "parse-content" #f 120 11 120 24 ("message:" "Parse-Error" "new" "signal" "else" "cadr" "parse-integer" "2" "car" "values" "1" "0" "length" "case" "read-content" "content" "let" "string")}}
      {Lisp-Entry "Logical-Datatype-Row-Editor" #f 134 7 134 34 ("Combo-Row-Editor")
        {Lisp-Entry "content-change" #f 137 11 137 25 ("nextmethod" "popup" "'popup" "eq?" "unless" "origin")}
        {Lisp-Entry "combo-choice" #f 142 11 142 23 ()}
        {Lisp-Entry "get-entry" #f 146 11 146 20 ("car" "when" "get-content" "value-row" "read-content" "content" "let")}
        {Lisp-Entry "set-entry" #f 152 11 152 20 ("cdr" "cons" "join" "set-content" "get-content" "value-row" "read-content" "actual" "let" "entry")}}}})
"Login-Dialog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "login" "Login-Dialog.jazz"} 1227128911
    {Lisp-Entry "jazz.ui.login.Login-Dialog" #f 37 9 37 35 ("Profile-Text-View" "register-autoclass" "jazz")
      {Lisp-Entry "Login-Dialog" #f 51 7 51 19 ("existing" "new" "on-cancel" "311" "cancel" "on-ok" ":host" "default?:" "24" "80" "172" "225" "login" "18" "130" "175" "always-use" "160" "display-images?:" "toplevel-controls?:" "176" "width:" "on-double-click" "double-click-handler:" "can-select-empty?:" "row" "selection-mode:" "15" "default-row-height:" "show-header?:" "profiles" "document" "82" "251" "64" "140" "existing-border" "on-content-change" "content-change-handler:" "Default" "Text-Style" "default-style:" "show-unfocused-selection?:" "accepts-returns?:" "top-padding:" "2" "left-padding:" "new-profile" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "entry" "style:" "edge" "border-type:" "19" "194" "97" "173" "new-border" "visible?:" "33" "100" "136" "new-label" "91" "59" "110" "8" "48" "0" "on-existing" "109" "existing-button" "on-new" "action-handler:" "tooltip-text:" "tooltip?:" "83" "25" "new-button" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "name:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "206" "400" "Dimension" "size:" "View")
        {Lisp-Entry "host-title" #f 85 16 85 26 ()}
        {Lisp-Entry "finish" #f 89 11 89 17 ("setup-existing-profiles" "setup-new-profile" "nextmethod" "rest")}
        {Lisp-Entry "setup-new-profile" #f 95 11 95 28 ("user-name" "new-profile" "'new-profile" "locate" "set-string-content")}
        {Lisp-Entry "setup-existing-profiles" #f 99 11 99 34 ("existing-button" "'existing-button" "install-existing" "else" "new-button" "'new-button" "set-selected?" "install-new" "null?" "cond" "always-use" "'always-use" "locate" "set-checked?" "collect-profile-info" "rank" "profiles" "receive")}
        {Lisp-Entry "validate-dialog" #f 115 11 115 26 ("throw-cancel" "message-box" "when" "validate-profile" "message" "let")}
        {Lisp-Entry "get-modal-result" #f 122 11 122 27 ("get-user-data" "get-row" "row" "not" "if" "get-single-selection" "rank" "profiles" "'profiles" "tree" "let*" "existing" "values" "new-profile" "'new-profile" "get-string-content" "name" "new" "branch" "get-name" "case" "always-use" "'always-use" "locate" "get-checked?" "always-use?" "let")}
        {Lisp-Entry "get-tab-stops" #f 142 11 142 24 ("existing" "new" "branch" "get-name" "case")}
        {Lisp-Entry "on-new" #f 155 11 155 17 ("install-new" "evt")}
        {Lisp-Entry "on-existing" #f 159 11 159 22 ("install-existing" "collect-profile-info" "rank" "profiles" "receive" "evt")}
        {Lisp-Entry "on-content-change" #f 164 11 164 28 ("update-login" "evt")}
        {Lisp-Entry "on-moniker-update" #f 168 11 168 28 ("update-login" "evt")}
        {Lisp-Entry "on-double-click" #f 172 11 172 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "login" "'login" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-return-press" #f 180 11 180 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "validate-dialog" "login" "'login" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" #f 188 11 188 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "install-new" #f 198 11 198 22 ("update-login" "select-all" "acquire-focus" "new-profile" "'new-profile" "text" "let" "new" "'new" "locate" "set-active-branch")}
        {Lisp-Entry "install-existing" #f 206 11 206 27 ("update-login" "acquire-focus" "ensure-displayed" "set-single-selection" "get-visible-count" "<" "and" "when" "user-data:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "profile" "function" "for-each" "remove-every-row" "0" "not-null?" "essay" "either" "'profiles" "tree" "let" "existing" "'existing" "locate" "set-active-branch" "rank" "profiles")}
        {Lisp-Entry "collect-profile-info" #f 221 11 221 31 ("values" "equal?" "test:" "profile" "'profile" "argument/setting" "find" "rank" "collect-existing-profiles" "profiles" "let")}
        {Lisp-Entry "collect-existing-profiles" #f 227 11 227 36 ("ci<?" "sort" "Profiles" "Directory" "recursive?:" "directories?:" "files?:" "cons" "set!" "string-length" "1" "substring" "profile" "get-base" "base" "get-name" "format" "new-file" "file" "function" "iterate-directory" "exists?" "when" "dir" "collect-directory" "define" "lst" "let")}
        {Lisp-Entry "update-login" #f 252 11 252 23 ("profiles" "'profiles" "get-selection" "not-null?" "existing" "new-profile" "'new-profile" "get-string-content" "empty-string?" "not" "login" "'login" "locate" "set-enabled?" "new" "get-name" "case" "branch" "when")}
        {Lisp-Entry "validate-profile" #f 266 11 266 27 ("else" "validate-new-profile" "new-profile" "'new-profile" "locate" "get-string-content" "profile-name" "let" "new" "branch" "get-name" "case")}
        {Lisp-Entry "validate-new-profile" #f 275 11 275 31 ("else" "format" "exists?" "Profiles" "'Profiles" "list" "Directory" "new" "dir" "memv?" "numeric?" "char" "function" "every?" "alphabetic?" "eqv?" "or" "not" "first" "let" "cond" "profile-name")}
        {Lisp-Entry "Header-Color" #f 298 14 298 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" #f 302 11 302 15 ("Header-Color" "1" "White" "name:" "Color" "list" "50" "get-width" "0" "Rect" "new" "gradient-fill" "get-size" "size" "let" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "Profile-Text-View" #f 312 7 312 24 ("Plain-Text-View")
        {Lisp-Entry "get-context-menu" #f 315 11 315 27 ("new-text-context-menu")}}}})
"Logs-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "log" "Logs-Viewer.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.log.Logs-Viewer" #f 37 9 37 43 ("No-Data-Viewer" "register-autoclass" "jazz")
      {Lisp-Entry "Logs-Viewer" #f 51 7 51 18 ("data-container" "log-tree" "header" "scroller" "log-view" "second" "log-border" "200" "width:" "toplevel-controls?:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "log" "filled-column:" "logs-tree" "fill" "content" "vscroll?:" "document" "entry" "style:" "edge" "border-type:" "logs-border" "20" "horz" "first" "horizontal" "50" "division:" "relative" "mode:" "vert" "orientation:" "split" "state:" "center" "vertical" "on-refresh" "refresh" "on-clear" "clear" "10" "on-open" "tail" "open" "on-refresh-logs" "refresh-logs" "on-directory-logs" "directory-logs" "on-memory-logs" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "memory-logs" "0" "6" "flow" "north" "location:" "33" "300" "Dimension" "size:" "tools" "name:" "2" "Rect" "layout-insets:" "border" "layout-type:" "title:" "Layout-View")
        {Lisp-Entry "logs-directory" #f 54 8 54 22 ()}
        {Lisp-Entry "data-viewer" #f 55 8 55 19 ()}
        {Lisp-Entry "finish" #f 91 11 91 17 ("refresh-logs" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 101 16 101 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 105 16 105 26 ()}
        {Lisp-Entry "host-position" #f 109 16 109 29 ("50" "Point")}
        {Lisp-Entry "host-size" #f 113 16 113 25 ("500" "850" "Point")}
        {Lisp-Entry "client-activate" #f 117 11 117 26 ("perserving-refresh-logs")}
        {Lisp-Entry "get-tree" #f 126 11 126 19 ("logs-tree" "'logs-tree" "locate")}
        {Lisp-Entry "Logs-Directory" #f 135 14 135 28 ("Install" "Directory")}
        {Lisp-Entry "with-directory" #f 139 11 139 25 ("function" "with-preserved-current-directory" "Logs-Directory" "exists?" "and" "if" "proc" "default?")}
        {Lisp-Entry "on-memory-logs" #f 147 11 147 25 ("refresh-logs" "logs-directory" "set!" "evt")}
        {Lisp-Entry "on-directory-logs" #f 152 11 152 28 ("refresh-logs" "logs-directory" "set!" "directory:" "choose-directory" "directory" "let" "dir" "function" "get-shift?" "with-directory" "evt")}
        {Lisp-Entry "on-refresh-logs" #f 160 11 160 26 ("refresh-logs" "evt")}
        {Lisp-Entry "perserving-refresh-logs" #f 164 11 164 34 ("generate-event?:" "data" "'data" "use:" "refresh-logs" "function" "with-preserved-selection" "get-tree" "tree" "let")}
        {Lisp-Entry "refresh-logs" #f 173 18 173 30 ("view-logs" "close-data-viewer")}
        {Lisp-Entry "on-open" #f 178 11 178 18 ("view-log" "set-selection" "'log-view" "locate" "log-view" "load?:" "file:" "Log" "new" "log" "directory:" "extensions:" "choose-file" "file" "get-tree" "tree" "let*" "dir" "function" "get-shift?" "with-directory" "evt")}
        {Lisp-Entry "on-clear" #f 189 11 189 19 ("on-refresh" "on-clear" "'on-clear" "unimplemented" "evt")}
        {Lisp-Entry "on-refresh" #f 194 18 194 28 ("update" "'log-view" "locate" "log-view" "let" "evt")}
        {Lisp-Entry "on-selection-change" #f 199 11 199 30 ("view-data" "node" "log-tree" "view-log" "reload" "get-file" "close-data-viewer" "get-row" "get-user-data" "log" "'log-view" "locate" "log-view" "when" "get-single-selection" "selection" "logs-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-double-click" #f 218 11 218 26 ("edit-data" "get-row" "get-user-data" "node" "when" "get-single-selection" "selection" "log-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" #f 228 11 228 26 ("on-double-click" "evt")}
        {Lisp-Entry "view-logs" #f 237 11 237 20 ("insert-file" "ci=?" "when" "get-extension" "extension" "file" "iterate-directory" "get-logs" "insert-log" "log" "for-each" "logs-directory" "null?" "if" "remove-every-row" "function" "with-update-locked" "get-tree" "tree" "let")}
        {Lisp-Entry "insert-log" #f 253 11 253 21 ("user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "get-name" "->string" "name" "let" "log" "tree")}
        {Lisp-Entry "insert-file" #f 258 11 258 22 ("file:" "Log" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "get-base" "name" "let" "file" "tree")}
        {Lisp-Entry "view-data" #f 268 29 268 38 ("layout-view" "parent:" "client:" "new" "data-viewer" "set!" "data-container" "'data-container" "locate" "container" "data-viewer-class" "class" "'data" "get-property" "data" "let*" "JML-Node" "is?" "when" "close-data-viewer" "node")}
        {Lisp-Entry "data-viewer-class" #f 281 11 281 28 ("No-Data-Viewer" "get-viewer-class" "either" "Viewable" "is?" "and" "if" "data")}
        {Lisp-Entry "close-data-viewer" #f 287 11 287 28 ("set!" "close" "data-viewer" "when")}
        {Lisp-Entry "edit-data" #f 298 29 298 38 ("node")}}
      {Lisp-Entry "No-Data-Viewer" #f 307 7 307 21 ("entry" "style:" "edge" "border-type:" "Border-View")
        {Lisp-Entry "client" #f 310 12 310 18 ("generate")}
        {Lisp-Entry "Background-Font" #f 317 14 317 29 ("Heading1" "name:" "Font")}
        {Lisp-Entry "draw" #f 321 11 321 15 ("draw-no-data" "nextmethod" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-no-data" #f 326 11 326 23 ("get-v" "get-h" "draw-text" "Dark-Gray" "name:" "Color" "set-text-color" "get-display-size" "center" "pos" "get-text-extent" "extent" "localize" "title" "let*" "Background-Font" "set-font" "surface")}}}})
"Look"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "look" "Look.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.look.Look" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "Look" #f 50 7 50 11 ("Object")
        {Lisp-Entry "present" #f 58 26 58 33 ()}
        {Lisp-Entry "get-element" #f 67 26 67 37 ("name")}}}})
"Lua-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lua" "text" "Lua-Explorer.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lua.text.Lua-Explorer" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Lua-Explorer" #f 46 7 46 19 ("C-Explorer")}}})
"Lua-File-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lua" "text" "Lua-File-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lua.text.Lua-File-Entry" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Lua-File-Entry" #f 46 7 46 21 ("File-Entry")}}})
"Lua-Function-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lua" "text" "Lua-Function-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lua.text.Lua-Function-Entry" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Lua-Function-Entry" #f 46 7 46 25 ("C-Definition-Entry")
        {Lisp-Entry "get-image" #f 54 11 54 20 ("Bitmap-Resource")}}}})
"Lua-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lua" "text" "Lua-Parser.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lua.text.Lua-Parser" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Lua-Parser" #f 46 7 46 17 ("File-Parser")
        {Lisp-Entry "parse" #f 49 11 49 16 ("parse-definitions" "catalog" "Lua-File-Entry" "new" "time" "file")}
        {Lisp-Entry "parse-definitions" #f 53 11 53 28 ("get-output" "length" "0" "naturals" "put" "when" "find-function" "fn" "n" "line" "function" "for-each" "List-Factory" "new" "fact" "char-encoding" "char-encoding:" "load-lines" "lines" "let" "file")}
        {Lisp-Entry "Function" #f 70 12 70 20 ()}
        {Lisp-Entry "find-function" #f 74 11 74 24 ("subseq" "Lua-Function-Entry" "new" "c-constituent?" "skip" ">" "+" "start" "let*" "start:" "Function" "search" "when" "skip-whitespace" "col" "cardinality" "len" "let" "n" "line")}}}})
"Lua-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lua" "text" "Lua-Syntax.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lua.text.Lua-Syntax" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Lua-Syntax" #f 45 7 45 17 ("Code-Syntax")
        {Lisp-Entry "get-constituent-test" #f 53 11 53 31 ("c-constituent?")}}}})
"Lua-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lua" "text" "Lua-Text-Preferences.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lua.text.Lua-Text-Preferences" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Lua-Text-Preferences" #f 49 7 49 27 ("completions:" "Dark-Blue" "keyword-color:" "definition-color:" "Purple" "line-comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Code-Text-Preferences")
        {Lisp-Entry "title-color" #f 52 12 52 23 ("generate")}
        {Lisp-Entry "line-comment-color" #f 53 12 53 30 ("generate")}
        {Lisp-Entry "definition-color" #f 54 12 54 28 ("generate")}
        {Lisp-Entry "keyword-color" #f 55 12 55 25 ("generate")}
        {Lisp-Entry "keywords" #f 56 12 56 20 ("generate")}
        {Lisp-Entry "completions" #f 57 12 57 23 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 79 11 79 37 ("keyword-color" "definition-color" "line-comment-color" "title-color" "completions" "keywords")}
        {Lisp-Entry "property-presentation" #f 84 16 84 37 ("nextmethod" "else" "completions" "keywords" "keyword-color" "definition-color" "line-comment-color" "title-color" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 95 11 95 27 ("nextmethod" "else" "Completion-List-Row" "completions" "Color-Row" "new" "keyword-color" "definition-color" "line-comment-color" "title-color" "field-name" "case" "property")}}}})
"Lua-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lua" "text" "Lua-Text-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lua.text.Lua-Text-View" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Lua-Text-View" #f 46 7 46 20 ("Code-Text-View")
        {Lisp-Entry "install" #f 49 11 49 18 ("get-keyword-color" "Keyword" "'Keyword" "get-definition-color" "Definition" "'Definition" "get-line-comment-color" "Line-Comment" "'Line-Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 58 16 58 29 ("lua-text" "'lua-text" "rest")}
        {Lisp-Entry "preferences" #f 62 11 62 22 ("lua-text" "documents" "get-preferences")}
        {Lisp-Entry "host-workspaces" #f 71 11 71 26 ("text")}
        {Lisp-Entry "favorite-completions" #f 80 11 80 31 ("preferences" "get-completions")}
        {Lisp-Entry "commented?" #f 84 11 84 21 ("Line-Comment" "'Line-Comment" "Title" "'Title" "inherits?" "or" "and" "get-style-at" "style" "let" "pos")}
        {Lisp-Entry "return-press" #f 96 11 96 23 ("tabulate" "nextmethod" "key")}
        {Lisp-Entry "explorer-class" #f 106 11 106 25 ("Lua-Explorer")}
        {Lisp-Entry "get-context" #f 115 11 115 22 ("c")}
        {Lisp-Entry "current-name" #f 119 11 119 23 ("current-expr-range" "name-at")}
        {Lisp-Entry "name-at" #f 123 11 123 18 ("read-string-element" "element" "eqv?" "if" "0" "cardinality" ">" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "current-expr" #f 132 11 132 23 ("current-name")}
        {Lisp-Entry "current-expr-range" #f 136 11 136 29 ("get-end" "expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "expr-range" #f 142 11 142 21 ("get-range" "outer-expr" "end:" "start:" "self" "Lua-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "expr-at" #f 148 11 148 18 ("expr-range" "name-at" "pos")}
        {Lisp-Entry "headers" #f 157 12 157 19 ("list")}
        {Lisp-Entry "get-headers" #f 162 11 162 22 ("headers")}
        {Lisp-Entry "get-first-special?" #f 166 11 166 29 ()}
        {Lisp-Entry "Definitions" #f 175 12 175 23 ()}
        {Lisp-Entry "get-definitions" #f 179 11 179 26 ("Definitions")}
        {Lisp-Entry "Keywords" #f 188 12 188 20 ()}
        {Lisp-Entry "get-keywords" #f 203 29 203 41 ("Keywords")}
        {Lisp-Entry "Syntax-Targets" #f 212 14 212 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 215 14 215 29 ()}
        {Lisp-Entry "syntax-targets" #f 219 11 219 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 225 11 225 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" #f 231 11 231 33 ("get-keywords" "keyword" "'keyword" "get-definitions" "definition" "'definition" "str" "function" "map" "line-comment" "'line-comment" "list" "append")}
        {Lisp-Entry "compute-syntax-automata" #f 237 11 237 34 ("c-constituent?" "self" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "colorize-type" #f 241 11 241 24 ("Keyword" "'Keyword" "keyword" "Definition" "'Definition" "colorize-keyword" "definition" "Title" "'Title" "Line-Comment" "'Line-Comment" "colorize-line-comment" "line-comment" "case" "recolorize?" "colorizer" "end" "start" "type" "found")}}}})
"Macro-Recorder"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "recorder" "Macro-Recorder.jazz"} 1226584783
    {Lisp-Entry "jazz.recorder.Macro-Recorder" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Recording-Factory" #f 48 19 48 36 ("List-Factory" "new")}
      {Lisp-Entry "Registered-Recordings" #f 51 19 51 40 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "Active-Recording" #f 54 19 54 35 ()}
      {Lisp-Entry "Macro-Recorder" #f 58 7 58 21 ("Object")
        {Lisp-Entry "on-start-recording" #f 66 11 66 29 ("List-Factory" "new" "Recording-Factory" "set!" "set-macro-recording?" "user-message" "Recording?" "not" "when" "evt")}
        {Lisp-Entry "on-stop-recording" #f 73 11 73 28 ("Active-Recording" "get-output" "coalesce-actions" "Recording-Factory" "set!" "set-macro-recording?" "user-message" "Recording?" "when" "evt")}
        {Lisp-Entry "on-resume-recording" #f 81 11 81 30 ("set-macro-recording?" "user-message" "Recording?" "not" "when" "evt")}
        {Lisp-Entry "on-play-recording" #f 87 11 87 28 ("error" "get-recording" "play-recording" "play-current-recording" "no:" "get-property" "no" "let" "user-message" "begin" "Recording?" "not" "if" "evt")}
        {Lisp-Entry "on-output-recording" #f 99 11 99 30 ("output-recording" "bell" "null?" "if" "Recording-Factory" "get-output" "actions" "let" "evt")}
        {Lisp-Entry "on-present-recording" #f 106 11 106 31 ("present-recording" "bell" "null?" "if" "Recording-Factory" "get-output" "actions" "let" "evt")}
        {Lisp-Entry "on-register-recording" #f 113 11 113 32 ("user-message" "register-recording" "Recording-Factory" "get-output" "recording" "6" "1" "between?" "assert" "initial-value:" "prefix:" "title:" "request-string" "parse-integer" "no" "let" "evt")}
        {Lisp-Entry "on-set-active-recording" #f 121 11 121 34 ("get-recording" "user-message" "Active-Recording" "set!" "begin" "null?" "if" "title:" "request-string" "read-string-element" "name" "let" "evt")}
        {Lisp-Entry "coalesce-actions" #f 132 11 132 27 ("string-append" "not" "string" "added" "key:" "get-property" "char" "on-key-press" "'on-key-press" "get-action/method-name" "get-target-name" "eq?" "and" "if" "action/handler" "bind" "action" "for-each" "set!" "cons" "put" "content:" "self" ":string" "Event" "event" "on-insert" ":focus" "Event-Handler" "handler" "let" "when" "function" "coalesce" "result" "List-Factory" "new" "fact" "let*" "actions")}
        {Lisp-Entry "present-recording" #f 158 11 158 28 ("title:" "get-output-string" "message-box" "get-action/method-name" "not" "format" "event" "action/handler" "bind" "do" "then" "first" "first?" "in" "action" "for" "loop" "car" "get-target-name" "map" "remove-duplicates" "targets" "open-output-string" "printer" "get-focus" "focus" "let*" "actions")}
        {Lisp-Entry "output-recording" #f 174 11 174 27 ("tabulate" ":reader" "->string" "insert-string" "insert-newline" "unless" "do" "in" "action" "then" "first" "first?" "for" "loop" "insert-char" "function" "get-undoer" "with-atomic-undo" "bell" "Text-View" "is-not?" "if" "get-focus" "text" "let" "actions")}
        {Lisp-Entry "target-name" #f 191 11 191 22 ("keyword->symbol" "appl" "'appl" ":application" "eq?" "if" "target")}
        {Lisp-Entry "get-target-name" #f 206 11 206 26 ("else" "get-target-name" "Action" "typecase" "action/handler")}
        {Lisp-Entry "get-action/method-name" #f 212 11 212 33 ("get-method-name" "else" "get-action-name" "Action" "typecase" "action/handler")}
        {Lisp-Entry "record" #f 227 18 227 24 ("cons" "Recording-Factory" "put" ":recorder" "get-target-name" "eq?" "unless" "event" "action/handler")}
        {Lisp-Entry "register-recording" #f 232 18 232 36 ("Registered-Recordings" "table-set!" "recording" "name")}
        {Lisp-Entry "get-recording" #f 236 18 236 31 ("error" "Registered-Recordings" "table-ref" "either" "name")}
        {Lisp-Entry "play-current-recording" #f 246 18 246 40 ("get-recording" "Recording-Factory" "get-output" "play-recording" "unless" "get-application" "get-profile" "profile" "let" "Active-Recording" "not" "if")}
        {Lisp-Entry "play-recording" #f 254 18 254 32 ("play-action" "for-each" "function" "get-undoer" "with-atomic-undo" "Text-View" "is?" "if" "get-focus" "focus" "set-macro-playing?" "begin" "unwind-protect" "Recording-Playing?" "old" "let" "recording")}
        {Lisp-Entry "play-action" #f 268 18 268 29 ("invoke" "get-focus" "target" "let" "else" "event:" "call-action" "Action" "typecase" "event" "action/handler" "bind" "action")}
        {Lisp-Entry "find-target" #f 278 18 278 29 ("get-process" "process-alias" "target")}}}})
"Matches-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Matches-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Matches-Row" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Matches-Row" #f 45 7 45 18 ("Value-Row")
        {Lisp-Entry "present" #f 48 13 48 20 ("format" "null?" "if" "matches")}
        {Lisp-Entry "get-edited-value" #f 54 13 54 29 ("split" "map" "trim-spaces" "function" "clean" "=" "if" "editor" "get-string-content" "string" "let")}}}})
"Me"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "profile" "Me.jazz"} 1226584783
    {Lisp-Entry "jazz.profile.Me" #f 37 9 37 24 ("Me" "register-profile-class" "jazz")
      {Lisp-Entry "Me" #f 48 7 48 9 ("Profile")}}})
"Memo-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Memo-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Memo-Row" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Memo-Row" #f 46 7 46 15 ("Combo-Row")
        {Lisp-Entry "initialize" #f 54 11 54 21 ("choose" "'choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "present" #f 64 11 64 18 ("format" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "combo-choose" #f 75 11 75 23 ("focus-editor" "enter-edited-value" "set-edited-value" "get-edited-value" "initial-text:" "request-text" "text" "let")}
        {Lisp-Entry "get-edited-value" #f 88 11 88 27 ("=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" #f 95 11 95 27 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Memory-Surface"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "Memory-Surface.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.Memory-Surface" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Memory-Surface" #f 46 7 46 21 ("Surface")
        {Lisp-Entry "size" #f 49 8 49 12 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("size~self" "set!" "nextmethod" "get-height" "get-width" "0" "cairo_image_surface_create" "surface" "let*" "10" "Dimension" "size" "size:" "compatibility-dc")}
        {Lisp-Entry "get-size" #f 58 11 58 19 ("size")}}}})
"Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Menu" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "Menu" #f 46 7 46 11 ("visible?:" "View")
        {Lisp-Entry "poped" #f 49 8 49 13 ()}
        {Lisp-Entry "locked?" #f 50 8 50 15 ()}
        {Lisp-Entry "conclude" #f 62 11 62 19 ("layout-menu" "nextmethod" "rest")}
        {Lisp-Entry "get-poped" #f 72 18 72 27 ("poped")}
        {Lisp-Entry "set-poped" #f 76 18 76 27 ("set!" "invalidate-view" "popup-initiator" "initiator" "let" "poped" "when" "menu")}
        {Lisp-Entry "invalidate-update" #f 89 11 89 28 ("layout-menu")}
        {Lisp-Entry "update" #f 93 26 93 32 ()}
        {Lisp-Entry "layout-menu" #f 102 26 102 37 ("2" "300" "120" "if" "set!" "increase!" "set-arrow-width" "set-shortcut-width" "set-body-width" "set-icon-width" "set-prefix-width" "Dimension" "set-size" "Point" "new" "set-position" "preferred-height" "height" "view" "function" "for-each-view" "empty?" "1" "v" "0" "or" "+" "max" "let" "collect-maximums" "arrow" "shortcut" "body" "icon" "prefix" "receive" "get-finished?" "when" "width" "bind-keywords" "rest")}
        {Lisp-Entry "collect-maximums" #f 126 11 126 27 ("values" "set!" ">" "when" "preferred-arrow-width" "arrow" "preferred-shortcut-width" "shortcut" "preferred-body-width" "body" "preferred-icon-width" "icon" "preferred-prefix-width" "prefix" "view" "function" "for-each-view" "arrow-max" "shortcut-max" "body-max" "icon-max" "0" "prefix-max" "let")}
        {Lisp-Entry "cleanup-separators" #f 152 18 152 36 ("set!" "when" "set-visible?" "if" "and" "consecutive?" "Separator-Item" "is?" "separator?" "let*" "for-each" "kept-separator" "previous-separator?" "children" "get-visible?" "item" "function" "collect-if" "visibles" "let")}}}})
"Menu-Transient"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "Menu-Transient.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.Menu-Transient" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Menu-Transient" #f 45 7 45 21 ("Transient")}}})
"Menubar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Menubar.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Menubar" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "Menubar" #f 49 7 49 14 ("on-close" "close" "on-restore" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "type:" "restore" "name:" "visible?:" "20" "1024" "Dimension" "size:" "Menu")
        {Lisp-Entry "showing?" #f 52 8 52 16 ()}
        {Lisp-Entry "host-install" #f 66 11 66 23 ("self" "set-menubar" "get-application" "appl" "let")}
        {Lisp-Entry "host-uninstall" #f 71 11 71 25 ("set-menubar" "get-application" "appl" "let")}
        {Lisp-Entry "on-restore" #f 81 11 81 21 ("get-stage" "restore" "evt")}
        {Lisp-Entry "on-close" #f 85 11 85 19 ("close-with-confirm" "current-frame" "frame" "let" "evt")}
        {Lisp-Entry "maximize" #f 95 18 95 26 ("show-buttons")}
        {Lisp-Entry "restore" #f 99 18 99 25 ("hide-buttons")}
        {Lisp-Entry "update-buttons" #f 103 26 103 40 ("hide-buttons" "show-buttons" "get-maximized?" "not-null?" "and" "if" "get-views" "frames" "get-stage" "stage" "let*")}
        {Lisp-Entry "show-buttons" #f 111 11 111 23 ("close" "'close" "restore" "'restore" "locate" "set-visible?" "always-maximized?" "unless")}
        {Lisp-Entry "hide-buttons" #f 117 11 117 23 ("close" "'close" "restore" "'restore" "locate" "set-visible?")}
        {Lisp-Entry "always-maximized?" #f 122 29 122 46 ()}
        {Lisp-Entry "restore-rect" #f 131 11 131 23 ("18" "21" "4" "+" "37" "-" "Rect" "new" "right" "top")}
        {Lisp-Entry "close-rect" #f 135 11 135 21 ("18" "3" "4" "+" "19" "-" "Rect" "new" "right" "top")}
        {Lisp-Entry "layout" #f 144 11 144 17 ("close-rect" "close" "'close" "restore-rect" "restore" "'restore" "locate" "set-rect" "3" "get-right" "+" "right" "0" "top" "get-bounds" "bounds" "let*")}
        {Lisp-Entry "layout-menu" #f 152 11 152 22 ("increase!" "-" "Dimension" "set-size" "preferred-body-width" "width" "2" "Point" "new" "set-position" "Item" "is?" "when" "view" "function" "for-each-view" "0" "h" "get-height" "height" "let")}}}})
"Message-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Message-Box.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Message-Box" #f 37 9 37 35 ("Message-Text-View" "register-autoclass" "jazz")
      {Lisp-Entry "Message-Box" #f 52 7 52 18 ("selectable?:" "editable?:" "0" "top-padding:" "2" "left-padding:" "background:" "text" "fill" "layout-type:" "content" "flat?:" "vscroll?:" "hscroll?:" "scroller" "Dark" "Color" "border-color:" "border-type:" "100" "56" "border" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "32" "12" "Point" "position:" "icon" "name:" "120" "302" "Dimension" "size:" "View")
        {Lisp-Entry "type" #f 55 8 55 12 ()}
        {Lisp-Entry "process-keys?" #f 56 8 56 21 ()}
        {Lisp-Entry "user-content" #f 57 8 57 20 ()}
        {Lisp-Entry "action-buttons" #f 58 8 58 22 ()}
        {Lisp-Entry "default-button" #f 59 8 59 22 ()}
        {Lisp-Entry "finish" #f 71 11 71 17 ("self" "text" "'text" "locate" "set-client" "nextmethod" "initargs")}
        {Lisp-Entry "install-in-host" #f 81 11 81 26 ("text" "'text" "locate" "acquire-focus" "host")}
        {Lisp-Entry "Type-Infos" #f 90 14 90 24 ("custom" "'custom" ":hand" ":error" "error" "'error" "cancel" "'cancel" "confirmation" "'confirmation" "no" "'no" ":exclamation" "question" "'question" "yes" "'yes" ":asterisk" ":information" "message" "'message" "list")}
        {Lisp-Entry "type-info" #f 99 11 99 20 ("error" "cdr" "if" "Type-Infos" "assq" "info" "let" "type")}
        {Lisp-Entry "resize" #f 111 11 111 17 ("action-buttons" "move-figure" "button" "function" "for-each" "user-content" "border" "'border" "locate" "size-figure" "2" "get-width" "resize-parts" "second-dh" "first-dh" "bind" "current-modal" "get-host" "eq?" "when" "nextmethod" "dv" "dh")}
        {Lisp-Entry "process-return" #f 124 11 124 25 ("default-button" "end-modal-dialog" "get-host" "dialog" "let")}
        {Lisp-Entry "process-escape" #f 129 11 129 25 ("end-modal-dialog" "get-host" "dialog" "let" "when" "type" "type-info" "close-result" "cancelable?" "default-cancel" "default-no" "default-yes" "default-sound" "default-icon" "default-title" "bind")}
        {Lisp-Entry "process-key" #f 136 11 136 22 ("action-buttons" "for-each" "continuation-return" "end-modal-dialog" "ci=?" "0" "element" "either" "first" "get-title" "localize" "get-name" "result" "car" "null?" "if" "shortcut-key" "let" "get-user-data" "optional" "name" "title" "bind" "get-visible?" "button" "try-button" "get-host" "dialog" "let*" "return" "function" "continuation-capture" "process-keys?" "when" "key")}
        {Lisp-Entry "on-select" #f 155 11 155 20 ("end-modal-dialog" "button:" "get-property" "button" "let" "evt")}
        {Lisp-Entry "process-box" #f 165 18 165 29 ("process-modal" "play-sound" "layout-dialog" "size" "selection" "layout-box" "dialog-size" "first" "default-button" "let*" "'yes" "'no" "list" "cons" "second" "key:" "actions" "'cancel" "member?" "not" "and" "when" "cancel" "no" "yes" "default" "'default" "eq?" "if" "sound" "icon" "either" "title" "get-host" "host" "get-player" "dialog" "let" "content" "user-content~self" "process-keys?" "process-keys?~self" "type~self" "set!" "type" "type-info" "close-result" "cancelable?" "default-cancel" "default-no" "default-yes" "default-sound" "default-icon" "default-title" "bind" "text")}
        {Lisp-Entry "layout-dialog" #f 204 11 204 24 ("set-size" "set-position" "set-title" "get-size" "center" "position" "get-desktop" "desktop" "let*" "size" "title" "dialog")}
        {Lisp-Entry "Left-Padding" #f 217 14 217 26 ("2")}
        {Lisp-Entry "Top-Padding" #f 220 14 220 25 ("0")}
        {Lisp-Entry "Content-Spacing" #f 223 14 223 29 ("10")}
        {Lisp-Entry "Buttons-Spacing" #f 226 14 226 29 ("6")}
        {Lisp-Entry "layout-box" #f 230 29 230 39 ("action-buttons" "position-buttons" "10" "v" "center" "h" "solid" "'solid" "set-border-type" ">" "overflow?" "set-icon" "58" "dialog-height" "68" "dialog-width" "2" "increase!" "set!" "Content-Spacing" "get-left" "Point" "set-position" "self" "set-parent" "get-bottom" "bottom" "200" "36" "0" "get-height" "get-visible-height" "text-height" "100" "500" "208" "compute-width" "max" "min" "get-width" "if" "let" "set-selection" "when" "localize" "set-text" "setup-buttons" "buttons-width" "Top-Padding" "Left-Padding" "1" "+" "Dimension" "new" "set-size" "height" "width" "function" "size-border" "border" "'border" "border-view" "scroller" "'scroller" "scroller-view" "'text" "text-view" "'icon" "locate" "icon-view" "let*" "default" "actions" "content" "icon" "size" "title" "selection" "text")}
        {Lisp-Entry "setup-buttons" #f 266 11 266 24 ("default-button" "get-output" "action-buttons" "set!" "for-each" "put" "Buttons-Spacing" "/=" "when" "get-height" "set-size" "get-width" "max" "width" "preferred-size" "localize" "set-title" "eq?" "default?:" "action-handler:" "user-data:" "size:" "72" "75" "*" "Point" "position:" "self" "parent:" "name:" "Push-Button" "button" "button:" "list" "properties:" "on-select" "'on-select" "method-name:" ":guest" "target-name:" "Event-Handler" "handler" "increase!" "shortcut-key" "button-name" "title" "bind" "action" "function" "setup-button" "List-Factory" "fact" "count" "24" "80" "Dimension" "new" "size" "0" "buttons-width" "let*" "default" "actions")}
        {Lisp-Entry "position-buttons" #f 291 11 291 27 ("for-each" "Buttons-Spacing" "get-width" "+" "set!" "Point" "new" "set-position" "get-visible?" "when" "button" "function" "position-button" "let" "v" "h" "action-buttons")}}
      {Lisp-Entry "Message-Text-View" #f 305 7 305 24 ("Formatted-Text-View")
        {Lisp-Entry "client" #f 308 12 308 18 ("generate")}
        {Lisp-Entry "get-context-menu" #f 311 11 311 27 ("new-text-context-menu")}
        {Lisp-Entry "return-press" #f 315 11 315 23 ("client" "process-return" "key")}
        {Lisp-Entry "escape-press" #f 319 11 319 23 ("client" "process-escape" "key")}
        {Lisp-Entry "key-press" #f 323 11 323 20 ("client" "process-key" "key")}}}})
"Method-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Method-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Method-Doc" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Method-Doc" #f 46 7 46 17 ("Definition-Doc")
        {Lisp-Entry "parameters" #f 49 12 49 22 ("generate")}
        {Lisp-Entry "print-catalog" #f 58 11 58 24 ("doc" "parameters" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "present" #f 70 11 70 18 ("parameters" "name" "cons" "format")}
        {Lisp-Entry "present-text" #f 80 11 80 23 ("package-name" "not" "get-children" "example" "function" "map" "examples" "null?" "if" ",@paragraphs" "parameters" "cons" "->string" "Red-Ball" ",Red-Ball" "Dark-Blue" "color:" "name" ",name" "form->node" "->jml" "paragraphs" "tag" "bind" "description" "when")}
        {Lisp-Entry "get-class-image" #f 110 16 110 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 119 16 119 37 ("nextmethod" "else" "parameters" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 125 11 125 27 ("nextmethod" "else" "String-Row" "new" "parameters" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 131 11 131 37 ("parameters" "package-name")}}}})
"Method-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Method-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Method-Entry" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Method-Entry" #f 45 7 45 19 ("Definition-Entry")
        {Lisp-Entry "parameters" #f 48 8 48 18 ()}
        {Lisp-Entry "throws" #f 49 8 49 14 ()}
        {Lisp-Entry "construct-literal" #f 53 16 53 33 ("self" "new" "references" "column" "line" "throws" "parameters" "type" "name" "modifiers" "context")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("throws~self" "parameters~self" "set!" "nextmethod" "references" "definitions" "column" "line" "throws" "parameters" "literal?" "type" "name" "modifiers")}
        {Lisp-Entry "print-catalog" #f 63 11 63 24 ("references" "column" "line" "throws" "parameters" "type" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "present-detailed" #f 70 11 70 27 ("name" "format" "parameters" "null?" "if")}
        {Lisp-Entry "get-image" #f 76 11 76 20 ("Bitmap-Resource")}
        {Lisp-Entry "get-parameters" #f 85 18 85 32 ("parameters")}
        {Lisp-Entry "get-throws" #f 89 11 89 21 ("throws")}}}})
"Module-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Module-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Module-Doc" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Module-Doc" #f 45 7 45 17 ("Project-Doc")}}})
"Moniker-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "widget" "Moniker-Browser.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.widget.Moniker-Browser" #f 37 9 37 39 ("Moniker-Button" "register-autoclass" "jazz")
      {Lisp-Entry "Moniker-Browser" #f 52 7 52 22 ("on-browse" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "Medium" "Color" "background:" "browse" "on-receive-files" "receive-files-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "top-padding:" "2" "left-padding:" "show-unfocused-selection?:" "accepts-returns?:" "text" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "scroller" "name:" "20" "142" "Dimension" "size:" "View")
        {Lisp-Entry "mode" #f 55 12 55 16 ("set-mode" "get-mode" "open" "'open")}
        {Lisp-Entry "protocol" #f 56 12 56 20 ("set-protocol" "get-protocol" "file" "'file")}
        {Lisp-Entry "parameters" #f 57 12 57 22 ("set-parameters" "get-parameters")}
        {Lisp-Entry "display-logical?" #f 58 12 58 28 ("set-display-logical?" "get-display-logical?")}
        {Lisp-Entry "anchors" #f 59 12 59 19 ("set-anchors" "get-anchors")}
        {Lisp-Entry "read-only?" #f 60 12 60 22 ("set-read-only?" "get-read-only?")}
        {Lisp-Entry "on-browse" #f 76 11 76 20 ("browse-moniker" "evt")}
        {Lisp-Entry "on-return-press" #f 80 11 80 26 ("self" "invoke" "return-press-handler" "when" "evt")}
        {Lisp-Entry "on-receive-files" #f 85 11 85 27 ("bell" "set-moniker" "car" "is?" "1" "length" "=" "and" "protocol" "get-protocol-handler" "handler" ":receive-files" "Event" "new" "self" "invoke" "receive-files-handler" "if" "files:" "files" "position:" "get-property" "pos" "let" "evt")}
        {Lisp-Entry "get-mode" #f 102 18 102 26 ("mode")}
        {Lisp-Entry "set-mode" #f 106 18 106 26 ("save" "Bitmap-Resource" "set-image-name" "open" "case" "'browse" "locate" "browse" "let" "mode" "set!" "value")}
        {Lisp-Entry "get-protocol" #f 114 18 114 30 ("protocol")}
        {Lisp-Entry "set-protocol" #f 118 18 118 30 ("protocol" "set!" "value")}
        {Lisp-Entry "get-parameters" #f 122 18 122 32 ("parameters")}
        {Lisp-Entry "set-parameters" #f 126 18 126 32 ("parameters" "set!" "value")}
        {Lisp-Entry "get-display-logical?" #f 130 18 130 38 ("display-logical?")}
        {Lisp-Entry "set-display-logical?" #f 134 18 134 38 ("display-logical?" "set!" "value")}
        {Lisp-Entry "get-anchors" #f 138 18 138 29 ("anchors")}
        {Lisp-Entry "set-anchors" #f 142 18 142 29 ("anchors" "set!" "value")}
        {Lisp-Entry "get-text" #f 146 18 146 26 ("text" "'text" "locate")}
        {Lisp-Entry "inner?" #f 155 11 155 17 ("children" "memq?" "view")}
        {Lisp-Entry "layout" #f 164 11 164 17 ("browse-size" "browse-position" "browse" "'browse" "scroller-size" "set-size" "scroller-position" "scroller" "'scroller" "locate" "set-position" "get-size" "size" "let")}
        {Lisp-Entry "scroller-position" #f 172 11 172 28 ("0" "Point" "size")}
        {Lisp-Entry "scroller-size" #f 176 11 176 24 ("19" "17" "get-width" "-" "Dimension" "new" "size")}
        {Lisp-Entry "browse-position" #f 180 11 180 26 ("0" "17" "get-width" "-" "Point" "new" "size")}
        {Lisp-Entry "browse-size" #f 184 11 184 22 ("17" "Dimension" "size")}
        {Lisp-Entry "browse-moniker" #f 193 18 193 32 ("reposition?:" "tail" "'tail" "force-horizontal:" "ensure-displayed" "text-ending" "set-caret" "acquire-focus" "get-text" "text" "let" "set-moniker" "moniker-modal" "apply" "moniker" "parameters" "get-moniker" "actual:" "mode" "mode:" "augment" "arguments" "protocol" "get-protocol-handler" "handler" "let*")}
        {Lisp-Entry "get-moniker" #f 209 18 209 29 ("else" "Pathname" "Directory-Group" "typecase" "moniker" "let*" "bind" "read-string-content" "content" "anchors" "anchors:" "moniker-new" "anchorize" "tokenise-filename" "parameters" "protocol" "get-protocol-handler" "handler" "alias-displayed?" "not" "if" "empty-string?" "unless" "get-text" "get-string-content" "string" "let")}
        {Lisp-Entry "set-moniker" #f 226 18 226 29 ("moniker-update" "when" "present-moniker" "not" "if" "get-text" "set-string-content" "update?" "update?:" "moniker")}
        {Lisp-Entry "moniker-update" #f 232 29 232 43 ()}
        {Lisp-Entry "present-moniker" #f 236 18 236 33 ("present" "class-of" "get-protocol" "format" "->string" "parse" "Pathname" "is?" "alias-displayed?" "not" "if" "moniker")}
        {Lisp-Entry "alias-displayed?" #f 248 11 248 27 ("get-application" "display-aliases?" "display-logical?" "not" "if")}
        {Lisp-Entry "get-modified?" #f 254 11 254 24 ("get-text" "get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 258 11 258 24 ("get-text" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "get-read-only?" #f 267 18 267 32 ("read-only?")}
        {Lisp-Entry "set-read-only?" #f 271 18 271 32 ("browse" "'browse" "locate" "set-enabled?" "not" "get-text" "set-editable?" "read-only?" "set!" "value")}}
      {Lisp-Entry "Moniker-Button" #f 282 7 282 21 ("Push-Tool")
        {Lisp-Entry "light-pen" #f 285 11 285 20 ("Light-Background" "name:" "Pen")}
        {Lisp-Entry "dark-pen" #f 289 11 289 19 ("Dark" "name:" "Pen")}
        {Lisp-Entry "draw-inactive" #f 293 11 293 24 ("Medium" "Light" "name:" "Color" "get-enabled?" "if" "frame-rect" "get-bounds" "bounds" "let" "surface")}
        {Lisp-Entry "draw-tool" #f 298 11 298 20 ("draw-ellipsis" "context" "surface")}
        {Lisp-Entry "draw-ellipsis" #f 302 11 302 24 ("enabled?" "get-v" "1" "get-h" "+" "draw-text" "Black" "name:" "Color" "set-text-color" "center" "'center" "justify" "pos" "get-text-extent" "extent" "title" "get-offset" "offset" "get-size" "size" "let*" "surface")}
        {Lisp-Entry "get-offset" #f 312 11 312 21 ("0" "1" "choose" "pushed" "get-state" "memq?" "if")}}}})
"Moniker-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "widget" "Moniker-Text-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.widget.Moniker-Text-View" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Moniker-Text-View" #f 44 7 44 24 ("IDE-Text-View")
        {Lisp-Entry "get-scroll-context" #f 47 11 47 29 ("0" "cons")}}}})
"Moniker-Widget"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "widget" "Moniker-Widget.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.widget.Moniker-Widget" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Moniker-Widget" #f 52 7 52 21 ("on-browse" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "browse" "on-receive-files" "receive-files-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "top-padding:" "2" "left-padding:" "show-unfocused-selection?:" "accepts-returns?:" "text" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "scroller" "edge" "border-type:" "moniker-border" "name:" "22" "142" "Dimension" "size:" "View")
        {Lisp-Entry "mode" #f 55 12 55 16 ("set-mode" "get-mode" "open" "'open")}
        {Lisp-Entry "protocol" #f 56 12 56 20 ("set-protocol" "get-protocol" "file" "'file")}
        {Lisp-Entry "parameters" #f 57 12 57 22 ("set-parameters" "get-parameters")}
        {Lisp-Entry "display-logical?" #f 58 12 58 28 ("set-display-logical?" "get-display-logical?")}
        {Lisp-Entry "display-protocol?" #f 59 12 59 29 ("set-display-protocol?" "get-display-protocol?")}
        {Lisp-Entry "anchors" #f 60 12 60 19 ("set-anchors" "get-anchors")}
        {Lisp-Entry "moniker-update-handler" #f 61 12 61 34 ("set-moniker-update-handler" "get-moniker-update-handler")}
        {Lisp-Entry "on-browse" #f 78 11 78 20 ("browse-moniker" "evt")}
        {Lisp-Entry "on-return-press" #f 82 11 82 26 ("self" "invoke" "return-press-handler" "when" "evt")}
        {Lisp-Entry "on-receive-files" #f 87 11 87 27 ("bell" "set-moniker" "car" "is?" "1" "length" "=" "and" "protocol" "get-protocol-handler" "handler" ":receive-files" "Event" "new" "self" "invoke" "receive-files-handler" "if" "files:" "files" "position:" "get-property" "pos" "let" "evt")}
        {Lisp-Entry "get-mode" #f 104 18 104 26 ("mode")}
        {Lisp-Entry "set-mode" #f 108 18 108 26 ("save" "Bitmap-Resource" "set-image-name" "open" "case" "'browse" "locate" "browse" "let" "mode" "set!" "value")}
        {Lisp-Entry "get-protocol" #f 116 18 116 30 ("protocol")}
        {Lisp-Entry "set-protocol" #f 120 18 120 30 ("protocol" "set!" "value")}
        {Lisp-Entry "get-parameters" #f 124 18 124 32 ("parameters")}
        {Lisp-Entry "set-parameters" #f 128 18 128 32 ("parameters" "set!" "value")}
        {Lisp-Entry "get-display-logical?" #f 132 18 132 38 ("display-logical?")}
        {Lisp-Entry "set-display-logical?" #f 136 18 136 38 ("display-logical?" "set!" "value")}
        {Lisp-Entry "get-display-protocol?" #f 140 18 140 39 ("display-protocol?")}
        {Lisp-Entry "set-display-protocol?" #f 144 18 144 39 ("display-protocol?" "set!" "value")}
        {Lisp-Entry "get-anchors" #f 148 18 148 29 ("anchors")}
        {Lisp-Entry "set-anchors" #f 152 18 152 29 ("anchors" "set!" "value")}
        {Lisp-Entry "get-moniker-update-handler" #f 156 18 156 44 ("moniker-update-handler")}
        {Lisp-Entry "set-moniker-update-handler" #f 160 18 160 44 ("moniker-update-handler" "set!" "value")}
        {Lisp-Entry "call-moniker-update" #f 164 18 164 37 ("invoke" "self" ":update" "Event" "new" "event" "let" "moniker-update" "moniker-update-handler" "null?" "if")}
        {Lisp-Entry "get-text" #f 171 18 171 26 ("text" "'text" "locate")}
        {Lisp-Entry "set-enabled?" #f 180 11 180 23 ("invalidate-view" "browse" "'browse" "text" "'text" "locate" "set-enabled?" "enabled?" "set!" "flag")}
        {Lisp-Entry "inner?" #f 192 11 192 17 ("children" "memq?" "view")}
        {Lisp-Entry "layout" #f 201 11 201 17 ("browse-size" "browse-position" "browse" "'browse" "moniker-size" "set-size" "moniker-position" "moniker-border" "'moniker-border" "locate" "set-position" "get-size" "size" "let")}
        {Lisp-Entry "moniker-position" #f 209 11 209 27 ("1" "0" "Point" "size")}
        {Lisp-Entry "moniker-size" #f 213 11 213 23 ("19" "25" "get-width" "-" "Dimension" "new" "size")}
        {Lisp-Entry "browse-position" #f 217 11 217 26 ("0" "22" "get-width" "-" "Point" "new" "size")}
        {Lisp-Entry "browse-size" #f 221 11 221 22 ("22" "Dimension" "size")}
        {Lisp-Entry "browse-moniker" #f 230 18 230 32 ("reposition?:" "tail" "'tail" "force-horizontal:" "ensure-displayed" "text-ending" "set-caret" "acquire-focus" "get-text" "text" "let" "set-moniker" "moniker-modal" "apply" "moniker" "parameters" "get-moniker" "actual:" "cons" "arguments" "SaveFile-Dialog" "save" "protocol" "get-protocol-handler" "open" "mode" "case" "handler" "let*")}
        {Lisp-Entry "get-moniker" #f 246 18 246 29 ("Pathname" "is?" "moniker" "parse-content" "receive" "read-string-content" "content" "anchors" "anchors:" "moniker-new" "anchorize" "tokenise-filename" "list" "protocol" "get-protocol-handler" "handler" "alias-displayed?" "not" "if" "empty-string?" "unless" "get-text" "get-string-content" "string" "let")}
        {Lisp-Entry "parse-content" #f 261 11 261 24 ("list" "bind" "protocol" "get-protocol-handler" "values" "protocol-displayed?" "not" "if" "content")}
        {Lisp-Entry "set-moniker" #f 268 18 268 29 ("call-moniker-update" "when" "present-moniker" "null?" "if" "get-text" "set-string-content" "generate-event?" "generate-event?:" "moniker")}
        {Lisp-Entry "moniker-update" #f 274 29 274 43 ()}
        {Lisp-Entry "present-moniker" #f 278 11 278 26 ("class-of" "get-protocol" "format" "present" "protocol-displayed?" "parse" "alias-displayed?" "not" "if" "moniker")}
        {Lisp-Entry "alias-displayed?" #f 288 11 288 27 ("get-application" "display-aliases?" "display-logical?" "not" "if")}
        {Lisp-Entry "protocol-displayed?" #f 294 11 294 30 ("get-application" "display-protocol?" "not" "if")}
        {Lisp-Entry "get-modified?" #f 300 11 300 24 ("get-text" "get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 304 11 304 24 ("get-text" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "validate-content" #f 313 11 313 27 ("get-moniker" "throw-cancel" "focus-body" "yes:" "get-message" "message-box" "err" "Parse-Error" "catch")}
        {Lisp-Entry "focus-body" #f 321 18 321 28 ("select-all" "acquire-focus" "get-text" "text" "let")}}}})
"Mouse-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Mouse-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Mouse-Event" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Mouse-Event" #f 44 7 44 18 ("Event")
        {Lisp-Entry "position" #f 47 8 47 16 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("position" "set!" "nextmethod" "pos" "sender" "kind")}
        {Lisp-Entry "print" #f 55 11 55 16 ("position" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-position" #f 66 18 66 30 ("position")}
        {Lisp-Entry "get-h" #f 70 18 70 23 ("position" "get-h")}
        {Lisp-Entry "get-v" #f 74 18 74 23 ("position" "get-v")}}}})
"Multiplexer-Reporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "reporter" "Multiplexer-Reporter.jazz"} 1226584782
    {Lisp-Entry "jazz.library.reporter.Multiplexer-Reporter" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Multiplexer-Reporter" #f 44 7 44 27 ("Reporter" "Object")
        {Lisp-Entry "reporters" #f 47 8 47 17 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("reporters~self" "set!" "nextmethod" "reporters")}
        {Lisp-Entry "main-reporter" #f 55 11 55 24 ("reporters" "car")}
        {Lisp-Entry "section-title" #f 59 11 59 24 ("reporters" "section-title" "reporter" "function" "for-each" "title")}
        {Lisp-Entry "set-message" #f 65 11 65 22 ("reporters" "set-message" "reporter" "function" "for-each" "msg")}
        {Lisp-Entry "user-message" #f 71 11 71 23 ("reporters" "user-message" "" "apply" "reporter" "function" "for-each" "rest" "fmt")}
        {Lisp-Entry "set-range" #f 77 11 77 20 ("reporters" "set-range" "reporter" "function" "for-each" "range")}
        {Lisp-Entry "set-pos" #f 83 11 83 18 ("reporters" "set-pos" "reporter" "function" "for-each" "pos")}
        {Lisp-Entry "delta-pos" #f 89 11 89 20 ("reporters" "delta-pos" "reporter" "function" "for-each" "increment")}
        {Lisp-Entry "set-step" #f 95 11 95 19 ("reporters" "set-step" "reporter" "function" "for-each" "increment")}
        {Lisp-Entry "step-it" #f 101 11 101 18 ("reporters" "step-it" "reporter" "function" "for-each")}
        {Lisp-Entry "set-done" #f 107 11 107 19 ("reporters" "set-done" "reporter" "function" "for-each")}
        {Lisp-Entry "disable-cancel" #f 113 11 113 25 ("reporters" "disable-cancel" "reporter" "function" "for-each")}
        {Lisp-Entry "cancel-requested?" #f 119 11 119 28 ("cancel-requested?" "main-reporter" "main" "let")}
        {Lisp-Entry "test-cancelled" #f 124 11 124 25 ("test-cancelled" "main-reporter" "main" "let")}}}})
"MySQL-Data-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "MySQL-Data-Source.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.MySQL-Data-Source" #f 37 9 37 56 ("jazz")
      {Lisp-Entry "MySQL-Data-Source" #f 48 7 48 24 ("Data-Source")
        {Lisp-Entry "database" #f 51 12 51 20 ("generate")}
        {Lisp-Entry "dsn" #f 52 12 52 15 ("generate")}
        {Lisp-Entry "external-name" #f 55 16 55 29 ("mysql" "'mysql" "rest")}
        {Lisp-Entry "new-inventory" #f 64 11 64 24 ("password" "database" "MySQL-Inventory" "new" "read-only?" "read-only?:" "connection")}
        {Lisp-Entry "new-connection" #f 73 11 73 25 ("self" "ADO-Connection" "new")}
        {Lisp-Entry "get-connection-string" #f 77 11 77 32 ("password" "username" "either" "database" "parse" "format" "dsn" "if")}
        {Lisp-Entry "get-connection-properties" #f 87 11 87 36 ("password" "password:" "username" "username:" "database" "database:" "list")}
        {Lisp-Entry "present" #f 98 11 98 18 ("database" "get-name" "format" "dsn" "if")}
        {Lisp-Entry "present-detailed" #f 104 11 104 27 ("database" "get-name" "format" ":bulleted" "list")}
        {Lisp-Entry "get-class-presentation" #f 115 16 115 38 ()}
        {Lisp-Entry "property-presentation" #f 119 16 119 37 ("nextmethod" "else" "dsn" "database" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 126 11 126 27 ("nextmethod" "else" "nullable?:" "String-Row" "dsn" "extensions:" "parameters:" "open" "'open" "mode:" "MySQL-Database-Row" "new" "database" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 133 11 133 37 ("password" "username" "database" "dsn" "class-info")}}}})
"MySQL-Database-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Database-Row.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Database-Row" #f 37 9 37 67 ("jazz")
      {Lisp-Entry "MySQL-Database-Row" #f 46 7 46 25 ("String-Row")
        {Lisp-Entry "edit" #f 49 11 49 15 ("self" "get-tree" "expand" "edit-in-cell")}
        {Lisp-Entry "close-editor" #f 54 11 54 23 ("self" "get-tree" "collapse" "nextmethod")}}}})
"MySQL-Datatype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Datatype.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Datatype" #f 37 9 37 63 ("jazz")
      {Lisp-Entry "MySQL-Datatype" #f 46 7 46 21 ("Datatype")
        {Lisp-Entry "get-systypes" #f 49 16 49 28 ("7" "0" "Systype")}}}})
"MySQL-Inventory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Inventory.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Inventory" #f 38 9 38 64 ("jazz")
      {Lisp-Entry "MySQL-Inventory" #f 46 7 46 22 ("Inventory")
        {Lisp-Entry "database" #f 49 8 49 16 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("destroy-mandatory" "get-data-source" "get-database" "database" "set!" "nextmethod" "read-only?" "read-only?:" "password" "pathname" "connection")}
        {Lisp-Entry "destroy" #f 58 11 58 18 ("nextmethod")}
        {Lisp-Entry "get-database" #f 62 18 62 30 ("database")}
        {Lisp-Entry "get-version" #f 71 11 71 22 ("0" "Version" "new" "split" "parse-integer" "map" "minor" "major" "bind" "database" "get-Version" "string" "let")}
        {Lisp-Entry "get-DAO-version" #f 77 18 77 33 ("0" "Version" "new" "split" "parse-integer" "map" "minor" "major" "bind" "engine" "get-Version" "string" "let")}
        {Lisp-Entry "type-connection-string" #f 88 11 88 33 ()}
        {Lisp-Entry "get-tables-views" #f 95 11 95 27 ("self" "new" "table-comment" "get" "table-name" "let" "row" "function" "map" "connection" "load-rows" "table-view-rows" "tie" "cmd" "let*" "MySQL-inventory-table-view" "type")}
        {Lisp-Entry "get-tables" #f 110 11 110 21 ("MySQL-Inventory-Table" "get-tables-views")}
        {Lisp-Entry "get-table" #f 114 11 114 20 ("com-release" "self" "MySQL-Inventory-Table" "new" "DAO.dbSystemObject" "get-Attributes" "mask-bit-set?" "not" "if" "get-Item" "table" "let" "database" "get-TableDefs" "tables" "with-closed" "name")}
        {Lisp-Entry "create-table" #f 123 11 123 23 ("database" "CreateTableDef" "self" "MySQL-Inventory-Table" "new" "name")}
        {Lisp-Entry "append-table" #f 127 11 127 23 ("get-handle" "Append" "database" "get-TableDefs" "tabledefs" "with-closed" "table")}
        {Lisp-Entry "remove-table" #f 132 11 132 23 ("Delete" "database" "get-TableDefs" "tabledefs" "with-closed" "name")}
        {Lisp-Entry "column-supports-property?" #f 138 11 138 36 ("else" "equal?" "test:" "get-name" "member?" "get-datatype" "third" "datatype" "let" "allow-zero-length?" "case" "property" "object")}
        {Lisp-Entry "get-views" #f 150 11 150 20 ("MySQL-Inventory-View" "get-tables-views")}
        {Lisp-Entry "get-view" #f 154 11 154 19 ("rest" "name")}
        {Lisp-Entry "create-view" #f 158 11 158 22 ("views-unsupported" "name")}
        {Lisp-Entry "append-view" #f 162 11 162 22 ("views-unsupported" "view")}
        {Lisp-Entry "remove-view" #f 166 11 166 22 ("views-unsupported" "name")}
        {Lisp-Entry "views-unsupported" #f 170 11 170 28 ("error")}
        {Lisp-Entry "get-relations" #f 179 11 179 24 ("get-Item" "self" "MySQL-Inventory-Relation" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "database" "get-Relations" "relations" "with-closed")}
        {Lisp-Entry "get-relation" #f 186 11 186 23 ("get-Item" "self" "MySQL-Inventory-Relation" "new" "database" "get-Relations" "relations" "with-closed" "name")}
        {Lisp-Entry "create-relation" #f 191 11 191 26 ("database" "CreateRelation" "self" "MySQL-Inventory-Relation" "new" "name")}
        {Lisp-Entry "append-relation" #f 195 11 195 26 ("get-handle" "Append" "database" "get-Relations" "relations" "with-closed" "relation")}
        {Lisp-Entry "remove-relation" #f 200 11 200 26 ("Delete" "database" "get-Relations" "relations" "with-closed" "name")}
        {Lisp-Entry "get-procedures" #f 210 11 210 25 ("get-Item" "self" "MySQL-Inventory-Procedure" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "database" "get-QueryDefs" "procedures" "with-closed")}
        {Lisp-Entry "Procedure-Not-Existant" #f 217 13 217 35 ("#x800A0CC1")}
        {Lisp-Entry "get-procedure" #f 221 11 221 24 ("self" "MySQL-Inventory-Procedure" "new" "when" "Procedure-Not-Existant" "cotry" "if" "procedure" "get-Item" "function" "action" "let*" "database" "get-QueryDefs" "procedures" "with-closed" "error?" "error?:" "name")}
        {Lisp-Entry "create-procedure" #f 234 11 234 27 ("database" "CreateQueryDef" "self" "MySQL-Inventory-Procedure" "new" "name")}
        {Lisp-Entry "append-procedure" #f 238 11 238 27 ("procedure")}
        {Lisp-Entry "remove-procedure" #f 243 11 243 27 ("database" "DeleteQueryDef" "name")}}}})
"MySQL-Inventory-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Inventory-Column.jazz"} 1226584774
    {Lisp-Entry "jazz.database..mysql.MySQL-Inventory-Column" #f 38 9 38 52 ("jazz")
      {Lisp-Entry "MySQL-Inventory-Column" #f 46 7 46 29 ("Inventory-Column")
        {Lisp-Entry "column-name" #f 49 8 49 19 ()}
        {Lisp-Entry "ordinal-position" #f 50 8 50 24 ()}
        {Lisp-Entry "column-default" #f 51 8 51 22 ()}
        {Lisp-Entry "nullable?" #f 52 8 52 17 ()}
        {Lisp-Entry "datatype" #f 53 8 53 16 ()}
        {Lisp-Entry "collation-name" #f 54 8 54 22 ()}
        {Lisp-Entry "privileges" #f 55 8 55 18 ()}
        {Lisp-Entry "column-comment" #f 56 8 56 22 ()}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("destroy-mandatory" "column-comment~self" "privileges~self" "collation-name~self" "MySQL-Datatype" "new-datatype" "datatype~self" "nullable?~self" "column-default~self" "ordinal-position~self" "column-name~self" "set!" "nextmethod" "column-comment" "privileges" "collation-name" "numeric-scale" "numeric-precision" "character-maximum-length" "data-type" "nullable?" "column-default" "ordinal-position" "column-name" "index-column?" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 72 11 72 18 ("nextmethod")}
        {Lisp-Entry "reload" #f 76 11 76 17 ("get-title" "get-Item" "handle" "set!" "parent" "get-handle" "get-Fields" "fields" "with-closed")}
        {Lisp-Entry "get-handle" #f 87 18 87 28 ("handle")}
        {Lisp-Entry "get-default-value" #f 93 11 93 28 ("column-default" "empty-string?" "if")}
        {Lisp-Entry "set-default-value" #f 99 11 99 28 ("either" "handle" "put-DefaultValue" "value")}
        {Lisp-Entry "get-description" #f 104 11 104 26 ("column-comment" "empty-string?" "if")}
        {Lisp-Entry "set-description" #f 110 11 110 26 ("set-property" "value")}
        {Lisp-Entry "get-datatype" #f 115 11 115 23 ("datatype")}
        {Lisp-Entry "get-size" #f 119 11 119 19 ()}
        {Lisp-Entry "set-datatype" #f 123 11 123 23 ("put-Size" "when" "concatenate" "string->symbol" "DAO.DataTypeEnum" "name->value" "handle" "put-Type" "get-size" "size" "get-name" "name" "let" "value")}
        {Lisp-Entry "set-size" #f 132 11 132 19 ("handle" "put-Size" "when" "size")}
        {Lisp-Entry "get-nullable?" #f 138 11 138 24 ("nullable?")}
        {Lisp-Entry "set-nullable?" #f 142 11 142 24 ("not" "handle" "put-Required" "value")}
        {Lisp-Entry "get-validation-rule" #f 147 11 147 30 ("empty-string?" "if" "handle" "get-ValidationRule" "value" "let")}
        {Lisp-Entry "set-validation-rule" #f 156 11 156 30 ("either" "handle" "put-ValidationRule" "value")}
        {Lisp-Entry "get-validation-text" #f 161 11 161 30 ("empty-string?" "if" "handle" "get-ValidationText" "value" "let")}
        {Lisp-Entry "set-validation-text" #f 170 11 170 30 ("either" "handle" "put-ValidationText" "value")}
        {Lisp-Entry "get-allow-zero-length?" #f 175 11 175 33 ("handle" "get-AllowZeroLength" "unspecified")}
        {Lisp-Entry "set-allow-zero-length?" #f 181 11 181 33 ("handle" "put-AllowZeroLength" "value")}
        {Lisp-Entry "get-display-format" #f 186 11 186 29 ("get-property")}
        {Lisp-Entry "set-display-format" #f 192 11 192 29 ("set-property" "value")}
        {Lisp-Entry "get-ordinal-position" #f 197 11 197 31 ("handle" "get-OrdinalPosition" "ordinal-position")}
        {Lisp-Entry "set-ordinal-position" #f 203 11 203 31 ("handle" "put-OrdinalPosition" "value")}
        {Lisp-Entry "get-auto-increment?" #f 208 11 208 30 ("DAO.dbAutoIncrField" "get-attributes" "mask-bit-set?" "unspecified")}
        {Lisp-Entry "set-auto-increment?" #f 214 11 214 30 ("DAO.dbAutoIncrField" "get-attributes" "mask-bit-set" "set-attributes" "value")}
        {Lisp-Entry "get-title" #f 219 11 219 20 ("column-name")}
        {Lisp-Entry "get-fixed?" #f 223 11 223 21 ("DAO.dbFixedField" "get-attributes" "mask-bit-set?" "unspecified")}
        {Lisp-Entry "get-indexes" #f 229 11 229 22 ("handle" "get-Indexes")}
        {Lisp-Entry "get-order" #f 235 11 235 20 ("ascending" "'ascending" "descending" "'descending" "DAO.dbDescending" "get-attributes" "mask-bit-set?" "if")}
        {Lisp-Entry "get-attributes" #f 248 11 248 25 ("handle" "get-Attributes")}
        {Lisp-Entry "set-attributes" #f 254 11 254 25 ("handle" "put-Attributes" "value")}
        {Lisp-Entry "Property-Inexistant" #f 259 12 259 31 ("#x800A0CC6")}
        {Lisp-Entry "Object-Already-Existant" #f 263 12 263 35 ("#x800A0D27")}
        {Lisp-Entry "Element-Not-Found" #f 267 12 267 29 ("#x800A0CC1")}
        {Lisp-Entry "get-property" #f 271 11 271 23 ("get-Value" "null?" "if" "Property-Inexistant" "get-Item" "cotry" "property" "handle" "get-Properties" "properties" "with-closed" "property-name")}
        {Lisp-Entry "set-property" #f 281 11 281 23 ("Element-Not-Found" "Delete" "set-existant-property" "Object-Already-Existant" "Append" "cotry" "DAO.dbText" "CreateProperty" "property" "if" "handle" "get-Properties" "properties" "with-closed" "value" "property-name")}
        {Lisp-Entry "set-existant-property" #f 292 11 292 32 ("put-Value" "when" "Property-Inexistant" "get-Item" "cotry" "property" "handle" "get-Properties" "properties" "with-closed" "value" "property-name")}}}})
"MySQL-Inventory-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Inventory-Constraint.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Inventory-Constraint" #f 37 9 37 75 ("jazz")
      {Lisp-Entry "MySQL-Inventory-Constraint" #f 45 7 45 33 ("Inventory-Constraint")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 67 18 67 28 ("handle")}}}})
"MySQL-Inventory-Index"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Inventory-Index.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Inventory-Index" #f 37 9 37 70 ("jazz")
      {Lisp-Entry "MySQL-Inventory-Index" #f 45 7 45 28 ("Inventory-Index")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "fields" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 58 11 58 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 68 18 68 28 ("handle")}
        {Lisp-Entry "get-title" #f 72 11 72 20 ("handle" "get-Name")}
        {Lisp-Entry "get-fields" #f 76 11 76 21 ("get-effective-fields" "fields" "either")}
        {Lisp-Entry "get-effective-fields" #f 80 11 80 31 ("DAO._Field" "get-Item" "item" "self" "inventory" "Access-Inventory-Column" "new" "collect" "get-Count" "below" "0" "from" "n" "for" "loop" "DAO.IndexFields" "coquery" "index-fields" "handle" "get-Fields" "fields" "with-closed")}
        {Lisp-Entry "set-fields/orders" #f 88 18 88 35 ("Append" "DAO.IndexFields" "coquery" "index-fields" "get-Fields" "fields" "DAO.dbDescending" "put-Attributes" "descending" "'descending" "eq?" "when" "handle" "CreateField" "field" "with-closed" "cadr" "field-order" "car" "field-name" "let" "field-values" "function" "for-each" "value")}
        {Lisp-Entry "get-unique?" #f 101 11 101 22 ("handle" "get-Unique")}
        {Lisp-Entry "set-unique?" #f 105 18 105 29 ("handle" "put-Unique" "value")}
        {Lisp-Entry "get-required?" #f 109 11 109 24 ("handle" "get-Required")}
        {Lisp-Entry "get-ignore-nulls?" #f 113 11 113 28 ("handle" "get-IgnoreNulls")}}}})
"MySQL-Inventory-Primary-Key"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Inventory-Primary-Key.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Inventory-Primary-Key" #f 37 9 37 76 ("jazz")
      {Lisp-Entry "MySQL-Inventory-Primary-Key" #f 45 7 45 34 ("Inventory-Primary-Key")
        {Lisp-Entry "index" #f 48 8 48 13 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "index~self" "set!" "nextmethod" "index" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "index" "close")}
        {Lisp-Entry "get-index" #f 67 17 67 26 ("index")}
        {Lisp-Entry "get-title" #f 71 11 71 20 ("index" "get-title")}
        {Lisp-Entry "get-fields" #f 75 11 75 21 ("index" "get-fields")}}}})
"MySQL-Inventory-Procedure"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Inventory-Procedure.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Inventory-Procedure" #f 37 9 37 74 ("jazz")
      {Lisp-Entry "MySQL-Inventory-Procedure" #f 45 7 45 32 ("Inventory-Procedure")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-title" #f 67 11 67 20 ("handle" "get-Name")}
        {Lisp-Entry "get-text" #f 71 11 71 19 ("handle" "get-SQL")}
        {Lisp-Entry "set-text" #f 75 18 75 26 ("handle" "put-SQL" "value")}}}})
"MySQL-Inventory-Relation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Inventory-Relation.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Inventory-Relation" #f 37 9 37 73 ("jazz")
      {Lisp-Entry "MySQL-Inventory-Relation" #f 45 7 45 31 ("Inventory-Relation")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 67 18 67 28 ("handle")}
        {Lisp-Entry "get-title" #f 71 18 71 27 ("handle" "get-Name")}
        {Lisp-Entry "get-primary-table" #f 75 11 75 28 ("handle" "get-Table")}
        {Lisp-Entry "set-primary-table" #f 79 11 79 28 ("handle" "put-Table" "value")}
        {Lisp-Entry "get-primary-field-names" #f 83 11 83 34 ("get-Count" "0" "naturals" "get-Name" "get-Item" "field" "n" "function" "map" "handle" "get-Fields" "fields" "with-closed")}
        {Lisp-Entry "set-primary-field-names" #f 91 11 91 34 ("Append" "CreateField" "field" "field-name" "function" "for-each" "handle" "get-Fields" "fields" "with-closed" "values")}
        {Lisp-Entry "get-foreign-table" #f 99 11 99 28 ("handle" "get-ForeignTable")}
        {Lisp-Entry "set-foreign-table" #f 103 11 103 28 ("handle" "put-ForeignTable" "value")}
        {Lisp-Entry "get-foreign-field-names" #f 107 11 107 34 ("get-Count" "0" "naturals" "get-ForeignName" "get-Item" "field" "n" "function" "map" "handle" "get-Fields" "fields" "with-closed")}
        {Lisp-Entry "set-foreign-field-names" #f 115 11 115 34 ("length" "0" "naturals" "put-ForeignName" "get-Item" "field" "i" "field-name" "function" "for-each" "handle" "get-Fields" "fields" "with-closed" "values")}
        {Lisp-Entry "get-unique?" #f 124 11 124 22 ("DAO.dbRelationUnique" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "set-unique?" #f 128 18 128 29 ("DAO.dbRelationUnique" "get-attribute" "mask-bit-set" "set-attribute" "value")}
        {Lisp-Entry "get-dont-enforce?" #f 132 11 132 28 ("DAO.dbRelationDontEnforce" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "get-inherited?" #f 136 11 136 25 ("DAO.dbRelationInherited" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "get-update-cascade?" #f 140 11 140 30 ("DAO.dbRelationUpdateCascade" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "set-update-cascade?" #f 144 18 144 37 ("DAO.dbRelationUpdateCascade" "get-attribute" "mask-bit-set" "set-attribute" "value")}
        {Lisp-Entry "get-delete-cascade?" #f 148 11 148 30 ("DAO.dbRelationDeleteCascade" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "set-delete-cascade?" #f 152 18 152 37 ("DAO.dbRelationDeleteCascade" "get-attribute" "mask-bit-set" "set-attribute" "value")}
        {Lisp-Entry "get-left?" #f 156 11 156 20 ("DAO.dbRelationLeft" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "set-left?" #f 160 18 160 27 ("DAO.dbRelationLeft" "get-attribute" "mask-bit-set" "set-attribute" "value")}
        {Lisp-Entry "get-right?" #f 164 11 164 21 ("DAO.dbRelationRight" "get-attribute" "mask-bit-set?")}
        {Lisp-Entry "set-right?" #f 168 18 168 28 ("DAO.dbRelationRight" "get-attribute" "mask-bit-set" "set-attribute" "value")}
        {Lisp-Entry "get-attribute" #f 172 11 172 24 ("handle" "get-Attributes")}
        {Lisp-Entry "set-attribute" #f 176 11 176 24 ("handle" "put-Attributes" "value")}}}})
"MySQL-Inventory-Table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Inventory-Table.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Inventory-Table" #f 38 9 38 70 ("jazz")
      {Lisp-Entry "MySQL-Inventory-Table" #f 46 7 46 28 ("Inventory-Table")
        {Lisp-Entry "table-name" #f 49 8 49 18 ()}
        {Lisp-Entry "table-comment" #f 50 8 50 21 ()}
        {Lisp-Entry "indexes" #f 51 8 51 15 ("not-loaded" "'not-loaded")}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("destroy-mandatory" "table-comment~self" "table-name~self" "set!" "nextmethod" "table-comment" "table-name" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 61 11 61 18 ("nextmethod")}
        {Lisp-Entry "get-owner" #f 70 11 70 20 ()}
        {Lisp-Entry "get-handle" #f 73 18 73 28 ()}
        {Lisp-Entry "get-title" #f 77 11 77 20 ("table-name")}
        {Lisp-Entry "get-linked?" #f 81 11 81 22 ("handle" "get-SourceTableName" "empty-string?" "not")}
        {Lisp-Entry "get-connect" #f 86 11 86 22 ("handle" "get-Connect")}
        {Lisp-Entry "set-connect" #f 91 11 91 22 ("handle" "put-Connect" "connect")}
        {Lisp-Entry "get-source-table-name" #f 95 11 95 32 ("handle" "get-SourceTableName")}
        {Lisp-Entry "set-source-table-name" #f 100 11 100 32 ("handle" "put-SourceTableName" "source-table-name")}
        {Lisp-Entry "get-validation-rule" #f 104 11 104 30 ("empty-string?" "if" "handle" "get-ValidationRule" "value" "let")}
        {Lisp-Entry "set-validation-rule" #f 112 11 112 30 ("either" "handle" "put-ValidationRule" "value")}
        {Lisp-Entry "get-validation-text" #f 116 11 116 30 ("empty-string?" "if" "handle" "get-ValidationText" "value" "let")}
        {Lisp-Entry "set-validation-text" #f 124 11 124 30 ("either" "handle" "put-ValidationText" "value")}
        {Lisp-Entry "get-description" #f 128 11 128 26 ("table-comment")}
        {Lisp-Entry "set-description" #f 132 11 132 26 ("set-property" "value")}
        {Lisp-Entry "get-primary-key" #f 141 18 141 33 ("get-output" "car" "com-release" "MySQL-Inventory-Index" "self" "inventory" "MySQL-Inventory-Primary-Key" "put" "get-Primary" "if" "get-Item" "index" "get-Count" "below" "0" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "handle" "get-Indexes" "indexes" "with-closed")}
        {Lisp-Entry "create-primary-key" #f 153 18 153 36 ("MySQL-Inventory-Index" "self" "inventory" "MySQL-Inventory-Primary-Key" "new" "Append" "DAO.IndexFields" "coquery" "index-fields" "get-Fields" "fields" "DAO.dbDescending" "put-Attributes" "descending" "'descending" "eq?" "when" "CreateField" "with-closed" "order" "field" "bind" "field/order" "function" "for-each" "put-Primary" "handle" "CreateIndex" "primary-index" "let" "fields/orders" "name")}
        {Lisp-Entry "remove-primary-key" #f 168 11 168 29 ("Delete" "handle" "get-Indexes" "indexes-handle" "with-closed" "get-index" "index" "let" "name")}
        {Lisp-Entry "append-primary-key" #f 174 11 174 29 ("get-index" "get-handle" "Append" "handle" "get-Indexes" "indexes-handle" "with-closed" "primary-key")}
        {Lisp-Entry "get-columns" #f 184 11 184 22 ("self" "MySQL-Inventory-Column" "new" "column-comment" "privileges" "collation-name" "numeric-scale" "numeric-precision" "character-maximum-length" "data-type" "nullable?" "column-default" "ordinal-position" "get" "column-name" "let" "row" "function" "map" "get-connection" "load-rows" "column-rows" "tie" "cmd" "inventory" "get-database" "database" "let*")}
        {Lisp-Entry "get-column" #f 204 11 204 21 ("get-Item" "self" "inventory" "MySQL-Inventory-Column" "new" "handle" "get-Fields" "fields" "with-closed" "name")}
        {Lisp-Entry "create-column" #f 210 11 210 24 ("self" "inventory" "MySQL-Inventory-Column" "new" "name")}
        {Lisp-Entry "append-column" #f 214 11 214 24 ("get-handle" "Append" "handle" "get-Fields" "fields" "with-closed" "column")}
        {Lisp-Entry "remove-column" #f 219 11 219 24 ("Delete" "handle" "get-Fields" "fields" "with-closed" "name")}
        {Lisp-Entry "indexes-loaded?" #f 229 11 229 26 ("not-loaded" "'not-loaded" "indexes" "neq?")}
        {Lisp-Entry "load-indexes" #f 233 11 233 23 ("get-effective-indexes" "indexes" "set!" "indexes-loaded?" "unless")}
        {Lisp-Entry "get-indexes" #f 238 11 238 22 ("indexes" "load-indexes")}
        {Lisp-Entry "get-effective-indexes" #f 244 11 244 32 ("get-output" "com-release" "self" "inventory" "MySQL-Inventory-Index" "put" "get-Primary" "get-Foreign" "not" "and" "if" "get-Item" "index" "get-Count" "below" "0" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "handle" "get-Indexes" "indexes" "with-closed")}
        {Lisp-Entry "get-index" #f 256 11 256 20 ("get-indexes" "get-title" "=" "index" "function" "find-if" "name")}
        {Lisp-Entry "create-index" #f 263 11 263 23 ("handle" "CreateIndex" "self" "inventory" "MySQL-Inventory-Index" "new" "name")}
        {Lisp-Entry "append-index" #f 267 11 267 23 ("cons" "indexes" "set!" "get-handle" "Append" "handle" "get-Indexes" "indexes-handle" "with-closed" "load-indexes" "new-index")}
        {Lisp-Entry "remove-index" #f 274 11 274 23 ("remove!" "indexes" "set!" "Delete" "handle" "get-Indexes" "indexes-handle" "with-closed" "get-index" "index" "let" "name")}
        {Lisp-Entry "get-triggers" #f 286 11 286 23 ()}
        {Lisp-Entry "get-trigger" #f 290 11 290 22 ("rest" "name")}
        {Lisp-Entry "triggers-unsupported" #f 294 11 294 31 ("error")}
        {Lisp-Entry "create-trigger" #f 298 11 298 25 ("triggers-unsupported" "name")}
        {Lisp-Entry "append-trigger" #f 302 11 302 25 ("triggers-unsupported" "trigger")}
        {Lisp-Entry "delete-trigger" #f 306 11 306 25 ("triggers-unsupported" "name")}
        {Lisp-Entry "get-constraints" #f 315 11 315 26 ()}
        {Lisp-Entry "get-constraint" #f 319 11 319 25 ("rest" "name")}
        {Lisp-Entry "constraints-unsupported" #f 323 11 323 34 ("error")}
        {Lisp-Entry "create-constraint" #f 327 11 327 28 ("constraints-unsupported" "name")}
        {Lisp-Entry "append-constraint" #f 331 11 331 28 ("constraints-unsupported" "constraint")}
        {Lisp-Entry "delete-constraint" #f 335 11 335 28 ("constraints-unsupported" "name")}
        {Lisp-Entry "Property-Inexistant" #f 344 12 344 31 ("#x800A0CC6")}
        {Lisp-Entry "Object-Already-Existant" #f 348 12 348 35 ("#x800A0D27")}
        {Lisp-Entry "Element-Not-Found" #f 352 12 352 29 ("#x800A0CC1")}
        {Lisp-Entry "get-property" #f 356 11 356 23 ("get-Value" "null?" "if" "Property-Inexistant" "get-Item" "cotry" "property" "handle" "get-Properties" "properties" "with-closed" "property-name")}
        {Lisp-Entry "set-property" #f 364 11 364 23 ("Element-Not-Found" "Delete" "set-existant-property" "Object-Already-Existant" "Append" "cotry" "DAO.dbText" "CreateProperty" "property" "if" "handle" "get-Properties" "properties" "with-closed" "value" "property-name")}
        {Lisp-Entry "set-existant-property" #f 374 11 374 32 ("put-Value" "when" "Property-Inexistant" "get-Item" "cotry" "property" "handle" "get-Properties" "properties" "with-closed" "value" "property-name")}}}})
"MySQL-Inventory-Updater"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Inventory-Updater.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Inventory-Updater" #f 37 9 37 72 ("jazz")
      {Lisp-Entry "MySQL-Inventory-Updater" #f 45 7 45 30 ("Inventory-Updater")}}})
"MySQL-Inventory-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Inventory-View.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Inventory-View" #f 38 9 38 69 ("jazz")
      {Lisp-Entry "MySQL-Inventory-View" #f 47 7 47 27 ("Inventory-View")
        {Lisp-Entry "view-name" #f 50 8 50 17 ()}
        {Lisp-Entry "view-comment" #f 51 8 51 20 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("destroy-mandatory" "view-comment~self" "view-name~self" "set!" "nextmethod" "view-comment" "view-name" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 61 11 61 18 ("nextmethod")}
        {Lisp-Entry "get-handle" #f 70 18 70 28 ("handle")}
        {Lisp-Entry "get-title" #f 75 11 75 20 ("view-name")}
        {Lisp-Entry "get-text" #f 79 11 79 19 ("get" "get-connection" "load-rows" "first" "row" "tie" "cmd" "inventory" "get-database" "database" "let*")}
        {Lisp-Entry "set-text" #f 86 18 86 26 ("handle" "put-Text" "value")}}}})
"MySQL-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Provider.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Provider" #f 37 9 37 63 ("jazz")
      {Lisp-Entry "MySQL-Provider" #f 45 7 45 21 ("Provider")
        {Lisp-Entry "external-name" #f 48 11 48 24 ("mysql" "'mysql")}
        {Lisp-Entry "get-datatype" #f 57 11 57 23 ("MySQL-Datatype")}
        {Lisp-Entry "present" #f 66 11 66 18 ()}
        {Lisp-Entry "browser-class" #f 75 11 75 24 ("MySQL-Widget")}
        {Lisp-Entry "new-updater" #f 84 11 84 22 ("MySQL-Inventory-Updater" "new" "connection")}}}})
"MySQL-Widget"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "inventory" "MySQL-Widget.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.inventory.MySQL-Widget" #f 37 9 37 61 ("jazz")
      {Lisp-Entry "MySQL-Widget" #f 47 7 47 19 ("password" "62" "password-border" "56" "65" "password-label" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "username" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "style:" "edge" "border-type:" "21" "203" "38" "username-border" "59" "41" "username-label" "extensions:" "parameters:" "file" "protocol:" "23" "301" "67" "database-browser" "16" "57" "5" "0" "Point" "position:" "title:" "database-label" "name:" "113" "376" "Dimension" "size:" "Data-Source-Widget")
        {Lisp-Entry "get-data-source" #f 71 11 71 26 ("password" "'password" "password:" "username" "'username" "get-string-content" "username:" "database-browser" "'database-browser" "locate" "get-moniker" "database:" "MySQL-Data-Source" "new")}
        {Lisp-Entry "set-data-source" #f 78 11 78 26 ("get-password" "password" "'password" "get-username" "username" "'username" "set-string-content" "get-database" "database-browser" "'database-browser" "locate" "set-moniker" "source")}
        {Lisp-Entry "setup-username/password-mode" #f 84 11 84 39 ("select-all" "username" "'username" "acquire-focus" "database-browser" "'database-browser" "locate" "set-enabled?")}
        {Lisp-Entry "set-enabled?" #f 95 11 95 23 ("invalidate-view" "password" "'password" "username" "'username" "database-browser" "'database-browser" "locate" "set-enabled?" "enabled?" "set!" "flag")}
        {Lisp-Entry "get-tab-stops" #f 108 11 108 24 ("password" "'password" "username" "'username" "database-browser" "'database-browser" "locate" "get-text" "list")}
        {Lisp-Entry "set-default-focus" #f 115 11 115 28 ("database-browser" "'database-browser" "locate" "get-text" "set-focus")}
        {Lisp-Entry "on-return-press" #f 119 11 119 26 ("self" "invoke" "return-press-handler" "when" "evt")}
        {Lisp-Entry "validate-content" #f 129 11 129 27 ("parse" "format" "exists?" "throw-cancel" "focus-body" "yes:" "message-box" "unless" "get-moniker" "moniker" "validate-content" "database-browser" "'database-browser" "locate" "browser" "let")}}}})
"Name-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Name-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Name-Domain" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Name-Domain" #f 45 7 45 18 ("predicate?" "limit" "19" "height" "100" "initialize" "width" "nullable?" "Domain")
        {Lisp-Entry "validate-value" #f 60 11 60 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "string?" "symbol?" "not" "and" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 70 11 70 18 ("->string" "value")}
        {Lisp-Entry "setup-entry" #f 79 11 79 22 ("self" "domain:" "height" "width" "Dimension" "size:" "parent:" "Name-Entry" "new" "client" "view")}}}})
"Name-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "entry" "Name-Entry.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.entry.Name-Entry" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Name-Entry" #f 48 7 48 17 ("Text-Entry")
        {Lisp-Entry "validate" #f 56 11 56 19 ("else" "format-plural" "format" "tie" "string-length" ">" "and" "french:" "english:" "Locales" "message:" "Property-Violation" "new" "get-nullable?" "if" "empty-string?" "cond" "get-predicate?" "predicate?" "get-limit" "limit" "text" "'text" "locate" "get-string-content" "content" "let" "domain")}
        {Lisp-Entry "get-value" #f 78 11 78 20 ("nil" "empty-string?" "if" "text" "'text" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-value" #f 85 11 85 20 ("nil?" "if" "text" "'text" "locate" "set-string-content" "value")}}}})
"Navigable-Results"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Navigable-Results.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Navigable-Results" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Navigable-Results" #f 48 7 48 24 ("on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "row" "selection-mode:" "results" "header" "fill" "content" "flat?:" "hscroll?:" "vscroll?:" "center" "scroller" "on-clear-results" "clear" "0" "4" "on-edit-selection" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "edit" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "finish" #f 66 11 66 17 ("get-tree" "invalidate-columns" "nextmethod" "rest")}
        {Lisp-Entry "get-tools-view" #f 76 11 76 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "host-activated" #f 80 11 80 25 ("self" "set-active-results" "get-application" "appl" "let")}
        {Lisp-Entry "get-tree" #f 90 18 90 26 ("results" "'results" "locate")}
        {Lisp-Entry "on-double-click" #f 99 11 99 26 ("edit-selection" "results" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-return-press" #f 106 11 106 26 ("edit-selection" "evt")}
        {Lisp-Entry "on-edit-selection" #f 110 11 110 28 ("edit-selection" "evt")}
        {Lisp-Entry "on-clear-results" #f 114 11 114 27 ("clear-results" "evt")}
        {Lisp-Entry "clear-results" #f 123 26 123 39 ("get-tree" "remove-every-row")}
        {Lisp-Entry "edit-next" #f 132 18 132 27 ("edit-selection" "update-view" "list" "set-selection" "begin" "not" "if" "next-editable" "rank" "last" "not-null?" "and" "current" "get-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "edit-previous" #f 147 18 147 31 ("edit-selection" "list" "set-selection" "begin" "not" "if" "previous-editable" "rank" "car" "not-null?" "and" "current" "get-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "edit-current" #f 161 18 161 30 ("edit-selection")}
        {Lisp-Entry "edit-selection" #f 165 29 165 43 ("forward?")}
        {Lisp-Entry "editable-row?" #f 169 29 169 42 ("user-data")}
        {Lisp-Entry "next-editable" #f 173 11 173 24 ("increase!" "continuation-return" "get-user-data" "editable-row?" "get-row" "row" "let" "<" "while" "return" "function" "continuation-capture" "0" "1" "+" "if" "rank" "get-visible-count" "count" "get-tree" "tree" "let*" "current")}
        {Lisp-Entry "previous-editable" #f 187 11 187 28 ("decrease!" "continuation-return" "get-user-data" "editable-row?" "get-row" "row" "let" "0" ">=" "while" "return" "function" "continuation-capture" "1" "-" "if" "rank" "get-visible-count" "count" "get-tree" "tree" "let*" "current")}
        {Lisp-Entry "select-results" #f 201 18 201 32 ("acquire-focus" "get-tree" "tree" "let" "get-application" "get-active?" "when")}
        {Lisp-Entry "select-first" #f 207 18 207 30 ("list" "set-selection" "bell" "not" "if" "next-editable" "rank" "get-tree" "tree" "let")}}}})
"Navigation-Branches"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "navigation" "Navigation-Branches.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.navigation.Navigation-Branches" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Navigation-Branches" #f 46 7 46 26 ("Branches-Viewer")
        {Lisp-Entry "external-name" #f 49 16 49 29 ("navigation-branches" "'navigation-branches" "rest")}
        {Lisp-Entry "host-title" #f 58 16 58 26 ()}}}})
"Navigator-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Navigator-Workspace.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Navigator-Workspace" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Navigator-Workspace" #f 46 7 46 26 ("second" "Console-Manager" "Navigation-Branches" "model-name:" "selection" "5" "Rect" "insets:" "21.500" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 61 11 61 23 ("navigator" "'navigator")}}}})
"NewFile-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "NewFile-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.NewFile-Request" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "NewFile-Request" #f 49 7 49 22 ("title:" "ok" "on-content-change" "content-change-handler:" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "Label" "Font" "font:" "Default" "Text-Style" "default-style:" "show-unfocused-selection?:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "filename" "content" "vscroll?:" "hscroll?:" "Entry-Border" "Color" "border-color:" "solid" "border-type:" "22" "288" "3" "Rect" "layout-insets:" "fill" "layout-type:" "0" "4" "Dimension" "size:" "buttonbar" "name:" "Pathname-Request")
        {Lisp-Entry "host-title" #f 64 16 64 26 ()}
        {Lisp-Entry "initial-filename" #f 68 12 68 28 ()}
        {Lisp-Entry "default-extension" #f 69 12 69 29 ()}
        {Lisp-Entry "finish" #f 72 11 72 17 ("select-all" "set-string-content" "1" "cardinality" "-" "0" "subseq" "concatenate" "ends-with?" "default-extension" "and" "if" "content" "filename" "'filename" "locate" "text" "let" "initial-filename" "when" "nextmethod" "rest")}
        {Lisp-Entry "focus-default" #f 84 11 84 24 ("filename" "'filename" "locate" "acquire-focus")}
        {Lisp-Entry "update" #f 93 11 93 17 ("update-buttons" "update-filename" "update-content" "update-history" "update-hierarchy")}
        {Lisp-Entry "update-content" #f 101 11 101 25 ("for-each" "remove-every-row" "function" "with-update-locked" "add-pathname" "pathname" "add" "define" "get-tree" "tree" "files" "leaves?:" "nodes?:" "directory" "get-content" "directories" "let")}
        {Lisp-Entry "update-filename" #f 115 11 115 26 ("filename" "'filename" "locate" "set-string-content")}
        {Lisp-Entry "update-buttons" #f 119 11 119 25 ("get-string-content" "empty-string?" "not" "ok" "'ok" "set-enabled?" "filename" "'filename" "locate" "text" "let" "nextmethod")}
        {Lisp-Entry "validate-dialog" #f 130 11 130 26 ("throw-cancel" "cancel" "no" "memq?" "confirmation" "'confirmation" "type:" "get-name" "format" "message-box" "code" "exists?" "when" "get-newfile" "newfile" "let")}
        {Lisp-Entry "get-modal-result" #f 139 11 139 27 ("get-newfile" "directory" "set-current-directory")}
        {Lisp-Entry "get-newfile" #f 144 11 144 22 ("directory" "new-file" "anchorize" "concatenate" "search" "not" "default-extension" "and" "if" "filename" "'filename" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "selection-change" #f 158 11 158 27 ("update-buttons" "get-name" "filename" "'filename" "locate" "set-string-content" "file?" "when" "selected-pathname" "pathname" "let")}
        {Lisp-Entry "on-content-change" #f 165 11 165 28 ("update-buttons" "evt")}
        {Lisp-Entry "default-action" #f 169 11 169 25 ("get-modal-result" "get-host" "end-modal" "ok-enabled?" "down" "directory?" "cond" "selected-pathname" "pathname" "let")}}}})
"Note-List-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "database" "Note-List-Row.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.database.Note-List-Row" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Note-List-Row" #f 46 7 46 20 ("List-Row")
        {Lisp-Entry "get-subrow-class" #f 49 11 49 27 ("Note-Row")}}}})
"Note-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "database" "Note-Row.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.database.Note-Row" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Note-Row" #f 46 7 46 15 ("Formatted-Text-Row")
        {Lisp-Entry "present" #f 54 11 54 18 ("format" "car" "text" "date" "bind" "null?" "if" "value")}
        {Lisp-Entry "new-editor" #f 66 11 66 21 ("0" "left-padding:" "editor-class" "new")}
        {Lisp-Entry "editor-class" #f 71 11 71 23 ("Row-Formatted-Text-View")}}}})
"Number-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Number-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Number-Domain" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Number-Domain" #f 45 7 45 20 ("19" "height" "100" "initialize" "width" "nullable?" "Domain")
        {Lisp-Entry "validate-value" #f 58 11 58 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "number?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 68 11 68 18 ("->string" "value")}
        {Lisp-Entry "setup-entry" #f 77 11 77 22 ("self" "domain:" "height" "width" "Dimension" "size:" "parent:" "Number-Entry" "new" "client" "view")}}}})
"Number-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "entry" "Number-Entry.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.entry.Number-Entry" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Number-Entry" #f 48 7 48 19 ("Text-Entry")
        {Lisp-Entry "validate" #f 56 11 56 19 ("french:" "english:" "Locales" "message:" "Property-Violation" "new" "numeric?" "empty-string?" "if" "text" "'text" "locate" "get-string-content" "content" "let" "nextmethod" "or" "domain")}
        {Lisp-Entry "get-value" #f 70 11 70 20 ("string->number" "nil" "empty-string?" "if" "text" "'text" "locate" "get-string-content" "content" "let")}
        {Lisp-Entry "set-value" #f 77 11 77 20 ("number->string" "nil?" "if" "text" "'text" "locate" "set-string-content" "value")}}}})
"Number-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Number-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Number-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Number-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-bit" "test-number" "invoke")}
        {Lisp-Entry "test-number" #f 62 11 62 22 ("error?" "begin" "min" "8" "7" "max" "6" "<" "/=" "not" "24" "12" "0.25" "/" "60" "*" "4" "6.8" "3.2" "10" "-3.5" "3.5" "-2" "2" "-" "3" "1" "5" "+" "0" "=" "rpt" "validate")}
        {Lisp-Entry "test-bit" #f 121 11 121 19 ("7" "bitwise-ior" "2" "14" "6" "0" "4" "1" "5" "bitwise-and" "=" "rpt" "validate")}}}})
"Object-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Object-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Object-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Object-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "X" #f 155 7 155 8 ("Object")
          {Lisp-Entry "foo" #f 157 29 157 32 ("10")}
          {Lisp-Entry "goo" #f 158 14 158 17 ("15")}
          {Lisp-Entry "bar" #f 160 8 160 11 ("5")}
          {Lisp-Entry "toto" #f 162 18 162 22 ("bar")}
          {Lisp-Entry "tutu" #f 165 18 165 22 ("bar" "*" "x")}
          {Lisp-Entry "tata" #f 168 18 168 22 ("X2")}
          {Lisp-Entry "yuyu" #f 171 18 171 22 ("bar~self" "list" "11" "bar" "let")}
          {Lisp-Entry "yiyi" #f 175 18 175 22 ("list" "7" "bar~self" "12" "set!" "11" "bar" "let")}}
        {Lisp-Entry "Y" #f 182 7 182 8 ("X")
          {Lisp-Entry "foo" #f 184 21 184 24 ("20")}
          {Lisp-Entry "bah" #f 186 26 186 29 ("x")}}
        {Lisp-Entry "Z" #f 190 7 190 8 ("Y")
          {Lisp-Entry "bah" #f 192 11 192 14 ("+" "x")}}
        {Lisp-Entry "W" #f 196 7 196 8 ("X")
          {Lisp-Entry "hoo" #f 198 8 198 11 ("0" "Cell" "new")}}
        {Lisp-Entry "test-part1" #f 201 9 201 19 ("10" "X" "get-foo" "=" "get-goo" "error?" "begin" "Z" "Y" "W" "new" "get-hoo" "neq?" "rpt" "validate")}
        {Lisp-Entry "X1" #f 215 19 215 21 ()}
        {Lisp-Entry "X2" #f 216 19 216 21 ()}
        {Lisp-Entry "call-bah" #f 219 9 219 17 ("bah" "x" "obj")}
        {Lisp-Entry "call-bah2" #f 222 9 222 18 ("bah" "x" "obj")}
        {Lisp-Entry "test-part2" #f 226 9 226 19 ("error?" "begin" "call-bah2" "Z" "Y" "call-bah" "12" "yiyi" "11" "yuyu" "equal?" "28" "4" "tata" "tutu" "toto" "7" "6" "set-bar" "5" "get-bar" "10" "get-foo" "=" "rpt" "validate" "X2" "X" "new" "X1" "set!")}
        {Lisp-Entry "test-part3" #f 258 9 258 19 ("4" "3" "1" "J" "public" "Object" "extends" "class" "v" "virtual" "protected" "+" "apply" "rest" "f" "method" "aa" "5" "initialize" "meta" "slot" "15" "6" "9" "mak" "bar" "2" "I" "new" "foo" "list" "=" "rpt" "validate" "7" "mm" "set!")}}}})
"Oracle-Data-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "oracle" "Oracle-Data-Source.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.oracle.inventory.Oracle-Data-Source" #f 37 9 37 68 ("jazz")
      {Lisp-Entry "Oracle-Data-Source" #f 45 7 45 25 ("ADO-Data-Source")
        {Lisp-Entry "external-name" #f 48 16 48 29 ("oracle" "'oracle" "rest")}
        {Lisp-Entry "get-connection-string" #f 57 11 57 32 ("password" "username" "if" "format" "dsn" "when")}
        {Lisp-Entry "present" #f 70 11 70 18 ("dsn" "format")}
        {Lisp-Entry "get-class-presentation" #f 79 16 79 38 ()}}}})
"Oracle-Datatype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "oracle" "inventory" "Oracle-Datatype.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.oracle.inventory.Oracle-Datatype" #f 37 9 37 65 ("jazz")
      {Lisp-Entry "Oracle-Datatype" #f 45 7 45 22 ("ADO-Datatype")}}})
"Oracle-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "oracle" "inventory" "Oracle-Provider.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.oracle.inventory.Oracle-Provider" #f 37 9 37 65 ("jazz")
      {Lisp-Entry "Oracle-Provider" #f 45 7 45 22 ("Provider")
        {Lisp-Entry "external-name" #f 48 11 48 24 ("oracle" "'oracle")}
        {Lisp-Entry "get-datatype" #f 57 11 57 23 ("Oracle-Datatype")}
        {Lisp-Entry "present" #f 66 11 66 18 ()}}}})
"Outline"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "outline" "Outline.jazz"} 1226584782
    {Lisp-Entry "jazz.library.outline.Outline" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Outline" #f 43 7 43 14 ("Object")
        {Lisp-Entry "row-spacing" #f 46 8 46 19 ("generate")}
        {Lisp-Entry "root-row" #f 47 8 47 16 ("generate")}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("root-row~self" "row-spacing~self" "set!" "nextmethod" "root-row" "row-spacing")}
        {Lisp-Entry "first-row" #f 56 18 56 27 ("root-row" "get-sons" "first")}
        {Lisp-Entry "get-row" #f 65 26 65 33 ("1" "+" "root-row" "get-row-from" "n")}
        {Lisp-Entry "get-row-from" #f 69 21 69 33 ("decrease!" "get-next" "set!" "0" ">" "and" "while" "n" "row")}
        {Lisp-Entry "call-with-v->row" #f 76 26 76 42 ("proc" "v")}}}})
"Outline-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "outline" "Outline-Row.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.outline.Outline-Row" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Outline-Row" #f 49 7 49 18 ("Drawing")
        {Lisp-Entry "father" #f 52 22 52 28 ("set-father" "get-father")}
        {Lisp-Entry "sons" #f 53 22 53 26 ("set-sons" "get-sons" "0" "Axis" "new")}
        {Lisp-Entry "level" #f 54 22 54 27 ("set-level" "get-level")}
        {Lisp-Entry "state" #f 55 22 55 27 ("set-state" "get-state" "collapsed" "'collapsed")}
        {Lisp-Entry "row-height" #f 56 22 56 32 ("set-row-height" "get-row-height")}
        {Lisp-Entry "previous" #f 59 18 59 26 ("generate")}
        {Lisp-Entry "next" #f 60 18 60 22 ("generate")}
        {Lisp-Entry "initialize-component" #f 70 11 70 31 ("rest")}
        {Lisp-Entry "install-in-parent" #f 74 11 74 28 ()}
        {Lisp-Entry "set-parent" #f 78 11 78 21 ("parent" "set!" "prt")}
        {Lisp-Entry "get-outline-view" #f 87 25 87 41 ("parent")}
        {Lisp-Entry "get-father" #f 91 25 91 35 ("father")}
        {Lisp-Entry "set-father" #f 95 25 95 35 ("father" "set!" "row")}
        {Lisp-Entry "get-sons" #f 99 25 99 33 ("sons")}
        {Lisp-Entry "set-sons" #f 103 25 103 33 ("sons" "set!" "s")}
        {Lisp-Entry "get-level" #f 107 25 107 34 ("level")}
        {Lisp-Entry "set-level" #f 111 25 111 34 ("level" "set!" "lvl")}
        {Lisp-Entry "get-state" #f 115 25 115 34 ("state")}
        {Lisp-Entry "set-state" #f 119 25 119 34 ("state" "set!" "s")}
        {Lisp-Entry "get-row-height" #f 123 25 123 39 ("row-height")}
        {Lisp-Entry "set-row-height" #f 127 25 127 39 ("row-height" "set!" "height")}
        {Lisp-Entry "change-father" #f 136 18 136 31 ("get-sons" "cardinality" "either" "add-son" "set-father" "self" "remove-son" "father" "when" "position" "position:" "father-row")}
        {Lisp-Entry "for-each-father" #f 144 18 144 33 ("for-each-father" "father" "when" "proc")}
        {Lisp-Entry "for-each-ancestor" #f 150 18 150 35 ("for-each-father" "self" "proc")}
        {Lisp-Entry "remove-every-son" #f 160 18 160 34 ("sons" "remove-row" "son" "function" "for-each" "get-outline-view" "outline-view" "let")}
        {Lisp-Entry "son-rank" #f 167 18 167 26 ("sons" "find" "son")}
        {Lisp-Entry "last-son" #f 171 18 171 26 ("sons" "last")}
        {Lisp-Entry "get-transparent?" #f 180 11 180 27 ()}
        {Lisp-Entry "expanded?" #f 189 18 189 27 ("expanded" "'expanded" "state" "eq?")}
        {Lisp-Entry "collapsed?" #f 193 18 193 28 ("collapsed" "'collapsed" "state" "eq?")}
        {Lisp-Entry "expandable?" #f 197 18 197 29 ("first-visible-son" "dynamic" "'dynamic" "state" "eq?" "or")}
        {Lisp-Entry "collapsable?" #f 202 18 202 30 ("expanded" "'expanded" "state" "eq?")}
        {Lisp-Entry "set-descendants-level" #f 211 21 211 42 ("sons" "1" "+" "set-descendants-level" "son" "function" "for-each" "level" "set!" "lvl")}
        {Lisp-Entry "get-effective-width" #f 223 26 223 45 ("get-width")}
        {Lisp-Entry "get-effective-height" #f 227 18 227 38 ("get-height" "row-height" "either")}
        {Lisp-Entry "draw" #f 236 11 236 15 ("draw-selection" "selected?:" "getf" "when" "nextmethod" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-selection" #f 242 29 242 43 ("Light-Gray" "Black" "name:" "Color" "frame-rect" "-1" "inflate-rect" "inner" "get-bounds" "outer" "let*" "surface")}
        {Lisp-Entry "show" #f 254 11 254 15 ("link" "show-rows" "visible-in-father?" "visible?" "let" "parent" "nextmethod" "first-visible-son" "father" "essay" "get-next" "if" "next" "self" "previous-visible-row" "previous" "last-descendant" "last" "let*" "get-visible-flag" "unless")}
        {Lisp-Entry "hide" #f 269 11 269 15 ("unlink" "visible-in-father?" "hide-rows" "parent" "if" "nextmethod" "in-collapse?" "self" "last-descendant" "either" "last" "let" "get-visible-flag" "when")}
        {Lisp-Entry "get-visible?" #f 280 11 280 23 ("row-visible?" "father" "and")}
        {Lisp-Entry "row-visible?" #f 284 18 284 30 ("visible-in-father?" "get-visible-flag" "and")}
        {Lisp-Entry "visible-in-father?" #f 289 18 289 36 ("row-visible?" "expanded?" "and" "father" "not" "or")}
        {Lisp-Entry "count-visible" #f 294 18 294 31 ("increase!" "get-next" "set!" "level" "get-level" ">" "and" "while" "0" "count" "next" "scan" "let")}
        {Lisp-Entry "node-height" #f 303 18 303 29 ("sons-height" "parent" "get-row-spacing" "get-effective-height" "+")}
        {Lisp-Entry "sons-height" #f 307 18 307 29 ("get-next" "set!" "get-effective-height" "+" "increase!" "level" "get-level" ">" "and" "while" "parent" "get-row-spacing" "rs" "0" "total" "next" "scan" "let")}
        {Lisp-Entry "sons-width" #f 317 18 317 28 ("get-next" "set!" "when" "get-effective-width" "w" "level" "get-level" ">" "and" "while" "0" "width" "next" "scan" "let")}
        {Lisp-Entry "first-visible-son" #f 328 18 328 35 ("son" "function" "find-if" "get-visible-flag" "if" "first" "let" "sons" "empty?" "not" "when")}
        {Lisp-Entry "previous-visible-row" #f 338 18 338 38 ("expanded?" "last-descendant" "essay" "either" "get-father" "father" "previous-visible-sibling" "let" "target")}
        {Lisp-Entry "previous-visible-sibling" #f 345 18 345 42 ("get-visible-flag" "when" "set!" "self" "eq?" "if" "unless" "function" "iterate" "found-self?" "first" "scan" "get-sons" "father" "essay" "siblings" "sibling" "let*")}
        {Lisp-Entry "last-visible-descendant" #f 360 21 360 44 ("set!" "level" "get-level" ">" "get-next" "and" "while" "when" "first-visible-son" "scan" "let")}
        {Lisp-Entry "add-son" #f 373 18 373 25 ("insert!" "set!" "link" "first-visible-son" "/=" "and" "level" "get-level" "after" "get-next" "essay" "following" "element" "previous-visible-row" "last-visible-descendant" "if" "0" "=" "before" "get-visible-flag" "when" "else" ">" "not" "cond" "pos" "sons" "cardinality" "count" "last-descendant" "end" "expanded" "'expanded" "state" "eq?" "expanded?" "let*" "self" "set-father" "position" "row")}
        {Lisp-Entry "remove-son" #f 395 18 395 28 ("axis-remove!" "sons" "set!" "set-previous" "set-next" "get-previous" "error" "Outline-Row" "is-not?" "and" "when" "next-non-descendant" "following" "let" "row")}
        {Lisp-Entry "relink" #f 410 18 410 24 ("last-descendant" "expanded?" "either" "set!" "link" "get-visible-flag" "when" "row" "function" "iterate" "let" "after" "before" "replacement")}
        {Lisp-Entry "replace-sons" #f 420 18 420 30 ("replace-subseq!" "sons" "set!" "relink" "after" "get-previous" "essay" "before" "let" "end" "end-row" "start" "start-row" "replacement")}
        {Lisp-Entry "reorder-sons" #f 427 18 427 30 ("sons" "set!" "relink" "next-non-descendant" "after" "self" "expanded?" "when" "before" "let" "replacement")}
        {Lisp-Entry "link" #f 435 11 435 15 ("set-previous" "set-next" "when" "after" "before")}
        {Lisp-Entry "unlink" #f 443 11 443 17 ("set-next" "set-previous" "link" "get-next" "next" "get-previous" "previous" "let" "last" "first")}
        {Lisp-Entry "attached?" #f 456 18 456 27 ("parent")}
        {Lisp-Entry "detach-descendants" #f 460 18 460 36 ("sons" "detach-descendants" "subrow" "function" "for-each")}
        {Lisp-Entry "first-descendant" #f 471 21 471 37 ("first-visible-son" "sons" "empty?" "not" "expanded" "'expanded" "state" "eq?" "and" "when")}
        {Lisp-Entry "last-proper-descendant" #f 476 21 476 43 ("set!" "level" "get-level" ">" "get-next" "and" "while" "when" "first-descendant" "scan" "let")}
        {Lisp-Entry "last-descendant" #f 484 21 484 36 ("self" "last-proper-descendant" "either")}
        {Lisp-Entry "next-non-descendant" #f 489 21 489 40 ("last-descendant" "get-next")}
        {Lisp-Entry "visible-sibling-follows?" #f 493 21 493 45 ("get-sons" "set!" "self" "eq?" "get-visible-flag" "and" "prog1" "son" "function" "some?" "found?" "let" "father" "when")}
        {Lisp-Entry "sibling-follows?" #f 503 21 503 37 ("get-sons" "last" "self" "neq?" "father" "and")}
        {Lisp-Entry "get-spine" #f 512 18 512 27 ("get-father" "cons" "set!" "neq?" "while" "spine" "parent" "get-root-row" "root" "self" "row" "let")}
        {Lisp-Entry "internal-fields" #f 527 18 527 33 ("next" "previous" "state" "level" "values")}}}})
"Outline-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "outline" "Outline-View.jazz"} 1227218394
    {Lisp-Entry "jazz.ui.outline.Outline-View" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Outline-View" #f 57 7 57 19 ("View")
        {Lisp-Entry "default-row-height" #f 60 22 60 40 ("set-default-row-height" "get-default-row-height" "17")}
        {Lisp-Entry "row-spacing" #f 61 22 61 33 ("set-row-spacing" "get-row-spacing" "0")}
        {Lisp-Entry "left-padding" #f 62 22 62 34 ("set-left-padding" "get-left-padding" "0")}
        {Lisp-Entry "top-padding" #f 63 22 63 33 ("set-top-padding" "get-top-padding" "0")}
        {Lisp-Entry "background-filler" #f 64 22 64 39 ("set-background-filler" "get-background-filler")}
        {Lisp-Entry "root-row" #f 67 18 67 26 ()}
        {Lisp-Entry "outline" #f 68 18 68 25 ()}
        {Lisp-Entry "visible-count" #f 69 18 69 31 ("0")}
        {Lisp-Entry "visible-height" #f 70 18 70 32 ("0")}
        {Lisp-Entry "visible-width" #f 71 18 71 31 ("0")}
        {Lisp-Entry "selection" #f 72 18 72 27 ()}
        {Lisp-Entry "line-size" #f 73 18 73 27 ("16")}
        {Lisp-Entry "page-size" #f 74 18 74 27 ("320")}
        {Lisp-Entry "hscrollbar?" #f 75 18 75 29 ()}
        {Lisp-Entry "vscrollbar?" #f 76 18 76 29 ()}
        {Lisp-Entry "install" #f 84 11 84 18 ("setup-outline" "nextmethod" "rest")}
        {Lisp-Entry "finish" #f 89 11 89 17 ("layout-scrollee" "nextmethod" "rest")}
        {Lisp-Entry "setup-outline" #f 94 11 94 24 ("expanded" "'expanded" "set-state" "-1" "set-level" "set-father" "self" "set-parent" "row-spacing" "Display-Outline" "outline" "row-class" "new" "root-row" "set!")}
        {Lisp-Entry "size-change" #f 108 11 108 22 ("layout-scrollee" "update-locked?" "unless" "nextmethod" "size")}
        {Lisp-Entry "get-root-row" #f 119 18 119 30 ("root-row")}
        {Lisp-Entry "get-outline" #f 123 18 123 29 ("outline")}
        {Lisp-Entry "get-default-row-height" #f 127 18 127 40 ("default-row-height")}
        {Lisp-Entry "set-default-row-height" #f 131 18 131 40 ("default-row-height" "set!" "height")}
        {Lisp-Entry "get-row-spacing" #f 135 18 135 33 ("row-spacing")}
        {Lisp-Entry "set-row-spacing" #f 139 18 139 33 ("invalidate-view" "row-spacing" "set!" "spacing")}
        {Lisp-Entry "get-left-padding" #f 144 18 144 34 ("left-padding")}
        {Lisp-Entry "set-left-padding" #f 148 18 148 34 ("invalidate-view" "left-padding" "set!" "padding")}
        {Lisp-Entry "get-top-padding" #f 153 18 153 33 ("top-padding")}
        {Lisp-Entry "set-top-padding" #f 157 18 157 33 ("invalidate-view" "top-padding" "set!" "padding")}
        {Lisp-Entry "get-background-filler" #f 162 18 162 39 ("background-filler")}
        {Lisp-Entry "set-background-filler" #f 166 18 166 39 ("invalidate-view" "background-filler" "set!" "value")}
        {Lisp-Entry "get-expand-state" #f 176 18 176 34 ("List" "type:" "collect" "cons" "expanded" "'expanded" "eq?" "0" "cardinality" ">" "and" "or" "get-sons" "sons" "get-state" "state" "first-child" "get-title" "title" "let" "row" "function" "proc" "letrec" "root-row" "when" "include-invisibles?" "include-invisibles?:")}
        {Lisp-Entry "set-expand-state" #f 193 18 193 34 ("for-each" "update-row" "dynamic" "'dynamic" "and" "expand/collapse" "unless" "expanded" "'expanded" "eq?" "if" "get-state" "actual" "find-by-title" "subrow" "let" "children" "title" "bind" "info" "row" "function" "proc" "letrec" "root-row" "when" "state")}
        {Lisp-Entry "expand-spine" #f 219 18 219 30 ("if" "expand/collapse" "null?" "expanded" "'expanded" "eq?" "or" "unless" "get-state" "actual" "find-by-title" "subrow" "let" "subspine" "title" "bind" "row" "function" "proc" "letrec" "root-row" "when" "spine")}
        {Lisp-Entry "find-subdrawing" #f 240 11 240 26 ("get-position" "-" "find-drawing" "get-row" "when" "get-v" "v->row" "row" "let" "ignore" "pos")}
        {Lisp-Entry "layout-scrollee-content" #f 252 11 252 34 ("layout-rows")}
        {Lisp-Entry "layout-rows" #f 256 11 256 22 ("row-spacing" "increase!" "set!" "Dimension" "set-size" "Point" "new" "set-position" "+" "rb" "default-row-height" "get-row-height" "either" "height" "let*" "while" "top-padding" "rt" "root-row" "get-next" "row" "left-padding" "get-width" "-" "width" "let")}
        {Lisp-Entry "scrollee-size" #f 275 11 275 24 ("scrollee-height" "scrollee-width" "Dimension" "new")}
        {Lisp-Entry "scrollee-width" #f 279 11 279 25 ("visible-width" "left-padding" "+" "get-display-width" "max")}
        {Lisp-Entry "scrollee-height" #f 283 11 283 26 ("visible-height" "top-padding" "+" "get-display-height" "max")}
        {Lisp-Entry "get-visible-width" #f 287 18 287 35 ("visible-width")}
        {Lisp-Entry "get-visible-height" #f 291 18 291 36 ("visible-height")}
        {Lisp-Entry "invalidate-update" #f 300 11 300 28 ("update-scrollbars" "invalidate-view" "layout-scrollee" "update-visible" "update-displayed")}
        {Lisp-Entry "update-visible" #f 308 26 308 40 ()}
        {Lisp-Entry "draw-children" #f 317 11 317 24 ("draw-outline" "fill-rect" "when" "get-drawing-background" "cycle-debug-color!" "*debug-paint*" "if" "background" "get-logical-clipper" "clipper" "let" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-outline" #f 327 29 327 41 ("draw-rows" "get-bottom" "bottom" "get-v" "get-top" "+" "top" "get-scrolled-position" "pos" "let*" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-rows" #f 334 11 334 20 ("draw-empty" "row-spacing" "get-next" "set!" "increase!" "draw-row" ">=" "when" "+" "rb" "get-height" "height" "let*" "<" "and" "while" "get-width" "width" "get-first-displayed-offset" "top-padding" "-" "rt" "get-first-displayed-rank" "rank" "outline" "get-first-displayed" "row" "let" "sc?" "sc" "sv" "sh" "bottom" "top" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-empty" #f 351 29 351 39 ("width" "rt" "sc?" "sc" "sv" "sh" "bottom" "top" "surface")}
        {Lisp-Entry "draw-row" #f 355 11 355 19 ("get-v" "get-h" "paint-drawing" "optimize-context" "new-context" "let" "font" "set-font" "get-position" "pos" "row-draw-selected?" "selected?" "row-spacing" "+" "total-height" "get-height" "height" "get-width" "width" "let*" "sc?" "sc" "sv" "sh" "rank" "row" "lv" "lh" "context" "surface")}
        {Lisp-Entry "optimized-context" #f 368 14 368 31 ("0" "row-rank:" "selected?:" "list")}
        {Lisp-Entry "optimize-context" #f 372 11 372 27 ("set-fourth!" "optimized-context" "set-second!" "row-rank:" "selected?:" "cons" "if" "context" "rank" "selected?")}
        {Lisp-Entry "on-prior" #f 385 18 385 26 ("get-shift?" "prior-page" "evt")}
        {Lisp-Entry "prior-page" #f 389 29 389 39 ("vert" "'vert" "get-page-size" "0" "Point" "new" "scroll" "evt")}
        {Lisp-Entry "on-next" #f 393 18 393 25 ("get-shift?" "next-page" "evt")}
        {Lisp-Entry "next-page" #f 397 29 397 38 ("vert" "'vert" "get-page-size" "-" "0" "Point" "new" "scroll" "evt")}
        {Lisp-Entry "get-line-size" #f 401 11 401 24 ("8" "horz" "default-row-height" "vert" "case" "orientation")}
        {Lisp-Entry "scroll-invalidate" #f 407 11 407 28 ("-" "follow" "dv" "dh")}
        {Lisp-Entry "row-class" #f 416 29 416 38 ("Outline-Row")}
        {Lisp-Entry "add-row" #f 420 18 420 25 ("update-father-control" "Rect" "0" "scroll-view" "-" "<" "layout-scrollee" "added-update-selection" "get-height" "display-height" "get-width" "display-width" "get-size" "display-size" "get-display" "display" "row-top" "top" "row-rank" "rank" "update-visible" "update-displayed" "get-effective-width" "update-visible-width-incremental" "visible-height" "node-height" "height" "let" "update-locked?" "not" "count-visible" "visible-count" "increase!" "row-visible?" "when" "add-son" "set-descendants-level" "default-row-height" "set-height-noevent" "self" "parent:" "new" "apply" "1" "get-level" "+" "level" "root-row" "either" "let*" "others" "position" "father" "row" "row-class" "class" "bind-keywords" "rest")}
        {Lisp-Entry "update-visible-width-incremental" #f 451 29 451 61 ("width" "level")}
        {Lisp-Entry "remove-row" #f 455 26 455 36 ("update-father-control" "detach-descendants" "Rect" "new" "-" "scroll-view" "<" "layout-scrollee" "get-height" "display-height" "get-width" "display-width" "get-size" "display-size" "get-display" "display" "update-visible" "update-displayed" "update-locked?" "not" "and" "removed-update-selection" "collapsed" "'collapsed" "set-state" "0" "get-sons" "cardinality" "=" "remove-son" "visible-height" "count-visible" "1" "+" "visible-count" "decrease!" "row-top" "essay" "top" "row-rank" "rank" "node-height" "height" "row-visible?" "visible?" "get-father" "father" "let*" "attached?" "when" "row")}
        {Lisp-Entry "move-row" #f 485 18 485 26 ("father:" "row:" "add-row" "procedure?" "if" "let" "remove-row" "position" "position:" "father" "row")}
        {Lisp-Entry "find-ordered-position" #f 491 18 491 39 ("smaller/equal" "'smaller/equal" "sort-predicate" "test:" "row-title" "key:" "get-sons" "ordered-position" "0" "not" "if" "father" "title")}
        {Lisp-Entry "remove-every-row" #f 497 26 497 42 ("invalidate-view" "layout-scrollee" "update-displayed" "update-locked?" "unless" "horz" "'horz" "vert" "'vert" "set-scroll-pos" "Dimension" "set-size" "Point" "set-position" "scroller" "when" "selection" "visible-width" "visible-height" "0" "visible-count" "set!" "setup-outline")}
        {Lisp-Entry "update-father-control" #f 514 29 514 50 ("father")}
        {Lisp-Entry "update-displayed" #f 518 11 518 27 ("get-display-v" "outline" "update-displayed")}
        {Lisp-Entry "first-row" #f 522 18 522 27 ("root-row" "get-sons" "first")}
        {Lisp-Entry "get-row" #f 526 18 526 25 ("get-row" "1" "+" "root-row" "outline" "get-row-from" "update-locked?" "not" "if" "n")}
        {Lisp-Entry "get-visible-row" #f 533 18 533 33 ("continuation-return" "=" "when" "rank" "row" "for-each-visible-row" "return" "function" "continuation-capture" "n")}
        {Lisp-Entry "get-row-classic" #f 544 11 544 26 ("decrease!" "get-next" "set!" "0" ">=" "and" "while" "root-row" "row" "let" "n")}
        {Lisp-Entry "row-rank" #f 552 18 552 26 ("continuation-return" "eq?" "when" "rank" "row" "for-each-visible-row" "return" "function" "continuation-capture" "target")}
        {Lisp-Entry "rows-ranks" #f 562 18 562 28 ("row-rank" "map" "targets")}
        {Lisp-Entry "row-title" #f 566 18 566 27 ("first-child" "get-title" "row")}
        {Lisp-Entry "get-visible-count" #f 570 18 570 35 ("visible-count")}
        {Lisp-Entry "forward" #f 574 11 574 18 ("decrease!" "get-next" "set!" "0" ">" "while" "n" "row")}
        {Lisp-Entry "backward" #f 581 11 581 19 ("decrease!" "get-previous" "set!" "0" ">" "while" "n" "row")}
        {Lisp-Entry "ensure-row-exists" #f 588 18 588 35 ("1" "+" "ensure-visible-count" "row")}
        {Lisp-Entry "ensure-visible-count" #f 592 18 592 38 ("add-empty-row" "visible-count" "<" "while" "n")}
        {Lisp-Entry "add-empty-row" #f 597 26 597 39 ("add-row" "root-row" "either" "let" "father" "father:")}
        {Lisp-Entry "row-selected?" #f 602 29 602 42 ("selection" "=" "row")}
        {Lisp-Entry "row-draw-selected?" #f 606 29 606 47 ("row-selected?" "row")}
        {Lisp-Entry "get-row-count" #f 610 18 610 31 ("get-sons" "cardinality" "0" "root-row" "not" "if")}
        {Lisp-Entry "mouse-down" #f 621 11 621 21 ("set-selection" "get-v" "v->row" "row" "let" "acquire-focus" "view")}
        {Lisp-Entry "double-click" #f 627 11 627 23 ("get-row" "expand/collapse" "when" "get-v" "v->row" "row" "let" "view")}
        {Lisp-Entry "empty-selection" #f 638 29 638 44 ()}
        {Lisp-Entry "get-selection" #f 642 26 642 39 ("selection")}
        {Lisp-Entry "set-selection" #f 646 26 646 39 ("user-origin?" "call-selection-handler" "generate-event?" "invalidate-selection" "not-null?" "ensure-displayed" "ensure-displayed?" "set!" "old" "let" "selection" "/=" "force?" "or" "when" "sel")}
        {Lisp-Entry "invalidate-selection" #f 664 26 664 46 ("invalidate-region" "selection-region" "region" "with-closed" "self" "get-delta" "sc" "dv" "dh" "receive" "get-root" "root" "when" "get-player" "player" "let" "sel")}
        {Lisp-Entry "selection-region" #f 673 29 673 45 ("selection-row-region" "sc" "dv" "dh" "sel")}
        {Lisp-Entry "selection-row-region" #f 677 21 677 41 ("selection-row-rect" "acquire-delta" "rect:" "Region" "new" "sc" "dv" "dh" "n")}
        {Lisp-Entry "selection-row-rect" #f 681 29 681 47 ("get-row" "get-rect" "n")}
        {Lisp-Entry "added-update-selection" #f 686 29 686 51 ("increase!" ">=" "selection" "and" "when" "count" "rank")}
        {Lisp-Entry "removed-update-selection" #f 692 29 692 53 ("set!" "decrease!" "+" "if" ">=" "selected?" "let" "selection" "not-null?" "when" "count" "rank")}
        {Lisp-Entry "for-each-row" #f 708 18 708 30 ("row-visible?" "root-row" "function" "get-sons" "iterate" "increase!" "when" "essay" "expanded?" "son-visible?" "get-visible-flag" "and" "let*" "visible?" "row" "recurse" "define" "0" "rank" "let" "proc")}
        {Lisp-Entry "for-each-visible-row" #f 723 18 723 38 ("for-each-visible-row" "not" "increase!" "set!" "neq?" "and" "while" "when" "0" "row-rank" "if" "rank" "root-row" "get-next" "either" "row" "let" "wrap?" "wrap?:" "end" "end:" "start" "start:" "proc")}
        {Lisp-Entry "for-each-visible-descendant" #f 735 18 735 45 ("end:" "start:" "for-each-visible-row" "when" "get-next" "essay" "end-row" "last-visible-descendant" "last-son" "first-visible-son" "first-son" "let*" "proc" "parent-row")}
        {Lisp-Entry "get-content" #f 748 26 748 37 ("root-row" "get-sons")}
        {Lisp-Entry "set-content" #f 752 26 752 37 ("invalidate-view" "layout-scrollee" "update-displayed" "empty-selection" "set-selection" "sons-height" "visible-height" "count-visible" "visible-count" "set!" "invalidate-columns" "car" "set-next" "root-row" "set-sons" "content")}
        {Lisp-Entry "set-subrows" #f 764 18 764 29 ("visible-height" "visible-count" "last-proper-descendant" "last" "link-rows" "first" "first-son" "get-next" "old-next" "expanded" "'expanded" "get-state" "eq?" "Axis" "coerce" "essay" "set-sons" "get-row-height" "increase!" "set!" "set-next" "set-previous" "when" "set-level" "set-father" "subrow" "let" "info" "function" "map" "rows" "previous" "1" "get-level" "+" "level" "height" "0" "count" "root-row" "either" "let*" "empty?" "unless" "proc" "seq" "row")}
        {Lisp-Entry "invalidate-columns" #f 795 26 795 44 ()}
        {Lisp-Entry "expand/collapse" #f 804 26 804 41 ("collapse" "expanded" "expand" "collapsed" "get-state" "case" "row")}
        {Lisp-Entry "update-row" #f 810 29 810 39 ("row")}
        {Lisp-Entry "expand" #f 814 18 814 24 ("row-visible?" "show-rows" "in-expand?" "get-next" "next" "previous" "last-visible-descendant" "last" "first-descendant" "first" "let" "set-state" "expanded" "'expanded" "get-state" "neq?" "when" "dynamic?" "row")}
        {Lisp-Entry "invalidate-expand" #f 826 29 826 46 ("dynamic?" "top" "row")}
        {Lisp-Entry "expand-all" #f 830 18 830 28 ("expand-all" "get-sons" "iterate" "expand/collapse" "expanded" "'expanded" "get-state" "eq?" "unless" "function" "with-update-locked" "row")}
        {Lisp-Entry "collapse" #f 838 18 838 26 ("row-visible?" "last-proper-descendant" "hide-rows" "invalidate-collapse" "row-selected?" "selected?" "get-position" "get-v" "top" "row-rank" "rank" "set-state" "not" "if" "in-collapse?" "first-descendant" "first" "let" "collapsed" "'collapsed" "get-state" "neq?" "when" "row")}
        {Lisp-Entry "collapse-selection" #f 851 29 851 47 ("selected?" "rank")}
        {Lisp-Entry "invalidate-collapse" #f 855 29 855 48 ("row-rect" "invalidate-rect" "when" "selected?" "top" "row" "rank")}
        {Lisp-Entry "collapse-all" #f 860 18 860 30 ("expand/collapse" "expanded" "'expanded" "get-state" "eq?" "when" "collapse-all" "get-sons" "iterate" "function" "with-update-locked" "row")}
        {Lisp-Entry "link-rows" #f 868 11 868 20 ("set-previous" "set-next" "when" "after" "before")}
        {Lisp-Entry "unlink-rows" #f 875 11 875 22 ("set-next" "set-previous" "link-rows" "get-next" "next" "get-previous" "previous" "let" "last" "first")}
        {Lisp-Entry "ensure-expanded" #f 883 18 883 33 ("set!" "expand" "collapsed" "'collapsed" "get-state" "eq?" "when" "while" "get-father" "scan" "let" "row")}
        {Lisp-Entry "ensure-expanded-rows" #f 891 18 891 38 ("ensure-expanded" "for-each" "rows")}
        {Lisp-Entry "set-visibilities" #f 901 18 901 34 ("set!" "link-rows" "when" "visible?" "row" "function" "get-sons" "iterate" "root-row" "previous" "let" "predicate")}
        {Lisp-Entry "show-rows" #f 911 18 911 27 ("ensure-row-range-displayed" ">" "layout-scrollee" "Rect" "new" "scroll-view" "invalidate-expand" "get-scrolled-v" "<" "1" "added-update-selection" "display-height" "get-width" "display-width" "get-size" "display-size" "get-display" "display" "get-height" "+" "opens" "0" "get-position" "get-v" "either" "top" "row-rank" "rank" "let*" "update-visible" "update-displayed" "get-level" "update-visible-width-incremental" "visible-height" "visible-count" "increase!" "count-visible-size" "width" "height" "count" "receive" "update-locked?" "not" "and" "when" "link-rows" "dynamic?" "in-expand?" "visible?" "next" "previous" "last" "first")}
        {Lisp-Entry "hide-rows" #f 938 18 938 27 ("layout-scrollee" "Rect" "new" "-" "scroll-view" "invalidate-collapse" "<" "collapse-selection" "display-height" "get-width" "display-width" "get-size" "display-size" "get-display" "display" "1" "removed-update-selection" "removed" "get-height" "+" "opens" "get-position" "get-v" "top" "0" "row-rank" "either" "rank" "let*" "update-visible" "update-displayed" "update-locked?" "not" "and" "collapsed" "'collapsed" "set-state" "unlink-rows" "get-previous" "previous" "let" "visible-height" "visible-count" "decrease!" "when" "count-visible-size" "width" "height" "count" "receive" "in-collapse?" "visible?" "last" "first")}
        {Lisp-Entry "count-visible-size" #f 966 18 966 36 ("values" "set!" ">" "when" "get-effective-width" "w" "row-spacing" "get-effective-height" "+" "increase!" "neq?" "and" "while" "width" "height" "0" "count" "get-next" "stop" "essay" "scan" "let" "visible?" "last" "first")}
        {Lisp-Entry "follow" #f 987 11 987 17 ("get-display-v" "outline" "follow" "v")}
        {Lisp-Entry "ensure-displayed" #f 991 26 991 42 ("ensure-row-displayed" "selection" "not-null?" "when" "rest")}
        {Lisp-Entry "ensure-row-displayed" #f 996 18 996 38 ("get-scroll-context" "0" "Point" "new" "scroll-needed" "scroll" "get-bottom" "bottom" "get-top" "top" "get-row" "row" "let*" "n")}
        {Lisp-Entry "ensure-row-range-displayed" #f 1003 18 1003 44 ("get-scroll-context" "0" "Point" "new" "scroll-needed" "scroll" "get-bottom" "bottom" "get-row" "get-top" "top" "let" "to" "from")}
        {Lisp-Entry "ensure-at-end" #f 1009 18 1009 31 ("1" "visible-count" "-" "ensure-row-displayed")}
        {Lisp-Entry "get-scroll-context" #f 1013 29 1013 47 ("0.20" "0.15" "cons")}
        {Lisp-Entry "row-top" #f 1024 21 1024 28 ("get-next" "set!" "row-spacing" "get-height" "increase!" "decrease!" ">" "while" "0" "v" "first-row" "row" "let" "n")}
        {Lisp-Entry "row-rect" #f 1035 29 1035 37 ("get-height" "+" "Rect" "new" "get-width" "right" "row-top" "top" "0" "left" "get-row" "row" "let" "n")}
        {Lisp-Entry "row-region" #f 1043 11 1043 21 ("get-row" "get-bounds" "rect:" "Region" "new" "n")}
        {Lisp-Entry "row->v" #f 1047 21 1047 27 ("get-row" "get-top" "r")}
        {Lisp-Entry "v->row" #f 1051 21 1051 27 ("height" "rank" "function" "call-with-v->row" "v")}
        {Lisp-Entry "call-with-v->row" #f 1057 21 1057 37 ("get-scrolled-v" "outline" "call-with-v->row" "proc" "v")}
        {Lisp-Entry "property-presentation" #f 1067 16 1067 37 ("nextmethod" "else" "background-filler" "top-padding" "left-padding" "row-spacing" "default-row-height" "field-name" "case" "property")}}}})
"Output-Log"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "utility" "Output-Log.jazz"} 1226584782
    {Lisp-Entry "jazz.library.utility.Output-Log" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Output-Log" #f 48 7 48 17 ("300" "width:" "title:" "message" "results" "header" "content" "scroller" "name:" "Navigable-Results")
        {Lisp-Entry "external-name" #f 61 16 61 29 ("output-log" "'output-log" "rest")}
        {Lisp-Entry "host-icon" #f 70 16 70 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 74 16 74 26 ()}
        {Lisp-Entry "log-line" #f 83 18 83 26 ("title:" "Tree-Node" "new" "list" "children:" "add-row" "get-tree" "tree" "let" "user-data" "user-data:" "image" "image:" "collapsed" "'collapsed" "state" "state:" "father" "father:" "line")}
        {Lisp-Entry "edit-selection" #f 93 11 93 25 ("focus-host" "edit-document" "frame" "user-message" "msg" "line" "file" "bind" "else" "cdr" "edit-child" "car" "pair?" "and" "edit" "Loggable" "is?" "bell" "null?" "cond" "get-row" "get-user-data" "info" "let" "when" "get-single-selection" "selection" "get-tree" "tree" "let*" "forward?")}
        {Lisp-Entry "edit-document" #f 112 11 112 24 ("set-visible?" "bring-to-front" "visible?:" "selection:" "get-application" "edit-document" "frame" "1" "+" "0" "Cell" "Range$Cell$" "new" "essay" "selection" "let*" "function" ":wait" "with-cursor" "focus?" "forward?" "line" "file")}}}})
"Overlapped"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "Overlapped.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.Overlapped" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Overlapped" #f 47 7 47 17 ("View-Player")
        {Lisp-Entry "owner" #f 50 12 50 17 ("set-owner" "get-owner")}
        {Lisp-Entry "conclude" #f 53 11 53 19 ("self" "register-overlapped" "nextmethod" "rest")}
        {Lisp-Entry "destroy" #f 58 11 58 18 ("nextmethod" "self" "unregister-overlapped")}
        {Lisp-Entry "get-owner" #f 68 18 68 27 ("owner")}
        {Lisp-Entry "set-owner" #f 72 18 72 27 ("owner" "set!" "window")}
        {Lisp-Entry "get-owners" #f 81 18 81 28 ("get-owners" "cons" "self" "list" "owner" "not" "if")}}}})
"Package"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "package" "Package.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.package.Package" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Package" #f 49 7 49 14 ("Project-File")
        {Lisp-Entry "title" #f 52 12 52 17 ("generate")}
        {Lisp-Entry "print" #f 55 11 55 16 ("title" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-class-image" #f 67 16 67 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 71 16 71 37 ("nextmethod" "else" "title" "field-name" "case" "property")}
        {Lisp-Entry "presentation-property?" #f 77 11 77 33 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 81 11 81 27 ("self" "class-of" "type-name" "->string" "title" "either")}
        {Lisp-Entry "set-presentation" #f 85 11 85 27 ("title:" "self" "set-property" "presentation" "designer")}
        {Lisp-Entry "addable-class?" #f 89 11 89 25 ("Project-Group" "Project-File" "subtype?" "or" "class")}
        {Lisp-Entry "get-addable-classes" #f 94 11 94 30 ("Project-Group" "list")}
        {Lisp-Entry "get-row-instance" #f 106 11 106 27 ("nextmethod" "else" "nullable?:" "String-Row" "new" "title" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 112 11 112 37 ("title")}}}})
"Package-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Package-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Package-Doc" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Package-Doc" #f 45 7 45 18 ("Category-Doc")
        {Lisp-Entry "get-class-image" #f 53 16 53 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" #f 57 11 57 37 ("extends" "package-name")}}}})
"Package-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Package-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Package-Entry" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Package-Entry" #f 45 7 45 20 ("Hierarchical-Entry")
        {Lisp-Entry "present-name" #f 48 11 48 23 ("qualified" "join")}
        {Lisp-Entry "get-image" #f 52 11 52 20 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" #f 61 11 61 25 ("references" "update-index" "key" "function" "for-each" "references-index" "definitions-index")}}}})
"Pad-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Pad-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Pad-Preferences" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Pad-Preferences" #f 46 7 46 22 ("Bitmap-Resource" "icon:" "title:" "Figure-Preferences")
        {Lisp-Entry "apply-root" #f 58 11 58 21 ("get-root" "apply-to" "offscreen?:" "Pad-View" "new" "set-root" "player")}
        {Lisp-Entry "apply-preferences" #f 63 11 63 28 ("parent:" "Pad-View" "new" "apply-to" "assert" "parent")}
        {Lisp-Entry "apply-to" #f 68 11 68 19 ("layout-view" "get-children" "get-guest" "host-install" "Host-View" "is?" "when" "child" "children" "apply-preferences" "pref" "function" "for-each" "get-visible?" "set-visible?" "location" "set-location" "remove-children" "pad")}
        {Lisp-Entry "get-class-image" #f 87 16 87 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" #f 91 11 91 37 ("location")}
        {Lisp-Entry "get-addable-classes" #f 95 11 95 30 ("Stage-Preferences" "Docked-Preferences" "Pad-Preferences" "Splitter-Preferences" "list")}}}})
"Pad-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Pad-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Pad-View" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Pad-View" #f 46 7 46 15 ("View")
        {Lisp-Entry "size-change" #f 54 11 54 22 ("layout-view" "nextmethod" "size")}
        {Lisp-Entry "layout" #f 59 11 59 17 ("neq?" "children" "selection" "'selection" "get-location" "eq?" "when" "for-each" "set-size" "0" "Point" "set-position" "set-visible?" "visible?" "child" "function" "proc" "get-size" "size" "let*")}
        {Lisp-Entry "add-view" #f 81 18 81 26 ("self" "set-parent" "view")}
        {Lisp-Entry "remove-view" #f 85 18 85 29 ("set-parent" "view")}
        {Lisp-Entry "remove-children" #f 89 18 89 33 ("children" "get-guest" "host-uninstall" "Host-View" "is?" "when" "set-parent" "set-visible?" "child" "function" "for-each")}
        {Lisp-Entry "get-selection" #f 103 18 103 31 ("children" "selection" "'selection" "get-location" "eq?" "child" "function" "find-if")}
        {Lisp-Entry "set-selection" #f 109 18 109 31 ("layout-view" "children" "selection" "'selection" "eq?" "if" "set-location" "child" "function" "for-each" "target")}
        {Lisp-Entry "select-next" #f 116 18 116 29 ("focus-host" "set-selection" "length" "1" "+" "modulo" "element" "next" "children" "find" "rank" "get-selection" "selection" "let*")}}}})
"Page-Content"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Content.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Content" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Page-Content" #f 47 7 47 19 ("White" "name:" "Color" "background:" "View")}}})
"Page-Document"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Document.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Document" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Page-Document" #f 47 7 47 20 ("10" "0" "Rect" "layout-insets:" "border" "layout-type:" "White" "name:" "Color" "background:" "Layout-View")}}})
"Page-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Editor.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Editor" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Page-Editor" #f 52 7 52 18 ("'landscape" "'portrait" "ecase" "DMORIENT_LANDSCAPE" "landscape" "DMORIENT_PORTRAIT" "portrait" "case" "else" "update-page" "subtract-rects" "'paper-source" "'paper-size" "symbolize-orientation" "'orientation" "layout-insets" "'layout-insets" "'size" "set-property" "paper-source:" "paper-size:" "numerize-orientation" "orientation:" "add-rects" "scale" "margins:" "page-setup-dialog" "size" "receive" "client" "get-page-setup-designer" "designer" "setup-ratio" "1000" "/" "dialog-ratio" "margins" "get-layout-insets" "min-margins" "get-printable" "printable" "get-paper-source" "paper-source" "get-paper-size" "paper-size" "get-orientation" "orientation" "get-resolution" "resolution" "find-page-setup" "let*" "page-setup" "method" "windows" "cond-expand" "shadow" "border-type:" "664" "514" "Dimension" "size:" "0" "Point" "position:" "border" "Dark" "name:" "Color" "background:" "center" "layout-type:" "Layout-View")
        {Lisp-Entry "client" #f 55 12 55 18 ("set-client" "get-client")}
        {Lisp-Entry "host-workspaces" #f 68 11 68 26 ("page")}
        {Lisp-Entry "find-page-setup" #f 77 11 77 26 ("border" "'border" "locate" "first-child")}
        {Lisp-Entry "on-print" #f 86 11 86 19 ("client" "print-document" "evt")}
        {Lisp-Entry "on-print-preview" #f 90 11 90 27 ("from-layout?:" "client" "print-preview" "evt")}
        {Lisp-Entry "on-page-setup" #f 94 11 94 24 ("page-setup" "evt")}
        {Lisp-Entry "on-layout" #f 98 11 98 20 ("update-page" "child" "set-active-branch" "save-header/footer" "find-page-setup" "page-setup" "layout:" "get-property" "layout" "let" "evt")}
        {Lisp-Entry "on-fit" #f 106 11 106 17 ("set-fit" "fit:" "get-property" "fit" "let" "evt")}
        {Lisp-Entry "set-fit" #f 111 11 111 18 ("'fit" "set-property" "client" "get-page-setup-designer" "designer" "find-page-setup" "page-setup" "let" "fit")}
        {Lisp-Entry "on-close" #f 117 11 117 19 ("close-workspace" "evt")}
        {Lisp-Entry "escape-press" #f 121 11 121 23 ("close-workspace" "key")}
        {Lisp-Entry "activate-page" #f 130 21 130 34 ("update-page" "setup-defaults" "setup-branches")}
        {Lisp-Entry "setup-branches" #f 138 11 138 25 ("child" "set-active-branch" "get-active-branch" "null?" "when" "file" "'file" "printer" "'printer" "setup-branch" "client" "get-page-setup-designer" "designer" "find-page-setup" "page-setup" "let")}
        {Lisp-Entry "setup-branch" #f 148 11 148 23 ("install" "'install" "action:" "textual?:" "Form" "client-form:" "set-property" "set-name" "branch:" "add-child" "parent:" "Branch" "new" "branch" "let" "find-component" "null?" "when" "name" "designer" "page-setup")}
        {Lisp-Entry "setup-defaults" #f 157 11 157 25 ()}
        {Lisp-Entry "update-page" #f 161 11 161 22 ("update-border" "update-fit" "update-branch" "find-page-setup" "page-setup" "Page-Toolbar" "find-palette" "toolbar" "get-toplevel" "toplevel" "let*")}
        {Lisp-Entry "update-branch" #f 171 11 171 24 ("locate" "set-selected?" "get-active-branch-name" "name" "let" "page-setup" "toolbar")}
        {Lisp-Entry "update-fit" #f 176 11 176 21 ("locate" "set-selected?" "get-fit" "fit" "let" "page-setup" "toolbar")}
        {Lisp-Entry "update-border" #f 181 11 181 24 ("layout-view" "4" "Dimension" "get-size" "nu+" "set-size" "'border" "locate" "border" "let" "page-setup")}
        {Lisp-Entry "close-workspace" #f 192 11 192 26 ("get-previous" "apply-preferences" "close" "restore-client" "save-header/footer" "selected-workspace" "workspace" "get-host" "frame" "let")}
        {Lisp-Entry "get-client" #f 206 18 206 28 ("client")}
        {Lisp-Entry "set-client" #f 210 18 210 28 ("set-parent" "4" "Dimension" "get-size" "nu+" "set-size" "printer" "'printer" "get-page-setup-for" "page-setup" "'border" "locate" "border" "let" "client" "set!" "value")}
        {Lisp-Entry "restore-client" #f 218 21 218 35 ("set-parent" "find-page-setup" "page-setup" "let")}
        {Lisp-Entry "save-header/footer" #f 282 11 282 29 ("get-content" "text-content:" "set-property" "get-footer" "footer" "get-header" "header" "when" "client" "get-page-setup-designer" "designer" "find-page-setup" "page-setup" "let")}}}})
"Page-Footer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Footer.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Footer" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Page-Footer" #f 46 7 46 18 ("Page-Text-View")
        {Lisp-Entry "get-drawing-background" #f 54 11 54 33 ("Light-Green" "name:" "Color" "nextmethod" "printing?:" "getf" "if" "context")}}}})
"Page-Header"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Header.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Header" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Page-Header" #f 46 7 46 18 ("Page-Text-View")
        {Lisp-Entry "get-drawing-background" #f 54 11 54 33 ("Light-Yellow" "name:" "Color" "nextmethod" "printing?:" "getf" "if" "context")}}}})
"Page-Printable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Printable.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Printable" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Page-Printable" #f 46 7 46 21 ("Layout-View")
        {Lisp-Entry "get-drawing-background" #f 54 11 54 33 ("Light-Purple" "name:" "Color" "nextmethod" "printing?:" "getf" "if" "context")}}}})
"Page-Setup"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Setup.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Setup" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Page-Setup" #f 48 7 48 17 ("south" "footer" "center" "content" "north" "location:" "19" "100" "header" "document" "50" "printable" "White" "name:" "Color" "background:" "10" "Rect" "layout-insets:" "fill" "layout-type:" "660" "510" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "fit" #f 51 12 51 15 ("generate" "width" "'width")}
        {Lisp-Entry "resolution" #f 52 12 52 22 ("generate" "60")}
        {Lisp-Entry "orientation" #f 53 12 53 23 ("generate" "portrait" "'portrait")}
        {Lisp-Entry "paper-size" #f 54 12 54 22 ("generate" "DMPAPER_LETTER")}
        {Lisp-Entry "paper-source" #f 55 12 55 24 ("generate" "DMBIN_AUTO")}
        {Lisp-Entry "get-printable" #f 72 18 72 31 ("printable" "'printable" "locate")}
        {Lisp-Entry "get-document" #f 81 18 81 30 ("document" "'document" "locate")}
        {Lisp-Entry "get-header" #f 90 18 90 28 ("header" "'header" "locate")}
        {Lisp-Entry "get-content" #f 99 18 99 29 ("content" "'content" "locate")}
        {Lisp-Entry "get-content-rect" #f 103 18 103 34 ("get-bounds" "acquire" "get-content" "content" "let")}
        {Lisp-Entry "scale-content" #f 108 18 108 31 ("resolution" "fit" "fit-rects" "*" "/" "get-content-rect" "content-rect" "get-print-area" "area" "let" "dest-resolution" "client")}
        {Lisp-Entry "get-footer" #f 119 18 119 28 ("footer" "'footer" "locate")}
        {Lisp-Entry "wrap-header/footer" #f 128 18 128 36 ("get-footer" "get-header" "wrap-content" "context")}
        {Lisp-Entry "get-drawing-background" #f 138 11 138 33 ("255" "blue:" "green:" "193" "red:" "Color" "nextmethod" "printing?:" "getf" "if" "context")}}}})
"Page-Status"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Status.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Status" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Page-Status" #f 47 7 47 18 ("center" "location:" "20" "782" "Dimension" "size:" "message" "name:" "Status-Toolbar")
        {Lisp-Entry "host-icon" #f 60 16 60 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 64 16 64 26 ()}}}})
"Page-Text-Palette"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Text-Palette.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Text-Palette" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Page-Text-Palette" #f 47 7 47 24 ("on-insert-time" "insert-time" "on-insert-date" "insert-date" "on-insert-count" "insert-count" "on-insert-no" "insert-no" "on-insert-filename" ":focus" "Event-Handler" "action-handler:" "enabled?:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "insert-filename" "insert-table" "table-separator" "insert-image" "image-separator" "toggle-ruler" "ruler-separator" "visible?:" "style-border" "name:" "Text-Palette")
        {Lisp-Entry "enable-buttons" #f 67 11 67 25 ("insert-time" "'insert-time" "insert-date" "'insert-date" "insert-count" "'insert-count" "insert-no" "'insert-no" "insert-filename" "'insert-filename" "locate" "set-enabled?" "nextmethod" "enabled?")}}}})
"Page-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Text-View" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Page-Text-View" #f 47 7 47 21 ("Text" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "0" "left-padding:" "Formatted-Text-View")
        {Lisp-Entry "scrollee-height" #f 54 11 54 26 ("visible-height" "top-padding" "+")}
        {Lisp-Entry "layout-scrollee-content" #f 58 11 58 34 ("parent" "layout-view" "nextmethod")}
        {Lisp-Entry "get-context-menu" #f 63 11 63 27 ("new-text-context-menu")}
        {Lisp-Entry "on-insert-filename" #f 72 11 72 29 ("filename" "'filename" "insert-info" "evt")}
        {Lisp-Entry "on-insert-no" #f 76 11 76 23 ("no" "'no" "insert-info" "evt")}
        {Lisp-Entry "on-insert-count" #f 80 11 80 26 ("count" "'count" "insert-info" "evt")}
        {Lisp-Entry "on-insert-date" #f 84 11 84 25 ("date" "'date" "insert-info" "evt")}
        {Lisp-Entry "on-insert-time" #f 88 11 88 25 ("time" "'time" "insert-info" "evt")}
        {Lisp-Entry "insert-info" #f 97 11 97 22 ("insert-styled" "what:" "Default" "'Default" "base:" "Info-Style" "new" "style" "let" "what")}}}})
"Page-Toolbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Toolbar.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Toolbar" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Page-Toolbar" #f 49 7 49 19 ("on-close" "60" "close" "14" "height" "width" "fit:" "on-fit" "selected?:" "tooltip?:" ":icons" "portfolio:" "both" "on-page-setup" "page-setup" "38" "file" ":layout" "on-layout" "22" "56" "title:" "printer" "0" "12" "Dimension" "size:" "active-separator" "on-print-preview" "print-preview" "on-print" ":document" "Event-Handler" "action-handler:" "Bitmap-Resource" "image-name:" "tooltip-text:" "print" "name:" "Toolbar")
        {Lisp-Entry "install" #f 69 11 69 18 ("file" "'file" "printer" "'printer" "active-separator" "'active-separator" "locate" "set-visible?" "nextmethod" "rest")}
        {Lisp-Entry "client-activate" #f 77 11 77 26 ("activate-page" "when" "Page-Editor" "find-guest" "editor" "get-stage" "stage" "let*")}
        {Lisp-Entry "host-icon" #f 89 16 89 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 93 16 93 26 ()}}}})
"Page-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Page-Workspace.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Page-Workspace" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Page-Workspace" #f 46 7 46 21 ("Page-Text-Palette" "-32" "status" "Page-Status" "-23" "line" "second" "text" "Page-Toolbar" "model-name:" "first" "location:" "vert" "orientation:" "split" "state:" "27" "division:" "edge" "separator:" "toolbar" "name:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Workspace-Preferences")
        {Lisp-Entry "previous" #f 49 12 49 20 ("generate")}}}})
"Paint-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Paint-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Paint-Event" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Paint-Event" #f 44 7 44 18 ("Event")
        {Lisp-Entry "surface" #f 47 8 47 15 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("surface~self" "set!" "nextmethod" "surface" "sender" "kind")}
        {Lisp-Entry "get-dc" #f 55 18 55 24 ("surface")}
        {Lisp-Entry "get-hdc" #f 59 18 59 25 ("surface" "get-hdc")}}}})
"Palette"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "Palette.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.Palette" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Palette" #f 46 7 46 14 ("get-desktop" "else" "get-toplevel" "default-parent" "method" "windows" "cond-expand" "Overlapped")
        {Lisp-Entry "new-root" #f 68 11 68 19 ("offscreen?:" "Palette-Host" "new")}
        {Lisp-Entry "mouse-activate?" #f 100 11 100 26 ()}
        {Lisp-Entry "on-close" #f 104 11 104 19 ("processed" "set-visible?" "evt")}}}})
"Palette-Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "hosting" "Palette-Host.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.hosting.Palette-Host" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Palette-Host" #f 52 7 52 19 ("Host-View")
        {Lisp-Entry "on-close" #f 60 11 60 19 ("player" "hide" "evt")}
        {Lisp-Entry "dock-palette" #f 70 11 70 23 ("dock-feedback" "highlight:" "get-toplevel" "list" "include:" "dock-to" "click:" "pick-figure")}
        {Lisp-Entry "dock-feedback" #f 77 11 77 24 ("figure-rect" "self" "set-feedback-rect" "pos" "figure" "picker")}
        {Lisp-Entry "figure-rect" #f 82 16 82 27 ("get-bounds" "get-parent" "acquire" "get-root" "root" "get-display" "display" "get-player" "player" "let" "View" "is?" "when" "figure" "picker")}
        {Lisp-Entry "dock-to" #f 91 11 91 18 ("set-selection" "set-guest" "set-title" "parent:" "Docked-Host" "new" "new-host" "close" "unanchor-guest" "set-parent" "get-title" "title" "guest" "player" "let*" "null?" "Pad-Window" "find-ascendant" "to-pad" "get-guest" "to-guest" "bell" "Host-View" "is-not?" "if" "get-player" "to-player" "let" "pos" "to-view")}}
      {Lisp-Entry "Palette-Menu" #f 117 7 117 19 ("on-dock" ":form" "Event-Handler" "action-handler:" "title:" "dock" "name:" "Context-Menu")
        {Lisp-Entry "on-dock" #f 125 11 125 18 ("dock-palette" "evt")}}}})
"Palette-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Palette-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Palette-Preferences" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Palette-Preferences" #f 47 7 47 26 ("Bitmap-Resource" "icon:" "Figure-Preferences")
        {Lisp-Entry "find-client" #f 59 11 59 22 ("get-name" "autoload" "get-toplevel" "find-host")}
        {Lisp-Entry "apply-preferences" #f 68 11 68 28 ("set-visible?" "client-activate" "nextmethod" "client")}}}})
"Paragraph"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Paragraph.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Paragraph" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Paragraph" #f 49 7 49 16 ("Outline-Row")
        {Lisp-Entry "format" #f 52 18 52 24 ("generate")}
        {Lisp-Entry "string" #f 53 18 53 24 ("generate")}
        {Lisp-Entry "runs" #f 54 18 54 22 ("generate")}
        {Lisp-Entry "lines" #f 55 18 55 23 ("generate")}
        {Lisp-Entry "print" #f 58 11 58 16 ("string" "write" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "set-size" #f 66 11 66 19 ("size" "set!" "sz")}
        {Lisp-Entry "get-length" #f 75 18 75 28 ("string" "cardinality" "cast")}
        {Lisp-Entry "paragraph-left" #f 79 18 79 32 ("format" "get-left-margin" "position" "get-h" "+")}
        {Lisp-Entry "paragraph-top" #f 83 18 83 31 ("position" "get-v")}
        {Lisp-Entry "compute-width" #f 92 18 92 31 ("runs" "compute-width" "increase!" "run" "function" "for-each" "format" "get-left-margin" "width" "let")}
        {Lisp-Entry "range-region" #f 106 21 106 33 ("or" "'or" "combine!" "self" "if" "range-region" "sub" "with-closed" "limit" "function" "for-each-range" "region" "w" "e" "col->text" "s" "else" "offset-rect" "offset" "get-bottom" "get-top" "-" "right" "col->view" "get-h" "beginning" "lines" "last" "line" "let*" "acquire-delta" "rect:" "Region" "get-height" "+" "Rect" "new" "rect" "not" "=" "and" "cond" "size" "get-width" "width" "paragraph-top" "top" "paragraph-left" "left" "string" "cardinality" "re" "0" "either" "rs" "let" "sc" "dv" "dh" "end" "start" "left-padding")}
        {Lisp-Entry "for-each-range" #f 137 11 137 25 ("else" "cond" "get-length" "len" "line" "let*" "to" "from" "n" "for" "loop" "limit" "beginning" "let" "get-col" "get-line" "get-row" "=" "if" "/=" "when" "proc" "ignored" "end" "start")}
        {Lisp-Entry "get-line" #f 156 18 156 26 ("lines" "element" "n")}
        {Lisp-Entry "get-line-at" #f 160 18 160 29 ("col->text" "get-row" "get-line" "col")}
        {Lisp-Entry "get-run" #f 169 18 169 25 ("continuation-return" "<=" ">" "and" "when" "limit" "offset" "run" "runs" "for-each-run" "return" "function" "continuation-capture" "col")}
        {Lisp-Entry "first-run" #f 179 18 179 27 ("car" "runs" "null?" "if")}
        {Lisp-Entry "range-runs" #f 185 21 185 31 ("get-output" "right" "left" "over" "put" "inside" "case" "limit" "offset" "where" "for-each-range-run" "get-style" "string" "subseq!" "Run" "e" "s" "run" "function" "make" "List-Factory" "new" "fact" "let" "end" "start")}
        {Lisp-Entry "for-each-run" #f 204 11 204 23 ("set!" "+" "limit" "get-length" "len" "let*" "run" "function" "for-each" "0" "offset" "let" "proc" "runs")}
        {Lisp-Entry "for-each-range-run" #f 222 11 222 29 ("right" "'right" "else" "left" "'left" "over" "'over" ">" "<" "inside" "'inside" "and" "outside" "'outside" ">=" "<=" "or" "cond" "limit" "offset" "run" "function" "runs" "for-each-run" "proc" "end" "start")}
        {Lisp-Entry "set-style" #f 245 21 245 30 ("s" "function" "modify-style" "style" "end" "start")}
        {Lisp-Entry "set-text-alignment" #f 251 21 251 39 ("set-alignment" "extend" "let" "style" "function" "modify-style" "alignment" "end" "start")}
        {Lisp-Entry "set-text-font" #f 259 21 259 34 ("set-font" "extend" "let" "style" "function" "modify-style" "font" "end" "start")}
        {Lisp-Entry "set-text-color" #f 267 21 267 35 ("set-color" "extend" "let" "style" "function" "modify-style" "color" "end" "start")}
        {Lisp-Entry "set-highlight-color" #f 275 21 275 40 ("set-highlight" "extend" "let" "style" "function" "modify-style" "color" "end" "start")}
        {Lisp-Entry "set-font-name" #f 283 21 283 34 ("set-font" "get-font" "extend-font-name" "font" "extend" "let*" "font:" "supports?" "when" "style" "function" "modify-style" "name" "end" "start")}
        {Lisp-Entry "set-point-size" #f 293 21 293 35 ("set-font" "get-font" "extend-point-size" "font" "extend" "let*" "font:" "supports?" "when" "style" "function" "modify-style" "size" "end" "start")}
        {Lisp-Entry "toggle-bold" #f 303 21 303 32 ("set-font" "get-font" "toggle-bold" "font" "extend" "let*" "style" "function" "modify-style" "end" "start")}
        {Lisp-Entry "toggle-italic" #f 312 21 312 34 ("set-font" "get-font" "toggle-italic" "font" "extend" "let*" "style" "function" "modify-style" "end" "start")}
        {Lisp-Entry "toggle-underline" #f 321 21 321 37 ("set-font" "get-font" "toggle-underline" "font" "extend" "let*" "style" "function" "modify-style" "end" "start")}
        {Lisp-Entry "modify-style" #f 330 11 330 23 ("get-output" "coalesce-runs" "runs" "set!" "right" "left" "over" "inside" "put" "outside" "case" "limit" "offset" "where" "for-each-range-run" "intern-style" "new-style" "style" "make" "get-style" "subseq!" "Run" "e" "s" "run" "function" "split" "List-Factory" "new" "fact" "string" "cardinality" "0" "either" "parent" "text" "let*" "proc" "end" "start")}
        {Lisp-Entry "remove-coloring" #f 363 21 363 36 ("runs" "set!" "set-style" "get-color" "Text-Style" "is?" "and" "when" "get-style" "style" "run" "function" "for-each" "modified?" "parent" "text" "let" "default-style")}
        {Lisp-Entry "coalesce-runs" #f 375 11 375 24 ("set-cdr!" "cardinality" "cast" "get-string" "grow-subseq!" "set!" "propagate?" "not" "neq?" "or" "get-style" "previous-style" "car" "previous-run" "not-null?" "while" "cdr" "scan" "previous" "let" "null?" "if" "runs")}
        {Lisp-Entry "flatten" #f 396 21 396 28 ("get-height" "row-height" "list" "lines" "set!" "0" "runs" "parent" "Line" "new" "line" "let")}
        {Lisp-Entry "wrap" #f 402 21 402 25 ("+" "row-height" "lines~self" "wrap" "get-length" "increase!" "set!" "reset" "height-update" "for-each" "get-height" "height" "Line" "line" "tail" "'tail" "justify" "center" "centered" "case" "line-left" "get-output" "runs" "right" "break-line" "put" "run" "function" "place" "lruns" "List-Factory" "new" "lines" "get-tabs" "tabs" "top" "left" "get-paragraph-spacing" "spacing" "get-left-margin" "margin" "format" "get-justification" "justification" "offset" "0" "rank" "parent" "text" "let*" "width" "context")}
        {Lisp-Entry "Bullet-Outside" #f 443 14 443 28 ("Blue" "name:" "Color")}
        {Lisp-Entry "Bullet-Inside" #f 446 14 446 27 ("255" "blue:" "102" "green:" "51" "red:" "Color")}
        {Lisp-Entry "draw" #f 450 11 450 15 ("lines" "get-height" "increase!" "draw-line" "line" "function" "for-each" "draw-bullet" "get-bulleted?" "when" "0" "v" "h" "format" "get-left-margin" "left" "get-tabs" "tabs" "parent" "text" "let*" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-bullet" #f 464 11 464 22 ("Rect" "new" "ellipse" "7" "set!" "8" "=" "when" "1" "2" "-" "fxround/" "+" "vert" "Bullet-Inside" "get-bullet-inside" "inside" "Bullet-Outside" "format" "get-bullet-outside" "either" "outside" "40" "percent" "fxround" "size" "lines" "car" "get-height" "height" "let*" "left" "v" "h" "surface")}
        {Lisp-Entry "replace-range" #f 481 21 481 34 ("append!" "coalesce-runs" "runs" "set-string" "limit" "offset" "run" "function" "for-each-run" "list" ">" "replacement-list" "subseq!" "Run" "new" "replacement" "replace-subseq!" "set!" "get-default-style" "find-propagatable-style" "propagate-styles?" "not-null?" "and" "if" "style" "get-length" "after" "0" "range-runs" "before" "-" "delta" "+" "new-end" "string" "either" "cardinality" "inserted" "parent" "text" "let*" "str" "end" "start")}
        {Lisp-Entry "replace-runs" #f 505 21 505 33 ("append!" "coalesce-runs" "runs" "self" "get-view" "set-parent" "View-Style" "is?" "when" "get-style" "style" "let" "subseq!" "set-string" "limit" "offset" "run" "function" "for-each-run" "replace-subseq!" "set!" "get-length" "after" "0" "range-runs" "before" "-" "delta" "+" "new-end" "string" "either" "cardinality" "inserted" "runs->str" "str" "let*" "replacement" "end" "start")}
        {Lisp-Entry "find-propagatable-style" #f 529 11 529 34 ("parent" "get-default-style" "continuation-return" "propagate?" "when" "get-style" "style" "let" "run" "for-each-reversed" "return" "function" "continuation-capture" "runs")}
        {Lisp-Entry "replace-beginning" #f 540 21 540 38 ("0" "replace-runs" "runs")}
        {Lisp-Entry "replace-ending" #f 544 21 544 35 ("replace-runs" "string" "cardinality" "cast" "len" "let" "runs")}
        {Lisp-Entry "runs->str" #f 549 11 549 20 ("get-output-string" "get-string" "display" "run" "function" "for-each" "open-output-string" "printer" "let" "runs")}
        {Lisp-Entry "view->col" #f 563 21 563 30 ("get-length" "lines" "get-offset" "+" "continuation-return" "when" "view->col" "col" "line" "for-each" "return" "function" "continuation-capture" "get-v" "format" "get-left-margin" "get-h" "-" "Point" "new" "let" "view")}
        {Lisp-Entry "col->view" #f 575 21 575 30 ("get-v" "get-h" "paragraph-left" "+" "Point" "new" "continuation-return" "when" "get-offset" "-" "col->view" "view" "neq?" "strict?" "let*" "line" "for-each" "return" "function" "continuation-capture" "lines" "last" "let" "col")}
        {Lisp-Entry "col->text" #f 587 21 587 30 ("get-length" "get-rank" "Cell" "new" "lines" "set!" "continuation-return" "when" "col->text" "text" "line" "for-each" "return" "function" "continuation-capture" "last" "let" "col")}
        {Lisp-Entry "text->col" #f 600 21 600 30 ("text")}
        {Lisp-Entry "view->text" #f 605 21 605 31 ("view->col" "col->text" "view")}
        {Lisp-Entry "text->view" #f 610 21 610 31 ("text->col" "col->view" "text")}}}})
"Password-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Password-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Password-Domain" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Password-Domain" #f 45 7 45 22 ("Domain")
        {Lisp-Entry "validate-value" #f 53 11 53 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "string?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}}}})
"Password-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Password-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Password-Request" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Password-Request" #f 46 7 46 23 ("prefix" "name:" "title:" "String-Request")}}})
"Password-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Password-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Password-Row" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Password-Row" #f 49 7 49 19 ("String-Row")
        {Lisp-Entry "present" #f 57 11 57 18 ("nextmethod" "not" "if" "value")}
        {Lisp-Entry "editor-class" #f 68 11 68 23 ("Password-Text-View")}
        {Lisp-Entry "set-edited-value" #f 72 11 72 27 ("either" "editor" "set-string-content" "value")}}
      {Lisp-Entry "Password-Text-View" #f 81 7 81 25 ("Password" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Value-Text-View")
        {Lisp-Entry "copy-selection" #f 88 11 88 25 ("bell")}
        {Lisp-Entry "draw-outline" #f 92 11 92 23 ("draw-caret" "draw-password" "draw-selection" "unless" "printing?:" "getf" "printing?" "bottom" "top" "let" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-password" #f 103 11 103 24 ("draw-text" "Black" "name:" "Color" "set-text-color" "set-font" "-" "get-v" "+" "v" "get-h" "h" "get-font" "get-default-style" "style" "font" "get-metrics" "font-height" "get-height" "height" "get-position" "pos" "cardinality" "make-string" "hidden" "get-string" "password" "0" "get-paragraph" "paragraph" "let*" "surface")}}}})
"Password-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Password-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Password-Text-View" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Password-Text-View" #f 48 7 48 25 ("top-padding:" "2" "left-padding:" "Password" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Text-View")
        {Lisp-Entry "copy-selection" #f 55 11 55 25 ("bell")}
        {Lisp-Entry "get-context-menu" #f 59 11 59 27 ("new-text-context-menu")}
        {Lisp-Entry "draw-outline" #f 63 11 63 23 ("draw-caret" "draw-password" "draw-selection" "unless" "printing?:" "getf" "printing?" "bottom" "top" "let" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-password" #f 74 11 74 24 ("get-enabled?" "draw-text" "Black" "name:" "Color" "set-text-color" "set-font" "-" "get-v" "+" "v" "get-h" "h" "get-font" "get-default-style" "style" "font" "get-metrics" "font-height" "get-height" "height" "get-position" "pos" "cardinality" "make-string" "hidden" "get-string" "password" "0" "get-paragraph" "paragraph" "let*" "surface")}}}})
"Path"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "path" "Path.jazz"} 1226584782
    {Lisp-Entry "jazz.library.path.Path" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Path" #f 40 7 40 11 ("Object")
        {Lisp-Entry "path" #f 43 8 43 12 ()}
        {Lisp-Entry "construct-literal" #f 46 16 46 33 ("self" "new" "path" "context")}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("path~self" "set!" "nextmethod" "path")}
        {Lisp-Entry "compare-object" #f 55 11 55 25 (":not-equal" "else" ":equal" "get-path" "path" "=" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "foldable?" #f 65 11 65 20 ()}
        {Lisp-Entry "fold-object" #f 70 11 70 22 ("path" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "print" #f 77 11 77 16 ("path" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-path" #f 88 18 88 26 ("path")}
        {Lisp-Entry "set-path" #f 92 18 92 26 ("path" "set!" "value")}
        {Lisp-Entry "get-parent" #f 101 18 101 28 ("path" "butlast" "Path" "new")}
        {Lisp-Entry "present" #f 110 18 110 25 ("path" "format")}
        {Lisp-Entry "follow-component" #f 119 26 119 42 ("path" "child" "root")}
        {Lisp-Entry "follow-form" #f 123 26 123 37 ("path" "child" "set!" "name" "function" "for-each" "form")}}}})
"Pathname-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Pathname-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Pathname-Request" #f 37 9 37 40 ("Content-Tree" "Hierarchy-Combo" "register-autoclass" "jazz")
      {Lisp-Entry "Pathname-Request" #f 49 7 49 23 ("5" "on-cancel" "cancel" "on-ok" ":host" "default?:" "enabled?:" "24" "80" "tail" "ok" "south" "36" "buttonbar" "toplevel-controls?:" "235" "width:" "title:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "name" "filled-column:" "content" "fill" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "center" "content-border" "hierarchy" "166" "blue:" "188" "green:" "red:" "Medium" "Color" "border-color:" "3" "border-insets:" "200" "2" "on-up" "up" "on-forward" "forward" "on-backward" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "backward" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "toolbar" "name:" "border" "layout-type:" "300" "500" "Dimension" "size:" "History-Provider" "Layout-View")
        {Lisp-Entry "directory" #f 74 12 74 21 ()}
        {Lisp-Entry "extensions" #f 75 12 75 22 ()}
        {Lisp-Entry "anchors" #f 76 12 76 19 ()}
        {Lisp-Entry "history-manager" #f 79 8 79 23 ("self" "History-Manager" "new")}
        {Lisp-Entry "finish" #f 82 11 82 17 ("update" "setup-directory" "nextmethod" "rest")}
        {Lisp-Entry "setup-directory" #f 88 11 88 26 ("get-current-directory" "set!" "directory" "not" "when")}
        {Lisp-Entry "install-in-host" #f 93 11 93 26 ("get-tree" "acquire-focus" "host")}
        {Lisp-Entry "get-tree" #f 102 11 102 19 ("content" "'content" "locate")}
        {Lisp-Entry "get-hierarchy" #f 106 11 106 24 ("hierarchy" "'hierarchy" "locate")}
        {Lisp-Entry "get-directory" #f 110 18 110 31 ("directory")}
        {Lisp-Entry "set-directory" #f 114 18 114 31 ("directory" "set!" "dir")}
        {Lisp-Entry "install-directory" #f 118 18 118 35 ("update" "set-directory" "directory" "History-Directory" "new" "history-manager" "add-history" "dir")}
        {Lisp-Entry "effective-extensions" #f 124 11 124 31 ("extensions" "cdr" "string?" "if" "ext" "function" "map")}
        {Lisp-Entry "update" #f 137 29 137 35 ("update-buttons" "update-content" "update-history" "update-hierarchy")}
        {Lisp-Entry "update-hierarchy" #f 144 11 144 27 ("set-value" "directory" "get-hierarchy" "reverse" "get-name" "list" "pathname" "function" "map" "set-choices" "hierarchy" "'hierarchy" "locate" "combo" "let")}
        {Lisp-Entry "update-history" #f 152 11 152 25 ("'forward" "not-null?" "'backward" "locate" "set-enabled?" "get-forward-history" "forward" "history-manager" "get-backward-history" "backward" "let")}
        {Lisp-Entry "update-content" #f 159 29 159 43 ()}
        {Lisp-Entry "update-buttons" #f 163 29 163 43 ("up" "'up" "locate" "set-enabled?" "get-directory" "get-parent" "parent" "let")}
        {Lisp-Entry "add-pathname" #f 168 11 168 23 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "Bitmap-Resource" "directory?" "if" "image" "get-name" "title" "let" "ci=?" "test:" "effective-extensions" "get-extension" "member?" "extensions" "file?" "not" "or" "when" "pathname" "tree")}
        {Lisp-Entry "get-modal-result" #f 182 11 182 27 ("selected-pathname" "anchorize" "directory" "set-current-directory")}
        {Lisp-Entry "down" #f 192 11 192 15 ("install-directory" "dir")}
        {Lisp-Entry "current-history-item" #f 201 11 201 31 ("directory" "History-Directory" "new")}
        {Lisp-Entry "on-backward" #f 210 11 210 22 ("update" "history-manager" "go-backward-history" "get-directory" "set-directory" "evt")}
        {Lisp-Entry "on-forward" #f 215 11 215 21 ("update" "history-manager" "go-forward-history" "get-directory" "set-directory" "evt")}
        {Lisp-Entry "on-up" #f 220 11 220 16 ("get-directory" "get-parent" "install-directory" "evt")}
        {Lisp-Entry "hierarchy-change" #f 224 29 224 45 ("install-directory" "dir")}
        {Lisp-Entry "selection-change" #f 228 29 228 45 ("update-buttons")}
        {Lisp-Entry "default-action" #f 232 29 232 43 ()}
        {Lisp-Entry "ok-enabled?" #f 236 11 236 22 ("ok" "'ok" "locate" "get-enabled?")}
        {Lisp-Entry "on-double-click" #f 240 11 240 26 ("default-action" "evt")}
        {Lisp-Entry "on-return-press" #f 245 11 245 26 ("default-action" "evt")}
        {Lisp-Entry "on-escape-press" #f 250 11 250 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "selected-pathname" #f 260 11 260 28 ("get-tree" "get-single-selected-data")}
        {Lisp-Entry "anchorize" #f 264 11 264 20 ("anchors" "anchors:" "anchorize" "pathname")}}
      {Lisp-Entry "Hierarchy-Combo" #f 273 7 273 22 ("Combo-Box")
        {Lisp-Entry "content-change" #f 276 11 276 25 ("get-value" "get-host" "get-guest" "hierarchy-change" "origin")}}
      {Lisp-Entry "History-Directory" #f 288 7 288 24 ("History-Item")
        {Lisp-Entry "directory" #f 291 8 291 17 ("generate")}
        {Lisp-Entry "initialize" #f 294 11 294 21 ("directory~self" "set!" "nextmethod" "directory")}
        {Lisp-Entry "print" #f 299 11 299 16 ("directory" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "Content-Tree" #f 310 7 310 19 ("Tree-View")
        {Lisp-Entry "selection-change" #f 313 11 313 27 ("get-host" "get-guest" "selection-change" "user-origin?" "force?" "old-selection")}}}})
"Pathname-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Pathname-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Pathname-Row" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Pathname-Row" #f 48 7 48 19 ("Value-Row")
        {Lisp-Entry "display-logical?" #f 51 12 51 28 ("set-display-logical?" "get-display-logical?")}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("set-display-logical?" "self" "value-row:" "editor-class" "new" "editor" "set!" "nextmethod" "apply" "others" "display-logical?" "bind-keywords" "rest")}
        {Lisp-Entry "editor-class" #f 66 11 66 23 ("Pathname-Row-Editor")}
        {Lisp-Entry "get-display-logical?" #f 75 18 75 38 ("editor" "get-display-logical?")}
        {Lisp-Entry "set-display-logical?" #f 79 18 79 38 ("editor" "set-display-logical?" "value")}
        {Lisp-Entry "enter-pathname-value" #f 88 11 88 31 ("enter-value" "value")}
        {Lisp-Entry "present" #f 97 11 97 18 ("editor" "present-moniker" "value")}
        {Lisp-Entry "close-editor?" #f 106 11 106 24 ()}
        {Lisp-Entry "get-edited-value" #f 110 11 110 27 ("editor" "get-moniker")}
        {Lisp-Entry "set-edited-value" #f 114 11 114 27 ("update?:" "editor" "set-moniker" "value")}
        {Lisp-Entry "get-edited-modified?" #f 118 11 118 31 ("editor" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" #f 122 11 122 31 ("editor" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" #f 126 11 126 22 ("editor" "get-text" "show-text-cursor")}
        {Lisp-Entry "focused-editor" #f 130 11 130 25 ("editor" "get-text")}}
      {Lisp-Entry "Pathname-Row-Editor" #f 139 7 139 26 ("top-padding:" "1" "left-padding:" "text" "content" "scroller" "name:" "Moniker-Browser")
        {Lisp-Entry "value-row" #f 149 12 149 21 ("set-value-row" "get-value-row")}
        {Lisp-Entry "form-model" #f 152 11 152 21 ("nextmethod" "else" "Pathname-Value-Text-View" "text" "get-name" "case" "form")}
        {Lisp-Entry "get-value-row" #f 158 18 158 31 ("value-row")}
        {Lisp-Entry "set-value-row" #f 162 18 162 31 ("text" "'text" "locate" "set-value-row" "value-row" "set!" "value")}
        {Lisp-Entry "moniker-update" #f 167 11 167 25 ("get-moniker" "value-row" "enter-pathname-value")}}
      {Lisp-Entry "Pathname-Value-Text-View" #f 176 7 176 31 ("Moniker-Text-View")
        {Lisp-Entry "value-row" #f 179 12 179 21 ("set-value-row" "get-value-row")}
        {Lisp-Entry "get-value-row" #f 187 18 187 31 ("value-row")}
        {Lisp-Entry "set-value-row" #f 191 18 191 31 ("value-row" "set!" "value")}
        {Lisp-Entry "up-arrow-move" #f 200 11 200 24 ("value-row" "editor-up-arrow" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" #f 204 11 204 26 ("value-row" "editor-down-arrow" "scroll?" "extend?")}
        {Lisp-Entry "document-menu" #f 208 11 208 24 ()}
        {Lisp-Entry "focus-validate" #f 218 11 218 25 ("value-row" "editor-focus-validate" "view")}
        {Lisp-Entry "focus-lose" #f 222 11 222 21 ("value-row" "editor-focus-lose" "nextmethod" "view")}
        {Lisp-Entry "focus-master" #f 227 11 227 23 ("value-row" "get-tree")}}}})
"Pathname-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Pathname-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Pathname-Tester" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Pathname-Tester" #f 46 7 46 22 ("title:" "Tester")
        {Lisp-Entry "test" #f 53 11 53 15 ("test-pathname" "invoke")}
        {Lisp-Entry "test-pathname" #f 62 11 62 24 ()}}}})
"Pen"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "Pen.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.Pen" #f 37 9 37 28 ("jazz")
      {Lisp-Entry "Pen" #f 45 7 45 10 ("Object")
        {Lisp-Entry "name" #f 48 8 48 12 ("generate")}
        {Lisp-Entry "width" #f 49 8 49 13 ("generate")}
        {Lisp-Entry "color" #f 50 8 50 13 ("generate")}
        {Lisp-Entry "style" #f 51 8 51 13 ("generate")}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("style~self" "width~self" "color~self" "name~self" "set!" "nextmethod" "color" "color:" "1" "width" "width:" "solid" "'solid" "style" "style:" "name" "name:")}
        {Lisp-Entry "fold-literal" #f 62 11 62 23 ("name" ",name" "',name" "registered-pen")}
        {Lisp-Entry "print" #f 66 11 66 16 ("color" "when" "width" "function" "print-unreadable" "self" "class-of" "type-name" "identifier-name" "format" "name" "if" "readably" "printer")}
        {Lisp-Entry "parse-string" #f 82 23 82 35 ("dispatch" "car" "symbol?" "1" "=" "and" "self" "type:" "object:" "Convertion-Error" "new" "signal" "function" "err" "length" "len" "read-string-content" "lst" "let*" "empty-string?" "if" "string")}
        {Lisp-Entry "present" #f 93 18 93 25 ("present" "'present" "unimplemented" "->string" "name" "if")}}}})
"Pen-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Pen-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Pen-Row" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Pen-Row" #f 47 7 47 14 ("Color-Row")}}})
"Performance-Query"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "performance" "platform" "windows" "Performance-Query.jazz"} 1226584785
    {Lisp-Entry "jazz.system.performance.platform.windows.Performance-Query" #f 37 9 37 67 ("jazz")
      {Lisp-Entry "Performance-Query" #f 44 7 44 24 ("Object")
        {Lisp-Entry "query" #f 47 8 47 13 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("destroy-mandatory" "query~self" "set!" "validate-status" "0" "NULL" "PdhOpenQuery" "query" "status" "receive" "nextmethod")}
        {Lisp-Entry "destroy" #f 58 11 58 18 ("nextmethod" "query" "PdhCloseQuery" "validate-status")}
        {Lisp-Entry "add-counter" #f 63 18 63 29 ("validate-status" "0" "query" "PdhAddCounter" "counter" "status" "receive" "counter-path" "let" "browse?" "counter-name" "object-name" "path" "bind-keywords" "rest")}
        {Lisp-Entry "counter-path" #f 71 11 71 23 ("error" "else" "guess-process-instance" "module-base" ":string" "format" "and" "browse-counter-path" "cond" "browse?" "counter-name" "object-name" "path")}
        {Lisp-Entry "collect-data" #f 80 18 80 30 ("query" "PdhCollectQueryData" "validate-status")}
        {Lisp-Entry "get-counter-value" #f 84 18 84 35 ("PDH_FMT_COUNTERVALUE-free" "PDH_FMT_COUNTERVALUE-longValue-ref" "prog1" "NULL" "PDH_FMT_LONG" "PdhGetFormattedCounterValue" "validate-status" "PDH_FMT_COUNTERVALUE-make" "value" "let" "counter")}
        {Lisp-Entry "browse-counter-path" #f 91 11 91 30 ("BrowseCounterPath")}
        {Lisp-Entry "validate-status" #f 95 11 95 26 ("error" "0" "/=" "when" "status")}}}})
"Period"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "utility" "Period.jazz"} 1226584782
    {Lisp-Entry "jazz.library.utility.Period" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Period" #f 40 7 40 13 ("Range")
        {Lisp-Entry "get-duration" #f 44 18 44 30 ("Time" "new" "get-duration" "start" "end" "get-time" "get-elapse" "-" "delta" "let" "field")}
        {Lisp-Entry "present" #f 50 18 50 25 ("end" "french:" "english:" "Locales" "localize" "start" "present-date" ":string" "format")}
        {Lisp-Entry "for-each-day" #f 58 18 58 30 ("1" "day" "'day" "add" "set!" "end" "<=" "while" "start" "date" "let" "proc")}
        {Lisp-Entry "includes-day-of-week?" #f 66 18 66 39 ("return" "get-day-of-week" "Date" "symbolic-day-of-week" "=" "when" "date" "function" "for-each-day" "day")}}}})
"Period-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Period-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Period-Domain" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Period-Domain" #f 46 7 46 20 ("Domain")
        {Lisp-Entry "validate-value" #f 54 11 54 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "Period" "is-not?" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 64 11 64 18 ("get-end" "get-start" "present-date-day" "format" "value")}}}})
"Period-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Period-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Period-Row" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Period-Row" #f 47 7 47 17 ("Value-Row")}
      {Lisp-Entry "Period-Row" #f 53 7 53 17 ("Value-Row")
        {Lisp-Entry "present" #f 61 11 61 18 ("get-end" "get-start" "present-date-day" "format" "period" "function" "map" "join" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" #f 77 11 77 27 ("Date" "parse-date" "Period" "new" "separator:" "parse-strings" "end" "start" "bind" "function" "map" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"Periods-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "calendar" "Periods-Chooser.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.calendar.Periods-Chooser" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Periods-Chooser" #f 49 7 49 22 ("on-cancel" "194" "cancel" "default?:" "on-ok" ":host" "315" "110" "ok" "8" "270" "300" "6" "on-remove-period" "123" "remove-period" "on-add-period" "95" "add-period" "on-edit-end" "61" "edit-end" "on-edit-start" "24" "80" "192" "edit-start" "end" "84" "width:" "display-images?:" "toplevel-controls?:" "start" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-selection-change" "selection-handler:" "on-action" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "filled-column:" "periods-tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "254" "172" "33" "periods-border" "Label" "name:" "Font" "font:" "16" "191" "9" "10" "Point" "position:" "title:" "352" "283" "Dimension" "size:" "View")
        {Lisp-Entry "periods" #f 52 12 52 19 ("set-periods" "get-periods")}
        {Lisp-Entry "finish" #f 75 11 75 17 ("acquire-focus" "update-buttons" "setup-selection" "setup-periods" "get-tree" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-periods" #f 89 18 89 29 ("periods")}
        {Lisp-Entry "set-periods" #f 93 18 93 29 ("periods" "set!" "value")}
        {Lisp-Entry "get-tree" #f 97 11 97 19 ("periods-tree" "'periods-tree" "locate")}
        {Lisp-Entry "host-title" #f 106 16 106 26 ()}
        {Lisp-Entry "host-position" #f 110 16 110 29 ("300" "450" "Point")}
        {Lisp-Entry "host-size" #f 114 16 114 25 ("120" "302" "Dimension")}
        {Lisp-Entry "on-action" #f 123 11 123 20 ("update-buttons" "evt")}
        {Lisp-Entry "on-selection-change" #f 127 11 127 30 ("update-buttons" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-edit-start" #f 133 11 133 24 ("update" "set-start" "get-start" "initial-date:" "host-title:" "Calendar-Dialog" "get-modal" "date" "periods" "element" "period" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-edit-end" #f 142 11 142 22 ("update" "set-end" "get-end" "initial-date:" "host-title:" "Calendar-Dialog" "get-modal" "date" "periods" "element" "period" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-add-period" #f 151 11 151 24 ("update" "append" "periods" "set!" "Period" "new" "list" "period" "1" "week" "'week" "add" "initial-date:" "end" "host-title:" "Calendar-Dialog" "get-modal" "start" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-remove-period" #f 160 11 160 27 ("set-single-selection" "get-visible-count" "<" "when" "update" "remove" "set!" "periods" "element" "period" "get-single-selection" "selection" "get-tree" "tree" "let*" "evt")}
        {Lisp-Entry "on-return-press" #f 171 11 171 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "on-escape-press" #f 177 11 177 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "update" #f 187 11 187 17 ("get-tree" "setup-periods")}
        {Lisp-Entry "setup-periods" #f 191 11 191 24 ("periods" "user-data:" "get-end" "Tree-Label" "get-start" "present-date-day" "title:" "Bitmap-Resource" "image:" "Tree-Node" "new" "list" "children:" "add-row" "period" "for-each" "remove-every-row" "function" "with-update-locked" "tree")}
        {Lisp-Entry "setup-selection" #f 200 11 200 26 ("0" "list" "set-selection" "periods" "when" "tree")}
        {Lisp-Entry "update-buttons" #f 210 11 210 25 ("remove-period" "'remove-period" "add-period" "'add-period" "edit-end" "'edit-end" "edit-start" "'edit-start" "locate" "set-enabled?" "begin" "null?" "if" "get-single-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "get-modal-result" #f 230 11 230 27 ("get-output" "put" "get-user-data" "period" "rank" "row" "function" "for-each-visible-row" "List-Factory" "new" "periods" "get-tree" "tree" "let")}}}})
"Periods-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Periods-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Periods-Row" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Periods-Row" #f 48 7 48 18 ("Combo-Row")}
      {Lisp-Entry "Periods-Row" #f 54 7 54 18 ("Combo-Row")
        {Lisp-Entry "initialize" #f 62 11 62 21 ("choose" "'choose" "set-kind" "nextmethod" "apply" "rest")}
        {Lisp-Entry "combo-choose" #f 72 11 72 23 ("focus-editor" "enter-edited-value" "set-edited-value" "periods:" "Periods-Chooser" "get-modal" "value" "let")}
        {Lisp-Entry "present" #f 85 11 85 18 ("get-end" "get-start" "present-date-day" "format" "period" "function" "map" "join" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" #f 101 11 101 27 ("Date" "parse-date" "Period" "new" "separator:" "parse-strings" "end" "start" "bind" "function" "map" "=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-body" "get-string-content" "string" "let")}
        {Lisp-Entry "set-edited-value" #f 111 11 111 27 ("present" "editor" "get-body" "set-string-content" "value")}}}})
"Picture"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "platform" "windows" "Picture.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.graphic.platform.windows.Picture" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Picture" #f 45 7 45 14 ("Surface")}
      {Lisp-Entry "Picture" #f 51 7 51 14 ("Surface")
        {Lisp-Entry "initialize" #f 54 11 54 21 ("destroy-mandatory" "10000" "0" "Rect" "setup-clipper" "CreateEnhMetaFile" "nextmethod" "NULL" "parse" "if" "filename" "let" "file" "file:")}
        {Lisp-Entry "destroy" #f 61 11 61 18 ("nextmethod" "set!" "CloseEnhMetaFile" "hdc" "not" "unless")}
        {Lisp-Entry "get-metafile" #f 68 18 68 30 ("set!" "CloseEnhMetaFile" "prog1" "hdc" "not" "unless")}
        {Lisp-Entry "delete-metafile" #f 74 23 74 38 ("DeleteEnhMetaFile" "metafile")}}}})
"Picture-Job"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "platform" "windows" "Picture-Job.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.graphic.platform.windows.Picture-Job" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Picture-Job" #f 45 7 45 18 ("Print-Job")
        {Lisp-Entry "directory" #f 48 8 48 17 ()}
        {Lisp-Entry "filename" #f 49 8 49 16 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("nextmethod" "apply" "filename~self" "directory~self" "set!" "rest" "resolution" "page-setup" "client" "filename" "directory")}
        {Lisp-Entry "start-page" #f 63 11 63 21 ("1" "+" "filename" "format" "directory" "new-file" "file:" "Picture" "new" "surface" "set!" "no")}
        {Lisp-Entry "end-page" #f 67 11 67 19 ("Picture" "delete-metafile" "close" "surface" "get-metafile" "metafile" "let" "no")}}}})
"Plain-Formatted-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Plain-Formatted-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Plain-Formatted-Text-View" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Plain-Formatted-Text-View" #f 47 7 47 32 ("Text" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Formatted-Text-View")
        {Lisp-Entry "install" #f 54 11 54 18 ("Variable" "Code" "Hyperlink-Style" "Dark-Blue" "Hyperlink" "Reference" "Dark-Red" "Color" "color:" "Font" "font:" "Text-Style" "add-style" "Heading5" "Heading4" "Heading3" "Heading2" "Heading1" "keep-with-next?:" "Default" "base:" "Heading0" "name:" "Format" "add-format" "nextmethod" "rest")}}}})
"Plain-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Plain-Text-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Plain-Text-Preferences" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Plain-Text-Preferences" #f 48 7 48 29 ("Blue" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Text-Preferences")
        {Lisp-Entry "title-color" #f 51 12 51 23 ("generate")}
        {Lisp-Entry "comment-color" #f 52 12 52 25 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 67 11 67 37 ("comment-color" "title-color")}
        {Lisp-Entry "property-presentation" #f 71 16 71 37 ("nextmethod" "else" "comment-color" "title-color" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 78 11 78 27 ("nextmethod" "else" "Color-Row" "new" "comment-color" "title-color" "field-name" "case" "property")}}}})
"Plain-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Plain-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Plain-Text-View" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Plain-Text-View" #f 47 7 47 22 ("12" "left-padding:" "Code" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Text-View")
        {Lisp-Entry "external-name" #f 54 16 54 29 ("plain-text" "'plain-text" "rest")}
        {Lisp-Entry "type-heuristic" #f 58 11 58 25 ("c" "'c" "jazz" "'jazz" "starts-with?" "if" "0" "paragraph-string" "first-line" "let")}
        {Lisp-Entry "host-workspaces" #f 70 11 70 26 ("text")}
        {Lisp-Entry "headers" #f 79 12 79 19 ("4" "make-string" "string-append" "list")}
        {Lisp-Entry "get-headers" #f 84 11 84 22 ("headers")}
        {Lisp-Entry "default-preferences" #f 93 14 93 33 ("Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "form>>" "instantiate")}
        {Lisp-Entry "preferences" #f 97 11 97 22 ("default-preferences" "error?:" "plain-text" "documents" "get-preferences" "either")}}}})
"Playlist-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Playlist-Manager.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Playlist-Manager" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Playlist-Manager" #f 48 7 48 23 ("presentation" "419" "width:" "title:" "on-select-left" "slides" "content" "vscroll?:" "hscroll?:" "document" "slides-border" "slides-splitter" "fill" "second" "library" "entry" "style:" "edge" "border-type:" "first" "366" "128" "library-border" "division:" "horz" "orientation:" "split" "state:" "center" "367" "library-splitter" "16" "on-import-text" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "north" "location:" "7" "flow" "33" "300" "toolbar" "name:" "2" "0" "Rect" "layout-insets:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "finish" #f 72 11 72 17 ("layout-view" "'presentation" "set-parent" "library" "'library" "locate" "set-client" "generate-presentation" "presentation" "Presentation-Generator" "new" "generator" "Jazz" "File" "file" "let*" "nextmethod" "initargs")}
        {Lisp-Entry "host-title" #f 87 16 87 26 ()}
        {Lisp-Entry "host-position" #f 91 16 91 29 ("100" "Point")}
        {Lisp-Entry "host-size" #f 95 16 95 25 ("600" "800" "Dimension")}
        {Lisp-Entry "on-import-text" #f 104 11 104 25 ("generate-presentation" "presentation" "Presentation-Generator" "new" "generator" "Jazz" "File" "file" "let*" "evt")}
        {Lisp-Entry "on-select-left" #f 117 11 117 25 ("set-selection-name" "offer-maint" "offer-compose" "offer-components" "offer-cond" "offer-char" "memq?" "offer-tab" "'offer-tab" "else" "selling-view" "'selling-view" "selling" "char-view" "'char-view" "char-activities" "char-special" "char-char" "char" "dest-view" "'dest-view" "destinations" "groups-view" "'groups-view" "set!" "groups" "case" "visible" "set-visible?" "when" "offer-desc" "'offer-desc" "locate" "tab" "first" "get-name" "essay" "action" "get-sender" "get-selected-data" "data" "let*" "evt")}}}})
"Point-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Point-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Point-Row" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Point-Row" #f 45 7 45 16 ("Value-Row")
        {Lisp-Entry "present" #f 53 11 53 18 ("get-v" "get-h" "format" "pos")}
        {Lisp-Entry "get-edited-value" #f 64 11 64 27 ("Point" "new" "height" "width" "bind" "editor" "get-string-content" "read-delimited-string" "list" "let")}
        {Lisp-Entry "edit" #f 71 11 71 15 ("get-tree" "expand/collapse" "get-v" "value" "get-h" "self" "add-row" "edit-in-cell")}
        {Lisp-Entry "close-editor" #f 79 11 79 23 ("remove-every-son" "nextmethod")}
        {Lisp-Entry "in-edition?" #f 85 11 85 22 ("0" "get-sons" "cardinality" ">" "nextmethod" "or")}}}})
"Popup"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "Popup.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.Popup" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "Popup" #f 46 7 46 12 ("Overlapped")
        {Lisp-Entry "initiator" #f 49 8 49 17 ()}
        {Lisp-Entry "conclude" #f 57 11 57 19 ("destroy-mandatory" "nextmethod" "rest")}
        {Lisp-Entry "show" #f 62 11 62 15 ("show-noactivate" "set-visible-flag")}
        {Lisp-Entry "destroy" #f 72 11 72 18 ("nextmethod" "self" "popup-destroy" "initiator" "when")}
        {Lisp-Entry "get-initiator" #f 83 18 83 31 ("initiator")}
        {Lisp-Entry "set-initiator" #f 87 18 87 31 ("initiator" "set!" "value")}
        {Lisp-Entry "mouse-activate?" #f 96 11 96 26 ()}
        {Lisp-Entry "popup-key-press" #f 105 26 105 41 ("popup-escape-press" "eqv?" "when" "char")}
        {Lisp-Entry "popup-escape-press" #f 111 26 111 44 ("self" "close-popup" "char")}}}})
"Portfolio"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "image" "Portfolio.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.image.Portfolio" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Portfolio" #f 48 7 48 16 ("Component")
        {Lisp-Entry "width" #f 51 12 51 17 ("set-width" "get-width" "16")}
        {Lisp-Entry "height" #f 52 12 52 18 ("set-height" "get-height" "16")}
        {Lisp-Entry "masked?" #f 53 12 53 19 ("set-masked?" "get-masked?")}
        {Lisp-Entry "mask" #f 54 12 54 16 ("set-mask" "get-mask")}
        {Lisp-Entry "icons" #f 55 12 55 17 ("set-icons" "get-icons")}
        {Lisp-Entry "bitmaps" #f 56 12 56 19 ("set-bitmaps" "get-bitmaps")}
        {Lisp-Entry "handle" #f 59 8 59 14 ()}
        {Lisp-Entry "images" #f 60 8 60 14 ("equal?" "test:" "make-table")}
        {Lisp-Entry "get-handle" #f 68 18 68 28 ()}
        {Lisp-Entry "finish" #f 73 11 73 17 ("destroy-mandatory" "add-bitmap" "add-icon" "for-each" "bitmaps" "icons" "length" "+" "nb" "let" "nextmethod" "initargs")}
        {Lisp-Entry "destroy" #f 81 11 81 18 ("nextmethod" "images" "table-values" "destroy-image" "for-each")}
        {Lisp-Entry "destroy-image" #f 86 11 86 24 ("cairo_surface_destroy" "image")}
        {Lisp-Entry "get-width" #f 94 11 94 20 ("width")}
        {Lisp-Entry "set-width" #f 98 11 98 20 ("width" "set!" "w")}
        {Lisp-Entry "get-height" #f 102 11 102 21 ("height")}
        {Lisp-Entry "set-height" #f 106 11 106 21 ("height" "set!" "h")}
        {Lisp-Entry "get-masked?" #f 110 11 110 22 ("masked?")}
        {Lisp-Entry "set-masked?" #f 114 11 114 22 ("masked?" "set!" "flag")}
        {Lisp-Entry "get-mask" #f 118 11 118 19 ("mask")}
        {Lisp-Entry "set-mask" #f 122 11 122 19 ("mask" "set!" "msk")}
        {Lisp-Entry "get-icons" #f 126 11 126 20 ("icons")}
        {Lisp-Entry "set-icons" #f 130 11 130 20 ("icons" "set!" "list")}
        {Lisp-Entry "get-bitmaps" #f 134 11 134 22 ("bitmaps")}
        {Lisp-Entry "set-bitmaps" #f 138 11 138 22 ("bitmaps" "set!" "list")}
        {Lisp-Entry "add-icon" #f 148 18 148 26 ("get-name" "images" "table-set!" "height" "height:" "width" "width:" "'icon" "load-image" "icon" "let" "object")}
        {Lisp-Entry "add-bitmap" #f 153 18 153 28 ("get-name" "images" "table-set!" "get-bitmap-handle" "bitmap" "let" "object")}
        {Lisp-Entry "add-masked-bitmap" #f 158 18 158 35 ("mask" "bitmap")}
        {Lisp-Entry "get-bitmap-handle" #f 162 11 162 28 ("'bitmap" "load-image" "exists?" "and" "if" "bitmap" "find-bitmap-file" "file" "let*" "object")}
        {Lisp-Entry "preload" #f 168 18 168 25 ("get-image" "image")}
        {Lisp-Entry "get-image" #f 172 18 172 27 ("add-bitmap" "begin" "images" "table-ref" "either" "get-name" "name" "let" "integer?" "if" "image")}
        {Lisp-Entry "draw-image" #f 187 18 187 28 ("draw-image" "get-image" "let" "rest" "v" "h" "image" "context" "surface")}}}})
"Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Preferences" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Preferences" #f 45 7 45 18 ("Component")
        {Lisp-Entry "title" #f 48 12 48 17 ("generate")}
        {Lisp-Entry "icon" #f 49 12 49 16 ("generate" "Bitmap-Resource")}
        {Lisp-Entry "apply-preferences" #f 57 26 57 43 ("children" "apply-preferences" "child" "function" "for-each" "client")}
        {Lisp-Entry "save-preferences" #f 68 26 68 42 ("children" "save-preferences" "child" "function" "for-each" "client" "designer")}
        {Lisp-Entry "set-property" #f 74 18 74 30 ("self" "set-property" "value" "property" "designer")}
        {Lisp-Entry "get-component-image" #f 83 11 83 30 ("icon")}
        {Lisp-Entry "presentation-property?" #f 87 11 87 33 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 91 11 91 27 ("title")}
        {Lisp-Entry "set-presentation" #f 95 11 95 27 ("title:" "self" "set-property" "title" "designer")}
        {Lisp-Entry "display-property?" #f 99 11 99 28 ("icon" "title" "visible?" "children" "before" "name-info" "class-info" "field-name" "memq?" "not" "property")}}}})
"Preferences-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Preferences-Manager.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Preferences-Manager" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Preferences-Manager" #f 49 7 49 26 ("Canvas-Manager")
        {Lisp-Entry "form-model" #f 52 11 52 21 ("nextmethod" "else" "Preferences-Editor" "descendants" "get-name" "case" "form")}
        {Lisp-Entry "install-in-host" #f 58 11 58 26 ("get-process" "apply-preferences" "when" "tool-preferences" "preferences" "let" "nextmethod" "host")}
        {Lisp-Entry "external-name" #f 65 16 65 29 ("preferences-manager" "'preferences-manager" "rest")}
        {Lisp-Entry "host-icon" #f 74 16 74 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 78 16 78 26 ()}
        {Lisp-Entry "host-position" #f 82 16 82 29 ()}
        {Lisp-Entry "host-size" #f 86 16 86 25 ()}
        {Lisp-Entry "host-workspaces" #f 90 11 90 26 ("home")}
        {Lisp-Entry "focus-default" #f 99 11 99 24 ("acquire-focus" "descendants" "locate" "tree" "let")}
        {Lisp-Entry "install" #f 109 11 109 18 ("get-preferences-root" "set-client" "get-application" "get-preferences-rights" "set-rights" "nextmethod" "rest")}
        {Lisp-Entry "Preferences-Manager-Controller" #f 121 9 121 39 ("Editor-View-Controller")
          {Lisp-Entry "document-status" #f 124 13 124 28 ()}}
        {Lisp-Entry "new-controller" #f 129 11 129 25 ("self" "Preferences-Manager-Controller" "new")}
        {Lisp-Entry "get-modified?" #f 138 11 138 24 ()}
        {Lisp-Entry "tool-preferences" #f 147 11 147 27 ("preferences-manager" "tools" "get-preferences")}
        {Lisp-Entry "confirm-close" #f 156 11 156 24 ("save-session" "rest")}
        {Lisp-Entry "save-session" #f 160 11 160 23 ("get-host" "save-preferences" "get-application" "get-preferences-designer" "designer" "tool-preferences" "pref" "let")}
        {Lisp-Entry "on-save-preferences" #f 171 18 171 37 ("save" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-edit" #f 177 18 177 25 ("Profile" "File" "edit-document" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-update" #f 182 18 182 27 ("get-preferences-root" "set-client" "load-preferences" "get-process" "process" "let" "tree" "descendants" "locate" "set-selection" "evt")}
        {Lisp-Entry "show-properties" #f 194 11 194 26 ("set-single-selection" "0" "get-visible-count" ">" "get-selection" "null?" "and" "when" "acquire-focus" "card" "locate" "tree" "let")}
        {Lisp-Entry "set-application-selection" #f 206 11 206 36 ("force?" "selection")}
        {Lisp-Entry "close-application-selection" #f 210 11 210 38 ()}}
      {Lisp-Entry "Preferences-Editor" #f 219 7 219 25 ("Descendants-Editor")
        {Lisp-Entry "form-model" #f 222 11 222 21 ("nextmethod" "else" "Preferences-Tree" "tree" "get-name" "case" "form")}}
      {Lisp-Entry "Preferences-Tree" #f 233 7 233 23 ("show-branches?:" "reorderable?:" "draggable?:" ":icons" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "update-selection" #f 240 11 240 27 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" #f 244 11 244 20 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Preferences-Manager-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Preferences-Manager-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Preferences-Manager-Preferences" #f 37 9 37 59 ("jazz")
      {Lisp-Entry "Preferences-Manager-Preferences" #f 47 7 47 38 ("441" "791" "Dimension" "size:" "94" "54" "Point" "position:" "Bitmap-Resource" "icon:" "title:" "Frame-Preferences")}}})
"Presentation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Presentation.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Presentation" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Presentation" #f 50 7 50 19 ("465" "605" "Dimension" "size:" "0" "Point" "position:" "content" "name:" "Layout-View")
        {Lisp-Entry "gradient-start" #f 53 12 53 26 ("generate")}
        {Lisp-Entry "gradient-end" #f 54 12 54 24 ("generate")}
        {Lisp-Entry "host-workspaces" #f 67 11 67 26 ("navigator")}
        {Lisp-Entry "guest-actions" #f 76 11 76 24 ("nextmethod" "presentation" "'presentation" "find-actions" "cons")}
        {Lisp-Entry "get-content" #f 86 18 86 29 ("content" "'content" "locate")}
        {Lisp-Entry "get-conductor" #f 90 18 90 31 ("conductor" "'conductor" "locate-component")}
        {Lisp-Entry "size-change" #f 99 11 99 22 ("set-scaled?" "set-scaling" "both" "'both" "get-size" "size-rect" "fit-rects" "scaling" "get-content" "content" "let*" "nextmethod" "size")}
        {Lisp-Entry "on-first-slide" #f 112 18 112 32 ("home-action" "get-tree" "tree" "Navigation-Branches" "find-palette" "viewer" "let*" "evt")}
        {Lisp-Entry "on-previous-slide" #f 118 18 118 35 ("NoModifiers" "up-arrow-action" "get-tree" "tree" "Navigation-Branches" "find-palette" "viewer" "let*" "evt")}
        {Lisp-Entry "on-next-slide" #f 124 18 124 31 ("NoModifiers" "down-arrow-action" "get-tree" "tree" "Navigation-Branches" "find-palette" "viewer" "let*" "evt")}
        {Lisp-Entry "on-last-slide" #f 130 18 130 31 ("end-action" "get-tree" "tree" "Navigation-Branches" "find-palette" "viewer" "let*" "evt")}
        {Lisp-Entry "slide-installed" #f 141 11 141 26 ()}
        {Lisp-Entry "mouse-down" #f 150 11 150 21 ("acquire-focus" "pos")}
        {Lisp-Entry "cursor-update" #f 159 11 159 24 (":no" ":finger" "set-cursor" "get-focus" "self" "eq?" "if" "view")}
        {Lisp-Entry "draw" #f 170 11 170 15 ("1" "0" "list" "gradient-fill" "get-bounds" "bounds" "let" "gradient-end" "gradient-start" "and" "when" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-addable-branches" #f 181 11 181 31 ("Basic-Slide" "Slide" "list")}}}})
"Presentation-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Presentation-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Presentation-Actions" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Presentation-Actions" #f 46 7 46 27 ("End" "on-last-slide" "last-slide" "Next" "on-next-slide" "next-slide" "Prior" "on-previous-slide" "previous-slide" "Home" "Shortcut" "shortcut:" "on-first-slide" ":document" "Event-Handler" "action-handler:" "first-slide" "name:" "Actions")}}})
"Presentation-Branches"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Presentation-Branches.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Presentation-Branches" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Presentation-Branches" #f 46 7 46 28 ("Branches-Editor")
        {Lisp-Entry "host-title" #f 54 16 54 26 ()}}}})
"Presentation-Components"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Presentation-Components.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Presentation-Components" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Presentation-Components" #f 47 7 47 30 ("show-branches?:" "tree" "header" "content" "scroller" "name:" "Descendants-Editor")
        {Lisp-Entry "host-title" #f 64 16 64 26 ()}}}})
"Presentation-Content"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Presentation-Content.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Presentation-Content" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Presentation-Content" #f 47 7 47 27 ("Layout-View")
        {Lisp-Entry "get-presentation" #f 55 11 55 27 ("parent")}
        {Lisp-Entry "mouse-down" #f 64 11 64 21 ("get-presentation" "acquire-focus" "pos")}
        {Lisp-Entry "cursor-update" #f 73 11 73 24 (":no" ":finger" "set-cursor" "get-focus" "get-presentation" "eq?" "if" "view")}}}})
"Presentation-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Presentation-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Presentation-Domain" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Presentation-Domain" #f 45 7 45 26 ("Domain")
        {Lisp-Entry "validate-value" #f 53 11 53 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "Locales" "is-not?" "string?" "not" "and" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 63 11 63 18 ("value")}}}})
"Presentation-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Presentation-Editor.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Presentation-Editor" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Presentation-Editor" #f 48 7 48 26 ("fill" "layout-type:" "center" "name:" "View-Editor")
        {Lisp-Entry "new-event" #f 61 16 61 25 ("import-dictionary" "set-property" "get-designer" "designer" "get-guest" "editor" "client:" "new-frame" "apply" "frame" ":catalog" "new" "base-model" "model" "get-profile" "profile" "let*" "function" ":wait" "with-cursor" "error" "error?:" "get-cataloguer" "get-catalog" "null?" "or" "if" "get-application" "appl" "Design-Wizard" "get-modal" "name" "let" "rest")}
        {Lisp-Entry "host-workspaces" #f 82 11 82 26 ("presenter")}
        {Lisp-Entry "install-client" #f 91 11 91 25 ("layout-view" "set-client" "get-content" "client" "set-parent" "hscroll?:" "vscroll?:" "center" "'center" "locate" "parent:" "Scroller-View" "new" "scroller" "let")}}}})
"Presentation-Generator"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Presentation-Generator.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Presentation-Generator" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Presentation-Generator" #f 47 7 47 29 ("Object")
        {Lisp-Entry "generate-presentation" #f 50 18 50 39 ("error" "else" "generate-formatted" "ci=?" "test:" "member?" "cond" "get-extension" "ext" "let" "file")}
        {Lisp-Entry "generate-formatted" #f 61 11 61 29 ("close" "cdr" "set!" "generate-heading" "slide" "cadr" "tail" "car" "head" "not-null?" "while" "previous-slide" "-1" "level:" "parent:" "Basic-Slide" "basic-slide" "moniker:" "Black" "gradient-end:" "Blue" "Color" "gradient-start:" "name:" "Formatted-Presentation" "new" "presentation" "collect-headings" "headings" "set-moniker" "get-controller" "controller" "get-guest" "text-view" "host-visible?:" "Plain-Formatted-Text-View" "new-frame" "frame" "let*" "file")}
        {Lisp-Entry "generate-heading" #f 80 11 80 27 ("level:" "generate-slide" "client-form:" "heading-range:" "parent:" "name:" "Heading-Slide" "slide" "length" "0" "Cell" "Range$Cell$" "new" "range" "second" "row" "find-parent-slide" "parent" "first" "heading-level" "level" "extract-text" "text" "let*" "third" "extract-name" "conductor" "name" "receive" "tail" "head" "previous-slide" "presentation" "text-view")}
        {Lisp-Entry "extract-name" #f 91 11 91 23 ("text" "'text" "1" "length" "-" "0" "subseq" "values" "ends-with?" "if" "name")}
        {Lisp-Entry "find-parent-slide" #f 97 11 97 28 ("get-level" "<" "when" "continuation-return" "Slide" "is-not?" "component" "for-each-ascendant" "return" "function" "continuation-capture" "null?" "if" "level" "previous-slide" "presentation")}
        {Lisp-Entry "extract-text" #f 110 11 110 23 ("get-styles" "convert-styles" "set-styles" "read-string-element" "text" "get-output-string" "output" "let*" "paragraph-length" "0" "Cell" "Range$Cell$" "new" "print-formatted" "decrease!" "increase!" "paragraph-string" "whitespace?" "while" "get-limit" "-" "if" "last" "1" "second" "+" "first" "open-output-string" "printer" "let" "tail" "head" "text-view")}
        {Lisp-Entry "convert-styles" #f 125 11 125 25 ("White" "Color" "color:" "16" "point-size:" "font-name:" "Text" "Font" "font:" "name:" "Text-Style" "new" "Default" "'Default" "get-name" "eq?" "if" "style" "function" "map" "styles")}
        {Lisp-Entry "generate-slide" #f 133 11 133 25 ("text-content:" "'text" "body" "'body" "title:" "properties:" "'title" "content" "'content" "name:" "modify" "'modify" "model-name:" "'new" "list" "Text-Slide-Conductor" "'Text-Slide-Conductor" "case" "conductor-class" "let" "when" "append" "children:" "install" "'install" "action:" "Form" "new" "conductor" "text" "title")}}}})
"Presentation-Properties"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "presentation" "Presentation-Properties.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.presentation.Presentation-Properties" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Presentation-Properties" #f 46 7 46 30 ("Properties-Manager")
        {Lisp-Entry "install" #f 49 11 49 18 ("categorized" "'categorized" "tree" "'tree" "locate" "set-filter" "nextmethod" "rest")}}}})
"Presenter-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Presenter-Workspace.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Presenter-Workspace" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Presenter-Workspace" #f 46 7 46 26 ("Text-Palette" "Containment-Editor" "Alignment-Editor" "Designer-Manager" "59" "Toolbox-Manager" "35" "Output-Log" "Search-Results" "Console-Manager" "Presentation-Properties" "selection" "39" "245" "Presentation-Branches" "Presentation-Components" "model-name:" "second" "-38" "vert" "5" "Rect" "insets:" "18" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 78 11 78 23 ("presenter" "'presenter")}}}})
"Preview-Job"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Preview-Job.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Preview-Job" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Preview-Job" #f 45 7 45 18 ("Print-Job")
        {Lisp-Entry "printed-page" #f 53 11 53 23 ("page-setup")}
        {Lisp-Entry "print-landscape?" #f 57 11 57 27 ()}}}})
"Preview-Page"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Preview-Page.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Preview-Page" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Preview-Page" #f 48 7 48 19 ("View")
        {Lisp-Entry "client" #f 51 12 51 18 ("set-client" "get-client")}
        {Lisp-Entry "no" #f 52 12 52 14 ("set-no" "get-no")}
        {Lisp-Entry "dragging?" #f 55 8 55 17 ()}
        {Lisp-Entry "start-position" #f 56 8 56 22 ()}
        {Lisp-Entry "get-client" #f 64 18 64 28 ("client")}
        {Lisp-Entry "set-client" #f 68 18 68 28 ("invalidate-view" "client" "set!" "value")}
        {Lisp-Entry "get-no" #f 73 18 73 24 ("no")}
        {Lisp-Entry "set-no" #f 77 18 77 24 ("invalidate-view" "no" "set!" "value")}
        {Lisp-Entry "get-pane" #f 82 11 82 19 ("get-guest")}
        {Lisp-Entry "cursor-update" #f 91 11 91 24 (":arrow" ":opened-hand" ":closed-hand" "set-cursor" "get-mouse-down?" "hscroll-needed?" "vscroll-needed?" "or" "if" "'scrollee" "locate" "scrollee" "get-pane" "pane" "let*" "pos")}
        {Lisp-Entry "mouse-down" #f 106 11 106 21 ("acquire-capture" "start-position" "dragging?" "set!" "pos")}
        {Lisp-Entry "drag-move" #f 112 11 112 20 ("scroll" "'scrollee" "locate" "scrollee" "get-pane" "pane" "start-position" "nu-" "delta" "let*" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" #f 120 11 120 18 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "double-click" #f 126 11 126 23 ("no" "set-start" "zoom" "'zoom" "Preview-Toolbar" "find-palette" "locate" "set-value" "1.0" "set-zoom" "get-toplevel" "toplevel" "get-pane" "pane" "let" "pos")}
        {Lisp-Entry "draw" #f 139 11 139 15 ("print-page" "no" "get-page" "page" "get-job" "job" "get-pane" "pane" "let*" "lv" "lh" "context" "surface")}}}})
"Preview-Pane"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Preview-Pane.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Preview-Pane" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Preview-Pane" #f 48 7 48 19 ("centered" "center" "664" "1078" "Dimension" "size:" "scrollee" "content" "vscroll?:" "hscroll?:" "scroller" "Dark" "name:" "Color" "background:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "client" #f 51 12 51 18 ("set-client" "get-client")}
        {Lisp-Entry "job" #f 54 8 54 11 ()}
        {Lisp-Entry "pages" #f 55 8 55 13 ()}
        {Lisp-Entry "start" #f 56 8 56 13 ("0")}
        {Lisp-Entry "preserved" #f 57 8 57 17 ()}
        {Lisp-Entry "host-workspaces" #f 73 11 73 26 ("preview")}
        {Lisp-Entry "get-job" #f 82 18 82 25 ("job")}
        {Lisp-Entry "guest-actions" #f 91 11 91 24 ("nextmethod" "preview-pane" "'preview-pane" "find-actions" "cons")}
        {Lisp-Entry "on-print" #f 101 11 101 19 ("client" "print-document" "evt")}
        {Lisp-Entry "on-print-layout" #f 105 11 105 26 ("from-preview?:" "client" "print-layout" "evt")}
        {Lisp-Entry "on-home" #f 109 11 109 18 ("0" "set-start" "evt")}
        {Lisp-Entry "on-end" #f 113 11 113 17 ("modulo" "set-start" "1" "-" "last" "job" "get-pages" "pages" "length" "count" "let*" "evt")}
        {Lisp-Entry "on-previous" #f 120 11 120 22 ("previous" "evt")}
        {Lisp-Entry "on-next" #f 124 11 124 18 ("next" "evt")}
        {Lisp-Entry "on-close" #f 128 11 128 19 ("close-workspace" "evt")}
        {Lisp-Entry "escape-press" #f 132 11 132 23 ("close-workspace" "key")}
        {Lisp-Entry "close-workspace" #f 136 11 136 26 ("get-previous" "apply-preferences" "close" "restore-client" "selected-workspace" "workspace" "get-host" "frame" "let")}
        {Lisp-Entry "get-client" #f 149 18 149 28 ("client")}
        {Lisp-Entry "set-client" #f 153 18 153 28 ("setup-printing" "preserved" "client" "set!" "value")}
        {Lisp-Entry "restore-client" #f 158 21 158 35 ("preserved" "restore-printing" "printer" "'printer" "client" "get-page-setup-for" "wrap-header/footer")}
        {Lisp-Entry "Zoom" #f 168 14 168 18 ("0.5")}
        {Lisp-Entry "get-zoom" #f 172 18 172 26 ("Zoom")}
        {Lisp-Entry "set-zoom" #f 176 18 176 26 ("layout-view" "0" "Point" "scrollee" "'scrollee" "locate" "scroll-to" "Zoom" "set!" "value")}
        {Lisp-Entry "layout" #f 187 11 187 17 ("start" "set-start" "set-client" "function" "for-each" "zoom:" "Preview-Job" "job" "update-scrollbars" "layout-view" "13" "-" "set-size" "get-output" "pages" "get-height" "+" ">" "when" "put" "max" "set!" "get-width" "increase!" "Preview-Page" "page" "shadow" "'shadow" "border-type:" "size:" "Point" "position:" "parent:" "Border-View" "border" "not" "while" "List-Factory" "new" "fact" "horz-done?" "vert-done?" "max-v" "max-h" "v" "0" "h" "let" "close-children" "50" "separator" "4" "Dimension" "scale" "nu+" "border-size" "get-size" "display-size" "Zoom" "/" "zoom" "60" "scale-content" "scaling" "printer" "'printer" "get-page-setup-for" "page-setup" "client" "get-print-area" "print-area" "'centered" "centered" "'scrollee" "locate" "scrollee" "let*" "nextmethod")}
        {Lisp-Entry "get-page-height" #f 240 11 240 26 ("size" "get-height")}
        {Lisp-Entry "previous" #f 249 18 249 26 ("start" "-" "0" "max" "set-start" "pages" "length" "count" "let")}
        {Lisp-Entry "next" #f 254 18 254 22 ("set-start" "<" "when" "start" "+" "pg" "job" "get-pages" "pages" "length" "count" "let*")}
        {Lisp-Entry "set-start" #f 262 18 262 27 ("0" "naturals" "pages" "set-no" "set-visible?" ">=" "if" "+" "pg" "get-parent" "border" "n" "page" "function" "for-each" "job" "get-pages" "length" "count" "let" "start" "set!" "value")}}}})
"Preview-Pane-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Preview-Pane-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Preview-Pane-Actions" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Preview-Pane-Actions" #f 46 7 46 27 ("Next" "on-next" "next" "Prior" "on-previous" "previous" "End" "on-end" "end" "Home" "Shortcut" "shortcut:" "on-home" ":focus" "Event-Handler" "action-handler:" "home" "name:" "Actions")}}})
"Preview-Status"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Preview-Status.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Preview-Status" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Preview-Status" #f 47 7 47 21 ("center" "location:" "20" "782" "Dimension" "size:" "message" "name:" "Status-Toolbar")
        {Lisp-Entry "host-icon" #f 60 16 60 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 64 16 64 26 ()}}}})
"Preview-Toolbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Preview-Toolbar.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Preview-Toolbar" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Preview-Toolbar" #f 48 7 48 22 ("on-close" "22" "60" "title:" "close" "zoom" "166" "blue:" "188" "green:" "200" "red:" "Medium" "Color" "border-color:" "2" "Rect" "border-insets:" "21" "80" "Dimension" "size:" "on-next" "next" "on-previous" "previous" "on-print-layout" "print-layout" "on-print" ":document" "Event-Handler" "action-handler:" "Bitmap-Resource" "image-name:" "tooltip-text:" "print" "name:" "Toolbar")
        {Lisp-Entry "Zoom-Factors" #f 66 14 66 26 ("0.25" "0.33" "0.50" "0.75" "1.0" "1.5" "2.0" "5.0")}
        {Lisp-Entry "finish" #f 77 11 77 17 ("0.50" "set-value" "Zoom-Factors" "zoom" "'zoom" "locate" "set-choices" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 88 16 88 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 92 16 92 26 ()}
        {Lisp-Entry "set-preview-zoom" #f 101 11 101 27 ("set-zoom" "current-document" "pane" "let" "zoom")}}
      {Lisp-Entry "Zoom-Combo" #f 111 7 111 17 ("Combo-Box")
        {Lisp-Entry "combo-choice" #f 114 11 114 23 ("get-value" "creator" "set-preview-zoom")}}}})
"Preview-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Preview-Workspace.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Preview-Workspace" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Preview-Workspace" #f 46 7 46 24 ("Preview-Status" "-23" "line" "second" "status" "Preview-Toolbar" "model-name:" "first" "location:" "vert" "orientation:" "split" "state:" "27" "division:" "edge" "separator:" "toolbar" "name:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Workspace-Preferences")
        {Lisp-Entry "previous" #f 49 12 49 20 ("set-previous" "get-previous")}
        {Lisp-Entry "pane" #f 50 12 50 16 ("set-pane" "get-pane")}
        {Lisp-Entry "get-pane" #f 67 18 67 26 ("pane")}
        {Lisp-Entry "set-pane" #f 71 18 71 26 ("pane" "set!" "value")}
        {Lisp-Entry "get-previous" #f 75 18 75 30 ("previous")}
        {Lisp-Entry "set-previous" #f 79 18 79 30 ("previous" "set!" "value")}
        {Lisp-Entry "apply-preferences" #f 88 11 88 28 ("nextmethod" "apply" "pane" "layout-view" "rest")}}}})
"Primitive-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Primitive-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Primitive-Doc" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Primitive-Doc" #f 45 7 45 20 ("Definition-Doc")
        {Lisp-Entry "get-class-image" #f 53 16 53 31 ("Bitmap-Resource")}}}})
"Print-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Print-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Print-Event" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Print-Event" #f 44 7 44 18 ("Event")
        {Lisp-Entry "surface" #f 47 8 47 15 ()}
        {Lisp-Entry "context" #f 48 8 48 15 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("context~self" "surface~self" "set!" "nextmethod" "context" "surface" "sender" "kind")}
        {Lisp-Entry "get-dc" #f 57 18 57 24 ("surface")}
        {Lisp-Entry "get-hdc" #f 61 18 61 25 ("surface" "get-hdc")}
        {Lisp-Entry "get-context" #f 65 18 65 29 ("context")}}}})
"Print-Job"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Print-Job.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Print-Job" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Print-Job" #f 46 7 46 16 ("Object")
        {Lisp-Entry "surface" #f 49 8 49 15 ()}
        {Lisp-Entry "selection?" #f 50 8 50 18 ()}
        {Lisp-Entry "from" #f 51 8 51 12 ()}
        {Lisp-Entry "to" #f 52 8 52 10 ()}
        {Lisp-Entry "nb-copies" #f 53 8 53 17 ()}
        {Lisp-Entry "client" #f 54 8 54 14 ()}
        {Lisp-Entry "page-setup" #f 55 8 55 18 ()}
        {Lisp-Entry "resolution" #f 56 8 56 18 ()}
        {Lisp-Entry "scaling" #f 57 8 57 15 ()}
        {Lisp-Entry "zoom" #f 58 8 58 12 ()}
        {Lisp-Entry "pages" #f 59 8 59 13 ()}
        {Lisp-Entry "initialize" #f 62 11 62 21 ("paginate" "pages" "zoom" "zoom~self" "scale-content" "scaling" "either" "scaling~self" "resolution~self" "page-setup~self" "client~self" "nb-copies" "nb-copies~self" "to" "to~self" "from" "from~self" "selection?" "selection?~self" "surface~self" "set!" "nextmethod" "resolution" "page-setup" "client" "surface")}
        {Lisp-Entry "get-dc" #f 88 18 88 24 ("surface")}
        {Lisp-Entry "get-selection?" #f 92 18 92 32 ("selection?")}
        {Lisp-Entry "get-from" #f 96 18 96 26 ("from")}
        {Lisp-Entry "get-to" #f 100 18 100 24 ("to")}
        {Lisp-Entry "get-nb-copies" #f 104 18 104 31 ("nb-copies")}
        {Lisp-Entry "get-client" #f 108 18 108 28 ("client")}
        {Lisp-Entry "get-pages" #f 112 18 112 27 ("pages")}
        {Lisp-Entry "get-page" #f 116 18 116 26 ("pages" "element" "n")}
        {Lisp-Entry "print-job" #f 125 18 125 27 ("print-document" "nb-copies" "repeat" "loop" "function" "with-document")}
        {Lisp-Entry "print-document" #f 132 11 132 25 ("length" "to" "1" "-" "from" "if" "naturals" "pages" "0" "surface" "print-page" "with-page" "no" "page" "function" "for-each")}
        {Lisp-Entry "with-orientation" #f 142 11 142 27 ("with-landscape" "rect-size" "page-size" "counterclockwise" "'counterclockwise" "orientation" "let" "not" "inverse-rect" "if" "with-clipper" "function" "print-landscape?" "landscape?" "let*" "proc" "clipper" "page" "surface")}
        {Lisp-Entry "print-page" #f 157 18 157 28 ("client" "clipper" "new-lv" "new-lh" "get-top" "top" "get-left" "left" "content" "get-v" "get-h" "-" "get-content-rect" "content-rect" "0" "Point" "acquire" "offset" "paint-drawing" "function" "with-orientation" "page-setup" "wrap-header/footer" "scale" "offset-rect" "printed-rect" "get-bounds" "printed-bounds" "printed-page" "printed" "scaling" "60" "resolution" "/" "*" "ratio" "1.0" "either" "zoom" "print-context" "context" "let*" "no" "page" "lv" "lh" "surface")}
        {Lisp-Entry "printed-page" #f 182 29 182 41 ("page-setup" "get-printable")}
        {Lisp-Entry "print-landscape?" #f 186 29 186 45 ("landscape" "'landscape" "page-setup" "get-orientation" "eq?")}
        {Lisp-Entry "print-context" #f 190 11 190 24 ("present-date-time" "print-time:" "local-date" "present-date-day" "print-date:" "pages" "length" "page-count:" "page-no:" "client-filename" "either" "filename:" "selection?" "print-selection?:" "print-black/white?:" "printing?:" "list" "no")}
        {Lisp-Entry "client-filename" #f 204 11 204 26 ("get-name" "get-controller" "get-moniker" "moniker" "Document" "is?" "when" "client" "get-guest" "guest" "let")}
        {Lisp-Entry "paginate" #f 217 11 217 19 ("client" "paginate" "paginate-height" "scaling" "60" "resolution" "*" "/" "ceiling" "paginate-width" "get-height" "height" "get-width" "width" "page-setup" "get-content" "content" "let*")}
        {Lisp-Entry "with-document" #f 231 18 231 31 ("end-document" "start-document" "proc")}
        {Lisp-Entry "start-document" #f 237 29 237 43 ()}
        {Lisp-Entry "end-document" #f 241 29 241 41 ()}
        {Lisp-Entry "with-page" #f 250 18 250 27 ("end-page" "start-page" "proc" "no")}
        {Lisp-Entry "start-page" #f 256 29 256 39 ("no")}
        {Lisp-Entry "end-page" #f 260 29 260 37 ("no")}}}})
"Print-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Print-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Print-Preferences" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Print-Preferences" #f 47 7 47 24 ("title:" "Preferences")
        {Lisp-Entry "color?" #f 50 12 50 18 ("generate")}
        {Lisp-Entry "can-rename-component?" #f 62 11 62 32 ()}
        {Lisp-Entry "can-delete-component?" #f 66 11 66 32 ()}
        {Lisp-Entry "can-move-component?" #f 70 11 70 30 ()}
        {Lisp-Entry "can-copy-component?" #f 74 11 74 30 ()}
        {Lisp-Entry "get-row-instance" #f 78 11 78 27 ("nextmethod" "else" "Boolean-Row" "new" "color?" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 84 11 84 37 ("color?")}}}})
"Print-Sequencer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "factory" "Print-Sequencer.jazz"} 1226584781
    {Lisp-Entry "jazz.library.factory.Print-Sequencer" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Print-Sequencer" #f 47 7 47 22 ("Object")
        {Lisp-Entry "printer" #f 50 8 50 15 ()}
        {Lisp-Entry "start" #f 51 8 51 13 ()}
        {Lisp-Entry "sections" #f 52 8 52 16 ("List-Factory" "new")}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("start-section" "printer" "set!" "nextmethod" "prt")}
        {Lisp-Entry "start-section" #f 61 18 61 31 ("get-position" "start" "set!")}
        {Lisp-Entry "end-section" #f 65 18 65 29 ("start-section" "get-position" "start" "cons" "prog1")}
        {Lisp-Entry "get-position" #f 70 11 70 23 ("printer" "get-position")}
        {Lisp-Entry "put-section" #f 79 18 79 29 ("sections" "put" "section")}
        {Lisp-Entry "put-sections" #f 83 18 83 30 ("sections" "put-sequence" "sections-list")}
        {Lisp-Entry "print-sections" #f 87 18 87 32 ("sections" "get-output" "transfer" "end" "start" "bind" "section" "function" "for-each" "output")}
        {Lisp-Entry "transfer-size" #f 99 14 99 27 ("1024")}
        {Lisp-Entry "transfer-buffer" #f 102 14 102 29 ("transfer-size" "size:" "Heap-Block" "new")}
        {Lisp-Entry "transfer" #f 106 24 106 32 ("increase!" "decrease!" "WriteFile" "NULL" "transfer-buffer" "get-handle" "ReadFile" "transfer-size" "min" "subsize" "printer" "set-position" "0" ">" "while" "-" "size" "let" "output" "end" "start")}}}})
"Printer-Connection"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "connection" "Printer-Connection.jazz"} 1226584774
    {Lisp-Entry "jazz.database.connection.Printer-Connection" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Printer-Connection" #f 45 7 45 25 ("Connection")
        {Lisp-Entry "printer" #f 48 8 48 15 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("printer" "set!" "nextmethod" "prt")}
        {Lisp-Entry "get-printer" #f 61 18 61 29 ("printer")}
        {Lisp-Entry "load-request" #f 70 11 70 23 ("printer" "format" "rest" "command")}
        {Lisp-Entry "load-multirequest" #f 74 11 74 28 ("printer" "format" "rest" "command")}
        {Lisp-Entry "load-rows" #f 78 11 78 20 ("printer" "format" "command")}
        {Lisp-Entry "load-row" #f 82 11 82 19 ("printer" "format" "command")}
        {Lisp-Entry "execute" #f 91 11 91 18 ("printer" "format" "command")}
        {Lisp-Entry "comment" #f 95 11 95 18 ("printer" "format" "apply" "parameters" "string")}}}})
"Printer-Job"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "Printer-Job.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.Printer-Job" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Printer-Job" #f 47 7 47 18 ("Print-Job")
        {Lisp-Entry "start-document" #f 55 11 55 25 ("DOCINFO-free" "surface" "get-surface" "cairo_win32_surface_get_dc" "StartDoc" "0" "DOCINFO-fwType-set!" "DOCINFO-lpszDocName-set!" "DOCINFO-sizeof" "DOCINFO-cbSize-set!" "DOCINFO-make" "rec" "let")}
        {Lisp-Entry "end-document" #f 64 11 64 23 ("surface" "get-surface" "cairo_win32_surface_get_dc" "EndDoc")}
        {Lisp-Entry "start-page" #f 73 11 73 21 ("surface" "get-surface" "cairo_win32_surface_get_dc" "StartPage" "no")}
        {Lisp-Entry "end-page" #f 77 11 77 19 ("surface" "get-surface" "cairo_win32_surface_get_dc" "EndPage" "no")}}}})
"Process"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "process" "Process.jazz"} 1227124458
    {Lisp-Entry "jazz.system.process.Process" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Process" #f 58 7 58 14 ("Object")
        {Lisp-Entry "settings" #f 61 8 61 16 ()}
        {Lisp-Entry "preferences-root" #f 62 8 62 24 ()}
        {Lisp-Entry "preferences-designer" #f 63 8 63 28 ()}
        {Lisp-Entry "context" #f 64 8 64 15 ()}
        {Lisp-Entry "get-preferences-root" #f 72 18 72 38 ("preferences-root")}
        {Lisp-Entry "get-preferences-designer" #f 76 18 76 42 ("preferences-designer")}
        {Lisp-Entry "process-name" #f 80 26 80 38 ()}
        {Lisp-Entry "process-owner" #f 84 26 84 39 ()}
        {Lisp-Entry "process-copyright" #f 88 26 88 43 ()}
        {Lisp-Entry "process-licensee" #f 92 26 92 42 ()}
        {Lisp-Entry "process-icon" #f 96 26 96 38 ()}
        {Lisp-Entry "process-version" #f 100 26 100 41 ("0" "1" "Version")}
        {Lisp-Entry "process-email" #f 104 26 104 39 ()}
        {Lisp-Entry "process-actions" #f 108 26 108 41 ()}
        {Lisp-Entry "process-event-source" #f 112 26 112 46 ("process-name" "EventSource" "'EventSource" "argument/setting" "either")}
        {Lisp-Entry "boot-environment" #f 122 26 122 42 ("run-loop" "run-loop?" "when" "activate-process" "conclude-phase" "finish-phase" "finalize-phase" "start-phase" "prepare-phase" "register-versions" "initialize-settings" "initialize-aliases" "install-literals" "update-debuggee")}
        {Lisp-Entry "update-debuggee" #f 138 11 138 26 ("update-debuggee-process" "process-version" "present" "current-process-version-set!" "process-icon" "current-process-icon-set!" "process-name" "current-process-title-set!")}
        {Lisp-Entry "install-literals" #f 145 11 145 27 ("install-jazz-literals")}
        {Lisp-Entry "initialize-settings" #f 149 11 149 30 ("register-settings" "file:" "Settings" "new" "settings" "set!" "exists?" "when" "Home" "File" "settings-file" "let")}
        {Lisp-Entry "register-versions" #f 156 11 156 28 ("get-windows-version" "present" "windows-version:" "register-crash-info")}
        {Lisp-Entry "prepare-phase" #f 161 11 161 24 ("prepare-process" "prepare-manifests" "prepare-workbench" "prepare-profile-aliases" "prepare-preferences" "prepare-environment" "prepare-aliases")}
        {Lisp-Entry "prepare-environment" #f 171 29 171 48 ("self" "set-process")}
        {Lisp-Entry "prepare-preferences" #f 175 11 175 30 ("setup-preferences")}
        {Lisp-Entry "prepare-process" #f 179 26 179 41 ("setup-crash-handler")}
        {Lisp-Entry "start-phase" #f 183 11 183 22 ("start-process" "start-environment")}
        {Lisp-Entry "start-environment" #f 188 29 188 46 ()}
        {Lisp-Entry "start-process" #f 192 26 192 39 ()}
        {Lisp-Entry "finalize-phase" #f 196 11 196 25 ("setup-profile" "finalize-process" "start-servers" "finalize-environment")}
        {Lisp-Entry "finalize-environment" #f 203 29 203 49 ()}
        {Lisp-Entry "finalize-process" #f 207 26 207 42 ()}
        {Lisp-Entry "setup-profile" #f 211 26 211 39 ()}
        {Lisp-Entry "finish-phase" #f 215 11 215 23 ("finish-process" "finish-environment")}
        {Lisp-Entry "finish-environment" #f 220 29 220 47 ("register-base-objects")}
        {Lisp-Entry "finish-process" #f 224 26 224 40 ()}
        {Lisp-Entry "conclude-phase" #f 228 11 228 25 ("conclude-process" "conclude-environment")}
        {Lisp-Entry "conclude-environment" #f 233 29 233 49 ()}
        {Lisp-Entry "conclude-process" #f 237 26 237 42 ()}
        {Lisp-Entry "preserve-environment" #f 246 26 246 46 ()}
        {Lisp-Entry "close-environment" #f 250 26 250 43 ("stop-servers" "detach-from-controller" "close-preferences")}
        {Lisp-Entry "close-preferences" #f 256 19 256 36 ("save" "persist-preferences?" "preferences-designer" "and" "when")}
        {Lisp-Entry "get-toplevel" #f 266 26 266 38 ()}
        {Lisp-Entry "exiting?" #f 276 14 276 22 ()}
        {Lisp-Entry "exiting-process?" #f 280 18 280 34 ("exiting?")}
        {Lisp-Entry "exit-process" #f 284 18 284 30 ("exit" "invoke-restart" "if" "exit-process" "'exit-process" "find-restart" "restart" "close-environment" "preserve-environment" "set!" "begin" "unwind-protect" "exiting?" "preserved" "let" "0" "status")}
        {Lisp-Entry "process-alias" #f 302 26 302 39 ("else" "self" ":process" "case" "name")}
        {Lisp-Entry "get-context" #f 313 18 313 29 ("context")}
        {Lisp-Entry "set-context" #f 317 18 317 29 ("context-update" "context" "set!" "ctx")}
        {Lisp-Entry "context-update" #f 327 29 327 43 ("modify-toolbox" "modify-connections" "modify-favorites" "modify-preferences")}
        {Lisp-Entry "modify-preferences" #f 334 11 334 29 ("set-active-branch" "context" "find-component" "branch" "get-preferences-designer" "designer" "get-preferences" "pref" "let*")}
        {Lisp-Entry "modify-favorites" #f 341 11 341 27 ("singleton-docked" "get-guest" "modify-editor" "Favorites-Manager" "'Favorites-Manager" "in-manifest?" "when")}
        {Lisp-Entry "modify-connections" #f 347 11 347 29 ("singleton-docked" "get-guest" "modify-editor" "SQL-Connections-Manager" "'SQL-Connections-Manager" "in-manifest?" "when")}
        {Lisp-Entry "modify-toolbox" #f 353 11 353 25 ("singleton-docked" "get-guest" "modify-editor" "Toolbox-Manager" "'Toolbox-Manager" "in-manifest?" "when")}
        {Lisp-Entry "modify-editor" #f 359 11 359 24 ("set-client" "set-active-branch" "context" "find-component" "branch" "get-client" "client" "let*" "editor")}
        {Lisp-Entry "install-context" #f 367 18 367 33 ("set-active-branch" "find-child" "branch" "let" "context" "when" "component")}
        {Lisp-Entry "persist-preferences?" #f 379 29 379 49 ()}
        {Lisp-Entry "preferences-file" #f 383 29 383 45 ("Profile" "File")}
        {Lisp-Entry "setup-preferences" #f 387 18 387 35 ("set-current-directory" "exists?" "and" "when" "get-current-directory" "directory" "let" "install-context" "preferences-context" "context" "reference:" "get-form" "form:" "Designer" "new" "preferences-designer" "load-preferences" "preferences-root" "set!")}
        {Lisp-Entry "load-preferences" #f 397 29 397 45 ("default-preferences" "read-from-file" "instantiate" "exists?" "Profile" "'Profile" "find-alias" "and" "if" "preferences-file" "file" "persist-preferences?" "persist?" "let")}
        {Lisp-Entry "default-preferences" #f 405 29 405 48 ("Process-Preferences" "new")}
        {Lisp-Entry "preferences-context" #f 409 11 409 30 ("else" "get-active-context" "preferences-root" "string->symbol" "cond" "command-argument" "arg" "let")}
        {Lisp-Entry "apply-preferences" #f 416 18 416 35 ("apply-preferences" "client" "preferences")}
        {Lisp-Entry "save-preferences" #f 420 18 420 34 ("get-preferences-designer" "save-preferences" "client" "preferences")}
        {Lisp-Entry "set-preferences-property" #f 424 18 424 42 ("get-preferences-designer" "set-property" "value" "property" "preferences")}
        {Lisp-Entry "get-preferences-rights" #f 428 26 428 48 ()}
        {Lisp-Entry "persist-usernames?" #f 437 26 437 44 ()}
        {Lisp-Entry "persist-passwords?" #f 441 26 441 44 ()}
        {Lisp-Entry "mandatory-version" #f 450 26 450 43 ("what")}
        {Lisp-Entry "signal-readyness" #f 460 21 460 37 ("SetEvent" "when" "EVENT_MODIFY_STATE" "OpenEvent" "handle" "let" "name")}
        {Lisp-Entry "run-loop" #f 471 26 471 34 ("start-loop" "with-repl-context" "cont" "lambda" "continuation-capture" "function" "exit-process" "'exit-process" "with-restart-catcher")}
        {Lisp-Entry "resume-loop" #f 481 18 481 29 ("invoke-restart" "resume-loop-action" "when" "resume-loop" "'resume-loop" "find-restart" "restart" "let")}
        {Lisp-Entry "resume-loop-action" #f 488 26 488 44 ()}
        {Lisp-Entry "start-loop" #f 492 26 492 36 ("relinquish-process" "loop" "let")}
        {Lisp-Entry "user-feedback" #f 503 29 503 42 ("message")}
        {Lisp-Entry "system-title" #f 512 26 512 38 ()}
        {Lisp-Entry "prepare-aliases" #f 521 29 521 44 ()}
        {Lisp-Entry "prepare-profile-aliases" #f 525 26 525 49 ("get-list" "register-alias" "get-directory" "directory" "get-alias" "alias" "function" "for-each" "get-children" "when" "error?:" "aliases" "'aliases" "get-preferences" "pref" "let")}
        {Lisp-Entry "resolve-alias" #f 537 26 537 39 ("name")}
        {Lisp-Entry "show-box" #f 546 26 546 34 ("system-message" "apply" "rest" "text")}
        {Lisp-Entry "prepare-workbench" #f 555 26 555 43 ()}
        {Lisp-Entry "prepare-manifests" #f 564 26 564 43 ()}
        {Lisp-Entry "start-servers" #f 573 29 573 42 ("start-remoting-server")}
        {Lisp-Entry "stop-servers" #f 578 29 578 41 ("stop-remoting-server")}
        {Lisp-Entry "get-name" #f 587 18 587 26 ("process-name")}
        {Lisp-Entry "get-icon" #f 591 18 591 26 ("process-icon")}
        {Lisp-Entry "get-register" #f 595 18 595 30 ("local-register")}
        {Lisp-Entry "register-base-objects" #f 604 29 604 50 ()}
        {Lisp-Entry "get-local-debugger" #f 613 26 613 44 ()}
        {Lisp-Entry "initial-console-context" #f 622 26 622 49 ()}
        {Lisp-Entry "launch-process" #f 631 18 631 32 ("wait?:" "wait-ready-timeout" "wait-ready-timeout:" "wait-ready" "wait-ready:" "create-process" "command" "command-arguments" "arguments-arg" "command-action" "action-arg" "profile" "profile-arg" "app-arg" "rootdir-arg" "format" "homedir" "if" "homedir-arg" "Install" "File" "launcher" "Jazz" "Directory" "parse" "root" "let*" "app" "app:")}
        {Lisp-Entry "present-error" #f 663 23 663 36 ("present-generic-error" "else" "present-walk-error" "Walk-Error" "present-read-error" "Read-Error" "typecase" "active-content?" "prefix?" "error")}
        {Lisp-Entry "log-error" #f 671 40 671 49 ("output" "error")}
        {Lisp-Entry "edit-error" #f 676 40 676 50 ("error")}
        {Lisp-Entry "edit-error-child" #f 681 40 681 56 ("info" "error")}
        {Lisp-Entry "present-generic-error" #f 686 31 686 52 ("class-of" "type-name" "format" "not" "if" "list" "get-message" "message" "let" "active-content?" "prefix?" "error")}
        {Lisp-Entry "present-read-error" #f 700 31 700 49 ("get-message" "message" "get-base" "string?" "if" "format" "header" "get-source" "source" "let*" "active-content?" "prefix?" "error")}
        {Lisp-Entry "present-walk-error" #f 713 31 713 49 ("get-output-string" "walk-problem-message" "message" "let" "problem" "function" "for-each" "open-output-string" "printer" "get-category-name" "format-plural" "format" "header" "length" "count" "get-problems" "problems" "let*" "active-content?" "prefix?" "error")}
        {Lisp-Entry "process-debuggee-loop" #f 734 29 734 50 ("debuggee-loop")}
        {Lisp-Entry "process-exception" #f 743 11 743 28 ("report-exception" "log-exception" "else" "exit-process" "message" "'message" "type:" "present-exception" "exception:" "dump-stack" "loop-running?" "not" "cond" "log-execution-context" "exception-reported" "accountable" "frame" "exception")}
        {Lisp-Entry "exception-reported" #f 756 29 756 47 ()}
        {Lisp-Entry "log-exception" #f 760 29 760 42 ("exception")}
        {Lisp-Entry "log-execution-context" #f 764 11 764 32 ("report-execution-context" "prefix?" "prefix?:" "present-message" "message" "get-reporter" "reporter" "get-execution-stack" "stack" "when" "get-execution-context" "context" "let" "exception")}
        {Lisp-Entry "report-execution-context" #f 781 11 781 35 ("user-message" "detail" "get-details" "details" "get-title" "title" "let" "node" "function" "for-each" "set-message" "report-execution-context" "'report-execution-context" "unimplemented" "reporter" "execution-stack" "message")}
        {Lisp-Entry "report-exception" #f 803 29 803 45 ("invoke-debugger" "present-thread-stack" "primordial-thread?" "throw-stop" "exception:" "dump-stack" "controller-debugger" "not" "cond" "yes" "stop-debugging" "cancel" "present-exception" "case" "else" "report-walk-error" "Walk-Error" "report-read-error" "Read-Error" "typecase" "report-exception" "'report-exception" "unimplemented" "accountable" "frame" "exception")}
        {Lisp-Entry "present-exception" #f 827 11 827 28 ("cancel:" "yes:" "message-box" "cancel" "else" "case" "yes" "present-message" "message" "let*" "present-execution-context" "get-execution-context" "if" "prefix?" "prefix?:" "error" "'error" "type" "type:" "exception")}
        {Lisp-Entry "present-execution-context" #f 840 29 840 54 ("prefix?" "type" "exception")}
        {Lisp-Entry "report-read-error" #f 845 29 845 46 ("stop-debugging" "title:" "message-box" "code" "present-message" "message" "let*" "exception")}
        {Lisp-Entry "report-walk-error" #f 853 29 853 46 ("stop-debugging" "title:" "message-box" "code" "present-message" "message" "let*" "exception")}}}})
"Process-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "process" "Process-Preferences.jazz"} 1226584785
    {Lisp-Entry "jazz.system.process.Process-Preferences" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Process-Preferences" #f 48 7 48 26 ("title:" "Preferences")
        {Lisp-Entry "active-context" #f 51 12 51 26 ("generate")}
        {Lisp-Entry "current-directory" #f 52 12 52 29 ("generate")}
        {Lisp-Entry "protocols" #f 53 12 53 21 ("generate")}
        {Lisp-Entry "walk-form" #f 66 16 66 25 ("push-reference" "in-manifest?" "when" "cdr" "protocol-class" "info" "function" "for-each" "'protocols" "get-property" "protocols" "let" "form" "analyser")}
        {Lisp-Entry "can-rename-component?" #f 80 11 80 32 ()}
        {Lisp-Entry "can-delete-component?" #f 84 11 84 32 ()}
        {Lisp-Entry "can-move-component?" #f 88 11 88 30 ()}
        {Lisp-Entry "can-copy-component?" #f 92 11 92 30 ()}
        {Lisp-Entry "get-row-instance" #f 96 11 96 27 ("nextmethod" "else" "Protocol-List-Row" "new" "protocols" "field-name" "case" "property")}}
      {Lisp-Entry "Protocol-List-Row" #f 107 7 107 24 ("List-Row")
        {Lisp-Entry "get-subrow-class" #f 110 11 110 27 ("Protocol-Row")}
        {Lisp-Entry "add-value" #f 114 11 114 20 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
        {Lisp-Entry "new-value" #f 118 11 118 20 ("cons")}}
      {Lisp-Entry "Protocol-Row" #f 127 7 127 19 ("Value-Row")
        {Lisp-Entry "present" #f 135 11 135 18 ("format" "model")}}}})
"Process-Snapshot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "snapshot" "Process-Snapshot.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.snapshot.Process-Snapshot" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Process-Snapshot" #f 45 7 45 23 ("Component")
        {Lisp-Entry "process" #f 48 12 48 19 ("generate")}
        {Lisp-Entry "date" #f 49 12 49 16 ("generate")}
        {Lisp-Entry "info" #f 50 12 50 16 ("generate")}
        {Lisp-Entry "computer" #f 51 12 51 20 ("generate")}
        {Lisp-Entry "exception" #f 52 12 52 21 ("generate")}
        {Lisp-Entry "memory" #f 53 12 53 18 ("generate")}
        {Lisp-Entry "collector" #f 54 12 54 21 ("generate")}
        {Lisp-Entry "threads" #f 55 12 55 19 ("generate")}
        {Lisp-Entry "construct-literal" #f 59 16 59 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "print" #f 63 11 63 16 ("threads" "threads:" "collector" "collector:" "memory" "memory:" "exception" "exception:" "computer" "computer:" "date" "date:" "process" "process:" "list" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}}})
"Processes-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugger" "Processes-View.jazz"} 1227218394
    {Lisp-Entry "jazz.debugger.debugger.Processes-View" #f 37 9 37 46 ("Processes-Tree" "register-autoclass" "jazz")
      {Lisp-Entry "Processes-View" #f 57 7 57 21 ("on-double-click" "double-click-handler:" "on-context-menu" "context-menu-handler:" "on-select-process" "Selection-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" "processes" "shown?:" "header" "fill" "content" "flat?:" "vscroll?:" "center" "scroller" "on-update" "tail" "location:" "update" "0" "2" "on-open-snapshot" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "open" "tools" "name:" "border" "layout-type:" "Layout-View")
        {Lisp-Entry "snapshots" #f 60 12 60 21 ("generate")}
        {Lisp-Entry "external-name" #f 78 16 78 29 ("processes-view" "'processes-view" "rest")}
        {Lisp-Entry "host-icon" #f 87 16 87 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 91 16 91 26 ()}
        {Lisp-Entry "get-tools-view" #f 100 11 100 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 104 11 104 24 ("acquire-focus" "processes" "'processes" "locate" "tree" "let")}
        {Lisp-Entry "install" #f 114 11 114 18 ("update" "nextmethod" "rest")}
        {Lisp-Entry "resize" #f 124 11 124 17 ("scroller" "'scroller" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-context-menu" #f 129 11 129 26 ("track-popup-menu" "when" "selected-object" "new-context-menu" "menu" "let" "function" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-double-click" #f 140 11 140 26 ("focus-selected-process" "when" "selected-process" "process" "let" "evt")}
        {Lisp-Entry "Snapshot-Extensions" #f 146 14 146 33 ()}
        {Lisp-Entry "on-open-snapshot" #f 150 11 150 27 ("open-snapshot" "Snapshot-Extensions" "extensions:" "Install" "Directory" "directory:" "choose-file" "with-preserved-current-directory" "get-shift?" "if" "file" "let" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-select-process" #f 161 11 161 28 ("process-change" "evt")}
        {Lisp-Entry "on-update" #f 165 11 165 20 ("keep-only-live?:" "update" "get-shift?" "keep-only-live?" "let" "evt")}
        {Lisp-Entry "process-change" #f 170 11 170 25 ("get-threads-view" "set-process" "highlight-process" "set-debugged-visit?" "when" "selected-process" "process" "let")}
        {Lisp-Entry "with-preserving-update" #f 183 11 183 33 ("generate-event?:" "debugged=?" "test:" "data" "'data" "use:" "with-preserved-selection" "thunk" "tree")}
        {Lisp-Entry "update" #f 191 21 191 27 ("snapshots" "update-snapshots" "update-processes" "remove-every-row" "with-preserving-update" "with-update-locked" "processes" "'processes" "locate" "tree" "let" "function" "with-system-exception-debugger" "keep-only-live?" "keep-only-live?:")}
        {Lisp-Entry "update-processes" #f 204 11 204 27 ("get-debuggers" "validate-liveness?:" "get-processes" "user-data:" "background:" "frame-color:" "image:" "title:" "Tree-Node" "list" "children:" "add-row" "background" "frame-color" "image" "title" "close-process-debugger-resources" "not" "when" "Debugged-Process" "new" "debugged" "debugger" "function" "for-each" "get-visit-highlight" "get-debugged-visit?" "process-background" "Dark-Red" "name:" "Color" "get-debugged-problem?" "process-frame-color" "Bitmap-Resource" "debugged=?" "and" "if" "process-image" "get-title" "live?" "process" "process-title" "define" "get-focused-process" "focused-process" "let" "keep-only-live?" "tree")}
        {Lisp-Entry "selected-process" #f 246 18 246 34 ("selected-object")}
        {Lisp-Entry "selected-object" #f 250 18 250 33 ("get-user-data" "when" "selected-row" "row" "let")}
        {Lisp-Entry "selected-row" #f 256 11 256 23 ("get-row" "when" "get-single-selection" "n" "processes" "'processes" "locate" "tree" "let*")}
        {Lisp-Entry "set-selected-process" #f 263 11 263 31 ("row-rank" "set-single-selection" "when" "process-row" "row" "processes" "'processes" "locate" "tree" "let" "process")}
        {Lisp-Entry "process-row" #f 270 11 270 22 ("continuation-return" "get-user-data" "debugged=?" "when" "rank" "row" "for-each-row" "return" "function" "continuation-capture" "process" "tree")}
        {Lisp-Entry "highlight-process" #f 280 11 280 28 ("set-problem?" "*debugged-problems*" "table->list" "Debugged-Process" "is?" "and" "cdr" "flag" "car" "debugged" "info" "function" "some?" "problem?" "debugger" "'debugger" "get-application" "find-toolbar" "locate-component" "button" "invalidate-cell" "get-visit-highlight" "get-debugged-visit?" "set-background" "Dark-Red" "name:" "Color" "get-debugged-problem?" "if" "set-frame-color" "get-cell-data" "data" "0" "row-rank" "Cell" "new" "cell" "when" "process-row" "row" "processes" "'processes" "locate" "tree" "let" "process")}
        {Lisp-Entry "new-context-menu" #f 305 11 305 27 ("else" "Snapshot-Menu" "Pair" "self" "client:" "Process-Menu" "new" "Debugged-Process" "typecase" "object")}
        {Lisp-Entry "exit-selected-process" #f 313 11 313 32 ("exit" "selected-object" "object" "let")}
        {Lisp-Entry "close-selected-snapshot" #f 318 11 318 34 ("update" "remove!" "snapshots" "set!" "selected-object" "object" "let")}
        {Lisp-Entry "focus-selected-process" #f 324 11 324 33 ("focus-process" "selected-process" "process" "let")}
        {Lisp-Entry "select-toplevel" #f 330 11 330 26 ("select-foreground-window" "get-toplevel-hwnd" "toplevel-hwnd" "selected-process" "process" "let*")}
        {Lisp-Entry "open-snapshot" #f 336 18 336 31 ("add-snapshot" "error" "exists?" "not" "or" "unless" "get-process" "format" "get-directory" "new-file" "essay" "executable" "get-extension" "ci=?" "crash-file?" "read" "snapshot" "let*" "reader" "function" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "rest" "file")}
        {Lisp-Entry "add-snapshot" #f 347 18 347 30 ("update" "list" "cons" "snapshots" "set!" "executable" "file" "snapshot")}}
      {Lisp-Entry "Processes-Tree" #f 357 7 357 21 ("toplevel-controls?:" "431" "width:" "title:" ":icons" "portfolio:" "Tree-View")}
      {Lisp-Entry "Process-Menu" #f 373 7 373 19 ("on-exit" "exit" "on-select" "select" "on-focus" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "focus" "name:" "Context-Menu")
        {Lisp-Entry "on-focus" #f 387 11 387 19 ("client" "focus-selected-process" "evt")}
        {Lisp-Entry "on-select" #f 392 11 392 20 ("client" "select-toplevel" "evt")}
        {Lisp-Entry "on-exit" #f 396 11 396 18 ("client" "exit-selected-process" "evt")}}
      {Lisp-Entry "Snapshot-Menu" #f 405 7 405 20 ("on-close" ":form" "Event-Handler" "action-handler:" "title:" "close" "name:" "Context-Menu")
        {Lisp-Entry "on-close" #f 413 11 413 19 ("close-selected-snapshot" "evt")}}}})
"Product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "project" "Product.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.project.Product" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Product" #f 46 7 46 14 ("Project")
        {Lisp-Entry "icon" #f 49 12 49 16 ("generate")}
        {Lisp-Entry "owner" #f 50 12 50 17 ("generate")}
        {Lisp-Entry "copyright" #f 51 12 51 21 ("generate")}
        {Lisp-Entry "version" #f 52 12 52 19 ("generate")}
        {Lisp-Entry "product-name" #f 60 26 60 38 ()}
        {Lisp-Entry "product-test" #f 69 26 69 38 ("bell")}
        {Lisp-Entry "run-arguments" #f 78 26 78 39 ()}
        {Lisp-Entry "debug-arguments" #f 87 26 87 41 ()}
        {Lisp-Entry "product-update" #f 96 26 96 40 ()}
        {Lisp-Entry "product-build" #f 105 26 105 39 ()}
        {Lisp-Entry "product-clean" #f 114 26 114 39 ()}
        {Lisp-Entry "get-class-image" #f 123 16 123 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 127 16 127 37 ("nextmethod" "else" "version" "copyright" "owner" "icon" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 136 11 136 37 ("catalog-heuristics" "catalog-extensions" "catalog?" "version" "copyright" "owner" "icon" "documentation" "include-extensions" "title")}}}})
"Product-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Product-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Product-Doc" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Product-Doc" #f 45 7 45 18 ("Project-Doc")}}})
"Product-Selector"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Product-Selector.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Product-Selector" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Product-Selector" #f 51 7 51 23 ("5" "on-cancel" "cancel" "3" "on-ok" ":host" "default?:" "enabled?:" "24" "80" "tail" "ok" "south" "36" "buttonbar" "toplevel-controls?:" "235" "width:" "title:" "on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "Selection-Handler" "selection-handler:" "name" "filled-column:" "content" "fill" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "center" "content-border" "on-toggle-hierarchycal" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "hierarchycal" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "toolbar" "name:" "border" "layout-type:" "300" "500" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "hierarchycal?" #f 70 8 70 21 ()}
        {Lisp-Entry "finish" #f 73 11 73 17 ("update" "nextmethod" "rest")}
        {Lisp-Entry "host-title" #f 78 16 78 26 ()}
        {Lisp-Entry "install-in-host" #f 82 11 82 26 ("get-tree" "acquire-focus" "select-active" "host")}
        {Lisp-Entry "get-tree" #f 92 11 92 19 ("content" "'content" "locate")}
        {Lisp-Entry "on-toggle-hierarchycal" #f 101 11 101 33 ("update-buttons" "data" "'data" "use:" "update" "with-preserved-selection" "get-tree" "get-node-column" "set-toplevel-controls?" "not" "hierarchycal?" "set!" "evt")}
        {Lisp-Entry "on-selection-change" #f 110 11 110 30 ("update-buttons" "evt")}
        {Lisp-Entry "default-action" #f 114 11 114 25 ("get-modal-result" "get-host" "end-modal" "ok-enabled?" "when")}
        {Lisp-Entry "update" #f 124 11 124 17 ("update-buttons" "update-content")}
        {Lisp-Entry "update-content" #f 129 11 129 25 ("update-flat" "update-hierarchycal" "hierarchycal?" "if" "remove-every-row" "function" "with-update-locked" "get-tree" "tree" "let")}
        {Lisp-Entry "update-hierarchycal" #f 139 11 139 30 ("collect-products" "for-each" "not" "if" "get-parent" "parent" "product" "insert" "table-set!" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "get-component-image" "image" "get-presentation" "title" "table-ref" "either" "father" "file" "add" "define" "eq?" "test:" "make-table" "rows" "let" "tree")}
        {Lisp-Entry "update-flat" #f 158 11 158 22 ("key:" "collect-products" "string<?" "sort" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "get-component-image" "image" "get-presentation" "title" "let" "product" "function" "for-each" "tree")}
        {Lisp-Entry "collect-products" #f 167 11 167 27 ("queue-list" "enqueue" "Product" "is?" "when" "level" "file" "function" "get-workbench" "for-each-descendant" "new-queue" "products" "let")}
        {Lisp-Entry "update-buttons" #f 176 11 176 25 ("ok" "'ok" "locate" "set-enabled?" "selected-product" "product" "let")}
        {Lisp-Entry "select-active" #f 181 11 181 24 ("get-tree" "select-user-data-row" "active-product" "when")}
        {Lisp-Entry "get-modal-result" #f 191 11 191 27 ("selected-product")}
        {Lisp-Entry "ok-enabled?" #f 195 11 195 22 ("ok" "'ok" "locate" "get-enabled?")}
        {Lisp-Entry "on-double-click" #f 199 11 199 26 ("default-action" "evt")}
        {Lisp-Entry "on-return-press" #f 204 11 204 26 ("default-action" "evt")}
        {Lisp-Entry "on-escape-press" #f 209 11 209 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "selected-product" #f 219 11 219 27 ("Product" "is?" "when" "get-tree" "get-single-selected-data" "file" "let")}}}})
"Profile"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "profile" "Profile.jazz"} 1226584783
    {Lisp-Entry "jazz.profile.Profile" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "Profile" #f 44 7 44 14 ("Object")
        {Lisp-Entry "init" #f 53 26 53 30 ()}
        {Lisp-Entry "finalize" #f 58 26 58 34 ()}
        {Lisp-Entry "privileged-test?" #f 67 26 67 42 ()}
        {Lisp-Entry "test" #f 71 26 71 30 ()}
        {Lisp-Entry "test-shift" #f 75 26 75 36 ()}
        {Lisp-Entry "test-frame" #f 79 26 79 36 ()}
        {Lisp-Entry "test0" #f 83 26 83 31 ()}
        {Lisp-Entry "test1" #f 87 26 87 31 ()}
        {Lisp-Entry "test2" #f 91 26 91 31 ()}
        {Lisp-Entry "test3" #f 95 26 95 31 ()}
        {Lisp-Entry "test4" #f 99 26 99 31 ()}
        {Lisp-Entry "test5" #f 103 26 103 31 ()}
        {Lisp-Entry "test6" #f 107 26 107 31 ()}
        {Lisp-Entry "test7" #f 111 26 111 31 ()}
        {Lisp-Entry "test8" #f 115 26 115 31 ()}
        {Lisp-Entry "test9" #f 119 26 119 31 ()}
        {Lisp-Entry "text-macro" #f 128 26 128 36 ("view")}
        {Lisp-Entry "evaluate" #f 137 26 137 34 ()}
        {Lisp-Entry "console-command" #f 141 26 141 41 ("arguments" "command")}
        {Lisp-Entry "profile-packages" #f 145 26 145 42 ()}
        {Lisp-Entry "play-recording" #f 154 26 154 40 ()}
        {Lisp-Entry "jdbc-drivers" #f 163 26 163 38 ()}
        {Lisp-Entry "java-apidocs" #f 167 26 167 38 ()}
        {Lisp-Entry "get-connection" #f 176 26 176 40 ()}
        {Lisp-Entry "process-sql" #f 180 26 180 37 ("request" "connection")}
        {Lisp-Entry "expand-sql" #f 184 26 184 36 ("request")}
        {Lisp-Entry "sql-output-action" #f 188 26 188 43 ("cell" "tree")}
        {Lisp-Entry "sql-output-menu" #f 192 26 192 41 ("cell" "tree")}
        {Lisp-Entry "sql-output-tooltip" #f 196 26 196 44 ("data" "cell" "tree")}
        {Lisp-Entry "extension-frame-class" #f 205 26 205 47 ("ext")}
        {Lisp-Entry "get-source" #f 209 26 209 36 ("class-name")}}}})
"Profile-Results"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "profiler" "Profile-Results.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.profiler.Profile-Results" #f 37 9 37 52 ("Calls-Tree" "register-autoclass" "jazz")
      {Lisp-Entry "Profile-Results" #f 51 7 51 22 ("on-return-press" "return-press-handler:" "on-select-location" "Selection-Handler" "selection-handler:" "calls" "fill" "vscroll?:" "hscroll?:" "document" "style:" "center" "on-refresh" "refresh" "0" "6" "on-reset-profile" "reset" "on-stop-profile" "stop" "on-start-profile" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "start" "tools" "name:" "border" "layout-type:" "612" "412" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "host-icon" #f 75 16 75 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 79 16 79 26 ()}
        {Lisp-Entry "host-position" #f 83 16 83 29 ("14" "28" "Point")}
        {Lisp-Entry "host-size" #f 87 16 87 25 ("608" "408" "Dimension")}
        {Lisp-Entry "get-tools-view" #f 96 11 96 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 100 11 100 24 ("get-tree" "acquire-focus")}
        {Lisp-Entry "get-tree" #f 109 11 109 19 ("calls" "'calls" "locate")}
        {Lisp-Entry "on-start-profile" #f 118 11 118 27 ("user-message" "start-profile" "evt")}
        {Lisp-Entry "on-stop-profile" #f 123 11 123 26 ("user-message" "view-profile" "stop-profile" "evt")}
        {Lisp-Entry "on-reset-profile" #f 129 11 129 27 ("user-message" "view-profile" "reset-profile" "stop-profile" "evt")}
        {Lisp-Entry "on-refresh" #f 136 11 136 21 ("view-profile" "evt")}
        {Lisp-Entry "on-select-location" #f 140 11 140 29 ("edit-source" "evt")}
        {Lisp-Entry "*frame-indicator*" #f 149 14 149 31 ("94" "blue:" "146" "green:" "255" "red:" "Color" "color:" "Frame-Indicator" "new")}
        {Lisp-Entry "edit-source" #f 153 11 153 22 ("selected-location" "*frame-indicator*" "edit")}
        {Lisp-Entry "selected-frame" #f 162 11 162 25 ("get-row" "get-user-data" "not" "if" "get-single-selection" "rank" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-location" #f 170 11 170 28 ("second" "not" "if" "selected-frame" "frame" "let")}
        {Lisp-Entry "view-profile" #f 182 11 182 23 ("active-profile" "get-tree" "view-profile")}}
      {Lisp-Entry "Calls-Tree" #f 191 7 191 17 ("percentage" "75" "count" "250" "width:" "title:" "name:" "procedure" "filled-column:" ":icons" "portfolio:" "Tree-View")
        {Lisp-Entry "view-profile" #f 206 11 206 23 ("view-calls" "remove-every-row" "function" "with-update-locked" "profile")}
        {Lisp-Entry "view-calls" #f 213 11 213 21 ("collect-calls" "butlast" "reverse" "father:" "user-data:" "->string" "Tree-Label" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "row" "number->string" "procedure" "last" "not-null?" "percentage" "count" "stack" "bind" "call" "function" "for-each" "present-identifier" "get-procedure-name" "name" "first" "creator" "let" "if" "either" "frame" "present-procedure" "define" "profile")}
        {Lisp-Entry "collect-calls" #f 239 11 239 24 ("third" "key:" ">" "sort" "cons" "set!" "calculate-percentage" "list" "call" "count" "stack" "function" "profile-calls" "iterate-table" "calls" "profile-total" "total" "let" "profile")}
        {Lisp-Entry "present-filename" #f 249 15 249 31 ("1" "+" "subseq" "if" "reversed?:" "find" "pos" "let" "filename")}
        {Lisp-Entry "calculate-percentage" #f 256 15 256 35 ("100." "10000" "*" "round" "/" "total" "count")}}}})
"Profiler-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "view" "Profiler-Manager.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.view.Profiler-Manager" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Profiler-Manager" #f 48 7 48 23 ("Layout-View")}
      {Lisp-Entry "Profiler-Manager" #f 54 7 54 23 ("on-double-click" "double-click-handler:" "profiles" "header" "content" "scroller" "profiles-view" "entry" "style:" "edge" "border-type:" "profiles-border" "1" "fill" "center" "on-on/off" "on/off" "tail" "64" "on-reset" "delete" "on-update" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "update" "name:" "north" "location:" "0" "6" "flow" "33" "100" "2" "Rect" "layout-insets:" "border" "layout-type:" "500" "800" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "conclude" #f 76 11 76 19 ("update-profiles" "get-profiler-on?" "on/off" "'on/off" "locate" "set-selected?" "nextmethod" "rest")}
        {Lisp-Entry "host-title" #f 87 16 87 26 ()}
        {Lisp-Entry "host-icon" #f 91 16 91 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-position" #f 95 16 95 29 ("150" "140" "Point")}
        {Lisp-Entry "host-size" #f 99 16 99 25 ("420" "800" "Dimension")}
        {Lisp-Entry "client-activate" #f 103 11 103 26 ("update-profiles")}
        {Lisp-Entry "on-update" #f 112 11 112 20 ("update-profiles" "evt")}
        {Lisp-Entry "on-reset" #f 116 11 116 19 ("update-profiles" "reset-profiles" "evt")}
        {Lisp-Entry "on-on/off" #f 121 11 121 20 ("get-profiler-on?" "not" "set-profiler-on?" "evt")}
        {Lisp-Entry "on-double-click" #f 125 11 125 26 ("profiles-view" "'profiles-view" "locate" "edit-profile" "evt")}
        {Lisp-Entry "update-profiles" #f 134 11 134 26 ("profiles-view" "'profiles-view" "locate" "update-profiles")}}}})
"Profiler-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "view" "Profiler-View.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.view.Profiler-View" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Profiler-View" #f 48 7 48 20 ("Layout-View")}
      {Lisp-Entry "Profiler-View" #f 54 7 54 20 ("toplevel-percentage" "parent-percentage" "total" "average" "100" "count" "279" "width:" "title:" "on-double-click" ":form" "Event-Handler" "double-click-handler:" "row" "selection-mode:" ":icons" "portfolio:" "name" "filled-column:" "profiles" "header" "content" "flat?:" "vscroll?:" "document" "style:" "scroller" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "update-profiles" #f 77 18 77 33 ("get-profiles" "profiles->jml" "view-profiles")}
        {Lisp-Entry "view-profiles" #f 81 18 81 31 ("insert-profiles" "remove-every-row" "function" "with-update-locked" "'profiles" "locate" "tree" "let" "profiles")}
        {Lisp-Entry "insert-profile" #f 89 11 89 25 ("insert-children" "insert-content" "row" "let" "profile" "father" "tree")}
        {Lisp-Entry "insert-content" #f 94 11 94 25 ("user-data:" "either" "Tree-Label" "title:" "Bitmap-Resource" "image:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "profile-toplevel-percentage" "toplevel-percentage" "profile-parent-percentage" "parent-percentage" "/" "average" "profile-total" "total" "profile-count" "count" "profile-name" "name" "let*" "profile" "father" "tree")}
        {Lisp-Entry "profile-parent-percentage" #f 104 11 104 36 ("profile-total" "percentage" "'profile" "get-tag" "eq?" "and" "when" "profile-parent" "parent" "let" "profile")}
        {Lisp-Entry "profile-toplevel-percentage" #f 111 11 111 38 ("profile-total" "percentage" "100" "eq?" "if" "profile-toplevel" "toplevel" "let" "profile")}
        {Lisp-Entry "profile-toplevel" #f 119 11 119 27 ("profile-toplevel" "'profile" "get-tag" "neq?" "not" "or" "if" "profile-parent" "parent" "let" "profile")}
        {Lisp-Entry "insert-children" #f 126 11 126 26 ("get-children" "insert-profiles" "profile" "father" "tree")}
        {Lisp-Entry "insert-profiles" #f 130 11 130 26 ("insert-profile" "child" "function" "for-each" "profiles" "father" "tree")}
        {Lisp-Entry "profile-parent" #f 141 11 141 25 ("get-parent" "profile")}
        {Lisp-Entry "profile-name" #f 145 11 145 23 ("name" "'name" "get-property" "profile")}
        {Lisp-Entry "profile-count" #f 149 11 149 24 ("count" "'count" "get-property" "profile")}
        {Lisp-Entry "profile-total" #f 153 11 153 24 ("total" "'total" "get-property" "profile")}
        {Lisp-Entry "edit-profile" #f 162 18 162 30 ("profile-name" "edit-definitions" "get-application" "appl" "get-row" "get-user-data" "profile" "let" "bell" "null?" "if" "get-single-selection" "selection" "profiles" "'profiles" "locate" "tree" "let*")}}}})
"Progress-Bar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Progress-Bar.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Progress-Bar" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Progress-Bar" #f 46 7 46 19 ("View")
        {Lisp-Entry "Bar-Width" #f 49 14 49 23 ("12")}
        {Lisp-Entry "Bar-Spacing" #f 52 14 52 25 ("2")}
        {Lisp-Entry "infinite?" #f 56 12 56 21 ("set-infinite?" "get-infinite?")}
        {Lisp-Entry "pos" #f 59 8 59 11 ("0")}
        {Lisp-Entry "range" #f 60 8 60 13 ("9" "0" "Range")}
        {Lisp-Entry "step" #f 61 8 61 12 ("1")}
        {Lisp-Entry "bars" #f 62 8 62 12 ("0")}
        {Lisp-Entry "default-size" #f 65 11 65 23 ("20" "100" "Dimension")}
        {Lisp-Entry "get-infinite?" #f 74 18 74 31 ("infinite?")}
        {Lisp-Entry "set-infinite?" #f 78 18 78 31 ("infinite?" "set!" "flag")}
        {Lisp-Entry "get-pos" #f 82 18 82 25 ("pos")}
        {Lisp-Entry "set-pos" #f 86 18 86 25 ("invalidate-bars" "pos" "set!" "p")}
        {Lisp-Entry "delta-pos" #f 91 18 91 27 ("invalidate-bars" "range" "get-end" "modulo" "set!" "infinite?" "when" "pos" "increase!" "increment")}
        {Lisp-Entry "set-step" #f 98 18 98 26 ("step" "set!" "increment")}
        {Lisp-Entry "step-it" #f 102 18 102 25 ("step" "delta-pos")}
        {Lisp-Entry "set-done" #f 106 18 106 26 ("range" "get-end" "set-pos")}
        {Lisp-Entry "get-range" #f 110 18 110 27 ("range")}
        {Lisp-Entry "set-range" #f 114 18 114 27 ("invalidate-bars" "range" "set!" "rng")}
        {Lisp-Entry "invalidate-bars" #f 124 11 124 26 ("invalidate-view" "set!" "bars" "/=" "when" "calculate-bars" "n" "let")}
        {Lisp-Entry "calculate-bars" #f 131 11 131 25 ("Bar-Spacing" "Bar-Width" "quotient" "1" "pos" "*" "fxceiling/" "+" "right" "2" "get-width" "-" "width" "get-bounds" "bounds" "let*" "0" "=" "if" "get-end" "end" "range" "get-start" "start" "let")}
        {Lisp-Entry "draw" #f 147 11 147 15 ("0" "naturals" "Bar-Spacing" "increase!" "Focused-Selection" "name:" "Color" "min" "Rect" "new" "fill-rect" "=" "infinite?" "not" "or" "when" "Bar-Width" "+" "right" "let" "n" "function" "for-each" "1" "bars" "last" "3" "-" "max-right" "top" "2" "left" "get-height" "height" "get-width" "width" "let*" "rectangle" "'rectangle" "edges:" "sunken" "'sunken" "outer:" "get-bounds" "draw-edge" "lv" "lh" "context" "surface")}}}})
"Progress-Reporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Progress-Reporter.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Progress-Reporter" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Progress-Reporter" #f 48 7 48 24 ("on-escape-press" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-action" ":form" "Event-Handler" "action-handler:" "22" "90" "87" "319" "action" "88" "progress" "297" "70" "message" "16" "300" "23" "50" "invite" "name:" "Bitmap-Resource" "image-name:" ":large-icons" "portfolio:" "32" "20" "10" "Point" "position:" "128" "420" "Dimension" "size:" "title:" "Reporter" "View")
        {Lisp-Entry "cancelled?" #f 51 8 51 18 ()}
        {Lisp-Entry "done?" #f 52 8 52 13 ()}
        {Lisp-Entry "install" #f 64 11 64 18 ("action" "'action" "acquire-focus" "0" "set-pos" "'progress" "locate" "progress" "let" "nextmethod" "rest")}
        {Lisp-Entry "host-title" #f 76 16 76 26 ()}
        {Lisp-Entry "dialog-class" #f 81 16 81 28 ("Progress-Reporter-Dialog")}
        {Lisp-Entry "Progress-Reporter-Dialog" #f 86 14 86 38 ("Dialog")
          {Lisp-Entry "on-close" #f 89 13 89 21 ("processed" "guest" "request-cancel" "closable?" "when" "evt")}}
        {Lisp-Entry "disable-cancel" #f 100 11 100 25 ("action" "'action" "locate" "set-enabled?")}
        {Lisp-Entry "cancel-enabled?" #f 104 11 104 26 ("action" "'action" "locate" "get-enabled?")}
        {Lisp-Entry "cancel-requested?" #f 108 11 108 28 ("cancelled?")}
        {Lisp-Entry "test-cancelled" #f 112 11 112 25 ("throw-cancel" "cancel-requested?" "when")}
        {Lisp-Entry "on-action" #f 122 11 122 20 ("current-action" "evt")}
        {Lisp-Entry "on-return-press" #f 127 11 127 26 ("current-action" "evt")}
        {Lisp-Entry "escape-press" #f 132 11 132 23 ("request-cancel" "cancel-enabled?" "when" "key")}
        {Lisp-Entry "section-title" #f 142 11 142 24 ("set-message" "title")}
        {Lisp-Entry "set-message" #f 146 18 146 29 ("message" "'message" "locate" "set-title" "msg")}
        {Lisp-Entry "user-message" #f 150 18 150 30 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-range" #f 154 18 154 27 ("progress" "'progress" "locate" "set-range" "range")}
        {Lisp-Entry "set-pos" #f 158 18 158 25 ("progress" "'progress" "locate" "set-pos" "pos")}
        {Lisp-Entry "delta-pos" #f 162 18 162 27 ("progress" "'progress" "locate" "delta-pos" "increment")}
        {Lisp-Entry "set-step" #f 166 18 166 26 ("progress" "'progress" "locate" "set-step" "increment")}
        {Lisp-Entry "step-it" #f 170 18 170 25 ("progress" "'progress" "locate" "step-it")}
        {Lisp-Entry "set-done" #f 174 18 174 26 ("set-default?" "done-title" "action" "'action" "set-title" "progress" "'progress" "locate" "set-done" "done?" "set!")}
        {Lisp-Entry "current-action" #f 186 11 186 25 ("request-cancel" "done-action" "done?" "if")}
        {Lisp-Entry "request-cancel" #f 193 26 193 40 ("set-message" "cancelled?" "set!")}
        {Lisp-Entry "done-title" #f 198 29 198 39 ()}
        {Lisp-Entry "done-action" #f 202 29 202 40 ("get-modal-result" "end-modal" "get-guest" "guest" "get-host" "dialog" "let*")}}}})
"Project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "project" "Project.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.project.Project" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Project" #f 49 7 49 14 ("build?:" "Project-File")
        {Lisp-Entry "title" #f 52 12 52 17 ("generate")}
        {Lisp-Entry "include-extensions" #f 53 12 53 30 ("generate")}
        {Lisp-Entry "documentation" #f 54 12 54 25 ("generate")}
        {Lisp-Entry "editable?" #f 55 12 55 21 ("generate" "nil")}
        {Lisp-Entry "active?" #f 56 12 56 19 ("generate")}
        {Lisp-Entry "catalog?" #f 57 12 57 20 ("generate")}
        {Lisp-Entry "catalog-extensions" #f 58 12 58 30 ("generate")}
        {Lisp-Entry "catalog-heuristics" #f 59 12 59 30 ("generate")}
        {Lisp-Entry "workbench" #f 62 8 62 17 ()}
        {Lisp-Entry "parent-project" #f 63 8 63 22 ()}
        {Lisp-Entry "catalog" #f 64 8 64 15 ()}
        {Lisp-Entry "initer-property?" #f 71 11 71 27 ("workbench" "'workbench" "eq?" "nextmethod" "or" "name")}
        {Lisp-Entry "default-name" #f 76 11 76 23 ("self" "class-of" "type-name" "identifier-name")}
        {Lisp-Entry "prepare" #f 80 11 80 18 ("workbench" "set!" "when" "workbench:" "getf" "arg" "let" "nextmethod" "rest")}
        {Lisp-Entry "print" #f 87 11 87 16 ("title" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-workbench" #f 99 18 99 31 ("workbench")}
        {Lisp-Entry "set-workbench" #f 103 18 103 31 ("workbench" "set!" "value")}
        {Lisp-Entry "get-parent-project" #f 107 18 107 36 ("parent-project")}
        {Lisp-Entry "set-parent-project" #f 111 18 111 36 ("parent-project" "set!" "value")}
        {Lisp-Entry "project-title" #f 115 26 115 39 ("self" "class-of" "type-name" "->string" "title" "either")}
        {Lisp-Entry "get-catalog" #f 119 18 119 29 ("catalog")}
        {Lisp-Entry "set-catalog" #f 123 18 123 29 ("catalog" "set!" "value")}
        {Lisp-Entry "get-effective-source" #f 133 11 133 31 ("name" "get-manifest-source")}
        {Lisp-Entry "require-catalog" #f 142 11 142 26 ("create/register-catalog" "set!" "catalog" "unless")}
        {Lisp-Entry "create/register-catalog" #f 148 11 148 34 ("get-application" "get-cataloguer" "add-catalog" "create-catalog" "catalog" "let")}
        {Lisp-Entry "create-catalog" #f 154 11 154 25 ("catalog-output" "catalog-name" "self" "Project-Catalog" "new")}
        {Lisp-Entry "catalog-name" #f 158 29 158 41 ("name" "string->symbol" "title" "if")}
        {Lisp-Entry "catalog-output" #f 164 29 164 43 ("catalog-name" "format" "Profile" "'Profile" "list" "File" "new")}
        {Lisp-Entry "get-effective-editable?" #f 173 26 173 49 ("parent-project" "get-effective-editable?" "editable?" "nil?" "if")}
        {Lisp-Entry "for-each-file" #f 184 18 184 31 ("is?" "when" "level" "descendant" "function" "for-each-descendant" "Project-File" "type" "proc")}
        {Lisp-Entry "collect-files" #f 191 18 191 31 ("get-output" "put" "is?" "when" "file" "function" "for-each-file" "List-Factory" "new" "fact" "let" "Project-File" "type")}
        {Lisp-Entry "fold-files" #f 200 18 200 28 ("self" "get-children" "c" "for-each" ":skip" "eq?" "is?" "if" "ps" "let" "s" "f" "x" "function" "fold" "letrec" "Project-File" "type" "seed" "proc")}
        {Lisp-Entry "add-to-index" #f 220 11 220 23 ("self" "workbench" "add-to-project" "find-workbench" "set-workbench" "component" "name")}
        {Lisp-Entry "remove-from-index" #f 225 11 225 28 ("self" "workbench" "remove-from-project" "component" "name")}
        {Lisp-Entry "find-workbench" #f 229 29 229 43 ("find-ascendant" "Workbench" "is?" "if" "workbench" "creator" "either" "project" "let")}
        {Lisp-Entry "get-class-image" #f 241 16 241 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 245 16 245 37 ("nextmethod" "else" "catalog-heuristics" "catalog-extensions" "catalog?" "editable?" "active?" "documentation" "include-extensions" "title" "field-name" "case" "property")}
        {Lisp-Entry "presentation-property?" #f 258 11 258 33 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 262 11 262 27 ("self" "class-of" "type-name" "->string" "title" "either")}
        {Lisp-Entry "set-presentation" #f 266 11 266 27 ("title:" "self" "set-property" "presentation" "designer")}
        {Lisp-Entry "addable-class?" #f 270 11 270 25 ("Project-Group" "Project-File" "subtype?" "or" "class")}
        {Lisp-Entry "get-addable-classes" #f 275 11 275 30 ("Project-Group" "list")}
        {Lisp-Entry "get-row-instance" #f 287 11 287 27 ("nextmethod" "else" "Boolean-Row" "active?" "catalog?" "File-Row" "documentation" "Value-Row" "catalog-heuristics" "catalog-extensions" "include-extensions" "nullable?:" "String-Row" "new" "title" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 296 11 296 37 ("catalog-heuristics" "catalog-extensions" "catalog?" "active?" "documentation" "include-extensions" "title")}}}})
"Project-Catalog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "project" "Project-Catalog.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.project.Project-Catalog" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Project-Catalog" #f 46 7 46 22 ("Indexed-Catalog")
        {Lisp-Entry "project" #f 49 8 49 15 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("project~self" "set!" "nextmethod" "apply" "rest" "project")}
        {Lisp-Entry "get-project" #f 62 18 62 29 ("project")}
        {Lisp-Entry "get-extensions" #f 66 11 66 25 ("project" "get-catalog-extensions" "effective-catalog-extensions")}
        {Lisp-Entry "get-heuristics" #f 70 11 70 25 ("project" "get-catalog-heuristics")}
        {Lisp-Entry "get-active?" #f 79 11 79 22 ("project" "get-active?")}
        {Lisp-Entry "set-active?" #f 83 11 83 22 ("deactivate" "activate" "if" "set-active?" "project" "get-active?" "neq?" "when" "flag")}
        {Lisp-Entry "scan-directories" #f 96 11 96 27 ("increase!" "process-file" "ci=?" "test:" "member?" "not" "or" "get-extension" "ext" "when" "get-effective-source" "file" ":skip" "get-catalog?" "Project" "is?" "neq?" "and" "if" "seed" "project-file" "function" "project" "fold-files" "get-extensions" "extensions" "0" "processed" "let")}}}})
"Project-Designer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "project" "Project-Designer.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.project.Project-Designer" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Project-Designer" #f 46 7 46 23 ("Designer")
        {Lisp-Entry "print" #f 49 11 49 16 ("reference" "format" "function" "self" "print-unreadable" "readably" "printer")}}}})
"Project-Directory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "file" "Project-Directory.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.file.Project-Directory" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Project-Directory" #f 47 7 47 24 ("Project-Group")
        {Lisp-Entry "directory" #f 50 12 50 21 ("generate")}
        {Lisp-Entry "property-presentation" #f 58 16 58 37 ("nextmethod" "else" "directory" "field-name" "case" "property")}
        {Lisp-Entry "get-presentation" #f 64 11 64 27 ("get-name" "directory" "if")}
        {Lisp-Entry "can-rename-component?" #f 70 11 70 32 ()}
        {Lisp-Entry "get-row-instance" #f 74 11 74 27 ("nextmethod" "else" "Directory-Row" "new" "directory" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 80 11 80 37 ("directory")}}}})
"Project-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Project-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Project-Doc" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Project-Doc" #f 45 7 45 18 ("Doc")}}})
"Project-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "file" "Project-File.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.file.Project-File" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Project-File" #f 46 7 46 19 ("Component")
        {Lisp-Entry "source" #f 49 12 49 18 ("generate")}
        {Lisp-Entry "build?" #f 50 12 50 18 ("generate")}
        {Lisp-Entry "project" #f 53 8 53 15 ()}
        {Lisp-Entry "get-project" #f 61 18 61 29 ("project")}
        {Lisp-Entry "set-project" #f 65 18 65 29 ("project" "set!" "value")}
        {Lisp-Entry "get-effective-source" #f 74 26 74 46 ("source")}
        {Lisp-Entry "require-catalog" #f 83 26 83 41 ("project" "require-catalog")}
        {Lisp-Entry "preprocess" #f 92 26 92 36 ("rest" "output" "log" "reporter" "product")}
        {Lisp-Entry "build" #f 96 26 96 31 ("rest" "output" "log" "reporter" "product")}
        {Lisp-Entry "get-class-image" #f 105 16 105 31 ("Bitmap-Resource")}
        {Lisp-Entry "presentation-property?" #f 109 11 109 33 ("source" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 113 11 113 27 ("get-name" "source" "if")}
        {Lisp-Entry "can-cut-component?" #f 120 11 120 29 ()}
        {Lisp-Entry "can-copy-component?" #f 125 11 125 30 ()}
        {Lisp-Entry "can-paste-component?" #f 130 11 130 31 ()}
        {Lisp-Entry "can-move-component?" #f 135 11 135 30 ()}
        {Lisp-Entry "get-categorized-properties" #f 139 11 139 37 ("build?" "source")}
        {Lisp-Entry "get-row-instance" #f 143 11 143 27 ("nextmethod" "else" "Boolean-Row" "build?" "File-Row" "new" "source" "field-name" "case" "property")}}}})
"Project-Group"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "file" "Project-Group.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.file.Project-Group" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Project-Group" #f 47 7 47 20 ("Group")
        {Lisp-Entry "presentation->name" #f 55 16 55 34 ("presentation")}
        {Lisp-Entry "name->presentation" #f 59 16 59 34 ("name")}
        {Lisp-Entry "can-cut-component?" #f 64 11 64 29 ()}
        {Lisp-Entry "can-copy-component?" #f 69 11 69 30 ()}
        {Lisp-Entry "can-paste-component?" #f 74 11 74 31 ()}
        {Lisp-Entry "can-move-component?" #f 79 11 79 30 ()}
        {Lisp-Entry "sort-components" #f 83 11 83 26 ("get-presentation" "1" "0" "Project-Group" "is?" "if" "cons" "component" "function" "key:" "nu<?" "sort" "components")}
        {Lisp-Entry "addable-class?" #f 89 11 89 25 ("Project-Group" "Project-File" "subtype?" "or" "class")}
        {Lisp-Entry "get-addable-classes" #f 94 11 94 30 ("Project-Group" "list")}}}})
"Projects-Search"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Projects-Search.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Projects-Search" #f 37 9 37 39 ("Entries-Combo" "Catalog-Combo" "register-autoclass" "jazz")
      {Lisp-Entry "Projects-Search" #f 48 7 48 22 ("entries" "41" "45" "catalog" "Entry-Border" "Medium" "Color" "border-color:" "3" "2" "Rect" "border-insets:" "22" "155" "17" "163" "16" "46" "21" "115" "44" "references" "selected?:" "18" "100" "Dimension" "size:" "20" "13" "Point" "position:" "definitions" "title:" "domain" "name:" "Search-View")
        {Lisp-Entry "finish" #f 67 11 67 17 ("setup-catalogs" "nextmethod" "rest")}
        {Lisp-Entry "setup-catalogs" #f 72 11 72 25 ("entries" "'entries" "set-value" "collect-catalogs" "list" "cons" "set-choices" "catalog" "'catalog" "locate" "combo" "let")}
        {Lisp-Entry "collect-catalogs" #f 81 11 81 27 ("get-application" "get-cataloguer" "get-catalogs" "get-name" "->string" "list" "catalog" "function" "map")}
        {Lisp-Entry "set-session-properties" #f 92 11 92 33 ("set-ignore-case?" "set-whole-words?" "nextmethod" "config")}
        {Lisp-Entry "get-search-domains" #f 103 11 103 29 ("references" "definitions")}
        {Lisp-Entry "catalog-change" #f 113 11 113 25 ("catalog")}
        {Lisp-Entry "search-targets" #f 122 11 122 25 ("search-targets-references" "references" "search-targets-definitions" "definitions" "domain" "'domain" "locate" "get-content" "get-selected-element" "case" "targets")}
        {Lisp-Entry "search-targets-definitions" #f 130 11 130 37 ("select-results" "add-results" "set-references-target" "'definitions" "set-mode" "get-results" "results" "else" "edit" "case" "user-message" "bell" "begin" "null?" "ignore-case?:" "whole-words?:" "search-definitions" "definitions" "get-ignore-case?" "ignore-case?" "get-whole-words?" "whole-words?" "get-target" "string->symbol" "name" "get-application" "get-cataloguer" "cataloguer" "selected-catalog" "catalog" "car" "target" "let" "message-box" "1" "length" ">" "if" "targets")}
        {Lisp-Entry "search-targets-references" #f 155 11 155 36 ("select-results" "get-search-targets" "add-results" "set-references-target" "set-context" "'references" "set-mode" "get-results" "results" "else" "edit-reference" "case" "user-message" "bell" "begin" "null?" "get-references" "references" "get-target" "string->symbol" "name" "get-application" "get-cataloguer" "cataloguer" "selected-catalog" "catalog" "get-ignore-case?" "get-whole-words?" "not" "car" "target" "let" "message-box" "1" "length" ">" "if" "targets")}
        {Lisp-Entry "search-definitions" #f 188 21 188 39 ("select-results" "get-search-targets" "add-results" "->string" "list" "set-search-targets" "locate" "set-selected?" "set-references-target" "'definitions" "set-mode" "get-results" "results" "let" "definitions" "name")}
        {Lisp-Entry "search-references" #f 198 21 198 38 ("select-results" "get-search-targets" "add-results" "->string" "list" "set-search-targets" "locate" "set-selected?" "set-references-target" "set-context" "'references" "set-mode" "get-results" "results" "let" "ctx" "references" "name")}
        {Lisp-Entry "selected-catalog" #f 214 11 214 27 ("catalog" "'catalog" "locate" "get-value")}}
      {Lisp-Entry "Catalog-Combo" #f 223 7 223 20 ("Combo-Box")
        {Lisp-Entry "content-change" #f 226 11 226 25 ("get-value" "get-creator" "catalog-change" "origin")}}
      {Lisp-Entry "Entries-Combo" #f 238 7 238 20 ("Combo-Box")}}})
"Projects-Search-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Projects-Search-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Projects-Search-Preferences" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Projects-Search-Preferences" #f 46 7 46 34 ("title:" "Search-View-Preferences")}}})
"Prop-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "prop" "text" "Prop-Syntax.jazz"} 1226584779
    {Lisp-Entry "jazz.language.prop.text.Prop-Syntax" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Prop-Syntax" #f 45 7 45 18 ("Code-Syntax")
        {Lisp-Entry "Comment" #f 53 14 53 21 ("1" "make-string")}
        {Lisp-Entry "Title-Comment" #f 57 14 57 27 ("4" "make-string")}
        {Lisp-Entry "comment-string" #f 61 11 61 25 ("Comment")}
        {Lisp-Entry "title-comment-string" #f 65 11 65 31 ("Title-Comment")}}}})
"Prop-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Prop-Text-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Prop-Text-Preferences" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Prop-Text-Preferences" #f 48 7 48 28 ("Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Code-Text-Preferences")
        {Lisp-Entry "title-color" #f 51 12 51 23 ("generate")}
        {Lisp-Entry "comment-color" #f 52 12 52 25 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 67 11 67 37 ("comment-color" "title-color")}
        {Lisp-Entry "get-row-instance" #f 71 11 71 27 ("nextmethod" "else" "Color-Row" "new" "comment-color" "title-color" "field-name" "case" "property")}}}})
"Prop-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "prop" "text" "Prop-Text-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.prop.text.Prop-Text-View" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Prop-Text-View" #f 48 7 48 21 ("Code-Text-View")
        {Lisp-Entry "install" #f 51 11 51 18 ("get-comment-color" "Comment" "'Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 58 16 58 29 ("prop-text" "'prop-text" "rest")}
        {Lisp-Entry "new-syntax" #f 62 11 62 21 ("Prop-Syntax" "new")}
        {Lisp-Entry "default-preferences" #f 71 14 71 33 ("form>>")}
        {Lisp-Entry "preferences" #f 76 11 76 22 ("prop-text" "documents" "get-preferences")}
        {Lisp-Entry "colorize-syntax" #f 80 11 80 26 ("colorize-comments" "rest")}
        {Lisp-Entry "colorize-comments" #f 84 11 84 28 ("Title" "'Title" "4" "+" "Comment" "'Comment" "stylize" "not" "if" "title?" "end" "start" "function" "for-each-comment" "text-beginning" "end:" "self" "Jazz-Explorer" "new" "expl" "let" "rest")}
        {Lisp-Entry "recolorize-text" #f 94 11 94 26 ("recolorize-row" "for-each" "1" "+" "get-row" "naturals" "range" "let" "end-row" "start")}
        {Lisp-Entry "recolorize-row" #f 99 11 99 25 ("recolorize-comments" "row")}
        {Lisp-Entry "recolorize-comments" #f 103 11 103 30 ("Title" "'Title" "Cell" "new" "Comment" "'Comment" "apply-style" "begin" "title-comment-string" "subseq" "nu=?" "<" "if" "4" "+" "title-end" "let" "20" "<=" "and" "when" "syntax" "comment-string" "search" "comment" "cardinality" "len" "paragraph-string" "line" "let*" "row")}}}})
"Properties-Card"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "card" "Properties-Card.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.card.Properties-Card" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Properties-Card" #f 47 7 47 22 ("on-context-menu" "tree" "Event-Handler" "context-menu-handler:" "header" "content" "vscroll?:" "document" "style:" "scroller" "tools" "name:" "fill" "layout-type:" "Card")
        {Lisp-Entry "get-tree" #f 65 18 65 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "on-editor" #f 74 11 74 20 ("nextmethod" "else" ":selection-changing" "reset-modified-properties" ":saved" "property:" "get-property" "select-property" ":property-selected" "get-tree" "save-edition" ":saving" ":branch-changing" "get-force?" "force?:" "get-selection" "set-client" ":selection-changed" "get-kind" "case" "evt")}
        {Lisp-Entry "client-update" #f 93 11 93 24 ("get-tree" "client-update")}
        {Lisp-Entry "call-property-change" #f 102 11 102 31 ("value:" "property:" "property-change" "client" "car" "eq?" "when" "component:" "get-property" "component" "let" "evt")}
        {Lisp-Entry "property-change" #f 108 11 108 26 ("get-tree" "property-change" "value" "property" "component")}
        {Lisp-Entry "enter-value" #f 117 11 117 22 ("client" "designer" "set-property" "component" "function" "for-each" "value" "property")}}}})
"Properties-Descriptor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "descriptor" "Properties-Descriptor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.descriptor.Properties-Descriptor" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "Properties-Descriptor" #f 45 7 45 28 ("Component")
        {Lisp-Entry "get-class-descriptor" #f 54 16 54 36 ("Descriptors.Properties-Descriptor")}}}})
"Properties-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "properties" "text" "Properties-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.properties.text.Properties-Entry" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "Properties-Entry" #f 46 7 46 23 ("Indexed-Entry")
        {Lisp-Entry "english" #f 49 8 49 15 ()}
        {Lisp-Entry "construct-literal" #f 53 16 53 33 ("self" "new" "column" "line" "name" "context")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("nextmethod" "column" "line" "name")}
        {Lisp-Entry "print-catalog" #f 61 11 61 24 ("column" "line" "name" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 73 11 73 20 ("Bitmap-Resource")}}}})
"Properties-File-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "properties" "text" "Properties-File-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.properties.text.Properties-File-Entry" #f 37 9 37 60 ("jazz")
      {Lisp-Entry "Properties-File-Entry" #f 46 7 46 28 ("File-Entry")
        {Lisp-Entry "get-image" #f 49 11 49 20 ("Bitmap-Resource")}}}})
"Properties-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "card" "Properties-Manager.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.card.Properties-Manager" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Properties-Manager" #f 47 7 47 25 ("header" "content" "tool" "style:" "scroller" "name:" "Properties-Card")
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "self" "close-selected" "get-application" "appl" "let")}
        {Lisp-Entry "external-name" #f 63 16 63 29 ("properties-card" "'properties-card" "rest")}
        {Lisp-Entry "host-icon" #f 72 16 72 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 76 16 76 26 ()}
        {Lisp-Entry "host-install" #f 80 11 80 23 ("on-selected-change" "'on-selected-change" "method-name:" "self" "target:" "Event-Handler" "new" "add-selected-listener" "get-application" "appl" "let")}
        {Lisp-Entry "host-uninstall" #f 85 11 85 25 ("self" "remove-selected-listener" "get-application" "appl" "let")}
        {Lisp-Entry "focus-default" #f 95 11 95 24 ("acquire-focus" "'tree" "locate" "tree" "let")}
        {Lisp-Entry "get-tools-view" #f 100 11 100 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "install-in-host" #f 109 11 109 26 ("categorized" "'categorized" "tree" "'tree" "set-filter" "header" "'header" "scroller" "'scroller" "locate" "set-flat?" "Docked-Host" "is?" "when" "nextmethod" "host")}
        {Lisp-Entry "on-selected-change" #f 122 11 122 29 ("else" "get-designer" "let*" "Editor-View" "force?:" "set-client" "set-designer" "set-editor" "get-force?" "force?" "get-selected" "client" "designer" "editor" "Designer" "typecase" "get-owner" "owner" "let" "evt")}
        {Lisp-Entry "on-editor" #f 152 11 152 20 ("nextmethod" "else" ":selection-changed" "get-kind" "case" "evt")}}}})
"Properties-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "properties" "text" "Properties-Parser.jazz"} 1226584779
    {Lisp-Entry "jazz.language.properties.text.Properties-Parser" #f 37 9 37 56 ("jazz")
      {Lisp-Entry "Properties-Parser" #f 46 7 46 24 ("File-Parser")
        {Lisp-Entry "parse" #f 49 11 49 16 ("parse-definitions" "catalog" "Properties-File-Entry" "new" "time" "file")}
        {Lisp-Entry "parse-definitions" #f 53 11 53 28 ("get-output" "length" "0" "naturals" "put" "when" "parse-line" "entry" "no" "line" "function" "for-each" "List-Factory" "new" "fact" "char-encoding" "char-encoding:" "load-lines" "lines" "let" "file")}
        {Lisp-Entry "parse-line" #f 65 11 65 21 ("Properties-Entry" "new" "subseq" "name" "end" "let*" ">" "start:" "properties-constituent?" "skip" "start" "0" "=" "when" "skip-whitespace" "col" "let" "no" "line")}
        {Lisp-Entry "properties-constituent?" #f 76 11 76 34 ("eqv?" "c-constituent?" "or" "char")}}}})
"Properties-Rights"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "security" "Properties-Rights.jazz"} 1226584782
    {Lisp-Entry "jazz.library.security.Properties-Rights" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Properties-Rights" #f 44 7 44 24 ("Rights")}}})
"Properties-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "properties" "text" "Properties-Syntax.jazz"} 1226584779
    {Lisp-Entry "jazz.language.properties.text.Properties-Syntax" #f 37 9 37 56 ("jazz")
      {Lisp-Entry "Properties-Syntax" #f 46 7 46 24 ("Code-Syntax")
        {Lisp-Entry "get-constituent-test" #f 54 11 54 31 ("c-constituent?")}}}})
"Properties-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "properties" "text" "Properties-Text-Preferences.jazz"} 1226584779
    {Lisp-Entry "jazz.language.properties.text.Properties-Text-Preferences" #f 37 9 37 66 ("jazz")
      {Lisp-Entry "Properties-Text-Preferences" #f 49 7 49 34 ("Dark-Blue" "keyword-color:" "definition-color:" "Purple" "line-comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "CLike-Text-Preferences")}}})
"Properties-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "properties" "text" "Properties-Text-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.properties.text.Properties-Text-View" #f 37 9 37 59 ("jazz")
      {Lisp-Entry "Properties-Text-View" #f 47 7 47 27 ("Code-Text-View")
        {Lisp-Entry "install" #f 50 11 50 18 ("get-keyword-color" "Keyword" "'Keyword" "get-definition-color" "Definition" "'Definition" "get-line-comment-color" "Line-Comment" "'Line-Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 59 16 59 29 ("properties-text" "'properties-text" "rest")}
        {Lisp-Entry "preferences" #f 63 11 63 22 ("properties-text" "documents" "get-preferences")}
        {Lisp-Entry "host-workspaces" #f 72 11 72 26 ("text")}
        {Lisp-Entry "favorite-completions" #f 81 11 81 31 ("properties-text" "documents" "get-preferences" "get-completions")}
        {Lisp-Entry "explorer-class" #f 90 11 90 25 ("C-Explorer")}
        {Lisp-Entry "get-context" #f 99 11 99 22 ("c")}
        {Lisp-Entry "current-name" #f 103 11 103 23 ("current-expr-range" "name-at")}
        {Lisp-Entry "name-at" #f 107 11 107 18 ("read-string-element" "0" "element" "eqv?" "if" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "current-expr" #f 115 11 115 23 ("current-name")}
        {Lisp-Entry "current-expr-range" #f 119 11 119 29 ("get-end" "expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "expr-range" #f 125 11 125 21 ("get-range" "outer-expr" "end:" "start:" "self" "C-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "expr-at" #f 131 11 131 18 ("expr-range" "name-at" "pos")}
        {Lisp-Entry "headers" #f 140 12 140 19 ("list")}
        {Lisp-Entry "get-headers" #f 145 11 145 22 ("headers")}
        {Lisp-Entry "get-first-special?" #f 149 11 149 29 ()}
        {Lisp-Entry "Definitions" #f 158 12 158 23 ()}
        {Lisp-Entry "get-definitions" #f 162 11 162 26 ("Definitions")}
        {Lisp-Entry "Keywords" #f 171 12 171 20 ()}
        {Lisp-Entry "get-keywords" #f 175 11 175 23 ("Keywords")}
        {Lisp-Entry "Syntax-Targets" #f 184 14 184 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 187 14 187 29 ()}
        {Lisp-Entry "syntax-targets" #f 191 11 191 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 197 11 197 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" #f 203 11 203 33 ("get-keywords" "keyword" "'keyword" "get-definitions" "definition" "'definition" "str" "function" "map" "line-comment" "'line-comment" "list" "append")}
        {Lisp-Entry "compute-syntax-automata" #f 209 11 209 34 ("c-constituent?" "self" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "colorize-type" #f 213 11 213 24 ("Keyword" "'Keyword" "keyword" "Definition" "'Definition" "colorize-keyword" "definition" "Title" "'Title" "Line-Comment" "'Line-Comment" "colorize-line-comment" "line-comment" "case" "recolorize?" "colorizer" "end" "start" "type" "found")}}}})
"Properties-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "card" "Properties-Tree.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.card.Properties-Tree" #f 37 9 37 43 ("Value-Column" "Property-Column" "register-autoclass" "jazz")
      {Lisp-Entry "Filter-Width" #f 48 12 48 24 ("20")}
      {Lisp-Entry "Properties-Tree" #f 52 7 52 22 ("center" "justification:" "50" "owner" "192" "toplevel-controls?:" "176" "width:" "title:" "property" "name:" "on-context-menu" ":form" "Event-Handler" "context-menu-handler:" ":icons" "portfolio:" "row-spacing:" "0" "column-spacing:" "auto-expand/collapse?:" "row" "selection-mode:" "multiple-selection?:" "draggable?:" "value" "filled-column:" "Tree-View")
        {Lisp-Entry "filter" #f 55 12 55 18 ("set-filter" "get-filter" "categorized" "'categorized")}
        {Lisp-Entry "filter-locked?" #f 56 12 56 26 ("set-filter-locked?" "get-filter-locked?")}
        {Lisp-Entry "filter-visible?" #f 57 12 57 27 ("set-filter-visible?" "get-filter-visible?")}
        {Lisp-Entry "property-handler" #f 58 12 58 28 ("set-property-handler" "get-property-handler")}
        {Lisp-Entry "get-card" #f 73 18 73 26 ("5" "child")}
        {Lisp-Entry "get-editor" #f 77 18 77 28 ("get-card" "get-editor")}
        {Lisp-Entry "get-client" #f 81 18 81 28 ("get-card" "get-client")}
        {Lisp-Entry "get-designer" #f 85 18 85 30 ("get-card" "get-designer")}
        {Lisp-Entry "double-click" #f 94 11 94 23 ("self" "acquire" "double-click" "when" "get-selected-row" "row" "let" "pos")}
        {Lisp-Entry "on-context-menu" #f 100 11 100 26 ("context-menu" "else" "5" "Point" "self" "client:" "Filter-Menu" "new" "track-popup-menu" "get-v" "Filter-Width" "get-h" "<" "and" "when" "16" "header-height" "filter-visible?" "not" "filter-locked?" "or" "unless" "Tree-Header" "is?" "cond" "get-position" "pos" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "new-property-menu" #f 112 11 112 28 ("layout-menu" "consolidate" "'consolidate" "distribute" "'distribute" "end-consolidate-group" "'end-consolidate-group" "locate" "set-visible?" "begin" "branch-installed?" "if" "get-creator" "creator" "car" "any" "self" "client:" "Property-Menu" "new" "menu" "let*" "client")}
        {Lisp-Entry "focus-delegate" #f 131 11 131 25 ("editor-focus-delegate" "when" "selected-row" "row" "let")}
        {Lisp-Entry "save-edition" #f 142 21 142 33 ("save-edition" "in-edition?" "Value-Row" "is?" "and" "when" "auto-expanded-row" "row" "let")}
        {Lisp-Entry "get-property-handler" #f 153 18 153 38 ("property-handler")}
        {Lisp-Entry "set-property-handler" #f 157 18 157 38 ("property-handler" "set!" "handler")}
        {Lisp-Entry "notify-property-change" #f 161 18 161 40 ("property:" ":property-change" "Event" "new" "self" "invoke" "property-handler" "when" "property")}
        {Lisp-Entry "client-update" #f 171 18 171 31 ("preserving-update" "close-auto-expanded" "function" "with-update-locked")}
        {Lisp-Entry "find-property-index" #f 178 11 178 30 ("continuation-return" "field-name" "eq?" "symbol?" "if" "get-property" "property" "let" "Value-Row" "is?" "when" "rank" "row" "for-each-visible-row" "return" "function" "continuation-capture" "target")}
        {Lisp-Entry "empty-client?" #f 197 11 197 24 ("null?" "not" "or" "get-client" "client" "let")}
        {Lisp-Entry "preserving-update" #f 202 11 202 28 ("auto-expand?:" "set-single-selection" "when" "find-property-index" "either" "index" "update" "get-client-default-property" "default" "selected-property" "selected" "let" "remove-every-row" "empty-client?" "if")}
        {Lisp-Entry "update" #f 213 11 213 17 ("insert-properties" "remove-every-row" "function" "with-update-locked" "get-client-properties" "properties" "get-designer" "designer" "get-editor" "editor" "car" "any" "get-client" "client" "let*")}
        {Lisp-Entry "update-property" #f 225 18 225 33 ("update-property-row" "get-row" "row" "find-property-index" "rank" "let" "eq?" "when" "car" "any" "get-client" "client" "let*" "property" "clt")}
        {Lisp-Entry "insert-properties" #f 235 11 235 28 ("insert-properties" "Tree-Image" "Tree-Label" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "row" "let" "title" "bind" "collapsed" "'collapsed" "insert-property" "pair?" "if" "property" "function" "for-each" "properties" "father" "designer" "editor" "any" "client")}
        {Lisp-Entry "insert-property" #f 249 11 249 26 ("position:" "row:" "state:" "father:" "add-row" "set-color" "set-title" "car" "set-value" "set-property" "list" "set-children" "17" "set-row-height" "self" "set-parent" "owner-image" "Tree-Image" "owner" "Tree-Label" "label" "Dark-Gray" "Dark-Red" "name:" "Color" "color:" "image:" "class-of" "property-presentation" "title:" "Tree-Node" "node" "string=?" "apply" "1" "length" "<=" "uniform?" "find-changed-property" "not" "or" "if" "changed?" "get-active-branch" "essay" "branch" "get-creator" "creator" "present" "value" "presented" "read-property" "component" "function" "map" "values" "get-filter-image" "image" "new" "either" "row" "get-row-instance" "instance" "get-row-class" "class" "let*" "position" "state" "property" "father" "designer" "editor" "any" "client")}
        {Lisp-Entry "get-client-default-property" #f 275 11 275 38 ("class-of" "category-field" "get-default-property" "name" "Component" "is?" "car" "component" "length" "1" "=" "when" "get-client" "client" "let")}
        {Lisp-Entry "get-client-properties" #f 285 11 285 32 ("get-component-properties" "Component" "is?" "component" "function" "map" "intersection" "apply" "when" "editor" "client")}
        {Lisp-Entry "get-component-properties" #f 293 11 293 35 ("filter" "filter:" "get-filtered-properties" "filter-by-rights" "editor" "component")}
        {Lisp-Entry "owner-image" #f 298 11 298 22 ("default-owner-image" "else" "root-owner-image" "get-reference" "eq?" "branch-owner-image" "Branch" "is?" "cond" "find-owner" "owner" "car" "component" "let*" "Info-Row" "neq?" "length" "1" "=" "and" "when" "property" "class" "client" "designer")}
        {Lisp-Entry "default-owner-image" #f 307 29 307 48 ()}
        {Lisp-Entry "root-owner-image" #f 311 29 311 45 ("Bitmap-Resource")}
        {Lisp-Entry "branch-owner-image" #f 315 29 315 47 ("Bitmap-Resource")}
        {Lisp-Entry "reset-modified-properties" #f 319 21 319 46 ("0" "Cell" "new" "invalidate-cell" "set-color" "get-color" "get-children" "car" "node" "let" "Value-Row" "is?" "when" "rank" "row" "function" "for-each-visible-row")}
        {Lisp-Entry "get-rights" #f 334 11 334 21 ("get-rights" "editor")}
        {Lisp-Entry "filter-by-rights" #f 338 11 338 27 ("filter-properties" "when" "find-component-rights" "component-rights" "get-client" "reference" "let*" "not" "if" "get-rights" "essay" "rights" "let" "properties" "editor" "component")}
        {Lisp-Entry "selected-row" #f 353 11 353 23 ("Value-Row" "is?" "when" "get-selected-row" "row" "let")}
        {Lisp-Entry "selected-property" #f 359 11 359 28 ("get-property" "when" "selected-row" "row" "let")}
        {Lisp-Entry "select-property" #f 365 18 365 33 ("set-single-selection" "generate-event?:" "auto-expand?:" "set-selection" "not" "if" "find-property-index" "rank" "let" "property")}
        {Lisp-Entry "consolidate-property" #f 377 11 377 31 ("set-edited-modified?" "set-property" "branch:" "remove-property" "branch" "for-each-branch" "read-property" "value" "get-creator" "creator" "component" "function" "for-each" "get-designer" "designer" "get-property" "property" "save-edition" "selected-row" "row" "let" "yes" "'yes" "eq?" "when" "confirmation" "'confirmation" "type:" "length" "format-plural" "format" "message-box" "code" "get-client" "client" "let*")}
        {Lisp-Entry "distribute-property" #f 396 11 396 30 ("set-edited-modified?" "branch:" "set-property" "branch" "for-each-branch" "read-property" "value" "get-creator" "creator" "component" "function" "for-each" "get-designer" "designer" "get-property" "property" "save-edition" "selected-row" "row" "let" "yes" "'yes" "eq?" "when" "confirmation" "'confirmation" "type:" "length" "format-plural" "format" "message-box" "code" "get-client" "client" "let*")}
        {Lisp-Entry "header-click" #f 419 11 419 23 ("nextmethod" "end-edition" "close-auto-expanded" "in-edition?" "Value-Row" "is?" "and" "when" "auto-expanded-row" "row" "let" "column")}
        {Lisp-Entry "get-filter" #f 433 18 433 28 ("filter")}
        {Lisp-Entry "set-filter" #f 437 18 437 28 ("update" "node-column" "get-header" "invalidate-column-header" "set!" "filter" "neq?" "when" "flt")}
        {Lisp-Entry "get-filter-locked?" #f 444 18 444 36 ("filter-locked?")}
        {Lisp-Entry "set-filter-locked?" #f 448 18 448 36 ("filter-locked?" "set!" "value")}
        {Lisp-Entry "get-filter-visible?" #f 452 18 452 37 ("filter-visible?")}
        {Lisp-Entry "set-filter-visible?" #f 456 18 456 37 ("filter-visible?" "set!" "value")}
        {Lisp-Entry "toggle-filter" #f 460 18 460 31 ("'all" "categorized" "'categorized" "infos" "'infos" "handlers" "'handlers" "properties" "'properties" "set-filter" "all" "filter" "case")}
        {Lisp-Entry "property-change" #f 474 18 474 33 ("invalidate-cell" "class-of" "get-client" "get-designer" "owner-image" "set-image" "get-cell-data" "data" "2" "Cell" "new" "cell" "let*" "update" "get-row" "row" "when" "find-property-index" "rank" "let" "value" "property" "component")}}
      {Lisp-Entry "Property-Column" #f 490 7 490 22 ("Tree-Node-Column")
        {Lisp-Entry "filter-down?" #f 493 8 493 20 ()}
        {Lisp-Entry "draw-header" #f 496 11 496 22 ("down?" "get-column-title" "localize" "-" "get-filter-image" "1" "+" "draw-image-at" "filter-down?" "Filter-Width" "draw-header-at" "nextmethod" "parent" "get-filter-visible?" "not" "if" "flat?" "spaced?" "sorted" "height" "width" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-image-at" #f 504 11 504 24 ("+" "get-application" "get-icons-cache" "draw-image" "0" "1" "filter-down?" "if" "offset" "let" "image" "v" "h" "context" "surface")}
        {Lisp-Entry "header-down" #f 509 11 509 22 ("self" "get-header" "invalidate-column-header" "down?" "filter-down?" "set!" "unless" "get-filter-locked?" "Filter-Width" "get-h" "<" "in-filter?" "let" "nextmethod" "parent" "get-filter-visible?" "not" "if" "pos")}
        {Lisp-Entry "header-up" #f 522 11 522 20 ("header-click" "self" "get-header" "invalidate-column-header" "toggle-filter" "when" "down?" "set!" "filter-down?" "filter?" "let" "Filter-Width" "get-h" "<" "unless" "get-filter-locked?" "nextmethod" "parent" "get-filter-visible?" "not" "if" "pos")}
        {Lisp-Entry "draw-cell" #f 538 11 538 20 ("0" "draw-title" "draw-image" "draw-level" "draw-background" "height" "width" "cell" "row" "context" "surface")}
        {Lisp-Entry "get-filter-image" #f 545 11 545 27 ("categorized" "handlers" "properties" "infos" "Bitmap-Resource" "all" "parent" "get-filter" "case")}
        {Lisp-Entry "get-column-title" #f 554 11 554 27 ("categorized" "handlers" "properties" "infos" "all" "parent" "get-filter" "case")}}
      {Lisp-Entry "Value-Column" #f 571 7 571 19 ("Tree-Label-Column")
        {Lisp-Entry "complete-mouse-down" #f 574 11 574 30 ("auto-expand/collapse" "when" "nextmethod" "get-row" "essay" "row" "parent" "get-auto-expand/collapse?" "auto?" "let*" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "draw-cell" #f 583 11 583 20 ("self" "draw-cell" "get-value" "value" "let" "Value-Row" "is?" "when" "height" "width" "cell" "row" "context" "surface")}}
      {Lisp-Entry "Filter-Menu" #f 597 7 597 18 ("categorized" "handlers" "properties" "infos" "on-action" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "all" "name:" "Context-Menu")
        {Lisp-Entry "finish" #f 611 11 611 17 ("client" "get-filter" "locate" "set-selected?" "nextmethod" "rest")}
        {Lisp-Entry "on-action" #f 616 11 616 20 ("client" "set-filter" "get-sender" "get-name" "filter" "let" "evt")}}
      {Lisp-Entry "Property-Menu" #f 626 7 626 20 ("on-distribute" "distribute" "end-consolidate-group" "on-consolidate" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "consolidate" "name:" "Context-Menu")
        {Lisp-Entry "on-consolidate" #f 636 11 636 25 ("client" "consolidate-property" "evt")}
        {Lisp-Entry "on-distribute" #f 640 11 640 24 ("client" "distribute-property" "evt")}}}})
"Property-Descriptor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "descriptor" "Property-Descriptor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.descriptor.Property-Descriptor" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Property-Descriptor" #f 45 7 45 26 ("Component")
        {Lisp-Entry "title" #f 48 12 48 17 ("generate")}
        {Lisp-Entry "domain" #f 49 12 49 18 ("generate")}
        {Lisp-Entry "get-class-descriptor" #f 58 16 58 36 ("Descriptors.Property-Descriptor")}}}})
"Property-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Property-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Property-Doc" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Property-Doc" #f 45 7 45 19 ("Slot-Doc")
        {Lisp-Entry "getter" #f 48 12 48 18 ("generate")}
        {Lisp-Entry "setter" #f 49 12 49 18 ("generate")}
        {Lisp-Entry "construct-literal" #f 53 16 53 33 ("doc:" "name:" "self" "new" "doc" "name" "context")}
        {Lisp-Entry "get-class-image" #f 62 16 62 31 ("Bitmap-Resource")}}}})
"Property-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "property" "Property-Editor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.property.Property-Editor" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Property-Editor" #f 45 11 45 26 ()
        {Lisp-Entry "get-manager" #f 48 35 48 46 ()}
        {Lisp-Entry "set-manager" #f 49 35 49 46 ("manager")}
        {Lisp-Entry "validate" #f 50 35 50 43 ()}
        {Lisp-Entry "get-violation" #f 51 35 51 48 ()}
        {Lisp-Entry "set-violation" #f 52 35 52 48 ("violation")}
        {Lisp-Entry "get-value" #f 53 35 53 44 ()}
        {Lisp-Entry "set-value" #f 54 35 54 44 ("value")}
        {Lisp-Entry "present-value" #f 55 35 55 48 ("value")}
        {Lisp-Entry "get-modified?" #f 56 35 56 48 ()}
        {Lisp-Entry "set-modified?" #f 57 35 57 48 ("flag")}
        {Lisp-Entry "set-editable?" #f 58 35 58 48 ("flag")}}}})
"Property-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "entry" "Property-Entry.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.entry.Property-Entry" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Property-Entry" #f 47 7 47 21 ("fill" "layout-type:" "Property-Editor" "Layout-View")
        {Lisp-Entry "manager" #f 50 12 50 19 ("generate")}
        {Lisp-Entry "domain" #f 51 12 51 18 ("generate")}
        {Lisp-Entry "violation" #f 54 8 54 17 ()}
        {Lisp-Entry "get-violation" #f 66 11 66 24 ("violation")}
        {Lisp-Entry "set-violation" #f 70 11 70 24 ("invalidate-entry" "violation" "set!" "value")}
        {Lisp-Entry "invalidate-entry" #f 75 18 75 34 ("1" "get-bounds" "inflate-rect" "invalidate-rect")}
        {Lisp-Entry "tab-view" #f 84 29 84 37 ()}}}})
"Property-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "property" "Property-Manager.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.property.Property-Manager" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Property-Manager" #f 45 11 45 27 ()
        {Lisp-Entry "editor-focus-gain" #f 48 35 48 52 ("editor")}
        {Lisp-Entry "editor-focus-lose" #f 49 35 49 52 ("view" "editor")}
        {Lisp-Entry "editor-left-arrow" #f 50 35 50 52 ("editor")}
        {Lisp-Entry "editor-right-arrow" #f 51 35 51 53 ("editor")}
        {Lisp-Entry "editor-up-arrow" #f 52 35 52 50 ("editor")}
        {Lisp-Entry "editor-down-arrow" #f 53 35 53 52 ("editor")}
        {Lisp-Entry "editor-return" #f 54 35 54 48 ("editor")}}}})
"Property-Moniker"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "moniker" "Property-Moniker.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.moniker.Property-Moniker" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Property-Moniker" #f 47 7 47 23 ("Moniker")
        {Lisp-Entry "designer" #f 56 18 56 26 ()}
        {Lisp-Entry "reference" #f 57 18 57 27 ()}
        {Lisp-Entry "branch" #f 58 18 58 24 ()}
        {Lisp-Entry "class" #f 59 18 59 23 ()}
        {Lisp-Entry "path" #f 60 18 60 22 ()}
        {Lisp-Entry "property" #f 61 18 61 26 ()}
        {Lisp-Entry "image" #f 62 18 62 23 ()}
        {Lisp-Entry "presented" #f 63 18 63 27 ()}
        {Lisp-Entry "location" #f 64 18 64 26 ()}
        {Lisp-Entry "extension" #f 65 18 65 27 ()}
        {Lisp-Entry "print" #f 68 11 68 16 ("property" "path" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "compare-object" #f 74 11 74 25 (":not-equal" "else" ":equal" "get-property" "property" "get-path" "path" "=" "get-branch" "branch" "get-designer" "designer" "eq?" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "compare-pathname" #f 86 11 86 27 (":equal" "compare-object" "eq?" "object")}
        {Lisp-Entry "initialize" #f 95 11 95 21 ("extension~self" "location~self" "presented~self" "image~self" "property~self" "path~self" "class~self" "branch~self" "reference~self" "designer~self" "set!" "nextmethod" "extension" "location" "presented" "image" "property" "path" "class" "branch" "reference" "designer")}
        {Lisp-Entry "get-designer" #f 114 18 114 30 ("designer")}
        {Lisp-Entry "get-reference" #f 118 18 118 31 ("reference")}
        {Lisp-Entry "get-branch" #f 122 18 122 28 ("branch")}
        {Lisp-Entry "get-class" #f 126 18 126 27 ("class")}
        {Lisp-Entry "get-path" #f 130 18 130 26 ("path")}
        {Lisp-Entry "set-path" #f 134 18 134 26 ("path" "set!" "value")}
        {Lisp-Entry "get-image" #f 138 18 138 27 ("image")}
        {Lisp-Entry "get-location" #f 142 18 142 30 ("location")}
        {Lisp-Entry "get-component-name" #f 151 18 151 36 ("branch" "branch:" "path" "designer" "get-name")}
        {Lisp-Entry "get-component-property" #f 155 18 155 40 ("branch" "branch:" "path" "designer" "get-property" "property")}
        {Lisp-Entry "set-component-property" #f 159 18 159 40 ("branch" "branch:" "path" "designer" "set-property" "value" "property")}
        {Lisp-Entry "get-writable?" #f 168 11 168 24 ()}
        {Lisp-Entry "exists?" #f 172 11 172 18 ()}
        {Lisp-Entry "get-base" #f 176 11 176 19 ("presented")}
        {Lisp-Entry "get-file" #f 180 11 180 19 ()}
        {Lisp-Entry "get-name" #f 184 11 184 19 ("presented")}
        {Lisp-Entry "get-extension" #f 188 11 188 24 ("extension")}
        {Lisp-Entry "get-modification-time" #f 192 11 192 32 ()}
        {Lisp-Entry "present" #f 196 11 196 18 ("property" "path" "format")}
        {Lisp-Entry "present-base" #f 200 11 200 23 ("presented")}
        {Lisp-Entry "present-location" #f 204 11 204 27 ("location" "join")}
        {Lisp-Entry "load-lines" #f 208 11 208 21 ("property" "get-component-property" "JzLoadLines" "rest")}
        {Lisp-Entry "save-lines" #f 213 11 213 21 ("join-lines" "property" "set-component-property" "rest" "lines")}}}})
"Property-Rights"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "security" "Property-Rights.jazz"} 1226584782
    {Lisp-Entry "jazz.library.security.Property-Rights" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Property-Rights" #f 44 7 44 22 ("Rights")}}})
"Property-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "property" "Property-View.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.property.Property-View" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Property-View" #f 47 7 47 20 ("fill" "layout-type:" "Layout-View")
        {Lisp-Entry "id" #f 50 12 50 14 ("generate")}
        {Lisp-Entry "editor" #f 51 12 51 18 ("generate")}
        {Lisp-Entry "editable?" #f 52 12 52 21 ("generate")}
        {Lisp-Entry "add-child" #f 64 11 64 20 ("set-editable?" "editable?" "not" "when" "nextmethod" "child")}
        {Lisp-Entry "get-entry" #f 70 26 70 35 ("first-child")}}}})
"Property-Violation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "property" "Property-Violation.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.property.Property-Violation" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Property-Violation" #f 45 7 45 25 ("Object")
        {Lisp-Entry "message" #f 48 8 48 15 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("message~self" "set!" "nextmethod" "message" "message:")}
        {Lisp-Entry "print" #f 56 11 56 16 ("message" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-message" #f 67 18 67 29 ("message")}}}})
"Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "provider" "Provider.jazz"} 1226584774
    {Lisp-Entry "jazz.database.provider.Provider" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Providers" #f 52 12 52 21 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-provider" #f 56 20 56 37 ("Providers" "table-set!" "external-name" "name" "let" "provider")}
      {Lisp-Entry "get-provider" #f 61 20 61 32 ("error" "Providers" "table-ref" "either" "name")}
      {Lisp-Entry "get-providers" #f 66 20 66 33 ("Providers" "gather")}
      {Lisp-Entry "Datatypes" #f 75 12 75 21 ("SQLServer-Datatype" "Oracle-Datatype" "Access-Datatype")}
      {Lisp-Entry "Datatype-Classes" #f 78 12 78 28 ()}
      {Lisp-Entry "get-datatypes" #f 82 20 82 33 ("Datatypes" "load" "map" "set!" "Datatype-Classes" "unless")}
      {Lisp-Entry "Provider" #f 93 7 93 15 ("Object")
        {Lisp-Entry "external-name" #f 96 26 96 39 ()}
        {Lisp-Entry "get-datatype" #f 105 26 105 38 ()}
        {Lisp-Entry "supports-multirequests?" #f 114 26 114 49 ()}
        {Lisp-Entry "format-value" #f 123 26 123 38 ("->string" "else" "format-datetime" "Date" "is?" "format-boolean" "boolean?" "format-string" "string?" "format-variable" "symbol?" "cond" "value")}
        {Lisp-Entry "format-variable" #f 132 29 132 44 ("->string" "variable")}
        {Lisp-Entry "format-string" #f 136 11 136 24 ("format" "error" "find-in" "if" "string")}
        {Lisp-Entry "format-boolean" #f 142 11 142 25 ("if" "value")}
        {Lisp-Entry "format-date" #f 146 26 146 37 ("date-separator:" "present-date-day" "date")}
        {Lisp-Entry "format-datetime" #f 150 26 150 41 ("date-separator:" "present" "date")}
        {Lisp-Entry "present" #f 159 26 159 33 ()}
        {Lisp-Entry "browser-class" #f 168 26 168 39 ()}
        {Lisp-Entry "new-updater" #f 177 26 177 37 ("Inventory-Updater" "new" "connection")}}}})
"Proxy"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "remote" "Proxy.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm.remote.Proxy" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Proxy" #f 40 7 40 12 ("Object")
        {Lisp-Entry "live?" #f 43 35 43 40 ()}}}})
"Pulse"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "utility" "Pulse.jazz"} 1226584782
    {Lisp-Entry "jazz.library.utility.Pulse" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Pulse" #f 45 7 45 12 ("Object")
        {Lisp-Entry "delay" #f 48 12 48 17 ("generate")}
        {Lisp-Entry "period" #f 49 12 49 18 ("generate")}
        {Lisp-Entry "repeat?" #f 50 12 50 19 ("generate")}
        {Lisp-Entry "execute" #f 51 12 51 19 ("generate")}
        {Lisp-Entry "thread" #f 54 8 54 14 ()}
        {Lisp-Entry "mutex" #f 55 8 55 13 ("make-mutex")}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("start-loop" "thread~self" "execute~self" "repeat?~self" "delay~self" "period~self" "set!" "nextmethod" "repeat?" "delay" "bind-keywords" "rest" "execute" "period")}
        {Lisp-Entry "destroy" #f 68 11 68 18 ("nextmethod" "thread-exit" "thread-interrupt!" "mutex-unlock!" "set!" "thread~self" "let" "thread" "when" "mutex" "mutex-lock!")}
        {Lisp-Entry "start-loop" #f 85 11 85 21 ("repeat?" "when" "execute" "execute-event" "sleep" "period" "delay" "either" "timeout" "loop" "let" "function" "new-thread" "thread-start!")}}}})
"Push-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Push-Button.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Push-Button" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Push-Button" #f 48 7 48 18 ("View")
        {Lisp-Entry "default?" #f 51 12 51 20 ("set-default?" "get-default?")}
        {Lisp-Entry "flat?" #f 52 12 52 17 ("set-flat?" "get-flat?")}
        {Lisp-Entry "state" #f 55 8 55 13 ("inactive" "'inactive")}
        {Lisp-Entry "mouse-activate?" #f 58 11 58 26 ()}
        {Lisp-Entry "get-default?" #f 67 18 67 30 ("default?")}
        {Lisp-Entry "set-default?" #f 71 18 71 30 ("invalidate-view" "default?" "set!" "flag")}
        {Lisp-Entry "get-flat?" #f 76 18 76 27 ("flat?")}
        {Lisp-Entry "set-flat?" #f 80 18 80 27 ("flat?" "set!" "value")}
        {Lisp-Entry "get-state" #f 89 18 89 27 ("state")}
        {Lisp-Entry "set-state" #f 93 18 93 27 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "default-size" #f 103 11 103 23 ("22" "100" "Dimension")}
        {Lisp-Entry "preferred-size" #f 107 11 107 25 ("22" "50" "font" "text-extent" "get-width" "+" "Dimension" "new" "default-size" "not" "if" "localize" "title" "let")}
        {Lisp-Entry "mouse-enter" #f 119 11 119 22 ("pushed" "'pushed" "out-pushed" "highlighted" "'highlighted" "set-state" "inactive" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "get-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" #f 126 11 126 22 ("out-pushed" "'out-pushed" "pushed" "inactive" "'inactive" "set-state" "highlighted" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "get-enabled?" "and" "when")}
        {Lisp-Entry "mouse-down" #f 133 11 133 21 ("pushed" "'pushed" "set-state" "get-enabled?" "when" "pos")}
        {Lisp-Entry "drag-up" #f 138 11 138 18 ("inactive" "'inactive" "out-pushed" "highlighted" "'highlighted" "set-state" "pushed" "get-state" "case" "up" "unwind-protect" "get-enabled?" "when" "rest" "pos")}
        {Lisp-Entry "up" #f 147 11 147 13 ("self" "process-action" "pushed" "'pushed" "get-state" "eq?" "when")}
        {Lisp-Entry "draw" #f 157 11 157 15 ("+" "draw-text" "set-text-color" "v" "2" "-" "quotient" "h" "get-text-extent" "extent" "get-height" "height" "get-width" "width" "get-size" "size" "let*" "'pushed" "eq?" "draw-push-button" "rectangle" "'rectangle" "edges:" "raised" "'raised" "outer:" "draw-edge" "flat?" "-1" "inflate-rect" "set!" "Dark" "Black" "name:" "Color" "if" "frame-rect" "default?" "when" "get-enabled?" "enabled?" "get-bounds" "rect" "0" "else" "1" "pushed" "state" "case" "offset" "localize" "either" "title" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "property-presentation" #f 183 16 183 37 ("nextmethod" "else" "flat?" "default?" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 190 11 190 27 ("nextmethod" "else" "Boolean-Row" "new" "flat?" "default?" "field-name" "case" "property")}}}})
"Push-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Push-Combo.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Push-Combo" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Push-Combo" #f 47 7 47 17 ("body" "name:" "22" "31" "Dimension" "size:" "Combo-View")}}})
"Push-Icon"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Push-Icon.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Push-Icon" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Push-Icon" #f 47 7 47 16 (":icons" "portfolio:" "tooltip?:" "22" "Dimension" "size:" "Push-Tool")
        {Lisp-Entry "get-combo" #f 59 18 59 27 ("parent")}
        {Lisp-Entry "get-enabled?" #f 68 11 68 23 ("parent" "get-enabled?")}
        {Lisp-Entry "get-state" #f 72 11 72 20 ("self" "parent" "child-state")}
        {Lisp-Entry "mouse-enter" #f 76 11 76 22 ("self" "parent" "enter-child")}
        {Lisp-Entry "mouse-leave" #f 80 11 80 22 ("self" "parent" "leave-child")}
        {Lisp-Entry "mouse-down" #f 84 11 84 21 ("self" "parent" "child-down" "pos")}
        {Lisp-Entry "drag-up" #f 88 11 88 18 ("self" "parent" "child-up" "rest" "pos")}}}})
"Push-Tool"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Push-Tool.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Push-Tool" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Push-Tool" #f 46 7 46 16 ("Image-Tool")
        {Lisp-Entry "default-size" #f 49 11 49 23 ("22" "Dimension")}
        {Lisp-Entry "up" #f 53 11 53 13 ("self" "process-action" "pushed" "'pushed" "get-state" "eq?" "when")}}}})
"Python-Class-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "python" "text" "Python-Class-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.python.text.Python-Class-Entry" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Python-Class-Entry" #f 46 7 46 25 ("C-Definition-Entry")
        {Lisp-Entry "get-image" #f 54 11 54 20 ("Bitmap-Resource")}}}})
"Python-Def-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "python" "text" "Python-Def-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.python.text.Python-Def-Entry" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Python-Def-Entry" #f 46 7 46 23 ("C-Definition-Entry")
        {Lisp-Entry "get-image" #f 54 11 54 20 ("Bitmap-Resource")}}}})
"Python-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "python" "text" "Python-Explorer.jazz"} 1226584779
    {Lisp-Entry "jazz.language.python.text.Python-Explorer" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Python-Explorer" #f 46 7 46 22 ("C-Explorer")}}})
"Python-File-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "python" "text" "Python-File-Entry.jazz"} 1226584779
    {Lisp-Entry "jazz.language.python.text.Python-File-Entry" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Python-File-Entry" #f 46 7 46 24 ("File-Entry")}}})
"Python-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "python" "text" "Python-Parser.jazz"} 1226584779
    {Lisp-Entry "jazz.language.python.text.Python-Parser" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Python-Parser" #f 46 7 46 20 ("File-Parser")
        {Lisp-Entry "parse" #f 49 11 49 16 ("parse-definitions" "catalog" "Python-File-Entry" "new" "time" "file")}
        {Lisp-Entry "parse-definitions" #f 53 11 53 28 ("get-output" "length" "0" "naturals" "find-def" "fn" "put" "when" "find-class" "class" "n" "line" "function" "for-each" "List-Factory" "new" "fact" "char-encoding" "char-encoding:" "load-lines" "lines" "let" "file")}
        {Lisp-Entry "Class" #f 73 12 73 17 ()}
        {Lisp-Entry "find-class" #f 77 11 77 21 ("subseq" "Python-Class-Entry" "new" "c-constituent?" "skip" ">" "+" "start" "let*" "start:" "Class" "search" "when" "skip-whitespace" "col" "cardinality" "len" "let" "n" "line")}
        {Lisp-Entry "Def" #f 95 12 95 15 ()}
        {Lisp-Entry "find-def" #f 99 11 99 19 ("subseq" "Python-Def-Entry" "new" "c-constituent?" "skip" ">" "+" "start" "let*" "start:" "Def" "search" "when" "skip-whitespace" "col" "cardinality" "len" "let" "n" "line")}}}})
"Python-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "python" "text" "Python-Syntax.jazz"} 1226584779
    {Lisp-Entry "jazz.language.python.text.Python-Syntax" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Python-Syntax" #f 45 7 45 20 ("Code-Syntax")
        {Lisp-Entry "get-constituent-test" #f 53 11 53 31 ("c-constituent?")}}}})
"Python-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "python" "text" "Python-Text-Preferences.jazz"} 1226584779
    {Lisp-Entry "jazz.language.python.text.Python-Text-Preferences" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "Python-Text-Preferences" #f 49 7 49 30 ("completions:" "Dark-Blue" "keyword-color:" "definition-color:" "Dark-Green" "balanced-comment-color:" "Purple" "line-comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Code-Text-Preferences")
        {Lisp-Entry "title-color" #f 52 12 52 23 ("generate")}
        {Lisp-Entry "line-comment-color" #f 53 12 53 30 ("generate")}
        {Lisp-Entry "balanced-comment-color" #f 54 12 54 34 ("generate")}
        {Lisp-Entry "definition-color" #f 55 12 55 28 ("generate")}
        {Lisp-Entry "keyword-color" #f 56 12 56 25 ("generate")}
        {Lisp-Entry "keywords" #f 57 12 57 20 ("generate")}
        {Lisp-Entry "completions" #f 58 12 58 23 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 81 11 81 37 ("keyword-color" "definition-color" "line-comment-color" "title-color" "completions" "keywords")}
        {Lisp-Entry "property-presentation" #f 86 16 86 37 ("nextmethod" "else" "completions" "keywords" "keyword-color" "definition-color" "line-comment-color" "title-color" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 97 11 97 27 ("nextmethod" "else" "Completion-List-Row" "completions" "Color-Row" "new" "keyword-color" "definition-color" "line-comment-color" "title-color" "field-name" "case" "property")}}}})
"Python-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "python" "text" "Python-Text-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.python.text.Python-Text-View" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Python-Text-View" #f 46 7 46 23 ("Code-Text-View")
        {Lisp-Entry "install" #f 49 11 49 18 ("get-keyword-color" "Keyword" "'Keyword" "get-definition-color" "Definition" "'Definition" "get-balanced-comment-color" "Balanced-Comment" "'Balanced-Comment" "get-line-comment-color" "Line-Comment" "'Line-Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 59 16 59 29 ("python-text" "'python-text" "rest")}
        {Lisp-Entry "preferences" #f 63 11 63 22 ("python-text" "documents" "get-preferences")}
        {Lisp-Entry "host-workspaces" #f 72 11 72 26 ("text")}
        {Lisp-Entry "favorite-completions" #f 81 11 81 31 ("preferences" "get-completions")}
        {Lisp-Entry "commented?" #f 85 11 85 21 ("Line-Comment" "'Line-Comment" "Title" "'Title" "inherits?" "or" "and" "get-style-at" "style" "let" "pos")}
        {Lisp-Entry "return-press" #f 97 11 97 23 ("tabulate" "nextmethod" "key")}
        {Lisp-Entry "explorer-class" #f 107 11 107 25 ("Python-Explorer")}
        {Lisp-Entry "get-context" #f 116 11 116 22 ("c")}
        {Lisp-Entry "current-name" #f 120 11 120 23 ("current-expr-range" "name-at")}
        {Lisp-Entry "name-at" #f 124 11 124 18 ("read-string-element" "element" "eqv?" "if" "0" "cardinality" ">" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "current-expr" #f 133 11 133 23 ("current-name")}
        {Lisp-Entry "current-expr-range" #f 137 11 137 29 ("get-end" "expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "expr-range" #f 143 11 143 21 ("get-range" "outer-expr" "end:" "start:" "self" "Python-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "expr-at" #f 149 11 149 18 ("expr-range" "name-at" "pos")}
        {Lisp-Entry "headers" #f 158 12 158 19 ()}
        {Lisp-Entry "get-headers" #f 162 11 162 22 ("headers")}
        {Lisp-Entry "get-first-special?" #f 166 11 166 29 ()}
        {Lisp-Entry "Definitions" #f 175 12 175 23 ()}
        {Lisp-Entry "get-definitions" #f 179 11 179 26 ("Definitions")}
        {Lisp-Entry "Keywords" #f 188 12 188 20 ()}
        {Lisp-Entry "get-keywords" #f 212 29 212 41 ("Keywords")}
        {Lisp-Entry "Balanced-Comment" #f 222 14 222 30 ()}
        {Lisp-Entry "Syntax-Targets" #f 226 14 226 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 229 14 229 29 ()}
        {Lisp-Entry "syntax-targets" #f 233 11 233 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 239 11 239 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" #f 245 11 245 33 ("get-keywords" "keyword" "'keyword" "get-definitions" "definition" "'definition" "str" "function" "map" "balanced-comment" "'balanced-comment" "Balanced-Comment" "line-comment" "'line-comment" "list" "append")}
        {Lisp-Entry "compute-syntax-automata" #f 252 11 252 34 ("c-constituent?" "self" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "colorize-type" #f 256 11 256 24 ("Keyword" "'Keyword" "keyword" "Definition" "'Definition" "colorize-keyword" "definition" "Balanced-Comment" "'Balanced-Comment" "colorize-balanced-comment" "balanced-comment" "Title" "'Title" "Line-Comment" "'Line-Comment" "colorize-line-comment" "line-comment" "case" "recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "colorize-balanced-comment" #f 264 11 264 36 ("set!" "continuation-return" "apply-coloring" "3" "2" "+" "Cell" "new" "balanced-comment" "'balanced-comment" "=" "col" "row" "type" "target" "bind" "car" "info" "not-null?" "while" "return" "function" "continuation-capture" "get-char" "/=" "if" "cdr" "scan" "let" "style" "colorizer" "end" "start" "found")}}}})
"Radio-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Radio-Button.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Radio-Button" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Radio-Button" #f 49 7 49 19 ("Selectable" "Groupable" "View")
        {Lisp-Entry "box-size" #f 52 14 52 22 ("13")}
        {Lisp-Entry "group" #f 56 12 56 17 ("set-group" "get-group")}
        {Lisp-Entry "selected?" #f 57 12 57 21 ("set-selected?" "get-selected?")}
        {Lisp-Entry "tracking?" #f 60 8 60 17 ()}
        {Lisp-Entry "inside?" #f 61 8 61 15 ()}
        {Lisp-Entry "default-size" #f 64 11 64 23 ("16" "100" "Dimension")}
        {Lisp-Entry "get-group" #f 73 11 73 20 ("group")}
        {Lisp-Entry "set-group" #f 77 11 77 20 ("group" "set!" "value")}
        {Lisp-Entry "get-selected?" #f 86 11 86 24 ("selected?")}
        {Lisp-Entry "set-selected?" #f 90 11 90 24 ("not" "set-selected-state" "get-current-selection" "current" "let" "selected?" "neq?" "when" "flag")}
        {Lisp-Entry "unselect" #f 98 11 98 19 ("set-selected-state" "selected?" "when")}
        {Lisp-Entry "get-current-selection" #f 103 11 103 32 ("parent" "get-children" "get-selected?" "Radio-Button" "is?" "and" "child" "function" "find-if")}
        {Lisp-Entry "set-selected-state" #f 110 11 110 29 ("invalidate-view" "selected?" "set!" "flag")}
        {Lisp-Entry "draw" #f 120 11 120 15 ("draw-text" "Black" "name:" "Color" "set-text-color" "inside?" "tracking?" "and" "enabled?" "inactive?:" "selected?" "selected?:" "box-size" "1" "+" "0" "Rect" "new" "draw-radio-button" "2" "-" "quotient" "v" "18" "h" "get-text-extent" "get-height" "13" "empty-string?" "not" "or" "if" "height" "localize" "either" "title" "let*" "lv" "lh" "context" "surface")}
        {Lisp-Entry "mouse-down" #f 135 11 135 21 ("invalidate-view" "acquire-capture" "inside?" "tracking?" "set!" "enabled?" "when" "pos")}
        {Lisp-Entry "drag-move" #f 143 11 143 20 ("invalidate-view" "set!" "inside?" "neq?" "over-view?" "over?" "let" "tracking?" "when" "pos")}
        {Lisp-Entry "drag-up" #f 151 11 151 18 ("self" "process-action" "set-modified?" "selected?" "not" "set-selected?" "inside?" "set!" "release-capture" "tracking?" "when" "rest" "pos")}
        {Lisp-Entry "cursor-update" #f 166 11 166 24 ("nextmethod" ":finger" "set-cursor" "alt-down?" "if" "pos")}
        {Lisp-Entry "mouse-copy" #f 172 11 172 21 ("title" "mouse-insert" "destination" "pos")}}}})
"Radio-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Radio-Item.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Radio-Item" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Radio-Item" #f 45 7 45 17 ("Label-Item")
        {Lisp-Entry "selected?" #f 48 12 48 21 ("set-selected?" "get-selected?")}
        {Lisp-Entry "get-selected?" #f 56 18 56 31 ("selected?")}
        {Lisp-Entry "set-selected?" #f 60 18 60 31 ("invalidate-view" "selected?" "set!" "flag")}
        {Lisp-Entry "preferred-prefix-width" #f 70 11 70 33 ("0" "12" "selected?" "if")}
        {Lisp-Entry "draw-prefix" #f 79 11 79 22 ("Bitmap-Resource" "get-small-icons-cache" "draw-image" "2" "top" "5" "left" "get-application" "appl" "let" "selected?" "when" "context" "surface")}}}})
"Radio-Tool"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Radio-Tool.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Radio-Tool" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Radio-Tool" #f 46 7 46 17 ("Selectable" "Groupable" "Image-Tool")
        {Lisp-Entry "group" #f 49 12 49 17 ("set-group" "get-group")}
        {Lisp-Entry "selected?" #f 50 12 50 21 ("set-selected?" "get-selected?")}
        {Lisp-Entry "default-size" #f 53 11 53 23 ("22" "Dimension")}
        {Lisp-Entry "preferred-size" #f 62 11 62 25 ("21" "24" "localize" "font" "text-width" "+" "Dimension" "new" "default-size" "title" "not" "if")}
        {Lisp-Entry "draw-frame" #f 73 11 73 21 ("nextmethod" "draw-pushed" "out-pushed" "highlighted" "inactive" "get-state" "memq?" "selected?" "and" "if" "surface")}
        {Lisp-Entry "draw-tool" #f 79 11 79 20 ("enabled?" "get-v" "get-h" "+" "draw-text" "Black" "name:" "Color" "set-text-color" "get-size" "justify" "center" "get-text-extent" "extent" "localize" "let*" "get-enabled?" "enabled?:" "image" "draw" "not" "1" "2" "pushed" "'pushed" "get-state" "eq?" "selected?" "or" "0" "title" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-background" #f 90 11 90 26 ("nextmethod" "fill-rect" "Light-Background" "White" "name:" "Color" "title" "color" "get-bounds" "bounds" "selected?" "if" "get-state" "state" "let" "context" "surface")}
        {Lisp-Entry "up" #f 104 11 104 13 ("self" "process-action" "set-selected?" "find-pushed" "let" "selected?" "not" "pushed" "'pushed" "get-state" "eq?" "and" "when")}
        {Lisp-Entry "radio-group" #f 118 11 118 22 ("parent" "get-children" "group" "get-group" "eq?" "Radio-Tool" "is?" "and" "component" "function" "collect-if")}
        {Lisp-Entry "find-pushed" #f 125 11 125 22 ("radio-group" "get-selected?" "view" "function" "find-if")}
        {Lisp-Entry "get-group" #f 136 11 136 20 ("group")}
        {Lisp-Entry "set-group" #f 140 11 140 20 ("group" "set!" "value")}
        {Lisp-Entry "get-selected?" #f 149 11 149 24 ("selected?")}
        {Lisp-Entry "set-selected?" #f 153 11 153 24 ("not" "set-selected-state" "find-pushed" "current" "let" "selected?" "neq?" "when" "flag")}
        {Lisp-Entry "unselect" #f 161 11 161 19 ("set-selected-state" "selected?" "when")}
        {Lisp-Entry "set-selected-state" #f 166 11 166 29 ("invalidate-view" "selected?" "set!" "flag")}}}})
"Range-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Range-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Range-Row" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Range-Row" #f 45 7 45 16 ("Value-Row")
        {Lisp-Entry "present" #f 53 11 53 18 ("get-end" "get-start" "format" "not" "if" "range")}
        {Lisp-Entry "get-edited-value" #f 66 11 66 27 ("Range" "new" "end" "start" "bind" "editor" "get-string-content" "read-delimited-string" "list" "let")}
        {Lisp-Entry "edit" #f 72 11 72 15 ("get-tree" "expand/collapse" "get-end" "Cell-Row" "value" "get-start" "self" "add-row" "edit-in-cell")}
        {Lisp-Entry "close-editor" #f 79 11 79 23 ("remove-every-son" "nextmethod")}
        {Lisp-Entry "in-edition?" #f 84 11 84 22 ("0" "get-sons" "cardinality" ">" "nextmethod" "or")}}}})
"Reader-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Reader-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Reader-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Reader-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-reader" "invoke")}
        {Lisp-Entry "test-reader" #f 61 11 61 22 ("189" "#xbd" "#xBD" "16" "#x10" "=" "3" "2" "1" "equal?" "rpt" "validate")}}}})
"Recordable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "recorder" "Recordable.jazz"} 1226584783
    {Lisp-Entry "jazz.recorder.Recordable" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Recordable" #f 45 11 45 21 ()}}})
"Recorder-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Recorder-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Recorder-Menu" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Recorder-Menu" #f 46 7 46 20 ("play-recording-5" "play-recording-4" "play-recording-3" "play-recording-2" "play-recording-1" "play-recording-0" "play-recording" "set-active-recording" "output-recording" "register-recording" "present-recording" "resume-recording" "stop-recording" "jedi" "Action" "action:" "Bitmap-Resource" "icon:" "start-recording" "name:" "title:" "Menu")}}})
"Recordset"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "connection" "Recordset.jazz"} 1226584774
    {Lisp-Entry "jazz.database.connection.Recordset" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Recordset" #f 46 7 46 16 ("Object")
        {Lisp-Entry "initialize" #f 49 11 49 21 ("destroy-mandatory" "open" "apply" "when" "setup-recordset" "nextmethod" "rest" "command")}
        {Lisp-Entry "setup-recordset" #f 57 19 57 34 ("initargs")}
        {Lisp-Entry "destroy" #f 61 11 61 18 ("nextmethod" "destroy-recordset")}
        {Lisp-Entry "destroy-recordset" #f 66 19 66 36 ()}
        {Lisp-Entry "opened?" #f 75 26 75 33 ()}
        {Lisp-Entry "open" #f 79 19 79 23 ("rest" "command")}
        {Lisp-Entry "get-state" #f 88 26 88 35 ()}
        {Lisp-Entry "new-recordset-metadata" #f 97 26 97 48 ()}
        {Lisp-Entry "get-field-type" #f 101 26 101 40 ("field" "metadata")}
        {Lisp-Entry "get-field-value" #f 105 26 105 41 ("field" "metadata")}
        {Lisp-Entry "safe-field-value" #f 109 26 109 42 ("get-field-value" "field" "metadata")}
        {Lisp-Entry "next-recordset!" #f 118 26 118 41 ()}
        {Lisp-Entry "get-columns" #f 127 26 127 37 ("0" "naturals" "get-column" "n" "function" "map" "get-count" "count" "let" "new-recordset-metadata" "metadata" "with-closed")}
        {Lisp-Entry "get-rows" #f 135 26 135 34 ("missing?" "get-output" "rows" "increase!" "Data-Row" "not" "put" "safe-field-value" "field" "map" "values" "set!" "begin" "=" "neq?" "and" "if" "<=" "eq?" "or" "when" "function" "iterate-records" "has-more?" "0" "count" "List-Factory" "new" "fact" "let" "get-fields" "fields" "new-recordset-metadata" "metadata" "with-closed" "data-class" "data-class:" "max-load" "max-load:" "table")}
        {Lisp-Entry "move-first" #f 166 26 166 36 ()}
        {Lisp-Entry "move-last" #f 170 26 170 35 ()}
        {Lisp-Entry "move-next" #f 174 26 174 35 ()}
        {Lisp-Entry "move-previous" #f 178 26 178 39 ()}
        {Lisp-Entry "at-bof?" #f 182 26 182 33 ()}
        {Lisp-Entry "at-eof?" #f 186 26 186 33 ()}
        {Lisp-Entry "iterate-records" #f 190 26 190 41 ("proc")}
        {Lisp-Entry "for-each-record" #f 194 26 194 41 ("function" "iterate-records" "proc")}
        {Lisp-Entry "create-table" #f 206 18 206 30 ("load-table" "Data-Table" "new" "table" "let" "max-load" "max-load:" "name" "name:")}
        {Lisp-Entry "load-table" #f 212 21 212 31 ("set-missing?" "set-rows" "set-columns" "get-rows" "missing?" "rows" "receive" "get-columns" "columns" "let" "data-class" "data-class:" "max-load" "max-load:" "table")}}}})
"Recordset-Metadata"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "connection" "Recordset-Metadata.jazz"} 1226584774
    {Lisp-Entry "jazz.database.connection.Recordset-Metadata" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Recordset-Metadata" #f 46 7 46 25 ("Object")
        {Lisp-Entry "get-column" #f 54 18 54 28 ("get-field-precision" "width:" "get-field-size" "100" "min" "get-field-type" "Datatype" "datatype:" "get-field-name" "name:" "Data-Column" "new" "get-field" "field" "with-closed" "field-name")}
        {Lisp-Entry "get-fields" #f 70 18 70 28 ("get-field" "collect" "get-count" "below" "0" "from" "n" "for" "loop")}
        {Lisp-Entry "get-count" #f 75 26 75 35 ()}
        {Lisp-Entry "get-field" #f 79 26 79 35 ("field-name")}
        {Lisp-Entry "get-field-value" #f 83 26 83 41 ("field-name")}
        {Lisp-Entry "get-field-name" #f 87 26 87 40 ("field")}
        {Lisp-Entry "get-field-type" #f 91 26 91 40 ("field")}
        {Lisp-Entry "get-field-size" #f 95 26 95 40 ("field")}
        {Lisp-Entry "get-field-precision" #f 99 26 99 45 ("field")}}}})
"Rect-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Rect-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Rect-Row" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Rect-Row" #f 45 7 45 15 ("Value-Row")
        {Lisp-Entry "present" #f 53 11 53 18 ("get-bottom" "get-right" "get-top" "get-left" "format" "not" "if" "rect")}
        {Lisp-Entry "get-edited-value" #f 68 11 68 27 ("Rect" "new" "bottom" "right" "top" "left" "bind" "read-delimited-string" "list" "=" "if" "editor" "get-string-content" "string" "let")}
        {Lisp-Entry "edit" #f 77 11 77 15 ("get-tree" "expand/collapse" "get-bottom" "get-right" "get-top" "get-left" "self" "add-row" "value" "when" "edit-in-cell")}
        {Lisp-Entry "close-editor" #f 87 11 87 23 ("remove-every-son" "nextmethod")}
        {Lisp-Entry "in-edition?" #f 92 11 92 22 ("0" "get-sons" "cardinality" ">" "nextmethod" "or")}}}})
"Reference-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Reference-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Reference-Row" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Reference-Row" #f 45 7 45 20 ("Combo-Row")}}})
"Region"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "platform" "x11" "Region.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.graphic.platform.x11.Region" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Region" #f 44 7 44 13 ("Object")
        {Lisp-Entry "rectangles" #f 47 8 47 18 ("generate")}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("destroy-mandatory" "0" "else" "Rect" "new" "list" "rectangles" "set!" "cond" "nextmethod" "bottom" "bottom:" "right" "right:" "top" "top:" "left" "left:" "rect" "rect:")}
        {Lisp-Entry "destroy" #f 61 11 61 18 ("nextmethod")}
        {Lisp-Entry "offset!" #f 65 18 65 25 ("get-bottom" "get-right" "get-top" "get-left" "+" "Rect" "new" "rect" "function" "map" "rectangles" "set!" "v" "h")}
        {Lisp-Entry "combine!" #f 76 18 76 26 ("get-rectangles" "append" "rectangles" "set!" "mode" "region")}
        {Lisp-Entry "get-box" #f 80 18 80 25 ("get-box" "'get-box" "unimplemented")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "platform" "windows" "Region.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.graphic.platform.windows.Region" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Region" #f 45 7 45 13 ("Object")
        {Lisp-Entry "handle" #f 48 8 48 14 ("generate")}
        {Lisp-Entry "rectangles" #f 49 8 49 18 ("generate")}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("destroy-mandatory" "0" "else" "Rect" "new" "CreateRectRgn" "list" "rectangles" "RECT-free" "CreateRectRgnIndirect" "prog1" "rect->RECT" "with" "handle~self" "set!" "cond" "nextmethod" "bottom" "bottom:" "right" "right:" "top" "top:" "left" "left:" "rect" "rect:" "handle" "handle:")}
        {Lisp-Entry "destroy" #f 70 11 70 18 ("nextmethod" "handle" "DeleteObject")}
        {Lisp-Entry "offset!" #f 75 18 75 25 ("handle" "OffsetRgn" "v" "h")}
        {Lisp-Entry "combine!" #f 79 18 79 26 ("get-rectangles" "append" "rectangles" "set!" "get-combine-mode" "get-handle" "handle" "CombineRgn" "mode" "region")}
        {Lisp-Entry "get-combine-mode" #f 84 11 84 27 ("error" "else" "RGN_DIFF" "diff" "RGN_XOR" "xor" "RGN_OR" "or" "RGN_AND" "and" "case" "mode")}
        {Lisp-Entry "get-box" #f 93 18 93 25 ("RECT-free" "RECT->rect" "prog1" "handle" "GetRgnBox" "RECT-make" "rect" "with")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "platform" "carbon" "Region.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.graphic.platform.carbon.Region" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Region" #f 45 7 45 13 ("Object")
        {Lisp-Entry "handle" #f 48 8 48 14 ("generate")}
        {Lisp-Entry "rectangles" #f 49 8 49 18 ("generate")}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("destroy-mandatory" "0" "NewRgn" "else" "Rect" "new" "list" "rectangles" "get-bottom" "get-right" "get-top" "get-left" "RectRgn" "handle~self" "set!" "cond" "nextmethod" "bottom" "bottom:" "right" "right:" "top" "top:" "left" "left:" "rect" "rect:" "handle" "handle:")}
        {Lisp-Entry "destroy" #f 68 11 68 18 ("nextmethod" "handle" "DisposeRgn")}
        {Lisp-Entry "offset!" #f 73 18 73 25 ("handle" "OffsetRgn" "v" "h")}
        {Lisp-Entry "combine!" #f 77 18 77 26 ("get-rectangles" "append" "rectangles" "set!" "error" "else" "xor" "get-handle" "handle" "UnionRgn" "or" "case" "mode" "region")}
        {Lisp-Entry "get-box" #f 85 18 85 25 ("handle" "GetRegionBounds")}}}})
"Register"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "register" "Register.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm.register.Register" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Register" #f 43 7 43 15 ("Object")
        {Lisp-Entry "new-local-proxy" #f 48 23 48 38 ("self" "Register-Local-Proxy" "new")}
        {Lisp-Entry "objects" #f 52 8 52 15 ("eq?" "test:" "make-table")}
        {Lisp-Entry "find-object" #f 55 18 55 29 ("objects" "table-ref" "name")}
        {Lisp-Entry "require-object" #f 59 18 59 32 ("error" "find-object" "either" "name")}
        {Lisp-Entry "register-object" #f 69 18 69 33 ("objects" "table-set!" "error" "find-object" "if" "error?" "error?:" "object" "name")}
        {Lisp-Entry "unregister-object" #f 78 18 78 35 ("objects" "table-clear" "error" "find-object" "not" "if" "error?" "error?:" "name")}}}})
"Registry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "registry" "Registry.jazz"} 1226584783
    {Lisp-Entry "jazz.library.registry.Registry" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Registry" #f 44 7 44 15 ("Object")
        {Lisp-Entry "open-type-lib" #f 47 23 47 36 ("Type-Lib-Key" "class:" "self" "container:" "Classes-Root" "open-key")}}
      {Lisp-Entry "Type-Lib-Key" #f 56 12 56 24 ("Registry-Key")
        {Lisp-Entry "get-versions" #f 59 18 59 30 ("iterate-subkeys" "gather" "type-key")}
        {Lisp-Entry "get-latest-version" #f 63 18 63 36 ("last" "when" "get-versions" "versions" "let" "type-key")}
        {Lisp-Entry "split-version" #f 69 11 69 24 ("1" "+" "0" "subseq" "values" "find" "pos" "let" "version")}
        {Lisp-Entry "get-information" #f 76 18 76 33 ("split-version" "minor" "major" "receive" "list" "File" "new" "pathname" "filename" "error?:" "win32-key" "language-key" "let*" "iterate-subkeys" "gather" "car" "language" "get-default" "description" "version-key" "when" "get-latest-version" "version" "let" "open-key" "type-key" "with-closed" "type-guid")}}
      {Lisp-Entry "Classes-Root" #f 103 18 103 30 ("HKEY_CLASSES_ROOT" "key:" "predefined?:" "Registry-Key" "new")}
      {Lisp-Entry "Current-User" #f 104 18 104 30 ("HKEY_CURRENT_USER" "key:" "predefined?:" "Registry-Key" "new")}
      {Lisp-Entry "Local-Machine" #f 105 18 105 31 ("HKEY_LOCAL_MACHINE" "key:" "predefined?:" "Registry-Key" "new")}}})
"Registry-Key"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "registry" "Registry-Key.jazz"} 1226584783
    {Lisp-Entry "jazz.library.registry.Registry-Key" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Registry-Key" #f 44 7 44 19 ("Object")
        {Lisp-Entry "key" #f 47 8 47 11 ()}
        {Lisp-Entry "predefined?" #f 48 8 48 19 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "predefined?~self" "key~self" "set!" "nextmethod" "predefined?" "predefined?:" "key" "key:")}
        {Lisp-Entry "destroy" #f 58 11 58 18 ("nextmethod" "error" "ERROR_SUCCESS" "key" "RegCloseKey" "/=" "predefined?" "not" "when")}
        {Lisp-Entry "open-key" #f 65 18 65 26 ("error" "when" "key:" "new" "ERROR_SUCCESS" "=" "if" "KEY_READ" "0" "key" "RegOpenKeyEx" "subkey" "err" "receive" "error?" "error?:" "Registry-Key" "class" "class:" "path")}
        {Lisp-Entry "create-key" #f 73 18 73 28 ("error" "key:" "new" "ERROR_SUCCESS" "=" "if" "key" "RegCreateKey" "subkey" "err" "receive" "Registry-Key" "class" "path")}
        {Lisp-Entry "get-default" #f 80 18 80 29 ("system-error" "adjust-string" "begin" "ERROR_MORE_DATA" "ERROR_SUCCESS" "=" "or" "if" "NULL" "key" "RegQueryValue" "err" "receive" "1" "-" "make-string" "value" "512" "size" "let*")}
        {Lisp-Entry "set-default" #f 91 18 91 29 ("system-error" "ERROR_SUCCESS" "/=" "when" "REG_SZ" "NULL" "key" "RegSetValue" "err" "2" "length" "*" "size" "let" "value")}
        {Lisp-Entry "get-value" #f 98 18 98 27 ("system-error" "adjust-string" "begin" "ERROR_MORE_DATA" "ERROR_SUCCESS" "=" "or" "if" "0" "key" "RegQueryValueEx" "type" "err" "receive" "1" "-" "make-string" "value" "512" "size" "let*" "value-name")}
        {Lisp-Entry "set-value" #f 109 18 109 27 ("system-error" "ERROR_SUCCESS" "/=" "when" "REG_SZ" "0" "key" "RegSetValueEx" "err" "2" "1" "length" "+" "*" "size" "let" "value" "value-name")}
        {Lisp-Entry "iterate-subkeys" #f 116 18 116 33 ("key" "Subkey-Iterator" "new")}}
      {Lisp-Entry "Subkey-Iterator" #f 125 7 125 22 ("Iterator")
        {Lisp-Entry "key" #f 128 8 128 11 ()}
        {Lisp-Entry "index" #f 129 8 129 13 ("0")}
        {Lisp-Entry "initialize" #f 132 11 132 21 ("key" "set!" "nextmethod" "k")}
        {Lisp-Entry "get-next!" #f 137 11 137 20 ("system-error" "else" "eof-object" "ERROR_NO_MORE_ITEMS" "adjust-string" "increase!" "ERROR_SUCCESS" "ecase" "index" "key" "RegEnumKey" "err" "1" "-" "make-string" "name" "128" "size" "let*")}}}})
"Registry-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "registry" "Registry-Viewer.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.registry.Registry-Viewer" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Registry-Viewer" #f 51 7 51 22 ("419" "width:" ":icons" "portfolio:" "on-selection-change" "selection-handler:" "registry" "fill" "content" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "center" "registry-border" "on-view-type-libs" ":form" "Event-Handler" "action-handler:" "selected?:" "22" "70" "title:" "type-libs" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "border" "layout-type:" "639" "436" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "conclude" #f 67 11 67 19 ("view-type-libs" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 77 16 77 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 81 16 81 26 ()}
        {Lisp-Entry "host-position" #f 85 16 85 29 ("14" "28" "Point")}
        {Lisp-Entry "host-size" #f 89 16 89 25 ("635" "416" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 93 11 93 26 ("home")}
        {Lisp-Entry "on-view-type-libs" #f 102 11 102 28 ("view-type-libs" "evt")}
        {Lisp-Entry "view-type-libs" #f 106 11 106 25 ("second" "key:" "get-output" "<" "sort" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "list" "children:" "add-row" "empty-string?" "not" "pathname" "language-id" "minor-version" "major-version" "desc" "bind" "with-update-locked" "cons" "put" "when" "get-information" "info" "let" "guid-name" "function" "for-each" "List-Factory" "new" "informations" "gather" "guid-names" "iterate-subkeys" "all" "registry" "'registry" "locate" "tree" "let*" "user-message" "Registry" "open-type-lib" "type-lib" "with-closed")}
        {Lisp-Entry "on-selection-change" #f 129 11 129 30 ("set-visible?" "bring-to-front" "view-file" "get-guest" "view-registered-typelib" "cardinality" "-" "1" "subseq" "GUID" "new" "guid" "Type-Viewer" "singleton" "frame" "pathname" "language-id" "minor-version" "major-version" "desc" "guid-name" "bind" "get-row" "get-user-data" "info" "let" "when" "get-single-selection" "selection" "get-sender" "sender" "let*" "evt")}}}})
"Regular-Expression"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "regexp" "Regular-Expression.jazz"} 1226584782
    {Lisp-Entry "jazz.library.regexp.Regular-Expression" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Regular-Expression" #f 40 7 40 25 ("Object")
        {Lisp-Entry "original" #f 43 8 43 16 ()}
        {Lisp-Entry "expressions" #f 44 8 44 19 ()}
        {Lisp-Entry "cardinality" #f 45 8 45 19 ()}
        {Lisp-Entry "initialize" #f 48 11 48 21 ("length" "cardinality" "parse-expressions" "expressions" "original" "set!" "nextmethod" "pattern")}
        {Lisp-Entry "parse-expressions" #f 55 11 55 28 ("separator:" "parse-strings" "parse-expression" "map" "pattern")}
        {Lisp-Entry "parse-expression" #f 59 11 59 27 ("1" "+" "0" "subseq" "Regular-Pattern" "new" "null?" "if" "find-star" "pos" "let" "pattern")}
        {Lisp-Entry "find-star" #f 68 11 68 20 ("error" "set!" "null?" "if" "eqv?" "when" "element" "c" "length" "below" "0" "from" "n" "for" "loop" "pos" "let" "pattern")}
        {Lisp-Entry "match" #f 84 18 84 23 ("expressions" "continuation-return" "when" "match-expression" "match" "let" "expression" "for-each" "return" "function" "continuation-capture" "string")}
        {Lisp-Entry "match-expression" #f 95 11 95 27 ("cardinality" "-" "length" "cast" "subseq" "ends-with?" "starts-with?" "and" "get-suffix" "suffix" "get-prefix" "prefix" "let" "else" "get-pattern" "=" "if" "get-exact?" "cond" "string" "expression")}
        {Lisp-Entry "matches?" #f 109 18 109 26 ("match" "not-null?" "string")}
        {Lisp-Entry "replace" #f 118 18 118 25 ("get-suffix" "get-prefix" "append" "get-pattern" "get-exact?" "expressions" "car" "expression" "let" "original" "error" "1" "cardinality" "/=" "if" "string")}}
      {Lisp-Entry "Regular-Pattern" #f 132 7 132 22 ("Object")
        {Lisp-Entry "pattern" #f 135 8 135 15 ()}
        {Lisp-Entry "exact?" #f 136 8 136 14 ()}
        {Lisp-Entry "prefix" #f 137 8 137 14 ()}
        {Lisp-Entry "suffix" #f 138 8 138 14 ()}
        {Lisp-Entry "initialize" #f 141 11 141 21 ("suffix~self" "prefix~self" "exact?~self" "pattern~self" "set!" "nextmethod" "suffix" "prefix" "exact?" "pattern")}}}})
"Remotable-Stub"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "remote" "Remotable-Stub.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm.remote.Remotable-Stub" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Remotable-Stub" #f 40 11 40 25 ("Object")
        {Lisp-Entry "stub-interface" #f 43 35 43 49 ()}}}})
"Remote-Proxy"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "remote" "Remote-Proxy.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm.remote.Remote-Proxy" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Remote-Proxy" #f 43 7 43 19 ("Proxy")
        {Lisp-Entry "ior" #f 46 8 46 11 ("generate")}
        {Lisp-Entry "values" #f 47 8 47 14 ("generate")}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("values~self" "ior~self" "set!" "nextmethod" "values" "ior")}
        {Lisp-Entry "print" #f 56 11 56 16 ("values" "ior" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "set-values" #f 64 18 64 28 ("values" "set!" "lst")}
        {Lisp-Entry "proxy-value" #f 68 18 68 29 ("cadr" "if" "values" "getprop" "prop" "let" "thunk" "keyword")}
        {Lisp-Entry "live?" #f 75 11 75 16 ("self" "remote-proxy-live?")}}}})
"Remoting-Server"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "remote" "Remoting-Server.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm.remote.Remoting-Server" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Remoting-Server" #f 44 7 44 22 ("TCP-Server")
        {Lisp-Entry "server-name" #f 47 11 47 22 ()}
        {Lisp-Entry "connection-name" #f 51 11 51 26 ()}
        {Lisp-Entry "accept-connection" #f 60 11 60 28 ("process-remote" "port")}}}})
"Renderer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Renderer.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Renderer" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Renderer" #f 45 11 45 19 ()
        {Lisp-Entry "render" #f 48 35 48 41 ("sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface" "drawing")}}}})
"Reporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "reporter" "Reporter.jazz"} 1226584782
    {Lisp-Entry "jazz.library.reporter.Reporter" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Reporter" #f 44 11 44 19 ()
        {Lisp-Entry "section-title" #f 47 35 47 48 ("title")}
        {Lisp-Entry "set-message" #f 48 35 48 46 ("msg")}
        {Lisp-Entry "user-message" #f 49 35 49 47 ("rest" "fmt")}
        {Lisp-Entry "set-range" #f 50 35 50 44 ("range")}
        {Lisp-Entry "set-pos" #f 51 35 51 42 ("pos")}
        {Lisp-Entry "delta-pos" #f 52 35 52 44 ("increment")}
        {Lisp-Entry "set-step" #f 53 35 53 43 ("increment")}
        {Lisp-Entry "step-it" #f 54 35 54 42 ()}
        {Lisp-Entry "set-done" #f 55 35 55 43 ()}
        {Lisp-Entry "disable-cancel" #f 56 35 56 49 ()}
        {Lisp-Entry "cancel-requested?" #f 57 35 57 52 ()}
        {Lisp-Entry "test-cancelled" #f 58 35 58 49 ()}}}})
"Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "connection" "Request.jazz"} 1226584774
    {Lisp-Entry "jazz.database.connection.Request" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Request" #f 46 7 46 14 ("Object")
        {Lisp-Entry "connection" #f 49 8 49 18 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("connection" "set!" "nextmethod" "con")}
        {Lisp-Entry "new-recordset" #f 57 19 57 32 ("rest" "request")}
        {Lisp-Entry "load-request" #f 61 18 61 30 ("load-table" "set-name" "when" "request:" "Data-Table" "new" "either" "let" "closed" "'closed" "get-state" "eq?" "unless" "new-recordset" "recordset" "with-closed" "data-class" "data-class:" "max-load" "max-load:" "name" "name:" "table" "table:" "request")}
        {Lisp-Entry "load-multirequest" #f 71 18 71 35 ("get-output" "next-recordset!" "put" "data-class:" "cdr" "set!" "car" "data-class" "load-table" "null?" "request:" "Data-Table" "table" "open" "'open" "get-state" "=" "opened?" "and" "while" "List-Factory" "new" "tables" "let" "new-recordset" "recordset" "with-closed" "load-request" "list" "connection" "supports-multirequests?" "not" "if" "data-classes" "data-classes:" "max-load" "max-load:" "request")}
        {Lisp-Entry "load-rows" #f 89 18 89 27 ("values" "get-rows" "missing?" "rows" "receive" "get-columns" "columns" "let" "new-recordset" "recordset" "with-closed" "max-load" "max-load:" "table" "request")}
        {Lisp-Entry "execute" #f 101 26 101 33 ("command")}}}})
"Resource"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "resource" "Resource.jazz"} 1226584782
    {Lisp-Entry "jazz.library.resource.Resource" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Resource" #f 40 7 40 15 ("Object")
        {Lisp-Entry "name" #f 43 8 43 12 ()}
        {Lisp-Entry "initialize" #f 46 11 46 21 ("name~self" "set!" "nextmethod" "name")}
        {Lisp-Entry "compare-object" #f 51 11 51 25 (":not-equal" "else" ":equal" "get-name" "name" "=" ":incompatible" "Resource" "is-not?" "cond" "target")}
        {Lisp-Entry "print" #f 60 11 60 16 ("name" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" #f 71 18 71 26 ("name")}
        {Lisp-Entry "resource-type" #f 81 31 81 44 ()}}}})
"Resource-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "resource" "Resource-File.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.resource.Resource-File" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Resource-File" #f 45 7 45 20 ("Project-File")
        {Lisp-Entry "resource-class" #f 48 26 48 40 ()}
        {Lisp-Entry "resource-marker" #f 52 26 52 41 ()}}}})
"Resources-Monitor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "view" "Resources-Monitor.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.view.Resources-Monitor" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Resources-Monitor" #f 51 7 51 24 ("resources" "entry" "style:" "edge" "border-type:" "resources-border" "1" "fill" "center" "on-update" "tail" "update" "on-clear" "clear" "on-open" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "open" "name:" "north" "location:" "0" "6" "flow" "33" "100" "2" "Rect" "layout-insets:" "border" "layout-type:" "500" "800" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "host-title" #f 71 16 71 26 ()}
        {Lisp-Entry "host-icon" #f 75 16 75 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-position" #f 79 16 79 29 ("50" "80" "Point")}
        {Lisp-Entry "host-size" #f 83 16 83 25 ("441" "1000" "Dimension")}
        {Lisp-Entry "client-activate" #f 87 11 87 26 ("update")}
        {Lisp-Entry "conclude" #f 96 11 96 19 ("update" "nextmethod" "rest")}
        {Lisp-Entry "get-resource-view" #f 106 11 106 28 ("resources" "'resources" "locate")}
        {Lisp-Entry "Logs-Directory" #f 115 14 115 28 ("Install" "Directory")}
        {Lisp-Entry "on-open" #f 119 11 119 18 ("with-preserved-current-directory" "Logs-Directory" "exists?" "and" "if" "view-log" "load?:" "file:" "Log" "new" "log" "directory:" "extensions:" "choose-file" "file" "dir" "function" "proc" "get-resource-view" "resource-view" "get-shift?" "default?" "let*" "evt")}
        {Lisp-Entry "on-update" #f 134 11 134 20 ("update" "evt")}
        {Lisp-Entry "on-clear" #f 138 11 138 19 ("clear" "get-resource-view" "resource-view" "let" "evt")}
        {Lisp-Entry "update" #f 148 11 148 17 ("update" "get-resource-view" "resource-view" "let")}}}})
"Resources-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "view" "Resources-View.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.view.Resources-View" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Resources-View" #f 49 7 49 21 ("gui-user-objects" "gui-gdi-objects" "handles" "50" "bags" "undestroyed" "collector-roots" "collector-stack" "data-stack" "80" "system-stack" "symbols" "65" "strings" "allocated" "committed" "70" "virtual" "tail" "justification:" "100" "private-bytes" "200" "width:" "title:" "name" "on-context-menu" "context-menu-handler:" "on-double-click" ":form" "Event-Handler" "double-click-handler:" "column-spacing:" "1" "row-spacing:" "cell" "selection-mode:" "filled-column:" "White" "empty-background:" "Dark" "Color" "background:" ":icons" "portfolio:" "resources" "shown?:" "header" "content" "flat?:" "hscroll?:" "vscroll?:" "document" "style:" "scroller" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "log" #f 52 12 52 15 ("generate")}
        {Lisp-Entry "what" #f 55 8 55 12 ("after" "'after")}
        {Lisp-Entry "next-rank" #f 56 8 56 17 ("0")}
        {Lisp-Entry "last-counters" #f 57 8 57 21 ("eq?" "test:" "make-table")}
        {Lisp-Entry "reference" #f 58 8 58 17 ()}
        {Lisp-Entry "reference-entry" #f 59 8 59 23 ()}
        {Lisp-Entry "reference-counters" #f 60 8 60 26 ()}
        {Lisp-Entry "get-tree" #f 93 18 93 26 ("resources" "'resources" "locate")}
        {Lisp-Entry "clear" #f 102 18 102 23 ("update" "clear" "bell" "log" "null?" "if")}
        {Lisp-Entry "on-double-click" #f 109 11 109 26 ("set-reference" "clear-reference" "reference" "eqv?" "bell" "null?" "if" "selected-data" "counters" "rank" "bind" "evt")}
        {Lisp-Entry "on-context-menu" #f 118 11 118 26 ("track-popup-menu" "function" "with-context-click" "layout-menu" "reference" "null?" "when" "clear-reference" "'clear-reference" "set-reference" "'set-reference" "reference-separator" "'reference-separator" "set-visible?" "delta" "case" "what" "child" "set-selected?" "self" "client:" "Resources-Menu" "new" "menu" "get-position" "pos" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "show-delta" #f 136 11 136 21 ("view-content" "delta" "'delta" "what" "set!")}
        {Lisp-Entry "show-before" #f 141 11 141 22 ("view-content" "before" "'before" "what" "set!")}
        {Lisp-Entry "show-after" #f 146 11 146 21 ("view-content" "after" "'after" "what" "set!")}
        {Lisp-Entry "set-reference" #f 151 11 151 24 ("view-content" "reference" "set!" "bell" "null?" "if" "selected-data" "counters" "rank" "bind")}
        {Lisp-Entry "clear-reference" #f 159 11 159 26 ("view-content" "reference" "set!")}
        {Lisp-Entry "selected-data" #f 164 11 164 24 ("get-user-data" "data" "get-row" "row" "get-single-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "update" #f 177 18 177 24 ("view-content" "reload" "get-file" "log" "and" "when" "reload?" "reload?:")}
        {Lisp-Entry "extract-log-content" #f 183 29 183 48 ("get-toplevel-nodes" "log")}
        {Lisp-Entry "Reference-Rendering" #f 192 14 192 33 ("Dark-Blue" "name:" "255" "blue:" "green:" "206" "red:" "Color" "list")}
        {Lisp-Entry "Allocate-Rendering" #f 195 14 195 32 ("Dark-Red" "Light-Red" "name:" "Color" "list")}
        {Lisp-Entry "Release-Rendering" #f 198 14 198 31 ("Dark-Green" "Light-Green" "name:" "Color" "list")}
        {Lisp-Entry "Stable-Rendering" #f 201 14 201 30 ("list")}
        {Lisp-Entry "view-log" #f 205 18 205 26 ("view-content" "clear-reference" "log~self" "set!" "log")}
        {Lisp-Entry "view-content" #f 211 11 211 23 ("insert-node" "node" "for-each" "entry-counters" "reference-counters" "element" "reference" "essay" "reference-entry" "extract-log-content" "entries" "eq?" "test:" "make-table" "last-counters" "0" "next-rank" "set!" "log" "when" "remove-every-row" "function" "with-update-locked" "get-tree" "tree" "let")}
        {Lisp-Entry "insert-node" #f 227 11 227 22 ("insert-entry" "else" "insert-resources" "resources" "get-tag" "case" "node" "father" "tree")}
        {Lisp-Entry "insert-entry" #f 233 11 233 23 ("get-children" "insert-node" "child" "for-each" "user-data:" "Resources-Properties" "cdr" "set!" "when" "car" "-" "value" "table-set!" "not" "or" "Reference-Rendering" "last-counters" "table-ref" "previous" "let" "frame-color:" "background:" "->string" "Stable-Rendering" "else" "Release-Rendering" "<" "Allocate-Rendering" ">" "cond" "frame-color" "background" "bind" "delta" "what" "case" "Tree-Label" "property" "counter" "function" "map" "image:" "title:" "Tree-Node" "new" "children:" "0" "position:" "father:" "add-row" "row" "cons" "user-data" "entry-counters" "counters" "increase!" "next-rank" "prog1" "null?" "rank" "reference-counters" "if" "reference-scan" "reference-entry" "eq?" "reference" "and" "reference-entry?" "Bitmap-Resource" "image" "'name" "get-property" "either" "name" "let*" "entry" "father" "tree")}
        {Lisp-Entry "insert-resources" #f 271 11 271 27 ("user-data:" "->string" "Tree-Label" "counter" "function" "map" "image:" "title:" "Tree-Node" "new" "cons" "children:" "father:" "add-row" "resources-counters" "counters" "Bitmap-Resource" "image" "'name" "get-property" "either" "name" "let" "delta" "what" "case" "resources" "father" "tree")}
        {Lisp-Entry "entry-counters" #f 285 11 285 25 ("resources-counters" "-" "map" "and" "when" "delta" "what" "case" "'after" "after" "'before" "find-name" "before" "let" "entry")}
        {Lisp-Entry "Resources-Properties" #f 300 14 300 34 ("gui-user-objects" "gui-gdi-objects" "handles" "bags" "undestroyed" "collector-roots" "collector-stack" "data-stack" "system-stack" "symbols" "strings" "allocated" "committed" "virtual" "private-bytes")}
        {Lisp-Entry "resources-counters" #f 318 11 318 29 ("Resources-Properties" "get-property" "property" "function" "map" "resources")}}
      {Lisp-Entry "Resources-Menu" #f 329 7 329 21 ("on-clear-reference" "clear-reference" "on-set-reference" "set-reference" "reference-separator" "on-show-after" "after" "on-show-before" "before" "on-show-delta" ":form" "Event-Handler" "action-handler:" "title:" "delta" "name:" "Context-Menu")
        {Lisp-Entry "on-show-delta" #f 343 11 343 24 ("client" "show-delta" "evt")}
        {Lisp-Entry "on-show-before" #f 347 11 347 25 ("client" "show-before" "evt")}
        {Lisp-Entry "on-show-after" #f 351 11 351 24 ("client" "show-after" "evt")}
        {Lisp-Entry "on-set-reference" #f 355 11 355 27 ("client" "set-reference" "evt")}
        {Lisp-Entry "on-clear-reference" #f 359 11 359 29 ("client" "clear-reference" "evt")}}}})
"Restore-Form"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "component" "Restore-Form.jazz"} 1226584780
    {Lisp-Entry "jazz.library.component.Restore-Form" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Restore-Form" #f 44 7 44 19 ("Form")
        {Lisp-Entry "component" #f 47 8 47 17 ()}
        {Lisp-Entry "construct-literal" #f 51 16 51 33 ("error" "rest" "context")}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("component~self" "set!" "nextmethod" "apply" "others" "component" "bind-keywords" "initargs")}
        {Lisp-Entry "get-component" #f 66 18 66 31 ("component")}
        {Lisp-Entry "foldable?" #f 76 11 76 20 ()}
        {Lisp-Entry "fold-object" #f 81 11 81 22 ("error" "compiler")}}}})
"Rights"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "security" "Rights.jazz"} 1226584782
    {Lisp-Entry "jazz.library.security.Rights" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Rights" #f 44 7 44 13 ("Component")
        {Lisp-Entry "access" #f 47 12 47 18 ("generate" "read/write" "'read/write")}
        {Lisp-Entry "can-access?" #f 55 18 55 29 ("read/write" "'read/write" "access" "eq?")}
        {Lisp-Entry "can-read?" #f 59 18 59 27 ("read/write" "read" "access" "memq?")}
        {Lisp-Entry "can-write?" #f 63 18 63 28 ("read/write" "write" "access" "memq?")}}}})
"Row-Formatted-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Row-Formatted-Text-View.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Row-Formatted-Text-View" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "Row-Formatted-Text-View" #f 48 7 48 30 ("Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Formatted-Text-View")
        {Lisp-Entry "get-value-row" #f 60 11 60 24 ("4" "child")}
        {Lisp-Entry "get-context-menu" #f 69 11 69 27 ()}
        {Lisp-Entry "focus-lose" #f 78 11 78 21 ("get-value-row" "get-father" "invalidate-drawing" "nextmethod" "view")}
        {Lisp-Entry "focus-master" #f 83 11 83 23 ("get-value-row" "get-tree")}}}})
"Row-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Row-Text-View.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Row-Text-View" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Row-Text-View" #f 48 7 48 20 ("Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Plain-Text-View")
        {Lisp-Entry "get-value-row" #f 60 11 60 24 ("4" "child")}
        {Lisp-Entry "document-menu" #f 69 11 69 24 ()}
        {Lisp-Entry "focus-lose" #f 78 11 78 21 ("get-value-row" "get-father" "invalidate-drawing" "nextmethod" "view")}
        {Lisp-Entry "focus-master" #f 83 11 83 23 ("get-value-row" "get-tree")}}}})
"Ruler"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Ruler.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Ruler" #f 37 9 37 27 ("jazz")
      {Lisp-Entry "Ruler" #f 48 7 48 12 ("fill" "layout-type:" "content" "name:" "shown?:" "Header-View")
        {Lisp-Entry "get-header-height" #f 61 11 61 28 ("0" "22" "shown?" "if")}
        {Lisp-Entry "Tabbed-Pen" #f 70 14 70 24 ("Dark-Red" "name:" "Color" "color:" "Pen" "new")}
        {Lisp-Entry "Untabbed-Pen" #f 73 14 73 26 ("blue:" "green:" "90" "red:" "Color" "color:" "Pen" "new")}
        {Lisp-Entry "draw" #f 77 11 77 15 ("draw-ruler" "get-top" "<" "when" "get-header-height" "height" "get-width" "width" "get-logical-clipper" "clipper" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-ruler" #f 85 11 85 21 ("draw-measurements" "draw-border" "height" "width" "surface")}
        {Lisp-Entry "draw-border" #f 90 11 90 22 ("Medium" "name:" "Color" "fill-rect" "rectangle" "'rectangle" "edges:" "raised" "'raised" "inner:" "draw-edge" "-1" "inflate-rect" "inner" "0" "Rect" "new" "outer" "let*" "height" "width" "surface")}
        {Lisp-Entry "draw-measurements" #f 97 11 97 28 ("naturals" "line-to" "move-to" "Untabbed-Pen" "Tabbed-Pen" "5" "if" "offset" "0" "modulo" "=" "major?" "memq?" "tab?" ">=" "unless" "+" "pixel" "*" "rank" "n" "function" "for-each" "Black" "name:" "Pen" "set-pen" "get-user-tabs" "tabs" "client" "get-left-padding" "left" "1" "-" "limit" "quotient" "number" "4" "major" "8" "unit" "let*" "height" "width" "surface")}
        {Lisp-Entry "cursor-update" #f 123 11 123 24 (":arrow" "set-cursor" "pos")}
        {Lisp-Entry "mouse-down" #f 132 11 132 21 ("pos")}
        {Lisp-Entry "drag-move" #f 136 11 136 20 ("pos")}
        {Lisp-Entry "drag-up" #f 140 11 140 18 ("rest" "pos")}}}})
"Run"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Run.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Run" #f 37 9 37 25 ("jazz")
      {Lisp-Entry "Run" #f 45 7 45 10 ("Object")
        {Lisp-Entry "string" #f 48 18 48 24 ("generate")}
        {Lisp-Entry "style" #f 49 18 49 23 ("generate")}
        {Lisp-Entry "height" #f 50 18 50 24 ("generate")}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("get-height" "height~self" "style~self" "string~self" "set!" "nextmethod" "style" "string")}
        {Lisp-Entry "print" #f 60 11 60 16 ("style" "string" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-length" #f 73 18 73 28 ("string" "cardinality" "cast")}
        {Lisp-Entry "compute-width" #f 82 18 82 31 ("self" "style" "run-width")}
        {Lisp-Entry "scan" #f 91 21 91 25 ("self" "style" "scan" "proc" "tabs" "end" "start" "h")}
        {Lisp-Entry "wrap" #f 100 21 100 25 ("self" "style" "wrap" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "height-update" #f 104 21 104 34 ("style" "height-update" "height")}
        {Lisp-Entry "draw-run" #f 113 21 113 29 ("string" "style" "draw-style" "enabled?" "left" "tabs" "line-height" "v" "h" "context" "surface")}}}})
"Runtime-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Runtime-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Runtime-Event" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Runtime-Event" #f 44 7 44 20 ("Event")}}})
"Runtime-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "listener" "Runtime-Listener.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.listener.Runtime-Listener" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Runtime-Listener" #f 45 11 45 27 ("Listener")
        {Lisp-Entry "on-thread-added" #f 48 35 48 50 ("evt")}
        {Lisp-Entry "on-thread-removed" #f 49 35 49 52 ("evt")}
        {Lisp-Entry "on-gc-marking" #f 50 35 50 48 ("evt")}
        {Lisp-Entry "on-gc-sweeping" #f 51 35 51 49 ("evt")}
        {Lisp-Entry "on-gc-completed" #f 52 35 52 50 ("evt")}
        {Lisp-Entry "on-zone-expanded" #f 53 35 53 51 ("evt")}
        {Lisp-Entry "on-zone-shrinked" #f 54 35 54 51 ("evt")}}}})
"SQL-Connections-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Connections-Editor.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Connections-Editor" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "SQL-Connections-Editor" #f 46 7 46 29 ("Descendants-Editor")
        {Lisp-Entry "form-model" #f 49 11 49 21 ("nextmethod" "else" "SQL-Connections-Tree" "tree" "get-name" "case" "form")}}}})
"SQL-Connections-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Connections-Manager.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Connections-Manager" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "SQL-Connections-Manager" #f 55 7 55 30 ("291" "width:" "title:" "descendant" "highlight-edited?:" "show-header?:" "tree" "flat?:" "scroller" "center" "descendants" "on-close-all-connections" "close-all" "on-open" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "open" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Exit-Listener" "Editor-View")
        {Lisp-Entry "external-name" #f 69 16 69 29 ("sql-connections" "'sql-connections" "rest")}
        {Lisp-Entry "host-icon" #f 78 16 78 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 82 16 82 26 ()}
        {Lisp-Entry "get-tools-view" #f 91 11 91 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 95 11 95 24 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" #f 105 18 105 26 ("tree" "descendants" "locate")}
        {Lisp-Entry "SQL-Connections-Controller" #f 115 9 115 35 ("Editor-View-Controller")
          {Lisp-Entry "document-status" #f 118 13 118 28 ()}}
        {Lisp-Entry "new-controller" #f 123 11 123 25 ("self" "SQL-Connections-Controller" "new")}
        {Lisp-Entry "browse-inventory" #f 132 11 132 27 ("set-connection" "workspace:" "Inventory-Browser" "select-palette" "browser" "data-source:" "get-name" "get-connection" "connection" "selected-data-source" "data-source" "let*" "focus?" "focus?:")}
        {Lisp-Entry "selected-data-source" #f 139 11 139 31 ("get-user-data" "data-source" "get-row" "row" "get-single-selection" "selection" "get-tree" "tree" "let*")}
        {Lisp-Entry "install" #f 152 11 152 18 ("continuation-return" "Active-Data-Source" "set!" "get-name" "=" "source" "for-each-source" "break" "function" "continuation-capture" "when" "client" "get-default-source" "default" "let" "read-connections" "set-client" "get-application" "add-exit-listener" "self" "'descendants" "locate" "set-editor" "header" "descendants" "locate-component" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "for-each-source" #f 170 11 170 26 ("Data-Source" "is?" "when" "level" "component" "function" "client" "for-each-descendant" "proc")}
        {Lisp-Entry "resize-center" #f 182 11 182 24 ("descendants" "'descendants" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-open" #f 186 18 186 25 ("open-selection" "evt")}
        {Lisp-Entry "on-close-all-connections" #f 190 18 190 42 ("set-connection" "workspace:" "Inventory-Browser" "select-palette" "browser" "let" "close-connections" "evt")}
        {Lisp-Entry "prepare-exit" #f 196 11 196 23 ("close-connections" "save" "get-modified?" "when")}
        {Lisp-Entry "open-selection" #f 207 18 207 32 ("focus?:" "browse-inventory" "set-active-data-source" "Data-Source" "is?" "when" "bell" "null?" "if" "selected-component" "component" "get-tree" "tree" "let*")}
        {Lisp-Entry "new-connections-menu" #f 222 18 222 38 ("browse-separator" "'browse-separator" "browse-inventory" "'browse-inventory" "locate" "set-visible?" "Group" "is?" "when" "get-user-data" "data" "get-row" "row" "if" "function" "with-update-locked" "get-single-selection" "selection" "client:" "Connections-Menu" "new" "menu" "get-tree" "tree" "let*")}}
      {Lisp-Entry "Connections-Menu" #f 244 7 244 23 ("browse-separator" "on-browse-inventory" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "default?:" "title:" "add-item" "before:" "browse-inventory" "name:" "Component-Menu")
        {Lisp-Entry "on-browse-inventory" #f 253 11 253 30 ("open-selection" "evt")}}}})
"SQL-Connections-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Connections-Tree.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Connections-Tree" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "SQL-Connections-Tree" #f 54 7 54 27 ("show-branches?:" "editable?:" "highlight-edited?:" "reorderable?:" "draggable?:" ":icons" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "form-model" #f 61 11 61 21 ("nextmethod" "else" "Connection-Column" "descendant" "get-name" "case" "form")}
        {Lisp-Entry "mouse-down" #f 67 11 67 21 ("SQL-Connections-Manager" "set-active-data-source" "bell" "null?" "if" "selected-component" "component" "let" "control-down?" "when" "nextmethod" "pos")}
        {Lisp-Entry "context-menu" #f 76 11 76 23 ("new-connections-menu" "track-popup-menu" "function" "with-context-click" "SQL-Connections-Manager" "is?" "when" "get-guest" "guest" "get-host" "host" "let*" "pos")}
        {Lisp-Entry "update-selection" #f 85 11 85 27 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" #f 89 11 89 20 ("expanded" "'expanded" "level" "update?" "component")}
        {Lisp-Entry "double-click" #f 93 11 93 23 ("get-host" "get-guest" "open-selection" "nextmethod" "pos")}
        {Lisp-Entry "key-press" #f 98 11 98 20 ("nextmethod" "else" "get-host" "get-guest" "open-selection" "case" "key")}
        {Lisp-Entry "addable-root-classes" #f 104 11 104 31 ("Access-Data-Source" "SQLServer-Data-Source" "Group" "list")}}
      {Lisp-Entry "Connection-Column" #f 117 7 117 24 ("Tree-Node-Column")
        {Lisp-Entry "draw-cell" #f 120 11 120 20 ("Dark-Red" "name:" "Color" "text-rect" "frame-rect" "get-user-data" "eq?" "when" "get-active-data-source" "active" "let" "nextmethod" "height" "width" "cell" "row" "context" "surface")}}}})
"SQL-Console-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Console-Manager.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Console-Manager" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "SQL-Console-Manager" #f 47 7 47 26 ("Console-Manager")
        {Lisp-Entry "form-model" #f 50 11 50 21 ("nextmethod" "else" "SQL-Console-Text-View" "text" "get-name" "case" "form")}
        {Lisp-Entry "external-name" #f 56 16 56 29 ("sql-console-manager" "'sql-console-manager" "rest")}
        {Lisp-Entry "host-title" #f 65 16 65 26 ()}}}})
"SQL-Console-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Console-Text-View.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Console-Text-View" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "SQL-Console-Text-View" #f 54 7 54 28 ("sql" "context:" "Console-Text-View")
        {Lisp-Entry "current-request" #f 57 8 57 23 ()}
        {Lisp-Entry "current-table" #f 58 8 58 21 ()}
        {Lisp-Entry "current-tables" #f 59 8 59 22 ()}
        {Lisp-Entry "preferences" #f 66 11 66 22 ("sql" "tools" "get-preferences")}
        {Lisp-Entry "get-context" #f 70 11 70 22 ("sql")}
        {Lisp-Entry "get-current-request" #f 79 18 79 37 ("current-request")}
        {Lisp-Entry "display-banner" #f 88 11 88 25 ("display-prompt" "Banner-Color" "colorize" "format" "insert-string" "get-start" "start" "let")}
        {Lisp-Entry "Header-Font" #f 101 14 101 25 ("Code" "name:" "Font")}
        {Lisp-Entry "Header-Font-Plain" #f 104 14 104 31 ("Code-Bold" "name:" "Font")}
        {Lisp-Entry "Header-Color" #f 107 14 107 26 ("Dark-Blue" "name:" "Color")}
        {Lisp-Entry "Header-Style" #f 110 14 110 26 ("Header-Color" "color:" "Header-Font" "font:" "Text-Style" "new")}
        {Lisp-Entry "Header-Style-Plain" #f 113 14 113 32 ("Header-Color" "color:" "Header-Font-Plain" "font:" "Text-Style" "new")}
        {Lisp-Entry "Overflow-Style" #f 116 14 116 28 ("Dark-Red" "Color" "color:" "Code" "name:" "Font" "font:" "Text-Style")}
        {Lisp-Entry "evaluate" #f 120 18 120 26 ("display-evaluation" "eval-command" "tables" "let" "console?" "command")}
        {Lisp-Entry "evaluate-statements" #f 125 18 125 37 ("fresh-prompt" "format-plural" "format" "display-result" "evaluation-break" "clear-table" "get-count" "increase!" "when" "load-request" "table" "statement" "for-each" "with-transaction" "affected" "get-connection" "connection" "function" ":wait" "with-cursor" "else" "car" "evaluate" "1" "bell" "0" "case" "length" "let" "console?" "statements")}
        {Lisp-Entry "eval-command" #f 151 11 151 23 ("load-sql" "process-sql" "shift-down?" "not" "and" "if" "current-request" "set!" "get-connection" "connection" "let" "function" ":wait" "with-cursor" "console?" "command")}
        {Lisp-Entry "get-connection" #f 161 11 161 25 ("error" "SQL-Connections-Manager" "get-active-connection" "either")}
        {Lisp-Entry "process-sql" #f 166 11 166 22 ("load-sql" "list" "if" "process-sql" "table" "get-profile" "profile" "get-application" "appl" "let*" "command" "connection")}
        {Lisp-Entry "load-sql" #f 175 11 175 19 ("max-load:" "load-multirequest" "parse-sql-command" "cmd" "expand-sql" "sql" "get-max-load" "max-load" "preferences" "pref" "let*" "command" "connection")}
        {Lisp-Entry "expand-sql" #f 183 11 183 21 ("expand-sql" "get-profile" "profile" "get-application" "appl" "let*" "command")}
        {Lisp-Entry "get-max-display" #f 189 11 189 26 ("get-max-display" "preferences" "pref" "let")}
        {Lisp-Entry "display-evaluation" #f 194 11 194 29 ("fresh-prompt" "display-affected" "display-tables" "-" "not-displayed" "min" "displayed" "get-missing?" "missing?" "get-count" "count" "car" "first-table" "get-max-display" "max-display" "let*" "else" "format-plural" "format" "integer?" "display-result" "clear-table" "null?" "cond" "evaluation-break" "when" "console?" "tables")}
        {Lisp-Entry "display-affected" #f 216 11 216 27 ("0" "=" "not" "if" "format-plural" "format" "display-result" "console?" "not-displayed" "missing?" "count")}
        {Lisp-Entry "display-result" #f 229 11 229 25 ("Eval-Color" "colorize" "insert-line" "get-start" "start" "let" "clear-user-message" "user-message" "not" "if" "console?" "string")}
        {Lisp-Entry "present-value" #f 238 11 238 24 ("->string" "null?" "if" "value")}
        {Lisp-Entry "clear-table" #f 244 18 244 29 ("clear-tables" "remove-columns" "clear-all" "get-sql-output-tree" "tree" "get-sql-output-text" "text" "let")}
        {Lisp-Entry "output-tables" #f 252 18 252 31 ("0" "get-max-display" "display-tables" "current-request" "set!" "name" "tables")}
        {Lisp-Entry "clear-output" #f 258 18 258 30 ("clear-tables" "get-sql-output-tree" "remove-columns" "get-sql-output-text" "clear-all")}
        {Lisp-Entry "previous-table" #f 264 18 264 32 ("0" "get-max-display" "display-current-table" "current-table" "decrease!")}
        {Lisp-Entry "next-table" #f 269 18 269 28 ("0" "get-max-display" "display-current-table" "current-table" "increase!")}
        {Lisp-Entry "clear-tables" #f 274 11 274 23 ("recordsets-update" "get-sql-tree-output" "output" "let" "current-tables" "0" "current-table" "set!")}
        {Lisp-Entry "display-tables" #f 281 11 281 25 ("display-current-table" "current-tables" "0" "current-table" "set!" "not-displayed" "max-display" "tables")}
        {Lisp-Entry "display-current-table" #f 287 11 287 32 ("recordsets-update" "get-sql-tree-output" "output" "let" "current-table" "current-tables" "element" "display-table" "not-displayed" "max-display")}
        {Lisp-Entry "display-table" #f 293 11 293 24 ("display-tree" "display-text" "?r" "?c" "?t" "set!" "tree-widths" "tree-max-char" "get-font" "tree-font" "get-sql-output-tree" "tree" "Header-Font" "compute-widths" "text-widths" "Code" "name:" "Font" "get-metrics" "get-max-char-width" "text-max-char" "length" "affected" "get-rows" "rows" "get-columns" "columns" "let*" "not-displayed" "max-display" "table")}
        {Lisp-Entry "compute-widths" #f 311 11 311 25 ("24" "get-prefered-width" "*" "get-name" "text-width" "max" "+" "250" "min" "column" "function" "map" "max-char" "font" "columns")}
        {Lisp-Entry "display-text" #f 317 11 317 23 ("Point" "scroll-to" "Overflow-Style" "format-plural" "format" "when" "join-data" "determine-max-list" "max-list" "data" "headers" "else" "subseq" ">" "get-values" "present-value" "row" "for-each" "insert-line" "string" "get-name" "column" "join" "insert-styled" "256" "32" "make-tabs-from" "append!" "set-tabs" "increase!" "width" "function" "map" "stops" "let" "cond" "clear-all" "0" "stop" "Header-Style-Plain" "Header-Style" "if" "intern-style" "style" "get-sql-output-text" "output" "get-tabulate-text?" "tabulate?" "preferences" "pref" "let*" "widths" "not-displayed" "max-display" "affected" "rows" "columns")}
        {Lisp-Entry "determine-max-list" #f 353 11 353 29 ("0" "naturals" "set!" ">" "when" "count" "let*" "row" "for-each" "element" "length" "max" "let" "n" "function" "map" "data" "headers")}
        {Lisp-Entry "Spacing" #f 366 14 366 21 ("3")}
        {Lisp-Entry "join-data" #f 370 11 370 20 ("get-output-string" "set!" "length" "-" "unless" "format" "cdr" "null?" "last?" "Spacing" "+" "max" "car" "data" "while" "open-output-string" "printer" "let" "max-list" "row")}
        {Lisp-Entry "display-tree" #f 384 11 384 23 ("0" "subseq" ">" "Tree-Label" "value" "map" "present-value" "Tree-Node" "new" "cons" "children:" "add-row" "cdr" "rest" "first" "get-values" "values" "row" "set-display-images?" "when" "Tree-Label-Column" "width:" "get-name" "title:" "toplevel-controls?:" "Tree-Node-Column" "class:" "add-column" "if" "eq?" "node?" "let*" "width" "column" "function" "for-each" "car" "first-column" "remove-columns" "get-sql-output-tree" "output" "let" "widths" "not-displayed" "max-display" "affected" "rows" "columns")}}}})
"SQL-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Explorer.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Explorer" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "SQL-Explorer" #f 47 7 47 19 ("C-Explorer")}}})
"SQL-Output-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Output-Text-View.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Output-Text-View" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "SQL-Output-Text-View" #f 48 7 48 27 ("12" "left-padding:" "Code" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Text-View")}}})
"SQL-Output-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Output-Tree.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Output-Tree" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "SQL-Output-Tree" #f 49 7 49 22 ("White" "name:" "Color" "background-filler:" "Tree-View")
        {Lisp-Entry "double-click" #f 56 11 56 23 ("self" "sql-output-action" "view->tree" "cell" "get-application" "get-profile" "profile" "let" "nextmethod" "pos")}
        {Lisp-Entry "context-menu" #f 63 11 63 23 ("track-popup-menu" "default-sql-menu" "self" "sql-output-menu" "either" "menu" "when" "view->tree" "cell" "get-application" "get-profile" "profile" "let" "function" "with-context-click" "pos")}
        {Lisp-Entry "default-sql-menu" #f 73 11 73 27 ("layout-menu" "on-copy-data" "'on-copy-data" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "parent:" "Label-Item" "Context-Menu" "new" "menu" "let" "cell")}
        {Lisp-Entry "on-copy-data" #f 80 11 80 23 ("map" "join" "else" "car" "1" "0" "selection" "length" "case" "set-clipboard-text" "get-application" "add-clipboard" "string" "copy" "get-cell-data" "get-title" "cell" "function" "cell-title" "let" "evt")}
        {Lisp-Entry "cell-tooltips?" #f 100 11 100 25 ()}
        {Lisp-Entry "get-cell-tooltip" #f 104 11 104 27 ("self" "sql-output-tooltip" "0" "get-row" ">" "essay" "get-cell-data" "data" "get-col" "get-column" "column" "get-profile" "profile" "get-application" "appl" "let*" "cell")}
        {Lisp-Entry "get-tooltip-position" #f 113 11 113 31 ("rect-size" "16" "6" "font" "text-width" "Dimension" "new" "center" "rect-position" "+" "v" "h" "rect" "text")}}}})
"SQL-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "preference" "SQL-Preferences.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.preference.SQL-Preferences" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "SQL-Preferences" #f 48 7 48 22 ("Bitmap-Resource" "icon:" "title:" "Preferences")
        {Lisp-Entry "max-load" #f 51 12 51 20 ("generate" "250")}
        {Lisp-Entry "max-display" #f 52 12 52 23 ("generate" "100")}
        {Lisp-Entry "tabulate-text?" #f 53 12 53 26 ("generate")}
        {Lisp-Entry "can-rename-component?" #f 65 11 65 32 ()}
        {Lisp-Entry "can-delete-component?" #f 69 11 69 32 ()}
        {Lisp-Entry "can-move-component?" #f 73 11 73 30 ()}
        {Lisp-Entry "can-copy-component?" #f 77 11 77 30 ()}
        {Lisp-Entry "get-categorized-properties" #f 81 11 81 37 ("tabulate-text?" "max-display" "max-load")}
        {Lisp-Entry "property-presentation" #f 85 16 85 37 ("nextmethod" "else" "tabulate-text?" "max-display" "max-load" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 93 11 93 27 ("nextmethod" "else" "Boolean-Row" "tabulate-text?" "Integer-Row" "new" "max-display" "max-load" "field-name" "case" "property")}}}})
"SQL-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Syntax.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Syntax" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "SQL-Syntax" #f 45 7 45 17 ("Code-Syntax")
        {Lisp-Entry "get-constituent-test" #f 53 11 53 31 ("sql-constituent?")}
        {Lisp-Entry "auto-complete-characters" #f 62 11 62 35 ("SQL-Text-View" "auto-complete-characters")}
        {Lisp-Entry "auto-complete-char?" #f 66 11 66 30 ("SQL-Text-View" "auto-complete-char?" "last" "key")}}}})
"SQL-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Text-Actions.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Text-Actions" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "SQL-Text-Actions" #f 47 7 47 23 ("Return" ":control" "Shortcut" "shortcut:" "on-evaluate" ":focus" "Event-Handler" "action-handler:" "evaluate" "name:" "Actions")}}})
"SQL-Text-Output"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Text-Output.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Text-Output" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "SQL-Text-Output" #f 50 7 50 22 ("text" "content" "flat?:" "hscroll?:" "vscroll?:" "center" "scroller" "on-clear" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "clear" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "external-name" #f 62 16 62 29 ("sql-text-output" "'sql-text-output" "rest")}
        {Lisp-Entry "host-icon" #f 71 16 71 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 75 16 75 26 ()}
        {Lisp-Entry "get-tools-view" #f 84 11 84 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 88 11 88 24 ("acquire-focus" "get-text" "text" "let")}
        {Lisp-Entry "get-text" #f 98 18 98 26 ("text" "'text" "locate")}
        {Lisp-Entry "delete-selection" #f 107 11 107 27 ("clear-all" "get-text" "text" "let")}
        {Lisp-Entry "on-clear" #f 117 11 117 19 ("clear-table" "get-sql-console-text" "console" "let" "evt")}}}})
"SQL-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "preference" "SQL-Text-Preferences.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.preference.SQL-Text-Preferences" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "SQL-Text-Preferences" #f 49 7 49 27 ("completions:" "Dark-Blue" "keyword-color:" "definition-color:" "Purple" "line-comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Code-Text-Preferences")
        {Lisp-Entry "title-color" #f 52 12 52 23 ("generate")}
        {Lisp-Entry "line-comment-color" #f 53 12 53 30 ("generate")}
        {Lisp-Entry "definition-color" #f 54 12 54 28 ("generate")}
        {Lisp-Entry "keyword-color" #f 55 12 55 25 ("generate")}
        {Lisp-Entry "keywords" #f 56 12 56 20 ("generate")}
        {Lisp-Entry "completions" #f 57 12 57 23 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 93 11 93 37 ("keyword-color" "definition-color" "line-comment-color" "title-color" "completions" "keywords")}
        {Lisp-Entry "property-presentation" #f 98 16 98 37 ("nextmethod" "else" "completions" "keywords" "keyword-color" "definition-color" "line-comment-color" "title-color" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 109 11 109 27 ("nextmethod" "else" "Completion-List-Row" "completions" "Color-Row" "new" "keyword-color" "definition-color" "line-comment-color" "title-color" "field-name" "case" "property")}}}})
"SQL-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Text-View.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Text-View" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "SQL-Text-View" #f 48 7 48 20 ("Code-Text-View")}
      {Lisp-Entry "SQL-Text-View" #f 54 7 54 20 ("Code-Text-View")
        {Lisp-Entry "install" #f 57 11 57 18 ("get-keyword-color" "Keyword" "'Keyword" "get-definition-color" "Definition" "'Definition" "get-line-comment-color" "Line-Comment" "'Line-Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 66 16 66 29 ("sql-text" "'sql-text" "rest")}
        {Lisp-Entry "preferences" #f 70 11 70 22 ("sql-text" "documents" "get-preferences")}
        {Lisp-Entry "host-workspaces" #f 79 11 79 26 ("sql")}
        {Lisp-Entry "focus-actions" #f 88 11 88 24 ("nextmethod" "sql-text" "'sql-text" "find-actions" "cons")}
        {Lisp-Entry "favorite-completions" #f 98 11 98 31 ("sql-text" "documents" "get-preferences" "get-completions")}
        {Lisp-Entry "commented?" #f 102 11 102 21 ("Line-Comment" "'Line-Comment" "Title" "'Title" "inherits?" "or" "and" "get-style-at" "style" "let" "pos")}
        {Lisp-Entry "return-press" #f 114 11 114 23 ("tabulate" "nextmethod" "key")}
        {Lisp-Entry "explorer-class" #f 124 11 124 25 ("SQL-Explorer")}
        {Lisp-Entry "get-context" #f 133 11 133 22 ("sql")}
        {Lisp-Entry "current-name" #f 137 11 137 23 ("current-expr-range" "name-at")}
        {Lisp-Entry "name-at" #f 141 11 141 18 ("read-string-element" "element" "eqv?" "if" "0" "length" ">" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "current-expr" #f 150 11 150 23 ("current-name")}
        {Lisp-Entry "current-expr-range" #f 154 11 154 29 ("get-end" "expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "expr-range" #f 160 11 160 21 ("get-range" "outer-expr" "end:" "start:" "self" "SQL-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "expr-at" #f 166 11 166 18 ("expr-range" "name-at" "pos")}
        {Lisp-Entry "headers" #f 175 12 175 19 ("list")}
        {Lisp-Entry "get-headers" #f 180 11 180 22 ("headers")}
        {Lisp-Entry "get-first-special?" #f 184 11 184 29 ()}
        {Lisp-Entry "Definitions" #f 193 12 193 23 ()}
        {Lisp-Entry "get-definitions" #f 197 11 197 26 ("Definitions")}
        {Lisp-Entry "Keywords" #f 206 12 206 20 ()}
        {Lisp-Entry "get-keywords" #f 312 29 312 41 ("Keywords")}
        {Lisp-Entry "Syntax-Targets" #f 321 14 321 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 324 14 324 29 ()}
        {Lisp-Entry "syntax-targets" #f 328 11 328 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 334 11 334 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" #f 340 11 340 33 ("get-keywords" "keyword" "'keyword" "get-definitions" "definition" "'definition" "str" "function" "map" "line-comment" "'line-comment" "list" "append")}
        {Lisp-Entry "compute-syntax-automata" #f 346 11 346 34 ("sql-constituent?" "self" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "colorize-type" #f 350 11 350 24 ("Keyword" "'Keyword" "keyword" "Definition" "'Definition" "colorize-keyword" "definition" "Title" "'Title" "Line-Comment" "'Line-Comment" "colorize-line-comment" "line-comment" "case" "recolorize?" "colorizer" "end" "start" "type" "found")}
        {Lisp-Entry "on-evaluate" #f 362 11 362 22 ("evaluate-selection" "evt")}
        {Lisp-Entry "evaluate-selection" #f 366 29 366 47 ("evaluate-statements" "get-sql-console-text" "console" "split" "whitespace?" "not" "statement" "function" "collect-if" "statements" "uncommented-string" "string" "statement-range" "get-selection" "has-selection?" "if" "range" "let*")}
        {Lisp-Entry "statement-range" #f 374 11 374 26 ("text-ending" "text-beginning" "1" "next" "if" "Range$Cell$" "new" "end:" "'end:" "start:" "'start:" "debug" "end" "reverse?:" "position:" "search-string" "start" "statement-pos" "pos" "let*")}
        {Lisp-Entry "statement-pos" #f 386 11 386 24 ("get-char" "=" "and" "if" "1" "previous" "get-start" "start" "let*")}
        {Lisp-Entry "uncommented-string" #f 394 11 394 29 ("uncommented-line" "map" "join-lines" "range-strings" "lines" "let" "range")}
        {Lisp-Entry "uncommented-line" #f 399 11 399 27 ("0" "subseq" "null?" "if" "search-string" "pos" "let" "line")}}}})
"SQL-Tree-Output"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "sql" "SQL-Tree-Output.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.sql.SQL-Tree-Output" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "SQL-Tree-Output" #f 50 7 50 22 ("column-spacing:" "row-spacing:" "multiple-selection?:" "cell" "selection-mode:" "filled-column:" "Dark" "Color" "background:" "tree" "header" "fill" "content" "flat?:" "hscroll?:" "vscroll?:" "scroller" "on-settings" "displayed" "on-clear" "clear" "4" "on-forward-menu" "on-forward-history" "forward" "on-backward-menu" "pick" "on-backward-history" "body" "backward" "on-next-recordset" "next" "on-previous-recordset" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "enabled?:" "previous" "2" "justification:" "9" "point-size:" "font-name:" "Font" "font:" "center" "current" "1" "0" "Rect" "layout-insets:" "tail" "location:" "22" "200" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "History-Provider" "Layout-View")
        {Lisp-Entry "history-manager" #f 53 8 53 23 ("self" "History-Manager" "new")}
        {Lisp-Entry "external-name" #f 83 16 83 29 ("sql-tree-output" "'sql-tree-output" "rest")}
        {Lisp-Entry "host-icon" #f 92 16 92 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 96 16 96 26 ()}
        {Lisp-Entry "get-tools-view" #f 105 11 105 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 109 11 109 24 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" #f 119 18 119 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "delete-selection" #f 128 11 128 27 ("remove-every-row" "get-tree" "tree" "let")}
        {Lisp-Entry "on-previous-recordset" #f 138 11 138 32 ("previous-table" "get-sql-console-text" "console" "let" "evt")}
        {Lisp-Entry "on-next-recordset" #f 143 11 143 28 ("next-table" "get-sql-console-text" "console" "let" "evt")}
        {Lisp-Entry "recordsets-update" #f 148 18 148 35 ("set-tooltip-text" "set-image-name" "/=" "tooltip-text" "else" "not" "and" "Bitmap-Resource" "null?" "cond" "image-name" "displayed" "'displayed" "displayed-view" "let" "-" "<" "next" "'next" ">" "previous" "'previous" "set-enabled?" "1" "+" "format" "0" "=" "if" "'current" "locate" "set-title" "get-missing?" "missing?" "get-count" "get-name" "name" "element" "essay" "table" "length" "count" "let*" "not-displayed" "tables" "current")}
        {Lisp-Entry "on-clear" #f 171 11 171 19 ("clear-table" "get-sql-console-text" "console" "let" "evt")}
        {Lisp-Entry "on-settings" #f 176 11 176 22 ("sql" "'sql" "host-workspace:" "Preferences-Manager" "new-frame" "evt")}
        {Lisp-Entry "on-add-history" #f 185 18 185 32 ("history-manager" "add-current" "evt")}
        {Lisp-Entry "on-backward-history" #f 189 18 189 37 ("history-manager" "go-backward-history" "evt")}
        {Lisp-Entry "on-forward-history" #f 193 18 193 36 ("history-manager" "go-forward-history" "evt")}
        {Lisp-Entry "on-backward-menu" #f 197 11 197 27 ("backward" "'backward" "history-manager" "History-Menu" "track" "get-combo" "initiator" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-forward-menu" #f 203 11 203 26 ("forward" "'forward" "history-manager" "History-Menu" "track" "get-combo" "initiator" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "add-history" #f 209 18 209 29 ("history-manager" "add-history" "item")}
        {Lisp-Entry "current-history-item" #f 213 11 213 31 ("History-Request-Item" "new" "when" "get-current-request" "request" "get-sql-console-text" "console" "let*")}}}})
"SQL-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "workspace" "SQL-Workspace.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.workspace.SQL-Workspace" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "SQL-Workspace" #f 47 7 47 20 ("SQL-Text-Output" "SQL-Tree-Output" "-41" "Inventory-Browser" "Favorites-Manager" "Workbench-Manager" "SQL-Connections-Manager" "Chapters-Browser" "-43" "42" "Console-Manager" "Web-Servers-Manager" "Output-Log" "Search-Results" "Properties-Manager" "SQL-Console-Manager" "model-name:" "selection" "second" "-27" "vert" "5" "Rect" "insets:" "36" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "SQL-Text-View" "frame-model:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 82 11 82 23 ("sql" "'sql")}}}})
"SQLDMO"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLDMO.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLDMO" #f 37 9 37 59 ("jazz")}})
"SQLServer-Constraint-Name-Global-Unicity-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Constraint-Name-Global-Unicity-Constraint.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Constraint-Name-Global-Unicity-Constraint" #f 37 9 37 104 ("jazz")
      {Lisp-Entry "SQLServer-Constraint-Name-Global-Unicity-Constraint" #f 45 7 45 58 ("Integrity-Constraint")
        {Lisp-Entry "register-constraints" #f 53 16 53 36 ("Design-Constraint" "self" "new" "register-constraint" "manager")}
        {Lisp-Entry "validate" #f 63 11 63 19 ("message:" "Integrity-Violation" "new" "add-violation" "when" "manager" "context" "client" "architecture" "constraint")}}}})
"SQLServer-Data-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "SQLServer-Data-Source.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.SQLServer-Data-Source" #f 37 9 37 64 ("jazz")
      {Lisp-Entry "SQLServer-Data-Source" #f 48 7 48 28 ("Data-Source")
        {Lisp-Entry "server" #f 51 12 51 18 ("generate")}
        {Lisp-Entry "database" #f 52 12 52 20 ("generate")}
        {Lisp-Entry "dsn" #f 53 12 53 15 ("generate")}
        {Lisp-Entry "external-name" #f 56 16 56 29 ("sqlserver" "'sqlserver" "rest")}
        {Lisp-Entry "new-inventory" #f 66 11 66 24 ("database" "password" "username" "server" "SQLServer-Inventory" "new" "rest" "connection")}
        {Lisp-Entry "new-connection" #f 75 11 75 25 ("self" "ADO-Connection" "new")}
        {Lisp-Entry "get-connection-string" #f 79 11 79 32 ("password" "username" "either" "database" "server" "format" "dsn" "if")}
        {Lisp-Entry "get-connection-properties" #f 89 11 89 36 ("password" "password:" "username" "username:" "database" "database:" "server" "server:" "list")}
        {Lisp-Entry "present" #f 101 11 101 18 ("database" "server" "format" "dsn" "if")}
        {Lisp-Entry "present-detailed" #f 107 11 107 27 ("database" "server" "format" ":bulleted" "list")}
        {Lisp-Entry "get-class-presentation" #f 120 16 120 38 ()}
        {Lisp-Entry "property-presentation" #f 125 16 125 37 ("nextmethod" "else" "dsn" "database" "server" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 134 11 134 27 ("nextmethod" "else" "String-Row" "dsn" "condensed?:" "SQLServer-Database-Row" "database" "limit-to-list?:" "nullable?:" "SQLServer-Server-Row" "new" "server" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 143 11 143 37 ("database" "password" "username" "server" "dsn" "class-info")}}}})
"SQLServer-Database-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Database-Browser.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Database-Browser" #f 37 9 37 79 ("jazz")
      {Lisp-Entry "SQLServer-Database-Browser" #f 47 7 47 33 ("Combo-Box")}
      {Lisp-Entry "SQLServer-Database-Browser" #f 53 7 53 33 ("Combo-Box")
        {Lisp-Entry "data-source" #f 56 12 56 23 ("set-data-source" "get-data-source")}
        {Lisp-Entry "database-names" #f 59 8 59 22 ()}
        {Lisp-Entry "get-data-source" #f 67 18 67 33 ("data-source")}
        {Lisp-Entry "set-data-source" #f 71 18 71 33 ("update-database-names" "data-source" "set!" "value")}
        {Lisp-Entry "Unable-To-Connect" #f 81 12 81 29 ("#x80040000")}
        {Lisp-Entry "Login-Failed" #f 84 12 84 24 ("#x80044818")}
        {Lisp-Entry "update-database-names" #f 88 11 88 32 ("set-entry" "null?" "when" "20" "choices" "length" ">=" "set-condensed?" "database-names" "list" "map" "set-choices" "setup-database-names")}
        {Lisp-Entry "setup-database-names" #f 96 11 96 31 ("DisConnect" "Login-Failed" "format" "Unable-To-Connect" "Item" "get-Name" "collect" "get-Count" "to" "from" "n" "for" "loop" "get-Databases" "databases" "get-password" "get-username" "Connect" "cotry" "1" "put-LoginTimeout" "message-box" "begin" "SQLDMO.SQLServer" "com-create" "server" "with-closed" "get-server" "servername" "let" "database-names" "set!" "data-source" "null?" "if" "function" ":wait" "with-cursor")}}}})
"SQLServer-Database-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Database-Row.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Database-Row" #f 37 9 37 75 ("jazz")
      {Lisp-Entry "SQLServer-Database-Row" #f 48 7 48 29 ("Combo-Row")}
      {Lisp-Entry "SQLServer-Database-Row" #f 54 7 54 29 ("Combo-Row")
        {Lisp-Entry "database-names" #f 57 8 57 22 ()}
        {Lisp-Entry "patch-recursing?" #f 58 8 58 24 ()}
        {Lisp-Entry "Unable-To-Connect" #f 61 12 61 29 ("#x80040000")}
        {Lisp-Entry "Login-Failed" #f 64 12 64 24 ("#x80044818")}
        {Lisp-Entry "setup-database-names" #f 68 11 68 31 ("DisConnect" "Login-Failed" "format" "Unable-To-Connect" "Item" "get-Name" "collect" "get-Count" "to" "from" "n" "for" "loop" "get-Databases" "databases" "get-password" "get-username" "Connect" "cotry" "1" "put-LoginTimeout" "message-box" "database-names" "set!" "begin" "null?" "if" "error?:" "SQLDMO.SQLServer" "com-create" "server" "with-closed" "get-server" "servername" "get-client" "car" "source" "let*" "function" ":wait" "with-cursor")}
        {Lisp-Entry "update-database-names" #f 93 11 93 32 ("19" "length" ">" "editor" "get-choices" "choices" "let" "database-names" "list" "map" "set-choices" "set-condensed?" "setup-database-names")}
        {Lisp-Entry "edit-in-cell" #f 101 11 101 23 ("update-database-names" "unwind-protect" "set!" "patch-recursing?" "unless" "nextmethod")}}}})
"SQLServer-Datatype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Datatype.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Datatype" #f 37 9 37 71 ("jazz")
      {Lisp-Entry "SQLServer-Datatype" #f 46 7 46 25 ("Datatype")
        {Lisp-Entry "call-construct-literal" #f 50 23 50 45 ("construct-literal" "apply" "elements" "context")}
        {Lisp-Entry "get-systypes" #f 54 16 54 28 ("read-only" "2" "4" "16" "18" "9" "1" "0" "8" "Systype")}}}})
"SQLServer-Default-Value-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Default-Value-Constraint.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Default-Value-Constraint" #f 37 9 37 87 ("jazz")
      {Lisp-Entry "SQLServer-Default-Value-Constraint" #f 45 7 45 41 ("Integrity-Constraint")
        {Lisp-Entry "register-constraints" #f 53 16 53 36 ("Design-Column" "self" "new" "register-constraint" "manager")}
        {Lisp-Entry "validate" #f 63 11 63 19 ("split" "search" "text" "function" "some?" "apostrophe-alone?" "apostrophes?" "stop-descent" "'stop-descent" "'default-value" "property:" "message:" "Integrity-Violation" "new" "add-violation" "begin" "not" "if" "-" "1" "0" "subseq" "=" "2" ">=" "parentheses?" "length" "len" "not-null?" "SQLServer-Design-Schema" "is?" "and" "get-default-value" "default-value" "get-table" "get-schema" "schema" "Design-Architecture" "find-ascendant" "let*" "get-visible?" "when" "manager" "context" "client" "architecture" "column")}}}})
"SQLServer-Index-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Index-Constraint.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Index-Constraint" #f 37 9 37 79 ("jazz")
      {Lisp-Entry "SQLServer-Index-Constraint" #f 45 7 45 33 ("Integrity-Constraint")
        {Lisp-Entry "register-constraints" #f 53 16 53 36 ("Design-Index" "self" "new" "register-constraint" "manager")}
        {Lisp-Entry "validate" #f 63 11 63 19 ("message:" "Integrity-Violation" "new" "add-violation" "when" "manager" "context" "client" "architecture" "index")}}}})
"SQLServer-Inventory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Inventory" #f 37 9 37 72 ("jazz")
      {Lisp-Entry "SQLServer-Inventory" #f 45 7 45 26 ("Inventory")
        {Lisp-Entry "server" #f 53 8 53 14 ()}
        {Lisp-Entry "database" #f 54 8 54 16 ()}
        {Lisp-Entry "system-types" #f 55 8 55 20 ()}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("destroy-mandatory" "Item" "database" "get-Databases" "databases" "with-closed" "destroy-inventory" "cleanup:" ":sqlserver-version" "register:" "get-version" "sqlserver" "'sqlserver" "validate-version" "Connect" "error" "null?" "when" "error?:" "SQLDMO.SQLServer" "com-create" "server" "set!" "nextmethod" "databasename" "password" "username" "servername" "connection")}
        {Lisp-Entry "destroy" #f 71 11 71 18 ("nextmethod" "destroy-inventory")}
        {Lisp-Entry "destroy-inventory" #f 76 11 76 28 ("DisConnect" "server" "com-interface-refcount" "***" "'***" "debug" "database" "set!" "com-release" "system-types" "when")}
        {Lisp-Entry "get-version" #f 98 11 98 22 ("Version" "new" "0" "release" "get-VersionMinor" "minor" "server" "get-VersionMajor" "major" "let")}
        {Lisp-Entry "load-system-types" #f 110 11 110 28 ("database" "get-SystemDatatypes")}
        {Lisp-Entry "get-system-types" #f 114 18 114 34 ("load-system-types" "set!" "system-types" "unless")}
        {Lisp-Entry "get-system-type" #f 120 18 120 33 ("get-system-types" "Item" "name")}
        {Lisp-Entry "get-database" #f 130 18 130 30 ("database")}
        {Lisp-Entry "get-tables" #f 139 11 139 21 ("get-output" "self" "SQLServer-Inventory-Table" "put" "com-release" "get-SystemObject" "if" "Item" "table" "get-Count" "to" "1" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "database" "get-Tables" "tables" "with-closed")}
        {Lisp-Entry "get-table" #f 150 11 150 20 ("Item" "self" "SQLServer-Inventory-Table" "new" "database" "get-Tables" "tables" "with-closed" "name")}
        {Lisp-Entry "create-table" #f 155 11 155 23 ("self" "SQLServer-Inventory-Table" "new" "put-Name" "SQLDMO.Table" "com-create" "new-table" "let" "name")}
        {Lisp-Entry "append-table" #f 161 11 161 23 ("get-handle" "Add" "database" "get-Tables" "tables" "with-closed" "table")}
        {Lisp-Entry "remove-table" #f 166 11 166 23 ("Remove" "database" "get-Tables" "tables" "with-closed" "name")}
        {Lisp-Entry "columns-ordinal-position-consecutive?" #f 171 11 171 48 ()}
        {Lisp-Entry "get-views" #f 180 11 180 20 ("get-output" "com-release" "self" "SQLServer-Inventory-View" "put" "get-SystemObject" "not" "if" "Item" "view" "get-Count" "to" "1" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "database" "get-Views" "views" "with-closed")}
        {Lisp-Entry "get-view" #f 191 11 191 19 ("self" "SQLServer-Inventory-View" "new" "when" "Object-Not-Existant" "cotry" "if" "view" "Item" "function" "action" "let*" "database" "get-Views" "views" "with-closed" "error?" "error?:" "name")}
        {Lisp-Entry "create-view" #f 204 11 204 22 ("self" "SQLServer-Inventory-View" "new" "put-Name" "SQLDMO.View" "com-create" "new-view" "let" "name")}
        {Lisp-Entry "append-view" #f 210 11 210 22 ("get-handle" "Add" "database" "get-Views" "views" "with-closed" "view")}
        {Lisp-Entry "remove-view" #f 215 11 215 22 ("Remove" "database" "get-Views" "views" "with-closed" "name")}
        {Lisp-Entry "get-relations" #f 225 11 225 24 ("get-output" "close" "put-sequence" "if" "get-table-relations" "relations" "table" "function" "for-each" "get-tables" "tables" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "create-relation-complete" #f 237 11 237 35 ("self" "SQLServer-Inventory-Relation" "new" "get-Keys" "foreign-keys" "Item" "database" "get-Tables" "tables" "get-ReferencedColumns" "put-ReferencedTable" "Add" "field" "function" "for-each" "get-KeyColumns" "columns" "with-closed" "SQLDMO.SQLDMOKey_Foreign" "put-Type" "put-Name" "SQLDMO.Key" "com-create" "new-key" "let" "foreign-fields" "foreign-table" "primary-fields" "primary-table" "relation-name")}
        {Lisp-Entry "remove-relation" #f 257 11 257 26 ("Remove" "get-Keys" "keys" "Item" "table" "database" "get-Tables" "tables" "with-closed" "table-name" "relation-name")}
        {Lisp-Entry "create-procedure-by-sql" #f 269 11 269 34 ("connection" "execute" "length" "-" "0" "subseq" "set!" "ends-with?" "when" "tie" "marker" "let" "script-create-procedure")}
        {Lisp-Entry "get-procedures" #f 277 11 277 25 ("get-output" "com-release" "self" "SQLServer-Inventory-Procedure" "put" "get-SystemObject" "not" "if" "Item" "procedure" "get-Count" "to" "1" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "database" "get-StoredProcedures" "procedures" "with-closed")}
        {Lisp-Entry "Object-Not-Existant" #f 288 12 288 31 ("#x80045510")}
        {Lisp-Entry "get-procedure" #f 292 11 292 24 ("self" "SQLServer-Inventory-Procedure" "new" "when" "Object-Not-Existant" "cotry" "if" "procedure" "Item" "function" "action" "let*" "database" "get-StoredProcedures" "procedures" "with-closed" "error?" "error?:" "name")}
        {Lisp-Entry "create-procedure" #f 305 11 305 27 ("self" "SQLServer-Inventory-Procedure" "new" "put-Name" "SQLDMO.StoredProcedure" "com-create" "new-procedure" "let" "name")}
        {Lisp-Entry "append-procedure" #f 311 11 311 27 ("get-handle" "Add" "database" "get-StoredProcedures" "procedures" "with-closed" "procedure")}
        {Lisp-Entry "remove-procedure" #f 316 11 316 27 ("Remove" "database" "get-StoredProcedures" "procedures" "with-closed" "name")}
        {Lisp-Entry "restore-database" #f 326 18 326 34 ("server" "SQLRestore" "parse" "put-Files" "put-Database" "SQLDMO.Restore" "com-create" "restore" "with-closed" "backup" "database")}}}})
"SQLServer-Inventory-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory-Column.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Inventory-Column" #f 37 9 37 79 ("jazz")
      {Lisp-Entry "SQLServer-Inventory-Column" #f 45 7 45 33 ("Inventory-Column")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "index-column?" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 67 18 67 28 ("handle")}
        {Lisp-Entry "get-default-value" #f 71 11 71 28 ("get-Text" "handle" "get-DRIDefault" "default" "with-closed")}
        {Lisp-Entry "set-default-value" #f 76 11 76 28 ("put-Text" "Remove" "null?" "if" "handle" "get-DRIDefault" "default" "with-closed" "value")}
        {Lisp-Entry "get-default-value-name" #f 83 11 83 33 ("get-Name" "handle" "get-DRIDefault" "default" "with-closed")}
        {Lisp-Entry "set-default-value-name" #f 88 11 88 33 ("put-Name" "when" "handle" "get-DRIDefault" "default" "with-closed" "value")}
        {Lisp-Entry "get-used-defined-datatype" #f 94 11 94 36 ("/=" "if" "get-type" "type" "get-used-defined-type" "used-defined-type" "let")}
        {Lisp-Entry "get-used-defined-type" #f 102 11 102 32 ("handle" "get-Datatype")}
        {Lisp-Entry "get-datatype" #f 106 11 106 23 ("get-scale" "get-precision" "get-size" "get-type" "SQLServer-Datatype" "new-datatype")}
        {Lisp-Entry "get-type" #f 110 11 110 19 ("get-Datatype" "handle" "get-PhysicalDatatype")}
        {Lisp-Entry "get-size" #f 116 11 116 19 ("handle" "get-Length")}
        {Lisp-Entry "set-datatype" #f 120 11 120 23 ("set-scale" "set-precision" "set-size" "handle" "put-Datatype" "get-scale" "scale" "get-precision" "precision" "get-size" "size" "get-name" "name" "let" "value")}
        {Lisp-Entry "modify-datatype" #f 131 11 131 26 ("0" "AlterDataType" "SQLDMO._Column2" "handle" "coquery" "column" "with-closed" "get-size" "size" "get-name" "name" "let" "value")}
        {Lisp-Entry "set-size" #f 138 11 138 19 ("handle" "put-Length" "when" "size")}
        {Lisp-Entry "get-title" #f 143 11 143 20 ("handle" "get-Name")}
        {Lisp-Entry "get-length" #f 147 18 147 28 ("handle" "get-Length")}
        {Lisp-Entry "get-scale" #f 151 11 151 20 ("handle" "get-NumericScale")}
        {Lisp-Entry "set-scale" #f 155 11 155 20 ("handle" "put-NumericScale" "when" "scale")}
        {Lisp-Entry "get-precision" #f 160 11 160 24 ("handle" "get-NumericPrecision")}
        {Lisp-Entry "set-precision" #f 164 11 164 24 ("handle" "put-NumericPrecision" "when" "precision")}
        {Lisp-Entry "get-nullable?" #f 169 11 169 24 ("handle" "get-AllowNulls")}
        {Lisp-Entry "set-nullable?" #f 173 11 173 24 ("handle" "put-AllowNulls" "value")}
        {Lisp-Entry "get-fixed?" #f 177 11 177 21 ("get-IsVariableLength" "not" "get-type" "inventory" "get-system-type" "type" "with-closed")}
        {Lisp-Entry "get-ordinal-position" #f 182 11 182 31 ("1" "handle" "get-ID" "-")}
        {Lisp-Entry "set-ordinal-position" #f 186 11 186 31 ("value")}
        {Lisp-Entry "get-order" #f 191 11 191 20 ("get-title" "parent" "order-of")}
        {Lisp-Entry "get-identity?" #f 195 11 195 24 ("handle" "get-Identity")}
        {Lisp-Entry "set-identity?" #f 199 11 199 24 ("handle" "put-Identity" "value")}
        {Lisp-Entry "get-identity-replication?" #f 203 11 203 36 ("handle" "get-NotForRepl" "not")}
        {Lisp-Entry "set-identity-replication?" #f 207 11 207 36 ("not" "handle" "put-NotForRepl" "value")}
        {Lisp-Entry "get-identity-seed" #f 211 11 211 28 ("handle" "get-IdentitySeed")}
        {Lisp-Entry "set-identity-seed" #f 215 11 215 28 ("handle" "put-IdentitySeed" "value")}
        {Lisp-Entry "get-identity-increment" #f 219 11 219 33 ("handle" "get-IdentityIncrement")}
        {Lisp-Entry "get-row-guid-col?" #f 223 11 223 28 ("handle" "get-IsRowGuidCol")}
        {Lisp-Entry "get-computed?" #f 227 11 227 24 ("handle" "get-IsComputed")}
        {Lisp-Entry "get-computed-text" #f 231 11 231 28 ("handle" "get-ComputedText")}
        {Lisp-Entry "get-collation" #f 235 11 235 24 ("get-Collation" "SQLDMO._Column2" "handle" "coquery" "column2" "with-closed")}
        {Lisp-Entry "get-description" #f 240 11 240 26 ("inventory" "get-connection" "load-value" "tie" "cmd" "parent" "table-name" "get-title" "column-name" "let*")}}}})
"SQLServer-Inventory-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory-Constraint.jazz"} 1226584775
    {Lisp-Entry "jazz.database..sqlserver.SQLServer-Inventory-Constraint" #f 37 9 37 64 ("jazz")
      {Lisp-Entry "SQLServer-Inventory-Constraint" #f 45 7 45 37 ("Inventory-Constraint")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 67 18 67 28 ("handle")}
        {Lisp-Entry "get-title" #f 71 11 71 20 ("handle" "get-Name")}
        {Lisp-Entry "get-text" #f 75 18 75 26 ("handle" "get-Text")}
        {Lisp-Entry "set-text" #f 79 18 79 26 ("handle" "put-Text" "value")}
        {Lisp-Entry "get-checked?" #f 83 18 83 30 ("handle" "get-Checked")}
        {Lisp-Entry "set-checked?" #f 87 18 87 30 ("handle" "put-Checked" "value")}
        {Lisp-Entry "get-exclude-replication?" #f 91 18 91 42 ("handle" "get-ExcludeReplication")}
        {Lisp-Entry "set-exclude-replication?" #f 95 18 95 42 ("handle" "put-ExcludeReplication" "value")}}}})
"SQLServer-Inventory-Index"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory-Index.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Inventory-Index" #f 37 9 37 78 ("jazz")
      {Lisp-Entry "SQLServer-Inventory-Index" #f 45 7 45 32 ("Inventory-Index")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "com-release" "SQLDMO._Index2" "coquery" "handle~self" "set!" "nextmethod" "index-handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 58 11 58 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 68 18 68 28 ("handle")}
        {Lisp-Entry "get-title" #f 72 11 72 20 ("handle" "get-Name")}
        {Lisp-Entry "set-fields/orders" #f 76 18 76 35 ("descending" "'descending" "=" "SetIndexedColumnDESC" "order" "field" "bind" "for-each" "handle" "put-IndexedColumns" "car" "format" "field/order" "function" "map" "join" "string" "let" "value")}
        {Lisp-Entry "get-ignore-duplicates?" #f 88 11 88 33 ("SQLDMO.SQLDMOIndex_IgnoreDupKey" "type-bit?")}
        {Lisp-Entry "get-unique?" #f 92 11 92 22 ("SQLDMO.SQLDMOIndex_Unique" "type-bit?")}
        {Lisp-Entry "get-clustered?" #f 96 11 96 25 ("SQLDMO.SQLDMOIndex_Clustered" "type-bit?")}
        {Lisp-Entry "get-pad-index?" #f 100 11 100 25 ("SQLDMO.SQLDMOIndex_PadIndex" "type-bit?")}
        {Lisp-Entry "get-recompute-statistics?" #f 104 11 104 36 ("SQLDMO.SQLDMOIndex_NoRecompute" "type-bit?" "not")}
        {Lisp-Entry "get-fields" #f 108 11 108 21 ("SQLDMO._Column" "coquery" "self" "inventory" "SQLServer-Inventory-Column" "new" "Item" "field" "collect" "get-Count" "to" "1" "from" "n" "for" "loop" "handle" "ListIndexedColumns" "fields" "with-closed")}
        {Lisp-Entry "order-of" #f 116 21 116 29 ("ascending" "'ascending" "descending" "'descending" "handle" "GetIndexedColumnDESC" "if" "name")}
        {Lisp-Entry "get-fill-factor" #f 125 11 125 26 ("handle" "get-FillFactor")}
        {Lisp-Entry "type-bit?" #f 134 11 134 20 ("handle" "get-Type" "mask-bit-set?" "bit")}
        {Lisp-Entry "set-type-bit?" #f 138 11 138 24 ("get-Type" "mask-bit-set" "handle" "put-Type" "value" "bit")}}}})
"SQLServer-Inventory-Primary-Key"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory-Primary-Key.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Inventory-Primary-Key" #f 37 9 37 84 ("jazz")
      {Lisp-Entry "SQLServer-Inventory-Primary-Key" #f 45 7 45 38 ("Inventory-Primary-Key")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 67 18 67 28 ("handle")}
        {Lisp-Entry "get-title" #f 71 11 71 20 ("handle" "get-Name")}
        {Lisp-Entry "get-fields/orders" #f 75 11 75 28 ("get-fields/orders" "parent" "get-primary-index" "primary-index" "with-closed")}
        {Lisp-Entry "get-clustered?" #f 80 11 80 25 ("handle" "get-Clustered")}
        {Lisp-Entry "get-fill-factor" #f 84 11 84 26 ("handle" "get-FillFactor")}}}})
"SQLServer-Inventory-Procedure"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory-Procedure.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Inventory-Procedure" #f 37 9 37 82 ("jazz")
      {Lisp-Entry "SQLServer-Inventory-Procedure" #f 45 7 45 36 ("Inventory-Procedure")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 67 18 67 28 ("handle")}
        {Lisp-Entry "get-title" #f 71 11 71 20 ("handle" "get-Name")}
        {Lisp-Entry "get-text" #f 75 11 75 19 ("length" "-" "0" "subseq" "set!" "ends-with?" "when" "tie" "marker" "handle" "get-Text" "text" "let")}
        {Lisp-Entry "set-text" #f 84 18 84 26 ("handle" "put-Text" "value")}}}})
"SQLServer-Inventory-Relation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory-Relation.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Inventory-Relation" #f 37 9 37 81 ("jazz")
      {Lisp-Entry "SQLServer-Inventory-Relation" #f 45 7 45 35 ("Inventory-Relation")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "close" "parent" "when" "handle" "com-release")}
        {Lisp-Entry "get-title" #f 70 11 70 20 ("handle" "get-Name")}
        {Lisp-Entry "get-primary-table" #f 74 11 74 28 ("handle" "get-ReferencedTable" "standardize-name")}
        {Lisp-Entry "get-primary-field-names" #f 78 11 78 34 ("Item" "collect" "get-Count" "to" "1" "from" "n" "for" "loop" "handle" "get-ReferencedColumns" "names" "with-closed")}
        {Lisp-Entry "get-foreign-table" #f 84 11 84 28 ("parent" "get-title")}
        {Lisp-Entry "get-foreign-field-names" #f 88 11 88 34 ("Item" "collect" "get-Count" "to" "1" "from" "n" "for" "loop" "handle" "get-KeyColumns" "names" "with-closed")}
        {Lisp-Entry "get-checked?" #f 94 11 94 23 ("handle" "get-Checked")}
        {Lisp-Entry "get-exclude-replication?" #f 98 11 98 35 ("handle" "get-ExcludeReplication")}
        {Lisp-Entry "get-update-cascade?" #f 102 11 102 30 ("get-cascade?")}
        {Lisp-Entry "get-delete-cascade?" #f 106 11 106 30 ("get-cascade?")}
        {Lisp-Entry "get-cascade?" #f 110 11 110 23 ("1" "inventory" "get-connection" "load-value" "=" "if" "tie" "cmd" "get-title" "fk-name" "let*" "kind")}
        {Lisp-Entry "dbo-header" #f 123 14 123 24 ()}
        {Lisp-Entry "standardize-name" #f 127 11 127 27 ("-" "1" "0" "element" "eqv?" "length" "subseq" "set!" "dbo-header" "starts-with?" "when" "name")}}}})
"SQLServer-Inventory-Table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory-Table.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Inventory-Table" #f 37 9 37 78 ("jazz")
      {Lisp-Entry "SQLServer-Inventory-Table" #f 45 7 45 32 ("Inventory-Table")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 67 18 67 28 ("handle")}
        {Lisp-Entry "get-title" #f 71 11 71 20 ("handle" "get-Name")}
        {Lisp-Entry "get-primary-key" #f 80 18 80 33 ("self" "inventory" "SQLServer-Inventory-Primary-Key" "new" "when" "handle" "get-PrimaryKey" "key" "let")}
        {Lisp-Entry "create-primary-key" #f 86 18 86 36 ("self" "inventory" "SQLServer-Inventory-Primary-Key" "new" "handle" "get-Keys" "keys" "Add" "order" "field" "bind" "field/order" "function" "for-each" "get-KeyColumns" "names" "with-closed" "SQLDMO.SQLDMOKey_Primary" "put-Type" "put-Name" "SQLDMO.Key" "com-create" "primary-key" "let" "fields/orders" "name")}
        {Lisp-Entry "remove-primary-key" #f 100 11 100 29 ("Remove" "handle" "get-Keys" "keys" "with-closed" "name")}
        {Lisp-Entry "get-columns" #f 110 11 110 22 ("Item" "self" "inventory" "SQLServer-Inventory-Column" "new" "collect" "get-Count" "to" "1" "from" "n" "for" "loop" "handle" "get-Columns" "columns" "with-closed")}
        {Lisp-Entry "get-column" #f 116 11 116 21 ("Item" "self" "inventory" "SQLServer-Inventory-Column" "new" "handle" "get-Columns" "columns" "with-closed" "name")}
        {Lisp-Entry "create-column" #f 121 11 121 24 ("self" "inventory" "SQLServer-Inventory-Column" "new" "put-Name" "SQLDMO.Column" "com-create" "new-column" "let" "name")}
        {Lisp-Entry "append-column" #f 127 11 127 24 ("get-handle" "Add" "handle" "get-Columns" "columns" "with-closed" "column")}
        {Lisp-Entry "remove-column" #f 132 11 132 24 ("Remove" "handle" "get-Columns" "columns" "with-closed" "name")}
        {Lisp-Entry "get-indexes" #f 142 11 142 22 ("get-output" "com-release" "self" "inventory" "SQLServer-Inventory-Index" "put" "SQLDMO.SQLDMOIndex_DRIPrimaryKey" "get-Type" "mask-bit-set?" "get-StatisticsIndex" "not" "and" "if" "Item" "index" "get-Count" "to" "1" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "handle" "get-Indexes" "indexes" "with-closed")}
        {Lisp-Entry "get-primary-index" #f 154 18 154 35 ("com-release" "self" "inventory" "SQLServer-Inventory-Index" "new" "continuation-return" "SQLDMO.SQLDMOIndex_DRIPrimaryKey" "get-Type" "mask-bit-set?" "get-StatisticsIndex" "not" "and" "if" "Item" "index" "let" "get-Count" "to" "1" "from" "n" "for" "loop" "return" "function" "continuation-capture" "handle" "get-Indexes" "indexes" "with-closed")}
        {Lisp-Entry "get-index" #f 167 11 167 20 ("Item" "self" "inventory" "SQLServer-Inventory-Index" "new" "handle" "get-Indexes" "indexes" "with-closed" "name")}
        {Lisp-Entry "create-index" #f 172 11 172 23 ("self" "inventory" "SQLServer-Inventory-Index" "new" "put-Name" "SQLDMO.Index" "com-create" "new-index" "let" "name")}
        {Lisp-Entry "append-index" #f 178 11 178 23 ("get-handle" "Add" "handle" "get-Indexes" "indexes" "with-closed" "index")}
        {Lisp-Entry "remove-index" #f 183 11 183 23 ("Remove" "handle" "get-Indexes" "indexes" "with-closed" "name")}
        {Lisp-Entry "get-triggers" #f 193 11 193 23 ("get-output" "com-release" "self" "inventory" "SQLServer-Inventory-Trigger" "put" "get-SystemObject" "not" "if" "Item" "trigger" "get-Count" "to" "1" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "handle" "get-Triggers" "triggers" "with-closed")}
        {Lisp-Entry "Object-Not-Existant" #f 204 12 204 31 ("#x80045510")}
        {Lisp-Entry "get-trigger" #f 208 11 208 22 ("self" "inventory" "SQLServer-Inventory-Trigger" "new" "when" "Object-Not-Existant" "cotry" "if" "trigger" "Item" "function" "action" "let*" "handle" "get-Triggers" "triggers" "with-closed" "error?" "error?:" "name")}
        {Lisp-Entry "create-trigger" #f 221 11 221 25 ("self" "inventory" "SQLServer-Inventory-Trigger" "new" "put-Name" "SQLDMO.Trigger" "com-create" "new-trigger" "let" "name")}
        {Lisp-Entry "append-trigger" #f 227 11 227 25 ("get-handle" "Add" "handle" "get-Triggers" "triggers" "with-closed" "trigger")}
        {Lisp-Entry "remove-trigger" #f 232 11 232 25 ("Remove" "handle" "get-Triggers" "triggers" "with-closed" "trigger-name")}
        {Lisp-Entry "get-table-relations" #f 242 21 242 40 ("get-output" "com-release" "self" "inventory" "SQLServer-Inventory-Relation" "put" "SQLDMO.SQLDMOKey_Foreign" "get-Type" "=" "if" "Item" "key" "get-Count" "to" "1" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "handle" "get-Keys" "keys" "with-closed")}
        {Lisp-Entry "get-constraints" #f 258 11 258 26 ("get-output" "self" "inventory" "SQLServer-Inventory-Constraint" "put" "Item" "check" "get-Count" "to" "1" "from" "n" "for" "loop" "List-Factory" "new" "fact" "let" "handle" "get-Checks" "checks" "with-closed")}
        {Lisp-Entry "get-constraint" #f 267 11 267 25 ("self" "inventory" "SQLServer-Inventory-Constraint" "new" "when" "Object-Not-Existant" "cotry" "if" "constraint" "Item" "function" "action" "let*" "handle" "get-Checks" "constraints" "with-closed" "error?" "error?:" "name")}
        {Lisp-Entry "create-constraint" #f 280 11 280 28 ("self" "inventory" "SQLServer-Inventory-Constraint" "new" "put-Name" "SQLDMO.Check" "com-create" "new-constraint" "let" "name")}
        {Lisp-Entry "append-constraint" #f 286 11 286 28 ("get-handle" "Add" "handle" "get-Checks" "constraints" "with-closed" "constraint")}
        {Lisp-Entry "remove-constraint" #f 291 11 291 28 ("Remove" "handle" "get-Checks" "constraints" "with-closed" "constraint-name")}
        {Lisp-Entry "get-text-file-group" #f 301 11 301 30 ("handle" "get-TextFileGroup")}
        {Lisp-Entry "set-text-file-group" #f 305 11 305 30 ("handle" "put-TextFileGroup" "value")}
        {Lisp-Entry "get-file-group" #f 309 11 309 25 ("handle" "get-FileGroup")}
        {Lisp-Entry "set-file-group" #f 313 11 313 25 ("handle" "put-FileGroup" "value")}
        {Lisp-Entry "get-owner" #f 317 11 317 20 ("handle" "get-Owner")}
        {Lisp-Entry "set-owner" #f 321 11 321 20 ("handle" "put-Owner" "value")}
        {Lisp-Entry "get-description" #f 325 11 325 26 ("inventory" "get-connection" "load-value" "tie" "cmd" "get-title" "table-name" "let*")}}}})
"SQLServer-Inventory-Trigger"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory-Trigger.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Inventory-Trigger" #f 37 9 37 80 ("jazz")
      {Lisp-Entry "SQLServer-Inventory-Trigger" #f 45 7 45 34 ("Inventory-Trigger")
        {Lisp-Entry "handle" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 57 11 57 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 67 18 67 28 ("handle")}
        {Lisp-Entry "get-title" #f 71 11 71 20 ("handle" "get-Name")}
        {Lisp-Entry "get-text" #f 75 11 75 19 ("handle" "get-Text")}
        {Lisp-Entry "set-text" #f 79 18 79 26 ("handle" "put-Text" "value")}}}})
"SQLServer-Inventory-Updater"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory-Updater.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Inventory-Updater" #f 37 9 37 80 ("jazz")
      {Lisp-Entry "SQLServer-Inventory-Updater" #f 45 7 45 34 ("Inventory-Updater")}}})
"SQLServer-Inventory-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Inventory-View.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Inventory-View" #f 37 9 37 77 ("jazz")
      {Lisp-Entry "SQLServer-Inventory-View" #f 46 7 46 31 ("Inventory-View")
        {Lisp-Entry "handle" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("destroy-mandatory" "handle~self" "set!" "nextmethod" "handle" "parent" "inventory")}
        {Lisp-Entry "destroy" #f 58 11 58 18 ("nextmethod" "handle" "com-release")}
        {Lisp-Entry "get-handle" #f 68 18 68 28 ("handle")}
        {Lisp-Entry "get-title" #f 72 11 72 20 ("handle" "get-Name")}
        {Lisp-Entry "get-text" #f 76 11 76 19 ("handle" "get-Text")}
        {Lisp-Entry "set-text" #f 80 18 80 26 ("handle" "put-Text" "value")}}}})
"SQLServer-Primary-Key-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Primary-Key-Constraint.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Primary-Key-Constraint" #f 37 9 37 85 ("jazz")
      {Lisp-Entry "SQLServer-Primary-Key-Constraint" #f 45 7 45 39 ("Integrity-Constraint")
        {Lisp-Entry "register-constraints" #f 53 16 53 36 ("Design-Primary-Key" "self" "new" "register-constraint" "manager")}
        {Lisp-Entry "validate" #f 63 11 63 19 ("get-fields/orders" "fields/orders" "'fields/orders" "property:" "message:" "Integrity-Violation" "new" "add-violation" "format" "message" "get-nullable?" "find-visible-column" "column" "let" "order" "field" "bind" "field/order" "function" "for-each" "SQLServer-Design-Schema" "is?" "when" "get-schema" "schema" "Design-Architecture" "find-ascendant" "get-table" "table" "let*" "manager" "context" "client" "architecture" "primary-key")}}}})
"SQLServer-Primary-Key-Name-Global-Unicity-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Primary-Key-Name-Global-Unicity-Constraint.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Primary-Key-Name-Global-Unicity-Constraint" #f 37 9 37 105 ("jazz")
      {Lisp-Entry "SQLServer-Primary-Key-Name-Global-Unicity-Constraint" #f 45 7 45 59 ("Integrity-Constraint")
        {Lisp-Entry "register-constraints" #f 53 16 53 36 ("Design-Primary-Key" "self" "new" "register-constraint" "manager")}
        {Lisp-Entry "validate" #f 63 11 63 19 ("message:" "Integrity-Violation" "new" "add-violation" "when" "manager" "context" "client" "architecture" "primary-key")}}}})
"SQLServer-Procedure-Validity-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Procedure-Validity-Constraint.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Procedure-Validity-Constraint" #f 37 9 37 92 ("jazz")
      {Lisp-Entry "SQLServer-Procedure-Validity-Constraint" #f 45 7 45 46 ("Integrity-Constraint")
        {Lisp-Entry "register-constraints" #f 53 16 53 36 ("Design-Procedure" "self" "new" "register-constraint" "manager")}
        {Lisp-Entry "ends-with-go?" #f 63 11 63 24 ("+" "-" "subseq" "ci=?" "1" ">=" "and" "position" "'position" "return:" "reversed?:" "whitespace?" "not" "c" "function" "find-if" "last-non-white" "let" "text")}
        {Lisp-Entry "validate" #f 70 11 70 19 ("stop-descent" "'stop-descent" "'text" "property:" "message:" "Integrity-Violation" "new" "add-violation" "ends-with-go?" "SQLServer-Design-Schema" "is?" "and" "when" "get-schema" "schema" "Design-Architecture" "find-ascendant" "get-text" "text" "get-name" "name" "let*" "manager" "context" "client" "architecture" "procedure")}}}})
"SQLServer-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Provider.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Provider" #f 37 9 37 71 ("jazz")
      {Lisp-Entry "SQLServer-Provider" #f 47 7 47 25 ("Provider")
        {Lisp-Entry "external-name" #f 50 11 50 24 ("sqlserver" "'sqlserver")}
        {Lisp-Entry "get-datatype" #f 59 11 59 23 ("SQLServer-Datatype")}
        {Lisp-Entry "supports-multirequests?" #f 68 11 68 34 ()}
        {Lisp-Entry "format-variable" #f 77 11 77 26 ("format" "variable")}
        {Lisp-Entry "present" #f 86 11 86 18 ()}
        {Lisp-Entry "get-server-names" #f 95 18 95 34 ("Item" "collect" "get-Count" "to" "1" "from" "n" "for" "loop" "ListAvailableSQLServers" "essay" "name-list" "message-box" "begin" "null?" "if" "error?:" "SQLDMO.Application" "com-create" "application" "with-closed" "function" ":wait" "with-cursor")}
        {Lisp-Entry "server-names-for-combo" #f 108 18 108 40 ("equal?" "test:" "remove" "map" "list" "cons" "get-server-names" "names" "let")}
        {Lisp-Entry "server-names-choices-updater" #f 113 18 113 46 ("server-names-for-combo" "set-choices" "combo")}
        {Lisp-Entry "browser-class" #f 123 11 123 24 ("SQLServer-Widget")}
        {Lisp-Entry "new-updater" #f 132 11 132 22 ("SQLServer-Inventory-Updater" "new" "connection")}}}})
"SQLServer-Server-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Server-Browser.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Server-Browser" #f 37 9 37 77 ("jazz")
      {Lisp-Entry "SQLServer-Server-Browser" #f 46 7 46 31 ("Combo-Box")
        {Lisp-Entry "install" #f 49 11 49 18 ("update-server-names" "nextmethod" "rest")}
        {Lisp-Entry "update-server-names" #f 59 11 59 30 ("set-entry" "sqlserver" "'sqlserver" "Provider" "get-provider" "server-names-choices-updater" "" "set-choices-updater")}}}})
"SQLServer-Server-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Server-Row.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Server-Row" #f 37 9 37 73 ("jazz")
      {Lisp-Entry "SQLServer-Server-Row" #f 46 7 46 27 ("Combo-Row")
        {Lisp-Entry "update-server-names" #f 49 11 49 30 ("sqlserver" "'sqlserver" "Provider" "get-provider" "server-names-choices-updater" "" "set-choices-updater")}
        {Lisp-Entry "edit" #f 54 11 54 15 ("self" "get-tree" "expand" "edit-in-cell")}
        {Lisp-Entry "edit-in-cell" #f 59 11 59 23 ("update-server-names" "nextmethod")}
        {Lisp-Entry "close-editor" #f 64 11 64 23 ("self" "get-tree" "collapse" "nextmethod")}}}})
"SQLServer-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Text-View.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.inventory.sqlserver.SQLServer-Text-View" #f 37 9 37 72 ("jazz")
      {Lisp-Entry "SQLServer-Text-View" #f 47 7 47 26 ("SQL-Text-View")
        {Lisp-Entry "host-workspaces" #f 55 11 55 26 ("text")}
        {Lisp-Entry "TransactSQL-Keywords" #f 64 12 64 32 ()}
        {Lisp-Entry "get-keywords" #f 82 11 82 23 ("TransactSQL-Keywords" "nextmethod" "append")}
        {Lisp-Entry "SQLServer-Syntax-Targets" #f 92 14 92 38 ()}
        {Lisp-Entry "SQLServer-Syntax-Automata" #f 95 14 95 39 ()}
        {Lisp-Entry "syntax-targets" #f 99 11 99 25 ("compute-syntax-targets" "set!" "SQLServer-Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 105 11 105 26 ("compute-syntax-automata" "set!" "SQLServer-Syntax-Automata" "unless")}}}})
"SQLServer-Trigger-Name-Global-Unicity-Constraint"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Trigger-Name-Global-Unicity-Constraint.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Trigger-Name-Global-Unicity-Constraint" #f 37 9 37 101 ("jazz")
      {Lisp-Entry "SQLServer-Trigger-Name-Global-Unicity-Constraint" #f 45 7 45 55 ("Integrity-Constraint")
        {Lisp-Entry "register-constraints" #f 53 16 53 36 ("Design-Trigger" "self" "new" "register-constraint" "manager")}
        {Lisp-Entry "validate" #f 63 11 63 19 ("message:" "Integrity-Violation" "new" "add-violation" "when" "manager" "context" "client" "architecture" "trigger")}}}})
"SQLServer-Widget"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "inventory" "SQLServer-Widget.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.inventory.SQLServer-Widget" #f 37 9 37 69 ("jazz")
      {Lisp-Entry "SQLServer-Widget" #f 49 7 49 23 ("database" "79" "database-border" "81" "database-label" "password" "49" "password-border" "56" "52" "password-label" "on-return-press" "return-press-handler:" "username" "fill" "layout-type:" "vscroll?:" "hscroll?:" "21" "26" "username-border" "29" "username-label" "top-padding:" "2" "left-padding:" "body" "content" "scroller" "on-server-change" ":form" "Event-Handler" "content-change-handler:" "server" "style:" "edge" "border-type:" "19" "203" "1" "67" "server-border" "16" "59" "3" "0" "Point" "position:" "title:" "server-label" "name:" "129" "278" "Dimension" "size:" "Data-Source-Widget")
        {Lisp-Entry "install" #f 78 11 78 18 ("database-choices-updater" "database" "'database" "locate" "set-choices-updater" "nextmethod" "rest")}
        {Lisp-Entry "database-choices-updater" #f 83 11 83 35 ("get-data-source" "set-data-source" "combo-box")}
        {Lisp-Entry "get-data-source" #f 93 11 93 26 ("database" "'database" "database:" "password" "'password" "password:" "username" "'username" "get-string-content" "username:" "server" "'server" "locate" "get-entry" "server:" "SQLServer-Data-Source" "new")}
        {Lisp-Entry "set-data-source" #f 101 11 101 26 ("get-database" "database" "'database" "get-password" "password" "'password" "get-username" "username" "'username" "set-string-content" "get-server" "server" "'server" "locate" "set-entry" "source")}
        {Lisp-Entry "setup-username/password-mode" #f 108 11 108 39 ("select-all" "username" "'username" "acquire-focus" "database" "'database" "server" "'server" "locate" "set-enabled?")}
        {Lisp-Entry "set-enabled?" #f 120 11 120 23 ("invalidate-view" "database" "'database" "password" "'password" "username" "'username" "server" "'server" "locate" "set-enabled?" "enabled?" "set!" "flag")}
        {Lisp-Entry "get-tab-stops" #f 134 11 134 24 ("database" "'database" "password" "'password" "username" "'username" "server" "'server" "locate" "list")}
        {Lisp-Entry "set-default-focus" #f 142 18 142 35 ("server" "'server" "locate" "set-focus")}
        {Lisp-Entry "on-server-change" #f 146 11 146 27 ("database" "'database" "locate" "set-data-source" "evt")}
        {Lisp-Entry "on-return-press" #f 150 11 150 26 ("self" "invoke" "return-press-handler" "when" "evt")}
        {Lisp-Entry "validate-content" #f 160 11 160 27 ("database" "'database" "server" "'server" "locate" "validate-content")}}}})
"SXML"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "transform" "SXML.jazz"} 1226584790
    {Lisp-Entry "SXML" #f 37 9 37 13 ("jazz")}})
"Save-Environment-Listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "process" "Save-Environment-Listener.jazz"} 1226584785
    {Lisp-Entry "jazz.system.process.Save-Environment-Listener" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Save-Environment-Listener" #f 46 11 46 36 ("Listener")
        {Lisp-Entry "save-environment" #f 49 35 49 51 ()}}}})
"Schema-Archive"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "archive" "Schema-Archive.jazz"} 1227043164
    {Lisp-Entry "jazz.schema.archive.Schema-Archive" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Schema-Archive" #f 45 7 45 21 ("Entity" "Object")}
      {Lisp-Entry "Schema-Archive" #f 51 7 51 21 ("Entity" "Object")
        {Lisp-Entry "version" #f 54 8 54 15 ()}
        {Lisp-Entry "properties" #f 55 8 55 18 ()}
        {Lisp-Entry "schemas" #f 56 8 56 15 ()}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("schemas~self" "properties~self" "version~self" "set!" "nextmethod" "schemas" "properties" "version")}
        {Lisp-Entry "print" #f 66 11 66 16 ("format-plural" "format" "schemas" "length" "count" "let" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-version" #f 78 18 78 29 ("version")}
        {Lisp-Entry "get-properties" #f 82 18 82 32 ("properties")}
        {Lisp-Entry "get-property" #f 86 18 86 30 ("not-found:" "properties" "getf" "not-found" "property")}
        {Lisp-Entry "set-property" #f 90 18 90 30 ("cons" "set!" "setf" "properties" "getf" "if" "value" "property")}
        {Lisp-Entry "get-schemas" #f 96 18 96 29 ("schemas")}
        {Lisp-Entry "get-schema" #f 100 18 100 28 ("error" "find-schema" "either" "error?" "error?:" "name")}
        {Lisp-Entry "find-schema" #f 105 18 105 29 ("schemas" "name:" "get-property" "=" "schema" "function" "find-if" "name")}
        {Lisp-Entry "schema-properties" #f 111 23 111 40 ("provider:" "name:" "get-property" "list" "schema")}
        {Lisp-Entry "add-schema" #f 115 18 115 28 ("schema-properties" "get-property" ":schemas" "set-property" "list" "append!" "schemas" "set!" "schema")}
        {Lisp-Entry "remove-schema" #f 120 18 120 31 ("name:" "get-property" "assoc" ":schemas" "set-property" "remove!" "schemas" "set!" "schema")}
        {Lisp-Entry "rename-schema" #f 125 18 125 31 ("set-car!" "set-property" ":schemas" "name:" "get-property" "assoc" "pair" "let" "name" "schema")}
        {Lisp-Entry "read-header" #f 136 23 136 34 ("read-properties" "read-version" "values" "reader" "function" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "moniker")}
        {Lisp-Entry "read-version" #f 143 16 143 28 ("error" "Version" "is?" "version:" "=" "and" "if" "version" "read" "name" "let" "reader")}
        {Lisp-Entry "read-properties" #f 151 16 151 31 ("error" "pair?" "properties:" "=" "and" "if" "properties" "read" "name" "let" "reader")}
        {Lisp-Entry "new-archive" #f 164 23 164 34 ("MetaModeler" "archive-version" "self" "new")}
        {Lisp-Entry "load-archive" #f 174 23 174 35 ("schemas:" "properties:" "version:" "getf" "self" "new" "eof-object?" "read-until" "content" "let" "reader" "function" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "file")}
        {Lisp-Entry "save-archive" #f 189 18 189 30 ("schemas" "output-schemas" "properties" "output-properties" "version" "output-version" "output-header" "printer" "function" "parse" "call-with-output-file" "file")}
        {Lisp-Entry "output-version" #f 198 11 198 25 ("format" "printer" "version")}
        {Lisp-Entry "output-properties" #f 202 11 202 28 ("null?" "if" "format" "printer" "properties")}
        {Lisp-Entry "output-schemas" #f 209 11 209 25 ("output-schema" "schema" "function" "for-each" "format" "printer" "schemas")}
        {Lisp-Entry "output-schema" #f 218 11 218 24 ("print-schema" "name:" "get-property" "output-section" "printer" "schema")}
        {Lisp-Entry "get-factory" #f 228 11 228 22 ()}
        {Lisp-Entry "get-factories" #f 232 11 232 24 ()}
        {Lisp-Entry "get-presentation" #f 236 11 236 27 ()}
        {Lisp-Entry "set-presentation" #f 240 11 240 27 ("presentation" "controller")}
        {Lisp-Entry "can-cut-entity?" #f 244 11 244 26 ()}
        {Lisp-Entry "can-copy-entity?" #f 248 11 248 27 ()}
        {Lisp-Entry "can-paste-entity?" #f 252 11 252 28 ()}
        {Lisp-Entry "determine-paster" #f 256 11 256 27 ("rest")}
        {Lisp-Entry "can-rename-entity?" #f 260 11 260 29 ()}
        {Lisp-Entry "can-delete-entity?" #f 264 11 264 29 ()}
        {Lisp-Entry "can-move-entity?" #f 268 11 268 27 ()}
        {Lisp-Entry "can-view-properties?" #f 272 11 272 31 ()}
        {Lisp-Entry "get-categorized-properties" #f 276 11 276 37 ()}}}})
"Schema-Browser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "view" "Schema-Browser.jazz"} 1226584775
    {Lisp-Entry "jazz.database.view.Schema-Browser" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Schema-Browser" #f 49 7 49 21 ("on-return-press" "return-press-handler:" "1" "paragraph-spacing:" "2" "top-padding:" "left-padding:" "show-unfocused-selection?:" "accepts-returns?:" "selectable?:" "editable?:" "text" "vscroll?:" "hscroll?:" "center" "scroller" "on-browse" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "22" "browse" "label" "0" "4" "Medium" "Color" "background:" "flow" "north" "location:" "21" "120" "top" "border" "content" "name:" "fill" "layout-type:" "entry" "style:" "edge" "border-type:" "24" "142" "Dimension" "size:" "Border-View")
        {Lisp-Entry "empty-text" #f 52 12 52 22 ("generate")}
        {Lisp-Entry "source" #f 55 8 55 14 ()}
        {Lisp-Entry "on-browse" #f 75 11 75 20 ("get-source" "source:" "Schema-Chooser" "get-modal" "set-source" "evt")}
        {Lisp-Entry "on-return-press" #f 79 11 79 26 ("self" "invoke" "return-press-handler" "when" "evt")}
        {Lisp-Entry "get-text" #f 89 18 89 26 ("text" "'text" "locate")}
        {Lisp-Entry "inner?" #f 98 11 98 17 ("children" "memq?" "view")}
        {Lisp-Entry "draw-children" #f 107 11 107 24 ("-" "line-to" "22" "2" "move-to" "Outline-Border" "name:" "Pen" "set-pen" "get-width" "width" "let" "nextmethod" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-schema" #f 121 18 121 28 ("get-data-schema" "when" "get-source" "source" "let" "reporter" "reporter:")}
        {Lisp-Entry "get-source" #f 132 18 132 28 ("source")}
        {Lisp-Entry "set-source" #f 136 18 136 28 ("source-changed" "present-source" "get-text" "set-text" "source" "set!" "source-changing" "value")}
        {Lisp-Entry "present-source" #f 143 11 143 25 ("present-detailed" "when" "source")}
        {Lisp-Entry "source-changing" #f 148 29 148 44 ("source")}
        {Lisp-Entry "source-changed" #f 152 29 152 43 ("reload" "'reload" "locate" "set-enabled?" "source")}}
      {Lisp-Entry "Schema-Text-View" #f 161 7 161 23 ("Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Plain-Formatted-Text-View")
        {Lisp-Entry "get-scroll-context" #f 168 11 168 29 ("0" "cons")}
        {Lisp-Entry "draw-children" #f 172 11 172 24 ("nextmethod" "draw-empty-schema" "text-empty?" "if" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "Background-Font" #f 178 14 178 29 ("Text" "name:" "Font")}
        {Lisp-Entry "draw-empty-schema" #f 182 11 182 28 ("get-v" "get-h" "draw-text" "Dark" "name:" "Color" "set-text-color" "get-display-size" "center" "pos" "get-text-extent" "extent" "creator" "get-empty-text" "either" "localize" "title" "let*" "Background-Font" "set-font" "surface")}}}})
"Schema-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "view" "Schema-Chooser.jazz"} 1226584775
    {Lisp-Entry "jazz.database.view.Schema-Chooser" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Schema-Chooser" #f 48 7 48 21 ("Chooser")}}})
"Schema-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "source" "Schema-Source.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.source.Schema-Source" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Schema-Source" #f 45 11 45 24 ()
        {Lisp-Entry "present" #f 48 35 48 42 ()}
        {Lisp-Entry "present-detailed" #f 49 35 49 51 ()}
        {Lisp-Entry "get-data-schema" #f 50 35 50 50 ("rest")}}}})
"Scheme-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "scheme" "text" "Scheme-Explorer.jazz"} 1226584780
    {Lisp-Entry "jazz.language.scheme.text.Scheme-Explorer" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Scheme-Explorer" #f 49 7 49 22 ("Lisp-Explorer")
        {Lisp-Entry "Modifiers" #f 52 14 52 23 ()}
        {Lisp-Entry "get-modifiers" #f 56 11 56 24 ("Modifiers")}
        {Lisp-Entry "Scheme-Toplevels" #f 65 14 65 30 ("jazz.define-method" "jazz.define-virtual-runtime" "jazz.define-virtual" "jazz.define-specic" "jazz.define-generic" "jazz.define-syntax" "jazz.define-macro" "jazz.define" "define-macro" "define")}
        {Lisp-Entry "Gambit-Toplevels" #f 69 14 69 30 ("define-library-type-of-exception" "define-library-type" "define-runtime-syntax" "define-runtime-macro" "define-type-of-port" "define-type" "define-fail-check-type" "define-check-type" "define-prim" "##define-macro")}
        {Lisp-Entry "definition-name?" #f 82 11 82 27 ("Gambit-Toplevels" "Scheme-Toplevels" "memq?" "or" "name")}
        {Lisp-Entry "walk-declaration" #f 92 11 92 27 ("exit-list" "unless" "walk-unknown" "else" "walk-native" "native" "walk-type" "c-define-type" "walk-define-class" "jazz.define-virtual" "jazz.define-class-runtime" "jazz.define-class" "walk-define-macro" "specialize" "instantiate" "template" "syntax" "macro" "define-runtime-syntax" "define-runtime-macro" "##define-macro" "jazz.define-variable" "jazz.define-setting" "jazz.define-special" "jazz.define-syntax" "jazz.define-macro" "define-syntax" "define-macro" "walk-define-generic/specific" "jazz.define-method" "jazz.define-virtual-runtime" "jazz.define-virtual-syntax" "jazz.define-specific" "jazz.define-generic" "walk-define" "define-type-of-port" "define-type" "define-fail-check-type" "define-check-type" "define-library-type-of-exception" "define-library-type" "define-prim" "jazz.define-remote" "jazz.define" "jazz.define-feature" "define" "walk-import" "export" "import" "require" "walk-module" "module" "library" "walk-cond-expand" "cond-expand" "walk-declarations" "begin" "case" "find-marked-symbol" "symbol" "'symbol" "eq?" "and" "kind" "code" "'code" "start" "forward-expr" "if" "end" "get-row" "=" "not" "or" "when" "enter-list" "list?" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-cond-expand" #f 161 11 161 27 ("exit-list" "walk-declarations" "feature" "'feature" "code" "'code" "end" "start" "symbol" "'symbol" "get-kind" "eq?" "when" "forward-expr" "set!" "if" "enter-list" "enter?" "not" "while" "done?" "let" "walk-expressions?" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-module" #f 174 11 174 22 ("walk-declarations" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-import" #f 183 11 183 22 ("end" "start" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define" #f 187 11 187 22 ("walk-declarations" "exit-list" "walk-parameters" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define-generic/specific" #f 205 11 205 39 ("walk-declarations" "walk-parameters" "exit-list" "list" "set!" "typename" "get-marked" "name" "get-end" "get-start" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "enter-list" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define-macro" #f 227 11 227 28 ("walk-declarations" "exit-list" "code" "'code" "walk-expressions" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "enter-list" "when" "0" "char-forward" "eqv?" "list?" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-define-class" #f 245 11 245 28 ("walk-expressions" "get-marked" "set!" "get-row" "=" "not" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-native" #f 256 11 256 22 ("set!" "get-marked" "name" "get-row" "=" "or" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "forward-whites" "end" "start" "entry" "string-length" "1" "+" "substring" "not" "if" "reversed?:" "find" "pos" "let" "str" "parse-identifier" "define" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-type" #f 272 11 272 20 ("walk-expressions" "get-marked" "set!" "symbol" "'symbol" "kind" "eq?" "forward-expr" "and" "when" "end" "start" "entry" "let" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}
        {Lisp-Entry "walk-unknown" #f 282 11 282 23 ("walk-expressions" "code" "'code" "walk-expression" "when" "walk-expressions?" "line" "doc" "expression" "keyword" "declaration" "context")}}}})
"Scheme-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "scheme" "parser" "Scheme-Parser.jazz"} 1226584780
    {Lisp-Entry "jazz.language.scheme.parser.Scheme-Parser" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Scheme-Parser" #f 47 7 47 20 ("Lisp-Parser")
        {Lisp-Entry "explorer-class" #f 50 11 50 25 ("Scheme-Explorer" "file")}
        {Lisp-Entry "text-view-class" #f 54 11 54 26 ("Scheme-Text-View")}}}})
"Scheme-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "scheme" "syntax" "Scheme-Syntax.jazz"} 1226584780
    {Lisp-Entry "jazz.language.scheme.syntax.Scheme-Syntax" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Scheme-Syntax" #f 47 7 47 20 ("Lisp-Syntax")
        {Lisp-Entry "translate-key" #f 55 11 55 24 ("translate-lisp-key" "scheme-text" "documents" "get-preferences" "get-translate-keys?" "not" "if" "key")}}}})
"Scheme-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Scheme-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Scheme-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Scheme-Tester" #f 45 7 45 20 ("Tester")}}})
"Scheme-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "scheme" "text" "Scheme-Text-Actions.jazz"} 1226584780
    {Lisp-Entry "jazz.language.scheme.text.Scheme-Text-Actions" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Scheme-Text-Actions" #f 48 7 48 26 ("Return" ":control" "Shortcut" "shortcut:" "on-evaluate" ":focus" "Event-Handler" "action-handler:" "evaluate" "name:" "Actions")}}})
"Scheme-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "scheme" "text" "Scheme-Text-Preferences.jazz"} 1226584780
    {Lisp-Entry "jazz.language.scheme.text.Scheme-Text-Preferences" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "Scheme-Text-Preferences" #f 50 7 50 30 ("completions:" "Dark-Orange" "feature-color:" "quotation-color:" "named-string-color:" "string-color:" "boolean-color:" "number-color:" "specifier-color:" "Dark-Purple" "tag-color:" "Ochre" "char-color:" "keyword-color:" "Dark-Green" "declaration-color:" "Dark-Blue" "declaration-keyword-color:" "Text-Gray" "expr-comment-color:" "Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Lisp-Text-Preferences")
        {Lisp-Entry "get-categorized-properties" #f 91 11 91 37 ("translate-keys?" "keyword-color" "declaration-color" "expr-comment-color" "comment-color" "title-color" "completions")}
        {Lisp-Entry "get-row-instance" #f 95 11 95 27 ("nextmethod" "else" "Boolean-Row" "translate-keys?" "Completion-List-Row" "completions" "Color-Row" "new" "keyword-color" "declaration-color" "expr-comment-color" "comment-color" "title-color" "field-name" "case" "property")}}}})
"Scheme-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "scheme" "text" "Scheme-Text-View.jazz"} 1226584780
    {Lisp-Entry "jazz.language.scheme.text.Scheme-Text-View" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Scheme-Text-View" #f 52 7 52 23 ("tooltip?:" "Lisp-Text-View")
        {Lisp-Entry "install" #f 59 11 59 18 ("Red" "Color" "frame:" "Reference" "'Reference" "get-feature-color" "Feature" "'Feature" "get-quotation-color" "Quotation" "'Quotation" "get-named-string-color" "Named-String" "'Named-String" "get-delimited-string-color" "Delimited-String" "'Delimited-String" "get-string-color" "String" "'String" "get-boolean-color" "Boolean" "'Boolean" "get-char-color" "Char" "'Char" "get-specifier-color" "Specifier" "'Specifier" "get-tag-color" "Tag" "'Tag" "get-keyword-color" "Keyword" "'Keyword" "get-declaration-color" "Declaration" "'Declaration" "get-declaration-keyword-color" "Declaration-Keyword" "'Declaration-Keyword" "get-expr-comment-color" "Expr-Comment" "'Expr-Comment" "get-comment-color" "Comment" "'Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 80 16 80 29 ("scheme-text" "'scheme-text" "rest")}
        {Lisp-Entry "default-extension" #f 84 11 84 28 ()}
        {Lisp-Entry "extensions" #f 88 11 88 21 ()}
        {Lisp-Entry "new-syntax" #f 92 11 92 21 ("Scheme-Syntax" "new")}
        {Lisp-Entry "focus-actions" #f 101 11 101 24 ("nextmethod" "scheme-text" "'scheme-text" "find-actions" "cons")}
        {Lisp-Entry "get-context-menu" #f 111 11 111 27 ("Scheme-Text-Menu" "new")}
        {Lisp-Entry "default-preferences" #f 120 14 120 33 ("completions:" "Dark-Blue" "keyword-color:" "Dark-Green" "declaration-color:" "Dark-Orange" "expr-comment-color:" "Purple" "comment-color:" "Dark-Red" "name:" "Color" "title-color:" "form>>")}
        {Lisp-Entry "preferences" #f 125 11 125 22 ("scheme-text" "documents" "get-preferences")}
        {Lisp-Entry "declaration-style" #f 129 11 129 28 ("Declaration" "'Declaration" "documented?")}
        {Lisp-Entry "Scheme-Specials" #f 138 12 138 27 ("%%when" "%%assertion" "%%assert" "%%debug-assertion" "%%debug-assert" "%%core-assertion" "%%core-assert" "jazz.define-syntax" "jazz.define-macro" "jazz.define" "jazz.assert" "receive" "prog1" "parameterize" "module" "-1" "library" "letrec" "let*" "let" "lambda" "if" "2" "do" "define-macro" "define" "1" "case" "call/cc" "0" "begin")}
        {Lisp-Entry "Gambit-Specials" #f 167 12 167 27 ("##define-macro" "define-type" "define-runtime-syntax" "define-runtime-macro" "define-prim" "define-library-type-of-exception" "define-fail-check-type" "2" "define-check-type" "1" "c-lambda")}
        {Lisp-Entry "Chicken-Specials" #f 178 12 178 28 ("1" "##core#lambda")}
        {Lisp-Entry "Specials" #f 182 12 182 20 ("Chicken-Specials" "Gambit-Specials" "Scheme-Specials" "append")}
        {Lisp-Entry "get-specials" #f 189 11 189 23 ("Specials")}
        {Lisp-Entry "on-evaluate" #f 198 11 198 22 ("evaluate-forms" "read-text-forms" "forms" ".1" "sleep" ":wait" "with-cursor" "when" "current-definition-range" "range" "let" "function" "with-safe-explore" "evt")}
        {Lisp-Entry "evaluate-forms" #f 211 11 211 25 ("'<expr>" "either" "name" "user-message" "evaluate-expressions" ":reader" "->string" "expressions" "form-name" "form" "function" "map" "names" "self" "explorer-class" "new" "expl" "bell" "not" "if" "get-focused-process" "debugged" "let" "forms" "range")}
        {Lisp-Entry "need-definition?" #f 230 11 230 27 ()}
        {Lisp-Entry "explorer-class" #f 239 11 239 25 ("Scheme-Explorer")}}
      {Lisp-Entry "Scheme-Text-Menu" #f 248 7 248 23 ("recolorize-syntax" "update-catalog" "edit-references" "code-text" "edit-definitions" "jazz-text" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "evaluate" "name:" "Context-Menu")}}})
"Scrollbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Scrollbar.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Scrollbar" #f 38 9 38 31 ("jazz")
      {Lisp-Entry "Scrollbar" #f 50 7 50 16 ("View")
        {Lisp-Entry "autorepeat-delay" #f 53 14 53 30 ("0.3")}
        {Lisp-Entry "autorepeat-period" #f 56 14 56 31 ("0.001")}
        {Lisp-Entry "orientation" #f 60 12 60 23 ("set-orientation" "get-orientation" "vert" "'vert")}
        {Lisp-Entry "pos" #f 61 12 61 15 ("set-pos" "get-pos" "0")}
        {Lisp-Entry "range" #f 62 12 62 17 ("set-range" "get-range" "9" "0" "Range")}
        {Lisp-Entry "line-height" #f 63 12 63 23 ("set-line-height" "get-line-height" "1")}
        {Lisp-Entry "page-height" #f 64 12 64 23 ("set-page-height" "get-page-height" "3")}
        {Lisp-Entry "flat?" #f 65 12 65 17 ("set-flat?" "get-flat?")}
        {Lisp-Entry "style" #f 66 12 66 17 ("set-style" "get-style")}
        {Lisp-Entry "tracking?" #f 69 8 69 17 ()}
        {Lisp-Entry "tracking-start" #f 70 8 70 22 ()}
        {Lisp-Entry "tracking-start-pos" #f 71 8 71 26 ()}
        {Lisp-Entry "autorepeat-pulse" #f 72 8 72 24 ()}
        {Lisp-Entry "print" #f 75 11 75 16 ("range" "pos" "size" "position" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-orientation" #f 86 18 86 33 ("orientation")}
        {Lisp-Entry "set-orientation" #f 90 18 90 33 ("invalidate-view" "set!" "orientation" "neq?" "when" "or")}
        {Lisp-Entry "get-pos" #f 96 18 96 25 ("pos")}
        {Lisp-Entry "set-pos" #f 100 18 100 25 ("redraw-view-only" "set!" "pos" "/=" "when" "min-pos" "max-pos" "min" "max" "new-pos" "let" "redraw?" "p")}
        {Lisp-Entry "min-pos" #f 108 11 108 18 ("range" "get-start")}
        {Lisp-Entry "max-pos" #f 112 11 112 18 ("page-height" "range" "get-end" "-")}
        {Lisp-Entry "get-range" #f 116 18 116 27 ("range")}
        {Lisp-Entry "set-range" #f 120 18 120 27 ("invalidate-view" "set!" "/=" "range" "range=" "not" "when" "rg")}
        {Lisp-Entry "get-line-height" #f 126 18 126 33 ("line-height")}
        {Lisp-Entry "set-line-height" #f 130 18 130 33 ("invalidate-view" "set!" "line-height" "/=" "when" "height")}
        {Lisp-Entry "get-page-height" #f 136 18 136 33 ("page-height")}
        {Lisp-Entry "set-page-height" #f 140 18 140 33 ("invalidate-view" "set!" "page-height" "/=" "when" "height")}
        {Lisp-Entry "set-info" #f 146 18 146 26 ("set-page-height" "Range" "new" "set-range" "page" "max" "min")}
        {Lisp-Entry "get-flat?" #f 151 18 151 27 ("flat?")}
        {Lisp-Entry "set-flat?" #f 155 18 155 27 ("invalidate-view" "set!" "flat?" "neq?" "when" "value")}
        {Lisp-Entry "get-style" #f 161 18 161 27 ("style")}
        {Lisp-Entry "set-style" #f 165 18 165 27 ("invalidate-view" "set!" "style" "neq?" "when" "value")}
        {Lisp-Entry "get-client" #f 176 18 176 28 ("parent")}
        {Lisp-Entry "call-scroll" #f 185 11 185 22 ("on-hscroll" "horz" "on-vscroll" "vert" "orientation" "case" "get-client" "client" "let" "thumb-pos" "action")}
        {Lisp-Entry "line-up" #f 197 11 197 18 ("setup-autorepeat" "line-up" "'line-up" "call-scroll")}
        {Lisp-Entry "line-down" #f 202 11 202 20 ("setup-autorepeat" "line-down" "'line-down" "call-scroll")}
        {Lisp-Entry "page-up" #f 212 11 212 18 ("setup-autorepeat" "page-up" "'page-up" "call-scroll")}
        {Lisp-Entry "page-down" #f 217 11 217 20 ("setup-autorepeat" "page-down" "'page-down" "call-scroll")}
        {Lisp-Entry "get-breadth" #f 227 11 227 22 ("get-height" "horz" "get-width" "vert" "orientation" "case")}
        {Lisp-Entry "get-extent" #f 233 11 233 21 ("get-width" "horz" "get-height" "vert" "orientation" "case")}
        {Lisp-Entry "new-rect" #f 239 11 239 19 ("horz" "Rect" "new" "vert" "orientation" "case" "bottom" "right" "top" "left")}
        {Lisp-Entry "get-place" #f 245 11 245 20 ("get-h" "horz" "get-v" "vert" "orientation" "case" "point")}
        {Lisp-Entry "up-rect" #f 256 11 256 18 ("0" "new-rect" "get-breadth" "b" "let")}
        {Lisp-Entry "down-rect" #f 261 11 261 20 ("-" "0" "new-rect" "get-extent" "e" "get-breadth" "b" "let")}
        {Lisp-Entry "thumb-range" #f 267 11 267 22 ("values" "pos" "+" "thumb-pos" "page-height" "fl/" "1" "min" "*" "fxround" "6" "max" "thumb" "shaft" "let*" "0" ">" "when" "get-start" "range" "get-end" "-" "r" "get-extent" "e" "get-breadth" "b" "let")}
        {Lisp-Entry "thumb-rect" #f 278 11 278 21 ("0" "new-rect" "get-breadth" "b" "end" "start" "receive" "when" "thumb-range" "info" "let")}
        {Lisp-Entry "mouse-down" #f 291 11 291 21 ("page-down" ">=" "page-up" "<=" "end" "start" "receive" "when" "thumb-range" "info" "get-place" "place" "let" "else" "start-tracking" "thumb-rect" "line-down" "down-rect" "line-up" "up-rect" "in-rect?" "cond" "acquire-capture" "pos")}
        {Lisp-Entry "drag-move" #f 305 11 305 20 ("track-thumb" "tracking?" "when" "pos")}
        {Lisp-Entry "drag-up" #f 310 11 310 18 ("end-tracking" "tracking?" "when" "release-capture" "kill-autorepeat" "rest" "pos")}
        {Lisp-Entry "start-tracking" #f 322 11 322 25 ("get-pos" "tracking-start-pos" "get-place" "tracking-start" "tracking?" "set!" "pos")}
        {Lisp-Entry "track-thumb" #f 328 11 328 22 ("tracking-start-pos" "+" "thumb-track" "'thumb-track" "call-scroll" "*" "quotient" "dp" "shaft" "tracking-start" "get-place" "dv" "get-start" "range" "get-end" "-" "r" "get-extent" "e" "get-breadth" "b" "let*" "pos")}
        {Lisp-Entry "end-tracking" #f 338 11 338 23 ("tracking?" "set!")}
        {Lisp-Entry "Flat-Color" #f 347 14 347 24 ()}
        {Lisp-Entry "Background-Color" #f 350 14 350 30 ()}
        {Lisp-Entry "get-flat-color" #f 354 11 354 25 ("flat-color" "set!" "Flat-Color" "unless")}
        {Lisp-Entry "flat-color" #f 360 11 360 21 ("166" "200" "176" "blue:" "188" "green:" "194" "red:" "Light" "name:" "Color" "white?" "if")}
        {Lisp-Entry "get-background-color" #f 366 11 366 31 ("background-color" "set!" "Background-Color" "unless")}
        {Lisp-Entry "background-color" #f 372 11 372 27 ("227" "blue:" "240" "green:" "242" "red:" "white?" "if" "Light" "name:" "Color" "color" "let")}
        {Lisp-Entry "flat-look?" #f 379 11 379 21 ("flat?" "else" "document/scrollbar/flat?" "'document/scrollbar/flat?" "document" "tool/scrollbar/flat?" "'tool/scrollbar/flat?" "get-look" "get-element" "tool" "style" "case")}
        {Lisp-Entry "draw" #f 386 11 386 15 ("7" "9" "4" "Dark" "6" "3" "line" "Light" "Pen" "set-pen" "8" "quotient" "get-top" "+" "v" "rect-height" "height" "let*" "Medium" "-" "inflate-rect" "inflated" "2" "1" "width" "rectangle" "'rectangle" "edges:" "outer:" "raised" "'raised" "inner:" "draw-edge" "draw-raised" "Entry-Border" "name:" "Color" "frame-rect" "when" "draw-scroll-bar" "else" "right" "'right" "down" "'down" "left" "'left" "horz" "up" "'up" "vert" "orientation" "case" "draw-button" "cond" "get-background-color" "cycle-debug-color!" "*debug-paint*" "if" "fill-rect" "flat-look?" "flat?" "thumb-rect" "down-rect" "up-rect" "get-bounds" "bounds" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-button" #f 421 11 421 22 ("4" "get-top" "3" "get-left" "+" "draw-arrow-tip" "dv" "0" "1" "horz" "'horz" "orientation" "eq?" "if" "dh" "Black" "Pen" "set-pen" "Medium" "name:" "Color" "fill-rect" "-1" "inflate-rect" "inflated" "let" "draw-raised" "direction" "rect" "surface")}
        {Lisp-Entry "setup-autorepeat" #f 436 11 436 27 ("autorepeat-delay" "delay:" "pulse-action" "function" "autorepeat-period" "Pulse" "new" "set!" "autorepeat-pulse" "not" "when" "action")}
        {Lisp-Entry "kill-autorepeat" #f 441 11 441 26 ("set!" "close" "autorepeat-pulse" "when")}
        {Lisp-Entry "pulse-action" #f 452 11 452 23 ("page-down" "page-up" "line-down" "line-up" "case" "action")}
        {Lisp-Entry "get-class-image" #f 465 16 465 31 ("Bitmap-Resource")}}}})
"Scroller-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Scroller-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Scroller-View" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "scrollbar-size" #f 47 19 47 33 ("13")}
      {Lisp-Entry "Scroller-View" #f 51 7 51 20 ("Container")
        {Lisp-Entry "client" #f 54 12 54 18 ("set-client" "get-client")}
        {Lisp-Entry "vscroll?" #f 55 12 55 20 ("set-vscroll?" "get-vscroll?")}
        {Lisp-Entry "hscroll?" #f 56 12 56 20 ("set-hscroll?" "get-hscroll?")}
        {Lisp-Entry "flat?" #f 57 12 57 17 ("set-flat?" "get-flat?")}
        {Lisp-Entry "style" #f 58 12 58 17 ("set-style" "get-style")}
        {Lisp-Entry "vscroll" #f 61 8 61 15 ()}
        {Lisp-Entry "hscroll" #f 62 8 62 15 ()}
        {Lisp-Entry "default-name" #f 65 11 65 23 ("scroller" "'scroller")}
        {Lisp-Entry "finish" #f 69 11 69 17 ("get-scroll-client" "set-client" "get-content" "content" "let" "client" "not" "when" "nextmethod" "rest")}
        {Lisp-Entry "get-client" #f 81 18 81 28 ("client")}
        {Lisp-Entry "set-client" #f 85 18 85 28 ("layout-scrollee" "self" "set-scroller" "invalidate-layout" "set!" "client" "neq?" "when" "clt")}
        {Lisp-Entry "inner?" #f 99 11 99 17 ("hscroll" "vscroll" "eq?" "nextmethod" "or" "view")}
        {Lisp-Entry "content-inner?" #f 105 11 105 25 ("view")}
        {Lisp-Entry "size-change" #f 114 11 114 22 ("layout-scrollee-patch" "layout-scrollee" "get-content" "get-client" "eq?" "client" "and" "when" "nextmethod" "size")}
        {Lisp-Entry "layout" #f 128 11 128 17 ("hscroll-size" "hscroll-position" "hscroll" "vscroll-size" "vscroll-position" "vscroll" "layout-scrollee" "client" "content-size" "set-size" "content-position" "set-position" "when" "'content" "find-child" "content" "get-size" "size" "let")}
        {Lisp-Entry "content-position" #f 144 11 144 27 ("0" "Point" "size")}
        {Lisp-Entry "content-size" #f 148 11 148 23 ("hscroll" "get-height" "0" "scrollbar-size" "vscroll" "if" "get-width" "-" "Dimension" "new" "size")}
        {Lisp-Entry "vscroll-position" #f 154 11 154 27 ("0" "scrollbar-size" "get-width" "-" "Point" "new" "size")}
        {Lisp-Entry "vscroll-size" #f 158 11 158 23 ("0" "hscroll" "if" "get-height" "-" "scrollbar-size" "Dimension" "new" "size")}
        {Lisp-Entry "hscroll-position" #f 162 11 162 27 ("scrollbar-size" "get-height" "-" "0" "Point" "new" "size")}
        {Lisp-Entry "hscroll-size" #f 166 11 166 23 ("0" "scrollbar-size" "vscroll" "if" "get-width" "-" "Dimension" "new" "size")}
        {Lisp-Entry "set-scroll-pos" #f 175 11 175 25 ("hscroll" "horz" "set-pos" "vscroll" "when" "vert" "case" "redraw?" "pos" "part")}
        {Lisp-Entry "set-scroll-info" #f 181 11 181 26 ("hscroll" "horz" "set-info" "vscroll" "when" "vert" "case" "page" "max" "min" "part")}
        {Lisp-Entry "on-vscroll" #f 187 11 187 21 ("get-scrolled-position" "get-v" "thumb-track" "page-down" "get-page-size" "page-up" "-" "line-down" "get-line-size" "0" "Point" "new" "scroll" "line-up" "case" "client" "when" "orientation" "thumb-pos" "code")}
        {Lisp-Entry "on-hscroll" #f 197 11 197 21 ("get-scrolled-position" "get-h" "thumb-track" "page-down" "get-page-size" "page-up" "-" "line-down" "0" "get-line-size" "Point" "new" "scroll" "line-up" "case" "client" "when" "orientation" "thumb-pos" "code")}
        {Lisp-Entry "get-vscroll" #f 212 18 212 29 ("vscroll")}
        {Lisp-Entry "get-vscroll?" #f 216 18 216 30 ("vscroll?")}
        {Lisp-Entry "set-vscroll?" #f 220 18 220 30 ("vscroll?" "set!" "flag")}
        {Lisp-Entry "set-vscroll-needed?" #f 224 18 224 37 ("layout-view" "close" "style" "style:" "flat?" "flat?:" "vert" "'vert" "orientation:" "self" "parent:" "Scrollbar" "new" "set!" "not" "if" "vscroll" "boolean" "neq?" "vscroll?" "and" "when" "flag")}
        {Lisp-Entry "get-hscroll" #f 233 18 233 29 ("hscroll")}
        {Lisp-Entry "get-hscroll?" #f 237 18 237 30 ("hscroll?")}
        {Lisp-Entry "set-hscroll?" #f 241 18 241 30 ("hscroll?" "set!" "flag")}
        {Lisp-Entry "set-hscroll-needed?" #f 245 18 245 37 ("layout-view" "close" "style" "style:" "flat?" "flat?:" "horz" "'horz" "orientation:" "self" "parent:" "Scrollbar" "new" "set!" "not" "if" "hscroll" "boolean" "neq?" "hscroll?" "and" "when" "flag")}
        {Lisp-Entry "get-flat?" #f 254 18 254 27 ("flat?")}
        {Lisp-Entry "set-flat?" #f 258 18 258 27 ("flat?" "set!" "value")}
        {Lisp-Entry "get-style" #f 262 18 262 27 ("style")}
        {Lisp-Entry "set-style" #f 266 18 266 27 ("style" "set!" "value")}
        {Lisp-Entry "get-class-image" #f 275 16 275 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-row-instance" #f 279 11 279 27 ("nextmethod" "else" "Boolean-Row" "new" "flat?" "field-name" "case" "property")}}}})
"Search-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Search-Manager.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Search-Manager" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Search-Manager" #f 50 7 50 21 ("159" "848" "5" "4" "Point" "position:" "tab" "name:" "169" "857" "Dimension" "size:" "View")
        {Lisp-Entry "external-name" #f 58 16 58 29 ("search-manager" "'search-manager" "rest")}
        {Lisp-Entry "host-icon" #f 67 16 67 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-position" #f 71 16 71 29 ("220" "300" "Point")}
        {Lisp-Entry "host-size" #f 75 16 75 25 ("169" "857" "Dimension")}
        {Lisp-Entry "host-title" #f 79 16 79 26 ()}
        {Lisp-Entry "install" #f 88 11 88 18 ("load-session" "nextmethod" "rest")}
        {Lisp-Entry "load-session" #f 98 11 98 23 ("get-children" "get-content" "first-child" "set-session-properties" "when" "find-component" "sheet" "get-name" "name" "config" "function" "for-each" "set-selection-name" "'tab" "locate" "tab" "get-active" "active" "search-manager" "tools" "get-preferences" "pref" "let*")}
        {Lisp-Entry "confirm-close" #f 111 11 111 24 ("save-session" "rest")}
        {Lisp-Entry "save-session" #f 115 11 115 23 ("get-session-properties" "Search-Manager" "'Search-Manager" "set-property" "Opened-Windows" "'Opened-Windows" "properties" "push-property" "get-size" "size:" "get-position" "position:" "external-name" "list" "info" "let")}
        {Lisp-Entry "get-session-properties" #f 125 11 125 33 ("get-children" "get-content" "first-child" "get-session-properties" "get-name" "sheet" "function" "map" "get-selection-name" "cons" "'tab" "locate" "tab" "let")}
        {Lisp-Entry "guest-actions" #f 138 11 138 24 ("nextmethod" "search-manager" "'search-manager" "find-actions" "cons")}
        {Lisp-Entry "resize" #f 148 11 148 17 ("tab" "'tab" "locate" "size-figure" "dv" "dh")}
        {Lisp-Entry "on-whole-words" #f 152 11 152 25 ("toggle-whole-words" "evt")}
        {Lisp-Entry "on-ignore-case" #f 156 11 156 25 ("toggle-ignore-case" "evt")}
        {Lisp-Entry "on-preserve-case" #f 160 11 160 27 ("toggle-preserve-case" "evt")}
        {Lisp-Entry "on-play-recording" #f 164 11 164 28 ("toggle-play-recording" "evt")}
        {Lisp-Entry "toggle-whole-words" #f 168 11 168 29 ("get-checked?" "not" "set-checked?" "whole-words?" "'whole-words?" "get-search" "locate" "checkbox" "let")}
        {Lisp-Entry "toggle-ignore-case" #f 173 11 173 29 ("get-checked?" "not" "set-checked?" "ignore-case?" "'ignore-case?" "get-search" "locate" "checkbox" "let")}
        {Lisp-Entry "toggle-preserve-case" #f 178 11 178 31 ("get-checked?" "not" "set-checked?" "preserve-case?" "'preserve-case?" "get-search" "locate" "checkbox" "let")}
        {Lisp-Entry "toggle-play-recording" #f 183 11 183 32 ("get-checked?" "not" "set-checked?" "play-recording?" "'play-recording?" "get-search" "locate" "checkbox" "let")}
        {Lisp-Entry "get-search" #f 193 18 193 28 ("get-sheet-search" "selected-sheet" "sheet" "'tab" "locate" "tab" "let*")}
        {Lisp-Entry "get-search-named" #f 199 18 199 34 ("get-sheet-search" "when" "child" "sheet" "'tab" "locate" "tab" "let*" "name")}
        {Lisp-Entry "get-searches" #f 206 18 206 30 ("get-children" "get-sheet-search" "map" "'tab" "locate" "tab" "let")}
        {Lisp-Entry "get-sheet-search" #f 211 11 211 27 ("get-content" "first-child" "sheet")}
        {Lisp-Entry "current-history-item" #f 220 11 220 31 ("get-search" "current-history-item")}
        {Lisp-Entry "install-history-item" #f 224 21 224 41 ("get-search" "install-history-item" "item")}
        {Lisp-Entry "edit-definitions" #f 233 18 233 34 ("tab" "'tab" "locate" "set-selection-name" "projects" "'projects" "get-search-named" "search-definitions" "definitions" "name")}
        {Lisp-Entry "edit-references" #f 238 18 238 33 ("tab" "'tab" "locate" "set-selection-name" "projects" "'projects" "get-search-named" "search-references" "context" "references" "name")}}}})
"Search-Manager-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Search-Manager-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Search-Manager-Actions" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Search-Manager-Actions" #f 46 7 46 29 ("on-play-recording" "play-recording" "on-preserve-case" "preserve-case" "on-ignore-case" "ignore-case" ":alt" "Shortcut" "shortcut:" "on-whole-words" ":guest" "Event-Handler" "action-handler:" "whole-words" "name:" "Actions")}}})
"Search-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Search-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Search-Menu" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Search-Menu" #f 46 7 46 18 ("command-shell" "command-shell-separator" "replace-all-selected" "replace-all" "replace&find-forward" "replace" "replace-separator" "find-backward" "find-forward" "find-separator" "pop-results" "edit-current" "edit-previous" "edit-next" "edit-separator" "find-in-projects" "find-in-directories" "find-in-text" "Bitmap-Resource" "icon:" "application" "Action" "action:" "find" "name:" "title:" "Menu")}}})
"Search-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Search-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Search-Preferences" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Search-Preferences" #f 46 7 46 25 ("projects" "directories" "text" "name:" "Bitmap-Resource" "icon:" "title:" "Tool-Preferences")
        {Lisp-Entry "active" #f 49 12 49 18 ("generate")}
        {Lisp-Entry "get-addable-base" #f 64 11 64 27 ("Search-View-Preferences")}
        {Lisp-Entry "get-addable-details" #f 68 11 68 30 ("expression?" "play-recording?" "preserve-case?" "ignore-case?" "100" "whole-words?" "targets" "150" "name-info")}}}})
"Search-Results"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Search-Results.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Search-Results" #f 37 9 37 38 ("Stack-Combo" "register-autoclass" "jazz")
      {Lisp-Entry "Search-Results" #f 53 7 53 21 ("100" "type" "337" "width:" "title:" "name" "on-context-menu" ":form" "Event-Handler" "context-menu-handler:" "multiple-selection?:" "location" "filled-column:" "results" "header" "content" "scroller" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip?:" "22" "edit-as-jazz-text" "tail" "location:" "edit-as-jazz-text-separator" "stack" "166" "blue:" "188" "green:" "200" "red:" "Medium" "Color" "border-color:" "2" "Rect" "border-insets:" "21" "120" "0" "4" "Dimension" "size:" "tooltip-text:" "clear" "tools" "name:" "Navigable-Results")
        {Lisp-Entry "mode" #f 56 8 56 12 ()}
        {Lisp-Entry "context" #f 57 8 57 15 ()}
        {Lisp-Entry "references-target" #f 58 8 58 25 ()}
        {Lisp-Entry "current-results" #f 59 8 59 23 ()}
        {Lisp-Entry "results-stack" #f 60 8 60 21 ()}
        {Lisp-Entry "external-name" #f 88 16 88 29 ("search-results" "'search-results" "rest")}
        {Lisp-Entry "form-model" #f 92 11 92 21 ("nextmethod" "else" "Search-Results-Tree" "results" "get-name" "case" "form")}
        {Lisp-Entry "host-icon" #f 103 16 103 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 107 16 107 26 ()}
        {Lisp-Entry "get-mode" #f 116 18 116 26 ("mode")}
        {Lisp-Entry "set-mode" #f 120 18 120 26 ("mode" "set!" "value")}
        {Lisp-Entry "get-context" #f 124 18 124 29 ("context")}
        {Lisp-Entry "set-context" #f 128 18 128 29 ("context" "set!" "value")}
        {Lisp-Entry "get-references-target" #f 132 18 132 39 ("references-target")}
        {Lisp-Entry "set-references-target" #f 136 18 136 39 ("references-target" "set!" "value")}
        {Lisp-Entry "get-results-stack" #f 140 18 140 35 ("results-stack")}
        {Lisp-Entry "on-context-menu" #f 149 11 149 26 ("track-popup-menu" "function" "with-context-click" "when" "get-context-menu" "menu" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "get-context-menu" #f 160 11 160 27 ("Found-Menu" "new")}
        {Lisp-Entry "clear-results" #f 164 11 164 24 ("pop-results" "bell" "1" "results-stack" "length" "<=" "if")}
        {Lisp-Entry "edit-selection" #f 175 11 175 25 ("with-locked-update" "else" "1" "0" "length" "case" "get-stage" "first-view" "focus-host" "edit-item" "item" "function" "for-each" "edit" "define" "get-tree" "get-selection" "selection" "let" "forward?")}
        {Lisp-Entry "edit-item" #f 191 18 191 27 ("edit-document" "get-tree" "get-row" "get-user-data" "definition" "let" "focus?" "forward?" "item")}
        {Lisp-Entry "edit-document" #f 201 11 201 24 ("Moniker" "values" "set-visible?" "bring-to-front" "select-expr-backward" "select-expr" "Cell" "new" "set-caret" "number?" "Text-View" "when" "get-guest" "guest" "return-new?:" "visible?:" "class:" "edit-document" "new?" "frame" "receive" "Jazz-Text-View" "class" "edit-as-jazz-text" "'edit-as-jazz-text" "locate" "get-selected?" "jazz?" "get-application" "appl" "let*" "targets" "results" "source" "let" "target" "entry" "bind" "car" "pair?" "and" "edit" "else" "activate-focus?:" "references-target" "edit-reference" "references" "mode" "case" "Catalog-Entry" "is?" "if" "function" ":wait" "with-cursor" "focus?" "forward?" "info")}
        {Lisp-Entry "item-icon" #f 245 29 245 38 ("else" "Method-Entry" "Constructor-Entry" "Variable-Entry" "Instance-Init-Entry" "Static-Init-Entry" "Interface-Entry" "Bitmap-Resource" "Class-Entry" "is?" "cond" "info")}
        {Lisp-Entry "item-moniker" #f 256 29 256 41 ("cadr" "Moniker" "car" "get-moniker" "Catalog-Entry" "is?" "if" "info")}
        {Lisp-Entry "item-location" #f 264 29 264 42 ("present-location" "not" "if" "item-moniker" "moniker" "let" "info")}
        {Lisp-Entry "item-type" #f 271 29 271 38 ("else" "Method-Entry" "Constructor-Entry" "Variable-Entry" "Instance-Init-Entry" "Static-Init-Entry" "Interface-Entry" "Class-Entry" "is?" "cond" "info")}
        {Lisp-Entry "present-info" #f 282 18 282 30 ("->string" "present-name" "target" "pos" "moniker" "bind" "Moniker" "car" "present" "Catalog-Entry" "is?" "if" "info")}
        {Lisp-Entry "add-results" #f 291 18 291 29 ("update-stack-combo" "update-results" "cons" "results-stack" "list" "current-results" "set!" "preserve-current-selection" "target" "targets" "results")}
        {Lisp-Entry "pop-results" #f 299 11 299 22 ("update-stack-combo" "update-results" "update-search-targets" "car" "current-results" "cdr" "results-stack" "set!")}
        {Lisp-Entry "set-results" #f 307 11 307 22 ("update-stack-combo" "update-results" "update-search-targets" "current-results" "set!" "preserve-current-selection" "info")}
        {Lisp-Entry "preserve-current-selection" #f 315 11 315 37 ("get-tree" "get-selection" "set-fourth!" "current-results" "when")}
        {Lisp-Entry "update-search-targets" #f 320 11 320 32 ("set-search-targets" "end-search-edition" "get-application" "appl" "let" "current-results" "target" "targets" "results" "bind")}
        {Lisp-Entry "update-stack-combo" #f 327 11 327 29 ("current-results" "set-value" "results-stack" "first" "join" "list" "target" "targets" "results" "bind" "info" "function" "map" "set-choices" "stack" "'stack" "locate" "combo" "let")}
        {Lisp-Entry "update-results" #f 337 11 337 25 ("update-search-actions" "Search-Results" "select-palette" "with-locked-update" "list" "either" "set-selection" "0" "get-visible-count" ">" "and" "when" "present-info" "key:" "string<?" "sort" "target:" "add-item" "info" "for-each" "remove-every-row" "get-node-column" "set-toplevel-controls?" "else" "references" "mode" "case" "flag" "function" "with-update-locked" "get-tree" "tree" "get-application" "appl" "let" "current-results" "selection" "target" "targets" "results" "bind")}
        {Lisp-Entry "add-item" #f 360 11 360 19 ("user-data:" "list" "children:" "state:" "add-row" "cons" "user-data" "item-type" "type" "item-location" "Tree-Label" "location" "item-icon" "image:" "present-info" "title:" "Tree-Node" "new" "node" "collapsed" "'collapsed" "dynamic" "'dynamic" "references" "'references" "mode" "eq?" "if" "state" "get-tree" "tree" "let" "target" "target:" "father" "father:" "info")}
        {Lisp-Entry "update-tree-row" #f 370 21 370 36 ("present-info" "key:" "string<?" "sort" "target:" "father:" "add-item" "info" "function" "for-each" "context" "context:" "get-references" "definitions" "get-cataloguer" "cataloguer" "get-application" "appl" "get-name" "name" "let*" "get-user-data" "target" "entry" "bind" "references" "mode" "case" "row")}
        {Lisp-Entry "selected-files" #f 383 11 383 25 ("File" "car" "Pair" "is?" "and" "when" "get-row" "get-user-data" "info" "let" "rank" "function" "collect" "get-selection" "selection" "results" "'results" "locate" "tree" "let*")}}
      {Lisp-Entry "Stack-Combo" #f 398 7 398 18 ("Combo-Box")
        {Lisp-Entry "content-change" #f 401 11 401 25 ("get-value" "set-results" "origin")}}
      {Lisp-Entry "Found-Menu" #f 414 7 414 17 ("on-copy" ":focus" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "copy" "name:" "Context-Menu")}}})
"Search-Results-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Search-Results-Tree.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Search-Results-Tree" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Search-Results-Tree" #f 46 7 46 26 ("Tree-View")
        {Lisp-Entry "focus-actions" #f 54 11 54 24 ("nextmethod" "search-results-tree" "'search-results-tree" "find-actions" "cons")}
        {Lisp-Entry "get-search" #f 64 11 64 21 ("Search-Results" "find-ascendant")}
        {Lisp-Entry "return-press" #f 73 11 73 23 ("get-search" "edit-selection" "key")}
        {Lisp-Entry "copy-selection" #f 77 11 77 25 ("get-selection" "get-row" "get-user-data" "get-search" "present-info" "n" "function" "map" "format" "set-clipboard-text")}
        {Lisp-Entry "select-all" #f 85 11 85 21 ("rest")}
        {Lisp-Entry "on-edit-definitions" #f 89 11 89 30 ("get-search" "edit-selection" "evt")}
        {Lisp-Entry "update-row" #f 93 11 93 21 ("get-search" "update-tree-row" "row")}}}})
"Search-Results-Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Search-Results-Tree-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Search-Results-Tree-Actions" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Search-Results-Tree-Actions" #f 46 7 46 34 ("F12" "on-edit-definitions" "edit-definitions" "Return" ":control" "Shortcut" "shortcut:" "on-action" ":focus" "Event-Handler" "action-handler:" "action" "name:" "Actions")}}})
"Search-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Search-Tree.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Search-Tree" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Search-Tree" #f 47 7 47 18 ("kind" "275" "location" "toplevel-controls?:" "100" "width:" "title:" "name:" "on-selection-change" ":self" "Event-Handler" "selection-handler:" "can-select-empty?:" "multiple-selection?:" "row" "selection-mode:" ":icons" "portfolio:" "component" "filled-column:" "Details-Tree")
        {Lisp-Entry "target" #f 50 12 50 18 ("set-target" "get-target")}
        {Lisp-Entry "get-target" #f 65 18 65 28 ("target")}
        {Lisp-Entry "set-target" #f 69 18 69 28 ("acquire-focus" "set-single-selection" "0" "visible-count" ">" "when" "update" "target" "set!" "value")}
        {Lisp-Entry "selection-changed" #f 82 11 82 28 ("focus?" "force-parent?" "origin" "old" "component")}
        {Lisp-Entry "on-designer" #f 91 11 91 22 ("update" ":property-change" ":child-remove" ":child-add" "get-kind" "case" "evt")}
        {Lisp-Entry "update" #f 103 11 103 17 ("get-presentation" "localize" "key:" "search-components" "<" "sort" "insert-component" "component" "for-each" "target" "client" "and" "when" "remove-every-row" "function" "with-update-locked" "rest")}
        {Lisp-Entry "search-components" #f 113 11 113 28 ("cons" "set!" "search-component" "indexable?" "and" "when" "level" "component" "function" "client" "for-each-descendant" "list" "let" "target")}
        {Lisp-Entry "insert-component" #f 122 11 122 27 ("user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "class-of" "get-class-presentation" "kind" "present-location" "location" "get-component-image" "image" "get-presentation" "title" "let" "recursive?" "father" "component")}}}})
"Search-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Search-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Search-View" #f 37 9 37 35 ("Search-Targets" "register-autoclass" "jazz")
      {Lisp-Entry "Search-View" #f 52 7 52 18 ("200" "388" "visible?:" "expression?" "483" "play-recording?" "375" "preserve-case?" "118" "ignore-case?" "18" "100" "114" "whole-words?" "173" "display-images?:" "toplevel-controls?:" "176" "width:" "15" "default-row-height:" "Label" "Font" "font:" "targets" "fill" "layout-type:" "vscroll?:" "style:" "edge" "border-type:" "91" "373" "370" "targets-border" "on-splitter-move" "move-handler:" "6" "362" "vertical" "97" "350" "8" "10" "domain" "default?:" "on-search" ":form" "Event-Handler" "action-handler:" "24" "80" "Dimension" "size:" "14" "755" "Point" "position:" "title:" "search" "name:" "Layout-View")
        {Lisp-Entry "next-radio" #f 76 18 76 28 ("length" "1" "+" "modulo" "element" "set-search-domain" "when" "find" "pos" "get-search-domains" "domains" "get-search-domain" "domain" "let*")}
        {Lisp-Entry "next-tab" #f 84 18 84 26 ("set-selection" "1" "+" "modulo" "new-selection" "get-selection" "old-selection" "get-children" "length" "max-selection" "get-manager" "manager" "let*")}
        {Lisp-Entry "finish" #f 97 11 97 17 ("get-columns" "1" "set-title-vertical-offset" "column" "function" "for-each" "targets" "'targets" "locate" "tree" "let" "nextmethod" "rest")}
        {Lisp-Entry "get-session-properties" #f 110 26 110 48 ("get-expression?" "expression?" "'expression?" "get-play-recording?" "play-recording?" "'play-recording?" "get-preserve-case?" "preserve-case?" "'preserve-case?" "get-ignore-case?" "ignore-case?" "'ignore-case?" "get-whole-words?" "whole-words?" "'whole-words?" "get-search-targets" "targets" "'targets" "get-search-domain" "domain" "'domain" "list")}
        {Lisp-Entry "set-session-properties" #f 121 26 121 48 ("get-expression?" "set-expression?" "get-play-recording?" "set-play-recording?" "get-preserve-case?" "set-preserve-case?" "get-ignore-case?" "set-ignore-case?" "get-whole-words?" "set-whole-words?" "get-targets" "set-search-targets" "config")}
        {Lisp-Entry "get-manager" #f 135 11 135 22 ("3" "child")}
        {Lisp-Entry "get-results" #f 144 21 144 32 ("get-application" "get-search-results")}
        {Lisp-Entry "get-targets-tree" #f 148 18 148 34 ("targets" "'targets" "locate")}
        {Lisp-Entry "get-search-targets" #f 152 18 152 36 ("get-output" "naturals" "list" "put" "empty-string?" "and" "unless" "1" "repl" "0" "Cell" "get-cell-data" "get-title" "find" "let" "row" "function" "for-each" "in-edition?" "if" "List-Factory" "new" "fact" "get-visible-count" "height" "targets" "'targets" "locate" "tree" "let*")}
        {Lisp-Entry "set-search-targets" #f 168 18 168 36 ("0" "naturals" "invalidate-cell" "set-cell-title" "Cell" "new" "cell" "col" "target" "row" "line" "for-each" "function" "with-update-locked" "get-visible-count" "height" "get-columns-count" "width" "ensure-visible-count" "length" "count" "'targets" "locate" "tree" "let" "targets")}
        {Lisp-Entry "get-constituent-test" #f 194 29 194 49 ("word-constituent?")}
        {Lisp-Entry "get-find-targets" #f 198 18 198 34 ("get-search-targets" "constituent-test:" "ignore-case?:" "whole-words?:" "first" "make-search-context" "target" "lambda" "map" "get-constituent-test" "or" "get-ignore-case?" "ignore-case?" "get-whole-words?" "whole-words?" "let" "constituent-test")}
        {Lisp-Entry "get-replace-targets" #f 210 11 210 30 ("get-search-targets" "second" "map")}
        {Lisp-Entry "get-search-domain" #f 214 18 214 35 ("get-search-domains" "get-selected?" "and" "when" "find-component" "radio" "name" "function" "find-if" "domain" "'domain" "locate" "get-content" "group" "let")}
        {Lisp-Entry "set-search-domain" #f 223 18 223 35 ("get-children" "eq?" "set-selected?" "Radio-Button" "is?" "child" "function" "for-each" "when" "find-component" "radio" "'domain" "locate" "get-content" "group" "let*" "domain")}
        {Lisp-Entry "get-whole-words?" #f 233 18 233 34 ("whole-words?" "'whole-words?" "locate" "get-checked?")}
        {Lisp-Entry "set-whole-words?" #f 237 18 237 34 ("whole-words?" "'whole-words?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-ignore-case?" #f 241 18 241 34 ("ignore-case?" "'ignore-case?" "locate" "get-checked?")}
        {Lisp-Entry "set-ignore-case?" #f 245 18 245 34 ("ignore-case?" "'ignore-case?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-preserve-case?" #f 249 18 249 36 ("preserve-case?" "'preserve-case?" "locate" "get-checked?")}
        {Lisp-Entry "set-preserve-case?" #f 253 18 253 36 ("preserve-case?" "'preserve-case?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-play-recording?" #f 257 18 257 37 ("play-recording?" "'play-recording?" "locate" "get-checked?")}
        {Lisp-Entry "set-play-recording?" #f 261 18 261 37 ("play-recording?" "'play-recording?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-expression?" #f 265 18 265 33 ("expression?" "'expression?" "locate" "get-checked?")}
        {Lisp-Entry "set-expression?" #f 269 18 269 33 ("expression?" "'expression?" "locate" "set-checked?" "flag")}
        {Lisp-Entry "get-search-domains" #f 278 26 278 44 ()}
        {Lisp-Entry "get-active-window-domain" #f 282 26 282 50 ()}
        {Lisp-Entry "on-search" #f 291 18 291 27 ("search-targets" "bell" "null?" "if" "get-find-targets" "find-targets" "end-edition" "'targets" "locate" "targets" "let" "get-player" "hide" "evt")}
        {Lisp-Entry "search-targets" #f 301 29 301 43 ("targets")}
        {Lisp-Entry "resize" #f 305 11 305 17 ("expression?" "'expression?" "play-recording?" "'play-recording?" "preserve-case?" "'preserve-case?" "ignore-case?" "'ignore-case?" "whole-words?" "'whole-words?" "targets-border" "'targets-border" "domain" "'domain" "size-figure" "0" "search" "'search" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-splitter-move" #f 317 11 317 27 ("update-view" "-" "targets-border" "'targets-border" "move-figure" "0" "domain" "'domain" "locate" "size-figure" "delta:" "get-property" "delta" "let" "evt")}
        {Lisp-Entry "on-return-press" #f 325 18 325 33 ("on-search" "evt")}
        {Lisp-Entry "on-find-forward" #f 329 18 329 33 ("bell" "follow-search-results?" "find-forward" "and" "unless" "get-search-domain" "domain" "get-target-text" "target" "get-find-targets" "find" "let" "evt")}
        {Lisp-Entry "on-find-backward" #f 337 18 337 34 ("bell" "follow-search-results?" "find-backward" "and" "unless" "get-search-domain" "domain" "get-target-text" "target" "get-find-targets" "find" "let" "evt")}
        {Lisp-Entry "on-replace" #f 345 18 345 28 ("bell" "replace" "and" "unless" "get-target-text" "target" "get-expression?" "expression?" "get-play-recording?" "play?" "get-preserve-case?" "case?" "get-ignore-case?" "ignore-case?" "get-application" "appl" "get-replace-targets" "repl" "get-find-targets" "find" "let*" "evt")}
        {Lisp-Entry "on-replace&find-forward" #f 358 18 358 41 ("bell" "replace&find-forward" "and" "unless" "get-target-text" "target" "follow-search-results?" "next?" "get-expression?" "expression?" "get-play-recording?" "play?" "get-preserve-case?" "case?" "get-ignore-case?" "ignore-case?" "get-application" "appl" "get-search-domain" "domain" "get-replace-targets" "repl" "get-find-targets" "find" "let*" "evt")}
        {Lisp-Entry "on-replace-all" #f 373 18 373 32 ("replace-all" "bell" "not" "if" "get-target-text" "target" "get-expression?" "expression?" "get-play-recording?" "play?" "get-preserve-case?" "case?" "get-ignore-case?" "ignore-case?" "get-application" "appl" "get-replace-targets" "repl" "get-find-targets" "find" "let*" "evt")}
        {Lisp-Entry "on-replace-all-selected" #f 387 18 387 41 ("format-plural" "format" "close" "increase!" "save" "get-modified?" "and" "when" "replace-all" "get-name" "user-message" "get-controller" "get-moniker" "moniker" "get-text-view" "target" "get-guest" "guest" "edit-item" "new?" "frame" "receive" "item" "function" "for-each" "0" "modified-count" "get-selection" "selection" "'results" "locate" "tree" "get-results" "results" "get-expression?" "expression?" "get-play-recording?" "play?" "get-preserve-case?" "case?" "get-ignore-case?" "ignore-case?" "get-application" "appl" "get-replace-targets" "repl" "get-find-targets" "find" "yes" "'yes" "auto-save/close?" "let*" "throw-cancel" "cancel" "'cancel" "eq?" "if" "confirmation" "'confirmation" "type:" "message-box" "code" "let" "evt")}
        {Lisp-Entry "get-target-text" #f 421 11 421 26 ("get-text-view" "Document" "get-guest" "guest" "Frame-Host" "is?" "when" "get-stage" "first-view" "frame" "let")}
        {Lisp-Entry "follow-search-results?" #f 429 11 429 33 ("get-active-window-domain" "neq?" "not" "or" "domain")}
        {Lisp-Entry "get-search-reporter" #f 438 21 438 40 ("show" "setup-search-reporter" "register-activity" "reporter" "get-activity-manager" "manager" "let*" "count")}
        {Lisp-Entry "setup-search-reporter" #f 446 29 446 50 ("count" "reporter")}
        {Lisp-Entry "determine-case" #f 455 11 455 25 ("capitalized" "'capitalized" "upper-case" "'upper-case" "upper-case?" "1" "cardinality" "=" "lower-case" "'lower-case" "0" "element" "lower-case?" "empty-string?" "or" "if" "str")}
        {Lisp-Entry "convert-case" #f 463 11 463 23 ("capitalize" "capitalized" "upcase" "upper-case" "downcase" "lower-case" "case" "cs" "str")}
        {Lisp-Entry "replace" #f 470 11 470 18 ("get-application" "get-recorder" "play-current-recording" "acquire-focus" "determine-case" "convert-case" "insert-string" "not" "element" "repl" "let" "when" "nu=?" "ci=?" "test:" "get-target" "context" "function" "key:" "find" "0" "if" "rank" "get-selected-string" "str" "let*" "expression?" "play?" "case?" "ignore-case?" "repl-list" "find-list" "target")}
        {Lisp-Entry "replace&find-forward" #f 484 11 484 31 ("find-forward" "replace" "next?" "expression?" "play?" "case?" "ignore-case?" "repl" "find" "target")}
        {Lisp-Entry "replace-all" #f 489 11 489 22 ("find-forward" "while" "replace" "expression?" "play?" "case?" "ignore-case?" "repl" "find" "target")}
        {Lisp-Entry "find-forward" #f 495 21 495 33 ("get-results" "edit-next" "essay" "select-next" "either" "next?" "targets" "target")}
        {Lisp-Entry "find-backward" #f 500 21 500 34 ("get-results" "edit-previous" "essay" "select-previous" "either" "previous?" "targets" "target")}
        {Lisp-Entry "search-in-file" #f 510 11 510 25 ("list" "put" "search-file" "info" "let" "step-it" "get-name" "user-message" "when" "cancel-requested?" "and" "unless" "reporter" "factory" "expression?" "file" "targets")}
        {Lisp-Entry "search-in-zip" #f 520 11 520 24 ("list" "put" "search-content" "info" "String" "read-content" "coerce" "content" "Zipped" "zipped" "let*" "step-it" "user-message" "cancel-requested?" "and" "unless" "ci=?" "test:" "member?" "when" "extract-extension" "extension" "let" "size" "filename" "function" "iterate-files" "Unzip-File" "new" "unzip" "with-closed" "reporter" "factory" "expression?" "extensions" "file" "targets")}
        {Lisp-Entry "search-in-directories" #f 537 21 537 42 ("search-in-directory" "directory" "function" "for-each" "reporter" "factory" "expression?" "extensions" "directories" "targets")}
        {Lisp-Entry "search-in-directory" #f 543 21 543 40 ("ignored-directories:" "search-in-zip" "search-in-file" "512000" "get-size" "<=" "ci=?" "test:" "member?" "not" "and" "cond" "get-extension" "ext" "file" "function" "iterate-directory" "equal?" "all-extensions?" "let" "reporter" "factory" "expression?" "extensions" "directory" "targets")}
        {Lisp-Entry "search-file" #f 559 11 559 22 ("search-expressions" "quotation" "'quotation" "code" "'code" "get-extension" "ci=?" "mode" "end:" "start:" "Jazz-Explorer" "expl" "text-beginning" "beginning" "let*" "set-moniker" "Jazz-Text-View" "new" "text" "search-content" "read-content-string" "content" "let" "reader" "function" "cr-lf" "'cr-lf" "eol-encoding:" "char-encoding-errors:" "parse" "path:" "list" "call-with-input-file" "not" "if" "exists?" "when" "expression?" "targets" "file")}
        {Lisp-Entry "search-content" #f 574 11 574 25 ("multisearch" "targets" "content")}
        {Lisp-Entry "select-search" #f 583 26 583 39 ("0" "Cell" "select-cell" "'targets" "locate" "targets" "let")}
        {Lisp-Entry "current-history-item" #f 593 11 593 31 ("get-selection" "get-content" "get-expression?" "get-play-recording?" "get-preserve-case?" "get-ignore-case?" "get-whole-words?" "get-search-targets" "get-search-domain" "get-results" "get-mode" "History-Search-Item" "new" "results" "'results" "locate" "tree" "let")}
        {Lisp-Entry "install-history-item" #f 608 21 608 41 ("get-selection" "set-selection" "get-content" "set-content" "get-expression?" "set-expression?" "get-play-recording?" "set-play-recording?" "get-preserve-case?" "set-preserve-case?" "get-ignore-case?" "set-ignore-case?" "get-whole-words?" "set-whole-words?" "get-targets" "set-search-targets" "get-domain" "set-search-domain" "get-mode" "get-results" "set-mode" "results" "'results" "locate" "tree" "let" "item")}}
      {Lisp-Entry "Search-Targets" #f 627 7 627 21 ("Code" "name:" "Font" "font:" "Tree-View")
        {Lisp-Entry "mouse-down" #f 634 11 634 21 ("select-cell" "nextmethod" "not" "if" "uniform-height?:" "any?:" "view->tree" "cell" "let" "pos")}
        {Lisp-Entry "tab-stop-enter" #f 641 11 641 25 ("0" "Cell" "select-cell")}
        {Lisp-Entry "add-empty-row" #f 645 11 645 24 ("children:" "add-row" "columns" "new-empty-cell" "column" "function" "map" "children" "root-row" "either" "let" "father" "father:")}
        {Lisp-Entry "select-cell" #f 653 11 653 22 ("select-all" "acquire-focus" "layout-scrollee" "self" "set-tree" "set-client" "get-string-content" "set-title" "function" "end-proc:" "editor:" "edit-cell" "get-title" "set-string-content" "when" "font" "font:" "top-padding:" "left-padding:" "get-content" "Tree-Embedded-Search-Text-View" "text" "hscroll?:" "vscroll?:" "parent:" "Scroller-View" "scroller" "Medium" "name:" "Color" "border-color:" "solid" "'solid" "border-type:" "Border-View" "new" "editor" "3" "0" "get-col" "=" "if" "left" "get-cell-data" "data" "let*" "end-edition" "cell")}}}})
"Search-View-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Search-View-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Search-View-Preferences" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Search-View-Preferences" #f 47 7 47 30 ("Bitmap-Resource" "icon:" "Preferences")
        {Lisp-Entry "targets" #f 50 12 50 19 ("generate")}
        {Lisp-Entry "whole-words?" #f 51 12 51 24 ("generate")}
        {Lisp-Entry "ignore-case?" #f 52 12 52 24 ("generate")}
        {Lisp-Entry "preserve-case?" #f 53 12 53 26 ("generate")}
        {Lisp-Entry "play-recording?" #f 54 12 54 27 ("generate")}
        {Lisp-Entry "expression?" #f 55 12 55 23 ("generate")}
        {Lisp-Entry "get-domain" #f 67 16 67 26 ("nextmethod" "else" "Boolean-Domain" "new" "expression?" "play-recording?" "preserve-case?" "ignore-case?" "whole-words?" "field-name" "case" "property")}
        {Lisp-Entry "property-presentation" #f 78 16 78 37 ("nextmethod" "else" "expression?" "play-recording?" "preserve-case?" "ignore-case?" "whole-words?" "targets" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 89 11 89 27 ("nextmethod" "else" "Boolean-Row" "new" "expression?" "play-recording?" "preserve-case?" "ignore-case?" "whole-words?" "field-name" "case" "property")}}}})
"Section-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Section-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Section-Doc" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Section-Doc" #f 47 7 47 18 ("Doc")
        {Lisp-Entry "sort?" #f 50 12 50 17 ("set-sort?" "get-sort?")}
        {Lisp-Entry "catalog" #f 53 8 53 15 ()}
        {Lisp-Entry "get-catalog" #f 61 11 61 22 ("catalog")}
        {Lisp-Entry "set-catalog" #f 65 11 65 22 ("children" "set-catalog" "child" "function" "for-each" "catalog" "set!" "cat")}
        {Lisp-Entry "get-sort?" #f 72 18 72 27 ("sort?")}
        {Lisp-Entry "set-sort?" #f 76 18 76 27 ("designers" "descendants" "'descendants" "self" "process-refresh" "designer" "function" "for-each" "set!" "sort?" "neq?" "when" "value")}
        {Lisp-Entry "html-output-file" #f 89 11 89 27 ("name" "format" "Jazz" "'Jazz" "list" "File" "new")}
        {Lisp-Entry "get-class-image" #f 98 16 98 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 102 16 102 37 ("nextmethod" "else" "sort?" "field-name" "case" "property")}
        {Lisp-Entry "sort-components?" #f 108 11 108 27 ("sort?")}
        {Lisp-Entry "get-row-instance" #f 112 11 112 27 ("nextmethod" "else" "Boolean-Row" "new" "sort?" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 118 11 118 37 ("sort?")}}}})
"Selectable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Selectable.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Selectable" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Selectable" #f 45 11 45 21 ()
        {Lisp-Entry "get-selected?" #f 48 35 48 48 ()}
        {Lisp-Entry "set-selected?" #f 49 35 49 48 ("selected?")}
        {Lisp-Entry "unselect" #f 50 35 50 43 ()}}}})
"Selected-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Selected-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Selected-Event" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Selected-Event" #f 44 7 44 21 ("Event")
        {Lisp-Entry "owner" #f 47 8 47 13 ()}
        {Lisp-Entry "old" #f 48 8 48 11 ()}
        {Lisp-Entry "selected" #f 49 8 49 16 ()}
        {Lisp-Entry "force?" #f 50 8 50 14 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("force?~self" "selected~self" "old~self" "owner~self" "set!" "nextmethod" "user-origin?" "user-origin?:" "force?" "force?:" "selected" "old" "owner" "sender" "kind")}
        {Lisp-Entry "get-owner" #f 66 18 66 27 ("owner")}
        {Lisp-Entry "get-old" #f 70 18 70 25 ("old")}
        {Lisp-Entry "get-selected" #f 74 18 74 30 ("selected")}
        {Lisp-Entry "get-force?" #f 78 18 78 28 ("force?")}}}})
"Selection-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Selection-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Selection-Event" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Selection-Event" #f 44 7 44 22 ("Event")
        {Lisp-Entry "old" #f 47 8 47 11 ()}
        {Lisp-Entry "selection" #f 48 8 48 17 ()}
        {Lisp-Entry "origin" #f 49 8 49 14 ()}
        {Lisp-Entry "force-parent?" #f 50 8 50 21 ()}
        {Lisp-Entry "force?" #f 51 8 51 14 ()}
        {Lisp-Entry "user-origin?" #f 52 8 52 20 ()}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("user-origin?~self" "force?~self" "force-parent?~self" "origin~self" "selection~self" "old~self" "set!" "nextmethod" "user-origin?" "user-origin?:" "force?" "force?:" "force-parent?" "force-parent?:" "origin" "origin:" "selection" "old" "sender" "kind")}
        {Lisp-Entry "print" #f 65 11 65 16 ("properties" "selection" "old" "kind" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-old" #f 79 18 79 25 ("old")}
        {Lisp-Entry "get-selection" #f 83 18 83 31 ("selection")}
        {Lisp-Entry "get-origin" #f 87 18 87 28 ("origin")}
        {Lisp-Entry "get-force-parent?" #f 91 18 91 35 ("force-parent?")}
        {Lisp-Entry "get-force?" #f 95 18 95 28 ("force?")}
        {Lisp-Entry "get-user-origin?" #f 99 18 99 34 ("user-origin?")}}}})
"Selection-Handler"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "handler" "Selection-Handler.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.handler.Selection-Handler" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Selection-Handler" #f 44 7 44 24 ("Event-Handler")
        {Lisp-Entry "force?" #f 47 8 47 14 ("generate")}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("force?~self" "set!" "nextmethod" "apply" "others" "force?" "bind-keywords" "rest")}
        {Lisp-Entry "fold-literal" #f 56 11 56 23 ("properties" ",properties" "',properties" "properties:" "target" ",target" "',target" "target:" "execute" ",execute" "',execute" "execute:" "form-level" ",form-level" "',form-level" "form-level:" "force?" ",force?" "',force?" "force?:" "method-name" ",method-name" "',method-name" "method-name:" "target-name" ",target-name" "',target-name" "target-name:" "Selection-Handler" "new")}
        {Lisp-Entry "print" #f 67 11 67 16 ("properties" "null?" "if" "force?" "method-name" "target-name" "target" "either" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}}})
"Selection-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "selection" "Selection-Manager.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.selection.Selection-Manager" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Selection-Manager" #f 46 7 46 24 ("Object")
        {Lisp-Entry "selection" #f 49 15 49 24 ("generate")}
        {Lisp-Entry "selection-anchor" #f 50 15 50 31 ("generate")}
        {Lisp-Entry "modifiers" #f 51 12 51 21 ("generate" "0")}
        {Lisp-Entry "shift?" #f 52 12 52 18 ("generate")}
        {Lisp-Entry "control?" #f 53 12 53 20 ("generate")}
        {Lisp-Entry "alt?" #f 54 12 54 16 ("generate")}
        {Lisp-Entry "multiple-selection?" #f 55 12 55 31 ("generate")}
        {Lisp-Entry "mouse-down-part" #f 56 12 56 27 ("generate")}
        {Lisp-Entry "mouse-down-view" #f 57 12 57 27 ("generate")}
        {Lisp-Entry "provider" #f 60 8 60 16 ()}
        {Lisp-Entry "current-operation" #f 61 8 61 25 ()}
        {Lisp-Entry "delay-selection?" #f 62 8 62 24 ()}
        {Lisp-Entry "initialize" #f 65 11 65 21 ("provider" "set!" "nextmethod" "p")}
        {Lisp-Entry "debug-current-operation" #f 75 18 75 41 ("current-operation")}
        {Lisp-Entry "mouse-down?" #f 79 18 79 29 ("mouse-down" "'mouse-down" "current-operation" "eq?")}
        {Lisp-Entry "mouse-up?" #f 83 18 83 27 ("mouse-up" "'mouse-up" "current-operation" "eq?")}
        {Lisp-Entry "mouse-double-down?" #f 87 18 87 36 ("mouse-double-down" "'mouse-double-down" "current-operation" "eq?")}
        {Lisp-Entry "mouse-double-up?" #f 91 18 91 34 ("mouse-double-up" "'mouse-double-up" "current-operation" "eq?")}
        {Lisp-Entry "keyboard?" #f 95 18 95 27 ("keyboard" "'keyboard" "current-operation" "eq?")}
        {Lisp-Entry "locked?" #f 99 18 99 25 ("locked" "'locked" "current-operation" "eq?")}
        {Lisp-Entry "set-modifiers" #f 103 11 103 24 ("alt?" "control?" "shift?" "set!" "a?" "c?" "s?")}
        {Lisp-Entry "with-locked-operation" #f 114 18 114 39 ("locked" "'locked" "set!" "begin" "unwind-protect" "current-operation" "old-operation" "let" "proc")}
        {Lisp-Entry "collapse?" #f 123 18 123 27 ("row")}
        {Lisp-Entry "expand?" #f 127 18 127 25 ("row")}
        {Lisp-Entry "end-delayed?" #f 131 18 131 30 ("mouse-up?" "content" "'content" "mouse-down-part" "eq?" "control?" "shift?" "not" "multiple-selection?" "and" "if")}
        {Lisp-Entry "allow-start-drag?" #f 137 18 137 35 ("mouse-down?" "content" "'content" "mouse-down-part" "eq?" "and")}
        {Lisp-Entry "mouse-down-part-control?" #f 142 18 142 42 ("control" "'control" "mouse-down-part" "eq?")}
        {Lisp-Entry "delay-selection" #f 151 18 151 33 ("delay-selection?" "set!")}
        {Lisp-Entry "change-selection?" #f 155 18 155 35 ("else" "mouse-up" "delay-selection?" "not" "mouse-down" "current-operation" "case")}
        {Lisp-Entry "mouse-down" #f 162 18 162 28 ("multiple-selection?" "set-modifiers" "mouse-down-part" "mouse-down-view" "mouse-down" "'mouse-down" "current-operation" "set!" "ms?" "alt?" "control?" "shift?" "part" "view")}
        {Lisp-Entry "mouse-up" #f 170 18 170 26 ("set-modifiers" "mouse-up" "'mouse-up" "mouse-double-up" "'mouse-double-up" "current-operation" "set!" "mouse-double-down?" "if" "alt?" "control?" "shift?")}
        {Lisp-Entry "double-click" #f 177 18 177 30 ("set-modifiers" "mouse-double-down" "'mouse-double-down" "current-operation" "set!" "alt?" "control?" "shift?")}
        {Lisp-Entry "keyboard" #f 182 18 182 26 ("set-modifiers" "keyboard" "'keyboard" "current-operation" "set!" "alt?" "control?" "shift?")}
        {Lisp-Entry "reset" #f 187 18 187 23 ("delay-selection?" "multiple-selection?" "set-modifiers" "mouse-down-part" "current-operation" "set!")}}}})
"Selection-Provider"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "selection" "Selection-Provider.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.selection.Selection-Provider" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Selection-Provider" #f 45 11 45 29 ()}}})
"Separator"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "layout" "Separator.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.layout.Separator" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Separator" #f 46 7 46 16 ("Figure")
        {Lisp-Entry "default-size" #f 49 11 49 23 ("0" "8" "Dimension")}}}})
"Separator-Item"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Separator-Item.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Separator-Item" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Separator-Item" #f 46 7 46 21 ("Item")
        {Lisp-Entry "default-size" #f 54 11 54 23 ("8" "100" "Dimension")}
        {Lisp-Entry "preferred-height" #f 58 11 58 27 ("8")}
        {Lisp-Entry "draw" #f 67 11 67 15 ("4" "Light" "3" "line" "Dark" "name:" "Pen" "set-pen" "get-width" "-" "right" "1" "left" "let" "lv" "lh" "context" "surface")}}}})
"Separator-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Separator-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Separator-View" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Separator-View" #f 46 7 46 21 ("View")
        {Lisp-Entry "draw" #f 54 11 54 15 ("Light" "0" "line" "Dark" "name:" "Pen" "set-pen" "1" "get-height" "-" "top" "get-size" "size" "let*" "lv" "lh" "context" "surface")}}}})
"Sequence-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Sequence-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Sequence-Tester" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Sequence-Tester" #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-sequence" "invoke")}
        {Lisp-Entry "aaa" #f 61 14 61 17 ()}
        {Lisp-Entry "test-sequence" #f 65 11 65 24 ("list" "aaa" "eq?" "replace-subseq!" "0" "insert!" "replace!" "fill!" ":sequence?" "'b" "'a" "substitute" "join" "split" "identity" "accumulate" "map" "search" "prefix?" "null?" "mismatch" "String" "e" "d" "c" "b" "a" "subseq" "upper-case?" "collect-if" "every?" "not" "9" "some?" "15" "start:" "reversed?:" "numeric?" "cadr" "odd?" "find-if" "'denise" "find" "car" "key:" "'mark" "denise" "mark" "william" "find-in" "8" "7" "6" "even?" "count-if" "4" "5" "2" "1" "3" "count" "=" "rpt" "validate")}}}})
"Sequenced-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "display" "Sequenced-Column.jazz"} 1226584781
    {Lisp-Entry "jazz.library.display.Sequenced-Column" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Sequenced-Column" #f 44 7 44 23 ("Display-Column")
        {Lisp-Entry "put-data" #f 52 11 52 19 ("List-Factory" "new" "fact" "let" "factory" "get-last-element" "put" "displayer" "get-line" "line" ">" "if" "rest" "data")}
        {Lisp-Entry "increase-line" #f 60 11 60 24 ("increase!" "displayer" "get-line" "line" "<=" "when")}
        {Lisp-Entry "print-to" #f 70 11 70 19 ("border-after" "get-output" "display" "data" "function" "for-each" "border" "format" "printer" "previous-data" "previous-column" "fact")}}}})
"Sequenced-Column-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "display" "Sequenced-Column-Preferences.jazz"} 1226584781
    {Lisp-Entry "jazz.library.display.Sequenced-Column-Preferences" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "Sequenced-Column-Preferences" #f 44 7 44 35 ("Column-Preferences")
        {Lisp-Entry "column-class" #f 52 11 52 23 ("Sequenced-Column")}
        {Lisp-Entry "new-column" #f 56 11 56 21 ("minimum" "minimum:" "border-after" "border-after:" "border" "border:" "Sequenced-Column" "new" "display")}}}})
"Server-Error"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "Server-Error.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.Server-Error" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Server-Error" #f 40 7 40 19 ("Error")}}})
"Service"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "service" "platform" "windows" "Service.jazz"} 1227124458
    {Lisp-Entry "jazz.library.service.Service" #f 38 9 38 37 ("jazz")
      {Lisp-Entry "Service" #f 46 7 46 14 ("Process")
        {Lisp-Entry "mode" #f 49 8 49 12 ()}
        {Lisp-Entry "cached-state" #f 50 8 50 20 ()}
        {Lisp-Entry "taskicon-hwnd" #f 51 8 51 21 ()}
        {Lisp-Entry "prepare-process" #f 54 11 54 26 ("error" "else" "debug" "'debug" "run" "'run" "mode" "set!" "unregister-service" "register-service" "EXIT_SUCCESS" "exit-process" "process-actions" "process-version" "process-name" "Command-Line" "command-help" "ci=?" "null?" "or" "cond" "command-action" "action" "let" "nextmethod")}
        {Lisp-Entry "finalize-process" #f 74 11 74 27 ("add-taskicon" "process-taskbar-message" "set-window-callback" "register-taskicon-class" "debug" "'debug" "mode" "eq?" "when" "nextmethod")}
        {Lisp-Entry "close-environment" #f 82 11 82 28 ("nextmethod" "remove-taskicon" "taskicon-hwnd" "debug" "'debug" "mode" "eq?" "and" "when")}
        {Lisp-Entry "process-event-source" #f 88 11 88 31 ("service-presentation" "EventSource" "'EventSource" "argument/setting" "either")}
        {Lisp-Entry "service-name" #f 93 29 93 41 ()}
        {Lisp-Entry "service-presentation" #f 97 29 97 49 ()}
        {Lisp-Entry "service-description" #f 101 29 101 48 ()}
        {Lisp-Entry "service-messages" #f 105 29 105 45 ()}
        {Lisp-Entry "service-executable" #f 109 29 109 47 ()}
        {Lisp-Entry "service-icon" #f 113 29 113 41 ()}
        {Lisp-Entry "register-service" #f 122 11 122 27 ("presentation:" "create-service" "handle" "command" "service-executable" "executable" "Service-Manager" "new" "manager" "parse" "application-key" "Install" "Directory" "new-file" "message-file" "application-path" "service-presentation" "presentation" "let*" "service-messages" "messages" "set-value" "create-key" "service-key" "with-closed" "format" "service-path" "Registry" "Local-Machine" "local-machine-key" "when" "service-description" "description" "service-name" "name" "let")}
        {Lisp-Entry "unregister-service" #f 149 11 149 29 ("delete-service" "open-service" "handle" "service-name" "name" "let" "Service-Manager" "new" "manager" "with-closed")}
        {Lisp-Entry "set-state" #f 161 18 161 27 ("error" "else" "SERVICE_STOPPED" "stopped" "SERVICE_STOP_PENDING" "stop-pending" "SERVICE_PAUSED" "paused" "SERVICE_PAUSE_PENDING" "pause-pending" "SERVICE_RUNNING" "running" "SERVICE_CONTINUE_PENDING" "continue-pending" "SERVICE_START_PENDING" "start-pending" "case" "set-service-state" "cached-state" "set!" "state")}
        {Lisp-Entry "get-state" #f 175 18 175 27 ("error" "else" "stopped" "'stopped" "SERVICE_STOPPED" "stop-pending" "'stop-pending" "SERVICE_STOP_PENDING" "paused" "'paused" "SERVICE_PAUSED" "pause-pending" "'pause-pending" "SERVICE_PAUSE_PENDING" "running" "'running" "SERVICE_RUNNING" "continue-pending" "'continue-pending" "SERVICE_CONTINUE_PENDING" "start-pending" "'start-pending" "SERVICE_START_PENDING" "get-service-state" "ecase")}
        {Lisp-Entry "process-service-control" #f 188 18 188 41 ("stopped" "stop-service" "stop-pending" "paused" "pause-service" "pause-pending" "running" "continue-service" "continue-pending" "start-service" "start-pending" "case" "cached-state" "neq?" "when" "get-state" "updated-state" "let")}
        {Lisp-Entry "start-service" #f 201 29 201 42 ("running" "'running" "set-state" "log-success-event")}
        {Lisp-Entry "pause-service" #f 206 29 206 42 ("paused" "'paused" "set-state" "log-success-event")}
        {Lisp-Entry "continue-service" #f 211 29 211 45 ("running" "'running" "set-state" "log-success-event")}
        {Lisp-Entry "stop-service" #f 216 29 216 41 ("stopped" "'stopped" "set-state" "log-success-event")}
        {Lisp-Entry "run-loop" #f 226 11 226 19 ("error" "0" "/=" "when" "start-service-dispatcher" "err" "let" "run" "nextmethod" "debug" "mode" "case")}
        {Lisp-Entry "service-main" #f 234 11 234 23 ("run-service" "error" "/=" "0" "=" "or" "if" "get-service-error" "err" "get-service-handle" "handle" "let" "coinitialize")}
        {Lisp-Entry "setup-service" #f 243 29 243 42 ()}
        {Lisp-Entry "process-service" #f 247 29 247 44 ("process-service-control" "1" "sleep" "stopped" "'stopped" "cached-state" "/=" "while")}
        {Lisp-Entry "run-service" #f 253 11 253 22 ("process-service" "setup-service")}
        {Lisp-Entry "start-loop" #f 263 11 263 21 ("EXIT_SUCCESS" "exit-process" "process-messages" "launch-service-thread")}
        {Lisp-Entry "launch-service-thread" #f 269 11 269 32 ("NULL" "WM_QUIT" "taskicon-hwnd" "PostMessage" "run-service" "thread" "function" "execute:" "self" "context:" "name:" "Thread" "new" "unimplemented")}
        {Lisp-Entry "process-messages" #f 285 11 285 27 ("DispatchMessage" "TranslateMessage" "0" "NULL" "GetMessage" "while" "MSG" "new" "msg" "let")}
        {Lisp-Entry "process-taskbar-message" #f 292 11 292 34 ("DefWindowProc" "else" "0" "taskbar-event" "JZ_TASKICON" "ecase" "lparam" "wparam" "msg" "hwnd")}
        {Lisp-Entry "debug-exception" #f 307 11 307 26 ("EXIT_FAILURE" "exit-process" "exception:" "file:" "dump-stack" "distribution-build?" "not" "and" "when" "Install" "Directory" "timestamped-file" "file" "let" "get-message" "log-error-event" "accountable" "frame" "exception")}
        {Lisp-Entry "process-alias" #f 320 11 320 24 ("nextmethod" "else" "self" ":service" "case" "name")}
        {Lisp-Entry "taskbar-event" #f 331 18 331 31 ("else" "taskbar-context-menu" "WM_RBUTTONDOWN" "taskbar-double-click" "WM_LBUTTONDBLCLK" "0" "taskbar-mouse-down" "WM_LBUTTONDOWN" "ecase" "lparam" "wparam")}
        {Lisp-Entry "taskbar-mouse-down" #f 339 26 339 44 ()}
        {Lisp-Entry "taskbar-double-click" #f 343 26 343 46 ()}
        {Lisp-Entry "taskbar-context-menu" #f 347 26 347 46 ()}
        {Lisp-Entry "taskicon-class" #f 356 11 356 25 ()}
        {Lisp-Entry "register-taskicon-class" #f 360 11 360 34 ("RegisterClass" "lpszClassName" "'lpszClassName" "lpszMenuName" "'lpszMenuName" "hbrBackground" "'hbrBackground" "hCursor" "'hCursor" "NULL" "hIcon" "'hIcon" "hInstance" "'hInstance" "cbWndExtra" "'cbWndExtra" "0" "cbClsExtra" "'cbClsExtra" "get-window-proc" "lpfnWndProc" "'lpfnWndProc" "CS_DBLCLKS" "style" "'style" "set" "WNDCLASS" "new" "wc" "current-instance" "instance" "taskicon-class" "class" "let")}
        {Lisp-Entry "create-taskicon-hwnd" #f 377 11 377 31 ("current-instance" "NULL" "100" "taskicon-class" "0" "CreateWindowEx")}
        {Lisp-Entry "add-taskicon" #f 390 11 390 23 ("NIM_ADD" "Shell_NotifyIcon" "hIcon" "'hIcon" "JZ_TASKICON" "uCallbackMessage" "'uCallbackMessage" "NIF_ICON" "NIF_MESSAGE" "bitwise-ior" "uFlags" "'uFlags" "10" "uID" "'uID" "hWnd" "'hWnd" "size-of" "cbSize" "'cbSize" "set" "LR_SHARED" "16" "IMAGE_ICON" "int-resource" "LoadImage" "icon" "service-icon" "resource" "current-instance" "instance" "NOTIFYICONDATA" "new" "record" "let*" "create-taskicon-hwnd" "taskicon-hwnd" "set!")}
        {Lisp-Entry "remove-taskicon" #f 405 11 405 26 ("NIM_DELETE" "Shell_NotifyIcon" "10" "uID" "'uID" "taskicon-hwnd" "hWnd" "'hWnd" "size-of" "cbSize" "'cbSize" "set" "NOTIFYICONDATA" "new" "record" "let")}
        {Lisp-Entry "track-menu" #f 418 11 418 21 ("DestroyMenu" "invoke" ":action" "Event" "apply" "evt" "get-properties" "properties" "self" "sender" "action-handler:" "getf" "action-handler" "-" "element" "let*" "/=" "when" "NULL" "0" "y" "'y" "x" "'x" "get" "TPM_RETURNCMD" "TPM_RIGHTALIGN" "bitwise-ior" "TrackPopupMenu" "taskicon-hwnd" "SetForegroundWindow" "increase!" "id:" "default?:" "separator?:" "title:" "insert-item" "others" "default?" "separator?" "title" "bind-keywords" "function" "for-each" "1" "id" "CreatePopupMenu" "menu" "let" "GetCursorPos" "POINT" "new" "point" "with" "config")}
        {Lisp-Entry "insert-item" #f 440 11 440 22 ("MF_SEPARATOR" "InsertMenuItem" "length" "cch" "'cch" "dwTypeData" "'dwTypeData" "wID" "'wID" "0" "MFS_DEFAULT" "fState" "'fState" "MFT_STRING" "MFT_SEPARATOR" "if" "fType" "'fType" "MIIM_ID" "MIIM_STATE" "MIIM_TYPE" "bitwise-ior" "fMask" "'fMask" "size-of" "cbSize" "'cbSize" "set" "MENUITEMINFO" "new" "info" "with" "id" "id:" "default?" "default?:" "separator?" "separator?:" "title" "title:" "menu")}}}})
"Service-Handle"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "service" "platform" "windows" "Service-Handle.jazz"} 1226584786
    {Lisp-Entry "jazz.library.service.Service-Handle" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Service-Handle" #f 44 7 44 21 ("Object")
        {Lisp-Entry "handle" #f 47 8 47 14 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("destroy-mandatory" "handle" "set!" "nextmethod" "hnd")}
        {Lisp-Entry "destroy" #f 56 11 56 18 ("nextmethod" "handle" "CloseServiceHandle")}
        {Lisp-Entry "delete-service" #f 66 18 66 32 ("winerror" "error" "handle" "DeleteService" "not" "when")}}}})
"Service-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "service" "platform" "windows" "Service-Manager.jazz"} 1226584786
    {Lisp-Entry "jazz.library.service.Service-Manager" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Service-Manager" #f 44 7 44 22 ("Object")
        {Lisp-Entry "handle" #f 47 8 47 14 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("destroy-mandatory" "handle" "set!" "winerror" "error" "not" "if" "SC_MANAGER_ALL_ACCESS" "NULL" "OpenSCManager" "hnd" "let" "nextmethod")}
        {Lisp-Entry "destroy" #f 59 11 59 18 ("nextmethod" "handle" "CloseServiceHandle")}
        {Lisp-Entry "create-service" #f 69 18 69 32 ("Service-Handle" "new" "winerror" "error" "=" "if" "NULL" "SERVICE_ERROR_NORMAL" "SERVICE_DEMAND_START" "SERVICE_WIN32_OWN_PROCESS" "SERVICE_ALL_ACCESS" "either" "handle" "CreateService" "service-handle" "let" "presentation" "presentation:" "command" "name")}
        {Lisp-Entry "open-service" #f 81 18 81 30 ("Service-Handle" "new" "winerror" "error" "not" "if" "SERVICE_ALL_ACCESS" "handle" "OpenService" "service-handle" "let" "name")}}}})
"Shortcut"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "action" "Shortcut.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.action.Shortcut" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Shortcut" #f 45 7 45 15 ("Object")
        {Lisp-Entry "modifiers" #f 48 8 48 17 ()}
        {Lisp-Entry "key" #f 49 8 49 11 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("standardize-key" "key~self" "standardize-modifiers" "modifiers~self" "set!" "nextmethod" "key" "modifiers")}
        {Lisp-Entry "standardize-key" #f 58 11 58 26 ("upcase" "char?" "if" "key")}
        {Lisp-Entry "standardize-modifiers" #f 64 11 64 32 (":control" ":shift" ":alt" "cons" "set!" "memq?" "when" "modifier" "function" "try" "standard" "let" "modifiers")}
        {Lisp-Entry "hash-object" #f 76 11 76 22 ("eqv-hash" "+" "modifiers" "key" "cons" "equal-hash")}
        {Lisp-Entry "compare-object" #f 83 11 83 25 (":not-equal" "else" ":equal" "get-key" "key" "get-modifiers" "modifiers" "=" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 93 11 93 23 ("key" ",key" "',key" "modifiers" ",modifiers" "',modifiers" "Shortcut" "new")}
        {Lisp-Entry "print" #f 97 11 97 16 ("key" "modifiers" "not-null?" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-modifiers" #f 110 18 110 31 ("modifiers")}
        {Lisp-Entry "get-key" #f 114 18 114 25 ("key")}
        {Lisp-Entry "present" #f 123 18 123 25 ("key" "modifiers" "format")}
        {Lisp-Entry "present-shortcut" #f 127 18 127 34 ("->string" "format" "key" "char?" "if" "localize-shortcut" ":shift" ":alt" "localize" "string-append" "set!" "modifiers" ":control" "memq?" "when" "str" "let")}
        {Lisp-Entry "Localized-Shortcuts" #f 138 14 138 33 ("Multiply" "Subtract" "Add" "Delete" "Insert" "Next" "Prior" "Down" "Right" "Up" "Left" "End" "Home" "Tab" "Space" "Return" "Backspace")}
        {Lisp-Entry "localize-shortcut" #f 158 11 158 28 ("cdr" "localize" "not" "if" "Localized-Shortcuts" "assq" "info" "let" "shortcut")}}}})
"Shortcut-Chooser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Shortcut-Chooser.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Shortcut-Chooser" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Shortcut-Chooser" #f 47 7 47 23 ("ok" "buttons" "bindings-view" "title:" "title" "header" "name:" "Shortcut-Viewer")
        {Lisp-Entry "action-name" #f 50 12 50 23 ("generate")}
        {Lisp-Entry "host-title" #f 68 16 68 26 ()}
        {Lisp-Entry "setup-description" #f 77 11 77 28 ("action-name" "format" "description" "'description" "locate" "set-title")}
        {Lisp-Entry "choose-hook" #f 87 11 87 22 ("get-host" "end-modal" "begin" "null?" "if" "bindings" "shortcut")}}}})
"Shortcut-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Shortcut-Viewer.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Shortcut-Viewer" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Shortcut-Viewer" #f 47 7 47 22 ("on-cancel" "311" "cancel" "on-ok" ":host" "default?:" "90" "215" "ok" "on-choose" "action-handler:" "enabled?:" "120" "7" "choose" "south" "40" "buttons" "210" "on-escape-press" "escape-press-handler:" "on-return-press" ":form" "Event-Handler" "return-press-handler:" "bindings" "fill" "content" "vscroll?:" "hscroll?:" "document" "entry" "style:" "edge" "border-type:" "124" "396" "24" "bindings-border" "6" "center" "bindings-view" "2" "408" "54" "0" "Label" "27" "30" "description" "Caption" "Font" "font:" "16" "350" "9" "10" "Point" "position:" "title:" "title" "north" "location:" "56" "100" "Dimension" "size:" "header" "name:" "border" "layout-type:" "Layout-View")
        {Lisp-Entry "selected-shortcut" #f 50 8 50 25 ()}
        {Lisp-Entry "finish" #f 74 11 74 17 ("get-tree" "acquire-focus" "setup-chooser" "setup-description" "nextmethod" "rest")}
        {Lisp-Entry "host-title" #f 86 16 86 26 ()}
        {Lisp-Entry "host-size" #f 90 16 90 25 ("249" "408" "Dimension")}
        {Lisp-Entry "dialog-class" #f 94 16 94 28 ("Shortcut-Chooser-Dialog")}
        {Lisp-Entry "setup-description" #f 103 19 103 36 ("description" "'description" "locate" "set-title")}
        {Lisp-Entry "setup-chooser" #f 108 11 108 24 ("choose" "shortcut" "function" "get-application" "set-shortcut-hook")}
        {Lisp-Entry "get-tree" #f 120 11 120 19 ("bindings" "'bindings" "locate")}
        {Lisp-Entry "on-choose" #f 129 11 129 20 ("setup-chooser" "ok" "'ok" "choose" "'choose" "locate" "set-enabled?" "get-tree" "remove-every-row" "selected-shortcut" "set!" "evt")}
        {Lisp-Entry "on-return-press" #f 137 11 137 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "on-escape-press" #f 143 11 143 26 ("cancel-modal" "get-host" "dialog" "let" "evt")}
        {Lisp-Entry "get-modal-result" #f 148 11 148 27 ("selected-shortcut")}
        {Lisp-Entry "choose" #f 157 11 157 17 ("ok" "'ok" "choose" "'choose" "locate" "set-enabled?" "list" "'list" "view-bindings" "get-tree" "tree" "get-application" "get-bindings-designer" "designer" "selected-shortcut" "set!" "choose-hook" "when" "gather-bindings" "bindings" "let" "shortcut")}
        {Lisp-Entry "choose-hook" #f 168 29 168 40 ("bindings" "shortcut")}
        {Lisp-Entry "gather-bindings" #f 172 11 172 26 ("get-output" "get-application" "get-bindings" "get-children" "put" "shortcut=?" "and" "when" "get-shortcut" "action-shortcut" "action" "actions" "function" "for-each" "List-Factory" "new" "fact" "let" "shortcut")}}
      {Lisp-Entry "Shortcut-Chooser-Dialog" #f 189 7 189 30 ("Dialog")
        {Lisp-Entry "destroy" #f 192 11 192 18 ("nextmethod" "get-application" "set-shortcut-hook")}}
      {Lisp-Entry "Header-View" #f 202 7 202 18 ("View")
        {Lisp-Entry "Header-Color" #f 205 14 205 26 ("255" "blue:" "green:" "120" "red:" "Color" "new")}
        {Lisp-Entry "draw" #f 209 11 209 15 ("Header-Color" "1" "White" "name:" "Color" "0" "list" "get-bounds" "gradient-fill" "lv" "lh" "context" "surface")}}}})
"Slide"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "slide" "Slide.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.slide.Slide" #f 37 9 37 28 ("jazz")
      {Lisp-Entry "Slide" #f 45 7 45 12 ("Branch")
        {Lisp-Entry "level" #f 48 12 48 17 ("generate")}}}})
"Slide-Conductor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "slide" "Slide-Conductor.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.slide.Slide-Conductor" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Slide-Conductor" #f 45 7 45 22 ("Component")
        {Lisp-Entry "step" #f 48 12 48 16 ("generate")}
        {Lisp-Entry "default-name" #f 51 11 51 23 ("conductor" "'conductor")}}}})
"Slot-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Slot-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Slot-Doc" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Slot-Doc" #f 45 7 45 15 ("Definition-Doc")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("doc:" "name:" "self" "new" "doc" "name" "context")}
        {Lisp-Entry "get-class-image" #f 58 16 58 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" #f 62 11 62 37 ("package-name")}}}})
"Snap-Layout"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "layout" "Snap-Layout.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.layout.Snap-Layout" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Snap-Layout" #f 45 7 45 18 ("Layout")
        {Lisp-Entry "insets" #f 48 12 48 18 ("generate" "0" "Rect")}
        {Lisp-Entry "justification" #f 49 12 49 25 ("generate" "center" "'center")}
        {Lisp-Entry "padding" #f 50 12 50 19 ("generate" "0")}
        {Lisp-Entry "layout" #f 58 11 58 17 ("Dimension" "set-size-noevent" "move-figure" "b" "r" "t" "insets" "l" "get-bottom" "get-right" "max" "get-top" "get-left" "min" "east" "west" "south" "padding" "north" "get-location" "case" "h" "w" "for-each" "Point" "new" "set-position" "+" "-" "hh" "2" "fxfloor/" "hw" "get-height" "get-width" "set!" "when" "bottom" "right" "top" "left" "second" "cv" "first" "ch" "find-child-located" "get-visible?" "Figure" "is?" "and" "figure" "function" "collect-if" "visibles" "0" "justify" "integer?" "if" "else" "center" "'center" "fit" "'fit" "eq?" "pair?" "cond" "justification" "let" "part" "size" "justify-center" "define" "height" "width" "figures" "layout")}}}})
"Solution"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "solution" "Solution.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.solution.Solution" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Solution" #f 45 7 45 15 ("Component")}}})
"Sound-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "resource" "Sound-File.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.resource.Sound-File" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Sound-File" #f 45 7 45 17 ("Resource-File")
        {Lisp-Entry "resource-class" #f 48 11 48 25 ("Sound-Resource")}}}})
"Sound-Resource"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "resource" "Sound-Resource.jazz"} 1226584782
    {Lisp-Entry "jazz.library.resource.Sound-Resource" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Sound-Resource" #f 44 7 44 21 ("Resource")
        {Lisp-Entry "resource-type" #f 53 16 53 29 ("sound" "'sound")}}}})
"Sparse-Outline"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "outline" "Sparse-Outline.jazz"} 1226584782
    {Lisp-Entry "jazz.library.outline.Sparse-Outline" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Sparse-Outline" #f 43 7 43 21 ("Outline")}}})
"Split-Layout"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "layout" "Split-Layout.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.layout.Split-Layout" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Split-Layout" #f 45 7 45 19 ("Layout")
        {Lisp-Entry "layout" #f 48 11 48 17 ("layout-split" "split" "layout-zoom" "zoom" "case" "layout-empty" "not" "if" "insets" "insets:" "division" "division:" "mode" "mode:" "orientation" "orientation:" "state" "state:" "separator" "separator:" "height" "width" "figures")}
        {Lisp-Entry "layout-empty" #f 56 11 56 23 ("set-visible?" "figure" "function" "for-each" "insets" "division" "mode" "orientation" "height" "width" "figures")}
        {Lisp-Entry "layout-zoom" #f 63 11 63 22 ("get-bottom" "get-right" "-" "Dimension" "set-size" "get-top" "get-left" "Point" "new" "set-position" "get-visible?" "when" "figure" "function" "for-each" "insets" "division" "mode" "orientation" "separator" "height" "width" "figures")}
        {Lisp-Entry "layout-split" #f 72 11 72 23 ("set-visible?" "Rect" "Dimension" "set-size" "Point" "new" "set-position" "second-height" "second-width" "first-height" "first-width" "positive?" "cast" "abs" "percent" "fxround" "pct" "relative" "get-bottom" "get-top" "quotient" "get-right" "-" ">" "get-left" "<" "or" "'horz" "if" "+" "set!" "negative?" "absolute" "1" "line" "2" "edge" "4" "resize" "splitter-size" "vert" "horz" "case" "size" "let" "error" "not" "unspecified" "bar" "'second" "second" "'first" "first" "get-location" "eq?" "figure" "find-if" "location" "function" "find" "let*" "when" "insets" "division" "mode" "orientation" "separator" "height" "width" "figures")}}}})
"Splitter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Splitter.jazz"} 1226849376
    {Lisp-Entry "jazz.ui.view.Splitter" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Splitter" #f 47 7 47 15 ("View")
        {Lisp-Entry "orientation" #f 50 12 50 23 ("set-orientation" "get-orientation" "vert" "'vert")}
        {Lisp-Entry "move-handler" #f 51 12 51 24 ("set-move-handler" "get-move-handler")}
        {Lisp-Entry "dragging?" #f 54 8 54 17 ()}
        {Lisp-Entry "base-position" #f 55 8 55 21 ()}
        {Lisp-Entry "displacement" #f 56 8 56 20 ()}
        {Lisp-Entry "get-orientation" #f 64 18 64 33 ("orientation")}
        {Lisp-Entry "set-orientation" #f 68 18 68 33 ("orientation" "set!" "or")}
        {Lisp-Entry "cursor-update" #f 77 11 77 24 (":horizontal-splitter" "horz" ":vertical-splitter" "vert" "orientation" "case" "set-cursor" "pos")}
        {Lisp-Entry "mouse-down" #f 89 11 89 21 ("acquire-capture" "0" "Point" "displacement" "base-position" "dragging?" "set!" "pos")}
        {Lisp-Entry "drag-move" #f 96 11 96 20 ("get-v" "horz" "self" "process-move" "0" "get-h" "move-figure" "vert" "orientation" "case" "nu+" "displacement" "set!" "base-position" "nu-" "delta" "let" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" #f 109 11 109 18 ("set!" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "get-move-handler" #f 120 18 120 34 ("move-handler")}
        {Lisp-Entry "set-move-handler" #f 124 18 124 34 ("move-handler" "set!" "value")}
        {Lisp-Entry "process-move" #f 128 26 128 38 ("self" "invoke" "delta:" ":move" "Event" "new" "evt" "let" "move-handler" "when" "delta" "sender")}
        {Lisp-Entry "get-row-class" #f 139 11 139 24 ("nextmethod" "else" "Handler-Row" "move-handler" "field-name" "case" "property")}}}})
"Splitter-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Splitter-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Splitter-Preferences" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Splitter-Preferences" #f 46 7 46 27 ("Bitmap-Resource" "icon:" "title:" "Figure-Preferences")
        {Lisp-Entry "separator" #f 49 12 49 21 ("generate" "resize" "'resize")}
        {Lisp-Entry "state" #f 50 12 50 17 ("generate")}
        {Lisp-Entry "zoomed" #f 51 12 51 18 ("generate")}
        {Lisp-Entry "orientation" #f 52 12 52 23 ("generate" "horz" "'horz")}
        {Lisp-Entry "mode" #f 53 12 53 16 ("generate" "absolute" "'absolute")}
        {Lisp-Entry "division" #f 54 12 54 20 ("generate")}
        {Lisp-Entry "insets" #f 55 12 55 18 ("generate" "0" "Rect")}
        {Lisp-Entry "apply-root" #f 67 11 67 21 ("get-root" "apply-to" "offscreen?:" "Splitter-View" "new" "set-root" "player")}
        {Lisp-Entry "apply-preferences" #f 72 11 72 28 ("parent:" "Splitter-View" "new" "apply-to" "assert" "parent")}
        {Lisp-Entry "apply-to" #f 77 11 77 19 ("zoom" "find-child-located" "zoomed-child" "let" "zoomed" "layout-view" "get-children" "get-guest" "host-install" "Host-View" "is?" "when" "child" "children" "apply-preferences" "pref" "function" "for-each" "location" "set-location" "get-visible?" "set-visible?" "insets" "set-insets" "division" "set-division" "mode" "set-mode" "orientation" "set-orientation" "state" "set-state" "separator" "set-separator" "remove-children" "splitter")}
        {Lisp-Entry "get-class-image" #f 105 16 105 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" #f 109 11 109 37 ("insets" "division" "mode" "orientation" "state" "location")}
        {Lisp-Entry "get-addable-classes" #f 113 11 113 30 ("Stage-Preferences" "Docked-Preferences" "Pad-Preferences" "Splitter-Preferences" "list")}}}})
"Splitter-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Splitter-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Splitter-View" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Splitter-View" #f 48 7 48 20 ("Medium" "name:" "Color" "background:" "View")
        {Lisp-Entry "separator" #f 51 12 51 21 ("generate" "resize" "'resize")}
        {Lisp-Entry "state" #f 52 12 52 17 ("generate")}
        {Lisp-Entry "orientation" #f 53 12 53 23 ("generate" "horz" "'horz")}
        {Lisp-Entry "mode" #f 54 12 54 16 ("generate" "absolute" "'absolute")}
        {Lisp-Entry "division" #f 55 12 55 20 ("generate" "100")}
        {Lisp-Entry "insets" #f 56 12 56 18 ("generate" "0" "Rect")}
        {Lisp-Entry "full?" #f 57 12 57 17 ("generate")}
        {Lisp-Entry "after-handler" #f 58 12 58 25 ("generate")}
        {Lisp-Entry "split-layout" #f 61 8 61 20 ("Split-Layout" "new")}
        {Lisp-Entry "bar-bounds" #f 62 8 62 18 ()}
        {Lisp-Entry "dragging?" #f 63 8 63 17 ()}
        {Lisp-Entry "previous" #f 64 8 64 16 ()}
        {Lisp-Entry "size-change" #f 76 11 76 22 ("layout-view" "nextmethod" "size")}
        {Lisp-Entry "layout" #f 81 11 81 17 ("insets" "insets:" "division" "division:" "mode:" "orientation" "orientation:" "state" "state:" "separator" "separator:" "get-height" "get-width" "children" "split-layout" "layout" "bar-bounds" "set!" "absolute" "'absolute" "dragging?" "if" "mode" "get-size" "size" "let")}
        {Lisp-Entry "remove-children" #f 92 18 92 33 ("children" "get-guest" "host-uninstall" "Host-View" "set-parent" "set-visible?" "close" "if" "Pad-View" "remove-children" "Splitter-View" "is?" "when" "child" "function" "for-each")}
        {Lisp-Entry "workspace-zoomable?" #f 112 18 112 37 ("workspace-minimisable?" "get-guest" "guest" "Host-View" "is-not?" "or" "brother" "let" "children" "neq?" "child" "function" "find-if" "get-brother" "define" "view")}
        {Lisp-Entry "zoom" #f 129 18 129 22 ("layout-view" "children" "eq?" "set-visible?" "child" "function" "for-each" "zoom" "'zoom" "state" "set!" "target")}
        {Lisp-Entry "unzoom" #f 137 18 137 24 ("layout-view" "children" "set-visible?" "child" "function" "for-each" "split" "'split" "state" "set!")}
        {Lisp-Entry "get-zoomed" #f 145 18 145 28 ("children" "get-visible?" "child" "function" "find-if" "zoom" "'zoom" "state" "eq?" "when")}
        {Lisp-Entry "cursor-update" #f 157 11 157 24 ("nextmethod" ":horizontal-splitter" "vert" ":vertical-splitter" "set-cursor" "horz" "orientation" "case" "in-rect?" "bar-bounds" "resize" "'resize" "separator" "eq?" "and" "if" "pos")}
        {Lisp-Entry "draw" #f 170 11 170 15 ("line" "top" "vert" "left" "edges:" "sunken" "'sunken" "outer:" "raised" "'raised" "inner:" "draw-edge" "horz" "orientation" "edge" "resize" "separator" "case" "bar-bounds" "split" "'split" "state" "eq?" "and" "when" "lv" "lh" "context" "surface")}
        {Lisp-Entry "absolute->relative" #f 189 11 189 29 ("percentage" "get-height" "vert" "get-width" "horz" "orientation" "case" "size" "let" "division")}
        {Lisp-Entry "relative->absolute" #f 196 11 196 29 ("-" "set!" "positive?" "if" "abs" "percent" "fxround" "pct" "get-height" "vert" "get-width" "horz" "orientation" "case" "size" "let*" "division")}
        {Lisp-Entry "mouse-down" #f 212 11 212 21 ("acquire-capture" "relative->absolute" "division" "relative" "'relative" "mode" "get-v" "vert" "get-h" "horz" "orientation" "case" "previous" "dragging?" "set!" "in-rect?" "bar-bounds" "resize" "'resize" "separator" "eq?" "and" "when" "pos")}
        {Lisp-Entry "drag-move" #f 221 11 221 20 ("call-after-handler" "update-view" "layout-view" "set!" "division" "increase!" "previous" "-" "delta" "get-v" "vert" "get-h" "horz" "orientation" "case" "n" "let*" "dragging?" "when" "pos")}
        {Lisp-Entry "drag-up" #f 232 11 232 18 ("absolute->relative" "division" "set!" "relative" "'relative" "mode" "eq?" "release-capture" "dragging?" "when" "rest" "pos")}
        {Lisp-Entry "call-after-handler" #f 245 11 245 29 ("after:" "Event" "new" "self" "invoke" "after-handler" "when")}
        {Lisp-Entry "get-class-image" #f 255 16 255 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 259 16 259 37 ("nextmethod" "else" "after-handler" "insets" "division" "mode" "orientation" "state" "separator" "field-name" "case" "property")}}}})
"Spy-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "spy" "Spy-View.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.spy.Spy-View" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Spy-View" #f 49 7 49 15 ("row" "selection-mode:" "tree" "tree-header" "fill" "layout-type:" "content" "vscroll?:" "tree-scroller" "edge" "border-type:" "306" "33" "0" "tree-border" "on-on/off" "710" "on/off" "on-slowdown" "686" "slowdown" "on-clear" ":form" "605" "clear" "on-spy-family" "180" "spy-family" "on-spy" "156" "spy" "76" "keyboard" "52" "mouse" "28" "paint" "selected?:" ":icons" "portfolio:" "on-category" "parent:" "Event-Handler" "action-handler:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "6" "4" "Point" "position:" "all" "name:" "east" "location:" "339" "736" "Dimension" "size:" "View")
        {Lisp-Entry "clients" #f 52 12 52 19 ("set-clients" "get-clients")}
        {Lisp-Entry "active?" #f 55 8 55 15 ()}
        {Lisp-Entry "slowdown?" #f 56 8 56 17 ()}
        {Lisp-Entry "slowdown-quantum" #f 57 8 57 24 ("1000")}
        {Lisp-Entry "category" #f 58 8 58 16 ("all" "'all")}
        {Lisp-Entry "old-consumer" #f 59 8 59 20 ()}
        {Lisp-Entry "get-tree" #f 86 18 86 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "get-clients" #f 95 18 95 29 ("clients")}
        {Lisp-Entry "set-clients" #f 99 18 99 29 ("activate" "set!" "clients" "unspy" "for-each" "active?" "when" "list")}
        {Lisp-Entry "activate" #f 106 11 106 19 ("on/off" "'on/off" "locate" "set-selected?" "clients" "spy" "for-each" "active?" "set!")}
        {Lisp-Entry "destroy" #f 117 11 117 18 ("nextmethod" "set-clients")}
        {Lisp-Entry "resize" #f 122 11 122 17 ("tree-border" "'tree-border" "size-figure" "on/off" "'on/off" "slowdown" "'slowdown" "0" "clear" "'clear" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-category" #f 130 11 130 22 ("get-sender" "get-name" "category" "set!" "evt")}
        {Lisp-Entry "on-spy" #f 134 11 134 17 ("list" "set-clients" "views" "windows" "case" "figure" "spy-domain" "domain" "let*" "pos" "view" "position" "window" "function" "pick-figure" "unimplemented" "evt")}
        {Lisp-Entry "on-spy-family" #f 144 11 144 24 ("collect-family" "set-clients" "views" "windows" "case" "figure" "spy-domain" "domain" "let*" "pos" "view" "position" "window" "function" "pick-figure" "unimplemented" "evt")}
        {Lisp-Entry "pick-figure" #f 154 11 154 22 ("tooltips?:" "report-figure?:" "obscure-unhighlighted?:" "views" "'views" "eq?" "highlight-figure?:" "highlight:" "click:" "get-player" "list" "exclude:" "pick-figure" "spy-domain" "domain" "let" "unimplemented" "action")}
        {Lisp-Entry "on-clear" #f 168 11 168 19 ("get-tree" "remove-every-row" "evt")}
        {Lisp-Entry "on-slowdown" #f 172 11 172 22 ("not" "slowdown?" "set!" "evt")}
        {Lisp-Entry "on-on/off" #f 176 11 176 20 ("unspy" "clients" "spy" "for-each" "if" "not" "active?" "set!" "evt")}
        {Lisp-Entry "spy-domain" #f 188 29 188 39 ()}
        {Lisp-Entry "spy" #f 192 29 192 32 ("client")}
        {Lisp-Entry "unspy" #f 196 29 196 34 ("client")}}}})
"Stack-Presenter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "debuggee" "Stack-Presenter.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.debuggee.Stack-Presenter" #f 37 9 37 52 ("jazz")}})
"Stack-Snapshot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "snapshot" "Stack-Snapshot.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.snapshot.Stack-Snapshot" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Stack-Snapshot" #f 47 7 47 21 ("Viewable" "Object")}}})
"Stage"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Stage.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Stage" #f 37 9 37 27 ("jazz")
      {Lisp-Entry "Stage" #f 50 7 50 12 ("Dark" "name:" "Color" "background:" "View")
        {Lisp-Entry "maximized?" #f 53 8 53 18 ()}
        {Lisp-Entry "fullscreen?" #f 54 8 54 19 ()}
        {Lisp-Entry "get-border" #f 66 18 66 28 ("parent")}
        {Lisp-Entry "stage-activate" #f 75 26 75 40 ("client-deactivate" "view" "function" "for-each-docked" "get-toplevel" "set-caption" "maximized?" "when")}
        {Lisp-Entry "stage-deactivate" #f 83 26 83 42 ()}
        {Lisp-Entry "get-maximized?" #f 92 18 92 32 ("maximized?")}
        {Lisp-Entry "set-maximized?" #f 96 18 96 32 ("restore" "maximize" "if" "value")}
        {Lisp-Entry "toggle-maximized" #f 102 18 102 34 ("maximized?" "not" "set-maximized?")}
        {Lisp-Entry "maximize" #f 106 18 106 26 ("get-title" "set-caption" "children" "get-guest" "get-host" "maximize" "get-visible?" "frame" "for-each" "set-caption?" "set-maximized?" "when" "maximized?" "set!" "selected-workspace" "workspace" "first-view" "current" "get-menubar" "menubar" "get-application" "appl" "get-toplevel" "toplevel" "get-border" "border" "let*" "function" "with-locked-update")}
        {Lisp-Entry "restore" #f 131 18 131 25 ("children" "get-guest" "get-host" "restore" "get-visible?" "when" "frame" "for-each" "set-caption?" "selected-workspace" "set-maximized?" "maximized?" "set!" "get-menubar" "menubar" "get-application" "appl" "get-toplevel" "toplevel" "get-border" "border" "let*" "function" "with-locked-update")}
        {Lisp-Entry "get-fullscreen?" #f 156 18 156 33 ("fullscreen?")}
        {Lisp-Entry "set-fullscreen?" #f 160 18 160 33 ("set!" "fullscreen?" "neq?" "when" "value")}
        {Lisp-Entry "install-wallpaper" #f 170 26 170 43 ()}
        {Lisp-Entry "size-change" #f 179 11 179 22 ("layout-frames" "nextmethod" "size")}
        {Lisp-Entry "layout-frames" #f 184 11 184 24 ("children" "get-host" "maximize-bounds" "get-visible?" "frame" "function" "for-each" "maximized?" "when" "size")}
        {Lisp-Entry "draw-children" #f 198 11 198 24 ("reverse" "paint" "rect-in-rect?" "opaque" "function" "some?" "unless" "cons" "size" "h/v/size->rect" "rect" "get-v" "get-h" "+" "get-position" "pos" "cdr" "get-visible?" "not" "if" "car" "drawing" "let" "not-null?" "when" "opaques" "children" "draw" "define" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "mouse-down" #f 222 11 222 21 ("acquire-focus" "pos")}
        {Lisp-Entry "key-down" #f 232 11 232 19 ("acquire-focus" "command-shell" "toolbar" "get-toplevel" "locate-component" "view" "let" "eqv?" "when" "char")}}}})
"Stage-Border"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Stage-Border.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Stage-Border" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Stage-Border" #f 46 7 46 19 ("View")
        {Lisp-Entry "size-change" #f 49 11 49 22 ("layout-stage" "nextmethod" "size")}
        {Lisp-Entry "get-stage" #f 59 18 59 27 ("stage" "'stage" "child")}
        {Lisp-Entry "maximize" #f 68 18 68 26 ("get-size" "layout-stage")}
        {Lisp-Entry "restore" #f 72 18 72 25 ("get-size" "layout-stage")}
        {Lisp-Entry "layout-stage" #f 81 11 81 23 ("+" "Dimension" "-" "set-size" "Point" "new" "set-position" "2" "1" "0" "if" "width" "get-fullscreen?" "fullscreen?" "get-maximized?" "maximized?" "get-stage" "stage" "let*" "size")}
        {Lisp-Entry "Frame-Color" #f 95 14 95 25 ("blue:" "green:" "128" "red:" "Color")}
        {Lisp-Entry "draw" #f 99 11 99 15 ("White" "name:" "Color" "-" "1" "or" "unless" "get-fullscreen?" "fullscreen?" "get-maximized?" "maximized?" "get-stage" "stage" "let*" "Frame-Color" "get-bottom" "get-right" "0" "Rect" "new" "frame-rect" "get-bounds" "bounds" "let" "lv" "lh" "context" "surface")}}}})
"Stage-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Stage-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Stage-Preferences" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Stage-Preferences" #f 48 7 48 24 ("Bitmap-Resource" "icon:" "title:" "Figure-Preferences")
        {Lisp-Entry "apply-root" #f 60 11 60 21 ("apply-to" "get-root" "set-offscreen?" "get-stage" "get-parent" "set-root" "player")}
        {Lisp-Entry "apply-preferences" #f 66 11 66 28 ("apply-to" "set-parent" "get-stage" "get-parent" "stage-border" "let" "assert" "parent")}
        {Lisp-Entry "apply-to" #f 73 11 73 19 ("get-visible?" "set-visible?" "location" "set-location" "stage-border")}
        {Lisp-Entry "get-class-image" #f 83 16 83 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" #f 87 11 87 37 ("location")}}}})
"Standard-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Standard-Workspace.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Standard-Workspace" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Standard-Workspace" #f 46 7 46 25 (":status" "-23" "line" "status" ":toolbar" "27" "second" "toolbar" ":menubar" "model-name:" "first" "vert" "orientation:" "split" "state:" "21" "division:" "edge" "separator:" "root" "location:" "menubar" "name:" "Workspace-Preferences")}}})
"Static-Init-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Static-Init-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Static-Init-Entry" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Static-Init-Entry" #f 45 7 45 24 ("Hierarchical-Entry")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("self" "new" "references" "column" "line" "name" "modifiers" "context")}
        {Lisp-Entry "present-name" #f 53 11 53 23 ()}
        {Lisp-Entry "print-catalog" #f 57 11 57 24 ("references" "column" "line" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 64 11 64 20 ("Bitmap-Resource")}
        {Lisp-Entry "update-indexes" #f 73 11 73 25 ("references" "update-index" "key" "function" "for-each" "references-index" "definitions-index")}}}})
"Status-Label"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Status-Label.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Status-Label" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Status-Label" #f 47 7 47 19 ("Medium" "name:" "Color" "background:" "View")
        {Lisp-Entry "icon" #f 50 12 50 16 ("set-icon" "get-icon")}
        {Lisp-Entry "mouse-activate?" #f 57 11 57 26 ()}
        {Lisp-Entry "set-title" #f 66 11 66 20 ("update-view" "nextmethod" "title~self" "empty-string?" "and" "unless" "title")}
        {Lisp-Entry "get-icon" #f 72 18 72 26 ("icon")}
        {Lisp-Entry "set-icon" #f 76 18 76 26 ("invalidate-view" "icon" "set!" "icn")}
        {Lisp-Entry "draw-background" #f 86 11 86 26 ("fill-rect" "-1" "inflate-rect" "rect" "get-bounds" "bounds" "let*" "background" "when" "context" "surface")}
        {Lisp-Entry "draw" #f 93 11 93 15 ("draw-body" "draw-icon" "rectangle" "'rectangle" "edges:" "sunken" "'sunken" "outer:" "get-bounds" "draw-edge" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-icon" #f 99 11 99 20 ("get-icons-cache" "draw-image" "top" "2" "left" "get-application" "appl" "let" "icon" "when" "context" "surface")}
        {Lisp-Entry "draw-body" #f 107 11 107 20 ("draw-text" "Black" "Color" "set-text-color" "Caption" "name:" "Font" "set-font" "4" "top" "3" "20" "icon" "if" "left" "localize" "let" "title" "when" "surface")}}}})
"Status-Toolbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Status-Toolbar.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Status-Toolbar" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Status-Toolbar" #f 48 7 48 21 ("Medium" "name:" "Color" "background:" "Toolbar")
        {Lisp-Entry "finish" #f 55 11 55 17 ("update-status" "when" "selected-workspace" "workspace" "let" "nextmethod" "rest")}
        {Lisp-Entry "host-install" #f 62 11 62 23 ("self" "set-status-bar" "get-application" "appl" "let")}
        {Lisp-Entry "host-uninstall" #f 67 11 67 25 ("set-status-bar" "get-application" "appl" "let")}
        {Lisp-Entry "layout" #f 77 11 77 17 ("get-height" "get-width" "children" "layout" "padding:" "2" "0" "Rect" "insets:" "Flow-Layout" "new" "flow" "let")}}}})
"String-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "String-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.String-Domain" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "String-Domain" #f 45 7 45 20 ("Domain")
        {Lisp-Entry "validate-value" #f 53 11 53 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "string?" "not" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 63 11 63 18 ("value")}}}})
"String-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "String-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.String-Request" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "String-Request" #f 47 7 47 21 ("167" "cancel" "default?:" "on-ok" "action-handler:" "24" "80" "ok" "Entry-Border" "Color" "color:" "198" "52" "93" "message" "on-cancel" ":host" "escape-press-handler:" "on-return-press" "return-press-handler:" "on-content-change" ":form" "Event-Handler" "content-change-handler:" "top-padding:" "2" "left-padding:" "accepts-returns?:" "text" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "edge" "border-type:" "19" "183" "28" "108" "Label" "Font" "font:" "16" "70" "30" "Point" "position:" "title:" "prefix" "name:" "120" "322" "Dimension" "size:" "View")
        {Lisp-Entry "accepts-empty?" #f 50 12 50 26 ("set-accepts-empty?" "get-accepts-empty?")}
        {Lisp-Entry "unicity-domain" #f 51 12 51 26 ("set-unicity-domain" "get-unicity-domain")}
        {Lisp-Entry "validator" #f 52 12 52 21 ("set-validator" "get-validator")}
        {Lisp-Entry "get-accepts-empty?" #f 72 18 72 36 ("accepts-empty?")}
        {Lisp-Entry "set-accepts-empty?" #f 76 18 76 36 ("name-change" "accepts-empty?" "set!" "value")}
        {Lisp-Entry "get-unicity-domain" #f 81 18 81 36 ("unicity-domain")}
        {Lisp-Entry "set-unicity-domain" #f 85 18 85 36 ("name-change" "unicity-domain" "set!" "value")}
        {Lisp-Entry "get-validator" #f 90 18 90 31 ("validator")}
        {Lisp-Entry "set-validator" #f 94 18 94 31 ("name-change" "validator" "set!" "value")}
        {Lisp-Entry "host-title" #f 104 16 104 26 ()}
        {Lisp-Entry "on-content-change" #f 113 11 113 28 ("name-change" "evt")}
        {Lisp-Entry "on-return-press" #f 117 11 117 26 ("get-modal-result" "end-modal" "get-host" "dialog" "let" "ok" "'ok" "locate" "get-enabled?" "when" "evt")}
        {Lisp-Entry "name-change" #f 123 11 123 22 ("null?" "let" "validator" "equal" "'equal" "sort-predicate" "test:" "member?" "unicity-domain" "empty-string?" "accepts-empty?" "continuation-return" "not" "if" "'message" "set-title" "ok" "'ok" "set-enabled?" "message" "enabled?" "proc" "get-string-content" "name" "'text" "locate" "text" "let*" "return" "function" "continuation-capture" "name-validated?" "when")}
        {Lisp-Entry "name-validated?" #f 144 11 144 26 ("validator" "unicity-domain" "accepts-empty?" "not" "or")}
        {Lisp-Entry "get-modal-result" #f 153 11 153 27 ("text" "'text" "locate" "get-string-content")}}}})
"String-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "String-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.String-Row" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "String-Row" #f 45 7 45 17 ("Value-Row")
        {Lisp-Entry "present" #f 53 11 53 18 ("format" "not" "nullable?" "and" "if" "value")}
        {Lisp-Entry "get-edited-value" #f 64 11 64 27 ("=" "empty-string?" "or" "nullable?" "and" "if" "editor" "get-string-content" "string" "let")}}}})
"String-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "String-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.String-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "String-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-wi=" "test-string" "invoke")}
        {Lisp-Entry "string" #f 63 14 63 20 ()}
        {Lisp-Entry "test-string" #f 67 11 67 22 ("4" "set-element!" "1" "string" "element" "=" "rpt" "validate")}
        {Lisp-Entry "ansistring" #f 79 14 79 24 ("Ansi-String" "coerce")}
        {Lisp-Entry "test-ansi-string" #f 84 11 84 27 ("4" "set-element!" "1" "ansistring" "element" "=" "rpt" "validate")}
        {Lisp-Entry "test-wi=" #f 95 11 95 19 ("not" "wi=" "rpt" "validate")}}}})
"Structure-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Structure-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Structure-Tester" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Structure-Tester" #f 45 7 45 23 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-structure" "invoke")}
        {Lisp-Entry "test-structure" #f 61 11 61 25 ()}}}})
"Stub-Interface"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "remote" "Stub-Interface.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm.remote.Stub-Interface" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Stub-Interface" #f 40 7 40 21 ("Interface")
        {Lisp-Entry "local-class" #f 43 35 43 46 ()}
        {Lisp-Entry "remote-class" #f 44 35 44 47 ()}}}})
"Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Style.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Style" #f 37 9 37 27 ("jazz")
      {Lisp-Entry "Style" #f 44 7 44 12 ("bottom" "'bottom" "initialize" "alignment" "Exemplar")
        {Lisp-Entry "get-width" #f 56 26 56 35 ()}
        {Lisp-Entry "get-height" #f 60 26 60 36 ()}
        {Lisp-Entry "run-width" #f 64 26 64 35 ("run")}
        {Lisp-Entry "justify-element" #f 73 21 73 36 ("2" "fxceiling/" "center" "-" "0" "top" "bottom" "'bottom" "alignment" "either" "case" "height" "element-height")}
        {Lisp-Entry "propagate?" #f 85 26 85 36 ()}
        {Lisp-Entry "scan" #f 94 29 94 33 ("default-scan" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "default-scan" #f 98 11 98 23 ("2" "fxround/" "0" "+" "right" "get-width" "width" "let*" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "wrap" #f 109 29 109 33 ("else" "place-update" "<=" "cond" "get-width" "+" "right" "let" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "place-update" #f 122 29 122 41 ("v" "h")}
        {Lisp-Entry "height-update" #f 126 29 126 42 ("height")}
        {Lisp-Entry "draw-style" #f 135 29 135 39 ("get-width" "enabled?" "left" "tabs" "line-height" "v" "h" "string" "context" "surface")}}}})
"Surface"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "Surface.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.Surface" #f 38 9 38 32 ("jazz")
      {Lisp-Entry "Surface" #f 55 7 55 14 ("else" "EndPage" "end-page" "StartPage" "start-page" "EndDoc" "end-doc" "surface" "cairo_win32_surface_get_dc" "StartDoc" "rec" "start-doc" "public" "method" "windows" "cond-expand" "Object")
        {Lisp-Entry "clipper" #f 58 8 58 15 ("0" "Rect" "new")}
        {Lisp-Entry "surface" #f 59 8 59 15 ()}
        {Lisp-Entry "context" #f 60 8 60 15 ()}
        {Lisp-Entry "dash-array" #f 61 8 61 18 ()}
        {Lisp-Entry "empty-array" #f 62 8 62 19 ()}
        {Lisp-Entry "glyph-array" #f 63 8 63 19 ()}
        {Lisp-Entry "array-length" #f 64 8 64 20 ("0")}
        {Lisp-Entry "landscape?" #f 65 8 65 18 ()}
        {Lisp-Entry "landscape-rotation" #f 66 8 66 26 ()}
        {Lisp-Entry "landscape-page" #f 67 8 67 22 ()}
        {Lisp-Entry "initialize" #f 70 11 70 21 ("destroy-mandatory" "cairo_create" "context~self" "surface~self" "set!" "nextmethod" "rest" "surface")}
        {Lisp-Entry "destroy" #f 77 11 77 18 ("nextmethod" "destroy-context" "destroy-surface" "glyph-array" "glyph-array-free")}
        {Lisp-Entry "new-context" #f 84 18 84 29 ("surface" "cairo_create" "context" "set!" "destroy-context")}
        {Lisp-Entry "destroy-surface" #f 89 29 89 44 ("set!" "cairo_surface_destroy" "error" "0" "/=" "cairo-surface-status" "err" "let" "surface" "when")}
        {Lisp-Entry "destroy-context" #f 98 29 98 44 ("set!" "cairo_destroy" "error" "0" "/=" "cairo-status" "err" "let" "context" "when")}
        {Lisp-Entry "cairo-finish" #f 107 18 107 30 ("surface" "cairo_surface_finish")}
        {Lisp-Entry "show-page" #f 111 18 111 27 ("surface" "cairo_surface_show_page")}
        {Lisp-Entry "get-context" #f 121 18 121 29 ("context")}
        {Lisp-Entry "get-surface" #f 125 18 125 29 ("surface")}
        {Lisp-Entry "logical->device" #f 137 18 137 33 ("context" "cairo_user_to_device" "shape")}
        {Lisp-Entry "device->logical" #f 141 18 141 33 ("get-v" "get-h" "get-bottom" "get-right" "pt2" "get-top" "get-left" "new" "pt1" "let" "Rect" "context" "cairo_device_to_user" "Point" "typecase" "shape")}
        {Lisp-Entry "setup-clipper" #f 156 18 156 31 ("set-clipper" "clipper")}
        {Lisp-Entry "get-clipper" #f 160 18 160 29 ("get-bottom" "get-right" "get-top" "clipper" "get-left" "Rect" "new")}
        {Lisp-Entry "get-logical-clipper" #f 167 18 167 37 ("get-clipper" "device->logical")}
        {Lisp-Entry "set-clipper" #f 171 18 171 29 ("select-clipper" "get-bottom" "set-bottom" "get-right" "set-right" "get-top" "set-top" "get-left" "clipper" "set-left" "rect")}
        {Lisp-Entry "select-clipper" #f 179 18 179 32 ("cairo_clip" "draw-rectangle" "context" "cairo_reset_clip" "rect")}
        {Lisp-Entry "with-clipper" #f 185 18 185 30 ("when" "set!" "set-clipper" "begin" "unwind-protect" "selected?" "let" "rect-intersection" "new-clipper" "get-clipper" "old-clipper" "let*" "proc" "clip-rect")}
        {Lisp-Entry "with-landscape" #f 203 18 203 32 ("landscape-page" "landscape-rotation" "set!" "begin" "unwind-protect" "landscape?" "preserved" "let" "proc" "page" "rotation")}
        {Lisp-Entry "set-transform" #f 226 18 226 31 ("cairo_translate" "set-transform-unscaled" "values" "cairo_matrix_t-free" "cairo_set_matrix" "cairo_matrix_t-y0-set!" "exact->inexact" "cairo_matrix_t-x0-set!" "cairo_matrix_t-yy-set!" "cairo_matrix_t-yx-set!" "cairo_matrix_t-xy-set!" "0.0" "cairo_matrix_t-xx-set!" "set-clipper" "rect-intersection" "new-clipper" "get-clipper" "old-clipper" "counterclockwise" "Rect" "new" "clipper" "cairo_identity_matrix" "context" "cairo_get_matrix" "new-matrix" "cairo_matrix_t-make" "old-matrix" "let" "cheight" "fxceiling" "cwidth" "cv" "round" "ch" "get-width" "dy" "else" "landscape-page" "cast" "get-height" "clockwise" "landscape-rotation" "case" "*" "+" "landscape?" "not" "if" "dx" "dv" "-" "dh" "let*" "set-transform-scaled" "define" "sc?" "sc" "sv" "sh" "height" "width" "lv" "lh" "drawing")}
        {Lisp-Entry "with-transform" #f 282 18 282 32 ("cairo_matrix_t-free" "cairo_set_matrix" "set-clipper" "context" "cairo_identity_matrix" "set-transform" "old-matrix" "old-clipper" "receive" "proc" "sc?" "sc" "sv" "sh" "height" "width" "lv" "lh" "drawing")}
        {Lisp-Entry "set-text-color" #f 296 18 296 32 ("set-color" "color")}
        {Lisp-Entry "get-char-width" #f 300 18 300 32 ("cairo_text_extents_t-free" "cairo_glyph_t-free" "cairo_text_extents_t-x_advance-ref" "fxround" "width" "1" "cairo_glyph_extents" "cairo_glyph_t-y-set!" "0." "cairo_glyph_t-x-set!" "cairo_glyph_t-index-set!" "surface" "cairo_glyph_index" "ch" "context" "cairo_get_font_face" "cairo-get-font" "get-handle" "handle" "let*" "cairo_glyph_t-make" "gly" "cairo_text_extents_t-make" "ext" "let" "n")}
        {Lisp-Entry "get-char-widths" #f 315 18 315 33 ("cairo_text_extents_t-free" "cairo_glyph_t-free" "cairo_text_extents_t-x_advance-ref" "fxround" "vector-set!" "cairo_glyph_extents" "cairo_glyph_t-y-set!" "0." "cairo_glyph_t-x-set!" "cairo_glyph_t-index-set!" "surface" "cairo_glyph_index" "ch" "context" "cairo_get_font_face" "cairo-get-font" "get-handle" "handle" "let*" "do" "to" "from" "i" "for" "loop" "1" "-" "+" "make-vector" "vec" "cairo_glyph_t-make" "gly" "cairo_text_extents_t-make" "ext" "let" "255" "last" "last:" "0" "first" "first:")}
        {Lisp-Entry "get-text-extent" #f 333 18 333 33 ("cairo_font_extents_t-free" "cairo_text_extents_t-free" "cairo_font_extents_t-height-ref" "cairo_text_extents_t-x_advance-ref" "fxround" "Dimension" "new" "prog1" "context" "cairo_text_extents" "get-text-metrics" "metrics" "cairo_text_extents_t-make" "extents" "with" "text")}
        {Lisp-Entry "get-font-height" #f 344 18 344 33 ("cairo_font_extents_t-free" "cairo_font_extents_t-height-ref" "fxround" "prog1" "context" "cairo_font_extents" "cairo_font_extents_t-make" "extents" "with")}
        {Lisp-Entry "get-text-metrics" #f 351 18 351 34 ("context" "cairo_font_extents" "cairo_font_extents_t-make" "info" "let")}
        {Lisp-Entry "cairo_extents->dimension" #f 357 18 357 42 ("cairo_text_extents_t-height-ref" "cairo_text_extents_t-width-ref" "fxceiling" "Dimension" "new" "extents")}
        {Lisp-Entry "get-text-width" #f 363 18 363 32 ("cairo_text_extents_t-free" "cairo_text_extents_t-x_advance-ref" "fxceiling" "prog1" "context" "cairo_text_extents" "cairo_text_extents_t-make" "extents" "with" "text")}
        {Lisp-Entry "draw-text" #f 370 18 370 27 ("-" "cairo_text_extents_t-free" "cairo_font_extents_t-free" "cairo_show_glyphs" "cairo_set_source" "cairo_get_source" "yo" "cairo_text_extents_t-x_advance-ref" "1" "cairo_glyph_extents" "cairo_glyph_t-y-set!" "cast" "cairo_glyph_t-x-set!" "cairo_glyph_t-index-set!" "element" "char->integer" "surface" "cairo_glyph_index" "ch" "glyph-array-ref" "glyph" "cairo_get_font_face" "cairo-get-font" "get-handle" "handle" "let*" "0" "i" "iter" "cairo_font_extents_t-ascent-ref" "fxround" "+" "y" "context" "cairo_font_extents" "2" "*" "glyph-array-make" "set!" "glyph-array-free" "glyph-array" "when" "begin" "array-length" "<" "if" "cardinality" "lgt" "cairo_text_extents_t-make" "extents" "cairo_font_extents_t-make" "font-ext" "uph" "let" "rest" "str" "v" "h")}
        {Lisp-Entry "draw-substring" #f 403 11 403 25 ("-" "cairo_text_extents_t-free" "cairo_font_extents_t-free" "cairo_show_glyphs" "set-text-color" "cairo_font_extents_t-height-ref" "Rect" "new" "fill-rect" "cairo_text_extents_t-x_advance-ref" "1" "cairo_glyph_extents" "cairo_glyph_t-y-set!" "cast" "cairo_glyph_t-x-set!" "cairo_glyph_t-index-set!" "element" "char->integer" "surface" "cairo_glyph_index" "ch" "glyph-array-ref" "glyph" "cairo_get_font_face" "cairo-get-font" "get-handle" "handle" "let*" "0" "i" "iter" "cairo_font_extents_t-ascent-ref" "fxround" "+" "y" "context" "cairo_font_extents" "2" "*" "glyph-array-make" "set!" "glyph-array-free" "glyph-array" "when" "begin" "array-length" "<" "if" "cardinality" "lgt" "cairo_text_extents_t-make" "extents" "cairo_font_extents_t-make" "font-ext" "uph" "let" "highlight-color" "color" "str" "v" "h")}
        {Lisp-Entry "draw-tabbed-text" #f 437 18 437 34 ("-" "cdr" "1" "car" "cast" "<=" "while" "subseq!" "draw-substring" "+" "set!" "/=" "element" "eqv?" "when" "cardinality" "below" "from" "i" "for" "loop" "stops" "0" "beginning" "uph" "let" "highlight-color" "color" "origin" "tabs" "str" "v" "h")}
        {Lisp-Entry "fill-region" #f 459 18 459 29 ("fill-rect" "do" "get-rectangles" "in" "rect" "for" "loop" "color" "region")}
        {Lisp-Entry "gradient-fill" #f 464 18 464 31 ("cairo_pattern_destroy" "fill" "context" "cairo_set_source" "draw-rectangle" "add-color-stop" "color" "offset" "bind" "stop" "function" "for-each" "vertical" "create-linear-pattern" "case" "pattern" "vertmid" "2" "-" "fxfloor/" "horzmid" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "let*" "horizontal" "'horizontal" "direction" "direction:" "stops" "rect")}
        {Lisp-Entry "ellipse" #f 486 18 486 25 ("fill" "stroke-preserve" "stroke" "not" "get-width" "Pen" "and" "set-line-width" "get-color-for-object" "Color" "is?" "if" "set-color" "when" "M_PI" "*" "1" "0" "cast" "cairo_arc" "cairo_scale" "context" "cairo_translate" "ty" "2" "/" "+" "exact->inexact" "tx" "h" "-" "w" "get-bottom" "bottom" "get-top" "top" "get-right" "right" "get-left" "left" "let" "inside" "outside" "rect")}
        {Lisp-Entry "draw-image" #f 516 18 516 28 ("paint" "set-source-surface" "y" "x" "handle")}
        {Lisp-Entry "draw-scroll-bar" #f 526 18 526 33 ("4" "get-top" "3" "get-left" "+" "draw-arrow-tip" "Black" "0" "else" "dv" "down" "'down" "up" "'up" "2" "right" "'right" "1" "left" "'left" "eq?" "cond" "dh" "let" "rectangle" "'rectangle" "edges:" "outer:" "raised" "'raised" "inner:" "draw-edge" "fill" "Draw-Edge-Light" "name:" "Color" "set-color" "draw-rectangle" "direction" "rect")}
        {Lisp-Entry "draw-caption" #f 542 18 542 30 ("7.5" "9" "-8.5" "-7" "8.5" "maximize" "'maximize" "2.5" "8" "-1" "move-to-rel" "-5.5" "-4" "0" "5.5" "line-to-rel" "0.5" "restore" "'restore" "6" "5" "minimize" "'minimize" "stroke" "line-to" "3" "4" "move-to" "set-line-width" "close" "'close" "eq?" "cond" "let" "Black" "raised" "'raised" "outer:" "get-bottom" "get-right" "-" "get-top" "1" "get-left" "+" "Rect" "new" "rectangle" "'rectangle" "edges:" "sunken" "'sunken" "inner:" "draw-edge" "begin" "if" "fill" "Draw-Edge-Light" "name:" "Color" "set-color" "draw-rectangle" "pushed?" "type" "rect")}
        {Lisp-Entry "draw-radio-button" #f 598 18 598 35 ("Black" "when" "Draw-Edge-Light" "Draw-Edge-Dark" "stroke" "Draw-Edge-Medium" "7" "4" "3" "exact->inexact" "1" "set-line-width" "fill" "White" "Light-Background" "name:" "Color" "if" "set-color" "M_PI" "2" "*" "0" "cast" "context" "cairo_arc" "r" "get-bottom" "get-top" "y" "2." "get-right" "-" "/" "get-left" "+" "x" "let" "selected?" "selected?:" "inactive?" "inactive?:" "rect")}
        {Lisp-Entry "draw-push-button" #f 626 18 626 34 ("stroke" "line-to-no-stroke" "move-to" "White" "2" "+" "Draw-Edge-Medium" "get-bottom" "get-right" "-" "get-top" "get-left" "line" "Draw-Edge-Dark" "name:" "Color" "set-color" "begin" "if" "1" "set-line-width" "pushed?" "rect")}
        {Lisp-Entry "set-source-surface" #f 658 18 658 36 ("get-surface" "Surface" "is?" "if" "context" "cairo_set_source_surface" "y" "x" "surface")}
        {Lisp-Entry "blit-surface" #f 665 18 665 30 ("paint" "get-v" "destination" "get-h" "set-source-surface" "surface")}
        {Lisp-Entry "set-font" #f 679 18 679 26 ("get-scaled-font" "context" "cairo_set_scaled_font" "font")}
        {Lisp-Entry "set-pen" #f 683 18 683 25 ("get-color" "set-color" "get-width" "set-line-width" "cairo_set_solid" "context" "cairo_set_alternate" "alternate" "'alternate" "get-style" "eq?" "if" "pen")}
        {Lisp-Entry "draw-edge" #f 691 18 691 27 ("Draw-Edge-Light" "'bottom" "226" "blue:" "239" "green:" "241" "red:" "new" "2" "-" "Draw-Edge-Medium" "'right" "get-bottom" "'left" "Draw-Edge-Dark" "sunken" "'sunken" "get-right" "get-top" "+" "get-left" "line" "White" "name:" "Color" "set-color" "raised" "'raised" "cond" "'top" "memq?" "when" "1" "set-line-width" "bottom" "top" "right" "left" "eq?" "if" "let" "outer" "outer:" "inner" "inner:" "rectangle" "'rectangle" "edges" "edges:" "rect")}
        {Lisp-Entry "fill-rect" #f 768 18 768 27 ("fill" "draw-rectangle" "set-color" "color" "rect")}
        {Lisp-Entry "draw-check" #f 774 18 774 28 ("stroke" "7" "4" "6" "3" "1" "5" "2" "0" "+" "line" "v" "h")}
        {Lisp-Entry "draw-raised" #f 785 18 785 29 ("line-to" "Dark" "stroke" "get-right" "get-top" "line-to-no-stroke" "1" "get-bottom" "-" "get-left" "move-to" "Light-Background" "name:" "Color" "color:" "Pen" "new" "set-pen" "rect")}
        {Lisp-Entry "draw-arrow-tip" #f 797 18 797 32 ("right" "height" "left" "down" "0" "naturals" "2" "decrease!" "line" "n" "function" "for-each" "increase!" "+" "-" "width" "let" "up" "case" "1" "set-line-width" "direction" "size" "v" "h")}
        {Lisp-Entry "with-outside/inside" #f 860 11 860 30 ("stroke-preserve" "1" "get-width" "Pen" "and" "set-line-width" "fill" "get-color-for-object" "Color" "is?" "if" "set-color" "when" "inside-proc" "outside-proc" "inside" "outside")}
        {Lisp-Entry "frame-rect" #f 878 18 878 28 ("stroke" "get-bottom" "get-right" "-" "get-top" "0.5" "get-left" "+" "Rect" "new" "draw-rectangle" "set-color" "1" "set-line-width" "color" "rect")}
        {Lisp-Entry "rectangle" #f 890 18 890 27 ("-0.5" "inflate-rect" "draw-rectangle" "function" "with-outside/inside" "inside" "outside" "rect")}
        {Lisp-Entry "get-color-for-object" #f 903 18 903 38 ("get-name" "Color" "dispatch" "not" "if" "get-color" "color" "let" "Pen" "is?" "when" "object")}
        {Lisp-Entry "cairo-move-to" #f 916 18 916 31 ("context" "cairo_move_to" "v" "h")}
        {Lisp-Entry "cairo-line-to" #f 920 18 920 31 ("context" "cairo_line_to" "v" "h")}
        {Lisp-Entry "arc" #f 924 18 924 21 ("cast" "context" "cairo_arc" "angle2" "angle1" "radius" "vc" "hc")}
        {Lisp-Entry "curve-to-relative" #f 928 18 928 35 ("cast" "context" "cairo_rel_curve_to" "dy3" "dx3" "dy2" "dx2" "dy1" "dx1")}
        {Lisp-Entry "close-path" #f 932 18 932 28 ("context" "cairo_close_path")}
        {Lisp-Entry "create-linear-pattern" #f 936 18 936 39 ("cast" "cairo_pattern_create_linear" "ev" "eh" "sv" "sh")}
        {Lisp-Entry "set-source" #f 940 18 940 28 ("context" "cairo_set_source" "pattern")}
        {Lisp-Entry "scale" #f 944 18 944 23 ("exact->inexact" "context" "cairo_scale" "sv" "sh")}
        {Lisp-Entry "move-to" #f 953 18 953 25 ("context" "cairo_move_to" "v" "h")}
        {Lisp-Entry "line-to" #f 957 18 957 25 ("stroke" "line-to-no-stroke" "v" "h")}
        {Lisp-Entry "line-to-preserve" #f 962 18 962 34 ("stroke-preserve" "line-to-no-stroke" "v" "h")}
        {Lisp-Entry "line-to-no-stroke" #f 967 18 967 35 ("cairo_line_to" "0.5" "+" "move-to" "begin" "=" "if" "let" "get-v" "cur-v" "get-h" "cur-h" "context" "cairo_current_point" "pt" "let*" "v" "h")}
        {Lisp-Entry "line-to-rel" #f 984 18 984 29 ("context" "cairo_rel_line_to" "dv" "dh")}
        {Lisp-Entry "move-to-rel" #f 988 18 988 29 ("context" "cairo_rel_move_to" "dv" "dh")}
        {Lisp-Entry "line" #f 992 18 992 22 ("line-to" "move-to" "dest-v" "dest-h" "v" "h")}
        {Lisp-Entry "pixel-to" #f 997 18 997 26 ("1" "+" "line-to" "move-to" "v" "h")}
        {Lisp-Entry "set-line-width" #f 1002 18 1002 32 ("context" "cairo_set_line_width" "w")}
        {Lisp-Entry "get-line-width" #f 1006 18 1006 32 ("context" "cairo_get_line_width")}
        {Lisp-Entry "stroke" #f 1010 18 1010 24 ("context" "cairo_stroke")}
        {Lisp-Entry "stroke-preserve" #f 1014 18 1014 33 ("context" "cairo_stroke_preserve")}
        {Lisp-Entry "fill" #f 1018 18 1018 22 ("context" "cairo_fill")}
        {Lisp-Entry "fill-preserve" #f 1022 18 1022 31 ("context" "cairo_fill_preserve")}
        {Lisp-Entry "paint" #f 1026 18 1026 23 ("context" "cairo_paint")}
        {Lisp-Entry "draw-rectangle" #f 1030 18 1030 32 ("cast" "context" "cairo_rectangle" "get-bottom" "h" "get-right" "-" "w" "get-top" "y" "get-left" "x" "let" "rect")}
        {Lisp-Entry "set-color" #f 1042 18 1042 27 ("cairo_set_source_rgba" "context" "cairo_set_source_rgb" "not" "if" "get-alpha" "a" "get-blue" "b" "get-green" "g" "255.0" "get-red" "/" "exact->inexact" "r" "let" "color")}
        {Lisp-Entry "add-color-stop" #f 1052 11 1052 25 ("cairo_pattern_add_color_stop_rgba" "exact->inexact" "cairo_pattern_add_color_stop_rgb" "not" "if" "get-alpha" "a" "get-blue" "b" "get-green" "g" "255" "get-red" "/" "r" "let" "color" "offset" "pattern")}
        {Lisp-Entry "export-to-png" #f 1062 18 1062 31 ("parse" "surface" "cairo_surface_write_to_png" "file")}
        {Lisp-Entry "cairo-status" #f 1066 18 1066 30 ("context" "cairo_status")}
        {Lisp-Entry "cairo-surface-status" #f 1070 18 1070 38 ("surface" "cairo_surface_status")}}}})
"Surrogate-Handler"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "surrogate" "Surrogate-Handler.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.surrogate.Surrogate-Handler" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Surrogate-Handler" #f 45 7 45 24 ("Event-Handler")
        {Lisp-Entry "preserved" #f 48 8 48 17 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("preserved~self" "set!" "nextmethod" "apply" "others" "preserved" "bind-keywords" "rest")}
        {Lisp-Entry "get-preserved" #f 57 18 57 31 ("preserved")}}}})
"Symbol-Completer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Symbol-Completer.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Symbol-Completer" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Symbol-Completer" #f 45 7 45 23 ("Object")
        {Lisp-Entry "domain" #f 48 8 48 14 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("domain~self" "set!" "nextmethod" "domain")}
        {Lisp-Entry "complete" #f 61 26 61 34 ("get-output" "domain" "put" "compare-n" "when" "target" "function" "for-each" "List-Factory" "new" "result" "cardinality" "length" "let" "eqv?" "test" "test:" "string")}}}})
"Symbol-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Symbol-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Symbol-Request" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Symbol-Request" #f 46 7 46 21 ("String-Request")
        {Lisp-Entry "form-model" #f 49 11 49 21 ("nextmethod" "else" "IDE-Text-View" "text" "get-name" "case" "form")}}}})
"Symbol-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Symbol-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Symbol-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Symbol-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-symbol" "invoke")}
        {Lisp-Entry "test-symbol" #f 61 11 61 22 ()}}}})
"Synchronize-Box"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Synchronize-Box.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Synchronize-Box" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Synchronize-Box" #f 48 7 48 22 ("on-no-action" "535" "no-action" "on-copy-left" "513" "copy-left" "on-copy-right" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "9" "491" "Point" "position:" "copy-right" "name:" "Message-Box")
        {Lisp-Entry "layout-box" #f 63 11 63 21 ("get-height" "400" "Dimension" "new" "set-size" "border" "'border" "locate" "border-view" "nextmethod" "dialog-size" "let" "default" "actions" "content" "icon" "size" "title" "selection" "text")}}}})
"Synchronize-Depots"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Synchronize-Depots.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Synchronize-Depots" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Synchronize-Depots" #f 47 7 47 25 ("12" "100" "Dimension" "size:" "title:" "backup" "mode" "name:" "Compare-Directories")
        {Lisp-Entry "host-title" #f 61 16 61 26 ()}
        {Lisp-Entry "get-directories" #f 70 11 70 26 ("get-pathname" "values" "require-right-moniker" "item" "let")}
        {Lisp-Entry "new-comparer" #f 75 11 75 23 ("Depot-Synchronizer" "new")}
        {Lisp-Entry "backup-action" #f 85 11 85 24 ("read-only?" "copy-left" "'copy-left" "not" "if" "when" "item-date" "item" "file-date" "file" "date")}
        {Lisp-Entry "merge-action" #f 93 11 93 23 ("read-only?" "checked-out-me" "'checked-out-me" "eq?" "get-status" "status" "let" "copy-right" "'copy-right" "not" "if" "when" "item-date" "item" "file-date" "file" "base-date")}}}})
"Synchronize-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Synchronize-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Synchronize-Entry" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Synchronize-Entry" #f 45 7 45 24 ("Object")
        {Lisp-Entry "kind" #f 48 18 48 22 ()}
        {Lisp-Entry "left" #f 49 18 49 22 ()}
        {Lisp-Entry "right" #f 50 18 50 23 ()}
        {Lisp-Entry "action" #f 51 18 51 24 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("action~self" "right~self" "left~self" "kind~self" "set!" "nextmethod" "right-value" "right" "left-value" "left" "kind")}
        {Lisp-Entry "print" #f 62 11 62 16 ("action" "right" "left" "format" "function" "self" "print-unreadable" "readably" "printer")}}}})
"Synchronize-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Synchronize-Tree.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Synchronize-Tree" #f 37 9 37 48 ("Synchronize-Right-Column" "Synchronize-Action-Column" "Synchronize-Left-Column" "register-autoclass" "jazz")
      {Lisp-Entry "Synchronize-Tree" #f 47 7 47 23 ("right" "75" "action" "center" "justification:" "80" "left" "toplevel-controls?:" "200" "width:" "title:" "name:" "multiple-selection?:" "path" "filled-column:" "row" "selection-mode:" ":icons" "portfolio:" "Tree-View")}
      {Lisp-Entry "Synchronize-Item-Column" #f 63 7 63 30 ("Tree-Column")
        {Lisp-Entry "draw-cell" #f 66 11 66 20 ("0" "2" "16" "-" "quotient" "get-application" "get-icons-cache" "draw-image" "present-image" "image" "present?" "not" "when" "get-right" "get-left" "node" "'node" "get-kind" "=" "and" "lvl?" "let" "draw-background" "height" "width" "cell" "row" "context" "surface")}
        {Lisp-Entry "present?" #f 75 38 75 46 ("cell")}
        {Lisp-Entry "present-image" #f 79 38 79 51 ("cell")}}
      {Lisp-Entry "Synchronize-Left-Column" #f 88 7 88 30 ("Synchronize-Item-Column")
        {Lisp-Entry "present?" #f 91 11 91 19 ("get-left" "cell")}
        {Lisp-Entry "present-image" #f 95 11 95 24 ("Bitmap-Resource" "cell")}}
      {Lisp-Entry "Synchronize-Action-Column" #f 107 7 107 32 ("Tree-Column")
        {Lisp-Entry "draw-cell" #f 110 11 110 20 ("0" "1" "2" "16" "-" "quotient" "+" "get-icons-cache" "draw-image" "get-right" "get-left" "action-image" "image" "get-application" "appl" "when" "get-action" "action" "let" "draw-background" "height" "width" "cell" "row" "context" "surface")}}
      {Lisp-Entry "Synchronize-Right-Column" #f 128 7 128 31 ("Synchronize-Item-Column")
        {Lisp-Entry "present?" #f 131 11 131 19 ("get-right" "cell")}
        {Lisp-Entry "present-image" #f 135 11 135 24 ("Bitmap-Resource" "cell")}}}})
"Syntax-Doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "doc" "Syntax-Doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.doc.Syntax-Doc" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Syntax-Doc" #f 46 7 46 17 ("Element-Doc")
        {Lisp-Entry "parameters" #f 49 12 49 22 ("generate")}
        {Lisp-Entry "get-class-image" #f 57 16 57 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-row-instance" #f 61 11 61 27 ("nextmethod" "else" "String-Row" "new" "parameters" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 67 11 67 37 ("parameters")}}}})
"Syntax-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Syntax-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Syntax-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Syntax-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-decrease!" "test-increase!" "test-set!" "test-either" "test-essay" "test-or" "test-and" "test-typecase" "test-ecase" "test-case" "test-cond" "test-prog1" "test-begin" "test-for" "test-until" "test-while" "test-unless" "test-when" "test-if" "test-quote" "invoke")}
        {Lisp-Entry "test-quote" #f 80 11 80 21 ("self" "quote" "code-walk" "error?" "begin" "'c" "'b" "'a" "list" "c" "b" "a" "=" "rpt" "validate")}
        {Lisp-Entry "test-if" #f 94 11 94 18 ("self" "if" "code-walk" "error?" "rpt" "validate" "begin")}
        {Lisp-Entry "test-when" #f 106 11 106 20 ("self" "when" "code-walk" "error?" "rpt" "validate" "begin")}
        {Lisp-Entry "test-unless" #f 117 11 117 22 ("5" "2" "unless" "7" "3" "get-counter" "+" "set-counter" "X" "new" "x" "let" "50" "foo" "=" "rpt" "validate")}
        {Lisp-Entry "test-while" #f 133 11 133 21 ()}
        {Lisp-Entry "test-until" #f 142 11 142 21 ()}
        {Lisp-Entry "test-for" #f 151 11 151 19 ()}
        {Lisp-Entry "test-begin" #f 160 11 160 21 ()}
        {Lisp-Entry "test-prog1" #f 169 11 169 21 ()}
        {Lisp-Entry "test-cond" #f 178 11 178 20 ("9" "else" "8" "7" "5" "=" "3" "y" "2" "x" "not" "rpt" "validate" "cond" "v" "let")}
        {Lisp-Entry "test-case" #f 195 11 195 20 ("9" "else" "8" "7" "5" "3" "=" "not" "rpt" "validate" "2" "case" "v" "let")}
        {Lisp-Entry "test-ecase" #f 211 11 211 21 ("9" "else" "8" "7" "=" "3" "y" "x" "not" "rpt" "validate" "2" "ecase" "v" "let")}
        {Lisp-Entry "test-typecase" #f 229 11 229 24 ("9" "else" "8" "Number" "7" "Symbol" "3" "=" "not" "rpt" "validate" "2" "typecase" "v" "let")}
        {Lisp-Entry "test-and" #f 245 11 245 19 ("5" "3" "2" "and" "=" "rpt" "validate")}
        {Lisp-Entry "test-or" #f 258 11 258 18 ("3" "2" "+" "or" "=" "rpt" "validate")}
        {Lisp-Entry "test-essay" #f 271 11 271 21 ("5" "3" "2" "essay" "=" "rpt" "validate")}
        {Lisp-Entry "test-either" #f 281 11 281 22 ("5" "3" "2" "+" "either" "=" "rpt" "validate")}
        {Lisp-Entry "test-set!" #f 292 11 292 20 ()}
        {Lisp-Entry "foo" #f 301 11 301 14 ("5" "increase!" "10" "below" "from" "for" "loop" "0" "total" "n" "let")}
        {Lisp-Entry "test-increase!" #f 309 11 309 25 ("50" "foo" "=" "rpt" "validate")}
        {Lisp-Entry "goo" #f 318 11 318 14 ("5" "decrease!" "10" "to" "1" "from" "i" "for" "loop" "100" "total" "let" "n")}
        {Lisp-Entry "test-decrease!" #f 325 11 325 25 ("50" "5" "goo" "=" "rpt" "validate")}}
      {Lisp-Entry "X" #f 334 7 334 8 ("Object")
        {Lisp-Entry "counter" #f 337 8 337 15 ("4")}}}})
"Systype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "provider" "Systype.jazz"} 1226584774
    {Lisp-Entry "jazz.database.provider.Systype" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Systype" #f 44 7 44 14 ("Object")
        {Lisp-Entry "name" #f 47 8 47 12 ()}
        {Lisp-Entry "size" #f 48 8 48 12 ()}
        {Lisp-Entry "precision" #f 49 8 49 17 ()}
        {Lisp-Entry "scale" #f 50 8 50 13 ()}
        {Lisp-Entry "default-value" #f 51 8 51 21 ()}
        {Lisp-Entry "construct-literal" #f 55 16 55 33 ("self" "new" "read-only" "'read-only" "=" "String" "is?" "null?" "integer?" "or" "assert" "default-value" "scale" "precision" "size" "name" "context")}
        {Lisp-Entry "initialize" #f 63 11 63 21 ("default-value~self" "scale~self" "precision~self" "size~self" "name~self" "set!" "nextmethod" "default-value" "scale" "precision" "size" "name")}
        {Lisp-Entry "compare-object" #f 72 11 72 25 (":not-equal" "else" ":equal" "get-default-value" "default-value" "get-scale" "scale" "get-precision" "precision" "get-size" "size" "get-name" "name" "=" "and" ":incompatible" "Systype" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 85 11 85 23 ("default-value" ",default-value" "',default-value" "scale" ",scale" "',scale" "precision" ",precision" "',precision" "size" ",size" "',size" "name" ",name" "',name" "Systype" "new")}
        {Lisp-Entry "foldable?" #f 90 11 90 20 ()}
        {Lisp-Entry "fold-object" #f 95 11 95 22 ("default-value" "scale" "precision" "size" "name" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "print" #f 106 11 106 16 ("default-value" "scale" "precision" "size" "name" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" #f 121 18 121 26 ("name")}
        {Lisp-Entry "get-size" #f 125 18 125 26 ("size")}
        {Lisp-Entry "get-precision" #f 129 18 129 31 ("precision")}
        {Lisp-Entry "get-scale" #f 133 18 133 27 ("scale")}
        {Lisp-Entry "get-default-value" #f 137 18 137 35 ("default-value")}
        {Lisp-Entry "get-sizeable?" #f 141 18 141 31 ("size" "null?")}
        {Lisp-Entry "get-fixed?" #f 145 18 145 28 ("size" "not-null?")}
        {Lisp-Entry "get-precisionable?" #f 149 18 149 36 ("precision" "not-null?")}
        {Lisp-Entry "get-scalable?" #f 153 18 153 31 ("scale" "not-null?")}
        {Lisp-Entry "get-defaultable?" #f 157 18 157 34 ("default-value" "not-null?")}
        {Lisp-Entry "present" #f 166 18 166 25 ("name" "format")}}}})
"TCP-Client"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "host" "TCP-Client.jazz"} 1226584783
    {Lisp-Entry "jazz.network.host.TCP-Client" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "TCP-Client" #f 44 7 44 17 ("Object")
        {Lisp-Entry "port" #f 47 8 47 12 ()}}}})
"TCP-Server"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "host" "TCP-Server.jazz"} 1226584783
    {Lisp-Entry "jazz.network.host.TCP-Server" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "TCP-Server" #f 43 7 43 17 ("Object")
        {Lisp-Entry "name" #f 46 8 46 12 ()}
        {Lisp-Entry "host" #f 47 8 47 12 ()}
        {Lisp-Entry "service" #f 48 8 48 15 ()}
        {Lisp-Entry "socket-info" #f 49 8 49 19 ()}
        {Lisp-Entry "started-condition" #f 50 8 50 25 ()}
        {Lisp-Entry "state" #f 51 8 51 13 ("stopped" "'stopped")}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("make-condition" "started-condition~self" "socket-info~self" "service~self" "host~self" "name~self" "set!" "nextmethod" "service" "host" "name" "bind-keywords" "rest")}
        {Lisp-Entry "get-name" #f 69 18 69 26 ("name")}
        {Lisp-Entry "get-host" #f 73 18 73 26 ("host")}
        {Lisp-Entry "get-service" #f 77 18 77 29 ("service")}
        {Lisp-Entry "get-socket-info" #f 81 18 81 33 ("socket-info")}
        {Lisp-Entry "get-state" #f 85 18 85 27 ("state")}
        {Lisp-Entry "set-state" #f 89 11 89 20 ("state" "set!" "value")}
        {Lisp-Entry "start" #f 98 11 98 16 ("server-name" "start-listener" "lambda" "new-thread" "thread-start!" "starting" "'starting" "set-state")}
        {Lisp-Entry "stop" #f 107 11 107 15 ("stopping" "'stopping" "set-state")}
        {Lisp-Entry "restart" #f 111 11 111 18 ("start" "wait-stopped" "stop")}
        {Lisp-Entry "wait-started" #f 117 11 117 23 ("0.25" "thread-sleep!" "error?" "error?:")}
        {Lisp-Entry "wait-stopped" #f 122 11 122 23 ("0.25" "thread-sleep!" "error?" "error?:")}
        {Lisp-Entry "Server-Timeout" #f 132 14 132 28 ("0.25")}
        {Lisp-Entry "server-name" #f 136 29 136 40 ("get-name" "either")}
        {Lisp-Entry "server-host" #f 141 29 141 40 ("get-host")}
        {Lisp-Entry "server-service" #f 145 29 145 43 ("get-service")}
        {Lisp-Entry "connection-name" #f 149 29 149 44 ()}
        {Lisp-Entry "start-listener" #f 153 11 153 25 ("stopped" "'stopped" "close-port" "connection-name" "accept-connection" "lambda" "new-thread" "thread-start!" "eof-object?" "unless" "read" "port" "Server-Timeout" "input-port-timeout-set!" "stopping" "'stopping" "state" "neq?" "when" "loop" "started" "'started" "set-state" "tcp-server-socket-info" "socket-info" "set!" "begin" "unwind-protect" "cr-lf" "'cr-lf" "eol-encoding:" "port-number:" "server-address:" "list" "open-tcp-server" "server-port" "server-service" "resolve-service" "number" "server-host" "resolve-host" "address" "let")}
        {Lisp-Entry "listening-host" #f 178 11 178 25 ("socket-info-address" "socket-info" "essay")}
        {Lisp-Entry "listening-port" #f 182 11 182 25 ("socket-info-port-number" "socket-info" "essay")}
        {Lisp-Entry "accept-connection" #f 191 29 191 46 ("port")}}}})
"Tab-Sheet"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Tab-Sheet.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Tab-Sheet" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Tab-Sheet" #f 45 7 45 16 ("Container")
        {Lisp-Entry "title-color" #f 48 12 48 23 ("set-title-color" "get-title-color")}
        {Lisp-Entry "borders" #f 51 18 51 25 ("generate")}
        {Lisp-Entry "get-title-color" #f 59 18 59 33 ("title-color")}
        {Lisp-Entry "set-title-color" #f 63 18 63 33 ("parent" "invalidate-view" "title-color" "set!" "value")}
        {Lisp-Entry "get-transparent?" #f 73 11 73 27 ()}
        {Lisp-Entry "layout" #f 82 11 82 17 ("21" "get-height" "2" "get-width" "-" "Dimension" "new" "set-size" "20" "1" "Point" "set-position" "get-size" "size" "when" "'content" "find-child" "content" "let")}
        {Lisp-Entry "get-class-image" #f 95 16 95 31 ("Bitmap-Resource")}}}})
"Tab-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Tab-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Tab-View" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Tab-View" #f 46 7 46 15 ("View")
        {Lisp-Entry "orientation" #f 49 12 49 23 ("set-orientation" "get-orientation" "top" "'top")}
        {Lisp-Entry "padding" #f 52 8 52 15 ("10")}
        {Lisp-Entry "headers-height" #f 53 8 53 22 ("20")}
        {Lisp-Entry "selection" #f 54 8 54 17 ("0")}
        {Lisp-Entry "add-child" #f 62 11 62 20 ("layout-view" "update-borders" "set-visible?" "not" "when" "nextmethod" "children" "null?" "first?" "let" "child")}
        {Lisp-Entry "get-orientation" #f 76 18 76 33 ("orientation")}
        {Lisp-Entry "set-orientation" #f 80 18 80 33 ("invalidate-view" "orientation" "set!" "o")}
        {Lisp-Entry "get-content" #f 85 18 85 29 ("content" "'content" "locate")}
        {Lisp-Entry "mouse-down" #f 94 11 94 21 ("set-selection" "when" "find-header" "header" "let" "pos")}
        {Lisp-Entry "update-borders" #f 105 11 105 25 ("children" "set!" "increase!" "cons" "set-borders" "font" "text-extent" "get-width" "padding" "+" "next" "get-title" "localize" "title" "let*" "header" "function" "for-each" "2" "h" "0" "n" "let")}
        {Lisp-Entry "find-header" #f 117 11 117 22 ("length" "0" "naturals" "children" "continuation-return" ">=" "and" "get-borders" "right" "left" "bind" "n" "header" "for-each" "return" "function" "continuation-capture" "headers-height" "<" "when" "get-v" "v" "get-h" "h" "let" "pt")}
        {Lisp-Entry "redraw-header" #f 132 11 132 24 ("headers-height" "+" "0" "2" "-" "Rect" "new" "invalidate-rect" "child-ranked" "get-borders" "rg" "lf" "bind" "n")}
        {Lisp-Entry "get-selection" #f 142 18 142 31 ("selection")}
        {Lisp-Entry "set-selection" #f 146 18 146 31 ("call-selection-handler" "update-view" "redraw-header" "set!" "child-ranked" "set-visible?" "old" "let" "selection" "/=" "when" "user-origin?" "user-origin?:" "force?" "force?:" "sel")}
        {Lisp-Entry "get-selection-name" #f 160 18 160 36 ("selected-sheet" "get-name")}
        {Lisp-Entry "set-selection-name" #f 164 18 164 36 ("set-selection" "child-rank" "rank" "child" "sheet" "let*" "name")}
        {Lisp-Entry "selected-sheet" #f 170 18 170 32 ("selection" "child-ranked")}
        {Lisp-Entry "all-sheets" #f 179 18 179 28 ("get-children")}
        {Lisp-Entry "remove-every-sheet" #f 183 18 183 36 ("close-children")}
        {Lisp-Entry "layout" #f 192 11 192 17 ("children" "set-size" "0" "Point" "set-position" "Tab-Sheet" "is?" "when" "child" "function" "for-each" "get-size" "size" "let")}
        {Lisp-Entry "draw" #f 206 11 206 15 ("draw-bottom" "bottom" "draw-top" "top" "orientation" "case" "get-size" "size" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-top" #f 213 11 213 19 ("last" "cdr" "h" "let" "line" "length" "naturals" "5" "draw-text" "Color" "either" "set-text-color" "line-to-preserve" "3" "-" "Black" "1" "unless" "increase!" "decrease!" "when" "get-borders" "rg" "lf" "bind" "2" "selection" "=" "selected?" "get-title-color" "title-color" "get-title" "localize" "title" "n" "header" "function" "for-each" "line-to" "move-to" "Light" "Pen" "set-pen" "edges:" "outer:" "raised" "'raised" "inner:" "Rect" "new" "draw-edge" "Label" "name:" "Font" "set-font" "-1" "headers-height" "+" "children" "null?" "if" "content" "get-height" "bottom" "get-width" "right" "top" "0" "left" "let*" "size" "surface")}
        {Lisp-Entry "draw-bottom" #f 262 11 262 22 ("line-to" "move-to" "Label" "Font" "set-font" "Light" "name:" "Pen" "set-pen" "headers-height" "content" "get-height" "bottom" "1" "get-width" "-" "right" "top" "0" "left" "let*" "size" "surface")}
        {Lisp-Entry "get-class-image" #f 280 16 280 31 ("Bitmap-Resource")}}}})
"Table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Table.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Table" #f 37 9 37 27 ("jazz")
      {Lisp-Entry "Table" #f 46 7 46 12 ("Object")
        {Lisp-Entry "rows" #f 49 18 49 22 ()}
        {Lisp-Entry "construct-literal" #f 53 16 53 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("rows~self" "set!" "nextmethod" "rows" "rows:")}
        {Lisp-Entry "foldable?" #f 63 11 63 20 ()}
        {Lisp-Entry "fold-object" #f 68 11 68 22 ("rows" ":rows" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "print" #f 76 11 76 16 ("rows" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-rows" #f 87 18 87 26 ("rows")}}}})
"Table-Border"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Table-Border.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Table-Border" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Table-Border" #f 47 7 47 19 ("Label" "Font" "font:" ":icons" "portfolio:" "row-spacing:" "1" "column-spacing:" "filled-column:" "Entry-Border" "Color" "background:" "tree" "header" "fill" "layout-type:" "content" "vscroll?:" "document" "scroller" "name:" "entry" "style:" "edge" "border-type:" "Border-View")}}})
"Table-Cell"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Table-Cell.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Table-Cell" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Table-Cell" #f 47 7 47 17 ("Label" "Font" "font:" "text" "fill" "layout-type:" "content" "vscroll?:" "document" "scroller" "name:" "entry" "style:" "edge" "border-type:" "Border-View")}}})
"Table-Inspector"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "inspector" "Table-Inspector.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.inspector.Table-Inspector" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Table-Inspector" #f 48 7 48 22 ("column-spacing:" "1" "row-spacing:" "cell" "selection-mode:" "filled-column:" "Dark" "Color" "background:" "tree" "header" "fill" "content" "hscroll?:" "vscroll?:" "center" "location:" "scroller" "name:" "border" "layout-type:" "400" "696" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "table" #f 51 8 51 13 ()}
        {Lisp-Entry "host-title" #f 68 16 68 26 ()}
        {Lisp-Entry "host-position" #f 72 16 72 29 ("17" "35" "Point")}
        {Lisp-Entry "host-size" #f 76 16 76 25 ("614" "696" "Dimension")}
        {Lisp-Entry "get-tree" #f 85 18 85 26 ("tree" "'tree" "locate")}
        {Lisp-Entry "inspect-table" #f 94 18 94 31 ("set-filled-column" "display-table" "24" "get-prefered-width" "+" "column" "function" "map" "widths" "length" "affected" "get-rows" "rows" "get-columns" "columns" "get-tree" "tree" "let*" "table~self" "set!" "filled-column" "filled-column:" "table")}
        {Lisp-Entry "display-table" #f 105 11 105 24 ("Tree-Label" "value" "map" "present-value" "Tree-Node" "new" "cons" "children:" "add-row" "cdr" "rest" "first" "get-values" "values" "row" "set-display-images?" "when" "Tree-Label-Column" "width:" "get-name" "title:" "toplevel-controls?:" "Tree-Node-Column" "class:" "add-column" "if" "eq?" "node?" "let*" "width" "column" "function" "for-each" "car" "first-column" "let" "remove-columns" "widths" "affected" "rows" "columns" "tree")}
        {Lisp-Entry "present-value" #f 125 11 125 24 ("->string" "null?" "if" "value")}}}})
"Table-Inspector-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "inspector" "Table-Inspector-Tree.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.inspector.Table-Inspector-Tree" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Table-Inspector-Tree" #f 46 7 46 27 ("Tree-View")}}})
"Table-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Table-Row.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Table-Row" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Table-Row" #f 45 7 45 16 ("Object")
        {Lisp-Entry "children" #f 48 18 48 26 ()}
        {Lisp-Entry "sons" #f 49 18 49 22 ()}
        {Lisp-Entry "construct-literal" #f 53 16 53 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("sons~self" "children~self" "set!" "nextmethod" "sons" "children")}
        {Lisp-Entry "foldable?" #f 64 11 64 20 ()}
        {Lisp-Entry "fold-object" #f 69 11 69 22 ("sons" ":sons" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "print" #f 77 11 77 16 ("sons" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-sons" #f 88 18 88 26 ("sons")}}}})
"Table-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Table-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Table-Tester" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Table-Tester" #f 45 7 45 19 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-growth" "test-table" "invoke")}
        {Lisp-Entry "table" #f 62 14 62 19 ("eq?" "test:" "make-table")}
        {Lisp-Entry "test-table" #f 65 11 65 21 ("3" "5" "=" "goo" "'goo" "table-ref" "not" "rpt" "validate" "2" "foo" "'foo" "table" "table-set!")}
        {Lisp-Entry "small-table" #f 81 14 81 25 ("eq?" "test:" "make-table")}
        {Lisp-Entry "test-growth" #f 84 11 84 22 ("5" "hoo" "'hoo" "3" "goo" "'goo" "2" "foo" "'foo" "small-table" "table-set!")}}}})
"Table-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Table-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Table-Text-View" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Table-Text-View" #f 46 7 46 22 ("2" "top-padding:" "4" "left-padding:" "Formatted-Text-View")}}})
"Table-Tree-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Table-Tree-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Table-Tree-View" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Table-Tree-View" #f 45 7 45 22 ("Tree-View")}}})
"Template-Expander"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "template" "Template-Expander.jazz"} 1226584782
    {Lisp-Entry "jazz.library.template.Template-Expander" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Template-Expander" #f 44 7 44 24 ("Object")
        {Lisp-Entry "delimiter-escape" #f 47 8 47 24 ()}
        {Lisp-Entry "delimiter-start" #f 48 8 48 23 ()}
        {Lisp-Entry "delimiter-end" #f 49 8 49 21 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("delimiter-end~self" "delimiter-start~self" "delimiter-escape~self" "set!" "nextmethod" "delimiter-end" "delimiter-end:" "delimiter-start" "delimiter-start:" "delimiter-escape" "delimiter-escape:")}
        {Lisp-Entry "expand" #f 59 18 59 24 ("process-variable" "format" "peek-char" "delimiter-start" "eqv?" "if" "eof-object?" "not" "when" "read-char" "c" "iterate" "let" "template-reader" "input" "with-closed" "output" "associations" "template")}
        {Lisp-Entry "template-reader" #f 72 11 72 26 ("parse" "open-input-file" "open-input-string" "sequence?" "if" "template")}
        {Lisp-Entry "process-variable" #f 78 11 78 27 ("error" "cdr" "if" "assv" "info" "let" "format" "delimiter-end" "read-delimited" "name" "bind" "associations" "output" "input")}}}})
"Test-Architecture"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "support" "Test-Architecture.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.support.Test-Architecture" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Test-Architecture" #f 43 7 43 24 ("Component")
        {Lisp-Entry "author" #f 46 12 46 18 ("generate")}
        {Lisp-Entry "get-class-image" #f 54 16 54 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-class-presentation" #f 58 16 58 38 ()}
        {Lisp-Entry "property-presentation" #f 62 16 62 37 ("nextmethod" "else" "author" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 68 11 68 37 ("author" "name-info" "class-info")}
        {Lisp-Entry "get-addable-default-branch" #f 72 11 72 37 ("Test-Model")}
        {Lisp-Entry "get-addable-classes" #f 76 11 76 30 ("Test-Table" "list")}}}})
"Test-Architecture-Form"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "support" "Test-Architecture-Form.jazz"} 1226584789})
"Test-Model"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "support" "Test-Model.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.support.Test-Model" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Test-Model" #f 43 7 43 17 ("Branch")
        {Lisp-Entry "get-class-image" #f 51 16 51 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-class-presentation" #f 55 16 55 38 ()}}}})
"Test-Table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "support" "Test-Table.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.support.Test-Table" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Test-Table" #f 43 7 43 17 ("Component")
        {Lisp-Entry "description" #f 46 12 46 23 ("generate")}
        {Lisp-Entry "no" #f 47 12 47 14 ("generate" "5")}
        {Lisp-Entry "get-class-image" #f 55 16 55 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-class-presentation" #f 59 16 59 38 ()}
        {Lisp-Entry "property-presentation" #f 63 16 63 37 ("nextmethod" "else" "no" "description" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 70 11 70 37 ("no" "description" "name-info" "class-info")}
        {Lisp-Entry "get-row-instance" #f 74 11 74 27 ("nextmethod" "else" "Integer-Row" "no" "nullable?:" "String-Row" "new" "description" "field-name" "case" "property")}}}})
"Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "tester" "Tester.jazz"} 1226584789
    {Lisp-Entry "validate.Tester" #f 37 9 37 24 ("jazz")
      {Lisp-Entry "Tester" #f 40 7 40 13 ("Component")
        {Lisp-Entry "suite" #f 43 12 43 17 ("generate")}
        {Lisp-Entry "title" #f 44 12 44 17 ("generate")}
        {Lisp-Entry "test" #f 52 26 52 30 ("tester")}
        {Lisp-Entry "invoke" #f 56 21 56 27 ("get-message" "get-error" "title" "assertion-failed" "error" "Tester-Error" "catch" "suite" "null?" "if" "proc" "subtitle" "tester")}
        {Lisp-Entry "rpt" #f 64 11 64 14 ("Tester-Error" "new" "signal" "get-message" "get-error" "subtitle" "title" "suite" "assertion-failed" "form" "tester")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "tester" "Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.tester.Tester" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Tester" #f 44 7 44 13 ("Component")
        {Lisp-Entry "suite" #f 47 12 47 17 ("generate")}
        {Lisp-Entry "title" #f 48 12 48 17 ("generate")}
        {Lisp-Entry "test" #f 56 26 56 30 ()}
        {Lisp-Entry "invoke" #f 60 21 60 27 ("get-message" "title" "assertion-failed" "error" "Tester-Error" "catch" "suite" "null?" "if" "proc" "subtitle")}
        {Lisp-Entry "rpt" #f 68 11 68 14 ("form" "Tester-Error" "new" "signal" "title" "suite" "assertion-failed" "message")}}}})
"Tester-Error"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "tester" "Tester-Error.jazz"} 1226584789
    {Lisp-Entry "validate.Tester-Error" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Tester-Error" #f 40 7 40 19 ("Error")
        {Lisp-Entry "form" #f 43 8 43 12 ("generate")}
        {Lisp-Entry "string?" #f 44 8 44 15 ("generate")}
        {Lisp-Entry "initialize" #f 47 11 47 21 ("string?~self" "form~self" "set!" "nextmethod" "string?" "form" "self")}
        {Lisp-Entry "get-form" #f 58 18 58 26 ("form" "self")}
        {Lisp-Entry "get-message" #f 67 11 67 22 ("->string" "form" "string?" "if" "self")}
        {Lisp-Entry "present-message" #f 73 11 73 26 ("get-message" "format" "rest" "self")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "tester" "Tester-Error.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.tester.Tester-Error" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Tester-Error" #f 43 7 43 19 ("Error")
        {Lisp-Entry "form" #f 46 8 46 12 ()}
        {Lisp-Entry "string?" #f 47 8 47 15 ()}
        {Lisp-Entry "initialize" #f 50 11 50 21 ("string?~self" "form~self" "set!" "nextmethod" "string?" "form")}
        {Lisp-Entry "get-form" #f 61 18 61 26 ("form")}
        {Lisp-Entry "get-message" #f 70 11 70 22 ("->string" "form" "string?" "if")}
        {Lisp-Entry "present-message" #f 76 11 76 26 ("get-message" "format" "list" "rest")}}}})
"Text"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "Text" #f 45 7 45 11 ("Object")
        {Lisp-Entry "paragraphs" #f 48 18 48 28 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("paragraphs~self" "set!" "nextmethod" "paragraphs" "paragraphs:")}
        {Lisp-Entry "fold-literal" #f 56 11 56 23 ("paragraphs" ",paragraphs" "',paragraphs" "paragraphs:" "Text" "new")}
        {Lisp-Entry "print" #f 60 11 60 16 ("paragraphs" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-paragraphs" #f 71 18 71 32 ("paragraphs")}}}})
"Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Text-Actions.jazz"} 1226670525
    {Lisp-Entry "jazz.ui.preference.Text-Actions" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Text-Actions" #f 46 7 46 19 ("next-aux" "prior-aux" "document-end-aux" "document-home-aux" "extend-end-aux" "end-aux" "extend-home-aux" "home-aux" "delete-word-aux" "delete-char-aux" "downward-compound-aux" "upward-compound-aux" "extend-forward-compound-aux" "forward-compound-aux" "extend-backward-compound-aux" "backward-compound-aux" "extend-downward-aux" "move-downward-aux" "extend-upward-aux" "move-upward-aux" "extend-forward-word-aux" "move-forward-word-aux" "extend-forward-char-aux" "move-forward-char-aux" "extend-backward-word-aux" "move-backward-word-aux" "extend-backward-char-aux" "move-backward-char-aux" "on-unlock-anchor" "unlock-anchor" "on-lock-anchor" "lock-anchor" "one/none" "one/no-space" "one" "one-space" "none" "keep:" "on-remove-spaces" "no-space" "on-display-info" "display-info" "on-top-caret" "top-caret" "on-center-caret" "center-caret" "extend-mark" "on-jump-mark" "jump-mark" "on-set-mark" "set-mark" "Space" "on-select-outer" "select-outer" "on-goto-line" "goto-line" "on-find-previous" "find-previous" "F3" "on-find-next" "find-next" "on-find-backward" "find-backward" "on-find-forward" "find-forward" "on-search-backward-mode" "search-backward-mode" "on-search-forward-mode" "search-forward-mode" "on-paste" "paste" "Insert" "on-copy" "copy" "on-cut" "cut" "Backspace" "on-backspace-press" "backspace-word" "shift-tab" "Tab" "on-tab-press" "tab" "extend-next" "Next" "on-next" "next" "extend-prior" "Prior" "on-prior" "prior" "extend-document-end" "document-end" "extend-document-home" "document?:" "document-home" "extend-end" "End" "on-end" "end" "extend-home" "Home" "on-home" "home" "on-kill-line" "kill-line" "on-delete-word" "delete-word" "Delete" "on-delete-char" "delete-char" "on-downward-compound" "downward-compound" "on-upward-compound" "upward-compound" "extend-forward-compound" "on-forward-compound" "forward-compound" "extend-backward-compound" ":alt" "on-backward-compound" "backward-compound" "scroll-downward" "extend-downward" "Down" "down" "move-downward" "scroll?:" "scroll-upward" "extend-upward" "Up" "up" "move-upward" "extend-forward-word" "move-forward-word" "extend-forward-char" "Right" "right" "move-forward-char" "extend-backward-word" ":control" "move-backward-word" ":shift" "extend-backward-char" "Left" "Shortcut" "shortcut:" "word?:" "extend?:" "left" "direction:" "on-move" ":focus" "Event-Handler" "action-handler:" "move-backward-char" "name:" "Actions")}}})
"Text-Color-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-Color-Combo.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text-Color-Combo" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Text-Color-Combo" #f 46 7 46 23 ("pick" "tooltip-text:" "tooltip?:" "body" "name:" "Push-Combo")
        {Lisp-Entry "form-model" #f 55 11 55 21 ("nextmethod" "else" "Color-Button" "body" "get-name" "case" "form")}
        {Lisp-Entry "popup-colors" #f 66 18 66 30 ("self" "initiator:" "action-handler" "action-handler:" "Color-Picker" "popup" "get-height" "get-width" "0" "Point" "new" "pos" "let" "geometry" "geometry:" "colors" "colors:")}}}})
"Text-Colorizer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-Colorizer.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text-Colorizer" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Text-Colorizer" #f 45 7 45 21 ("Object")
        {Lisp-Entry "text" #f 48 8 48 12 ()}
        {Lisp-Entry "row" #f 49 8 49 11 ()}
        {Lisp-Entry "col" #f 50 8 50 11 ()}
        {Lisp-Entry "runs" #f 51 8 51 12 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("List-Factory" "new" "runs" "0" "col" "text" "set!" "nextmethod" "t")}
        {Lisp-Entry "apply-style" #f 61 18 61 29 ("add-runs" "get-col" "add-run" "=" "if" "text" "get-style" "style" "er" "get-row" "sr" "let" "name/style" "end" "start")}
        {Lisp-Entry "add-run" #f 70 11 70 18 ("get-runs" "get-style" "subseq!" "put-run" "put" "if" "<" "and" "cardinality" "cast" "+" "to" "str" "run" "function" "for-each" "from" "let" ">" "get-string" "string" "text" "get-paragraph" "paragraph" "let*" "runs" "reset" "0" "col" "set!" "finish-current" "/=" "row" "not" "or" "when" "style" "end" "start" "n")}
        {Lisp-Entry "add-runs" #f 97 11 97 19 ("else" "0" "get-string" "cardinality" "get-col" "add-run" "=" "cond" "text" "get-paragraph" "paragraph" "to" "from" "n" "for" "loop" "limit" "get-row" "beginning" "let" "style" "end" "start")}
        {Lisp-Entry "put-run" #f 107 11 107 18 ("Run" "new" "runs" "put" "style" "string")}
        {Lisp-Entry "finish-current" #f 111 18 111 32 ("wrap-paragraph" "set-runs" "get-output" "let" "Default" "'Default" "get-style" "subseq!" "Run" "new" "put" "col" ">" "cardinality" "len" "get-string" "string" "text" "get-paragraph" "paragraph" "let*" "runs" "row" "and" "when")}}}})
"Text-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-Combo.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text-Combo" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Text-Combo" #f 45 7 45 17 ("Combo-Box")
        {Lisp-Entry "client" #f 48 12 48 18 ("set-client" "get-client")}
        {Lisp-Entry "get-client" #f 56 18 56 28 ("client")}
        {Lisp-Entry "set-client" #f 60 18 60 28 ("client-update" "set!" "client" "neq?" "when" "value")}
        {Lisp-Entry "client-update" #f 66 29 66 42 ()}
        {Lisp-Entry "selection-change" #f 75 26 75 42 ()}}}})
"Text-Comparer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Text-Comparer.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Text-Comparer" #f 38 9 38 45 ("jazz")
      {Lisp-Entry "Text-Comparer" #f 47 7 47 20 ("Object")
        {Lisp-Entry "moniker1" #f 50 8 50 16 ()}
        {Lisp-Entry "moniker2" #f 51 8 51 16 ()}
        {Lisp-Entry "lines1" #f 52 8 52 14 ()}
        {Lisp-Entry "lines2" #f 53 8 53 14 ()}
        {Lisp-Entry "root" #f 54 8 54 12 ()}
        {Lisp-Entry "matches" #f 55 8 55 15 ()}
        {Lisp-Entry "compare-monikers" #f 58 18 58 34 ("compare-line-sets" "lines2" "read-moniker" "lines1" "moniker2" "moniker1" "set!" "m2" "m1")}
        {Lisp-Entry "compare-line-sets" #f 66 11 66 28 ("collect-lines" "1" "sames2" "element" "get-rank" "diff" "key:" "<" "sort" "sames1" "moniker2" "moniker1" "extract-diff" "node" "map" "sames" "collect-matches" "append!" "matches" "cdr" "for-each" "0" "string-ref" "list" "Compare-Node" "new" "set!" "root" "insert-line" "function" "proc" "get-string" "string" "car" "line" "let*" "not-null?" "and" "if" "collect-commons" "set2" "set1" "commons" "receive" "initial-set2" "initial-set1")}
        {Lisp-Entry "collect-lines" #f 88 11 88 24 ("get-output" "1" "+" "cdr" "when" "neq?" "color" "line" "lines2" "lines1" "subseq" "compare-line-sets" "put-sequence" "eq?" "cond" "second" "stop2" "stop1" "set!" "and" "if" "next" "let" "not" "done?" "increase!" "put" "<" "while" "create" "end" "proc" "'blue" "blue" "'green" "element" "list" "lines" "rank" "function" "green" "List-Factory" "new" "fact" "next2" "car" "not-null?" "essay" "next1" "end2" "last" "end1" "rank2" "first" "get-rank" "rank1" "let*" "set2" "set1" "sames2" "sames1")}
        {Lisp-Entry "collect-commons" #f 135 11 135 26 ("reverse!" "append!" "reverse" "middle2" "middle1" "commons-bottom" "bottom2" "bottom1" "commons-top" "receive" "values" "cdr" "list" "Compare-Node" "new" "cons" "set!" "get-string" "string=?" "while" "commons" "line2" "car" "not-null?" "and" "line1" "function" "proc" "let" "set2" "set1")}
        {Lisp-Entry "string-ref" #f 158 11 158 21 ("element" "cardinality" "<" "if" "n" "string")}
        {Lisp-Entry "insert-line" #f 164 11 164 22 ("0" "1" "+" "list" "not" "get-key" "key:" "get-children" "find-in" "matchnode" "c" "add-child" "set-lines" "Compare-Node" "new" "newnode" "string-ref" "key" "add-line" "string=?" "basestring" "let" "car" "null?" "if" "baseline" "get-lines" "lines" "let*" "n" "subnode" "function" "proc" "get-string" "string" "letrec" "line" "node")}
        {Lisp-Entry "collect-matches" #f 187 11 187 26 ("null?" "collect-matches" "map" "apply" "second" "first" "get-moniker" "neq?" "2" "length" "=" "not-null?" "and" "get-lines" "lines" "subnode" "function" "collect-if" "append!" "get-children" "children" "let" "node")}
        {Lisp-Entry "load-moniker" #f 206 29 206 41 ("char-encoding-errors:" "load-lines" "moniker")}
        {Lisp-Entry "read-moniker" #f 210 11 210 23 ("Compare-Line" "new" "collect" "0" "from" "n" "in" "string" "for" "loop" "load-moniker" "lines" "let" "moniker")}
        {Lisp-Entry "print-tree" #f 222 18 222 28 ("0" "get-children" "1" "+" "subnode" "for-each" "2" "*" "format" "level" "function" "proc" "letrec" "printer" "node")}}}})
"Text-Context-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-Context-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text-Context-Menu" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Text-Context-Menu" #f 46 7 46 24 ("select-all" "paste" "copy" "view" "Action" "action:" "Bitmap-Resource" "icon:" "french:" "english:" "Locales" "title:" "cut" "name:" "Context-Menu")}}})
"Text-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "entry" "Text-Entry.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.entry.Text-Entry" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Text-Entry" #f 51 7 51 17 ("text" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "scroller" "entry" "style:" "edge" "border-type:" "border" "name:" "Property-Entry")
        {Lisp-Entry "finish" #f 62 11 62 17 ("self" "text" "'text" "locate" "set-editor" "nextmethod" "rest")}
        {Lisp-Entry "tab-view" #f 72 11 72 19 ("text" "'text" "locate")}
        {Lisp-Entry "validate" #f 81 11 81 19 ("message:" "Property-Violation" "new" "get-nullable?" "not" "empty-string?" "and" "if" "text" "'text" "locate-component" "get-string-content" "content" "let" "domain")}
        {Lisp-Entry "get-modified?" #f 94 11 94 24 ("text" "'text" "locate" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 98 11 98 24 ("text" "'text" "locate" "set-modified?" "value")}
        {Lisp-Entry "set-editable?" #f 107 11 107 24 ("Medium" "White" "name:" "Color" "set-background" "text" "'text" "set-editable?" "none" "'none" "edge" "'edge" "if" "border" "'border" "locate" "set-border-type" "flag")}}}})
"Text-Event"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "event" "Text-Event.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.event.Text-Event" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Text-Event" #f 44 7 44 17 ("Event")}}})
"Text-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-Explorer.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text-Explorer" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Text-Explorer" #f 48 7 48 20 ("Explorer")
        {Lisp-Entry "text" #f 51 8 51 12 ()}
        {Lisp-Entry "paragraphs" #f 52 8 52 18 ()}
        {Lisp-Entry "limit" #f 53 8 53 13 ()}
        {Lisp-Entry "beginning" #f 54 8 54 17 ()}
        {Lisp-Entry "ending" #f 55 8 55 14 ()}
        {Lisp-Entry "start" #f 56 8 56 13 ("0" "Cell" "new")}
        {Lisp-Entry "end" #f 57 8 57 11 ("0" "Cell" "new")}
        {Lisp-Entry "kind" #f 58 8 58 12 ()}
        {Lisp-Entry "initialize" #f 61 11 61 21 ("set-end" "set-start" "or" "when" "set-range" "if" "set-direction" "text-ending" "ending" "text-beginning" "beginning" "get-limit" "limit" "get-paragraphs" "paragraphs" "text" "set!" "nextmethod" "range" "range:" "end" "end:" "start" "start:" "forward" "'forward" "direction" "direction:" "txt")}
        {Lisp-Entry "get-syntax" #f 76 29 76 39 ()}
        {Lisp-Entry "goto-beginning" #f 85 11 85 25 ("beginning" "set-start")}
        {Lisp-Entry "goto-ending" #f 89 11 89 22 ("ending" "set-end")}
        {Lisp-Entry "at-beginning?" #f 93 18 93 31 ("beginning" "start" "<=")}
        {Lisp-Entry "at-ending?" #f 97 18 97 28 ("ending" "end" ">=")}
        {Lisp-Entry "get-start" #f 101 18 101 27 ("start" "copy")}
        {Lisp-Entry "set-start" #f 105 18 105 27 ("get-col" "set-col" "get-row" "start" "set-row" "pos")}
        {Lisp-Entry "get-end" #f 110 18 110 25 ("end" "copy")}
        {Lisp-Entry "set-end" #f 114 18 114 25 ("get-col" "set-col" "get-row" "end" "set-row" "pos")}
        {Lisp-Entry "get-range" #f 119 18 119 27 ("end" "start" "copy" "Range$Cell$" "new")}
        {Lisp-Entry "set-range" #f 123 18 123 27 ("get-end" "set-end" "get-start" "set-start" "range")}
        {Lisp-Entry "set-pos" #f 128 18 128 25 ("set-end" "set-start" "pos")}
        {Lisp-Entry "get-kind" #f 138 25 138 33 ("kind")}
        {Lisp-Entry "set-kind" #f 142 28 142 36 ("kind" "set!" "knd")}
        {Lisp-Entry "get-paragraph" #f 146 18 146 31 ("paragraphs" "element" "n")}
        {Lisp-Entry "paragraph-string" #f 150 18 150 34 ("get-paragraph" "get-string" "n")}
        {Lisp-Entry "paragraph-length" #f 154 18 154 34 ("paragraph-string" "cardinality" "n")}
        {Lisp-Entry "get-char" #f 158 18 158 26 ("element" "cardinality" "cast" "<" "if" "get-paragraph" "get-string" "string" "get-col" "col" "get-row" "row" "let" "pos")}
        {Lisp-Entry "get-range-string" #f 167 18 167 34 ("Range$Cell$" "new" "text" "get-string" "end" "start")}
        {Lisp-Entry "get-marked" #f 171 18 171 28 ("end" "start" "get-range-string")}
        {Lisp-Entry "get-symbol-string" #f 177 18 177 35 ("get-marked" "end" "1" "+" "get-range-string" "start" "get-char" "eqv?" "if")}
        {Lisp-Entry "find-marked-symbol" #f 183 18 183 36 ("get-marked" "find-symbol")}
        {Lisp-Entry "intern-marked-symbol" #f 187 18 187 38 ("get-marked" "string->symbol")}
        {Lisp-Entry "get-range-symbol" #f 191 18 191 34 ("get-range-string" "find-symbol" "end" "start")}
        {Lisp-Entry "get-mark" #f 195 18 195 26 ("get-range" "get-kind" "Explorer-Mark" "new")}
        {Lisp-Entry "next!" #f 204 11 204 16 ("else" "0" "set-col" "1" "+" "set-row" "limit" "increase-col" "paragraph-length" "<" "cond" "get-col" "col" "get-row" "row" "let" "pos")}
        {Lisp-Entry "previous!" #f 218 11 218 20 ("else" "paragraph-length" "set-col" "set-row" "1" "-" "previous-row" "-1" "increase-col" "0" ">" "cond" "get-col" "col" "get-row" "row" "let" "pos")}
        {Lisp-Entry "next-cell!" #f 233 11 233 21 ("next!" "when" "pos")}
        {Lisp-Entry "previous-cell!" #f 238 11 238 25 ("previous!" "when" "pos")}
        {Lisp-Entry "next-pos" #f 243 11 243 19 ("else" "1" "-" "next!" "0" "<=" "cond" "iterate" "copy" "let" "offset" "pos")}
        {Lisp-Entry "previous-pos" #f 254 11 254 23 ("else" "1" "-" "previous!" "0" "<=" "cond" "iterate" "copy" "let" "offset" "pos")}
        {Lisp-Entry "forward" #f 265 11 265 18 ("end" "next!")}
        {Lisp-Entry "backward" #f 269 11 269 19 ("start" "previous!")}
        {Lisp-Entry "next-char" #f 273 18 273 27 ("get-char" "next-in-text?" "and" "when" "next-pos" "let" "offset" "pos")}
        {Lisp-Entry "char-forward" #f 279 25 279 37 ("end" "next-char" "offset")}
        {Lisp-Entry "previous-char" #f 283 18 283 31 ("get-char" "when" "1" "+" "previous-pos" "let" "offset" "pos")}
        {Lisp-Entry "char-backward" #f 289 25 289 38 ("start" "previous-char" "offset")}
        {Lisp-Entry "in-text?" #f 293 11 293 19 ("paragraph-length" "<=" "=" "limit" "<" "or" "0" ">=" "and" "get-col" "col" "get-row" "row" "let" "pos")}
        {Lisp-Entry "next-in-text?" #f 299 11 299 24 ("paragraph-length" "=" "and" "in-text?" "limit" "<" "if" "get-col" "col" "get-row" "row" "let" "pos")}
        {Lisp-Entry "forward-while" #f 307 18 307 31 ("forward" "not" "if" "0" "char-forward" "c" "iterate" "let" "predicate")}
        {Lisp-Entry "backward-while" #f 319 18 319 32 ("backward" "not" "if" "0" "char-backward" "c" "iterate" "let" "predicate")}
        {Lisp-Entry "forward-until" #f 331 18 331 31 ("not" "c" "function" "forward-while" "predicate")}
        {Lisp-Entry "backward-until" #f 335 18 335 32 ("not" "c" "function" "backward-while" "predicate")}
        {Lisp-Entry "forward-to" #f 339 18 339 28 ("eqv?" "c" "function" "forward-until" "char")}
        {Lisp-Entry "backward-to" #f 343 18 343 29 ("eqv?" "c" "function" "backward-until" "char")}
        {Lisp-Entry "forward-whitespaces" #f 347 18 347 37 ("whitespace?" "forward-while")}
        {Lisp-Entry "backward-whitespaces" #f 351 18 351 38 ("whitespace?" "backward-while")}
        {Lisp-Entry "forward-word" #f 360 18 360 30 ("forward" "word-constituent?" "not" "or" "if" "0" "char-forward" "c" "iterate" "let")}
        {Lisp-Entry "forward-non-word" #f 369 18 369 34 ("forward" "word-constituent?" "not" "or" "if" "0" "char-forward" "c" "iterate" "let")}
        {Lisp-Entry "backward-word" #f 378 18 378 31 ("backward" "word-constituent?" "not" "or" "if" "0" "char-backward" "c" "iterate" "let")}
        {Lisp-Entry "backward-non-word" #f 387 18 387 35 ("backward" "word-constituent?" "not" "or" "if" "0" "char-backward" "c" "iterate" "let")}
        {Lisp-Entry "outer-expr" #f 396 26 396 36 ("backward-word" "forward-word" "rest")}
        {Lisp-Entry "paragraph-start" #f 406 18 406 33 ("0" "start" "set-col")}
        {Lisp-Entry "paragraph-end" #f 410 18 410 31 ("get-row" "paragraph-length" "end" "set-col")}
        {Lisp-Entry "previous-paragraph" #f 414 18 414 36 ("0" "set-col" "-1" "start" "increase-row")}
        {Lisp-Entry "next-paragraph" #f 419 18 419 32 ("0" "set-col" "end" "increase-row")}
        {Lisp-Entry "paragraph-column" #f 424 18 424 34 ("eqv?" "c" "function" "forward-while")}
        {Lisp-Entry "backward-style" #f 433 18 433 32 ("backward" "get-style" "not" "or" "when" "start" "text" "get-run-at" "run" "iterate" "let" "predicate")}
        {Lisp-Entry "forward-style" #f 441 18 441 31 ("forward" "get-style" "not" "or" "text" "get-run-at" "run" "when" "1" "end" "next-pos" "next" "iterate" "let" "predicate")}
        {Lisp-Entry "select-style" #f 451 18 451 30 ("forward-style" "backward-style" "predicate")}}}})
"Text-File-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Text-File-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Text-File-Request" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Text-File-Request" #f 49 7 49 24 ("char-encoding" "166" "blue:" "188" "green:" "200" "red:" "Medium" "Color" "border-color:" "2" "Rect" "border-insets:" "22" "150" "0" "80" "auto-size?:" "3" "4" "Point" "position:" "title:" "24" "250" "Dimension" "size:" "buttonbar" "name:" "File-Request")
        {Lisp-Entry "host-title" #f 62 16 62 26 ()}
        {Lisp-Entry "finish" #f 66 11 66 17 ("update-char-encoding" "nextmethod" "rest")}
        {Lisp-Entry "Char-Encodings" #f 76 14 76 28 ("UTF-16" "UTF-8" "UTF" "ISO-8859-1" "ASCII")}
        {Lisp-Entry "update-char-encoding" #f 84 11 84 31 ("UTF" "'UTF" "set-value" "Char-Encodings" "set-choices" "char-encoding" "'char-encoding" "locate" "combo" "let")}
        {Lisp-Entry "get-modal-result" #f 95 11 95 27 ("char-encoding" "'char-encoding" "locate" "get-value" "nextmethod" "values")}}}})
"Text-Font-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-Font-Combo.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text-Font-Combo" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Text-Font-Combo" #f 45 7 45 22 ("Text-Combo")
        {Lisp-Entry "font-list" #f 48 14 48 23 ()}
        {Lisp-Entry "client-update" #f 56 11 56 24 ("font-list" "list" "name" "function" "map" "set-choices")}
        {Lisp-Entry "selection-change" #f 67 11 67 27 ("get-font" "get-font-name" "set-content" "Text-Style" "is?" "if" "get-style-at" "style" "client" "get-end" "end" "let*")}
        {Lisp-Entry "combo-choice" #f 80 11 80 23 ("selection-change" "get-value" "client" "set-selection-font-name")}}}})
"Text-Palette"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-Palette.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text-Palette" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Text-Palette" #f 50 7 50 19 ("on-insert-table" "insert-table" "table-separator" "on-insert-image" ":form" "insert-image" "image-separator" "on-toggle-ruler" "toggle-ruler" "ruler-separator" "on-pick-highlight-color" "Dark-Red" "on-highlight-color" "highlight-color" "0" "4" "on-pick-text-color" "pick" "Dark-Blue" "color:" "body" "on-text-color" "31" "text-color" "on-increase-indent" "increase-indent" "on-decrease-indent" "decrease-indent" "on-bulleted" "bulleted" "right" "justify-right" "centered" "justify-centered" "left" ":justification" "on-justify" "justification" "justify-left" "top" "selected?:" "alignment-top" "center" "alignment-center" "bottom" "alignment:" "on-alignment" "alignment" "group:" "alignment-bottom" "on-underline" "underline" "on-italic" "italic" "on-bold" ":focus" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "bold" "size" "40" "size-border" "font" "font-border" "enabled?:" "style" "166" "blue:" "188" "green:" "200" "red:" "Medium" "Color" "border-color:" "2" "Rect" "border-insets:" "21" "120" "Dimension" "size:" "style-border" "name:" "View")
        {Lisp-Entry "flow-layout" #f 53 8 53 19 ()}
        {Lisp-Entry "client" #f 54 8 54 14 ()}
        {Lisp-Entry "external-name" #f 101 16 101 29 ("text-palette" "'text-palette" "rest")}
        {Lisp-Entry "mouse-activate?" #f 105 11 105 26 ()}
        {Lisp-Entry "host-icon" #f 114 16 114 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 118 16 118 26 ()}
        {Lisp-Entry "host-install" #f 122 11 122 23 ("on-focus-change" "'on-focus-change" "method-name:" "self" "target:" "Event-Handler" "new" "add-focus-listener" "get-application" "appl" "let")}
        {Lisp-Entry "host-uninstall" #f 127 11 127 25 ("self" "remove-focus-listener" "get-application" "appl" "let")}
        {Lisp-Entry "finish" #f 137 11 137 17 ("layout-view" "0" "5" "4" "Rect" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "layout" #f 143 11 143 17 ("get-height" "get-width" "children" "flow-layout" "layout")}
        {Lisp-Entry "on-focus-change" #f 152 11 152 26 ("get-guest" "eq?" "get-host" "host" "or" "enable-buttons" "activate-text" "on-text" "'on-text" "method-name:" "target:" "Event-Handler" "new" "add-text-listener" "not" "remove-text-listener" "self" "text-listener?" "Formatted-Text-View" "is?" "and" "when" "get-new" "new-focus" "get-old" "old-focus" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-text" #f 172 11 172 18 ("selection-change" ":selection-change" "get-kind" "case" "evt")}
        {Lisp-Entry "on-insert-image" #f 177 11 177 26 ("insert-styled" "moniker:" "Image-Style" "new" "style" "choose-file" "moniker" "let*" "title:" "form>>" "client" "insert-view" "evt")}
        {Lisp-Entry "on-insert-table" #f 185 11 185 26 ("2" "row-count:" "100" "width:" "columns:" "node-column?:" "header?:" "101" "304" "Dimension" "size:" "client" "insert-table" "evt")}
        {Lisp-Entry "enable-buttons" #f 189 29 189 43 ("insert-table" "'insert-table" "insert-image" "'insert-image" "toggle-ruler" "'toggle-ruler" "highlight-color" "'highlight-color" "text-color" "'text-color" "increase-indent" "'increase-indent" "decrease-indent" "'decrease-indent" "bulleted" "'bulleted" "numbered" "'numbered" "justify-right" "'justify-right" "justify-centered" "'justify-centered" "justify-left" "'justify-left" "alignment-top" "'alignment-top" "alignment-center" "'alignment-center" "alignment-bottom" "'alignment-bottom" "underline" "'underline" "italic" "'italic" "bold" "'bold" "size" "'size" "font" "'font" "style" "'style" "locate" "set-enabled?" "enabled?")}
        {Lisp-Entry "activate-text" #f 219 11 219 24 ("selection-change" "size" "'size" "font" "'font" "style" "'style" "locate" "set-client" "set!" "client" "neq?" "when" "text")}
        {Lisp-Entry "selection-change" #f 233 11 233 27 ("let" "else" "list" "get-application" "set-selected" "reference:" "class-of" "type-name" "model-name:" "'new" "action:" "Form" "form:" "Designer" "new" "designer" "get-view" "view" "View-Style" "typecase" "get-bulleted?" "bulleted" "'bulleted" "right" "'right" "justify-right" "'justify-right" "centered" "'centered" "justify-centered" "'justify-centered" "left" "'left" "get-justification" "justify-left" "'justify-left" "top" "'top" "alignment-top" "'alignment-top" "center" "'center" "alignment-center" "'alignment-center" "eq?" "alignment-bottom" "'alignment-bottom" "get-underline?" "underline" "'underline" "get-italic?" "italic" "'italic" "get-bold?" "bold" "'bold" "set-selected?" "get-font" "Text-Style" "is?" "essay" "bottom" "'bottom" "get-alignment" "either" "alignment" "get-style-at" "get-row" "get-paragraph" "get-format" "format" "client" "get-end" "end" "let*" "size" "'size" "font" "'font" "style" "'style" "locate" "selection-change")}}}})
"Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Text-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Text-Preferences" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Text-Preferences" #f 46 7 46 23 ("Bitmap-Resource" "icon:" "title:" "Document-Preferences")}}})
"Text-Request"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "Text-Request.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.Text-Request" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Text-Request" #f 47 7 47 19 ("209" "cancel" "default?:" "on-ok" "action-handler:" "24" "80" "143" "122" "title:" "ok" "on-cancel" "escape-press-handler:" "on-return" ":host" "Event-Handler" "return-press-handler:" "wrap?:" "top-padding:" "2" "left-padding:" "text" "fill" "layout-type:" "content" "name:" "vscroll?:" "hscroll?:" "edge" "border-type:" "121" "390" "7" "6" "Point" "position:" "180" "402" "Dimension" "size:" "View")
        {Lisp-Entry "dialog-class" #f 66 16 66 28 ("Text-Request-Dialog")}
        {Lisp-Entry "Text-Request-Dialog" #f 71 14 71 33 ("Dialog")
          {Lisp-Entry "focus-gain" #f 74 13 74 23 ("text" "'text" "guest" "locate" "acquire-focus" "nextmethod")}
          {Lisp-Entry "on-return" #f 79 13 79 22 ("get-modal-result" "end-modal" "text" "'text" "guest" "locate" "insert-newline" "get-shift?" "if" "evt")}
          {Lisp-Entry "get-modal-result" #f 85 13 85 29 ("text" "'text" "guest" "locate" "get-string-content")}}}}})
"Text-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Text-Row.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Text-Row" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Text-Row" #f 46 7 46 15 ("Value-Row")
        {Lisp-Entry "present" #f 54 11 54 18 ("car" "format" "get-paragraphs" "first" "Text" "is?" "not" "if" "value")}
        {Lisp-Entry "get-edited-value" #f 67 11 67 27 ("editor" "get-content")}
        {Lisp-Entry "get-edited-modified?" #f 71 11 71 31 ("editor" "get-controller" "get-modified?")}
        {Lisp-Entry "edit" #f 80 11 80 15 ("set-visible?" "value" "editor" "set-content" "edit-in-row")}
        {Lisp-Entry "close-editor" #f 86 11 86 23 ("close-in-row-editor")}
        {Lisp-Entry "select-editor" #f 90 11 90 24 ("focus-editor")}
        {Lisp-Entry "focus-editor" #f 94 11 94 23 ("editor" "acquire-focus" "rest")}
        {Lisp-Entry "editor-height" #f 98 11 98 24 ("200")}
        {Lisp-Entry "new-editor" #f 102 11 102 21 ("0" "left-padding:" "editor-class" "new")}
        {Lisp-Entry "editor-class" #f 107 11 107 23 ("Row-Text-View")}
        {Lisp-Entry "update" #f 111 11 111 17 ("1" "self" "row-rank" "Cell" "new" "invalidate-cell" "present" "set-title" "set-property-modified?" "get-children" "second" "data" "get-tree" "tree" "let" "set-value" "value")}
        {Lisp-Entry "in-edition?" #f 120 11 120 22 ("0" "get-sons" "cardinality" ">")}}}})
"Text-Search"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Text-Search.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Text-Search" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Text-Search" #f 51 7 51 18 ("54" "user-files" "34" "jazz-files" "18" "120" "Dimension" "size:" "14" "13" "Point" "position:" "active-window" "title:" "domain" "name:" "Search-View")
        {Lisp-Entry "finish" #f 63 11 63 17 ("user-files" "'user-files" "get-user-label" "jazz-files" "'jazz-files" "locate" "set-title" "when" "get-jazz-label" "label" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "preferences" #f 74 11 74 22 ("text" "search-manager" "tools" "get-preferences")}
        {Lisp-Entry "get-search-domains" #f 83 11 83 29 ("user-files" "jazz-files" "active-window")}
        {Lisp-Entry "get-active-window-domain" #f 89 11 89 35 ("active-window" "'active-window")}
        {Lisp-Entry "search-targets" #f 98 11 98 25 ("thread" "function" "execute:" "self" "context:" "name:" "Thread" "new" "search-threaded" "else" "search-active-window" "active-window" "get-search-domain" "case" "targets")}
        {Lisp-Entry "search-threaded" #f 112 24 112 39 ("close-manager" "unregister-activity" "get-activity-manager" "manager" "when" "select-results" "get-search-targets" "add-results" "text" "'text" "set-mode" "get-results" "results" "let" "search" "found" "count-files" "get-search-reporter" "User-Reporter" "new" "reporter" "let*" "targets")}
        {Lisp-Entry "search" #f 126 11 126 17 ("search-user-files" "user-files" "search-jazz-files" "jazz-files" "get-search-domain" "case" "reporter" "targets")}
        {Lisp-Entry "get-constituent-test" #f 133 11 133 31 ("nextmethod" "else" "user-files" "jazz-constituent?" "jazz-files" "get-search-domain" "case")}
        {Lisp-Entry "set-session-properties" #f 145 11 145 33 ("get-active-domain" "set-search-domain" "nextmethod" "config")}
        {Lisp-Entry "Jazz-Count" #f 155 14 155 24 ()}
        {Lisp-Entry "count-jazz-files" #f 159 11 159 27 ("count-jazz-directories" "set!" "Jazz-Count" "unless")}
        {Lisp-Entry "count-jazz-directories" #f 165 11 165 33 ("ignored-directories:" "increase!" "ci=?" "test:" "get-extension" "member?" "when" "file" "iterate-directory" "directory" "function" "for-each" "default-search-extensions" "get-jazz-extensions" "extensions" "default-search-directories" "get-jazz-directories" "either" "filter-existing" "directories" "0" "count" "preferences" "pref" "let")}
        {Lisp-Entry "User-Count" #f 180 14 180 24 ()}
        {Lisp-Entry "count-user-files" #f 184 11 184 27 ("set!" "User-Count" "unless" "increase!" "get-extension" "member?" "when" "file" "iterate-directory" "directory" "for-each" "0" "function" "count" "default-search-extensions" "get-user-extensions" "extensions" "default-search-directories" "get-user-directories" "either" "filter-existing" "directories" "preferences" "pref" "let")}
        {Lisp-Entry "count-files" #f 203 11 203 22 ("count-user-files" "user-files" "count-jazz-files" "jazz-files" "get-search-domain" "case")}
        {Lisp-Entry "filter-existing" #f 209 11 209 26 ("exists?" "dir" "function" "collect-if" "directories")}
        {Lisp-Entry "default-search-directories" #f 215 11 215 37 ("User" "Install" "else" "Directory" "Jazz" "'Jazz" "is-alias?" "cond" "list")}
        {Lisp-Entry "default-search-extensions" #f 223 11 223 36 ()}
        {Lisp-Entry "setup-search-reporter" #f 231 11 231 32 ("set-step" "set-pos" "1" "Range" "new" "set-range" "count" "reporter")}
        {Lisp-Entry "search-active-window" #f 242 11 242 31 ("acquire-focus" "bring-to-front" "find-forward" "get-start" "set-caret" "Text-View" "get-guest" "guest" "Frame-Host" "is?" "car" "frame" "1" "length" ">=" "when" "get-stage" "get-views" "frames" "let" "targets")}
        {Lisp-Entry "search-jazz-files" #f 255 11 255 28 ("get-output" "get-expression?" "search-in-directories" "default-search-extensions" "get-jazz-extensions" "extensions" "default-search-directories" "get-jazz-directories" "either" "filter-existing" "directories" "preferences" "pref" "List-Factory" "new" "factory" "let" "reporter" "targets")}
        {Lisp-Entry "search-user-files" #f 264 11 264 28 ("get-output" "get-expression?" "search-in-directories" "default-search-extensions" "get-user-extensions" "extensions" "default-search-directories" "get-user-directories" "either" "filter-existing" "directories" "preferences" "pref" "List-Factory" "new" "factory" "let" "reporter" "targets")}}}})
"Text-Search-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "search" "Text-Search-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.search.Text-Search-Preferences" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Text-Search-Preferences" #f 46 7 46 30 ("title:" "Search-View-Preferences")
        {Lisp-Entry "active-domain" #f 49 12 49 25 ("generate")}
        {Lisp-Entry "jazz-label" #f 50 12 50 22 ("generate")}
        {Lisp-Entry "jazz-directories" #f 51 12 51 28 ("generate")}
        {Lisp-Entry "jazz-extensions" #f 52 12 52 27 ("generate")}
        {Lisp-Entry "user-label" #f 53 12 53 22 ("generate")}
        {Lisp-Entry "user-directories" #f 54 12 54 28 ("generate")}
        {Lisp-Entry "user-extensions" #f 55 12 55 27 ("generate")}}}})
"Text-Size-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-Size-Combo.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text-Size-Combo" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Text-Size-Combo" #f 45 7 45 22 ("Text-Combo")
        {Lisp-Entry "size-list" #f 48 14 48 23 ("72" "48" "36" "24" "18" "14" "12" "10" "9" "8")}
        {Lisp-Entry "client-update" #f 56 11 56 24 ("size-list" "->string" "list" "size" "function" "map" "set-choices")}
        {Lisp-Entry "selection-change" #f 67 11 67 27 ("get-font" "get-point-size" "->string" "set-content" "Text-Style" "is?" "if" "get-style-at" "style" "client" "get-end" "end" "let*")}
        {Lisp-Entry "combo-choice" #f 80 11 80 23 ("selection-change" "get-value" "client" "set-selection-point-size")}}}})
"Text-Slide-Conductor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "slide" "Text-Slide-Conductor.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.slide.Text-Slide-Conductor" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Text-Slide-Conductor" #f 45 7 45 27 ("Slide-Conductor")
        {Lisp-Entry "client" #f 48 12 48 18 ("generate")}}}})
"Text-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-Style.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text-Style" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Text-Style" #f 45 7 45 17 ("frame" "highlight" "color" "font" "decoration" "font-style" "font-weight" "font-size" "initialize" "font-family" "alignment" "Style")
        {Lisp-Entry "fold-literal" #f 60 11 60 23 ("Text-Style" "'Text-Style" "fold-exemplar")}
        {Lisp-Entry "get-height" #f 69 11 69 21 ("font" "get-metrics" "get-height")}
        {Lisp-Entry "run-width" #f 73 11 73 20 ("String" "coerce" "font" "text-width" "get-string" "string" "let" "run")}
        {Lisp-Entry "scan" #f 84 11 84 15 ("increase!" "font" "get-char-width" "2" "fxround/" "+" "-" "width" "cdr" "set!" "car" "<=" "while" "begin" "eqv?" "if" "element" "c" "min" "max" "below" "from" "n" "for" "loop" "cardinality" "len" "right" "mid" "left" "get-string" "string" "let" "proc" "run" "tabs" "end" "start" "h")}
        {Lisp-Entry "Break-Characters" #f 112 14 112 30 ()}
        {Lisp-Entry "wrap" #f 116 11 116 15 ("=" ">=" "if" "self" "subseq!" "Run" "new" "either" "let" "not" "or" ">" "and" "+" "Break-Characters" "memq?" "when" "set!" "right" "mid" "left" "n" "c" "function" "scan" "rightmost" "brk-right" "brk" "0" "offset" "1" "-" "end" "cardinality" "len" "get-string" "string" "start" "let*" "run" "break" "place" "tabs" "width" "v" "h" "margin" "context")}
        {Lisp-Entry "height-update" #f 148 11 148 24 ("height")}
        {Lisp-Entry "draw-style" #f 157 11 157 21 ("frame-rect" "Rect" "new" "rect" "frame" "when" "highlight" "draw-tabbed-text" "width" "let" "0" "String" "coerce" "draw-text" "begin" "not" "either" "Black" "'Black" "registered-color" "print-black/white?:" "getf" "if" "color" "justify-element" "+" "get-metrics" "get-height" "font-height" "let*" "font" "set-font" "enabled?" "left" "tabs" "line-height" "v" "h" "string" "context" "surface")}}}})
"Text-Style-Combo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-Style-Combo.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.Text-Style-Combo" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Text-Style-Combo" #f 45 7 45 23 ("Text-Combo")
        {Lisp-Entry "client-update" #f 53 11 53 24 ("set-choices" "List" "->string" "list" "name" "function" "get-all-styles" "accumulate" "names" "let")}
        {Lisp-Entry "get-all-styles" #f 61 11 61 25 ("union" "get-styles" "styles" "exemplar-name" "client" "get-formats" "accumulate" "remove-nils" "formats" "let")}
        {Lisp-Entry "selection-change" #f 72 11 72 27 ("get-base" "get-name" "either" "->string" "set-content" "get-style-at" "style" "client" "get-end" "end" "let*")}
        {Lisp-Entry "combo-choice" #f 83 11 83 23 ("selection-change" "get-value" "client" "set-selection-style")}
        {Lisp-Entry "exemplar-name" #f 93 11 93 24 ("get-name" "exemplar")}}}})
"Text-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "surrogate" "Text-Surrogate.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.surrogate.Text-Surrogate" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Text-Surrogate" #f 46 7 46 21 ("View-Surrogate")
        {Lisp-Entry "cursor-update" #f 55 11 55 24 ("nextmethod" "else" "client" "cursor-update" "edit" "editor" "get-mode" "case" "pos")}
        {Lisp-Entry "mouse-down" #f 67 11 67 21 ("nextmethod" "else" "client" "mouse-down" "select-in-editor" "select?" "when" "edit" "editor" "get-mode" "case" "pos")}
        {Lisp-Entry "drag-move" #f 76 11 76 20 ("nextmethod" "else" "client" "drag-move" "edit" "editor" "get-mode" "case" "pos")}
        {Lisp-Entry "drag-up" #f 83 11 83 18 ("nextmethod" "else" "client" "drag-up" "" "apply" "edit" "editor" "get-mode" "case" "rest" "pos")}
        {Lisp-Entry "double-click" #f 90 11 90 23 ("nextmethod" "else" "client" "double-click" "edit" "editor" "get-mode" "case" "pos")}
        {Lisp-Entry "context-menu" #f 97 11 97 23 ("nextmethod" "else" "client" "context-menu" "edit" "editor" "get-mode" "case" "pos")}
        {Lisp-Entry "key-press" #f 109 11 109 20 ("nextmethod" "else" "client" "key-press" "edit" "editor" "get-mode" "case" "key")}}}})
"Text-Syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "syntax" "Text-Syntax.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.syntax.Text-Syntax" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Text-Syntax" #f 45 7 45 18 ("Object")
        {Lisp-Entry "comment-string" #f 53 26 53 40 ()}
        {Lisp-Entry "title-comment-string" #f 57 26 57 46 ()}
        {Lisp-Entry "get-constituent-test" #f 66 26 66 46 ("word-constituent?")}
        {Lisp-Entry "text-constituent?" #f 70 18 70 35 ("get-constituent-test" "proc" "let" "char")}
        {Lisp-Entry "get-catalog-context" #f 80 11 80 30 ("get-application" "get-catalog-context")}
        {Lisp-Entry "translate-key" #f 89 26 89 39 ("key")}
        {Lisp-Entry "auto-complete-characters" #f 98 26 98 50 ()}
        {Lisp-Entry "auto-complete-char?" #f 102 26 102 45 ("text-constituent?" "not" "auto-complete-characters" "memq?" "or" "last" "key")}}}})
"Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "Text-View.jazz"} 1227043164
    {Lisp-Entry "jazz.ui.text.Text-View" #f 38 9 38 31 ("jazz")
      {Lisp-Entry "Text-View" #f 67 7 67 16 ("16" "default-row-height:" "12" "left-padding:" "White" "name:" "Color" "background:" "Document" "Outline-View")
        {Lisp-Entry "Active-Selection-Color" #f 70 21 70 43 ("230" "blue:" "green:" "190" "red:" "Color")}
        {Lisp-Entry "Inactive-Selection-Color" #f 73 21 73 45 ("Unfocused-Selection" "name:" "Color")}
        {Lisp-Entry "Completion-Color" #f 77 21 77 37 ("blue:" "240" "green:" "128" "red:" "Color")}
        {Lisp-Entry "Caret-Pen" #f 81 14 81 23 ("Black" "name:" "Pen")}
        {Lisp-Entry "text" #f 86 22 86 26 ("set-text" "get-text")}
        {Lisp-Entry "text-content" #f 88 22 88 34 ("set-text-content" "get-text-content")}
        {Lisp-Entry "editable?" #f 89 22 89 31 ("set-editable?" "get-editable?")}
        {Lisp-Entry "selectable?" #f 90 22 90 33 ("set-selectable?" "get-selectable?")}
        {Lisp-Entry "wrap?" #f 91 22 91 27 ("set-wrap?" "get-wrap?")}
        {Lisp-Entry "default-format" #f 92 22 92 36 ("set-default-format" "get-default-format")}
        {Lisp-Entry "default-style" #f 93 22 93 35 ("set-default-style" "get-default-style")}
        {Lisp-Entry "paragraph-spacing" #f 94 22 94 39 ("set-paragraph-spacing" "get-paragraph-spacing" "0")}
        {Lisp-Entry "accepts-returns?" #f 95 22 95 38 ("set-accepts-returns?" "get-accepts-returns?")}
        {Lisp-Entry "focus-selects-all?" #f 96 22 96 40 ("set-focus-selects-all?" "get-focus-selects-all?")}
        {Lisp-Entry "show-unfocused-selection?" #f 97 22 97 47 ("set-show-unfocused-selection?" "get-show-unfocused-selection?")}
        {Lisp-Entry "active-selection-color" #f 98 22 98 44 ("set-active-selection-color" "get-active-selection-color" "Active-Selection-Color")}
        {Lisp-Entry "inactive-selection-color" #f 99 22 99 46 ("set-inactive-selection-color" "get-inactive-selection-color" "Inactive-Selection-Color")}
        {Lisp-Entry "completion-color" #f 100 22 100 38 ("set-completion-color" "get-completion-color" "Completion-Color")}
        {Lisp-Entry "caret-pen" #f 101 22 101 31 ("set-caret-pen" "get-caret-pen" "Caret-Pen")}
        {Lisp-Entry "char-encoding" #f 102 22 102 35 ("set-char-encoding" "get-char-encoding")}
        {Lisp-Entry "colorize?" #f 105 22 105 31 ("set-colorize?" "get-colorize?")}
        {Lisp-Entry "syntax" #f 108 18 108 24 ()}
        {Lisp-Entry "selection-anchor" #f 109 18 109 34 ()}
        {Lisp-Entry "locked-anchor?" #f 110 18 110 32 ()}
        {Lisp-Entry "mouse-selecting?" #f 111 18 111 34 ()}
        {Lisp-Entry "selection-mode" #f 112 18 112 32 ("char" "'char")}
        {Lisp-Entry "virtual-h" #f 113 18 113 27 ()}
        {Lisp-Entry "caret-position" #f 114 18 114 32 ()}
        {Lisp-Entry "caret-pulse" #f 115 18 115 29 ()}
        {Lisp-Entry "caret-visible?" #f 116 18 116 32 ()}
        {Lisp-Entry "has-focus?" #f 117 18 117 28 ()}
        {Lisp-Entry "completion-active?" #f 118 18 118 36 ()}
        {Lisp-Entry "text-listeners" #f 119 18 119 32 ()}
        {Lisp-Entry "undoer" #f 120 18 120 24 ("self" "Undoer" "new")}
        {Lisp-Entry "user-tabs" #f 121 18 121 27 ()}
        {Lisp-Entry "tabs" #f 122 18 122 22 ()}
        {Lisp-Entry "mark" #f 123 18 123 22 ()}
        {Lisp-Entry "formats" #f 124 18 124 25 ("Exemplar-Domain" "new")}
        {Lisp-Entry "styles" #f 125 18 125 24 ("Exemplar-Domain" "new")}
        {Lisp-Entry "controller" #f 126 18 126 28 ()}
        {Lisp-Entry "previous-position" #f 127 18 127 35 ()}
        {Lisp-Entry "autoscroll-pulse" #f 128 18 128 34 ()}
        {Lisp-Entry "wrap-width" #f 129 18 129 28 ()}
        {Lisp-Entry "wrap-patch" #f 130 18 130 28 ()}
        {Lisp-Entry "contiguous-undo-range" #f 131 18 131 39 ()}
        {Lisp-Entry "verify-reload" #f 139 11 139 24 ()}
        {Lisp-Entry "current-history-item" #f 140 11 140 31 ()}
        {Lisp-Entry "prepare" #f 143 11 143 18 ("get-default-style" "add-style" "get-default-format" "add-format" "new-default-style" "default-style" "new-default-format" "default-format" "set!" "nextmethod" "rest")}
        {Lisp-Entry "install" #f 151 11 151 18 ("new-syntax" "syntax" "set!" "nextmethod" "rest")}
        {Lisp-Entry "install-child" #f 156 11 156 24 ("nextmethod" "else" "form->node" "set-text" "text" "get-model-name" "case" "restore-form" "creator-branch" "creator" "form")}
        {Lisp-Entry "finish" #f 163 11 163 17 ("make-tabs" "tabs" "set!" "empty-content" "set-content" "text" "not" "when" "nextmethod" "rest")}
        {Lisp-Entry "destroy" #f 170 11 170 18 ("nextmethod" "show-text-cursor" "close" "controller" "when")}
        {Lisp-Entry "new-syntax" #f 177 29 177 39 ("Text-Syntax" "new")}
        {Lisp-Entry "get-syntax" #f 181 18 181 28 ("syntax")}
        {Lisp-Entry "set-syntax" #f 185 18 185 28 ("syntax~self" "set!" "syntax")}
        {Lisp-Entry "get-text-view" #f 189 11 189 24 ("self")}
        {Lisp-Entry "new-default-format" #f 193 11 193 29 ("formats" "domain:" "Default" "'Default" "name:" "Format" "new")}
        {Lisp-Entry "new-default-style" #f 197 11 197 28 ("Label" "Font" "font:" "styles" "domain:" "Default" "'Default" "name:" "Text-Style" "new")}
        {Lisp-Entry "get-editable?" #f 206 18 206 31 ("editable?")}
        {Lisp-Entry "set-editable?" #f 210 18 210 31 ("editable?" "set!" "value")}
        {Lisp-Entry "get-selectable?" #f 214 18 214 33 ("selectable?")}
        {Lisp-Entry "set-selectable?" #f 218 18 218 33 ("selectable?" "set!" "value")}
        {Lisp-Entry "get-wrap?" #f 222 18 222 27 ("wrap?")}
        {Lisp-Entry "set-wrap?" #f 226 18 226 27 ("wrap?" "set!" "value")}
        {Lisp-Entry "get-accepts-returns?" #f 230 18 230 38 ("accepts-returns?")}
        {Lisp-Entry "get-wrap-width" #f 234 18 234 32 ("wrap-width")}
        {Lisp-Entry "set-wrap-width" #f 238 18 238 32 ("wrap-width" "set!" "value")}
        {Lisp-Entry "set-accepts-returns?" #f 242 18 242 38 ("accepts-returns?" "set!" "flag")}
        {Lisp-Entry "get-focus-selects-all?" #f 246 18 246 40 ("focus-selects-all?")}
        {Lisp-Entry "set-focus-selects-all?" #f 250 18 250 40 ("focus-selects-all?" "set!" "flag")}
        {Lisp-Entry "get-show-unfocused-selection?" #f 254 18 254 47 ("show-unfocused-selection?")}
        {Lisp-Entry "set-show-unfocused-selection?" #f 258 18 258 47 ("show-unfocused-selection?" "set!" "value")}
        {Lisp-Entry "get-active-selection-color" #f 262 18 262 44 ("active-selection-color")}
        {Lisp-Entry "set-active-selection-color" #f 266 18 266 44 ("invalidate-view" "active-selection-color" "set!" "value")}
        {Lisp-Entry "set-inactive-selection-color" #f 271 18 271 46 ("invalidate-view" "inactive-selection-color" "set!" "value")}
        {Lisp-Entry "get-completion-color" #f 276 18 276 38 ("completion-color")}
        {Lisp-Entry "set-completion-color" #f 280 18 280 38 ("invalidate-view" "completion-color" "set!" "value")}
        {Lisp-Entry "get-colorize?" #f 285 18 285 31 ("colorize?")}
        {Lisp-Entry "set-colorize?" #f 289 18 289 31 ("colorize?" "set!" "value")}
        {Lisp-Entry "get-paragraphs" #f 293 21 293 35 ("root-row" "get-sons")}
        {Lisp-Entry "set-paragraphs" #f 297 21 297 35 ("root-row" "set-sons" "lst")}
        {Lisp-Entry "get-undoer" #f 301 18 301 28 ("undoer")}
        {Lisp-Entry "host-workspaces" #f 310 11 310 26 ("text")}
        {Lisp-Entry "install-in-host" #f 314 11 314 26 ("get-controller" "install-in-host" "nextmethod" "host")}
        {Lisp-Entry "focus-actions" #f 324 11 324 24 ("nextmethod" "text" "'text" "find-actions" "cons")}
        {Lisp-Entry "get-controller" #f 334 11 334 25 ("new-controller" "set!" "controller" "unless")}
        {Lisp-Entry "new-controller" #f 340 11 340 25 ("default-console?" "console?:" "default-tool?" "tool?:" "self" "Document-Controller" "new")}
        {Lisp-Entry "default-tool?" #f 344 29 344 42 ()}
        {Lisp-Entry "default-console?" #f 348 29 348 45 ()}
        {Lisp-Entry "save" #f 352 11 352 15 ("get-controller" "save")}
        {Lisp-Entry "save-as" #f 356 11 356 18 ("get-controller" "save-as")}
        {Lisp-Entry "save-all" #f 360 26 360 34 ("get-controller" "save-all")}
        {Lisp-Entry "get-moniker" #f 364 18 364 29 ("get-controller" "get-moniker")}
        {Lisp-Entry "set-moniker" #f 368 18 368 29 ("get-controller" "set-moniker" "moniker")}
        {Lisp-Entry "get-modified?" #f 372 11 372 24 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-modified?" #f 376 11 376 24 ("get-controller" "set-modified?" "state")}
        {Lisp-Entry "get-read-only?" #f 380 11 380 25 ("get-controller" "get-read-only?")}
        {Lisp-Entry "write-allowed?" #f 384 11 384 25 ("get-controller" "write-allowed?" "editable?" "and")}
        {Lisp-Entry "update-status" #f 388 11 388 24 ("get-controller" "update-status")}
        {Lisp-Entry "update-moniker-time" #f 392 11 392 30 ("get-controller" "update-moniker-time" "moniker")}
        {Lisp-Entry "confirm-close" #f 396 11 396 24 ("get-controller" "confirm-close" "rest")}
        {Lisp-Entry "tool-update" #f 400 11 400 22 ("tool?")}
        {Lisp-Entry "console-update" #f 404 11 404 25 ("console?")}
        {Lisp-Entry "revert-saved" #f 408 11 408 23 ("get-controller" "revert-saved")}
        {Lisp-Entry "compare-saved" #f 412 11 412 24 ("get-controller" "compare-saved")}
        {Lisp-Entry "explorer-class" #f 421 26 421 40 ("Text-Explorer")}
        {Lisp-Entry "on-select-outer" #f 425 11 425 26 ("select-outer" "evt")}
        {Lisp-Entry "select-outer" #f 429 29 429 41 ("get-range" "set-selection" "outer-expr" "when" "function" "with-safe-explore" "get-selection" "range:" "self" "explorer-class" "new" "expl" "let")}
        {Lisp-Entry "with-safe-explore" #f 437 11 437 28 ("ignore" "throw-cancel" "get-range" "set-selection" "yes" "'yes" "no:" "yes:" "question" "'question" "type:" "get-message" "message-box" "eq?" "when" "case" "err" "Explore-Error" "catch" "ask" "'ask" "action" "action:" "proc")}
        {Lisp-Entry "focus-gain" #f 455 11 455 21 ("selection" "invalidate-selection" "has-selection?" "select-all" "focus-selects-all?" "when" "update-caret" "has-focus?" "set!" "show-text-cursor" "nextmethod" "old")}
        {Lisp-Entry "focus-lose" #f 466 11 466 21 ("selection" "invalidate-selection" "has-selection?" "when" "end-completion" "hide-caret" "has-focus?" "set!" "show-text-cursor" "nextmethod" "view")}
        {Lisp-Entry "focus-activate" #f 476 11 476 25 ("focus-document")}
        {Lisp-Entry "focus-document" #f 480 11 480 25 ("acquire-focus")}
        {Lisp-Entry "mouse-leave" #f 484 11 484 22 ("show-text-cursor")}
        {Lisp-Entry "on-backspace-press" #f 488 11 488 29 ("get-property" "word?:" "backspace-press" "evt")}
        {Lisp-Entry "on-delete-press" #f 492 11 492 26 ("get-property" "word?:" "delete-press" "evt")}
        {Lisp-Entry "on-paragraph-style" #f 496 11 496 29 ("style:" "get-property" "set-selection-style" "evt")}
        {Lisp-Entry "on-numbered" #f 500 11 500 22 ("on-numbered" "'on-numbered" "unimplemented" "evt")}
        {Lisp-Entry "on-bulleted" #f 504 11 504 22 ("toggle-bulleted" "paragraph" "row" "function" "for-each-selected-paragraph" "evt")}
        {Lisp-Entry "on-decrease-indent" #f 510 11 510 29 ("-32" "indent-paragraph" "paragraph" "row" "function" "for-each-selected-paragraph" "evt")}
        {Lisp-Entry "on-increase-indent" #f 516 11 516 29 ("32" "indent-paragraph" "paragraph" "row" "function" "for-each-selected-paragraph" "evt")}
        {Lisp-Entry "on-justify" #f 522 11 522 21 ("set-justification" "paragraph" "row" "function" "for-each-selected-paragraph" "justification:" "get-property" "justification" "let" "evt")}
        {Lisp-Entry "on-alignment" #f 529 11 529 23 ("get-selection" "set-text-alignment" "alignment:" "get-property" "alignment" "let" "evt")}
        {Lisp-Entry "on-text-style" #f 534 11 534 24 ("bell" "evt")}
        {Lisp-Entry "on-text-font" #f 538 11 538 23 ("get-selection" "set-text-font" "close-popups" "initial-font:" "Font-Request" "get-modal" "font" "get-style" "get-font" "essay" "current" "get-col" "get-run" "run" "get-row" "get-paragraph" "par" "get-caret" "caret" "let*" "evt")}
        {Lisp-Entry "on-text-color" #f 548 11 548 24 ("get-selection" "set-text-color" "Black" "name:" "Color" "either" "get-body" "set-color" "when" "close-popups" "get-sender" "popup-initiator" "combo" "color:" "get-property" "color" "let" "evt")}
        {Lisp-Entry "on-pick-text-color" #f 557 11 557 29 ("get-sender" "pick-text-color" "evt")}
        {Lisp-Entry "on-highlight-color" #f 561 11 561 29 ("get-selection" "set-highlight-color" "White" "name:" "Color" "either" "get-body" "set-color" "when" "close-popups" "get-sender" "popup-initiator" "combo" "color:" "get-property" "color" "let" "evt")}
        {Lisp-Entry "on-pick-highlight-color" #f 570 11 570 34 ("get-sender" "pick-highlight-color" "evt")}
        {Lisp-Entry "add-text-listener" #f 579 18 579 35 ("add-listener" "text-listeners" "set!" "listener")}
        {Lisp-Entry "remove-text-listener" #f 583 18 583 38 ("remove-listener" "text-listeners" "set!" "listener")}
        {Lisp-Entry "text-listener?" #f 587 18 587 32 ("text-listeners" "listener?" "object")}
        {Lisp-Entry "process-selection-change" #f 591 18 591 42 ("invoke" "listener" "function" "for-each" "self" ":selection-change" "Text-Event" "new" "evt" "let" "text-listeners" "when")}
        {Lisp-Entry "on-show-history" #f 604 11 604 26 ("get-controller" "show-history" "evt")}
        {Lisp-Entry "on-show-changes" #f 608 11 608 26 ("get-controller" "show-changes" "evt")}
        {Lisp-Entry "key-press" #f 617 11 617 20 ("syntax" "translate-key" "char-press" "hide-text-cursor" "key")}
        {Lisp-Entry "backspace-press" #f 622 11 622 26 ("backspace" "word?" "word?:" "key")}
        {Lisp-Entry "delete-press" #f 626 11 626 23 ("delete-action" "word?" "word?:" "key")}
        {Lisp-Entry "on-delete-char" #f 630 11 630 25 ("delete-char" "evt")}
        {Lisp-Entry "on-delete-word" #f 634 11 634 25 ("delete-word" "evt")}
        {Lisp-Entry "on-kill-line" #f 638 11 638 23 ("list" "replace" "set-clipboard-text" "get-application" "add-clipboard" "get-string" "string" "Range" "range" "paragraph-length" "get-row" "Cell" "new" "end" "forward" "'forward" "selection-tail" "start" "let*" "evt")}
        {Lisp-Entry "return-press" #f 648 11 648 23 ("insert-newline" "accepts-returns?" "when" "key")}
        {Lisp-Entry "escape-press" #f 653 11 653 23 ("remove-completion" "key")}
        {Lisp-Entry "tab-press" #f 657 11 657 20 ("insert-char" "else" "shift-key?" "navigate-view" "accepts-returns?" "not" "end-completion" "has-completion?" "cond" "modifiers" "key")}
        {Lisp-Entry "char-press" #f 666 26 666 36 ("insert-char" "auto-complete" "auto-complete?" "if" "translated" "key")}
        {Lisp-Entry "reset-virtual" #f 672 11 672 24 ("virtual-h" "set!")}
        {Lisp-Entry "on-insert" #f 676 11 676 20 ("insert-string" ":string" "call-key-press" ":char" ":key" "case" "content:" "get-property" "content" "get-kind" "kind" "let" "evt")}
        {Lisp-Entry "install-scroller?" #f 689 11 689 28 ()}
        {Lisp-Entry "default-extension" #f 693 11 693 28 ()}
        {Lisp-Entry "extensions" #f 697 11 697 21 ()}
        {Lisp-Entry "load-content" #f 701 11 701 23 ("update-status" "read-content" "set-content" "not" "if" "moniker")}
        {Lisp-Entry "empty-content" #f 708 29 708 42 ("list" "paragraphs:" "Text" "new")}
        {Lisp-Entry "get-content" #f 712 11 712 22 ("List" "paragraph->string" "get-paragraphs" "accumulate")}
        {Lisp-Entry "set-content" #f 716 11 716 22 ("set-unformatted-content" "lst")}
        {Lisp-Entry "set-unformatted-content" #f 720 11 720 34 ("complete-setup" "get-row-height" "increase!" "wrap-paragraph" "set!" "set-next" "set-previous" "make-string-paragraph" "paragraph" "let" "string" "function" "map" "rows" "root-row" "previous" "height" "0" "count" "get-paragraphs" "null/pair?" "if" "empty-content" "either" "let*" "lst")}
        {Lisp-Entry "get-string-content" #f 739 18 739 36 ("get-content" "join-lines")}
        {Lisp-Entry "set-string-content" #f 743 18 743 36 ("call-content-change" "colorize-syntax" "parse-string-content" "set-content" "content")}
        {Lisp-Entry "make-string-paragraph" #f 749 11 749 32 ("get-default-style" "cardinality" "cast" "0" "subseq!" "Run" "new" "list" "empty-string?" "if" "make-paragraph" "string" "format")}
        {Lisp-Entry "make-paragraph" #f 758 11 758 25 ("fix-view-style-parent" "get-default-style" "get-font" "get-metrics" "get-height" "set-row-height" "0" "set-level" "root-row" "set-father" "set-runs" "set-string" "get-default-format" "either" "set-format" "self" "set-parent" "Paragraph" "new" "paragraph" "let" "runs" "string" "format")}
        {Lisp-Entry "read-content" #f 771 26 771 38 ("colorize-syntax" "colorize?" "when" "update-moniker-time" "read-moniker" "set-content" "moniker")}
        {Lisp-Entry "read-moniker" #f 778 29 778 41 ("if" "char-encoding-errors:" "char-encoding" "char-encoding:" "load-lines" "moniker")}
        {Lisp-Entry "save-content" #f 782 11 782 23 ("undoer" "reset-save-depth" "set-modified?" "update-status" "get-modified?" "not" "if" "update-moniker-time" "save-to" "moniker")}
        {Lisp-Entry "save-to" #f 791 11 791 18 ("char-encoding" "char-encoding:" "save-lines" "get-content" "content" "let" "moniker")}
        {Lisp-Entry "reload-moniker" #f 796 11 796 25 ("update-moniker-time" "read-moniker" "reload-content" "when" "moniker")}
        {Lisp-Entry "reload-content" #f 802 18 802 32 ("update-status" "set-modified?" "0" "get-paragraphs" "cardinality" "min" "Cell" "new" "set-caret" "colorize-syntax" "set-content" "remove-every-row" "get-start" "get-row" "row" "let" "lst")}
        {Lisp-Entry "compare-moniker" #f 812 11 812 26 ("set-visible?" "Document-Moniker" "new" "get-guest" "compare-monikers" "host-visible?:" "Compare-Files" "new-frame" "frame" "let" "when" "moniker")}
        {Lisp-Entry "on-export-html" #f 825 11 825 25 ("user-message" "export-html" "self" "TextToHTML-Exporter" "new" "convert" "let" "output" "function" "parse" "call-with-output-file" "extensions:" "default-extension:" "initial-filename:" "choose-new-file" "file" "get-base" "format" "essay" "initial-filename" "get-moniker" "moniker" "let*" "evt")}
        {Lisp-Entry "content-size-change" #f 841 11 841 30 ("wrap-content" "wrap?" "when" "get-width" "visible-width" "set!" "size")}
        {Lisp-Entry "hide-text-cursor" #f 852 18 852 34 ("hide-cursor" "mouse-over?" "selectable?" "editable?" "enabled?" "and" "when")}
        {Lisp-Entry "show-text-cursor" #f 857 18 857 34 ("show-cursor" "selectable?" "editable?" "enabled?" "and" "when")}
        {Lisp-Entry "cursor-update" #f 862 11 862 24 (":ibeam" ":left-arrow" "set-cursor" "paragraph-left" "get-h" "<" "if" "get-row" "get-paragraph" "par" "view->text" "pos" "let*" "selectable?" "enabled?" "and" "when" "show-text-cursor" "view")}
        {Lisp-Entry "get-caret-pen" #f 877 18 877 31 ("caret-pen")}
        {Lisp-Entry "set-caret-pen" #f 881 18 881 31 ("caret-pen" "set!" "value")}
        {Lisp-Entry "pulse-caret" #f 885 11 885 22 ("invalidate-caret" "not" "caret-visible?" "set!" "editable?" "when")}
        {Lisp-Entry "show-caret" #f 891 11 891 21 ("invalidate-caret" "pulse-caret" "0.5" "Pulse" "new" "caret-visible?" "set!" "caret-pulse" "not" "has-focus?" "editable?" "and" "when")}
        {Lisp-Entry "hide-caret" #f 898 11 898 21 ("invalidate-caret" "caret-visible?" "set!" "close" "caret-pulse" "editable?" "and" "when")}
        {Lisp-Entry "without-caret" #f 906 11 906 24 ("update-caret" "when" "hide-caret" "begin" "unwind-protect" "shown?" "let" "caret-pulse" "editable?" "not" "or" "if" "proc")}
        {Lisp-Entry "update-caret" #f 918 11 918 23 ("show-caret" "get-start" "set-caret-position" "hide-caret" "has-selection?" "if" "get-surrogate" "not" "has-focus?" "editable?" "player" "and" "when")}
        {Lisp-Entry "set-caret-position" #f 926 11 926 29 ("set!" "function" "without-caret" "caret-position" "nu/=?" "when" "pos")}
        {Lisp-Entry "invalidate-caret" #f 933 11 933 27 ("invalidate-rect" "1" "caret-position" "caret-rect" "rect" "let" "fit-caret" "editable?" "when")}
        {Lisp-Entry "caret-rect" #f 941 11 941 21 ("get-h" "Rect" "new" "-" "get-v" "+" "top" "get-height" "if" "height" "get-run" "run" "get-col" "get-line-at" "lne" "get-row" "get-paragraph" "par" "text->view" "pos" "let*" "when" "width" "caret-pos")}
        {Lisp-Entry "get-char-encoding" #f 957 18 957 35 ("char-encoding")}
        {Lisp-Entry "set-char-encoding" #f 961 18 961 35 ("char-encoding" "set!" "value")}
        {Lisp-Entry "mouse-down" #f 970 11 970 21 ("previous-position" "reset-virtual" "update-caret" "set-caret" "change-selection" "focus-selects-all?" "set-anchor?:" "selection-line" "set-selection" "paragraph-left" "get-h" "<" "if" "get-row" "get-paragraph" "par" "reset-selection" "not" "shift-down?" "or" "unless" "char" "'char" "selection-mode" "mouse-selecting?" "set!" "unlock-anchor" "acquire-capture" "acquire-focus" "view->text" "pos" "has-focus?" "focus?" "let" "selectable?" "enabled?" "and" "when" "view")}
        {Lisp-Entry "drag-move" #f 994 11 994 20 ("drag-move-action" "mouse-selecting?" "when" "view")}
        {Lisp-Entry "drag-move-action" #f 999 11 999 27 ("calculate-autoscroll-amount" "setup-autoscroll" "get-scroller" "when" "drag-select" "view")}
        {Lisp-Entry "drag-up" #f 1005 11 1005 18 ("update-focus-actions" "play-current-recording" "get-recorder" "recorder" "not" "and" "process-selection-change" "char" "'char" "selection-mode" "ensure-displayed" "empty-selection?" "update-caret" "previous-position" "set!" "drag-select" "kill-autoscroll" "release-capture" "get-application" "appl" "shift-down?" "shift?" "control-down?" "control?" "alt-down?" "alt?" "let" "mouse-selecting?" "when" "rest" "view")}
        {Lisp-Entry "drag-select" #f 1027 11 1027 22 ("region:" "redraw-window" "invalidate-region" "if" "multi-part-region" "region" "with-closed" "change-selection" "self" "get-delta" "sc" "dv" "dh" "receive" "get-root" "root" "get-player" "player" "selection" "range-difference" "parts" "selection-range" "range" "let*" "previous-position" "/=" "selection-line" "set!" "selection-anchor" "get-end" "cell>=" "get-row" "get-paragraph" "paragraph-left" "get-h" "<" "and" "when" "view->text" "pos" "let" "final?" "view")}
        {Lisp-Entry "double-click" #f 1049 11 1049 23 ("call-mouse-down" "previous-position" "reset-virtual" "word" "'word" "selection-mode" "mouse-selecting?" "set!" "set-anchor?:" "get-range" "set-selection" "outer-expr" "when" "function" "with-safe-explore" "end:" "start:" "self" "explorer-class" "new" "expl" "let" "select-paragraph" "paragraph-left" "get-h" "<" "get-row" "get-paragraph" "par" "view->text" "pos" "let*" "selectable?" "enabled?" "and" "if" "view")}
        {Lisp-Entry "context-menu-click" #f 1067 21 1067 39 ("update-caret" "set-caret" "get-end" ">=" "get-start" "<" "always" "'always" "eq?" "or" "never" "'never" "neq?" "view->text" "text" "let" "acquire-focus" "selectable?" "enabled?" "and" "when" "move-caret" "move-caret:" "pos")}
        {Lisp-Entry "right-mouse-down" #f 1077 11 1077 27 ("context-menu-click" "pos")}
        {Lisp-Entry "context-menu" #f 1081 11 1081 23 ("track-popup-menu" "get-context-menu" "menu" "let" "selectable?" "enabled?" "and" "when" "pos")}
        {Lisp-Entry "get-context-menu" #f 1088 11 1088 27 ("self" "get-application" "text-menu")}
        {Lisp-Entry "new-text-context-menu" #f 1092 18 1092 39 ("layout-menu" "paste" "'paste" "cut" "'cut" "locate" "set-visible?" "editable?" "not" "when" "Text-Context-Menu" "new" "menu" "let")}
        {Lisp-Entry "new-range" #f 1101 25 1101 34 ("Range$Cell$" "new" "end" "start")}
        {Lisp-Entry "select-paragraph" #f 1105 11 1105 27 ("0" "Cell" "Range$Cell$" "new" "set-selection" "get-length" "len" "get-paragraph" "par" "let*" "<=" "when" "get-limit" "limit" "let" "row")}
        {Lisp-Entry "selection-line" #f 1113 11 1113 25 ("1" "+" "paragraph-length" "0" "Cell" "Range$Cell$" "new" "=" "if" "<=" "when" "get-limit" "limit" "let" "row")}
        {Lisp-Entry "selection-range" #f 1121 11 1121 26 ("minimum" "else" "get-end" "list" "maximum" "get-start" "Range$Cell$" "before?" "not" "cond" "get-range" "essay" "range" "outer-composite?:" "outer-expr" "kind" "end:" "start:" "self" "explorer-class" "new" "expl" "let*" "selection-anchor" "inside?" "if" "word" "selection-range-from-anchor" "char" "selection-mode" "case" "pos")}
        {Lisp-Entry "selection-range-from-anchor" #f 1141 11 1141 38 ("else" "get-start" "after?" "get-end" "Range$Cell$" "new" "selection-anchor" "before?" "cond" "pos")}
        {Lisp-Entry "range-difference" #f 1151 11 1151 27 ("get-output" "Range$Cell$" "put" "List-Factory" "new" "parts" "else" ">" "<" "or" "list" "cond" "=" "and" "if" "ey" "sy" "get-end" "ex" "get-start" "sx" "let" "y" "x")}
        {Lisp-Entry "multi-part-region" #f 1171 11 1171 28 ("or" "'or" "combine!" "and" "when" "second" "union" "let" "first" "region" "with-closed" "2" "car" "range-region" "1" "0" "length" "case" "sc" "dv" "dh" "parts")}
        {Lisp-Entry "calculate-autoscroll-amount" #f 1182 11 1182 38 ("Point" "new" "-" "get-height" "av" "else" "-8" "get-width" ">" "8" "0" "<" "cond" "ah" "get-default-height" "height" "get-v" "v" "get-h" "h" "get-display-size" "size" "view->display" "display" "let*" "view")}
        {Lisp-Entry "setup-autoscroll" #f 1193 11 1193 27 ("delay:" "autoscroll-action" "function" "0.01" "Pulse" "new" "set!" "autoscroll-pulse" "not" "when" "kill-autoscroll" "0" "Point" "nu=?" "if" "amount")}
        {Lisp-Entry "kill-autoscroll" #f 1200 11 1200 26 ("set!" "autoscroll-pulse" "close")}
        {Lisp-Entry "autoscroll-action" #f 1205 11 1205 28 ("update-view" "scroll" "mouse-position" "drag-move-action" "amount")}
        {Lisp-Entry "home-column" #f 1216 29 1216 40 ("get-column" "row")}
        {Lisp-Entry "on-home" #f 1220 18 1220 25 ("extend?:" "locked-anchor?" "or" "document?:" "get-property" "goto-home" "evt")}
        {Lisp-Entry "goto-home" #f 1225 18 1225 27 ("process-selection-change" "ensure-scrolled-left" "0" "get-col" "=" "Cell" "new" "start" "home-column" "col" "get-row" "row" "backward" "'backward" "selection-tail" "pos" "let*" "set-caret" "text-beginning" "change-selection" "if" "reset-virtual" "extend?" "document?")}
        {Lisp-Entry "on-end" #f 1242 18 1242 24 ("extend?:" "locked-anchor?" "or" "document?:" "get-property" "goto-end" "evt")}
        {Lisp-Entry "goto-end" #f 1247 18 1247 26 ("process-selection-change" "extend-selection?:" "goto-paragraph-end" "set-caret" "text-ending" "change-selection" "if" "reset-virtual" "extend?" "document?")}
        {Lisp-Entry "goto-paragraph-end" #f 1257 18 1257 36 ("set-caret" "change-selection" "if" "paragraph-length" "get-row" "Cell" "new" "end" "forward" "'forward" "selection-tail" "pos" "let*" "extend-selection?" "extend-selection?:")}
        {Lisp-Entry "on-move" #f 1265 11 1265 18 ("down-arrow-move" "down" "up-arrow-move" "up" "right-arrow-move" "right" "left-arrow-move" "left" "case" "scroll?:" "scroll?" "word?:" "word?" "extend?:" "locked-anchor?" "or" "extend?" "direction:" "get-property" "direction" "let" "self" "invoke" "arrow-press-handler" "if" "evt")}
        {Lisp-Entry "left-arrow-move" #f 1279 29 1279 44 ("process-selection-change" "get-start" "set-caret" "empty-selection?" "backward" "'backward" "selection-tail" "move-backward" "change-selection" "if" "reset-virtual" "word?" "extend?")}
        {Lisp-Entry "right-arrow-move" #f 1289 29 1289 45 ("process-selection-change" "get-end" "set-caret" "empty-selection?" "forward" "'forward" "selection-tail" "move-forward" "change-selection" "if" "reset-virtual" "word?" "extend?")}
        {Lisp-Entry "up-arrow-move" #f 1299 29 1299 42 ("process-selection-change" "reset-selection" "unless" "-1" "move-verticaly" ">" "else" "0" "Point" "new" "scroll" "get-default-height" "height" "let" "cond" "get-col" "col" "get-row" "row" "get-start" "backward" "'backward" "selection-tail" "if" "pos" "let*" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" #f 1313 29 1313 44 ("process-selection-change" "reset-selection" "unless" "1" "move-verticaly" "get-limit" "<" "else" "-" "0" "Point" "new" "scroll" "get-default-height" "height" "let" "cond" "get-col" "col" "get-row" "row" "get-end" "forward" "'forward" "selection-tail" "if" "pos" "let*" "scroll?" "extend?")}
        {Lisp-Entry "move-verticaly" #f 1327 11 1327 25 ("else" "set!" ">" "get-top" "Point" "view->text" "get-col" "min" "move-caret" "virtual-h" "cond" "new-end" "paragraph-length" "new-len" "new-par" "+" "new-row" "Cell" "new" "text->view" "get-h" "h" "get-paragraph" "par" "let*" "shift?" "direction" "inc" "col" "row")}
        {Lisp-Entry "move-caret" #f 1343 29 1343 39 ("set-caret" "change-selection" "if" "backward" "-" "forward" "case" "0" "Point" "new" "scroll" "get-default-height" "height" "let" "cell-displayed?" "unless" "shift?" "direction" "pos")}
        {Lisp-Entry "on-backward-compound" #f 1352 11 1352 31 ("backward-compound" "evt")}
        {Lisp-Entry "on-forward-compound" #f 1356 11 1356 30 ("forward-compound" "evt")}
        {Lisp-Entry "on-upward-compound" #f 1360 11 1360 29 ("upward-compound" "evt")}
        {Lisp-Entry "on-downward-compound" #f 1364 11 1364 31 ("downward-compound" "evt")}
        {Lisp-Entry "backward-compound" #f 1368 29 1368 46 ("left-arrow-move")}
        {Lisp-Entry "forward-compound" #f 1372 29 1372 45 ("right-arrow-move")}
        {Lisp-Entry "upward-compound" #f 1376 29 1376 44 ("up-arrow-move")}
        {Lisp-Entry "downward-compound" #f 1380 29 1380 46 ("down-arrow-move")}
        {Lisp-Entry "prior-page" #f 1384 11 1384 21 ("set-caret" "change-selection" "if" "Cell" "dest" "display-v->row" "row" "vert" "'vert" "get-page-size" "0" "Point" "new" "scroll" "get-row" "row->display-v" "v" "get-start" "start" "let*" "shift?")}
        {Lisp-Entry "next-page" #f 1395 11 1395 20 ("set-caret" "change-selection" "if" "Cell" "dest" "display-v->row" "row" "vert" "'vert" "get-page-size" "-" "0" "Point" "new" "scroll" "get-row" "row->display-v" "v" "get-start" "start" "let*" "shift?")}
        {Lisp-Entry "row->display-v" #f 1406 11 1406 25 ("row->view" "v" "position" "get-v" "-" "top" "let" "row")}
        {Lisp-Entry "display-v->row" #f 1412 11 1412 25 ("get-row" "view->text" "text" "+" "left-padding" "Point" "new" "pos" "position" "get-v" "-" "top" "let*" "v")}
        {Lisp-Entry "selection-tail" #f 1419 11 1419 25 ("forward" "backward" "case" "else" "get-start" "before?" "get-end" "selection-anchor" "after?" "cond" "direction")}
        {Lisp-Entry "on-remove-spaces" #f 1432 18 1432 34 ("get-property" "keep:" "selection" "remove-spaces" "bell" "empty-selection?" "not" "if" "evt")}
        {Lisp-Entry "remove-spaces" #f 1438 18 1438 31 ("if" "one" "list" "none" "case" "replace" "1" "get-col" "+" "get-row" "=" "and" "one-left?" "get-range" "range" "let*" "forward-whitespaces" "backward-whitespaces" "get-end" "end:" "get-start" "start:" "self" "explorer-class" "new" "expl" "let" "one/none" "'one/none" "keep" "keep:" "pos")}
        {Lisp-Entry "on-display-info" #f 1451 18 1451 33 ("get-col" "1" "get-row" "+" "user-message" "get-end" "end" "get-start" "start" "let" "evt")}
        {Lisp-Entry "on-user-code" #f 1459 18 1459 30 ("self" "text-macro" "get-profile" "profile" "get-application" "appl" "let*" "evt")}
        {Lisp-Entry "range-region" #f 1470 11 1470 23 ("or" "'or" "combine!" "left-padding" "range-region" "sub" "with-closed" "end" "start" "paragraph" "function" "for-each-range" "Region" "new" "region" "let" "bottom" "bottom:" "top" "top:" "sc" "dv" "dh" "range")}
        {Lisp-Entry "row-range-rect" #f 1479 11 1479 25 ("get-default-height" "get-line-at" "get-height" "+" "get-width" "1" "max" "if" "row->view" "col->view" "get-h" "Rect" "new" "get-paragraph" "paragraph" "let" "end" "start" "row")}
        {Lisp-Entry "block-rect" #f 1488 11 1488 21 ("get-width" "row->view" "left-padding" "Rect" "new" "end" "start")}
        {Lisp-Entry "invalidate-row" #f 1496 18 1496 32 ("0" "row-range-rect" "invalidate-rect" "row")}
        {Lisp-Entry "invalidate-range" #f 1500 11 1500 27 ("invalidate-region" "range-region" "region" "with-closed" "self" "get-delta" "sc" "dv" "dh" "receive" "get-root" "root" "when" "get-player" "player" "let" "range")}
        {Lisp-Entry "text-selection-region" #f 1510 11 1510 32 ("bottom:" "top:" "selection" "range-region" "bottom" "top" "sc" "dv" "dh")}
        {Lisp-Entry "selection-region-all" #f 1514 11 1514 31 ("get-display-height" "0" "text-selection-region" "sc" "dv" "dh")}
        {Lisp-Entry "get-selection-color" #f 1518 29 1518 48 ("active-selection-color" "completion-color" "completion-active?" "if")}
        {Lisp-Entry "get-inactive-selection-color" #f 1524 29 1524 57 ("inactive-selection-color")}
        {Lisp-Entry "for-each-range" #f 1528 11 1528 25 ("else" "cond" "paragraph" "to" "from" "n" "for" "loop" "limit" "beginning" "get-col" "get-paragraph" "get-row" "=" "if" "/=" "when" "get-end" "end" "get-start" "start" "let" "proc" "range")}
        {Lisp-Entry "for-each-range-exact" #f 1543 11 1543 31 ("get-length" "0" "either" "end" "start" "paragraph" "function" "for-each-range" "proc" "range")}
        {Lisp-Entry "make-tabs" #f 1558 11 1558 20 ("512" "32" "0" "make-tabs-from")}
        {Lisp-Entry "make-tabs-from" #f 1562 18 1562 32 ("0" "naturals" "increase!" "prog1" "n" "function" "map" "stop" "let" "number" "tab-size" "from")}
        {Lisp-Entry "get-tabs" #f 1570 18 1570 26 ("tabs")}
        {Lisp-Entry "set-tabs" #f 1574 18 1574 26 ("tabs" "set!" "lst")}
        {Lisp-Entry "can-undo?" #f 1583 11 1583 20 ("undoer" "can-undo?")}
        {Lisp-Entry "can-redo?" #f 1587 11 1587 20 ("undoer" "can-redo?")}
        {Lisp-Entry "can-cut?" #f 1591 11 1591 19 ("has-selection?")}
        {Lisp-Entry "can-copy?" #f 1595 11 1595 20 ("has-selection?")}
        {Lisp-Entry "can-paste?" #f 1599 11 1599 21 ()}
        {Lisp-Entry "can-delete?" #f 1603 11 1603 22 ("has-selection?")}
        {Lisp-Entry "can-select-all?" #f 1607 11 1607 26 ()}
        {Lisp-Entry "undo" #f 1611 11 1611 15 ("get-application" "update-focus-actions" "undoer" "undo")}
        {Lisp-Entry "redo" #f 1616 11 1616 15 ("get-application" "update-focus-actions" "undoer" "redo")}
        {Lisp-Entry "cut-selection" #f 1621 11 1621 24 ("delete-selection" "copy-selection")}
        {Lisp-Entry "copy-selection" #f 1626 11 1626 25 ("selection-lines" "join-lines" "set-clipboard-text" "get-application" "add-clipboard" "bell" "empty-selection?" "if")}
        {Lisp-Entry "paste-clipboard" #f 1633 11 1633 26 ("paste-clipboard-string" "when" "get-clipboard-text" "text" "let")}
        {Lisp-Entry "paste-clipboard-string" #f 1639 18 1639 40 ("split-lines" "replace-selection" "string")}
        {Lisp-Entry "delete-selection" #f 1643 11 1643 27 ("list" "replace-selection")}
        {Lisp-Entry "select-all" #f 1647 11 1647 21 ("text-ending" "text-beginning" "Range$Cell$" "new" "set-selection" "rest")}
        {Lisp-Entry "clear-all" #f 1651 18 1651 27 ("delete-selection" "select-all")}
        {Lisp-Entry "get-mark" #f 1661 18 1661 26 ("mark")}
        {Lisp-Entry "set-mark" #f 1665 18 1665 26 ("mark" "set!" "mrk")}
        {Lisp-Entry "on-set-mark" #f 1669 18 1669 29 ("user-message" "selection" "set-mark" "evt")}
        {Lisp-Entry "on-jump-mark" #f 1674 18 1674 30 ("get-selection" "set-mark" "new-mark" "let" "get-end" "maximum" "selection-anchor" "get-start" "list" "minimum" "Range$Cell$" "new" "set-selection" "extend?:" "get-property" "locked-anchor?" "or" "if" "mark" "when" "evt")}
        {Lisp-Entry "empty-selection" #f 1693 11 1693 26 ("text-beginning" "Range$Cell$" "new")}
        {Lisp-Entry "row-selected?" #f 1697 11 1697 24 ("row")}
        {Lisp-Entry "text-beginning" #f 1701 18 1701 32 ("0" "Cell" "new")}
        {Lisp-Entry "text-ending" #f 1705 18 1705 29 ("paragraph-length" "Cell" "new" "get-limit" "limit" "let")}
        {Lisp-Entry "text-empty?" #f 1710 18 1710 29 ("text-ending" "text-beginning" "=")}
        {Lisp-Entry "get-start" #f 1714 25 1714 34 ("selection" "cast" "get-start")}
        {Lisp-Entry "get-end" #f 1718 25 1718 32 ("selection" "cast" "get-end")}
        {Lisp-Entry "get-selection" #f 1722 25 1722 38 ("selection")}
        {Lisp-Entry "set-selection" #f 1726 18 1726 31 ("get-application" "update-focus-actions" "self" "get-mouse-in" "mouse-down?" "ensure-displayed" "center-undisplayed-caret" "center-caret" "'center-caret" "eq?" "if" "mouse-selecting?" "unless" "update-caret" "update-selection" "set-selection-anchor" "selection-anchor" "not" "or" "selection" "cast" "/=" "and" "when" "validate-range" "set-anchor?" "set-anchor?:" "ensure-displayed?" "ensure-displayed?:" "range")}
        {Lisp-Entry "update-selection" #f 1743 18 1743 34 ("when" "invalidate-region" "xor" "'xor" "combine!" "begin" "and" "new" "selection-region-all" "old" "with-closed" "self" "get-delta" "sc" "dv" "dh" "receive" "get-root" "root" "selection" "set!" "not" "if" "get-player" "player" "let" "range")}
        {Lisp-Entry "reset-selection" #f 1762 18 1762 33 ("set-anchor?:" "set-selection" "Range$Cell$" "new" "range" "let" "pos")}
        {Lisp-Entry "fit-range" #f 1767 11 1767 20 ("either" "Range$Cell$" "new" "or" "e" ">" "when" "s" "get-end" "end" "get-start" "start" "text-ending" "ending" "let*" "range")}
        {Lisp-Entry "fit-selection" #f 1777 11 1777 24 ("selection" "set!" "when" "get-selection" "fit-range" "range" "let")}
        {Lisp-Entry "fit-anchor" #f 1783 11 1783 21 ("set!" "when" "selection-anchor" "fit-range" "range" "let")}
        {Lisp-Entry "get-selection-anchor" #f 1789 18 1789 38 ("selection-anchor")}
        {Lisp-Entry "set-selection-anchor" #f 1793 18 1793 38 ("copy" "selection-anchor" "set!" "range")}
        {Lisp-Entry "lock-anchor" #f 1797 18 1797 29 ("locked-anchor?" "set!")}
        {Lisp-Entry "unlock-anchor" #f 1801 18 1801 31 ("locked-anchor?" "set!")}
        {Lisp-Entry "change-selection" #f 1806 18 1806 34 ("set-anchor?:" "selection-range" "set-selection" "apply" "when" "others" "set-anchor?" "bind-keywords" "rest" "pos")}
        {Lisp-Entry "fit-caret" #f 1811 11 1811 20 (">" "paragraph-length" "len" "0" "1" "-" "Cell" "new" "set!" ">=" "if" "get-paragraphs" "cardinality" "count" "get-col" "col" "get-row" "row" "let" "caret-position" "when")}
        {Lisp-Entry "get-caret" #f 1823 18 1823 27 ("get-start")}
        {Lisp-Entry "set-caret" #f 1827 18 1827 27 ("Cell" "new" "reset-selection" "=" "and" "if" "get-length" "get-col" "col" "get-paragraph" "par" "get-limit" "get-row" "0" "max" "min" "row" "let*" "when" "pos")}
        {Lisp-Entry "has-selection?" #f 1839 18 1839 32 ("get-end" "get-start" "/=")}
        {Lisp-Entry "empty-selection?" #f 1843 18 1843 34 ("get-end" "get-start" "=")}
        {Lisp-Entry "at-beginning?" #f 1847 18 1847 31 ("text-beginning" "get-end" "get-start" "=" "and")}
        {Lisp-Entry "at-end?" #f 1852 18 1852 25 ("text-ending" "get-end" "get-start" "=" "and")}
        {Lisp-Entry "at-line-start?" #f 1857 18 1857 32 ("0" "get-start" "get-col" "=")}
        {Lisp-Entry "selected-lines" #f 1861 18 1861 32 ("+" "naturals" "1" "get-row" "-" "0" "get-col" "=" "if" "end-row" "get-end" "end" "get-start" "start" "let*")}
        {Lisp-Entry "invalidate-selection" #f 1868 11 1868 31 ("invalidate-range" "sel")}
        {Lisp-Entry "get-char" #f 1872 18 1872 26 ("element" "cardinality" "<" "if" "get-paragraph" "get-string" "string" "get-col" "col" "get-row" "row" "let" "pos")}
        {Lisp-Entry "get-string" #f 1881 18 1881 28 ("range-strings" "join-lines" "range")}
        {Lisp-Entry "next!" #f 1885 18 1885 23 ("else" "0" "set-col" "increase-row" "get-limit" "<" "increase-col" "get-row" "paragraph-length" "get-col" "/=" "cond" "pos")}
        {Lisp-Entry "previous!" #f 1897 18 1897 27 ("else" "paragraph-length" "set-col" "increase-row" "get-row" ">" "-1" "increase-col" "0" "get-col" "/=" "cond" "pos")}
        {Lisp-Entry "next-cell" #f 1909 18 1909 27 ("next!" "when" "copy" "cell" "let" "pos")}
        {Lisp-Entry "previous-cell" #f 1915 18 1915 31 ("previous!" "when" "copy" "cell" "let" "pos")}
        {Lisp-Entry "selection-lines" #f 1921 11 1921 26 ("selection" "range-strings")}
        {Lisp-Entry "get-selected-string" #f 1925 18 1925 37 ("get-selection" "get-string" "has-selection?" "when")}
        {Lisp-Entry "next-pos" #f 1930 18 1930 26 ("else" "1" "-" "next!" "0" "<=" "cond" "iterate" "copy" "let" "offset" "pos")}
        {Lisp-Entry "previous-pos" #f 1941 18 1941 30 ("else" "1" "-" "previous!" "0" "<=" "cond" "iterate" "copy" "let" "offset" "pos")}
        {Lisp-Entry "get-column" #f 1952 18 1952 28 ("get-col" "increase!" "get-char" "memq?" "while" "0" "Cell" "new" "pos" "let" "row")}
        {Lisp-Entry "current-name" #f 1959 26 1959 38 ("get-marked" "outer-expr" "when" "get-selection" "range:" "self" "explorer-class" "new" "expl" "let")}
        {Lisp-Entry "on-goto-line" #f 1965 11 1965 23 ("parse-integer" "-" "goto-line" "->string" "initial-value:" "prefix:" "title:" "request-string" "string" "1" "get-row" "+" "line" "get-start" "start" "let*" "evt")}
        {Lisp-Entry "goto-line" #f 1972 18 1972 27 ("+" "else" "paragraph-length" "let" "get-limit" ">=" "1" "Cell" "Range$Cell$" "new" "set-selection" "0" "<" "cond" "line")}
        {Lisp-Entry "added-update-selection" #f 1982 11 1982 33 ("count" "rank")}
        {Lisp-Entry "removed-update-selection" #f 1986 11 1986 35 ("count" "rank")}
        {Lisp-Entry "on-lock-anchor" #f 1993 18 1993 32 ("user-message" "lock-anchor" "evt")}
        {Lisp-Entry "on-unlock-anchor" #f 1998 18 1998 34 ("user-message" "unlock-anchor" "evt")}
        {Lisp-Entry "layout-scrollee-patch" #f 2009 11 2009 32 ("update-displayed")}
        {Lisp-Entry "scrollee-width" #f 2018 11 2018 25 ("4000" "calculate-scrollee-width" "left-padding" "+" "dynamic-scrollee-width?" "visible-width" "get-display-width" "max" "wrap-width" "either" "wrap?" "if")}
        {Lisp-Entry "dynamic-scrollee-width?" #f 2028 11 2028 34 ("16" "visible-count" "<=")}
        {Lisp-Entry "calculate-scrollee-width" #f 2032 11 2032 35 ("set!" ">" "when" "compute-width" "paragraph-width" "paragraph" "row" "function" "for-each-paragraph" "0" "width" "let")}
        {Lisp-Entry "invalidate-update" #f 2047 11 2047 28 ("wrap-content" "nextmethod")}
        {Lisp-Entry "get-paragraph-spacing" #f 2057 18 2057 39 ("paragraph-spacing")}
        {Lisp-Entry "set-paragraph-spacing" #f 2061 18 2061 39 ("paragraph-spacing" "set!" "value")}
        {Lisp-Entry "get-length" #f 2065 18 2065 28 ("get-paragraphs" "cardinality")}
        {Lisp-Entry "get-limit" #f 2069 18 2069 27 ("1" "get-length" "-")}
        {Lisp-Entry "get-paragraph" #f 2073 18 2073 31 ("get-paragraphs" "element" "n")}
        {Lisp-Entry "paragraph-string" #f 2077 18 2077 34 ("get-paragraph" "get-string" "n")}
        {Lisp-Entry "paragraph-length" #f 2081 18 2081 34 ("paragraph-string" "cardinality" "n")}
        {Lisp-Entry "paragraph->string" #f 2085 11 2085 28 ("get-string" "paragraph")}
        {Lisp-Entry "get-print-area" #f 2094 11 2094 25 ("scrollee-height" "800" "0" "Rect" "new" "context")}
        {Lisp-Entry "paginate" #f 2098 11 2098 19 ("get-output" "get-keep-with-next?" "empty-string?" "not" "Rect" "put" "either" "effective-bottom" "let" "set!" "<=" "bot" "get-height" "height" "get-format" "format" "get-string" "string" "paragraph-top" "<" ">=" "and" "when" "paragraph" "rank" "function" "for-each-paragraph" "together" "bottom" "top" "page" "List-Factory" "new" "pages" "1" "get-limit" "get-end" "+" "end" "0" "get-start" "get-row" "if" "start" "has-selection?" "selected?" "let*" "page-height" "page-width")}
        {Lisp-Entry "setup-printing" #f 2129 11 2129 25 ("nextmethod" ":wrap-width" "cons" "wrap-content" "layout-scrollee" "50" "wrap-patch" "800" "set!" "wrap-width" "width" "let")}
        {Lisp-Entry "restore-printing" #f 2140 11 2140 27 ("wrap-content" "layout-scrollee" "wrap-patch" ":wrap-width" "getf" "wrap-width" "set!" "nextmethod" "preserved")}
        {Lisp-Entry "draw-enabled?" #f 2153 29 2153 42 ("enabled?")}
        {Lisp-Entry "get-drawing-background" #f 2157 11 2157 33 ("nextmethod" "Medium" "name:" "Color" "draw-enabled?" "not" "if" "context")}
        {Lisp-Entry "draw-outline" #f 2163 11 2163 23 ("draw-caret" "nextmethod" "draw-selection" "unless" "printing?:" "getf" "printing?" "bottom" "top" "let" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-selection" #f 2174 11 2174 25 ("get-inactive-selection-color" "Light-Orange" "name:" "Color" "get-client" "self" "get-focus" "eq?" "and" "get-application" "get-command-text" "command-text" "let" "get-selection-color" "if" "fill-region" "1.0" "0.0" "text-selection-region" "region" "with-closed" "show-unfocused-selection?" "has-focus?" "or" "when" "bottom" "top" "surface")}
        {Lisp-Entry "draw-caret" #f 2189 11 2189 21 ("*" "fxround" "Rect" "new" "scaled" "if" "0" "get-caret" "caret-rect" "get-bottom" "get-right" "get-top" "get-left" "line" "caret-pen" "set-pen" "rect" "function" "proc" "let" "alt-down?" "mouse-down?" "not" "or" "empty-selection?" "caret-visible?" "and" "when" "sc?" "sc" "surface")}
        {Lisp-Entry "ensure-displayed" #f 2212 11 2212 27 ("ensure-range-displayed" "apply" "selection" "when" "rest")}
        {Lisp-Entry "ensure-cell-displayed" #f 2217 18 2217 39 ("get-scroll-context" "scroll-needed" "scroll" "get-height-at" "0" "Point" "new" "+" "end" "text->view" "start" "let*" "pos")}
        {Lisp-Entry "ensure-range-displayed" #f 2223 18 2223 40 ("get-scroll-context" "0" "Point" "new" "+" "text->view" "scroll-needed" "apply" "scroll" "get-height-at" "end-height" "get-end" "end" "get-start" "start" "let*" "player" "not" "update-locked?" "or" "unless" "rest" "range")}
        {Lisp-Entry "ensure-scrolled-left" #f 2231 18 2231 38 ("Point" "new" "scroll" "-" "<" "get-end" "text->view" "end" "get-display-h" "+" "tail" "*" "fxround" "if" "get-scroll-context" "cdr" "context" "get-display-width" "size" "let*" "get-position" "get-h" "0" "/=" "when" "player" "not" "update-locked?" "or" "unless")}
        {Lisp-Entry "cell-displayed?" #f 2243 18 2243 33 ("scroll-needed" "=" "get-height-at" "0" "Point" "new" "+" "end" "text->view" "start" "let*" "pos")}
        {Lisp-Entry "on-center-caret" #f 2249 11 2249 26 ("center-caret" "evt")}
        {Lisp-Entry "on-top-caret" #f 2253 11 2253 23 ("top-caret" "evt")}
        {Lisp-Entry "center-caret" #f 2257 18 2257 30 ("0" "Point" "new" "scroll-to" "2" "fxround/" "half" "let" ">=" "if" "top" "get-display-height" "height" "-" "size" "get-end" "get-top" "end" "get-start" "get-row" "get-bottom" "start" "let*")}
        {Lisp-Entry "center-undisplayed-caret" #f 2269 18 2269 42 ("center-caret" "get-end" "get-start" "cell-displayed?" "not" "or" "when")}
        {Lisp-Entry "top-caret" #f 2275 18 2275 27 ("-" "0" "Point" "new" "scroll-to" "get-start" "get-row" "get-top" "start" "let")}
        {Lisp-Entry "next-word" #f 2285 18 2285 27 ("get-end" "not" "c" "function" "forward-until" "syntax" "get-constituent-test" "test" "end:" "start:" "self" "Text-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "previous-word" #f 2293 18 2293 31 ("get-start" "not" "c" "function" "backward-until" "syntax" "get-constituent-test" "test" "end:" "start:" "self" "Text-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "move-forward" #f 2306 18 2306 30 ("next-cell" "next-word" "if" "when" "word?" "pos")}
        {Lisp-Entry "move-backward" #f 2311 18 2311 31 ("previous-cell" "previous-word" "if" "when" "word?" "pos")}
        {Lisp-Entry "insert-char" #f 2321 18 2321 29 ("string" "insert-string" "c")}
        {Lisp-Entry "insert-string" #f 2325 18 2325 31 ("split-lines" "replace-selection" "str")}
        {Lisp-Entry "insert-styled" #f 2329 18 2329 31 ("Range$Cell$" "new" "set-style" "insert-string" "get-style" "else" "default-style" "not" "Style" "is?" "cond" "get-start" "start" "let" "style" "string")}
        {Lisp-Entry "insert-line" #f 2336 18 2336 29 ("list" "if" "replace-selection" "proper?" "line")}
        {Lisp-Entry "insert-bulleted-line" #f 2340 18 2340 38 ("toggle-bulleted" "insert-line" "get-start" "get-row" "row" "let" "line")}
        {Lisp-Entry "insert-newline" #f 2346 18 2346 32 ("insert-string" "end-completion")}
        {Lisp-Entry "insert-hyperlink" #f 2351 18 2351 34 ("insert-styled" "Color" "color:" "Hyperlink-Style" "new" "style" "Hyperlink" "name:" "Font" "either" "let*" "action" "action:" "anchor" "anchor:" "font" "font:" "string")}
        {Lisp-Entry "insert-image" #f 2357 18 2357 30 ("insert-styled" "moniker:" "Image-Style" "new" "style" "let" "moniker")}
        {Lisp-Entry "insert-view" #f 2362 18 2362 29 ("insert-styled" "view:" "View-Style" "new" "style" "let" "set-parent" "get-row" "get-paragraph" "paragraph" "get-end" "end" "instantiate" "View" "is?" "if" "view" "let*" "view/form")}
        {Lisp-Entry "create-table" #f 2376 18 2376 30 ("setup-rows" "setup-columns" "header" "'header" "set-shown?" "not" "set-size" "when" "'tree" "locate" "tree" "Table-Border" "new" "border" "let*" "row-count" "row-count:" "columns" "columns:" "node-column?" "node-column?:" "header?" "header?:" "size" "size:")}
        {Lisp-Entry "insert-table" #f 2388 18 2388 30 ("insert-view" "create-table" "apply" "table" "let" "rest")}
        {Lisp-Entry "setup-columns" #f 2394 11 2394 24 ("class:" "add-column" "" "apply" "set!" ":display-images?" "list" "others" "width:" "width" "title:" "getf" "title" "Tree-Label-Column" "Tree-Node-Column" "if" "class" "and" "node?" "let*" "column" "function" "for-each" "first?" "let" "columns" "node-column?" "tree")}
        {Lisp-Entry "setup-rows" #f 2407 11 2407 21 ("0" "naturals" "children:" "row-height:" "add-row" "Formatted-Text-View" "new" "column" "map" "children" "n" "function" "for-each" "cast" "quotient" "row-height" "16" "increase!" "not" "get-height" "height" "let" "when" "row-count" "columns" "header?" "tree")}
        {Lisp-Entry "get-table-cell" #f 2422 18 2422 32 ("get-cell-data" "cell" "table")}
        {Lisp-Entry "insert-table-of-content" #f 2431 26 2431 49 ()}
        {Lisp-Entry "backspace" #f 2440 18 2440 27 ("replace" "get-end" "get-start" "move-backward" "Range$Cell$" "new" "range" "let" "list" "replace-selection" "has-selection?" "if" "at-beginning?" "unless" "write-allowed?" "when" "word?")}
        {Lisp-Entry "delete-char" #f 2449 26 2449 37 ("delete-action")}
        {Lisp-Entry "delete-word" #f 2453 26 2453 37 ("delete-action")}
        {Lisp-Entry "delete-action" #f 2457 18 2457 31 ("replace" "get-end" "move-forward" "get-start" "Range$Cell$" "new" "range" "let" "list" "replace-selection" "has-selection?" "if" "at-end?" "unless" "write-allowed?" "when" "word?")}
        {Lisp-Entry "replace-selection" #f 2466 18 2466 35 ("selection" "replace" "strings")}
        {Lisp-Entry "replace" #f 2470 18 2470 25 ("show-caret" "set-caret" "when" "replace-text" "caret" "let" "strings" "range")}
        {Lisp-Entry "replace-text" #f 2477 21 2477 33 ("update-focus-actions" "call-content-change" "set-selection" "set-end" "list" "replace" "undoer" "register-undo" "Range$Cell$" "new" "let" "contiguous-undo-range" "not" "if" "set-modified?" "+" "-" "recolorize-text" "fit-caret" "fit-anchor" "fit-selection" "first-displayed-rank" "get-paragraph" "first-displayed" "set!" "update-displayed" "car" "cast" "cardinality" "1" "=" "and" "inserting-single-char?" "selection" "copy" "old-selection" "get-application" "appl" "replace-range" "caret" "outline" "get-first-displayed-rank" "get-row" "<=" "ufd?" "range-strings" "old" "length" "count" "get-end" "end" "get-start" "start" "let*" "function" "without-caret" "write-allowed?" "when" "strings" "range")}
        {Lisp-Entry "replace-range" #f 2523 11 2523 24 ("replace-paragraphs" "function" "with-update-locked" "-" "<=" "car" "get-col" "replace-paragraph" "1" "get-row" "=" "and" "if" "length" "count" "get-end" "end" "get-start" "start" "let" "strings" "range")}
        {Lisp-Entry "replace-paragraph" #f 2536 11 2536 28 ("+" "Cell" "new" "invalidate-replacement" "replace-range" "get-bottom" "top" "cardinality" "inserted" "get-paragraph" "paragraph" "let*" "string" "end" "start" "row")}
        {Lisp-Entry "invalidate-replacement" #f 2545 11 2545 33 ("invalidate-paragraph" "scroll-view" "get-height" "get-width" "Rect" "new" "rect" "get-size" "size" "0" "/=" "layout-scrollee" "dynamic-scrollee-width?" "wrap?" "or" "when" "wrap-paragraph" "delta" "let" "top" "paragraph")}
        {Lisp-Entry "replace-paragraphs" #f 2559 11 2559 29 ("Cell" "new" "invalidate-replacements" "replace-ending" "replace-beginning" "get-next" "root-row" "replace-sons" "=" "if" "caret-col" "-1" "caret-row" "last" "cast" "cardinality" "last-length" "get-length" "last-runs" "get-col" "0" "range-runs" "first-runs" "strings->paragraphs" "paragraphs" "get-bottom" "bottom" "last-par" "get-paragraph" "first-par" "range-height" "before" "length" "inserted" "1" "-" "+" "replaced" "er" "get-row" "sr" "get-end" "end" "get-start" "start" "let*" "strings" "range")}
        {Lisp-Entry "invalidate-replacements" #f 2583 11 2583 34 ("invalidate-paragraph" "scroll-view" "get-height" "get-width" "Rect" "new" "rect" "get-size" "size" "let" "0" "/=" "when" "layout-scrollee" "visible-height" "visible-count" "increase!" "-" "delta" "paragraphs-height" "after" "let*" "wrap-paragraph-lowlevel" "paragraph" "function" "for-each" "before" "bottom" "inserted" "replaced" "paragraphs")}
        {Lisp-Entry "invalidate-paragraph" #f 2599 11 2599 31 ("invalidate-drawing" "paragraph")}
        {Lisp-Entry "paragraph-height" #f 2603 11 2603 27 ("get-row-height" "paragraph")}
        {Lisp-Entry "range-height" #f 2607 11 2607 23 ("get-next" "set!" "do" "paragraph-height" "sum" "to" "from" "n" "for" "get-row" "row" "with" "loop" "end" "start")}
        {Lisp-Entry "paragraphs-height" #f 2614 11 2614 28 ("paragraph-height" "map" "+" "apply" "paragraphs")}
        {Lisp-Entry "strings->paragraphs" #f 2618 11 2618 30 ("make-string-paragraph" "string" "function" "map" "get-format" "last-format" "let" "strings" "first-par")}
        {Lisp-Entry "colorize-syntax" #f 2630 29 2630 44 ("rest")}
        {Lisp-Entry "colorize-comments" #f 2634 29 2634 46 ("rest")}
        {Lisp-Entry "colorize-declarations" #f 2638 29 2638 50 ("rest")}
        {Lisp-Entry "recolorize-text" #f 2642 29 2642 44 ("end-row" "start")}
        {Lisp-Entry "get-text" #f 2651 18 2651 26 ("text")}
        {Lisp-Entry "set-text" #f 2655 18 2655 26 ("text" "set!" "parse-text-content" "set-content" "value")}
        {Lisp-Entry "parse-text-content" #f 2660 11 2660 29 ("class-of" "type-name" "error" "else" "parse-jml-content" "JML-Node" "parse-formatted-content" "Formatted-Text-View" "self" "is?" "null/pair?" "and" "parse-string-content" "string?" "empty-content" "not" "cond" "content")}
        {Lisp-Entry "parse-string-content" #f 2673 11 2673 31 ("split-lines" "paragraphs:" "Text" "new" "content")}
        {Lisp-Entry "parse-formatted-content" #f 2677 11 2677 34 ("paragraphs:" "styles:" "get-output" "formats:" "Formatted-Text" "parse-paragraph" "par" "map" "paragraphs" "style" "intern-style" "put" "when" "format" "function" "intern-format" "styles" "List-Factory" "new" "formats" "let*" "content")}
        {Lisp-Entry "parse-paragraph" #f 2697 11 2697 26 ("parse-runs" "parse-format" "format" "iterate-sequence" "scan" "let*" "list" "cons" "string?" "if" "intern-style" "intern-format" "par")}
        {Lisp-Entry "parse-format" #f 2705 11 2705 23 ("unget" "else" "32" "*" "get-left-margin" "+" "n" "indent:" "16" "set-left-margin" "set-bulleted?" ":bulleted" "case" "get-next" "target" "let" "done?" "and" "while" "out?" "Format" "new" "set!" "not" "when" "proc" "function" "add-formatting" "format" "let*" "scan")}
        {Lisp-Entry "parse-runs" #f 2728 11 2728 21 ("error" "else" "iterate-sequence" "parse-run" "pair?" "list" "string?" "cond" "run" "function" "accumulate" "intern-style" "scan")}
        {Lisp-Entry "parse-run" #f 2739 11 2739 20 ("list" "error" "string?" "if" "else" "scaled?:" "scaling:" "eq?" "peek" "next" "scaling" "moniker" "moniker:" "image-name:" "portfolio:" "Image-Style" "get-application" "get-icons-cache" "portfolio" "image" "image:" "set-font" "Font" "font" "font:" "set-highlight" "highlight" "highlight:" "set-color" "Color" "dispatch" "symbol?" "color" "color:" "new-hyperlink-style" "action" ":hyperlink" "get-style" "name" "style:" "case" "get-next" "target" "let" "done?" "while" "Default" "'Default" "base:" "Text-Style" "new" "set!" "not" "when" "proc" "function" "add-styling" "style" "string" "let*" "intern-style" "scan")}
        {Lisp-Entry "new-hyperlink-style" #f 2792 29 2792 48 ("action:" "Hyperlink" "Color" "color:" "Hyperlink-Small" "name:" "Font" "font:" "Hyperlink-Style" "new" "action")}
        {Lisp-Entry "formatted-start-delimiter" #f 2801 14 2801 39 ()}
        {Lisp-Entry "formatted-end-delimiter" #f 2804 14 2804 37 ()}
        {Lisp-Entry "insert-formatted-line" #f 2808 11 2808 32 ("process-formatted" "call-with-input-string" "line")}
        {Lisp-Entry "process-formatted" #f 2813 11 2813 28 ("else" "process-formatted-directive" "read-formatted-parameter" "directive" "cond" "not" "and" "when" "process" "read-char" "write-char" "Default" "'Default" "get-output-string" "insert-styled" "formatted-end-delimiter" "formatted-start-delimiter" "eqv?" "eof-object?" "or" "if" "peek-char" "c" "iterate" "open-output-string" "output" "let" "process-string" "define" "input")}
        {Lisp-Entry "process-formatted-directive" #f 2840 29 2840 56 ("else" "registered-font" "set-text-font" "font" "registered-color" "set-text-color" "read-formatted-parameter" "color" "toggle-underline" "underline" "toggle-italic" "italic" "toggle-bold" "range" "function" "bold" "at-line-start?" "unless" "$" "insert-newline" "%" "case" "Range$Cell$" "new" "end" "error" "eof-object?" "if" "read-char" "end-char" "process-formatted" "get-start" "start" "let" "proc" "with-processed-range" "define" "input" "directive")}
        {Lisp-Entry "read-formatted-parameter" #f 2882 11 2882 35 ("read-char" "read" "prog1" "input")}
        {Lisp-Entry "parse-jml-content" #f 2913 11 2913 28 ("paragraphs:" "styles:" "get-output" "formats:" "Formatted-Text" "get-children" "parse-jml-paragraph" "par" "map" "paragraphs" "style" "intern-style" "put" "when" "format" "function" "intern-format" "styles" "List-Factory" "new" "formats" "let*" "node")}
        {Lisp-Entry "parse-jml-paragraph" #f 2933 11 2933 30 ("error" "else" "parse-p-tag" "p" "case" "get-tag" "tag" "let" "get-text" "list" "cons" "JML-Text" "is?" "if" "intern-style" "intern-format" "node")}
        {Lisp-Entry "parse-p-tag" #f 2942 11 2942 22 ("parse-p-runs" "cons" "parse-p-format" "format" "let" "intern-style" "intern-format" "node")}
        {Lisp-Entry "parse-p-format" #f 2947 11 2947 25 ("16" "set-left-margin" "set-bulleted?" "bulleted?" "'bulleted?" "get-property" "Format" "new" "set!" "not" "when" "proc" "function" "add-formatting" "format" "let*" "node")}
        {Lisp-Entry "parse-p-runs" #f 2962 11 2962 23 ("get-children" "parse-p-run" "function" "map" "intern-style" "node")}
        {Lisp-Entry "parse-p-run" #f 2968 11 2968 22 ("error" "else" "parse-style-tag" "style" "case" "get-tag" "tag" "let" "get-text" "list" "JML-Text" "is?" "if" "intern-style" "node")}
        {Lisp-Entry "parse-style-tag" #f 2977 11 2977 26 ("list" "get-properties" "error" "else" "parse-color" "set-color" "color" "set-font-weight" "font-weight" "case" "value" "property" "function" "for-each-property" "Default" "'Default" "base:" "Text-Style" "new" "style" "first-child" "get-text" "string" "let" "intern-style" "node")}
        {Lisp-Entry "parse-color" #f 2989 11 2989 22 ("Color" "dispatch" "color")}
        {Lisp-Entry "get-text-content" #f 2998 18 2998 34 ("text-content")}
        {Lisp-Entry "set-text-content" #f 3002 18 3002 34 ("set-content" "text-content" "set!" "value")}
        {Lisp-Entry "patch-formatted-bug" #f 3012 18 3012 37 ("get-runs" "get-style" "intern-style" "set-style" "run" "for-each" "get-format" "intern-format" "set-format" "paragraph" "row" "function" "for-each-paragraph" "styles" "formats" "empty-content")}
        {Lisp-Entry "read-formatted" #f 3023 21 3023 35 ("read" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "moniker")}
        {Lisp-Entry "save-formatted" #f 3028 21 3028 35 ("print-formatted" "printer" "function" "parse" "call-with-output-file" "moniker")}
        {Lisp-Entry "print-formatted" #f 3034 21 3034 36 ("range-paragraph-runs" "get-style" "style-reference" "get-string" "run" "for-each" "get-format" "format-reference" "set!" "paragraph" "function" "iterate" "range-paragraphs" "get-paragraphs" "not" "if" "paragraphs" "first?" "print-styles" "print-formats" "format" "styles" "collect-persistent" "formats" "let" "range" "printer")}
        {Lisp-Entry "range-paragraph-runs" #f 3061 11 3061 31 ("range-runs" "get-length" "end" "0" "get-col" "either" "start" "and" "when" "get-end" "last?" "get-start" "get-row" "get-paragraph" "eq?" "first?" "let" "get-runs" "not" "if" "range" "paragraph")}
        {Lisp-Entry "print-formats" #f 3073 11 3073 24 ("set!" "if" "fmt" "function" "for-each" "first?" "let" "format" "printer" "formats")}
        {Lisp-Entry "print-styles" #f 3085 11 3085 23 ("set!" "if" "style" "function" "for-each" "first?" "let" "format" "printer" "styles")}
        {Lisp-Entry "get-formatted-content" #f 3097 18 3097 39 ("get-formatted-paragraphs" "paragraphs:" "styles:" "List" "coerce" "formats:" "Formatted-Text" "new" "styles" "collect-persistent" "formats" "let")}
        {Lisp-Entry "get-formatted-paragraphs" #f 3106 11 3106 35 ("get-output" "get-runs" "get-style" "style-reference" "get-string" "list" "run" "map" "get-format" "format-reference" "cons" "put" "paragraph" "row" "function" "for-each-paragraph" "List-Factory" "new" "fact" "let" "styles" "formats")}
        {Lisp-Entry "set-formatted-content" #f 3117 18 3117 39 ("error" "else" "set-unformatted-content" "Text" "complete-setup" "get-row-height" "increase!" "wrap-paragraph" "set!" "set-next" "set-previous" "make-paragraph" "paragraph" "make-runs" "run-infos->string" "string" "reference-format" "essay" "runs" "format" "bind" "info" "function" "accumulate" "rows" "root-row" "previous" "height" "0" "count" "setup-style" "setup-format" "map" "let*" "get-paragraphs" "paragraphs" "get-styles" "styles" "get-formats" "formats" "let" "Formatted-Text" "typecase" "text")}
        {Lisp-Entry "complete-setup" #f 3149 11 3149 25 ("invalidate-update" "selection-anchor" "empty-selection" "selection" "get-width" "visible-width" "visible-height" "visible-count" "set!" "Axis" "coerce" "set-paragraphs" "height" "count" "rows")}
        {Lisp-Entry "wrap-content" #f 3159 18 3159 30 ("invalidate-view" "layout-scrollee" "visible-height" "set!" "get-row-height" "increase!" "wrap-paragraph" "paragraph" "function" "get-paragraphs" "iterate" "0" "height" "let" "update-locked?" "unless" "context")}
        {Lisp-Entry "wrap-paragraph" #f 3174 21 3174 35 ("visible-height" "increase!" "-" "delta" "wrap-paragraph-lowlevel" "get-row-height" "before" "let" "paragraph" "context")}
        {Lisp-Entry "wrap-paragraph-lowlevel" #f 3182 21 3182 44 ("wrap" "get-paragraph-width" "width" "let" "flatten" "wrap?" "not" "if" "paragraph" "context")}
        {Lisp-Entry "get-paragraph-width" #f 3189 11 3189 30 ("get-format" "get-left-margin" "left-padding" "get-display-width" "wrap-patch" "wrap-width" "if" "-" "40" "max" "paragraph")}
        {Lisp-Entry "range-paragraphs" #f 3193 11 3193 27 ("get-output" "set!" "eq?" "unless" "put" "not" "if" "get-paragraph" "paragraph" "get-end" "to" "get-start" "get-row" "from" "row" "for" "loop" "List-Factory" "new" "fact" "last" "let" "range")}
        {Lisp-Entry "copy-formatted-selection" #f 3206 11 3206 35 ("jazz-formatted-text" "'jazz-formatted-text" "format:" "set-clipboard-text" "get-output-string" "output" "get-selection" "print-formatted" "open-output-string" "printer" "let" "bell" "empty-selection?" "if" "copy-formatted-selection" "'copy-formatted-selection" "unimplemented")}
        {Lisp-Entry "paste-formatted-clipboard" #f 3217 11 3217 36 ("replace-selection" "split-lines" "strings" "let" "get-selection" "replace-formatted" "apply" "read-string-content" "info" "format:" "get-clipboard-text" "text" "let*" "jazz-formatted-text" "'jazz-formatted-text" "clipboard-format-available?" "if")}
        {Lisp-Entry "replace-formatted" #f 3226 18 3226 35 ("set-caret" "when" "error" "else" "split-lines" "replace-text" "Text" "replace-formatted-text" "run-infos->string" "runs" "format" "bind" "run-info" "function" "strings" "setup-style" "intern-style" "interned-styles" "setup-format" "intern-format" "map" "interned-formats" "get-paragraphs" "paragraphs" "get-styles" "styles" "get-formats" "formats" "let*" "Formatted-Text" "typecase" "caret" "let" "info" "range")}
        {Lisp-Entry "replace-formatted-text" #f 3248 21 3248 43 ("update-focus-actions" "call-content-change" "set-selection" "replace-formatted" "copy" "selection" "let" "undoer" "register-undo" "set-modified?" "1" "+" "-" "recolorize-text" "fit-caret" "fit-anchor" "fit-selection" "first-displayed-rank" "get-paragraph" "first-displayed" "set!" "update-displayed" "Range$Cell$" "new" "apply-formats/styles" "get-application" "appl" "replace-range" "caret" "outline" "get-first-displayed-rank" "get-row" "<=" "ufd?" "range-formatted-text" "old" "length" "count" "get-end" "end" "get-start" "start" "let*" "function" "without-caret" "write-allowed?" "when" "paragraphs" "styles" "formats" "strings" "range")}
        {Lisp-Entry "apply-formats/styles" #f 3283 21 3283 41 ("set-row" "fix-view-style-parent" "reference-format" "set-format" "0" "inside?" "and" "when" "1" "get-length" "-" "line-length" "get-paragraph" "full-paragraph" "Range$Cell$" "set-style" "cardinality" "cast" "+" "set-col" "car" "reference-style" "style" "let" "ref" "string" "run" "runs" "format" "bind" "paragraph" "function" "for-each" "end" "get-col" "get-start" "get-row" "Cell" "new" "start" "let*" "paragraphs" "styles" "formats" "range")}
        {Lisp-Entry "range-formatted-text" #f 3307 21 3307 41 ("get-output-string" "read-string-content" "car" "print-formatted" "open-output-string" "printer" "let" "range-formatted-text" "'range-formatted-text" "unimplemented" "range")}
        {Lisp-Entry "toggle-bulleted" #f 3320 18 3320 33 ("16" "-16" "if" "+" "set-left-margin" "not" "set-bulleted?" "get-bulleted?" "bulleted?" "get-left-margin" "left-margin" "let" "format" "function" "get-paragraph" "modify-format" "row")}
        {Lisp-Entry "indent-paragraph" #f 3329 18 3329 34 ("+" "set-left-margin" "get-left-margin" "left" "let" "format" "function" "modify-format" "delta" "paragraph" "row")}
        {Lisp-Entry "set-justification" #f 3336 11 3336 28 ("set-justification" "format" "function" "modify-format" "justification" "paragraph" "row")}
        {Lisp-Entry "modify-format" #f 3342 11 3342 24 ("set-paragraph-format" "get-format" "extend" "format" "let" "proc" "paragraph")}
        {Lisp-Entry "set-paragraph-format" #f 3348 11 3348 31 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "intern-format" "set-format" "format" "paragraph")}
        {Lisp-Entry "apply-style" #f 3356 18 3356 29 ("get-style" "stylize" "end" "start" "name")}
        {Lisp-Entry "stylize" #f 3360 18 3360 25 ("get-style" "Range$Cell$" "set-text-style" "paragraph-length" "get-row" "Cell" "new" "set!" "not" "when" "end" "start" "name/style")}
        {Lisp-Entry "set-style" #f 3366 18 3366 27 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-style" "end" "start" "paragraph" "function" "for-each-range-exact" "intern-style" "let" "style" "range")}
        {Lisp-Entry "set-text-alignment" #f 3377 18 3377 36 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-text-alignment" "end" "start" "paragraph" "function" "for-each-range-exact" "alignment" "range")}
        {Lisp-Entry "set-text-font" #f 3387 18 3387 31 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-text-font" "end" "start" "paragraph" "function" "for-each-range-exact" "font" "range")}
        {Lisp-Entry "set-text-style" #f 3397 18 3397 32 ("set-modified?" "invalidate-drawing" "wrap-paragraph" "set-style" "end" "start" "paragraph" "function" "for-each-range-exact" "intern-style" "let" "style" "range")}
        {Lisp-Entry "set-text-color" #f 3407 18 3407 32 ("set-modified?" "invalidate-drawing" "wrap-paragraph" "set-text-color" "end" "start" "paragraph" "function" "for-each-range-exact" "color" "range")}
        {Lisp-Entry "set-highlight-color" #f 3416 18 3416 37 ("set-modified?" "invalidate-drawing" "wrap-paragraph" "set-highlight-color" "end" "start" "paragraph" "function" "for-each-range-exact" "color" "range")}
        {Lisp-Entry "toggle-bold" #f 3425 18 3425 29 ("invalidate-drawing" "wrap-paragraph" "toggle-bold" "end" "start" "paragraph" "function" "for-each-range-exact" "range")}
        {Lisp-Entry "toggle-italic" #f 3433 18 3433 31 ("invalidate-drawing" "wrap-paragraph" "toggle-italic" "end" "start" "paragraph" "function" "for-each-range-exact" "range")}
        {Lisp-Entry "toggle-underline" #f 3441 18 3441 34 ("invalidate-drawing" "wrap-paragraph" "toggle-underline" "end" "start" "paragraph" "function" "for-each-range-exact" "range")}
        {Lisp-Entry "for-each-paragraph" #f 3449 18 3449 36 ("element" "below" "from" "row" "for" "loop" "get-paragraphs" "paragraphs" "let" "get-length" "end" "end:" "0" "start" "start:" "proc")}
        {Lisp-Entry "for-each-selected-paragraph" #f 3455 18 3455 45 ("1" "get-end" "+" "end:" "get-start" "get-row" "start:" "for-each-paragraph" "get-selection" "selection" "let" "proc")}
        {Lisp-Entry "get-default-format" #f 3467 18 3467 36 ("default-format")}
        {Lisp-Entry "set-default-format" #f 3471 18 3471 36 ("copy" "setup-format" "formats" "set-domain" "default-format" "set!" "value")}
        {Lisp-Entry "get-formats" #f 3477 18 3477 29 ("formats" "get-content")}
        {Lisp-Entry "get-named-formats" #f 3481 18 3481 35 ("get-formats" "get-name" "format" "function" "collect-if")}
        {Lisp-Entry "setup-format" #f 3487 11 3487 23 ("modify-from" "intern-format" "not" "if" "error?:" "formats" "locate" "essay" "actual" "get-name" "name" "let*" "format")}
        {Lisp-Entry "add-format" #f 3496 18 3496 28 ("modify-from" "register" "set-persistent?" "set-domain" "copy" "let" "not" "if" "error?:" "formats" "locate" "essay" "actual" "get-name" "name" "let*" "format")}
        {Lisp-Entry "get-format" #f 3508 18 3508 28 ("formats" "locate" "error?" "error?:" "name")}
        {Lisp-Entry "intern-format" #f 3512 18 3512 31 ("register" "set-domain" "begin" "formats" "similar" "either" "format")}
        {Lisp-Entry "format-reference" #f 3520 11 3520 27 ("get-name" "get-rank" "either" "formats" "format")}
        {Lisp-Entry "reference-format" #f 3525 11 3525 27 ("element" "get-format" "symbol?" "if" "reference" "formats")}
        {Lisp-Entry "get-default-style" #f 3536 18 3536 35 ("default-style")}
        {Lisp-Entry "set-default-style" #f 3540 18 3540 35 ("copy" "setup-style" "styles" "set-domain" "default-style" "set!" "value")}
        {Lisp-Entry "propagate-styles?" #f 3546 26 3546 43 ()}
        {Lisp-Entry "patch-default-style-height" #f 3552 18 3552 44 ("get-line" "set-height" "set-row-height" "default-style" "get-font" "get-metrics" "get-height" "height" "0" "get-paragraph" "paragraph" "let" "text-empty?" "when")}
        {Lisp-Entry "get-styles" #f 3561 18 3561 28 ("styles" "get-content")}
        {Lisp-Entry "get-named-styles" #f 3565 18 3565 34 ("get-styles" "get-name" "style" "function" "collect-if")}
        {Lisp-Entry "setup-style" #f 3571 11 3571 22 ("modify-from" "intern-style" "not" "if" "error?:" "styles" "locate" "essay" "actual" "get-name" "name" "let*" "style")}
        {Lisp-Entry "add-style" #f 3580 18 3580 27 ("modify-from" "register" "set-persistent?" "set-domain" "copy" "let" "not" "if" "error?:" "styles" "locate" "essay" "actual" "get-name" "name" "let*" "style")}
        {Lisp-Entry "get-style" #f 3592 18 3592 27 ("styles" "locate" "Style" "is?" "if" "error?" "error?:" "name/style")}
        {Lisp-Entry "intern-style" #f 3598 18 3598 30 ("register" "set-domain" "begin" "styles" "similar" "either" "style")}
        {Lisp-Entry "style-reference" #f 3606 11 3606 26 ("get-name" "get-rank" "either" "styles" "style")}
        {Lisp-Entry "reference-style" #f 3611 11 3611 26 ("element" "get-style" "symbol?" "if" "reference" "styles")}
        {Lisp-Entry "fix-view-style-parent" #f 3617 11 3617 32 ("set-parent" "get-view" "view" "View-Style" "is?" "when" "get-style" "style" "run" "function" "for-each" "get-runs" "runs" "let" "paragraph")}
        {Lisp-Entry "commented?" #f 3627 26 3627 36 ("pos")}
        {Lisp-Entry "comment-style?" #f 3631 26 3631 40 ("style")}
        {Lisp-Entry "string-style?" #f 3635 26 3635 39 ("style")}
        {Lisp-Entry "textual-style?" #f 3639 26 3639 40 ("style")}
        {Lisp-Entry "run-infos->string" #f 3648 11 3648 28 ("get-output-string" "format" "car" "string" "info" "function" "for-each" "open-output-string" "printer" "let" "infos")}
        {Lisp-Entry "make-runs" #f 3657 11 3657 20 ("Run" "new" "set!" "reference-style" "get-default-style" "not" "if" "style" "subseq!" "subseq" "cardinality" "cast" "+" "limit" "let*" "cdr" "rank" "bind-optionals" "car" "str" "info" "function" "map" "0" "offset" "let" "infos" "styles" "string")}
        {Lisp-Entry "get-default-height" #f 3675 18 3675 36 ("default-style" "get-height")}
        {Lisp-Entry "get-height-at" #f 3679 18 3679 31 ("get-col" "get-row" "get-paragraph" "get-line-at" "get-height" "pos")}
        {Lisp-Entry "compute-width" #f 3688 18 3688 31 ("set!" ">" "when" "compute-width" "w" "paragraph" "rank" "function" "for-each-paragraph" "0" "width" "let")}
        {Lisp-Entry "get-headers" #f 3703 26 3703 37 ()}
        {Lisp-Entry "get-chapters" #f 3707 26 3707 38 ("get-output" "1" "list" "put" "get-chapter-label" "label" "paragraph-string" "string" "get-column" "=" "when" "get-col" "col" "get-row" "row" "get-target" "header" "let" "pos" "context" "bind" "info" "function" "for-each" "List-Factory" "new" "chapters" "make-search-context" "map" "text-multisearch-all" "occurrences" "get-headers" "headers" "let*")}
        {Lisp-Entry "get-chapter-label" #f 3724 26 3724 43 ("cardinality" "+" "subseq" "header" "col" "string")}
        {Lisp-Entry "get-first-special?" #f 3728 26 3728 44 ()}
        {Lisp-Entry "get-first-chapter" #f 3732 26 3732 43 ("get-name" "not" "text-beginning" "0" "list" "get-moniker" "file" "let" "car" "null?" "get-first-special?" "if" "lst")}
        {Lisp-Entry "get-remaining-chapters" #f 3744 26 3744 48 ("cdr" "null?" "get-first-special?" "if" "lst")}
        {Lisp-Entry "current-expr" #f 3755 26 3755 38 ()}
        {Lisp-Entry "current-expr-range" #f 3759 26 3759 44 ()}
        {Lisp-Entry "current-expr-string" #f 3763 18 3763 37 ("get-string" "when" "current-expr-range" "range" "let")}
        {Lisp-Entry "mouse-insert" #f 3774 11 3774 23 ("insert-string" "function" "with-update-locked" "last" "text-ending" "string-append" "set!" "memv?" "not" "0" "element" "syntax" "text-constituent?" "and" "previous-cell" "get-char" "sc" "text-beginning" "/=" "when" "get-end" "end" "get-start" "start" "let" "copy")}
        {Lisp-Entry "range-strings" #f 3793 11 3793 24 ("get-output" "0" "1" "+" "naturals" "map" "put-sequence" "put" "List-Factory" "new" "dest" "get-col" "paragraph-string" "subseq" "list" "get-row" "=" "if" "get-end" "end" "get-start" "start" "let" "range")}
        {Lisp-Entry "Marked-Column" #f 3810 14 3810 27 ()}
        {Lisp-Entry "on-mark-column" #f 3814 11 3814 25 ("mark-column" "evt")}
        {Lisp-Entry "on-fill-to-column" #f 3818 11 3818 28 ("fill-to-column" "evt")}
        {Lisp-Entry "mark-column" #f 3822 11 3822 22 ("user-message" "Marked-Column" "set!" "get-col" "col" "get-start" "start" "let*")}
        {Lisp-Entry "fill-to-column" #f 3829 11 3829 25 ("make-string" "insert-string" "1" "sign" "case" "-" "delta" "get-col" "col" "get-row" "row" "get-start" "start" "let*" "bell" "Marked-Column" "not" "has-selection?" "or" "if")}
        {Lisp-Entry "position-offset" #f 3845 11 3845 26 ("1" "paragraph-length" "+" "increase!" "below" "from" "n" "for" "loop" "0" "offset" "get-col" "col" "get-row" "row" "let" "pos")}
        {Lisp-Entry "offset-position" #f 3854 11 3854 26 ("set!" "-" "Cell" "new" "continuation-return" ">" "if" "1" "get-string" "cardinality" "+" "next" "paragraph" "rank" "for-each-paragraph" "return" "function" "continuation-capture" "0" "scan" "let" "offset")}
        {Lisp-Entry "on-upcase-selection" #f 3871 11 3871 30 ("get-selected-string" "upcase" "insert-string" "function" "with-preserved-selection" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-downcase-selection" #f 3879 11 3879 32 ("get-selected-string" "downcase" "insert-string" "function" "with-preserved-selection" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-capitalize-selection" #f 3887 11 3887 34 ("get-selected-string" "capitalize" "insert-string" "function" "with-preserved-selection" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "with-preserved-selection" #f 3895 11 3895 35 ("set-selection" "get-selection" "selection" "let" "proc")}
        {Lisp-Entry "get-run-at" #f 3906 18 3906 28 ("get-col" "get-run" "get-row" "get-paragraph" "paragraph" "let" "pos")}
        {Lisp-Entry "get-style-at" #f 3911 18 3911 30 ("get-style" "get-default-style" "not" "if" "get-run-at" "run" "let" "pos")}
        {Lisp-Entry "uncolorize-row" #f 3918 18 3918 32 ("invalidate-paragraph" "default-style" "remove-coloring" "when" "get-paragraph" "paragraph" "let" "row")}
        {Lisp-Entry "colorize" #f 3924 18 3924 26 ("Range$Cell$" "set-text-color" "paragraph-length" "get-row" "Cell" "new" "set!" "not" "when" "end" "start" "color")}
        {Lisp-Entry "fill" #f 3930 18 3930 22 ("set-highlight-color" "1" "+" "Range$Cell$" "new" "range" "let" "pos" "color")}
        {Lisp-Entry "unfill" #f 3935 18 3935 24 ("set-highlight-color" "1" "+" "Range$Cell$" "new" "range" "let" "pos")}
        {Lisp-Entry "new-colorizer" #f 3945 18 3945 31 ("Text-Colorizer" "new" "text")}
        {Lisp-Entry "view->text" #f 3954 18 3954 28 ("get-position" "-" "view->col" "new" "get-paragraph" "par" "get-limit" "v->row" "visible-height" "row" "let*" "Cell" "0" "<" "if" "get-v" "v" "let" "pos")}
        {Lisp-Entry "text->view" #f 3963 18 3963 28 ("get-v" "row->view" "+" "get-h" "Point" "new" "get-col" "col->view" "view" "get-row" "get-paragraph" "par" "let*" "pos")}
        {Lisp-Entry "row->view" #f 3971 11 3971 20 ("get-position" "get-v" "get-paragraph" "par" "let" "row")}
        {Lisp-Entry "string-width" #f 3976 11 3976 23 ("Code" "name:" "Font" "get-all-widths" "JzStringWidth" "string-width" "'string-width" "unimplemented" "end" "start" "string")}
        {Lisp-Entry "validate-range" #f 3988 11 3988 25 ("error" "get-row" ">" "or" "when" "get-end" "end" "get-start" "start" "get-limit" "limit" "let" "range")}
        {Lisp-Entry "set-selection-safe" #f 3997 18 3997 36 ("restrict-range" "set-selection" "apply" "rest" "range")}
        {Lisp-Entry "restrict-range" #f 4001 18 4001 32 ("get-end" "get-start" "Range$Cell$" "paragraph-length" "len" "get-col" "col" "row" "restrict-col" "0" "Cell" "new" "get-row" ">" "if" "cell" "restrict-row" "define" "get-limit" "limit" "let" "range")}
        {Lisp-Entry "set-selection-style" #f 4026 18 4026 37 ("invalidate-view" "layout-scrollee" "set-modified?" "set-paragraph-format" "else" "1" "+" "end:" "start:" "get-length" "0" "Cell" "Range$Cell$" "new" "set-text-style" "paragraph" "row" "function" "for-each-paragraph" "empty-selection?" "or" "cond" "when" "get-row" "get-paragraph" "neq?" "span?" "get-end" "end" "get-start" "start" "get-selection" "selection" "get-style" "style" "error?:" "get-format" "format" "let*" "name")}
        {Lisp-Entry "on-bold" #f 4053 11 4053 18 ("get-selection" "toggle-bold" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-italic" #f 4059 11 4059 20 ("get-selection" "toggle-italic" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "on-underline" #f 4065 11 4065 23 ("get-selection" "toggle-underline" "bell" "empty-selection?" "if" "evt")}
        {Lisp-Entry "get-ruler" #f 4076 26 4076 35 ()}
        {Lisp-Entry "on-toggle-ruler" #f 4080 11 4080 26 ("get-shown?" "set-shown?" "bell" "not" "if" "get-ruler" "ruler" "let" "evt")}
        {Lisp-Entry "set-selection-font-name" #f 4092 18 4092 41 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-font-name" "end" "start" "paragraph" "function" "get-selection" "for-each-range-exact" "name")}
        {Lisp-Entry "set-selection-point-size" #f 4102 18 4102 42 ("invalidate-view" "layout-scrollee" "set-modified?" "wrap-paragraph" "set-point-size" "end" "start" "paragraph" "function" "get-selection" "for-each-range-exact" "size")}
        {Lisp-Entry "pick-text-color" #f 4117 11 4117 26 ("8" "3" "Cell" "geometry:" "get-parent" "popup-colors" "sender")}
        {Lisp-Entry "pick-highlight-color" #f 4121 11 4121 31 ("8" "3" "Cell" "geometry:" "get-parent" "popup-colors" "sender")}
        {Lisp-Entry "has-completion?" #f 4130 21 4130 36 ("has-selection?" "completion-active?" "and")}
        {Lisp-Entry "set-completion" #f 4134 21 4134 35 ("set-selection" "completion-active?" "set!" "range")}
        {Lisp-Entry "remove-completion" #f 4139 11 4139 28 ("set!" "list" "replace-selection" "completion-active?" "when")}
        {Lisp-Entry "end-completion" #f 4145 21 4145 35 ("get-end" "set-caret" "set!" "completion-active?" "when")}
        {Lisp-Entry "auto-complete?" #f 4151 29 4151 43 ()}
        {Lisp-Entry "favorite-completions" #f 4155 29 4155 49 ()}
        {Lisp-Entry "completion-name" #f 4159 29 4159 44 ("postfix" "pos")}
        {Lisp-Entry "alphabetize-completion" #f 4163 11 4163 33 ("String" "coerce" "element" "string-length" ">" "if" "completion" "function" "map" "char<?" "sort" "remove-duplicates" "alphabet-char" "let" "offset" "completions")}
        {Lisp-Entry "completion-string" #f 4172 11 4172 28 ("else" "alphabetize-completion" "alphabet" "offset" "completions-prefix" "common" "5" ">" "user-message" "car" "found" "null?" "cond" "length" "count" "symbol-completions" "completions" "complete-name?" "cdr" "subseq" "either" "concatenate" "clear-user-message" "begin" "if" "macro-playing?" "not" "feedback?" "string=?" "test:" "associate" "favorite" "favorite-completions" "favorites" "string-length" "size" "let*" "when" "completion-name" "name" "let" "postfix" "pos")}
        {Lisp-Entry "complete-name?" #f 4212 29 4212 43 ("2" ">=" "size")}
        {Lisp-Entry "symbol-completions" #f 4216 29 4216 47 ("favorites" "name")}
        {Lisp-Entry "completions-prefix" #f 4220 29 4220 47 ("prefix" "completions")}
        {Lisp-Entry "auto-complete" #f 4224 29 4224 42 ("insert-char/backspace" "end-completion" "list" "replace-selection" "auto-complete-characters" "memq?" "completion-active?" "and" "when" "subseq" "replacement-string" "find" "offset" "selection-lines" "join-lines" "completion-string" "string" "complete-current" "syntax" "auto-complete-char?" "not" "if" "self" "class-of" "class" "1" "-" "get-char" "0" "get-col" ">" "essay" "last" "get-end" "end" "let*" "get-start" "get-style-at" "key")}
        {Lisp-Entry "complete-current" #f 4241 11 4241 27 ("cardinality" "cast" "+" "next-cell" "set-completion" "insert-string" "list" "get-end" "get-start" "previous-cell" "Range$Cell$" "new" "replace-text" "end-completion" "begin" "not" "completion-string" "string" "let" "insert-char/backspace" "get-style-at" "textual-style?" "if" "inserted?" "back?" "postfix" "pos" "key")}
        {Lisp-Entry "convert-completion" #f 4255 21 4255 39 ("set-anchor?:" "Range$Cell$" "new" "set-selection" "end-completion" "get-end" "end" "get-start" "start" "let" "completion-active?" "when")}
        {Lisp-Entry "insert-char/backspace" #f 4263 21 4263 42 ("flash-matching-character" "backspace" "list" "replace-selection" "completion-active?" "insert-char" "eqv?" "not" "if" "when" "word?" "word?:" "c")}
        {Lisp-Entry "flash-character?" #f 4279 29 4279 45 ("char")}
        {Lisp-Entry "flash-matching-character" #f 4283 29 4283 53 ()}
        {Lisp-Entry "on-search-forward-mode" #f 4292 11 4292 33 ("search-forward" "'search-forward" "get-application" "select-command-mode" "evt")}
        {Lisp-Entry "on-search-backward-mode" #f 4296 11 4296 34 ("search-backward" "'search-backward" "get-application" "select-command-mode" "evt")}
        {Lisp-Entry "on-find-forward" #f 4305 18 4305 33 ("on-find-forward" "bell" "select-next" "unless" "syntax" "get-constituent-test" "get-find-targets" "targets" "not" "if" "active-search" "search" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "on-find-backward" #f 4315 18 4315 34 ("on-find-backward" "bell" "select-previous" "unless" "syntax" "get-constituent-test" "get-find-targets" "targets" "not" "if" "active-search" "search" "get-application" "appl" "let" "evt")}
        {Lisp-Entry "find-context" #f 4325 11 4325 23 ("syntax" "get-constituent-test" "constituent-test:" "get-ignore-case?" "ignore-case?:" "get-whole-words?" "whole-words?:" "make-search-context" "get-application" "appl" "not" "if" "current-expr-string" "get-selected-string" "either" "string" "let")}
        {Lisp-Entry "on-find-next" #f 4336 18 4336 30 ("bell" "list" "select-next" "and" "unless" "find-context" "context" "let" "evt")}
        {Lisp-Entry "on-find-previous" #f 4342 18 4342 34 ("bell" "list" "select-previous" "and" "unless" "find-context" "context" "let" "evt")}
        {Lisp-Entry "select-next" #f 4348 26 4348 37 ("ensure-scrolled-left" "ensure-displayed" "cardinality" "position-offset" "+" "offset-position" "Range$Cell$" "new" "set-selection" "get-target" "target" "pos" "context" "bind" "when" "reverse?:" "get-end" "start:" "text-multisearch" "found" "let" "contexts")}
        {Lisp-Entry "select-previous" #f 4359 26 4359 41 ("ensure-scrolled-left" "ensure-displayed" "cardinality" "position-offset" "+" "offset-position" "Range$Cell$" "new" "set-selection" "get-target" "target" "pos" "context" "bind" "when" "reverse?:" "get-start" "start:" "text-multisearch" "found" "let" "contexts")}
        {Lisp-Entry "select-expr" #f 4370 26 4370 37 ("select-next" "text-beginning" "set-caret" "contexts")}
        {Lisp-Entry "select-expr-backward" #f 4375 26 4375 46 ("select-previous" "text-ending" "set-caret" "contexts")}
        {Lisp-Entry "text-multisearch" #f 4385 18 4385 34 ("+" "1" "-" "Cell" "new" "paragraph-string" "string" "<=" "0" ">=" "n" "iter" "get-col" "col" "get-row" "row" "limit" "text-beginning" "text-ending" "either" "pos" "offset-position" "cons" "offset" "bind" "when" "position-offset" "multisearch" "found" "get-string-content" "content" "let" "get-target" "search" "context" "function" "some?" "if" "reverse?" "reverse?:" "get-limit" "end" "end:" "start" "start:" "contexts")}
        {Lisp-Entry "text-multisearch-all" #f 4410 18 4410 38 ("queue-list" "multisearch-all" "Cell" "new" "cons" "enqueue" "pos" "context" "bind" "found" "for-each" "get-string" "line" "paragraph" "row" "function" "for-each-paragraph" "new-queue" "queue" "let" "contexts")}
        {Lisp-Entry "text-search" #f 4422 18 4422 29 ("cdr" "if" "make-search-context" "list" "text-multisearch" "found" "let" "string")}
        {Lisp-Entry "text-search-all" #f 4429 18 4429 33 ("make-search-context" "list" "text-multisearch-all" "cdr" "map" "string")}
        {Lisp-Entry "text-expression-search" #f 4433 18 4433 40 ("car" "when" "position" "search-expressions" "found" "quotation" "'quotation" "code" "'code" "get-extension" "ci=?" "not" "or" "if" "mode" "get-moniker" "moniker" "text-beginning" "self" "Jazz-Explorer" "new" "expl" "let*" "reverse?" "reverse?:" "get-limit" "end" "end:" "start" "start:" "string")}
        {Lisp-Entry "get-class-image" #f 4447 16 4447 31 ("Bitmap-Resource")}
        {Lisp-Entry "component-surrogate" #f 4451 11 4451 30 ("Text-Surrogate")}
        {Lisp-Entry "save-component-properties" #f 4455 11 4455 36 ("set-modified?" "design-events?:" "get-content" "text-content" "'text-content" "self" "set-property" "get-modified?" "when" "designer")}
        {Lisp-Entry "property-presentation" #f 4461 16 4461 37 ("nextmethod" "else" "caret-pen" "inactive-selection-color" "active-selection-color" "default-style" "default-format" "focus-selects-all?" "accepts-returns?" "wrap?" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 4474 11 4474 27 ("nextmethod" "else" "Boolean-Row" "focus-selects-all?" "accepts-returns?" "wrap?" "Color-Row" "inactive-selection-color" "active-selection-color" "Selection-Row" "new" "selection" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 4482 11 4482 37 ("caret-pen" "inactive-selection-color" "active-selection-color" "background" "default-style" "default-format" "focus-selects-all?" "accepts-returns?" "wrap?" "name-info" "class-info")}}
      {Lisp-Entry "Selection-Row" #f 4494 7 4494 20 ("Range-Row")
        {Lisp-Entry "present" #f 4497 11 4497 18 ("get-col" "get-row" "format" "get-end" "end" "get-start" "start" "let" "range")}}}})
"Text-Workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Text-Workspace.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Text-Workspace" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Text-Workspace" #f 46 7 46 21 ("Workbench-Manager" "Hierarchy-Browser" "Chapters-Browser" "31" "46" "Profile-Results" "Search-Results" "Properties-Manager" "Console-Manager" "model-name:" "selection" "second" "-27" "vert" "5" "Rect" "insets:" "36" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "first" "location:" "status" "toolbar" "menubar" "name:" "Jazz-Text-View" "frame-model:" "maximized?:" "Bitmap-Resource" "icon:" "title:" "Standard-Workspace")
        {Lisp-Entry "default-name" #f 69 11 69 23 ("text" "'text")}}}})
"TextToHTML-Exporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "TextToHTML-Exporter.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.TextToHTML-Exporter" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "TextToHTML-Exporter" #f 45 7 45 26 ("Object")
        {Lisp-Entry "text" #f 48 8 48 12 ()}
        {Lisp-Entry "printer" #f 49 8 49 15 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("printer~self" "text~self" "set!" "nextmethod" "printer" "text")}
        {Lisp-Entry "export-html" #f 58 18 58 29 ("print-footer" "text" "to-html" "print-header")}
        {Lisp-Entry "to-html" #f 64 11 64 18 ("error" "else" "text" "'text" "to-html" "Table-Cell" "header" "'header" "get-shown?" "tree" "'tree" "locate" "Table-Border" "tree-column->html" "Tree-Label-Column" "tree-label->html" "Tree-Label" "row->html" "Tree-Row" "tree->html" "Tree-View" "paragraph->html" "Paragraph" "text->html" "Text-View" "typecase" "in-table?" "element")}
        {Lisp-Entry "paragraph->html" #f 78 11 78 26 ("unless" "get-runs" "run->html" "run" "function" "for-each" "64" "16" "get-left-margin" "-" "/" "printer" "format" "when" "get-bulleted?" "bulleted?" "get-format" "fmt" "let*" "in-table?" "paragraph")}
        {Lisp-Entry "run->html" #f 94 11 94 20 ("get-string" "printer" "format" "not-null?" "not" "when" "color:" "get-value" "color" "Default" "'Default" "get-name" "eqv?" "default?" "get-style" "style" "let*" "in-table?" "run")}
        {Lisp-Entry "run->html" #f 108 11 108 20 ("else" "Heading3" "Heading2" "Heading1" "Heading0" "case" "Text-Style" "printer" "format" "Hyperlink-Style" "typecase" "get-string" "string" "get-name" "name" "get-view" "to-html" "View-Style" "is?" "if" "get-style" "style" "let" "in-table?" "run")}
        {Lisp-Entry "text->html" #f 126 11 126 21 ("get-paragraphs" "paragraph->html" "paragraph" "function" "for-each" "in-table?" "element")}
        {Lisp-Entry "tree->html" #f 132 11 132 21 ("row->html" "for-each-row" "get-columns" "to-html" "column" "function" "for-each" "when" "printer" "format" "header?" "tree")}
        {Lisp-Entry "row->html" #f 148 11 148 20 ("get-children" "set!" "to-html" "0" "get-level" "/=" "and" "when" "child" "function" "for-each" "first?" "in-table?" "let" "printer" "format" "rank" "row")}
        {Lisp-Entry "tree-label->html" #f 163 11 163 27 ("printer" "format" "empty-string?" "if" "get-title" "localize" "string" "let" "cell")}
        {Lisp-Entry "tree-column->html" #f 170 11 170 28 ("get-title" "localize" "printer" "format" "column")}
        {Lisp-Entry "print-header" #f 174 18 174 30 ("centered?:" "print-title" "localize" "/=" "when" "printer" "format" "style-sheet" "style-sheet:" "2" "header-level" "header-level:" "header?" "header?:" "name" "name:")}
        {Lisp-Entry "print-footer" #f 191 18 191 30 ("printer" "format")}}}})
"Thread-Snapshot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "snapshot" "Thread-Snapshot.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.snapshot.Thread-Snapshot" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Thread-Snapshot" #f 45 7 45 22 ("Component")}
      {Lisp-Entry "Thread-Snapshot" #f 51 7 51 22 ("Component")
        {Lisp-Entry "model" #f 54 12 54 17 ("generate")}
        {Lisp-Entry "label" #f 55 12 55 17 ("generate")}
        {Lisp-Entry "state" #f 56 12 56 17 ("generate")}
        {Lisp-Entry "system-stack" #f 57 12 57 24 ("generate")}
        {Lisp-Entry "data-stack" #f 58 12 58 22 ("generate")}
        {Lisp-Entry "call-stack" #f 59 12 59 22 ("generate")}
        {Lisp-Entry "construct-literal" #f 63 16 63 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "print" #f 67 11 67 16 ("call-stack" "call-stack:" "data-stack" "data-stack:" "system-stack" "system-stack:" "state" "state:" "label" "label:" "model" "model:" "list" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}}})
"Thread-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Thread-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Thread-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Thread-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-thread" "invoke")}
        {Lisp-Entry "test-thread" #f 61 11 61 22 ()}}}})
"Threads-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugger" "Threads-View.jazz"} 1227218394
    {Lisp-Entry "jazz.debugger.debugger.Threads-View" #f 37 9 37 44 ("Threads-Tree" "register-autoclass" "jazz")
      {Lisp-Entry "Threads-View" #f 57 7 57 19 ("on-double-click" "double-click-handler:" "on-context-menu" "context-menu-handler:" "on-select-thread" "Selection-Handler" "selection-handler:" "row" "selection-mode:" "multiple-selection?:" "threads" "shown?:" "header" "fill" "content" "flat?:" "vscroll?:" "center" "scroller" "on-update" "update" "2" "on-toggle-detailed" "tail" "location:" "detailed" "0" "5" "on-continue" "continue" "on-break" "break" "on-restart" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "Dimension" "size:" "restart" "tools" "name:" "border" "layout-type:" "Layout-View")
        {Lisp-Entry "process" #f 60 12 60 19 ("set-process" "get-process")}
        {Lisp-Entry "external-name" #f 80 16 80 29 ("threads-view" "'threads-view" "rest")}
        {Lisp-Entry "host-icon" #f 89 16 89 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 93 16 93 26 ()}
        {Lisp-Entry "get-tools-view" #f 102 11 102 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 106 11 106 24 ("acquire-focus" "threads" "'threads" "locate" "tree" "let")}
        {Lisp-Entry "install" #f 116 11 116 18 ("update" "nextmethod" "rest")}
        {Lisp-Entry "get-process" #f 126 18 126 29 ("process")}
        {Lisp-Entry "set-process" #f 130 18 130 29 ("update" "process" "set!" "value")}
        {Lisp-Entry "show-detailed?" #f 135 11 135 25 ("detailed" "'detailed" "locate" "get-selected?")}
        {Lisp-Entry "resize" #f 144 11 144 17 ("scroller" "'scroller" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-context-menu" #f 149 11 149 26 ("track-popup-menu" "when" "selected-thread" "new-context-menu" "menu" "let" "function" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-double-click" #f 160 11 160 26 ("evt")}
        {Lisp-Entry "on-toggle-detailed" #f 164 11 164 29 ("update" "evt")}
        {Lisp-Entry "on-select-thread" #f 168 11 168 27 ("thread-change" "update-tools" "evt")}
        {Lisp-Entry "on-break" #f 173 11 173 19 ("get-reference" "process" "break-thread" "function" "with-thread-refresh" "selected-thread" "thread" "let" "evt")}
        {Lisp-Entry "on-continue" #f 180 11 180 22 ("process" "continue-stop" "function" "with-thread-refresh" "get-active-stop" "stop" "selected-thread" "thread" "let" "evt")}
        {Lisp-Entry "on-update" #f 188 11 188 20 ("update" "evt")}
        {Lisp-Entry "with-thread-refresh" #f 192 11 192 30 ("update" ".1" "sleep" "function" "new-thread" "thread-start!" "thunk" "thread")}
        {Lisp-Entry "event-thread-local-proxy?" #f 202 11 202 36 ("event-thread" "get-object" "get-thread" "Debuggee-Thread-Local-Proxy" "is?" "and" "get-reference" "thread-proxy" "let" "get-application" "get-local-debugger" "get-debugger" "eq?" "when" "thread")}
        {Lisp-Entry "restart-stop" #f 209 11 209 23 ("process" "restart-stop" "function" "with-thread-refresh" "selected-thread" "thread" "let" "restart")}
        {Lisp-Entry "update-tools" #f 216 11 216 23 ("get-kind" "eq?" "get-active-stop" "stop" "not" "if" "selected-thread" "thread" "let" "'continue" "'break" "'restart" "locate" "set-enabled?" "continue" "break" "restart" "enable" "define")}
        {Lisp-Entry "System-Threads" #f 235 14 235 28 ()}
        {Lisp-Entry "with-preserving-update" #f 244 11 244 33 ("generate-event?:" "debugged=?" "test:" "data" "'data" "use:" "with-preserved-selection" "thunk" "tree")}
        {Lisp-Entry "update" #f 252 21 252 27 ("get-processes-view" "highlight-process" "set-debugged-problem?" "process" "when" "detailed?:" "update-threads" "problem?" "remove-every-row" "with-preserving-update" "with-update-locked" "threads" "'threads" "locate" "tree" "show-detailed?" "detailed?" "let" "function" "with-system-exception-debugger")}
        {Lisp-Entry "update-threads" #f 268 11 268 25 ("get-threads" "user-data:" "background:" "frame-color:" "image:" "title:" "Tree-Node" "list" "children:" "expanded" "'expanded" "state:" "add-row" "set!" "equal?" "test:" "System-Threads" "member?" "background" "frame-color" "image" "title" "boolean" "set-debugged-problem?" "get-active-stop" "for-each" "problem?" "get-debugger" "when" "split" "car" "line" "get-reason" "reason" "get-visit-highlight" "get-debugged-visit?" "thread-background" "Dark-Red" "name:" "Color" "get-debugged-problem?" "thread-frame-color" "else" "exception" "get-kind" "case" "Bitmap-Resource" "thread-image" "->string" "stop-title" "format" "not" "if" "get-state" "state" "get-name" "present-thread-name" "name" "let" "stop" "thread" "thread-title" "Debugged-Thread" "new" "object" "function" "map" "threads" "process" "debugger" "debugged-threads" "define" "detailed?" "detailed?:" "tree")}
        {Lisp-Entry "thread-change" #f 331 11 331 24 ("get-detail-view" "select-first-frame" "set-thread" "process" "set-process" "get-frames-view" "view" "highlight-thread" "set-debugged-visit?" "when" "selected-thread" "thread" "let")}
        {Lisp-Entry "selected-thread" #f 349 18 349 33 ("get-user-data" "when" "selected-row" "row" "let")}
        {Lisp-Entry "selected-row" #f 355 11 355 23 ("get-row" "when" "get-single-selection" "n" "threads" "'threads" "locate" "tree" "let*")}
        {Lisp-Entry "set-selected-thread" #f 362 11 362 30 ("row-rank" "set-single-selection" "when" "thread-row" "row" "threads" "'threads" "locate" "tree" "let" "thread")}
        {Lisp-Entry "thread-row" #f 369 11 369 21 ("continuation-return" "get-user-data" "debugged=?" "when" "rank" "row" "for-each-row" "return" "function" "continuation-capture" "thread" "tree")}
        {Lisp-Entry "highlight-thread" #f 379 11 379 27 ("invalidate-cell" "get-visit-highlight" "get-debugged-visit?" "set-background" "Dark-Red" "name:" "Color" "get-debugged-problem?" "if" "set-frame-color" "get-cell-data" "data" "0" "row-rank" "Cell" "new" "cell" "when" "thread-row" "row" "threads" "'threads" "locate" "tree" "let" "thread")}
        {Lisp-Entry "new-context-menu" #f 395 11 395 27 ("else" "new-thread-menu" "Debugged-Thread" "typecase" "object")}
        {Lisp-Entry "new-thread-menu" #f 401 11 401 26 ("layout-menu" "cleanup-separators" "on-continue" "Separator-Item" "get-restarts" "reverse" "restart-stop" "event" "execute:" "icon" "get-message" "title" "restart" "function" "for-each" "on-break" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "parent:" "Label-Item" "not" "if" "get-active-stop" "stop" "Thread-Menu" "new" "menu" "let" "thread")}}
      {Lisp-Entry "Threads-Tree" #f 425 7 425 19 ("toplevel-controls?:" "431" "width:" "title:" ":icons" "portfolio:" "Tree-View")}
      {Lisp-Entry "Thread-Menu" #f 441 7 441 18 ("Context-Menu")}}})
"Threeway-Checkbox"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Threeway-Checkbox.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Threeway-Checkbox" #f 41 9 41 39 ("jazz")
      {Lisp-Entry "Threeway-Checkbox" #f 50 7 50 24 ("Check-Box")
        {Lisp-Entry "type" #f 53 12 53 16 ("set-type" "get-type")}
        {Lisp-Entry "property_" #f 54 12 54 21 ("set-property" "get-property")}
        {Lisp-Entry "state" #f 55 12 55 17 ("set-state" "get-state" "none" "'none")}
        {Lisp-Entry "get-type" #f 58 11 58 19 ("type")}
        {Lisp-Entry "set-type" #f 62 11 62 19 ("type" "set!" "value")}
        {Lisp-Entry "get-property" #f 66 11 66 23 ("property_")}
        {Lisp-Entry "set-property" #f 70 11 70 23 ("property_" "set!" "value")}
        {Lisp-Entry "get-state" #f 74 11 74 20 ("state")}
        {Lisp-Entry "set-state" #f 78 11 78 20 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "change-state" #f 83 11 83 23 ("invalidate-view" "next-state" "previous-state" "if" "state" "set!" "reverse?")}
        {Lisp-Entry "previous-state" #f 88 11 88 25 ("'none" "displayed" "'displayed" "validated" "'validated" "none" "case" "state")}
        {Lisp-Entry "next-state" #f 95 11 95 21 ("'none" "validated" "'validated" "displayed" "'displayed" "none" "case" "state")}
        {Lisp-Entry "Validated-Pen" #f 102 14 102 27 ("Dark-Red" "name:" "Color" "color:" "Pen" "new")}
        {Lisp-Entry "Validated-Pen-Grayed" #f 105 14 105 34 ("blue:" "101" "green:" "154" "red:" "Color" "color:" "Pen" "new")}
        {Lisp-Entry "draw-check" #f 109 11 109 21 ("draw-check" "state-pen" "set-pen" "none" "'none" "state" "eq?" "unless" "grayed?" "v" "h" "surface")}
        {Lisp-Entry "state-pen" #f 115 11 115 20 ("Validated-Pen" "Validated-Pen-Grayed" "validated" "Black" "Dark" "name:" "Pen" "if" "displayed" "state" "case" "grayed?")}}}})
"Time-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Time-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Time-Domain" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Time-Domain" #f 46 7 46 18 ("Domain")}
      {Lisp-Entry "Time-Domain" #f 52 7 52 18 ("Domain")
        {Lisp-Entry "validate-value" #f 60 11 60 25 ("property:" "format" "message:" "Integrity-Violation" "new" "add-violation" "Date" "is-not?" "when" "manager" "context" "client" "root" "component" "value" "property")}
        {Lisp-Entry "present" #f 70 11 70 18 ("present-compact" "not" "if" "value")}}}})
"Timer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "utility" "Timer.jazz"} 1226584782
    {Lisp-Entry "jazz.library.utility.Timer" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Timer" #f 45 7 45 12 ("Object")
        {Lisp-Entry "start" #f 48 8 48 13 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("reset" "nextmethod")}
        {Lisp-Entry "reset" #f 56 18 56 23 ("reset-clock")}
        {Lisp-Entry "reset-clock" #f 60 18 60 29 ("cpu-time" "start" "set!")}
        {Lisp-Entry "get-duration" #f 64 18 64 30 ("reset-clock" "when" "start" "cpu-time" "-" "prog1" "reset?" "reset?:")}
        {Lisp-Entry "get-duration-in-seconds" #f 70 18 70 41 ("get-duration")}
        {Lisp-Entry "report-duration" #f 74 18 74 33 ("get-duration-in-seconds" "user-message")}}}})
"Toggle-Tool"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Toggle-Tool.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Toggle-Tool" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Toggle-Tool" #f 46 7 46 18 ("Image-Tool")
        {Lisp-Entry "selected?" #f 49 12 49 21 ("set-selected?" "get-selected?")}
        {Lisp-Entry "default-size" #f 52 11 52 23 ("22" "Dimension")}
        {Lisp-Entry "draw-frame" #f 61 11 61 21 ("nextmethod" "draw-pushed" "out-pushed" "highlighted" "inactive" "get-state" "memq?" "selected?" "and" "if" "surface")}
        {Lisp-Entry "draw-tool" #f 67 11 67 20 ("enabled?:" "image" "disabled-image" "draw" "not" "get-enabled?" "enabled?" "1" "2" "pushed" "'pushed" "get-state" "eq?" "selected?" "or" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-background" #f 75 11 75 26 ("nextmethod" "Light-Background" "name:" "Color" "fill-rect" "get-bounds" "bounds" "selected?" "if" "get-state" "state" "let" "context" "surface")}
        {Lisp-Entry "up" #f 88 11 88 13 ("self" "process-action" "toggle-selected?" "pushed" "'pushed" "get-state" "eq?" "when")}
        {Lisp-Entry "get-selected?" #f 99 18 99 31 ("selected?")}
        {Lisp-Entry "set-selected?" #f 103 18 103 31 ("invalidate-view" "set!" "selected?" "neq?" "when" "flag")}
        {Lisp-Entry "toggle-selected?" #f 109 18 109 34 ("selected?" "not" "set-selected?")}}}})
"Tool-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Tool-Button.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Tool-Button" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Tool-Button" #f 47 7 47 18 ("Layout-View")
        {Lisp-Entry "state" #f 54 8 54 13 ("inactive" "'inactive")}
        {Lisp-Entry "default-size" #f 57 11 57 23 ("22" "100" "Dimension")}
        {Lisp-Entry "mouse-activate?" #f 61 11 61 26 ()}
        {Lisp-Entry "get-state" #f 70 26 70 35 ("state")}
        {Lisp-Entry "set-state" #f 74 26 74 35 ("invalidate-view" "state" "set!" "value")}
        {Lisp-Entry "set-enabled?" #f 84 11 84 23 ("nextmethod" "inactive" "'inactive" "state" "set!" "not" "when" "flag")}
        {Lisp-Entry "draw" #f 95 11 95 15 ("draw-tool" "draw-frame" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-frame" #f 100 29 100 39 ("draw-out-pushed" "out-pushed" "draw-pushed" "pushed" "draw-highlighted" "highlighted" "draw-inactive" "inactive" "get-state" "case" "surface")}
        {Lisp-Entry "draw-inactive" #f 108 29 108 42 ("surface")}
        {Lisp-Entry "draw-highlighted" #f 112 29 112 45 ("dark-pen" "light-pen" "draw-border" "surface")}
        {Lisp-Entry "draw-pushed" #f 116 29 116 40 ("light-pen" "dark-pen" "draw-border" "surface")}
        {Lisp-Entry "light-pen" #f 120 29 120 38 ("Light" "name:" "Pen")}
        {Lisp-Entry "dark-pen" #f 124 29 124 37 ("Dark" "name:" "Pen")}
        {Lisp-Entry "draw-out-pushed" #f 128 29 128 44 ("surface")}
        {Lisp-Entry "draw-border" #f 132 11 132 22 ("line-to-no-stroke" "line-to" "move-to" "set-pen" "get-bottom" "bottom" "1" "get-right" "-" "right" "top" "0" "left" "get-bounds" "rect" "let" "lower" "upper" "surface")}
        {Lisp-Entry "draw-tool" #f 148 29 148 38 ("context" "surface")}
        {Lisp-Entry "mouse-enter" #f 157 11 157 22 ("pushed" "'pushed" "out-pushed" "highlighted" "'highlighted" "set-state" "inactive" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "get-enabled?" "and" "when")}
        {Lisp-Entry "mouse-leave" #f 164 11 164 22 ("out-pushed" "'out-pushed" "pushed" "inactive" "'inactive" "set-state" "highlighted" "get-state" "case" "self" "mouse-down-view" "eq?" "mouse-down?" "not" "or" "and" "when")}
        {Lisp-Entry "mouse-down" #f 171 11 171 21 ("invalidate-view" "down" "pushed" "'pushed" "state" "set!" "get-enabled?" "when" "pos")}
        {Lisp-Entry "down" #f 178 26 178 30 ()}
        {Lisp-Entry "drag-up" #f 182 11 182 18 ("inactive" "'inactive" "out-pushed" "highlighted" "'highlighted" "set-state" "pushed" "get-state" "case" "up" "unwind-protect" "get-enabled?" "when" "rest" "pos")}
        {Lisp-Entry "up" #f 191 26 191 28 ()}}}})
"Tool-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tool" "Tool-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tool.Tool-Preferences" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Tool-Preferences" #f 46 7 46 23 ("title:" "Frame-Preferences")
        {Lisp-Entry "can-rename-component?" #f 58 11 58 32 ()}
        {Lisp-Entry "can-delete-component?" #f 62 11 62 32 ()}
        {Lisp-Entry "can-move-component?" #f 66 11 66 30 ()}
        {Lisp-Entry "can-copy-component?" #f 70 11 70 30 ()}}}})
"Tool-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tool" "Tool-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tool.Tool-View" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Tool-View" #f 45 7 45 16 ("Layout-View")
        {Lisp-Entry "install-in-host" #f 53 11 53 26 ("get-process" "apply-preferences" "when" "tool-preferences" "preferences" "let" "nextmethod" "host")}
        {Lisp-Entry "confirm-close" #f 65 11 65 24 ("save-session" "rest")}
        {Lisp-Entry "save-session" #f 69 11 69 23 ("get-host" "save-preferences" "get-application" "get-preferences-designer" "designer" "when" "tool-preferences" "pref" "let")}}}})
"Toolbar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Toolbar.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Toolbar" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "Toolbar" #f 45 7 45 14 ("View")
        {Lisp-Entry "flow-layout" #f 48 8 48 19 ()}
        {Lisp-Entry "install" #f 51 11 51 18 ("layout-view" "layout-insets" "insets:" "Flow-Layout" "new" "flow-layout" "set!" "nextmethod" "rest")}
        {Lisp-Entry "mouse-activate?" #f 57 11 57 26 ()}
        {Lisp-Entry "layout-insets" #f 61 29 61 42 ("0" "3" "2" "Rect")}
        {Lisp-Entry "layout" #f 65 11 65 17 ("get-height" "get-width" "children" "flow-layout" "layout")}}}})
"Toolbar-Host"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "hosting" "Toolbar-Host.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.hosting.Toolbar-Host" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Toolbar-Host" #f 48 7 48 19 ("Host-View")
        {Lisp-Entry "size-change" #f 56 11 56 22 ("2" "Rect" "insets:" "invalidate-border" "invalidate-top" "nextmethod" "size")}
        {Lisp-Entry "on-close" #f 62 11 62 19 ("selection" "'selection" "first-child" "Pad-View" "close" "get-location" "set-location" "layout-view" "zoom" "'zoom" "set-mode" "begin" "Workspace-Splitter" "if" "when" "first-view" "other" "let" "Splitter-View" "is?" "cond" "get-toplevel" "set-parent" "set-visible?" "function" "with-locked-update" "grand" "get-parent" "parent" "get-host" "host" "let*" "evt")}
        {Lisp-Entry "mouse-activate?" #f 93 11 93 26 ()}
        {Lisp-Entry "activate-focus" #f 97 11 97 25 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "deactivate-focus" #f 102 11 102 27 ("invalidate-caption" "nextmethod")}
        {Lisp-Entry "layout" #f 112 11 112 17 ("Dimension" "new" "set-size" "0" "Point" "set-position" "get-height" "height" "get-width" "width" "let" "guest" "when")}
        {Lisp-Entry "menu-rect" #f 125 11 125 20 ("25" "1" "Rect" "new")}
        {Lisp-Entry "caption-rect" #f 129 11 129 23 ("24" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "top-rect" #f 133 11 133 19 ("25" "2" "get-width" "-" "1" "Rect" "new")}
        {Lisp-Entry "invalidate-top" #f 142 11 142 25 ("top-rect" "invalidate-rect")}
        {Lisp-Entry "invalidate-caption" #f 146 11 146 29 ("caption-rect" "invalidate-rect")}
        {Lisp-Entry "mouse-down" #f 155 11 155 21 ("toggle-docked" "caption-rect" "select-menu" "menu-rect" "in-rect?" "cond" "pos")}
        {Lisp-Entry "toggle-docked" #f 162 11 162 24 ("select-next" "function" "with-locked-update" "get-h" "<" "text-width" "28" "+" "h" "Label" "name:" "Font" "font" "get-title" "title" "Pad-View" "is?" "when" "get-parent" "parent" "get-host" "host" "let*" "pos")}
        {Lisp-Entry "double-click" #f 175 11 175 23 ("unzoom" "zoom" "split" "'split" "get-state" "=" "function" "with-locked-update" "Splitter-View" "when" "splitter" "Pad-View" "is?" "if" "target" "get-parent" "parent" "get-host" "host" "let*" "pos")}
        {Lisp-Entry "select-menu" #f 193 11 193 22 ("25" "2" "Point" "track-popup-menu" "layout-menu" "host:" "list" "properties:" "on-select" "'on-select" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "parent:" "Label-Item" "class-of" "host-icon" "icon" "get-title" "title" "get-guest" "guest" "docked" "function" "for-each" "Context-Menu" "new" "menu" "let" "when" "collect-others" "others" "get-host" "host" "let*")}
        {Lisp-Entry "collect-others" #f 208 11 208 25 ("get-children" "/=" "hst" "function" "collect-if" "Pad-View" "is?" "when" "get-host" "get-parent" "pad" "let" "host")}
        {Lisp-Entry "on-select" #f 216 11 216 20 ("focus-host" "set-selection" "function" "with-locked-update" "host:" "get-property" "host" "get-host" "get-parent" "parent" "let" "evt")}}}})
"Toolbar-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Toolbar-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Toolbar-Preferences" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "Toolbar-Preferences" #f 47 7 47 26 ("Bitmap-Resource" "icon:" "Figure-Preferences")
        {Lisp-Entry "model-name" #f 50 12 50 22 ("generate")}
        {Lisp-Entry "presentation-property?" #f 62 11 62 33 ("title" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 66 11 66 27 ("name" "format" "title" "either")}
        {Lisp-Entry "set-presentation" #f 70 11 70 27 ("title:" "self" "set-property" "title" "designer")}
        {Lisp-Entry "apply-preferences" #f 79 11 79 28 ("set-visible?" "get-guest" "client-activate" "location" "set-location" "set-title" "title" "when" "set-parent" "name" "singleton-toolbar" "host" "get-class" "class" "let*" "assert" "parent")}
        {Lisp-Entry "get-class" #f 91 11 91 20 ("either" "autoload" "cdr" "and" "name" "model-name" "assq" "pair" "get-toolbar-classes" "classes" "workspaces" "'workspaces" "get-preferences" "pref" "let*")}
        {Lisp-Entry "get-class-image" #f 104 16 104 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-categorized-properties" #f 108 11 108 37 ("model-name" "location")}}}})
"Toolbox"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "toolbox" "Toolbox.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.toolbox.Toolbox" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Toolbox" #f 46 7 46 14 ("Group")
        {Lisp-Entry "get-class-presentation" #f 54 16 54 38 ()}
        {Lisp-Entry "get-class-image" #f 58 16 58 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-presentation" #f 62 11 62 27 ()}
        {Lisp-Entry "can-rename-component?" #f 66 11 66 32 ()}
        {Lisp-Entry "can-delete-component?" #f 70 11 70 32 ()}
        {Lisp-Entry "can-move-component?" #f 74 11 74 30 ()}
        {Lisp-Entry "can-copy-component?" #f 78 11 78 30 ()}
        {Lisp-Entry "get-categorized-properties" #f 82 11 82 37 ()}}}})
"Toolbox-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "toolbox" "Toolbox-Editor.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Editor" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Toolbox-Editor" #f 45 7 45 21 ("Descendants-Editor")
        {Lisp-Entry "form-model" #f 48 11 48 21 ("nextmethod" "else" "Toolbox-Tree" "tree" "get-name" "case" "form")}}}})
"Toolbox-Group"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "toolbox" "Toolbox-Group.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Group" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Toolbox-Group" #f 45 7 45 20 ("Component")
        {Lisp-Entry "title" #f 48 12 48 17 ("generate")}
        {Lisp-Entry "get-class-presentation" #f 56 16 56 38 ()}
        {Lisp-Entry "get-class-image" #f 60 16 60 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-addable-classes" #f 64 11 64 30 ("Toolbox-Model" "Toolbox-Group" "list")}}}})
"Toolbox-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "toolbox" "Toolbox-Manager.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Manager" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Toolbox-File" #f 56 12 56 24 ("Profile" "File")}
      {Lisp-Entry "read-toolbox" #f 60 13 60 25 ("err" "continue-handler:" "install-context" "read-from-file" "instantiate" "toolbox" "get-process" "process" "exists?" "when" "Toolbox-File" "file" "let" "function" "with-safe-execution")}
      {Lisp-Entry "Toolbox-Manager" #f 74 7 74 22 ("291" "width:" "title:" "descendant" "auto-expand/collapse?:" "highlight-edited?:" "tree" "flat?:" "scroller" "center" "descendants" "on-new" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "new" "tools" "name:" "border" "layout-type:" "Editor-View")
        {Lisp-Entry "external-name" #f 87 16 87 29 ("toolbox-manager" "'toolbox-manager" "rest")}
        {Lisp-Entry "host-icon" #f 96 16 96 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 100 16 100 26 ()}
        {Lisp-Entry "get-tools-view" #f 109 11 109 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 113 11 113 24 ("acquire-focus" "descendants" "locate" "tree" "let")}
        {Lisp-Entry "install" #f 123 11 123 18 ("read-toolbox" "set-client" "self" "'descendants" "locate" "set-editor" "header" "descendants" "locate-component" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "document-status" #f 135 11 135 26 ()}
        {Lisp-Entry "on-new" #f 144 11 144 17 ("centered?:" "0" "Point" "get-surrogate" "add-new" "car" "length" "1" "=" "client" "get-selection" "selection" "current-document" "editor" "let*" "Component" "subtype?" "autoload" "class" "error" "in-manifest?" "not" "or" "if" "Symbol-Request" "class:" "request-name" "name" "let" "evt")}}}})
"Toolbox-Model"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "toolbox" "Toolbox-Model.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Model" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Toolbox-Model" #f 45 7 45 20 ("Component")
        {Lisp-Entry "module" #f 48 12 48 18 ("generate")}
        {Lisp-Entry "model" #f 49 12 49 17 ("generate")}
        {Lisp-Entry "get-class-presentation" #f 57 16 57 38 ()}
        {Lisp-Entry "get-class-image" #f 61 16 61 31 ("Bitmap-Resource")}
        {Lisp-Entry "presentation-property?" #f 65 11 65 33 ("model" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 69 11 69 27 ("model")}
        {Lisp-Entry "set-presentation" #f 73 11 73 27 ("string->symbol" "model:" "self" "set-property" "model" "designer")}}}})
"Toolbox-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "toolbox" "Toolbox-Tree.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.toolbox.Toolbox-Tree" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Toolbox-Tree" #f 46 7 46 19 ("row" "selection-mode:" "multiple-selection?:" "reorderable?:" "draggable?:" ":icons" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "addable-root-classes" #f 53 11 53 31 ("Toolbox-Model" "Toolbox-Group" "list")}
        {Lisp-Entry "update-selection" #f 60 11 60 27 ("selected-components" "expand-state")}
        {Lisp-Entry "row-state" #f 64 11 64 20 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}}}})
"Tools-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tool" "Tools-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tool.Tools-Preferences" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Tools-Preferences" #f 46 7 46 24 ("title:" "Preferences")
        {Lisp-Entry "can-rename-component?" #f 58 11 58 32 ()}
        {Lisp-Entry "can-delete-component?" #f 62 11 62 32 ()}
        {Lisp-Entry "can-move-component?" #f 66 11 66 30 ()}
        {Lisp-Entry "can-copy-component?" #f 70 11 70 30 ()}}}})
"Tooltip"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "Tooltip.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.Tooltip" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Tooltip" #f 46 7 46 14 ("Transient")
        {Lisp-Entry "with-passing-through" #f 49 11 49 31 ("set-passing-through?" "begin" "unwind-protect" "get-passing-through?" "preserved" "let" "proc")}
        {Lisp-Entry "pass-through" #f 58 11 58 23 ("get-v" "get-h" "function" "with-passing-through" "acquired" "let" "when" "self" "acquire" "owner" "find-window" "window" "Point" "new" "pos" "let*" "proc" "v" "h")}
        {Lisp-Entry "mouse-hover" #f 68 11 68 22 ("mouse-hover" "window" "function" "pass-through" "v" "h")}
        {Lisp-Entry "mouse-down" #f 74 11 74 21 ("mouse-down" "window" "function" "pass-through" "v" "h")}
        {Lisp-Entry "mouse-move" #f 80 11 80 21 ("mouse-move" "window" "function" "pass-through" "v" "h")}
        {Lisp-Entry "mouse-up" #f 86 11 86 19 ("mouse-up" "window" "function" "pass-through" "v" "h")}
        {Lisp-Entry "double-click" #f 92 11 92 23 ("double-click" "window" "function" "pass-through" "v" "h")}
        {Lisp-Entry "context-menu" #f 98 11 98 23 ("context-menu" "window" "function" "pass-through" "v" "h")}}}})
"Tooltip-Context"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Tooltip-Context.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Tooltip-Context" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Tooltip-Context" #f 45 7 45 22 ("Object")
        {Lisp-Entry "view" #f 48 8 48 12 ()}
        {Lisp-Entry "text" #f 49 8 49 12 ()}
        {Lisp-Entry "bounds" #f 50 8 50 14 ()}
        {Lisp-Entry "position" #f 51 8 51 16 ()}
        {Lisp-Entry "font" #f 52 8 52 12 ()}
        {Lisp-Entry "tooltip" #f 53 8 53 15 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("font~self" "position~self" "bounds~self" "text~self" "view~self" "set!" "nextmethod" "font" "font:" "position" "position:" "bounds" "bounds:" "text" "text:" "view" "view:")}
        {Lisp-Entry "print" #f 65 11 65 16 ("font" "position" "bounds" "text" "view" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-view" #f 76 18 76 26 ("view")}
        {Lisp-Entry "get-text" #f 80 18 80 26 ("text")}
        {Lisp-Entry "get-bounds" #f 84 18 84 28 ("bounds")}
        {Lisp-Entry "get-position" #f 88 18 88 30 ("position")}
        {Lisp-Entry "get-font" #f 92 18 92 26 ("font")}
        {Lisp-Entry "get-tooltip" #f 96 18 96 29 ("tooltip")}
        {Lisp-Entry "set-tooltip" #f 100 18 100 29 ("tooltip" "set!" "tt")}}}})
"Tooltip-Label"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Tooltip-Label.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Tooltip-Label" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Tooltip-Label" #f 47 7 47 20 ("Caption" "name:" "Font" "font:" "View")
        {Lisp-Entry "preferred-size" #f 54 11 54 25 ("length" "13" "*" "3" "get-width" "+" "Dimension" "new" "localize" "font" "text-extent" "str" "function" "map" "maximum" "extent" "standard-title" "title" "let*")}
        {Lisp-Entry "standard-title" #f 65 11 65 25 ("equal?" "test:" "list" "title" "null/pair?" "if" "remove-trailing")}
        {Lisp-Entry "Background-Color" #f 78 14 78 30 ("Tooltip" "name:" "Color")}
        {Lisp-Entry "draw" #f 82 11 82 15 ("13" "increase!" "localize" "draw-text" "str" "function" "for-each" "font" "set-font" "standard-title" "title" "1" "v" "2" "h" "let" "Black" "name:" "Color" "set-text-color" "Background-Color" "get-bounds" "fill-rect" "lv" "lh" "context" "surface")}}}})
"Tooltip-Text"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Tooltip-Text.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Tooltip-Text" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Tooltip-Text" #f 47 7 47 19 ("editable?:" "Tooltip" "Color" "background:" "text" "content" "name:" "flat?:" "vscroll?:" "hscroll?:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "get-text" #f 62 18 62 26 ("text" "'text" "locate")}}}})
"Tooltip-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Tooltip-Text-View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Tooltip-Text-View" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Tooltip-Text-View" #f 47 7 47 24 ("Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "4" "left-padding:" "Formatted-Text-View")
        {Lisp-Entry "install" #f 54 11 54 18 ("Variable" "Code" "Dark-Blue" "Hyperlink" "Reference" "Purple" "Comment" "Dark-Red" "Color" "color:" "Title" "Doc-Heading2" "Doc-Heading1" "Font" "font:" "Text-Style" "add-style" "Heading2" "Heading1" "Default" "base:" "Heading0" "name:" "Format" "add-format" "nextmethod" "rest")}
        {Lisp-Entry "get-context-menu" #f 72 11 72 27 ("new-text-context-menu")}}}})
"Toplevel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "Toplevel.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.Toplevel" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Toplevel" #f 49 7 49 15 ("visible?:" "Overlapped")
        {Lisp-Entry "fullscreen?" #f 52 12 52 23 ("set-fullscreen?" "get-fullscreen?")}
        {Lisp-Entry "caption-base" #f 53 12 53 24 ("set-caption-base" "get-caption-base")}
        {Lisp-Entry "caption" #f 54 12 54 19 ("set-caption" "get-caption")}
        {Lisp-Entry "caption?" #f 55 12 55 20 ("set-caption?" "get-caption?")}
        {Lisp-Entry "workspace-preferences" #f 58 8 58 29 ()}
        {Lisp-Entry "on-activate" #f 70 11 70 22 ("nextmethod" "toplevel-deactivate" "inactive" "'inactive" "eq?" "when" "kind")}
        {Lisp-Entry "prepare-root" #f 81 11 81 23 ()}
        {Lisp-Entry "get-workspace-preferences" #f 90 18 90 43 ("workspace-preferences")}
        {Lisp-Entry "set-workspace-preferences" #f 94 18 94 43 ("workspace-preferences" "set!" "preferences")}
        {Lisp-Entry "mouse-activate?" #f 103 11 103 26 ()}
        {Lisp-Entry "activate-app" #f 107 11 107 23 ("processed" "activate" "deactivate" "0" "=" "if" "get-application" "appl" "let" "Cancel-Signal" "catch" "status")}
        {Lisp-Entry "show" #f 116 11 116 15 ("simulate-mouse-move" "update-window" "workspace-installed" "show-undisplayed-message" "get-application" "appl" "show-restored" "show-maximized" "maximized" "restored" "'restored" "get-toplevel-state" "if" "case" "handle" "assert" "error?:" "get-preferences" "pref" "let" "set-visible-flag")}
        {Lisp-Entry "close" #f 130 11 130 16 ("get-process" "exit-process")}
        {Lisp-Entry "get-fullscreen?" #f 139 18 139 33 ("fullscreen?")}
        {Lisp-Entry "set-fullscreen?" #f 143 18 143 33 ("set!" "fullscreen?" "neq?" "when" "value")}
        {Lisp-Entry "get-caption-base" #f 153 18 153 34 ("caption-base")}
        {Lisp-Entry "set-caption-base" #f 157 18 157 34 ("invalidate-title" "caption-base" "set!" "value")}
        {Lisp-Entry "get-caption" #f 167 18 167 29 ("caption")}
        {Lisp-Entry "set-caption" #f 171 18 171 29 ("invalidate-title" "caption" "set!" "value")}
        {Lisp-Entry "get-caption?" #f 176 18 176 30 ("caption?")}
        {Lisp-Entry "set-caption?" #f 180 18 180 30 ("invalidate-title" "caption?" "set!" "value")}
        {Lisp-Entry "invalidate-title" #f 190 11 190 27 ("effective-title" "set-title")}
        {Lisp-Entry "effective-title" #f 194 29 194 44 ("format" "caption-base" "localize" "caption?" "caption" "not" "or" "if")}
        {Lisp-Entry "get-palettes" #f 205 18 205 30 ("children" "get-visible?" "Palette" "is?" "and" "window" "function" "collect-if")}}}})
"Transient"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "Transient.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.Transient" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Transient" #f 45 7 45 16 ("Popup")}}})
"Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Actions" #f 38 9 38 34 ("jazz")
      {Lisp-Entry "Tree-Actions" #f 47 7 47 19 ("next-aux" "prior-aux" "end-aux" "home-aux" "move-downward-aux" "move-upward-aux" "Return" ":alt" "on-properties" "properties" "Subtract" "on-collapse" "collapse" "Multiply" "on-expand-all" "expand-all" "Add" "on-expand" "expand" "Next" "on-next" "next" "Prior" "on-prior" "prior" "extend-end" "End" "on-end" "end" ":shift" "extend-home" "Home" "extend?:" "on-home" "home" "Down" "down" "move-downward" "Up" "Shortcut" "shortcut:" "up" "direction:" "on-move" ":focus" "Event-Handler" "action-handler:" "move-upward" "name:" "Actions")}}})
"Tree-Cell"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Cell.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Cell" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Tree-Cell" #f 45 7 45 16 ("Object")
        {Lisp-Entry "background" #f 48 18 48 28 ()}
        {Lisp-Entry "frame-color" #f 49 18 49 29 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("frame-color~self" "background~self" "set!" "nextmethod" "frame-color" "frame-color:" "background" "background:")}
        {Lisp-Entry "print" #f 58 11 58 16 ("frame-color" "background" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-background" #f 69 18 69 32 ("background")}
        {Lisp-Entry "set-background" #f 73 18 73 32 ("background" "set!" "value")}
        {Lisp-Entry "get-frame-color" #f 77 18 77 33 ("frame-color")}
        {Lisp-Entry "set-frame-color" #f 81 18 81 33 ("frame-color" "set!" "color")}}}})
"Tree-Cell-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Cell-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Cell-View" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Tree-Cell-View" #f 46 7 46 21 ("fill" "layout-type:" "Layout-View")
        {Lisp-Entry "draw-preserved?" #f 49 12 49 27 ("generate")}
        {Lisp-Entry "preserved-data" #f 50 12 50 26 ("generate")}
        {Lisp-Entry "edition-end-proc" #f 51 12 51 28 ("generate")}
        {Lisp-Entry "get-editor" #f 63 18 63 28 ("children" "car")}
        {Lisp-Entry "draw" #f 72 11 72 15 ("lv" "lh" "context" "surface")}}}})
"Tree-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Column.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Column" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Tree-Column" #f 47 7 47 18 ("Component")
        {Lisp-Entry "title" #f 50 22 50 27 ("set-title" "get-title")}
        {Lisp-Entry "width" #f 51 22 51 27 ("set-width" "get-width" "0")}
        {Lisp-Entry "background" #f 52 22 52 32 ("set-background" "get-background")}
        {Lisp-Entry "justification" #f 53 22 53 35 ("set-justification" "get-justification" "head" "'head")}
        {Lisp-Entry "down?" #f 56 18 56 23 ()}
        {Lisp-Entry "title-vertical-offset" #f 57 18 57 39 ("2")}
        {Lisp-Entry "print" #f 60 11 60 16 ("width" "title" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-title" #f 73 18 73 27 ("title")}
        {Lisp-Entry "set-title" #f 77 18 77 27 ("self" "invalidate-column-header" "get-header" "header" "let" "parent" "get-player" "when" "title" "set!" "value")}
        {Lisp-Entry "get-width" #f 85 18 85 27 ("0" "width" "get-visible?" "if")}
        {Lisp-Entry "set-width" #f 89 18 89 27 ("invalidate-view" "parent" "invalidate-columns" "width" "set!" "value")}
        {Lisp-Entry "get-background" #f 95 18 95 32 ("background")}
        {Lisp-Entry "set-background" #f 99 18 99 32 ("parent" "invalidate-view" "background" "set!" "value")}
        {Lisp-Entry "get-justification" #f 104 18 104 35 ("justification")}
        {Lisp-Entry "set-justification" #f 108 18 108 35 ("parent" "invalidate-view" "justification" "set!" "just")}
        {Lisp-Entry "set-visible?" #f 113 18 113 30 ("invalidate-view" "parent" "invalidate-columns" "nextmethod" "flag")}
        {Lisp-Entry "set-title-vertical-offset" #f 119 18 119 43 ("title-vertical-offset" "set!" "offset")}
        {Lisp-Entry "new-empty-cell" #f 128 26 128 40 ()}
        {Lisp-Entry "find-part" #f 137 26 137 35 ("content" "'content" "pos" "cell")}
        {Lisp-Entry "content-rect" #f 146 29 146 41 ("0" "Rect" "new" "get-level" "content-h" "h" "let" "height" "width" "cell" "row")}
        {Lisp-Entry "content-h" #f 151 29 151 38 ("0" "level")}
        {Lisp-Entry "text-h" #f 155 29 155 35 ("0" "level")}
        {Lisp-Entry "sort-value" #f 164 29 164 39 ("get-sort-value" "cell" "row")}
        {Lisp-Entry "get-header-tooltip" #f 173 26 173 44 ("self" "parent" "get-column-tooltip")}
        {Lisp-Entry "get-cell-tooltip" #f 177 26 177 42 ("cell")}
        {Lisp-Entry "header-down" #f 186 26 186 37 ("self" "parent" "get-header" "invalidate-column-header" "down?" "set!" "pos")}
        {Lisp-Entry "header-move" #f 191 26 191 37 ("pos")}
        {Lisp-Entry "header-up" #f 195 26 195 35 ("header-click" "self" "parent" "get-header" "invalidate-column-header" "down?" "set!" "pos")}
        {Lisp-Entry "header-double-click" #f 201 26 201 45 ("header-down" "pos")}
        {Lisp-Entry "mouse-down" #f 205 26 205 36 ("complete-mouse-down" "parent" "acquire-focus" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "complete-mouse-down" #f 210 26 210 45 ("parent" "process-selection" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "drag-move" #f 214 26 214 35 ("pos" "cell")}
        {Lisp-Entry "drag-up" #f 218 26 218 33 ("pos" "cell")}
        {Lisp-Entry "double-click" #f 222 26 222 38 ("pos" "cell")}
        {Lisp-Entry "context-menu" #f 226 26 226 38 ("parent" "call-context-menu" "pos" "cell")}
        {Lisp-Entry "layout-cell" #f 235 26 235 37 ("Dimension" "set-size" "Point" "new" "set-position" "View" "is?" "when" "height" "width" "v" "h" "cell" "row")}
        {Lisp-Entry "Text-Color" #f 246 14 246 24 ("Black" "name:" "Color")}
        {Lisp-Entry "paint-cell" #f 250 18 250 28 ("draw-cell" "function" "parent" "with-transform" "selected?:" "getf" "selected?" "let" "sc?" "sc" "sv" "sh" "cell" "row" "height" "width" "v" "h" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-cell" #f 257 26 257 35 ("0" "draw-at" "height" "width" "cell" "row" "context" "surface")}
        {Lisp-Entry "draw-at" #f 261 26 261 33 ("draw-background" "height" "width" "v" "h" "cell" "row" "context" "surface")}
        {Lisp-Entry "draw-background" #f 265 26 265 41 ("frame-rect" "get-frame-color" "frame-color" "Tree-Cell" "is?" "when" "fill-rect" "background-color" "cycle-debug-color!" "*debug-paint*" "if" "color" "0" "Rect" "new" "rect" "let" "height" "width" "cell" "row" "context" "surface")}
        {Lisp-Entry "background-color" #f 275 11 275 27 ("White" "name:" "Color" "get-cell-background" "get-background" "Tree-Cell" "is?" "essay" "either" "parent" "selection-color" "cell-selected?" "and" "if" "selected?:" "getf" "selected?" "let" "context" "cell")}
        {Lisp-Entry "cell-selected?" #f 284 21 284 35 ("row" "0" "node" "get-selection" "get-col" "get-row" "=" "and" "function" "some?" "self" "column-rank" "col-rank" "row-rank:" "getf" "row-rank" "let" "cell" "parent" "get-selection-mode" "case" "context")}
        {Lisp-Entry "draw-header" #f 297 26 297 37 ("down?" "title" "localize" "draw-header-at" "flat?" "spaced?" "sorted" "height" "width" "v" "h" "context" "surface")}
        {Lisp-Entry "draw-header-at" #f 301 11 301 25 ("draw-raised-button" "draw-sunken-button" "if" "flat?" "spaced?" "sorted" "down?" "title" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "draw-raised-button" #f 307 11 307 29 ("draw-sorted" "draw-text" "Black" "name:" "Color" "set-text-color" "parent" "header-color" "background" "either" "fill-rect" "rect" "bottom" "right" "outer:" "rectangle" "'rectangle" "left" "top" "edges:" "raised" "'raised" "inner:" "draw-edge" "smaller" "header-title-h" "text-h" "0" "1" "expand-rect" "inner" "+" "Rect" "new" "outer" "let*" "-2" "-1" "if" "thick" "let" "flat?" "spaced?" "sorted" "title" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "header-title-h" #f 327 29 327 43 ("justification" "4" "-" "justify-title" "2" "+" "title" "width" "surface")}
        {Lisp-Entry "justify-title" #f 331 21 331 34 ("get-width" "justify" "get-text-extent" "extent" "let" "justification" "title" "width" "surface")}
        {Lisp-Entry "draw-sorted" #f 336 11 336 22 ("down" "'down" "descending" "up" "'up" "draw-arrow-tip" "ascending" "case" "4" "size" "6" "+" "get-text-width" "width" "let*" "Dark" "name:" "Pen" "set-pen" "when" "sorted" "title" "v" "h" "surface")}
        {Lisp-Entry "draw-sunken-button" #f 348 11 348 29 ("draw-sorted" "2" "draw-text" "Black" "set-text-color" "parent" "header-color" "background" "either" "fill-rect" "Color" "frame-rect" "Dark" "name:" "Pen" "set-pen" "1" "header-title-h" "text-h" "-1" "inflate-rect" "inner" "+" "Rect" "new" "outer" "let*" "flat?" "spaced?" "sorted" "title" "height" "width" "v" "h" "surface")}
        {Lisp-Entry "get-class-image" #f 365 16 365 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-debugged" #f 374 26 374 38 ("values" "pos" "cell")}}}})
"Tree-Comparer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "compare" "Tree-Comparer.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.compare.Tree-Comparer" #f 38 9 38 45 ("jazz")
      {Lisp-Entry "Tree-Comparer" #f 46 7 46 20 ("Object")
        {Lisp-Entry "compare-nodes" #f 49 18 49 31 ("scanned-values" "car" "values" "create-item" "compare-node-contents" "entry" "list" "has-differences?" "let*" "feedback" "feedback:" "check-algorithm" "check-algorithm:" "ignored-extensions" "ignored-extensions:" "ignored-leaves" "ignored-leaves:" "ignored-nodes" "ignored-nodes:" "right-content" "right-content:" "left-content" "left-content:" "right-node" "left-node" "parent")}
        {Lisp-Entry "compare-node-contents" #f 55 11 55 32 ("get-output" "set-children" "compare-nodes/leaves" "compare-leaf-values" "leaf" "'leaf" "l" "compare-node-contents" "compare-items" "function" "n" "leaves2" "leaves" "'leaves" "leaves1" "nodes2" "nodes" "'nodes" "collect-items" "nodes1" "node" "'node" "new-entry" "entry" "List-Factory" "new" "fact" "let*" "node-feedback" "has-differences?" "feedback" "check-algorithm" "ignored-extensions" "ignored-leaves" "ignored-nodes" "content2" "node2" "content1" "node1" "parent")}
        {Lisp-Entry "compare-nodes/leaves" #f 70 29 70 49 ("leaves" "nodes")}
        {Lisp-Entry "compare-leaf-values" #f 75 29 75 48 ("leaf" "'leaf" "new-entry" "set-car!" "different?" "and" "when" "value2" "get-value" "value1" "let" "leaf-feedback" "has-differences?" "feedback" "check-algorithm" "ignored-extensions" "ignored-leaves" "ignored-nodes" "content2" "leaf2" "content1" "leaf1" "parent")}
        {Lisp-Entry "compare-items" #f 84 11 84 24 ("item-name" "key:" "content-find" "result" "let" ":same" ":right" "get-value" "leaf" "'leaf" "eq?" "new-entry" "put" "set-car!" ":left" "case" "or" "when" "right" "left" "key" "what" "function" "merge-ordered" "has-differences?" "fact" "feedback" "check-algorithm" "proc" "ignored-extensions" "ignored-leaves" "ignored-nodes" "content2" "items2" "content1" "items1" "kind" "parent")}
        {Lisp-Entry "content-find" #f 97 11 97 23 ("equal?" "test:" "key:" "item-name" "find-in" "cdr" "eq?" "if" "content" "item")}
        {Lisp-Entry "node-feedback" #f 108 29 108 42 ("get-moniker" "feedback" "node2" "node1")}
        {Lisp-Entry "leaf-feedback" #f 112 29 112 42 ("feedback" "leaf2" "leaf1")}
        {Lisp-Entry "make-item" #f 121 11 121 20 ("Compare-Item" "new" "value" "name" "moniker")}
        {Lisp-Entry "item-name" #f 125 11 125 20 ("get-name" "item")}
        {Lisp-Entry "create-item" #f 129 29 129 40 ("moniker")}
        {Lisp-Entry "get-item-type" #f 133 29 133 42 ("item")}
        {Lisp-Entry "get-item-content" #f 137 29 137 45 ("kind" "item")}
        {Lisp-Entry "different?" #f 141 29 141 39 ("check-algorithm" "leaf2" "leaf1")}
        {Lisp-Entry "Not-Ignored-Leaves" #f 151 14 151 32 ()}
        {Lisp-Entry "new-entry" #f 155 29 155 38 ("get-moniker" "essay" "Compare-Entry" "new" "right-value" "right" "left-value" "left" "kind" "parent")}
        {Lisp-Entry "collect-items" #f 159 11 159 24 ("item-name" "key:" "get-item-content" "string<?" "sort" "collect-item?" "item" "function" "collect-if" "kind" "ignored-extensions" "ignored-leaves" "ignored-nodes" "content" "node")}
        {Lisp-Entry "collect-item?" #f 165 29 165 42 ("get-moniker" "get-extension" "Not-Ignored-Leaves" "null?" "'leaf" "key:" "neq?" "member?" "not" "eq?" "or" "and" "else" "leaf" "node" "case" "ignored" "get-item-type" "type" "item-name" "name" "let*" "ignored-extensions" "ignored-leaves" "ignored-nodes" "content" "item")}
        {Lisp-Entry "scanned-values" #f 179 29 179 43 ()}}}})
"Tree-Drag-Source"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Drag-Source.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Drag-Source" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Tree-Drag-Source" #f 45 7 45 23 ("Drag-Source")
        {Lisp-Entry "row" #f 48 8 48 11 ()}
        {Lisp-Entry "col" #f 49 8 49 11 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("col~self" "row~self" "set!" "nextmethod" "apply" "others" "col" "row" "bind-keywords" "rest")}
        {Lisp-Entry "get-row" #f 64 18 64 25 ("row")}
        {Lisp-Entry "get-col" #f 68 18 68 25 ("col")}
        {Lisp-Entry "get-cell" #f 72 18 72 26 ("col" "row" "view" "row-rank" "Cell" "new")}}}})
"Tree-Drop-Target"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Drop-Target.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Drop-Target" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Tree-Drop-Target" #f 45 7 45 23 ("Drop-Target")
        {Lisp-Entry "row" #f 48 8 48 11 ()}
        {Lisp-Entry "col" #f 49 8 49 11 ()}
        {Lisp-Entry "quarter" #f 50 8 50 15 ()}
        {Lisp-Entry "part" #f 51 8 51 12 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("part~self" "quarter~self" "col~self" "row~self" "set!" "nextmethod" "apply" "others" "'row" "part" "quarter" "col" "row" "bind-keywords" "rest")}
        {Lisp-Entry "print" #f 63 11 63 16 ("part" "quarter" "col" "row" "view" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-row" #f 74 18 74 25 ("row")}
        {Lisp-Entry "get-col" #f 78 18 78 25 ("col")}
        {Lisp-Entry "get-cell" #f 82 18 82 26 ("col" "row" "view" "row-rank" "Cell" "new")}
        {Lisp-Entry "get-quarter" #f 86 18 86 29 ("quarter")}
        {Lisp-Entry "get-part" #f 90 18 90 26 ("part")}}}})
"Tree-Embedded-Presentation-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Embedded-Presentation-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Embedded-Presentation-Text-View" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "Tree-Embedded-Presentation-Text-View" #f 47 7 47 43 ("Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Plain-Text-View")
        {Lisp-Entry "tree" #f 50 8 50 12 ()}
        {Lisp-Entry "set-tree" #f 62 18 62 26 ("tree" "set!" "t")}
        {Lisp-Entry "get-tree" #f 71 11 71 19 ("tree")}
        {Lisp-Entry "get-cell" #f 75 11 75 19 ("get-tree" "get-edited-cell")}
        {Lisp-Entry "get-cell-row" #f 79 11 79 23 ("get-cell" "get-row")}
        {Lisp-Entry "get-cell-col" #f 83 11 83 23 ("get-cell" "get-col")}
        {Lisp-Entry "return-press" #f 92 11 92 23 ("end-edition" "key")}
        {Lisp-Entry "tab-press" #f 96 11 96 20 ("modifiers" "key")}
        {Lisp-Entry "up-arrow-move" #f 101 11 101 24 ("get-cell-col" "get-cell-row" "Cell" "new" "get-tree" "select-up" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" #f 105 11 105 26 ("get-cell-col" "get-cell-row" "Cell" "new" "get-tree" "select-down" "scroll?" "extend?")}
        {Lisp-Entry "end-edition" #f 109 11 109 22 ("get-tree" "end-edition" "player" "when")}
        {Lisp-Entry "focus-validate" #f 120 11 120 25 ("select-all" "message-box" "end-edition" "begin" "empty-string?" "not" "if" "get-string-content" "text" "let" "view")}}}})
"Tree-Embedded-Search-Text-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Embedded-Search-Text-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Embedded-Search-Text-Actions" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "Tree-Embedded-Search-Text-Actions" #f 46 7 46 40 ("Return" ":control" "Shortcut" "shortcut:" "on-end-edition" ":focus" "Event-Handler" "action-handler:" "end-edition" "name:" "Actions")}}})
"Tree-Embedded-Search-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Embedded-Search-Text-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Embedded-Search-Text-View" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Tree-Embedded-Search-Text-View" #f 48 7 48 37 ("IDE-Text-View")
        {Lisp-Entry "tree" #f 51 8 51 12 ()}
        {Lisp-Entry "set-tree" #f 59 18 59 26 ("tree" "set!" "t")}
        {Lisp-Entry "get-tree" #f 68 11 68 19 ("tree")}
        {Lisp-Entry "get-cell" #f 72 11 72 19 ("get-tree" "get-edited-cell")}
        {Lisp-Entry "get-cell-values" #f 76 11 76 26 ("get-col" "get-row" "values" "get-cell" "cell" "let")}
        {Lisp-Entry "focus-actions" #f 86 11 86 24 ("nextmethod" "tree-embedded-search-text" "'tree-embedded-search-text" "find-actions" "cons")}
        {Lisp-Entry "upward-compound" #f 92 11 92 26 ("get-guest" "toggle-ignore-case")}
        {Lisp-Entry "focus-lose" #f 101 11 101 21 ("end-edition" "nextmethod" "view")}
        {Lisp-Entry "return-press" #f 106 11 106 23 ("on-search" "bell" "get-find-targets" "null?" "if" "get-guest" "get-search" "search" "end-edition" "get-frame" "frame" "let" "evt")}
        {Lisp-Entry "on-end-edition" #f 115 11 115 25 ("end-edition" "key")}
        {Lisp-Entry "tab-press" #f 119 11 119 20 ("end-edition" "select-cell" "when" "Cell" "new" "cell" "+" "modulo" "else" "-1" "cond" "row-direction" "1" "-" "max-col" "navigate-tab" "0" "=" "get-cell-values" "col" "row" "receive" "get-visible-count" "height" "get-columns-count" "width" "neq?" "to-navigable?" "navigated-view" "to-view" "find-tab-manager" "tab-manager" "get-tree" "tree" "let*" "end-completion" "not" "has-completion?" "and" "if" "shift-key?" "shift?" "let" "modifiers" "key")}
        {Lisp-Entry "left-arrow-move" #f 145 11 145 26 ("nextmethod" "get-cell" "get-tree" "select-left" "if" "word?" "extend?")}
        {Lisp-Entry "right-arrow-move" #f 151 11 151 27 ("nextmethod" "get-cell" "get-tree" "select-right" "if" "word?" "extend?")}
        {Lisp-Entry "up-arrow-move" #f 157 11 157 24 ("get-cell" "get-tree" "select-up" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" #f 161 11 161 26 ("get-cell" "get-tree" "select-down" "scroll?" "extend?")}
        {Lisp-Entry "end-edition" #f 165 11 165 22 ("get-tree" "end-edition" "player" "when")}}}})
"Tree-Header"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Header.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Header" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Tree-Header" #f 54 7 54 18 ("Header-View")
        {Lisp-Entry "resizing?" #f 57 18 57 27 ()}
        {Lisp-Entry "resize-last-h" #f 58 18 58 31 ()}
        {Lisp-Entry "resized-column" #f 59 18 59 32 ()}
        {Lisp-Entry "resized-column-ref" #f 60 18 60 36 ("0")}
        {Lisp-Entry "finish" #f 63 11 63 17 ("get-scroll-client" "client" "set!" "'content" "child" "content" "let" "invalidate-layout" "nextmethod" "rest")}
        {Lisp-Entry "get-column" #f 75 18 75 28 ("get-columns" "element" "n")}
        {Lisp-Entry "column-rank" #f 79 18 79 29 ("get-columns" "find" "column")}
        {Lisp-Entry "borders-left" #f 88 11 88 23 ("car" "borders")}
        {Lisp-Entry "borders-right" #f 92 11 92 24 ("cdr" "borders")}
        {Lisp-Entry "get-borders" #f 96 18 96 29 ("get-columns-borders" "element" "col")}
        {Lisp-Entry "column-width" #f 100 18 100 30 ("-" "get-borders" "right" "left" "bind" "col")}
        {Lisp-Entry "get-columns" #f 110 11 110 22 ("client" "get-columns")}
        {Lisp-Entry "get-columns-count" #f 114 11 114 28 ("client" "get-columns-count")}
        {Lisp-Entry "get-columns-borders" #f 118 11 118 30 ("client" "get-columns-borders")}
        {Lisp-Entry "invalidate-columns" #f 122 11 122 29 ("client" "invalidate-columns")}
        {Lisp-Entry "invalidate-borders" #f 126 11 126 29 ("client" "invalidate-borders")}
        {Lisp-Entry "layout-column" #f 130 11 130 24 ("client" "layout-column" "column")}
        {Lisp-Entry "end-resizing" #f 134 11 134 23 ("invalidate-view" "layout-scrollee" "client" "when")}
        {Lisp-Entry "size-change" #f 145 11 145 22 ("layout-scrollee" "client" "when" "nextmethod" "size")}
        {Lisp-Entry "set-scroller" #f 156 11 156 23 ("client" "set-scroller" "view")}
        {Lisp-Entry "get-scroll-client" #f 160 11 160 28 ("client" "get-scroll-client")}
        {Lisp-Entry "get-hscroll-amount" #f 164 11 164 29 ("0" "get-position" "get-h" "client" "essay" "either")}
        {Lisp-Entry "on-vscroll" #f 169 11 169 21 ("on-vscroll" "client" "when" "orientation" "thumb-pos" "code")}
        {Lisp-Entry "on-hscroll" #f 175 11 175 21 ("on-hscroll" "client" "when" "orientation" "thumb-pos" "code")}
        {Lisp-Entry "draw" #f 185 11 185 15 ("get-columns" "+" "increase!" "draw-header" "descending" "'descending" "ascending" "'ascending" "=" "and" "if" "sorted" "get-width" "width" "column" "function" "for-each" "rank" "flat-look?" "flat?" "0" "/=" "spaced?" "get-sort-ascending?" "sort-ascending?" "get-sorted-column" "sorted-column" "get-column-spacing" "cs" "get-hscroll-amount" "h" "let*" "client" "Dark" "name:" "Color" "fill-rect" "get-top" "<" "when" "get-header-height" "height" "get-logical-clipper" "clipper" "let" "lv" "lh" "context" "surface")}
        {Lisp-Entry "cursor-update" #f 212 11 212 24 (":arrow" ":west-east" "set-cursor" "get-hscroll-amount" "get-h" "-" "resized-col" "resizing?" "or" "if" "pos")}
        {Lisp-Entry "get-tooltip-context" #f 223 11 223 30 ("bounds:" "text:" "self" "view:" "Tooltip-Context" "new" "0" "header-rect" "offset-rect" "rect" "get-header-tooltip" "text" "get-column" "column" "let" "h->col" "col" "get-h" "-" "h" "get-hscroll-amount" "hscrolled" "let*" "when" "client")}
        {Lisp-Entry "mouse-down" #f 244 11 244 21 ("resized-column-ref" "resized-column" "resize-last-h" "resizing?" "set!" "header-coordinates" "header-down" "get-column" "column" "h->col" "not" "if" "resized-col" "col" "get-v" "v" "get-hscroll-amount" "get-h" "-" "h" "let" "acquire-capture" "when" "client")}
        {Lisp-Entry "drag-move" #f 261 11 261 20 ("update-view" "get-height" "2" "Rect" "new" "scroll-view" "layout-column" "invalidate-borders" "invalidate-columns" "set-width" ">=" "resized-column" "get-width" "new-width" "set!" "0" "/=" "resized-column-ref" "get-borders" "borders-right" "+" "left" "resize-last-h" "delta" "header-coordinates" "header-move" "get-column" "column" "h->col" "col" "resizing?" "not" "if" "get-v" "v" "get-hscroll-amount" "get-h" "-" "h" "let" "when" "client")}
        {Lisp-Entry "drag-up" #f 284 11 284 18 ("release-capture" "end-resizing" "get-client" "set-filled-column" "resized-column" "set!" "header-coordinates" "header-up" "get-column" "column" "h->col" "col" "resizing?" "not" "if" "get-v" "v" "get-hscroll-amount" "get-h" "-" "h" "let" "when" "rest" "client")}
        {Lisp-Entry "double-click" #f 300 11 300 23 ("header-coordinates" "header-double-click" "get-column" "column" "h->col" "col" "get-v" "v" "get-hscroll-amount" "get-h" "-" "h" "let" "when" "client")}
        {Lisp-Entry "header-coordinates" #f 310 11 310 29 ("header-position" "point-" "pos" "col")}
        {Lisp-Entry "resized-col" #f 314 11 314 22 ("continuation-return" "4" "near?" "when" "right" "left" "bind" "get-columns-count" "below" "0" "from" "col" "get-columns-borders" "in" "borders" "for" "loop" "return" "function" "continuation-capture" "h")}
        {Lisp-Entry "invalidate-column-header" #f 330 18 330 42 ("invalidate-rect" "header-rect" "rect" "let" "get-finished?" "when" "column")}
        {Lisp-Entry "header-rect" #f 336 18 336 29 ("get-height" "0" "Rect" "new" "column-rank" "get-borders" "right" "left" "bind" "column")}
        {Lisp-Entry "header-position" #f 346 11 346 26 ("0" "get-borders" "borders-left" "Point" "new" "col")}
        {Lisp-Entry "h->col" #f 350 11 350 17 ("continuation-return" "<=" ">=" "and" "when" "right" "left" "bind" "get-columns-count" "below" "0" "from" "n" "get-columns-borders" "in" "borders" "for" "loop" "return" "function" "continuation-capture" "h")}
        {Lisp-Entry "get-class-image" #f 366 16 366 31 ("Bitmap-Resource")}}}})
"Tree-Highlight"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Highlight.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Highlight" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Tree-Highlight" #f 45 7 45 21 ("Object")
        {Lisp-Entry "row" #f 48 8 48 11 ("generate")}
        {Lisp-Entry "col" #f 49 8 49 11 ("generate")}
        {Lisp-Entry "insert" #f 50 8 50 14 ("generate")}
        {Lisp-Entry "outer-color" #f 51 8 51 19 ("generate")}
        {Lisp-Entry "inner-color" #f 52 8 52 19 ("generate")}
        {Lisp-Entry "initialize" #f 55 11 55 21 ("inner-color~self" "outer-color~self" "insert~self" "col~self" "row~self" "set!" "nextmethod" "inner-color" "inner-color:" "outer-color" "outer-color:" "insert" "insert:" "col" "row")}
        {Lisp-Entry "compare-object" #f 64 11 64 25 (":not-equal" "else" ":equal" "get-insert" "insert" "get-col" "col" "=" "get-row" "row" "eq?" "and" ":incompatible" "Tree-Highlight" "is-not?" "cond" "target")}}}})
"Tree-Image"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Image.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Image" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Tree-Image" #f 45 7 45 17 ("Tree-Label")
        {Lisp-Entry "image" #f 48 18 48 23 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("image~self" "set!" "nextmethod" "apply" "others" "image" "bind-keywords" "rest")}
        {Lisp-Entry "print" #f 57 11 57 16 ("image" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-image" #f 68 18 68 27 ("image")}
        {Lisp-Entry "set-image" #f 72 18 72 27 ("image" "set!" "value")}
        {Lisp-Entry "get-sort-value" #f 81 11 81 25 ("image")}}}})
"Tree-Image-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Image-Column.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Image-Column" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Tree-Image-Column" #f 45 7 45 24 ("Tree-Label-Column")
        {Lisp-Entry "draw-cell" #f 53 11 53 20 ("draw-title" "draw-image" "1" "2" "16" "-" "quotient" "+" "0" "if" "h" "get-title" "title" "get-icons-cache" "icons" "get-application" "appl" "let*" "when" "get-image" "image" "let" "draw-background" "height" "width" "cell" "row" "context" "surface")}
        {Lisp-Entry "title-h" #f 66 11 66 18 ("18" "title" "width" "surface")}
        {Lisp-Entry "sort-value" #f 75 11 75 21 ("get-name" "not" "if" "get-image" "image" "let" "get-title" "either" "cell" "row")}}}})
"Tree-Label"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Label.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Label" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Tree-Label" #f 45 7 45 17 ("Tree-Cell")
        {Lisp-Entry "title" #f 48 18 48 23 ()}
        {Lisp-Entry "font" #f 49 18 49 22 ()}
        {Lisp-Entry "color" #f 50 18 50 23 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("color~self" "font~self" "set!" "set-title" "nextmethod" "apply" "others" "color" "font" "title" "bind-keywords" "rest")}
        {Lisp-Entry "print" #f 61 11 61 16 ("title" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-title" #f 72 18 72 27 ("title")}
        {Lisp-Entry "set-title" #f 76 18 76 27 ("->string" "Locales" "is?" "if" "essay" "title" "set!" "value")}
        {Lisp-Entry "get-font" #f 80 18 80 26 ("font")}
        {Lisp-Entry "set-font" #f 84 18 84 26 ("font" "set!" "value")}
        {Lisp-Entry "get-color" #f 88 18 88 27 ("color")}
        {Lisp-Entry "set-color" #f 92 18 92 27 ("color" "set!" "c")}
        {Lisp-Entry "get-sort-value" #f 101 11 101 25 ("title")}}}})
"Tree-Label-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Label-Column.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Label-Column" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Tree-Label-Column" #f 46 7 46 24 ("Tree-Column")
        {Lisp-Entry "padding" #f 49 22 49 29 ("set-padding" "get-padding" "0")}
        {Lisp-Entry "new-empty-cell" #f 57 11 57 25 ("title:" "Tree-Label" "new")}
        {Lisp-Entry "get-padding" #f 66 18 66 29 ("padding")}
        {Lisp-Entry "set-padding" #f 70 18 70 29 ("parent" "invalidate-view" "padding" "set!" "value")}
        {Lisp-Entry "get-cell-tooltip" #f 80 11 80 27 ("get-title" "Tree-Label" "is?" "when" "cell")}
        {Lisp-Entry "Default-Color" #f 90 14 90 27 ("Black" "name:" "Color")}
        {Lisp-Entry "draw-at" #f 94 11 94 18 ("draw-title" "nextmethod" "height" "width" "v" "h" "cell" "row" "context" "surface")}
        {Lisp-Entry "draw-title" #f 99 29 99 39 ("title-vertical-offset" "0" "else" "-1" "-" "tail" "padding" "1" "head" "justification" "case" "title-h" "+" "draw-text" "set-font" "when" "cell-color" "set-text-color" "get-color" "color" "get-font" "font" "get-title" "either" "localize" "title" "let" "height" "width" "v" "h" "cell" "row" "context" "surface")}
        {Lisp-Entry "title-h" #f 109 29 109 36 ("justification" "justify-title" "title" "width" "surface")}
        {Lisp-Entry "cell-color" #f 113 21 113 31 ("Default-Color" "parent" "selected-text-color" "if" "determine-color" "when" "either" "cell-selected?" "selected?:" "getf" "and" "selected?" "enabled?" "let" "context" "color")}
        {Lisp-Entry "text-h" #f 121 11 121 17 ("1" "level")}}}})
"Tree-Node"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Node.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Node" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Tree-Node" #f 45 7 45 16 ("Tree-Label")
        {Lisp-Entry "image" #f 48 18 48 23 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("image~self" "set!" "break" "title:" "getf" "not" "when" "nextmethod" "apply" "others" "image" "bind-keywords" "rest")}
        {Lisp-Entry "get-image" #f 65 18 65 27 ("image")}
        {Lisp-Entry "set-image" #f 69 18 69 27 ("image" "set!" "img")}}}})
"Tree-Node-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Node-Column.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Node-Column" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Tree-Node-Column" #f 47 7 47 23 ("Tree-Label-Column")
        {Lisp-Entry "controls?" #f 50 22 50 31 ("set-controls?" "get-controls?")}
        {Lisp-Entry "toplevel-controls?" #f 51 22 51 40 ("set-toplevel-controls?" "get-toplevel-controls?")}
        {Lisp-Entry "display-images?" #f 52 22 52 37 ("set-display-images?" "get-display-images?")}
        {Lisp-Entry "image-offset" #f 55 8 55 20 ("1")}
        {Lisp-Entry "get-controls?" #f 63 18 63 31 ("controls?")}
        {Lisp-Entry "set-controls?" #f 67 18 67 31 ("parent" "invalidate-view" "controls?" "set!" "flag")}
        {Lisp-Entry "get-toplevel-controls?" #f 72 18 72 40 ("toplevel-controls?")}
        {Lisp-Entry "set-toplevel-controls?" #f 76 18 76 40 ("parent" "invalidate-view" "toplevel-controls?" "set!" "flag")}
        {Lisp-Entry "get-display-images?" #f 81 18 81 37 ("display-images?")}
        {Lisp-Entry "set-display-images?" #f 85 18 85 37 ("parent" "invalidate-view" "display-images?" "set!" "flag")}
        {Lisp-Entry "set-image-offset" #f 90 18 90 34 ("parent" "invalidate-view" "image-offset" "set!" "offset")}
        {Lisp-Entry "new-empty-cell" #f 100 11 100 25 ("title:" "Tree-Node" "new")}
        {Lisp-Entry "complete-mouse-down" #f 109 11 109 30 ("process-selection" "content" "expand/collapse" "control" "find-part" "case" "parent" "get-row" "row" "let" "control?" "shift?" "pos" "cell")}
        {Lisp-Entry "double-click" #f 116 11 116 23 ("get-row" "parent" "expand/collapse" "pos" "cell")}
        {Lisp-Entry "find-part" #f 125 11 125 20 ("content" "'content" "control" "'control" "13" "<" "4" "+" ">=" "toplevel-controls?" "controls?" "and" "if" "parent" "get-row" "get-level" "level-h" "base" "get-v" "v" "get-h" "h" "let" "pos" "cell")}
        {Lisp-Entry "row-text-left" #f 139 21 139 34 ("1" "get-level" "text-h" "-" "row")}
        {Lisp-Entry "text-rect" #f 143 21 143 30 ("4" "+" "0" "Rect" "new" "get-columns-count" "<=" "or" "if" "min" "get-width" "title-width" "text-extent" "extent" "let" "parent" "get-font" "either" "font" "2" "max" "1" "get-level" "text-h" "-" "h" "get-title" "localize" "title" "let*" "force-node?" "height" "width" "cell" "row")}
        {Lisp-Entry "control-rect" #f 159 21 159 33 ("13" "4" "+" "Rect" "new" "get-level" "control-h" "h" "let" "top" "row")}
        {Lisp-Entry "plus/minus-rect" #f 164 21 164 36 ("12" "5" "+" "Rect" "new" "get-level" "control-h" "h" "let" "top" "row")}
        {Lisp-Entry "image-rect" #f 169 21 169 31 ("16" "0" "+" "Rect" "new" "get-level" "image-h" "h" "let" "top" "row")}
        {Lisp-Entry "layout-cell" #f 179 11 179 22 ("-" "Dimension" "set-size" "+" "Point" "new" "set-position" "get-level" "image-h" "offset" "let" "View" "is?" "when" "height" "width" "v" "h" "cell" "row")}
        {Lisp-Entry "Line-Color" #f 191 14 191 24 ("Dark" "name:" "Color")}
        {Lisp-Entry "Alternate-Pen" #f 194 14 194 27 ("Line-Color" "color:" "alternate" "'alternate" "style:" "Pen" "new")}
        {Lisp-Entry "draw-cell" #f 198 11 198 20 ("0" "draw-title" "draw-image" "draw-control" "draw-level" "draw-background" "height" "width" "cell" "row" "context" "surface")}
        {Lisp-Entry "draw-background" #f 206 11 206 26 ("frame-rect" "get-frame-color" "frame-color" "gradient-fill" "" "apply" "pair?" "selection-color" "get-left" "r" "when" "get-background" "background" "text-rect" "cell-selected?" "and" "selected?:" "getf" "selected?" "White" "name:" "Color" "parent" "get-cell-background" "either" "cycle-debug-color!" "*debug-paint*" "if" "fill-rect" "0" "Rect" "new" "rect" "let" "height" "width" "cell" "row" "context" "surface")}
        {Lisp-Entry "draw-level" #f 229 18 229 28 ("Black" "name:" "Pen" "get-father" "set!" "19" "horz-adjusted" "odd?" "and" "half-adjusted" "-1" "top-adjusted" "2" "fxround/" "half" "let*" "8" "+" "line" "0" "even?" "adjust" "when" "/=" "if" "visible-sibling-follows?" "sf?" "level-h" "h" "1" "downto" "from" "n" "for" "loop" "get-position" "get-v" "row-v" "get-level" "level" "let" "Alternate-Pen" "set-pen" "height" "width" "cell" "row" "surface")}
        {Lisp-Entry "draw-control" #f 250 21 250 33 ("expanded" "'expanded" "get-state" "neq?" "11" "8" "6" "line" "Black" "Pen" "set-pen" "White" "name:" "Color" "fill-rect" "12" "5" "parent" "get-background" "background" "Line-Color" "frame-rect" "13" "4" "+" "Rect" "new" "rect" "control-h" "h" "let" "toplevel-controls?" "not" "or" "controls?" "expandable?" "and" "when" "0" "=" "toplevel?" "get-level" "level" "let*" "height" "width" "cell" "row" "surface")}
        {Lisp-Entry "draw-image" #f 267 11 267 21 ("0" "parent" "get-portfolio" "draw-image" "display-images?" "and" "when" "get-image" "image" "get-level" "image-h" "h" "let" "height" "width" "cell" "row" "context" "surface")}
        {Lisp-Entry "draw-title" #f 274 11 274 21 ("title-vertical-offset" "draw-text" "set-font" "when" "get-color" "cell-color" "set-text-color" "get-font" "font" "get-level" "text-h" "get-title" "either" "localize" "title" "let" "height" "width" "v" "h" "cell" "row" "context" "surface")}
        {Lisp-Entry "level-h" #f 284 11 284 18 ("16" "toplevel-controls?" "0" "=" "or" "if" "parent" "get-indentation" "*" "-" "level")}
        {Lisp-Entry "control-h" #f 289 11 289 20 ("level-h" "level")}
        {Lisp-Entry "image-h" #f 293 18 293 25 ("image-offset" "display-images?" "16" "toplevel-controls?" "0" "/=" "or" "if" "control-h" "+" "level")}
        {Lisp-Entry "content-h" #f 297 11 297 20 ("0" "14" "display-images?" "if" "image-h" "+" "level")}
        {Lisp-Entry "text-h" #f 301 11 301 17 ("4" "3" "0" "16" "display-images?" "if" "image-h" "+" "level")}
        {Lisp-Entry "get-debugged" #f 310 11 310 23 ("find-part" "values" "pos" "cell")}}}})
"Tree-Path"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Path.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Path" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Tree-Path" #f 45 7 45 16 ("Tree-Label")
        {Lisp-Entry "father-row" #f 48 18 48 28 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("update-path-title" "father-row~self" "set!" "nextmethod" "apply" "rest" "father-row")}
        {Lisp-Entry "get-father-row" #f 62 18 62 32 ("father-row")}
        {Lisp-Entry "update-path-title" #f 71 18 71 35 ("list" "join" "if" "set-title" "father-path" "get-title" "father-title" "get-path-child" "path-cell" "get-node-child" "title-cell" "let*" "0" "get-level" ">" "father-row" "when")}}}})
"Tree-Path-Column"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Path-Column.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Path-Column" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Tree-Path-Column" #f 45 7 45 23 ("Tree-Label-Column")}}})
"Tree-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "Tree-Preferences.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.Tree-Preferences" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Tree-Preferences" #f 47 7 47 23 ("Bitmap-Resource" "icon:" "title:" "Preferences")
        {Lisp-Entry "sort-case-sensitive?" #f 50 12 50 32 ("generate")}
        {Lisp-Entry "can-rename-component?" #f 62 11 62 32 ()}
        {Lisp-Entry "can-delete-component?" #f 66 11 66 32 ()}
        {Lisp-Entry "can-move-component?" #f 70 11 70 30 ()}
        {Lisp-Entry "can-copy-component?" #f 74 11 74 30 ()}
        {Lisp-Entry "get-categorized-properties" #f 78 11 78 37 ("sort-case-sensitive?")}
        {Lisp-Entry "property-presentation" #f 82 16 82 37 ("nextmethod" "else" "sort-case-sensitive?" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 88 11 88 27 ("nextmethod" "else" "Boolean-Row" "new" "sort-case-sensitive?" "field-name" "case" "property")}}}})
"Tree-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-Row.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-Row" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "Tree-Row" #f 46 7 46 15 ("Outline-Row")
        {Lisp-Entry "user-data" #f 49 22 49 31 ("set-user-data" "get-user-data")}
        {Lisp-Entry "node-width" #f 52 18 52 28 ("generate")}
        {Lisp-Entry "default-size" #f 55 11 55 23 ("17" "100" "Dimension")}
        {Lisp-Entry "initialize" #f 64 11 64 21 ("set-visible-flag" "set-finished?" "set-installed?" "user-data~self" "set-children" "row-height~self" "state~self" "level~self" "father~self" "parent~self" "set!" "nextmethod" "user-data" "user-data:" "visible?" "visible?:" "children" "children:" "row-height" "row-height:" "collapsed" "'collapsed" "state" "state:" "level" "level:" "father" "father:" "parent" "parent:")}
        {Lisp-Entry "get-tree" #f 83 18 83 26 ("parent")}
        {Lisp-Entry "get-user-data" #f 87 18 87 31 ("user-data")}
        {Lisp-Entry "set-user-data" #f 91 18 91 31 ("user-data" "set!" "data")}
        {Lisp-Entry "set-children" #f 100 11 100 23 ("add-child" "self" "set-parent" "View" "if" "child" "function" "for-each" "get-title" "localize" "parent" "get-font" "text-width" "node-width" "set!" "Tree-Node" "is?" "car" "node" "let" "not-null?" "when" "list")}
        {Lisp-Entry "replace-child" #f 112 11 112 24 ("parent" "layout-scrollee" "insert!" "self" "begin" "remove!" "set!" "set-parent" "View" "is?" "if" "children" "element" "current" "let" "child" "rank")}
        {Lisp-Entry "get-node-child" #f 125 18 125 32 ("children" "Tree-Node" "is?" "child" "function" "find-if")}
        {Lisp-Entry "get-path-child" #f 131 18 131 32 ("children" "Tree-Path" "is?" "child" "function" "find-if")}
        {Lisp-Entry "flatten" #f 142 18 142 25 ("sons" "flatten" "disconnect" "flatten-row?" "if" "son" "function" "for-each" "get-tree" "tree" "let" "root-row")}
        {Lisp-Entry "disconnect" #f 151 18 151 28 ("0" "set-descendants-level" "position:" "change-father" "get-spine" "first" "son-rank" "position" "get-tree" "get-root-row" "root-row" "get-father-row" "essay" "father-row" "get-path-child" "path" "let*")}
        {Lisp-Entry "reconnect" #f 160 18 160 27 ("change-father" "get-level" "1" "+" "set-descendants-level" "get-father-row" "father-row" "let")}
        {Lisp-Entry "disconnected?" #f 166 26 166 39 ("father" "/=" "essay" "get-father-row" "father-row" "let")}
        {Lisp-Entry "get-father-row" #f 171 26 171 40 ("get-father-row" "essay" "get-path-child" "path" "let")}
        {Lisp-Entry "auto-collapsable?" #f 181 26 181 43 ("collapsable?")}
        {Lisp-Entry "layout" #f 190 18 190 24 ("get-columns" "+" "increase!" "self" "layout-cell" "get-width" "width" "cell" "column" "function" "for-each" "get-effective-height" "height" "get-column-spacing" "cs" "0" "h" "children" "and" "when" "get-tree" "tree" "let")}
        {Lisp-Entry "get-effective-width" #f 204 11 204 30 ("node-width")}
        {Lisp-Entry "context-menu" #f 213 26 213 38 ("pos")}
        {Lisp-Entry "double-click" #f 217 26 217 38 ("pos")}
        {Lisp-Entry "draw-children" #f 226 11 226 24 ("children" "get-columns" "increase!" "get-v" "get-h" "paint-drawing" "get-position" "pos" "draw-control" "draw-level" "Tree-Node-Column" "get-preserved-data" "get-draw-preserved?" "Tree-Cell-View" "is?" "and" "self" "+" "paint-cell" "View" "is-not?" "if" "get-width" "width" "let" "get-visible?" "when" "cell" "column" "function" "for-each" "get-height" "height" "get-column-spacing" "cs" "get-tree" "tree" "v" "0" "h" "let*" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-selection" #f 249 11 249 25 ("surface")}
        {Lisp-Entry "find-by-title" #f 258 18 258 31 ("sons" "first-child" "get-title" "string=?" "row" "function" "find-if" "title")}
        {Lisp-Entry "auto-inplace?" #f 269 26 269 39 ()}
        {Lisp-Entry "auto-expand" #f 273 26 273 37 ("self" "parent" "expand/collapse" "expandable?" "when")}
        {Lisp-Entry "auto-select" #f 278 26 278 37 ()}
        {Lisp-Entry "auto-collapse" #f 282 26 282 39 ("self" "parent" "collapse" "collapsable?" "when")}}}})
"Tree-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "tree" "Tree-View.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.tree.Tree-View" #f 38 9 38 31 ("jazz")
      {Lisp-Entry "Tree-View" #f 65 7 65 16 ("White" "name:" "Color" "background:" "Selection-Provider" "Outline-View")
        {Lisp-Entry "delayed-autorow" #f 68 14 68 29 ()}
        {Lisp-Entry "portfolio" #f 72 22 72 31 ("set-portfolio" "get-portfolio")}
        {Lisp-Entry "show-header?" #f 73 22 73 34 ("set-show-header?" "get-show-header?")}
        {Lisp-Entry "selection-mode" #f 75 22 75 36 ("set-selection-mode" "get-selection-mode" "row" "'row")}
        {Lisp-Entry "multiple-selection?" #f 76 22 76 41 ("set-multiple-selection?" "get-multiple-selection?")}
        {Lisp-Entry "can-select-empty?" #f 77 22 77 39 ("set-can-select-empty?" "get-can-select-empty?")}
        {Lisp-Entry "show-unfocused-selection?" #f 78 22 78 47 ("set-show-unfocused-selection?" "get-show-unfocused-selection?")}
        {Lisp-Entry "auto-expand/collapse?" #f 79 22 79 43 ("set-auto-expand/collapse?" "get-auto-expand/collapse?")}
        {Lisp-Entry "cell-background" #f 80 22 80 37 ("set-cell-background" "get-cell-background")}
        {Lisp-Entry "empty-background" #f 81 22 81 38 ("set-empty-background" "get-empty-background")}
        {Lisp-Entry "filled-column" #f 82 22 82 35 ("set-filled-column" "get-filled-column")}
        {Lisp-Entry "column-spacing" #f 83 22 83 36 ("set-column-spacing" "get-column-spacing" "0")}
        {Lisp-Entry "reorderable?" #f 84 22 84 34 ("set-reorderable?" "get-reorderable?")}
        {Lisp-Entry "content" #f 85 22 85 29 ("set-content" "get-content")}
        {Lisp-Entry "columns" #f 88 18 88 25 ()}
        {Lisp-Entry "node-column" #f 89 18 89 29 ()}
        {Lisp-Entry "sorted-column" #f 90 18 90 31 ("generate")}
        {Lisp-Entry "sort-ascending?" #f 91 18 91 33 ("generate")}
        {Lisp-Entry "selection-pivot" #f 92 18 92 33 ()}
        {Lisp-Entry "highlighted" #f 93 18 93 29 ()}
        {Lisp-Entry "indentation" #f 94 18 94 29 ("16")}
        {Lisp-Entry "columns-borders" #f 95 18 95 33 ("generate")}
        {Lisp-Entry "columns-right" #f 96 18 96 31 ("generate" "0")}
        {Lisp-Entry "has-focus?" #f 97 18 97 28 ()}
        {Lisp-Entry "edited-cell" #f 98 18 98 29 ()}
        {Lisp-Entry "cell-editor" #f 99 18 99 29 ()}
        {Lisp-Entry "close-cell-editor?" #f 100 18 100 36 ()}
        {Lisp-Entry "auto-expanded-row" #f 101 18 101 35 ()}
        {Lisp-Entry "locator" #f 102 18 102 25 ("self" "Tree-Locator" "new")}
        {Lisp-Entry "selection-manager" #f 103 18 103 35 ("self" "Selection-Manager" "new")}
        {Lisp-Entry "finish" #f 115 11 115 17 ("invalidate-columns" "nextmethod" "rest")}
        {Lisp-Entry "destroy-component" #f 120 11 120 28 ("nextmethod" "end-edition")}
        {Lisp-Entry "add-child" #f 130 11 130 20 ("list" "append!" "columns" "set!" "Tree-Column" "is?" "when" "nextmethod" "child")}
        {Lisp-Entry "remove-child" #f 136 11 136 23 ("remove!" "columns" "set!" "Tree-Column" "is?" "when" "nextmethod" "child")}
        {Lisp-Entry "get-columns" #f 147 18 147 29 ("columns")}
        {Lisp-Entry "get-portfolio" #f 151 18 151 31 ("child" "set!" "Portfolio" "is?" "if" "portfolio" "when")}
        {Lisp-Entry "set-portfolio" #f 159 18 159 31 ("invalidate-view" "portfolio" "set!" "object")}
        {Lisp-Entry "get-show-header?" #f 164 18 164 34 ("show-header?")}
        {Lisp-Entry "set-show-header?" #f 168 18 168 34 ("show-header?" "set!" "value")}
        {Lisp-Entry "get-multiple-selection?" #f 172 18 172 41 ("multiple-selection?")}
        {Lisp-Entry "set-multiple-selection?" #f 176 18 176 41 ("invalidate-view" "multiple-selection?" "set!" "flag")}
        {Lisp-Entry "get-can-select-empty?" #f 181 18 181 39 ("can-select-empty?")}
        {Lisp-Entry "set-can-select-empty?" #f 185 18 185 39 ("invalidate-view" "can-select-empty?" "set!" "flag")}
        {Lisp-Entry "get-show-unfocused-selection?" #f 190 18 190 47 ("show-unfocused-selection?")}
        {Lisp-Entry "set-show-unfocused-selection?" #f 194 18 194 47 ("invalidate-view" "show-unfocused-selection?" "set!" "flag")}
        {Lisp-Entry "get-selection-mode" #f 199 18 199 36 ("selection-mode")}
        {Lisp-Entry "set-selection-mode" #f 203 18 203 36 ("invalidate-view" "selection-mode" "set!" "value")}
        {Lisp-Entry "get-auto-expand/collapse?" #f 208 18 208 43 ("auto-expand/collapse?")}
        {Lisp-Entry "set-auto-expand/collapse?" #f 212 18 212 43 ("auto-expand/collapse?" "set!" "flag")}
        {Lisp-Entry "get-filled-column" #f 216 18 216 35 ("filled-column")}
        {Lisp-Entry "set-filled-column" #f 220 18 220 35 ("filled-column" "set!" "value")}
        {Lisp-Entry "get-cell-background" #f 224 18 224 37 ("cell-background")}
        {Lisp-Entry "set-cell-background" #f 228 18 228 37 ("invalidate-view" "cell-background" "set!" "color")}
        {Lisp-Entry "get-empty-background" #f 233 18 233 38 ("empty-background")}
        {Lisp-Entry "set-empty-background" #f 237 18 237 38 ("invalidate-view" "empty-background" "set!" "color")}
        {Lisp-Entry "get-column-spacing" #f 242 18 242 36 ("column-spacing")}
        {Lisp-Entry "set-column-spacing" #f 246 18 246 36 ("invalidate-view" "column-spacing" "set!" "spacing")}
        {Lisp-Entry "get-reorderable?" #f 251 18 251 34 ("reorderable?")}
        {Lisp-Entry "set-reorderable?" #f 255 18 255 34 ("reorderable?" "set!" "flag")}
        {Lisp-Entry "get-indentation" #f 259 18 259 33 ("indentation")}
        {Lisp-Entry "get-cell-editor" #f 263 18 263 33 ("cell-editor")}
        {Lisp-Entry "focus-gain" #f 272 11 272 21 ("selection" "invalidate-selection" "has-focus?" "set!" "nextmethod" "old")}
        {Lisp-Entry "focus-lose" #f 278 11 278 21 ("selection" "invalidate-selection" "has-focus?" "set!" "nextmethod" "view")}
        {Lisp-Entry "selection-color" #f 284 18 284 33 ("unfocused-color" "focused-color" "focused?" "if")}
        {Lisp-Entry "focused-color" #f 290 29 290 42 ("Focused-Selection" "name:" "Color")}
        {Lisp-Entry "unfocused-color" #f 294 29 294 44 ("Unfocused-Selection" "name:" "Color")}
        {Lisp-Entry "selected-text-color" #f 298 18 298 37 ("Unfocused-Selected-Text" "Focused-Selected-Text" "name:" "Color" "focused?" "if")}
        {Lisp-Entry "focused?" #f 304 26 304 34 ("self" "has-parent?" "and" "get-focus" "focus" "let" "has-focus?" "or")}
        {Lisp-Entry "focus-and-select" #f 310 18 310 34 ("set-single-selection" "0" "get-visible-count" ">" "when" "acquire-focus")}
        {Lisp-Entry "focus-actions" #f 321 11 321 24 ("nextmethod" "tree" "'tree" "find-actions" "cons")}
        {Lisp-Entry "on-expand" #f 331 11 331 20 ("expand" "bell" "not" "if" "get-selected-row" "row" "let" "evt")}
        {Lisp-Entry "on-expand-all" #f 338 11 338 24 ("expand-all" "bell" "not" "if" "get-selected-row" "row" "let" "evt")}
        {Lisp-Entry "on-collapse" #f 345 11 345 22 ("collapse" "bell" "not" "if" "get-selected-row" "row" "let" "evt")}
        {Lisp-Entry "on-properties" #f 352 29 352 42 ("evt")}
        {Lisp-Entry "get-header" #f 361 18 361 28 ("Tree-Header" "is?" "when" "parent" "get-parent" "header" "let")}
        {Lisp-Entry "invalidate-header" #f 367 18 367 35 ("invalidate-view" "when" "get-header" "header" "let")}
        {Lisp-Entry "layout-column" #f 378 21 378 34 ("row-spacing" "increase!" "set!" "columns-right" "Dimension" "new" "set-size" "+" "rb" "get-effective-height" "height" "let*" "while" "0" "rt" "root-row" "get-next" "row" "let" "column")}
        {Lisp-Entry "layout-scrollee" #f 395 11 395 26 ("get-display-size" "fill-column" "filled-column" "when" "nextmethod")}
        {Lisp-Entry "scrollee-width" #f 401 11 401 25 ("column-spacing" "visible-width" "+" "columns-right" "show-header?" "if" "get-display-width" "max")}
        {Lisp-Entry "update-visible" #f 412 11 412 25 ("update-visible-width" "update-visible-height")}
        {Lisp-Entry "update-visible-height" #f 417 11 417 32 ("visible-height" "visible-count" "row-spacing" "set!" "if" "get-effective-height" "increase!" "rank" "row" "function" "for-each-visible-row" "first?" "height" "0" "count" "let")}
        {Lisp-Entry "update-visible-width" #f 434 11 434 31 ("set-width" "cons" "list" "columns-borders" "columns-right" "visible-width" "set!" ">" "get-level" "text-h" "w" "get-node-width" "either" "+" "nw" "3" "highlight-border" "let*" "rank" "row" "function" "for-each-visible-row" "Tree-Node-Column" "node-column" "is?" "0" "width" "let" "show-header?" "not" "when")}
        {Lisp-Entry "scroll-invalidate" #f 452 11 452 28 ("invalidate-header" "nextmethod" "dv" "dh")}
        {Lisp-Entry "Highlighted-Outer-Color" #f 462 14 462 37 ("128" "blue:" "green:" "0" "red:" "Color" "new")}
        {Lisp-Entry "Highlighted-Inner-Color" #f 465 14 465 37 ("255" "blue:" "green:" "218" "red:" "Color" "new")}
        {Lisp-Entry "Highlighted-Insert-Color" #f 468 14 468 38 ("Dark-Red" "name:" "Color")}
        {Lisp-Entry "draw-outline" #f 472 11 472 23 ("draw-highlighted" "cycle-debug-color!" "*debug-paint*" "fill-rect" "0" "*" "fxround" "if" "Rect" "new" "rect" "let" "columns-right" "<=" "empty-background" "and" "when" "get-height" "height" "get-right" "right" "get-h" "get-left" "+" "left" "get-position" "pos" "let*" "nextmethod" "sc?" "sc" "sv" "sh" "lv" "lh" "clipper" "context" "surface")}
        {Lisp-Entry "draw-empty" #f 486 11 486 21 ("cycle-debug-color!" "*debug-paint*" "fill-rect" "*" "if" "fxround" "0" "Rect" "new" "rect" "let" "<=" "empty-background" "and" "when" "width" "rt" "sc?" "sc" "sv" "sh" "bottom" "top" "surface")}
        {Lisp-Entry "draw-highlighted" #f 492 11 492 27 ("highlighted" "Highlighted-Insert-Color" "fill-rect" "highlighted-insert-rect" "rect" "draw-highlighted-cell" "not" "if" "get-insert" "insert" "get-col" "col" "get-row" "row" "let" "highlight" "function" "for-each-reversed" "surface")}
        {Lisp-Entry "draw-highlighted-cell" #f 504 29 504 50 ("highlight-inner?" "when" "frame-rect" "highlighted-inner-color" "get-inner-color" "inner-color" "highlighted-outer-color" "get-outer-color" "either" "outer-color" "let" "1" "inflate-rect" "outer-rect" "highlighted-target-rect" "inner-rect" "let*" "highlight" "col" "row" "surface")}
        {Lisp-Entry "highlighted-outer-color" #f 514 29 514 52 ("Highlighted-Outer-Color")}
        {Lisp-Entry "highlighted-inner-color" #f 518 29 518 52 ("Highlighted-Inner-Color")}
        {Lisp-Entry "highlight-inner?" #f 522 29 522 45 ()}
        {Lisp-Entry "header-color" #f 526 26 526 38 ("Medium" "name:" "Color")}
        {Lisp-Entry "get-highlighted" #f 535 18 535 33 ("highlighted")}
        {Lisp-Entry "set-highlighted" #f 539 18 539 33 ("invalidate-highlighted" "set!" "old" "let" "highlighted" "equal?" "not" "when" "Tree-Highlight" "is?" "object" "function" "every?" "assert" "value")}
        {Lisp-Entry "invalidate-highlighted" #f 548 11 548 33 ("highlighted-insert-rect" "invalidate-rect" "invalidate-highlighted-cell" "not" "if" "get-insert" "insert" "get-col" "col" "get-row" "row" "let" "highlight" "function" "for-each" "highlighted")}
        {Lisp-Entry "invalidate-highlighted-cell" #f 559 29 559 56 ("invalidate-region" "2" "Rect" "insets:" "frame-region" "region" "1" "inflate-rect" "outer" "highlighted-target-rect" "inner" "with-closed" "col" "row")}
        {Lisp-Entry "highlighted-target-rect" #f 566 11 566 34 ("cell-rect" "0" "row-rank" "Cell" "new" "cell-text-rect" "not" "if" "col" "row")}
        {Lisp-Entry "highlighted-insert-rect" #f 572 11 572 34 ("get-bottom" "get-top" "case" "get-right" "get-left" "Rect" "bottom" "+" "top" "v" "function" "proc" "else" "-2" "cond" "offset" "2" "row-spacing" "fxround/" "half-spacing" "after" "'after" "1" "visible-count" "-" "after-last?" "before" "'before" "eq?" "=" "and" "before-first?" "0" "Cell" "new" "cell-content-rect" "row-rect" "rect" "row-rank" "rank" "get-height" "height" "let*" "insert" "row")}
        {Lisp-Entry "update-visible-width-incremental" #f 598 11 598 43 ("set!" "visible-width" ">" "when" "node-column" "text-h" "+" "let" "width" "level")}
        {Lisp-Entry "remove-row" #f 605 11 605 21 ("nextmethod" "close-auto-expanded-row" "auto-expanded-row" "eq?" "attached?" "and" "when" "row")}
        {Lisp-Entry "remove-every-row" #f 611 11 611 27 ("nextmethod" "highlighted" "set!" "set-sorted" "close-auto-expanded-row")}
        {Lisp-Entry "allow-start-drag?" #f 623 11 623 28 ("selection-manager" "allow-start-drag?" "nextmethod" "and" "pos")}
        {Lisp-Entry "mouse-down" #f 628 11 628 21 ("column" "set-selection" "can-select-empty?" "when" "not" "if" "control?" "shift?" "let" "acquire-capture" "acquire-focus" "get-multiple-selection?" "alt-down?" "control-down?" "shift-down?" "selection-manager" "mouse-down" "get-col" "get-column" "find-part" "part" "cell-coordinates" "essay" "pos" "view->tree" "cell" "let*" "view")}
        {Lisp-Entry "drag-move" #f 646 11 646 20 ("drag-move" "get-col" "get-column" "column" "cell-coordinates" "pos" "when" "view->tree" "cell" "let" "view")}
        {Lisp-Entry "drag-up" #f 654 11 654 18 ("reset" "self" "process-action" "release-capture" "drag-up" "focus-delegate" "auto-select" "auto-expand/collapse?" "complete-mouse-down" "mouse-down-part-control?" "get-col" "get-column" "column" "get-row" "row" "cell-coordinates" "pos" "not" "and" "when" "set-selection" "or" "control?" "shift?" "get-mouse-down-view" "unless" "either" "view->tree" "cell" "let" "alt-down?" "control-down?" "shift-down?" "selection-manager" "mouse-up" "dragging?" "view")}
        {Lisp-Entry "call-double-click" #f 678 11 678 28 ("double-click" "else" "nextmethod" "content" "mouse-down" "control" "case" "find-part" "part" "get-col" "get-column" "column" "cell-coordinates" "pos" "let*" "when" "view->tree" "cell" "let" "view")}
        {Lisp-Entry "double-click" #f 690 11 690 23 ("find-part" "part" "get-col" "get-column" "column" "cell-coordinates" "pos" "let*" "when" "view->tree" "cell" "let" "alt-down?" "control-down?" "shift-down?" "selection-manager" "double-click" "view")}
        {Lisp-Entry "context-menu" #f 700 11 700 23 ("self" "acquire" "context-menu" "get-row" "row" "when" "view->tree" "cell" "let" "view")}
        {Lisp-Entry "cell-coordinates" #f 707 11 707 27 ("cell-position" "-" "pos" "cell")}
        {Lisp-Entry "key-press" #f 716 11 716 20 ("locator" "enter" "0" "visible-count" ">" "alphanumeric?" "and" "when" "key")}
        {Lisp-Entry "locate-prefix" #f 726 18 726 31 ("locator" "locate" "prefix")}
        {Lisp-Entry "header-click" #f 735 26 735 38 ("ensure-displayed" "column-rank" "sort-column" "column")}
        {Lisp-Entry "set-sorted" #f 740 11 740 21 ("sort-ascending?" "set!" "get-column" "invalidate-column-header" "not" "and" "when" "sorted-column" "eqv?" "same?" "get-header" "header" "let" "ascending?" "column")}
        {Lisp-Entry "sort-column" #f 751 18 751 29 ("ensure-displayed?:" "root-row" "with-update-locked" "with-preserved-selection" "iterate" "reorder-sons" "get-sons" "sort-rows" "sorted" "let" "row" "function" "proc" "if" "direction" "letrec" "sort-predicates" "greater" "smaller" "equal" "receive" "sort-ascending?" "/=" "sorted-column" "not" "or" "set-sorted" "column")}
        {Lisp-Entry "sort-rows" #f 767 11 767 20 ("and" "or" "ny" "localize" "nx" "cy" "get-children" "cx" "let*" "ry" "rx" "sort" "get-column" "sort-value" "either" "element" "cell" "n" "children" "row" "function" "get-node" "0" "/=" "dual?" "let" "direction" "equal" "column" "rows")}
        {Lisp-Entry "get-content" #f 790 18 790 29 ("content")}
        {Lisp-Entry "set-content" #f 794 18 794 29 ("invalidate-cell" "set-title" "get-cell-data" "data" "Cell" "new" "cell" "let*" "do" "j" "info" "0" "from" "i" "in" "row" "for" "loop" "value")}
        {Lisp-Entry "with-context-click" #f 810 11 810 29 ("update-view" "auto-select" "auto-expand/collapse?" "memq?" "else" "list" "get-selection" "member?" "unless" "selection-mode" "case" "get-row" "row" "set-selection" "can-select-empty?" "when" "not" "if" "view->tree" "cell" "let" "acquire-focus" "proc" "pos")}
        {Lisp-Entry "flattened?" #f 835 18 835 28 ("get-visible?" "and" "get-path-column" "path-column" "let")}
        {Lisp-Entry "flatten/unflatten" #f 840 18 840 35 ("flatten" "unflatten" "with-update-locked" "function" "with-preserved-selection" "get-display-size" "fill-column" "set-visible?" "error" "not" "if" "flattened?" "get-path-column" "path-column" "let*")}
        {Lisp-Entry "get-path-column" #f 856 18 856 33 ("columns" "Tree-Path-Column" "is?" "column" "function" "find-if")}
        {Lisp-Entry "flatten-row?" #f 862 26 862 38 ("row")}
        {Lisp-Entry "flatten" #f 866 18 866 25 ("set-visible?" "disconnected?" "unless" "flatten" "disconnect" "flatten-row?" "if" "son" "function" "iterate" "root-row" "get-sons" "sons" "let")}
        {Lisp-Entry "unflatten" #f 879 18 879 27 ("set-visible?" "get-visible?" "unless" "reconnect" "disconnected?" "when" "son" "function" "root-row" "get-sons" "iterate")}
        {Lisp-Entry "get-tooltip?" #f 895 11 895 23 ()}
        {Lisp-Entry "get-tooltip-context" #f 899 11 899 30 ("font:" "get-tooltip-position" "position:" "bounds:" "split-lines" "text:" "self" "view:" "Tooltip-Context" "new" "-2" "2" "=" "get-level" "content-h" "h" "1" "cell-rect" "inflate-rect" "rect" "rect-width" ">" "cell-tooltips?" "or" "5" "font" "+" "0" "text-width" "get-formatted-tooltip?" "formatted?" "content-rect" "get-height" "height" "column-width" "width" "let*" "get-cell-tooltip" "localize" "text" "get-col" "get-column" "column" "get-row" "row" "when" "view->tree" "cell" "let" "nextmethod" "get-tooltip-text" "if" "pos")}
        {Lisp-Entry "cell-tooltips?" #f 924 29 924 43 ()}
        {Lisp-Entry "get-cell-tooltip" #f 928 29 928 45 ("get-cell-tooltip" "get-cell-data" "data" "get-col" "get-column" "column" "let" "cell")}
        {Lisp-Entry "get-tooltip-position" #f 934 29 934 49 ("5" "rect-height" "10" "-" "Point" "new" "rect-position" "+" "v" "h" "rect" "text")}
        {Lisp-Entry "get-column-tooltip" #f 938 29 938 47 ("column")}
        {Lisp-Entry "get-drag-drop" #f 947 11 947 24 ("nextmethod" "mouse-down-point" "view->tree" "when")}
        {Lisp-Entry "get-drag-source" #f 957 11 957 26 ("get-drag-cell-source" "get-col" "col" "get-row" "row" "view->tree" "cell" "get-drag-position" "pos" "let*")}
        {Lisp-Entry "get-drag-cell-source" #f 965 29 965 49 ("col:" "row:" "get-drag-image" "image:" "position:" "self" "view:" "Tree-Drag-Source" "new" "col" "row" "pos")}
        {Lisp-Entry "get-drag-hotspot" #f 969 11 969 27 ("Point" "new" "get-position" "get-v" "top" "get-level" "node-column" "image-h" "left" "get-row" "row" "mouse-down-point" "view->tree" "cell" "let*")}
        {Lisp-Entry "get-drag-image" #f 977 11 977 25 ("get-node-image" "get-row" "row" "view->tree" "cell" "let*" "pos")}
        {Lisp-Entry "get-node-image" #f 983 18 983 32 ("image-name:" "portfolio:" "Image" "add-masked-bitmap" "no" "masked?:" "height:" "width:" "Portfolio" "get-bitmap" "set!" "2" "19" "draw-text" "Black" "set-text-color" "font" "set-font" "draw-mask" "portfolio" "draw-image" "White" "name:" "Color" "Rect" "fill-rect" "maskdc" "keep-bitmap?:" "Dimension" "size:" "Memory-Surface" "memdc" "with-closed" "mask" "unspecified" "bitmap" "get-height" "height" "get-node-column-index" "column-width" "width" "get-title" "title" "get-image" "image" "0" "Cell" "get-cell-data" "cell" "get-row" "row" "player" "Client-Surface" "new" "cdc" "let*" "n")}
        {Lisp-Entry "current-drop" #f 1017 11 1017 23 ("get-tree-target" "get-reorder-target" "get-source" "get-view" "self" "eq?" "reorderable?" "and" "nextmethod" "get-surrogate" "if" "pos" "drag-drop")}
        {Lisp-Entry "get-reorder-target" #f 1025 11 1025 29 ("get-row-reorder-target" "get-quarter" "eqv?" "get-view" "self" "eq?" "and" "if" "row" "get-target" "current" "get-row-quarter" "quarter" "get-row" "rank" "let*" "when" "height" "v" "cell" "function" "call-with-view->tree" "pos" "drag-drop")}
        {Lisp-Entry "get-row-quarter" #f 1038 11 1038 26 ("else" "3" "-" "1" "<" "cond" "2" "middle" "4" "/" "quarter" "let" "height" "v")}
        {Lisp-Entry "get-row-reorder-target" #f 1047 29 1047 51 ("part:" "row:" "self" "view:" "Tree-Drop-Target" "new" "after" "'after" "before" "'before" "=" "part" "let" "when" "cdr" "/=" "and" "not" "or" "accept?" "+" "2" "1" "if" "current-rank" "dst-rank" "get-user-data" "dst" "contiguous-range" "src-range" "get-source" "get-view" "get-selection" "src-selection" "selection" "row-rank" "memq?" "same-row?" "let*" "quarter" "row" "drag-drop")}
        {Lisp-Entry "get-tree-target" #f 1060 29 1060 44 ("get-tree-row-target" "pos" "drag-drop")}
        {Lisp-Entry "get-tree-row-target" #f 1064 21 1064 40 ("get-row-target" "get-view" "self" "eq?" "and" "if" "get-target" "current" "get-row" "row" "let" "when" "height" "v" "cell" "function" "call-with-view->tree" "pos" "drag-drop")}
        {Lisp-Entry "get-tree-cell-target" #f 1075 18 1075 38 ("get-cell-target" "=" "eq?" "and" "if" "/=" "self" "get-view" "neq?" "or" "get-target" "current" "get-source" "source" "get-col" "col" "get-row" "row" "let" "when" "height" "v" "cell" "function" "call-with-view->tree" "pos" "drag-drop")}
        {Lisp-Entry "get-row-target" #f 1089 29 1089 43 ("row" "drag-drop")}
        {Lisp-Entry "get-cell-target" #f 1093 29 1093 44 ("col" "row" "drag-drop")}
        {Lisp-Entry "highlight-drop" #f 1097 11 1097 25 ("get-highlighted" "cons" "set-highlighted" "Highlighted-Inner-Color" "inner-color:" "Highlighted-Outer-Color" "outer-color:" "insert:" "Tree-Highlight" "new" "highlight" "'after" "after" "'before" "before" "case" "insert" "get-part" "part" "get-col" "col" "get-row" "row" "let*" "Tree-Drop-Target" "is?" "when" "get-target" "target" "let" "pos" "drag-drop")}
        {Lisp-Entry "unhighlight-drop" #f 1113 11 1113 27 ("get-highlighted" "cdr" "set-highlighted" "drag-drop")}
        {Lisp-Entry "tab-stop-enter" #f 1122 11 1122 25 ()}
        {Lisp-Entry "on-move" #f 1131 11 1131 18 ("down-arrow-action" "down" "up-arrow-action" "up" "case" "get-modifiers" "modifiers" "direction:" "get-property" "direction" "let" "self" "invoke" "arrow-press-handler" "if" "evt")}
        {Lisp-Entry "on-home" #f 1141 18 1141 25 ("home-action" "evt")}
        {Lisp-Entry "home-action" #f 1145 18 1145 29 ("else" "Cell" "new" "list" "set-selection" "get-col" "selection-pivot" "if" "col" "cell" "selection-mode" "case" "0" ">" "when" "get-visible-count" "count" "let")}
        {Lisp-Entry "on-end" #f 1156 18 1156 24 ("end-action" "evt")}
        {Lisp-Entry "end-action" #f 1160 18 1160 28 ("else" "1" "-" "Cell" "new" "list" "set-selection" "get-col" "selection-pivot" "if" "col" "cell" "selection-mode" "case" "0" ">" "when" "get-visible-count" "count" "let")}
        {Lisp-Entry "left-arrow-press" #f 1171 11 1171 27 ("left-arrow-action" "modifiers")}
        {Lisp-Entry "left-arrow-action" #f 1175 18 1175 35 ("get-father" "row-rank" "list" "set-selection" "get-level" "expand/collapse" "expanded?" "bell" "not" "if" "get-selected-row" "row" "left" "'left" "1" "-" "get-row" "Cell" "new" "move-cell" "0" "get-col" ">" "selection-pivot" "let" "selection" "not-null?" "when" "cell" "selection-mode" "case" "user?" "modifiers")}
        {Lisp-Entry "up-arrow-press" #f 1192 11 1192 25 ("up-arrow-action" "modifiers")}
        {Lisp-Entry "up-arrow-action" #f 1196 18 1196 33 ("car" "row" "backward" "'backward" "move-selection" "null?" "if" "get-visible-count" "count" "else" "up" "'up" "get-col" "1" "-" "Cell" "new" "move-cell" "0" "get-row" ">" "selection-pivot" "let" "selection" "not-null?" "when" "cell" "selection-mode" "case" "user?" "modifiers")}
        {Lisp-Entry "right-arrow-press" #f 1213 11 1213 28 ("right-arrow-action" "modifiers")}
        {Lisp-Entry "right-arrow-action" #f 1217 18 1217 36 ("expand/collapse" "expanded?" "unless" "bell" "not" "if" "get-selected-row" "row" "else" "right" "'right" "+" "get-row" "Cell" "new" "move-cell" "1" "get-columns-count" "-" "get-col" "<" "selection-pivot" "let" "selection" "not-null?" "when" "cell" "selection-mode" "case" "user?" "modifiers")}
        {Lisp-Entry "down-arrow-press" #f 1232 11 1232 27 ("down-arrow-action" "modifiers")}
        {Lisp-Entry "down-arrow-action" #f 1236 18 1236 35 ("car" "row" "forward" "'forward" "move-selection" "0" ">" "null?" "if" "else" "down" "'down" "get-col" "+" "Cell" "new" "move-cell" "get-row" "<" "selection-pivot" "let" "selection" "not-null?" "when" "cell" "selection-mode" "case" "1" "-" "last" "get-visible-count" "count" "let*" "user?" "modifiers")}
        {Lisp-Entry "move-selection" #f 1254 11 1254 25 ("update-view" "auto-select" "auto-expand/collapse?" "user-origin?:" "list" "set-selection" "get-row" "row" "let" "acquire-focus" "when" "user?" "direction" "n")}
        {Lisp-Entry "move-cell" #f 1264 11 1264 20 ("update-view" "get-bottom" "down" "forward" "'forward" "get-right" "right" "get-top" "vertical-scroll-needed" "up" "0" "backward" "'backward" "get-left" "horizontal-scroll-needed" "Point" "new" "scroll" "left" "case" "cell-rect" "rect" "let" "user-origin?:" "ensure-displayed?:" "list" "set-selection" "acquire-focus" "when" "user?" "direction" "cell")}
        {Lisp-Entry "row-displayed?" #f 1277 11 1277 25 ("get-v" "=" "0" "Point" "new" "scroll-needed" "needed" "get-bottom" "bottom" "get-top" "top" "get-row" "row" "let*" "n")}
        {Lisp-Entry "cell-displayed?" #f 1285 11 1285 26 ("get-v" "0" "get-h" "=" "and" "get-bottom" "get-right" "get-top" "get-left" "Point" "new" "scroll-needed" "needed" "cell-rect" "rect" "let*" "cell")}
        {Lisp-Entry "select-all" #f 1292 11 1292 21 ("visible-count" "0" "naturals" "set-selection" "multiple-selection?" "when" "user-origin?" "user-origin?:")}
        {Lisp-Entry "fill-column" #f 1302 18 1302 29 ("invalidate-header" "Rect" "new" "invalidate-rect" "get-height" "bottom" "right" "top" "0" "2" "min" "left" "let" "set-width" "columns-right" "increase!" "1" "tail" "set-cdr!" "car" "set-car!" "pair" "function" "for-each" "+" "new-right" "cdr" "old-right" "borders-right" "space-after-column" "get-width" "borders-width" "-" "max" "delta" "element" "filled-borders" "length" "<" "column-rank" "rank" "find-filled-column" "column" "let*" "columns-borders" "not-null?" "filled-column" "and" "when" "size")}
        {Lisp-Entry "find-filled-column" #f 1327 11 1327 29 ("get-name" "column" "function" "find-if" "else" "last" "eq?" "columns" "element" "integer?" "cond" "name")}
        {Lisp-Entry "space-after-column" #f 1335 11 1335 29 ("1" "+" "columns-borders" "tail" "borders-width" "increase!" "borders" "function" "for-each" "0" "total" "let" "rank")}
        {Lisp-Entry "add-column" #f 1343 18 1343 28 ("invalidate-header" "get-display-size" "fill-column" "set-title" "set-width" "node-column" "set!" "Tree-Node-Column" "is?" "when" "self" "parent:" "new" "apply" "column" "let" "others" "width" "title" "Tree-Column" "class" "bind-keywords" "rest")}
        {Lisp-Entry "remove-column" #f 1357 18 1357 31 ("invalidate-header" "get-display-size" "fill-column" "invalidate-columns" "node-column" "eq?" "when" "remove!" "columns" "set!" "column")}
        {Lisp-Entry "remove-columns" #f 1366 18 1366 32 ("remove-all-columns" "remove-columns-preserving" "or" "if" "preserve" "preserve:" "preserve-node-column?" "preserve-node-column?:")}
        {Lisp-Entry "remove-all-columns" #f 1372 11 1372 29 ("invalidate-header" "node-column" "0" "columns-right" "columns-borders" "columns" "set!" "set-children" "remove-every-row")}
        {Lisp-Entry "remove-columns-preserving" #f 1382 11 1382 36 ("invalidate-header" "get-columns" "remove-column" "get-name" "memq?" "Tree-Node-Column" "is?" "and" "or" "unless" "column" "function" "for-each" "remove-every-row" "preserve" "preserve-node-column?")}
        {Lisp-Entry "invalidate-columns" #f 1392 11 1392 29 ("invalidate-borders" "invalidate-node-column" "columns" "not-null?" "when")}
        {Lisp-Entry "invalidate-node-column" #f 1398 11 1398 33 ("columns" "Tree-Node-Column" "is?" "column" "function" "find-if" "node-column" "set!")}
        {Lisp-Entry "invalidate-borders" #f 1404 21 1404 39 ("last" "borders-right" "columns-right" "columns" "column-spacing" "get-visible?" "when" "cons" "prog1" "+" "right" "get-width" "width" "let*" "column" "function" "map" "columns-borders" "set!" "0" "left" "let")}
        {Lisp-Entry "get-columns-count" #f 1417 18 1417 35 ("columns" "length")}
        {Lisp-Entry "get-column" #f 1421 18 1421 28 ("columns" "element" "n")}
        {Lisp-Entry "get-node-column" #f 1425 18 1425 33 ("node-column")}
        {Lisp-Entry "find-column" #f 1429 18 1429 29 ("find-component" "name")}
        {Lisp-Entry "get-node-column-index" #f 1433 18 1433 39 ("node-column" "column-rank")}
        {Lisp-Entry "column-rank" #f 1437 18 1437 29 ("columns" "find" "column")}
        {Lisp-Entry "row-class" #f 1446 11 1446 20 ("Tree-Row")}
        {Lisp-Entry "update-father-control" #f 1450 11 1450 32 ("image-rect" "node-column" "control-rect" "invalidate-rect" "get-height" "<" "row-top" "top" "row-rank" "rank" "let*" "row-visible?" "root-row" "neq?" "update-locked?" "not" "and" "when" "father")}
        {Lisp-Entry "add-empty-row" #f 1459 11 1459 24 ("columns" "new-empty-cell" "column" "function" "map" "children:" "add-row" "root-row" "either" "let" "father" "father:")}
        {Lisp-Entry "row-selected?" #f 1466 11 1466 24 ("memq?" "else" "selection" "get-row" "=" "function" "some?" "cell" "selection-mode" "case" "row")}
        {Lisp-Entry "row-draw-selected?" #f 1472 11 1472 29 ("show-unfocused-selection?" "has-focus?" "or" "nextmethod" "and" "row")}
        {Lisp-Entry "row-index" #f 1482 18 1482 27 ("continuation-return" "eq?" "when" "rank" "row" "for-each-visible-row" "return" "function" "continuation-capture" "target")}
        {Lisp-Entry "user-data-row" #f 1492 18 1492 31 ("continuation-return" "get-user-data" "when" "rank" "row" "for-each-row" "for-each-visible-row" "if" "return" "function" "continuation-capture" "visible?" "visible?:" "eqv?" "test" "test:" "data")}
        {Lisp-Entry "user-data-rows" #f 1502 18 1502 32 ("get-output" "put" "member?" "when" "get-user-data" "user-data" "rank" "row" "function" "for-each-row" "for-each-visible-row" "if" "List-Factory" "new" "fact" "let" "visible?" "visible?:" "eqv?" "test" "test:" "data-list")}
        {Lisp-Entry "user-data-index" #f 1513 18 1513 33 ("continuation-return" "get-user-data" "when" "rank" "row" "for-each-visible-row" "return" "function" "continuation-capture" "eqv?" "test" "test:" "data")}
        {Lisp-Entry "user-data-indexes" #f 1524 18 1524 35 ("get-output" "put" "member?" "when" "get-user-data" "user-data" "rank" "row" "function" "for-each-visible-row" "List-Factory" "new" "fact" "let" "eqv?" "test" "test:" "data-list")}
        {Lisp-Entry "select-user-data-row" #f 1534 18 1534 38 ("row-rank" "set-single-selection" "error" "not" "if" "user-data-row" "row" "let" "data")}
        {Lisp-Entry "get-cell-data" #f 1546 18 1546 31 ("element" "error" "selection" "set!" "get-children" "length" "get-col" ">=" "when" "get-row" "row" "let" "cell")}
        {Lisp-Entry "set-cell-data" #f 1555 18 1555 31 ("get-col" "get-children" "set-element!" "get-row" "row" "let" "data" "cell")}
        {Lisp-Entry "get-cell-title" #f 1560 18 1560 32 ("Tree-Cell-View" "get-title" "Tree-Label" "is?" "cond" "when" "get-cell-data" "data" "let" "cell")}
        {Lisp-Entry "set-cell-title" #f 1569 18 1569 32 ("Tree-Cell-View" "set-title" "Tree-Label" "is?" "cond" "when" "get-cell-data" "data" "let" "title" "cell")}
        {Lisp-Entry "invalidate-cell" #f 1578 18 1578 33 ("cell-rect" "invalidate-rect" "cell")}
        {Lisp-Entry "redraw-cell" #f 1582 18 1582 29 ("update-view" "cell-rect" "invalidate-rect" "cell")}
        {Lisp-Entry "expand/collapse" #f 1592 11 1592 26 ("nextmethod" "else" "dynamic-expand" "dynamic" "get-state" "case" "node-column" "control-rect" "invalidate-rect" "get-position" "get-v" "top" "let" "row")}
        {Lisp-Entry "dynamic-expand" #f 1600 18 1600 32 ("expand" "update-row" "row")}
        {Lisp-Entry "invalidate-expand" #f 1605 11 1605 28 ("plus/minus-rect" "control-rect" "0" "get-sons" "cardinality" "=" "and" "if" "node-column" "image-rect" "invalidate-rect" "dynamic?" "top" "row")}
        {Lisp-Entry "invalidate-collapse" #f 1612 11 1612 30 ("plus/minus-rect" "row-rect" "if" "node-column" "image-rect" "invalidate-rect" "selected?" "top" "row" "rank")}
        {Lisp-Entry "collapse-selection" #f 1619 11 1619 29 ("row-selected?" "not" "and" "else" "cons" "set!" "selection" "member?" "unless" "get-col" "Cell" "new" "let" "when" "cell" "selection-mode" "case" "removed" "rank")}
        {Lisp-Entry "auto-expand/collapse" #f 1631 18 1631 38 ("rows->selection" "else" "not" "auto-collapse" "close-delayed-row" "if" "mouse-up?" "auto-toggle" "auto-inplace?" "delayed-autorow" "set!" "force?:" "get-spine" "essay" "new-spine:" "close-auto-expanded" "neq?" "auto-expanded-row" "and" "when" "selection-manager" "mouse-down?" "cond" "selection" "selection->rows" "selected-rows" "let" "function" "with-update-locked" "auto-toggle?" "auto-toggle?:" "close-auto-expanded?" "close-auto-expanded?:" "row")}
        {Lisp-Entry "auto-toggle" #f 1659 11 1659 22 ("auto-expand" "auto-expanded-row" "set!" "auto-collapse" "when" "expanded?" "if" "auto-toggle?" "row")}
        {Lisp-Entry "close-delayed-row" #f 1668 18 1668 35 ("auto-collapse" "memq?" "and" "if" "unless" "row" "function" "for-each-reversed" "set!" "done?" "get-spine" "old-spine" "let" "delayed-autorow" "when" "new-spine" "new-spine:")}
        {Lisp-Entry "close-auto-expanded" #f 1681 18 1681 37 ("auto-collapse" "auto-inplace?" "or" "memq?" "and" "if" "unless" "row" "function" "for-each-reversed" "set!" "done?" "get-spine" "old-spine" "let" "auto-expanded-row" "when" "force?" "force?:" "new-spine" "new-spine:")}
        {Lisp-Entry "close-auto-expanded-row" #f 1697 11 1697 34 ("set!" "auto-collapse" "auto-expanded-row" "when")}
        {Lisp-Entry "set-auto-expanded-row" #f 1704 18 1704 39 ("auto-expanded-row" "set!" "row")}
        {Lisp-Entry "set-dynamic" #f 1708 18 1708 29 ("node-column" "control-rect" "invalidate-rect" "row-top" "top" "row-rank" "rank" "let*" "set-state" "dynamic" "'dynamic" "get-state" "neq?" "when" "row")}
        {Lisp-Entry "ensure-displayed" #f 1721 11 1721 27 ("selection-row" "ensure-row-displayed" "car" "ensure-cell-displayed" "cell" "'cell" "selection-mode" "eq?" "if" "selection" "not-null?" "when" "rest")}
        {Lisp-Entry "ensure-cell-displayed" #f 1728 11 1728 32 ("get-scroll-context" "scroll-needed" "scroll" "rect-position" "pos" "cell-rect" "rect" "let*" "cell")}
        {Lisp-Entry "process-selection" #f 1740 18 1740 35 ("delay-selection" "selection-manager" "allow-start-drag?" "last" "car" "null?" "when" "cons" "equal?" "test:" "remove" "<" "1" "+" "naturals" ">" "=" "0" "either" "pivot" "'cell" "eq?" "user-origin?:" "set-pivot?:" "list" "set-selection" "selection" "member?" "unless" "selection-pivot" "set!" "cond" "or" "multiple-selection?" "and" "if" "get-row" "else" "selection-mode" "case" "element" "let" "control?" "shift?" "cell")}
        {Lisp-Entry "get-selection" #f 1767 18 1767 31 ("selection")}
        {Lisp-Entry "get-ordered-selection" #f 1771 18 1771 39 ("selection" "<" "sort")}
        {Lisp-Entry "set-selection" #f 1775 18 1775 31 ("ensure-displayed" "end-delayed?" "ensure-displayed?" "auto-select" "auto-toggle?:" "auto-expand/collapse" "multiple-selection?" "auto-expand?" "auto-expand/collapse?" "and" "selection-row" "get-row" "essay" "auto-row" "user-origin?" "force?" "selection-change" "generate-event?" "invalidate-selection" "not-null?" "car" "null?" "if" "selection-pivot" "set-pivot?" "set!" "selection" "old-selection" "let" "change-selection?" "when" "locator" "reset" "selection-manager" "locked?" "unless" "sel")}
        {Lisp-Entry "selection-change" #f 1805 29 1805 45 ("selection" "call-selection-handler" "function" "selection-manager" "with-locked-operation" "user-origin?" "force?" "old-selection")}
        {Lisp-Entry "remember-selection" #f 1811 11 1811 29 ("else" "get-selection" "get-col" "cons" "map" "cell" "selection-mode" "get-user-data" "function" "data" "identity" "rank" "get-row" "row" "case" "proc" "let" "use")}
        {Lisp-Entry "restore-selection" #f 1823 11 1823 28 ("else" "Cell" "new" "when" "col" "bind" "pair" "map" "cell" "selection-mode" "remove-nils" "test:" "user-data-index" "function" "data" "identity" "rank" "row-rank" "row" "case" "proc" "let" "test" "saved-sel" "use")}
        {Lisp-Entry "with-preserved-selection" #f 1839 18 1839 42 ("auto-expand?:" "set-selection" "row-rank" "set-row" "edited-cell" "get-row" "neq?" "cell-editor" "get-parent" "edition-row" "in-edition?" "when" "restore-selection" "selection" "remember-selection" "saved-sel" "let" "generate-event?" "generate-event?:" "ensure-displayed?" "ensure-displayed?:" "eqv?" "test" "test:" "row" "'row" "use" "use:" "proc")}
        {Lisp-Entry "get-single-selection" #f 1853 18 1853 38 ("car" "selection" "null?" "if")}
        {Lisp-Entry "set-single-selection" #f 1859 18 1859 38 ("list" "set-selection" "apply" "Cell" "is?" "integer?" "or" "assert" "rest" "sel")}
        {Lisp-Entry "auto-select-first" #f 1864 18 1864 35 ("list" "set-selection" "0" "get-visible-count" ">" "selection" "null?" "and" "when")}
        {Lisp-Entry "selected-row-proc" #f 1869 11 1869 28 ("else" "get-row" "function" "cell" "selection-mode" "case")}
        {Lisp-Entry "get-selected-row" #f 1878 18 1878 34 ("selected-row-proc" "when" "get-single-selection" "selection" "let")}
        {Lisp-Entry "get-selected-rows" #f 1884 18 1884 35 ("selection" "selected-row-proc" "map")}
        {Lisp-Entry "get-selected-data" #f 1888 18 1888 35 ("get-selected-rows" "get-user-data" "row" "function" "map")}
        {Lisp-Entry "get-single-selected-data" #f 1894 18 1894 42 ("get-user-data" "when" "get-selected-row" "row" "let")}
        {Lisp-Entry "get-selection-data" #f 1900 18 1900 36 ("get-user-data" "get-row" "row" "let" "n" "function" "map" "selection")}
        {Lisp-Entry "with-deleted-selection" #f 1907 18 1907 40 ("set-single-selection" "1" "-" "previous" "0" ">" "when" "set-selection" "length" "=" "and" "if" "user-data-index" "map" "remove-nils" "sel" "min" "apply" "smallest" "get-selection-data" "essay" "data" "let" "can-survive?" "can-survive?:" "proc" "selection")}
        {Lisp-Entry "selection->rows" #f 1919 11 1919 26 ("else" "get-col" "get-row" "get-visible-row" "cons" "function" "map" "cell" "selection-mode" "case" "selection")}
        {Lisp-Entry "rows->selection" #f 1929 11 1929 26 ("else" "row-index" "Cell" "new" "col" "row" "bind" "pair" "function" "map" "remove-nils" "cell" "selection-mode" "case" "rows")}
        {Lisp-Entry "added-update-selection" #f 1941 11 1941 33 ("selection" "let" "else" "get-col" "Cell" "new" "set-car!" "r" "car" "let*" "pair" "function" "cell" "selection-mode" "case" "for-each-pair" "+" "set-row" "get-row" ">=" "edited-cell" "and" "when" "count" "rank")}
        {Lisp-Entry "removed-update-selection" #f 1958 11 1958 35 ("car" "null?" "else" "cons" "get-col" "Cell" "new" "-1" "+" ">" "<" "if" "r" "function" "cell" "selection-mode" "case" "collect" "selection" "set!" "removed" "let" "-" "set-row" "get-row" ">=" "edited-cell" "and" "when" "count" "rank")}
        {Lisp-Entry "selection-region" #f 1984 11 1984 27 ("or" "'or" "combine!" "selection-element-region" "row-region" "with-closed" "in" "element" "for" "loop" "Region" "new" "region" "let" "sc" "dv" "dh" "sel")}
        {Lisp-Entry "selection-element-region" #f 1992 11 1992 35 ("selection-row-region" "else" "cell-rect" "acquire-delta" "rect:" "Region" "new" "cell" "selection-mode" "case" "sc" "dv" "dh" "element")}
        {Lisp-Entry "selection-row-rect" #f 1998 11 1998 29 ("get-height" "+" "3" "-" "Rect" "new" "columns-right" "right" "get-position" "get-v" "top" "node-column" "row-text-left" "left" "get-row" "row" "let*" "n")}
        {Lisp-Entry "selection-row" #f 2006 11 2006 24 ("else" "get-row" "cell" "selection-mode" "case" "element")}
        {Lisp-Entry "cell-visible?" #f 2017 18 2017 31 ("get-columns-count" "get-col" "visible-count" "get-row" "<" "and" "cell")}
        {Lisp-Entry "borders-left" #f 2027 11 2027 23 ("car" "borders")}
        {Lisp-Entry "borders-right" #f 2031 11 2031 24 ("cdr" "borders")}
        {Lisp-Entry "borders-width" #f 2035 11 2035 24 ("borders-left" "borders-right" "-" "borders")}
        {Lisp-Entry "get-borders" #f 2039 18 2039 29 ("columns-borders" "element" "col")}
        {Lisp-Entry "column-width" #f 2043 18 2043 30 ("-" "get-borders" "right" "left" "bind" "col")}
        {Lisp-Entry "row-rect" #f 2054 11 2054 19 ("get-height" "+" "Rect" "new" "columns-right" "right" "get-position" "get-v" "top" "columns-borders" "car" "borders-left" "left" "get-row" "row" "let*" "n")}
        {Lisp-Entry "cell-position" #f 2062 18 2062 31 ("get-top" "get-left" "Point" "new" "cell-rect" "rect" "let" "cell")}
        {Lisp-Entry "cell-rect" #f 2067 18 2067 27 ("get-height" "+" "borders-right" "borders-left" "Rect" "new" "get-position" "get-v" "top" "get-row" "row" "get-col" "get-borders" "borders" "let*" "cell")}
        {Lisp-Entry "cell-region" #f 2074 18 2074 29 ("cell-rect" "rect:" "Region" "new" "cell")}
        {Lisp-Entry "cell-content-rect" #f 2078 11 2078 28 ("get-height" "get-column" "content-rect" "offset-rect" "borders-left" "left" "get-borders" "borders" "column-width" "width" "get-cell-data" "get-position" "get-v" "top" "row" "get-col" "col" "get-row" "n" "let*" "cell")}
        {Lisp-Entry "cell-text-rect" #f 2090 11 2090 25 ("0" "get-height" "get-column" "text-rect" "offset-rect" "get-node-column-index" "column-width" "width" "get-cell-data" "get-position" "get-v" "top" "row" "get-col" "col" "get-row" "n" "let*" "cell")}
        {Lisp-Entry "view->tree" #f 2100 18 2100 28 ("cell-visible?" "Cell" "new" "cell" "0" ">=" "and" "when" "get-h" "h->col" "col" "v->row" "default-row-height" "get-v" "quotient" "if" "row" "let" "uniform-height?" "uniform-height?:" "any?" "any?:" "pos")}
        {Lisp-Entry "call-with-view->tree" #f 2111 18 2111 38 ("cell-visible?" "Cell" "new" "cell" "0" ">=" "and" "get-h" "h->col" "col" "let" "if" "height" "v" "row" "function" "get-v" "call-with-v->row" "proc" "pos")}
        {Lisp-Entry "tree->view" #f 2125 18 2125 28 ("get-row" "row->v" "get-col" "col->h" "Point" "new" "cell")}
        {Lisp-Entry "h->col" #f 2131 18 2131 24 ("continuation-return" "/=" "<=" ">=" "and" "when" "right" "left" "bind" "get-columns-count" "below" "0" "from" "n" "columns-borders" "in" "borders" "for" "loop" "return" "function" "continuation-capture" "h")}
        {Lisp-Entry "col->h" #f 2142 11 2142 17 ("get-borders" "borders-left" "n")}
        {Lisp-Entry "in-edition?" #f 2151 18 2151 29 ("edited-cell")}
        {Lisp-Entry "get-edited-cell" #f 2155 18 2155 33 ("edited-cell")}
        {Lisp-Entry "edit-cell" #f 2159 18 2159 27 ("close-cell-editor?" "cell-editor" "edited-cell" "set!" "invalidate-rect" "get-top" "-" "offset-rect" "expand-rect" "set-bounds" "replace-cell" "player" "set-player" "list" "children:" "edition-end-proc:" "get-cell-data" "preserved-data:" "get-v" "get-h" "get-left" "+" "Tree-Cell-View" "new" "view" "cell-editor-rect" "bounds" "let" "layout-scrollee-content" "update-displayed" "update-locked?" "get-row" "ensure-row-exists" "end-edition" "get-columns-count" "get-col" "<" "when" "end-proc" "end-proc:" "close-editor?" "close-editor?:" "draw-preserved?" "draw-preserved?:" "0" "Point" "location" "location:" "editor" "editor:" "cell")}
        {Lisp-Entry "end-edition" #f 2185 18 2185 29 ("invalidate-rect" "set!" "cell" "set-parent" "close" "close-cell-editor?" "if" "get-preserved-data" "replace-cell" "cell-editor" "get-edition-end-proc" "end-proc" "cell-editor-rect" "bounds" "let" "edited-cell" "when")}
        {Lisp-Entry "replace-cell" #f 2201 18 2201 30 ("get-col" "get-row" "replace-child" "child" "cell")}
        {Lisp-Entry "cell-editor-rect" #f 2205 11 2205 27 ("offset-rect" "get-height" "content-rect" "rect" "get-level" "text-h" "h" "borders-left" "left" "get-borders" "borders" "get-width" "column-width" "show-header?" "if" "width" "get-cell-data" "get-position" "get-v" "top" "get-column" "column" "row" "get-col" "col" "get-row" "n" "let*" "cell")}
        {Lisp-Entry "select-up" #f 2220 26 2220 35 ("Cell" "new" "select-cell" "end-edition" "0" ">=" "when" "get-col" "col" "1" "get-row" "-" "row" "let" "cell")}
        {Lisp-Entry "select-down" #f 2228 26 2228 37 ("Cell" "new" "select-cell" "end-edition" "get-visible-count" "<" "not" "or" "when" "get-col" "col" "1" "get-row" "+" "row" "let" "validate?" "cell")}
        {Lisp-Entry "select-left" #f 2236 26 2236 37 ("Cell" "new" "select-cell" "end-edition" "0" ">=" "when" "1" "get-col" "-" "col" "get-row" "row" "let" "cell")}
        {Lisp-Entry "select-right" #f 2244 26 2244 38 ("Cell" "new" "select-cell" "end-edition" "get-columns-count" "<" "when" "1" "get-col" "+" "col" "get-row" "row" "let" "cell")}
        {Lisp-Entry "select-cell" #f 2252 26 2252 37 ("get-row" "set-single-selection" "cell")}
        {Lisp-Entry "get-class-image" #f 2261 16 2261 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 2265 16 2265 37 ("nextmethod" "else" "reorderable?" "column-spacing" "filled-column" "cell-background" "auto-expand/collapse?" "show-unfocused-selection?" "can-select-empty?" "multiple-selection?" "selection-mode" "show-header?" "portfolio" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 2281 11 2281 27 ("nextmethod" "else" "Boolean-Row" "new" "reorderable?" "auto-expand/collapse?" "show-unfocused-selection?" "can-select-empty?" "multiple-selection?" "show-header?" "field-name" "case" "property")}}
      {Lisp-Entry "Tree-Locator" #f 2292 7 2292 19 ("Locator")
        {Lisp-Entry "tree" #f 2295 8 2295 12 ()}
        {Lisp-Entry "column" #f 2296 8 2296 14 ()}
        {Lisp-Entry "initialize" #f 2299 11 2299 21 ("nextmethod" "apply" "tree~self" "set!" "rest" "tree")}
        {Lisp-Entry "iterate" #f 2304 11 2304 18 ("wrap?:" "get-next" "prefix" "if" "when" "start:" "get-title" "title" "node" "let*" "rank" "function" "tree" "for-each-visible-row" "prepare-iterate" "proc2" "row" "bind" "proc")}
        {Lisp-Entry "select" #f 2315 11 2315 17 ("else" "column" "Cell" "new" "set-single-selection" "cell" "tree" "get-selection-mode" "case" "rank")}
        {Lisp-Entry "prepare-iterate" #f 2321 11 2321 26 ("car" "else" "get-children" "element" "row" "function" "get-row" "essay" "cons" "0" "get-col" "if" "column" "set!" "cell" "get-selection-mode" "case" "tree" "get-single-selection" "sel" "let")}}}})
"Tree-Widget"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "widget" "Tree-Widget.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.widget.Tree-Widget" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Tree-Widget" #f 47 7 47 18 ("200" "120" "width:" "title:" ":icons" "portfolio:" "top-tree" "top-head" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "document" "top-scroll" "entry" "style:" "edge" "border-type:" "first" "location:" "366" "128" "Dimension" "size:" "descendants-border" "name:" "Outline-View")}}})
"Type-Extractor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "registry" "Type-Extractor.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.registry.Type-Extractor" #f 42 9 42 51 ("jazz")
      {Lisp-Entry "Type-Extractor" #f 53 7 53 21 ("Object")
        {Lisp-Entry "library" #f 56 8 56 15 ()}
        {Lisp-Entry "name" #f 57 8 57 12 ()}
        {Lisp-Entry "com-classes?" #f 58 8 58 20 ()}
        {Lisp-Entry "pure-dispatch?" #f 59 8 59 22 ()}
        {Lisp-Entry "to-emit" #f 60 8 60 15 ()}
        {Lisp-Entry "emited" #f 61 8 61 14 ()}
        {Lisp-Entry "waiting" #f 62 8 62 15 ()}
        {Lisp-Entry "initialize" #f 65 11 65 21 ("pure-dispatch?~self" "com-classes?~self" "name~self" "library~self" "set!" "nextmethod" "pure-dispatch?" "pure-dispatch?:" "com-classes?" "com-classes?:" "default-name" "name" "name:" "library" "library:")}
        {Lisp-Entry "default-name" #f 73 11 73 23 ("get-name" "lib")}
        {Lisp-Entry "extract" #f 77 18 77 25 ("emit-package-footer" "emit-library-types" "emit-package-header" "format" "name" "output-header" "printer" "function" "parse" "call-with-output-file" "activity" "activity:" "file")}
        {Lisp-Entry "emit-package-header" #f 92 11 92 30 ("name" "format" "printer")}
        {Lisp-Entry "emit-package-footer" #f 96 11 96 30 ("format" "printer")}
        {Lisp-Entry "emit-section-header" #f 100 11 100 30 ("format" "printer" "section-name")}
        {Lisp-Entry "emit-library-types" #f 107 11 107 29 ("debug" "not-null?" "emit-type-information" "info" "function" "for-each" "length" "0" "Range" "new" "set-range" "when" "waiting" "emited" "info-name" "map" "to-emit" "set!" "library" "get-types" "types" "let" "activity" "printer")}
        {Lisp-Entry "emit-type-information" #f 121 11 121 32 ("1" "delta-pos" "emit-waiting" "emited" "emit-type-info" "cons" "waiting" "set!" "waiting-implemented" "waiting-upon" "user-message" "when" "get-name" "name" "let" "throw-cancel" "cancel-requested?" "and" "if" "activity" "printer" "info")}
        {Lisp-Entry "emit-waiting" #f 137 11 137 23 ("remove!" "waiting" "cons" "set!" "emit-type-information" "emited" "every?" "member?" "and" "when" "names" "info" "bind" "pair" "function" "for-each" "processed" "let" "activity" "printer" "name")}
        {Lisp-Entry "waiting-implemented" #f 153 11 153 30 ("get-implemented-types" "emited" "not" "to-emit" "member?" "and" "when" "get-name" "name" "let" "function" "collect" "info")}
        {Lisp-Entry "emit-type-info" #f 162 11 162 25 ("error" "else" "emit-max" "TKIND_MAX" "emit-union" "TKIND_UNION" "emit-alias" "TKIND_ALIAS" "emit-com-class" "TKIND_COCLASS" "emit-dispatch" "TKIND_DISPATCH" "emit-interface" "TKIND_INTERFACE" "emit-package" "TKIND_MODULE" "emit-record" "TKIND_RECORD" "emit-enum" "TKIND_ENUM" "ecase" "get-kind" "kind" "let" "printer" "info")}
        {Lisp-Entry "emit-enum" #f 177 11 177 20 ("emit-variables" "null?" "if" "format" "emit-section-header" "get-variables" "variables" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-record" #f 188 11 188 22 ("emit-variables" "null?" "if" "format" "emit-section-header" "get-variables" "variables" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-package" #f 199 11 199 23 ("format" "emit-section-header" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-interface" #f 205 11 205 25 ("com-external" "'com-external" "emit-functions" "intern-type" "type-name" "either" "final-typedesc" "TYPEDESC" "'desc" "coerce" "essay" "ptr-typedesc" "VT_PTR" "=" "pointer?" "vt" "'vt" "type" "tdesc" "elemdescVar" "get" "typedesc" "get-member-name" "desc" "function" "for-each" "or" "when" "pure-dispatch?" "if" "format" "emit-section-header" "car" "ascendant" "get-implemented-types" "interfaces" "get-functions" "functions" "get-variables" "variables" "get-guid" "guid" "get-name" "name" "let*" "printer" "info")}
        {Lisp-Entry "emit-dispatch" #f 231 11 231 24 ("emit-interface" "printer" "info")}
        {Lisp-Entry "emit-com-class" #f 235 11 235 25 ("essay" "com-method" "'com-method" "emit-functions" "set!" "get-functions" "functions" "tail" "interface" "bind" "pair" "function" "for-each-pair" "null?" "names" "let" "begin" "and" "else" "car" "1" "0" "length" "case" "com-classes?" "if" "format" "emit-section-header" "info-name" "map" "interface-names" "get-implemented-types" "interfaces" "get-guid" "guid" "get-name" "name" "let*" "printer" "info")}
        {Lisp-Entry "emit-alias" #f 262 11 262 21 ("list" "cons" "waiting" "set!" "emit-alias-code" "emited" "member?" "if" "desc" "tdescAlias" "get-attr" "get" "get-referenced-type" "aliased" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-alias-code" #f 270 11 270 26 ("format" "emit-section-header" "printer" "aliased" "name")}
        {Lisp-Entry "emit-union" #f 277 11 277 21 ("format" "emit-section-header" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-max" #f 285 11 285 19 ("format" "emit-section-header" "get-name" "name" "let" "printer" "info")}
        {Lisp-Entry "emit-functions" #f 291 11 291 25 ("cons" "set!" "essay" "emit-function" "memq?" "not" "invkind" "'invkind" "get" "effective-name" "effective" "get-member-name" "name" "let*" "tail" "desc" "bind" "pair" "function" "for-each-pair" "format" "when" "null?" "if" "trailer" "printer" "modifiers" "header" "functions" "names" "info")}
        {Lisp-Entry "emit-function" #f 306 11 306 24 ("reverse!" "VARENUM" "value->name" "item" "map" "cParams" "'cParams" "0" "naturals" "or" "'<in-out>" "and" "parameter-direction" "param-direction" "param-type-name" "interface-kind?" "if" "param-pointer?" "get-referenced-type" "VT_USERDEFINED" "param-referenced" "param-typedesc" "param-type" "ptr-ptr-type" "ptr-ptr-typedesc" "ptr-pointer?" "ptr-type" "ptr-typedesc" "pointer?" "type" "'tdesc" "typedesc" "array-ref" "param" "n" "function" "for-each" "get-function-parameters" "params" "let" "cons" "set!" "unpl" "'unpl" "eq?" "when" "format" "intern-type" "return-type-name" "either" "final-return-typedesc" "TYPEDESC" "'desc" "coerce" "essay" "ptr-return-typedesc" "VT_PTR" "=" "return-pointer?" "vt" "'vt" "return-type" "tdesc" "elemdescFunc" "get" "return-typedesc" "unimplemented" "let*" "equal?" "test:" "member?" "unless" "trailer" "printer" "modifiers" "header" "desc" "effective" "info")}
        {Lisp-Entry "interface-kind?" #f 359 11 359 26 ("TKIND_COCLASS" "TKIND_DISPATCH" "TKIND_INTERFACE" "=" "or" "get-kind" "kind" "let" "when" "info")}
        {Lisp-Entry "effective-name" #f 367 11 367 25 ("putref-name" "INVOKE_PROPERTYPUTREF" "put-name" "INVOKE_PROPERTYPUT" "get-name" "INVOKE_PROPERTYGET" "INVOKE_FUNC" "ecase" "name" "kind")}
        {Lisp-Entry "get-name" #f 375 11 375 19 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "put-name" #f 379 11 379 19 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "putref-name" #f 383 11 383 22 ("concatenate" "string->symbol" "name")}
        {Lisp-Entry "parameter-direction" #f 387 11 387 30 ("error" "else" "'<out>" "'<in>" "or" "'<in-out>" "cond" "not" "and" "unspecified?" "IDLFLAG_FOUT" "out?" "IDLFLAG_FIN" "mask-bit-set?" "in?" "wIDLFlags" "idldesc" "get" "flags" "let*" "param")}
        {Lisp-Entry "emit-variables" #f 398 11 398 25 ("essay" "emit-variable" "tail" "desc" "bind" "pair" "function" "for-each-pair" "format" "when" "null?" "if" "trailer" "printer" "variables" "info")}
        {Lisp-Entry "emit-variable" #f 408 11 408 24 ("VARENUM" "value->name" "unpl" "'unpl" "=" "and" "when" "TKIND_RECORD" "read-variant" "TKIND_ENUM" "ecase" "format" "intern-type" "variable-type-name" "lpvarValue" "'lpvarValue" "value" "vt" "'vt" "basetype" "tdesc" "elemdescVar" "get" "typedesc" "get-member-name" "name" "get-kind" "kind" "let*" "trailer" "printer" "desc" "info")}
        {Lisp-Entry "info-name" #f 425 11 425 20 ("get-name" "info")}
        {Lisp-Entry "intern-type" #f 434 11 434 22 ("cdr" "format" "car" "pair?" "name" "idl-type-info" "let*" "get-name" "add-modifier" "'desc" "get-referenced-type" "referenced" "VT_USERDEFINED" "=" "if" "vt" "'vt" "get" "type" "debug?" "let" "pointer?" "desc" "info")}
        {Lisp-Entry "idl-type-info" #f 448 11 448 24 ("VARENUM" "value->name" "error" "else" "VT_LPWSTR" "VT_LPSTR" "VT_CY" "VT_SAFEARRAY" "VT_DISPATCH" "VT_UNKNOWN" "VT_USERDEFINED" "VT_DATE" "VT_VARIANT" "VT_BSTR" "VT_CARRAY" "cons" "VT_PTR" "VT_HRESULT" "VT_BOOL" "VT_INT" "VT_R8" "VT_R4" "VT_I4" "VT_I2" "VT_I1" "VT_UINT" "VT_UI4" "VT_UI2" "VT_UI1" "VT_VOID" "ecase" "type")}
        {Lisp-Entry "add-modifier" #f 478 11 478 23 ("format" "if" "pointer?" "name")}}}})
"Type-Info"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "registry" "Type-Info.jazz"} 1226584783
    {Lisp-Entry "jazz.library.registry.Type-Info" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Type-Info" #f 44 7 44 16 ("Object")
        {Lisp-Entry "handle" #f 47 8 47 14 ()}
        {Lisp-Entry "attr" #f 48 8 48 12 ()}
        {Lisp-Entry "functions" #f 49 8 49 17 ()}
        {Lisp-Entry "variables" #f 50 8 50 17 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("destroy-mandatory" "load-variables" "variables" "load-functions" "functions" "TYPEATTR" "get-type-attr" "coerce" "attr" "handle" "set!" "nextmethod" "h")}
        {Lisp-Entry "destroy" #f 62 11 62 18 ("nextmethod" "release-type-info" "attr" "record-address" "handle" "release-type-attr" "release-variables" "release-functions")}
        {Lisp-Entry "load-functions" #f 70 11 70 25 ("cFuncs" "'cFuncs" "attr" "get" "0" "naturals" "FUNCDESC" "handle" "get-type-info-func-desc" "coerce" "i" "function" "map")}
        {Lisp-Entry "load-variables" #f 76 11 76 25 ("cVars" "'cVars" "attr" "get" "0" "naturals" "VARDESC" "handle" "get-type-info-var-desc" "coerce" "n" "function" "map")}
        {Lisp-Entry "release-functions" #f 82 11 82 28 ("functions" "record-address" "handle" "release-func-desc" "desc" "function" "for-each")}
        {Lisp-Entry "release-variables" #f 88 11 88 28 ("variables" "record-address" "handle" "release-var-desc" "desc" "function" "for-each")}
        {Lisp-Entry "get-handle" #f 94 18 94 28 ("handle")}
        {Lisp-Entry "get-attr" #f 98 18 98 26 ("attr")}
        {Lisp-Entry "get-name" #f 102 18 102 26 ("-1" "handle" "get-type-info-name")}
        {Lisp-Entry "get-doc" #f 106 18 106 25 ("-1" "handle" "get-type-info-doc")}
        {Lisp-Entry "get-kind" #f 110 18 110 26 ("typekind" "'typekind" "attr" "get")}
        {Lisp-Entry "get-guid" #f 114 18 114 26 ("guid" "'guid" "attr" "get" "record-address" "GUID" "new")}
        {Lisp-Entry "get-functions" #f 118 18 118 31 ("functions")}
        {Lisp-Entry "get-variables" #f 122 18 122 31 ("variables")}
        {Lisp-Entry "get-referenced-type" #f 126 18 126 37 ("Type-Info" "new" "0" "/=" "when" "handle" "get-type-info-referenced-type" "hnd" "let" "href")}
        {Lisp-Entry "get-implemented-type" #f 132 18 132 38 ("Type-Info" "new" "0" "/=" "when" "handle" "get-type-info-implemented-type" "hnd" "let" "n")}
        {Lisp-Entry "get-nb-implemented-types" #f 138 18 138 42 ("cImplTypes" "'cImplTypes" "attr" "get")}
        {Lisp-Entry "get-implemented-types" #f 142 18 142 39 ("get-nb-implemented-types" "0" "naturals" "get-implemented-type" "map")}
        {Lisp-Entry "get-member-name" #f 146 18 146 33 ("memid" "'memid" "get" "handle" "get-type-info-name" "desc")}
        {Lisp-Entry "get-member-doc" #f 150 18 150 32 ("memid" "'memid" "get" "handle" "get-type-info-doc" "desc")}
        {Lisp-Entry "get-function-parameters" #f 154 18 154 41 ("lprgelemdescParam" "'lprgelemdescParam" "cParams" "'cParams" "get" "ELEMDESC" "new-array-from-memory" "desc")}}}})
"Type-Lib"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "registry" "Type-Lib.jazz"} 1226584783
    {Lisp-Entry "jazz.library.registry.Type-Lib" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Type-Lib" #f 44 7 44 15 ("Object")
        {Lisp-Entry "file" #f 47 8 47 12 ()}
        {Lisp-Entry "guid" #f 48 8 48 12 ()}
        {Lisp-Entry "major-version" #f 49 8 49 21 ()}
        {Lisp-Entry "minor-version" #f 50 8 50 21 ()}
        {Lisp-Entry "language-id" #f 51 8 51 19 ()}
        {Lisp-Entry "handle" #f 52 8 52 14 ()}
        {Lisp-Entry "attr" #f 53 8 53 12 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("destroy-mandatory" "set-guid" "set-file" "cond" "nextmethod" "language-id" "language-id:" "minor-version" "minor-version:" "major-version" "major-version:" "guid" "guid:" "file" "file:")}
        {Lisp-Entry "destroy" #f 63 11 63 18 ("nextmethod" "release-type-lib" "set!" "record-address" "handle" "release-lib-attr" "attr" "when")}
        {Lisp-Entry "register" #f 73 18 73 26 ("handle" "register-type-lib" "error" "file" "null?" "if")}
        {Lisp-Entry "get-file" #f 79 18 79 26 ("file")}
        {Lisp-Entry "set-file" #f 83 18 83 26 ("TLIBATTR" "get-lib-attr" "coerce" "attr" "load-type-lib" "handle" "file" "set!" "f")}
        {Lisp-Entry "get-guid" #f 89 18 89 26 ("guid")}
        {Lisp-Entry "set-guid" #f 93 18 93 26 ("TLIBATTR" "get-lib-attr" "coerce" "attr" "load-reg-type-lib" "handle" "language-id" "minor-version" "major-version" "guid" "set!" "li" "mi" "ma" "g")}
        {Lisp-Entry "get-handle" #f 102 18 102 28 ("handle")}
        {Lisp-Entry "get-attr" #f 106 18 106 26 ("attr")}
        {Lisp-Entry "get-name" #f 110 18 110 26 ("handle" "get-type-lib-name")}
        {Lisp-Entry "get-doc" #f 114 18 114 25 ("handle" "get-type-lib-doc")}
        {Lisp-Entry "get-lib-guid" #f 118 18 118 30 ("guid" "'guid" "attr" "get" "record-address" "GUID" "new")}
        {Lisp-Entry "get-lib-file" #f 122 18 122 30 ("error" "file" "either")}
        {Lisp-Entry "get-types" #f 126 18 126 27 ("get-output" "get-type-info-count" "0" "naturals" "-1" "get-implemented-type" "either" "put" "TKIND_DISPATCH" "get-kind" "=" "if" "get-name" "member?" "not" "when" "handle" "get-type-info" "Type-Info" "info" "n" "function" "for-each" "List-Factory" "new" "fact" "let")}}}})
"Type-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "registry" "Type-Viewer.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.registry.Type-Viewer" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Type-Viewer" #f 55 7 55 18 ("Code" "Font" "font:" "Default" "Text-Style" "default-style:" "descr" "second" "descr-border" "269" "width:" "on-selection-change" "selection-handler:" "library" "fill" "content" "vscroll?:" "document" "entry" "style:" "edge" "border-type:" "first" "library-border" "30" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "center" "splitter" "on-browse" "tail" "100" "title:" "browse" "on-generate" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "22" "generate" "0" "6" "1" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "toolbar" "name:" "border" "layout-type:" "739" "693" "Dimension" "size:" "Layout-View")
        {Lisp-Entry "library" #f 58 8 58 15 ()}
        {Lisp-Entry "singleton" #f 79 23 79 32 ("new-frame" "Type-Viewer" "get-stage" "find-host" "either")}
        {Lisp-Entry "destroy" #f 84 11 84 18 ("nextmethod" "library" "set!")}
        {Lisp-Entry "host-icon" #f 94 16 94 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 98 16 98 26 ()}
        {Lisp-Entry "host-position" #f 102 16 102 29 ("14" "503" "Point")}
        {Lisp-Entry "host-size" #f 106 16 106 25 ("635" "557" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 110 11 110 26 ("home")}
        {Lisp-Entry "on-generate" #f 119 11 119 22 ("extract" ":pure-dispatch?" ":library" "Type-Extractor" "new" "extractor" "shift-down?" "pure-dispatch?" "extensions:" "default-extension:" "initial-filename:" "choose-new-file" "file" "get-name" "name" "let*" "bell" "library" "null?" "if" "evt")}
        {Lisp-Entry "on-browse" #f 129 11 129 20 ("extensions:" "choose-file" "view-file" "evt")}
        {Lisp-Entry "on-selection-change" #f 133 11 133 30 ("get-row" "get-user-data" "library" "describe-item" "null?" "if" "get-single-selection" "selection" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "view-file" #f 141 18 141 27 ("file:" "Type-Lib" "new" "view-library" "file")}
        {Lisp-Entry "view-registered-library" #f 145 18 145 41 (":language-id" ":minor-version" ":major-version" "guid:" "Type-Lib" "new" "view-library" "li" "mi" "ma" "g")}
        {Lisp-Entry "view-library" #f 149 18 149 30 ("describe-item" "insert-library" "remove-every-row" "with-update-locked" "'library" "locate" "tree" "let" "library" "set!" "function" ":wait" "with-cursor" "lib")}
        {Lisp-Entry "insert-library" #f 166 11 166 25 ("get-types" "insert-info" "info" "function" "for-each" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "add-row" "node" "library" "get-name" "title" "let*" "tree")}
        {Lisp-Entry "insert-info" #f 174 11 174 22 ("user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "dynamic" "'dynamic" "state:" "father:" "add-row" "else" "TKIND_UNION" "TKIND_ALIAS" "TKIND_DISPATCH" "TKIND_INTERFACE" "TKIND_COCLASS" "TKIND_RECORD" "Bitmap-Resource" "TKIND_ENUM" "ecase" "icon" "get-kind" "kind" "get-doc" "doc" "get-name" "name" "let*" "node" "tree" "info")}
        {Lisp-Entry "update-info-row" #f 190 11 190 26 ("get-variables" "insert-variable" "get-functions" "insert-function" "desc" "function" "for-each" "get-user-data" "info" "get-parent" "tree" "let" "row")}
        {Lisp-Entry "insert-function" #f 201 11 201 26 ("cons" "user-data:" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "else" "INVOKE_PROPERTYPUTREF" "INVOKE_PROPERTYPUT" "INVOKE_PROPERTYGET" "Bitmap-Resource" "INVOKE_FUNC" "invkind" "'invkind" "get" "ecase" "icon" "get-member-name" "name" "let" "node" "tree" "desc" "info")}
        {Lisp-Entry "insert-variable" #f 212 11 212 26 ("cons" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "expanded" "'expanded" "state:" "father:" "add-row" "get-member-name" "name" "let" "node" "tree" "desc" "info")}
        {Lisp-Entry "describe-item" #f 222 11 222 24 ("get-output" "set-content" "describe-member" "else" "describe-info" "Type-Info" "describe-lib" "Type-Lib" "typecase" "List-Factory" "new" "fact" "descr" "'descr" "locate" "text" "let" "when" "item")}
        {Lisp-Entry "describe-lib" #f 233 11 233 23 ("get-lib-file" "get-lib-guid" "get-doc" "get-name" "format" "put" "fact" "item")}
        {Lisp-Entry "describe-info" #f 241 11 241 24 ("get-implemented-types" "info" "function" "map" "get-guid" "get-kind" "TYPEKIND" "value->name" "get-doc" "get-name" "format" "put" "fact" "item")}
        {Lisp-Entry "describe-member" #f 249 11 249 26 ("describe-variable" "VARDESC" "describe-function" "FUNCDESC" "typecase" "desc" "info" "bind" "fact" "item")}
        {Lisp-Entry "describe-function" #f 256 11 256 28 ("0" "naturals" "get-name" "get-referenced-type" "referenced" "ptr-ptr-type" "ptr-ptr-typedesc" "when" "make-string" "length" "10" "-" "1" "max" "padding" "param-type-name" "ptr-type" "TYPEDESC" "'desc" "coerce" "essay" "ptr-typedesc" "VT_USERDEFINED" "user?" "VT_PTR" "=" "pointer?" "parameter-direction" "direction" "vt" "'vt" "type" "'tdesc" "typedesc" "array-ref" "param" "let*" "n" "function" "for-each" "get-function-parameters" "params" "let" "tdesc" "elemdescFunc" "describe-type" "cParamsOpt" "'cParamsOpt" "cParams" "'cParams" "oVft" "'oVft" "callconv" "'callconv" "CALLCONV" "invkind" "'invkind" "INVOKEKIND" "funckind" "'funckind" "get" "FUNCKIND" "value->name" "format" "put" "fact" "desc" "info")}
        {Lisp-Entry "describe-type" #f 290 11 290 24 ("VARENUM" "value->name" "get-name" "'desc" "get-referenced-type" "referenced" "VT_USERDEFINED" "=" "if" "vt" "'vt" "get" "type" "let" "desc" "info")}
        {Lisp-Entry "parameter-direction" #f 298 11 298 30 ("error" "else" "'<out>" "'<in>" "or" "'<in-out>" "cond" "not" "and" "unspecified?" "IDLFLAG_FOUT" "out?" "IDLFLAG_FIN" "mask-bit-set?" "in?" "wIDLFlags" "idldesc" "get" "flags" "let*" "param")}
        {Lisp-Entry "describe-variable" #f 309 11 309 28 ("TKIND_UNION" "else" "cElements" "rgbounds" "tdescElem" "'tdescElem" "ARRAYDESC" "'desc" "coerce" "arraydesc" "let" "VT_CARRAY" "case" "TKIND_RECORD" "read-variant" "format" "put" "TKIND_ENUM" "ecase" "lpvarValue" "'lpvarValue" "value" "describe-type" "type" "tdesc" "elemdescVar" "get" "typedesc" "get-kind" "kind" "let*" "fact" "desc" "info")}}
      {Lisp-Entry "Type-Tree" #f 339 7 339 16 ("Tree-View")
        {Lisp-Entry "update-row" #f 342 11 342 21 ("update-info-row" "row")}}}})
"URL"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "moniker" "URL.jazz"} 1226584782
    {Lisp-Entry "jazz.library.moniker.URL" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "extract-url-name" #f 46 20 46 36 ("1" "+" "subseq" "null?" "if" "reversed?:" "find" "pos" "let" "url")}
      {Lisp-Entry "tokenise-url" #f 53 13 53 25 ("split" "filename")}
      {Lisp-Entry "URL-Class" #f 57 7 57 16 ()}
      {Lisp-Entry "URL" #f 60 7 60 10 ("Pathname" "URL-Class")
        {Lisp-Entry "title" #f 63 8 63 13 ()}
        {Lisp-Entry "initialize" #f 66 11 66 21 ("title~self" "set!" "nextmethod" "title" "title:" "lst")}
        {Lisp-Entry "get-name" #f 71 11 71 19 ("parse" "extract-url-name")}
        {Lisp-Entry "print" #f 75 11 75 16 ("format" "function" "self" "print-unreadable" "nextmethod" "null?" "if" "get-title" "title" "let" "readably" "printer")}
        {Lisp-Entry "get-title" #f 89 18 89 27 ("title")}
        {Lisp-Entry "split" #f 99 18 99 23 ("1" "+" "values" "null?" "find" "pos" "sub" "self" "error" "/=" "if" "7" "0" "subseq" "header" "parse" "url" "let*")}
        {Lisp-Entry "foldable?" #f 117 11 117 20 ()}
        {Lisp-Entry "fold-object" #f 122 11 122 22 ("get-list" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}}}})
"Undoer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "utility" "Undoer.jazz"} 1226584782
    {Lisp-Entry "jazz.library.utility.Undoer" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Undoer" #f 44 7 44 13 ("Object")
        {Lisp-Entry "client" #f 47 8 47 14 ()}
        {Lisp-Entry "undo-list" #f 48 8 48 17 ()}
        {Lisp-Entry "redo-list" #f 49 8 49 17 ()}
        {Lisp-Entry "undoing?" #f 50 8 50 16 ()}
        {Lisp-Entry "redoing?" #f 51 8 51 16 ()}
        {Lisp-Entry "atomic?" #f 52 8 52 15 ()}
        {Lisp-Entry "atomic-actions" #f 53 8 53 22 ()}
        {Lisp-Entry "save-depth" #f 54 8 54 18 ("0")}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("client" "set!" "nextmethod" "clt")}
        {Lisp-Entry "get-client" #f 67 18 67 28 ("client")}
        {Lisp-Entry "get-undo-list" #f 71 18 71 31 ("undo-list")}
        {Lisp-Entry "reset-save-depth" #f 75 18 75 34 ("0" "save-depth" "set!")}
        {Lisp-Entry "reset" #f 79 18 79 23 ("atomic-actions" "atomic?" "redoing?" "undoing?" "redo-list" "undo-list" "set!")}
        {Lisp-Entry "register-undo" #f 93 18 93 31 ("client" "get-controller" "set-modified?" "not" "0" "=" "and" "when" "redoing?" "unless" "increase!" "undo-list" "else" "save-depth" "decrease!" "redo-list" "undoing?" "cons" "atomic-actions" "set!" "atomic?" "cond" "action")}
        {Lisp-Entry "register-atomic-actions" #f 108 11 108 34 ("play-action" "action" "for-each" "with-atomic-undo" "function" "register-undo" "not-null?" "when" "actions")}
        {Lisp-Entry "can-undo?" #f 119 18 119 27 ("undo-list" "not-null?")}
        {Lisp-Entry "can-redo?" #f 123 18 123 27 ("redo-list" "not-null?")}
        {Lisp-Entry "undo" #f 127 18 127 22 ("cdr" "play-action" "set!" "begin" "unwind-protect" "car" "action" "undoing?" "old" "let" "undo-list" "not-null?" "when")}
        {Lisp-Entry "redo" #f 139 18 139 22 ("cdr" "play-action" "set!" "begin" "unwind-protect" "car" "action" "redoing?" "old" "let" "redo-list" "not-null?" "when")}
        {Lisp-Entry "play-action" #f 156 26 156 37 ("action")}
        {Lisp-Entry "with-atomic-undo" #f 165 18 165 34 ("update-focus-actions" "get-application" "appl" "register-atomic-actions" "not" "and" "when" "actions" "atomic-actions" "set!" "begin" "unwind-protect" "completed?" "atomic?" "preserved" "let" "proc")}}}})
"Unzip-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "compression" "Unzip-File.jazz"} 1226584780
    {Lisp-Entry "jazz.library.compression.Unzip-File" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "locate-entry" #f 45 20 45 32 ("continuation-return" "extract-name" "=" "when" "size" "entry" "iterate-files" "return" "function" "continuation-capture" "Unzip-File" "new" "unzip" "with-closed" "jar" "name")}
      {Lisp-Entry "Unzip-File" #f 56 7 56 17 ("Object")}
      {Lisp-Entry "Unzip-File" #f 62 7 62 17 ("Object")
        {Lisp-Entry "handle" #f 65 8 65 14 ()}
        {Lisp-Entry "initialize" #f 73 11 73 21 ("destroy-mandatory" "Ansi-String" "parse" "coerce" "unzip-open" "handle" "set!" "initialize" "'initialize" "unimplemented" "nextmethod" "file")}
        {Lisp-Entry "destroy" #f 81 11 81 18 ("nextmethod" "handle" "unzip-close")}
        {Lisp-Entry "iterate-files" #f 91 18 91 31 ("goto-next-file" "while" "get-current-file-info" "size" "filename" "receive" "function" "let" "goto-first-file" "proc")}
        {Lisp-Entry "with-opened-current-file" #f 102 18 102 42 ("close-current-file" "when" "set!" "open-current-file" "begin" "unwind-protect" "opened?" "let" "proc")}
        {Lisp-Entry "read-current-file-content" #f 113 18 113 43 ("read-current-file" "function" "with-opened-current-file" "size:" "Ansi-String" "new" "string" "let" "get-current-file-info" "size" "filename" "receive" "read-current-file-content" "'read-current-file-content" "unimplemented")}
        {Lisp-Entry "read-current-file-block-content" #f 124 18 124 49 ("read-current-file" "function" "with-opened-current-file" "size:" "Heap-Block" "new" "block" "let" "get-current-file-info" "size" "filename" "receive" "read-current-file-block-content" "'read-current-file-block-content" "unimplemented")}
        {Lisp-Entry "read-entry-block-content" #f 135 18 135 42 ("read-current-file-block-content" "locate-file" "entry")}
        {Lisp-Entry "goto-first-file" #f 145 18 145 33 ("handle" "unzip-go-to-first-file")}
        {Lisp-Entry "goto-next-file" #f 149 18 149 32 ("handle" "unzip-go-to-next-file")}
        {Lisp-Entry "locate-file" #f 153 18 153 29 ("error" "not" "Ansi-String" "coerce" "handle" "unzip-locate-file" "or" "unless" "locate-file" "'locate-file" "unimplemented" "error?" "error?:" "filename")}
        {Lisp-Entry "get-current-file-info" #f 161 18 161 39 ("handle" "unzip-get-current-file-info")}
        {Lisp-Entry "open-current-file" #f 165 18 165 35 ("handle" "unzip-open-current-file")}
        {Lisp-Entry "read-current-file" #f 169 18 169 35 ("handle" "unzip-read-current-file" "size" "string")}
        {Lisp-Entry "close-current-file" #f 173 18 173 36 ("handle" "unzip-close-current-file")}}}})
"User-Log"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "log" "User-Log.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.log.User-Log" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "User-Log" #f 54 7 54 15 ("Log-View")
        {Lisp-Entry "external-name" #f 57 16 57 29 ("user-log" "'user-log" "rest")}
        {Lisp-Entry "finish" #f 61 11 61 17 ("separator3" "'separator3" "0" "8" "Dimension" "separator2" "'separator2" "set-size" "separator1" "'separator1" "close" "none" "'none" "set-border-type" "log-border" "'log-border" "splitter" "'splitter" "locate" "zoom" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 75 16 75 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 79 16 79 26 ()}
        {Lisp-Entry "get-tools-view" #f 88 11 88 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 92 11 92 24 ("acquire-focus" "log-tree" "'log-tree" "locate" "tree" "let")}
        {Lisp-Entry "view-entry" #f 102 11 102 21 ("node")}
        {Lisp-Entry "edit-entry" #f 111 11 111 21 ("bell" "user-message" "else" "output-table" "Data-Table" "typecase" "when" "get-entry" "entry" "let" "node")}
        {Lisp-Entry "output-tables" #f 122 11 122 24 ("sql" "'sql" "select-workspace" "get-application" "appl" "when" "output-tables" "get-sql-console-text" "text" "let" "select?" "select?:" "name" "name:" "tables")}
        {Lisp-Entry "output-table" #f 131 11 131 23 ("list" "output-tables" "select?" "select?:" "name" "name:" "table")}}}})
"User-Reporter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "User-Reporter.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.User-Reporter" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "User-Reporter" #f 45 7 45 20 ("Reporter" "Object")
        {Lisp-Entry "section-title" #f 48 11 48 24 ("set-message" "title")}
        {Lisp-Entry "set-message" #f 52 11 52 22 ("get-application" "set-status-message" "msg")}
        {Lisp-Entry "user-message" #f 56 11 56 23 ("format" "apply" "set-message" "rest" "fmt")}
        {Lisp-Entry "set-range" #f 60 11 60 20 ("range")}
        {Lisp-Entry "set-pos" #f 64 11 64 18 ("pos")}
        {Lisp-Entry "delta-pos" #f 68 11 68 20 ("increment")}
        {Lisp-Entry "set-step" #f 72 11 72 19 ("increment")}
        {Lisp-Entry "step-it" #f 76 11 76 18 ()}
        {Lisp-Entry "set-done" #f 80 11 80 19 ()}
        {Lisp-Entry "disable-cancel" #f 84 11 84 25 ()}
        {Lisp-Entry "cancel-requested?" #f 88 11 88 28 ()}
        {Lisp-Entry "test-cancelled" #f 92 11 92 25 ()}}}})
"Validate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "validate" "Validate.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.validate.Validate" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Validate" #f 43 7 43 15 ("Process")
        {Lisp-Entry "start-process" #f 46 11 46 24 ("exit-process" "Validation-Suite" "new" "validate")}}}})
"Validation-Suite"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "validate" "Validation-Suite.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.validate.Validation-Suite" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Validation-Suite" #f 46 7 46 23 ("Object")
        {Lisp-Entry "Classes" #f 49 14 49 21 ("Vector-Tester" "Variable-Tester" "Values-Tester" "Thread-Tester" "Table-Tester" "Syntax-Tester" "Symbol-Tester" "Structure-Tester" "String-Tester" "Sequence-Tester" "Scheme-Tester" "Reader-Tester" "Pathname-Tester" "Number-Tester" "List-Tester" "Iterator-Tester" "Function-Tester" "Format-Tester" "Form-Tester" "Factory-Tester" "Explorer-Tester" "Error-Tester" "Enumeration-Tester" "Designer-Tester" "Debugger-Tester" "Control-Tester" "Component-Tester" "Collector-Tester" "Char-Tester" "Catalog-Tester" "Branch-Tester" "Boolean-Tester" "Binding-Tester" "Array-Tester")}
        {Lisp-Entry "failed-assertions" #f 87 8 87 25 ()}
        {Lisp-Entry "validate" #f 90 18 90 26 ("report-results" "validate-suite" "report-success?" "report-success?:" "test" "test:")}
        {Lisp-Entry "validate-suite" #f 95 11 95 25 ("user-message" "list" "pair?" "all-tester-classes" "eq?" "if" "invoke-tester" "for-each" "List-Factory" "new" "failed-assertions" "set!" "test")}
        {Lisp-Entry "invoke-tester" #f 101 11 101 24 ("test" "user-message" "self" "suite:" "new" "tester" "let" "class")}
        {Lisp-Entry "all-tester-classes" #f 107 11 107 29 ("Classes" "autoreload" "map")}
        {Lisp-Entry "assertion-failed" #f 111 18 111 34 ("list" "failed-assertions" "put" "form" "subtitle" "title")}
        {Lisp-Entry "report-results" #f 115 11 115 25 ("get-output-string" "message" "subtitle" "title" "bind" "info" "function" "for-each" "format" "open-output-string" "printer" "message-box" "when" "null?" "if" "failed-assertions" "get-output" "failed" "let" "report-success?" "report-success?:")}}}})
"Value-Domain"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "domain" "Value-Domain.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.domain.Value-Domain" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Value-Domain" #f 45 7 45 19 ("Domain")
        {Lisp-Entry "present" #f 53 11 53 18 (":reader" "->string" "value")}}}})
"Value-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Value-Menu.jazz"} 1226584777
    {Lisp-Entry "jazz.designer.row.Value-Menu" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Value-Menu" #f 46 7 46 17 ("Context-Menu")
        {Lisp-Entry "value-row" #f 49 12 49 21 ("set-value-row" "get-value-row")}
        {Lisp-Entry "get-value-row" #f 61 18 61 31 ("value-row")}
        {Lisp-Entry "set-value-row" #f 65 18 65 31 ("value-row" "set!" "value")}
        {Lisp-Entry "on-show" #f 75 11 75 18 ("value-row" "show-property" "evt")}
        {Lisp-Entry "on-revert" #f 80 11 80 20 ("value-row" "revert-property" "evt")}}}})
"Value-Row"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "row" "Value-Row.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.row.Value-Row" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Value-Row" #f 50 7 50 16 ("Tree-Row")
        {Lisp-Entry "property_" #f 54 12 54 21 ("set-property" "get-property")}
        {Lisp-Entry "initialize" #f 55 27 55 37 ("set-value" "get-value")}
        {Lisp-Entry "nullable?" #f 56 12 56 21 ("set-nullable?" "get-nullable?")}
        {Lisp-Entry "modified?" #f 57 12 57 21 ("set-modified?" "get-modified?")}
        {Lisp-Entry "limit-to-list?" #f 58 12 58 26 ("set-limit-to-list?" "get-limit-to-list?")}
        {Lisp-Entry "domain" #f 61 8 61 14 ()}
        {Lisp-Entry "editor" #f 62 8 62 14 ()}
        {Lisp-Entry "edited?" #f 63 8 63 15 ()}
        {Lisp-Entry "initialize" #f 71 11 71 21 ("limit-to-list?~self" "nullable?~self" "value~self" "property_~self" "set!" "nextmethod" "apply" "others" "limit-to-list?" "nullable?" "value" "property" "bind-keywords" "rest")}
        {Lisp-Entry "get-filter-name" #f 85 31 85 46 ("properties" "'properties")}
        {Lisp-Entry "get-filter-rank" #f 89 31 89 46 ("1")}
        {Lisp-Entry "get-filter-image" #f 93 31 93 47 ("Bitmap-Resource")}
        {Lisp-Entry "get-property" #f 102 18 102 30 ("property_")}
        {Lisp-Entry "set-property" #f 106 18 106 30 ("property_" "set!" "prop")}
        {Lisp-Entry "get-title" #f 110 18 110 27 ("get-title" "children" "car" "node" "let")}
        {Lisp-Entry "set-title" #f 115 18 115 27 ("set-title" "children" "car" "node" "let" "title")}
        {Lisp-Entry "get-value" #f 120 18 120 27 ("value")}
        {Lisp-Entry "set-value" #f 124 18 124 27 ("value" "set!" "object")}
        {Lisp-Entry "get-nullable?" #f 128 18 128 31 ("nullable?")}
        {Lisp-Entry "set-nullable?" #f 132 18 132 31 ("nullable?" "set!" "value")}
        {Lisp-Entry "get-modified?" #f 136 18 136 31 ("modified?")}
        {Lisp-Entry "set-modified?" #f 140 18 140 31 ("modified?" "set!" "flag")}
        {Lisp-Entry "get-limit-to-list?" #f 144 18 144 36 ("limit-to-list?")}
        {Lisp-Entry "set-limit-to-list?" #f 148 18 148 36 ("limit-to-list?" "set!" "value")}
        {Lisp-Entry "get-editor" #f 152 18 152 28 ("editor")}
        {Lisp-Entry "set-editor" #f 156 18 156 28 ("editor" "set!" "edt")}
        {Lisp-Entry "get-client" #f 160 18 160 28 ("get-tree" "get-client")}
        {Lisp-Entry "auto-inplace?" #f 169 11 169 24 ()}
        {Lisp-Entry "auto-expand" #f 173 11 173 22 ("edit-row" "function" "with-update-locked" "get-tree" "tree" "let" "nextmethod")}
        {Lisp-Entry "auto-select" #f 181 11 181 22 ("select-editor" "nextmethod")}
        {Lisp-Entry "auto-collapse" #f 186 11 186 24 ("end-row-edition" "in-edition?" "when" "nextmethod")}
        {Lisp-Entry "auto-collapsable?" #f 192 11 192 28 ("in-edition?")}
        {Lisp-Entry "enter-value" #f 201 26 201 37 ("get-tree" "get-card" "enter-value" "update" "property_" "not" "if" "set-modified?" "value" "set!" "v")}
        {Lisp-Entry "enter-edited-value" #f 209 18 209 36 ("throw-cancel" "get-edited-value" "enter-value" "validate-value" "if")}
        {Lisp-Entry "default-value" #f 215 26 215 39 ()}
        {Lisp-Entry "present" #f 224 26 224 33 (":reader" "->string" "value")}
        {Lisp-Entry "get-edited-value" #f 233 26 233 42 ("editor" "get-string-content" "read-string-element")}
        {Lisp-Entry "set-edited-value" #f 237 26 237 42 ("present" "editor" "set-string-content" "value")}
        {Lisp-Entry "get-edited-modified?" #f 241 26 241 46 ("editor" "get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" #f 245 26 245 46 ("editor" "get-controller" "set-modified?" "flag")}
        {Lisp-Entry "show-cursor" #f 249 26 249 37 ("editor" "show-text-cursor")}
        {Lisp-Entry "validate-value" #f 253 18 253 32 ("get-edited-value" "revert-property" "no" "get-end" "end:" "get-start" "start:" "focus-editor" "yes" "no:" "yes:" "question" "'question" "type:" "get-message" "message-box" "case" "err" "Parse-Error" "catch")}
        {Lisp-Entry "edit-row" #f 266 18 266 26 ("edited?" "set!" "edit")}
        {Lisp-Entry "end-row-edition" #f 271 18 271 33 ("edited?" "set!" "end-edition")}
        {Lisp-Entry "in-edition?" #f 276 26 276 37 ("edited?")}
        {Lisp-Entry "edit" #f 280 26 280 30 ("edit-in-cell")}
        {Lisp-Entry "end-edition" #f 284 26 284 37 ("close-editor" "save-edition")}
        {Lisp-Entry "save-edition" #f 289 26 289 38 ("set-edited-modified?" "enter-edited-value" "get-edited-modified?" "when")}
        {Lisp-Entry "close-editor" #f 295 26 295 38 ("close-in-cell-editor")}
        {Lisp-Entry "close-editor?" #f 299 26 299 39 ()}
        {Lisp-Entry "select-editor" #f 303 26 303 39 ("focus-editor" "edit-in-cell" "in-cell-edition?" "not" "when" "get-tree" "tree" "let")}
        {Lisp-Entry "in-cell-edition?" #f 310 18 310 34 ("1" "Cell" "new" "get-edited-cell" "nu=?" "self" "row-rank" "row" "in-edition?" "and" "get-tree" "tree" "let")}
        {Lisp-Entry "editor-up-arrow" #f 322 18 322 33 ("NoModifiers" "get-tree" "up-arrow-press")}
        {Lisp-Entry "editor-down-arrow" #f 326 18 326 35 ("NoModifiers" "get-tree" "down-arrow-press")}
        {Lisp-Entry "editor-tab" #f 330 18 330 28 ("down-arrow-press" "get-tree" "up-arrow-press" "shift-down?" "if" "NoModifiers" "modifiers" "let")}
        {Lisp-Entry "editor-return" #f 337 18 337 31 (".150" "duration:" "save-edition" "set-edited-modified?" "function" ":wait" "with-cursor" "show-cursor")}
        {Lisp-Entry "editor-focus-validate" #f 346 18 346 39 ("validate-value" "get-edited-modified?" "limit-to-list?" "if" "view")}
        {Lisp-Entry "editor-focus-delegate" #f 354 18 354 39 ("invalidate-drawing" "select-all?:" "focus-editor" "self" "get-tree" "auto-expand/collapse" "in-edition?" "not" "auto-inplace?" "and" "when")}
        {Lisp-Entry "editor-focus-lose" #f 361 18 361 35 ("close-auto-expanded" "invalidate-drawing" "get-player" "different-overlapped?" "editor" "and" "if" "get-tree" "eq?" "unless" "view")}
        {Lisp-Entry "edit-in-cell" #f 374 26 374 38 ("set-client" "focus-editor" "close-editor?" "close-editor?:" "editor:" "edit-cell" "value" "set-edited-value" "set-parent" "new-editor" "set!" "editor" "unless" "fill" "'fill" "set-layout-type" "get-content" "content" "hscroll?:" "vscroll?:" "parent:" "Scroller-View" "scroller" "Dark-Red" "name:" "Color" "border-color:" "solid" "'solid" "border-type:" "Border-View" "border" "1" "self" "row-rank" "Cell" "new" "cell" "get-tree" "tree" "let*")}
        {Lisp-Entry "close-in-cell-editor" #f 391 18 391 38 ("editor" "set!" "close-editor?" "when" "end-edition" "get-tree" "tree" "let")}
        {Lisp-Entry "focus-editor" #f 398 26 398 38 ("Range" "new" "set-selection" "else" "set-caret" "select-all" "not" "cond" "acquire-focus" "when" "focused-editor" "editor" "let" "select-all?" "select-all?:" "end" "end:" "start" "start:")}
        {Lisp-Entry "focused-editor" #f 407 26 407 40 ("editor")}
        {Lisp-Entry "edit-in-row" #f 416 18 416 29 ("expand/collapse" "set-client" "set-editor" "get-content" "set-parent" "new-editor" "set!" "editor" "unless" "hscroll?:" "vscroll?:" "Scroller-View" "scroller" "Dark-Red" "name:" "Color" "border-color:" "solid" "'solid" "border-type:" "parent:" "Border-View" "new" "border" "editor-height" "row-height:" "self" "father:" "Editor-Row" "class:" "add-row" "subrow" "get-tree" "tree" "let*")}
        {Lisp-Entry "install-container" #f 429 29 429 46 ()}
        {Lisp-Entry "close-in-row-editor" #f 433 18 433 37 ("set-parent" "close" "close-editor?" "if" "get-editor" "editor" "remove-row" "self" "expand/collapse" "when" "get-sons" "first" "editor-row" "get-tree" "tree" "let")}
        {Lisp-Entry "editor-height" #f 445 29 445 42 ("21")}
        {Lisp-Entry "new-editor" #f 449 29 449 39 ("top-padding:" "1" "left-padding:" "self" "value-row:" "editor-class" "new")}
        {Lisp-Entry "editor-class" #f 456 29 456 41 ("Value-Text-View")}
        {Lisp-Entry "edit-in-list" #f 465 11 465 23 ("self" "expand/collapse" "get-list-value" "get-subrow-class" "add-value" "subvalue" "function" "for-each" "get-tree" "tree" "let")}
        {Lisp-Entry "get-subrow-class" #f 473 29 473 45 ("Value-Row")}
        {Lisp-Entry "close-in-list-editor" #f 477 21 477 41 ("remove-every-son" "self" "expand/collapse" "get-tree" "tree" "let")}
        {Lisp-Entry "get-list-edited-value" #f 483 11 483 32 ("get-subvalue" "subrow" "function" "get-sons" "accumulate")}
        {Lisp-Entry "get-list-edited-modified?" #f 489 21 489 46 ("get-sons" "get-modified?" "subrow" "function" "some?" "modified?" "or")}
        {Lisp-Entry "set-list-edited-modified?" #f 496 21 496 46 ("set-modified?" "subrow" "function" "get-sons" "iterate" "modified?" "set!" "flag")}
        {Lisp-Entry "get-subvalue" #f 503 26 503 38 ("get-value")}
        {Lisp-Entry "get-list-value" #f 507 29 507 43 ("value")}
        {Lisp-Entry "add-value" #f 511 29 511 38 ("class" "value")}
        {Lisp-Entry "add-row" #f 515 18 515 25 ("row:" "father:" "add-row" "set-title" "set-value" "present" "presented" "default-value" "unspecified" "'unspecified" "eq?" "if" "list" "children:" "17" "row-height:" "parent:" "row" "Tree-Label" "label" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "node" "get-tree" "tree" "let*" "user-data" "user-data:" "Value-Row" "class" "class:" "value" "title" "father")}
        {Lisp-Entry "Modified-Color" #f 532 14 532 28 ("Dark-Red" "name:" "Color")}
        {Lisp-Entry "update" #f 536 26 536 32 ("update-in-cell" "value")}
        {Lisp-Entry "update-in-cell" #f 540 11 540 25 ("invalidate-cell" "set-edited-modified?" "set-title" "set-property-modified?" "set-value" "get-cell-data" "get-preserved-data" "if" "data" "get-cell-editor" "editor" "in-edition?" "edited?" "1" "Cell" "new" "cell" "self" "row-rank" "rank" "present" "title" "get-tree" "tree" "let*" "value")}
        {Lisp-Entry "set-property-modified?" #f 556 11 556 33 ("invalidate-cell" "set-color" "Modified-Color" "if" "color" "get-cell-data" "node" "0" "Cell" "new" "cell" "self" "row-rank" "rank" "get-tree" "tree" "let*" "property_" "when" "flag")}
        {Lisp-Entry "edit-definitions" #f 572 26 572 42 ("bell")}
        {Lisp-Entry "double-click" #f 581 11 581 23 ("self" "auto-expand/collapse" "get-tree" "tree" "let" "pos")}
        {Lisp-Entry "context-menu" #f 586 11 586 23 ("track-popup-menu" "update-menu" "self" "value-row:" "new" "menu" "bell" "not" "if" "get-menu-class" "class" "function" "with-context-click" "position" "nu+" "get-tree" "tree" "let" "pos")}
        {Lisp-Entry "get-menu-class" #f 599 29 599 43 ("Value-Menu")}
        {Lisp-Entry "update-menu" #f 603 11 603 22 ("layout-menu" "Separator-Item" "F2" "shortcut:" "on-rename-item" "'on-rename-item" "auto-number?" "unless" "on-remove-item" "'on-remove-item" "method-name:" "self" "target:" "Event-Handler" "action-handler:" "Bitmap-Resource" "icon:" "title:" "revert" "'revert" "before:" "parent:" "Label-Item" "new" "List-Row" "father" "is?" "when" "menu")}
        {Lisp-Entry "on-remove-item" #f 612 18 612 32 ("self" "father" "remove-item" "evt")}
        {Lisp-Entry "on-rename-item" #f 616 18 616 32 ("self" "father" "rename-item" "evt")}
        {Lisp-Entry "show-property" #f 620 18 620 31 ("property_" "field-name" "set-showed-property" "View-Editor" "is-not?" "get-editor" "editor" "let" "bell" "not" "if" "get-surrogate" "surrogate" "get-client" "client" "let*")}
        {Lisp-Entry "revert-property" #f 631 18 631 33 ("focus-editor" "set-modified?" "set-property-modified?" "set-edited-modified?" "value" "set-edited-value")}
        {Lisp-Entry "draw-cell" #f 644 26 644 35 ("0" "1" "draw-at" "height" "width" "cell" "row" "column" "value" "context" "surface")}}}})
"Value-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "Value-Text-View.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.Value-Text-View" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "Value-Text-View" #f 49 7 49 22 ("top-padding:" "1" "left-padding:" "show-unfocused-selection?:" "accepts-returns?:" "Label" "Font" "font:" "Default" "name:" "Text-Style" "default-style:" "Property-Editor" "IDE-Text-View")
        {Lisp-Entry "value-row" #f 52 12 52 21 ("set-value-row" "get-value-row")}
        {Lisp-Entry "manager" #f 55 8 55 15 ()}
        {Lisp-Entry "get-value-row" #f 67 18 67 31 ("value-row")}
        {Lisp-Entry "set-value-row" #f 71 18 71 31 ("value-row" "set!" "value")}
        {Lisp-Entry "get-manager" #f 80 11 80 22 ("manager")}
        {Lisp-Entry "set-manager" #f 84 11 84 22 ("manager" "set!" "value")}
        {Lisp-Entry "get-edited-value" #f 88 11 88 27 ("get-string-content" "read-string-element")}
        {Lisp-Entry "set-edited-value" #f 92 11 92 27 ("present-edited-value" "set-string-content" "value")}
        {Lisp-Entry "present-edited-value" #f 96 11 96 31 (":reader" "->string" "value")}
        {Lisp-Entry "get-edited-modified?" #f 100 11 100 31 ("get-controller" "get-modified?")}
        {Lisp-Entry "set-edited-modified?" #f 104 11 104 31 ("get-controller" "set-modified?" "flag")}
        {Lisp-Entry "up-arrow-move" #f 113 11 113 24 ("editor-up-arrow" "value-row" "manager" "either" "target" "let" "scroll?" "extend?")}
        {Lisp-Entry "down-arrow-move" #f 118 11 118 26 ("editor-down-arrow" "value-row" "manager" "either" "target" "let" "scroll?" "extend?")}
        {Lisp-Entry "tab-press" #f 123 11 123 20 ("value-row" "editor-tab" "manager" "end-completion" "has-completion?" "if" "modifiers" "key")}
        {Lisp-Entry "return-press" #f 131 11 131 23 ("value-row" "editor-return" "manager" "if" "nextmethod" "key")}
        {Lisp-Entry "document-menu" #f 138 11 138 24 ()}
        {Lisp-Entry "focus-validate" #f 148 11 148 25 ("value-row" "editor-focus-validate" "view")}
        {Lisp-Entry "focus-lose" #f 152 11 152 21 ("value-row" "editor-focus-lose" "manager" "if" "nextmethod" "view")}
        {Lisp-Entry "focus-master" #f 159 11 159 23 ("value-row" "get-tree")}}}})
"Values-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Values-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Values-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Values-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-values" "invoke")}
        {Lisp-Entry "test-values" #f 61 11 61 22 ()}}}})
"Variable-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Variable-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Variable-Entry" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Variable-Entry" #f 45 7 45 21 ("Definition-Entry")
        {Lisp-Entry "construct-literal" #f 49 16 49 33 ("self" "new" "references" "column" "line" "type" "name" "modifiers" "context")}
        {Lisp-Entry "print-catalog" #f 53 11 53 24 ("references" "column" "line" "type" "name" "modifiers" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-image" #f 60 11 60 20 ("Bitmap-Resource")}}}})
"Variable-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Variable-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Variable-Tester" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "Variable-Tester" #f 45 7 45 22 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-free?" "invoke")}
        {Lisp-Entry "test-free?" #f 61 11 61 21 ()}}}})
"Variables-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debugger" "Variables-View.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debugger.Variables-View" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Variables-View" #f 50 7 50 21 ("303" "value" "130" "width:" "name" "row" "selection-mode:" "multiple-selection?:" "variables" "content" "flat?:" "hscroll?:" "vscroll?:" "scroller" "name:" "fill" "layout-type:" "Layout-View")
        {Lisp-Entry "process" #f 53 12 53 19 ("set-process" "get-process")}
        {Lisp-Entry "frame" #f 54 12 54 17 ("set-frame" "get-frame")}
        {Lisp-Entry "external-name" #f 68 16 68 29 ("variables-view" "'variables-view" "rest")}
        {Lisp-Entry "host-icon" #f 77 16 77 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 81 16 81 26 ()}
        {Lisp-Entry "focus-default" #f 90 11 90 24 ("acquire-focus" "variables" "'variables" "locate" "tree" "let")}
        {Lisp-Entry "install" #f 100 11 100 18 ("destroy-mandatory" "add-debugger-listener" "on-frame-change" "'on-frame-change" "method-name:" "self" "target:" "Event-Handler" "new" "listener" "let" "nextmethod" "rest")}
        {Lisp-Entry "destroy" #f 107 11 107 18 ("nextmethod" "self" "remove-debugger-listener")}
        {Lisp-Entry "get-process" #f 117 18 117 29 ("variables" "'variables" "locate" "get-process")}
        {Lisp-Entry "set-process" #f 121 18 121 29 ("variables" "'variables" "locate" "set-process" "process")}
        {Lisp-Entry "get-frame" #f 125 18 125 27 ("frame")}
        {Lisp-Entry "set-frame" #f 129 18 129 27 (":frame" "cons" "essay" "variables" "'variables" "locate" "set-client" "frame" "set!" "frm")}
        {Lisp-Entry "resize" #f 139 11 139 17 ("scroller" "'scroller" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-frame-change" #f 144 18 144 33 ("else" "Frame-Snapshot" "typecase" "set-frame" "set-process" "frame:" "get-property" "frame" "let" "evt")}}
      {Lisp-Entry "Variables-Inspector" #f 163 7 163 26 ("Inspector")
        {Lisp-Entry "inspect" #f 166 11 166 18 ("nextmethod" "else" "inspect-slots" "context:" "inspect-frame" "frame:" "case" "get-variables" "list" "get-variable-value" "value" "get-variable-name" "name" "let" "variable" "function" "map" "Debugged-Frame" "is?" "if" "kind" "data")}
        {Lisp-Entry "inspect-frame" #f 179 11 179 24 ("length" "naturals" "0" "list" "value" "name" "bind" "pair?" "if" "rank" "parameter" "function" "map" "get-parameters" "parameters" "let" "Frame-Snapshot" "typecase" "frame")}}}})
"Vector-Tester"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "suite" "Vector-Tester.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.suite.Vector-Tester" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Vector-Tester" #f 45 7 45 20 ("title:" "Tester")
        {Lisp-Entry "test" #f 52 11 52 15 ("test-vector" "invoke")}
        {Lisp-Entry "test-vector" #f 61 11 61 22 ()}}}})
"Version"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "utility" "Version.jazz"} 1226584782
    {Lisp-Entry "jazz.library.utility.Version" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Version" #f 43 7 43 14 ("Object")
        {Lisp-Entry "major" #f 46 8 46 13 ()}
        {Lisp-Entry "minor" #f 47 8 47 13 ()}
        {Lisp-Entry "stage" #f 48 8 48 13 ()}
        {Lisp-Entry "release" #f 49 8 49 15 ()}
        {Lisp-Entry "revision" #f 50 8 50 16 ()}
        {Lisp-Entry "initialize" #f 53 11 53 21 ("revision~self" "release~self" "stage~self" "minor~self" "major~self" "set!" "nextmethod" "revision" "release" "stage" "minor" "major")}
        {Lisp-Entry "compare-object" #f 62 11 62 25 (":equal" "get-revision" "revision" "get-release" "release" "get-minor" "minor" "get-major" "major" "either" "else" ":greater" ">" ":less" "<" "cond" "y" "x" "function" "try" "let" ":incompatible" "Version" "is-not?" "if" "target")}
        {Lisp-Entry "fold-literal" #f 77 11 77 23 ("revision" ",revision" "',revision" "release" ",release" "',release" "stage" ",stage" "',stage" "minor" ",minor" "',minor" "major" ",major" "',major" "Version" "new")}
        {Lisp-Entry "print" #f 86 11 86 16 ("revision" "0" "release" "/=" "or" "stage" "minor" "major" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "present" #f 96 18 96 25 ("else" "beta" "alpha" "stage" "case" "revision" "0" "release" "=" "and" "if" "minor" "major" "format")}
        {Lisp-Entry "get-major" #f 118 18 118 27 ("major")}
        {Lisp-Entry "get-minor" #f 122 18 122 27 ("minor")}
        {Lisp-Entry "get-stage" #f 126 18 126 27 ("stage")}
        {Lisp-Entry "get-release" #f 130 18 130 29 ("release")}
        {Lisp-Entry "get-revision" #f 134 18 134 30 ("revision")}}}})
"Vertical-Line"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Vertical-Line.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Vertical-Line" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Vertical-Line" #f 46 7 46 20 ("View")
        {Lisp-Entry "default-size" #f 49 11 49 23 ("100" "8" "Dimension")}
        {Lisp-Entry "draw" #f 58 11 58 15 ("left" "edges:" "sunken" "'sunken" "outer:" "raised" "'raised" "inner:" "2" "0" "Rect" "new" "draw-edge" "Medium" "name:" "Color" "color" "get-height" "height" "let" "lv" "lh" "context" "surface")}}}})
"View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "View.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.View" #f 38 9 38 26 ("jazz")
      {Lisp-Entry "View" #f 58 7 58 11 ("Context-Provider" "Actionable" "Drawing")
        {Lisp-Entry "title" #f 61 12 61 17 ("set-title" "get-title")}
        {Lisp-Entry "font" #f 62 12 62 16 ("set-font" "get-font" "Label" "name:" "Font")}
        {Lisp-Entry "background" #f 63 12 63 22 ("set-background" "get-background")}
        {Lisp-Entry "auto-size?" #f 64 12 64 22 ("set-auto-size?" "get-auto-size?")}
        {Lisp-Entry "tooltip?" #f 65 12 65 20 ("set-tooltip?" "get-tooltip?")}
        {Lisp-Entry "tooltip-text" #f 66 12 66 24 ("set-tooltip-text" "get-tooltip-text")}
        {Lisp-Entry "draggable?" #f 67 12 67 22 ("set-draggable?" "get-draggable?")}
        {Lisp-Entry "drag-tolerance" #f 68 12 68 26 ("set-drag-tolerance" "get-drag-tolerance" "5")}
        {Lisp-Entry "enabled?" #f 69 12 69 20 ("set-enabled?" "get-enabled?")}
        {Lisp-Entry "action" #f 70 12 70 18 ("set-action" "get-action")}
        {Lisp-Entry "outline-view" #f 71 12 71 24 ("set-outline-view" "get-outline-view")}
        {Lisp-Entry "offscreen?" #f 72 12 72 22 ("set-offscreen?" "get-offscreen?")}
        {Lisp-Entry "layer" #f 74 12 74 17 ("set-layer" "get-layer" "0")}
        {Lisp-Entry "effect" #f 75 12 75 18 ("set-effect" "get-effect")}
        {Lisp-Entry "user-data" #f 76 12 76 21 ("set-user-data" "get-user-data")}
        {Lisp-Entry "cursor-update-handler" #f 79 12 79 33 ("set-cursor-update-handler" "get-cursor-update-handler")}
        {Lisp-Entry "mouse-enter-handler" #f 80 12 80 31 ("set-mouse-enter-handler" "get-mouse-enter-handler")}
        {Lisp-Entry "mouse-hover-handler" #f 81 12 81 31 ("set-mouse-hover-handler" "get-mouse-hover-handler")}
        {Lisp-Entry "mouse-leave-handler" #f 82 12 82 31 ("set-mouse-leave-handler" "get-mouse-leave-handler")}
        {Lisp-Entry "mouse-down-handler" #f 83 12 83 30 ("set-mouse-down-handler" "get-mouse-down-handler")}
        {Lisp-Entry "mouse-move-handler" #f 84 12 84 30 ("set-mouse-move-handler" "get-mouse-move-handler")}
        {Lisp-Entry "mouse-up-handler" #f 85 12 85 28 ("set-mouse-up-handler" "get-mouse-up-handler")}
        {Lisp-Entry "drag-move-handler" #f 86 12 86 29 ("set-drag-move-handler" "get-drag-move-handler")}
        {Lisp-Entry "drag-up-handler" #f 87 12 87 27 ("set-drag-up-handler" "get-drag-up-handler")}
        {Lisp-Entry "double-click-handler" #f 88 12 88 32 ("set-double-click-handler" "get-double-click-handler")}
        {Lisp-Entry "current-drop-handler" #f 89 12 89 32 ("set-current-drop-handler" "get-current-drop-handler")}
        {Lisp-Entry "receive-drop-handler" #f 90 12 90 32 ("set-receive-drop-handler" "get-receive-drop-handler")}
        {Lisp-Entry "receive-files-handler" #f 91 12 91 33 ("set-receive-files-handler" "get-receive-files-handler")}
        {Lisp-Entry "context-menu-handler" #f 92 12 92 32 ("set-context-menu-handler" "get-context-menu-handler")}
        {Lisp-Entry "key-press-handler" #f 93 12 93 29 ("set-key-press-handler" "get-key-press-handler")}
        {Lisp-Entry "arrow-press-handler" #f 94 12 94 31 ("set-arrow-press-handler" "get-arrow-press-handler")}
        {Lisp-Entry "escape-press-handler" #f 95 12 95 32 ("set-escape-press-handler" "get-escape-press-handler")}
        {Lisp-Entry "backspace-press-handler" #f 96 12 96 35 ("set-backspace-press-handler" "get-backspace-press-handler")}
        {Lisp-Entry "return-press-handler" #f 97 12 97 32 ("set-return-press-handler" "get-return-press-handler")}
        {Lisp-Entry "tab-press-handler" #f 98 12 98 29 ("set-tab-press-handler" "get-tab-press-handler")}
        {Lisp-Entry "content-change-handler" #f 99 12 99 34 ("set-content-change-handler" "get-content-change-handler")}
        {Lisp-Entry "selection-handler" #f 100 12 100 29 ("set-selection-handler" "get-selection-handler")}
        {Lisp-Entry "action-handler" #f 101 12 101 26 ("set-action-handler" "get-action-handler")}
        {Lisp-Entry "player" #f 104 8 104 14 ()}
        {Lisp-Entry "offscreen" #f 105 8 105 17 ()}
        {Lisp-Entry "scroller" #f 106 8 106 16 ()}
        {Lisp-Entry "renderer" #f 107 8 107 16 ()}
        {Lisp-Entry "scaled?" #f 108 8 108 15 ()}
        {Lisp-Entry "scaling" #f 109 8 109 15 ("1.0")}
        {Lisp-Entry "previous-size" #f 110 8 110 21 ()}
        {Lisp-Entry "update-locked?" #f 111 8 111 22 ()}
        {Lisp-Entry "scrollee-locked?" #f 112 8 112 24 ()}
        {Lisp-Entry "modified?" #f 113 8 113 17 ()}
        {Lisp-Entry "hover-history" #f 114 8 114 21 ()}
        {Lisp-Entry "hover-pulse" #f 115 8 115 19 ()}
        {Lisp-Entry "tools-info" #f 116 8 116 18 ()}
        {Lisp-Entry "inhibit-context-menu?" #f 119 14 119 35 ()}
        {Lisp-Entry "shortcut-update" #f 122 11 122 26 ("action-item")}
        {Lisp-Entry "conclude" #f 130 11 130 19 ("layout-scrollee" "layout" "nextmethod" "rest")}
        {Lisp-Entry "print" #f 136 11 136 16 ("size" "position" "name" "title" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "close-with-confirm" #f 147 26 147 44 ("close")}
        {Lisp-Entry "destroy" #f 151 11 151 18 ("invalidate-rect" "View" "is?" "player" "set!" "view-destroyed" "get-host" "host" "nextmethod" "call-mouse-leave" "set-mouse-in" "get-mouse-in" "self" "eq?" "when" "get-rect" "rect" "parent" "let")}
        {Lisp-Entry "component-alias" #f 171 11 171 26 ("nextmethod" "else" "popup-initiator" ":initiator" "get-root" ":root" "get-guest" ":guest" "get-host" ":host" "case" "name")}
        {Lisp-Entry "get-player" #f 185 11 185 21 ("get-player" "parent" "essay" "set!" "player" "unless")}
        {Lisp-Entry "set-player" #f 191 18 191 28 ("set-player" "view" "function" "for-each-view" "call-mouse-leave" "set-mouse-in" "get-mouse-in" "self" "eq?" "not" "and" "when" "player" "set!" "plr")}
        {Lisp-Entry "in-player?" #f 201 18 201 28 ("get-player" "boolean")}
        {Lisp-Entry "get-overlapped" #f 205 18 205 32 ("get-overlapped" "when" "get-player" "player" "let")}
        {Lisp-Entry "different-overlapped?" #f 211 18 211 39 ("get-overlapped" "neq?" "not" "or" "window")}
        {Lisp-Entry "add-to-favorites" #f 220 26 220 42 ()}
        {Lisp-Entry "get-host" #f 229 26 229 34 ("Host-View" "find-ascendant")}
        {Lisp-Entry "get-guest" #f 233 26 233 35 ("get-host" "get-guest")}
        {Lisp-Entry "install-in-host" #f 237 26 237 41 ("host")}
        {Lisp-Entry "uninstall-from-host" #f 241 26 241 45 ("host")}
        {Lisp-Entry "save-guest" #f 245 26 245 36 ("session" "designer")}
        {Lisp-Entry "add-guest-preferences" #f 249 18 249 39 ("select?:" "design-events?:" "add-child" "cons" "initargs:" "self" "class-of" "type-name" "name:" "get-size" "size:" "get-position" "position:" "Guest-Preferences" "new" "pref" "get-host" "host" "let*" "add-guest-preferences" "'add-guest-preferences" "unimplemented" "initargs" "session" "designer")}
        {Lisp-Entry "host-activate" #f 263 26 263 39 ()}
        {Lisp-Entry "host-deactivate" #f 267 26 267 41 ()}
        {Lisp-Entry "focus-default" #f 271 26 271 39 ("acquire-focus")}
        {Lisp-Entry "get-text-view" #f 275 26 275 39 ()}
        {Lisp-Entry "frame-guest?" #f 279 18 279 30 ("self" "get-guest" "eq?" "Frame-Host" "is?" "and" "get-host" "host" "let")}
        {Lisp-Entry "dialog-class" #f 290 34 290 46 ("Dialog")}
        {Lisp-Entry "frame-class" #f 294 34 294 45 ("Frame-Host")}
        {Lisp-Entry "palette-class" #f 298 34 298 47 ("Palette")}
        {Lisp-Entry "docked-class" #f 302 34 302 46 ("Docked-Host")}
        {Lisp-Entry "toolbar-class" #f 306 34 306 47 ("Toolbar-Host")}
        {Lisp-Entry "host-icon" #f 310 34 310 43 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 314 34 314 44 ()}
        {Lisp-Entry "host-position" #f 318 34 318 47 ()}
        {Lisp-Entry "host-size" #f 322 34 322 43 ()}
        {Lisp-Entry "host-workspaces" #f 326 26 326 41 ()}
        {Lisp-Entry "effective-host-workspaces" #f 330 18 330 43 ("assq" "essay" "either" "filter-inexistant-workspaces" "error?:" "external-name" "external" "get-associations" "associations" "workspaces" "'workspaces" "get-preferences" "pref" "let*" "host-workspaces")}
        {Lisp-Entry "filter-inexistant-workspaces" #f 341 11 341 39 ("memq?" "name" "function" "collect-if" "get-children" "component-name" "map" "names" "let" "workspaces" "pref")}
        {Lisp-Entry "for-each-palette" #f 348 18 348 34 ("children" "else" "get-children" "Pad-View" "for-each-palette" "Splitter-View" "is?" "cond" "child" "function" "for-each" "proc")}
        {Lisp-Entry "find-palette" #f 359 18 359 30 ("continuation-return" "get-guest" "view" "let" "Host-View" "is?" "when" "palette" "for-each-palette" "return" "function" "continuation-capture" "type")}
        {Lisp-Entry "find-host" #f 371 18 371 27 ("children" "get-guest" "Host-View" "is?" "and" "view" "function" "find-if" "guest-type")}
        {Lisp-Entry "find-guest" #f 378 18 378 28 ("get-guest" "when" "find-host" "host" "let" "guest-type")}
        {Lisp-Entry "collect-guest" #f 384 18 384 31 ("children" "get-guest" "guest" "let" "Host-View" "is?" "when" "view" "function" "collect" "guest-type")}
        {Lisp-Entry "get-frame" #f 393 11 393 20 ("get-host")}
        {Lisp-Entry "guest-icon" #f 397 26 397 36 ("self" "class-of" "host-icon")}
        {Lisp-Entry "focus-activate" #f 401 26 401 40 ()}
        {Lisp-Entry "focus-deactivate" #f 405 26 405 42 ()}
        {Lisp-Entry "maximize" #f 409 26 409 34 ()}
        {Lisp-Entry "restore" #f 413 26 413 33 ()}
        {Lisp-Entry "tool-preferences" #f 422 26 422 42 ()}
        {Lisp-Entry "get-tools-info" #f 431 11 431 25 ("eq?" "test:" "make-table" "set!" "tools-info" "unless")}
        {Lisp-Entry "get-tool-info" #f 437 26 437 39 ("get-tools-info" "table-ref" "tool-name")}
        {Lisp-Entry "set-tool-info" #f 441 26 441 39 ("get-tools-info" "table-set!" "info" "tool-name")}
        {Lisp-Entry "host-install" #f 450 26 450 38 ()}
        {Lisp-Entry "host-uninstall" #f 454 26 454 40 ()}
        {Lisp-Entry "client-activate" #f 458 26 458 41 ()}
        {Lisp-Entry "client-deactivate" #f 462 26 462 43 ()}
        {Lisp-Entry "get-tools-view" #f 471 26 471 40 ()}
        {Lisp-Entry "workspace-minimisable?" #f 475 26 475 48 ()}
        {Lisp-Entry "validate-dialog" #f 484 26 484 41 ()}
        {Lisp-Entry "get-modal-result" #f 488 26 488 42 ()}
        {Lisp-Entry "has-dialog-result?" #f 492 26 492 44 ()}
        {Lisp-Entry "get-editor-view" #f 501 26 501 41 ()}
        {Lisp-Entry "content-valid?" #f 510 26 510 40 ()}
        {Lisp-Entry "validate-content" #f 514 26 514 42 ()}
        {Lisp-Entry "set-parent" #f 523 11 523 21 ("get-player" "if" "set-player" "nextmethod" "parent")}
        {Lisp-Entry "outer-view" #f 533 18 533 28 ("get-parent" "set!" "neq?" "inner?" "and" "while" "self" "view" "parent" "outer" "let" "limit")}
        {Lisp-Entry "inner?" #f 542 26 542 32 ("view")}
        {Lisp-Entry "get-title" #f 551 26 551 35 ("title")}
        {Lisp-Entry "set-title" #f 555 26 555 35 ("adjust-size" "title" "set!" "value")}
        {Lisp-Entry "show" #f 565 11 565 15 ("invalidate-view" "nextmethod")}
        {Lisp-Entry "hide" #f 570 11 570 15 ("invalidate-view" "nextmethod")}
        {Lisp-Entry "update-displayed" #f 575 29 575 45 ()}
        {Lisp-Entry "get-enabled?" #f 584 26 584 38 ("enabled?")}
        {Lisp-Entry "set-enabled?" #f 588 26 588 38 ("invalidate-view" "enabled?" "set!" "flag")}
        {Lisp-Entry "get-scaled?" #f 598 11 598 22 ("scaled?")}
        {Lisp-Entry "set-scaled?" #f 602 11 602 22 ("invalidate-view" "parent" "if" "update-scrollbars" "update-displayed" "scaled?" "set!" "value")}
        {Lisp-Entry "get-scaling" #f 613 11 613 22 ("scaling")}
        {Lisp-Entry "set-scaling" #f 617 11 617 22 ("1000" "*" "round" "/" "scaling" "set!" "value")}
        {Lisp-Entry "get-action" #f 626 18 626 28 ("action")}
        {Lisp-Entry "set-action" #f 630 18 630 28 ("self" "register-actionable" "when" "require-action-item" "action-item" "let" "action" "set!" "value")}
        {Lisp-Entry "enabled-update" #f 642 11 642 25 ("get-enabled?" "set-enabled?" "action-item")}
        {Lisp-Entry "get-outline-view" #f 651 18 651 34 ("outline-view")}
        {Lisp-Entry "set-outline-view" #f 655 18 655 34 ("outline-view" "set!" "value")}
        {Lisp-Entry "outline-select" #f 659 18 659 32 ("list" "set-selection" "acquire-focus" "when" "0" "Cell" "new" "cell" "'cell" "get-selection-mode" "eq?" "Tree-View" "is?" "and" "if" "elem" "outline-view" "row-rank" "rank" "outline-row" "row" "let*" "focus?" "focus?:")}
        {Lisp-Entry "outline-row" #f 668 18 668 29 ("Outline-Row" "find-ascendant")}
        {Lisp-Entry "get-offscreen?" #f 677 11 677 25 ("offscreen?")}
        {Lisp-Entry "set-offscreen?" #f 681 11 681 25 ("offscreen?" "set!" "flag")}
        {Lisp-Entry "get-layer" #f 690 11 690 20 ("layer")}
        {Lisp-Entry "set-layer" #f 694 11 694 20 ("layer" "set!" "value")}
        {Lisp-Entry "get-effect" #f 703 11 703 21 ("effect")}
        {Lisp-Entry "set-effect" #f 707 11 707 21 ("effect" "set!" "value")}
        {Lisp-Entry "get-user-data" #f 716 18 716 31 ("user-data")}
        {Lisp-Entry "set-user-data" #f 720 18 720 31 ("user-data" "set!" "value")}
        {Lisp-Entry "get-lie-parent" #f 729 11 729 25 ("get-v" "scaling" "*" "position" "get-h" "+" "get-lie-parent" "nextmethod" "scaled?" "parent" "not" "or" "if" "sc" "v" "h")}
        {Lisp-Entry "get-global" #f 740 18 740 28 ("get-lie" "player" "get-position-in-root" "+")}
        {Lisp-Entry "get-delta" #f 749 11 749 20 ("nextmethod" "get-v" "get-h" "*" "values" "get-global" "-" "delta" "1.0" "0.0" "get-lie-parent" "sc" "v" "h" "receive" "neq?" "player" "and" "if" "get-player" "origin-player" "let" "origin")}
        {Lisp-Entry "default-position" #f 763 11 763 27 ("0" "Point")}
        {Lisp-Entry "set-position" #f 767 11 767 23 ("position-change" "invalidate-rect" "new" "set!" "self" "acquire" "old" "get-bounds" "essay" "bounds" "let*" "View" "parent" "is?" "player" "and" "inval?" "let" "position" "/=" "when" "pos")}
        {Lisp-Entry "default-size" #f 787 11 787 23 ("100" "Dimension")}
        {Lisp-Entry "minimal-size" #f 791 26 791 38 ()}
        {Lisp-Entry "preferred-size" #f 795 26 795 40 ("get-size")}
        {Lisp-Entry "fit-size" #f 799 26 799 34 ()}
        {Lisp-Entry "invaled-size" #f 803 11 803 23 ("rect-union" "self" "acquire" "size-rect" "new" "get-bounds" "old" "let" "View" "parent" "is?" "player" "and" "when" "sz")}
        {Lisp-Entry "set-size" #f 810 11 810 19 ("parent" "invalidate-rect" "content-size-change" "scroller" "unless" "size-change" "set!" "invaled-size" "let" "size" "/=" "when" "sz")}
        {Lisp-Entry "set-size-noevent" #f 821 11 821 27 ("parent" "invalidate-rect" "set!" "invaled-size" "let" "size" "/=" "when" "sz")}
        {Lisp-Entry "set-preferred-size" #f 829 18 829 36 ("preferred-size" "set-size")}
        {Lisp-Entry "layout-view" #f 838 18 838 29 ("layout-drawing")}
        {Lisp-Entry "front-view" #f 847 18 847 28 ("children" "last")}
        {Lisp-Entry "back-view" #f 851 18 851 27 ("children" "first")}
        {Lisp-Entry "send-before" #f 855 11 855 22 ("invalidate-view" "nextmethod" "target")}
        {Lisp-Entry "bring-to-front" #f 860 11 860 25 ("invalidate-view" "nextmethod")}
        {Lisp-Entry "send-to-back" #f 865 11 865 23 ("invalidate-view" "nextmethod")}
        {Lisp-Entry "send-child-to-front" #f 870 11 870 30 ("move-to-tail!" "children" "set!" "child")}
        {Lisp-Entry "send-child-to-back" #f 874 11 874 29 ("move-to-head!" "children" "set!" "child")}
        {Lisp-Entry "scrollee-width" #f 883 29 883 43 ("get-width")}
        {Lisp-Entry "scrollee-height" #f 887 29 887 44 ("get-height")}
        {Lisp-Entry "get-update-locked?" #f 896 18 896 36 ("update-locked?")}
        {Lisp-Entry "with-update-locked" #f 900 18 900 36 ("invalidate-update" "set!" "begin" "unwind-protect" "update-locked?" "if" "proc")}
        {Lisp-Entry "invalidate-update" #f 911 29 911 46 ("update-scrollbars" "invalidate-view")}
        {Lisp-Entry "get-renderer" #f 921 18 921 30 ("renderer")}
        {Lisp-Entry "set-renderer" #f 925 18 925 30 ("renderer" "set!" "value")}
        {Lisp-Entry "render" #f 929 11 929 17 ("nextmethod" "self" "render" "renderer" "if" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "draw-background" #f 940 11 940 26 ("fill-rect" "get-bounds" "bounds" "when" "get-drawing-background" "background" "let" "context" "surface")}
        {Lisp-Entry "get-drawing-background" #f 947 26 947 48 ("background" "context")}
        {Lisp-Entry "draw-content" #f 951 11 951 23 ("draw" "font" "set-font" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface")}
        {Lisp-Entry "get-offscreen" #f 961 11 961 24 ("new-offscreen" "set!" "close" "when" "new-context" "begin" "<=" "get-size" "offscreen" "and" "if" "get-height" "height" "size" "get-width" "width" "let" "surface")}
        {Lisp-Entry "new-offscreen" #f 978 15 978 28 ("Dimension" "size:" "Memory-Surface" "new" "height" "width" "surface")}
        {Lisp-Entry "get-page-setup" #f 987 26 987 40 ("get-application" "default-page-setup")}
        {Lisp-Entry "get-page-setup-designer" #f 991 26 991 49 ("get-application" "default-page-setup-designer")}
        {Lisp-Entry "get-page-setup-for" #f 995 18 995 36 ("set-active-branch" "when" "find-component" "branch" "get-page-setup" "page-setup" "let*" "name")}
        {Lisp-Entry "print-document" #f 1008 26 1008 40 ("self" "platform-print-document")}
        {Lisp-Entry "print-picture" #f 1012 26 1012 39 ("self" "platform-print-picture")}
        {Lisp-Entry "print-layout" #f 1016 26 1016 38 ("acquire-focus" "get-guest" "pane" "client:" "host-title:" "Page-Editor" "new-frame" "frame" "layout-view" "not" "print-preview" "'print-preview" "locate" "set-visible?" "Page-Toolbar" "find-palette" "toolbar" "get-toplevel" "toplevel" "apply-preferences" "previous:" "page" "'page" "name:" "Page-Workspace" "new" "ws" "selected-workspace" "current" "current-document" "client" "let*" "function" "with-locked-update" "from-preview?" "from-preview?:")}
        {Lisp-Entry "print-preview" #f 1032 26 1032 39 ("acquire-focus" "layout-view" "not" "print-layout" "'print-layout" "locate" "set-visible?" "Preview-Toolbar" "find-palette" "toolbar" "get-toplevel" "toplevel" "apply-preferences" "pane:" "previous:" "preview" "'preview" "name:" "Preview-Workspace" "new" "ws" "selected-workspace" "current" "get-guest" "pane" "self" "client:" "host-visible?:" "host-title:" "Preview-Pane" "new-frame" "frame" "let*" "function" "with-locked-update" "from-layout?" "from-layout?:")}
        {Lisp-Entry "get-print-area" #f 1048 26 1048 40 ("scrollee-size" "0" "Point" "position/size->rect" "context")}
        {Lisp-Entry "paginate" #f 1052 26 1052 34 ("get-output" "0" "naturals" "put" "Rect" "page" "get-top" "v" "*" "get-left" "+" "h" "col" "row" "function" "for-each" "List-Factory" "new" "pages" "rows" "fxceiling/" "cols" "rect-height" "height" "rect-width" "width" "get-print-area" "area" "let*" "page-height" "page-width")}
        {Lisp-Entry "with-printing" #f 1070 21 1070 34 ("restore-printing" "when" "setup-printing" "set!" "begin" "unwind-protect" "preserved" "let" "proc")}
        {Lisp-Entry "setup-printing" #f 1080 29 1080 43 ("scaled?:" "position:" "list" "update-displayed" "0" "Point" "new" "set!" "scaled?" "sc?" "position" "pos" "let")}
        {Lisp-Entry "restore-printing" #f 1089 29 1089 45 ("update-displayed" "scaled?:" "scaled?" "position:" "getf" "position" "set!" "preserved")}
        {Lisp-Entry "export-picture" #f 1100 18 1100 32 ("default-extension:" "choose-new-file" "either" "export-to-png" "1.0" "paint-drawing" "get-height" "get-width" "0" "Rect" "setup-clipper" "get-size" "size:" "Memory-Surface" "new" "surface" "with-closed" "destination" "destination:" "file" "'file" "where" "where:" "context" "context:")}
        {Lisp-Entry "export-picture" #f 1108 18 1108 32 ("move-pathname" "exists?" "when" "extensions:" "default-extension:" "choose-new-file" "either" "dest" "delete-file" "Cancel-Signal" "catch" "delete-metafile" "set-clipboard-metafile" "'clipboard" "eq?" "if" "get-metafile" "set!" "1.0" "get-top" "get-left" "paint-drawing" "with-clipper" "offset-rect" "content" "get-v" "lv" "get-h" "lh" "get-lie" "lie" "get-print-area" "area" "let*" "with-printing" "file:" "Picture" "new" "picture" "with-closed" "metafile" "function" ":wait" "with-cursor" "create-temporary-file" "clipboard" "case" "let" "destination" "destination:" "file" "'file" "where" "where:" "context" "context:")}
        {Lisp-Entry "get-scroller" #f 1143 18 1143 30 ("scroller")}
        {Lisp-Entry "set-scroller" #f 1147 26 1147 38 ("scroller" "set!" "view")}
        {Lisp-Entry "set-scroll-pos" #f 1151 26 1151 40 ("set-scroll-pos" "scroller" "when" "redraw?" "pos" "part")}
        {Lisp-Entry "set-scroll-info" #f 1156 26 1156 41 ("set-scroll-info" "scroller" "when" "page" "max" "min" "part")}
        {Lisp-Entry "update-scrollbars" #f 1161 18 1161 35 ("get-hscroll?" "set-hscroll-needed?" "horz" "'horz" "13" "if" "get-width" "-" "set-scroll-info" "get-vscroll?" ">" "set-vscroll-needed?" "vert" "'vert" "get-page-size" "page" "get-height" "max" "0" "min" "let" "update-locked?" "not" "scroller" "and" "when")}
        {Lisp-Entry "vscroll-needed?" #f 1177 18 1177 33 ("vert" "'vert" "get-page-size" "get-height" ">")}
        {Lisp-Entry "hscroll-needed?" #f 1181 18 1181 33 ("horz" "'horz" "get-page-size" "0" "13" "scroller" "get-vscroll?" "if" "get-width" "-" ">")}
        {Lisp-Entry "scroll" #f 1185 18 1185 24 ("get-scrolled-position" "+" "scroll-to" "0" "Point" "=" "unless" "delta")}
        {Lisp-Entry "scroll2" #f 1190 18 1190 25 ("get-scrolled-position" "+" "scroll-to2" "0" "Point" "=" "unless" "delta")}
        {Lisp-Entry "scroll-to" #f 1195 18 1195 27 ("clip-rect:" "scroll-view" "get-clipper" "self" "acquire" "clip-rect" "get-bounds" "rect" "scroller" "invalidate-view" "scroll-invalidate" "dv" "dh" "update-scrollbars" "vert" "'vert" "horz" "'horz" "set-scroll-pos" "scrolled" "set!" "position" "*" "Point" "new" "new-pos" "get-v" "v" "get-h" "max" "min" "fxround" "h" "max-v" "0" "max-h" "get-height" "min-v" "get-width" "/" "-" "min-h" "1.0" "scaling" "scaled?" "if" "sc" "display-size" "get-display" "display" "get-size" "size" "let*" "/=" "when" "get-scrolled-position" "pos" "let" "dest")}
        {Lisp-Entry "scroll-to2" #f 1228 18 1228 28 ("get-bounds" "scroll-view2" "scroller" "invalidate-view" "scroll-invalidate" "dv" "dh" "update-scrollbars" "vert" "'vert" "horz" "'horz" "set-scroll-pos" "scrolled" "set!" "position" "*" "Point" "new" "new-pos" "get-v" "v" "get-h" "max" "min" "fxround" "h" "max-v" "0" "max-h" "get-height" "min-v" "get-width" "/" "-" "min-h" "1.0" "scaling" "scaled?" "if" "sc" "display-size" "get-display" "display" "get-size" "size" "let*" "/=" "when" "get-scrolled-position" "pos" "let" "dest")}
        {Lisp-Entry "redraw-scrollbars" #f 1259 29 1259 46 ()}
        {Lisp-Entry "scroll-invalidate" #f 1263 29 1263 46 ("dv" "dh")}
        {Lisp-Entry "scroll-view" #f 1267 18 1267 29 ("*" "fxround" "scroll-window" "1.0" "0.0" "get-lie-parent" "sc" "v" "h" "receive" "get-display-rect" "either" "self" "acquire" "acquired" "view-visible?" "and" "when" "get-display" "display" "get-root" "root" "get-player" "player" "let" "clip-rect" "clip-rect:" "rect" "dv" "dh")}
        {Lisp-Entry "scroll-view2" #f 1278 18 1278 30 ("scroll-offscreen" "get-clipper" "clip-rect" "self" "acquire" "acquired" "when" "get-root" "root" "get-player" "player" "let" "rect" "dv" "dh")}
        {Lisp-Entry "scroll-offscreen" #f 1287 11 1287 27 (">" "+" "Rect" "new" "invalidate-rect" "0" "<" "when" "get-bottom" "mb" "get-right" "mr" "get-top" "mt" "get-left" "ml" "let" "fill" "draw-rectangle" "set-source-surface" "get-offscreen" "offscreen" "new-clipper" "rect-union" "modified-rect" "offset-rect" "dst-rect" "rect-intersection" "let*" "get-surface" "surface" "with-closed" "clip-rect" "src-rect" "dv" "dh")}
        {Lisp-Entry "get-scrolled-position" #f 1314 18 1314 39 ("get-display-position" "-")}
        {Lisp-Entry "get-scrolled-h" #f 1318 18 1318 32 ("get-scrolled-position" "get-h")}
        {Lisp-Entry "get-scrolled-v" #f 1322 18 1322 32 ("get-scrolled-position" "get-v")}
        {Lisp-Entry "set-scrolled-position" #f 1326 18 1326 39 ("set-position" "scroller" "when" "pos")}
        {Lisp-Entry "get-scroll-client" #f 1331 26 1331 43 ("self")}
        {Lisp-Entry "get-line-size" #f 1335 26 1335 39 ("8" "horz" "13" "vert" "case" "orientation")}
        {Lisp-Entry "get-page-size" #f 1341 26 1341 39 ("scaling" "/" "fxround" "scaled?" "not" "if" "get-width" "horz" "parent" "get-height" "vert" "case" "size" "let" "orientation")}
        {Lisp-Entry "with-scrollee-locked" #f 1351 18 1351 38 ("set!" "begin" "unwind-protect" "scrollee-locked?" "if" "proc")}
        {Lisp-Entry "layout-scrollee" #f 1361 26 1361 41 ("update-scrollbars" "function" "with-scrollee-locked" "scrollee-locked?" "unless" "fit-in-scroller" "set-size" "scrollee-size" "size" "let" "layout-scrollee-content" "scroller" "if" "update-locked?" "not" "when")}
        {Lisp-Entry "layout-scrollee-patch" #f 1381 26 1381 47 ()}
        {Lisp-Entry "layout-scrollee-content" #f 1385 26 1385 49 ()}
        {Lisp-Entry "fit-in-scroller" #f 1389 11 1389 26 ("get-display-width" "get-right" "right" "-" "0" "Point" "new" "scroll" "<" "when" "get-display-height" "fit" "get-bottom" "bottom" "let")}
        {Lisp-Entry "scrollee-size" #f 1400 26 1400 39 ("get-size")}
        {Lisp-Entry "on-vscroll" #f 1404 26 1404 36 ("orientation" "thumb-pos" "code")}
        {Lisp-Entry "on-hscroll" #f 1408 26 1408 36 ("orientation" "thumb-pos" "code")}
        {Lisp-Entry "content-size-change" #f 1420 26 1420 45 ("size")}
        {Lisp-Entry "get-display" #f 1424 18 1424 29 ("self" "parent" "scroller" "if")}
        {Lisp-Entry "get-display-position" #f 1430 18 1430 38 ("0" "get-v" "scaling" "get-h" "/" "fxround" "Point" "new" "scaled?" "not" "get-position" "-" "pos" "let" "scroller" "if")}
        {Lisp-Entry "get-display-h" #f 1441 18 1441 31 ("get-display-position" "get-h")}
        {Lisp-Entry "get-display-v" #f 1445 18 1445 31 ("get-display-position" "get-v")}
        {Lisp-Entry "get-display-size" #f 1449 18 1449 34 ("get-height" "scaling" "get-width" "/" "fxround" "Dimension" "new" "scaled?" "not" "parent" "get-size" "size" "let" "scroller" "if")}
        {Lisp-Entry "get-display-width" #f 1458 18 1458 35 ("get-display-size" "get-width" "scroller" "if")}
        {Lisp-Entry "get-display-height" #f 1464 18 1464 36 ("get-display-size" "get-height" "scroller" "if")}
        {Lisp-Entry "get-display-rect" #f 1470 18 1470 34 ("parent" "get-bounds" "scroller" "if")}
        {Lisp-Entry "view->display" #f 1476 18 1476 31 ("get-v" "scaling" "/" "get-h" "fxround" "Point" "new" "position" "+" "scaled?" "not" "scroller" "if" "pos")}
        {Lisp-Entry "h-view->display" #f 1484 18 1484 33 ("get-scrolled-position" "get-h" "+" "scroller" "if" "h")}
        {Lisp-Entry "v-view->display" #f 1490 18 1490 33 ("get-scrolled-position" "get-v" "+" "scroller" "if" "v")}
        {Lisp-Entry "display->view" #f 1496 18 1496 31 ("get-scrolled-position" "-" "scroller" "if" "pos")}
        {Lisp-Entry "h-display->view" #f 1502 18 1502 33 ("get-scrolled-position" "get-h" "-" "scroller" "if" "h")}
        {Lisp-Entry "v-display->view" #f 1508 18 1508 33 ("get-scrolled-position" "get-v" "-" "scroller" "if" "v")}
        {Lisp-Entry "scroll-needed" #f 1514 18 1514 31 ("get-height" "cdr" "get-v" "get-width" "car" "essay" "get-h" "Point" "new" "else" "<" "head" "'head" "eq?" "not" "and" "tail" "'tail" "neq?" "cond" "0" "*" "fxround" "if" "use-head?" "proc" ">" "big-range?" "+" "end-offset" "-" "start-offset" "let*" "force-direction" "size" "pos" "function" "needed" "get-display-size" "display-size" "get-display-position" "display-pos" "let" "reposition?" "reposition?:" "force-horizontal" "force-horizontal:" "force-vertical" "force-vertical:" "context" "end" "start")}
        {Lisp-Entry "horizontal-scroll-needed" #f 1535 18 1535 42 (">" "forward" "0" "-" "<" "if" "backward" "case" "get-display-width" "+" "end" "get-display-h" "start" "let*" "direction" "target")}
        {Lisp-Entry "vertical-scroll-needed" #f 1549 18 1549 40 (">" "forward" "0" "-" "<" "if" "backward" "case" "get-display-height" "+" "end" "get-display-v" "start" "let*" "direction" "target")}
        {Lisp-Entry "get-font" #f 1568 18 1568 26 ("font")}
        {Lisp-Entry "set-font" #f 1572 26 1572 34 ("adjust-size" "font" "set!" "fnt")}
        {Lisp-Entry "get-background" #f 1582 18 1582 32 ("background")}
        {Lisp-Entry "set-background" #f 1586 18 1586 32 ("invalidate-view" "background" "set!" "color")}
        {Lisp-Entry "get-auto-size?" #f 1596 18 1596 32 ("auto-size?")}
        {Lisp-Entry "set-auto-size?" #f 1600 18 1600 32 ("adjust-size" "auto-size?" "set!" "value")}
        {Lisp-Entry "adjust-size" #f 1605 18 1605 29 ("set-preferred-size" "invalidate-view" "auto-size?" "not" "if")}
        {Lisp-Entry "for-each-view" #f 1616 18 1616 31 ("get-visible?" "or" "View" "is?" "and" "when" "children" "in" "child" "for" "loop" "include-invisibles?" "include-invisibles?:" "proc")}
        {Lisp-Entry "for-each-view-reversed" #f 1623 18 1623 40 ("children" "for-each-reversed" "get-visible?" "or" "View" "is?" "and" "when" "child" "function" "let" "include-invisibles?" "include-invisibles?:" "proc")}
        {Lisp-Entry "find-mouse-view" #f 1637 18 1637 33 ("find-drawing" "get-captured-view" "either" "pos")}
        {Lisp-Entry "first-view" #f 1647 18 1647 28 ("first" "null?" "if" "get-views" "views" "let")}
        {Lisp-Entry "second-view" #f 1654 18 1654 29 ("second" "2" "length" ">=" "if" "get-views" "views" "let")}
        {Lisp-Entry "last-view" #f 1661 18 1661 27 ("last" "null?" "if" "get-views" "views" "let")}
        {Lisp-Entry "get-views" #f 1668 18 1668 27 ("get-children" "get-visible?" "or" "View" "is?" "and" "child" "function" "collect-if" "reverse!" "include-invisibles?" "include-invisibles?:")}
        {Lisp-Entry "front-view?" #f 1676 18 1676 29 ("parent" "first-view" "self" "eq?")}
        {Lisp-Entry "focus-actions" #f 1685 11 1685 24 ("nextmethod" "view" "'view" "find-actions" "cons")}
        {Lisp-Entry "guest-actions" #f 1690 11 1690 24 ("nextmethod" "guest" "'guest" "find-actions" "cons")}
        {Lisp-Entry "get-content-change-handler" #f 1700 18 1700 44 ("content-change-handler")}
        {Lisp-Entry "set-content-change-handler" #f 1704 18 1704 44 ("content-change-handler" "set!" "value")}
        {Lisp-Entry "call-content-change" #f 1708 11 1708 30 ("invoke" "origin:" "list" "self" ":change" "Event" "new" "event" "let" "content-change" "content-change-handler" "not" "if" "origin")}
        {Lisp-Entry "content-change" #f 1715 26 1715 40 ("origin")}
        {Lisp-Entry "get-selection-handler" #f 1724 18 1724 39 ("selection-handler")}
        {Lisp-Entry "set-selection-handler" #f 1728 18 1728 39 ("selection-handler" "set!" "handler")}
        {Lisp-Entry "call-selection-handler" #f 1732 18 1732 40 ("user-origin?:" "force?:" ":selection-change" "Selection-Event" "new" "self" "invoke" "selection-handler" "when" "user-origin?" "force?" "selection" "old")}
        {Lisp-Entry "get-modified?" #f 1742 26 1742 39 ("modified?")}
        {Lisp-Entry "set-modified?" #f 1746 26 1746 39 ("set!" "modified?" "neq?" "when" "state")}
        {Lisp-Entry "position-change" #f 1756 26 1756 41 ("position")}
        {Lisp-Entry "size-change" #f 1760 26 1760 37 ("call-layout" "get-finished?" "invalidate-layout" "resize" "0" "/=" "or" "dv" "-" "dh" "when" "set!" "height" "width" "get-height" "ph" "get-width" "previous-size" "essay" "pw" "let" "size")}
        {Lisp-Entry "resize" #f 1776 29 1776 35 ("dv" "dh")}
        {Lisp-Entry "acquire-focus" #f 1785 18 1785 31 ("self" "set-focus")}
        {Lisp-Entry "call-focus-gain" #f 1789 18 1789 33 ("focus-gain" "self" "get-focus-actions" "get-application" "set-focus-actions" "old")}
        {Lisp-Entry "call-focus-lose" #f 1794 18 1794 33 ("focus-lose" "get-application" "set-focus-actions" "view")}
        {Lisp-Entry "focus-lose" #f 1799 26 1799 36 ("view")}
        {Lisp-Entry "focus-master" #f 1803 26 1803 38 ("self")}
        {Lisp-Entry "focus-gain" #f 1807 26 1807 36 ("old")}
        {Lisp-Entry "focus-delegate" #f 1811 26 1811 40 ()}
        {Lisp-Entry "focus-update-actions" #f 1815 26 1815 46 ()}
        {Lisp-Entry "get-action-handler" #f 1824 18 1824 36 ("action-handler")}
        {Lisp-Entry "set-action-handler" #f 1828 26 1828 44 ("action-handler" "set!" "x")}
        {Lisp-Entry "process-action" #f 1832 26 1832 40 ("notify-action" "action-properties" "properties" "sender")}
        {Lisp-Entry "action-properties" #f 1836 29 1836 46 ()}
        {Lisp-Entry "notify-action" #f 1840 18 1840 31 ("self" "invoke" ":action" "Action-Event" "new" "apply" "event" "get-properties" "either" "let*" "call-action" "action" "when" "action-handler" "not" "if" "properties" "sender")}
        {Lisp-Entry "get-receive-files-handler" #f 1854 18 1854 43 ("receive-files-handler")}
        {Lisp-Entry "set-receive-files-handler" #f 1857 18 1857 43 ("receive-files-handler" "set!" "handler")}
        {Lisp-Entry "dispatch-receive-files" #f 1861 21 1861 43 ("call-receive-files" "self" "acquire" "view-pos" "when" "find-mouse-view" "view" "let" "files" "pos")}
        {Lisp-Entry "call-receive-files" #f 1868 18 1868 36 ("receive-files" "files:" "position:" ":receive-files" "Event" "new" "self" "invoke" "receive-files-handler" "if" "files" "pos")}
        {Lisp-Entry "receive-files" #f 1874 26 1874 39 ("receive-files" "get-application" "appl" "let" "pathnames" "pos")}
        {Lisp-Entry "get-cursor-update-handler" #f 1884 18 1884 43 ("cursor-update-handler")}
        {Lisp-Entry "set-cursor-update-handler" #f 1888 18 1888 43 ("cursor-update-handler" "set!" "handler")}
        {Lisp-Entry "call-cursor-update" #f 1892 18 1892 36 ("invoke" "self" ":set-cursor" "Cursor-Event" "new" "event" "let" "cursor-update" "cursor-update-handler" "not" "if" "pos")}
        {Lisp-Entry "cursor-update" #f 1899 26 1899 39 (":arrow" "set-cursor" "current-drag-drop" "unless" "pos")}
        {Lisp-Entry "mouse-pressed?" #f 1904 18 1904 32 ("mouse-down?")}
        {Lisp-Entry "mouse-right-pressed?" #f 1908 18 1908 38 ("get-mouse-right-down?")}
        {Lisp-Entry "mouse-in?" #f 1912 18 1912 27 ("get-mouse-in" "self" "eq?")}
        {Lisp-Entry "mouse-over?" #f 1916 18 1916 29 ("mouse-position" "over-view?")}
        {Lisp-Entry "over-view?" #f 1920 18 1920 28 ("in-rect?" "get-bounds" "bounds" "let" "point")}
        {Lisp-Entry "mouse-position" #f 1925 18 1925 32 ("mouse-position" "acquire" "get-root" "root" "get-player" "player" "let")}
        {Lisp-Entry "get-mouse-enter-handler" #f 1936 18 1936 41 ("mouse-enter-handler")}
        {Lisp-Entry "set-mouse-enter-handler" #f 1939 18 1939 41 ("mouse-enter-handler" "set!" "handler")}
        {Lisp-Entry "get-mouse-hover-handler" #f 1943 18 1943 41 ("mouse-hover-handler")}
        {Lisp-Entry "set-mouse-hover-handler" #f 1946 18 1946 41 ("mouse-hover-handler" "set!" "handler")}
        {Lisp-Entry "get-mouse-leave-handler" #f 1950 18 1950 41 ("mouse-leave-handler")}
        {Lisp-Entry "set-mouse-leave-handler" #f 1953 18 1953 41 ("mouse-leave-handler" "set!" "handler")}
        {Lisp-Entry "get-mouse-down-handler" #f 1957 18 1957 40 ("mouse-down-handler")}
        {Lisp-Entry "set-mouse-down-handler" #f 1960 18 1960 40 ("mouse-down-handler" "set!" "handler")}
        {Lisp-Entry "get-mouse-move-handler" #f 1964 18 1964 40 ("mouse-move-handler")}
        {Lisp-Entry "set-mouse-move-handler" #f 1967 18 1967 40 ("mouse-move-handler" "set!" "handler")}
        {Lisp-Entry "get-mouse-up-handler" #f 1971 18 1971 38 ("mouse-up-handler")}
        {Lisp-Entry "set-mouse-up-handler" #f 1974 18 1974 38 ("mouse-up-handler" "set!" "handler")}
        {Lisp-Entry "get-drag-move-handler" #f 1978 18 1978 39 ("drag-move-handler")}
        {Lisp-Entry "set-drag-move-handler" #f 1981 18 1981 39 ("drag-move-handler" "set!" "handler")}
        {Lisp-Entry "get-drag-up-handler" #f 1985 18 1985 37 ("drag-up-handler")}
        {Lisp-Entry "set-drag-up-handler" #f 1988 18 1988 37 ("drag-up-handler" "set!" "handler")}
        {Lisp-Entry "get-double-click-handler" #f 1992 18 1992 42 ("double-click-handler")}
        {Lisp-Entry "set-double-click-handler" #f 1995 18 1995 42 ("double-click-handler" "set!" "handler")}
        {Lisp-Entry "call-mouse-hover" #f 1999 11 1999 27 ("popup-tooltip" "get-tooltip?" "when" "mouse-hover" ":mouse-hover" "Mouse-Event" "new" "self" "invoke" "mouse-hover-handler" "if" "pos")}
        {Lisp-Entry "dispatch-mouse-down" #f 2007 21 2007 40 ("call-cursor-update" "call-mouse-down" "mouse-activate" "focused-host?" "not" "and" "get-host" "host" "mouse-activate?" "set-mouse-down-point" "set-mouse-down-view" "set-mouse-down?" "self" "acquire" "acquired" "let" "mouse-down" "'mouse-down" "event:" "close-popups" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-mouse-down" #f 2024 18 2024 33 ("mouse-down" ":mouse-down" "Mouse-Event" "new" "self" "invoke" "mouse-down-handler" "if" "pos")}
        {Lisp-Entry "dispatch-mouse-move" #f 2030 21 2030 40 ("process-mouse-move" "process-drag-move" "call-cursor-update" "self" "mouse-down-view" "acquire" "acquired" "mouse-down?" "if" "track-tooltip" "current-drag-drop" "Current-Tooltip-Context" "call-mouse-enter" "set-mouse-in" "cancel-tooltip-tracking" "in-tooltip?" "Tooltip" "get-player" "is?" "or" "unless" "call-mouse-leave" "get-mouse-in" "neq?" "when" "find-mouse-view" "view" "Point" "new" "pos" "let" "v" "h")}
        {Lisp-Entry "process-mouse-move" #f 2053 11 2053 29 ("call-mouse-move" "process-tooltip" "Current-Tooltip-Context" "if" "pos")}
        {Lisp-Entry "call-mouse-move" #f 2059 11 2059 26 ("mouse-move" "invoke" "self" ":mouse-move" "Mouse-Event" "new" "event" "let" "mouse-move-handler" "if" "pos")}
        {Lisp-Entry "dispatch-mouse-up" #f 2066 21 2066 38 ("set-delayed-mouse-action" "action" "get-delayed-mouse-action" "process-mouse-up" "call-cursor-update" "acquired" "let" "self" "acquire" "mouse-down-view" "process-drag-up" "mouse-down?" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "process-mouse-up" #f 2081 11 2081 27 ("call-mouse-up" "drag-drop" "current-drag-drop" "when" "pos")}
        {Lisp-Entry "call-mouse-up" #f 2087 11 2087 24 ("mouse-up" ":mouse-up" "Mouse-Event" "new" "self" "invoke" "mouse-up-handler" "if" "pos")}
        {Lisp-Entry "process-drag-move" #f 2093 11 2093 28 ("call-drag-move" "drag-follow" "get-drag-hotspot" "mouse-down-point" "nu-" "drag-start" "get-drag-drop" "drag-drop" "let" "allow-start-drag?" "when" "begin" "get-source" "get-view" "current-drag-drop" "not" "or" "get-draggable?" "mouse-down-view" "self" "eq?" "and" "if" "pos")}
        {Lisp-Entry "allow-start-drag?" #f 2105 29 2105 46 ("drag-tolerance" "mouse-down-point" "near?" "current-drag-drop" "not" "mouse-down?" "and" "pos")}
        {Lisp-Entry "call-drag-move" #f 2109 11 2109 25 ("drag-move" ":drag-move" "Mouse-Event" "new" "self" "invoke" "drag-move-handler" "if" "pos")}
        {Lisp-Entry "process-drag-up" #f 2115 11 2115 26 ("call-drag-up" "player" "when" "set-mouse-down-point" "set-mouse-down-view" "set-mouse-down?" "current-drag-drop" "dragging?" "pos")}
        {Lisp-Entry "call-drag-up" #f 2123 11 2123 23 ("drag-up" ":drag-up" "Mouse-Event" "new" "self" "invoke" "drag-up-handler" "if" "dragging?" "pos")}
        {Lisp-Entry "dispatch-double-click" #f 2129 21 2129 42 ("call-double-click" "mouse-activate" "focused-host?" "not" "and" "get-host" "host" "mouse-activate?" "set-mouse-down-point" "set-mouse-down-view" "set-mouse-down?" "self" "acquire" "acquired" "let" "double-click" "'double-click" "event:" "close-popups" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-double-click" #f 2145 26 2145 43 ("double-click" ":double-click" "Mouse-Event" "new" "self" "invoke" "double-click-handler" "if" "pos")}
        {Lisp-Entry "dispatch-context-menu" #f 2151 21 2151 42 ("self" "acquire" "call-context-menu" "context-menu" "'context-menu" "event:" "close-popups" "get-enabled?" "and" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "set!" "inhibit-context-menu?" "if" "v" "h")}
        {Lisp-Entry "call-context-menu" #f 2161 18 2161 35 ("context-menu" ":context-menu" "Mouse-Event" "new" "self" "invoke" "context-menu-handler" "if" "pos")}
        {Lisp-Entry "dispatch-middle-mouse-down" #f 2167 21 2167 47 ("self" "acquire" "middle-mouse-down" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "dispatch-middle-mouse-up" #f 2174 21 2174 45 ("self" "acquire" "middle-mouse-up" "when" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "dispatch-right-mouse-down" #f 2181 21 2181 46 ("self" "acquire" "right-mouse-down" "when" "set-mouse-right-down?" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "dispatch-right-mouse-up" #f 2189 21 2189 44 ("self" "acquire" "right-mouse-up" "when" "set-mouse-right-down?" "find-mouse-view" "view" "Point" "new" "pos" "let*" "v" "h")}
        {Lisp-Entry "call-mouse-enter" #f 2197 11 2197 27 ("mouse-enter" ":mouse-enter" "Mouse-Event" "new" "self" "invoke" "mouse-enter-handler" "if")}
        {Lisp-Entry "call-mouse-leave" #f 2203 11 2203 27 ("mouse-leave" ":mouse-leave" "Mouse-Event" "new" "self" "invoke" "mouse-leave-handler" "if" "close-self-tooltip" "cancel-hovering")}
        {Lisp-Entry "mouse-hover" #f 2211 26 2211 37 ("pos")}
        {Lisp-Entry "mouse-wheel" #f 2215 26 2215 37 ("inhibit-context-menu?" "set!" "get-mouse-right-down?" "0" "3" "quotient" "Point" "new" "scroll" "begin" "shift-down?" "if" "get-scroller" "when" "delta" "pos")}
        {Lisp-Entry "mouse-enter" #f 2225 26 2225 37 ()}
        {Lisp-Entry "mouse-leave" #f 2229 26 2229 37 ()}
        {Lisp-Entry "mouse-down" #f 2233 26 2233 36 ("pos")}
        {Lisp-Entry "mouse-move" #f 2237 26 2237 36 ("pos")}
        {Lisp-Entry "mouse-up" #f 2241 26 2241 34 ("pos")}
        {Lisp-Entry "drag-move" #f 2245 26 2245 35 ("pos")}
        {Lisp-Entry "drag-up" #f 2249 26 2249 33 ("rest" "pos")}
        {Lisp-Entry "double-click" #f 2253 26 2253 38 ("call-mouse-down" "pos")}
        {Lisp-Entry "with-context-click" #f 2257 26 2257 44 ("proc" "pos")}
        {Lisp-Entry "context-menu" #f 2261 26 2261 38 ("pos")}
        {Lisp-Entry "get-context-menu" #f 2265 26 2265 42 ()}
        {Lisp-Entry "middle-mouse-down" #f 2269 26 2269 43 ("mouse-down" "pos")}
        {Lisp-Entry "middle-mouse-up" #f 2273 26 2273 41 ("mouse-up" "pos")}
        {Lisp-Entry "right-mouse-down" #f 2277 26 2277 42 ("pos")}
        {Lisp-Entry "right-mouse-up" #f 2281 26 2281 40 ("pos")}
        {Lisp-Entry "mouse-activate?" #f 2285 26 2285 41 ()}
        {Lisp-Entry "mouse-view" #f 2289 18 2289 28 ("get-mouse-in" "get-captured-view" "either")}
        {Lisp-Entry "Hovering-Tolerance" #f 2298 14 2298 32 ("3")}
        {Lisp-Entry "Hovering-Time" #f 2301 14 2301 27 ("0.5")}
        {Lisp-Entry "Hovering-Steps" #f 2304 14 2304 28 ("5")}
        {Lisp-Entry "track-hovering" #f 2308 18 2308 32 ("0" "delay:" "check-hovering" "function" "Pulse" "new" "hover-pulse" "hover-history" "set!" "Hovering-Steps" "/" "period" "mouse-position" "start" "let" "cancel-hovering" "Hovering-Time" "time" "time:")}
        {Lisp-Entry "cancel-hovering" #f 2316 18 2316 33 ("hover-history" "set!" "close" "hover-pulse" "when")}
        {Lisp-Entry "check-hovering" #f 2323 11 2323 25 ("1" "-" "tail" "set-cdr!" "call-mouse-hover" "begin" "Hovering-Tolerance" "distance" "point" "function" "every?" "cons" "set!" "Hovering-Steps" "hover-history" "length" "<" "mouse-position" "pos" "let" "cancel-hovering" "self" "mouse-view" "neq?" "if" "start")}
        {Lisp-Entry "Current-Tooltip-Context" #f 2344 14 2344 37 ()}
        {Lisp-Entry "Last-Tooltip-Time" #f 2347 14 2347 31 ()}
        {Lisp-Entry "Last-Tooltip-Context-Pos" #f 2350 14 2350 38 ()}
        {Lisp-Entry "track-tooltip" #f 2354 11 2354 24 ("0.1" "time:" "track-hovering" "0.5" "current-time" "time->seconds" "-" "<" "Last-Tooltip-Time" "and" "if" "get-player" "player" "let" "get-tooltip?" "when")}
        {Lisp-Entry "cancel-tooltip-tracking" #f 2363 11 2363 34 ("close-tooltip" "cancel-hovering")}
        {Lisp-Entry "reset-tooltip" #f 2368 18 2368 31 ("cancel-tooltip-tracking")}
        {Lisp-Entry "in-tooltip?" #f 2372 11 2372 22 ("self" "acquire" "in-rect?" "get-bounds" "rect" "get-view" "view" "let" "Current-Tooltip-Context" "when" "pos")}
        {Lisp-Entry "process-tooltip" #f 2380 11 2380 26 ("reset-tooltip" "self" "acquire" "in-rect?" "not" "and" "when" "get-bounds" "rect" "Current-Tooltip-Context" "get-view" "view" "let" "Tooltip" "get-overlapped" "is?" "unless" "pos")}
        {Lisp-Entry "popup-tooltip" #f 2388 11 2388 24 ("popup-text" "get-text" "text" "reset-tooltip" "begin" "if" "Current-Tooltip-Context" "set!" "get-tooltip-context" "nu/=?" "Last-Tooltip-Context-Pos" "not" "essay" "context" "let" "close-tooltip" "in-tooltip?" "current-drag-drop" "mouse-down?" "or" "unless" "pos")}
        {Lisp-Entry "popup-text" #f 2401 11 2401 21 ("Current-Tooltip-Context" "set-tooltip" "border:" "Tooltip" "class:" "0" "Dimension" "padding:" "get-position" "either" "popup" "tooltip" "get-cursor-height" "height" "let*" "set-preferred-size" "set-font" "when" "get-font" "font" "solid" "'solid" "border-type:" "Border-View" "new" "border" "new-tooltip-view" "view" "let" "text" "context" "pos")}
        {Lisp-Entry "new-tooltip-view" #f 2413 11 2413 27 ("title:" "Tooltip-Label" "2" "get-size" "nu+" "set-size" "set-text" "get-text" "text-view" "100" "400" "Dimension" "size:" "Tooltip-Text" "new" "view" "let*" "pair?" "get-formatted-tooltip?" "and" "if" "text")}
        {Lisp-Entry "close-self-tooltip" #f 2423 11 2423 29 ("close-tooltip" "get-view" "self" "eq?" "Current-Tooltip-Context" "and" "when")}
        {Lisp-Entry "close-tooltip" #f 2428 11 2428 24 ("current-time" "time->seconds" "Last-Tooltip-Time" "set!" "close-popup" "opened?" "and" "get-tooltip" "tooltip" "let" "Current-Tooltip-Context" "when")}
        {Lisp-Entry "get-cursor-height" #f 2437 11 2437 28 ("21" "else" "9" ":ibeam" "case" "get-cursor" "cursor" "let")}
        {Lisp-Entry "get-selected-element" #f 2449 18 2449 38 ("get-name" "when" "children" "get-selected?" "get-group" "eq?" "not" "or" "is?" "and" "child" "function" "find-if" "element" "let" "group" "group:" "Radio-Button" "class" "class:")}
        {Lisp-Entry "set-selected-element" #f 2460 18 2460 38 ("error" "unless" "children" "set!" "set-selected?" "get-name" "selected?" "get-group" "eq?" "not" "or" "is?" "and" "when" "child" "function" "for-each" "found?" "let" "group" "group:" "Radio-Button" "class" "class:" "name")}
        {Lisp-Entry "unselect-elements" #f 2474 18 2474 35 ("children" "unselect" "get-group" "eq?" "not" "or" "is?" "and" "when" "child" "function" "for-each" "group" "group:" "Radio-Button" "class" "class:")}
        {Lisp-Entry "get-context-menu-handler" #f 2487 18 2487 42 ("context-menu-handler")}
        {Lisp-Entry "set-context-menu-handler" #f 2490 18 2490 42 ("context-menu-handler" "set!" "handler")}
        {Lisp-Entry "track-popup-menu" #f 2494 18 2494 34 ("Menu-Transient" "class:" "popup" "let" "all-invisible?" "unless" "error" "Context-Menu" "is-not?" "if" "self" "initiator" "initiator:" "alternate-position" "alternate-position:" "pos" "menu")}
        {Lisp-Entry "all-invisible?" #f 2502 11 2502 25 ("get-children" "get-visible?" "not" "item" "function" "every?" "menu")}
        {Lisp-Entry "get-context-text" #f 2513 11 2513 27 ()}
        {Lisp-Entry "mouse-copy" #f 2522 26 2522 36 ("destination" "pos")}
        {Lisp-Entry "mouse-insert" #f 2526 26 2526 38 ("object")}
        {Lisp-Entry "to-desktop" #f 2535 18 2535 28 ("self" "acquire" "get-root" "root" "get-player" "player" "get-desktop" "desktop" "let" "shape")}
        {Lisp-Entry "from-desktop" #f 2542 18 2542 30 ("acquire" "get-root" "root" "get-player" "player" "get-desktop" "desktop" "let" "shape")}
        {Lisp-Entry "popup" #f 2554 18 2554 23 ("fade-in" "set-effect" "layout-view" "set-visible?" "set-size" "Point" "set-position" "get-root" "set-parent" "set-initiator" "size:" "fit-point" "position:" "popup" "raised" "'raised" "border-type:" "'border" "name:" "Border-View" "new" "0" "either" "4" "Dimension" "get-size" "+" "size" "to-desktop" "essay" "alternate" "get-work-area" "rect-size" "max" "get-player" "player" "get-toplevel" "toplevel" "let*" "close-root?" "close-root?:" "effect" "effect:" "fade-speed" "fade-speed:" "border" "border:" "Popup" "class" "class:" "self" "initiator" "initiator:" "alternate-position" "alternate-position:" "padding" "padding:" "position" "view")}
        {Lisp-Entry "close-popups" #f 2576 26 2576 38 ("close-popups" "player" "when" "exclude" "exclude:" "all?" "all?:" "event" "event:")}
        {Lisp-Entry "popup-destroy" #f 2581 26 2581 39 ("popup")}
        {Lisp-Entry "popup-initiator" #f 2585 18 2585 33 ("get-initiator" "Popup" "is?" "when" "get-overlapped" "overlapped" "let")}
        {Lisp-Entry "owned?" #f 2591 18 2591 24 ("get-overlapped" "get-owners" "memq?" "overlapped")}
        {Lisp-Entry "get-draggable?" #f 2600 26 2600 40 ("draggable?")}
        {Lisp-Entry "set-draggable?" #f 2604 18 2604 32 ("draggable?" "set!" "flag")}
        {Lisp-Entry "get-drag-tolerance" #f 2608 18 2608 36 ("drag-tolerance")}
        {Lisp-Entry "set-drag-tolerance" #f 2612 18 2612 36 ("drag-tolerance" "set!" "tolerance")}
        {Lisp-Entry "get-drag-drop" #f 2616 26 2616 39 ("source:" "DnD" "new" "when" "get-drag-source" "source" "let")}
        {Lisp-Entry "get-drag-hotspot" #f 2622 26 2622 42 ("0" "Point")}
        {Lisp-Entry "get-drag-source" #f 2626 26 2626 41 ("get-drag-image" "image:" "position:" "self" "view:" "Drag-Source" "new" "get-drag-position" "pos" "let")}
        {Lisp-Entry "get-drag-position" #f 2631 26 2631 43 ("mouse-down-point")}
        {Lisp-Entry "get-drag-image" #f 2635 26 2635 40 ("pos")}
        {Lisp-Entry "drag-start" #f 2639 11 2639 21 ("process-drag-feedback" "hide-drag-image" "get-desktop" "ImageList_DragEnter" "to-desktop" "global" "get-v" "get-h" "get-handle" "ImageList_BeginDrag" "get-image-name" "image-name" "get-portfolio" "portfolio" "get-image" "image" "let*" "acquire-capture" "acquire-focus" ":no" "set-cursor" "get-source" "get-view" "view" "let" "set-current-drag-drop" "drag-drop" "hotspot" "pos")}
        {Lisp-Entry "drag-follow" #f 2656 11 2656 22 ("process-drag-feedback" "get-v" "get-h" "ImageList_DragMove" "to-desktop" "global" "get-source" "get-view" "view" "drag-drop" "let*" "current-drag-drop" "when" "pos")}
        {Lisp-Entry "drag-drop" #f 2665 11 2665 20 ("drop" "get-target" "when" "drag-end" "pos" "drag-drop")}
        {Lisp-Entry "drag-end" #f 2671 11 2671 19 ("set-current-drag-drop" "get-source" "get-view" "release-capture" "get-desktop" "get-handle" "ImageList_DragLeave" "ImageList_EndDrag" "unhighlight-current" "hide-drag-image" "drag-drop" "let" "current-drag-drop" "when")}
        {Lisp-Entry "process-drag-feedback" #f 2682 11 2682 32 ("show-drag-image" "highlight-current" "set-target" "unhighlight-current" "hide-drag-image" ":no" ":move" "if" "set-cursor" "get-target" "neq?" "call-current-drop" "target" "to-view" "local" "when" "set-view" "find-view" "view" "get-desktop" "desktop" "get-view" "current" "current-drag-drop" "drag-drop" "let*" "global")}
        {Lisp-Entry "hide-drag-image" #f 2702 11 2702 26 ("ImageList_DragShowNolock")}
        {Lisp-Entry "show-drag-image" #f 2706 11 2706 26 ("ImageList_DragShowNolock")}
        {Lisp-Entry "highlight-current" #f 2710 11 2710 28 ("highlight-drop" "local" "view" "drag-drop")}
        {Lisp-Entry "unhighlight-current" #f 2714 11 2714 30 ("get-view" "unhighlight-drop" "when" "get-target" "current-target" "let" "drag-drop")}
        {Lisp-Entry "highlight-drop" #f 2720 26 2720 40 ("pos" "drag-drop")}
        {Lisp-Entry "unhighlight-drop" #f 2724 26 2724 42 ("drag-drop")}
        {Lisp-Entry "get-current-drop-handler" #f 2733 18 2733 42 ("current-drop-handler")}
        {Lisp-Entry "set-current-drop-handler" #f 2736 18 2736 42 ("current-drop-handler" "set!" "handler")}
        {Lisp-Entry "call-current-drop" #f 2740 18 2740 35 ("current-drop" ":drop-target" "Drop-Event" "new" "self" "invoke" "current-drop-handler" "if" "pos" "drag-drop")}
        {Lisp-Entry "current-drop" #f 2746 26 2746 38 ("pos" "drag-drop")}
        {Lisp-Entry "standard-current-drop" #f 2750 18 2750 39 ("current-drop" "criteria:" "position:" "view:" "Drop-Target" "new" "accepts?" "function" "find-if" "criteria" "let" "neq?" "if" "cons" "drag-info" "drag-over" "get-source" "get-view" "drag-start" "get-target" "current" "get-drag-drop" "drag-drop" "get-position" "pos" "get-sender" "sender" "let*" "handler" "handler:" "acceptance" "evt")}
        {Lisp-Entry "get-receive-drop-handler" #f 2766 18 2766 42 ("receive-drop-handler")}
        {Lisp-Entry "set-receive-drop-handler" #f 2769 18 2769 42 ("receive-drop-handler" "set!" "handler")}
        {Lisp-Entry "drop" #f 2773 26 2773 30 ("acquire" "self" "call-receive-drop" "when" "get-handler" "either" "dst" "get-target" "trg" "get-source" "get-view" "src" "let*" "pos" "drag-drop")}
        {Lisp-Entry "call-receive-drop" #f 2781 18 2781 35 ("receive-drop" ":receive-drop" "Drop-Event" "new" "self" "invoke" "receive-drop-handler" "if" "drag-drop" "pos" "sender")}
        {Lisp-Entry "receive-drop" #f 2787 26 2787 38 ("drag-drop" "pos" "sender")}
        {Lisp-Entry "get-key-press-handler" #f 2796 18 2796 39 ("key-press-handler")}
        {Lisp-Entry "set-key-press-handler" #f 2800 18 2800 39 ("key-press-handler" "set!" "handler")}
        {Lisp-Entry "call-key-press" #f 2804 21 2804 35 ("record" "record-event?" "content:" ":key" "char?" "Event" "event" "on-insert" ":focus" "Event-Handler" "handler" "let" "get-recorder" "recorder" "get-application" "appl" "let*" "macro-recording?" "when" "key-press" ":char" "Keyboard-Event" "new" "self" "invoke" "key-press-handler" "if" "key")}
        {Lisp-Entry "get-arrow-press-handler" #f 2818 18 2818 41 ("arrow-press-handler")}
        {Lisp-Entry "set-arrow-press-handler" #f 2822 18 2822 41 ("arrow-press-handler" "set!" "handler")}
        {Lisp-Entry "get-escape-press-handler" #f 2826 18 2826 42 ("escape-press-handler")}
        {Lisp-Entry "set-escape-press-handler" #f 2830 18 2830 42 ("escape-press-handler" "set!" "handler")}
        {Lisp-Entry "get-backspace-press-handler" #f 2834 18 2834 45 ("backspace-press-handler")}
        {Lisp-Entry "set-backspace-press-handler" #f 2838 18 2838 45 ("backspace-press-handler" "set!" "handler")}
        {Lisp-Entry "get-return-press-handler" #f 2842 18 2842 42 ("return-press-handler")}
        {Lisp-Entry "set-return-press-handler" #f 2846 18 2846 42 ("return-press-handler" "set!" "handler")}
        {Lisp-Entry "get-tab-press-handler" #f 2850 18 2850 39 ("tab-press-handler")}
        {Lisp-Entry "set-tab-press-handler" #f 2854 18 2854 39 ("tab-press-handler" "set!" "handler")}
        {Lisp-Entry "on-arrow" #f 2858 11 2858 19 ("call-arrow-press" "evt")}
        {Lisp-Entry "call-arrow-press" #f 2862 11 2862 27 ("get-modifiers" "direction:" "get-property" "arrow-press" "self" "invoke" "arrow-press-handler" "if" "evt")}
        {Lisp-Entry "arrow-press" #f 2868 26 2868 37 ("down-arrow-press" "down" "up-arrow-press" "up" "right-arrow-press" "right" "left-arrow-press" "left" "case" "modifiers" "direction")}
        {Lisp-Entry "left-arrow-press" #f 2876 26 2876 42 ("modifiers")}
        {Lisp-Entry "right-arrow-press" #f 2880 26 2880 43 ("modifiers")}
        {Lisp-Entry "up-arrow-press" #f 2884 26 2884 40 ("modifiers")}
        {Lisp-Entry "down-arrow-press" #f 2888 26 2888 42 ("modifiers")}
        {Lisp-Entry "on-escape-press" #f 2892 26 2892 41 ("call-escape-press" "evt")}
        {Lisp-Entry "call-escape-press" #f 2896 11 2896 28 ("escape-press" ":char" "Keyboard-Event" "new" "self" "invoke" "escape-press-handler" "if" "key")}
        {Lisp-Entry "escape-press" #f 2902 26 2902 38 ("key")}
        {Lisp-Entry "on-backspace-press" #f 2906 26 2906 44 ("call-backspace-press" "evt")}
        {Lisp-Entry "call-backspace-press" #f 2910 11 2910 31 ("backspace-press" ":char" "Keyboard-Event" "new" "self" "invoke" "backspace-press-handler" "if" "key")}
        {Lisp-Entry "backspace-press" #f 2916 26 2916 41 ("rest" "key")}
        {Lisp-Entry "on-return-press" #f 2920 26 2920 41 ("call-return-press" "evt")}
        {Lisp-Entry "call-return-press" #f 2924 11 2924 28 ("return-press" ":char" "Keyboard-Event" "new" "self" "invoke" "return-press-handler" "if" "key")}
        {Lisp-Entry "return-press" #f 2930 26 2930 38 ("key")}
        {Lisp-Entry "on-tab-press" #f 2934 26 2934 38 ("call-tab-press" "evt")}
        {Lisp-Entry "call-tab-press" #f 2938 11 2938 25 ("modifiers-keys" "tab-press" ":char" "Keyboard-Event" "new" "self" "invoke" "tab-press-handler" "if" "key")}
        {Lisp-Entry "tab-press" #f 2944 26 2944 35 ("shift-key?" "navigate-view" "modifiers" "key")}
        {Lisp-Entry "on-key-press" #f 2948 18 2948 30 ("key:" "get-property" "key-press" "evt")}
        {Lisp-Entry "key-press" #f 2952 26 2952 35 ("key")}
        {Lisp-Entry "dispatch-key-press" #f 2956 21 2956 39 ("call-key-press" "when" "get-focus" "view" "let" "complete-drag-up" "drag-end" "begin" "=" "current-drag-drop" "and" "if" "key")}
        {Lisp-Entry "find-tab-manager" #f 2971 18 2971 34 ("find-tab-manager" "self" "parent" "not" "get-tab-stops" "or" "if")}
        {Lisp-Entry "navigate-tab" #f 2977 18 2977 30 ("tab-stop-enter" "acquire-focus" "tab-stop-exit" "neq?" "and" "when" "navigated-view" "to" "let" "backward?" "from")}
        {Lisp-Entry "navigated-view" #f 2985 18 2985 32 ("element" "+" "modulo" "1" "-" "0" "=" "if" "new-rank" "find" "rank" "length" "count" "when" "get-tab-stops" "stops" "let" "backward?" "from")}
        {Lisp-Entry "on-next-view" #f 2995 26 2995 38 ("self" "navigate-tab" "find-tab-manager" "manager" "let" "evt")}
        {Lisp-Entry "on-previous-view" #f 3000 26 3000 42 ("self" "navigate-tab" "find-tab-manager" "manager" "let" "evt")}
        {Lisp-Entry "navigate-view" #f 3005 21 3005 34 ("self" "navigate-tab" "find-tab-manager" "manager" "let" "backward?")}
        {Lisp-Entry "get-tab-stops" #f 3010 26 3010 39 ()}
        {Lisp-Entry "tab-stop-enter" #f 3014 26 3014 40 ("select-all")}
        {Lisp-Entry "tab-stop-exit" #f 3018 26 3018 39 ()}
        {Lisp-Entry "on-undo" #f 3027 11 3027 18 ("undo" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-redo" #f 3033 11 3033 18 ("redo" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-cut" #f 3039 11 3039 17 ("cut-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-copy" #f 3045 11 3045 18 ("copy-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-paste" #f 3051 11 3051 19 ("paste-clipboard" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-paste-properties" #f 3057 11 3057 30 ("paste-properties" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-delete" #f 3063 11 3063 20 ("delete-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-rename" #f 3069 11 3069 20 ("rename-selection" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-select-all" #f 3075 11 3075 24 ("select-all" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "can-undo?" #f 3081 26 3081 35 ("can-undo?" "surrogate" "if")}
        {Lisp-Entry "can-redo?" #f 3087 26 3087 35 ("can-redo?" "surrogate" "if")}
        {Lisp-Entry "can-cut?" #f 3093 26 3093 34 ("can-cut?" "surrogate" "if")}
        {Lisp-Entry "can-copy?" #f 3099 26 3099 35 ("can-copy?" "surrogate" "if")}
        {Lisp-Entry "can-paste?" #f 3105 26 3105 36 ("can-paste?" "surrogate" "if")}
        {Lisp-Entry "can-paste-properties?" #f 3111 26 3111 47 ("can-paste-properties?" "surrogate" "if")}
        {Lisp-Entry "can-delete?" #f 3117 26 3117 37 ("can-delete?" "surrogate" "if")}
        {Lisp-Entry "can-rename?" #f 3123 26 3123 37 ("can-rename?" "surrogate" "if")}
        {Lisp-Entry "can-select-all?" #f 3129 26 3129 41 ("can-select-all?" "surrogate" "if")}
        {Lisp-Entry "undo" #f 3135 26 3135 30 ()}
        {Lisp-Entry "redo" #f 3139 26 3139 30 ()}
        {Lisp-Entry "cut-selection" #f 3143 26 3143 39 ()}
        {Lisp-Entry "copy-selection" #f 3147 26 3147 40 ()}
        {Lisp-Entry "paste-clipboard" #f 3151 26 3151 41 ()}
        {Lisp-Entry "paste-properties" #f 3155 26 3155 42 ()}
        {Lisp-Entry "delete-selection" #f 3159 26 3159 42 ()}
        {Lisp-Entry "rename-selection" #f 3163 26 3163 42 ()}
        {Lisp-Entry "select-all" #f 3167 26 3167 36 ("rest")}
        {Lisp-Entry "acquire-capture" #f 3176 18 3176 33 ("get-player" "acquire-capture" "self" "set-captured-view")}
        {Lisp-Entry "release-capture" #f 3181 18 3181 33 ("get-player" "release-capture" "set-captured-view")}
        {Lisp-Entry "get-tooltip?" #f 3191 26 3191 38 ("tooltip?")}
        {Lisp-Entry "set-tooltip?" #f 3195 18 3195 30 ("set!" "tooltip?" "neq?" "when" "flag")}
        {Lisp-Entry "get-tooltip-text" #f 3200 26 3200 42 ("present-shortcut" "format" "require-action-item" "get-shortcut" "shortcut" "action" "not" "or" "if" "tooltip-text" "localize" "text" "let")}
        {Lisp-Entry "set-tooltip-text" #f 3210 18 3210 34 ("tooltip-text" "set!" "text")}
        {Lisp-Entry "get-formatted-tooltip?" #f 3215 26 3215 48 ()}
        {Lisp-Entry "get-tooltip-context" #f 3219 26 3219 45 ("text:" "self" "view:" "Tooltip-Context" "new" "when" "get-tooltip-text" "text" "let" "pos")}
        {Lisp-Entry "get-translated-clipper" #f 3230 11 3230 33 ("rect-intersection" "get-bottom" "set-bottom" "get-right" "set-right" "get-top" "set-top" "get-left" "/" "set-left" "when" "get-v" "position" "get-h" "*" "-" "get-translated-clipper" "p" "with" "1.0" "scaling" "scaled?" "sc" "let" "parent" "not" "if" "fxround" "offset-rect" "r" "get-bounds" "b" "let*" "v" "h")}
        {Lisp-Entry "get-surface" #f 3250 18 3250 29 ("get-bounds" "setup-clipper" "1.0" "0" "get-height" "get-width" "get-v" "get-h" "self" "set-transform" "get-lie" "lie" "get-player" "get-window-surface" "Surface" "new" "surface" "let")}
        {Lisp-Entry "invalidate-view" #f 3263 18 3263 33 ("invalidate-rect" "get-bounds" "bounds" "with")}
        {Lisp-Entry "invalidate-rect" #f 3268 18 3268 33 ("invalidate-rect" "self" "acquire" "acquired" "with" "get-root" "root" "when" "get-player" "player" "let" "rect")}
        {Lisp-Entry "invalidate-region" #f 3277 18 3277 35 ("invalidate-region" "get-v" "get-h" "offset!" "get-lie" "-" "delta" "get-root" "root" "let*" "when" "get-player" "player" "let" "region")}
        {Lisp-Entry "redraw-view" #f 3286 18 3286 29 ("get-bounds" "bounds" "else" "get-v" "get-h" "offset!" "get-lie" "-" "delta" "redraw-window" "self" "acquire" "acquired" "with" "cond" "get-root" "root" "when" "get-player" "player" "let" "region" "region:" "rect" "rect:")}
        {Lisp-Entry "redraw-view-only" #f 3305 18 3305 34 ("self" "platform-redraw-view-only" "get-handle" "hwnd" "when" "get-player" "player" "let")}
        {Lisp-Entry "update-view" #f 3312 18 3312 29 ("update-window" "set-effect" "when" "get-player" "player" "let" "effect" "effect:")}
        {Lisp-Entry "invalidate-border" #f 3324 18 3324 35 ("invalidate-region" "border-region" "region" "with-closed" "get-finished?" "when" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "redraw-border" #f 3330 18 3330 31 ("region:" "redraw-view" "border-region" "region" "with-closed" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "border-region" #f 3335 18 3335 31 ("frame-region" "get-bounds" "bounds" "with" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "on-save" #f 3345 18 3345 25 ("save" "surrogate" "not" "if" "evt")}
        {Lisp-Entry "on-save-as" #f 3351 18 3351 28 ("save-as" "evt")}
        {Lisp-Entry "on-revert-saved" #f 3355 18 3355 33 ("revert-saved" "evt")}
        {Lisp-Entry "on-compare-saved" #f 3359 18 3359 34 ("compare-saved" "evt")}
        {Lisp-Entry "save" #f 3363 26 3363 30 ()}
        {Lisp-Entry "save-as" #f 3367 26 3367 33 ()}
        {Lisp-Entry "save-to" #f 3371 26 3371 33 ("moniker")}
        {Lisp-Entry "revert-saved" #f 3375 26 3375 38 ()}
        {Lisp-Entry "compare-saved" #f 3379 26 3379 39 ()}
        {Lisp-Entry "get-class-image" #f 3388 16 3388 31 ("Bitmap-Resource")}
        {Lisp-Entry "property-presentation" #f 3392 16 3392 37 ("nextmethod" "else" "user-data" "effect" "layer" "offscreen?" "outline-view" "action" "enabled?" "drag-tolerance" "draggable?" "tooltip-text" "tooltip?" "auto-size?" "background" "font" "title" "field-name" "case" "property")}
        {Lisp-Entry "install-surrogate?" #f 3412 11 3412 29 ()}
        {Lisp-Entry "component-surrogate" #f 3416 11 3416 30 ("View-Surrogate")}
        {Lisp-Entry "addable-class?" #f 3420 11 3420 25 ("View" "subtype?" "class")}
        {Lisp-Entry "get-row-class" #f 3424 11 3424 24 ("nextmethod" "else" "action-handler" "selection-handler" "content-change-handler" "tab-press-handler" "return-press-handler" "backspace-press-handler" "escape-press-handler" "arrow-press-handler" "key-press-handler" "context-menu-handler" "receive-files-handler" "receive-drop-handler" "current-drop-handler" "double-click-handler" "drag-up-handler" "drag-move-handler" "mouse-up-handler" "mouse-move-handler" "mouse-down-handler" "mouse-leave-handler" "mouse-hover-handler" "mouse-enter-handler" "Handler-Row" "cursor-update-handler" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 3452 11 3452 27 ("nextmethod" "else" "enabled?" "draggable?" "tooltip?" "offscreen?" "transparent?" "String-Row" "tooltip-text" "Boolean-Row" "auto-size?" "Color-Row" "background" "Font-Row" "font" "Dimension-Row" "size" "Point-Row" "position" "Localized-Row" "new" "title" "field-name" "case" "property")}}}})
"View-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "View-Actions.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.View-Actions" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "View-Actions" #f 46 7 46 19 ("undo-aux" "scroll-down" "extend-down" "Down" "down" "move-down" "extend-right" "Right" "right" "move-right" "scroll-up" "extend-up" "Up" "up" "move-up" "extend-left" "Left" "left" "direction:" "on-arrow" "move-left" ":alt" "on-select-all" "select-all" "Delete" "on-delete" "delete" "on-paste-properties" "paste-properties" "on-paste" "paste" "on-copy" "copy" "on-cut" "cut" "on-redo" "redo" "on-undo" "undo" "on-previous-view" "previous-view" "Tab" "on-next-view" "next-view" "control-shift-return" ":control" "control-return" "shift-return" "Return" "on-return-press" "return" "shift-backspace" "Backspace" "on-backspace-press" "backspace" ":shift" "shift-escape" "Escape" "Shortcut" "shortcut:" "on-escape-press" ":focus" "Event-Handler" "action-handler:" "escape" "name:" "Actions")}}})
"View-Debugger"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "view" "View-Debugger.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.view.View-Debugger" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "View-Debugger" #f 50 7 50 20 ("Object")
        {Lisp-Entry "debug-views" #f 53 18 53 29 ("obscure-unhighlighted?:" "highlight:" "debug-view-menu" "menu:" "debug-view-action" "click:" "pick-figure")}
        {Lisp-Entry "explore-views" #f 60 18 60 31 ("obscure-unhighlighted?:" "highlight:" "debug-view-menu" "menu:" "debug-view-action" "click:" "pick-figure")}
        {Lisp-Entry "debug-view-action" #f 67 11 67 28 ("view-debug" "pos" "view")}
        {Lisp-Entry "describe-view-action" #f 71 11 71 31 ("fresh-prompt" "view-describe" "display-description" "focus?:" "show-console" "get-application" "appl" "let" "pos" "view")}
        {Lisp-Entry "describe-state-action" #f 78 11 78 32 ("fresh-prompt" "view-describe-state" "focus?:" "show-console" "get-guest" "guest" "when" "get-host" "host" "get-application" "appl" "let" "pos" "view")}
        {Lisp-Entry "display-description" #f 88 11 88 30 ("-" "value" "name" "bind" "info" "function" "for-each" ":console" "format" "car" "cardinality" "map" "apply" "max" "let" "description")}
        {Lisp-Entry "on-debug-action" #f 100 18 100 33 ("get-method-name" "get-action-handler" "action-handler" "require-action-item" "action-item" "let*" "edit-action" "class-of" "type-name" "identifier-name" "either" "edit-definitions" "symbol:" "symbol" "object:" "object" "edit" "describe-state-action" "describe-state" "describe-view-action" "describe" "debug-view-action" "debug" "case" "pos:" "pos" "view:" "view" "action:" "get-property" "action" "get-application" "appl" "let" "evt")}}
      {Lisp-Entry "get-tree-user-data" #f 123 13 123 31 ("get-user-data" "user-data" "get-row" "row" "let*" "when" "view->tree" "cell" "let" "pos" "tree")}
      {Lisp-Entry "debug-view-menu" #f 131 13 131 28 ("layout-menu" "symbol:" "edit-action" "'edit-action" "when" "object:" "edit" "'edit" "action:" "list" "properties:" "on-debug-action" "'on-debug-action" "method-name:" "current-view-debugger" "target:" "Event-Handler" "action-handler:" "title:" "Label-Item" "parent:" "Separator-Item" "get-method-name" "get-action-handler" "action-handler" "get-action" "action" "get-tree-user-data" "Tree-View" "is?" "user-data" "get-guest" "essay" "guest" "get-host" "host" "Debug-View-Menu" "new" "menu" "let*" "pos" "view")}
      {Lisp-Entry "Debug-View-Menu" #f 153 7 153 22 ("describe-state" "describe" "Bitmap-Resource" "icon:" "debug" "action:" "on-debug-action" ":view-debugger" "Event-Handler" "action-handler:" "default?:" "title:" "Context-Menu")}}})
"View-Descendants-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "View-Descendants-Editor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.View-Descendants-Editor" #f 37 9 37 53 ("jazz")
      {Lisp-Entry "View-Descendants-Editor" #f 48 7 48 30 ("on-toggle-contents" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "tail" "location:" "22" "Dimension" "size:" "toggle-contents" "tools" "name:" "Descendants-Editor")
        {Lisp-Entry "form-model" #f 58 11 58 21 ("nextmethod" "else" "View-Descendants-Tree" "tree" "get-name" "case" "form")}}}})
"View-Descendants-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "View-Descendants-Tree.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.View-Descendants-Tree" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "View-Descendants-Tree" #f 46 7 46 28 ("Descendants-Tree")
        {Lisp-Entry "show-contents?" #f 49 12 49 26 ("set-show-contents?" "get-show-contents?")}
        {Lisp-Entry "get-show-contents?" #f 57 18 57 36 ("show-contents?")}
        {Lisp-Entry "set-show-contents?" #f 61 18 61 36 ("preserving-update" "show-contents?" "set!" "value")}
        {Lisp-Entry "insert-component" #f 71 11 71 27 ("insert-components" "nextmethod" "apply" "Content-View" "is-not?" "show-contents?" "or" "if" "rest" "level" "update?" "rights" "component" "row")}}}})
"View-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "View-Editor.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.View-Editor" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "View-Editor" #f 51 7 51 18 ("vscroll?:" "hscroll?:" "scroller" "edge" "border-type:" "fill" "center" "on-edit-form" "edit-form" "separator3" "on-toggle-try-out" "try-out" "separator2" "on-toggle-content" "content" "on-toggle-frames" "selected?:" "frames" "12" "separator1" "on-save" "save" "on-open" "open" "on-new" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "22" "new" "north" "location:" "6" "0" "Rect" "layout-insets:" "flow" "33" "300" "Dimension" "size:" "toolbar" "name:" "border" "layout-type:" "Editor-View")
        {Lisp-Entry "mode" #f 54 12 54 16 ("generate" "select" "'select")}
        {Lisp-Entry "overlay" #f 57 18 57 25 ("generate")}
        {Lisp-Entry "showed-property" #f 58 18 58 33 ("generate")}
        {Lisp-Entry "rubber-band?" #f 59 18 59 30 ("generate")}
        {Lisp-Entry "base-view" #f 60 18 60 27 ("generate")}
        {Lisp-Entry "base-position" #f 61 18 61 31 ("generate")}
        {Lisp-Entry "current-position" #f 62 18 62 34 ("generate")}
        {Lisp-Entry "preserved-client" #f 63 18 63 34 ()}
        {Lisp-Entry "host-position" #f 93 16 93 29 ("117" "227" "Point")}
        {Lisp-Entry "host-size" #f 97 16 97 25 ("472" "708" "Dimension")}
        {Lisp-Entry "host-workspaces" #f 101 11 101 26 ("designer")}
        {Lisp-Entry "new-controller" #f 111 11 111 25 ("self" "View-Editor-Controller" "new")}
        {Lisp-Entry "View-Editor-Controller" #f 116 9 116 31 ("Editor-View-Controller")
          {Lisp-Entry "save" #f 120 13 120 17 ("document" "save-content-patch")}}
        {Lisp-Entry "guest-actions" #f 129 11 129 24 ("nextmethod" "view-editor" "'view-editor" "find-actions" "cons")}
        {Lisp-Entry "size-change" #f 139 11 139 22 ("get-height" "get-width" "Dimension" "new" "set-size" "'toolbar" "locate" "toolbar" "let" "nextmethod" "size")}
        {Lisp-Entry "on-new" #f 145 11 145 17 ("evt")}
        {Lisp-Entry "on-open" #f 149 11 149 18 ("open-form" "instantiate" "set-client" "evt")}
        {Lisp-Entry "on-edit-form" #f 153 11 153 23 ("edit-form" "evt")}
        {Lisp-Entry "on-toggle-frames" #f 157 11 157 27 ("invalidate-view" "when" "get-reference" "reference" "let" "evt")}
        {Lisp-Entry "on-toggle-content" #f 163 11 163 28 ("invalidate-view" "when" "get-reference" "reference" "let" "evt")}
        {Lisp-Entry "on-toggle-try-out" #f 169 11 169 28 ("list" "else" "set-client" "set-selection" "client" "set!" "preserved-client" "not" "cond" "function" "with-locked-update" "evt")}
        {Lisp-Entry "client-update" #f 187 11 187 24 ("set-visible?" "client" "when" "install-client" "nextmethod")}
        {Lisp-Entry "install-client-surrogate" #f 194 11 194 35 ("self" "install-surrogate" "client" "when")}
        {Lisp-Entry "install-client" #f 199 29 199 43 ("set-client" "set-parent" "get-parent" "not" "client" "and" "when" "get-content" "essay" "content" "'scroller" "locate-component" "scroller" "let*")}
        {Lisp-Entry "install-current-designer" #f 213 11 213 35 ("get-surrogate" "redraw-border" "nextmethod" "form" "component")}
        {Lisp-Entry "set-showed-property" #f 224 21 224 40 ("client" "invalidate-view" "showed-property" "set!" "property")}
        {Lisp-Entry "show-frames?" #f 234 21 234 33 ("frames" "'frames" "locate" "get-selected?")}
        {Lisp-Entry "show-content?" #f 238 21 238 34 ("content" "'content" "locate" "get-selected?")}
        {Lisp-Entry "start-rubber-band" #f 247 21 247 38 ("setup-overlay" "acquire-capture" "current-position" "base-position" "base-view" "rubber-band?" "set!" "pos" "view")}
        {Lisp-Entry "process-rubber-band" #f 256 21 256 40 ("select-rubber-banded" "rect" "base-position" "corners->rect" "client" "invalidate-rect" "set!" "current-position" "old" "let" "rubber-band?" "when" "pos")}
        {Lisp-Entry "select-rubber-banded" #f 268 11 268 31 ("set-selection" "get-output" "lst" "let" "put" "rects-intersect?" "when" "client" "acquire" "get-bounds" "b" "view" "function" "base-view" "for-each-view" "List-Factory" "new" "selection" "rect-size" "s" "rect-position" "p" "normalize-rect" "r" "let*" "rect")}
        {Lisp-Entry "end-rubber-band" #f 283 21 283 36 ("rubber-band?" "set!" "base-view" "release-capture" "remove-overlay" "base-position" "corners->rect" "select-rubber-banded" "process-rubber-band" "pos")}
        {Lisp-Entry "setup-overlay" #f 296 11 296 24 ("self" "editor:" "client" "parent:" "Client-Overlay" "new" "overlay" "set!")}
        {Lisp-Entry "remove-overlay" #f 300 11 300 25 ("set!" "overlay" "close")}
        {Lisp-Entry "align-left" #f 310 18 310 28 ("cdr" "get-v" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "function" "for-each" "lie-left" "h" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-top" #f 322 18 322 27 ("cdr" "get-h" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "function" "for-each" "lie-top" "v" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-right" #f 334 18 334 29 ("cdr" "get-v" "Point" "new" "set-view-lie" "get-width" "-" "get-lie" "lie" "view" "function" "for-each" "lie-right" "h" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "align-bottom" #f 347 18 347 30 ("cdr" "get-h" "Point" "new" "set-view-lie" "get-height" "-" "get-lie" "lie" "view" "function" "for-each" "lie-bottom" "v" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "center-horizontally" #f 360 18 360 37 ("cdr" "get-v" "Point" "new" "set-view-lie" "-" "fxround/" "+" "get-lie" "lie" "view" "function" "for-each" "get-width" "width" "lie-left" "h" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "center-vertically" #f 374 18 374 35 ("cdr" "get-h" "Point" "new" "set-view-lie" "-" "fxround/" "+" "get-lie" "lie" "view" "function" "for-each" "get-height" "height" "lie-top" "v" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "space-horizontally" #f 388 18 388 36 ("cddr" "get-width" "increase!" "get-v" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "function" "for-each" "+" "h" "lie-right" "lie-left" "-" "dh" "second" "get-surrogate" "outer-client" "first" "let*" "bell" "3" "selection" "length" "<" "if")}
        {Lisp-Entry "space-vertically" #f 403 18 403 34 ("cddr" "get-height" "increase!" "get-h" "Point" "new" "set-view-lie" "get-lie" "lie" "view" "function" "for-each" "+" "v" "lie-bottom" "lie-top" "-" "dv" "second" "get-surrogate" "outer-client" "first" "let*" "bell" "3" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-width" #f 418 18 418 30 ("cdr" "get-height" "Dimension" "new" "'size" "designer" "set-property" "get-size" "size" "view" "function" "for-each" "get-width" "width" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-height" #f 430 18 430 31 ("cdr" "get-width" "Dimension" "new" "'size" "designer" "set-property" "get-size" "size" "view" "function" "for-each" "get-height" "height" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "resize-both" #f 442 18 442 29 ("cdr" "'size" "designer" "set-property" "let" "view" "function" "for-each" "get-size" "size" "car" "get-surrogate" "outer-client" "reference" "let*" "bell" "2" "selection" "length" "<" "if")}
        {Lisp-Entry "lie-left" #f 453 11 453 19 ("get-lie" "get-h" "view")}
        {Lisp-Entry "lie-top" #f 457 11 457 18 ("get-lie" "get-v" "view")}
        {Lisp-Entry "lie-right" #f 461 11 461 20 ("get-width" "get-lie" "get-h" "+" "view")}
        {Lisp-Entry "lie-bottom" #f 465 11 465 21 ("get-height" "get-lie" "get-v" "+" "view")}
        {Lisp-Entry "set-view-lie" #f 469 11 469 23 ("get-position" "position" "'position" "designer" "set-property" "set-lie" "lie" "view")}}
      {Lisp-Entry "Overlay-Outside" #f 479 12 479 27 ("0.8" "alpha:" "234" "blue:" "158" "green:" "96" "red:" "Color")}
      {Lisp-Entry "Overlay-Inside" #f 482 12 482 26 ("0.4" "alpha:" "234" "blue:" "158" "green:" "96" "red:" "Color")}
      {Lisp-Entry "Client-Overlay" #f 486 7 486 21 ("View")
        {Lisp-Entry "editor" #f 489 12 489 18 ()}
        {Lisp-Entry "draw" #f 492 11 492 15 ("Overlay-Inside" "Overlay-Outside" "rectangle" "corners->rect" "rect" "when" "get-current-position" "current" "editor" "get-base-position" "base" "let" "lv" "lh" "context" "surface")}}}})
"View-Editor-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "editor" "View-Editor-Actions.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.editor.View-Editor-Actions" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "View-Editor-Actions" #f 47 7 47 26 ("on-save" "save" "on-open" "open" ":shift" "on-new" ":frame" "new" ":control" "Shortcut" "shortcut:" "on-edit-form" ":document" "Event-Handler" "action-handler:" "edit-form" "name:" "Actions")}}})
"View-Player"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "View-Player.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.View-Player" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "View-Player" #f 48 7 48 18 ("Window")
        {Lisp-Entry "close-root?" #f 51 12 51 23 ("set-close-root?" "get-close-root?")}
        {Lisp-Entry "root" #f 54 8 54 12 ()}
        {Lisp-Entry "previously-focused-view" #f 55 8 55 31 ("generate")}
        {Lisp-Entry "prepare" #f 63 11 63 18 ("destroy-mandatory" "prepare-root" "nextmethod" "rest")}
        {Lisp-Entry "prepare-root" #f 69 29 69 41 ("new-root" "set-root")}
        {Lisp-Entry "new-root" #f 73 29 73 37 ("offscreen?:" "Host-View" "new")}
        {Lisp-Entry "find-to-modify" #f 77 11 77 25 ("nextmethod" "get-root" "root" "'root" "eq?" "if" "test" "name")}
        {Lisp-Entry "get-components" #f 83 11 83 25 ("get-children" "root" "cons")}
        {Lisp-Entry "destroy" #f 92 11 92 18 ("nextmethod" "close-root")}
        {Lisp-Entry "close-root" #f 97 29 97 39 ("set!" "set-player" "root" "close" "close-root?" "if")}
        {Lisp-Entry "erase-background" #f 109 11 109 27 ("nextmethod" "processed" "get-offscreen?" "root" "and" "if" "surface")}
        {Lisp-Entry "get-close-root?" #f 120 18 120 33 ("close-root?")}
        {Lisp-Entry "set-close-root?" #f 124 18 124 33 ("close-root?" "set!" "value")}
        {Lisp-Entry "get-root" #f 128 18 128 26 ("root")}
        {Lisp-Entry "set-root" #f 132 18 132 26 ("layout-window" "self" "set-player" "set-offscreen?" "'root" "set-name" "set!" "root" "neq?" "when" "value")}
        {Lisp-Entry "size-change" #f 146 11 146 22 ("layout-window" "nextmethod" "size")}
        {Lisp-Entry "layout" #f 151 11 151 17 ("get-size" "set-size" "0" "Point" "set-position" "root" "when")}
        {Lisp-Entry "in-error?" #f 162 8 162 17 ()}
        {Lisp-Entry "get-in-error?" #f 165 18 165 31 ("in-error?")}
        {Lisp-Entry "set-in-error?" #f 169 18 169 31 ("invalidate-window" "in-error?" "set!" "flag")}
        {Lisp-Entry "Error-Color" #f 174 14 174 25 ("Dark-Red" "name:" "Color")}
        {Lisp-Entry "paint-in-error" #f 178 11 178 25 ("Error-Color" "fill-rect" "bounds" "surface")}
        {Lisp-Entry "paint" #f 187 11 187 16 ("1.0" "0" "root" "paint" "set!" "paint-in-error" "in-error?" "setup-clipper" "get-box" "Rect" "is?" "if" "clipper" "let" "surface" "function" "self" "with-platform-painting" "platform-data" "region")}
        {Lisp-Entry "receive-files" #f 204 11 204 24 ("processed" "root" "dispatch-receive-files" "in-error?" "unless" "files" "pos")}
        {Lisp-Entry "mouse-down" #f 215 11 215 21 ("processed" "root" "dispatch-mouse-down" "bell" "in-error?" "if" "v" "h")}
        {Lisp-Entry "mouse-move" #f 222 11 222 21 ("processed" "root" "dispatch-mouse-move" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "simulate-mouse-move" #f 228 11 228 30 ("get-v" "get-h" "root" "dispatch-mouse-move" "when" "find-view" "view" "mouse-position" "pos" "let")}
        {Lisp-Entry "mouse-up" #f 235 11 235 19 ("processed" "root" "dispatch-mouse-up" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "double-click" #f 241 11 241 23 ("processed" "root" "dispatch-double-click" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "context-menu" #f 247 11 247 23 ("processed" "root" "dispatch-context-menu" "set-in-error?" "in-error?" "if" "v" "h")}
        {Lisp-Entry "middle-mouse-down" #f 254 11 254 28 ("processed" "root" "dispatch-middle-mouse-down" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "middle-mouse-up" #f 260 11 260 26 ("processed" "root" "dispatch-middle-mouse-up" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "right-mouse-down" #f 266 11 266 27 ("processed" "root" "dispatch-right-mouse-down" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "right-mouse-up" #f 272 11 272 25 ("unprocessed" "root" "dispatch-right-mouse-up" "in-error?" "unless" "v" "h")}
        {Lisp-Entry "for-each-palette" #f 283 18 283 34 ("for-each-palette" "root" "when" "proc")}
        {Lisp-Entry "find-palette" #f 288 18 288 30 ("find-palette" "root" "when" "type")}
        {Lisp-Entry "popup" #f 298 18 298 23 ("get-popups" "cons" "set-popups" "new-popup" "popup" "let" "initargs" "class")}
        {Lisp-Entry "new-popup" #f 304 11 304 20 ("visible?:" "get-overlapped" "owner:" "new" "apply" "initargs" "class")}
        {Lisp-Entry "close-popups" #f 311 18 311 30 ("close-popup" "memq?" "or" "popup" "function" "for-each" "get-owners" "owners" "get-overlapped" "overlapped" "let*" "get-passing-through?" "not" "get-popups" "and" "when" "exclude" "exclude:" "all?" "all?:")}
        {Lisp-Entry "focus-gain" #f 326 11 326 21 ("processed" "acquire-focus" "previously-focused-view" "when" "self" "set-focused-window")}
        {Lisp-Entry "focus-lose" #f 333 11 333 21 ("processed" "set-focused-window" "set-focus" "previously-focused-view" "set!" "self" "get-player" "eq?" "and" "when" "get-focus" "focus" "let" "receiving")}
        {Lisp-Entry "key-press" #f 347 11 347 20 ("processed" "close-popups" "car" "popup-key-press" "unless" "root" "dispatch-key-press" "get-popups" "null?" "Escape-Handler" "eqv?" "and" "if" "char")}}}})
"View-Style"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "text" "View-Style.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.text.View-Style" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "View-Style" #f 45 7 45 17 ("Style")
        {Lisp-Entry "properties" #f 49 14 49 24 ("form:" "alignment:")}
        {Lisp-Entry "form" #f 55 18 55 22 ()}
        {Lisp-Entry "view" #f 56 18 56 22 ()}
        {Lisp-Entry "construct-literal" #f 60 16 60 33 ("self" "new" "apply" "rest" "context")}
        {Lisp-Entry "initialize" #f 64 11 64 21 ("view~self" "set!" "nextmethod" "apply" "others" "view" "bind-keywords" "rest")}
        {Lisp-Entry "compare-object" #f 70 11 70 25 ("else" ":not-equal" "get-view" "view" "eq?" "if" ":equal" "case" "nextmethod" "result" "let" "target")}
        {Lisp-Entry "print" #f 81 11 81 16 ("view" "alignment" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-value" #f 89 11 89 20 ("nextmethod" "else" "form" "form:" "case" "property")}
        {Lisp-Entry "set-value" #f 96 11 96 20 ("nextmethod" "else" "form" "set!" "form:" "case" "value" "property")}
        {Lisp-Entry "get-form" #f 108 18 108 26 ("form")}
        {Lisp-Entry "get-view" #f 112 18 112 26 ("view")}
        {Lisp-Entry "set-view" #f 117 18 117 26 ("view" "set!" "value")}
        {Lisp-Entry "get-width" #f 126 11 126 20 ("view" "get-width")}
        {Lisp-Entry "get-height" #f 130 11 130 21 ("view" "get-height")}
        {Lisp-Entry "run-width" #f 134 11 134 20 ("get-width" "run")}
        {Lisp-Entry "propagate?" #f 143 11 143 21 ()}
        {Lisp-Entry "place-update" #f 152 11 152 23 ("Point" "new" "view" "set-position" "v" "h")}
        {Lisp-Entry "height-update" #f 156 11 156 24 ("Point" "new" "set-position" "get-height" "justify-element" "get-v" "+" "v" "get-h" "h" "view" "get-position" "pos" "let*" "height")}}}})
"View-Surrogate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "surrogate" "View-Surrogate.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.surrogate.View-Surrogate" #f 37 9 37 47 ("jazz")
      {Lisp-Entry "View-Surrogate" #f 55 7 55 21 ("Renderer" "Component-Surrogate")
        {Lisp-Entry "client-renderer" #f 58 18 58 33 ()}
        {Lisp-Entry "client-mouse-down-handler" #f 59 18 59 43 ()}
        {Lisp-Entry "client-drag-move-handler" #f 60 18 60 42 ()}
        {Lisp-Entry "client-drag-up-handler" #f 61 18 61 40 ()}
        {Lisp-Entry "client-double-click-handler" #f 62 18 62 45 ()}
        {Lisp-Entry "client-current-drop-handler" #f 63 18 63 45 ()}
        {Lisp-Entry "client-receive-drop-handler" #f 64 18 64 45 ()}
        {Lisp-Entry "client-context-menu-handler" #f 65 18 65 45 ()}
        {Lisp-Entry "client-cursor-update-handler" #f 66 18 66 46 ()}
        {Lisp-Entry "client-key-press-handler" #f 67 18 67 42 ()}
        {Lisp-Entry "client-arrow-press-handler" #f 68 18 68 44 ()}
        {Lisp-Entry "client-backspace-press-handler" #f 69 18 69 48 ()}
        {Lisp-Entry "dragging?" #f 72 8 72 17 ()}
        {Lisp-Entry "processing?" #f 73 8 73 19 ()}
        {Lisp-Entry "current-part" #f 74 8 74 20 ()}
        {Lisp-Entry "start-position" #f 75 8 75 22 ()}
        {Lisp-Entry "old-position" #f 76 8 76 20 ()}
        {Lisp-Entry "install-handlers" #f 84 11 84 27 ("invalidate-border" "on-backspace-press" "'on-backspace-press" "set-backspace-press-handler" "on-arrow-press" "'on-arrow-press" "set-arrow-press-handler" "on-key-press" "'on-key-press" "set-key-press-handler" "on-cursor-update" "'on-cursor-update" "set-cursor-update-handler" "on-context-menu" "'on-context-menu" "set-context-menu-handler" "on-receive-drop" "'on-receive-drop" "set-receive-drop-handler" "on-current-drop" "'on-current-drop" "set-current-drop-handler" "on-double-click" "'on-double-click" "set-double-click-handler" "on-drag-up" "'on-drag-up" "set-drag-up-handler" "on-drag-move" "'on-drag-move" "set-drag-move-handler" "preserved:" "on-mouse-down" "'on-mouse-down" "method-name:" "target:" "Surrogate-Handler" "new" "set-mouse-down-handler" "self" "set-renderer" "get-backspace-press-handler" "client-backspace-press-handler" "get-arrow-press-handler" "client-arrow-press-handler" "get-key-press-handler" "client-key-press-handler" "get-cursor-update-handler" "client-cursor-update-handler" "get-context-menu-handler" "client-context-menu-handler" "get-receive-drop-handler" "client-receive-drop-handler" "get-current-drop-handler" "client-current-drop-handler" "get-double-click-handler" "client-double-click-handler" "get-drag-up-handler" "client-drag-up-handler" "get-drag-move-handler" "client-drag-move-handler" "get-mouse-down-handler" "client-mouse-down-handler" "client" "get-renderer" "client-renderer" "set!" "nextmethod")}
        {Lisp-Entry "remove-handlers" #f 113 11 113 26 ("invalidate-border" "client-backspace-press-handler" "set-backspace-press-handler" "client-arrow-press-handler" "set-arrow-press-handler" "client-key-press-handler" "set-key-press-handler" "client-cursor-update-handler" "set-cursor-update-handler" "client-context-menu-handler" "set-context-menu-handler" "client-receive-drop-handler" "set-receive-drop-handler" "client-current-drop-handler" "set-current-drop-handler" "client-double-click-handler" "set-double-click-handler" "client-drag-up-handler" "set-drag-up-handler" "client-drag-move-handler" "set-drag-move-handler" "client-mouse-down-handler" "set-mouse-down-handler" "client-renderer" "client" "set-renderer" "nextmethod")}
        {Lisp-Entry "on-save-form" #f 135 11 135 23 ("save-form" "evt")}
        {Lisp-Entry "on-bring-to-front" #f 139 11 139 28 ("bring-to-front" "component" "function" "for-each" "get-selection" "selection" "editor" "get-designer" "designer" "let" "evt")}
        {Lisp-Entry "on-send-to-back" #f 147 11 147 26 ("send-to-back" "component" "function" "for-each" "get-selection" "selection" "editor" "get-designer" "designer" "let" "evt")}
        {Lisp-Entry "on-close-selection" #f 155 11 155 29 ("close-selection" "evt")}
        {Lisp-Entry "on-rename-selected" #f 159 11 159 29 ("get-name" "initial-value:" "Symbol-Request" "class:" "request-name" "set-name" "editor" "get-designer" "designer" "car" "component" "bell" "1" "length" "/=" "if" "get-selection" "selection" "let" "evt")}
        {Lisp-Entry "on-properties" #f 168 11 168 24 ("focus?:" "workspace:" "Properties-Manager" "select-palette" "evt")}
        {Lisp-Entry "Selected-Colors" #f 177 14 177 29 ("Yellow" "Orange" "Red" "name:" "Color")}
        {Lisp-Entry "Selected-Pens" #f 180 14 180 27 ()}
        {Lisp-Entry "Unselected-Color" #f 184 14 184 30 ("Blue" "name:" "Color")}
        {Lisp-Entry "render" #f 188 11 188 17 ("draw" "default-render" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface" "drawing")}
        {Lisp-Entry "default-render" #f 193 11 193 25 ("draw-children" "Outline-View" "is-not?" "or" "draw-content" "draw-background" "when" "editor" "show-content?" "content?" "let" "sc?" "sc" "sv" "sh" "lv" "lh" "context" "surface" "drawing")}
        {Lisp-Entry "draw" #f 203 26 203 30 ("draw-surrogate-frame" "draw-surrogate-selected" "draw-showed-property" "surface")}
        {Lisp-Entry "draw-showed-property" #f 209 18 209 38 ("2" "get-v" "3" "get-h" "+" "draw-text" "White" "-1" "inflate-rect" "fill-rect" "Black" "frame-rect" "position/size->rect" "rect" "get-size" "center" "pos" "4" "7" "Dimension" "nu+" "size" "get-text-extent" "extent" "->string" "string" "read-property" "value" "let*" "Dark-Red" "Color" "set-text-color" "Label" "name:" "Font" "set-font" "client" "class-of" "category-field" "property?" "and" "when" "editor" "get-showed-property" "property" "let" "surface")}
        {Lisp-Entry "draw-surrogate-selected" #f 225 11 225 34 ("0.15" "alpha:" "Dark-Purple" "name:" "Color" "get-bounds" "fill-rect" "editor" "get-selection" "client" "memq" "when" "surface")}
        {Lisp-Entry "draw-surrogate-frame" #f 230 11 230 31 ("-1" "inflate-rect" "inside" "get-reference" "frame-rect" "get-bounds" "outside" "color" "2" "min" "Selected-Colors" "element" "Unselected-Color" "not" "if" "key:" "find" "rank" "frame-color" "get-surrogate" "view" "outer-view" "define" "get-selection" "selection" "let" "client" "outer-client" "eq?" "editor" "show-frames?" "and" "when" "surface")}
        {Lisp-Entry "draw-selected" #f 251 26 251 39 ("-1" "inflate-rect" "inside" "get-reference" "self" "eq?" "when" "frame-rect" "selected-color" "color" "function" "with-clipper" "Black" "name:" "Pen" "line" "selected-pen" "set-pen" "get-bottom" "b" "1" "get-right" "-" "r" "get-top" "t" "get-left" "l" "let" "get-root" "acquired" "get-clipper" "clipper" "editor" "acquire" "outside" "client" "get-bounds" "bounds" "let*" "rank" "surface")}
        {Lisp-Entry "border-region" #f 275 11 275 24 ("2" "Rect" "insets:" "outer-client" "border-region")}
        {Lisp-Entry "invalidate-border" #f 279 11 279 28 ("2" "Rect" "insets:" "outer-client" "invalidate-border")}
        {Lisp-Entry "redraw-border" #f 283 11 283 24 ("2" "Rect" "insets:" "outer-client" "redraw-border")}
        {Lisp-Entry "get-selected-colors" #f 287 11 287 30 ("Selected-Colors")}
        {Lisp-Entry "get-selected-pens" #f 291 11 291 28 ("Selected-Colors" "color:" "alternate" "'alternate" "style:" "Pen" "new" "color" "function" "map" "set!" "Selected-Pens" "null?" "when")}
        {Lisp-Entry "selected-color" #f 299 18 299 32 ("1" "length" "-" "min" "element" "get-selected-colors" "colors" "let" "rank")}
        {Lisp-Entry "selected-pen" #f 304 18 304 30 ("1" "length" "-" "min" "element" "get-selected-pens" "pens" "let" "rank")}
        {Lisp-Entry "on-cursor-update" #f 314 11 314 27 ("get-position" "cursor-update" "evt")}
        {Lisp-Entry "cursor-update" #f 318 26 318 39 ("get-resize-cursor" ":all" "move-client?" ":opened-hand" "grab" ":arrow" "select" "case" ":closed-hand" "dragging?" "get-mouse-down?" "get-client" "not" "get-size" "acquire" "find-resize-part" "size-client?" "current-part" "either" "part" "client" "get-surrogate" "outer-client" "outer" ":cross" "set-cursor" "rect" "'rect" "eq?" "if" "editor" "get-mode" "mode" "let" "pos")}
        {Lisp-Entry "Drag-Tolerance" #f 344 14 344 28 ("3")}
        {Lisp-Entry "on-mouse-down" #f 348 11 348 24 ("grab" "rect" "acquire" "start-rubber-band" "select-in-editor" "select?" "when" "mouse-down" "get-client" "client" "neq?" "if" "select" "case" "get-position" "pos" "editor" "get-mode" "mode" "let" "evt")}
        {Lisp-Entry "on-drag-move" #f 364 11 364 23 ("drag-move" "client" "get-client" "acquire" "process-rubber-band" "editor" "get-rubber-band?" "if" "get-position" "pos" "let" "evt")}
        {Lisp-Entry "on-drag-up" #f 371 11 371 21 ("drag-up" "client" "get-client" "acquire" "end-rubber-band" "editor" "get-rubber-band?" "if" "get-position" "pos" "let" "evt")}
        {Lisp-Entry "on-double-click" #f 378 11 378 26 ("get-position" "double-click" "evt")}
        {Lisp-Entry "on-current-drop" #f 382 11 382 26 ("get-drag-drop" "get-position" "current-drop" "evt")}
        {Lisp-Entry "on-receive-drop" #f 386 11 386 26 ("get-drag-drop" "get-sender" "get-position" "receive-drop" "evt")}
        {Lisp-Entry "on-context-menu" #f 390 11 390 26 ("get-position" "context-menu" "evt")}
        {Lisp-Entry "select?" #f 394 29 394 36 ()}
        {Lisp-Entry "select-in-editor" #f 398 26 398 42 ("client" "editor" "select")}
        {Lisp-Entry "move-client?" #f 402 29 402 41 ()}
        {Lisp-Entry "size-client?" #f 406 29 406 41 ()}
        {Lisp-Entry "some-movable?" #f 410 11 410 24 ("get-surrogate" "move-client?" "client" "function" "some?" "selection")}
        {Lisp-Entry "mouse-down" #f 416 26 416 36 ("acquire-focus" "old-position" "to-desktop" "get-size" "acquire" "find-resize-part" "size-client?" "current-part" "processing?" "get-selection" "some-movable?" "move-client?" "and" "get-surrogate" "outer-client" "outer" "acquire-capture" "start-position" "dragging?" "set!" "editor" "get-client" "client" "eq?" "edit-client" "begin" "alt-down?" "if" "select-in-editor" "select?" "when" "function" "select" "let" "pos")}
        {Lisp-Entry "drag-move" #f 441 26 441 35 ("get-player" "update-window" "size-client" "move-client" "dheight" "dwidth" "function" "resize-client" "NoModifiers" "move-selection" "if" "get-v" "dv" "get-h" "dh" "old-position" "from-desktop" "old-pos" "let*" "set!" "Drag-Tolerance" "distance" ">=" "not" "current-part" "or" "when" "to-desktop" "desktop-pos" "processing?" "client" "scroll" "start-position" "nu-" "delta" "let" "dragging?" "cond" "pos")}
        {Lisp-Entry "drag-up" #f 464 26 464 33 ("verify-position/size" "processing?" "current-part" "set!" "client" "release-capture" "dragging?" "cond" "pos")}
        {Lisp-Entry "verify-position/size" #f 478 11 478 31 ("position" "'position" "size" "'size" "set-property" "minimum-size:" "fit-within" "new-size" "new-position" "receive" "editor" "get-designer" "designer" "get-parent" "get-size" "outer" "get-rect" "rect" "when" "client" "minimal-size" "min-size" "let")}
        {Lisp-Entry "double-click" #f 489 26 489 38 ("edit-client" "pos")}
        {Lisp-Entry "current-drop" #f 493 26 493 38 ("client" "view:" "Drop-Target" "new" "drag-drop" "pos")}
        {Lisp-Entry "receive-drop" #f 497 26 497 38 ("set-showed-property" "editor" "get-showed-property" "eq?" "if" "field-name" "name" "get-property" "property" "set-selection" "Value-Row" "is?" "when" "get-row" "row" "get-source" "source" "Properties-Tree" "add-new" "get-model" "get-module" "module-autoload" "model" "selected-component" "let*" "Toolbox-Tree" "typecase" "drag-drop" "sender" "pos")}
        {Lisp-Entry "add-new" #f 516 18 516 25 ("list" "set-selection" "position:" "add-view" "editor" "get-designer" "designer" "visible?:" "client" "parent:" "new" "child" "let" "centered?" "centered?:" "pos" "model")}
        {Lisp-Entry "context-menu" #f 523 26 523 38 ("track-popup-menu" "layout-menu" "update-context-menu" "get-context-menu" "menu" "let" "client" "acquire-focus" "select-in-editor" "select?" "when" "pos")}
        {Lisp-Entry "get-context-menu" #f 535 26 535 42 ("context-menu-class" "new")}
        {Lisp-Entry "context-menu-class" #f 539 26 539 44 ("Surrogate-Menu")}
        {Lisp-Entry "update-context-menu" #f 543 26 543 45 ("menu")}
        {Lisp-Entry "outer-client" #f 552 11 552 23 ("editor" "get-reference" "client" "outer-view")}
        {Lisp-Entry "move-client" #f 556 11 556 22 ("get-v" "get-h" "+" "Point" "new" "position:" "set-property" "get-position" "pos" "move-client?" "client" "get-surrogate" "outer-client" "outer" "get-designer" "designer" "editor" "get-selection" "selection" "let" "0" "/=" "or" "when" "dv" "dh")}
        {Lisp-Entry "size-client" #f 566 11 566 22 ("update-scrollbars" "get-reference" "client" "eq?" "invalidate-region" "size:" "editor" "get-designer" "set-property" "border-region" "region" "with-closed" "get-height" "get-width" "+" "Dimension" "new" "new-size" "get-size" "size" "outer-client" "outer" "let*" "0" "/=" "or" "when" "dheight" "dwidth")}
        {Lisp-Entry "edit-client" #f 580 29 580 40 ("client" "editor" "edit-component")}
        {Lisp-Entry "on-key-press" #f 589 11 589 23 ("get-key" "key-press" "evt")}
        {Lisp-Entry "key-press" #f 593 26 593 35 ("key")}
        {Lisp-Entry "on-arrow-press" #f 597 11 597 25 ("down" "1" "right" "up" "0" "-1" "move-selection" "left" "direction:" "get-property" "case" "get-modifiers" "modifiers" "let" "evt")}
        {Lisp-Entry "on-backspace-press" #f 606 11 606 29 ("close-selection" "evt")}
        {Lisp-Entry "move-selection" #f 615 11 615 25 ("car" "list" "if" "*" "get-surrogate" "move-client" "view" "function" "for-each" "get-selection" "selection" "move-quantum" "quantum" "and" "single?" "control-key?" "control?" "shift-key?" "shift?" "let*" "modifiers" "dv" "dh")}
        {Lisp-Entry "move-quantum" #f 626 11 626 23 ("1" "8" "if" "shift?")}
        {Lisp-Entry "save-form" #f 637 18 637 27 ("save" "when" "get-selection" "selection" "let")}
        {Lisp-Entry "can-undo?" #f 648 26 648 35 ()}
        {Lisp-Entry "can-redo?" #f 652 26 652 35 ()}
        {Lisp-Entry "can-cut?" #f 656 26 656 34 ()}
        {Lisp-Entry "can-copy?" #f 660 26 660 35 ()}
        {Lisp-Entry "can-paste?" #f 664 26 664 36 ("jazz-parcels" "'jazz-parcels" "clipboard-format-available?")}
        {Lisp-Entry "can-paste-properties?" #f 668 26 668 47 ()}
        {Lisp-Entry "can-delete?" #f 672 26 672 37 ()}
        {Lisp-Entry "can-rename?" #f 676 26 676 37 ()}
        {Lisp-Entry "can-select-all?" #f 680 26 680 41 ()}
        {Lisp-Entry "undo" #f 684 26 684 30 ()}
        {Lisp-Entry "redo" #f 688 26 688 30 ()}
        {Lisp-Entry "cut-selection" #f 692 26 692 39 ("set-selection" "cut-components" "editor" "get-designer" "designer" "get-selection" "selection" "let")}
        {Lisp-Entry "copy-selection" #f 699 26 699 40 ("copy-components" "editor" "get-designer" "designer" "get-selection" "selection" "let")}
        {Lisp-Entry "paste-clipboard" #f 705 26 705 41 ("set-selection" "0" "Point" "position" "'position" "set-property" "view" "function" "for-each" "paste-clipboard" "views" "car" "parent" "editor" "get-designer" "designer" "let*" "bell" "1" "length" "/=" "if" "get-selection" "selection" "let")}
        {Lisp-Entry "paste-properties" #f 718 26 718 42 ()}
        {Lisp-Entry "delete-selection" #f 722 26 722 42 ("close-selection")}
        {Lisp-Entry "rename-selection" #f 726 26 726 42 ()}
        {Lisp-Entry "select-all" #f 730 26 730 36 ("client" "get-children" "set-selection" "rest")}
        {Lisp-Entry "get-component-selection" #f 739 11 739 34 ("get-selection" "get-surrogate" "outer-client" "View" "is?" "if" "component" "function" "map")}
        {Lisp-Entry "select" #f 747 11 747 17 ("redraw-view" "redraw-border" "user-message" "acquire-focus" "client" "bring-to-front" "0" "=" "when" "focus?" "rank")}
        {Lisp-Entry "unselect" #f 759 11 759 19 ("client" "redraw-view" "redraw-border")}}
      {Lisp-Entry "Surrogate-Menu" #f 769 7 769 21 ("properties" "end-close/rename" "rename-selected" "close-selection" "end-layer" "send-to-back" "view-surrogate" "bring-to-front" "end-edition" "paste" "copy" "view" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "cut" "name:" "Context-Menu")}}})
"View-Surrogate-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "surrogate" "View-Surrogate-Actions.jazz"} 1226584778
    {Lisp-Entry "jazz.designer.surrogate.View-Surrogate-Actions" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "View-Surrogate-Actions" #f 47 7 47 29 ("on-properties" "properties" "F2" "Shortcut" "shortcut:" "on-rename-selected" "rename-selected" "on-close-selection" "close-selection" "on-send-to-back" "send-to-back" "on-bring-to-front" ":container" "parent:" "Event-Handler" "action-handler:" "bring-to-front" "name:" "Actions")}}})
"Viewable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "Viewable.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.Viewable" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Viewable" #f 45 11 45 19 ()
        {Lisp-Entry "get-title" #f 48 35 48 44 ()}
        {Lisp-Entry "get-viewer-class" #f 49 35 49 51 ()}}}})
"Violations-Found"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "integrity" "Violations-Found.jazz"} 1226584781
    {Lisp-Entry "jazz.library.integrity.Violations-Found" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Violations-Found" #f 44 7 44 23 ("Signal")
        {Lisp-Entry "design-file" #f 47 8 47 19 ()}
        {Lisp-Entry "architecture" #f 48 8 48 20 ()}
        {Lisp-Entry "violations" #f 49 8 49 18 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("violations~self" "architecture~self" "design-file~self" "set!" "nextmethod" "violations" "architecture" "design-file")}
        {Lisp-Entry "get-design-file" #f 64 18 64 33 ("design-file")}
        {Lisp-Entry "get-architecture" #f 68 18 68 34 ("architecture")}
        {Lisp-Entry "get-violations" #f 72 18 72 32 ("violations")}
        {Lisp-Entry "forwardable?" #f 81 11 81 23 ()}}}})
"Violations-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "integrity" "Violations-Manager.jazz"} 1226584781
    {Lisp-Entry "jazz.library.integrity.Violations-Manager" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Violations-Manager" #f 47 7 47 25 ("337" "location" "toplevel-controls?:" "300" "width:" "title:" "violation" "results" "header" "content" "scroller" "name:" "Navigable-Results")
        {Lisp-Entry "editor" #f 50 8 50 14 ()}
        {Lisp-Entry "external-name" #f 64 16 64 29 ("violations-manager" "'violations-manager" "rest")}
        {Lisp-Entry "host-icon" #f 73 16 73 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 77 16 77 26 ()}
        {Lisp-Entry "client-activate" #f 81 11 81 26 ("set-editor" "Canvas" "get-client" "is?" "and" "if" "get-editor-view" "essay" "editor" "current-document" "guest" "let*")}
        {Lisp-Entry "client-deactivate" #f 89 11 89 28 ("set-editor")}
        {Lisp-Entry "get-client" #f 98 26 98 36 ("get-client" "editor" "when")}
        {Lisp-Entry "get-editor" #f 108 26 108 36 ("editor")}
        {Lisp-Entry "set-editor" #f 112 26 112 36 ("update" "set!" "editor" "neq?" "when" "value")}
        {Lisp-Entry "update" #f 122 18 122 24 ("get-violations" "add-violation" "for-each" "when" "remove-every-row" "function" "with-update-locked" "get-client" "client" "get-tree" "tree" "let")}
        {Lisp-Entry "add-violation" #f 137 11 137 24 ("user-data:" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "add-row" "get-image" "image" "present-location" "location" "present-message" "title" "get-tree" "tree" "let" "violation")}
        {Lisp-Entry "edit-selection" #f 150 11 150 25 ("select-property" "self" "origin:" "list" "set-selection" "get-message" "user-message" "get-path" "follow-component" "component" "error" "find-component" "effective" "let" "/=" "or" "process-branch-changed" "set-active-branch" "null?" "if" "get-active-branch-name" "active" "get-client" "client" "get-editor" "editor" "get-property" "property" "get-branch-presentation" "branch-presentation" "get-branch" "branch-name" "get-row" "get-user-data" "violation" "when" "get-single-selection" "selection" "get-tree" "tree" "let*" "forward?")}}}})
"Walk-Error"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "exception" "Walk-Error.jazz"} 1226584781
    {Lisp-Entry "jazz.library.exception.Walk-Error" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Walk-Error" #f 47 7 47 17 ("Error")
        {Lisp-Entry "category-name" #f 50 8 50 21 ()}
        {Lisp-Entry "problems" #f 51 8 51 16 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("problems~self" "category-name~self" "set!" "nextmethod" "apply" "others" "problems" "category-name" "bind-keywords" "rest")}
        {Lisp-Entry "get-category-name" #f 66 18 66 35 ("category-name")}
        {Lisp-Entry "get-problems" #f 70 18 70 30 ("problems")}}}})
"Wallpaper-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Wallpaper-Actions.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Wallpaper-Actions" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "Wallpaper-Actions" #f 46 7 46 24 ("on-display-info" "display-info" "on-previous" "previous" "on-change" "change" "on-paused" "paused" "on-random" "random" "on-delete-file" "delete-file" "on-add-to-favorite" "add-to-favorite" "stretched" "stretched-mode" "filled" "filled-mode" "tiled" "tiled-mode" ":alt" "centered" "mode:" "on-change-mode" "centered-mode" "Next" "on-next" "next" "Prior" "on-prior" "prior" "End" "on-end" "end" "Home" "on-home" "home" "Space" "Shortcut" "shortcut:" "on-empty" ":stage" "Event-Handler" "action-handler:" "empty" "name:" "Actions")}}})
"Wallpaper-Stage"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "Wallpaper-Stage.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view.Wallpaper-Stage" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Wallpaper-Stage" #f 52 7 52 22 ("tooltip?:" "Stage")
        {Lisp-Entry "image" #f 55 8 55 13 ()}
        {Lisp-Entry "previous" #f 56 8 56 16 ()}
        {Lisp-Entry "wallpapers" #f 57 8 57 18 ()}
        {Lisp-Entry "mode" #f 58 8 58 12 ()}
        {Lisp-Entry "random?" #f 59 8 59 15 ()}
        {Lisp-Entry "browse?" #f 60 8 60 15 ()}
        {Lisp-Entry "configuration" #f 61 8 61 21 ()}
        {Lisp-Entry "choices" #f 62 8 62 15 ()}
        {Lisp-Entry "locator" #f 63 8 63 15 ("1.0" "max-delay:" "Wallpaper-Locator" "new")}
        {Lisp-Entry "changer" #f 64 8 64 15 ()}
        {Lisp-Entry "threads" #f 65 8 65 15 ()}
        {Lisp-Entry "paused?" #f 66 8 66 15 ()}
        {Lisp-Entry "done?" #f 67 8 67 13 ()}
        {Lisp-Entry "preferences" #f 74 11 74 22 ("error?:" "wallpaper" "'wallpaper" "get-preferences")}
        {Lisp-Entry "install-wallpaper" #f 78 11 78 28 ("child" "install-configuration" "get-active" "active" "when" "preferences" "pref" "let")}
        {Lisp-Entry "install-configuration" #f 86 11 86 32 ("get-period" "setup-changer" "changer" "and" "get-startup" "startup-file" "set-source" "get-favorites" "setup-favorites" "get-recursive?" "setup-wallpapers" "Directory" "is?" "dir?" "get-directory" "wallpaper" "let" "get-size" "set-view-size" "get-random?" "set-random?" "get-mode" "set-mode" "cache?:" "Image" "new" "invalidate-view" "wallpapers" "image" "begin" "not" "if" "browse?" "set!" "configuration" "neq?" "when" "brws?" "config")}
        {Lisp-Entry "context-menu" #f 111 11 111 23 ("new-stage-menu" "track-popup-menu" "acquire-focus" "nextmethod" "preferences" "get-children" "null?" "if" "pos")}
        {Lisp-Entry "new-stage-menu" #f 118 11 118 25 ("layout-menu" "if" "set-title" "member?" "favorite?" "get-favorites" "favorites" "get-name" "name" "configuration" "and" "when" "favorite-separator" "'favorite-separator" "favorite" "'favorite" "set-visible?" "get-source" "source" "manage" "'manage" "locate" "get-content" "manage-menu" "Stage-Menu" "new" "menu" "let*")}
        {Lisp-Entry "on-change" #f 134 11 134 20 ("change-wallpaper" "evt")}
        {Lisp-Entry "on-previous" #f 138 11 138 22 ("show-previous" "evt")}
        {Lisp-Entry "on-add-to-favorite" #f 142 11 142 29 ("format" "flash-message" "'favorites" "set-preference" "cons" "remove!" "new-favorites" "member?" "favorite?" "get-favorites" "favorites" "get-name" "name" "let*" "bell" "configuration" "not" "or" "if" "get-source" "source" "let" "evt")}
        {Lisp-Entry "on-delete-file" #f 154 11 154 25 ("change-wallpaper" "choices" "=" "test:" "remove!" "wallpapers" "set!" "get-name" "format" "flash-message" "delete-file" "get-source" "source" "let" "image" "when" "evt")}
        {Lisp-Entry "on-change-mode" #f 165 11 165 25 ("mode:" "get-property" "set-mode" "evt")}
        {Lisp-Entry "size-change" #f 169 11 169 22 ("update-image" "set-view-size" "image" "when" "nextmethod" "size")}
        {Lisp-Entry "update-image" #f 176 11 176 23 ("invalidate-view" "image" "update-image")}
        {Lisp-Entry "get-tooltip-text" #f 181 11 181 27 ("get-mode" "get-height" "get-width" "format" "list" "get-size" "image-size" "get-source" "source" "let" "alt-down?" "control-down?" "image" "and" "when")}
        {Lisp-Entry "get-source" #f 194 11 194 21 ("get-source" "image" "when")}
        {Lisp-Entry "set-source" #f 199 11 199 21 ("update-view" "invalidate-view" "format" "message-box" "else" "exists?" "image" "set-source" "not" "cond" "get-source" "previous" "set!" "file")}
        {Lisp-Entry "set-mode" #f 212 11 212 19 ("invalidate-view" "set-mode" "image" "when" "mode~self" "set!" "mode")}
        {Lisp-Entry "set-random?" #f 219 11 219 22 ("random?" "set!" "flag")}
        {Lisp-Entry "setup-wallpapers" #f 223 11 223 27 ("get-name" "key:" "ci<?" "sort" "wallpapers" "recursive?:" "cons" "set!" "image-file?" "when" "file" "function" "iterate-directory" "files" "let" "recursive?" "dir")}
        {Lisp-Entry "image-file?" #f 233 11 233 22 ("ci=?" "test:" "get-extension" "member?" "file")}
        {Lisp-Entry "setup-favorites" #f 238 11 238 26 ("wallpaper-file" "favorite" "function" "map" "choices" "set!" "favorites" "dir")}
        {Lisp-Entry "startup-file" #f 244 11 244 23 ("next-wallpaper" "else" "wallpaper-file" ":empty" "eq?" "if" "background" "not" "cond" "startup" "dir" "dir?")}
        {Lisp-Entry "setup-changer" #f 250 11 250 24 ("change-wallpaper" "paused?" "unless" "sleep" "done?" "not" "while" "thread" "function" "execute:" "self" "context:" "name:" "Thread" "new" "changer" "set!" "unimplemented" "period")}
        {Lisp-Entry "wallpaper-file" #f 264 11 264 25 ("new-file" "name" "dir")}
        {Lisp-Entry "change-wallpaper" #f 268 18 268 34 ("next-wallpaper" "set-source" "configuration" "when")}
        {Lisp-Entry "show-first" #f 273 11 273 21 ("car" "set-source" "wallpapers" "when" "random?" "unless")}
        {Lisp-Entry "show-last" #f 279 11 279 20 ("last" "set-source" "wallpapers" "when" "random?" "unless")}
        {Lisp-Entry "show-previous" #f 285 11 285 24 ("previous" "set!" "set-source" "when" "previous-wallpaper" "wallpaper" "let")}
        {Lisp-Entry "next-wallpaper" #f 292 11 292 25 ("remove!" "random-element" "wallpaper" "copy" "set!" "choices" "null?" "when" "length" "1" "wallpaper-rank" "+" "modulo" "element" "wallpapers" "car" "get-source" "source" "let" "random?" "not" "if")}
        {Lisp-Entry "previous-wallpaper" #f 306 11 306 29 ("previous" "1" "-" "element" "0" "=" "wallpaper-rank" "rank" "length" "count" "last" "wallpapers" "essay" "get-source" "source" "let" "random?" "not" "if")}
        {Lisp-Entry "wallpaper-rank" #f 319 11 319 25 ("=" "test:" "wallpapers" "find" "wallpaper")}
        {Lisp-Entry "focus-actions" #f 329 11 329 24 ("nextmethod" "wallpaper" "'wallpaper" "find-actions" "cons")}
        {Lisp-Entry "on-empty" #f 339 11 339 19 ("install-configuration" "evt")}
        {Lisp-Entry "on-home" #f 343 11 343 18 ("show-first" "evt")}
        {Lisp-Entry "on-end" #f 347 11 347 17 ("show-last" "evt")}
        {Lisp-Entry "on-prior" #f 351 11 351 19 ("show-previous" "evt")}
        {Lisp-Entry "on-next" #f 355 11 355 18 ("change-wallpaper" "evt")}
        {Lisp-Entry "on-random" #f 359 11 359 20 ("if" "flash-message" "change-wallpaper" "when" "not" "random?" "set!" "evt")}
        {Lisp-Entry "on-paused" #f 366 11 366 20 ("if" "flash-message" "not" "paused?" "set!" "evt")}
        {Lisp-Entry "on-display-info" #f 371 11 371 26 ("2.0" "delay:" "format" "member?" "favorite?" "configuration" "get-favorites" "favorites" "get-name" "name" "let*" "Bitmap-Resource" "not" "if" "flash-message" "get-source" "source" "let" "evt")}
        {Lisp-Entry "flash-message" #f 383 11 383 24 ("clear-user-message" "sleep" "user-message" "thread" "synchronized" "function" "execute:" "self" "context:" "name:" "Thread" "new" "unimplemented" "1.0" "delay" "delay:" "message")}
        {Lisp-Entry "key-press" #f 400 11 400 20 ("locator" "enter" "wallpapers" "alphanumeric?" "and" "when" "key")}
        {Lisp-Entry "draw" #f 410 11 410 15 ("size:" "0" "draw" "image" "when" "get-size" "size" "let" "nextmethod" "lv" "lh" "context" "surface")}
        {Lisp-Entry "on-configure" #f 422 18 422 30 ("install-configuration" "browse-configuration" "eq?" "if" "configuration:" "get-property" "configuration" "let" "evt")}
        {Lisp-Entry "browse-configuration" #f 429 11 429 31 ("get-mode" "mode:" "get-period" "configuration" "essay" "period:" "choose-directory" "directory:" "Wallpaper-Configuration" "new" "install-configuration")}}
      {Lisp-Entry "Wallpaper-Locator" #f 443 7 443 24 ("Locator")
        {Lisp-Entry "iterate" #f 447 11 447 18 ("length" "0" "naturals" "wallpapers" "get-name" "title" "let" "rank" "wallpaper" "function" "for-each" "proc")}
        {Lisp-Entry "select" #f 456 11 456 17 ("wallpapers" "element" "set-source" "rank")}}
      {Lisp-Entry "Stage-Menu" #f 465 7 465 17 ("manage" "manage-separator" "previous" "change" "paused" "slide-separator" "random" "random-separator" "stretched-mode" "stretched" "filled-mode" "filled" "tiled-mode" "tiled" "centered-mode" "wallpaper" "Action" "action:" "centered" "Bitmap-Resource" "icon:" "title:" "configure" "name:" "Context-Menu")
        {Lisp-Entry "finish" #f 489 11 489 17 ("get-name" "set-title" "or" "paused?" "random?" "set-checked?" "manage" "'manage" "manage-separator" "'manage-separator" "previous" "'previous" "change" "'change" "paused" "'paused" "slide-separator" "'slide-separator" "random" "'random" "random-separator" "'random-separator" "set-visible?" "begin" "not" "if" "get-source" "source" "let" "locate" "set-selected?" "mode" "when" "nextmethod" "rest")}}
      {Lisp-Entry "Configure-Menu" #f 515 7 515 21 ("Context-Menu")
        {Lisp-Entry "finish" #f 519 11 519 17 ("update-menu" "nextmethod" "rest")}
        {Lisp-Entry "update-menu" #f 525 18 525 29 ("get-presentation" "get-active?" "config" "function" "for-each" "self" "parent:" "Separator-Item" "new" "when" "preferences" "get-children" "children" "let" "Bitmap-Resource" "insert-item")}
        {Lisp-Entry "insert-item" #f 539 11 539 22 ("configuration:" "list" "properties:" "on-configure" "'on-configure" "method-name:" ":stage" "target-name:" "Event-Handler" "action-handler:" "icon:" "selected?:" "title:" "self" "parent:" "Radio-Item" "new" "configuration" "eq?" "browse?" "if" "selected?" "let" "browse-item?" "config" "icon" "title")}}
      {Lisp-Entry "Manage-Menu" #f 551 7 551 18 ("title:" "delete-file" "favorite-separator" "add-to-favorite" "wallpaper" "Action" "action:" "Bitmap-Resource" "icon:" "favorite" "name:" "Context-Menu")}}})
"Web-Context"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "Web-Context.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.Web-Context" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "Web-Context" #f 44 7 44 18 ("Object")
        {Lisp-Entry "get-pages-associations" #f 47 26 47 48 ()}}}})
"Web-Page"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "Web-Page.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.Web-Page" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Web-Page" #f 45 7 45 15 ("Object")
        {Lisp-Entry "input" #f 48 8 48 13 ()}
        {Lisp-Entry "output" #f 49 8 49 14 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("output~self" "input~self" "set!" "nextmethod" "output" "input")}
        {Lisp-Entry "print" #f 58 11 58 16 ("output" "input" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-input" #f 69 18 69 27 ("input")}
        {Lisp-Entry "set-input" #f 73 18 73 27 ("input" "set!" "value")}
        {Lisp-Entry "get-output" #f 77 18 77 28 ("output")}
        {Lisp-Entry "set-output" #f 81 18 81 28 ("output" "set!" "value")}}}})
"Web-Server"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "Web-Server.jazz"} 1227043164
    {Lisp-Entry "jazz.network.http.Web-Server" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Web-Server" #f 47 7 47 17 ("HTTP-Server")
        {Lisp-Entry "root-directory" #f 50 8 50 22 ()}
        {Lisp-Entry "default-resource" #f 51 8 51 24 ()}
        {Lisp-Entry "unauthentified-resource" #f 52 8 52 31 ()}
        {Lisp-Entry "html-generator" #f 53 8 53 22 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("html-generator~self" "unauthentified-resource~self" "default-resource~self" "root-directory~self" "set!" "nextmethod" "apply" "others" "unauthentified-resource" "default-resource" "root-directory" "bind-keywords" "rest")}
        {Lisp-Entry "get-root-directory" #f 70 18 70 36 ("root-directory")}
        {Lisp-Entry "get-default-resource" #f 74 18 74 38 ("default-resource")}
        {Lisp-Entry "get-unauthentified-resource" #f 78 18 78 45 ("unauthentified-resource")}
        {Lisp-Entry "get-html-generator" #f 82 18 82 36 ("html-generator")}
        {Lisp-Entry "set-html-generator" #f 86 18 86 36 ("html-generator" "set!" "value")}
        {Lisp-Entry "find-file-resource" #f 95 11 95 29 ("exists?" "tokenise-filename" "new-file" "file" "let" "empty-string?" "not" "root-directory" "and" "when" "resource")}
        {Lisp-Entry "generate-response" #f 107 11 107 28 ("process-unknown-file" "else" "process-resource-file" "test:" "member?" "process-html-file" "process-jml-file" "ci=?" "cond" "get-extension" "ext" "nextmethod" "not" "find-file-resource" "file" "process-pages" "needs-authentification?" "bind-optionals" "rest" "pages-class" "bind" "find-pages-info" "pages-info" "find-generator" "generator" "redirect-response" "default-resource" "empty-string?" "and" "if" "get-resource" "resource" "let" "request")}
        {Lisp-Entry "find-generator" #f 129 11 129 25 ("cdr" "not" "if" "get-associations" "assoc" "pair" "let" "resource" "request")}
        {Lisp-Entry "get-associations" #f 136 29 136 45 ()}
        {Lisp-Entry "find-pages-info" #f 145 11 145 26 ("assoc" "get-pages-associations" "associations" "let" "resource")}
        {Lisp-Entry "get-pages-associations" #f 150 29 150 51 ()}
        {Lisp-Entry "process-pages" #f 154 11 154 24 ("generate-pages" "validate-authentification" "get-resource" "redirect-response" "redirect" "HTTP-Redirect" "catch" "needs-authentification?" "pages-class" "resource" "request")}
        {Lisp-Entry "validate-authentification" #f 161 11 161 36 ("unauthentified-resource" "redirect-pages" "get-session" "null?" "and" "when" "needs-authentification?" "request")}
        {Lisp-Entry "generate-pages" #f 166 11 166 25 ("get-output-string" "render" "open-output-string" "printer" "process-request" "jml" "jml-renderer" "renderer" "self" "autoload" "new" "pages" "jml-preferences" "pref" "let*" "call-listeners-receive-pages-request" "generate-static-page" "html-generator" "when" "pages-class" "resource" "request")}
        {Lisp-Entry "generate-static-page" #f 179 11 179 31 ("render" "printer" "function" "parse" "call-with-output-file" "create-directories" "root-directory" "generated-page" "static-file" "process-request" "jml" "jml-renderer" "renderer" "let" "setup-directory" "generate-page?" "when" "self" "autoload" "new" "pages" "jml-preferences" "pref" "let*" "html-generator" "pages-class" "resource" "request")}
        {Lisp-Entry "redirect-pages" #f 198 18 198 32 ("HTTP-Redirect" "new" "throw" "resource")}
        {Lisp-Entry "redirect-response" #f 202 11 202 28 ("add-session-cookie" "format" "add-location" "add-content-type" "add-connection-close" "see-other" "'see-other" "code:" "HTTP-Response" "new" "response" "get-session" "session" "get-header" "host" "let" "resource" "request")}
        {Lisp-Entry "process-jml-file" #f 218 11 218 27 ("process-jml" "read" "jml" "let" "reader" "function" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "file" "request")}
        {Lisp-Entry "process-html-file" #f 230 11 230 28 ("u8-content-size" "add-content-length" "add-content-type" "add-connection-close" "get-content" "content" "file:" "HTTP-File-Response" "new" "response" "let*" "file" "request")}
        {Lisp-Entry "process-resource-file" #f 244 11 244 32 ("u8-content-size" "add-content-length" "add-content-type" "add-connection-close" "get-content" "content" "file:" "HTTP-File-Response" "new" "response" "let*" "file" "request")}
        {Lisp-Entry "process-unknown-file" #f 258 11 258 31 ("request-content" "parse" "format" "file" "request")}}
      {Lisp-Entry "HTTP-Redirect" #f 274 7 274 20 ("Exception")
        {Lisp-Entry "resource" #f 277 8 277 16 ()}
        {Lisp-Entry "initialize" #f 280 11 280 21 ("resource" "set!" "nextmethod" "res")}}}})
"Web-Server-Configuration"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "Web-Server-Configuration.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.Web-Server-Configuration" #f 37 9 37 51 ("jazz")
      {Lisp-Entry "Web-Server-Configuration" #f 45 7 45 31 ("Component")
        {Lisp-Entry "module" #f 48 12 48 18 ("generate")}
        {Lisp-Entry "class" #f 49 12 49 17 ("generate")}
        {Lisp-Entry "host" #f 50 12 50 16 ("generate")}
        {Lisp-Entry "service" #f 51 12 51 19 ("generate")}
        {Lisp-Entry "root-directory" #f 52 12 52 26 ("generate")}
        {Lisp-Entry "default-resource" #f 53 12 53 28 ("generate")}
        {Lisp-Entry "unauthentified-resource" #f 54 12 54 35 ("generate")}
        {Lisp-Entry "description" #f 55 12 55 23 ("generate")}
        {Lisp-Entry "debug?" #f 56 12 56 18 ("generate")}
        {Lisp-Entry "toggle-debug?" #f 64 18 64 31 ("not" "debug?" "set!")}}}})
"Web-Server-Configurations"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "Web-Server-Configurations.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.Web-Server-Configurations" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "Web-Server-Configurations" #f 45 7 45 32 ("Component")}}})
"Web-Servers-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "Web-Servers-Actions.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.Web-Servers-Actions" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Web-Servers-Actions" #f 45 7 45 26 ("on-debug-server" "debug-server" "on-restart-server" "restart-server" "on-stop-server" "stop-server" "on-start-server" "start-server" "on-edit-server" ":guest" "Event-Handler" "action-handler:" "edit-server" "name:" "Actions")}}})
"Web-Servers-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "Web-Servers-Manager.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http.Web-Servers-Manager" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Web-Servers-Manager" #f 52 7 52 26 ("debugged" "hits" "250" "75" "port" "100" "host" "150" "state" "toplevel-controls?:" "200" "width:" "title:" "name" "on-context-menu" "context-menu-handler:" "on-double-click" "double-click-handler:" "on-selection-change" "selection-handler:" "multiple-selection?:" "row" "selection-mode:" "description" "filled-column:" "servers" "shown?:" "header" "fill" "content" "flat?:" "hscroll?:" "vscroll?:" "center" "scroller" "on-refresh" "refresh" "on-debug-server" "debug" "on-restart-server" "restart" "on-stop-server" "stop" "on-start-server" "start" "edit-separator" "on-edit-server" ":form" "Event-Handler" "action-handler:" ":icons" "portfolio:" "Bitmap-Resource" "image-name:" "tooltip-text:" "tooltip?:" "enabled?:" "tail" "location:" "22" "Dimension" "size:" "edit" "tools" "name:" "border" "layout-type:" "Layout-View")
        {Lisp-Entry "configurations" #f 55 8 55 22 ()}
        {Lisp-Entry "servers" #f 56 8 56 15 ("eq?" "test:" "make-table")}
        {Lisp-Entry "external-name" #f 85 16 85 29 ("web-servers-manager" "'web-servers-manager" "rest")}
        {Lisp-Entry "host-icon" #f 94 16 94 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 98 16 98 26 ()}
        {Lisp-Entry "get-tools-view" #f 107 11 107 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 111 11 111 24 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "install" #f 121 11 121 18 ("update-servers" "setup-configurations" "nextmethod" "rest")}
        {Lisp-Entry "get-tree" #f 132 11 132 19 ("servers" "'servers" "locate")}
        {Lisp-Entry "on-edit-server" #f 141 11 141 25 ("selected-configuration" "edit-server" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-start-server" #f 147 11 147 26 ("update-states" "update-tools" "selected-configuration" "start-server" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-stop-server" #f 155 11 155 25 ("update-states" "update-tools" "selected-configuration" "stop-server" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-restart-server" #f 163 11 163 28 ("update-states" "update-tools" "selected-configuration" "restart-server" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-debug-server" #f 171 11 171 26 ("update-states" "update-tools" "selected-configuration" "debug-server" "evt")}
        {Lisp-Entry "on-selection-change" #f 177 11 177 30 ("update-tools" "servers" "get-name" "case" "get-sender" "sender" "let" "evt")}
        {Lisp-Entry "on-refresh" #f 184 11 184 21 ("update-servers" "evt")}
        {Lisp-Entry "update-tools" #f 188 11 188 23 ("get-debug?" "set-selected?" "debug" "'debug" "restart" "'restart" "started" "'started" "stop" "'stop" "stopped" "'stopped" "get-state" "eq?" "not" "or" "and" "start" "'start" "edit" "'edit" "locate" "set-enabled?" "get-name" "find-server" "essay" "server" "selected-configuration" "config" "let*")}
        {Lisp-Entry "on-double-click" #f 199 11 199 26 ("update-states" "update-tools" "selected-configuration" "start/stop-server" "function" ":wait" "with-cursor" "evt")}
        {Lisp-Entry "on-context-menu" #f 207 11 207 26 ("track-popup-menu" "new-servers-menu" "menu" "when" "selected-configuration" "config" "let" "function" "with-context-click" "acquire" "acquired" "get-position" "pos" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "new-servers-menu" #f 219 11 219 27 ("layout-menu" "cleanup-separators" "debug" "'debug" "restart" "'restart" "started" "'started" "and" "stop" "'stop" "stopped" "'stopped" "get-state" "eq?" "not" "or" "start" "'start" "locate" "set-visible?" "get-application" "appl" "find-server" "server" "get-name" "name" "Server-Menu" "new" "menu" "let*" "config")}
        {Lisp-Entry "WebServers-File" #f 238 14 238 29 ("Profile" "File")}
        {Lisp-Entry "setup-configurations" #f 242 11 242 31 ("read-configurations" "configurations" "set!")}
        {Lisp-Entry "read-configurations" #f 246 11 246 30 ("read-from-file" "instantiate" "exists?" "Profile" "'Profile" "find-alias" "and" "when" "WebServers-File" "file" "let")}
        {Lisp-Entry "update-servers" #f 257 11 257 25 ("get-children" "user-data:" "either" "Tree-Label" "image:" "title:" "Tree-Node" "new" "list" "children:" "dynamic" "'dynamic" "state:" "add-row" "get-debug?" "debug?" "get-hits" "0" "hits" "get-description" "description" "state-text" "->string" "title" "stopping" "started" "starting" "Bitmap-Resource" "case" "image" "get-service" "service" "get-host" "host" "get-state" "stopped" "'stopped" "not" "if" "state" "find-server" "server" "get-name" "name" "let*" "config" "for-each" "configurations" "when" "remove-every-row" "function" "with-update-locked" "get-tree" "tree" "let")}
        {Lisp-Entry "update-states" #f 279 11 279 24 ("invalidate-cell" "set-title" "get-cell-data" "set-image" "get-debug?" "debug?" "state-text" "else" "stopping" "started" "starting" "Bitmap-Resource" "case" "image" "get-state" "stopped" "'stopped" "not" "if" "state" "find-server" "server" "get-name" "name" "get-user-data" "config" "6" "c6" "1" "c1" "0" "Cell" "new" "c0" "let*" "rank" "row" "function" "for-each-visible-row" "get-tree" "tree" "let")}
        {Lisp-Entry "start-server" #f 306 11 306 23 ("servers" "table-set!" "error" "error?:" "wait-started" "not" "if" "start" "debug?:" "unauthentified-resource:" "default-resource:" "root-directory:" "service:" "host:" "module-autoload" "new" "server" "get-debug?" "debug?" "get-unauthentified-resource" "unauthentified-resource" "get-default-resource" "default-resource" "get-root-directory" "root-directory" "get-service" "service" "get-host" "host" "get-class" "class" "get-module" "module" "get-name" "name" "let*" "stop-server" "config")}
        {Lisp-Entry "stop-server" #f 324 11 324 22 ("servers" "table-set!" "error" "error?:" "wait-stopped" "not" "if" "stop" "when" "find-server" "server" "get-name" "name" "let*" "config")}
        {Lisp-Entry "restart-server" #f 334 11 334 25 ("start-server" "stop-server" "config")}
        {Lisp-Entry "start/stop-server" #f 339 11 339 28 ("stop-server" "started" "start-server" "case" "get-state" "stopped" "'stopped" "not" "if" "state" "find-server" "server" "get-name" "name" "let*" "config")}
        {Lisp-Entry "debug-server" #f 348 11 348 23 ("get-debug?" "set-debug?" "when" "find-server" "server" "get-name" "name" "let*" "toggle-debug?" "config")}
        {Lisp-Entry "edit-server" #f 356 11 356 22 ("jazz" "'jazz" "context:" "edit-definitions" "get-class" "class" "get-application" "appl" "let" "config")}
        {Lisp-Entry "find-server" #f 362 18 362 29 ("servers" "table-ref" "name")}
        {Lisp-Entry "selected-object" #f 371 11 371 26 ("get-row" "get-user-data" "when" "get-single-selection" "rank" "get-tree" "tree" "let*")}
        {Lisp-Entry "selected-configuration" #f 378 11 378 33 ("Web-Server-Configuration" "is?" "and" "when" "selected-object" "object" "let")}}
      {Lisp-Entry "Server-Menu" #f 389 7 389 18 ("debug-server" "debug" "restart-server" "restart" "stop-server" "stop" "start-server" "start" "edit-server" "web-servers" "Action" "action:" "Bitmap-Resource" "icon:" "title:" "edit" "name:" "Context-Menu")}}})
"WinAdv"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "WinAdv.jazz"} 1226584783
    {Lisp-Entry "WinAdv" #f 37 9 37 15 ("jazz")}})
"WinBase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinBase.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinBase" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "INVALID_HANDLE_VALUE" #f 52 12 52 32 ("-1")}
      {Lisp-Entry "INVALID_FILE_SIZE" #f 53 12 53 29 ("#xFFFFFFFF")}
      {Lisp-Entry "FILE_BEGIN" #f 55 12 55 22 ("0")}
      {Lisp-Entry "FILE_CURRENT" #f 56 12 56 24 ("1")}
      {Lisp-Entry "FILE_END" #f 57 12 57 20 ("2")}
      {Lisp-Entry "FILE_FLAG_WRITE_THROUGH" #f 59 12 59 35 ("#x80000000")}
      {Lisp-Entry "FILE_FLAG_OVERLAPPED" #f 60 12 60 32 ("#x40000000")}
      {Lisp-Entry "FILE_FLAG_NO_BUFFERING" #f 61 12 61 34 ("#x20000000")}
      {Lisp-Entry "FILE_FLAG_RANDOM_ACCESS" #f 62 12 62 35 ("#x10000000")}
      {Lisp-Entry "FILE_FLAG_SEQUENTIAL_SCAN" #f 63 12 63 37 ("#x08000000")}
      {Lisp-Entry "FILE_FLAG_DELETE_ON_CLOSE" #f 64 12 64 37 ("#x04000000")}
      {Lisp-Entry "FILE_FLAG_BACKUP_SEMANTICS" #f 65 12 65 38 ("#x02000000")}
      {Lisp-Entry "FILE_FLAG_POSIX_SEMANTICS" #f 66 12 66 37 ("#x01000000")}
      {Lisp-Entry "FILE_FLAG_OPEN_REPARSE_POINT" #f 67 12 67 40 ("#x00200000")}
      {Lisp-Entry "FILE_FLAG_OPEN_NO_RECALL" #f 68 12 68 36 ("#x00100000")}
      {Lisp-Entry "CREATE_NEW" #f 70 12 70 22 ("1")}
      {Lisp-Entry "CREATE_ALWAYS" #f 71 12 71 25 ("2")}
      {Lisp-Entry "OPEN_EXISTING" #f 72 12 72 25 ("3")}
      {Lisp-Entry "OPEN_ALWAYS" #f 73 12 73 23 ("4")}
      {Lisp-Entry "TRUNCATE_EXISTING" #f 74 12 74 29 ("5")}
      {Lisp-Entry "FORMAT_MESSAGE_ALLOCATE_BUFFER" #f 76 12 76 42 ("#x00000100")}
      {Lisp-Entry "FORMAT_MESSAGE_IGNORE_INSERTS" #f 77 12 77 41 ("#x00000200")}
      {Lisp-Entry "FORMAT_MESSAGE_FROM_STRING" #f 78 12 78 38 ("#x00000400")}
      {Lisp-Entry "FORMAT_MESSAGE_FROM_HMODULE" #f 79 12 79 39 ("#x00000800")}
      {Lisp-Entry "FORMAT_MESSAGE_FROM_SYSTEM" #f 80 12 80 38 ("#x00001000")}
      {Lisp-Entry "FORMAT_MESSAGE_ARGUMENT_ARRAY" #f 81 12 81 41 ("#x00002000")}
      {Lisp-Entry "FORMAT_MESSAGE_MAX_WIDTH_MASK" #f 82 12 82 41 ("#x000000FF")}
      {Lisp-Entry "IGNORE" #f 84 12 84 18 ("0")}
      {Lisp-Entry "INFINITE" #f 85 12 85 20 ("#xFFFFFFFF")}
      {Lisp-Entry "STARTF_USESHOWWINDOW" #f 87 12 87 32 ("#x00000001")}
      {Lisp-Entry "STARTF_USESIZE" #f 88 12 88 26 ("#x00000002")}
      {Lisp-Entry "STARTF_USEPOSITION" #f 89 12 89 30 ("#x00000004")}
      {Lisp-Entry "STARTF_USECOUNTCHARS" #f 90 12 90 32 ("#x00000008")}
      {Lisp-Entry "STARTF_USEFILLATTRIBUTE" #f 91 12 91 35 ("#x00000010")}
      {Lisp-Entry "STARTF_RUNFULLSCREEN" #f 92 12 92 32 ("#x00000020")}
      {Lisp-Entry "STARTF_FORCEONFEEDBACK" #f 93 12 93 34 ("#x00000040")}
      {Lisp-Entry "STARTF_FORCEOFFFEEDBACK" #f 94 12 94 35 ("#x00000080")}
      {Lisp-Entry "STARTF_USESTDHANDLES" #f 95 12 95 32 ("#x00000100")}
      {Lisp-Entry "STARTF_USEHOTKEY" #f 96 12 96 28 ("#x00000200")}
      {Lisp-Entry "DEBUG_PROCESS" #f 98 12 98 25 ("#x00000001")}
      {Lisp-Entry "DEBUG_ONLY_THIS_PROCESS" #f 99 12 99 35 ("#x00000002")}
      {Lisp-Entry "CREATE_SUSPENDED" #f 100 12 100 28 ("#x00000004")}
      {Lisp-Entry "DETACHED_PROCESS" #f 101 12 101 28 ("#x00000008")}
      {Lisp-Entry "CREATE_NEW_CONSOLE" #f 102 12 102 30 ("#x00000010")}
      {Lisp-Entry "NORMAL_PRIORITY_CLASS" #f 103 12 103 33 ("#x00000020")}
      {Lisp-Entry "IDLE_PRIORITY_CLASS" #f 104 12 104 31 ("#x00000040")}
      {Lisp-Entry "HIGH_PRIORITY_CLASS" #f 105 12 105 31 ("#x00000080")}
      {Lisp-Entry "REALTIME_PRIORITY_CLASS" #f 106 12 106 35 ("#x00000100")}
      {Lisp-Entry "CREATE_NEW_PROCESS_GROUP" #f 107 12 107 36 ("#x00000200")}
      {Lisp-Entry "CREATE_UNICODE_ENVIRONMENT" #f 108 12 108 38 ("#x00000400")}
      {Lisp-Entry "CREATE_SEPARATE_WOW_VDM" #f 109 12 109 35 ("#x00000800")}
      {Lisp-Entry "CREATE_SHARED_WOW_VDM" #f 110 12 110 33 ("#x00001000")}
      {Lisp-Entry "CREATE_FORCEDOS" #f 111 12 111 27 ("#x00002000")}
      {Lisp-Entry "CREATE_DEFAULT_ERROR_MODE" #f 112 12 112 37 ("#x04000000")}
      {Lisp-Entry "CREATE_NO_WINDOW" #f 113 12 113 28 ("#x08000000")}
      {Lisp-Entry "MAX_COMPUTERNAME_LENGTH" #f 115 12 115 35 ("15")}
      {Lisp-Entry "GetFileExInfoStandard" #f 117 12 117 33 ("0")}
      {Lisp-Entry "GetFileExMaxInfoLevel" #f 118 12 118 33 ("1")}
      {Lisp-Entry "STD_INPUT_HANDLE" #f 120 12 120 28 ("-10")}
      {Lisp-Entry "STD_OUTPUT_HANDLE" #f 121 12 121 29 ("-11")}
      {Lisp-Entry "STD_ERROR_HANDLE" #f 122 12 122 28 ("-12")}
      {Lisp-Entry "STATUS_WAIT_0" #f 124 12 124 25 ("#x00000000")}
      {Lisp-Entry "STATUS_ABANDONED_WAIT_0" #f 125 12 125 35 ("#x00000080")}
      {Lisp-Entry "STATUS_TIMEOUT" #f 126 12 126 26 ("#x00000102")}
      {Lisp-Entry "WAIT_FAILED" #f 128 12 128 23 ("#xFFFFFFFF")}
      {Lisp-Entry "WAIT_OBJECT_0" #f 129 12 129 25 ("0" "STATUS_WAIT_0" "+")}
      {Lisp-Entry "WAIT_ABANDONED" #f 130 12 130 26 ("0" "STATUS_ABANDONED_WAIT_0" "+")}
      {Lisp-Entry "WAIT_TIMEOUT" #f 131 12 131 24 ("STATUS_TIMEOUT")}
      {Lisp-Entry "LOCALE_SYSTEM_DEFAULT" #f 133 12 133 33 ("#x800")}
      {Lisp-Entry "LOCALE_USER_DEFAULT" #f 134 12 134 31 ("#x400")}
      {Lisp-Entry "CLOCKS_PER_SEC" #f 142 12 142 26 ("1000")}
      {Lisp-Entry "clock_t" #f 145 8 145 15 ("LONG")}
      {Lisp-Entry "system-clock" #f 148 21 148 33 ()}
      {Lisp-Entry "system-clocks/second" #f 151 20 151 40 ("CLOCKS_PER_SEC")}
      {Lisp-Entry "REGCLS" #f 159 15 159 21 ("8" "REGCLS_SURROGATE" "4" "REGCLS_SUSPENDED" "2" "REGCLS_MULTI_SEPARATE" "1" "REGCLS_MULTIPLEUSE" "0" "REGCLS_SINGLEUSE")}
      {Lisp-Entry "OSVERSIONINFO" #f 172 14 172 27 ()}
      {Lisp-Entry "OSVERSIONINFOEX" #f 173 14 173 29 ("wServicePackMinor" "wServicePackMajor" "WORD" "128" "szCSDVersion" "WCHAR" "dwPlatformId" "dwBuildNumber" "dwMinorVersion" "dwMajorVersion" "dwOSVersionInfoSize" "DWORD")}
      {Lisp-Entry "sizeof-OSVERSIONINFOEX" #f 184 12 184 34 ("INT" "c-function")}
      {Lisp-Entry "STARTUPINFO" #f 187 13 187 24 ("hStdError" "hStdOutput" "hStdInput" "HANDLE" "wShowWindow" "WORD" "dwFlags" "dwFillAttribute" "dwYCountChars" "dwXCountChars" "dwYSize" "dwXSize" "dwY" "dwX" "lpTitle" "lpDesktop" "CWSTR" "cb" "DWORD")}
      {Lisp-Entry "PROCESS_INFORMATION" #f 205 13 205 32 ("dwThreadId" "dwProcessId" "DWORD" "hThread" "hProcess" "HANDLE")}
      {Lisp-Entry "SECURITY_ATTRIBUTES" #f 212 13 212 32 ("bInheritHandle" "BOOL" "lpSecurityDescriptor" "VOID*" "nLength" "DWORD")}
      {Lisp-Entry "FILETIME" #f 218 13 218 21 ("dwHighDateTime" "dwLowDateTime" "DWORD")}
      {Lisp-Entry "SYSTEMTIME" #f 223 13 223 23 ("wMilliseconds" "wSecond" "wMinute" "wHour" "wDay" "wDayOfWeek" "wMonth" "wYear" "WORD")}
      {Lisp-Entry "WIN32_FILE_ATTRIBUTE_DATA" #f 234 13 234 38 ("nFileSizeLow" "nFileSizeHigh" "ftLastWriteTime" "ftLastAccessTime" "ftCreationTime" "FILETIME" "dwFileAttributes" "DWORD")}
      {Lisp-Entry "WIN32_FIND_DATA" #f 243 13 243 28 ("14" "cAlternateFileName" "MAX_PATH" "cFileName" "WCHAR" "nFileSizeLow" "nFileSizeHigh" "ftLastWriteTime" "ftLastAccessTime" "ftCreationTime" "FILETIME" "dwFileAttributes" "DWORD")}
      {Lisp-Entry "OVERLAPPED" #f 254 13 254 23 ("hEvent" "HANDLE" "OffsetHigh" "Offset" "InternalHigh" "Internal" "DWORD")}
      {Lisp-Entry "LPOVERLAPPED" #f 262 8 262 20 ("OVERLAPPED*")}
      {Lisp-Entry "GetModuleFileName" #f 265 12 265 29 ("LPTSTR" "c-function")}}})
"WinCtrl"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinCtrl.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinCtrl" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "TME_HOVER" #f 45 14 45 23 ("#x00000001")}
      {Lisp-Entry "TME_LEAVE" #f 46 14 46 23 ("#x00000002")}
      {Lisp-Entry "TME_QUERY" #f 47 14 47 23 ("#x40000000")}
      {Lisp-Entry "TME_CANCEL" #f 48 14 48 24 ("#x80000000")}
      {Lisp-Entry "HOVER_DEFAULT" #f 50 14 50 27 ("#xFFFFFFFF")}
      {Lisp-Entry "CLR_NONE" #f 52 14 52 22 ("#xFFFFFFFF")}
      {Lisp-Entry "CLR_DEFAULT" #f 53 14 53 25 ("#xFF000000")}
      {Lisp-Entry "ILC_MASK" #f 55 14 55 22 ("#x0001")}
      {Lisp-Entry "ILC_COLOR" #f 56 14 56 23 ("#x0000")}
      {Lisp-Entry "ILC_COLORDDB" #f 57 14 57 26 ("#x00FE")}
      {Lisp-Entry "ILC_COLOR4" #f 58 14 58 24 ("#x0004")}
      {Lisp-Entry "ILC_COLOR8" #f 59 14 59 24 ("#x0008")}
      {Lisp-Entry "ILC_COLOR16" #f 60 14 60 25 ("#x0010")}
      {Lisp-Entry "ILC_COLOR24" #f 61 14 61 25 ("#x0018")}
      {Lisp-Entry "ILC_COLOR32" #f 62 14 62 25 ("#x0020")}
      {Lisp-Entry "ILD_NORMAL" #f 64 14 64 24 ("#x0000")}
      {Lisp-Entry "ILD_TRANSPARENT" #f 65 14 65 29 ("#x0001")}
      {Lisp-Entry "ILD_MASK" #f 66 14 66 22 ("#x0010")}
      {Lisp-Entry "ILD_IMAGE" #f 67 14 67 23 ("#x0020")}
      {Lisp-Entry "ILD_ROP" #f 68 14 68 21 ("#x0040")}
      {Lisp-Entry "ILD_BLEND25" #f 69 14 69 25 ("#x0002")}
      {Lisp-Entry "ILD_BLEND50" #f 70 14 70 25 ("#x0004")}
      {Lisp-Entry "ILD_OVERLAYMASK" #f 71 14 71 29 ("#x0F00")}
      {Lisp-Entry "ILD_SELECTED" #f 72 14 72 26 ("ILD_BLEND50")}
      {Lisp-Entry "ILD_FOCUS" #f 73 14 73 23 ("ILD_BLEND25")}
      {Lisp-Entry "ILD_BLEND" #f 74 14 74 23 ("ILD_BLEND50")}}})
"WinDef"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinDef.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinDef" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "NULL" #f 48 12 48 16 ()}
      {Lisp-Entry "FALSE" #f 49 12 49 17 ("0")}
      {Lisp-Entry "TRUE" #f 50 12 50 16 ("1")}
      {Lisp-Entry "MAX_PATH" #f 51 12 51 20 ("260")}
      {Lisp-Entry "EXIT_SUCCESS" #f 54 12 54 24 ("0")}
      {Lisp-Entry "EXIT_FAILURE" #f 55 12 55 24 ("1")}
      {Lisp-Entry "POINT" #f 63 13 63 18 ("y" "x" "INT")}
      {Lisp-Entry "LPPOINT" #f 68 8 68 15 ("POINT*")}
      {Lisp-Entry "POINTS" #f 71 13 71 19 ("y" "x" "SHORT")}
      {Lisp-Entry "SIZE" #f 76 13 76 17 ("cy" "cx" "LONG")}
      {Lisp-Entry "SIZEL" #f 81 8 81 13 ("SIZE")}
      {Lisp-Entry "SIZEL*" #f 82 8 82 14 ("SIZEL" "pointer")}
      {Lisp-Entry "RECT" #f 85 13 85 17 ("bottom" "right" "top" "left" "INT")}
      {Lisp-Entry "LPRECT" #f 92 8 92 14 ("RECT*")}
      {Lisp-Entry "LPCRECT" #f 93 8 93 15 ("RECT*")}
      {Lisp-Entry "RECT->POINTS" #f 96 12 96 24 ("LPPOINT" "LPRECT" "c-function")}
      {Lisp-Entry "RECTL" #f 99 13 99 18 ("bottom" "top" "right" "left" "LONG")}
      {Lisp-Entry "new-POINT" #f 111 20 111 29 ("POINT-y-set!" "POINT-x-set!" "POINT-make" "point" "let" "y" "x")}
      {Lisp-Entry "POINT->point" #f 118 20 118 32 ("POINT-y-ref" "POINT-x-ref" "Point" "new" "not" "if" "pt")}
      {Lisp-Entry "point->POINT" #f 126 20 126 32 ("get-v" "get-h" "new-POINT" "point")}
      {Lisp-Entry "POINT->dimension" #f 130 20 130 36 ("POINT-y-ref" "POINT-x-ref" "Dimension" "new" "not" "if" "pt")}
      {Lisp-Entry "SIZE->dimension" #f 138 20 138 35 ("cy" "'cy" "cx" "'cx" "get" "Dimension" "new" "not" "if" "'<Dimension>" "unimplemented" "size")}
      {Lisp-Entry "new-RECT" #f 148 20 148 28 ("RECT-bottom-set!" "RECT-right-set!" "RECT-top-set!" "inexact->exact" "RECT-left-set!" "RECT-make" "rect" "let" "bottom" "right" "top" "left")}
      {Lisp-Entry "rect->RECT" #f 157 20 157 30 ("get-bottom" "get-right" "get-top" "get-left" "new-RECT" "rect")}
      {Lisp-Entry "RECT->rect" #f 164 20 164 30 ("RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "not" "if" "rect")}}})
"WinDlg"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinDlg.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinDlg" #f 37 9 37 37 ("PAGESETUPDLG*" "PRINTDLG*" "BROWSEINFO*" "OPENFILENAME*" "jazz")
      {Lisp-Entry "OFN_READONLY" #f 54 12 54 24 ("#x00000001")}
      {Lisp-Entry "OFN_OVERWRITEPROMPT" #f 55 12 55 31 ("#x00000002")}
      {Lisp-Entry "OFN_HIDEREADONLY" #f 56 12 56 28 ("#x00000004")}
      {Lisp-Entry "OFN_NOCHANGEDIR" #f 57 12 57 27 ("#x00000008")}
      {Lisp-Entry "OFN_SHOWHELP" #f 58 12 58 24 ("#x00000010")}
      {Lisp-Entry "OFN_ENABLEHOOK" #f 59 12 59 26 ("#x00000020")}
      {Lisp-Entry "OFN_ENABLETEMPLATE" #f 60 12 60 30 ("#x00000040")}
      {Lisp-Entry "OFN_ENABLETEMPLATEHANDLE" #f 61 12 61 36 ("#x00000080")}
      {Lisp-Entry "OFN_NOVALIDATE" #f 62 12 62 26 ("#x00000100")}
      {Lisp-Entry "OFN_ALLOWMULTISELECT" #f 63 12 63 32 ("#x00000200")}
      {Lisp-Entry "OFN_EXTENSIONDIFFERENT" #f 64 12 64 34 ("#x00000400")}
      {Lisp-Entry "OFN_PATHMUSTEXIST" #f 65 12 65 29 ("#x00000800")}
      {Lisp-Entry "OFN_FILEMUSTEXIST" #f 66 12 66 29 ("#x00001000")}
      {Lisp-Entry "OFN_CREATEPROMPT" #f 67 12 67 28 ("#x00002000")}
      {Lisp-Entry "OFN_SHAREAWARE" #f 68 12 68 26 ("#x00004000")}
      {Lisp-Entry "OFN_NOREADONLYRETURN" #f 69 12 69 32 ("#x00008000")}
      {Lisp-Entry "OFN_NOTESTFILECREATE" #f 70 12 70 32 ("#x00010000")}
      {Lisp-Entry "OFN_NONETWORKBUTTON" #f 71 12 71 31 ("#x00020000")}
      {Lisp-Entry "OFN_NOLONGNAMES" #f 72 12 72 27 ("#x00040000")}
      {Lisp-Entry "OFN_EXPLORER" #f 73 12 73 24 ("#x00080000")}
      {Lisp-Entry "OFN_NODEREFERENCELINKS" #f 74 12 74 34 ("#x00100000")}
      {Lisp-Entry "OFN_LONGNAMES" #f 75 12 75 25 ("#x00200000")}
      {Lisp-Entry "OFN_ENABLEINCLUDENOTIFY" #f 76 12 76 35 ("#x00400000")}
      {Lisp-Entry "OFN_ENABLESIZING" #f 77 12 77 28 ("#x00800000")}
      {Lisp-Entry "PD_ALLPAGES" #f 79 12 79 23 ("#x00000000")}
      {Lisp-Entry "PD_SELECTION" #f 80 12 80 24 ("#x00000001")}
      {Lisp-Entry "PD_PAGENUMS" #f 81 12 81 23 ("#x00000002")}
      {Lisp-Entry "PD_NOSELECTION" #f 82 12 82 26 ("#x00000004")}
      {Lisp-Entry "PD_NOPAGENUMS" #f 83 12 83 25 ("#x00000008")}
      {Lisp-Entry "PD_COLLATE" #f 84 12 84 22 ("#x00000010")}
      {Lisp-Entry "PD_PRINTTOFILE" #f 85 12 85 26 ("#x00000020")}
      {Lisp-Entry "PD_PRINTSETUP" #f 86 12 86 25 ("#x00000040")}
      {Lisp-Entry "PD_NOWARNING" #f 87 12 87 24 ("#x00000080")}
      {Lisp-Entry "PD_RETURNDC" #f 88 12 88 23 ("#x00000100")}
      {Lisp-Entry "PD_RETURNIC" #f 89 12 89 23 ("#x00000200")}
      {Lisp-Entry "PD_RETURNDEFAULT" #f 90 12 90 28 ("#x00000400")}
      {Lisp-Entry "PD_SHOWHELP" #f 91 12 91 23 ("#x00000800")}
      {Lisp-Entry "PD_ENABLEPRINTHOOK" #f 92 12 92 30 ("#x00001000")}
      {Lisp-Entry "PD_ENABLESETUPHOOK" #f 93 12 93 30 ("#x00002000")}
      {Lisp-Entry "PD_ENABLEPRINTTEMPLATE" #f 94 12 94 34 ("#x00004000")}
      {Lisp-Entry "PD_ENABLESETUPTEMPLATE" #f 95 12 95 34 ("#x00008000")}
      {Lisp-Entry "PD_ENABLEPRINTTEMPLATEHANDLE" #f 96 12 96 40 ("#x00010000")}
      {Lisp-Entry "PD_ENABLESETUPTEMPLATEHANDLE" #f 97 12 97 40 ("#x00020000")}
      {Lisp-Entry "PD_USEDEVMODECOPIES" #f 98 12 98 31 ("#x00040000")}
      {Lisp-Entry "PD_USEDEVMODECOPIESANDCOLLATE" #f 99 12 99 41 ("#x00040000")}
      {Lisp-Entry "PD_DISABLEPRINTTOFILE" #f 100 12 100 33 ("#x00080000")}
      {Lisp-Entry "PD_HIDEPRINTTOFILE" #f 101 12 101 30 ("#x00100000")}
      {Lisp-Entry "PD_NONETWORKBUTTON" #f 102 12 102 30 ("#x00200000")}
      {Lisp-Entry "PSD_MINMARGINS" #f 104 12 104 26 ("#x00000001")}
      {Lisp-Entry "PSD_MARGINS" #f 105 12 105 23 ("#x00000002")}
      {Lisp-Entry "PSD_INTHOUSANDTHSOFINCHES" #f 106 12 106 37 ("#x00000004")}
      {Lisp-Entry "PSD_INHUNDREDTHSOFMILLIMETERS" #f 107 12 107 41 ("#x00000008")}
      {Lisp-Entry "PSD_DISABLEMARGINS" #f 108 12 108 30 ("#x00000010")}
      {Lisp-Entry "PSD_DISABLEPRINTER" #f 109 12 109 30 ("#x00000020")}
      {Lisp-Entry "PSD_NOWARNING" #f 110 12 110 25 ("#x00000080")}
      {Lisp-Entry "PSD_DISABLEORIENTATION" #f 111 12 111 34 ("#x00000100")}
      {Lisp-Entry "PSD_RETURNDEFAULT" #f 112 12 112 29 ("#x00000400")}
      {Lisp-Entry "PSD_DISABLEPAPER" #f 113 12 113 28 ("#x00000200")}
      {Lisp-Entry "PSD_SHOWHELP" #f 114 12 114 24 ("#x00000800")}
      {Lisp-Entry "PSD_ENABLEPAGESETUPHOOK" #f 115 12 115 35 ("#x00002000")}
      {Lisp-Entry "PSD_ENABLEPAGESETUPTEMPLATE" #f 116 12 116 39 ("#x00008000")}
      {Lisp-Entry "PSD_ENABLEPAGESETUPTEMPLATEHANDLE" #f 117 12 117 45 ("#x00020000")}
      {Lisp-Entry "PSD_ENABLEPAGEPAINTHOOK" #f 118 12 118 35 ("#x00040000")}
      {Lisp-Entry "PSD_DISABLEPAGEPAINTING" #f 119 12 119 35 ("#x00080000")}
      {Lisp-Entry "PSD_NONETWORKBUTTON" #f 120 12 120 31 ("#x00200000")}
      {Lisp-Entry "CC_RGBINIT" #f 122 12 122 22 ("#x00000001")}
      {Lisp-Entry "CC_FULLOPEN" #f 123 12 123 23 ("#x00000002")}
      {Lisp-Entry "CC_PREVENTFULLOPEN" #f 124 12 124 30 ("#x00000004")}
      {Lisp-Entry "CC_SHOWHELP" #f 125 12 125 23 ("#x00000008")}
      {Lisp-Entry "CC_ENABLEHOOK" #f 126 12 126 25 ("#x00000010")}
      {Lisp-Entry "CC_ENABLETEMPLATE" #f 127 12 127 29 ("#x00000020")}
      {Lisp-Entry "CC_ENABLETEMPLATEHANDLE" #f 128 12 128 35 ("#x00000040")}
      {Lisp-Entry "CC_SOLIDCOLOR" #f 129 12 129 25 ("#x00000080")}
      {Lisp-Entry "CC_ANYCOLOR" #f 130 12 130 23 ("#x00000100")}
      {Lisp-Entry "CF_SCREENFONTS" #f 132 12 132 26 ("#x00000001")}
      {Lisp-Entry "CF_PRINTERFONTS" #f 133 12 133 27 ("#x00000002")}
      {Lisp-Entry "CF_BOTH" #f 134 12 134 19 ("CF_PRINTERFONTS" "CF_SCREENFONTS" "bitwise-ior")}
      {Lisp-Entry "CF_SHOWHELP" #f 135 12 135 23 ("#x00000004")}
      {Lisp-Entry "CF_ENABLEHOOK" #f 136 12 136 25 ("#x00000008")}
      {Lisp-Entry "CF_ENABLETEMPLATE" #f 137 12 137 29 ("#x00000010")}
      {Lisp-Entry "CF_ENABLETEMPLATEHANDLE" #f 138 12 138 35 ("#x00000020")}
      {Lisp-Entry "CF_INITTOLOGFONTSTRUCT" #f 139 12 139 34 ("#x00000040")}
      {Lisp-Entry "CF_USESTYLE" #f 140 12 140 23 ("#x00000080")}
      {Lisp-Entry "CF_EFFECTS" #f 141 12 141 22 ("#x00000100")}
      {Lisp-Entry "CF_APPLY" #f 142 12 142 20 ("#x00000200")}
      {Lisp-Entry "CF_ANSIONLY" #f 143 12 143 23 ("#x00000400")}
      {Lisp-Entry "CF_SCRIPTSONLY" #f 144 12 144 26 ("CF_ANSIONLY")}
      {Lisp-Entry "CF_NOVECTORFONTS" #f 145 12 145 28 ("#x00000800")}
      {Lisp-Entry "CF_NOOEMFONTS" #f 146 12 146 25 ("CF_NOVECTORFONTS")}
      {Lisp-Entry "CF_NOSIMULATIONS" #f 147 12 147 28 ("#x00001000")}
      {Lisp-Entry "CF_LIMITSIZE" #f 148 12 148 24 ("#x00002000")}
      {Lisp-Entry "CF_FIXEDPITCHONLY" #f 149 12 149 29 ("#x00004000")}
      {Lisp-Entry "CF_WYSIWYG" #f 150 12 150 22 ("#x00008000")}
      {Lisp-Entry "CF_FORCEFONTEXIST" #f 151 12 151 29 ("#x00010000")}
      {Lisp-Entry "CF_SCALABLEONLY" #f 152 12 152 27 ("#x00020000")}
      {Lisp-Entry "CF_TTONLY" #f 153 12 153 21 ("#x00040000")}
      {Lisp-Entry "CF_NOFACESEL" #f 154 12 154 24 ("#x00080000")}
      {Lisp-Entry "CF_NOSTYLESEL" #f 155 12 155 25 ("#x00100000")}
      {Lisp-Entry "CF_NOSIZESEL" #f 156 12 156 24 ("#x00200000")}
      {Lisp-Entry "CF_SELECTSCRIPT" #f 157 12 157 27 ("#x00400000")}
      {Lisp-Entry "CF_NOSCRIPTSEL" #f 158 12 158 26 ("#x00800000")}
      {Lisp-Entry "CF_NOVERTFONTS" #f 159 12 159 26 ("#x01000000")}
      {Lisp-Entry "OPENFILENAME" #f 167 14 167 26 ("lpTemplateName" "lpfnHook" "VOID*" "lCustData" "LPARAM" "lpstrDefExt" "nFileExtension" "nFileOffset" "WORD" "Flags" "lpstrTitle" "lpstrInitialDir" "nMaxFileTitle" "lpstrFileTitle" "nMaxFile" "WCHAR*" "lpstrFile" "nFilterIndex" "nMaxCustFilter" "lpstrCustomFilter" "LPWSTR" "lpstrFilter" "LPCWSTR" "hInstance" "HINSTANCE" "hwndOwner" "HWND" "lStructSize" "DWORD")}
      {Lisp-Entry "BROWSEINFO" #f 192 14 192 24 ("iImage" "INT" "lParam" "LPARAM" "lpfn" "ulFlags" "UINT" "lpszTitle" "LPCWSTR" "pszDisplayName" "WCHAR*" "pidlRoot" "VOID*" "hwndOwner" "HWND")}
      {Lisp-Entry "PRINTDLG" #f 203 13 203 21 ("hSetupTemplate" "hPrintTemplate" "lpSetupTemplateName" "lpPrintTemplateName" "LPCWSTR" "lpfnSetupHook" "LPSETUPHOOKPROC" "lpfnPrintHook" "LPPRINTHOOKPROC" "lCustData" "hInstance" "HINSTANCE" "nCopies" "nMaxPage" "nMinPage" "nToPage" "nFromPage" "WORD" "Flags" "hDC" "HDC" "hDevNames" "hDevMode" "HANDLE" "hwndOwner" "HWND" "lStructSize" "DWORD")}
      {Lisp-Entry "PAGESETUPDLG" #f 225 13 225 25 ("hPageSetupTemplate" "lpPageSetupTemplateName" "LPCWSTR" "lpfnPagePaintHook" "LPPAGEPAINTHOOK" "lpfnPageSetupHook" "LPPAGESETUPHOOK" "lCustData" "LPARAM" "hInstance" "HINSTANCE" "rtMargin" "rtMinMargin" "RECT" "ptPaperSize" "POINT" "Flags" "hDevNames" "hDevMode" "HGLOBAL" "hwndOwner" "HWND" "lStructSize" "DWORD")}
      {Lisp-Entry "CHOOSECOLOR" #f 243 13 243 24 ("lpTemplateName" "string" "lpfnHook" "lCustData" "Flags" "lpCustColors" "array" "rgbResult" "hInstance" "hwndOwner" "lStructSize" "int")}
      {Lisp-Entry "CHOOSEFONT" #f 256 13 256 23 ("nSizeMax" "nSizeMin" "___MISSING_ALIGNMENT__" "nFontType" "short" "lpszStyle" "hInstance" "lpTemplateName" "string" "lpfnHook" "lCustData" "rgbColors" "Flags" "iPointSize" "lpLogFont" "LOGFONT&" "hDC" "hwndOwner" "lStructSize" "int")}
      {Lisp-Entry "CommDlgExtendedError" #f 280 21 280 41 ()}
      {Lisp-Entry "GetOpenFileName" #f 281 21 281 36 ()}
      {Lisp-Entry "GetSaveFileName" #f 282 21 282 36 ()}
      {Lisp-Entry "SHBrowseForFolder" #f 283 21 283 38 ()}
      {Lisp-Entry "PrintDlg" #f 284 21 284 29 ()}
      {Lisp-Entry "PageSetupDlg" #f 285 21 285 33 ()}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "WinDlg.jazz"} 1226584783
    {Lisp-Entry "WinDlg" #f 37 9 37 15 ("jazz")}})
"WinError"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "WinError.jazz"} 1226584783
    {Lisp-Entry "WinError" #f 37 9 37 17 ("jazz")}})
"WinGDI"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinGDI.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinGDI" #f 37 9 37 37 ("DOCINFO*" "PVOID" "LOGFONTW*" "LPCWSTR" "DWORD" "LPRECT" "HRGN" "LPCRECT" "INT" "HGDIOBJ" "HANDLE" "HDC" "jazz")
      {Lisp-Entry "ANSI_CHARSET" #f 51 12 51 24 ("0")}
      {Lisp-Entry "DEFAULT_CHARSET" #f 52 12 52 27 ("1")}
      {Lisp-Entry "SYMBOL_CHARSET" #f 53 12 53 26 ("2")}
      {Lisp-Entry "TRANSPARENT" #f 55 12 55 23 ("1")}
      {Lisp-Entry "OPAQUE" #f 56 12 56 18 ("2")}
      {Lisp-Entry "RGN_AND" #f 58 12 58 19 ("1")}
      {Lisp-Entry "RGN_OR" #f 59 12 59 18 ("2")}
      {Lisp-Entry "RGN_XOR" #f 60 12 60 19 ("3")}
      {Lisp-Entry "RGN_DIFF" #f 61 12 61 20 ("4")}
      {Lisp-Entry "RGN_COPY" #f 62 12 62 20 ("5")}
      {Lisp-Entry "RGN_MIN" #f 63 12 63 19 ("RGN_AND")}
      {Lisp-Entry "RGN_MAX" #f 64 12 64 19 ("RGN_COPY")}
      {Lisp-Entry "OUT_DEFAULT_PRECIS" #f 66 12 66 30 ("0")}
      {Lisp-Entry "OUT_STRING_PRECIS" #f 67 12 67 29 ("1")}
      {Lisp-Entry "OUT_CHARACTER_PRECIS" #f 68 12 68 32 ("2")}
      {Lisp-Entry "OUT_STROKE_PRECIS" #f 69 12 69 29 ("3")}
      {Lisp-Entry "OUT_TT_PRECIS" #f 70 12 70 25 ("4")}
      {Lisp-Entry "OUT_DEVICE_PRECIS" #f 71 12 71 29 ("5")}
      {Lisp-Entry "OUT_RASTER_PRECIS" #f 72 12 72 29 ("6")}
      {Lisp-Entry "OUT_TT_ONLY_PRECIS" #f 73 12 73 30 ("7")}
      {Lisp-Entry "OUT_OUTLINE_PRECIS" #f 74 12 74 30 ("8")}
      {Lisp-Entry "OUT_SCREEN_OUTLINE_PRECIS" #f 75 12 75 37 ("9")}
      {Lisp-Entry "CLIP_DEFAULT_PRECIS" #f 77 12 77 31 ("0")}
      {Lisp-Entry "CLIP_CHARACTER_PRECIS" #f 78 12 78 33 ("1")}
      {Lisp-Entry "CLIP_STROKE_PRECIS" #f 79 12 79 30 ("2")}
      {Lisp-Entry "DEFAULT_QUALITY" #f 81 12 81 27 ("0")}
      {Lisp-Entry "DRAFT_QUALITY" #f 82 12 82 25 ("1")}
      {Lisp-Entry "PROOF_QUALITY" #f 83 12 83 25 ("2")}
      {Lisp-Entry "NONANTIALIASED_QUALITY" #f 84 12 84 34 ("3")}
      {Lisp-Entry "ANTIALIASED_QUALITY" #f 85 12 85 31 ("4")}
      {Lisp-Entry "DEFAULT_PITCH" #f 87 12 87 25 ("0")}
      {Lisp-Entry "FIXED_PITCH" #f 88 12 88 23 ("1")}
      {Lisp-Entry "VARIABLE_PITCH" #f 89 12 89 26 ("2")}
      {Lisp-Entry "MONO_FONT" #f 90 12 90 21 ("8")}
      {Lisp-Entry "GM_COMPATIBLE" #f 92 12 92 25 ("1")}
      {Lisp-Entry "GM_ADVANCED" #f 93 12 93 23 ("2")}
      {Lisp-Entry "MM_TEXT" #f 95 12 95 19 ("1")}
      {Lisp-Entry "MM_LOMETRIC" #f 96 12 96 23 ("2")}
      {Lisp-Entry "MM_HIMETRIC" #f 97 12 97 23 ("3")}
      {Lisp-Entry "MM_LOENGLISH" #f 98 12 98 24 ("4")}
      {Lisp-Entry "MM_HIENGLISH" #f 99 12 99 24 ("5")}
      {Lisp-Entry "MM_TWIPS" #f 100 12 100 20 ("6")}
      {Lisp-Entry "MM_ISOTROPIC" #f 101 12 101 24 ("7")}
      {Lisp-Entry "MM_ANISOTROPIC" #f 102 12 102 26 ("8")}
      {Lisp-Entry "BS_SOLID" #f 104 12 104 20 ("0")}
      {Lisp-Entry "BS_NULL" #f 105 12 105 19 ("1")}
      {Lisp-Entry "BS_HOLLOW" #f 106 12 106 21 ("BS_NULL")}
      {Lisp-Entry "BS_HATCHED" #f 107 12 107 22 ("2")}
      {Lisp-Entry "BS_PATTERN" #f 108 12 108 22 ("3")}
      {Lisp-Entry "BS_INDEXED" #f 109 12 109 22 ("4")}
      {Lisp-Entry "BS_DIBPATTERN" #f 110 12 110 25 ("5")}
      {Lisp-Entry "BS_DIBPATTERNPT" #f 111 12 111 27 ("6")}
      {Lisp-Entry "BS_PATTERN8X8" #f 112 12 112 25 ("7")}
      {Lisp-Entry "BS_DIBPATTERN8X8" #f 113 12 113 28 ("8")}
      {Lisp-Entry "BS_MONOPATTERN" #f 114 12 114 26 ("9")}
      {Lisp-Entry "HS_HORIZONTAL" #f 116 12 116 25 ("0")}
      {Lisp-Entry "HS_VERTICAL" #f 117 12 117 23 ("1")}
      {Lisp-Entry "HS_FDIAGONAL" #f 118 12 118 24 ("2")}
      {Lisp-Entry "HS_BDIAGONAL" #f 119 12 119 24 ("3")}
      {Lisp-Entry "HS_CROSS" #f 120 12 120 20 ("4")}
      {Lisp-Entry "HS_DIAGCROSS" #f 121 12 121 24 ("5")}
      {Lisp-Entry "PS_SOLID" #f 123 12 123 20 ("0")}
      {Lisp-Entry "PS_DASH" #f 124 12 124 19 ("1")}
      {Lisp-Entry "PS_DOT" #f 125 12 125 18 ("2")}
      {Lisp-Entry "PS_DASHDOT" #f 126 12 126 22 ("3")}
      {Lisp-Entry "PS_DASHDOTDOT" #f 127 12 127 25 ("4")}
      {Lisp-Entry "PS_NULL" #f 128 12 128 19 ("5")}
      {Lisp-Entry "PS_INSIDEFRAME" #f 129 12 129 26 ("6")}
      {Lisp-Entry "PS_USERSTYLE" #f 130 12 130 24 ("7")}
      {Lisp-Entry "PS_ALTERNATE" #f 131 12 131 24 ("8")}
      {Lisp-Entry "PS_COSMETIC" #f 133 12 133 23 ("#x00000000")}
      {Lisp-Entry "PS_GEOMETRIC" #f 134 12 134 24 ("#x00010000")}
      {Lisp-Entry "WHITE_BRUSH" #f 136 12 136 23 ("0")}
      {Lisp-Entry "LTGRAY_BRUSH" #f 137 12 137 24 ("1")}
      {Lisp-Entry "GRAY_BRUSH" #f 138 12 138 22 ("2")}
      {Lisp-Entry "DKGRAY_BRUSH" #f 139 12 139 24 ("3")}
      {Lisp-Entry "BLACK_BRUSH" #f 140 12 140 23 ("4")}
      {Lisp-Entry "NULL_BRUSH" #f 141 12 141 22 ("5")}
      {Lisp-Entry "HOLLOW_BRUSH" #f 142 12 142 24 ("NULL_BRUSH")}
      {Lisp-Entry "WHITE_PEN" #f 143 12 143 21 ("6")}
      {Lisp-Entry "BLACK_PEN" #f 144 12 144 21 ("7")}
      {Lisp-Entry "NULL_PEN" #f 145 12 145 20 ("8")}
      {Lisp-Entry "OEM_FIXED_FONT" #f 146 12 146 26 ("10")}
      {Lisp-Entry "ANSI_FIXED_FONT" #f 147 12 147 27 ("11")}
      {Lisp-Entry "ANSI_VAR_FONT" #f 148 12 148 25 ("12")}
      {Lisp-Entry "SYSTEM_FONT" #f 149 12 149 23 ("13")}
      {Lisp-Entry "DEVICE_DEFAULT_FONT" #f 150 12 150 31 ("14")}
      {Lisp-Entry "DEFAULT_PALETTE" #f 151 12 151 27 ("15")}
      {Lisp-Entry "SYSTEM_FIXED_FONT" #f 152 12 152 29 ("16")}
      {Lisp-Entry "DEFAULT_GUI_FONT" #f 153 12 153 28 ("17")}
      {Lisp-Entry "FW_DONTCARE" #f 155 12 155 23 ("0")}
      {Lisp-Entry "FW_THIN" #f 156 12 156 19 ("100")}
      {Lisp-Entry "FW_EXTRALIGHT" #f 157 12 157 25 ("200")}
      {Lisp-Entry "FW_LIGHT" #f 158 12 158 20 ("300")}
      {Lisp-Entry "FW_NORMAL" #f 159 12 159 21 ("400")}
      {Lisp-Entry "FW_MEDIUM" #f 160 12 160 21 ("500")}
      {Lisp-Entry "FW_SEMIBOLD" #f 161 12 161 23 ("600")}
      {Lisp-Entry "FW_BOLD" #f 162 12 162 19 ("700")}
      {Lisp-Entry "FW_EXTRABOLD" #f 163 12 163 24 ("800")}
      {Lisp-Entry "FW_HEAVY" #f 164 12 164 20 ("900")}
      {Lisp-Entry "FW_ULTRALIGHT" #f 165 12 165 25 ("FW_EXTRALIGHT")}
      {Lisp-Entry "FW_REGULAR" #f 166 12 166 22 ("FW_NORMAL")}
      {Lisp-Entry "FW_DEMIBOLD" #f 167 12 167 23 ("FW_SEMIBOLD")}
      {Lisp-Entry "FW_ULTRABOLD" #f 168 12 168 24 ("FW_EXTRABOLD")}
      {Lisp-Entry "FW_BLACK" #f 169 12 169 20 ("FW_HEAVY")}
      {Lisp-Entry "SRCCOPY" #f 171 12 171 19 ("#x00CC0020")}
      {Lisp-Entry "SRCPAINT" #f 172 12 172 20 ("#x00EE0086")}
      {Lisp-Entry "SRCAND" #f 173 12 173 18 ("#x008800C6")}
      {Lisp-Entry "SRCINVERT" #f 174 12 174 21 ("#x00660046")}
      {Lisp-Entry "SRCERASE" #f 175 12 175 20 ("#x00440328")}
      {Lisp-Entry "NOTSRCCOPY" #f 176 12 176 22 ("#x00330008")}
      {Lisp-Entry "NOTSRCERASE" #f 177 12 177 23 ("#x001100A6")}
      {Lisp-Entry "MERGECOPY" #f 178 12 178 21 ("#x00C000CA")}
      {Lisp-Entry "MERGEPAINT" #f 179 12 179 22 ("#x00BB0226")}
      {Lisp-Entry "PATCOPY" #f 180 12 180 19 ("#x00F00021")}
      {Lisp-Entry "PATPAINT" #f 181 12 181 20 ("#x00FB0A09")}
      {Lisp-Entry "PATINVERT" #f 182 12 182 21 ("#x005A0049")}
      {Lisp-Entry "DSTINVERT" #f 183 12 183 21 ("#x00550009")}
      {Lisp-Entry "BLACKNESS" #f 184 12 184 21 ("#x00000042")}
      {Lisp-Entry "WHITENESS" #f 185 12 185 21 ("#x00FF0062")}
      {Lisp-Entry "OBJ_PEN" #f 187 12 187 19 ("1")}
      {Lisp-Entry "OBJ_BRUSH" #f 188 12 188 21 ("2")}
      {Lisp-Entry "OBJ_DC" #f 189 12 189 18 ("3")}
      {Lisp-Entry "OBJ_METADC" #f 190 12 190 22 ("4")}
      {Lisp-Entry "OBJ_PAL" #f 191 12 191 19 ("5")}
      {Lisp-Entry "OBJ_FONT" #f 192 12 192 20 ("6")}
      {Lisp-Entry "OBJ_BITMAP" #f 193 12 193 22 ("7")}
      {Lisp-Entry "OBJ_REGION" #f 194 12 194 22 ("8")}
      {Lisp-Entry "OBJ_METAFILE" #f 195 12 195 24 ("9")}
      {Lisp-Entry "OBJ_MEMDC" #f 196 12 196 21 ("10")}
      {Lisp-Entry "OBJ_EXTPEN" #f 197 12 197 22 ("11")}
      {Lisp-Entry "OBJ_ENHMETADC" #f 198 12 198 25 ("12")}
      {Lisp-Entry "OBJ_ENHMETAFILE" #f 199 12 199 27 ("13")}
      {Lisp-Entry "R2_BLACK" #f 201 12 201 20 ("1")}
      {Lisp-Entry "R2_NOTMERGEPEN" #f 202 12 202 26 ("2")}
      {Lisp-Entry "R2_MASKNOTPEN" #f 203 12 203 25 ("3")}
      {Lisp-Entry "R2_NOTCOPYPEN" #f 204 12 204 25 ("4")}
      {Lisp-Entry "R2_MASKPENNOT" #f 205 12 205 25 ("5")}
      {Lisp-Entry "R2_NOT" #f 206 12 206 18 ("6")}
      {Lisp-Entry "R2_XORPEN" #f 207 12 207 21 ("7")}
      {Lisp-Entry "R2_NOTMASKPEN" #f 208 12 208 25 ("8")}
      {Lisp-Entry "R2_MASKPEN" #f 209 12 209 22 ("9")}
      {Lisp-Entry "R2_NOTXORPEN" #f 210 12 210 24 ("10")}
      {Lisp-Entry "R2_NOP" #f 211 12 211 18 ("11")}
      {Lisp-Entry "R2_MERGENOTPEN" #f 212 12 212 26 ("12")}
      {Lisp-Entry "R2_COPYPEN" #f 213 12 213 22 ("13")}
      {Lisp-Entry "R2_MERGEPENNOT" #f 214 12 214 26 ("14")}
      {Lisp-Entry "R2_MERGEPEN" #f 215 12 215 23 ("15")}
      {Lisp-Entry "R2_WHITE" #f 216 12 216 20 ("16")}
      {Lisp-Entry "R2_LAST" #f 217 12 217 19 ("16")}
      {Lisp-Entry "ETO_OPAQUE" #f 219 12 219 22 ("#x0002")}
      {Lisp-Entry "ETO_CLIPPED" #f 220 12 220 23 ("#x0004")}
      {Lisp-Entry "ETO_GLYPH_INDEX" #f 221 12 221 27 ("#x0010")}
      {Lisp-Entry "ETO_RTLREADING" #f 222 12 222 26 ("#x0080")}
      {Lisp-Entry "ETO_NUMERICSLOCAL" #f 223 12 223 29 ("#x0400")}
      {Lisp-Entry "ETO_NUMERICSLATIN" #f 224 12 224 29 ("#x0800")}
      {Lisp-Entry "ETO_IGNORELANGUAGE" #f 225 12 225 30 ("#x1000")}
      {Lisp-Entry "DRIVERVERSION" #f 227 12 227 25 ("0")}
      {Lisp-Entry "TECHNOLOGY" #f 228 12 228 22 ("2")}
      {Lisp-Entry "HORZSIZE" #f 229 12 229 20 ("4")}
      {Lisp-Entry "VERTSIZE" #f 230 12 230 20 ("6")}
      {Lisp-Entry "HORZRES" #f 231 12 231 19 ("8")}
      {Lisp-Entry "VERTRES" #f 232 12 232 19 ("10")}
      {Lisp-Entry "BITSPIXEL" #f 233 12 233 21 ("12")}
      {Lisp-Entry "PLANES" #f 234 12 234 18 ("14")}
      {Lisp-Entry "NUMBRUSHES" #f 235 12 235 22 ("16")}
      {Lisp-Entry "NUMPENS" #f 236 12 236 19 ("18")}
      {Lisp-Entry "NUMMARKERS" #f 237 12 237 22 ("20")}
      {Lisp-Entry "NUMFONTS" #f 238 12 238 20 ("22")}
      {Lisp-Entry "NUMCOLORS" #f 239 12 239 21 ("24")}
      {Lisp-Entry "PDEVICESIZE" #f 240 12 240 23 ("26")}
      {Lisp-Entry "CURVECAPS" #f 241 12 241 21 ("28")}
      {Lisp-Entry "LINECAPS" #f 242 12 242 20 ("30")}
      {Lisp-Entry "POLYGONALCAPS" #f 243 12 243 25 ("32")}
      {Lisp-Entry "TEXTCAPS" #f 244 12 244 20 ("34")}
      {Lisp-Entry "CLIPCAPS" #f 245 12 245 20 ("36")}
      {Lisp-Entry "RASTERCAPS" #f 246 12 246 22 ("38")}
      {Lisp-Entry "ASPECTX" #f 247 12 247 19 ("40")}
      {Lisp-Entry "ASPECTY" #f 248 12 248 19 ("42")}
      {Lisp-Entry "ASPECTXY" #f 249 12 249 20 ("44")}
      {Lisp-Entry "SHADEBLENDCAPS" #f 250 12 250 26 ("45")}
      {Lisp-Entry "LOGPIXELSX" #f 251 12 251 22 ("88")}
      {Lisp-Entry "LOGPIXELSY" #f 252 12 252 22 ("90")}
      {Lisp-Entry "SIZEPALETTE" #f 253 12 253 23 ("104")}
      {Lisp-Entry "NUMRESERVED" #f 254 12 254 23 ("106")}
      {Lisp-Entry "COLORRES" #f 255 12 255 20 ("108")}
      {Lisp-Entry "PHYSICALWIDTH" #f 256 12 256 25 ("110")}
      {Lisp-Entry "PHYSICALHEIGHT" #f 257 12 257 26 ("111")}
      {Lisp-Entry "PHYSICALOFFSETX" #f 258 12 258 27 ("112")}
      {Lisp-Entry "PHYSICALOFFSETY" #f 259 12 259 27 ("113")}
      {Lisp-Entry "SCALINGFACTORX" #f 260 12 260 26 ("114")}
      {Lisp-Entry "SCALINGFACTORY" #f 261 12 261 26 ("115")}
      {Lisp-Entry "VREFRESH" #f 262 12 262 20 ("116")}
      {Lisp-Entry "DESKTOPVERTRES" #f 263 12 263 26 ("117")}
      {Lisp-Entry "DESKTOPHORZRES" #f 264 12 264 26 ("118")}
      {Lisp-Entry "BLTALIGNMENT" #f 265 12 265 24 ("119")}
      {Lisp-Entry "LF_FACESIZE" #f 268 12 268 23 ("32")}
      {Lisp-Entry "DM_ORIENTATION" #f 271 12 271 26 ("#x00000001")}
      {Lisp-Entry "DM_PAPERSIZE" #f 272 12 272 24 ("#x00000002")}
      {Lisp-Entry "DM_PAPERLENGTH" #f 273 12 273 26 ("#x00000004")}
      {Lisp-Entry "DM_PAPERWIDTH" #f 274 12 274 25 ("#x00000008")}
      {Lisp-Entry "DM_SCALE" #f 275 12 275 20 ("#x00000010")}
      {Lisp-Entry "DM_POSITION" #f 276 12 276 23 ("#x00000020")}
      {Lisp-Entry "DM_COPIES" #f 277 12 277 21 ("#x00000100")}
      {Lisp-Entry "DM_DEFAULTSOURCE" #f 278 12 278 28 ("#x00000200")}
      {Lisp-Entry "DM_PRINTQUALITY" #f 279 12 279 27 ("#x00000400")}
      {Lisp-Entry "DM_COLOR" #f 280 12 280 20 ("#x00000800")}
      {Lisp-Entry "DM_DUPLEX" #f 281 12 281 21 ("#x00001000")}
      {Lisp-Entry "DM_YRESOLUTION" #f 282 12 282 26 ("#x00002000")}
      {Lisp-Entry "DM_TTOPTION" #f 283 12 283 23 ("#x00004000")}
      {Lisp-Entry "DM_COLLATE" #f 284 12 284 22 ("#x00008000")}
      {Lisp-Entry "DM_FORMNAME" #f 285 12 285 23 ("#x00010000")}
      {Lisp-Entry "DM_LOGPIXELS" #f 286 12 286 24 ("#x00020000")}
      {Lisp-Entry "DM_BITSPERPEL" #f 287 12 287 25 ("#x00040000")}
      {Lisp-Entry "DM_PELSWIDTH" #f 288 12 288 24 ("#x00080000")}
      {Lisp-Entry "DM_PELSHEIGHT" #f 289 12 289 25 ("#x00100000")}
      {Lisp-Entry "DM_DISPLAYFLAGS" #f 290 12 290 27 ("#x00200000")}
      {Lisp-Entry "DM_DISPLAYFREQUENCY" #f 291 12 291 31 ("#x00400000")}
      {Lisp-Entry "DM_ICMMETHOD" #f 292 12 292 24 ("#x00800000")}
      {Lisp-Entry "DM_ICMINTENT" #f 293 12 293 24 ("#x01000000")}
      {Lisp-Entry "DM_MEDIATYPE" #f 294 12 294 24 ("#x02000000")}
      {Lisp-Entry "DM_DITHERTYPE" #f 295 12 295 25 ("#x04000000")}
      {Lisp-Entry "DM_PANNINGWIDTH" #f 296 12 296 27 ("#x08000000")}
      {Lisp-Entry "DM_PANNINGHEIGHT" #f 297 12 297 28 ("#x10000000")}
      {Lisp-Entry "DMORIENT_PORTRAIT" #f 300 12 300 29 ("1")}
      {Lisp-Entry "DMORIENT_LANDSCAPE" #f 301 12 301 30 ("2")}
      {Lisp-Entry "DMPAPER_LETTER" #f 304 12 304 26 ("1")}
      {Lisp-Entry "DMPAPER_LETTERSMALL" #f 305 12 305 31 ("2")}
      {Lisp-Entry "DMPAPER_TABLOID" #f 306 12 306 27 ("3")}
      {Lisp-Entry "DMPAPER_LEDGER" #f 307 12 307 26 ("4")}
      {Lisp-Entry "DMPAPER_LEGAL" #f 308 12 308 25 ("5")}
      {Lisp-Entry "DMPAPER_STATEMENT" #f 309 12 309 29 ("6")}
      {Lisp-Entry "DMPAPER_EXECUTIVE" #f 310 12 310 29 ("7")}
      {Lisp-Entry "DMPAPER_A3" #f 311 12 311 22 ("8")}
      {Lisp-Entry "DMPAPER_A4" #f 312 12 312 22 ("9")}
      {Lisp-Entry "DMPAPER_A4SMALL" #f 313 12 313 27 ("10")}
      {Lisp-Entry "DMPAPER_A5" #f 314 12 314 22 ("11")}
      {Lisp-Entry "DMPAPER_B4" #f 315 12 315 22 ("12")}
      {Lisp-Entry "DMPAPER_B5" #f 316 12 316 22 ("13")}
      {Lisp-Entry "DMPAPER_FOLIO" #f 317 12 317 25 ("14")}
      {Lisp-Entry "DMPAPER_QUARTO" #f 318 12 318 26 ("15")}
      {Lisp-Entry "DMPAPER_10X14" #f 319 12 319 25 ("16")}
      {Lisp-Entry "DMPAPER_11X17" #f 320 12 320 25 ("17")}
      {Lisp-Entry "DMPAPER_NOTE" #f 321 12 321 24 ("18")}
      {Lisp-Entry "DMPAPER_ENV_9" #f 322 12 322 25 ("19")}
      {Lisp-Entry "DMPAPER_ENV_10" #f 323 12 323 26 ("20")}
      {Lisp-Entry "DMPAPER_ENV_11" #f 324 12 324 26 ("21")}
      {Lisp-Entry "DMPAPER_ENV_12" #f 325 12 325 26 ("22")}
      {Lisp-Entry "DMPAPER_ENV_14" #f 326 12 326 26 ("23")}
      {Lisp-Entry "DMPAPER_CSHEET" #f 327 12 327 26 ("24")}
      {Lisp-Entry "DMPAPER_DSHEET" #f 328 12 328 26 ("25")}
      {Lisp-Entry "DMPAPER_ESHEET" #f 329 12 329 26 ("26")}
      {Lisp-Entry "DMPAPER_ENV_DL" #f 330 12 330 26 ("27")}
      {Lisp-Entry "DMPAPER_ENV_C5" #f 331 12 331 26 ("28")}
      {Lisp-Entry "DMPAPER_ENV_C3" #f 332 12 332 26 ("29")}
      {Lisp-Entry "DMPAPER_ENV_C4" #f 333 12 333 26 ("30")}
      {Lisp-Entry "DMPAPER_ENV_C6" #f 334 12 334 26 ("31")}
      {Lisp-Entry "DMPAPER_ENV_C65" #f 335 12 335 27 ("32")}
      {Lisp-Entry "DMPAPER_ENV_B4" #f 336 12 336 26 ("33")}
      {Lisp-Entry "DMPAPER_ENV_B5" #f 337 12 337 26 ("34")}
      {Lisp-Entry "DMPAPER_ENV_B6" #f 338 12 338 26 ("35")}
      {Lisp-Entry "DMPAPER_ENV_ITALY" #f 339 12 339 29 ("36")}
      {Lisp-Entry "DMPAPER_ENV_MONARCH" #f 340 12 340 31 ("37")}
      {Lisp-Entry "DMPAPER_ENV_PERSONAL" #f 341 12 341 32 ("38")}
      {Lisp-Entry "DMPAPER_FANFOLD_US" #f 342 12 342 30 ("39")}
      {Lisp-Entry "DMPAPER_FANFOLD_STD_GERMAN" #f 343 12 343 38 ("40")}
      {Lisp-Entry "DMPAPER_FANFOLD_LGL_GERMAN" #f 344 12 344 38 ("41")}
      {Lisp-Entry "DMBIN_ONLYONE" #f 347 12 347 25 ("1")}
      {Lisp-Entry "DMBIN_LOWER" #f 348 12 348 23 ("2")}
      {Lisp-Entry "DMBIN_MIDDLE" #f 349 12 349 24 ("3")}
      {Lisp-Entry "DMBIN_MANUAL" #f 350 12 350 24 ("4")}
      {Lisp-Entry "DMBIN_ENVELOPE" #f 351 12 351 26 ("5")}
      {Lisp-Entry "DMBIN_ENVMANUAL" #f 352 12 352 27 ("6")}
      {Lisp-Entry "DMBIN_AUTO" #f 353 12 353 22 ("7")}
      {Lisp-Entry "DMBIN_TRACTOR" #f 354 12 354 25 ("8")}
      {Lisp-Entry "DMBIN_SMALLFMT" #f 355 12 355 26 ("9")}
      {Lisp-Entry "DMBIN_LARGEFMT" #f 356 12 356 26 ("10")}
      {Lisp-Entry "DMBIN_LARGECAPACITY" #f 357 12 357 31 ("11")}
      {Lisp-Entry "DMBIN_CASSETTE" #f 358 12 358 26 ("14")}
      {Lisp-Entry "DMBIN_FORMSOURCE" #f 359 12 359 28 ("15")}
      {Lisp-Entry "GRADIENT_FILL_RECT_H" #f 362 12 362 32 ("#x00000000")}
      {Lisp-Entry "GRADIENT_FILL_RECT_V" #f 363 12 363 32 ("#x00000001")}
      {Lisp-Entry "GRADIENT_FILL_TRIANGLE" #f 364 12 364 34 ("#x00000002")}
      {Lisp-Entry "GRADIENT_FILL_OP_FLAG" #f 365 12 365 33 ("#x000000ff")}
      {Lisp-Entry "AC_SRC_OVER" #f 368 12 368 23 ("#x00")}
      {Lisp-Entry "AC_SRC_ALPHA" #f 369 12 369 24 ("#x01")}
      {Lisp-Entry "GR_GDIOBJECTS" #f 372 12 372 25 ("0")}
      {Lisp-Entry "GR_USEROBJECTS" #f 373 12 373 26 ("1")}
      {Lisp-Entry "BITMAP" #f 381 13 381 19 ("bmBits" "LPVOID" "bmBitsPixel" "bmPlanes" "bmWidthBytes" "bmHeight" "bmWidth" "bmType" "INT")}
      {Lisp-Entry "size-of-BITMAP" #f 391 12 391 26 ("INT" "c-function")}
      {Lisp-Entry "LOGBRUSH" #f 394 13 394 21 ("lbHatch" "lbColor" "lbStyle" "INT")}
      {Lisp-Entry "LOGFONTW" #f 400 13 400 21 ("LF_FACESIZE" "32" "lfFaceName" "SHORT" "lfPitchAndFamily" "lfQuality" "lfClipPrecision" "lfOutPrecision" "lfCharSet" "lfStrikeOut" "lfUnderline" "lfItalic" "BYTE" "lfWeight" "lfOrientation" "lfEscapement" "lfWidth" "lfHeight" "LONG")}
      {Lisp-Entry "size-of-LOGFONTW" #f 417 12 417 28 ("INT" "c-function")}
      {Lisp-Entry "LOGFONTW*->PVOID" #f 418 12 418 28 ("PVOID" "LOGFONTW*" "c-function")}
      {Lisp-Entry "VOID*->DEVMODE" #f 421 12 421 26 ("DEVMODE*" "VOID*" "c-function")}
      {Lisp-Entry "DEVMODE->HANDLE" #f 422 12 422 27 ("HANDLE" "DEVMODE*" "c-function")}
      {Lisp-Entry "DEVMODE" #f 425 13 425 20 ("dmPanningHeight" "dmPanningWidth" "dmReserved2" "dmReserved1" "dmDitherType" "dmMediaType" "dmICMIntent" "dmICMMethod" "dmDisplayFrequency" "dmDisplayFlags" "dmPelsHeight" "dmPelsWidth" "dmBitsPerPel" "dmLogPixels" "CCHFORMNAME" "dmFormName" "dmCollate" "dmTTOption" "dmYResolution" "dmDuplex" "dmColor" "dmPrintQuality" "dmDefaultSource" "dmCopies" "dmScale" "dmPaperWidth" "dmPaperLength" "dmPaperSize" "dmOrientation" "dmFields" "INT" "dmDriverExtra" "dmSize" "dmDriverVersion" "dmSpecVersion" "CCHDEVICENAME" "32" "dmDeviceName" "SHORT")}
      {Lisp-Entry "DEVNAMES" #f 462 13 462 21 ("wDefault" "wOutputOffset" "wDeviceOffset" "wDriverOffset" "SHORT")}
      {Lisp-Entry "DOCINFO" #f 469 13 469 20 ("fwType" "DWORD" "lpszDatatype" "lpszOutput" "lpszDocName" "LPCWSTR" "cbSize" "INT")}
      {Lisp-Entry "TEXTMETRIC" #f 477 13 477 23 ("tmCharSet" "tmPitchAndFamily" "tmStruckOut" "tmUnderlined" "tmItalic" "BYTE" "tmBreakChar" "tmDefaultChar" "tmLastChar" "tmFirstChar" "SHORT" "tmDigitizedAspectY" "tmDigitizedAspectX" "tmOverhang" "tmWeight" "tmMaxCharWidth" "tmAveCharWidth" "tmExternalLeading" "tmInternalLeading" "tmDescent" "tmAscent" "tmHeight" "INT")}
      {Lisp-Entry "TRIVERTEX" #f 500 13 500 22 ("Alpha" "Blue" "Green" "Red" "SHORT" "y" "x" "INT")}
      {Lisp-Entry "GRADIENT_RECT" #f 509 13 509 26 ("LowerRight" "UpperLeft" "INT")}
      {Lisp-Entry "BLENDFUNCTION" #f 514 13 514 26 ("AlphaFormat" "SourceConstantAlpha" "BlendFlags" "BlendOp" "BYTE")}
      {Lisp-Entry "ENHMETAHEADER" #f 521 13 521 26 ("bOpenGL" "offPixelFormat" "cbPixelFormat" "szlMillimeters" "szlDevice" "SIZEL" "nPalEntries" "offDescription" "nDescription" "sReserved" "nHandles" "WORD" "nRecords" "nBytes" "nVersion" "dSignature" "rclFrame" "rclBounds" "RECTL" "nSize" "iType" "DWORD")}
      {Lisp-Entry "XFORM" #f 542 13 542 18 ("eDy" "eDx" "eM22" "eM21" "eM12" "eM11" "FLOAT")}
      {Lisp-Entry "GetGlyphIndex" #f 551 12 551 25 ("WORD" "HDC" "c-function")}
      {Lisp-Entry "SelectObject" #f 563 29 563 41 ()}
      {Lisp-Entry "DeleteObject" #f 564 29 564 41 ()}
      {Lisp-Entry "GetStockObject" #f 565 29 565 43 ()}
      {Lisp-Entry "CreateRectRgn" #f 566 29 566 42 ()}
      {Lisp-Entry "CreateRectRgnIndirect" #f 567 29 567 50 ()}
      {Lisp-Entry "CombineRgn" #f 568 29 568 39 ()}
      {Lisp-Entry "OffsetRgn" #f 569 29 569 38 ()}
      {Lisp-Entry "GetRgnBox" #f 570 29 570 38 ()}
      {Lisp-Entry "CreateCompatibleDC" #f 571 29 571 47 ()}
      {Lisp-Entry "CreateCompatibleBitmap" #f 572 29 572 51 ()}
      {Lisp-Entry "CreateFont" #f 573 29 573 39 ()}
      {Lisp-Entry "CreateFontIndirect" #f 574 29 574 47 ()}
      {Lisp-Entry "GetObject" #f 575 29 575 38 ()}
      {Lisp-Entry "GetDeviceCaps" #f 576 29 576 42 ()}
      {Lisp-Entry "RectInRegion" #f 577 29 577 41 ()}
      {Lisp-Entry "StartDoc" #f 578 29 578 37 ()}
      {Lisp-Entry "EndDoc" #f 579 29 579 35 ()}
      {Lisp-Entry "StartPage" #f 580 29 580 38 ()}
      {Lisp-Entry "EndPage" #f 581 29 581 36 ()}}})
"WinIDL"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinIDL.jazz"} 1226584783
    {Lisp-Entry "WinIDL" #f 37 9 37 15 ("jazz")}})
"WinInet"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "WinInet.jazz"} 1226584783
    {Lisp-Entry "WinInet" #f 37 9 37 16 ("jazz")}})
"WinKernel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinKernel.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinKernel" #f 37 9 37 40 ("PROCESSENTRY32*" "WIN32_FIND_DATA*" "HRSRC" "WORD" "LONG&" "LPOVERLAPPED" "GET_FILEEX_INFO_LEVELS" "INT" "LCID" "SYSTEMTIME*" "FILETIME*" "UINT" "LPWSTR" "STR" "HINSTANCE" "LONG*" "LONG" "PVOID" "HANDLE*" "PDWORD" "PROCESS_INFORMATION*" "BOOL" "SECURITY_ATTRIBUTES*" "CWSTR" "PSIZE_T" "STARTUPINFO*" "WCHAR*" "VOID*" "DWORD" "HANDLE" "OSVERSIONINFO*" "jazz")
      {Lisp-Entry "TH32CS_SNAPHEAPLIST" #f 58 12 58 31 ("#x00000001")}
      {Lisp-Entry "TH32CS_SNAPPROCESS" #f 59 12 59 30 ("#x00000002")}
      {Lisp-Entry "TH32CS_SNAPTHREAD" #f 60 12 60 29 ("#x00000004")}
      {Lisp-Entry "TH32CS_SNAPMODULE" #f 61 12 61 29 ("#x00000008")}
      {Lisp-Entry "TH32CS_SNAPMODULE32" #f 62 12 62 31 ("#x00000010")}
      {Lisp-Entry "TH32CS_SNAPALL" #f 63 12 63 26 ("TH32CS_SNAPMODULE" "TH32CS_SNAPTHREAD" "TH32CS_SNAPPROCESS" "TH32CS_SNAPHEAPLIST" "bitwise-ior")}
      {Lisp-Entry "TH32CS_INHERIT" #f 64 12 64 26 ("#x80000000")}
      {Lisp-Entry "PROCESSENTRY32" #f 72 13 72 27 ("260" "szExeFile" "WCHAR" "dwFlags" "pcPriClassBase" "LONG" "th32ParentProcessID" "cntThreads" "th32ModuleID" "th32DefaultHeapID" "th32ProcessID" "cntUsage" "dwSize" "DWORD")}
      {Lisp-Entry "GetLastError" #f 90 29 90 41 ()}
      {Lisp-Entry "GetVersionEx" #f 91 29 91 41 ()}
      {Lisp-Entry "GlobalSize" #f 92 29 92 39 ()}
      {Lisp-Entry "GlobalLock" #f 93 29 93 39 ()}
      {Lisp-Entry "GlobalUnlock" #f 94 29 94 41 ()}
      {Lisp-Entry "FormatMessage" #f 95 29 95 42 ()}
      {Lisp-Entry "Sleep" #f 96 29 96 34 ()}
      {Lisp-Entry "GetStartupInfo" #f 97 29 97 43 ()}
      {Lisp-Entry "GetCurrentThreadId" #f 98 29 98 47 ()}
      {Lisp-Entry "GetCurrentProcess" #f 99 29 99 46 ()}
      {Lisp-Entry "GetCurrentProcessId" #f 100 29 100 48 ()}
      {Lisp-Entry "GetProcessWorkingSetSize" #f 101 29 101 53 ()}
      {Lisp-Entry "CreateProcess" #f 102 29 102 42 ()}
      {Lisp-Entry "GetExitCodeProcess" #f 103 29 103 47 ()}
      {Lisp-Entry "SuspendThread" #f 104 29 104 42 ()}
      {Lisp-Entry "ResumeThread" #f 105 29 105 41 ()}
      {Lisp-Entry "CreatePipe" #f 106 29 106 39 ()}
      {Lisp-Entry "PeekNamedPipe" #f 108 29 108 42 ()}
      {Lisp-Entry "CreateEvent" #f 109 29 109 40 ()}
      {Lisp-Entry "CreateSemaphore" #f 110 29 110 44 ()}
      {Lisp-Entry "ReleaseSemaphore" #f 111 29 111 45 ()}
      {Lisp-Entry "CreateMutex" #f 112 29 112 40 ()}
      {Lisp-Entry "ReleaseMutex" #f 113 29 113 41 ()}
      {Lisp-Entry "WaitForSingleObject" #f 114 29 114 48 ()}
      {Lisp-Entry "WaitForMultipleObjects" #f 115 29 115 51 ()}
      {Lisp-Entry "SetEvent" #f 116 29 116 37 ()}
      {Lisp-Entry "ResetEvent" #f 117 29 117 39 ()}
      {Lisp-Entry "PulseEvent" #f 118 29 118 39 ()}
      {Lisp-Entry "GetStdHandle" #f 119 29 119 41 ()}
      {Lisp-Entry "AllocConsole" #f 120 29 120 41 ()}
      {Lisp-Entry "FreeConsole" #f 121 29 121 40 ()}
      {Lisp-Entry "GetConsoleWindow" #f 122 29 122 45 ()}
      {Lisp-Entry "SetConsoleTitle" #f 123 29 123 44 ()}
      {Lisp-Entry "FlushFileBuffers" #f 124 29 124 45 ()}
      {Lisp-Entry "LoadLibrary" #f 125 29 125 40 ()}
      {Lisp-Entry "FreeLibrary" #f 126 29 126 40 ()}
      {Lisp-Entry "GetModuleHandle" #f 127 29 127 44 ()}
      {Lisp-Entry "GetProcAddress" #f 128 29 128 43 ()}
      {Lisp-Entry "GetComputerName" #f 130 29 130 44 ()}
      {Lisp-Entry "GetTempPath" #f 131 29 131 40 ()}
      {Lisp-Entry "GetTempFileName" #f 132 29 132 44 ()}
      {Lisp-Entry "FileTimeToSystemTime" #f 133 29 133 49 ()}
      {Lisp-Entry "FileTimeToLocalFileTime" #f 134 29 134 52 ()}
      {Lisp-Entry "LocalFileTimeToFileTime" #f 135 29 135 52 ()}
      {Lisp-Entry "SystemTimeToFileTime" #f 136 29 136 49 ()}
      {Lisp-Entry "GetDateFormat" #f 137 29 137 42 ()}
      {Lisp-Entry "GetLocalTime" #f 138 29 138 41 ()}
      {Lisp-Entry "GetSystemTime" #f 139 29 139 42 ()}
      {Lisp-Entry "GetCurrentDirectory" #f 140 29 140 48 ()}
      {Lisp-Entry "SetCurrentDirectory" #f 141 29 141 48 ()}
      {Lisp-Entry "GetWindowsDirectory" #f 142 29 142 48 ()}
      {Lisp-Entry "GetSystemDirectory" #f 143 29 143 47 ()}
      {Lisp-Entry "CreateFile" #f 144 29 144 39 ()}
      {Lisp-Entry "GetFileSize" #f 146 29 146 40 ()}
      {Lisp-Entry "GetFileTime" #f 147 29 147 40 ()}
      {Lisp-Entry "GetFileAttributes" #f 148 29 148 46 ()}
      {Lisp-Entry "GetFileAttributesEx" #f 149 29 149 48 ()}
      {Lisp-Entry "SetFileTime" #f 150 29 150 40 ()}
      {Lisp-Entry "SetFileAttributes" #f 151 29 151 46 ()}
      {Lisp-Entry "ReadFile" #f 153 29 153 37 ()}
      {Lisp-Entry "WriteFile" #f 154 29 154 38 ()}
      {Lisp-Entry "MoveFile" #f 155 29 155 37 ()}
      {Lisp-Entry "CopyFile" #f 156 29 156 37 ()}
      {Lisp-Entry "DeleteFile" #f 157 29 157 39 ()}
      {Lisp-Entry "RemoveDirectory" #f 158 29 158 44 ()}
      {Lisp-Entry "SetFilePointer" #f 159 29 159 43 ()}
      {Lisp-Entry "SetEndOfFile" #f 160 29 160 41 ()}
      {Lisp-Entry "CreateDirectory" #f 161 29 161 44 ()}
      {Lisp-Entry "CloseHandle" #f 162 29 162 40 ()}
      {Lisp-Entry "FindResource" #f 163 29 163 41 ()}
      {Lisp-Entry "FindResourceEx" #f 164 29 164 43 ()}
      {Lisp-Entry "SizeofResource" #f 165 29 165 43 ()}
      {Lisp-Entry "LoadResource" #f 166 29 166 41 ()}
      {Lisp-Entry "LockResource" #f 167 29 167 41 ()}
      {Lisp-Entry "BeginUpdateResource" #f 168 29 168 48 ()}
      {Lisp-Entry "UpdateResource" #f 169 29 169 43 ()}
      {Lisp-Entry "EndUpdateResource" #f 170 29 170 46 ()}
      {Lisp-Entry "FindFirstFile" #f 171 29 171 42 ()}
      {Lisp-Entry "FindNextFile" #f 172 29 172 41 ()}
      {Lisp-Entry "FindClose" #f 173 29 173 38 ()}
      {Lisp-Entry "MulDiv" #f 174 29 174 35 ()}
      {Lisp-Entry "CreateToolhelp32Snapshot" #f 175 29 175 53 ()}
      {Lisp-Entry "Process32First" #f 176 29 176 43 ()}
      {Lisp-Entry "GetProcessHandleCount" #f 180 12 180 33 ("DWORD" "HANDLE" "c-function")}}})
"WinMM"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinMM.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinMM" #f 37 9 37 36 ("HWND" "LPWSTR" "INT" "HMODULE" "CWSTR" "jazz")
      {Lisp-Entry "SND_SYNC" #f 50 12 50 20 ("#x0000")}
      {Lisp-Entry "SND_ASYNC" #f 51 12 51 21 ("#x0001")}
      {Lisp-Entry "SND_NODEFAULT" #f 52 12 52 25 ("#x0002")}
      {Lisp-Entry "SND_MEMORY" #f 53 12 53 22 ("#x0004")}
      {Lisp-Entry "SND_LOOP" #f 54 12 54 20 ("#x0008")}
      {Lisp-Entry "SND_NOSTOP" #f 55 12 55 22 ("#x0010")}
      {Lisp-Entry "SND_NOWAIT" #f 57 12 57 22 ("#x00002000")}
      {Lisp-Entry "SND_ALIAS" #f 58 12 58 21 ("#x00010000")}
      {Lisp-Entry "SND_ALIAS_ID" #f 59 12 59 24 ("#x00110000")}
      {Lisp-Entry "SND_FILENAME" #f 60 12 60 24 ("#x00020000")}
      {Lisp-Entry "SND_RESOURCE" #f 61 12 61 24 ("#x00040004")}
      {Lisp-Entry "SND_PURGE" #f 62 12 62 21 ("#x0040")}
      {Lisp-Entry "SND_APPLICATION" #f 63 12 63 27 ("#x0080")}
      {Lisp-Entry "PlaySound" #f 71 20 71 29 ()}
      {Lisp-Entry "mciSendString" #f 72 20 72 33 ()}}})
"WinNT"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinNT.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinNT" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "FILE_ATTRIBUTE_READONLY" #f 40 12 40 35 ("#x00000001")}
      {Lisp-Entry "FILE_ATTRIBUTE_HIDDEN" #f 41 12 41 33 ("#x00000002")}
      {Lisp-Entry "FILE_ATTRIBUTE_SYSTEM" #f 42 12 42 33 ("#x00000004")}
      {Lisp-Entry "FILE_ATTRIBUTE_DIRECTORY" #f 43 12 43 36 ("#x00000010")}
      {Lisp-Entry "FILE_ATTRIBUTE_ARCHIVE" #f 44 12 44 34 ("#x00000020")}
      {Lisp-Entry "FILE_ATTRIBUTE_ENCRYPTED" #f 45 12 45 36 ("#x00000040")}
      {Lisp-Entry "FILE_ATTRIBUTE_NORMAL" #f 46 12 46 33 ("#x00000080")}
      {Lisp-Entry "FILE_ATTRIBUTE_TEMPORARY" #f 47 12 47 36 ("#x00000100")}
      {Lisp-Entry "FILE_ATTRIBUTE_SPARSE_FILE" #f 48 12 48 38 ("#x00000200")}
      {Lisp-Entry "FILE_ATTRIBUTE_REPARSE_POINT" #f 49 12 49 40 ("#x00000400")}
      {Lisp-Entry "FILE_ATTRIBUTE_COMPRESSED" #f 50 12 50 37 ("#x00000800")}
      {Lisp-Entry "FILE_ATTRIBUTE_OFFLINE" #f 51 12 51 34 ("#x00001000")}
      {Lisp-Entry "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED" #f 52 12 52 46 ("#x00002000")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "WinNT.jazz"} 1226584783
    {Lisp-Entry "WinNT" #f 37 9 37 14 ("jazz")}})
"WinOLE"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "WinOLE.jazz"} 1226584783
    {Lisp-Entry "WinOLE" #f 37 9 37 15 ("jazz")}})
"WinPerf"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinPerf.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinPerf" #f 37 9 37 38 ("PPDH_FMT_COUNTERVALUE" "LPDWORD" "DWORD" "PDH_HCOUNTER" "PDH_HQUERY" "jazz")
      {Lisp-Entry "PDH_MAX_COUNTER_NAME" #f 54 12 54 32 ("1024")}
      {Lisp-Entry "PDH_MAX_INSTANCE_NAME" #f 55 12 55 33 ("1024")}
      {Lisp-Entry "PDH_MAX_COUNTER_PATH" #f 56 12 56 32 ("2048")}
      {Lisp-Entry "PDH_MAX_DATASOURCE_PATH" #f 57 12 57 35 ("1024")}
      {Lisp-Entry "PDH_FMT_RAW" #f 59 12 59 23 ("#x00000010")}
      {Lisp-Entry "PDH_FMT_ANSI" #f 60 12 60 24 ("#x00000020")}
      {Lisp-Entry "PDH_FMT_UNICODE" #f 61 12 61 27 ("#x00000040")}
      {Lisp-Entry "PDH_FMT_LONG" #f 62 12 62 24 ("#x00000100")}
      {Lisp-Entry "PDH_FMT_DOUBLE" #f 63 12 63 26 ("#x00000200")}
      {Lisp-Entry "PDH_FMT_LARGE" #f 64 12 64 25 ("#x00000400")}
      {Lisp-Entry "PDH_FMT_NOSCALE" #f 65 12 65 27 ("#x00001000")}
      {Lisp-Entry "PDH_FMT_1000" #f 66 12 66 24 ("#x00002000")}
      {Lisp-Entry "PDH_FMT_NODATA" #f 67 12 67 26 ("#x00004000")}
      {Lisp-Entry "PDH_FMT_NOCAP100" #f 68 12 68 28 ("#x00008000")}
      {Lisp-Entry "PERF_DETAIL_NOVICE" #f 70 12 70 30 ("100")}
      {Lisp-Entry "PERF_DETAIL_ADVANCED" #f 71 12 71 32 ("200")}
      {Lisp-Entry "PERF_DETAIL_EXPERT" #f 72 12 72 30 ("300")}
      {Lisp-Entry "PERF_DETAIL_WIZARD" #f 73 12 73 30 ("400")}
      {Lisp-Entry "PDH_HQUERY" #f 81 8 81 18 ("HANDLE")}
      {Lisp-Entry "PDH_HQUERY*" #f 82 8 82 19 ("PDH_HQUERY" "pointer")}
      {Lisp-Entry "PDH_HCOUNTER" #f 83 8 83 20 ("HANDLE")}
      {Lisp-Entry "PDH_HCOUNTER*" #f 84 8 84 21 ("PDH_HCOUNTER" "pointer")}
      {Lisp-Entry "PDH_STATUS" #f 85 8 85 18 ("LONG")}
      {Lisp-Entry "PDH_FMT_COUNTERVALUE" #f 93 13 93 33 ("longValue" "LONG" "CStatus" "DWORD")}
      {Lisp-Entry "PPDH_FMT_COUNTERVALUE" #f 99 8 99 29 ("PDH_FMT_COUNTERVALUE*")}
      {Lisp-Entry "PDH_COUNTER_PATH_ELEMENTS" #f 103 11 103 36 ("szCounterName" "dwInstanceIndex" "int" "szParentInstance" "szInstanceName" "szObjectName" "szMachineName" "string")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG_bIncludeInstanceIndex" #f 112 12 112 55 ("#x00000001")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG_bSingleCounterPerAdd" #f 113 12 113 54 ("#x00000002")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG_bSingleCounterPerDialog" #f 114 12 114 57 ("#x00000004")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG_bLocalCountersOnly" #f 115 12 115 52 ("#x00000008")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG_bWildCardInstances" #f 116 12 116 52 ("#x00000010")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG_bHideDetailBox" #f 117 12 117 48 ("#x00000020")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG_bInitializePath" #f 118 12 118 49 ("#x00000040")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG_bDisableMachineSelection" #f 119 12 119 58 ("#x00000080")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG_bIncludeCostlyObjects" #f 120 12 120 55 ("#x00000100")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG_bShowObjectBrowser" #f 121 12 121 52 ("#x00000200")}
      {Lisp-Entry "PDH_BROWSE_DLG_CONFIG" #f 125 11 125 32 ("szDialogBoxCaption" "string" "dwDefaultDetailLevel" "CallBackStatus" "dwCallBackArg" "pCallBack" "int" "cchReturnPathLength" "szReturnPathBuffer" "szDataSource" "LPTSTR" "hWndOwner" "HWND" "configurationFlags" "DWORD")}
      {Lisp-Entry "BrowseCounterPath" #f 138 12 138 29 ("LPTSTR" "c-function")}
      {Lisp-Entry "PDH_HCOUNTER-ref" #f 169 12 169 28 ("PDH_HCOUNTER" "PDH_HCOUNTER*" "c-function")}
      {Lisp-Entry "PDH_HCOUNTER-alloc" #f 174 12 174 30 ("PDH_HCOUNTER*" "c-function")}
      {Lisp-Entry "PDH_HCOUNTER-free" #f 179 12 179 29 ("void" "PDH_HCOUNTER*" "c-function")}
      {Lisp-Entry "PDH_HQUERY-ref" #f 184 12 184 26 ("PDH_HQUERY" "PDH_HQUERY*" "c-function")}
      {Lisp-Entry "PDH_HQUERY-alloc" #f 189 12 189 28 ("PDH_HQUERY*" "c-function")}
      {Lisp-Entry "PDH_HQUERY-free" #f 194 12 194 27 ("void" "PDH_HQUERY*" "c-function")}
      {Lisp-Entry "PdhOpenQuery" #f 201 13 201 25 ("values" "PDH_HQUERY-free" "PDH_HQUERY-ref" "query" "PDH_STATUS" "PDH_HQUERY*" "c-function" "result" "PDH_HQUERY-alloc" "query*" "let*" "dwUserData" "szDataSource")}
      {Lisp-Entry "PdhAddCounter" #f 211 13 211 26 ("values" "PDH_HCOUNTER-free" "PDH_HCOUNTER-ref" "counter" "PDH_STATUS" "PDH_HCOUNTER*" "DWORD_PTR" "LPCTSTR" "PDH_HQUERY" "c-function" "result" "PDH_HCOUNTER-alloc" "counter*" "let*" "dwUserData" "szFullCounterPath" "hQuery")}
      {Lisp-Entry "PdhCloseQuery" #f 221 25 221 38 ()}
      {Lisp-Entry "PdhCollectQueryData" #f 222 25 222 44 ()}
      {Lisp-Entry "PdhGetFormattedCounterValue" #f 223 25 223 52 ()}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "toconvert" "WinPerf.jazz"} 1226584783
    {Lisp-Entry "WinPerf" #f 37 9 37 16 ("jazz")}})
"WinShell"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinShell.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinShell" #f 37 9 37 39 ("LPPOINT" "LPWSTR" "UINT" "HDROP" "BOOL" "HWND" "jazz")
      {Lisp-Entry "WPARAM->HDROP" #f 45 12 45 25 ("HDROP" "WPARAM" "c-function")}
      {Lisp-Entry "DragAcceptFiles" #f 50 29 50 44 ()}
      {Lisp-Entry "DragQueryFile" #f 51 29 51 42 ()}
      {Lisp-Entry "DragQueryPoint" #f 52 29 52 43 ()}
      {Lisp-Entry "DragFinish" #f 53 29 53 39 ()}}})
"WinTypes"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinTypes.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinTypes" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "VOID" #f 43 8 43 12 ("void" "native")}
      {Lisp-Entry "SHORT" #f 44 8 44 13 ("short" "native")}
      {Lisp-Entry "SHORT*" #f 45 8 45 14 ("SHORT*" "SHORT" "pointer")}
      {Lisp-Entry "INT" #f 46 8 46 11 ("int" "native")}
      {Lisp-Entry "FLOAT" #f 47 8 47 13 ("float" "native")}
      {Lisp-Entry "LONG" #f 48 8 48 12 ("long" "native")}
      {Lisp-Entry "USHORT" #f 49 8 49 14 ("unsigned-short" "native")}
      {Lisp-Entry "UINT" #f 50 8 50 12 ("unsigned-int" "native")}
      {Lisp-Entry "UINT64" #f 51 8 51 14 ("unsigned-int64" "native")}
      {Lisp-Entry "ULONG" #f 52 8 52 13 ("unsigned-long" "native")}
      {Lisp-Entry "ULONG*" #f 53 8 53 14 ("ULONG*" "ULONG" "pointer")}
      {Lisp-Entry "ULONG_PTR" #f 54 8 54 17 ("ULONG")}
      {Lisp-Entry "BOOL" #f 56 8 56 12 ("bool" "native")}
      {Lisp-Entry "BYTE" #f 57 8 57 12 ("unsigned-int8" "native")}
      {Lisp-Entry "BYTE*" #f 58 8 58 13 ("BYTE*" "BYTE" "pointer")}
      {Lisp-Entry "WORD" #f 59 8 59 12 ("unsigned-int16" "native")}
      {Lisp-Entry "WORD*" #f 60 8 60 13 ("WORD*" "WORD" "pointer")}
      {Lisp-Entry "DWORD" #f 61 8 61 13 ("ULONG")}
      {Lisp-Entry "DWORD*" #f 62 8 62 14 ("DWORD" "pointer")}
      {Lisp-Entry "DWORD_PTR" #f 63 8 63 17 ("ULONG_PTR")}
      {Lisp-Entry "PDWORD" #f 64 8 64 14 ("DWORD*")}
      {Lisp-Entry "LPDWORD" #f 65 8 65 15 ("DWORD*")}
      {Lisp-Entry "CHAR" #f 67 8 67 12 ("char" "native")}
      {Lisp-Entry "CHAR*" #f 68 8 68 13 ("CHAR" "pointer")}
      {Lisp-Entry "WCHAR" #f 70 8 70 13 ("wchar_t" "native")}
      {Lisp-Entry "WCHAR*" #f 71 8 71 14 ("WCHAR*" "WCHAR" "pointer")}
      {Lisp-Entry "CWSTR" #f 72 8 72 13 ("wchar_t-string" "native")}
      {Lisp-Entry "CWSTR*" #f 73 8 73 14 ("CWSTR" "pointer")}
      {Lisp-Entry "LPWSTR" #f 74 8 74 14 ("WCHAR*")}
      {Lisp-Entry "LPCWSTR" #f 75 8 75 15 ("CWSTR")}
      {Lisp-Entry "STR" #f 76 8 76 11 ("char-string" "native")}
      {Lisp-Entry "STR*" #f 77 8 77 12 ("STR" "pointer")}
      {Lisp-Entry "TCHAR" #f 78 8 78 13 ("WCHAR")}
      {Lisp-Entry "TCHAR*" #f 79 8 79 14 ("TCHAR*" "TCHAR" "pointer")}
      {Lisp-Entry "LPTSTR" #f 80 8 80 14 ("CWSTR")}
      {Lisp-Entry "LPCTSTR" #f 81 8 81 15 ("CWSTR")}
      {Lisp-Entry "LONG*" #f 83 8 83 13 ("LONG*" "LONG" "pointer")}
      {Lisp-Entry "LONG&" #f 84 8 84 13 ("LONG*" "LONG" "pointer")}
      {Lisp-Entry "SIZE_T" #f 85 8 85 14 ("ULONG_PTR")}
      {Lisp-Entry "SIZE_T*" #f 86 8 86 15 ("SIZE_T" "pointer")}
      {Lisp-Entry "PSIZE_T" #f 87 8 87 15 ("SIZE_T*")}
      {Lisp-Entry "LCID" #f 88 8 88 12 ("unsigned-int32" "native")}
      {Lisp-Entry "GET_FILEEX_INFO_LEVELS" #f 89 8 89 30 ("unsigned-int32" "native")}
      {Lisp-Entry "VOID*" #f 91 8 91 13 ("void*" "VOID" "pointer")}
      {Lisp-Entry "HANDLE" #f 92 8 92 14 ("handle" "VOID" "pointer")}
      {Lisp-Entry "HANDLE*" #f 93 8 93 15 ("HANDLE" "pointer")}
      {Lisp-Entry "HACCEL" #f 94 8 94 14 ("handle" "struct" "pointer")}
      {Lisp-Entry "HINSTANCE" #f 95 8 95 17 ("handle" "struct" "pointer")}
      {Lisp-Entry "HMODULE" #f 96 8 96 15 ("HINSTANCE")}
      {Lisp-Entry "HRSRC" #f 97 8 97 13 ("handle" "struct" "pointer")}
      {Lisp-Entry "HGLOBAL" #f 98 8 98 15 ("HANDLE")}
      {Lisp-Entry "HICON" #f 99 8 99 13 ("handle" "struct" "pointer")}
      {Lisp-Entry "HCURSOR" #f 100 8 100 15 ("HICON")}
      {Lisp-Entry "HBRUSH" #f 101 8 101 14 ("handle" "struct" "pointer")}
      {Lisp-Entry "HRGN" #f 102 8 102 12 ("handle" "struct" "pointer")}
      {Lisp-Entry "HFONT" #f 103 8 103 13 ("handle" "struct" "pointer")}
      {Lisp-Entry "HWND" #f 104 8 104 12 ("handle" "struct" "pointer")}
      {Lisp-Entry "HMENU" #f 105 8 105 13 ("handle" "struct" "pointer")}
      {Lisp-Entry "HDC" #f 106 8 106 11 ("handle" "struct" "pointer")}
      {Lisp-Entry "HBITMAP" #f 107 8 107 15 ("handle" "struct" "pointer")}
      {Lisp-Entry "HDROP" #f 108 8 108 13 ("handle" "struct" "pointer")}
      {Lisp-Entry "HGDIOBJ" #f 111 8 111 15 ("handle" "VOID" "pointer")}
      {Lisp-Entry "LONG_PTR" #f 113 8 113 16 ("LONG")}
      {Lisp-Entry "ULONG_PTR" #f 114 8 114 17 ("ULONG")}
      {Lisp-Entry "UINT_PTR" #f 115 8 115 16 ("UINT")}
      {Lisp-Entry "LRESULT" #f 116 8 116 15 ("LONG_PTR")}
      {Lisp-Entry "WPARAM" #f 117 8 117 14 ("UINT_PTR")}
      {Lisp-Entry "LPARAM" #f 118 8 118 14 ("ULONG_PTR")}
      {Lisp-Entry "PVOID" #f 120 8 120 13 ("VOID" "pointer")}
      {Lisp-Entry "LPVOID" #f 121 8 121 14 ("VOID" "pointer")}
      {Lisp-Entry "ATOM" #f 123 8 123 12 ("UINT")}
      {Lisp-Entry "COLORREF" #f 124 8 124 16 ("DWORD")}
      {Lisp-Entry "WNDPROC" #f 126 8 126 15 ("LRESULT" "LPARAM" "WPARAM" "UINT" "HWND" "function")}
      {Lisp-Entry "TIMERPROC" #f 127 8 127 17 ("VOID" "DWORD" "UINT" "HWND" "function")}
      {Lisp-Entry "__CDHOOKPROC" #f 128 8 128 20 ("LPARAM" "WPARAM" "UINT" "HWND" "function")}
      {Lisp-Entry "LPPAGEPAINTHOOK" #f 129 8 129 23 ("__CDHOOKPROC")}
      {Lisp-Entry "LPPAGESETUPHOOK" #f 130 8 130 23 ("__CDHOOKPROC")}
      {Lisp-Entry "LPSETUPHOOKPROC" #f 131 8 131 23 ("__CDHOOKPROC")}
      {Lisp-Entry "LPPRINTHOOKPROC" #f 132 8 132 23 ("__CDHOOKPROC")}
      {Lisp-Entry "WCHAR-array-make" #f 138 12 138 28 ("WCHAR*" "INT" "c-function")}
      {Lisp-Entry "WCHAR-array-ref" #f 139 12 139 27 ("WCHAR" "INT" "WCHAR*" "c-function")}
      {Lisp-Entry "WCHAR-array-set!" #f 140 12 140 28 ("VOID" "WCHAR" "INT" "WCHAR*" "c-function")}
      {Lisp-Entry "WCHAR-array-free" #f 141 12 141 28 ("VOID" "WCHAR*" "c-function")}
      {Lisp-Entry "WCHAR-subarray" #f 142 12 142 26 ("INT" "WCHAR*" "c-function")}
      {Lisp-Entry "WCHAR-string" #f 143 12 143 24 ("CWSTR" "WCHAR*" "c-function")}
      {Lisp-Entry "WCHAR-copy" #f 144 12 144 22 ("VOID" "INT" "CWSTR" "WCHAR*" "c-function")}
      {Lisp-Entry "WCHAR-ref" #f 145 12 145 21 ("ULONG" "WCHAR*" "c-function")}}})
"WinUser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "WinUser.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.WinUser" #f 37 9 37 38 ("HANDLE" "HCURSOR" "TIMERPROC" "WCHAR*" "GetWindowText" "1" "c-external-so" "BYTE" "COLORREF" "LPTRACKMOUSEEVENT" "LONG" "HRGN" "BOOL" "LPCRECT" "LPRECT" "LPPOINT" "PAINTSTRUCT*" "MSG*" "LPARAM" "WPARAM" "UINT" "LPVOID" "HINSTANCE" "HMENU" "HWND" "INT" "LPCWSTR" "ATOM" "DWORD" "WNDCLASS*" "jazz")
      {Lisp-Entry "LWA_COLORKEY" #f 55 12 55 24 ("#x01")}
      {Lisp-Entry "LWA_ALPHA" #f 56 12 56 21 ("#x02")}
      {Lisp-Entry "ULW_COLORKEY" #f 57 12 57 24 ("#x01")}
      {Lisp-Entry "ULW_ALPHA" #f 58 12 58 21 ("#x02")}
      {Lisp-Entry "ULW_OPAQUE" #f 59 12 59 22 ("#x04")}
      {Lisp-Entry "GWL_EXSTYLE" #f 61 12 61 23 ("-20")}
      {Lisp-Entry "GWL_STYLE" #f 62 12 62 21 ("-16")}
      {Lisp-Entry "IMAGE_BITMAP" #f 64 12 64 24 ("0")}
      {Lisp-Entry "IMAGE_ICON" #f 65 12 65 22 ("1")}
      {Lisp-Entry "IMAGE_CURSOR" #f 66 12 66 24 ("2")}
      {Lisp-Entry "IMAGE_ENHMETAFILE" #f 67 12 67 29 ("3")}
      {Lisp-Entry "LR_DEFAULTCOLOR" #f 69 12 69 27 ("#x0000")}
      {Lisp-Entry "LR_MONOCHROME" #f 70 12 70 25 ("#x0001")}
      {Lisp-Entry "LR_COLOR" #f 71 12 71 20 ("#x0002")}
      {Lisp-Entry "LR_COPYRETURNORG" #f 72 12 72 28 ("#x0004")}
      {Lisp-Entry "LR_COPYDELETEORG" #f 73 12 73 28 ("#x0008")}
      {Lisp-Entry "LR_LOADFROMFILE" #f 74 12 74 27 ("#x0010")}
      {Lisp-Entry "LR_LOADTRANSPARENT" #f 75 12 75 30 ("#x0020")}
      {Lisp-Entry "LR_DEFAULTSIZE" #f 76 12 76 26 ("#x0040")}
      {Lisp-Entry "LR_VGACOLOR" #f 77 12 77 23 ("#x0080")}
      {Lisp-Entry "LR_LOADMAP3DCOLORS" #f 78 12 78 30 ("#x1000")}
      {Lisp-Entry "LR_CREATEDIBSECTION" #f 79 12 79 31 ("#x2000")}
      {Lisp-Entry "LR_COPYFROMRESOURCE" #f 80 12 80 31 ("#x4000")}
      {Lisp-Entry "LR_SHARED" #f 81 12 81 21 ("#x8000")}
      {Lisp-Entry "CS_VREDRAW" #f 84 12 84 22 ("#x0001")}
      {Lisp-Entry "CS_HREDRAW" #f 85 12 85 22 ("#x0002")}
      {Lisp-Entry "CS_KEYCVTWINDOW" #f 86 12 86 27 ("#x0004")}
      {Lisp-Entry "CS_DBLCLKS" #f 87 12 87 22 ("#x0008")}
      {Lisp-Entry "CS_OWNDC" #f 88 12 88 20 ("#x0020")}
      {Lisp-Entry "CS_CLASSDC" #f 89 12 89 22 ("#x0040")}
      {Lisp-Entry "CS_PARENTDC" #f 90 12 90 23 ("#x0080")}
      {Lisp-Entry "CS_NOKEYCVT" #f 91 12 91 23 ("#x0100")}
      {Lisp-Entry "CS_NOCLOSE" #f 92 12 92 22 ("#x0200")}
      {Lisp-Entry "CS_SAVEBITS" #f 93 12 93 23 ("#x0800")}
      {Lisp-Entry "CS_BYTEALIGNCLIENT" #f 94 12 94 30 ("#x1000")}
      {Lisp-Entry "CS_BYTEALIGNWINDOW" #f 95 12 95 30 ("#x2000")}
      {Lisp-Entry "CS_GLOBALCLASS" #f 96 12 96 26 ("#x4000")}
      {Lisp-Entry "COLOR_SCROLLBAR" #f 99 12 99 27 ("0")}
      {Lisp-Entry "COLOR_BACKGROUND" #f 100 12 100 28 ("1")}
      {Lisp-Entry "COLOR_ACTIVECAPTION" #f 101 12 101 31 ("2")}
      {Lisp-Entry "COLOR_INACTIVECAPTION" #f 102 12 102 33 ("3")}
      {Lisp-Entry "COLOR_MENU" #f 103 12 103 22 ("4")}
      {Lisp-Entry "COLOR_WINDOW" #f 104 12 104 24 ("5")}
      {Lisp-Entry "COLOR_WINDOWFRAME" #f 105 12 105 29 ("6")}
      {Lisp-Entry "COLOR_MENUTEXT" #f 106 12 106 26 ("7")}
      {Lisp-Entry "COLOR_WINDOWTEXT" #f 107 12 107 28 ("8")}
      {Lisp-Entry "COLOR_CAPTIONTEXT" #f 108 12 108 29 ("9")}
      {Lisp-Entry "COLOR_ACTIVEBORDER" #f 109 12 109 30 ("10")}
      {Lisp-Entry "COLOR_INACTIVEBORDER" #f 110 12 110 32 ("11")}
      {Lisp-Entry "COLOR_APPWORKSPACE" #f 111 12 111 30 ("12")}
      {Lisp-Entry "COLOR_HIGHLIGHT" #f 112 12 112 27 ("13")}
      {Lisp-Entry "COLOR_HIGHLIGHTTEXT" #f 113 12 113 31 ("14")}
      {Lisp-Entry "COLOR_BTNFACE" #f 114 12 114 25 ("15")}
      {Lisp-Entry "COLOR_BTNSHADOW" #f 115 12 115 27 ("16")}
      {Lisp-Entry "COLOR_GRAYTEXT" #f 116 12 116 26 ("17")}
      {Lisp-Entry "COLOR_BTNTEXT" #f 117 12 117 25 ("18")}
      {Lisp-Entry "COLOR_INACTIVECAPTIONTEXT" #f 118 12 118 37 ("19")}
      {Lisp-Entry "COLOR_BTNHIGHLIGHT" #f 119 12 119 30 ("20")}
      {Lisp-Entry "COLOR_3DDKSHADOW" #f 120 12 120 28 ("21")}
      {Lisp-Entry "COLOR_3DLIGHT" #f 121 12 121 25 ("22")}
      {Lisp-Entry "COLOR_INFOTEXT" #f 122 12 122 26 ("23")}
      {Lisp-Entry "COLOR_INFOBK" #f 123 12 123 24 ("24")}
      {Lisp-Entry "COLOR_HOTLIGHT" #f 124 12 124 26 ("26")}
      {Lisp-Entry "COLOR_GRADIENTACTIVECAPTION" #f 125 12 125 39 ("27")}
      {Lisp-Entry "COLOR_GRADIENTINACTIVECAPTION" #f 126 12 126 41 ("28")}
      {Lisp-Entry "COLOR_DESKTOP" #f 127 12 127 25 ("COLOR_BACKGROUND")}
      {Lisp-Entry "COLOR_3DFACE" #f 128 12 128 24 ("COLOR_BTNFACE")}
      {Lisp-Entry "COLOR_3DSHADOW" #f 129 12 129 26 ("COLOR_BTNSHADOW")}
      {Lisp-Entry "COLOR_3DHIGHLIGHT" #f 130 12 130 29 ("COLOR_BTNHIGHLIGHT")}
      {Lisp-Entry "COLOR_3DHILIGHT" #f 131 12 131 27 ("COLOR_BTNHIGHLIGHT")}
      {Lisp-Entry "COLOR_BTNHILIGHT" #f 132 12 132 28 ("COLOR_BTNHIGHLIGHT")}
      {Lisp-Entry "CWP_ALL" #f 135 12 135 19 ("0")}
      {Lisp-Entry "CWP_SKIPINVISIBLE" #f 136 12 136 29 ("1")}
      {Lisp-Entry "CWP_SKIPDISABLED" #f 137 12 137 28 ("2")}
      {Lisp-Entry "CWP_SKIPTRANSPARENT" #f 138 12 138 31 ("4")}
      {Lisp-Entry "IDC_ARROW" #f 140 12 140 21 ("32512")}
      {Lisp-Entry "IDC_IBEAM" #f 141 12 141 21 ("32513")}
      {Lisp-Entry "IDC_WAIT" #f 142 12 142 20 ("32514")}
      {Lisp-Entry "IDC_CROSS" #f 143 12 143 21 ("32515")}
      {Lisp-Entry "IDC_UPARROW" #f 145 12 145 23 ("32516")}
      {Lisp-Entry "IDC_SIZENWSE" #f 146 12 146 24 ("32642")}
      {Lisp-Entry "IDC_SIZENESW" #f 147 12 147 24 ("32643")}
      {Lisp-Entry "IDC_SIZEWE" #f 148 12 148 22 ("32644")}
      {Lisp-Entry "IDC_SIZENS" #f 149 12 149 22 ("32645")}
      {Lisp-Entry "IDC_SIZEALL" #f 150 12 150 23 ("32646")}
      {Lisp-Entry "IDC_NO" #f 151 12 151 18 ("32648")}
      {Lisp-Entry "IDC_HAND" #f 152 12 152 20 ("32649")}
      {Lisp-Entry "IDC_APPSTARTING" #f 153 12 153 27 ("32650")}
      {Lisp-Entry "IDC_HELP" #f 154 12 154 20 ("32651")}
      {Lisp-Entry "GCL_HBRBACKGROUND" #f 156 12 156 29 ("-10")}
      {Lisp-Entry "HWND_BOTTOM" #f 159 12 159 23 ("HWND" "c-function")}
      {Lisp-Entry "HWND_TOP" #f 160 12 160 20 ("HWND" "c-function")}
      {Lisp-Entry "RDW_ERASE" #f 163 12 163 21 ("4")}
      {Lisp-Entry "RDW_FRAME" #f 164 12 164 21 ("1024")}
      {Lisp-Entry "RDW_INTERNALPAINT" #f 165 12 165 29 ("2")}
      {Lisp-Entry "RDW_INVALIDATE" #f 166 12 166 26 ("1")}
      {Lisp-Entry "RDW_NOERASE" #f 167 12 167 23 ("32")}
      {Lisp-Entry "RDW_NOFRAME" #f 168 12 168 23 ("2048")}
      {Lisp-Entry "RDW_NOINTERNALPAINT" #f 169 12 169 31 ("16")}
      {Lisp-Entry "RDW_VALIDATE" #f 170 12 170 24 ("8")}
      {Lisp-Entry "RDW_ERASENOW" #f 171 12 171 24 ("512")}
      {Lisp-Entry "RDW_UPDATENOW" #f 172 12 172 25 ("256")}
      {Lisp-Entry "RDW_ALLCHILDREN" #f 173 12 173 27 ("128")}
      {Lisp-Entry "RDW_NOCHILDREN" #f 174 12 174 26 ("64")}
      {Lisp-Entry "GW_HWNDFIRST" #f 176 12 176 24 ("0")}
      {Lisp-Entry "GW_HWNDLAST" #f 177 12 177 23 ("1")}
      {Lisp-Entry "GW_HWNDNEXT" #f 178 12 178 23 ("2")}
      {Lisp-Entry "GW_HWNDPREV" #f 179 12 179 23 ("3")}
      {Lisp-Entry "GW_OWNER" #f 180 12 180 20 ("4")}
      {Lisp-Entry "GW_CHILD" #f 181 12 181 20 ("5")}
      {Lisp-Entry "GW_ENABLEDPOPUP" #f 182 12 182 27 ("6")}
      {Lisp-Entry "GW_MAX" #f 183 12 183 18 ("6")}
      {Lisp-Entry "SPI_SETWORKAREA" #f 185 12 185 27 ("#x002F")}
      {Lisp-Entry "GW_OWNER" #f 187 12 187 20 ("4")}
      {Lisp-Entry "SW_SCROLLCHILDREN" #f 189 12 189 29 ("1")}
      {Lisp-Entry "SW_INVALIDATE" #f 190 12 190 25 ("2")}
      {Lisp-Entry "SW_ERASE" #f 191 12 191 20 ("4")}
      {Lisp-Entry "SW_HIDE" #f 194 12 194 19 ("0")}
      {Lisp-Entry "SW_SHOWNORMAL" #f 195 12 195 25 ("1")}
      {Lisp-Entry "SW_NORMAL" #f 196 12 196 21 ("1")}
      {Lisp-Entry "SW_SHOWMINIMIZED" #f 197 12 197 28 ("2")}
      {Lisp-Entry "SW_SHOWMAXIMIZED" #f 198 12 198 28 ("3")}
      {Lisp-Entry "SW_MAXIMIZE" #f 199 12 199 23 ("3")}
      {Lisp-Entry "SW_SHOWNOACTIVATE" #f 200 12 200 29 ("4")}
      {Lisp-Entry "SW_SHOW" #f 201 12 201 19 ("5")}
      {Lisp-Entry "SW_MINIMIZE" #f 202 12 202 23 ("6")}
      {Lisp-Entry "SW_SHOWMINNOACTIVE" #f 203 12 203 30 ("7")}
      {Lisp-Entry "SW_SHOWNA" #f 204 12 204 21 ("8")}
      {Lisp-Entry "SW_RESTORE" #f 205 12 205 22 ("9")}
      {Lisp-Entry "SW_SHOWDEFAULT" #f 206 12 206 26 ("10")}
      {Lisp-Entry "SW_MAX" #f 207 12 207 18 ("10")}
      {Lisp-Entry "IDI_APPLICATION" #f 209 12 209 27 ("32512")}
      {Lisp-Entry "IDI_HAND" #f 210 12 210 20 ("32513")}
      {Lisp-Entry "IDI_QUESTION" #f 211 12 211 24 ("32514")}
      {Lisp-Entry "IDI_EXCLAMATION" #f 212 12 212 27 ("32515")}
      {Lisp-Entry "IDI_ASTERISK" #f 213 12 213 24 ("32516")}
      {Lisp-Entry "IDI_WINLOGO" #f 214 12 214 23 ("32517")}
      {Lisp-Entry "IDI_WARNING" #f 215 12 215 23 ("IDI_EXCLAMATION")}
      {Lisp-Entry "IDI_ERROR" #f 216 12 216 21 ("IDI_HAND")}
      {Lisp-Entry "IDI_INFORMATION" #f 217 12 217 27 ("IDI_ASTERISK")}
      {Lisp-Entry "SWP_DRAWFRAME" #f 220 12 220 25 ("#x0020")}
      {Lisp-Entry "SWP_FRAMECHANGED" #f 221 12 221 28 ("#x0020")}
      {Lisp-Entry "SWP_HIDEWINDOW" #f 222 12 222 26 ("#x0080")}
      {Lisp-Entry "SWP_NOACTIVATE" #f 223 12 223 26 ("#x0010")}
      {Lisp-Entry "SWP_NOCOPYBITS" #f 224 12 224 26 ("#x0100")}
      {Lisp-Entry "SWP_NOMOVE" #f 225 12 225 22 ("#x0002")}
      {Lisp-Entry "SWP_NOSIZE" #f 226 12 226 22 ("#x0001")}
      {Lisp-Entry "SWP_NOREDRAW" #f 227 12 227 24 ("#x0008")}
      {Lisp-Entry "SWP_NOZORDER" #f 228 12 228 24 ("#x0004")}
      {Lisp-Entry "SWP_SHOWWINDOW" #f 229 12 229 26 ("#x0040")}
      {Lisp-Entry "SWP_NOOWNERZORDER" #f 230 12 230 29 ("#x0200")}
      {Lisp-Entry "SWP_NOREPOSITION" #f 231 12 231 28 ("SWP_NOOWNERZORDER")}
      {Lisp-Entry "SWP_NOSENDCHANGING" #f 232 12 232 30 ("#x0400")}
      {Lisp-Entry "SWP_DEFERERASE" #f 233 12 233 26 ("#x2000")}
      {Lisp-Entry "SWP_ASYNCWINDOWPOS" #f 234 12 234 30 ("#x4000")}
      {Lisp-Entry "FVIRTKEY" #f 237 12 237 20 ("TRUE")}
      {Lisp-Entry "FNOINVERT" #f 238 12 238 21 ("#x02")}
      {Lisp-Entry "FSHIFT" #f 239 12 239 18 ("#x04")}
      {Lisp-Entry "FCONTROL" #f 240 12 240 20 ("#x08")}
      {Lisp-Entry "FALT" #f 241 12 241 16 ("#x10")}
      {Lisp-Entry "MB_ICONHAND" #f 243 12 243 23 ("#x00000010")}
      {Lisp-Entry "MB_ICONQUESTION" #f 244 12 244 27 ("#x00000020")}
      {Lisp-Entry "MB_ICONEXCLAMATION" #f 245 12 245 30 ("#x00000030")}
      {Lisp-Entry "MB_ICONASTERISK" #f 246 12 246 27 ("#x00000040")}
      {Lisp-Entry "MB_APPLMODAL" #f 247 12 247 24 ("#x00000000")}
      {Lisp-Entry "MB_SYSTEMMODAL" #f 248 12 248 26 ("#x00001000")}
      {Lisp-Entry "MB_TASKMODAL" #f 249 12 249 24 ("#x00002000")}
      {Lisp-Entry "WA_INACTIVE" #f 251 12 251 23 ("0")}
      {Lisp-Entry "WA_ACTIVE" #f 252 12 252 21 ("1")}
      {Lisp-Entry "WA_CLICKACTIVE" #f 253 12 253 26 ("2")}
      {Lisp-Entry "WM_NULL" #f 255 12 255 19 ("#x0000")}
      {Lisp-Entry "WM_CREATE" #f 256 12 256 21 ("#x0001")}
      {Lisp-Entry "WM_DESTROY" #f 257 12 257 22 ("#x0002")}
      {Lisp-Entry "WM_MOVE" #f 258 12 258 19 ("#x0003")}
      {Lisp-Entry "WM_SIZE" #f 259 12 259 19 ("#x0005")}
      {Lisp-Entry "WM_ACTIVATE" #f 260 12 260 23 ("#x0006")}
      {Lisp-Entry "WM_SETFOCUS" #f 261 12 261 23 ("#x0007")}
      {Lisp-Entry "WM_KILLFOCUS" #f 262 12 262 24 ("#x0008")}
      {Lisp-Entry "WM_ENABLE" #f 263 12 263 21 ("#x000A")}
      {Lisp-Entry "WM_SETREDRAW" #f 264 12 264 24 ("#x000B")}
      {Lisp-Entry "WM_SETTEXT" #f 265 12 265 22 ("#x000C")}
      {Lisp-Entry "WM_GETTEXT" #f 266 12 266 22 ("#x000D")}
      {Lisp-Entry "WM_GETTEXTLENGTH" #f 267 12 267 28 ("#x000E")}
      {Lisp-Entry "WM_PAINT" #f 268 12 268 20 ("#x000F")}
      {Lisp-Entry "WM_CLOSE" #f 269 12 269 20 ("#x0010")}
      {Lisp-Entry "WM_QUERYENDSESSION" #f 270 12 270 30 ("#x0011")}
      {Lisp-Entry "WM_QUIT" #f 271 12 271 19 ("#x0012")}
      {Lisp-Entry "WM_QUERYOPEN" #f 272 12 272 24 ("#x0013")}
      {Lisp-Entry "WM_ERASEBKGND" #f 273 12 273 25 ("#x0014")}
      {Lisp-Entry "WM_SYSCOLORCHANGE" #f 274 12 274 29 ("#x0015")}
      {Lisp-Entry "WM_ENDSESSION" #f 275 12 275 25 ("#x0016")}
      {Lisp-Entry "WM_SHOWWINDOW" #f 276 12 276 25 ("#x0018")}
      {Lisp-Entry "WM_WININICHANGE" #f 277 12 277 27 ("#x001A")}
      {Lisp-Entry "WM_SETTINGCHANGE" #f 278 12 278 28 ("WM_WININICHANGE")}
      {Lisp-Entry "WM_DEVMODECHANGE" #f 280 12 280 28 ("#x001B")}
      {Lisp-Entry "WM_ACTIVATEAPP" #f 281 12 281 26 ("#x001C")}
      {Lisp-Entry "WM_FONTCHANGE" #f 282 12 282 25 ("#x001D")}
      {Lisp-Entry "WM_TIMECHANGE" #f 283 12 283 25 ("#x001E")}
      {Lisp-Entry "WM_CANCELMODE" #f 284 12 284 25 ("#x001F")}
      {Lisp-Entry "WM_SETCURSOR" #f 285 12 285 24 ("#x0020")}
      {Lisp-Entry "WM_MOUSEACTIVATE" #f 286 12 286 28 ("#x0021")}
      {Lisp-Entry "WM_CHILDACTIVATE" #f 287 12 287 28 ("#x0022")}
      {Lisp-Entry "WM_QUEUESYNC" #f 288 12 288 24 ("#x0023")}
      {Lisp-Entry "WM_GETMINMAXINFO" #f 289 12 289 28 ("#x0024")}
      {Lisp-Entry "WM_PAINTICON" #f 291 12 291 24 ("#x0026")}
      {Lisp-Entry "WM_ICONERASEBKGND" #f 292 12 292 29 ("#x0027")}
      {Lisp-Entry "WM_NEXTDLGCTL" #f 293 12 293 25 ("#x0028")}
      {Lisp-Entry "WM_SPOOLERSTATUS" #f 294 12 294 28 ("#x002A")}
      {Lisp-Entry "WM_DRAWITEM" #f 295 12 295 23 ("#x002B")}
      {Lisp-Entry "WM_MEASUREITEM" #f 296 12 296 26 ("#x002C")}
      {Lisp-Entry "WM_DELETEITEM" #f 297 12 297 25 ("#x002D")}
      {Lisp-Entry "WM_VKEYTOITEM" #f 298 12 298 25 ("#x002E")}
      {Lisp-Entry "WM_CHARTOITEM" #f 299 12 299 25 ("#x002F")}
      {Lisp-Entry "WM_SETFONT" #f 300 12 300 22 ("#x0030")}
      {Lisp-Entry "WM_GETFONT" #f 301 12 301 22 ("#x0031")}
      {Lisp-Entry "WM_SETHOTKEY" #f 302 12 302 24 ("#x0032")}
      {Lisp-Entry "WM_GETHOTKEY" #f 303 12 303 24 ("#x0033")}
      {Lisp-Entry "WM_QUERYDRAGICON" #f 304 12 304 28 ("#x0037")}
      {Lisp-Entry "WM_COMPAREITEM" #f 305 12 305 26 ("#x0039")}
      {Lisp-Entry "WM_GETOBJECT" #f 306 12 306 24 ("#x003D")}
      {Lisp-Entry "WM_COMPACTING" #f 307 12 307 25 ("#x0041")}
      {Lisp-Entry "WM_COMMNOTIFY" #f 308 12 308 25 ("#x0044")}
      {Lisp-Entry "WM_WINDOWPOSCHANGING" #f 309 12 309 32 ("#x0046")}
      {Lisp-Entry "WM_WINDOWPOSCHANGED" #f 310 12 310 31 ("#x0047")}
      {Lisp-Entry "WM_POWER" #f 311 12 311 20 ("#x0048")}
      {Lisp-Entry "WM_COPYDATA" #f 312 12 312 23 ("#x004A")}
      {Lisp-Entry "WM_CANCELJOURNAL" #f 313 12 313 28 ("#x004B")}
      {Lisp-Entry "WM_NOTIFY" #f 315 12 315 21 ("#x004E")}
      {Lisp-Entry "WM_INPUTLANGCHANGEREQUEST" #f 316 12 316 37 ("#x0050")}
      {Lisp-Entry "WM_INPUTLANGCHANGE" #f 317 12 317 30 ("#x0051")}
      {Lisp-Entry "WM_TCARD" #f 318 12 318 20 ("#x0052")}
      {Lisp-Entry "WM_HELP" #f 319 12 319 19 ("#x0053")}
      {Lisp-Entry "WM_USERCHANGED" #f 320 12 320 26 ("#x0054")}
      {Lisp-Entry "WM_NOTIFYFORMAT" #f 321 12 321 27 ("#x0055")}
      {Lisp-Entry "WM_CONTEXTMENU" #f 323 12 323 26 ("#x007B")}
      {Lisp-Entry "WM_STYLECHANGING" #f 324 12 324 28 ("#x007C")}
      {Lisp-Entry "WM_STYLECHANGED" #f 325 12 325 27 ("#x007D")}
      {Lisp-Entry "WM_DISPLAYCHANGE" #f 326 12 326 28 ("#x007E")}
      {Lisp-Entry "WM_GETICON" #f 327 12 327 22 ("#x007F")}
      {Lisp-Entry "WM_SETICON" #f 328 12 328 22 ("#x0080")}
      {Lisp-Entry "WM_NCCREATE" #f 330 12 330 23 ("#x0081")}
      {Lisp-Entry "WM_NCDESTROY" #f 331 12 331 24 ("#x0082")}
      {Lisp-Entry "WM_NCCALCSIZE" #f 332 12 332 25 ("#x0083")}
      {Lisp-Entry "WM_NCHITTEST" #f 333 12 333 24 ("#x0084")}
      {Lisp-Entry "WM_NCPAINT" #f 334 12 334 22 ("#x0085")}
      {Lisp-Entry "WM_NCACTIVATE" #f 335 12 335 25 ("#x0086")}
      {Lisp-Entry "WM_GETDLGCODE" #f 336 12 336 25 ("#x0087")}
      {Lisp-Entry "WM_SYNCPAINT" #f 337 12 337 24 ("#x0088")}
      {Lisp-Entry "WM_NCMOUSEMOVE" #f 338 12 338 26 ("#x00A0")}
      {Lisp-Entry "WM_NCLBUTTONDOWN" #f 339 12 339 28 ("#x00A1")}
      {Lisp-Entry "WM_NCLBUTTONUP" #f 340 12 340 26 ("#x00A2")}
      {Lisp-Entry "WM_NCLBUTTONDBLCLK" #f 341 12 341 30 ("#x00A3")}
      {Lisp-Entry "WM_NCRBUTTONDOWN" #f 342 12 342 28 ("#x00A4")}
      {Lisp-Entry "WM_NCRBUTTONUP" #f 343 12 343 26 ("#x00A5")}
      {Lisp-Entry "WM_NCRBUTTONDBLCLK" #f 344 12 344 30 ("#x00A6")}
      {Lisp-Entry "WM_NCMBUTTONDOWN" #f 345 12 345 28 ("#x00A7")}
      {Lisp-Entry "WM_NCMBUTTONUP" #f 346 12 346 26 ("#x00A8")}
      {Lisp-Entry "WM_NCMBUTTONDBLCLK" #f 347 12 347 30 ("#x00A9")}
      {Lisp-Entry "WM_KEYFIRST" #f 349 12 349 23 ("#x0100")}
      {Lisp-Entry "WM_KEYDOWN" #f 350 12 350 22 ("#x0100")}
      {Lisp-Entry "WM_KEYUP" #f 351 12 351 20 ("#x0101")}
      {Lisp-Entry "WM_CHAR" #f 352 12 352 19 ("#x0102")}
      {Lisp-Entry "WM_DEADCHAR" #f 353 12 353 23 ("#x0103")}
      {Lisp-Entry "WM_SYSKEYDOWN" #f 354 12 354 25 ("#x0104")}
      {Lisp-Entry "WM_SYSKEYUP" #f 355 12 355 23 ("#x0105")}
      {Lisp-Entry "WM_SYSCHAR" #f 356 12 356 22 ("#x0106")}
      {Lisp-Entry "WM_SYSDEADCHAR" #f 357 12 357 26 ("#x0107")}
      {Lisp-Entry "WM_KEYLAST" #f 358 12 358 22 ("#x0108")}
      {Lisp-Entry "WM_IME_STARTCOMPOSITION" #f 359 12 359 35 ("#x010D")}
      {Lisp-Entry "WM_IME_ENDCOMPOSITION" #f 360 12 360 33 ("#x010E")}
      {Lisp-Entry "WM_IME_COMPOSITION" #f 361 12 361 30 ("#x010F")}
      {Lisp-Entry "WM_IME_KEYLAST" #f 362 12 362 26 ("#x010F")}
      {Lisp-Entry "WM_INITDIALOG" #f 364 12 364 25 ("#x0110")}
      {Lisp-Entry "WM_COMMAND" #f 365 12 365 22 ("#x0111")}
      {Lisp-Entry "WM_SYSCOMMAND" #f 366 12 366 25 ("#x0112")}
      {Lisp-Entry "WM_TIMER" #f 367 12 367 20 ("#x0113")}
      {Lisp-Entry "WM_HSCROLL" #f 368 12 368 22 ("#x0114")}
      {Lisp-Entry "WM_VSCROLL" #f 369 12 369 22 ("#x0115")}
      {Lisp-Entry "WM_INITMENU" #f 370 12 370 23 ("#x0116")}
      {Lisp-Entry "WM_INITMENUPOPUP" #f 371 12 371 28 ("#x0117")}
      {Lisp-Entry "WM_MENUSELECT" #f 372 12 372 25 ("#x011F")}
      {Lisp-Entry "WM_MENUCHAR" #f 373 12 373 23 ("#x0120")}
      {Lisp-Entry "WM_ENTERIDLE" #f 374 12 374 24 ("#x0121")}
      {Lisp-Entry "WM_CTLCOLORMSGBOX" #f 375 12 375 29 ("#x0132")}
      {Lisp-Entry "WM_CTLCOLOREDIT" #f 376 12 376 27 ("#x0133")}
      {Lisp-Entry "WM_CTLCOLORLISTBOX" #f 377 12 377 30 ("#x0134")}
      {Lisp-Entry "WM_CTLCOLORBTN" #f 378 12 378 26 ("#x0135")}
      {Lisp-Entry "WM_CTLCOLORDLG" #f 379 12 379 26 ("#x0136")}
      {Lisp-Entry "WM_CTLCOLORSCROLLBAR" #f 380 12 380 32 ("#x0137")}
      {Lisp-Entry "WM_CTLCOLORSTATIC" #f 381 12 381 29 ("#x0138")}
      {Lisp-Entry "WM_MOUSEFIRST" #f 383 12 383 25 ("#x0200")}
      {Lisp-Entry "WM_MOUSEMOVE" #f 384 12 384 24 ("#x0200")}
      {Lisp-Entry "WM_LBUTTONDOWN" #f 385 12 385 26 ("#x0201")}
      {Lisp-Entry "WM_LBUTTONUP" #f 386 12 386 24 ("#x0202")}
      {Lisp-Entry "WM_LBUTTONDBLCLK" #f 387 12 387 28 ("#x0203")}
      {Lisp-Entry "WM_RBUTTONDOWN" #f 388 12 388 26 ("#x0204")}
      {Lisp-Entry "WM_RBUTTONUP" #f 389 12 389 24 ("#x0205")}
      {Lisp-Entry "WM_RBUTTONDBLCLK" #f 390 12 390 28 ("#x0206")}
      {Lisp-Entry "WM_MBUTTONDOWN" #f 391 12 391 26 ("#x0207")}
      {Lisp-Entry "WM_MBUTTONUP" #f 392 12 392 24 ("#x0208")}
      {Lisp-Entry "WM_MBUTTONDBLCLK" #f 393 12 393 28 ("#x0209")}
      {Lisp-Entry "WM_MOUSEWHEEL" #f 394 12 394 25 ("#x020A")}
      {Lisp-Entry "WM_MOUSELAST" #f 395 12 395 24 ("#x020A")}
      {Lisp-Entry "WM_PARENTNOTIFY" #f 396 12 396 27 ("#x0210")}
      {Lisp-Entry "WM_ENTERMENULOOP" #f 397 12 397 28 ("#x0211")}
      {Lisp-Entry "WM_EXITMENULOOP" #f 398 12 398 27 ("#x0212")}
      {Lisp-Entry "WM_NEXTMENU" #f 399 12 399 23 ("#x0213")}
      {Lisp-Entry "WM_SIZING" #f 400 12 400 21 ("#x0214")}
      {Lisp-Entry "WM_CAPTURECHANGED" #f 401 12 401 29 ("#x0215")}
      {Lisp-Entry "WM_MOVING" #f 402 12 402 21 ("#x0216")}
      {Lisp-Entry "WM_POWERBROADCAST" #f 403 12 403 29 ("#x0218")}
      {Lisp-Entry "WM_DEVICECHANGE" #f 404 12 404 27 ("#x0219")}
      {Lisp-Entry "WM_MDICREATE" #f 406 12 406 24 ("#x0220")}
      {Lisp-Entry "WM_MDIDESTROY" #f 407 12 407 25 ("#x0221")}
      {Lisp-Entry "WM_MDIACTIVATE" #f 408 12 408 26 ("#x0222")}
      {Lisp-Entry "WM_MDIRESTORE" #f 409 12 409 25 ("#x0223")}
      {Lisp-Entry "WM_MDINEXT" #f 410 12 410 22 ("#x0224")}
      {Lisp-Entry "WM_MDIMAXIMIZE" #f 411 12 411 26 ("#x0225")}
      {Lisp-Entry "WM_MDITILE" #f 412 12 412 22 ("#x0226")}
      {Lisp-Entry "WM_MDICASCADE" #f 413 12 413 25 ("#x0227")}
      {Lisp-Entry "WM_MDIICONARRANGE" #f 414 12 414 29 ("#x0228")}
      {Lisp-Entry "WM_MDIGETACTIVE" #f 415 12 415 27 ("#x0229")}
      {Lisp-Entry "WM_MDISETMENU" #f 416 12 416 25 ("#x0230")}
      {Lisp-Entry "WM_ENTERSIZEMOVE" #f 417 12 417 28 ("#x0231")}
      {Lisp-Entry "WM_EXITSIZEMOVE" #f 418 12 418 27 ("#x0232")}
      {Lisp-Entry "WM_DROPFILES" #f 419 12 419 24 ("#x0233")}
      {Lisp-Entry "WM_MDIREFRESHMENU" #f 420 12 420 29 ("#x0234")}
      {Lisp-Entry "WM_IME_SETCONTEXT" #f 422 12 422 29 ("#x0281")}
      {Lisp-Entry "WM_IME_NOTIFY" #f 423 12 423 25 ("#x0282")}
      {Lisp-Entry "WM_IME_CONTROL" #f 424 12 424 26 ("#x0283")}
      {Lisp-Entry "WM_IME_COMPOSITIONFULL" #f 425 12 425 34 ("#x0284")}
      {Lisp-Entry "WM_IME_SELECT" #f 426 12 426 25 ("#x0285")}
      {Lisp-Entry "WM_IME_CHAR" #f 427 12 427 23 ("#x0286")}
      {Lisp-Entry "WM_IME_KEYDOWN" #f 428 12 428 26 ("#x0290")}
      {Lisp-Entry "WM_IME_KEYUP" #f 429 12 429 24 ("#x0291")}
      {Lisp-Entry "WM_MOUSEHOVER" #f 430 12 430 25 ("#x02A1")}
      {Lisp-Entry "WM_MOUSELEAVE" #f 431 12 431 25 ("#x02A3")}
      {Lisp-Entry "WM_CUT" #f 433 12 433 18 ("#x0300")}
      {Lisp-Entry "WM_COPY" #f 434 12 434 19 ("#x0301")}
      {Lisp-Entry "WM_PASTE" #f 435 12 435 20 ("#x0302")}
      {Lisp-Entry "WM_CLEAR" #f 436 12 436 20 ("#x0303")}
      {Lisp-Entry "WM_UNDO" #f 437 12 437 19 ("#x0304")}
      {Lisp-Entry "WM_RENDERFORMAT" #f 438 12 438 27 ("#x0305")}
      {Lisp-Entry "WM_RENDERALLFORMATS" #f 439 12 439 31 ("#x0306")}
      {Lisp-Entry "WM_DESTROYCLIPBOARD" #f 440 12 440 31 ("#x0307")}
      {Lisp-Entry "WM_DRAWCLIPBOARD" #f 441 12 441 28 ("#x0308")}
      {Lisp-Entry "WM_PAINTCLIPBOARD" #f 442 12 442 29 ("#x0309")}
      {Lisp-Entry "WM_VSCROLLCLIPBOARD" #f 443 12 443 31 ("#x030A")}
      {Lisp-Entry "WM_SIZECLIPBOARD" #f 444 12 444 28 ("#x030B")}
      {Lisp-Entry "WM_ASKCBFORMATNAME" #f 445 12 445 30 ("#x030C")}
      {Lisp-Entry "WM_CHANGECBCHAIN" #f 446 12 446 28 ("#x030D")}
      {Lisp-Entry "WM_HSCROLLCLIPBOARD" #f 447 12 447 31 ("#x030E")}
      {Lisp-Entry "WM_QUERYNEWPALETTE" #f 448 12 448 30 ("#x030F")}
      {Lisp-Entry "WM_PALETTEISCHANGING" #f 449 12 449 32 ("#x0310")}
      {Lisp-Entry "WM_PALETTECHANGED" #f 450 12 450 29 ("#x0311")}
      {Lisp-Entry "WM_HOTKEY" #f 451 12 451 21 ("#x0312")}
      {Lisp-Entry "WM_PRINT" #f 453 12 453 20 ("#x0317")}
      {Lisp-Entry "WM_PRINTCLIENT" #f 454 12 454 26 ("#x0318")}
      {Lisp-Entry "WM_HANDHELDFIRST" #f 456 12 456 28 ("#x0358")}
      {Lisp-Entry "WM_HANDHELDLAST" #f 457 12 457 27 ("#x035F")}
      {Lisp-Entry "WM_AFXFIRST" #f 459 12 459 23 ("#x0360")}
      {Lisp-Entry "WM_AFXLAST" #f 460 12 460 22 ("#x037F")}
      {Lisp-Entry "WM_PENWINFIRST" #f 462 12 462 26 ("#x0380")}
      {Lisp-Entry "WM_PENWINLAST" #f 463 12 463 25 ("#x038F")}
      {Lisp-Entry "WM_USER" #f 465 12 465 19 ("#x0400")}
      {Lisp-Entry "WM_APP" #f 466 12 466 18 ("#x8000")}
      {Lisp-Entry "PM_NOREMOVE" #f 469 12 469 23 ("#x0000")}
      {Lisp-Entry "PM_REMOVE" #f 470 12 470 21 ("#x0001")}
      {Lisp-Entry "PM_NOYIELD" #f 471 12 471 22 ("#x0002")}
      {Lisp-Entry "HTERROR" #f 474 12 474 19 ("-2")}
      {Lisp-Entry "HTTRANSPARENT" #f 475 12 475 25 ("-1")}
      {Lisp-Entry "HTNOWHERE" #f 476 12 476 21 ("0")}
      {Lisp-Entry "HTCLIENT" #f 477 12 477 20 ("1")}
      {Lisp-Entry "HTCAPTION" #f 478 12 478 21 ("2")}
      {Lisp-Entry "HTSYSMENU" #f 479 12 479 21 ("3")}
      {Lisp-Entry "HTGROWBOX" #f 480 12 480 21 ("4")}
      {Lisp-Entry "HTSIZE" #f 481 12 481 18 ("HTGROWBOX")}
      {Lisp-Entry "HTMENU" #f 482 12 482 18 ("5")}
      {Lisp-Entry "HTHSCROLL" #f 483 12 483 21 ("6")}
      {Lisp-Entry "HTVSCROLL" #f 484 12 484 21 ("7")}
      {Lisp-Entry "HTMINBUTTON" #f 485 12 485 23 ("8")}
      {Lisp-Entry "HTMAXBUTTON" #f 486 12 486 23 ("9")}
      {Lisp-Entry "HTLEFT" #f 487 12 487 18 ("10")}
      {Lisp-Entry "HTRIGHT" #f 488 12 488 19 ("11")}
      {Lisp-Entry "HTTOP" #f 489 12 489 17 ("12")}
      {Lisp-Entry "HTTOPLEFT" #f 490 12 490 21 ("13")}
      {Lisp-Entry "HTTOPRIGHT" #f 491 12 491 22 ("14")}
      {Lisp-Entry "HTBOTTOM" #f 492 12 492 20 ("15")}
      {Lisp-Entry "HTBOTTOMLEFT" #f 493 12 493 24 ("16")}
      {Lisp-Entry "HTBOTTOMRIGHT" #f 494 12 494 25 ("17")}
      {Lisp-Entry "HTBORDER" #f 495 12 495 20 ("18")}
      {Lisp-Entry "HTREDUCE" #f 496 12 496 20 ("HTMINBUTTON")}
      {Lisp-Entry "HTZOOM" #f 497 12 497 18 ("HTMAXBUTTON")}
      {Lisp-Entry "HTSIZEFIRST" #f 498 12 498 23 ("HTLEFT")}
      {Lisp-Entry "HTSIZELAST" #f 499 12 499 22 ("HTBOTTOMRIGHT")}
      {Lisp-Entry "HTOBJECT" #f 500 12 500 20 ("19")}
      {Lisp-Entry "HTCLOSE" #f 501 12 501 19 ("20")}
      {Lisp-Entry "HTHELP" #f 502 12 502 18 ("21")}
      {Lisp-Entry "MA_ACTIVATE" #f 504 12 504 23 ("1")}
      {Lisp-Entry "MA_ACTIVATEANDEAT" #f 505 12 505 29 ("2")}
      {Lisp-Entry "MA_NOACTIVATE" #f 506 12 506 25 ("3")}
      {Lisp-Entry "MA_NOACTIVATEANDEAT" #f 507 12 507 31 ("4")}
      {Lisp-Entry "SPI_GETWORKAREA" #f 510 12 510 27 ("48")}
      {Lisp-Entry "QS_ALLINPUT" #f 513 12 513 23 ("#x04FF")}
      {Lisp-Entry "MB_ICONWARNING" #f 516 12 516 26 ("48")}
      {Lisp-Entry "MB_ICONERROR" #f 517 12 517 24 ("16")}
      {Lisp-Entry "MB_OK" #f 518 12 518 17 ("0")}
      {Lisp-Entry "MB_ICONINFORMATION" #f 519 12 519 30 ("64")}
      {Lisp-Entry "MB_OKCANCEL" #f 520 12 520 23 ("1")}
      {Lisp-Entry "MB_YESNO" #f 521 12 521 20 ("4")}
      {Lisp-Entry "MB_YESNOCANCEL" #f 522 12 522 26 ("3")}
      {Lisp-Entry "CLIPBOARD_FORMAT" #f 530 15 530 31 ("17" "CF_MAX" "16" "CF_LOCALE" "15" "CF_HDROP" "14" "CF_ENHMETAFILE" "13" "CF_UNICODETEXT" "12" "CF_WAVE" "11" "CF_RIFF" "10" "CF_PENDATA" "9" "CF_PALETTE" "8" "CF_DIB" "7" "CF_OEMTEXT" "6" "CF_TIFF" "5" "CF_DIF" "4" "CF_SYLK" "3" "CF_METAFILEPICT" "2" "CF_BITMAP" "1" "CF_TEXT")}
      {Lisp-Entry "VIRTUAL_KEYS" #f 550 15 550 27 ("#xDF" "VK_OEM_8" "#xDE" "VK_OEM_7" "#xDD" "VK_OEM_6" "#xDC" "VK_OEM_5" "#xDB" "VK_OEM_4" "#xC0" "VK_OEM_3" "#xBF" "VK_OEM_2" "#xBE" "VK_OEM_PERIOD" "#xBD" "VK_OEM_MINUS" "#xBC" "VK_OEM_COMMA" "#xBB" "VK_OEM_PLUS" "#xBA" "VK_OEM_1" "#xB7" "VK_LAUNCH_APP2" "#xB6" "VK_LAUNCH_APP1" "#xB5" "VK_LAUNCH_MEDIA_SELECT" "#xB4" "VK_LAUNCH_MAIL" "#xB3" "VK_MEDIA_PLAY_PAUSE" "#xB2" "VK_MEDIA_STOP" "#xB1" "VK_MEDIA_PREV_TRACK" "#xB0" "VK_MEDIA_NEXT_TRACK" "#xAF" "VK_VOLUME_UP" "#xAE" "VK_VOLUME_DOWN" "#xAD" "VK_VOLUME_MUTE" "#xAC" "VK_BROWSER_HOME" "#xAB" "VK_BROWSER_FAVORITES" "#xAA" "VK_BROWSER_SEARCH" "#xA9" "VK_BROWSER_STOP" "#xA8" "VK_BROWSER_REFRESH" "#xA7" "VK_BROWSER_FORWARD" "#xA6" "VK_BROWSER_BACK" "#xA5" "VK_RMENU" "#xA4" "VK_LMENU" "#xA3" "VK_RCONTROL" "#xA2" "VK_LCONTROL" "#xA1" "VK_RSHIFT" "#xA0" "VK_LSHIFT" "#x92" "VK_OEM_NEC_EQUAL" "#x91" "VK_SCROLL" "#x90" "VK_NUMLOCK" "#x87" "VK_F24" "#x86" "VK_F23" "#x85" "VK_F22" "#x84" "VK_F21" "#x83" "VK_F20" "#x82" "VK_F19" "#x81" "VK_F18" "#x80" "VK_F17" "#x7F" "VK_F16" "#x7E" "VK_F15" "#x7D" "VK_F14" "#x7C" "VK_F13" "#x7B" "VK_F12" "#x7A" "VK_F11" "#x79" "VK_F10" "#x78" "VK_F9" "#x77" "VK_F8" "#x76" "VK_F7" "#x75" "VK_F6" "#x74" "VK_F5" "#x73" "VK_F4" "#x72" "VK_F3" "#x71" "VK_F2" "#x70" "VK_F1" "#x6F" "VK_DIVIDE" "#x6E" "VK_DECIMAL" "#x6D" "VK_SUBTRACT" "#x6C" "VK_SEPARATOR" "#x6B" "VK_ADD" "#x6A" "VK_MULTIPLY" "#x69" "VK_NUMPAD9" "#x68" "VK_NUMPAD8" "#x67" "VK_NUMPAD7" "#x66" "VK_NUMPAD6" "#x65" "VK_NUMPAD5" "#x64" "VK_NUMPAD4" "#x63" "VK_NUMPAD3" "#x62" "VK_NUMPAD2" "#x61" "VK_NUMPAD1" "#x60" "VK_NUMPAD0" "#x5D" "VK_APPS" "#x5C" "VK_RWIN" "#x5B" "VK_LWIN" "#x2F" "VK_HELP" "#x2E" "VK_DELETE" "#x2D" "VK_INSERT" "#x2C" "VK_SNAPSHOT" "#x2B" "VK_EXECUTE" "#x2A" "VK_PRINT" "#x29" "VK_SELECT" "#x28" "VK_DOWN" "#x27" "VK_RIGHT" "#x26" "VK_UP" "#x25" "VK_LEFT" "#x24" "VK_HOME" "#x23" "VK_END" "#x22" "VK_NEXT" "#x21" "VK_PRIOR" "#x20" "VK_SPACE" "#x1B" "VK_ESCAPE" "#x14" "VK_CAPITAL" "#x13" "VK_PAUSE" "#x12" "VK_MENU" "#x11" "VK_CONTROL" "#x10" "VK_SHIFT" "#x0D" "VK_RETURN" "#x0C" "VK_CLEAR" "#x09" "VK_TAB" "#x08" "VK_BACK" "#x04" "VK_MBUTTON" "#x03" "VK_CANCEL" "#x02" "VK_RBUTTON" "#x01" "VK_LBUTTON")}
      {Lisp-Entry "WINSTYLE" #f 676 15 676 23 ("#x00010000" "WS_TABSTOP" "#x00020000" "WS_GROUP" "#x00040000" "WS_THICKFRAME" "#x00080000" "WS_SYSMENU" "#x00100000" "WS_HSCROLL" "#x00200000" "WS_VSCROLL" "#x00400000" "WS_DLGFRAME" "#x00800000" "WS_BORDER" "#x00C00000" "WS_CAPTION" "#x01000000" "WS_MAXIMIZE" "#x02000000" "WS_CLIPCHILDREN" "#x04000000" "WS_CLIPSIBLINGS" "#x08000000" "WS_DISABLED" "#x10000000" "WS_VISIBLE" "#x20000000" "WS_MINIMIZE" "#x40000000" "WS_CHILD" "#x80000000" "WS_POPUP" "#x00000000" "WS_OVERLAPPED")}
      {Lisp-Entry "WINEXSTYLE" #f 697 15 697 25 ("#x00080000" "WS_EX_LAYERED" "#x00040000" "WS_EX_APPWINDOW" "#x00020000" "WS_EX_STATICEDGE" "#x00010000" "WS_EX_CONTROLPARENT" "WS_EX_RIGHTSCROLLBAR" "#x00004000" "WS_EX_LEFTSCROLLBAR" "WS_EX_LTRREADING" "#x00002000" "WS_EX_RTLREADING" "#x00000000" "WS_EX_LEFT" "#x00001000" "WS_EX_RIGHT" "#x00000400" "WS_EX_CONTEXTHELP" "#x00000200" "WS_EX_CLIENTEDGE" "#x00000100" "WS_EX_WINDOWEDGE" "#x00000080" "WS_EX_TOOLWINDOW" "#x00000040" "WS_EX_MDICHILD" "#x00000020" "WS_EX_TRANSPARENT" "#x00000010" "WS_EX_ACCEPTFILES" "#x00000008" "WS_EX_TOPMOST" "#x00000004" "WS_EX_NOPARENTNOTIFY" "#x00000001" "WS_EX_DLGMODALFRAME")}
      {Lisp-Entry "WS_MINIMIZEBOX" #f 720 12 720 26 ("#x00020000")}
      {Lisp-Entry "WS_MAXIMIZEBOX" #f 721 12 721 26 ("#x00010000")}
      {Lisp-Entry "WS_OVERLAPPEDWINDOW" #f 723 12 723 31 ("WS_MAXIMIZEBOX" "WS_MINIMIZEBOX" "WS_THICKFRAME" "WS_SYSMENU" "WS_CAPTION" "bitwise-ior")}
      {Lisp-Entry "WS_POPUPWINDOW" #f 730 12 730 26 ("WS_SYSMENU" "WS_BORDER" "WS_POPUP" "bitwise-ior")}
      {Lisp-Entry "WS_TILED" #f 735 12 735 20 ("WS_OVERLAPPED")}
      {Lisp-Entry "WS_ICONIC" #f 736 12 736 21 ("WS_MINIMIZE")}
      {Lisp-Entry "WS_SIZEBOX" #f 737 12 737 22 ("WS_THICKFRAME")}
      {Lisp-Entry "WS_TILEDWINDOW" #f 738 12 738 26 ("WS_OVERLAPPEDWINDOW")}
      {Lisp-Entry "WS_EX_OVERLAPPEDWINDOW" #f 740 12 740 34 ("WS_EX_CLIENTEDGE" "WS_EX_WINDOWEDGE" "bitwise-ior")}
      {Lisp-Entry "WS_EX_PALETTEWINDOW" #f 741 12 741 31 ("WS_EX_TOPMOST" "WS_EX_TOOLWINDOW" "WS_EX_WINDOWEDGE" "bitwise-ior")}
      {Lisp-Entry "ACCEL" #f 744 13 744 18 ("cmd" "key" "WORD" "fVirt" "BYTE")}
      {Lisp-Entry "LPACCEL" #f 749 8 749 15 ("ACCEL*")}
      {Lisp-Entry "make-ACCEL-array" #f 751 12 751 28 ("ACCEL*" "INT" "c-function")}
      {Lisp-Entry "ACCEL-array-ref" #f 752 12 752 27 ("INT" "ACCEL*" "c-function")}
      {Lisp-Entry "TRACKMOUSEEVENT" #f 754 13 754 28 ("dwHoverTime" "hwndTrack" "HWND" "dwFlags" "cbSize" "DWORD")}
      {Lisp-Entry "LPTRACKMOUSEEVENT" #f 761 8 761 25 ("TRACKMOUSEEVENT*")}
      {Lisp-Entry "size-of-TRACKMOUSEEVENT" #f 764 12 764 35 ("INT" "c-function")}
      {Lisp-Entry "MSG" #f 767 13 767 16 ("time" "DWORD" "lParam" "LPARAM" "wParam" "WPARAM" "message" "UINT" "hwnd" "HWND")}
      {Lisp-Entry "LPMSG" #f 775 8 775 13 ("MSG*")}
      {Lisp-Entry "PAINTSTRUCT" #f 778 13 778 24 ("32" "rgbReserved" "BYTE" "fIncUpdate" "fRestore" "rcPaint" "RECT" "fErase" "BOOL" "hdc" "HDC")}
      {Lisp-Entry "WNDCLASS" #f 787 14 787 22 ("lpszClassName" "lpszMenuName" "LPCTSTR" "hbrBackground" "HBRUSH" "hCursor" "HCURSOR" "hIcon" "HICON" "hInstance" "HINSTANCE" "cbWndExtra" "cbClsExtra" "INT" "lpfnWndProc" "WNDPROC" "style" "UINT")}
      {Lisp-Entry "make-WNDCLASS" #f 800 12 800 25 ("WNDCLASS*" "c-function")}
      {Lisp-Entry "RegisterClass" #f 803 21 803 34 ()}
      {Lisp-Entry "CreateWindowEx" #f 805 21 805 35 ()}
      {Lisp-Entry "DefWindowProc" #f 806 21 806 34 ()}
      {Lisp-Entry "GetMessage" #f 807 21 807 31 ()}
      {Lisp-Entry "PeekMessage" #f 808 21 808 32 ()}
      {Lisp-Entry "TranslateMessage" #f 809 21 809 37 ()}
      {Lisp-Entry "DispatchMessage" #f 810 21 810 36 ()}
      {Lisp-Entry "LockWindowUpdate" #f 811 21 811 37 ()}
      {Lisp-Entry "DestroyWindow" #f 812 21 812 34 ()}
      {Lisp-Entry "BeginPaint" #f 813 21 813 31 ()}
      {Lisp-Entry "EndPaint" #f 814 21 814 29 ()}
      {Lisp-Entry "SetCapture" #f 815 21 815 31 ()}
      {Lisp-Entry "ReleaseCapture" #f 816 21 816 35 ()}
      {Lisp-Entry "ShowWindow" #f 817 21 817 31 ()}
      {Lisp-Entry "LoadImage" #f 818 21 818 30 ()}
      {Lisp-Entry "MapWindowPoints" #f 819 21 819 36 ()}
      {Lisp-Entry "GetWindowRect" #f 820 21 820 34 ()}
      {Lisp-Entry "GetClientRect" #f 821 21 821 34 ()}
      {Lisp-Entry "ValidateRect" #f 822 21 822 33 ()}
      {Lisp-Entry "InvalidateRect" #f 823 21 823 35 ()}
      {Lisp-Entry "InvalidateRgn" #f 824 21 824 34 ()}
      {Lisp-Entry "BringWindowToTop" #f 825 21 825 37 ()}
      {Lisp-Entry "SetWindowPos" #f 826 21 826 33 ()}
      {Lisp-Entry "SetFocus" #f 827 21 827 29 ()}
      {Lisp-Entry "MoveWindow" #f 828 21 828 31 ()}
      {Lisp-Entry "IsWindowEnabled" #f 829 21 829 36 ()}
      {Lisp-Entry "GetFocus" #f 830 21 830 29 ()}
      {Lisp-Entry "EnableWindow" #f 831 21 831 33 ()}
      {Lisp-Entry "ScrollWindowEx" #f 832 21 832 35 ()}
      {Lisp-Entry "SetForegroundWindow" #f 833 21 833 40 ()}
      {Lisp-Entry "GetWindowLong" #f 834 21 834 34 ()}
      {Lisp-Entry "SetWindowLong" #f 835 21 835 34 ()}
      {Lisp-Entry "RedrawWindow" #f 836 21 836 33 ()}
      {Lisp-Entry "SendMessage" #f 837 21 837 32 ()}
      {Lisp-Entry "PostMessage" #f 838 21 838 32 ()}
      {Lisp-Entry "SetParent" #f 839 21 839 30 ()}
      {Lisp-Entry "GetWindow" #f 840 21 840 30 ()}
      {Lisp-Entry "GetTopWindow" #f 841 21 841 33 ()}
      {Lisp-Entry "IsWindowVisible" #f 842 21 842 36 ()}
      {Lisp-Entry "SetWindowText" #f 843 21 843 34 ()}
      {Lisp-Entry "GetCursorPos" #f 844 21 844 33 ()}
      {Lisp-Entry "GetUpdateRect" #f 845 21 845 34 ()}
      {Lisp-Entry "GetUpdateRgn" #f 846 21 846 33 ()}
      {Lisp-Entry "GetClassLong" #f 847 21 847 33 ()}
      {Lisp-Entry "UpdateWindow" #f 848 21 848 33 ()}
      {Lisp-Entry "TrackMouseEvent" #f 849 21 849 36 ()}
      {Lisp-Entry "GetDesktopWindow" #f 850 21 850 37 ()}
      {Lisp-Entry "GetSysColorBrush" #f 851 21 851 37 ()}
      {Lisp-Entry "GetAsyncKeyState" #f 852 21 852 37 ()}
      {Lisp-Entry "SetLayeredWindowAttributes" #f 853 21 853 47 ()}
      {Lisp-Entry "GetWindowTextLength" #f 854 21 854 40 ()}
      {Lisp-Entry "SetTimer" #f 857 21 857 29 ()}
      {Lisp-Entry "KillTimer" #f 858 21 858 30 ()}
      {Lisp-Entry "SetCursor" #f 859 21 859 30 ()}
      {Lisp-Entry "ShowCursor" #f 860 21 860 31 ()}
      {Lisp-Entry "MessageBeep" #f 861 21 861 32 ()}
      {Lisp-Entry "MessageBox" #f 862 21 862 31 ()}
      {Lisp-Entry "OpenClipboard" #f 863 21 863 34 ()}
      {Lisp-Entry "CloseClipboard" #f 864 21 864 35 ()}
      {Lisp-Entry "EmptyClipboard" #f 865 21 865 35 ()}
      {Lisp-Entry "RegisterClipboardFormat" #f 866 21 866 44 ()}
      {Lisp-Entry "EnumClipboardFormats" #f 867 21 867 41 ()}
      {Lisp-Entry "SystemParametersInfo" #f 868 21 868 41 ()}
      {Lisp-Entry "GetDC" #f 869 21 869 26 ()}
      {Lisp-Entry "GetGuiResources" #f 870 21 870 36 ()}
      {Lisp-Entry "WindowFromPoint" #f 873 12 873 27 ("HWND" "LPPOINT" "c-function")}
      {Lisp-Entry "ChildWindowFromPointEx" #f 878 12 878 34 ("UINT" "LPPOINT" "HWND" "c-function")}
      {Lisp-Entry "LoadCursorInt" #f 883 19 883 32 ("HCURSOR" "WORD" "c-function")}
      {Lisp-Entry "GetClipboardText" #f 888 19 888 35 ("#<<end-of-c-code\n    ___SCMOBJ r = ___FIX(___UNKNOWN_ERR);\n     HGLOBAL global_copy = GetClipboardData (___arg1);\n\n     if (global_copy != NULL)\n     {\n         ___U16 *locked_copy = GlobalLock (global_copy);\n\n         if (locked_copy != NULL)\n         {\n             int i;\n             ___U16 *vec;\n             int len = 0;\n\n             while (locked_copy[len] != 0)\n                 len++;\n\n             r = ___EXT(___alloc_scmobj) (___sU8VECTOR, len * sizeof (___U16), ___STILL);\n             \n             if (___FIXNUMP(r))\n                 r = ___FIX(___HEAP_OVERFLOW_ERR);\n             else\n             {\n                 vec = ___CAST(___U16*, ___BODY_AS(r, ___tSUBTYPED));\n\n                 while (len-- > 0)\n                     vec[len] = locked_copy[len];\n             }\n             GlobalUnlock (locked_copy);\n         }\n     }\n     ___result = r;\nend-of-c-code\n" "scheme-object" "UINT" "c-function")}
      {Lisp-Entry "SetClipboardText" #f 926 19 926 35 ("#<<end-of-c-code\n    int len = (___INT(___U8VECTORLENGTH(___arg1))/2) - 1;\n     ___U16 *vec = ___CAST(___U16*, ___BODY_AS(___arg1, ___tSUBTYPED)) + 1;\n     HGLOBAL global_copy = GlobalAlloc (GMEM_MOVEABLE, (len+1) * sizeof(___U16));\n\n     if (global_copy != NULL)\n     {\n         ___U16 *locked_copy = GlobalLock (global_copy);\n\n         if (locked_copy == NULL)\n             GlobalFree (global_copy);\n         else\n         {\n             int i;\n\n             for (i=0; i<len; i++)\n                 locked_copy[i] = vec[i];\n             locked_copy[len] = 0;\n\n             GlobalUnlock (global_copy);\n  \n             EmptyClipboard ();\n\n             if (!SetClipboardData (___arg2, global_copy))\n                 GlobalFree (global_copy);\n         }\n     }\nend-of-c-code\n" "void" "UINT" "scheme-object" "c-function")}
      {Lisp-Entry "convert-HINSTANCE" #f 964 12 964 29 ("HINSTANCE" "UINT" "c-function")}
      {Lisp-Entry "process-hwnd-message" #f 967 12 967 32 ()}
      {Lisp-Entry "set-process-hwnd-message" #f 970 20 970 44 ("process-hwnd-message" "set!" "proc")}
      {Lisp-Entry "call-process-hwnd-message" #f 973 15 973 40 ("lParam" "wParam" "uMsg" "hWnd" "process-hwnd-message" "LRESULT" "LPARAM" "WPARAM" "UINT" "HWND")}}})
"Window"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "Window.jazz"} 1227094443
    {Lisp-Entry "jazz.ui.window.Window" #f 39 9 39 30 ("jazz")
      {Lisp-Entry "Window" #f 51 7 51 13 ("Figure")
        {Lisp-Entry "title" #f 54 12 54 17 ("set-title" "get-title")}
        {Lisp-Entry "handle" #f 57 8 57 14 ()}
        {Lisp-Entry "initially-visible?" #f 65 11 65 29 ()}
        {Lisp-Entry "setup-handle" #f 69 11 69 23 ("set-handle" "self" "set-window" "handle")}
        {Lisp-Entry "default-parent" #f 74 11 74 25 ("self" "window-default-parent")}
        {Lisp-Entry "prepare" #f 78 11 78 18 ("self" "prepare-handle" "setup-handle" "nextmethod" "rest")}
        {Lisp-Entry "conclude" #f 83 11 83 19 ("get-size" "size-change" "nextmethod" "rest")}
        {Lisp-Entry "open?" #f 88 18 88 23 ("handle" "boolean")}
        {Lisp-Entry "show" #f 92 11 92 15 ("show-window" "handle" "assert" "nextmethod")}
        {Lisp-Entry "hide" #f 98 11 98 15 ("hide-window" "handle" "assert" "nextmethod")}
        {Lisp-Entry "minimize" #f 104 18 104 26 ("minimize-window" "handle" "assert")}
        {Lisp-Entry "set-state" #f 109 18 109 27 ("error" "else" "restore-window" "restored" "maximize-window" "maximized" "minimize-window" "minimized" "case" "handle" "assert" "state")}
        {Lisp-Entry "close" #f 118 11 118 16 ("set-handle" "handle" "set-window" "self" "destroy-window" "destroy-component")}
        {Lisp-Entry "print" #f 125 11 125 16 ("empty-string?" "title" "or" "get-size" "size" "get-position" "position" "let" "format" "handle" "not" "if" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "window-transparent?" #f 142 29 142 48 ()}
        {Lisp-Entry "add-child" #f 151 11 151 20 ("cons" "children" "set!" "child")}
        {Lisp-Entry "add-form" #f 155 11 155 19 ("add-child" "child-form" "parent-form")}
        {Lisp-Entry "erase-background" #f 164 29 164 45 ("platform-erase-background" "assert" "handle")}
        {Lisp-Entry "paint" #f 169 29 169 34 ("paint-window" "platform-data" "region")}
        {Lisp-Entry "paint-window" #f 173 21 173 33 ("draw" "surface" "function" "self" "with-platform-painting" "platform-data")}
        {Lisp-Entry "*colors*" #f 179 14 179 22 ("Dark-Purple" "Dark-Blue" "Dark-Green" "Dark-Yellow" "Dark-Orange" "Dark-Red" "name:" "Color")}
        {Lisp-Entry "*nb-colors*" #f 187 14 187 25 ("*colors*" "length")}
        {Lisp-Entry "*current-color*" #f 190 14 190 29 ("0")}
        {Lisp-Entry "draw-placeholder" #f 194 11 194 27 ("paint" "cycle-debug-color!" "set-color" "surface")}
        {Lisp-Entry "draw" #f 199 29 199 33 ("surface")}
        {Lisp-Entry "mouse-wheel" #f 208 29 208 40 ("unprocessed" "processed" "mouse-wheel" "acquired" "if" "get-mouse-in" "view" "let" "delta" "v" "h")}
        {Lisp-Entry "mouse-down" #f 217 29 217 39 ("unprocessed" "v" "h")}
        {Lisp-Entry "mouse-move" #f 221 29 221 39 ("unprocessed" "v" "h")}
        {Lisp-Entry "mouse-up" #f 225 29 225 37 ("unprocessed" "v" "h")}
        {Lisp-Entry "double-click" #f 229 29 229 41 ("mouse-down" "v" "h")}
        {Lisp-Entry "middle-mouse-down" #f 233 29 233 46 ("unprocessed" "v" "h")}
        {Lisp-Entry "middle-mouse-up" #f 237 29 237 44 ("unprocessed" "v" "h")}
        {Lisp-Entry "right-mouse-down" #f 241 29 241 45 ("unprocessed" "v" "h")}
        {Lisp-Entry "right-mouse-up" #f 245 29 245 43 ("unprocessed" "v" "h")}
        {Lisp-Entry "call-context-menu" #f 250 11 250 28 ("get-v" "get-h" "context-menu" "Point" "new" "get-desktop" "acquire" "pos" "let" "v" "h")}
        {Lisp-Entry "context-menu" #f 255 29 255 41 ("unprocessed" "v" "h")}
        {Lisp-Entry "acquire-capture" #f 264 18 264 33 ("set-capture" "handle" "assert")}
        {Lisp-Entry "release-capture" #f 269 18 269 33 ("unset-capture")}
        {Lisp-Entry "cursor-update" #f 278 29 278 42 ("unprocessed" "processed" "if" "hit")}
        {Lisp-Entry "system-key-down" #f 289 11 289 26 ("unprocessed")}
        {Lisp-Entry "system-key-up" #f 293 11 293 24 ("unprocessed")}
        {Lisp-Entry "key-down" #f 297 11 297 19 ("unprocessed" "wparam")}
        {Lisp-Entry "key-up" #f 301 11 301 17 ("unprocessed" "wparam")}
        {Lisp-Entry "call-key-press" #f 305 11 305 25 ("key-press" "char")}
        {Lisp-Entry "key-press" #f 309 26 309 35 ("unprocessed" "char")}
        {Lisp-Entry "call-position-change" #f 318 18 318 38 ("Point" "new" "position-change" "v" "h")}
        {Lisp-Entry "position-change" #f 322 29 322 44 ("unprocessed" "position")}
        {Lisp-Entry "call-size-change" #f 326 18 326 34 ("unprocessed" "Dimension" "new" "size-change" "get-installed?" "if" "height" "width")}
        {Lisp-Entry "size-change" #f 332 29 332 40 ("unprocessed" "size")}
        {Lisp-Entry "mouse-activate?" #f 336 29 336 44 ()}
        {Lisp-Entry "on-mouse-activate" #f 340 29 340 46 ("unprocessed")}
        {Lisp-Entry "on-activate" #f 345 29 345 40 ("unprocessed" "on-activate-palette" "on-deactivate-palette" "inactive" "'inactive" "eq?" "if" "kind")}
        {Lisp-Entry "on-activate-palette" #f 352 29 352 48 ()}
        {Lisp-Entry "on-deactivate-palette" #f 356 29 356 50 ()}
        {Lisp-Entry "activate-app" #f 362 29 362 41 ("unprocessed" "status")}
        {Lisp-Entry "on-close" #f 366 29 366 37 ("close-with-confirm" "evt")}
        {Lisp-Entry "close-with-confirm" #f 370 26 370 44 ("close")}
        {Lisp-Entry "focus-gain" #f 374 29 374 39 ("unprocessed")}
        {Lisp-Entry "focus-lose" #f 378 29 378 39 ("unprocessed" "receiving")}
        {Lisp-Entry "drop-files" #f 387 11 387 21 ("self" "platform-drop-files" "wparam")}
        {Lisp-Entry "receive-files" #f 391 29 391 42 ("files" "pos")}
        {Lisp-Entry "fade-in" #f 404 18 404 25 ("set-layered?" "set!" "fl/" "-" "*" "fxceiling" "+" "<" "while" "start" "current-time" "time->seconds" "now" "0.15" "delay" "255" "max" "let*" "update-window" "set-visible?" "0" "handle" "set-alpha-blending" "fade-speed" "fade-speed:")}
        {Lisp-Entry "fade-out" #f 421 18 421 26 ("=" "unless" "set!" "handle" "set-alpha-blending" "by" "from" "n" "for" "loop" "alpha" "let" "5" "step" "step:" "0" "to" "to:")}
        {Lisp-Entry "get-handle" #f 436 18 436 28 ("handle")}
        {Lisp-Entry "set-handle" #f 440 18 440 28 ("handle" "set!" "hw")}
        {Lisp-Entry "opened?" #f 444 18 444 25 ("handle" "boolean")}
        {Lisp-Entry "set-parent" #f 448 18 448 28 ("platform-set-parent" "handle" "assert" "nextmethod" "parent")}
        {Lisp-Entry "get-frame" #f 454 11 454 20 ("get-frame" "parent" "when" "Frame" "self" "is?" "if")}
        {Lisp-Entry "get-overlapped" #f 461 18 461 32 ("parent" "get-overlapped" "Overlapped" "self" "is?" "if")}
        {Lisp-Entry "get-title" #f 467 26 467 35 ("title")}
        {Lisp-Entry "set-title" #f 471 26 471 35 ("localize" "set-window-title" "handle" "assert" "title" "set!" "value")}
        {Lisp-Entry "get-window-title" #f 477 18 477 34 ("get-window-handle-title" "handle" "assert")}
        {Lisp-Entry "acquire" #f 482 18 482 25 ("error" "else" "acquire-rect" "Rect" "get-handle" "acquire-point" "Point" "typecase" "handle" "assert" "shape" "window")}
        {Lisp-Entry "get-position-in-root" #f 493 18 493 38 ("get-position" "platform-translate-to-root" "handle" "assert")}
        {Lisp-Entry "get-position" #f 498 11 498 23 ("platform-get-position" "handle" "assert")}
        {Lisp-Entry "set-position" #f 503 11 503 23 ("platform-set-position" "get-position" "nu=?" "unless" "handle" "assert" "pos")}
        {Lisp-Entry "move-window" #f 509 18 509 29 ("get-v" "get-h" "+" "Point" "new" "set-position" "get-position" "pos" "let" "dv" "dh")}
        {Lisp-Entry "get-size" #f 514 11 514 19 ("platform-get-size" "handle" "assert")}
        {Lisp-Entry "set-size" #f 519 11 519 19 ("get-window-size" "nu+" "set-window-size" "0" "Dimension" "nu=?" "unless" "platform-get-size" "nu-" "delta" "let" "handle" "assert" "new-size")}
        {Lisp-Entry "size-window" #f 526 18 526 29 ("get-height" "get-width" "+" "Dimension" "new" "set-size" "get-size" "size" "let" "dheight" "dwidth")}
        {Lisp-Entry "get-window-size" #f 531 18 531 33 ("platform-get-window-size" "handle" "assert")}
        {Lisp-Entry "set-window-size" #f 536 18 536 33 ("platform-set-window-size" "handle" "assert" "size")}
        {Lisp-Entry "set-bounds" #f 541 18 541 28 ("platform-set-bounds" "handle" "assert" "rect")}
        {Lisp-Entry "grow-bounds" #f 546 18 546 29 ("set-position" "set-window-size" "Dimension" "get-window-size" "size" "Point" "new" "get-position" "+" "pos" "let" "dheight" "dwidth" "dv" "dh")}
        {Lisp-Entry "get-width" #f 553 18 553 27 ("get-size" "get-width")}
        {Lisp-Entry "get-height" #f 557 18 557 28 ("get-size" "get-height")}
        {Lisp-Entry "get-rect" #f 561 18 561 26 ("get-handle" "get-parent" "if" "platform-get-rect" "handle" "assert")}
        {Lisp-Entry "get-bounds" #f 566 18 566 28 ("platform-get-bounds" "handle" "assert")}
        {Lisp-Entry "ensure-displayed" #f 571 18 571 34 ("set-position" "set-size" "8" "padding:" "fit-within" "new-size" "new-position" "receive" "get-rect" "rect" "get-desktop" "get-size" "parent" "not" "if" "outer" "let")}
        {Lisp-Entry "mouse-position" #f 579 18 579 32 ("platform-mouse-position" "get-desktop" "acquire")}
        {Lisp-Entry "mouse-window" #f 583 18 583 30 ("mouse-position" "find-window")}
        {Lisp-Entry "mouse-in-window?" #f 587 18 587 34 ("mouse-position" "point-in-window?")}
        {Lisp-Entry "point-in-window?" #f 591 18 591 34 ("get-height" "get-v" "get-width" "0" "get-h" "in-interval?" "and" "get-window-size" "size" "let" "point")}
        {Lisp-Entry "find-window" #f 597 18 597 29 ("platform-window-from-point" "get-window" "point")}
        {Lisp-Entry "flash-window" #f 601 18 601 30 (".1" "sleep" "handle" "FlashWindow" "3" "repeat" "loop" "flash-window" "'flash-window" "unimplemented")}
        {Lisp-Entry "move" #f 611 18 611 22 ("platform-move-window" "handle" "assert" "cy" "cx" "y" "x")}
        {Lisp-Entry "acquire-focus" #f 616 18 616 31 ("self" "set-window-focus")}
        {Lisp-Entry "get-enabled?" #f 620 18 620 30 ("platform-window-enabled?" "handle" "assert")}
        {Lisp-Entry "enable-window" #f 625 18 625 31 ("platform-enable-window" "handle" "assert")}
        {Lisp-Entry "disable-window" #f 630 18 630 32 ("platform-disable-window" "handle" "assert")}
        {Lisp-Entry "get-client-rect" #f 635 18 635 33 ("platform-get-client-rect" "handle" "assert")}
        {Lisp-Entry "scroll-window" #f 640 18 640 31 ("platform-scroll-window" "handle" "assert" "clip-rect" "clip-rect:" "rect" "dv" "dh")}
        {Lisp-Entry "invalidate-rect" #f 645 18 645 33 ("platform-invalidate-rect" "handle" "assert" "rect")}
        {Lisp-Entry "invalidate-region" #f 650 18 650 35 ("platform-invalidate-region" "handle" "assert" "region")}
        {Lisp-Entry "invalidate-window" #f 655 18 655 35 ("platform-invalidate-window" "handle" "assert")}
        {Lisp-Entry "redraw-window" #f 660 18 660 31 ("get-client-rect" "platform-redraw-window" "or" "if" "handle" "assert" "region" "region:" "rect" "rect:")}
        {Lisp-Entry "invalidate-border" #f 667 18 667 35 ("invalidate-region" "border-region" "region" "with-closed" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "redraw-border" #f 672 18 672 31 ("region:" "redraw-window" "border-region" "region" "with-closed" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "border-region" #f 677 18 677 31 ("get-client-rect" "frame-region" "1" "Rect" "insets" "insets:")}
        {Lisp-Entry "update-window" #f 681 18 681 31 ("platform-update-window" "handle" "assert")}
        {Lisp-Entry "show-noactivate" #f 686 18 686 33 ("platform-show-noactivate" "handle" "assert")}
        {Lisp-Entry "hide-noactivate" #f 691 18 691 33 ("platform-hide-noactivate" "handle" "assert")}
        {Lisp-Entry "first-window" #f 701 18 701 30 ("first" "null?" "if" "get-windows" "windows" "let")}
        {Lisp-Entry "get-windows" #f 708 18 708 29 ("get-children" "get-visible?" "or" "Window" "is?" "and" "child" "function" "collect-if" "include-invisibles?" "include-invisibles?:")}
        {Lisp-Entry "front-window?" #f 715 18 715 31 ("parent" "first-window" "self" "eq?")}
        {Lisp-Entry "bring-to-front" #f 724 11 724 25 ("platform-bring-window-to-front" "handle" "assert" "nextmethod")}
        {Lisp-Entry "send-to-back" #f 730 11 730 23 ("platform-send-window-to-back" "handle" "assert" "nextmethod")}
        {Lisp-Entry "get-location" #f 741 11 741 23 ("location")}
        {Lisp-Entry "set-location" #f 745 11 745 23 ("location" "set!" "loc")}
        {Lisp-Entry "layout-window" #f 749 18 749 31 ("layout")}
        {Lisp-Entry "layout" #f 753 26 753 32 ()}
        {Lisp-Entry "mouse-view" #f 762 18 762 28 ("mouse-position" "find-view")}
        {Lisp-Entry "find-view" #f 766 18 766 27 ("self" "get-root" "find-drawing" "pos")}
        {Lisp-Entry "to-view" #f 770 18 770 25 ("get-root" "self" "acquire" "acquired" "get-player" "player" "let*" "view" "shape")}
        {Lisp-Entry "debug-window" #f 781 26 781 38 ("self" "Development" "set-%" "debug-window" "'debug-window" "unimplemented" "pos")}
        {Lisp-Entry "describe-window" #f 787 26 787 41 ("WINEXSTYLE" "get-ex-style" "WINSTYLE" "bits->symbolic" "get-client-rect" "get-bounds" "get-size" "get-position" "WS_CLIPSIBLINGS" "WS_CLIPCHILDREN" "get-style" "mask-bit-set?" "get-class-background" "get-name" "self" "class-of" ":console" "format" "describe-window" "'describe-window" "unimplemented" "pos")}}}})
"Window-Advanced-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Window-Advanced-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Window-Advanced-Menu" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Window-Advanced-Menu" #f 46 7 46 27 ("application" "Action" "action:" "Bitmap-Resource" "icon:" "cascade-separator" "before:" "title:" "toggle-window" "name:" "Window-Menu")}}})
"Window-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Window-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Window-Menu" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Window-Menu" #f 48 7 48 18 ("tile-vertically" "tile-horizontally" "cascade-separator" "current-frame" "current" "previous-frame" "previous" "next-frame" "application" "Action" "action:" "Bitmap-Resource" "icon:" "next" "name:" "title:" "Menu")
        {Lisp-Entry "base-items" #f 51 8 51 18 ()}
        {Lisp-Entry "finish" #f 64 11 64 17 ("get-children" "length" "base-items" "set!" "nextmethod" "rest")}
        {Lisp-Entry "collect-palettes" #f 69 11 69 27 ("get-windows" "Palette" "is?" "window" "function" "collect-if" "get-toplevel" "toplevel" "let")}
        {Lisp-Entry "collect-frames" #f 76 11 76 25 ("get-views" "get-controller" "get-tool?" "not" "Document" "get-guest" "guest" "Frame-Host" "is-not?" "or" "frame" "function" "collect-if" "get-stage" "stage" "let")}
        {Lisp-Entry "update" #f 86 11 86 17 ("layout-menu" "Palette" "palette" "window:" "list" "properties:" "on-select-window" "'on-select-window" "method-name:" ":application" "target-name:" "Event-Handler" "action-handler:" "icon:" "get-title" "present-title" "title:" "Label-Item" "get-guest" "guest-icon" "Frame-Host" "is?" "if" "icon" "frame" "self" "parent:" "Separator-Item" "new" "not-null?" "when" "base-items" "get-children" "tail" "close" "item" "function" "for-each" "collect-frames" "frames" "collect-palettes" "palettes" "let")}
        {Lisp-Entry "present-title" #f 107 11 107 24 ("empty-string?" "null?" "or" "if" "title")}}}})
"Windows-Look"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "look" "Windows-Look.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.look.Windows-Look" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Windows-Look" #f 45 7 45 19 ("Look")
        {Lisp-Entry "present" #f 53 11 53 18 ()}
        {Lisp-Entry "get-element" #f 62 11 62 22 ("document/scrollbar/flat?" "document/header/flat?" "tool/scrollbar/flat?" "tool/header/flat?" "group/border/flat?" "outline/edge/flat?" "entry/edge/flat?" "case" "name")}}}})
"Wipe-Effect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "effect" "Wipe-Effect.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.effect.Wipe-Effect" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Wipe-Effect" #f 45 7 45 18 ("Effect")
        {Lisp-Entry "direction" #f 48 8 48 17 ()}
        {Lisp-Entry "delay" #f 49 8 49 13 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("delay~self" "direction~self" "set!" "nextmethod" "delay" "delay:" "direction" "direction:")}
        {Lisp-Entry "animate" #f 58 11 58 18 ("up" "v" "get-height" "down" "left" "get-v" "get-h" "-" "Point" "new" "1" "*" "h" "let*" "get-width" "below" "0" "from" "n" "for" "loop" "right" "direction" "case" "destination:" "size:" "position:" "bit-blit" "wait" "delay" "when" "p" "function" "blit" "let" "size" "pos" "dst" "src")}}}})
"Workbench"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Workbench.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Workbench" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Workbench" #f 52 7 52 16 ("catalog?:" "Project")
        {Lisp-Entry "projects-table" #f 59 8 59 22 ("eq?" "test:" "make-table")}
        {Lisp-Entry "categories-table" #f 60 8 60 24 ("eq?" "test:" "make-table")}
        {Lisp-Entry "resources-table" #f 61 8 61 23 ("equal?" "test:" "make-table")}
        {Lisp-Entry "sources-table" #f 63 8 63 21 ("equal?" "test:" "make-table")}
        {Lisp-Entry "get-projects-table" #f 71 18 71 36 ("projects-table")}
        {Lisp-Entry "find-project" #f 75 18 75 30 ("projects-table" "table-ref" "type-name")}
        {Lisp-Entry "find-product" #f 79 18 79 30 ("Product" "is?" "if" "find-project" "project" "let" "type-name")}
        {Lisp-Entry "require-product" #f 86 18 86 33 ("error" "find-product" "either" "type-name")}
        {Lisp-Entry "find-source" #f 96 18 96 29 ("get-source-entry" "source")}
        {Lisp-Entry "find-filename" #f 100 18 100 31 ("continuation-return" "get-effective-source" "get-name" "ci=?" "when" "descendant" "for-each-project-file" "return" "function" "continuation-capture" "filename")}
        {Lisp-Entry "catalog-name" #f 115 11 115 23 ("workbench" "'workbench")}
        {Lisp-Entry "load-catalogs" #f 119 18 119 31 ("include-self?:" "load-catalog" "for-each-project" "user-message" "function" ":wait" "with-cursor")}
        {Lisp-Entry "load-catalog" #f 129 18 129 30 ("require-catalog" "load-content" "get-catalog?" "when" "project")}
        {Lisp-Entry "get-effective-editable?" #f 139 11 139 34 ()}
        {Lisp-Entry "add-to-project" #f 148 21 148 35 ("add-entry" "Jazz-File" "add-resource" "resource-class" "resource-type" "type" "Resource-File" "add-source" "get-source" "source" "let" "set-project" "class-of" "type-name" "identifier-name" "projects-table" "table-set!" "set-parent-project" "self" "set-workbench" "Project" "is?" "when" "Project-File" "typecase" "component" "name" "project")}
        {Lisp-Entry "remove-from-project" #f 166 21 166 40 ("remove-entry" "Jazz-File" "remove-resource" "resource-class" "resource-type" "type" "Resource-File" "remove-source" "get-source" "source" "let" "class-of" "type-name" "identifier-name" "projects-table" "table-clear" "Project" "is?" "when" "Project-File" "typecase" "component" "name" "project")}
        {Lisp-Entry "for-each-project" #f 186 18 186 34 ("Project" "is?" "when" "level" "descendant" "function" "for-each-descendant" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "for-each-project-file" #f 194 18 194 39 ("Project-File" "is?" "when" "level" "descendant" "function" "for-each-descendant" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "for-each-jazz-file" #f 202 18 202 36 ("Jazz-File" "is?" "when" "level" "descendant" "function" "for-each-descendant" "include-self?" "include-self?:" "proc")}
        {Lisp-Entry "add-entry" #f 210 18 210 27 ("categories-table" "table-set!" "entry" "category-name")}
        {Lisp-Entry "remove-entry" #f 214 18 214 30 ("categories-table" "table-clear" "category-name")}
        {Lisp-Entry "get-entry" #f 218 18 218 27 ("categories-table" "table-ref" "category-name")}
        {Lisp-Entry "get-entry-source" #f 222 18 222 34 ("get-source" "when" "get-entry" "file" "let" "category-name")}
        {Lisp-Entry "add-resource" #f 228 11 228 23 ("resources-table" "table-set!" "cons" "key" "get-base" "name" "let*" "source" "type")}
        {Lisp-Entry "remove-resource" #f 234 11 234 26 ("resources-table" "table-clear" "cons" "key" "get-base" "name" "let*" "source" "type")}
        {Lisp-Entry "get-resource" #f 240 18 240 30 ("resources-table" "table-ref" "cons" "key" "let" "name" "type")}
        {Lisp-Entry "get-bitmap" #f 245 18 245 28 ("get-name" "bitmap" "'bitmap" "get-resource" "resource")}
        {Lisp-Entry "get-icon" #f 249 18 249 26 ("icon" "'icon" "get-resource" "name")}
        {Lisp-Entry "add-source" #f 253 18 253 28 ("table-ref" "cons" "sources-table" "table-set!" "get-name" "name" "let" "when" "entry" "source")}
        {Lisp-Entry "remove-source" #f 259 18 259 31 ("table-ref" "remove!" "sources-table" "table-set!" "get-name" "name" "let" "when" "entry" "source")}
        {Lisp-Entry "get-source-entry" #f 265 18 265 34 ("get-effective-source" "pathname=?" "entry" "function" "find-if" "sources-table" "table-ref" "entries" "get-name" "name" "let*" "source")}
        {Lisp-Entry "find-workbench" #f 278 11 278 25 ("self")}
        {Lisp-Entry "update" #f 287 18 287 24 ("resources-table" "categories-table" "sources-table" "projects-table" "empty-table")}
        {Lisp-Entry "get-class-image" #f 299 16 299 31 ("Bitmap-Resource")}
        {Lisp-Entry "get-presentation" #f 303 11 303 27 ()}
        {Lisp-Entry "can-cut-component?" #f 307 11 307 29 ()}
        {Lisp-Entry "can-copy-component?" #f 311 11 311 30 ()}
        {Lisp-Entry "can-rename-component?" #f 315 11 315 32 ()}
        {Lisp-Entry "can-delete-component?" #f 319 11 319 32 ()}
        {Lisp-Entry "can-move-component?" #f 323 11 323 30 ()}
        {Lisp-Entry "get-addable-classes" #f 327 11 327 30 ("Project-Group" "list")}}}})
"Workbench-Designer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Workbench-Designer.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Workbench-Designer" #f 37 9 37 50 ("jazz")
      {Lisp-Entry "Workbench-Designer" #f 46 7 46 25 ("Designer")
        {Lisp-Entry "project-designers" #f 49 8 49 25 ()}
        {Lisp-Entry "initialize" #f 57 11 57 21 ("install-projects-designers" "nextmethod" "apply" "rest")}
        {Lisp-Entry "install-projects-designers" #f 62 11 62 37 ("add-designer" "reference" "for-each-project")}
        {Lisp-Entry "cleanup-project-designers" #f 67 11 67 36 ("get-output" "project-designers" "set!" "save" "get-modified?" "when" "cons" "put" "class-of" "type-name" "identifier-name" "reference" "find-project" "if" "designer" "project" "function" "for-each-designer" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "set-name" #f 83 11 83 19 ("set-name" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "name" "component")}
        {Lisp-Entry "set-tag-module" #f 92 11 92 25 ("set-tag-module" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "tag-module" "parent" "component")}
        {Lisp-Entry "set-property" #f 101 11 101 23 ("set-property" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "value" "property" "component")}
        {Lisp-Entry "add-child" #f 110 11 110 20 ("add-child" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "not" "or" "if" "find-modification-owner" "owner" "let" "others" "use-owner?" "bind-keywords" "rest" "parent" "child")}
        {Lisp-Entry "remove-child" #f 119 11 119 23 ("remove-child" "" "get-project-designer" "designer" "let" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parent" "parent" "let*" "rest" "child")}
        {Lisp-Entry "move-components" #f 128 11 128 26 ("move-components" "'move-components" "unimplemented" "rest" "destination" "components")}
        {Lisp-Entry "cut-components" #f 137 11 137 25 ("cut-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "copy-components" #f 146 11 146 26 ("copy-components" "get-project-designer" "designer" "let" "nextmethod" "reference" "eq?" "if" "find-modification-owner" "owner" "get-parents" "parents" "let*" "components")}
        {Lisp-Entry "paste-clipboard" #f 155 11 155 26 ("paste-clipboard" "" "get-project-designer" "designer" "nextmethod" "apply" "reference" "eq?" "if" "find-modification-owner" "owner" "let" "rest" "parent")}
        {Lisp-Entry "get-parents" #f 163 11 163 22 ("get-parent" "component" "function" "map" "components")}
        {Lisp-Entry "find-modification-owner" #f 174 11 174 34 ("get-presentation" "error" "get-effective-editable?" "not" "if" "find-components-owner" "owner" "let" "components")}
        {Lisp-Entry "find-components-owner" #f 181 11 181 32 ("car" "error" "1" "length" ">" "map" "remove-duplicates" "owners" "let" "pair?" "get-parent" "Project" "is?" "reference" "eq?" "or" "if" "component" "function" "find-owner-project" "letrec" "components")}
        {Lisp-Entry "add-designer" #f 200 11 200 23 ("add-project-designer" "reference:" "form:" "Project-Designer" "new" "designer" "get-self-form" "form" "class-of" "class" "let*" "project")}
        {Lisp-Entry "add-project-designer" #f 207 11 207 31 ("cons" "project-designers" "set!" "designer" "project")}
        {Lisp-Entry "remove-designer" #f 211 11 211 26 ("assq" "remove!" "project-designers" "set!" "project")}
        {Lisp-Entry "get-project-designer" #f 215 21 215 41 ("project-designers" "assq-value" "project")}
        {Lisp-Entry "for-each-designer" #f 219 11 219 28 ("project-designers" "designer" "project" "bind" "pair" "function" "for-each" "proc")}
        {Lisp-Entry "project-add" #f 226 21 226 32 ("add-designer" "Project" "is?" "when" "level" "descendant" "function" "for-each-descendant" "project")}
        {Lisp-Entry "project-remove" #f 233 21 233 35 ("cleanup-project-designers" "project")}
        {Lisp-Entry "save-designer" #f 245 21 245 34 ("designer" "project" "function" "for-each-designer" "save" "set!" "get-modified?" "when" "some-modified?" "let")}}}})
"Workbench-Editor"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Workbench-Editor.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Workbench-Editor" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Workbench-Editor" #f 46 7 46 23 ("Descendants-Editor")
        {Lisp-Entry "form-model" #f 49 11 49 21 ("nextmethod" "else" "Workbench-Tree" "tree" "get-name" "case" "form")}}}})
"Workbench-Manager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Workbench-Manager.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Workbench-Manager" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Workbench-Manager" #f 59 7 59 24 ("Dark-Blue" "Color" "highlight-color:" "291" "width:" "title:" "descendant" "highlight-edited?:" "show-header?:" "tree" "flat?:" "scroller" "center" "location:" "descendants" "on-highlight-document" "22" "highlight-document" "on-configurations-menu" "pick" "on-configure" ":form" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "Bitmap-Resource" "image-name:" ":icons" "portfolio:" "body" "configure" "tools" "name:" "border" "layout-type:" "400" "650" "Dimension" "size:" "Exit-Listener" "Editor-View")
        {Lisp-Entry "external-name" #f 75 16 75 29 ("workbench-manager" "'workbench-manager" "rest")}
        {Lisp-Entry "host-icon" #f 84 16 84 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 88 16 88 26 ()}
        {Lisp-Entry "install-in-host" #f 92 11 92 26 ("setup-active-product" "setup-active-configuration" "host")}
        {Lisp-Entry "setup-workbench-title" #f 97 11 97 32 ("set-title" "get-name" "format" "not" "if" "title" "get-host" "host" "let" "configuration")}
        {Lisp-Entry "setup-active-configuration" #f 106 11 106 37 ("set-active-configuration" "setup-workbench-title" "configurations" "'configurations" "child" "essay" "configuration" "get-active-configuration" "active" "build" "'build" "get-preferences" "pref" "let*")}
        {Lisp-Entry "setup-active-product" #f 114 11 114 31 ("find-product" "activate-product" "and" "when" "get-workbench" "workbench" "get-active-product" "product" "build" "'build" "get-preferences" "pref" "let*")}
        {Lisp-Entry "get-tools-view" #f 127 11 127 25 ("tools" "'tools" "locate")}
        {Lisp-Entry "focus-default" #f 131 11 131 24 ("acquire-focus" "get-tree" "tree" "let")}
        {Lisp-Entry "get-tree" #f 141 11 141 19 ("tree" "descendants" "locate")}
        {Lisp-Entry "new-controller" #f 150 11 150 25 ("self" "Workbench-Manager-Controller" "new")}
        {Lisp-Entry "install" #f 159 11 159 18 ("get-workbench" "set-client" "get-application" "add-exit-listener" "self" "'descendants" "locate" "set-editor" "header" "descendants" "locate-component" "set-shown?" "nextmethod" "rest")}
        {Lisp-Entry "get-designer-class" #f 167 11 167 29 ("Workbench-Designer")}
        {Lisp-Entry "prepare-exit" #f 171 11 171 23 ("save-designer" "designer" "when")}
        {Lisp-Entry "on-designer" #f 181 11 181 22 ("child-remove" ":child-remove" "parent:" "child:" "get-property" "child-add" ":child-add" "get-kind" "case" "nextmethod" "evt")}
        {Lisp-Entry "child-add" #f 188 11 188 20 ("designer" "project-add" "Project" "is?" "when" "parent" "child")}
        {Lisp-Entry "child-remove" #f 193 11 193 23 ("designer" "project-remove" "Project" "is?" "when" "child")}
        {Lisp-Entry "key-press" #f 203 11 203 20 ("launch-selection" "case" "key")}
        {Lisp-Entry "on-configurations-menu" #f 208 11 208 33 ("initiator:" "self" "client:" "Configurations-Menu" "track-popup-menu" "get-size" "get-height" "0" "Point" "new" "pos" "get-combo" "combo" "get-sender" "sender" "let*" "evt")}
        {Lisp-Entry "on-highlight-document" #f 215 11 215 32 ("highlight-document" "evt")}
        {Lisp-Entry "on-add-file" #f 219 11 219 22 ("add-file" "evt")}
        {Lisp-Entry "on-add-group" #f 223 11 223 23 ("add-group" "evt")}
        {Lisp-Entry "on-install-project" #f 227 11 227 29 ("install-project" "directory:" "extensions:" "choose-file" "directory" "function" "with-import-directory" "file" "selected-object" "parent" "get-shift?" "current-directory?" "let*" "evt")}
        {Lisp-Entry "on-import-files" #f 236 11 236 26 ("get-shift?" "import-files" "evt")}
        {Lisp-Entry "on-import-directory" #f 240 11 240 30 ("get-shift?" "import-directory" "evt")}
        {Lisp-Entry "on-synchronize-content" #f 244 11 244 33 ("synchronize-content" "evt")}
        {Lisp-Entry "on-update-catalog" #f 248 11 248 28 ("update-catalog" "evt")}
        {Lisp-Entry "on-edit" #f 252 11 252 18 ("edit-selection" "evt")}
        {Lisp-Entry "on-activate" #f 256 11 256 22 ("activate-selection" "evt")}
        {Lisp-Entry "on-launch" #f 260 11 260 20 ("launch-selection" "evt")}
        {Lisp-Entry "on-run" #f 264 11 264 17 ("run-selection" "evt")}
        {Lisp-Entry "on-distribute" #f 268 11 268 24 ("distribute-selection" "evt")}
        {Lisp-Entry "on-properties" #f 272 11 272 24 ("show-properties" "evt")}
        {Lisp-Entry "highlight-document" #f 281 11 281 29 ("highlight-component" "find-source" "project-file" "get-workbench" "workbench" "not" "get-moniker" "moniker" "get-controller" "controller" "let*" "bell" "Document" "is-not?" "if" "current-document" "guest" "let")}
        {Lisp-Entry "highlight-component" #f 296 11 296 30 ("row-rank" "set-single-selection" "ensure-expanded" "bell" "not" "if" "component-row" "row" "get-tree" "tree" "let*" "component")}
        {Lisp-Entry "select-current" #f 310 18 310 32 ("select-product")}
        {Lisp-Entry "select-product" #f 314 11 314 25 ("activate-product" "when" "Product-Selector" "get-modal" "product" "let")}
        {Lisp-Entry "edit-current" #f 325 18 325 30 ("current-product" "edit-project")}
        {Lisp-Entry "edit-selection" #f 329 11 329 25 ("edit-project" "Project" "edit-workbench" "Workbench" "typecase" "object" "function" "for-each" "selected-objects" "objects" "let")}
        {Lisp-Entry "Workbench-File" #f 338 14 338 28 ("Profile" "File")}
        {Lisp-Entry "edit-workbench" #f 342 11 342 25 ("edit-document" "Workbench-File" "file" "get-application" "appl" "let")}
        {Lisp-Entry "edit-project" #f 348 11 348 23 ("class-of" "type-name" "identifier-name" "get-application" "edit-definitions" "bell" "Project" "is-not?" "if" "project")}
        {Lisp-Entry "Templates-Directory" #f 359 14 359 33 ("Jazz" "Directory")}
        {Lisp-Entry "add-file" #f 363 21 363 29 ("get-tree" "select-component" "ascendant-project" "import-pathname" "install-project" "product" "project" "memq?" "if" "component" "expand" "printer" "function" "call-with-output-file" "'module" "'name" "cons" "list" "associations" "parse" "find-pathname-module" "module" "destination" "concatenate" "Templates-Directory" "new-file" "extract-extension" "extension" "Template-Expander" "new" "expander" "let*" "directory:" "Add-File-Dialog" "get-modal" "name" "directory" "template" "kind" "receive" "create-directories" "yes" "'yes" "question" "'question" "type:" "get-list" "format" "message-box" "=" "exists?" "get-current-directory" "Profile" "Directory" "must-exist?:" "default-import-directory" "default-directory" "Project" "Project-Group" "is?" "or" "when" "get-workbench" "selected-object" "either" "parent" "let")}
        {Lisp-Entry "add-group" #f 388 21 388 30 ("parent:" "get-tree" "add-component-class" "Project" "Project-Group" "is?" "or" "when" "get-workbench" "selected-object" "either" "parent" "let")}
        {Lisp-Entry "install-project" #f 400 11 400 26 ("get-presentation" "user-message" "load-catalog" "get-tree" "reorder-component" "set-tag-module" "designer" "add-child" "parent:" "workbench:" "new" "project" "Project" "subtype?" "get-workbench" "workbench" "load-class" "class" "get-name" "error" "not" "if" "parse" "find-pathname-module" "module" "get-base" "string->symbol" "name" "list" "validate-pathnames" "when" "ascendant-project" "parent-project" "let" "descendant?" "parent" "file")}
        {Lisp-Entry "MaxFiles-Warning" #f 425 14 425 30 ("100")}
        {Lisp-Entry "import-filter?" #f 429 11 429 25 ("get-application" "known-extension-frame-class" "get-name" "ci=?" "test:" "member?" "or" "if" "get-include-extensions" "effective-include-extensions" "extensions" "get-extension" "ext" "let" "file" "project")}
        {Lisp-Entry "import-directory" #f 439 11 439 27 ("parse" "user-message" "descendants" "'descendants" "designer" "process-refresh" "import-pathname" "component" "let" "list" "validate-pathnames" "yes" "'yes" "question" "'question" "type:" "format" "message-box" "eq?" "or" "when" "MaxFiles-Warning" "max-count:" "import-filter?" "file" "filter:" "count-files" "count" "directory:" "choose-directory" "function" "with-import-directory" "directory" "ascendant-project" "project" "selected-object" "parent" "let*" "current-directory?")}
        {Lisp-Entry "import-files" #f 454 11 454 23 ("import-pathnames" "directory:" "multiple-selection?:" "choose-file" "directory" "function" "with-import-directory" "files" "ascendant-project" "project" "selected-object" "parent" "let*" "current-directory?")}
        {Lisp-Entry "import-pathnames" #f 463 21 463 37 ("format-plural" "format-cardinality" "user-message" "length" "count" "get-name" "key:" "nu<?" "sort" "descendants" "'descendants" "designer" "process-refresh" "import-pathname" "component" "let" "pathname" "function" "for-each" "validate-pathnames" "when" "parent" "pathnames" "project")}
        {Lisp-Entry "import-pathname" #f 475 11 475 26 ("import-file" "import-filter?" "or" "when" "File" "recursive?:" "sort?:" "directories?:" "files?:" "import-pathname" "function" "iterate-directory" "directory" "'directory" "set-property" "descendant?:" "not" "design-events?:" "designer" "add-child" "directory:" "Project-Directory" "new" "subgroup" "install-project" "determine-project-file?" "exists?" "and" "if" "format" "new-file" "project-file" "Directory" "typecase" "get-name" "name" "let" "descendant?" "parent" "pathname" "project")}
        {Lisp-Entry "import-file" #f 507 11 507 22 ("add-entry" "set-name" "when" "source" "'source" "set-property" "descendant?:" "not" "design-events?:" "designer" "add-child" "get-workbench" "workbench" "source:" "name:" "new" "project-file" "get-base" "string->symbol" "Jazz-File" "eq?" "if" "name" "get-extension" "extension-model" "model" "let*" "descendant?" "parent" "file")}
        {Lisp-Entry "determine-project-file?" #f 520 11 520 34 ("Project" "autoload" "subtype?" "in-manifest?" "extends" "name" "type" "package" "receive" "extract-jazz-file-category" "info" "ci=?" "when" "get-extension" "ext" "let" "file")}
        {Lisp-Entry "default-import-directory" #f 532 11 532 35 ("anchorize" "when" "dir" "let" "else" "get-directory" "Project-Directory" "Project" "typecase" "function" "default" "letrec" "must-exist?" "must-exist?:" "object")}
        {Lisp-Entry "with-import-directory" #f 547 11 547 32 ("function" "with-preserved-current-directory" "exists?" "and" "if" "default-import-directory" "not" "essay" "default-directory" "let" "proc" "object" "current-directory?")}
        {Lisp-Entry "extension-model" #f 556 11 556 26 ("Project-File" "else" "Sound-File" "Icon-File" "Cursor-File" "Bitmap-File" "C-File" "Java-File" "Jazz-File" "ci=?" "test:" "member?" "cond" "ext")}
        {Lisp-Entry "ascendant-project" #f 567 21 567 38 ("get-parent" "ascendant-project" "Project" "is?" "if" "component")}
        {Lisp-Entry "synchronize-content" #f 578 11 578 30 ("content:" "confirmation" "'confirmation" "type:" "Synchronize-Box" "class:" "reverse" "bind" "info" "for-each" "children:" "add-row" "Bitmap-Resource" "image:" "join" "title:" "Tree-Node" "c0" "add" "'tree" "locate" "tree" "200" "500" "Dimension" "size:" "Synchronize-Border" "border" "message-box" "null?" "get-output" "out-of-synch" "case-insensitive?:" "right-key:" "left-key:" "key:" "ci<?" "sort" "directory?" "when" ":same" ":right" "list" "put" ":left" "case" "cons" "right" "left" "key" "what" "merge-ordered" "get-content" "content" "get-children" "children" "path" "fold" "letrec" "pathname" "pathname-name" "get-name" "->string" "component" "function" "component-name" "List-Factory" "new" "fact" "let" "error" "exists?" "not" "if" "must-exist?:" "default-import-directory" "directory" "ascendant-project" "project" "selected-object" "object" "let*")}
        {Lisp-Entry "validate-pathnames" #f 631 11 631 29 ("for-each" "get-entry" "jazz-file" "get-base" "string->symbol" "name" "let*" "Jazz-File" "eq?" "get-extension" "extension-model" "model" "let" "import-filter?" "when" "File" "recursive?:" "sort?:" "directories?:" "files?:" "iterate-directory" "Directory" "typecase" "pathname" "iterate" "get-workbench" "workbench" "letrec" "report" "function" "validate" "pathnames" "project")}
        {Lisp-Entry "validate" #f 656 11 656 19 ("message-box" "when" "0" "subseq" "get-presentation" "get-name" ":hyperlink" ":bulleted" "list" "highlight-component" "close-modal-dialog" "action" "get-project" "project" "map" ",header" "text" "format-is/are" "format-y/ies" "format-plural" "format" "header" ">" "too-many?" "10" "max-displayed" "length" "count" "let*" "null?" "if" "get-output" "put" "jazz-file" "function" "List-Factory" "new" "already-defined" "get-workbench" "workbench" "let" "iterate")}
        {Lisp-Entry "activate-selection" #f 700 18 700 36 ("selected-object" "activate-object")}
        {Lisp-Entry "activate-object" #f 704 11 704 26 ("activate-product" "bell" "Product" "is-not?" "if" "object")}
        {Lisp-Entry "activate-product" #f 710 11 710 27 ("update-product-actions" "get-application" "appl" "highlight-component" "ensure-expanded" "visible?:" "user-data-row" "row" "set-active-product" "unhighlight-component" "when" "get-tree" "tree" "let" "active-product" "eq?" "unless" "product")}
        {Lisp-Entry "update-catalog" #f 730 11 730 25 ("update" "load-content" "selected-project" "require-catalog" "catalog" "let" "function" ":wait" "with-cursor")}
        {Lisp-Entry "test-current" #f 743 18 743 30 ("product-test" "current-product" "product" "let")}
        {Lisp-Entry "launch-current" #f 753 18 753 32 ("current-product" "debug-product")}
        {Lisp-Entry "launch-selection" #f 757 18 757 34 ("selected-components" "edit-document" "get-extension" "ext" "get-effective-source" "file" "let*" "Project-File" "debug-product" "Product" "typecase" "component" "function" "for-each" "get-tree" "tree" "get-application" "appl" "let")}
        {Lisp-Entry "debug-product" #f 771 11 771 24 ("get-active-configuration" "configuration:" "get-application" "debug-product" "product")}
        {Lisp-Entry "run-current" #f 781 18 781 29 ("run-product" "current-product" "product" "let")}
        {Lisp-Entry "run-selection" #f 786 18 786 31 ()}
        {Lisp-Entry "run-product" #f 790 11 790 22 ("get-application" "run-product" "product")}
        {Lisp-Entry "compile-current" #f 799 18 799 33 ("compile-moniker" "get-controller" "get-moniker" "moniker" "save" "get-modified?" "Document" "is?" "and" "when" "current-document" "guest" "let")}
        {Lisp-Entry "compile-moniker" #f 808 18 808 33 ("error" "not" "if" "find-source" "project-file" "get-workbench" "workbench" "let*" "compile-file" "moniker")}
        {Lisp-Entry "compile-file" #f 818 11 818 23 ("show-console?:" "->string" "list" "arguments:" "get-application" "launch-runtime" "bell" "not" "if" "parse" "find-pathname-module" "name" "let" "project-file" "moniker")}
        {Lisp-Entry "preprocess-current" #f 830 18 830 36 ("preprocess-file" "error" "not" "if" "find-source" "file" "get-workbench" "workbench" "get-controller" "get-moniker" "moniker" "let*" "save" "get-modified?" "Document" "is?" "and" "when" "current-document" "guest" "let")}
        {Lisp-Entry "preprocess-file" #f 843 11 843 26 ("get-duration-in-seconds" "force?:" "preprocess" "Output-Log" "select-palette" "select-results" "clear-results" "Timer" "new" "timer" "get-output-log" "output" "user-message" "prepare-directories" "prepare-maps" "get-project" "product" "thread" "function" "proc" "let" "file" "moniker")}
        {Lisp-Entry "on-build-current" #f 865 11 865 27 ("build-product" "bell" "not" "if" "current-product" "product" "let" "evt")}
        {Lisp-Entry "build-current" #f 872 18 872 31 ("build-product" "current-product" "product" "let" "get-application" "save-all")}
        {Lisp-Entry "build-product" #f 879 11 879 24 ("show-console?:" "->string" "list" "arguments:" "get-application" "launch-runtime" "get-product" "product-name" "let" "bell" "Product" "is-not?" "if" "product")}
        {Lisp-Entry "clean-current" #f 891 18 891 31 ("clean-product" "current-product" "product" "let")}
        {Lisp-Entry "clean-product" #f 896 11 896 24 ("bell" "Product" "is-not?" "if" "product")}
        {Lisp-Entry "on-distribute-current" #f 908 11 908 32 ("distribute-product" "bell" "not" "if" "selected-product" "product" "let" "evt")}
        {Lisp-Entry "distribute-current" #f 915 18 915 36 ("distribute-product" "current-product" "product" "let")}
        {Lisp-Entry "distribute-selection" #f 920 11 920 31 ("selected-product" "distribute-product")}
        {Lisp-Entry "distribute-product" #f 924 11 924 29 ("set-visible?" "bring-to-front" "get-guest" "compare-trees" "function" ":wait" "with-cursor" "host-visible?:" "ignored-extensions:" "ignored-leaves:" "ignored-nodes:" "left-content:" "right-moniker:" "left-moniker:" "Compare-Directories" "new-frame" "frame" "extensions" "files" "list" "ignored-dirs" "product-distribution-list" "content" "product-distribution-directory" "right" "product-distribution" "left" "backup" "'backup" "mode" "let*" "product")}
        {Lisp-Entry "selected-object" #f 945 11 945 26 ("selected-component" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-objects" #f 950 11 950 27 ("selected-components" "get-tree" "tree" "let")}
        {Lisp-Entry "selected-project" #f 955 11 955 27 ("Project" "is?" "when" "selected-object" "object" "let")}
        {Lisp-Entry "selected-product" #f 961 11 961 27 ("Product" "is?" "when" "selected-object" "object" "let")}
        {Lisp-Entry "current-product" #f 967 11 967 26 ("error" "active-product" "not" "if")}
        {Lisp-Entry "new-menu" #f 978 18 978 26 ("get-tree" "client:" "Element-Menu" "new" "else" "new-project-menu" "Project" "new-product-menu" "Product" "new-group-menu" "Project-Group" "typecase" "when" "selected-object" "object" "let")}
        {Lisp-Entry "new-group-menu" #f 988 11 988 25 ("layout-menu" "cleanup-separators" "update-group/project-menu" "get-tree" "client:" "Group-Menu" "new" "menu" "let" "object")}
        {Lisp-Entry "new-product-menu" #f 996 11 996 27 ("layout-menu" "cleanup-separators" "update-group/project-menu" "get-catalog?" "update-catalog" "'update-catalog" "locate" "set-visible?" "get-tree" "client:" "Product-Menu" "new" "menu" "let" "object")}
        {Lisp-Entry "new-project-menu" #f 1005 11 1005 27 ("layout-menu" "cleanup-separators" "update-group/project-menu" "get-catalog?" "update-catalog" "'update-catalog" "synchronize-content" "'synchronize-content" "locate" "set-visible?" "Workbench" "is?" "when" "get-tree" "client:" "Project-Menu" "new" "menu" "let" "object")}
        {Lisp-Entry "update-group/project-menu" #f 1017 11 1017 36 ("import-directory" "'import-directory" "import-files" "'import-files" "install-project" "'install-project" "locate" "set-visible?" "1" "get-selection" "length" ">" "when" "get-tree" "tree" "let" "menu")}
        {Lisp-Entry "install-configuration" #f 1025 11 1025 32 ("setup-workbench-title" "set-active-configuration" "configuration")}
        {Lisp-Entry "describe-state" #f 1035 11 1035 25 ("resource" "get-resources-table" "category" "get-categories-table" "name" "get-projects-table" "table-keys/values" "when" "0" "subseq" "if" "project" "bind" "for-each" "5" "length" ">" "more?" "car" "class-of" "type-name" "pair" "function" "key:" "designer" "get-project-designers" "<" "sort" "pairs" "let*" "active-product" ":console" "format" "get-workbench" "workbench" "let" "pos")}}
      {Lisp-Entry "Workbench-Manager-Controller" #f 1081 7 1081 35 ("Editor-View-Controller")
        {Lisp-Entry "document-status" #f 1084 11 1084 26 ()}}
      {Lisp-Entry "Synchronize-Border" #f 1093 7 1093 25 ("tree" "fill" "layout-type:" "content" "vscroll?:" "hscroll?:" "flat?:" "Outline-Border" "name:" "Color" "border-color:" "solid" "border-type:" "Border-View")}
      {Lisp-Entry "Configurations-Menu" #f 1110 7 1110 26 ("Context-Menu")
        {Lisp-Entry "finish" #f 1113 11 1113 17 ("configuration:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "title:" "get-active-configuration" "eq?" "checked?:" "self" "parent:" "Check-Item" "new" "->string" "get-title" "either" "title" "get-name" "name" "let*" "configuration" "function" "for-each" "build" "get-preferences" "get-children" "configurations" "let" "nextmethod" "rest")}
        {Lisp-Entry "on-action" #f 1123 11 1123 20 ("client" "install-configuration" "configuration:" "get-property" "configuration" "get-application" "appl" "let" "evt")}}
      {Lisp-Entry "Group-Menu" #f 1134 7 1134 17 ("synchronize-content" "import-directory" "import-files" "cut" "install-project" "add-group" "workbench-manager" "Action" "action:" "Bitmap-Resource" "icon:" "add-item" "before:" "title:" "add-file" "name:" "Component-Menu")}
      {Lisp-Entry "Project-Menu" #f 1154 7 1154 19 ("update-catalog" "synchronize-content" "import-directory" "import-files" "cut" "install-project" "add-group" "add-file" "workbench-manager" "Action" "action:" "Bitmap-Resource" "icon:" "add-item" "before:" "title:" "edit" "name:" "Component-Menu")}
      {Lisp-Entry "Product-Menu" #f 1178 7 1178 19 ("workbench-manager" "Action" "action:" "default?:" "cut" "before:" "title:" "activate" "name:" "Project-Menu")}
      {Lisp-Entry "Element-Menu" #f 1192 7 1192 19 ("launch" "workbench-manager" "Action" "action:" "Bitmap-Resource" "icon:" "default?:" "cut" "before:" "title:" "edit" "name:" "Component-Menu")}}})
"Workbench-Manager-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Workbench-Manager-Actions.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Workbench-Manager-Actions" #f 37 9 37 57 ("jazz")
      {Lisp-Entry "Workbench-Manager-Actions" #f 47 7 47 32 ("on-launch" "launch" "on-add-dependency" "add-dependency" "on-activate" "activate" "on-update-catalog" "update-catalog" "on-edit" "edit" "on-synchronize-content" "synchronize-content" "on-import-directory" "import-directory" "on-import-files" "import-files" "on-install-project" "install-project" "on-add-group" "add-group" ":control" "Shortcut" "shortcut:" "on-add-file" ":guest" ":client" ":form" "Event-Handler" "action-handler:" "add-file" "name:" "Actions")}}})
"Workbench-Tree"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Workbench-Tree.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Workbench-Tree" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "Workbench-Tree" #f 49 7 49 21 ("show-branches?:" "reorderable?:" "editable?:" "draggable?:" ":icons" "portfolio:" "Descendants-Tree")
        {Lisp-Entry "focus-actions" #f 56 11 56 24 ("nextmethod" "workbench-tree" "'workbench-tree" "find-actions" "cons")}
        {Lisp-Entry "on-add-file" #f 61 11 61 22 ("get-manager" "add-file" "evt")}
        {Lisp-Entry "on-add-group" #f 65 11 65 23 ("get-manager" "add-group" "evt")}
        {Lisp-Entry "get-manager" #f 69 11 69 22 ("get-host" "get-guest")}
        {Lisp-Entry "context-menu" #f 73 11 73 23 ("track-popup-menu" "when" "new-menu" "menu" "function" "with-context-click" "get-manager" "manager" "let" "pos")}
        {Lisp-Entry "can-copy?" #f 85 11 85 20 ()}
        {Lisp-Entry "can-paste-properties?" #f 89 11 89 32 ()}
        {Lisp-Entry "get-draggable?" #f 93 11 93 25 ()}
        {Lisp-Entry "update-selection" #f 98 11 98 27 ("selected-components" "expand-state")}
        {Lisp-Entry "use-add-menu?" #f 102 11 102 24 ()}
        {Lisp-Entry "row-state" #f 106 11 106 20 ("collapsed" "'collapsed" "expanded" "'expanded" "1" "<" "if" "level" "update?" "component")}
        {Lisp-Entry "double-click" #f 112 11 112 23 ("launch-selection" "Group" "Project" "or" "unless" "nextmethod" "activate-selection" "Product" "is?" "if" "selected-component" "component" "get-manager" "manager" "let" "pos")}
        {Lisp-Entry "return-press" #f 122 11 122 23 ("launch-selection" "Group" "unless" "activate-selection" "Product" "is?" "if" "selected-component" "component" "get-manager" "manager" "let" "key")}
        {Lisp-Entry "receive-files" #f 131 11 131 24 ("bell" "ascendant-project" "import-pathnames" "Project-Group" "Project" "is?" "or" "get-manager" "manager" "get-row" "get-user-data" "get-workbench" "not" "if" "data" "view->tree" "cell" "let*" "pathnames" "pos")}
        {Lisp-Entry "addable-root-classes" #f 142 11 142 31 ("Module" "Product" "Group" "list")}}}})
"Workbench-Tree-Actions"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "Workbench-Tree-Actions.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench.Workbench-Tree-Actions" #f 37 9 37 54 ("jazz")
      {Lisp-Entry "Workbench-Tree-Actions" #f 47 7 47 29 ("on-add-group" "add-group" ":control" "Shortcut" "shortcut:" "on-add-file" ":focus" "Event-Handler" "action-handler:" "add-file" "name:" "Actions")}}})
"Workspace-Button"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Workspace-Button.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Workspace-Button" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "Workspace-Button" #f 46 7 46 23 ("Radio-Tool")
        {Lisp-Entry "visit?" #f 49 12 49 18 ("generate")}
        {Lisp-Entry "problem?" #f 50 12 50 20 ("generate")}
        {Lisp-Entry "set-visit?" #f 58 18 58 28 ("invalidate-view" "set!" "visit?" "neq?" "when" "flag")}
        {Lisp-Entry "set-problem?" #f 64 18 64 30 ("invalidate-view" "set!" "problem?" "neq?" "when" "flag")}
        {Lisp-Entry "notify" #f 70 18 70 24 ("invalidate-view" "problem?~self" "visit?~self" "set!" "problem?" "visit?")}
        {Lisp-Entry "preferred-size" #f 81 11 81 25 ("22" "localize" "font" "text-width" "32" "+" "Dimension" "new" "default-size" "title" "not" "if")}
        {Lisp-Entry "problem-border" #f 92 14 92 28 ("Dark-Red" "name:" "Color")}
        {Lisp-Entry "visit-start" #f 95 14 95 25 ("Light-Red" "name:" "Color")}
        {Lisp-Entry "visit-end" #f 98 14 98 23 ("Red" "name:" "Color")}
        {Lisp-Entry "draw-frame" #f 102 11 102 21 ("nextmethod" "pixel-to" "Medium" "name:" "Color" "color:" "Pen" "new" "set-pen" "problem-border" "frame-rect" "get-bottom" "bottom" "1" "get-right" "-" "right" "get-top" "top" "get-left" "left" "get-bounds" "rect" "let*" "problem?" "if" "surface")}
        {Lisp-Entry "draw-tool" #f 118 11 118 20 ("enabled?" "get-v" "20" "draw-text" "Black" "name:" "Color" "set-text-color" "get-h" "+" "get-size" "justify" "center" "get-text-extent" "24" "Dimension" "nu+" "extent" "localize" "0" "let*" "get-enabled?" "enabled?:" "image" "draw" "title" "not" "1" "2" "pushed" "'pushed" "get-state" "eq?" "selected?" "or" "if" "offset" "let" "context" "surface")}
        {Lisp-Entry "draw-background" #f 131 11 131 26 ("nextmethod" "vertical" "'vertical" "direction:" "1" "visit-end" "0.5" "visit-start" "0" "list" "get-bounds" "gradient-fill" "visit?" "if" "context" "surface")}}}})
"Workspace-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Workspace-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Workspace-Menu" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Workspace-Menu" #f 46 7 46 21 ("previous-workspace" "previous" "next-workspace" "next" "next-separator" "full-screen" "maximize/restore" "zoom-vertically" "application" "zoom-horizontally" "zoom-separator" "select-sql" "sql" "select-groupware" "groupware" "select-debugger" "debugger" "select-text" "text" "select-home" "jedi" "Action" "action:" "Bitmap-Resource" "icon:" "home" "select" "name:" "title:" "Menu")}}})
"Workspace-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Workspace-Preferences.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Workspace-Preferences" #f 37 9 37 48 ("jazz")
      {Lisp-Entry "Workspace-Preferences" #f 51 7 51 28 ("Bitmap-Resource" "icon:" "Figure-Preferences")
        {Lisp-Entry "shortcut" #f 54 12 54 20 ("generate")}
        {Lisp-Entry "frame-model" #f 55 12 55 23 ("generate")}
        {Lisp-Entry "fullscreen?" #f 56 12 56 23 ("generate")}
        {Lisp-Entry "maximized?" #f 57 12 57 22 ("generate")}
        {Lisp-Entry "preserve-visibility?" #f 58 12 58 32 ("generate")}
        {Lisp-Entry "to-restore" #f 61 8 61 18 ()}
        {Lisp-Entry "apply-preferences" #f 73 11 73 28 ("activate" "set-locked-activations?" "begin" "unwind-protect" "deactivate" "get-guest" "set!" "Docked-Host" "is?" "get-focused-host" "host" "selected-workspace" "when" "palette" "let" "rest")}
        {Lisp-Entry "activate" #f 92 11 92 19 ("fullscreen?" "focus-host" "first-view" "first" "focus?:" "class-of" "select-palette" "if" "workspace:" "activate" "'activate" "workspace" "'workspace" "process-application-event" "update-status" "update-menubar-buttons" "process-activation" "maximized?" "set-maximized?" "set-selected-workspace" "self" "set-workspace-preferences" "apply-root" "when" "root" "'root" "find-child-located" "root-preferences" "process-frames" "collect-visibility" "visibility" "get-root" "splitter" "full-screen-stage" "close-palettes" "function" "with-locked-update" "get-toplevel" "toplevel" "get-stage" "stage" "get-application" "appl" "let" "palette")}
        {Lisp-Entry "update-status" #f 122 18 122 31 ("get-icon" "set-icon" "get-title" "set-title" "when" "workspace" "'workspace" "find-component" "essay" "label" "get-status-bar" "status" "get-application" "appl" "let*")}
        {Lisp-Entry "collect-visibility" #f 131 11 131 29 ("cons" "null?" "to-restore" "preserve-visibility?" "not" "name" "memq?" "and" "or" "effective-host-workspaces" "list" "if" "lst" "get-workspace" "ws" "when" "get-guest" "guest" "get-visible?" "visible?" "let" "frame" "function" "map" "get-children" "frames" "get-stage" "stage" "let*")}
        {Lisp-Entry "process-frames" #f 147 11 147 25 ("ensure-displayed" "maximized?" "unless" "set-visible?" "eq?" "when" "visible?" "frame" "bind" "info" "function" "for-each" "flag" "visibility")}
        {Lisp-Entry "process-activation" #f 158 11 158 29 ("client-activate" "view" "function" "for-each-docked" "stage-activate" "null?" "if" "get-views" "frames" "get-stage" "stage" "let*")}
        {Lisp-Entry "deactivate" #f 168 11 168 21 ("get-visible?" "frame" "function" "collect-if" "to-restore" "set!" "get-children" "frames" "get-stage" "stage" "let*" "preserve-visibility?" "when" "workspace:" "self" "deactivate" "'deactivate" "workspace" "'workspace" "get-application" "process-application-event")}
        {Lisp-Entry "get-domain" #f 183 16 183 26 ("nextmethod" "else" "Boolean-Domain" "new" "preserve-visibility?" "maximized?" "fullscreen?" "field-name" "case" "property")}
        {Lisp-Entry "property-presentation" #f 189 16 189 37 ("nextmethod" "else" "preserve-visibility?" "frame-model" "shortcut" "maximized?" "fullscreen?" "field-name" "case" "property")}
        {Lisp-Entry "get-addable-classes" #f 199 11 199 30 ("Stage-Preferences" "Docked-Preferences" "Pad-Preferences" "Splitter-Preferences" "list")}
        {Lisp-Entry "get-categorized-properties" #f 208 11 208 37 ("preserve-visibility?" "frame-model" "shortcut" "maximized?" "fullscreen?" "icon" "title")}
        {Lisp-Entry "get-row-instance" #f 212 11 212 27 ("nextmethod" "else" "Boolean-Row" "new" "preserve-visibility?" "maximized?" "fullscreen?" "field-name" "case" "property")}}}})
"Workspaces-Menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "Workspaces-Menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu.Workspaces-Menu" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "popup-workspaces-menu" #f 47 20 47 41 ("Workspaces-Menu" "new" "track-popup-menu" "2" "length" ">=" "get-children" "when" "error?:" "workspaces" "'workspaces" "get-preferences" "preferences" "let" "pos" "view")}
      {Lisp-Entry "Workspaces-Menu" #f 55 7 55 22 ("Context-Menu")
        {Lisp-Entry "install" #f 58 11 58 18 ("insert-workspaces" "nextmethod" "rest")}
        {Lisp-Entry "insert-workspaces" #f 63 11 63 28 ("Separator" "is?" "if" "unless" "workspace" "function" "for-each" "self" "parent:" "Separator-Item" "new" "eq?" "insert-workspace" "when" "'default" "find-component" "default" "get-children" "workspaces" "'workspaces" "get-preferences" "preferences" "selected-workspace" "selected" "let*")}
        {Lisp-Entry "insert-workspace" #f 79 11 79 27 ("set-selected?" "when" "workspace:" "list" "properties:" "on-action" "'on-action" "method-name:" "target:" "Event-Handler" "action-handler:" "icon:" "title:" "self" "parent:" "Radio-Item" "new" "item" "Bitmap-Resource" "get-icon" "icon" "get-presentation" "if" "title" "let*" "selected?" "workspace")}
        {Lisp-Entry "on-action" #f 87 11 87 20 ("apply-preferences" "workspace:" "get-property" "workspace" "let" "evt")}}}})
"Workspaces-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "Workspaces-Preferences.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace.Workspaces-Preferences" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "Workspaces-Preferences" #f 47 7 47 29 ("title:" "Preferences")
        {Lisp-Entry "active" #f 50 12 50 18 ("generate")}
        {Lisp-Entry "toolbar-classes" #f 51 12 51 27 ("generate")}
        {Lisp-Entry "associations" #f 52 12 52 24 ("generate")}
        {Lisp-Entry "walk-form" #f 65 16 65 25 ("push-reference" "in-manifest?" "when" "cdr" "toolbar-class" "info" "function" "for-each" "'toolbar-classes" "get-property" "toolbar-classes" "let" "form" "analyser")}
        {Lisp-Entry "can-rename-component?" #f 79 11 79 32 ()}
        {Lisp-Entry "can-delete-component?" #f 83 11 83 32 ()}
        {Lisp-Entry "can-move-component?" #f 87 11 87 30 ()}
        {Lisp-Entry "can-copy-component?" #f 91 11 91 30 ()}
        {Lisp-Entry "get-addable-classes" #f 95 11 95 30 ("Workspace-Preferences" "list")}
        {Lisp-Entry "get-addable-details" #f 100 11 100 30 ("preserve-visibility?" "maximized?" "100" "fullscreen?" "frame-model" "shortcut" "150" "name-info")}
        {Lisp-Entry "get-row-instance" #f 104 11 104 27 ("nextmethod" "else" "Association-List-Row" "associations" "Toolbar-Class-List-Row" "new" "toolbar-classes" "field-name" "case" "property")}}
      {Lisp-Entry "Toolbar-Class-List-Row" #f 116 7 116 29 ("List-Row")
        {Lisp-Entry "get-subrow-class" #f 119 11 119 27 ("Toolbar-Class-Row")}
        {Lisp-Entry "add-value" #f 123 11 123 20 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
        {Lisp-Entry "new-value" #f 127 11 127 20 ()}}
      {Lisp-Entry "Toolbar-Class-Row" #f 136 7 136 24 ("Value-Row")
        {Lisp-Entry "present" #f 144 11 144 18 ("format" "model")}}
      {Lisp-Entry "Association-List-Row" #f 153 7 153 27 ("List-Row")
        {Lisp-Entry "get-subrow-class" #f 156 11 156 27 ("Association-Row")}
        {Lisp-Entry "add-value" #f 160 11 160 20 ("class:" "cdr" "car" "self" "add-row" "class" "value")}
        {Lisp-Entry "new-value" #f 164 11 164 20 ()}}
      {Lisp-Entry "Association-Row" #f 173 7 173 22 ("Value-Row")
        {Lisp-Entry "present" #f 181 11 181 18 ("format" "model")}}}})
"X"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "X.jazz"} 1226584790
    {Lisp-Entry "test.X" #f 0 9 0 15 ("jazz")
      {Lisp-Entry "X" #f 3 7 3 8 ("Object")
        {Lisp-Entry "foo" #f 6 19 6 22 ("X.foo" "'X.foo" "terminal")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "suite" "X.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.suite.X" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "X" #f 45 7 45 8 ("Object")
        {Lisp-Entry "a" #f 48 8 48 9 ("generate")}
        {Lisp-Entry "b" #f 49 8 49 9 ("generate" "2")}
        {Lisp-Entry "print" #f 52 11 52 16 ("format" "+" "j" "1" "i" "let*" "function" "print-unreadable" "b" "a" "with-slots" "detail" "output" "x")}
        {Lisp-Entry "f" #f 69 11 69 12 ("f" "'f" "x")}
        {Lisp-Entry "g" #f 73 26 73 27 ("X.g" "'X.g" "x")}
        {Lisp-Entry "foo" #f 77 18 77 21 ("x:" ":x" "g" "f" "list" "b" "a" "with-slots" "x")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "modules" "X.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.modules.X" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "X" #f 45 7 45 8 ("Object")}}})
"XHTML-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "xhtml" "XHTML-Parser.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.xhtml.XHTML-Parser" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "XHTML-Parser" #f 45 7 45 19 ("JML-Parser")
        {Lisp-Entry "Valid-Tags" #f 53 14 53 24 ("var" "ul" "u" "tt" "tr" "title" "thead" "th" "tfoot" "textarea" "td" "tbody" "table" "sup" "sub" "style" "strong" "strike" "span" "small" "select" "script" "samp" "s" "q" "pre" "param" "p" "option" "optgroup" "ol" "object" "noscript" "noframes" "meta" "menu" "map" "link" "li" "legend" "label" "kbd" "isindex" "ins" "input" "img" "iframe" "i" "html" "hr" "head" "h6" "h5" "h4" "h3" "h2" "h1" "frameset" "frame" "form" "font" "fieldset" "em" "dt" "dl" "div" "dir" "dfn" "del" "dd" "colgroup" "col" "code" "cite" "center" "caption" "button" "br" "body" "blockquote" "big" "bdo" "basefont" "base" "b" "area" "applet" "address" "acronym" "abbr" "a")}
        {Lisp-Entry "tag-valid?" #f 147 11 147 21 ("Valid-Tags" "memq?" "tag")}}}})
"XHTML-Renderer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "xhtml" "XHTML-Renderer.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.xhtml.XHTML-Renderer" #f 40 9 40 38 ("jazz")
      {Lisp-Entry "XHTML-Renderer" #f 48 7 48 21 ("JML-Renderer")
        {Lisp-Entry "Empty-Tags" #f 56 14 56 24 ("param" "meta" "link" "input" "img" "hr" "frame" "col" "br" "basefont" "base" "area")}
        {Lisp-Entry "Mix-Tags" #f 59 14 59 22 ("td" "p")}
        {Lisp-Entry "Pre-Tags" #f 62 14 62 22 ("pre")}
        {Lisp-Entry "Separated-Tags" #f 65 14 65 28 ("frameset" "body" "head")}
        {Lisp-Entry "Separated2-Tags" #f 68 14 68 29 ("html")}
        {Lisp-Entry "render" #f 77 11 77 17 ("0" "render-jml" "printer" "jml")}
        {Lisp-Entry "render-jml" #f 81 11 81 21 ("render-node" "else" "render-text" "JML-Text" "typecase" "printer" "level" "inside-pre?" "mix?" "simple?" "jml" "context")}
        {Lisp-Entry "render-text" #f 89 19 89 30 ("format" "255" ">" "if" "char->integer" "n" "c" "function" "iterate" "get-text" "text" "let" "printer" "jml" "context")}
        {Lisp-Entry "render-node" #f 99 11 99 22 ("render-tag" "get-tag" "tag" "let" "self" "render" "JML-Node" "is-not?" "if" "printer" "level" "inside-pre?" "mix?" "simple?" "jml" "context")}
        {Lisp-Entry "render-tag" #f 106 11 106 21 ("end-tag" "Separated2-Tags" "render-children" "1" "+" "else" "body" "html" "case" "new-level" "let" "Empty-Tags" "get-properties" "render-value" "render-string" ":string" "car" "eq?" "pair?" "null?" "if" "value" "property" "function" "for-each-property" "*" "unless" "output" "not" "Separated-Tags" "and" "when" "or" "Pre-Tags" "pre?" "Mix-Tags" "memq?" "mix?" "composite?" "preferences" "get-tab-size" "tab" "let*" "printer" "level" "inside-pre?" "parent-mix?" "simple?" "tag" "jml" "context")}
        {Lisp-Entry "render-string" #f 143 19 143 32 ("cdr" "string" "function" "for-each" "output" "value" "property" "printer" "context")}
        {Lisp-Entry "render-value" #f 151 19 151 31 ("output" "value" "property" "printer" "context")}
        {Lisp-Entry "render-children" #f 155 11 155 26 ("get-children" "render-jml" "sub" "function" "for-each" "printer" "level" "inside-pre?" "mix?" "simple?" "jml" "context")}
        {Lisp-Entry "output" #f 161 11 161 17 ("output-text" "format" "apply" "text" "let" "parameters" "format-string" "printer" "context")}
        {Lisp-Entry "output-text" #f 166 19 166 30 ("output-to" "text" "printer" "context")}
        {Lisp-Entry "output-to" #f 170 11 170 20 ("format" "when" "text" "printer")}
        {Lisp-Entry "end-tag" #f 175 11 175 18 ("format" "tag")}}}})
"XML"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "samples" "XML.jazz"} 1226584790})
"XML-Attribute"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "model" "XML-Attribute.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.model.XML-Attribute" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "XML-Attribute" #f 45 7 45 20 ("XML-Node")
        {Lisp-Entry "namespace" #f 48 8 48 17 ()}
        {Lisp-Entry "initialize" #f 52 11 52 21 ("value~self" "set!" "nextmethod" "value")}
        {Lisp-Entry "get-namespace" #f 62 18 62 31 ("namespace")}
        {Lisp-Entry "set-namespace" #f 66 18 66 31 ("namespace" "set!" "value")}
        {Lisp-Entry "get-value" #f 70 18 70 27 ("value")}
        {Lisp-Entry "set-value" #f 74 18 74 27 ("set!" "value")}}}})
"XML-Comment"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "model" "XML-Comment.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.model.XML-Comment" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "XML-Comment" #f 45 7 45 18 ("XML-Node")
        {Lisp-Entry "text" #f 48 8 48 12 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("text~self" "set!" "nextmethod" "text")}
        {Lisp-Entry "get-text" #f 61 18 61 26 ("text")}
        {Lisp-Entry "set-text" #f 65 18 65 26 ("text" "set!" "value")}}}})
"XML-Consumer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "transform" "XML-Consumer.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.transform.XML-Consumer" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "XML-Consumer" #f 45 16 45 28 ("Object")
        {Lisp-Entry "get-document" #f 48 29 48 41 ()}
        {Lisp-Entry "begin-document" #f 52 29 52 43 ()}
        {Lisp-Entry "end-document" #f 56 29 56 41 ()}
        {Lisp-Entry "begin-element" #f 60 29 60 42 ("name")}
        {Lisp-Entry "end-element" #f 64 29 64 40 ("name")}
        {Lisp-Entry "add-attribute" #f 68 29 68 42 ("value" "name")}
        {Lisp-Entry "text" #f 72 29 72 33 ("cdata")}
        {Lisp-Entry "comment" #f 76 29 76 36 ("content")}
        {Lisp-Entry "processing-instruction" #f 80 29 80 51 ("content")}}}})
"XML-Data"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "model" "XML-Data.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.model.XML-Data" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "XML-Data" #f 45 7 45 15 ("XML-Text")}}})
"XML-Document"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "model" "XML-Document.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.model.XML-Document" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "XML-Document" #f 45 7 45 19 ("Object")}}})
"XML-Element"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "model" "XML-Element.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.model.XML-Element" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "XML-Element" #f 45 7 45 18 ("XML-Node")}}})
"XML-Explorer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "xml" "text" "XML-Explorer.jazz"} 1226584780
    {Lisp-Entry "jazz.language.xml.text.XML-Explorer" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "XML-Explorer" #f 46 7 46 19 ("C-Explorer")}}})
"XML-Formatter"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "transform" "XML-Formatter.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.transform.XML-Formatter" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "XML-Formatter" #f 50 7 50 20 ("XML-Handler" "Object")
        {Lisp-Entry "pretty-print?" #f 53 8 53 21 ()}
        {Lisp-Entry "level" #f 54 8 54 13 ()}
        {Lisp-Entry "indentation-width" #f 55 8 55 25 ()}
        {Lisp-Entry "ostream" #f 56 8 56 15 ()}
        {Lisp-Entry "printing-element?" #f 57 8 57 25 ()}
        {Lisp-Entry "initialize" #f 60 11 60 21 ("printing-element?" "0" "level" "indentation-width~self" "ostream~self" "pretty-print?~self" "set!" "nextmethod" "2" "indentation" "indentation:" ":console" "stream" "stream:" "pretty" "pretty:")}
        {Lisp-Entry "close-start-tag" #f 69 19 69 34 ("set!" "ostream" "format" "printing-element?" "when")}
        {Lisp-Entry "increment-level" #f 75 19 75 34 ("level" "increase!")}
        {Lisp-Entry "decrease-level" #f 79 19 79 33 ("level" "decrease!")}
        {Lisp-Entry "get-document" #f 83 11 83 23 ()}
        {Lisp-Entry "begin-document" #f 87 11 87 25 ()}
        {Lisp-Entry "end-document" #f 91 11 91 23 ()}
        {Lisp-Entry "begin-element" #f 95 11 95 24 ("printing-element?" "set!" "increment-level" "level" "ostream" "format" "pretty-print?" "when" "close-start-tag" "name")}
        {Lisp-Entry "end-element" #f 104 11 104 22 ("set!" "level" "pretty-print?" "when" "ostream" "format" "printing-element?" "if" "decrease-level" "name")}
        {Lisp-Entry "add-attribute" #f 114 11 114 24 ("ostream" "format" "value" "name")}
        {Lisp-Entry "text" #f 118 11 118 15 ("level" "ostream" "format" "pretty-print?" "when" "close-start-tag" "cdata")}
        {Lisp-Entry "comment" #f 125 11 125 18 ("comment" "'comment" "unimplemented" "content")}
        {Lisp-Entry "processing-instruction" #f 129 11 129 33 ("processing-instruction" "'processing-instruction" "unimplemented" "content")}}}})
"XML-Handler"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "transform" "XML-Handler.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.transform.XML-Handler" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "XML-Handler" #f 45 11 45 22 ()
        {Lisp-Entry "get-document" #f 48 35 48 47 ()}
        {Lisp-Entry "begin-document" #f 49 35 49 49 ()}
        {Lisp-Entry "end-document" #f 50 35 50 47 ()}
        {Lisp-Entry "begin-element" #f 51 35 51 48 ("name")}
        {Lisp-Entry "end-element" #f 52 35 52 46 ("name")}
        {Lisp-Entry "add-attribute" #f 53 35 53 48 ("value" "name")}
        {Lisp-Entry "text" #f 54 35 54 39 ("cdata")}
        {Lisp-Entry "comment" #f 55 35 55 42 ("content")}
        {Lisp-Entry "processing-instruction" #f 56 35 56 57 ("content")}}}})
"XML-Node"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "model" "XML-Node.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.model.XML-Node" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "XML-Node" #f 45 7 45 15 ("Object")
        {Lisp-Entry "name" #f 48 8 48 12 ()}
        {Lisp-Entry "document" #f 49 8 49 16 ()}
        {Lisp-Entry "parent" #f 50 8 50 14 ()}
        {Lisp-Entry "children" #f 51 8 51 16 ()}
        {Lisp-Entry "initialize" #f 54 11 54 21 ("parent~self" "document~self" "name~self" "set!" "nextmethod" "name" "name:" "parent" "document")}
        {Lisp-Entry "get-name" #f 66 18 66 26 ("name")}
        {Lisp-Entry "get-document" #f 70 18 70 30 ("document")}
        {Lisp-Entry "get-parent" #f 74 18 74 28 ("parent")}
        {Lisp-Entry "set-parent" #f 78 18 78 28 ("parent" "set!" "value")}
        {Lisp-Entry "get-children" #f 82 18 82 30 ("children")}
        {Lisp-Entry "set-children" #f 86 18 86 30 ("self" "set-parent" "child" "function" "for-each" "children" "set!" "value")}}}})
"XML-Parser"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "parser" "XML-Parser.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.parser.XML-Parser" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "XML-Parser" #f 52 7 52 17 ("Object")
        {Lisp-Entry "Start-Marker" #f 55 14 55 26 ()}
        {Lisp-Entry "End-Marker" #f 58 14 58 24 ()}
        {Lisp-Entry "Closing-Marker" #f 61 14 61 28 ()}
        {Lisp-Entry "Property-Separator" #f 64 14 64 32 ()}
        {Lisp-Entry "reader" #f 68 8 68 14 ()}
        {Lisp-Entry "initialize" #f 71 11 71 21 ("setup-reader" "nextmethod" "text" "text:")}
        {Lisp-Entry "setup-reader" #f 76 11 76 23 ("create-reader" "reader" "set!" "text")}
        {Lisp-Entry "create-reader" #f 80 11 80 24 ("set-readtable" "End-Marker" "TTerminator" "Property-Separator" "set-syntax" "Readtable" "readtable" "String-Reader" "new" "reader" "let" "text")}
        {Lisp-Entry "parse-text" #f 90 18 90 28 ("read-children")}
        {Lisp-Entry "read-tag" #f 94 11 94 19 ("read-partial-tag" "Start-Marker" "validate-char")}
        {Lisp-Entry "read-partial-tag" #f 99 11 99 27 ("list" "read-closing-tag" "read-children" "children" "End-Marker" "validate-char" "read-properties" "properties" "reader" "read" "tag" "let")}
        {Lisp-Entry "read-closing-tag" #f 108 11 108 27 ("End-Marker" "validate-read" "Closing-Marker" "validate-char" "tag")}
        {Lisp-Entry "read-properties" #f 114 11 114 26 ("get-output" "put" "value" "Property-Separator" "validate-char" "read" "property" "End-Marker" "peek-char" "/=" "while" "reader" "skip-whites" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "read-children" #f 127 11 127 24 ("read-partial-tag" "Closing-Marker" "validate-eof" "peek-char" "next" "set!" "Start-Marker" "eqv?" "not" "continuation-return" "begin" "eof-object?" "if" "reader" "read-char" "c" "let" "while" "return" "continuation-capture" "reset" "get-output-string" "put" "unless" "function" "add" "empty?" "open-output-string" "printer" "List-Factory" "new" "fact" "let*")}
        {Lisp-Entry "validate-char" #f 156 11 156 24 ("string" "error" "eqv?" "if" "reader" "read-char" "char" "let" "c")}
        {Lisp-Entry "validate-read" #f 163 11 163 24 ("error" "eqv?" "if" "reader" "read" "expr" "let" "symbol")}
        {Lisp-Entry "validate-eof" #f 170 11 170 23 ("error" "eof-object?" "when" "c")}}}})
"XML-Text"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "model" "XML-Text.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.model.XML-Text" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "XML-Text" #f 45 7 45 15 ("XML-Node")
        {Lisp-Entry "text" #f 48 8 48 12 ()}
        {Lisp-Entry "initialize" #f 51 11 51 21 ("text~self" "set!" "nextmethod" "text")}
        {Lisp-Entry "get-text" #f 61 18 61 26 ("text")}
        {Lisp-Entry "set-text" #f 65 18 65 26 ("text" "set!" "value")}}}})
"XML-Text-Preferences"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "xml" "text" "XML-Text-Preferences.jazz"} 1226584780
    {Lisp-Entry "jazz.language.xml.text.XML-Text-Preferences" #f 37 9 37 52 ("jazz")
      {Lisp-Entry "XML-Text-Preferences" #f 49 7 49 27 ("specifier-color:" "Dark-Blue" "keyword-color:" "definition-color:" "Purple" "line-comment-color:" "Dark-Red" "name:" "Color" "title-color:" "title:" "Code-Text-Preferences")
        {Lisp-Entry "title-color" #f 52 12 52 23 ("generate")}
        {Lisp-Entry "line-comment-color" #f 53 12 53 30 ("generate")}
        {Lisp-Entry "definition-color" #f 54 12 54 28 ("generate")}
        {Lisp-Entry "keyword-color" #f 55 12 55 25 ("generate")}
        {Lisp-Entry "specifier-color" #f 56 12 56 27 ("generate")}
        {Lisp-Entry "keywords" #f 57 12 57 20 ("generate")}
        {Lisp-Entry "completions" #f 58 12 58 23 ("generate")}
        {Lisp-Entry "get-categorized-properties" #f 76 11 76 37 ("specifier-color" "keyword-color" "definition-color" "line-comment-color" "title-color" "completions" "keywords")}
        {Lisp-Entry "get-row-instance" #f 81 11 81 27 ("nextmethod" "else" "Completion-List-Row" "completions" "Color-Row" "new" "specifier-color" "keyword-color" "definition-color" "line-comment-color" "title-color" "field-name" "case" "property")}}}})
"XML-Text-View"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "xml" "text" "XML-Text-View.jazz"} 1226584780
    {Lisp-Entry "jazz.language.xml.text.XML-Text-View" #f 37 9 37 45 ("jazz")
      {Lisp-Entry "XML-Text-View" #f 47 7 47 20 ("Code-Text-View")
        {Lisp-Entry "install" #f 50 11 50 18 ("get-specifier-color" "Specifier" "'Specifier" "get-keyword-color" "Keyword" "'Keyword" "get-definition-color" "Definition" "'Definition" "get-line-comment-color" "Line-Comment" "'Line-Comment" "get-title-color" "color:" "Default" "'Default" "base:" "Title" "'Title" "name:" "Text-Style" "new" "add-style" "preferences" "pref" "let" "nextmethod" "rest")}
        {Lisp-Entry "external-name" #f 60 16 60 29 ("xml-text" "'xml-text" "rest")}
        {Lisp-Entry "preferences" #f 64 11 64 22 ("xml-text" "documents" "get-preferences")}
        {Lisp-Entry "get-constituent-test" #f 69 16 69 36 ("c-constituent?")}
        {Lisp-Entry "host-workspaces" #f 78 11 78 26 ("text")}
        {Lisp-Entry "favorite-completions" #f 87 11 87 31 ("xml-text" "documents" "get-preferences" "get-completions")}
        {Lisp-Entry "commented?" #f 91 11 91 21 ("Line-Comment" "'Line-Comment" "Title" "'Title" "inherits?" "or" "and" "get-style-at" "style" "let" "pos")}
        {Lisp-Entry "explorer-class" #f 103 11 103 25 ("XML-Explorer")}
        {Lisp-Entry "get-context" #f 112 11 112 22 ("xml")}
        {Lisp-Entry "current-name" #f 116 11 116 23 ("current-expr-range" "name-at")}
        {Lisp-Entry "name-at" #f 120 11 120 18 ("read-string-element" "element" "eqv?" "if" "0" "cardinality" ">" "get-string" "name" "let" "when" "range")}
        {Lisp-Entry "current-expr" #f 129 11 129 23 ("current-name")}
        {Lisp-Entry "current-expr-range" #f 133 11 133 29 ("get-end" "expr-range" "get-selection" "has-selection?" "completion-active?" "not" "and" "if")}
        {Lisp-Entry "expr-range" #f 139 11 139 21 ("get-range" "outer-expr" "end:" "start:" "self" "XML-Explorer" "new" "expl" "let" "pos")}
        {Lisp-Entry "expr-at" #f 145 11 145 18 ("expr-range" "name-at" "pos")}
        {Lisp-Entry "headers" #f 154 12 154 19 ("list")}
        {Lisp-Entry "get-headers" #f 159 11 159 22 ("headers")}
        {Lisp-Entry "get-first-special?" #f 163 11 163 29 ()}
        {Lisp-Entry "Definitions" #f 172 12 172 23 ()}
        {Lisp-Entry "get-definitions" #f 176 11 176 26 ("Definitions")}
        {Lisp-Entry "Keywords" #f 185 12 185 20 ()}
        {Lisp-Entry "get-keywords" #f 189 29 189 41 ("Keywords")}
        {Lisp-Entry "Syntax-Targets" #f 198 14 198 28 ()}
        {Lisp-Entry "Syntax-Automata" #f 201 14 201 29 ()}
        {Lisp-Entry "syntax-targets" #f 205 11 205 25 ("compute-syntax-targets" "set!" "Syntax-Targets" "unless")}
        {Lisp-Entry "syntax-automata" #f 211 11 211 26 ("compute-syntax-automata" "set!" "Syntax-Automata" "unless")}
        {Lisp-Entry "compute-syntax-targets" #f 217 11 217 33 ("get-keywords" "keyword" "'keyword" "get-definitions" "definition" "'definition" "str" "function" "map" "line-comment" "'line-comment" "list" "append")}
        {Lisp-Entry "compute-syntax-automata" #f 223 11 223 34 ("c-constituent?" "self" "syntax-targets" "build-search-automata")}
        {Lisp-Entry "colorize-syntax" #f 227 11 227 26 ("colorize-comments" "colorize-declarations" "function" "with-safe-explore" "rest")}
        {Lisp-Entry "colorize-type" #f 234 11 234 24 ("Keyword" "'Keyword" "keyword" "Definition" "'Definition" "colorize-keyword" "definition" "Title" "'Title" "Line-Comment" "'Line-Comment" "colorize-line-comment" "line-comment" "case" "recolorize?" "colorizer" "end" "start" "type" "found")}}}})
"XML-Transformer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "transform" "XML-Transformer.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.transform.XML-Transformer" #f 44 9 44 43 ("jazz")
      {Lisp-Entry "XML-Transformer" #f 52 7 52 22 ("XML-Handler" "Object")
        {Lisp-Entry "handler" #f 55 8 55 15 ()}
        {Lisp-Entry "initialize" #f 58 11 58 21 ("handler~self" "set!" "nextmethod" ":console" "handler" "handler:")}
        {Lisp-Entry "get-handler" #f 63 29 63 40 ("handler")}
        {Lisp-Entry "apply-transformation" #f 67 18 67 38 ("apply" "rest" "document" "ruleset")}
        {Lisp-Entry "element?" #f 76 26 76 34 ("sxml-element?" "node")}
        {Lisp-Entry "element-tag" #f 80 26 80 37 ("sxml-element-tag" "node")}
        {Lisp-Entry "node-children" #f 84 26 84 39 ("sxml-element-children" "node")}
        {Lisp-Entry "node-attribute" #f 88 26 88 40 ("sxml-attribute-value" "sxml-attribute?" "if" "assq" "attribute" "sxml-element-attributes" "attributes" "let*" "attribute-name" "node")}
        {Lisp-Entry "get-text" #f 96 26 96 34 ("sxml-text-data" "node")}
        {Lisp-Entry "get-document" #f 105 18 105 30 ("get-handler" "get-document")}
        {Lisp-Entry "begin-document" #f 109 18 109 32 ("get-handler" "begin-document")}
        {Lisp-Entry "end-document" #f 113 18 113 30 ("get-handler" "end-document")}
        {Lisp-Entry "begin-element" #f 117 18 117 31 ("get-handler" "begin-element" "tag")}
        {Lisp-Entry "end-element" #f 121 18 121 29 ("get-handler" "end-element" "tag")}
        {Lisp-Entry "add-attribute" #f 125 18 125 31 ("get-handler" "add-attribute" "value" "name")}
        {Lisp-Entry "text" #f 129 18 129 22 ("get-handler" "text" "content")}
        {Lisp-Entry "comment" #f 133 18 133 25 ("get-handler" "comment" "content")}
        {Lisp-Entry "processing-instruction" #f 137 18 137 40 ("get-handler" "processing-instruction" "content")}}}})
"XML-Tree-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "transform" "XML-Tree-Viewer.jazz"} 1226584790
    {Lisp-Entry "jazz.xml.transform.XML-Tree-Viewer" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "XML-Tree-Viewer" #f 48 7 48 22 ("279" "240" "entries" "notes" "204" "554" "239" "219" "width:" "on-selection-change" "parent:" "selection-handler:" "log-tree" "fill" "layout-type:" "content" "vscroll?:" "document" "entry" "style:" "edge" "border-type:" "486" "223" "33" "0" "on-on/off" "selected?:" "767" "on/off" "on-refresh" "574" "refresh" "on-clear" ":form" "Event-Handler" "action-handler:" "Bitmap-Resource" "image-name:" ":icons" "portfolio:" "22" "5" "550" "clear" "name:" "519" "793" "Dimension" "size:" "50" "80" "Point" "position:" "title:" "View")
        {Lisp-Entry "log-tree" #f 51 8 51 16 ()}
        {Lisp-Entry "viewer" #f 52 8 52 14 ()}
        {Lisp-Entry "finish" #f 72 11 72 17 ("refresh" "'log-tree" "locate" "log-tree" "set!" "nextmethod" "initargs")}
        {Lisp-Entry "resize" #f 78 11 78 17 ("entries" "'entries" "notes" "'notes" "log-tree" "'log-tree" "size-figure" "on/off" "'on/off" "refresh" "'refresh" "0" "clear" "'clear" "locate" "move-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "on-refresh" #f 88 18 88 28 ("refresh" "evt")}
        {Lisp-Entry "delete-selection" #f 92 11 92 27 ("on-refresh")}
        {Lisp-Entry "refresh" #f 96 18 96 25 ("Log" "root-node" "view-log")}
        {Lisp-Entry "view-log" #f 100 11 100 19 ("get-children" "insert-log" "sub" "for-each" "remove-every-row" "function" "log-tree" "with-update-locked" "log")}
        {Lisp-Entry "insert-log" #f 109 11 109 21 ("get-children" "insert-log" "sub" "function" "for-each" "user-data:" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "log-tree" "add-row" "subfather" "present" "either" "->string" "title" "let*" "father" "log")}
        {Lisp-Entry "describe-log" #f 117 11 117 23 ("call-selection-handler" "user-data:" "get-title" "add-header" "entry" "function" "for-each" "when" "get-entries" "close-viewer" "remove-every-header" "invalidate-view" "get-notes" "set-content" "entries" "'entries" "tab" "notes" "'notes" "locate" "text" "let" "log")}
        {Lisp-Entry "view-entry" #f 132 11 132 21 ("entries" "'entries" "locate" "parent:" "container:" "new" "viewer" "set!" "when" "get-viewer-class" "class" "let" "close-viewer" "entry")}
        {Lisp-Entry "close-viewer" #f 142 11 142 23 ("set!" "close" "viewer" "when")}
        {Lisp-Entry "on-selection-change" #f 148 11 148 30 ("view-entry" "get-selection" "entries" "describe-log" "get-row" "get-user-data" "log" "when" "get-single-selection" "selection" "log-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}}}})
"XML-Viewer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "xml" "viewer" "XML-Viewer.jazz"} 1226584780
    {Lisp-Entry "jazz.language.xml.viewer.XML-Viewer" #f 37 9 37 44 ("jazz")
      {Lisp-Entry "XML-Viewer" #f 48 7 48 17 ("notes" "notes-border" "Heading5" "Font" "font:" "Default" "Text-Style" "default-style:" "text" "text-border" "70" "vert" "second" "219" "width:" "on-selection-change" ":form" "Event-Handler" "selection-handler:" ":icons" "portfolio:" "xml-tree" "fill" "content" "vscroll?:" "document" "entry" "style:" "edge" "border-type:" "first" "xml-border" "30" "division:" "relative" "mode:" "horz" "orientation:" "split" "state:" "center" "6" "0" "Rect" "layout-insets:" "flow" "north" "location:" "33" "300" "Dimension" "size:" "toolbar" "name:" "border" "layout-type:" "title:" "Layout-View")
        {Lisp-Entry "document" #f 51 12 51 20 ("set-document" "get-document")}
        {Lisp-Entry "finish" #f 76 11 76 17 ("refresh" "nextmethod" "initargs")}
        {Lisp-Entry "host-icon" #f 86 16 86 25 ("Bitmap-Resource")}
        {Lisp-Entry "host-title" #f 90 16 90 26 ()}
        {Lisp-Entry "host-position" #f 94 16 94 29 ("50" "Point")}
        {Lisp-Entry "host-size" #f 98 16 98 25 ("500" "800" "Point")}
        {Lisp-Entry "host-workspaces" #f 102 11 102 26 ("home")}
        {Lisp-Entry "get-document" #f 111 18 111 30 ("document")}
        {Lisp-Entry "set-document" #f 115 18 115 30 ("refresh" "document" "set!" "value")}
        {Lisp-Entry "resize" #f 125 11 125 17 ("notes-border" "'notes-border" "text-border" "'text-border" "0" "xml-border" "'xml-border" "locate" "size-figure" "nextmethod" "dv" "dh")}
        {Lisp-Entry "refresh" #f 132 18 132 25 ("view-text" "document" "view-tree" "clear-node")}
        {Lisp-Entry "clear-node" #f 138 11 138 21 ("clear-all" "'notes" "notes" "'text" "locate" "text" "let")}
        {Lisp-Entry "view-tree" #f 150 11 150 20 ("insert-node" "node" "for-each" "collect-children" "child-nodes" "get-childNodes" "lst" "with-closed" "hasChildNodes" "and" "when" "remove-every-row" "function" "with-update-locked" "xml-tree" "'xml-tree" "locate" "tree" "let" "document")}
        {Lisp-Entry "insert-node" #f 163 11 163 22 ("insert-node" "subnode" "function" "for-each" "collect-children" "child-nodes" "get-childNodes" "lst" "with-closed" "hasChildNodes" "when" "Bitmap-Resource" "image:" "title:" "Tree-Node" "new" "list" "children:" "father:" "add-row" "subfather" "get-nodeName" "title" "xml-tree" "'xml-tree" "locate" "tree" "let*" "father" "node")}
        {Lisp-Entry "collect-children" #f 175 11 175 27 ("get-item" "collect" "get-length" "below" "0" "from" "n" "for" "loop" "lst")}
        {Lisp-Entry "view-text" #f 180 11 180 20 ("get-xml" "set-string-content" "clear-all" "null?" "if" "'text" "locate" "text" "let" "document")}
        {Lisp-Entry "describe-node" #f 187 11 187 24 ("get-nodeType" "get-nodeValue" "get-nodeName" "insert-bulleted-line" "'notes" "locate" "notes" "let" "node")}
        {Lisp-Entry "on-selection-change" #f 199 11 199 30 ("describe-node" "get-row" "get-user-data" "node" "when" "get-single-selection" "selection" "xml-tree" "get-name" "case" "get-sender" "sender" "let" "evt")}}}})
"XSLT"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "transform" "XSLT.jazz"} 1226584790
    {Lisp-Entry "XSLT" #f 42 9 42 13 ("jazz")}})
"Y"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "Y.jazz"} 1226584790
    {Lisp-Entry "test.Y" #f 0 9 0 15 ("jazz")
      {Lisp-Entry "Y" #f 6 7 6 8 ("Object")
        {Lisp-Entry "foo" #f 9 11 9 14 ("Y.foo" "'Y.foo" "terminal")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "suite" "Y.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.suite.Y" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "Y" #f 40 7 40 8 ("X")
        {Lisp-Entry "c" #f 43 8 43 9 ("generate" "5")}
        {Lisp-Entry "d" #f 44 8 44 9 ("generate" "7")}
        {Lisp-Entry "g" #f 47 11 47 12 ("nextmethod" "Y.g" "'Y.g" "cons" "y")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "modules" "Y.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.modules.Y" #f 37 9 37 34 ("jazz")
      {Lisp-Entry "Y" #f 45 7 45 8 ("X")}}})
"Zip-File"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "compression" "Zip-File.jazz"} 1226584780
    {Lisp-Entry "jazz.library.compression.Zip-File" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Zip-File" #f 44 7 44 15 ("Object")}
      {Lisp-Entry "Zip-File" #f 50 7 50 15 ("Object")
        {Lisp-Entry "handle" #f 53 8 53 14 ()}
        {Lisp-Entry "initialize" #f 56 11 56 21 ("destroy-mandatory" "Ansi-String" "parse" "coerce" "zip-open" "handle" "set!" "initialize" "'initialize" "unimplemented" "nextmethod" "file")}
        {Lisp-Entry "destroy" #f 64 11 64 18 ("nextmethod" "handle" "zip-close")}
        {Lisp-Entry "with-new-file-in-zip" #f 74 18 74 38 ("close-file-in-zip" "when" "set!" "open-new-file-in-zip" "begin" "unwind-protect" "created?" "let" "proc" "filename")}
        {Lisp-Entry "write-file" #f 85 18 85 28 ("write-in-file-in-zip" "function" "with-new-file-in-zip" "block/string" "filename")}
        {Lisp-Entry "open-new-file-in-zip" #f 96 18 96 38 ("Ansi-String" "coerce" "handle" "zip-open-new-file-in-zip" "open-new-file-in-zip" "'open-new-file-in-zip" "unimplemented" "filename")}
        {Lisp-Entry "write-in-file-in-zip" #f 102 18 102 38 ("handle" "zip-write-in-file-in-zip" "block/string")}
        {Lisp-Entry "close-file-in-zip" #f 106 18 106 35 ("handle" "zip-close-file-in-zip")}}}})
"Zip-File-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Zip-File-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Zip-File-Entry" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Zip-File-Entry" #f 45 7 45 21 ("File-Entry")
        {Lisp-Entry "print-catalog" #f 48 11 48 24 ("definitions" "print-catalog" "definition" "function" "for-each" "time" "file" "self" "class-of" "type-name" "identifier-name" "2" "format" "not" "when" "printer" "first?")}
        {Lisp-Entry "update-indexes" #f 66 11 66 25 ("definitions" "update-indexes" "definition" "function" "for-each" "references-index" "definitions-index")}}}})
"Zipped"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "compression" "Zipped.jazz"} 1226584780
    {Lisp-Entry "jazz.library.compression.Zipped" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "crlf" #f 46 13 46 17 ("string")}
      {Lisp-Entry "Zipped" #f 50 7 50 13 ("Moniker" "Moniker-Class")
        {Lisp-Entry "get-protocol" #f 59 16 59 28 ("zip" "'zip")}
        {Lisp-Entry "construct-literal" #f 64 16 64 33 ("self" "new" "entry" "file" "context")}
        {Lisp-Entry "extract-name" #f 69 23 69 35 ("1" "+" "subseq" "null?" "if" "reversed?:" "find" "pos" "let" "filename")}
        {Lisp-Entry "extract-base" #f 77 23 77 35 ("extract-name" "extract-base" "filename")}
        {Lisp-Entry "extract-extension" #f 82 23 82 40 ("1" "+" "subseq" "when" "reversed?:" "find" "pos" "let" "filename")}
        {Lisp-Entry "compare-object" #f 88 11 88 25 (":not-equal" "else" ":equal" "get-entry" "get-file" "=" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "compare-pathname" #f 98 11 98 27 ("get-entry" "ci=?" "get-file" "pathname=?" "Zipped" "is?" "and" "object")}
        {Lisp-Entry "print" #f 104 11 104 16 ("get-entry" "get-file" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-file" #f 116 11 116 19 ("self" "JzZippedFile" "get-file" "'get-file" "unimplemented")}
        {Lisp-Entry "get-entry" #f 122 18 122 27 ("self" "JzZippedEntry" "get-entry" "'get-entry" "unimplemented")}
        {Lisp-Entry "exists?" #f 133 11 133 18 ("get-file" "exists?")}
        {Lisp-Entry "get-writable?" #f 137 11 137 24 ("get-file" "get-writable?")}
        {Lisp-Entry "set-writable?" #f 141 11 141 24 ("get-file" "set-writable?" "flag")}
        {Lisp-Entry "writable?" #f 145 11 145 20 ("get-file" "writable?")}
        {Lisp-Entry "get-modification-time" #f 149 11 149 32 ("get-file" "get-modification-time")}
        {Lisp-Entry "get-name" #f 153 11 153 19 ("get-entry" "extract-name" "get-name" "'get-name" "unimplemented")}
        {Lisp-Entry "get-base" #f 159 11 159 19 ("get-entry" "extract-base" "get-base" "'get-base" "unimplemented")}
        {Lisp-Entry "get-extension" #f 165 11 165 24 ("get-entry" "extract-extension" "get-extension" "'get-extension" "unimplemented")}
        {Lisp-Entry "get-parent" #f 171 11 171 21 ("get-file")}
        {Lisp-Entry "read-content" #f 180 18 180 30 ("read-current-file-content" "get-entry" "locate-file" "get-file" "Unzip-File" "new" "unzip" "with-closed")}
        {Lisp-Entry "load-lines" #f 186 11 186 21 ("read-content" "JzLoadLines" "load-lines" "'load-lines" "unimplemented" "rest")}
        {Lisp-Entry "save-lines" #f 197 11 197 21 ("not" "when" "write-file" "read-current-file-content" "content" "set!" "save-lines-to" "begin" "=" "if" "size" "filename" "iterate-files" "Unzip-File" "unzip" "Zip-File" "new" "zip" "with-closed" "dest" "function" "fail-safe-save" "saved?" "get-entry" "entry" "get-file" "file" "let" "rest" "lines")}
        {Lisp-Entry "save-lines-to" #f 217 11 217 24 ("1" "+" "0" "naturals" "2" "crlf" "limit" "/=" "when" "Ansi-String" "coerce" "write-in-file-in-zip" "n" "line" "for-each" "function" "with-new-file-in-zip" "save-lines-to" "'save-lines-to" "unimplemented" "entry" "zip" "lines")}
        {Lisp-Entry "foldable?" #f 237 11 237 20 ()}
        {Lisp-Entry "fold-object" #f 242 11 242 22 ("get-entry" "get-file" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}}}})
"Zipped-Entry"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "entry" "Zipped-Entry.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.entry.Zipped-Entry" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Zipped-Entry" #f 46 7 46 19 ("Catalog-Entry")
        {Lisp-Entry "zipped" #f 49 8 49 14 ()}
        {Lisp-Entry "definitions" #f 50 8 50 19 ()}
        {Lisp-Entry "category-name" #f 51 8 51 21 ()}
        {Lisp-Entry "construct-literal" #f 55 16 55 33 ("self" "new" "definitions" "zipped" "context")}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("set-root-definition" "self" "set-parent" "definition" "function" "for-each" "get-entry" "extract-base" "category-name~self" "definitions~self" "zipped~self" "set!" "nextmethod" "definitions" "zipped")}
        {Lisp-Entry "set-file-definition" #f 70 11 70 30 ("definitions" "set-file-definition" "definition" "function" "for-each" "nextmethod" "def")}
        {Lisp-Entry "print-catalog" #f 77 18 77 31 ("definitions" "1" "+" "print-catalog" "definition" "function" "for-each" "zipped" "self" "class-of" "type-name" "identifier-name" "2" "*" "format" "printer" "level")}
        {Lisp-Entry "get-moniker" #f 93 11 93 22 ("zipped")}
        {Lisp-Entry "get-category-name" #f 97 11 97 28 ("category-name")}
        {Lisp-Entry "update-indexes" #f 106 11 106 25 ("definitions" "update-indexes" "definition" "function" "for-each" "references-index" "definitions-index")}
        {Lisp-Entry "edit" #f 117 11 117 15 ("zipped" "edit-document" "get-application" "appl" "let" "rest")}}}})
"_access"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "_access.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access" #f 37 9 37 39 ("jazz")}})
"_activity"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "activity" "_activity.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.activity" #f 37 9 37 25 ("jazz")
      {Lisp-Entry "Manager" #f 48 12 48 19 ()}
      {Lisp-Entry "get-activity-manager" #f 52 20 52 40 ("new-manager" "set!" "Manager" "unless" "visible?" "visible?:")}
      {Lisp-Entry "new-manager" #f 58 13 58 24 ("visible?:" "manager-position" "position:" "Activity-Manager" "new" "visible?")}
      {Lisp-Entry "manager-position" #f 63 13 63 29 ("acquire" "79" "get-height" "543" "get-width" "-" "Point" "new" "pos" "get-size" "size" "get-toplevel" "toplevel" "get-desktop" "desktop" "let*")}
      {Lisp-Entry "destroy-manager" #f 71 13 71 28 ("Manager" "set!")}}})
"_ado"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "_ado.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "trace-ado?" #f 50 13 50 23 ("debug.trace" "'debug.trace" "get-setting")}
      {Lisp-Entry "trace-ado" #f 54 13 54 22 ("terminal" "trace-ado?" "when" "cmd")}}})
"_application"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "application" "_application.jazz"} 1226584785
    {Lisp-Entry "jazz.system.application" #f 37 9 37 32 ("jazz")}})
"_base"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "_base.scm"} 1226584773
    {Lisp-Entry "core.base" #f 37 8 37 17 ()}})
"_build"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "build" "_build.scm"} 1226584774
    {Lisp-Entry "jazz.build" #f 38 8 38 18 ()
      {Lisp-Entry "expand" #f 49 9 49 15 ("current-output-port" "expand-to-port" "library-name")}
      {Lisp-Entry "expand-source" #f 53 9 53 22 ("jazz.present-source" "pretty-print" "read-source?:" "parse-read?:" "jazz.read-toplevel-form" "syntax" "jazz.resource-pathname" "source" "jazz.find-module-src" "src" "let*" "library-name")}
      {Lisp-Entry "expand-syntax" #f 62 9 62 22 ("%%source-code" "%%cdr" "jazz.expand-library" "library" "'library" "case" "jazz.requested-module-resource" "jazz.requested-module-name" "parameterize" "jazz.present-source" "pretty-print" "read-source?:" "parse-read?:" "jazz.read-toplevel-form" "syntax" "jazz.resource-pathname" "source" "jazz.find-module-src" "src" "let*" "library-name")}
      {Lisp-Entry "expand-to-file" #f 75 9 75 23 ("expand-to-port" "port" "lambda" "call-with-output-file" "car" "null?" "if" "filename" "let" "rest" "library-name")}
      {Lisp-Entry "expand-to-port" #f 82 9 82 23 ("jazz.expand-library" "library" "jazz.expand-module" "module" "case" "jazz.requested-module-resource" "jazz.requested-module-name" "parameterize" "pretty-print" "cdr" "rest" "car" "kind" "parse-read?:" "jazz.read-toplevel-form" "form" "jazz.resource-pathname" "source" "jazz.find-module-src" "src" "let*" "port" "library-name")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "module" "build" "_build.scm"} 1227043164
    {Lisp-Entry "core.module.build" #f 38 8 38 25 ("%%get-library-declaration-exports" "%%get-library-invoice-phase" "%%get-declaration-reference-name" "name" "%%get-library-invoice-library" "reference" "export" "%%get-library-declaration-requires" "begin" "%%get-module-declaration-requires" "jazz.parse-require" "require" "for-each" "jazz.Module-Declaration" "jazz.is?" "if" "jazz.locate-toplevel-declaration" "declaration" "phase" "feature-requirement" "iter" "let" "proc" "module-name" "lambda" "jazz.for-each-submodule" "set!")
      {Lisp-Entry "jazz.compile-module-internal" #f 50 9 50 37 ("force?:" "ld-options:" "cc-options:" "options:" "jazz.compile-source" "jazz.requested-module-resource" "jazz.requested-module-name" "parameterize" "bin-uptodate?" "bin" "src" "lambda" "jazz.with-module-src/bin" "force?" "ld-options" "cc-options" "options" "#!key" "module-name")}
      {Lisp-Entry "jazz.compile-source" #f 58 9 58 28 ("newline" "10" "*" "truncate" "/" "-" "delta" "after" "current-time" "time->seconds" "before" "jazz.compile-verbose?" "jazz.kernel-version" "%%make-manifest" "jazz.save-manifest" "jazz.resource-digest" "manifest-digest" "jazz.Manifest-Extension" "%%make-resource" "manifest-resource" "ld-options:" "cc-options:" "options:" "output:" "compile-file" "'compile" "jazz.walk-for" "parameterize" "lambda" "%%resource-extension" "jazz.with-extension-reader" "jazz.create-directories" "force-output" "display" "jazz.copy-package" "build-package" "compile" "define" "jazz.resource-build-dir" "bindir" "jazz.resource-pathname" "pathname" "%%resource-path" "path" "%%resource-package" "package" "%%not" "if" "jazz.compile-options" "or" "let" "force?" "ld-options" "cc-options" "options" "#!key" "manifest-name" "bin-uptodate?" "bin" "src")}
      {Lisp-Entry "jazz.copy-package" #f 94 9 94 26 ("%%repository-packages-table" "%%table-set!" "jazz.load-package" "let" "jazz.file-copy" "jazz.file-delete" "jazz.create-directories" "begin" "jazz.repository-find-package" "jazz.file-modification-time" ">=" "jazz.file-exists?" "and" "if" "jazz.Install-Repository" "dst" "%%package-repository" "jazz.repository-pathname" "src" "jazz.Package-Extension" "path" "%%symbol->string" "%%string-append" "dir" "%%package-name" "name" "let*" "package")}
      {Lisp-Entry "jazz.build-module-internal" #f 119 9 119 35 ("jazz.compile-module" "phase" "declaration" "lambda" "jazz.for-each-submodule" "module-name")}}})
"_builder"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "_builder.jazz"} 1226584774
    {Lisp-Entry "jazz.builder" #f 37 9 37 21 ("jazz")}})
"_c"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "_c.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c" #f 37 9 37 24 ("jazz")}})
"_cairo"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "cairo" "_cairo.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.cairo" #f 37 9 37 28 ("cairo_format_t" "cairo_matrix_t*" "cairo_hint_metrics_t" "cairo_hint_style_t" "cairo_subpixel_order_t" "cairo_antialias_t" "cairo_font_options_t*" "cairo_font_weight_t" "cairo_font_slant_t" "char-string" "cairo_text_extents_t*" "int" "cairo_glyph_t*" "cairo_font_extents_t*" "cairo_scaled_font_t*" "cairo_font_face_t*" "UTF-8-string" "double*" "cairo_pattern_t*" "double" "cairo_t*" "cairo_surface_t*" "else" "x11" "windows" "c-include" "carbon" "cond-expand" "jazz")
      {Lisp-Entry "M_PI" #f 67 12 67 16 ("3.14159265358979323846")}
      {Lisp-Entry "cairo_t" #f 69 8 69 15 ("native")}
      {Lisp-Entry "cairo_t*" #f 70 8 70 16 ("cairo_t*" "cairo_t" "pointer")}
      {Lisp-Entry "cairo_pattern_t" #f 71 8 71 23 ("native")}
      {Lisp-Entry "cairo_pattern_t*" #f 72 8 72 24 ("cairo_pattern_t*" "cairo_pattern_t" "pointer")}
      {Lisp-Entry "cairo_content_t" #f 75 15 75 30 ("#x3000" "CAIRO_CONTENT_COLOR_ALPHA" "#x2000" "CAIRO_CONTENT_ALPHA" "#x1000" "CAIRO_CONTENT_COLOR")}
      {Lisp-Entry "cairo_content_t" #f 80 8 80 23 ("int")}
      {Lisp-Entry "cairo_format_t" #f 83 15 83 29 ("3" "CAIRO_FORMAT_A1" "2" "CAIRO_FORMAT_A8" "1" "CAIRO_FORMAT_RGB24" "0" "CAIRO_FORMAT_ARGB32")}
      {Lisp-Entry "cairo_format_t" #f 89 8 89 22 ("int")}
      {Lisp-Entry "cairo_font_slant_t" #f 92 15 92 33 ("2" "CAIRO_FONT_SLANT_OBLIQUE" "1" "CAIRO_FONT_SLANT_ITALIC" "0" "CAIRO_FONT_SLANT_NORMAL")}
      {Lisp-Entry "cairo_font_slant_t" #f 97 8 97 26 ("int")}
      {Lisp-Entry "cairo_font_weight_t" #f 100 15 100 34 ("1" "CAIRO_FONT_WEIGHT_BOLD" "0" "CAIRO_FONT_WEIGHT_NORMAL")}
      {Lisp-Entry "cairo_font_weight_t" #f 104 8 104 27 ("int")}
      {Lisp-Entry "cairo_status_t" #f 107 15 107 29 ("22" "CAIRO_STATUS_CLIP_NOT_REPRESENTABLE" "21" "CAIRO_STATUS_INVALID_INDEX" "20" "CAIRO_STATUS_INVALID_DSC_COMMENT" "19" "CAIRO_STATUS_INVALID_DASH" "18" "CAIRO_STATUS_FILE_NOT_FOUND" "17" "CAIRO_STATUS_INVALID_VISUAL" "16" "CAIRO_STATUS_INVALID_FORMAT" "15" "CAIRO_STATUS_INVALID_CONTENT" "14" "CAIRO_STATUS_PATTERN_TYPE_MISMATCH" "13" "CAIRO_STATUS_SURFACE_TYPE_MISMATCH" "12" "CAIRO_STATUS_SURFACE_FINISHED" "11" "CAIRO_STATUS_WRITE_ERROR" "10" "CAIRO_STATUS_READ_ERROR" "9" "CAIRO_STATUS_INVALID_PATH_DATA" "8" "CAIRO_STATUS_INVALID_STRING" "7" "CAIRO_STATUS_NULL_POINTER" "6" "CAIRO_STATUS_INVALID_STATUS" "5" "CAIRO_STATUS_INVALID_MATRIX" "4" "CAIRO_STATUS_NO_CURRENT_POINT" "3" "CAIRO_STATUS_INVALID_POP_GROUP" "2" "CAIRO_STATUS_INVALID_RESTORE" "1" "CAIRO_STATUS_NO_MEMORY" "0" "CAIRO_STATUS_SUCCESS")}
      {Lisp-Entry "cairo_status_t" #f 132 8 132 22 ("int")}
      {Lisp-Entry "cairo_font_extents_t" #f 135 13 135 33 ("max_y_advance" "max_x_advance" "height" "descent" "ascent" "double")}
      {Lisp-Entry "cairo_text_extents_t" #f 143 13 143 33 ("y_advance" "x_advance" "height" "width" "y_bearing" "x_bearing" "double")}
      {Lisp-Entry "cairo_matrix_t" #f 152 13 152 27 ("y0" "x0" "yy" "xy" "yx" "xx" "double")}
      {Lisp-Entry "cairo_glyph_t" #f 161 13 161 26 ("y" "x" "double" "index" "ulong")}
      {Lisp-Entry "cairo_current_point" #f 172 13 172 32 ("1" "0" "f64vector-ref" "fxfloor" "Point" "new" "2" "make-f64vector" "pt" "void" "F64PTR" "cairo_t*" "c-function" "fn" "let" "context")}
      {Lisp-Entry "cairo_device_to_user" #f 186 13 186 33 ("1" "0" "f64vector-ref" "fxfloor" "Point" "new" "get-v" "get-h" "cast" "f64vector" "vec" "void" "F64PTR" "cairo_t*" "c-function" "fn" "let" "pt" "context")}
      {Lisp-Entry "cairo_user_to_device" #f 194 13 194 33 ("1" "0" "f64vector-ref" "fxfloor" "Point" "new" "get-v" "get-h" "cast" "f64vector" "vec" "void" "F64PTR" "cairo_t*" "c-function" "fn" "let" "pt" "context")}
      {Lisp-Entry "glyph-array-make" #f 207 12 207 28 ("cairo_glyph_t*" "int" "c-function")}
      {Lisp-Entry "glyph-array-ref" #f 208 12 208 27 ("int" "cairo_glyph_t*" "c-function")}
      {Lisp-Entry "glyph-array-free" #f 209 12 209 28 ("void" "cairo_glyph_t*" "c-function")}
      {Lisp-Entry "cairo_surface_destroy" #f 217 32 217 53 ()}
      {Lisp-Entry "cairo_surface_status" #f 218 32 218 52 ()}
      {Lisp-Entry "cairo_surface_get_content" #f 219 32 219 57 ()}
      {Lisp-Entry "cairo_surface_finish" #f 220 32 220 52 ()}
      {Lisp-Entry "cairo_surface_flush" #f 221 32 221 51 ()}
      {Lisp-Entry "cairo_create" #f 229 32 229 44 ()}
      {Lisp-Entry "cairo_destroy" #f 230 32 230 45 ()}
      {Lisp-Entry "cairo_save" #f 231 32 231 42 ()}
      {Lisp-Entry "cairo_restore" #f 232 32 232 45 ()}
      {Lisp-Entry "cairo_status" #f 233 32 233 44 ()}
      {Lisp-Entry "cairo_clip" #f 234 32 234 42 ()}
      {Lisp-Entry "cairo_reset_clip" #f 235 32 235 48 ()}
      {Lisp-Entry "cairo_fill" #f 236 32 236 42 ()}
      {Lisp-Entry "cairo_fill_preserve" #f 237 32 237 51 ()}
      {Lisp-Entry "cairo_paint" #f 238 32 238 43 ()}
      {Lisp-Entry "cairo_stroke" #f 239 32 239 44 ()}
      {Lisp-Entry "cairo_stroke_preserve" #f 240 32 240 53 ()}
      {Lisp-Entry "cairo_move_to" #f 248 32 248 45 ()}
      {Lisp-Entry "cairo_line_to" #f 249 32 249 45 ()}
      {Lisp-Entry "cairo_rel_line_to" #f 250 32 250 49 ()}
      {Lisp-Entry "cairo_arc" #f 251 32 251 41 ()}
      {Lisp-Entry "cairo_rel_curve_to" #f 252 32 252 50 ()}
      {Lisp-Entry "cairo_rectangle" #f 253 32 253 47 ()}
      {Lisp-Entry "cairo_set_line_width" #f 254 32 254 52 ()}
      {Lisp-Entry "cairo_get_line_width" #f 255 32 255 52 ()}
      {Lisp-Entry "cairo_rel_move_to" #f 256 32 256 49 ()}
      {Lisp-Entry "cairo_close_path" #f 257 32 257 48 ()}
      {Lisp-Entry "cairo_set_source" #f 265 32 265 48 ()}
      {Lisp-Entry "cairo_set_source_surface" #f 266 32 266 56 ()}
      {Lisp-Entry "cairo_set_source_rgb" #f 267 32 267 52 ()}
      {Lisp-Entry "cairo_set_source_rgba" #f 268 32 268 53 ()}
      {Lisp-Entry "cairo_get_source" #f 269 32 269 48 ()}
      {Lisp-Entry "cairo_pattern_get_rgba" #f 270 32 270 54 ()}
      {Lisp-Entry "cairo_pattern_create_for_surface" #f 271 32 271 64 ()}
      {Lisp-Entry "cairo_pattern_create_linear" #f 272 32 272 59 ()}
      {Lisp-Entry "cairo_pattern_add_color_stop_rgb" #f 273 32 273 64 ()}
      {Lisp-Entry "cairo_pattern_add_color_stop_rgba" #f 274 32 274 65 ()}
      {Lisp-Entry "cairo_show_text" #f 282 32 282 47 ()}
      {Lisp-Entry "cairo_set_font_face" #f 283 32 283 51 ()}
      {Lisp-Entry "cairo_get_font_face" #f 284 32 284 51 ()}
      {Lisp-Entry "cairo_set_font_size" #f 285 32 285 51 ()}
      {Lisp-Entry "cairo_set_scaled_font" #f 286 32 286 53 ()}
      {Lisp-Entry "cairo_font_extents" #f 287 32 287 50 ()}
      {Lisp-Entry "cairo_glyph_extents" #f 288 32 288 51 ()}
      {Lisp-Entry "cairo_select_font_face" #f 289 32 289 54 ()}
      {Lisp-Entry "cairo_show_glyphs" #f 290 32 290 49 ()}
      {Lisp-Entry "cairo_text_extents" #f 291 32 291 50 ()}
      {Lisp-Entry "cairo_antialias_t" #f 299 15 299 32 ("3" "CAIRO_ANTIALIAS_SUBPIXEL" "2" "CAIRO_ANTIALIAS_GRAY" "1" "CAIRO_ANTIALIAS_NONE" "0" "CAIRO_ANTIALIAS_DEFAULT")}
      {Lisp-Entry "cairo_antialias_t" #f 305 8 305 25 ("int")}
      {Lisp-Entry "cairo_subpixel_order_t" #f 308 15 308 37 ("4" "CAIRO_SUBPIXEL_ORDER_VBGR" "3" "CAIRO_SUBPIXEL_ORDER_VRGB" "2" "CAIRO_SUBPIXEL_ORDER_BGR" "1" "CAIRO_SUBPIXEL_ORDER_RGB" "0" "CAIRO_SUBPIXEL_ORDER_DEFAULT")}
      {Lisp-Entry "cairo_subpixel_order_t" #f 315 8 315 30 ("int")}
      {Lisp-Entry "cairo_hint_style_t" #f 318 15 318 33 ("4" "CAIRO_HINT_STYLE_FULL" "3" "CAIRO_HINT_STYLE_MEDIUM" "2" "CAIRO_HINT_STYLE_SLIGHT" "1" "CAIRO_HINT_STYLE_NONE" "0" "CAIRO_HINT_STYLE_DEFAULT")}
      {Lisp-Entry "cairo_hint_style_t" #f 325 8 325 26 ("int")}
      {Lisp-Entry "cairo_hint_metrics_t" #f 328 15 328 35 ("2" "CAIRO_HINT_METRICS_ON" "1" "CAIRO_HINT_METRICS_OFF" "0" "CAIRO_HINT_METRICS_DEFAULT")}
      {Lisp-Entry "cairo_hint_metrics_t" #f 333 8 333 28 ("int")}
      {Lisp-Entry "cairo_font_options_t" #f 336 8 336 28 ("native")}
      {Lisp-Entry "cairo_font_options_t*" #f 337 8 337 29 ("cairo_font_options_t*" "cairo_font_options_t" "pointer")}
      {Lisp-Entry "cairo_font_options_create" #f 339 36 339 61 ()}
      {Lisp-Entry "cairo_font_options_destroy" #f 340 36 340 62 ()}
      {Lisp-Entry "cairo_font_options_get_antialias" #f 341 36 341 68 ()}
      {Lisp-Entry "cairo_font_options_set_antialias" #f 342 36 342 68 ()}
      {Lisp-Entry "cairo_font_options_get_subpixel_order" #f 343 36 343 73 ()}
      {Lisp-Entry "cairo_font_options_set_subpixel_order" #f 344 36 344 73 ()}
      {Lisp-Entry "cairo_font_options_get_hint_style" #f 345 36 345 69 ()}
      {Lisp-Entry "cairo_font_options_set_hint_style" #f 346 36 346 69 ()}
      {Lisp-Entry "cairo_font_options_get_hint_metrics" #f 347 36 347 71 ()}
      {Lisp-Entry "cairo_font_options_set_hint_metrics" #f 348 36 348 71 ()}
      {Lisp-Entry "cairo_scaled_font_t" #f 351 8 351 27 ("native")}
      {Lisp-Entry "cairo_scaled_font_t*" #f 352 8 352 28 ("cairo_scaled_font_t*" "cairo_scaled_font_t" "pointer")}
      {Lisp-Entry "cairo_scaled_font_create" #f 354 35 354 59 ()}
      {Lisp-Entry "cairo_scaled_font_destroy" #f 355 35 355 60 ()}
      {Lisp-Entry "cairo_translate" #f 363 32 363 47 ()}
      {Lisp-Entry "cairo_transform" #f 364 32 364 47 ()}
      {Lisp-Entry "cairo_set_matrix" #f 365 32 365 48 ()}
      {Lisp-Entry "cairo_get_matrix" #f 366 32 366 48 ()}
      {Lisp-Entry "cairo_matrix_init_identity" #f 367 32 367 58 ()}
      {Lisp-Entry "cairo_matrix_init_scale" #f 368 32 368 55 ()}
      {Lisp-Entry "cairo_identity_matrix" #f 369 32 369 53 ()}
      {Lisp-Entry "cairo_scale" #f 370 32 370 43 ()}
      {Lisp-Entry "cairo_device_to_user_distance" #f 371 32 371 61 ()}
      {Lisp-Entry "cairo_image_surface_create_from_png" #f 379 32 379 67 ()}
      {Lisp-Entry "cairo_image_surface_create" #f 380 32 380 58 ()}
      {Lisp-Entry "cairo_pattern_destroy" #f 381 32 381 53 ()}
      {Lisp-Entry "cairo_surface_write_to_png" #f 382 32 382 58 ()}
      {Lisp-Entry "cairo_surface_show_page" #f 385 34 385 57 ()}
      {Lisp-Entry "cairo_set_alternate" #f 388 12 388 31 ("void" "cairo_t*" "c-function")}
      {Lisp-Entry "cairo_set_solid" #f 395 12 395 27 ("void" "cairo_t*" "c-function")}
      {Lisp-Entry "cairo_get_clipper" #f 400 13 400 30 ("Rect" "new" "3" "bottom" "2" "right" "1" "top" "0" "f64vector-ref" "left" "4" "make-f64vector" "vec" "void" "F64PTR" "cairo_t*" "c-function" "fn" "let" "context")}}})
"_carbon"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "carbon" "_carbon.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.carbon" #f 37 9 37 29 ("TransformProcessType" "RgnHandle" "HIViewFeatures" "HIViewZOrderOp" "float" "Bool" "HIViewRef" "EventRef" "short" "WindowRef" "jazz")
      {Lisp-Entry "noErr" #f 52 12 52 17 ("0")}
      {Lisp-Entry "kDocumentWindowClass" #f 60 12 60 32 ("6")}
      {Lisp-Entry "kPlainWindowClass" #f 61 12 61 29 ("13")}
      {Lisp-Entry "kWindowNoAttributes" #f 68 12 68 31 ("0")}
      {Lisp-Entry "kWindowCloseBoxAttribute" #f 69 12 69 36 ("0" "1" "arithmetic-shift")}
      {Lisp-Entry "kWindowHorizontalZoomAttribute" #f 70 12 70 42 ("1" "arithmetic-shift")}
      {Lisp-Entry "kWindowVerticalZoomAttribute" #f 71 12 71 40 ("2" "1" "arithmetic-shift")}
      {Lisp-Entry "kWindowFullZoomAttribute" #f 72 12 72 36 ("kWindowHorizontalZoomAttribute" "kWindowVerticalZoomAttribute" "bitwise-ior")}
      {Lisp-Entry "kWindowCollapseBoxAttribute" #f 74 12 74 39 ("3" "1" "arithmetic-shift")}
      {Lisp-Entry "kWindowResizableAttribute" #f 75 12 75 37 ("4" "1" "arithmetic-shift")}
      {Lisp-Entry "kWindowStandardDocumentAttributes" #f 76 12 76 45 ("kWindowResizableAttribute" "kWindowCollapseBoxAttribute" "kWindowFullZoomAttribute" "kWindowCloseBoxAttribute" "bitwise-ior")}
      {Lisp-Entry "kWindowCompositingAttribute" #f 80 12 80 39 ("19" "1" "arithmetic-shift")}
      {Lisp-Entry "kWindowStandardHandlerAttribute" #f 81 12 81 43 ("25" "1" "arithmetic-shift")}
      {Lisp-Entry "kWindowLiveResizeAttribute" #f 82 12 82 38 ("28" "1" "arithmetic-shift")}
      {Lisp-Entry "kEventClassWindow" #f 89 12 89 29 ("OSType" "c-function")}
      {Lisp-Entry "kEventClassMouse" #f 90 12 90 28 ("OSType" "c-function")}
      {Lisp-Entry "kEventClassKeyboard" #f 91 12 91 31 ("OSType" "c-function")}
      {Lisp-Entry "kEventControlDraw" #f 99 12 99 29 ("4")}
      {Lisp-Entry "kEventControlBoundsChanged" #f 100 12 100 38 ("154")}
      {Lisp-Entry "kEventMouseDown" #f 108 12 108 27 ("1")}
      {Lisp-Entry "kEventMouseUp" #f 109 12 109 25 ("2")}
      {Lisp-Entry "kEventMouseMoved" #f 110 12 110 28 ("5")}
      {Lisp-Entry "kEventRawKeyDown" #f 112 12 112 28 ("1")}
      {Lisp-Entry "kEventWindowUpdate" #f 114 12 114 30 ("1")}
      {Lisp-Entry "kEventWindowShowing" #f 115 12 115 31 ("22")}
      {Lisp-Entry "kEventWindowClose" #f 116 12 116 29 ("72")}
      {Lisp-Entry "kEventWindowBoundsChanged" #f 117 12 117 37 ("27")}
      {Lisp-Entry "kWindowTitleBarRgn" #f 125 12 125 30 ("0")}
      {Lisp-Entry "kWindowStructureRgn" #f 126 12 126 31 ("32")}
      {Lisp-Entry "kWindowContentRgn" #f 127 12 127 29 ("33")}
      {Lisp-Entry "kHIViewClassID" #f 135 12 135 26 ("CFStringRef" "c-function")}
      {Lisp-Entry "activeFlagBit" #f 143 12 143 25 ("0")}
      {Lisp-Entry "eventNotHandledErr" #f 151 12 151 30 ("-9874")}
      {Lisp-Entry "cmdKeyBit" #f 159 12 159 21 ("8")}
      {Lisp-Entry "shiftKeyBit" #f 160 12 160 23 ("9")}
      {Lisp-Entry "optionKeyBit" #f 161 12 161 24 ("11")}
      {Lisp-Entry "controlKeyBit" #f 162 12 162 25 ("12")}
      {Lisp-Entry "kHIViewZOrderAbove" #f 170 12 170 30 ("1")}
      {Lisp-Entry "kHIViewZOrderBelow" #f 171 12 171 30 ("2")}
      {Lisp-Entry "kHIViewFeatureAllowsSubviews" #f 179 12 179 40 ("2")}
      {Lisp-Entry "SetUserFocusWindow" #f 187 22 187 40 ()}
      {Lisp-Entry "ShowWindow" #f 188 18 188 28 ()}
      {Lisp-Entry "HideWindow" #f 189 18 189 28 ()}
      {Lisp-Entry "MoveWindowStructure" #f 190 22 190 41 ()}
      {Lisp-Entry "RunApplicationEventLoop" #f 191 18 191 41 ()}
      {Lisp-Entry "QuitApplicationEventLoop" #f 192 18 192 42 ()}
      {Lisp-Entry "GetEventKind" #f 193 24 193 36 ()}
      {Lisp-Entry "GetEventClass" #f 194 20 194 33 ()}
      {Lisp-Entry "HIViewGetRoot" #f 195 23 195 36 ()}
      {Lisp-Entry "HIViewAddSubview" #f 196 23 196 39 ()}
      {Lisp-Entry "HIViewSetVisible" #f 197 23 197 39 ()}
      {Lisp-Entry "HIViewSetNeedsDisplay" #f 198 23 198 44 ()}
      {Lisp-Entry "HIViewPlaceInSuperviewAt" #f 199 23 199 47 ()}
      {Lisp-Entry "MoveWindowStructure" #f 200 23 200 42 ()}
      {Lisp-Entry "GetCurrentEventKeyModifiers" #f 201 23 201 50 ()}
      {Lisp-Entry "HIViewGetSuperview" #f 202 23 202 41 ()}
      {Lisp-Entry "HIViewRemoveFromSuperview" #f 203 23 203 48 ()}
      {Lisp-Entry "HIViewGetFirstSubview" #f 204 23 204 44 ()}
      {Lisp-Entry "HIViewSetZOrder" #f 205 23 205 38 ()}
      {Lisp-Entry "BringToFront" #f 206 23 206 35 ()}
      {Lisp-Entry "HIViewGetWindow" #f 207 23 207 38 ()}
      {Lisp-Entry "HIViewSetActivated" #f 208 23 208 41 ()}
      {Lisp-Entry "HIViewGetFirstSubview" #f 209 23 209 44 ()}
      {Lisp-Entry "HIViewChangeFeatures" #f 210 23 210 43 ()}
      {Lisp-Entry "HIViewIsValid" #f 211 23 211 36 ()}
      {Lisp-Entry "ActivateWindow" #f 212 23 212 37 ()}
      {Lisp-Entry "BringToFront" #f 213 23 213 35 ()}
      {Lisp-Entry "SendBehind" #f 214 23 214 33 ()}
      {Lisp-Entry "SelectWindow" #f 215 23 215 35 ()}
      {Lisp-Entry "NewRgn" #f 216 23 216 29 ()}
      {Lisp-Entry "DisposeRgn" #f 217 23 217 33 ()}
      {Lisp-Entry "OffsetRgn" #f 218 23 218 32 ()}
      {Lisp-Entry "UnionRgn" #f 219 23 219 31 ()}
      {Lisp-Entry "HIViewRender" #f 220 23 220 35 ()}
      {Lisp-Entry "HIWindowFlush" #f 221 23 221 36 ()}
      {Lisp-Entry "getpid" #f 222 23 222 29 ()}
      {Lisp-Entry "HIViewSetNeedsDisplayInRect" #f 225 12 225 39 ("void" "float" "HIViewRef" "c-function")}
      {Lisp-Entry "GetRegionBounds" #f 231 13 231 28 ("Rect" "new" "Rect-free" "Rect-right-ref" "r" "Rect-bottom-ref" "b" "Rect-top-ref" "t" "Rect-left-ref" "l" "Rect*" "RgnHandle" "c-function" "rect" "let*" "region")}
      {Lisp-Entry "RectRgn" #f 244 12 244 19 ("RgnHandle" "short" "c-function")}
      {Lisp-Entry "RectInRgn" #f 252 12 252 21 ("Bool" "RgnHandle" "short" "c-function")}
      {Lisp-Entry "makeFrontProcess" #f 258 12 258 28 ("void" "c-function")}
      {Lisp-Entry "HIWindowGetAvailablePositioningBounds" #f 264 13 264 50 ("values" "CGRect-free" "CGSize-height-ref" "h" "CGRect-size-ref" "CGSize-width-ref" "w" "CGPoint-y-ref" "y" "CGRect-origin-ref" "CGPoint-x-ref" "x" "CGRect*" "c-function" "bounds" "let*")}
      {Lisp-Entry "convertPointToGlobal" #f 277 13 277 33 ("values" "CGPoint-free" "CGPoint-y-ref" "CGPoint-x-ref" "exact->inexact" "CGPoint*" "float" "WindowRef" "c-function" "pt" "let*" "y" "x" "sourceWindow")}
      {Lisp-Entry "convertCoordinates" #f 291 13 291 31 ("values" "CGPoint-free" "CGPoint-y-ref" "CGPoint-x-ref" "CGPoint*" "float" "HIViewRef" "c-function" "pt" "let*" "y" "x" "destView" "sourceView")}
      {Lisp-Entry "eventControlRgn" #f 304 12 304 27 ("RgnHandle" "EventRef" "c-function")}
      {Lisp-Entry "eventWindowRef" #f 311 12 311 26 ("WindowRef" "EventRef" "c-function")}
      {Lisp-Entry "eventKeyCode" #f 318 12 318 24 ("UInt32" "EventRef" "c-function")}
      {Lisp-Entry "eventKeyChar" #f 325 12 325 24 ("char" "EventRef" "c-function")}
      {Lisp-Entry "eventKeyUnicode" #f 332 12 332 27 ("UniChar" "EventRef" "c-function")}
      {Lisp-Entry "eventKeyboardType" #f 339 12 339 29 ("UInt32" "EventRef" "c-function")}
      {Lisp-Entry "eventKeyMods" #f 346 12 346 24 ("UInt32" "EventRef" "c-function")}
      {Lisp-Entry "unmodifiedKey" #f 353 12 353 25 ("UniChar" "UInt32" "UInt16" "c-function")}
      {Lisp-Entry "eventMouseLocation" #f 366 13 366 31 ("values" "CGPoint-free" "CGPoint-y-ref" "y" "CGPoint-x-ref" "x" "CGPoint*" "EventRef" "c-function" "pt" "let*" "ev")}
      {Lisp-Entry "HIViewForPoint" #f 377 12 377 26 ("HIViewRef" "float" "WindowRef" "c-function")}
      {Lisp-Entry "HIViewGetContent" #f 385 12 385 28 ("HIViewRef" "WindowRef" "c-function")}
      {Lisp-Entry "HIViewSetFrame" #f 392 12 392 26 ("OSStatus" "double" "HIViewRef" "c-function")}
      {Lisp-Entry "WindowSetBounds" #f 398 12 398 27 ("OSStatus" "short" "WindowRegionCode" "WindowRef" "c-function")}
      {Lisp-Entry "WindowGetBounds" #f 404 13 404 28 ("values" "Rect-free" "Rect-bottom-ref" "height" "Rect-right-ref" "-" "width" "Rect-top-ref" "top" "Rect-left-ref" "left" "Rect*" "WindowRegionCode" "WindowRef" "c-function" "carbon-rect" "let*" "region" "window")}
      {Lisp-Entry "HIViewGetFrame" #f 418 13 418 27 ("values" "CGRect-free" "CGSize-height-ref" "height" "CGRect-size-ref" "CGSize-width-ref" "width" "CGPoint-y-ref" "top" "CGRect-origin-ref" "CGPoint-x-ref" "left" "CGRect*" "HIViewRef" "c-function" "carbon-rect" "let*" "view")}
      {Lisp-Entry "HIViewGetBounds" #f 432 13 432 28 ("values" "CGRect-free" "CGSize-height-ref" "height" "CGRect-size-ref" "CGSize-width-ref" "width" "CGPoint-y-ref" "top" "CGRect-origin-ref" "CGPoint-x-ref" "left" "CGRect*" "HIViewRef" "c-function" "carbon-rect" "let*" "view")}
      {Lisp-Entry "void*->HIViewRef" #f 446 12 446 28 ("HIViewRef" "void*" "c-function")}
      {Lisp-Entry "TransformProcessType" #f 451 12 451 32 ("OSStatus" "c-function")}
      {Lisp-Entry "CreateNewWindow" #f 457 12 457 27 ("WindowRef" "short" "WindowAttributes" "WindowClass" "c-function")}
      {Lisp-Entry "HIViewCreate" #f 469 12 469 24 ("HIViewRef" "c-function")}
      {Lisp-Entry "EventCGContext" #f 476 12 476 26 ("CGContextRef" "EventRef" "c-function")}
      {Lisp-Entry "process-window-message" #f 482 12 482 34 ()}
      {Lisp-Entry "process-control-message" #f 485 12 485 35 ()}
      {Lisp-Entry "set-process-window-message" #f 488 20 488 46 ("process-window-message" "set!" "proc")}
      {Lisp-Entry "set-process-control-message" #f 492 20 492 47 ("process-control-message" "set!" "proc")}
      {Lisp-Entry "call-process-window-message" #f 496 15 496 42 ("userdata" "theEvent" "myHandler" "process-window-message" "OSStatus" "void*" "EventRef" "EventHandlerCallRef")}
      {Lisp-Entry "call-process-control-message" #f 500 15 500 43 ("userdata" "theEvent" "myHandler" "process-control-message" "OSStatus" "void*" "EventRef" "EventHandlerCallRef")}
      {Lisp-Entry "InstallControlEventHandler" #f 504 12 504 38 ("OSStatus" "ControlRef" "c-function")}
      {Lisp-Entry "InstallWindowEventHandler" #f 516 12 516 37 ("OSStatus" "WindowRef" "c-function")}
      {Lisp-Entry "DestroyWindow" #f 530 12 530 25 ("void" "WindowRef" "c-function")}
      {Lisp-Entry "DestroyView" #f 535 12 535 23 ("void" "HIViewRef" "c-function")}
      {Lisp-Entry "relinquish-process" #f 545 13 545 31 ()}
      {Lisp-Entry "GetCurrentProcessId" #f 549 20 549 39 ("getpid")}
      {Lisp-Entry "system-message" #f 558 13 558 27 ("pretty-print" "rest" "text")}}})
"_catalog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "_catalog.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog" #f 37 9 37 21 ("jazz")}})
"_class"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "_class.scm"} 1226584773
    {Lisp-Entry "core.class" #f 37 8 37 18 ()}})
"_clike"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "clike" "_clike.jazz"} 1226584778
    {Lisp-Entry "jazz.language.clike" #f 37 9 37 28 ("jazz")}})
"_clipboard"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "clipboard" "_clipboard.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.clipboard" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "jazz-formatted-text" #f 54 12 54 31 ()}
      {Lisp-Entry "jazz-parcels" #f 57 12 57 24 ()}
      {Lisp-Entry "prefixed-format" #f 61 13 61 28 ("get-application" "clipboard-prefix" "append" "format")}
      {Lisp-Entry "register-jazz-clipboard-formats" #f 67 20 67 51 ("jazz-parcels" "'jazz-parcels" "prefixed-format" "jazz-formatted-text" "'jazz-formatted-text" "register-clipboard-format")}
      {Lisp-Entry "get-jazz-parcels" #f 73 20 73 36 ("format:" "get-clipboard-text" "read-string-element" "jazz-parcels" "'jazz-parcels" "clipboard-format-available?" "when")}
      {Lisp-Entry "Clipboard-Parcel" #f 83 7 83 23 ("Object")
        {Lisp-Entry "process-id" #f 86 8 86 18 ()}
        {Lisp-Entry "object-id" #f 87 8 87 17 ()}
        {Lisp-Entry "content" #f 88 8 88 15 ()}
        {Lisp-Entry "initialize" #f 91 11 91 21 ("content~self" "object-id~self" "process-id~self" "set!" "nextmethod" "content" "object-id" "process-id")}
        {Lisp-Entry "get-process-id" #f 103 18 103 32 ("process-id")}
        {Lisp-Entry "get-object-id" #f 107 18 107 31 ("object-id")}
        {Lisp-Entry "get-content" #f 111 18 111 29 ("content")}}}})
"_com"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "_com.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.comold" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "com-create" #f 40 20 40 30 ("com-class")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "comlib" "_com.jazz"} 1226584783
    {Lisp-Entry "COM" #f 37 9 37 12 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "com" "_com.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows.com" #f 37 9 37 34 ("DWORD*" "BSTR*" "GUID*" "IUnknown**" "out" "GUID" "in" "jazz")
      {Lisp-Entry "initialize-com" #f 53 12 53 26 ("set!" "COINIT_APARTMENTTHREADED" "CoInitializeEx" "LoadLibrary" "unless" "function" "initialized?" "let")}
      {Lisp-Entry "COINIT_APARTMENTTHREADED" #f 62 12 62 36 ("2")}
      {Lisp-Entry "CLSCTX_SERVER" #f 63 12 63 25 ("16" "4" "1" "+")}
      {Lisp-Entry "CoInitializeEx" #f 66 13 66 27 ("validate-hresult" "HRESULT" "DWORD" "VOID*" "c-function" "proc" "let" "flags" "n/a")}
      {Lisp-Entry "S_OK" #f 76 12 76 16 ("0")}
      {Lisp-Entry "S_FALSE" #f 79 12 79 19 ("1")}
      {Lisp-Entry "COM-Exception" #f 83 7 83 20 ("Exception")
        {Lisp-Entry "code" #f 86 8 86 12 ()}
        {Lisp-Entry "message" #f 87 8 87 15 ()}
        {Lisp-Entry "initialize" #f 90 11 90 21 ("message~self" "code~self" "set!" "message" "code")}
        {Lisp-Entry "print" #f 95 11 95 16 ("message" "code" "format" "function" "self" "print-unreadable" "readably" "printer")}
        {Lisp-Entry "get-code" #f 101 11 101 19 ("code")}
        {Lisp-Entry "get-message" #f 105 11 105 22 ("code" "format" "message" "either")}}
      {Lisp-Entry "HRESULT" #f 109 8 109 15 ("unsigned-long" "native")}
      {Lisp-Entry "validate-hresult" #f 112 13 112 29 ("COM-Exception" "new" "throw" "else" "#x800a0d5d" "#x80070057" "#x800401f0" "#x80040154" "error" "#x80004002" "1" "0" "case" "hresult")}
      {Lisp-Entry "validate-hresult2" #f 130 13 130 30 ("validate-hresult" "COM-Exception" "new" "throw" "if" "extract-errorinfo-message" "message" "let" "else" "1" "0" "case" "refiid" "iunknown" "hresult")}
      {Lisp-Entry "extract-errorinfo-message" #f 141 13 141 38 ("CoRelease" "IErrorInfo$GetDescription" "message" "GetErrorInfo" "ierror" "let" "ISupportErrorInfo$InterfaceSupportsErrorInfo" "prog1" "S_OK" "=" "when" "ISupportErrorInfo" "com-interface-guid" "CoQueryNoValidate" "isupport" "result" "receive" "refiid" "iunknown" "hresult")}
      {Lisp-Entry "BSTR" #f 160 8 160 12 ("wchar_t" "native" "pointer")}
      {Lisp-Entry "BSTR*" #f 161 8 161 13 ("BSTR" "pointer")}
      {Lisp-Entry "BSTR*-make" #f 164 12 164 22 ("BSTR*" "c-function")}
      {Lisp-Entry "BSTR*-ref" #f 169 12 169 21 ("BSTR-decode" "lambda" "BSTR" "BSTR*" "c-function" "ref" "let")}
      {Lisp-Entry "BSTR*-free" #f 175 12 175 22 ("void" "BSTR*" "c-function")}
      {Lisp-Entry "BSTR*-set!" #f 180 12 180 22 ("void" "BSTR" "BSTR*" "c-function")}
      {Lisp-Entry "BSTR*-deref" #f 186 13 186 24 ("BSTR-decode" "BSTR*-free" "BSTR*-ref" "bstr" "let" "bstr*")}
      {Lisp-Entry "BSTR*-enref" #f 192 13 192 24 ("BSTR-encode" "BSTR*-set!" "BSTR*-make" "ptr" "let" "bstr")}
      {Lisp-Entry "BSTR-free" #f 200 12 200 21 ("bstr" "lambda" "void" "BSTR" "c-function" "SysFreeString" "let")}
      {Lisp-Entry "BSTR-ref" #f 206 12 206 20 ("bstr" "lambda" "wchar_t-string" "BSTR" "c-function" "cast" "let")}
      {Lisp-Entry "BSTR-encode" #f 212 12 212 23 ("str" "lambda" "BSTR" "wchar_t-string" "c-function" "SysAllocString" "let")}
      {Lisp-Entry "BSTR-decode" #f 218 13 218 24 ("BSTR-free" "BSTR-ref" "str" "let" "bstr")}
      {Lisp-Entry "zero-fill" #f 229 13 229 22 ("-" "make-string" "string-append" ">" "if" "string-length" "len" "let" "n" "str")}
      {Lisp-Entry "GUID" #f 236 13 236 17 ("8" "Data4" "byte" "Data3" "Data2" "WORD" "Data1" "DWORD")}
      {Lisp-Entry "GUID-set!" #f 243 13 243 22 ("34" "32" "30" "28" "26" "24" "21" "19" "map" "naturals" "byte*-set!" "byte" "n" "for-each" "2" "+" "offset" "lambda" "string->byte" "GUID-Data4-ref" "data4+" "let" "18" "14" "GUID-Data3-set!" "13" "9" "GUID-Data2-set!" "16" "8" "0" "substring" "string->number" "GUID-Data1-set!" "str" "guid")}
      {Lisp-Entry "GUID-ref" #f 255 13 255 21 ("naturals" "map" "1" "0" "GUID-Data3-ref" "4" "GUID-Data2-ref" "8" "GUID-Data1-ref" "string-append" "apply" "2" "byte*-ref" "proc4" "GUID-Data4-ref" "data4+" "16" "number->string" "zero-fill" "n" "i" "lambda" "proc" "let*" "guid")}
      {Lisp-Entry "GUID-encode" #f 268 13 268 24 ("GUID-set!" "GUID-make" "guid" "let" "str")}
      {Lisp-Entry "GUID-decode" #f 274 13 274 24 ("GUID-free" "GUID-ref" "str" "let" "guid")}
      {Lisp-Entry "INT" #f 285 8 285 11 ("int" "native")}
      {Lisp-Entry "INT*" #f 286 8 286 12 ("INT" "pointer")}
      {Lisp-Entry "INT*-make" #f 289 12 289 21 ("INT*" "c-function")}
      {Lisp-Entry "INT*-free" #f 294 12 294 21 ("void" "INT*" "c-function")}
      {Lisp-Entry "INT*-ref" #f 299 12 299 20 ("INT" "INT*" "c-function")}
      {Lisp-Entry "INT*-set!" #f 304 12 304 21 ("void" "INT" "INT*" "c-function")}
      {Lisp-Entry "INT-enref" #f 309 13 309 22 ("INT*-set!" "INT*-make" "ptr" "let" "int")}
      {Lisp-Entry "INT-deref" #f 315 13 315 22 ("INT*-free" "INT*-ref" "int" "let" "int*")}
      {Lisp-Entry "LONG" #f 326 8 326 12 ("long" "native")}
      {Lisp-Entry "LONG*" #f 327 8 327 13 ("LONG" "pointer")}
      {Lisp-Entry "LONG*-make" #f 330 12 330 22 ("LONG*" "c-function")}
      {Lisp-Entry "LONG*-free" #f 335 12 335 22 ("void" "LONG*" "c-function")}
      {Lisp-Entry "LONG*-ref" #f 340 12 340 21 ("LONG" "LONG*" "c-function")}
      {Lisp-Entry "LONG*-set!" #f 345 12 345 22 ("void" "LONG" "LONG*" "c-function")}
      {Lisp-Entry "LONG-enref" #f 350 13 350 23 ("LONG*-set!" "LONG*-make" "ptr" "let" "long")}
      {Lisp-Entry "LONG-deref" #f 356 13 356 23 ("LONG*-free" "LONG*-ref" "long" "let" "long*")}
      {Lisp-Entry "IUnknown*" #f 368 8 368 17 ("void" "native" "pointer")}
      {Lisp-Entry "IUnknown**" #f 369 8 369 18 ("IUnknown*" "pointer")}
      {Lisp-Entry "LPVOID*" #f 370 8 370 15 ("IUnknown**")}
      {Lisp-Entry "IUnknown**-make" #f 373 12 373 27 ("LPVOID*" "c-function")}
      {Lisp-Entry "IUnknown**-free" #f 378 12 378 27 ("void" "LPVOID*" "c-function")}
      {Lisp-Entry "IUnknown**-ref" #f 383 12 383 26 ("IUnknown*" "LPVOID*" "c-function")}
      {Lisp-Entry "IUnknown**-set!" #f 388 12 388 27 ("void" "IUnknown*" "LPVOID*" "c-function")}
      {Lisp-Entry "IUnknown*-enref" #f 393 13 393 28 ("IUnknown**-set!" "IUnknown**-make" "ptr" "let" "coptr")}
      {Lisp-Entry "IUnknown*-deref" #f 399 13 399 28 ("IUnknown**-free" "IUnknown**-ref" "coptr" "let" "coptr*")}
      {Lisp-Entry "CoQuery" #f 405 25 405 32 ()}
      {Lisp-Entry "CoQueryNoValidate" #f 406 23 406 40 ()}
      {Lisp-Entry "CoAddRef" #f 407 23 407 31 ()}
      {Lisp-Entry "CoRelease" #f 408 23 408 32 ()}
      {Lisp-Entry "CoCreateInstance" #f 411 13 411 29 ("IUnknown*-deref" "GUID-free" "CLSCTX_SERVER" "validate-hresult" "HRESULT" "LPVOID*" "DWORD" "IUnknown*" "GUID*" "c-function" "proc" "IUnknown*-enref" "coptr*" "interface-guid" "GUID-encode" "class-guid" "let" "interface" "class")}
      {Lisp-Entry "com-interface" #f 422 13 422 26 ("guid")}
      {Lisp-Entry "com-interface-guid" #f 425 13 425 31 ("coint")}
      {Lisp-Entry "com-class" #f 429 13 429 22 ("cons" "coint" "guid")}
      {Lisp-Entry "com-class-guid" #f 432 13 432 27 ("car" "com-class")}
      {Lisp-Entry "com-class-interface" #f 435 13 435 32 ("cdr" "com-class")}
      {Lisp-Entry "com-create" #f 439 20 439 30 ("CoCreateInstance" "com-class-interface" "com-interface-guid" "interface-guid" "com-class-guid" "class-guid" "let" "com-class")}
      {Lisp-Entry "com-release" #f 445 20 445 31 ("CoRelease$" "coptr")}
      {Lisp-Entry "CY" #f 454 13 454 15 ("Hi" "long" "Lo" "ulong")}
      {Lisp-Entry "CY-ref" #f 459 12 459 18 ("int64" "native" "CY*" "c-function")}
      {Lisp-Entry "DECIMAL" #f 469 13 469 20 ("Mid32" "Lo32" "Hi32" "ULONG" "sign" "scale" "BYTE" "wReserved" "USHORT")}
      {Lisp-Entry "DECIMAL" #f 478 8 478 15 ()}
      {Lisp-Entry "DECIMAL*" #f 479 8 479 16 ("DECIMAL" "pointer")}
      {Lisp-Entry "VARIANT*->ULONG" #f 483 12 483 27 ("ulong" "VARIANT*" "c-function")}
      {Lisp-Entry "VARIANT_BOOL" #f 503 8 503 20 ("short" "native")}
      {Lisp-Entry "VARIANT_BOOL*" #f 504 8 504 21 ("VARIANT_BOOL" "pointer")}
      {Lisp-Entry "VARIANT_BOOL*-make" #f 507 12 507 30 ("VARIANT_BOOL*" "c-function")}
      {Lisp-Entry "VARIANT_BOOL*-free" #f 512 12 512 30 ("void" "VARIANT_BOOL*" "c-function")}
      {Lisp-Entry "VARIANT_BOOL*-ref" #f 517 12 517 29 ("VARIANT_BOOL" "VARIANT_BOOL*" "c-function" "VARIANT_BOOL-decode" "vtbool*" "function")}
      {Lisp-Entry "VARIANT_BOOL*-set!" #f 525 12 525 30 ("void" "VARIANT_BOOL" "VARIANT_BOOL*" "c-function")}
      {Lisp-Entry "VARIANT_BOOL-encode" #f 530 13 530 32 ("0" "-1" "if" "boolean")}
      {Lisp-Entry "VARIANT_BOOL-decode" #f 534 13 534 32 ("0" "/=" "vtbool")}
      {Lisp-Entry "VARIANT_BOOL-enref" #f 538 13 538 31 ("VARIANT_BOOL-encode" "VARIANT_BOOL*-set!" "VARIANT_BOOL*-make" "ptr" "let" "boolean")}
      {Lisp-Entry "VARIANT_BOOL-deref" #f 544 13 544 31 ("VARIANT_BOOL*-free" "VARIANT_BOOL*-ref" "bool" "let" "vtbool*")}
      {Lisp-Entry "SAFEARRAYBOUND" #f 555 13 555 27 ("lLbound" "LONG" "cElements" "ULONG")}
      {Lisp-Entry "SAFEARRAY" #f 565 13 565 22 ("1" "rgsabound" "SAFEARRAYBOUND" "pvData" "PVOID" "cLocks" "cbElements" "ULONG" "fFeatures" "cDims" "USHORT")}
      {Lisp-Entry "VARTYPE" #f 579 8 579 15 ("unsigned-short" "native")}
      {Lisp-Entry "SCODE" #f 580 8 580 13 ("long" "native")}
      {Lisp-Entry "VARIANT" #f 583 13 583 20 ("intVal" "INT" "pboolVal" "VARIANT_BOOL*" "punkVal" "IUnknown*" "pdecVal" "DECIMAL*" "bstrVal" "BSTR" "cyVal" "CY" "scode" "SCODE" "parray" "SAFEARRAY*" "boolVal" "VARIANT_BOOL" "dblVal" "double" "fltVal" "float" "iVal" "short" "lVal" "long" "vt" "VARTYPE")}
      {Lisp-Entry "VariantInit" #f 600 12 600 23 ("void" "VARIANT*" "c-function")}
      {Lisp-Entry "VariantClear" #f 604 12 604 24 ("HRESULT" "VARIANT*" "c-function")}
      {Lisp-Entry "VARIANT-set!" #f 608 13 608 25 ("VARIANT-punkVal-set!" "13" "CoAddRef" "else" "BSTR-encode" "VARIANT-bstrVal-set!" "8" "string?" "VARIANT-dblVal-set!" "5" "real?" "VARIANT-lVal-set!" "3" "integer?" "0" "if" "VARIANT-boolVal-set!" "11" "boolean?" "-1" "VARIANT-scode-set!" "10" "VARIANT-vt-set!" "null?" "cond" "value" "variant")}
      {Lisp-Entry "VARIANT-ref" #f 631 13 631 24 ("error" "else" "+" "byte*-ref" "u8vector-set!" "<" "when" "i" "loop" "let" "make-u8vector" "vector" "SAFEARRAYBOUND-cElements-ref" "size" "SAFEARRAY-pvData-ref" "void*->byte*" "array" "SAFEARRAY-rgsabound-ref" "bound" "VARIANT-parray-ref" "safearray" "let*" "#x2011" "VARIANT-pboolVal-ref" "short*-ref" "#x400B" "VARIANT-intVal-ref" "22" "VARIANT*->ULONG" "14" "unimplemented" "'unimplemented" "list" "13" "VARIANT-boolVal-ref" "/=" "11" "VARIANT-bstrVal-ref" "BSTR-ref" "8" "VariantTimeToSystemTime" "7" "10000.0" "VARIANT-cyVal-ref" "CY-ref" "/" "6" "VARIANT-dblVal-ref" "5" "VARIANT-fltVal-ref" "4" "VARIANT-lVal-ref" "3" "VARIANT-iVal-ref" "2" "nil" "1" "0" "VARIANT-vt-ref" "case" "variant")}
      {Lisp-Entry "VARIANT-encode" #f 678 13 678 27 ("VARIANT-set!" "VariantInit" "VARIANT-make" "variant" "let" "data")}
      {Lisp-Entry "VARIANT-decode" #f 685 13 685 27 ("VARIANT-free" "VariantClear" "VARIANT-ref" "data" "let" "variant")}
      {Lisp-Entry "SystemTimeToVariantTime" #f 692 13 692 36 ("0" "f64vector-ref" "SYSTEMTIME-free" "1000" "date-nanosecond" "quotient" "SYSTEMTIME-wMilliseconds-set!" "date-second" "SYSTEMTIME-wSecond-set!" "date-minute" "SYSTEMTIME-wMinute-set!" "date-hour" "SYSTEMTIME-wHour-set!" "date-day" "SYSTEMTIME-wDay-set!" "date-week-day" "SYSTEMTIME-wDayOfWeek-set!" "date-month" "SYSTEMTIME-wMonth-set!" "date-year" "SYSTEMTIME-wYear-set!" "void" "F64PTR" "SYSTEMTIME*" "c-function" "fun" "1" "make-f64vector" "buffer" "SYSTEMTIME-make" "system-time" "let" "date")}
      {Lisp-Entry "VariantTimeToSystemTime" #f 709 13 709 36 ("0" "1000" "*" "make-date" "SYSTEMTIME-free" "SYSTEMTIME-wMilliseconds-ref" "milliseconds" "SYSTEMTIME-wSecond-ref" "second" "SYSTEMTIME-wMinute-ref" "minute" "SYSTEMTIME-wHour-ref" "hour" "SYSTEMTIME-wDay-ref" "day" "SYSTEMTIME-wDayOfWeek-ref" "day-of-week" "SYSTEMTIME-wMonth-ref" "month" "SYSTEMTIME-wYear-ref" "year" "void" "SYSTEMTIME*" "double" "c-function" "fun" "SYSTEMTIME-make" "system-time" "let" "variant-time")}
      {Lisp-Entry "IErrorInfo" #f 730 12 730 22 ("com-interface")}
      {Lisp-Entry "IErrorInfo$GetGUID" #f 734 23 734 41 ()}
      {Lisp-Entry "IErrorInfo$GetSource" #f 735 23 735 43 ()}
      {Lisp-Entry "IErrorInfo$GetDescription" #f 736 23 736 48 ()}
      {Lisp-Entry "IErrorInfo$GetHelpFile" #f 737 23 737 45 ()}
      {Lisp-Entry "IErrorInfo$GetHelpContext" #f 738 23 738 48 ()}
      {Lisp-Entry "GetErrorInfo" #f 741 13 741 25 ("IUnknown*-deref" "S_OK" "=" "if" "HRESULT" "IUnknown**" "c-function" "result" "IUnknown**-make" "ptr" "let*")}
      {Lisp-Entry "ISupportErrorInfo" #f 756 12 756 29 ("com-interface")}
      {Lisp-Entry "ISupportErrorInfo$InterfaceSupportsErrorInfo" #f 760 23 760 67 ()}}})
"_commonlisp"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "commonlisp" "_commonlisp.jazz"} 1226584778
    {Lisp-Entry "jazz.language.commonlisp" #f 37 9 37 33 ("jazz")}})
"_component"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "component" "_component.jazz"} 1226931364
    {Lisp-Entry "jazz.library.component" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "open-form" #f 51 20 51 29 ("multiple-selection?:" "choose-file" "read-from-file")}
      {Lisp-Entry "read-from-file" #f 55 20 55 34 ("set-origin" "Form" "is?" "assert" "jml->form" "set!" "pair?" "when" "eof-object?" "if" "read" "form" "let" "reader" "function" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "UTF" "'UTF" "char-encoding:" "parse" "path:" "list" "call-with-input-file" "file")}
      {Lisp-Entry "determine-unique-paster" #f 74 20 74 43 ("car" "parent" "=" "when" "get-parent" "component" "function" "map" "remove-duplicates" "parents" "let" "else" "first" "determine-paster" "1" "0" "length" "case" "components")}}})
"_compression"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "compression" "_compression.jazz"} 1226584780})
"_console"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "console" "_console.jazz"} 1226584774
    {Lisp-Entry "jazz.console" #f 37 9 37 21 ("jazz")
      {Lisp-Entry "Banner-Color" #f 47 19 47 31 ("Dark-Green" "name:" "Color")}
      {Lisp-Entry "Prompt-Color" #f 48 19 48 31 ("Dark-Blue" "name:" "Color")}
      {Lisp-Entry "Expression-Color" #f 49 19 49 35 ("Black" "name:" "Color")}
      {Lisp-Entry "Eval-Color" #f 50 19 50 29 ("Dark-Red" "name:" "Color")}
      {Lisp-Entry "get-console-manager" #f 53 20 53 39 ("Console-Manager" "singleton-docked" "get-guest")}
      {Lisp-Entry "get-console-text" #f 57 20 57 36 ("get-console-manager" "get-text")}
      {Lisp-Entry "get-console-text-manager" #f 61 20 61 44 ("get-parent" "get-creator" "text")}}})
"_core"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "_core.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core" #f 37 9 37 26 ("scheme")}})
"_crash"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "crash" "_crash.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.crash" #f 37 9 37 28 ("jazz")}})
"_csharp"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "csharp" "_csharp.jazz"} 1226584778
    {Lisp-Entry "jazz.language.csharp" #f 37 9 37 29 ("jazz")}})
"_css"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "css" "_css.jazz"} 1226584778
    {Lisp-Entry "jazz.language.css" #f 37 9 37 26 ("jazz")}})
"_database"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "_database.jazz"} 1226584774
    {Lisp-Entry "jazz.database" #f 37 9 37 22 ("jazz")}})
"_debuggee"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "debuggee" "_debuggee.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.debuggee" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "In-Pick?" #f 53 12 53 20 ()}
      {Lisp-Entry "All-Pickers" #f 56 12 56 23 ()}
      {Lisp-Entry "Highlight-Figure?" #f 59 12 59 29 ()}
      {Lisp-Entry "Highlighted-Player" #f 62 12 62 30 ()}
      {Lisp-Entry "Highlighted-View" #f 65 12 65 28 ()}
      {Lisp-Entry "Highlighted-Root-Rect" #f 68 12 68 33 ()}
      {Lisp-Entry "Highlighted-View-Rect" #f 71 12 71 33 ()}
      {Lisp-Entry "Highlighted-Row-Rect" #f 74 12 74 32 ()}
      {Lisp-Entry "Report-Figure?" #f 77 12 77 26 ()}
      {Lisp-Entry "Obscure-Unhighlighted?" #f 80 12 80 34 ()}
      {Lisp-Entry "pick-figure" #f 84 20 84 31 ("simulate-mouse-move" "cons" "invalidate-window" "tooltips?" "highlight" "menu" "click" "install-overlays" "exclude" "memq?" "not" "or" "and" "overlapped" "for-each" "obscure-unhighlighted?" "Obscure-Unhighlighted?" "report-figure?" "Report-Figure?" "highlight-figure?" "Highlight-Figure?" "All-Pickers" "set!" "setup-pick" "not-null?" "when" "get-toplevel" "toplevel" "process-windows" "windows" "let" "function" "with-locked-update" "In-Pick?" "unless" "include" "include:")}
      {Lisp-Entry "setup-pick" #f 115 13 115 23 ("end-pick" "set-escape-handler" "inhibit-view-cursor")}
      {Lisp-Entry "install-overlays" #f 120 13 120 29 ("tooltips?:" "highlight:" "menu:" "click:" "get-size" "size:" "0" "Point" "position:" "parent:" "Picker-Overlay" "new" "get-root" "root" "let" "window" "function" "for-each-window" "tooltips?" "highlight" "menu" "click" "overlapped")}
      {Lisp-Entry "remove-overlays" #f 134 13 134 28 ("close" "Picker-Overlay" "find-type" "overlay" "when" "get-root" "root" "let" "window" "function" "for-each-window" "overlapped")}
      {Lisp-Entry "for-each-window" #f 144 13 144 28 ("get-visible?" "View-Player" "is?" "Overlapped" "is-not?" "eq?" "or" "and" "when" "level" "window" "function" "for-each-descendant" "proc" "overlapped")}
      {Lisp-Entry "simulate-mouse-move" #f 154 13 154 32 ("Highlighted-Row-Rect" "Highlighted-View-Rect" "Highlighted-Root-Rect" "Highlighted-View" "Highlighted-Player" "set!" "highlight-info" "row-rect" "view-rect" "root-rect" "receive" "mouse-position" "pos" "find-picker" "picker" "get-overlapped" "overlapped" "get-root" "root" "get-display" "display" "get-player" "player" "let*" "when" "mouse-view" "view" "let")}
      {Lisp-Entry "find-picker" #f 171 13 171 24 ("All-Pickers" "eq?" "picker" "function" "find-if" "overlapped")}
      {Lisp-Entry "end-pick" #f 177 13 177 21 ("close-pickers" "close-all-popups" "set-escape-handler" "setup-highlight" "inhibit-view-cursor" "In-Pick?" "set!")}
      {Lisp-Entry "close-pickers" #f 186 13 186 26 ("set!" "All-Pickers" "remove-overlays" "for-each")}
      {Lisp-Entry "setup-highlight" #f 196 13 196 28 ("redraw-window" "eq?" "and" "if" "Highlighted-Root-Rect" "set!" "old-player" "let" "Highlighted-Row-Rect" "Highlighted-View-Rect" "nu/=?" "Highlighted-View" "Highlighted-Player" "neq?" "or" "when" "highlight-info" "row-rect" "view-rect" "root-rect" "player" "receive" "pos" "view")}
      {Lisp-Entry "highlight-info" #f 216 13 216 27 ("essay" "row-rect" "determine-row-rect" "view-row-rect" "acquire" "view-rect" "get-bounds" "root-rect" "get-root" "root" "get-display" "display" "get-player" "player" "let*" "values" "not" "if" "pos" "view")}
      {Lisp-Entry "determine-row-rect" #f 229 13 229 31 ("cell-rect" "view->tree" "cell" "let" "Tree-View" "is?" "when" "pos" "view")}
      {Lisp-Entry "Picker-Overlay" #f 241 7 241 21 ("View")
        {Lisp-Entry "click" #f 244 12 244 17 ("generate")}
        {Lisp-Entry "menu" #f 245 12 245 16 ("generate")}
        {Lisp-Entry "highlight" #f 246 12 246 21 ("generate")}
        {Lisp-Entry "tooltips?" #f 247 12 247 21 ("generate")}
        {Lisp-Entry "cursor-update" #f 255 11 255 24 (":spy" "set-cursor" "pos")}
        {Lisp-Entry "get-tooltip?" #f 264 11 264 23 ("tooltips?")}
        {Lisp-Entry "get-formatted-tooltip?" #f 268 11 268 33 ()}
        {Lisp-Entry "get-tooltip-context" #f 272 11 272 30 ("Label" "name:" "Font" "font:" "bounds:" "view-describe" "display-description" "text:" "self" "view:" "Tooltip-Context" "new" "player" "bounds" "either" "acquire" "rect" "determine-row-rect" "row-rect" "root" "get-bounds" "view-bounds" "get-root" "view-root" "get-player" "view-player" "let*" "when" "find-view-info" "view" "receive" "pos")}
        {Lisp-Entry "display-description" #f 289 11 289 30 ("format" ":bulleted" "list" "value" "name" "bind" "info" "function" "map" "cons" "description")}
        {Lisp-Entry "mouse-move" #f 302 11 302 21 ("self" "user-message" "not" "Report-Figure?" "setup-highlight" "eq?" "if" "proc" "let" "highlight" "when" "find-view-info" "view" "receive" "nextmethod" "pos")}
        {Lisp-Entry "mouse-up" #f 316 11 316 19 ("click" "end-pick" "function" "with-locked-update" "find-view-info" "view" "receive" "nextmethod" "pos")}
        {Lisp-Entry "find-view-info" #f 325 11 325 25 ("values" "essay" "view-pos" "list" "ignore:" "find-drawing" "view" "self" "acquire" "root-pos" "get-root" "root" "let*" "pos")}
        {Lisp-Entry "context-menu" #f 338 11 338 23 ("processed" "acquire" "track-popup-menu" "setup-actions" "get-root" "root" "let" "find-view-info" "view" "receive" "close-popups" "nextmethod" "menu" "not" "if" "pos")}
        {Lisp-Entry "setup-actions" #f 350 11 350 24 ("get-children" "execute:" "Event-Handler" "set-action-handler" "invoke" "self" ":action" "Action-Event" "new" "apply" "get-properties" "pos:" "view:" "augment" "properties" "when" "end-pick" "event" "execute" "get-action-handler" "action-handler" "let*" "item" "function" "for-each" "pos" "view" "menu")}
        {Lisp-Entry "Overlay-Color" #f 368 14 368 27 ("0.25" "alpha:" "Black" "name:" "Color")}
        {Lisp-Entry "Highlight-Color" #f 372 14 372 29 ("177" "blue:" "green:" "109" "red:" "Color")}
        {Lisp-Entry "Highlight-Pen" #f 375 14 375 27 ("Highlight-Color" "color:" "2" "width:" "solid" "'solid" "style:" "Pen" "new")}
        {Lisp-Entry "draw" #f 379 11 379 15 ("nu/=?" "Highlighted-View-Rect" "and" "Highlighted-Row-Rect" "Highlight-Pen" "Highlighted-Root-Rect" "rectangle" "Highlight-Figure?" "Overlay-Color" "get-bounds" "fill-rect" "Obscure-Unhighlighted?" "when" "get-root" "neq?" "Highlighted-Player" "not" "or" "if" "lv" "lh" "context" "surface")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "_debuggee.jazz"} 1227124458
    {Lisp-Entry "jazz.debuggee" #f 37 9 37 22 ("jazz")
      {Lisp-Entry "local-process" #f 52 12 52 25 ()}
      {Lisp-Entry "get-local-process" #f 56 20 56 37 ("local-process")}
      {Lisp-Entry "setup-local-process" #f 60 20 60 39 ("Debuggee-Process" "Debuggee-Process-Local-Proxy" "new" "set!" "local-process" "not" "when")}
      {Lisp-Entry "controller-debugger" #f 70 12 70 31 ()}
      {Lisp-Entry "get-controller-debugger" #f 74 20 74 43 ("controller-debugger")}
      {Lisp-Entry "attach-to-controller" #f 78 20 78 40 ("exception-debugger-hook" "set-exception-hook" "jazz-exception-debugger" "set-exception-debugger" "local-process" "attach-process" "console-port-getter" "set-console-port-getter" "setup-local-process" "debugger" "'debugger" "require-object" "controller-debugger" "set!" "detach-from-controller" "controller-register")}
      {Lisp-Entry "detach-from-controller" #f 88 20 88 42 ("local-process" "set!" "detach-from-debugger" "controller-debugger" "when")}
      {Lisp-Entry "detach-from-debugger" #f 94 20 94 40 ("set!" "local-process" "detach-process" "live?" "controller-debugger" "when")}
      {Lisp-Entry "setup-debuggee" #f 101 13 101 27 ("new-remote-register" "attach-to-controller" "string->port" "port" "string->host" "host" "let" "start-remoting-server" "command-argument" "when")}
      {Lisp-Entry "update-debuggee-process" #f 110 13 110 36 ("local-process" "update-process" "controller-debugger" "when")}
      {Lisp-Entry "*stops*" #f 120 12 120 19 ()}
      {Lisp-Entry "with-stops-mutex" #f 124 12 124 28 ("mutex-unlock!" "mutex-lock!" "thunk" "function" "stops" "'stops" "make-mutex" "mutex" "let")}
      {Lisp-Entry "register-stop" #f 132 13 132 26 ("list" "append" "*stops*" "set!" "function" "with-stops-mutex" "stop")}
      {Lisp-Entry "unregister-stop" #f 138 13 138 28 ("remove!" "*stops*" "set!" "function" "with-stops-mutex" "stop")}
      {Lisp-Entry "get-thread-stops" #f 144 13 144 29 ("queue-list" "*stops*" "Debuggee-Stop-Local-Proxy" "new" "enqueue" "get-thread" "eq?" "when" "stop" "function" "for-each" "new-queue" "queue" "let" "thread")}
      {Lisp-Entry "Console" #f 158 7 158 14 ("Object")
        {Lisp-Entry "remote" #f 161 8 161 14 ("generate")}
        {Lisp-Entry "pump" #f 162 8 162 12 ("generate")}
        {Lisp-Entry "tail" #f 163 8 163 12 ("generate")}
        {Lisp-Entry "head" #f 164 8 164 12 ("generate")}
        {Lisp-Entry "context" #f 165 8 165 15 ("generate")}
        {Lisp-Entry "history" #f 166 8 166 15 ("generate")}
        {Lisp-Entry "initialize" #f 169 11 169 21 ("history~self" "unspecified" "context~self" "head~self" "tail~self" "pump~self" "remote~self" "set!" "head" "tail" "pump" "remote")}}
      {Lisp-Entry "*consoles*" #f 178 12 178 22 ("eq?" "test:" "make-table")}
      {Lisp-Entry "with-consoles-mutex" #f 182 12 182 31 ("mutex-unlock!" "prog1" "mutex-lock!" "thunk" "function" "consoles" "'consoles" "make-mutex" "mutex" "let")}
      {Lisp-Entry "thread-console" #f 190 13 190 27 ("table-set!" "Debuggee-Thread" "Debuggee-Thread-Local-Proxy" "new" "make-debuggee-console" "console" "let" "*consoles*" "table-ref" "either" "function" "with-consoles-mutex" "thread")}
      {Lisp-Entry "thread-console-pump-port" #f 199 13 199 37 ("thread-console" "get-tail" "thread")}
      {Lisp-Entry "thread-console-port" #f 202 13 202 32 ("thread-console" "get-head" "thread")}
      {Lisp-Entry "current-console" #f 206 13 206 28 ("current-thread" "thread-console")}
      {Lisp-Entry "make-debuggee-console" #f 210 13 210 34 ("Console" "new" "start-debuggee-console-pump" "pump" "local-process" "controller-debugger" "register-console" "console" "let" "jazz-readtable" "readtable:" "permanent-close:" "list" "open-string-pipe" "tail" "head" "receive" "thread-proxy")}
      {Lisp-Entry "console-port-getter" #f 217 13 217 32 ("current-console" "get-head")}
      {Lisp-Entry "start-debuggee-console-pump" #f 226 13 226 40 ("console-output" "controller-debugger" "when" "str" "Permanent-Port" "new" "start-pump" "function" "new-thread" "thread-start!" "port" "console")}
      {Lisp-Entry "stop-debuggee-console-pump" #f 237 13 237 39 ("thread-exit" "thread-interrupt!" "thread")}
      {Lisp-Entry "current-repl-level" #f 247 12 247 30 ("0" "make-parameter")}
      {Lisp-Entry "current-repl-frame" #f 250 12 250 30 ("make-parameter")}
      {Lisp-Entry "with-repl-thread" #f 254 13 254 29 ("thread-exit" "thread-interrupt!" "unwind-protect" "start-repl-thread" "let" "thunk" "level" "port" "reason" "thread")}
      {Lisp-Entry "start-repl-thread" #f 262 13 262 30 ("read-eval-print-loop" "display-prompt" "display" "display-banner" "=" "when" "function" "new-thread" "thread-start!" "0" "level" "port" "reason" "thread")}
      {Lisp-Entry "display-banner" #f 275 13 275 27 ("force-output" "current-process-version" "current-process-title" "format" "port")}
      {Lisp-Entry "display-prompt" #f 282 13 282 27 ("force-output" "format" "0" ">" "when" "level" "port")}
      {Lisp-Entry "read-eval-print-loop" #f 289 13 289 33 ("read-eval-print" "iterate" "let" "proper-tail-calls" "declare" "level" "port" "thread")}
      {Lisp-Entry "read-eval-print" #f 296 13 296 28 ("force-output" "display-prompt" "format" "repl-result-history-add" "specified?" "thread-call-result?" "and" "evaluate" "'evaluate" "thread-call" "result" "invoke-restart" "second" "restart" "newline" "1" "length" ">" "when" "find-restarts" "restarts" "function" "resume-loop" "'resume-loop" "thread-post" "eof-object?" "if" "read" "expr" "let" "level" "port" "thread")}
      {Lisp-Entry "evaluate" #f 320 13 320 21 ("evaluate-in-context" "unbox" "evaluate-in-frame" "load-module" "evaluate" "either" "null?" "ctx" "'ctx" "arguments" "command" "receive" "current-repl-frame" "frame-box" "current-console" "else" "values" "symbol?" "cond" "cadr" "unquoted" "cdr" "unquote" "'unquote" "car" "eq?" "pair?" "parse-unquote-command" "process-alias" "enumerator?" "and" "when" "set-context" "initial-console-context" "context-alias" "get-process" "process" "new-context" "unspecified?" "if" "get-context" "context" "let" "console" "context-init" "define" "expr")}
      {Lisp-Entry "evaluate-in-frame" #f 369 13 369 30 ("eval-within-no-winding" "get-continuation" "serial->object" "cont" "eval" "not" "if" "box" "unbox" "let" "expr" "frame")}
      {Lisp-Entry "evaluate-in-context" #f 377 13 377 32 ("'evaluate" "dispatch" "evaluate" "method" ",class-name" "class" "identifier-name" "class-name" "identifier-module" "class-of" "type-name" "class-identifier" "else" ",expr" "jazz" ",module-name" "library" "locate-library-declaration" "load-module" "module-name" "let" "symbol?" "not" "cond" "eval" "'eval" "jazz.walk-for" "parameterize" "expr" "context")}
      {Lisp-Entry "jazz-exception-debugger" #f 407 13 407 36 ("exception" "'exception" "invoke-debugger" "exception-detail" "detail" "exception-reason" "reason" "continuation" "continuation-capture" "function" "with-system-exception-debugger" "system-exception-hook" "invoke-exception-hook" "use-debugger?" "not" "or" "if" "get-controller-debugger" "debugger" "let" "exc")}
      {Lisp-Entry "with-jazz-exception-debugger" #f 420 13 420 41 ("jazz-exception-debugger" "with-exception-debugger" "thunk")}
      {Lisp-Entry "break" #f 425 13 425 18 ("break" "'break" "invoke-debugger" "continuation" "function" "continuation-capture" "reason")}
      {Lisp-Entry "invoke-debugger" #f 436 13 436 28 ("unregister-stop" "process-debuggee-loop" "debuggee-loop" "not" "if" "get-process" "process" "local-process" "controller-debugger" "debuggee-stop" "box" "current-repl-frame" "with-repl-thread" "parameterize" "Debuggee-Stop-Local-Proxy" "stop-proxy" "Debuggee-Thread" "Debuggee-Thread-Local-Proxy" "thread-proxy" "let" "register-stop" "function" "dynamic-wind" "Debuggee-Stop" "new" "stop" "compute-restarts" "restarts" "1" "current-repl-level" "+" "level" "get-console-port" "port" "current-thread" "thread" "let*" "continuation" "detail" "reason" "kind")}
      {Lisp-Entry "compute-restarts" #f 461 13 461 29 ("-" "0" "subseq" "get-restarts" "length" "stop" "max" "apply" "skip" "null?" "if" "Debuggee-Restart" "Debuggee-Restart-Local-Proxy" "new" "restart" "function" "map" "current-restarts" "all-restarts" "get-thread-stops" "previous-stops" "let" "thread")}
      {Lisp-Entry "debuggee-loop" #f 472 13 472 26 ("with-jazz-exception-debugger" "thread-read" "thunk" "function" "resume-loop" "'resume-loop" "with-restart-catcher" "loop" "let")}
      {Lisp-Entry "*current-view-debugger*" #f 487 12 487 35 ()}
      {Lisp-Entry "current-view-debugger" #f 491 20 491 41 ("View-Debugger" "new" "set!" "*current-view-debugger*" "not" "when")}}})
"_debugger"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "_debugger.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger" #f 37 9 37 22 ("jazz")
      {Lisp-Entry "*debuggers*" #f 63 12 63 23 ()}
      {Lisp-Entry "*current-debugger*" #f 66 12 66 30 ()}
      {Lisp-Entry "with-debuggers-mutex" #f 70 12 70 32 ("mutex-unlock!" "mutex-lock!" "thunk" "lambda" "debuggers" "'debuggers" "make-mutex" "mutex" "let")}
      {Lisp-Entry "register-debugger" #f 78 13 78 30 ("list" "append" "*debuggers*" "set!" "function" "with-debuggers-mutex" "debugger")}
      {Lisp-Entry "unregister-debugger" #f 84 13 84 32 ("remove!" "*debuggers*" "set!" "function" "with-debuggers-mutex" "debugger")}
      {Lisp-Entry "get-debuggers" #f 90 20 90 33 ("*debuggers*")}
      {Lisp-Entry "current-debugger" #f 94 20 94 36 ("Debugger" "new" "set!" "*current-debugger*" "not" "when")}
      {Lisp-Entry "debugged=?" #f 105 20 105 30 ("same?" "eq?" "dy" "get-debugger" "dx" "let" "not" "and" "or" "y" "x")}
      {Lisp-Entry "*debugger-resources*" #f 120 12 120 32 ("debugged=?" "test:" "make-table")}
      {Lisp-Entry "get-debugger-resources" #f 124 13 124 35 ("*debugger-resources*" "table-ref" "process")}
      {Lisp-Entry "set-debugger-resources" #f 127 13 127 35 ("*debugger-resources*" "table-set!" "resources" "process")}
      {Lisp-Entry "register-debugger-resource" #f 131 13 131 39 ("get-debugger-resources" "cons" "set-debugger-resources" "resource" "process")}
      {Lisp-Entry "unregister-debugger-resource" #f 134 13 134 41 ("get-debugger-resources" "remove!" "set-debugger-resources" "resource" "process")}
      {Lisp-Entry "close-process-debugger-resources" #f 138 13 138 45 ("*debugger-resources*" "table-clear" "get-debugger-resources" "close-resource" "resource" "function" "for-each" "process")}
      {Lisp-Entry "*debugged-visits*" #f 150 12 150 29 ("weak-keys:" "debugged=?" "test:" "make-table")}
      {Lisp-Entry "*debugged-problems*" #f 153 12 153 31 ("weak-keys:" "debugged=?" "test:" "make-table")}
      {Lisp-Entry "get-debugged-visit?" #f 157 20 157 39 ("*debugged-visits*" "table-ref" "debugged")}
      {Lisp-Entry "set-debugged-visit?" #f 160 20 160 39 ("*debugged-visits*" "table-set!" "flag" "debugged")}
      {Lisp-Entry "get-debugged-problem?" #f 164 20 164 41 ("*debugged-problems*" "table-ref" "debugged")}
      {Lisp-Entry "set-debugged-problem?" #f 167 20 167 41 ("*debugged-problems*" "table-set!" "flag" "debugged")}
      {Lisp-Entry "*focused-process*" #f 176 12 176 29 ()}
      {Lisp-Entry "get-focused-process" #f 180 20 180 39 ("*focused-process*")}
      {Lisp-Entry "set-focused-process" #f 183 20 183 39 ("*focused-process*" "set!" "process")}
      {Lisp-Entry "focus-process" #f 187 20 187 33 ("update" "get-processes-view" "view" "let" "set!" "*focused-process*" "debugged=?" "not" "when" "process")}
      {Lisp-Entry "Once-Breaks" #f 200 12 200 23 ("eq?" "test:" "make-table")}
      {Lisp-Entry "add-break-once" #f 204 20 204 34 ("Once-Breaks" "table-set!" "name")}
      {Lisp-Entry "break-once" #f 208 20 208 30 ("break" "table-set!" "Once-Breaks" "table-ref" "when" "name")}
      {Lisp-Entry "Once-Executes" #f 214 12 214 25 ("eq?" "test:" "make-table")}
      {Lisp-Entry "add-execute-once" #f 218 20 218 36 ("Once-Executes" "table-set!" "name")}
      {Lisp-Entry "execute-once" #f 222 20 222 32 ("table-set!" "Once-Executes" "table-ref" "when" "proc" "name")}
      {Lisp-Entry "register-debugger-console" #f 233 20 233 45 ("setup-debugger-console-ports" "register-console" "text" "get-console-manager" "manager" "get-name" "present-thread-name" "format" "not" "if" "get-title" "process-title" "let" "present" "define" "thread-proxy" "process-proxy")}
      {Lisp-Entry "unregister-debugger-console" #f 246 20 246 47 ("get-console-text-manager" "unregister-console" "thread-exit" "thread-interrupt!" "when" "get-console-pump" "pump" "let" "text")}
      {Lisp-Entry "debugger-console-output" #f 254 20 254 43 ("line" "insert-formatted-line" "Output" "'Output" "insert-styled" "text-ending" "set-caret" "function" "execute-event" "str" "text")}
      {Lisp-Entry "setup-debugger-console-ports" #f 263 13 263 41 ("start-debugger-console-pump" "set-console-pump" "set-console-port" "permanent-close:" "list" "open-string-pipe" "tail" "head" "receive" "thread-proxy" "process-proxy" "text")}
      {Lisp-Entry "start-debugger-console-pump" #f 269 13 269 40 ("console-input" "str" "Permanent-Port" "new" "start-pump" "function" "new-thread" "thread-start!" "thread-proxy" "process-proxy" "port")}
      {Lisp-Entry "break-exception" #f 284 20 284 35 ("frame:" "location:" "message:" "error" "'error" "type:" "break-action" "select-foreground-window" "focus-process" "get-toplevel-hwnd" "controller-toplevel-hwnd" "get-controller-debugger" "controller-debugger" "get-process" "closure-function" "object-location" "location" "frame-procedure" "closure" "frame-toplevel-closure-frame" "essay" "closure-frame" "get-message" "message" "let*" "accountable" "frame" "exception" "process")}
      {Lisp-Entry "on-call-step-over" #f 303 20 303 37 ("on-step-over" "evt")}
      {Lisp-Entry "on-call-step-into" #f 307 20 307 37 ("on-step-into" "on-step-into-function" "get-shift?" "if" "evt")}
      {Lisp-Entry "on-call-step-out" #f 313 20 313 36 ("on-step-out" "on-step-outside-function" "get-shift?" "if" "evt")}
      {Lisp-Entry "on-call-run-to" #f 319 20 319 34 ("on-run-to-cursor" "on-run-to-result" "get-shift?" "if" "evt")}
      {Lisp-Entry "on-restart" #f 330 20 330 30 ("restart" "evt")}
      {Lisp-Entry "on-break" #f 334 20 334 28 ("break-next" "evt")}
      {Lisp-Entry "on-continue" #f 339 20 339 31 ("continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-step-over" #f 345 20 345 32 ("step-over" "continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-step-into" #f 353 20 353 32 ("step-into" "continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-step-into-function" #f 361 20 361 41 ("step-into-function" "continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-step-out" #f 369 20 369 31 ("step-out" "continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-step-outside-function" #f 377 20 377 44 ("step-outside-function" "continue" "bell" "debugging?" "not" "if" "evt")}
      {Lisp-Entry "on-run-to-cursor" #f 385 20 385 36 ("evt")}
      {Lisp-Entry "on-run-to-result" #f 389 20 389 36 ("evt")}
      {Lisp-Entry "restart" #f 393 20 393 27 ("get-application" "get-loop" "restart")}
      {Lisp-Entry "continue" #f 397 20 397 28 ("get-application" "get-loop" "continue")}
      {Lisp-Entry "debugging?" #f 401 20 401 30 ("0" "get-application" "get-loop" "get-level" "/=")}
      {Lisp-Entry "get-processes-view" #f 410 20 410 38 ("Processes-View" "singleton-docked" "get-guest")}
      {Lisp-Entry "get-threads-view" #f 414 20 414 36 ("Threads-View" "singleton-docked" "get-guest")}
      {Lisp-Entry "get-frames-view" #f 418 20 418 35 ("Frames-View" "singleton-docked" "get-guest")}
      {Lisp-Entry "get-detail-view" #f 422 20 422 35 ("Detail-View" "singleton-docked" "get-guest")}
      {Lisp-Entry "get-visit-highlight" #f 431 20 431 39 ("blue:" "205" "green:" "255" "red:" "Color")}
      {Lisp-Entry "active-frame" #f 440 20 440 32 ("get-loop" "get-frame" "selected-frame" "essay" "either" "Processes-View" "find-palette" "view" "get-application" "appl" "let")}
      {Lisp-Entry "break-indicator" #f 452 12 452 27 ()}
      {Lisp-Entry "Break-Color" #f 456 12 456 23 ("Yellow" "name:" "Color")}
      {Lisp-Entry "call-break" #f 460 20 460 30 ("frame:" "location:" "edit?:" "message:" "break-action" "frame" "location" "edit?" "message")}
      {Lisp-Entry "break-action" #f 464 20 464 32 ("uninstall-break" "when" "install-break" "function" "proc:" "unwind-protect" "Jazz-Code-Location" "new" "code-location" "let" "get-loop" "break-loop" "Remote-Proxy" "is?" "if" "essay" "get-controller-debugger" "debugger" "get-application" "appl" "let*" "frame" "frame:" "location" "location:" "edit?" "edit?:" "message" "message:" "break" "'break" "type" "type:")}
      {Lisp-Entry "install-break" #f 478 13 478 26 ("select-first-frame" "debugger" "'debugger" "workspace:" "Processes-View" "select-palette" "view" "function" "with-locked-update" "break-indicator" "set!" "get-start" "Break-Color" "fill" "range" "text" "receive" "find-location" "location" "let" "when" "get-message" "message-box" "err" "Location-Error" "catch" "code-location" "frame" "edit?")}
      {Lisp-Entry "uninstall-break" #f 494 13 494 28 ("set!" "get-start" "unfill" "range" "text" "frame" "receive" "get-message" "message-box" "err" "Location-Error" "catch" "break-indicator" "when")}
      {Lisp-Entry "listeners" #f 508 12 508 21 ()}
      {Lisp-Entry "add-debugger-listener" #f 512 20 512 41 ("add-listener" "listeners" "set!" "listener")}
      {Lisp-Entry "remove-debugger-listener" #f 516 20 516 44 ("remove-listener" "listeners" "set!" "listener")}
      {Lisp-Entry "process-frame-change" #f 520 20 520 40 ("invoke" "listener" "function" "for-each" "frame:" "current-debugger" ":frame-change" "Event" "new" "evt" "let" "listeners" "when" "frame")}}})
"_depot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "depot" "_depot.jazz"} 1226584775
    {Lisp-Entry "jazz.depot" #f 37 9 37 19 ("jazz")
      {Lisp-Entry "Depots" #f 44 12 44 18 ("equal?" "test:" "make-table")}
      {Lisp-Entry "preferences" #f 53 13 53 24 ("get-depots-preferences" "get-application" "appl" "let")}
      {Lisp-Entry "depot-preferences" #f 58 13 58 30 ("find-component" "when" "preferences" "pref" "name")}
      {Lisp-Entry "reload-preferences" #f 63 20 63 38 ("error?:" "remove-depot" "get-name" "name" "let" "pref")}
      {Lisp-Entry "remove-preferences" #f 68 20 68 38 ("error?:" "remove-depot" "get-name" "name" "let" "pref")}
      {Lisp-Entry "add-depot" #f 78 13 78 22 ("Depots" "table-set!" "instantiate-preferences" "depot" "remove-depot" "get-depot" "when" "get-name" "name" "let" "pref")}
      {Lisp-Entry "remove-depot" #f 86 13 86 25 ("Depots" "table-clear" "error" "when" "get-depot" "not" "if" "error?" "error?:" "name")}
      {Lisp-Entry "require-depot" #f 98 20 98 33 ("error" "null?" "if" "get-depot" "either" "name")}
      {Lisp-Entry "get-depot" #f 105 20 105 29 ("table-set!" "instantiate-preferences" "depot" "get-active?" "and" "depot-preferences" "let" "Depots" "table-ref" "when" "get-active" "essay" "either" "preferences" "pref" "let*" "name")}
      {Lisp-Entry "instantiate-preferences" #f 121 20 121 43 ("new-depot" "get-name" "name" "depot-class" "class" "get-application" "appl" "let" "pref")}
      {Lisp-Entry "new-depot" #f 128 20 128 29 ("name:" "new" "name" "pref" "class")}
      {Lisp-Entry "for-each-depot-preferences" #f 137 20 137 46 ("get-children" "for-each" "when" "preferences" "pref" "let" "proc")}
      {Lisp-Entry "find-depot" #f 143 20 143 30 ("get-name" "get-depot" "continuation-return" "in-depot?" "when" "pref" "for-each-depot-preferences" "return" "function" "continuation-capture" "pathname")}
      {Lisp-Entry "find-moniker" #f 153 20 153 32 ("file->path" "Depot-Moniker" "new" "essay" "find-depot" "depot" "let" "pathname")}}})
"_designer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "_designer.jazz"} 1226584775
    {Lisp-Entry "jazz.designer" #f 37 9 37 22 ("jazz")}})
"_development"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "development" "_development.jazz"} 1226584778
    {Lisp-Entry "jazz.development" #f 37 9 37 25 ("jazz")
      {Lisp-Entry "Interactive-Object" #f 61 19 61 37 ()}
      {Lisp-Entry "in" #f 65 20 65 22 ("Interactive-Object" "set!" "object")}
      {Lisp-Entry "hex" #f 69 20 69 23 ("format" "n")}
      {Lisp-Entry "iter-list" #f 81 13 81 22 ("cdr" "iter-list" "car" "when" "proc" "lst")}
      {Lisp-Entry "iter-node" #f 87 13 87 22 ("get-children" "for-each" "function" "iter" "letrec" "proc" "node")}
      {Lisp-Entry "iter" #f 95 13 95 17 ("iter-node" "JML-Node" "is?" "iter-list" "null/pair?" "cond" "proc" "obj")}
      {Lisp-Entry "foldl-list" #f 100 13 100 23 ("car" "cdr" "foldl-list" "not" "if" "s" "f" "x")}
      {Lisp-Entry "foldr-list" #f 106 13 106 23 ("cdr" "foldr-list" "car" "not" "if" "s" "f" "x")}
      {Lisp-Entry "foldl-node" #f 112 13 112 23 ("foldl-node" "c" "function" "get-children" "foldl" "s" "f" "x")}
      {Lisp-Entry "foldr-node" #f 119 13 119 23 ("s" "f" "x")}
      {Lisp-Entry "foldl-component" #f 123 13 123 28 ("foldl-component" "c" "function" "get-children" "foldl" "s" "f" "x")}
      {Lisp-Entry "foldr-component" #f 130 13 130 28 ("s" "f" "x")}
      {Lisp-Entry "foldl" #f 134 13 134 18 ("foldl-component" "Component" "foldl-node" "JML-Node" "is?" "foldl-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "foldr" #f 140 13 140 18 ("foldr-component" "Component" "foldr-node" "JML-Node" "is?" "foldr-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "iter-map" #f 146 13 146 21 ("get-output" "put" "x" "function" "iter" "List-Factory" "new" "fact" "let" "obj" "proc")}
      {Lisp-Entry "iter-linearize" #f 154 13 154 27 ("identity" "iter-map" "obj")}
      {Lisp-Entry "fold-map" #f 158 13 158 21 ("cons" "lst" "x" "function" "foldr" "obj" "proc")}
      {Lisp-Entry "foldl-map" #f 165 13 165 22 ("cons" "lst" "x" "function" "foldl" "obj" "proc")}
      {Lisp-Entry "fold-linearize" #f 172 13 172 27 ("identity" "fold-map" "obj")}
      {Lisp-Entry "fold" #f 176 13 176 17 ("fold-component" "Component" "fold-node" "JML-Node" "is?" "foldl-list" "null/pair?" "cond" "s" "f" "x")}
      {Lisp-Entry "fold-node" #f 182 13 182 22 ("get-children" "fold-node" "c" "function" "for-each" "ps" "let" "s" "f" "x")}
      {Lisp-Entry "fold-component" #f 190 13 190 27 ("get-children" "fold-component" "c" "function" "for-each" "ps" "let" "s" "f" "x")}
      {Lisp-Entry "component->jml" #f 198 13 198 27 ("component-self->jml" "fold" "x")}
      {Lisp-Entry "component-self->jml" #f 204 13 204 32 ("object->serial" "serial" "'serial" "get-size" "size" "'size" "get-position" "Figure" "is?" "essay" "position" "'position" "get-name" "name" "'name" "list" "properties:" "class-of" "type-name" "identifier-name" "JML-Element" "new" "p" "c")}
      {Lisp-Entry "component-ascendants->jml" #f 214 13 214 38 ("find-toplevel" "if" "get-parent" "parent" "let" "component-self->jml" "component->jml" "define" "c")}
      {Lisp-Entry "pprint-component" #f 230 13 230 29 (":console" "component->jml" "pretty-print" "x")}
      {Lisp-Entry "pprint-component-ascendants" #f 236 13 236 40 (":console" "component-ascendants->jml" "pretty-print" "x")}
      {Lisp-Entry "ppc" #f 247 13 247 16 ("unspecified" "pprint-component" "c")}
      {Lisp-Entry "ppa" #f 252 13 252 16 ("unspecified" "pprint-component-ascendants" "c")}
      {Lisp-Entry "inspect" #f 262 20 262 27 ("cons" "client:" "get-local-process" "process:" "host-title:" "Inspector-View" "new-frame" "format" "title" "get-application" "appl" "let" ":value" "kind" "object")}
      {Lisp-Entry "inspect-form" #f 268 20 268 32 ("0" "print-form" "Form-Printer" "new" "printer" "get-form" "Form" "is?" "if" "form" "let" "output" "function" "with-text-inspector" "form/component")}
      {Lisp-Entry "inspect-branches" #f 277 20 277 36 ("0" "print-form" "Form-Printer" "new" "printer" "not" "get-restore-form" "form" "get-name" "format" "set!" "if" "branch" "for-each-branch" "first?" "let" "output" "function" "with-text-inspector" "component")}
      {Lisp-Entry "with-text-inspector" #f 295 13 295 32 ("set-visible?" "bring-to-front" "set-modified?" "text-beginning" "set-caret" "get-controller" "set-moniker" "get-guest" "text" "host-workspace:" "host-visible?:" "Jazz-Text-View" "new-frame" "frame" "selected-workspace" "get-name" "workspace" "let*" "parse" "call-with-output-file" "create-temporary-file" "file" "let" "proc")}
      {Lisp-Entry "with-text-inspector" #f 310 13 310 32 ("set-visible?" "bring-to-front" "set-modified?" "text-beginning" "set-caret" "Text-Printer" "new" "output" "get-guest" "text" "host-workspace:" "host-visible?:" "Jazz-Text-View" "new-frame" "frame" "selected-workspace" "get-name" "workspace" "let*" "proc")}
      {Lisp-Entry "design" #f 328 20 328 26 ("client:" "new-frame" "Manager-View" "'Manager-View" "View-Editor" "'View-Editor" "autoload" "View" "is?" "editor" "new" "class?" "if" "component" "let" "class/component")}
      {Lisp-Entry "rsw" #f 339 20 339 23 ("name")}
      {Lisp-Entry "rsp" #f 343 20 343 23 ("Palettes" "table-set!" "name")}
      {Lisp-Entry "cc" #f 352 20 352 22 ("initial-color:" "Color-Request" "get-modal" "dispatch" "Color" "is?" "not" "or" "if" "color" "let" "color-or-name")}
      {Lisp-Entry "cf" #f 357 20 357 22 ("choose-file")}
      {Lisp-Entry "cmf" #f 361 20 361 23 ("multiple-selection?:" "choose-file")}
      {Lisp-Entry "cnf" #f 365 20 365 23 ("choose-new-file")}
      {Lisp-Entry "cd" #f 369 20 369 22 ("choose-directory")}
      {Lisp-Entry "cp" #f 373 20 373 22 ("user-message" "set-clipboard-text" "cd" "get-list" "format" "path" "let")}
      {Lisp-Entry "md" #f 380 20 380 22 ("get-modal" "class")}
      {Lisp-Entry "compile-classes" #f 389 20 389 35 ("format-plural" "format" "message-box" "increase!" "compile-moniker" "get-manifest-source" "file" "let" "class-name" "function" "for-each" "get-workbench-manager" "workbench-manager" "get-application" "appl" "0" "compiled" "let*" "compile-classes" "'compile-classes" "unimplemented" "rest" "class-names")}
      {Lisp-Entry "find-files" #f 410 20 410 30 ("debug" "match" "when" "get-name" "name" "file" "function" "iterate-directory" "Regular-Expression" "new" "regexp" "let" "directory" "pattern")}
      {Lisp-Entry "rename-files" #f 419 20 419 32 (":bulleted" "list" "map" "augment" "when" "format-plural" "format" "cons" "message-box" "get-output" "directories?:" "files?:" "increase!" "move-pathname" "get-directory" "new-file" "replace" "new-name" "put" "null?" "if" "match" "get-name" "name" "let*" "file" "function" "iterate-directory" "List-Factory" "failed" "0" "succeeded" "replacement-regexp" "Regular-Expression" "new" "find-regexp" "title:" "choose-directory" "directory" "let" "replacement" "find")}
      {Lisp-Entry "Receiver-View" #f 452 7 452 20 ("Dark" "name:" "Color" "background:" "View")
        {Lisp-Entry "invite" #f 455 12 455 18 ("set-invite" "get-invite")}
        {Lisp-Entry "receiver" #f 456 12 456 20 ("generate")}
        {Lisp-Entry "get-invite" #f 463 18 463 28 ("invite")}
        {Lisp-Entry "set-invite" #f 467 18 467 28 ("invalidate-view" "invite" "set!" "value")}
        {Lisp-Entry "receive-files" #f 472 11 472 24 ("self" "receiver" "files" "pos")}
        {Lisp-Entry "Background-Font" #f 476 14 476 29 ("Heading1" "name:" "Font")}
        {Lisp-Entry "draw" #f 480 11 480 15 ("Gray" "get-v" "2" "get-h" "+" "draw-text" "Black" "name:" "Color" "set-text-color" "get-display-size" "center" "pos" "get-text-extent" "extent" "invite" "either" "localize" "title" "let*" "Background-Font" "set-font" "lv" "lh" "context" "surface")}}
      {Lisp-Entry "setup-receiver" #f 493 13 493 27 ("receiver:" "224" "434" "Dimension" "host-size:" "169" "219" "Point" "host-position:" "either" "host-title:" "Receiver-View" "new-palette" "invite" "invite:" "size" "size:" "position" "position:" "title" "title:" "receiver")}
      {Lisp-Entry "rer" #f 508 20 508 23 ("match" "Regular-Expression" "new" "replace" "string" "to" "from")}
      {Lisp-Entry "class-instances" #f 518 20 518 35 ("class-live-instances" "live:" "class-all-instances" "all:" "list" "class")}
      {Lisp-Entry "reporting-allocations" #f 523 20 523 41 ("0" "/=" "bind" "info" "function" "collect-if" "-" "identity" "class" "type-name" "case" "list" "all" "after" "class-all-instances" "before" "zone-statistics" "car" "map" "classes" "let*" "name" "'name" "return" "return:" "proc" "result-proc" "zone")}
      {Lisp-Entry "icf" #f 542 20 542 23 ("location:" "last-break:" "last-call:" "last-eval:" "list" "object-location" "location" "tlf" "toplevel" "function-container" "container" "closure-function" "function" "frame-procedure" "closure" "either" "object" "binder-last-break" "last-break" "binder-last-call" "last-call" "binder-last-eval" "last-eval" "get-address" "address" "get-thread" "thread" "let*" "frame")}
      {Lisp-Entry "tlf" #f 558 13 558 16 ("tlf" "null?" "if" "function-container" "container" "let" "function")}
      {Lisp-Entry "debug-table" #f 571 20 571 31 ("0" "display-table" "set-current-request" "get-sql-console-text" "text" "let" "250" "max-display" "max-display:" "name" "name:" "table")}
      {Lisp-Entry "?" #f 583 8 583 9 ()}
      {Lisp-Entry "%" #f 584 8 584 9 ()}
      {Lisp-Entry "?a" #f 587 8 587 10 ()}
      {Lisp-Entry "?b" #f 588 8 588 10 ()}
      {Lisp-Entry "?c" #f 589 8 589 10 ()}
      {Lisp-Entry "?d" #f 590 8 590 10 ()}
      {Lisp-Entry "?e" #f 591 8 591 10 ()}
      {Lisp-Entry "?f" #f 592 8 592 10 ()}
      {Lisp-Entry "?g" #f 593 8 593 10 ()}
      {Lisp-Entry "?h" #f 594 8 594 10 ()}
      {Lisp-Entry "?i" #f 595 8 595 10 ()}
      {Lisp-Entry "?j" #f 596 8 596 10 ()}
      {Lisp-Entry "?k" #f 597 8 597 10 ()}
      {Lisp-Entry "?l" #f 598 8 598 10 ()}
      {Lisp-Entry "?m" #f 599 8 599 10 ()}
      {Lisp-Entry "?n" #f 600 8 600 10 ()}
      {Lisp-Entry "?o" #f 601 8 601 10 ()}
      {Lisp-Entry "?p" #f 602 8 602 10 ()}
      {Lisp-Entry "?q" #f 603 8 603 10 ()}
      {Lisp-Entry "?r" #f 604 8 604 10 ()}
      {Lisp-Entry "?s" #f 605 8 605 10 ()}
      {Lisp-Entry "?t" #f 606 8 606 10 ()}
      {Lisp-Entry "?u" #f 607 8 607 10 ()}
      {Lisp-Entry "?v" #f 608 8 608 10 ()}
      {Lisp-Entry "?w" #f 609 8 609 10 ()}
      {Lisp-Entry "?x" #f 610 8 610 10 ()}
      {Lisp-Entry "?y" #f 611 8 611 10 ()}
      {Lisp-Entry "?z" #f 612 8 612 10 ()}
      {Lisp-Entry "%a" #f 615 8 615 10 ()}
      {Lisp-Entry "%b" #f 616 8 616 10 ()}
      {Lisp-Entry "%c" #f 617 8 617 10 ()}
      {Lisp-Entry "%d" #f 618 8 618 10 ()}
      {Lisp-Entry "%e" #f 619 8 619 10 ()}
      {Lisp-Entry "%f" #f 620 8 620 10 ()}
      {Lisp-Entry "%g" #f 621 8 621 10 ()}
      {Lisp-Entry "%h" #f 622 8 622 10 ()}
      {Lisp-Entry "%i" #f 623 8 623 10 ()}
      {Lisp-Entry "%j" #f 624 8 624 10 ()}
      {Lisp-Entry "%k" #f 625 8 625 10 ()}
      {Lisp-Entry "%l" #f 626 8 626 10 ()}
      {Lisp-Entry "%m" #f 627 8 627 10 ()}
      {Lisp-Entry "%n" #f 628 8 628 10 ()}
      {Lisp-Entry "%o" #f 629 8 629 10 ()}
      {Lisp-Entry "%p" #f 630 8 630 10 ()}
      {Lisp-Entry "%q" #f 631 8 631 10 ()}
      {Lisp-Entry "%r" #f 632 8 632 10 ()}
      {Lisp-Entry "%s" #f 633 8 633 10 ()}
      {Lisp-Entry "%t" #f 634 8 634 10 ()}
      {Lisp-Entry "%u" #f 635 8 635 10 ()}
      {Lisp-Entry "%v" #f 636 8 636 10 ()}
      {Lisp-Entry "%w" #f 637 8 637 10 ()}
      {Lisp-Entry "%x" #f 638 8 638 10 ()}
      {Lisp-Entry "%y" #f 639 8 639 10 ()}
      {Lisp-Entry "%z" #f 640 8 640 10 ()}}})
"_dialect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "scheme" "dialect" "_dialect.scm"} 1226584790
    {Lisp-Entry "scheme.dialect" #f 37 9 37 23 ("core")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "_dialect.scm"} 1226584778
    {Lisp-Entry "jazz.dialect" #f 37 9 37 21 ("scheme")}})
"_dialog"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "_dialog.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog" #f 37 9 37 23 ("jazz")
      {Lisp-Entry "*current-modal*" #f 55 12 55 27 ()}
      {Lisp-Entry "current-modal" #f 59 20 59 33 ("*current-modal*")}
      {Lisp-Entry "set-current-modal" #f 62 20 62 37 ("*current-modal*" "set!" "dialog")}
      {Lisp-Entry "in-modal?" #f 66 20 66 29 ("current-modal")}
      {Lisp-Entry "end-modal-dialog" #f 70 20 70 36 ("current-modal" "end-modal" "result")}
      {Lisp-Entry "close-modal-dialog" #f 74 20 74 38 ("close-modal" "when" "current-modal" "dialog" "let" "action")}}})
"_diff"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "diff" "_diff.jazz"} 1226584778
    {Lisp-Entry "jazz.language.diff" #f 37 9 37 27 ("jazz")}})
"_doc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "_doc.jazz"} 1226584778
    {Lisp-Entry "jazz.doc" #f 37 9 37 17 ("jazz")}})
"_exception"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "exception" "_exception.scm"} 1226584773
    {Lisp-Entry "core.exception" #f 37 8 37 22 ()}})
"_exemplar"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "exemplar" "_exemplar.jazz"} 1226584781
    {Lisp-Entry "jazz.library.exemplar" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "exemplar=?" #f 45 22 45 32 ()}
      {Lisp-Entry "=" #f 45 34 45 35 ("get-base" "eq?" "node=?" "and" "e2" "e1")}
      {Lisp-Entry "Exemplar" #f 55 7 55 15 ("Node")
        {Lisp-Entry "domain" #f 58 18 58 24 ()}
        {Lisp-Entry "base" #f 59 18 59 22 ()}
        {Lisp-Entry "ascendant" #f 60 18 60 27 ()}
        {Lisp-Entry "inited?" #f 61 18 61 25 ("generate")}
        {Lisp-Entry "persistent?" #f 62 18 62 29 ()}
        {Lisp-Entry "initialize" #f 65 11 65 21 ("install" "when" "persistent?~self" "inited?~self" "ascendant~self" "base~self" "domain~self" "set!" "nextmethod" "apply" "others" "base" "domain" "bind-keywords" "rest")}
        {Lisp-Entry "copy-object" #f 77 11 77 22 ("base" "set-base-value" "domain" "set-domain-value" "nextmethod" "exemplar" "let" "deep?")}
        {Lisp-Entry "compare-object" #f 84 11 84 25 (":not-equal" "else" "get-base" "base" ":equal" "nextmethod" "=" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-exemplar" #f 94 11 94 24 ("owned-properties" "base" ",base" "',base" "base:" "name" ",name" "',name" "name:" ",class-name" "new" "class-name")}
        {Lisp-Entry "print" #f 101 11 101 16 ("owned-properties" "base" "base:" "name" "name:" "list" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "install" #f 115 11 115 18 ("init")}
        {Lisp-Entry "init" #f 119 11 119 15 ("setup-inherited" "domain" "locate" "ascendant" "set!" "base" "not" "if" "inited?" "unless")}
        {Lisp-Entry "setup-inherited" #f 128 11 128 26 ("node-properties" "ascendant" "get-value" "set-value" "owned" "memq?" "unless" "property" "function" "for-each")}
        {Lisp-Entry "inherits?" #f 135 18 135 27 ("continuation-return" "get-name" "when" "ascendant" "for-each-ascendant" "return" "function" "continuation-capture" "name" "eq?" "if" "target")}
        {Lisp-Entry "has-ascendant?" #f 147 18 147 32 ("self" "domain" "has-ascendant?" "base")}
        {Lisp-Entry "for-each-ascendant" #f 151 18 151 36 ("for-each-ascendant" "ascendant" "when" "proc")}
        {Lisp-Entry "extend" #f 157 18 157 24 ("install" "else" "set-inited?" "owned" "copy" "set-owned" "copy-properties" "base" "set-base-value" "name" "not" "cond" "set-domain-value" "self" "class-of" "new" "exemplar" "let" "domain" "domain:")}
        {Lisp-Entry "copy-properties" #f 171 11 171 26 ("node-properties" "get-value" "set-value" "property" "function" "for-each" "exemplar")}
        {Lisp-Entry "update" #f 182 21 182 27 ("update-descendants" "named?" "when" "init" "reset")}
        {Lisp-Entry "update-descendants" #f 189 11 189 29 ("self" "update-descendants" "domain" "when")}
        {Lisp-Entry "modify-from" #f 199 18 199 29 ("update" "get-persistent?" "persistent?" "get-owned" "copy" "owned" "node-properties" "get-value" "set-value" "property" "function" "for-each" "get-base" "base" "get-name" "name" "set!" "self" "eq?" "unless" "from")}
        {Lisp-Entry "reset" #f 216 11 216 16 ("set!" "node-properties" "reset-property" "for-each" "inited?" "when")}
        {Lisp-Entry "reset-property" #f 223 11 223 25 ("set-value" "owned" "memq?" "unless" "property")}
        {Lisp-Entry "set-domain-value" #f 233 25 233 41 ("domain" "set!" "d")}
        {Lisp-Entry "get-domain" #f 237 18 237 28 ("domain")}
        {Lisp-Entry "set-domain" #f 241 18 241 28 ("install" "domain" "set!" "d")}
        {Lisp-Entry "register" #f 246 18 246 26 ("self" "domain" "add")}
        {Lisp-Entry "set-base-value" #f 255 25 255 39 ("base" "set!" "b")}
        {Lisp-Entry "get-base" #f 259 18 259 26 ("base")}
        {Lisp-Entry "set-base" #f 263 18 263 26 ("update" "base" "set!" "b")}
        {Lisp-Entry "get-persistent?" #f 273 18 273 33 ("persistent?")}
        {Lisp-Entry "set-persistent?" #f 277 18 277 33 ("persistent?" "set!" "value")}}
      {Lisp-Entry "Exemplar-Domain" #f 286 7 286 22 ("Object")
        {Lisp-Entry "content" #f 289 18 289 25 ("0" "Axis" "new")}
        {Lisp-Entry "get-content" #f 297 18 297 29 ("content")}
        {Lisp-Entry "set-content" #f 301 18 301 29 ("Axis" "coerce" "content" "set!" "value")}
        {Lisp-Entry "empty-content" #f 305 18 305 31 ("named?" "not" "and" "exemplar" "function" "collect-if" "content" "set!" "remove-named?" "remove-named?:")}
        {Lisp-Entry "add" #f 316 18 316 21 ("content" "axis-add" "exemplar")}
        {Lisp-Entry "reference" #f 320 18 320 27 ("locate" "content" "element" "integer?" "if" "rank/name")}
        {Lisp-Entry "locate" #f 326 18 326 24 ("error" "when" "get-name" "exemplar" "function" "key:" "content" "find-in" "either" "error?" "error?:" "name")}
        {Lisp-Entry "similar" #f 333 18 333 25 ("exemplar=?" "test:" "content" "find-in" "self" "set-domain" "get-domain" "not" "when" "exemplar")}
        {Lisp-Entry "get-rank" #f 340 18 340 26 ("content" "find" "exemplar")}
        {Lisp-Entry "has-ascendant?" #f 349 18 349 32 ("continuation-return" "eq?" "when" "ascendant" "for-each-ascendant" "return" "function" "continuation-capture" "base" "exemplar")}
        {Lisp-Entry "update-descendants" #f 364 21 364 39 ("content" "update" "has-ascendant?" "when" "exemplar" "function" "for-each" "base")}
        {Lisp-Entry "collect-persistent" #f 376 18 376 36 ("content" "get-persistent?" "exemplar" "function" "collect-if")}}}})
"_font"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "font" "_font.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.font" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "cairo-font-table" #f 51 12 51 28 ("make-table")}
      {Lisp-Entry "cairo-add-font" #f 54 13 54 27 ("get-cairo-font" "foreign-address" "cairo-font-table" "table-set!" "ft")}
      {Lisp-Entry "cairo-get-font" #f 58 13 58 27 ("foreign-address" "cairo-font-table" "table-ref" "ft")}}})
"_freetype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "freetype" "_freetype.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.freetype" #f 37 9 37 31 ("ft-library" "FT_Init_FreeType" "FT_Face" "FT_Face*" "FT_Long" "char-string" "FT_Library" "FT_Library*" "jazz")
      {Lisp-Entry "FT_Long" #f 46 8 46 15 ("long")}
      {Lisp-Entry "FT_Library" #f 47 8 47 18 ("native")}
      {Lisp-Entry "FT_Library*" #f 48 8 48 19 ("FT_Library" "pointer")}
      {Lisp-Entry "FT_Face" #f 49 8 49 15 ("native")}
      {Lisp-Entry "FT_Face*" #f 50 8 50 16 ("FT_Face" "pointer")}
      {Lisp-Entry "FT_Init_FreeType" #f 52 17 52 33 ()}
      {Lisp-Entry "FT_New_Face" #f 53 17 53 28 ()}
      {Lisp-Entry "FT_Done_Face" #f 54 17 54 29 ()}
      {Lisp-Entry "make-FT_Library" #f 56 12 56 27 ("FT_Library" "c-function")}
      {Lisp-Entry "make-FT_Face" #f 57 12 57 24 ("FT_Face*" "c-function")}
      {Lisp-Entry "free-FT_Face" #f 59 12 59 24 ("void" "FT_Face*" "c-function")}
      {Lisp-Entry "ft-library" #f 61 12 61 22 ("make-FT_Library")}}})
"_gambit"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debuggers" "gambit" "_gambit.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debuggers.gambit" #f 37 9 37 39 ("jazz")}})
"_generic"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "generic" "_generic.scm"} 1226584774
    {Lisp-Entry "core.generic" #f 37 8 37 20 ()}})
"_git"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "depot" "git" "_git.jazz"} 1227441783
    {Lisp-Entry "jazz.depot.git" #f 37 9 37 23 ("jazz")
      {Lisp-Entry "*depot*" #f 44 12 44 19 ()}
      {Lisp-Entry "git-depot" #f 48 20 48 29 ("*depot*")}
      {Lisp-Entry "git-depot-set!" #f 52 20 52 34 ("*depot*" "set!" "repo")}
      {Lisp-Entry "git-clone" #f 61 20 61 29 ("Git-Depot" "new" "list" "git-command" "create-directories" "get-name" "name" "get-parent" "parent" "let" "address" "directory")}
      {Lisp-Entry "git-add" #f 69 20 69 27 ("git-depot" "git-add")}
      {Lisp-Entry "git-remove" #f 73 20 73 30 ("git-depot" "git-remove")}
      {Lisp-Entry "git-rename" #f 77 20 77 30 ("git-depot" "git-rename")}
      {Lisp-Entry "git-export" #f 81 20 81 30 ("git-depot" "git-export")}
      {Lisp-Entry "git-import" #f 85 20 85 30 ("git-depot" "git-import")}
      {Lisp-Entry "git-branch" #f 89 20 89 30 ("git-depot" "git-branch")}
      {Lisp-Entry "git-checkout" #f 93 20 93 32 ("git-depot" "git-checkout")}
      {Lisp-Entry "git-commit" #f 97 20 97 30 ("git-depot" "git-commit")}
      {Lisp-Entry "git-diff" #f 101 20 101 28 ("git-depot" "git-diff")}
      {Lisp-Entry "git-log" #f 105 20 105 27 ("git-depot" "git-log")}
      {Lisp-Entry "git-status" #f 109 20 109 30 ("git-depot" "git-status")}
      {Lisp-Entry "git-rollback" #f 113 20 113 32 ("git-depot" "git-rollback")}
      {Lisp-Entry "git-tag" #f 117 20 117 27 ("git-depot" "git-tag")}
      {Lisp-Entry "git-merge" #f 121 20 121 29 ("git-depot" "git-merge")}
      {Lisp-Entry "git-pull" #f 125 20 125 28 ("git-depot" "git-pull")}
      {Lisp-Entry "git-push" #f 129 20 129 28 ("git-depot" "git-push")}
      {Lisp-Entry "git-history" #f 133 20 133 31 ("git-depot" "git-history" "path")}
      {Lisp-Entry "git-extract" #f 138 20 138 31 ("git-depot" "git-extract" "path")}
      {Lisp-Entry "git-show" #f 142 20 142 28 ("git-depot" "git-show" "current-output-port" "output" "object")}
      {Lisp-Entry "git-command" #f 146 13 146 24 ("close-port" "pipe" "not" "if" "show-console:" "parse" "directory:" "arguments:" "path:" "list" "open-process" "port" "let" "current-output-port" "output" "directory" "arguments")}
      {Lisp-Entry "parse-patch-file" #f 159 20 159 36 ("error" "b-end" "b-comma" "b-start" "parse-integer" "1" "a-end" "a-comma" "a-start" "cardinality" "4" "str" "length" "either" "substring" "values" "2" "+" "find" "end" "start:" "search" "dotdot" "6" "start" "let*" "queue-list" "delta" "<" "or" "when" "both" "'both" "b" "'b" "increase!" "a" "'a" "cons" "enqueue" "case" "l" "read-char" "c" "iter-line" "lines" "b-cnt" "0" "a-cnt" "parse-range" "b-count" "b-line" "a-count" "a-line" "range" "iter-delta" "new-queue" "deltas" "parse-error" "equal?" "and" "b-name" "parse-name" "a-name" "parse-index" "b-index" "a-index" "receive" "read-line" "parse-diff" "starts-with?" "if" "not" "unless" "iter" "let" "line" "read-diff" "define" "reader" "function" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "proc" "patch-file")}
      {Lisp-Entry "Git-Depot" #f 244 7 244 16 ("Object")
        {Lisp-Entry "directory" #f 247 8 247 17 ("generate")}
        {Lisp-Entry "initialize" #f 250 11 250 21 ("directory" "set!" "nextmethod" "dir")}
        {Lisp-Entry "git" #f 260 11 260 14 ("directory" "git-command" "current-output-port" "output" "arguments")}
        {Lisp-Entry "git-add" #f 269 18 269 25 ("list" "git")}
        {Lisp-Entry "git-remove" #f 273 18 273 28 ()}
        {Lisp-Entry "git-rename" #f 277 18 277 28 ()}
        {Lisp-Entry "git-commit" #f 281 18 281 28 ()}
        {Lisp-Entry "git-rollback" #f 285 18 285 30 ("list" "git")}
        {Lisp-Entry "git-tag" #f 289 18 289 25 ("list" "git")}
        {Lisp-Entry "git-log" #f 293 18 293 25 ("list" "git")}
        {Lisp-Entry "git-status" #f 297 18 297 28 ("list" "git")}
        {Lisp-Entry "git-branch" #f 306 18 306 28 ()}
        {Lisp-Entry "git-checkout" #f 310 18 310 30 ()}
        {Lisp-Entry "git-import" #f 319 18 319 28 ("list" "git")}
        {Lisp-Entry "git-export" #f 323 18 323 28 ("list" "git")}
        {Lisp-Entry "git-diff" #f 327 18 327 26 ()}
        {Lisp-Entry "git-merge" #f 331 18 331 27 ()}
        {Lisp-Entry "git-history" #f 335 18 335 29 ("split-lines" "empty-string?" "not" "str" "function" "collect-if" "get-output-string" "commits" "list" "git" "open-output-string" "output" "let" "path")}
        {Lisp-Entry "git-extract" #f 344 18 344 29 ("reverse" "increase!" "git-show" "output" "parse" "call-with-output-file" "create-directories" "number->string" "format" "string-append" "list" "File" "new" "file" "extract-extension" "extension" "extract-base" "base" "extract-name" "filename" "user-message" "commit" "function" "for-each" "1" "version" "git-history" "history" "let" "path")}
        {Lisp-Entry "git-show" #f 362 18 362 26 ("list" "git" "current-output-port" "output" "object")}
        {Lisp-Entry "prepare-merge" #f 366 18 366 31 ("sort?:" "recursive?:" "directories?:" "files?:" "move-pathname" "iterate" "both" "'both" "b" "'b" "eq?" "or" "increase!" "read-line" "do" "-" "repeat" "loop" "result-count" "result-line" "target-count" "target-line" "delta" "1" "target-rank" "merged-output" "target-input" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "get-base" "base" "new-brother" "merged-file" "target-file" "apply-diff" "else" "write-line" "line" "what" "bind" "info" "for-each" "car" "fifth" "lines" "delete-file" "cond" "right-file" "setup-right" "copy-file" "left-file" "format" "debug" "not" "if" "directory" "working-file" "setup-left" "git-show" "printer" "parse" "call-with-output-file" "create-directories" "user-message" "exists?" "unless" "cons" "new-file" "base-file" "setup-base" "define" "split" "name-path" "either" "name" "deltas" "right-index" "right-name" "base-index" "base-name" "parse-patch-file" "ci=?" "when" "get-extension" "ext" "let" "file" "function" "iterate-directory" "merge-dir")}
        {Lisp-Entry "complete-merge" #f 468 18 468 32 ("merge-dir")}
        {Lisp-Entry "git-pull" #f 477 18 477 26 ()}
        {Lisp-Entry "git-push" #f 481 18 481 26 ()}}}})
"_groupware"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "_groupware.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware" #f 37 9 37 23 ("jazz")
      {Lisp-Entry "Green-Color" #f 46 10 46 21 ("blue:" "140" "green:" "0" "red:" "Color")}
      {Lisp-Entry "Blue-Color" #f 47 10 47 20 ("220" "blue:" "green:" "0" "red:" "Color")}}})
"_history"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "history" "_history.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.history" #f 37 9 37 24 ("jazz")
      {Lisp-Entry "track-history" #f 49 20 49 33 ("initiator:" "direction:" "manager:" "History-Menu" "track-popup-menu" "bell" "null?" "if" "get-history" "history" "get-size" "get-height" "0" "Point" "new" "pos" "let" "direction" "manager" "initiator" "sender")}
      {Lisp-Entry "get-history" #f 57 13 57 24 ("get-forward-history" "forward" "get-backward-history" "backward" "case" "direction" "manager")}}})
"_html"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "html" "_html.jazz"} 1226584778
    {Lisp-Entry "jazz.language.html" #f 37 9 37 27 ("jazz")}})
"_http"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "http" "_http.jazz"} 1226584783
    {Lisp-Entry "jazz.network.http" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "url-decode" #f 45 20 45 30 ("get-output-string" "else" "integer->char" "3" "1" "+" "subseq" "parse-hexadecimal" "value" "increase!" "write-char" "eqv?" "cond" "element" "c" "<" "while" "0" "n" "cardinality" "len" "open-output-string" "printer" "let" "string")}
      {Lisp-Entry "url-encode" #f 64 20 64 30 ("get-output-string" "write-char" "else" "char->integer" "memv?" "format" "eqv?" "cond" "c" "function" "for-each" "open-output-string" "printer" "let" "string")}}})
"_ide"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "_ide.jazz"} 1226584778
    {Lisp-Entry "jazz.ide" #f 37 9 37 17 ("jazz")}})
"_image"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "image" "_image.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.image" #f 37 9 37 22 ("jazz")
      {Lisp-Entry "load-image" #f 49 20 49 30 ("else" "Icon-Resource" "find-icon-file" "integer?" "cond" "icon" "error" "18" "cairo_surface_status" "=" "when" "cairo_image_surface_create_from_png" "handle" "parse" "ident" "find-bitmap-file" "resource?" "if" "let*" "bitmap" "case" "rest" "image" "type")}
      {Lisp-Entry "find-bitmap-file" #f 69 20 69 36 ("get-name" "bitmap" "'bitmap" "get-application" "get-resource" "object")}
      {Lisp-Entry "find-icon-file" #f 73 20 73 34 ("get-name" "icon" "'icon" "get-application" "get-resource" "object")}}})
"_inspector"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "inspector" "_inspector.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.inspector" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Unbound" #f 48 12 48 19 ("cons")}
      {Lisp-Entry "package-unbound" #f 52 20 52 35 ("Unbound")}
      {Lisp-Entry "package-info" #f 56 20 56 32 ("list" "128" "0" "subseq" "concatenate" "set!" "512" "cardinality" ">" "when" "more-value?" "context:" "frame:" "memq?" "or" "if" "more?" ":reader" "->string" "else" "cond" "presented" "object->serial" "serial" "Unbound" "eq?" "unbound?" "let*" ":value" "kind" "value" "name")}
      {Lisp-Entry "more-value?" #f 66 13 66 24 ("category?" "Field" "Number" "Char" "Boolean" "Symbol" "is-not?" "empty-string?" "null?" "not" "and" "value")}
      {Lisp-Entry "inspect-value" #f 82 20 82 33 ("inspect-slots" "else" "inspect-sequence" "Sequence" "inspect-table" "Table" "inspect-list" "List" "typecase" "value")}
      {Lisp-Entry "inspect-list" #f 90 13 90 25 ("get-output" "increase!" "rest" "'rest" "cdr" "set!" "car" "package-info" "put" "begin" "pair?" "if" "not-null?" "while" "0" "rank" "List-Factory" "new" "fact" "let" "lst")}
      {Lisp-Entry "inspect-table" #f 104 13 104 26 ("get-output" "package-info" "put" "value" "key" "function" "iterate-table" "List-Factory" "new" "fact" "let" "table")}
      {Lisp-Entry "inspect-sequence" #f 112 13 112 29 ("List" "coerce" "cardinality" "0" "naturals" "package-info" "map" "seq")}
      {Lisp-Entry "inspect-slots" #f 116 13 116 26 ("car" "key:" "<" "sort" "if" "slot-value" "else" "read-property" "property?" "cond" "field-name" "package-info" "slot" "function" "map" "infos" "all-slots" "slots" "class-of" "class" "let*" "object")}}})
"_io"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "io" "_io.jazz"} 1226584778
    {Lisp-Entry "jazz.io" #f 37 9 37 16 ("platform-separator" "substitute" "filename" "normalize-filename-separators" "lf" "'lf" "else" "cr-lf" "'cr-lf" "platform-eol-encoding" "definition" "windows" "cond-expand" "jazz")
      {Lisp-Entry "Aliases" #f 62 12 62 19 ()}
      {Lisp-Entry "get-aliases" #f 66 20 66 31 ("new-aliases" "set!" "Aliases" "unless")}
      {Lisp-Entry "new-aliases" #f 72 13 72 24 ("eq?" "test:" "make-table")}
      {Lisp-Entry "is-alias?" #f 76 20 76 29 ("get-manifest-source" "get-aliases" "table-ref" "or" "name")}
      {Lisp-Entry "get-alias" #f 81 20 81 29 ("error" "when" "find-alias" "either" "error?" "error?:" "name")}
      {Lisp-Entry "find-alias" #f 87 20 87 30 ("resolve-alias" "when" "get-process" "process" "let" "get-setting" "get-manifest-alias" "get-aliases" "table-ref" "either" "name")}
      {Lisp-Entry "get-manifest-alias" #f 99 13 99 31 ("get-list" "butlast" "not" "if" "get-manifest-source" "source" "let" "name")}
      {Lisp-Entry "register-alias" #f 106 20 106 34 ("set-alias" ":up" "second" "eq?" "2" "length" ">=" "pair?" "and" "if" "process-up" "get-list" "append" "cddr" "sub" "car" "list" "Directory" "new" "get-parent" "anchorize" "dir" "let" "expand-up" "define" "path" "name")}
      {Lisp-Entry "set-alias" #f 122 20 122 29 ("get-aliases" "table-set!" "path" "name")}
      {Lisp-Entry "validate-component" #f 131 23 131 41 ("else" "cdr" "car" "if" "pair?" "symbol?" "error" "equal?" "when" "string?" "null?" "cond" "function" "validate" "letrec" "original" "let" "object")}
      {Lisp-Entry "extract-name" #f 149 20 149 32 ("cardinality" "1" "+" "subseq" "not" "if" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "extract-base" #f 156 20 156 32 ("0" "subseq" "not" "if" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "extract-extension" #f 163 20 163 37 ("cardinality" "1" "+" "subseq" "when" "reversed?:" "find" "pos" "let" "filename")}
      {Lisp-Entry "tokenise-filename" #f 178 20 178 37 ("cdr" "remove-empty-strings" ":root" "cons" "car" "empty-string?" "if" "normalize-filename-separators" "split" "lst" "let" "filename")}
      {Lisp-Entry "tokenise-windows" #f 185 20 185 36 ("cardinality" "2" "subseq" "split" "remove-empty-strings" "Network" "'Network" "cons" "starts-with?" "if" "filename")}
      {Lisp-Entry "get-tmp-directory" #f 191 20 191 37 ("tokenise-windows" "Directory" "new" "make-string" "path" "NULL" "0" "GetTempPath" "size" "let*" "get-tmp-directory" "'get-tmp-directory" "unimplemented")}
      {Lisp-Entry "get-protocol-handler" #f 205 20 205 40 ("format" "message:" "Parse-Error" "new" "signal" "else" "Directory" "dir" "File" "file" "case" "keyword->symbol" "keyword?" "if" "let" "protocol")}
      {Lisp-Entry "Moniker-Class" #f 218 7 218 20 ("Class")
        {Lisp-Entry "get-protocol" #f 221 26 221 38 ()}}
      {Lisp-Entry "Moniker" #f 225 7 225 14 ("Object" "Moniker-Class")
        {Lisp-Entry "compare-pathname" #f 228 26 228 42 ("object")}
        {Lisp-Entry "present" #f 237 26 237 33 ()}
        {Lisp-Entry "present-base" #f 241 26 241 38 ("get-base" "->string")}
        {Lisp-Entry "present-name" #f 245 26 245 38 ("get-name" "->string")}
        {Lisp-Entry "present-location" #f 249 26 249 42 ("get-list" "format")}
        {Lisp-Entry "exists?" #f 258 26 258 33 ()}
        {Lisp-Entry "read-only?" #f 262 18 262 28 ("get-writable?" "not")}
        {Lisp-Entry "read/write?" #f 266 18 266 29 ("get-writable?")}
        {Lisp-Entry "set-read-only" #f 270 18 270 31 ("set-writable?")}
        {Lisp-Entry "set-read/write" #f 274 18 274 32 ("set-writable?")}
        {Lisp-Entry "get-writable?" #f 278 26 278 39 ()}
        {Lisp-Entry "set-writable?" #f 282 26 282 39 ("flag")}
        {Lisp-Entry "writable?" #f 286 26 286 35 ()}
        {Lisp-Entry "get-modification-time" #f 290 26 290 47 ()}
        {Lisp-Entry "get-file" #f 294 26 294 34 ()}
        {Lisp-Entry "get-name" #f 298 26 298 34 ()}
        {Lisp-Entry "get-base" #f 302 26 302 34 ()}
        {Lisp-Entry "get-extension" #f 306 26 306 39 ()}
        {Lisp-Entry "get-list" #f 310 26 310 34 ()}
        {Lisp-Entry "get-parent" #f 314 26 314 36 ()}
        {Lisp-Entry "get-hierarchy" #f 318 18 318 31 ("cons" "get-parent" "not" "if" "hierarchy" "self" "moniker" "loop" "let")}
        {Lisp-Entry "get-content" #f 325 26 325 37 ("rest")}
        {Lisp-Entry "get-children" #f 330 26 330 38 ("rest")}
        {Lisp-Entry "is-different?" #f 334 26 334 39 ("moniker")}
        {Lisp-Entry "relocated-list" #f 338 18 338 32 ("length" "tail" "get-list" "append" "new-root" "old-root")}
        {Lisp-Entry "load-lines" #f 347 26 347 36 ("rest")}
        {Lisp-Entry "save-lines" #f 351 26 351 36 ("rest" "lines")}
        {Lisp-Entry "load-form" #f 355 26 355 35 ()}}
      {Lisp-Entry "Pathname-Class" #f 382 7 382 21 ()}
      {Lisp-Entry "Pathname" #f 385 7 385 15 ("Moniker" "Pathname-Class")
        {Lisp-Entry "path" #f 388 8 388 12 ()}
        {Lisp-Entry "initialize" #f 391 11 391 21 ("set-list" "validate-component" "nextmethod" "lst")}
        {Lisp-Entry "parse" #f 397 18 397 23 ("get-output-string" "pathname-expand" "add-suffix" "get-list" "else" "cdr" "car" "pair?" "get-alias" "is-alias?" "cons" "self" "error" "memq?" "symbol?" "set!" "if" "string?" "display" ":root" "eq?" "null?" "cond" "path" "function" "parse" "letrec" "aliases" "first?" "open-output-string" "printer" "let" "separator" "bind-optionals" "rest")}
        {Lisp-Entry "platform-parse" #f 429 18 429 32 ("platform-separator" "parse")}
        {Lisp-Entry "add-suffix" #f 433 29 433 39 ("printer")}
        {Lisp-Entry "relocated-pathname" #f 437 18 437 36 ("length" "tail" "get-list" "append" "new-root" "old-root")}
        {Lisp-Entry "move-pathname" #f 441 18 441 31 ("parse" "file-rename" "error?" "error?:" "dst")}
        {Lisp-Entry "compare-object" #f 445 11 445 25 (":not-equal" "else" ":equal" "get-list" "=" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "compare-pathname" #f 454 11 454 27 ("parse" "ci=?" "Pathname" "is?" "and" "object")}
        {Lisp-Entry "valid-aliases?" #f 459 18 459 32 ("get-list" "get-alias" "is-alias?" "and" "symbol?" "not" "item" "every?" "eq?" "or" "list" "function" "valid?" "letrec")}
        {Lisp-Entry "expand" #f 471 18 471 24 ("get-output" "get-list" "cdr" "car" "pair?" "get-alias" "symbol?" "string?" "put" ":root" "eq?" "cond" "object" "function" "expand" "letrec" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "get-list" #f 486 18 486 26 ("path")}
        {Lisp-Entry "set-list" #f 490 18 490 26 ("path" "set!" "value")}
        {Lisp-Entry "get-name" #f 494 11 494 19 ("get-list" "effective-name")}
        {Lisp-Entry "effective-name" #f 498 11 498 25 ("else" "get-alias" "effective-name" "symbol?" ":root" "eq?" "cond" "last" "name" "let" "lst")}
        {Lisp-Entry "get-base" #f 508 11 508 19 ("extract-base" "symbol?" "if" "get-name" "name" "let")}
        {Lisp-Entry "get-extension" #f 515 11 515 24 ("get-name" "extract-extension")}
        {Lisp-Entry "get-parent" #f 519 11 519 21 ("butlast" "Directory" "new" "cdr" "null?" "or" "expand" "1" "path" "length" "=" "if" "effective-path" "let")}
        {Lisp-Entry "get-brother" #f 526 18 526 29 ("list" "get-parent" "get-list" "append" "self" "class-of" "new" "name")}
        {Lisp-Entry "new-brother" #f 530 26 530 37 ("name")}
        {Lisp-Entry "get-directory" #f 534 26 534 39 ()}
        {Lisp-Entry "get-attributes" #f 538 18 538 32 ("self" "error" "when" "-1" "=" "if" "parse" "GetFileAttributes" "attributes" "let" "get-attributes" "'get-attributes" "unimplemented" "error?" "error?:")}
        {Lisp-Entry "set-attributes" #f 548 18 548 32 ("self" "error" "not" "when" "parse" "SetFileAttributes" "ok?" "let" "set-attributes" "'set-attributes" "unimplemented" "flags")}
        {Lisp-Entry "get-writable?" #f 556 11 556 24 ("FILE_ATTRIBUTE_READONLY" "get-attributes" "mask-bit-set?" "not")}
        {Lisp-Entry "set-writable?" #f 562 11 562 24 ("not" "FILE_ATTRIBUTE_READONLY" "get-attributes" "mask-bit-set" "set-attributes" "set-writable?" "'set-writable?" "unimplemented" "flag")}
        {Lisp-Entry "exists?" #f 568 11 568 18 ("parse" "file-exists?")}
        {Lisp-Entry "create-directories" #f 572 18 572 36 ("create" "exists?" "unless" "dir" "function" "for-each" "get-parent" "cons" "set!" "while" "dirs" "expand" "Directory" "new" "scan" "get-directory" "base" "let*")}
        {Lisp-Entry "anchor-to" #f 591 18 591 27 ("class-of" "new" "subseq" "append" "else" "continuation-return" "self" "error" "if" "<" "set!" "not" "cond" "return" "function" "continuation-capture" "unspecified" "result-list" "ci=?" "test:" "mismatch" "rank" "expd" "length" "base-length" "expand" "base-expd" "get-list" "base-list" "let*" "error?" "error?:" "anchor")}
        {Lisp-Entry "anchorize" #f 611 18 611 27 ("car" "self" "null?" "get-list" "length" "path" "key:" "<" "sort" "sorted" "error?:" "anchor-to" "valid-aliases?" "when" "anchor" "function" "collect" "anchored" "default-anchors" "not" "if" "let*" "anchors" "anchors:")}
        {Lisp-Entry "default-anchors" #f 620 11 620 26 ("get-application" "application-anchors")}}
      {Lisp-Entry "pathname?" #f 624 27 624 36 ("Pathname" "is?" "object")}
      {Lisp-Entry "pathname=?" #f 628 27 628 37 ("compare-pathname" "y" "x")}
      {Lisp-Entry "pathname-exists?" #f 632 27 632 43 ("parse" "file-exists?" "pathname")}
      {Lisp-Entry "pathname-delete" #f 636 27 636 42 ("parse" "file-delete" "pathname")}
      {Lisp-Entry "pathname-modification-time" #f 640 27 640 53 ("parse" "file-modification-time" "pathname")}
      {Lisp-Entry "File-Class" #f 649 7 649 17 ()
        {Lisp-Entry "get-protocol" #f 652 11 652 23 ("file" "'file")}}
      {Lisp-Entry "create-temporary-file" #f 656 20 656 41 ("tokenise-windows" "File" "new" "adjust-string" "0" "GetTempFileName" "MAX_PATH" "make-string" "filename" "let" "error" "empty-string?" "if" "parse" "dir" "get-tmp-directory" "either" "let*" "create-temporary-file" "'create-temporary-file" "unimplemented" "prefix" "prefix:" "directory" "directory:")}
      {Lisp-Entry "File" #f 669 7 669 11 ("Pathname" "File-Class")
        {Lisp-Entry "fold-literal" #f 672 11 672 23 ("path" ",path" "',path" "File" "new")}
        {Lisp-Entry "print" #f 676 11 676 16 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "new-brother" #f 687 11 687 22 ("get-parent" "new-file" "name")}
        {Lisp-Entry "present" #f 691 11 691 18 ("get-list" "format")}
        {Lisp-Entry "get-file" #f 700 11 700 19 ("self")}
        {Lisp-Entry "get-directory" #f 704 11 704 24 ("get-parent")}
        {Lisp-Entry "copy-file" #f 708 18 708 27 ("parse" "file-copy" "delete-file" "exists?" "and" "when" "overwrite-read-only" "overwrite-read-only?" "overwrite-read-only?:" "overwrite?" "overwrite?:" "dst")}
        {Lisp-Entry "delete-file" #f 715 18 715 29 ("parse" "file-delete" "overwrite-read-only" "self" "error" "when" "exists?" "not" "if" "error?" "error?:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "overwrite-read-only" #f 723 11 723 30 ("set-read/write" "read-only?" "exists?" "and" "when" "overwrite-read-only?")}
        {Lisp-Entry "get-size" #f 729 18 729 26 ("readable?:" "self" "File-Reader" "new" "reader" "with-closed" "get-size" "'get-size" "unimplemented")}
        {Lisp-Entry "get-modification-time" #f 736 11 736 32 ("parse" "file-modification-time" "floor" "inexact->exact" "seconds->time")}
        {Lisp-Entry "set-modification-time" #f 740 18 740 39 ("set-attributes" "NULL" "get-handle" "SetFileTime" "printer" "function" "append" "'append" "mode:" "parse" "list" "call-with-output-file" "set-read/write" "get-attributes" "at" "get-filetime" "ft" "let" "set-modification-time" "'set-modification-time" "unimplemented" "time")}
        {Lisp-Entry "touch" #f 753 18 753 23 ("universal-date" "get-time" "set-modification-time" "touch" "'touch" "unimplemented")}
        {Lisp-Entry "get-hidden?" #f 759 18 759 29 ("FILE_ATTRIBUTE_HIDDEN" "get-attributes" "mask-bit-set?" "get-hidden?" "'get-hidden?" "unimplemented")}
        {Lisp-Entry "set-hidden?" #f 765 18 765 29 ("FILE_ATTRIBUTE_HIDDEN" "get-attributes" "mask-bit-set" "set-attributes" "set-hidden?" "'set-hidden?" "unimplemented" "flag")}
        {Lisp-Entry "writable?" #f 771 11 771 20 ("CloseHandle" "INVALID_HANDLE_VALUE" "=" "if" "FILE_ATTRIBUTE_NORMAL" "OPEN_EXISTING" "NULL" "0" "GENERIC_WRITE" "parse" "CreateFile" "handle" "let" "writable?" "'writable?" "unimplemented")}
        {Lisp-Entry "clone-file" #f 781 18 781 28 ("get-base" "format" "list" "get-directory" "get-list" "append" "File" "new" "extension")}
        {Lisp-Entry "load-lines" #f 790 11 790 21 ("read-lines" "cr-lf" "'cr-lf" "eol-encoding:" "UTF" "'UTF" "either" "parse" "path:" "list" "call-with-input-file" "char-encoding-errors" "char-encoding-errors:" "char-encoding" "char-encoding:")}
        {Lisp-Entry "save-lines" #f 795 11 795 21 ("write-lines" "printer" "function" "platform-eol-encoding" "eol-encoding:" "UTF-8" "'UTF-8" "either" "parse" "path:" "list" "call-with-output-file" "char-encoding" "char-encoding:" "lines")}}
      {Lisp-Entry "file?" #f 801 27 801 32 ("File" "is?" "object")}
      {Lisp-Entry "timestamped-file" #f 805 20 805 36 ("1" "+" "exists?" "new-file" "file" "=" "suffix" "0" "n" "iterate" "current-date" "date->string" "timestamp" "format" "if" "prefix" "let" "ext" "base" "dir")}
      {Lisp-Entry "Directory-Class" #f 822 7 822 22 ()
        {Lisp-Entry "get-protocol" #f 825 11 825 23 ("dir" "'dir")}}
      {Lisp-Entry "Directory" #f 829 7 829 16 ("dot-and-dot-dot" "'dot-and-dot-dot" "ignore-hidden:" "path:" "list" "else" "directory-content" "path" "directory-content-patch" "definition" "windows" "cond-expand" "Pathname" "Directory-Class")
        {Lisp-Entry "fold-literal" #f 832 11 832 23 ("path" ",path" "',path" "Directory" "new")}
        {Lisp-Entry "print" #f 836 11 836 16 ("get-list" "format" "readably" "printer")}
        {Lisp-Entry "new-brother" #f 847 11 847 22 ("get-parent" "new-directory" "name")}
        {Lisp-Entry "present" #f 851 11 851 18 ("get-list" "format")}
        {Lisp-Entry "get-directory" #f 860 11 860 24 ("self")}
        {Lisp-Entry "get-modification-time" #f 864 11 864 32 ()}
        {Lisp-Entry "create" #f 868 26 868 32 ("parse" "directory-create")}
        {Lisp-Entry "new-file" #f 872 18 872 26 ("list" "null/pair?" "if" "get-list" "append" "File" "new" "name")}
        {Lisp-Entry "new-directory" #f 876 18 876 31 ("list" "null/pair?" "if" "get-list" "append" "Directory" "new" "name")}
        {Lisp-Entry "new-unique-file" #f 880 18 880 33 ("increase!" "either" "format" "set!" "while" "1" "suffix" "extract-extension" "ext" "extract-base" "base" "exists?" "not" "if" "new-file" "file" "let" "separator" "separator:" "name")}
        {Lisp-Entry "copy-directory" #f 893 18 893 32 ("recursive?:" "directories?:" "files?:" "Directory" "copy-directory" "touch" "copy-file" "new" "dest" "File" "is?" "if" "eq?" "or" "iterate-directory" "get-name" "list" "get-list" "append" "path" "function" "destination" "let" "create-directories" "self" "when" "copy?" "copy?:" "touch-files?" "touch-files?:" "feedback" "feedback:" "copier" "copier:" "dst")}
        {Lisp-Entry "delete-directory" #f 917 26 917 42 ("remove-directory" "empty-directory" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "empty-directory" #f 922 18 922 33 ("recursive?:" "directories?:" "files?:" "delete-directory" "delete-file" "File" "is?" "if" "path" "function" "iterate-directory" "feedback" "feedback:" "overwrite-read-only?" "overwrite-read-only?:")}
        {Lisp-Entry "remove-directory" #f 933 18 933 34 ("parse" "directory-delete")}
        {Lisp-Entry "foldable?" #f 937 11 937 20 ()}
        {Lisp-Entry "fold-object" #f 941 11 941 22 ("get-list" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "get-content" #f 948 18 948 29 ("get-output" "collect-leaves" "collect-nodes" "when" "List-Factory" "new" "fact" "let" "leaves?" "leaves?:" "nodes?" "nodes?:")}
        {Lisp-Entry "collect-nodes" #f 955 11 955 24 ("recursive?:" "directories?:" "files?:" "put" "item" "function" "iterate-directory" "fact")}
        {Lisp-Entry "collect-leaves" #f 964 11 964 25 ("recursive?:" "directories?:" "files?:" "put" "item" "function" "iterate-directory" "fact")}
        {Lisp-Entry "add-suffix" #f 978 11 978 21 ("write-char" "printer")}
        {Lisp-Entry "collect-files" #f 987 18 987 31 ("get-output" "recursive?:" "put" "when" "file" "function" "iterate-directory" "List-Factory" "new" "fact" "let" "predicate")}
        {Lisp-Entry "iterate-directory" #f 1002 26 1002 43 ("'directory" "Directory" "'file" "append" "File" "new" "file" "case" "kind" "list" "function" "parse" "iterate-directory-content" "get-list" "if" "directory" "let" "ignored-directories" "ignored-directories:" "recursive?" "recursive?:" "sort?" "sort?:" "directories?" "directories?:" "files?" "files?:" "full?" "full?:" "proc")}
        {Lisp-Entry "iterate-directory-content" #f 1011 11 1011 36 ("file" "'file" "files" "'files" "directory" "'directory" "concatenate" "list" "append" "iterate-directory-content" "when" "name" "function" "directories" "'directories" "iterate-content" "proc" "base" "prefix" "ignored-directories" "recursive?" "sort?" "directories?" "files?")}
        {Lisp-Entry "iterate-content" #f 1024 11 1024 26 ("for-each" "nu<?" "sort" "sorted" "cons" "set!" "object" "function" "list" "let" "iterate-content-unsorted" "not" "if" "proc" "ignored-directories" "sort?" "kind" "base")}
        {Lisp-Entry "iterate-content-unsorted" #f 1035 11 1035 35 ("directory-content-patch" "member?" "not" "directory" "'directory" "directories" "'directories" "regular" "'regular" "files" "'files" "eq?" "and" "or" "when" "string-append" "pathname-type" "type" "let" "name" "function" "for-each" "proc" "ignored-directories" "kind" "base")}
        {Lisp-Entry "count-files" #f 1055 18 1055 29 ("continuation-return" ">" "and" "increase!" "not" "or" "when" "file" "iterate-directory" "return" "function" "continuation-capture" "0" "count" "let" "max-count" "max-count:" "filter" "filter:")}}
      {Lisp-Entry "directory?" #f 1068 27 1068 37 ("Directory" "is?" "obj")}
      {Lisp-Entry "get-current-directory" #f 1072 20 1072 41 ("current-directory" "tokenise-filename" "Directory" "new")}
      {Lisp-Entry "set-current-directory" #f 1076 20 1076 41 ("parse" "current-directory-set!" "directory")}
      {Lisp-Entry "with-preserved-current-directory" #f 1080 20 1080 52 ("set-current-directory" "unwind-protect" "get-current-directory" "preserved" "let" "proc")}}})
"_java"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "_java.jazz"} 1226584778
    {Lisp-Entry "jazz.language.java" #f 37 9 37 27 ("jazz")}})
"_javascript"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "javascript" "_javascript.jazz"} 1226584779
    {Lisp-Entry "jazz.language.javascript" #f 37 9 37 33 ("jazz")}})
"_jazz"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "_jazz.scm"} 1226584774
    {Lisp-Entry "jazz" #f 37 9 37 13 ("scheme")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "_jazz.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz" #f 37 9 37 27 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debuggers" "jazz" "_jazz.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debuggers.jazz" #f 37 9 37 37 ("jazz")}})
"_jdbc"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "_jdbc.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc" #f 37 9 37 37 ("jazz")}})
"_jml"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jml" "_jml.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jml" #f 37 9 37 26 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "_jml.jazz"} 1227043164
    {Lisp-Entry "jazz.jml" #f 37 9 37 17 ("jazz")
      {Lisp-Entry "Autoclasses" #f 53 12 53 23 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-autoclass" #f 57 20 57 33 ("Autoclasses" "table-ref" "name")}
      {Lisp-Entry "set-autoclass" #f 61 20 61 33 ("Autoclasses" "table-set!" "class" "name")}
      {Lisp-Entry "register-autoclass" #f 65 20 65 38 ("type-name" "identifier-name" "set-autoclass" "class")}
      {Lisp-Entry "load-class" #f 69 13 69 23 ("autoload-class" "load-module" "module" "name")}
      {Lisp-Entry "autoload-class" #f 74 13 74 27 ("autoload" "get-autoload" "when" "get-autoclass" "either" "name")}
      {Lisp-Entry "parse-jml" #f 85 20 85 29 ("parse" "preferences:" "JML-Parser" "parser" "JML-Preferences" "either" "new" "pref" "let*" "parser-class" "parser-class:" "preferences-class" "preferences-class:" "jml")}
      {Lisp-Entry "transform-jml" #f 96 20 96 33 ("transform" "transformation" "node")}
      {Lisp-Entry "render-jml" #f 105 20 105 30 ("render" "JML-Renderer" "renderer" "JML-Preferences" "either" "new" "pref" "let*" "renderer-class" "renderer-class:" "preferences-class" "preferences-class:" "printer" "node")}
      {Lisp-Entry "parse-jml-properties/children" #f 116 20 116 49 ("get-output" "values" "when" "cdr" "cddr" "set!" "cadr" "extract-jml-property" "begin" "value" "property" "function" "put" "jml-keyword?" "or" "keyword?" "not" "and" "if" "car" "element" "not-null?" "while" "content" "List-Factory" "new" "properties" "scan" "let" "proper?" "proper?:" "keywords?" "keywords?:" "list")}
      {Lisp-Entry "extract-jml-property" #f 141 13 141 33 ("symbol->keyword" "not" "if" "keyword->string" "string->symbol" "symbol" "let" "keywords?" "keyword")}
      {Lisp-Entry "get-jml-property" #f 148 20 148 36 ("cddr" "set!" "cadr" "continuation-return" "car" "eqv?" "when" "not-null?" "while" "return" "function" "continuation-capture" "scan" "let" "not-found" "not-found:" "property" "list")}
      {Lisp-Entry "jml->form" #f 167 20 167 29 ("node->form" "parse" "node" "JML-Parser" "new" "parser" "let*" "expr")}
      {Lisp-Entry "jml->form>>" #f 173 20 173 31 ("setup-toplevel-context" "jml->form" "form" "let" "class" "expr")}
      {Lisp-Entry "read-jml" #f 179 20 179 28 ("read" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "file")}
      {Lisp-Entry "node->form" #f 184 20 184 30 ("cdr" "car" "set-children" "install" "'install" "client-form" "'client-form" "set-property" "begin" "null?" "branch-model?" "set-parent-value" "get-children" "map" "children" "extract-node-properties" "properties:" "tag-module" "'tag-module" "tag-module:" "tag-symbolic?:" "name:" "model-name:" "action:" "textual?:" "Form" "form" "'name" "get-property" "butlast" "string->symbol" "name" "memq?" "model-name" "new" "'new" "else" "locate" "'locate" "modify" "'modify" "eq?" "cond" "action" "or" "tag-symbolic?" "" "'" "tag-locate?" "ends-with?" "!" "'!" "neq?" "and" "tag-modify?" "symbol->string" "tag-name" "get-tag" "tag" "let*" "JML-Text" "is?" "if" "parent" "function" "node->form" "letrec" "node")}
      {Lisp-Entry "extract-node-properties" #f 217 13 217 36 ("get-output" "get-properties" "put" "tag-module" "tag-symbolic?" "name" "memq?" "not" "when" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let" "node")}
      {Lisp-Entry "form->node" #f 227 20 227 30 ("add-client-form" "branch-model?" "set-children" "set-properties" "get-children" "map" "children" "extract-form-properties" "properties" "JML-Element" "element" "" "'" "!" "'!" "new" "'install" "install" "locate" "modify" "case" "symbol->string" "string-append" "string->symbol" "tag" "get-tag-symbolic?" "symbolic?" "get-name" "name" "get-model-name" "model-name" "get-action" "action" "let*" "JML-Text" "is?" "if" "parent" "function" "form->node" "letrec" "form")}
      {Lisp-Entry "branch-model?" #f 250 13 250 26 ("Test-Model" "Test-Branch-Aux" "Test-Branch" "Heading-Slide" "Concept-Slide" "Documentation-Slide" "Basic-Slide" "Slide" "Design-Model" "Design-Diagram" "Branch" "memq?" "model-name")}
      {Lisp-Entry "add-client-form" #f 254 13 254 28 ("form->node" "cons" "not" "if" "'client-form" "get-property" "client-form" "let" "children" "form")}
      {Lisp-Entry "extract-form-properties" #f 261 13 261 36 ("get-output" "get-properties" "client-form" "'client-form" "neq?" "field-name" "property?" "if" "value" "property" "function" "for-each-property" "'tag-module" "'name" "put" "not" "and" "when" "get-tag-module" "tag-module" "get-name" "name" "List-Factory" "new" "fact" "let" "symbolic?" "form")}
      {Lisp-Entry "load-jml" #f 285 20 285 28 ("preferences:" "JML-Parser" "parser" "JML-Preferences" "new" "pref" "let*" "reader" "function" "jazz-readtable" "readtable:" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "file")}
      {Lisp-Entry "save-jml-to-clipboard" #f 293 20 293 41 ("set-clipboard-text" "get-output-string" "output" "pretty-print" "open-output-string" "printer" "let" "jml")}}})
"_jrm"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "_jrm.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm" #f 37 9 37 17 ("jazz")
      {Lisp-Entry "*debug?*" #f 44 12 44 20 ()}
      {Lisp-Entry "*debug-arguments?*" #f 47 12 47 30 ()}
      {Lisp-Entry "*debug-locally?*" #f 50 12 50 28 ()}
      {Lisp-Entry "Remoting-Host" #f 59 12 59 25 ()}
      {Lisp-Entry "Remoting-Service" #f 62 12 62 28 ("any" "'any")}
      {Lisp-Entry "remoting-server" #f 66 12 66 27 ()}
      {Lisp-Entry "get-remoting-server" #f 70 20 70 39 ("remoting-server")}
      {Lisp-Entry "set-remoting-server" #f 73 20 73 39 ("remoting-server" "set!" "server")}
      {Lisp-Entry "require-remoting-server" #f 77 20 77 43 ("error" "remoting-server" "not" "if")}
      {Lisp-Entry "start-remoting-server" #f 83 20 83 41 ("error" "set!" "error?:" "wait-started" "if" "start" "Remoting-Service" "service:" "Remoting-Host" "host:" "name:" "Remoting-Server" "new" "server" "let" "remoting-server" "unless")}
      {Lisp-Entry "stop-remoting-server" #f 92 20 92 40 ("set!" "stop" "remoting-server" "when")}
      {Lisp-Entry "Remote-Connection-Broke" #f 103 7 103 30 ("Exception")}
      {Lisp-Entry "throw-remote-connection-broke" #f 106 13 106 42 ("Remote-Connection-Broke" "new" "throw")}
      {Lisp-Entry "live-timeout" #f 115 12 115 24 ("0.5")}
      {Lisp-Entry "live-request" #f 118 12 118 24 ("live?" "'live?")}
      {Lisp-Entry "live-response" #f 121 12 121 25 ("alive" "'alive")}
      {Lisp-Entry "remote-proxy-live?" #f 125 13 125 31 ("live-response" "receive-remote-result" "eq?" "live-request" "send-remote-message" "with-exception-catcher" "port" "function" "port-number:" "server-address:" "list" "call-with-tcp-client" "live?" "'live?" "***remoting***" "'***remoting***" "terminal" "*debug?*" "when" "get-service" "service" "get-host" "host" "marshall" "proxy-ior" "let" "exc" "Remote-Connection-Broke" "catch" "remote-proxy")}
      {Lisp-Entry "send-timeout" #f 148 12 148 24 ("2" "make-parameter")}
      {Lisp-Entry "receive-timeout" #f 151 12 151 27 ("10" "make-parameter")}
      {Lisp-Entry "post-remote" #f 155 20 155 31 ("post" "'post" "invoke-remote" "arguments" "remote-proxy" "method-name")}
      {Lisp-Entry "exec-remote" #f 159 20 159 31 ("exec" "'exec" "invoke-remote" "arguments" "remote-proxy" "method-name")}
      {Lisp-Entry "call-remote" #f 163 20 163 31 ("call" "'call" "invoke-remote" "arguments" "remote-proxy" "method-name")}
      {Lisp-Entry "invoke-remote" #f 167 13 167 26 ("unmarshall" "call" "error" "if" "result" "err" "bind" "->" "'->" "'received" "receive-remote-result" "received" "exec" "unspecified" "post" "case" "send-remote-message" "port" "function" "port-number:" "server-address:" "list" "call-with-tcp-client" "*debug-arguments?*" "and" "invoke" "'invoke" "***remoting***" "'***remoting***" "terminal" "*debug?*" "when" "get-service" "service" "get-host" "host" "proxy-ior" "marshall" "let" "arguments" "remote-proxy" "method-name" "kind")}
      {Lisp-Entry "send-remote-message" #f 199 13 199 32 ("write-port" "throw-remote-connection-broke" "output-port-timeout-set!" "when" "send-timeout" "timeout" "let" "port" "info")}
      {Lisp-Entry "receive-remote-result" #f 206 13 206 34 ("throw-remote-connection-broke" "eof-object?" "if" "read-port" "info" "input-port-timeout-set!" "when" "receive-timeout" "timeout" "let" "port")}
      {Lisp-Entry "process-remote" #f 221 13 221 27 ("call" "unspecified" "marshall" "list" "return" "'return" "execute-remote" "result" "err" "receive" "exec" "dispatch-remote" "post" "case" "*debug-arguments?*" "and" "process" "'process" "***remoting***" "'***remoting***" "terminal" "*debug?*" "when" "arguments" "proxy-ior" "method-name" "kind" "bind" "live-response" "send-remote-result" "live-request" "eq?" "if" "receive-remote-message" "message" "let" "port")}
      {Lisp-Entry "execute-remote" #f 243 13 243 27 ("exception-reason" "display-continuation-backtrace" "display-exception" "exception" "'exception" "***remoting***" "'***remoting***" "terminal" "*debug?*" "when" "cont" "exc" "with-exception-handler" "return" "function" "continuation-capture" "dispatch-remote" "values" "*debug-locally?*" "if" "arguments" "proxy-ior" "method-name")}
      {Lisp-Entry "dispatch-remote" #f 261 13 261 28 ("dispatch" "apply" "local-proxy" "unmarshall" "let" "arguments" "proxy-ior" "method-name")}
      {Lisp-Entry "receive-remote-message" #f 268 13 268 35 ("throw-remote-connection-broke" "eof-object?" "if" "read-port" "info" "input-port-timeout-set!" "when" "receive-timeout" "timeout" "let" "port")}
      {Lisp-Entry "send-remote-result" #f 278 13 278 31 ("write-port" "throw-remote-connection-broke" "output-port-timeout-set!" "when" "send-timeout" "timeout" "let" "port" "info")}
      {Lisp-Entry "proxy?" #f 290 20 290 26 ("Proxy" "is?" "object")}
      {Lisp-Entry "proxy=?" #f 294 20 294 27 ("else" "local-proxy=?" "local-proxy?" "remote-proxy=?" "remote-proxy?" "and" "cond" "y" "x")}
      {Lisp-Entry "proxy-server=?" #f 303 20 303 34 ("else" "local-proxy?" "get-ior" "ior-server=?" "remote-proxy?" "and" "cond" "y" "x")}
      {Lisp-Entry "marshall-proxy" #f 313 13 313 27 ("marshall-local-proxy" "marshall-remote-proxy" "remote-proxy?" "if" "proxy")}
      {Lisp-Entry "local-proxy?" #f 324 13 324 25 ("Local-Proxy" "is?" "object")}
      {Lisp-Entry "local-proxy=?" #f 328 13 328 26 ("get-object" "eq?" "y" "x")}
      {Lisp-Entry "marshall-local-proxy" #f 333 13 333 33 ("proxy-values" "marshall" "local-proxy->reference" "stub-interface" "get-name" "identifier-name" "listening-port" "listening-host" "IOR" "new" "require-remoting-server" "server" "let" "local-proxy")}
      {Lisp-Entry "unmarshall-local-ior" #f 343 13 343 33 ("get-reference" "reference->local-proxy" "ior" "stub-interface")}
      {Lisp-Entry "remote-proxy?" #f 352 13 352 26 ("Remote-Proxy" "is?" "object")}
      {Lisp-Entry "remote-proxy=?" #f 356 13 356 27 ("get-ior" "ior=?" "y" "x")}
      {Lisp-Entry "marshall-remote-proxy" #f 361 13 361 34 ("get-ior" "marshall" "proxy")}
      {Lisp-Entry "unmarshall-remote-ior" #f 365 13 365 34 ("get-values" "unmarshall" "new" "remote-class" "let" "ior" "stub-interface")}
      {Lisp-Entry "local-register" #f 375 12 375 26 ()}
      {Lisp-Entry "get-local-register" #f 379 20 379 38 ("Register" "new-local-proxy" "set!" "local-register" "not" "when")}
      {Lisp-Entry "new-remote-register" #f 385 20 385 39 ("Register-Stub" "'Register-Stub" "IOR" "new" "unmarshall" "port" "host")}
      {Lisp-Entry "*Temp-Mega-Patch*" #f 395 12 395 29 ()}
      {Lisp-Entry "ior?" #f 399 20 399 24 ("IOR" "is?" "object")}
      {Lisp-Entry "local-ior?" #f 403 20 403 30 ("listening-port" "get-service" "service=?" "listening-host" "get-host" "host=?" "and" "require-remoting-server" "server" "let" "ior")}
      {Lisp-Entry "ior=?" #f 409 20 409 25 ("get-reference" "reference=?" "get-service" "service=?" "get-host" "host=?" "and" "y" "x")}
      {Lisp-Entry "ior-server=?" #f 415 20 415 32 ("get-service" "service=?" "get-host" "host=?" "and" "y" "x")}
      {Lisp-Entry "host=?" #f 420 13 420 19 ("equal?" "y" "x")}
      {Lisp-Entry "service=?" #f 424 13 424 22 ("eqv?" "y" "x")}
      {Lisp-Entry "reference=?" #f 428 13 428 24 ("eqv?" "y" "x")}
      {Lisp-Entry "local-proxy->reference" #f 432 13 432 35 ("object->serial" "cons" "*Temp-Mega-Patch*" "set!" "get-object" "object" "let" "local-register" "proxy=?" "if" "local-proxy")}
      {Lisp-Entry "reference->local-proxy" #f 440 13 440 35 ("serial->object" "local-class" "new" "local-register" "not" "if" "reference" "stub-interface")}
      {Lisp-Entry "unmarshall-ior" #f 446 20 446 34 ("unmarshall-remote-ior" "unmarshall-local-ior" "local-ior?" "if" "get-stub-interface" "autoload" "stub-interface" "let" "ior")}
      {Lisp-Entry "host->string" #f 453 20 453 32 ("3" "2" "1" "0" "u8vector-ref" "format" "host")}
      {Lisp-Entry "string->host" #f 461 20 461 32 ("split" "string->number" "map" "u8vector" "apply" "string")}
      {Lisp-Entry "port->string" #f 465 20 465 32 ("number->string" "port")}
      {Lisp-Entry "string->port" #f 469 20 469 32 ("string->number" "string")}
      {Lisp-Entry "marshall" #f 478 13 478 21 ("error" "else" "cdr" "car" "marshall" "cons" "pair?" "marshall-proxy" "proxy?" "Exception-Detail" "is?" "ior?" "unspecified?" "eq?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "object")}
      {Lisp-Entry "unmarshall" #f 513 13 513 23 ("error" "else" "cdr" "car" "unmarshall" "cons" "pair?" "unmarshall-ior" "ior?" "Exception-Detail" "is?" "unspecified?" "eq?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "object")}
      {Lisp-Entry "write-port" #f 546 13 546 23 ("force-output" "newline" "encode" "write" "info" "port")}
      {Lisp-Entry "read-port" #f 552 13 552 22 ("read" "decode" "port")}
      {Lisp-Entry "encode" #f 561 13 561 19 (":reader" "->string" "else" "cdr" "car" "encode" "cons" "pair?" "encode-ior" "ior?" "unspecified" "'unspecified" "unspecified?" "true" "'true" "false" "'false" "encode-info" "eq?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "object")}
      {Lisp-Entry "encoded-marker" #f 587 12 587 26 ("ENCODED" "'ENCODED")}
      {Lisp-Entry "encoded?" #f 591 13 591 21 ("encoded-marker" "car" "eq?" "pair?" "and" "object")}
      {Lisp-Entry "encode-info" #f 596 13 596 24 ("encoded-marker" "cons" "info" "kind")}
      {Lisp-Entry "encode-ior" #f 600 13 600 23 ("get-values" "get-reference" "get-stub-interface" "get-service" "get-host" "IOR" "'IOR" "encode-info" "ior")}
      {Lisp-Entry "decode" #f 614 13 614 19 ("error" "else" "cdr" "decode" "cons" "pair?" "decode-ior" "IOR" "unspecified" "true" "false" "case" "car" "read-string-element" "function" "with-jazz-readtable" "not" "if" "decode-info" "info" "kind" "receive" "encoded?" "eof-object?" "keyword?" "symbol?" "string?" "number?" "null?" "cond" "object")}
      {Lisp-Entry "decode-info" #f 645 13 645 24 ("cddr" "cadr" "values" "encoded")}
      {Lisp-Entry "decode-ior" #f 649 13 649 23 ("IOR" "new" "values" "reference" "stub-interface" "service" "host" "bind" "info")}}})
"_kernel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "kernel" "_kernel.scm"} 1227441783
    {Lisp-Entry "jazz.dialect.kernel" #f 38 9 38 28 ("scheme")
      {Lisp-Entry "get-autoload" #f 46 8 46 25 ()}
      {Lisp-Entry "autoload" #f 47 8 47 21 ()}
      {Lisp-Entry "autoreload" #f 48 8 48 23 ()}
      {Lisp-Entry "boolean" #f 56 8 56 20 ()}
      {Lisp-Entry "box?" #f 64 8 64 12 ()}
      {Lisp-Entry "box" #f 65 8 65 11 ()}
      {Lisp-Entry "unbox" #f 66 8 66 13 ()}
      {Lisp-Entry "set-box!" #f 67 8 67 16 ()}
      {Lisp-Entry "build-module" #f 75 8 75 25 ()}
      {Lisp-Entry "build-executable" #f 76 8 76 29 ()}
      {Lisp-Entry "compile-module" #f 77 8 77 27 ()}
      {Lisp-Entry "for-each-submodule" #f 78 8 78 31 ()}
      {Lisp-Entry "get-category-name" #f 86 8 86 30 ()}
      {Lisp-Entry "get-category-descendants" #f 87 8 87 37 ()}
      {Lisp-Entry "get-class-ascendant" #f 88 8 88 32 ()}
      {Lisp-Entry "symbolic-char" #f 96 8 96 26 ()}
      {Lisp-Entry "char-symbol" #f 97 8 97 24 ()}
      {Lisp-Entry "gc" #f 105 8 105 15 ()}
      {Lisp-Entry "continuation?" #f 113 8 113 26 ()}
      {Lisp-Entry "continuation-capture" #f 114 8 114 33 ()}
      {Lisp-Entry "continuation-graft" #f 115 8 115 31 ()}
      {Lisp-Entry "continuation-return" #f 116 8 116 32 ()}
      {Lisp-Entry "run-loop?" #f 124 8 124 22 ()}
      {Lisp-Entry "terminal" #f 125 8 125 21 ()}
      {Lisp-Entry "terminal-string" #f 126 8 126 28 ()}
      {Lisp-Entry "terminal-port" #f 127 8 127 26 ()}
      {Lisp-Entry "error" #f 128 8 128 18 ()}
      {Lisp-Entry "unimplemented" #f 129 8 129 26 ()}
      {Lisp-Entry "dump-stack" #f 130 8 130 23 ()}
      {Lisp-Entry "log-object" #f 131 8 131 23 ()}
      {Lisp-Entry "log-string" #f 132 8 132 23 ()}
      {Lisp-Entry "log-newline" #f 133 8 133 24 ()}
      {Lisp-Entry "close-log" #f 134 8 134 22 ()}
      {Lisp-Entry "generate-proper-tail-calls" #f 135 8 135 34 ()}
      {Lisp-Entry "open-digest" #f 143 8 143 19 ()}
      {Lisp-Entry "close-digest" #f 144 8 144 20 ()}
      {Lisp-Entry "digest-update-subu8vector" #f 145 8 145 33 ()}
      {Lisp-Entry "digest-string" #f 146 8 146 21 ()}
      {Lisp-Entry "digest-substring" #f 147 8 147 24 ()}
      {Lisp-Entry "digest-u8vector" #f 148 8 148 23 ()}
      {Lisp-Entry "digest-subu8vector" #f 149 8 149 26 ()}
      {Lisp-Entry "digest-file" #f 150 8 150 19 ()}
      {Lisp-Entry "enumerator?" #f 158 8 158 24 ()}
      {Lisp-Entry "enumerator->symbol" #f 159 8 159 31 ()}
      {Lisp-Entry "exception-reason" #f 167 8 167 29 ()}
      {Lisp-Entry "exception-detail" #f 168 8 168 29 ()}
      {Lisp-Entry "display-exception" #f 169 8 169 30 ()}
      {Lisp-Entry "display-continuation-backtrace" #f 170 8 170 43 ()}
      {Lisp-Entry "get-exception-hook" #f 171 8 171 31 ()}
      {Lisp-Entry "set-exception-hook" #f 172 8 172 31 ()}
      {Lisp-Entry "invoke-exception-hook" #f 173 8 173 34 ()}
      {Lisp-Entry "system-exception-hook" #f 174 8 174 34 ()}
      {Lisp-Entry "current-exception-handler" #f 175 8 175 38 ()}
      {Lisp-Entry "with-exception-handler" #f 176 8 176 35 ()}
      {Lisp-Entry "with-exception-catcher" #f 177 8 177 35 ()}
      {Lisp-Entry "with-exception-filter" #f 178 8 178 34 ()}
      {Lisp-Entry "with-exception-propagater" #f 179 8 179 38 ()}
      {Lisp-Entry "dump-exception" #f 180 8 180 27 ()}
      {Lisp-Entry "raise" #f 181 8 181 18 ()}
      {Lisp-Entry "present-exception" #f 182 8 182 30 ()}
      {Lisp-Entry "get-detail" #f 183 8 183 23 ()}
      {Lisp-Entry "field?" #f 191 8 191 19 ()}
      {Lisp-Entry "field-name" #f 192 8 192 23 ()}
      {Lisp-Entry "find-field" #f 193 8 193 23 ()}
      {Lisp-Entry "fixnum?" #f 201 8 201 15 ()}
      {Lisp-Entry "flonum?" #f 202 8 202 15 ()}
      {Lisp-Entry "fixnum->flonum" #f 203 8 203 27 ()}
      {Lisp-Entry "flonum->fixnum" #f 204 8 204 27 ()}
      {Lisp-Entry "fx+" #f 205 8 205 11 ()}
      {Lisp-Entry "fx-" #f 206 8 206 11 ()}
      {Lisp-Entry "fx*" #f 207 8 207 11 ()}
      {Lisp-Entry "+infinity" #f 208 8 208 22 ()}
      {Lisp-Entry "-infinity" #f 209 8 209 22 ()}
      {Lisp-Entry "##fl+" #f 219 8 219 13 ()}
      {Lisp-Entry "##fl-" #f 220 8 220 13 ()}
      {Lisp-Entry "##fl*" #f 221 8 221 13 ()}
      {Lisp-Entry "##fl/" #f 222 8 222 13 ()}
      {Lisp-Entry "foreign?" #f 230 8 230 21 ()}
      {Lisp-Entry "foreign-address" #f 231 8 231 28 ()}
      {Lisp-Entry "foreign-release!" #f 232 8 232 29 ()}
      {Lisp-Entry "foreign-released?" #f 233 8 233 30 ()}
      {Lisp-Entry "foreign-tags" #f 234 8 234 25 ()}
      {Lisp-Entry "still-obj-refcount-dec!" #f 235 8 235 36 ()}
      {Lisp-Entry "still-obj-refcount-inc!" #f 236 8 236 36 ()}
      {Lisp-Entry "compile-file" #f 245 8 245 20 ()}
      {Lisp-Entry "command-line" #f 253 8 253 20 ()}
      {Lisp-Entry "user-name" #f 254 8 254 17 ()}
      {Lisp-Entry "composite-name?" #f 262 8 262 28 ()}
      {Lisp-Entry "compose-name" #f 263 8 263 25 ()}
      {Lisp-Entry "identifier-module" #f 264 8 264 30 ()}
      {Lisp-Entry "identifier-name" #f 265 8 265 28 ()}
      {Lisp-Entry "split-identifier" #f 266 8 266 29 ()}
      {Lisp-Entry "bitwise-not" #f 282 8 282 19 ()}
      {Lisp-Entry "bitwise-and" #f 283 8 283 19 ()}
      {Lisp-Entry "bitwise-ior" #f 284 8 284 19 ()}
      {Lisp-Entry "bitwise-xor" #f 285 8 285 19 ()}
      {Lisp-Entry "arithmetic-shift" #f 286 8 286 24 ()}
      {Lisp-Entry "bit-set?" #f 287 8 287 16 ()}
      {Lisp-Entry "extract-bit-field" #f 288 8 288 25 ()}
      {Lisp-Entry "build-feedback" #f 296 8 296 27 ()}
      {Lisp-Entry "boot-directory" #f 297 8 297 27 ()}
      {Lisp-Entry "kernel-name" #f 298 8 298 24 ()}
      {Lisp-Entry "kernel-title" #f 299 8 299 25 ()}
      {Lisp-Entry "kernel-system" #f 300 8 300 26 ()}
      {Lisp-Entry "kernel-platform" #f 301 8 301 28 ()}
      {Lisp-Entry "kernel-windowing" #f 302 8 302 29 ()}
      {Lisp-Entry "kernel-safety" #f 303 8 303 26 ()}
      {Lisp-Entry "kernel-optimize?" #f 304 8 304 29 ()}
      {Lisp-Entry "kernel-include-source?" #f 305 8 305 35 ()}
      {Lisp-Entry "kernel-interpret?" #f 306 8 306 30 ()}
      {Lisp-Entry "kernel-install" #f 307 8 307 27 ()}
      {Lisp-Entry "kernel-source" #f 308 8 308 26 ()}
      {Lisp-Entry "kernel-version" #f 309 8 309 27 ()}
      {Lisp-Entry "jazz-product" #f 310 8 310 25 ()}
      {Lisp-Entry "jazz-profile" #f 311 8 311 25 ()}
      {Lisp-Entry "use-debugger?" #f 312 8 312 26 ()}
      {Lisp-Entry "get-repositories" #f 313 8 313 29 ()}
      {Lisp-Entry "find-repository" #f 314 8 314 28 ()}
      {Lisp-Entry "repository-add-package" #f 315 8 315 35 ()}
      {Lisp-Entry "repository-remove-package" #f 316 8 316 38 ()}
      {Lisp-Entry "split-version" #f 317 8 317 26 ()}
      {Lisp-Entry "present-version" #f 318 8 318 28 ()}
      {Lisp-Entry "load-package" #f 319 8 319 25 ()}
      {Lisp-Entry "register-product" #f 320 8 320 29 ()}
      {Lisp-Entry "get-registered-product" #f 321 8 321 35 ()}
      {Lisp-Entry "current-process-name" #f 322 8 322 33 ()}
      {Lisp-Entry "current-process-name-set!" #f 323 8 323 38 ()}
      {Lisp-Entry "current-process-title" #f 324 8 324 34 ()}
      {Lisp-Entry "current-process-title-set!" #f 325 8 325 39 ()}
      {Lisp-Entry "current-process-icon" #f 326 8 326 33 ()}
      {Lisp-Entry "current-process-icon-set!" #f 327 8 327 38 ()}
      {Lisp-Entry "current-process-version" #f 328 8 328 36 ()}
      {Lisp-Entry "current-process-version-set!" #f 329 8 329 41 ()}
      {Lisp-Entry "current-process-present" #f 330 8 330 36 ()}
      {Lisp-Entry "run-product" #f 331 8 331 24 ()}
      {Lisp-Entry "update-product" #f 332 8 332 27 ()}
      {Lisp-Entry "build-product" #f 333 8 333 26 ()}
      {Lisp-Entry "find-pathname-module" #f 334 8 334 33 ()}
      {Lisp-Entry "find-module-src" #f 335 8 335 28 ()}
      {Lisp-Entry "module-autoload" #f 336 8 336 28 ()}
      {Lisp-Entry "get-environment" #f 337 8 337 28 ()}
      {Lisp-Entry "get-environment-module" #f 338 8 338 35 ()}
      {Lisp-Entry "load-all" #f 339 8 339 21 ()}
      {Lisp-Entry "walk-for" #f 340 8 340 21 ()}
      {Lisp-Entry "main" #f 341 8 341 12 ()}
      {Lisp-Entry "keyword?" #f 349 8 349 21 ()}
      {Lisp-Entry "string->keyword" #f 350 8 350 28 ()}
      {Lisp-Entry "keyword->string" #f 351 8 351 28 ()}
      {Lisp-Entry "not-null?" #f 359 8 359 22 ()}
      {Lisp-Entry "listify" #f 360 8 360 20 ()}
      {Lisp-Entry "list-copy" #f 361 8 361 22 ()}
      {Lisp-Entry "last-pair" #f 362 8 362 22 ()}
      {Lisp-Entry "proper-list" #f 363 8 363 24 ()}
      {Lisp-Entry "open-tcp-client" #f 371 8 371 28 ()}
      {Lisp-Entry "open-tcp-server" #f 372 8 372 28 ()}
      {Lisp-Entry "tcp-server-socket-info" #f 373 8 373 35 ()}
      {Lisp-Entry "call-with-tcp-client" #f 374 8 374 33 ()}
      {Lisp-Entry "new" #f 382 8 382 16 ()}
      {Lisp-Entry "class-of" #f 383 8 383 21 ()}
      {Lisp-Entry "object?" #f 384 8 384 20 ()}
      {Lisp-Entry "type?" #f 385 8 385 18 ()}
      {Lisp-Entry "category?" #f 386 8 386 22 ()}
      {Lisp-Entry "interface?" #f 387 8 387 23 ()}
      {Lisp-Entry "method?" #f 388 8 388 20 ()}
      {Lisp-Entry "is?" #f 389 8 389 16 ()}
      {Lisp-Entry "subtype?" #f 390 8 390 21 ()}
      {Lisp-Entry "subcategory?" #f 391 8 391 25 ()}
      {Lisp-Entry "subclass?" #f 392 8 392 22 ()}
      {Lisp-Entry "load-module" #f 393 8 393 24 ()}
      {Lisp-Entry "reload-module" #f 394 8 394 26 ()}
      {Lisp-Entry "make-parameter" #f 402 8 402 22 ()}
      {Lisp-Entry "pathname-type" #f 410 8 410 26 ()}
      {Lisp-Entry "pathname-expand" #f 411 8 411 28 ()}
      {Lisp-Entry "pathname-normalize" #f 412 8 412 31 ()}
      {Lisp-Entry "file-exists?" #f 413 8 413 25 ()}
      {Lisp-Entry "file-delete" #f 414 8 414 24 ()}
      {Lisp-Entry "file-copy" #f 415 8 415 22 ()}
      {Lisp-Entry "file-modification-time" #f 416 8 416 35 ()}
      {Lisp-Entry "file-rename" #f 417 8 417 24 ()}
      {Lisp-Entry "current-directory" #f 418 8 418 30 ()}
      {Lisp-Entry "current-directory-set!" #f 419 8 419 35 ()}
      {Lisp-Entry "directory-create" #f 420 8 420 29 ()}
      {Lisp-Entry "directory-content" #f 421 8 421 30 ()}
      {Lisp-Entry "directory-delete" #f 422 8 422 29 ()}
      {Lisp-Entry "open-string-pipe" #f 430 8 430 24 ()}
      {Lisp-Entry "port?" #f 438 8 438 13 ()}
      {Lisp-Entry "close-port" #f 439 8 439 23 ()}
      {Lisp-Entry "input-port-timeout-set!" #f 440 8 440 36 ()}
      {Lisp-Entry "output-port-timeout-set!" #f 441 8 441 37 ()}
      {Lisp-Entry "open-event-queue" #f 442 8 442 24 ()}
      {Lisp-Entry "eof-object" #f 443 8 443 23 ()}
      {Lisp-Entry "open-input-string" #f 444 8 444 25 ()}
      {Lisp-Entry "open-output-string" #f 445 8 445 26 ()}
      {Lisp-Entry "get-output-string" #f 446 8 446 25 ()}
      {Lisp-Entry "call-with-input-string" #f 447 8 447 30 ()}
      {Lisp-Entry "with-input-from-string" #f 448 8 448 30 ()}
      {Lisp-Entry "call-with-output-string" #f 449 8 449 31 ()}
      {Lisp-Entry "read-substring" #f 450 8 450 22 ()}
      {Lisp-Entry "open-vector" #f 451 8 451 19 ()}
      {Lisp-Entry "call-with-input-u8vector" #f 452 8 452 32 ()}
      {Lisp-Entry "open-output-u8vector" #f 453 8 453 28 ()}
      {Lisp-Entry "get-output-u8vector" #f 454 8 454 27 ()}
      {Lisp-Entry "read-u8" #f 455 8 455 20 ()}
      {Lisp-Entry "write-u8" #f 456 8 456 21 ()}
      {Lisp-Entry "read-subu8vector" #f 457 8 457 29 ()}
      {Lisp-Entry "write-subu8vector" #f 458 8 458 30 ()}
      {Lisp-Entry "read-line" #f 459 8 459 22 ()}
      {Lisp-Entry "read-proper-line" #f 460 8 460 29 ()}
      {Lisp-Entry "read-all" #f 461 8 461 21 ()}
      {Lisp-Entry "install-jazz-literals" #f 462 8 462 34 ()}
      {Lisp-Entry "jazz-readtable" #f 463 8 463 27 ()}
      {Lisp-Entry "with-jazz-readtable" #f 464 8 464 32 ()}
      {Lisp-Entry "print" #f 465 8 465 18 ()}
      {Lisp-Entry "pretty-print" #f 466 8 466 25 ()}
      {Lisp-Entry "read-source-as-begin" #f 467 8 467 33 ()}
      {Lisp-Entry "read-source-first-expr" #f 468 8 468 35 ()}
      {Lisp-Entry "force-output" #f 469 8 469 20 ()}
      {Lisp-Entry "current-error-port" #f 470 8 470 26 ()}
      {Lisp-Entry "with-output-to-port" #f 471 8 471 27 ()}
      {Lisp-Entry "write-u8" #f 472 8 472 16 ()}
      {Lisp-Entry "property-getter" #f 480 8 480 28 ()}
      {Lisp-Entry "property-setter" #f 481 8 481 28 ()}
      {Lisp-Entry "new-queue" #f 489 8 489 22 ()}
      {Lisp-Entry "enqueue" #f 490 8 490 20 ()}
      {Lisp-Entry "enqueue-list" #f 491 8 491 25 ()}
      {Lisp-Entry "queue-list" #f 492 8 492 23 ()}
      {Lisp-Entry "reset-queue" #f 493 8 493 24 ()}
      {Lisp-Entry "random-integer" #f 501 8 501 27 ()}
      {Lisp-Entry "random-source-pseudo-randomize!" #f 502 8 502 44 ()}
      {Lisp-Entry "default-random-source" #f 503 8 503 34 ()}
      {Lisp-Entry "current-repl-context" #f 511 8 511 33 ()}
      {Lisp-Entry "repl-context-level" #f 512 8 512 31 ()}
      {Lisp-Entry "repl-context-depth" #f 513 8 513 31 ()}
      {Lisp-Entry "repl-context-cont" #f 514 8 514 30 ()}
      {Lisp-Entry "repl-context-initial-cont" #f 515 8 515 38 ()}
      {Lisp-Entry "repl-context-prev-level" #f 516 8 516 36 ()}
      {Lisp-Entry "repl-context-prev-depth" #f 517 8 517 36 ()}
      {Lisp-Entry "with-repl-context" #f 518 8 518 30 ()}
      {Lisp-Entry "inspect-repl-context" #f 519 8 519 33 ()}
      {Lisp-Entry "repl" #f 520 8 520 17 ()}
      {Lisp-Entry "eval-within-no-winding" #f 521 8 521 35 ()}
      {Lisp-Entry "eval-within-no-winding" #f 522 8 522 35 ()}
      {Lisp-Entry "repl-result-history-add" #f 523 8 523 36 ()}
      {Lisp-Entry "repl-result-history-ref" #f 524 8 524 31 ()}
      {Lisp-Entry "resource-pathname" #f 532 8 532 30 ()}
      {Lisp-Entry "get-catalog" #f 540 8 540 24 ()}
      {Lisp-Entry "get-catalog-entry" #f 541 8 541 30 ()}
      {Lisp-Entry "locate-library-declaration" #f 542 8 542 39 ()}
      {Lisp-Entry "get-object-slot" #f 543 8 543 28 ()}
      {Lisp-Entry "set-object-slot" #f 544 8 544 28 ()}
      {Lisp-Entry "dispatch" #f 545 8 545 21 ()}
      {Lisp-Entry "find-dispatch" #f 546 8 546 26 ()}
      {Lisp-Entry "call-into-abstract" #f 547 8 547 31 ()}
      {Lisp-Entry "object->serial" #f 555 8 555 27 ()}
      {Lisp-Entry "serial->object" #f 556 8 556 27 ()}
      {Lisp-Entry "object->serial-number" #f 559 8 559 29 ()}
      {Lisp-Entry "serial-number->object" #f 560 8 560 29 ()}
      {Lisp-Entry "shell-command" #f 568 8 568 21 ()}
      {Lisp-Entry "slot?" #f 576 8 576 18 ()}
      {Lisp-Entry "slot-value" #f 577 8 577 23 ()}
      {Lisp-Entry "set-slot-value" #f 578 8 578 27 ()}
      {Lisp-Entry "socket-info-address" #f 586 8 586 32 ()}
      {Lisp-Entry "socket-info-port-number" #f 587 8 587 36 ()}
      {Lisp-Entry "get-procedure-name" #f 595 8 595 31 ()}
      {Lisp-Entry "get-continuation-stack" #f 596 8 596 35 ()}
      {Lisp-Entry "get-continuation-name" #f 597 8 597 34 ()}
      {Lisp-Entry "get-continuation-dynamic-environment" #f 598 8 598 49 ()}
      {Lisp-Entry "get-continuation-lexical-environment" #f 599 8 599 49 ()}
      {Lisp-Entry "get-continuation-location" #f 600 8 600 38 ()}
      {Lisp-Entry "active-profile" #f 608 8 608 27 ()}
      {Lisp-Entry "profile-total" #f 609 8 609 26 ()}
      {Lisp-Entry "profile-unknown" #f 610 8 610 28 ()}
      {Lisp-Entry "profile-calls" #f 611 8 611 26 ()}
      {Lisp-Entry "reset-profile" #f 612 8 612 26 ()}
      {Lisp-Entry "start-profile" #f 613 8 613 26 ()}
      {Lisp-Entry "stop-profile" #f 614 8 614 25 ()}
      {Lisp-Entry "profile-running?" #f 615 8 615 29 ()}
      {Lisp-Entry "join-strings" #f 623 8 623 25 ()}
      {Lisp-Entry "generate-symbol" #f 631 8 631 28 ()}
      {Lisp-Entry "with-expression-value" #f 632 8 632 34 ()}
      {Lisp-Entry "source?" #f 640 8 640 20 ()}
      {Lisp-Entry "source-code" #f 641 8 641 24 ()}
      {Lisp-Entry "source-locat" #f 642 8 642 25 ()}
      {Lisp-Entry "desourcify" #f 643 8 643 23 ()}
      {Lisp-Entry "desourcify-list" #f 644 8 644 28 ()}
      {Lisp-Entry "sourcify" #f 645 8 645 21 ()}
      {Lisp-Entry "sourcify-if" #f 646 8 646 24 ()}
      {Lisp-Entry "present-source" #f 647 8 647 27 ()}
      {Lisp-Entry "locat-container" #f 648 8 648 28 ()}
      {Lisp-Entry "locat-position" #f 649 8 649 27 ()}
      {Lisp-Entry "container->file" #f 650 8 650 28 ()}
      {Lisp-Entry "position->filepos" #f 651 8 651 30 ()}
      {Lisp-Entry "filepos-line" #f 652 8 652 25 ()}
      {Lisp-Entry "filepos-col" #f 653 8 653 24 ()}
      {Lisp-Entry "locat->file/line/col" #f 654 8 654 33 ()}
      {Lisp-Entry "switch?" #f 662 8 662 20 ()}
      {Lisp-Entry "switch-name" #f 663 8 663 24 ()}
      {Lisp-Entry "command-argument" #f 664 8 664 29 ()}
      {Lisp-Entry "open-process" #f 665 8 665 25 ()}
      {Lisp-Entry "process-status" #f 666 8 666 27 ()}
      {Lisp-Entry "exit" #f 667 8 667 17 ()}
      {Lisp-Entry "table?" #f 675 8 675 14 ()}
      {Lisp-Entry "make-table" #f 676 8 676 18 ()}
      {Lisp-Entry "table-ref" #f 677 8 677 17 ()}
      {Lisp-Entry "table-set!" #f 678 8 678 18 ()}
      {Lisp-Entry "table->list" #f 679 8 679 19 ()}
      {Lisp-Entry "list->table" #f 680 8 680 19 ()}
      {Lisp-Entry "table-clear" #f 681 8 681 24 ()}
      {Lisp-Entry "table-length" #f 682 8 682 25 ()}
      {Lisp-Entry "iterate-table" #f 683 8 683 26 ()}
      {Lisp-Entry "map-table" #f 684 8 684 22 ()}
      {Lisp-Entry "table-entries" #f 685 8 685 26 ()}
      {Lisp-Entry "eq-hash" #f 686 8 686 20 ()}
      {Lisp-Entry "eqv-hash" #f 687 8 687 21 ()}
      {Lisp-Entry "equal-hash" #f 688 8 688 23 ()}
      {Lisp-Entry "set-terminal-title" #f 696 8 696 31 ()}
      {Lisp-Entry "bring-terminal-to-front" #f 697 8 697 36 ()}
      {Lisp-Entry "clear-terminal" #f 698 8 698 27 ()}
      {Lisp-Entry "current-thread" #f 706 8 706 27 ()}
      {Lisp-Entry "thread?" #f 707 8 707 20 ()}
      {Lisp-Entry "make-thread" #f 708 8 708 24 ()}
      {Lisp-Entry "make-root-thread" #f 709 8 709 29 ()}
      {Lisp-Entry "thread-name" #f 710 8 710 24 ()}
      {Lisp-Entry "thread-specific" #f 711 8 711 28 ()}
      {Lisp-Entry "thread-specific-set!" #f 712 8 712 33 ()}
      {Lisp-Entry "thread-base-priority" #f 713 8 713 33 ()}
      {Lisp-Entry "thread-base-priority-set!" #f 714 8 714 38 ()}
      {Lisp-Entry "thread-priority-boost" #f 715 8 715 34 ()}
      {Lisp-Entry "thread-priority-boost-set!" #f 716 8 716 39 ()}
      {Lisp-Entry "thread-start!" #f 717 8 717 26 ()}
      {Lisp-Entry "thread-yield!" #f 718 8 718 26 ()}
      {Lisp-Entry "thread-sleep!" #f 719 8 719 26 ()}
      {Lisp-Entry "thread-terminate!" #f 720 8 720 30 ()}
      {Lisp-Entry "thread-join!" #f 721 8 721 25 ()}
      {Lisp-Entry "thread-send" #f 722 8 722 24 ()}
      {Lisp-Entry "thread-receive" #f 723 8 723 27 ()}
      {Lisp-Entry "thread-interrupt!" #f 724 8 724 30 ()}
      {Lisp-Entry "thread-thread-group" #f 725 8 725 32 ()}
      {Lisp-Entry "thread-group->thread-group-list" #f 726 8 726 44 ()}
      {Lisp-Entry "thread-group->thread-group-vector" #f 727 8 727 46 ()}
      {Lisp-Entry "thread-group->thread-list" #f 728 8 728 38 ()}
      {Lisp-Entry "thread-group->thread-vector" #f 729 8 729 40 ()}
      {Lisp-Entry "thread-state" #f 730 8 730 25 ()}
      {Lisp-Entry "thread-state-abnormally-terminated-reason" #f 731 8 731 54 ()}
      {Lisp-Entry "thread-state-abnormally-terminated?" #f 732 8 732 48 ()}
      {Lisp-Entry "thread-state-active-timeout" #f 733 8 733 40 ()}
      {Lisp-Entry "thread-state-active-waiting-for" #f 734 8 734 44 ()}
      {Lisp-Entry "thread-state-active?" #f 735 8 735 33 ()}
      {Lisp-Entry "thread-state-initialized?" #f 736 8 736 38 ()}
      {Lisp-Entry "thread-state-normally-terminated-result" #f 737 8 737 52 ()}
      {Lisp-Entry "thread-state-normally-terminated?" #f 738 8 738 46 ()}
      {Lisp-Entry "thread-state-uninitialized?" #f 739 8 739 40 ()}
      {Lisp-Entry "pristine-thread-continuation" #f 740 8 740 41 ()}
      {Lisp-Entry "mutex?" #f 741 8 741 19 ()}
      {Lisp-Entry "make-mutex" #f 742 8 742 23 ()}
      {Lisp-Entry "mutex-name" #f 743 8 743 23 ()}
      {Lisp-Entry "mutex-specific" #f 744 8 744 27 ()}
      {Lisp-Entry "mutex-specific-set!" #f 745 8 745 32 ()}
      {Lisp-Entry "mutex-state" #f 746 8 746 24 ()}
      {Lisp-Entry "mutex-lock!" #f 747 8 747 24 ()}
      {Lisp-Entry "mutex-unlock!" #f 748 8 748 26 ()}
      {Lisp-Entry "mutex-wait" #f 749 8 749 23 ()}
      {Lisp-Entry "condition?" #f 750 8 750 23 ()}
      {Lisp-Entry "make-condition" #f 751 8 751 27 ()}
      {Lisp-Entry "condition-name" #f 752 8 752 27 ()}
      {Lisp-Entry "condition-specific" #f 753 8 753 31 ()}
      {Lisp-Entry "condition-specific-set!" #f 754 8 754 36 ()}
      {Lisp-Entry "condition-signal!" #f 755 8 755 30 ()}
      {Lisp-Entry "condition-broadcast!" #f 756 8 756 33 ()}
      {Lisp-Entry "current-systime" #f 764 8 764 28 ()}
      {Lisp-Entry "systime?" #f 765 8 765 21 ()}
      {Lisp-Entry "systime->seconds" #f 766 8 766 29 ()}
      {Lisp-Entry "seconds->systime" #f 767 8 767 29 ()}
      {Lisp-Entry "process-times" #f 768 8 768 26 ()}
      {Lisp-Entry "cpu-time" #f 769 8 769 21 ()}
      {Lisp-Entry "real-time" #f 770 8 770 22 ()}
      {Lisp-Entry "unspecified" #f 778 8 778 24 ()}
      {Lisp-Entry "unspecified?" #f 779 8 779 25 ()}
      {Lisp-Entry "specified?" #f 780 8 780 23 ()}
      {Lisp-Entry "vector-copy" #f 788 8 788 24 ()}
      {Lisp-Entry "u8vector" #f 789 8 789 16 ()}
      {Lisp-Entry "make-u8vector" #f 790 8 790 21 ()}
      {Lisp-Entry "u8vector-length" #f 791 8 791 23 ()}
      {Lisp-Entry "u8vector-ref" #f 792 8 792 20 ()}
      {Lisp-Entry "u8vector-set!" #f 793 8 793 21 ()}
      {Lisp-Entry "u8vector?" #f 794 8 794 17 ()}
      {Lisp-Entry "u8vector->list" #f 795 8 795 22 ()}
      {Lisp-Entry "list->u8vector" #f 796 8 796 22 ()}
      {Lisp-Entry "u16vector" #f 797 8 797 17 ()}
      {Lisp-Entry "make-u16vector" #f 798 8 798 22 ()}
      {Lisp-Entry "u16vector-length" #f 799 8 799 24 ()}
      {Lisp-Entry "u16vector-ref" #f 800 8 800 21 ()}
      {Lisp-Entry "u16vector-set!" #f 801 8 801 22 ()}
      {Lisp-Entry "u16vector?" #f 802 8 802 18 ()}
      {Lisp-Entry "u32vector" #f 803 8 803 17 ()}
      {Lisp-Entry "make-u32vector" #f 804 8 804 22 ()}
      {Lisp-Entry "u32vector-length" #f 805 8 805 24 ()}
      {Lisp-Entry "u32vector-ref" #f 806 8 806 21 ()}
      {Lisp-Entry "u32vector-set!" #f 807 8 807 22 ()}
      {Lisp-Entry "u32vector?" #f 808 8 808 18 ()}
      {Lisp-Entry "f32vector" #f 809 8 809 17 ()}
      {Lisp-Entry "make-f32vector" #f 810 8 810 22 ()}
      {Lisp-Entry "f32vector-length" #f 811 8 811 24 ()}
      {Lisp-Entry "f32vector-ref" #f 812 8 812 21 ()}
      {Lisp-Entry "f32vector-set!" #f 813 8 813 22 ()}
      {Lisp-Entry "f32vector?" #f 814 8 814 18 ()}
      {Lisp-Entry "f64vector" #f 815 8 815 17 ()}
      {Lisp-Entry "make-f64vector" #f 816 8 816 22 ()}
      {Lisp-Entry "f64vector-length" #f 817 8 817 24 ()}
      {Lisp-Entry "f64vector-ref" #f 818 8 818 21 ()}
      {Lisp-Entry "f64vector-set!" #f 819 8 819 22 ()}
      {Lisp-Entry "f64vector?" #f 820 8 820 18 ()}
      {Lisp-Entry "new-walk-context" #f 828 8 828 29 ()}
      {Lisp-Entry "register-literal-constructor" #f 829 8 829 41 ()}
      {Lisp-Entry "specifier?" #f 830 8 830 23 ()}
      {Lisp-Entry "binding-specifier" #f 831 8 831 30 ()}
      {Lisp-Entry "parse-specifier" #f 832 8 832 28 ()}
      {Lisp-Entry "requested-module-name" #f 833 8 833 34 ()}
      {Lisp-Entry "requested-module-resource" #f 834 8 834 38 ()}}})
"_language"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "language" "_language.jazz"} 1227043164
    {Lisp-Entry "jazz.dialect.language" #f 37 9 37 30 ("axis-find-in" "axis-find" "axis-for-each" "instantiate-ends-with?" "instantiate-starts-with?" "string-find-in" "instantiate-find-in" "string-find" "instantiate-find" "instantiate-butlast" "string-for-each" "instantiate-for-each" "jazz.dialect")
      {Lisp-Entry "nil" #f 48 12 48 15 ("nil" "'nil" "list")}
      {Lisp-Entry "nil?" #f 52 27 52 31 ("nil" "eq?" "obj")}
      {Lisp-Entry "not-nil?" #f 56 27 56 35 ("nil" "eq?" "not" "obj")}
      {Lisp-Entry "Object" #f 65 17 65 23 ("Object-Class")
        {Lisp-Entry "initialize" #f 68 19 68 29 ()}
        {Lisp-Entry "destroy" #f 72 19 72 26 ()}
        {Lisp-Entry "print" #f 76 26 76 31 ("function" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "fold-literal" #f 82 26 82 38 ("self" "error")}
        {Lisp-Entry "class-actions" #f 86 26 86 39 ()}
        {Lisp-Entry "focus-actions" #f 90 26 90 39 ()}
        {Lisp-Entry "guest-actions" #f 94 26 94 39 ()}
        {Lisp-Entry "initialized?" #f 98 18 98 30 ("self" "object-initialized?")}
        {Lisp-Entry "hash-object" #f 102 26 102 37 ("self" "error")}
        {Lisp-Entry "copy-object" #f 106 29 106 40 ("self" "error" "deep?")}
        {Lisp-Entry "compare-object" #f 110 26 110 40 (":incompatible" "object")}
        {Lisp-Entry "ci-compare-object" #f 114 26 114 43 (":incompatible" "object")}
        {Lisp-Entry "describe-object" #f 118 29 118 44 ("print" "printer")}
        {Lisp-Entry "release" #f 122 26 122 33 ()}
        {Lisp-Entry "close" #f 126 26 126 31 ("self" "call-destroy")}
        {Lisp-Entry "destroy-mandatory" #f 130 21 130 38 ("self" "set-must-destroy")}
        {Lisp-Entry "destroyed?" #f 134 18 134 28 ("self" "object-destroyed?")}
        {Lisp-Entry "get-sort-value" #f 138 26 138 40 ()}
        {Lisp-Entry "redirect-handler" #f 142 26 142 42 ("self" "sender" "handler")}
        {Lisp-Entry "coerce-string" #f 146 26 146 39 ("self" "error")}
        {Lisp-Entry "iterate-object" #f 150 26 150 40 ("self" "error")}
        {Lisp-Entry "object-similar?" #f 159 26 159 41 ("self" "eq?" "object")}
        {Lisp-Entry "object-alphabetic?" #f 163 26 163 44 ("self" "error")}
        {Lisp-Entry "object-numeric?" #f 167 26 167 41 ("self" "error")}
        {Lisp-Entry "object-alphanumeric?" #f 171 26 171 46 ("self" "error")}
        {Lisp-Entry "object-whitespace?" #f 175 26 175 44 ("self" "error")}
        {Lisp-Entry "object-upper-case?" #f 179 26 179 44 ("self" "error")}
        {Lisp-Entry "object-lower-case?" #f 183 26 183 44 ("self" "error")}
        {Lisp-Entry "object-upcase" #f 187 26 187 39 ("self" "error")}
        {Lisp-Entry "object-downcase" #f 191 26 191 41 ("self" "error")}
        {Lisp-Entry "object-capitalize" #f 195 26 195 43 ("self" "error")}}
      {Lisp-Entry "compare" #f 199 27 199 34 ("compare-object" ":equal" "eqv?" "if" "b" "a")}
      {Lisp-Entry "ci-compare" #f 205 27 205 37 ("ci-compare-object" ":equal" "eqv?" "if" "b" "a")}
      {Lisp-Entry "copy" #f 211 20 211 24 ("subcopy" "obj")}
      {Lisp-Entry "subcopy" #f 215 20 215 27 ("copy-object" "deep?" "obj")}
      {Lisp-Entry "native-class" #f 219 13 219 25 ("error" "name")}
      {Lisp-Entry "=-hash" #f 223 13 223 19 ("hash-object" "obj")}
      {Lisp-Entry "object-initialized?" #f 227 13 227 32 ("obj")}
      {Lisp-Entry "get-must-destroy" #f 232 13 232 29 ("obj")}
      {Lisp-Entry "set-must-destroy" #f 236 13 236 29 ("obj")}
      {Lisp-Entry "set-was-destroyed" #f 241 13 241 30 ("obj")}
      {Lisp-Entry "object-destroyed?" #f 246 13 246 30 ("obj")}
      {Lisp-Entry "destroy-mandatory" #f 251 20 251 37 ()}
      {Lisp-Entry "call-destroy" #f 256 13 256 25 ("set-was-destroyed" "destroy" "obj")}
      {Lisp-Entry "Type" #f 266 7 266 11 ("Object")}
      {Lisp-Entry "Category" #f 274 7 274 15 ("Type")
        {Lisp-Entry "name" #f 277 8 277 12 ("generate")}
        {Lisp-Entry "fields" #f 278 8 278 14 ("generate")}
        {Lisp-Entry "virtual-size" #f 279 8 279 20 ("generate")}
        {Lisp-Entry "ancestors" #f 280 8 280 17 ("generate")}
        {Lisp-Entry "descendants" #f 281 8 281 19 ("generate")}
        {Lisp-Entry "print" #f 284 11 284 16 ("get-name" "format" "function" "self" "print-unreadable" "detail" "output")}}
      {Lisp-Entry "Class" #f 295 7 295 12 ("Category")
        {Lisp-Entry "ascendant" #f 298 8 298 17 ("generate")}
        {Lisp-Entry "interfaces" #f 299 8 299 18 ("generate")}
        {Lisp-Entry "slots" #f 300 8 300 13 ("generate")}
        {Lisp-Entry "instance-size" #f 301 8 301 21 ("generate")}
        {Lisp-Entry "level" #f 302 8 302 13 ("generate")}
        {Lisp-Entry "dispatch-table" #f 303 8 303 22 ("generate")}
        {Lisp-Entry "core-method-alist" #f 304 8 304 25 ("generate")}
        {Lisp-Entry "core-virtual-alist" #f 305 8 305 26 ("generate")}
        {Lisp-Entry "core-virtual-names" #f 306 8 306 26 ("generate")}
        {Lisp-Entry "core-vtable" #f 307 8 307 19 ("generate")}
        {Lisp-Entry "class-table" #f 308 8 308 19 ("generate")}
        {Lisp-Entry "interface-table" #f 309 8 309 23 ("generate")}
        {Lisp-Entry "coerce-object" #f 312 26 312 39 ("self" "type-name" "error" "obj")}
        {Lisp-Entry "external-name" #f 316 26 316 39 ("self" "type-name" "error" "when" "error?" "error?:")}}
      {Lisp-Entry "Object-Class" #f 321 7 321 19 ("Class")}
      {Lisp-Entry "class?" #f 324 27 324 33 ("Class" "is?" "obj")}
      {Lisp-Entry "coerce" #f 328 27 328 33 ("coerce-object" "class" "object")}
      {Lisp-Entry "allocate" #f 332 20 332 28 ("call-into-abstract" "size" "class")}
      {Lisp-Entry "Interface" #f 341 7 341 16 ("Category")
        {Lisp-Entry "ascendants" #f 344 8 344 18 ("generate")}
        {Lisp-Entry "rank" #f 345 8 345 12 ("generate")}}
      {Lisp-Entry "Field" #f 353 7 353 12 ("Object")
        {Lisp-Entry "name" #f 356 8 356 12 ("generate")}}
      {Lisp-Entry "category-field" #f 359 20 359 34 ("find-field" "field-name" "category")}
      {Lisp-Entry "all-slots" #f 363 20 363 29 ("get-slots" "model")}
      {Lisp-Entry "Method" #f 372 7 372 13 ("Field")
        {Lisp-Entry "dispatch-type" #f 375 8 375 21 ("generate")}
        {Lisp-Entry "implementation" #f 376 8 376 22 ("generate")}
        {Lisp-Entry "implementation-tree" #f 377 8 377 27 ("generate")}
        {Lisp-Entry "category-rank" #f 378 8 378 21 ("generate")}
        {Lisp-Entry "implementation-rank" #f 379 8 379 27 ("generate")}}
      {Lisp-Entry "Generic" #f 387 7 387 14 ("Object")
        {Lisp-Entry "locator" #f 390 8 390 15 ("generate")}
        {Lisp-Entry "name" #f 391 8 391 12 ("generate")}
        {Lisp-Entry "root-specific" #f 392 8 392 21 ("generate")}
        {Lisp-Entry "pending-specifics" #f 393 8 393 25 ("generate")}}
      {Lisp-Entry "Specific" #f 396 7 396 15 ("Object")
        {Lisp-Entry "dynamic-signature" #f 399 8 399 25 ("generate")}
        {Lisp-Entry "implementation" #f 400 8 400 22 ("generate")}
        {Lisp-Entry "ancestor-specifics" #f 401 8 401 26 ("generate")}
        {Lisp-Entry "descendant-specifics" #f 402 8 402 28 ("generate")}}
      {Lisp-Entry "Boolean-Class" #f 410 7 410 20 ("Class")}
      {Lisp-Entry "Boolean" #f 413 17 413 24 ("Object" "Boolean-Class")
        {Lisp-Entry "initialize" #f 416 11 416 21 ("native-class" "rest")}
        {Lisp-Entry "print" #f 420 11 420 16 ("self" "write" "detail" "output")}}
      {Lisp-Entry "/=" #f 424 27 424 29 ("=" "not" "y" "x")}
      {Lisp-Entry "neq?" #f 428 27 428 31 ("eq?" "not" "y" "x")}
      {Lisp-Entry "xor" #f 432 27 432 30 ("not" "and" "or" "y" "x")}
      {Lisp-Entry "nu=?" #f 437 20 437 24 ("cdr" "else" "car" "neq?" "null?" "cond" "scan" "iter" "first" "let" ":equal" "compare" "eq?" "and" "rest" "m" "n")}
      {Lisp-Entry "nu/=?" #f 449 20 449 25 ("nu=?" "apply" "not" ":equal" "compare" "neq?" "null?" "if" "rest" "m" "n")}
      {Lisp-Entry "nu<?" #f 455 20 455 24 ("cdr" "car" "value" "null?" "if" "max" "scan" "iter" "let" "error" "else" ":equal" ":greater" ":less" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu<=?" #f 470 20 470 25 ("cdr" "car" "value" "null?" "if" "max" "scan" "iter" "let" "error" "else" ":greater" ":equal" ":less" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu>?" #f 485 20 485 24 ("cdr" "car" "value" "null?" "if" "min" "scan" "iter" "let" "error" "else" ":equal" ":less" ":greater" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "nu>=?" #f 500 20 500 25 ("cdr" "car" "value" "null?" "if" "min" "scan" "iter" "let" "error" "else" ":less" ":equal" ":greater" "compare" "case" "and" "rest" "m" "n")}
      {Lisp-Entry "ci=?" #f 515 20 515 24 ("finally" "return" ":equal" "ci-compare" "neq?" "when" "cdr" "in" "object" "for" "loop" "car" "first" "let" "null?" "if" "rest")}
      {Lisp-Entry "ci/=?" #f 525 20 525 25 ("ci=?" "apply" "not" "rest")}
      {Lisp-Entry "ci<?" #f 529 20 529 24 ("error" "else" ":equal" ":greater" "cdr" ":less" "ci-compare" "case" "car" "value" "null?" "if" "max" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci<=?" #f 540 20 540 25 ("error" "else" ":greater" "cdr" ":equal" ":less" "ci-compare" "case" "car" "value" "null?" "if" "max" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci>?" #f 551 20 551 24 ("error" "else" ":equal" ":less" "cdr" ":greater" "ci-compare" "case" "car" "value" "null?" "if" "min" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "ci>=?" #f 562 20 562 25 ("error" "else" ":less" "cdr" ":equal" ":greater" "ci-compare" "case" "car" "value" "null?" "if" "min" "scan" "iter" "let" "rest" "n")}
      {Lisp-Entry "boolean->integer" #f 573 27 573 43 ("0" "1" "if" "bool")}
      {Lisp-Entry "integer->boolean" #f 577 27 577 43 ("0" "/=" "n")}
      {Lisp-Entry "Whitespace-Chars" #f 586 12 586 28 ()}
      {Lisp-Entry "Uppercase-Chars" #f 589 12 589 27 ()}
      {Lisp-Entry "Lowercase-Chars" #f 592 12 592 27 ()}
      {Lisp-Entry "Alphabetic-Chars" #f 595 12 595 28 ("Lowercase-Chars" "Uppercase-Chars" "append")}
      {Lisp-Entry "Numeric-Chars" #f 598 12 598 25 ()}
      {Lisp-Entry "Uppercase-Lowerbound" #f 602 12 602 32 ("char->integer")}
      {Lisp-Entry "Uppercase-Upperbound" #f 605 12 605 32 ("char->integer")}
      {Lisp-Entry "Lowercase-Lowerbound" #f 608 12 608 32 ("char->integer")}
      {Lisp-Entry "Lowercase-Upperbound" #f 611 12 611 32 ("char->integer")}
      {Lisp-Entry "Numeric-Lowerbound" #f 614 12 614 30 ("char->integer")}
      {Lisp-Entry "Numeric-Upperbound" #f 617 12 617 30 ("char->integer")}
      {Lisp-Entry "Char-Class" #f 621 7 621 17 ("Class")}
      {Lisp-Entry "Char" #f 624 17 624 21 ("Object" "Char-Class")
        {Lisp-Entry "initialize" #f 627 11 627 21 ("native-class" "rest")}
        {Lisp-Entry "print" #f 631 11 631 16 ("self" "write" "detail" "output")}
        {Lisp-Entry "coerce-string" #f 635 11 635 24 ("get-output-string" "self" "write-char" "open-output-string" "port" "let")}
        {Lisp-Entry "compare-object" #f 641 11 641 25 (":incompatible" ":less" "else" ":greater" ">" ":equal" "=" "cond" "v2" "self" "char->integer" "v1" "let" "Char" "is?" "if" "c")}
        {Lisp-Entry "ci-compare-object" #f 651 11 651 28 ("self" "downcase" "compare" "c")}
        {Lisp-Entry "object-similar?" #f 656 11 656 26 ("self" "char-similar?" "char?" "and" "object-similar?" "'object-similar?" "unimplemented" "object")}
        {Lisp-Entry "object-alphabetic?" #f 663 11 663 29 ("object-lower-case?" "object-upper-case?" "or")}
        {Lisp-Entry "object-numeric?" #f 668 11 668 26 ("Numeric-Upperbound" "<=" "Numeric-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-alphanumeric?" #f 674 11 674 31 ("object-numeric?" "object-alphabetic?" "or")}
        {Lisp-Entry "object-whitespace?" #f 679 11 679 29 ("self" "eqv?" "or")}
        {Lisp-Entry "object-upper-case?" #f 686 11 686 29 ("Uppercase-Upperbound" "<=" "Uppercase-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-lower-case?" #f 692 11 692 29 ("Lowercase-Upperbound" "<=" "Lowercase-Lowerbound" ">=" "and" "self" "char->integer" "n" "let")}
        {Lisp-Entry "object-upcase" #f 698 11 698 24 ("32" "char->integer" "-" "integer->char" "self" "lower-case?" "if")}
        {Lisp-Entry "object-downcase" #f 704 11 704 26 ("32" "char->integer" "+" "integer->char" "self" "upper-case?" "if")}
        {Lisp-Entry "object-capitalize" #f 710 11 710 28 ("object-upcase")}}
      {Lisp-Entry "whitechar?" #f 714 12 714 22 ("char-whitespace?")}
      {Lisp-Entry "char-presentation" #f 718 20 718 37 ("string" "char-symbol" "or" "char")}
      {Lisp-Entry "alphabetic?" #f 723 27 723 38 ("object-alphabetic?" "object")}
      {Lisp-Entry "numeric?" #f 727 27 727 35 ("object-numeric?" "object")}
      {Lisp-Entry "alphanumeric?" #f 731 27 731 40 ("object-alphanumeric?" "object")}
      {Lisp-Entry "whitespace?" #f 735 27 735 38 ("object-whitespace?" "object")}
      {Lisp-Entry "upper-case?" #f 739 27 739 38 ("object-upper-case?" "object")}
      {Lisp-Entry "lower-case?" #f 743 27 743 38 ("object-lower-case?" "object")}
      {Lisp-Entry "upcase" #f 747 27 747 33 ("object-upcase" "object")}
      {Lisp-Entry "downcase" #f 751 27 751 35 ("object-downcase" "object")}
      {Lisp-Entry "capitalize" #f 755 27 755 37 ("object-capitalize" "object")}
      {Lisp-Entry "vowel?" #f 759 20 759 26 ("downcase" "memv?" "c")}
      {Lisp-Entry "character-types" #f 763 12 763 27 ("symbol" "literal" "quasiquote" "backslash" "reference" "exprcomment" "comment" "unquote" "terminator" "list" "quote" "sharp" "string" "constituent" "whitespace" "invalid" "#")}
      {Lisp-Entry "character-type" #f 782 20 782 34 ("character-types" "vector-ref" "constituent" "'constituent" "127" ">" "if" "char->integer" "num" "let" "ascii-c")}
      {Lisp-Entry "jazz-constituent?" #f 789 13 789 30 ("eqv?" "constituent" "'constituent" "character-type" "eq?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "c-constituent?" #f 795 13 795 27 ("eqv?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "sql-constituent?" #f 800 13 800 29 ("eqv?" "alphanumeric?" "or" "c")}
      {Lisp-Entry "Diacritic-Equivalences" #f 815 12 815 34 ()}
      {Lisp-Entry "make-diacritic-table" #f 824 13 824 33 ("table-set!" "char" "function" "for-each" "eqv?" "test:" "make-table" "table" "let" "equivalences")}
      {Lisp-Entry "Diacritic-Table" #f 833 12 833 27 ("Diacritic-Equivalences" "make-diacritic-table")}
      {Lisp-Entry "di=?" #f 837 13 837 17 ("Diacritic-Table" "table-ref" "memv?" "ci=?" "or" "y" "x")}
      {Lisp-Entry "string-di=?" #f 842 13 842 24 ("di=?" "every" "b" "in-sequence" "a" "for" "loop" "string-length" "=" "and" "y" "x")}
      {Lisp-Entry "*exception-debugger*" #f 854 12 854 32 ()}
      {Lisp-Entry "get-exception-debugger" #f 858 13 858 35 ("*exception-debugger*")}
      {Lisp-Entry "set-exception-debugger" #f 861 13 861 35 ("*exception-debugger*" "set!" "exception-debugger")}
      {Lisp-Entry "current-exception-debugger" #f 865 12 865 38 ("make-parameter")}
      {Lisp-Entry "exception-debugger-hook" #f 869 13 869 36 ("system-exception-hook" "if" "*exception-debugger*" "current-exception-debugger" "either" "exception-debugger" "let" "other" "exc")}
      {Lisp-Entry "with-exception-debugger" #f 876 13 876 36 ("current-exception-debugger" "parameterize" "thunk" "exception-debugger")}
      {Lisp-Entry "system-exception-debugger" #f 881 13 881 38 ("system-exception-hook" "invoke-exception-hook" "exc")}
      {Lisp-Entry "with-system-exception-debugger" #f 885 13 885 43 ("system-exception-debugger" "with-exception-debugger" "thunk")}
      {Lisp-Entry "Exception" #f 890 7 890 16 ("Object")
        {Lisp-Entry "get-message" #f 893 26 893 37 ()}
        {Lisp-Entry "present-message" #f 897 26 897 41 ("get-message" "list" "rest")}
        {Lisp-Entry "print" #f 901 11 901 16 ("get-message" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "Exception-Detail" #f 907 7 907 23 ("Object")
        {Lisp-Entry "icon" #f 910 8 910 12 ("generate")}
        {Lisp-Entry "title" #f 911 8 911 13 ("generate")}
        {Lisp-Entry "location" #f 912 8 912 16 ("generate")}
        {Lisp-Entry "children" #f 913 8 913 16 ("generate")}
        {Lisp-Entry "initialize" #f 916 11 916 21 ("set-children" "set-location" "set-title" "set-icon" "nextmethod" "children" "location" "title" "icon")}
        {Lisp-Entry "fold-literal" #f 924 11 924 23 ("children" ",children" "',children" "location" ",location" "',location" "title" ",title" "',title" "icon" ",icon" "',icon" "Exception-Detail" "new")}
        {Lisp-Entry "print" #f 928 11 928 16 ("children" "location" "title" "icon" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "Continue" #f 937 7 937 15 ("Exception")}
      {Lisp-Entry "Error" #f 940 7 940 12 ("Loggable" "Exception")
        {Lisp-Entry "message" #f 943 8 943 15 ("generate")}
        {Lisp-Entry "initialize" #f 946 11 946 21 ("set-message" "nextmethod" "message" "message:")}
        {Lisp-Entry "present-message" #f 952 11 952 26 ("self" "process-class" "present-error" "active-content?" "active-content?:" "prefix?" "prefix?:")}
        {Lisp-Entry "log-info" #f 957 11 957 19 ("self" "process-class" "log-error" "output")}
        {Lisp-Entry "edit" #f 962 11 962 15 ("self" "process-class" "edit-error")}
        {Lisp-Entry "edit-child" #f 967 11 967 21 ("self" "process-class" "edit-error-child" "info")}}
      {Lisp-Entry "Read-Error" #f 971 7 971 17 ("Error")
        {Lisp-Entry "source" #f 974 8 974 14 ()}
        {Lisp-Entry "start" #f 975 8 975 13 ()}
        {Lisp-Entry "end" #f 976 8 976 11 ()}
        {Lisp-Entry "initialize" #f 979 11 979 21 ("end~self" "start~self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "source" "bind-keywords" "rest")}
        {Lisp-Entry "get-source" #f 987 18 987 28 ("source")}
        {Lisp-Entry "get-start" #f 991 18 991 27 ("start")}
        {Lisp-Entry "get-end" #f 995 18 995 25 ("end")}
        {Lisp-Entry "get-range" #f 999 18 999 27 ("end" "start" "Range" "new")}}
      {Lisp-Entry "Parse-Error" #f 1003 7 1003 18 ("Error")
        {Lisp-Entry "source" #f 1006 8 1006 14 ()}
        {Lisp-Entry "start" #f 1007 8 1007 13 ()}
        {Lisp-Entry "end" #f 1008 8 1008 11 ()}
        {Lisp-Entry "initialize" #f 1011 11 1011 21 ("end~self" "start~self" "source~self" "set!" "nextmethod" "apply" "others" "end" "start" "source" "bind-keywords" "rest")}
        {Lisp-Entry "get-source" #f 1019 18 1019 28 ("source")}
        {Lisp-Entry "get-start" #f 1023 18 1023 27 ("start")}
        {Lisp-Entry "get-end" #f 1027 18 1027 25 ("end")}}
      {Lisp-Entry "Convertion-Error" #f 1031 7 1031 23 ("Parse-Error")
        {Lisp-Entry "object" #f 1034 8 1034 14 ()}
        {Lisp-Entry "type" #f 1035 8 1035 12 ()}
        {Lisp-Entry "initialize" #f 1038 11 1038 21 ("type~self" "object~self" "set!" "nextmethod" "apply" "others" "type" "object" "bind-keywords" "rest")}
        {Lisp-Entry "get-object" #f 1045 18 1045 28 ("object")}
        {Lisp-Entry "get-type" #f 1049 18 1049 26 ("type")}
        {Lisp-Entry "get-message" #f 1053 11 1053 22 ("format-gender" "object" "format" "type-name" "string?" "if" "type" "let")}}
      {Lisp-Entry "Signal" #f 1061 7 1061 13 ("Exception")}
      {Lisp-Entry "Cancel-Signal" #f 1064 7 1064 20 ("Signal")}
      {Lisp-Entry "call-with-catch" #f 1067 13 1067 28 ("is?" "object?" "and" "exception" "function" "with-exception-filter" "thunk" "handler" "type")}
      {Lisp-Entry "throw" #f 1083 20 1083 25 ("raise" "exception")}
      {Lisp-Entry "throw-cancel" #f 1087 27 1087 39 ("Cancel-Signal" "new" "throw")}
      {Lisp-Entry "signal" #f 1091 12 1091 18 ("throw")}
      {Lisp-Entry "error" #f 1094 13 1094 18 ("format" "apply" "message:" "Error" "new" "signal" "rest")}
      {Lisp-Entry "Restart" #f 1103 7 1103 14 ("Object")
        {Lisp-Entry "name" #f 1106 8 1106 12 ("generate")}
        {Lisp-Entry "message" #f 1107 8 1107 15 ("generate")}
        {Lisp-Entry "handler" #f 1108 8 1108 15 ("generate")}
        {Lisp-Entry "initialize" #f 1111 11 1111 21 ("handler~self" "message~self" "name~self" "set!" "nextmethod" "handler" "message" "name")}
        {Lisp-Entry "print" #f 1118 11 1118 16 ("name" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "current-restarts" #f 1125 12 1125 28 ("make-parameter")}
      {Lisp-Entry "with-restart-handler" #f 1129 13 1129 33 ("Restart" "new" "cons" "current-restarts" "parameterize" "thunk" "handler" "message" "name")}
      {Lisp-Entry "with-restart-catcher" #f 1134 13 1134 33 ("else" "car" "null?" "not" "cond" "continuation-return" "rest" "with-restart-handler" "catcher-cont" "function" "continuation-capture" "thunk" "catcher" "message" "name")}
      {Lisp-Entry "find-restart" #f 1146 20 1146 32 ("current-restarts" "get-name" "eq?" "restart" "function" "find-if" "name")}
      {Lisp-Entry "find-restarts" #f 1152 20 1152 33 ("current-restarts" "get-name" "eq?" "restart" "function" "collect-if" "name")}
      {Lisp-Entry "invoke-restart" #f 1158 13 1158 27 ("apply" "get-handler" "handler" "let" "rest" "restart")}
      {Lisp-Entry "Walk-Location" #f 1168 7 1168 20 ("Object")
        {Lisp-Entry "module-locator" #f 1171 8 1171 22 ("generate")}
        {Lisp-Entry "declaration-locator" #f 1172 8 1172 27 ("generate")}
        {Lisp-Entry "locat" #f 1173 8 1173 13 ("generate")}
        {Lisp-Entry "print" #f 1176 11 1176 16 ("locat" "declaration-locator" "module-locator" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "Port-Class" #f 1189 7 1189 17 ("Class")}
      {Lisp-Entry "Port" #f 1192 17 1192 21 ("Object" "Port-Class")
        {Lisp-Entry "initialize" #f 1195 11 1195 21 ("native-class" "rest")}
        {Lisp-Entry "destroy" #f 1199 11 1199 18 ("nextmethod" "self" "close-port")}}
      {Lisp-Entry "Symbol-Class" #f 1209 7 1209 19 ("Class")}
      {Lisp-Entry "Symbol" #f 1212 17 1212 23 ("Object" "Symbol-Class")
        {Lisp-Entry "initialize" #f 1215 11 1215 21 ("native-class" "rest")}
        {Lisp-Entry "print" #f 1219 11 1219 16 ("self" "write" "detail" "output")}
        {Lisp-Entry "coerce-string" #f 1223 11 1223 24 ("self" "symbol->string")}
        {Lisp-Entry "compare-object" #f 1227 11 1227 25 (":incompatible" "self" "symbol->string" "compare" "symbol?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" #f 1233 11 1233 28 (":incompatible" "self" "symbol->string" "ci-compare" "symbol?" "if" "obj")}}
      {Lisp-Entry "=" #f 1239 20 1239 21 ("eq?" "s2" "s1")}
      {Lisp-Entry "generated-symbol?" #f 1243 20 1243 37 ("symbol->string" "starts-with?" "symbol")}
      {Lisp-Entry "symbol->keyword" #f 1247 27 1247 42 ("symbol->string" "string->keyword" "symbol")}
      {Lisp-Entry "keyword->symbol" #f 1251 27 1251 42 ("keyword->string" "string->symbol" "keyword")}
      {Lisp-Entry "find-symbol" #f 1255 13 1255 24 ("string->symbol" "str")}
      {Lisp-Entry "symbol-bound?" #f 1260 13 1260 26 ("rest" "name")}
      {Lisp-Entry "symbol-unbound?" #f 1263 13 1263 28 ("rest" "name")}
      {Lisp-Entry "Keyword-Class" #f 1273 7 1273 20 ("Class")}
      {Lisp-Entry "Keyword" #f 1276 17 1276 24 ("Object" "Keyword-Class")
        {Lisp-Entry "initialize" #f 1279 11 1279 21 ("native-class" "rest")}
        {Lisp-Entry "print" #f 1283 11 1283 16 ("self" "write" "detail" "output")}}
      {Lisp-Entry "find-keyword" #f 1287 20 1287 32 ("specified?" "null?" "cdr" "cddr" "set-cdr!" "cadr" "set!" "begin" "eq?" "error" "car" "keyword?" "if" "elem" "not-null?" "unspecified?" "and" "while" "unspecified" "found" "unbox-list" "scan" "before" "let" "default" "box" "keyword")}
      {Lisp-Entry "Continuation-Class" #f 1314 7 1314 25 ("Class")}
      {Lisp-Entry "Continuation" #f 1317 17 1317 29 ("Object" "Continuation-Class")}
      {Lisp-Entry "Procedure-Class" #f 1325 7 1325 22 ("Class")}
      {Lisp-Entry "Procedure" #f 1328 17 1328 26 ("Object" "Procedure-Class")}
      {Lisp-Entry "Foreign-Class" #f 1336 7 1336 20 ("Class")}
      {Lisp-Entry "Foreign" #f 1339 17 1339 24 ("Object" "Foreign-Class")}
      {Lisp-Entry "Numeric-Class" #f 1347 7 1347 20 ("Class")}
      {Lisp-Entry "Numeric" #f 1350 17 1350 24 ("Object" "Numeric-Class")
        {Lisp-Entry "numeric-norm" #f 1353 35 1353 47 ()}
        {Lisp-Entry "numeric-add" #f 1354 35 1354 46 ("obj")}
        {Lisp-Entry "numeric-negate" #f 1355 35 1355 49 ()}
        {Lisp-Entry "numeric-multiply" #f 1356 35 1356 51 ("n")}
        {Lisp-Entry "numeric-inverse" #f 1357 35 1357 50 ()}}
      {Lisp-Entry "Number-Class" #f 1365 7 1365 19 ("Numeric-Class")}
      {Lisp-Entry "Number" #f 1368 17 1368 23 ("Numeric" "Number-Class")
        {Lisp-Entry "initialize" #f 1371 11 1371 21 ("native-class" "rest")}
        {Lisp-Entry "print" #f 1375 11 1375 16 ("self" "write" "detail" "output")}
        {Lisp-Entry "compare-object" #f 1379 11 1379 25 (":greater" "else" ":less" "<" ":equal" "self" "=" "cond" "obj")}
        {Lisp-Entry "numeric-norm" #f 1385 11 1385 23 ("self" "abs")}
        {Lisp-Entry "numeric-add" #f 1389 11 1389 22 ("error" "self" "+" "number?" "if" "obj")}
        {Lisp-Entry "numeric-negate" #f 1395 11 1395 25 ("self" "-")}
        {Lisp-Entry "numeric-multiply" #f 1399 11 1399 27 ("error" "self" "*" "number?" "if" "obj")}
        {Lisp-Entry "numeric-inverse" #f 1405 11 1405 26 ("self" "/")}}
      {Lisp-Entry "Complex-Class" #f 1414 7 1414 20 ("Number-Class")}
      {Lisp-Entry "Complex" #f 1417 17 1417 24 ("Number" "Complex-Class")
        {Lisp-Entry "numeric-norm" #f 1420 11 1420 23 ("imag-part" "2" "self" "real-part" "expt" "+" "sqrt")}}
      {Lisp-Entry "Real-Class" #f 1429 7 1429 17 ("Complex-Class")}
      {Lisp-Entry "Real" #f 1432 17 1432 21 ("Complex" "Real-Class")}
      {Lisp-Entry "Rational-Class" #f 1440 7 1440 21 ("Real-Class")}
      {Lisp-Entry "Rational" #f 1443 17 1443 25 ("Real" "Rational-Class")}
      {Lisp-Entry "Integer-Class" #f 1451 7 1451 20 ("Rational-Class")}
      {Lisp-Entry "Integer" #f 1454 17 1454 24 ("Rational" "Integer-Class")}
      {Lisp-Entry "Fixnum-Class" #f 1462 7 1462 19 ("Integer-Class")}
      {Lisp-Entry "Fixnum" #f 1465 17 1465 23 ("Integer" "Fixnum-Class")}
      {Lisp-Entry "Flonum-Class" #f 1473 7 1473 19 ("Real-Class")}
      {Lisp-Entry "Flonum" #f 1476 17 1476 23 ("Real" "Flonum-Class")}
      {Lisp-Entry "fl+" #f 1481 27 1481 30 ("##fl+" "y" "x")}
      {Lisp-Entry "fl-" #f 1484 27 1484 30 ("##fl-" "y" "x")}
      {Lisp-Entry "fl*" #f 1487 27 1487 30 ("##fl*" "y" "x")}
      {Lisp-Entry "fl/" #f 1490 27 1490 30 ("##fl/" "y" "x")}
      {Lisp-Entry "relate" #f 1499 20 1499 26 ("0" "else" "1" ">" "-1" "<" "cond" "y" "x")}
      {Lisp-Entry "sign" #f 1505 20 1505 24 ("0" "relate" "n")}
      {Lisp-Entry "nu+" #f 1509 20 1509 23 ("numeric-add" "cdr" "scan" "car" "result" "iter" "let" "0" "null?" "if" "rest")}
      {Lisp-Entry "nu-" #f 1518 20 1518 23 ("nu+" "apply" "r" "let" "numeric-negate" "null?" "if" "rest" "n")}
      {Lisp-Entry "nu*" #f 1525 20 1525 23 ("numeric-multiply" "cdr" "scan" "car" "result" "iter" "let" "1" "null?" "if" "rest")}
      {Lisp-Entry "nu/" #f 1534 20 1534 23 ("nu*" "apply" "r" "let" "numeric-inverse" "null?" "if" "rest" "n")}
      {Lisp-Entry "minimum" #f 1541 20 1541 27 ("cdr" "set!" ":less" "apply-key" "eq?" "when" "object" "function" "for-each" "car" "min" "let" "compare" "compare:" "key" "key:" "lst")}
      {Lisp-Entry "maximum" #f 1550 20 1550 27 ("cdr" "set!" ":greater" "apply-key" "eq?" "when" "object" "function" "for-each" "car" "max" "let" "compare" "compare:" "key" "key:" "lst")}
      {Lisp-Entry "between?" #f 1559 20 1559 28 ("<=" ">=" "not" "or" "and" "upper" "lower" "n")}
      {Lisp-Entry "between" #f 1564 20 1564 27 ("else" ">" "<" "cond" "upper" "n" "lower")}
      {Lisp-Entry "in-interval?" #f 1570 20 1570 32 ("<" ">=" "and" "upper" "lower" "n")}
      {Lisp-Entry "norm" #f 1574 27 1574 31 ("numeric-norm" "x")}
      {Lisp-Entry "distance" #f 1578 20 1578 28 ("nu-" "norm" "end" "start")}
      {Lisp-Entry "near?" #f 1582 20 1582 25 ("nu-" "norm" "<=" "distance" "y" "x")}
      {Lisp-Entry "contiguous-range" #f 1586 20 1586 36 ("cons" "cdr" "continuation-return" "set!" "1" "+" "=" "if" "n" "for-each" "second" "car" "first" "let*" "return" "function" "continuation-capture" "not-null?" "when" "lst")}
      {Lisp-Entry "naturals" #f 1600 20 1600 28 ("collect" "below" "from" "n" "for" "loop" "upper" "lower")}
      {Lisp-Entry "lobyte" #f 1605 20 1605 26 ("#xFF" "bitwise-and" "word")}
      {Lisp-Entry "hibyte" #f 1609 20 1609 26 ("-8" "arithmetic-shift" "lobyte" "word")}
      {Lisp-Entry "make-word" #f 1613 20 1613 29 ("8" "arithmetic-shift" "bitwise-ior" "hi" "lo")}
      {Lisp-Entry "lochar" #f 1617 20 1617 26 ("#xFF" "#x80" "+" "bitwise-and" "-" "word")}
      {Lisp-Entry "hichar" #f 1621 20 1621 26 ("-8" "arithmetic-shift" "lochar" "word")}
      {Lisp-Entry "make-int" #f 1625 20 1625 28 ("16" "arithmetic-shift" "bitwise-ior" "hi" "lo")}
      {Lisp-Entry "loword" #f 1629 20 1629 26 ("#xFFFF" "bitwise-and" "dword")}
      {Lisp-Entry "hiword" #f 1633 20 1633 26 ("-16" "arithmetic-shift" "loword" "dword")}
      {Lisp-Entry "signed-loword" #f 1637 20 1637 33 ("#xFFFF" "#x8000" "+" "bitwise-and" "-" "dword")}
      {Lisp-Entry "signed-hiword" #f 1641 20 1641 33 ("-16" "arithmetic-shift" "signed-loword" "dword")}
      {Lisp-Entry "sign-word" #f 1645 20 1645 29 ("#x10000" "-" "15" "bit-set?" "if" "word")}
      {Lisp-Entry "separate" #f 1651 13 1651 21 ("values" "*" "-" "r" "quotient" "q" "let*" "int2" "int1")}
      {Lisp-Entry "randomize" #f 1657 13 1657 22 ("default-random-source" "random-source-pseudo-randomize!" "int2" "int1")}
      {Lisp-Entry "random" #f 1660 12 1660 18 ("random-integer")}
      {Lisp-Entry "bit-set" #f 1663 13 1663 20 ("bitwise-not" "bitwise-and" "bitwise-ior" "if" "1" "arithmetic-shift" "msk" "let" "bit" "pos" "num")}
      {Lisp-Entry "mask-bit-set" #f 1670 13 1670 25 ("bitwise-not" "bitwise-and" "bitwise-ior" "if" "bit" "msk" "num")}
      {Lisp-Entry "mask-bit-set?" #f 1676 13 1676 26 ("0" "bitwise-and" "/=" "msk" "num")}
      {Lisp-Entry "bit-mask" #f 1680 20 1680 28 ("1" "arithmetic-shift" "-" "lo" "hi")}
      {Lisp-Entry "random-seed" #f 1684 20 1684 31 ("10000" "random" "randomize")}
      {Lisp-Entry "sqr" #f 1690 27 1690 30 ("2" "expt" "num")}
      {Lisp-Entry "percentage" #f 1694 27 1694 37 ("100." "/" "*" "total" "part")}
      {Lisp-Entry "percent" #f 1698 27 1698 34 ("100." "*" "/" "n" "percent")}
      {Lisp-Entry "fxfloor" #f 1702 27 1702 34 ("floor" "flonum->fixnum" "r")}
      {Lisp-Entry "fxceiling" #f 1705 27 1705 36 ("ceiling" "flonum->fixnum" "r")}
      {Lisp-Entry "fxtruncate" #f 1708 27 1708 37 ("truncate" "flonum->fixnum" "r")}
      {Lisp-Entry "fxround" #f 1711 27 1711 34 ("round" "flonum->fixnum" "r")}
      {Lisp-Entry "fxfloor/" #f 1717 20 1717 28 ("fl/" "fxfloor" "d" "n")}
      {Lisp-Entry "fxceiling/" #f 1720 20 1720 30 ("fl/" "fxceiling" "d" "n")}
      {Lisp-Entry "fxtruncate/" #f 1723 20 1723 31 ("fl/" "fxtruncate" "d" "n")}
      {Lisp-Entry "fxround/" #f 1726 20 1726 28 ("fl/" "fxround" "d" "n")}
      {Lisp-Entry "Iterator" #f 1735 7 1735 15 ("Object")
        {Lisp-Entry "Empty" #f 1738 14 1738 19 ("empty")}
        {Lisp-Entry "peeked" #f 1742 8 1742 14 ("Empty")}
        {Lisp-Entry "iterate-object" #f 1745 11 1745 25 ("self")}
        {Lisp-Entry "get-next" #f 1749 26 1749 34 ("next" "peek" "prog1")}
        {Lisp-Entry "peek" #f 1754 26 1754 30 ("next" "set!" "Empty" "peeked" "eq?" "when")}
        {Lisp-Entry "unget" #f 1760 26 1760 31 ("error" "set!" "Empty" "peeked" "eq?" "if" "object")}
        {Lisp-Entry "next" #f 1766 26 1766 30 ("get-next!" "else" "set!" "prog1" "Empty" "neq?" "peeked" "eof-object?" "cond")}
        {Lisp-Entry "done?" #f 1776 26 1776 31 ("peek" "eof-object?")}
        {Lisp-Entry "get-next!" #f 1780 26 1780 35 ()}
        {Lisp-Entry "put" #f 1784 26 1784 29 ("error" "object")}
        {Lisp-Entry "get-position" #f 1788 26 1788 38 ("self" "error")}
        {Lisp-Entry "set-position" #f 1792 26 1792 38 ("self" "error" "pos")}
        {Lisp-Entry "get-state" #f 1796 26 1796 35 ()}
        {Lisp-Entry "reset-state" #f 1800 26 1800 37 ("old")}}
      {Lisp-Entry "iterate-sequence" #f 1804 27 1804 43 ("iterate-object" "obj")}
      {Lisp-Entry "Explorer" #f 1813 7 1813 15 ("Iterator")
        {Lisp-Entry "direction" #f 1816 8 1816 17 ("forward" "'forward")}
        {Lisp-Entry "peek-forward" #f 1819 29 1819 41 ("error")}
        {Lisp-Entry "peek-backward" #f 1823 29 1823 42 ("error")}
        {Lisp-Entry "peek" #f 1827 11 1827 15 ("peek-backward" "backward" "peek-forward" "forward" "direction" "case" "eof-object" "done?" "if")}
        {Lisp-Entry "goto-beginning" #f 1835 26 1835 40 ("error")}
        {Lisp-Entry "goto-end" #f 1839 26 1839 34 ("error")}
        {Lisp-Entry "forward" #f 1843 26 1843 33 ("error")}
        {Lisp-Entry "backward" #f 1847 26 1847 34 ("error")}
        {Lisp-Entry "next" #f 1851 11 1851 15 ("backward" "forward" "direction" "case" "done?" "not" "when")}
        {Lisp-Entry "done-forward?" #f 1858 29 1858 42 ("error")}
        {Lisp-Entry "done-backward?" #f 1862 29 1862 43 ("error")}
        {Lisp-Entry "done?" #f 1866 11 1866 16 ("done-backward?" "backward" "done-forward?" "forward" "direction" "case")}
        {Lisp-Entry "put-forward" #f 1872 29 1872 40 ("error" "object")}
        {Lisp-Entry "put-backward" #f 1876 29 1876 41 ("error" "object")}
        {Lisp-Entry "put" #f 1880 11 1880 14 ("put-backward" "backward" "put-forward" "forward" "direction" "case" "object")}
        {Lisp-Entry "set-direction" #f 1886 18 1886 31 ("direction" "set!" "dir")}}
      {Lisp-Entry "explore" #f 1890 20 1890 27 ("Sequence-Explorer" "new" "apply" "rest" "object")}
      {Lisp-Entry "Sequence-Class" #f 1900 7 1900 21 ("Class")
        {Lisp-Entry "allocate-sequence" #f 1903 35 1903 52 ("len")}
        {Lisp-Entry "coerce-object" #f 1906 11 1906 24 ("element" "set-element!" "below" "0" "from" "n" "for" "loop" "allocate-sequence" "new-sequence" "cardinality" "len" "let" "seq")}}
      {Lisp-Entry "Sequence" #f 1915 17 1915 25 ("Object" "Sequence-Class")
        {Lisp-Entry "compare-object" #f 1918 11 1918 25 (":incompatible" "1" "+" "neq?" "element" "compare" "cmp" ":less" "else" ":greater" ">" ":equal" "=" "cond" ">=" "or" "0" "i" "iter" "l2" "self" "cardinality" "l1" "let" "Sequence" "is?" "if" "seq")}
        {Lisp-Entry "copy-object" #f 1934 11 1934 22 ("1" "+" "element" "set-element!" "begin" "=" "0" "i" "iter" "let" "class-of" "allocate-sequence" "new-seq" "self" "cardinality" "len" "copy" "x" "function" "if" "subcopy" "let*" "deep?")}
        {Lisp-Entry "iterate-object" #f 1946 11 1946 25 ("self" "Sequence-Explorer" "new")}
        {Lisp-Entry "object-alphabetic?" #f 1950 11 1950 29 ("self" "alphabetic?" "every?")}
        {Lisp-Entry "object-numeric?" #f 1954 11 1954 26 ("self" "numeric?" "every?")}
        {Lisp-Entry "object-alphanumeric?" #f 1958 11 1958 31 ("self" "alphanumeric?" "every?")}
        {Lisp-Entry "object-whitespace?" #f 1962 11 1962 29 ("self" "whitespace?" "every?")}
        {Lisp-Entry "object-upper-case?" #f 1966 11 1966 29 ("self" "upper-case?" "every?")}
        {Lisp-Entry "object-lower-case?" #f 1970 11 1970 29 ("self" "lower-case?" "every?")}
        {Lisp-Entry "object-upcase" #f 1974 11 1974 24 ("class-of" "upcase" "self" "accumulate")}
        {Lisp-Entry "object-downcase" #f 1978 11 1978 26 ("class-of" "downcase" "self" "accumulate")}
        {Lisp-Entry "object-capitalize" #f 1982 11 1982 28 ("class-of" "upcase" "set!" "not" "alphanumeric?" "if" "object" "function" "self" "accumulate" "break?" "let")}
        {Lisp-Entry "sequence-element" #f 1996 35 1996 51 ("n")}
        {Lisp-Entry "sequence-set-element!" #f 1999 35 1999 56 ("obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 2002 35 2002 55 ()}
        {Lisp-Entry "sequence-tail" #f 2005 35 2005 48 ("start")}
        {Lisp-Entry "sequence-last" #f 2008 35 2008 48 ()}
        {Lisp-Entry "sequence-butlast" #f 2011 35 2011 51 ()}
        {Lisp-Entry "sequence-subseq!" #f 2014 26 2014 42 ("cardinality" "-" "Subseq" "new" "self" "-1" "0" "=" "and" "if" "end" "start")}
        {Lisp-Entry "sequence-replace-subseq!" #f 2020 26 2020 50 ("cardinality" "0" "self" "subseq" "append!" "replacement" "end" "start")}}
      {Lisp-Entry "sequence?" #f 2026 27 2026 36 ("Sequence" "is?" "seq")}
      {Lisp-Entry "element" #f 2030 27 2030 34 ("sequence-element" "n" "seq")}
      {Lisp-Entry "set-element!" #f 2034 27 2034 39 ("sequence-set-element!" "obj" "n" "seq")}
      {Lisp-Entry "cardinality" #f 2038 27 2038 38 ("sequence-cardinality" "seq")}
      {Lisp-Entry "empty?" #f 2042 27 2042 33 ("cardinality" "0" "=" "seq")}
      {Lisp-Entry "tail" #f 2046 27 2046 31 ("sequence-tail" "start" "seq")}
      {Lisp-Entry "last" #f 2050 27 2050 31 ("sequence-last" "seq")}
      {Lisp-Entry "butlast" #f 2054 27 2054 34 ("sequence-butlast" "seq")}
      {Lisp-Entry "skip-whitespace" #f 2058 20 2058 35 ("else" "1" "+" "element" "eq?" "cardinality" "=" "cond" "0" "either" "i" "iter" "let" "start" "start:" "seq")}
      {Lisp-Entry "subseq" #f 2065 20 2065 26 ("1" "+" "set!" "element" "set-element!" "<" "while" "j" "0" "i" "allocate-sequence" "sub" "class-of" "cls" "cardinality" "either" "-" "len" "let*" "type" "end" "start" "seq")}
      {Lisp-Entry "replace-subseq!" #f 2078 27 2078 42 ("sequence-replace-subseq!" "replacement" "end" "start" "seq")}
      {Lisp-Entry "subseq!" #f 2082 20 2082 27 ("sequence-subseq!" "cardinality" "end" "start" "seq")}
      {Lisp-Entry "sort" #f 2086 20 2086 24 ("class-of" "List" "sort" "coerce" "null/pair?" "let*" "cddr" "or" "split" "cdr" "cons" "apply-key" "if" "e2" "car" "e1" "let" "else" "null?" "cond" "l2" "l1" "merge" "merge-sort" "smaller" "l" "sort-list" "define" "key" "key:" "seq" "test")}
      {Lisp-Entry "first" #f 2117 27 2117 32 ("0" "element" "seq")}
      {Lisp-Entry "second" #f 2118 27 2118 33 ("1" "element" "seq")}
      {Lisp-Entry "third" #f 2119 27 2119 32 ("2" "element" "seq")}
      {Lisp-Entry "fourth" #f 2120 27 2120 33 ("3" "element" "seq")}
      {Lisp-Entry "fifth" #f 2121 27 2121 32 ("4" "element" "seq")}
      {Lisp-Entry "sixth" #f 2122 27 2122 32 ("5" "element" "seq")}
      {Lisp-Entry "seventh" #f 2123 27 2123 34 ("6" "element" "seq")}
      {Lisp-Entry "eighth" #f 2124 27 2124 33 ("7" "element" "seq")}
      {Lisp-Entry "ninth" #f 2125 27 2125 32 ("8" "element" "seq")}
      {Lisp-Entry "tenth" #f 2126 27 2126 32 ("9" "element" "seq")}
      {Lisp-Entry "set-first!" #f 2128 27 2128 37 ("0" "set-element!" "value" "seq")}
      {Lisp-Entry "set-second!" #f 2129 27 2129 38 ("1" "set-element!" "value" "seq")}
      {Lisp-Entry "set-third!" #f 2130 27 2130 37 ("2" "set-element!" "value" "seq")}
      {Lisp-Entry "set-fourth!" #f 2131 27 2131 38 ("3" "set-element!" "value" "seq")}
      {Lisp-Entry "set-fifth!" #f 2132 27 2132 37 ("4" "set-element!" "value" "seq")}
      {Lisp-Entry "set-sixth!" #f 2133 27 2133 37 ("5" "set-element!" "value" "seq")}
      {Lisp-Entry "set-seventh!" #f 2134 27 2134 39 ("6" "set-element!" "value" "seq")}
      {Lisp-Entry "set-eighth!" #f 2135 27 2135 38 ("7" "set-element!" "value" "seq")}
      {Lisp-Entry "set-ninth!" #f 2136 27 2136 37 ("8" "set-element!" "value" "seq")}
      {Lisp-Entry "set-tenth!" #f 2137 27 2137 37 ("9" "set-element!" "value" "seq")}
      {Lisp-Entry "element-reversed" #f 2140 27 2140 43 ("1" "cardinality" "-" "element" "n" "seq")}
      {Lisp-Entry "iterate" #f 2144 20 2144 27 ("in-sequence" "obj" "for" "loop" "proc" "seq")}
      {Lisp-Entry "accumulate" #f 2149 20 2149 30 ("coerce" "not" "if" "collect" "in-sequence" "obj" "for" "loop" "lst" "let" "type" "proc" "seq")}
      {Lisp-Entry "apply-key" #f 2158 28 2158 37 ("not" "if" "object" "key")}
      {Lisp-Entry "apply-test" #f 2164 28 2164 38 ("eqv?" "not" "if" "y" "x" "test")}
      {Lisp-Entry "gather" #f 2170 20 2170 26 ("collect" "in-sequence" "obj" "for" "loop" "coerce" "List" "type" "type:" "iterable")}
      {Lisp-Entry "collect" #f 2176 20 2176 27 ("class-of" "either" "collect" "when" "apply-key" "val" "with" "in-sequence" "obj" "for" "loop" "coerce" "type" "type:" "key" "key:" "seq" "proc")}
      {Lisp-Entry "collect-if" #f 2184 20 2184 30 ("class-of" "collect" "apply-key" "when" "in-sequence" "obj" "for" "loop" "coerce" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "collect-type" #f 2191 20 2191 32 ("class-of" "collect" "apply-key" "is?" "when" "in-sequence" "obj" "for" "loop" "coerce" "key" "key:" "seq" "type")}
      {Lisp-Entry "collect-sections" #f 2198 20 2198 36 ("reset" "get-output" "put" "begin" "apply-test" "if" "value" "function" "for-each" "section" "List-Factory" "new" "sections" "let" "test" "test:" "separator" "separator:" "lst")}
      {Lisp-Entry "count" #f 2212 20 2212 25 ("increase!" "apply-key" "apply-test" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "test" "test:" "key" "key:" "seq" "target")}
      {Lisp-Entry "count-if" #f 2220 20 2220 28 ("increase!" "apply-key" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "count-type" #f 2228 20 2228 30 ("increase!" "apply-key" "is?" "when" "in-sequence" "object" "for" "loop" "0" "total" "let" "key" "key:" "seq" "type")}
      {Lisp-Entry "find" #f 2236 20 2236 24 ("1" "-" "get-position" "continuation-return" "apply-key" "apply-test" "object" "iterate" "exit" "function" "continuation-capture" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "0" "either" "list-find" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "target" "seq")}
      {Lisp-Entry "list-find" #f 2251 13 2251 22 ("1" "+" "cdr" "else" "car" "null?" "cond" "rank" "tail" "rest" "iter" "eqv?" "x" "function" "not" "if" "let" "start" "test" "key" "target" "list")}
      {Lisp-Entry "find-in" #f 2262 20 2262 27 ("continuation-return" "apply-key" "apply-test" "object" "iterate" "exit" "function" "continuation-capture" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "0" "either" "list-find-in" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "target" "seq")}
      {Lisp-Entry "list-find-in" #f 2277 13 2277 25 ("1" "+" "cdr" "else" "car" "null?" "cond" "rank" "tail" "rest" "iter" "eqv?" "x" "function" "not" "if" "let" "start" "test" "key" "target" "list")}
      {Lisp-Entry "find-balanced" #f 2288 20 2288 33 ("error" "else" "1" "-" "get-position" "position" "continuation-return" "case" "<" "decrease!" "increase!" "apply-key" "apply-test" "cond" "object" "iterate" "exit" "function" "continuation-capture" "set-position" "when" "0" "count" "iterate-sequence" "backward" "'backward" "direction:" "explore" "if" "iterator" "let" "item" "'item" "return" "return:" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "seq" "close" "open")}
      {Lisp-Entry "find-if" #f 2309 20 2309 27 ("error" "else" "1" "-" "get-position" "position" "continuation-return" "case" "apply-key" "object" "iterate" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "exit" "function" "continuation-capture" "0" "either" "find-if-list" "not" "null/pair?" "and" "if" "item" "'item" "return" "return:" "reversed?" "reversed?:" "start" "start:" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "get-rank" #f 2327 20 2327 28 ("1" "-" "get-position" "continuation-return" "apply-key" "apply-test" "object" "iterate" "set-position" "when" "iterate-sequence" "backward" "'backward" "direction:" "explore" "iterator" "let" "exit" "function" "continuation-capture" "string-find" "string?" "0" "either" "list-find" "not" "null/pair?" "and" "if" "reversed?" "reversed?:" "start" "start:" "test" "test:" "key" "key:" "seq" "target")}
      {Lisp-Entry "skip" #f 2344 20 2344 24 ("1" "get-position" "-" "continuation-return" "apply-key" "not" "when" "object" "iterate" "set-position" "iterate-sequence" "iterator" "let" "return" "function" "continuation-capture" "0" "start" "start:" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "some?" #f 2356 20 2356 25 ("continuation-return" "apply-key" "when" "object" "iterate-sequence" "iterate" "return" "function" "continuation-capture" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "every?" #f 2366 20 2366 26 ("continuation-return" "apply-key" "not" "when" "object" "iterate-sequence" "iterate" "return" "function" "continuation-capture" "key" "key:" "seq" "predicate")}
      {Lisp-Entry "concatenate" #f 2376 20 2376 31 ("class-of" "coerce" "not" "get-output" "output" "put-sequence" "sequence" "function" "for-each" "null/pair?" "list?" "car" "first" "let*" "List-Factory" "new" "fact" "let" "null?" "if" "rest")}
      {Lisp-Entry "concatenate!" #f 2391 20 2391 32 ("concatenate" "apply" "rest")}
      {Lisp-Entry "subset?" #f 2395 20 2395 27 ("memv?" "element" "function" "every?" "null?" "or" "set2" "set1")}
      {Lisp-Entry "union" #f 2402 20 2402 25 ("apply-union" "rest")}
      {Lisp-Entry "apply-union" #f 2406 20 2406 31 ("class-of" "coerce" "cdr" "put" "get-output" "member?" "not" "when" "object" "iterate-sequence" "iterate" "set" "function" "for-each" "put-sequence" "List-Factory" "new" "dst" "car" "first" "let" "null?" "if" "test" "test:" "lst")}
      {Lisp-Entry "intersection" #f 2421 20 2421 32 ("cons" "apply-intersection" "rest" "first")}
      {Lisp-Entry "apply-intersection" #f 2425 20 2425 38 ("class-of" "get-output" "coerce" "put" "member?" "set" "every?" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "cdr" "car" "first" "let" "null?" "if" "test" "test:" "lst")}
      {Lisp-Entry "difference" #f 2440 20 2440 30 ("class-of" "get-output" "coerce" "put" "member?" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "not" "if" "eqv?" "test" "test:" "y" "x")}
      {Lisp-Entry "set-xor" #f 2451 20 2451 27 ("difference" "union" "eqv?" "test" "test:" "y" "x")}
      {Lisp-Entry "remove" #f 2456 20 2456 26 ("class-of" "get-output" "coerce" "put" "apply-test" "not" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "eqv?" "test" "test:" "seq" "target")}
      {Lisp-Entry "string-remove" #f 2465 15 2465 28 ()}
      {Lisp-Entry "remove" #f 2465 30 2465 36 ("get-output-string" "write-char" "eqv?" "not" "when" "element" "c" "cardinality" "below" "0" "from" "n" "for" "loop" "open-output-string" "output" "let" "str" "target")}
      {Lisp-Entry "remove-trailing" #f 2474 20 2474 35 ("reverse" "cons" "set!" "apply-test" "and" "unless" "element" "function" "for-each" "trailing?" "result" "let" "eqv?" "test" "test:" "list" "target")}
      {Lisp-Entry "remove-enclosing" #f 2485 20 2485 36 ("subseq" "decrease!" "1" "-" ">" "increase!" "element" "apply-test" "<" "and" "while" "tail" "head" "cardinality" "end" "0" "start" "let*" "eqv?" "test" "test:" "seq" "target")}
      {Lisp-Entry "remove-duplicates" #f 2497 20 2497 37 ("class-of" "coerce" "put" "get-output" "apply-key" "member?" "not" "when" "object" "function" "iterate-sequence" "iterate" "List-Factory" "new" "dst" "let" "eqv?" "test" "test:" "key" "key:" "seq")}
      {Lisp-Entry "remove-nils" #f 2506 20 2506 31 ("identity" "collect-if" "seq")}
      {Lisp-Entry "remove-empty-strings" #f 2510 20 2510 40 ("empty-string?" "not" "obj" "function" "collect-if" "seq")}
      {Lisp-Entry "trim-spaces" #f 2516 20 2516 31 ("remove-enclosing" "seq")}
      {Lisp-Entry "trim-whitespace" #f 2520 20 2520 35 ("whitespace?" "ignore" "c" "function" "test:" "remove-enclosing" "seq")}
      {Lisp-Entry "mismatch" #f 2526 20 2526 28 ("if" "increase!" "continuation-return" "get-next" "or" "when" "done?" "not" "while" "0" "pos" "targ" "iterate-sequence" "srce" "let" "return" "function" "continuation-capture" "equal?" "test" "test:" "seq" "target")}
      {Lisp-Entry "prefix" #f 2541 20 2541 26 ("0" "subseq" "cdr" "set!" "<" "not" "or" "and" "when" "mismatch" "n" "object" "function" "for-each" "min" "car" "ref" "let" "null?" "if" "equal?" "test" "test:" "sequences")}
      {Lisp-Entry "prefix?" #f 2556 20 2556 27 ("continuation-return" "get-next" "/=" "when" "done?" "not" "and" "while" "iter" "iterate-sequence" "targ" "let" "return" "function" "continuation-capture" "seq" "target")}
      {Lisp-Entry "Search-Context" #f 2567 7 2567 21 ("Object")
        {Lisp-Entry "target" #f 2570 8 2570 14 ("generate")}
        {Lisp-Entry "whole-words?" #f 2571 8 2571 20 ("generate")}
        {Lisp-Entry "ignore-case?" #f 2572 8 2572 20 ("generate")}
        {Lisp-Entry "constituent-test" #f 2573 8 2573 24 ("generate")}
        {Lisp-Entry "user-data" #f 2574 8 2574 17 ("generate")}}
      {Lisp-Entry "construct-search-context" #f 2577 20 2577 44 ("Search-Context" "construct" "user-data" "constituent-test" "ignore-case?" "whole-words?" "target")}
      {Lisp-Entry "make-search-context" #f 2581 20 2581 39 ("user-data" "constituent-test" "ignore-case?" "whole-words?" "construct-search-context" "target")}
      {Lisp-Entry "multisearch-impl" #f 2589 13 2589 29 ("cdr" "cons" "found" "last" "find-forward" "<=" "find-backward" "eqv?" "c" "<" "after" "before" "or" "and" "match?" "+" "else" "element" "not" ">=" "cond" "j" "i" "1" "-" "to" "match-case?" "define" "size" "char=?" "char-ci=?" "test" "get-constituent-test" "constituent-test" "get-ignore-case?" "ignore-case?" "get-whole-words?" "whole-words?" "get-target" "target" "car" "context" "null?" "scan" "iter" "0" "if" "either" "pos" "cardinality" "len" "let" "reverse?" "start" "contexts" "seq")}
      {Lisp-Entry "multisearch" #f 2656 20 2656 31 ("reverse?" "start" "multisearch-impl" "contexts" "seq")}
      {Lisp-Entry "multisearch-all" #f 2662 20 2662 35 ("queue-list" "car" "get-target" "+" "cdr" "enqueue" "begin" "multisearch-impl" "found" "0" "reverse?" "if" "start" "either" "pos" "iter" "new-queue" "queue" "cardinality" "len" "let" "contexts" "seq")}
      {Lisp-Entry "search" #f 2678 20 2678 26 ("cdr" "if" "reverse?" "start" "constituent-test" "ignore-case?" "whole-words?" "construct-search-context" "list" "multisearch-impl" "found" "let" "target" "seq")}
      {Lisp-Entry "search-all" #f 2690 20 2690 30 ("reverse?" "reverse?:" "start" "start:" "constituent-test" "ignore-case?" "whole-words?" "construct-search-context" "list" "multisearch-all" "cdr" "map" "target" "seq")}
      {Lisp-Entry "split" #f 2701 20 2701 25 ("when" "search" "iterate" "incr" "else" "get-output" "1" "+" "subseq" "put" "set!" "if" "position" "'position" "return:" "start:" "find-if" "pos" "not" "while" "done?" "List-Factory" "new" "result" "0" "previous" "let" "procedure?" "list" "cardinality" "zero?" "cond" "separator" "seq")}
      {Lisp-Entry "split-justified" #f 2730 20 2730 35 ("get-output" "increase!" "+" "set!" "subseq" "put" "begin" "<=" "if" "-" "effective-width" "not" "while" "done?" "List-Factory" "new" "result" "cardinality" "size" "pos" "let" "0" "column" "column:" "separators" "width" "seq")}
      {Lisp-Entry "join" #f 2747 20 2747 24 ("get-output" "concatenate" "apply" "seq" "function" "for-each" "put" "List-Factory" "new" "dst" "join-strings" "string?" "if" "first" "let" "else" "car" "cdr" "null?" "cond" "separator" "sequences")}
      {Lisp-Entry "inject" #f 2766 20 2766 26 ("get-output" "put" "put-sequence" "set!" "if" "element" "function" "for-each" "first?" "List-Factory" "new" "fact" "let" "inserted" "sequence")}
      {Lisp-Entry "substitute" #f 2778 20 2778 30 ("class-of" "get-output" "coerce" "put-sequence" "put" "apply-key" "apply-test" "if" "get-next" "object" "done?" "not" "while" "List-Factory" "new" "dst" "iterate-sequence" "src" "let" "sequence?" "sequence?:" "test" "test:" "key" "key:" "seq" "new-value" "old-value")}
      {Lisp-Entry "substitute-alist" #f 2791 20 2791 36 ("class-of" "get-output" "coerce" "put" "set!" "put-sequence" "apply-key" "apply-test" "when" "old" "bind" "unless" "replacement" "function" "for-each" "found?" "get-next" "object" "done?" "not" "while" "List-Factory" "new" "dst" "iterate-sequence" "src" "let" "test" "test:" "key" "key:" "seq" "replacements")}
      {Lisp-Entry "fill!" #f 2809 20 2809 25 ("next" "put" "done?" "not" "while" "set-position" "when" "iterate-sequence" "src" "let" "start" "start:" "object" "seq")}
      {Lisp-Entry "replace!" #f 2819 20 2819 28 ("next" "get-next" "put" "done?" "not" "and" "while" "set-position" "when" "rep" "iterate-sequence" "src" "let" "start" "start:" "replacement" "seq")}
      {Lisp-Entry "ordered-position" #f 2830 20 2830 36 ("find" "<=" "test" "test:" "key" "key:" "seq" "object")}
      {Lisp-Entry "insert-ordered!" #f 2834 20 2834 35 ("cardinality" "either" "insert!" "ordered-position" "n" "let" "<=" "test" "test:" "key" "key:" "seq" "object")}
      {Lisp-Entry "merge-ordered" #f 2839 20 2839 33 ("get-next" "expr" "error" "else" ":right" ":greater" ":left" ":less" "next" ":same" ":equal" "case" "ky" "apply-key" "kx" "ey" "peek" "ex" "let*" "done?" "not" "and" "while" "compare" "ci-compare" "if" "either" "compare-proc" "iy" "iterate-sequence" "ix" "let" "case-insensitive?" "case-insensitive?:" "test" "test:" "right-key" "right-key:" "left-key" "left-key:" "key" "key:" "y" "x" "proc")}
      {Lisp-Entry "merge" #f 2865 20 2865 25 ("get-output" "cdr" "set-car!" "put" ":equal" "neq?" "not" "or" "if" "object" "list" "pair" "function" "for-each-pair" "List-Factory" "new" "res" "apply-key" "min-key" ":compare" "remove-nils" "car" "map" "minimum" "min" "let*" "identity" "some?" "while" "copy" "scan" "let" "compare" "compare:" "key" "key:" "lists" "proc")}
      {Lisp-Entry "random-element" #f 2883 20 2883 34 ("cardinality" "random" "element" "seq")}
      {Lisp-Entry "partition" #f 2887 20 2887 29 ("elements" "bind" "partition" "map" "reverse!" "cdr" "set-cdr!" "list" "cons" "set!" "not" "if" "associate" "pair" "category" "let*" "element" "function" "for-each" "result" "let" "test" "test:" "identity" "key" "key:" "sequence")}
      {Lisp-Entry "partition-binary" #f 2902 20 2902 36 ("values" "cons" "set!" "if" "elem" "function" "for-each" "no" "yes" "let" "predicate" "lst")}
      {Lisp-Entry "starts-with?" #f 2913 13 2913 25 ("0" "subseq" "string=?" ">=" "and" "tl" "cardinality" "sl" "let" "target" "seq")}
      {Lisp-Entry "ends-with?" #f 2922 13 2922 23 ("-" "subseq" "string=?" ">=" "and" "tl" "cardinality" "sl" "let" "target" "seq")}
      {Lisp-Entry "for-each-reversed" #f 2932 13 2932 30 ("reverse" "for-each" "lst" "proc")}
      {Lisp-Entry "find-if-list" #f 2936 13 2936 25 ("1" "+" "cdr" "error" "else" "item" "'item" "position" "'position" "eq?" "car" "null?" "cond" "rank" "tail" "rest" "iter" "x" "function" "not" "if" "let" "returned" "start" "key" "list" "predicate")}
      {Lisp-Entry "insert-sequence!" #f 2948 27 2948 43 ("replace-subseq!" "seq" "pos" "sequence")}
      {Lisp-Entry "Sequence-Explorer" #f 2957 7 2957 24 ("Explorer")
        {Lisp-Entry "sequence" #f 2960 8 2960 16 ()}
        {Lisp-Entry "sequence-cardinality" #f 2961 8 2961 28 ()}
        {Lisp-Entry "current" #f 2962 8 2962 15 ()}
        {Lisp-Entry "initialize" #f 2965 11 2965 21 ("current" "goto-end" "backward" "goto-beginning" "case" "not" "if" "set-direction" "cardinality" "sequence-cardinality" "sequence" "set!" "nextmethod" "start" "start:" "forward" "'forward" "direction" "direction:" "seq")}
        {Lisp-Entry "peek-forward" #f 2977 11 2977 23 ("current" "sequence" "element")}
        {Lisp-Entry "peek-backward" #f 2981 11 2981 24 ("1" "current" "-" "sequence" "element")}
        {Lisp-Entry "goto-beginning" #f 2985 11 2985 25 ("0" "current" "set!")}
        {Lisp-Entry "goto-end" #f 2989 11 2989 19 ("sequence-cardinality" "current" "set!")}
        {Lisp-Entry "forward" #f 2993 11 2993 18 ("1" "current" "increase!")}
        {Lisp-Entry "backward" #f 2997 11 2997 19 ("1" "current" "decrease!")}
        {Lisp-Entry "done-forward?" #f 3001 11 3001 24 ("sequence-cardinality" "current" ">=")}
        {Lisp-Entry "done-backward?" #f 3005 11 3005 25 ("0" "current" "=")}
        {Lisp-Entry "put-forward" #f 3009 11 3009 22 ("current" "sequence" "set-element!" "object")}
        {Lisp-Entry "put-backward" #f 3013 11 3013 23 ("1" "current" "-" "sequence" "set-element!" "object")}
        {Lisp-Entry "get-position" #f 3017 11 3017 23 ("current")}
        {Lisp-Entry "set-position" #f 3021 11 3021 23 ("sequence-cardinality" "0" "between" "current" "set!" "pos")}
        {Lisp-Entry "get-state" #f 3025 11 3025 20 ("current")}
        {Lisp-Entry "reset-state" #f 3029 11 3029 22 ("current" "set!" "state")}}
      {Lisp-Entry "List-Class" #f 3038 7 3038 17 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" #f 3041 11 3041 28 ("make-list" "len")}}
      {Lisp-Entry "List" #f 3045 17 3045 21 ("Sequence" "List-Class")
        {Lisp-Entry "initialize" #f 3048 11 3048 21 ("native-class" "rest")}
        {Lisp-Entry "print" #f 3052 11 3052 16 ("self" "write" "detail" "output")}
        {Lisp-Entry "copy-object" #f 3056 11 3056 22 ("self" "copy" "if" "x" "function" "map" "deep?")}
        {Lisp-Entry "iterate-object" #f 3064 11 3064 25 ("self" "List-Iterator" "new")}
        {Lisp-Entry "sequence-element" #f 3068 11 3068 27 ("self" "list-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 3072 11 3072 32 ("self" "list-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 3076 11 3076 31 ("self" "length")}
        {Lisp-Entry "sequence-tail" #f 3080 11 3080 24 ("1" "-" "cdr" "tail" "0" "=" "self" "null?" "or" "if" "n")}
        {Lisp-Entry "sequence-last" #f 3086 11 3086 24 ("last" "car" "self" "cdr" "null?" "if")}
        {Lisp-Entry "sequence-butlast" #f 3092 11 3092 27 ("butlast" "car" "cons" "cdr" "self" "null?" "or" "if")}
        {Lisp-Entry "sequence-subseq!" #f 3098 11 3098 27 ("subseq" "self" "-1" "0" "=" "or" "if" "end" "start")}
        {Lisp-Entry "replace-subseq!" #f 3104 11 3104 26 ("+" "after" "1" "-" "before" "let*" "self" "tail" "last-tail" "set-cdr!" "begin" "0" "=" "if" "seq" "end" "start")}}
      {Lisp-Entry "Null-Class" #f 3116 7 3116 17 ("List-Class")}
      {Lisp-Entry "Null" #f 3119 17 3119 21 ("List" "Null-Class")
        {Lisp-Entry "compare-object" #f 3122 11 3122 25 (":not-equal" ":equal" "null?" "if" "obj")}}
      {Lisp-Entry "Pair-Class" #f 3128 7 3128 17 ("List-Class")}
      {Lisp-Entry "Pair" #f 3131 17 3131 21 ("List" "Pair-Class")
        {Lisp-Entry "compare-object" #f 3134 11 3134 25 (":not-equal" "else" "null?" "and" "cond" "right" "cdr" "left" "let" ":equal" ":greater" ":less" "self" "car" "compare" "case" "pair?" "if" "obj")}}
      {Lisp-Entry "element" #f 3154 20 3154 27 ("list-ref" "n" "list")}
      {Lisp-Entry "cardinality" #f 3158 20 3158 31 ("length" "list")}
      {Lisp-Entry "insert!" #f 3162 27 3162 34 ("list" "insert-sequence!" "obj" "pos" "seq")}
      {Lisp-Entry "insert!" #f 3167 13 3167 20 ("+" "else" "set-cdr!" "null?" "cond" "cdr" "rst" "prev" "1" "i" "iter" "let" "cons" "0" "=" "if" "obj" "pos" "lst")}
      {Lisp-Entry "atom?" #f 3179 27 3179 32 ("pair?" "not" "obj")}
      {Lisp-Entry "null/pair?" #f 3183 27 3183 37 ("pair?" "null?" "or" "obj")}
      {Lisp-Entry "last-tail" #f 3187 20 3187 29 ("cdr" "pair?" "cur" "iter" "let" "null?" "if" "lst")}
      {Lisp-Entry "make-list" #f 3196 20 3196 29 ("1" "-" "cons" "set!" "0" ">" "while" "list" "car" "null?" "if" "fill" "let" "rest" "n")}
      {Lisp-Entry "list-set!" #f 3205 27 3205 36 ("list-tail" "set-car!" "value" "n" "list")}
      {Lisp-Entry "set-cadr!" #f 3209 27 3209 36 ("cdr" "set-car!" "value" "pair")}
      {Lisp-Entry "append!" #f 3213 20 3213 27 ("queue-list" "enqueue-list" "lst" "function" "for-each" "new-queue" "queue" "let" "rest")}
      {Lisp-Entry "position" #f 3221 20 3221 28 ("0" "1" "+" "cdr" "else" "car" "eqv?" "null?" "cond" "pos" "function" "position" "letrec" "lst" "element")}
      {Lisp-Entry "copy-tree" #f 3233 20 3233 29 ("cdr" "car" "copy-tree" "cons" "pair?" "if" "tree")}
      {Lisp-Entry "position-of" #f 3240 20 3240 31 ("1" "+" "cdr" "car" "eq?" "null?" "if" "0" "i" "rst" "iter" "let" "lst" "obj")}
      {Lisp-Entry "proper-list?" #f 3249 13 3249 25 ("cdr" "proper-list?" "else" "pair?" "not" "null?" "cond" "lst")}
      {Lisp-Entry "last-cdr" #f 3255 13 3255 21 ("cdr" "last-cdr" "pair?" "if" "lst")}
      {Lisp-Entry "but-last-cdr" #f 3261 13 3261 25 ("cdr" "but-last-cdr" "car" "cons" "pair?" "if" "lst")}
      {Lisp-Entry "move-to-head!" #f 3267 13 3267 26 ("else" "cons" "set-cdr!" "cond" "cdr" "scan" "previous" "iter" "let" "car" "eq?" "null?" "or" "if" "lst" "target")}
      {Lisp-Entry "move-to-tail!" #f 3278 13 3278 26 ("begin" "if" "scan" "previous" "iter" "let" "else" "cdr" "cons" "last-tail" "set-cdr!" "car" "eq?" "null?" "cond" "lst" "target")}
      {Lisp-Entry "augment" #f 3297 20 3297 27 ("get-output" "set!" "put" "car" "put-sequence" "cdr" "null?" "if" "not-null?" "while" "scan" "List-Factory" "new" "fact" "let" "rest")}
      {Lisp-Entry "memq?" #f 3308 27 3308 32 ("memq" "boolean" "list" "target")}
      {Lisp-Entry "memv?" #f 3312 27 3312 32 ("memv" "boolean" "list" "target")}
      {Lisp-Entry "member?" #f 3316 20 3316 27 ("cdr" "else" "car" "apply-key" "apply-test" "null?" "cond" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "assq-value" #f 3326 20 3326 30 ("cdr" "if" "assq" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "assv-value" #f 3333 20 3333 30 ("cdr" "if" "assv" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "assoc-value" #f 3340 20 3340 31 ("cdr" "if" "assoc" "pair" "let" "default-value" "list" "key")}
      {Lisp-Entry "associate" #f 3347 20 3347 29 ("cdr" "apply-key" "apply-test" "car" "pair" "null?" "if" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "rassociate" #f 3357 20 3357 30 ("cdr" "apply-key" "apply-test" "car" "pair" "null?" "if" "scan" "iter" "let" "equal?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "find-pair" #f 3367 20 3367 29 ("cdr" "else" "car" "eq?" "null?" "cond" "scan" "iter" "let" "list" "target")}
      {Lisp-Entry "reverse!" #f 3377 20 3377 28 ("set-cdr!" "cdr" "set!" "not-null?" "while" "ptr" "res" "let" "list")}
      {Lisp-Entry "remove!" #f 3388 20 3388 27 ("set-cdr!" "begin" "scan" "previous" "let" "null?" "if" "cdr" "set!" "car" "apply-key" "not-null?" "and" "while" "eqv?" "test" "test:" "key" "key:" "list" "target")}
      {Lisp-Entry "getprop" #f 3405 20 3405 27 ("cddr" "else" "car" "apply-key" "eqv?" "null?" "cond" "scan" "iter" "let" "key" "key:" "target" "plist")}
      {Lisp-Entry "getf" #f 3415 20 3415 24 ("cadr" "not" "if" "getprop" "pair" "let" "not-found" "not-found:" "key" "key:" "target" "plist")}
      {Lisp-Entry "setf" #f 3422 20 3422 24 ("getprop" "set-second!" "value" "target" "plist")}
      {Lisp-Entry "addf" #f 3426 20 3426 24 ("set-second!" "list" "append!" "not" "if" "getprop" "pair" "let" "value" "target" "plist")}
      {Lisp-Entry "for-each-pair" #f 3434 20 3434 33 ("cdr" "set!" "not-null?" "while" "lst" "proc")}
      {Lisp-Entry "for-each-property" #f 3440 20 3440 37 ("cddr" "set!" "cadr" "car" "not-null?" "while" "lst" "proc")}
      {Lisp-Entry "map-property" #f 3446 20 3446 32 ("queue-list" "enqueue" "value" "property" "function" "for-each-property" "new-queue" "queue" "let" "lst" "proc")}
      {Lisp-Entry "flatten" #f 3454 20 3454 27 ("append" "apply" "llist")}
      {Lisp-Entry "uniform" #f 3458 20 3458 27 ("cdr" "continuation-return" "apply-test" "unless" "value" "object" "for-each" "car" "apply-key" "first" "let" "return" "function" "continuation-capture" "when" "test" "test:" "key" "key:" "lst")}
      {Lisp-Entry "sort-property-list" #f 3471 20 3471 38 ("append" "apply" "car" "key:" "<" "sort" "sorted" "get-output" "for-each-property" "begin" "alist" "list" "put" "value" "property" "function" "proc" "List-Factory" "new" "factory" "let*" "prop-list")}
      {Lisp-Entry "List-Iterator" #f 3487 7 3487 20 ("Iterator")
        {Lisp-Entry "current" #f 3490 8 3490 15 ()}
        {Lisp-Entry "position" #f 3491 8 3491 16 ()}
        {Lisp-Entry "initialize" #f 3494 11 3494 21 ("0" "position" "current" "set!" "nextmethod" "list")}
        {Lisp-Entry "get-next!" #f 3500 11 3500 20 ("1" "+" "position" "cdr" "set!" "car" "prog1" "eof-object" "current" "null?" "if")}
        {Lisp-Entry "done?" #f 3508 11 3508 16 ("Empty" "peeked" "eq?" "current" "null?" "and")}
        {Lisp-Entry "put" #f 3512 11 3512 14 ("current" "set-car!" "object")}
        {Lisp-Entry "get-position" #f 3516 11 3516 23 ("position")}
        {Lisp-Entry "set-position" #f 3520 11 3520 23 ("tail" "current" "set!" ">" "error" "0" "<" "cond" "position" "-" "delta" "let" "pos")}
        {Lisp-Entry "get-state" #f 3528 11 3528 20 ("position" "current" "cons")}
        {Lisp-Entry "reset-state" #f 3532 11 3532 22 ("cdr" "position" "car" "current" "set!" "state")}
        {Lisp-Entry "get-list" #f 3537 18 3537 26 ("current")}}
      {Lisp-Entry "List-Factory" #f 3546 7 3546 19 ("Object")
        {Lisp-Entry "list" #f 3549 8 3549 12 ()}
        {Lisp-Entry "last-list" #f 3550 8 3550 17 ()}
        {Lisp-Entry "last-anchor" #f 3551 8 3551 19 ()}
        {Lisp-Entry "current" #f 3552 8 3552 15 ()}
        {Lisp-Entry "size" #f 3553 8 3553 12 ("0")}
        {Lisp-Entry "put" #f 3556 11 3556 14 ("increase!" "size" "prog1" "cdr" "set-cdr!" "copy-last-list" "last-list" "when" "else" "list" "cons" "set!" "current" "null?" "cond" "object")}
        {Lisp-Entry "put-unique" #f 3569 11 3569 21 ("put" "list" "member?" "unless" "eqv?" "test" "test:" "object")}
        {Lisp-Entry "put-sequence" #f 3574 11 3574 23 ("cardinality" "increase!" "size" "prog1" "set-cdr!" "last-anchor" "copy-last-list" "else" "list" "last-list" "set!" "current" "null?" "cond" "put" "iterate" "pair?" "not" "if" "when" "seq")}
        {Lisp-Entry "is-empty?" #f 3592 18 3592 27 ("current" "null?")}
        {Lisp-Entry "get-size" #f 3596 18 3596 26 ("size")}
        {Lisp-Entry "get-list" #f 3600 18 3600 26 ("list")}
        {Lisp-Entry "get-last-element" #f 3604 18 3604 34 ("current" "car")}
        {Lisp-Entry "get-output" #f 3608 11 3608 21 ("list")}
        {Lisp-Entry "reset" #f 3612 18 3612 23 ("0" "size" "current" "last-anchor" "last-list" "list" "set!")}
        {Lisp-Entry "copy-last-list" #f 3620 19 3620 33 ("set-cdr!" "else" "last-tail" "current" "last-list" "copy" "list" "set!" "last-anchor" "not" "cond")}}
      {Lisp-Entry "Table" #f 3636 17 3636 22 ("Object")
        {Lisp-Entry "initialize" #f 3639 11 3639 21 ("native-class" "rest")}
        {Lisp-Entry "print" #f 3643 11 3643 16 ("table-length" "format" "function" "self" "print-unreadable" "readably" "printer")}}
      {Lisp-Entry "table-add" #f 3650 20 3650 29 ("table-ref" "cons" "table-set!" "value" "key" "table")}
      {Lisp-Entry "table-remove!" #f 3654 20 3654 33 ("table-ref" "remove!" "table-set!" "value" "name" "table")}
      {Lisp-Entry "empty-table" #f 3658 13 3658 24 ("empty-table" "'empty-table" "unimplemented" "table")}
      {Lisp-Entry "table-keys" #f 3662 20 3662 30 ("cons" "set!" "value" "key" "function" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-values" #f 3670 20 3670 32 ("cons" "set!" "value" "key" "function" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-keys/values" #f 3678 20 3678 37 ("cons" "set!" "value" "key" "function" "iterate-table" "list" "let" "table")}
      {Lisp-Entry "table-load" #f 3686 20 3686 30 ("table-set!" "error" "table-ref" "if" "eof-object?" "not" "and" "when" "object" "read" "name" "iterate" "let" "reader" "function" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "error-on-duplicates?" "file" "table")}
      {Lisp-Entry "Cell" #f 3705 7 3705 11 ("Numeric")
        {Lisp-Entry "row" #f 3708 8 3708 11 ("generate")}
        {Lisp-Entry "col" #f 3709 8 3709 11 ("generate")}
        {Lisp-Entry "initialize" #f 3712 11 3712 21 ("col" "row" "set!" "c" "r")}
        {Lisp-Entry "copy-object" #f 3717 11 3717 22 ("col" "row" "Cell" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 3721 11 3721 25 ("get-col" "col" ":equal" "eq?" "not" "get-row" "row" "compare" "compared" "let" ":incompatible" "Cell" "is-not?" "if" "target")}
        {Lisp-Entry "fold-literal" #f 3730 11 3730 23 ("col" ",col" "',col" "row" ",row" "',row" "Cell" "new")}
        {Lisp-Entry "print" #f 3734 11 3734 16 ("col" "row" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" #f 3741 11 3741 23 ("self" "error")}
        {Lisp-Entry "numeric-add" #f 3745 11 3745 22 ("self" "error" "else" "integer?" "get-col" "col" "get-row" "row" "+" "new" "Cell" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" #f 3751 11 3751 25 ("col" "row" "-" "Cell" "new")}
        {Lisp-Entry "numeric-multiply" #f 3755 11 3755 27 ("self" "error" "col" "row" "*" "Cell" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" #f 3761 11 3761 26 ("self" "error")}
        {Lisp-Entry "increase-row" #f 3765 18 3765 30 ("+" "row" "set!" "1" "delta")}
        {Lisp-Entry "increase-col" #f 3769 18 3769 30 ("+" "col" "set!" "1" "delta")}}
      {Lisp-Entry "new-cell" #f 3773 27 3773 35 ("Cell" "construct" "col" "row")}
      {Lisp-Entry "new" #f 3776 20 3776 23 ("new-cell" "col" "row" "class")}
      {Lisp-Entry "copy-cell" #f 3780 22 3780 31 ()}
      {Lisp-Entry "copy" #f 3780 33 3780 37 ("get-col" "get-row" "Cell" "new" "c")}
      {Lisp-Entry "cell=" #f 3784 22 3784 27 ()}
      {Lisp-Entry "=" #f 3784 29 3784 30 ("get-col" "get-row" "=" "and" "c2" "c1")}
      {Lisp-Entry "cell<" #f 3789 15 3789 20 ()}
      {Lisp-Entry "<" #f 3789 22 3789 23 ("get-col" "=" "and" "<" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell<=" #f 3797 15 3797 21 ()}
      {Lisp-Entry "<=" #f 3797 23 3797 25 ("get-col" "<=" "=" "and" "<" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell>" #f 3805 15 3805 20 ()}
      {Lisp-Entry ">" #f 3805 22 3805 23 ("get-col" "=" "and" ">" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell>=" #f 3813 15 3813 21 ()}
      {Lisp-Entry ">=" #f 3813 23 3813 25 ("get-col" ">=" "=" "and" ">" "or" "r2" "get-row" "r1" "let" "c2" "c1")}
      {Lisp-Entry "cell+" #f 3821 22 3821 27 ()}
      {Lisp-Entry "+" #f 3821 29 3821 30 ("get-col" "get-row" "+" "Cell" "new" "c2" "c1")}
      {Lisp-Entry "+" #f 3827 20 3827 21 ("get-col" "+" "get-row" "Cell" "new" "n" "c")}
      {Lisp-Entry "cell-" #f 3833 22 3833 27 ()}
      {Lisp-Entry "-" #f 3833 29 3833 30 ("get-col" "get-row" "-" "Cell" "new" "c2" "c1")}
      {Lisp-Entry "-" #f 3839 20 3839 21 ("get-col" "-" "get-row" "Cell" "new" "n" "c")}
      {Lisp-Entry "Range" #f 3850 7 3850 12 ("Object")
        {Lisp-Entry "start" #f 3853 8 3853 13 ()}
        {Lisp-Entry "end" #f 3854 8 3854 11 ()}
        {Lisp-Entry "initialize" #f 3857 11 3857 21 ("end" "start" "set!" "nextmethod" "e" "s")}
        {Lisp-Entry "copy-object" #f 3863 11 3863 22 ("end" "start" "Range" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 3867 11 3867 25 (":not-equal" "else" ":equal" "get-end" "end" "get-start" "start" "=" "and" ":incompatible" "Range" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 3876 11 3876 23 ("end" ",end" "',end" "start" ",start" "',start" "Range" "new")}
        {Lisp-Entry "print" #f 3880 11 3880 16 ("end" "start" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "get-start" #f 3887 25 3887 34 ("start")}
        {Lisp-Entry "get-end" #f 3891 25 3891 32 ("end")}
        {Lisp-Entry "extent" #f 3895 26 3895 32 ("start" "end" "-")}
        {Lisp-Entry "extended?" #f 3899 26 3899 35 ("end" "start" "=" "not")}
        {Lisp-Entry "inside?" #f 3903 18 3903 25 ("end" "<" "start" ">=" "and" "n")}
        {Lisp-Entry "before?" #f 3908 18 3908 25 ("start" "<" "n")}
        {Lisp-Entry "after?" #f 3912 18 3912 24 ("end" ">" "n")}
        {Lisp-Entry "intersect?" #f 3916 18 3916 28 ("start" "get-end" ">=" "end" "get-start" "<" "and" "range")}
        {Lisp-Entry "intersect" #f 3921 18 3921 27 ("get-end" "end" "min" "get-start" "start" "max" "self" "class-of" "new" "intersect?" "when" "range")}}
      {Lisp-Entry "new-range" #f 3926 27 3926 36 ("Range" "construct" "end" "start")}
      {Lisp-Entry "new" #f 3929 20 3929 23 ("new-range" "end" "start" "class")}
      {Lisp-Entry "range=" #f 3933 22 3933 28 ()}
      {Lisp-Entry "=" #f 3933 30 3933 31 ("get-end" "get-start" "=" "and" "r2" "r1")}
      {Lisp-Entry "Range$Cell$" #f 3943 7 3943 18 ("Object")
        {Lisp-Entry "start" #f 3946 8 3946 13 ("generate")}
        {Lisp-Entry "end" #f 3947 8 3947 11 ("generate")}
        {Lisp-Entry "initialize" #f 3950 11 3950 21 ("end" "start" "set!" "nextmethod" "e" "s")}
        {Lisp-Entry "copy-object" #f 3956 11 3956 22 ("end" "start" "Range$Cell$" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 3960 11 3960 25 (":not-equal" "else" ":equal" "get-end" "end" "get-start" "start" "=" "and" ":incompatible" "Range$Cell$" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 3969 11 3969 23 ("end" ",end" "',end" "start" ",start" "',start" "Range$Cell$" "new")}
        {Lisp-Entry "print" #f 3973 11 3973 16 ("end" "start" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "extent" #f 3980 26 3980 32 ("start" "end" "-")}
        {Lisp-Entry "extended?" #f 3984 26 3984 35 ("end" "start" "=" "not")}
        {Lisp-Entry "inside?" #f 3988 18 3988 25 ("end" "<" "start" ">=" "and" "n")}
        {Lisp-Entry "before?" #f 3993 18 3993 25 ("start" "<" "n")}
        {Lisp-Entry "after?" #f 3997 18 3997 24 ("end" ">" "n")}
        {Lisp-Entry "intersect?" #f 4001 18 4001 28 ("start" "get-end" ">=" "end" "get-start" "<" "and" "range")}
        {Lisp-Entry "intersect" #f 4006 18 4006 27 ("get-end" "end" "min" "get-start" "start" "max" "self" "class-of" "new" "intersect?" "when" "range")}}
      {Lisp-Entry "new" #f 4011 20 4011 23 ("Range$Cell$" "construct" "end" "start" "class")}
      {Lisp-Entry "=" #f 4015 20 4015 21 ("get-end" "get-start" "=" "and" "r2" "r1")}
      {Lisp-Entry "Point" #f 4025 7 4025 12 ("Numeric")
        {Lisp-Entry "h" #f 4028 8 4028 9 ("generate")}
        {Lisp-Entry "v" #f 4029 8 4029 9 ("generate")}
        {Lisp-Entry "initialize" #f 4032 11 4032 21 ("v~self" "h~self" "set!" "nextmethod" "v" "h")}
        {Lisp-Entry "copy-object" #f 4038 11 4038 22 ("v" "h" "Point" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 4042 11 4042 25 (":not-equal" "else" ":equal" "get-v" "v" "get-h" "h" "=" "and" "target-point" "let" ":incompatible" "Point" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 4052 11 4052 23 ("v" ",v" "',v" "h" ",h" "',h" "Point" "new")}
        {Lisp-Entry "print" #f 4056 11 4056 16 ("v" "h" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" #f 4062 11 4062 23 ("v" "2" "h" "expt" "+" "sqrt")}
        {Lisp-Entry "numeric-add" #f 4066 11 4066 22 ("self" "error" "else" "integer?" "get-height" "get-width" "Dimension" "get-v" "v" "get-h" "h" "+" "new" "Point" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" #f 4073 11 4073 25 ("v" "h" "-" "Point" "new")}
        {Lisp-Entry "numeric-multiply" #f 4077 11 4077 27 ("self" "error" "v" "h" "*" "Point" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" #f 4083 11 4083 26 ("self" "error")}}
      {Lisp-Entry "new-point" #f 4087 27 4087 36 ("Point" "construct" "v" "h")}
      {Lisp-Entry "new" #f 4090 20 4090 23 ("new-point" "v" "h" "class")}
      {Lisp-Entry "point=" #f 4094 22 4094 28 ()}
      {Lisp-Entry "=" #f 4094 30 4094 31 ("get-v" "get-h" "=" "and" "p2" "p1")}
      {Lisp-Entry "point+" #f 4099 22 4099 28 ()}
      {Lisp-Entry "+" #f 4099 30 4099 31 ("get-v" "get-h" "+" "Point" "new" "p2" "p1")}
      {Lisp-Entry "+" #f 4105 20 4105 21 ("get-v" "get-h" "+" "Point" "new" "n" "p")}
      {Lisp-Entry "point-" #f 4111 22 4111 28 ()}
      {Lisp-Entry "-" #f 4111 30 4111 31 ("get-v" "get-h" "-" "Point" "new" "p2" "p1")}
      {Lisp-Entry "-" #f 4117 20 4117 21 ("get-v" "get-h" "-" "Point" "new" "n" "p")}
      {Lisp-Entry "-" #f 4123 20 4123 21 ("get-v" "get-h" "-" "Point" "new" "p")}
      {Lisp-Entry "point*" #f 4129 22 4129 28 ()}
      {Lisp-Entry "*" #f 4129 30 4129 31 ("get-v" "get-h" "*" "Point" "new" "n" "p")}
      {Lisp-Entry "Dimension" #f 4140 7 4140 16 ("Numeric")
        {Lisp-Entry "width" #f 4143 8 4143 13 ("generate")}
        {Lisp-Entry "height" #f 4144 8 4144 14 ("generate")}
        {Lisp-Entry "initialize" #f 4147 11 4147 21 ("height" "width" "set!" "nextmethod" "h" "w")}
        {Lisp-Entry "copy-object" #f 4153 11 4153 22 ("height" "width" "Dimension" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 4157 11 4157 25 ("get-height" "height" ":equal" "neq?" "get-width" "width" "compare" "compared" "let" ":incompatible" "Dimension" "is-not?" "if" "target")}
        {Lisp-Entry "fold-literal" #f 4166 11 4166 23 ("height" ",height" "',height" "width" ",width" "',width" "Dimension" "new")}
        {Lisp-Entry "print" #f 4170 11 4170 16 ("height" "width" "format" "readably" "printer")}
        {Lisp-Entry "numeric-norm" #f 4176 11 4176 23 ("self" "error")}
        {Lisp-Entry "numeric-add" #f 4180 11 4180 22 ("self" "error" "else" "integer?" "get-v" "get-h" "Point" "get-height" "height" "get-width" "width" "+" "new" "Dimension" "is?" "cond" "n")}
        {Lisp-Entry "numeric-negate" #f 4187 11 4187 25 ("height" "width" "-" "Dimension" "new")}
        {Lisp-Entry "numeric-multiply" #f 4191 11 4191 27 ("self" "error" "height" "width" "*" "Dimension" "new" "integer?" "if" "n")}
        {Lisp-Entry "numeric-inverse" #f 4197 11 4197 26 ("self" "error")}}
      {Lisp-Entry "new-dimension" #f 4201 27 4201 40 ("Dimension" "construct" "height" "width")}
      {Lisp-Entry "new" #f 4204 20 4204 23 ("new-dimension" "height" "width" "class")}
      {Lisp-Entry "dimension=" #f 4208 22 4208 32 ()}
      {Lisp-Entry "=" #f 4208 34 4208 35 ("get-height" "get-width" "=" "and" "d2" "d1")}
      {Lisp-Entry "dimension+" #f 4213 22 4213 32 ()}
      {Lisp-Entry "+" #f 4213 34 4213 35 ("get-height" "get-width" "+" "Dimension" "new" "d2" "d1")}
      {Lisp-Entry "dimension-" #f 4219 22 4219 32 ()}
      {Lisp-Entry "-" #f 4219 34 4219 35 ("get-height" "get-width" "-" "Dimension" "new" "d2" "d1")}
      {Lisp-Entry "dimension*" #f 4225 22 4225 32 ()}
      {Lisp-Entry "*" #f 4225 34 4225 35 ("get-height" "get-width" "*" "Dimension" "new" "n" "d")}
      {Lisp-Entry "Rect-Class" #f 4236 7 4236 17 ("Class")
        {Lisp-Entry "coerce-object" #f 4239 11 4239 24 ("nextmethod" "else" "0" "get-v" "get-h" "Rect" "new" "Point" "typecase" "object")}}
      {Lisp-Entry "Rect" #f 4245 7 4245 11 ("Object" "Rect-Class")
        {Lisp-Entry "left" #f 4249 8 4249 12 ("generate")}
        {Lisp-Entry "top" #f 4250 8 4250 11 ("generate")}
        {Lisp-Entry "right" #f 4251 8 4251 13 ("generate")}
        {Lisp-Entry "bottom" #f 4252 8 4252 14 ("generate")}
        {Lisp-Entry "initialize" #f 4255 11 4255 21 ("bottom" "right" "top" "left" "set!" "nextmethod" "b" "r" "t" "l")}
        {Lisp-Entry "copy-object" #f 4263 11 4263 22 ("bottom" "right" "top" "left" "Rect" "new" "deep?")}
        {Lisp-Entry "compare-object" #f 4267 11 4267 25 (":not-equal" "else" ":equal" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "=" "and" ":incompatible" "Rect" "is-not?" "cond" "target")}
        {Lisp-Entry "fold-literal" #f 4276 11 4276 23 ("bottom" ",bottom" "',bottom" "right" ",right" "',right" "top" ",top" "',top" "left" ",left" "',left" "Rect" "new")}
        {Lisp-Entry "print" #f 4280 11 4280 16 ("bottom" "right" "top" "left" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}}
      {Lisp-Entry "new-rect" #f 4289 27 4289 35 ("Rect" "construct" "bottom" "right" "top" "left")}
      {Lisp-Entry "new" #f 4292 20 4292 23 ("new-rect" "bottom" "right" "top" "left" "class")}
      {Lisp-Entry "rect=" #f 4296 22 4296 27 ()}
      {Lisp-Entry "=" #f 4296 29 4296 30 ("get-bottom" "get-right" "get-top" "get-left" "=" "and" "r2" "r1")}
      {Lisp-Entry "Active-Process" #f 4308 12 4308 26 ()}
      {Lisp-Entry "Process-Active?" #f 4311 12 4311 27 ()}
      {Lisp-Entry "get-process" #f 4315 20 4315 31 ("Active-Process")}
      {Lisp-Entry "get-application" #f 4319 20 4319 35 ("Active-Process")}
      {Lisp-Entry "set-process" #f 4323 13 4323 24 ("Active-Process" "set!" "process")}
      {Lisp-Entry "set-application" #f 4327 13 4327 28 ("Active-Process" "set!" "application")}
      {Lisp-Entry "activate-process" #f 4331 13 4331 29 ("Process-Active?" "set!")}
      {Lisp-Entry "process-active?" #f 4335 13 4335 28 ("Process-Active?")}
      {Lisp-Entry "Active-Workbench" #f 4339 12 4339 28 ()}
      {Lisp-Entry "get-workbench" #f 4343 13 4343 26 ("Active-Workbench")}
      {Lisp-Entry "set-workbench" #f 4347 13 4347 26 ("Active-Workbench" "set!" "workbench")}
      {Lisp-Entry "get-toplevel" #f 4351 13 4351 25 ("get-toplevel" "when" "get-application" "appl" "let")}
      {Lisp-Entry "Slot" #f 4362 7 4362 11 ("Field")
        {Lisp-Entry "offset" #f 4365 8 4365 14 ("generate")}
        {Lisp-Entry "initialize" #f 4366 8 4366 18 ("generate")}}
      {Lisp-Entry "Property" #f 4374 7 4374 15 ("Slot")
        {Lisp-Entry "getter" #f 4377 8 4377 14 ("generate")}
        {Lisp-Entry "setter" #f 4378 8 4378 14 ("generate")}}
      {Lisp-Entry "property?" #f 4381 27 4381 36 ("Property" "is?" "obj")}
      {Lisp-Entry "symbolize-property" #f 4385 20 4385 38 ("else" "keyword->symbol" "keyword?" "get-name" "field?" "cond" "property")}
      {Lisp-Entry "symbolize-properties" #f 4391 20 4391 40 ("get-output" "symbolize-property" "put" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let" "properties")}
      {Lisp-Entry "keywordize-property" #f 4401 20 4401 39 ("else" "keyword?" "field-name" "symbol->keyword" "field?" "cond" "property")}
      {Lisp-Entry "keywordize-properties" #f 4407 20 4407 41 ("get-output" "keywordize-property" "put" "value" "property" "function" "for-each-property" "List-Factory" "new" "fact" "let" "properties")}
      {Lisp-Entry "read-property" #f 4417 20 4417 33 ("property-field" "property-getter" "getter" "let" "expr" "object")}
      {Lisp-Entry "write-property" #f 4422 20 4422 34 ("property-field" "property-setter" "setter" "let" "value" "expr" "object")}
      {Lisp-Entry "property-field" #f 4427 20 4427 34 ("error" "keyword->symbol" "keyword?" "class-of" "category-field" "field" "let" "property?" "if" "expr" "object")}
      {Lisp-Entry "String-Class" #f 4441 7 4441 19 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" #f 4444 11 4444 28 ("make-string" "len")}
        {Lisp-Entry "coerce-object" #f 4448 11 4448 24 ("coerce-string" "nextmethod" "sequence?" "if" "obj")}}
      {Lisp-Entry "String" #f 4454 17 4454 23 ("Sequence" "String-Class")
        {Lisp-Entry "initialize" #f 4457 11 4457 21 ("native-class" "rest")}
        {Lisp-Entry "print" #f 4461 11 4461 16 ("write" "self" "display" ":human" "eq?" "if" "detail" "output")}
        {Lisp-Entry "compare-object" #f 4467 11 4467 25 (":incompatible" ":greater" "else" ":less" "string<?" ":equal" "self" "string=?" "cond" "string?" "if" "obj")}
        {Lisp-Entry "ci-compare-object" #f 4479 11 4479 28 (":incompatible" ":greater" "else" ":less" "string-ci<?" ":equal" "self" "string-ci=?" "cond" "string?" "if" "obj")}
        {Lisp-Entry "sequence-element" #f 4491 11 4491 27 ("self" "string-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 4495 11 4495 32 ("self" "string-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 4499 11 4499 31 ("self" "string-length")}
        {Lisp-Entry "sequence-tail" #f 4503 11 4503 24 ("substring" ">=" "if" "self" "cardinality" "lgt" "let" "n")}
        {Lisp-Entry "sequence-last" #f 4510 11 4510 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 4514 11 4514 27 ("1" "cardinality" "-" "0" "self" "substring")}}
      {Lisp-Entry "=" #f 4518 20 4518 21 ("string=?" "s2" "s1")}
      {Lisp-Entry "element" #f 4522 20 4522 27 ("string-ref" "n" "string")}
      {Lisp-Entry "set-element!" #f 4526 20 4526 32 ("string-set!" "c" "n" "string")}
      {Lisp-Entry "cardinality" #f 4530 20 4530 31 ("string-length" "string")}
      {Lisp-Entry "subseq" #f 4534 20 4534 26 ("substring" "end" "start" "string")}
      {Lisp-Entry "replace-subseq!" #f 4538 13 4538 28 ("cardinality" "0" "subseq" "string-append" "replacement" "end" "start" "string")}
      {Lisp-Entry "empty-string?" #f 4553 27 4553 40 ("string-length" "zero?" "string?" "and" "object")}
      {Lisp-Entry "->string" #f 4558 20 4558 28 ("get-output-string" "print" "open-output-string" "output" "let" ":human" "':human" "detail" "expr")}
      {Lisp-Entry "remove-trailing-newline" #f 4564 20 4564 43 ("0" "subseq" "1" "-" "element" "eqv?" "if" "cardinality" "len" "let" "string")}
      {Lisp-Entry "value-string?" #f 4571 20 4571 33 ("empty-string?" "not" "string?" "and" "object")}
      {Lisp-Entry "wi=" #f 4576 20 4576 23 ("else" "eqv?" "eq?" "continuation-return" "cond" "when" ">=" "increase!" "element" "whitechar?" "and" "set!" "not" "or" "while" "d2?" "=" "d1?" "w2?" "w1?" "s?" "l2" "cardinality" "l1" "n2" "0" "n1" "let*" "return" "function" "continuation-capture" "s2" "s1")}
      {Lisp-Entry "unique-domain-name" #f 4616 20 4616 38 ("increase!" "->string" "set!" "iterate" "let" "suffix" "1" "n" "subseq" "starts-with?" "when" "string" "function" "collect" "suffixes" "cardinality" "common-length" "append" "common-prefix" "let*" "member?" "not" "if" "separator" "separator:" "domain" "name")}
      {Lisp-Entry "remove-numeric-suffix" #f 4636 20 4636 41 ("1" "+" "0" "subseq" "if" "position" "'position" "return:" "reversed?:" "numeric?" "not" "c" "function" "find-if" "pos" "let" "string")}
      {Lisp-Entry "compare-n" #f 4643 13 4643 22 ("1" "+" "string-ref" "not" "or" ">=" "if" "0" "n" "iter" "ylen" "string-length" "xlen" "let" "eqv?" "test" "test:" "max" "y" "x")}
      {Lisp-Entry "string-checksum" #f 4654 13 4654 28 ("1" "+" "string-ref" "char->integer" "increase!" "<" "when" "n" "iter" "string-length" "len" "0" "sum" "let" "str")}
      {Lisp-Entry "primordial-thread-object" #f 4669 12 4669 36 ("current-thread")}
      {Lisp-Entry "primordial-thread" #f 4673 20 4673 37 ("primordial-thread-object")}
      {Lisp-Entry "primordial-thread?" #f 4677 20 4677 38 ("primordial-thread" "current-thread" "eq?")}
      {Lisp-Entry "new-thread" #f 4681 20 4681 30 ("make-root-thread" "apply" "rest" "thunk")}
      {Lisp-Entry "top-threads" #f 4687 20 4687 31 ("primordial-thread" "thread-thread-group" "thread-group->thread-list")}
      {Lisp-Entry "present-thread-name" #f 4691 20 4691 39 ("->string" "else" "primordial" "'primordial" "eq?" "unspecified?" "not" "or" "cond" "name")}
      {Lisp-Entry "present-thread-state" #f 4697 20 4697 40 ("get-output-string" "else" "when" "write" "thread-state-active-timeout" "thread-state-active-waiting-for" "wf" "thread-state-active?" "thread-state-abnormally-terminated?" "thread-state-normally-terminated?" "thread-state-initialized?" "format" "thread-state-uninitialized?" "cond" "10.0" "*" "round" "/" "current-systime" "systime->seconds" "-" "expiry" "display" "to" "write-timeout" "define" "open-output-string" "port" "let" "state")}
      {Lisp-Entry "present-object" #f 4735 20 4735 34 (":reader" "->string" "exc" "function" "with-exception-catcher" "object")}
      {Lisp-Entry "thread-loop?" #f 4744 20 4744 32 ("thread-specific" "thread")}
      {Lisp-Entry "thread-start-loop" #f 4747 20 4747 37 ("thread-specific-set!" "thread")}
      {Lisp-Entry "thread-stop-loop" #f 4750 20 4750 36 ("thread-specific-set!" "thread")}
      {Lisp-Entry "thread-loop" #f 4754 20 4754 31 ("thread-loop?" "when" "thread-read" "thunk" "loop" "let")}
      {Lisp-Entry "thread-ports" #f 4762 12 4762 24 ("weak-keys:" "eq?" "test:" "make-table")}
      {Lisp-Entry "thread-ports-mutex" #f 4765 12 4765 30 ("thread-ports" "'thread-ports" "make-mutex")}
      {Lisp-Entry "get-thread-port" #f 4768 13 4768 28 ("mutex-unlock!" "table-set!" "open-vector" "port" "let" "thread-ports" "table-ref" "either" "prog1" "thread-ports-mutex" "mutex-lock!" "thread")}
      {Lisp-Entry "thread-write" #f 4776 13 4776 25 ("force-output" "write" "get-thread-port" "thread-port" "let" "value" "thread")}
      {Lisp-Entry "thread-read" #f 4781 13 4781 24 ("read" "+infinity" "input-port-timeout-set!" "current-thread" "get-thread-port" "thread-port" "let")}
      {Lisp-Entry "thread-read-non-blocking" #f 4786 13 4786 37 ("read" "0" "input-port-timeout-set!" "current-thread" "get-thread-port" "thread-port" "let")}
      {Lisp-Entry "thread-post" #f 4792 20 4792 31 ("thread-write" "current-thread" "eq?" "if" "thunk" "name" "thread")}
      {Lisp-Entry "thread-execute" #f 4798 20 4798 34 ("mutex-unlock!" "unwind-protect" "function" "thread-write" "mutex-lock!" "make-mutex" "mutex" "let" "current-thread" "eq?" "if" "thunk" "name" "thread")}
      {Lisp-Entry "thread-call-noresult" #f 4811 12 4811 32 ("thread-call-noresult" "'thread-call-noresult" "list")}
      {Lisp-Entry "thread-call-result?" #f 4815 20 4815 39 ("thread-call-noresult" "neq?" "result")}
      {Lisp-Entry "thread-call" #f 4819 20 4819 31 ("mutex-specific" "mutex-unlock!" "unwind-protect" "function" "thread-write" "thread-call-noresult" "mutex-specific-set!" "mutex-lock!" "make-mutex" "mutex" "eq?" "if" "current-thread" "delegator" "let" "thunk" "name" "thread")}
      {Lisp-Entry "thread-exit" #f 4835 20 4835 31 ("pristine-thread-continuation" "continuation-return")}
      {Lisp-Entry "wait" #f 4844 13 4844 17 ("wait" "'wait" "unimplemented" "delay")}
      {Lisp-Entry "is-not?" #f 4853 27 4853 34 ("is?" "not" "type" "object")}
      {Lisp-Entry "type-name" #f 4857 27 4857 36 ("get-category-name" "type")}
      {Lisp-Entry "type-ascendant" #f 4861 27 4861 41 ("get-class-ascendant" "type")}
      {Lisp-Entry "type-descendants" #f 4865 20 4865 36 ("get-category-descendants" "type")}
      {Lisp-Entry "Vector-Class" #f 4874 7 4874 19 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" #f 4877 11 4877 28 ("make-vector" "len")}}
      {Lisp-Entry "Vector" #f 4881 17 4881 23 ("Sequence" "Vector-Class")
        {Lisp-Entry "initialize" #f 4884 11 4884 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 4889 11 4889 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 4895 11 4895 27 ("self" "vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 4899 11 4899 32 ("self" "vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 4903 11 4903 31 ("self" "vector-length")}
        {Lisp-Entry "sequence-tail" #f 4907 11 4907 24 ("self" "vector->list" "tail" "list->vector" "n")}
        {Lisp-Entry "sequence-last" #f 4911 11 4911 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 4915 11 4915 27 ("self" "vector->list" "butlast" "list->vector")}}
      {Lisp-Entry "element" #f 4919 20 4919 27 ("vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" #f 4923 20 4923 32 ("vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" #f 4927 20 4927 31 ("vector-length" "vector")}
      {Lisp-Entry "U8Vector-Class" #f 4936 7 4936 21 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" #f 4939 11 4939 28 ("make-u8vector" "len")}}
      {Lisp-Entry "U8Vector" #f 4943 17 4943 25 ("Sequence" "U8Vector-Class")
        {Lisp-Entry "initialize" #f 4946 11 4946 21 ("native-class" "rest")}
        {Lisp-Entry "object-similar?" #f 4951 11 4951 26 ("self" "cardinality" "zero?" "vector?" "and" "object")}
        {Lisp-Entry "sequence-element" #f 4957 11 4957 27 ("self" "u8vector-ref" "n")}
        {Lisp-Entry "sequence-set-element!" #f 4961 11 4961 32 ("self" "u8vector-set!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 4965 11 4965 31 ("self" "u8vector-length")}
        {Lisp-Entry "sequence-tail" #f 4969 11 4969 24 ("self" "u8vector->list" "tail" "list->u8vector" "n")}
        {Lisp-Entry "sequence-last" #f 4973 11 4973 24 ("1" "cardinality" "-" "self" "element")}
        {Lisp-Entry "sequence-butlast" #f 4977 11 4977 27 ("self" "u8vector->list" "butlast" "list->u8vector")}}
      {Lisp-Entry "element" #f 4981 20 4981 27 ("u8vector-ref" "n" "vector")}
      {Lisp-Entry "set-element!" #f 4985 20 4985 32 ("u8vector-set!" "obj" "n" "vector")}
      {Lisp-Entry "cardinality" #f 4989 20 4989 31 ("u8vector-length" "vector")}
      {Lisp-Entry "AXIS_MIN_SIZE" #f 4998 12 4998 25 ("8")}
      {Lisp-Entry "AXIS_GOLDEN_RATIO" #f 4999 12 4999 29 ("1.6")}
      {Lisp-Entry "Axis-Class" #f 5002 7 5002 17 ("Sequence-Class")
        {Lisp-Entry "allocate-sequence" #f 5005 11 5005 28 ("Axis" "new" "len")}}
      {Lisp-Entry "Axis" #f 5009 7 5009 11 ("Sequence" "Axis-Class")
        {Lisp-Entry "size" #f 5012 8 5012 12 ("generate")}
        {Lisp-Entry "content" #f 5013 8 5013 15 ("generate")}
        {Lisp-Entry "initialize" #f 5016 11 5016 21 ("make-vector" "content" "size" "set!" "s")}
        {Lisp-Entry "print" #f 5021 11 5021 16 ("content" "size" "format" "function" "self" "print-unreadable" "detail" "output")}
        {Lisp-Entry "sequence-element" #f 5027 11 5027 27 ("self" "element" "n")}
        {Lisp-Entry "sequence-set-element!" #f 5031 11 5031 32 ("self" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 5035 11 5035 31 ("self" "cardinality")}
        {Lisp-Entry "sequence-tail" #f 5039 11 5039 24 ("self" "tail" "n")}
        {Lisp-Entry "sequence-last" #f 5043 11 5043 24 ("self" "last")}}
      {Lisp-Entry "axis" #f 5047 13 5047 17 ("Axis" "coerce" "rest")}
      {Lisp-Entry "element" #f 5051 20 5051 27 ("get-content" "vector-ref" "n" "axis")}
      {Lisp-Entry "set-element!" #f 5055 20 5055 32 ("get-content" "vector-set!" "obj" "n" "axis")}
      {Lisp-Entry "cardinality" #f 5059 20 5059 31 ("get-size" "axis")}
      {Lisp-Entry "tail" #f 5063 13 5063 17 ("1" "+" "element" "set-element!" ">=" "if" "0" "i" "iter" "get-size" "-" "offset" "Axis" "new" "new-axis" "let" "n" "axis")}
      {Lisp-Entry "last" #f 5073 13 5073 17 ("1" "get-size" "-" "element" "axis")}
      {Lisp-Entry "insert!" #f 5077 13 5077 20 ("list" "replace-subseq!" "obj" "pos" "axis")}
      {Lisp-Entry "replace-subseq!" #f 5081 13 5081 28 ("axis-grow" "1" "element" "set-element!" "0" ">" "when" "dst" "src" "n" "iter" "let" "<" "cond" "+" "new-size" "get-size" "old-size" "delta" "cardinality" "after" "-" "before" "let*" "replacement" "end" "start" "axis")}
      {Lisp-Entry "axis-remove!" #f 5111 20 5111 32 ("replace-subseq!" "1" "+" "end" "start" "let*" "when" "find" "n" "let" "element" "axis")}
      {Lisp-Entry "axis-grow" #f 5119 20 5119 29 ("1" "+" "element" "set-element!" "begin" "<" "when" "i" "iter" "AXIS_GOLDEN_RATIO" "*" "fxround" "old-content" "old-real-size" "let" "else" "AXIS_MIN_SIZE" "make-vector" "set-content" "0" "get-size" "=" "set-size" "get-content" "cardinality" "<=" "cond" "n" "axis")}
      {Lisp-Entry "axis-add" #f 5137 20 5137 28 ("set-element!" "1" "+" "axis-grow" "cardinality" "size" "let" "obj" "axis")}
      {Lisp-Entry "new-axis" #f 5143 27 5143 35 ("make-vector" "Axis" "construct" "size")}
      {Lisp-Entry "new" #f 5146 20 5146 23 ("new-axis" "size" "class")}
      {Lisp-Entry "allocate" #f 5150 13 5150 21 ("new-axis" "size" "class")}
      {Lisp-Entry "coerce" #f 5154 13 5154 19 ("element" "set-element!" "below" "0" "from" "n" "for" "loop" "allocate" "new-sequence" "cardinality" "len" "let" "class" "seq")}
      {Lisp-Entry "axis-ref" #f 5162 22 5162 30 ()}
      {Lisp-Entry "element" #f 5162 32 5162 39 ("get-content" "vector-ref" "n" "axis")}
      {Lisp-Entry "axis-set!" #f 5166 22 5166 31 ()}
      {Lisp-Entry "set-element!" #f 5166 33 5166 45 ("get-content" "vector-set!" "obj" "n" "axis")}
      {Lisp-Entry "axis-cardinality" #f 5170 22 5170 38 ()}
      {Lisp-Entry "cardinality" #f 5170 40 5170 51 ("get-size" "axis")}
      {Lisp-Entry "box-list" #f 5184 20 5184 28 ("cons" "lst")}
      {Lisp-Entry "unbox-list" #f 5188 20 5188 30 ("cdr" "box")}
      {Lisp-Entry "Enumeration" #f 5198 7 5198 18 ("Type")
        {Lisp-Entry "name" #f 5201 8 5201 12 ()}
        {Lisp-Entry "entries" #f 5202 8 5202 15 ()}
        {Lisp-Entry "construct-literal" #f 5206 16 5206 33 ("self" "new" "entries" "name" "context")}
        {Lisp-Entry "initialize" #f 5210 11 5210 21 ("entries~self" "name~self" "set!" "Enumeration" "nextmethod" "entries" "name")}
        {Lisp-Entry "foldable?" #f 5217 11 5217 20 ()}
        {Lisp-Entry "fold-object" #f 5222 11 5222 22 ("entries" "name" "fold-more" "self" "class-of" "type-name" "fold" "output" "compiler")}
        {Lisp-Entry "print" #f 5230 11 5230 16 ("entries" "name" "self" "class-of" "type-name" "format" "readably" "printer")}
        {Lisp-Entry "get-name" #f 5237 18 5237 26 ("name")}
        {Lisp-Entry "get-entries" #f 5241 18 5241 29 ("entries")}
        {Lisp-Entry "set-value" #f 5245 18 5245 27 ("entry-from-name" "cdr" "set-car!" "value" "name")}
        {Lisp-Entry "get-size" #f 5249 11 5249 19 ("int" "size-of")}
        {Lisp-Entry "read-content" #f 5253 11 5253 23 ("%read-int" "address")}
        {Lisp-Entry "write-content" #f 5257 11 5257 24 ("%write-int" "object" "address")}
        {Lisp-Entry "entry-from-name" #f 5261 11 5261 26 ("self" "error" "eq?" "test:" "first" "key:" "entries" "find-in" "either" "name")}
        {Lisp-Entry "entry-from-value" #f 5266 11 5266 27 ("self" "error" "eqv?" "test:" "second" "key:" "entries" "find-in" "either" "value")}
        {Lisp-Entry "value->name" #f 5271 18 5271 29 ("entry-from-value" "car" "value")}
        {Lisp-Entry "name->value" #f 5275 18 5275 29 ("entry-from-name" "cadr" "name")}
        {Lisp-Entry "get-rank" #f 5279 18 5279 26 ("eq?" "test:" "first" "key:" "entries" "find" "1" "+" "0" "name" "=" "if" "target")}}
      {Lisp-Entry "enumeration?" #f 5285 27 5285 39 ("enumeration?" "'enumeration?" "unimplemented" "object")}
      {Lisp-Entry "set-enumeration!" #f 5289 20 5289 36 ("set-value" "set-enumeration!" "'set-enumeration!" "unimplemented" "value" "name" "enumeration")}
      {Lisp-Entry "parse-file" #f 5300 20 5300 30 ("parse" "string?" "if" "file")}
      {Lisp-Entry "Chunk-Size" #f 5306 12 5306 22 ("1024")}
      {Lisp-Entry "make-u8-content" #f 5310 13 5310 28 ("cons" "content" "size")}
      {Lisp-Entry "u8-content-size" #f 5313 13 5313 28 ("car" "content")}
      {Lisp-Entry "iterate-u8-content" #f 5316 13 5316 31 ("cdr" "size" "u8vector" "bind" "chunk" "function" "for-each" "proc" "content")}
      {Lisp-Entry "read-u8-content" #f 5323 13 5323 28 ("cons" "put" "increase!" "get-output" "make-u8-content" "=" "if" "read-subu8vector" "read" "Chunk-Size" "make-u8vector" "u8vector" "loop" "List-Factory" "new" "fact" "0" "size" "let" "port")}
      {Lisp-Entry "write-u8-content" #f 5336 13 5336 29 ("0" "write-subu8vector" "size" "u8vector" "function" "iterate-u8-content" "port" "content")}
      {Lisp-Entry "Permanent-Port" #f 5343 7 5343 21 ("Object")
        {Lisp-Entry "port" #f 5346 8 5346 12 ("generate")}
        {Lisp-Entry "eof?" #f 5347 8 5347 12 ("generate")}
        {Lisp-Entry "initialize" #f 5350 11 5350 21 ("eof?~self" "port~self" "set!" "nextmethod" "port")}}
      {Lisp-Entry "read-substring-blocking-for-1" #f 5356 13 5356 42 ("else" "not" "len" "set!" "lambda" "-inf.0" "to?" "=" "and" "if" "1" "+" "read-substring" "n" "+inf.0" "input-port-timeout-set!" "get-port" "port" "let" "<" "0" "set-eof?" "get-eof?" "cond" "permanent-port" "end" "start" "str")}
      {Lisp-Entry "start-pump" #f 5378 13 5378 23 ("substring" ">" "if" "0" "read-substring-blocking-for-1" "n" "iterate" "make-string" "buffer" "1000" "size" "let" "proper-tail-calls" "declare" "proc" "permanent-port")}
      {Lisp-Entry "read-until" #f 5396 20 5396 30 ("enqueue" "queue-list" "if" "read" "expr" "iterate" "new-queue" "queue" "let" "reader" "test")}
      {Lisp-Entry "read-string-element" #f 5406 20 5406 39 ("read" "call-with-input-string" "string")}
      {Lisp-Entry "read-string-content" #f 5411 20 5411 39 ("eof-object?" "read-until" "reader" "function" "call-with-input-string" "string")}
      {Lisp-Entry "read-delimited-string" #f 5417 20 5417 41 ("get-output" "peek-char" "eof-object?" "if" "skip-whites" "put" "read-delimited" "lst" "iterate" "List-Factory" "new" "fact" "let" "reader" "function" "call-with-input-string" "char" "string")}
      {Lisp-Entry "parse-integer" #f 5430 20 5430 33 ("type:" "object:" "Convertion-Error" "new" "signal" "read-string-element" "numeric?" "empty-string?" "not" "and" "if" "string")}
      {Lisp-Entry "parse-hexadecimal" #f 5436 20 5436 37 ("format" "read-string-element" "string")}
      {Lisp-Entry "parse-boolean" #f 5440 20 5440 33 ("type:" "object:" "Convertion-Error" "new" "signal" "else" "ci=?" "cond" "string")}
      {Lisp-Entry "parse-strings" #f 5446 20 5446 33 ("split" "trim-spaces" "function" "map" "=" "empty-string?" "or" "if" "separator" "separator:" "string")}
      {Lisp-Entry "parse-delimited-string" #f 5454 20 5454 42 ("parse-strings" "function" "map" "separator" "separator:" "string")}
      {Lisp-Entry "require-char" #f 5460 20 5460 32 ("error" "eof-object?" "if" "read-char" "c" "let" "reader")}
      {Lisp-Entry "skip-line" #f 5467 20 5467 29 ("eqv?" "eof-object?" "not" "and" "if" "read-char" "c" "iterate" "let" "reader")}
      {Lisp-Entry "skip-whites" #f 5478 20 5478 31 ("read-char" "whitespace?" "when" "skip-line" "eqv?" "if" "eof-object?" "unless" "peek-char" "c" "iterate" "let" "reader")}
      {Lisp-Entry "read-delimited" #f 5489 20 5489 34 ("enqueue" "else" "read" "enqueue-list" "read-char" "eqv?" "error" "queue-list" "if" "eof-object?" "cond" "peek-char" "c" "skip-whites" "iterate" "new-queue" "queue" "let" "allow-eof?" "delimiter" "kind" "reader")}
      {Lisp-Entry "string-delimiter?" #f 5509 27 5509 44 ("eqv?" "c")}
      {Lisp-Entry "read-lines" #f 5513 13 5513 23 ("queue-list" "when" "enqueue" "begin" "if" "read-proper-line" "proper?" "line" "receive" "last-proper?" "iterate" "new-queue" "queue" "let" "proper-tail-calls" "declare" "reader")}
      {Lisp-Entry "read-content-string" #f 5527 20 5527 39 ("eof-object?" "if" "read-line" "line" "let" "reader")}
      {Lisp-Entry "pipe" #f 5536 20 5536 24 ("write-char" "begin" "eof-object?" "not" "if" "read-char" "c" "iterate" "let" "output" "input")}
      {Lisp-Entry "*console-port-getter*" #f 5550 12 5550 33 ()}
      {Lisp-Entry "set-console-port-getter" #f 5554 13 5554 36 ("*console-port-getter*" "set!" "getter")}
      {Lisp-Entry "get-console-port" #f 5558 13 5558 29 ("terminal-port" "*console-port-getter*" "not" "if")}
      {Lisp-Entry "console-input-port" #f 5564 20 5564 38 ("get-console-port")}
      {Lisp-Entry "console-output-port" #f 5567 20 5567 39 ("get-console-port")}
      {Lisp-Entry "force-console" #f 5571 20 5571 33 ("get-console-port" "force-output")}
      {Lisp-Entry "with-printer" #f 5580 20 5580 32 ("else" "get-console-port" ":console" "current-output-port" ":terminal" "get-output-string" "open-output-string" "let" ":string" "case" "proc" "printer")}
      {Lisp-Entry "textual" #f 5594 13 5594 20 (":text" "print" "write" "current-output-port" "printer" "expr")}
      {Lisp-Entry "describe" #f 5600 13 5600 21 (":describe" "print" "current-output-port" "printer" "expr")}
      {Lisp-Entry "print-expr" #f 5604 13 5604 23 ("print" "current-output-port" "printer" "detail" "expr")}
      {Lisp-Entry "print-unsigned" #f 5608 13 5608 27 ("print-unsigned" "'print-unsigned" "unimplemented" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-binary" #f 5612 13 5612 25 ("2" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-hexadecimal" #f 5616 13 5616 30 ("16" "number->string" "display" "current-output-port" "printer" "n")}
      {Lisp-Entry "print-real" #f 5620 13 5620 23 ("new-frac" ">" "and" "carry?" "dot-pos" "or" "if" "len" "string->number" "round" "temp-str" "last-part" "first-part" "else" "-" "make-string" "string-append" "<" "display" "=" "cond" "frac-len" "string-length" "1" "+" "frac-str" "0" "substring" "pre-str" "find" "dot-index" "exact->inexact" "number->string" "str" "let*" "current-output-port" "printer" "precision" "r")}
      {Lisp-Entry "print-list" #f 5659 13 5659 23 ("null?" "pair?" "if" "cdr" "next" "print" "car" "expr" "scan" "iter" "let" "display" "not-null?" "when" "current-output-port" "printer" "detail" "after" "before" "last-separator" "separator" "list")}
      {Lisp-Entry "fresh-line" #f 5677 13 5677 23 ("newline" "at-fresh-line?" "unless" "current-output-port" "printer")}
      {Lisp-Entry "at-fresh-line?" #f 5682 13 5682 27 ("current-output-port" "printer")}
      {Lisp-Entry "pp" #f 5692 19 5692 21 ("pretty-print")}
      {Lisp-Entry "print-unreadable" #f 5696 20 5696 36 ("format" "object->serial" "serial" "empty-string?" "if" "spacer" "get-output-string" "open-output-string" "let" "string" "class-of" "get-name" "identifier-name" "class-name" "let*" "proc" "output" "object")}
      {Lisp-Entry "present-identifier" #f 5706 20 5706 38 ("0" "1" "element" "format" "reverse!" "reversed" "car" "cdr" "null?" "if" "symbol->string" "split" "names" "let" "identifier")}
      {Lisp-Entry "write-line" #f 5714 20 5714 30 ("newline" "display" "car" "null?" "if" "port" "let" "rest" "line")}
      {Lisp-Entry "write-lines" #f 5720 20 5720 31 ("newline" "null?" "unless" "display" "do" "remain" "remainder" "in" "line" "for" "loop" "lines" "printer")}
      {Lisp-Entry "Format-Processor" #f 5745 7 5745 23 ("Object")
        {Lisp-Entry "out" #f 5748 8 5748 11 ()}
        {Lisp-Entry "control-string" #f 5749 8 5749 22 ()}
        {Lisp-Entry "control-reader" #f 5750 8 5750 22 ()}
        {Lisp-Entry "arguments" #f 5751 8 5751 17 ()}
        {Lisp-Entry "arguments-iterator" #f 5752 8 5752 26 ()}
        {Lisp-Entry "formatter" #f 5753 8 5753 17 ()}
        {Lisp-Entry "initialize" #f 5756 11 5756 21 ("formatter~self" "List-Iterator" "new" "arguments-iterator~self" "arguments~self" "open-input-string" "control-reader~self" "control-string~self" "set!" "nextmethod" "arguments" "control-string")}
        {Lisp-Entry "process-format" #f 5770 11 5770 25 ("control-reader" "process" "out" "set!" "printer" "function" "with-printer" "destination")}
        {Lisp-Entry "process" #f 5782 11 5782 18 ("arguments-empty?" "toplevel?" "and" "localize-directive" "z" "force-directive" "!" "freshline-directive" "$" "newline-directive" "%" "tab-directive" "&" "column-directive" "_" "properties-directive" "k" "list-directive" "l" "real-directive" "r" "hexadecimal-directive" "x" "binary-directive" "b" "unsigned-directive" "u" "char-directive" "print-directive" "p" "text-directive" "t" "sexpr-directive" "s" "ascii-directive" "a" "read-parameters" "parameters" "read" "directive" "else" "conditional-directive" "error" "peek-char" "out" "write-char" "when" "require-char" "case" "set!" "eof-object?" "if" "read-char" "c" "not" "while" "done?" "let" "output?" "reader")}
        {Lisp-Entry "read-parameters" #f 5830 11 5830 26 ("read-delimited" "reader")}
        {Lisp-Entry "toplevel?" #f 5834 11 5834 20 ("control-reader" "eq?" "reader")}
        {Lisp-Entry "arguments-empty?" #f 5838 11 5838 27 ("arguments-iterator" "done?")}
        {Lisp-Entry "conditional-directive" #f 5847 11 5847 32 ("else" "process-conditional" "read-char" "peek-char" "eqv?" "cond" "reader")}
        {Lisp-Entry "read-control-string" #f 5855 11 5855 30 ("get-output-string" "write-char" "set!" "read-char" "begin" "peek-char" "eqv?" "and" "if" "require-char" "c" "not" "while" "done?" "open-output-string" "printer" "let" "reader")}
        {Lisp-Entry "process-conditional" #f 5868 11 5868 30 ("process" "peek-argument" "not" "next-argument" "and" "or" "output?" "read-control-string" "open-input-string" "subreader" "let" "explicit?" "reader")}
        {Lisp-Entry "ascii-directive" #f 5879 11 5879 26 ("display" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "sexpr-directive" #f 5887 11 5887 26 ("write" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "text-directive" #f 5895 11 5895 25 ("textual" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "print-directive" #f 5903 11 5903 26 ("print-expr" "printer" "function" "with-justification" "when" "detail" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "char-directive" #f 5912 11 5912 25 ("write-char" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "unsigned-directive" #f 5920 11 5920 29 ("print-unsigned" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "binary-directive" #f 5928 11 5928 27 ("print-binary" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "hexadecimal-directive" #f 5936 11 5936 32 ("print-hexadecimal" "printer" "function" "with-justification" "when" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "real-directive" #f 5944 11 5944 25 ("print-real" "printer" "function" "with-justification" "when" "get-precision" "precision" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "list-directive" #f 5953 11 5953 25 ("print-list" "printer" "function" "with-justification" "when" "get-detail" "detail" "get-after" "after" "get-before" "before" "get-last-separator" "last-separator" "get-separator" "separator" "next-argument" "argument" "let*" "output?" "parameters")}
        {Lisp-Entry "properties-directive" #f 5966 11 5966 31 ("cddr" "set!" "print-expr" "write-char" "neq?" "not" "memq?" "null?" "or" "and" "cadr" "value" "car" "key" "not-null?" "while" "scan" "printer" "function" "with-justification" "when" "get-detail" "detail" "get-empty-value" "empty-value" "get-properties" "properties" "next-argument" "argument" "let" "output?" "parameters")}
        {Lisp-Entry "column-directive" #f 5987 11 5987 27 ("out" "write-char" "do" "repeat" "loop" "1" "optional-parameter" "count" "let" "when" "output?" "parameters")}
        {Lisp-Entry "tab-directive" #f 5994 11 5994 24 ("out" "write-char" "do" "repeat" "loop" "1" "optional-parameter" "count" "let" "when" "output?" "parameters")}
        {Lisp-Entry "newline-directive" #f 6001 11 6001 28 ("out" "newline" "do" "repeat" "loop" "1" "optional-parameter" "count" "let" "when" "output?" "parameters")}
        {Lisp-Entry "freshline-directive" #f 6008 11 6008 30 ("newline" "do" "-" "repeat" "loop" "out" "fresh-line" "1" "optional-parameter" "count" "let" "when" "output?" "parameters")}
        {Lisp-Entry "force-directive" #f 6016 11 6016 26 ("out" "force-output" "when" "output?" "parameters")}
        {Lisp-Entry "localize-directive" #f 6021 11 6021 29 ("display" "printer" "function" "with-justification" "when" "next-argument" "localize" "argument" "let" "localize-directive" "'localize-directive" "unimplemented" "output?" "parameters")}
        {Lisp-Entry "with-justification" #f 6036 11 6036 29 ("justify" "get-output-string" "buffer" "open-output-string" "printer" "get-padding" "padding" "get-justify" "justification" "out" "not" "if" "get-width" "width" "let" "proc" "parameters")}
        {Lisp-Entry "justify" #f 6048 11 6048 18 (":right" "write-char" "do" "repeat" "loop" ":left" "case" "-" "n" "out" "display" ">=" "if" "cardinality" "size" "let" "padding" "justification" "width" "buffer")}
        {Lisp-Entry "optional-parameter" #f 6069 11 6069 29 ("next-argument" ":v" "eq?" "car" "param" "let" "null?" "if" "default" "parameters")}
        {Lisp-Entry "keyword-parameter" #f 6078 11 6078 28 ("next-argument" ":v" "eq?" "if" "not-found:" "getf" "param" "let" "default" "keyword" "parameters")}
        {Lisp-Entry "get-list?" #f 6085 11 6085 20 ("list?:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-width" #f 6089 11 6089 20 ("width:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-justify" #f 6093 11 6093 22 ("error" ":right" "memq?" "not" "if" ":left" "justify:" "keyword-parameter" "param" "let" "parameters")}
        {Lisp-Entry "get-padding" #f 6100 11 6100 22 ("padding:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-separator" #f 6104 11 6104 24 ("separator:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-last-separator" #f 6108 11 6108 29 ("last-separator:" "keyword-parameter" "separator" "parameters")}
        {Lisp-Entry "get-before" #f 6112 11 6112 21 ("before:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-after" #f 6116 11 6116 20 ("after:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-precision" #f 6120 11 6120 24 ("3" "precision:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-properties" #f 6124 11 6124 25 ("properties:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-empty-value" #f 6128 11 6128 26 ("empty-value:" "keyword-parameter" "parameters")}
        {Lisp-Entry "get-detail" #f 6132 11 6132 21 (":reader" "detail:" "keyword-parameter" "parameters")}
        {Lisp-Entry "peek-argument" #f 6141 11 6141 24 ("peek" "control-string" "error" "arguments-iterator" "done?" "if")}
        {Lisp-Entry "next-argument" #f 6147 11 6147 24 ("get-next" "control-string" "error" "arguments-iterator" "done?" "if")}}
      {Lisp-Entry "Formatting" #f 6159 7 6159 17 ("Reader")
        {Lisp-Entry "read-string" #f 6162 18 6162 29 ("self" "formatting-read-string")}
        {Lisp-Entry "read-parameters" #f 6166 18 6166 33 ("self" "formatting-read-parameters")}}
      {Lisp-Entry "parse-format" #f 6175 13 6175 25 ("cddr" "cadr" "cdr" ":string" "':string" "car" "string?" "if" "proc" "rest")}
      {Lisp-Entry "format" #f 6181 20 6181 26 ("process-format" "Format-Processor" "new" "processor" "let" "arguments" "control-string" "destination" "function" "jazz.parse-format" "rest")}
      {Lisp-Entry "format-cardinality" #f 6193 20 6193 38 ("->string" "0" "=" "if" "n")}
      {Lisp-Entry "format-plural" #f 6199 20 6199 33 ("1" "=" "if" "plural" "n")}
      {Lisp-Entry "format-gender" #f 6205 20 6205 33 ("first" "vowel?" "if" "word")}
      {Lisp-Entry "format-is/are" #f 6211 20 6211 33 ("1" "=" "if" "n")}
      {Lisp-Entry "format-was/were" #f 6217 20 6217 35 ("1" "=" "if" "n")}
      {Lisp-Entry "format-y/ies" #f 6223 20 6223 32 ("1" "=" "if" "n")}
      {Lisp-Entry "format-following" #f 6229 20 6229 36 ("format" "1" "=" "if" "n" "name")}
      {Lisp-Entry "identity" #f 6240 27 6240 35 ("x")}
      {Lisp-Entry "compose" #f 6244 27 6244 34 ("x" "function" "g" "f")}
      {Lisp-Entry "profile" #f 6255 15 6255 22 (",condition" ",name" "%profile" ",@body" "begin" "not" "if" ":condition" "condition" "name:" "name" "not-found:" "unwrap-syntax" "key:" ":on?" "getf" "on?" "cdr" "body" "car" "control" "let" "expressions")}
      {Lisp-Entry "build-search-automata" #f 6272 13 6272 34 ("build-search-automata" "'build-search-automata" "unimplemented" "constituent-test" "object" "ignore-case?" "whole-words?" "targets")}
      {Lisp-Entry "automata-statistics" #f 6276 13 6276 32 ("automata-statistics" "'automata-statistics" "unimplemented" "automata")}
      {Lisp-Entry "automata-search" #f 6280 13 6280 28 ("automata-search" "'automata-search" "unimplemented" "col" "row" "limit" "paragraphs" "automata")}
      {Lisp-Entry "Subseq-Class" #f 6289 7 6289 19 ("Sequence-Class")}
      {Lisp-Entry "Subseq" #f 6292 7 6292 13 ("Sequence" "Subseq-Class")
        {Lisp-Entry "sequence" #f 6295 8 6295 16 ("generate")}
        {Lisp-Entry "start" #f 6296 8 6296 13 ("generate")}
        {Lisp-Entry "size" #f 6297 8 6297 12 ("generate")}
        {Lisp-Entry "initialize" #f 6300 11 6300 21 ("size~self" "start~self" "sequence~self" "set!" "nextmethod" "size" "start" "sequence")}
        {Lisp-Entry "print" #f 6307 11 6307 16 ("format" "function" "self" "print-unreadable" "string-ref" "write-char" "do" "size" "+" "below" "start" "from" "n" "for" "loop" "sequence" "string?" "if" "detail" "output")}
        {Lisp-Entry "coerce-string" #f 6317 11 6317 24 ("error" "size" "+" "start" "substring" "sequence" "string?" "if")}
        {Lisp-Entry "sequence-element" #f 6323 11 6323 27 ("start" "+" "sequence" "element" "n")}
        {Lisp-Entry "sequence-set-element!" #f 6327 11 6327 32 ("start" "+" "sequence" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 6331 11 6331 31 ("size")}
        {Lisp-Entry "sequence-subseq!" #f 6335 11 6335 27 ("cardinality" "-" "start" "+" "sequence" "Subseq" "new" "self" "-1" "0" "=" "or" "if" "e" "s")}}
      {Lisp-Entry "offset-subseq!" #f 6341 13 6341 27 ("get-start" "+" "set-start" "offset" "subseq")}
      {Lisp-Entry "grow-subseq!" #f 6345 13 6345 25 ("get-size" "+" "set-size" "n" "subseq")}
      {Lisp-Entry "subseq-ref" #f 6349 22 6349 32 ()}
      {Lisp-Entry "element" #f 6349 34 6349 41 ("get-start" "+" "get-sequence" "element" "n" "subseq")}
      {Lisp-Entry "subseq-set!" #f 6353 22 6353 33 ()}
      {Lisp-Entry "set-element!" #f 6353 35 6353 47 ("get-start" "+" "get-sequence" "set-element!" "obj" "n" "subseq")}
      {Lisp-Entry "subseq-cardinality" #f 6357 22 6357 40 ()}
      {Lisp-Entry "cardinality" #f 6357 42 6357 53 ("get-size" "subseq")}
      {Lisp-Entry "Subseq$string$-Class" #f 6366 7 6366 27 ("Sequence-Class")}
      {Lisp-Entry "Subseq$string$" #f 6369 7 6369 21 ("Sequence" "Subseq$string$-Class")
        {Lisp-Entry "sequence" #f 6372 8 6372 16 ("generate")}
        {Lisp-Entry "start" #f 6373 8 6373 13 ("generate")}
        {Lisp-Entry "size" #f 6374 8 6374 12 ("generate")}
        {Lisp-Entry "initialize" #f 6377 11 6377 21 ("size~self" "start~self" "sequence~self" "set!" "nextmethod" "size" "start" "sequence")}
        {Lisp-Entry "print" #f 6384 11 6384 16 ("size" "+" "start" "sequence" "substring" "display" "detail" "output")}
        {Lisp-Entry "sequence-element" #f 6389 11 6389 27 ("start" "+" "sequence" "element" "n")}
        {Lisp-Entry "sequence-set-element!" #f 6393 11 6393 32 ("start" "+" "sequence" "set-element!" "obj" "n")}
        {Lisp-Entry "sequence-cardinality" #f 6397 11 6397 31 ("size")}
        {Lisp-Entry "sequence-subseq!" #f 6401 11 6401 27 ("cardinality" "-" "start" "+" "sequence" "Subseq$string$" "new" "self" "-1" "0" "=" "or" "if" "e" "s")}}
      {Lisp-Entry "new" #f 6407 20 6407 23 ("Subseq$string$" "construct" "size" "start" "sequence" "class")}
      {Lisp-Entry "element" #f 6411 20 6411 27 ("get-start" "+" "get-sequence" "element" "n" "subseq")}
      {Lisp-Entry "set-element!" #f 6415 20 6415 32 ("get-start" "+" "get-sequence" "set-element!" "obj" "n" "subseq")}
      {Lisp-Entry "cardinality" #f 6419 20 6419 31 ("get-size" "subseq")}
      {Lisp-Entry "subseq!" #f 6423 13 6423 20 ("-" "Subseq$string$" "new" "e" "s" "seq")}
      {Lisp-Entry "subseq!" #f 6427 13 6427 20 ("-" "get-start" "+" "get-sequence" "Subseq$string$" "new" "e" "s" "subseq")}
      {Lisp-Entry "offset-subseq!" #f 6431 13 6431 27 ("get-start" "+" "set-start" "offset" "subseq")}
      {Lisp-Entry "grow-subseq!" #f 6435 13 6435 25 ("get-size" "+" "set-size" "n" "subseq")}
      {Lisp-Entry "syntax?" #f 6444 27 6444 34 ("syntax?" "'syntax?" "unimplemented" "expr")}
      {Lisp-Entry "unwrap-syntax" #f 6448 20 6448 33 ("syntax-expression" "syntax?" "if" "unwrap-syntax" "'unwrap-syntax" "unimplemented" "expr")}
      {Lisp-Entry "word-constituent?" #f 6465 20 6465 37 ("memq?" "numeric?" "alphabetic?" "or" "c")}}})
"_library"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "_library.jazz"} 1226584780
    {Lisp-Entry "jazz.library" #f 37 9 37 21 ("jazz")
      {Lisp-Entry "Forms" #f 52 12 52 17 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-form" #f 56 13 56 26 ("Forms" "table-set!" "form" "class-name")}
      {Lisp-Entry "get-registered-form" #f 59 13 59 32 ("Forms" "table-ref" "class-name")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "library" "_library.scm"} 1226584774
    {Lisp-Entry "core.library" #f 37 8 37 20 ()}})
"_license"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "license" "_license.jazz"} 1226584782
    {Lisp-Entry "jazz.license" #f 37 9 37 21 ("jazz")
      {Lisp-Entry "Hash8" #f 44 12 44 17 ()}
      {Lisp-Entry "Roll20" #f 50 12 50 18 ("8" "10" "11" "9" "13" "15" "14" "12" "4" "6" "7" "5" "1" "3" "2" "0" "16" "18" "19" "17")}}})
"_lisp"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lisp" "_lisp.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lisp" #f 37 9 37 27 ("jazz")}})
"_listener"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "listener" "_listener.jazz"} 1226584781
    {Lisp-Entry "jazz.library.listener" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "add-listener" #f 43 20 43 32 ("cons" "lst" "listener")}
      {Lisp-Entry "remove-listener" #f 47 20 47 35 ("listener-target?" "test:" "remove!" "Handler" "is?" "if" "lst" "listener")}
      {Lisp-Entry "listener?" #f 53 20 53 29 ("listener-target?" "test:" "member?" "lst" "object")}
      {Lisp-Entry "listener-target?" #f 57 13 57 29 ("get-target" "eq?" "listener" "object")}}})
"_literals"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "literals" "_literals.jazz"} 1226584783
    {Lisp-Entry "jazz.literals" #f 37 9 37 22 ("jazz")}})
"_log"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "log" "_log.jazz"} 1226584785
    {Lisp-Entry "jazz.system.log" #f 38 9 38 24 ("jazz")
      {Lisp-Entry "log-event" #f 41 20 41 29 ("ReportEvent" "0" "array-set!" "1" "string" "new-array" "strings" "RegisterEventSource" "handle" "get-process" "process-event-source" "name" "let*" "log-event" "'log-event" "unimplemented" "message" "event-id" "type")}
      {Lisp-Entry "log-error-event" #f 51 20 51 35 ("event-id" "EVENTLOG_ERROR_TYPE" "log-event" "log-error-event" "'log-error-event" "unimplemented" "rest" "message")}
      {Lisp-Entry "log-success-event" #f 57 20 57 37 ("EVENTLOG_SUCCESS" "log-event" "log-success-event" "'log-success-event" "unimplemented" "1" "make-event-id" "event-id" "event-id:" "message")}}})
"_login"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "login" "_login.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.login" #f 37 9 37 22 ("jazz")
      {Lisp-Entry "choose-login" #f 45 20 45 32 ("Login-Dialog" "get-modal")}}})
"_look"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "look" "_look.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.look" #f 37 9 37 21 ("jazz")
      {Lisp-Entry "Active-Look" #f 40 12 40 23 ()}
      {Lisp-Entry "Installed-Looks" #f 44 12 44 27 ()}
      {Lisp-Entry "get-look" #f 48 20 48 28 ("Active-Look")}
      {Lisp-Entry "set-look" #f 52 20 52 28 ("look-update" "Active-Look" "set!" "look")}
      {Lisp-Entry "get-looks" #f 57 20 57 29 ("Installed-Looks")}
      {Lisp-Entry "set-looks" #f 61 20 61 29 ("Installed-Looks" "set!" "looks")}
      {Lisp-Entry "look-update" #f 70 13 70 24 ("Active-Look" "select-look")}
      {Lisp-Entry "select-look" #f 74 13 74 24 ("present" "set-title" "'look" "locate-component" "label" "let" "when" "get-status-bar" "status" "get-application" "appl" "let*" "look")}}})
"_lua"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lua" "_lua.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lua" #f 37 9 37 26 ("jazz")}})
"_media"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "media" "_media.jazz"} 1226584783
    {Lisp-Entry "jazz.media" #f 37 9 37 19 ("jazz")}})
"_menu"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "menu" "_menu.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.menu" #f 37 9 37 21 ("jazz")
      {Lisp-Entry "popup-workspaces-menu" #f 46 20 46 41 ("Workspaces-Menu" "new" "track-popup-menu" "2" "length" ">=" "get-children" "when" "error?:" "workspaces" "'workspaces" "get-preferences" "preferences" "let" "pos" "view")}}})
"_module"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "module" "_module.scm"} 1226584774
    {Lisp-Entry "core.module" #f 37 8 37 19 ()}})
"_modules"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "modules" "_modules.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.modules" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "validate-modules" #f 43 13 43 29 ("Y" "X" "new" "debug")}}})
"_mysql"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "_mysql.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql" #f 37 9 37 38 ("jazz")}})
"_network"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "_network.jazz"} 1226584783
    {Lisp-Entry "jazz.network" #f 37 9 37 21 ("jazz")
      {Lisp-Entry "resolve-host" #f 49 20 49 32 ("get-address" "not" "if" "host")}
      {Lisp-Entry "Port-Numbers" #f 62 12 62 24 ("32000" "router-server" "80" "http" "7" "echo" "0" "any")}
      {Lisp-Entry "resolve-service" #f 69 20 69 35 ("error" "cdr" "Port-Numbers" "assq" "pair" "let" "integer?" "if" "service")}}})
"_node"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "node" "_node.jazz"} 1226584782
    {Lisp-Entry "jazz.library.node" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "Node" #f 48 7 48 11 ("Object")
        {Lisp-Entry "name" #f 51 18 51 22 ("generate")}
        {Lisp-Entry "owned" #f 52 18 52 23 ("generate")}
        {Lisp-Entry "node-properties" #f 55 29 55 44 ()}
        {Lisp-Entry "initialize" #f 59 11 59 21 ("set-property" "for-each-property" "owned~self" "name~self" "set!" "nextmethod" "others" "name" "bind-keywords" "rest")}
        {Lisp-Entry "copy-object" #f 67 11 67 22 ("owned" "copy" "set-owned" "node-properties" "get-value" "set-value" "property" "function" "for-each" "name" "set-name" "self" "class-of" "new" "element" "let" "deep?")}
        {Lisp-Entry "compare-object" #f 77 11 77 25 (":not-equal" "else" ":equal" "node-properties" "get-value" "property" "function" "every?" "get-name" "name" "=" "and" ":incompatible" "self" "class-of" "is-not?" "cond" "target")}
        {Lisp-Entry "print" #f 89 11 89 16 ("owned-properties" "name" "name:" "list" "self" "class-of" "type-name" "identifier-name" "format" "readably" "printer")}
        {Lisp-Entry "owned-properties" #f 97 18 97 34 ("get-output" "node-properties" "get-value" "put" "owned" "memq?" "when" "property" "function" "for-each" "List-Factory" "new" "fact" "let")}
        {Lisp-Entry "named?" #f 112 18 112 24 ("name")}
        {Lisp-Entry "supports?" #f 121 18 121 27 ("node-properties" "memq?" "property")}
        {Lisp-Entry "set-property" #f 125 18 125 30 ("cons" "set!" "owned" "memq?" "unless" "set-value" "value" "property")}
        {Lisp-Entry "get-properties" #f 131 18 131 32 ("node-properties")}
        {Lisp-Entry "get-value" #f 140 26 140 35 ("error" "property")}
        {Lisp-Entry "set-value" #f 144 26 144 35 ("error" "value" "property")}}
      {Lisp-Entry "node=?" #f 148 22 148 28 ()}
      {Lisp-Entry "=" #f 148 30 148 31 ("node-properties" "get-value" "equal?" "property" "function" "every?" "get-name" "eq?" "and" "n2" "n1")}}})
"_offscreen"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "offscreen" "_offscreen.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.offscreen" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "effect-offscreen" #f 52 12 52 28 ()}
      {Lisp-Entry "get-effect-offscreen" #f 57 20 57 40 ("new-offscreen" "set!" "close" "when" "get-height" "get-width" "<=" "get-size" "size" "let" "effect-offscreen" "and" "if" "height" "width" "surface")}}})
"_oracle"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "oracle" "_oracle.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.oracle" #f 37 9 37 39 ("jazz")}})
"_p"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "suite" "_p.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.suite.p" #f 37 9 37 32 ("jazz")}})
"_performance"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "performance" "_performance.scm"} 1226584790
    {Lisp-Entry "test.performance" #f 0 8 0 24 ()}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "performance" "_performance.jazz"} 1226584785
    {Lisp-Entry "jazz.system.performance" #f 37 9 37 32 ("jazz")}})
"_platform"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "_platform.jazz"} 1227094443
    {Lisp-Entry "jazz.platform" #f 37 9 37 22 ("jazz")}})
"_print"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "_print.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print" #f 37 9 37 22 ("jazz")}})
"_process"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "process" "_process.jazz"} 1226584785
    {Lisp-Entry "jazz.system.process" #f 37 9 37 28 ("jazz")}})
"_product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "product" "_product.scm"} 1226584783
    {Lisp-Entry "jazz.product" #f 37 8 37 20 ("jazz.build-jazz" "build:" "jazz" "'jazz" "jazz.register-product")
      {Lisp-Entry "jazz.build-jazz" #f 45 9 45 24 ("jazz" "'jazz" "jazz.build-module")}}})
"_profile"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "profile" "_profile.jazz"} 1226584783
    {Lisp-Entry "jazz.profile" #f 37 9 37 21 ("jazz")
      {Lisp-Entry "Profile-Classes" #f 52 12 52 27 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-profile-class" #f 56 20 56 37 ("Profile-Classes" "table-ref" "name")}
      {Lisp-Entry "require-profile-class" #f 60 20 60 41 ("jazz.error" "get-profile-class" "or" "name")}
      {Lisp-Entry "set-profile-class" #f 65 20 65 37 ("Profile-Classes" "table-set!" "class" "name")}
      {Lisp-Entry "register-profile-class" #f 69 20 69 42 ("type-name" "identifier-name" "set-profile-class" "class")}
      {Lisp-Entry "load-profile-class" #f 73 20 73 38 ("identifier-name" "require-profile-class" "load-module" "module")}
      {Lisp-Entry "setup-catalog" #f 83 20 83 33 ("load-content" "add-catalog" "Indexed-Catalog" "new" "catalog" "format" "Profile" "Directory" "new-file" "output" "get-application" "get-cataloguer" "cataloguer" "let" "heuristics" "heuristics:" "char-encoding" "char-encoding:" "extensions" "directory" "name")}}})
"_project"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "project" "_project.jazz"} 1226584783
    {Lisp-Entry "jazz.project" #f 37 9 37 21 ("jazz")}})
"_prop"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "prop" "_prop.jazz"} 1226584779
    {Lisp-Entry "jazz.language.prop" #f 37 9 37 27 ("jazz")}})
"_properties"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "properties" "_properties.jazz"} 1226584779
    {Lisp-Entry "jazz.language.properties" #f 37 9 37 33 ("jazz")}})
"_python"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "python" "_python.jazz"} 1226584779
    {Lisp-Entry "jazz.language.python" #f 37 9 37 29 ("jazz")}})
"_q"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "suite" "_q.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.suite.q" #f 37 9 37 32 ("jazz")}})
"_recorder"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "recorder" "_recorder.jazz"} 1226584784
    {Lisp-Entry "jazz.recorder" #f 37 9 37 22 ("jazz")
      {Lisp-Entry "Recording?" #f 44 19 44 29 ()}
      {Lisp-Entry "Recording-Playing?" #f 47 19 47 37 ()}
      {Lisp-Entry "macro-recording?" #f 51 20 51 36 ("Recording?")}
      {Lisp-Entry "set-macro-recording?" #f 54 20 54 40 ("Recording?" "set!" "flag")}
      {Lisp-Entry "macro-playing?" #f 58 20 58 34 ("Recording-Playing?")}
      {Lisp-Entry "set-macro-playing?" #f 61 20 61 38 ("Recording-Playing?" "set!" "flag")}}})
"_resizer"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "resizer" "_resizer.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.resizer" #f 37 9 37 24 ("jazz")
      {Lisp-Entry "Border-Size" #f 52 10 52 21 ("4")}
      {Lisp-Entry "Handle-Size" #f 53 10 53 21 ("16")}
      {Lisp-Entry "Part-Array" #f 56 10 56 20 ("1" "0" "-1")}
      {Lisp-Entry "find-resize-part" #f 69 20 69 36 ("get-width" "get-h" "get-height" "get-v" "Part-Array" "element" "2" "else" ">" "4" "-" ">=" "1" "0" "<" "cond" "3" "quotient" "Handle-Size" "min" "handle" "Border-Size" "border" "s" "n" "function" "p" "let" "size" "pt")}
      {Lisp-Entry "get-resize-cursor" #f 82 20 82 37 ("Part-Cursor" "assoc-value" "part")}
      {Lisp-Entry "resize-client" #f 86 20 86 33 ("*" "cdr" "rv" "mv" "car" "rh" "mh" "receive" "0" "1" "values" "-1" "case" "r" "function" "p" "let" "proc" "part" "dv" "dh")}}})
"_runtime"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "runtime" "_runtime.jazz"} 1226584784
    {Lisp-Entry "jazz.runtime" #f 37 9 37 21 ("jazz")
      {Lisp-Entry "find-category-source" #f 43 20 43 40 ("find-module-source" "butlast" "compose-name" "apply" "module-name" "split-identifier" "path" "type-name" "name" "let" "category")}
      {Lisp-Entry "find-module-source" #f 51 20 51 38 ("resource-pathname" "tokenise-filename" "File" "new" "anchorize" "not" "if" "find-module-src" "src" "let" "module-name")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "library" "runtime" "_runtime.scm"} 1226584774
    {Lisp-Entry "core.library.runtime" #f 37 8 37 28 ()
      {Lisp-Entry "jazz.type-error" #f 48 9 48 24 ("jazz.error" "type" "value")}
      {Lisp-Entry "jazz.dispatch-error" #f 52 9 52 28 ("%%get-field-name" "jazz.error" "if" "type" "value" "field")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "generic" "runtime" "_runtime.scm"} 1226584774
    {Lisp-Entry "core.generic.runtime" #f 37 8 37 28 ()}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "runtime" "_runtime.scm"} 1226584773
    {Lisp-Entry "core.class.runtime" #f 37 8 37 26 ()}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "_runtime.scm"} 1226584773
    {Lisp-Entry "core.base.runtime" #f 37 8 37 25 ()}})
"_schema"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "_schema.jazz"} 1226584784
    {Lisp-Entry "jazz.schema" #f 37 9 37 20 ("jazz")
      {Lisp-Entry "sql-sanitize-string" #f 43 13 43 32 ("1" "substring" "string-append" "2" "+" "string-ref" "eq?" "<" "if" "string-length" "size" "result" "0" "i" "iterate" "let" "str")}}})
"_scheme"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "scheme" "_scheme.scm"} 1226584790
    {Lisp-Entry "scheme" #f 37 9 37 15 ("core")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "scheme" "_scheme.jazz"} 1226584780
    {Lisp-Entry "jazz.language.scheme" #f 37 9 37 29 ("jazz")}})
"_service"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "service" "platform" "windows" "_service.jazz"} 1226584786
    {Lisp-Entry "jazz.library.service.Service" #f 38 9 38 37 ("jazz")}})
"_snow"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "snow" "_snow.scm"} 1226584784
    {Lisp-Entry "jazz.snow" #f 37 9 37 18 ("scheme")}})
"_sql"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "_sql.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "Active-Data-Source" #f 54 12 54 30 ()}
      {Lisp-Entry "get-active-data-source" #f 58 20 58 42 ("Active-Data-Source")}
      {Lisp-Entry "set-active-data-source" #f 62 20 62 42 ("get-active-connection" "get-tree" "invalidate-view" "get-name" "essay" "default-source" "'default-source" "get-client" "get-designer" "set-property" "when" "get-sql-connections" "guest" "let" "Active-Data-Source" "set!" "data-source")}
      {Lisp-Entry "get-active-connection" #f 72 20 72 41 ("open" "closed" "'closed" "get-state" "eq?" "data-source:" "get-connection" "connection" "get-name" "name" "let*" "Active-Data-Source" "when")}
      {Lisp-Entry "Active-Connections" #f 87 12 87 30 ()}
      {Lisp-Entry "find-connection" #f 91 13 91 28 ("Active-Connections" "assoc-value" "name")}
      {Lisp-Entry "get-connection" #f 95 13 95 27 ("cons" "Active-Connections" "set!" "new-connection" "connection" "let" "when" "find-connection" "either" "data-source" "data-source:" "name")}
      {Lisp-Entry "new-connection" #f 103 13 103 27 ("new-connection" "data-source")}
      {Lisp-Entry "close-connections" #f 107 13 107 30 ("set-active-data-source" "set!" "Active-Connections" "close" "connection" "name" "bind" "info" "function" "for-each")}
      {Lisp-Entry "Connections-File" #f 116 12 116 28 ("Profile" "File")}
      {Lisp-Entry "load-connections" #f 120 13 120 29 ("Data-Sources" "new" "read-from-file" "instantiate" "exists?" "if" "Connections-File" "file" "let")}
      {Lisp-Entry "read-connections" #f 127 13 127 29 ("err" "continue-handler:" "install-context" "load-connections" "connections" "get-process" "process" "let" "function" "with-safe-execution")}
      {Lisp-Entry "parse-sql-command" #f 144 20 144 37 ("0" "subseq" "null?" "if" "upcase" "position" "'position" "return:" "whitespace?" "find-if" "pos" "trim-whitespace" "let*" "request")}}})
"_sqlserver"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "_sqlserver.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver" #f 37 9 37 42 ("jazz")}})
"_syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "utilities" "syntax" "_syntax.jazz"} 1226584789
    {Lisp-Entry "jazz.utilities.syntax" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "datacontainer" #f 40 15 40 28 (",access" "set!" "format" "string->symbol" "access" "nextmethod" ",@fields" ",table" "initialize" "definition" ",field" "slot" ",rank" ":location" "attribute" "increase!" "field" "function" "map" "Data-Container" "extends" ",name" "class" "1" "rank" "generate-symbol" "table" "let" "fields" "name" "bind" "form")}
      {Lisp-Entry "tie" #f 58 15 58 18 ("List" "String" "typecase" "get-output" "get-output-string" ":string" "'format" "cons" "else" "case" "eof-object?" "read-char" "iterate" "List-Factory" "open-output-string" "let" "lambda" "append" "apply" "call-with-input-string" "tie-string" "null?" "error" "symbol?" "not" "if" "read-delimited" "arguments" "command" "bind" "out-parameters" "control" "process-string" "format" "display" "memq?" "when" "out" "c" "put" "car" "Syntax-Expansion" "new" "tie-list" "define" "objects")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "syntax" "_syntax.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.syntax" #f 37 9 37 24 ("jazz")
      {Lisp-Entry "pattern" #f 45 8 45 15 (",@rest" "method" "rest")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "_syntax.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax" #f 37 9 37 28 ("scheme")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "library" "syntax" "_syntax.scm"} 1226584774
    {Lisp-Entry "core.library.syntax" #f 37 8 37 27 ()}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "generic" "syntax" "_syntax.scm"} 1226584774
    {Lisp-Entry "core.generic.syntax" #f 37 8 37 27 ()}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "syntax" "_syntax.scm"} 1226584773
    {Lisp-Entry "core.class.syntax" #f 37 8 37 25 ()}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "syntax" "_syntax.scm"} 1226584773
    {Lisp-Entry "core.base.syntax" #f 37 8 37 24 ()}})
"_system"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "_system.jazz"} 1227126475
    {Lisp-Entry "jazz.system" #f 37 9 37 20 ("else" "Network" "'Network" "register-alias" "initialize-platform-aliases" "definition" "windows" "cond-expand" "jazz")
      {Lisp-Entry "initialize-aliases" #f 52 20 52 38 ("Jazz" "'Jazz" "kernel-source" "when" "kernel-install" "Install" "'Install" "User" "'User" "pathname-normalize" "tokenise-filename" "Home" "'Home" "register-alias" "initialize-platform-aliases")}
      {Lisp-Entry "validate-alias" #f 70 13 70 27 ("error" "Directory" "new" "exists?" "if" "path" "name")}
      {Lisp-Entry "argument/setting" #f 81 20 81 36 ("get-setting" "command-argument" "either" "prop" "arg")}
      {Lisp-Entry "pathname-argument" #f 86 20 86 37 ("length" "-" "1" "subseq" "0" "element" "=" "tokenise-filename" "not" "if" "command-argument" "arg" "let" "name")}
      {Lisp-Entry "require-argument" #f 96 20 96 36 ("command-line" "error" "command-argument" "either" "require-argument" "'require-argument" "unimplemented" "key")}
      {Lisp-Entry "require-argument/setting" #f 103 20 103 44 ("command-line" "error" "argument/setting" "either" "require-argument/setting" "'require-argument/setting" "unimplemented" "prop" "arg")}
      {Lisp-Entry "boolean-argument/setting" #f 110 20 110 44 ("not" "if" "argument/setting" "value" "let" "default" "prop" "arg")}
      {Lisp-Entry "integer-argument/setting" #f 117 20 117 44 ("parse-integer" "integer?" "if" "when" "argument/setting" "str/int" "let" "prop" "arg")}
      {Lisp-Entry "file-argument/setting" #f 125 20 125 41 ("make-file" "when" "argument/setting" "str" "let" "extension" "prop" "arg")}
      {Lisp-Entry "require-file-argument/setting" #f 131 20 131 49 ("require-argument/setting" "make-file" "extension" "prop" "arg")}
      {Lisp-Entry "make-file" #f 135 13 135 22 ("command-line" "error" "get-extension" "/=" "if" "tokenise-filename" "File" "new" "file" "let" "make-file" "'make-file" "unimplemented" "extension" "arg" "str")}
      {Lisp-Entry "directory-argument/setting" #f 144 20 144 46 ("make-directory" "when" "argument/setting" "str" "let" "prop" "arg")}
      {Lisp-Entry "require-directory-argument/setting" #f 150 20 150 54 ("require-argument/setting" "make-directory" "prop" "arg")}
      {Lisp-Entry "make-directory" #f 154 13 154 27 ("tokenise-filename" "Directory" "new" "make-directory" "'make-directory" "unimplemented" "str")}
      {Lisp-Entry "host-argument/setting" #f 160 20 160 41 ("name:" "Host" "new" "when" "argument/setting" "name" "let" "host-argument/setting" "'host-argument/setting" "unimplemented" "prop" "arg")}
      {Lisp-Entry "port-argument/setting" #f 168 20 168 41 ("argument/setting" "prop" "arg")}
      {Lisp-Entry "Settings" #f 177 7 177 15 ("Object")
        {Lisp-Entry "file" #f 180 8 180 12 ()}
        {Lisp-Entry "content" #f 181 8 181 15 ()}
        {Lisp-Entry "modified?" #f 182 8 182 17 ()}
        {Lisp-Entry "initialize" #f 185 11 185 21 ("set-file" "nextmethod" "file" "file:")}
        {Lisp-Entry "get-file" #f 190 18 190 26 ("file")}
        {Lisp-Entry "set-file" #f 194 18 194 26 ("load-content" "content" "not" "if" "file" "set!" "value")}
        {Lisp-Entry "get-setting" #f 201 18 201 29 ("content" "table-ref" "default" "setting")}
        {Lisp-Entry "set-setting" #f 205 18 205 29 ("modified?" "set!" "content" "table-set!" "value" "setting")}
        {Lisp-Entry "load-content" #f 210 18 210 30 ("modified?" "file" "table-load" "eq?" "test:" "make-table" "content" "set!")}
        {Lisp-Entry "save-content" #f 216 18 216 30 ("modified?" "set!" "-" "format" "value" "setting" "bind" "for-each" "key:" "string<?" "sort" "sorted" "not-null?" "when" "content" "table->list" "all" "let" "output" "file" "parse" "call-with-output-file" "car" "symbol->string" "cardinality" "info" "function" "map" "max" "apply" "list" "find-longest" "define")}}
      {Lisp-Entry "*settings*" #f 240 12 240 22 ()}
      {Lisp-Entry "get-settings" #f 244 20 244 32 ("*settings*")}
      {Lisp-Entry "register-settings" #f 248 20 248 37 ("cons" "*settings*" "set!" "settings")}
      {Lisp-Entry "Not-Found" #f 252 12 252 21 ("not-found" "'not-found" "list")}
      {Lisp-Entry "get-setting" #f 256 20 256 31 ("*settings*" "continuation-return" "neq?" "when" "Not-Found" "get-setting" "value" "let" "settings" "for-each" "return" "function" "continuation-capture" "default" "name")}
      {Lisp-Entry "require-setting" #f 267 20 267 35 ("error" "get-setting" "either" "name")}
      {Lisp-Entry "require-string-setting" #f 272 20 272 42 ("error" "string?" "not" "if" "require-setting" "setting" "let" "name")}}})
"_test"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "_test.jazz"} 1226931364
    {Lisp-Entry "test" #f 37 9 37 13 ("a" "'a" "5" "set-element!" "10" "axis-grow" "0" "Axis" "new" "axis" "let" "debug" "for-each" "2" "1" "append" "jazz")
      {Lisp-Entry "Y" #f 156 7 156 8 ("X")
        {Lisp-Entry "f" #f 159 16 159 17 ("2")}}
      {Lisp-Entry "Y~Class207" #f 165 9 165 19 ()
        {Lisp-Entry "f" #f 168 13 168 14 ("2")}}
      {Lisp-Entry "Y" #f 172 9 172 10 ("X" "Y~Class207")}
      {Lisp-Entry "f" #f 269 13 269 14 ("=" "not" "if" "c")}
      {Lisp-Entry "f" #f 331 13 331 14 ("+" "0" "n" "iter" "let")}
      {Lisp-Entry "TC" #f 338 7 338 9 ("Object")
        {Lisp-Entry "row" #f 341 8 341 11 ("1")}
        {Lisp-Entry "col" #f 342 8 342 11 ("3")}
        {Lisp-Entry "f" #f 345 11 345 12 ("col" "0" "subseq!" "row" "when")}
        {Lisp-Entry "g" #f 350 11 350 12 ("col" "0" "subseq!")}}
      {Lisp-Entry "f" #f 355 13 355 14 ("g" "TC" "new" "f" "class-of" "list")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "test" "_test.scm"} 1226584774
    {Lisp-Entry "core.test" #f 37 9 37 18 ("core")}})
"_ui"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "_ui.jazz"} 1226584786
    {Lisp-Entry "jazz.ui" #f 37 9 37 16 ("jazz")
      {Lisp-Entry "default-disabled-resource" #f 49 20 49 45 ("get-name" "format" "class-of" "new" "resource")}
      {Lisp-Entry "registered-object" #f 59 13 59 30 ("table-set!" "object" "procedure?" "if" "table-ref" "procedure/object" "let" "name" "table")}
      {Lisp-Entry "Colors" #f 73 12 73 18 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-color" #f 77 13 77 27 ("Colors" "table-set!" "color" "name")}
      {Lisp-Entry "registered-color" #f 81 13 81 29 ("set-alpha" "registered-color" "copy" "if" "error" "Colors" "registered-object" "either" "color" "let" "jazz.ui.literals.colors" "'jazz.ui.literals.colors" "load-module" "alpha" "name")}
      {Lisp-Entry "Fonts" #f 97 12 97 17 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-font" #f 101 13 101 26 ("Fonts" "table-set!" "font" "name")}
      {Lisp-Entry "registered-font" #f 105 13 105 28 ("error" "Fonts" "registered-object" "either" "jazz.ui.literals.fonts" "'jazz.ui.literals.fonts" "load-module" "name")}
      {Lisp-Entry "Pens" #f 116 12 116 16 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-pen" #f 120 13 120 25 ("Pens" "table-set!" "pen" "name")}
      {Lisp-Entry "registered-pen" #f 124 13 124 27 ("error" "Pens" "registered-object" "either" "jazz.ui.literals.pens" "'jazz.ui.literals.pens" "load-module" "name")}
      {Lisp-Entry "shortcut=?" #f 135 20 135 30 ("get-key" "eqv?" "get-modifiers" "equal?" "and" "s2" "s1")}
      {Lisp-Entry "shortcut-hash" #f 140 20 140 33 ("eqv-hash" "+" "get-modifiers" "get-key" "cons" "equal-hash" "shortcut")}}})
"_utilities"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "utilities" "_utilities.jazz"} 1227126475
    {Lisp-Entry "jazz.utilities" #f 37 9 37 23 ("jazz")
      {Lisp-Entry "find-actions" #f 61 20 61 32 ("get-application" "get-bindings" "child" "context")}
      {Lisp-Entry "find-action-item" #f 65 20 65 36 ("find-actions" "find-component" "name" "context")}
      {Lisp-Entry "require-action-item" #f 69 20 69 39 ("error" "get-action-name" "get-action-context" "find-action-item" "either" "action")}
      {Lisp-Entry "call-action" #f 74 20 74 31 ("action:" "invoke" "require-action-item" "action-item" "let" "event" "event:" "properties" "sender" "action")}
      {Lisp-Entry "get-action-enabled?" #f 79 20 79 39 ("get-enabled?" "require-action-item" "action-item" "let" "action")}
      {Lisp-Entry "set-action-enabled?" #f 84 20 84 39 ("set-enabled?" "require-action-item" "action-item" "let" "enabled?" "action")}
      {Lisp-Entry "set-actions-enabled?" #f 89 20 89 40 ("set-action-enabled?" "action" "function" "for-each" "enabled?" "actions")}
      {Lisp-Entry "Pi" #f 100 19 100 21 ("3.14159")}
      {Lisp-Entry "split-lines" #f 109 20 109 31 ("read-lines" "call-with-input-string" "string")}
      {Lisp-Entry "join-lines" #f 114 20 114 30 ("join" "lines")}
      {Lisp-Entry "for-each-definition" #f 123 20 123 39 ("field-creator" "type-ascendant" "category-field" "let" "when" "function" "process" "letrec" "for-each-definition" "'for-each-definition" "unimplemented" "proc" "definition" "model")}
      {Lisp-Entry "Class-Descriptors" #f 147 19 147 36 ("eq?" "test:" "make-table")}
      {Lisp-Entry "get-descriptor" #f 151 20 151 34 ("table-set!" "set-name" "instantiate" "descriptor" "when" "get-class-descriptor" "form" "Class-Descriptors" "table-ref" "either" "type-name" "name" "let" "model")}
      {Lisp-Entry "get-properties-descriptor" #f 162 20 162 45 ("properties" "'properties" "find-component" "when" "get-descriptor" "class-descriptor" "let" "model")}
      {Lisp-Entry "get-property-descriptor" #f 168 20 168 43 ("find-component" "when" "get-properties-descriptor" "properties-descriptor" "let" "name" "model")}
      {Lisp-Entry "console" #f 179 20 179 27 ("format" "console-string" "rest")}
      {Lisp-Entry "console-string" #f 183 20 183 34 ("force-output" "format" "terminal-string" "not" "if" "console-output-port" "output" "let" "color" "color:" "string")}
      {Lisp-Entry "debug" #f 196 19 196 24 ("console")}
      {Lisp-Entry "debug-string" #f 200 19 200 31 ("console-string")}
      {Lisp-Entry "with-execution-context" #f 209 20 209 42 ("Execution-Context" "new" "context" "with-closed" "reporter" "reporter:" "details" "details:" "title" "title:" "proc")}
      {Lisp-Entry "with-execution-node" #f 217 20 217 39 ("Execution-Node" "new" "node" "with-closed" "reporter" "reporter:" "details" "details:" "title" "title:" "proc")}
      {Lisp-Entry "get-execution-context" #f 225 20 225 41 ("get-active-context" "current-thread" "thread" "let" "get-execution-context" "'get-execution-context" "unimplemented")}
      {Lisp-Entry "get-execution-stack" #f 232 20 232 39 ("get-previous-node" "Execution-Context" "is-not?" "essay" "cons" "set!" "while" "lst" "get-active-node" "node" "current-thread" "thread" "let*" "get-execution-stack" "'get-execution-stack" "unimplemented")}
      {Lisp-Entry "Execution-Node" #f 244 7 244 21 ("Object")
        {Lisp-Entry "title" #f 247 8 247 13 ()}
        {Lisp-Entry "details" #f 248 8 248 15 ()}
        {Lisp-Entry "reporter" #f 249 8 249 16 ()}
        {Lisp-Entry "previous-node" #f 250 8 250 21 ()}
        {Lisp-Entry "initialize" #f 253 15 253 25 ("destroy-mandatory" "self" "set-active-node" "get-active-node" "previous-node~self" "current-thread" "thread" "let" "reporter~self" "details~self" "title~self" "set!" "nextmethod" "reporter" "reporter:" "details" "details:" "title" "title:")}
        {Lisp-Entry "destroy" #f 264 15 264 22 ("nextmethod" "previous-node" "set-active-node" "current-thread" "thread" "let")}
        {Lisp-Entry "get-title" #f 270 22 270 31 ("title")}
        {Lisp-Entry "get-details" #f 274 22 274 33 ("details")}
        {Lisp-Entry "get-reporter" #f 278 22 278 34 ("reporter")}}
      {Lisp-Entry "Execution-Context" #f 282 7 282 24 ("Execution-Node")
        {Lisp-Entry "previous-context" #f 285 8 285 24 ()}
        {Lisp-Entry "continuable?" #f 286 8 286 20 ()}
        {Lisp-Entry "auto-continue?" #f 287 8 287 22 ()}
        {Lisp-Entry "initialize" #f 290 15 290 25 ("destroy-mandatory" "self" "set-active-context" "get-active-context" "previous-context~self" "set!" "current-thread" "thread" "let" "nextmethod" "apply" "rest")}
        {Lisp-Entry "destroy" #f 298 15 298 22 ("nextmethod" "previous-context" "set-active-context" "current-thread" "thread" "let")}
        {Lisp-Entry "get-continuable?" #f 304 22 304 38 ("continuable?")}
        {Lisp-Entry "set-continuable?" #f 308 22 308 38 ("continuable?" "set!" "value")}
        {Lisp-Entry "get-auto-continue?" #f 312 22 312 40 ("auto-continue?")}
        {Lisp-Entry "set-auto-continue?" #f 316 22 316 40 ("auto-continue?" "set!" "value")}}
      {Lisp-Entry "with-continue" #f 326 20 326 33 ("Continue" "catch" "set-continuable?" "begin" "unwind-protect" "get-continuable?" "preserved" "error" "not" "if" "get-execution-context" "context" "let" "with-continue" "'with-continue" "unimplemented" "proc")}
      {Lisp-Entry "continuable?" #f 342 20 342 32 ("get-continuable?" "and" "get-execution-context" "context" "let" "continuable?" "'continuable?" "unimplemented" "exception")}
      {Lisp-Entry "continue-exception" #f 350 20 350 38 ("Continue" "new" "throw" "continue" "'continue" "unimplemented" "exception")}
      {Lisp-Entry "Restartable?" #f 362 19 362 31 ()}
      {Lisp-Entry "with-restart" #f 367 20 367 32 ("when" "return" "Restart" "catch" "while" "set!" "begin" "unwind-protect" "Restartable?" "preserved" "let" "with-restart" "'with-restart" "unimplemented" "cleanup" "proc")}
      {Lisp-Entry "restartable?" #f 384 20 384 32 ("Restartable?" "exception")}
      {Lisp-Entry "restart" #f 389 20 389 27 ("Restart" "new" "throw" "restart" "'restart" "unimplemented" "exception")}
      {Lisp-Entry "extract-jazz-file-category" #f 400 20 400 46 ("values" "extends" "name" "type" "extract-category" "type/name/extends" "extract-package" "package" "toplevel" "in" "receive" "when" "extract-jazz-file-toplevel" "in/toplevel" "let" "file")}
      {Lisp-Entry "extract-jazz-file-toplevel" #f 411 13 411 39 ("values" "in" "'in" "car" "eq?" "pair?" "and" "if" "read" "in/toplevel" "let" "err" "Read-Error" "catch" "reader" "function" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "extract-jazz-file-toplevel" "'extract-jazz-file-toplevel" "unimplemented" "file")}
      {Lisp-Entry "extract-package" #f 423 13 423 28 ("symbol?" "cadr" "package" "let" "cdr" "pair?" "when" "in")}
      {Lisp-Entry "extract-category" #f 430 13 430 29 ("extends" "'extends" "values" "Common" "'Common" "'package" "Unknown" "'Unknown" "'interface" "Object" "'Object" "'class" "eq?" "and" "or" "if" "symbol?" "name" "cdr" "scan" "package" "interface" "class" "memq?" "car" "type" "let" "pair?" "when" "toplevel")}
      {Lisp-Entry "component-name" #f 456 20 456 34 ("get-name" "component")}
      {Lisp-Entry "dispatch?" #f 465 20 465 29 ("symbol->string" "ends-with?" "symbol?" "and" "expr")}
      {Lisp-Entry "dispatch-string?" #f 470 20 470 36 ("ends-with?" "string")}
      {Lisp-Entry "dispatch->name" #f 474 20 474 34 ("symbol->string" "string->symbol" "string?" "if" "1" "cardinality" "-" "0" "subseq" "string" "function" "extract" "let" "dispatch")}
      {Lisp-Entry "form-name" #f 488 13 488 22 ("get-name" "form")}
      {Lisp-Entry "tag?" #f 497 20 497 24 ("symbol->string" "tag-string?" "symbol?" "and" "expr")}
      {Lisp-Entry "tag-string?" #f 502 20 502 31 ("ends-with?" "starts-with?" "2" "string-length" ">" "and" "string")}
      {Lisp-Entry "tag->name" #f 508 20 508 29 ("symbol->string" "string->symbol" "string?" "if" "cardinality" "-" "1" "subseq" "string" "function" "extract" "let" "tag")}
      {Lisp-Entry "name->tag" #f 517 20 517 29 ("symbol->string" "string-append" "string->symbol" "name")}
      {Lisp-Entry "jml-keyword?" #f 521 20 521 32 ("keyword?" "expr")}
      {Lisp-Entry "Logs" #f 530 19 530 23 ("List-Factory" "new")}
      {Lisp-Entry "get-logs" #f 534 20 534 28 ("Logs" "get-list")}
      {Lisp-Entry "Add-Log-Lock" #f 538 19 538 31 ("Lock" "new")}
      {Lisp-Entry "add-log" #f 542 20 542 27 ("Logs" "put" "get-logs" "memq?" "unless" "Add-Log-Lock" "synchronize" "add-log" "'add-log" "unimplemented" "log")}
      {Lisp-Entry "current-log" #f 550 20 550 31 ("add-log" "set-current-log" "default-log" "log" "let" "get-current-log" "either")}
      {Lisp-Entry "default-log" #f 558 13 558 24 ("name:" "Log" "new" "default-log" "'default-log" "unimplemented")}
      {Lisp-Entry "get-current-log" #f 564 20 564 35 ("current-log" "'current-log" "get-parameter" "get-current-log" "'get-current-log" "unimplemented")}
      {Lisp-Entry "set-current-log" #f 570 20 570 35 ("current-log" "'current-log" "set-parameter" "set-current-log" "'set-current-log" "unimplemented" "log")}
      {Lisp-Entry "with-log" #f 576 20 576 28 ("add-log" "not" "and" "when" "get-name" "set-current-log" "begin" "unwind-protect" "get-current-log" "preserved" "let" "with-log" "'with-log" "unimplemented" "file" "file:" "name" "name:" "proc" "log")}
      {Lisp-Entry "with-node" #f 590 20 590 29 ("with-node" "new-entry" "either" "let" "current-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "node" "node:" "proc")}
      {Lisp-Entry "log-node" #f 595 20 595 28 ("log-node" "current-log" "log" "log:" "node")}
      {Lisp-Entry "log-entry" #f 599 20 599 29 ("log-entry" "current-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:")}
      {Lisp-Entry "log-properties" #f 603 20 603 34 ("log-entry" "get-output-string" "keyword->symbol" "format" "set!" "if" "value" "property" "function" "for-each-property" "first?" "open-output-string" "printer" "let" "current-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "properties")}
      {Lisp-Entry "new-log-node" #f 616 20 616 32 ("new-entry" "current-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:")}
      {Lisp-Entry "with-profile" #f 625 20 625 32 ("new-entry" "either" "after" "'after" "set!" "before" "'before" "log-profile" "result" "let" "function" "with-node" "with-profile" "'with-profile" "unimplemented" "current-log" "log" "log:" "data" "data:" "message" "message:" "name" "name:" "tag" "tag:" "node" "node:" "proc")}
      {Lisp-Entry "log-profile" #f 639 20 639 31 ("Performance" "resources-snapshot" "log-node" "gc" "log-profile" "'log-profile" "unimplemented" "current-log" "log" "log:" "name" "name:")}
      {Lisp-Entry "log-stack" #f 646 20 646 29 ("data:" "log-entry" "Stack-Snapshot" "new" "data" "let" "log-stack" "'log-stack" "unimplemented" "current-log" "log" "log:" "message" "message:" "name" "name:" "tag" "tag:")}
      {Lisp-Entry "profiles->jml" #f 653 20 653 33 ("'name" "get-property" "node" "key:" "<" "sort" "profile->jml" "cons" "set!" "profile-parent" "not" "when" "profile" "name" "function" "get-profiles" "iterate-table" "nodes" "let" "profiles->jml" "'profiles->jml" "unimplemented" "profiles")}
      {Lisp-Entry "profile->jml" #f 664 13 664 25 ("insert-profile-children" "profile-content" "node" "let" "profile->jml" "'profile->jml" "unimplemented" "profile" "parent")}
      {Lisp-Entry "profile-content" #f 672 13 672 28 ("'total" "'count" "'name" "list" "properties:" "'profile" "JML-Element" "new" "profile-total" "total" "0" "profile-count" "count" "profile-name" "name" "let" "profile-content" "'profile-content" "unimplemented" "profile" "parent")}
      {Lisp-Entry "insert-profile-children" #f 681 13 681 36 ("collect-profile-children" "profile->jml" "child" "function" "map" "insert-profile-children" "'insert-profile-children" "unimplemented" "profile" "parent")}
      {Lisp-Entry "collect-profile-children" #f 689 13 689 37 ("profile-previous-brother" "cons" "set!" "while" "profile-last-child" "child" "children" "let" "collect-profile-children" "'collect-profile-children" "unimplemented" "profile")}
      {Lisp-Entry "Active-Locales" #f 705 19 705 33 ("english:")}
      {Lisp-Entry "Active-Locale" #f 708 19 708 32 ("english:")}
      {Lisp-Entry "get-locales" #f 712 20 712 31 ("Active-Locales")}
      {Lisp-Entry "get-locale" #f 716 20 716 30 ("Active-Locale")}
      {Lisp-Entry "set-locale" #f 720 20 720 30 ("locale-update" "select-locale" "get-application" "appl" "set!" "Active-Locale" "neq?" "when" "standardize-locale" "let" "update?" "update?:" "loc")}
      {Lisp-Entry "standardize-locale" #f 730 13 730 31 ("error" "else" "symbol?" "enumerator->symbol" "symbol->keyword" "enumerator?" "keyword?" "cond" "loc")}
      {Lisp-Entry "localize" #f 737 20 737 28 ("Active-Locale" "localize" "Locales" "is?" "if" "object")}
      {Lisp-Entry "localize-to" #f 743 20 743 31 ("localize" "Locales" "is?" "if" "locale" "object")}
      {Lisp-Entry "present-locale" #f 749 20 749 34 ("english:" "case" "locale")}
      {Lisp-Entry "Scheme-Extensions" #f 759 19 759 36 ()}
      {Lisp-Entry "CommonLisp-Extensions" #f 762 19 762 40 ()}
      {Lisp-Entry "Jazz-Extensions" #f 765 19 765 34 ()}
      {Lisp-Entry "C-Extensions" #f 768 19 768 31 ()}
      {Lisp-Entry "Textual-Extensions" #f 771 19 771 37 ()}
      {Lisp-Entry "Text-Extensions" #f 774 19 774 34 ("Textual-Extensions" "C-Extensions" "Jazz-Extensions" "CommonLisp-Extensions" "Scheme-Extensions" "append")}
      {Lisp-Entry "effective-extensions" #f 782 20 782 40 ("else" "Text-Extensions" ":text" "C-Extensions" ":c" "Jazz-Extensions" ":jazz" "CommonLisp-Extensions" ":commonlisp" "Scheme-Extensions" ":scheme" "case" "extensions")}
      {Lisp-Entry "Scheme-Include-Extensions" #f 792 19 792 44 ("Scheme-Extensions")}
      {Lisp-Entry "CommonLisp-Include-Extensions" #f 795 19 795 48 ("CommonLisp-Extensions")}
      {Lisp-Entry "Jazz-Include-Extensions" #f 798 19 798 42 ("Scheme-Include-Extensions" "append")}
      {Lisp-Entry "C-Include-Extensions" #f 802 19 802 39 ("C-Extensions")}
      {Lisp-Entry "Textual-Include-Extensions" #f 805 19 805 45 ("Textual-Extensions")}
      {Lisp-Entry "Text-Include-Extensions" #f 808 19 808 42 ("Textual-Include-Extensions" "C-Include-Extensions" "Jazz-Include-Extensions" "CommonLisp-Include-Extensions" "Scheme-Include-Extensions" "append")}
      {Lisp-Entry "effective-include-extensions" #f 816 13 816 41 ("else" "Text-Include-Extensions" ":text" "C-Include-Extensions" ":c" "Jazz-Include-Extensions" ":jazz" "CommonLisp-Include-Extensions" ":commonlisp" "Scheme-Include-Extensions" ":scheme" "case" "extensions")}
      {Lisp-Entry "Scheme-Catalog-Extensions" #f 826 19 826 44 ("Scheme-Extensions")}
      {Lisp-Entry "CommonLisp-Catalog-Extensions" #f 829 19 829 48 ("CommonLisp-Extensions")}
      {Lisp-Entry "Jazz-Catalog-Extensions" #f 832 19 832 42 ("Scheme-Catalog-Extensions" "append")}
      {Lisp-Entry "C-Catalog-Extensions" #f 836 19 836 39 ("C-Extensions")}
      {Lisp-Entry "Textual-Catalog-Extensions" #f 839 19 839 45 ("Textual-Extensions")}
      {Lisp-Entry "Text-Catalog-Extensions" #f 842 19 842 42 ("Textual-Catalog-Extensions" "C-Catalog-Extensions" "Jazz-Catalog-Extensions" "CommonLisp-Catalog-Extensions" "Scheme-Catalog-Extensions" "append")}
      {Lisp-Entry "effective-catalog-extensions" #f 850 13 850 41 ("else" "Text-Catalog-Extensions" ":text" "C-Catalog-Extensions" ":c" "Jazz-Catalog-Extensions" ":jazz" "CommonLisp-Catalog-Extensions" ":commonlisp" "Scheme-Catalog-Extensions" ":scheme" "case" "extensions")}
      {Lisp-Entry "make-filename" #f 865 20 865 33 ("format" "extension" "base")}
      {Lisp-Entry "ensure-read/write" #f 869 20 869 37 ("throw-cancel" "read/write" "'read/write" "cancel" "'cancel" "no" "set-read/write" "'set-read/write" "yes" "process-keys?:" "question" "'question" "type:" "title:" "get-name" "format" "message-box" "case" "code" "get-depots-preferences" "pref" "get-application" "appl" "let*" "no-action" "'no-action" "read/write?" "exists?" "not" "or" "if" "get-file" "file" "let" "throw" "'throw" "cancel-action" "cancel-action:" "moniker")}
      {Lisp-Entry "convert-extension" #f 890 20 890 37 ("else" "directory?" "convert-file-extension" "file?" "convert-path-extension" "pair?" "convert-name-extension" "string?" "not" "cond" "convert-extension" "'convert-extension" "unimplemented" "to" "from" "object")}
      {Lisp-Entry "convert-name-extension" #f 901 13 901 35 ("extract-base" "make-filename" "extract-extension" "ci=?" "if" "convert-name-extension" "'convert-name-extension" "unimplemented" "to" "from" "name")}
      {Lisp-Entry "convert-path-extension" #f 909 13 909 35 ("convert-name-extension" "list" "butlast" "append" "extract-extension" "ci=?" "if" "last" "name" "let" "convert-path-extension" "'convert-path-extension" "unimplemented" "to" "from" "path")}
      {Lisp-Entry "convert-file-extension" #f 918 13 918 35 ("get-base" "make-filename" "new-brother" "get-extension" "ci=?" "if" "to" "from" "file")}
      {Lisp-Entry "resource?" #f 929 27 929 36 ("Resource" "is?" "object")}
      {Lisp-Entry "with-safe-execution" #f 939 20 939 39 ("no" "yes" "no:" "question" "'question" "type:" "case" "exit" "yes:" "message-box" "system-message" "begin" "and" "list" "append" "car" "not" "if" "text" "message-box?" "active-content?:" "present-message" "message" "format" "invite" "let" "exception:" "dump-stack" "err" "function" "Error" "call-with-catch" "continue-handler" "continue-handler:" "continue-text" "continue-text:" "proc" "title")}
      {Lisp-Entry "sleep" #f 979 20 979 25 ("thread-sleep!" "delay")}
      {Lisp-Entry "warn" #f 983 20 983 24 ("apply" ":console" "format" "rest" "string")}
      {Lisp-Entry "warn-unimplemented" #f 988 20 988 38 (":console" "format" "name")}
      {Lisp-Entry "bits->symbolic" #f 992 20 992 34 ("get-output" "put" "mask-bit-set?" "when" "value" "name" "bind" "entry" "function" "for-each" "List-Factory" "new" "fact" "get-entries" "entries" "let" "enumeration" "bits")}
      {Lisp-Entry "copy-into!" #f 1003 20 1003 30 ("cardinality" "0" "naturals" "set-element!" "rank" "element" "function" "for-each" "seq2" "seq1")}
      {Lisp-Entry "present-context-actions" #f 1015 20 1015 43 (":hyperlink" "image:" "list" "self" "invoke" "when" "get-handler" "handler" "get-title" "get-image" "image" "let*" "action" "function" "map" "present-context-text" "present-context-actions" "'present-context-actions" "unimplemented" "actions" "title")}
      {Lisp-Entry "present-context-text" #f 1031 20 1031 40 ("list" "set-text" "Context-Text-View" "new" "text-view" "let" "present-context-text" "'present-context-text" "unimplemented" "text" "title")}
      {Lisp-Entry "display-tabulated" #f 1044 20 1044 37 ("print-to" "newline" "->string" "output" "column" "object" "row" "function" "for-each" "add-columns" "left" "'left" "alignment:" "border-after:" "Aligned-Column" "Display-Column" "=" "if" "collect" "0" "from" "n" "in" "ignore" "for" "loop" "columns" "1" "length" "-" "last" "car" "sample" "Columns-Display" "new" "display" "let*" "display-tabulated" "'display-tabulated" "unimplemented" "printer" "data")}
      {Lisp-Entry "size-rect" #f 1076 20 1076 29 ("get-height" "get-width" "0" "Rect" "new" "size")}
      {Lisp-Entry "position/size->rect" #f 1080 20 1080 39 ("get-v" "get-h" "h/v/size->rect" "size" "position")}
      {Lisp-Entry "h/v/size->rect" #f 1084 20 1084 34 ("get-height" "get-width" "+" "Rect" "new" "size" "v" "h")}
      {Lisp-Entry "h/v/width/height" #f 1088 20 1088 36 ("+" "Rect" "new" "height" "width" "v" "h")}
      {Lisp-Entry "corners->rect" #f 1092 20 1092 33 ("get-v" "get-h" "Rect" "new" "bottom-right" "top-left")}
      {Lisp-Entry "normalize-rect" #f 1096 20 1096 34 ("<=" "if" "Rect" "new" "get-bottom" "b" "get-right" "r" "get-top" "t" "get-left" "l" "let" "rect")}
      {Lisp-Entry "rect-position" #f 1108 20 1108 33 ("get-top" "get-left" "Point" "new" "rect")}
      {Lisp-Entry "rect-size" #f 1112 20 1112 29 ("rect-height" "rect-width" "Dimension" "new" "rect")}
      {Lisp-Entry "rect-width" #f 1118 20 1118 30 ("get-left" "get-right" "-" "rect")}
      {Lisp-Entry "rect-height" #f 1122 20 1122 31 ("get-top" "get-bottom" "-" "rect")}
      {Lisp-Entry "offset-rect" #f 1126 20 1126 31 ("get-bottom" "get-right" "get-top" "get-left" "+" "Rect" "new" "v" "h" "rect")}
      {Lisp-Entry "inflate-rect" #f 1134 20 1134 32 ("get-bottom" "get-right" "+" "get-top" "get-left" "-" "Rect" "new" "h" "w" "rect")}
      {Lisp-Entry "inflate-rect" #f 1142 13 1142 25 ("get-bottom" "get-right" "+" "get-top" "get-left" "-" "Rect" "new" "h" "w" "rect")}
      {Lisp-Entry "expand-rect" #f 1150 20 1150 31 ("get-bottom" "get-right" "get-top" "get-left" "+" "Rect" "new" "b" "r" "t" "l" "rect")}
      {Lisp-Entry "base-rect" #f 1158 20 1158 29 ("get-top" "get-left" "-" "offset-rect" "rect")}
      {Lisp-Entry "fit-rects" #f 1162 20 1162 29 (">" "if" "both" "height" "width" "case" "rh" "/" "rw" "sh" "sw" "rect-height" "dh" "rect-width" "dw" "let*" "mode" "dst" "src")}
      {Lisp-Entry "fit-within" #f 1175 20 1175 30 ("values" "get-v" "get-h" "between" "new-position" "max-position" "Point" "min-position" "new" "new-size" "get-height" "height" "-" "min" "get-width" "max" "width" "rect-position" "position" "rect-size" "size" "let*" "padding" "padding:" "0" "Dimension" "minimum-size" "minimum-size:" "rect" "outer")}
      {Lisp-Entry "rect-union" #f 1187 20 1187 30 ("get-bottom" "get-right" ">" "get-top" "get-left" "<" "if" "Rect" "new" "y" "x")}
      {Lisp-Entry "rect-intersection" #f 1195 20 1195 37 ("0" "get-bottom" "get-right" "<" "get-top" "get-left" ">" "Rect" "new" "rect-intersect?" "if" "y" "x")}
      {Lisp-Entry "rect-intersect?" #f 1205 20 1205 35 (">" "get-bottom" "get-top" "get-right" "get-left" "<" "and" "y" "x")}
      {Lisp-Entry "rects-intersect?" #f 1212 20 1212 36 ("get-bottom" "get-right" ">" "get-height" "get-v" "get-top" "get-width" "get-h" "+" "get-left" "<" "and" "size" "position" "rect")}
      {Lisp-Entry "in-rect?" #f 1219 20 1219 28 ("get-bottom" "get-right" "<" "get-top" "get-v" "get-left" "get-h" ">=" "and" "rect" "pt")}
      {Lisp-Entry "rect-in-rect?" #f 1226 20 1226 33 ("get-bottom" "get-right" "<=" "get-top" "get-left" ">=" "and" "rect" "r")}
      {Lisp-Entry "in-size?" #f 1233 20 1233 28 ("get-height" "get-width" "<" "get-v" "0" "get-h" ">=" "and" "size" "pt")}
      {Lisp-Entry "add-rects" #f 1240 20 1240 29 ("get-bottom" "get-right" "get-top" "get-left" "+" "Rect" "new" "r2" "r1")}
      {Lisp-Entry "subtract-rects" #f 1248 20 1248 34 ("get-bottom" "get-right" "get-top" "get-left" "-" "Rect" "new" "r2" "r1")}
      {Lisp-Entry "inverse-rect" #f 1256 20 1256 32 ("get-right" "get-bottom" "get-left" "get-top" "Rect" "new" "rect")}
      {Lisp-Entry "positive-rect?" #f 1264 20 1264 34 ("get-right" "get-bottom" "get-left" "0" "get-top" ">=" "and" "rect")}
      {Lisp-Entry "center" #f 1271 20 1271 26 ("center" "'center" "justify" "outer" "inner")}
      {Lisp-Entry "justify" #f 1275 20 1275 27 ("class-of" "type-name" "number?" "second" "get-height" "first" "pair?" "get-width" "Point" "new" "Dimension" "is?" "and" "cond" "error" "else" "tail" "2" "-" "quotient" "center" "head" "case" "+" "0" ">=" "integer?" "if" "j" "o" "i" "function" "proc" "let" "justification" "outer" "inner")}
      {Lisp-Entry "cycle-naturals" #f 1299 20 1299 34 ("get-output" "+" "put" "by" "m" "do" "below" "0" "from" "n" "for" "loop" "quotient" "inc" "*" "cardinality" "List-Factory" "new" "fact" "let*" "subcycle" "cycle")}
      {Lisp-Entry "fit" #f 1309 20 1309 23 ("else" "-" ">=" "and" "+" "<=" "0" ">" "cond" "padding" "max" "size" "alternate" "pos")}
      {Lisp-Entry "fit-point" #f 1318 20 1318 29 ("get-height" "get-v" "get-width" "essay" "get-h" "fit" "Point" "new" "padding" "max" "size" "alternate" "pos")}
      {Lisp-Entry "scalar-product" #f 1324 20 1324 34 ("get-v" "get-h" "*" "+" "b" "a")}
      {Lisp-Entry "line-distance" #f 1328 20 1328 33 ("Point" "new" "scalar-product" "/" "abs" "0" "=" "if" "get-v" "get-h" "-" "sqr" "+" "sqrt" "divider" "let" "end" "start" "point")}
      {Lisp-Entry "resize-parts" #f 1349 20 1349 32 ("naturals" "1" "<=" "between?" "or" "n" "function" "map" "end2" "-1" "end" "start" "parity" "modulo" "+" "extra" "-" "quotient" "base" "0" "<" "if" "offset" "let*" "count" "delta" "size")}
      {Lisp-Entry "scale" #f 1362 20 1362 25 ("Number" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "Rect" "get-height" "height" "get-width" "width" "Dimension" "*" "fxround" "new" "get-v" "v" "get-h" "h" "Point" "typecase" "exact->inexact" "let" "sc" "shape")}
      {Lisp-Entry "scale-factor" #f 1391 20 1391 32 ("/" "inner" "outer")}
      {Lisp-Entry "get-area" #f 1395 20 1395 28 ("get-height" "get-width" "*" "size")}
      {Lisp-Entry "iterate-cells" #f 1404 20 1404 33 ("set!" "while" "either" "horizontal" "'horizontal" "cell" "function" "advance" "previous-cell" "backward" "next-cell" "forward" "case" "next" "let*" "proc" "direction" "start" "bottom-right" "top-left")}
      {Lisp-Entry "previous-cell" #f 1417 13 1417 26 ("horizontal" "Cell" "new" "minor" "major" "receive" "when" ">" "-1" "get-row" "get-col" "loop-cell" "info" "let" "vertical" "case" "direction" "max-cell" "min-cell" "cell")}
      {Lisp-Entry "next-cell" #f 1429 13 1429 22 ("horizontal" "Cell" "new" "minor" "major" "receive" "when" "<" "1" "get-row" "get-col" "loop-cell" "info" "let" "vertical" "case" "direction" "max-cell" "min-cell" "cell")}
      {Lisp-Entry "loop-cell" #f 1442 13 1442 22 ("else" "+" "values" "cond" "test" "step" "end-minor" "end-major" "start-minor" "start-major" "minor" "major")}
      {Lisp-Entry "output-header" #f 1456 20 1456 33 ("when" "contributor" "for-each" "jazzscheme" "format" "toplevel-comment" "c" "case" "comment" "string-length" "make-string" "system-padding" "get-process" "system-title" "either" "let*" "function" "with-printer" "end-proper?" "end-proper?:" "contributors" "contributors:" "copyright" "copyright:" "author" "author:" "license" "license:" "system" "system:" "jazz" "'jazz" "language" "language:" "printer" "title")}
      {Lisp-Entry "output-section" #f 1508 20 1508 34 ("2" "*" "format" "4" "string-length" "+" "make-string" "extra" "toplevel" "c" "case" "comment" "let" "0" "level" "level:" "jazz" "'jazz" "language" "language:" "printer" "title")}
      {Lisp-Entry "get-preferences" #f 1524 20 1524 35 ("find-component" "either" "error" "when" "not" "if" "get-preferences-root" "root" "get-process" "process" "let*" "error?" "error?:" "name")}
      {Lisp-Entry "set-preference" #f 1537 20 1537 34 ("set-property" "get-process" "get-preferences-designer" "designer" "let" "value" "property" "preferences")}
      {Lisp-Entry "sort-case-sensitive?" #f 1542 20 1542 40 ("get-sort-case-sensitive?" "and" "error?:" "tree" "interface" "get-preferences" "pref" "let")}
      {Lisp-Entry "sort-predicates" #f 1547 20 1547 35 ("ci>?" "ci<?" "ci=?" ">" "<" "=" "values" "sort-case-sensitive?" "if")}
      {Lisp-Entry "sort-predicate" #f 1553 20 1553 34 ("error" "else" "ci-compare" "compare" "ci>=?" ">=" "greater/equal" "ci>?" ">" "greater" "ci<=?" "<=" "smaller/equal" "ci<?" "<" "smaller" "ci=?" "=" "if" "equal" "case" "sort-case-sensitive?" "case-sensitive?" "let" "name")}
      {Lisp-Entry "backup-file" #f 1570 20 1570 31 ("separator:" "get-extension" "get-base" "format" "get-parent" "new-unique-file" "file")}
      {Lisp-Entry "fail-safe-save" #f 1574 20 1574 34 ("else" "move-pathname" "exists?" "error?:" "delete-file" "not" "cond" "set!" "begin" "unwind-protect" "completed?" "backup-file" "back" "clone-file" "temp" "let" "fail-safe-save" "'fail-safe-save" "unimplemented" "proc" "file")}
      {Lisp-Entry "read-tab-delimited" #f 1599 20 1599 38 ("get-output" "patch-for-excel" "map" "put" "split" "values" "set!" "if" "read-line" "line" "not" "while" "done?" "List-Factory" "new" "fact" "string" "tab" "let" "reader" "function" "cr-lf" "'cr-lf" "eol-encoding:" "parse" "path:" "list" "call-with-input-file" "file")}
      {Lisp-Entry "patch-for-excel" #f 1614 13 1614 28 ("string-length" "-" "1" "subseq" "ends-with?" "starts-with?" "and" "if" "line")}
      {Lisp-Entry "convert-tab-delimited->jml" #f 1621 20 1621 46 ("verify-reload" "get-application" "appl" "let" "get-name" "user-message" "pretty-print" "printer" "function" "UTF-8" "'UTF-8" "char-encoding:" "path:" "list" "call-with-output-file" "parse" "preferences:" "JML-Parser" "JML-Preferences" "new" "pref" "jml" "read-tab-delimited" "content" "get-base" "format" "get-parent" "new-file" "output" "let*" "convert-tab-delimited->jml" "'convert-tab-delimited->jml" "unimplemented" "parser" "input")}
      {Lisp-Entry "save-tab-delimited" #f 1638 20 1638 38 ("format" "set!" "if" "text" "first?" "let" "line" "for-each" "printer" "function" "parse" "call-with-output-file" "save-tab-delimited" "'save-tab-delimited" "unimplemented" "file" "content")}
      {Lisp-Entry "user-message" #f 1660 20 1660 32 ("format" "apply" "Locales" "is?" "if" "set-status-message" "when" "get-application" "appl" "let" "rest" "obj")}
      {Lisp-Entry "clear-user-message" #f 1666 20 1666 38 ("user-message")}
      {Lisp-Entry "make-directory-feedback" #f 1670 20 1670 43 ("set!" "3" "-" "0" "max" "subseq" "user-message" "length" "len" "expand" "expanded" "pathname=?" "not" "or" "when" "get-parent" "dir" "file" "function" "directory" "let")}
      {Lisp-Entry "disabled-functionnality" #f 1686 20 1686 43 ("error")}
      {Lisp-Entry "must-implement" #f 1690 20 1690 34 ("either" "error" "what" "definition-name")}
      {Lisp-Entry "sequence->string" #f 1701 20 1701 36 ("0" "naturals" "set-element!" "+" "element" "make-word" "c" "*" "n" "i" "function" "for-each" "make-string" "string" "1" "2" "quotient" "-" "len" "cardinality" "size" "let*" "seq")}
      {Lisp-Entry "string->sequence" #f 1713 20 1713 36 ("-" "0" "naturals" "hibyte" "lobyte" "set-element!" "element" "char->integer" "c" "n" "let" "i" "function" "for-each" "size:" "new" "seq" "2" "1" "+" "*" "size" "cardinality" "len" "let*" "type" "string")}
      {Lisp-Entry "iterate-hierarchical-data" #f 1733 20 1733 45 ("increase!" "0" "set!" "/=" "when" "scan-id" "scan-row" "<" "while" "scan-count" "cdr" "scan" "1" "id-size" "id-data" "id" "car" "id-row" "let*" "not" "unless" "key" "size" "data" "proc")}
      {Lisp-Entry "collect-hierarchical-data" #f 1756 20 1756 45 ("get-output" "put" "when" "object" "row" "function" "iterate-hierarchical-data" "List-Factory" "new" "fact" "let" "key" "size" "data" "proc")}
      {Lisp-Entry "sorted-hierarchical-data" #f 1770 20 1770 44 ("key:" "list" "collect-hierarchical-data" "sort" "third" "second" "first" "function" "collect" "sort-key" "sort-test" "key" "size" "data" "proc")}
      {Lisp-Entry "request-data-source" #f 1784 20 1784 39 ("process-modal" "external-name" "set-provider" "when" "get-guest" "manager" "let" "host-visible?:" "Data-Source-Chooser" "'Data-Source-Chooser" "autoload" "new-dialog" "dialog" "process?" "receive" "provider" "provider:")}
      {Lisp-Entry "2-Seconds-Tolerance" #f 1797 19 1797 38 ("2")}
      {Lisp-Entry "different-times?" #f 1801 13 1801 29 ("time->seconds" "-" "abs" ">" "2-Seconds-Tolerance" "tolerance" "tolerance:" "time2" "time1")}
      {Lisp-Entry "different-file-content?" #f 1806 13 1806 36 ("else" "eqv?" "eof-object?" "cond" "u2" "read-u8" "u1" "iterate" "let" "get-size" "/=" "or" "input2" "input1" "function" "parse" "call-with-input-file" "different-text-file-content?" "ci=?" "test:" "Text-Extensions" "get-extension" "member?" "and" "if" "file2" "file1")}
      {Lisp-Entry "different-text-file-content?" #f 1829 13 1829 41 ("char-encoding-errors:" "load-lines" "equal?" "not" "file2" "file1")}
      {Lisp-Entry "different-file-content-no-whitespace?" #f 1834 13 1834 50 ("read-content-string" "wi=" "not" "input2" "input1" "function" "char-encoding-errors:" "UTF" "'UTF" "char-encoding:" "parse" "path:" "list" "call-with-input-file" "file2" "file1")}
      {Lisp-Entry "present-hour/minutes" #f 1843 20 1843 40 ("format" "minutes" "hour")}
      {Lisp-Entry "message-box" #f 1854 20 1854 31 ("show-box" "system-message" "apply" "not" "if" "get-process" "process" "let" "rest" "text")}
      {Lisp-Entry "get-class-actions" #f 1866 20 1866 37 ("class-actions" "object")}
      {Lisp-Entry "get-guest-actions" #f 1870 20 1870 37 ("guest-actions" "get-application" "get-bindings" "not" "if" "view")}
      {Lisp-Entry "extract-actions" #f 1877 20 1877 35 ("get-output" "get-children" "put" "when" "get-shortcut" "shortcut" "action-name" "let*" "action-item" "get-name" "context-name" "action-list" "function" "for-each" "List-Factory" "new" "fact" "let" "actions-list")}
      {Lisp-Entry "*logger-directory*" #f 1896 12 1896 30 ("User" "Directory")}
      {Lisp-Entry "*logger-file*" #f 1899 12 1899 25 ()}
      {Lisp-Entry "logger-file" #f 1903 13 1903 24 ("*logger-directory*" "timestamped-file" "set!" "*logger-file*" "not" "when")}
      {Lisp-Entry "with-logger-output" #f 1909 13 1909 31 ("port" "function" "platform-eol-encoding" "eol-encoding:" "append:" "logger-file" "parse" "path:" "list" "call-with-output-file" "proc")}
      {Lisp-Entry "logger-log" #f 1915 13 1915 23 ("format" "apply" "port" "function" "with-logger-output" "rest")}
      {Lisp-Entry "logger-line" #f 1921 13 1921 24 ("logger-log" "line")}
      {Lisp-Entry "logger-debug" #f 1925 13 1925 25 ("logger-log" "rest")}
      {Lisp-Entry "logger-exception" #f 1929 13 1929 29 ("display-exception" "port" "function" "with-logger-output" "exc")}
      {Lisp-Entry "logger-backtrace" #f 1935 13 1935 29 ("display-continuation-backtrace" "port" "function" "with-logger-output" "cont")}
      {Lisp-Entry "*snapshots-directory*" #f 1946 12 1946 33 ("User" "Directory")}
      {Lisp-Entry "snapshot-process" #f 1950 20 1950 36 ("print-process-snapshot" "apply" "printer" "function" "platform-eol-encoding" "eol-encoding:" "parse" "path:" "list" "call-with-output-file" "create-directories" "*snapshots-directory*" "timestamped-file" "file" "let" "rest")}
      {Lisp-Entry "print-process-snapshot" #f 1959 20 1959 42 ("present-object" "value" "bind" "variable" "get-continuation-lexical-environment" "variables" "get-continuation-name" "name" "not" "cont" "then" "first" "first?" "get-continuation-stack" "stack" "let" "print-stack" "thread-state" "present-thread-state" "thread-name" "present-thread-name" "neq?" "do" "top-threads" "in" "thread" "for" "loop" "function" "continuation-capture" "current-thread" "print-thread" "if" "print-threads" "exception-reason" "print-exception" "when" "current-date" "present-date" "current-process-present" "either" "format" "print-process" "define" "exception" "exception:" "reason" "reason:" "continuation" "continuation:" "printer")}
      {Lisp-Entry "snapshot-exception-debugger" #f 2031 20 2031 47 ("1" "exit" "when" "exception:" "continuation:" "snapshot-process" "snapshot" "let" "continuation" "continuation-capture" "with-system-exception-debugger" "exception" "function" "feedback" "feedback:")}
      {Lisp-Entry "application-exception-debugger" #f 2043 20 2043 50 ("application-exception-feedback" "feedback:" "snapshot-exception-debugger")}
      {Lisp-Entry "application-exception-feedback" #f 2048 13 2048 43 ("problem" "'problem" "type:" "title:" "process-email" "email" "if" "parse" "current-process-present" "french:" "english:" "Locales" "localize" "format" "system-message" "get-process" "process" "let" "snapshot" "exception")}
      {Lisp-Entry "continuation-stack" #f 2075 20 2075 38 ("get-continuation-dynamic-environment" "append" "else" "get-continuation-lexical-environment" "cons" "not" "and" "cond" "get-continuation-name" "name" "function" "map" "get-continuation-stack" "stack" "let" "depth" "depth:" "lexical-environment?" "lexical-environment?:" "dynamic-environment?" "dynamic-environment?:" "cont")}
      {Lisp-Entry "execution-stack" #f 2089 20 2089 35 ("continuation-stack" "cont" "function" "continuation-capture" "depth" "depth:" "lexical-environment?" "lexical-environment?:" "dynamic-environment?" "dynamic-environment?:")}}})
"_validate"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "_validate.jazz"} 1226584789
    {Lisp-Entry "jazz.validate" #f 37 9 37 22 ("jazz")}})
"_validation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "_validation.jazz"} 1226584789
    {Lisp-Entry "jazz.validation" #f 37 9 37 24 ("jazz")
      {Lisp-Entry "validate" #f 43 13 43 21 ("validate-modules")}
      {Lisp-Entry "Present-Classes?" #f 53 12 53 28 ()}
      {Lisp-Entry "present-validations*" #f 58 13 58 33 ("1" "cons" "jazz.validation.suite.Y" "'jazz.validation.suite.Y" "jazz.validation.suite.X" "'jazz.validation.suite.X" "load-metaclass" "is?" "object?" "validate" "X.foo" "2" "X.moo" "present-evaluation" "new" "present-object" "newline" "present-classes" "Present-Classes?" "when" "jazz.String" "'jazz.String" "string-class" "jazz.Sequence" "'jazz.Sequence" "sequence-class" "jazz.Pair" "'jazz.Pair" "pair-class" "jazz.Integer" "'jazz.Integer" "integer-class" "jazz.Slot" "'jazz.Slot" "slot-class" "jazz.Object" "'jazz.Object" "load-category" "object-class" "Y" "y-class" "X" "x-class" "let")}
      {Lisp-Entry "present-classes" #f 90 13 90 28 ("load-metaclass" "jazz.validation.suite.Y" "'jazz.validation.suite.Y" "jazz.validation.suite.X" "'jazz.validation.suite.X" "jazz.Slot" "'jazz.Slot" "jazz.Object" "'jazz.Object" "load-category" "present-category")}}})
"_view"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "view" "_view.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.view" #f 37 9 37 21 ("jazz")
      {Lisp-Entry "mouse-in" #f 52 12 52 20 ()}
      {Lisp-Entry "mouse-down?" #f 53 12 53 23 ()}
      {Lisp-Entry "mouse-right-down?" #f 54 12 54 29 ()}
      {Lisp-Entry "mouse-down-view" #f 55 12 55 27 ()}
      {Lisp-Entry "mouse-down-point" #f 56 12 56 28 ()}
      {Lisp-Entry "delayed-mouse-action" #f 61 12 61 32 ()}
      {Lisp-Entry "get-delayed-mouse-action" #f 65 20 65 44 ("delayed-mouse-action")}
      {Lisp-Entry "set-delayed-mouse-action" #f 68 20 68 44 ("delayed-mouse-action" "set!" "action")}
      {Lisp-Entry "get-mouse-in" #f 72 20 72 32 ("mouse-in")}
      {Lisp-Entry "set-mouse-in" #f 75 20 75 32 ("mouse-in" "set!" "view")}
      {Lisp-Entry "get-mouse-down?" #f 79 20 79 35 ("mouse-down?")}
      {Lisp-Entry "set-mouse-down?" #f 82 20 82 35 ("mouse-down?" "set!" "flag")}
      {Lisp-Entry "get-mouse-right-down?" #f 86 20 86 41 ("mouse-right-down?")}
      {Lisp-Entry "set-mouse-right-down?" #f 89 20 89 41 ("mouse-right-down?" "set!" "flag")}
      {Lisp-Entry "get-mouse-down-view" #f 93 20 93 39 ("mouse-down-view")}
      {Lisp-Entry "set-mouse-down-view" #f 96 20 96 39 ("mouse-down-view" "set!" "view")}
      {Lisp-Entry "get-mouse-down-point" #f 100 20 100 40 ("mouse-down-point")}
      {Lisp-Entry "set-mouse-down-point" #f 103 20 103 40 ("mouse-down-point" "set!" "point")}
      {Lisp-Entry "mouse-view" #f 107 20 107 30 ("mouse-in" "Captured-View" "either")}
      {Lisp-Entry "toplevel-deactivate" #f 114 20 114 39 ("mouse-down-point" "mouse-down-view" "mouse-down?" "set!")}
      {Lisp-Entry "with-cursor" #f 125 20 125 31 ("update-cursor" "sleep" "when" "set-cursor" "begin" "unwind-protect" "duration" "duration:" "proc" "cursor")}
      {Lisp-Entry "update-cursor" #f 135 20 135 33 ("mouse-position" "call-cursor-update" "in-player?" "mouse-in" "and" "when")}
      {Lisp-Entry "Inhibit-View-Cursor?" #f 140 12 140 32 ()}
      {Lisp-Entry "inhibit-view-cursor" #f 144 20 144 39 ("Inhibit-View-Cursor?" "set!" "flag")}
      {Lisp-Entry "view-update-cursor" #f 148 13 148 31 ("update-cursor" "Inhibit-View-Cursor?" "unless")}
      {Lisp-Entry "Current-Drag-Drop" #f 158 12 158 29 ()}
      {Lisp-Entry "current-drag-drop" #f 162 20 162 37 ("Current-Drag-Drop")}
      {Lisp-Entry "set-current-drag-drop" #f 165 20 165 41 ("Current-Drag-Drop" "set!" "drag-drop")}
      {Lisp-Entry "Captured-View" #f 174 12 174 25 ()}
      {Lisp-Entry "get-captured-view" #f 178 20 178 37 ("Captured-View")}
      {Lisp-Entry "set-captured-view" #f 181 20 181 37 ("Captured-View" "set!" "view")}
      {Lisp-Entry "release-captured-view" #f 185 13 185 34 ("unset-capture" "set!" "Captured-View" "when")}
      {Lisp-Entry "external-name" #f 197 20 197 33 ("type-name" "identifier-name" "guest-class")}
      {Lisp-Entry "get-focused-host" #f 206 20 206 36 ("get-host" "when" "get-focus" "focus" "let")}
      {Lisp-Entry "focused-host?" #f 212 20 212 33 ("get-focused-host" "eq?" "host")}
      {Lisp-Entry "new-guest" #f 221 13 221 22 ("new" "apply" "rest" "guest-class")}
      {Lisp-Entry "get-modal" #f 230 20 230 29 ("process-modal" "not" "if" "host-visible?:" "new-dialog" "apply" "dialog/result" "process?" "receive" "rest" "guest-class")}
      {Lisp-Entry "new-dialog" #f 237 20 237 30 ("get-handle" "select-foreground-window" "set-visible?" "get-modal-result" "values" "has-dialog-result?" "if" "when" "set-guest" "set-position" "set-size" "set-title" "center-dialog" "host-position" "pos" "get-size" "host-size" "size" "new-guest" "either" "get-root" "host" "visible?:" "closable?:" "sizable?:" "dialog-class" "new" "player" "let*" "others" "initialize" "guest" "host-visible?" "host-closable?" "host-sizable?" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "center-dialog" #f 260 20 260 33 ("50" "get-v" "-" "get-h" "Point" "new" "center" "pos" "get-desktop" "get-size" "outer" "let*" "inner")}
      {Lisp-Entry "Palettes" #f 271 12 271 20 ("eq?" "test:" "make-table")}
      {Lisp-Entry "singleton-palette" #f 275 20 275 37 ("table-set!" "host-visible?:" "new-palette" "procedure?" "if" "palette" "Palettes" "table-ref" "type-name" "either" "ref" "let" "rest" "name" "guest-class")}
      {Lisp-Entry "new-palette" #f 287 20 287 31 ("fade-in" "layout-view" "set-guest" "new-guest" "let" "set-size" "set-position" "when" "either" "set-title" "get-root" "host" "visible?:" "palette-class" "new" "player" "let*" "others" "initialize" "guest" "host-visible?" "host-size" "host-position" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "show-palette" #f 310 20 310 32 ("fade-in" "unless" "bring-to-front" "get-visible?" "visible?" "client-activate" "when" ":initialize" "getf" "initialize" "get-guest" "guest" "new-palette" "apply" "not" "if" "get-toplevel" "get-root" "find-host" "palette" "let" "rest" "guest-class")}
      {Lisp-Entry "Dockeds" #f 331 12 331 19 ("eq?" "test:" "make-table")}
      {Lisp-Entry "singleton-docked" #f 335 20 335 36 ("table-set!" "name:" "new-docked" "palette" "Dockeds" "table-ref" "external-name" "either" "ref" "let" "rest" "name" "guest-class")}
      {Lisp-Entry "new-docked" #f 343 20 343 30 ("new-guest" "set-guest" "set-location" "when" "either" "set-title" "visible?:" "Docked-Host" "new" "host" "let" "others" "host-location" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "new-event" #f 358 20 358 29 ("new-frame" "apply" "rest" "guest-class")}
      {Lisp-Entry "new-frame" #f 362 20 362 29 ("focus-host" "set-visible?" "bring-to-front" "ensure-displayed" "set-guest" "new-guest" "set-workspace" "set-size" "set-position" "when" "either" "set-title" "visible?:" "get-stage" "parent:" "Frame-Host" "new" "host" "let" "others" "initialize" "guest" "host-focus?" "host-visible?" "host-workspace" "host-size" "host-position" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "Toolbars" #f 394 12 394 20 ("eq?" "test:" "make-table")}
      {Lisp-Entry "singleton-toolbar" #f 398 20 398 37 ("table-set!" "name:" "new-toolbar" "palette" "Toolbars" "table-ref" "type-name" "either" "ref" "let" "rest" "name" "guest-class")}
      {Lisp-Entry "new-toolbar" #f 406 20 406 31 ("new-guest" "set-guest" "set-location" "when" "either" "set-title" "visible?:" "Toolbar-Host" "new" "host" "let" "others" "host-location" "host-title" "bind-keywords" "rest" "guest-class")}
      {Lisp-Entry "with-progress" #f 421 13 421 26 ("process-modal" "end-modal" "signal-modal" "signal" "forwardable?" "Signal" "catch" "unwind-protect" "set!" "sig" "abnormal" "resignal" "result" "let*" "thread" "function" "execute:" "self" "context:" "either" "Thread" "disable-cancel" "when" "get-guest" "reporter" "let" "context" "guest-context:" "host-closable?:" "new-dialog" "dialog" "process?" "receive" "User-Reporter" "new" "not" "if" "with-progress" "'with-progress" "unimplemented" "abnormal-cleanup" "abnormal-cleanup:" "cancelable?" "cancelable?:" "Progress-Reporter" "progress-reporter" "progress-reporter:" "name" "name:" "threaded?" "threaded?:" "proc")}
      {Lisp-Entry "ui-message-box" #f 462 20 462 34 ("process-box" "get-guest" "guest" "let" "host-sizable?:" "host-visible?:" "Message-Box" "either" "new-dialog" "dialog" "process?" "receive" "sizable?" "sizable?:" "process-keys?" "process-keys?:" "default-button" "default-button:" "actions" "actions:" "cancel" "cancel:" "no" "no:" "yes" "yes:" "selection" "selection:" "default" "'default" "sound" "sound:" "content" "content:" "icon" "icon:" "size" "size:" "title" "title:" "message" "'message" "type" "type:" "class" "class:" "text")}
      {Lisp-Entry "request-string" #f 489 20 489 34 ("empty-string?" "process-modal" "string" "let" "acquire-focus" "select-all" "->string" "if" "set-string-content" "set-validator" "set-unicity-domain" "set-accepts-empty?" "either" "set-title" "'text" "text" "'prefix" "locate" "prfx" "get-guest" "view" "let*" "new-dialog" "dialog" "process?" "receive" "validator" "validator:" "unicity-domain" "unicity-domain:" "accepts-empty?" "accepts-empty?:" "initial-value" "initial-value:" "prefix" "prefix:" "title" "title:" "String-Request" "class" "class:")}
      {Lisp-Entry "request-name" #f 508 20 508 32 ("string->symbol" "not" "if" "request-string" "apply" "string" "either" "let*" "others" "prefix" "prefix:" "title" "title:")}
      {Lisp-Entry "request-text" #f 517 20 517 32 ("empty-string?" "if" "process-modal" "string" "let" "acquire-focus" "select-all" "set-string-content" "either" "set-title" "'text" "locate" "text" "get-guest" "view" "let*" "new-dialog" "dialog" "process?" "receive" "request-text" "'request-text" "unimplemented" "initial-text" "initial-text:" "title" "title:" "Text-Request" "class" "class:")}
      {Lisp-Entry "request-date" #f 533 20 533 32 ("Date" "parse-string" "empty-string?" "process-modal" "string" "let" "acquire-focus" "select-all" "present" "if" "set-string-content" "either" "set-title" "'text" "text" "'prefix" "locate" "prfx" "get-guest" "view" "let*" "new-dialog" "dialog" "process?" "receive" "request-date" "'request-date" "unimplemented" "initial-date" "initial-date:" "prefix" "prefix:" "title" "title:" "Date-Request" "class" "class:")}
      {Lisp-Entry "get-workspace-preferences" #f 556 20 556 45 ("get-toplevel" "get-workspace-preferences")}
      {Lisp-Entry "set-workspace-preferences" #f 559 20 559 45 ("get-toplevel" "set-workspace-preferences" "preferences")}
      {Lisp-Entry "get-stage-border" #f 563 20 563 36 ("get-stage" "get-parent")}
      {Lisp-Entry "get-output-log" #f 567 20 567 34 ("get-application" "get-output-log")}
      {Lisp-Entry "get-active-results" #f 571 20 571 38 ("get-application" "get-active-results")}
      {Lisp-Entry "find-palette" #f 575 20 575 32 ("find-palette" "find-type" "either" "when" "get-toplevel" "toplevel" "let" "class")}
      {Lisp-Entry "select-palette" #f 582 20 582 34 ("workspaces" "'workspaces" "list" "get-preferences" "apply-preferences" "focus-host" "unzoom" "get-zoomed" "neq?" "zoom" "'zoom" "get-state" "eq?" "and" "splitter" "Splitter-View" "if" "for-each-splitter" "set-selection" "Pad-View" "is?" "get-parent" "parent" "get-host" "host" "let*" "when" "view" "function" "proc" "find-palette" "guest" "let" "focus?" "focus?:" "home" "'home" "workspace" "workspace:" "name" "name:" "class")}
      {Lisp-Entry "for-each-docked" #f 606 20 606 35 ("get-guest" "Docked-Host" "is?" "when" "palette" "function" "get-toplevel" "for-each-palette" "proc")}
      {Lisp-Entry "for-each-splitter" #f 613 20 613 37 ("set!" "is?" "while" "Splitter-View" "splitter-class" "get-parent" "splitter" "let" "proc" "view")}
      {Lisp-Entry "current-frame" #f 622 20 622 33 ("first-view" "when" "get-stage" "stage" "let")}
      {Lisp-Entry "current-document" #f 628 20 628 36 ("get-guest" "Frame-Host" "is?" "when" "current-frame" "frame" "let")}
      {Lisp-Entry "current-guest" #f 634 20 634 33 ("get-guest" "when" "get-focused-host" "host" "let")}
      {Lisp-Entry "focus-guest" #f 640 20 640 31 ("get-guest" "when" "get-focus" "focus" "let")}
      {Lisp-Entry "*focused-window*" #f 654 12 654 28 ()}
      {Lisp-Entry "get-focused-window" #f 658 20 658 38 ("*focused-window*")}
      {Lisp-Entry "set-focused-window" #f 661 20 661 38 ("*focused-window*" "set!" "window")}
      {Lisp-Entry "*focus*" #f 665 12 665 19 ()}
      {Lisp-Entry "get-focus" #f 669 20 669 29 ("*focus*")}
      {Lisp-Entry "set-focus" #f 673 20 673 29 ("get-application" "process-focus-change" "activate-focus" "host" "call-focus-gain" "call-focus-lose" "set!" "focus" "deactivate-focus" "get-host" "old-host" "old" "set-window-focus" "set-previously-focused-view" "begin" "*focused-window*" "and" "if" "get-player" "essay" "player" "let" "*focus*" "neq?" "when" "view")}
      {Lisp-Entry "get-focus-actions" #f 698 20 698 37 ("focus-actions" "else" "Tree-Actions" "Tree-View" "View-Actions" "Text-Actions" "new" "list" "Text-View" "is?" "cond" "get-application" "get-bindings" "not" "if" "view")}
      {Lisp-Entry "*debug-paint*" #f 714 12 714 25 ()}
      {Lisp-Entry "*debug-colors*" #f 718 12 718 26 ("Dark-Purple" "Dark-Blue" "Dark-Green" "Dark-Yellow" "Dark-Orange" "Dark-Red" "name:" "Color")}
      {Lisp-Entry "*nb-debug-colors*" #f 726 12 726 29 ("*debug-colors*" "length")}
      {Lisp-Entry "*current-debug-color*" #f 729 12 729 33 ("0")}
      {Lisp-Entry "cycle-debug-color!" #f 733 20 733 38 ("*nb-debug-colors*" "1" "+" "modulo" "set!" "*current-debug-color*" "*debug-colors*" "element" "prog1")}
      {Lisp-Entry "debug-paint?" #f 738 20 738 32 ("car" "set!" "*debug-paint*" "null?" "if" "rest")}
      {Lisp-Entry "cleanup-mouse-processing" #f 749 20 749 44 ("complete-drag-up" "complete-drag-and-drop" "release-captured-view")}
      {Lisp-Entry "complete-drag-and-drop" #f 755 13 755 35 ("get-source" "get-view" "drag-end" "Current-Drag-Drop" "when")}
      {Lisp-Entry "complete-drag-up" #f 760 13 760 29 ("process-drag-up" "mouse-down-view" "mouse-position" "pos" "let" "mouse-down?" "when" "dragging?")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "view" "_view.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.view" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "get-sql-console" #f 45 20 45 35 ("SQL-Console-Manager" "singleton-docked" "get-guest")}
      {Lisp-Entry "get-sql-console-text" #f 49 20 49 40 ("get-sql-console" "get-text")}
      {Lisp-Entry "get-sql-tree-output" #f 53 20 53 39 ("SQL-Tree-Output" "singleton-docked" "get-guest")}
      {Lisp-Entry "get-sql-output-tree" #f 57 20 57 39 ("get-sql-tree-output" "get-tree")}
      {Lisp-Entry "get-sql-text-output" #f 61 20 61 39 ("SQL-Text-Output" "singleton-docked" "get-guest")}
      {Lisp-Entry "get-sql-output-text" #f 65 20 65 39 ("get-sql-text-output" "get-text")}
      {Lisp-Entry "get-sql-connections" #f 69 20 69 39 ("SQL-Connections-Manager" "singleton-docked" "get-guest")}}})
"_window"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "_window.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window" #f 37 9 37 23 ("jazz")
      {Lisp-Entry "get-toplevel" #f 62 20 62 32 ("get-application" "get-toplevel")}
      {Lisp-Entry "get-stage" #f 66 20 66 29 ("get-application" "get-stage")}
      {Lisp-Entry "desktop" #f 75 12 75 19 ()}
      {Lisp-Entry "Desktop-DC" #f 78 12 78 22 ()}
      {Lisp-Entry "desktop-dc" #f 81 20 81 30 ("Memory-Surface" "new" "set!" "Desktop-DC" "unless")}
      {Lisp-Entry "get-desktop" #f 87 20 87 31 ("Desktop" "new" "set!" "desktop" "unless")}
      {Lisp-Entry "select-foreground-window" #f 98 20 98 44 ("platform-select-foreground-window" "assert" "handle")}
      {Lisp-Entry "get-window-handle-title" #f 103 20 103 43 ("platform-get-window-handle-title" "assert" "handle")}
      {Lisp-Entry "process-events" #f 113 13 113 27 ("thread-stop-loop" "get-exception-debugger" "with-exception-debugger" "thread-read" "thunk" "Cancel-Signal" "catch" "function" "resume-loop" "'resume-loop" "with-restart-catcher" "loop" "unwind-protect" "thread-start!" "thread-start-loop" "when" "prime-message-pump" "pump" "let" "process-events-single-threaded" "get-events-single-threaded?" "if" "proper-tail-calls" "declare")}
      {Lisp-Entry "process-events-single-threaded" #f 134 13 134 43 ("get-exception-debugger" "with-exception-debugger" "eof-object?" "not" "when" "thread-read-non-blocking" "thunk" "process-messages-single-threaded" "Cancel-Signal" "catch" "function" "resume-loop" "'resume-loop" "with-restart-catcher" "loop" "let" "proper-tail-calls" "declare")}
      {Lisp-Entry "locked-update?" #f 156 12 156 26 ()}
      {Lisp-Entry "with-locked-update" #f 160 20 160 38 ("update-window" "when" "set!" "get-handle" "platform-lock-window-update" "begin" "unwind-protect" "get-toplevel" "toplevel" "let" "locked-update?" "if" "proc")}
      {Lisp-Entry "Escape-Handler" #f 180 12 180 26 ()}
      {Lisp-Entry "get-escape-handler" #f 184 20 184 38 ("Escape-Handler")}
      {Lisp-Entry "set-escape-handler" #f 188 20 188 38 ("Escape-Handler" "set!" "handler")}
      {Lisp-Entry "Active-Frame" #f 197 12 197 24 ()}
      {Lisp-Entry "get-active-frame" #f 201 13 201 29 ("Active-Frame")}
      {Lisp-Entry "set-active-frame" #f 204 13 204 29 ("Active-Frame" "set!" "frame")}
      {Lisp-Entry "activate-front" #f 208 13 208 27 ("activate-frame" "deactivate-frame" "neq?" "or" "when" "Active-Frame" "active" "get-stage" "first-view" "front" "let" "force?" "force?:")}
      {Lisp-Entry "frame-region" #f 223 20 223 32 ("or" "'or" "combine!" "b" "-" "r" "t" "bottom:" "+" "right:" "top:" "left:" "l" "with-closed" "Region" "region" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "left" "let" "1" "Rect" "new" "insets" "insets:" "frame")}
      {Lisp-Entry "Overlappeds" #f 245 12 245 23 ()}
      {Lisp-Entry "get-overlappeds" #f 249 20 249 35 ("Overlappeds")}
      {Lisp-Entry "set-overlappeds" #f 252 20 252 35 ("Overlappeds" "set!" "lst")}
      {Lisp-Entry "register-overlapped" #f 256 20 256 39 ("get-overlappeds" "cons" "set-overlappeds" "overlapped")}
      {Lisp-Entry "unregister-overlapped" #f 259 20 259 41 ("get-overlappeds" "remove!" "set-overlappeds" "overlapped")}
      {Lisp-Entry "Passing-Through?" #f 268 12 268 28 ()}
      {Lisp-Entry "get-passing-through?" #f 272 20 272 40 ("Passing-Through?")}
      {Lisp-Entry "set-passing-through?" #f 275 20 275 40 ("Passing-Through?" "set!" "flag")}
      {Lisp-Entry "Popups" #f 279 12 279 18 ()}
      {Lisp-Entry "get-popups" #f 283 20 283 30 ("Popups")}
      {Lisp-Entry "set-popups" #f 286 20 286 30 ("Popups" "set!" "lst")}
      {Lisp-Entry "close-all-popups" #f 290 20 290 36 ("Popups" "close-popup" "for-each")}
      {Lisp-Entry "close-popup" #f 294 20 294 31 ("remove!" "Popups" "set!" "close" "popup")}
      {Lisp-Entry "process-windows" #f 304 20 304 35 ("get-overlappeds" "get-visible?" "or" "overlapped" "function" "collect-if" "include-invisibles?" "include-invisibles?:")}
      {Lisp-Entry "get-window-focus" #f 315 13 315 29 ("get-window" "when" "platform-get-focus" "focus" "let")}
      {Lisp-Entry "set-window-focus" #f 321 13 321 29 ("get-handle" "if" "platform-set-focus" "window")}}})
"_windows"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "performance" "platform" "windows" "_windows.jazz"} 1226584785
    {Lisp-Entry "jazz.system.performance.platform.windows" #f 37 9 37 49 ("jazz")
      {Lisp-Entry "performance-snapshot" #f 51 20 51 40 ("user-time:" "kernel-time:" ",name" "name:" "parse-jml" "dwHighDateTime" "'dwHighDateTime" "dwLowDateTime" "'dwLowDateTime" "get" "make-long" "filetime" "function" "time" "GetProcessTimes" "user-time" "kernel-time" "exit-time" "FILETIME" "new" "creation-time" "GetCurrentProcess" "handle" "let" "nil" "name" "bind-keywords" "rest")}
      {Lisp-Entry "resources-snapshot" #f 74 20 74 38 (",undestroyed" "undestroyed:" ",handles" "handles:" ",gui-user-objects" "gui-user-objects:" ",gui-gdi-objects" "gui-gdi-objects:" ",private-bytes" "private-bytes:" ",name" "name:" "parse-jml" "gc-undestroyed-count" "0" "undestroyed" "GetProcessHandleCount" "handles" "GR_USEROBJECTS" "gui-user-objects" "GR_GDIOBJECTS" "GetGuiResources" "gui-gdi-objects" "get-private-bytes" "private-bytes" "GetCurrentProcess" "handle" "let" "name" "bind-keywords" "rest")}
      {Lisp-Entry "Private-Bytes-Query" #f 97 12 97 31 ()}
      {Lisp-Entry "Private-Bytes-Counter" #f 100 12 100 33 ()}
      {Lisp-Entry "get-private-bytes-query" #f 104 13 104 36 ("setup-private-bytes" "Private-Bytes-Query" "not" "when")}
      {Lisp-Entry "get-private-bytes-counter" #f 110 13 110 38 ("setup-private-bytes" "Private-Bytes-Counter" "not" "when")}
      {Lisp-Entry "setup-private-bytes" #f 116 13 116 32 ("Private-Bytes-Counter" "Private-Bytes-Query" "set!" "counter-name:" "object-name:" "add-counter" "counter" "Performance-Query" "new" "query" "let*")}
      {Lisp-Entry "get-private-bytes" #f 123 20 123 37 ("get-counter-value" "collect-data" "get-private-bytes-counter" "counter" "get-private-bytes-query" "query" "let")}
      {Lisp-Entry "i/o-snapshot" #f 135 16 135 28 ("OtherTransferCount" "'OtherTransferCount" "other-bytes:" "WriteTransferCount" "'WriteTransferCount" "write-bytes:" "ReadTransferCount" "'ReadTransferCount" "get" "read-bytes:" ",name" "name:" "JML" "parse" "GetProcessIoCounters" "IO_COUNTERS" "new" "io" "GetCurrentProcess" "handle" "let" "nil" "name" "bind-keywords" "rest")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "_windows.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.windows" #f 37 9 37 30 ("jazz")
      {Lisp-Entry "relinquish-process" #f 62 20 62 38 ("thread-yield!")}
      {Lisp-Entry "system-message" #f 71 20 71 34 ("MB_TASKMODAL" "get-handle" "if" "MessageBox" "MB_YESNOCANCEL" "MB_ICONWARNING" "MB_YESNO" "MB_ICONINFORMATION" "MB_OK" "MB_ICONERROR" "MB_OKCANCEL" "bitwise-ior" "flags" "confirmation" "question" "problem" "error" "case" "or" "get-toplevel" "window" "let" "title" "message" "'message" "type" "bind-keywords" "rest" "text")}}})
"_workbench"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "workbench" "_workbench.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.workbench" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "active-product" #f 44 12 44 26 ()}
      {Lisp-Entry "get-active-product" #f 48 20 48 38 ("active-product")}
      {Lisp-Entry "set-active-product" #f 52 20 52 38 ("active-product" "set!" "product")}
      {Lisp-Entry "build-preferences" #f 61 13 61 30 ("build" "'build" "get-preferences")}
      {Lisp-Entry "require-active-configuration" #f 65 20 65 48 ("error" "get-active-configuration" "either")}
      {Lisp-Entry "get-active-configuration" #f 70 20 70 44 ("get-name" "configuration" "function" "key:" "get-configurations" "find-in" "not" "if" "get-active-configuration" "active" "build-preferences" "pref" "let")}
      {Lisp-Entry "set-active-configuration" #f 78 20 78 44 ("get-name" "essay" "active-configuration" "'active-configuration" "get-process" "set-preferences-property" "build-preferences" "pref" "let" "configuration")}}})
"_workspace"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "workspace" "_workspace.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.workspace" #f 37 9 37 26 ("jazz")
      {Lisp-Entry "Selected-Workspace" #f 48 12 48 30 ()}
      {Lisp-Entry "Locked-Activations?" #f 51 12 51 31 ()}
      {Lisp-Entry "get-workspace" #f 55 20 55 33 ("error" "workspaces" "'workspaces" "get-preferences" "find-component" "either" "name")}
      {Lisp-Entry "selected-workspace" #f 60 20 60 38 ("Selected-Workspace")}
      {Lisp-Entry "set-selected-workspace" #f 63 20 63 42 ("Selected-Workspace" "set!" "workspace")}
      {Lisp-Entry "get-locked-activations?" #f 67 20 67 43 ("Locked-Activations?")}
      {Lisp-Entry "set-locked-activations?" #f 70 20 70 43 ("Locked-Activations?" "set!" "flag")}
      {Lisp-Entry "close-palettes" #f 74 13 74 27 ("get-children" "client-deactivate" "set-visible?" "get-visible?" "Palette" "is?" "and" "when" "child" "function" "for-each" "get-toplevel" "toplevel" "let")}}})
"_x11"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "x11" "_x11.jazz"} 1227094443
    {Lisp-Entry "jazz.platform.x11" #f 37 9 37 26 ("XRectangle*" "XGCValues*" "uint8*" "Atom" "Cursor" "char-string" "XERRORPROC" "Time" "KeyCode" "KeySym" "XWindowAttributes*" "XSetWindowAttributes*" "Visual*" "long" "XEvent*" "ulong" "char*" "GC" "Drawable" "Bool" "uint" "int" "Window" "Display*" "jazz")
      {Lisp-Entry "None" #f 52 12 52 16 ("#x00000000")}
      {Lisp-Entry "PointerRoot" #f 53 12 53 23 ("1")}
      {Lisp-Entry "CopyFromParent" #f 54 12 54 26 ("#x00000000")}
      {Lisp-Entry "InputOutput" #f 55 12 55 23 ("1")}
      {Lisp-Entry "CurrentTime" #f 56 12 56 23 ("0")}
      {Lisp-Entry "CWBackPixel" #f 59 12 59 23 ("#x0002")}
      {Lisp-Entry "CWBitGravity" #f 60 12 60 24 ("#x0010")}
      {Lisp-Entry "CWOverrideRedirect" #f 61 12 61 30 ("#x0100")}
      {Lisp-Entry "StaticGravity" #f 64 12 64 25 ("10")}
      {Lisp-Entry "NoEventMask" #f 72 12 72 23 ("#x00000000")}
      {Lisp-Entry "KeyPressMask" #f 73 12 73 24 ("#x00000001")}
      {Lisp-Entry "KeyReleaseMask" #f 74 12 74 26 ("#x00000002")}
      {Lisp-Entry "ButtonPressMask" #f 75 12 75 27 ("#x00000004")}
      {Lisp-Entry "ButtonReleaseMask" #f 76 12 76 29 ("#x00000008")}
      {Lisp-Entry "EnterWindowMask" #f 77 12 77 27 ("#x00000010")}
      {Lisp-Entry "LeaveWindowMask" #f 78 12 78 27 ("#x00000020")}
      {Lisp-Entry "PointerMotionMask" #f 79 12 79 29 ("#x00000040")}
      {Lisp-Entry "PointerMotionHintMask" #f 80 12 80 33 ("#x00000080")}
      {Lisp-Entry "Button1MotionMask" #f 81 12 81 29 ("#x00000100")}
      {Lisp-Entry "Button2MotionMask" #f 82 12 82 29 ("#x00000200")}
      {Lisp-Entry "Button3MotionMask" #f 83 12 83 29 ("#x00000400")}
      {Lisp-Entry "Button4MotionMask" #f 84 12 84 29 ("#x00000800")}
      {Lisp-Entry "Button5MotionMask" #f 85 12 85 29 ("#x00001000")}
      {Lisp-Entry "ButtonMotionMask" #f 86 12 86 28 ("#x00002000")}
      {Lisp-Entry "KeymapStateMask" #f 87 12 87 27 ("#x00004000")}
      {Lisp-Entry "ExposureMask" #f 88 12 88 24 ("#x00008000")}
      {Lisp-Entry "VisibilityChangeMask" #f 89 12 89 32 ("#x00010000")}
      {Lisp-Entry "StructureNotifyMask" #f 90 12 90 31 ("#x00020000")}
      {Lisp-Entry "ResizeRedirectMask" #f 91 12 91 30 ("#x00040000")}
      {Lisp-Entry "SubstructureNotifyMask" #f 92 12 92 34 ("#x00080000")}
      {Lisp-Entry "SubstructureRedirectMask" #f 93 12 93 36 ("#x00100000")}
      {Lisp-Entry "FocusChangeMask" #f 94 12 94 27 ("#x00200000")}
      {Lisp-Entry "PropertyChangeMask" #f 95 12 95 30 ("#x00400000")}
      {Lisp-Entry "ColormapChangeMask" #f 96 12 96 30 ("#x00800000")}
      {Lisp-Entry "OwnerGrabButtonMask" #f 97 12 97 31 ("#x01000000")}
      {Lisp-Entry "KeyPress" #f 105 12 105 20 ("2")}
      {Lisp-Entry "KeyRelease" #f 106 12 106 22 ("3")}
      {Lisp-Entry "ButtonPress" #f 107 12 107 23 ("4")}
      {Lisp-Entry "ButtonRelease" #f 108 12 108 25 ("5")}
      {Lisp-Entry "MotionNotify" #f 109 12 109 24 ("6")}
      {Lisp-Entry "EnterNotify" #f 110 12 110 23 ("7")}
      {Lisp-Entry "LeaveNotify" #f 111 12 111 23 ("8")}
      {Lisp-Entry "FocusIn" #f 112 12 112 19 ("9")}
      {Lisp-Entry "FocusOut" #f 113 12 113 20 ("10")}
      {Lisp-Entry "KeymapNotify" #f 114 12 114 24 ("11")}
      {Lisp-Entry "Expose" #f 115 12 115 18 ("12")}
      {Lisp-Entry "GraphicsExpose" #f 116 12 116 26 ("13")}
      {Lisp-Entry "NoExpose" #f 117 12 117 20 ("14")}
      {Lisp-Entry "VisibilityNotify" #f 118 12 118 28 ("15")}
      {Lisp-Entry "CreateNotify" #f 119 12 119 24 ("16")}
      {Lisp-Entry "DestroyNotify" #f 120 12 120 25 ("17")}
      {Lisp-Entry "UnmapNotify" #f 121 12 121 23 ("18")}
      {Lisp-Entry "MapNotify" #f 122 12 122 21 ("19")}
      {Lisp-Entry "MapRequest" #f 123 12 123 22 ("20")}
      {Lisp-Entry "ReparentNotify" #f 124 12 124 26 ("21")}
      {Lisp-Entry "ConfigureNotify" #f 125 12 125 27 ("22")}
      {Lisp-Entry "ConfigureRequest" #f 126 12 126 28 ("23")}
      {Lisp-Entry "GravityNotify" #f 127 12 127 25 ("24")}
      {Lisp-Entry "ResizeRequest" #f 128 12 128 25 ("25")}
      {Lisp-Entry "CirculateNotify" #f 129 12 129 27 ("26")}
      {Lisp-Entry "CirculateRequest" #f 130 12 130 28 ("27")}
      {Lisp-Entry "PropertyNotify" #f 131 12 131 26 ("28")}
      {Lisp-Entry "SelectionClear" #f 132 12 132 26 ("29")}
      {Lisp-Entry "SelectionRequest" #f 133 12 133 28 ("30")}
      {Lisp-Entry "SelectionNotify" #f 134 12 134 27 ("31")}
      {Lisp-Entry "ColormapNotify" #f 135 12 135 26 ("32")}
      {Lisp-Entry "ClientMessage" #f 136 12 136 25 ("33")}
      {Lisp-Entry "MappingNotify" #f 137 12 137 25 ("34")}
      {Lisp-Entry "LASTEvent" #f 138 12 138 21 ("35")}
      {Lisp-Entry "CWBackPixmap" #f 146 12 146 24 ("#x00000001")}
      {Lisp-Entry "CWBackPixel" #f 147 12 147 23 ("#x00000002")}
      {Lisp-Entry "CWBorderPixmap" #f 148 12 148 26 ("#x00000004")}
      {Lisp-Entry "CWBorderPixel" #f 149 12 149 25 ("#x00000008")}
      {Lisp-Entry "CWBitGravity" #f 150 12 150 24 ("#x00000010")}
      {Lisp-Entry "CWWinGravity" #f 151 12 151 24 ("#x00000020")}
      {Lisp-Entry "CWBackingStore" #f 152 12 152 26 ("#x00000040")}
      {Lisp-Entry "CWBackingPlanes" #f 153 12 153 27 ("#x00000080")}
      {Lisp-Entry "CWBackingPixel" #f 154 12 154 26 ("#x00000100")}
      {Lisp-Entry "CWOverrideRedirect" #f 155 12 155 30 ("#x00000200")}
      {Lisp-Entry "CWSaveUnder" #f 156 12 156 23 ("#x00000400")}
      {Lisp-Entry "CWEventMask" #f 157 12 157 23 ("#x00000800")}
      {Lisp-Entry "CWDontPropagate" #f 158 12 158 27 ("#x00001000")}
      {Lisp-Entry "CWColormap" #f 159 12 159 22 ("#x00002000")}
      {Lisp-Entry "CWCursor" #f 160 12 160 20 ("#x00004000")}
      {Lisp-Entry "Button1" #f 168 12 168 19 ("1")}
      {Lisp-Entry "Button2" #f 169 12 169 19 ("2")}
      {Lisp-Entry "Button3" #f 170 12 170 19 ("3")}
      {Lisp-Entry "Button4" #f 171 12 171 19 ("4")}
      {Lisp-Entry "Button5" #f 172 12 172 19 ("5")}
      {Lisp-Entry "Button6" #f 173 12 173 19 ("6")}
      {Lisp-Entry "Button7" #f 174 12 174 19 ("7")}
      {Lisp-Entry "ShiftMask" #f 182 12 182 21 ("0")}
      {Lisp-Entry "LockMask" #f 183 12 183 20 ("1")}
      {Lisp-Entry "ControlMask" #f 184 12 184 23 ("2")}
      {Lisp-Entry "Mod1Mask" #f 185 12 185 20 ("3")}
      {Lisp-Entry "Mod2Mask" #f 186 12 186 20 ("4")}
      {Lisp-Entry "Mod3Mask" #f 187 12 187 20 ("5")}
      {Lisp-Entry "Mod4Mask" #f 188 12 188 20 ("6")}
      {Lisp-Entry "Mod5Mask" #f 189 12 189 20 ("7")}
      {Lisp-Entry "XK_BackSpace" #f 193 12 193 24 ("#xFF08")}
      {Lisp-Entry "XK_Tab" #f 194 12 194 18 ("#xFF09")}
      {Lisp-Entry "XK_Linefeed" #f 195 12 195 23 ("#xFF0A")}
      {Lisp-Entry "XK_Clear" #f 196 12 196 20 ("#xFF0B")}
      {Lisp-Entry "XK_Return" #f 197 12 197 21 ("#xFF0D")}
      {Lisp-Entry "XK_Pause" #f 198 12 198 20 ("#xFF13")}
      {Lisp-Entry "XK_Scroll_Lock" #f 199 12 199 26 ("#xFF14")}
      {Lisp-Entry "XK_Sys_Req" #f 200 12 200 22 ("#xFF15")}
      {Lisp-Entry "XK_Escape" #f 201 12 201 21 ("#xFF1B")}
      {Lisp-Entry "XK_Home" #f 203 12 203 19 ("#xFF50")}
      {Lisp-Entry "XK_Left" #f 204 12 204 19 ("#xFF51")}
      {Lisp-Entry "XK_Up" #f 205 12 205 17 ("#xFF52")}
      {Lisp-Entry "XK_Right" #f 206 12 206 20 ("#xFF53")}
      {Lisp-Entry "XK_Down" #f 207 12 207 19 ("#xFF54")}
      {Lisp-Entry "XK_Prior" #f 208 12 208 20 ("#xFF55")}
      {Lisp-Entry "XK_Page_Up" #f 209 12 209 22 ("#xFF55")}
      {Lisp-Entry "XK_Next" #f 210 12 210 19 ("#xFF56")}
      {Lisp-Entry "XK_Page_Down" #f 211 12 211 24 ("#xFF56")}
      {Lisp-Entry "XK_End" #f 212 12 212 18 ("#xFF57")}
      {Lisp-Entry "XK_Begin" #f 213 12 213 20 ("#xFF58")}
      {Lisp-Entry "XK_Select" #f 215 12 215 21 ("#xFF60")}
      {Lisp-Entry "XK_Print" #f 216 12 216 20 ("#xFF61")}
      {Lisp-Entry "XK_Execute" #f 217 12 217 22 ("#xFF62")}
      {Lisp-Entry "XK_Insert" #f 218 12 218 21 ("#xFF63")}
      {Lisp-Entry "XK_Undo" #f 219 12 219 19 ("#xFF65")}
      {Lisp-Entry "XK_Redo" #f 220 12 220 19 ("#xFF66")}
      {Lisp-Entry "XK_Menu" #f 221 12 221 19 ("#xFF67")}
      {Lisp-Entry "XK_Find" #f 222 12 222 19 ("#xFF68")}
      {Lisp-Entry "XK_Cancel" #f 223 12 223 21 ("#xFF69")}
      {Lisp-Entry "XK_Help" #f 224 12 224 19 ("#xFF6A")}
      {Lisp-Entry "XK_Break" #f 225 12 225 20 ("#xFF6B")}
      {Lisp-Entry "XK_Mode_switch" #f 226 12 226 26 ("#xFF7E")}
      {Lisp-Entry "XK_script_switch" #f 227 12 227 28 ("#xFF7E")}
      {Lisp-Entry "XK_Num_Lock" #f 228 12 228 23 ("#xFF7F")}
      {Lisp-Entry "XK_KP_Add" #f 230 12 230 21 ("#xFFAB")}
      {Lisp-Entry "XK_KP_Subtract" #f 231 12 231 26 ("#xFFAD")}
      {Lisp-Entry "XK_KP_Decimal" #f 232 12 232 25 ("#xFFAE")}
      {Lisp-Entry "XK_KP_Divide" #f 233 12 233 24 ("#xFFAF")}
      {Lisp-Entry "XK_F1" #f 235 12 235 17 ("#xFFBE")}
      {Lisp-Entry "XK_F2" #f 236 12 236 17 ("#xFFBF")}
      {Lisp-Entry "XK_F3" #f 237 12 237 17 ("#xFFC0")}
      {Lisp-Entry "XK_F4" #f 238 12 238 17 ("#xFFC1")}
      {Lisp-Entry "XK_F5" #f 239 12 239 17 ("#xFFC2")}
      {Lisp-Entry "XK_F6" #f 240 12 240 17 ("#xFFC3")}
      {Lisp-Entry "XK_F7" #f 241 12 241 17 ("#xFFC4")}
      {Lisp-Entry "XK_F8" #f 242 12 242 17 ("#xFFC5")}
      {Lisp-Entry "XK_F9" #f 243 12 243 17 ("#xFFC6")}
      {Lisp-Entry "XK_F10" #f 244 12 244 18 ("#xFFC7")}
      {Lisp-Entry "XK_F11" #f 245 12 245 18 ("#xFFC8")}
      {Lisp-Entry "XK_F12" #f 246 12 246 18 ("#xFFC9")}
      {Lisp-Entry "XK_Shift_L" #f 248 12 248 22 ("#xffe1")}
      {Lisp-Entry "XK_Shift_R" #f 249 12 249 22 ("#xffe2")}
      {Lisp-Entry "XK_Control_L" #f 250 12 250 24 ("#xffe3")}
      {Lisp-Entry "XK_Control_R" #f 251 12 251 24 ("#xffe4")}
      {Lisp-Entry "XK_Caps_Lock" #f 252 12 252 24 ("#xffe5")}
      {Lisp-Entry "XK_Shift_Lock" #f 253 12 253 25 ("#xffe6")}
      {Lisp-Entry "XK_Meta_L" #f 254 12 254 21 ("#xffe7")}
      {Lisp-Entry "XK_Meta_R" #f 255 12 255 21 ("#xffe8")}
      {Lisp-Entry "XK_Alt_R" #f 256 12 256 20 ("#xffe9")}
      {Lisp-Entry "XK_Alt_L" #f 257 12 257 20 ("#xffea")}
      {Lisp-Entry "XK_Mode_switch" #f 258 12 258 26 ("#xff7e")}
      {Lisp-Entry "XK_Delete" #f 261 12 261 21 ("#xFFFF")}
      {Lisp-Entry "XK_space" #f 264 12 264 20 ("#x020")}
      {Lisp-Entry "XK_exclam" #f 265 12 265 21 ("#x021")}
      {Lisp-Entry "XK_quotedbl" #f 266 12 266 23 ("#x022")}
      {Lisp-Entry "XK_numbersign" #f 267 12 267 25 ("#x023")}
      {Lisp-Entry "XK_dollar" #f 268 12 268 21 ("#x024")}
      {Lisp-Entry "XK_percent" #f 269 12 269 22 ("#x025")}
      {Lisp-Entry "XK_ampersand" #f 270 12 270 24 ("#x026")}
      {Lisp-Entry "XK_apostrophe" #f 271 12 271 25 ("#x027")}
      {Lisp-Entry "XK_parenleft" #f 272 12 272 24 ("#x028")}
      {Lisp-Entry "XK_parenright" #f 273 12 273 25 ("#x029")}
      {Lisp-Entry "XK_asterisk" #f 274 12 274 23 ("#x02a")}
      {Lisp-Entry "XK_plus" #f 275 12 275 19 ("#x02b")}
      {Lisp-Entry "XK_comma" #f 276 12 276 20 ("#x02c")}
      {Lisp-Entry "XK_minus" #f 277 12 277 20 ("#x02d")}
      {Lisp-Entry "XK_period" #f 278 12 278 21 ("#x02e")}
      {Lisp-Entry "XK_slash" #f 279 12 279 20 ("#x02f")}
      {Lisp-Entry "XK_0" #f 281 12 281 16 ("#x030")}
      {Lisp-Entry "XK_1" #f 282 12 282 16 ("#x031")}
      {Lisp-Entry "XK_2" #f 283 12 283 16 ("#x032")}
      {Lisp-Entry "XK_3" #f 284 12 284 16 ("#x033")}
      {Lisp-Entry "XK_4" #f 285 12 285 16 ("#x034")}
      {Lisp-Entry "XK_5" #f 286 12 286 16 ("#x035")}
      {Lisp-Entry "XK_6" #f 287 12 287 16 ("#x036")}
      {Lisp-Entry "XK_7" #f 288 12 288 16 ("#x037")}
      {Lisp-Entry "XK_8" #f 289 12 289 16 ("#x038")}
      {Lisp-Entry "XK_9" #f 290 12 290 16 ("#x039")}
      {Lisp-Entry "XK_colon" #f 292 12 292 20 ("#x03a")}
      {Lisp-Entry "XK_semicolon" #f 293 12 293 24 ("#x03b")}
      {Lisp-Entry "XK_less" #f 294 12 294 19 ("#x03c")}
      {Lisp-Entry "XK_equal" #f 295 12 295 20 ("#x03d")}
      {Lisp-Entry "XK_greater" #f 296 12 296 22 ("#x03e")}
      {Lisp-Entry "XK_question" #f 297 12 297 23 ("#x03f")}
      {Lisp-Entry "XK_at" #f 298 12 298 17 ("#x040")}
      {Lisp-Entry "XK_A" #f 300 12 300 16 ("#x041")}
      {Lisp-Entry "XK_B" #f 301 12 301 16 ("#x042")}
      {Lisp-Entry "XK_C" #f 302 12 302 16 ("#x043")}
      {Lisp-Entry "XK_D" #f 303 12 303 16 ("#x044")}
      {Lisp-Entry "XK_E" #f 304 12 304 16 ("#x045")}
      {Lisp-Entry "XK_F" #f 305 12 305 16 ("#x046")}
      {Lisp-Entry "XK_G" #f 306 12 306 16 ("#x047")}
      {Lisp-Entry "XK_H" #f 307 12 307 16 ("#x048")}
      {Lisp-Entry "XK_I" #f 308 12 308 16 ("#x049")}
      {Lisp-Entry "XK_J" #f 309 12 309 16 ("#x04a")}
      {Lisp-Entry "XK_K" #f 310 12 310 16 ("#x04b")}
      {Lisp-Entry "XK_L" #f 311 12 311 16 ("#x04c")}
      {Lisp-Entry "XK_M" #f 312 12 312 16 ("#x04d")}
      {Lisp-Entry "XK_N" #f 313 12 313 16 ("#x04e")}
      {Lisp-Entry "XK_O" #f 314 12 314 16 ("#x04f")}
      {Lisp-Entry "XK_P" #f 315 12 315 16 ("#x050")}
      {Lisp-Entry "XK_Q" #f 316 12 316 16 ("#x051")}
      {Lisp-Entry "XK_R" #f 317 12 317 16 ("#x052")}
      {Lisp-Entry "XK_S" #f 318 12 318 16 ("#x053")}
      {Lisp-Entry "XK_T" #f 319 12 319 16 ("#x054")}
      {Lisp-Entry "XK_U" #f 320 12 320 16 ("#x055")}
      {Lisp-Entry "XK_V" #f 321 12 321 16 ("#x056")}
      {Lisp-Entry "XK_W" #f 322 12 322 16 ("#x057")}
      {Lisp-Entry "XK_X" #f 323 12 323 16 ("#x058")}
      {Lisp-Entry "XK_Y" #f 324 12 324 16 ("#x059")}
      {Lisp-Entry "XK_Z" #f 325 12 325 16 ("#x05a")}
      {Lisp-Entry "XK_bracketleft" #f 327 12 327 26 ("#x05b")}
      {Lisp-Entry "XK_backslash" #f 328 12 328 24 ("#x05c")}
      {Lisp-Entry "XK_bracketright" #f 329 12 329 27 ("#x05d")}
      {Lisp-Entry "XK_asciicircum" #f 330 12 330 26 ("#x05e")}
      {Lisp-Entry "XK_underscore" #f 331 12 331 25 ("#x05f")}
      {Lisp-Entry "XK_grave" #f 332 12 332 20 ("#x060")}
      {Lisp-Entry "XK_a" #f 334 12 334 16 ("#x061")}
      {Lisp-Entry "XK_b" #f 335 12 335 16 ("#x062")}
      {Lisp-Entry "XK_c" #f 336 12 336 16 ("#x063")}
      {Lisp-Entry "XK_d" #f 337 12 337 16 ("#x064")}
      {Lisp-Entry "XK_e" #f 338 12 338 16 ("#x065")}
      {Lisp-Entry "XK_f" #f 339 12 339 16 ("#x066")}
      {Lisp-Entry "XK_g" #f 340 12 340 16 ("#x067")}
      {Lisp-Entry "XK_h" #f 341 12 341 16 ("#x068")}
      {Lisp-Entry "XK_i" #f 342 12 342 16 ("#x069")}
      {Lisp-Entry "XK_j" #f 343 12 343 16 ("#x06a")}
      {Lisp-Entry "XK_k" #f 344 12 344 16 ("#x06b")}
      {Lisp-Entry "XK_l" #f 345 12 345 16 ("#x06c")}
      {Lisp-Entry "XK_m" #f 346 12 346 16 ("#x06d")}
      {Lisp-Entry "XK_n" #f 347 12 347 16 ("#x06e")}
      {Lisp-Entry "XK_o" #f 348 12 348 16 ("#x06f")}
      {Lisp-Entry "XK_p" #f 349 12 349 16 ("#x070")}
      {Lisp-Entry "XK_q" #f 350 12 350 16 ("#x071")}
      {Lisp-Entry "XK_r" #f 351 12 351 16 ("#x072")}
      {Lisp-Entry "XK_s" #f 352 12 352 16 ("#x073")}
      {Lisp-Entry "XK_t" #f 353 12 353 16 ("#x074")}
      {Lisp-Entry "XK_u" #f 354 12 354 16 ("#x075")}
      {Lisp-Entry "XK_v" #f 355 12 355 16 ("#x076")}
      {Lisp-Entry "XK_w" #f 356 12 356 16 ("#x077")}
      {Lisp-Entry "XK_x" #f 357 12 357 16 ("#x078")}
      {Lisp-Entry "XK_y" #f 358 12 358 16 ("#x079")}
      {Lisp-Entry "XK_z" #f 359 12 359 16 ("#x07a")}
      {Lisp-Entry "XK_braceleft" #f 361 12 361 24 ("#x07b")}
      {Lisp-Entry "XK_bar" #f 362 12 362 18 ("#x07c")}
      {Lisp-Entry "XK_braceright" #f 363 12 363 25 ("#x07d")}
      {Lisp-Entry "XK_asciitilde" #f 364 12 364 25 ("#x07e")}
      {Lisp-Entry "IsUnmapped" #f 372 12 372 22 ("0")}
      {Lisp-Entry "IsUnviewable" #f 373 12 373 24 ("1")}
      {Lisp-Entry "IsViewable" #f 374 12 374 22 ("2")}
      {Lisp-Entry "NotifyAncestor" #f 382 12 382 26 ("0")}
      {Lisp-Entry "NotifyVirtual" #f 383 12 383 25 ("1")}
      {Lisp-Entry "NotifyInferior" #f 384 12 384 26 ("2")}
      {Lisp-Entry "NotifyNonlinear" #f 385 12 385 27 ("3")}
      {Lisp-Entry "NotifyNonlinearVirtual" #f 386 12 386 34 ("4")}
      {Lisp-Entry "NotifyPointer" #f 387 12 387 25 ("5")}
      {Lisp-Entry "NotifyPointerRoot" #f 388 12 388 29 ("6")}
      {Lisp-Entry "NotifyDetailNone" #f 389 12 389 28 ("7")}
      {Lisp-Entry "RevertToNone" #f 392 12 392 24 ("None")}
      {Lisp-Entry "RevertToPointerRoot" #f 393 12 393 31 ("PointerRoot")}
      {Lisp-Entry "RevertToParent" #f 394 12 394 26 ("2")}
      {Lisp-Entry "XC_X_cursor" #f 402 12 402 23 ("0")}
      {Lisp-Entry "XC_arrow" #f 403 12 403 20 ("2")}
      {Lisp-Entry "XC_crosshair" #f 404 12 404 24 ("34")}
      {Lisp-Entry "XC_hand2" #f 405 12 405 20 ("60")}
      {Lisp-Entry "XC_left_ptr" #f 406 12 406 23 ("68")}
      {Lisp-Entry "XC_sb_h_double_arrow" #f 407 12 407 32 ("108")}
      {Lisp-Entry "XC_sb_v_double_arrow" #f 408 12 408 32 ("116")}
      {Lisp-Entry "XC_watch" #f 409 12 409 20 ("150")}
      {Lisp-Entry "XC_xterm" #f 410 12 410 20 ("152")}
      {Lisp-Entry "PropModeReplace" #f 418 12 418 27 ("0")}
      {Lisp-Entry "generate-x11-atoms" #f 421 13 421 31 ("text/uri-list" "XdndActionCopy" "XdndTypeList" "XdndFinished" "XdndStatus" "XdndDrop" "XdndPosition" "XdndSelection" "XdndLeave" "XdndEnter" "XdndAware" "XA_CLIPBOARD" "_NET_WM_WINDOW_TYPE_NORMAL" "_NET_WM_WINDOW_TYPE_TOOLTIP" "_NET_WM_WINDOW_TYPE_DROPDOWN_MENU" "_NET_WM_WINDOW_TYPE_DIALOG" "_NET_WM_WINDOW_TYPE" "WM_DELETE_WINDOW" "default-x11-display" "XInternAtom" "WM_PROTOCOLS" "set!")}
      {Lisp-Entry "XA_PRIMARY" #f 447 12 447 22 ("1")}
      {Lisp-Entry "XA_ATOM" #f 448 12 448 19 ("4")}
      {Lisp-Entry "XA_STRING" #f 449 12 449 21 ("31")}
      {Lisp-Entry "XA_CLIPBOARD" #f 450 12 450 24 ()}
      {Lisp-Entry "XdndVersion" #f 458 12 458 23 ("5")}
      {Lisp-Entry "XdndAware" #f 460 12 460 21 ()}
      {Lisp-Entry "XdndEnter" #f 461 12 461 21 ()}
      {Lisp-Entry "XdndLeave" #f 462 12 462 21 ()}
      {Lisp-Entry "XdndSelection" #f 463 12 463 25 ()}
      {Lisp-Entry "XdndPosition" #f 464 12 464 24 ()}
      {Lisp-Entry "XdndDrop" #f 465 12 465 20 ()}
      {Lisp-Entry "XdndStatus" #f 466 12 466 22 ()}
      {Lisp-Entry "XdndFinished" #f 467 12 467 24 ()}
      {Lisp-Entry "XdndTypeList" #f 468 12 468 24 ()}
      {Lisp-Entry "XdndActionCopy" #f 469 12 469 26 ()}
      {Lisp-Entry "text/uri-list" #f 476 12 476 25 ()}
      {Lisp-Entry "_NET_WM_WINDOW_TYPE" #f 484 12 484 31 ()}
      {Lisp-Entry "_NET_WM_WINDOW_TYPE_DIALOG" #f 485 12 485 38 ()}
      {Lisp-Entry "_NET_WM_WINDOW_TYPE_DROPDOWN_MENU" #f 486 12 486 45 ()}
      {Lisp-Entry "_NET_WM_WINDOW_TYPE_TOOLTIP" #f 487 12 487 39 ()}
      {Lisp-Entry "_NET_WM_WINDOW_TYPE_NORMAL" #f 488 12 488 38 ()}
      {Lisp-Entry "WM_PROTOCOLS" #f 496 12 496 24 ()}
      {Lisp-Entry "WM_DELETE_WINDOW" #f 497 12 497 28 ()}
      {Lisp-Entry "XRectangle" #f 505 13 505 23 ("height" "width" "ushort" "y" "x" "short")}
      {Lisp-Entry "XWindowAttributes" #f 517 14 517 31 ("screen" "Screen*" "override_redirect" "do_not_propagate_mask" "your_event_mask" "all_event_masks" "long" "map_state" "map_installed" "colormap" "Colormap" "save_under" "Bool" "backing_pixel" "backing_planes" "ulong" "backing_store" "win_gravity" "bit_gravity" "class" "root" "Window" "visual" "Visual*" "depth" "border_width" "height" "width" "y" "x" "int")}
      {Lisp-Entry "XSetWindowAttributes" #f 543 13 543 33 ("cursor" "Cursor" "colormap" "Colormap" "override_redirect" "do_not_propagate_mask" "event_mask" "long" "save_under" "Bool" "backing_pixel" "backing_planes" "backing_store" "win_gravity" "bit_gravity" "int" "border_pixel" "border_pixmap" "background_pixel" "ulong" "background_pixmap" "Pixmap")}
      {Lisp-Entry "XAnyEvent" #f 566 13 566 22 ("window" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XButtonEvent" #f 574 13 574 25 ("same_screen" "button" "state" "uint" "y_root" "x_root" "y" "x" "time" "Time" "subwindow" "root" "window" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XClientMessageEvent" #f 592 13 592 32 ("format" "message_type" "Atom" "window" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XClientMessageEvent-b-ref" #f 602 12 602 37 ("char*" "XClientMessageEvent*" "c-function")}
      {Lisp-Entry "XClientMessageEvent-s-ref" #f 607 12 607 37 ("short*" "XClientMessageEvent*" "c-function")}
      {Lisp-Entry "XClientMessageEvent-l-ref" #f 612 12 612 37 ("long*" "XClientMessageEvent*" "c-function")}
      {Lisp-Entry "XKeyEvent" #f 617 13 617 22 ("same_screen" "keycode" "state" "uint" "y_root" "x_root" "y" "x" "time" "Time" "subwindow" "root" "window" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XMotionEvent" #f 635 13 635 25 ("same_screen" "is_hint" "char" "state" "uint" "y_root" "x_root" "y" "x" "time" "Time" "subwindow" "root" "window" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XFocusChangeEvent" #f 653 13 653 30 ("detail" "mode" "window" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XExposeEvent" #f 663 13 663 25 ("count" "height" "width" "y" "x" "window" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XConfigureEvent" #f 676 13 676 28 ("override_redirect" "above" "border_width" "height" "width" "y" "x" "window" "event" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XSelectionClearEvent" #f 692 13 692 33 ("time" "Time" "selection" "Atom" "window" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XSelectionRequestEvent" #f 702 13 702 35 ("time" "Time" "property" "target" "selection" "Atom" "requestor" "owner" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XSelectionEvent" #f 715 13 715 28 ("time" "Time" "property" "target" "selection" "Atom" "requestor" "Window" "display" "Display*" "send_event" "Bool" "serial" "ulong" "type" "int")}
      {Lisp-Entry "XEvent" #f 727 13 727 19 ("xclient" "XClientMessageEvent" "xselection" "XSelectionEvent" "xselectionrequest" "XSelectionRequestEvent" "xselectionclear" "XSelectionClearEvent" "xconfigure" "XConfigureEvent" "xexpose" "XExposeEvent" "xfocus" "XFocusChangeEvent" "xmotion" "XMotionEvent" "xbutton" "XButtonEvent" "xkey" "XKeyEvent" "xany" "XAnyEvent" "type" "int")}
      {Lisp-Entry "XErrorEvent" #f 742 13 742 24 ("resourceid" "XID" "minor_code" "request_code" "error_code" "byte" "serial" "ulong" "display" "Display*" "type" "int")}
      {Lisp-Entry "XERRORPROC" #f 752 8 752 18 ("int" "XErrorEvent*" "Display*" "function")}
      {Lisp-Entry "XGCValues" #f 756 13 756 22 ("function" "int")}
      {Lisp-Entry "XClearArea" #f 765 26 765 36 ()}
      {Lisp-Entry "XCopyArea" #f 766 26 766 35 ()}
      {Lisp-Entry "XOpenDisplay" #f 767 26 767 38 ()}
      {Lisp-Entry "XCloseDisplay" #f 768 26 768 39 ()}
      {Lisp-Entry "XDefaultScreen" #f 769 26 769 40 ()}
      {Lisp-Entry "XScreenOfDisplay" #f 770 26 770 42 ()}
      {Lisp-Entry "XRootWindow" #f 771 26 771 37 ()}
      {Lisp-Entry "XBlackPixel" #f 772 26 772 37 ()}
      {Lisp-Entry "XWhitePixel" #f 773 26 773 37 ()}
      {Lisp-Entry "XCreateSimpleWindow" #f 774 26 774 45 ()}
      {Lisp-Entry "XMapWindow" #f 775 26 775 36 ()}
      {Lisp-Entry "XFlush" #f 776 26 776 32 ()}
      {Lisp-Entry "XDefaultVisual" #f 777 26 777 40 ()}
      {Lisp-Entry "XNextEvent" #f 778 26 778 36 ()}
      {Lisp-Entry "XSelectInput" #f 779 26 779 38 ()}
      {Lisp-Entry "XDestroyWindow" #f 780 26 780 40 ()}
      {Lisp-Entry "XUnmapWindow" #f 781 26 781 38 ()}
      {Lisp-Entry "XCreateWindow" #f 782 26 782 39 ()}
      {Lisp-Entry "XGetWindowAttributes" #f 783 26 783 46 ()}
      {Lisp-Entry "XMoveWindow" #f 784 26 784 37 ()}
      {Lisp-Entry "XResizeWindow" #f 785 26 785 39 ()}
      {Lisp-Entry "XKeysymToKeycode" #f 786 26 786 42 ()}
      {Lisp-Entry "XKeycodeToKeysym" #f 787 26 787 42 ()}
      {Lisp-Entry "XReparentWindow" #f 788 26 788 41 ()}
      {Lisp-Entry "XSetInputFocus" #f 789 26 789 40 ()}
      {Lisp-Entry "XPending" #f 790 26 790 34 ()}
      {Lisp-Entry "XRaiseWindow" #f 791 26 791 38 ()}
      {Lisp-Entry "XDestroyWindow" #f 792 26 792 40 ()}
      {Lisp-Entry "XSync" #f 793 26 793 31 ()}
      {Lisp-Entry "XSynchronize" #f 794 26 794 38 ()}
      {Lisp-Entry "XBell" #f 795 26 795 31 ()}
      {Lisp-Entry "XWhitePixel" #f 796 26 796 37 ()}
      {Lisp-Entry "XMoveResizeWindow" #f 797 26 797 43 ()}
      {Lisp-Entry "XLowerWindow" #f 798 26 798 38 ()}
      {Lisp-Entry "XSetErrorHandler" #f 799 26 799 42 ()}
      {Lisp-Entry "XInternAtom" #f 800 26 800 37 ()}
      {Lisp-Entry "getpid" #f 801 26 801 32 ()}
      {Lisp-Entry "ConnectionNumber" #f 802 26 802 42 ()}
      {Lisp-Entry "XCheckTypedEvent" #f 803 26 803 42 ()}
      {Lisp-Entry "XCreateFontCursor" #f 804 26 804 43 ()}
      {Lisp-Entry "XDefineCursor" #f 805 26 805 39 ()}
      {Lisp-Entry "XSetSelectionOwner" #f 806 26 806 44 ()}
      {Lisp-Entry "XChangeProperty" #f 807 26 807 41 ()}
      {Lisp-Entry "XGetSelectionOwner" #f 808 26 808 44 ()}
      {Lisp-Entry "XConvertSelection" #f 809 26 809 43 ()}
      {Lisp-Entry "XSendEvent" #f 810 26 810 36 ()}
      {Lisp-Entry "XCreateGC" #f 811 26 811 35 ()}
      {Lisp-Entry "XFreeGC" #f 812 26 812 33 ()}
      {Lisp-Entry "XSetClipRectangles" #f 813 26 813 44 ()}
      {Lisp-Entry "ChangeProperty" #f 822 13 822 27 ("uint8*-free" "XChangeProperty" "uint32*->uint8*" "u32vector->uint32*" "pointer" "let" "u8vector->uint8*" "u32vector-length" "u8vector-length" "case" "nelements" "error" "else" "32" "u32vector?" "8" "u8vector?" "cond" "format" "let*" "data" "mode" "type" "property" "window" "display")}
      {Lisp-Entry "rgb-pixel" #f 838 12 838 21 ("ulong" "short" "Display*" "c-function")}
      {Lisp-Entry "select" #f 848 12 848 18 ("long" "fd_set*" "int" "c-function")}
      {Lisp-Entry "setup-fdset" #f 856 13 856 24 ("fd" "function" "for-each" "set" "void" "int" "set-fdset" "fd_set*" "c-function" "alloc-fdset" "let" "fds")}
      {Lisp-Entry "ProcessClientMessage" #f 870 12 870 32 ("Bool" "XClientMessageEvent*" "Display*" "c-function")}
      {Lisp-Entry "XWindowEvent" #f 879 13 879 25 ("void" "XEvent*" "int" "Window" "Display*" "c-function" "func" "let" "event" "mask" "window" "display")}
      {Lisp-Entry "XTranslateCoordinates" #f 885 13 885 34 ("1" "0" "int*-ref" "values" "int*" "int" "Window" "Display*" "c-function" "pt" "let" "y" "x" "dst_win" "src_win" "disp")}
      {Lisp-Entry "XNumberOfChildren" #f 894 12 894 29 ("uint" "Window" "Display*" "c-function")}
      {Lisp-Entry "XGetChildHandle" #f 906 12 906 27 ("int" "Window" "Display*" "c-function")}
      {Lisp-Entry "XButtonDown?" #f 919 12 919 24 ("Bool" "Display*" "c-function")}
      {Lisp-Entry "XKeyDown?" #f 930 12 930 21 ("Bool" "int" "Display*" "c-function")}
      {Lisp-Entry "XMousePosition" #f 937 13 937 27 ("values" "int*-free" "1" "y" "0" "int*-ref" "x" "int*" "Window" "Display*" "c-function" "coords" "let" "win" "disp")}
      {Lisp-Entry "XMouseWindow" #f 951 12 951 24 ("Window" "Display*" "c-function")}
      {Lisp-Entry "XInvalidateRect" #f 960 12 960 27 ("void" "int" "Window" "Display*" "c-function")}
      {Lisp-Entry "XGetInputFocus" #f 973 13 973 27 ("1" "0" "int*-ref" "values" "int*" "Display*" "c-function" "ret" "let" "display")}
      {Lisp-Entry "XGetWindowProperty" #f 983 13 983 31 ("values" "uint8**-free" "int*-free" "ulong*-free" "bytes_after_return" "actual_type_return" "int*-ref" "actual_format_return" "uint8**-ref" "prop_return" "0" "ulong*-ref" "nitems_return" "int" "uint8**" "ulong*" "int*" "Atom*" "Bool" "long" "Atom" "Window" "Display*" "c-function" "func" "uint8**-alloc" "prop_return-pt" "bytes_after_return-pt" "nitems_return-pt" "int*-alloc" "actual_format_return-pt" "1" "ulong*-alloc" "actual_type_return-pt" "let" "req_type" "delete" "long_length" "long_offset" "property" "window" "display")}
      {Lisp-Entry "GetPropertyString" #f 1004 12 1004 29 ("char-string" "Atom" "Window" "Display*" "c-function")}
      {Lisp-Entry "XRetrieveSelection" #f 1015 13 1015 31 ("XEvent-free" "100000" "XGetWindowProperty" "=" "result" "XEvent-xselection-ref" "XSelectionEvent-property-ref" "property" "let*" "SelectionNotify" "XCheckTypedEvent" "1" "+" "not" "1000000" "<" "and" "if" "return" "0" "i" "loop" "XEvent-make" "ev" "let" "None" "XConvertSelection" "timestamp" "target" "selection" "toplevel" "display")}
      {Lisp-Entry "XGetClipboardString" #f 1030 13 1030 32 ("XEvent-free" "result" "XEvent-xselection-ref" "XSelectionEvent-property-ref" "property" "let*" "SelectionNotify" "XCheckTypedEvent" "1" "+" "not" "1000000" "<" "and" "return" "0" "i" "loop" "XEvent-make" "ev" "CurrentTime" "None" "XA_STRING" "XConvertSelection" "XA_PRIMARY" "GetPropertyString" "=" "if" "XA_CLIPBOARD" "XGetSelectionOwner" "owner" "let" "toplevel" "display")}
      {Lisp-Entry "XSetClipboardString" #f 1048 13 1048 32 ("CurrentTime" "XA_CLIPBOARD" "XSetSelectionOwner" "string-length" "char-string->uint8*" "PropModeReplace" "8" "XA_STRING" "XA_PRIMARY" "XChangeProperty" "string" "window" "display")}
      {Lisp-Entry "XSendClipboardString" #f 1053 13 1053 33 ("XEvent-free" "0" "XSendEvent" "CurrentTime" "XSelectionEvent-time-set!" "XSelectionEvent-property-set!" "XSelectionEvent-target-set!" "XSelectionEvent-selection-set!" "XSelectionEvent-requestor-set!" "XSelectionEvent-display-set!" "XSelectionEvent-send_event-set!" "SelectionNotify" "XSelectionEvent-type-set!" "XEvent-xselection-ref" "xselection" "XEvent-make" "ev" "let*" "string-length" "char-string->uint8*" "PropModeReplace" "8" "XChangeProperty" "XA_PRIMARY" "GetPropertyString" "string" "let" "property" "target" "selection" "requestor" "toplevel" "display")}
      {Lisp-Entry "XSetWMName" #f 1070 12 1070 22 ("void" "char-string" "Window" "Display*" "c-function")}
      {Lisp-Entry "XGetErrorText" #f 1077 12 1077 25 ("char-string" "int" "Display*" "c-function")}
      {Lisp-Entry "XSetWMProtocols" #f 1084 12 1084 27 ("void" "Atom" "Window" "Display*" "c-function")}
      {Lisp-Entry "x11-error-handler" #f 1094 12 1094 29 ()}
      {Lisp-Entry "x11-set-error-handler" #f 1097 20 1097 41 ("x11-call-error-handler" "XSetErrorHandler" "x11-error-handler" "set!" "proc")}
      {Lisp-Entry "x11-call-error-handler" #f 1101 15 1101 37 ("error" "display" "x11-error-handler" "int" "XErrorEvent*" "Display*")}
      {Lisp-Entry "synchronize-x11" #f 1105 20 1105 35 ("default-x11-display" "XSynchronize" "flag")}
      {Lisp-Entry "default-x11-display" #f 1114 12 1114 31 ()}
      {Lisp-Entry "get-default-x11-display" #f 1117 20 1117 43 ("default-x11-display")}
      {Lisp-Entry "set-default-x11-display" #f 1120 20 1120 43 ("default-x11-display" "set!" "display")}
      {Lisp-Entry "relinquish-process" #f 1129 20 1129 38 ()}
      {Lisp-Entry "GetCurrentProcessId" #f 1133 20 1133 39 ("getpid")}
      {Lisp-Entry "system-message" #f 1142 13 1142 27 ("pretty-print" "rest" "text")}
      {Lisp-Entry "Cursors" #f 1151 19 1151 26 ()}
      {Lisp-Entry "x11-create-cursors" #f 1155 13 1155 31 (":spy" ":zoom-out" ":zoom-in" ":zoom" ":closed-hand" ":opened-hand" "Cursor-Resource" "new" ":move" "IDC_NO" ":no" "IDC_SIZEWE" ":west-east" "IDC_SIZEALL" ":all" "XC_arrow" ":left-arrow" "XC_crosshair" ":cross" "XC_hand2" ":finger" "XC_xterm" ":ibeam" "XC_sb_v_double_arrow" ":horizontal-splitter" "XC_sb_h_double_arrow" ":vertical-splitter" "XC_watch" ":wait" "XC_left_ptr" "default-x11-display" "XCreateFontCursor" ":arrow" "list" "Cursors" "set!")}}})
"_xml"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "_xml.jazz"} 1226584789
    {Lisp-Entry "jazz.xml" #f 37 9 37 17 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "xml" "_xml.jazz"} 1226584780
    {Lisp-Entry "jazz.language.xml" #f 37 9 37 26 ("jazz")}})
"a"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "a.jazz"} 1226584790
    {Lisp-Entry "test.a" #f 0 9 0 15 ("jazz")
      {Lisp-Entry "f" #f 1 15 1 16 ("car" "x")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "performance" "a.scm"} 1226584790
    {Lisp-Entry "test.performance.a" #f 0 8 0 26 ("safe" "not" "standard-bindings" "block" "declare")
      {Lisp-Entry "f-separate" #f 8 9 8 19 ("1" "%%fx-" "g-separate" "0" "%%fx=" "if" "n" "s")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "test" "a.scm"} 1226584774
    {Lisp-Entry "core.test.a" #f 0 9 0 20 ("toto" "newline" "3" "/" "-" "2" "*" "1" "+" "display" "jazz")}})
"aliases"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "aliases.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.aliases" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "Aliases-Preferences" #f 52 7 52 26 ("title:" "Preferences")
        {Lisp-Entry "can-rename-component?" #f 64 11 64 32 ()}
        {Lisp-Entry "can-delete-component?" #f 68 11 68 32 ()}
        {Lisp-Entry "can-move-component?" #f 72 11 72 30 ()}
        {Lisp-Entry "can-copy-component?" #f 76 11 76 30 ()}
        {Lisp-Entry "get-addable-classes" #f 80 11 80 30 ("Alias-Configuration" "list")}
        {Lisp-Entry "get-addable-details" #f 85 11 85 30 ("300" "directory" "150" "alias")}}
      {Lisp-Entry "Alias-Configuration" #f 94 7 94 26 ("Bitmap-Resource" "icon:" "Preferences")
        {Lisp-Entry "alias" #f 97 12 97 17 ("generate")}
        {Lisp-Entry "directory" #f 98 12 98 21 ("generate")}
        {Lisp-Entry "get-domain" #f 110 16 110 26 ("nextmethod" "else" "field-name" "case" "property")}
        {Lisp-Entry "get-class-presentation" #f 120 16 120 38 ()}
        {Lisp-Entry "property-presentation" #f 124 16 124 37 ("nextmethod" "else" "directory" "alias" "field-name" "case" "property")}
        {Lisp-Entry "presentation-property?" #f 131 11 131 33 ("alias" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 135 11 135 27 ("alias")}
        {Lisp-Entry "set-presentation" #f 139 11 139 27 ("string->symbol" ":alias" "self" "set-property" "presentation" "designer")}
        {Lisp-Entry "get-row-instance" #f 143 11 143 27 ("nextmethod" "else" "Directory-Row" "new" "directory" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 149 11 149 37 ("directory" "alias")}}}})
"all"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "product" "all.scm"} 1226584783
    {Lisp-Entry "jazz.product.all" #f 37 8 37 24 ("jazz.build-all" "build:" "all" "'all" "jazz.register-product")
      {Lisp-Entry "jazz.All-Modules" #f 45 8 45 24 ()}
      {Lisp-Entry "jazz.build-all" #f 133 9 133 23 ("jazz.All-Modules" "compile" "for-each")
        {Lisp-Entry "compile" #f 134 11 134 18 ("jazz.compile-module" "phase" "declaration" "lambda" "jazz.for-each-submodule" "module-name")}}
      {Lisp-Entry "jazz.load-all" #f 147 9 147 22 ("jazz.All-Modules" "load" "for-each" "core.module.build" "'core.module.build" "core.library" "'core.library" "jazz.load-module")
        {Lisp-Entry "load" #f 148 11 148 15 ("jazz.load-module" "phase" "declaration" "lambda" "jazz.for-each-submodule" "module-name")}}}})
"attributes"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "attributes.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.attributes" #f 37 9 37 39 ("scheme")
      {Lisp-Entry "attributes" #f 81 8 81 18 ("set-property" ",setter" ",getter" "public" "setter" "format" "string->symbol" "getter" "let*" "set!" "'set!" ",value" "set-value" "nextmethod" "else" "list" "case" ",property" "get-value" ",init" ",name" "slot" "eq?" "if" "unspecified" "not-found:" "initialize" "'initialize" "getf" "init" "rest" "specifier" "parse-specifier" "name" "lambda" "append" "symbol->keyword" "map" "node-properties" "method" "begin" "value" "generate-symbol" "property" "cdr" "properties" "car" "inherited" "let" "form")
        {Lisp-Entry "unspecified" #f 82 10 82 21 ("cons")}
        {Lisp-Entry "symbol->keyword" #f 85 11 85 26 ("symbol->string" "string->keyword" "symbol")}}}})
"autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "autoload.jazz"} 1226584790
    {Lisp-Entry "test.autoload" #f 0 9 0 22 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "xml" "autoload.jazz"} 1226584789
    {Lisp-Entry "jazz.xml.autoload" #f 37 9 37 26 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "autoload.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.autoload" #f 37 9 37 31 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "autoload.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.autoload" #f 37 9 37 25 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "process" "autoload.jazz"} 1226584785
    {Lisp-Entry "jazz.system.process.autoload" #f 37 9 37 37 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "application" "autoload.jazz"} 1226584785
    {Lisp-Entry "jazz.system.application.autoload" #f 37 9 37 41 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "schema" "autoload.jazz"} 1226584784
    {Lisp-Entry "jazz.schema.autoload" #f 37 9 37 29 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "recorder" "autoload.jazz"} 1226584784
    {Lisp-Entry "jazz.recorder.autoload" #f 37 9 37 31 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "project" "autoload.jazz"} 1226584783
    {Lisp-Entry "jazz.project.autoload" #f 37 9 37 30 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "profile" "autoload.jazz"} 1226584783
    {Lisp-Entry "jazz.profile.autoload" #f 37 9 37 30 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "network" "autoload.jazz"} 1226584783
    {Lisp-Entry "jazz.network.autoload" #f 37 9 37 30 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "media" "autoload.jazz"} 1226584783
    {Lisp-Entry "jazz.media.autoload" #f 37 9 37 28 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "license" "autoload.jazz"} 1226584782
    {Lisp-Entry "jazz.license.autoload" #f 37 9 37 30 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "library" "autoload.jazz"} 1227124458
    {Lisp-Entry "jazz.library.autoload" #f 37 9 37 30 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.language.java.autoload" #f 37 9 37 36 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "xml" "autoload.jazz"} 1226584780
    {Lisp-Entry "jazz.language.xml.autoload" #f 37 9 37 35 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "sql" "autoload.jazz"} 1226584780
    {Lisp-Entry "jazz.language.sql.autoload" #f 37 9 37 35 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "scheme" "autoload.jazz"} 1226584780
    {Lisp-Entry "jazz.language.scheme.autoload" #f 37 9 37 38 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "python" "autoload.jazz"} 1226584779
    {Lisp-Entry "jazz.language.python.autoload" #f 37 9 37 38 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "properties" "autoload.jazz"} 1226584779
    {Lisp-Entry "jazz.language.properties.autoload" #f 37 9 37 42 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "prop" "autoload.jazz"} 1226584779
    {Lisp-Entry "jazz.language.prop.autoload" #f 37 9 37 36 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lua" "autoload.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lua.autoload" #f 37 9 37 35 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "lisp" "autoload.jazz"} 1226584779
    {Lisp-Entry "jazz.language.lisp.autoload" #f 37 9 37 36 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jml" "autoload.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jml.autoload" #f 37 9 37 35 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "jazz" "autoload.jazz"} 1226584779
    {Lisp-Entry "jazz.language.jazz.autoload" #f 37 9 37 36 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "javascript" "autoload.jazz"} 1226584779
    {Lisp-Entry "jazz.language.javascript.autoload" #f 37 9 37 42 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "html" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.language.html.autoload" #f 37 9 37 36 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "diff" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.language.diff.autoload" #f 37 9 37 36 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "css" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.language.css.autoload" #f 37 9 37 35 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "csharp" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.language.csharp.autoload" #f 37 9 37 38 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "commonlisp" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.language.commonlisp.autoload" #f 37 9 37 42 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "clike" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.language.clike.autoload" #f 37 9 37 37 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "c" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.language.c.autoload" #f 37 9 37 33 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm.autoload" #f 37 9 37 26 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jml" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.jml.autoload" #f 37 9 37 26 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ide" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.ide.autoload" #f 37 9 37 26 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "groupware" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.groupware.autoload" #f 37 9 37 32 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "doc" "autoload.jazz"} 1226584778
    {Lisp-Entry "jazz.doc.autoload" #f 37 9 37 26 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "designer" "autoload.jazz"} 1226584775
    {Lisp-Entry "jazz.designer.autoload" #f 37 9 37 31 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "depot" "autoload.jazz"} 1226584775
    {Lisp-Entry "jazz.depot.autoload" #f 37 9 37 28 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "autoload.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.autoload" #f 37 9 37 31 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debuggers" "jazz" "autoload.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debuggers.jazz.autoload" #f 37 9 37 46 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debuggers" "gambit" "autoload.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debuggers.gambit.autoload" #f 37 9 37 48 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "autoload.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.autoload" #f 37 9 37 31 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "autoload.jazz"} 1226584774
    {Lisp-Entry "jazz.database.autoload" #f 37 9 37 31 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "sqlserver" "autoload.jazz"} 1226584775
    {Lisp-Entry "jazz.database.providers.sqlserver.autoload" #f 37 9 37 51 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "oracle" "autoload.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.oracle.autoload" #f 37 9 37 48 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "mysql" "autoload.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.mysql.autoload" #f 37 9 37 47 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "jdbc" "autoload.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.jdbc.autoload" #f 37 9 37 46 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "ado" "autoload.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.ado.autoload" #f 37 9 37 45 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "providers" "access" "autoload.jazz"} 1226584774
    {Lisp-Entry "jazz.database.providers.access.autoload" #f 37 9 37 48 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "console" "autoload.jazz"} 1226584774
    {Lisp-Entry "jazz.console.autoload" #f 37 9 37 30 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "catalog" "autoload.jazz"} 1226584774
    {Lisp-Entry "jazz.catalog.autoload" #f 37 9 37 30 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "builder" "autoload.jazz"} 1226584774
    {Lisp-Entry "jazz.builder.autoload" #f 37 9 37 30 ("jazz")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "library" "runtime" "autoload.scm"} 1226584774
    {Lisp-Entry "core.library.runtime.autoload" #f 41 8 41 37 ()
      {Lisp-Entry "jazz.Autoloads" #f 44 8 44 22 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-autoloads" #f 48 9 48 27 ("jazz.Autoloads")}
      {Lisp-Entry "jazz.get-autoload" #f 52 9 52 26 ("jazz.Autoloads" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-autoload" #f 56 9 56 26 ("%%cons" "jazz.Autoloads" "%%table-set!" "loader" "module-name" "name")}
      {Lisp-Entry "jazz.require-autoload" #f 60 9 60 30 ("jazz.error" "jazz.get-autoload" "or" "name")}
      {Lisp-Entry "jazz.register-autoload" #f 65 9 65 31 ("jazz.register-package-autoload" "jazz.requested-module-resource" "%%resource-package" "package" "jazz.error" "jazz.set-autoload" "%%car" "%%eq?" "%%not" "or" "if" "jazz.get-autoload" "actual" "let" "loader" "module-name" "name")}
      {Lisp-Entry "jazz.autoload" #f 74 9 74 22 ("%%cdr" "jazz.require-autoload" "autoload-info" "let" "name")}
      {Lisp-Entry "jazz.autoreload" #f 79 9 79 24 ("%%cdr" "%%car" "jazz.reload-module" "jazz.require-autoload" "autoload-info" "let" "name")}}})
"b"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "b.jazz"} 1226584790
    {Lisp-Entry "test.b" #f 0 9 0 15 ("jazz")
      {Lisp-Entry "g" #f 5 9 5 10 ("2")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "performance" "b.scm"} 1226584790
    {Lisp-Entry "test.performance.b" #f 0 8 0 26 ("safe" "not" "standard-bindings" "block" "declare")
      {Lisp-Entry "g-separate" #f 8 9 8 19 ("1" "%%fx-" "f-separate" "0" "%%fx=" "if" "n" "s")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "test" "b.scm"} 1226584774
    {Lisp-Entry "core.test.b" #f 0 9 0 20 ("test")
      {Lisp-Entry "+" #f 6 8 6 9 ()}
      {Lisp-Entry "*" #f 7 8 7 9 ()}}})
"bind"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.bind" #f 38 9 38 33 ("scheme")
      {Lisp-Entry "bind" #f 56 9 56 13 ("expand-bind-car" "begin" "tree-value" "lambda" "with-expression-value" "sourcify-if" "cdr" "body" "cddr" "car" "tree" "source-code" "cadr" "desourcify" "bindings" "let" "form-src")}
      {Lisp-Entry "expand-bind-car" #f 68 9 68 24 ("expand-bind-car" ",car-symbol" "generate-symbol" "car-symbol" "pair?" "expand-bind-cdr" ",tree" ",specifier" ",car-binding" "if" "binding-specifier" "specifier" "symbol?" "cond" "cdr" "cdr-binding" "car" "car-binding" "let" "body" "tree" "bindings")}
      {Lisp-Entry "expand-bind-cdr" #f 85 9 85 24 ("expand-bind-car" ",cdr-symbol" "generate-symbol" "cdr-symbol" "pair?" ",@body" ",tree" "cdr" ",cdr-binding" "let" "symbol?" "null?" "cond" "body" "tree" "cdr-binding")}}})
"bind-keywords"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind-keywords.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.bind-keywords" #f 38 9 38 42 ("scheme")
      {Lisp-Entry "bind-keywords" #f 54 9 54 22 ("error" "not-null?" ",@body" "unbox-list" "symbol?" "proper-list" ",default" "symbol->string" "string->keyword" "find-keyword" ",specifier" ",variable" "caddr" "if" "default" "binding-specifier" "specifier" "variable" "binding" "lambda" "map" "let*" ",rest" "box-list" ",box" "sourcify-if" "last-tail" "oth" "new-queue" "bnd" "generate-symbol" "box" "cdr" "body" "cddr" "car" "rest" "cadr" "source-code" "bindings" "let" "form-src")}}})
"bind-optionals"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "bind-optionals.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.bind-optionals" #f 38 9 38 43 ("scheme")
      {Lisp-Entry "bind-optionals" #f 61 9 61 23 (",@body" "error" "not-null?" "proper-list" ",value" ",specifier" ",variable" "set!" ",prog" ",default" "null?" "value" "caddr" "if" "default" "binding-specifier" "specifier" "variable" "binding" "lambda" "map" "let*" ",rest" ",scan" "sourcify-if" "prog" "generate-symbol" "scan" "cdr" "body" "cddr" "car" "rest" "cadr" "source-code" "bindings" "let" "form-src")}}})
"boolean"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "boolean.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.boolean" #f 37 8 37 33 ()
      {Lisp-Entry "jazz.boolean" #f 40 9 40 21 ("%%boolean" "expr")}
      {Lisp-Entry "jazz.not-null?" #f 44 9 44 23 ("%%not-null?" "expr")}}})
"boot"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "boot.scm"} 1226584783
    {Lisp-Entry "load-path" #f 56 8 56 17 ()}
    {Lisp-Entry "copass-s-files" #f 59 8 59 22 ("list")}
    {Lisp-Entry "copass-s-runtime-files" #f 63 8 63 30 ("list")}
    {Lisp-Entry "copass-dual-runtime-files" #f 67 8 67 33 ("list")}
    {Lisp-Entry "copass-c-runtime-files" #f 71 8 71 30 ("list")}
    {Lisp-Entry "c-lib-mapping" #f 75 8 75 21 ()}
    {Lisp-Entry "c-load" #f 85 9 85 15 ("string-append" "debug-load" "file-name")}
    {Lisp-Entry "s-load" #f 89 9 89 15 ("debug-load" "s" "'s" "copass" "set!" "file-name")}
    {Lisp-Entry "debug-load" #f 94 9 94 19 ("load" "newline" "string-append" "display" "load-path" "current-directory" "file")}
    {Lisp-Entry "debug-compile" #f 106 9 106 22 ("lib" "map" "apply" "shell-command" "link-flat" "begin" "error" "s" "'s" "compile-file-to-c" "c" "'c" "copass" "set!" "lambda" "dynamic-wind" "not" "outfile" "linkfile" "cfile" "list" "linklist" "cdr" "if" "c-lib-mapping" "assoc" "found" "libs" "let" "newline" "string-append" "display" "load-path" "current-directory" "suffix" "base-name")}
    {Lisp-Entry "c-expand" #f 136 9 136 17 ("s" "'s" "expansion" "compile-file" "c" "'c" "copass" "set!" "lambda" "dynamic-wind" "load-path" "current-directory" "file-name")}
    {Lisp-Entry "s-expand" #f 143 9 143 17 ("expansion" "compile-file" "s" "'s" "copass" "set!" "lambda" "load-path" "current-directory" "file-name")}
    {Lisp-Entry "cobuild-load" #f 154 9 154 21 ("copass-c-runtime-files" "copass-dual-runtime-files" "s-load" "c-load" "debug-compile" "file" "lambda" "copass-s-runtime-files" "copass-s-files" "debug-load" "for-each" "load-path" "current-directory")}
    {Lisp-Entry "co-load" #f 167 9 167 16 ("copass-c-runtime-files" "copass-dual-runtime-files" "s-load" "c-load" "file" "lambda" "copass-s-runtime-files" "copass-s-files" "debug-load" "for-each" "load-path" "current-directory")}
    {Lisp-Entry "co-reload" #f 178 9 178 18 ("copass-dual-runtime-files" "s-load" "copass-s-runtime-files" "copass-s-files" "debug-load" "for-each" "load-path" "current-directory")}
    {Lisp-Entry "clean" #f 185 9 185 14 ("shell-command" "load-path" "current-directory")}
    {Lisp-Entry "aaz" #f 196 9 196 12 ("load" "clean")}
    {Lisp-Entry "aa0" #f 202 9 202 12 ("cobuild-load")}
    {Lisp-Entry "aal" #f 206 9 206 12 ("co-load")}
    {Lisp-Entry "aa" #f 210 9 210 11 ("co-reload")}
    {Lisp-Entry "aa-c" #f 214 9 214 13 ("c" "'c" "copass" "set!")}
    {Lisp-Entry "aa-s" #f 218 9 218 13 ("s" "'s" "copass" "set!")}
    {Lisp-Entry "aat" #f 222 9 222 12 ("load")}
    {Lisp-Entry "aaf" #f 226 8 226 11 ()}
    {Lisp-Entry "aas" #f 227 9 227 12 ("s-load" "3" "c-load" "2" "aaf" "debug-compile" "1" "case" "n")}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "kernel" "boot.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.kernel.boot" #f 38 9 38 33 ("scheme")
      {Lisp-Entry "format" #f 52 8 52 19 ()}
      {Lisp-Entry "last" #f 60 8 60 17 ()}
      {Lisp-Entry "butlast" #f 61 8 61 20 ()}
      {Lisp-Entry "last-tail" #f 62 8 62 22 ()}
      {Lisp-Entry "getprop" #f 63 8 63 20 ()}
      {Lisp-Entry "getf" #f 64 8 64 17 ()}
      {Lisp-Entry "->string" #f 72 8 72 21 ()}}})
"c"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "test" "c.scm"} 1226584774
    {Lisp-Entry "core.test.c" #f 0 9 0 20 ("test")
      {Lisp-Entry "*" #f 2 8 2 9 ()}}})
"cairo-carbon"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "cairo" "cairo-carbon.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.cairo.cairo-carbon" #f 37 9 37 41 ("uint" "CGContextRef" "jazz")
      {Lisp-Entry "cairo_surface_t" #f 48 8 48 23 ("native")}
      {Lisp-Entry "cairo_surface_t*" #f 49 8 49 24 ("cairo_surface_t*" "cairo_surface_t" "pointer")}
      {Lisp-Entry "cairo_quartz_surface_create_for_cg_context" #f 52 30 52 72 ()}}})
"cairo-freetype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "cairo" "cairo-freetype.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.cairo.cairo-freetype" #f 37 9 37 43 ("cairo_font_face_t*" "jazz")
      {Lisp-Entry "cairo_font_face_t" #f 47 8 47 25 ("native")}
      {Lisp-Entry "cairo_font_face_t*" #f 48 8 48 26 ("cairo_font_face_t*" "cairo_font_face_t" "pointer")}
      {Lisp-Entry "cairo_ft_font_face_create_for_ft_face" #f 51 12 51 49 ("cairo_font_face_t*" "int" "FT_Face*" "c-function")}
      {Lisp-Entry "cairo_glyph_index" #f 55 13 55 30 ("uint" "ulong" "FT_Face*" "c-function" "char" "surface" "font")}
      {Lisp-Entry "cairo_font_face_destroy" #f 60 32 60 55 ()}}})
"cairo-logfont"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "cairo" "cairo-logfont.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.cairo.cairo-logfont" #f 37 9 37 42 ("cairo_font_face_t*" "LOGFONTW*" "jazz")
      {Lisp-Entry "void" #f 48 8 48 12 ("void" "native")}
      {Lisp-Entry "cairo_font_face_t" #f 50 8 50 25 ("native")}
      {Lisp-Entry "cairo_font_face_t*" #f 51 8 51 26 ("cairo_font_face_t*" "cairo_font_face_t" "pointer")}
      {Lisp-Entry "DC" #f 54 12 54 14 ()}
      {Lisp-Entry "cairo_glyph_index" #f 57 13 57 30 ("GetGlyphIndex" "SelectObject" "NULL" "CreateCompatibleDC" "set!" "DC" "unless" "char" "surface" "font")}
      {Lisp-Entry "cairo_glyph_index" #f 65 13 65 30 ("0" "<" "if" "29" "-" "let" "char" "surface" "font")}
      {Lisp-Entry "cairo_win32_font_face_create_for_logfontw" #f 77 32 77 73 ()}
      {Lisp-Entry "cairo_font_face_destroy" #f 78 32 78 55 ()}}})
"cairo-windows"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "cairo" "cairo-windows.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.cairo.cairo-windows" #f 37 9 37 42 ("cairo_surface_t*" "HDC" "jazz")
      {Lisp-Entry "cairo_surface_t" #f 47 8 47 23 ("native")}
      {Lisp-Entry "cairo_surface_t*" #f 48 8 48 24 ("cairo_surface_t*" "cairo_surface_t" "pointer")}
      {Lisp-Entry "cairo_win32_surface_create" #f 56 32 56 58 ()}
      {Lisp-Entry "cairo_win32_surface_get_dc" #f 57 32 57 58 ()}
      {Lisp-Entry "cairo_win32_printing_surface_create" #f 58 32 58 67 ()}}})
"cairo-x11"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "cairo" "cairo-x11.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.cairo.cairo-x11" #f 37 9 37 38 ("int" "Visual*" "Drawable" "Display*" "jazz")
      {Lisp-Entry "cairo_surface_t" #f 48 8 48 23 ("native")}
      {Lisp-Entry "cairo_surface_t*" #f 49 8 49 24 ("cairo_surface_t*" "cairo_surface_t" "pointer")}
      {Lisp-Entry "cairo_xlib_surface_create" #f 57 32 57 57 ()}}})
"carbon"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "carbon.jazz"} 1226584790
    {Lisp-Entry "test.carbon" #f 0 9 0 20 ("jazz")
      {Lisp-Entry "test" #f 8 13 8 17 ("process-window-messages" "set-visible?" "Window" "new" "window" "let*")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "utilities" "platform" "carbon.jazz"} 1226584789
    {Lisp-Entry "jazz.utilities.platform.carbon" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "bell" #f 43 20 43 24 ("bell" "'bell" "unimplemented")}
      {Lisp-Entry "rect-intersects-region?" #f 47 20 47 43 ("get-handle" "get-height" "get-width" "+" "RectInRgn" "region" "size" "v" "h")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "platform" "carbon.jazz"} 1227095261
    {Lisp-Entry "jazz.ui.window.platform.carbon" #f 37 9 37 39 ("process-control-message" "set-process-control-message" "process-window-message" "set-process-window-message" "jazz")
      {Lisp-Entry "unprocessed" #f 50 19 50 30 ("unprocessed")}
      {Lisp-Entry "processed" #f 51 19 51 28 ("processed")}
      {Lisp-Entry "desktop" #f 54 12 54 19 ()}
      {Lisp-Entry "processed-result" #f 57 13 57 29 ("cadr" "0" "cdr" "null?" "processed" "'processed" "car" "eq?" "pair?" "and" "if" "return")}
      {Lisp-Entry "is-window-HIView?" #f 65 13 65 30 ("Desktop" "Toplevel" "is?" "or" "not" "window")}
      {Lisp-Entry "Windows-Table" #f 75 19 75 32 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "Window-Title-Table" #f 79 19 79 37 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "get-window" #f 83 27 83 37 ("Windows-Table" "table-ref" "foreign-address" "foreign?" "if" "let" "hwnd")}
      {Lisp-Entry "set-window" #f 88 27 88 37 ("foreign-address" "Windows-Table" "table-set!" "window" "hwnd")}
      {Lisp-Entry "platform-get-window-handle-title" #f 92 27 92 59 ("Window-Title-Table" "table-ref" "handle")}
      {Lisp-Entry "set-window-title" #f 96 27 96 43 ("Window-Title-Table" "table-set!" "title" "handle")}
      {Lisp-Entry "window-parent" #f 100 13 100 26 ("get-handle" "if" "get-parent" "parent" "let" "window")}
      {Lisp-Entry "window-default-parent" #f 107 13 107 34 ("else" "get-stage" "Frame" "get-toplevel" "Popup" "typecase" "window")}
      {Lisp-Entry "prepare-handle" #f 114 13 114 27 ("InstallControlEventHandler" "HIViewGetContent" "handle" "create-window-handle" "window-handle" "let*" "create-HIView-handle" "is-window-HIView?" "if" "rest" "window")}
      {Lisp-Entry "create-HIView-handle" #f 123 13 123 33 ("InstallControlEventHandler" "500.0" "0.0" "HIViewSetFrame" "0" "kHIViewFeatureAllowsSubviews" "HIViewChangeFeatures" "HIViewAddSubview" "HIViewCreate" "new-handle" "window-parent" "parent" "let*" "rest" "window")}
      {Lisp-Entry "create-window-handle" #f 133 13 133 33 ("fxfloor" "kWindowStructureRgn" "WindowSetBounds" "HIWindowGetAvailablePositioningBounds" "h" "w" "y" "x" "receive" "desktop" "set!" "Desktop" "is?" "when" "InstallWindowEventHandler" "500" "0" "kWindowCompositingAttribute" "kWindowLiveResizeAttribute" "kWindowStandardHandlerAttribute" "kWindowStandardDocumentAttributes" "bitwise-ior" "kDocumentWindowClass" "CreateNewWindow" "handle" "let" "rest" "window")}
      {Lisp-Entry "destroy-window" #f 151 13 151 27 ("HIViewGetWindow" "DestroyWindow" "DestroyView" "is-window-HIView?" "if" "focus-lose" "platform-get-focus" "get-handle" "=" "when" "window")}
      {Lisp-Entry "dispatch-message" #f 160 13 160 29 ("process-window-message" "msg" "window")}
      {Lisp-Entry "setup-events" #f 169 13 169 25 ()}
      {Lisp-Entry "prime-message-pump" #f 178 13 178 31 ("process-messages" "function" "new-thread")}
      {Lisp-Entry "process-messages" #f 184 13 184 29 ("RunApplicationEventLoop")}
      {Lisp-Entry "process-messages-single-threaded" #f 188 13 188 45 ("RunApplicationEventLoop" "thunk")}
      {Lisp-Entry "show-window" #f 192 13 192 24 ("SelectWindow" "HIViewGetWindow" "ShowWindow" "HIViewSetVisible" "is-window-HIView?" "Desktop" "get-window" "is?" "if" "handle")}
      {Lisp-Entry "show-maximized" #f 202 13 202 27 ("show-window" "handle")}
      {Lisp-Entry "show-restored" #f 206 13 206 26 ("show-window" "handle")}
      {Lisp-Entry "hide-window" #f 210 13 210 24 ("HIViewGetWindow" "HideWindow" "HIViewSetVisible" "get-window" "is-window-HIView?" "if" "handle")}
      {Lisp-Entry "bring-window-to-top" #f 216 13 216 32 ("platform-bring-window-to-front" "handle")}
      {Lisp-Entry "minimize-window" #f 220 13 220 28 ("minimize-window" "'minimize-window" "unimplemented" "handle")}
      {Lisp-Entry "maximize-window" #f 224 13 224 28 ("maximize-window" "'maximize-window" "unimplemented" "handle")}
      {Lisp-Entry "restore-window" #f 228 13 228 27 ("restore-window" "'restore-window" "unimplemented" "handle")}
      {Lisp-Entry "platform-erase-background" #f 232 13 232 38 ("platform-erase-background" "'platform-erase-background" "unimplemented" "handle")}
      {Lisp-Entry "convert-key" #f 236 13 236 24 ("else" "Down" "'Down" "Top" "'Top" "Right" "'Right" "Left" "'Left" "Tab" "'Tab" "Space" "'Space" "Return" "'Return" "Backspace" "'Backspace" "Escape" "'Escape" "F8" "'F8" "100" "F7" "'F7" "98" "F6" "'F6" "97" "F5" "'F5" "96" "F4" "'F4" "118" "F3" "'F3" "99" "F2" "'F2" "120" "F1" "'F1" "122" "case" "keycode" "char")}
      {Lisp-Entry "current-mouse-x" #f 259 12 259 27 ("0")}
      {Lisp-Entry "current-mouse-y" #f 260 12 260 27 ("0")}
      {Lisp-Entry "process-window-message" #f 263 13 263 35 ("get-current-focus" "call-key-press" "char?" "and" "Space" "'Space" "eq?" "Shortcut" "new" "get-application" "dispatch-shortcut" "not" ":alt" "optionKeyBit" ":control" "controlKeyBit" ":shift" "cons" "shiftKeyBit" "bit-set?" "when" "mods" "convert-key" "eventKeyUnicode" "unicode" "unmodifiedKey" "unmodified" "eventKeyMods" "state" "eventKeyboardType" "keyboard" "eventKeyCode" "keycode" "kEventRawKeyDown" "kEventClassKeyboard" "mouse-down" "kEventMouseDown" "mouse-up" "kEventMouseUp" "inexact->exact" "mouse-move" "HIViewGetRoot" "convertCoordinates" "if" "get-window" "win" "HIViewForPoint" "view" "let*" "current-mouse-y" "current-mouse-x" "set!" "convertPointToGlobal" "glo-y" "glo-x" "eventMouseLocation" "y" "x" "receive" "eventWindowRef" "window" "kEventMouseMoved" "kEventClassMouse" "eventNotHandledErr" "else" "kEventWindowBoundsChanged" "noErr" "QuitApplicationEventLoop" "kEventWindowClose" "kEventClassWindow" "=" "cond" "GetEventKind" "type" "GetEventClass" "class" "let" "userdata" "event" "handler")}
      {Lisp-Entry "process-control-message" #f 336 13 336 36 ("eventNotHandledErr" "else" "call-position-change" "inexact->exact" "call-size-change" "show-window" "Docked-Host" "is?" "if" "HIViewGetBounds" "height" "width" "top" "left" "receive" "kEventControlBoundsChanged" "noErr" "eventControlRgn" "handle:" "Region" "new" "get-window" "paint" "EventCGContext" "context" "kEventControlDraw" "=" "cond" "void*->HIViewRef" "handle" "GetEventKind" "type" "let" "userdata" "event" "handler")}
      {Lisp-Entry "get-toplevel" #f 360 13 360 25 ("get-toplevel" "when" "get-application" "appl" "let")}
      {Lisp-Entry "get-toplevel-hwnd" #f 366 13 366 30 ("get-handle" "when" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "get-stage" #f 377 13 377 22 ("get-stage" "when" "get-application" "appl" "let")}
      {Lisp-Entry "set-capture" #f 388 13 388 24 ("handle")}
      {Lisp-Entry "unset-capture" #f 392 13 392 26 ()}
      {Lisp-Entry "with-platform-painting" #f 396 13 396 35 ("close" "unwind-protect" "get-height" "get-width" "cairo_quartz_surface_create_for_cg_context" "Surface" "new" "surface" "car" "context" "let*" "proc" "platform-data" "window")}
      {Lisp-Entry "get-window-surface" #f 404 20 404 38 ("get-height" "get-width" "get-handle" "cairo_xlib_surface_create" "XDefaultVisual" "visual" "default-x11-display" "XDefaultScreen" "screen-no" "let*" "get-window-surface" "'get-window-surface" "unimplemented" "window")}
      {Lisp-Entry "set-alpha-blending" #f 412 13 412 31 ("RDW_INVALIDATE" "RDW_ERASE" "bitwise-ior" "NULL" "RedrawWindow" "LWA_ALPHA" "0" "SetLayeredWindowAttributes" "set-layered?" "n" "handle")}
      {Lisp-Entry "platform-set-parent" #f 425 13 425 32 ("get-handle" "HIViewAddSubview" "HIViewRemoveFromSuperview" "HIViewGetSuperview" "when" "parent" "handle")}
      {Lisp-Entry "platform-get-first-child" #f 431 13 431 37 ("XGetChildHandle" "0" "=" "if" "default-x11-display" "XNumberOfChildren" "num-of-children" "let" "platform-get-first-child" "'platform-get-first-child" "unimplemented" "handle")}
      {Lisp-Entry "platform-get-first-visible-child" #f 440 13 440 45 ("1" "+" "platform-is-window-visible?" "XGetChildHandle" "child-handle" "n" "loop" "0" "=" "if" "default-x11-display" "XNumberOfChildren" "num-of-children" "let" "platform-get-first-visible-child" "'platform-get-first-visible-child" "unimplemented" "handle")}
      {Lisp-Entry "platform-is-window-visible?" #f 455 13 455 40 ("IsViewable" "XWindowAttributes-map_state-ref" "=" "default-x11-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "platform-is-window-visible?" "'platform-is-window-visible?" "unimplemented" "handle")}
      {Lisp-Entry "acquire-point" #f 463 13 463 26 ("exact->inexact" "convertCoordinates" "get-v" "y" "get-h" "x" "let" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "acquire-point" #f 469 13 469 26 ("inexact->exact" "Point" "new" "exact->inexact" "convertCoordinates" "receive" "get-v" "y" "get-h" "x" "let" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "acquire-rect" #f 476 13 476 25 ("RECT->rect" "2" "RECT->POINTS" "MapWindowPoints" "rect->RECT" "acquired" "let" "acquire-rect" "'acquire-rect" "unimplemented" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "platform-translate-to-root" #f 484 13 484 39 ("platform-translate-to-root" "'platform-translate-to-root" "unimplemented" "pt" "handle")}
      {Lisp-Entry "platform-get-position-in-root" #f 488 13 488 42 ("+" "inexact->exact" "Point" "new" "kWindowContentRgn" "WindowGetBounds" "h" "w" "t" "l" "0.0" "convertCoordinates" "y" "x" "receive" "HIViewGetRoot" "root" "HIViewGetWindow" "window" "let*" "handle")}
      {Lisp-Entry "platform-get-position" #f 495 13 495 34 ("inexact->exact" "Point" "new" "platform-get-system-rect" "height" "width" "top" "left" "receive" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-position" #f 500 13 500 34 ("kWindowContentRgn" "HIViewGetWindow" "WindowSetBounds" "exact->inexact" "HIViewSetFrame" "get-window" "is-window-HIView?" "if" "get-v" "get-h" "let" "platform-get-system-rect" "height" "width" "top" "left" "receive" "pos" "handle")}
      {Lisp-Entry "platform-get-size" #f 509 13 509 30 ("inexact->exact" "Dimension" "new" "platform-get-system-rect" "height" "width" "top" "left" "receive" "handle")}
      {Lisp-Entry "platform-get-window-size" #f 514 13 514 37 ("platform-get-size" "handle")}
      {Lisp-Entry "platform-get-system-rect" #f 518 13 518 37 ("kWindowContentRgn" "HIViewGetWindow" "WindowGetBounds" "else" "HIViewGetFrame" "get-window" "is-window-HIView?" "cond" "handle")}
      {Lisp-Entry "platform-set-window-size" #f 525 13 525 37 ("kWindowContentRgn" "HIViewGetWindow" "WindowSetBounds" "exact->inexact" "HIViewSetFrame" "get-window" "is-window-HIView?" "if" "get-height" "get-width" "let" "platform-get-system-rect" "height" "width" "top" "left" "receive" "size" "handle")}
      {Lisp-Entry "platform-set-position-size" #f 534 13 534 39 ("get-height" "get-width" "get-v" "get-h" "default-x11-display" "XMoveResizeWindow" "platform-set-position-size" "'platform-set-position-size" "unimplemented" "size" "pos" "handle")}
      {Lisp-Entry "platform-set-bounds" #f 540 13 540 32 ("SWP_NOACTIVATE" "SWP_NOZORDER" "bitwise-ior" "rect-height" "rect-width" "get-top" "get-left" "NULL" "SetWindowPos" "platform-set-bounds" "'platform-set-bounds" "unimplemented" "rect" "handle")}
      {Lisp-Entry "platform-get-rect" #f 546 13 546 30 ("+" "Rect" "new" "platform-get-system-rect" "height" "width" "top" "left" "receive" "parent-handle" "handle")}
      {Lisp-Entry "platform-get-bounds" #f 551 13 551 32 ("RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "2" "NULL" "MapWindowPoints" "GetWindowRect" "RECT-make" "rect" "with" "platform-get-bounds" "'platform-get-bounds" "unimplemented" "handle")}
      {Lisp-Entry "platform-mouse-position" #f 560 13 560 36 ("current-mouse-y" "current-mouse-x" "Point" "new")}
      {Lisp-Entry "platform-window-from-point" #f 564 13 564 39 ("WindowFromPoint" "get-v" "POINT-y-set!" "get-h" "POINT-x-set!" "POINT-make" "pt" "with" "platform-window-from-point" "'platform-window-from-point" "unimplemented" "point")}
      {Lisp-Entry "platform-child-window-from-point" #f 573 13 573 45 ("CWP_SKIPTRANSPARENT" "CWP_SKIPDISABLED" "CWP_SKIPINVISIBLE" "bitwise-ior" "ChildWindowFromPointEx" "get-v" "POINT-y-set!" "get-h" "POINT-x-set!" "POINT-make" "pt" "with" "platform-child-window-from-point" "'platform-child-window-from-point" "unimplemented" "point" "handle")}
      {Lisp-Entry "platform-move-window" #f 582 13 582 33 ("MoveWindow" "platform-move-window" "'platform-move-window" "unimplemented" "cy" "cx" "y" "x" "handle")}
      {Lisp-Entry "platform-window-enabled?" #f 588 13 588 37 ("IsWindowEnabled" "platform-window-enabled?" "'platform-window-enabled?" "unimplemented" "handle")}
      {Lisp-Entry "platform-enable-window" #f 594 13 594 35 ("platform-enable-window" "'platform-enable-window" "warn-unimplemented" "handle")}
      {Lisp-Entry "platform-disable-window" #f 598 13 598 36 ("platform-disable-window" "'platform-disable-window" "warn-unimplemented" "handle")}
      {Lisp-Entry "platform-get-client-rect" #f 602 13 602 37 ("get-height" "get-width" "0" "Rect" "new" "platform-get-size" "size" "let" "handle")}
      {Lisp-Entry "platform-scroll-window" #f 607 13 607 35 ("platform-update-window" "platform-invalidate-rect" "clip-rect" "rect" "dv" "dh" "handle")}
      {Lisp-Entry "platform-invalidate-rect" #f 613 13 613 37 ("-" "HIViewSetNeedsDisplayInRect" "0" "=" "and" "unless" "get-bottom" "bottom" "get-right" "right" "get-top" "top" "get-left" "exact->inexact" "left" "let" "if" "rect" "handle")}
      {Lisp-Entry "platform-invalidate-region" #f 624 13 624 39 ("get-rectangles" "platform-invalidate-rect" "rect" "function" "for-each" "region" "handle")}
      {Lisp-Entry "platform-invalidate-window" #f 630 13 630 39 ("platform-invalidate-rect" "handle")}
      {Lisp-Entry "platform-redraw-window" #f 634 13 634 35 ("platform-update-window" "HIViewGetWindow" "HIWindowFlush" "HIViewRender" "platform-invalidate-region" "platform-invalidate-rect" "if" "region" "rect" "handle")}
      {Lisp-Entry "platform-get-update-rect" #f 644 13 644 37 ("RECT->rect" "GetUpdateRect" "RECT-make" "rect" "with" "platform-get-update-rect" "'platform-get-update-rect" "unimplemented" "handle")}
      {Lisp-Entry "platform-get-update-region" #f 652 13 652 39 ("get-handle" "GetUpdateRgn" "Region" "new" "region" "let" "platform-get-update-region" "'platform-get-update-region" "unimplemented" "handle")}
      {Lisp-Entry "platform-redraw-view-only" #f 660 13 660 38 ("platform-invalidate-rect" "get-height" "get-width" "0" "Rect" "new" "rct" "platform-get-size" "size" "let*" "handle" "view")}
      {Lisp-Entry "platform-update-window" #f 666 13 666 35 ("platform-invalidate-rect" "get-height" "get-width" "0" "Rect" "new" "rct" "platform-get-size" "size" "let*" "when" "HIViewGetWindow" "HIWindowFlush" "HIViewRender" "HIViewSetNeedsDisplay" "handle")}
      {Lisp-Entry "platform-show-noactivate" #f 677 13 677 37 ("show-window" "handle")}
      {Lisp-Entry "platform-hide-noactivate" #f 681 13 681 37 ("hide-window" "handle")}
      {Lisp-Entry "platform-bring-window-to-front" #f 685 13 685 43 ("HIViewGetWindow" "SelectWindow" "kHIViewZOrderAbove" "HIViewSetZOrder" "get-window" "is-window-HIView?" "if" "handle")}
      {Lisp-Entry "platform-send-window-to-back" #f 691 13 691 41 ("HIViewGetWindow" "SendBehind" "kHIViewZOrderBelow" "HIViewSetZOrder" "get-window" "is-window-HIView?" "if" "handle")}
      {Lisp-Entry "platform-select-foreground-window" #f 697 20 697 53 ("HIViewGetWindow" "SelectWindow" "makeFrontProcess" "handle")}
      {Lisp-Entry "actions-store" #f 707 12 707 25 ("make-table")}
      {Lisp-Entry "add-position-action" #f 710 13 710 32 ("cdr" "and" "cons" "table-set!" "actions-store" "table-ref" "action" "let" "position" "window")}
      {Lisp-Entry "add-size-action" #f 715 13 715 28 ("car" "and" "cons" "table-set!" "actions-store" "table-ref" "action" "let" "size" "window")}
      {Lisp-Entry "platform-lock-window-update" #f 720 13 720 40 ("process-window-actions" "begin" "*locked-update*" "set!" "if" "handle")}
      {Lisp-Entry "process-window-actions" #f 730 13 730 35 ("make-table" "set!" "show-window" "platform-set-window-size" "platform-set-position" "platform-set-position-size" "and" "if" "cdr" "size" "car" "position" "hide-window" "get-handle" "handle" "let" "when" "action" "window" "function" "actions-store" "iterate-table")}
      {Lisp-Entry "platform-get-focus" #f 751 13 751 31 ("default-x11-display" "XGetInputFocus" "state" "win" "receive" "platform-get-focus" "'platform-get-focus" "unimplemented")}
      {Lisp-Entry "current-focus" #f 758 12 758 25 ()}
      {Lisp-Entry "get-current-focus" #f 760 13 760 30 ("get-toplevel" "set!" "current-focus" "unless")}
      {Lisp-Entry "platform-set-focus" #f 765 13 765 31 ("HIViewGetWindow" "SetUserFocusWindow" "get-window" "current-focus" "set!" "handle")}
      {Lisp-Entry "Current-Cursor" #f 775 19 775 33 ()}
      {Lisp-Entry "Cursors" #f 780 19 780 26 (":horizontal-splitter" ":vertical-splitter" ":left-arrow" ":spy" ":zoom-out" ":zoom-in" ":zoom" ":closed-hand" ":opened-hand" "Cursor-Resource" "new" ":move" "IDC_NO" ":no" "IDC_SIZEWE" ":west-east" "IDC_SIZEALL" ":all" "IDC_HAND" ":finger" "IDC_CROSS" ":cross" "IDC_IBEAM" ":ibeam" "IDC_WAIT" ":wait" "IDC_ARROW" ":arrow" "list")}
      {Lisp-Entry "load-cursor" #f 802 13 802 24 ("load-cursor" "'load-cursor" "unimplemented" "cursor")}
      {Lisp-Entry "get-named-cursor" #f 806 13 806 29 ("cadr" "error" "not" "if" "Cursors" "assq" "info" "let" "get-named-cursor" "'get-named-cursor" "unimplemented" "name")}
      {Lisp-Entry "get-cursor" #f 815 20 815 30 ("Current-Cursor")}
      {Lisp-Entry "set-cursor" #f 819 20 819 30 ("load-cursor" "SetCursor" "get-named-cursor" "symbol?" "if" "let" "set!" "Current-Cursor" "=" "unless" "cursor")}
      {Lisp-Entry "hide-cursor" #f 828 20 828 31 ()}
      {Lisp-Entry "show-cursor" #f 832 20 832 31 ()}
      {Lisp-Entry "platform-get-desktop" #f 841 13 841 33 ("XDefaultScreen" "default-x11-display" "XRootWindow" "platform-get-desktop" "'platform-get-desktop" "unimplemented")}
      {Lisp-Entry "get-work-area" #f 848 20 848 33 ("desktop" "get-handle" "platform-get-rect")}
      {Lisp-Entry "platform-drop-files" #f 857 13 857 32 ("platform-drop-files" "'platform-drop-files" "unimplemented" "temp")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "resizer" "platform" "carbon.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.resizer.platform.carbon" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "Part-Cursor" #f 43 10 43 21 ()}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "platform" "carbon.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.platform.carbon" #f 37 9 37 38 ("jazz")
      {Lisp-Entry "platform-print-document" #f 49 20 49 43 ("view")}
      {Lisp-Entry "platform-print-picture" #f 52 20 52 42 ("view")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "platform" "carbon.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.platform.carbon" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "choose-file" #f 54 20 54 31 ("anchors" "anchors:" "multiple-selection?" "multiple-selection?:" "extensions" "extensions:" "directory" "directory:" "host-title:" "File-Request" "get-modal" "title" "title:")}
      {Lisp-Entry "choose-new-file" #f 72 20 72 35 ("anchors" "anchors:" "default-extension" "default-extension:" "initial-filename" "initial-filename:" "extensions" "extensions:" "directory" "directory:" "host-title:" "NewFile-Request" "get-modal" "title" "title:")}
      {Lisp-Entry "choose-directory" #f 92 20 92 36 ("anchors" "anchors:" "directory" "directory:" "host-title:" "Directory-Request" "get-modal" "title" "title:")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "clipboard" "platform" "carbon.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.clipboard.platform.carbon" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "initialize-clipboard" #f 43 20 43 40 ()}
      {Lisp-Entry "internal-clipboard" #f 47 12 47 30 ()}
      {Lisp-Entry "get-clipboard-text" #f 50 20 50 38 ("internal-clipboard" "format" "format:")}
      {Lisp-Entry "set-clipboard-text" #f 54 20 54 38 ("internal-clipboard" "set!" "format" "format:" "text")}
      {Lisp-Entry "register-clipboard-format" #f 58 20 58 45 ("Formats" "table-set!" "RegisterClipboardFormat" "id" "let" "format" "name")}
      {Lisp-Entry "clipboard-format-available?" #f 64 20 64 47 ("available-clipboard-formats" "member?" "error" "Formats" "table-ref" "either" "get-format" "define" "format")}
      {Lisp-Entry "available-clipboard-formats" #f 74 20 74 47 ("get-output" "put" "/=" "when" "EnumClipboardFormats" "format" "0" "previous" "iter" "List-Factory" "new" "formats" "let" "function" "with-opened-clipboard")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "platform" "carbon.jazz"} 1226584785
    {Lisp-Entry "jazz.system.platform.carbon" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "initialize-platform" #f 48 20 48 39 ()}
      {Lisp-Entry "get-computer-name" #f 57 20 57 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*")}
      {Lisp-Entry "get-system-user-name" #f 67 20 67 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let")}
      {Lisp-Entry "Shift-Bit" #f 82 12 82 21 ("1")}
      {Lisp-Entry "Control-Bit" #f 86 12 86 23 ("2")}
      {Lisp-Entry "Alt-Bit" #f 90 12 90 19 ("4")}
      {Lisp-Entry "NoModifiers" #f 94 19 94 30 ("0")}
      {Lisp-Entry "modifiers-keys" #f 98 20 98 34 ("alt-down?" "Alt-Bit" "control-down?" "Control-Bit" "shift-down?" "Shift-Bit" "0" "mask-bit-set")}
      {Lisp-Entry "shift-key?" #f 102 20 102 30 ("Shift-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "control-key?" #f 106 20 106 32 ("Control-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "alt-key?" #f 110 20 110 28 ("Alt-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "shift-down?" #f 114 20 114 31 ("GetCurrentEventKeyModifiers" "shiftKeyBit" "bit-set?")}
      {Lisp-Entry "control-down?" #f 118 20 118 33 ("GetCurrentEventKeyModifiers" "controlKeyBit" "bit-set?")}
      {Lisp-Entry "alt-down?" #f 122 20 122 29 ("GetCurrentEventKeyModifiers" "optionKeyBit" "bit-set?")}
      {Lisp-Entry "modifiers-down" #f 126 20 126 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" #f 132 20 132 34 ("VK_LBUTTON" "key-down?" "'key-down?" "unimplemented")}
      {Lisp-Entry "use-generic-dialogs?" #f 143 13 143 33 ()}
      {Lisp-Entry "Version-Info" #f 152 19 152 31 ()}
      {Lisp-Entry "version-info" #f 156 13 156 25 ("GetVersionEx" "sizeof-OSVERSIONINFOEX" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless" "version-info" "'version-info" "unimplemented")}
      {Lisp-Entry "Windows-Version" #f 168 19 168 34 ()}
      {Lisp-Entry "get-windows-version" #f 172 20 172 39 ("0" "OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless" "get-windows-version" "'get-windows-version" "unimplemented")}
      {Lisp-Entry "validate-version" #f 185 20 185 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory" "get-process" "process" "let*" "present" "register-crash-info" "when" "validate-version" "'validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "crash" "carbon.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.crash.carbon" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "setup-crash-handler" #f 40 13 40 32 ()}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "media" "platform" "carbon.jazz"} 1226584783
    {Lisp-Entry "jazz.media.platform.carbon" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "play-sound" #f 48 20 48 30 ("bell" "asynchronous?" "asynchronous?:" "sound")}
      {Lisp-Entry "open-music" #f 58 20 58 30 ("alias" "file")}
      {Lisp-Entry "close-music" #f 60 20 60 31 ("alias")}
      {Lisp-Entry "play-music" #f 63 20 63 30 ("alias")}
      {Lisp-Entry "stop-music" #f 65 20 65 30 ("alias")}
      {Lisp-Entry "pause-music" #f 68 20 68 31 ("alias")}
      {Lisp-Entry "resume-music" #f 70 20 70 32 ("alias")}}})
"carbon-types"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "carbon" "carbon-types.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.carbon.carbon-types" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "UInt16" #f 48 8 48 14 ("int" "native")}
      {Lisp-Entry "UInt32" #f 49 8 49 14 ("unsigned-long" "native")}
      {Lisp-Entry "SInt32" #f 50 8 50 14 ("long" "native")}
      {Lisp-Entry "UCS-2" #f 51 8 51 13 ("UCS-2" "native")}
      {Lisp-Entry "FourCharCode" #f 54 8 54 20 ("UInt32")}
      {Lisp-Entry "OSType" #f 55 8 55 14 ("FourCharCode")}
      {Lisp-Entry "UniChar" #f 58 8 58 15 ("UCS-2")}
      {Lisp-Entry "CGFloat" #f 61 8 61 15 ("double" "native")}
      {Lisp-Entry "CFStringRef" #f 64 8 64 19 ("struct" "pointer")}
      {Lisp-Entry "CGContextRef" #f 67 8 67 20 ("struct" "pointer")}
      {Lisp-Entry "OSStatus" #f 70 8 70 16 ("SInt32")}
      {Lisp-Entry "EventKind" #f 71 8 71 17 ("UInt16")}
      {Lisp-Entry "EventMask" #f 72 8 72 17 ("UInt16")}
      {Lisp-Entry "WindowClass" #f 75 8 75 19 ("UInt32")}
      {Lisp-Entry "WindowAttributes" #f 76 8 76 24 ("UInt32")}
      {Lisp-Entry "WindowPtr" #f 79 8 79 17 ("struct" "pointer")}
      {Lisp-Entry "WindowRef" #f 80 8 80 17 ("WindowPtr")}
      {Lisp-Entry "WindowRegionCode" #f 81 8 81 24 ("UInt16")}
      {Lisp-Entry "ControlRef" #f 84 8 84 18 ("struct" "pointer")}
      {Lisp-Entry "HIViewRef" #f 85 8 85 17 ("ControlRef")}
      {Lisp-Entry "HIViewZOrderOp" #f 86 8 86 22 ("UInt32")}
      {Lisp-Entry "HIViewFeatures" #f 87 8 87 22 ("unsigned-int64" "native")}
      {Lisp-Entry "CGContextRef" #f 90 8 90 20 ("struct" "pointer")}
      {Lisp-Entry "EventModifiers" #f 93 8 93 22 ("UInt16")}
      {Lisp-Entry "EventRef" #f 96 8 96 16 ("struct" "pointer")}
      {Lisp-Entry "EventHandlerCallRef" #f 97 8 97 27 ("struct" "pointer")}
      {Lisp-Entry "EventHandlerRef" #f 98 8 98 23 ("struct" "pointer")}
      {Lisp-Entry "EventHandlerRef*" #f 99 8 99 24 ("EventHandlerRef" "pointer")}
      {Lisp-Entry "RgnHandle" #f 101 8 101 17 ("struct" "pointer")}
      {Lisp-Entry "PasteboardRef" #f 104 8 104 21 ("struct" "pointer")}
      {Lisp-Entry "EventHandlerProcPtr" #f 107 8 107 27 ("OSStatus" "void*" "EventRef" "EventHandlerCallRef" "function" "pointer")}
      {Lisp-Entry "Point" #f 110 13 110 18 ("h" "v" "short")}
      {Lisp-Entry "Rect" #f 115 13 115 17 ("right" "bottom" "left" "top" "short")}
      {Lisp-Entry "EventTypeSpec" #f 122 13 122 26 ("eventKind" "UInt32" "eventClass" "OSType")}
      {Lisp-Entry "CGPoint" #f 127 13 127 20 ("y" "x" "CGFloat")}
      {Lisp-Entry "CGSize" #f 132 13 132 19 ("height" "width" "CGFloat")}
      {Lisp-Entry "CGRect" #f 137 13 137 19 ("size" "CGSize" "origin" "CGPoint")}}})
"cffi"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "cffi.jazz"} 1226584790
    {Lisp-Entry "test.cffi" #f 37 9 37 18 ("#<<end-of-c-declare\nstatic int func2(mult* m, int n)\n{\n    return (*m)(n);\n}\nend-of-c-declare\n" "#<<end-of-c-declare\ntypedef int (mult)(int);\n\nstatic int multiply(int n)\n{\n    return n * n;\n}\n\nstatic mult* func1()\n{\n    return &multiply;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstruct S1_\n{\n    int x;\n    int y;\n};\n\ntypedef struct S1_ S1;\n\nstatic int struct1a(S1 s1)\n{\n    return s1.x + s1.y;\n}\n\n//static int struct1b(S1& s1)\n//{\n//    return s1.x + s1.y;\n//}\n\nstatic int struct1c(S1* s1)\n{\n    return s1->x + s1->y;\n}\n\nstatic void tst()\n{\n    S1 s;\n    \n    struct1a(s);\n    struct1c(&s);\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int scalar3(___SCMOBJ obj)\n{\n    return (int) obj;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int scalar2(int n)\n{\n    return n + n;\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic void scalar1(int n)\n{\n}\nend-of-c-declare\n" "#<<end-of-c-declare\nN = 2;\nend-of-c-declare\n" "#<<end-of-c-declare\nstatic int N;\nend-of-c-declare\n" "jazz")
      {Lisp-Entry "init1" #f 71 12 71 17 ("int" "c-function")}
      {Lisp-Entry "void" #f 80 8 80 12 ("void" "native")}
      {Lisp-Entry "bool" #f 81 8 81 12 ("bool" "native")}
      {Lisp-Entry "char" #f 82 8 82 12 ("char" "native")}
      {Lisp-Entry "wchar_t" #f 83 8 83 15 ("wchar_t" "native")}
      {Lisp-Entry "int" #f 84 8 84 11 ("int" "native")}
      {Lisp-Entry "double" #f 85 8 85 14 ("double" "native")}
      {Lisp-Entry "scheme-object" #f 86 8 86 21 ("scheme-object" "native")}
      {Lisp-Entry "object" #f 87 8 87 14 ("scheme-object")}
      {Lisp-Entry "scalar1" #f 98 12 98 19 ("void" "int" "c-function")}
      {Lisp-Entry "scalar2" #f 111 12 111 19 ("int" "c-function")}
      {Lisp-Entry "scalar3" #f 124 12 124 19 ("int" "object" "c-function")}
      {Lisp-Entry "ca" #f 186 12 186 14 ("2")}
      {Lisp-Entry "cb" #f 187 12 187 14 ("3")}
      {Lisp-Entry "e" #f 195 15 195 16 ("4" "ec" "2" "eb" "1" "ea")}
      {Lisp-Entry "S1" #f 243 8 243 10 ("struct")}
      {Lisp-Entry "make-S1" #f 246 12 246 19 ("S1" "c-function")}
      {Lisp-Entry "struct1a" #f 251 12 251 20 ("int" "S1" "c-function")}
      {Lisp-Entry "struct1c" #f 257 12 257 20 ("int" "S1" "pointer" "c-function")}
      {Lisp-Entry "cast-S2->S2*" #f 268 12 268 24 ("error" "S2*" "object" "c-function" "S2" "'S2" "foreign-tags" "car" "eq?" "if" "s2" "function")}
      {Lisp-Entry "mult*" #f 305 8 305 13 ("int" "function" "pointer")}
      {Lisp-Entry "func1" #f 324 12 324 17 ("mult*" "c-function")}}})
"class"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "syntax" "class.scm"} 1226584773
    {Lisp-Entry "core.class.syntax.class" #f 37 8 37 31 ()
      {Lisp-Entry "jazz.category-name" #f 40 8 40 26 ("jazz.object-size")}
      {Lisp-Entry "jazz.category-fields" #f 43 8 43 28 ("1" "jazz.category-name" "%%fx+")}
      {Lisp-Entry "jazz.category-virtual-size" #f 46 8 46 34 ("1" "jazz.category-fields" "%%fx+")}
      {Lisp-Entry "jazz.category-ancestors" #f 49 8 49 31 ("1" "jazz.category-virtual-size" "%%fx+")}
      {Lisp-Entry "jazz.category-descendants" #f 52 8 52 33 ("1" "jazz.category-ancestors" "%%fx+")}
      {Lisp-Entry "jazz.class-ascendant" #f 55 8 55 28 ("1" "jazz.category-descendants" "%%fx+")}
      {Lisp-Entry "jazz.class-interfaces" #f 58 8 58 29 ("1" "jazz.class-ascendant" "%%fx+")}
      {Lisp-Entry "jazz.class-slots" #f 61 8 61 24 ("1" "jazz.class-interfaces" "%%fx+")}
      {Lisp-Entry "jazz.class-instance-size" #f 64 8 64 32 ("1" "jazz.class-slots" "%%fx+")}
      {Lisp-Entry "jazz.class-level" #f 67 8 67 24 ("1" "jazz.class-instance-size" "%%fx+")}
      {Lisp-Entry "jazz.class-dispatch-table" #f 70 8 70 33 ("1" "jazz.class-level" "%%fx+")}
      {Lisp-Entry "jazz.class-core-method-alist" #f 73 8 73 36 ("1" "jazz.class-dispatch-table" "%%fx+")}
      {Lisp-Entry "jazz.class-core-virtual-alist" #f 76 8 76 37 ("1" "jazz.class-core-method-alist" "%%fx+")}
      {Lisp-Entry "jazz.class-core-virtual-names" #f 79 8 79 37 ("1" "jazz.class-core-virtual-alist" "%%fx+")}
      {Lisp-Entry "jazz.class-core-vtable" #f 82 8 82 30 ("1" "jazz.class-core-virtual-names" "%%fx+")}
      {Lisp-Entry "jazz.class-class-table" #f 85 8 85 30 ("1" "jazz.class-core-vtable" "%%fx+")}
      {Lisp-Entry "jazz.class-interface-table" #f 88 8 88 34 ("1" "jazz.class-class-table" "%%fx+")}
      {Lisp-Entry "jazz.class-size" #f 92 8 92 23 ("1" "jazz.class-interface-table" "%%fx+")}
      {Lisp-Entry "%%get-category-name" #f 96 20 96 39 ("category")}
      {Lisp-Entry "%%get-category-fields" #f 100 20 100 41 ("category")}
      {Lisp-Entry "%%set-category-fields" #f 104 20 104 41 ("fields" "category")}
      {Lisp-Entry "%%get-category-virtual-size" #f 108 20 108 47 ("category")}
      {Lisp-Entry "%%set-category-virtual-size" #f 112 20 112 47 ("virtual-size" "category")}
      {Lisp-Entry "%%get-category-ancestors" #f 116 20 116 44 ("category")}
      {Lisp-Entry "%%set-category-ancestors" #f 120 20 120 44 ("ancestors" "category")}
      {Lisp-Entry "%%get-category-descendants" #f 124 20 124 46 ("category")}
      {Lisp-Entry "%%set-category-descendants" #f 128 20 128 46 ("descendants" "category")}
      {Lisp-Entry "%%get-class-ascendant" #f 132 20 132 41 ("class")}
      {Lisp-Entry "%%get-class-interfaces" #f 136 20 136 42 ("class")}
      {Lisp-Entry "%%get-class-slots" #f 140 20 140 37 ("class")}
      {Lisp-Entry "%%set-class-slots" #f 144 20 144 37 ("slots" "class")}
      {Lisp-Entry "%%get-class-instance-size" #f 148 20 148 45 ("class")}
      {Lisp-Entry "%%set-class-instance-size" #f 152 20 152 45 ("size" "class")}
      {Lisp-Entry "%%get-class-level" #f 156 20 156 37 ("class")}
      {Lisp-Entry "%%set-class-level" #f 160 20 160 37 ("size" "class")}
      {Lisp-Entry "%%get-class-dispatch-table" #f 164 20 164 46 ("class")}
      {Lisp-Entry "%%set-class-dispatch-table" #f 168 20 168 46 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-method-alist" #f 172 20 172 49 ("class")}
      {Lisp-Entry "%%set-class-core-method-alist" #f 176 20 176 49 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-virtual-alist" #f 180 20 180 50 ("class")}
      {Lisp-Entry "%%set-class-core-virtual-alist" #f 184 20 184 50 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-virtual-names" #f 188 20 188 50 ("class")}
      {Lisp-Entry "%%set-class-core-virtual-names" #f 192 20 192 50 ("vtable" "class")}
      {Lisp-Entry "%%get-class-core-vtable" #f 196 20 196 43 ("class")}
      {Lisp-Entry "%%set-class-core-vtable" #f 200 20 200 43 ("vtable" "class")}
      {Lisp-Entry "%%get-class-class-table" #f 204 20 204 43 ("class")}
      {Lisp-Entry "%%set-class-class-table" #f 208 20 208 43 ("vtable" "class")}
      {Lisp-Entry "%%get-class-interface-table" #f 212 20 212 47 ("class")}
      {Lisp-Entry "%%set-class-interface-table" #f 216 20 216 47 ("vtable" "class")}
      {Lisp-Entry "%%get-object-class" #f 220 20 220 38 ("object")}
      {Lisp-Entry "%%set-object-class" #f 224 20 224 38 ("class" "object")}
      {Lisp-Entry "%%final-dispatch" #f 228 20 228 36 ("implementation" "object")}
      {Lisp-Entry "%%class-dispatch" #f 232 20 232 36 ("implementation-rank" "class-level" "object")}
      {Lisp-Entry "%%interface-dispatch" #f 236 20 236 40 ("implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "%%class-native-dispatch" #f 240 20 240 43 ("implementation-rank" "class-level" "object")}
      {Lisp-Entry "%%interface-native-dispatch" #f 244 20 244 47 ("implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "%%c-class-of" #f 250 24 250 36 ("obj")}
      {Lisp-Entry "%%class-of" #f 293 24 293 34 ("jazz.i-class-of" "%%get-object-class" "%%object?" "if" "else" ",symbol" "%%c-class-of" "compile" "jazz.walk-for" "case" "symbol" "lambda" "jazz.with-expression-value" "obj")}
      {Lisp-Entry "%%i-class-of-impl" #f 304 24 304 41 ("jazz.class-of-native" "%%get-object-class" "%%object?" "if" "else" ",var" "%%c-class-of" "compile" "jazz.walk-for" "case" "var")}
      {Lisp-Entry "%%class-of-impl" #f 313 24 313 39 ("jazz.error" ",var" "%%class-of" "or" "jazz.debug-user?" "if" "var")}
      {Lisp-Entry "%%class-of" #f 320 24 320 34 ("jazz.class-of-native" "%%get-object-class" ",symbol" "%%object?" "if" "symbol" "lambda" "jazz.with-expression-value" "obj")}}})
"classes"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "scheme" "dialect" "classes.scm"} 1226584790
    {Lisp-Entry "scheme.dialect.classes" #f 37 8 37 30 ()
      {Lisp-Entry "jazz.Define-Declaration" #f 45 19 45 42 ("%%set-define-declaration-value" "%%get-define-declaration-value" "value" "%%get-define-declaration-signature" "signature" "jazz.allocate-define-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Define-Macro-Declaration" #f 55 19 55 48 ("%%set-define-macro-body" "%%get-define-macro-body" "body" "%%set-define-macro-signature" "%%get-define-macro-signature" "signature" "jazz.allocate-define-macro-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Scheme-Dialect" #f 65 19 65 38 ("jazz.allocate-scheme-dialect" "jazz.Object-Class" "jazz.Dialect")}
      {Lisp-Entry "jazz.Scheme-Walker" #f 74 19 74 37 ("jazz.allocate-scheme-walker" "jazz.Object-Class" "errors" "warnings" "jazz.Walker")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "classes.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.classes" #f 37 8 37 28 ()
      {Lisp-Entry "jazz.Definition-Declaration" #f 45 19 45 46 ("%%set-definition-declaration-value" "%%get-definition-declaration-value" "value" "%%get-definition-declaration-signature" "signature" "%%get-definition-declaration-expansion" "expansion" "jazz.allocate-definition-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Specialize" #f 56 19 56 34 ("jazz.allocate-specialize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Generic-Declaration" #f 65 19 65 43 ("%%set-generic-declaration-body" "%%get-generic-declaration-body" "body" "%%set-generic-declaration-signature" "%%get-generic-declaration-signature" "signature" "%%get-generic-declaration-dispatch-types" "dispatch-types" "jazz.allocate-generic-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Specific-Declaration" #f 76 19 76 44 ("%%set-specific-declaration-body" "%%get-specific-declaration-body" "body" "%%get-specific-declaration-signature" "signature" "%%get-specific-declaration-generic" "generic" "jazz.allocate-specific-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Category-Declaration" #f 87 19 87 44 ("%%get-category-declaration-metaclass" "metaclass" "%%get-category-declaration-implementor" "implementor" "jazz.Object-Class" "body" "children" "children-lookup" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Namespace-Declaration")}
      {Lisp-Entry "jazz.Class-Declaration" #f 97 19 97 41 ("%%get-class-declaration-interfaces" "interfaces" "%%get-class-declaration-ascendant-base" "ascendant-base" "%%get-class-declaration-ascendant-relation" "ascendant-relation" "%%get-class-declaration-ascendant" "ascendant" "jazz.allocate-class-declaration" "jazz.Object-Class" "metaclass" "implementor" "body" "children" "children-lookup" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Category-Declaration")}
      {Lisp-Entry "jazz.Interface-Declaration" #f 109 19 109 45 ("%%get-interface-declaration-ascendants" "ascendants" "jazz.allocate-interface-declaration" "jazz.Object-Class" "metaclass" "implementor" "body" "children" "children-lookup" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Category-Declaration")}
      {Lisp-Entry "jazz.Field-Declaration" #f 118 19 118 41 ("jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Slot-Declaration" #f 127 19 127 40 ("%%get-slot-declaration-setter-name" "setter-name" "%%get-slot-declaration-getter-name" "getter-name" "%%set-slot-declaration-initialize" "%%get-slot-declaration-initialize" "initialize" "jazz.allocate-slot-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Field-Declaration")}
      {Lisp-Entry "jazz.Property-Declaration" #f 138 19 138 44 ("%%set-property-declaration-setter" "%%get-property-declaration-setter" "setter" "%%set-property-declaration-getter" "%%get-property-declaration-getter" "getter" "jazz.allocate-property-declaration" "jazz.Object-Class" "setter-name" "getter-name" "initialize" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Slot-Declaration")}
      {Lisp-Entry "jazz.Method-Declaration" #f 148 19 148 42 ("%%set-method-declaration-body" "%%get-method-declaration-body" "body" "%%set-method-declaration-signature" "%%get-method-declaration-signature" "signature" "%%get-method-declaration-synchronized" "synchronized" "%%get-method-declaration-remote" "remote" "%%get-method-declaration-expansion" "expansion" "%%get-method-declaration-abstraction" "abstraction" "%%get-method-declaration-propagation" "propagation" "%%get-method-declaration-root" "root" "jazz.allocate-method-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Field-Declaration")}
      {Lisp-Entry "jazz.With-Self" #f 164 19 164 33 ("%%get-with-self-body" "body" "jazz.allocate-with-self" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Cast" #f 173 19 173 28 ("%%get-cast-expression" "expression" "jazz.allocate-cast" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Construct" #f 182 19 182 33 ("%%get-construct-values" "values" "%%get-construct-class" "class" "jazz.allocate-construct" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Slot-Reference" #f 192 19 192 38 ("%%get-slot-reference-context" "context" "%%get-slot-reference-name" "name" "%%get-slot-reference-declaration" "declaration" "jazz.allocate-slot-reference" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Slot-Assignment" #f 203 19 203 39 ("%%get-slot-assignment-value" "value" "%%get-slot-assignment-context" "context" "%%get-slot-assignment-name" "name" "%%get-slot-assignment-declaration" "declaration" "jazz.allocate-slot-assignment" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Dispatch" #f 215 19 215 32 ("%%get-dispatch-arguments" "arguments" "%%get-dispatch-name" "name" "jazz.allocate-dispatch" "jazz.Object-Class" "source" "type" "jazz.Expression")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "library" "syntax" "classes.scm"} 1226584774
    {Lisp-Entry "core.library.syntax.classes" #f 37 8 37 35 ()
      {Lisp-Entry "jazz.Walk-Binding" #f 45 19 45 36 ("jazz.Object-Class" "jazz.Type")}
      {Lisp-Entry "jazz.Lexical-Binding" #f 69 19 69 39 ("%%get-lexical-binding-type" "type" "%%get-lexical-binding-name" "name" "jazz.Object-Class" "jazz.Walk-Binding")}
      {Lisp-Entry "jazz.Declaration" #f 79 19 79 35 ("%%set-declaration-source" "%%get-declaration-source" "source" "%%set-declaration-locator" "%%get-declaration-locator" "locator" "%%set-declaration-parent" "%%get-declaration-parent" "parent" "%%set-declaration-toplevel" "%%get-declaration-toplevel" "toplevel" "%%get-declaration-attributes" "attributes" "%%get-declaration-compatibility" "compatibility" "%%get-declaration-access" "access" "jazz.Object-Class" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Declaration-Reference" #f 103 19 103 45 ("%%set-declaration-reference-declaration" "%%get-declaration-reference-declaration" "declaration" "%%get-declaration-reference-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Library-Reference" #f 116 19 116 41 ("jazz.allocate-library-reference" "jazz.Object-Class" "declaration" "name" "jazz.Declaration-Reference")}
      {Lisp-Entry "jazz.Export-Reference" #f 125 19 125 40 ("%%get-export-reference-library-reference" "library-reference" "jazz.allocate-export-reference" "jazz.Object-Class" "declaration" "name" "jazz.Declaration-Reference")}
      {Lisp-Entry "jazz.Autoload-Reference" #f 134 19 134 42 ("jazz.allocate-autoload-reference" "jazz.Object-Class" "library-reference" "declaration" "name" "jazz.Export-Reference")}
      {Lisp-Entry "jazz.Module-Declaration" #f 143 19 143 42 ("%%get-module-declaration-requires" "requires" "jazz.allocate-module-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Namespace-Declaration" #f 152 19 152 45 ("%%set-namespace-declaration-body" "%%get-namespace-declaration-body" "body" "%%set-namespace-declaration-children" "%%get-namespace-declaration-children" "children" "%%get-namespace-declaration-children-lookup" "children-lookup" "%%get-namespace-declaration-lookups" "lookups" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "%%get-access-lookup" #f 159 20 159 39 ("access" "namespace-declaration")}
      {Lisp-Entry "jazz.Library-Declaration" #f 168 19 168 43 ("%%set-library-declaration-autoloads" "%%get-library-declaration-autoloads" "autoloads" "%%set-library-declaration-references" "%%get-library-declaration-references" "references" "%%set-library-declaration-variables" "%%get-library-declaration-variables" "variables" "%%set-library-declaration-literals" "%%get-library-declaration-literals" "literals" "%%set-library-declaration-proclaims" "%%get-library-declaration-proclaims" "proclaims" "%%set-library-declaration-imports" "%%get-library-declaration-imports" "imports" "%%set-library-declaration-exports" "%%get-library-declaration-exports" "exports" "%%get-library-declaration-requires" "requires" "%%get-library-declaration-dialect-invoice" "dialect-invoice" "%%get-library-declaration-dialect-name" "dialect-name" "jazz.allocate-library-declaration" "jazz.Object-Class" "body" "children" "children-lookup" "lookups" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Namespace-Declaration")}
      {Lisp-Entry "jazz.Library-Invoice" #f 186 19 186 39 ("%%get-library-invoice-rename" "rename" "%%get-library-invoice-prefix" "prefix" "%%get-library-invoice-except" "except" "%%get-library-invoice-only" "only" "%%get-library-invoice-version" "version" "%%get-library-invoice-phase" "phase" "%%get-library-invoice-library" "library" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Export-Invoice" #f 201 19 201 38 ("%%get-export-invoice-autoload" "autoload" "jazz.allocate-export-invoice" "jazz.Object-Class" "rename" "prefix" "except" "only" "version" "phase" "library" "jazz.Library-Invoice")}
      {Lisp-Entry "jazz.Import-Invoice" #f 210 19 210 38 ("jazz.allocate-import-invoice" "jazz.Object-Class" "rename" "prefix" "except" "only" "version" "phase" "library" "jazz.Library-Invoice")}
      {Lisp-Entry "jazz.Export-Declaration" #f 219 19 219 42 ("%%get-export-declaration-symbol" "symbol" "jazz.allocate-export-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Autoload-Declaration" #f 228 19 228 44 ("%%set-autoload-declaration-declaration" "%%get-autoload-declaration-declaration" "declaration" "%%get-autoload-declaration-exported-library" "exported-library" "%%get-autoload-declaration-library" "library" "jazz.allocate-autoload-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Macro-Declaration" #f 239 19 239 41 ("%%set-macro-declaration-body" "%%get-macro-declaration-body" "body" "%%set-macro-declaration-signature" "%%get-macro-declaration-signature" "signature" "jazz.allocate-macro-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Syntax-Declaration" #f 249 19 249 42 ("%%set-syntax-declaration-body" "%%get-syntax-declaration-body" "body" "%%set-syntax-declaration-signature" "%%get-syntax-declaration-signature" "signature" "jazz.allocate-syntax-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Void-Class" #f 259 19 259 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Void" #f 263 19 263 28 ("jazz.Void-Class" "jazz.Type")}
      {Lisp-Entry "jazz.Opt-Type" #f 272 19 272 32 ("%%get-opt-type-type" "type" "jazz.allocate-opt-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Key-Type" #f 281 19 281 32 ("%%get-key-type-type" "type" "%%get-key-type-key" "key" "jazz.allocate-key-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Rest-Type" #f 291 19 291 33 ("%%get-rest-type-type" "type" "jazz.allocate-rest-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Function-Type" #f 300 19 300 37 ("%%get-function-type-result" "result" "%%get-function-type-rest" "rest" "%%get-function-type-named" "named" "%%get-function-type-optional" "optional" "%%get-function-type-positional" "positional" "%%get-function-type-mandatory" "mandatory" "jazz.allocate-function-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Category-Type" #f 314 19 314 37 ("%%get-category-type-declaration" "declaration" "jazz.allocate-category-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Values-Type" #f 323 19 323 35 ("%%get-values-type-types" "types" "jazz.allocate-values-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Restriction-Type" #f 332 19 332 40 ("%%get-restriction-type-type" "type" "%%get-restriction-type-base" "base" "jazz.allocate-restriction-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Complement-Type" #f 342 19 342 39 ("%%get-complement-type-type" "type" "jazz.allocate-complement-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Union-Type" #f 351 19 351 34 ("%%get-union-type-types" "types" "jazz.allocate-union-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Template-Type" #f 360 19 360 37 ("%%get-template-type-types" "types" "%%get-template-type-class" "class" "jazz.allocate-template-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Nillable-Type" #f 370 19 370 37 ("%%get-nillable-type-type" "type" "jazz.allocate-nillable-type" "jazz.Class" "jazz.Type")}
      {Lisp-Entry "jazz.Any-Class" #f 379 19 379 33 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Any" #f 383 19 383 27 ("jazz.Any-Class" "jazz.Type")}
      {Lisp-Entry "jazz.C-Type-Declaration" #f 392 19 392 42 ("%%get-c-type-declaration-declare" "declare" "%%get-c-type-declaration-scheme-to-c" "scheme-to-c" "%%get-c-type-declaration-c-to-scheme" "c-to-scheme" "%%get-c-type-declaration-references" "references" "%%set-c-type-declaration-pointer-types" "%%get-c-type-declaration-pointer-types" "pointer-types" "%%get-c-type-declaration-base-type" "base-type" "%%get-c-type-declaration-expansion" "expansion" "%%get-c-type-declaration-kind" "kind" "jazz.allocate-c-type-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.C-Definition-Declaration" #f 408 19 408 48 ("%%set-c-definition-declaration-body" "%%get-c-definition-declaration-body" "body" "%%get-c-definition-declaration-scope" "scope" "%%get-c-definition-declaration-c-name" "c-name" "%%get-c-definition-declaration-result-type" "result-type" "%%get-c-definition-declaration-parameter-types" "parameter-types" "%%set-c-definition-declaration-signature" "%%get-c-definition-declaration-signature" "signature" "jazz.allocate-c-definition-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.Walker" #f 422 19 422 30 ("%%set-walker-errors" "%%get-walker-errors" "errors" "%%set-walker-warnings" "%%get-walker-warnings" "warnings" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Context" #f 444 19 444 36 ("%%get-walk-context-pathname" "pathname" "%%get-walk-context-locator" "locator" "%%get-walk-context-policy" "policy" "jazz.allocate-walk-context" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Location" #f 455 19 455 37 ("%%get-walk-location-locat" "locat" "%%get-walk-location-declaration-locator" "declaration-locator" "%%get-walk-location-module-locator" "module-locator" "jazz.allocate-walk-location" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Walk-Problem" #f 466 19 466 36 ("%%get-walk-problem-location" "location" "jazz.Object-Class" "message" "jazz.Error")}
      {Lisp-Entry "jazz.Walk-Problems" #f 475 19 475 37 ("%%get-walk-problems-errors" "errors" "%%get-walk-problems-warnings" "warnings" "jazz.allocate-walk-problems" "jazz.Object-Class" "message" "jazz.Error")}
      {Lisp-Entry "jazz.Walk-Warning" #f 485 19 485 36 ("jazz.allocate-walk-warning" "jazz.Object-Class" "location" "message" "jazz.Walk-Problem")}
      {Lisp-Entry "jazz.Walk-Error" #f 494 19 494 34 ("jazz.allocate-walk-error" "jazz.Object-Class" "location" "message" "jazz.Walk-Problem")}
      {Lisp-Entry "jazz.Unresolved-Error" #f 503 19 503 40 ("%%get-unresolved-error-symbol" "symbol" "jazz.allocate-unresolved-error" "jazz.Object-Class" "location" "message" "jazz.Walk-Error")}
      {Lisp-Entry "jazz.Walk-Frame" #f 512 19 512 34 ("%%get-walk-frame-bindings" "bindings" "jazz.allocate-walk-frame" "jazz.Object-Class" "jazz.Walk-Binding")}
      {Lisp-Entry "jazz.Signature" #f 521 19 521 33 ("%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "%%get-signature-mandatory" "mandatory" "jazz.allocate-signature" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Symbol-Binding" #f 534 19 534 38 ("jazz.Object-Class" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Variable" #f 543 19 543 32 ("%%set-variable-reference-count" "%%get-variable-reference-count" "reference-count" "jazz.allocate-variable" "jazz.Object-Class" "type" "name" "jazz.Symbol-Binding")}
      {Lisp-Entry "jazz.NextMethod-Variable" #f 552 19 552 43 ("jazz.allocate-nextmethod-variable" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Variable")}
      {Lisp-Entry "jazz.Parameter" #f 561 19 561 33 ("jazz.allocate-parameter" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Variable")}
      {Lisp-Entry "jazz.Dynamic-Parameter" #f 573 19 573 41 ("%%get-dynamic-parameter-class" "class" "jazz.allocate-dynamic-parameter" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Optional-Parameter" #f 582 19 582 42 ("%%set-optional-parameter-default" "%%get-optional-parameter-default" "default" "jazz.allocate-optional-parameter" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Named-Parameter" #f 591 19 591 39 ("%%set-named-parameter-default" "%%get-named-parameter-default" "default" "jazz.allocate-named-parameter" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Rest-Parameter" #f 600 19 600 38 ("jazz.allocate-rest-parameter" "jazz.Object-Class" "reference-count" "type" "name" "jazz.Parameter")}
      {Lisp-Entry "jazz.Self-Binding" #f 609 19 609 36 ("jazz.allocate-self-binding" "jazz.Object-Class" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Macro-Symbol" #f 618 19 618 36 ("%%get-macro-symbol-setter" "setter" "%%get-macro-symbol-getter" "getter" "jazz.allocate-macro-symbol" "jazz.Object-Class" "type" "name" "jazz.Symbol-Binding")}
      {Lisp-Entry "jazz.Form-Binding" #f 628 19 628 36 ("jazz.Object-Class" "type" "name" "jazz.Lexical-Binding")}
      {Lisp-Entry "jazz.Special-Form" #f 637 19 637 36 ("%%get-special-form-walk" "walk" "jazz.allocate-special-form" "jazz.Object-Class" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Macro-Form" #f 646 19 646 34 ("%%get-macro-form-expander" "expander" "jazz.allocate-macro-form" "jazz.Object-Class" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Syntax-Form" #f 655 19 655 35 ("%%get-syntax-form-expander" "expander" "jazz.allocate-syntax-form" "jazz.Object-Class" "type" "name" "jazz.Form-Binding")}
      {Lisp-Entry "jazz.Annotated-Variable" #f 664 19 664 42 ("%%set-annotated-variable-type" "%%get-annotated-variable-type" "type" "%%get-annotated-variable-declared-type" "declared-type" "%%get-annotated-variable-variable" "variable" "jazz.allocate-annotated-variable" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Restricted-Binding" #f 675 19 675 42 ("%%get-restricted-binding-type" "type" "%%get-restricted-binding-binding" "binding" "jazz.allocate-restricted-binding" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Annotated-Frame" #f 685 19 685 39 ("%%get-annotated-frame-reset" "reset" "%%get-annotated-frame-variables" "variables" "jazz.allocate-annotated-frame" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Code" #f 695 19 695 28 ("%%get-code-source" "source" "%%get-code-type" "type" "%%get-code-form" "form" "jazz.allocate-code" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Access" #f 707 19 707 30 ("%%get-access-context" "context" "%%get-access-name" "name" "jazz.allocate-access" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Expression" #f 717 19 717 34 ("%%get-expression-source" "source" "%%get-expression-type" "type" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Proclaim" #f 732 19 732 32 ("%%get-proclaim-clauses" "clauses" "jazz.allocate-proclaim" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Constant" #f 741 19 741 32 ("%%get-constant-expansion" "expansion" "jazz.allocate-constant" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Delay" #f 750 19 750 29 ("%%get-delay-expression" "expression" "jazz.allocate-delay" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Quasiquote" #f 759 19 759 34 ("%%get-quasiquote-form" "form" "jazz.allocate-quasiquote" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Reference" #f 768 19 768 33 ("%%get-reference-binding" "binding" "jazz.allocate-reference" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Assignment" #f 777 19 777 34 ("%%get-assignment-value" "value" "%%get-assignment-binding" "binding" "jazz.allocate-assignment" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Lambda" #f 787 19 787 30 ("%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "jazz.allocate-lambda" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Let" #f 797 19 797 27 ("%%get-let-body" "body" "%%get-let-bindings" "bindings" "jazz.allocate-let" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Named-Let" #f 807 19 807 33 ("%%get-named-let-variable" "variable" "jazz.allocate-named-let" "jazz.Object-Class" "body" "bindings" "source" "type" "jazz.Let")}
      {Lisp-Entry "jazz.Letstar" #f 816 19 816 31 ("%%get-letstar-body" "body" "%%get-letstar-bindings" "bindings" "jazz.allocate-letstar" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Letrec" #f 826 19 826 30 ("%%get-letrec-body" "body" "%%get-letrec-bindings" "bindings" "jazz.allocate-letrec" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Receive" #f 836 19 836 31 ("%%get-receive-body" "body" "%%get-receive-expression" "expression" "%%get-receive-variables" "variables" "jazz.allocate-receive" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Body" #f 847 19 847 28 ("%%get-body-expressions" "expressions" "%%get-body-internal-defines" "internal-defines" "jazz.allocate-body" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Internal-Define" #f 857 19 857 39 ("%%get-internal-define-value" "value" "%%get-internal-define-variable" "variable" "jazz.allocate-internal-define" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Begin" #f 867 19 867 29 ("%%get-begin-expressions" "expressions" "jazz.allocate-begin" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Do" #f 876 19 876 26 ("%%get-do-body" "body" "%%get-do-result" "result" "%%get-do-test" "test" "%%get-do-bindings" "bindings" "jazz.allocate-do" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Call" #f 888 19 888 28 ("%%get-call-arguments" "arguments" "%%get-call-operator" "operator" "jazz.allocate-call" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.If" #f 898 19 898 26 ("%%get-if-no" "no" "%%get-if-yes" "yes" "%%get-if-test" "test" "jazz.allocate-if" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Cond" #f 909 19 909 28 ("%%get-cond-clauses" "clauses" "jazz.allocate-cond" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Case" #f 918 19 918 28 ("%%get-case-clauses" "clauses" "%%get-case-target" "target" "jazz.allocate-case" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.And" #f 928 19 928 27 ("%%get-and-expressions" "expressions" "jazz.allocate-and" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Or" #f 937 19 937 26 ("%%get-or-expressions" "expressions" "jazz.allocate-or" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Declare" #f 946 19 946 31 ("%%get-declare-declarations" "declarations" "jazz.allocate-declare" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Include" #f 955 19 955 33 ("%%get-c-include-name" "name" "jazz.allocate-c-include" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Declare" #f 964 19 964 33 ("%%get-c-declare-code" "code" "jazz.allocate-c-declare" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Named-Declare-Declaration" #f 973 19 973 51 ("%%get-c-named-declare-declaration-code" "code" "jazz.allocate-c-named-declare-declaration" "jazz.Object-Class" "source" "locator" "parent" "toplevel" "attributes" "compatibility" "access" "type" "name" "jazz.Declaration")}
      {Lisp-Entry "jazz.C-Initialize" #f 982 19 982 36 ("%%get-c-initialize-code" "code" "jazz.allocate-c-initialize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.C-Function" #f 991 19 991 34 ("%%get-c-function-expansion" "expansion" "jazz.allocate-c-function" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Parameterize" #f 1000 19 1000 36 ("%%get-parameterize-body" "body" "%%get-parameterize-bindings" "bindings" "jazz.allocate-parameterize" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Time-Special" #f 1010 19 1010 36 ("%%get-time-special-expression" "expression" "jazz.allocate-time" "jazz.Object-Class" "source" "type" "jazz.Expression")}
      {Lisp-Entry "jazz.Core-Dialect" #f 1019 19 1019 36 ("jazz.allocate-core-dialect" "jazz.Object-Class" "jazz.Dialect")}
      {Lisp-Entry "jazz.Core-Walker" #f 1028 19 1028 35 ("jazz.allocate-core-walker" "jazz.Object-Class" "errors" "warnings" "jazz.Walker")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "exception" "syntax" "classes.scm"} 1226584773
    {Lisp-Entry "core.exception.syntax.classes" #f 37 8 37 37 ()
      {Lisp-Entry "jazz.Exception" #f 45 19 45 33 ("jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Exception-Detail" #f 59 19 59 40 ("%%get-exception-detail-children" "children" "%%get-exception-detail-location" "location" "%%get-exception-detail-title" "title" "%%get-exception-detail-icon" "icon" "jazz.allocate-exception-detail" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Error" #f 71 19 71 29 ("%%get-error-message" "message" "jazz.allocate-error" "jazz.Object-Class" "jazz.Exception")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "syntax" "classes.scm"} 1226584773
    {Lisp-Entry "core.class.syntax.classes" #f 37 8 37 33 ()
      {Lisp-Entry "jazz.Object" #f 45 19 45 30 ()}
      {Lisp-Entry "jazz.Type" #f 57 19 57 28 ("jazz.Object")}
      {Lisp-Entry "%%subtype?" #f 70 20 70 30 ("type" "target")}
      {Lisp-Entry "%%subcategory?" #f 74 20 74 34 ("category" "target")}
      {Lisp-Entry "%%subclass?" #f 78 20 78 31 ("class" "target")}
      {Lisp-Entry "%%is?" #f 82 20 82 25 ("type" "object")}
      {Lisp-Entry "%%is-not?" #f 86 20 86 29 ("type" "object")}
      {Lisp-Entry "jazz.Category" #f 95 19 95 32 ("descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Type")}
      {Lisp-Entry "jazz.Class" #f 108 19 108 29 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "jazz.allocate-class" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Category")}
      {Lisp-Entry "%%class-subtype?" #f 123 20 123 36 ("%%get-category-ancestors" "%%vector-ref" "%%eq?" ",trg" "%%fx>=" "and" ",cls" "%%get-class-level" "class-level" "let" "cls" "trg" "lambda" "jazz.with-expression-value" "class" "target")}
      {Lisp-Entry "%%class-is?" #f 133 20 133 31 ("class" "object")}
      {Lisp-Entry "%%category-is?" #f 137 20 137 34 ("category" "object")}
      {Lisp-Entry "%%class?" #f 141 20 141 28 ("object")}
      {Lisp-Entry "%%object-class?" #f 145 20 145 35 ("object")}
      {Lisp-Entry "jazz.Object-Class" #f 154 19 154 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Boolean-Class" #f 163 19 163 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Char-Class" #f 164 19 164 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Numeric-Class" #f 165 19 165 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Number-Class" #f 166 19 166 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Numeric-Class")}
      {Lisp-Entry "jazz.Complex-Class" #f 167 19 167 37 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Number-Class")}
      {Lisp-Entry "jazz.Real-Class" #f 168 19 168 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Complex-Class")}
      {Lisp-Entry "jazz.Rational-Class" #f 169 19 169 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Real-Class")}
      {Lisp-Entry "jazz.Integer-Class" #f 170 19 170 37 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Rational-Class")}
      {Lisp-Entry "jazz.Fixnum-Class" #f 171 19 171 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Integer-Class")}
      {Lisp-Entry "jazz.Flonum-Class" #f 172 19 172 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Real-Class")}
      {Lisp-Entry "jazz.Sequence-Class" #f 173 19 173 38 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.List-Class" #f 174 19 174 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Null-Class" #f 175 19 175 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.List-Class")}
      {Lisp-Entry "jazz.Pair-Class" #f 176 19 176 34 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.List-Class")}
      {Lisp-Entry "jazz.String-Class" #f 177 19 177 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Vector-Class" #f 178 19 178 36 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.U8Vector-Class" #f 179 19 179 38 ("jazz.Class" "interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Sequence-Class")}
      {Lisp-Entry "jazz.Port-Class" #f 180 19 180 34 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Continuation-Class" #f 181 19 181 42 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Procedure-Class" #f 182 19 182 39 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Symbol-Class" #f 183 19 183 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Keyword-Class" #f 184 19 184 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Table-Class" #f 185 19 185 35 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Thread-Class" #f 186 19 186 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Promise-Class" #f 187 19 187 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Foreign-Class" #f 188 19 188 37 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Values-Class" #f 189 19 189 36 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.EOF-Class" #f 190 19 190 33 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Unspecified-Class" #f 191 19 191 41 ("interface-table" "class-table" "core-vtable" "core-virtual-names" "core-virtual-alist" "core-method-alist" "dispatch-table" "level" "instance-size" "slots" "interfaces" "ascendant" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Class")}
      {Lisp-Entry "jazz.Boolean" #f 194 19 194 31 ("jazz.Boolean-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Char" #f 195 19 195 28 ("jazz.Char-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Numeric" #f 196 19 196 31 ("jazz.Numeric-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Number" #f 197 19 197 30 ("jazz.Number-Class" "jazz.Numeric")}
      {Lisp-Entry "jazz.Complex" #f 198 19 198 31 ("jazz.Complex-Class" "jazz.Number")}
      {Lisp-Entry "jazz.Real" #f 199 19 199 28 ("jazz.Real-Class" "jazz.Complex")}
      {Lisp-Entry "jazz.Rational" #f 200 19 200 32 ("jazz.Rational-Class" "jazz.Real")}
      {Lisp-Entry "jazz.Integer" #f 201 19 201 31 ("jazz.Integer-Class" "jazz.Rational")}
      {Lisp-Entry "jazz.Fixnum" #f 202 19 202 30 ("jazz.Fixnum-Class" "jazz.Integer")}
      {Lisp-Entry "jazz.Flonum" #f 203 19 203 30 ("jazz.Flonum-Class" "jazz.Real")}
      {Lisp-Entry "jazz.Sequence" #f 204 19 204 32 ("jazz.Sequence-Class" "jazz.Object")}
      {Lisp-Entry "jazz.List" #f 205 19 205 28 ("jazz.List-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Null" #f 206 19 206 28 ("jazz.Null-Class" "jazz.List")}
      {Lisp-Entry "jazz.Pair" #f 207 19 207 28 ("jazz.Pair-Class" "jazz.List")}
      {Lisp-Entry "jazz.String" #f 208 19 208 30 ("jazz.String-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Vector" #f 209 19 209 30 ("jazz.Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.U8Vector" #f 210 19 210 32 ("jazz.U8Vector-Class" "jazz.Sequence")}
      {Lisp-Entry "jazz.Port" #f 211 19 211 28 ("jazz.Port-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Continuation" #f 212 19 212 36 ("jazz.Continuation-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Procedure" #f 213 19 213 33 ("jazz.Procedure-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Symbol" #f 214 19 214 30 ("jazz.Symbol-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Keyword" #f 215 19 215 31 ("jazz.Keyword-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Table" #f 216 19 216 29 ("jazz.Table-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Thread" #f 217 19 217 30 ("jazz.Thread-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Promise" #f 218 19 218 31 ("jazz.Promise-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Foreign" #f 219 19 219 31 ("jazz.Foreign-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Values" #f 220 19 220 30 ("jazz.Values-Class" "jazz.Object")}
      {Lisp-Entry "jazz.EOF" #f 221 19 221 27 ("jazz.EOF-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Unspecified" #f 222 19 222 35 ("jazz.Unspecified-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Interface" #f 230 19 230 33 ("%%get-interface-rank" "rank" "%%get-interface-ascendants" "ascendants" "jazz.allocate-interface" "jazz.Object-Class" "descendants" "ancestors" "virtual-size" "fields" "name" "jazz.Category")}
      {Lisp-Entry "jazz.Field" #f 240 19 240 29 ("%%get-field-name" "name" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "%%get-category-field" #f 244 20 244 40 ("field-name" "category")}
      {Lisp-Entry "%%set-category-field" #f 248 20 248 40 ("field" "field-name" "category")}
      {Lisp-Entry "jazz.Slot" #f 257 19 257 28 ("%%get-slot-initialize" "initialize" "%%get-slot-offset" "offset" "jazz.allocate-slot" "jazz.Object-Class" "name" "jazz.Field")}
      {Lisp-Entry "jazz.Property" #f 267 19 267 32 ("%%get-property-setter" "setter" "%%get-property-getter" "getter" "jazz.allocate-property" "jazz.Object-Class" "initialize" "offset" "name" "jazz.Slot")}
      {Lisp-Entry "jazz.Method" #f 277 19 277 30 ("%%set-method-implementation-rank" "%%get-method-implementation-rank" "implementation-rank" "%%set-method-category-rank" "%%get-method-category-rank" "category-rank" "%%set-method-implementation-tree" "%%get-method-implementation-tree" "implementation-tree" "%%set-method-implementation" "%%get-method-implementation" "implementation" "%%set-method-dispatch-type" "%%get-method-dispatch-type" "dispatch-type" "jazz.allocate-method" "jazz.Object-Class" "name" "jazz.Field")}
      {Lisp-Entry "jazz.Method-Node" #f 290 19 290 35 ("%%set-method-node-children" "%%get-method-node-children" "children" "%%set-method-node-next-implementation" "%%get-method-node-next-implementation" "next-implementation" "%%set-method-node-next-node" "%%get-method-node-next-node" "next-node" "%%set-method-node-implementation" "%%get-method-node-implementation" "implementation" "%%set-method-node-category" "%%get-method-node-category" "category" "jazz.allocate-method-node" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Queue" #f 303 19 303 29 ("%%set-queue-current" "%%get-queue-current" "current" "%%set-queue-last-anchor" "%%get-queue-last-anchor" "last-anchor" "%%set-queue-last-list" "%%get-queue-last-list" "last-list" "%%set-queue-list" "%%get-queue-list" "list" "jazz.allocate-queue" "jazz.Object-Class" "jazz.Object")}}})
"clipboard"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "carbon" "clipboard.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.carbon.clipboard" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "*clipboard*" #f 48 12 48 23 ()}
      {Lisp-Entry "carbon-initialize-clipboard" #f 51 20 51 47 ("*clipboard*" "set!" "PasteboardRef" "c-function" "func" "let")}
      {Lisp-Entry "carbon-set-clipboard-text" #f 59 20 59 45 ("*clipboard*" "void" "scheme-object" "PasteboardRef" "c-function" "func" "let" "text")}
      {Lisp-Entry "carbon-get-clipboard-text" #f 71 20 71 45 ("*clipboard*" "scheme-object" "PasteboardRef" "c-function" "func" "let")}}})
"coall-macro"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "coall-macro.scm"} 1226584783
    {Lisp-Entry "c-pass" #f 6 20 6 26 ("begin" "c" "'c" "copass" "eq?" "if" "body")}
    {Lisp-Entry "s-pass" #f 12 20 12 26 ("begin" "s" "'s" "copass" "eq?" "if" "body")}
    {Lisp-Entry "c-pass-define" #f 18 20 18 33 ("begin" ",@body" ",name" "define" "c" "'c" "copass" "eq?" "if" "body" "name")}
    {Lisp-Entry "s-pass-define" #f 25 20 25 33 ("begin" ",@body" ",name" "define" "s" "'s" "copass" "eq?" "if" "body" "name")}})
"codebug"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "codebug.scm"} 1226584783})
"codec"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "license" "codec.jazz"} 1226584782
    {Lisp-Entry "jazz.license.codec" #f 37 9 37 27 ("jazz")
      {Lisp-Entry "Hash32" #f 44 12 44 18 ()}
      {Lisp-Entry "unhash32" #f 48 13 48 21 ("List" "coerce" "Hash32" "get-rank" "c" "function" "map" "string")}
      {Lisp-Entry "recode" #f 54 20 54 26 ("get-output" ">" "when" "decrease!" "bit-mask" "bitwise-and" "put" "-" "extra-bits" ">=" "while" "increase!" "arithmetic-shift" "bitwise-ior" "set!" "function" "for-each" "List-Factory" "new" "out" "bit-in-value" "0" "value" "cdr" "in" "let" "bit-out" "bit-in" "list")}
      {Lisp-Entry "encode32" #f 73 20 73 28 ("String" "5" "8" "recode" "Hash32" "element" "n" "function" "map" "coerce" "list")}
      {Lisp-Entry "decode32" #f 80 20 80 28 ("8" "5" "recode" "unhash32" "remove-nils" "list" "let" "string")}
      {Lisp-Entry "valid32?" #f 85 20 85 28 ("unhash32" "not-null?" "every?" "string")}}})
"coexternal"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "coexternal.scm"} 1226584783
    {Lisp-Entry "generate-in" #f 3 9 3 20 ("number->string" "string-append" "string->symbol" "n")}
    {Lisp-Entry "generate-p" #f 7 9 7 19 ("number->string" "string-append" "string->symbol" "n")}
    {Lisp-Entry "coparam-direction" #f 11 9 11 26 ("car" "coparam")}
    {Lisp-Entry "coparam-compiled-type" #f 15 9 15 30 ("cadr" "coparam")}
    {Lisp-Entry "coparam-type" #f 19 9 19 21 ("coparam")}
    {Lisp-Entry "remove-null" #f 26 9 26 20 ("cons" "else" "cdr" "remove-null" "car" "null?" "cond" "list")}
    {Lisp-Entry "coexternal-input-parameter" #f 40 9 40 35 ("generate-in" "coparam-direction" "out" "'out" "eq?" "if" "n" "coparam")}
    {Lisp-Entry "coexternal-binding" #f 46 9 46 27 ("out" ",enreffer" "in-out" ",inner" ",p-name" "in" "case" ",in-name" ",encoder" "if" "inner" "find-type-options" "type-generate-foreign?" "foreign?" "-encode" "'-encode" "encoder" "-enref" "'-enref" "symbol-append" "enreffer" "coparam-direction" "direction" "coparam-type" "type" "generate-p" "p-name" "generate-in" "in-name" "let*" "n" "coparam")}
    {Lisp-Entry "coexternal-input-cleanup" #f 66 9 66 33 (",p-name" ",freer" "find-type-options" "type-generate-foreign?" "foreign?" "-free" "'-free" "symbol-append" "freer" "coparam-type" "type" "generate-p" "p-name" "let*" "coparam-direction" "in" "'in" "eq?" "not" "if" "n" "coparam")}
    {Lisp-Entry "coexternal-output-result" #f 78 9 78 33 (",p-name" ",dereffer" ",decoder" "find-type-options" "type-generate-foreign?" "foreign?" "-decode" "'-decode" "decoder" "-deref" "'-deref" "symbol-append" "dereffer" "coparam-type" "type" "generate-p" "p-name" "let*" "coparam-direction" "in" "'in" "eq?" "if" "n" "coparam")}
    {Lisp-Entry "generate-coexternal" #f 91 9 91 28 ("'res" "0" ",@output-result" "list" "=" "begin" "validate-hresult" "if" "coexternal-input-cleanup" "generate-p" "%%" "'%%" "symbol-append" "res" "coexternal-binding" "coexternal-input-parameter" "coptr" ",function" "define" "coexternal-output-result" "remove-null" "output-result" "map" "lambda" "proc" "length" "+" "1" "naturals" "count" "let*" "VT_HRESULT" "'VT_HRESULT" "eq?" "hresult?" "cdr" "coparams" "car" "function" "let" "signature" "result-type")}
    {Lisp-Entry "compiled-coparam-prototype" #f 119 9 119 35 ("string-append" "type-ctype" "type-pure-ctype" "value" "'value" "eq?" "if" "used-ctype" "type-pass-by" "pass-by" "find-type-options" "options" "coparam-compiled-type" "cotype" "let*" "coparam")}
    {Lisp-Entry "compiled-coparam-argument" #f 129 9 129 34 ("2" "+" "number->string" "string-append" "value" "'value" "eq?" "if" "deref-string" "type-pass-by" "pass-by" "find-type-options" "options" "coparam-compiled-type" "cotype" "let*" "n" "coparam")}
    {Lisp-Entry "generate-compiled-coexternal" #f 137 9 137 37 ("length" "0" "naturals" "compiled-coparam-argument" "number->string" "compiled-coparam-prototype" "apply" "find-type-options" "type-ctype" "string-append" ",result-type" "coparam-compiled-type" "map" "VT_UNKNOWN" "'VT_UNKNOWN" "cons" "c-lambda" "%%" "'%%" "symbol-append" "define" "cdr" "coparams" "car" "function" "let" "signature" "result-type" "offset")}
    {Lisp-Entry "coexternal-macro" #f 160 9 160 25 ("begin" "else" "generate-coexternal" "s" "generate-compiled-coexternal" "c" "copass" "case" "signature" "result-type" "offset")}
    {Lisp-Entry "cemt" #f 170 9 170 13 ("Close" "4" "OpenDatabase" "22" "3" "VT_VARIANT" "get-Item" "12" "2" "VT_UNKNOWN" "get-Workspaces" "15" "1" "out" "VT_PTR" "in-out" "VT_BSTR" "in" "foo-VT_BSTR" "VT_HRESULT" "'VT_HRESULT" "28" "coexternal-macro" "0" "case" "n")}})
"coexternal-macro"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "coexternal-macro.scm"} 1226584783
    {Lisp-Entry "coexternal" #f 0 20 0 30 ("coexternal-macro" "signature" "result-type" "offset")}})
"colors"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "literals" "colors.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.literals.colors" #f 37 9 37 32 ("Debug" "'Debug" "51" "Slide-Bullet" "'Slide-Bullet" "Slide-Title" "'Slide-Title" "Hyperlink" "'Hyperlink" "Unfocused-Selected-Text" "'Unfocused-Selected-Text" "Focused-Selected-Text" "'Focused-Selected-Text" "194" "222" "Unfocused-Selection" "'Unfocused-Selection" "49" "Focused-Selection" "'Focused-Selection" "207" "188" "167" "Uneditable-Border" "'Uneditable-Border" "185" "157" "127" "Entry-Border" "'Entry-Border" "Outline-Border" "'Outline-Border" "191" "209" "208" "Group-Border" "'Group-Border" "240" "248" "249" "Light-Background" "'Light-Background" "226" "239" "241" "Draw-Edge-Light" "'Draw-Edge-Light" "Draw-Edge-Medium" "'Draw-Edge-Medium" "100" "111" "113" "Draw-Edge-Dark" "'Draw-Edge-Dark" "227" "84" "Active-Caption" "'Active-Caption" "225" "Tooltip" "'Tooltip" "168" "172" "Dark" "'Dark" "216" "233" "Medium" "'Medium" "Light" "'Light" "161" "Dark-Purple" "'Dark-Purple" "Purple" "'Purple" "215" "Light-Purple" "'Light-Purple" "Dark-Blue" "'Dark-Blue" "Blue" "'Blue" "Light-Blue" "'Light-Blue" "31" "128" "18" "Dark-Green" "'Dark-Green" "Green" "'Green" "122" "254" "112" "Light-Green" "'Light-Green" "55" "197" "200" "Dark-Yellow" "'Dark-Yellow" "Yellow" "'Yellow" "153" "Light-Yellow" "'Light-Yellow" "193" "Soft-Yellow" "'Soft-Yellow" "106" "213" "Dark-Orange" "'Dark-Orange" "91" "121" "Ochre" "'Ochre" "140" "Orange" "'Orange" "102" "204" "Light-Orange" "'Light-Orange" "179" "Dark-Red" "'Dark-Red" "Red" "'Red" "171" "Light-Red" "'Light-Red" "90" "Text-Gray" "'Text-Gray" "132" "Dark-Gray" "'Dark-Gray" "218" "Gray" "'Gray" "236" "Light-Gray" "'Light-Gray" "255" "White" "'White" "blue:" "green:" "0" "red:" "name:" "Color" "new" "function" "Black" "'Black" "register-color" "jazz")}})
"common"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "performance" "common.scm"} 1226584790
    {Lisp-Entry "test.performance.common" #f 0 8 0 31 ("W" "Z" "X" "jazz.encapsulate-class" "separate" "run-time-bindings" "extended-bindings" "safe" "not" "standard-bindings" "block" "declare")
      {Lisp-Entry "ff" #f 11 9 11 11 ("1" "%%fx-" "ff" "%%pair?" "begin" "0" "%%fx>" "if" "n")}
      {Lisp-Entry "gg" #f 24 9 24 11 ("1" "%%fx-" "gg" "%%pair?" "begin" "0" "%%fx>" "if" "n")}
      {Lisp-Entry "f-module-block/standard/not-safe" #f 42 9 42 41 ("1" "%%fx-" "g-module-block/standard/not-safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/standard/not-safe" #f 48 9 48 41 ("1" "%%fx-" "f-module-block/standard/not-safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-block/runtime/safe" #f 66 9 66 36 ("1" "%%fx-" "g-module-block/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/runtime/safe" #f 72 9 72 36 ("1" "%%fx-" "f-module-block/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-separate/runtime/safe" #f 90 9 90 39 ("1" "%%fx-" "g-module-separate/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-separate/runtime/safe" #f 96 9 96 39 ("1" "%%fx-" "f-module-separate/runtime/safe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module-block/runtime/notsafe" #f 114 9 114 39 ("1" "%%fx-" "g-module-block/runtime/notsafe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module-block/runtime/notsafe" #f 120 9 120 39 ("1" "%%fx-" "f-module-block/runtime/notsafe" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "f-module" #f 137 9 137 17 ("1" "%%fx-" "g-module" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "g-module" #f 143 9 143 17 ("1" "%%fx-" "f-module" "0" "%%fx=" "if" "n" "s")}
      {Lisp-Entry "X" #f 160 19 160 20 ("allocate-x" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "X" #f 163 27 163 28 ()}
      {Lisp-Entry "new-x" #f 168 9 168 14 ("X" "allocate-x")}
      {Lisp-Entry "f-generic" ("X") 172 22 172 31 ("n")}
      {Lisp-Entry "f-generic" ("X") 174 23 174 32 ("1" "%%fx-" "x" "g-generic" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "g-generic" ("X") 180 22 180 31 ("n")}
      {Lisp-Entry "g-generic" ("X") 182 23 182 32 ("1" "%%fx-" "x" "f-generic" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "Z" #f 193 27 193 28 ()}
      {Lisp-Entry "f-vtable" ("Z") 196 30 196 38 ("n")}
      {Lisp-Entry "g-vtable" ("Z") 197 30 197 38 ("n")}
      {Lisp-Entry "new-z" #f 200 9 200 14 ("Z" "allocate-z")}
      {Lisp-Entry "f-vtable" ("Z") 204 21 204 29 ("1" "%%fx-" "z" "g-vtable" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "g-vtable" ("Z") 210 21 210 29 ("1" "%%fx-" "z" "f-vtable" "0" "%%fx=" "if" "n")}
      {Lisp-Entry "W" #f 219 27 219 28 ()}
      {Lisp-Entry "f-vtable" ("W") 222 21 222 29 ("n")}
      {Lisp-Entry "h" ("W") 226 30 226 31 ()}
      {Lisp-Entry "h" ("W") 229 21 229 22 ()}}})
"constructors"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "literals" "constructors.jazz"} 1226584783
    {Lisp-Entry "jazz.literals.constructors" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "construct-point" #f 64 13 64 28 ("Point" "new" "v" "h")}
      {Lisp-Entry "construct-dimension" #f 73 13 73 32 ("Dimension" "new" "height" "width")}
      {Lisp-Entry "construct-cell" #f 82 13 82 27 ("Cell" "new" "col" "row")}
      {Lisp-Entry "construct-rect" #f 91 13 91 27 ("Rect" "new" "bottom" "right" "top" "left")}
      {Lisp-Entry "construct-range" #f 100 13 100 28 ("Range" "new" "end" "start")}
      {Lisp-Entry "construct-action" #f 109 13 109 29 ("Action" "new" "properties" "action-name" "action-context")}
      {Lisp-Entry "construct-exception-detail" #f 118 13 118 39 ("Exception-Detail" "new" "children" "location" "title" "icon")}
      {Lisp-Entry "construct-box" #f 127 13 127 26 ("car" "Box" "new" "null?" "if" "rest")}
      {Lisp-Entry "construct-shortcut" #f 138 13 138 31 ("last" "butlast" "Shortcut" "new" "rest")}
      {Lisp-Entry "construct-locales" #f 147 13 147 30 ("Locales" "new" "apply" "rest")}
      {Lisp-Entry "construct-color" #f 156 13 156 28 ("Color" "new" "apply" "alpha:" "getf" "registered-color" "if" "others" "name" "bind-keywords" "rest")}
      {Lisp-Entry "construct-font" #f 168 13 168 27 ("Font" "new" "apply" "registered-font" "if" "others" "name" "bind-keywords" "rest")}
      {Lisp-Entry "construct-pen" #f 180 13 180 26 ("registered-pen" "name" "name:")}
      {Lisp-Entry "construct-file" #f 189 13 189 27 ("File" "new" "rest")}
      {Lisp-Entry "construct-directory" #f 198 13 198 32 ("Directory" "new" "rest")}
      {Lisp-Entry "construct-directory-group" #f 207 13 207 38 ("Directory-Group" "new" "rest")}
      {Lisp-Entry "construct-host" #f 216 13 216 27 ("Host" "new" "apply" "rest")}
      {Lisp-Entry "construct-datatype" #f 225 13 225 31 ("Datatype" "new" "rest")}
      {Lisp-Entry "construct-systype" #f 234 13 234 30 ("Systype" "new" "default-value" "scale" "precision" "size" "name")}
      {Lisp-Entry "construct-ior" #f 243 13 243 26 ("IOR" "new" "values" "reference" "remotable" "port" "host")}
      {Lisp-Entry "construct-guid" #f 254 13 254 27 ("GUID" "new" "rest")}
      {Lisp-Entry "construct-format" #f 263 13 263 29 ("Format" "new" "apply" "rest")}
      {Lisp-Entry "construct-text-style" #f 272 13 272 33 ("Text-Style" "new" "apply" "rest")}
      {Lisp-Entry "construct-hyperlink-style" #f 281 13 281 38 ("Hyperlink-Style" "new" "apply" "rest")}
      {Lisp-Entry "construct-text" #f 290 13 290 27 ("Text" "new" "apply" "rest")}
      {Lisp-Entry "construct-formatted-text" #f 299 13 299 37 ("Formatted-Text" "new" "apply" "rest")}
      {Lisp-Entry "construct-bitmap-resource" #f 308 13 308 38 ("Bitmap-Resource" "new" "name")}
      {Lisp-Entry "construct-icon-resource" #f 317 13 317 36 ("Icon-Resource" "new" "name")}
      {Lisp-Entry "construct-cursor-resource" #f 326 13 326 38 ("Cursor-Resource" "new" "name")}
      {Lisp-Entry "construct-event" #f 335 13 335 28 ("Event" "new" "properties" "kind")}
      {Lisp-Entry "construct-event-handler" #f 344 13 344 36 ("properties:" "method-name:" "target-name:" "Event-Handler" "new" "properties" "method-name" "target-name")}
      {Lisp-Entry "construct-selection-handler" #f 353 13 353 40 ("properties:" "force?:" "method-name:" "target-name:" "Selection-Handler" "new" "properties" "force?" "method-name" "target-name")}
      {Lisp-Entry "construct-version" #f 362 13 362 30 ("Version" "new" "parse-stage" "revision" "release" "stage" "receive" "rest" "minor" "major")}
      {Lisp-Entry "parse-stage" #f 367 13 367 24 ("values" "integer?" "or" "cdr" "set!" "car" "prog1" "0" "null?" "if" "function" "next" "let" "rest")}
      {Lisp-Entry "construct-c-file-entry" #f 384 13 384 35 ("seconds->time" "C-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-c-category-entry" #f 388 13 388 39 ("C-Category-Entry" "new" "name")}
      {Lisp-Entry "construct-c-define-entry" #f 392 13 392 37 ("C-Define-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-c-include-entry" #f 396 13 396 38 ("C-Include-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-c-export-entry" #f 400 13 400 37 ("C-Export-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-css-file-entry" #f 409 13 409 37 ("seconds->time" "CSS-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-css-entry" #f 413 13 413 32 ("CSS-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-java-file-entry" #f 422 13 422 38 ("seconds->time" "Java-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-javascript-file-entry" #f 431 13 431 44 ("seconds->time" "JavaScript-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-javascript-variable-entry" #f 435 13 435 48 ("JavaScript-Variable-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-javascript-function-entry" #f 439 13 439 48 ("JavaScript-Function-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-lua-file-entry" #f 448 13 448 37 ("seconds->time" "Lua-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-lua-function-entry" #f 452 13 452 41 ("Lua-Function-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-properties-file-entry" #f 461 13 461 44 ("seconds->time" "Properties-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-properties-entry" #f 465 13 465 39 ("Properties-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-python-file-entry" #f 474 13 474 40 ("seconds->time" "Python-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-python-class-entry" #f 478 13 478 41 ("Python-Class-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-python-def-entry" #f 482 13 482 39 ("Python-Def-Entry" "new" "column" "line" "name")}
      {Lisp-Entry "construct-lisp-file-entry" #f 491 13 491 38 ("seconds->time" "Lisp-File-Entry" "new" "definitions" "time" "file")}
      {Lisp-Entry "construct-lisp-entry" #f 495 13 495 33 ("Lisp-Entry" "new" "definitions" "references" "end-column" "end-line" "column" "line" "signature" "name")}}})
"continuation"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "continuation.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.continuation" #f 37 8 37 38 ()
      {Lisp-Entry "jazz.continuation?" #f 42 13 42 31 ("%%continuation?" "obj")}
      {Lisp-Entry "jazz.continuation-capture" #f 46 13 46 38 ("%%continuation-capture" "proc")}
      {Lisp-Entry "jazz.continuation-graft" #f 50 13 50 36 ("%%continuation-graft" "proc" "cont")}
      {Lisp-Entry "jazz.continuation-return" #f 54 12 54 36 ("##continuation-return")}}})
"coruntime"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "coruntime.scm"} 1226584783
    {Lisp-Entry "naturals" #f 0 9 0 17 ("1" "+" "naturals" "cons" "else" "=" "error" ">" "cond" "y" "x")}
    {Lisp-Entry "zero-fill" #f 6 9 6 18 ("-" "make-string" "string-append" ">" "if" "string-length" "len" "let" "n" "str")}
    {Lisp-Entry "last-hresult" #f 13 8 13 20 ("0")}
    {Lisp-Entry "validate-hresult" #f 14 9 14 25 ("16" "number->string" "string-append" "else" "#x800a0d5d" "#x80070057" "#x800401f0" "#x80040154" "error" "#x80004002" "0" "case" "hresult")}
    {Lisp-Entry "COINIT_APARTMENTTHREADED" #f 37 8 37 32 ("2")}
    {Lisp-Entry "CLSCTX_SERVER" #f 38 8 38 21 ("16" "4" "1" "+")}
    {Lisp-Entry "CoInitializeEx" #f 41 9 41 23 ("%%CoInitializeEx" "validate-hresult" "flags" "n/a")}
    {Lisp-Entry "CoCreateInstance" #f 45 9 45 25 ("VT_UNKNOWN-deref" "validate-hresult" "GUID-free" "CLSCTX_SERVER" "%%CoCreateInstance" "res" "VT_UNKNOWN-enref" "coptr*" "interface-guid" "GUID-encode" "class-guid" "let" "interface" "class")}})
"coruntime-c"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "coruntime-c.scm"} 1226584783
    {Lisp-Entry "LoadLibrary" #f 11 8 11 19 ("HANDLE" "wchar_t-string" "c-lambda")}
    {Lisp-Entry "FreeLibrary" #f 13 8 13 19 ("void" "HANDLE" "c-lambda")}
    {Lisp-Entry "%%CoInitializeEx" #f 22 8 22 24 ("HRESULT" "DWORD" "VOID*" "c-lambda")}
    {Lisp-Entry "%%CoCreateInstance" #f 26 8 26 26 ("HRESULT" "VT_PTR" "DWORD" "VT_UNKNOWN" "GUID" "c-lambda")}})
"costruct"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "costruct.scm"} 1226584783
    {Lisp-Entry "s-define-if" #f 3 20 3 31 ("body" "test" "name")}
    {Lisp-Entry "c-define-if" #f 10 20 10 31 ("body" "test" "name")}
    {Lisp-Entry "generate-member-accessors" #f 17 9 17 34 ("MEMBER-size" "MEMBER-ref" "MEMBER-set!" "MEMBER-get" "list" "proc" "caddr" "cddr" "null?" "if" "subsize" "cadr" "subname" "car" "subtype" "let" "declaration" "lambda" "map" "append" "apply" "members" "type")}
    {Lisp-Entry "costruct-macro" #f 63 9 63 23 ("generate-member-accessors" "append" ",type" "cotype" "begin" "generate-foreign?:" "generate-foreign-default" "symbol->string" "list" "ctype:" "memq" "if" "ctype-default" "let" "members" "options" "type")}
    {Lisp-Entry "csmt" #f 75 9 75 13 ("8" "Data4" "BYTE" "Data3" "Data2" "WORD" "Data1" "DWORD" "ctype:" "GUID" "'GUID" "costruct-macro")}})
"costruct-macro"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "costruct-macro.scm"} 1226584783
    {Lisp-Entry "costruct" #f 0 20 0 28 ("costruct-macro" "members" "options" "type")}})
"costructs"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "costructs.scm"} 1226584783})
"cotest"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "cotest.scm"} 1226584783
    {Lisp-Entry "zz0?" #f 0 8 0 12 ()}
    {Lisp-Entry "z0" #f 1 9 1 11 ("set!" "COINIT_APARTMENTTHREADED" "CoInitializeEx" "LoadLibrary" "begin" "zz0?" "if")}
    {Lisp-Entry "zz1" #f 10 8 10 11 ()}
    {Lisp-Entry "z1" #f 11 9 11 11 ("error" "DAO-DBEngine-interface" "DAO-DBEngine-class" "CoCreateInstance" "zz1" "set!" "zz0?" "if")}
    {Lisp-Entry "zz2" #f 18 8 18 11 ()}
    {Lisp-Entry "z2" #f 19 9 19 11 ("error" "get-Workspaces" "zz2" "set!" "zz1" "if")}
    {Lisp-Entry "zz3" #f 26 8 26 11 ()}
    {Lisp-Entry "z3" #f 27 9 27 11 ("error" "0" "car" "get-Item" "zz3" "set!" "zz2" "if")}
    {Lisp-Entry "zz4" #f 34 8 34 11 ()}
    {Lisp-Entry "z4" #f 35 9 35 11 ("error" "0" "car" "OpenDatabase" "zz4" "set!" "zz3" "if")}
    {Lisp-Entry "z9" #f 42 9 42 11 ("zz1" "zz2" "zz3" "set!" "CoRelease" "begin" "car" "Close" "zz4" "if")}
    {Lisp-Entry "get-Workspaces" #f 54 9 54 23 ("VT_UNKNOWN-deref" "list" "validate-hresult" "%%get-Workspaces" "res" "VT_UNKNOWN-enref" "p1" "let" "coptr")}
    {Lisp-Entry "get-Item" #f 61 9 61 17 ("VT_UNKNOWN-deref" "list" "VT_VARIANT-free" "validate-hresult" "%%get-Item" "res" "VT_UNKNOWN-enref" "p2" "VT_VARIANT-encode" "p1" "let" "in1" "coptr")}
    {Lisp-Entry "OpenDatabase" #f 70 9 70 21 ("VT_UNKNOWN-deref" "list" "VT_VARIANT-free" "VT_BSTR-free" "validate-hresult" "%%OpenDatabase" "res" "VT_UNKNOWN-enref" "p5" "p4" "p3" "VT_VARIANT-encode" "p2" "VT_BSTR-encode" "p1" "let" "in4" "in3" "in2" "in1" "coptr")}
    {Lisp-Entry "Close" #f 85 9 85 14 ("list" "validate-hresult" "%%Close" "res" "let" "coptr")}})
"cotype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "cotype.scm"} 1226584783
    {Lisp-Entry "s-define-if" #f 3 20 3 31 ("body" "extra" "name")}
    {Lisp-Entry "c-define-if" #f 11 20 11 31 ("body" "extra" "name")}
    {Lisp-Entry "cotype-cast" #f 19 9 19 20 ("ctype-string" "stype")}
    {Lisp-Entry "generate-declarative-type-options" #f 23 9 23 42 ("TYPE+-declare" "TYPE*-declare" "TYPE-declare" "list" "proc" "lambda" "map" "options")}
    {Lisp-Entry "generate-imperative-type-options" #f 29 9 29 41 ("TYPE+-ref" "TYPE+-set!" "TYPE+-get" "TYPE+-free" "TYPE+-alloc" "TYPE+-cast" "TYPE-deref" "TYPE-enref" "TYPE*-set!" "TYPE*-get" "TYPE*-free" "TYPE*-alloc" "TYPE*-cast" "TYPE-decode" "TYPE-encode" "TYPE-set!" "TYPE-get" "TYPE-free" "TYPE-alloc" "TYPE-cast" "TYPE-sizeof" "TYPE-register" "list" "proc" "lambda" "map" "options")}
    {Lisp-Entry "TYPE+-get" #f 182 9 182 18 ("begin" "else" ",reffer+" ",getter" "n" "array" "lambda" "-get" "'-get" "getter" "+-ref" "'+-ref" "reffer+" "not" "s" "'s" ",type" "unsigned-int" ",stype+" "c-lambda" ",getter+" "define" "type-stype+" "stype+" "let" "type-native?" "c" "'c" "copass" "eq?" "type-generate-array?" "and" "cond" "+-get" "'+-get" "symbol-append" "getter+" "car" "type" "let*" "options")}
    {Lisp-Entry "TYPE+-set!" #f 199 9 199 19 ("begin" "else" ",reffer+" ",setter" "data" "n" "array" "lambda" "-set!" "'-set!" "setter" "+-ref" "'+-ref" "reffer+" "not" "s" "'s" "void" ",type" "unsigned-int" ",stype+" "c-lambda" ",setter+" "define" "type-stype+" "stype+" "let" "type-native?" "c" "'c" "copass" "eq?" "type-generate-array?" "and" "cond" "+-set!" "'+-set!" "symbol-append" "setter+" "car" "type" "let*" "options")}
    {Lisp-Entry "cotype-macro" #f 227 9 227 21 ("generate-imperative-type-options" "generate-declarative-type-options" "not" "if" "begin" "options" "add-type-options" "find-type-options" "previously-declared-options" "let" "base-options" "type")}
    {Lisp-Entry "codeclare-macro" #f 239 9 239 24 ()}})
"cotype-macro"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "cotype-macro.scm"} 1226584783
    {Lisp-Entry "cotype" #f 0 20 0 26 ("cotype-macro" "options" "type")}
    {Lisp-Entry "codeclare" #f 4 20 4 29 ("codeclare-macro")}})
"cotypes"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "cotypes.scm"} 1226584783})
"coutils"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "coutils.scm"} 1226584783
    {Lisp-Entry "symbol-append" #f 0 9 0 22 ("symbol->string" "map" "string-append" "apply" "string->symbol" "rest")}
    {Lisp-Entry "keyword-value" #f 4 9 4 22 ("cadr" "if" "memq" "found" "let" "default" "list" "keyword")}})
"d"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "test" "d.scm"} 1226584774
    {Lisp-Entry "core.test.d" #f 0 9 0 20 ("test")
      {Lisp-Entry "-" #f 2 8 2 9 ()}
      {Lisp-Entry "/" #f 3 8 3 9 ()}}})
"debug"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "debug.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.debug" #f 37 8 37 31 ()
      {Lisp-Entry "inspect" #f 41 9 41 16 ("jazz.serial->object" "integer?" "if" "jazz.inspect-object" "obj")}
      {Lisp-Entry "resume" #f 46 9 46 15 ("jazz.system.process.Process.Process.resume-loop" "'jazz.system.process.Process.Process.resume-loop" "resume-loop" "jazz.dialect.language.get-process" "'jazz.dialect.language.get-process" "jazz.global-value" "get-process" "let")}}})
"debug-macro"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "debug-macro.scm"} 1226584783
    {Lisp-Entry "echo-macro" #f 1 20 1 30 ("newline" "write" "zz" "let" "text")}
    {Lisp-Entry "comment-out" #f 7 20 7 31 ("rest")}})
"declares"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "performance" "declares.scm"} 1226584790
    {Lisp-Entry "f-run-time-bindings/safe" #f 3 9 3 33 ("car" "x")}
    {Lisp-Entry "f-not-run-time-bindings/safe" #f 10 9 10 37 ("car" "x")}
    {Lisp-Entry "f-run-time-bindings/not-safe" #f 17 9 17 37 ("car" "x")}
    {Lisp-Entry "f-not-run-time-bindings/not-safe" #f 24 9 24 41 ("car" "x")}
    {Lisp-Entry "f-standard-bindings/not-run-time-bindings/not-safe" #f 32 9 32 59 ("##pair?" "car" "x")}
    {Lisp-Entry "f-standard-bindings/run-time-bindings/not-safe" #f 41 9 41 55 ("##pair?" "car" "x")}
    {Lisp-Entry "f-standard-bindings/extended-bindings/not-safe" #f 50 9 50 55 ("##pair?" "car" "x")}
    {Lisp-Entry "f-block" #f 57 9 57 16 ("g-block")}
    {Lisp-Entry "g-block" #f 60 9 60 16 ("f-block")}
    {Lisp-Entry "f-separate" #f 66 9 66 19 ("g-separate")}
    {Lisp-Entry "g-separate" #f 69 9 69 19 ("f-separate")}})
"define-class"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "syntax" "define-class.scm"} 1226584773
    {Lisp-Entry "core.class.syntax.define-class" #f 37 8 37 38 ()
      {Lisp-Entry "jazz.define-class" #f 40 20 40 37 (",inherited-slot-names" "',inherited-slot-names" ",',inherited-slot-names" "',',inherited-slot-names" "jazz.validate-inherited-slots" "jazz.identifier-name" "jazz.set-core-class" ",instance-size" "',instance-size" ",',instance-size" ",slot-names" "',slot-names" ",',slot-names" "',',slot-names" ",ascendant-accessor" "',ascendant-accessor" ",',ascendant-accessor" "eq?" "test:" "%%make-table" "',',name" ",class-accessor" "',class-accessor" ",',class-accessor" "jazz.new-core-class" "',name" ",',name" "%%symbol->string" "%%string-append" "%%string->symbol" "jazz.object-size" "%%fx+" "jazz.naturals" "'%%object-set!" "%%object-set!" ",value" ",slot-setter" "'%%object-ref" ",rank" "%%object-ref" "jazz.expected-error" "jazz.object-of-class?" "%%core-assertion" ",object" ",slot-getter" "define" "value" "jazz.generate-symbol" "object" "%%cddr" "slot-setter" "%%cadr" "slot-getter" "%%car" "slot-name" "let" "rank" "slot" "map" "%%object" "'%%object" "%%list" ",@all-variables" "class" ",constructor" "jazz.define-macro" "%%null?" ",name" "jazz.define-variable" "jazz.debug-core?" "if" "begin" "instance-size" "all-variables" "slot-names" "ascendant-size" "ascendant-accessor" "class-accessor" "lambda" "jazz.parse-define-class" "slots" "constructor" "class-name" "inherited-slot-names" "ascendant-name" "name")
        {Lisp-Entry "jazz.parse-define-class" #f 41 11 41 34 ("jazz.object-size" "%%fx+" "instance-size" "all-length" "%%symbol->string" "jazz.generate-symbol" "slot-name" "lambda" "all-variables" "%%append" "all-slot-names" "car" "map" "slot-names" "%%length" "ascendant-size" "ascendant-accessor" "%%null?" "if" "class-accessor" "let*" "proc" "slots" "class-name" "inherited-slot-names" "ascendant-name")}}
      {Lisp-Entry "jazz.define-class-runtime" #f 97 20 97 45 ("name")}}})
"define-method"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "syntax" "define-method.scm"} 1226584773
    {Lisp-Entry "core.class.syntax.define-method" #f 37 8 37 39 ()
      {Lisp-Entry "jazz.define-virtual" #f 40 20 40 39 ("jazz.expand-define-virtual" "%%car" "%%null?" "if" "bootstrap-type?" "let" "rest" "signature")}
      {Lisp-Entry "jazz.define-virtual-runtime" #f 45 20 45 47 ("jazz.expand-define-virtual-runtime" "signature")}
      {Lisp-Entry "jazz.define-method" #f 49 20 49 38 ("jazz.expand-define-method" "body" "signature")}}})
"define-method-expander"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "syntax" "define-method-expander.scm"} 1226584773
    {Lisp-Entry "core.class.syntax.define-method-expander" #f 37 8 37 48 ()
      {Lisp-Entry "jazz.expand-define-virtual" #f 40 9 40 35 ("obj" "lambda" "jazz.with-expression-value" ",rank-name" "',rank-name" "%%get-object-class" "'%%get-object-class" "%%get-class-core-vtable" "'%%get-class-core-vtable" "%%vector-ref" "'%%vector-ref" "',name" "jazz.format" "jazz.error" "'jazz.error" ",class-name" "',class-name" ",is-test" "',is-test" "list" "%%core-assertion" "'%%core-assertion" "%%list" "%%symbol?" ",@extra-parameters" ",object-parameter" ",name" "jazz.define-macro" "%%class-is?" "'%%class-is?" "jazz.bootstrap-type?" "'jazz.bootstrap-type?" "if" "is-test" "jazz.method-rank-name" "rank-name" "jazz.method-implementation-name" "implementation-name" "extra-parameters" "%%cadr" "object-parameter" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "bootstrap-type?" "signature")}
      {Lisp-Entry "jazz.expand-define-virtual-runtime" #f 63 9 63 43 (",name" "',name" ",class-name" "jazz.register-virtual-name" ",rank-name" "define" "jazz.method-rank-name" "rank-name" "jazz.method-implementation-name" "implementation-name" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "signature")}
      {Lisp-Entry "jazz.expand-define-method" #f 73 9 73 34 ("jazz.register-method" ",@body" ",@extra-parameters" ",object-parameter" "lambda" ",name" "',name" ",class-name" "jazz.find-nextmethod" "nextmethod" "let" ",implementation-name" "define" "begin" "jazz.method-implementation-name" "implementation-name" "extra-parameters" "%%cadr" "object-parameter" "%%caar" "class-name" "%%cdr" "parameters" "%%car" "name" "let*" "body" "signature")}
      {Lisp-Entry "jazz.method-implementation-name" #f 88 9 88 40 ("%%string-append" "%%string->symbol" "%%symbol->string" "jazz.split-string" "jazz.last" "let" "name" "class-name")}
      {Lisp-Entry "jazz.method-rank-name" #f 93 9 93 30 ("%%symbol->string" "%%string-append" "%%string->symbol" "implementation-name")}
      {Lisp-Entry "jazz.inherited-name?" #f 97 9 97 29 ("%%get-class-core-virtual-names" "%%memq" "and" "%%get-class-ascendant" "ascendant" "let" "method-name" "class")}
      {Lisp-Entry "jazz.register-virtual-name" #f 103 9 103 35 ("1" "%%length" "%%fx-" "%%list" "%%get-class-core-virtual-names" "%%append" "%%set-class-core-virtual-names" "method-name" "class")}
      {Lisp-Entry "jazz.register-method" #f 111 9 111 29 ("%%get-class-core-virtual-alist" "%%set-class-core-virtual-alist" "%%cons" "%%list" "%%get-class-core-method-alist" "%%append" "%%set-class-core-method-alist" "jazz.inherited-name?" "if" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.get-method-rank" #f 121 9 121 29 ("1" "%%fx+" "%%cdr" "%%car" "%%eq?" "if" "0" "rank" "%%get-class-core-virtual-names" "scan" "iter" "let" "method-name" "class")}
      {Lisp-Entry "jazz.get-method-implementation" #f 129 9 129 39 ("jazz.get-method-rank" "%%get-class-core-vtable" "%%vector-ref" "method-name" "class")}
      {Lisp-Entry "jazz.find-nextmethod" #f 134 9 134 29 ("jazz.error" "rest" "obj" "lambda" "%%get-class-ascendant" "jazz.get-method-implementation" "jazz.inherited-name?" "if" "method-name" "class")}}})
"development"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "development.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.development" #f 37 9 37 28 ("get-image" "get-columns-right" "get-columns-borders" "get-node-column" "not" "set-%u" "set-%o" "set-%d" "get-cell-data" "data" "get-debugged" "part" "receive" "get-user-data" "user-data" "get-children" "car" "node" "get-column" "column" "cell-coordinates" "view->tree" "cell" "format" "get-controller" "set-%c" "set-%k" "essay" "set-%i" "get-style-at" "set-%y" "get-col" "get-line-at" "set-%n" "get-format" "set-%f" "set-%p" "set-%e" "set-%s" "string-length" "substring" "starts-with?" "if" "filename" "Jazz" "Directory" "parse" "jazzdir" "path" "git-filename" "define" "get-paragraph" "paragraph" "get-moniker" "moniker" "get-end" "end" "get-start" "start" "get-visible-height" "get-visible-width" "get-visible-count" "set-%r" "get-row" "row" "let" "when" "v->row" "r" "get-v" "v" "let*" "get-icon" "get-disabled-image-name" "get-image-name" "list" "nextmethod" "append" "pos" "view" "jazz")
      {Lisp-Entry "debug-window" #f 62 9 62 21 ("acquire" "view-debug" "nextmethod" "not" "if" "root" "find-drawing" "view" "let" "pos")}
      {Lisp-Entry "describe-window" #f 70 9 70 24 ("acquire" "view-describe" "when" "root" "find-drawing" "view" "let" "pos")}
      {Lisp-Entry "view-debug" #f 81 10 81 20 ("set-%g" "set-%h" "set-%r" "set-%m" "set-%" "get-guest" "Host-View" "is?" "and" "guest" "get-host" "host" "get-root" "root" "let*" "pos" "view")}
      {Lisp-Entry "view-describe" #f 92 10 92 23 ("get-action-handler" "get-action" "get-size" "get-position" "get-name" "class-of" "list" "pos" "view")}
      {Lisp-Entry "view-describe-state" #f 105 10 105 29 ("pos" "view")}
      {Lisp-Entry "view-outline" #f 110 13 110 25 (":console" "list" "print-to" "newline" "get-height" "get-width" "get-v" "get-h" "format" "output" "get-size" "size" "get-position" "position" "get-lie" "lie" "class-of" "type-name" "type" "let" "View" "is?" "when" "level" "function" "for-each-descendant" "3" "border:" "Aligned-Column" "properties" "Indented-Column" "classes" "Columns-Display" "new" "display" "let*" "view")}
      {Lisp-Entry "view-describe" #f 140 11 140 24 ()}
      {Lisp-Entry "view-describe" #f 152 11 152 24 ()}
      {Lisp-Entry "view-debug" #f 163 11 163 21 ()}
      {Lisp-Entry "view-describe" #f 172 11 172 24 ()}
      {Lisp-Entry "view-debug" #f 185 11 185 21 ()}
      {Lisp-Entry "view-describe" #f 209 11 209 24 ()}
      {Lisp-Entry "view-debug" #f 220 11 220 21 ()}
      {Lisp-Entry "view-describe" #f 240 11 240 24 ()}}})
"dialect"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "scheme" "dialect" "dialect.scm"} 1226584790
    {Lisp-Entry "scheme.dialect.dialect" #f 37 8 37 30 ("jazz.new-scheme-dialect" "scheme" "'scheme" "jazz.register-dialect" "jazz.Scheme-Walker" "jazz.Scheme-Dialect" "jazz.Define-Macro-Declaration" "jazz.Define-Declaration" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Define-Declaration" #f 45 27 45 50 ()}
      {Lisp-Entry "jazz.new-define-declaration" #f 48 9 48 36 ("jazz.setup-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.Define-Declaration" "jazz.allocate-define-declaration" "new-declaration" "let" "signature" "parent" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Define-Declaration") 55 21 55 52 ("jazz.validate-arguments" "if" "declaration" "%%get-define-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Define-Declaration") 61 21 61 42 ("%%get-declaration-source" "%%get-lexical-binding-type" "jazz.emit-expression" "jazz.emit-type-cast" ",locator" "define" "jazz.sourcify-if" "%%get-define-declaration-value" "value" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Define-Declaration") 70 21 70 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Define-Declaration") 77 21 77 58 ("%%get-lexical-binding-name" "jazz.walk-error" "%%get-declaration-toplevel" "%%neq?" "%%when" "declaration" "nextmethod" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Define-Declaration") 83 21 83 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Define-Declaration") 87 21 87 49 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" ",locator" "set!" "jazz.new-code" "declaration" "%%get-declaration-locator" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Define-Macro-Declaration" #f 103 27 103 56 ()}
      {Lisp-Entry "jazz.new-define-macro-declaration" #f 106 9 106 42 ("jazz.setup-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.Define-Macro-Declaration" "jazz.allocate-define-macro-declaration" "new-declaration" "let" "signature" "parent" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Define-Macro-Declaration") 112 21 112 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Define-Macro-Declaration") 116 21 116 50 ("%%cdr" "%%apply" "jazz.need-macro" "expander" "jazz.load-module" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Define-Macro-Declaration") 127 21 127 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "%%cons" "jazz.define-macro" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-define-macro-body" "body" "%%get-define-macro-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.Scheme-Dialect" #f 148 27 148 46 ()}
      {Lisp-Entry "jazz.new-scheme-dialect" #f 151 9 151 32 ("jazz.Scheme-Dialect" "jazz.allocate-scheme-dialect")}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Scheme-Dialect") 155 21 155 38 ("'scheme")}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Scheme-Dialect") 159 21 159 40 ("jazz.new-scheme-walker")}
      {Lisp-Entry "jazz.Scheme-Walker" #f 171 27 171 45 ()}
      {Lisp-Entry "jazz.new-scheme-walker" #f 174 9 174 31 ("jazz.Scheme-Walker" "jazz.allocate-scheme-walker")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Scheme-Walker") 183 21 183 42 ("nextmethod" "else" "jazz.walk-define-macro-declaration" "define-macro" "walker" "jazz.walk-define-declaration" "define" "case" "%%car" "first" "let" "%%pair?" "if" "form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.scheme-bindings" #f 198 9 198 29 ("jazz.walk-quasiquote" "quasiquote" "'quasiquote" "jazz.walk-delay" "delay" "'delay" "jazz.walk-do" "do" "'do" "jazz.walk-or" "or" "'or" "jazz.walk-and" "and" "'and" "jazz.walk-setbang" "set!" "'set!" "jazz.walk-receive" "receive" "'receive" "jazz.walk-let-symbol" "let-symbol" "'let-symbol" "jazz.walk-let-macro" "let-macro" "'let-macro" "jazz.walk-letrec" "letrec" "'letrec" "jazz.walk-letstar" "let*" "'let*" "jazz.walk-let" "let" "'let" "jazz.walk-lambda" "lambda" "'lambda" "jazz.walk-begin" "begin" "'begin" "jazz.walk-cond" "cond" "'cond" "jazz.walk-case" "case" "'case" "jazz.walk-if" "if" "'if" "jazz.walk-quote" "quote" "'quote" "jazz.walk-define-macro" "define-macro" "'define-macro" "jazz.walk-define" "define" "'define" "jazz.new-special-form" "%%list")}
      {Lisp-Entry "jazz.scheme-environment" #f 222 8 222 31 ()}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Scheme-Walker") 226 21 226 44 ("jazz.scheme-bindings" "jazz.core-bindings" "append" "jazz.new-walk-frame" "%%list" "set!" "begin" "jazz.scheme-environment" "or")}
      {Lisp-Entry "jazz.walk-define-declaration" #f 238 9 238 37 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-define-declaration" "new-declaration" "jazz.walk-parameters" "and" "signature" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "jazz.Namespace-Declaration" "%%class-is?" "%%assert" "%%cdr" "jazz.parse-define" "parameters" "value" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-define" #f 248 9 248 25 ("%%set-declaration-source" "jazz.walk" "%%set-define-declaration-value" "%%cons" "new-environment" "jazz.find-form-declaration" "new-declaration" "let*" "jazz.Namespace-Declaration" "%%class-is?" "%%assert" "%%source-code" "%%cdr" "jazz.parse-define" "parameters" "value" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-define-macro" #f 264 9 264 32 ("values" "parameters" "jazz.Any" "type" "name" "%%cdr" "body" "%%car" "%%desourcify" "signature" "let*" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-define-macro-declaration" #f 273 9 273 43 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-define-macro-declaration" "new-declaration" "jazz.walk-parameters" "signature" "let" "%%cdr" "jazz.parse-define-macro" "body" "parameters" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-define-macro" #f 281 9 281 31 ("%%set-declaration-source" "jazz.walk-body" "%%set-define-macro-body" "%%set-define-macro-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "%%source-code" "%%cdr" "jazz.parse-define-macro" "body" "parameters" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-let-macro" #f 297 9 297 28 ("jazz.walk-body" "begin" "%%append" "new-environment" "eval" "jazz.new-macro-form" "expander" "%%car" "name" "binding" "lambda" "map" "macro-forms" "%%cddr" "body" "%%cadr" "bindings" "let*" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-let-symbol" #f 316 9 316 29 ("jazz.walk-body" "begin" "%%append" "new-environment" "eval" "jazz.new-macro-symbol" "setter" "getter" "%%car" "name" "binding" "lambda" "map" "macro-symbols" "%%cddr" "body" "%%cadr" "bindings" "let*" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-lambda" #f 336 9 336 25 ("jazz.walk-body" "jazz.new-lambda" "jazz.Any" "jazz.walk-specifier" "if" "type" "jazz.walk-parameters" "augmented-environment" "signature" "receive" "body" "specifier" "lambda" "%%cddr" "jazz.parse-specifier" "%%source-code" "%%cadr" "%%desourcify" "parameters" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-binding" #f 351 9 351 27 ("jazz.new-variable" "values" "value" "jazz.walk-specifier" "if" "type" "rest" "specifier" "lambda" "jazz.parse-specifier" "%%car" "symbol" "let" "%%desourcify" "jazz.error" "%%cdr" "%%source-code" "%%pair?" "and" "%%assertion" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-let" #f 361 9 361 22 ("jazz.walk-body" "jazz.queue-list" "jazz.new-let" "set!" "jazz.walk" "%%cons" "jazz.enqueue" "jazz.parse-binding" "value" "variable" "receive" "continuation-capture" "binding-form" "lambda" "for-each" "jazz.new-queue" "expanded-bindings" "augmented-environment" "unspecified" "'unspecified" "%%list" "%%null?" "effective-body" "jazz.signature-named-let" "%%car" "%%pair?" "and" "%%cddr" "body" "bindings" "let" "jazz.walk-named-let" "%%cadr" "%%source-code" "%%symbol?" "if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-letstar" #f 383 9 383 26 ("jazz.walk-body" "jazz.queue-list" "jazz.new-letstar" "set!" "jazz.walk" "%%cons" "jazz.enqueue" "jazz.parse-binding" "value" "variable" "receive" "continuation-capture" "binding-form" "lambda" "for-each" "jazz.new-queue" "expanded-bindings" "augmented-environment" "%%cddr" "body" "%%cadr" "%%source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-letrec" #f 400 9 400 25 ("jazz.walk-body" "jazz.queue-list" "jazz.new-letrec" "jazz.walk" "cons" "jazz.enqueue" "value" "continuation-capture" "variable" "for-each" "jazz.new-queue" "expanded-bindings" "%%append" "augmented-environment" "%%car" "jazz.new-variable" "binding-form" "lambda" "map" "new-variables" "let*" "%%cddr" "body" "%%cadr" "%%source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-receive" #f 418 9 418 26 ("jazz.walk-body" "jazz.walk" "lambda" "continuation-capture" "jazz.new-receive" "%%append" "new-environment" "walk-parameters" "variables" "%%cdr" "body" "%%cddr" "%%car" "expression" "%%source-code" "%%cadr" "%%desourcify" "parameters" "let*" "form-src" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "walk-parameters" #f 419 11 419 26 ("jazz.new-variable" "jazz.enqueue" "jazz.Any" "environment" "declaration" "resume" "walker" "jazz.walk-specifier" "type" "rest" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "expr" "jazz.queue-list" "%%null?" "if" "scan" "iter" "jazz.new-queue" "queue" "let" "parameters")}}
      {Lisp-Entry "jazz.walk-if" #f 447 9 447 21 ("unspecified" "%%null?" "begin" "'begin" "cons" "jazz.walk" "lambda" "continuation-capture" "jazz.new-if" "%%cdr" "no" "%%cddr" "%%car" "yes" "%%cadr" "test" "let" "%%desourcify" "jazz.walk-error" "3" "%%source-code" "length" "<" "if" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-cond" #f 467 9 467 23 ("jazz.queue-list" "jazz.new-cond" "jazz.walk-implicit-begin" "jazz.walk" "continuation-capture" "else" "'else" "%%eq?" "if" "cons" "jazz.enqueue" "body" "%%car" "test" "clause" "lambda" "for-each" "jazz.new-queue" "expanded-clauses" "%%source-code" "%%cdr" "clauses" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-case" #f 484 9 484 23 ("jazz.walk-error" "jazz.walk-implicit-begin" "cons" "%%pair?" "else" "'else" "%%eq?" "or" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "%%cdr" "body" "%%car" "%%desourcify" "tries" "let*" "clause" "map" "jazz.walk" "lambda" "continuation-capture" "jazz.new-case" "%%cddr" "clauses" "%%source-code" "%%cadr" "target" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-and" #f 503 9 503 22 ("%%source-code" "%%cdr" "jazz.walk-list" "jazz.new-and" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-or" #f 507 9 507 21 ("%%source-code" "%%cdr" "jazz.walk-list" "jazz.new-or" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-begin" #f 516 9 516 24 ("jazz.walk-list" "jazz.new-begin" "%%source-code" "%%cdr" "body" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-implicit-begin" #f 521 9 521 33 ("jazz.walk-list" "jazz.new-begin" "unspecified" "jazz.walk" "%%null?" "if" "form-list" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-do" #f 532 9 532 21 ("jazz.walk-body" "jazz.queue-list" "jazz.new-do" "cons" "jazz.enqueue" "%%null?" "if" "step" "jazz.walk" "init" "continuation-capture" "variable" "for-each" "jazz.new-queue" "expanded-bindings" "%%append" "augmented-environment" "jazz.new-variable" "binding-form" "lambda" "map" "new-variables" "let*" "body" "%%cdr" "result" "%%cddr" "%%car" "test" "%%cadr" "%%source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-named-let" #f 558 9 558 28 ("jazz.walk-body" "jazz.queue-list" "jazz.new-named-let" "jazz.new-variable" "set!" "jazz.walk" "%%cons" "jazz.enqueue" "jazz.parse-binding" "value" "variable" "receive" "continuation-capture" "binding-form" "lambda" "for-each" "jazz.new-queue" "expanded-bindings" "augmented-environment" "%%cdr" "body" "%%cddr" "%%car" "%%desourcify" "bindings" "%%cadr" "%%source-code" "name" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.signature-named-let" #f 578 9 578 33 (",@body" ",bindings" ",name" "jazz.sourcify-if" "jazz.walk-named-let" "%%cdr" "%%car" "%%source-code" "name" "let" "body" "bindings" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-delay" #f 593 9 593 24 ("jazz.walk" "jazz.new-delay" "%%source-code" "%%cadr" "expression" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-quasiquote" #f 603 9 603 29 ("jazz.new-quasiquote" "%%cdr" "%%cons" "%%cadr" "jazz.walk" "%%list" "unquote-splicing" "'unquote-splicing" "unquote" "'unquote" "%%car" "%%eq?" "or" "%%pair?" "if" "lambda" "walk" "letrec" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "dialect.scm"} 1227095261
    {Lisp-Entry "jazz.dialect.dialect" #f 37 8 37 28 ("jazz.dialect" "'jazz.dialect" "jazz" "'jazz" "jazz.register-dialect" "jazz.new-jazz-dialect" "dialect" "jazz.Jazz-Walker" "jazz.Dispatch" "jazz.Construct" "jazz.Cast" "jazz.With-Self" "jazz.new" "jazz.new2" "2" "jazz.new1" "1" "jazz.codes-forms" "jazz.new0" "0" "%%length" "jazz.new-code" "values-codes" "jazz.Autoload-Declaration" "or" "%%get-reference-binding" "binding" "jazz.Reference" "class-expression" "let" "jazz.dialect.kernel.new" "'jazz.dialect.kernel.new" "%%eq?" "if" "declaration" "arguments-codes" "operator" "jazz.emit-primitive-new-call" "else" "%%car" "jazz.emit-specialized-class-of" "%%cdr" "%%null?" "%%pair?" "%%assert" "jazz.dialect.kernel.class-of" "case" "environment" "arguments" "locator" "jazz.emit-specialized-locator" "jazz.Jazz-Dialect" "jazz.Method-Declaration" "jazz.Property-Declaration" "jazz.Slot-Declaration" "jazz.Field-Declaration" "jazz.Interface-Declaration" "%%get-class-declaration-ascendant" "%%not" "%%class-is?" "and" "type" "lambda" "jazz.object-declaration?" "set!" "jazz.Class-Declaration" "jazz.Category-Declaration" "jazz.Specific-Declaration" "jazz.Generic-Declaration" "jazz.Specialize" "jazz.Definition-Declaration" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Definition-Declaration" #f 45 27 45 54 ()}
      {Lisp-Entry "jazz.new-definition-declaration" #f 48 9 48 40 ("jazz.setup-declaration" "jazz.Definition-Declaration" "jazz.allocate-definition-declaration" "new-declaration" "let" "signature" "expansion" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Definition-Declaration") 54 21 54 52 ("jazz.validate-arguments" "if" "declaration" "%%get-definition-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Definition-Declaration") 60 21 60 51 ("jazz.error" "jazz.call-return-type" "jazz.sourcified-form" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "argument" "parameter" "map" "jazz.new-code" "jazz.emit-expression" "body-code" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-inlined-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "jazz.untyped-inline-definition?" "jazz.inline-definitions?" "or" "inline" "'inline" "%%get-definition-declaration-expansion" "%%eq?" "and" "jazz.Lambda" "%%class-is?" "if" "declaration" "%%get-definition-declaration-value" "value" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.untyped-inline-definition?" #f 92 9 92 40 ("%%get-lambda-signature" "%%get-signature-positional" "%%get-lexical-binding-type" "%%not" "parameter" "lambda" "jazz.every?" "value")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Definition-Declaration") 98 21 98 42 ("%%get-declaration-source" "%%get-lexical-binding-type" "jazz.emit-expression" "jazz.emit-type-cast" ",locator" "define" "jazz.sourcify-if" "%%get-definition-declaration-value" "value" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Definition-Declaration") 107 21 107 48 ("jazz.Any" "%%get-lexical-binding-type" "or" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Definition-Declaration") 115 21 115 58 ("%%get-lexical-binding-name" "jazz.walk-error" "%%get-declaration-toplevel" "%%neq?" "%%when" "declaration" "nextmethod" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Definition-Declaration") 121 21 121 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Definition-Declaration") 125 21 125 49 ("jazz.Any" "%%get-lexical-binding-type" "jazz.emit-expression" "jazz.emit-type-cast" ",locator" "set!" "jazz.new-code" "declaration" "%%get-declaration-locator" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Definition-Declaration") 133 21 133 42 ("%%get-definition-declaration-value" "jazz.fold-statement" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Specialize" #f 147 27 147 42 ()}
      {Lisp-Entry "jazz.new-specialize" #f 150 9 150 28 ("jazz.Specialize" "jazz.allocate-specialize")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Specialize") 154 21 154 41 ("jazz.Any" "begin" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.Generic-Declaration" #f 169 27 169 51 ()}
      {Lisp-Entry "jazz.new-generic-declaration" #f 172 9 172 37 ("jazz.setup-declaration" "jazz.Generic-Declaration" "jazz.allocate-generic-declaration" "new-declaration" "let" "signature" "dispatch-types" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Generic-Declaration") 178 21 178 52 ("%%get-generic-declaration-signature" "declaration" "jazz.validate-arguments" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Generic-Declaration") 182 21 182 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "%%cons" "jazz.define-generic" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-generic-declaration-body" "body" "%%get-generic-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "generic-locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Generic-Declaration") 195 21 195 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Specific-Declaration" #f 210 27 210 52 ()}
      {Lisp-Entry "jazz.new-specific-declaration" #f 213 9 213 38 ("jazz.setup-declaration" "jazz.Specific-Declaration" "jazz.allocate-specific-declaration" "new-declaration" "let" "signature" "generic" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Specific-Declaration") 219 21 219 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "%%cons" "jazz.define-specific" "jazz.sourcify-if" "cons" "augmented-environment" "let" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-specific-declaration-body" "body" "%%get-specific-declaration-signature" "signature" "jazz.generic-object-locator" "generic-object-locator" "%%get-declaration-locator" "generic-locator" "declaration" "%%get-specific-declaration-generic" "generic-declaration" "let*" "environment")}
      {Lisp-Entry "jazz.Category-Declaration" #f 242 27 242 52 ()}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Category-Declaration") 245 21 245 48 ("jazz.Category-Declaration" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Category-Declaration") 252 21 252 44 ("category-declaration" "%%get-access-lookup" "%%table-ref" "jazz.private-access" "jazz.public-access" "if" "access" "let" "external?" "symbol")}
      {Lisp-Entry "jazz.Class-Declaration" #f 267 27 267 49 ()}
      {Lisp-Entry "jazz.new-class-declaration" #f 270 9 270 35 ("jazz.setup-declaration" "eq?" "test:" "%%make-table" "jazz.protected-access" "jazz.make-access-lookups" "jazz.Class-Declaration" "jazz.allocate-class-declaration" "new-declaration" "let" "interfaces" "ascendant-base" "ascendant-relation" "ascendant" "metaclass" "implementor" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.setup-class-lookups" #f 276 9 276 33 ("jazz.protected-access" "%%get-namespace-declaration-lookups" "%%vector-set!" "interface" "lambda" "for-each" "jazz.public-access" "%%table-merge!" "if" "jazz.private-access" "%%get-access-lookup" "private" "%%get-class-declaration-interfaces" "map" "interfaces" "%%get-class-declaration-ascendant" "resolve-declaration" "ascendant" "let" "class-declaration")
        {Lisp-Entry "resolve-declaration" #f 277 11 277 30 ("jazz.resolve-declaration" "if" "decl")}}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Class-Declaration") 314 21 314 48 ("jazz.Class-Declaration" "%%get-category-declaration-metaclass" "or" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Class-Declaration") 322 21 322 37 ("%%get-class-declaration-ascendant" "%%eq?" "jazz.resolve-declaration" "target-declaration" "%%not" "target" "iter" "let" "jazz.Class-Declaration" "%%class-is?" "and" "declaration" "jazz.object-declaration?" "if" "subtype")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Class-Declaration") 335 21 335 42 ("%%get-declaration-source" "jazz.update-class" "jazz.emit-namespace-statements" ",@interface-accesses" ",metaclass-access" "jazz.new-class" "jazz.global-value" "',locator" "jazz.global-variable?" "lambda" "map" "interface-accesses" ",ascendant-access" "%%get-object-class" "jazz.Object-Class" "'jazz.Object-Class" "metaclass-access" "jazz.emit-ascendant-access" "%%get-category-declaration-metaclass" "metaclass-declaration" "jazz.remove-slots" "%%list" "%%get-class-level" ",level-locator" "%%get-category-name" ",locator" "define" "jazz.emit-binding-reference" "jazz.sourcified-form" "%%not" "ascendant-access" "jazz.validate-core-class/class" "jazz.get-core-class" "core-class" "jazz.core-class?" "if" "begin" "jazz.sourcify-if" "level" "'level" "jazz.compose-helper" "level-locator" "%%get-namespace-declaration-body" "body" "%%get-class-declaration-interfaces" "interface-declarations" "%%get-class-declaration-ascendant" "ascendant-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let" "environment")}
      {Lisp-Entry "jazz.emit-ascendant-access" #f 368 9 368 35 ("%%get-object-class" "else" "jazz.emit-binding-reference" "jazz.sourcified-form" "%%not" "cond" "%%get-class-declaration-ascendant-base" "ascendant-base" "%%get-class-declaration-ascendant-relation" "ascendant-relation" "%%get-class-declaration-ascendant" "ascendant" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.find-class-declaration" #f 383 9 383 36 ("%%get-declaration-parent" "else" "jazz.Class-Declaration" "%%class-is?" "jazz.error" "%%not" "cond" "decl" "iter" "let" "declaration")}
      {Lisp-Entry "jazz.validate-core-class/class" #f 404 9 404 39 ("jazz.validate-core-class/slots" "jazz.validate-core-class/category" "declaration" "core-class")}
      {Lisp-Entry "jazz.validate-core-class/slots" #f 409 9 409 39 ("jazz.error" "%%equal?" "%%not" "%%when" "%%get-namespace-declaration-children" "jazz.Slot-Declaration" "jazz.collect-type" "%%get-lexical-binding-name" "decl" "declaration-slot-names" "%%get-class-slots" "%%get-field-name" "%%symbol?" "if" "name/slot" "lambda" "map" "core-class-slot-names" "let" "declaration" "core-class")}
      {Lisp-Entry "jazz.validate-core-class/category" #f 416 9 416 42 ("jazz.validate-core-class/interfaces" "jazz.validate-core-class/ascendant" "declaration" "core-class")}
      {Lisp-Entry "jazz.validate-core-class/ascendant" #f 421 9 421 43 ("%%get-lexical-binding-name" "jazz.error" "%%eq?" "%%when" "%%get-declaration-locator" "declaration-ascendant-name" "%%get-class-declaration-ascendant" "declaration-ascendant" "%%get-category-name" "jazz.identifier-name" "%%not" "if" "core-class-ascendant-name" "%%get-class-ascendant" "core-class-ascendant" "let*" "declaration" "core-class")}
      {Lisp-Entry "jazz.validate-core-class/interfaces" #f 430 9 430 44 ("%%get-lexical-binding-name" "jazz.error" "%%null?" "%%not" "%%when" "%%get-class-declaration-interfaces" "declaration-interfaces" "let" "declaration" "core-class")}
      {Lisp-Entry "jazz.Interface-Declaration" #f 441 27 441 53 ()}
      {Lisp-Entry "jazz.new-interface-declaration" #f 444 9 444 39 ("jazz.setup-declaration" "eq?" "test:" "%%make-table" "jazz.protected-access" "jazz.make-access-lookups" "jazz.Interface-Declaration" "jazz.allocate-interface-declaration" "new-declaration" "let" "ascendants" "metaclass" "implementor" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.setup-interface-lookups" #f 450 9 450 37 ("jazz.protected-access" "%%get-namespace-declaration-lookups" "%%vector-set!" "jazz.public-access" "%%table-merge!" "interface" "lambda" "for-each" "jazz.private-access" "%%get-access-lookup" "private" "%%get-interface-declaration-ascendants" "resolve-declaration" "map" "ascendants" "let" "interface-declaration")
        {Lisp-Entry "resolve-declaration" #f 451 11 451 30 ("jazz.resolve-declaration" "if" "decl")}}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Interface-Declaration") 481 21 481 37 ("subtype")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Interface-Declaration") 486 21 486 42 ("%%get-declaration-source" "jazz.update-interface" "jazz.emit-namespace-statements" "%%get-interface-rank" ",rank-locator" ",@ascendant-accesses" "%%list" "',locator" ",metaclass-access" "jazz.new-interface" ",locator" "define" "begin" "jazz.sourcify-if" "%%get-namespace-declaration-body" "body" "lambda" "map" "ascendant-accesses" "jazz.emit-binding-reference" "jazz.sourcified-form" "jazz.Interface" "'jazz.Interface" "%%not" "if" "metaclass-access" "%%get-category-declaration-metaclass" "metaclass-declaration" "%%get-interface-declaration-ascendants" "ascendant-declarations" "rank" "'rank" "jazz.compose-helper" "rank-locator" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.Field-Declaration" #f 514 27 514 49 ()}
      {Lisp-Entry "jazz.Slot-Declaration" #f 525 27 525 48 ()}
      {Lisp-Entry "jazz.new-slot-declaration" #f 528 9 528 34 ("jazz.setup-declaration" "jazz.Slot-Declaration" "jazz.allocate-slot-declaration" "new-declaration" "let" "setter-name" "getter-name" "initialize" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Slot-Declaration") 534 21 534 52 ("arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Slot-Declaration") 538 21 538 42 ("%%get-declaration-source" "%%get-slot-offset" ",offset-locator" ",name" "',name" ",class-locator" "jazz.add-slot" ",slot-locator" "jazz.emit-expression" "jazz.sourcified-form" "self" ",initialize-locator" "define" "begin" "jazz.sourcify-if" "offset" "'offset" "offset-locator" "slot" "'slot" "slot-locator" "'initialize" "jazz.compose-helper" "initialize-locator" "%%get-slot-declaration-initialize" "initialize" "class-locator" "%%get-declaration-parent" "class-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Slot-Declaration") 558 21 558 48 ("jazz.error" "jazz.find-annotated-type" ",offset-locator" "jazz.sourcified-form" "%%object-ref" "jazz.new-code" "offset" "'offset" "declaration" "%%get-declaration-locator" "jazz.compose-helper" "offset-locator" "if" "jazz.*self*" "self" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Slot-Declaration") 569 21 569 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Slot-Declaration") 573 21 573 49 ("jazz.error" "jazz.Any" "jazz.emit-expression" ",offset-locator" "jazz.sourcified-form" "%%object-set!" "jazz.new-code" "offset" "'offset" "declaration" "%%get-declaration-locator" "jazz.compose-helper" "offset-locator" "if" "jazz.*self*" "self" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Property-Declaration" #f 592 27 592 52 ()}
      {Lisp-Entry "jazz.new-property-declaration" #f 595 9 595 38 ("jazz.setup-declaration" "jazz.Property-Declaration" "jazz.allocate-property-declaration" "new-declaration" "let" "setter-name" "getter-name" "initialize" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Property-Declaration") 601 21 601 42 ("%%get-declaration-source" "%%get-slot-offset" ",offset-locator" ",name" "',name" ",class-locator" "jazz.add-property" ",slot-locator" "jazz.emit-expression" "jazz.sourcified-form" "self" ",initialize-locator" "define" "begin" "jazz.sourcify-if" "%%get-property-declaration-setter" "setter" "%%get-property-declaration-getter" "getter" "offset" "'offset" "offset-locator" "slot" "'slot" "slot-locator" "'initialize" "jazz.compose-helper" "initialize-locator" "%%get-slot-declaration-initialize" "initialize" "class-locator" "%%get-declaration-parent" "class-declaration" "%%get-declaration-locator" "locator" "declaration" "%%get-lexical-binding-name" "name" "let*" "environment")}
      {Lisp-Entry "jazz.Method-Declaration" #f 633 27 633 50 ()}
      {Lisp-Entry "jazz.new-method-declaration" #f 636 9 636 36 ("jazz.setup-declaration" "jazz.Method-Declaration" "jazz.allocate-method-declaration" "new-declaration" "let" "signature" "synchronized" "remote" "expansion" "abstraction" "propagation" "root" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.method-dispatch-info" #f 642 9 642 34 ("error" "else" "interface" "'interface" "jazz.Interface-Declaration" "class" "'class" "jazz.Class-Declaration" "%%class-is?" "cond" "%%get-declaration-parent" "category-declaration" "method-declaration" "root-method-declaration" "values" "inherited" "'inherited" "final" "'final" "%%eq?" "or" "%%not" "and" "if" "%%get-method-declaration-propagation" "propagation" "%%get-method-declaration-root" "root" "let" "declaration")}
      {Lisp-Entry "jazz.native-category?" #f 658 9 658 30 ("primitive" "'primitive" "%%get-category-declaration-implementor" "%%neq?" "category-declaration")}
      {Lisp-Entry "jazz.emit-method-dispatch" #f 662 9 662 34 ("%%get-lexical-binding-type" "jazz.call-return-type" "%%interface-dispatch" ",interface-rank-locator" "%%interface-native-dispatch" "interface-rank-locator" "interface" "%%class-dispatch" ",method-rank-locator" ",class-level-locator" "%%class-native-dispatch" "jazz.native-category?" "if" "rank" "'rank" "method-rank-locator" "level" "'level" "jazz.compose-helper" "class-level-locator" "class" ",implementation-locator" "jazz.sourcified-form" "%%final-dispatch" "%%get-declaration-locator" "implementation-locator" "final" "case" "jazz.new-code" "%%get-declaration-parent" "category-declaration" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "%%get-lexical-binding-name" "name" "let" "declaration" "object")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Method-Declaration") 687 21 687 48 ("%%get-declaration-locator" "%%get-lexical-binding-name" "jazz.error" "%%get-code-type" "jazz.sourcified-form" "apply" "rest" "lambda" "jazz.new-code" "declaration" "jazz.emit-method-dispatch" "dispatch-code" "if" "jazz.*self*" "self" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Method-Declaration") 699 21 699 52 ("jazz.validate-arguments" "if" "declaration" "%%get-method-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Method-Declaration") 705 21 705 51 ("else" "jazz.error" "jazz.call-return-type" "jazz.sourcified-form" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "argument" "parameter" "map" "jazz.new-code" "jazz.emit-expression" "body-code" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "let" "final" "case" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "inline" "'inline" "declaration" "%%get-method-declaration-expansion" "%%eq?" "if" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Method-Declaration") 735 21 735 43 ("%%get-declaration-locator" "%%get-lexical-binding-name" "jazz.error" "%%get-code-type" ",@arguments" "jazz.sourcified-form" "jazz.new-code" "jazz.emit-method-dispatch" "dispatch-code" "jazz.codes-forms" "declaration" "%%get-lexical-binding-type" "type" "if" "jazz.*self*" "self" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Method-Declaration") 750 21 750 42 ("%%get-declaration-source" "',class-locator" "jazz.call-into-abstract" "rest" ",method-rank-locator" "abstract" "'abstract" "%%eq?" "if" ",name" "',name" ",class-locator" ",method-call" "jazz.emit-expression" "jazz.sourcified-form" ",method-node-locator" "%%get-method-node-next-implementation" "nextmethod" "jazz.emit-signature-casts" "jazz.emit-signature" "self" ",method-locator" "define" "begin" "jazz.generate-symbol" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "jazz.Interface-Declaration" "jazz.add-virtual-method" "'jazz.add-virtual-method" "chained" "virtual" "jazz.add-final-method" "'jazz.add-final-method" "inherited" "final" "case" "jazz.Class-Declaration" "%%class-is?" "jazz.add-method-node" "'jazz.add-method-node" "cond" "method-call" "node" "'node" "method-node-locator" "rank" "'rank" "jazz.compose-helper" "method-rank-locator" "method-locator" "%%get-declaration-locator" "class-locator" "and" "root-category-declaration" "%%get-method-declaration-root" "root-method-declaration" "%%get-declaration-parent" "category-declaration" "let*" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "%%get-method-declaration-abstraction" "abstraction" "%%get-method-declaration-propagation" "propagation" "declaration" "%%get-lexical-binding-name" "name" "let" "environment")}
      {Lisp-Entry "jazz.Jazz-Dialect" #f 811 19 811 36 ("jazz.allocate-jazz-dialect" "jazz.Object-Class" "jazz.Dialect")}
      {Lisp-Entry "jazz.Jazz-Dialect" #f 815 27 815 44 ()}
      {Lisp-Entry "jazz.new-jazz-dialect" #f 818 9 818 30 ("jazz.Jazz-Dialect" "jazz.allocate-jazz-dialect")}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Jazz-Dialect") 822 21 822 38 ("'jazz")}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Jazz-Dialect") 826 21 826 40 ("jazz.new-jazz-walker")}
      {Lisp-Entry "jazz.Jazz-Walker" #f 838 19 838 35 ("jazz.allocate-jazz-walker" "jazz.Object-Class" "errors" "warnings" "jazz.Scheme-Walker")}
      {Lisp-Entry "jazz.Jazz-Walker" #f 842 27 842 43 ()}
      {Lisp-Entry "jazz.new-jazz-walker" #f 845 9 845 29 ("jazz.Jazz-Walker" "jazz.allocate-jazz-walker")}
      {Lisp-Entry "jazz.jazz-bindings" #f 854 9 854 27 ("jazz.expand-form" "form" "'form" "jazz.expand-com-external" "com-external" "'com-external" "jazz.expand-c-external-so" "c-external-so" "'c-external-so" "jazz.expand-c-external" "c-external" "'c-external" "jazz.expand-c-union" "c-union" "'c-union" "jazz.expand-c-structure" "c-structure" "'c-structure" "jazz.expand-assertion" "assertion" "'assertion" "jazz.expand-assert" "assert" "'assert" "jazz.expand-remotable-stub" "remotable-stub" "'remotable-stub" "jazz.walk-time" "time" "'time" "jazz.walk-construct" "construct" "'construct" "jazz.walk-cast" "cast" "'cast" "jazz.walk-with-self" "with-self" "'with-self" "jazz.walk-with-slots" "with-slots" "'with-slots" "jazz.walk-parameterize" "parameterize" "'parameterize" "jazz.walk-specialize" "%specialize" "'%specialize" "jazz.expand-specialize" "specialize" "'specialize" "jazz.walk-function" "function" "'function" "jazz.walk-c-definition" "c-definition" "'c-definition" "jazz.walk-c-type" "c-type" "'c-type" "jazz.walk-c-function" "c-function" "'c-function" "jazz.walk-c-initialize" "c-initialize" "'c-initialize" "jazz.walk-c-named-declare" "c-named-declare" "'c-named-declare" "jazz.walk-c-declare" "c-declare" "'c-declare" "jazz.walk-c-include" "c-include" "'c-include" "jazz.walk-declare" "declare" "'declare" "jazz.walk-method" "method" "'method" "%property" "'%property" "jazz.walk-%slot" "%slot" "'%slot" "jazz.expand-property" "property" "'property" "jazz.expand-slot" "slot" "'slot" "jazz.new-macro-form" "jazz.walk-interface" "interface" "'interface" "jazz.walk-%class" "%class" "'%class" "jazz.expand-class" "class" "'class" "jazz.new-syntax-form" "jazz.walk-specific" "specific" "'specific" "jazz.walk-generic" "generic" "'generic" "jazz.walk-definition" "definition" "'definition" "jazz.new-special-form" "%%list")}
      {Lisp-Entry "jazz.jazz-environment" #f 897 8 897 29 ()}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Jazz-Walker") 901 21 901 44 ("jazz.jazz-bindings" "jazz.scheme-bindings" "jazz.core-bindings" "append" "jazz.new-walk-frame" "%%list" "set!" "begin" "jazz.jazz-environment" "or")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Jazz-Walker") 913 21 913 42 ("nextmethod" "else" "jazz.walk-c-definition-declaration" "c-definition" "jazz.walk-c-type-declaration" "c-type" "jazz.walk-c-named-declare-declaration" "c-named-declare" "c-include" "jazz.walk-method-declaration" "method" "jazz.walk-%slot-declaration" "%property" "%slot" "jazz.walk-interface-declaration" "interface" "jazz.walk-%class-declaration" "%class" "specific" "jazz.walk-generic-declaration" "generic" "jazz.walk-specialize-declaration" "%specialize" "walker" "jazz.walk-definition-declaration" "definition" "case" "%%car" "first" "let" "%%pair?" "if" "form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.parse-keywords" #f 938 9 938 28 ("%%list" "jazz.unspecified" "%%table-ref" "keyword" "lambda" "map" "%%append" "values" "%%apply" "%%cddr" "%%cadr" "%%table-set!" "begin" "set!" "%%car" "%%source-code" "%%memq" "%%null?" "or" "if" "%%not" "%%while" "done?" "eq?" "test:" "%%make-table" "table" "let" "rest" "keywords")}
      {Lisp-Entry "jazz.emit-specialized-class-of" #f 968 9 968 39 ("%%get-category-declaration-metaclass" "jazz.Class-Declaration" "%%class-is?" "%%get-code-type" "type" "let" "%%class-of" "jazz.sourcified-form" "jazz.class-of" "jazz.debug-user?" "if" "jazz.new-code" "environment" "object")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Jazz-Walker") 1013 21 1013 37 ("walker" "nextmethod" "jazz.new-reference" "jazz.Slot-Declaration" "%%class-is?" "%%assert" "jazz.find-class-declaration" "jazz.lookup-declaration" "slot-declaration" "if" "jazz.self-access" "slot-name" "%%source-code" "symbol" "let" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.self-access" #f 1023 9 1023 25 ("%%string->symbol" "%%substring" "%%equal?" "0" "%%fx>" "and" "5" "%%fx-" "size" "%%string-length" "len" "%%symbol->string" "name" "let*" "symbol")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Jazz-Walker") 1037 21 1037 48 ("nextmethod" "walker" "jazz.walk" "jazz.new-assignment" "jazz.Slot-Declaration" "%%class-is?" "%%assert" "jazz.find-class-declaration" "jazz.lookup-declaration" "slot-declaration" "if" "jazz.self-access" "slot-name" "let" "value" "symbol" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Jazz-Walker") 1051 21 1051 35 ("nextmethod" "walker" "jazz.walk-dispatch" "jazz.dispatch?" "if" "%%car" "%%source-code" "procedure-expr" "let" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.With-Self" #f 1063 27 1063 41 ()}
      {Lisp-Entry "jazz.new-with-self" #f 1066 9 1066 27 ("jazz.With-Self" "jazz.allocate-with-self" "body")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.With-Self") 1070 21 1070 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "self" "'self" "jazz.*self*" "parameterize" "begin" "jazz.simplify-begin" "jazz.new-code" "expression" "%%get-with-self-body" "body" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.With-Self") 1081 21 1081 41 ("%%get-with-self-body" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Cast" #f 1094 27 1094 36 ()}
      {Lisp-Entry "jazz.new-cast" #f 1097 9 1097 22 ("jazz.Cast" "jazz.allocate-cast" "expression" "type")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Cast") 1101 21 1101 41 ("jazz.emit-expression" "jazz.emit-type-cast" "jazz.new-code" "%%get-cast-expression" "expression" "%%get-expression-type" "type" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Construct" #f 1122 27 1122 41 ()}
      {Lisp-Entry "jazz.new-construct" #f 1125 9 1125 27 ("jazz.Construct" "jazz.allocate-construct" "values" "class")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Construct") 1129 21 1129 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "jazz.emit-expression" "jazz.sourcified-form" "%%object" "jazz.new-code" "%%get-construct-values" "values" "expression" "%%get-construct-class" "class" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.cache-dispatch-interpreted" #f 1147 9 1147 40 ("q" "p" "d" "lambda" "jazz.interface-dispatch" "interface" "%%get-method-implementation-rank" "%%get-method-category-rank" "jazz.class-dispatch" "jazz.final-dispatch" "final" "%%get-method-dispatch-type" "case" "proc" "dispatch" "define" "%%get-category-field" "field" "jazz.error" "%%assertion" "jazz.locate-method-owner" "category" "%%class-of" "class" "let" "ignore" "setter" "name" "object")}
      {Lisp-Entry "jazz.cache-dispatch-compiled" #f 1166 9 1166 37 ("q" "p" "d" "n" "lambda" "jazz.interface-dispatch" "2" "interface" "%%get-method-implementation-rank" "%%get-method-category-rank" "jazz.class-dispatch" "1" "jazz.final-dispatch" "0" "final" "%%get-method-dispatch-type" "case" "proc" "dispatch" "define" "%%get-category-field" "field" "jazz.error" "%%assertion" "jazz.locate-method-owner" "category" "%%class-of" "class" "let" "ignore" "setter" "name" "object")}
      {Lisp-Entry "jazz.final-dispatch" #f 1185 9 1185 28 ("%%get-method-implementation" "%%final-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "type" "ignore" "field" "object")}
      {Lisp-Entry "jazz.class-dispatch" #f 1190 9 1190 28 ("%%class-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "type" "implementation-rank" "class-level" "object")}
      {Lisp-Entry "jazz.interface-dispatch" #f 1195 9 1195 32 ("%%interface-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "type" "implementation-rank" "interface-rank" "object")}
      {Lisp-Entry "jazz.dispatch" #f 1200 9 1200 22 ("jazz.error" "jazz.find-dispatch" "or" "name" "object")}
      {Lisp-Entry "jazz.find-dispatch" #f 1205 9 1205 27 ("%%interface-dispatch" "interface" "%%get-method-implementation-rank" "%%get-method-category-rank" "%%class-dispatch" "%%get-method-implementation" "%%final-dispatch" "final" "%%get-method-dispatch-type" "case" "%%get-category-field" "field" "%%not" "if" "jazz.locate-method-owner" "category" "%%class-of" "class" "let" "name" "object")}
      {Lisp-Entry "jazz.Dispatch" #f 1220 27 1220 40 ()}
      {Lisp-Entry "jazz.new-dispatch" #f 1223 9 1223 26 ("jazz.Dispatch" "jazz.allocate-dispatch" "arguments" "name" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Dispatch") 1227 21 1227 41 ("expression" "jazz.emit-dispatch" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-dispatch" #f 1231 9 1231 27 ("jazz.Any" ",object" "object" "jazz.with-expression-value" ",t" ",q" ",p" "`d" "__dispatchers" "%%vector-ref" ",d" "set!" "%%set-cdr!" "t" "q" "p" "d" "tv" "qv" ",name" "',name" "`',name" "pv" "jazz.cache-dispatch-interpreted" "'jazz.cache-dispatch-interpreted" "else" "jazz.cache-dispatch-compiled" "'jazz.cache-dispatch-compiled" "compile" "jazz.walk-for" "case" "%%symbol->string" "%%string-append" "jazz.register-variable" "dv" "%%get-expression-source" "jazz.codes-forms" "jazz.sourcified-form" "jazz.new-code" "jazz.emit-method-dispatch" "dispatch-code" "code" "lambda" "jazz.with-code-value" "jazz.emit-inlined-final-dispatch" "or" "jazz.emit-expressions" "rest-codes" "jazz.emit-expression" "%%cdr" "rest-arguments" "%%car" "object-argument" "method" "'method" "dispatch" "'dispatch" "find" "'find" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-library-warn?" "jazz.warnings?" "begin" "%%not" "method-declaration" "lookup-method/warn" "jazz.Method-Declaration" "and" "jazz.lookup-declaration" "jazz.Category-Declaration" "lookup-method" "jazz.resolve-declaration" "jazz.Autoload-Declaration" "%%class-is?" "if" "%%get-code-type" "jazz.patch-type-until-unification" "object-type" "object-code" "resolve-type" "define" "%%get-dispatch-arguments" "arguments" "%%get-dispatch-name" "name" "let" "environment" "declaration" "expression")}
      {Lisp-Entry "jazz.with-code-value" #f 1299 9 1299 29 ("%%get-code-source" ",form" ",value" "%%get-code-type" "jazz.new-code" "jazz.generate-symbol" "value" "%%symbol?" "if" "%%get-code-form" "form" "let" "proc" "code")}
      {Lisp-Entry "jazz.emit-inlined-final-dispatch" #f 1312 9 1312 41 ("else" "jazz.error" "jazz.call-return-type" "%%get-signature-positional" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "argument" "parameter" "map" "jazz.sourcified-form" "self" "jazz.new-code" "jazz.emit-expression" "body-code" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%length" "%%get-signature-mandatory" "%%fx=" "jazz.only-positional?" "%%get-method-declaration-body" "body" "%%get-method-declaration-signature" "signature" "let" "final" "case" "jazz.method-dispatch-info" "method-declaration" "dispatch-type" "receive" "inline" "'inline" "%%get-method-declaration-expansion" "%%eq?" "if" "environment" "source-declaration" "arguments" "object" "declaration" "expression")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Dispatch") 1343 21 1343 41 ("%%get-dispatch-arguments" "jazz.fold-expressions" "%%get-dispatch-name" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.walk-dispatch" #f 1352 9 1352 27 ("jazz.walk-list" "jazz.new-dispatch" "%%desourcify" "jazz.error" "%%null?" "%%not" "%%assertion" "%%cdr" "arguments" "%%car" "%%source-code" "jazz.dispatch->symbol" "name" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.definition-modifiers" #f 1365 8 1365 33 ()}
      {Lisp-Entry "jazz.parse-definition" #f 1371 9 1371 30 (",@effective-body" ",parameters" "value" "unspecified" "'unspecified" "%%list" "%%null?" "effective-body" "body" "%%desourcify" "parameters" "let*" "values" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "name" "let" "%%car" "%%source-code" "%%symbol?" "if" "jazz.definition-modifiers" "jazz.parse-modifiers" "expansion" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-definition-declaration" #f 1389 9 1389 41 ("jazz.walk" "%%set-definition-declaration-value" "%%cons" "new-environment" "inline" "'inline" "%%eq?" "%%when" "jazz.add-declaration-child" "effective-declaration" "jazz.new-definition-declaration" "new-declaration" "jazz.build-function-type" "if" "effective-type" "jazz.walk-parameters" "and" "signature" "jazz.specifier->type" "type" "let" "%%cdr" "jazz.parse-definition" "parameters" "value" "expansion" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-definition" #f 1403 9 1403 29 ("%%set-declaration-source" "jazz.walk" "%%set-definition-declaration-value" "inline" "'inline" "%%eq?" "%%not" "%%when" "%%cons" "new-environment" "jazz.find-form-declaration" "new-declaration" "let*" "%%source-code" "%%cdr" "jazz.parse-definition" "parameters" "value" "expansion" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.build-function-type" #f 1416 9 1416 33 ("jazz.Any" "or" "and" "%%get-signature-rest" "rest" "let" "%%get-signature-named" "%%get-signature-optional" "%%get-signature-positional" "parameter-type" "map" "jazz.new-function-type" "result-type" "signature")
        {Lisp-Entry "parameter-type" #f 1417 11 1417 25 ("jazz.Any" "%%get-lexical-binding-type" "or" "parameter")}}
      {Lisp-Entry "jazz.specialize-modifiers" #f 1435 8 1435 33 ()}
      {Lisp-Entry "jazz.parse-specialize" #f 1439 9 1439 30 ("%%cddr" "%%cadr" "values" "as" "'as" "%%car" "%%eq?" "if" "jazz.specialize-modifiers" "jazz.parse-modifiers" "expansion" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-specialize" #f 1446 9 1446 31 (",operator" "%specialize" ",@rest" ",@parameters" ",name" ",expansion" "definition" "begin" "jazz.compose-specializer-name" "or" "name" "parameters" "operator" "%%cdr" "%%car" "signature" "let" "jazz.parse-specialize" "as" "expansion" "receive" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.compose-specializer-name" #f 1458 9 1458 38 ("jazz.specifier->name" "%%list" "jazz.specifier?" "if" "parameter" "lambda" "map" "append" "string-append" "apply" "%%symbol->string" "%%string-append" "%%string->symbol" "parameters" "operator")}
      {Lisp-Entry "jazz.walk-specialize-declaration" #f 1473 9 1473 41 ("jazz.new-specialize" "jazz.add-specializer" "specializer-declaration" "jazz.lookup-reference" "specialized-declaration" "%%cddr" "%%car" "specializer" "%%cadr" "specialized" "let" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-specialize" #f 1483 9 1483 29 ("jazz.new-specialize" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.generic-modifiers" #f 1492 8 1492 30 ()}
      {Lisp-Entry "jazz.parse-generic" #f 1497 9 1497 27 ("values" "body" "specifier" "lambda" "jazz.parse-specifier" "%%cdr" "parameters" "name" "%%car" "signature" "let" "jazz.generic-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-generic-declaration" #f 1507 9 1507 38 ("jazz.walk-error" "jazz.add-declaration-child" "effective-declaration" "jazz.new-generic-declaration" "new-declaration" "jazz.walk-parameters" "signature" "jazz.dynamic-parameter-types" "jazz.lookup-reference" "dynamic-parameter-type" "lambda" "map" "dispatch-type-declarations" "jazz.Any" "jazz.walk-specifier" "type" "let" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-generic" "body" "parameters" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-generic" #f 1521 9 1521 26 ("%%set-declaration-source" "jazz.walk-body" "%%set-generic-declaration-body" "%%set-generic-declaration-signature" "jazz.find-form-declaration" "new-declaration" "jazz.walk-parameters" "augmented-environment" "signature" "%%cdr" "jazz.parse-generic" "body" "parameters" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.specific-modifiers" #f 1538 8 1538 31 ()}
      {Lisp-Entry "jazz.parse-specific" #f 1542 9 1542 28 ("values" "parameters" "name" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "%%cdr" "body" "%%car" "signature" "let*" "jazz.specific-modifiers" "jazz.parse-modifiers" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-specific" #f 1552 9 1552 27 ("jazz.walk-error" "%%set-declaration-source" "nextmethod" "'nextmethod" "jazz.new-nextmethod-variable" "%%cons" "jazz.walk-body" "%%set-specific-declaration-body" "uptodate" "'uptodate" "public" "'public" "jazz.new-specific-declaration" "new-declaration" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.Generic-Declaration" "jazz.lookup-declaration" "generic-declaration" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-specific" "body" "parameters" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.class-modifiers" #f 1573 8 1573 28 ()}
      {Lisp-Entry "jazz.class-keywords" #f 1579 8 1579 27 ()}
      {Lisp-Entry "jazz.parse-class" #f 1583 9 1583 25 ("values" "jazz.class-keywords" "jazz.parse-keywords" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "%%cdr" "jazz.Any" "type" "%%car" "%%source-code" "name" "let" "jazz.class-modifiers" "jazz.parse-modifiers" "implementor" "compatibility" "abstraction" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-class" #f 1592 9 1592 26 (",@class-body" ",interface-names" "implements" "metaclass" ",name" ",access" ",@metaclass-body" ",ascendant-name" ":class" "extends" ",metaclass-name" "begin" "%%symbol->string" "%%string-append" "%%string->symbol" "let" "else" "jazz.walk-error" "%%specified?" "%class" "%%null?" "cond" "jazz.preprocess-meta" "class-body" "metaclass-body" "%%source-code" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.preprocess-meta" #f 1608 9 1608 29 ("jazz.queue-list" "values" "%%cddr" "%%car" "%%cons" "jazz.enqueue" "meta" "'meta" "%%cadr" "%%eq?" "%%cdr" "%%source-code" "%%pair?" "and" "if" "expr" "lambda" "for-each" "class" "jazz.new-queue" "metaclass" "let" "body")}
      {Lisp-Entry "jazz.walk-%class-declaration" #f 1622 9 1622 37 ("jazz.walk-error" "jazz.walk-declarations" "%%cons" "new-environment" "jazz.setup-class-lookups" "jazz.add-declaration-child" "effective-declaration" "jazz.new-class-declaration" "new-declaration" "jazz.listify" "jazz.lookup-reference" "interface-name" "lambda" "map" "jazz.unspecified?" "interfaces" "jazz.lookup-metaclass" "metaclass" "let" "jazz.lookup-ascendant" "ascendant-base" "ascendant-relation" "ascendant" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%class" #f 1638 9 1638 25 ("%%set-declaration-source" "jazz.walk-namespace" "%%set-namespace-declaration-body" "begin" "jazz.error" "Object" "'Object" "%%neq?" "%%not" "and" "if" "%%get-class-declaration-ascendant" "ascendant-declaration" "%%cons" "new-environment" "jazz.find-form-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-class" "body" "attributes" "interface-names" "ascendant-name" "metaclass-name" "implementor" "compatibility" "abstraction" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-metaclass" #f 1652 9 1652 30 ("jazz.lookup-reference" "Object-Class" "'Object-Class" "%%eq?" "jazz.unspecified?" "or" "if" "metaclass-name" "ascendant" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-ascendant" #f 1658 9 1658 30 ("else" "Object-Class" "'Object-Class" "jazz.effective-class-declaration-metaclass" "or" "%%cadr" "jazz.lookup-reference" "base" "relation" "let" ":class" "':class" "%%car" "%%eq?" "%%pair?" "and" "values" "jazz.unspecified?" "cond" "ascendant-name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.effective-class-declaration-metaclass" #f 1678 9 1678 51 ("jazz.effective-class-declaration-metaclass" "%%get-class-declaration-ascendant" "ascendant" "%%get-category-declaration-metaclass" "or" "jazz.resolve-declaration" "let" "%%not" "if" "class-declaration")}
      {Lisp-Entry "jazz.interface-modifiers" #f 1695 8 1695 32 ()}
      {Lisp-Entry "jazz.interface-keywords" #f 1700 8 1700 31 ()}
      {Lisp-Entry "jazz.parse-interface" #f 1704 9 1704 29 ("values" "jazz.interface-keywords" "jazz.parse-keywords" "body" "attributes" "ascendant-names" "metaclass-name" "%%cdr" "jazz.Any" "type" "%%car" "name" "let" "jazz.interface-modifiers" "jazz.parse-modifiers" "implementor" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-interface-declaration" #f 1713 9 1713 40 ("jazz.walk-error" "jazz.walk-declarations" "%%cons" "new-environment" "jazz.setup-interface-lookups" "jazz.add-declaration-child" "effective-declaration" "jazz.new-interface-declaration" "new-declaration" "jazz.listify" "ascendant-name" "lambda" "map" "ascendants" "jazz.lookup-reference" "Interface" "'Interface" "%%eq?" "jazz.unspecified?" "or" "metaclass" "let" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-interface" "body" "attributes" "ascendant-names" "metaclass-name" "implementor" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-interface" #f 1727 9 1727 28 ("%%set-declaration-source" "jazz.walk-namespace" "%%set-namespace-declaration-body" "%%cons" "new-environment" "jazz.find-form-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-interface" "body" "attributes" "ascendant-names" "metaclass-name" "implementor" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.slot-modifiers" #f 1743 8 1743 27 ()}
      {Lisp-Entry "jazz.slot-keywords" #f 1747 8 1747 26 ()}
      {Lisp-Entry "jazz.slot-accessors-modifiers" #f 1751 8 1751 37 ()}
      {Lisp-Entry "jazz.slot-accessor-modifiers" #f 1759 8 1759 36 ()}
      {Lisp-Entry "jazz.parse-slot" #f 1767 9 1767 24 ("values" "jazz.walk-error" "%%not-null?" "if" "jazz.slot-keywords" "jazz.parse-keywords" "setter" "getter" "accessors" "initialize" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "name" "let" "jazz.slot-modifiers" "jazz.parse-modifiers" "rest" "compatibility" "access" "receive" "form" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-slot" #f 1778 9 1778 25 ("slot" "'slot" "%%cons" "jazz.expand-slot-form" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-slot-accessors" #f 1782 9 1782 34 ("values" "jazz.walk-error" "%%not-null?" "if" "jazz.slot-accessors-modifiers" "jazz.parse-modifiers" "rest" "generation" "expansion" "abstraction" "propagation" "access" "receive" "form" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-slot-accessor" #f 1789 9 1789 33 ("values" "jazz.walk-error" "else" "%%car" "%%cdr" "%%symbol->string" "%%string-append" "%%string->symbol" "generate" "'generate" "%%eq?" "and" "%%null?" "cond" "name" "or" "let" "jazz.slot-accessor-modifiers" "jazz.parse-modifiers" "rest" "generation" "expansion" "abstraction" "propagation" "access" "receive" "prefix" "form" "default-generation" "default-expansion" "default-abstraction" "default-propagation" "default-access" "slot-name" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-slot-form" #f 1807 9 1807 30 ("set!" ",value" ",setter-expansion" ",setter-abstraction" ",setter-propagation" ",setter-access" ",@specifier-list" ",getter-expansion" ",getter-abstraction" ",getter-propagation" ",getter-access" "method" ",setter-name" ",getter-name" ",initialize" "with-self" "%%unspecified?" ",compatibility" ",access" ",specifier" ",name" "%slot" "'%slot" "%property" "'%property" "property" "'property" "%%car" "begin" "if" "specifier-list" "generate-setter?" "generate" "'generate" "%%eq?" "generate-getter?" "jazz.generate-symbol" "value" "let*" "setter-name" "setter-generation" "setter-expansion" "setter-abstraction" "setter-propagation" "setter-access" "jazz.parse-slot-accessor" "getter-name" "getter-generation" "getter-expansion" "getter-abstraction" "getter-propagation" "getter-access" "jazz.parse-slot-accessors" "default-generation" "default-expansion" "default-abstraction" "default-propagation" "default-access" "else" "%%list" "%%symbol?" "jazz.unspecified?" "cond" "info" "lambda" "standardize" "let" "%%cdr" "jazz.parse-slot" "setter" "getter" "accessors" "initialize" "compatibility" "access" "specifier" "name" "receive" "form" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%slot-declaration" #f 1849 9 1849 36 ("jazz.add-declaration-child" "effective-declaration" "new-declaration" "jazz.new-slot-declaration" "jazz.new-property-declaration" "%property" "'%property" "%%car" "%%eq?" "new" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "%%cdr" "setter-name" "getter-name" "initialize" "compatibility" "access" "specifier" "name" "jazz.bind" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-%slot" #f 1858 9 1858 24 ("%%set-declaration-source" ",name" "set!" ",setter-name" ",value" "jazz.generate-symbol" "value" "%%set-property-declaration-setter" ",getter-name" "with-self" "self" "lambda" "%%set-property-declaration-getter" "jazz.Property-Declaration" "%%class-is?" "%%when" "jazz.walk" "%%set-slot-declaration-initialize" "%%cadr" "jazz.find-form-declaration" "new-declaration" "jazz.unspecified?" "if" "%%cdr" "setter-name" "getter-name" "initialize" "compatibility" "access" "specifier" "name" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-property" #f 1890 9 1890 29 ("property" "'property" "%%cons" "jazz.expand-slot-form" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.method-modifiers" #f 1899 8 1899 29 ()}
      {Lisp-Entry "jazz.parse-method" #f 1910 9 1910 26 ("values" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "body" "specifier" "lambda" "jazz.parse-specifier" "%%desourcify" "%%cdr" "jazz.wrap-parameters" "parameters" "name" "let" "jazz.desourcify-list" "method" "'method" "%%cons" "%%get-declaration-toplevel" "%%get-lexical-binding-name" "jazz.error" "%%car" "%%source-code" "%%pair?" "and" "%%assertion" "jazz.method-modifiers" "jazz.parse-modifiers" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-method-declaration" #f 1921 9 1921 37 (",@body" "with-self" "jazz.walk" "%%set-method-declaration-body" "%%set-method-declaration-signature" "%%when" "jazz.add-declaration-child" "effective-declaration" "jazz.new-method-declaration" "new-declaration" "%%get-method-declaration-root" "or" "root-declaration" "jazz.lookup-declaration" "next-declaration" "let*" "jazz.unspecified" "values" "jazz.walk-parameters" "augmented-environment" "signature" "concrete" "'concrete" "inline" "'inline" "%%eq?" "and" "inline?" "jazz.Procedure" "jazz.walk-specifier" "jazz.new-function-type" "if" "type" "let" "jazz.walk-error" "jazz.Category-Declaration" "%%class-is?" "%%assertion" "%%cdr" "jazz.parse-method" "body" "parameters" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-method" #f 1945 9 1945 25 ("%%set-declaration-source" "%%set-method-declaration-body" "%%set-method-declaration-signature" "inline" "'inline" "%%when" "concrete" "'concrete" ",@body" "with-self" "%%get-lexical-binding-type" "nextmethod" "'nextmethod" "jazz.new-nextmethod-variable" "%%cons" "jazz.walk" "body-expression" "let" "jazz.walk-parameters" "augmented-environment" "signature" "else" "'virtual" "jazz.Interface-Declaration" "%%not" "case" "'inherited" "%%neq?" "chained" "virtual" "inherited" "final" "%%memq" "%%eq?" "cond" "root-category-declaration" "%%get-method-declaration-propagation" "and" "root-method-propagation" "%%get-method-declaration-root" "root-method-declaration" "%%get-declaration-parent" "category-declaration" "jazz.lookup-declaration" "new-declaration" "let*" "jazz.walk-error" "jazz.Category-Declaration" "%%class-is?" "%%assertion" "%%source-code" "%%cdr" "jazz.parse-method" "body" "parameters" "synchronized" "remote" "expansion" "abstraction" "propagation" "compatibility" "access" "specifier" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.wrap-parameters" #f 1982 9 1982 29 ("jazz.queue-list" "%%cdr" "with-self" ",@specifier-list" "%%cadr" "%%list" "specifier-list" "rest" "specifier" "lambda" "%%cddr" "jazz.parse-specifier" "%%keyword?" "jazz.enqueue" "jazz.specifier?" "%%pair?" "if" "%%car" "parameter" "else" "jazz.enqueue-list" "%%symbol?" "%%null?" "cond" "scan" "iter" "jazz.new-queue" "queue" "let" "parameters")}
      {Lisp-Entry "jazz.walk-cast" #f 2012 9 2012 23 ("jazz.walk" "jazz.walk-specifier" "jazz.new-cast" "%%cddr" "%%car" "expression" "%%cadr" "specifier" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-construct" #f 2025 9 2025 28 ("jazz.walk-list" "jazz.walk" "jazz.new-construct" "%%cddr" "values" "%%cadr" "class" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-self" #f 2038 9 2038 28 ("jazz.walk-body" "%%cdr" "body" "jazz.new-with-self" "jazz.new-self-binding" "%%cons" "new-environment" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Jazz-Walker") 2051 21 2051 43 ("walker" "jazz.walk-error" "jazz.Category-Declaration" "jazz.Library-Declaration" "%%class-is?" "%%not" "and" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" ("jazz.Jazz-Walker") 2063 21 2063 44 ("jazz.unspecified" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.remotable-stub-modifiers" #f 2072 8 2072 37 ()}
      {Lisp-Entry "jazz.remotable-stub-keywords" #f 2075 8 2075 36 ()}
      {Lisp-Entry "jazz.parse-remotable-stub" #f 2079 9 2079 34 ("values" "jazz.remotable-stub-keywords" "jazz.parse-keywords" "body" "ascendant-name" "%%cdr" "%%car" "name" "let" "jazz.remotable-stub-modifiers" "jazz.parse-modifiers" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.method-stub-modifiers" #f 2087 8 2087 34 ()}
      {Lisp-Entry "jazz.parse-method-stub" #f 2093 9 2093 31 ("jazz.Any" "values" "body" "%%cdr" "parameters" "name" "%%car" "signature" "let*" "jazz.method-stub-modifiers" "jazz.parse-modifiers" "passage" "invocation" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-remotable-stub" #f 2102 9 2102 35 ("Remote-Proxy" "'Remote-Proxy" ",@values-method" "implements" "Local-Proxy" "'Local-Proxy" "metaclass" "Remotable-Stub" "'Remotable-Stub" ",stub-interface" "interface" ",remote-class" ",local-class" "Stub-Interface" "'Stub-Interface" "jazz.specified?" "extends" ",interface-class" "private" "class" "begin" "nextmethod" ",@values-list" "list" "append" "proxy-values" "values-method" "values-list" ",call" "function" ",value-keyword" "proxy-value" "self" "',name" ",invoker" "if" ",dispatch" ",@local-result" ",rest" ",@positional" "object" "" "apply" "%%not-null?" "%%when" ",@parameters" ",name" "abstract" "virtual" ",access" "value-keyword" "unspecified" "local-result" "dispatch" "call-remote" "'call-remote" "call" "exec-remote" "'exec-remote" "exec" "post-remote" "'post-remote" "post" "invoker" "jazz.parse-method-stub" "invocation" "method" "'method" "%%eq?" "method-form" "lambda" "for-each" "remotes" "locals" "proxies" "remote-class" "local-class" "stub-interface" "interface-class" "jazz.string->keyword" "0" "%%substring" "%%string=?" "4" "%%fx>" "and" "%%assert" "%%string-length" "len" "str" "let*" "value" "reference" "case" "passage" "parse-value-keyword" "%%cdr" "jazz.enqueue" "%%car" "else" "jazz.enqueue-list" "symbol?" "jazz.queue-list" "values" "%%null?" "cond" "scan" "iter" "parameter" "encode" "positional" "jazz.new-queue" "parameters" "let" "params" "parse-parameters" "%%symbol->string" "%%string-append" "%%string->symbol" "suffix" "add" "define" "jazz.parse-remotable-stub" "body" "ascendant-name" "access" "type" "name" "receive" "rest" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-com-external" #f 2245 9 2245 33 ("jazz.emit-com-external" ",name" "jazz.emit-com-function" ",lowlevel-name" "definition" "begin" "cons" "jazz.C-Type-Declaration" "%%class-is?" "resolved" "jazz.every?" "jazz.platform.windows.com.HRESULT" "'jazz.platform.windows.com.HRESULT" "%%get-declaration-locator" "eq?" "hresult?" "%%symbol->string" "%%string-append" "%%string->symbol" "lowlevel-name" "resolved-directions" "cdr" "cadr" "map" "resolved-params" "resolved-result" "let" "jazz.walk-error" "jazz.resolve-c-type-reference" "symbol?" "type" "lambda" "resolve-declaration" "%%car" "%%null?" "if" "refiid" "car" "name" "let*" "rest" "signature" "result-type" "offset" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-com-function" #f 2262 9 2262 31 ("resolved-params" "resolved-result" "offset")
        {Lisp-Entry "fix-locator" #f 2263 11 2263 22 ("%%get-declaration-locator" "symbol->string" "string-append" "string->symbol" "type" "'type" "%%get-c-type-declaration-kind" "eq?" "if" "declaration")}}
      {Lisp-Entry "jazz.emit-com-external" #f 2292 9 2292 31 ("'result" "=" ",@out-list" "values" "else" "car" "1" "unspecified" "0" "length" "case" "generate-free" "generate-ref" "begin" "validate-hresult" ",refiid" "validate-hresult2" "if" "generate-low" ",lowlevel-name" "result" "generate-encode/enref" "generate-in" "coptr" "function" "generate-out" "generate-cotype-transform" "out-list" "let" "refiid" "resolved-directions" "resolved-params" "lowlevel-name" "hresult?")
        {Lisp-Entry "generate-in" #f 2293 11 2293 22 ("%%number->string" "%%string-append" "%%string->symbol" "out" "'out" "eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-low" #f 2297 11 2297 23 ("%%number->string" "%%string-append" "%%string->symbol" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-out" #f 2299 11 2299 23 ("%%number->string" "%%string-append" "%%string->symbol" "in" "'in" "eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-encode/enref" #f 2303 11 2303 32 (",value" ",encode/enref" ",binding" "generate-in" "get-cotype-default-value" "out" "'out" "eq?" "if" "value" "get-cotype-encode/enref" "encode/enref" "generate-low" "binding" "let" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-ref" #f 2312 11 2312 23 (",value" ",ref" ",binding" "generate-low" "value" "get-cotype-ref" "ref" "generate-out" "binding" "let" "in" "'in" "eq?" "if" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-free" #f 2321 11 2321 24 (",value" ",free" "if" "generate-low" "value" "get-cotype-free" "free" "let" "order" "resolved-direction" "resolved-param")}
        {Lisp-Entry "generate-cotype-transform" #f 2327 11 2327 36 ("+" "cdr" "cons" "car" "generated" "pair?" "if" "1" "order" "resolved-directions" "resolved-params" "iter" "let" "generator")}}
      {Lisp-Entry "get-cotype-default-value" #f 2363 9 2363 33 ("else" "jazz.platform.windows.com.LONG*" "0" "jazz.platform.windows.com.INT*" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "jazz.platform.windows.com.VARIANT" "jazz.platform.windows.com.VARIANT_BOOL*" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "jazz.platform.windows.com.GUID" "jazz.platform.windows.com.BSTR*" "error" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-encode/enref" #f 2380 9 2380 32 ("else" "LONG-enref" "'LONG-enref" "jazz.platform.windows.com.LONG*" "INT-enref" "'INT-enref" "jazz.platform.windows.com.INT*" "IUnknown*-enref" "'IUnknown*-enref" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-encode" "'VARIANT-encode" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL-enref" "'VARIANT_BOOL-enref" "jazz.platform.windows.com.VARIANT_BOOL*" "VARIANT_BOOL-encode" "'VARIANT_BOOL-encode" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-encode" "'GUID-encode" "jazz.platform.windows.com.GUID" "BSTR*-enref" "'BSTR*-enref" "jazz.platform.windows.com.BSTR*" "BSTR-encode" "'BSTR-encode" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-ref" #f 2397 9 2397 23 ("else" "LONG*-ref" "'LONG*-ref" "jazz.platform.windows.com.LONG*" "INT*-ref" "'INT*-ref" "jazz.platform.windows.com.INT*" "IUnknown**-ref" "'IUnknown**-ref" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-ref" "'VARIANT-ref" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL*-ref" "'VARIANT_BOOL*-ref" "jazz.platform.windows.com.VARIANT_BOOL*" "VARIANT_BOOL-decode" "'VARIANT_BOOL-decode" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-ref" "'GUID-ref" "jazz.platform.windows.com.GUID" "BSTR*-ref" "'BSTR*-ref" "jazz.platform.windows.com.BSTR*" "BSTR-ref" "'BSTR-ref" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "get-cotype-free" #f 2414 9 2414 24 ("else" "LONG*-free" "'LONG*-free" "jazz.platform.windows.com.LONG*" "INT*-free" "'INT*-free" "jazz.platform.windows.com.INT*" "IUnknown**-free" "'IUnknown**-free" "jazz.platform.windows.com.IUnknown**" "jazz.platform.windows.com.IUnknown*" "jazz.platform.windows.com.VARIANT*" "VARIANT-decode" "'VARIANT-decode" "jazz.platform.windows.com.VARIANT" "VARIANT_BOOL*-free" "'VARIANT_BOOL*-free" "jazz.platform.windows.com.VARIANT_BOOL*" "jazz.platform.windows.com.VARIANT_BOOL" "jazz.platform.windows.com.GUID*" "GUID-free" "'GUID-free" "jazz.platform.windows.com.GUID" "BSTR*-free" "'BSTR*-free" "jazz.platform.windows.com.BSTR*" "BSTR-free" "'BSTR-free" "jazz.platform.windows.com.BSTR" "%%get-declaration-locator" "case" "cotype")}
      {Lisp-Entry "jazz.validate-access" ("jazz.Jazz-Walker") 2436 21 2436 41 ("referenced-declaration" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-private-access" #f 2446 9 2446 37 ("jazz.illegal-access" "%%get-declaration-toplevel" "%%neq?" "if" "referenced-declaration" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-protected-access" #f 2452 9 2452 39 ("jazz.unspecified" "referenced-declaration" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.illegal-access" #f 2457 9 2457 28 ("jazz.walk-error" "%%get-declaration-locator" "referenced-locator" "%%get-declaration-access" "referenced-access" "let" "referenced-declaration" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-assert" #f 2468 9 2468 27 ("jazz.debug-user?" "jazz.expand-assert-test" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-assertion" #f 2472 9 2472 30 ("jazz.debug-user?" "jazz.expand-assertion-test" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-assert-test" #f 2476 9 2476 32 ("error" "'error" "list" "jazz.expand-assertion-body" "get-output-string" "%%desourcify" "write" "display" "open-output-string" "port" "message" "%%cddr" "body" "%%source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-assertion-test" #f 2487 9 2487 35 ("jazz.expand-assertion-body" "%%cdr" "body" "%%cddr" "%%car" "action" "%%source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-assertion-body" #f 2494 9 2494 35 (",@body" "begin" "jazz.simplify-begin" ",action" ",assertion" "not" "unspecified" "%%not-null?" "if" "let" "body" "action" "assertion" "test?")}
      {Lisp-Entry "jazz.walk-declare" #f 2510 9 2510 26 ("jazz.new-declare" "%%cdr" "declarations" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-include" #f 2521 9 2521 28 ("jazz.new-c-include" "%%cdr" "name" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-declare" #f 2532 9 2532 28 ("jazz.new-c-declare" "%%cdr" "code" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-named-declare-modifiers" #f 2543 8 2543 38 ()}
      {Lisp-Entry "jazz.parse-c-named-declare" #f 2548 9 2548 35 ("values" "jazz.Any" "type" "let" "code" "name" "jazz.bind" "jazz.c-named-declare-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-named-declare-declaration" #f 2555 9 2555 46 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-c-named-declare-declaration" "new-declaration" "let" "%%cdr" "jazz.parse-c-named-declare" "code" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-named-declare-reference" #f 2562 9 2562 47 ("%%get-declaration-locator" "jazz.walk-error" "jazz.C-Named-Declare-Declaration" "%%class-is?" "if" "jazz.lookup-reference" "c-named-declare-declaration" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-named-declare" #f 2569 9 2569 34 ("jazz.find-form-declaration" "new-declaration" "%%cdr" "jazz.parse-c-named-declare" "code" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-initialize" #f 2582 9 2582 31 ("jazz.new-c-initialize" "%%cdr" "code" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-type-modifiers" #f 2593 8 2593 29 ()}
      {Lisp-Entry "jazz.parse-c-type" #f 2598 9 2598 26 ("declare" "scheme-to-c" "c-to-scheme" "values" "%%null?" "if" "jazz.Any" "type" "let" "conversions" "c-type" "name" "jazz.bind" "jazz.c-type-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-type-declaration" #f 2608 9 2608 37 ("jazz.add-declaration-child" "effective-declaration" "%%get-c-type-declaration-pointer-types" "cons" "%%set-c-type-declaration-pointer-types" "%%when" "jazz.new-c-type-declaration" "new-declaration" "jazz.walk-error" "jazz.resolve-c-named-declare-reference" "%%cons" "%%string?" "let" "jazz.resolve-c-type" "references" "base-type-declaration" "expansion" "kind" "jazz.Library-Declaration" "%%class-is?" "if" "%%cdr" "jazz.parse-c-type" "declare" "scheme-to-c" "c-to-scheme" "c-type" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-type" #f 2625 9 2625 25 ("jazz.find-form-declaration" "%%cdr" "jazz.parse-c-type" "declare" "scheme-to-c" "c-to-scheme" "c-type" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-type" #f 2631 9 2631 28 ("jazz.queue-list" "base-type-declaration" "expansion" "kind" "receive" "jazz.error" "else" "'union" "union" "'struct" "struct" "map" "'function" "result-type" "parameter-types" "function" "and" "resolve-expansion" "'pointer" "base-type" "pointer" ",@tag-rest" ",c-string" "%%cdr" "tag-rest" "c-string" "jazz.bind" "%%cadr" "'native" "native" "%%car" "case" "%%pair?" "'type" "%%string?" "%%get-declaration-locator" "alias" "'alias" "values" "jazz.enqueue" "jazz.resolve-c-type-reference" "c-type-declaration" "%%symbol?" "cond" "resolve" "define" "jazz.new-queue" "queue" "let" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.resolve-c-type-reference" #f 2677 9 2677 38 ("%%get-declaration-locator" "jazz.walk-error" "jazz.C-Type-Declaration" "%%class-is?" "if" "jazz.lookup-reference" "c-type-declaration" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-type-reference" #f 2684 9 2684 37 ("%%get-library-declaration-references" "%%append" "%%set-library-declaration-references" "%%get-declaration-toplevel" "library-declaration" "let" "jazz.resolve-c-type" "references" "base-type-declaration" "expansion" "kind" "receive" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-function" #f 2696 9 2696 29 (",c-name-or-code" "map" "c-lambda" "jazz.new-c-function" "jazz.expand-c-type-reference" "type" "lambda" "resolve-access" "%%cdr" "c-name-or-code" "result-type" "types" "jazz.bind" "jazz.error" "%%length" "4" "=" "list?" "and" "%%assertion" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.c-definition-modifiers" #f 2710 8 2710 35 ()}
      {Lisp-Entry "jazz.parse-c-definition" #f 2715 9 2715 32 ("values" "%%cdr" "parameters" "jazz.Any" "type" "%%car" "name" "let" "body" "scope" "c-name" "result-type" "parameter-types" "signature" "jazz.bind" "jazz.c-definition-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-definition-declaration" #f 2724 9 2724 43 ("jazz.add-declaration-child" "effective-declaration" "map" "jazz.new-c-definition-declaration" "new-declaration" "jazz.walk-parameters" "signature" "jazz.expand-c-type-reference" "lambda" "resolve-access" "let" "%%cdr" "jazz.parse-c-definition" "body" "scope" "c-name" "result-type" "parameter-types" "parameters" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-c-definition" #f 2733 9 2733 31 ("%%set-declaration-source" "jazz.walk-body" "%%set-c-definition-declaration-body" "%%set-c-definition-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "%%cdr" "jazz.parse-c-definition" "body" "scope" "c-name" "result-type" "parameter-types" "parameters" "compatibility" "access" "type" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.build-pointer-symbol" #f 2750 9 2750 34 ("%%symbol->string" "%%string-append" "%%string->symbol" "type")}
      {Lisp-Entry "jazz.pointer?" #f 2754 9 2754 22 ("1" "%%fx-" "%%string-ref" "%%eq?" "%%string-length" "lgt" "%%symbol->string" "str" "let*" "type")}
      {Lisp-Entry "jazz.build-method-symbol" #f 2760 9 2760 33 ("map" "symbol->string" "string-append" "apply" "%%string->symbol" "rest" "struct")}
      {Lisp-Entry "jazz.parse-structure-name" #f 2764 9 2764 34 ("%%cddr" "%%cadr" "%%car" "%%symbol->string" "values" "%%symbol?" "if" "name")}
      {Lisp-Entry "jazz.kind+type" #f 2770 11 2770 25 ("values" "car" "alias" "'alias" "eq?" "if" "%%get-c-type-declaration-references" "references" "%%get-c-type-declaration-expansion" "expansion" "%%get-c-type-declaration-kind" "kind" "jazz.resolve-c-type-reference" "loop" "let" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-accessor" #f 2779 11 2779 31 ("values" ",setter-string" "void" "-set!" "'-set!" "setter" ",getter-string" ",type" ",struct*" "c-function" "-ref" "'-ref" "jazz.build-method-symbol" "definition" "getter" "%%memq" "wchar_t-string" "char-string" "type*" "jazz.build-pointer-symbol" "struct*" "let*" "'type" "'union" "'struct" "else" "number->string" "size-string" "cond" "setter-string" "union" "function" "pointer" "native" "case" "%%string-append" "wchar_t" "'wchar_t" "char" "'char" "%%eq?" "or" "if" "getter-string" "%%symbol->string" "id-string" "jazz.kind+type" "expansion" "kind" "receive" "jazz.walk-error" "%%symbol?" "%%integer?" "%%when" "%%null?" "%%not" "and" "%%cddr" "clause-rest" "size" "%%cadr" "id" "%%car" "type" "let" "struct" "clause" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-structure/union" #f 2843 9 2843 36 ("map" "append" "apply" "unsigned-int" "'sizeof" "void" "native" "free" "'free" "c-function" "make" "'make" "jazz.build-method-symbol" "definition" ",@tag*-rest" "pointer" ",struct*" ",@tag-rest" ",c-struct-string" "type" ",struct" "c-type" "begin" "%%list" "jazz.expand-accessor" "setter" "getter" "clause" "expand-accessor" "define" "cdr" "car" "cons" "null?" "if" "tag*-rest" "%%string-append" "sizeof" "jazz.build-pointer-symbol" "struct*" "let" "jazz.parse-structure-name" "tag-rest" "c-struct-string" "struct" "receive" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-structure" #f 2939 9 2939 32 ("jazz.expand-structure/union" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-structure-array" #f 2943 9 2943 38 ("array-element" "'array-element" "%%string-append" ",struct*" "int" "c-function" "array-make" "'array-make" "jazz.build-method-symbol" "definition" "begin" "%%symbol->string" "%%car" "%%null?" "%%not" "if" "c-struct-string" "jazz.build-pointer-symbol" "struct*" "struct" "let*" "rest" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-union" #f 2954 9 2954 28 ("jazz.expand-structure/union" "clauses" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-external" #f 2963 9 2963 31 (",c-name" ",type" ",params" "c-function" ",s-name" "definition" "%%symbol->string" "%%null?" "if" "c-name" "%%cdr" "params" "%%car" "s-name" "let*" "rest" "signature" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-c-external-so" #f 2972 9 2972 34 ("WCHAR-string" "values" ",ext-s-name" "result" "WCHAR-copy" "1" ",string-param" "string-length" "+" "WCHAR-array-make" "pt" "let" ",@new-params" ",s-name" "definition" ",c-name" "%%cons" ",type" "c-external" "begin" "%%null?" "if" "c-name" "list-ref" "string-param" "jazz.generate-symbol" "param" "lambda" "map" "new-params" "%%cdr" "params" "%%symbol->string" "%%string-append" "%%string->symbol" "ext-s-name" "%%car" "s-name" "let*" "rest" "signature" "arg" "type" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-function" #f 2994 9 2994 28 ("values" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "body" "%%car" "%%desourcify" "parameters" "%%source-code" "%%cdr" "rest" "let*" "form-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-function" #f 3002 9 3002 27 (",@body" ",parameters" "lambda" "jazz.walk-lambda" "jazz.parse-function" "body" "parameters" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-parameterize" #f 3015 9 3015 31 ("jazz.walk-body" "jazz.queue-list" "jazz.new-parameterize" "jazz.walk" "%%cons" "jazz.enqueue" "%%cdr" "value" "%%car" "variable" "continuation-capture" "binding-form" "lambda" "for-each" "jazz.new-queue" "expanded-bindings" "unspecified" "'unspecified" "%%list" "%%null?" "if" "effective-body" "%%cddr" "body" "%%cadr" "%%source-code" "bindings" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-with-slots" #f 3042 9 3042 29 (",@body" ",setter-name" "',setter-name" "value" "',object-symbol" ",getter-name" "',getter-name" "%%list" "%%get-slot-declaration-setter-name" "setter-name" "%%get-slot-declaration-getter-name" "getter-name" "jazz.lookup-reference" "slot-declaration" "let*" "slot-name" "lambda" "map" "let-symbol" ",object" ",object-symbol" "jazz.walk" "jazz.generate-symbol" "object-symbol" "%%cdr" "body" "object" "slot-names" "jazz.bind" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-time" #f 3062 9 3062 23 ("jazz.walk" "jazz.new-time-special" "%%cadr" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-form" #f 3073 9 3073 25 ("nextmethod" "cons" "get-class-forms" "get-class-form" "method" "',class-locator" "register-form" ",class-locator" ",form" "',form" "jml->form>>" "class-form" "definition" "begin" "%%get-declaration-locator" "class-locator" "class-declaration" "let*" "form" "environment" "declaration" "resume" "walker")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "library" "syntax" "dialect.scm"} 1226584774
    {Lisp-Entry "core.library.syntax.dialect" #f 37 8 37 35 ("jazz.Dialect" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Dialect" #f 40 27 40 39 ()}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Dialect") 43 30 43 47 ()}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Dialect") 44 30 44 49 ()}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Dialect") 47 21 47 38 ()}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Dialect") 51 21 51 40 ()}
      {Lisp-Entry "jazz.Dialects" #f 63 8 63 21 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-dialect" #f 67 9 67 25 ("jazz.Dialects" "%%table-ref" "name")}
      {Lisp-Entry "jazz.require-dialect" #f 71 9 71 29 ("jazz.error" "jazz.get-dialect" "or" "name")}
      {Lisp-Entry "jazz.register-dialect" #f 76 9 76 30 ("jazz.Dialects" "%%table-set!" "dialect" "name")}}})
"dialect-syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "library" "syntax" "dialect-syntax.scm"} 1226584774
    {Lisp-Entry "core.library.syntax.dialect-syntax" #f 37 8 37 42 ()
      {Lisp-Entry "jazz.Dialect" #f 40 19 40 31 ("jazz.Object-Class" "jazz.Object")}}})
"ecase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "ecase.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.ecase" #f 37 9 37 34 ("scheme")
      {Lisp-Entry "ecase" #f 50 9 50 14 ("=" "'=" "integer?" "eqv?" "'eqv?" "list" "or" "'or" "pair?" "cons" "else" "'else" "eq?" "cdr" "body" "car" "desourcify" "value" "clause" "map" "cond" "symbol" "lambda" "with-expression-value" "sourcify-if" "cddr" "clauses" "source-code" "cadr" "target" "let" "form-src")}}})
"either"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "either.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.either" #f 37 9 37 35 ("scheme")
      {Lisp-Entry "either" #f 48 9 48 15 ("'let" "generate-symbol" "symbol" "'if" "list" "rest" "expr" "bind" "pair" "lambda" "proc" "letrec" "set!" "car" "symbol?" "when" "not" "while" "complex?" "scan" "sourcify-if" "error" "null?" "if" "source-code" "cdr" "expressions" "let" "form-src")}}})
"enumeration"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "enumeration.scm"} 1226584778})
"error"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "exception" "runtime" "error.scm"} 1226584773
    {Lisp-Entry "core.exception.runtime.error" #f 37 8 37 36 ("jazz.Error" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Error" #f 40 27 40 37 ()}
      {Lisp-Entry "jazz.new-error" #f 43 9 43 23 ("jazz.Error" "jazz.allocate-error" "message")}
      {Lisp-Entry "jazz.get-message" ("jazz.Error") 47 21 47 37 ("error" "%%get-error-message")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Error") 51 21 51 43 ("error" "%%get-error-message")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "syntax" "error.scm"} 1226584773
    {Lisp-Entry "core.class.syntax.error" #f 37 8 37 31 ()
      {Lisp-Entry "jazz.object-of-class?" #f 40 22 40 43 ()}
      {Lisp-Entry "jazz.not-object-error" #f 43 9 43 30 ("jazz.error" "obj")}
      {Lisp-Entry "jazz.outside-object-error" #f 47 9 47 34 ("jazz.error" "rnk" "obj")}
      {Lisp-Entry "jazz.expected-error" #f 51 9 51 28 ("jazz.error" "obj" "class")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "error.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.error" #f 37 8 37 31 ()
      {Lisp-Entry "jazz.unimplemented" #f 40 9 40 27 ("%%car" "jazz.error" "%%null?" "if" "rest")}}})
"essay"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "essay.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.essay" #f 37 9 37 34 ("scheme")
      {Lisp-Entry "essay" #f 46 9 46 14 (",expr" ",@tests" "and" "when" "last" "expr" "butlast" "tests" "sourcify-if" "error" "null?" "if" "source-code" "cdr" "expressions" "let" "form-src")}}})
"example"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "swig" "example" "example.scm"} 1226584783})
"exception"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "exception.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.exception" #f 39 8 39 35 ()
      {Lisp-Entry "jazz.get-exception-hook" #f 47 9 47 32 ("##primordial-exception-handler-hook")}
      {Lisp-Entry "jazz.set-exception-hook" #f 50 9 50 32 ("##primordial-exception-handler-hook" "set!" "hook")}
      {Lisp-Entry "jazz.invoke-exception-hook" #f 54 9 54 35 ("##thread-end-with-uncaught-exception!" "exc" "hook")}
      {Lisp-Entry "jazz.system-exception-hook" #f 63 9 63 35 ("##repl-exception-handler-hook" "jazz.setup-terminal" "other" "exc")}
      {Lisp-Entry "jazz.setup-terminal" #f 73 9 73 28 ("jazz.bring-terminal-to-front" "jazz.set-terminal-title" "begin" "repl-output-port" "tty?" "if")}
      {Lisp-Entry "jazz.set-terminal-title" #f 80 9 80 32 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.bring-terminal-to-front" #f 83 9 83 37 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.clear-terminal" #f 86 9 86 28 ("repl-output-port" "display")}
      {Lisp-Entry "jazz.with-exception-filter" #f 95 9 95 35 ("%%continuation-graft" "filter-exc" "if" "exc" "with-exception-handler" "catcher-cont" "lambda" "%%continuation-capture" "current-exception-handler" "previous-handler" "let" "thunk" "catcher" "filter")}
      {Lisp-Entry "jazz.with-exception-propagater" #f 120 9 120 39 ("current-exception-handler" "let" "%%continuation-graft" "raise-cont" "exc" "with-exception-handler" "catcher-cont" "lambda" "%%continuation-capture" "thunk" "handler")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "exception" "runtime" "exception.scm"} 1226584773
    {Lisp-Entry "core.exception.runtime.exception" #f 37 8 37 40 ("newline" "jazz.present-exception" "display" "begin" "%%is?" "%%object?" "and" "if" "port" "exc" "lambda" "set!" "##display-exception-hook" "previous-hook" "let" "jazz.Exception-Detail" "jazz.Exception" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Exception" #f 45 27 45 41 ()}
      {Lisp-Entry "jazz.print-object" ("jazz.Exception") 48 21 48 38 ("if" "jazz.object->serial" "jazz.format" "exception" "jazz.get-message" "message" "let" "detail" "output")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Exception") 56 30 56 52 ()}
      {Lisp-Entry "jazz.get-message" ("jazz.Exception") 57 30 57 46 ()}
      {Lisp-Entry "jazz.get-detail" ("jazz.Exception") 58 30 58 45 ()}
      {Lisp-Entry "jazz.present-exception" ("jazz.Exception") 61 21 61 43 ("get-output-string" "exception" "jazz.format" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.get-message" ("jazz.Exception") 66 21 66 37 ()}
      {Lisp-Entry "jazz.get-detail" ("jazz.Exception") 69 21 69 36 ()}
      {Lisp-Entry "jazz.Exception-Detail" #f 81 27 81 48 ()}
      {Lisp-Entry "jazz.new-exception-detail" #f 84 9 84 34 ("jazz.Exception-Detail" "jazz.allocate-exception-detail" "children" "location" "title" "icon")}
      {Lisp-Entry "jazz.exception-reason" #f 96 9 96 30 ("get-output-string" "jazz.display-exception" "open-output-string" "output" "let" "exc")}
      {Lisp-Entry "jazz.exception-detail" #f 102 9 102 30 ("jazz.get-detail" "jazz.Exception" "%%is?" "%%object?" "and" "if" "exc")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "exception.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.exception" #f 38 8 38 35 ()
      {Lisp-Entry "jazz.current-exception-handler" #f 43 12 43 42 ("current-exception-handler")}
      {Lisp-Entry "jazz.with-exception-handler" #f 46 13 46 40 ("continuation-return" "exc" "with-exception-handler" "return" "lambda" "continuation-capture" "thunk" "proc")}
      {Lisp-Entry "jazz.exception-reason" #f 54 13 54 34 ("jazz.format" "not" "if" "'arguments" "arguments" "'message" "message" "'location" "'exc" "condition-property-accessor" "location" "let" "exc")}
      {Lisp-Entry "jazz.current-exception-handler" #f 63 12 63 42 ("current-exception-handler")}
      {Lisp-Entry "jazz.with-exception-handler" #f 66 12 66 39 ("with-exception-handler")}
      {Lisp-Entry "jazz.with-exception-catcher" #f 69 12 69 39 ("with-exception-catcher")}
      {Lisp-Entry "jazz.display-exception" #f 72 12 72 34 ("display-exception")}
      {Lisp-Entry "jazz.display-continuation-backtrace" #f 75 12 75 47 ("display-continuation-backtrace")}
      {Lisp-Entry "jazz.raise" #f 78 13 78 23 ("raise" "obj")}}})
"expander"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "generic" "syntax" "expander.scm"} 1226584774
    {Lisp-Entry "core.generic.syntax.expander" #f 38 8 38 36 ()
      {Lisp-Entry "jazz.dynamic-parameter?" #f 41 9 41 32 ("%%cdr" "%%pair?" "and" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-type" #f 46 9 46 36 ("jazz.specifier->name" "jazz.specifier?" "if" "%%car" "type" "let" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-types" #f 53 9 53 37 ("%%cdr" "jazz.dynamic-parameter-type" "%%cons" "%%car" "jazz.dynamic-parameter?" "%%pair?" "and" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.dynamic-parameter-name" #f 62 9 62 36 ("%%cadr" "parameter")}
      {Lisp-Entry "jazz.dynamic-parameter-names" #f 66 9 66 37 ("%%cdr" "jazz.dynamic-parameter-name" "%%cons" "%%car" "jazz.dynamic-parameter?" "%%pair?" "and" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.generic-parameters" #f 75 9 75 32 ("jazz.reverse!" "values" "else" "%%symbol?" "jazz.dynamic-parameter-name" "%%cons" "%%cdr" "jazz.dynamic-parameter?" "cond" "%%car" "parameter" "%%pair?" "if" "result" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.specific-parameters" #f 89 9 89 33 ("else" "%%cdr" "jazz.dynamic-parameter-name" "%%cons" "jazz.dynamic-parameter?" "cond" "%%car" "parameter" "%%pair?" "if" "iterate" "let" "parameters")}
      {Lisp-Entry "jazz.expand-define-generic" #f 105 9 105 35 ("apply" "jazz.dynamic-parameter-names" ",parameter" "%%class-of" "parameter" "map" "list" "%%specific-dispatch" ",gensym-specific" "jazz.process-pending-specifics" "%%get-generic-pending-specifics" "%%not" "%%when" ",gensym-rest" ",@mandatory-parameters" ",@dynamic-signature" "%%list" "',generic-method-locator" "jazz.new-generic" "jazz.generic-reset" "jazz.global-value" ",gensym-generic" "',generic-locator" "jazz.global-variable?" ",generic-locator" ",@body" ",generic-method-locator" "error" ",formal-signature" "lambda" ",specific-implementation-locator" "define" "begin" "%%null?" "if" "gensym-rest" "let" "jazz.generic-parameters" "extra-parameters" "mandatory-parameters" "receive" "gensym-specific" "jazz.generate-symbol" "gensym-generic" "jazz.generic-object-locator" "generic-locator" "jazz.implementation-locator" "specific-implementation-locator" "jazz.specific-parameters" "formal-signature" "jazz.dynamic-parameter-types" "dynamic-signature" "%%cdr" "parameters" "%%car" "generic-method-locator" "let*" "body" "signature")}
      {Lisp-Entry "jazz.generic-object-locator" #f 141 9 141 36 ("%%symbol->string" "%%string-append" "%%string->symbol" "locator")}
      {Lisp-Entry "jazz.expand-define-specific" #f 150 9 150 36 (",generic-locator" "jazz.register-specific" "%%set-specific-implementation" ",@body" "%%get-specific-ancestor-specifics" "%%get-specific-implementation" "nextmethod" "let" ",formal-signature" ",gensym-lambda" ",@dynamic-signature" "%%list" "lambda" "jazz.new-specific" ",gensym-specific" ",specific-implementation-locator" "define" "gensym-lambda" "jazz.generate-symbol" "gensym-specific" "jazz.generic-object-locator" "generic-locator" "jazz.implementation-locator" "specific-implementation-locator" "jazz.specific-parameters" "formal-signature" "jazz.dynamic-parameter-types" "dynamic-signature" "%%cdr" "parameters" "%%car" "generic-method-locator" "let*" "body" "signature")}
      {Lisp-Entry "jazz.implementation-locator" #f 169 9 169 36 ("jazz.join-strings" "%%string-append" "%%string->symbol" "car" "%%pair?" "if" "symbol->string" "class/call" "lambda" "map" "dynamic-signature-strings" "%%symbol->string" "generic-string" "let" "dynamic-signature" "generic-locator")}}})
"favorites"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "favorites.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.favorites" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Favorites-Preferences" #f 52 7 52 28 ("title:" "Preferences")
        {Lisp-Entry "can-rename-component?" #f 64 11 64 32 ()}
        {Lisp-Entry "can-delete-component?" #f 68 11 68 32 ()}
        {Lisp-Entry "can-move-component?" #f 72 11 72 30 ()}
        {Lisp-Entry "can-copy-component?" #f 76 11 76 30 ()}
        {Lisp-Entry "get-addable-classes" #f 80 11 80 30 ("Favorite-Configuration" "list")}
        {Lisp-Entry "get-addable-details" #f 85 11 85 30 ("300" "file" "100" "shortcut")}}
      {Lisp-Entry "Favorite-Configuration" #f 94 7 94 29 ("Bitmap-Resource" "icon:" "Preferences")
        {Lisp-Entry "shortcut" #f 97 12 97 20 ("generate")}
        {Lisp-Entry "file" #f 98 12 98 16 ("generate")}
        {Lisp-Entry "get-domain" #f 110 16 110 26 ("nextmethod" "else" "String-Domain" "new" "shortcut" "field-name" "case" "property")}
        {Lisp-Entry "get-class-presentation" #f 121 16 121 38 ()}
        {Lisp-Entry "property-presentation" #f 125 16 125 37 ("nextmethod" "else" "file" "shortcut" "field-name" "case" "property")}
        {Lisp-Entry "presentation-property?" #f 132 11 132 33 ("shortcut" "field-name" "memq?" "property")}
        {Lisp-Entry "get-presentation" #f 136 11 136 27 ("shortcut")}
        {Lisp-Entry "set-presentation" #f 140 11 140 27 ("shortcut:" "self" "set-property" "shortcut" "designer")}
        {Lisp-Entry "get-row-instance" #f 144 11 144 27 ("nextmethod" "else" "File-Row" "file" "String-Row" "new" "shortcut" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 151 11 151 37 ("file" "shortcut")}}}})
"fonts"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "literals" "fonts.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.literals.fonts" #f 37 9 37 31 ("24" "36" "11.5" "vera-mono" "'vera-mono" "vera-serif" "'vera-serif" "10.5" "vera-sans" "'vera-sans" "else" "Doc-Heading3" "'Doc-Heading3" "Doc-Heading2" "'Doc-Heading2" "14" "Doc-Heading1" "'Doc-Heading1" "Doc-Heading0" "'Doc-Heading0" "11" "Heading5" "'Heading5" "Heading4" "'Heading4" "13" "Heading3" "'Heading3" "16" "Heading2" "'Heading2" "18" "Heading1" "'Heading1" "28" "Heading0" "'Heading0" "9" "Password" "'Password" "Hyperlink-Small" "'Hyperlink-Small" "underline?:" "Hyperlink" "'Hyperlink" "Code-Bold" "'Code-Bold" "monospace?:" "10" "Code" "'Code" "Text" "'Text" "italic?:" "12" "Text-Italic" "'Text-Italic" "Caption" "'Caption" "bold?:" "Label-Bold" "'Label-Bold" "8" "point-size:" "font-name:" "name:" "Font" "new" "function" "Label" "'Label" "register-font" "begin" "windows" "cond-expand" "jazz")}})
"foreign"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "foreign.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.foreign" #f 37 8 37 33 ()
      {Lisp-Entry "jazz.foreign?" #f 42 12 42 25 ("foreign?")}
      {Lisp-Entry "jazz.foreign-address" #f 43 12 43 32 ("foreign-address")}
      {Lisp-Entry "jazz.foreign-release!" #f 44 12 44 33 ("foreign-release!")}
      {Lisp-Entry "jazz.foreign-released?" #f 45 12 45 34 ("foreign-released?")}
      {Lisp-Entry "jazz.foreign-tags" #f 46 12 46 29 ("foreign-tags")}
      {Lisp-Entry "jazz.still-obj-refcount-dec!" #f 47 12 47 40 ("##still-obj-refcount-dec!")}
      {Lisp-Entry "jazz.still-obj-refcount-inc!" #f 48 12 48 40 ("##still-obj-refcount-inc!")}}})
"freetype"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "font" "platform" "freetype.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.font.platform.freetype" #f 37 9 37 47 ("droid-serif" "'droid-serif" "droid-mono" "'droid-mono" "droid-sans" "'droid-sans" "vera-serif" "'vera-serif" "vera-mono" "'vera-mono" "vera-sans" "'vera-sans" "freetype-font-table" "table-set!" "jazz")
      {Lisp-Entry "freetype-font-table" #f 49 12 49 31 ("make-table")}
      {Lisp-Entry "get-freetype-font" #f 53 13 53 30 ("error" "freetype-font-table" "table-ref" "either" "name")}
      {Lisp-Entry "set-freetype-font" #f 57 13 57 30 ("freetype-font-table" "table-set!" "paths" "name")}
      {Lisp-Entry "create-font-handle" #f 74 13 74 31 ("error" "kernel-source" "string-append" "ft-library" "FT_New_Face" "/=" "when" "make-FT_Face" "face" "let" "list-ref" "path" "0" "else" "1" "2" "3" "italic?" "bold?" "and" "cond" "index" "get-freetype-font" "paths" "let*" "font-name" "font-name:")}
      {Lisp-Entry "create-cairo-font-handle" #f 96 13 96 37 ("0" "cairo_ft_font_face_create_for_ft_face" "handle")}
      {Lisp-Entry "destroy-font-handle" #f 100 13 100 32 ("free-FT_Face" "handle")}
      {Lisp-Entry "destroy-cairo-font-handle" #f 104 13 104 38 ("cairo_font_face_destroy" "handle")}}})
"generic"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "generic" "syntax" "generic.scm"} 1226584774
    {Lisp-Entry "core.generic.syntax.generic" #f 43 8 43 35 ("jazz.Generic" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Generic" #f 46 19 46 31 ("%%set-generic-pending-specifics" "%%get-generic-pending-specifics" "pending-specifics" "%%set-generic-root-specific" "%%get-generic-root-specific" "root-specific" "%%get-generic-name" "name" "%%get-generic-locator" "locator" "jazz.allocate-generic" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Generic" #f 53 27 53 39 ()}
      {Lisp-Entry "jazz.define-generic" #f 56 20 56 39 ("jazz.expand-define-generic" "apply" "rest")}
      {Lisp-Entry "%%specific-dispatch" #f 60 20 60 39 ("dynamic-classes" "generic")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "generic" "runtime" "generic.scm"} 1226584774
    {Lisp-Entry "core.generic.runtime.generic" #f 38 8 38 36 ()
      {Lisp-Entry "jazz.new-generic" #f 41 9 41 25 ("jazz.generic-make-root" "jazz.Generic" "jazz.allocate-generic" "generic" "jazz.identifier-name" "name" "let*" "root-proc" "dynamic-signature" "locator")}
      {Lisp-Entry "jazz.generic-reset" #f 48 9 48 27 ("%%get-generic-root-specific" "%%get-specific-dynamic-signature" "jazz.generic-make-root" "root-proc" "generic")}
      {Lisp-Entry "jazz.generic-make-root" #f 52 9 52 31 ("%%get-generic-pending-specifics" "%%cons" "%%set-generic-pending-specifics" "%%set-generic-root-specific" "jazz.invalid-generic-call" "apply" "rest" "lambda" "or" "jazz.new-specific" "root-specific" "let" "root-proc" "dynamic-signature" "generic")}
      {Lisp-Entry "jazz.invalid-generic-call" #f 58 9 58 34 ("jazz.generic-error" "%%cdr" "%%car" "%%class-of" "%%cons" "%%pair?" "and" "if" "%%get-generic-root-specific" "%%get-specific-dynamic-signature" "signature" "iter" "dynamic-parameters" "let" "rest" "generic")}
      {Lisp-Entry "jazz.generic-error" #f 68 9 68 27 ("%%cons" "jazz.error" "%%get-generic-root-specific" "%%get-specific-dynamic-signature" "root-signature" "%%get-generic-name" "name" "let" "signature" "generic")}
      {Lisp-Entry "jazz.register-specific" #f 80 9 80 31 ("%%get-generic-pending-specifics" "%%cons" "%%set-generic-pending-specifics" "specific" "generic")}
      {Lisp-Entry "jazz.process-pending-specifics" #f 89 9 89 39 ("%%set-generic-pending-specifics" "%%get-generic-pending-specifics" "jazz.insert/replace-specific" "specific" "lambda" "for-each" "%%get-generic-root-specific" "jazz.resolve-signature" "generic")}
      {Lisp-Entry "jazz.resolve-signature" #f 99 9 99 31 ("%%set-specific-dynamic-signature" "%%procedure?" "%%when" "%%get-specific-dynamic-signature" "signature/proc" "let" "specific")}
      {Lisp-Entry "jazz.insert/replace-specific" #f 105 9 105 37 ("%%set-car!" "iter" "%%set-generic-root-specific" "%%get-generic-root-specific" "perfect-match" "%%set-specific-descendant-specifics" "set!" "%%memq" "%%when" "else" "jazz.remove!" "jazz.specific-better?" "%%cdr" "%%cons" "%%get-specific-ancestor-specifics" "%%car" "best" "brothers" "brother-partition" "cdr" "if" "descendants" "assq" "descendant-partition" "assv" "jazz.dynamic-signature-compare" "ordered" "'ordered" "%%eq?" "descendant-signature" "descendant" "%%get-specific-descendant-specifics" "jazz.partition" "partition" "ancestor-signature" "ancestor" "lambda" "for-each" "%%set-specific-ancestor-specifics" "descendant-specifics" "put-best-first" "ancestors" "let" "%%pair?" "jazz.generic-error" "%%not" "cond" "jazz.gather-dynamic-signature-ancestors" "matches" "%%get-specific-dynamic-signature" "dynamic-signature" "let*" "specific" "generic")
        {Lisp-Entry "put-best-first" #f 106 11 106 25 ("%%cons" "jazz.specific-better?" "specific" "%%pair?" "if" "others" "%%car" "best" "%%cdr" "scan" "iter" "let" "specifics")}}
      {Lisp-Entry "jazz.gather-dynamic-signature-ancestors" #f 180 9 180 48 ("%%null?" "else" "%%cons" "%%memq" "%%cdr" "%%get-specific-descendant-specifics" "found-in-descendants" "ordered" "set!" "equal" "%%get-specific-dynamic-signature" "jazz.dynamic-signature-compare" "case" "%%car" "specific" "%%pair?" "if" "partial-matches" "%%get-generic-root-specific" "list" "specifics" "iter" "or" "perfect-match" "let" "dynamic-signature" "generic")}
      {Lisp-Entry "jazz.dynamic-signature-compare" #f 206 9 206 39 ("else" "ordered" "'ordered" "reverse-ordered" "'reverse-ordered" "jazz.subcategory?" "%%cdr" "%%car" "%%eq?" "cond" "unordered" "'unordered" "and" "null?" "or" "if" "equal" "'equal" "match" "iter" "let" "ancestor-signature" "descendant-signature")}
      {Lisp-Entry "jazz.dynamic-signature-equal?" #f 228 9 228 38 ("%%cdr" "%%car" "%%eq?" "and" "null?" "or" "if" "iter" "let" "dynamic-signature2" "dynamic-signature1")}
      {Lisp-Entry "jazz.specific-better?" #f 237 9 237 30 ("%%cdr" "%%car" "%%get-class-level" ">" "or" "signature2" "%%get-specific-dynamic-signature" "signature1" "iter" "let" "specific2" "specific1")}
      {Lisp-Entry "jazz.display-tree" #f 249 9 249 26 ("1" "+" "newline" "%%get-specific-descendant-specifics" "%%get-specific-ancestor-specifics" "%%get-specific-dynamic-signature" "%%list" "write" "specific" "lambda" "for-each" "0" "level" "%%get-generic-root-specific" "list" "specifics" "iterate" "let" "jazz.process-pending-specifics" "%%get-generic-pending-specifics" "%%null?" "%%not" "%%when" "generic")}
      {Lisp-Entry "jazz.dispatch-from-root" #f 274 9 274 32 ("else" "%%car" "%%pair?" "jazz.generic-error" "%%not" "cond" "jazz.gather-dynamic-signature-ancestors" "matches" "let" "dynamic-classes" "generic")}}})
"increase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "increase.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.increase" #f 37 9 37 37 ("scheme")
      {Lisp-Entry "increase!" #f 43 8 43 17 (",increment" "+" ",location" "set!" "car" "1" "null?" "if" "increment" "let" "rest" "location")}
      {Lisp-Entry "decrease!" #f 51 8 51 17 (",increment" "-" ",location" "set!" "car" "1" "null?" "if" "increment" "let" "rest" "location")}}})
"independant"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "platform" "independant.jazz"} 1226584789
    {Lisp-Entry "jazz.ui.window.platform.independant" #f 38 9 38 44 ("jazz")
      {Lisp-Entry "*events-single-threaded?*" #f 46 12 46 37 ()}
      {Lisp-Entry "get-events-single-threaded?" #f 50 13 50 40 ("*events-single-threaded?*")}
      {Lisp-Entry "set-events-single-threaded?" #f 54 13 54 40 ("*events-single-threaded?*" "set!" "flag")}
      {Lisp-Entry "event-thread" #f 63 12 63 24 ("primordial-thread")}
      {Lisp-Entry "event-thread?" #f 67 13 67 26 ("event-thread" "current-thread" "eq?")}
      {Lisp-Entry "post-event" #f 71 13 71 23 ("post-event" "'post-event" "event-thread" "thread-post" "thunk")}
      {Lisp-Entry "execute-event" #f 76 13 76 26 ("execute-event" "'execute-event" "event-thread" "thread-execute" "thunk")}
      {Lisp-Entry "call-event" #f 81 13 81 23 ("call-event" "'call-event" "event-thread" "thread-call" "thunk")}}})
"initialize"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "library" "initialize.scm"} 1226584774
    {Lisp-Entry "core.library.initialize" #f 37 8 37 31 ("jazz.initialize-primitive-patterns")}})
"install"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "install.scm"} 1226584778
    {Lisp-Entry "jazz.install" #f 37 8 37 20 ("jazz.install-jazz-literals" "jazz.register-reader-extension")
      {Lisp-Entry "jazz.install-jazz-literals" #f 40 8 40 34 ("jazz.jazz-readtable" "'jazz.jazz-readtable" "construct-lisp-entry" "'construct-lisp-entry" "Lisp-Entry" "'Lisp-Entry" "construct-lisp-file-entry" "'construct-lisp-file-entry" "Lisp-File-Entry" "'Lisp-File-Entry" "construct-python-def-entry" "'construct-python-def-entry" "Python-Def-Entry" "'Python-Def-Entry" "construct-python-class-entry" "'construct-python-class-entry" "Python-Class-Entry" "'Python-Class-Entry" "construct-python-file-entry" "'construct-python-file-entry" "Python-File-Entry" "'Python-File-Entry" "construct-properties-entry" "'construct-properties-entry" "Properties-Entry" "'Properties-Entry" "construct-properties-file-entry" "'construct-properties-file-entry" "Properties-File-Entry" "'Properties-File-Entry" "construct-lua-function-entry" "'construct-lua-function-entry" "Lua-Function-Entry" "'Lua-Function-Entry" "construct-lua-file-entry" "'construct-lua-file-entry" "Lua-File-Entry" "'Lua-File-Entry" "construct-javascript-function-entry" "'construct-javascript-function-entry" "JavaScript-Function-Entry" "'JavaScript-Function-Entry" "construct-javascript-variable-entry" "'construct-javascript-variable-entry" "JavaScript-Variable-Entry" "'JavaScript-Variable-Entry" "construct-javascript-file-entry" "'construct-javascript-file-entry" "JavaScript-File-Entry" "'JavaScript-File-Entry" "construct-java-file-entry" "'construct-java-file-entry" "Java-File-Entry" "'Java-File-Entry" "construct-css-entry" "'construct-css-entry" "CSS-Entry" "'CSS-Entry" "construct-css-file-entry" "'construct-css-file-entry" "CSS-File-Entry" "'CSS-File-Entry" "construct-c-export-entry" "'construct-c-export-entry" "C-Export-Entry" "'C-Export-Entry" "construct-c-include-entry" "'construct-c-include-entry" "C-Include-Entry" "'C-Include-Entry" "construct-c-define-entry" "'construct-c-define-entry" "C-Define-Entry" "'C-Define-Entry" "construct-c-category-entry" "'construct-c-category-entry" "C-Category-Entry" "'C-Category-Entry" "construct-c-file-entry" "'construct-c-file-entry" "C-File-Entry" "'C-File-Entry" "construct-version" "'construct-version" "Version" "'Version" "construct-selection-handler" "'construct-selection-handler" "Selection-Handler" "'Selection-Handler" "construct-event-handler" "'construct-event-handler" "Event-Handler" "'Event-Handler" "construct-event" "'construct-event" "Event" "'Event" "construct-cursor-resource" "'construct-cursor-resource" "Cursor-Resource" "'Cursor-Resource" "construct-icon-resource" "'construct-icon-resource" "Icon-Resource" "'Icon-Resource" "construct-bitmap-resource" "'construct-bitmap-resource" "Bitmap-Resource" "'Bitmap-Resource" "construct-formatted-text" "'construct-formatted-text" "Formatted-Text" "'Formatted-Text" "construct-text" "'construct-text" "Text" "'Text" "construct-hyperlink-style" "'construct-hyperlink-style" "Hyperlink-Style" "'Hyperlink-Style" "construct-text-style" "'construct-text-style" "Text-Style" "'Text-Style" "construct-format" "'construct-format" "Format" "'Format" "construct-ior" "'construct-ior" "IOR" "'IOR" "construct-systype" "'construct-systype" "Systype" "'Systype" "construct-datatype" "'construct-datatype" "Datatype" "'Datatype" "construct-host" "'construct-host" "Host" "'Host" "construct-directory-group" "'construct-directory-group" "Directory-Group" "'Directory-Group" "construct-directory" "'construct-directory" "Directory" "'Directory" "construct-file" "'construct-file" "File" "'File" "construct-pen" "'construct-pen" "Pen" "'Pen" "construct-font" "'construct-font" "Font" "'Font" "construct-color" "'construct-color" "Color" "'Color" "construct-locales" "'construct-locales" "Locales" "'Locales" "construct-shortcut" "'construct-shortcut" "Shortcut" "'Shortcut" "construct-action" "'construct-action" "Action" "'Action" "construct-box" "'construct-box" "Box" "'Box" "construct-exception-detail" "'construct-exception-detail" "Exception-Detail" "'Exception-Detail" "construct-range" "'construct-range" "Range" "'Range" "construct-rect" "'construct-rect" "Rect" "'Rect" "construct-cell" "'construct-cell" "Cell" "'Cell" "construct-dimension" "'construct-dimension" "Dimension" "'Dimension" "construct-point" "'construct-point" "jazz.literals" "'jazz.literals" "Point" "'Point" "jazz.dialect" "'jazz.dialect" "core.library" "'core.library" "jazz.load-module" "install-literals" "apply" "jazz.module-autoload" "set!" "not" "if" "rest" "constructor" "jazz.register-literal-constructor" "'jazz.register-literal-constructor" "jazz.global-value" "constructor-name" "module" "name" "register-literal" "define" "lambda" "readtable" "let")}}})
"java.lang.Class"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "java" "java" "lang" "java.lang.Class.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.Java.java.lang.java.lang.Class" #f 37 9 37 58 ("jazz")
      {Lisp-Entry "java.lang.Class" #f 43 7 43 22 ("java.lang.Object")
        {Lisp-Entry "forName" #f 46 51 46 58 ()}
        {Lisp-Entry "getName" #f 47 51 47 58 ()}}}})
"java.lang.ClassLoader"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "java" "java" "lang" "java.lang.ClassLoader.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.Java.java.lang.java.lang.ClassLoader" #f 37 9 37 64 ("jazz")
      {Lisp-Entry "java.lang.ClassLoader" #f 43 7 43 28 ("java.lang.Object")
        {Lisp-Entry "getSystemClassLoader" #f 46 54 46 74 ()}}}})
"java.lang.Object"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "java" "java" "lang" "java.lang.Object.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.Java.java.lang.java.lang.Object" #f 37 9 37 59 ("jazz")
      {Lisp-Entry "java.lang.Object" #f 43 7 43 23 ("Java-Object")
        {Lisp-Entry "getClass" #f 46 51 46 59 ()}
        {Lisp-Entry "toString" #f 47 51 47 59 ()}}}})
"java.lang.StackTraceElement"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "java" "java" "lang" "java.lang.StackTraceElement.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.Java.java.lang.java.lang.StackTraceElement" #f 37 9 37 70 ("jazz")
      {Lisp-Entry "java.lang.StackTraceElement" #f 43 7 43 34 ("java.lang.Object")
        {Lisp-Entry "getFileName" #f 46 46 46 57 ()}
        {Lisp-Entry "getLineNumber" #f 47 46 47 59 ()}
        {Lisp-Entry "getClassName" #f 48 46 48 58 ()}
        {Lisp-Entry "getMethodName" #f 49 46 49 59 ()}}}})
"java.lang.String"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "java" "java" "lang" "java.lang.String.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.Java.java.lang.java.lang.String" #f 37 9 37 59 ("jazz")
      {Lisp-Entry "java.lang.String" #f 43 7 43 23 ("java.lang.Object")
        {Lisp-Entry "length" #f 46 45 46 51 ()}}}})
"java.lang.Throwable"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "java" "java" "lang" "java.lang.Throwable.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.Java.java.lang.java.lang.Throwable" #f 37 9 37 62 ("jazz")
      {Lisp-Entry "java.lang.Throwable" #f 43 7 43 26 ("java.lang.Object")
        {Lisp-Entry "getMessage" #f 46 74 46 84 ()}
        {Lisp-Entry "getStackTrace" #f 47 74 47 87 ()}}}})
"java.sql.Connection"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "java" "java" "sql" "java.sql.Connection.jazz"} 1226584774
    {Lisp-Entry "jazz.database.Java.java.sql.java.sql.Connection" #f 37 9 37 56 ("jazz")
      {Lisp-Entry "java.sql.Connection" #f 43 7 43 26 ("java.lang.Object")
        {Lisp-Entry "close" #f 46 63 46 68 ()}
        {Lisp-Entry "getMetaData" #f 47 63 47 74 ()}
        {Lisp-Entry "createStatement" #f 48 63 48 78 ()}
        {Lisp-Entry "createStatement" #f 49 63 49 78 ()}}}})
"java.sql.DatabaseMetaData"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "java" "java" "sql" "java.sql.DatabaseMetaData.jazz"} 1226584774
    {Lisp-Entry "jazz.database.Java.java.sql.java.sql.DatabaseMetaData" #f 37 9 37 62 ("jazz")
      {Lisp-Entry "java.sql.DatabaseMetaData" #f 43 7 43 32 ("java.lang.Object")
        {Lisp-Entry "getDatabaseMajorVersion" #f 46 57 46 80 ()}
        {Lisp-Entry "getDatabaseMinorVersion" #f 47 57 47 80 ()}
        {Lisp-Entry "getCatalogs" #f 48 57 48 68 ()}
        {Lisp-Entry "getSchemas" #f 49 57 49 67 ()}
        {Lisp-Entry "getTypeInfo" #f 50 57 50 68 ()}
        {Lisp-Entry "getUDTs" #f 51 57 51 64 ()}
        {Lisp-Entry "getTables" #f 52 57 52 66 ()}
        {Lisp-Entry "getTableTypes" #f 53 57 53 70 ()}
        {Lisp-Entry "getProcedures" #f 54 57 54 70 ()}
        {Lisp-Entry "getColumns" #f 55 57 55 67 ()}
        {Lisp-Entry "getPrimaryKeys" #f 56 57 56 71 ()}
        {Lisp-Entry "getImportedKeys" #f 57 57 57 72 ()}
        {Lisp-Entry "getExportedKeys" #f 58 57 58 72 ()}
        {Lisp-Entry "getIndexInfo" #f 59 57 59 69 ()}
        {Lisp-Entry "getTablePrivileges" #f 60 57 60 75 ()}}}})
"java.sql.DriverManager"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "java" "java" "sql" "java.sql.DriverManager.jazz"} 1226584774
    {Lisp-Entry "jazz.database.Java.java.sql.java.sql.DriverManager" #f 37 9 37 59 ("jazz")
      {Lisp-Entry "java.sql.DriverManager" #f 43 7 43 29 ("java.lang.Object")}}})
"java.sql.ResultSet"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "java" "java" "sql" "java.sql.ResultSet.jazz"} 1226584774
    {Lisp-Entry "jazz.database.Java.java.sql.java.sql.ResultSet" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "java.sql.ResultSet" #f 43 7 43 25 ("java.lang.Object")
        {Lisp-Entry "TYPE_FORWARD_ONLY" #f 46 26 46 43 ("1003")}
        {Lisp-Entry "TYPE_SCROLL_INSENSITIVE" #f 47 26 47 49 ("1004")}
        {Lisp-Entry "TYPE_SCROLL_SENSITIVE" #f 48 26 48 47 ("1005")}
        {Lisp-Entry "CONCUR_READ_ONLY" #f 50 26 50 42 ("1007")}
        {Lisp-Entry "CONCUR_UPDATABLE" #f 51 26 51 42 ("1008")}
        {Lisp-Entry "getMetaData" #f 54 64 54 75 ()}
        {Lisp-Entry "next" #f 55 64 55 68 ()}
        {Lisp-Entry "getInt" #f 56 64 56 70 ()}
        {Lisp-Entry "getInt" #f 57 64 57 70 ()}
        {Lisp-Entry "getString" #f 58 64 58 73 ()}
        {Lisp-Entry "getString" #f 59 64 59 73 ()}}}})
"java.sql.ResultSetMetaData"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "java" "java" "sql" "java.sql.ResultSetMetaData.jazz"} 1226584774
    {Lisp-Entry "jazz.database.Java.java.sql.java.sql.ResultSetMetaData" #f 37 9 37 63 ("jazz")
      {Lisp-Entry "java.sql.ResultSetMetaData" #f 43 7 43 33 ("java.lang.Object")
        {Lisp-Entry "getColumnCount" #f 46 48 46 62 ()}
        {Lisp-Entry "getColumnName" #f 47 48 47 61 ()}
        {Lisp-Entry "getColumnTypeName" #f 48 48 48 65 ()}
        {Lisp-Entry "getColumnDisplaySize" #f 49 48 49 68 ()}
        {Lisp-Entry "getPrecision" #f 50 48 50 60 ()}}}})
"java.sql.Statement"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "database" "java" "java" "sql" "java.sql.Statement.jazz"} 1226584774
    {Lisp-Entry "jazz.database.Java.java.sql.java.sql.Statement" #f 37 9 37 55 ("jazz")
      {Lisp-Entry "java.sql.Statement" #f 43 7 43 25 ("java.lang.Object")
        {Lisp-Entry "setMaxRows" #f 46 56 46 66 ()}
        {Lisp-Entry "executeQuery" #f 47 56 47 68 ()}
        {Lisp-Entry "executeUpdate" #f 48 56 48 69 ()}}}})
"kernel"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "scheme" "dialect" "kernel.scm"} 1226584790
    {Lisp-Entry "scheme.dialect.kernel" #f 37 9 37 30 ("core")
      {Lisp-Entry "eq?" #f 55 8 55 11 ()}
      {Lisp-Entry "eqv?" #f 56 8 56 12 ()}
      {Lisp-Entry "equal?" #f 57 8 57 14 ()}
      {Lisp-Entry "number?" #f 70 8 70 15 ()}
      {Lisp-Entry "complex?" #f 71 8 71 16 ()}
      {Lisp-Entry "real?" #f 72 8 72 13 ()}
      {Lisp-Entry "rational?" #f 73 8 73 17 ()}
      {Lisp-Entry "integer?" #f 74 8 74 16 ()}
      {Lisp-Entry "exact?" #f 75 8 75 14 ()}
      {Lisp-Entry "inexact?" #f 76 8 76 16 ()}
      {Lisp-Entry "=" #f 77 8 77 9 ()}
      {Lisp-Entry "<" #f 78 8 78 9 ()}
      {Lisp-Entry ">" #f 79 8 79 9 ()}
      {Lisp-Entry "<=" #f 80 8 80 10 ()}
      {Lisp-Entry ">=" #f 81 8 81 10 ()}
      {Lisp-Entry "zero?" #f 82 8 82 13 ()}
      {Lisp-Entry "positive?" #f 83 8 83 17 ()}
      {Lisp-Entry "negative?" #f 84 8 84 17 ()}
      {Lisp-Entry "odd?" #f 85 8 85 12 ()}
      {Lisp-Entry "even?" #f 86 8 86 13 ()}
      {Lisp-Entry "max" #f 87 8 87 11 ()}
      {Lisp-Entry "min" #f 88 8 88 11 ()}
      {Lisp-Entry "+" #f 89 8 89 9 ()}
      {Lisp-Entry "*" #f 90 8 90 9 ()}
      {Lisp-Entry "-" #f 91 8 91 9 ()}
      {Lisp-Entry "/" #f 92 8 92 9 ()}
      {Lisp-Entry "abs" #f 93 8 93 11 ()}
      {Lisp-Entry "quotient" #f 94 8 94 16 ()}
      {Lisp-Entry "remainder" #f 95 8 95 17 ()}
      {Lisp-Entry "modulo" #f 96 8 96 14 ()}
      {Lisp-Entry "gcd" #f 97 8 97 11 ()}
      {Lisp-Entry "lcm" #f 98 8 98 11 ()}
      {Lisp-Entry "numerator" #f 99 8 99 17 ()}
      {Lisp-Entry "denominator" #f 100 8 100 19 ()}
      {Lisp-Entry "floor" #f 101 8 101 13 ()}
      {Lisp-Entry "ceiling" #f 102 8 102 15 ()}
      {Lisp-Entry "truncate" #f 103 8 103 16 ()}
      {Lisp-Entry "round" #f 104 8 104 13 ()}
      {Lisp-Entry "rationalize" #f 105 8 105 19 ()}
      {Lisp-Entry "exp" #f 106 8 106 11 ()}
      {Lisp-Entry "log" #f 107 8 107 11 ()}
      {Lisp-Entry "sin" #f 108 8 108 11 ()}
      {Lisp-Entry "cos" #f 109 8 109 11 ()}
      {Lisp-Entry "tan" #f 110 8 110 11 ()}
      {Lisp-Entry "asin" #f 111 8 111 12 ()}
      {Lisp-Entry "acos" #f 112 8 112 12 ()}
      {Lisp-Entry "atan" #f 113 8 113 12 ()}
      {Lisp-Entry "sqrt" #f 114 8 114 12 ()}
      {Lisp-Entry "expt" #f 115 8 115 12 ()}
      {Lisp-Entry "make-rectangular" #f 116 8 116 24 ()}
      {Lisp-Entry "make-polar" #f 117 8 117 18 ()}
      {Lisp-Entry "real-part" #f 118 8 118 17 ()}
      {Lisp-Entry "imag-part" #f 119 8 119 17 ()}
      {Lisp-Entry "magnitude" #f 120 8 120 17 ()}
      {Lisp-Entry "angle" #f 121 8 121 13 ()}
      {Lisp-Entry "exact->inexact" #f 122 8 122 22 ()}
      {Lisp-Entry "inexact->exact" #f 123 8 123 22 ()}
      {Lisp-Entry "number->string" #f 131 8 131 22 ()}
      {Lisp-Entry "string->number" #f 132 8 132 22 ()}
      {Lisp-Entry "not" #f 145 8 145 11 ()}
      {Lisp-Entry "boolean?" #f 146 8 146 16 ()}
      {Lisp-Entry "pair?" #f 154 8 154 13 ()}
      {Lisp-Entry "cons" #f 155 8 155 12 ()}
      {Lisp-Entry "car" #f 156 8 156 11 ()}
      {Lisp-Entry "cdr" #f 157 8 157 11 ()}
      {Lisp-Entry "set-car!" #f 158 8 158 16 ()}
      {Lisp-Entry "set-cdr!" #f 159 8 159 16 ()}
      {Lisp-Entry "caar" #f 160 8 160 12 ()}
      {Lisp-Entry "cadr" #f 161 8 161 12 ()}
      {Lisp-Entry "cdar" #f 162 8 162 12 ()}
      {Lisp-Entry "cddr" #f 163 8 163 12 ()}
      {Lisp-Entry "caaar" #f 164 8 164 13 ()}
      {Lisp-Entry "caadr" #f 165 8 165 13 ()}
      {Lisp-Entry "cadar" #f 166 8 166 13 ()}
      {Lisp-Entry "caddr" #f 167 8 167 13 ()}
      {Lisp-Entry "cdaar" #f 168 8 168 13 ()}
      {Lisp-Entry "cdadr" #f 169 8 169 13 ()}
      {Lisp-Entry "cddar" #f 170 8 170 13 ()}
      {Lisp-Entry "cdddr" #f 171 8 171 13 ()}
      {Lisp-Entry "caaaar" #f 172 8 172 14 ()}
      {Lisp-Entry "caaadr" #f 173 8 173 14 ()}
      {Lisp-Entry "caadar" #f 174 8 174 14 ()}
      {Lisp-Entry "caaddr" #f 175 8 175 14 ()}
      {Lisp-Entry "cadaar" #f 176 8 176 14 ()}
      {Lisp-Entry "cadadr" #f 177 8 177 14 ()}
      {Lisp-Entry "caddar" #f 178 8 178 14 ()}
      {Lisp-Entry "cadddr" #f 179 8 179 14 ()}
      {Lisp-Entry "cdaaar" #f 180 8 180 14 ()}
      {Lisp-Entry "cdaadr" #f 181 8 181 14 ()}
      {Lisp-Entry "cdadar" #f 182 8 182 14 ()}
      {Lisp-Entry "cdaddr" #f 183 8 183 14 ()}
      {Lisp-Entry "cddaar" #f 184 8 184 14 ()}
      {Lisp-Entry "cddadr" #f 185 8 185 14 ()}
      {Lisp-Entry "cdddar" #f 186 8 186 14 ()}
      {Lisp-Entry "cddddr" #f 187 8 187 14 ()}
      {Lisp-Entry "null?" #f 188 8 188 13 ()}
      {Lisp-Entry "list?" #f 189 8 189 13 ()}
      {Lisp-Entry "list" #f 190 8 190 12 ()}
      {Lisp-Entry "length" #f 191 8 191 14 ()}
      {Lisp-Entry "append" #f 192 8 192 14 ()}
      {Lisp-Entry "reverse" #f 193 8 193 15 ()}
      {Lisp-Entry "list-tail" #f 194 8 194 17 ()}
      {Lisp-Entry "list-ref" #f 195 8 195 16 ()}
      {Lisp-Entry "memq" #f 196 8 196 12 ()}
      {Lisp-Entry "memv" #f 197 8 197 12 ()}
      {Lisp-Entry "member" #f 198 8 198 14 ()}
      {Lisp-Entry "assq" #f 199 8 199 12 ()}
      {Lisp-Entry "assv" #f 200 8 200 12 ()}
      {Lisp-Entry "assoc" #f 201 8 201 13 ()}
      {Lisp-Entry "symbol?" #f 209 8 209 15 ()}
      {Lisp-Entry "symbol->string" #f 210 8 210 22 ()}
      {Lisp-Entry "string->symbol" #f 211 8 211 22 ()}
      {Lisp-Entry "char?" #f 219 8 219 13 ()}
      {Lisp-Entry "char=?" #f 220 8 220 14 ()}
      {Lisp-Entry "char<?" #f 221 8 221 14 ()}
      {Lisp-Entry "char>?" #f 222 8 222 14 ()}
      {Lisp-Entry "char<=?" #f 223 8 223 15 ()}
      {Lisp-Entry "char>=?" #f 224 8 224 15 ()}
      {Lisp-Entry "char-ci=?" #f 225 8 225 17 ()}
      {Lisp-Entry "char-ci<?" #f 226 8 226 17 ()}
      {Lisp-Entry "char-ci>?" #f 227 8 227 17 ()}
      {Lisp-Entry "char-ci<=?" #f 228 8 228 18 ()}
      {Lisp-Entry "char-ci>=?" #f 229 8 229 18 ()}
      {Lisp-Entry "char-alphabetic?" #f 230 8 230 24 ()}
      {Lisp-Entry "char-numeric?" #f 231 8 231 21 ()}
      {Lisp-Entry "char-whitespace?" #f 232 8 232 24 ()}
      {Lisp-Entry "char-upper-case?" #f 233 8 233 24 ()}
      {Lisp-Entry "char-lower-case?" #f 234 8 234 24 ()}
      {Lisp-Entry "char->integer" #f 235 8 235 21 ()}
      {Lisp-Entry "integer->char" #f 236 8 236 21 ()}
      {Lisp-Entry "char-upcase" #f 237 8 237 19 ()}
      {Lisp-Entry "char-downcase" #f 238 8 238 21 ()}
      {Lisp-Entry "string?" #f 246 8 246 15 ()}
      {Lisp-Entry "make-string" #f 247 8 247 19 ()}
      {Lisp-Entry "string" #f 248 8 248 14 ()}
      {Lisp-Entry "string-length" #f 249 8 249 21 ()}
      {Lisp-Entry "string-ref" #f 250 8 250 18 ()}
      {Lisp-Entry "string-set!" #f 251 8 251 19 ()}
      {Lisp-Entry "string=?" #f 252 8 252 16 ()}
      {Lisp-Entry "string-ci=?" #f 253 8 253 19 ()}
      {Lisp-Entry "string<?" #f 254 8 254 16 ()}
      {Lisp-Entry "string>?" #f 255 8 255 16 ()}
      {Lisp-Entry "string<=?" #f 256 8 256 17 ()}
      {Lisp-Entry "string>=?" #f 257 8 257 17 ()}
      {Lisp-Entry "string-ci<?" #f 258 8 258 19 ()}
      {Lisp-Entry "string-ci>?" #f 259 8 259 19 ()}
      {Lisp-Entry "string-ci<=?" #f 260 8 260 20 ()}
      {Lisp-Entry "string-ci>=?" #f 261 8 261 20 ()}
      {Lisp-Entry "substring" #f 262 8 262 17 ()}
      {Lisp-Entry "string-append" #f 263 8 263 21 ()}
      {Lisp-Entry "string->list" #f 264 8 264 20 ()}
      {Lisp-Entry "list->string" #f 265 8 265 20 ()}
      {Lisp-Entry "string-copy" #f 266 8 266 19 ()}
      {Lisp-Entry "string-fill!" #f 267 8 267 20 ()}
      {Lisp-Entry "vector?" #f 275 8 275 15 ()}
      {Lisp-Entry "make-vector" #f 276 8 276 19 ()}
      {Lisp-Entry "vector" #f 277 8 277 14 ()}
      {Lisp-Entry "vector-length" #f 278 8 278 21 ()}
      {Lisp-Entry "vector-ref" #f 279 8 279 18 ()}
      {Lisp-Entry "vector-set!" #f 280 8 280 19 ()}
      {Lisp-Entry "vector->list" #f 281 8 281 20 ()}
      {Lisp-Entry "list->vector" #f 282 8 282 20 ()}
      {Lisp-Entry "vector-fill!" #f 283 8 283 20 ()}
      {Lisp-Entry "procedure?" #f 291 8 291 18 ()}
      {Lisp-Entry "apply" #f 292 8 292 13 ()}
      {Lisp-Entry "map" #f 293 8 293 11 ()}
      {Lisp-Entry "for-each" #f 294 8 294 16 ()}
      {Lisp-Entry "force" #f 295 8 295 13 ()}
      {Lisp-Entry "call-with-current-continuation" #f 296 8 296 38 ()}
      {Lisp-Entry "call/cc" #f 297 8 297 15 ()}
      {Lisp-Entry "values" #f 298 8 298 14 ()}
      {Lisp-Entry "call-with-values" #f 299 8 299 24 ()}
      {Lisp-Entry "dynamic-wind" #f 300 8 300 20 ()}
      {Lisp-Entry "eval" #f 308 8 308 12 ()}
      {Lisp-Entry "scheme-replace-report-environment" #f 309 8 309 41 ()}
      {Lisp-Entry "null-environment" #f 310 8 310 24 ()}
      {Lisp-Entry "interaction-environment" #f 311 8 311 31 ()}
      {Lisp-Entry "call-with-input-file" #f 324 8 324 28 ()}
      {Lisp-Entry "call-with-output-file" #f 325 8 325 29 ()}
      {Lisp-Entry "input-port?" #f 326 8 326 19 ()}
      {Lisp-Entry "output-port?" #f 327 8 327 20 ()}
      {Lisp-Entry "current-input-port" #f 328 8 328 26 ()}
      {Lisp-Entry "current-output-port" #f 329 8 329 27 ()}
      {Lisp-Entry "with-input-from-file" #f 330 8 330 28 ()}
      {Lisp-Entry "with-output-to-file" #f 331 8 331 27 ()}
      {Lisp-Entry "open-input-file" #f 332 8 332 23 ()}
      {Lisp-Entry "open-output-file" #f 333 8 333 24 ()}
      {Lisp-Entry "close-input-port" #f 334 8 334 24 ()}
      {Lisp-Entry "close-output-port" #f 335 8 335 25 ()}
      {Lisp-Entry "read" #f 343 8 343 12 ()}
      {Lisp-Entry "read-char" #f 344 8 344 17 ()}
      {Lisp-Entry "peek-char" #f 345 8 345 17 ()}
      {Lisp-Entry "eof-object?" #f 346 8 346 19 ()}
      {Lisp-Entry "char-ready?" #f 347 8 347 19 ()}
      {Lisp-Entry "write" #f 355 8 355 13 ()}
      {Lisp-Entry "display" #f 356 8 356 15 ()}
      {Lisp-Entry "newline" #f 357 8 357 15 ()}
      {Lisp-Entry "write-char" #f 358 8 358 18 ()}
      {Lisp-Entry "load" #f 359 8 359 12 ()}
      {Lisp-Entry "transcript-on" #f 360 8 360 21 ()}
      {Lisp-Entry "transcript-off" #f 361 8 361 22 ()}}})
"keyword"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "keyword.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.keyword" #f 37 8 37 33 ()
      {Lisp-Entry "jazz.keyword?" #f 42 13 42 26 ("keyword?" "obj")}
      {Lisp-Entry "jazz.keyword->string" #f 45 13 45 33 ("keyword->string" "keyword")}
      {Lisp-Entry "jazz.string->keyword" #f 48 13 48 33 ("string->keyword" "string")}
      {Lisp-Entry "jazz.keyword?" #f 52 13 52 26 ("keyword?" "obj")}
      {Lisp-Entry "jazz.keyword->string" #f 55 13 55 33 ("keyword->string" "keyword")}
      {Lisp-Entry "jazz.string->keyword" #f 58 13 58 33 ("string->keyword" "string")}
      {Lisp-Entry "jazz.keyword?" #f 62 12 62 25 ("1" "%%string-length" "%%fx-" "%%string-ref" "%%eqv?" "%%symbol->string" "str" "let" "%%symbol?" "and" "obj")}
      {Lisp-Entry "jazz.keyword->string" #f 68 12 68 32 ("1" "%%length" "%%fx-" "0" "%%substring" "%%symbol->string" "str" "let" "keyword")}
      {Lisp-Entry "jazz.string->keyword" #f 73 12 73 32 ("%%string-append" "%%string->symbol" "string")}}})
"library"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "library" "syntax" "library.scm"} 1226584774
    {Lisp-Entry "core.library.syntax.library" #f 37 8 37 35 ()
      {Lisp-Entry "library" #f 40 20 40 27 ("%%source-code" "%%cdr" "jazz.expand-library" "form-src" "lambda")}}})
"list"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "list.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.list" #f 37 8 37 30 ()
      {Lisp-Entry "jazz.proper-list" #f 40 9 40 25 ("jazz.queue-list" "%%cdr" "set!" "%%car" "jazz.enqueue" "%%pair?" "%%while" "jazz.new-queue" "proper" "let" "lst")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "list.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.list" #f 37 8 37 30 ()
      {Lisp-Entry "jazz.find-in" #f 40 9 40 21 ("%%cdr" "%%car" "or" "%%null?" "if" "scan" "iter" "let" "lst" "proc")}
      {Lisp-Entry "jazz.find-if" #f 48 9 48 21 ("%%cdr" "%%car" "value" "%%null?" "if" "scan" "iter" "let" "lst" "predicate")}
      {Lisp-Entry "jazz.getprop" #f 58 9 58 21 ("%%cddr" "else" "%%car" "%%eqv?" "%%null?" "cond" "scan" "iter" "let" "target" "plist")}
      {Lisp-Entry "jazz.getf" #f 68 9 68 18 ("%%cadr" "if" "jazz.getprop" "pair" "let" "not-found" "#!key" "target" "plist")}
      {Lisp-Entry "jazz.reverse!" #f 75 8 75 21 ("reverse")}
      {Lisp-Entry "jazz.list-copy" #f 79 9 79 23 ("obj" "lambda" "map" "lst")}
      {Lisp-Entry "jazz.last-tail" #f 83 9 83 23 ("else" "%%null?" "cond" "%%cdr" "tail" "scan" "iter" "let" "%%pair?" "if" "lst")}
      {Lisp-Entry "jazz.last-pair" #f 96 9 96 23 ("%%cdr" "tail" "scan" "iter" "let" "%%pair?" "if" "lst")}
      {Lisp-Entry "jazz.last" #f 106 9 106 18 ("jazz.last-pair" "%%car" "lst")}
      {Lisp-Entry "jazz.remove-duplicates" #f 110 9 110 31 ("%%cons" "%%memv" "%%cdr" "result" "%%car" "value" "%%not-null?" "if" "scan" "iter" "let" "lst")}
      {Lisp-Entry "jazz.partition" #f 121 9 121 23 ("%%set-cdr!" "begin" "%%list" "%%cons" "%%not" "set" "category" "%%car" "element" "%%cdr" "partition" "let*" "%%null?" "if" "scan" "iter" "let" "associate" "key" "lst")}
      {Lisp-Entry "jazz.rassq" #f 136 9 136 19 ("%%cdr" "else" "%%car" "%%cdar" "%%eq?" "%%null?" "cond" "rest" "iter" "let" "alist" "obj")}
      {Lisp-Entry "jazz.butlast" #f 146 9 146 21 ("jazz.butlast" "%%car" "%%cons" "%%cdr" "%%null?" "if" "lst")}
      {Lisp-Entry "jazz.listify" #f 152 9 152 21 ("%%list" "%%pair?" "%%null?" "or" "if" "obj")}
      {Lisp-Entry "jazz.naturals" #f 158 9 158 22 ("jazz.reverse!" "1" "%%fx+" "%%cons" "set!" "%%fx<" "%%while" "n" "lst" "let" "to" "from")}
      {Lisp-Entry "jazz.remove!" #f 167 9 167 21 ("%%set-cdr!" "scan" "previous" "let" "begin" "%%null?" "if" "%%cdr" "set!" "%%car" "%%eqv?" "%%not-null?" "and" "%%while" "lst" "target")}}})
"logfont"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "graphic" "font" "platform" "logfont.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.graphic.font.platform.logfont" #f 37 9 37 46 ("jazz")
      {Lisp-Entry "create-font-handle" #f 44 13 44 31 ("DEFAULT_PITCH" "DEFAULT_QUALITY" "CLIP_DEFAULT_PRECIS" "OUT_DEFAULT_PRECIS" "ANSI_CHARSET" "underline?" "1" "italic?" "FW_NORMAL" "FW_BOLD" "bold?" "if" "0" "point-size" "calculate-height" "CreateFont" "font-name" "font-name:")}
      {Lisp-Entry "calculate-height" #f 68 13 68 29 ("72" "96" "*" "fxround/" "point-size")}
      {Lisp-Entry "create-cairo-font-handle" #f 72 13 72 37 ("LOGFONTW-free" "cairo_win32_font_face_create_for_logfontw" "prog1" "get-logfont" "logfont" "let" "handle")}
      {Lisp-Entry "get-logfont" #f 78 13 78 24 ("LOGFONTW*->PVOID" "size-of-LOGFONTW" "GetObject" "LOGFONTW-make" "info" "let" "handle")}
      {Lisp-Entry "destroy-font-handle" #f 84 13 84 32 ("DeleteObject" "handle")}
      {Lisp-Entry "destroy-cairo-font-handle" #f 88 13 88 38 ("cairo_font_face_destroy" "handle")}}})
"loop"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "loop.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.loop" #f 37 9 37 33 ("scheme")
      {Lisp-Entry "loop" #f 131 9 131 13 ("expand-loop" "sourcify-if" "source-code" "cdr" "clauses" "let" "form-src")}
      {Lisp-Entry "noobject" #f 138 8 138 16 ("noobject" "'noobject" "list")}
      {Lisp-Entry "expand-loop" #f 142 9 142 20 ("set-cdr!" "'set-cdr!" "'begin" "jazz.null?" "'jazz.null?" "'cons" "'<list+>" "'<list>" "cns" "ptr" ",@unless-actions" "unless-actions" ",@when-actions" ",test" "when-actions" "body" "'when" "res" "what" ">" "'>" "rpt" "count" "specifier?" "then" "then-key" "first" "symbol?" "end" "decrease!" "'decrease!" ">=" "'>=" "downto" "below" "cddr" "<=" "'<=" "cadr" "scan" "by" "'increase!" "update" "to" "from" "in-properties" "1" "+" "'+" "element" "'element" "<" "'<" "length" "'length" "'<fx>" "'<vector>" "len" "vec" "vector" "in-vector" "get-next" "'get-next" "done?" "'done?" "iterate-sequence" "'iterate-sequence" "Iterator" "'Iterator" "is?" "'is?" "'if" "'<Iterator>" "itr" "val" "iterator" "in-sequence" "error" "remainder" "keyword" "'cdr" "'car" "'set!" "'null?" "either" "'<Object>" "in" "parse-for" "receive" "lst" "set-finally" "expr" "add-epilogue" "after" "add-after" "enqueue-list" "action-list" "add-actions" "action" "before" "add-before" "test" "add-test" "exit-safe" "values" "'not" "add-initial-test" "'<bool>" "'<Object+>" "ext" "ret" "get-return/exit" "add-with" "append" "list" "binding" "null?" "value" "type" "variable" "add-binding" "cons" "Unbound" "increase!" "->string" "string-append" "string->symbol" "symbol" "prefix" "unique" ",@finally" "begin" ",return" ",exit" "eq?" ",@epilogue" ",@afters" ",@actions" ",withs" ",@befores" ",@tests" "and" ",bindings" "let*" "queue-list" "cdr" "else" "process-finally" "process-return" "process-collect" "collect" "process-sum" "sum" "process-do" "do" "process-unless" "unless" "process-when" "when" "process-every" "every" "process-some" "some" "process-repeat" "repeat" "process-for" "for" "process-with" "with" "case" "rest" "key" "bind" "add-action" "source-code" "pair?" "not" "if" "car" "clause" "not-null?" "while" "new-queue" "expand-loop" "process-clauses" "set!" "expand" "define" "0" "unique-rank" "finally" "epilogue" "afters" "actions" "befores" "withs" "tests" "exit" "noobject" "return" "bindings" "let" "clauses")}}})
"m"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "modules" "m.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.modules.m" #f 37 9 37 34 ("jazz")}})
"macros"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "macros.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.macros" #f 37 9 37 35 ("scheme")
      {Lisp-Entry "constant" #f 43 9 43 17 (",value" ",name" "definition" "sourcify-if" "caddr" "value" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "enumeration" #f 51 9 51 20 (",@definitions" "begin" "definition" "declaration" "lambda" "map" "definitions" "sourcify-if" "cddr" "declarations" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "when" #f 60 9 60 13 ("unspecified" "'unspecified" "list" "null?" "begin" ",test" "if" "sourcify-if" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "unless" #f 73 9 73 15 (",@body" "begin" ",test" "not" "if" "sourcify-if" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "prog1" #f 83 9 83 14 (",@body" "begin" ",returned" ",value" "sourcify-if" "generate-symbol" "value" "cddr" "body" "source-code" "cadr" "returned" "let" "form-src")}
      {Lisp-Entry "while" #f 94 9 94 14 (",@body" "begin" ",test" "if" ",iter" "sourcify-if" "generate-symbol" "iter" "cddr" "body" "source-code" "cadr" "test" "let" "form-src")}
      {Lisp-Entry "unwind-protect" #f 107 9 107 23 (",@protection" ",body" "function" "dynamic-wind" "sourcify-if" "cddr" "protection" "source-code" "cadr" "body" "let" "form-src")}
      {Lisp-Entry "catch" #f 120 9 120 14 ("desourcify" "error" "else" "car" "pair?" ",@body" "exc" "lambda" ",type" "call-with-catch" "symbol?" "cond" "sourcify-if" "cddr" "body" "source-code" "cadr" "type" "let" "form-src")}
      {Lisp-Entry "~" #f 137 9 137 10 (",name" "',name" ",obj" "dispatch" "apply" "rest" "obj" "lambda" "with-expression-value" "sourcify-if" "cddr" "car" "object" "cadr" "source-code" "name" "let" "form-src")}
      {Lisp-Entry "form>>" #f 148 8 148 14 ("form")}
      {Lisp-Entry "expand-push!" #f 154 9 154 21 ("cons" "'cons" "set!" "'set!" "list" "value" "location")}
      {Lisp-Entry "expand-pop!" #f 160 9 160 20 ("cdr" "'cdr" "set!" "'set!" "list" "location")}
      {Lisp-Entry "expand-assert" #f 164 9 164 22 ("proc" "car" "error" "'error" "unless" "'unless" "list" ":text" "->string" "string-append" "message" "expr" "let*" "null?" "if" "rest" "first")}
      {Lisp-Entry "expand-assert-type" #f 175 9 175 27 ("type-name" "'type-name" "error" "'error" "is-not?" "'is-not?" "when" "'when" "list" "let*" "'let*" "cons" "generate-symbol" "value" "let" "type" "expr")}
      {Lisp-Entry "expand-error?" #f 183 9 183 22 ("begin" "'begin" "cons" "Error" "'Error" "catch" "'catch" "list" "generate-symbol" "err" "let" "body")}
      {Lisp-Entry "c-constant" #f 196 9 196 19 (",value" ",name" "definition" "sourcify-if" "caddr" "value" "source-code" "cadr" "name" "let" "form-src")}
      {Lisp-Entry "c-enumeration" #f 204 9 204 22 (",@definitions" "begin" "definition" "declaration" "lambda" "map" "definitions" "sourcify-if" "cddr" "declarations" "source-code" "cadr" "name" "let" "form-src")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "syntax" "macros.scm"} 1226584773
    {Lisp-Entry "core.base.syntax.macros" #f 37 8 37 31 ()
      {Lisp-Entry "%%boolean" #f 40 20 40 29 (",expr" "if" "%%source-code" "%%cadr" "expr" "let" "src" "lambda")}
      {Lisp-Entry "%%not-null?" #f 46 20 46 31 (",expr" "%%null?" "%%not" "%%source-code" "%%cadr" "expr" "let" "src" "lambda")}
      {Lisp-Entry "%%when" #f 57 20 57 26 (",@body" "begin" ",test" "if" "%%cddr" "body" "%%source-code" "%%cadr" "test" "let" "src" "lambda")}
      {Lisp-Entry "%%while" #f 72 20 72 27 (",@body" "begin" ",test" "if" ",iter" "jazz.generate-symbol" "iter" "%%cddr" "body" "%%source-code" "%%cadr" "test" "let" "src" "lambda")}
      {Lisp-Entry "%%core-assert" #f 89 20 89 33 ("jazz.debug-core?" "jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%core-assertion" #f 94 20 94 36 ("jazz.debug-core?" "jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "%%debug-assert" #f 99 20 99 34 ("jazz.debug-user?" "jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%debug-assertion" #f 104 20 104 37 ("jazz.debug-user?" "jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "%%assert" #f 109 20 109 28 ("jazz.expand-%%assert" "src" "lambda")}
      {Lisp-Entry "%%assertion" #f 114 20 114 31 ("jazz.expand-%%assertion" "src" "lambda")}
      {Lisp-Entry "jazz.expand-%%assert" #f 119 9 119 29 ("error" "'error" "list" "jazz.expand-%%assertion-body" "get-output-string" "%%desourcify" "write" "display" "open-output-string" "port" "message" "%%cddr" "body" "%%source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-%%assertion" #f 130 9 130 32 ("jazz.expand-%%assertion-body" "%%cdr" "body" "%%cddr" "%%car" "action" "%%source-code" "%%cadr" "assertion" "let" "src" "test?")}
      {Lisp-Entry "jazz.expand-%%assertion-body" #f 137 9 137 37 (",@body" "begin" "jazz.simplify-begin" ",action" ",assertion" "%%not" "if" "body" "action" "assertion" "test?")}
      {Lisp-Entry "jazz.bind" #f 164 20 164 29 ("expand-car" ",tree" ",tree-symbol" "jazz.generate-symbol" "tree-symbol" "let" "body" "tree" "bindings")
        {Lisp-Entry "expand-car" #f 166 11 166 21 ("expand-car" ",car-symbol" "jazz.error" "%%null?" "if" "jazz.generate-symbol" "car-symbol" "%%pair?" "expand-cdr" ",tree" ",car-binding" "%%symbol?" "cond" "%%car" "car-binding" "let" "body" "tree" "bindings")}
        {Lisp-Entry "expand-cdr" #f 179 11 179 21 ("expand-car" ",cdr-symbol" "jazz.generate-symbol" "cdr-symbol" "%%pair?" ",@body" ",tree" ",cdr-binding" "%%symbol?" "%%null?" "cond" "%%cdr" "cdr-binding" "let" "body" "tree" "bindings")}}
      {Lisp-Entry "%%compose-name" #f 201 20 201 34 ("s2" "s1")}}})
"memory"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "memory.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.memory" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.gc" #f 40 8 40 15 ("##gc")}}})
"network"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "network.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.network" #f 37 8 37 33 ()
      {Lisp-Entry "jazz.open-tcp-client" #f 42 12 42 32 ("open-tcp-client")}
      {Lisp-Entry "jazz.open-tcp-server" #f 43 12 43 32 ("open-tcp-server")}
      {Lisp-Entry "jazz.tcp-server-socket-info" #f 44 12 44 39 ("tcp-server-socket-info")}
      {Lisp-Entry "jazz.call-with-tcp-client" #f 46 13 46 38 ("close-port" "if" "open-tcp-client" "set!" "lambda" "dynamic-wind" "port" "let" "proc" "settings")}
      {Lisp-Entry "jazz.socket-info-address" #f 57 12 57 36 ("socket-info-address")}
      {Lisp-Entry "jazz.socket-info-port-number" #f 58 12 58 40 ("socket-info-port-number")}}})
"number"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "number.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.number" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.fixnum->flonum" #f 47 9 47 28 ("jazz.Fixnum" "jazz.type-error" "##fixnum->flonum" "%%fixnum?" "if" "n")}
      {Lisp-Entry "jazz.flonum->fixnum" #f 52 9 52 28 ("jazz.Flonum" "jazz.type-error" "##flonum->fixnum" "%%flonum?" "if" "n")}
      {Lisp-Entry "jazz.+infinity" #f 63 8 63 22 ("+inf.0")}
      {Lisp-Entry "jazz.-infinity" #f 66 8 66 22 ("-inf.0")}
      {Lisp-Entry "jazz.random-integer" #f 77 12 77 31 ("random-integer")}
      {Lisp-Entry "jazz.random-source-pseudo-randomize!" #f 78 12 78 48 ("random-source-pseudo-randomize!")}
      {Lisp-Entry "jazz.default-random-source" #f 79 12 79 38 ("default-random-source")}}})
"object"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "syntax" "object.scm"} 1226584773
    {Lisp-Entry "core.class.syntax.object" #f 37 8 37 32 ()
      {Lisp-Entry "%%object-content" #f 42 12 42 28 ("0")}
      {Lisp-Entry "%%object-marker" #f 46 11 46 26 ("'jazz.object")}
      {Lisp-Entry "%%object-content" #f 49 11 49 27 ("1")}
      {Lisp-Entry "jazz.object-class" #f 53 8 53 25 ("%%object-content")}
      {Lisp-Entry "jazz.object-size" #f 57 8 57 24 ("1" "jazz.object-class" "%%fx+")}
      {Lisp-Entry "%%subtype-jazz" #f 63 24 63 38 ("7")}
      {Lisp-Entry "%%object?" #f 66 24 66 33 ("expr")}
      {Lisp-Entry "%%object" #f 69 24 69 32 ("rest")}
      {Lisp-Entry "%%make-object" #f 72 24 72 37 ("size")}
      {Lisp-Entry "%%object-length" #f 75 24 75 39 (",object" "##vector-length" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "obj" "lambda" "jazz.with-expression-value" "jazz.debug-core?" "if" "object")}
      {Lisp-Entry "%%object-ref" #f 83 24 83 36 (",object" ",n" "##vector-ref" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "rnk" "obj" "lambda" "jazz.with-expression-value" "jazz.debug-core?" "if" "n" "object")}
      {Lisp-Entry "%%object-set!" #f 96 24 96 37 (",object" ",value" ",n" "##vector-set!" "jazz.not-object-error" ",obj" "%%object?" "%%core-assertion" "rnk" "obj" "lambda" "jazz.with-expression-value" "jazz.debug-core?" "if" "value" "n" "object")}
      {Lisp-Entry "%%object?" #f 110 23 110 32 ("expr")}
      {Lisp-Entry "%%object" #f 115 23 115 31 ("rest")}
      {Lisp-Entry "%%make-object" #f 118 23 118 36 ("%%object-marker" "0" "%%object-set!" ",size" "%%make-vector" ",object" "jazz.generate-symbol" "object" "let" "size")}
      {Lisp-Entry "%%object-length" #f 124 23 124 38 ("vector")}
      {Lisp-Entry "%%object-ref" #f 127 23 127 35 ("n" "vector")}
      {Lisp-Entry "%%object-set!" #f 130 23 130 36 ("value" "n" "vector")}
      {Lisp-Entry "%%get-object-slot" #f 134 20 134 37 ("slot-offset" "object")}
      {Lisp-Entry "%%set-object-slot" #f 138 20 138 37 ("value" "slot-offset" "object")}}})
"org.jazzscheme.java.Runtime"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "java" "org" "jazzscheme" "java" "org.jazzscheme.java.Runtime.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.Java.org.jazzscheme.java.org.jazzscheme.java.Runtime" #f 37 9 37 80 ("jazz")
      {Lisp-Entry "org.jazzscheme.java.Runtime" #f 43 7 43 34 ("java.lang.Object")
        {Lisp-Entry "getRuntime" #f 46 63 46 73 ()}
        {Lisp-Entry "forName" #f 47 63 47 70 ()}
        {Lisp-Entry "getConnection" #f 48 63 48 76 ()}}}})
"org.jazzscheme.test.Test"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "java" "org" "jazzscheme" "test" "org.jazzscheme.test.Test.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.Java.org.jazzscheme.test.org.jazzscheme.test.Test" #f 37 9 37 77 ("jazz")
      {Lisp-Entry "org.jazzscheme.test.Test" #f 43 7 43 31 ("java.lang.Object")
        {Lisp-Entry "<init>" #f 46 11 46 17 ()}
        {Lisp-Entry "<init>" #f 47 45 47 51 ()}
        {Lisp-Entry "<init>" #f 48 45 48 51 ()}
        {Lisp-Entry "<init>" #f 49 45 49 51 ()}
        {Lisp-Entry "<init>" #f 50 45 50 51 ()}
        {Lisp-Entry "<init>" #f 51 45 51 51 ()}
        {Lisp-Entry "cj" #f 52 45 52 47 ()}
        {Lisp-Entry "test" #f 53 45 53 49 ()}
        {Lisp-Entry "test" #f 54 45 54 49 ()}
        {Lisp-Entry "test" #f 55 45 55 49 ()}
        {Lisp-Entry "testJDBC" #f 56 45 56 53 ()}}}})
"org.jazzscheme.test.X"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "language" "java" "java" "org" "jazzscheme" "test" "org.jazzscheme.test.X.jazz"} 1226584779
    {Lisp-Entry "jazz.language.java.Java.org.jazzscheme.test.org.jazzscheme.test.X" #f 37 9 37 74 ("jazz")
      {Lisp-Entry "org.jazzscheme.test.X" #f 43 7 43 28 ("*" "y" "x" "java.lang.Object")
        {Lisp-Entry "test" #f 46 41 46 45 ()}}}})
"output"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "runtime" "output.scm"} 1226584773
    {Lisp-Entry "core.class.runtime.output" #f 37 8 37 33 ("jazz.output-mode" "jazz.print-jazz" "object" "port" "jazz.write-jazz" "jazz.dialect.language.Object.print" ":reader" "':reader" "jazz.write" ":human" "':human" "jazz.output-value" "output" "value" "lambda" "jazz.display" "set!")
      {Lisp-Entry "jazz.output-mode" #f 40 8 40 24 ("':reader")}
      {Lisp-Entry "jazz.print" #f 54 9 54 19 ("jazz.error" "else" "write" ":describe" ":text" ":reader" "display" ":human" "case" "detail" "output" "value")}
      {Lisp-Entry "jazz.->string" #f 61 9 61 22 ("get-output-string" "jazz.output-mode" "jazz.output-value" "open-output-string" "output" "let" "else" "%%values?" "%%unspecified?" "cond" "value")}
      {Lisp-Entry "jazz.output-value" #f 72 9 72 26 ("jazz.write-jazz" "else" "jazz.print" "jazz.primitive?" "jazz.output-list" "%%pair?" "%%null?" "or" "cond" "detail" "output" "value")}
      {Lisp-Entry "jazz.output-list" #f 81 9 81 25 ("jazz.output-list-content" "display" "detail" "output" "lst")}
      {Lisp-Entry "jazz.output-list-content" #f 87 9 87 33 ("begin" "display" "%%pair?" "%%cdr" "set!" "%%car" "jazz.output-value" "and" "%%while" "done?" "scan" "let" "%%null?" "%%not" "if" "detail" "output" "lst")}
      {Lisp-Entry "jazz.debug" #f 103 9 103 19 ("force-output" "newline" "%%cdr" "expr" "lambda" "for-each" "%%car" "jazz.->string" "display" "%%not-null?" "%%when" "rest")}
      {Lisp-Entry "jazz.debug-string" #f 114 9 114 26 ("force-output" "newline" "display" "str")}
      {Lisp-Entry "jazz.terminal" #f 120 8 120 21 ("jazz.debug")}
      {Lisp-Entry "jazz.terminal-string" #f 124 8 124 28 ("jazz.debug-string")}
      {Lisp-Entry "jazz.terminal-port" #f 128 9 128 27 ("console-port")}
      {Lisp-Entry "jazz.bootstrap-output-value" #f 132 9 132 36 ("jazz.->string" "display" "output" "value")}
      {Lisp-Entry "jazz.pretty-print" #f 138 13 138 30 ("pretty-print" "apply" "rest" "expr")}
      {Lisp-Entry "jazz.pretty-print" #f 142 13 142 30 ("pretty-print" "apply" "rest" "expr")}
      {Lisp-Entry "jazz.pretty-print" #f 146 12 146 29 ("newline" "display" "rest" "expr")}
      {Lisp-Entry "jazz.dialect.language.Object.print" #f 156 8 156 42 ()}
      {Lisp-Entry "jazz.print-jazz" #f 162 9 162 24 ("jazz.print-serial" "jazz.print-object" "2" "0" "%%class-dispatch" "jazz.dialect.language.Object.print" "jazz.use-print?" "if" "detail" "output" "object")}}})
"output-hook"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "runtime" "output-hook.scm"} 1226584773
    {Lisp-Entry "core.class.runtime.output-hook" #f 37 8 37 38 ("##default-wr" "else" "macro-writeenv-port" "##jazz?" "and" "cond" "obj" "we" "lambda" "##wr" "jazz.write-jazz" "set!" "include")
      {Lisp-Entry "jazz.write-jazz" #f 45 12 45 27 ()}}})
"p"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "modules" "p.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.modules.p" #f 37 9 37 34 ("jazz")}})
"pathname"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "pathname.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.pathname" #f 37 8 37 34 ()
      {Lisp-Entry "jazz.pathname-expand" #f 42 12 42 32 ("path-expand")}
      {Lisp-Entry "jazz.file-rename" #f 43 12 43 28 ("rename-file")}
      {Lisp-Entry "jazz.directory-delete" #f 44 12 44 33 ("delete-directory")}
      {Lisp-Entry "jazz.current-directory" #f 46 13 46 35 ("current-directory" "jazz.pathname-normalize")}
      {Lisp-Entry "jazz.current-directory-set!" #f 49 13 49 40 ("current-directory" "dir")}}})
"pens"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "literals" "pens.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.literals.pens" #f 37 9 37 30 ("Slide-Bullet" "'Slide-Bullet" "Light-Background" "'Light-Background" "Outline-Border" "'Outline-Border" "Dark" "'Dark" "Medium" "'Medium" "Light" "'Light" "Dark-Gray" "'Dark-Gray" "Light-Gray" "'Light-Gray" "Gray" "'Gray" "White" "'White" "registered-color" "color:" "name:" "Pen" "new" "function" "Black" "'Black" "register-pen" "jazz")}})
"platform"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "product" "platform.scm"} 1227094574
    {Lisp-Entry "jazz.product.platform" #f 37 8 37 29 ("jazz.build-platform" "build:" "platform" "'platform" "jazz.register-product")
      {Lisp-Entry "jazz.build-types" #f 45 9 45 25 ("jazz.platform.types" "'jazz.platform.types" "jazz.compile-module")}
      {Lisp-Entry "jazz.build-cairo" #f 51 13 51 29 ("jazz.platform.cairo.cairo-freetype" "'jazz.platform.cairo.cairo-freetype" "jazz.platform.cairo.cairo-carbon" "'jazz.platform.cairo.cairo-carbon" "ld-options:" "cc-options:" "jazz.platform.cairo" "'jazz.platform.cairo" "jazz.compile-module" "jazz.pkg-config-libs" "ld-flags" "jazz.pkg-config-cflags" "cc-flags" "let" "jazz.error" "4" "<" "if" "jazz.pkg-config-version" "jazz.parse-dot-version" "build" "minor" "major" "receive")}
      {Lisp-Entry "jazz.build-cairo" #f 61 13 61 29 ("ld-options:" "string-append" "cc-options:" "jazz.platform.cairo" "'jazz.platform.cairo" "jazz.compile-module" "cairo-lib-path" "jazz.quote-jazz-gcc-pathname" "cairo-include-path" "let")}
      {Lisp-Entry "jazz.build-cairo" #f 66 13 66 29 ("jazz.platform.cairo.cairo-freetype" "'jazz.platform.cairo.cairo-freetype" "jazz.platform.cairo.cairo-x11" "'jazz.platform.cairo.cairo-x11" "ld-options:" "cc-options:" "jazz.platform.cairo" "'jazz.platform.cairo" "jazz.compile-module" "jazz.pkg-config-libs" "ld-flags" "jazz.pkg-config-cflags" "cc-flags" "let" "jazz.error" "4" "<" "if" "jazz.pkg-config-version" "jazz.parse-dot-version" "build" "minor" "major" "receive")}
      {Lisp-Entry "jazz.build-font" #f 79 13 79 28 ("jazz.build-logfont")}
      {Lisp-Entry "jazz.build-font" #f 82 13 82 28 ("jazz.build-freetype")}
      {Lisp-Entry "jazz.build-freetype" #f 86 9 86 28 ("ld-options:" "cc-options:" "jazz.platform.freetype" "'jazz.platform.freetype" "jazz.compile-module" "jazz.pkg-config-libs" "ld-flags" "jazz.pkg-config-cflags" "cc-flags" "let")}
      {Lisp-Entry "jazz.build-logfont" #f 92 9 92 27 ("ld-options:" "string-append" "cc-options:" "jazz.platform.cairo.cairo-logfont" "'jazz.platform.cairo.cairo-logfont" "jazz.compile-module" "cairo-lib-path" "jazz.quote-jazz-gcc-pathname" "cairo-include-path" "let")}
      {Lisp-Entry "jazz.build-carbon" #f 98 9 98 26 ("jazz.platform.carbon.carbon-types" "'jazz.platform.carbon.carbon-types" "ld-options:" "jazz.platform.carbon" "'jazz.platform.carbon" "jazz.compile-module" "core.module.build" "'core.module.build" "jazz.load-module")}
      {Lisp-Entry "jazz.build-windows" #f 104 9 104 27 ("jazz.system.platform.windows" "'jazz.system.platform.windows" "jazz.platform.crash.windows" "'jazz.platform.crash.windows" "jazz.platform.cairo.cairo-windows" "'jazz.platform.cairo.cairo-windows" "string-append" "jazz.platform.windows.WinPerf" "'jazz.platform.windows.WinPerf" "jazz.platform.windows.WinDlg" "'jazz.platform.windows.WinDlg" "jazz.platform.windows.WinCtrl" "'jazz.platform.windows.WinCtrl" "jazz.platform.windows.WinShell" "'jazz.platform.windows.WinShell" "jazz.platform.windows.WinUser" "'jazz.platform.windows.WinUser" "jazz.platform.windows.WinMM" "'jazz.platform.windows.WinMM" "jazz.platform.windows.WinGDI" "'jazz.platform.windows.WinGDI" "jazz.platform.windows.WinKernel" "'jazz.platform.windows.WinKernel" "jazz.platform.windows.WinNT" "'jazz.platform.windows.WinNT" "jazz.platform.windows.WinBase" "'jazz.platform.windows.WinBase" "jazz.platform.windows.WinTypes" "'jazz.platform.windows.WinTypes" "ld-options:" "cc-options:" "jazz.platform.windows.WinDef" "'jazz.platform.windows.WinDef" "jazz.compile-module" "core.module.build" "'core.module.build" "jazz.load-module" "base-windows-cc-options" "windows-lib-path" "windows-include-path" "cairo-lib-path" "jazz.quote-jazz-gcc-pathname" "cairo-include-path" "let")}
      {Lisp-Entry "jazz.build-com" #f 128 9 128 23 ("jazz.platform.windows.com.ADODB" "'jazz.platform.windows.com.ADODB" "jazz.platform.windows.com.DAO" "'jazz.platform.windows.com.DAO" "ld-options:" "cc-options:" "jazz.platform.windows.com" "'jazz.platform.windows.com" "jazz.compile-module")}
      {Lisp-Entry "jazz.build-x11" #f 136 9 136 23 ("jazz.platform.x11.x11-types" "'jazz.platform.x11.x11-types" "ld-options:" "cc-options:" "jazz.platform.x11" "'jazz.platform.x11" "jazz.compile-module" "core.module.build" "'core.module.build" "jazz.load-module")}
      {Lisp-Entry "jazz.build-clipboard" #f 144 11 144 31 ("jazz.platform.carbon.clipboard" "'jazz.platform.carbon.clipboard" "ld-options:" "jazz.platform.carbon.carbon-types" "'jazz.platform.carbon.carbon-types" "jazz.compile-module")}
      {Lisp-Entry "jazz.build-clipboard" #f 148 11 148 31 ()}
      {Lisp-Entry "jazz.build-platform" #f 153 13 153 32 ("jazz.build-clipboard" "jazz.build-carbon" "jazz.build-font" "jazz.build-cairo" "jazz.build-types")}
      {Lisp-Entry "jazz.build-platform" #f 160 13 160 32 ("jazz.build-com" "jazz.build-windows" "jazz.build-font" "jazz.build-cairo" "jazz.build-types" "jazz.feedback" "feedback:" "jazz.copy-file" "copy-platform-files" "source-file" "string-append" "path" "install-file" "define" "jazz.source" "source" "jazz.kernel-install" "install" "let")}
      {Lisp-Entry "jazz.build-platform" #f 182 13 182 32 ("jazz.build-clipboard" "jazz.build-x11" "jazz.build-font" "jazz.build-cairo" "jazz.build-types")}
      {Lisp-Entry "jazz.quote-jazz-gcc-pathname" #f 190 9 190 37 ("jazz.kernel-platform" "jazz.kernel-source" "string-append" "path-expand" "jazz.quote-gcc-pathname" "suffix")}
      {Lisp-Entry "jazz.parse-dot-version" #f 194 9 194 31 ("values" "caddr" "build" "cadr" "minor" "car" "major" "jazz.split-string" "string->number" "map" "let" "version")}
      {Lisp-Entry "jazz.pkg-config" #f 202 9 202 24 ("jazz.error" "get-output-string" "jazz.pipe-no-return" "begin" "0" "process-status" "%%fx=" "if" "arguments:" "path:" "list" "open-process" "process-port" "open-output-string" "string-port" "let" "libname" "what")}
      {Lisp-Entry "jazz.pkg-config-cflags" #f 211 9 211 31 ("jazz.pkg-config" "libname")}
      {Lisp-Entry "jazz.pkg-config-libs" #f 214 9 214 29 ("jazz.pkg-config" "libname")}
      {Lisp-Entry "jazz.pkg-config-version" #f 217 9 217 32 ("jazz.pkg-config" "libname")}
      {Lisp-Entry "jazz.pipe-no-return" #f 220 9 220 28 ("write-char" "begin" "eq?" "eof-object?" "or" "not" "if" "read-char" "c" "iterate" "let" "output" "input")}}})
"port"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "port.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.port" #f 37 8 37 30 ("jazz.dialect.language.get-console-port" "set!")
      {Lisp-Entry "jazz.close-port" #f 42 12 42 27 ("close-port")}
      {Lisp-Entry "jazz.input-port-timeout-set!" #f 43 12 43 40 ("input-port-timeout-set!")}
      {Lisp-Entry "jazz.output-port-timeout-set!" #f 44 12 44 41 ("output-port-timeout-set!")}
      {Lisp-Entry "jazz.dialect.language.get-console-port" #f 54 8 54 46 ()}
      {Lisp-Entry "jazz.get-console-port" #f 60 9 60 30 ("jazz.dialect.language.get-console-port" "if")}}})
"product"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "product.jazz"} 1226584790
    {Lisp-Entry "test.product" #f 37 9 37 21 ("build" "build:" "update" "update:" "run" "run:" "icon:" "title:" "test" "'test" "register-product" "jazz")
      {Lisp-Entry "run" #f 45 13 45 16 ("test" "'test" "load-module")}
      {Lisp-Entry "update" #f 54 13 54 19 ()}
      {Lisp-Entry "build" #f 62 13 62 18 ()}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "product.scm"} 1226584774
    {Lisp-Entry "core.product" #f 37 8 37 20 ("jazz.build-core" "build:" "core" "'core" "jazz.register-product")
      {Lisp-Entry "jazz.build-core" #f 45 9 45 24 ("statprof" "'statprof" "core.module" "'core.module" "core.library" "'core.library" "core.generic" "'core.generic" "core.class" "'core.class" "core.base" "'core.base" "jazz.build-module")}}})
"profile"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "profile.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.profile" #f 37 8 37 33 ()
      {Lisp-Entry "active-profile" #f 40 22 40 36 ()}
      {Lisp-Entry "profile-total" #f 41 22 41 35 ()}
      {Lisp-Entry "profile-unknown" #f 42 22 42 37 ()}
      {Lisp-Entry "profile-calls" #f 43 22 43 35 ()}
      {Lisp-Entry "profile-reset!" #f 44 22 44 36 ()}
      {Lisp-Entry "profile-start!" #f 45 22 45 36 ()}
      {Lisp-Entry "profile-stop!" #f 46 22 46 35 ()}
      {Lisp-Entry "profile-running?" #f 47 22 47 38 ()}
      {Lisp-Entry "jazz.statprof-loaded?" #f 55 8 55 29 ()}
      {Lisp-Entry "jazz.load-statprof" #f 59 9 59 27 ("set!" "statprof" "'statprof" "jazz.load-module" "begin" "jazz.statprof-loaded?" "not" "if")}
      {Lisp-Entry "jazz.active-profile" #f 66 9 66 28 ("active-profile" "jazz.load-statprof")}
      {Lisp-Entry "jazz.profile-total" #f 71 9 71 27 ("profile-total" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.profile-unknown" #f 76 9 76 29 ("profile-unknown" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.profile-calls" #f 81 9 81 27 ("profile-calls" "jazz.load-statprof" "profile")}
      {Lisp-Entry "jazz.reset-profile" #f 86 9 86 27 ("profile-reset!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.start-profile" #f 91 9 91 27 ("profile-start!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.stop-profile" #f 96 9 96 26 ("profile-stop!" "jazz.load-statprof")}
      {Lisp-Entry "jazz.profile-running?" #f 101 9 101 30 ("profile-running?" "jazz.load-statprof")}}})
"protocol"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "io" "protocol.jazz"} 1226584778
    {Lisp-Entry "jazz.io.protocol" #f 37 9 37 25 ("choose-directory" "choose-new-file" "save" "directory:" "choose-file" "apply" "case" "get-directory" "essay" "directory" "let" "others" "actual" "open" "'open" "mode" "bind-keywords" "rest" "class" "jazz")
      {Lisp-Entry "moniker-modal" #f 44 10 44 23 ("rest" "class")}
      {Lisp-Entry "moniker-modal" #f 47 11 47 24 ()}
      {Lisp-Entry "moniker-modal" #f 55 11 55 24 ()}
      {Lisp-Entry "moniker-new" #f 60 10 60 21 ("new" "parameters" "class")}}})
"pt"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "pt.jazz"} 1226584790
    {Lisp-Entry "test.pt" #f 0 9 0 16 ("jazz")
      {Lisp-Entry "INT" #f 3 8 3 11 ("int" "native")}
      {Lisp-Entry "POINT" #f 6 13 6 18 ("y" "x" "INT")}}})
"ptm"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "ptm.scm"} 1226584790
    {Lisp-Entry "test.ptm" #f 0 8 0 16 ("#<<c-declare-end\n___SCMOBJ ___POINT_free___(void* ptr)\n{\n    free(ptr);\n    return ___FIX(___NO_ERR);\n}\nc-declare-end\n" "c-declare")
      {Lisp-Entry "POINT" #f 2 15 2 20 ("type")}
      {Lisp-Entry "POINT*" #f 3 15 3 21 ("POINT" "pointer")}
      {Lisp-Entry "INT" #f 4 15 4 18 ("int")}
      {Lisp-Entry "POINT-make" #f 6 8 6 18 ("POINT*" "c-lambda")}
      {Lisp-Entry "POINT-sizeof" #f 21 8 21 20 ("unsigned-int" "c-lambda")}
      {Lisp-Entry "POINT-x-ref" #f 24 8 24 19 ("INT" "POINT*" "c-lambda")}
      {Lisp-Entry "POINT-x-set!" #f 26 8 26 20 ("void" "INT" "POINT*" "c-lambda")}
      {Lisp-Entry "POINT-y-ref" #f 28 8 28 19 ("INT" "POINT*" "c-lambda")}
      {Lisp-Entry "POINT-y-set!" #f 30 8 30 20 ("void" "INT" "POINT*" "c-lambda")}}})
"q"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validation" "modules" "q.jazz"} 1226584789
    {Lisp-Entry "jazz.validation.modules.q" #f 37 9 37 34 ("jazz")}})
"reader"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "reader.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.reader" #f 37 8 37 32 ("include")
      {Lisp-Entry "jazz.make-jazz-readtable" #f 50 13 50 37 ("jazz.jazzify-readtable!" "##main-readtable" "##readtable-copy" "readtable-max-unescaped-char-set" "readtable" "let")}
      {Lisp-Entry "jazz.jazzify-readtable!" #f 56 13 56 36 ("jazz.read-delimited-string" "##readtable-char-sharp-handler-set!" "jazz.read-comment" "jazz.read-literal" "##readtable-char-class-set!" "jazz.named-chars" "macro-readtable-named-char-table" "append" "macro-readtable-named-char-table-set!" "readtable")}
      {Lisp-Entry "jazz.named-chars" #f 63 12 63 28 ()}
      {Lisp-Entry "jazz.in-expression-comment?" #f 110 12 110 39 ("make-parameter")}
      {Lisp-Entry "jazz.read-literal" #f 114 13 114 30 ("##desourcify" "map" "jazz.construct-literal" "jazz.in-expression-comment?" "jazz.parse-read?" "or" "macro-readenv-wrap" "##build-list" "lst" "jazz.error" "peek-char" "%%eqv?" "if" "read-char" "##readenv-current-filepos" "start-pos" "macro-readenv-port" "port" "let" "c" "re")}
      {Lisp-Entry "jazz.read-comment" #f 127 13 127 30 ("##read-datum-or-label-or-none-or-dot" "read" "read-char" "jazz.in-expression-comment?" "parameterize" "macro-readenv-port" "port" "let" "c" "re")}
      {Lisp-Entry "jazz.read-delimited-string" #f 136 13 136 39 ("get-output-string" "macro-readenv-wrap" "peek-char" "and" "else" "write-char" "case" "escaped" "%%eqv?" "%%eof-object?" "cond" "c" "iter" "open-output-string" "output" "read-char" "macro-readenv-port" "port" "let" "start-pos" "next" "re")}
      {Lisp-Entry "jazz.jazz-readtable" #f 165 12 165 31 ("jazz.make-jazz-readtable")}
      {Lisp-Entry "jazz.with-jazz-readtable" #f 169 13 169 37 ("jazz.jazz-readtable" "current-readtable" "parameterize" "thunk")}
      {Lisp-Entry "jazz.char-symbol" #f 174 13 174 29 ("%%car" "and" "jazz.rassq" "res" "jazz.jazz-readtable" "macro-readtable-named-char-table" "table" "let" "char")}
      {Lisp-Entry "jazz.eof-object" #f 190 13 190 28 ("#!eof")}
      {Lisp-Entry "jazz.read-u8" #f 193 12 193 24 ("read-u8")}
      {Lisp-Entry "jazz.write-u8" #f 194 12 194 25 ("write-u8")}
      {Lisp-Entry "jazz.read-subu8vector" #f 195 12 195 33 ("read-subu8vector")}
      {Lisp-Entry "jazz.write-subu8vector" #f 196 12 196 34 ("write-subu8vector")}
      {Lisp-Entry "jazz.read-line" #f 198 12 198 26 ("read-line")}
      {Lisp-Entry "jazz.read-proper-line" #f 201 13 201 34 ("##string-shrink!" "1" "%%fx-" "%%string-ref" "%%eqv?" "0" "%%fx>" "and" "%%string-length" "len" "values" "eof-object?" "if" "read-line" "line" "let" "port")}
      {Lisp-Entry "jazz.read-all" #f 210 12 210 25 ("read-all")}
      {Lisp-Entry "jazz.skip-whitespace" #f 216 9 216 29 ("read-char" "peek-char" "char-whitespace?" "%%while" "port")}
      {Lisp-Entry "jazz.read-delimited" #f 221 9 221 28 ("jazz.queue-list" "read-char" "read" "jazz.enqueue" "peek-char" "%%eqv?" "%%not" "%%while" "jazz.skip-whitespace" "jazz.new-queue" "queue" "let" "delimiter" "port")}
      {Lisp-Entry "jazz.read-until" #f 231 9 231 24 ("jazz.queue-list" "jazz.enqueue" "set!" "if" "read" "%%not" "%%while" "done?" "jazz.new-queue" "queue" "expr" "let" "port" "test")}
      {Lisp-Entry "jazz.read-content" #f 243 9 243 26 ("eof-object?" "jazz.read-until" "port")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "reader.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.reader" #f 37 8 37 32 ("include")
      {Lisp-Entry "jazz.read-source-as-begin" #f 43 9 43 34 ("macro-readtable-start-syntax" "##unwrap-datum" "##wrap-datum" "##current-readtable" "##read-all-as-a-begin-expr-from-port" "##source-code" "##input-port-column-set!" "##input-port-line-set!" "lambda" "4" "##vector-set!" "if" "col" "line" "container" "port")}
      {Lisp-Entry "jazz.read-source-first-expr" #f 61 9 61 36 ("##source-code" "##cadr" "macro-readtable-start-syntax" "##unwrap-datum" "##wrap-datum" "##current-readtable" "##read-all-as-a-begin-expr-from-port" "begin-src" "let" "port")}}})
"runtime"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "class" "runtime" "runtime.scm"} 1226584773
    {Lisp-Entry "core.class.runtime.runtime" #f 37 8 37 34 ("jazz.Queue" "jazz.Method-Node" "jazz.Method" "jazz.Property" "jazz.Slot" "jazz.Field" "jazz.Interface" "port?" "jazz.register-usertype" "4" "3" "2" "1" "0" "jazz.specialtypes" "macro-subtype-boxvalues" "macro-subtype-u8vector" "macro-subtype-foreign" "macro-subtype-bignum" "macro-subtype-flonum" "macro-subtype-string" "macro-subtype-procedure" "macro-subtype-continuation" "macro-subtype-keyword" "macro-subtype-symbol" "macro-subtype-cpxnum" "macro-subtype-ratnum" "macro-subtype-pair" "macro-subtype-vector" "jazz.subtypes" "%%vector-set!" "jazz.Unspecified" "jazz.Unspecified-Class" "jazz.EOF" "jazz.EOF-Class" "jazz.Values" "jazz.Values-Class" "jazz.Foreign" "jazz.Foreign-Class" "jazz.Promise" "jazz.Promise-Class" "jazz.Thread" "jazz.Thread-Class" "jazz.Table" "jazz.Table-Class" "jazz.Keyword" "jazz.Keyword-Class" "jazz.Symbol" "jazz.Symbol-Class" "jazz.Procedure" "jazz.Procedure-Class" "jazz.Continuation" "jazz.Continuation-Class" "jazz.Port" "jazz.Port-Class" "jazz.U8Vector" "jazz.U8Vector-Class" "jazz.Vector" "jazz.Vector-Class" "jazz.String" "jazz.String-Class" "jazz.Pair" "jazz.Pair-Class" "jazz.Null" "jazz.Null-Class" "jazz.List" "jazz.List-Class" "jazz.Sequence" "jazz.Sequence-Class" "jazz.Flonum" "jazz.Flonum-Class" "jazz.Fixnum" "jazz.Fixnum-Class" "jazz.Integer" "jazz.Integer-Class" "jazz.Rational" "jazz.Rational-Class" "jazz.Real" "jazz.Real-Class" "jazz.Complex" "jazz.Complex-Class" "jazz.Number" "jazz.Number-Class" "jazz.Numeric" "jazz.Numeric-Class" "jazz.Char" "jazz.Char-Class" "jazz.Boolean" "jazz.Boolean-Class" "%%set-object-class" "jazz.Object-Class" "jazz.Class" "jazz.Category" "jazz.Type" "jazz.Object" "jazz.encapsulate-class" "%%get-object-class" "%%subclass?" "class" "object" "lambda" "jazz.object-of-class?" "set!" "include")
      {Lisp-Entry "jazz.new-interface-rank" #f 43 8 43 31 ("0")}
      {Lisp-Entry "jazz.dispatch?" #f 52 9 52 23 ("%%fx-" "%%string-ref" "%%eqv?" "1" "%%fx>" "%%string-length" "len" "%%symbol->string" "name" "let" "%%symbol?" "and" "symbol")}
      {Lisp-Entry "jazz.dispatch->symbol" #f 61 9 61 30 ("1" "%%string-length" "%%fx-" "0" "%%substring" "%%string->symbol" "%%symbol->string" "name" "let" "dispatch")}
      {Lisp-Entry "jazz.composite-name?" #f 66 9 66 29 ("%%symbol->string" "jazz.memstring" "%%symbol?" "and" "symbol")}
      {Lisp-Entry "jazz.compose-name" #f 71 9 71 26 ("symbol->string" "map" "jazz.join-strings" "%%string->symbol" "rest")}
      {Lisp-Entry "jazz.compose-helper" #f 75 9 75 28 ("%%symbol->string" "%%string-append" "%%string->symbol" "suffix" "locator")}
      {Lisp-Entry "jazz.split-identifier" #f 79 9 79 30 ("%%symbol->string" "jazz.split-string" "string->symbol" "map" "identifier")}
      {Lisp-Entry "jazz.split-composite" #f 83 9 83 29 ("%%string-length" "1" "%%fx+" "0" "%%substring" "%%string->symbol" "values" "jazz.string-find-reversed" "n" "%%symbol->string" "str" "let" "identifier")}
      {Lisp-Entry "jazz.inspect-object" #f 95 9 95 28 ("1" "%%fx+" "%%object-ref" "%%vector-set!" "begin" "%%fx<" "if" "0" "n" "iter" "let" "%%make-vector" "content" "%%object-length" "size" "let*" "%%object?" "%%assert" "object")}
      {Lisp-Entry "jazz.Core-Classes" #f 112 8 112 25 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-core-classes" #f 116 9 116 30 ("jazz.Core-Classes")}
      {Lisp-Entry "jazz.core-class?" #f 120 9 120 25 ("jazz.Core-Classes" "%%table-ref" "%%boolean" "name")}
      {Lisp-Entry "jazz.get-core-class" #f 124 9 124 28 ("jazz.Core-Classes" "%%table-ref" "name")}
      {Lisp-Entry "jazz.set-core-class" #f 128 9 128 28 ("jazz.Core-Classes" "%%table-set!" "class" "name")}
      {Lisp-Entry "jazz.object?" #f 137 9 137 21 ("%%object?" "expr")}
      {Lisp-Entry "jazz.primitive?" #f 141 9 141 24 ("%%object?" "%%not" "expr")}
      {Lisp-Entry "jazz.subtype?" #f 145 9 145 22 ("%%subtype?" "%%boolean" "jazz.type?" "%%assert" "type" "target")}
      {Lisp-Entry "jazz.subcategory?" #f 150 9 150 26 ("%%subcategory?" "%%boolean" "category" "target")}
      {Lisp-Entry "jazz.subclass?" #f 154 9 154 23 ("%%subclass?" "%%boolean" "class" "target")}
      {Lisp-Entry "jazz.get-category-descendants" #f 158 9 158 38 ("%%get-category-descendants" "category")}
      {Lisp-Entry "jazz.get-class-ascendant" #f 162 9 162 33 ("%%get-class-ascendant" "class")}
      {Lisp-Entry "jazz.collect-type" #f 171 9 171 26 ("%%is?" "obj" "lambda" "jazz.collect-if" "lst" "type")}
      {Lisp-Entry "jazz.get-core-class-all-slots" #f 177 9 177 38 ("jazz.get-core-class-all-slots" "%%append" "%%not" "if" "%%get-class-ascendant" "ascendant" "%%get-class-slots" "slots" "let" "core-class")}
      {Lisp-Entry "jazz.get-core-class-all-slot-names" #f 185 9 185 43 ("jazz.get-core-class-all-slots" "%%get-field-name" "%%symbol?" "if" "name/slot" "lambda" "map" "core-class")}
      {Lisp-Entry "jazz.create-class-tables" #f 193 9 193 33 ("jazz.create-class-class-table" "jazz.create-class-interface-table" "class")}
      {Lisp-Entry "jazz.create-core-class-tables" #f 198 9 198 38 ("jazz.create-class-class-table" "class")}
      {Lisp-Entry "jazz.create-class-interface-table" #f 202 9 202 42 ("%%set-class-interface-table" "%%get-category-ancestors" "jazz.call-into-abstract" "rest" "%%get-method-implementation-rank" "jazz.Method" "%%is?" "field" "field-name" "%%get-category-fields" "%%iterate-table" "category-name" "%%get-category-name" "class-name" "jazz.call-into-incoherent" "category-vtable" "%%get-category-virtual-size" "%%get-interface-rank" "rank" "let*" "jazz.Interface" "%%class-is?" "category" "lambda" "jazz.vector-for-each" "1" "+" "%%vector-copy" "%%vector-set!" "%%vector-ref" "ascendant-vtable" "<" "0" "i" "iter" "%%vector-length" "size" "ascendant-interface-table" "%%get-class-ascendant" "ascendant" "jazz.new-interface-rank" "%%make-vector" "vtable" "let" "%%get-class-interface-table" "%%not" "%%when" "class")}
      {Lisp-Entry "jazz.create-class-class-table" #f 235 9 235 38 ("%%vector-ref" "%%vector-copy" "%%vector-set!" "<" "0" "i" "iter" "#" "'#" "1" "+" "%%make-vector" "vtable" "%%vector-length" "size" "ascendant-class-table" "let*" "if" "%%set-class-class-table" "%%get-class-ascendant" "ascendant" "let" "%%get-class-class-table" "%%not" "%%when" "class")}
      {Lisp-Entry "jazz.encapsulate-class" #f 251 9 251 31 ("jazz.update-core-class" "%%set-class-core-vtable" "%%get-class-core-method-alist" "%%get-class-core-virtual-alist" "jazz.get-method-rank" "%%cdr" "method-implementation" "%%car" "method-name" "method" "lambda" "for-each" "%%vector-ref" "%%vector-set!" "%%fx>=" "1" "%%vector-length" "%%fx-" "n" "iter" "%%get-class-core-vtable" "ascendant-vtable" "%%get-class-ascendant" "ascendant" "make-vector" "vtable" "0" "%%fx>" "%%when" "%%length" "vtable-size" "%%get-class-core-virtual-names" "virtual-names" "let" "class")}
      {Lisp-Entry "jazz.update-class" #f 278 9 278 26 ("jazz.update-class-class-table" "class")}
      {Lisp-Entry "jazz.update-core-class" #f 282 9 282 31 ("jazz.update-class-class-table" "class")}
      {Lisp-Entry "jazz.update-class-class-table" #f 286 9 286 38 ("%%get-category-descendants" "descendant" "%%vector-set!" "%%get-method-implementation-tree" "%%get-method-node-implementation" "implementation" "%%get-method-implementation-rank" "implementation-rank" "field" "lambda" "for-each" "%%vector-ref" "jazz.resize-vector" "implementation-table" "%%get-class-class-table" "class-table" "let*" "iter" "%%get-category-virtual-size" "class-virtual-size" "%%get-class-level" "class-rank" "%%not-null?" "%%when" "jazz.update-class-class-root-methods" "added-methods" "let" "class")}
      {Lisp-Entry "jazz.update-class-class-root-methods" #f 305 9 305 45 ("cons" "set!" "%%set-method-category-rank" "begin" "%%get-category-descendants" "descendant" "for-each" "%%vector-set!" "%%eq?" "implementation-table" "iter" "%%neq?" "%%get-method-implementation-tree" "%%get-method-node-implementation" "new-implementation" "old-implementation" "%%get-method-implementation-rank" "implementation-rank" "let" "%%get-method-category-rank" "if" "jazz.virtual-method?" "%%when" "field" "key" "lambda" "%%get-category-fields" "%%iterate-table" "added-methods" "%%vector-ref" "root-implementation-table" "%%get-class-level" "class-rank" "%%get-class-class-table" "class-table" "let*" "class")}
      {Lisp-Entry "jazz.new-core-class" #f 338 9 338 28 ("jazz.create-core-class-tables" "%%get-category-descendants" "%%cons" "%%set-category-descendants" "%%when" "jazz.compute-core-class-ancestors" "%%list->vector" "%%set-category-ancestors" "%%get-class-core-virtual-names" "1" "%%get-class-level" "%%fx+" "if" "0" "%%object" "core-class" "let" "instance-size" "slot-names" "ascendant" "fields" "name" "class")}
      {Lisp-Entry "jazz.compute-core-class-ancestors" #f 368 9 368 42 ("%%get-category-ancestors" "%%vector->list" "%%append" "%%list" "%%not" "if" "ascendant" "class")}
      {Lisp-Entry "jazz.validate-inherited-slots" #f 374 9 374 38 ("jazz.error" "jazz.get-core-class-all-slot-names" "%%equal?" "%%null?" "%%not" "and" "or" "if" "inherited-slot-names" "ascendant" "name")}
      {Lisp-Entry "jazz.Object" #f 385 27 385 38 ()}
      {Lisp-Entry "jazz.get-object-slot" #f 388 9 388 29 ("%%get-object-slot" "slot-offset" "object")}
      {Lisp-Entry "jazz.set-object-slot" #f 392 9 392 29 ("%%set-object-slot" "value" "slot-offset" "object")}
      {Lisp-Entry "jazz.classname->string" #f 396 9 396 31 ("%%get-category-name" "%%symbol->string" "%%null?" "if" "class")}
      {Lisp-Entry "jazz.print-object" ("jazz.Object") 402 30 402 47 ("detail" "output")}
      {Lisp-Entry "jazz.print-object" ("jazz.Object") 405 21 405 38 ("object" "jazz.print-serial" "detail" "output")}
      {Lisp-Entry "jazz.print-serial" #f 409 9 409 26 ("display" "object->serial-number" "serial" "let" "output" "object")}
      {Lisp-Entry "jazz.Type" #f 424 27 424 36 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Type") 427 30 427 43 ("object")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Type") 430 21 430 34 ("%%class-of" "type" "jazz.of-subtype?" "object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Type") 434 30 434 46 ("subtype")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Type") 437 21 437 37 ("type" "jazz.error" "subtype")}
      {Lisp-Entry "jazz.category-type?" ("jazz.Type") 441 30 441 49 ()}
      {Lisp-Entry "jazz.category-type?" ("jazz.Type") 444 21 444 40 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Type") 448 30 448 49 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Type") 451 21 451 40 ("type" "jazz.error")}
      {Lisp-Entry "jazz.emit-type" ("jazz.Type") 455 30 455 44 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-type" ("jazz.Type") 458 21 458 35 ("type" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Type") 462 30 462 44 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Type") 465 21 465 35 (",locator" ",value" "%%is?" "type" "jazz.emit-type" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Type") 470 30 470 45 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Type") 473 21 473 36 (",locator" ",value" "jazz.type-error" "jazz.emit-test" "%%not" "if" "type" "jazz.emit-type" "locator" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.bootstrap-type?" #f 480 9 480 29 ("type-class" "object")}
      {Lisp-Entry "jazz.type?" #f 485 9 485 19 ("jazz.Type" "%%is?" "%%object?" "and" "object")}
      {Lisp-Entry "jazz.Category" #f 498 27 498 40 ()}
      {Lisp-Entry "jazz.category?" #f 501 9 501 23 ("jazz.category-type?" "jazz.type?" "and" "object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Category") 506 21 506 37 ("%%get-category-ancestors" "type" "jazz.vector-memq?" "jazz.category-type?" "and" "subtype")}
      {Lisp-Entry "jazz.category-type?" ("jazz.Category") 511 21 511 40 ()}
      {Lisp-Entry "jazz.emit-type" ("jazz.Category") 515 21 515 35 ("type" "%%get-category-name" "environment" "source-declaration")}
      {Lisp-Entry "jazz.is?" #f 519 9 519 17 ("%%is?" "%%boolean" "category" "object")}
      {Lisp-Entry "jazz.is-not?" #f 523 9 523 21 ("%%is?" "%%not" "%%boolean" "category" "object")}
      {Lisp-Entry "jazz.get-category-name" #f 527 9 527 31 ("%%get-category-name" "category")}
      {Lisp-Entry "jazz.add-field" #f 531 9 531 23 ("%%get-field-name" "%%set-category-field" "field" "category")}
      {Lisp-Entry "jazz.Class" #f 543 27 543 37 ()}
      {Lisp-Entry "jazz.new-class" #f 546 9 546 23 ("%%class-dispatch" "jazz.create-class-tables" "%%get-category-descendants" "%%cons" "%%set-category-descendants" "%%when" "jazz.compute-class-ancestors" "%%list->vector" "%%set-category-ancestors" "%%get-class-core-vtable" "1" "%%get-class-level" "%%fx+" "jazz.object-size" "%%get-class-instance-size" "%%get-class-slots" "if" "0" "eq?" "test:" "%%make-table" "jazz.allocate-class" "class" "let" "interfaces" "ascendant" "name" "class-of-class")}
      {Lisp-Entry "jazz.compute-class-ancestors" #f 568 9 568 37 ("add-classes" "%%get-interface-ascendants" "cons" "set!" "%%memq" "%%not" "else" "%%get-class-interfaces" "for-each" "%%when" "%%get-class-ascendant" "%%class?" "cond" "category" "add-interfaces" "ancestors" "let" "interfaces" "ascendant" "class")}
      {Lisp-Entry "jazz.class?" #f 587 9 587 20 ("jazz.Class" "%%class-is?" "object")}
      {Lisp-Entry "jazz.i-class-of" #f 591 9 591 24 ("%%i-class-of-impl" "expr")}
      {Lisp-Entry "jazz.class-of" #f 595 9 595 22 ("%%class-of-impl" "expr")}
      {Lisp-Entry "jazz.class-of-native" #f 602 9 602 29 ("jazz.error" "jazz.usertype" "or" "else" "jazz.Unspecified" "%%unspecified?" "jazz.EOF" "%%eof-object?" "jazz.Values" "%%values?" "jazz.Foreign" "%%foreign?" "jazz.Procedure" "%%procedure?" "jazz.Continuation" "%%continuation?" "jazz.Port" "%%port?" "jazz.Keyword" "%%keyword?" "jazz.Symbol" "%%symbol?" "jazz.U8Vector" "%%u8vector?" "jazz.Vector" "%%vector?" "jazz.String" "%%string?" "jazz.Pair" "%%pair?" "jazz.Null" "%%null?" "jazz.Number" "%%number?" "jazz.Complex" "%%complex?" "jazz.Real" "%%real?" "jazz.Rational" "%%rational?" "jazz.Integer" "%%integer?" "jazz.Flonum" "%%flonum?" "jazz.Fixnum" "%%fixnum?" "jazz.Char" "%%char?" "jazz.Boolean" "%%boolean?" "cond" "expr")}
      {Lisp-Entry "jazz.class-subtype?" #f 631 9 631 28 ("%%class-subtype?" "class" "target")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Class") 635 21 635 34 ("class" "%%class-of" "%%class-subtype?" "object")}
      {Lisp-Entry "jazz.slot-form?" #f 639 9 639 24 ("slot" "'slot" "%%car" "%%eq?" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.new" #f 644 9 644 17 ("0" "%%class-dispatch" "apply" "jazz.initialize-slots" "%%set-object-class" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "rest" "class")}
      {Lisp-Entry "jazz.new0" #f 653 9 653 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%set-object-class" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "class")}
      {Lisp-Entry "jazz.new1" #f 662 9 662 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%set-object-class" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "arg1" "class")}
      {Lisp-Entry "jazz.new2" #f 671 9 671 18 ("0" "%%class-dispatch" "jazz.initialize-slots" "%%set-object-class" "%%get-class-instance-size" "%%make-object" "object" "let" "%%class?" "%%debug-assert" "arg2" "arg1" "class")}
      {Lisp-Entry "jazz.iterate-descendants-tree" #f 680 9 680 38 ("%%get-category-descendants" "for-each" "iter" "let" "proc" "class")}
      {Lisp-Entry "jazz.Object-Class" #f 694 27 694 44 ()}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Object-Class") 697 21 697 37 ("nextmethod" "class" "%%object-class?" "if" "subtype")}
      {Lisp-Entry "jazz.Boolean-Class" #f 723 27 723 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Boolean-Class") 726 21 726 34 ("%%boolean?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Boolean-Class") 730 21 730 40 ("'bool")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Boolean-Class") 734 21 734 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Boolean" #f 741 27 741 39 ()}
      {Lisp-Entry "jazz.Char-Class" #f 752 27 752 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Char-Class") 755 21 755 34 ("%%char?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Char-Class") 759 21 759 40 ("'char")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Char-Class") 763 21 763 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Char" #f 770 27 770 36 ()}
      {Lisp-Entry "jazz.Numeric-Class" #f 781 27 781 45 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Numeric-Class") 784 21 784 40 ("'numeric")}
      {Lisp-Entry "jazz.Numeric" #f 791 27 791 39 ()}
      {Lisp-Entry "jazz.Number-Class" #f 802 27 802 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Number-Class") 805 21 805 34 ("%%number?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Number-Class") 809 21 809 40 ("'number")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Number-Class") 813 21 813 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Number" #f 820 27 820 38 ()}
      {Lisp-Entry "jazz.Complex-Class" #f 831 27 831 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Complex-Class") 834 21 834 34 ("%%complex?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Complex-Class") 838 21 838 40 ("'complex")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Complex-Class") 842 21 842 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Complex" #f 849 27 849 39 ()}
      {Lisp-Entry "jazz.Real-Class" #f 860 27 860 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Real-Class") 863 21 863 34 ("%%real?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Real-Class") 867 21 867 40 ("'real")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Real-Class") 871 21 871 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Real" #f 878 27 878 36 ()}
      {Lisp-Entry "jazz.Rational-Class" #f 889 27 889 46 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Rational-Class") 892 21 892 34 ("%%rational?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Rational-Class") 896 21 896 40 ("'rational")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Rational-Class") 900 21 900 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Rational" #f 907 27 907 40 ()}
      {Lisp-Entry "jazz.Integer-Class" #f 918 27 918 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Integer-Class") 921 21 921 34 ("%%integer?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Integer-Class") 925 21 925 40 ("'int")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Integer-Class") 929 21 929 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Integer" #f 936 27 936 39 ()}
      {Lisp-Entry "jazz.Fixnum-Class" #f 947 27 947 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Fixnum-Class") 950 21 950 34 ("%%fixnum?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Fixnum-Class") 954 21 954 40 ("'fx")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Fixnum-Class") 958 21 958 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Fixnum" #f 965 27 965 38 ()}
      {Lisp-Entry "jazz.Flonum-Class" #f 976 27 976 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Flonum-Class") 979 21 979 34 ("%%flonum?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Flonum-Class") 983 21 983 40 ("'fl")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Flonum-Class") 987 21 987 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Flonum" #f 994 27 994 38 ()}
      {Lisp-Entry "jazz.Sequence-Class" #f 1005 27 1005 46 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Sequence-Class") 1008 21 1008 40 ("'sequence")}
      {Lisp-Entry "jazz.Sequence" #f 1015 27 1015 40 ()}
      {Lisp-Entry "jazz.List-Class" #f 1026 27 1026 42 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.List-Class") 1029 21 1029 40 ("'list")}
      {Lisp-Entry "jazz.emit-test" ("jazz.List-Class") 1033 21 1033 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.List" #f 1040 27 1040 36 ()}
      {Lisp-Entry "jazz.Null-Class" #f 1051 27 1051 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Null-Class") 1054 21 1054 34 ("%%null?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Null-Class") 1058 21 1058 40 ("'null")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Null-Class") 1062 21 1062 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Null" #f 1069 27 1069 36 ()}
      {Lisp-Entry "jazz.Pair-Class" #f 1080 27 1080 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Pair-Class") 1083 21 1083 34 ("%%pair?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Pair-Class") 1087 21 1087 40 ("'pair")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Pair-Class") 1091 21 1091 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Pair" #f 1098 27 1098 36 ()}
      {Lisp-Entry "jazz.String-Class" #f 1109 27 1109 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.String-Class") 1112 21 1112 34 ("%%string?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.String-Class") 1116 21 1116 40 ("'string")}
      {Lisp-Entry "jazz.emit-test" ("jazz.String-Class") 1120 21 1120 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.String" #f 1127 27 1127 38 ()}
      {Lisp-Entry "jazz.Vector-Class" #f 1138 27 1138 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Vector-Class") 1141 21 1141 34 ("%%vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Vector-Class") 1145 21 1145 40 ("'vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Vector-Class") 1149 21 1149 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Vector" #f 1156 27 1156 38 ()}
      {Lisp-Entry "jazz.U8Vector-Class" #f 1167 27 1167 46 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.U8Vector-Class") 1170 21 1170 34 ("%%u8vector?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.U8Vector-Class") 1174 21 1174 40 ("'u8vector")}
      {Lisp-Entry "jazz.emit-test" ("jazz.U8Vector-Class") 1178 21 1178 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.U8Vector" #f 1185 27 1185 40 ()}
      {Lisp-Entry "jazz.Port-Class" #f 1196 27 1196 42 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Port-Class") 1199 21 1199 34 ("%%port?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Port-Class") 1203 21 1203 40 ("'port")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Port-Class") 1207 21 1207 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Port" #f 1214 27 1214 36 ()}
      {Lisp-Entry "jazz.Continuation-Class" #f 1225 27 1225 50 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Continuation-Class") 1228 21 1228 34 ("%%continuation?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Continuation-Class") 1232 21 1232 40 ("'continuation")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Continuation-Class") 1236 21 1236 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Continuation" #f 1243 27 1243 44 ()}
      {Lisp-Entry "jazz.Procedure-Class" #f 1254 27 1254 47 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Procedure-Class") 1257 21 1257 34 ("%%procedure?" "object")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Procedure-Class") 1261 21 1261 37 ("class" "nextmethod" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Procedure-Class") 1267 21 1267 40 ("'procedure")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Procedure-Class") 1271 21 1271 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Procedure" #f 1278 27 1278 41 ()}
      {Lisp-Entry "jazz.Symbol-Class" #f 1289 27 1289 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Symbol-Class") 1292 21 1292 34 ("%%symbol?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Symbol-Class") 1296 21 1296 40 ("'symbol")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Symbol-Class") 1300 21 1300 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Symbol" #f 1307 27 1307 38 ()}
      {Lisp-Entry "jazz.Keyword-Class" #f 1318 27 1318 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Keyword-Class") 1321 21 1321 34 ("%%keyword?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Keyword-Class") 1325 21 1325 40 ("'keyword")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Keyword-Class") 1329 21 1329 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Keyword" #f 1336 27 1336 39 ()}
      {Lisp-Entry "jazz.Table-Class" #f 1347 27 1347 43 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Table-Class") 1350 21 1350 34 ("%%table?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Table-Class") 1354 21 1354 40 ("'table")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Table-Class") 1358 21 1358 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Table" #f 1365 27 1365 37 ()}
      {Lisp-Entry "jazz.Thread-Class" #f 1376 27 1376 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Thread-Class") 1379 21 1379 34 ("%%thread?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Thread-Class") 1383 21 1383 40 ("'thread")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Thread-Class") 1387 21 1387 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Thread" #f 1394 27 1394 38 ()}
      {Lisp-Entry "jazz.Promise-Class" #f 1405 27 1405 45 ()}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Promise-Class") 1408 21 1408 40 ("'promise")}
      {Lisp-Entry "jazz.Promise" #f 1415 27 1415 39 ()}
      {Lisp-Entry "jazz.Foreign-Class" #f 1426 27 1426 45 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Foreign-Class") 1429 21 1429 34 ("%%foreign?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Foreign-Class") 1433 21 1433 40 ("'foreign")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Foreign-Class") 1437 21 1437 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Foreign" #f 1444 27 1444 39 ()}
      {Lisp-Entry "jazz.Values-Class" #f 1455 27 1455 44 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Values-Class") 1458 21 1458 34 ("%%values?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Values-Class") 1462 21 1462 40 ("'values")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Values-Class") 1466 21 1466 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Values" #f 1473 27 1473 38 ()}
      {Lisp-Entry "jazz.EOF-Class" #f 1484 27 1484 41 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.EOF-Class") 1487 21 1487 34 ("%%eof-object?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.EOF-Class") 1491 21 1491 40 ("'eof")}
      {Lisp-Entry "jazz.emit-test" ("jazz.EOF-Class") 1495 21 1495 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.EOF" #f 1502 27 1502 35 ()}
      {Lisp-Entry "jazz.Unspecified-Class" #f 1513 27 1513 49 ()}
      {Lisp-Entry "jazz.of-type?" ("jazz.Unspecified-Class") 1516 21 1516 34 ("%%unspecified?" "object")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Unspecified-Class") 1520 21 1520 40 ("'unspecified")}
      {Lisp-Entry "jazz.emit-test" ("jazz.Unspecified-Class") 1524 21 1524 35 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Unspecified" #f 1531 27 1531 43 ()}
      {Lisp-Entry "jazz.subtypes" #f 1544 12 1544 25 ("32" "make-vector")}
      {Lisp-Entry "jazz.specialtypes" #f 1547 12 1547 29 ("16" "make-vector")}
      {Lisp-Entry "jazz.table-type" #f 1551 12 1551 27 ("make-table" "##structure-type")}
      {Lisp-Entry "jazz.port-type" #f 1555 12 1555 26 ("open-output-string" "##structure-type")}
      {Lisp-Entry "jazz.thread-type" #f 1559 12 1559 28 ("current-thread" "##structure-type")}
      {Lisp-Entry "jazz.usertypes" #f 1586 8 1586 22 ()}
      {Lisp-Entry "jazz.register-usertype" #f 1590 9 1590 31 ("%%cons" "jazz.usertypes" "set!" "type" "test")}
      {Lisp-Entry "jazz.usertype" #f 1594 9 1594 22 ("%%cdr" "%%cdar" "%%caar" "%%null?" "if" "jazz.usertypes" "scan" "iter" "let" "object")}
      {Lisp-Entry "jazz.Interface" #f 1611 27 1611 41 ()}
      {Lisp-Entry "jazz.new-interface" #f 1614 9 1614 27 ("%%get-category-descendants" "%%cons" "%%set-category-descendants" "ascendant" "lambda" "for-each" "jazz.compute-interface-ancestors" "%%list->vector" "%%set-category-ancestors" "1" "+" "set!" "jazz.new-interface-rank" "0" "eq?" "test:" "%%make-table" "jazz.allocate-interface" "interface" "let" "ascendants" "name" "class")}
      {Lisp-Entry "jazz.compute-interface-ancestors" #f 1624 9 1624 41 ("%%list" "%%get-category-ancestors" "%%vector->list" "ascendant" "lambda" "map" "cons" "append" "%%apply" "jazz.remove-duplicates" "ascendants" "interface")}
      {Lisp-Entry "jazz.interface?" #f 1632 9 1632 24 ("jazz.Interface" "%%class-is?" "object")}
      {Lisp-Entry "jazz.of-type?" ("jazz.Interface") 1647 21 1647 34 ("%%class-of" "interface" "jazz.of-subtype?" "object")}
      {Lisp-Entry "jazz.update-interface" #f 1651 9 1651 30 ("%%get-category-descendants" "descendant" "%%vector-set!" "%%get-method-implementation-tree" "%%get-method-node-implementation" "implementation" "%%get-method-implementation-rank" "implementation-rank" "field" "lambda" "for-each" "%%get-category-virtual-size" "%%vector-ref" "jazz.resize-vector" "implementation-table" "%%get-class-interface-table" "interface-table" "let*" "jazz.Class" "%%class-is?" "category" "iter" "%%get-interface-rank" "interface-rank" "%%not-null?" "%%when" "jazz.update-interface-root-methods" "added-methods" "let" "interface")}
      {Lisp-Entry "jazz.update-interface-root-methods" #f 1670 9 1670 43 ("cons" "set!" "%%set-method-category-rank" "%%get-method-category-rank" "%%not" "jazz.virtual-method?" "and" "%%when" "field" "key" "lambda" "%%get-category-fields" "%%iterate-table" "added-methods" "%%get-interface-rank" "interface-rank" "let*" "interface")}
      {Lisp-Entry "jazz.Field" #f 1690 27 1690 37 ()}
      {Lisp-Entry "jazz.field?" #f 1693 9 1693 20 ("jazz.Field" "%%class-is?" "object")}
      {Lisp-Entry "jazz.field-name" #f 1697 9 1697 24 ("%%get-field-name" "field")}
      {Lisp-Entry "jazz.find-field" #f 1701 9 1701 24 ("jazz.find-field" "and" "%%get-class-ascendant" "ascendant" "let" "%%get-category-field" "or" "field-name" "category")}
      {Lisp-Entry "jazz.require-object-field" #f 1708 9 1708 34 ("%%get-category-name" "jazz.error" "%%not" "if" "jazz.find-field" "field" "%%get-object-class" "class" "let*" "name" "object")}
      {Lisp-Entry "jazz.Slot" #f 1724 27 1724 36 ()}
      {Lisp-Entry "jazz.new-slot" #f 1727 9 1727 22 ("jazz.Slot" "jazz.allocate-slot" "slot-initialize" "slot-offset" "slot-name")}
      {Lisp-Entry "jazz.slot?" #f 1731 9 1731 19 ("jazz.Slot" "%%class-is?" "object")}
      {Lisp-Entry "jazz.add-slot" #f 1735 9 1735 22 ("1" "%%fx+" "%%set-class-instance-size" "%%list" "%%get-class-slots" "%%append" "%%set-class-slots" "jazz.add-field" "jazz.new-slot" "slot" "slot-offset" "%%get-class-instance-size" "instance-size" "let*" "%%get-category-field" "or" "slot-initialize" "slot-name" "class")}
      {Lisp-Entry "jazz.remove-slots" #f 1747 9 1747 26 ("%%length" "%%get-class-instance-size" "%%fx-" "%%set-class-instance-size" "%%set-class-slots" "%%get-class-slots" "actual" "let" "class")}
      {Lisp-Entry "jazz.slot-value" #f 1753 9 1753 24 ("%%get-slot-offset" "%%get-object-slot" "jazz.require-object-field" "slot" "let" "%%object?" "%%debug-assert" "slot-name" "object")}
      {Lisp-Entry "jazz.set-slot-value" #f 1759 9 1759 28 ("%%get-slot-offset" "%%set-object-slot" "jazz.require-object-field" "slot" "let" "%%object?" "%%debug-assert" "value" "slot-name" "object")}
      {Lisp-Entry "jazz.find-slot-offset" #f 1765 9 1765 30 ("%%get-slot-offset" "jazz.require-object-field" "slot" "let" "slot-name" "object")}
      {Lisp-Entry "jazz.initialize-slots" #f 1770 9 1770 30 ("%%set-object-slot" "%%get-slot-initialize" "initialize" "%%get-slot-offset" "offset" "let" "slot" "lambda" "for-each" "%%get-class-slots" "slots" "%%get-object-class" "class" "let*" "object")}
      {Lisp-Entry "jazz.Property" #f 1788 27 1788 40 ()}
      {Lisp-Entry "jazz.new-property" #f 1791 9 1791 26 ("jazz.Property" "jazz.allocate-property" "slot-setter" "slot-getter" "slot-initialize" "slot-offset" "slot-name")}
      {Lisp-Entry "jazz.property?" #f 1795 9 1795 23 ("jazz.Property" "%%class-is?" "object")}
      {Lisp-Entry "jazz.property-getter" #f 1799 9 1799 29 ("%%get-property-getter" "property")}
      {Lisp-Entry "jazz.property-setter" #f 1803 9 1803 29 ("%%get-property-setter" "property")}
      {Lisp-Entry "jazz.all-properties" #f 1807 9 1807 28 ("else" "%%cdr" "%%cons" "%%car" "jazz.property?" "%%null?" "cond" "%%get-class-slots" "slots" "iter" "let" "category")}
      {Lisp-Entry "jazz.add-property" #f 1814 9 1814 26 ("1" "%%fx+" "%%set-class-instance-size" "%%list" "%%get-class-slots" "%%append" "%%set-class-slots" "jazz.add-field" "jazz.new-property" "slot" "slot-offset" "%%get-class-instance-size" "instance-size" "let*" "%%get-category-field" "or" "slot-setter" "slot-getter" "slot-initialize" "slot-name" "class")}
      {Lisp-Entry "jazz.Method" #f 1834 27 1834 38 ()}
      {Lisp-Entry "jazz.method?" #f 1837 9 1837 21 ("jazz.Method" "%%class-is?" "object")}
      {Lisp-Entry "jazz.final-method?" #f 1841 9 1841 27 ("final" "'final" "%%get-method-dispatch-type" "%%eq?" "jazz.Method" "%%class-is?" "and" "field")}
      {Lisp-Entry "jazz.virtual-method?" #f 1846 9 1846 29 ("final" "'final" "%%get-method-dispatch-type" "%%neq?" "jazz.Method" "%%class-is?" "and" "field")}
      {Lisp-Entry "jazz.locate-method-owner" #f 1851 9 1851 33 ("%%get-interface-ascendants" "jazz.Interface" "%%get-class-interfaces" "jazz.find-in" "%%get-class-ascendant" "or" "jazz.Class" "%%class-is?" "%%get-category-field" "not" "cond" "iter" "let" "method-name" "category")}
      {Lisp-Entry "jazz.new-final-method" #f 1872 9 1872 30 ("final" "'final" "jazz.Method" "jazz.allocate-method" "implementation" "name")}
      {Lisp-Entry "jazz.add-final-method" #f 1876 9 1876 30 ("jazz.error" "else" "jazz.update-final-method" "%%eq?" "jazz.create-final-method" "not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.create-final-method" #f 1886 9 1886 33 ("jazz.add-field" "jazz.new-final-method" "method" "let" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.update-final-method" #f 1892 9 1892 33 ("jazz.error" "%%set-method-implementation" "jazz.final-method?" "if" "%%get-category-field" "field" "let" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.new-virtual-method" #f 1905 9 1905 32 ("jazz.Method" "jazz.allocate-method" "implementation-rank" "category-rank" "implementation-tree" "dispatch-type" "name")}
      {Lisp-Entry "jazz.add-virtual-method" #f 1909 9 1909 32 ("jazz.error" "else" "jazz.update-virtual-method" "%%eq?" "jazz.create-virtual-method" "not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "category")}
      {Lisp-Entry "jazz.create-virtual-method" #f 1919 9 1919 35 ("jazz.add-field" "1" "+" "%%set-category-virtual-size" "%%set-method-implementation-rank" "%%get-category-virtual-size" "virtual-size" "jazz.new-virtual-method" "method" "jazz.new-method-node" "node" "interface" "'interface" "class" "'class" "jazz.Class" "%%class-is?" "if" "dispatch-type" "let*" "method-implementation" "method-name" "category")}
      {Lisp-Entry "jazz.update-virtual-method" #f 1930 9 1930 35 ("%%get-method-implementation-rank" "jazz.error" "%%set-method-node-implementation" "%%get-method-implementation-tree" "node" "jazz.virtual-method?" "if" "%%get-category-field" "field" "let" "method-implementation" "method-name" "category")}
      {Lisp-Entry "jazz.add-method-node" #f 1944 9 1944 29 ("error" "jazz.final-method?" "%%vector-set!" "%%vector-ref" "method-table" "%%get-class-interface-table" "interface" "%%get-class-class-table" "%%get-method-dispatch-type" "case" "dispatch-table" "let*" "lambda" "jazz.update-method-tree" "%%get-method-implementation-rank" "implementation-rank" "%%get-method-category-rank" "category-rank" "jazz.create/update-method-node" "end-nodes" "start-node" "receive" "%%get-method-implementation-tree" "root-node" "jazz.virtual-method?" "%%get-category-field" "field" "else" "%%eq?" "jazz.error" "not" "cond" "jazz.locate-method-owner" "owner" "let" "method-implementation" "method-name" "class")}
      {Lisp-Entry "jazz.create/update-method-node" #f 1971 9 1971 39 ("jazz.create-method-node" "jazz.update-method-node" "%%get-method-node-category" "%%eq?" "if" "jazz.locate-most-specific-method-node" "node" "let" "method-implementation" "class" "root-node")}
      {Lisp-Entry "jazz.create-method-node" #f 1978 9 1978 32 ("values" "%%cons" "%%set-method-node-children" "%%set-method-node-next-implementation" "%%set-method-node-next-node" "for-each" "jazz.new-method-node" "new-node" "old-children" "assq" "or" "%%cdr" "new-children" "assv" "%%subtype?" "%%get-method-node-category" "child-class" "let" "child" "lambda" "%%get-method-node-children" "jazz.partition" "partition" "let*" "method-implementation" "class" "node")}
      {Lisp-Entry "jazz.update-method-node" #f 1995 9 1995 32 ("%%get-method-node-children" "values" "%%set-method-node-implementation" "method-implementation" "class" "node")}
      {Lisp-Entry "jazz.Method-Node" #f 2005 27 2005 43 ()}
      {Lisp-Entry "jazz.new-method-node" #f 2008 9 2008 29 ("jazz.Method-Node" "jazz.allocate-method-node" "%%get-method-node-implementation" "if" "next-implementation" "let" "children" "next-node" "implementation" "category")}
      {Lisp-Entry "jazz.locate-most-specific-method-node" #f 2013 9 2013 46 ("%%cdr" "%%subtype?" "child-category" "%%car" "child" "let*" "%%null?" "%%get-method-node-children" "children" "sub-iter" "%%get-method-node-category" "%%eq?" "if" "iter" "let" "category" "node")}
      {Lisp-Entry "jazz.update-method-tree" #f 2027 9 2027 32 ("%%get-category-descendants" "descendant" "for-each" "%%memq" "%%not" "%%when" "category" "iter" "%%get-method-node-category" "node" "lambda" "map" "end-categories" "let" "end-nodes" "start-node" "proc")}
      {Lisp-Entry "jazz.call-into-incoherent" #f 2039 9 2039 34 ("jazz.error" "rest")}
      {Lisp-Entry "jazz.call-into-abstract" #f 2043 9 2043 32 ("jazz.error" "method" "class")}
      {Lisp-Entry "jazz.Queue" #f 2055 27 2055 37 ()}
      {Lisp-Entry "jazz.new-queue" #f 2058 9 2058 23 ("jazz.Queue" "jazz.allocate-queue")}
      {Lisp-Entry "jazz.enqueue" #f 2062 9 2062 21 ("%%set-cdr!" "pair" "jazz.queue-copy-last-list" "%%get-queue-last-list" "%%not-null?" "%%when" "else" "%%set-queue-list" "%%cons" "%%set-queue-current" "%%null?" "cond" "%%get-queue-current" "current" "let" "object" "queue")}
      {Lisp-Entry "jazz.enqueue-list" #f 2075 9 2075 26 ("%%set-cdr!" "%%set-queue-last-anchor" "jazz.queue-copy-last-list" "%%get-queue-last-list" "else" "%%set-queue-list" "%%set-queue-last-list" "%%set-queue-current" "%%get-queue-current" "%%null?" "cond" "%%not-null?" "%%when" "lst" "queue")}
      {Lisp-Entry "jazz.queue-copy-last-list" #f 2089 9 2089 34 ("%%set-queue-last-anchor" "%%set-queue-last-list" "%%set-cdr!" "else" "%%get-queue-list" "jazz.last-tail" "%%set-queue-current" "%%get-queue-last-list" "jazz.list-copy" "%%set-queue-list" "%%null?" "cond" "%%get-queue-last-anchor" "last-anchor" "let" "queue")}
      {Lisp-Entry "jazz.queue-list" #f 2101 9 2101 24 ("%%get-queue-list" "queue")}
      {Lisp-Entry "jazz.reset-queue" #f 2105 9 2105 25 ("%%set-queue-current" "%%set-queue-last-anchor" "%%set-queue-last-list" "%%set-queue-list" "queue")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "syntax" "runtime.scm"} 1226584773
    {Lisp-Entry "core.base.syntax.runtime" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.with-expression-value" #f 40 9 40 35 (",expr" ",value" "jazz.generate-symbol" "value" "let" "%%source-code" "symbol?" "if" "proc" "expr")}
      {Lisp-Entry "jazz.simplify-begin" #f 48 9 48 28 ("%%cadr" "%%cddr" "%%null?" "%%cdr" "begin" "'begin" "%%car" "%%eq?" "%%pair?" "and" "if" "form")}}})
"serial"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "serial.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.serial" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.object->serial" #f 42 13 42 32 ("object->serial-number" "obj")}
      {Lisp-Entry "jazz.serial->object" #f 45 13 45 32 ("serial-number->object" "number")}
      {Lisp-Entry "jazz.object->serial-symbol" #f 49 13 49 39 ("jazz.object->serial" "number->string" "string-append" "string->symbol" "obj")}
      {Lisp-Entry "jazz.serial-number" #f 56 11 56 29 ("1")}
      {Lisp-Entry "jazz.serialized-objects" #f 59 11 59 34 ("equal?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.object->serial" #f 62 12 62 31 ("%%table-set!" "1" "%%fx+" "set!" "jazz.serial-number" "number" "let" "jazz.serialized-objects" "%%table-ref" "or" "obj")}
      {Lisp-Entry "jazz.serial->object" #f 69 12 69 31 ("%%car" "jazz.error" "%%null?" "continuation-return" "%%fx=" "if" "value" "key" "jazz.serialized-objects" "%%iterate-table" "return" "lambda" "continuation-capture" "rest" "number")}}})
"setup"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "setup.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.setup" #f 37 9 37 28 ("setup-debuggee" "jazz")}})
"specific"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "generic" "syntax" "specific.scm"} 1226584774
    {Lisp-Entry "core.generic.syntax.specific" #f 44 8 44 36 ("jazz.Specific" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.Specific" #f 47 19 47 32 ("%%set-specific-descendant-specifics" "%%get-specific-descendant-specifics" "descendant-specifics" "%%set-specific-ancestor-specifics" "%%get-specific-ancestor-specifics" "ancestor-specifics" "%%set-specific-implementation" "%%get-specific-implementation" "implementation" "%%set-specific-dynamic-signature" "%%get-specific-dynamic-signature" "dynamic-signature" "jazz.allocate-specific" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "jazz.Specific" #f 54 27 54 40 ()}
      {Lisp-Entry "jazz.define-specific" #f 57 20 57 40 ("jazz.expand-define-specific" "apply" "rest")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "generic" "runtime" "specific.scm"} 1226584774
    {Lisp-Entry "core.generic.runtime.specific" #f 38 8 38 37 ()
      {Lisp-Entry "jazz.new-specific" #f 41 9 41 26 ("jazz.Specific" "jazz.allocate-specific" "implementation" "signature-proc")}}})
"stack"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "stack.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.stack" #f 37 8 37 31 ("include")
      {Lisp-Entry "jazz.get-procedure-name" #f 50 13 50 36 ("##procedure-name" "if" "procedure")}
      {Lisp-Entry "jazz.get-continuation-stack" #f 56 13 56 40 ("jazz.queue-list" "##continuation-next-frame" "1" "##fixnum.+" "jazz.enqueue" "begin" "and" "##fixnum.<" "not" "or" "if" "0" "d" "iter" "jazz.new-queue" "queue" "let" "depth" "cont")}
      {Lisp-Entry "jazz.get-continuation-name" #f 69 13 69 39 ("##continuation-creator" "jazz.get-procedure-name" "cont")}
      {Lisp-Entry "jazz.collect-var-val" #f 73 13 73 33 ("##cte-parent-cte" "##inverse-eval-in-env" "##cte-top?" "if" "##object->string" "cons" "jazz.enqueue" "queue" "cte" "val" "var")}
      {Lisp-Entry "jazz.get-continuation-dynamic-environment" #f 81 13 81 54 ("jazz.queue-list" "##interaction-cte" "macro-code-cte" "##interp-continuation-rte" "rte" "##interp-continuation-code" "$code" "##interp-continuation?" "if" "macro-continuation-denv" "##dynamic-env->list" "collect-parameters" "and" "jazz.new-queue" "queue" "let" "cont")
        {Lisp-Entry "collect-parameters" #f 83 15 83 33 ("##list" "jazz.collect-var-val" "##inverse-eval-in-env" "x" "##hidden-parameter?" "##not" "##cdr" "val" "param" "##car" "param-val" "let*" "##pair?" "if" "iter" "let" "queue" "cte" "lst")}}
      {Lisp-Entry "jazz.get-continuation-lexical-environment" #f 108 13 108 54 ("jazz.queue-list" "##interaction-cte" "##continuation-locals" "collect-locals" "begin" "macro-code-cte" "collect-rte" "##interp-continuation-rte" "rte" "##interp-continuation-code" "$code" "##interp-continuation?" "if" "and" "jazz.new-queue" "queue" "let" "cont")
        {Lisp-Entry "collect-rte" #f 110 15 110 26 ("else" "macro-rte-up" "##cte-parent-cte" "jazz.collect-var-val" "##hidden-local-var?" "##not" "##car" "var" "##pair?" "if" "##vector->list" "##cdr" "vals" "##cte-frame-vars" "vars" "loop2" "##cte-frame?" "##cte-top?" "cond" "r" "c" "loop1" "let" "queue" "rte" "cte")}
        {Lisp-Entry "collect-vars" #f 129 15 129 27 ("jazz.collect-var-val" "##cdr" "val" "var" "##car" "var-val" "let*" "##pair?" "if" "iter" "let" "queue" "cte" "lst")}
        {Lisp-Entry "collect-locals" #f 138 15 138 29 ("collect-vars" "and" "queue" "cte" "lst")}}
      {Lisp-Entry "jazz.get-continuation-location" #f 155 13 155 43 ("##continuation-locat" "jazz.locat->file/line/col" "cont")}
      {Lisp-Entry "jazz.current-repl-context" #f 159 13 159 38 ("macro-current-repl-context")}
      {Lisp-Entry "jazz.repl-context-level" #f 163 13 163 36 ("macro-repl-context-level" "context")}
      {Lisp-Entry "jazz.repl-context-depth" #f 166 13 166 36 ("macro-repl-context-depth" "context")}
      {Lisp-Entry "jazz.repl-context-cont" #f 169 13 169 35 ("macro-repl-context-cont" "context")}
      {Lisp-Entry "jazz.repl-context-initial-cont" #f 172 13 172 43 ("macro-repl-context-initial-cont" "context")}
      {Lisp-Entry "jazz.repl-context-prev-level" #f 175 13 175 41 ("macro-repl-context-prev-level" "context")}
      {Lisp-Entry "jazz.repl-context-prev-depth" #f 178 13 178 41 ("macro-repl-context-prev-depth" "context")}
      {Lisp-Entry "jazz.with-repl-context" #f 182 13 182 35 ("repl-context" "macro-dynamic-bind" "0" "1" "macro-repl-context-level" "##fixnum.+" "macro-make-repl-context" "context" "##thread-repl-context-get!" "prev-context" "let" "thunk" "cont")}
      {Lisp-Entry "jazz.repl" #f 197 13 197 22 ("##repl")}
      {Lisp-Entry "eval-within-no-winding" #f 209 13 209 35 ("##interaction-cte" "##compile-top" "##make-source" "##sourcify" "##compile-inner" "run" "##interp-continuation-rte" "rte" "macro-code-cte" "cte" "##interp-continuation-code" "$code" "let*" "##interp-continuation?" "if" "receiver" "repl-context" "cont" "src")
        {Lisp-Entry "run" #f 211 15 211 18 ("macro-code-run" "let" "receiver" "repl-context" "macro-dynamic-bind" "lambda" "cont" "##continuation-graft-no-winding" "rte" "c")}}
      {Lisp-Entry "jazz.eval-within-no-winding" #f 234 13 234 40 ("car" "##continuation-return-no-winding" "call-with-values" "results" "macro-current-repl-context" "eval-within-no-winding" "return" "lambda" "continuation-capture" "cont" "expr")}
      {Lisp-Entry "jazz.repl-result-history-add" #f 249 13 249 41 ("##repl-channel-result-history-add" "##current-thread" "##thread-repl-channel-get!" "channel" "let" "result")}
      {Lisp-Entry "jazz.inspect-repl-context" #f 259 13 259 38 ("context")}}})
"string"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "string.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.string" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.memstring" #f 40 9 40 23 ("1" "%%fx+" "else" "%%string-ref" "%%eqv?" "%%fx=" "cond" "0" "n" "iter" "%%string-length" "len" "let" "string" "char")}}})
"stub"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "process" "stub.jazz"} 1226584786
    {Lisp-Entry "jazz.system.process.stub" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "Process" #f 43 16 43 23 ()
        {Lisp-Entry "get-name" #f 46 23 46 31 ()}
        {Lisp-Entry "get-icon" #f 47 23 47 31 ()}
        {Lisp-Entry "get-register" #f 48 23 48 35 ()}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "jrm" "register" "stub.jazz"} 1226584778
    {Lisp-Entry "jazz.jrm.register.stub" #f 37 9 37 31 ("jazz")
      {Lisp-Entry "Register" #f 43 16 43 24 ()
        {Lisp-Entry "find-object" #f 46 23 46 34 ("name")}
        {Lisp-Entry "require-object" #f 47 23 47 37 ("name")}
        {Lisp-Entry "register-object" #f 48 23 48 38 ("rest" "object" "name")}
        {Lisp-Entry "unregister-object" #f 49 23 49 40 ("rest" "name")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debuggers" "jazz" "stub.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debuggers.jazz.stub" #f 37 9 37 42 ("jazz")
      {Lisp-Entry "Jazz-Debugger" #f 43 16 43 29 ()
        {Lisp-Entry "attach-process" #f 46 23 46 37 ("process")}
        {Lisp-Entry "update-process" #f 47 23 47 37 ("process")}
        {Lisp-Entry "detach-process" #f 48 23 48 37 ("process")}
        {Lisp-Entry "register-console" #f 49 23 49 39 ("thread" "process")}
        {Lisp-Entry "unregister-console" #f 50 23 50 41 ("console")}
        {Lisp-Entry "console-output" #f 51 23 51 37 ("line" "console")}
        {Lisp-Entry "status-message" #f 52 23 52 37 ("message")}
        {Lisp-Entry "get-toplevel-hwnd" #f 53 23 53 40 ()}
        {Lisp-Entry "debuggee-stop" #f 54 23 54 36 ("reason" "kind" "stop" "thread" "process")}}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "stub.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.stub" #f 37 9 37 27 ("jazz")
      {Lisp-Entry "Debuggee-Process" #f 48 16 48 32 ()
        {Lisp-Entry "get-title" #f 51 29 51 38 ()}
        {Lisp-Entry "get-icon" #f 52 29 52 37 ()}
        {Lisp-Entry "detach-process" #f 53 23 53 37 ()}
        {Lisp-Entry "exit-process" #f 54 23 54 35 ()}
        {Lisp-Entry "console-input" #f 55 23 55 36 ("line" "thread")}
        {Lisp-Entry "get-toplevel-hwnd" #f 56 23 56 40 ()}
        {Lisp-Entry "get-threads" #f 57 23 57 34 ()}
        {Lisp-Entry "restart-stop" #f 58 23 58 35 ("restart")}
        {Lisp-Entry "break-thread" #f 59 23 59 35 ("thread")}
        {Lisp-Entry "continue-stop" #f 60 23 60 36 ("stop")}
        {Lisp-Entry "evaluate-expressions" #f 61 23 61 43 ("expressions")}}
      {Lisp-Entry "Debuggee-Thread" #f 69 16 69 31 ()
        {Lisp-Entry "get-id" #f 72 29 72 35 ()}
        {Lisp-Entry "get-name" #f 73 29 73 37 ()}
        {Lisp-Entry "get-state" #f 74 29 74 38 ()}
        {Lisp-Entry "get-stops" #f 75 23 75 32 ()}
        {Lisp-Entry "set-repl-frame" #f 76 23 76 37 ("frame")}}
      {Lisp-Entry "Debuggee-Restart" #f 84 16 84 32 ()
        {Lisp-Entry "get-id" #f 87 29 87 35 ()}
        {Lisp-Entry "get-name" #f 88 29 88 37 ()}
        {Lisp-Entry "get-message" #f 89 29 89 40 ()}}
      {Lisp-Entry "Debuggee-Stop" #f 97 16 97 29 ()
        {Lisp-Entry "get-id" #f 100 29 100 35 ()}
        {Lisp-Entry "get-kind" #f 101 29 101 37 ()}
        {Lisp-Entry "get-reason" #f 102 29 102 39 ()}
        {Lisp-Entry "get-detail" #f 103 29 103 39 ()}
        {Lisp-Entry "get-restarts" #f 104 29 104 41 ()}
        {Lisp-Entry "get-frames" #f 105 23 105 33 ()}}
      {Lisp-Entry "Debuggee-Frame" #f 113 16 113 30 ()
        {Lisp-Entry "get-id" #f 116 29 116 35 ()}
        {Lisp-Entry "get-continuation" #f 117 29 117 45 ()}
        {Lisp-Entry "get-name" #f 118 29 118 37 ()}
        {Lisp-Entry "get-location" #f 119 23 119 35 ()}
        {Lisp-Entry "get-variables" #f 120 23 120 36 ()}}}})
"stub-autoload"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debugger" "debuggers" "jazz" "stub-autoload.jazz"} 1226584775
    {Lisp-Entry "jazz.debugger.debuggers.jazz.stub-autoload" #f 37 9 37 51 ("jazz")}})
"symbol"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "symbol.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.symbol" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.identifier-module" #f 45 9 45 31 ("0" "%%substring" "%%string->symbol" "%%not" "if" "jazz.string-find-reversed" "pos" "%%symbol->string" "str" "let*" "%%symbol?" "%%assert" "identifier")}
      {Lisp-Entry "jazz.identifier-name" #f 54 9 54 29 ("%%string-length" "1" "%%fx+" "%%substring" "%%string->symbol" "%%not" "if" "jazz.string-find-reversed" "pos" "%%symbol->string" "str" "let*" "%%symbol?" "%%assert" "identifier")}
      {Lisp-Entry "jazz.specifier?" #f 68 9 68 24 ("1" "%%fx-" "0" "%%string-ref" "%%eqv?" "2" "%%fx>" "%%string-length" "len" "%%symbol->string" "str" "let" "%%symbol?" "and" "expr")}
      {Lisp-Entry "jazz.specifier->name" #f 77 9 77 29 ("%%symbol->string" "%%string->symbol" "%%string-length" "%%fx-" "1" "%%substring" "string" "lambda" "extract" "let" "specifier")}
      {Lisp-Entry "jazz.name->specifier" #f 84 9 84 29 ("%%symbol->string" "%%string-append" "%%string->symbol" "name")}
      {Lisp-Entry "jazz.binding-specifier" #f 88 9 88 31 ("%%car" "jazz.specifier?" "%%pair?" "and" "%%source-code" "%%cdr" "cdr-binding" "let" "binding")}
      {Lisp-Entry "jazz.enumerator?" #f 100 9 100 25 ("0" "%%symbol->string" "%%string-ref" "%%eqv?" "%%symbol?" "and" "obj")}
      {Lisp-Entry "jazz.enumerator->symbol" #f 105 9 105 32 ("%%string-length" "1" "%%substring" "%%string->symbol" "%%symbol->string" "name" "let" "obj")}}})
"syntax"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "performance" "syntax.scm"} 1226584790
    {Lisp-Entry "test.performance.syntax" #f 0 8 0 31 ()
      {Lisp-Entry "Z" #f 3 19 3 20 ("allocate-z" "jazz.Object-Class" "jazz.Object")}
      {Lisp-Entry "W" #f 11 19 11 20 ("allocate-w" "jazz.Object-Class" "Z")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "validate" "syntax.jazz"} 1226584789
    {Lisp-Entry "jazz.validate.syntax" #f 37 9 37 29 ("jazz")
      {Lisp-Entry "validate" #f 40 8 40 16 (",message" ",proc" ",expr" "unless" ":text" "->string" "message" "let" "expr" "proc")}
      {Lisp-Entry "error?" #f 46 8 46 14 ("expr")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "snow" "syntax.scm"} 1226584784
    {Lisp-Entry "jazz.snow.syntax" #f 37 9 37 25 ("scheme")
      {Lisp-Entry "package*" #f 45 15 45 23 (",@provides" "export" "scheme" ",name" "library" "requires" "provides" "lambda" "parse-clauses" "clauses" "name")
        {Lisp-Entry "parse-clauses" #f 46 11 46 24 ("cons" "require:" "cdr" "map" "set!" "provide:" "clause" "lambda" "for-each" "else" "symbol?" "cadr" "name/signature" "define*" "car" "case" "pair?" "if" "form" "extract-provided" "define" "requires" "provides" "let" "proc" "clauses")}}
      {Lisp-Entry "define-record*" #f 83 15 83 29 ("rest")}
      {Lisp-Entry "define*" #f 92 15 92 22 ("rest")}
      {Lisp-Entry "test*" #f 101 15 101 20 ("rest")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "development" "syntax.jazz"} 1226584778
    {Lisp-Entry "jazz.development.syntax" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "global" #f 40 8 40 14 ("set!" ",value" ",setter" ",getter" ",name" "public" "definition" "begin" "generate-symbol" "value" "setter" "symbol->string" "concatenate" "string->symbol" "getter" "let" "name")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "syntax.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.syntax" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.source?" #f 40 9 40 21 ("%%source?" "expr")}
      {Lisp-Entry "jazz.source-code" #f 43 9 43 25 ("%%source-code" "expr")}
      {Lisp-Entry "jazz.source-locat" #f 46 9 46 26 ("%%source-locat" "expr")}
      {Lisp-Entry "jazz.desourcify" #f 49 9 49 24 ("%%desourcify" "expr")}
      {Lisp-Entry "jazz.desourcify-list" #f 52 9 52 29 ("jazz.desourcify" "map" "lst")}
      {Lisp-Entry "jazz.sourcify" #f 55 9 55 22 ("%%sourcify" "src" "expr")}
      {Lisp-Entry "jazz.sourcify-if" #f 58 9 58 25 ("jazz.sourcify" "jazz.source?" "if" "src" "expr")}
      {Lisp-Entry "jazz.locat-container" #f 63 9 63 29 ("%%locat-container" "locat")}
      {Lisp-Entry "jazz.locat-position" #f 66 9 66 28 ("%%locat-position" "locat")}
      {Lisp-Entry "jazz.container->file" #f 69 9 69 29 ("%%container->file" "container")}
      {Lisp-Entry "jazz.position->filepos" #f 72 9 72 31 ("%%position->filepos" "position")}
      {Lisp-Entry "jazz.filepos-line" #f 75 9 75 26 ("%%filepos-line" "filepos")}
      {Lisp-Entry "jazz.filepos-col" #f 78 9 78 25 ("%%filepos-col" "filepos")}
      {Lisp-Entry "jazz.locat->file/line/col" #f 81 9 81 34 ("list" "%%filepos-col" "col" "%%filepos-line" "line" "%%locat-position" "%%position->filepos" "filepos" "%%locat-container" "%%container->file" "file" "let" "if" "locat")}
      {Lisp-Entry "jazz.present-source" #f 98 9 98 28 ("else" "present-vector" "##vector?" "present-list" "##pair?" "present-src" "##source?" "cond" "obj")
        {Lisp-Entry "present-src" #f 100 11 100 22 ("##filepos-col" "1" "##filepos-line" "##fixnum.+" "jazz.present-source" "source" "'source" "##vector" "##source-locat" "##locat-position" "pos" "##source-code" "code" "let" "src")}
        {Lisp-Entry "present-list" #f 108 11 108 23 ("else" "##null?" "##cdr" "present-list" "##car" "jazz.present-source" "##cons" "##pair?" "cond" "lst")}
        {Lisp-Entry "present-vector" #f 117 11 117 25 ("##vector-ref" "jazz.present-source" "##vector-set!" "begin" "##fixnum.<" "if" "1" "##fixnum.-" "i" "loop" "let" "0" "##make-vector" "x" "##vector-length" "len" "let*" "vect")}}}})
"system"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "system.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.system" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.open-process" #f 42 12 42 29 ("open-process")}
      {Lisp-Entry "jazz.process-status" #f 43 12 43 31 ("process-status")}
      {Lisp-Entry "jazz.exit" #f 44 12 44 21 ("exit")}
      {Lisp-Entry "jazz.switch?" #f 49 9 49 21 ("0" "string-ref" "eqv?" "or" "2" "string-length" ">=" "and" "arg")}
      {Lisp-Entry "jazz.switch-name" #f 55 9 55 25 ("string-length" "1" "substring" "arg")}
      {Lisp-Entry "jazz.command-argument" #f 59 9 59 30 ("cddr" "else" "cadr" "jazz.switch-name" "equal?" "jazz.error" "jazz.switch?" "not" "or" "cond" "car" "arg" "null?" "if" "arguments" "iter" "command-line" "cdr" "all" "let" "name")}}})
"table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "table.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.table" #f 37 8 37 31 ()
      {Lisp-Entry "jazz.table-clear" #f 40 9 40 25 ("%%table-clear" "%%table?" "%%debug-assert" "key" "table")}
      {Lisp-Entry "jazz.table-keys" #f 45 9 45 24 ("%%table-keys" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.table-length" #f 50 9 50 26 ("%%table-length" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.iterate-table" #f 55 9 55 27 ("%%iterate-table" "%%table?" "%%debug-assert" "proc" "table")}
      {Lisp-Entry "jazz.map-table" #f 60 9 60 23 ("jazz.queue-list" "jazz.enqueue" "value" "key" "lambda" "%%iterate-table" "jazz.new-queue" "queue" "let" "%%table?" "%%debug-assert" "proc" "table")}
      {Lisp-Entry "jazz.list->table" #f 69 9 69 25 ("%%list->table" "equal?" "test" "#!optional" "alist")}
      {Lisp-Entry "jazz.table->list" #f 73 9 73 25 ("%%table->list" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.table-entries" #f 78 9 78 27 ("%%table-entries" "%%table?" "%%debug-assert" "table")}
      {Lisp-Entry "jazz.eq-hash" #f 85 12 85 24 ("eq?-hash")}
      {Lisp-Entry "jazz.eqv-hash" #f 86 12 86 25 ("eqv?-hash")}
      {Lisp-Entry "jazz.equal-hash" #f 87 12 87 27 ("equal?-hash")}}})
"template"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "template.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.template" #f 37 9 37 37 ("scheme")
      {Lisp-Entry "template" #f 45 8 45 16 ("type")}
      {Lisp-Entry "class" #f 52 3 52 8 ("col" "generate" "getter" "T" "row" "slot" "Object" "extends" "Cell<T>")}
      {Lisp-Entry "Cell<fx>" #f 58 13 58 21 ()}
      {Lisp-Entry "butlast<T>" #f 61 11 61 21 ("1" "cardinality" "-" "0" "subseq" "T" "seq")}
      {Lisp-Entry "butlast<string>" #f 65 13 65 28 ()}
      {Lisp-Entry "butlast" #f 68 13 68 20 ("1" "length" "-" "0" "subseq" "string" "seq")}
      {Lisp-Entry "instantiate-butlast" #f 73 8 73 27 ("type")}}})
"templates"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "templates.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.templates" #f 37 9 37 38 ("scheme")
      {Lisp-Entry "instantiate-for-each" #f 45 8 45 28 ("T" "name")}
      {Lisp-Entry "instantiate-butlast" #f 54 8 54 27 ("T")}
      {Lisp-Entry "instantiate-find" #f 61 8 61 24 ("T" "name")}
      {Lisp-Entry "instantiate-find-in" #f 80 8 80 27 ("T" "name")}
      {Lisp-Entry "instantiate-starts-with?" #f 208 8 208 32 ("T")}
      {Lisp-Entry "instantiate-ends-with?" #f 216 8 216 30 ("T")}}})
"test"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "test.jazz"} 1226584790
    {Lisp-Entry "test.test" #f 0 9 0 18 ("lalali" "lalala" "put-sequence" "List-Factory" "new" "e" "let" "jazz")}})
"thread"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "thread.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.thread" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.current-thread" #f 47 12 47 31 ("current-thread")}
      {Lisp-Entry "jazz.thread?" #f 48 12 48 24 ("thread?")}
      {Lisp-Entry "jazz.make-thread" #f 49 12 49 28 ("make-thread")}
      {Lisp-Entry "jazz.make-root-thread" #f 50 12 50 33 ("make-root-thread")}
      {Lisp-Entry "jazz.thread-name" #f 51 12 51 28 ("thread-name")}
      {Lisp-Entry "jazz.thread-specific" #f 52 12 52 32 ("thread-specific")}
      {Lisp-Entry "jazz.thread-specific-set!" #f 53 12 53 37 ("thread-specific-set!")}
      {Lisp-Entry "jazz.thread-base-priority" #f 54 12 54 37 ("thread-base-priority")}
      {Lisp-Entry "jazz.thread-base-priority-set!" #f 55 12 55 42 ("thread-base-priority-set!")}
      {Lisp-Entry "jazz.thread-priority-boost" #f 56 12 56 38 ("thread-priority-boost")}
      {Lisp-Entry "jazz.thread-priority-boost-set!" #f 57 12 57 43 ("thread-priority-boost-set!")}
      {Lisp-Entry "jazz.thread-start!" #f 58 12 58 30 ("thread-start!")}
      {Lisp-Entry "jazz.thread-yield!" #f 59 12 59 30 ("thread-yield!")}
      {Lisp-Entry "jazz.thread-sleep!" #f 60 12 60 30 ("thread-sleep!")}
      {Lisp-Entry "jazz.thread-terminate!" #f 61 12 61 34 ("thread-terminate!")}
      {Lisp-Entry "jazz.thread-join!" #f 62 12 62 29 ("thread-join!")}
      {Lisp-Entry "jazz.thread-send" #f 63 12 63 28 ("thread-send")}
      {Lisp-Entry "jazz.thread-receive" #f 64 12 64 31 ("thread-receive")}
      {Lisp-Entry "jazz.thread-interrupt!" #f 65 12 65 34 ("thread-interrupt!")}
      {Lisp-Entry "jazz.thread-thread-group" #f 66 12 66 36 ("thread-thread-group")}
      {Lisp-Entry "jazz.thread-group->thread-group-list" #f 67 12 67 48 ("thread-group->thread-group-list")}
      {Lisp-Entry "jazz.thread-group->thread-group-vector" #f 68 12 68 50 ("thread-group->thread-group-vector")}
      {Lisp-Entry "jazz.thread-group->thread-list" #f 69 12 69 42 ("thread-group->thread-list")}
      {Lisp-Entry "jazz.thread-group->thread-vector" #f 70 12 70 44 ("thread-group->thread-vector")}
      {Lisp-Entry "jazz.thread-state" #f 71 12 71 29 ("thread-state")}
      {Lisp-Entry "jazz.thread-state-abnormally-terminated-reason" #f 72 12 72 58 ("thread-state-abnormally-terminated-reason")}
      {Lisp-Entry "jazz.thread-state-abnormally-terminated?" #f 73 12 73 52 ("thread-state-abnormally-terminated?")}
      {Lisp-Entry "jazz.thread-state-active-timeout" #f 74 12 74 44 ("thread-state-active-timeout")}
      {Lisp-Entry "jazz.thread-state-active-waiting-for" #f 75 12 75 48 ("thread-state-active-waiting-for")}
      {Lisp-Entry "jazz.thread-state-active?" #f 76 12 76 37 ("thread-state-active?")}
      {Lisp-Entry "jazz.thread-state-initialized?" #f 77 12 77 42 ("thread-state-initialized?")}
      {Lisp-Entry "jazz.thread-state-normally-terminated-result" #f 78 12 78 56 ("thread-state-normally-terminated-result")}
      {Lisp-Entry "jazz.thread-state-normally-terminated?" #f 79 12 79 50 ("thread-state-normally-terminated?")}
      {Lisp-Entry "jazz.thread-state-uninitialized?" #f 80 12 80 44 ("thread-state-uninitialized?")}
      {Lisp-Entry "jazz.mutex?" #f 92 12 92 23 ("mutex?")}
      {Lisp-Entry "jazz.make-mutex" #f 93 12 93 27 ("make-mutex")}
      {Lisp-Entry "jazz.mutex-name" #f 94 12 94 27 ("mutex-name")}
      {Lisp-Entry "jazz.mutex-specific" #f 95 12 95 31 ("mutex-specific")}
      {Lisp-Entry "jazz.mutex-specific-set!" #f 96 12 96 36 ("mutex-specific-set!")}
      {Lisp-Entry "jazz.mutex-state" #f 97 12 97 28 ("mutex-state")}
      {Lisp-Entry "jazz.mutex-lock!" #f 98 12 98 28 ("mutex-lock!")}
      {Lisp-Entry "jazz.mutex-unlock!" #f 99 12 99 30 ("mutex-unlock!")}
      {Lisp-Entry "jazz.mutex-wait" #f 101 13 101 28 ("mutex-unlock!" "mutex-lock!" "mutex")}
      {Lisp-Entry "jazz.condition?" #f 115 12 115 27 ("condition-variable?")}
      {Lisp-Entry "jazz.make-condition" #f 116 12 116 31 ("make-condition-variable")}
      {Lisp-Entry "jazz.condition-name" #f 117 12 117 31 ("condition-variable-name")}
      {Lisp-Entry "jazz.condition-specific" #f 118 12 118 35 ("condition-variable-specific")}
      {Lisp-Entry "jazz.condition-specific-set!" #f 119 12 119 40 ("condition-variable-specific-set!")}
      {Lisp-Entry "jazz.condition-signal!" #f 120 12 120 34 ("condition-variable-signal!")}
      {Lisp-Entry "jazz.condition-broadcast!" #f 121 12 121 37 ("condition-variable-broadcast!")}}})
"time"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "performance" "time.scm"} 1226584790
    {Lisp-Entry "test.performance.time" #f 0 8 0 29 ("new-z" "f-vtable" "f-generic" "f-separate" "iterations" "new-x" "f-module" "time")
      {Lisp-Entry "iterations" #f 3 8 3 18 ("100000000")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "time.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.time" #f 37 8 37 30 ()
      {Lisp-Entry "jazz.current-systime" #f 40 8 40 28 ("current-time")}
      {Lisp-Entry "jazz.systime?" #f 41 8 41 21 ("time?")}
      {Lisp-Entry "jazz.systime->seconds" #f 42 8 42 29 ("time->seconds")}
      {Lisp-Entry "jazz.seconds->systime" #f 43 8 43 29 ("seconds->time")}
      {Lisp-Entry "jazz.process-times" #f 44 8 44 26 ("process-times")}
      {Lisp-Entry "jazz.cpu-time" #f 45 8 45 21 ("cpu-time")}
      {Lisp-Entry "jazz.real-time" #f 46 8 46 22 ("real-time")}}})
"type-table"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "type-table.scm"} 1226584783
    {Lisp-Entry "type-table" #f 0 8 0 18 ()}
    {Lisp-Entry "type-table-valid-options" #f 5 8 5 32 ()}
    {Lisp-Entry "add-type-options" #f 8 9 8 25 ("cons" "set!" "set-cdr!" "if" "list" "apply" "type-table" "assoc" "cotype" "let" "options" "type")}
    {Lisp-Entry "find-type-options" #f 17 9 17 26 ("type-table" "assoc" "cotype" "let" "type")}
    {Lisp-Entry "validate-type-options" #f 22 9 22 30 ("error" "else" "cddr" "validate-type-options" "type-table-valid-options" "car" "memq" "null?" "cond" "options")}
    {Lisp-Entry "type-type" #f 31 9 31 18 ("car" "options")}
    {Lisp-Entry "type-stype" #f 35 9 35 19 ("error" "or" "car" "stype:" "keyword-value" "stype" "let" "options")}
    {Lisp-Entry "type-stype*" #f 40 9 40 20 ("*" "'*" "symbol-append" "stype*:" "keyword-value" "type-type" "type" "let" "options")}
    {Lisp-Entry "type-stype+" #f 45 9 45 20 ("+" "'+" "symbol-append" "type-type" "type" "let" "options")}
    {Lisp-Entry "type-pure-ctype" #f 50 9 50 24 ("type-type" "symbol->string" "ctype:" "keyword-value" "options")}
    {Lisp-Entry "type-csizeof" #f 54 9 54 21 ("type-pure-ctype" "string-append" "options")}
    {Lisp-Entry "type-ctype" #f 58 9 58 19 ("string-append" "type-pure-ctype" "type-native?" "if" "options")}
    {Lisp-Entry "type-ctype*" #f 64 9 64 20 ("ctype*:" "keyword-value" "type-ctype" "string-append" "default" "let" "options")}
    {Lisp-Entry "type-ctype+" #f 69 9 69 20 ("ctype+:" "keyword-value" "type-ctype" "string-append" "default" "let" "options")}
    {Lisp-Entry "type-foreign?" #f 74 9 74 22 ("stype:" "keyword-value" "not" "options")}
    {Lisp-Entry "type-native?" #f 78 9 78 21 ("stype:" "keyword-value" "options")}
    {Lisp-Entry "type-generate-foreign?" #f 82 9 82 31 ("generate-foreign?:" "keyword-value" "options")}
    {Lisp-Entry "type-generate-pointer?" #f 86 9 86 31 ("generate-pointer?:" "keyword-value" "options")}
    {Lisp-Entry "type-generate-array?" #f 90 9 90 29 ("generate-array?:" "keyword-value" "options")}
    {Lisp-Entry "type-untyped?" #f 94 9 94 22 ("untyped?:" "keyword-value" "options")}
    {Lisp-Entry "type-pass-by" #f 98 9 98 21 ("pass-by:" "keyword-value" "options")}})
"typecase"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "typecase.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.typecase" #f 38 9 38 37 ("scheme")
      {Lisp-Entry "typecase" #f 51 9 51 17 (",value" ",variable" "is?" "or" "pair?" ",@body" "else" "'else" "eq?" "cdr" "body" "car" "desourcify" "value" "clause" "map" "cond" "variable" "lambda" "with-expression-value" "sourcify-if" "cddr" "clauses" "source-code" "cadr" "target" "let" "form-src")}}})
"typelib"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "typelib.jazz"} 1226584783})
"types"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "types.jazz"} 1227094443
    {Lisp-Entry "jazz.platform.types" #f 38 9 38 28 ("#<<c-declare-end\n           \ntypedef ___F64*  F64PTR;\n\n___SCMOBJ SCMOBJ_to_F64PTR (___SCMOBJ src, F64PTR *dst)\n{\n  ___SCMOBJ ___temp; // for F64VECTORP\n  ___SCMOBJ ___err = ___FIX(___NO_ERR);\n  if (!___F64VECTORP(src))\n    ___err = ___FIX(___UNKNOWN_ERR);\n  else\n    {\n     *dst = ___CAST(___F64*,___BODY_AS(src,___tSUBTYPED));\n    }\n  return ___err;\n}\n\n#define ___BEGIN_CFUN_SCMOBJ_to_F64PTR(src,dst,i) \\\nif ((___err = SCMOBJ_to_F64PTR (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_SCMOBJ_to_F64PTR(src,dst,i) }\n\n#define ___BEGIN_CFUN_F64PTR_to_SCMOBJ(src,dst) \\\nif ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_F64PTR_to_SCMOBJ(src,dst) }\n\n#define ___BEGIN_SFUN_F64PTR_to_SCMOBJ(src,dst,i) \\\nif ((___err = F64PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_SFUN_F64PTR_to_SCMOBJ(src,dst,i) }\n\n#define ___BEGIN_SFUN_SCMOBJ_to_F64PTR(src,dst) \\\n{ ___err = ___FIX(___UNKNOWN_ERR);\n#define ___END_SFUN_SCMOBJ_to_F64PTR(src,dst) }\n\nc-declare-end\n" "F64PTR-declare" "#<<c-declare-end\n           \ntypedef ___U32* U32PTR;\n\n___SCMOBJ SCMOBJ_to_U32PTR (___SCMOBJ src, U32PTR *dst)\n{\n  ___SCMOBJ ___temp; // for U32VECTORP\n  ___SCMOBJ ___err = ___FIX(___NO_ERR);\n  if (!___U32VECTORP(src))\n    ___err = ___FIX(___UNKNOWN_ERR);\n  else\n    {\n     *dst = ___CAST(___U32*,___BODY_AS(src,___tSUBTYPED));\n    }\n  return ___err;\n}\n\n#define ___BEGIN_CFUN_SCMOBJ_to_U32PTR(src,dst,i) \\\nif ((___err = SCMOBJ_to_U32PTR (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_SCMOBJ_to_U32PTR(src,dst,i) }\n\n#define ___BEGIN_CFUN_U32PTR_to_SCMOBJ(src,dst) \\\nif ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_U32PTR_to_SCMOBJ(src,dst) }\n\n#define ___BEGIN_SFUN_U32PTR_to_SCMOBJ(src,dst,i) \\\nif ((___err = U32PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_SFUN_U32PTR_to_SCMOBJ(src,dst,i) }\n\n#define ___BEGIN_SFUN_SCMOBJ_to_U32PTR(src,dst) \\\n{ ___err = ___FIX(___UNKNOWN_ERR);\n#define ___END_SFUN_SCMOBJ_to_U32PTR(src,dst) }\n\nc-declare-end\n" "U32PTR-declare" "#<<c-declare-end\n\ntypedef ___U16* U16PTR;\n\n___SCMOBJ SCMOBJ_to_U16PTR (___SCMOBJ src, U16PTR *dst)\n{\n  ___SCMOBJ ___temp; // for U16VECTORP\n  ___SCMOBJ ___err = ___FIX(___NO_ERR);\n  if (!___U16VECTORP(src))\n    ___err = ___FIX(___UNKNOWN_ERR);\n  else\n    {\n     *dst = ___CAST(___U16*,___BODY_AS(src,___tSUBTYPED));\n    }\n  return ___err;\n}\n\n#define ___BEGIN_CFUN_SCMOBJ_to_U16PTR(src,dst,i) \\\nif ((___err = SCMOBJ_to_U16PTR (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_SCMOBJ_to_U16PTR(src,dst,i) }\n\n#define ___BEGIN_CFUN_U16PTR_to_SCMOBJ(src,dst) \\\nif ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_U16PTR_to_SCMOBJ(src,dst) }\n\n#define ___BEGIN_SFUN_U16PTR_to_SCMOBJ(src,dst,i) \\\nif ((___err = U16PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_SFUN_U16PTR_to_SCMOBJ(src,dst,i) }\n\n#define ___BEGIN_SFUN_SCMOBJ_to_U16PTR(src,dst) \\\n{ ___err = ___FIX(___UNKNOWN_ERR);\n#define ___END_SFUN_SCMOBJ_to_U16PTR(src,dst) }\n\nc-declare-end\n" "U16PTR-declare" "#<<c-declare-end\n           \ntypedef ___U8*  U8PTR;\n\n___SCMOBJ SCMOBJ_to_U8PTR (___SCMOBJ src, U8PTR *dst)\n{\n  ___SCMOBJ ___temp; // for U8VECTORP\n  ___SCMOBJ ___err = ___FIX(___NO_ERR);\n  if (!___U8VECTORP(src))\n    ___err = ___FIX(___UNKNOWN_ERR);\n  else\n    {\n     *dst = ___CAST(___U8*,___BODY_AS(src,___tSUBTYPED));\n    }\n  return ___err;\n}\n\n#define ___BEGIN_CFUN_SCMOBJ_to_U8PTR(src,dst,i) \\\nif ((___err = SCMOBJ_to_U8PTR (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_SCMOBJ_to_U8PTR(src,dst,i) }\n\n#define ___BEGIN_CFUN_U8PTR_to_SCMOBJ(src,dst) \\\nif ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_U8PTR_to_SCMOBJ(src,dst) }\n\n#define ___BEGIN_SFUN_U8PTR_to_SCMOBJ(src,dst,i) \\\nif ((___err = U8PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_SFUN_U8PTR_to_SCMOBJ(src,dst,i) }\n\n#define ___BEGIN_SFUN_SCMOBJ_to_U8PTR(src,dst) \\\n{ ___err = ___FIX(___UNKNOWN_ERR);\n#define ___END_SFUN_SCMOBJ_to_U8PTR(src,dst) }\n\nc-declare-end\n" "U8PTR-declare" "else" "c-include" "mac" "cond-expand" "jazz")
      {Lisp-Entry "stack-depth" #f 42 12 42 23 ("int" "c-function")}
      {Lisp-Entry "pointer-size" #f 48 12 48 24 ("int" "c-function")}
      {Lisp-Entry "void" #f 214 8 214 12 ("void" "native")}
      {Lisp-Entry "void*" #f 215 8 215 13 ("void" "pointer")}
      {Lisp-Entry "char" #f 216 8 216 12 ("char" "native")}
      {Lisp-Entry "char*" #f 217 8 217 13 ("char" "pointer")}
      {Lisp-Entry "short" #f 218 8 218 13 ("short" "native")}
      {Lisp-Entry "short*" #f 219 8 219 14 ("short" "pointer")}
      {Lisp-Entry "int" #f 220 8 220 11 ("int" "native")}
      {Lisp-Entry "int*" #f 221 8 221 12 ("int" "pointer")}
      {Lisp-Entry "long" #f 222 8 222 12 ("long" "native")}
      {Lisp-Entry "long*" #f 223 8 223 13 ("long" "pointer")}
      {Lisp-Entry "float" #f 224 8 224 13 ("float" "native")}
      {Lisp-Entry "float*" #f 225 8 225 14 ("float" "pointer")}
      {Lisp-Entry "double" #f 226 8 226 14 ("double" "native")}
      {Lisp-Entry "double*" #f 227 8 227 15 ("double" "pointer")}
      {Lisp-Entry "byte" #f 228 8 228 12 ("unsigned-int8" "native")}
      {Lisp-Entry "byte*" #f 229 8 229 13 ("byte" "pointer")}
      {Lisp-Entry "uchar" #f 230 8 230 13 ("unsigned-char" "native")}
      {Lisp-Entry "ushort" #f 231 8 231 14 ("unsigned-short" "native")}
      {Lisp-Entry "uint" #f 232 8 232 12 ("unsigned-int" "native")}
      {Lisp-Entry "ulong" #f 233 8 233 13 ("unsigned-long" "native")}
      {Lisp-Entry "ulong*" #f 234 8 234 14 ("ulong" "pointer")}
      {Lisp-Entry "uint8" #f 235 8 235 13 ("unsigned-int8" "native")}
      {Lisp-Entry "uint8*" #f 236 8 236 14 ("uint8" "pointer")}
      {Lisp-Entry "uint8**" #f 237 8 237 15 ("uint8*" "pointer")}
      {Lisp-Entry "uint16" #f 238 8 238 14 ("unsigned-int16" "native")}
      {Lisp-Entry "uint16*" #f 239 8 239 15 ("uint16" "pointer")}
      {Lisp-Entry "uint32" #f 240 8 240 14 ("unsigned-int32" "native")}
      {Lisp-Entry "uint32*" #f 241 8 241 15 ("uint32" "pointer")}
      {Lisp-Entry "uint64" #f 242 8 242 14 ("unsigned-int64" "native")}
      {Lisp-Entry "UTF-8-string" #f 243 8 243 20 ("UTF-8-string" "native")}
      {Lisp-Entry "UTF-16-string" #f 244 8 244 21 ("UTF-16-string" "native")}
      {Lisp-Entry "char-string" #f 245 8 245 19 ("char-string" "native")}
      {Lisp-Entry "wchar_t-string" #f 246 8 246 22 ("wchar_t-string" "native")}
      {Lisp-Entry "Bool" #f 247 8 247 12 ("bool" "native")}
      {Lisp-Entry "scheme-object" #f 248 8 248 21 ("scheme-object" "native")}
      {Lisp-Entry "U8PTR" #f 251 8 251 13 ("U8PTR-declare")}
      {Lisp-Entry "U16PTR" #f 252 8 252 14 ("U16PTR-declare")}
      {Lisp-Entry "U32PTR" #f 253 8 253 14 ("U32PTR-declare")}
      {Lisp-Entry "F64PTR" #f 254 8 254 14 ("F64PTR-declare")}
      {Lisp-Entry "char-string->uint8*" #f 257 12 257 31 ("uint8*" "char-string" "c-function")}
      {Lisp-Entry "uint8*->char-string" #f 262 12 262 31 ("char-string" "uint8*" "c-function")}
      {Lisp-Entry "uint8*-alloc" #f 267 12 267 24 ("uint8*" "int" "c-function")}
      {Lisp-Entry "uint8*-free" #f 272 12 272 23 ("void" "uint8*" "c-function")}
      {Lisp-Entry "uint8*-set!" #f 277 12 277 23 ("void" "uint8" "int" "uint8*" "c-function")}
      {Lisp-Entry "u8vector->uint8*" #f 282 13 282 29 ("1" "+" "u8vector-ref" "uint8*-set!" "=" "if" "0" "i" "loop" "let" "uint8*-alloc" "pointer" "u8vector-length" "size" "let*" "vector")}
      {Lisp-Entry "uint8*->ulong*" #f 292 12 292 26 ("ulong*" "uint8*" "c-function")}
      {Lisp-Entry "uint8**-alloc" #f 297 12 297 25 ("uint8**" "int" "c-function")}
      {Lisp-Entry "uint8**-free" #f 302 12 302 24 ("void" "uint8**" "c-function")}
      {Lisp-Entry "uint8**-set!" #f 307 12 307 24 ("void" "uint8*" "int" "uint8**" "c-function")}
      {Lisp-Entry "uint8**-ref" #f 312 12 312 23 ("uint8*" "int" "uint8**" "c-function")}
      {Lisp-Entry "uint16*-alloc" #f 317 12 317 25 ("uint16*" "int" "c-function")}
      {Lisp-Entry "uint32*-alloc" #f 322 12 322 25 ("uint32*" "int" "c-function")}
      {Lisp-Entry "uint32*-set!" #f 327 12 327 24 ("void" "uint32" "int" "uint32*" "c-function")}
      {Lisp-Entry "u32vector->uint32*" #f 332 13 332 31 ("1" "+" "u32vector-ref" "uint32*-set!" "=" "if" "0" "i" "loop" "let" "uint32*-alloc" "pointer" "u32vector-length" "size" "let*" "vector")}
      {Lisp-Entry "uint32*->uint8*" #f 342 12 342 27 ("uint8*" "uint32*" "c-function")}
      {Lisp-Entry "void*->byte*" #f 347 12 347 24 ("byte*" "void*" "c-function")}
      {Lisp-Entry "byte*-ref" #f 352 12 352 21 ("byte" "int" "byte*" "c-function")}
      {Lisp-Entry "int*-alloc" #f 357 12 357 22 ("int*" "int" "c-function")}
      {Lisp-Entry "byte*-set!" #f 362 12 362 22 ("void" "byte" "int" "byte*" "c-function")}
      {Lisp-Entry "short*-ref" #f 367 12 367 22 ("short" "int" "short*" "c-function")}
      {Lisp-Entry "int*-ref" #f 372 12 372 20 ("int" "int*" "c-function")}
      {Lisp-Entry "long*-ref" #f 377 12 377 21 ("int" "long*" "c-function")}
      {Lisp-Entry "long*-set!" #f 382 12 382 22 ("void" "long" "int" "long*" "c-function")}
      {Lisp-Entry "double*-ref" #f 387 12 387 23 ("double" "int" "double*" "c-function")}
      {Lisp-Entry "int*-free" #f 392 12 392 21 ("void" "int*" "c-function")}
      {Lisp-Entry "double*-free" #f 397 12 397 24 ("void" "double*" "c-function")}
      {Lisp-Entry "ulong*-alloc" #f 402 12 402 24 ("ulong*" "int" "c-function")}
      {Lisp-Entry "ulong*-ref" #f 407 12 407 22 ("ulong" "int" "ulong*" "c-function")}
      {Lisp-Entry "ulong*-free" #f 412 12 412 23 ("void" "ulong*" "c-function")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "types.scm"} 1226584783})
"unspecified"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "unspecified.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.unspecified" #f 37 8 37 37 ()
      {Lisp-Entry "jazz.unspecified" #f 40 9 40 25 ("%%unspecified")}
      {Lisp-Entry "jazz.unspecified?" #f 44 9 44 26 ("%%unspecified?" "expr")}
      {Lisp-Entry "jazz.specified?" #f 48 9 48 24 ("%%unspecified?" "%%not" "expr")}}})
"untyped"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "windows" "comold" "untyped.scm"} 1226584783})
"update"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "debuggee" "update.jazz"} 1226584775
    {Lisp-Entry "jazz.debuggee.update" #f 37 9 37 29 ("update-debuggee-process" "jazz")}})
"v"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "test" "version" "v.scm"} 1226584774
    {Lisp-Entry "test.v" #f 0 9 0 15 ("test")}})
"v10"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "test" "version" "v10.scm"} 1226584774
    {Lisp-Entry "test.v10" #f 0 9 0 17 ("test")}})
"v11"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "test" "version" "v11.scm"} 1226584774
    {Lisp-Entry "test.v11" #f 0 9 0 17 ("test")}})
"variables"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "performance" "variables.scm"} 1226584790
    {Lisp-Entry "SEPARATE" #f 4 8 4 16 ("2")}
    {Lisp-Entry "inc-separate" #f 7 9 7 21 ("-" "1" "+" "SEPARATE" "set!" "begin" "0" ">" "if" "n" "iter" "let" "cnt")}
    {Lisp-Entry "BLOCK" #f 19 8 19 13 ("3")}
    {Lisp-Entry "inc-block" #f 22 9 22 18 ("-" "1" "+" "BLOCK" "set!" "begin" "0" ">" "if" "n" "iter" "let" "cnt")}})
"vb"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "performance" "vb.scm"} 1226584790
    {Lisp-Entry "VAR" #f 5 8 5 11 ("2")}
    {Lisp-Entry "inc" #f 8 9 8 12 ("##fixnum.-" "1" "##fixnum.+" "VAR" "set!" "begin" "0" "##fixnum.>" "if" "n" "iter" "let" "cnt")}})
"vector"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "core" "vector.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.core.vector" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.vector-copy" #f 45 8 45 24 ("vector-copy")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "base" "runtime" "vector.scm"} 1226584773
    {Lisp-Entry "core.base.runtime.vector" #f 37 8 37 32 ()
      {Lisp-Entry "jazz.vector-for-each" #f 40 9 40 29 ("1" "%%fx+" "%%vector-ref" "begin" "%%fx<" "if" "0" "n" "iter" "%%vector-length" "len" "let" "vector" "proc")}
      {Lisp-Entry "jazz.vector-memq?" #f 49 9 49 26 ("1" "%%fx+" "%%vector-ref" "%%eq?" "%%fx<" "if" "0" "n" "iter" "%%vector-length" "len" "let" "vector" "obj")}
      {Lisp-Entry "jazz.resize-vector" #f 59 9 59 27 ("%%vector-ref" "%%vector-set!" "0" ">=" "%%when" "1" "%%vector-length" "min" "-" "offset" "iter" "%%make-vector" "new-vector" "let" "size" "vector")}}})
"vs"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "test" "performance" "vs.scm"} 1226584790
    {Lisp-Entry "VAR" #f 4 8 4 11 ("2")}
    {Lisp-Entry "inc" #f 7 9 7 12 ("##fixnum.-" "1" "##fixnum.+" "VAR" "set!" "begin" "0" "##fixnum.>" "if" "n" "iter" "let" "cnt")}})
"walker"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "core" "library" "syntax" "walker.scm"} 1226584774
    {Lisp-Entry "core.library.syntax.walker" #f 61 8 61 34 ("jazz.new-core-dialect" "core" "'core" "jazz.register-dialect" "jazz.Core-Walker" "jazz.Core-Dialect" "jazz.Walker" "jazz.Time-Special" "jazz.Parameterize" "jazz.C-Function" "jazz.C-Initialize" "jazz.C-Named-Declare-Declaration" "jazz.C-Declare" "jazz.C-Include" "jazz.Declare" "jazz.Or" "jazz.And" "jazz.Case" "jazz.Cond" "jazz.If" "jazz.dialect.kernel.not-null?" "'jazz.dialect.kernel.not-null?" "jazz.not-type-tests" "jazz.dialect.kernel.unspecified?" "'jazz.dialect.kernel.unspecified?" "jazz.dialect.kernel.values?" "'jazz.dialect.kernel.values?" "jazz.dialect.kernel.foreign?" "'jazz.dialect.kernel.foreign?" "jazz.dialect.kernel.thread?" "'jazz.dialect.kernel.thread?" "jazz.dialect.kernel.table?" "'jazz.dialect.kernel.table?" "jazz.Method" "jazz.dialect.kernel.method?" "'jazz.dialect.kernel.method?" "jazz.Slot" "jazz.dialect.kernel.slot?" "'jazz.dialect.kernel.slot?" "jazz.Field" "jazz.dialect.kernel.field?" "'jazz.dialect.kernel.field?" "jazz.Interface" "jazz.dialect.kernel.interface?" "'jazz.dialect.kernel.interface?" "jazz.Class" "jazz.dialect.kernel.class?" "'jazz.dialect.kernel.class?" "jazz.Category" "jazz.dialect.kernel.category?" "'jazz.dialect.kernel.category?" "jazz.dialect.kernel.object?" "'jazz.dialect.kernel.object?" "jazz.dialect.kernel.keyword?" "'jazz.dialect.kernel.keyword?" "jazz.dialect.kernel.flonum?" "'jazz.dialect.kernel.flonum?" "jazz.dialect.kernel.fixnum?" "'jazz.dialect.kernel.fixnum?" "scheme.dialect.kernel.eof-object?" "'scheme.dialect.kernel.eof-object?" "scheme.dialect.kernel.output-port?" "'scheme.dialect.kernel.output-port?" "scheme.dialect.kernel.input-port?" "'scheme.dialect.kernel.input-port?" "scheme.dialect.kernel.procedure?" "'scheme.dialect.kernel.procedure?" "jazz.dialect.kernel.continuation?" "'jazz.dialect.kernel.continuation?" "jazz.dialect.kernel.u8vector?" "'jazz.dialect.kernel.u8vector?" "scheme.dialect.kernel.vector?" "'scheme.dialect.kernel.vector?" "scheme.dialect.kernel.string?" "'scheme.dialect.kernel.string?" "scheme.dialect.kernel.char?" "'scheme.dialect.kernel.char?" "scheme.dialect.kernel.symbol?" "'scheme.dialect.kernel.symbol?" "scheme.dialect.kernel.pair?" "'scheme.dialect.kernel.pair?" "scheme.dialect.kernel.null?" "'scheme.dialect.kernel.null?" "scheme.dialect.kernel.list?" "'scheme.dialect.kernel.list?" "scheme.dialect.kernel.boolean?" "'scheme.dialect.kernel.boolean?" "scheme.dialect.kernel.integer?" "'scheme.dialect.kernel.integer?" "scheme.dialect.kernel.rational?" "'scheme.dialect.kernel.rational?" "scheme.dialect.kernel.real?" "'scheme.dialect.kernel.real?" "scheme.dialect.kernel.complex?" "'scheme.dialect.kernel.complex?" "scheme.dialect.kernel.number?" "'scheme.dialect.kernel.number?" "jazz.type-tests" "##string-set!" "##vector-set!" "jazz.dialect.language.set-element!" "'jazz.dialect.language.set-element!" "##string-ref" "##vector-ref" "list-ref" "jazz.dialect.language.element" "'jazz.dialect.language.element" "##string-length" "##vector-length" "##length" "jazz.dialect.language.length" "'jazz.dialect.language.length" "##cdr" "scheme.dialect.kernel.cdr" "'scheme.dialect.kernel.cdr" "##car" "scheme.dialect.kernel.car" "'scheme.dialect.kernel.car" "##eqv?" "scheme.dialect.kernel.eqv?" "'scheme.dialect.kernel.eqv?" "##eq?" "scheme.dialect.kernel.eq?" "'scheme.dialect.kernel.eq?" "##not" "scheme.dialect.kernel.not" "'scheme.dialect.kernel.not" "##flonum->fixnum" "jazz.dialect.kernel.flonum->fixnum" "'jazz.dialect.kernel.flonum->fixnum" "##fixnum->flonum" "jazz.dialect.kernel.fixnum->flonum" "'jazz.dialect.kernel.fixnum->flonum" "jazz.dialect.kernel.fl/" "'jazz.dialect.kernel.fl/" "jazz.dialect.kernel.fl*" "'jazz.dialect.kernel.fl*" "jazz.dialect.kernel.fl-" "'jazz.dialect.kernel.fl-" "jazz.dialect.kernel.fl+" "'jazz.dialect.kernel.fl+" "jazz.dialect.kernel.fx*" "'jazz.dialect.kernel.fx*" "jazz.dialect.kernel.fx-" "'jazz.dialect.kernel.fx-" "jazz.dialect.kernel.fx+" "'jazz.dialect.kernel.fx+" "##flround" "scheme.dialect.kernel.round" "'scheme.dialect.kernel.round" "##fltruncate" "scheme.dialect.kernel.truncate" "'scheme.dialect.kernel.truncate" "##flceiling" "scheme.dialect.kernel.ceiling" "'scheme.dialect.kernel.ceiling" "##flfloor" "scheme.dialect.kernel.floor" "'scheme.dialect.kernel.floor" "##fxquotient" "scheme.dialect.kernel.quotient" "'scheme.dialect.kernel.quotient" "##/" "##fl/" "scheme.dialect.kernel./" "'scheme.dialect.kernel./" "##*" "##fl*" "##fx*" "scheme.dialect.kernel.*" "'scheme.dialect.kernel.*" "##-" "##fl-" "##fx-" "scheme.dialect.kernel.-" "'scheme.dialect.kernel.-" "##+" "##fl+" "##fx+" "scheme.dialect.kernel.+" "'scheme.dialect.kernel.+" "##fl>=" "##fx>=" "scheme.dialect.kernel.>=" "'scheme.dialect.kernel.>=" "##fl>" "##fx>" "scheme.dialect.kernel.>" "'scheme.dialect.kernel.>" "##fl<=" "##fx<=" "scheme.dialect.kernel.<=" "'scheme.dialect.kernel.<=" "##fl<" "##fx<" "scheme.dialect.kernel.<" "'scheme.dialect.kernel.<" "##=" "##fl=" "##fx=" "scheme.dialect.kernel.=" "'scheme.dialect.kernel.=" "jazz.add-primitive-patterns" "declaration" "arguments" "operator" "jazz.emit-primitive-new-call" "environment" "arguments-codes" "locator" "jazz.emit-specialized-locator" "jazz.Call" "jazz.Do" "jazz.Begin" "jazz.Internal-Define" "jazz.Body" "jazz.Receive" "jazz.Letrec" "jazz.Letstar" "jazz.Named-Let" "jazz.Let" "jazz.Lambda" "jazz.Assignment" "jazz.Reference" "jazz.Quasiquote" "jazz.Delay" "jazz.Constant" "jazz.Proclaim" "jazz.Expression" "jazz.Code" "jazz.Annotated-Frame" "jazz.Restricted-Binding" "jazz.Annotated-Variable" "jazz.Syntax-Form" "jazz.Macro-Form" "jazz.Special-Form" "jazz.Form-Binding" "jazz.Macro-Symbol" "jazz.Self-Binding" "jazz.Rest-Parameter" "jazz.Named-Parameter" "jazz.Optional-Parameter" "jazz.Dynamic-Parameter" "jazz.Parameter" "jazz.NextMethod-Variable" "jazz.Variable" "jazz.Symbol-Binding" "jazz.Signature" "jazz.Walk-Frame" "jazz.Unresolved-Error" "jazz.Walk-Error" "jazz.Walk-Warning" "jazz.Walk-Problems" "jazz.Walk-Problem" "jazz.Walk-Location" "jazz.Walk-Context" "jazz.C-Definition-Declaration" "jazz.C-Type-Declaration" "jazz.Syntax-Declaration" "jazz.Macro-Declaration" "Unspecified" "'Unspecified" "EOF" "'EOF" "Values" "'Values" "Foreign" "'Foreign" "Promise" "'Promise" "Thread" "'Thread" "Table" "'Table" "U8Vector" "'U8Vector" "Vector" "'Vector" "Keyword" "'Keyword" "Symbol" "'Symbol" "String" "'String" "Procedure" "'Procedure" "Continuation" "'Continuation" "Port" "'Port" "Pair" "'Pair" "Null" "'Null" "List" "'List" "Flonum" "'Flonum" "Fixnum" "'Fixnum" "Integer" "'Integer" "Rational" "'Rational" "Real" "'Real" "Complex" "'Complex" "Number" "'Number" "Char" "'Char" "Boolean" "'Boolean" "Object" "'Object" "jazz.primitive-declarations" "void" "'void" "jazz.Unspecified" "unspecified" "'unspecified" "jazz.EOF" "eof" "'eof" "jazz.Values" "values" "'values" "jazz.Foreign" "foreign" "'foreign" "jazz.Promise" "promise" "'promise" "jazz.Thread" "thread" "'thread" "jazz.Table" "table" "'table" "jazz.U8Vector" "u8vector" "'u8vector" "jazz.Vector" "vector" "'vector" "jazz.Keyword" "keyword" "'keyword" "jazz.Symbol" "symbol" "'symbol" "jazz.String" "string" "'string" "jazz.Procedure" "procedure" "'procedure" "jazz.Continuation" "continuation" "'continuation" "jazz.Port" "port" "'port" "jazz.Pair" "pair" "'pair" "jazz.Null" "null" "'null" "jazz.List" "list" "'list" "jazz.Flonum" "fl" "'fl" "jazz.Fixnum" "fx" "'fx" "jazz.Integer" "int" "'int" "jazz.Rational" "rational" "'rational" "jazz.Real" "real" "'real" "jazz.Complex" "complex" "'complex" "jazz.Number" "number" "'number" "jazz.Char" "char" "'char" "jazz.Boolean" "bool" "'bool" "jazz.Object" "object" "'object" "any" "'any" "jazz.primitive-types" "%%table-set!" "jazz.Any" "jazz.Any-Class" "type" "lambda" "jazz.object-declaration?" "set!" "jazz.Nillable-Type" "jazz.Template-Type" "jazz.Union-Type" "jazz.Complement-Type" "jazz.Restriction-Type" "jazz.Values-Type" "jazz.Category-Type" "jazz.Function-Type" "jazz.Rest-Type" "jazz.Key-Type" "jazz.Opt-Type" "jazz.Void" "jazz.Void-Class" "jazz.Autoload-Declaration" "jazz.Export-Declaration" "jazz.Import-Invoice" "jazz.Export-Invoice" "jazz.Library-Invoice" "jazz.Library-Declaration" "jazz.Namespace-Declaration" "jazz.Module-Declaration" "jazz.Autoload-Reference" "jazz.Export-Reference" "jazz.Library-Reference" "jazz.Declaration-Reference" "jazz.Declaration" "jazz.Lexical-Binding" "jazz.Walk-Binding" "jazz.encapsulate-class")
      {Lisp-Entry "jazz.private-access" #f 70 8 70 27 ("0")}
      {Lisp-Entry "jazz.public-access" #f 74 8 74 26 ("1")}
      {Lisp-Entry "jazz.protected-access" #f 78 8 78 29 ("2")}
      {Lisp-Entry "jazz.make-access-lookups" #f 82 9 82 33 ("eq?" "test:" "%%make-table" "%%vector-set!" "begin" "%%fx<=" "if" "0" "n" "iter" "1" "%%fx+" "%%make-vector" "lookups" "let" "access-level")}
      {Lisp-Entry "jazz.Walk-Binding" #f 97 27 97 44 ()}
      {Lisp-Entry "jazz.emit-type" ("jazz.Walk-Binding") 100 21 100 35 ("type" "jazz.emit-binding-reference" "jazz.sourcified-form" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Binding") 104 30 104 54 ("symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Walk-Binding") 105 30 105 58 ()}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Walk-Binding") 106 30 106 57 ("environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Walk-Binding") 107 30 107 61 ("arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Walk-Binding") 108 30 108 52 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Walk-Binding") 109 30 109 60 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Walk-Binding") 110 30 110 67 ("source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Walk-Binding") 111 30 111 59 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Walk-Binding") 112 30 112 58 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Walk-Binding") 113 30 113 57 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" ("jazz.Walk-Binding") 114 30 114 57 ("form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Walk-Binding") 115 30 115 59 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Walk-Binding") 116 30 116 59 ("form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Binding") 119 21 119 45 ("symbol")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Walk-Binding") 123 21 123 49 ("jazz.unspecified")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Walk-Binding") 127 21 127 48 ("binding" "jazz.error" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Walk-Binding") 131 21 131 52 ("jazz.unspecified" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.Walk-Binding") 135 21 135 43 ("jazz.call-return-type" "jazz.codes-forms" "jazz.emit-binding-reference" "jazz.sourcified-form" "jazz.new-code" "binding" "%%get-lexical-binding-type" "type" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.emit-inlined-binding-call" ("jazz.Walk-Binding") 144 21 144 51 ("environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.walk-binding-validate-assignment" ("jazz.Walk-Binding") 148 21 148 58 ("jazz.walk-error" "binding" "jazz.walk-binding-assignable?" "%%not" "%%when" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Walk-Binding") 153 21 153 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Walk-Binding") 157 21 157 49 ("jazz.unspecified" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Walk-Binding") 161 21 161 48 ()}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Walk-Binding") 165 21 165 50 ()}
      {Lisp-Entry "jazz.Lexical-Binding" #f 177 27 177 47 ()}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Lexical-Binding") 180 21 180 45 ("binding" "%%get-lexical-binding-name" "%%eq?" "if" "symbol")}
      {Lisp-Entry "jazz.Declaration" #f 194 27 194 43 ()}
      {Lisp-Entry "jazz.setup-declaration" #f 197 9 197 31 ("%%get-declaration-toplevel" "%%set-declaration-toplevel" "%%get-declaration-locator" "%%compose-name" "%%not" "if" "%%set-declaration-locator" "%%get-lexical-binding-name" "name" "%%get-declaration-parent" "parent" "let" "new-declaration")}
      {Lisp-Entry "jazz.resolve-declaration" ("jazz.Declaration") 204 30 204 54 ()}
      {Lisp-Entry "jazz.resolve-declaration" ("jazz.Declaration") 207 21 207 45 ("declaration")}
      {Lisp-Entry "jazz.get-declaration-path" #f 211 9 211 34 ("jazz.reverse!" "%%cons" "%%list" "%%not" "if" "%%get-declaration-parent" "parent" "%%get-lexical-binding-name" "name" "let" "lambda" "proc" "letrec" "declaration")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Declaration") 222 21 222 45 ("binding" "jazz.lookup-declaration" "symbol")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Declaration") 226 21 226 52 ("declaration" "%%get-declaration-locator" "jazz.walk-error" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Declaration") 230 30 230 53 ("external?" "symbol")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Declaration") 233 21 233 44 ("external?" "symbol")}
      {Lisp-Entry "jazz.update-declaration" ("jazz.Declaration") 237 30 237 53 ("new-declaration")}
      {Lisp-Entry "jazz.update-declaration" ("jazz.Declaration") 240 21 240 44 ("new-declaration")}
      {Lisp-Entry "jazz.get-declaration-references" ("jazz.Declaration") 244 30 244 61 ()}
      {Lisp-Entry "jazz.get-declaration-references" ("jazz.Declaration") 247 21 247 52 ()}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Declaration") 251 30 251 51 ("environment")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Declaration") 254 21 254 42 ("declaration" "jazz.error" "environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.Declaration") 258 30 258 64 ()}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.Declaration") 261 21 261 55 ()}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Declaration") 265 30 265 51 ("s" "k" "f")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Declaration") 268 21 268 42 ("declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Declaration-Reference" #f 280 27 280 53 ()}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Declaration-Reference") 283 30 283 52 ("library-declaration")}
      {Lisp-Entry "jazz.Library-Reference" #f 294 27 294 49 ()}
      {Lisp-Entry "jazz.new-library-reference" #f 297 9 297 35 ("jazz.Library-Reference" "jazz.allocate-library-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Library-Reference") 301 21 301 43 ("%%set-declaration-reference-declaration" "%%get-declaration-reference-name" "jazz.locate-library-declaration" "declaration" "let" "declaration-reference" "%%get-declaration-reference-declaration" "or" "library-declaration")}
      {Lisp-Entry "jazz.Export-Reference" #f 316 27 316 48 ()}
      {Lisp-Entry "jazz.new-export-reference" #f 319 9 319 34 ("jazz.Export-Reference" "jazz.allocate-export-reference" "library-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-reference" ("jazz.Declaration-Reference") 323 21 323 43 ("%%set-declaration-reference-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.new-export-declaration" "declaration" "let" "%%get-declaration-reference-name" "jazz.parse-exported-symbol" "symbol" "name" "receive" "declaration-reference" "%%get-declaration-reference-declaration" "or" "library-declaration")}
      {Lisp-Entry "jazz.parse-exported-symbol" #f 331 9 331 35 ("jazz.identifier-name" "values" "jazz.composite-name?" "if" "name" "library-declaration")}
      {Lisp-Entry "jazz.Autoload-Reference" #f 345 27 345 50 ()}
      {Lisp-Entry "jazz.new-autoload-reference" #f 348 9 348 36 ("jazz.Autoload-Reference" "jazz.allocate-autoload-reference" "library-reference" "declaration" "name")}
      {Lisp-Entry "jazz.resolve-autoload-reference" #f 352 9 352 40 ("%%set-declaration-reference-declaration" "%%assert" "jazz.new-autoload-declaration" "declaration" "jazz.Any" "type" "%%get-declaration-reference-name" "name" "let*" "%%get-declaration-reference-declaration" "or" "exported-library-reference" "library-declaration" "declaration-reference")}
      {Lisp-Entry "jazz.Module-Declaration" #f 370 27 370 50 ()}
      {Lisp-Entry "jazz.new-module-declaration" #f 373 9 373 36 ("jazz.setup-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.Module-Declaration" "jazz.allocate-module-declaration" "new-declaration" "let" "requires" "parent" "name")}
      {Lisp-Entry "jazz.Namespace-Declaration" #f 387 27 387 53 ()}
      {Lisp-Entry "jazz.find-declaration" #f 390 9 390 30 ("jazz.private-access" "%%get-access-lookup" "%%table-ref" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.Library-Declaration" #f 402 27 402 51 ()}
      {Lisp-Entry "jazz.new-library-declaration" #f 405 9 405 37 ("jazz.setup-declaration" "jazz.new-queue" "eq?" "test:" "%%make-table" "jazz.public-access" "jazz.make-access-lookups" "uptodate" "'uptodate" "public" "'public" "jazz.Library-Declaration" "jazz.allocate-library-declaration" "new-declaration" "let" "imports" "exports" "requires" "dialect-invoice" "dialect-name" "parent" "name")}
      {Lisp-Entry "jazz.setup-library-lookups" #f 411 9 411 35 ("%%get-library-declaration-exports" "jazz.add-library-export" "exported-library-invoice" "%%get-library-declaration-imports" "imported-library-invoice" "lambda" "for-each" "jazz.add-library-import" "%%when" "%%get-library-declaration-dialect-invoice" "dialect-invoice" "let" "library-declaration")}
      {Lisp-Entry "jazz.add-library-import" #f 423 9 423 32 ("jazz.table-merge-without-conflicts!" "jazz.public-access" "imported" "%%get-library-invoice-library" "imported-library-declaration" "if" "%%get-library-invoice-only" "only" "jazz.private-access" "%%get-access-lookup" "private" "let" "imported-library-invoice" "library-declaration")}
      {Lisp-Entry "jazz.add-library-export" #f 434 9 434 32 ("jazz.table-merge-without-conflicts!" "jazz.resolve-reference" "exported-library-declaration" "else" "jazz.resolve-autoload-reference" "%%get-library-invoice-library" "exported-library-reference" "%%table-set!" "%%get-declaration-reference-name" "jazz.identifier-name" "name" "declaration-reference" "lambda" "for-each" "cond" "%%get-export-invoice-autoload" "autoload" "%%get-library-invoice-only" "only" "jazz.public-access" "%%get-access-lookup" "public" "let" "exported-library-invoice" "library-declaration")}
      {Lisp-Entry "jazz.table-merge-without-conflicts!" #f 454 9 454 44 ("%%cddr" "%%cadr" "%%get-declaration-locator" "%%car" "%%list" "conflict" "lambda" "map" "%%get-lexical-binding-name" "jazz.error" "%%null?" "jazz.find-actual-conflicts" "conflicts" "%%fx+" "%%fx=" "%%not" "%%when" "%%table-merge!" "add-count" "%%table-length" "table-count" "let" "add" "table" "suffix" "library-declaration")}
      {Lisp-Entry "jazz.find-actual-conflicts" #f 473 9 473 35 ("%%list" "%%cons" "set!" "%%neq?" "%%when" "%%table-ref" "actual" "value" "key" "lambda" "%%iterate-table" "lst" "let" "add" "table")}
      {Lisp-Entry "jazz.lookup-declaration" ("jazz.Library-Declaration") 483 21 483 44 ("declaration" "%%get-access-lookup" "%%table-ref" "jazz.private-access" "jazz.public-access" "if" "access" "let" "external?" "symbol")}
      {Lisp-Entry "jazz.update-declaration" ("jazz.Library-Declaration") 490 21 490 44 ("jazz.add-library-export" "%%list" "%%append" "%%set-library-declaration-exports" "new-exported-library" "%%get-library-declaration-exports" "actual-exports" "jazz.add-library-import" "%%cons" "%%set-library-declaration-imports" "begin" "if" "%%eq?" "invoice" "jazz.find-if" "actual-invoice" "%%get-library-invoice-library" "new-imported-library" "new-invoice" "lambda" "for-each" "declaration" "%%get-library-declaration-imports" "actual-imports" "let" "new-declaration")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Library-Declaration") 517 21 517 42 (",@body-expansion" ",@variables-expansion" ",@literals-expansion" ",@autoloads-expansion" ",@references-expansion" "%%vector" "__dispatchers" "%%interface-dispatch" "interface-rank" "__interface-dispatch" "%%class-dispatch" "implementation-rank" "class-level" "__class-dispatch" "%%get-method-implementation" "%%final-dispatch" "jazz.dispatch-error" "%%category-is?" "%%debug-assertion" "type" "ignore" "field" "object" "__final-dispatch" "define" "compile" "jazz.queue-list" "%%get-library-declaration-imports" "%%get-library-declaration-exports" "%%get-lexical-binding-name" "syntax" "'syntax" "and" "%%get-library-invoice-phase" "jazz.resolve-reference" "library-declaration" ",symbol-name" ",name" "',name" "jazz.register-autoload" "jazz.compose-name" "symbol-name" "jazz.identifier-name" "name" "decl" "%%get-library-invoice-library" "%%get-declaration-reference-name" "cond" "%%get-export-invoice-autoload" "autoload" "%%get-library-invoice-only" "only" "library-invoice" "%%get-library-declaration-requires" ",module-name" "',module-name" "phase" "feature-requirement" "module-name" "jazz.parse-require" "spec" "lambda" "for-each" ",dialect-name" "',dialect-name" "core" "'core" "%%neq?" "%%when" "%%get-library-declaration-dialect-name" "dialect-name" "core.library" "'core.library" "jazz.load-module" "jazz.enqueue" "jazz.new-queue" "queue" "library" "'library" "jazz.declares" "else" "eval" "jazz.walk-for" "case" "begin" "jazz.expand-library-autoloads" "autoloads-expansion" "jazz.expand-library-variables" "variables-expansion" "jazz.expand-library-literals" "literals-expansion" "jazz.expand-library-references" "references-expansion" "declaration" "%%get-namespace-declaration-body" "jazz.emit-namespace-statements" "body-expansion" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Library-Declaration") 587 21 587 42 ("%%get-namespace-declaration-body" "jazz.fold-statements" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.get-library-proclaim" #f 591 9 591 34 ("%%get-library-declaration-proclaims" "%%table-ref" "default" "proclaim-name" "library-declaration")}
      {Lisp-Entry "jazz.set-library-proclaim" #f 595 9 595 34 ("%%get-library-declaration-proclaims" "%%table-set!" "value" "proclaim-name" "library-declaration")}
      {Lisp-Entry "jazz.all-warnings" #f 599 8 599 25 ()}
      {Lisp-Entry "jazz.proclaim" #f 603 9 603 22 ("jazz.remove!" "else" "%%cons" "jazz.set-library-proclaim" "'warn" "jazz.get-library-proclaim" "library-warnings" "jazz.error" "%%memq" "%%not" "cond" "warning" "lambda" "for-each" "jazz.all-warnings" "%%null?" "if" "warnings" "let" "warn" "case" "parse-clause" "parameters" "kind" "not?" "receive" "clause" "library-declaration")
        {Lisp-Entry "parse-not" #f 604 11 604 20 ("values" "%%cdr" "parameters" "%%car" "kind" "let" "%%pair?" "%%assert" "clause" "not?")}
        {Lisp-Entry "parse-clause" #f 610 11 610 23 ("%%cdr" "parse-not" "not" "'not" "%%car" "%%eq?" "if" "%%pair?" "%%assert" "clause")}}
      {Lisp-Entry "jazz.get-library-warn?" #f 636 9 636 31 ("warn" "'warn" "jazz.get-library-proclaim" "%%memq" "warning-name" "library-declaration")}
      {Lisp-Entry "jazz.Library-Invoice" #f 648 27 648 47 ()}
      {Lisp-Entry "jazz.Export-Invoice" #f 659 27 659 46 ()}
      {Lisp-Entry "jazz.new-export-invoice" #f 662 9 662 32 ("jazz.Export-Invoice" "jazz.allocate-export-invoice" "autoload" "only" "version" "phase" "library")}
      {Lisp-Entry "jazz.Import-Invoice" #f 674 27 674 46 ()}
      {Lisp-Entry "jazz.new-import-invoice" #f 677 9 677 32 ("jazz.Import-Invoice" "jazz.allocate-import-invoice" "only" "version" "phase" "library")}
      {Lisp-Entry "jazz.Export-Declaration" #f 689 27 689 50 ()}
      {Lisp-Entry "jazz.new-export-declaration" #f 692 9 692 36 ("jazz.setup-declaration" "jazz.Export-Declaration" "jazz.allocate-export-declaration" "new-declaration" "let" "symbol" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.Export-Declaration") 698 21 698 52 ("jazz.unspecified" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Export-Declaration") 702 21 702 42 ("environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Export-Declaration") 706 21 706 48 ("jazz.Any" "declaration" "%%get-export-declaration-symbol" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Autoload-Declaration" #f 721 27 721 52 ()}
      {Lisp-Entry "jazz.new-autoload-declaration" #f 724 9 724 38 ("jazz.setup-declaration" "uptodate" "'uptodate" "public" "'public" "jazz.Autoload-Declaration" "jazz.allocate-autoload-declaration" "new-declaration" "let" "exported-library" "library-declaration" "parent" "type" "name")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Autoload-Declaration") 730 21 730 37 ("declaration" "jazz.resolve-declaration" "jazz.of-subtype?" "subtype")}
      {Lisp-Entry "jazz.resolve-declaration" ("jazz.Autoload-Declaration") 735 21 735 45 ("jazz.error" "%%assertion" "%%set-autoload-declaration-declaration" "jazz.lookup-declaration" "decl" "%%get-lexical-binding-name" "name" "%%get-autoload-declaration-library" "%%get-autoload-declaration-exported-library" "jazz.resolve-reference" "exported-library" "let*" "declaration" "%%get-autoload-declaration-declaration" "or")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Autoload-Declaration") 745 21 745 48 ("jazz.autoload-locator" "jazz.new-code" "declaration" "jazz.resolve-declaration" "referenced-declaration" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.autoload-locator" #f 753 9 753 30 ("%%get-declaration-locator" "%%symbol->string" "%%string-append" "%%string->symbol" "referenced-declaration")}
      {Lisp-Entry "jazz.Void-Class" #f 766 27 766 42 ()}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Void-Class") 769 21 769 37 ("subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Void-Class") 773 21 773 40 ("'void")}
      {Lisp-Entry "jazz.Void" #f 780 27 780 36 ()}
      {Lisp-Entry "jazz.Opt-Type" #f 791 27 791 40 ()}
      {Lisp-Entry "jazz.new-opt-type" #f 794 9 794 26 ("jazz.Opt-Type" "jazz.allocate-opt-type" "type")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Opt-Type") 798 21 798 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-opt-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.Key-Type" #f 811 27 811 40 ()}
      {Lisp-Entry "jazz.new-key-type" #f 814 9 814 26 ("jazz.Key-Type" "jazz.allocate-key-type" "type" "key")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Key-Type") 818 21 818 40 ("%%symbol->string" "%%keyword->string" "%%string-append" "%%string->symbol" "%%get-key-type-type" "jazz.emit-specifier" "type-specifier" "type" "%%get-key-type-key" "key" "let")}
      {Lisp-Entry "jazz.Rest-Type" #f 832 27 832 41 ()}
      {Lisp-Entry "jazz.new-rest-type" #f 835 9 835 27 ("jazz.Rest-Type" "jazz.allocate-rest-type" "type")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Rest-Type") 839 21 839 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-rest-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.Function-Type" #f 855 27 855 45 ()}
      {Lisp-Entry "jazz.new-function-type" #f 858 9 858 31 ("jazz.Function-Type" "jazz.allocate-function-type" "%%length" "mandatory" "let" "result" "rest" "named" "optional" "positional")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Function-Type") 863 21 863 37 ("jazz.Function-Type" "%%get-object-class" "%%eq?" "jazz.Procedure" "jazz.of-subtype?" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Function-Type") 868 21 868 40 ("get-output-string" "%%string->symbol" "%%get-function-type-result" "%%not" "%%when" "%%get-function-type-rest" "rest" "%%get-function-type-positional" "jazz.emit-specifier" "display" "write-char" "set!" "if" "type" "lambda" "for-each" "first?" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Function-Type") 887 21 887 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Category-Type" #f 903 27 903 45 ()}
      {Lisp-Entry "jazz.new-category-type" #f 906 9 906 31 ("jazz.Category-Type" "jazz.allocate-category-type" "declaration")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Category-Type") 911 21 911 37 ("subtype")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Category-Type") 915 21 915 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Category-Type") 919 21 919 40 ("get-output-string" "%%string->symbol" "type" "%%get-category-type-declaration" "jazz.emit-specifier" "write-char" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Values-Type" #f 936 27 936 43 ()}
      {Lisp-Entry "jazz.new-values-type" #f 939 9 939 29 ("jazz.Values-Type" "jazz.allocate-values-type" "types")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Values-Type") 943 21 943 40 ("get-output-string" "%%string->symbol" "%%get-values-type-types" "jazz.emit-specifier" "set!" "if" "type" "lambda" "for-each" "first?" "write-char" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Restriction-Type" #f 966 27 966 48 ()}
      {Lisp-Entry "jazz.new-restriction-type" #f 969 9 969 34 ("jazz.Restriction-Type" "jazz.allocate-restriction-type" "type" "base")}
      {Lisp-Entry "jazz.Complement-Type" #f 981 27 981 47 ()}
      {Lisp-Entry "jazz.new-complement-type" #f 984 9 984 33 ("jazz.Complement-Type" "jazz.allocate-complement-type" "type")}
      {Lisp-Entry "jazz.Union-Type" #f 996 27 996 42 ()}
      {Lisp-Entry "jazz.new-union-type" #f 999 9 999 28 ("jazz.Union-Type" "jazz.allocate-union-type" "types")}
      {Lisp-Entry "jazz.Template-Type" #f 1014 27 1014 45 ()}
      {Lisp-Entry "jazz.new-template-type" #f 1017 9 1017 31 ("jazz.Template-Type" "jazz.allocate-template-type" "types" "class")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Template-Type") 1021 21 1021 40 ("get-output-string" "%%string->symbol" "%%get-template-type-types" "set!" "if" "lambda" "for-each" "first?" "write-char" "type" "%%get-template-type-class" "jazz.emit-specifier" "display" "open-output-string" "output" "let")}
      {Lisp-Entry "jazz.Nillable-Type" #f 1044 27 1044 45 ()}
      {Lisp-Entry "jazz.new-nillable-type" #f 1047 9 1047 31 ("jazz.Nillable-Type" "jazz.allocate-nillable-type" "type")}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Nillable-Type") 1051 21 1051 37 ("type" "%%get-nillable-type-type" "jazz.Boolean" "jazz.of-subtype?" "or" "subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Nillable-Type") 1056 21 1056 40 ("%%symbol->string" "%%string-append" "%%string->symbol" "type" "%%get-nillable-type-type" "jazz.emit-specifier" "type-specifier" "let")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Nillable-Type") 1061 21 1061 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.object-declaration?" #f 1074 8 1074 32 ()}
      {Lisp-Entry "jazz.Any-Class" #f 1086 27 1086 41 ()}
      {Lisp-Entry "jazz.of-subtype?" ("jazz.Any-Class") 1089 21 1089 37 ("subtype")}
      {Lisp-Entry "jazz.emit-specifier" ("jazz.Any-Class") 1093 21 1093 40 ("'any")}
      {Lisp-Entry "jazz.emit-check" ("jazz.Any-Class") 1097 21 1097 36 ("environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.Any" #f 1104 27 1104 35 ()}
      {Lisp-Entry "jazz.emit-type-cast" #f 1121 13 1121 32 ("%%fixnum->flonum" "%%fixnum?" ",value" "jazz.Flonum" "%%eq?" "jazz.generate-symbol" "value" "let" "jazz.sourcified-form" "%%get-code-type" "%%subtype?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-type-cast" #f 1133 12 1133 31 ("jazz.emit-check" "begin" "%%fixnum->flonum" "%%fixnum?" ",value" "jazz.Flonum" "%%eq?" "jazz.generate-symbol" "value" "let" "jazz.sourcified-form" "%%get-code-type" "%%subtype?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-parameter-cast" #f 1152 13 1152 37 ("%%fixnum->flonum" "set!" ",parameter" "%%fixnum?" "jazz.Flonum" "jazz.sourcified-form" "parameter" "let" "jazz.object-declaration?" "%%object-class?" "jazz.Any" "%%eq?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.emit-parameter-cast" #f 1162 12 1162 36 ("jazz.emit-check" "%%fixnum->flonum" "set!" ",parameter" "%%fixnum?" "jazz.Flonum" "jazz.sourcified-form" "parameter" "let" "jazz.object-declaration?" "%%object-class?" "jazz.Any" "%%eq?" "%%not" "or" "if" "environment" "source-declaration" "type" "code")}
      {Lisp-Entry "jazz.parse-specifier" #f 1192 9 1192 29 ("%%cdr" "%%car" "%%source-code" "jazz.specifier?" "%%pair?" "and" "if" "proc" "lst")}
      {Lisp-Entry "jazz.walk-specifier" #f 1198 9 1198 28 ("cons" "list" "atomic?" "jazz.new-function-type" "rest" "named" "optional" "positional" "lambda" "jazz.butlast" "jazz.Rest-Type" "%%class-is?" "jazz.last" "last" "%%null?" "proc" "types" "split-parameters" "result" "parameters" "new-function-type" "jazz.new-template-type" "jazz.new-values-type" "values" "'values" "jazz.new-category-type" "category" "'category" "jazz.new-key-type" "%%string->keyword" "key" "'key" "jazz.new-opt-type" "type" "opt" "'opt" "%%eq?" "jazz.new-rest-type" "jazz.new-nillable-type" "case" "parse-atomic" "write-char" "get-output-string" "%%string->symbol" "%%eof-object?" "open-output-string" "output" "parse-name" "else" "cond" "next" "parse" "jazz.enqueue" "jazz.queue-list" "begin" "iter" "jazz.new-queue" "queue" "terminator" "separator" "parse-until" "jazz.lookup-reference" "jazz.lookup-primitive-type" "or" "name" "lookup-type" "%%eqv?" "%%not" "consume" "1" "%%fx+" "set!" "read-char" "c" "readc" "peek-char" "peekc" "jazz.walk-error" "jazz.error" "not" "if" "%%substring" "jazz.format" "error-message" "message" "ill-formed" "define" "0" "at" "open-input-string" "input" "%%symbol->string" "string" "let" "specifier" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.specifier->type" #f 1338 9 1338 29 ("jazz.walk-specifier" "if" "specifier" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.type->specifier" #f 1344 9 1344 29 ("jazz.name->specifier" "jazz.specifier?" "if" "jazz.emit-specifier" "symbol" "let" "type")}
      {Lisp-Entry "jazz.primitive-types" #f 1356 8 1356 28 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.lookup-primitive-type" #f 1392 9 1392 35 ("jazz.primitive-types" "%%table-ref" "name")}
      {Lisp-Entry "jazz.primitive-declarations" #f 1396 8 1396 35 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.patch-type-until-unification" #f 1431 9 1431 42 ("jazz.lookup-declaration" "jazz.dialect.language" "'jazz.dialect.language" "jazz.get-catalog-entry" "library-declaration" "if" "jazz.primitive-declarations" "%%table-ref" "name" "let" "type")}
      {Lisp-Entry "jazz.Macro-Declaration" #f 1446 27 1446 49 ()}
      {Lisp-Entry "jazz.new-macro-declaration" #f 1449 9 1449 35 ("jazz.setup-declaration" "jazz.Macro-Declaration" "jazz.allocate-macro-declaration" "new-declaration" "let" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Macro-Declaration") 1455 21 1455 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Macro-Declaration") 1459 21 1459 50 ("%%cdr" "%%apply" "jazz.need-macro" "expander" "jazz.load-module" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Macro-Declaration") 1470 21 1470 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "%%cons" "jazz.define-macro" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-macro-declaration-body" "body" "%%get-macro-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Macro-Declaration") 1483 21 1483 42 ("%%get-macro-declaration-body" "jazz.fold-statement" "%%get-macro-declaration-signature" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.Syntax-Declaration" #f 1498 27 1498 50 ()}
      {Lisp-Entry "jazz.new-syntax-declaration" #f 1501 9 1501 36 ("jazz.setup-declaration" "jazz.Syntax-Declaration" "jazz.allocate-syntax-declaration" "new-declaration" "let" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Syntax-Declaration") 1507 21 1507 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Syntax-Declaration") 1511 21 1511 50 ("jazz.need-macro" "expander" "jazz.load-module" "%%get-declaration-parent" "parent-declaration" "jazz.walk-error" "%%get-declaration-toplevel" "%%eq?" "if" "binding" "%%get-declaration-locator" "locator" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.Syntax-Declaration") 1521 21 1521 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" "jazz.emit-signature" "%%cons" "jazz.define-macro" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-syntax-declaration-body" "body" "%%get-syntax-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.fold-declaration" ("jazz.Syntax-Declaration") 1534 21 1534 42 ("%%get-syntax-declaration-body" "jazz.fold-statement" "%%get-syntax-declaration-signature" "declaration" "s" "k" "f")}
      {Lisp-Entry "jazz.C-Type-Declaration" #f 1549 27 1549 50 ()}
      {Lisp-Entry "jazz.new-c-type-declaration" #f 1552 9 1552 36 ("jazz.setup-declaration" "jazz.C-Type-Declaration" "jazz.allocate-c-type-declaration" "new-declaration" "let" "declare" "scheme-to-c" "c-to-scheme" "references" "base-type" "expansion" "kind" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.get-declaration-references" ("jazz.C-Type-Declaration") 1558 21 1558 52 ("declaration" "%%get-c-type-declaration-references")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.C-Type-Declaration") 1562 21 1562 42 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.C-Type-Declaration") 1566 21 1566 55 ("list" "and" "if" ",expansion" ",locator" "c-define-type" "%%get-c-type-declaration-scheme-to-c" "scheme-to-c" "%%get-c-type-declaration-c-to-scheme" "c-to-scheme" "%%get-c-type-declaration-expansion" "expansion" "declaration" "%%get-declaration-locator" "locator" "let")}
      {Lisp-Entry "jazz.C-Definition-Declaration" #f 1584 27 1584 56 ()}
      {Lisp-Entry "jazz.new-c-definition-declaration" #f 1587 9 1587 42 ("jazz.setup-declaration" "jazz.C-Definition-Declaration" "jazz.allocate-c-definition-declaration" "new-declaration" "let" "scope" "c-name" "result-type" "parameter-types" "signature" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.walk-binding-validate-call" ("jazz.C-Definition-Declaration") 1593 21 1593 52 ("jazz.validate-arguments" "if" "declaration" "%%get-c-definition-declaration-signature" "signature" "let" "arguments" "operator" "source-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.C-Definition-Declaration") 1599 21 1599 42 ("%%get-declaration-source" "jazz.emit-expression" "jazz.sourcified-form" ",scope" ",c-name" ",result-type" ",parameter-types" "jazz.emit-signature" "%%cons" "c-define" "jazz.sourcify-if" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-c-definition-declaration-body" "body" "%%get-c-definition-declaration-scope" "scope" "%%get-c-definition-declaration-c-name" "c-name" "%%get-c-definition-declaration-result-type" "result-type" "%%get-c-definition-declaration-parameter-types" "parameter-types" "%%get-c-definition-declaration-signature" "signature" "declaration" "%%get-declaration-locator" "locator" "let" "environment")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.C-Definition-Declaration") 1616 21 1616 48 ("jazz.Any" "declaration" "%%get-declaration-locator" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.Walk-Context" #f 1631 27 1631 44 ()}
      {Lisp-Entry "jazz.new-walk-context" #f 1634 9 1634 30 ("jazz.Walk-Context" "jazz.allocate-walk-context" "pathname" "locator" "policy")}
      {Lisp-Entry "jazz.walk-context" #f 1638 8 1638 25 ("make-parameter")}
      {Lisp-Entry "jazz.get-walk-context" #f 1642 9 1642 30 ("jazz.walk-context")}
      {Lisp-Entry "jazz.need-walk-context" #f 1646 9 1646 31 ("jazz.error" "jazz.walk-context" "or")}
      {Lisp-Entry "jazz.get-walk-policy" #f 1651 9 1651 29 ("%%get-walk-context-policy" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.get-walk-locator" #f 1658 9 1658 30 ("%%get-walk-context-locator" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.get-walk-pathname" #f 1665 9 1665 31 ("%%get-walk-context-pathname" "%%not" "if" "jazz.get-walk-context" "context" "let")}
      {Lisp-Entry "jazz.Walk-Location" #f 1680 27 1680 45 ()}
      {Lisp-Entry "jazz.new-walk-location" #f 1683 9 1683 31 ("jazz.Walk-Location" "jazz.allocate-walk-location" "locat" "declaration-locator" "module-locator")}
      {Lisp-Entry "jazz.walk-location" #f 1687 9 1687 27 ("%%get-declaration-locator" "jazz.get-walk-locator" "jazz.new-walk-location" "locat" "declaration" "walker")}
      {Lisp-Entry "jazz.Walk-Problem" #f 1702 27 1702 44 ()}
      {Lisp-Entry "jazz.Walk-Problems" #f 1713 27 1713 45 ()}
      {Lisp-Entry "jazz.new-walk-problems" #f 1716 9 1716 31 ("jazz.Walk-Problems" "jazz.allocate-walk-problems" "errors" "warnings" "message")}
      {Lisp-Entry "jazz.get-detail" ("jazz.Walk-Problems") 1720 21 1720 36 ("jazz.partition-walk-problems-module" "jazz.partition-walk-problems-declaration" "jazz.queue-list" "declaration-details" "1" "%%fx+" "%%substring" "jazz.enqueue" "add-details" "%%fx=" "declaration-locator" "for-each" "jazz.new-queue" "module-details" "or" "%%symbol->string" "%%string-length" "-1" "%%not" "if" "prefix" "module-locator" "jazz.bind" "partition" "lambda" "map" "%%get-walk-problems-errors" "problems" "%%get-walk-problems-warnings" "%%append" "all" "let" "jazz.new-exception-detail")
        {Lisp-Entry "add-details" #f 1721 11 1721 22 ("%%get-walk-problem-location" "jazz.present-exception" "jazz.new-exception-detail" "jazz.enqueue" "problem" "lambda" "for-each" "queue" "problems")}}
      {Lisp-Entry "jazz.Walk-Warning" #f 1756 27 1756 44 ()}
      {Lisp-Entry "jazz.new-walk-warning" #f 1759 9 1759 30 ("jazz.Walk-Warning" "jazz.allocate-walk-warning" "message" "location")}
      {Lisp-Entry "jazz.Walk-Error" #f 1771 27 1771 42 ()}
      {Lisp-Entry "jazz.new-walk-error" #f 1774 9 1774 28 ("jazz.Walk-Error" "jazz.allocate-walk-error" "message" "location")}
      {Lisp-Entry "jazz.Unresolved-Error" #f 1786 27 1786 48 ()}
      {Lisp-Entry "jazz.new-unresolved-error" #f 1789 9 1789 34 ("jazz.Unresolved-Error" "jazz.allocate-unresolved-error" "symbol" "location")}
      {Lisp-Entry "jazz.present-exception" ("jazz.Unresolved-Error") 1793 21 1793 43 ("error" "%%get-unresolved-error-symbol" "jazz.format")}
      {Lisp-Entry "jazz.Walk-Frame" #f 1806 27 1806 42 ()}
      {Lisp-Entry "jazz.new-walk-frame" #f 1809 9 1809 28 ("jazz.Walk-Frame" "jazz.allocate-walk-frame" "%%table-set!" "%%get-lexical-binding-name" "name" "binding" "lambda" "for-each" "eq?" "test:" "%%make-table" "table" "let" "bindings")}
      {Lisp-Entry "jazz.walk-binding-lookup" ("jazz.Walk-Frame") 1818 21 1818 45 ("binding" "%%get-walk-frame-bindings" "%%table-ref" "symbol")}
      {Lisp-Entry "jazz.Signature" #f 1830 27 1830 41 ()}
      {Lisp-Entry "jazz.new-signature" #f 1833 9 1833 27 ("jazz.Signature" "jazz.allocate-signature" "%%length" "mandatory" "let" "rest" "named" "optional" "positional")}
      {Lisp-Entry "jazz.only-positional?" #f 1838 9 1838 30 ("%%get-signature-rest" "%%not" "%%get-signature-named" "%%get-signature-optional" "%%null?" "and" "signature")}
      {Lisp-Entry "jazz.Symbol-Binding" #f 1852 27 1852 46 ()}
      {Lisp-Entry "jazz.Variable" #f 1863 27 1863 40 ()}
      {Lisp-Entry "jazz.new-variable" #f 1866 9 1866 26 ("0" "jazz.Variable" "jazz.allocate-variable" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.variable-name-valid?" #f 1871 9 1871 34 ("jazz.specifier?" "%%not" "%%symbol?" "and" "name")}
      {Lisp-Entry "jazz.walk-binding-referenced" ("jazz.Variable") 1876 21 1876 49 ("1" "%%get-variable-reference-count" "%%fx+" "binding" "%%set-variable-reference-count")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Variable") 1880 21 1880 48 ("jazz.find-annotated-type" "binding" "%%get-lexical-binding-name" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.walk-binding-assignable?" ("jazz.Variable") 1887 21 1887 50 ()}
      {Lisp-Entry "jazz.emit-binding-assignment" ("jazz.Variable") 1891 21 1891 49 ("jazz.Any" "jazz.sourcified-form" "%%get-lexical-binding-name" "set!" "jazz.new-code" "%%get-code-type" "jazz.extend-annotated-type" "jazz.Annotated-Variable" "%%class-is?" "%%when" "binding" "jazz.find-annotated" "annotated-type" "annotated-variable" "annotated-frame" "receive" "jazz.emit-expression" "value-code" "let" "environment" "source-declaration" "value")}
      {Lisp-Entry "jazz.NextMethod-Variable" #f 1910 27 1910 51 ()}
      {Lisp-Entry "jazz.new-nextmethod-variable" #f 1913 9 1913 37 ("0" "jazz.NextMethod-Variable" "jazz.allocate-nextmethod-variable" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.NextMethod-Variable") 1918 21 1918 48 ("jazz.Any" "jazz.sourcified-form" ",name" "apply" "rest" "lambda" "if" "jazz.new-code" "jazz.*self*" "self" "binding" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration")}
      {Lisp-Entry "jazz.emit-binding-call" ("jazz.NextMethod-Variable") 1929 21 1929 43 ("jazz.call-return-type" "jazz.codes-forms" "jazz.sourcified-form" "jazz.new-code" "if" "jazz.*self*" "self" "%%get-lexical-binding-type" "type" "binding" "%%get-lexical-binding-name" "name" "let" "environment" "source-declaration" "arguments")}
      {Lisp-Entry "jazz.Parameter" #f 1955 27 1955 41 ()}
      {Lisp-Entry "jazz.new-parameter" #f 1958 9 1958 27 ("0" "jazz.Parameter" "jazz.allocate-parameter" "jazz.error" "jazz.variable-name-valid?" "%%assertion" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Parameter") 1963 30 1963 49 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Parameter") 1966 21 1966 40 ("parameter" "%%get-lexical-binding-name" "environment" "declaration")}
      {Lisp-Entry "jazz.Dynamic-Parameter" #f 1978 27 1978 49 ()}
      {Lisp-Entry "jazz.new-dynamic-parameter" #f 1981 9 1981 35 ("0" "jazz.Dynamic-Parameter" "jazz.allocate-dynamic-parameter" "class" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Dynamic-Parameter") 1985 21 1985 40 ("%%get-lexical-binding-name" "jazz.emit-expression" "jazz.sourcified-form" "%%list" "parameter" "%%get-dynamic-parameter-class" "class" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Optional-Parameter" #f 1998 27 1998 50 ()}
      {Lisp-Entry "jazz.new-optional-parameter" #f 2001 9 2001 36 ("0" "jazz.Optional-Parameter" "jazz.allocate-optional-parameter" "default" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Optional-Parameter") 2005 21 2005 40 ("jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "%%list" "parameter" "%%get-optional-parameter-default" "default" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Named-Parameter" #f 2018 27 2018 47 ()}
      {Lisp-Entry "jazz.new-named-parameter" #f 2021 9 2021 33 ("0" "jazz.Named-Parameter" "jazz.allocate-named-parameter" "default" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Named-Parameter") 2025 21 2025 40 ("jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "%%list" "parameter" "%%get-named-parameter-default" "default" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Rest-Parameter" #f 2038 27 2038 46 ()}
      {Lisp-Entry "jazz.new-rest-parameter" #f 2041 9 2041 32 ("0" "jazz.Rest-Parameter" "jazz.allocate-rest-parameter" "type" "name")}
      {Lisp-Entry "jazz.emit-parameter" ("jazz.Rest-Parameter") 2045 21 2045 40 ("parameter" "%%get-lexical-binding-name" "environment" "declaration")}
      {Lisp-Entry "jazz.Self-Binding" #f 2060 27 2060 44 ()}
      {Lisp-Entry "jazz.new-self-binding" #f 2063 9 2063 30 ("self" "'self" "jazz.Self-Binding" "jazz.allocate-self-binding" "type")}
      {Lisp-Entry "jazz.emit-binding-reference" ("jazz.Self-Binding") 2067 21 2067 48 ("%%get-declaration-parent" "self" "'self" "jazz.new-code" "environment" "source-declaration")}
      {Lisp-Entry "jazz.*self*" #f 2082 8 2082 19 ("make-parameter")}
      {Lisp-Entry "jazz.Macro-Symbol" #f 2091 27 2091 44 ()}
      {Lisp-Entry "jazz.new-macro-symbol" #f 2094 9 2094 30 ("jazz.Macro-Symbol" "jazz.allocate-macro-symbol" "setter" "getter" "name")}
      {Lisp-Entry "jazz.Form-Binding" #f 2123 27 2123 44 ()}
      {Lisp-Entry "jazz.Special-Form" #f 2134 27 2134 44 ()}
      {Lisp-Entry "jazz.new-special-form" #f 2137 9 2137 30 ("jazz.Special-Form" "jazz.allocate-special-form" "walk" "name")}
      {Lisp-Entry "jazz.walk-binding-walkable?" ("jazz.Special-Form") 2141 21 2141 48 ()}
      {Lisp-Entry "jazz.walk-binding-walk-form" ("jazz.Special-Form") 2145 21 2145 48 ("binding" "%%get-special-form-walk" "walk" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Macro-Form" #f 2158 27 2158 42 ()}
      {Lisp-Entry "jazz.new-macro-form" #f 2161 9 2161 28 ("jazz.Macro-Form" "jazz.allocate-macro-form" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Macro-Form") 2165 21 2165 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Macro-Form") 2169 21 2169 50 ("%%cdr" "apply" "binding" "%%get-macro-form-expander" "expander" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Syntax-Form" #f 2183 27 2183 43 ()}
      {Lisp-Entry "jazz.new-syntax-form" #f 2186 9 2186 29 ("jazz.Syntax-Form" "jazz.allocate-syntax-form" "expander" "name")}
      {Lisp-Entry "jazz.walk-binding-expandable?" ("jazz.Syntax-Form") 2190 21 2190 50 ()}
      {Lisp-Entry "jazz.walk-binding-expand-form" ("jazz.Syntax-Form") 2194 21 2194 50 ("binding" "%%get-syntax-form-expander" "expander" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Annotated-Variable" #f 2207 27 2207 50 ()}
      {Lisp-Entry "jazz.new-annotated-variable" #f 2210 9 2210 36 ("jazz.Annotated-Variable" "jazz.allocate-annotated-variable" "type" "declared-type" "variable")}
      {Lisp-Entry "jazz.Restricted-Binding" #f 2222 27 2222 50 ()}
      {Lisp-Entry "jazz.new-restricted-binding" #f 2225 9 2225 36 ("jazz.Restricted-Binding" "jazz.allocate-restricted-binding" "type" "binding")}
      {Lisp-Entry "jazz.Annotated-Frame" #f 2237 27 2237 47 ()}
      {Lisp-Entry "jazz.new-annotated-frame" #f 2240 9 2240 33 ("jazz.Annotated-Frame" "jazz.allocate-annotated-frame" "reset" "variables")}
      {Lisp-Entry "jazz.inspect-annotated-variable" #f 2248 9 2248 40 ("%%get-annotated-variable-type" "%%get-annotated-variable-variable" ":variable" "%%get-restricted-binding-type" "%%get-restricted-binding-binding" "%%get-lexical-binding-name" ":restricted" "jazz.Restricted-Binding" "%%class-is?" "if" "jazz.object->serial-symbol" "serial" "let" "variable")}
      {Lisp-Entry "jazz.inspect-annotated-frame" #f 2259 9 2259 37 ("frame")}
      {Lisp-Entry "jazz.inspect-annotated-environment" #f 2264 9 2264 43 ("environment")}
      {Lisp-Entry "jazz.Code" #f 2274 27 2274 36 ()}
      {Lisp-Entry "jazz.new-code" #f 2277 9 2277 22 ("jazz.Code" "jazz.allocate-code" "source" "type" "form")}
      {Lisp-Entry "jazz.codes-forms" #f 2284 9 2284 25 ("jazz.sourcified-form" "code" "lambda" "map" "codes")}
      {Lisp-Entry "jazz.codes-types" #f 2290 9 2290 25 ("%%get-code-type" "code" "lambda" "map" "codes")}
      {Lisp-Entry "jazz.sourcify-code" #f 2297 9 2297 27 ("%%get-code-type" "%%get-code-form" "jazz.new-code" "%%source?" "%%not" "or" "if" "src" "code")}
      {Lisp-Entry "jazz.sourcified-form" #f 2306 9 2306 29 ("jazz.sourcify-if" "%%get-code-source" "src" "%%get-code-form" "form" "let" "code")}
      {Lisp-Entry "jazz.annotate-signature" #f 2317 9 2317 32 ("jazz.queue-list" "%%when" "for-each" "jazz.new-annotated-variable" "jazz.enqueue" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "parameter" "annotate" "define" "jazz.new-queue" "queue" "%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "let" "signature")}
      {Lisp-Entry "jazz.annotate-inlined-signature" #f 2336 9 2336 40 ("jazz.queue-list" "jazz.new-annotated-variable" "jazz.enqueue" "%%get-code-type" "or" "type" "%%get-lexical-binding-type" "declared-type" "argument" "parameter" "lambda" "for-each" "jazz.new-queue" "queue" "%%get-signature-positional" "positional" "let" "arguments" "signature")}
      {Lisp-Entry "jazz.annotate-bindings" #f 2348 9 2348 31 ("jazz.new-annotated-variable" "jazz.Void" "or" "type" "%%get-lexical-binding-type" "declared-type" "%%cdr" "value" "%%car" "variable" "let" "binding" "lambda" "map" "bindings")}
      {Lisp-Entry "jazz.annotate-receive" #f 2358 9 2358 30 ("jazz.new-annotated-variable" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "let" "parameter" "lambda" "map" "parameters")}
      {Lisp-Entry "jazz.annotate-internal-defines" #f 2366 9 2366 39 ("jazz.new-annotated-variable" "jazz.Any" "or" "type" "%%get-lexical-binding-type" "declared-type" "%%get-internal-define-variable" "variable" "let" "internal-define" "lambda" "map" "internal-defines")}
      {Lisp-Entry "jazz.with-annotated-frame" #f 2375 9 2375 34 ("jazz.new-annotated-frame" "set!" "k" "lambda" "continuation-capture" "reset" "let" "proc" "variables")}
      {Lisp-Entry "jazz.find-annotated" #f 2383 9 2383 28 ("%%get-annotated-variable-type" "%%get-annotated-variable-variable" "%%cdr" "set!" "%%not" "begin" "%%get-restricted-binding-type" "values" "%%eq?" "jazz.Declaration" "and" "%%get-restricted-binding-binding" "binding" "jazz.Restricted-Binding" "%%class-is?" "annotated-variable" "%%get-annotated-frame-variables" "variables" "iter-variables" "or" "%%car" "annotated-frame" "%%null?" "if" "frames" "iter-frames" "type" "let" "environment" "variable")}
      {Lisp-Entry "jazz.find-annotated-type" #f 2409 9 2409 33 ("%%get-lexical-binding-type" "info" "let" "jazz.find-annotated" "type" "variable" "frame" "receive" "jazz.Variable" "%%class-is?" "if" "environment" "binding")}
      {Lisp-Entry "jazz.extend-annotated-type" #f 2422 9 2422 35 ("continuation-return" "%%get-annotated-frame-reset" "reset" "jazz.Any" "extended-type" "%%subtype?" "%%not" "%%when" "%%set-annotated-variable-type" "jazz.Void" "%%eq?" "if" "%%get-annotated-variable-type" "actual-type" "%%get-annotated-variable-declared-type" "declared-type" "let" "new-type" "variable" "frame")}
      {Lisp-Entry "jazz.extend-type" #f 2445 9 2445 25 ("else" "%%subtype?" "jazz.Void" "%%eq?" "jazz.Any" "%%not" "or" "cond" "type2" "type1")}
      {Lisp-Entry "jazz.extend-types" #f 2459 9 2459 26 ("%%cdr" "jazz.extend-types" "%%car" "jazz.extend-type" "jazz.Void" "%%null?" "if" "types")}
      {Lisp-Entry "jazz.type-union" #f 2465 9 2465 24 ("jazz.new-union-type" "types")}
      {Lisp-Entry "jazz.type-difference" #f 2469 9 2469 29 ("type2" "type1")}
      {Lisp-Entry "jazz.Walker" #f 2478 27 2478 38 ()}
      {Lisp-Entry "jazz.walk-warning" #f 2486 9 2486 26 ("jazz.new-walk-warning" "jazz.walker-warning" "jazz.format" "apply" "message" "jazz.walk-location" "location" "let" "rest" "fmt-string" "declaration" "walker")}
      {Lisp-Entry "jazz.walk-error" #f 2492 9 2492 24 ("jazz.new-walk-error" "jazz.walker-error" "jazz.format" "apply" "message" "jazz.walk-location" "location" "let" "rest" "fmt-string" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-unresolved" #f 2498 9 2498 29 ("%%source-code" "jazz.new-unresolved-error" "jazz.walker-error" "%%source-locat" "%%source?" "if" "jazz.walk-location" "location" "let" "symbol-src" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walker-warning" #f 2503 9 2503 28 ("%%list" "%%get-walker-warnings" "%%append" "%%set-walker-warnings" "jazz.warnings?" "if" "warning" "walker")}
      {Lisp-Entry "jazz.walker-error" #f 2508 9 2508 26 ("jazz.validate-walk-problems" "jazz.unspecified" "continuation-return" "jazz.delay-reporting?" "and" "if" "%%list" "%%get-walker-errors" "%%append" "%%set-walker-errors" "error" "resume" "walker")}
      {Lisp-Entry "jazz.validate-walk-problems" #f 2515 9 2515 36 ("jazz.new-walk-problems" "raise" "get-output-string" "message" "jazz.partition-walk-problems-module" "jazz.partition-walk-problems-declaration" "jazz.present-exception" "problem" "1" "%%fx+" "%%substring" "%%fx=" "toplevel?" "declaration-locator" "%%symbol->string" "%%string-length" "-1" "%%not" "if" "prefix" "problems" "module-locator" "jazz.bind" "partition" "lambda" "for-each" "jazz.format" "%%append" "all" "open-output-string" "output" "%%not-null?" "or" "%%when" "%%get-walker-errors" "errors" "%%get-walker-warnings" "warnings" "let" "walker")}
      {Lisp-Entry "jazz.partition-walk-problems-module" #f 2543 9 2543 44 ("assv" "%%get-walk-problem-location" "%%get-walk-location-module-locator" "problem" "lambda" "jazz.partition" "problems")}
      {Lisp-Entry "jazz.partition-walk-problems-declaration" #f 2550 9 2550 49 ("assoc" "%%get-walk-problem-location" "%%get-walk-location-declaration-locator" "%%symbol->string" "problem" "lambda" "jazz.partition" "problems")}
      {Lisp-Entry "jazz.parse-modifiers" #f 2562 9 2562 29 ("%%list" "jazz.walk-error" "else" "%%null?" "cond" "modifiers" "%%append" "values" "%%apply" "%%cdr" "%%set-cdr!" "set!" "begin" "%%memq" "if" "%%cdar" "default" "%%caar" "allowed" "partition" "for-each" "found?" "%%car" "%%desourcify" "target" "%%not" "%%not-null?" "and" "%%while" "done?" "%%cons" "info" "lambda" "map" "partitions" "let" "rest" "infos" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-module-declaration" #f 2593 9 2593 38 ("jazz.new-module-declaration" "body" "requires" "lambda" "jazz.parse-module" "jazz.error" "jazz.requested-module-name" "eval" "'eval" "jazz.walk-for" "%%neq?" "and" "if" "%%cdr" "rest" "%%car" "name" "let" "partial-form")}
      {Lisp-Entry "jazz.parse-library" #f 2608 9 2608 27 ("jazz.filter-features" "values" "import" "'import" "export" "'export" "%%desourcify" "%%cdr" "set!" "begin" "require" "'require" "%%eq?" "%%pair?" "and" "if" "imports" "exports" "requires" "%%cddr" "scan" "%%cadr" "dialect-name" "%%car" "%%source-code" "name" "let" "partial-form")}
      {Lisp-Entry "jazz.parse-library-invoice" #f 2641 9 2641 35 ("%%reverse" "values" "'autoload" "'only" "'phase" "%%cdar" "begin" "'load" "%%caar" "%%eq?" "if" "%%cons" "set!" "%%not" "and" "%%while" "autoload" "only" "phase" "load" "version" "%%cdr" "scan" "%%car" "name" "let" "jazz.error" "%%pair?" "%%assertion" "specification")}
      {Lisp-Entry "jazz.parse-library-declaration" #f 2681 9 2681 39 ("jazz.walk-library-declaration" "jazz.dialect-walker" "walker" "jazz.require-dialect" "dialect" "jazz.load-dialect-invoice" "dialect-invoice" "let*" "jazz.new-walk-context" "jazz.walk-context" "parameterize" "jazz.error" "jazz.requested-module-name" "eval" "'eval" "jazz.walk-for" "%%neq?" "and" "if" "jazz.parse-library" "body" "imports" "exports" "requires" "dialect-name" "name" "receive" "partial-form")}
      {Lisp-Entry "jazz.walk-library-declaration" #f 2692 9 2692 38 ("jazz.validate-walk-problems" "jazz.walker-environment" "%%cons" "jazz.walk-declarations" "jazz.merge-declarations" "declaration" "jazz.setup-library-lookups" "jazz.load-library-syntax" "jazz.new-library-declaration" "new-declaration" "jazz.walk-library-imports" "jazz.walk-library-exports" "let" "body" "imports" "exports" "requires" "dialect-invoice" "dialect-name" "name" "actual" "walker")}
      {Lisp-Entry "jazz.load-library-syntax" #f 2704 9 2704 33 ("%%get-library-declaration-imports" "%%get-library-declaration-exports" "%%get-lexical-binding-name" "%%get-library-invoice-library" "jazz.resolve-reference" "library-declaration" "let" "%%get-library-invoice-phase" "library-invoice" "%%get-library-declaration-requires" "jazz.load-module" "syntax" "'syntax" "%%eq?" "%%when" "phase" "feature-requirement" "module-name" "jazz.parse-require" "spec" "lambda" "for-each" "declaration")}
      {Lisp-Entry "jazz.walk-library-exports" #f 2723 9 2723 34 ("jazz.new-autoload-reference" "%%not" "jazz.new-library-reference" "library-reference" "jazz.parse-library-invoice" "library-autoload" "library-only" "library-version" "library-phase" "library-load" "library-name" "receive" "export" "%%cdr" "jazz.new-export-reference" "symbol" "lambda" "map" "jazz.new-export-invoice" "%%list" "if" "%%append" "library-exports" "assq" "symbols-exports" "assv" "symbol?" "jazz.partition" "partition" "let" "exports" "walker")}
      {Lisp-Entry "jazz.walk-library-imports" #f 2751 9 2751 34 ("jazz.new-export-reference" "symbol" "%%not" "if" "jazz.lookup-library" "jazz.new-import-invoice" "jazz.parse-library-invoice" "library-autoload" "library-only" "library-version" "library-phase" "library-load" "library-name" "receive" "import" "lambda" "map" "imports" "walker")}
      {Lisp-Entry "jazz.expand-library" #f 2765 9 2765 28 ("jazz.walk-library" "jazz.emit-declaration" "partial-form")}
      {Lisp-Entry "jazz.walk-library" #f 2769 9 2769 26 ("%%set-namespace-declaration-body" "jazz.validate-walk-problems" "jazz.walk-namespace" "jazz.walker-environment" "%%cons" "environment" "jazz.set-catalog-entry" "jazz.desourcify-list" "jazz.walk-library-declaration" "let" "lambda" "jazz.call-with-catalog-entry-lock" "declaration" "jazz.get-catalog-entry" "actual" "resume" "jazz.dialect-walker" "walker" "jazz.require-dialect" "dialect" "jazz.load-dialect-invoice" "dialect-invoice" "let*" "jazz.new-walk-context" "jazz.walk-context" "parameterize" "jazz.error" "jazz.requested-module-name" "eval" "'eval" "jazz.walk-for" "%%neq?" "and" "if" "jazz.parse-library" "body" "imports" "exports" "requires" "dialect-name" "name" "receive" "partial-form")}
      {Lisp-Entry "jazz.parse-module" #f 2791 9 2791 26 ("%%desourcify" "%%cdr" "jazz.filter-features" "require" "'require" "%%eq?" "%%car" "%%source-code" "%%pair?" "and" "if" "proc" "rest")}
      {Lisp-Entry "jazz.cond-expand" #f 2799 9 2799 25 ("begin" "else" "'else" "jazz.feature-safisfied?" "feature-requirement" "%%desourcify" "%%symbol?" "%%not" "or" "clause" "jazz.error" "%%null?" "%%cdr" "scan" "iter" "let" "cond-expand" "'cond-expand" "%%car" "%%eq?" "%%source-code" "%%pair?" "and" "if" "cont" "form-src")}
      {Lisp-Entry "jazz.walk-namespace" #f 2819 9 2819 28 ("jazz.queue-list" "jazz.walk" "jazz.enqueue" "%%when" "expr?" "expr-src" "jazz.cond-expand" "continuation-capture" "form-src" "lambda" "for-each" "jazz.new-queue" "queue" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.load-dialect-invoice" #f 2832 9 2832 34 ("syntax" "'syntax" "jazz.locate-library-declaration" "jazz.new-import-invoice" "core" "'core" "%%eq?" "jazz.error" "%%symbol?" "%%not" "if" "dialect-name")}
      {Lisp-Entry "jazz.expand-library-references" #f 2844 9 2844 39 ("jazz.expand-referenced-declaration" "map" "%%get-library-declaration-references" "jazz.enqueue" "jazz.queue-list" "%%memq" "%%not" "%%when" "jazz.get-declaration-references" "for-each" "declaration" "lambda" "collect-declarations" "letrec" "jazz.new-queue" "queue" "let" "library-declaration")}
      {Lisp-Entry "jazz.expand-library-literals" #f 2857 9 2857 37 ("%%get-library-declaration-literals" "jazz.emit-expression" "jazz.sourcified-form" ",name" "define" "%%cddr" "value" "%%cadr" "name" "let" "info" "lambda" "map" "library-declaration")}
      {Lisp-Entry "jazz.expand-library-variables" #f 2865 9 2865 38 ("%%get-library-declaration-variables" "jazz.queue-list" ",value" ",symbol" "jazz.define-variable" "%%cdr" "value" "%%car" "symbol" "let" "variable" "lambda" "map" "library-declaration")}
      {Lisp-Entry "jazz.expand-library-autoloads" #f 2873 9 2873 38 ("%%get-library-declaration-autoloads" "jazz.emit-binding-reference" "jazz.sourcified-form" "set!" "%%get-declaration-toplevel" "%%get-declaration-locator" "jazz.load-module" "begin" "%%not" "if" "loaded?" ",locator" "define" "jazz.autoload-locator" "locator" "jazz.resolve-declaration" "referenced-declaration" "let" "autoload-declaration" "lambda" "map" "environment" "library-declaration")}
      {Lisp-Entry "jazz.core-bindings" #f 2893 9 2893 27 ("jazz.walk-syntax" "syntax" "'syntax" "jazz.walk-macro" "macro" "'macro" "jazz.walk-native" "native" "'native" "jazz.walk-proclaim" "proclaim" "'proclaim" "jazz.new-special-form" "%%list")}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Walker") 2901 30 2901 53 ()}
      {Lisp-Entry "jazz.walker-environment" ("jazz.Walker") 2904 21 2904 44 ("jazz.core-bindings" "jazz.new-walk-frame" "%%list")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Walker") 2919 30 2919 51 ("form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-declaration" ("jazz.Walker") 2922 21 2922 42 ("else" "jazz.walk-syntax-declaration" "syntax" "jazz.walk-macro-declaration" "macro" "walker" "jazz.walk-native-declaration" "native" "case" "%%car" "first" "let" "%%pair?" "if" "form" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-declarations" #f 2933 9 2933 31 ("walk" "forms" "environment" "declaration" "resume" "walker")
        {Lisp-Entry "walk" #f 2934 11 2934 15 ("jazz.walk-declaration" "%%cdr" "walk" "jazz.begin-form?" "if" "environment" "declaration" "walker" "jazz.expand-macros" "expansion" "let" "%%when" "expr?" "expr" "jazz.cond-expand" "resume" "continuation-capture" "form" "lambda" "for-each" "forms")}}
      {Lisp-Entry "jazz.add-declaration-child" #f 2950 9 2950 35 ("jazz.public-access" "jazz.private-access" "%%get-access-lookup" "%%table-set!" "%%list" "%%get-namespace-declaration-children" "%%append" "%%set-namespace-declaration-children" "begin" "jazz.merge-declarations" "if" "%%get-namespace-declaration-children-lookup" "%%table-ref" "actual" "%%get-lexical-binding-name" "name" "let" "child" "namespace-declaration" "resume" "walker")}
      {Lisp-Entry "jazz.merge-declarations" #f 2963 9 2963 32 ("jazz.update-declaration" "begin" "not" "if" "new-declaration" "actual-declaration")}
      {Lisp-Entry "jazz.find-form-declaration" #f 2971 9 2971 35 ("jazz.error" "%%assertion" "jazz.find-declaration" "declaration" "let" "name" "namespace-declaration")}
      {Lisp-Entry "jazz.begin-form?" #f 2977 9 2977 25 ("begin" "'begin" "%%car" "%%eq?" "%%source-code" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.define-form?" #f 2982 9 2982 26 ("define" "'define" "%%car" "%%eq?" "%%source-code" "%%pair?" "and" "form")}
      {Lisp-Entry "jazz.register-autoload-declaration" #f 2992 9 2992 43 ("%%cons" "%%set-library-declaration-autoloads" "%%memq" "%%not" "%%when" "%%get-library-declaration-autoloads" "declarations" "let" "autoload-declaration" "library-declaration")}
      {Lisp-Entry "jazz.lookup-library" #f 3003 9 3003 28 ("jazz.walk-unresolved" "jazz.locate-library-declaration" "or" "name" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-reference" #f 3008 9 3008 30 ("jazz.walk-unresolved" "jazz.lookup-accessible/compatible-symbol" "or" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.Expression" #f 3018 27 3018 42 ()}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Expression") 3021 30 3021 50 ("environment" "declaration")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Expression") 3024 21 3024 41 ("expression" "jazz.error" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Expression") 3028 30 3028 44 ("environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Expression") 3031 21 3031 35 ("jazz.Any" "jazz.codes-forms" "expression" "jazz.emit-expression" "jazz.sourcified-form" "jazz.new-code" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Expression") 3038 30 3038 50 ("s" "k" "f")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Expression") 3041 21 3041 41 ("expression" "s" "k" "f")}
      {Lisp-Entry "jazz.emit-expressions" #f 3045 9 3045 30 ("jazz.emit-expression" "expression" "lambda" "map" "environment" "declaration" "expressions")}
      {Lisp-Entry "jazz.fold-expressions" #f 3051 9 3051 30 ("%%cdr" "jazz.fold-expressions" "%%car" "jazz.fold-expression" "%%null?" "if" "seed" "s" "k" "f" "expressions")}
      {Lisp-Entry "jazz.Proclaim" #f 3066 27 3066 40 ()}
      {Lisp-Entry "jazz.new-proclaim" #f 3069 9 3069 26 ("jazz.Proclaim" "jazz.allocate-proclaim" "clauses")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Proclaim") 3073 21 3073 41 ("jazz.proclaim" "clause" "lambda" "for-each" "%%get-declaration-toplevel" "library-declaration" "expression" "%%get-proclaim-clauses" "clauses" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Constant" #f 3090 27 3090 40 ()}
      {Lisp-Entry "jazz.new-constant" #f 3093 9 3093 26 ("jazz.Constant" "jazz.allocate-constant" "type" "expansion")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Constant") 3097 21 3097 41 ("%%get-expression-type" "expression" "%%get-constant-expansion" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Constant") 3104 21 3104 41 ("%%get-constant-expansion" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Delay" #f 3118 27 3118 37 ()}
      {Lisp-Entry "jazz.new-delay" #f 3121 9 3121 23 ("jazz.Delay" "jazz.allocate-delay" "expression")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Delay") 3125 21 3125 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "delay" "jazz.new-code" "%%get-delay-expression" "expression" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Quasiquote" #f 3141 27 3141 42 ()}
      {Lisp-Entry "jazz.new-quasiquote" #f 3144 9 3144 28 ("jazz.Quasiquote" "jazz.allocate-quasiquote" "form")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Quasiquote") 3148 21 3148 41 ("jazz.List" "expression" "%%get-quasiquote-form" "quasiquote" "'quasiquote" "jazz.new-code" "%%cdr" "%%cons" "%%cadr" "jazz.emit-expression" "jazz.sourcified-form" "%%list" "unquote-splicing" "'unquote-splicing" "unquote" "'unquote" "%%car" "%%eq?" "or" "%%pair?" "if" "form" "lambda" "emit" "letrec" "environment" "declaration")}
      {Lisp-Entry "jazz.Reference" #f 3171 27 3171 41 ()}
      {Lisp-Entry "jazz.new-reference" #f 3174 9 3174 27 ("jazz.Reference" "jazz.allocate-reference" "binding")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Reference") 3178 21 3178 41 ("expression" "%%get-reference-binding" "jazz.emit-binding-reference" "environment" "declaration")}
      {Lisp-Entry "jazz.emit-call" ("jazz.Reference") 3182 21 3182 35 ("expression" "%%get-reference-binding" "jazz.emit-binding-call" "environment" "declaration" "arguments")}
      {Lisp-Entry "jazz.Assignment" #f 3194 27 3194 42 ()}
      {Lisp-Entry "jazz.new-assignment" #f 3197 9 3197 28 ("jazz.Assignment" "jazz.allocate-assignment" "value" "binding")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Assignment") 3201 21 3201 41 ("%%get-assignment-value" "expression" "%%get-assignment-binding" "jazz.emit-binding-assignment" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Assignment") 3205 21 3205 41 ("%%get-assignment-value" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Lambda" #f 3219 27 3219 38 ()}
      {Lisp-Entry "jazz.new-lambda" #f 3222 9 3222 24 ("jazz.Lambda" "jazz.allocate-lambda" "body" "signature" "source" "type")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Lambda") 3226 21 3226 41 ("%%get-expression-source" "jazz.new-function-type" ",@signature-casts" ",cast-body" ",signature-output" "%%not" "if" "%%get-code-type" "jazz.sourcified-form" "begin" "jazz.new-code" "jazz.emit-type-cast" "jazz.simplify-begin" "cast-body" "jazz.emit-signature-casts" "signature-casts" "jazz.emit-expression" "body-code" "jazz.emit-signature" "signature-output" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-signature" "jazz.with-annotated-frame" "%%get-lambda-body" "body" "%%get-lambda-signature" "signature" "expression" "%%get-expression-type" "type" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Lambda") 3249 21 3249 41 ("%%get-lambda-body" "jazz.fold-statement" "%%get-lambda-signature" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Let" #f 3264 27 3264 35 ()}
      {Lisp-Entry "jazz.new-let" #f 3267 9 3267 21 ("jazz.Let" "jazz.allocate-let" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Let") 3271 21 3271 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-let-body" "body" "expression" "%%get-let-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Let") 3295 21 3295 41 ("%%get-let-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Named-Let" #f 3309 27 3309 41 ()}
      {Lisp-Entry "jazz.new-named-let" #f 3312 9 3312 27 ("jazz.Named-Let" "jazz.allocate-named-let" "body" "bindings" "variable" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Named-Let") 3316 21 3316 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "annotated-variable" "binding" "map" "bindings-output" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.Any" "jazz.new-annotated-variable" "cons" "jazz.with-annotated-frame" "%%get-let-body" "body" "%%get-let-bindings" "bindings" "expression" "%%get-named-let-variable" "variable" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Named-Let") 3341 21 3341 41 ("%%get-let-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Letstar" #f 3355 27 3355 39 ()}
      {Lisp-Entry "jazz.new-letstar" #f 3358 9 3358 25 ("jazz.Letstar" "jazz.allocate-letstar" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Letstar") 3362 21 3362 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "let*" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-letstar-body" "body" "expression" "%%get-letstar-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Letstar") 3386 21 3386 41 ("%%get-letstar-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Letrec" #f 3400 27 3400 38 ()}
      {Lisp-Entry "jazz.new-letrec" #f 3403 9 3403 24 ("jazz.Letrec" "jazz.allocate-letrec" "body" "bindings" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Letrec") 3407 21 3407 41 ("%%get-expression-source" "jazz.sourcified-form" ",bindings-output" "letrec" "jazz.new-code" "body-code" "%%get-lexical-binding-type" "jazz.emit-type-cast" "%%get-lexical-binding-name" "%%get-code-type" "jazz.extend-annotated-type" "jazz.emit-expression" "value-code" "%%cdr" "value" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-letrec-body" "body" "expression" "%%get-letrec-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Letrec") 3431 21 3431 41 ("%%get-letrec-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Receive" #f 3445 27 3445 39 ()}
      {Lisp-Entry "jazz.new-receive" #f 3448 9 3448 25 ("jazz.Receive" "jazz.allocate-receive" "body" "expression" "variables" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Receive") 3452 21 3452 41 ("%%get-expression-source" "%%get-code-type" ",expression-output" "%%get-lexical-binding-name" "variable" "map" "receive" "jazz.new-code" "body-code" "jazz.emit-expression" "jazz.sourcified-form" "expression-output" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-receive" "jazz.with-annotated-frame" "%%get-receive-body" "body" "%%get-receive-expression" "expr" "expression" "%%get-receive-variables" "variables" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Receive") 3471 21 3471 41 ("%%get-receive-body" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Body" #f 3485 27 3485 36 ()}
      {Lisp-Entry "jazz.new-body" #f 3488 9 3488 22 ("jazz.Body" "jazz.allocate-body" "expressions" "internal-defines")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Body") 3492 21 3492 41 ("jazz.Any" "jazz.emit-expressions" "jazz.codes-forms" "append" "jazz.new-code" "cons" "augmented-environment" "frame" "lambda" "jazz.annotate-internal-defines" "jazz.with-annotated-frame" "%%get-body-expressions" "expressions" "expression" "%%get-body-internal-defines" "internal-defines" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Body") 3505 21 3505 41 ("%%get-body-expressions" "%%get-body-internal-defines" "jazz.fold-statements" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Internal-Define" #f 3519 27 3519 47 ()}
      {Lisp-Entry "jazz.new-internal-define" #f 3522 9 3522 33 ("jazz.Internal-Define" "jazz.allocate-internal-define" "value" "variable")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Internal-Define") 3526 21 3526 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "%%get-lexical-binding-name" "define" "jazz.new-code" "%%get-internal-define-value" "value" "expression" "%%get-internal-define-variable" "variable" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Internal-Define") 3536 21 3536 41 ("%%get-internal-define-value" "jazz.fold-statement" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Begin" #f 3550 27 3550 37 ()}
      {Lisp-Entry "jazz.new-begin" #f 3553 9 3553 23 ("jazz.Begin" "jazz.allocate-begin" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Begin") 3557 21 3557 41 ("%%get-expression-source" "%%get-code-type" "jazz.sourcified-form" "begin" "jazz.new-code" "jazz.emit-statements-code" "code" "expression" "%%get-begin-expressions" "expressions" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Begin") 3566 21 3566 41 ("%%get-begin-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Do" #f 3579 27 3579 34 ()}
      {Lisp-Entry "jazz.new-do" #f 3582 9 3582 20 ("jazz.Do" "jazz.allocate-do" "body" "result" "test" "bindings")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Do") 3586 21 3586 41 ("%%get-code-type" ",bindings-output" "do" "jazz.new-code" "body-code" "result-code" "test-code" ",@step-code-list" ",init-code" "%%get-lexical-binding-name" "list" "if" "step-code-list" "jazz.emit-expression" "jazz.sourcified-form" "init-code" "%%cddr" "step" "%%cadr" "init" "%%car" "variable" "annotated-variable" "binding" "map" "bindings-output" "cons" "augmented-environment" "%%get-annotated-frame-variables" "variables" "frame" "lambda" "jazz.annotate-bindings" "jazz.with-annotated-frame" "%%get-do-body" "body" "%%get-do-result" "result" "%%get-do-test" "test" "expression" "%%get-do-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.Call" #f 3626 27 3626 36 ()}
      {Lisp-Entry "jazz.new-call" #f 3629 9 3629 22 ("jazz.Call" "jazz.allocate-call" "arguments" "operator" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Call") 3633 21 3633 41 ("%%get-expression-source" "jazz.emit-call" "jazz.emit-inlined-call" "jazz.emit-primitive-call" "jazz.emit-primitive-new-call" "jazz.emit-specialized-call" "or" "jazz.sourcify-code" "jazz.emit-expressions" "arguments-codes" "%%get-declaration-locator" "jazz.Declaration" "%%get-reference-binding" "binding" "jazz.Reference" "%%class-is?" "if" "locator" "%%get-call-arguments" "arguments" "expression" "%%get-call-operator" "operator" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Call") 3652 21 3652 41 ("%%get-call-arguments" "jazz.fold-expressions" "%%get-call-operator" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.call-return-type" #f 3661 9 3661 30 ("jazz.Any" "%%get-function-type-result" "jazz.Function-Type" "%%is?" "if" "operator-type")}
      {Lisp-Entry "jazz.specializers" #f 3672 8 3672 25 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.add-specializer" #f 3676 9 3676 29 ("%%list" "%%table-ref" "%%append" "jazz.specializers" "%%table-set!" "specializer" "specialized-declaration")}
      {Lisp-Entry "jazz.get-specializers" #f 3682 9 3682 30 ("jazz.specializers" "%%table-ref" "binding")}
      {Lisp-Entry "jazz.emit-specialized-call" #f 3686 9 3686 35 ("%%cdr" "%%get-function-type-result" "jazz.codes-forms" ",locator" "jazz.new-code" "jazz.emit-inlined-binding-call" "jazz.match-signature?" "%%get-lexical-binding-type" "function-type" "%%car" "specializer" "on" "'on" "jazz.debug-specializers" "%%get-lexical-binding-name" "specialized" "'specialized" "call" "'call" "match" "'match" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "scheme.dialect.kernel./" "scheme.dialect.kernel.*" "scheme.dialect.kernel.-" "scheme.dialect.kernel.+" "scheme.dialect.kernel.>=" "scheme.dialect.kernel.>" "scheme.dialect.kernel.<=" "scheme.dialect.kernel.<" "scheme.dialect.kernel.=" "%%memq" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-library-warn?" "jazz.warnings?" "and" "%%when" "begin" "%%null?" "scan" "iter" "jazz.codes-types" "types" "jazz.get-specializers" "specializers" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "jazz.emit-specialized-locator" "or" "%%not" "if" "environment" "declaration" "arguments-codes" "arguments" "locator" "operator")}
      {Lisp-Entry "jazz.emit-specialized-locator" #f 3727 8 3727 37 ()}
      {Lisp-Entry "jazz.emit-primitive-new-call" #f 3740 8 3740 36 ()}
      {Lisp-Entry "jazz.primitive-patterns" #f 3765 8 3765 31 ()}
      {Lisp-Entry "jazz.initialize-primitive-patterns" #f 3769 9 3769 43 ("set!" "jazz.primitive-patterns" "jazz.walk-specifier" "list" "%%cadr" "specifier" "name" "pattern" "map" "%%table-set!" "%%cdr" "patterns" "%%car" "operator" "pair" "lambda" "for-each" "eq?" "test:" "%%make-table" "table" "let")}
      {Lisp-Entry "jazz.add-primitive-patterns" #f 3784 9 3784 36 ("%%cons" "jazz.primitive-patterns" "set!" "patterns" "operator")}
      {Lisp-Entry "jazz.get-primitive-patterns" #f 3788 9 3788 36 ("jazz.primitive-patterns" "%%table-ref" "locator")}
      {Lisp-Entry "jazz.emit-primitive-call" #f 3837 9 3837 33 ("%%cdr" "%%get-function-type-result" "jazz.codes-forms" ",name" "jazz.new-code" "jazz.match-signature?" "%%car" "function-type" "name" "jazz.bind" "jazz.identifier-name" "primitive" "'primitive" "call" "'call" "match" "'match" "to" "'to" "unable" "'unable" "%%get-declaration-locator" "In" "'In" "Warning:" "'Warning:" "jazz.debug" "scheme.dialect.kernel.cdr" "scheme.dialect.kernel.car" "%%memq" "optimizations" "'optimizations" "%%get-declaration-toplevel" "jazz.get-library-warn?" "jazz.warnings?" "and" "%%when" "begin" "%%null?" "scan" "iter" "jazz.codes-types" "types" "jazz.get-primitive-patterns" "patterns" "let" "%%not" "if" "environment" "declaration" "arguments-codes" "arguments" "locator" "operator")}
      {Lisp-Entry "jazz.emit-inlined-call" #f 3865 9 3865 31 ("jazz.emit-inlined-binding-call" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "if" "environment" "declaration" "arguments" "operator")}
      {Lisp-Entry "jazz.match-signature?" #f 3877 9 3877 30 ("list-tail" "lambda" "jazz.every?" "%%get-rest-type-type" "match-rest?" "else" "%%cdr" "%%car" "cond" "expected" "types" "args" "iter" "%%null?" "%%not" "%%fx<=" "%%fx>=" "match-positional?" "jazz.Any" "%%subtype?" "%%get-category-type-declaration" "%%get-reference-binding" "%%eq?" "jazz.Reference" "and" "or" "jazz.Category-Type" "%%class-is?" "if" "expect" "type" "arg" "match?" "define" "%%get-function-type-rest" "rest" "%%get-function-type-named" "named" "%%get-function-type-optional" "optional" "%%get-function-type-positional" "positional" "%%get-function-type-mandatory" "mandatory" "%%length" "argcount" "let" "function-type" "argument-types" "arguments")}
      {Lisp-Entry "jazz.If" #f 3926 27 3926 34 ()}
      {Lisp-Entry "jazz.new-if" #f 3929 9 3929 20 ("jazz.If" "jazz.allocate-if" "no" "yes" "test" "source")}
      {Lisp-Entry "jazz.type-tests" #f 3933 8 3933 23 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.not-type-tests" #f 3975 8 3975 27 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.restrict-type" #f 3982 9 3982 27 ("jazz.new-restriction-type" "type" "base")}
      {Lisp-Entry "jazz.restriction-of?" #f 3986 9 3986 29 ("%%get-restriction-type-type" "jazz.Restriction-Type" "%%class-is?" "and" "class" "type")}
      {Lisp-Entry "jazz.complement-type" #f 3991 9 3991 29 ("jazz.new-complement-type" "jazz.new-restriction-type" "%%get-restriction-type-type" "%%get-complement-type-type" "%%get-restriction-type-base" "%%eq?" "jazz.Complement-Type" "jazz.restriction-of?" "and" "if" "type" "base")}
      {Lisp-Entry "jazz.branch-types" #f 3998 9 3998 26 ("cons" "process-expr" "environment" "test")
        {Lisp-Entry "process-not" #f 3999 11 3999 22 ("process-expr" "revenv" "env" "expr")}
        {Lisp-Entry "process-and" #f 4002 11 4002 22 ("%%cons" "%%cdr" "process-expr" "newenv" "%%car" "expr" "%%null?" "if" "augmented" "scan" "iter" "let" "env" "expr-list")}
        {Lisp-Entry "process-or" #f 4010 11 4010 21 ("%%cons" "%%cdr" "process-expr" "newenv" "%%car" "expr" "%%null?" "if" "augmented" "scan" "iter" "let" "env" "expr-list")}
        {Lisp-Entry "process-is" #f 4018 11 4018 21 ("%%cons" "%%cdr" "no" "%%car" "jazz.new-restricted-binding" "list" "jazz.new-annotated-frame" "cons" "yes" "jazz.Pair" "jazz.Null" "jazz.List" "%%eq?" "no-type" "else" "jazz.resolve-declaration" "jazz.Declaration" "%%get-reference-binding" "binding" "jazz.Reference" "%%class-is?" "jazz.type?" "cond" "yes-type" "let" "if" "extract-binding" "actual-type" "origin" "receive" "env" "type-expr" "expr")}
        {Lisp-Entry "extract-binding" #f 4051 11 4051 26 ("else" "%%get-lexical-binding-type" "jazz.Declaration" "values" "%%get-annotated-variable-variable" "origin" "%%car" "jazz.find-annotated" "actual-type" "actual-variable" "frame" "receive" "jazz.Variable" "cond" "%%get-reference-binding" "binding" "let" "jazz.Reference" "%%class-is?" "if" "env" "expr")}
        {Lisp-Entry "revenv" #f 4065 11 4065 17 ("%%car" "%%cdr" "%%cons" "env")}
        {Lisp-Entry "process-expr" #f 4068 11 4068 23 ("%%cons" "%%cdr" "no" "%%get-nillable-type-type" "jazz.new-restricted-binding" "list" "jazz.new-annotated-frame" "cons" "yes" "jazz.Nillable-Type" "extract-binding" "actual-type" "origin" "receive" "jazz.not-type-tests" "jazz.type-tests" "%%table-ref" "class" "else" "revenv" "jazz.dialect.language.is-not?" "%%cadr" "process-is" "2" "jazz.dialect.kernel.is?" "%%car" "process-not" "1" "%%fx=" "scheme.dialect.kernel.not" "case" "%%length" "count" "%%get-call-arguments" "arguments" "%%get-declaration-locator" "operator-locator" "jazz.Declaration" "%%get-reference-binding" "operator-binding" "jazz.Reference" "if" "%%get-call-operator" "operator" "let" "jazz.Call" "%%get-or-expressions" "process-or" "jazz.Or" "%%get-and-expressions" "process-and" "jazz.And" "%%class-is?" "cond" "env" "expr")}}
      {Lisp-Entry "jazz.emit-expression" ("jazz.If") 4119 21 4119 41 ("%%get-expression-source" "%%get-code-type" "jazz.extend-type" "jazz.simplify-begin" "jazz.sourcified-form" "if" "jazz.new-code" "%%get-if-no" "no" "%%get-if-yes" "yes" "jazz.emit-expression" "jazz.branch-types" "no-environment" "yes-environment" "jazz.bind" "expression" "%%get-if-test" "test" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.If") 4133 21 4133 41 ("%%get-if-no" "jazz.fold-expressions" "%%get-if-yes" "%%get-if-test" "jazz.fold-expression" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Cond" #f 4148 27 4148 36 ()}
      {Lisp-Entry "jazz.new-cond" #f 4151 9 4151 22 ("jazz.Cond" "jazz.allocate-cond" "clauses" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Cond") 4155 21 4155 41 ("%%get-expression-source" "%%get-code-type" "lambda" "map" "jazz.extend-types" "cdr" "cons" "jazz.emit-expression" "jazz.sourcified-form" "else" "'else" "%%not" "output" "jazz.branch-types" "no-environment" "yes-environment" "jazz.bind" "%%cdr" "body" "%%car" "test" "car" "clause" "null?" "if" "recurse" "cond" "jazz.new-code" "expression" "%%get-cond-clauses" "clauses" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Cond") 4179 21 4179 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.Case" #f 4191 27 4191 36 ()}
      {Lisp-Entry "jazz.new-case" #f 4194 9 4194 22 ("jazz.Case" "jazz.allocate-case" "clauses" "target" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Case") 4198 21 4198 41 ("%%get-expression-source" "%%get-code-type" "jazz.extend-types" ",tries" "%%car" "tries" "emited-clause" "jazz.sourcified-form" "case" "jazz.new-code" "jazz.emit-expression" "%%cdr" "body" "clause" "lambda" "map" "emited-clauses" "%%get-case-clauses" "clauses" "expression" "%%get-case-target" "target" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Case") 4218 21 4218 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.And" #f 4230 27 4230 35 ()}
      {Lisp-Entry "jazz.new-and" #f 4233 9 4233 21 ("jazz.And" "jazz.allocate-and" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.And") 4237 21 4237 41 ("%%get-expression-source" "jazz.Any" "expression" "%%get-and-expressions" "jazz.emit-expressions" "jazz.codes-forms" "and" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.And") 4244 21 4244 41 ("%%get-and-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Or" #f 4257 27 4257 34 ()}
      {Lisp-Entry "jazz.new-or" #f 4260 9 4260 20 ("jazz.Or" "jazz.allocate-or" "expressions" "source")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Or") 4264 21 4264 41 ("%%get-expression-source" "jazz.Any" "expression" "%%get-or-expressions" "jazz.emit-expressions" "jazz.codes-forms" "or" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Or") 4271 21 4271 41 ("%%get-or-expressions" "jazz.fold-expressions" "expression" "s" "k" "f")}
      {Lisp-Entry "jazz.Declare" #f 4284 27 4284 39 ()}
      {Lisp-Entry "jazz.new-declare" #f 4287 9 4287 25 ("jazz.Declare" "jazz.allocate-declare" "declarations")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Declare") 4291 21 4291 41 ("jazz.Any" ",@declarations" "declare" "jazz.new-code" "expression" "%%get-declare-declarations" "declarations" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Declare") 4299 21 4299 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.C-Include" #f 4311 27 4311 41 ()}
      {Lisp-Entry "jazz.new-c-include" #f 4314 9 4314 27 ("jazz.C-Include" "jazz.allocate-c-include" "name")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Include") 4318 21 4318 41 ("jazz.Any" "%%string-append" "c-declare" "jazz.new-code" "expression" "%%get-c-include-name" "name" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Include") 4326 21 4326 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.C-Declare" #f 4338 27 4338 41 ()}
      {Lisp-Entry "jazz.new-c-declare" #f 4341 9 4341 27 ("jazz.C-Declare" "jazz.allocate-c-declare" "code")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Declare") 4345 21 4345 41 ("jazz.Any" ",code" "c-declare" "jazz.new-code" "expression" "%%get-c-declare-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Declare") 4353 21 4353 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.C-Named-Declare-Declaration" #f 4365 27 4365 59 ()}
      {Lisp-Entry "jazz.new-c-named-declare-declaration" #f 4368 9 4368 45 ("jazz.setup-declaration" "jazz.C-Named-Declare-Declaration" "jazz.allocate-c-named-declare-declaration" "new-declaration" "let" "code" "parent" "attributes" "compatibility" "access" "type" "name")}
      {Lisp-Entry "jazz.emit-declaration" ("jazz.C-Named-Declare-Declaration") 4374 21 4374 42 ("environment")}
      {Lisp-Entry "jazz.expand-referenced-declaration" ("jazz.C-Named-Declare-Declaration") 4378 21 4378 55 (",code" "c-declare" "declaration" "%%get-c-named-declare-declaration-code" "code" "let")}
      {Lisp-Entry "jazz.C-Initialize" #f 4391 27 4391 44 ()}
      {Lisp-Entry "jazz.new-c-initialize" #f 4394 9 4394 30 ("jazz.C-Initialize" "jazz.allocate-c-initialize" "code")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Initialize") 4398 21 4398 41 ("jazz.Any" ",code" "c-initialize" "jazz.new-code" "expression" "%%get-c-initialize-code" "code" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Initialize") 4406 21 4406 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.C-Function" #f 4418 27 4418 42 ()}
      {Lisp-Entry "jazz.new-c-function" #f 4421 9 4421 28 ("jazz.C-Function" "jazz.allocate-c-function" "expansion")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.C-Function") 4425 21 4425 41 ("jazz.Any" "expression" "%%get-c-function-expansion" "jazz.new-code" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.C-Function") 4432 21 4432 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.Parameterize" #f 4444 27 4444 44 ()}
      {Lisp-Entry "jazz.new-parameterize" #f 4447 9 4447 30 ("jazz.Parameterize" "jazz.allocate-parameterize" "body" "bindings")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Parameterize") 4451 21 4451 41 ("%%get-code-type" "jazz.sourcified-form" "%%cdr" "value" "%%car" "variable" "binding" "lambda" "map" "parameterize" "jazz.new-code" "jazz.emit-expression" "body-code" "%%get-parameterize-body" "body" "expression" "%%get-parameterize-bindings" "bindings" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Parameterize") 4467 21 4467 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.Time-Special" #f 4479 27 4479 44 ()}
      {Lisp-Entry "jazz.new-time-special" #f 4482 9 4482 30 ("jazz.Time-Special" "jazz.allocate-time" "expression")}
      {Lisp-Entry "jazz.emit-expression" ("jazz.Time-Special") 4486 21 4486 41 ("jazz.Any" "jazz.emit-expression" "jazz.sourcified-form" "time" "jazz.new-code" "%%get-time-special-expression" "expression" "let" "environment" "declaration")}
      {Lisp-Entry "jazz.fold-expression" ("jazz.Time-Special") 4495 21 4495 41 ("s" "k" "f")}
      {Lisp-Entry "jazz.emit-namespace-statements" #f 4507 9 4507 39 ("jazz.queue-list" "jazz.sourcified-form" "jazz.emit-expression" "code" "jazz.emit-declaration" "jazz.enqueue" "jazz.Declaration" "%%class-is?" "if" "statement" "lambda" "for-each" "jazz.new-queue" "queue" "let" "environment" "declaration" "statements")}
      {Lisp-Entry "jazz.emit-statements-code" #f 4519 9 4519 34 ("jazz.new-code" "jazz.sourcified-form" "%%get-code-type" "set!" "jazz.emit-expression" "code" "jazz.emit-declaration" "jazz.Declaration" "%%class-is?" "if" "statement" "lambda" "map" "emited" "last-type" "let" "environment" "declaration" "statements")}
      {Lisp-Entry "jazz.fold-statement" #f 4532 9 4532 28 ("jazz.fold-expression" "jazz.fold-declaration" "jazz.Declaration" "%%class-is?" "if" "s" "k" "f" "statement")}
      {Lisp-Entry "jazz.fold-statements" #f 4538 9 4538 29 ("%%cdr" "jazz.fold-statements" "%%car" "jazz.fold-statement" "%%null?" "if" "seed" "s" "k" "f" "statements")}
      {Lisp-Entry "jazz.walk" #f 4589 9 4589 18 ("jazz.walk-constant" "else" "jazz.walk-form" "%%pair?" "jazz.walk-symbol" "%%symbol?" "cond" "%%source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-list" #f 4599 9 4599 23 ("jazz.queue-list" "jazz.walk" "jazz.enqueue" "continuation-capture" "form" "lambda" "for-each" "jazz.new-queue" "queue" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-body" #f 4609 9 4609 23 ("jazz.queue-list" "jazz.walk-internal-define" "map" "jazz.enqueue" "jazz.new-variable" "variable" "%%symbol?" "name" "%%desourcify" "%%cadr" "signature" "internal-define" "augmented-environment" "jazz.new-queue" "variables" "jazz.walk-list" "jazz.new-body" "%%car" "%%eq?" "%%null?" "or" "scan" "iter" "expressions" "'expressions" "else" "defines" "'defines" "%%cons" "jazz.define-form?" "%%source-code" "%%cdr" "jazz.error" "%%neq?" "set!" "%%not" "if" "substate" "sub" "for-each" "state" "jazz.begin-form?" "cond" "form" "lambda" "process" "letrec" "internal-defines" "let" "form-list" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-internal-define" #f 4652 9 4652 34 ("jazz.walk" "jazz.new-internal-define" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "%%source-code" "%%cdr" "jazz.parse-define" "parameters" "value" "specifier" "name" "receive" "variable" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.parse-define" #f 4658 9 4658 26 (",@body" ",@specifier-list" ",parameters" "%%list" "specifier-list" "body" "%%desourcify" "parameters" "values" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "name" "let" "%%car" "%%source-code" "%%symbol?" "if" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-quote" #f 4677 9 4677 24 ("jazz.walk-constant" "jazz.Null" "quote" "jazz.new-constant" "%%null?" "if" "%%cadr" "expression" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-keyword" #f 4685 9 4685 26 ("jazz.Keyword" "jazz.new-constant" "keyword" "walker")}
      {Lisp-Entry "jazz.walk-enumerator" #f 4689 9 4689 29 ("jazz.Symbol" "quote" "'quote" "%%list" "jazz.new-constant" "enumerator" "walker")}
      {Lisp-Entry "jazz.walk-constant" #f 4693 9 4693 27 ("jazz.register-literal" "else" "jazz.Pair" "jazz.scheme-pair-literal?" "jazz.Null" "%%null?" "jazz.Values" "%%values?" "jazz.U8Vector" "%%u8vector?" "jazz.Vector" "%%vector?" "jazz.Symbol" ",form-src" "quote" "%%symbol?" "jazz.Number" "%%number?" "jazz.Flonum" "%%flonum?" "jazz.Fixnum" "%%fixnum?" "jazz.Keyword" "%%keyword?" "jazz.String" "%%string?" "jazz.Char" "%%char?" "jazz.Boolean" "jazz.new-constant" "%%boolean?" "cond" "%%source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.scheme-pair-literal?" #f 4725 9 4725 34 ("%%cdr" "%%car" "%%pair?" "and" "%%symbol?" "%%number?" "%%keyword?" "%%string?" "%%char?" "%%boolean?" "%%null?" "or" "expr" "lambda" "scheme-data?" "letrec" "form")}
      {Lisp-Entry "jazz.Literal-Constructors" #f 4745 8 4745 33 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.register-literal-constructor" #f 4749 9 4749 42 ("jazz.Literal-Constructors" "%%table-set!" "constructor" "name")}
      {Lisp-Entry "jazz.require-literal-constructor" #f 4753 9 4753 41 ("jazz.error" "jazz.Literal-Constructors" "%%table-ref" "or" "name")}
      {Lisp-Entry "jazz.construct-literal" #f 4758 9 4758 31 ("%%cdr" "%%apply" "%%car" "jazz.require-literal-constructor" "constructor" "let" "%%null?" "if" "lst")}
      {Lisp-Entry "jazz.register-literal" #f 4765 9 4765 30 ("jazz.lookup-reference" "jazz.new-constant" "%%class-of" "%%get-category-name" "jazz.identifier-name" "class-name" "jazz.walk-literal" "%%cdr" "%%set-cdr!" "%%get-library-declaration-literals" "%%set-library-declaration-literals" "%%cons" "info" "%%get-declaration-locator" "%%symbol->string" "%%string-append" "jazz.generate-symbol" "name" "%%get-declaration-toplevel" "library-declaration" "let" "literal" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.get-registered-literal" #f 4779 9 4779 36 ("%%cadr" "if" "%%get-library-declaration-literals" "assq" "pair" "let" "literal" "library-declaration")}
      {Lisp-Entry "jazz.walk-literal" #f 4786 9 4786 26 ("3" "0" "%%class-dispatch" "else" "cdr" "car" "cons" "%%pair?" "cond" "jazz.walk" "jazz.walker-environment" "%%cons" "environment" "%%get-declaration-toplevel" "library-declaration" "let*" "literal" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.make-symbolic-chars" #f 4798 9 4798 33 ("eq?" "%%cdr" "integer->char" "%%car" "%%cons" "pair" "lambda" "map" "%%list->table" "alist")}
      {Lisp-Entry "jazz.Symbolic-Chars" #f 4806 8 4806 27 ("#xA9" "copyright" "#x7F" "delete" "#x7D" "close-brace" "#x7B" "open-brace" "#x60" "backquote" "#x5F" "underscore" "#x5E" "exponential" "#x5D" "close-bracket" "#x5C" "backslash" "#x5B" "open-bracket" "#x40" "at" "#x3F" "question-mark" "#x3B" "semi-colon" "#x3A" "colon" "#x2F" "slash" "#x2E" "period" "#x2D" "minus" "#x2C" "comma" "#x2B" "plus" "#x2A" "times" "#x29" "close-parenthesis" "#x28" "open-parenthesis" "#x27" "quote" "#x26" "ampersand" "#x23" "sharp" "#x22" "double-quote" "#x21" "exclamation-point" "#x20" "space" "#x1F" "down-arrow" "#x1E" "up-arrow" "#x1D" "right-arrow" "#x1C" "left-arrow" "#x1B" "escape" "#x0D" "return" "#x0C" "page-down" "#x0B" "page-up" "#x0A" "linefeed" "#x09" "tab" "#x08" "backspace" "#x05" "info" "#x04" "end" "#x03" "enter" "#x01" "home" "#x00" "zero" "jazz.make-symbolic-chars")}
      {Lisp-Entry "jazz.symbolic-char" #f 4854 9 4854 27 ("jazz.Symbolic-Chars" "%%table-ref" "name")}
      {Lisp-Entry "jazz.register-variable" #f 4863 9 4863 31 ("%%get-library-declaration-variables" "jazz.enqueue" "cons" "variable" "%%get-declaration-locator" "%%symbol->string" "%%string-append" "jazz.generate-symbol" "symbol" "%%get-declaration-toplevel" "library-declaration" "let" "value" "suffix" "declaration")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Walker") 4876 30 4876 46 ("symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol" ("jazz.Walker") 4879 21 4879 37 ("jazz.walk-symbol-reference" "else" "walker" "jazz.walk-enumerator" "jazz.enumerator?" "cond" "%%source-code" "symbol" "let" "symbol-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-setbang" #f 4887 9 4887 26 ("jazz.error" "jazz.walk-symbol-assignment" "%%symbol?" "if" "%%cddr" "%%car" "value" "%%cadr" "%%source-code" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.lookup-symbol" #f 4895 9 4895 27 ("jazz.walk-binding-lookup" "binding" "lambda" "jazz.find-in" "jazz.lookup-composite" "jazz.composite-name?" "if" "symbol" "environment" "walker")}
      {Lisp-Entry "jazz.lookup-composite" #f 4903 9 4903 30 ("%%list" "jazz.lookup-subpath" "if" "jazz.locate-library-declaration" "library-decl" "let" "jazz.split-composite" "name" "library-name" "receive" "symbol" "environment" "walker")}
      {Lisp-Entry "jazz.lookup-subpath" #f 4911 9 4911 28 ("%%cdr" "jazz.lookup-subpath" "%%car" "jazz.lookup-declaration" "subdecl" "let" "%%null?" "if" "subpath" "declaration")}
      {Lisp-Entry "jazz.lookup-accessible/compatible-symbol" #f 4920 9 4920 49 ("jazz.register-autoload-declaration" "%%get-declaration-toplevel" "library" "jazz.Autoload-Declaration" "jazz.validate-compatibility" "jazz.validate-access" "begin" "jazz.Declaration" "%%class-is?" "and" "if" "%%source-code" "jazz.lookup-symbol" "referenced-declaration" "let" "symbol-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-access" ("jazz.Walker") 4932 30 4932 50 ("referenced-declaration" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-access" ("jazz.Walker") 4935 21 4935 41 ("jazz.unspecified" "referenced-declaration" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-compatibility" #f 4939 9 4939 36 ("jazz.walk-warning" "%%get-declaration-locator" "referenced-locator" "let" "deprecated" "'deprecated" "%%get-declaration-compatibility" "%%eq?" "if" "referenced-declaration" "declaration" "walker")}
      {Lisp-Entry "jazz.walk-symbol-reference" #f 4950 9 4950 35 ("jazz.walk-free-reference" "jazz.new-reference" "jazz.walk-binding-referenced" "jazz.Variable" "%%class-is?" "begin" "if" "jazz.lookup-accessible/compatible-symbol" "binding" "let" "symbol-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-free-reference" ("jazz.Walker") 4960 30 4960 54 ("symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-reference" ("jazz.Walker") 4963 21 4963 45 ("walker" "jazz.walk-unresolved" "symbol-src" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Walker") 4972 30 4972 57 ("value" "symbol" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-symbol-assignment" ("jazz.Walker") 4975 21 4975 48 ("jazz.walk-free-assignment" "jazz.walk" "jazz.new-assignment" "jazz.walk-binding-validate-assignment" "begin" "if" "walker" "jazz.lookup-accessible/compatible-symbol" "binding" "let" "value" "symbol" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" ("jazz.Walker") 4984 30 4984 55 ("symbol" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-free-assignment" ("jazz.Walker") 4987 21 4987 46 ("walker" "jazz.walk-unresolved" "symbol" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Walker") 4996 30 4996 44 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-form" ("jazz.Walker") 4999 21 4999 35 ("jazz.walk-call" "jazz.walk" "jazz.walk-binding-expand-form" "expansion" "jazz.walk-binding-expandable?" "jazz.walk-binding-walk-form" "jazz.walk-binding-walkable?" "if" "walker" "jazz.lookup-accessible/compatible-symbol" "%%symbol?" "and" "binding" "%%source-code" "%%car" "%%desourcify" "procedure-expr" "let" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.lookup-macro-form" #f 5018 9 5018 31 ("jazz.walk-binding-expandable?" "and" "if" "jazz.lookup-accessible/compatible-symbol" "binding" "let" "symbol" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.expand-macros" #f 5025 9 5025 27 ("jazz.expand-macros" "jazz.walk-binding-expand-form" "expansion" "jazz.lookup-macro-form" "%%symbol?" "and" "binding" "%%car" "procedure-expr" "let" "%%pair?" "%%not" "if" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-call" #f 5041 9 5041 23 ("jazz.walk-list" "jazz.walk" "lambda" "continuation-capture" "jazz.new-call" "jazz.desourcify-list" "jazz.walk-binding-validate-call" "if" "%%cdr" "arguments" "%%source-code" "%%car" "operator" "let" "form-src" "procedure-binding" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.validate-arguments" ("jazz.Walker") 5053 30 5053 53 ("arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.validate-arguments" ("jazz.Walker") 5056 21 5056 44 ("walker" "jazz.walk-error" "%%get-declaration-locator" "locator" "%%fx=" "%%not" "%%fx<" "if" "%%length" "passed" "%%get-signature-rest" "rest" "%%get-signature-mandatory" "mandatory" "let" "arguments" "signature" "declaration" "source-declaration" "resume")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Walker") 5071 30 5071 52 ("form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.validate-proclaim" ("jazz.Walker") 5074 21 5074 43 ("walker" "jazz.walk-error" "jazz.Library-Declaration" "%%class-is?" "%%not" "if" "form-src" "environment" "declaration" "resume")}
      {Lisp-Entry "jazz.walk-proclaim" #f 5079 9 5079 27 ("jazz.new-proclaim" "%%cdr" "clauses" "%%desourcify" "form" "let" "jazz.validate-proclaim" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.native-modifiers" #f 5091 8 5091 29 ()}
      {Lisp-Entry "jazz.native-keywords" #f 5095 8 5095 28 ()}
      {Lisp-Entry "jazz.parse-native" #f 5099 9 5099 26 ("values" "%%null?" "%%assert" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "name" "let" "jazz.native-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native-declaration" #f 5108 9 5108 37 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-export-declaration" "new-declaration" "jazz.Any" "jazz.walk-specifier" "if" "type" "let" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native" "compatibility" "access" "specifier" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-native" #f 5117 9 5117 25 ("jazz.find-form-declaration" "jazz.parse-exported-symbol" "symbol" "%%cdr" "jazz.parse-native" "compatibility" "access" "specifier" "name" "receive" "%%desourcify" "form" "let" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.macro-modifiers" #f 5129 8 5129 28 ()}
      {Lisp-Entry "jazz.parse-macro" #f 5134 9 5134 25 ("values" "parameters" "jazz.Any" "type" "name" "%%cdr" "body" "%%car" "%%desourcify" "signature" "let*" "jazz.macro-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-macro-declaration" #f 5144 9 5144 36 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-macro-declaration" "new-declaration" "jazz.walk-parameters" "signature" "let" "%%cdr" "jazz.parse-macro" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-macro" #f 5152 9 5152 24 ("%%set-declaration-source" "jazz.walk-body" "%%set-macro-declaration-body" "%%set-macro-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "%%source-code" "%%cdr" "jazz.parse-macro" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.syntax-modifiers" #f 5168 8 5168 29 ()}
      {Lisp-Entry "jazz.parse-syntax" #f 5173 9 5173 26 ("values" "parameters" "jazz.Any" "type" "name" "%%cdr" "body" "%%car" "%%desourcify" "signature" "let*" "jazz.syntax-modifiers" "jazz.parse-modifiers" "compatibility" "access" "receive" "rest" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-syntax-declaration" #f 5183 9 5183 37 ("jazz.add-declaration-child" "effective-declaration" "jazz.new-syntax-declaration" "new-declaration" "jazz.walk-parameters" "signature" "let" "%%cdr" "jazz.parse-syntax" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-syntax" #f 5191 9 5191 25 ("%%set-declaration-source" "jazz.walk-body" "%%set-syntax-declaration-body" "%%set-syntax-declaration-signature" "jazz.walk-parameters" "augmented-environment" "signature" "jazz.find-form-declaration" "new-declaration" "let*" "%%source-code" "%%cdr" "jazz.parse-syntax" "body" "parameters" "compatibility" "access" "type" "name" "receive" "form-src" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.walk-parameters" #f 5212 9 5212 29 ("values" "jazz.queue-list" "jazz.new-signature" "signature" "jazz.new-optional-parameter" "optional-parameter" "'optional" "null?" "jazz.new-named-parameter" "named-parameter" "%%keyword->string" "%%string->symbol" "'named" "%%cddr" "default" "keyword" "%%keyword?" "jazz.walk" "jazz.Any" "jazz.new-dynamic-parameter" "dynamic-parameter" "%%cadr" "variable" "jazz.specifier->name" "code" "specifier/code" "let*" "jazz.specifier?" "or" "%%pair?" "and" "jazz.walk-error" "jazz.enqueue" "jazz.new-parameter" "positional-parameter" "jazz.walk-specifier" "type" "%%eq?" "if" "specifier" "lambda" "%%cdr" "jazz.parse-specifier" "%%car" "parameter" "else" "%%cons" "%%when" "set!" "jazz.List" "jazz.new-rest-parameter" "parameter-expression" "%%symbol?" "%%null?" "cond" "scan" "iter" "augmented-environment" "rest" "named" "optional" "jazz.new-queue" "positional" "'positional" "section" "let" "walk?" "extended?" "parameters" "environment" "declaration" "resume" "walker")}
      {Lisp-Entry "jazz.emit-signature-casts" #f 5297 9 5297 34 ("jazz.queue-list" "%%not" "%%get-signature-named" "%%get-signature-optional" "%%get-signature-positional" "for-each" "jazz.enqueue" "jazz.new-queue" "set!" "not" "begin" "jazz.emit-binding-reference" "jazz.emit-parameter-cast" "cast" "jazz.Any" "%%neq?" "and" "if" "%%get-lexical-binding-type" "type" "parameter" "process" "define" "queue" "let" "environment" "source-declaration" "signature")}
      {Lisp-Entry "jazz.emit-signature" #f 5319 9 5319 28 ("jazz.queue-list" "#!rest" "#!key" "#!optional" "%%null?" "%%not" "%%when" "for-each" "jazz.emit-parameter" "jazz.enqueue" "parameter" "emit" "define" "jazz.new-queue" "queue" "%%get-signature-rest" "rest" "%%get-signature-named" "named" "%%get-signature-optional" "optional" "%%get-signature-positional" "positional" "let" "environment" "declaration" "signature")}
      {Lisp-Entry "jazz.Catalog" #f 5348 8 5348 20 ("eq?" "test:" "%%make-table")}
      {Lisp-Entry "jazz.get-catalog" #f 5352 9 5352 25 ("jazz.Catalog")}
      {Lisp-Entry "jazz.get-catalog-entry" #f 5356 9 5356 31 ("jazz.Catalog" "%%table-ref" "module-name")}
      {Lisp-Entry "jazz.set-catalog-entry" #f 5360 9 5360 31 ("jazz.Catalog" "%%table-set!" "entry" "module-name")}
      {Lisp-Entry "jazz.call-with-catalog-entry-lock" #f 5364 9 5364 42 ("jazz.get-catalog-entry" "%%eq?" "if" "jazz.pop-load-stack" ":walk" "':walk" "jazz.push-load-stack" ":loading" "':loading" "jazz.set-catalog-entry" "dynamic-wind" "lambda" "jazz.call-with-load-lock" "thunk" "module-name")}
      {Lisp-Entry "jazz.locate-toplevel-declaration" #f 5378 9 5378 41 ("else" "jazz.set-catalog-entry" "%%not" "if" "jazz.load-toplevel-declaration" "declaration" "lambda" "jazz.call-with-catalog-entry-lock" "jazz.error" ":loading" "case" "jazz.get-catalog-entry" "entry" "let" "error?" "#!optional" "module-name")}
      {Lisp-Entry "jazz.locate-library-declaration" #f 5396 9 5396 40 ("jazz.Library-Declaration" "%%class-is?" "%%assert" "jazz.locate-toplevel-declaration" "declaration" "let" "error?" "#!optional" "module-name")}
      {Lisp-Entry "jazz.load-toplevel-declaration" #f 5402 9 5402 39 ("lambda" "jazz.parse-verbose?" "jazz.with-verbose" "jazz.parse-library-declaration" "library" "%%cdr" "jazz.parse-module-declaration" "module" "%%car" "case" "jazz.requested-module-resource" "jazz.requested-module-name" "parameterize" "jazz.read-toplevel-form" "form" "load-declaration" "define" "jazz.resource-pathname" "source" "jazz.find-module-src" "src" "let" "module-name")}
      {Lisp-Entry "jazz.parse-read?" #f 5420 8 5420 24 ("make-parameter")}
      {Lisp-Entry "jazz.read-toplevel-form" #f 5424 9 5424 32 ("jazz.error" "library" "module" "%%car" "%%memq" "%%pair?" "and" "or" "jazz.read-source-first-expr" "values" "%%eof-object?" "%%not" "read" "let" "not" "if" "jazz.parse-read?" "parameterize" "port" "cr-lf" "'cr-lf" "eol-encoding:" "path:" "list" "call-with-input-file" "lambda" "jazz.pathname-extension" "jazz.with-extension-reader" "extraneous?" "form" "receive" "read-source?" "parse-read?" "#!key" "source")}
      {Lisp-Entry "jazz.Core-Dialect" #f 5448 27 5448 44 ()}
      {Lisp-Entry "jazz.new-core-dialect" #f 5451 9 5451 30 ("jazz.Core-Dialect" "jazz.allocate-core-dialect")}
      {Lisp-Entry "jazz.dialect-name" ("jazz.Core-Dialect") 5455 21 5455 38 ("'core")}
      {Lisp-Entry "jazz.dialect-walker" ("jazz.Core-Dialect") 5459 21 5459 40 ("jazz.new-core-walker")}
      {Lisp-Entry "jazz.Core-Walker" #f 5471 27 5471 43 ()}
      {Lisp-Entry "jazz.new-core-walker" #f 5474 9 5474 29 ("jazz.Core-Walker" "jazz.allocate-core-walker")}}})
"wallpaper"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "preference" "wallpaper.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.preference.wallpaper" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Wallpaper-Preferences" #f 52 7 52 28 ("title:" "Preferences")
        {Lisp-Entry "active" #f 55 12 55 18 ("generate")}
        {Lisp-Entry "can-rename-component?" #f 67 11 67 32 ()}
        {Lisp-Entry "can-delete-component?" #f 71 11 71 32 ()}
        {Lisp-Entry "can-move-component?" #f 75 11 75 30 ()}
        {Lisp-Entry "can-copy-component?" #f 79 11 79 30 ()}
        {Lisp-Entry "get-addable-classes" #f 83 11 83 30 ("Wallpaper-Configuration" "list")}
        {Lisp-Entry "get-addable-details" #f 88 11 88 30 ("active?" "random?" "recursive?" "period" "favorites" "startup" "mode" "directory" "100" "name-info")}}
      {Lisp-Entry "Wallpaper-Configuration" #f 105 7 105 30 ("300000" "period:" "favorites:" "startup:" "Bitmap-Resource" "icon:" "Preferences")
        {Lisp-Entry "directory" #f 108 12 108 21 ("generate")}
        {Lisp-Entry "mode" #f 109 12 109 16 ("generate")}
        {Lisp-Entry "startup" #f 110 12 110 19 ("generate")}
        {Lisp-Entry "favorites" #f 111 12 111 21 ("generate")}
        {Lisp-Entry "period" #f 112 12 112 18 ("generate")}
        {Lisp-Entry "recursive?" #f 113 12 113 22 ("generate")}
        {Lisp-Entry "random?" #f 114 12 114 19 ("generate")}
        {Lisp-Entry "active?" #f 115 12 115 19 ("generate")}
        {Lisp-Entry "get-domain" #f 127 16 127 26 ("nextmethod" "else" "Boolean-Domain" "new" "active?" "random?" "recursive?" "field-name" "case" "property")}
        {Lisp-Entry "get-class-presentation" #f 138 16 138 38 ()}
        {Lisp-Entry "property-presentation" #f 142 16 142 37 ("nextmethod" "else" "active?" "random?" "recursive?" "period" "favorites" "startup" "mode" "directory" "field-name" "case" "property")}
        {Lisp-Entry "get-row-instance" #f 155 11 155 27 ("nextmethod" "else" "Boolean-Row" "active?" "random?" "recursive?" "Directory-Row" "new" "directory" "field-name" "case" "property")}
        {Lisp-Entry "get-categorized-properties" #f 162 11 162 37 ("active?" "random?" "recursive?" "period" "favorites" "startup" "mode" "directory")}}}})
"windows"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "utilities" "platform" "windows.jazz"} 1226584789
    {Lisp-Entry "jazz.utilities.platform.windows" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "bell" #f 45 20 45 24 ("MB_ICONEXCLAMATION" "MessageBeep")}
      {Lisp-Entry "rect-intersects-region?" #f 49 20 49 43 ("get-handle" "RectInRegion" "get-height" "get-width" "+" "new-RECT" "rect" "with" "region" "size" "v" "h")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "platform" "windows.jazz"} 1227095261
    {Lisp-Entry "jazz.ui.window.platform.windows" #f 39 9 39 40 ("message-callback" "set-process-hwnd-message" "register-window-class" "jazz")
      {Lisp-Entry "unprocessed" #f 61 19 61 30 ("unprocessed")}
      {Lisp-Entry "processed" #f 62 19 62 28 ("processed")}
      {Lisp-Entry "processed-result" #f 65 13 65 29 ("cadr" "0" "cdr" "null?" "processed" "'processed" "car" "eq?" "pair?" "and" "if" "return")}
      {Lisp-Entry "Windows-Table" #f 78 19 78 32 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "get-window" #f 82 27 82 37 ("Windows-Table" "table-ref" "foreign-address" "foreign?" "if" "let" "hwnd")}
      {Lisp-Entry "set-window" #f 87 27 87 37 ("foreign-address" "Windows-Table" "table-set!" "window" "hwnd")}
      {Lisp-Entry "in-creation" #f 92 12 92 23 ()}
      {Lisp-Entry "set-in-creation" #f 95 13 95 28 ("in-creation" "set!" "in")}
      {Lisp-Entry "get-in-creation" #f 99 13 99 28 ("in-creation")}
      {Lisp-Entry "window-class" #f 103 13 103 25 ()}
      {Lisp-Entry "class-style" #f 108 13 108 24 ("CS_DBLCLKS" "bitwise-ior")}
      {Lisp-Entry "class-background" #f 112 13 112 29 ("COLOR_BTNFACE" "GetSysColorBrush")}
      {Lisp-Entry "get-class-background" #f 116 13 116 33 ("GCL_HBRBACKGROUND" "GetClassLong" "handle")}
      {Lisp-Entry "platform-erase-background" #f 120 13 120 38 ("unprocessed" "handle")}
      {Lisp-Entry "CLASS_ATOM" #f 124 12 124 22 ()}
      {Lisp-Entry "register-window-class" #f 128 13 128 34 ("RegisterClass" "CLASS_ATOM" "set!" "WNDCLASS-lpszClassName-set!" "WNDCLASS-lpszMenuName-set!" "WNDCLASS-hbrBackground-set!" "NULL" "WNDCLASS-hCursor-set!" "load-product-icon" "WNDCLASS-hIcon-set!" "WNDCLASS-hInstance-set!" "WNDCLASS-cbWndExtra-set!" "0" "WNDCLASS-cbClsExtra-set!" "call-process-hwnd-message" "WNDCLASS-lpfnWndProc-set!" "class-style" "WNDCLASS-style-set!" "WNDCLASS-make" "wc" "class-background" "background" "current-instance" "instance" "let")}
      {Lisp-Entry "load-product-icon" #f 145 13 145 30 ("LR_LOADFROMFILE" "16" "IMAGE_ICON" "NULL" "LoadImage" "file-exists?" "if" "format" "file" "jazz" "'jazz" "jazz-product" "either" "product" "let")}
      {Lisp-Entry "window-style" #f 156 13 156 25 ("else" "closable?:" "0" "WS_THICKFRAME" "not-found:" "sizable?:" "getf" "if" "WS_DLGFRAME" "WS_CAPTION" "WS_OVERLAPPED" "WS_BORDER" "Dialog" "WS_MINIMIZEBOX" "Toplevel" "WS_OVERLAPPEDWINDOW" "Palette" "WS_POPUP" "Popup" "WS_CLIPSIBLINGS" "WS_CLIPCHILDREN" "WS_SYSMENU" "WS_CHILD" "bitwise-ior" "Frame" "typecase" "rest" "window")}
      {Lisp-Entry "window-ex-style" #f 187 13 187 28 ("else" "WS_EX_TOPMOST" "Transient" "WS_EX_DLGMODALFRAME" "Dialog" "WS_EX_APPWINDOW" "Toplevel" "Palette" "WS_EX_TOOLWINDOW" "Popup" "typecase" "bitwise-ior" "0" "WS_EX_TRANSPARENT" "window-transparent?" "if" "transparent" "let" "rest" "window")}
      {Lisp-Entry "window-parent" #f 199 13 199 26 ("NULL" "get-handle" "if" "get-parent" "parent" "let" "window")}
      {Lisp-Entry "window-default-parent" #f 206 13 206 34 ("else" "get-toplevel" "Dialog" "get-stage" "Frame" "typecase" "window")}
      {Lisp-Entry "create-handle" #f 213 13 213 26 ("current-instance" "window-parent" "500" "0" "window-style" "NULL" "window-class" "hwnd-class" "either" "CLASS_ATOM" "window-ex-style" "CreateWindowEx" "else" "GetDesktopWindow" "Desktop" "typecase" "rest" "window")}
      {Lisp-Entry "prepare-handle" #f 229 13 229 27 ("DragAcceptFiles" "GetLastError" "window-parent" "parent:" "window-ex-style" "ex-style:" "window-style" "style:" "window-class" "class:" "list" "error" "not" "if" "create-handle" "let" "set-in-creation" "others" "hwnd" "bind-keywords" "rest" "window")}
      {Lisp-Entry "bring-window-to-top" #f 241 13 241 32 ("BringWindowToTop" "hwnd")}
      {Lisp-Entry "show-window" #f 245 13 245 24 ("SW_SHOWNORMAL" "ShowWindow" "handle")}
      {Lisp-Entry "show-maximized" #f 249 13 249 27 ("SW_MAXIMIZE" "ShowWindow" "handle")}
      {Lisp-Entry "show-restored" #f 253 13 253 26 ("SW_RESTORE" "ShowWindow" "handle")}
      {Lisp-Entry "hide-window" #f 257 13 257 24 ("SW_HIDE" "ShowWindow" "handle")}
      {Lisp-Entry "minimize-window" #f 261 13 261 28 ("SW_MINIMIZE" "ShowWindow" "handle")}
      {Lisp-Entry "maximize-window" #f 265 13 265 28 ("SW_MAXIMIZE" "ShowWindow" "handle")}
      {Lisp-Entry "restore-window" #f 269 13 269 27 ("SW_RESTORE" "ShowWindow" "handle")}
      {Lisp-Entry "destroy-window" #f 273 13 273 27 ("get-handle" "DestroyWindow" "window")}
      {Lisp-Entry "dispatch-message" #f 277 13 277 29 ("processed-result" "get-handle" "DefWindowProc" "unprocessed" "eq?" "if" "process-window-message" "return" "let" "lparam" "wparam" "msg" "window")}
      {Lisp-Entry "setup-events" #f 289 13 289 25 ("event-thread" "thread-priority-boost-set!" "NULL" "0" "get-toplevel-hwnd" "SetTimer" "get-events-single-threaded?" "if" "1" "events-heartbeat" "define")}
      {Lisp-Entry "prime-message-pump" #f 304 13 304 31 ("process-messages" "function" "new-thread")}
      {Lisp-Entry "process-messages" #f 310 13 310 29 ("thread-loop?" "when" "read" "loop" "current-thread" "thread" "QS_ALLINPUT" "open-event-queue" "port" "MSG-free" "PM_REMOVE" "0" "NULL" "PeekMessage" "while" "MSG-make" "let" "proper-tail-calls" "declare" "DispatchMessage" "TranslateMessage" "translate-shortcut" "unless" "function" "execute-event" "msg" "process-message" "define")}
      {Lisp-Entry "process-messages-single-threaded" #f 340 13 340 45 ("MSG-free" "0" "NULL" "GetMessage" "when" "loop" "MSG-make" "let" "proper-tail-calls" "declare" "DispatchMessage" "TranslateMessage" "translate-shortcut" "unless" "msg" "process-message" "define" "thunk")}
      {Lisp-Entry "callback-level" #f 362 12 362 26 ("0")}
      {Lisp-Entry "callback-thread-mutex" #f 365 12 365 33 ("callback-thread-mutex" "'callback-thread-mutex" "make-mutex")}
      {Lisp-Entry "callback-thread-condition" #f 368 12 368 37 ("callback-thread-condition" "'callback-thread-condition" "make-condition")}
      {Lisp-Entry "message-callback" #f 372 13 372 29 ("callback-thread-condition" "current-thread" "interleaved-problem-detected" "'interleaved-problem-detected" "terminal" "decrease!" "=" "iterate" "call-event" "unwind-protect" "mutex-unlock!" "prog1" "callback-level" "increase!" "callback-thread-mutex" "mutex-lock!" "begin" "level" "1" "exit" "reason:" "snapshot-process" "primordial-thread?" "get-events-single-threaded?" "dispatch-message" "DefWindowProc" "if" "set-in-creation" "set-window" "set-handle" "set!" "get-in-creation" "not" "and" "when" "get-window" "window" "let" "process" "define" "lparam" "wparam" "msg" "hwnd")}
      {Lisp-Entry "Symbolic-Keys" #f 427 19 427 32 ("eqv?" "test:" "Divide" "'Divide" "VK_DIVIDE" "Multiply" "'Multiply" "VK_MULTIPLY" "Subtract" "'Subtract" "VK_SUBTRACT" "Add" "'Add" "VK_ADD" "Delete" "'Delete" "VK_DELETE" "Pause" "'Pause" "VK_PAUSE" "Insert" "'Insert" "VK_INSERT" "Next" "'Next" "VK_NEXT" "Prior" "'Prior" "VK_PRIOR" "Down" "'Down" "VK_DOWN" "Right" "'Right" "VK_RIGHT" "Up" "'Up" "VK_UP" "Left" "'Left" "VK_LEFT" "End" "'End" "VK_END" "Home" "'Home" "VK_HOME" "Tab" "'Tab" "VK_TAB" "Space" "'Space" "VK_SPACE" "Return" "'Return" "VK_RETURN" "Backspace" "'Backspace" "VK_BACK" "Escape" "'Escape" "VK_ESCAPE" "F12" "'F12" "VK_F12" "F11" "'F11" "VK_F11" "F10" "'F10" "VK_F10" "F9" "'F9" "VK_F9" "F8" "'F8" "VK_F8" "F7" "'F7" "VK_F7" "F6" "'F6" "VK_F6" "F5" "'F5" "VK_F5" "F4" "'F4" "VK_F4" "F3" "'F3" "VK_F3" "F2" "'F2" "VK_F2" "F1" "'F1" "VK_F1" "VK_OEM_7" "VK_OEM_6" "VK_OEM_5" "VK_OEM_4" "VK_OEM_3" "VK_OEM_2" "VK_OEM_1" "VK_OEM_PERIOD" "VK_OEM_COMMA" "VK_OEM_PLUS" "VK_OEM_MINUS" "cons" "list" "list->table")}
      {Lisp-Entry "translate-shortcut" #f 476 13 476 31 ("Shortcut" "new" "get-application" "dispatch-shortcut" "MSG-wParam-ref" "WM_SYSKEYDOWN" "WM_KEYDOWN" "=" "if" "MSG-message-ref" "message" "integer->char" "Symbolic-Keys" "table-ref" "or" "VK_MENU" "VK_CONTROL" "VK_SHIFT" "/=" "and" "code" "key" ":control" "control-down?" ":shift" "shift-down?" ":alt" "alt-down?" "cons" "set!" "when" "modifier" "down?" "function" "try" "let" "modifiers" "define" "msg")}
      {Lisp-Entry "get-x-lparam" #f 510 12 510 24 ("signed-loword")}
      {Lisp-Entry "get-y-lparam" #f 511 12 511 24 ("signed-hiword")}
      {Lisp-Entry "get-wheel-delta-wparam" #f 512 12 512 34 ("signed-hiword")}
      {Lisp-Entry "process-window-message" #f 515 13 515 35 ("else" "timer-pulse" "WM_TIMER" "settings-change" "WM_SETTINGCHANGE" "drop-files" "WM_DROPFILES" "get-window" "focus-lose" "WM_KILLFOCUS" "focus-gain" "WM_SETFOCUS" "on-close" "WM_CLOSE" "activate-app" "WM_ACTIVATEAPP" "on-activate" "active" "'active" "inactive" "'inactive" "WA_INACTIVE" "kind" "WM_ACTIVATE" "MA_NOACTIVATE" "processed" "'processed" "list" "on-mouse-activate" "mouse-activate?" "WM_MOUSEACTIVATE" "call-size-change" "0" "/=" "or" "height" "width" "let" "WM_SIZE" "call-position-change" "WM_MOVE" "integer->char" "call-key-press" "WM_CHAR" "key-up" "WM_KEYUP" "key-down" "WM_KEYDOWN" "system-key-up" "WM_SYSKEYUP" "unprocessed" "system-key-down" "VK_MENU" "if" "WM_SYSKEYDOWN" "call-context-menu" "WM_CONTEXTMENU" "right-mouse-up" "WM_RBUTTONUP" "right-mouse-down" "WM_RBUTTONDOWN" "middle-mouse-up" "WM_MBUTTONUP" "middle-mouse-down" "WM_MBUTTONDOWN" "double-click" "WM_LBUTTONDBLCLK" "mouse-up" "WM_LBUTTONUP" "mouse-down" "WM_LBUTTONDOWN" "get-wheel-delta-wparam" "mouse-wheel" "WM_MOUSEWHEEL" "get-y-lparam" "get-x-lparam" "mouse-move" "WM_MOUSEMOVE" "HTCLIENT" "loword" "=" "cursor-update" "WM_SETCURSOR" "paint" "get-handle" "platform-get-update-region" "region" "with-closed" "WM_PAINT" "erase-background" "WM_ERASEBKGND" "ecase" "lparam" "wparam" "msg" "window")}
      {Lisp-Entry "set-capture" #f 559 13 559 24 ("SetCapture" "handle")}
      {Lisp-Entry "unset-capture" #f 563 13 563 26 ("ReleaseCapture")}
      {Lisp-Entry "with-platform-painting" #f 567 13 567 35 ("processed" "PAINTSTRUCT-free" "EndPaint" "close" "unwind-protect" "cairo_win32_surface_create" "Surface" "new" "surface" "BeginPaint" "hdc" "PAINTSTRUCT-make" "ps" "with" "get-handle" "handle" "let" "proc" "platform-data" "window")}
      {Lisp-Entry "get-window-surface" #f 580 20 580 38 ("get-handle" "GetDC" "cairo_win32_surface_create" "window")}
      {Lisp-Entry "settings-change" #f 584 13 584 28 ("set-fullscreen?" "Toplevel" "is?" "when" "SPI_SETWORKAREA" "ecase" "wparam" "window")}
      {Lisp-Entry "timer-pulse" #f 592 13 592 24 ("thread-yield!")}
      {Lisp-Entry "get-style" #f 601 13 601 22 ("GWL_STYLE" "GetWindowLong" "handle")}
      {Lisp-Entry "set-style" #f 605 13 605 22 ("GWL_STYLE" "SetWindowLong" "style" "handle")}
      {Lisp-Entry "get-ex-style" #f 609 13 609 25 ("GWL_EXSTYLE" "GetWindowLong" "handle")}
      {Lisp-Entry "set-ex-style" #f 613 13 613 25 ("GWL_EXSTYLE" "SetWindowLong" "style" "handle")}
      {Lisp-Entry "child-window?" #f 617 13 617 26 ("WS_CHILD" "get-style" "mask-bit-set?" "handle")}
      {Lisp-Entry "get-toplevel-hwnd" #f 626 13 626 30 ("get-handle" "when" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "get-stage" #f 637 13 637 22 ("get-stage" "when" "get-application" "appl" "let")}
      {Lisp-Entry "get-layered?" #f 648 13 648 25 ("WS_EX_LAYERED" "get-ex-style" "mask-bit-set?" "handle")}
      {Lisp-Entry "set-layered?" #f 652 13 652 25 ("WS_EX_LAYERED" "GetWindowLong" "mask-bit-set" "GWL_EXSTYLE" "SetWindowLong" "flag" "handle")}
      {Lisp-Entry "set-alpha-blending" #f 656 13 656 31 ("RDW_INVALIDATE" "RDW_ERASE" "bitwise-ior" "NULL" "RedrawWindow" "LWA_ALPHA" "0" "SetLayeredWindowAttributes" "set-layered?" "n" "handle")}
      {Lisp-Entry "track-mouse-event" #f 667 13 667 30 ("TRACKMOUSEEVENT-free" "TrackMouseEvent" "TRACKMOUSEEVENT-dwHoverTime-set!" "TRACKMOUSEEVENT-hwndTrack-set!" "TRACKMOUSEEVENT-dwFlags-set!" "size-of-TRACKMOUSEEVENT" "TRACKMOUSEEVENT-cbSize-set!" "TRACKMOUSEEVENT-make" "rec" "with" "HOVER_DEFAULT" "time" "time:" "flags" "handle")}
      {Lisp-Entry "platform-set-parent" #f 682 13 682 32 ("NULL" "get-handle" "if" "SetParent" "parent" "handle")}
      {Lisp-Entry "set-window-title" #f 686 13 686 29 ("SetWindowText" "title" "handle")}
      {Lisp-Entry "get-window-owner-handle" #f 690 13 690 36 ("GW_OWNER" "GetWindow" "handle")}
      {Lisp-Entry "platform-get-first-child" #f 694 13 694 37 ("GW_CHILD" "GetWindow" "handle")}
      {Lisp-Entry "platform-get-first-visible-child" #f 698 13 698 45 ("platform-get-next-window-handle" "platform-is-window-visible?" "if" "platform-get-first-child" "child-handle" "loop" "let" "handle")}
      {Lisp-Entry "platform-get-next-window-handle" #f 707 13 707 44 ("GW_HWNDNEXT" "GetWindow" "handle")}
      {Lisp-Entry "platform-is-window-visible?" #f 711 13 711 40 ("IsWindowVisible" "handle")}
      {Lisp-Entry "get-top-window-handle" #f 715 13 715 34 ("GetTopWindow" "handle")}
      {Lisp-Entry "acquire-point" #f 719 13 719 26 ("POINT-free" "POINT->point" "prog1" "1" "MapWindowPoints" "point->POINT" "acquired" "let" "error" "not" "when" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "acquire-rect" #f 728 13 728 25 ("RECT-free" "RECT->rect" "prog1" "2" "RECT->POINTS" "MapWindowPoints" "rect->RECT" "acquired" "let" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "platform-translate-to-root" #f 735 13 735 39 ("POINT-free" "POINT-y-ref" "POINT-x-ref" "Point" "new" "prog1" "1" "NULL" "MapWindowPoints" "point->POINT" "pos" "with" "pt" "handle")}
      {Lisp-Entry "platform-get-position" #f 742 13 742 34 ("RECT-free" "RECT-top-ref" "RECT-left-ref" "Point" "new" "prog1" "2" "RECT->POINTS" "NULL" "MapWindowPoints" "child-window?" "and" "when" "GetWindowRect" "RECT-make" "rect" "with" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-position" #f 751 13 751 34 ("SWP_NOACTIVATE" "SWP_NOZORDER" "SWP_NOSIZE" "bitwise-ior" "0" "get-v" "get-h" "NULL" "SetWindowPos" "pos" "handle")}
      {Lisp-Entry "platform-get-size" #f 755 13 755 30 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "Dimension" "new" "prog1" "GetClientRect" "RECT-make" "rect" "with" "handle")}
      {Lisp-Entry "platform-get-window-size" #f 762 13 762 37 ("RECT-free" "RECT-top-ref" "RECT-bottom-ref" "RECT-left-ref" "RECT-right-ref" "-" "Dimension" "new" "prog1" "GetWindowRect" "RECT-make" "rect" "let" "handle")}
      {Lisp-Entry "platform-set-window-size" #f 770 13 770 37 ("SWP_NOACTIVATE" "SWP_NOZORDER" "SWP_NOMOVE" "SWP_NOCOPYBITS" "bitwise-ior" "get-height" "get-width" "0" "NULL" "SetWindowPos" "size" "handle")}
      {Lisp-Entry "platform-set-bounds" #f 774 13 774 32 ("SWP_NOACTIVATE" "SWP_NOZORDER" "bitwise-ior" "rect-height" "rect-width" "get-top" "get-left" "NULL" "SetWindowPos" "rect" "handle")}
      {Lisp-Entry "platform-get-rect" #f 778 13 778 30 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "prog1" "2" "RECT->POINTS" "NULL" "MapWindowPoints" "when" "GetWindowRect" "RECT-make" "rect" "with" "parent-handle" "handle")}
      {Lisp-Entry "platform-get-bounds" #f 787 13 787 32 ("RECT-free" "RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "prog1" "2" "NULL" "MapWindowPoints" "GetWindowRect" "RECT-make" "rect" "with" "handle")}
      {Lisp-Entry "platform-mouse-position" #f 795 13 795 36 ("POINT-free" "POINT-y-ref" "POINT-x-ref" "Point" "new" "prog1" "GetCursorPos" "POINT-make" "point" "with")}
      {Lisp-Entry "platform-window-from-point" #f 802 13 802 39 ("POINT-free" "WindowFromPoint" "prog1" "get-v" "POINT-y-set!" "get-h" "POINT-x-set!" "POINT-make" "pt" "with" "point")}
      {Lisp-Entry "platform-child-window-from-point" #f 810 13 810 45 ("POINT-free" "CWP_SKIPTRANSPARENT" "CWP_SKIPDISABLED" "CWP_SKIPINVISIBLE" "bitwise-ior" "ChildWindowFromPointEx" "prog1" "get-v" "POINT-y-set!" "get-h" "POINT-x-set!" "POINT-make" "pt" "with" "point" "handle")}
      {Lisp-Entry "platform-move-window" #f 818 13 818 33 ("MoveWindow" "cy" "cx" "y" "x" "handle")}
      {Lisp-Entry "platform-window-enabled?" #f 822 13 822 37 ("IsWindowEnabled" "handle")}
      {Lisp-Entry "platform-enable-window" #f 826 13 826 35 ("EnableWindow" "handle")}
      {Lisp-Entry "platform-disable-window" #f 830 13 830 36 ("EnableWindow" "handle")}
      {Lisp-Entry "platform-get-client-rect" #f 834 13 834 37 ("RECT-free" "RECT->rect" "prog1" "GetClientRect" "RECT-make" "rect" "with" "handle")}
      {Lisp-Entry "platform-scroll-window" #f 841 13 841 35 ("RECT-free" "NULL" "ScrollWindowEx" "prog1" "rect->RECT" "with" "SW_INVALIDATE" "flags" "let" "clip-rect" "rect" "dv" "dh" "handle")}
      {Lisp-Entry "platform-invalidate-rect" #f 850 13 850 37 ("RECT-free" "InvalidateRect" "prog1" "rect->RECT" "with" "when" "rect" "handle")}
      {Lisp-Entry "platform-invalidate-region" #f 858 13 858 39 ("get-handle" "InvalidateRgn" "when" "region" "handle")}
      {Lisp-Entry "platform-invalidate-window" #f 864 13 864 39 ("NULL" "InvalidateRect" "when" "handle")}
      {Lisp-Entry "platform-redraw-window" #f 870 13 870 35 ("RECT-free" "get-handle" "RedrawWindow" "prog1" "rect->RECT" "NULL" "not" "if" "with" "RDW_ALLCHILDREN" "RDW_INVALIDATE" "RDW_UPDATENOW" "RDW_ERASENOW" "bitwise-ior" "flags" "let" "when" "region" "rect" "handle")}
      {Lisp-Entry "platform-get-update-rect" #f 881 13 881 37 ("RECT-free" "RECT->rect" "prog1" "GetUpdateRect" "RECT-make" "rect" "with" "handle")}
      {Lisp-Entry "platform-get-update-region" #f 888 13 888 39 ("get-handle" "GetUpdateRgn" "Region" "new" "region" "let" "handle")}
      {Lisp-Entry "platform-update-window" #f 894 13 894 35 ("UpdateWindow" "handle")}
      {Lisp-Entry "platform-show-noactivate" #f 898 13 898 37 ("SWP_NOSIZE" "SWP_NOMOVE" "SWP_NOACTIVATE" "SWP_SHOWWINDOW" "bitwise-ior" "0" "HWND_TOP" "SetWindowPos" "handle")}
      {Lisp-Entry "platform-hide-noactivate" #f 902 13 902 37 ("SWP_NOSIZE" "SWP_NOMOVE" "SWP_NOACTIVATE" "SWP_HIDEWINDOW" "bitwise-ior" "0" "SetWindowPos" "handle")}
      {Lisp-Entry "platform-bring-window-to-front" #f 906 13 906 43 ("BringWindowToTop" "handle")}
      {Lisp-Entry "platform-send-window-to-back" #f 910 13 910 41 ("SWP_NOSIZE" "SWP_NOMOVE" "bitwise-ior" "0" "HWND_BOTTOM" "SetWindowPos" "handle")}
      {Lisp-Entry "platform-select-foreground-window" #f 914 13 914 46 ("SetForegroundWindow" "handle")}
      {Lisp-Entry "platform-get-window-handle-title" #f 918 13 918 45 ("1" "+" "GetWindowText" "str" "ret" "receive" "make-string" "string" "GetWindowTextLength" "size" "let*" "handle")}
      {Lisp-Entry "platform-lock-window-update" #f 925 13 925 40 ("LockWindowUpdate" "handle")}
      {Lisp-Entry "platform-get-focus" #f 934 13 934 31 ("GetFocus")}
      {Lisp-Entry "platform-set-focus" #f 938 13 938 31 ("SetFocus" "handle")}
      {Lisp-Entry "Current-Cursor" #f 949 19 949 33 ()}
      {Lisp-Entry "Cursors" #f 953 19 953 26 (":horizontal-splitter" ":vertical-splitter" ":left-arrow" ":spy" ":zoom-out" ":zoom-in" ":zoom" ":closed-hand" ":opened-hand" "Cursor-Resource" ":move" "IDC_NO" ":no" "IDC_SIZEWE" ":west-east" "IDC_SIZEALL" ":all" "IDC_HAND" ":finger" "IDC_CROSS" ":cross" "IDC_IBEAM" ":ibeam" "IDC_WAIT" ":wait" "IDC_ARROW" ":arrow" "list")}
      {Lisp-Entry "load-cursor" #f 975 13 975 24 ("LR_LOADFROMFILE" "0" "IMAGE_CURSOR" "NULL" "LoadImage" "parse" "ident" "get-name" "'cursor" "get-application" "get-resource" "file?" "let*" "LoadCursorInt" "number?" "if" "cursor")}
      {Lisp-Entry "get-named-cursor" #f 983 13 983 29 ("cadr" "error" "not" "if" "Cursors" "assq" "info" "let" "name")}
      {Lisp-Entry "get-cursor" #f 990 20 990 30 ("Current-Cursor")}
      {Lisp-Entry "set-cursor" #f 994 20 994 30 ("load-cursor" "SetCursor" "get-named-cursor" "symbol?" "if" "let" "set!" "Current-Cursor" "=" "unless" "cursor")}
      {Lisp-Entry "hide-cursor" #f 1001 20 1001 31 ("0" "ShowCursor" ">=" "while")}
      {Lisp-Entry "show-cursor" #f 1006 20 1006 31 ("0" "ShowCursor" "<" "while")}
      {Lisp-Entry "system-message" #f 1016 20 1016 34 ("MB_TASKMODAL" "MessageBox" "MB_YESNOCANCEL" "MB_ICONWARNING" "MB_YESNO" "MB_ICONINFORMATION" "MB_OK" "MB_ICONERROR" "MB_OKCANCEL" "bitwise-ior" "flags" "confirmation" "question" "problem" "error" "case" "or" "get-toplevel-hwnd" "handle" "let" "title" "message" "'message" "type" "bind-keywords" "rest" "text")}
      {Lisp-Entry "platform-redraw-view-only" #f 1041 13 1041 38 ("DeleteObject" "InvalidateRgn" "redraw-view" "NULL" "ValidateRect" "GetUpdateRgn" "0" "CreateRectRgn" "hrgn" "with" "hwnd" "view")}
      {Lisp-Entry "platform-get-desktop" #f 1054 13 1054 33 ("GetDesktopWindow")}
      {Lisp-Entry "get-work-area" #f 1063 20 1063 33 ("RECT-free" "RECT->rect" "adjust-work-area-with-taskbar" "prog1" "0" "SPI_GETWORKAREA" "SystemParametersInfo" "RECT-make" "area" "with")}
      {Lisp-Entry "adjust-work-area-with-taskbar" #f 1071 13 1071 42 ("ABE_BOTTOM" "-1" "ABE_RIGHT" "ABE_TOP" "0" "1" "expand-rect" "ABE_LEFT" "ecase" "ABS_ALWAYSONTOP" "ABS_AUTOHIDE" "mask-bit-set?" "and" "if" "get-taskbar-edge" "edge" "get-taskbar-state" "state" "let" "rect")}
      {Lisp-Entry "get-taskbar-state" #f 1085 20 1085 37 ("ABM_GETSTATE" "SHAppBarMessage" "size-of" "cbSize" "'cbSize" "set" "APPBARDATA" "new" "data" "with" "get-taskbar-state" "'get-taskbar-state" "unimplemented")}
      {Lisp-Entry "get-taskbar-edge" #f 1093 20 1093 36 ("uEdge" "'uEdge" "get" "ABM_GETTASKBARPOS" "SHAppBarMessage" "size-of" "cbSize" "'cbSize" "set" "APPBARDATA" "new" "data" "with" "get-taskbar-edge" "'get-taskbar-edge" "unimplemented")}
      {Lisp-Entry "platform-drop-files" #f 1107 13 1107 32 ("POINT-free" "get-toplevel-hwnd" "platform-select-foreground-window" "prog1" "receive-files" "POINT->point" "pos" "DragFinish" "DragQueryPoint" "POINT-make" "pt" "received-files" "files" "WPARAM->HDROP" "hdrop" "let" "wparam" "window")}
      {Lisp-Entry "received-files" #f 1119 13 1119 27 ("naturals" "WCHAR-array-free" "anchorize" "prog1" "tokenise-windows" "File" "else" "Directory" "directory" "pathname-type" "case" "new" "pathname" "WCHAR-string" "filename" "WCHAR-array-set!" "WCHAR-array-make" "buffer" "MAX_PATH" "size" "let*" "n" "function" "map" "0" "NULL" "#xFFFFFFFF" "DragQueryFile" "count" "let" "hdrop")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "resizer" "platform" "windows.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.resizer.platform.windows" #f 37 9 37 41 ("jazz")
      {Lisp-Entry "Part-Cursor" #f 43 10 43 21 ("IDC_ARROW" "IDC_SIZEWE" "IDC_SIZENESW" "1" "IDC_SIZENS" "0" "IDC_SIZENWSE" "-1" "cons" "list")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "platform" "windows.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.platform.windows" #f 37 9 37 39 ("jazz")
      {Lisp-Entry "platform-print-document" #f 52 20 52 43 ("print-job" "nb-copies:" "to:" "essay" "from:" "selection?:" "Printer-Job" "job" "let" "10000" "0" "Rect" "setup-clipper" "LOGPIXELSX" "GetDeviceCaps" "resolution" "printer" "'printer" "get-page-setup-for" "page-setup" "cairo_win32_surface_create" "Surface" "new" "surface" "let*" "print-picture" "if" "print-dialog" "orientation" "nb-copies" "to" "from" "pages?" "selection?" "print-to-file?" "hdc" "receive" "view")}
      {Lisp-Entry "delete-existing" #f 64 13 64 28 ("recursive?:" "delete-file" "get-name" "matches?" "when" "file" "function" "iterate-directory" "format" "Regular-Expression" "new" "regexp" "let" "filename" "directory")}
      {Lisp-Entry "platform-print-picture" #f 73 20 73 42 ("message-box" "print-job" "Picture-Job" "new" "job" "LOGPIXELSX" "desktop-dc" "GetDeviceCaps" "resolution" "file" "'file" "get-page-setup-for" "page-setup" "let*" "delete-existing" "filename" "choose-directory" "directory" "let" "view")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "platform" "windows.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.platform.windows" #f 37 9 37 40 ("jazz")
      {Lisp-Entry "print-dialog" #f 55 20 55 32 ("PRINTDLG-free" "error" "throw-cancel" "=" "CommDlgExtendedError" "code" "DEVMODE-dmOrientation-ref" "PRINTDLG-nCopies-ref" "PRINTDLG-nToPage-ref" "PRINTDLG-nFromPage-ref" "PD_PAGENUMS" "PD_SELECTION" "PD_PRINTTOFILE" "mask-bit-set?" "PRINTDLG-hDC-ref" "values" "VOID*->DEVMODE" "devmode" "GlobalLock" "pointer" "PRINTDLG-hDevMode-ref" "handle" "PRINTDLG-Flags-ref" "flags" "let*" "PrintDlg" "if" "prog1" "10" "PRINTDLG-nMaxPage-set!" "1" "PRINTDLG-nMinPage-set!" "PRINTDLG-nToPage-set!" "0" "PRINTDLG-nFromPage-set!" "PD_RETURNDC" "PD_USEDEVMODECOPIESANDCOLLATE" "PD_NOSELECTION" "PD_HIDEPRINTTOFILE" "bitwise-ior" "PRINTDLG-Flags-set!" "get-application" "get-toplevel" "get-handle" "PRINTDLG-hwndOwner-set!" "PRINTDLG-sizeof" "PRINTDLG-lStructSize-set!" "PRINTDLG-make" "rec" "let" "close-all-popups" "rest")}
      {Lisp-Entry "page-setup-dialog" #f 78 20 78 37 ("DEVMODE-free" "PAGESETUPDLG-free" "error" "throw-cancel" "=" "CommDlgExtendedError" "code" "GlobalUnlock" "DEVMODE-dmDefaultSource-ref" "DEVMODE-dmPaperSize-ref" "DEVMODE-dmOrientation-ref" "PAGESETUPDLG-rtMinMargin-ref" "RECT->rect" "PAGESETUPDLG-ptPaperSize-ref" "POINT->dimension" "values" "VOID*->DEVMODE" "GlobalLock" "pointer" "PAGESETUPDLG-hDevMode-ref" "handle" "let*" "PageSetupDlg" "prog1" "get-bottom" "RECT-bottom-set!" "get-right" "RECT-right-set!" "get-top" "RECT-top-set!" "get-left" "PAGESETUPDLG-rtMargin-ref" "RECT-left-set!" "when" "PSD_DISABLEPRINTER" "0" "PSD_MARGINS" "if" "PSD_INTHOUSANDTHSOFINCHES" "PAGESETUPDLG-Flags-set!" "DEVMODE->HANDLE" "PAGESETUPDLG-hDevMode-set!" "get-application" "get-toplevel" "get-handle" "PAGESETUPDLG-hwndOwner-set!" "PAGESETUPDLG-sizeof" "PAGESETUPDLG-lStructSize-set!" "DM_DEFAULTSOURCE" "DM_PAPERSIZE" "DM_ORIENTATION" "bitwise-ior" "DEVMODE-dmFields-set!" "DEVMODE-dmDefaultSource-set!" "DEVMODE-dmPaperSize-set!" "DEVMODE-dmOrientation-set!" "DEVMODE-sizeof" "DEVMODE-dmSize-set!" "DEVMODE-make" "devmode" "PAGESETUPDLG-make" "rec" "let" "close-all-popups" "paper-source" "paper-source:" "paper-size" "paper-size:" "orientation" "orientation:" "margins" "margins:")}
      {Lisp-Entry "choose-file" #f 122 20 122 31 ("WCHAR-array-free" "OPENFILENAME-free" "error" "throw-cancel" "CommDlgExtendedError" "code" "append" "map" "dirlist" "filenames" "dir" "bind" "list" "1" "length" "=" "parse-choose-file-string" "tokens" "tokenise-windows" "File" "new" "WCHAR-string" "filename" "not" "begin" "GetOpenFileName" "prog1" "pathname" "function" "anchorize" "OPENFILENAME-lpfnHook-set!" "OPENFILENAME-lCustData-set!" "OPENFILENAME-lpstrDefExt-set!" "OFN_ENABLESIZING" "OFN_FILEMUSTEXIST" "OFN_ENABLEHOOK" "OFN_HIDEREADONLY" "OFN_ALLOWMULTISELECT" "OFN_EXPLORER" "bitwise-ior" "OPENFILENAME-Flags-set!" "either" "OPENFILENAME-lpstrTitle-set!" "parse" "OPENFILENAME-lpstrInitialDir-set!" "OPENFILENAME-nMaxFile-set!" "OPENFILENAME-lpstrFile-set!" "OPENFILENAME-lpstrFilter-set!" "get-handle" "get-toplevel" "toplevel" "OPENFILENAME-hwndOwner-set!" "OPENFILENAME-sizeof" "OPENFILENAME-lStructSize-set!" "get-dialog-proc" "fake-dialog-proc" "get-current-directory" "fake-current-directory" "NULL" "extensions-filter" "fake-extensions-filter" "0" "WCHAR-array-set!" "WCHAR-array-make" "buffer" "OPENFILENAME-make" "r" "with" "50" "64" "*" "MAX_PATH" "+" "size" "let" "anchors" "anchors:" "multiple-selection?" "multiple-selection?:" "extensions" "extensions:" "directory" "directory:" "host-title:" "File-Request" "Text-File-Request" "text?" "get-modal" "use-generic-dialogs?" "if" "title" "title:")}
      {Lisp-Entry "map-WCHAR-array" #f 183 13 183 28 ("0" "naturals" "WCHAR-array-ref" "char" "let" "n" "function" "map" "size" "buffer")}
      {Lisp-Entry "choose-new-file" #f 190 20 190 35 ("WCHAR-array-free" "OPENFILENAME-free" "error" "throw-cancel" "=" "CommDlgExtendedError" "code" "tokenise-windows" "File" "new" "anchorize" "after-GetSaveFileName" "'after-GetSaveFileName" "WCHAR-string" "filename" "GetSaveFileName" "prog1" "map-WCHAR-array" "before-GetSaveFileName" "'before-GetSaveFileName" "debug" "OPENFILENAME-lpfnHook-set!" "OPENFILENAME-lCustData-set!" "either" "OPENFILENAME-lpstrDefExt-set!" "OFN_OVERWRITEPROMPT" "OFN_ENABLESIZING" "OFN_FILEMUSTEXIST" "OFN_ENABLEHOOK" "OFN_EXPLORER" "bitwise-ior" "OPENFILENAME-Flags-set!" "parse" "OPENFILENAME-lpstrInitialDir-set!" "OPENFILENAME-nMaxFile-set!" "OPENFILENAME-lpstrFile-set!" "OPENFILENAME-lpstrFilter-set!" "get-handle" "get-toplevel" "toplevel" "OPENFILENAME-hwndOwner-set!" "OPENFILENAME-sizeof" "OPENFILENAME-lStructSize-set!" "get-dialog-proc" "fake-dialog-proc" "get-current-directory" "fake-current-directory" "NULL" "extensions-filter" "fake-extensions-filter" "let" "WCHAR-copy" "0" "WCHAR-array-set!" "not" "MAX_PATH" "WCHAR-array-make" "buffer" "OPENFILENAME-make" "r" "with" "create-directories" "when" "anchors" "anchors:" "default-extension" "default-extension:" "initial-filename" "initial-filename:" "extensions" "extensions:" "directory" "directory:" "host-title:" "NewFile-Request" "get-modal" "use-generic-dialogs?" "if" "title" "title:")}
      {Lisp-Entry "choose-directory" #f 244 20 244 36 ("tokenise-windows" "Directory" "new" "anchorize" "WCHAR-string" "throw-cancel" "not" "SHBrowseForFolder" "items" "BROWSEINFO-iImage-set!" "BROWSEINFO-lParam-set!" "get-browse-callback" "BROWSEINFO-lpfn-set!" "BROWSEINFO-ulFlags-set!" "either" "BROWSEINFO-lpszTitle-set!" "BROWSEINFO-pszDisplayName-set!" "BROWSEINFO-pidlRoot-set!" "NULL" "get-handle" "get-toplevel" "toplevel" "BROWSEINFO-hwndOwner-set!" "0" "WCHAR-array-set!" "MAX_PATH" "WCHAR-array-make" "buffer" "BROWSEINFO-make" "r" "with" "set-current-directory" "when" "get-current-directory" "preserved" "let" "anchors" "anchors:" "directory" "directory:" "host-title:" "Directory-Request" "get-modal" "use-generic-dialogs?" "if" "title" "title:")}
      {Lisp-Entry "parse-choose-file-string" #f 282 13 282 37 ("1" "+" "loop" "WCHAR-subarray" "WCHAR-string" "cons" "if" "WCHAR-array-ref" "eq?" "end-of-string?" "start-of-string?" "0" "offset" "iterate" "let" "buffer")}
      {Lisp-Entry "extensions-filter" #f 296 20 296 37 ("get-output" "join" "cdr" "car" "put" "ext" "function" "for-each" "1" "make-string" "separator" "List-Factory" "new" "dst" "let" "not" "if" "NULL" "extensions")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "clipboard" "platform" "windows.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.clipboard.platform.windows" #f 37 9 37 43 ("jazz")
      {Lisp-Entry "initialize-clipboard" #f 44 20 44 40 ()}
      {Lisp-Entry "get-clipboard-text" #f 53 20 53 38 ("read-line" "input" "cr-lf" "'cr-lf" "eol-encoding:" "UCS-2" "'UCS-2" "char-encoding:" "init:" "list" "call-with-input-u8vector" "u8vector?" "not" "if" "get-clipboard-format" "GetClipboardText" "u8vect" "let" "function" "with-opened-clipboard" "CF_UNICODETEXT" "format" "format:")}
      {Lisp-Entry "set-clipboard-text" #f 64 20 64 38 ("empty?:" "get-clipboard-format" "SetClipboardText" "get-output-u8vector" "u8vect" "display" "cr-lf" "'cr-lf" "eol-encoding:" "UCS-2" "'UCS-2" "char-encoding:" "list" "open-output-u8vector" "output" "let" "function" "with-opened-clipboard" "CF_UNICODETEXT" "format" "format:" "text")}
      {Lisp-Entry "get-clipboard-metafile" #f 79 20 79 42 ("CF_ENHMETAFILE" "GetClipboardData" "function" "with-opened-clipboard" "get-clipboard-metafile" "'get-clipboard-metafile" "unimplemented")}
      {Lisp-Entry "set-clipboard-metafile" #f 87 20 87 42 ("empty?:" "CF_ENHMETAFILE" "SetClipboardData" "function" "with-opened-clipboard" "set-clipboard-metafile" "'set-clipboard-metafile" "unimplemented" "metafile")}
      {Lisp-Entry "with-opened-clipboard" #f 101 20 101 41 ("CloseClipboard" "EmptyClipboard" "when" "set!" "NULL" "OpenClipboard" "begin" "unwind-protect" "opened?" "let" "empty?" "empty?:" "proc")}
      {Lisp-Entry "Formats" #f 119 12 119 19 ("eq?" "test:" "make-table")}
      {Lisp-Entry "register-clipboard-format" #f 123 20 123 45 ("Formats" "table-set!" "RegisterClipboardFormat" "id" "let" "format" "name")}
      {Lisp-Entry "get-clipboard-format" #f 128 13 128 33 ("error" "Formats" "table-ref" "either" "integer?" "if" "format")}
      {Lisp-Entry "clipboard-format-available?" #f 135 20 135 47 ("available-clipboard-formats" "get-clipboard-format" "member?" "format")}
      {Lisp-Entry "available-clipboard-formats" #f 139 20 139 47 ("get-output" "put" "/=" "when" "EnumClipboardFormats" "format" "0" "previous" "iter" "List-Factory" "new" "formats" "let" "function" "with-opened-clipboard")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "platform" "windows.jazz"} 1226584785
    {Lisp-Entry "jazz.system.platform.windows" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "initialize-platform" #f 50 20 50 39 ("initialize-com")}
      {Lisp-Entry "module-path" #f 59 20 59 31 ("GetModuleFileName" "tokenise-windows")}
      {Lisp-Entry "module-pathname" #f 63 20 63 35 ("module-path" "File" "new")}
      {Lisp-Entry "module-base" #f 67 20 67 31 ("module-pathname" "get-base")}
      {Lisp-Entry "current-instance" #f 76 12 76 28 ("HINSTANCE" "c-function")}
      {Lisp-Entry "system-error" #f 86 20 86 32 ("present-system-message" "error" "id")}
      {Lisp-Entry "present-winerror" #f 90 20 90 36 ("winerror" "present-system-message")}
      {Lisp-Entry "winerror" #f 94 20 94 28 ("winerror" "'winerror" "unimplemented")}
      {Lisp-Entry "present-system-message" #f 98 20 98 42 ("format-system-message" "format" "id")}
      {Lisp-Entry "format-system-message" #f 104 20 104 41 ("NULL" "0" "FORMAT_MESSAGE_FROM_SYSTEM" "FormatMessage" "/=" "when" "1" "-" "make-string" "msg" "128" "size" "let*" "unimplemented" "id")}
      {Lisp-Entry "get-computer-name" #f 118 20 118 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*" "unimplemented")}
      {Lisp-Entry "get-system-user-name" #f 128 20 128 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let" "unimplemented")}
      {Lisp-Entry "Shift-Bit" #f 142 12 142 21 ("1")}
      {Lisp-Entry "Control-Bit" #f 146 12 146 23 ("2")}
      {Lisp-Entry "Alt-Bit" #f 150 12 150 19 ("4")}
      {Lisp-Entry "NoModifiers" #f 154 19 154 30 ("0")}
      {Lisp-Entry "modifiers-keys" #f 158 20 158 34 ("alt-down?" "Alt-Bit" "control-down?" "Control-Bit" "shift-down?" "Shift-Bit" "0" "mask-bit-set")}
      {Lisp-Entry "shift-key?" #f 162 20 162 30 ("Shift-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "control-key?" #f 166 20 166 32 ("Control-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "alt-key?" #f 170 20 170 28 ("Alt-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "key-down?" #f 174 20 174 29 ("0" "GetAsyncKeyState" "hibyte" "/=" "key")}
      {Lisp-Entry "shift-down?" #f 178 20 178 31 ("VK_SHIFT" "key-down?")}
      {Lisp-Entry "control-down?" #f 182 20 182 33 ("VK_CONTROL" "key-down?")}
      {Lisp-Entry "alt-down?" #f 186 20 186 29 ("VK_MENU" "key-down?")}
      {Lisp-Entry "modifiers-down" #f 190 20 190 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" #f 196 20 196 34 ("VK_LBUTTON" "key-down?")}
      {Lisp-Entry "use-generic-dialogs?" #f 205 13 205 33 ()}
      {Lisp-Entry "Version-Info" #f 214 19 214 31 ()}
      {Lisp-Entry "version-info" #f 218 13 218 25 ("GetVersionEx" "sizeof-OSVERSIONINFOEX" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless")}
      {Lisp-Entry "Windows-Version" #f 228 19 228 34 ()}
      {Lisp-Entry "get-windows-version" #f 232 20 232 39 ("0" "OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless")}
      {Lisp-Entry "validate-version" #f 243 20 243 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory" "get-process" "process" "let*" "present" "register-crash-info" "when" "validate-version" "'validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "log" "platform" "windows.jazz"} 1226584785
    {Lisp-Entry "jazz.system.log.platform.windows" #f 38 9 38 41 ("jazz")
      {Lisp-Entry "make-event-id" #f 41 20 41 33 ("+" "FACILITY_NULL" "facility" "facility:" "SEVERITY_SUCCESS" "severity" "severity:" "code")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "crash" "windows.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.crash.windows" #f 37 9 37 36 ("#<<END-OF-CRASH\n#define ANSISIZE 512\n#define UNICODESIZE 512\n\nstatic TCHAR Crashfile[_MAX_FNAME];\nstatic TCHAR Module[_MAX_PATH];\nstatic TCHAR Drive[_MAX_DRIVE];\nstatic TCHAR Filename[_MAX_FNAME];\nstatic TCHAR Directory[_MAX_DIR];\n\nstatic SYSTEMTIME SystemTime;\n\nstatic CHAR AnsiLog[ANSISIZE];\nstatic TCHAR UnicodeLog[UNICODESIZE];\n\nstatic void internal_error(int exitCode)\n{\n    ExitProcess(exitCode);\n}\n\nstatic LPWSTR exception_description(int code)\n{\n    switch (code)\n    {\n        case EXCEPTION_ACCESS_VIOLATION:\n            return L\"Access violation\";\n\n        case EXCEPTION_DATATYPE_MISALIGNMENT:\n            return L\"Datatype misalignment\";\n\n        case EXCEPTION_FLT_DIVIDE_BY_ZERO:\n            return L\"Division by zero\";\n\n        case EXCEPTION_ILLEGAL_INSTRUCTION:\n            return L\"Illegal instruction\";\n\n        case EXCEPTION_STACK_OVERFLOW:\n            return L\"Stack overflow\";\n\n        default:\n            return NULL;\n    }\n}\n\nstatic void log_printf(HANDLE handle, LPWSTR fmt, ...)\n{\n    va_list    args;\n    \n    va_start(args, fmt);\n    wvsprintf(UnicodeLog, fmt, args);\n    va_end(args);\n    \n    int size = wcslen(UnicodeLog);\n\n    WideCharToMultiByte(CP_ACP, 0, UnicodeLog, -1, AnsiLog, size + 1, NULL, NULL);\n\n    DWORD len, written;\n\n    len = strlen(AnsiLog);\n\n    WriteFile(handle, AnsiLog, len, &written, NULL);\n\n    if (written != len)\n        internal_error(-4);\n}\n\nstatic void log_error(HANDLE handle, LPEXCEPTION_RECORD record)\n{\n    LPWSTR desc = exception_description(record->ExceptionCode);\n    \n    log_printf(handle, L\"error: \");\n    if (desc)\n        log_printf(handle, L\"%s\", desc);\n    else\n        log_printf(handle, L\"0x%.2x\", record->ExceptionCode);\n}\n\nstatic BOOL filename_exists(LPWSTR filename)\n{\n    return GetFileAttributes(filename) != INVALID_FILE_ATTRIBUTES;\n}\n\nstatic void timestamped_filename(LPWSTR buffer, LPWSTR dir, LPWSTR ext)\n{\n    INT    n = 0;\n    TCHAR  suffix[8];\n    BOOL   done;\n    \n    done = FALSE;\n    while (! done)\n    {\n        SYSTEMTIME    st;\n    \n        GetLocalTime(&st);\n        \n        if (n == 0)\n            wsprintf(suffix, L\"\");\n        else\n            wsprintf(suffix, L\"_%d\", n);\n        \n        wsprintf(buffer, L\"%s\\\\%04d-%02d-%02d_%02d-%02d-%02d%s.%s\", dir, st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond, suffix, ext);\n    \n        if (! filename_exists(buffer))\n            done = TRUE;\n        else\n            n++;\n    }\n}\n\nstatic void fill_crashfile()\n{\n    TCHAR    dir[_MAX_PATH];\n    \n    GetModuleFileName(NULL, Module, _MAX_PATH);\n\n    _wsplitpath(Module, Drive, Directory, NULL, NULL);\n    Directory[wcslen(Directory) - 1] = 0;\n\n    wsprintf(dir, L\"%s%s\", Drive, Directory);\n    \n    timestamped_filename(Crashfile, dir, L\"crash\");\n}\n\nstatic void snapshot_exception(LPEXCEPTION_RECORD record, PCONTEXT context)\n{\n    fill_crashfile();\n\n    HANDLE handle = CreateFile(Crashfile, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n\n    if (handle == INVALID_HANDLE_VALUE)\n        internal_error(-2);\n\n    GetModuleFileName(NULL, Module, _MAX_PATH);\n    _wsplitpath(Module, NULL, NULL, Filename, NULL);\n\n    log_printf(handle, L\"process: %s\\r\\n\", Filename);\n    GetLocalTime(&SystemTime);\n    log_printf(handle, L\"date: %d/%d/%d %d:%d:%.2d\\r\\n\", SystemTime.wYear, SystemTime.wMonth, SystemTime.wDay, SystemTime.wHour, SystemTime.wMinute, SystemTime.wSecond);\n    log_printf(handle, L\"\\r\\n\");\n\n    log_error(handle, record);\n    log_printf(handle, L\"\\r\\n\");\n\n    CloseHandle(handle);\n}\n\nstatic LONG WINAPI unhandled_exception_filter(LPEXCEPTION_POINTERS info)\n{\n    LPEXCEPTION_RECORD record = info->ExceptionRecord;\n    PCONTEXT context = info->ContextRecord;\n\n    snapshot_exception(record, context);\n    snapshot_process();\n \n    return EXCEPTION_CONTINUE_SEARCH;\n}\nEND-OF-CRASH\n" "jazz")
      {Lisp-Entry "crash-process" #f 52 12 52 25 ("VOID" "c-function")}
      {Lisp-Entry "SnapshotProcess" #f 62 15 62 30 ("snapshot-process" "VOID")}
      {Lisp-Entry "setup-crash-handler" #f 226 12 226 31 ("VOID" "c-function")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "media" "platform" "windows.jazz"} 1226584783
    {Lisp-Entry "jazz.media.platform.windows" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Symbolic-Sounds" #f 49 12 49 27 (":hand" ":exclamation" ":asterisk" "cons" "list")}
      {Lisp-Entry "symbolic-sound" #f 56 13 56 27 ("cdr" "error" "not" "if" "Symbolic-Sounds" "assv" "pair" "let" "sound")}
      {Lisp-Entry "play-sound" #f 63 20 63 30 ("else" "symbolic-sound" "symbol?" "SND_FILENAME" "bitwise-ior" "NULL" "platform-parse" "PlaySound" "file?" "cond" "SND_SYNC" "SND_ASYNC" "if" "async-bit" "let" "asynchronous?" "asynchronous?:" "sound")}
      {Lisp-Entry "open-music" #f 78 20 78 30 ("0" "NULL" "platform-parse" "format" "mciSendString" "alias" "file")}
      {Lisp-Entry "close-music" #f 81 20 81 31 ("0" "NULL" "format" "mciSendString" "alias")}
      {Lisp-Entry "play-music" #f 85 20 85 30 ("0" "NULL" "format" "mciSendString" "alias")}
      {Lisp-Entry "stop-music" #f 88 20 88 30 ("0" "NULL" "format" "mciSendString" "alias")}
      {Lisp-Entry "pause-music" #f 92 20 92 31 ("0" "NULL" "format" "mciSendString" "alias")}
      {Lisp-Entry "resume-music" #f 95 20 95 32 ("0" "NULL" "format" "mciSendString" "alias")}}})
"with"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "dialect" "syntax" "with.scm"} 1226584778
    {Lisp-Entry "jazz.dialect.syntax.with" #f 37 9 37 33 ("scheme")
      {Lisp-Entry "with" #f 44 9 44 13 ("reverse" "car" "release" "binding" "lambda" "map" ",@body" "begin" "prog1" ",bindings" "let*" "sourcify-if" "cddr" "body" "cadr" "source-code" "bindings" "let" "form-src")}
      {Lisp-Entry "with-closed" #f 58 9 58 20 ("close" ",@body" "function" "dynamic-wind" "caddr" ",variable" "set!" "if" "variable" ",specifier" "car" "'<Object>" "binding-specifier" "or" "specifier" "binding" "lambda" "map" "sourcify-if" "cddr" "body" "cadr" "source-code" "bindings" "let" "form-src")}}})
"x11"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "utilities" "platform" "x11.jazz"} 1226584789
    {Lisp-Entry "jazz.utilities.platform.x11" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "bell" #f 43 20 43 24 ("50" "default-x11-display" "XBell")}
      {Lisp-Entry "rect-intersects-region?" #f 47 20 47 43 ("cdr" "car" "rect-intersect?" "null?" "if" "get-rectangles" "rects" "loop" "let" "get-height" "get-width" "+" "Rect" "new" "rect" "with" "region" "size" "v" "h")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "window" "platform" "x11.jazz"} 1227094443
    {Lisp-Entry "jazz.ui.window.platform.x11" #f 38 9 38 36 ("0" "else" "135" "get-dock-height" "Mod1Mask" "unix" "Mod2Mask" "alt-key" "definition" "mac" "cond-expand" "jazz")
      {Lisp-Entry "unprocessed" #f 54 19 54 30 ("unprocessed")}
      {Lisp-Entry "processed" #f 55 19 55 28 ("processed")}
      {Lisp-Entry "processed-result" #f 58 13 58 29 ("cadr" "0" "cdr" "null?" "processed" "'processed" "car" "eq?" "pair?" "and" "if" "return")}
      {Lisp-Entry "*locked-update*" #f 66 12 66 27 ()}
      {Lisp-Entry "Symbolic-Keys" #f 78 19 78 32 ("Mode" "'Mode" "XK_Mode_switch" "Divide" "'Divide" "XK_KP_Divide" "Multiply" "'Multiply" "XK_KP_Decimal" "Subtract" "'Subtract" "XK_KP_Subtract" "Add" "'Add" "XK_KP_Add" "Delete" "'Delete" "XK_Delete" "Pause" "'Pause" "XK_Pause" "Insert" "'Insert" "XK_Insert" "Next" "'Next" "XK_Next" "Prior" "'Prior" "XK_Prior" "Down" "'Down" "XK_Down" "Right" "'Right" "XK_Right" "Up" "'Up" "XK_Up" "Left" "'Left" "XK_Left" "End" "'End" "XK_End" "Home" "'Home" "XK_Home" "Tab" "'Tab" "XK_Tab" "Space" "'Space" "XK_space" "Return" "'Return" "XK_Return" "XK_grave" "XK_underscore" "XK_asciicircum" "XK_bar" "XK_braceright" "XK_braceleft" "XK_at" "XK_question" "XK_asterisk" "XK_parenright" "XK_parenleft" "XK_ampersand" "XK_percent" "XK_dollar" "XK_numbersign" "XK_quotedbl" "XK_exclam" "XK_apostrophe" "XK_bracketright" "XK_backslash" "XK_bracketleft" "XK_asciitilde" "XK_slash" "XK_greater" "XK_equal" "XK_less" "XK_semicolon" "XK_colon" "XK_period" "XK_comma" "XK_plus" "XK_minus" "Backspace" "'Backspace" "XK_BackSpace" "Escape" "'Escape" "XK_Escape" "F12" "'F12" "XK_F12" "F11" "'F11" "XK_F11" "F10" "'F10" "XK_F10" "F9" "'F9" "XK_F9" "F8" "'F8" "XK_F8" "F7" "'F7" "XK_F7" "F6" "'F6" "XK_F6" "F5" "'F5" "XK_F5" "F4" "'F4" "XK_F4" "F3" "'F3" "XK_F3" "F2" "'F2" "XK_F2" "F1" "'F1" "XK_F1" "XK_9" "XK_8" "XK_7" "XK_6" "XK_5" "XK_4" "XK_3" "XK_2" "XK_1" "XK_0" "XK_Z" "XK_Y" "XK_X" "XK_W" "XK_V" "XK_U" "XK_T" "XK_S" "XK_R" "XK_Q" "XK_P" "XK_O" "XK_N" "XK_M" "XK_L" "XK_K" "XK_J" "XK_I" "XK_H" "XK_G" "XK_F" "XK_E" "XK_D" "XK_C" "XK_B" "XK_A" "XK_z" "XK_y" "XK_x" "XK_w" "XK_v" "XK_u" "XK_t" "XK_s" "XK_r" "XK_q" "XK_p" "XK_o" "XK_n" "XK_m" "XK_l" "XK_k" "XK_j" "XK_i" "XK_h" "XK_g" "XK_f" "XK_e" "XK_d" "XK_c" "XK_b" "XK_a" "cons" "list")}
      {Lisp-Entry "Windows-Table" #f 214 19 214 32 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "Window-Title-Table" #f 218 19 218 37 ("eqv?" "test:" "make-table")}
      {Lisp-Entry "last-click" #f 222 12 222 22 ("current-time" "time->seconds")}
      {Lisp-Entry "get-window" #f 226 27 226 37 ("Windows-Table" "table-ref" "handle")}
      {Lisp-Entry "set-window" #f 230 27 230 37 ("Windows-Table" "table-set!" "window" "handle")}
      {Lisp-Entry "platform-get-window-handle-title" #f 234 20 234 52 ("Window-Title-Table" "table-ref" "handle")}
      {Lisp-Entry "set-window-title" #f 238 20 238 36 ("default-x11-display" "XSetWMName" "Window-Title-Table" "table-set!" "title" "handle")}
      {Lisp-Entry "window-parent" #f 243 13 243 26 ("XDefaultScreen" "default-x11-display" "XRootWindow" "get-handle" "if" "get-parent" "parent" "let" "window")}
      {Lisp-Entry "window-default-parent" #f 250 13 250 34 ("else" "get-stage" "Frame" "typecase" "window")}
      {Lisp-Entry "prepare-handle" #f 256 13 256 27 ("error" "not" "if" "create-handle" "let" "others" "handle" "bind-keywords" "rest" "window")}
      {Lisp-Entry "create-handle" #f 264 13 264 26 ("KeyPressMask" "PointerMotionMask" "ExposureMask" "StructureNotifyMask" "ButtonPressMask" "ButtonReleaseMask" "FocusChangeMask" "XSelectInput" "WM_DELETE_WINDOW" "get-default-x11-display" "XSetWMProtocols" "XdndVersion" "XdndAware" "else" "_NET_WM_WINDOW_TYPE_DIALOG" "Dialog" "_NET_WM_WINDOW_TYPE_TOOLTIP" "Tooltip" "_NET_WM_WINDOW_TYPE_NORMAL" "Menu-Transient" "cond" "u32vector" "PropModeReplace" "XA_ATOM" "_NET_WM_WINDOW_TYPE" "ChangeProperty" "CWBackPixel" "CWOverrideRedirect" "CWBitGravity" "+" "InputOutput" "CopyFromParent" "500" "0" "XCreateWindow" "handle" "let" "platform-get-desktop" "Desktop" "if" "216" "233" "236" "rgb-pixel" "XSetWindowAttributes-background_pixel-set!" "Popup" "is?" "XSetWindowAttributes-override_redirect-set!" "StaticGravity" "XSetWindowAttributes-bit_gravity-set!" "XDefaultVisual" "visual" "XSetWindowAttributes-make" "attr" "window-parent" "parent" "XScreenOfDisplay" "screen" "default-x11-display" "XDefaultScreen" "screen-no" "let*" "rest" "window")}
      {Lisp-Entry "destroy-window" #f 307 13 307 27 ("default-x11-display" "XDestroyWindow" "platform-set-focus" "get-parent" "parent" "let" "focus-lose" "platform-get-focus" "get-handle" "=" "when" "expose-store" "table-set!" "window")}
      {Lisp-Entry "dispatch-message" #f 316 13 316 29 ("process-window-message" "msg" "window")}
      {Lisp-Entry "show-window" #f 320 13 320 24 ("default-x11-display" "XMapWindow" "handle")}
      {Lisp-Entry "show-maximized" #f 324 13 324 27 ("show-window" "rect-size" "platform-set-window-size" "get-work-area" "rect-position" "platform-set-position" "handle")}
      {Lisp-Entry "show-restored" #f 330 13 330 26 ("show-window" "handle")}
      {Lisp-Entry "hide-window" #f 334 13 334 24 ("default-x11-display" "XUnmapWindow" "handle")}
      {Lisp-Entry "bring-window-to-top" #f 338 13 338 32 ("default-x11-display" "XRaiseWindow" "handle")}
      {Lisp-Entry "minimize-window" #f 342 13 342 28 ("minimize-window" "'minimize-window" "unimplemented" "handle")}
      {Lisp-Entry "maximize-window" #f 346 13 346 28 ("maximize-window" "'maximize-window" "unimplemented" "handle")}
      {Lisp-Entry "restore-window" #f 350 13 350 27 ("restore-window" "'restore-window" "unimplemented" "handle")}
      {Lisp-Entry "platform-erase-background" #f 354 13 354 38 ("platform-erase-background" "'platform-erase-background" "unimplemented" "handle")}
      {Lisp-Entry "setup-events" #f 363 13 363 25 ()}
      {Lisp-Entry "expose-store" #f 367 12 367 24 ("make-table")}
      {Lisp-Entry "process-message" #f 370 13 370 28 ("dispatch-message" "when" "get-window" "window" "let" "XAnyEvent-window-ref" "handle" "XEvent-xany-ref" "any-event" "let*" "function" "execute-event" "msg")}
      {Lisp-Entry "process-expose" #f 380 13 380 27 ("paint" "when" "table-set!" "region" "win" "expose-store" "iterate-table" "function" "execute-event")}
      {Lisp-Entry "prime-message-pump" #f 390 13 390 31 ("process-messages" "function" "new-thread")}
      {Lisp-Entry "process-messages" #f 396 13 396 29 ("current-thread" "thread-loop?" "process-expose" "XPending" "0" "=" "when" "process-message" "default-x11-display" "XNextEvent" "loop" "let" "XEvent-make" "msg" "with" "proper-tail-calls" "declare")}
      {Lisp-Entry "process-messages-single-threaded" #f 408 13 408 45 ("current-thread" "thread-loop?" "process-expose" "when" "process-message" "XNextEvent" "thread-yield!" "default-x11-display" "XPending" "=" "if" "1000" "0" "1" "+" "select" "process-inval-rects" "loop" "let" "setup-fdset" "fdset" "get-default-x11-display" "ConnectionNumber" "display-fd" "XEvent-make" "msg" "with" "proper-tail-calls" "declare" "thunk")}
      {Lisp-Entry "process-window-message" #f 432 13 432 35 ("unprocessed" "else" "process-client-message-message" "ClientMessage" "process-selection-request-message" "SelectionRequest" "process-configure-notify-message" "ConfigureNotify" "process-key-press-message" "KeyPress" "process-motion-notify-message" "MotionNotify" "process-focus-out-message" "FocusOut" "process-focus-in-message" "FocusIn" "process-button-release-message" "ButtonRelease" "process-button-press-message" "ButtonPress" "process-expose-message" "Expose" "XEvent-type-ref" "ecase" "msg" "window")}
      {Lisp-Entry "process-expose-message" #f 447 13 447 35 ("processed" "rect-union" "table-set!" "if" "0" "nu=?" "unless" "expose-store" "table-ref" "old-region" "Rect" "new" "region" "XExposeEvent-height-ref" "bottom" "XExposeEvent-width-ref" "+" "right" "XExposeEvent-y-ref" "top" "XExposeEvent-x-ref" "left" "XEvent-xexpose-ref" "let*" "msg" "window")}
      {Lisp-Entry "process-button-press-message" #f 462 13 462 41 ("-120" "Button7" "Button5" "120" "mouse-wheel" "Button6" "Button4" "or" "get-v" "get-h" "call-context-menu" "Point" "new" "get-handle" "platform-get-desktop" "acquire-point" "pt" "right-mouse-down" "Button3" "middle-mouse-down" "Button2" "mouse-down" "0" "set!" "double-click" "begin" "0.2" "last-click" "-" "<" "if" "current-time" "time->seconds" "click" "let" "Button1" "=" "cond" "XButtonEvent-button-ref" "button" "XButtonEvent-y-ref" "v" "XButtonEvent-x-ref" "h" "XEvent-xbutton-ref" "let*" "msg" "window")}
      {Lisp-Entry "process-button-release-message" #f 487 13 487 43 ("right-mouse-up" "Button3" "middle-mouse-up" "Button2" "mouse-up" "Button1" "=" "cond" "XButtonEvent-button-ref" "button" "XButtonEvent-y-ref" "v" "XButtonEvent-x-ref" "h" "XEvent-xbutton-ref" "let*" "msg" "window")}
      {Lisp-Entry "process-focus-in-message" #f 500 13 500 37 ("1" "activate-app" "focus-gain" "NotifyNonlinear" "NotifyInferior" "NotifyAncestor" "=" "or" "when" "XFocusChangeEvent-detail-ref" "detail" "XEvent-xfocus-ref" "let*" "msg" "window")}
      {Lisp-Entry "process-focus-out-message" #f 510 13 510 38 ("focus-lose" "NotifyNonlinear" "NotifyInferior" "NotifyAncestor" "=" "or" "when" "XFocusChangeEvent-detail-ref" "detail" "XEvent-xfocus-ref" "let*" "msg" "window")}
      {Lisp-Entry "process-motion-notify-message" #f 519 13 519 42 ("process-expose" "mouse-move" "XMotionEvent-y-ref" "v" "XMotionEvent-x-ref" "h" "XEvent-xmotion-ref" "let*" "MotionNotify" "default-x11-display" "XCheckTypedEvent" "when" "loop" "let" "msg" "window")}
      {Lisp-Entry "process-key-press-message" #f 530 13 530 38 ("unprocessed" "call-key-press" "char?" "and" "Space" "'Space" "eq?" "let" "Symbolic-Keys" "assv-value" "key" "0" "1" "memq" "if" "integer->char" "default-x11-display" "XKeycodeToKeysym" "keysym" "translate-shortcut" "unless" ":alt" "alt-key" ":control" "ControlMask" ":shift" "cons" "set!" "ShiftMask" "bit-set?" "when" "mod" "XKeyEvent-state-ref" "state" "XKeyEvent-keycode-ref" "keycode" "XEvent-xkey-ref" "let*" "msg" "window")}
      {Lisp-Entry "process-configure-notify-message" #f 547 13 547 45 ("call-position-change" "call-size-change" "XConfigureEvent-y-ref" "y" "XConfigureEvent-x-ref" "x" "XConfigureEvent-height-ref" "height" "XConfigureEvent-width-ref" "width" "XEvent-xconfigure-ref" "let*" "msg" "window")}
      {Lisp-Entry "process-selection-request-message" #f 557 13 557 46 ("get-handle" "default-x11-display" "XSendClipboardString" "XSelectionRequestEvent-property-ref" "property" "XSelectionRequestEvent-target-ref" "target" "XSelectionRequestEvent-selection-ref" "selection" "XSelectionRequestEvent-requestor-ref" "requestor" "XEvent-xselectionrequest-ref" "let*" "msg" "window")}
      {Lisp-Entry "process-client-message-message" #f 566 13 566 43 ("process-xdnd-leave" "XdndLeave" "process-xdnd-drop" "XdndDrop" "process-xdnd-position" "XdndPosition" "process-xdnd-enter" "XdndEnter" "process-wm-protocols" "WM_PROTOCOLS" "equal?" "cond" "XClientMessageEvent-message_type-ref" "type" "XEvent-xclient-ref" "let*" "msg" "window")}
      {Lisp-Entry "process-wm-protocols" #f 581 13 581 33 ("on-close" "WM_DELETE_WINDOW" "equal?" "cond" "0" "long*-ref" "protocol" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "DndSource" #f 588 12 588 21 ()}
      {Lisp-Entry "DndAccept?" #f 589 12 589 22 ()}
      {Lisp-Entry "DndPosition" #f 590 12 590 23 ()}
      {Lisp-Entry "Dnd-type-supported?" #f 593 13 593 32 ("1" "+" "ulong*-ref" "equal?" "=" "if" "0" "i" "loop" "let" "size" "typelist" "type")}
      {Lisp-Entry "process-xdnd-enter" #f 602 13 602 31 ("text/uri-list" "Dnd-type-supported?" "DndAccept?" "uint8*->ulong*" "let" "XA_ATOM" "100000" "XdndTypeList" "default-x11-display" "XGetWindowProperty" "prop_return" "bytes_after_return" "nitems_return" "actual_format_return" "actual_type_return" "receive" "set!" "DndSource" "XdndVersion" ">" "or" "unless" "#x00000001" "=" "typelist?" "-24" "#xff000000" "1" "bitwise-and" "arithmetic-shift" "version" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "process-xdnd-position" #f 614 13 614 34 ("XEvent-free" "default-x11-display" "XSendEvent" "None" "XdndActionCopy" "4" "3" "#x00000000" "#x00000001" "DndAccept?" "#x00000002" "bitwise-ior" "1" "get-handle" "long*-set!" "32" "XClientMessageEvent-format-set!" "XdndStatus" "XClientMessageEvent-message_type-set!" "XClientMessageEvent-window-set!" "ClientMessage" "XClientMessageEvent-type-set!" "l" "XEvent-xclient-ref" "mess" "XEvent-make" "ev" "#x0000ffff" "-16" "#xffff0000" "bitwise-and" "arithmetic-shift" "Point" "new" "DndPosition" "set!" "begin" "DndSource" "equal?" "if" "2" "position" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "process-xdnd-drop" #f 637 13 637 30 ("XEvent-free" "XSendEvent" "XdndActionCopy" "#x00000001" "1" "long*-set!" "32" "XClientMessageEvent-format-set!" "XdndFinished" "XClientMessageEvent-message_type-set!" "XClientMessageEvent-window-set!" "XClientMessageEvent-display-set!" "ClientMessage" "XClientMessageEvent-type-set!" "l" "XEvent-xclient-ref" "mess" "XEvent-make" "ev" "h" "DndAccept?" "set!" "DndPosition" "platform-get-desktop" "acquire-point" "receive-files" "uint8*->char-string" "tokenise-windows" "File" "else" "Directory" "directory" "cadr" "pathname-type" "case" "new" "car" "split" "splitted" "not" "and" "x" "function" "collect" "files" "let" "text/uri-list" "XdndSelection" "get-handle" "default-x11-display" "XRetrieveSelection" "prop_return" "bytes_after_return" "nitems_return" "actual_format_return" "actual_type_return" "receive" "DndSource" "equal?" "when" "2" "stamp" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "process-xdnd-leave" #f 668 13 668 31 ("DndPosition" "DndAccept?" "set!" "DndSource" "equal?" "when" "0" "long*-ref" "source" "XClientMessageEvent-l-ref" "data" "let*" "msg" "window")}
      {Lisp-Entry "translate-shortcut" #f 677 13 677 31 ("Shortcut" "new" "dispatch-shortcut" "and" "if" "get-application" "app" "Symbolic-Keys" "assv-value" "key" "0" "integer->char" "default-x11-display" "XKeycodeToKeysym" "keysym" "let*" "keycode" "mods")}
      {Lisp-Entry "get-toplevel" #f 691 13 691 25 ("get-toplevel" "when" "get-application" "appl" "let")}
      {Lisp-Entry "get-toplevel-hwnd" #f 697 13 697 30 ("get-handle" "when" "get-toplevel" "toplevel" "let")}
      {Lisp-Entry "get-stage" #f 708 13 708 22 ("get-stage" "when" "get-application" "appl" "let")}
      {Lisp-Entry "set-capture" #f 719 13 719 24 ("handle")}
      {Lisp-Entry "unset-capture" #f 724 13 724 26 ()}
      {Lisp-Entry "with-platform-painting" #f 734 13 734 35 ("processed" "close" "unwind-protect" "get-height" "get-width" "get-handle" "cairo_xlib_surface_create" "Surface" "new" "surface" "with" "XDefaultVisual" "visual" "default-x11-display" "XDefaultScreen" "screen-no" "let*" "proc" "platform-data" "window")}
      {Lisp-Entry "get-window-surface" #f 744 20 744 38 ("get-height" "get-width" "get-handle" "cairo_xlib_surface_create" "XDefaultVisual" "visual" "default-x11-display" "XDefaultScreen" "screen-no" "let*" "window")}
      {Lisp-Entry "set-alpha-blending" #f 750 13 750 31 ("RDW_INVALIDATE" "RDW_ERASE" "bitwise-ior" "NULL" "RedrawWindow" "LWA_ALPHA" "0" "SetLayeredWindowAttributes" "set-layered?" "n" "handle")}
      {Lisp-Entry "platform-set-parent" #f 763 13 763 32 ("0" "get-handle" "default-x11-display" "XReparentWindow" "parent" "handle")}
      {Lisp-Entry "platform-get-first-child" #f 767 13 767 37 ("XGetChildHandle" "0" "=" "if" "default-x11-display" "XNumberOfChildren" "num-of-children" "let" "handle")}
      {Lisp-Entry "platform-get-first-visible-child" #f 774 13 774 45 ("1" "+" "platform-is-window-visible?" "XGetChildHandle" "child-handle" "n" "loop" "0" "=" "if" "default-x11-display" "XNumberOfChildren" "num-of-children" "let" "handle")}
      {Lisp-Entry "platform-is-window-visible?" #f 787 13 787 40 ("IsViewable" "XWindowAttributes-map_state-ref" "=" "default-x11-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "handle")}
      {Lisp-Entry "acquire-point" #f 793 13 793 26 ("Point" "new" "get-v" "get-h" "default-x11-display" "XTranslateCoordinates" "y" "x" "receive" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "acquire-rect" #f 798 13 798 25 ("corners->rect" "get-bottom" "get-right" "right-bottom" "get-top" "get-left" "Point" "new" "acquire-point" "left-top" "let" "shape" "from-handle" "to-handle")}
      {Lisp-Entry "platform-translate-to-root" #f 804 13 804 39 ("Point" "new" "get-v" "get-h" "XDefaultScreen" "XRootWindow" "default-x11-display" "XTranslateCoordinates" "y" "x" "receive" "pt" "handle")}
      {Lisp-Entry "platform-get-position-in-root" #f 809 13 809 42 ("platform-translate-to-root" "platform-get-position" "pt" "let" "handle")}
      {Lisp-Entry "platform-get-position" #f 814 13 814 34 ("Point" "new" "XWindowAttributes-y-ref" "y" "XWindowAttributes-x-ref" "x" "let*" "default-x11-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "parent-handle" "handle")}
      {Lisp-Entry "platform-set-position" #f 822 13 822 34 ("XEvent-free" "process-message" "StructureNotifyMask" "XWindowEvent" "get-v" "get-h" "default-x11-display" "XMoveWindow" "XEvent-make" "event" "let" "pos" "handle")}
      {Lisp-Entry "platform-get-size" #f 830 13 830 30 ("XWindowAttributes-height-ref" "XWindowAttributes-width-ref" "Dimension" "new" "default-x11-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "with" "handle")}
      {Lisp-Entry "platform-get-window-size" #f 836 13 836 37 ("platform-get-size" "handle")}
      {Lisp-Entry "platform-set-window-size" #f 840 13 840 37 ("XEvent-free" "process-message" "StructureNotifyMask" "XWindowEvent" "get-height" "get-width" "default-x11-display" "XResizeWindow" "XEvent-make" "event" "let" "size" "handle")}
      {Lisp-Entry "platform-set-bounds" #f 848 13 848 32 ("SWP_NOACTIVATE" "SWP_NOZORDER" "bitwise-ior" "rect-height" "rect-width" "get-top" "get-left" "NULL" "SetWindowPos" "platform-set-bounds" "'platform-set-bounds" "unimplemented" "rect" "handle")}
      {Lisp-Entry "platform-get-rect" #f 854 13 854 30 ("Rect" "new" "get-height" "b" "get-width" "+" "r" "get-v" "t" "get-h" "l" "let*" "platform-get-size" "size" "platform-get-position" "position" "let" "parent-handle" "handle")}
      {Lisp-Entry "platform-get-bounds" #f 864 13 864 32 ("RECT-bottom-ref" "RECT-right-ref" "RECT-top-ref" "RECT-left-ref" "Rect" "new" "2" "NULL" "MapWindowPoints" "GetWindowRect" "RECT-make" "rect" "with" "platform-get-bounds" "'platform-get-bounds" "unimplemented" "handle")}
      {Lisp-Entry "platform-mouse-position" #f 873 13 873 36 ("Point" "new" "XDefaultScreen" "XRootWindow" "default-x11-display" "XMousePosition" "y" "x" "receive")}
      {Lisp-Entry "platform-window-from-point" #f 878 13 878 39 ("XDefaultScreen" "XRootWindow" "default-x11-display" "XMouseWindow" "get-window" "point")}
      {Lisp-Entry "platform-move-window" #f 882 13 882 33 ("MoveWindow" "platform-move-window" "'platform-move-window" "unimplemented" "cy" "cx" "y" "x" "handle")}
      {Lisp-Entry "platform-window-enabled?" #f 888 13 888 37 ("IsWindowEnabled" "platform-window-enabled?" "'platform-window-enabled?" "unimplemented" "handle")}
      {Lisp-Entry "platform-enable-window" #f 894 13 894 35 ("handle")}
      {Lisp-Entry "platform-disable-window" #f 899 13 899 36 ("handle")}
      {Lisp-Entry "platform-get-client-rect" #f 904 13 904 37 ("XWindowAttributes-height-ref" "XWindowAttributes-width-ref" "0" "Rect" "new" "default-x11-display" "XGetWindowAttributes" "XWindowAttributes-make" "infos" "let" "handle")}
      {Lisp-Entry "scroll-invalidate" #f 910 13 910 30 (">" "+" "Rect" "new" "platform-invalidate-rect" "0" "<" "when" "get-bottom" "mb" "get-right" "mr" "get-top" "mt" "get-left" "ml" "let" "rect-union" "modified-rect" "offset-rect" "dst-rect" "rect-intersection" "let*" "clip-rect" "src-rect" "dv" "dh" "handle")}
      {Lisp-Entry "platform-scroll-window" #f 929 13 929 35 ("platform-update-window" "scroll-invalidate" "XFreeGC" "+" "XCopyArea" "1" "XSetClipRectangles" "get-top" "get-bottom" "XRectangle-height-set!" "get-left" "get-right" "-" "XRectangle-width-set!" "XRectangle-x-set!" "XRectangle-make" "xrect" "0" "default-x11-display" "XCreateGC" "gc" "let" "clip-rect" "rect" "dv" "dh" "handle")}
      {Lisp-Entry "inval-rects" #f 943 12 943 23 ("make-table")}
      {Lisp-Entry "validate-inval-rect" #f 946 13 946 32 ("new" "or" "h" "-" "w" "get-height" "get-bottom" "b" "get-width" "get-right" ">" "r" "get-top" "t" "get-left" "<" "l" "get-size" "size" "let" "0" "Rect" "=" "if" "window" "rect")}
      {Lisp-Entry "process-inval-rects" #f 965 13 965 32 ("make-table" "set!" "default-x11-display" "XInvalidateRect" "h" "-" "w" "get-bottom" "b" "get-right" "r" "get-top" "t" "get-left" "l" "when" "get-window" "window" "let" "rect" "handle" "function" "inval-rects" "iterate-table")}
      {Lisp-Entry "platform-invalidate-rect" #f 980 13 980 37 ("rect-union" "cond" "table-set!" "or" "get-window" "validate-inval-rect" "new-rect" "inval-rects" "table-ref" "old-rect" "let" "and" "when" "rect" "handle")}
      {Lisp-Entry "platform-invalidate-region" #f 994 13 994 39 ("get-rectangles" "platform-invalidate-rect" "rect" "function" "for-each" "region" "handle")}
      {Lisp-Entry "platform-invalidate-window" #f 1000 13 1000 39 ("get-height" "get-width" "0" "Rect" "new" "platform-invalidate-rect" "platform-get-size" "size" "let" "handle")}
      {Lisp-Entry "platform-redraw-window" #f 1005 13 1005 35 ("get-rectangles" "get-window" "paint" "function" "for-each" "if" "region" "rect" "handle")}
      {Lisp-Entry "platform-get-update-rect" #f 1012 13 1012 37 ("RECT->rect" "GetUpdateRect" "RECT-make" "rect" "with" "platform-get-update-rect" "'platform-get-update-rect" "unimplemented" "handle")}
      {Lisp-Entry "platform-get-update-region" #f 1020 13 1020 39 ("get-handle" "GetUpdateRgn" "Region" "new" "region" "let" "platform-get-update-region" "'platform-get-update-region" "unimplemented" "handle")}
      {Lisp-Entry "platform-redraw-view-only" #f 1028 13 1028 38 ("platform-invalidate-rect" "get-height" "get-width" "0" "Rect" "new" "rct" "platform-get-size" "size" "let*" "redraw-view" "handle" "view")}
      {Lisp-Entry "platform-update-window" #f 1036 13 1036 35 ("get-window" "paint" "table-set!" "when" "inval-rects" "table-ref" "rect" "let" "handle")}
      {Lisp-Entry "platform-show-noactivate" #f 1043 13 1043 37 ("show-window" "handle")}
      {Lisp-Entry "platform-hide-noactivate" #f 1047 13 1047 37 ("hide-window" "handle")}
      {Lisp-Entry "platform-bring-window-to-front" #f 1051 13 1051 43 ("default-x11-display" "XRaiseWindow" "handle")}
      {Lisp-Entry "platform-send-window-to-back" #f 1055 13 1055 41 ("default-x11-display" "XLowerWindow" "handle")}
      {Lisp-Entry "platform-select-foreground-window" #f 1059 13 1059 46 ("default-x11-display" "XRaiseWindow" "handle")}
      {Lisp-Entry "platform-lock-window-update" #f 1068 13 1068 40 ("handle")}
      {Lisp-Entry "platform-get-focus" #f 1076 13 1076 31 ("default-x11-display" "XGetInputFocus" "state" "win" "receive")}
      {Lisp-Entry "platform-set-focus" #f 1081 13 1081 31 ("CurrentTime" "RevertToNone" "XSetInputFocus" "platform-is-window-visible?" "and" "when" "default-x11-display" "XFlush" "handle")}
      {Lisp-Entry "Current-Cursor" #f 1092 19 1092 33 ()}
      {Lisp-Entry "load-cursor" #f 1096 13 1096 24 ("load-cursor" "'load-cursor" "unimplemented" "cursor")}
      {Lisp-Entry "get-named-cursor" #f 1100 13 1100 29 ("cadr" "essay" "Cursors" "assq" "info" "let" "name")}
      {Lisp-Entry "get-cursor" #f 1105 20 1105 30 ("Current-Cursor")}
      {Lisp-Entry "set-cursor" #f 1109 20 1109 30 ("get-handle" "default-x11-display" "XDefineCursor" "Current-Cursor" "set!" "get-toplevel" "toplevel" "get-named-cursor" "let" "symbol?" "when" "cursor")}
      {Lisp-Entry "hide-cursor" #f 1121 20 1121 31 ()}
      {Lisp-Entry "show-cursor" #f 1125 20 1125 31 ()}
      {Lisp-Entry "platform-get-desktop" #f 1134 13 1134 33 ("XDefaultScreen" "default-x11-display" "XRootWindow")}
      {Lisp-Entry "get-work-area" #f 1138 20 1138 33 ("get-dock-height" "get-height" "-" "get-width" "0" "Rect" "new" "platform-get-desktop" "platform-get-size" "size" "let")}
      {Lisp-Entry "platform-drop-files" #f 1158 13 1158 32 ("platform-drop-files" "'platform-drop-files" "unimplemented" "temp")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "resizer" "platform" "x11.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.resizer.platform.x11" #f 37 9 37 37 ("jazz")
      {Lisp-Entry "Part-Cursor" #f 43 10 43 21 ()}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "print" "platform" "x11.jazz"} 1226584788
    {Lisp-Entry "jazz.ui.print.platform.x11" #f 37 9 37 35 ("jazz")
      {Lisp-Entry "platform-print-document" #f 49 20 49 43 ("view")}
      {Lisp-Entry "platform-print-picture" #f 52 20 52 42 ("view")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "dialog" "platform" "x11.jazz"} 1226584787
    {Lisp-Entry "jazz.ui.dialog.platform.x11" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "choose-file" #f 54 20 54 31 ("anchors" "anchors:" "multiple-selection?" "multiple-selection?:" "extensions" "extensions:" "directory" "directory:" "host-title:" "File-Request" "Text-File-Request" "text?" "if" "get-modal" "title" "title:")}
      {Lisp-Entry "choose-new-file" #f 73 20 73 35 ("anchors" "anchors:" "default-extension" "default-extension:" "initial-filename" "initial-filename:" "extensions" "extensions:" "directory" "directory:" "host-title:" "NewFile-Request" "get-modal" "title" "title:")}
      {Lisp-Entry "choose-directory" #f 93 20 93 36 ("anchors" "anchors:" "directory" "directory:" "host-title:" "Directory-Request" "get-modal" "title" "title:")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "ui" "clipboard" "platform" "x11.jazz"} 1227094443
    {Lisp-Entry "jazz.ui.clipboard.platform.x11" #f 37 9 37 39 ("XSetClipboardString" "carbon-set-clipboard-text" "get-output-u8vector" "display" "open-output-u8vector" "output" "text" "set-clipboard-text" "get-application" "get-toplevel" "get-handle" "default-x11-display" "XGetClipboardString" "read-line" "input" "function" "cr" "'cr" "eol-encoding:" "UTF-16" "'UTF-16" "char-encoding:" "init:" "list" "call-with-input-u8vector" "u8vector?" "not" "if" "carbon-get-clipboard-text" "u8vect" "let" "format" "format:" "get-clipboard-text" "else" "carbon-initialize-clipboard" "initialize-clipboard" "public" "definition" "mac" "cond-expand" "jazz")
      {Lisp-Entry "register-clipboard-format" #f 80 20 80 45 ("Formats" "table-set!" "RegisterClipboardFormat" "id" "let" "format" "name")}
      {Lisp-Entry "clipboard-format-available?" #f 86 20 86 47 ("available-clipboard-formats" "member?" "error" "Formats" "table-ref" "either" "get-format" "define" "format")}
      {Lisp-Entry "available-clipboard-formats" #f 96 20 96 47 ("get-output" "put" "/=" "when" "EnumClipboardFormats" "format" "0" "previous" "iter" "List-Factory" "new" "formats" "let" "function" "with-opened-clipboard")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "system" "platform" "x11.jazz"} 1226584785
    {Lisp-Entry "jazz.system.platform.x11" #f 37 9 37 33 ("jazz")
      {Lisp-Entry "synchronize-x11?" #f 49 12 49 28 ()}
      {Lisp-Entry "x11-debug-error-handler" #f 53 13 53 36 ("1" "exit" "20" "depth:" "lexical-environment?:" "execution-stack" "pretty-print" "newline" "XErrorEvent-error_code-ref" "XGetErrorText" "format" "display" "error" "displ")}
      {Lisp-Entry "require-x11-display" #f 60 13 60 32 ("error" "XOpenDisplay" "either")}
      {Lisp-Entry "initialize-platform" #f 65 20 65 39 ("x11-create-cursors" "x11-debug-error-handler" "x11-set-error-handler" "get-default-x11-display" "XSynchronize" "synchronize-x11?" "when" "generate-x11-atoms" "require-x11-display" "set-default-x11-display")}
      {Lisp-Entry "get-computer-name" #f 79 20 79 37 ("adjust-string" "GetComputerName" "make-string" "name" "1" "MAX_COMPUTERNAME_LENGTH" "+" "size" "let*")}
      {Lisp-Entry "get-system-user-name" #f 89 20 89 40 ("adjust-string" "GetUserName" "MAX_PATH" "make-string" "username" "let")}
      {Lisp-Entry "Shift-Bit" #f 103 12 103 21 ("1")}
      {Lisp-Entry "Control-Bit" #f 107 12 107 23 ("2")}
      {Lisp-Entry "Alt-Bit" #f 111 12 111 19 ("4")}
      {Lisp-Entry "NoModifiers" #f 115 19 115 30 ("0")}
      {Lisp-Entry "modifiers-keys" #f 119 20 119 34 ("alt-down?" "Alt-Bit" "control-down?" "Control-Bit" "shift-down?" "Shift-Bit" "0" "mask-bit-set")}
      {Lisp-Entry "shift-key?" #f 123 20 123 30 ("Shift-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "control-key?" #f 127 20 127 32 ("Control-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "alt-key?" #f 131 20 131 28 ("Alt-Bit" "mask-bit-set?" "modifier")}
      {Lisp-Entry "shift-down?" #f 135 20 135 31 ("XK_Shift_R" "XK_Shift_L" "XKeysymToKeycode" "char->integer" "default-x11-display" "XKeyDown?" "or")}
      {Lisp-Entry "control-down?" #f 140 20 140 33 ("XK_Control_R" "XK_Control_L" "XKeysymToKeycode" "char->integer" "default-x11-display" "XKeyDown?" "or")}
      {Lisp-Entry "alt-down?" #f 145 20 145 29 ("XK_Alt_R" "XK_Alt_L" "XK_Meta_R" "XK_Meta_L" "XKeysymToKeycode" "char->integer" "default-x11-display" "XKeyDown?" "or")}
      {Lisp-Entry "modifiers-down" #f 152 20 152 34 ("alt-down?" "control-down?" "shift-down?" "values")}
      {Lisp-Entry "mouse-clicked?" #f 158 20 158 34 ("default-x11-display" "XButtonDown?")}
      {Lisp-Entry "use-generic-dialogs?" #f 167 13 167 33 ()}
      {Lisp-Entry "Version-Info" #f 176 19 176 31 ()}
      {Lisp-Entry "version-info" #f 180 13 180 25 ("GetVersionEx" "sizeof-OSVERSIONINFOEX" "OSVERSIONINFOEX-dwOSVersionInfoSize-set!" "OSVERSIONINFOEX-make" "info" "let" "set!" "Version-Info" "unless" "version-info" "'version-info" "unimplemented")}
      {Lisp-Entry "Windows-Version" #f 192 19 192 34 ()}
      {Lisp-Entry "get-windows-version" #f 196 20 196 39 ("0" "OSVERSIONINFOEX-dwMinorVersion-ref" "OSVERSIONINFOEX-dwMajorVersion-ref" "Version" "new" "version-info" "info" "let" "set!" "Windows-Version" "unless" "get-windows-version" "'get-windows-version" "unimplemented")}
      {Lisp-Entry "validate-version" #f 209 20 209 36 ("format" "if" "error" "<" "and" "mandatory-version" "mandatory" "get-process" "process" "let*" "present" "register-crash-info" "when" "validate-version" "'validate-version" "unimplemented" "cleanup" "cleanup:" "register" "register:" "version" "context" "what" "title")}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "crash" "x11.jazz"} 1226584783
    {Lisp-Entry "jazz.platform.crash.x11" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "setup-crash-handler" #f 40 13 40 32 ()}}}
  {Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "media" "platform" "x11.jazz"} 1226584783
    {Lisp-Entry "jazz.media.platform.x11" #f 37 9 37 32 ("jazz")
      {Lisp-Entry "play-sound" #f 48 20 48 30 ("bell" "asynchronous?" "asynchronous?:" "sound")}
      {Lisp-Entry "open-music" #f 58 20 58 30 ("alias" "file")}
      {Lisp-Entry "close-music" #f 60 20 60 31 ("alias")}
      {Lisp-Entry "play-music" #f 63 20 63 30 ("alias")}
      {Lisp-Entry "stop-music" #f 65 20 65 30 ("alias")}
      {Lisp-Entry "pause-music" #f 68 20 68 31 ("alias")}
      {Lisp-Entry "resume-music" #f 70 20 70 32 ("alias")}}})
"x11-types"
 ({Lisp-File-Entry {File Jazz "lib" "jazz" "src" "jazz" "platform" "x11" "x11-types.jazz"} 1227094443
    {Lisp-Entry "jazz.platform.x11.x11-types" #f 37 9 37 36 ("jazz")
      {Lisp-Entry "Display" #f 42 8 42 15 ("native")}
      {Lisp-Entry "Display*" #f 43 8 43 16 ("Display" "pointer")}
      {Lisp-Entry "Screen" #f 44 8 44 14 ("native")}
      {Lisp-Entry "Screen*" #f 45 8 45 15 ("Screen" "pointer")}
      {Lisp-Entry "Visual" #f 46 8 46 14 ("native")}
      {Lisp-Entry "Visual*" #f 47 8 47 15 ("Visual" "pointer")}
      {Lisp-Entry "XID" #f 48 8 48 11 ("unsigned-long" "native")}
      {Lisp-Entry "Window" #f 49 8 49 14 ("XID")}
      {Lisp-Entry "Drawable" #f 50 8 50 16 ("XID")}
      {Lisp-Entry "Pixmap" #f 51 8 51 14 ("XID")}
      {Lisp-Entry "Colormap" #f 52 8 52 16 ("XID")}
      {Lisp-Entry "Cursor" #f 53 8 53 14 ("XID")}
      {Lisp-Entry "KeySym" #f 54 8 54 14 ("XID")}
      {Lisp-Entry "Time" #f 55 8 55 12 ("unsigned-long" "native")}
      {Lisp-Entry "Status" #f 56 8 56 14 ("int")}
      {Lisp-Entry "GC" #f 58 8 58 10 ("native")}
      {Lisp-Entry "KeyCode" #f 60 8 60 15 ("unsigned-char" "native")}
      {Lisp-Entry "Atom" #f 62 8 62 12 ("XID")}
      {Lisp-Entry "Atom*" #f 63 8 63 13 ("Atom" "pointer")}
      {Lisp-Entry "fd_set" #f 66 8 66 14 ("type")}
      {Lisp-Entry "fd_set*" #f 67 8 67 15 ("fd_set" "pointer")}}})
