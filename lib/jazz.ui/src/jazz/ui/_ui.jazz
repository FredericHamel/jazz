;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; UI
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui jazz


(export (jazz.ui.autoload)
        (jazz.ui.syntax))

(import (jazz.ui.autoload)
        (jazz.graphic)
        (jazz.library)
        (jazz.library.exemplar))


;;;
;;;; Resource
;;;


(definition package (default-disabled-resource resource)
  (new (class-of resource)
    (format "{a}_" (get-name~ resource))))


;;;
;;;; Style
;;;


(definition public (preference->text-style name preference)
  (let ((name (get-name~ preference))
        (base (get-base~ preference))
        (font (get-font~ preference))
        (color (get-color~ preference))
        (highlight (get-highlight~ preference))
        (frame (get-frame~ preference)))
    (apply new Text-Style
      `(,@(if name (list name: name) '())
        ,@(if base (list base: base) '())
        ,@(if font (list font: (symbolic-font font)) '())
        ,@(if color (list color: (symbolic-color color)) '())
        ,@(if highlight (list highlight: (symbolic-color highlight)) '())
        ,@(if frame (list frame: (symbolic-color frame)) '())))))


;;;
;;;; Shortcut
;;;


(definition public (shortcut=? s1 <Shortcut> s2 <Shortcut>) <bool>
  (and (equal? (get-modifiers~ s1) (get-modifiers~ s2))
       (eqv? (get-key~ s1) (get-key~ s2))))


(definition public (shortcut-hash shortcut <Shortcut>)
  (fxwrap+ (eqv?-hash (get-key~ shortcut))
           (equal?-hash (get-modifiers~ shortcut))))


;;;
;;;; Bindings
;;;


(definition *bindings*
  #f)


(definition public (get-bindings)
  *bindings*)


(definition public (set-bindings bindings)
  (set! *bindings* bindings)
  (register-bindings bindings))


(definition package (register-bindings bindings)
  (for-each (lambda (actions)
              (register-actions (get-name~ actions) actions))
            (get-children~ bindings)))


;;;
;;;; Actions
;;;


(definition *actions*
  (make-table test: eq?))


(definition package (get-actions)
  *actions*)

(definition package (register-actions context actions)
  (table-set! *actions* context actions))

(definition package (find-actions context)
  (or (table-ref *actions* context #f)
      (error "Unable to find actions: {s}" context)))


(definition package (find-action-item context name)
  (find-component~ (find-actions context) name))


(definition package (require-action-item action)
  (or (find-action-item (get-action-context~ action) (get-action-name~ action))
      (error "Unable to find action: {t}" action)))


(definition package (call-action action sender properties (event: event #f))
  (let ((action-item (require-action-item action)))
    (invoke~ action-item sender properties action: action event: event)))


(definition package (get-action-enabled? action)
  (let ((action-item (require-action-item action)))
    (get-enabled?~ action-item)))


(definition package (set-action-enabled? action enabled?)
  (let ((action-item (require-action-item action)))
    (set-enabled?~ action-item enabled?)))


(definition package (set-actions-enabled? actions enabled?)
  (for-each (lambda (action)
              (set-action-enabled? action enabled?))
            actions))


(definition package (get-class-actions object)
  (class-actions~ object))


(definition package (get-guest-actions view)
  (guest-actions~ view))


(definition package (extract-actions actions-list)
  (let ((fact (new List-Factory)))
    (for-each (lambda (action-list)
                (let ((context-name (get-name~ action-list)))
                  (for-each (lambda (action-item)
                              (let* ((action-name (get-name~ action-item))
                                     (shortcut (get-shortcut~ action-item)))
                                (when shortcut
                                  (put~ fact action-item))))
                            (get-children~ action-list))))
              actions-list)
    (get-output~ fact)))


;;;
;;;; Handler
;;;


(definition public (notify-handler component handler sender properties)
  (typecase handler
    ((Handler)
     (let ((properties (or properties (get-properties~ handler))))
       (let ((event (apply new Event :action sender properties)))
         (invoke~ handler component event))))
    ((Action)
     (call-action handler sender properties))
    (else
     (error "Unknown handler type: {s}" handler))))


(definition public (invoke-handler component handler event)
  (typecase handler
    ((Handler)
     (invoke~ handler component event))
    ((Action)
     (call-action handler component #f event: event))
    (else
     (error "Unknown handler type: {s}" handler))))


;;;
;;;; Completions
;;;


(definition user-completions
  (make-table test: equal?))


(definition public (register-user-completion prefix completion)
  (table-set! user-completions prefix completion))


(definition public (register-user-completions alist)
  (for-each (lambda (pair)
              (bind (prefix . completion) pair
                (register-user-completion prefix completion)))
            alist))


(definition public (get-user-completion prefix)
  (table-ref user-completions prefix #f))

;;;
;;;; Drawing tools
;;;

(definition public (draw-caption surface rect <Rect> type (pushed? #f) (in-rectangle? #t))
    (set-color~ surface {Color Dark})
    (set-line-width~ surface 1)
    (when in-rectangle?
      (fill-rect~ surface rect {Color Draw-Edge-Light})
      (if pushed?
          (begin
            (draw-edge surface rect inner: 'sunken edges: 'rectangle)
            (draw-edge surface (new Rect (+ (get-left~ rect) 1) (+ (get-top~ rect) 1) (- (get-right~ rect) 1) (- (get-bottom~ rect) 1)) outer: 'sunken edges: 'rectangle))
        (draw-edge surface rect inner: 'raised outer: 'raised edges: 'rectangle))
      (set-color~ surface {Color Black}))
    (let ((rect (if pushed? (new Rect (+ (get-left~ rect) 1) (+ (get-top~ rect) 1) (+ (get-right~ rect) 1) (+ (get-bottom~ rect) 1)) rect)))
      (cond ((eq? type 'close)
             (unless in-rectangle?
               (set-color~ surface {Color red: 90 green: 90 blue: 90}))
             (move-to~ surface (+ (get-left~ rect) 4) (+ (get-top~ rect) 3))
             (line-to~ surface (- (get-right~ rect) 4) (- (get-bottom~ rect) 4))
             (stroke~ surface)
             (move-to~ surface (- (get-right~ rect) 4) (+ (get-top~ rect) 3))
             (line-to~ surface (+ (get-left~ rect) 4) (- (get-bottom~ rect) 4))
             (stroke~ surface))
            ((eq? type 'minimize)
             (move-to~ surface (+ (get-left~ rect) 4) (- (get-bottom~ rect) 5))
             (line-to~ surface (- (get-right~ rect) 6) (- (get-bottom~ rect) 5))
             (stroke~ surface)
             (move-to~ surface (+ (get-left~ rect) 4) (- (get-bottom~ rect) 4))
             (line-to~ surface (- (get-right~ rect) 6) (- (get-bottom~ rect) 4))
             (stroke~ surface))
            ((eq? type 'restore)
             (let ((x (+ (get-left~ rect) 3))
                   (y (- (get-bottom~ rect) 3)))
               (move-to~ surface x y)
               (line-to~ surface (+ x 5.5) y)
               (line-to~ surface (+ x 5.5) (- y 4))
               (line-to~ surface x (- y 4))
               (move-to~ surface x (- y 5))
               (line-to~ surface (+ x 6) (- y 5))
               (move-to~ surface (+ x 0.5) (- y 5))
               (line-to~ surface (+ x 0.5) y))
             (let ((x (+ (get-left~ rect) 8))
                   (y (- (get-bottom~ rect) 6)))
               (move-to~ surface x y)
               (line-to~ surface (+ x 2.5) y)
               (line-to~ surface (+ x 2.5) (- y 4))
               (line-to~ surface (- x 2.5) (- y 4))
               (move-to~ surface (- x 2.5) (- y 5))
               (line-to~ surface (+ x 3.5) (- y 5))
               (move-to~ surface (- x 2) (- y 5))
               (line-to~ surface (- x 2) (- y 2))
               (stroke~ surface)))
            ((eq? type 'maximize)
             (let ((x (+ (get-left~ rect) 3))
                   (y (- (get-bottom~ rect) 3)))
               (move-to~ surface x y)
               (line-to~ surface (+ x 8.5) y)
               (line-to~ surface (+ x 8.5) (- y 7))
               (line-to~ surface x (- y 7))
               (move-to~ surface x (- y 8))
               (line-to~ surface (+ x 9) (- y 8))
               (move-to~ surface (+ x 0.5) (- y 8))
               (line-to~ surface (+ x 0.5) (- y 0.5))
               (stroke~ surface))))))


(definition public (draw-edge surface rect <Rect> (edges: edges 'rectangle) (inner: inner #f) (outer: outer #f))
  (let ((edges (if (eq? edges 'rectangle) '(left right top bottom) edges)))
    (set-line-width~ surface 1)
    (when (memq? 'top edges)
      (cond ((eq? inner 'raised)
             (set-color~ surface {Color White})
             (if outer
                 (line~ surface (get-left~ rect) (+ (get-top~ rect) 1) (get-right~ rect) (+ (get-top~ rect) 1))
                 (line~ surface (get-left~ rect) (get-top~ rect) (get-right~ rect) (get-top~ rect))))
            ((eq? inner 'sunken)
             (set-color~ surface {Color Draw-Edge-Dark})
             (if outer
                 (line~ surface (get-left~ rect) (+ (get-top~ rect) 1) (get-right~ rect) (+ (get-top~ rect) 1))
                 (line~ surface (get-left~ rect) (get-top~ rect) (get-right~ rect) (get-top~ rect))))))
    (when (memq? 'left edges)
      (cond ((eq? inner 'raised)
             (set-color~ surface {Color White})
             (if outer
                 (line~ surface (+ (get-left~ rect) 1) (get-top~ rect) (+ (get-left~ rect) 1) (get-bottom~ rect))
                 (line~ surface (get-left~ rect) (get-top~ rect) (get-left~ rect) (get-bottom~ rect))))
            ((eq? inner 'sunken)
             (set-color~ surface {Color Draw-Edge-Dark})
             (if outer
                 (line~ surface (+ (get-left~ rect) 1) (get-top~ rect) (+ (get-left~ rect) 1) (get-bottom~ rect))
                 (line~ surface (get-left~ rect) (get-top~ rect) (get-left~ rect) (get-bottom~ rect))))))
    (when (memq? 'right edges)
      (cond ((eq? inner 'raised)
             (set-color~ surface {Color Draw-Edge-Medium})
             (if outer
                 (line~ surface (- (get-right~ rect) 2) (get-top~ rect) (- (get-right~ rect) 2) (get-bottom~ rect))
                 (line~ surface (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect))))
            ((eq? inner 'sunken)
             (set-color~ surface (new Color red: 241 green: 239 blue: 226))
             (if outer
                 (line~ surface (- (get-right~ rect) 2) (get-top~ rect) (- (get-right~ rect) 2) (get-bottom~ rect))
                 (line~ surface (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect))))))
    (when (memq? 'bottom edges)
      (cond ((eq? inner 'raised)
             (set-color~ surface {Color Draw-Edge-Medium})
             (if outer
                 (line~ surface (get-left~ rect) (- (get-bottom~ rect) 2) (get-right~ rect) (- (get-bottom~ rect) 2))
                 (line~ surface (get-left~ rect) (- (get-bottom~ rect) 1) (get-right~ rect) (- (get-bottom~ rect) 1))))
            ((eq? inner 'sunken)
             (set-color~ surface {Color Draw-Edge-Light})
             (if outer
                 (line~ surface (get-left~ rect) (- (get-bottom~ rect) 2) (get-right~ rect) (- (get-bottom~ rect) 2))
                 (line~ surface (get-left~ rect) (- (get-bottom~ rect) 1) (get-right~ rect) (- (get-bottom~ rect) 1))))))
    (when (memq? 'top edges)
      (cond ((eq? outer 'raised)
             (set-color~ surface {Color Draw-Edge-Light})
             (line~ surface (get-left~ rect) (get-top~ rect) (get-right~ rect) (get-top~ rect)))
            ((eq? outer 'sunken)
             (set-color~ surface {Color Draw-Edge-Medium})
             (line~ surface (get-left~ rect) (get-top~ rect) (get-right~ rect) (get-top~ rect)))))
    (when (memq? 'left edges)
      (cond ((eq? outer 'raised)
             (set-color~ surface {Color Draw-Edge-Light})
             (line~ surface (get-left~ rect) (get-top~ rect) (get-left~ rect) (get-bottom~ rect)))
            ((eq? outer 'sunken)
             (set-color~ surface {Color Draw-Edge-Medium})
             (line~ surface (get-left~ rect) (get-top~ rect) (get-left~ rect) (get-bottom~ rect)))))
    (when (memq? 'right edges)
      (cond ((eq? outer 'raised)
             (set-color~ surface {Color Draw-Edge-Dark})
             (line~ surface (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect)))
            ((eq? outer 'sunken)
             (set-color~ surface {Color White})
             (line~ surface (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect)))))
    (when (memq? 'bottom edges)
      (cond ((eq? outer 'raised)
             (set-color~ surface {Color Draw-Edge-Dark})
             (line~ surface (get-left~ rect) (- (get-bottom~ rect) 1) (get-right~ rect) (- (get-bottom~ rect) 1)))
            ((eq? outer 'sunken)
             (set-color~ surface {Color White})
             (line~ surface (get-left~ rect) (- (get-bottom~ rect) 1) (get-right~ rect) (- (get-bottom~ rect) 1)))))))


(definition public (draw-arrow-tip surface h <fx> v <fx> size direction)
  (set-line-width~ surface 1)
  (case direction
    ((up)
     (let ((width (- (+ size size) 1)))
       (increase! v (- size 1))
       (for-each (lambda (n)
                   (line~ surface h v (+ h width) v)
                   (increase! h)
                   (decrease! v)
                   (decrease! width 2))
                 (naturals 0 size))))
    ((down)
     (let ((width (- (+ size size) 1)))
       (for-each (lambda (n)
                   (line~ surface h v (+ h width) v)
                   (increase! h)
                   (increase! v)
                   (decrease! width 2))
                 (naturals 0 size))))
    ((left)
     (let ((height (- (+ size size) 1)))
       (increase! h (- size 1))
       (for-each (lambda (n)
                   (line~ surface h v h (+ v height))
                   (decrease! h)
                   (increase! v)
                   (decrease! height 2))
                 (naturals 0 size))))
    ((right)
     (let ((height (- (+ size size) 1)))
       (for-each (lambda (n)
                   (line~ surface h v h (+ v height))
                   (increase! h)
                   (increase! v)
                   (decrease! height 2))
                 (naturals 0 size))))))


(definition public (draw-check surface h <fx> v <fx>)
  (set-line-width~ surface 1)
  (line~ surface (+ h 0) (+ v 2) (+ h 0) (+ v 5))
  (line~ surface (+ h 1) (+ v 3) (+ h 1) (+ v 6))
  (line~ surface (+ h 2) (+ v 4) (+ h 2) (+ v 7))
  (line~ surface (+ h 3) (+ v 3) (+ h 3) (+ v 6))
  (line~ surface (+ h 4) (+ v 2) (+ h 4) (+ v 5))
  (line~ surface (+ h 5) (+ v 1) (+ h 5) (+ v 4))
  (line~ surface (+ h 6) (+ v 0) (+ h 6) (+ v 3))
  (stroke~ surface))


;;;
;;;; Layout
;;;


(enumeration LayoutType
  fill    ;; children take all the space
  fit     ;; the layout view takes the size of its unique child
  center  ;; children are centered in the view
  justify ;; using the logic of the justify method
  border  ;; location is one of north east west south center
  snap    ;; snap one widget relative to another one
  flow    ;; one after the other toolbar like
  box     ;; like flow but expand to fill the non-flow direction
  )


;;;
;;;; Cell
;;;


(definition (iterate-cells top-left bottom-right start direction proc)
  (let* ((next (case direction
                 ((forward) next-cell)
                 ((backward) previous-cell)))
         (advance (lambda (cell) (next cell top-left bottom-right 'horizontal)))
         (cell (advance (or start (case direction
                                    ((forward) top-left)
                                    ((backward) bottom-right))))))
    (while cell
      (proc cell)
      (set! cell (advance cell)))))


(definition (previous-cell cell min-cell max-cell direction)
  (case direction
    ((vertical) (let ((info (loop-cell (get-col~ cell) (get-line~ cell) (get-col~ max-cell) (get-line~ max-cell) (get-col~ min-cell) (get-line~ min-cell) -1 >)))
                  (when info
                    (receive (major minor) info
                      (new Cell minor major)))))
    ((horizontal) (let ((info (loop-cell (get-line~ cell) (get-col~ cell) (get-line~ max-cell) (get-col~ max-cell) (get-line~ min-cell) (get-col~ min-cell) -1 >)))
                    (when info
                      (receive (major minor) info
                        (new Cell major minor)))))))


(definition (next-cell cell min-cell max-cell direction)
  (case direction
    ((vertical) (let ((info (loop-cell (get-col~ cell) (get-line~ cell) (get-col~ min-cell) (get-line~ min-cell) (get-col~ max-cell) (get-line~ max-cell) 1 <)))
                  (when info
                    (receive (major minor) info
                      (new Cell minor major)))))
    ((horizontal) (let ((info (loop-cell (get-line~ cell) (get-col~ cell) (get-line~ min-cell) (get-col~ min-cell) (get-line~ max-cell) (get-col~ max-cell) 1 <)))
                    (when info
                      (receive (major minor) info
                        (new Cell major minor)))))))


;; caveat: step must be +1 or -1
(definition (loop-cell major minor start-major start-minor end-major end-minor step test)
  (cond ((test major start-major) (values start-major start-minor))
        ((test end-major major) #f)
        ((test minor start-minor) (values major start-minor))
        ((test minor end-minor) (values major (+ minor step)))
        ((test major end-major) (values (+ major step) start-minor))
        (else #f)))


;;;
;;;; View
;;;


(definition public inhibit-updates?
  (make-parameter #f))


;;;
;;;; Text
;;;


(definition public keyboard-input?
  (make-parameter #f))


;;;
;;;; Formats
;;;


(definition *formats*
  (new Exemplar-Domain
    name: 'Formats
    initer: (lambda ()
              (load-unit 'jazz.ui.literals.formats))))


(definition public (formats-domain)
  *formats*)


(definition public (register-format name format)
  (register-exemplar name format *formats*))


(definition public (registered-format name)
  (locate~ *formats* name error?: #f))


(definition public (symbolic-formats)
  (table-keys (get-index~ *formats*)))


(definition public (symbolic-format format)
  (if (symbol? format)
      (registered-format format)
    format))


;;;
;;;; Styles
;;;


(definition *styles*
  (new Exemplar-Domain
    name: 'Styles
    initer: (lambda ()
              (load-unit 'jazz.ui.literals.styles))))


(definition public (styles-domain)
  *styles*)


(definition public (register-style name style)
  (register-exemplar name style *styles*))


(definition public (registered-style name)
  (locate~ *styles* name error?: #f))


(definition public (symbolic-styles)
  (table-keys (get-index~ *styles*)))


(definition public (symbolic-style style)
  (if (symbol? style)
      (registered-style style)
    style))


;;;
;;;; Runs
;;;


(definition public (for-each-run runs <list> proc)
  (let ((offset 0))
    (for-each (lambda (run <Run>)
                (let* ((len (get-length~ run))
                       (limit (+ offset len)))
                  (proc run offset limit)
                  (set! offset limit)))
              runs)))


;;;
;;;; Tree
;;;


(definition public (in-cell-edit? view)
  (find-ascendant~ view Tree-Data-View))


(definition public min-column-width
    9)


;;;
;;;; Site
;;;


(class Site extends Object


  (slot row    accessors generate)
  (slot column accessors generate)


  (method override (initialize row column)
    (set! row~self row)
    (set! column~self column))


  (method override (copy-object deep?)
    (new Site row column))


  (method override (compare-object target)
    (if (is-not? target Site)
        :incompatible
      (let ((compared (compare row (get-row~ target))))
        (if (not (eq? compared :equal))
            compared
          (compare column (get-column~ target))))))


  (method override (print output readably)
    (format output "~{{a} {a} {a}}"
      (category-name (class-of self))
      row
      column)))


(specialize inline as site=? (= s1 <Site> s2 <Site>) <bool>
  (and (eq? (get-row~ s1) (get-row~ s2))
       (eq? (get-column~ s1) (get-column~ s2))))


(definition public (site-hash s <Site>)
  (fxwrap+ (eqv?-hash (get-row~ s))
           (eqv?-hash (get-column~ s)))))
