;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text Style
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Text-Style jazz


(import (jazz.graphic)
        (jazz.library.exemplar)
        (jazz.ui))


(class Text-Style extends Style
  
  
  (attributes (alignment)
    (font      initialize #f test exemplar+=?)
    (color     initialize #f test exemplar+=?)
    (highlight initialize #f test exemplar+=?)
    (frame     initialize #f test exemplar+=?))
  
  
  ;;;
  ;;;; Size
  ;;;
  
  
  (method override (get-height)
    (line-height~ (get-font)))
  
  
  (method override (run-width run)
    (get-text-width (coerce (get-string~ run) String) (get-font))) ;; warning this coerce could become inneficient
  
  
  ;;;
  ;;;; Scan
  ;;;
  
  
  (method override (scan h <fx> start <fx> end <fx> tabs run <Run> proc)
    (let ((str (get-string~ run)))
      (let ((left #f)
            (mid #f)
            (right h)
            (len <fx> (cardinality str)))
        (loop (for n from start below (max start (min end len)))
              (let ((c (element str n)))
                (if (eqv? c #\tab)
                    (begin
                      (while (<= (car tabs) right)
                        (set! tabs (cdr tabs)))
                      (let ((width (- (car tabs) right)))
                        (set! left right)
                        (set! mid (+ right (fxround/ width 2)))
                        (set! right (+ left width))))
                  (let ((width (get-text-width (string c) (get-font))))
                    (set! left right)
                    (set! mid (+ right (fxround/ width 2)))
                    (increase! right width)))
                (proc c n left mid right))))))
  
  
  ;;;
  ;;;; Wrap
  ;;;
  
  
  (definition Break-Characters
    '(#\space))
  
  
  (method override (wrap context margin h <fx> v <fx> width <fx> tabs place break run <Run>)
    (let* ((start h)
           (string (get-string~ run))
           (len (cardinality string))
           (end (- len 1))
           (offset 0)
           (brk #f)
           (brk-right #f)
           (rightmost h))
      (scan h 0 len tabs run
        (lambda (c <char> n <fx> left <fx> mid <fx> right <fx>)
          (set! rightmost right)
          (when (memq? c Break-Characters)
            (set! brk (+ n 1))
            (set! brk-right right))
          (when (and (> (+ h (- right start margin)) width)
                     (or (not brk)
                         (not (memq? c Break-Characters))))
            (let ((n <fx> (or brk n)))
              (place (new Run (subseq! string offset n) self))
              (break right)
              (set! h margin)
              (set! start (if brk brk-right left))
              (set! offset n)
              (set! brk #f)))
          (when (>= n end)
            (if (= offset 0)
                (place run)
              (place (new Run (subseq! string offset (cardinality string)) self))))))
      (+ h (- rightmost start))))
  
  
  (method override (height-update height)
    )
  
  
  ;;;
  ;;;; Drawing
  ;;;


  (method (draw-tabbed-text surface h <fx> v <fx> str <string> tabs origin text-color highlight-color)
    (define (draw-substring h v from to)
      (let ((extents (delay (get-text-extent~ surface str (get-font) from to))))
        (when highlight-color
          (fill-rect~ surface (new Rect h v (+ h (get-width~ (force extents))) (+ v (get-height~ (force extents)))) highlight-color))
        (draw-text~ surface h v str (get-font) text-color from to)
        extents))

    (let ((uph h)
          (beginning 0)
          (stops tabs))
      (loop (for i from 0 below (cardinality str))
            (when (eqv? (element str i) #\tab)
              (when (/= beginning i)
                (set! uph (+ uph (get-width~ (force (draw-substring uph v beginning i))))))
              (while (<= (+ origin (cast <fx> (car stops))) (+ uph 1))
                (set! stops (cdr stops)))
              (set! uph (+ origin (cast <fx> (car stops))))
              (set! beginning (+ i 1))
              (set! stops (cdr stops))))
      (draw-substring uph v beginning (cardinality str))))
  
  
  (method override (draw-style surface <Surface> context text <Sequence> h <fx> v <fx> line-height <fx> tabs left <fx> enabled? <bool>)
    (let ((str (coerce text String))
          (v (+ v (justify-element (get-height~ (get-font)) line-height)))
          (text-color (if (getf context print-black/white?:)
                          (registered-color 'Black)
                          (or (get-color) (registered-color 'Black)))))
      (if (not enabled?)
          (draw-text~ surface h v str (get-font) {Color Dark})
          (begin
            (draw-tabbed-text surface h v str tabs left text-color (get-highlight))
            (when (get-frame)
              (frame-rect~ surface (new Rect h v (+ h (get-width~ (get-text-extent~ surface str (get-font)))) (+ v line-height)) (get-frame)))))))))
