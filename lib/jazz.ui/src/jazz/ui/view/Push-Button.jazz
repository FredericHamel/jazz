;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Push Buttons
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Push-Button jazz


(import (jazz.designer)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.ui)
        (jazz.ui.view))


(class Push-Button extends View
  
  
  (property default? initialize #f accessors explicit)
  (property flat?    initialize #f accessors generate)
  
  
  (slot state initialize 'inactive)
  
  
  (form
    (<install> background: {Color Medium}))
  
  
  (method override (mouse-activate?)
    #f)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-default?)
    default?)
  
  
  (method public (set-default? flag)
    (set! default? flag)
    (invalidate-view))


  ;;;
  ;;;; State
  ;;;
  
  
  (method public (get-state)
    state)
  
  
  (method public (set-state value)
    (set! state value)
    (invalidate-view))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (default-size)
    {Dimension 100 22})
  
  
  (method override (preferred-size)
    (let ((title (localize title)))
      (if (not title)
          (default-size)
        (new Dimension (+ (get-text-width title (effective-font)) 50) 22))))
  
  
  ;;;
  ;;;; Mouse
  ;;;


  (method override (mouse-enter)
    (when (and (view-enabled?) (or (not mouse-down?) (eq? mouse-down-view self)))
      (case (get-state)
        ((inactive) (set-state 'highlighted))
        ((out-pushed) (set-state 'pushed)))))


  (method override (mouse-leave)
    (when (and (view-enabled?) (or (not mouse-down?) (eq? mouse-down-view self)))
      (case (get-state)
        ((highlighted) (set-state 'inactive))
        ((pushed) (set-state 'out-pushed)))))
  
  
  (method override (mouse-down pos)
    (when (view-enabled?)
      (set-state 'pushed)))
  
  
  (method override (drag-up pos . rest)
    (when (view-enabled?)
      (unwind-protect
          (up)
        (case (get-state)
          ((pushed) (set-state 'highlighted))
          ((out-pushed) (set-state 'inactive))))))


  (method (up)
    (when (eq? (get-state) 'pushed)
      (process-action self)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw surface context lh lv)
    (let ((rect (get-bounds)))
      (when default?
        (frame-rect~ surface rect (if (get-enabled?) {Color Black} {Color Dark}))
        (set! rect (inflate-rect rect -1 -1)))
      (if flat?
          (draw-edge surface rect outer: 'raised edges: 'rectangle)
          (begin
            (set-line-width~ surface 1)
            (if (eq? state 'pushed)
                (begin
                  (set-color~ surface {Color Draw-Edge-Dark})
                  (line~ surface (get-left~ rect) (get-top~ rect) (- (get-right~ rect) 1) (get-top~ rect))
                  (line~ surface (get-left~ rect) (get-top~ rect) (get-left~ rect) (- (get-bottom~ rect) 1))
                  (set-color~ surface {Color Draw-Edge-Medium})
                  (line~ surface (+ (get-left~ rect) 1) (+ (get-top~ rect) 1) (- (get-right~ rect) 2) (+ (get-top~ rect) 1))
                  (line~ surface (+ (get-left~ rect) 1) (+ (get-left~ rect) 1) (+ (get-left~ rect) 1) (- (get-bottom~ rect) 2))
                  (set-color~ surface {Color White})
                  (line~ surface (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect))
                  (line~ surface (- (get-right~ rect) 1) (- (get-bottom~ rect) 1) (get-left~ rect) (- (get-bottom~ rect) 1)))
                (begin
                  (set-color~ surface {Color White})
                  (move-to~ surface (get-left~ rect) (- (get-bottom~ rect) 1))
                  (line-to~ surface (get-left~ rect) (get-top~ rect))
                  (line-to~ surface (- (get-right~ rect) 1) (get-top~ rect))
                  (stroke~ surface)
                  (set-line-width~ surface 1)
                  (set-color~ surface {Color Draw-Edge-Dark})
                  (line~ surface (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect))
                  (line~ surface (- (get-right~ rect) 1) (- (get-bottom~ rect) 1) (get-left~ rect) (- (get-bottom~ rect) 1))
                  (set-color~ surface {Color Draw-Edge-Medium})
                  (line~ surface (- (get-right~ rect) 2) (+ (get-top~ rect) 1) (- (get-right~ rect) 2) (- (get-bottom~ rect) 1))
                  (line~ surface (- (get-right~ rect) 2) (- (get-bottom~ rect) 2) (+ (get-left~ rect) 1) (- (get-bottom~ rect) 2))))))
      (let* ((title (or (localize title) ""))
             (offset (case state ((pushed) 1) (else 0)))
             (size (get-size))
             (extent (get-text-extent~ surface title (effective-font))))
        (draw-text~ surface
                    (+ (quotient (- (get-width~ size) (get-width~ extent)) 2) offset)
                    (+ (quotient (- (get-height~ size) (get-height~ extent)) 2) offset)
                    title
                    (effective-font)
                    (if (get-enabled?) {Color Black} {Color Dark})))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Push-Button-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Push-Button-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>                           default: title
        (<Property-Descriptor>  name: default? title: "Default"
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: flat?    title: "Flat"
          (<Boolean-Domain>     name: domain)))))
  
  
  (method override (class-image class)
    {Image-Resource "MsgKeyboard"}))))
