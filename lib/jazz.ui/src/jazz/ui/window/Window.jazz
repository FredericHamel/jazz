;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Window
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;    Jeremie Lasalle Ratelle
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.window.Window jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.locale)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window))


(class Window extends Figure


  (property title initialize #f accessors explicit)


  (slot handle         initialize #f                 accessors generate)
  (slot window-manager initialize (*window-manager*) getter generate) ;; keep this around in case this window ever winds up under a different binding of *window-manager* (although if that happens, focus functions in _view.jazz should break horribly)


  ;;;
  ;;;; Initialization
  ;;;


  (method override (initially-visible?)
    #f)


  (method override (default-parent)
    (window-default-parent~ window-manager self))


  (method override (prepare rest)
    (nextmethod rest)
    (let ((handle (prepare-handle~ window-manager self rest)))
      (register-window~ window-manager handle self)
      (set! handle~self handle)))


  (method override (conclude rest)
    (nextmethod rest)
    (size-change 'restored (get-size)))


  (method public (open?)
    (boolean handle))


  (method override (show)
    (nextmethod)
    (assert handle)
    (show-window~ window-manager handle))


  (method override (hide)
    (nextmethod)
    (assert handle)
    (hide-window~ window-manager handle))


  (method public (minimize)
    (assert handle)
    (minimize-window~ window-manager handle))


  (method public (get-state)
    (assert handle)
    (window-state~ window-manager handle))


  (method public (set-state state)
    (assert handle)
    (case state
      ((minimized) (minimize-window~ window-manager handle))
      ((maximized) (maximize-window~ window-manager handle))
      ((restored) (restore-window~ window-manager handle))
      (else (error "Unknown window state: {s}" state))))


  (method public (set-placement position size)
    (assert handle)
    (set-window-placement~ window-manager handle position size))


  (method public (maximize)
    (assert handle)
    (show-maximized~ window-manager handle))


  (method override (close)
    (set-visible? #f)
    (destroy-component)
    (destroy-window~ window-manager handle)
    (set! handle~self #f))


  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (if (not handle)
            (format output "orphaned")
          (let ((position (get-position))
                (size (get-size)))
            (if (or (not title) (empty-string? title))
                (format output "{a} {a}" position size)
              (format output "{s} {a} {a}" title position size)))))))

  
  ;;;
  ;;;; Component
  ;;;


  (method override (add-child child)
    (set! children (cons child children)))


  (method override (add-form parent-form child-form)
    (set-parent~ parent-form child-form))


  ;;;
  ;;;; Unprocessed
  ;;;


  (method protected virtual (unprocessed-message)
    unprocessed)


  ;;;
  ;;;; Paint
  ;;;


  (method protected virtual (paint region . platform-data)
    (with-platform-painting~ window-manager self platform-data draw))


  (definition *colors*
    '({Color Dark-Red}
      {Color Dark-Orange}
      {Color Dark-Yellow}
      {Color Dark-Green}
      {Color Dark-Blue}
      {Color Dark-Purple}
      {Color Ochre}))
  
  (definition *nb-colors*
    (length *colors*))

  (definition *current-color*
    0)


  (definition (draw-placeholder surface) ;; fill current clip region w/ debug color
    (bucket-fill-surface~ surface (cycle-debug-color!)))


  (method protected virtual (draw surface)
    )


  ;;;
  ;;;; Mouse
  ;;;


  (method protected virtual (mouse-wheel h v delta)
    (let ((view (get-mouse-in)))
      (if view
          (let ((acquired #f))
            (mouse-wheel~ view acquired delta)
            processed)
        unprocessed)))


  (method protected virtual (mouse-down h v)
    unprocessed)


  (method protected virtual (mouse-move h v)
    unprocessed)


  (method protected virtual (mouse-up h v)
    unprocessed)


  (method protected virtual (double-click h v)
    (mouse-down h v))


  (method protected virtual (middle-mouse-down h v)
    unprocessed)


  (method protected virtual (middle-mouse-up h v)
    unprocessed)


  (method protected virtual (right-mouse-down h v)
    unprocessed)


  (method protected virtual (right-mouse-up h v)
    unprocessed)


  ;; tofix : window-specific
  (method (call-context-menu h v)
    (let ((pos (acquire (get-desktop) (new Point h v))))
      (context-menu (get-h~ pos) (get-v~ pos))))


  (method protected virtual (context-menu h v)
    unprocessed)


  ;;;
  ;;;; Capture
  ;;;


  (method public (acquire-capture)
    (assert handle)
    (set-capture~ window-manager handle))


  (method public (release-capture)
    (unset-capture~ window-manager))


  ;;;
  ;;;; Cursor
  ;;;


  (method protected virtual (cursor-update hit)
    (if hit
        processed
      unprocessed))


  ;;;
  ;;;; Keyboard
  ;;;


  (method (system-key-down)
    (update-cursor)
    processed)


  (method (system-key-up)
    (update-cursor)
    processed)
  
  (method protected virtual (key-down code)
    unprocessed)
  
  
  (method protected virtual (key-up code)
    unprocessed)


  (method (call-key-press char)
    (unless (invalid-character? char)
      (key-press char)))


  (method public virtual (key-press char)
    unprocessed)


  ;;;
  ;;;; Focus
  ;;;
  
  
  (method package virtual (reset-focus)
    )


  ;;;
  ;;;; Handlers
  ;;;


  (method public (call-position-change h v)
    (position-change (new Point h v)))


  (method protected virtual (position-change position)
    unprocessed)


  (method public (call-size-change state width height)
    (if (get-installed?)
        (size-change state (new Dimension width height))
      unprocessed))


  (method protected virtual (size-change state size)
    unprocessed)


  (method protected virtual (mouse-leave)
    unprocessed)


  (method protected virtual (mouse-activate?)
    #f)


  (method protected virtual (on-mouse-activate)
    unprocessed)


  ;; when a toplevel window (including palettes) is activated or deactivated
  (method protected virtual (on-activate kind)
    (if (eq? kind 'inactive)
        (on-deactivate-palette)
      (on-activate-palette))
    unprocessed)


  (method protected virtual (on-activate-palette)
    )


  (method protected virtual (on-deactivate-palette)
    )


  ;; Called when a toplevel window (including palettes)
  ;; is activated by a change of the active application
  (method protected virtual (activate-application)
    unprocessed)


  ;; Called when a toplevel window (including palettes)
  ;; is deactivated by a change of the active application
  (method protected virtual (deactivate-application)
    unprocessed)


  (method protected virtual (on-close evt)
    (close-window))


  (method public virtual (close-window)
    (close))


  (method protected virtual (focus-gain)
    unprocessed)


  (method protected virtual (focus-lose)
    unprocessed)


  ;;;
  ;;;; Drop Files
  ;;;


  (method (drop-files wparam)
    (wm-drop-files~ window-manager self wparam))


  (method protected virtual (receive-files pos files)
    )


  ;;;
  ;;;; Management
  ;;;


  (method public (opened?)
    (boolean handle))


  (method override (set-parent parent)
    (nextmethod parent)
    (assert handle)
    (wm-set-parent~ window-manager handle parent))


  (method public (get-external-frame)
    (if (is? self External-Frame)
        self
      (when parent
        (get-frame~ parent))))


  (method public (get-overlapped)
    (if (is? self Overlapped)
        self
      (get-overlapped~ parent)))


  (method public virtual (get-title)
    title)


  (method public virtual (set-title value)
    (set! title value)
    (assert handle)
    (set-window-title~ window-manager handle (localize title)))


  (method public (get-window-title)
    (assert handle)
    (get-window-handle-title~ window-manager handle))


  (method public (acquire window <Window> shape)
    (assert handle)
    (typecase shape
      ((Point)
       (acquire-point~ window-manager handle (get-handle~ window) shape))
      ((Rect)
       (acquire-rect~ window-manager handle (get-handle~ window) shape))
      (else
        (error "Unable to translate {t}" shape))))


  (method public (get-position-in-root) <Point>
    (assert handle)
    (wm-translate-to-root~ window-manager handle (get-position)))


  (method override (get-position) <Point>
    (assert handle)
    (wm-get-position~ window-manager handle #f))


  (method override (set-position pos <Point>) <void>
    (assert handle)
    (unless (nu=? pos (get-position))
      (wm-set-position~ window-manager handle pos)))


  (method public (move-window dh <fx> dv <fx>)
    (let ((pos (get-position)))
      (set-position (new Point (+ (get-h~ pos) dh) (+ (get-v~ pos) dv)))))


  (method override (get-size) <Dimension>
    (assert handle)
    (wm-get-size~ window-manager handle))


  (method override (set-size new-size <Dimension>) <void>
    (assert handle)
    (let ((delta (nu- new-size (wm-get-size~ window-manager handle))))
      (unless (nu=? delta {Dimension 0 0})
        (set-window-size (nu+ (get-window-size) delta)))))


  (method public (size-window dwidth <fx> dheight <fx>)
    (let ((size (get-size)))
      (set-size (new Dimension (+ (get-width~ size) dwidth) (+ (get-height~ size) dheight)))))


  (method public (get-window-size) <Dimension>
    (assert handle)
    (wm-get-window-size~ window-manager handle))


  (method public (set-window-size size)
    (assert handle)
    (wm-set-window-size~ window-manager handle size))


  (method public (set-rect rect)
    (assert handle)
    (wm-set-rect~ window-manager handle rect))


  (method public (grow-rect dh dv dwidth dheight)
    (let ((pos (+ (get-position) (new Point dh dv)))
          (size (+ (get-window-size) (new Dimension dwidth dheight))))
      (set-window-size size)
      (set-position pos)))


  (method public (get-width) <fx>
    (get-width~ (get-size)))


  (method public (get-height) <fx>
    (get-height~ (get-size)))


  (method public (get-rect) <Rect>
    (assert handle)
    (wm-get-rect~ window-manager handle (if (get-parent) (get-handle~ (get-parent)) #f)))


  (method public (get-bounds) <Rect>
    (assert handle)
    (wm-get-bounds~ window-manager handle))


  (method public (ensure-displayed)
    (let ((outer (if (not parent) (get-size~ (get-desktop)) (get-size~ parent)))
          (rect (get-rect)))
      (receive (new-position new-size) (fit-within outer rect padding: 8)
        (set-size new-size)
        (set-position new-position))))


  (method public (mouse-position) <Point>
    (acquire (get-desktop) (wm-mouse-position~ window-manager)))


  (method public (mouse-window)
    (find-window (mouse-position)))


  (method public (mouse-in-window?)
    (point-in-window? (mouse-position)))


  (method public (point-in-window? point)
    (let ((size (get-window-size)))
      (and (in-interval? (get-h~ point) 0 (get-width~ size))
           (in-interval? (get-v~ point) 0 (get-height~ size)))))


  (method public (find-window point)
    (get-window~ window-manager (wm-window-from-point~ window-manager point)))


  (method public (move x y cx cy)
    (assert handle)
    (wm-move-window~ window-manager handle x y cx cy))


  (method public (acquire-focus)
    (assert handle)
    (wm-set-focus~ window-manager handle))


  (method public (enable-window)
    (assert handle)
    (wm-enable-window~ window-manager handle))


  (method public (disable-window)
    (assert handle)
    (wm-disable-window~ window-manager handle))


  (method public (get-client-rect)
    (assert handle)
    (wm-get-client-rect~ window-manager handle))


  (method public (scroll-window dh dv rect clip-rect)
    (assert handle)
    (if (inhibit-updates?)
        (invalidate-window)
      (wm-scroll-window~ window-manager handle dh dv rect clip-rect))
    (let ((proc (debug-flicker)))
      (when proc
        (proc))))


  (method public (invalidate-rect rect)
    (assert handle)
    (wm-invalidate-rect~ window-manager handle rect))


  (method public (invalidate-region region)
    (assert handle)
    (wm-invalidate-region~ window-manager handle region))


  (method public (invalidate-window)
    (assert handle)
    (wm-invalidate-window~ window-manager handle))


  (method public (redraw-window (rect: rect #f) (region: region #f))
    (assert handle)
    (if (inhibit-updates?)
        (cond (rect (invalidate-rect rect))
              (region (invalidate-region region))
              (else (invalidate-window)))
      (if (or rect region)
          (wm-redraw-window~ window-manager handle rect region)
        (wm-redraw-window~ window-manager handle (get-client-rect) #f))))


  (method public (invalidate-border (insets: insets {Rect 1 1 1 1}))
    (with ((region (border-region insets: insets)))
      (invalidate-region region)))


  (method public (redraw-border (insets: insets {Rect 1 1 1 1}))
    (with ((region (border-region insets: insets)))
      (redraw-window region: region)))


  (method public (border-region (insets: insets {Rect 1 1 1 1}))
    (frame-region (get-client-rect) insets: insets))


  (method public (update-window)
    (assert handle)
    (if (inhibit-updates?)
        (invalidate-window)
      (wm-update-window~ window-manager handle)))


  (method public (show-noactivate)
    (assert handle)
    (wm-show-noactivate~ window-manager handle))


  ;;;
  ;;;; Children
  ;;;


  (method public (first-window)
    (let ((windows (get-windows)))
      (if (null? windows)
          #f
        (first windows))))


  (method public (get-windows (include-invisibles?: include-invisibles? #f))
    (collect-if (lambda (child)
                  (and (is? child Window)
                       (or include-invisibles? (get-visible?~ child))))
                (get-children)))


  (method public (front-window?)
    (eq? self (first-window~ parent)))


  ;;;
  ;;;; Layer
  ;;;


  (method override (bring-to-front)
    (nextmethod)
    (assert handle)
    (bring-window-to-front~ window-manager handle))


  (method override (send-to-back)
    (nextmethod)
    (assert handle)
    (send-window-to-back~ window-manager handle))


  (method public (select-foreground)
    (select-foreground-window~ window-manager handle))


  ;;;
  ;;;; Layout
  ;;;


  (method override (get-location)
    location)


  (method override (set-location loc)
    (set! location loc))


  (method public virtual (layout)
    )


  ;;;
  ;;;; View
  ;;;


  (method public (mouse-view)
    (find-view (mouse-position)))


  (method public (find-view pos)
    (let ((window (find-window pos)))
      (when (is? window View-Player)
        (let ((root (get-root~ window)))
          (find-drawing~ root (acquire~ window self pos))))))


  (method public (to-view shape view)
    (let* ((player (get-player~ view))
           (acquired (acquire~ player self shape)))
      (acquire~ view (get-root~ player) acquired)))


  ;;;
  ;;;; Debugging
  ;;;


  (method public virtual (debug-window pos)
    (unimplemented 'debug-window)
    @Development
    (set-%~ Development self))


  (method public virtual (describe-window pos)
    (unimplemented 'describe-window))))
