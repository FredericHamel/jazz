;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform-dependant Window Definitions (Carbon)
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.window.platform.carbon jazz


(import (jazz.graphic)
        (jazz.io)
        (jazz.library)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.platform.carbon)
        (jazz.system)
        (jazz.ui)
        (time))


(definition desktop #f)


(definition (processed-result return)
  (if (and (pair? return) (eq? (car return) 'processed))
      (if (null? (cdr return))
          0
        (cadr return))
    0))


(definition (is-window-HIView? window)
  (not (or (is? window Toplevel)
           (is? window Desktop))))


;;;
;;;; Window
;;;


(definition public Windows-Table
  (make-table test: eqv?))


(definition public Window-Title-Table
  (make-table test: eqv?))


(definition public inline (get-window hwnd)
  (let ((hwnd (if (foreign? hwnd) (foreign-address hwnd) hwnd)))
    (table-ref Windows-Table hwnd #f)))


(definition public inline (set-window hwnd window)
  (table-set! Windows-Table (foreign-address hwnd) window))


(definition public inline (get-window-handle-title handle)
  (table-ref Window-Title-Table handle #f))


(definition public inline (set-window-title handle title)
  (table-set! Window-Title-Table handle title))


(definition package (window-parent window)
  (let ((parent (get-parent~ window)))
    (if parent
        (get-handle~ parent)
      #f)))


(definition package (window-default-parent window)
  (typecase window
    ((Popup) (get-toplevel))
    (else #f)))


(definition package (prepare-handle window rest)
  (if (is-window-HIView? window)
      (create-HIView-handle window rest)
    (let* ((window-handle (create-window-handle window rest))
           (handle (HIViewGetContent window-handle)))
      (InstallControlEventHandler handle)
      handle)))


(definition (create-HIView-handle window rest)
  (let* ((parent (window-parent window))
         (new-handle (HIViewCreate)))
    (HIViewAddSubview parent new-handle)
    (HIViewChangeFeatures new-handle kHIViewFeatureAllowsSubviews 0)
    (HIViewSetFrame new-handle 0.0 0.0 500.0 500.0)
    (InstallControlEventHandler new-handle)
    new-handle))


(definition (create-window-handle window rest)
  (let ((handle (CreateNewWindow kDocumentWindowClass
                  (bitwise-ior kWindowStandardDocumentAttributes
                               kWindowStandardHandlerAttribute
                               kWindowLiveResizeAttribute
                               kWindowCompositingAttribute)
                  0
                  0
                  500
                  500)))
    (InstallWindowEventHandler handle)
    (when (is? window Desktop)
      (set! desktop window)
      (receive (x y w h) (HIWindowGetAvailablePositioningBounds)
        (WindowSetBounds handle kWindowStructureRgn (fxfloor x) (fxfloor y) (fxfloor w) (fxfloor h))))
    handle))


(definition package (destroy-window handle)
  (let ((window (get-window handle)))
    (if (is-window-HIView? window)
        (DestroyView handle)
      (DestroyWindow (HIViewGetWindow handle)))))


;;;
;;;; Messages
;;;


(definition package (process-messages-single-threaded thunk)
  (RunApplicationEventLoop))


(definition package (show-window handle)
  ;; We must fix this.
  (if (is? (get-window handle) Desktop)
      #f
    (if (is-window-HIView? (get-window handle))
        (HIViewSetVisible handle #t)
      (ShowWindow (HIViewGetWindow handle))
      (SelectWindow (HIViewGetWindow handle)))))


(definition package (show-maximized handle)
  (show-window handle))


(definition package (show-restored handle)
  (show-window handle))


(definition package (hide-window handle)
  (if (is-window-HIView? (get-window handle))
      (HIViewSetVisible handle #f)
    (HideWindow (HIViewGetWindow handle))))


(definition (convert-key char keycode)
  (case char
    ((#\x10) (case keycode
               ((122) 'F1)
               ((120) 'F2)
               ((99)  'F3)
               ((118) 'F4)
               ((96)  'F5)
               ((97)  'F6)
               ((98)  'F7)
               ((100) 'F8)))
    ((#\esc) 'Escape)
    ((#\backspace) 'Backspace)
    ((#\return) 'Return)
    ((#\space)  'Space)
    ((#\tab) 'Tab)
    ((#\x1c) 'Left)
    ((#\x1d) 'Right)
    ((#\x1e) 'Top)
    ((#\x1f) 'Down)
    (else    char)))


(definition current-mouse-x 0)
(definition current-mouse-y 0)


(definition (process-window-message handler event userdata)
  (let ((class (GetEventClass event))
        (type  (GetEventKind event)))
    (cond
      ((= class kEventClassWindow)
       (cond
         ((= type kEventWindowClose)
          (QuitApplicationEventLoop)
          noErr)
         ((= type kEventWindowBoundsChanged)
          noErr)
         (else eventNotHandledErr)))
      ((= class kEventClassMouse)
       (cond
         ((= type kEventMouseMoved)
          (let ((window (eventWindowRef event)))
            (receive (x y) (eventMouseLocation event)
              (receive (glo-x glo-y) (convertPointToGlobal window x y)
                (set! current-mouse-x glo-x)
                (set! current-mouse-y glo-y)
                (let* ((view (HIViewForPoint window x y))
                       (win (get-window view)))
                  (if win
                      (receive (x y) (convertCoordinates (HIViewGetRoot window) view x y)
                        (mouse-move~ win (flonum->fixnum x) (flonum->fixnum y))
                        noErr)
                    eventNotHandledErr))))))
         ((= type kEventMouseUp)
          (let ((window (eventWindowRef event)))
            (receive (x y) (eventMouseLocation event)
              (let* ((view (HIViewForPoint window x y))
                     (win (get-window view)))
                (if win
                    (receive (x y) (convertCoordinates (HIViewGetRoot window) view x y)
                      (mouse-up~ win (flonum->fixnum x) (flonum->fixnum y))
                      noErr)
                  eventNotHandledErr)))))
         ((= type kEventMouseDown)
          (let ((window (eventWindowRef event)))
            (receive (x y) (eventMouseLocation event)
              (let* ((view (HIViewForPoint window x y))
                     (win (get-window view)))
                (if win
                    (receive (x y) (convertCoordinates (HIViewGetRoot window) view x y)
                      (mouse-down~ win (flonum->fixnum x) (flonum->fixnum y))
                      noErr)
                  eventNotHandledErr)))))
         (else eventNotHandledErr)))
      ((= class kEventClassKeyboard)
       (cond
         ((= type kEventRawKeyDown)
          (let* ((keycode (eventKeyCode event))
                 (keyboard (eventKeyboardType event))
                 (state   (eventKeyMods    event))
                 (unmodified (unmodifiedKey keycode keyboard state))
                 (unicode (eventKeyUnicode event)))
            (let ((unmodified (convert-key unmodified keycode))
                  (unicode (convert-key unicode keycode))
                  (mods '()))
              (when (bit-set? shiftKeyBit state)   (set! mods (cons :shift mods)))
              (when (bit-set? controlKeyBit state) (set! mods (cons :control mods)))
              (when (bit-set? optionKeyBit state)  (set! mods (cons :alt mods)))
              (when (not (dispatch-shortcut~ (get-application) (new Shortcut mods unmodified)))
                (let ((unicode (if (eq? unicode 'Space) #\space unicode)))
                  (when (and unicode (char? unicode))
                    (call-key-press~ (get-current-focus) unicode))))))
          noErr)
         (else eventNotHandledErr)))
      (else eventNotHandledErr))))

(set-process-window-message process-window-message)


(definition (process-control-message handler event userdata)
  (let ((type (GetEventKind event))
        (handle (void*->HIViewRef userdata)))
    (cond ((= type kEventControlDraw)
           (let ((context (EventCGContext event)))
             (paint~ (get-window handle) (new Region (eventControlRgn event)) context))
           noErr)
          ((= type kEventControlBoundsChanged)
           (receive (left top width height) (HIViewGetBounds handle)
             (when (is? (get-window handle) Docked-Host)
               (show-window handle))
             (call-size-change~ (get-window handle) 'restored (flonum->fixnum width) (flonum->fixnum height))
             (call-position-change~ (get-window handle) (flonum->fixnum left) (flonum->fixnum top)))
           noErr)
          (else
           eventNotHandledErr))))

(set-process-control-message process-control-message)


;;;
;;;; Capture
;;;


(definition package (with-platform-painting window platform-data proc)
  (let* ((context (car platform-data))
         (surface (new Surface (cairo_quartz_surface_create_for_cg_context context (get-width~ window) (get-height~ window)))))
    (unwind-protect
        (proc surface)
      (close~ surface))))


;;;
;;;; Management
;;;


(definition package (platform-set-parent handle parent)
  (when (HIViewGetSuperview handle)
    (HIViewRemoveFromSuperview handle))
  (HIViewAddSubview (get-handle~ parent) handle))


(definition public (acquire-point to-handle from-handle shape)
  (let ((x (get-h~ shape))
        (y (get-v~ shape)))
    (receive (x y) (convertCoordinates from-handle to-handle (fixnum->flonum x) (fixnum->flonum y))
      (new Point (flonum->fixnum x) (flonum->fixnum y)))))


(definition package (platform-get-position handle parent-handle)
  (receive (left top width height) (platform-get-system-rect handle)
    (new Point (flonum->fixnum left) (flonum->fixnum top))))


(definition package (platform-set-position handle pos)
  (receive (left top width height) (platform-get-system-rect handle)
    (let ((left (get-h~ pos))
          (top (get-v~ pos)))
      (if (is-window-HIView? (get-window handle))
          (HIViewSetFrame handle (fixnum->flonum left) (fixnum->flonum top) (fixnum->flonum width) (fixnum->flonum height))
        (WindowSetBounds (HIViewGetWindow handle) kWindowContentRgn left top width height)))))


(definition package (platform-get-size handle)
  (receive (left top width height) (platform-get-system-rect handle)
    (new Dimension (flonum->fixnum width) (flonum->fixnum height))))


(definition package (platform-get-window-size handle)
  (platform-get-size handle))


(definition package (platform-get-system-rect handle)
  (cond ((is-window-HIView? (get-window handle))
         (HIViewGetFrame handle))
        (else
         (WindowGetBounds (HIViewGetWindow handle) kWindowContentRgn))))


(definition package (platform-set-window-size handle size)
  (receive (left top width height) (platform-get-system-rect handle)
    (let ((width (get-width~ size))
          (height (get-height~ size)))
      (if (is-window-HIView? (get-window handle))
          (HIViewSetFrame handle (fixnum->flonum left) (fixnum->flonum top) (fixnum->flonum width) (fixnum->flonum height))
        (WindowSetBounds (HIViewGetWindow handle) kWindowContentRgn left top width height)))))


(definition package (platform-get-rect handle parent-handle)
  (receive (left top width height) (platform-get-system-rect handle)
    (new Rect left top (+ left width) (+ top height))))


(definition package (platform-mouse-position)
  (new Point current-mouse-x current-mouse-y))


(definition package (platform-get-client-rect handle)
  (let ((size (platform-get-size handle)))
    (new Rect 0 0 (get-width~ size) (get-height~ size))))


;; Correct this to really invalidate the rect
(definition package (platform-invalidate-rect handle rect)
  (when rect
    (let ((left (fixnum->flonum (get-left~ rect)))
          (top (fixnum->flonum (get-top~ rect)))
          (right (fixnum->flonum (get-right~ rect)))
          (bottom (fixnum->flonum (get-bottom~ rect))))
      (unless (and (= 0 left) (= 0 top) (= 0 right) (= 0 bottom))
        (HIViewSetNeedsDisplayInRect handle left top (- right left) (- bottom top))))))


(definition package (platform-invalidate-window handle)
  (platform-invalidate-rect handle #f)) ;; THIS IS BROKEN!


(definition package (platform-redraw-window handle rect region)
  (if rect
      (platform-invalidate-rect handle rect)
    (platform-invalidate-region handle region))
  (HIViewRender handle)
  (HIWindowFlush (HIViewGetWindow handle)))


(method-public-override (platform-redraw-view-only view handle)
  (let* ((size (platform-get-size handle))
         (rct (new Rect 0 0 (get-width~ size) (get-height~ size))))
    (platform-invalidate-rect handle rct)))


(definition package (platform-update-window handle)
  (HIViewSetNeedsDisplay handle #t)
  (HIViewRender handle)
  (HIWindowFlush (HIViewGetWindow handle)))


(definition package (platform-bring-window-to-front handle)
  (if (is-window-HIView? (get-window handle))
      (HIViewSetZOrder handle kHIViewZOrderAbove #f)
    (SelectWindow (HIViewGetWindow handle))))


(definition package (platform-send-window-to-back handle)
  (if (is-window-HIView? (get-window handle))
      (HIViewSetZOrder handle kHIViewZOrderBelow #f)
    (SendBehind (HIViewGetWindow handle) #f)))


(definition package (platform-select-foreground-window handle)
  (makeFrontProcess)
  (SelectWindow (HIViewGetWindow handle)))


(method public override (wm-set-focus handle)
  (nextmethod handle)
  (SetUserFocusWindow (HIViewGetWindow handle)))

;; We need to find what is the correct approach to this.
(definition public (get-work-area) <Rect>
  (platform-get-rect (get-handle~ desktop) #f))

)
